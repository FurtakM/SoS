// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 837 0 0
// PrepareArabian ;
  12: CALL 1207 0 0
// PrepareAmerican ;
  16: CALL 6202 0 0
// PrepareRussian ;
  20: CALL 2163 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7762 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 366: LD_INT 0
 368: PPUSH
// uc_side := side ;
 369: LD_ADDR_OWVAR 20
 373: PUSH
 374: LD_VAR 0 1
 378: ST_TO_ADDR
// uc_nation := nation ;
 379: LD_ADDR_OWVAR 21
 383: PUSH
 384: LD_VAR 0 2
 388: ST_TO_ADDR
// vc_chassis := chassis ;
 389: LD_ADDR_OWVAR 37
 393: PUSH
 394: LD_VAR 0 3
 398: ST_TO_ADDR
// vc_engine := engine ;
 399: LD_ADDR_OWVAR 39
 403: PUSH
 404: LD_VAR 0 4
 408: ST_TO_ADDR
// vc_control := control ;
 409: LD_ADDR_OWVAR 38
 413: PUSH
 414: LD_VAR 0 5
 418: ST_TO_ADDR
// vc_weapon := weapon ;
 419: LD_ADDR_OWVAR 40
 423: PUSH
 424: LD_VAR 0 6
 428: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 429: LD_ADDR_OWVAR 41
 433: PUSH
 434: LD_VAR 0 7
 438: ST_TO_ADDR
// result := CreateVehicle ;
 439: LD_ADDR_VAR 0 8
 443: PUSH
 444: CALL_OW 45
 448: ST_TO_ADDR
// end ;
 449: LD_VAR 0 8
 453: RET
// export function SayX ( units , ident ) ; var i ; begin
 454: LD_INT 0
 456: PPUSH
 457: PPUSH
// result := false ;
 458: LD_ADDR_VAR 0 3
 462: PUSH
 463: LD_INT 0
 465: ST_TO_ADDR
// if not units then
 466: LD_VAR 0 1
 470: NOT
 471: IFFALSE 475
// exit ;
 473: GO 529
// for i in units do
 475: LD_ADDR_VAR 0 4
 479: PUSH
 480: LD_VAR 0 1
 484: PUSH
 485: FOR_IN
 486: IFFALSE 527
// if IsOk ( i ) then
 488: LD_VAR 0 4
 492: PPUSH
 493: CALL_OW 302
 497: IFFALSE 525
// begin Say ( i , ident ) ;
 499: LD_VAR 0 4
 503: PPUSH
 504: LD_VAR 0 2
 508: PPUSH
 509: CALL_OW 88
// result := i ;
 513: LD_ADDR_VAR 0 3
 517: PUSH
 518: LD_VAR 0 4
 522: ST_TO_ADDR
// break ;
 523: GO 527
// end ;
 525: GO 485
 527: POP
 528: POP
// end ;
 529: LD_VAR 0 3
 533: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 534: LD_INT 0
 536: PPUSH
 537: PPUSH
 538: PPUSH
// if not observer or not unit then
 539: LD_VAR 0 1
 543: NOT
 544: PUSH
 545: LD_VAR 0 2
 549: NOT
 550: OR
 551: IFFALSE 555
// exit ;
 553: GO 603
// if not See ( GetSide ( observer ) , unit ) then
 555: LD_VAR 0 1
 559: PPUSH
 560: CALL_OW 255
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 292
 574: NOT
 575: IFFALSE 579
// exit ;
 577: GO 603
// result := GetDistUnits ( observer , unit ) < 12 ;
 579: LD_ADDR_VAR 0 3
 583: PUSH
 584: LD_VAR 0 1
 588: PPUSH
 589: LD_VAR 0 2
 593: PPUSH
 594: CALL_OW 296
 598: PUSH
 599: LD_INT 12
 601: LESS
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 3
 607: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 608: LD_INT 0
 610: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 611: LD_VAR 0 2
 615: PUSH
 616: LD_INT 1
 618: ARRAY
 619: PPUSH
 620: LD_VAR 0 2
 624: PUSH
 625: LD_INT 2
 627: ARRAY
 628: PPUSH
 629: CALL_OW 488
 633: PUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: LD_VAR 0 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: PPUSH
 652: CALL_OW 428
 656: PUSH
 657: LD_INT 0
 659: EQUAL
 660: AND
 661: IFFALSE 695
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 663: LD_VAR 0 1
 667: PPUSH
 668: LD_VAR 0 2
 672: PUSH
 673: LD_INT 1
 675: ARRAY
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 2
 684: ARRAY
 685: PPUSH
 686: LD_VAR 0 3
 690: PPUSH
 691: CALL_OW 48
// end ;
 695: LD_VAR 0 4
 699: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 700: LD_INT 0
 702: PPUSH
 703: PPUSH
// InitUc ;
 704: CALL_OW 18
// InitHc ;
 708: CALL_OW 19
// uc_side := 0 ;
 712: LD_ADDR_OWVAR 20
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// uc_nation := 0 ;
 720: LD_ADDR_OWVAR 21
 724: PUSH
 725: LD_INT 0
 727: ST_TO_ADDR
// for i = 1 to amount do
 728: LD_ADDR_VAR 0 4
 732: PUSH
 733: DOUBLE
 734: LD_INT 1
 736: DEC
 737: ST_TO_ADDR
 738: LD_VAR 0 2
 742: PUSH
 743: FOR_TO
 744: IFFALSE 826
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 746: LD_ADDR_OWVAR 29
 750: PUSH
 751: LD_INT 9
 753: PPUSH
 754: LD_INT 12
 756: PPUSH
 757: CALL_OW 12
 761: PUSH
 762: LD_INT 9
 764: PPUSH
 765: LD_INT 12
 767: PPUSH
 768: CALL_OW 12
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 777: LD_ADDR_OWVAR 35
 781: PUSH
 782: LD_INT 1
 784: NEG
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL_OW 12
 793: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 794: LD_INT 0
 796: PPUSH
 797: LD_INT 12
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 807: CALL_OW 44
 811: PPUSH
 812: LD_VAR 0 1
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// end ;
 824: GO 743
 826: POP
 827: POP
// InitHc ;
 828: CALL_OW 19
// end ;
 832: LD_VAR 0 3
 836: RET
// export function CreateNature ; var i ; begin
 837: LD_INT 0
 839: PPUSH
 840: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
 841: LD_INT 18
 843: PPUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 4
 849: PUSH
 850: LD_INT 3
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: PUSH
 858: LD_OWVAR 67
 862: ARRAY
 863: PPUSH
 864: CALL 700 0 2
// for i := 1 to 3 do
 868: LD_ADDR_VAR 0 2
 872: PUSH
 873: DOUBLE
 874: LD_INT 1
 876: DEC
 877: ST_TO_ADDR
 878: LD_INT 3
 880: PUSH
 881: FOR_TO
 882: IFFALSE 917
// begin hc_class := 21 ;
 884: LD_ADDR_OWVAR 28
 888: PUSH
 889: LD_INT 21
 891: ST_TO_ADDR
// hc_gallery :=  ;
 892: LD_ADDR_OWVAR 33
 896: PUSH
 897: LD_STRING 
 899: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 900: CALL_OW 44
 904: PPUSH
 905: LD_INT 18
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 881
 917: POP
 918: POP
// for i := 1 to 2 do
 919: LD_ADDR_VAR 0 2
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 2
 931: PUSH
 932: FOR_TO
 933: IFFALSE 968
// begin hc_class := 18 ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 18
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_INT 18
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 49
// end ;
 966: GO 932
 968: POP
 969: POP
// for i := 1 to 2 do
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: DOUBLE
 976: LD_INT 1
 978: DEC
 979: ST_TO_ADDR
 980: LD_INT 2
 982: PUSH
 983: FOR_TO
 984: IFFALSE 1019
// begin hc_class := 13 ;
 986: LD_ADDR_OWVAR 28
 990: PUSH
 991: LD_INT 13
 993: ST_TO_ADDR
// hc_gallery :=  ;
 994: LD_ADDR_OWVAR 33
 998: PUSH
 999: LD_STRING 
1001: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1002: CALL_OW 44
1006: PPUSH
1007: LD_INT 18
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// end ;
1017: GO 983
1019: POP
1020: POP
// end ;
1021: LD_VAR 0 1
1025: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1026: LD_INT 0
1028: PPUSH
1029: PPUSH
1030: PPUSH
1031: PPUSH
1032: PPUSH
// result := false ;
1033: LD_ADDR_VAR 0 4
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if not sideList or not enemySide then
1041: LD_VAR 0 1
1045: NOT
1046: PUSH
1047: LD_VAR 0 2
1051: NOT
1052: OR
1053: IFFALSE 1057
// exit ;
1055: GO 1202
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1057: LD_ADDR_VAR 0 7
1061: PUSH
1062: LD_INT 22
1064: PUSH
1065: LD_VAR 0 2
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PPUSH
1074: CALL_OW 69
1078: ST_TO_ADDR
// if not tmp then
1079: LD_VAR 0 7
1083: NOT
1084: IFFALSE 1088
// exit ;
1086: GO 1202
// for s in sideList do
1088: LD_ADDR_VAR 0 6
1092: PUSH
1093: LD_VAR 0 1
1097: PUSH
1098: FOR_IN
1099: IFFALSE 1200
// for i in tmp do
1101: LD_ADDR_VAR 0 5
1105: PUSH
1106: LD_VAR 0 7
1110: PUSH
1111: FOR_IN
1112: IFFALSE 1196
// if See ( s , i ) then
1114: LD_VAR 0 6
1118: PPUSH
1119: LD_VAR 0 5
1123: PPUSH
1124: CALL_OW 292
1128: IFFALSE 1194
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1130: LD_ADDR_VAR 0 8
1134: PUSH
1135: LD_INT 22
1137: PUSH
1138: LD_VAR 0 6
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PPUSH
1147: CALL_OW 69
1151: PPUSH
1152: LD_VAR 0 5
1156: PPUSH
1157: CALL_OW 74
1161: ST_TO_ADDR
// if tmp2 in exceptUnits then
1162: LD_VAR 0 8
1166: PUSH
1167: LD_VAR 0 3
1171: IN
1172: IFFALSE 1178
// continue else
1174: GO 1111
1176: GO 1194
// begin result := tmp2 ;
1178: LD_ADDR_VAR 0 4
1182: PUSH
1183: LD_VAR 0 8
1187: ST_TO_ADDR
// exit ;
1188: POP
1189: POP
1190: POP
1191: POP
1192: GO 1202
// end ; end ;
1194: GO 1111
1196: POP
1197: POP
1198: GO 1098
1200: POP
1201: POP
// end ; end_of_file
1202: LD_VAR 0 4
1206: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1207: LD_INT 0
1209: PPUSH
1210: PPUSH
// uc_side := 5 ;
1211: LD_ADDR_OWVAR 20
1215: PUSH
1216: LD_INT 5
1218: ST_TO_ADDR
// uc_nation := 2 ;
1219: LD_ADDR_OWVAR 21
1223: PUSH
1224: LD_INT 2
1226: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1227: LD_ADDR_EXP 36
1231: PUSH
1232: LD_STRING Abdul
1234: PPUSH
1235: LD_INT 0
1237: PPUSH
1238: LD_STRING 
1240: PPUSH
1241: CALL 34416 0 3
1245: ST_TO_ADDR
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 25
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 34416 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 28
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 34416 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 26
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 34416 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 29
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 34416 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 30
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 34416 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 31
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 34416 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 32
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 34416 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 35
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 34416 0 3
1453: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1454: LD_ADDR_EXP 39
1458: PUSH
1459: EMPTY
1460: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1461: LD_ADDR_EXP 37
1465: PUSH
1466: LD_STRING 03_others
1468: PPUSH
1469: CALL_OW 31
1473: ST_TO_ADDR
// uc_side := 5 ;
1474: LD_ADDR_OWVAR 20
1478: PUSH
1479: LD_INT 5
1481: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1482: LD_ADDR_EXP 34
1486: PUSH
1487: LD_STRING Kurt
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_STRING 
1495: PPUSH
1496: CALL 34416 0 3
1500: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Mike
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34416 0 3
1524: ST_TO_ADDR
// if Mike then
1525: LD_EXP 27
1529: IFFALSE 1552
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1531: LD_EXP 27
1535: PPUSH
1536: LD_INT 142
1538: PPUSH
1539: LD_INT 63
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1552: LD_EXP 34
1556: PPUSH
1557: LD_INT 142
1559: PPUSH
1560: LD_INT 63
1562: PPUSH
1563: LD_INT 3
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1573: LD_EXP 34
1577: PUSH
1578: LD_EXP 27
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PPUSH
1587: CALL_OW 140
// end ;
1591: LD_VAR 0 1
1595: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1596: LD_INT 0
1598: PPUSH
1599: PPUSH
1600: PPUSH
1601: PPUSH
// uc_side := 5 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 5
1609: ST_TO_ADDR
// uc_nation := 2 ;
1610: LD_ADDR_OWVAR 21
1614: PUSH
1615: LD_INT 2
1617: ST_TO_ADDR
// InitHc ;
1618: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1622: LD_ADDR_EXP 33
1626: PUSH
1627: LD_STRING Omar
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: LD_STRING 
1635: PPUSH
1636: CALL 34416 0 3
1640: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1641: LD_EXP 33
1645: PPUSH
1646: LD_INT 284
1648: PPUSH
1649: LD_INT 163
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1659: LD_EXP 33
1663: PPUSH
1664: LD_INT 256
1666: PPUSH
1667: LD_INT 129
1669: PPUSH
1670: CALL_OW 111
// wait ( 0 0$2 ) ;
1674: LD_INT 70
1676: PPUSH
1677: CALL_OW 67
// omarSquad := [ ] ;
1681: LD_ADDR_EXP 38
1685: PUSH
1686: EMPTY
1687: ST_TO_ADDR
// for i := 1 to 5 do
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: DOUBLE
1694: LD_INT 1
1696: DEC
1697: ST_TO_ADDR
1698: LD_INT 5
1700: PUSH
1701: FOR_TO
1702: IFFALSE 1908
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1704: LD_INT 5
1706: PPUSH
1707: LD_INT 2
1709: PPUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 14
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_VAR 0 2
1724: PUSH
1725: LD_INT 2
1727: MOD
1728: PUSH
1729: LD_INT 1
1731: PLUS
1732: ARRAY
1733: PPUSH
1734: LD_INT 1
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: LD_INT 25
1742: PUSH
1743: LD_INT 27
1745: PUSH
1746: LD_INT 26
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: LD_VAR 0 2
1758: PUSH
1759: LD_INT 3
1761: MOD
1762: PUSH
1763: LD_INT 1
1765: PLUS
1766: ARRAY
1767: PPUSH
1768: LD_INT 100
1770: PPUSH
1771: CALL 366 0 7
// veh := CreateVehicle ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1785: LD_VAR 0 4
1789: PPUSH
1790: LD_INT 5
1792: PPUSH
1793: CALL_OW 233
// omarSquad := omarSquad union veh ;
1797: LD_ADDR_EXP 38
1801: PUSH
1802: LD_EXP 38
1806: PUSH
1807: LD_VAR 0 4
1811: UNION
1812: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1813: LD_VAR 0 4
1817: PPUSH
1818: LD_INT 284
1820: PPUSH
1821: LD_INT 163
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1831: LD_INT 0
1833: PPUSH
1834: LD_INT 3
1836: PPUSH
1837: LD_INT 2
1839: PPUSH
1840: CALL_OW 380
// un := CreateHuman ;
1844: LD_ADDR_VAR 0 3
1848: PUSH
1849: CALL_OW 44
1853: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1854: LD_ADDR_EXP 38
1858: PUSH
1859: LD_EXP 38
1863: PUSH
1864: LD_VAR 0 3
1868: UNION
1869: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1870: LD_VAR 0 3
1874: PPUSH
1875: LD_VAR 0 4
1879: PPUSH
1880: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1884: LD_VAR 0 3
1888: PPUSH
1889: LD_INT 271
1891: PPUSH
1892: LD_INT 144
1894: PPUSH
1895: CALL_OW 111
// wait ( 0 0$2 ) ;
1899: LD_INT 70
1901: PPUSH
1902: CALL_OW 67
// end ;
1906: GO 1701
1908: POP
1909: POP
// for i := 1 to 3 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 3
1922: PUSH
1923: FOR_TO
1924: IFFALSE 2007
// begin PrepareHuman ( false , 1 , 2 ) ;
1926: LD_INT 0
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: LD_INT 2
1934: PPUSH
1935: CALL_OW 380
// un := CreateHuman ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: CALL_OW 44
1948: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1949: LD_ADDR_EXP 38
1953: PUSH
1954: LD_EXP 38
1958: PUSH
1959: LD_VAR 0 3
1963: UNION
1964: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1965: LD_VAR 0 3
1969: PPUSH
1970: LD_INT 284
1972: PPUSH
1973: LD_INT 163
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 257
1990: PPUSH
1991: LD_INT 138
1993: PPUSH
1994: CALL_OW 111
// wait ( 0 0$1 ) ;
1998: LD_INT 35
2000: PPUSH
2001: CALL_OW 67
// end ;
2005: GO 1923
2007: POP
2008: POP
// for i := 1 to 6 do
2009: LD_ADDR_VAR 0 2
2013: PUSH
2014: DOUBLE
2015: LD_INT 1
2017: DEC
2018: ST_TO_ADDR
2019: LD_INT 6
2021: PUSH
2022: FOR_TO
2023: IFFALSE 2156
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PUSH
2031: LD_INT 1
2033: PUSH
2034: LD_INT 4
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: PUSH
2042: LD_VAR 0 2
2046: PUSH
2047: LD_INT 3
2049: MOD
2050: PUSH
2051: LD_INT 1
2053: PLUS
2054: ARRAY
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: CALL_OW 380
// un := CreateHuman ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 44
2072: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2073: LD_ADDR_EXP 38
2077: PUSH
2078: LD_EXP 38
2082: PUSH
2083: LD_VAR 0 3
2087: UNION
2088: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_INT 225
2096: PPUSH
2097: LD_INT 163
2099: PPUSH
2100: LD_INT 0
2102: PPUSH
2103: CALL_OW 48
// if i = 1 then
2107: LD_VAR 0 2
2111: PUSH
2112: LD_INT 1
2114: EQUAL
2115: IFFALSE 2132
// SetAttr ( un , attr_speed , 12 ) ;
2117: LD_VAR 0 3
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: LD_INT 12
2127: PPUSH
2128: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2132: LD_VAR 0 3
2136: PPUSH
2137: LD_INT 222
2139: PPUSH
2140: LD_INT 157
2142: PPUSH
2143: CALL_OW 111
// wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// end ;
2154: GO 2022
2156: POP
2157: POP
// end ; end_of_file
2158: LD_VAR 0 1
2162: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2163: LD_INT 0
2165: PPUSH
2166: PPUSH
2167: PPUSH
2168: PPUSH
2169: PPUSH
2170: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2171: LD_INT 3
2173: PPUSH
2174: LD_INT 149
2176: PPUSH
2177: LD_INT 67
2179: PPUSH
2180: CALL_OW 428
2184: PPUSH
2185: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2189: LD_ADDR_EXP 50
2193: PUSH
2194: LD_INT 111
2196: PPUSH
2197: LD_INT 89
2199: PPUSH
2200: CALL_OW 428
2204: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: LD_INT 21
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 23
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: FOR_IN
2240: IFFALSE 2256
// SetBLevel ( i , 5 ) ;
2242: LD_VAR 0 2
2246: PPUSH
2247: LD_INT 5
2249: PPUSH
2250: CALL_OW 241
2254: GO 2239
2256: POP
2257: POP
// SetBName ( kirov , kirov ) ;
2258: LD_INT 71
2260: PPUSH
2261: LD_STRING kirov
2263: PPUSH
2264: CALL_OW 500
// SetBName ( beria , beria ) ;
2268: LD_INT 106
2270: PPUSH
2271: LD_STRING beria
2273: PPUSH
2274: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2278: LD_INT 112
2280: PPUSH
2281: LD_STRING kagan
2283: PPUSH
2284: CALL_OW 500
// uc_side := 6 ;
2288: LD_ADDR_OWVAR 20
2292: PUSH
2293: LD_INT 6
2295: ST_TO_ADDR
// uc_nation := 3 ;
2296: LD_ADDR_OWVAR 21
2300: PUSH
2301: LD_INT 3
2303: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2304: LD_ADDR_VAR 0 5
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 6
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 30
2321: PUSH
2322: LD_INT 5
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2342: LD_ADDR_VAR 0 4
2346: PUSH
2347: LD_INT 22
2349: PUSH
2350: LD_INT 6
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 30
2359: PUSH
2360: LD_INT 4
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PPUSH
2371: CALL_OW 69
2375: PUSH
2376: LD_INT 1
2378: ARRAY
2379: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2380: LD_ADDR_EXP 44
2384: PUSH
2385: EMPTY
2386: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2387: LD_ADDR_EXP 45
2391: PUSH
2392: EMPTY
2393: ST_TO_ADDR
// russianPatrol := [ ] ;
2394: LD_ADDR_EXP 47
2398: PUSH
2399: EMPTY
2400: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2401: LD_ADDR_EXP 40
2405: PUSH
2406: LD_STRING Kurin
2408: PPUSH
2409: LD_INT 0
2411: PPUSH
2412: LD_STRING 
2414: PPUSH
2415: CALL 34416 0 3
2419: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2420: LD_EXP 40
2424: PPUSH
2425: LD_INT 71
2427: PPUSH
2428: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2432: LD_ADDR_EXP 42
2436: PUSH
2437: LD_STRING Popov
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: LD_STRING 
2445: PPUSH
2446: CALL 34416 0 3
2450: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2451: LD_EXP 42
2455: PPUSH
2456: LD_INT 71
2458: PPUSH
2459: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Grishko
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 34416 0 3
2481: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 207
2489: PPUSH
2490: LD_INT 106
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2500: LD_EXP 41
2504: PPUSH
2505: LD_INT 209
2507: PPUSH
2508: LD_INT 106
2510: PPUSH
2511: CALL_OW 118
// for i := 1 to 2 do
2515: LD_ADDR_VAR 0 2
2519: PUSH
2520: DOUBLE
2521: LD_INT 1
2523: DEC
2524: ST_TO_ADDR
2525: LD_INT 2
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2584
// begin PrepareHuman ( false , 2 , 2 ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 2
2536: PPUSH
2537: LD_INT 2
2539: PPUSH
2540: CALL_OW 380
// un := CreateHuman ;
2544: LD_ADDR_VAR 0 3
2548: PUSH
2549: CALL_OW 44
2553: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 71
2561: PPUSH
2562: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_EXP 44
2575: PUSH
2576: LD_VAR 0 3
2580: UNION
2581: ST_TO_ADDR
// end ;
2582: GO 2528
2584: POP
2585: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
2586: LD_ADDR_VAR 0 2
2590: PUSH
2591: DOUBLE
2592: LD_INT 1
2594: DEC
2595: ST_TO_ADDR
2596: LD_INT 5
2598: PUSH
2599: LD_INT 6
2601: PUSH
2602: LD_INT 6
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: LIST
2609: PUSH
2610: LD_OWVAR 67
2614: ARRAY
2615: PUSH
2616: FOR_TO
2617: IFFALSE 2691
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
2619: LD_INT 0
2621: PPUSH
2622: LD_INT 1
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 3
2630: PUSH
2631: LD_INT 4
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: PUSH
2639: LD_OWVAR 67
2643: ARRAY
2644: PPUSH
2645: CALL_OW 380
// un := CreateHuman ;
2649: LD_ADDR_VAR 0 3
2653: PUSH
2654: CALL_OW 44
2658: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 5
2668: PPUSH
2669: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2673: LD_ADDR_EXP 44
2677: PUSH
2678: LD_EXP 44
2682: PUSH
2683: LD_VAR 0 3
2687: UNION
2688: ST_TO_ADDR
// end ;
2689: GO 2616
2691: POP
2692: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 6
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 30
2710: PUSH
2711: LD_INT 32
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: CALL_OW 69
2726: PUSH
2727: FOR_IN
2728: IFFALSE 2802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
2730: LD_INT 0
2732: PPUSH
2733: LD_INT 1
2735: PPUSH
2736: LD_INT 3
2738: PUSH
2739: LD_INT 4
2741: PUSH
2742: LD_INT 4
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: LD_OWVAR 67
2754: ARRAY
2755: PPUSH
2756: CALL_OW 380
// un := CreateHuman ;
2760: LD_ADDR_VAR 0 3
2764: PUSH
2765: CALL_OW 44
2769: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2770: LD_VAR 0 3
2774: PPUSH
2775: LD_VAR 0 2
2779: PPUSH
2780: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2784: LD_ADDR_EXP 44
2788: PUSH
2789: LD_EXP 44
2793: PUSH
2794: LD_VAR 0 3
2798: UNION
2799: ST_TO_ADDR
// end ;
2800: GO 2727
2802: POP
2803: POP
// for i := 1 to 3 do
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: DOUBLE
2810: LD_INT 1
2812: DEC
2813: ST_TO_ADDR
2814: LD_INT 3
2816: PUSH
2817: FOR_TO
2818: IFFALSE 2873
// begin PrepareHuman ( false , 3 , 3 ) ;
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 3
2825: PPUSH
2826: LD_INT 3
2828: PPUSH
2829: CALL_OW 380
// un := CreateHuman ;
2833: LD_ADDR_VAR 0 3
2837: PUSH
2838: CALL_OW 44
2842: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 92
2850: PPUSH
2851: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2855: LD_ADDR_EXP 44
2859: PUSH
2860: LD_EXP 44
2864: PUSH
2865: LD_VAR 0 3
2869: UNION
2870: ST_TO_ADDR
// end ;
2871: GO 2817
2873: POP
2874: POP
// for i := 1 to 2 do
2875: LD_ADDR_VAR 0 2
2879: PUSH
2880: DOUBLE
2881: LD_INT 1
2883: DEC
2884: ST_TO_ADDR
2885: LD_INT 2
2887: PUSH
2888: FOR_TO
2889: IFFALSE 2944
// begin PrepareHuman ( false , 4 , 3 ) ;
2891: LD_INT 0
2893: PPUSH
2894: LD_INT 4
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 380
// un := CreateHuman ;
2904: LD_ADDR_VAR 0 3
2908: PUSH
2909: CALL_OW 44
2913: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2914: LD_VAR 0 3
2918: PPUSH
2919: LD_INT 83
2921: PPUSH
2922: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2926: LD_ADDR_EXP 44
2930: PUSH
2931: LD_EXP 44
2935: PUSH
2936: LD_VAR 0 3
2940: UNION
2941: ST_TO_ADDR
// end ;
2942: GO 2888
2944: POP
2945: POP
// for i := 1 to 5 do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 5
2958: PUSH
2959: FOR_TO
2960: IFFALSE 3017
// begin PrepareHuman ( false , 1 , 3 ) ;
2962: LD_INT 0
2964: PPUSH
2965: LD_INT 1
2967: PPUSH
2968: LD_INT 3
2970: PPUSH
2971: CALL_OW 380
// un := CreateHuman ;
2975: LD_ADDR_VAR 0 3
2979: PUSH
2980: CALL_OW 44
2984: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
2999: LD_ADDR_EXP 46
3003: PUSH
3004: LD_EXP 46
3008: PUSH
3009: LD_VAR 0 3
3013: UNION
3014: ST_TO_ADDR
// end ;
3015: GO 2959
3017: POP
3018: POP
// russianCargo := [ ] ;
3019: LD_ADDR_EXP 49
3023: PUSH
3024: EMPTY
3025: ST_TO_ADDR
// for i := 1 to 2 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 2
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3172
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3042: LD_INT 6
3044: PPUSH
3045: LD_INT 3
3047: PPUSH
3048: LD_INT 21
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 1
3056: PPUSH
3057: LD_INT 51
3059: PPUSH
3060: LD_INT 100
3062: PPUSH
3063: CALL 366 0 7
// un := CreateVehicle ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: CALL_OW 45
3076: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3077: LD_ADDR_EXP 49
3081: PUSH
3082: LD_EXP 49
3086: PUSH
3087: LD_VAR 0 3
3091: UNION
3092: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3093: LD_VAR 0 3
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: LD_INT 100
3103: PPUSH
3104: CALL_OW 290
// SetDir ( un , 4 ) ;
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_INT 4
3115: PPUSH
3116: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3120: LD_VAR 0 3
3124: PPUSH
3125: LD_INT 147
3127: PPUSH
3128: LD_INT 103
3130: PPUSH
3131: LD_INT 4
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3141: LD_INT 0
3143: PPUSH
3144: LD_INT 1
3146: PPUSH
3147: LD_OWVAR 67
3151: PPUSH
3152: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3156: CALL_OW 44
3160: PPUSH
3161: LD_VAR 0 3
3165: PPUSH
3166: CALL_OW 52
// end ;
3170: GO 3039
3172: POP
3173: POP
// uc_side := 3 ;
3174: LD_ADDR_OWVAR 20
3178: PUSH
3179: LD_INT 3
3181: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3182: LD_ADDR_EXP 43
3186: PUSH
3187: LD_STRING Burlak
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: LD_STRING 
3195: PPUSH
3196: CALL 34416 0 3
3200: ST_TO_ADDR
// for i := 1 to 5 do
3201: LD_ADDR_VAR 0 2
3205: PUSH
3206: DOUBLE
3207: LD_INT 1
3209: DEC
3210: ST_TO_ADDR
3211: LD_INT 5
3213: PUSH
3214: FOR_TO
3215: IFFALSE 3308
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3217: LD_INT 0
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: LD_OWVAR 67
3227: PUSH
3228: LD_INT 1
3230: PLUS
3231: PPUSH
3232: CALL_OW 380
// un := CreateHuman ;
3236: LD_ADDR_VAR 0 3
3240: PUSH
3241: CALL_OW 44
3245: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 3
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 30
3263: PUSH
3264: LD_INT 32
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PUSH
3280: LD_VAR 0 2
3284: ARRAY
3285: PPUSH
3286: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3290: LD_ADDR_EXP 45
3294: PUSH
3295: LD_EXP 45
3299: PUSH
3300: LD_VAR 0 3
3304: UNION
3305: ST_TO_ADDR
// end ;
3306: GO 3214
3308: POP
3309: POP
// for i := 1 to 2 do
3310: LD_ADDR_VAR 0 2
3314: PUSH
3315: DOUBLE
3316: LD_INT 1
3318: DEC
3319: ST_TO_ADDR
3320: LD_INT 2
3322: PUSH
3323: FOR_TO
3324: IFFALSE 3415
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3326: LD_INT 0
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: LD_OWVAR 67
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: PPUSH
3341: CALL_OW 380
// un := CreateHuman ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3355: LD_VAR 0 3
3359: PPUSH
3360: LD_INT 22
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 5
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 69
3388: PUSH
3389: LD_INT 1
3391: ARRAY
3392: PPUSH
3393: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3397: LD_ADDR_EXP 45
3401: PUSH
3402: LD_EXP 45
3406: PUSH
3407: LD_VAR 0 3
3411: UNION
3412: ST_TO_ADDR
// end ;
3413: GO 3323
3415: POP
3416: POP
// for i := 1 to 2 do
3417: LD_ADDR_VAR 0 2
3421: PUSH
3422: DOUBLE
3423: LD_INT 1
3425: DEC
3426: ST_TO_ADDR
3427: LD_INT 2
3429: PUSH
3430: FOR_TO
3431: IFFALSE 3518
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3433: LD_INT 0
3435: PPUSH
3436: LD_INT 4
3438: PPUSH
3439: LD_OWVAR 67
3443: PPUSH
3444: CALL_OW 380
// un := CreateHuman ;
3448: LD_ADDR_VAR 0 3
3452: PUSH
3453: CALL_OW 44
3457: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 30
3475: PUSH
3476: LD_INT 7
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PUSH
3492: LD_INT 1
3494: ARRAY
3495: PPUSH
3496: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3500: LD_ADDR_EXP 45
3504: PUSH
3505: LD_EXP 45
3509: PUSH
3510: LD_VAR 0 3
3514: UNION
3515: ST_TO_ADDR
// end ;
3516: GO 3430
3518: POP
3519: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3520: LD_INT 0
3522: PPUSH
3523: LD_INT 2
3525: PPUSH
3526: LD_OWVAR 67
3530: PPUSH
3531: CALL_OW 380
// un := CreateHuman ;
3535: LD_ADDR_VAR 0 3
3539: PUSH
3540: CALL_OW 44
3544: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3545: LD_VAR 0 3
3549: PPUSH
3550: LD_INT 106
3552: PPUSH
3553: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3557: LD_ADDR_EXP 45
3561: PUSH
3562: LD_EXP 45
3566: PUSH
3567: LD_VAR 0 3
3571: UNION
3572: ST_TO_ADDR
// for i := 1 to 3 do
3573: LD_ADDR_VAR 0 2
3577: PUSH
3578: DOUBLE
3579: LD_INT 1
3581: DEC
3582: ST_TO_ADDR
3583: LD_INT 3
3585: PUSH
3586: FOR_TO
3587: IFFALSE 3709
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3589: LD_ADDR_VAR 0 6
3593: PUSH
3594: LD_INT 22
3596: PUSH
3597: LD_INT 3
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 30
3606: PUSH
3607: LD_INT 31
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: PPUSH
3618: CALL_OW 69
3622: PUSH
3623: LD_VAR 0 2
3627: ARRAY
3628: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3629: LD_INT 0
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: LD_OWVAR 67
3639: PPUSH
3640: CALL_OW 380
// un := CreateHuman ;
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: CALL_OW 44
3653: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: LD_VAR 0 6
3663: PPUSH
3664: CALL_OW 254
3668: PUSH
3669: LD_INT 3
3671: PLUS
3672: PPUSH
3673: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: LD_VAR 0 6
3686: PPUSH
3687: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3691: LD_ADDR_EXP 45
3695: PUSH
3696: LD_EXP 45
3700: PUSH
3701: LD_VAR 0 3
3705: UNION
3706: ST_TO_ADDR
// end ;
3707: GO 3586
3709: POP
3710: POP
// if Difficulty > 1 then
3711: LD_OWVAR 67
3715: PUSH
3716: LD_INT 1
3718: GREATER
3719: IFFALSE 3794
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 23
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: LD_INT 44
3743: PPUSH
3744: LD_INT 100
3746: PPUSH
3747: CALL 366 0 7
3751: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 73
3759: PPUSH
3760: LD_INT 110
3762: PPUSH
3763: LD_INT 0
3765: PPUSH
3766: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3770: LD_INT 0
3772: PPUSH
3773: LD_INT 3
3775: PPUSH
3776: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3780: CALL_OW 44
3784: PPUSH
3785: LD_VAR 0 3
3789: PPUSH
3790: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3794: LD_ADDR_EXP 48
3798: PUSH
3799: EMPTY
3800: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
3801: LD_ADDR_VAR 0 2
3805: PUSH
3806: DOUBLE
3807: LD_INT 1
3809: DEC
3810: ST_TO_ADDR
3811: LD_INT 6
3813: PUSH
3814: LD_INT 7
3816: PUSH
3817: LD_INT 8
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: PUSH
3825: LD_OWVAR 67
3829: ARRAY
3830: PUSH
3831: FOR_TO
3832: IFFALSE 4056
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3834: LD_INT 3
3836: PPUSH
3837: LD_INT 3
3839: PPUSH
3840: LD_INT 21
3842: PUSH
3843: LD_INT 23
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_VAR 0 2
3854: PUSH
3855: LD_INT 2
3857: MOD
3858: PUSH
3859: LD_INT 1
3861: PLUS
3862: ARRAY
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 1
3869: PPUSH
3870: LD_INT 43
3872: PUSH
3873: LD_INT 44
3875: PUSH
3876: LD_INT 42
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: LD_INT 3
3891: MOD
3892: PUSH
3893: LD_INT 1
3895: PLUS
3896: ARRAY
3897: PPUSH
3898: LD_INT 100
3900: PPUSH
3901: CALL 366 0 7
// un := CreateVehicle ;
3905: LD_ADDR_VAR 0 3
3909: PUSH
3910: CALL_OW 45
3914: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 0
3922: PUSH
3923: LD_INT 5
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 2
3935: PPUSH
3936: CALL_OW 12
3940: ARRAY
3941: PPUSH
3942: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3946: LD_ADDR_EXP 48
3950: PUSH
3951: LD_EXP 48
3955: PUSH
3956: LD_VAR 0 3
3960: UNION
3961: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 127
3969: PPUSH
3970: LD_INT 89
3972: PPUSH
3973: LD_INT 7
3975: PPUSH
3976: LD_INT 0
3978: PPUSH
3979: CALL_OW 50
// uc_side := 3 ;
3983: LD_ADDR_OWVAR 20
3987: PUSH
3988: LD_INT 3
3990: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
3991: LD_INT 0
3993: PPUSH
3994: LD_INT 3
3996: PPUSH
3997: LD_INT 3
3999: PPUSH
4000: CALL_OW 380
// un := CreateHuman ;
4004: LD_ADDR_VAR 0 3
4008: PUSH
4009: CALL_OW 44
4013: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4014: LD_ADDR_EXP 48
4018: PUSH
4019: LD_EXP 48
4023: PUSH
4024: LD_VAR 0 3
4028: UNION
4029: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4030: LD_VAR 0 3
4034: PPUSH
4035: LD_EXP 48
4039: PUSH
4040: LD_EXP 48
4044: PUSH
4045: LD_INT 1
4047: MINUS
4048: ARRAY
4049: PPUSH
4050: CALL_OW 52
// end ;
4054: GO 3831
4056: POP
4057: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4058: LD_ADDR_VAR 0 2
4062: PUSH
4063: DOUBLE
4064: LD_INT 1
4066: DEC
4067: ST_TO_ADDR
4068: LD_INT 3
4070: PUSH
4071: LD_INT 4
4073: PUSH
4074: LD_INT 5
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_OWVAR 67
4086: ARRAY
4087: PUSH
4088: FOR_TO
4089: IFFALSE 4155
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4091: LD_INT 0
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: LD_OWVAR 67
4101: PPUSH
4102: CALL_OW 380
// un := CreateHuman ;
4106: LD_ADDR_VAR 0 3
4110: PUSH
4111: CALL_OW 44
4115: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4116: LD_ADDR_EXP 48
4120: PUSH
4121: LD_EXP 48
4125: PUSH
4126: LD_VAR 0 3
4130: UNION
4131: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4132: LD_VAR 0 3
4136: PPUSH
4137: LD_INT 91
4139: PPUSH
4140: LD_INT 60
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 0
4148: PPUSH
4149: CALL_OW 50
// end ;
4153: GO 4088
4155: POP
4156: POP
// end ;
4157: LD_VAR 0 1
4161: RET
// every 0 0$3 do var i ;
4162: GO 4164
4164: DISABLE
4165: LD_INT 0
4167: PPUSH
// begin for i := 1 to 4 do
4168: LD_ADDR_VAR 0 1
4172: PUSH
4173: DOUBLE
4174: LD_INT 1
4176: DEC
4177: ST_TO_ADDR
4178: LD_INT 4
4180: PUSH
4181: FOR_TO
4182: IFFALSE 4201
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4184: LD_EXP 46
4188: PUSH
4189: LD_VAR 0 1
4193: ARRAY
4194: PPUSH
4195: CALL_OW 122
4199: GO 4181
4201: POP
4202: POP
// wait ( 3 ) ;
4203: LD_INT 3
4205: PPUSH
4206: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4210: LD_EXP 46
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: LD_INT 22
4221: PUSH
4222: LD_INT 6
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 30
4231: PUSH
4232: LD_INT 31
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: PPUSH
4248: LD_EXP 46
4252: PUSH
4253: LD_INT 1
4255: ARRAY
4256: PPUSH
4257: CALL_OW 74
4261: PPUSH
4262: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4266: LD_EXP 46
4270: PUSH
4271: LD_INT 2
4273: ARRAY
4274: PPUSH
4275: LD_INT 211
4277: PPUSH
4278: LD_INT 107
4280: PPUSH
4281: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4285: LD_EXP 46
4289: PUSH
4290: LD_INT 2
4292: ARRAY
4293: PPUSH
4294: LD_INT 209
4296: PPUSH
4297: LD_INT 106
4299: PPUSH
4300: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4304: LD_EXP 46
4308: PUSH
4309: LD_INT 3
4311: ARRAY
4312: PPUSH
4313: LD_INT 209
4315: PPUSH
4316: LD_INT 103
4318: PPUSH
4319: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4323: LD_EXP 46
4327: PUSH
4328: LD_INT 3
4330: ARRAY
4331: PPUSH
4332: LD_INT 209
4334: PPUSH
4335: LD_INT 106
4337: PPUSH
4338: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4342: LD_EXP 46
4346: PUSH
4347: LD_INT 4
4349: ARRAY
4350: PPUSH
4351: LD_INT 227
4353: PPUSH
4354: LD_INT 117
4356: PPUSH
4357: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4361: LD_EXP 46
4365: PUSH
4366: LD_INT 4
4368: ARRAY
4369: PPUSH
4370: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4374: LD_INT 700
4376: PPUSH
4377: CALL_OW 67
// for i := 3 downto 2 do
4381: LD_ADDR_VAR 0 1
4385: PUSH
4386: DOUBLE
4387: LD_INT 3
4389: INC
4390: ST_TO_ADDR
4391: LD_INT 2
4393: PUSH
4394: FOR_DOWNTO
4395: IFFALSE 4562
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4397: LD_EXP 46
4401: PUSH
4402: LD_VAR 0 1
4406: ARRAY
4407: PPUSH
4408: LD_INT 200
4410: PPUSH
4411: LD_INT 91
4413: PPUSH
4414: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4418: LD_EXP 46
4422: PUSH
4423: LD_VAR 0 1
4427: ARRAY
4428: PPUSH
4429: LD_INT 210
4431: PPUSH
4432: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4436: LD_EXP 46
4440: PUSH
4441: LD_VAR 0 1
4445: ARRAY
4446: PPUSH
4447: LD_INT 224
4449: PPUSH
4450: LD_INT 93
4452: PPUSH
4453: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4457: LD_EXP 46
4461: PUSH
4462: LD_VAR 0 1
4466: ARRAY
4467: PPUSH
4468: LD_INT 210
4470: PPUSH
4471: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4475: LD_EXP 46
4479: PUSH
4480: LD_VAR 0 1
4484: ARRAY
4485: PPUSH
4486: LD_INT 239
4488: PPUSH
4489: LD_INT 123
4491: PPUSH
4492: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4496: LD_EXP 46
4500: PUSH
4501: LD_VAR 0 1
4505: ARRAY
4506: PPUSH
4507: LD_INT 210
4509: PPUSH
4510: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4514: LD_EXP 46
4518: PUSH
4519: LD_VAR 0 1
4523: ARRAY
4524: PPUSH
4525: LD_INT 212
4527: PPUSH
4528: LD_INT 105
4530: PPUSH
4531: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4535: LD_EXP 46
4539: PUSH
4540: LD_VAR 0 1
4544: ARRAY
4545: PPUSH
4546: LD_INT 700
4548: PPUSH
4549: CALL_OW 202
// wait ( 0 0$30 ) ;
4553: LD_INT 1050
4555: PPUSH
4556: CALL_OW 67
// end ;
4560: GO 4394
4562: POP
4563: POP
// until not activeGrishkoAI ;
4564: LD_EXP 10
4568: NOT
4569: IFFALSE 4374
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4571: LD_EXP 46
4575: PPUSH
4576: LD_INT 221
4578: PPUSH
4579: LD_INT 110
4581: PPUSH
4582: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4586: LD_EXP 46
4590: PPUSH
4591: LD_INT 228
4593: PPUSH
4594: LD_INT 115
4596: PPUSH
4597: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4601: LD_EXP 46
4605: PPUSH
4606: CALL_OW 200
// end ;
4610: PPOPN 1
4612: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4613: LD_EXP 12
4617: IFFALSE 5359
4619: GO 4621
4621: DISABLE
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// begin uc_side := 6 ;
4628: LD_ADDR_OWVAR 20
4632: PUSH
4633: LD_INT 6
4635: ST_TO_ADDR
// uc_nation := 3 ;
4636: LD_ADDR_OWVAR 21
4640: PUSH
4641: LD_INT 3
4643: ST_TO_ADDR
// for i := 1 to 3 do
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: DOUBLE
4650: LD_INT 1
4652: DEC
4653: ST_TO_ADDR
4654: LD_INT 3
4656: PUSH
4657: FOR_TO
4658: IFFALSE 4767
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
4660: LD_INT 0
4662: PPUSH
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 4
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_OWVAR 67
4684: ARRAY
4685: PPUSH
4686: CALL_OW 380
// un := CreateHuman ;
4690: LD_ADDR_VAR 0 1
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4700: LD_ADDR_EXP 47
4704: PUSH
4705: LD_EXP 47
4709: PUSH
4710: LD_VAR 0 1
4714: UNION
4715: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4716: LD_VAR 0 1
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4728: LD_VAR 0 1
4732: PPUSH
4733: LD_INT 11
4735: PPUSH
4736: LD_INT 0
4738: PPUSH
4739: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4743: LD_VAR 0 1
4747: PPUSH
4748: LD_INT 210
4750: PPUSH
4751: LD_INT 159
4753: PPUSH
4754: CALL_OW 111
// wait ( 0 0$2 ) ;
4758: LD_INT 70
4760: PPUSH
4761: CALL_OW 67
// end ;
4765: GO 4657
4767: POP
4768: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4769: LD_ADDR_VAR 0 4
4773: PUSH
4774: LD_INT 172
4776: PUSH
4777: LD_INT 76
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 150
4786: PUSH
4787: LD_INT 38
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 148
4796: PUSH
4797: LD_INT 9
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 165
4806: PUSH
4807: LD_INT 38
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 191
4822: PUSH
4823: LD_INT 77
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 168
4832: PUSH
4833: LD_INT 42
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 166
4842: PUSH
4843: LD_INT 11
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 151
4852: PUSH
4853: LD_INT 12
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 221
4868: PUSH
4869: LD_INT 88
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 217
4878: PUSH
4879: LD_INT 64
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 232
4888: PUSH
4889: LD_INT 66
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 200
4898: PUSH
4899: LD_INT 56
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4917: LD_INT 35
4919: PPUSH
4920: CALL_OW 67
// for i := russianPatrol downto 1 do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: DOUBLE
4930: LD_EXP 47
4934: INC
4935: ST_TO_ADDR
4936: LD_INT 1
4938: PUSH
4939: FOR_DOWNTO
4940: IFFALSE 5323
// begin if IsDead ( russianPatrol [ i ] ) then
4942: LD_EXP 47
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: PPUSH
4953: CALL_OW 301
4957: IFFALSE 4961
// continue ;
4959: GO 4939
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4961: LD_EXP 47
4965: PUSH
4966: LD_VAR 0 2
4970: ARRAY
4971: PPUSH
4972: CALL_OW 256
4976: PUSH
4977: LD_INT 990
4979: LESS
4980: PUSH
4981: LD_EXP 47
4985: PUSH
4986: LD_VAR 0 2
4990: ARRAY
4991: PPUSH
4992: CALL_OW 110
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: AND
5001: IFFALSE 5021
// SetTag ( russianPatrol [ i ] , 2 ) ;
5003: LD_EXP 47
5007: PUSH
5008: LD_VAR 0 2
5012: ARRAY
5013: PPUSH
5014: LD_INT 2
5016: PPUSH
5017: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5021: LD_EXP 47
5025: PUSH
5026: LD_VAR 0 2
5030: ARRAY
5031: PPUSH
5032: CALL_OW 110
5036: PUSH
5037: LD_INT 2
5039: EQUAL
5040: IFFALSE 5107
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5042: LD_EXP 47
5046: PUSH
5047: LD_VAR 0 2
5051: ARRAY
5052: PPUSH
5053: LD_INT 166
5055: PPUSH
5056: LD_INT 101
5058: PPUSH
5059: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5063: LD_EXP 47
5067: PUSH
5068: LD_VAR 0 2
5072: ARRAY
5073: PPUSH
5074: LD_INT 71
5076: PPUSH
5077: CALL_OW 296
5081: PUSH
5082: LD_INT 10
5084: LESS
5085: IFFALSE 5105
// SetTag ( russianPatrol [ i ] , 3 ) ;
5087: LD_EXP 47
5091: PUSH
5092: LD_VAR 0 2
5096: ARRAY
5097: PPUSH
5098: LD_INT 3
5100: PPUSH
5101: CALL_OW 109
// continue ;
5105: GO 4939
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5107: LD_EXP 47
5111: PUSH
5112: LD_VAR 0 2
5116: ARRAY
5117: PPUSH
5118: CALL_OW 110
5122: PUSH
5123: LD_INT 3
5125: EQUAL
5126: IFFALSE 5221
// begin spottedByPatrol := true ;
5128: LD_ADDR_EXP 7
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5136: LD_EXP 47
5140: PUSH
5141: LD_VAR 0 2
5145: ARRAY
5146: PPUSH
5147: CALL_OW 250
5151: PPUSH
5152: LD_EXP 47
5156: PUSH
5157: LD_VAR 0 2
5161: ARRAY
5162: PPUSH
5163: CALL_OW 251
5167: PPUSH
5168: LD_INT 2
5170: PPUSH
5171: LD_INT 6
5173: NEG
5174: PPUSH
5175: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5179: LD_EXP 47
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: PPUSH
5190: CALL_OW 87
// DialogueOn ;
5194: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5198: LD_EXP 25
5202: PPUSH
5203: LD_STRING DH-Spot-f-3
5205: PPUSH
5206: CALL_OW 88
// DialogueOff ;
5210: CALL_OW 7
// YouLost ( Spotted ) ;
5214: LD_STRING Spotted
5216: PPUSH
5217: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5221: LD_EXP 47
5225: PUSH
5226: LD_VAR 0 2
5230: ARRAY
5231: PPUSH
5232: CALL_OW 314
5236: NOT
5237: IFFALSE 5321
// for j in patrol [ i ] do
5239: LD_ADDR_VAR 0 3
5243: PUSH
5244: LD_VAR 0 4
5248: PUSH
5249: LD_VAR 0 2
5253: ARRAY
5254: PUSH
5255: FOR_IN
5256: IFFALSE 5319
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5258: LD_EXP 47
5262: PUSH
5263: LD_VAR 0 2
5267: ARRAY
5268: PPUSH
5269: LD_INT 35
5271: PPUSH
5272: LD_INT 175
5274: PPUSH
5275: CALL_OW 12
5279: PPUSH
5280: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5284: LD_EXP 47
5288: PUSH
5289: LD_VAR 0 2
5293: ARRAY
5294: PPUSH
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: CALL_OW 174
// end ;
5317: GO 5255
5319: POP
5320: POP
// end ;
5321: GO 4939
5323: POP
5324: POP
// until not russianPatrol or russianAlert ;
5325: LD_EXP 47
5329: NOT
5330: PUSH
5331: LD_EXP 9
5335: OR
5336: IFFALSE 4917
// if russianPatrol then
5338: LD_EXP 47
5342: IFFALSE 5359
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5344: LD_EXP 47
5348: PPUSH
5349: LD_INT 161
5351: PPUSH
5352: LD_INT 107
5354: PPUSH
5355: CALL_OW 114
// end ;
5359: PPOPN 4
5361: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5362: LD_EXP 6
5366: PUSH
5367: LD_EXP 13
5371: NOT
5372: AND
5373: IFFALSE 5859
5375: GO 5377
5377: DISABLE
5378: LD_INT 0
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
5384: PPUSH
// begin enable ;
5385: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5386: LD_ADDR_VAR 0 2
5390: PUSH
5391: LD_EXP 48
5395: PPUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 2
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 72
5410: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5411: LD_ADDR_VAR 0 4
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 4
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 69
5430: ST_TO_ADDR
// for i in filter do
5431: LD_ADDR_VAR 0 1
5435: PUSH
5436: LD_VAR 0 2
5440: PUSH
5441: FOR_IN
5442: IFFALSE 5857
// begin tmp := IsDrivenBy ( i ) ;
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 311
5458: ST_TO_ADDR
// if not tmp then
5459: LD_VAR 0 3
5463: NOT
5464: IFFALSE 5468
// continue ;
5466: GO 5441
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5468: LD_VAR 0 1
5472: PPUSH
5473: CALL_OW 261
5477: PUSH
5478: LD_INT 90
5480: GREATER
5481: PUSH
5482: LD_VAR 0 1
5486: PPUSH
5487: CALL_OW 110
5491: PUSH
5492: LD_INT 2
5494: EQUAL
5495: AND
5496: IFFALSE 5512
// SetTag ( i , 0 ) else
5498: LD_VAR 0 1
5502: PPUSH
5503: LD_INT 0
5505: PPUSH
5506: CALL_OW 109
5510: GO 5608
// if GetTag ( i ) = 2 then
5512: LD_VAR 0 1
5516: PPUSH
5517: CALL_OW 110
5521: PUSH
5522: LD_INT 2
5524: EQUAL
5525: IFFALSE 5608
// begin x := rand ( 1 , 2 ) ;
5527: LD_ADDR_VAR 0 5
5531: PUSH
5532: LD_INT 1
5534: PPUSH
5535: LD_INT 2
5537: PPUSH
5538: CALL_OW 12
5542: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5543: LD_VAR 0 1
5547: PPUSH
5548: LD_EXP 49
5552: PUSH
5553: LD_VAR 0 5
5557: ARRAY
5558: PPUSH
5559: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5563: LD_EXP 49
5567: PUSH
5568: LD_VAR 0 5
5572: ARRAY
5573: PPUSH
5574: LD_INT 2
5576: PPUSH
5577: CALL_OW 289
5581: PUSH
5582: LD_INT 20
5584: LESS
5585: IFFALSE 5608
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5587: LD_EXP 49
5591: PUSH
5592: LD_VAR 0 5
5596: ARRAY
5597: PPUSH
5598: LD_INT 2
5600: PPUSH
5601: LD_INT 100
5603: PPUSH
5604: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5608: LD_VAR 0 1
5612: PPUSH
5613: CALL_OW 256
5617: PUSH
5618: LD_INT 600
5620: GREATEREQUAL
5621: PUSH
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 110
5631: NOT
5632: AND
5633: IFFALSE 5659
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_VAR 0 1
5649: PPUSH
5650: CALL_OW 74
5654: PPUSH
5655: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 256
5668: PUSH
5669: LD_INT 600
5671: LESS
5672: PUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 110
5682: NOT
5683: AND
5684: IFFALSE 5713
// begin SetTag ( i , 1 ) ;
5686: LD_VAR 0 1
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5698: LD_VAR 0 1
5702: PPUSH
5703: LD_INT 62
5705: PPUSH
5706: LD_INT 22
5708: PPUSH
5709: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 110
5722: PUSH
5723: LD_INT 1
5725: EQUAL
5726: PUSH
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 62
5734: PPUSH
5735: LD_INT 22
5737: PPUSH
5738: CALL_OW 297
5742: PUSH
5743: LD_INT 6
5745: LESS
5746: AND
5747: PUSH
5748: LD_VAR 0 3
5752: AND
5753: IFFALSE 5855
// begin ComExitVehicle ( tmp ) ;
5755: LD_VAR 0 3
5759: PPUSH
5760: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5764: LD_VAR 0 3
5768: PPUSH
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5778: LD_INT 35
5780: PPUSH
5781: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 256
5794: PUSH
5795: LD_INT 1000
5797: EQUAL
5798: IFFALSE 5778
// ComEnterUnit ( tmp , i ) ;
5800: LD_VAR 0 3
5804: PPUSH
5805: LD_VAR 0 1
5809: PPUSH
5810: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5814: LD_VAR 0 1
5818: PPUSH
5819: CALL_OW 261
5823: PUSH
5824: LD_INT 90
5826: LESSEQUAL
5827: IFFALSE 5843
// SetTag ( i , 2 ) else
5829: LD_VAR 0 1
5833: PPUSH
5834: LD_INT 2
5836: PPUSH
5837: CALL_OW 109
5841: GO 5855
// SetTag ( i , 0 ) ;
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_INT 0
5850: PPUSH
5851: CALL_OW 109
// end ; end ;
5855: GO 5441
5857: POP
5858: POP
// end ;
5859: PPOPN 5
5861: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5862: LD_EXP 20
5866: IFFALSE 6089
5868: GO 5870
5870: DISABLE
5871: LD_INT 0
5873: PPUSH
5874: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5875: LD_EXP 49
5879: PPUSH
5880: LD_INT 79
5882: PPUSH
5883: LD_INT 155
5885: PPUSH
5886: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_INT 16
5897: PPUSH
5898: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5902: LD_ADDR_VAR 0 2
5906: PUSH
5907: LD_EXP 48
5911: PPUSH
5912: LD_INT 50
5914: PUSH
5915: EMPTY
5916: LIST
5917: PPUSH
5918: CALL_OW 72
5922: ST_TO_ADDR
// for i in tmp do
5923: LD_ADDR_VAR 0 1
5927: PUSH
5928: LD_VAR 0 2
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5968
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 123
5943: PPUSH
5944: LD_INT 60
5946: PPUSH
5947: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5951: LD_VAR 0 1
5955: PPUSH
5956: LD_INT 153
5958: PPUSH
5959: LD_INT 103
5961: PPUSH
5962: CALL_OW 174
// end ;
5966: GO 5933
5968: POP
5969: POP
// repeat wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5977: LD_ADDR_VAR 0 2
5981: PUSH
5982: LD_EXP 48
5986: PPUSH
5987: LD_INT 50
5989: PUSH
5990: EMPTY
5991: LIST
5992: PPUSH
5993: CALL_OW 72
5997: ST_TO_ADDR
// for i in tmp do
5998: LD_ADDR_VAR 0 1
6002: PUSH
6003: LD_VAR 0 2
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6080
// if not HasTask ( i ) then
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 314
6020: NOT
6021: IFFALSE 6078
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6023: LD_VAR 0 1
6027: PPUSH
6028: LD_INT 81
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 3
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PPUSH
6059: CALL_OW 69
6063: PPUSH
6064: LD_VAR 0 1
6068: PPUSH
6069: CALL_OW 74
6073: PPUSH
6074: CALL_OW 115
6078: GO 6008
6080: POP
6081: POP
6082: LD_VAR 0 2
6086: NOT
6087: IFFALSE 5970
// end ;
6089: PPOPN 2
6091: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6092: LD_INT 22
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 32
6104: PUSH
6105: LD_INT 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PPUSH
6116: CALL_OW 69
6120: IFFALSE 6199
6122: GO 6124
6124: DISABLE
6125: LD_INT 0
6127: PPUSH
// begin enable ;
6128: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6129: LD_ADDR_VAR 0 1
6133: PUSH
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 32
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: PUSH
6163: FOR_IN
6164: IFFALSE 6197
// if GetFuel ( i ) < 1 then
6166: LD_VAR 0 1
6170: PPUSH
6171: CALL_OW 261
6175: PUSH
6176: LD_INT 1
6178: LESS
6179: IFFALSE 6195
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL_OW 311
6190: PPUSH
6191: CALL_OW 121
6195: GO 6163
6197: POP
6198: POP
// end ; end_of_file
6199: PPOPN 1
6201: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6202: LD_INT 0
6204: PPUSH
6205: PPUSH
6206: PPUSH
// SetBName ( omikron , omikron ) ;
6207: LD_INT 64
6209: PPUSH
6210: LD_STRING omikron
6212: PPUSH
6213: CALL_OW 500
// uc_side := 4 ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_INT 4
6224: ST_TO_ADDR
// uc_nation := 1 ;
6225: LD_ADDR_OWVAR 21
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// omicronSquad := [ ] ;
6233: LD_ADDR_EXP 51
6237: PUSH
6238: EMPTY
6239: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6240: LD_ADDR_VAR 0 2
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 2
6257: PUSH
6258: LD_INT 30
6260: PUSH
6261: LD_INT 32
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 30
6270: PUSH
6271: LD_INT 31
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PPUSH
6287: CALL_OW 69
6291: PUSH
6292: FOR_IN
6293: IFFALSE 6350
// begin PrepareHuman ( false , 1 , 1 ) ;
6295: LD_INT 0
6297: PPUSH
6298: LD_INT 1
6300: PPUSH
6301: LD_INT 1
6303: PPUSH
6304: CALL_OW 380
// un := CreateHuman ;
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: CALL_OW 44
6317: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6318: LD_ADDR_EXP 51
6322: PUSH
6323: LD_EXP 51
6327: PUSH
6328: LD_VAR 0 3
6332: UNION
6333: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6334: LD_VAR 0 3
6338: PPUSH
6339: LD_VAR 0 2
6343: PPUSH
6344: CALL_OW 52
// end ;
6348: GO 6292
6350: POP
6351: POP
// for i := 1 to 3 do
6352: LD_ADDR_VAR 0 2
6356: PUSH
6357: DOUBLE
6358: LD_INT 1
6360: DEC
6361: ST_TO_ADDR
6362: LD_INT 3
6364: PUSH
6365: FOR_TO
6366: IFFALSE 6421
// begin PrepareHuman ( false , 2 , 2 ) ;
6368: LD_INT 0
6370: PPUSH
6371: LD_INT 2
6373: PPUSH
6374: LD_INT 2
6376: PPUSH
6377: CALL_OW 380
// un := CreateHuman ;
6381: LD_ADDR_VAR 0 3
6385: PUSH
6386: CALL_OW 44
6390: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6391: LD_ADDR_EXP 51
6395: PUSH
6396: LD_EXP 51
6400: PUSH
6401: LD_VAR 0 3
6405: UNION
6406: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6407: LD_VAR 0 3
6411: PPUSH
6412: LD_INT 64
6414: PPUSH
6415: CALL_OW 52
// end ;
6419: GO 6365
6421: POP
6422: POP
// for i := 1 to 2 do
6423: LD_ADDR_VAR 0 2
6427: PUSH
6428: DOUBLE
6429: LD_INT 1
6431: DEC
6432: ST_TO_ADDR
6433: LD_INT 2
6435: PUSH
6436: FOR_TO
6437: IFFALSE 6576
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6439: LD_INT 4
6441: PPUSH
6442: LD_INT 1
6444: PPUSH
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 2
6450: PPUSH
6451: LD_INT 1
6453: PPUSH
6454: LD_INT 3
6456: PPUSH
6457: LD_INT 100
6459: PPUSH
6460: CALL 366 0 7
// un := CreateVehicle ;
6464: LD_ADDR_VAR 0 3
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6474: LD_ADDR_EXP 51
6478: PUSH
6479: LD_EXP 51
6483: PUSH
6484: LD_VAR 0 3
6488: UNION
6489: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6490: LD_VAR 0 3
6494: PPUSH
6495: LD_INT 28
6497: PPUSH
6498: LD_INT 37
6500: PPUSH
6501: LD_INT 6
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6511: LD_INT 0
6513: PPUSH
6514: LD_INT 3
6516: PPUSH
6517: LD_INT 2
6519: PPUSH
6520: CALL_OW 380
// un := CreateHuman ;
6524: LD_ADDR_VAR 0 3
6528: PUSH
6529: CALL_OW 44
6533: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6534: LD_ADDR_EXP 51
6538: PUSH
6539: LD_EXP 51
6543: PUSH
6544: LD_VAR 0 3
6548: UNION
6549: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6550: LD_VAR 0 3
6554: PPUSH
6555: LD_EXP 51
6559: PUSH
6560: LD_EXP 51
6564: PUSH
6565: LD_INT 1
6567: MINUS
6568: ARRAY
6569: PPUSH
6570: CALL_OW 52
// end ;
6574: GO 6436
6576: POP
6577: POP
// end ;
6578: LD_VAR 0 1
6582: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6583: LD_INT 0
6585: PPUSH
6586: PPUSH
6587: PPUSH
6588: PPUSH
// uc_side := 4 ;
6589: LD_ADDR_OWVAR 20
6593: PUSH
6594: LD_INT 4
6596: ST_TO_ADDR
// uc_nation := 1 ;
6597: LD_ADDR_OWVAR 21
6601: PUSH
6602: LD_INT 1
6604: ST_TO_ADDR
// tmp := [ ] ;
6605: LD_ADDR_VAR 0 4
6609: PUSH
6610: EMPTY
6611: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6612: LD_INT 4
6614: PPUSH
6615: LD_INT 1
6617: PPUSH
6618: LD_INT 2
6620: PPUSH
6621: LD_INT 1
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: LD_INT 4
6629: PPUSH
6630: LD_INT 77
6632: PPUSH
6633: CALL 366 0 7
// un := CreateVehicle ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: CALL_OW 45
6646: ST_TO_ADDR
// tmp := tmp union un ;
6647: LD_ADDR_VAR 0 4
6651: PUSH
6652: LD_VAR 0 4
6656: PUSH
6657: LD_VAR 0 3
6661: UNION
6662: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6663: LD_VAR 0 3
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6675: LD_VAR 0 3
6679: PPUSH
6680: LD_INT 106
6682: PPUSH
6683: LD_INT 3
6685: PPUSH
6686: LD_INT 0
6688: PPUSH
6689: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6693: LD_INT 0
6695: PPUSH
6696: LD_INT 3
6698: PPUSH
6699: LD_INT 2
6701: PPUSH
6702: CALL_OW 380
// un := CreateHuman ;
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: CALL_OW 44
6715: ST_TO_ADDR
// tmp := tmp union un ;
6716: LD_ADDR_VAR 0 4
6720: PUSH
6721: LD_VAR 0 4
6725: PUSH
6726: LD_VAR 0 3
6730: UNION
6731: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_VAR 0 4
6741: PUSH
6742: LD_VAR 0 4
6746: PUSH
6747: LD_INT 1
6749: MINUS
6750: ARRAY
6751: PPUSH
6752: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6756: LD_VAR 0 3
6760: PPUSH
6761: LD_INT 109
6763: PPUSH
6764: LD_INT 9
6766: PPUSH
6767: CALL_OW 111
// wait ( 0 0$1 ) ;
6771: LD_INT 35
6773: PPUSH
6774: CALL_OW 67
// for i := 1 to 2 do
6778: LD_ADDR_VAR 0 2
6782: PUSH
6783: DOUBLE
6784: LD_INT 1
6786: DEC
6787: ST_TO_ADDR
6788: LD_INT 2
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6856
// begin PrepareHuman ( false , 1 , 2 ) ;
6794: LD_INT 0
6796: PPUSH
6797: LD_INT 1
6799: PPUSH
6800: LD_INT 2
6802: PPUSH
6803: CALL_OW 380
// un := CreateHuman ;
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: CALL_OW 44
6816: ST_TO_ADDR
// tmp := tmp union un ;
6817: LD_ADDR_VAR 0 4
6821: PUSH
6822: LD_VAR 0 4
6826: PUSH
6827: LD_VAR 0 3
6831: UNION
6832: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6833: LD_VAR 0 3
6837: PPUSH
6838: LD_INT 105
6840: PPUSH
6841: LD_INT 2
6843: PPUSH
6844: LD_INT 2
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 50
// end ;
6854: GO 6791
6856: POP
6857: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6858: LD_VAR 0 4
6862: PPUSH
6863: LD_INT 26
6865: PPUSH
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6873: LD_INT 35
6875: PPUSH
6876: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6880: LD_VAR 0 4
6884: PPUSH
6885: LD_INT 50
6887: PUSH
6888: EMPTY
6889: LIST
6890: PPUSH
6891: CALL_OW 72
6895: NOT
6896: IFFALSE 6900
// exit ;
6898: GO 7027
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6900: LD_VAR 0 4
6904: PPUSH
6905: LD_INT 91
6907: PUSH
6908: LD_INT 64
6910: PUSH
6911: LD_INT 12
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 72
6923: PUSH
6924: LD_VAR 0 4
6928: EQUAL
6929: IFFALSE 6873
// omicronSquad := omicronSquad union tmp ;
6931: LD_ADDR_EXP 51
6935: PUSH
6936: LD_EXP 51
6940: PUSH
6941: LD_VAR 0 4
6945: UNION
6946: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6947: LD_ADDR_VAR 0 2
6951: PUSH
6952: LD_VAR 0 4
6956: PPUSH
6957: LD_INT 25
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL_OW 72
6971: PUSH
6972: FOR_IN
6973: IFFALSE 7025
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
6975: LD_VAR 0 2
6979: PPUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 30
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 69
7008: PPUSH
7009: LD_VAR 0 2
7013: PPUSH
7014: CALL_OW 74
7018: PPUSH
7019: CALL_OW 120
7023: GO 6972
7025: POP
7026: POP
// end ;
7027: LD_VAR 0 1
7031: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7032: LD_EXP 13
7036: NOT
7037: IFFALSE 7608
7039: GO 7041
7041: DISABLE
7042: LD_INT 0
7044: PPUSH
7045: PPUSH
7046: PPUSH
7047: PPUSH
// begin enable ;
7048: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7049: LD_ADDR_VAR 0 2
7053: PUSH
7054: LD_INT 22
7056: PUSH
7057: LD_INT 4
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 24
7079: PUSH
7080: LD_INT 1000
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL_OW 69
7100: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_EXP 51
7110: PPUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 2
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 72
7125: ST_TO_ADDR
// if filter and tmp then
7126: LD_VAR 0 2
7130: PUSH
7131: LD_VAR 0 3
7135: AND
7136: IFFALSE 7209
// begin for i in tmp do
7138: LD_ADDR_VAR 0 1
7142: PUSH
7143: LD_VAR 0 3
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7205
// if IsInUnit ( i ) then
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 310
7160: IFFALSE 7173
// ComExitBuilding ( i ) else
7162: LD_VAR 0 1
7166: PPUSH
7167: CALL_OW 122
7171: GO 7203
// if not HasTask ( i ) then
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL_OW 314
7182: NOT
7183: IFFALSE 7203
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_VAR 0 2
7194: PUSH
7195: LD_INT 1
7197: ARRAY
7198: PPUSH
7199: CALL_OW 130
7203: GO 7148
7205: POP
7206: POP
// end else
7207: GO 7280
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7209: LD_VAR 0 3
7213: PPUSH
7214: LD_INT 3
7216: PUSH
7217: LD_INT 54
7219: PUSH
7220: EMPTY
7221: LIST
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: IFFALSE 7280
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: LD_VAR 0 3
7242: PPUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 54
7248: PUSH
7249: EMPTY
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 72
7260: PUSH
7261: FOR_IN
7262: IFFALSE 7278
// ComEnterUnit ( i , omikron ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_INT 64
7271: PPUSH
7272: CALL_OW 120
7276: GO 7261
7278: POP
7279: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7280: LD_ADDR_VAR 0 2
7284: PUSH
7285: LD_EXP 51
7289: PPUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 72
7304: ST_TO_ADDR
// if not filter then
7305: LD_VAR 0 2
7309: NOT
7310: IFFALSE 7314
// exit ;
7312: GO 7608
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7314: LD_ADDR_VAR 0 4
7318: PUSH
7319: LD_INT 13
7321: PPUSH
7322: LD_INT 81
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 70
7336: ST_TO_ADDR
// if enemy then
7337: LD_VAR 0 4
7341: IFFALSE 7608
// begin for i in filter do
7343: LD_ADDR_VAR 0 1
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: FOR_IN
7354: IFFALSE 7606
// begin tmp := IsDrivenBy ( i ) ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: LD_VAR 0 1
7365: PPUSH
7366: CALL_OW 311
7370: ST_TO_ADDR
// if not tmp then
7371: LD_VAR 0 3
7375: NOT
7376: IFFALSE 7380
// continue ;
7378: GO 7353
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 256
7389: PUSH
7390: LD_INT 600
7392: GREATEREQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: CALL_OW 110
7403: PUSH
7404: LD_INT 1
7406: NONEQUAL
7407: AND
7408: IFFALSE 7434
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: LD_VAR 0 4
7419: PPUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 74
7429: PPUSH
7430: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7434: LD_VAR 0 1
7438: PPUSH
7439: CALL_OW 256
7443: PUSH
7444: LD_INT 600
7446: LESS
7447: PUSH
7448: LD_VAR 0 1
7452: PPUSH
7453: CALL_OW 110
7457: PUSH
7458: LD_INT 1
7460: NONEQUAL
7461: AND
7462: IFFALSE 7491
// begin SetTag ( i , 1 ) ;
7464: LD_VAR 0 1
7468: PPUSH
7469: LD_INT 1
7471: PPUSH
7472: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7476: LD_VAR 0 1
7480: PPUSH
7481: LD_INT 27
7483: PPUSH
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL_OW 110
7500: PUSH
7501: LD_INT 1
7503: EQUAL
7504: PUSH
7505: LD_VAR 0 1
7509: PPUSH
7510: LD_INT 27
7512: PPUSH
7513: LD_INT 35
7515: PPUSH
7516: CALL_OW 297
7520: PUSH
7521: LD_INT 6
7523: LESS
7524: AND
7525: PUSH
7526: LD_VAR 0 3
7530: AND
7531: IFFALSE 7604
// begin ComExitVehicle ( tmp ) ;
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7542: LD_VAR 0 3
7546: PPUSH
7547: LD_VAR 0 1
7551: PPUSH
7552: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 256
7572: PUSH
7573: LD_INT 1000
7575: EQUAL
7576: IFFALSE 7556
// ComEnterUnit ( tmp , i ) ;
7578: LD_VAR 0 3
7582: PPUSH
7583: LD_VAR 0 1
7587: PPUSH
7588: CALL_OW 120
// SetTag ( i , 0 ) ;
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_INT 0
7599: PPUSH
7600: CALL_OW 109
// end ; end ;
7604: GO 7353
7606: POP
7607: POP
// end ; end ;
7608: PPOPN 4
7610: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7611: LD_EXP 13
7615: IFFALSE 7759
7617: GO 7619
7619: DISABLE
7620: LD_INT 0
7622: PPUSH
7623: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_EXP 51
7633: PPUSH
7634: LD_INT 21
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 50
7646: PUSH
7647: EMPTY
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 72
7658: ST_TO_ADDR
// if not tmp then
7659: LD_VAR 0 2
7663: NOT
7664: IFFALSE 7668
// exit ;
7666: GO 7759
// repeat wait ( 0 0$1 ) ;
7668: LD_INT 35
7670: PPUSH
7671: CALL_OW 67
// for i in tmp do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_VAR 0 2
7684: PUSH
7685: FOR_IN
7686: IFFALSE 7750
// begin ComExit ( i ) ;
7688: LD_VAR 0 1
7692: PPUSH
7693: CALL 71542 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7697: LD_VAR 0 1
7701: PPUSH
7702: LD_INT 14
7704: PPUSH
7705: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: LD_INT 14
7716: PPUSH
7717: CALL_OW 308
7721: IFFALSE 7748
// begin tmp := tmp diff i ;
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_VAR 0 2
7732: PUSH
7733: LD_VAR 0 1
7737: DIFF
7738: ST_TO_ADDR
// RemoveUnit ( i ) ;
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 64
// end ; end ;
7748: GO 7685
7750: POP
7751: POP
// until not tmp ;
7752: LD_VAR 0 2
7756: NOT
7757: IFFALSE 7668
// end ; end_of_file
7759: PPOPN 2
7761: END
// export function Action ; var i , un , veh , tmp ; begin
7762: LD_INT 0
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
// InGameOn ;
7769: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7773: LD_INT 179
7775: PPUSH
7776: LD_INT 5
7778: PPUSH
7779: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_INT 2
7790: PPUSH
7791: LD_INT 2
7793: PPUSH
7794: LD_INT 12
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 24
7805: PPUSH
7806: LD_INT 33
7808: PPUSH
7809: CALL 366 0 7
7813: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7814: LD_VAR 0 4
7818: PPUSH
7819: LD_INT 2
7821: PPUSH
7822: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7826: LD_VAR 0 4
7830: PPUSH
7831: LD_INT 178
7833: PPUSH
7834: LD_INT 2
7836: PPUSH
7837: LD_INT 0
7839: PPUSH
7840: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7844: LD_EXP 25
7848: PPUSH
7849: LD_VAR 0 4
7853: PPUSH
7854: CALL_OW 52
// if Kamil then
7858: LD_EXP 29
7862: IFFALSE 7897
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7864: LD_EXP 29
7868: PPUSH
7869: LD_INT 207
7871: PPUSH
7872: LD_INT 37
7874: PPUSH
7875: LD_INT 0
7877: PPUSH
7878: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7882: LD_EXP 29
7886: PPUSH
7887: LD_INT 211
7889: PPUSH
7890: LD_INT 38
7892: PPUSH
7893: CALL_OW 118
// end ; if Sophia then
7897: LD_EXP 31
7901: IFFALSE 7936
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7903: LD_EXP 31
7907: PPUSH
7908: LD_INT 209
7910: PPUSH
7911: LD_INT 40
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7921: LD_EXP 31
7925: PPUSH
7926: LD_INT 211
7928: PPUSH
7929: LD_INT 38
7931: PPUSH
7932: CALL_OW 118
// end ; if Givi then
7936: LD_EXP 26
7940: IFFALSE 7975
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7942: LD_EXP 26
7946: PPUSH
7947: LD_INT 201
7949: PPUSH
7950: LD_INT 34
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7960: LD_EXP 26
7964: PPUSH
7965: LD_INT 206
7967: PPUSH
7968: LD_INT 36
7970: PPUSH
7971: CALL_OW 118
// end ; if Ibrahim then
7975: LD_EXP 28
7979: IFFALSE 8014
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
7981: LD_EXP 28
7985: PPUSH
7986: LD_INT 202
7988: PPUSH
7989: LD_INT 39
7991: PPUSH
7992: LD_INT 0
7994: PPUSH
7995: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
7999: LD_EXP 28
8003: PPUSH
8004: LD_INT 206
8006: PPUSH
8007: LD_INT 36
8009: PPUSH
8010: CALL_OW 118
// end ; if Markov then
8014: LD_EXP 32
8018: IFFALSE 8105
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: LD_INT 2
8027: PPUSH
8028: LD_INT 2
8030: PPUSH
8031: LD_INT 13
8033: PPUSH
8034: LD_INT 1
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 25
8042: PPUSH
8043: LD_INT 80
8045: PUSH
8046: LD_INT 20
8048: PUSH
8049: LD_OWVAR 67
8053: MUL
8054: MINUS
8055: PPUSH
8056: CALL 366 0 7
8060: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8061: LD_VAR 0 4
8065: PPUSH
8066: LD_INT 2
8068: PPUSH
8069: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8073: LD_VAR 0 4
8077: PPUSH
8078: LD_INT 197
8080: PPUSH
8081: LD_INT 35
8083: PPUSH
8084: LD_INT 0
8086: PPUSH
8087: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8091: LD_EXP 32
8095: PPUSH
8096: LD_VAR 0 4
8100: PPUSH
8101: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8105: LD_ADDR_VAR 0 5
8109: PUSH
8110: LD_EXP 30
8114: PUSH
8115: LD_EXP 37
8119: UNION
8120: ST_TO_ADDR
// for i in tmp do
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_VAR 0 5
8130: PUSH
8131: FOR_IN
8132: IFFALSE 8166
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8134: LD_VAR 0 2
8138: PPUSH
8139: LD_INT 203
8141: PPUSH
8142: LD_INT 41
8144: PPUSH
8145: LD_INT 6
8147: PPUSH
8148: LD_INT 0
8150: PPUSH
8151: CALL_OW 50
// ComHold ( i ) ;
8155: LD_VAR 0 2
8159: PPUSH
8160: CALL_OW 140
// end ;
8164: GO 8131
8166: POP
8167: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8168: LD_INT 22
8170: PUSH
8171: LD_INT 2
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 2
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PPUSH
8192: CALL_OW 69
8196: NOT
8197: IFFALSE 8211
// SetClass ( Heike , 2 ) ;
8199: LD_EXP 25
8203: PPUSH
8204: LD_INT 2
8206: PPUSH
8207: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8211: LD_EXP 25
8215: PPUSH
8216: LD_INT 183
8218: PPUSH
8219: LD_INT 12
8221: PPUSH
8222: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8226: LD_EXP 25
8230: PPUSH
8231: LD_INT 188
8233: PPUSH
8234: LD_INT 20
8236: PPUSH
8237: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8241: LD_EXP 25
8245: PPUSH
8246: LD_INT 191
8248: PPUSH
8249: LD_INT 25
8251: PPUSH
8252: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8256: LD_EXP 25
8260: PPUSH
8261: LD_INT 203
8263: PPUSH
8264: LD_INT 29
8266: PPUSH
8267: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8271: LD_EXP 25
8275: PPUSH
8276: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8280: LD_INT 35
8282: PPUSH
8283: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8287: LD_EXP 25
8291: PPUSH
8292: CALL_OW 310
8296: NOT
8297: IFFALSE 8280
// CenterOnUnits ( Heike ) ;
8299: LD_EXP 25
8303: PPUSH
8304: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: LD_INT 22
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 21
8325: PUSH
8326: LD_INT 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 69
8341: PUSH
8342: LD_EXP 25
8346: PUSH
8347: LD_EXP 32
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: DIFF
8356: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_EXP 25
8366: PPUSH
8367: CALL_OW 119
// if Givi then
8371: LD_EXP 26
8375: IFFALSE 8393
// ComTurnUnit ( Heike , Givi ) else
8377: LD_EXP 25
8381: PPUSH
8382: LD_EXP 26
8386: PPUSH
8387: CALL_OW 119
8391: GO 8411
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8393: LD_EXP 25
8397: PPUSH
8398: LD_VAR 0 5
8402: PUSH
8403: LD_INT 1
8405: ARRAY
8406: PPUSH
8407: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8411: LD_EXP 25
8415: PPUSH
8416: LD_STRING DH-Start-1
8418: PPUSH
8419: CALL_OW 88
// if Givi then
8423: LD_EXP 26
8427: IFFALSE 8474
// begin Say ( Givi , DG-Start-2 ) ;
8429: LD_EXP 26
8433: PPUSH
8434: LD_STRING DG-Start-2
8436: PPUSH
8437: CALL_OW 88
// if not Mike then
8441: LD_EXP 27
8445: NOT
8446: IFFALSE 8472
// begin Say ( Givi , DG-Start-b-3 ) ;
8448: LD_EXP 26
8452: PPUSH
8453: LD_STRING DG-Start-b-3
8455: PPUSH
8456: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8460: LD_EXP 25
8464: PPUSH
8465: LD_STRING DH-Start-b-4
8467: PPUSH
8468: CALL_OW 88
// end ; end else
8472: GO 8539
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8474: LD_EXP 37
8478: PPUSH
8479: LD_INT 26
8481: PUSH
8482: LD_INT 1
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 72
8493: PUSH
8494: LD_INT 1
8496: ARRAY
8497: PPUSH
8498: LD_STRING DArm-Start-a-2
8500: PPUSH
8501: CALL_OW 88
8505: NOT
8506: IFFALSE 8539
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8508: LD_EXP 37
8512: PPUSH
8513: LD_INT 26
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 72
8527: PUSH
8528: LD_INT 1
8530: ARRAY
8531: PPUSH
8532: LD_STRING DArf-Start-a-2
8534: PPUSH
8535: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8539: LD_EXP 25
8543: PPUSH
8544: LD_INT 211
8546: PPUSH
8547: LD_INT 38
8549: PPUSH
8550: CALL_OW 118
// wait ( 0 0$1 ) ;
8554: LD_INT 35
8556: PPUSH
8557: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8561: LD_EXP 25
8565: PPUSH
8566: LD_STRING DH-Start-3
8568: PPUSH
8569: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8573: LD_EXP 25
8577: PPUSH
8578: LD_STRING DH-Start-4
8580: PPUSH
8581: CALL_OW 88
// InGameOff ;
8585: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8589: LD_STRING Prepare
8591: PPUSH
8592: CALL_OW 337
// SaveForQuickRestart ;
8596: CALL_OW 22
// wait ( 0 0$10 ) ;
8600: LD_INT 350
8602: PPUSH
8603: CALL_OW 67
// if not Aviradze then
8607: LD_EXP 35
8611: NOT
8612: IFFALSE 8616
// exit ;
8614: GO 8856
// SetDir ( Aviradze , 4 ) ;
8616: LD_EXP 35
8620: PPUSH
8621: LD_INT 4
8623: PPUSH
8624: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8628: LD_EXP 35
8632: PPUSH
8633: LD_INT 225
8635: PPUSH
8636: LD_INT 33
8638: PPUSH
8639: LD_INT 0
8641: PPUSH
8642: CALL_OW 48
// for i := 1 to 2 do
8646: LD_ADDR_VAR 0 2
8650: PUSH
8651: DOUBLE
8652: LD_INT 1
8654: DEC
8655: ST_TO_ADDR
8656: LD_INT 2
8658: PUSH
8659: FOR_TO
8660: IFFALSE 8791
// begin uc_side := 2 ;
8662: LD_ADDR_OWVAR 20
8666: PUSH
8667: LD_INT 2
8669: ST_TO_ADDR
// uc_nation := 0 ;
8670: LD_ADDR_OWVAR 21
8674: PUSH
8675: LD_INT 0
8677: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8678: LD_INT 0
8680: PPUSH
8681: LD_INT 12
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 380
// hc_gallery :=  ;
8691: LD_ADDR_OWVAR 33
8695: PUSH
8696: LD_STRING 
8698: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8699: LD_ADDR_OWVAR 26
8703: PUSH
8704: LD_STRING Artudito
8706: PUSH
8707: LD_STRING Textur
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: LD_VAR 0 2
8718: ARRAY
8719: ST_TO_ADDR
// un := CreateHuman ;
8720: LD_ADDR_VAR 0 3
8724: PUSH
8725: CALL_OW 44
8729: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8730: LD_VAR 0 3
8734: PPUSH
8735: LD_INT 224
8737: PUSH
8738: LD_INT 226
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_VAR 0 2
8749: ARRAY
8750: PPUSH
8751: LD_INT 31
8753: PUSH
8754: LD_INT 35
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: LD_VAR 0 2
8765: ARRAY
8766: PPUSH
8767: LD_INT 0
8769: PPUSH
8770: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8774: LD_VAR 0 3
8778: PPUSH
8779: LD_INT 215
8781: PPUSH
8782: LD_INT 36
8784: PPUSH
8785: CALL_OW 111
// end ;
8789: GO 8659
8791: POP
8792: POP
// hc_name :=  ;
8793: LD_ADDR_OWVAR 26
8797: PUSH
8798: LD_STRING 
8800: ST_TO_ADDR
// InitHc ;
8801: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8805: LD_EXP 35
8809: PPUSH
8810: LD_INT 215
8812: PPUSH
8813: LD_INT 36
8815: PPUSH
8816: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8820: LD_EXP 35
8824: PPUSH
8825: LD_STRING DA-Arrive-1
8827: PPUSH
8828: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8832: LD_EXP 25
8836: PPUSH
8837: LD_STRING DH-Arrive-2
8839: PPUSH
8840: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8844: LD_EXP 35
8848: PPUSH
8849: LD_STRING DA-Arrive-3
8851: PPUSH
8852: CALL_OW 88
// end ;
8856: LD_VAR 0 1
8860: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8861: LD_EXP 3
8865: IFFALSE 10254
8867: GO 8869
8869: DISABLE
8870: LD_INT 0
8872: PPUSH
8873: PPUSH
8874: PPUSH
// begin DialogueOn ;
8875: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8879: LD_EXP 25
8883: PPUSH
8884: LD_STRING DH-base-1
8886: PPUSH
8887: CALL_OW 88
// if Markov then
8891: LD_EXP 32
8895: IFFALSE 8947
// begin Say ( Markov , DMar-base-2 ) ;
8897: LD_EXP 32
8901: PPUSH
8902: LD_STRING DMar-base-2
8904: PPUSH
8905: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8909: LD_EXP 32
8913: PPUSH
8914: LD_STRING DMar-base-3
8916: PPUSH
8917: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8921: LD_EXP 25
8925: PPUSH
8926: LD_STRING DH-base-4
8928: PPUSH
8929: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8933: LD_EXP 32
8937: PPUSH
8938: LD_STRING DMar-base-5
8940: PPUSH
8941: CALL_OW 88
// end else
8945: GO 9024
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8947: LD_EXP 37
8951: PPUSH
8952: LD_INT 26
8954: PUSH
8955: LD_INT 1
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 72
8966: PUSH
8967: LD_INT 1
8969: ARRAY
8970: PPUSH
8971: LD_STRING DArm-base-a-2
8973: PPUSH
8974: CALL_OW 88
8978: NOT
8979: IFFALSE 9012
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
8981: LD_EXP 37
8985: PPUSH
8986: LD_INT 26
8988: PUSH
8989: LD_INT 2
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 72
9000: PUSH
9001: LD_INT 1
9003: ARRAY
9004: PPUSH
9005: LD_STRING DArf-base-a-2
9007: PPUSH
9008: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9012: LD_EXP 25
9016: PPUSH
9017: LD_STRING DH-base-a-3
9019: PPUSH
9020: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9024: LD_EXP 35
9028: PPUSH
9029: LD_STRING DA-base-6
9031: PPUSH
9032: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9036: LD_EXP 35
9040: PPUSH
9041: LD_STRING DA-base-7
9043: PPUSH
9044: CALL_OW 88
// DialogueOff ;
9048: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9052: LD_STRING Flamethrower
9054: PPUSH
9055: CALL_OW 337
// wait ( 2 2$00 ) ;
9059: LD_INT 4200
9061: PPUSH
9062: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9066: LD_EXP 34
9070: PUSH
9071: LD_EXP 27
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PPUSH
9080: LD_INT 203
9082: PPUSH
9083: LD_INT 37
9085: PPUSH
9086: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9090: LD_INT 22
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 92
9102: PUSH
9103: LD_INT 203
9105: PUSH
9106: LD_INT 37
9108: PUSH
9109: LD_INT 10
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PPUSH
9122: CALL_OW 69
9126: NOT
9127: IFFALSE 9167
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9129: LD_EXP 34
9133: PUSH
9134: LD_EXP 27
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: LD_EXP 25
9147: PPUSH
9148: CALL_OW 250
9152: PPUSH
9153: LD_EXP 25
9157: PPUSH
9158: CALL_OW 251
9162: PPUSH
9163: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9167: LD_INT 35
9169: PPUSH
9170: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9174: LD_INT 2
9176: PPUSH
9177: LD_EXP 34
9181: PPUSH
9182: CALL_OW 292
9186: PUSH
9187: LD_EXP 34
9191: PPUSH
9192: LD_EXP 25
9196: PPUSH
9197: CALL_OW 296
9201: PUSH
9202: LD_INT 8
9204: LESS
9205: PUSH
9206: LD_EXP 34
9210: PPUSH
9211: LD_INT 22
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 3
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PPUSH
9235: CALL_OW 69
9239: PPUSH
9240: LD_EXP 34
9244: PPUSH
9245: CALL_OW 74
9249: PPUSH
9250: CALL_OW 296
9254: PUSH
9255: LD_INT 7
9257: LESS
9258: OR
9259: AND
9260: PUSH
9261: LD_EXP 34
9265: PPUSH
9266: LD_INT 10
9268: PPUSH
9269: CALL_OW 308
9273: NOT
9274: AND
9275: IFFALSE 9167
// InGameOn ;
9277: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9281: LD_EXP 34
9285: PPUSH
9286: CALL_OW 87
// if IsInUnit ( Heike ) then
9290: LD_EXP 25
9294: PPUSH
9295: CALL_OW 310
9299: IFFALSE 9310
// ComExitBuilding ( Heike ) ;
9301: LD_EXP 25
9305: PPUSH
9306: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9310: LD_EXP 34
9314: PUSH
9315: LD_EXP 27
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: LD_EXP 25
9328: PPUSH
9329: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9333: LD_EXP 25
9337: PPUSH
9338: LD_EXP 34
9342: PPUSH
9343: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9347: LD_INT 22
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 91
9359: PUSH
9360: LD_EXP 34
9364: PUSH
9365: LD_INT 10
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 21
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 69
9392: IFFALSE 9418
// begin Say ( Kurt , DKs-scout-1 ) ;
9394: LD_EXP 34
9398: PPUSH
9399: LD_STRING DKs-scout-1
9401: PPUSH
9402: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9406: LD_EXP 25
9410: PPUSH
9411: LD_STRING DH-scout-2
9413: PPUSH
9414: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9418: LD_EXP 25
9422: PPUSH
9423: CALL_OW 85
// if IsInUnit ( Heike ) then
9427: LD_EXP 25
9431: PPUSH
9432: CALL_OW 310
9436: IFFALSE 9447
// ComExit ( Heike ) ;
9438: LD_EXP 25
9442: PPUSH
9443: CALL 71542 0 1
// repeat wait ( 0 0$1 ) ;
9447: LD_INT 35
9449: PPUSH
9450: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9454: LD_EXP 25
9458: PPUSH
9459: LD_EXP 34
9463: PPUSH
9464: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9468: LD_EXP 25
9472: PPUSH
9473: LD_EXP 34
9477: PPUSH
9478: CALL_OW 296
9482: PUSH
9483: LD_INT 6
9485: LESS
9486: IFFALSE 9447
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9488: LD_EXP 34
9492: PUSH
9493: LD_EXP 27
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: LD_EXP 25
9506: PPUSH
9507: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9511: LD_EXP 34
9515: PPUSH
9516: LD_STRING DKs-scout-3
9518: PPUSH
9519: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9523: LD_EXP 30
9527: PUSH
9528: LD_EXP 30
9532: PPUSH
9533: LD_EXP 34
9537: PPUSH
9538: CALL_OW 296
9542: PUSH
9543: LD_INT 15
9545: LESS
9546: AND
9547: IFFALSE 9737
// begin if IsInUnit ( Kaia ) then
9549: LD_EXP 30
9553: PPUSH
9554: CALL_OW 310
9558: IFFALSE 9569
// ComExitBuilding ( Kaia ) ;
9560: LD_EXP 30
9564: PPUSH
9565: CALL_OW 122
// wait ( 0 0$1 ) ;
9569: LD_INT 35
9571: PPUSH
9572: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9576: LD_EXP 30
9580: PPUSH
9581: LD_EXP 34
9585: PPUSH
9586: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9590: LD_INT 35
9592: PPUSH
9593: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9597: LD_EXP 30
9601: PPUSH
9602: LD_EXP 34
9606: PPUSH
9607: CALL_OW 296
9611: PUSH
9612: LD_INT 6
9614: LESS
9615: IFFALSE 9590
// ComTurnUnit ( Kaia , Kurt ) ;
9617: LD_EXP 30
9621: PPUSH
9622: LD_EXP 34
9626: PPUSH
9627: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9631: LD_EXP 30
9635: PPUSH
9636: LD_STRING DK-scout-4
9638: PPUSH
9639: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9643: LD_EXP 34
9647: PPUSH
9648: LD_EXP 30
9652: PPUSH
9653: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9657: LD_EXP 34
9661: PPUSH
9662: LD_STRING DKs-scout-5
9664: PPUSH
9665: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9669: LD_EXP 30
9673: PPUSH
9674: LD_STRING DK-scout-6
9676: PPUSH
9677: CALL_OW 88
// if Mike then
9681: LD_EXP 27
9685: IFFALSE 9737
// begin Say ( Mike , DM-scout-7 ) ;
9687: LD_EXP 27
9691: PPUSH
9692: LD_STRING DM-scout-7
9694: PPUSH
9695: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9699: LD_EXP 30
9703: PPUSH
9704: LD_EXP 27
9708: PPUSH
9709: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9713: LD_EXP 30
9717: PPUSH
9718: LD_STRING DK-scout-8
9720: PPUSH
9721: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9725: LD_EXP 27
9729: PPUSH
9730: LD_STRING DM-scout-9
9732: PPUSH
9733: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9737: LD_INT 184
9739: PPUSH
9740: LD_INT 100
9742: PPUSH
9743: LD_INT 2
9745: PPUSH
9746: LD_INT 12
9748: NEG
9749: PPUSH
9750: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9754: LD_INT 184
9756: PPUSH
9757: LD_INT 100
9759: PPUSH
9760: LD_INT 2
9762: PPUSH
9763: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9767: LD_INT 184
9769: PPUSH
9770: LD_INT 100
9772: PPUSH
9773: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DKs-scout-10
9784: PPUSH
9785: CALL_OW 88
// wait ( 0 0$1 ) ;
9789: LD_INT 35
9791: PPUSH
9792: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9796: LD_INT 144
9798: PPUSH
9799: LD_INT 65
9801: PPUSH
9802: LD_INT 2
9804: PPUSH
9805: LD_INT 12
9807: NEG
9808: PPUSH
9809: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9813: LD_INT 144
9815: PPUSH
9816: LD_INT 65
9818: PPUSH
9819: LD_INT 2
9821: PPUSH
9822: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9826: LD_INT 144
9828: PPUSH
9829: LD_INT 65
9831: PPUSH
9832: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9836: LD_EXP 34
9840: PPUSH
9841: LD_STRING DKs-scout-11
9843: PPUSH
9844: CALL_OW 88
// wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9855: LD_EXP 34
9859: PPUSH
9860: CALL_OW 87
// if Mike and not Givi then
9864: LD_EXP 27
9868: PUSH
9869: LD_EXP 26
9873: NOT
9874: AND
9875: IFFALSE 9901
// begin Say ( Mike , DM-scout-a-1 ) ;
9877: LD_EXP 27
9881: PPUSH
9882: LD_STRING DM-scout-a-1
9884: PPUSH
9885: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9889: LD_EXP 25
9893: PPUSH
9894: LD_STRING DH-scout-a-2
9896: PPUSH
9897: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9901: LD_EXP 34
9905: PUSH
9906: LD_EXP 27
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: LD_INT 2
9917: PPUSH
9918: CALL_OW 235
// InGameOff ;
9922: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9926: LD_STRING Hill
9928: PPUSH
9929: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
9933: LD_INT 20
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 424
// allowToPatrol := true ;
9943: LD_ADDR_EXP 12
9947: PUSH
9948: LD_INT 1
9950: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9951: LD_INT 3150
9953: PPUSH
9954: CALL_OW 67
// InitHc ;
9958: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
9962: LD_ADDR_VAR 0 1
9966: PUSH
9967: DOUBLE
9968: LD_INT 1
9970: DEC
9971: ST_TO_ADDR
9972: LD_INT 3
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: PUSH
9986: LD_OWVAR 67
9990: ARRAY
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10252
// begin uc_side := 2 ;
9995: LD_ADDR_OWVAR 20
9999: PUSH
10000: LD_INT 2
10002: ST_TO_ADDR
// uc_nation := 2 ;
10003: LD_ADDR_OWVAR 21
10007: PUSH
10008: LD_INT 2
10010: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10011: LD_INT 0
10013: PPUSH
10014: LD_INT 1
10016: PUSH
10017: LD_INT 3
10019: PUSH
10020: LD_INT 1
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_VAR 0 1
10032: PUSH
10033: LD_INT 3
10035: MOD
10036: PUSH
10037: LD_INT 1
10039: PLUS
10040: ARRAY
10041: PPUSH
10042: LD_INT 3
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: LD_OWVAR 67
10060: ARRAY
10061: PPUSH
10062: CALL_OW 380
// un := CreateHuman ;
10066: LD_ADDR_VAR 0 2
10070: PUSH
10071: CALL_OW 44
10075: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10076: LD_ADDR_EXP 37
10080: PUSH
10081: LD_EXP 37
10085: PUSH
10086: LD_VAR 0 2
10090: UNION
10091: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10092: LD_INT 2
10094: PPUSH
10095: LD_INT 2
10097: PPUSH
10098: LD_INT 13
10100: PPUSH
10101: LD_INT 2
10103: PUSH
10104: LD_INT 1
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: LD_VAR 0 1
10115: PUSH
10116: LD_INT 2
10118: MOD
10119: PUSH
10120: LD_INT 1
10122: PLUS
10123: ARRAY
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_INT 27
10130: PUSH
10131: LD_INT 25
10133: PUSH
10134: LD_INT 27
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: PUSH
10146: LD_OWVAR 67
10150: PUSH
10151: LD_INT 0
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 12
10161: PLUS
10162: ARRAY
10163: PPUSH
10164: LD_INT 77
10166: PPUSH
10167: CALL 366 0 7
// veh := CreateVehicle ;
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: CALL_OW 45
10180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10181: LD_VAR 0 3
10185: PPUSH
10186: LD_INT 2
10188: PPUSH
10189: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10193: LD_VAR 0 3
10197: PPUSH
10198: LD_INT 178
10200: PPUSH
10201: LD_INT 2
10203: PPUSH
10204: LD_INT 2
10206: PPUSH
10207: LD_INT 0
10209: PPUSH
10210: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10214: LD_VAR 0 2
10218: PPUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10228: LD_VAR 0 2
10232: PPUSH
10233: LD_INT 183
10235: PPUSH
10236: LD_INT 11
10238: PPUSH
10239: CALL_OW 111
// wait ( 0 0$2 ) ;
10243: LD_INT 70
10245: PPUSH
10246: CALL_OW 67
// end ;
10250: GO 9992
10252: POP
10253: POP
// end ;
10254: PPOPN 3
10256: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10257: LD_EXP 4
10261: PUSH
10262: LD_EXP 35
10266: PPUSH
10267: CALL_OW 302
10271: AND
10272: IFFALSE 10321
10274: GO 10276
10276: DISABLE
// begin DialogueOn ;
10277: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10281: LD_EXP 35
10285: PPUSH
10286: LD_STRING DA-lab-1
10288: PPUSH
10289: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10293: LD_EXP 35
10297: PPUSH
10298: LD_STRING DA-lab-2
10300: PPUSH
10301: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10305: LD_EXP 25
10309: PPUSH
10310: LD_STRING DH-lab-3
10312: PPUSH
10313: CALL_OW 88
// DialogueOff ;
10317: CALL_OW 7
// end ;
10321: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10322: LD_INT 17
10324: PPUSH
10325: LD_INT 2
10327: PPUSH
10328: CALL_OW 321
10332: PUSH
10333: LD_INT 2
10335: EQUAL
10336: IFFALSE 10468
10338: GO 10340
10340: DISABLE
10341: LD_INT 0
10343: PPUSH
// begin DialogueOn ;
10344: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10348: LD_EXP 35
10352: PPUSH
10353: LD_STRING DA-Cam-1
10355: PPUSH
10356: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10360: LD_EXP 35
10364: PPUSH
10365: LD_STRING DA-Cam-2
10367: PPUSH
10368: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10372: LD_EXP 35
10376: PPUSH
10377: LD_STRING DA-Cam-3
10379: PPUSH
10380: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10384: LD_EXP 25
10388: PPUSH
10389: LD_STRING DH-Cam-4
10391: PPUSH
10392: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10396: LD_EXP 30
10400: PPUSH
10401: LD_STRING DK-Cam-5
10403: PPUSH
10404: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10408: LD_EXP 30
10412: PPUSH
10413: LD_STRING DK-Cam-6
10415: PPUSH
10416: CALL_OW 88
// DialogueOff ;
10420: CALL_OW 7
// Query ( Camera ) ;
10424: LD_STRING Camera
10426: PPUSH
10427: CALL_OW 97
// hiddenCameraAllowed := true ;
10431: LD_ADDR_EXP 5
10435: PUSH
10436: LD_INT 1
10438: ST_TO_ADDR
// for i in camAreas do
10439: LD_ADDR_VAR 0 1
10443: PUSH
10444: LD_EXP 8
10448: PUSH
10449: FOR_IN
10450: IFFALSE 10466
// SetAreaMapShow ( i , 1 ) ;
10452: LD_VAR 0 1
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 424
10464: GO 10449
10466: POP
10467: POP
// end ;
10468: PPOPN 1
10470: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10471: LD_EXP 8
10475: NOT
10476: PUSH
10477: LD_EXP 5
10481: AND
10482: IFFALSE 10580
10484: GO 10486
10486: DISABLE
10487: LD_INT 0
10489: PPUSH
// begin stop_talking := true ;
10490: LD_ADDR_OWVAR 56
10494: PUSH
10495: LD_INT 1
10497: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 21
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 2
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: PPUSH
10538: CALL_OW 69
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10563
// AddExperience ( i , 2 , 450 ) ;
10546: LD_VAR 0 1
10550: PPUSH
10551: LD_INT 2
10553: PPUSH
10554: LD_INT 450
10556: PPUSH
10557: CALL_OW 492
10561: GO 10543
10563: POP
10564: POP
// stop_talking := false ;
10565: LD_ADDR_OWVAR 56
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10573: LD_STRING ACH_CAMERA
10575: PPUSH
10576: CALL_OW 543
// end ;
10580: PPOPN 1
10582: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10583: LD_EXP 9
10587: PUSH
10588: LD_EXP 11
10592: NOT
10593: AND
10594: IFFALSE 10653
10596: GO 10598
10598: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10599: LD_EXP 9
10603: PPUSH
10604: CALL_OW 250
10608: PPUSH
10609: LD_EXP 9
10613: PPUSH
10614: CALL_OW 251
10618: PPUSH
10619: LD_INT 2
10621: PPUSH
10622: LD_INT 6
10624: NEG
10625: PPUSH
10626: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10630: LD_EXP 9
10634: PPUSH
10635: CALL_OW 87
// wait ( 0 0$1 ) ;
10639: LD_INT 35
10641: PPUSH
10642: CALL_OW 67
// YouLost ( Spotted ) ;
10646: LD_STRING Spotted
10648: PPUSH
10649: CALL_OW 104
// end ;
10653: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10654: LD_INT 3
10656: PUSH
10657: LD_INT 6
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: LD_INT 2
10666: PPUSH
10667: LD_EXP 47
10671: PPUSH
10672: CALL 1026 0 3
10676: IFFALSE 10709
10678: GO 10680
10680: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10681: LD_ADDR_EXP 9
10685: PUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 6
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: LD_INT 2
10698: PPUSH
10699: LD_EXP 47
10703: PPUSH
10704: CALL 1026 0 3
10708: ST_TO_ADDR
10709: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10710: LD_INT 22
10712: PUSH
10713: LD_INT 6
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 30
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 24
10735: PUSH
10736: LD_INT 1000
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: IFFALSE 10817
10758: GO 10760
10760: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10761: LD_ADDR_EXP 9
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_INT 6
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 30
10778: PUSH
10779: LD_INT 32
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 3
10788: PUSH
10789: LD_INT 24
10791: PUSH
10792: LD_INT 1000
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: PPUSH
10808: CALL_OW 69
10812: PUSH
10813: LD_INT 1
10815: ARRAY
10816: ST_TO_ADDR
10817: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10818: LD_EXP 9
10822: IFFALSE 11054
10824: GO 10826
10826: DISABLE
10827: LD_INT 0
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10833: LD_ADDR_VAR 0 4
10837: PUSH
10838: LD_EXP 42
10842: PUSH
10843: LD_EXP 44
10847: PUSH
10848: LD_EXP 45
10852: UNION
10853: PPUSH
10854: LD_INT 3
10856: PUSH
10857: LD_INT 25
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 72
10875: UNION
10876: ST_TO_ADDR
// for i in noncombat do
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_VAR 0 4
10886: PUSH
10887: FOR_IN
10888: IFFALSE 10984
// begin if IsInUnit ( i ) then
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 310
10899: IFFALSE 10910
// ComExitBuilding ( i ) ;
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
10910: LD_VAR 0 1
10914: PPUSH
10915: LD_INT 114
10917: PPUSH
10918: LD_INT 97
10920: PPUSH
10921: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_INT 99
10932: PPUSH
10933: LD_INT 128
10935: PPUSH
10936: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
10940: LD_VAR 0 1
10944: PPUSH
10945: LD_INT 91
10947: PPUSH
10948: LD_INT 145
10950: PPUSH
10951: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
10955: LD_VAR 0 1
10959: PPUSH
10960: LD_INT 82
10962: PPUSH
10963: LD_INT 153
10965: PPUSH
10966: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
10970: LD_VAR 0 1
10974: PPUSH
10975: LD_INT 16
10977: PPUSH
10978: CALL_OW 173
// end ;
10982: GO 10887
10984: POP
10985: POP
// if not allowHeikeAttack then
10986: LD_EXP 11
10990: NOT
10991: IFFALSE 10995
// exit ;
10993: GO 11054
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10995: LD_EXP 40
10999: PPUSH
11000: LD_STRING D9a-Kur-1
11002: PPUSH
11003: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11007: LD_EXP 43
11011: PPUSH
11012: LD_STRING D9a-Bur-1
11014: PPUSH
11015: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11019: LD_EXP 40
11023: PPUSH
11024: LD_STRING D9a-Kur-2
11026: PPUSH
11027: CALL_OW 94
// omicronFall := true ;
11031: LD_ADDR_EXP 13
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11039: LD_INT 105
11041: PPUSH
11042: CALL_OW 67
// retreatFromOmicron := true ;
11046: LD_ADDR_EXP 20
11050: PUSH
11051: LD_INT 1
11053: ST_TO_ADDR
// end ;
11054: PPOPN 4
11056: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11057: LD_INT 16
11059: PPUSH
11060: LD_INT 3
11062: PUSH
11063: LD_INT 22
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PPUSH
11091: CALL_OW 70
11095: IFFALSE 11178
11097: GO 11099
11099: DISABLE
11100: LD_INT 0
11102: PPUSH
// begin enable ;
11103: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11104: LD_ADDR_VAR 0 1
11108: PUSH
11109: LD_INT 16
11111: PPUSH
11112: LD_INT 3
11114: PUSH
11115: LD_INT 22
11117: PUSH
11118: LD_INT 2
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 23
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 70
11147: PUSH
11148: FOR_IN
11149: IFFALSE 11176
// begin escapeCounter := escapeCounter + 1 ;
11151: LD_ADDR_EXP 19
11155: PUSH
11156: LD_EXP 19
11160: PUSH
11161: LD_INT 1
11163: PLUS
11164: ST_TO_ADDR
// RemoveUnit ( i ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 64
// end ;
11174: GO 11148
11176: POP
11177: POP
// end ;
11178: PPOPN 1
11180: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11181: LD_OWVAR 1
11185: PUSH
11186: LD_INT 13650
11188: PUSH
11189: LD_INT 0
11191: PPUSH
11192: LD_INT 3150
11194: PPUSH
11195: CALL_OW 12
11199: PLUS
11200: GREATEREQUAL
11201: IFFALSE 11210
11203: GO 11205
11205: DISABLE
// SmallAmericanReinforcements ;
11206: CALL 6583 0 0
11210: END
// every 0 0$1 trigger tick >= 9 9$15 do
11211: LD_OWVAR 1
11215: PUSH
11216: LD_INT 19425
11218: GREATEREQUAL
11219: IFFALSE 11284
11221: GO 11223
11223: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11224: LD_EXP 48
11228: PPUSH
11229: LD_INT 21
11231: PUSH
11232: LD_INT 2
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: PPUSH
11239: CALL_OW 72
11243: PPUSH
11244: LD_INT 62
11246: PPUSH
11247: LD_INT 22
11249: PPUSH
11250: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11254: LD_EXP 49
11258: PPUSH
11259: LD_INT 69
11261: PPUSH
11262: LD_INT 27
11264: PPUSH
11265: CALL_OW 111
// wait ( 1 1$00 ) ;
11269: LD_INT 2100
11271: PPUSH
11272: CALL_OW 67
// startAttackOnOmicron := true ;
11276: LD_ADDR_EXP 6
11280: PUSH
11281: LD_INT 1
11283: ST_TO_ADDR
// end ;
11284: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11285: LD_EXP 22
11289: PUSH
11290: LD_INT 0
11292: EQUAL
11293: IFFALSE 13310
11295: GO 11297
11297: DISABLE
11298: LD_INT 0
11300: PPUSH
11301: PPUSH
11302: PPUSH
11303: PPUSH
11304: PPUSH
11305: PPUSH
11306: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11307: LD_INT 5
11309: PPUSH
11310: LD_INT 2
11312: PPUSH
11313: CALL_OW 343
// PrepareOmarForces ;
11317: CALL 1596 0 0
// wait ( 0 0$03 ) ;
11321: LD_INT 105
11323: PPUSH
11324: CALL_OW 67
// allowHeikeAttack := true ;
11328: LD_ADDR_EXP 11
11332: PUSH
11333: LD_INT 1
11335: ST_TO_ADDR
// activeGrishkoAI := false ;
11336: LD_ADDR_EXP 10
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11344: LD_INT 20
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 424
// if not hillBase then
11354: LD_EXP 15
11358: NOT
11359: IFFALSE 11368
// ChangeMissionObjectives ( HillDone ) ;
11361: LD_STRING HillDone
11363: PPUSH
11364: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11368: LD_EXP 33
11372: PPUSH
11373: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11377: LD_ADDR_VAR 0 1
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_INT 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 21
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 69
11410: PUSH
11411: FOR_IN
11412: IFFALSE 11436
// if HasTask ( i ) then
11414: LD_VAR 0 1
11418: PPUSH
11419: CALL_OW 314
11423: IFFALSE 11434
// ComHold ( i ) ;
11425: LD_VAR 0 1
11429: PPUSH
11430: CALL_OW 140
11434: GO 11411
11436: POP
11437: POP
// DialogueOn ;
11438: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11442: LD_EXP 33
11446: PPUSH
11447: LD_STRING DO-assault-1
11449: PPUSH
11450: CALL_OW 94
// DialogueOff ;
11454: CALL_OW 7
// game_speed := 4 ;
11458: LD_ADDR_OWVAR 65
11462: PUSH
11463: LD_INT 4
11465: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11466: LD_ADDR_VAR 0 1
11470: PUSH
11471: LD_EXP 46
11475: PPUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 54
11481: PUSH
11482: EMPTY
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 72
11493: PUSH
11494: FOR_IN
11495: IFFALSE 11514
// ComMoveXY ( i , 226 , 114 ) ;
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_INT 226
11504: PPUSH
11505: LD_INT 114
11507: PPUSH
11508: CALL_OW 111
11512: GO 11494
11514: POP
11515: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11516: LD_EXP 41
11520: PPUSH
11521: LD_INT 22
11523: PUSH
11524: LD_INT 6
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 30
11533: PUSH
11534: LD_INT 4
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PPUSH
11545: CALL_OW 69
11549: PPUSH
11550: LD_EXP 41
11554: PPUSH
11555: CALL_OW 74
11559: PPUSH
11560: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11564: LD_STRING Attack
11566: PPUSH
11567: CALL_OW 337
// music_class := music_combat ;
11571: LD_ADDR_OWVAR 72
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// music_nat := 4 ;
11579: LD_ADDR_OWVAR 71
11583: PUSH
11584: LD_INT 4
11586: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11587: LD_INT 5
11589: PPUSH
11590: LD_EXP 41
11594: PPUSH
11595: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11599: LD_INT 6
11601: PPUSH
11602: LD_EXP 38
11606: PPUSH
11607: LD_INT 25
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 72
11621: PUSH
11622: LD_INT 4
11624: ARRAY
11625: PPUSH
11626: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11630: LD_ADDR_VAR 0 1
11634: PUSH
11635: LD_EXP 38
11639: PPUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 4
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PPUSH
11657: CALL_OW 72
11661: PUSH
11662: FOR_IN
11663: IFFALSE 11682
// ComAgressiveMove ( i , 221 , 110 ) ;
11665: LD_VAR 0 1
11669: PPUSH
11670: LD_INT 221
11672: PPUSH
11673: LD_INT 110
11675: PPUSH
11676: CALL_OW 114
11680: GO 11662
11682: POP
11683: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11684: LD_EXP 38
11688: PPUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 4
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PPUSH
11699: CALL_OW 72
11703: PPUSH
11704: LD_INT 214
11706: PPUSH
11707: LD_INT 124
11709: PPUSH
11710: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11714: LD_EXP 38
11718: PPUSH
11719: LD_INT 25
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 72
11733: PUSH
11734: LD_INT 4
11736: ARRAY
11737: PPUSH
11738: LD_INT 214
11740: PPUSH
11741: LD_INT 114
11743: PPUSH
11744: LD_INT 0
11746: PPUSH
11747: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11751: LD_EXP 41
11755: PPUSH
11756: LD_STRING D9-Gri-1
11758: PPUSH
11759: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11763: LD_EXP 40
11767: PPUSH
11768: LD_STRING D9-Kur-1
11770: PPUSH
11771: CALL_OW 94
// wait ( 0 0$1 ) ;
11775: LD_INT 35
11777: PPUSH
11778: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11782: LD_EXP 33
11786: PPUSH
11787: LD_INT 233
11789: PPUSH
11790: LD_INT 130
11792: PPUSH
11793: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11797: LD_EXP 41
11801: PPUSH
11802: LD_STRING D9-Gri-2
11804: PPUSH
11805: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11809: LD_EXP 40
11813: PPUSH
11814: LD_STRING D9-Kur-2
11816: PPUSH
11817: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11821: LD_EXP 41
11825: PPUSH
11826: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11830: LD_EXP 41
11834: PPUSH
11835: LD_INT 211
11837: PPUSH
11838: LD_INT 104
11840: PPUSH
11841: CALL_OW 171
// AddComHold ( Grishko ) ;
11845: LD_EXP 41
11849: PPUSH
11850: CALL_OW 200
// repeat wait ( 3 ) ;
11854: LD_INT 3
11856: PPUSH
11857: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11861: LD_EXP 41
11865: PPUSH
11866: CALL_OW 310
11870: NOT
11871: IFFALSE 11854
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11873: LD_EXP 38
11877: PPUSH
11878: LD_INT 34
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: CALL_OW 72
11892: PPUSH
11893: LD_EXP 41
11897: PPUSH
11898: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11902: LD_EXP 38
11906: PPUSH
11907: LD_INT 34
11909: PUSH
11910: LD_INT 26
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 72
11921: PPUSH
11922: LD_INT 215
11924: PPUSH
11925: LD_INT 106
11927: PPUSH
11928: CALL_OW 174
// repeat wait ( 3 ) ;
11932: LD_INT 3
11934: PPUSH
11935: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11939: LD_EXP 41
11943: PPUSH
11944: CALL_OW 256
11948: PUSH
11949: LD_INT 1000
11951: LESS
11952: IFFALSE 11932
// NormalAttack ( 5 , Grishko ) ;
11954: LD_INT 5
11956: PPUSH
11957: LD_EXP 41
11961: PPUSH
11962: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11966: LD_INT 6
11968: PPUSH
11969: LD_EXP 38
11973: PPUSH
11974: LD_INT 25
11976: PUSH
11977: LD_INT 1
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PPUSH
11984: CALL_OW 72
11988: PUSH
11989: LD_INT 4
11991: ARRAY
11992: PPUSH
11993: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11997: LD_EXP 41
12001: PPUSH
12002: LD_STRING D9-Gri-3
12004: PPUSH
12005: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12009: LD_EXP 40
12013: PPUSH
12014: LD_STRING D9-Kur-3
12016: PPUSH
12017: CALL_OW 94
// music_class := music_auto ;
12021: LD_ADDR_OWVAR 72
12025: PUSH
12026: LD_INT 0
12028: ST_TO_ADDR
// music_nat := music_auto ;
12029: LD_ADDR_OWVAR 71
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// for i in omarSquad do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_EXP 38
12046: PUSH
12047: FOR_IN
12048: IFFALSE 12190
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12050: LD_VAR 0 1
12054: PPUSH
12055: CALL_OW 247
12059: PUSH
12060: LD_INT 2
12062: EQUAL
12063: PUSH
12064: LD_VAR 0 1
12068: PPUSH
12069: CALL_OW 256
12073: PUSH
12074: LD_INT 1000
12076: LESS
12077: AND
12078: IFFALSE 12144
// begin driver := IsDrivenBy ( i ) ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 311
12094: ST_TO_ADDR
// veh := i ;
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_VAR 0 1
12104: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12114: LD_VAR 0 2
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12128: LD_VAR 0 2
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: CALL_OW 180
// end else
12142: GO 12188
// if GetLives ( i ) < 500 then
12144: LD_VAR 0 1
12148: PPUSH
12149: CALL_OW 256
12153: PUSH
12154: LD_INT 500
12156: LESS
12157: IFFALSE 12188
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12159: LD_EXP 38
12163: PPUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 72
12178: PPUSH
12179: LD_VAR 0 1
12183: PPUSH
12184: CALL_OW 188
// end ; end ;
12188: GO 12047
12190: POP
12191: POP
// repeat wait ( 0 0$1 ) ;
12192: LD_INT 35
12194: PPUSH
12195: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12199: LD_EXP 38
12203: PPUSH
12204: LD_INT 3
12206: PUSH
12207: LD_INT 24
12209: PUSH
12210: LD_INT 1000
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 21
12223: PUSH
12224: LD_INT 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL_OW 72
12239: NOT
12240: PUSH
12241: LD_EXP 38
12245: PPUSH
12246: LD_INT 3
12248: PUSH
12249: LD_INT 24
12251: PUSH
12252: LD_INT 250
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PPUSH
12263: CALL_OW 72
12267: NOT
12268: AND
12269: IFFALSE 12192
// wait ( 0 0$2 ) ;
12271: LD_INT 70
12273: PPUSH
12274: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12278: LD_ADDR_VAR 0 5
12282: PUSH
12283: LD_EXP 38
12287: PPUSH
12288: LD_INT 58
12290: PUSH
12291: EMPTY
12292: LIST
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 72
12312: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12313: LD_ADDR_VAR 0 6
12317: PUSH
12318: LD_EXP 38
12322: PPUSH
12323: LD_INT 25
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: LD_INT 55
12338: PUSH
12339: EMPTY
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: ST_TO_ADDR
// for i := 1 to tmp do
12355: LD_ADDR_VAR 0 1
12359: PUSH
12360: DOUBLE
12361: LD_INT 1
12363: DEC
12364: ST_TO_ADDR
12365: LD_VAR 0 5
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12401
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12373: LD_VAR 0 6
12377: PUSH
12378: LD_VAR 0 1
12382: ARRAY
12383: PPUSH
12384: LD_VAR 0 5
12388: PUSH
12389: LD_VAR 0 1
12393: ARRAY
12394: PPUSH
12395: CALL_OW 120
12399: GO 12370
12401: POP
12402: POP
// wait ( 0 0$5 ) ;
12403: LD_INT 175
12405: PPUSH
12406: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12410: LD_EXP 38
12414: PPUSH
12415: LD_INT 199
12417: PPUSH
12418: LD_INT 141
12420: PPUSH
12421: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12425: LD_EXP 33
12429: PPUSH
12430: LD_INT 190
12432: PPUSH
12433: LD_INT 143
12435: PPUSH
12436: CALL_OW 114
// AddComHold ( Omar ) ;
12440: LD_EXP 33
12444: PPUSH
12445: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12449: LD_EXP 38
12453: PPUSH
12454: LD_INT 2
12456: PUSH
12457: LD_INT 25
12459: PUSH
12460: LD_INT 1
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 25
12469: PUSH
12470: LD_INT 4
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 72
12486: PPUSH
12487: LD_INT 161
12489: PPUSH
12490: LD_INT 130
12492: PPUSH
12493: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12497: LD_EXP 38
12501: PPUSH
12502: LD_INT 25
12504: PUSH
12505: LD_INT 1
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 72
12516: PPUSH
12517: LD_INT 163
12519: PPUSH
12520: LD_INT 122
12522: PPUSH
12523: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12527: LD_EXP 38
12531: PPUSH
12532: LD_INT 25
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 72
12546: PUSH
12547: LD_INT 4
12549: ARRAY
12550: PPUSH
12551: LD_INT 165
12553: PPUSH
12554: LD_INT 118
12556: PPUSH
12557: LD_INT 0
12559: PPUSH
12560: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12564: LD_EXP 38
12568: PPUSH
12569: LD_INT 25
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PPUSH
12579: CALL_OW 72
12583: PUSH
12584: LD_INT 4
12586: ARRAY
12587: PPUSH
12588: LD_INT 159
12590: PPUSH
12591: LD_INT 116
12593: PPUSH
12594: LD_INT 0
12596: PPUSH
12597: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12601: LD_EXP 38
12605: PPUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 72
12620: PPUSH
12621: LD_INT 169
12623: PPUSH
12624: LD_INT 114
12626: PPUSH
12627: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12631: LD_INT 35
12633: PPUSH
12634: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12638: LD_ADDR_VAR 0 5
12642: PUSH
12643: LD_EXP 38
12647: PPUSH
12648: LD_INT 25
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PPUSH
12658: CALL_OW 72
12662: ST_TO_ADDR
// for i in tmp do
12663: LD_ADDR_VAR 0 1
12667: PUSH
12668: LD_VAR 0 5
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12771
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 256
12685: PUSH
12686: LD_INT 600
12688: LESS
12689: PUSH
12690: LD_VAR 0 1
12694: PPUSH
12695: LD_INT 161
12697: PPUSH
12698: LD_INT 130
12700: PPUSH
12701: CALL_OW 297
12705: PUSH
12706: LD_INT 6
12708: GREATER
12709: AND
12710: IFFALSE 12727
// ComMoveXY ( i , 161 , 130 ) ;
12712: LD_VAR 0 1
12716: PPUSH
12717: LD_INT 161
12719: PPUSH
12720: LD_INT 130
12722: PPUSH
12723: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL_OW 256
12736: PUSH
12737: LD_INT 1000
12739: EQUAL
12740: PUSH
12741: LD_VAR 0 1
12745: PPUSH
12746: CALL_OW 314
12750: NOT
12751: AND
12752: IFFALSE 12769
// ComAgressiveMove ( i , 160 , 109 ) ;
12754: LD_VAR 0 1
12758: PPUSH
12759: LD_INT 160
12761: PPUSH
12762: LD_INT 109
12764: PPUSH
12765: CALL_OW 114
// end ;
12769: GO 12673
12771: POP
12772: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12773: LD_ADDR_VAR 0 5
12777: PUSH
12778: LD_EXP 38
12782: PPUSH
12783: LD_INT 21
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 72
12797: ST_TO_ADDR
// for i in tmp do
12798: LD_ADDR_VAR 0 1
12802: PUSH
12803: LD_VAR 0 5
12807: PUSH
12808: FOR_IN
12809: IFFALSE 13075
// begin tmp2 := IsDrivenBy ( i ) ;
12811: LD_ADDR_VAR 0 6
12815: PUSH
12816: LD_VAR 0 1
12820: PPUSH
12821: CALL_OW 311
12825: ST_TO_ADDR
// if not tmp2 then
12826: LD_VAR 0 6
12830: NOT
12831: IFFALSE 12835
// continue ;
12833: GO 12808
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 256
12844: PUSH
12845: LD_INT 600
12847: GREATEREQUAL
12848: PUSH
12849: LD_VAR 0 1
12853: PPUSH
12854: CALL_OW 110
12858: PUSH
12859: LD_INT 1
12861: EQUAL
12862: AND
12863: IFFALSE 12877
// SetTag ( i , 0 ) ;
12865: LD_VAR 0 1
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12877: LD_VAR 0 1
12881: PPUSH
12882: CALL_OW 256
12886: PUSH
12887: LD_INT 600
12889: GREATEREQUAL
12890: PUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 110
12900: NOT
12901: AND
12902: IFFALSE 12928
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12904: LD_VAR 0 1
12908: PPUSH
12909: LD_VAR 0 7
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 74
12923: PPUSH
12924: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 256
12937: PUSH
12938: LD_INT 600
12940: LESS
12941: PUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 110
12951: NOT
12952: AND
12953: IFFALSE 12982
// begin SetTag ( i , 1 ) ;
12955: LD_VAR 0 1
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12967: LD_VAR 0 1
12971: PPUSH
12972: LD_INT 202
12974: PPUSH
12975: LD_INT 150
12977: PPUSH
12978: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 110
12991: PUSH
12992: LD_INT 1
12994: EQUAL
12995: PUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 202
13003: PPUSH
13004: LD_INT 150
13006: PPUSH
13007: CALL_OW 297
13011: PUSH
13012: LD_INT 6
13014: LESS
13015: AND
13016: PUSH
13017: LD_VAR 0 6
13021: AND
13022: IFFALSE 13073
// begin ComExitVehicle ( tmp2 ) ;
13024: LD_VAR 0 6
13028: PPUSH
13029: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13033: LD_VAR 0 6
13037: PPUSH
13038: LD_VAR 0 1
13042: PPUSH
13043: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13047: LD_VAR 0 6
13051: PPUSH
13052: LD_INT 700
13054: PPUSH
13055: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13059: LD_VAR 0 6
13063: PPUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 180
// end ; end ;
13073: GO 12808
13075: POP
13076: POP
// until kirovDestroyed ;
13077: LD_EXP 16
13081: IFFALSE 12631
// repeat wait ( 0 0$1 ) ;
13083: LD_INT 35
13085: PPUSH
13086: CALL_OW 67
// for i in omarSquad union Omar do
13090: LD_ADDR_VAR 0 1
13094: PUSH
13095: LD_EXP 38
13099: PUSH
13100: LD_EXP 33
13104: UNION
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13277
// if IsInArea ( i , southRoadArea ) then
13109: LD_VAR 0 1
13113: PPUSH
13114: LD_INT 15
13116: PPUSH
13117: CALL_OW 308
13121: IFFALSE 13134
// RemoveUnit ( i ) else
13123: LD_VAR 0 1
13127: PPUSH
13128: CALL_OW 64
13132: GO 13275
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 257
13143: PUSH
13144: LD_INT 3
13146: EQUAL
13147: PUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 310
13157: NOT
13158: AND
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: LD_INT 251
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 58
13192: PUSH
13193: EMPTY
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: AND
13207: IFFALSE 13260
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13209: LD_VAR 0 1
13213: PPUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 5
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 58
13236: PUSH
13237: EMPTY
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: PUSH
13250: LD_INT 1
13252: ARRAY
13253: PPUSH
13254: CALL_OW 120
13258: GO 13275
// ComMoveXY ( i , 208 , 162 ) ;
13260: LD_VAR 0 1
13264: PPUSH
13265: LD_INT 208
13267: PPUSH
13268: LD_INT 162
13270: PPUSH
13271: CALL_OW 111
// end ;
13275: GO 13106
13277: POP
13278: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13279: LD_INT 22
13281: PUSH
13282: LD_INT 5
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 21
13291: PUSH
13292: LD_INT 1
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 69
13307: NOT
13308: IFFALSE 13083
// end ;
13310: PPOPN 7
13312: END
// every 0 0$1 trigger IsDead ( kirov ) do
13313: LD_INT 71
13315: PPUSH
13316: CALL_OW 301
13320: IFFALSE 13337
13322: GO 13324
13324: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13325: LD_EXP 25
13329: PPUSH
13330: LD_STRING DH-1-Kirov
13332: PPUSH
13333: CALL_OW 88
13337: END
// every 0 0$1 trigger See ( 2 , beria ) do
13338: LD_INT 2
13340: PPUSH
13341: LD_INT 106
13343: PPUSH
13344: CALL_OW 292
13348: IFFALSE 13365
13350: GO 13352
13352: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13353: LD_EXP 25
13357: PPUSH
13358: LD_STRING DH-1-Beria
13360: PPUSH
13361: CALL_OW 88
13365: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13366: LD_INT 2
13368: PPUSH
13369: LD_INT 112
13371: PPUSH
13372: CALL_OW 292
13376: IFFALSE 13643
13378: GO 13380
13380: DISABLE
// begin DialogueOn ;
13381: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13385: LD_INT 112
13387: PPUSH
13388: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13392: LD_EXP 25
13396: PPUSH
13397: LD_STRING DH-1-Kagan
13399: PPUSH
13400: CALL_OW 88
// if Kamil then
13404: LD_EXP 29
13408: IFFALSE 13446
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13410: LD_EXP 29
13414: PPUSH
13415: LD_STRING DKam-Kagan-2
13417: PPUSH
13418: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13422: LD_EXP 26
13426: PPUSH
13427: LD_STRING DG-Kagan-3
13429: PPUSH
13430: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13434: LD_EXP 26
13438: PPUSH
13439: LD_STRING DG-Kagan-4
13441: PPUSH
13442: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13446: LD_STRING KaganBase
13448: PPUSH
13449: CALL_OW 97
13453: PUSH
13454: LD_INT 1
13456: DOUBLE
13457: EQUAL
13458: IFTRUE 13462
13460: GO 13557
13462: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13463: LD_EXP 25
13467: PPUSH
13468: LD_STRING DH-Kagan-5
13470: PPUSH
13471: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13475: LD_EXP 25
13479: PPUSH
13480: LD_STRING DH-Kagan-6
13482: PPUSH
13483: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13487: LD_EXP 36
13491: PPUSH
13492: LD_STRING DShar-Kagan-7
13494: PPUSH
13495: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13499: LD_EXP 25
13503: PPUSH
13504: LD_STRING DH-Kagan-8
13506: PPUSH
13507: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13511: LD_EXP 25
13515: PPUSH
13516: LD_STRING DH-Kagan-9
13518: PPUSH
13519: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13523: LD_EXP 36
13527: PPUSH
13528: LD_STRING DShar-Kagan-10
13530: PPUSH
13531: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13535: LD_EXP 25
13539: PPUSH
13540: LD_STRING DH-Kagan-11
13542: PPUSH
13543: CALL_OW 88
// kaganCaptured := true ;
13547: LD_ADDR_EXP 24
13551: PUSH
13552: LD_INT 1
13554: ST_TO_ADDR
// end ; 2 :
13555: GO 13639
13557: LD_INT 2
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 13638
13565: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13566: LD_INT 22
13568: PUSH
13569: LD_INT 8
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 69
13580: PUSH
13581: LD_EXP 35
13585: AND
13586: IFFALSE 13600
// Say ( Heike , DH-Kagan-a-5 ) ;
13588: LD_EXP 25
13592: PPUSH
13593: LD_STRING DH-Kagan-a-5
13595: PPUSH
13596: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13600: LD_EXP 25
13604: PPUSH
13605: LD_STRING DH-Kagan-a-6
13607: PPUSH
13608: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13612: LD_EXP 25
13616: PPUSH
13617: LD_STRING DH-Kagan-a-7
13619: PPUSH
13620: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13624: LD_EXP 26
13628: PPUSH
13629: LD_STRING DG-Kagan-a-8
13631: PPUSH
13632: CALL_OW 88
// end ; end ;
13636: GO 13639
13638: POP
// DialogueOff ;
13639: CALL_OW 7
// end ;
13643: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13644: LD_EXP 18
13648: PUSH
13649: LD_INT 112
13651: PPUSH
13652: CALL_OW 255
13656: PUSH
13657: LD_INT 2
13659: EQUAL
13660: OR
13661: IFFALSE 13673
13663: GO 13665
13665: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13666: LD_STRING KaganDone
13668: PPUSH
13669: CALL_OW 337
13673: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13674: LD_EXP 6
13678: PUSH
13679: LD_EXP 48
13683: PPUSH
13684: LD_INT 95
13686: PUSH
13687: LD_INT 19
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PPUSH
13694: CALL_OW 72
13698: AND
13699: IFFALSE 13776
13701: GO 13703
13703: DISABLE
// begin DialogueOn ;
13704: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13708: LD_INT 63
13710: PPUSH
13711: LD_INT 32
13713: PPUSH
13714: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13718: LD_INT 63
13720: PPUSH
13721: LD_INT 32
13723: PPUSH
13724: LD_INT 2
13726: PPUSH
13727: LD_INT 12
13729: NEG
13730: PPUSH
13731: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13735: LD_EXP 25
13739: PPUSH
13740: LD_STRING DH-Omicron-1
13742: PPUSH
13743: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13747: LD_EXP 27
13751: PPUSH
13752: LD_STRING DM-Omicron-2
13754: PPUSH
13755: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13759: LD_INT 63
13761: PPUSH
13762: LD_INT 32
13764: PPUSH
13765: LD_INT 2
13767: PPUSH
13768: CALL_OW 331
// DialogueOff ;
13772: CALL_OW 7
// end ;
13776: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13777: LD_INT 2
13779: PPUSH
13780: LD_EXP 50
13784: PPUSH
13785: CALL_OW 292
13789: PUSH
13790: LD_EXP 50
13794: PPUSH
13795: CALL_OW 255
13799: PUSH
13800: LD_INT 2
13802: EQUAL
13803: OR
13804: PUSH
13805: LD_INT 106
13807: PPUSH
13808: CALL_OW 255
13812: PUSH
13813: LD_INT 2
13815: EQUAL
13816: OR
13817: PUSH
13818: LD_EXP 50
13822: PPUSH
13823: CALL_OW 302
13827: AND
13828: PUSH
13829: LD_EXP 25
13833: PPUSH
13834: CALL_OW 302
13838: AND
13839: PUSH
13840: LD_EXP 35
13844: PPUSH
13845: CALL_OW 302
13849: AND
13850: IFFALSE 14571
13852: GO 13854
13854: DISABLE
13855: LD_INT 0
13857: PPUSH
13858: PPUSH
13859: PPUSH
13860: PPUSH
13861: PPUSH
// begin DialogueOn ;
13862: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13866: LD_INT 111
13868: PPUSH
13869: LD_INT 90
13871: PPUSH
13872: LD_INT 2
13874: PPUSH
13875: LD_INT 6
13877: NEG
13878: PPUSH
13879: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13883: LD_INT 111
13885: PPUSH
13886: LD_INT 90
13888: PPUSH
13889: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13893: LD_EXP 35
13897: PPUSH
13898: LD_STRING DA-Cap-1
13900: PPUSH
13901: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13905: LD_EXP 25
13909: PPUSH
13910: LD_STRING DH-Cap-2
13912: PPUSH
13913: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
13917: LD_INT 111
13919: PPUSH
13920: LD_INT 90
13922: PPUSH
13923: LD_INT 2
13925: PPUSH
13926: CALL_OW 331
// DialogueOff ;
13930: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13934: LD_INT 35
13936: PPUSH
13937: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
13941: LD_EXP 17
13945: PUSH
13946: LD_INT 106
13948: PPUSH
13949: CALL_OW 255
13953: PUSH
13954: LD_INT 2
13956: EQUAL
13957: OR
13958: PUSH
13959: LD_EXP 50
13963: PPUSH
13964: CALL_OW 255
13968: PUSH
13969: LD_INT 2
13971: EQUAL
13972: OR
13973: PUSH
13974: LD_EXP 50
13978: PPUSH
13979: CALL_OW 302
13983: AND
13984: PUSH
13985: LD_EXP 35
13989: PPUSH
13990: CALL_OW 302
13994: AND
13995: PUSH
13996: LD_INT 2
13998: PPUSH
13999: CALL_OW 463
14003: NOT
14004: AND
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_INT 3
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 1
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 92
14028: PUSH
14029: LD_INT 110
14031: PUSH
14032: LD_INT 95
14034: PUSH
14035: LD_INT 12
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 69
14053: NOT
14054: AND
14055: PUSH
14056: LD_INT 22
14058: PUSH
14059: LD_INT 3
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 30
14068: PUSH
14069: LD_INT 5
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 92
14078: PUSH
14079: LD_INT 110
14081: PUSH
14082: LD_INT 95
14084: PUSH
14085: LD_INT 12
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: PPUSH
14099: CALL_OW 69
14103: NOT
14104: AND
14105: IFFALSE 13934
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14107: LD_ADDR_VAR 0 2
14111: PUSH
14112: LD_EXP 37
14116: PUSH
14117: LD_EXP 28
14121: PUSH
14122: LD_EXP 29
14126: PUSH
14127: LD_EXP 31
14131: PUSH
14132: LD_EXP 30
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: UNION
14143: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14144: LD_ADDR_VAR 0 2
14148: PUSH
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_INT 50
14156: PUSH
14157: EMPTY
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: ST_TO_ADDR
// if tmp < 2 then
14165: LD_VAR 0 2
14169: PUSH
14170: LD_INT 2
14172: LESS
14173: IFFALSE 14185
// q := 2 else
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_INT 2
14182: ST_TO_ADDR
14183: GO 14198
// q := Query ( LabCap ) ;
14185: LD_ADDR_VAR 0 4
14189: PUSH
14190: LD_STRING LabCap
14192: PPUSH
14193: CALL_OW 97
14197: ST_TO_ADDR
// case q of 1 :
14198: LD_VAR 0 4
14202: PUSH
14203: LD_INT 1
14205: DOUBLE
14206: EQUAL
14207: IFTRUE 14211
14209: GO 14535
14211: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14212: LD_INT 2
14214: PPUSH
14215: LD_EXP 50
14219: PPUSH
14220: CALL_OW 471
// labCaptured := true ;
14224: LD_ADDR_EXP 21
14228: PUSH
14229: LD_INT 1
14231: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14232: LD_EXP 25
14236: PPUSH
14237: LD_STRING DH-Cap-a-1
14239: PPUSH
14240: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14244: LD_EXP 35
14248: PPUSH
14249: LD_STRING DA-Cap-a-2
14251: PPUSH
14252: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14256: LD_ADDR_VAR 0 5
14260: PUSH
14261: LD_EXP 35
14265: PUSH
14266: LD_INT -3
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT -2
14275: PUSH
14276: LD_INT -4
14278: PUSH
14279: LD_EXP 25
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: ADD
14289: PUSH
14290: LD_INT -3
14292: PUSH
14293: EMPTY
14294: LIST
14295: ADD
14296: PUSH
14297: LD_VAR 0 2
14301: ADD
14302: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14303: LD_ADDR_VAR 0 3
14307: PUSH
14308: LD_STRING Select two characters to go with Aviradze
14310: PPUSH
14311: LD_INT 2
14313: PPUSH
14314: LD_INT 2
14316: PPUSH
14317: LD_VAR 0 5
14321: PPUSH
14322: EMPTY
14323: PPUSH
14324: CALL_OW 42
14328: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14329: LD_EXP 50
14333: PPUSH
14334: LD_INT 8
14336: PPUSH
14337: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14341: LD_EXP 35
14345: PPUSH
14346: LD_INT 8
14348: PPUSH
14349: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14353: LD_ADDR_EXP 39
14357: PUSH
14358: LD_EXP 35
14362: PUSH
14363: EMPTY
14364: LIST
14365: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14366: LD_EXP 35
14370: PPUSH
14371: CALL_OW 310
14375: IFFALSE 14386
// ComExit ( Aviradze ) ;
14377: LD_EXP 35
14381: PPUSH
14382: CALL 71542 0 1
// wait ( 3 ) ;
14386: LD_INT 3
14388: PPUSH
14389: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14393: LD_EXP 35
14397: PPUSH
14398: LD_EXP 50
14402: PPUSH
14403: CALL_OW 120
// for i := 1 to 2 do
14407: LD_ADDR_VAR 0 1
14411: PUSH
14412: DOUBLE
14413: LD_INT 1
14415: DEC
14416: ST_TO_ADDR
14417: LD_INT 2
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14524
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14423: LD_ADDR_EXP 39
14427: PUSH
14428: LD_EXP 39
14432: PUSH
14433: LD_VAR 0 3
14437: PUSH
14438: LD_VAR 0 1
14442: ARRAY
14443: UNION
14444: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14445: LD_VAR 0 3
14449: PUSH
14450: LD_VAR 0 1
14454: ARRAY
14455: PPUSH
14456: LD_INT 8
14458: PPUSH
14459: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14463: LD_VAR 0 3
14467: PUSH
14468: LD_VAR 0 1
14472: ARRAY
14473: PPUSH
14474: CALL_OW 310
14478: IFFALSE 14495
// ComExit ( tmp2 [ i ] ) ;
14480: LD_VAR 0 3
14484: PUSH
14485: LD_VAR 0 1
14489: ARRAY
14490: PPUSH
14491: CALL 71542 0 1
// wait ( 3 ) ;
14495: LD_INT 3
14497: PPUSH
14498: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14502: LD_VAR 0 3
14506: PUSH
14507: LD_VAR 0 1
14511: ARRAY
14512: PPUSH
14513: LD_EXP 50
14517: PPUSH
14518: CALL_OW 120
// end ;
14522: GO 14420
14524: POP
14525: POP
// SetAchievement ( ACH_LAB ) ;
14526: LD_STRING ACH_LAB
14528: PPUSH
14529: CALL_OW 543
// end ; 2 :
14533: GO 14571
14535: LD_INT 2
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14570
14543: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14544: LD_EXP 25
14548: PPUSH
14549: LD_STRING DH-Cap-b-1
14551: PPUSH
14552: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14556: LD_EXP 35
14560: PPUSH
14561: LD_STRING DA-Cap-b-2
14563: PPUSH
14564: CALL_OW 88
// end ; end ;
14568: GO 14571
14570: POP
// end ;
14571: PPOPN 5
14573: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14574: LD_INT 10
14576: PPUSH
14577: LD_INT 22
14579: PUSH
14580: LD_INT 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 30
14589: PUSH
14590: LD_INT 31
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PPUSH
14601: CALL_OW 70
14605: PUSH
14606: LD_INT 2
14608: GREATEREQUAL
14609: IFFALSE 14621
14611: GO 14613
14613: DISABLE
// SetAchievement ( ACH_KING ) ;
14614: LD_STRING ACH_KING
14616: PPUSH
14617: CALL_OW 543
14621: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14622: LD_EXP 11
14626: NOT
14627: PUSH
14628: LD_INT 10
14630: PPUSH
14631: LD_INT 22
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 31
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 30
14656: PUSH
14657: LD_INT 4
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PPUSH
14673: CALL_OW 70
14677: AND
14678: IFFALSE 14698
14680: GO 14682
14682: DISABLE
// begin hillBase := true ;
14683: LD_ADDR_EXP 15
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14691: LD_STRING HillDone
14693: PPUSH
14694: CALL_OW 337
// end ;
14698: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14699: LD_EXP 30
14703: PUSH
14704: LD_EXP 30
14708: PPUSH
14709: CALL_OW 256
14713: PUSH
14714: LD_INT 3
14716: LESS
14717: AND
14718: IFFALSE 14764
14720: GO 14722
14722: DISABLE
// begin DialogueOn ;
14723: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14727: LD_EXP 30
14731: PPUSH
14732: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14736: LD_EXP 30
14740: PPUSH
14741: LD_STRING DK-Kkilled-1
14743: PPUSH
14744: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14748: LD_EXP 25
14752: PPUSH
14753: LD_STRING DH-Kkilled-2
14755: PPUSH
14756: CALL_OW 88
// DialogueOff ;
14760: CALL_OW 7
// end ;
14764: END
// every 0 0$1 trigger kaiaKilledByRussian do
14765: LD_EXP 23
14769: IFFALSE 14786
14771: GO 14773
14773: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14774: LD_EXP 25
14778: PPUSH
14779: LD_STRING DH-Kkilled-3
14781: PPUSH
14782: CALL_OW 88
14786: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14787: LD_EXP 16
14791: PUSH
14792: LD_INT 106
14794: PPUSH
14795: CALL_OW 255
14799: PUSH
14800: LD_INT 2
14802: EQUAL
14803: PUSH
14804: LD_EXP 17
14808: OR
14809: AND
14810: PUSH
14811: LD_EXP 18
14815: PUSH
14816: LD_EXP 24
14820: PUSH
14821: LD_INT 112
14823: PPUSH
14824: CALL_OW 255
14828: PUSH
14829: LD_INT 2
14831: EQUAL
14832: AND
14833: OR
14834: AND
14835: IFFALSE 16017
14837: GO 14839
14839: DISABLE
14840: LD_INT 0
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14846: LD_STRING GoToWest
14848: PPUSH
14849: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14853: LD_INT 17
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14863: LD_INT 35
14865: PPUSH
14866: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 17
14877: PPUSH
14878: LD_INT 22
14880: PUSH
14881: LD_INT 2
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 2
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 1
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 21
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 3
14913: PUSH
14914: LD_INT 58
14916: PUSH
14917: EMPTY
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PPUSH
14937: CALL_OW 70
14941: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14942: LD_ADDR_VAR 0 3
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: LD_INT 55
14962: PUSH
14963: EMPTY
14964: LIST
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 2
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 58
14998: PUSH
14999: EMPTY
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15025: LD_VAR 0 2
15029: PUSH
15030: LD_INT 0
15032: PLUS
15033: PUSH
15034: LD_VAR 0 3
15038: PUSH
15039: LD_INT 0
15041: PLUS
15042: EQUAL
15043: IFFALSE 14863
// SaveCharacters ( Heike , 04_1_Heike ) ;
15045: LD_EXP 25
15049: PPUSH
15050: LD_STRING 04_1_Heike
15052: PPUSH
15053: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15057: LD_EXP 35
15061: PUSH
15062: LD_EXP 35
15066: PUSH
15067: LD_EXP 39
15071: IN
15072: NOT
15073: AND
15074: IFFALSE 15090
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15076: LD_EXP 35
15080: PPUSH
15081: LD_STRING 04_1_Aviradze
15083: PPUSH
15084: CALL_OW 38
15088: GO 15108
// if Aviradze then
15090: LD_EXP 35
15094: IFFALSE 15108
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15096: LD_EXP 35
15100: PPUSH
15101: LD_STRING 04_1_Aviradze_L
15103: PPUSH
15104: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15108: LD_EXP 28
15112: PUSH
15113: LD_EXP 28
15117: PUSH
15118: LD_EXP 39
15122: IN
15123: NOT
15124: AND
15125: IFFALSE 15141
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15127: LD_EXP 28
15131: PPUSH
15132: LD_STRING 04_1_Ibrahim
15134: PPUSH
15135: CALL_OW 38
15139: GO 15159
// if Ibrahim then
15141: LD_EXP 28
15145: IFFALSE 15159
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15147: LD_EXP 28
15151: PPUSH
15152: LD_STRING 04_1_Ibrahim_L
15154: PPUSH
15155: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15159: LD_EXP 29
15163: PUSH
15164: LD_EXP 29
15168: PUSH
15169: LD_EXP 39
15173: IN
15174: NOT
15175: AND
15176: IFFALSE 15192
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15178: LD_EXP 29
15182: PPUSH
15183: LD_STRING 04_1_Kamil
15185: PPUSH
15186: CALL_OW 38
15190: GO 15210
// if Kamil then
15192: LD_EXP 29
15196: IFFALSE 15210
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15198: LD_EXP 29
15202: PPUSH
15203: LD_STRING 04_1_Kamil_L
15205: PPUSH
15206: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15210: LD_EXP 31
15214: PUSH
15215: LD_EXP 31
15219: PUSH
15220: LD_EXP 39
15224: IN
15225: NOT
15226: AND
15227: IFFALSE 15243
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15229: LD_EXP 31
15233: PPUSH
15234: LD_STRING 04_1_Sophia
15236: PPUSH
15237: CALL_OW 38
15241: GO 15261
// if Sophia then
15243: LD_EXP 31
15247: IFFALSE 15261
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15249: LD_EXP 31
15253: PPUSH
15254: LD_STRING 04_1_Sophia_L
15256: PPUSH
15257: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15261: LD_EXP 30
15265: PUSH
15266: LD_EXP 30
15270: PUSH
15271: LD_EXP 39
15275: IN
15276: NOT
15277: AND
15278: IFFALSE 15294
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15280: LD_EXP 30
15284: PPUSH
15285: LD_STRING 04_1_Kaia
15287: PPUSH
15288: CALL_OW 38
15292: GO 15312
// if Kaia then
15294: LD_EXP 30
15298: IFFALSE 15312
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15300: LD_EXP 30
15304: PPUSH
15305: LD_STRING 04_1_Kaia_L
15307: PPUSH
15308: CALL_OW 38
// if Givi then
15312: LD_EXP 26
15316: IFFALSE 15330
// SaveCharacters ( Givi , 04_1_Givi ) ;
15318: LD_EXP 26
15322: PPUSH
15323: LD_STRING 04_1_Givi
15325: PPUSH
15326: CALL_OW 38
// if Mike then
15330: LD_EXP 27
15334: IFFALSE 15348
// SaveCharacters ( Mike , 04_1_Mike ) ;
15336: LD_EXP 27
15340: PPUSH
15341: LD_STRING 04_1_Mike
15343: PPUSH
15344: CALL_OW 38
// if Markov then
15348: LD_EXP 32
15352: IFFALSE 15366
// SaveCharacters ( Markov , 04_1_Markov ) ;
15354: LD_EXP 32
15358: PPUSH
15359: LD_STRING 04_1_Markov
15361: PPUSH
15362: CALL_OW 38
// if Kurt then
15366: LD_EXP 34
15370: IFFALSE 15384
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15372: LD_EXP 34
15376: PPUSH
15377: LD_STRING 04_1_Kurt
15379: PPUSH
15380: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15384: LD_EXP 37
15388: PUSH
15389: LD_EXP 39
15393: DIFF
15394: IFFALSE 15414
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15396: LD_EXP 37
15400: PUSH
15401: LD_EXP 39
15405: DIFF
15406: PPUSH
15407: LD_STRING 04_1_others
15409: PPUSH
15410: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15414: LD_EXP 39
15418: PUSH
15419: LD_EXP 37
15423: AND
15424: IFFALSE 15509
// begin tmp := [ ] ;
15426: LD_ADDR_VAR 0 2
15430: PUSH
15431: EMPTY
15432: ST_TO_ADDR
// for i in heikeSecondSquad do
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: LD_EXP 37
15442: PUSH
15443: FOR_IN
15444: IFFALSE 15489
// if i in aviradzeSquad then
15446: LD_VAR 0 1
15450: PUSH
15451: LD_EXP 39
15455: IN
15456: IFFALSE 15487
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_VAR 0 2
15467: PPUSH
15468: LD_VAR 0 2
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: PPUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 1
15486: ST_TO_ADDR
15487: GO 15443
15489: POP
15490: POP
// if tmp then
15491: LD_VAR 0 2
15495: IFFALSE 15509
// SaveCharacters ( tmp , 04_1_others_L ) ;
15497: LD_VAR 0 2
15501: PPUSH
15502: LD_STRING 04_1_others_L
15504: PPUSH
15505: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_INT 2
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 23
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 69
15542: ST_TO_ADDR
// if tmp then
15543: LD_VAR 0 2
15547: IFFALSE 15561
// SaveCharacters ( tmp , 04_1_apes ) ;
15549: LD_VAR 0 2
15553: PPUSH
15554: LD_STRING 04_1_apes
15556: PPUSH
15557: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15561: LD_ADDR_VAR 0 2
15565: PUSH
15566: LD_INT 17
15568: PPUSH
15569: LD_INT 21
15571: PUSH
15572: LD_INT 2
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PPUSH
15579: CALL_OW 70
15583: ST_TO_ADDR
// if tmp then
15584: LD_VAR 0 2
15588: IFFALSE 15882
// begin tmp2 := [ ] ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: EMPTY
15596: ST_TO_ADDR
// for i in tmp do
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_VAR 0 2
15606: PUSH
15607: FOR_IN
15608: IFFALSE 15868
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15610: LD_VAR 0 1
15614: PPUSH
15615: CALL_OW 264
15619: PUSH
15620: LD_INT 32
15622: PUSH
15623: LD_INT 12
15625: PUSH
15626: LD_INT 51
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: IN
15634: IFFALSE 15771
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15636: LD_ADDR_VAR 0 4
15640: PUSH
15641: LD_VAR 0 1
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 289
15653: PUSH
15654: LD_VAR 0 1
15658: PPUSH
15659: LD_INT 2
15661: PPUSH
15662: CALL_OW 289
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15671: LD_ADDR_VAR 0 3
15675: PUSH
15676: LD_VAR 0 3
15680: PPUSH
15681: LD_VAR 0 3
15685: PUSH
15686: LD_INT 1
15688: PLUS
15689: PPUSH
15690: LD_VAR 0 1
15694: PPUSH
15695: CALL_OW 265
15699: PUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 262
15709: PUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 263
15719: PUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 264
15729: PUSH
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 248
15739: PUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 256
15749: PUSH
15750: LD_VAR 0 4
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PPUSH
15764: CALL_OW 1
15768: ST_TO_ADDR
// end else
15769: GO 15866
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 1
15788: PLUS
15789: PPUSH
15790: LD_VAR 0 1
15794: PPUSH
15795: CALL_OW 265
15799: PUSH
15800: LD_VAR 0 1
15804: PPUSH
15805: CALL_OW 262
15809: PUSH
15810: LD_VAR 0 1
15814: PPUSH
15815: CALL_OW 263
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 264
15829: PUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 248
15839: PUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 256
15849: PUSH
15850: EMPTY
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 1
15865: ST_TO_ADDR
15866: GO 15607
15868: POP
15869: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15870: LD_VAR 0 3
15874: PPUSH
15875: LD_STRING 04_1_Vehicles
15877: PPUSH
15878: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15882: LD_EXP 21
15886: PPUSH
15887: LD_STRING 04_1_RuLabCaptured
15889: PPUSH
15890: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15894: LD_EXP 19
15898: PPUSH
15899: LD_STRING 04_1_EscapeCounter
15901: PPUSH
15902: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15906: LD_EXP 15
15910: PPUSH
15911: LD_STRING 04_1_BaseHill
15913: PPUSH
15914: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15918: LD_OWVAR 1
15922: PPUSH
15923: LD_STRING 04_1_Time
15925: PPUSH
15926: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15930: LD_EXP 14
15934: PPUSH
15935: LD_STRING 04_1_DeadCounter
15937: PPUSH
15938: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15942: LD_EXP 24
15946: PUSH
15947: LD_INT 112
15949: PPUSH
15950: CALL_OW 255
15954: MUL
15955: PUSH
15956: LD_INT 2
15958: EQUAL
15959: PPUSH
15960: LD_STRING 04_1_KaganCaptured
15962: PPUSH
15963: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15967: LD_INT 22
15969: PUSH
15970: LD_INT 2
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 34
15979: PUSH
15980: LD_INT 26
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: PUSH
15996: LD_INT 0
15998: PLUS
15999: PPUSH
16000: LD_STRING 04_1_Flamethrower
16002: PPUSH
16003: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16007: LD_INT 1
16009: PPUSH
16010: LD_STRING __x1\04_cont2
16012: PPUSH
16013: CALL_OW 340
// end ; end_of_file
16017: PPOPN 4
16019: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 266
16029: PUSH
16030: LD_INT 0
16032: EQUAL
16033: PUSH
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 255
16043: PUSH
16044: LD_INT 2
16046: EQUAL
16047: AND
16048: IFFALSE 16058
// baseConstructed := true ;
16050: LD_ADDR_EXP 3
16054: PUSH
16055: LD_INT 1
16057: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 266
16067: PUSH
16068: LD_INT 6
16070: EQUAL
16071: PUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 255
16081: PUSH
16082: LD_INT 2
16084: EQUAL
16085: AND
16086: IFFALSE 16096
// labConstructed := true ;
16088: LD_ADDR_EXP 4
16092: PUSH
16093: LD_INT 1
16095: ST_TO_ADDR
// end ;
16096: PPOPN 1
16098: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16099: LD_VAR 0 1
16103: PUSH
16104: LD_EXP 25
16108: EQUAL
16109: IFFALSE 16118
// YouLost ( Heike ) ;
16111: LD_STRING Heike
16113: PPUSH
16114: CALL_OW 104
// if un = Omar then
16118: LD_VAR 0 1
16122: PUSH
16123: LD_EXP 33
16127: EQUAL
16128: IFFALSE 16137
// YouLost ( Omar ) ;
16130: LD_STRING Omar
16132: PPUSH
16133: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16137: LD_VAR 0 1
16141: PUSH
16142: LD_INT 22
16144: PUSH
16145: LD_INT 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 23
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 21
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 69
16181: IN
16182: IFFALSE 16198
// loseCounter := loseCounter + 1 ;
16184: LD_ADDR_EXP 14
16188: PUSH
16189: LD_EXP 14
16193: PUSH
16194: LD_INT 1
16196: PLUS
16197: ST_TO_ADDR
// if un = omikron then
16198: LD_VAR 0 1
16202: PUSH
16203: LD_INT 64
16205: EQUAL
16206: IFFALSE 16216
// omicronFall := true ;
16208: LD_ADDR_EXP 13
16212: PUSH
16213: LD_INT 1
16215: ST_TO_ADDR
// if un = kirov then
16216: LD_VAR 0 1
16220: PUSH
16221: LD_INT 71
16223: EQUAL
16224: IFFALSE 16241
// begin ChangeMissionObjectives ( KirovDone ) ;
16226: LD_STRING KirovDone
16228: PPUSH
16229: CALL_OW 337
// kirovDestroyed := true ;
16233: LD_ADDR_EXP 16
16237: PUSH
16238: LD_INT 1
16240: ST_TO_ADDR
// end ; if un = beria then
16241: LD_VAR 0 1
16245: PUSH
16246: LD_INT 106
16248: EQUAL
16249: IFFALSE 16266
// begin ChangeMissionObjectives ( BeriaDone ) ;
16251: LD_STRING BeriaDone
16253: PPUSH
16254: CALL_OW 337
// beriaDestroyed := true ;
16258: LD_ADDR_EXP 17
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// end ; if un = kagan then
16266: LD_VAR 0 1
16270: PUSH
16271: LD_INT 112
16273: EQUAL
16274: IFFALSE 16284
// kaganDestroyed := true ;
16276: LD_ADDR_EXP 18
16280: PUSH
16281: LD_INT 1
16283: ST_TO_ADDR
// if un in russianPatrol then
16284: LD_VAR 0 1
16288: PUSH
16289: LD_EXP 47
16293: IN
16294: IFFALSE 16312
// russianPatrol := russianPatrol diff un ;
16296: LD_ADDR_EXP 47
16300: PUSH
16301: LD_EXP 47
16305: PUSH
16306: LD_VAR 0 1
16310: DIFF
16311: ST_TO_ADDR
// if un in russianOmicronAttackers then
16312: LD_VAR 0 1
16316: PUSH
16317: LD_EXP 48
16321: IN
16322: IFFALSE 16340
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16324: LD_ADDR_EXP 48
16328: PUSH
16329: LD_EXP 48
16333: PUSH
16334: LD_VAR 0 1
16338: DIFF
16339: ST_TO_ADDR
// end ;
16340: PPOPN 1
16342: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16343: LD_INT 0
16345: PPUSH
16346: PPUSH
16347: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16348: LD_VAR 0 1
16352: PUSH
16353: LD_INT 2
16355: PUSH
16356: LD_INT 22
16358: PUSH
16359: LD_INT 3
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 4
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 22
16378: PUSH
16379: LD_INT 6
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 30
16394: PUSH
16395: LD_INT 32
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PPUSH
16406: CALL_OW 69
16410: IN
16411: IFFALSE 16584
// begin sol := UnitsInside ( un ) ;
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 313
16427: ST_TO_ADDR
// if not sol then
16428: LD_VAR 0 3
16432: NOT
16433: IFFALSE 16437
// exit ;
16435: GO 16584
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16437: LD_ADDR_VAR 0 4
16441: PUSH
16442: LD_INT 22
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 255
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 30
16464: PUSH
16465: LD_INT 4
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 30
16474: PUSH
16475: LD_INT 5
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: CALL_OW 69
16495: ST_TO_ADDR
// if not nearestBarracks then
16496: LD_VAR 0 4
16500: NOT
16501: IFFALSE 16505
// exit ;
16503: GO 16584
// for i in nearestBarracks do
16505: LD_ADDR_VAR 0 2
16509: PUSH
16510: LD_VAR 0 4
16514: PUSH
16515: FOR_IN
16516: IFFALSE 16551
// if UnitsInside ( i ) = 6 then
16518: LD_VAR 0 2
16522: PPUSH
16523: CALL_OW 313
16527: PUSH
16528: LD_INT 6
16530: EQUAL
16531: IFFALSE 16549
// nearestBarracks := nearestBarracks diff i ;
16533: LD_ADDR_VAR 0 4
16537: PUSH
16538: LD_VAR 0 4
16542: PUSH
16543: LD_VAR 0 2
16547: DIFF
16548: ST_TO_ADDR
16549: GO 16515
16551: POP
16552: POP
// if not nearestBarracks then
16553: LD_VAR 0 4
16557: NOT
16558: IFFALSE 16562
// exit ;
16560: GO 16584
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16562: LD_VAR 0 3
16566: PUSH
16567: LD_INT 1
16569: ARRAY
16570: PPUSH
16571: LD_VAR 0 4
16575: PUSH
16576: LD_INT 1
16578: ARRAY
16579: PPUSH
16580: CALL_OW 120
// end ; end ;
16584: PPOPN 4
16586: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16587: LD_INT 0
16589: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16590: LD_EXP 8
16594: NOT
16595: PUSH
16596: LD_EXP 5
16600: NOT
16601: OR
16602: IFFALSE 16606
// exit ;
16604: GO 16674
// for i in camAreas do
16606: LD_ADDR_VAR 0 5
16610: PUSH
16611: LD_EXP 8
16615: PUSH
16616: FOR_IN
16617: IFFALSE 16672
// if InArea ( x , y , i ) then
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_VAR 0 4
16628: PPUSH
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 309
16638: IFFALSE 16670
// begin SetAreaMapShow ( i , 0 ) ;
16640: LD_VAR 0 5
16644: PPUSH
16645: LD_INT 0
16647: PPUSH
16648: CALL_OW 424
// camAreas := camAreas diff i ;
16652: LD_ADDR_EXP 8
16656: PUSH
16657: LD_EXP 8
16661: PUSH
16662: LD_VAR 0 5
16666: DIFF
16667: ST_TO_ADDR
// break ;
16668: GO 16672
// end ;
16670: GO 16616
16672: POP
16673: POP
// end ;
16674: PPOPN 5
16676: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16677: LD_VAR 0 1
16681: PUSH
16682: LD_INT 2
16684: EQUAL
16685: PUSH
16686: LD_VAR 0 2
16690: PUSH
16691: LD_INT 5
16693: PUSH
16694: LD_INT 8
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: IN
16701: AND
16702: IFFALSE 16711
// YouLost ( Ally ) ;
16704: LD_STRING Ally
16706: PPUSH
16707: CALL_OW 104
// end ;
16711: PPOPN 2
16713: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16714: LD_VAR 0 1
16718: PUSH
16719: LD_EXP 30
16723: EQUAL
16724: PUSH
16725: LD_VAR 0 2
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: LD_INT 6
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: IN
16740: AND
16741: IFFALSE 16772
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16743: LD_ADDR_EXP 23
16747: PUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 250
16757: PUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 251
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: ST_TO_ADDR
// end ; end_of_file
16772: PPOPN 3
16774: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16775: LD_EXP 11
16779: NOT
16780: PUSH
16781: LD_INT 12
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 287
16791: PUSH
16792: LD_INT 20
16794: PUSH
16795: LD_INT 16
16797: PUSH
16798: LD_INT 12
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_OWVAR 67
16810: ARRAY
16811: LESS
16812: AND
16813: IFFALSE 16840
16815: GO 16817
16817: DISABLE
// begin enable ;
16818: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16819: LD_INT 1
16821: PPUSH
16822: LD_INT 5
16824: PPUSH
16825: CALL_OW 12
16829: PPUSH
16830: LD_INT 12
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 55
// end ; end_of_file
16840: END
// every 0 0$1 trigger omarCountdown do
16841: LD_EXP 22
16845: IFFALSE 16897
16847: GO 16849
16849: DISABLE
// begin enable ;
16850: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16851: LD_ADDR_OWVAR 47
16855: PUSH
16856: LD_STRING #X104-1
16858: PUSH
16859: LD_EXP 22
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16868: LD_ADDR_EXP 22
16872: PUSH
16873: LD_EXP 22
16877: PUSH
16878: LD_INT 35
16880: MINUS
16881: ST_TO_ADDR
// if not omarCountdown then
16882: LD_EXP 22
16886: NOT
16887: IFFALSE 16897
// display_strings :=  ;
16889: LD_ADDR_OWVAR 47
16893: PUSH
16894: LD_STRING 
16896: ST_TO_ADDR
// end ; end_of_file
16897: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16898: LD_INT 0
16900: PPUSH
// if p2 = 100 then
16901: LD_VAR 0 2
16905: PUSH
16906: LD_INT 100
16908: EQUAL
16909: IFFALSE 17858
// begin if not StreamModeActive then
16911: LD_EXP 52
16915: NOT
16916: IFFALSE 16926
// StreamModeActive := true ;
16918: LD_ADDR_EXP 52
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// if p3 = 0 then
16926: LD_VAR 0 3
16930: PUSH
16931: LD_INT 0
16933: EQUAL
16934: IFFALSE 16940
// InitStreamMode ;
16936: CALL 18018 0 0
// if p3 = 1 then
16940: LD_VAR 0 3
16944: PUSH
16945: LD_INT 1
16947: EQUAL
16948: IFFALSE 16958
// sRocket := true ;
16950: LD_ADDR_EXP 57
16954: PUSH
16955: LD_INT 1
16957: ST_TO_ADDR
// if p3 = 2 then
16958: LD_VAR 0 3
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: IFFALSE 16976
// sSpeed := true ;
16968: LD_ADDR_EXP 56
16972: PUSH
16973: LD_INT 1
16975: ST_TO_ADDR
// if p3 = 3 then
16976: LD_VAR 0 3
16980: PUSH
16981: LD_INT 3
16983: EQUAL
16984: IFFALSE 16994
// sEngine := true ;
16986: LD_ADDR_EXP 58
16990: PUSH
16991: LD_INT 1
16993: ST_TO_ADDR
// if p3 = 4 then
16994: LD_VAR 0 3
16998: PUSH
16999: LD_INT 4
17001: EQUAL
17002: IFFALSE 17012
// sSpec := true ;
17004: LD_ADDR_EXP 55
17008: PUSH
17009: LD_INT 1
17011: ST_TO_ADDR
// if p3 = 5 then
17012: LD_VAR 0 3
17016: PUSH
17017: LD_INT 5
17019: EQUAL
17020: IFFALSE 17030
// sLevel := true ;
17022: LD_ADDR_EXP 59
17026: PUSH
17027: LD_INT 1
17029: ST_TO_ADDR
// if p3 = 6 then
17030: LD_VAR 0 3
17034: PUSH
17035: LD_INT 6
17037: EQUAL
17038: IFFALSE 17048
// sArmoury := true ;
17040: LD_ADDR_EXP 60
17044: PUSH
17045: LD_INT 1
17047: ST_TO_ADDR
// if p3 = 7 then
17048: LD_VAR 0 3
17052: PUSH
17053: LD_INT 7
17055: EQUAL
17056: IFFALSE 17066
// sRadar := true ;
17058: LD_ADDR_EXP 61
17062: PUSH
17063: LD_INT 1
17065: ST_TO_ADDR
// if p3 = 8 then
17066: LD_VAR 0 3
17070: PUSH
17071: LD_INT 8
17073: EQUAL
17074: IFFALSE 17084
// sBunker := true ;
17076: LD_ADDR_EXP 62
17080: PUSH
17081: LD_INT 1
17083: ST_TO_ADDR
// if p3 = 9 then
17084: LD_VAR 0 3
17088: PUSH
17089: LD_INT 9
17091: EQUAL
17092: IFFALSE 17102
// sHack := true ;
17094: LD_ADDR_EXP 63
17098: PUSH
17099: LD_INT 1
17101: ST_TO_ADDR
// if p3 = 10 then
17102: LD_VAR 0 3
17106: PUSH
17107: LD_INT 10
17109: EQUAL
17110: IFFALSE 17120
// sFire := true ;
17112: LD_ADDR_EXP 64
17116: PUSH
17117: LD_INT 1
17119: ST_TO_ADDR
// if p3 = 11 then
17120: LD_VAR 0 3
17124: PUSH
17125: LD_INT 11
17127: EQUAL
17128: IFFALSE 17138
// sRefresh := true ;
17130: LD_ADDR_EXP 65
17134: PUSH
17135: LD_INT 1
17137: ST_TO_ADDR
// if p3 = 12 then
17138: LD_VAR 0 3
17142: PUSH
17143: LD_INT 12
17145: EQUAL
17146: IFFALSE 17156
// sExp := true ;
17148: LD_ADDR_EXP 66
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// if p3 = 13 then
17156: LD_VAR 0 3
17160: PUSH
17161: LD_INT 13
17163: EQUAL
17164: IFFALSE 17174
// sDepot := true ;
17166: LD_ADDR_EXP 67
17170: PUSH
17171: LD_INT 1
17173: ST_TO_ADDR
// if p3 = 14 then
17174: LD_VAR 0 3
17178: PUSH
17179: LD_INT 14
17181: EQUAL
17182: IFFALSE 17192
// sFlag := true ;
17184: LD_ADDR_EXP 68
17188: PUSH
17189: LD_INT 1
17191: ST_TO_ADDR
// if p3 = 15 then
17192: LD_VAR 0 3
17196: PUSH
17197: LD_INT 15
17199: EQUAL
17200: IFFALSE 17210
// sKamikadze := true ;
17202: LD_ADDR_EXP 76
17206: PUSH
17207: LD_INT 1
17209: ST_TO_ADDR
// if p3 = 16 then
17210: LD_VAR 0 3
17214: PUSH
17215: LD_INT 16
17217: EQUAL
17218: IFFALSE 17228
// sTroll := true ;
17220: LD_ADDR_EXP 77
17224: PUSH
17225: LD_INT 1
17227: ST_TO_ADDR
// if p3 = 17 then
17228: LD_VAR 0 3
17232: PUSH
17233: LD_INT 17
17235: EQUAL
17236: IFFALSE 17246
// sSlow := true ;
17238: LD_ADDR_EXP 78
17242: PUSH
17243: LD_INT 1
17245: ST_TO_ADDR
// if p3 = 18 then
17246: LD_VAR 0 3
17250: PUSH
17251: LD_INT 18
17253: EQUAL
17254: IFFALSE 17264
// sLack := true ;
17256: LD_ADDR_EXP 79
17260: PUSH
17261: LD_INT 1
17263: ST_TO_ADDR
// if p3 = 19 then
17264: LD_VAR 0 3
17268: PUSH
17269: LD_INT 19
17271: EQUAL
17272: IFFALSE 17282
// sTank := true ;
17274: LD_ADDR_EXP 81
17278: PUSH
17279: LD_INT 1
17281: ST_TO_ADDR
// if p3 = 20 then
17282: LD_VAR 0 3
17286: PUSH
17287: LD_INT 20
17289: EQUAL
17290: IFFALSE 17300
// sRemote := true ;
17292: LD_ADDR_EXP 82
17296: PUSH
17297: LD_INT 1
17299: ST_TO_ADDR
// if p3 = 21 then
17300: LD_VAR 0 3
17304: PUSH
17305: LD_INT 21
17307: EQUAL
17308: IFFALSE 17318
// sPowell := true ;
17310: LD_ADDR_EXP 83
17314: PUSH
17315: LD_INT 1
17317: ST_TO_ADDR
// if p3 = 22 then
17318: LD_VAR 0 3
17322: PUSH
17323: LD_INT 22
17325: EQUAL
17326: IFFALSE 17336
// sTeleport := true ;
17328: LD_ADDR_EXP 86
17332: PUSH
17333: LD_INT 1
17335: ST_TO_ADDR
// if p3 = 23 then
17336: LD_VAR 0 3
17340: PUSH
17341: LD_INT 23
17343: EQUAL
17344: IFFALSE 17354
// sOilTower := true ;
17346: LD_ADDR_EXP 88
17350: PUSH
17351: LD_INT 1
17353: ST_TO_ADDR
// if p3 = 24 then
17354: LD_VAR 0 3
17358: PUSH
17359: LD_INT 24
17361: EQUAL
17362: IFFALSE 17372
// sShovel := true ;
17364: LD_ADDR_EXP 89
17368: PUSH
17369: LD_INT 1
17371: ST_TO_ADDR
// if p3 = 25 then
17372: LD_VAR 0 3
17376: PUSH
17377: LD_INT 25
17379: EQUAL
17380: IFFALSE 17390
// sSheik := true ;
17382: LD_ADDR_EXP 90
17386: PUSH
17387: LD_INT 1
17389: ST_TO_ADDR
// if p3 = 26 then
17390: LD_VAR 0 3
17394: PUSH
17395: LD_INT 26
17397: EQUAL
17398: IFFALSE 17408
// sEarthquake := true ;
17400: LD_ADDR_EXP 92
17404: PUSH
17405: LD_INT 1
17407: ST_TO_ADDR
// if p3 = 27 then
17408: LD_VAR 0 3
17412: PUSH
17413: LD_INT 27
17415: EQUAL
17416: IFFALSE 17426
// sAI := true ;
17418: LD_ADDR_EXP 93
17422: PUSH
17423: LD_INT 1
17425: ST_TO_ADDR
// if p3 = 28 then
17426: LD_VAR 0 3
17430: PUSH
17431: LD_INT 28
17433: EQUAL
17434: IFFALSE 17444
// sCargo := true ;
17436: LD_ADDR_EXP 96
17440: PUSH
17441: LD_INT 1
17443: ST_TO_ADDR
// if p3 = 29 then
17444: LD_VAR 0 3
17448: PUSH
17449: LD_INT 29
17451: EQUAL
17452: IFFALSE 17462
// sDLaser := true ;
17454: LD_ADDR_EXP 97
17458: PUSH
17459: LD_INT 1
17461: ST_TO_ADDR
// if p3 = 30 then
17462: LD_VAR 0 3
17466: PUSH
17467: LD_INT 30
17469: EQUAL
17470: IFFALSE 17480
// sExchange := true ;
17472: LD_ADDR_EXP 98
17476: PUSH
17477: LD_INT 1
17479: ST_TO_ADDR
// if p3 = 31 then
17480: LD_VAR 0 3
17484: PUSH
17485: LD_INT 31
17487: EQUAL
17488: IFFALSE 17498
// sFac := true ;
17490: LD_ADDR_EXP 99
17494: PUSH
17495: LD_INT 1
17497: ST_TO_ADDR
// if p3 = 32 then
17498: LD_VAR 0 3
17502: PUSH
17503: LD_INT 32
17505: EQUAL
17506: IFFALSE 17516
// sPower := true ;
17508: LD_ADDR_EXP 100
17512: PUSH
17513: LD_INT 1
17515: ST_TO_ADDR
// if p3 = 33 then
17516: LD_VAR 0 3
17520: PUSH
17521: LD_INT 33
17523: EQUAL
17524: IFFALSE 17534
// sRandom := true ;
17526: LD_ADDR_EXP 101
17530: PUSH
17531: LD_INT 1
17533: ST_TO_ADDR
// if p3 = 34 then
17534: LD_VAR 0 3
17538: PUSH
17539: LD_INT 34
17541: EQUAL
17542: IFFALSE 17552
// sShield := true ;
17544: LD_ADDR_EXP 102
17548: PUSH
17549: LD_INT 1
17551: ST_TO_ADDR
// if p3 = 35 then
17552: LD_VAR 0 3
17556: PUSH
17557: LD_INT 35
17559: EQUAL
17560: IFFALSE 17570
// sTime := true ;
17562: LD_ADDR_EXP 103
17566: PUSH
17567: LD_INT 1
17569: ST_TO_ADDR
// if p3 = 36 then
17570: LD_VAR 0 3
17574: PUSH
17575: LD_INT 36
17577: EQUAL
17578: IFFALSE 17588
// sTools := true ;
17580: LD_ADDR_EXP 104
17584: PUSH
17585: LD_INT 1
17587: ST_TO_ADDR
// if p3 = 101 then
17588: LD_VAR 0 3
17592: PUSH
17593: LD_INT 101
17595: EQUAL
17596: IFFALSE 17606
// sSold := true ;
17598: LD_ADDR_EXP 69
17602: PUSH
17603: LD_INT 1
17605: ST_TO_ADDR
// if p3 = 102 then
17606: LD_VAR 0 3
17610: PUSH
17611: LD_INT 102
17613: EQUAL
17614: IFFALSE 17624
// sDiff := true ;
17616: LD_ADDR_EXP 70
17620: PUSH
17621: LD_INT 1
17623: ST_TO_ADDR
// if p3 = 103 then
17624: LD_VAR 0 3
17628: PUSH
17629: LD_INT 103
17631: EQUAL
17632: IFFALSE 17642
// sFog := true ;
17634: LD_ADDR_EXP 73
17638: PUSH
17639: LD_INT 1
17641: ST_TO_ADDR
// if p3 = 104 then
17642: LD_VAR 0 3
17646: PUSH
17647: LD_INT 104
17649: EQUAL
17650: IFFALSE 17660
// sReset := true ;
17652: LD_ADDR_EXP 74
17656: PUSH
17657: LD_INT 1
17659: ST_TO_ADDR
// if p3 = 105 then
17660: LD_VAR 0 3
17664: PUSH
17665: LD_INT 105
17667: EQUAL
17668: IFFALSE 17678
// sSun := true ;
17670: LD_ADDR_EXP 75
17674: PUSH
17675: LD_INT 1
17677: ST_TO_ADDR
// if p3 = 106 then
17678: LD_VAR 0 3
17682: PUSH
17683: LD_INT 106
17685: EQUAL
17686: IFFALSE 17696
// sTiger := true ;
17688: LD_ADDR_EXP 71
17692: PUSH
17693: LD_INT 1
17695: ST_TO_ADDR
// if p3 = 107 then
17696: LD_VAR 0 3
17700: PUSH
17701: LD_INT 107
17703: EQUAL
17704: IFFALSE 17714
// sBomb := true ;
17706: LD_ADDR_EXP 72
17710: PUSH
17711: LD_INT 1
17713: ST_TO_ADDR
// if p3 = 108 then
17714: LD_VAR 0 3
17718: PUSH
17719: LD_INT 108
17721: EQUAL
17722: IFFALSE 17732
// sWound := true ;
17724: LD_ADDR_EXP 80
17728: PUSH
17729: LD_INT 1
17731: ST_TO_ADDR
// if p3 = 109 then
17732: LD_VAR 0 3
17736: PUSH
17737: LD_INT 109
17739: EQUAL
17740: IFFALSE 17750
// sBetray := true ;
17742: LD_ADDR_EXP 84
17746: PUSH
17747: LD_INT 1
17749: ST_TO_ADDR
// if p3 = 110 then
17750: LD_VAR 0 3
17754: PUSH
17755: LD_INT 110
17757: EQUAL
17758: IFFALSE 17768
// sContamin := true ;
17760: LD_ADDR_EXP 85
17764: PUSH
17765: LD_INT 1
17767: ST_TO_ADDR
// if p3 = 111 then
17768: LD_VAR 0 3
17772: PUSH
17773: LD_INT 111
17775: EQUAL
17776: IFFALSE 17786
// sOil := true ;
17778: LD_ADDR_EXP 87
17782: PUSH
17783: LD_INT 1
17785: ST_TO_ADDR
// if p3 = 112 then
17786: LD_VAR 0 3
17790: PUSH
17791: LD_INT 112
17793: EQUAL
17794: IFFALSE 17804
// sStu := true ;
17796: LD_ADDR_EXP 91
17800: PUSH
17801: LD_INT 1
17803: ST_TO_ADDR
// if p3 = 113 then
17804: LD_VAR 0 3
17808: PUSH
17809: LD_INT 113
17811: EQUAL
17812: IFFALSE 17822
// sBazooka := true ;
17814: LD_ADDR_EXP 94
17818: PUSH
17819: LD_INT 1
17821: ST_TO_ADDR
// if p3 = 114 then
17822: LD_VAR 0 3
17826: PUSH
17827: LD_INT 114
17829: EQUAL
17830: IFFALSE 17840
// sMortar := true ;
17832: LD_ADDR_EXP 95
17836: PUSH
17837: LD_INT 1
17839: ST_TO_ADDR
// if p3 = 115 then
17840: LD_VAR 0 3
17844: PUSH
17845: LD_INT 115
17847: EQUAL
17848: IFFALSE 17858
// sRanger := true ;
17850: LD_ADDR_EXP 105
17854: PUSH
17855: LD_INT 1
17857: ST_TO_ADDR
// end ; if p2 = 101 then
17858: LD_VAR 0 2
17862: PUSH
17863: LD_INT 101
17865: EQUAL
17866: IFFALSE 17994
// begin case p3 of 1 :
17868: LD_VAR 0 3
17872: PUSH
17873: LD_INT 1
17875: DOUBLE
17876: EQUAL
17877: IFTRUE 17881
17879: GO 17888
17881: POP
// hHackUnlimitedResources ; 2 :
17882: CALL 29031 0 0
17886: GO 17994
17888: LD_INT 2
17890: DOUBLE
17891: EQUAL
17892: IFTRUE 17896
17894: GO 17903
17896: POP
// hHackSetLevel10 ; 3 :
17897: CALL 29164 0 0
17901: GO 17994
17903: LD_INT 3
17905: DOUBLE
17906: EQUAL
17907: IFTRUE 17911
17909: GO 17918
17911: POP
// hHackSetLevel10YourUnits ; 4 :
17912: CALL 29249 0 0
17916: GO 17994
17918: LD_INT 4
17920: DOUBLE
17921: EQUAL
17922: IFTRUE 17926
17924: GO 17933
17926: POP
// hHackInvincible ; 5 :
17927: CALL 29697 0 0
17931: GO 17994
17933: LD_INT 5
17935: DOUBLE
17936: EQUAL
17937: IFTRUE 17941
17939: GO 17948
17941: POP
// hHackInvisible ; 6 :
17942: CALL 29808 0 0
17946: GO 17994
17948: LD_INT 6
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 17963
17956: POP
// hHackChangeYourSide ; 7 :
17957: CALL 29865 0 0
17961: GO 17994
17963: LD_INT 7
17965: DOUBLE
17966: EQUAL
17967: IFTRUE 17971
17969: GO 17978
17971: POP
// hHackChangeUnitSide ; 8 :
17972: CALL 29907 0 0
17976: GO 17994
17978: LD_INT 8
17980: DOUBLE
17981: EQUAL
17982: IFTRUE 17986
17984: GO 17993
17986: POP
// hHackFog ; end ;
17987: CALL 30008 0 0
17991: GO 17994
17993: POP
// end ; end ;
17994: LD_VAR 0 7
17998: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
17999: GO 18001
18001: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18002: LD_STRING initStreamRollete();
18004: PPUSH
18005: CALL_OW 559
// InitStreamMode ;
18009: CALL 18018 0 0
// DefineStreamItems ( ) ;
18013: CALL 18458 0 0
// end ;
18017: END
// function InitStreamMode ; begin
18018: LD_INT 0
18020: PPUSH
// streamModeActive := false ;
18021: LD_ADDR_EXP 52
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
// normalCounter := 36 ;
18029: LD_ADDR_EXP 53
18033: PUSH
18034: LD_INT 36
18036: ST_TO_ADDR
// hardcoreCounter := 16 ;
18037: LD_ADDR_EXP 54
18041: PUSH
18042: LD_INT 16
18044: ST_TO_ADDR
// sRocket := false ;
18045: LD_ADDR_EXP 57
18049: PUSH
18050: LD_INT 0
18052: ST_TO_ADDR
// sSpeed := false ;
18053: LD_ADDR_EXP 56
18057: PUSH
18058: LD_INT 0
18060: ST_TO_ADDR
// sEngine := false ;
18061: LD_ADDR_EXP 58
18065: PUSH
18066: LD_INT 0
18068: ST_TO_ADDR
// sSpec := false ;
18069: LD_ADDR_EXP 55
18073: PUSH
18074: LD_INT 0
18076: ST_TO_ADDR
// sLevel := false ;
18077: LD_ADDR_EXP 59
18081: PUSH
18082: LD_INT 0
18084: ST_TO_ADDR
// sArmoury := false ;
18085: LD_ADDR_EXP 60
18089: PUSH
18090: LD_INT 0
18092: ST_TO_ADDR
// sRadar := false ;
18093: LD_ADDR_EXP 61
18097: PUSH
18098: LD_INT 0
18100: ST_TO_ADDR
// sBunker := false ;
18101: LD_ADDR_EXP 62
18105: PUSH
18106: LD_INT 0
18108: ST_TO_ADDR
// sHack := false ;
18109: LD_ADDR_EXP 63
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// sFire := false ;
18117: LD_ADDR_EXP 64
18121: PUSH
18122: LD_INT 0
18124: ST_TO_ADDR
// sRefresh := false ;
18125: LD_ADDR_EXP 65
18129: PUSH
18130: LD_INT 0
18132: ST_TO_ADDR
// sExp := false ;
18133: LD_ADDR_EXP 66
18137: PUSH
18138: LD_INT 0
18140: ST_TO_ADDR
// sDepot := false ;
18141: LD_ADDR_EXP 67
18145: PUSH
18146: LD_INT 0
18148: ST_TO_ADDR
// sFlag := false ;
18149: LD_ADDR_EXP 68
18153: PUSH
18154: LD_INT 0
18156: ST_TO_ADDR
// sKamikadze := false ;
18157: LD_ADDR_EXP 76
18161: PUSH
18162: LD_INT 0
18164: ST_TO_ADDR
// sTroll := false ;
18165: LD_ADDR_EXP 77
18169: PUSH
18170: LD_INT 0
18172: ST_TO_ADDR
// sSlow := false ;
18173: LD_ADDR_EXP 78
18177: PUSH
18178: LD_INT 0
18180: ST_TO_ADDR
// sLack := false ;
18181: LD_ADDR_EXP 79
18185: PUSH
18186: LD_INT 0
18188: ST_TO_ADDR
// sTank := false ;
18189: LD_ADDR_EXP 81
18193: PUSH
18194: LD_INT 0
18196: ST_TO_ADDR
// sRemote := false ;
18197: LD_ADDR_EXP 82
18201: PUSH
18202: LD_INT 0
18204: ST_TO_ADDR
// sPowell := false ;
18205: LD_ADDR_EXP 83
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
// sTeleport := false ;
18213: LD_ADDR_EXP 86
18217: PUSH
18218: LD_INT 0
18220: ST_TO_ADDR
// sOilTower := false ;
18221: LD_ADDR_EXP 88
18225: PUSH
18226: LD_INT 0
18228: ST_TO_ADDR
// sShovel := false ;
18229: LD_ADDR_EXP 89
18233: PUSH
18234: LD_INT 0
18236: ST_TO_ADDR
// sSheik := false ;
18237: LD_ADDR_EXP 90
18241: PUSH
18242: LD_INT 0
18244: ST_TO_ADDR
// sEarthquake := false ;
18245: LD_ADDR_EXP 92
18249: PUSH
18250: LD_INT 0
18252: ST_TO_ADDR
// sAI := false ;
18253: LD_ADDR_EXP 93
18257: PUSH
18258: LD_INT 0
18260: ST_TO_ADDR
// sCargo := false ;
18261: LD_ADDR_EXP 96
18265: PUSH
18266: LD_INT 0
18268: ST_TO_ADDR
// sDLaser := false ;
18269: LD_ADDR_EXP 97
18273: PUSH
18274: LD_INT 0
18276: ST_TO_ADDR
// sExchange := false ;
18277: LD_ADDR_EXP 98
18281: PUSH
18282: LD_INT 0
18284: ST_TO_ADDR
// sFac := false ;
18285: LD_ADDR_EXP 99
18289: PUSH
18290: LD_INT 0
18292: ST_TO_ADDR
// sPower := false ;
18293: LD_ADDR_EXP 100
18297: PUSH
18298: LD_INT 0
18300: ST_TO_ADDR
// sRandom := false ;
18301: LD_ADDR_EXP 101
18305: PUSH
18306: LD_INT 0
18308: ST_TO_ADDR
// sShield := false ;
18309: LD_ADDR_EXP 102
18313: PUSH
18314: LD_INT 0
18316: ST_TO_ADDR
// sTime := false ;
18317: LD_ADDR_EXP 103
18321: PUSH
18322: LD_INT 0
18324: ST_TO_ADDR
// sTools := false ;
18325: LD_ADDR_EXP 104
18329: PUSH
18330: LD_INT 0
18332: ST_TO_ADDR
// sSold := false ;
18333: LD_ADDR_EXP 69
18337: PUSH
18338: LD_INT 0
18340: ST_TO_ADDR
// sDiff := false ;
18341: LD_ADDR_EXP 70
18345: PUSH
18346: LD_INT 0
18348: ST_TO_ADDR
// sFog := false ;
18349: LD_ADDR_EXP 73
18353: PUSH
18354: LD_INT 0
18356: ST_TO_ADDR
// sReset := false ;
18357: LD_ADDR_EXP 74
18361: PUSH
18362: LD_INT 0
18364: ST_TO_ADDR
// sSun := false ;
18365: LD_ADDR_EXP 75
18369: PUSH
18370: LD_INT 0
18372: ST_TO_ADDR
// sTiger := false ;
18373: LD_ADDR_EXP 71
18377: PUSH
18378: LD_INT 0
18380: ST_TO_ADDR
// sBomb := false ;
18381: LD_ADDR_EXP 72
18385: PUSH
18386: LD_INT 0
18388: ST_TO_ADDR
// sWound := false ;
18389: LD_ADDR_EXP 80
18393: PUSH
18394: LD_INT 0
18396: ST_TO_ADDR
// sBetray := false ;
18397: LD_ADDR_EXP 84
18401: PUSH
18402: LD_INT 0
18404: ST_TO_ADDR
// sContamin := false ;
18405: LD_ADDR_EXP 85
18409: PUSH
18410: LD_INT 0
18412: ST_TO_ADDR
// sOil := false ;
18413: LD_ADDR_EXP 87
18417: PUSH
18418: LD_INT 0
18420: ST_TO_ADDR
// sStu := false ;
18421: LD_ADDR_EXP 91
18425: PUSH
18426: LD_INT 0
18428: ST_TO_ADDR
// sBazooka := false ;
18429: LD_ADDR_EXP 94
18433: PUSH
18434: LD_INT 0
18436: ST_TO_ADDR
// sMortar := false ;
18437: LD_ADDR_EXP 95
18441: PUSH
18442: LD_INT 0
18444: ST_TO_ADDR
// sRanger := false ;
18445: LD_ADDR_EXP 105
18449: PUSH
18450: LD_INT 0
18452: ST_TO_ADDR
// end ;
18453: LD_VAR 0 1
18457: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18458: LD_INT 0
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
// result := [ ] ;
18465: LD_ADDR_VAR 0 1
18469: PUSH
18470: EMPTY
18471: ST_TO_ADDR
// if campaign_id = 1 then
18472: LD_OWVAR 69
18476: PUSH
18477: LD_INT 1
18479: EQUAL
18480: IFFALSE 21418
// begin case mission_number of 1 :
18482: LD_OWVAR 70
18486: PUSH
18487: LD_INT 1
18489: DOUBLE
18490: EQUAL
18491: IFTRUE 18495
18493: GO 18559
18495: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
18496: LD_ADDR_VAR 0 1
18500: PUSH
18501: LD_INT 2
18503: PUSH
18504: LD_INT 4
18506: PUSH
18507: LD_INT 11
18509: PUSH
18510: LD_INT 12
18512: PUSH
18513: LD_INT 15
18515: PUSH
18516: LD_INT 16
18518: PUSH
18519: LD_INT 22
18521: PUSH
18522: LD_INT 23
18524: PUSH
18525: LD_INT 26
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 101
18541: PUSH
18542: LD_INT 102
18544: PUSH
18545: LD_INT 106
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: ST_TO_ADDR
18557: GO 21416
18559: LD_INT 2
18561: DOUBLE
18562: EQUAL
18563: IFTRUE 18567
18565: GO 18639
18567: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
18568: LD_ADDR_VAR 0 1
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: LD_INT 4
18578: PUSH
18579: LD_INT 11
18581: PUSH
18582: LD_INT 12
18584: PUSH
18585: LD_INT 15
18587: PUSH
18588: LD_INT 16
18590: PUSH
18591: LD_INT 22
18593: PUSH
18594: LD_INT 23
18596: PUSH
18597: LD_INT 26
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 101
18613: PUSH
18614: LD_INT 102
18616: PUSH
18617: LD_INT 105
18619: PUSH
18620: LD_INT 106
18622: PUSH
18623: LD_INT 108
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: ST_TO_ADDR
18637: GO 21416
18639: LD_INT 3
18641: DOUBLE
18642: EQUAL
18643: IFTRUE 18647
18645: GO 18723
18647: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
18648: LD_ADDR_VAR 0 1
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: LD_INT 11
18664: PUSH
18665: LD_INT 12
18667: PUSH
18668: LD_INT 15
18670: PUSH
18671: LD_INT 16
18673: PUSH
18674: LD_INT 22
18676: PUSH
18677: LD_INT 26
18679: PUSH
18680: LD_INT 36
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 101
18697: PUSH
18698: LD_INT 102
18700: PUSH
18701: LD_INT 105
18703: PUSH
18704: LD_INT 106
18706: PUSH
18707: LD_INT 108
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: ST_TO_ADDR
18721: GO 21416
18723: LD_INT 4
18725: DOUBLE
18726: EQUAL
18727: IFTRUE 18731
18729: GO 18815
18731: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
18732: LD_ADDR_VAR 0 1
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 4
18742: PUSH
18743: LD_INT 5
18745: PUSH
18746: LD_INT 8
18748: PUSH
18749: LD_INT 11
18751: PUSH
18752: LD_INT 12
18754: PUSH
18755: LD_INT 15
18757: PUSH
18758: LD_INT 16
18760: PUSH
18761: LD_INT 22
18763: PUSH
18764: LD_INT 23
18766: PUSH
18767: LD_INT 26
18769: PUSH
18770: LD_INT 36
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 101
18789: PUSH
18790: LD_INT 102
18792: PUSH
18793: LD_INT 105
18795: PUSH
18796: LD_INT 106
18798: PUSH
18799: LD_INT 108
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: ST_TO_ADDR
18813: GO 21416
18815: LD_INT 5
18817: DOUBLE
18818: EQUAL
18819: IFTRUE 18823
18821: GO 18923
18823: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 4
18834: PUSH
18835: LD_INT 5
18837: PUSH
18838: LD_INT 6
18840: PUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 11
18846: PUSH
18847: LD_INT 12
18849: PUSH
18850: LD_INT 15
18852: PUSH
18853: LD_INT 16
18855: PUSH
18856: LD_INT 22
18858: PUSH
18859: LD_INT 23
18861: PUSH
18862: LD_INT 25
18864: PUSH
18865: LD_INT 26
18867: PUSH
18868: LD_INT 36
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 101
18889: PUSH
18890: LD_INT 102
18892: PUSH
18893: LD_INT 105
18895: PUSH
18896: LD_INT 106
18898: PUSH
18899: LD_INT 108
18901: PUSH
18902: LD_INT 109
18904: PUSH
18905: LD_INT 112
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: ST_TO_ADDR
18921: GO 21416
18923: LD_INT 6
18925: DOUBLE
18926: EQUAL
18927: IFTRUE 18931
18929: GO 19051
18931: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
18932: LD_ADDR_VAR 0 1
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: LD_INT 4
18942: PUSH
18943: LD_INT 5
18945: PUSH
18946: LD_INT 6
18948: PUSH
18949: LD_INT 8
18951: PUSH
18952: LD_INT 11
18954: PUSH
18955: LD_INT 12
18957: PUSH
18958: LD_INT 15
18960: PUSH
18961: LD_INT 16
18963: PUSH
18964: LD_INT 20
18966: PUSH
18967: LD_INT 21
18969: PUSH
18970: LD_INT 22
18972: PUSH
18973: LD_INT 23
18975: PUSH
18976: LD_INT 25
18978: PUSH
18979: LD_INT 26
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 31
18987: PUSH
18988: LD_INT 32
18990: PUSH
18991: LD_INT 36
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 101
19017: PUSH
19018: LD_INT 102
19020: PUSH
19021: LD_INT 105
19023: PUSH
19024: LD_INT 106
19026: PUSH
19027: LD_INT 108
19029: PUSH
19030: LD_INT 109
19032: PUSH
19033: LD_INT 112
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: ST_TO_ADDR
19049: GO 21416
19051: LD_INT 7
19053: DOUBLE
19054: EQUAL
19055: IFTRUE 19059
19057: GO 19159
19059: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
19060: LD_ADDR_VAR 0 1
19064: PUSH
19065: LD_INT 2
19067: PUSH
19068: LD_INT 4
19070: PUSH
19071: LD_INT 5
19073: PUSH
19074: LD_INT 7
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 15
19085: PUSH
19086: LD_INT 16
19088: PUSH
19089: LD_INT 20
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 22
19097: PUSH
19098: LD_INT 23
19100: PUSH
19101: LD_INT 25
19103: PUSH
19104: LD_INT 26
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 101
19125: PUSH
19126: LD_INT 102
19128: PUSH
19129: LD_INT 103
19131: PUSH
19132: LD_INT 105
19134: PUSH
19135: LD_INT 106
19137: PUSH
19138: LD_INT 108
19140: PUSH
19141: LD_INT 112
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: ST_TO_ADDR
19157: GO 21416
19159: LD_INT 8
19161: DOUBLE
19162: EQUAL
19163: IFTRUE 19167
19165: GO 19295
19167: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
19168: LD_ADDR_VAR 0 1
19172: PUSH
19173: LD_INT 2
19175: PUSH
19176: LD_INT 4
19178: PUSH
19179: LD_INT 5
19181: PUSH
19182: LD_INT 6
19184: PUSH
19185: LD_INT 7
19187: PUSH
19188: LD_INT 8
19190: PUSH
19191: LD_INT 11
19193: PUSH
19194: LD_INT 12
19196: PUSH
19197: LD_INT 15
19199: PUSH
19200: LD_INT 16
19202: PUSH
19203: LD_INT 20
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 22
19211: PUSH
19212: LD_INT 23
19214: PUSH
19215: LD_INT 25
19217: PUSH
19218: LD_INT 26
19220: PUSH
19221: LD_INT 30
19223: PUSH
19224: LD_INT 31
19226: PUSH
19227: LD_INT 32
19229: PUSH
19230: LD_INT 36
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 101
19257: PUSH
19258: LD_INT 102
19260: PUSH
19261: LD_INT 103
19263: PUSH
19264: LD_INT 105
19266: PUSH
19267: LD_INT 106
19269: PUSH
19270: LD_INT 108
19272: PUSH
19273: LD_INT 109
19275: PUSH
19276: LD_INT 112
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: ST_TO_ADDR
19293: GO 21416
19295: LD_INT 9
19297: DOUBLE
19298: EQUAL
19299: IFTRUE 19303
19301: GO 19439
19303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
19304: LD_ADDR_VAR 0 1
19308: PUSH
19309: LD_INT 2
19311: PUSH
19312: LD_INT 4
19314: PUSH
19315: LD_INT 5
19317: PUSH
19318: LD_INT 6
19320: PUSH
19321: LD_INT 7
19323: PUSH
19324: LD_INT 8
19326: PUSH
19327: LD_INT 11
19329: PUSH
19330: LD_INT 12
19332: PUSH
19333: LD_INT 15
19335: PUSH
19336: LD_INT 16
19338: PUSH
19339: LD_INT 20
19341: PUSH
19342: LD_INT 21
19344: PUSH
19345: LD_INT 22
19347: PUSH
19348: LD_INT 23
19350: PUSH
19351: LD_INT 25
19353: PUSH
19354: LD_INT 26
19356: PUSH
19357: LD_INT 28
19359: PUSH
19360: LD_INT 30
19362: PUSH
19363: LD_INT 31
19365: PUSH
19366: LD_INT 32
19368: PUSH
19369: LD_INT 36
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 101
19397: PUSH
19398: LD_INT 102
19400: PUSH
19401: LD_INT 103
19403: PUSH
19404: LD_INT 105
19406: PUSH
19407: LD_INT 106
19409: PUSH
19410: LD_INT 108
19412: PUSH
19413: LD_INT 109
19415: PUSH
19416: LD_INT 112
19418: PUSH
19419: LD_INT 114
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: ST_TO_ADDR
19437: GO 21416
19439: LD_INT 10
19441: DOUBLE
19442: EQUAL
19443: IFTRUE 19447
19445: GO 19631
19447: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
19448: LD_ADDR_VAR 0 1
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: LD_INT 4
19458: PUSH
19459: LD_INT 5
19461: PUSH
19462: LD_INT 6
19464: PUSH
19465: LD_INT 7
19467: PUSH
19468: LD_INT 8
19470: PUSH
19471: LD_INT 9
19473: PUSH
19474: LD_INT 10
19476: PUSH
19477: LD_INT 11
19479: PUSH
19480: LD_INT 12
19482: PUSH
19483: LD_INT 13
19485: PUSH
19486: LD_INT 14
19488: PUSH
19489: LD_INT 15
19491: PUSH
19492: LD_INT 16
19494: PUSH
19495: LD_INT 17
19497: PUSH
19498: LD_INT 18
19500: PUSH
19501: LD_INT 19
19503: PUSH
19504: LD_INT 20
19506: PUSH
19507: LD_INT 21
19509: PUSH
19510: LD_INT 22
19512: PUSH
19513: LD_INT 23
19515: PUSH
19516: LD_INT 24
19518: PUSH
19519: LD_INT 25
19521: PUSH
19522: LD_INT 26
19524: PUSH
19525: LD_INT 28
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 31
19533: PUSH
19534: LD_INT 32
19536: PUSH
19537: LD_INT 36
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 101
19573: PUSH
19574: LD_INT 102
19576: PUSH
19577: LD_INT 103
19579: PUSH
19580: LD_INT 104
19582: PUSH
19583: LD_INT 105
19585: PUSH
19586: LD_INT 106
19588: PUSH
19589: LD_INT 107
19591: PUSH
19592: LD_INT 108
19594: PUSH
19595: LD_INT 109
19597: PUSH
19598: LD_INT 110
19600: PUSH
19601: LD_INT 111
19603: PUSH
19604: LD_INT 112
19606: PUSH
19607: LD_INT 114
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: ST_TO_ADDR
19629: GO 21416
19631: LD_INT 11
19633: DOUBLE
19634: EQUAL
19635: IFTRUE 19639
19637: GO 19831
19639: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
19640: LD_ADDR_VAR 0 1
19644: PUSH
19645: LD_INT 2
19647: PUSH
19648: LD_INT 3
19650: PUSH
19651: LD_INT 4
19653: PUSH
19654: LD_INT 5
19656: PUSH
19657: LD_INT 6
19659: PUSH
19660: LD_INT 7
19662: PUSH
19663: LD_INT 8
19665: PUSH
19666: LD_INT 9
19668: PUSH
19669: LD_INT 10
19671: PUSH
19672: LD_INT 11
19674: PUSH
19675: LD_INT 12
19677: PUSH
19678: LD_INT 13
19680: PUSH
19681: LD_INT 14
19683: PUSH
19684: LD_INT 15
19686: PUSH
19687: LD_INT 16
19689: PUSH
19690: LD_INT 17
19692: PUSH
19693: LD_INT 18
19695: PUSH
19696: LD_INT 19
19698: PUSH
19699: LD_INT 20
19701: PUSH
19702: LD_INT 21
19704: PUSH
19705: LD_INT 22
19707: PUSH
19708: LD_INT 23
19710: PUSH
19711: LD_INT 24
19713: PUSH
19714: LD_INT 25
19716: PUSH
19717: LD_INT 26
19719: PUSH
19720: LD_INT 28
19722: PUSH
19723: LD_INT 30
19725: PUSH
19726: LD_INT 31
19728: PUSH
19729: LD_INT 32
19731: PUSH
19732: LD_INT 34
19734: PUSH
19735: LD_INT 36
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 101
19773: PUSH
19774: LD_INT 102
19776: PUSH
19777: LD_INT 103
19779: PUSH
19780: LD_INT 104
19782: PUSH
19783: LD_INT 105
19785: PUSH
19786: LD_INT 106
19788: PUSH
19789: LD_INT 107
19791: PUSH
19792: LD_INT 108
19794: PUSH
19795: LD_INT 109
19797: PUSH
19798: LD_INT 110
19800: PUSH
19801: LD_INT 111
19803: PUSH
19804: LD_INT 112
19806: PUSH
19807: LD_INT 114
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: ST_TO_ADDR
19829: GO 21416
19831: LD_INT 12
19833: DOUBLE
19834: EQUAL
19835: IFTRUE 19839
19837: GO 20047
19839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
19840: LD_ADDR_VAR 0 1
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 3
19853: PUSH
19854: LD_INT 4
19856: PUSH
19857: LD_INT 5
19859: PUSH
19860: LD_INT 6
19862: PUSH
19863: LD_INT 7
19865: PUSH
19866: LD_INT 8
19868: PUSH
19869: LD_INT 9
19871: PUSH
19872: LD_INT 10
19874: PUSH
19875: LD_INT 11
19877: PUSH
19878: LD_INT 12
19880: PUSH
19881: LD_INT 13
19883: PUSH
19884: LD_INT 14
19886: PUSH
19887: LD_INT 15
19889: PUSH
19890: LD_INT 16
19892: PUSH
19893: LD_INT 17
19895: PUSH
19896: LD_INT 18
19898: PUSH
19899: LD_INT 19
19901: PUSH
19902: LD_INT 20
19904: PUSH
19905: LD_INT 21
19907: PUSH
19908: LD_INT 22
19910: PUSH
19911: LD_INT 23
19913: PUSH
19914: LD_INT 24
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 26
19922: PUSH
19923: LD_INT 27
19925: PUSH
19926: LD_INT 28
19928: PUSH
19929: LD_INT 30
19931: PUSH
19932: LD_INT 31
19934: PUSH
19935: LD_INT 32
19937: PUSH
19938: LD_INT 33
19940: PUSH
19941: LD_INT 34
19943: PUSH
19944: LD_INT 36
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 101
19985: PUSH
19986: LD_INT 102
19988: PUSH
19989: LD_INT 103
19991: PUSH
19992: LD_INT 104
19994: PUSH
19995: LD_INT 105
19997: PUSH
19998: LD_INT 106
20000: PUSH
20001: LD_INT 107
20003: PUSH
20004: LD_INT 108
20006: PUSH
20007: LD_INT 109
20009: PUSH
20010: LD_INT 110
20012: PUSH
20013: LD_INT 111
20015: PUSH
20016: LD_INT 112
20018: PUSH
20019: LD_INT 113
20021: PUSH
20022: LD_INT 114
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: ST_TO_ADDR
20045: GO 21416
20047: LD_INT 13
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20251
20055: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
20056: LD_ADDR_VAR 0 1
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 2
20066: PUSH
20067: LD_INT 3
20069: PUSH
20070: LD_INT 4
20072: PUSH
20073: LD_INT 5
20075: PUSH
20076: LD_INT 8
20078: PUSH
20079: LD_INT 9
20081: PUSH
20082: LD_INT 10
20084: PUSH
20085: LD_INT 11
20087: PUSH
20088: LD_INT 12
20090: PUSH
20091: LD_INT 14
20093: PUSH
20094: LD_INT 15
20096: PUSH
20097: LD_INT 16
20099: PUSH
20100: LD_INT 17
20102: PUSH
20103: LD_INT 18
20105: PUSH
20106: LD_INT 19
20108: PUSH
20109: LD_INT 20
20111: PUSH
20112: LD_INT 21
20114: PUSH
20115: LD_INT 22
20117: PUSH
20118: LD_INT 23
20120: PUSH
20121: LD_INT 24
20123: PUSH
20124: LD_INT 25
20126: PUSH
20127: LD_INT 26
20129: PUSH
20130: LD_INT 27
20132: PUSH
20133: LD_INT 28
20135: PUSH
20136: LD_INT 30
20138: PUSH
20139: LD_INT 31
20141: PUSH
20142: LD_INT 32
20144: PUSH
20145: LD_INT 33
20147: PUSH
20148: LD_INT 34
20150: PUSH
20151: LD_INT 36
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 101
20189: PUSH
20190: LD_INT 102
20192: PUSH
20193: LD_INT 103
20195: PUSH
20196: LD_INT 104
20198: PUSH
20199: LD_INT 105
20201: PUSH
20202: LD_INT 106
20204: PUSH
20205: LD_INT 107
20207: PUSH
20208: LD_INT 108
20210: PUSH
20211: LD_INT 109
20213: PUSH
20214: LD_INT 110
20216: PUSH
20217: LD_INT 111
20219: PUSH
20220: LD_INT 112
20222: PUSH
20223: LD_INT 113
20225: PUSH
20226: LD_INT 114
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: ST_TO_ADDR
20249: GO 21416
20251: LD_INT 14
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20471
20259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
20260: LD_ADDR_VAR 0 1
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: LD_INT 4
20276: PUSH
20277: LD_INT 5
20279: PUSH
20280: LD_INT 6
20282: PUSH
20283: LD_INT 7
20285: PUSH
20286: LD_INT 8
20288: PUSH
20289: LD_INT 9
20291: PUSH
20292: LD_INT 10
20294: PUSH
20295: LD_INT 11
20297: PUSH
20298: LD_INT 12
20300: PUSH
20301: LD_INT 13
20303: PUSH
20304: LD_INT 14
20306: PUSH
20307: LD_INT 15
20309: PUSH
20310: LD_INT 16
20312: PUSH
20313: LD_INT 17
20315: PUSH
20316: LD_INT 18
20318: PUSH
20319: LD_INT 19
20321: PUSH
20322: LD_INT 20
20324: PUSH
20325: LD_INT 21
20327: PUSH
20328: LD_INT 22
20330: PUSH
20331: LD_INT 23
20333: PUSH
20334: LD_INT 24
20336: PUSH
20337: LD_INT 25
20339: PUSH
20340: LD_INT 26
20342: PUSH
20343: LD_INT 27
20345: PUSH
20346: LD_INT 28
20348: PUSH
20349: LD_INT 29
20351: PUSH
20352: LD_INT 30
20354: PUSH
20355: LD_INT 31
20357: PUSH
20358: LD_INT 32
20360: PUSH
20361: LD_INT 33
20363: PUSH
20364: LD_INT 34
20366: PUSH
20367: LD_INT 36
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 101
20409: PUSH
20410: LD_INT 102
20412: PUSH
20413: LD_INT 103
20415: PUSH
20416: LD_INT 104
20418: PUSH
20419: LD_INT 105
20421: PUSH
20422: LD_INT 106
20424: PUSH
20425: LD_INT 107
20427: PUSH
20428: LD_INT 108
20430: PUSH
20431: LD_INT 109
20433: PUSH
20434: LD_INT 110
20436: PUSH
20437: LD_INT 111
20439: PUSH
20440: LD_INT 112
20442: PUSH
20443: LD_INT 113
20445: PUSH
20446: LD_INT 114
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: ST_TO_ADDR
20469: GO 21416
20471: LD_INT 15
20473: DOUBLE
20474: EQUAL
20475: IFTRUE 20479
20477: GO 20691
20479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
20480: LD_ADDR_VAR 0 1
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 3
20493: PUSH
20494: LD_INT 4
20496: PUSH
20497: LD_INT 5
20499: PUSH
20500: LD_INT 6
20502: PUSH
20503: LD_INT 7
20505: PUSH
20506: LD_INT 8
20508: PUSH
20509: LD_INT 9
20511: PUSH
20512: LD_INT 10
20514: PUSH
20515: LD_INT 11
20517: PUSH
20518: LD_INT 12
20520: PUSH
20521: LD_INT 13
20523: PUSH
20524: LD_INT 14
20526: PUSH
20527: LD_INT 15
20529: PUSH
20530: LD_INT 16
20532: PUSH
20533: LD_INT 17
20535: PUSH
20536: LD_INT 18
20538: PUSH
20539: LD_INT 19
20541: PUSH
20542: LD_INT 20
20544: PUSH
20545: LD_INT 21
20547: PUSH
20548: LD_INT 22
20550: PUSH
20551: LD_INT 23
20553: PUSH
20554: LD_INT 24
20556: PUSH
20557: LD_INT 25
20559: PUSH
20560: LD_INT 26
20562: PUSH
20563: LD_INT 27
20565: PUSH
20566: LD_INT 28
20568: PUSH
20569: LD_INT 29
20571: PUSH
20572: LD_INT 30
20574: PUSH
20575: LD_INT 31
20577: PUSH
20578: LD_INT 32
20580: PUSH
20581: LD_INT 33
20583: PUSH
20584: LD_INT 34
20586: PUSH
20587: LD_INT 36
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 101
20629: PUSH
20630: LD_INT 102
20632: PUSH
20633: LD_INT 103
20635: PUSH
20636: LD_INT 104
20638: PUSH
20639: LD_INT 105
20641: PUSH
20642: LD_INT 106
20644: PUSH
20645: LD_INT 107
20647: PUSH
20648: LD_INT 108
20650: PUSH
20651: LD_INT 109
20653: PUSH
20654: LD_INT 110
20656: PUSH
20657: LD_INT 111
20659: PUSH
20660: LD_INT 112
20662: PUSH
20663: LD_INT 113
20665: PUSH
20666: LD_INT 114
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: ST_TO_ADDR
20689: GO 21416
20691: LD_INT 16
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20823
20699: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
20700: LD_ADDR_VAR 0 1
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: LD_INT 4
20710: PUSH
20711: LD_INT 5
20713: PUSH
20714: LD_INT 7
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 15
20725: PUSH
20726: LD_INT 16
20728: PUSH
20729: LD_INT 20
20731: PUSH
20732: LD_INT 21
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_INT 23
20740: PUSH
20741: LD_INT 25
20743: PUSH
20744: LD_INT 26
20746: PUSH
20747: LD_INT 30
20749: PUSH
20750: LD_INT 31
20752: PUSH
20753: LD_INT 32
20755: PUSH
20756: LD_INT 33
20758: PUSH
20759: LD_INT 34
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 101
20785: PUSH
20786: LD_INT 102
20788: PUSH
20789: LD_INT 103
20791: PUSH
20792: LD_INT 106
20794: PUSH
20795: LD_INT 108
20797: PUSH
20798: LD_INT 112
20800: PUSH
20801: LD_INT 113
20803: PUSH
20804: LD_INT 114
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: ST_TO_ADDR
20821: GO 21416
20823: LD_INT 17
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 21043
20831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
20832: LD_ADDR_VAR 0 1
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: LD_INT 4
20848: PUSH
20849: LD_INT 5
20851: PUSH
20852: LD_INT 6
20854: PUSH
20855: LD_INT 7
20857: PUSH
20858: LD_INT 8
20860: PUSH
20861: LD_INT 9
20863: PUSH
20864: LD_INT 10
20866: PUSH
20867: LD_INT 11
20869: PUSH
20870: LD_INT 12
20872: PUSH
20873: LD_INT 13
20875: PUSH
20876: LD_INT 14
20878: PUSH
20879: LD_INT 15
20881: PUSH
20882: LD_INT 16
20884: PUSH
20885: LD_INT 17
20887: PUSH
20888: LD_INT 18
20890: PUSH
20891: LD_INT 19
20893: PUSH
20894: LD_INT 20
20896: PUSH
20897: LD_INT 21
20899: PUSH
20900: LD_INT 22
20902: PUSH
20903: LD_INT 23
20905: PUSH
20906: LD_INT 24
20908: PUSH
20909: LD_INT 25
20911: PUSH
20912: LD_INT 26
20914: PUSH
20915: LD_INT 27
20917: PUSH
20918: LD_INT 28
20920: PUSH
20921: LD_INT 29
20923: PUSH
20924: LD_INT 30
20926: PUSH
20927: LD_INT 31
20929: PUSH
20930: LD_INT 32
20932: PUSH
20933: LD_INT 33
20935: PUSH
20936: LD_INT 34
20938: PUSH
20939: LD_INT 36
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 101
20981: PUSH
20982: LD_INT 102
20984: PUSH
20985: LD_INT 103
20987: PUSH
20988: LD_INT 104
20990: PUSH
20991: LD_INT 105
20993: PUSH
20994: LD_INT 106
20996: PUSH
20997: LD_INT 107
20999: PUSH
21000: LD_INT 108
21002: PUSH
21003: LD_INT 109
21005: PUSH
21006: LD_INT 110
21008: PUSH
21009: LD_INT 111
21011: PUSH
21012: LD_INT 112
21014: PUSH
21015: LD_INT 113
21017: PUSH
21018: LD_INT 114
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: ST_TO_ADDR
21041: GO 21416
21043: LD_INT 18
21045: DOUBLE
21046: EQUAL
21047: IFTRUE 21051
21049: GO 21187
21051: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
21052: LD_ADDR_VAR 0 1
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: LD_INT 4
21062: PUSH
21063: LD_INT 5
21065: PUSH
21066: LD_INT 7
21068: PUSH
21069: LD_INT 11
21071: PUSH
21072: LD_INT 12
21074: PUSH
21075: LD_INT 15
21077: PUSH
21078: LD_INT 16
21080: PUSH
21081: LD_INT 20
21083: PUSH
21084: LD_INT 21
21086: PUSH
21087: LD_INT 22
21089: PUSH
21090: LD_INT 23
21092: PUSH
21093: LD_INT 25
21095: PUSH
21096: LD_INT 26
21098: PUSH
21099: LD_INT 30
21101: PUSH
21102: LD_INT 31
21104: PUSH
21105: LD_INT 32
21107: PUSH
21108: LD_INT 33
21110: PUSH
21111: LD_INT 34
21113: PUSH
21114: LD_INT 35
21116: PUSH
21117: LD_INT 36
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 101
21145: PUSH
21146: LD_INT 102
21148: PUSH
21149: LD_INT 103
21151: PUSH
21152: LD_INT 106
21154: PUSH
21155: LD_INT 108
21157: PUSH
21158: LD_INT 112
21160: PUSH
21161: LD_INT 113
21163: PUSH
21164: LD_INT 114
21166: PUSH
21167: LD_INT 115
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: ST_TO_ADDR
21185: GO 21416
21187: LD_INT 19
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21415
21195: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
21196: LD_ADDR_VAR 0 1
21200: PUSH
21201: LD_INT 1
21203: PUSH
21204: LD_INT 2
21206: PUSH
21207: LD_INT 3
21209: PUSH
21210: LD_INT 4
21212: PUSH
21213: LD_INT 5
21215: PUSH
21216: LD_INT 6
21218: PUSH
21219: LD_INT 7
21221: PUSH
21222: LD_INT 8
21224: PUSH
21225: LD_INT 9
21227: PUSH
21228: LD_INT 10
21230: PUSH
21231: LD_INT 11
21233: PUSH
21234: LD_INT 12
21236: PUSH
21237: LD_INT 13
21239: PUSH
21240: LD_INT 14
21242: PUSH
21243: LD_INT 15
21245: PUSH
21246: LD_INT 16
21248: PUSH
21249: LD_INT 17
21251: PUSH
21252: LD_INT 18
21254: PUSH
21255: LD_INT 19
21257: PUSH
21258: LD_INT 20
21260: PUSH
21261: LD_INT 21
21263: PUSH
21264: LD_INT 22
21266: PUSH
21267: LD_INT 23
21269: PUSH
21270: LD_INT 24
21272: PUSH
21273: LD_INT 25
21275: PUSH
21276: LD_INT 26
21278: PUSH
21279: LD_INT 27
21281: PUSH
21282: LD_INT 28
21284: PUSH
21285: LD_INT 29
21287: PUSH
21288: LD_INT 30
21290: PUSH
21291: LD_INT 31
21293: PUSH
21294: LD_INT 32
21296: PUSH
21297: LD_INT 33
21299: PUSH
21300: LD_INT 34
21302: PUSH
21303: LD_INT 35
21305: PUSH
21306: LD_INT 36
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 101
21349: PUSH
21350: LD_INT 102
21352: PUSH
21353: LD_INT 103
21355: PUSH
21356: LD_INT 104
21358: PUSH
21359: LD_INT 105
21361: PUSH
21362: LD_INT 106
21364: PUSH
21365: LD_INT 107
21367: PUSH
21368: LD_INT 108
21370: PUSH
21371: LD_INT 109
21373: PUSH
21374: LD_INT 110
21376: PUSH
21377: LD_INT 111
21379: PUSH
21380: LD_INT 112
21382: PUSH
21383: LD_INT 113
21385: PUSH
21386: LD_INT 114
21388: PUSH
21389: LD_INT 115
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: ST_TO_ADDR
21413: GO 21416
21415: POP
// end else
21416: GO 21635
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
21418: LD_ADDR_VAR 0 1
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 3
21431: PUSH
21432: LD_INT 4
21434: PUSH
21435: LD_INT 5
21437: PUSH
21438: LD_INT 6
21440: PUSH
21441: LD_INT 7
21443: PUSH
21444: LD_INT 8
21446: PUSH
21447: LD_INT 9
21449: PUSH
21450: LD_INT 10
21452: PUSH
21453: LD_INT 11
21455: PUSH
21456: LD_INT 12
21458: PUSH
21459: LD_INT 13
21461: PUSH
21462: LD_INT 14
21464: PUSH
21465: LD_INT 15
21467: PUSH
21468: LD_INT 16
21470: PUSH
21471: LD_INT 17
21473: PUSH
21474: LD_INT 18
21476: PUSH
21477: LD_INT 19
21479: PUSH
21480: LD_INT 20
21482: PUSH
21483: LD_INT 21
21485: PUSH
21486: LD_INT 22
21488: PUSH
21489: LD_INT 23
21491: PUSH
21492: LD_INT 24
21494: PUSH
21495: LD_INT 25
21497: PUSH
21498: LD_INT 26
21500: PUSH
21501: LD_INT 27
21503: PUSH
21504: LD_INT 28
21506: PUSH
21507: LD_INT 29
21509: PUSH
21510: LD_INT 30
21512: PUSH
21513: LD_INT 31
21515: PUSH
21516: LD_INT 32
21518: PUSH
21519: LD_INT 33
21521: PUSH
21522: LD_INT 34
21524: PUSH
21525: LD_INT 35
21527: PUSH
21528: LD_INT 36
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 101
21571: PUSH
21572: LD_INT 102
21574: PUSH
21575: LD_INT 103
21577: PUSH
21578: LD_INT 104
21580: PUSH
21581: LD_INT 105
21583: PUSH
21584: LD_INT 106
21586: PUSH
21587: LD_INT 107
21589: PUSH
21590: LD_INT 108
21592: PUSH
21593: LD_INT 109
21595: PUSH
21596: LD_INT 110
21598: PUSH
21599: LD_INT 111
21601: PUSH
21602: LD_INT 112
21604: PUSH
21605: LD_INT 113
21607: PUSH
21608: LD_INT 114
21610: PUSH
21611: LD_INT 115
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: ST_TO_ADDR
// if result then
21635: LD_VAR 0 1
21639: IFFALSE 21928
// begin normal :=  ;
21641: LD_ADDR_VAR 0 3
21645: PUSH
21646: LD_STRING 
21648: ST_TO_ADDR
// hardcore :=  ;
21649: LD_ADDR_VAR 0 4
21653: PUSH
21654: LD_STRING 
21656: ST_TO_ADDR
// for i = 1 to normalCounter do
21657: LD_ADDR_VAR 0 5
21661: PUSH
21662: DOUBLE
21663: LD_INT 1
21665: DEC
21666: ST_TO_ADDR
21667: LD_EXP 53
21671: PUSH
21672: FOR_TO
21673: IFFALSE 21774
// begin tmp := 0 ;
21675: LD_ADDR_VAR 0 2
21679: PUSH
21680: LD_STRING 0
21682: ST_TO_ADDR
// if result [ 1 ] then
21683: LD_VAR 0 1
21687: PUSH
21688: LD_INT 1
21690: ARRAY
21691: IFFALSE 21756
// if result [ 1 ] [ 1 ] = i then
21693: LD_VAR 0 1
21697: PUSH
21698: LD_INT 1
21700: ARRAY
21701: PUSH
21702: LD_INT 1
21704: ARRAY
21705: PUSH
21706: LD_VAR 0 5
21710: EQUAL
21711: IFFALSE 21756
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21713: LD_ADDR_VAR 0 1
21717: PUSH
21718: LD_VAR 0 1
21722: PPUSH
21723: LD_INT 1
21725: PPUSH
21726: LD_VAR 0 1
21730: PUSH
21731: LD_INT 1
21733: ARRAY
21734: PPUSH
21735: LD_INT 1
21737: PPUSH
21738: CALL_OW 3
21742: PPUSH
21743: CALL_OW 1
21747: ST_TO_ADDR
// tmp := 1 ;
21748: LD_ADDR_VAR 0 2
21752: PUSH
21753: LD_STRING 1
21755: ST_TO_ADDR
// end ; normal := normal & tmp ;
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: LD_VAR 0 3
21765: PUSH
21766: LD_VAR 0 2
21770: STR
21771: ST_TO_ADDR
// end ;
21772: GO 21672
21774: POP
21775: POP
// for i = 1 to hardcoreCounter do
21776: LD_ADDR_VAR 0 5
21780: PUSH
21781: DOUBLE
21782: LD_INT 1
21784: DEC
21785: ST_TO_ADDR
21786: LD_EXP 54
21790: PUSH
21791: FOR_TO
21792: IFFALSE 21897
// begin tmp := 0 ;
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: LD_STRING 0
21801: ST_TO_ADDR
// if result [ 2 ] then
21802: LD_VAR 0 1
21806: PUSH
21807: LD_INT 2
21809: ARRAY
21810: IFFALSE 21879
// if result [ 2 ] [ 1 ] = 100 + i then
21812: LD_VAR 0 1
21816: PUSH
21817: LD_INT 2
21819: ARRAY
21820: PUSH
21821: LD_INT 1
21823: ARRAY
21824: PUSH
21825: LD_INT 100
21827: PUSH
21828: LD_VAR 0 5
21832: PLUS
21833: EQUAL
21834: IFFALSE 21879
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21836: LD_ADDR_VAR 0 1
21840: PUSH
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_INT 2
21848: PPUSH
21849: LD_VAR 0 1
21853: PUSH
21854: LD_INT 2
21856: ARRAY
21857: PPUSH
21858: LD_INT 1
21860: PPUSH
21861: CALL_OW 3
21865: PPUSH
21866: CALL_OW 1
21870: ST_TO_ADDR
// tmp := 1 ;
21871: LD_ADDR_VAR 0 2
21875: PUSH
21876: LD_STRING 1
21878: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21879: LD_ADDR_VAR 0 4
21883: PUSH
21884: LD_VAR 0 4
21888: PUSH
21889: LD_VAR 0 2
21893: STR
21894: ST_TO_ADDR
// end ;
21895: GO 21791
21897: POP
21898: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
21899: LD_STRING getStreamItemsFromMission("
21901: PUSH
21902: LD_VAR 0 3
21906: STR
21907: PUSH
21908: LD_STRING ","
21910: STR
21911: PUSH
21912: LD_VAR 0 4
21916: STR
21917: PUSH
21918: LD_STRING ")
21920: STR
21921: PPUSH
21922: CALL_OW 559
// end else
21926: GO 21935
// ToLua ( getStreamItemsFromMission("","") ) ;
21928: LD_STRING getStreamItemsFromMission("","")
21930: PPUSH
21931: CALL_OW 559
// end ;
21935: LD_VAR 0 1
21939: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21940: LD_EXP 52
21944: PUSH
21945: LD_EXP 57
21949: AND
21950: IFFALSE 22074
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
21958: PPUSH
// begin enable ;
21959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21960: LD_ADDR_VAR 0 2
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_OWVAR 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: LD_INT 34
21982: PUSH
21983: LD_INT 7
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 34
21992: PUSH
21993: LD_INT 45
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 34
22002: PUSH
22003: LD_INT 28
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 34
22012: PUSH
22013: LD_INT 47
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PPUSH
22031: CALL_OW 69
22035: ST_TO_ADDR
// if not tmp then
22036: LD_VAR 0 2
22040: NOT
22041: IFFALSE 22045
// exit ;
22043: GO 22074
// for i in tmp do
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_VAR 0 2
22054: PUSH
22055: FOR_IN
22056: IFFALSE 22072
// begin SetLives ( i , 0 ) ;
22058: LD_VAR 0 1
22062: PPUSH
22063: LD_INT 0
22065: PPUSH
22066: CALL_OW 234
// end ;
22070: GO 22055
22072: POP
22073: POP
// end ;
22074: PPOPN 2
22076: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22077: LD_EXP 52
22081: PUSH
22082: LD_EXP 58
22086: AND
22087: IFFALSE 22171
22089: GO 22091
22091: DISABLE
22092: LD_INT 0
22094: PPUSH
22095: PPUSH
// begin enable ;
22096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22097: LD_ADDR_VAR 0 2
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_OWVAR 2
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 32
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PPUSH
22128: CALL_OW 69
22132: ST_TO_ADDR
// if not tmp then
22133: LD_VAR 0 2
22137: NOT
22138: IFFALSE 22142
// exit ;
22140: GO 22171
// for i in tmp do
22142: LD_ADDR_VAR 0 1
22146: PUSH
22147: LD_VAR 0 2
22151: PUSH
22152: FOR_IN
22153: IFFALSE 22169
// begin SetLives ( i , 0 ) ;
22155: LD_VAR 0 1
22159: PPUSH
22160: LD_INT 0
22162: PPUSH
22163: CALL_OW 234
// end ;
22167: GO 22152
22169: POP
22170: POP
// end ;
22171: PPOPN 2
22173: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22174: LD_EXP 52
22178: PUSH
22179: LD_EXP 55
22183: AND
22184: IFFALSE 22277
22186: GO 22188
22188: DISABLE
22189: LD_INT 0
22191: PPUSH
// begin enable ;
22192: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22193: LD_ADDR_VAR 0 1
22197: PUSH
22198: LD_INT 22
22200: PUSH
22201: LD_OWVAR 2
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: LD_INT 25
22215: PUSH
22216: LD_INT 5
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 25
22225: PUSH
22226: LD_INT 9
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 25
22235: PUSH
22236: LD_INT 8
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PPUSH
22253: CALL_OW 69
22257: PUSH
22258: FOR_IN
22259: IFFALSE 22275
// begin SetClass ( i , 1 ) ;
22261: LD_VAR 0 1
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: CALL_OW 336
// end ;
22273: GO 22258
22275: POP
22276: POP
// end ;
22277: PPOPN 1
22279: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22280: LD_EXP 52
22284: PUSH
22285: LD_EXP 56
22289: AND
22290: PUSH
22291: LD_OWVAR 65
22295: PUSH
22296: LD_INT 7
22298: LESS
22299: AND
22300: IFFALSE 22314
22302: GO 22304
22304: DISABLE
// begin enable ;
22305: ENABLE
// game_speed := 7 ;
22306: LD_ADDR_OWVAR 65
22310: PUSH
22311: LD_INT 7
22313: ST_TO_ADDR
// end ;
22314: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22315: LD_EXP 52
22319: PUSH
22320: LD_EXP 59
22324: AND
22325: IFFALSE 22527
22327: GO 22329
22329: DISABLE
22330: LD_INT 0
22332: PPUSH
22333: PPUSH
22334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22335: LD_ADDR_VAR 0 3
22339: PUSH
22340: LD_INT 81
22342: PUSH
22343: LD_OWVAR 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 21
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PPUSH
22366: CALL_OW 69
22370: ST_TO_ADDR
// if not tmp then
22371: LD_VAR 0 3
22375: NOT
22376: IFFALSE 22380
// exit ;
22378: GO 22527
// if tmp > 5 then
22380: LD_VAR 0 3
22384: PUSH
22385: LD_INT 5
22387: GREATER
22388: IFFALSE 22400
// k := 5 else
22390: LD_ADDR_VAR 0 2
22394: PUSH
22395: LD_INT 5
22397: ST_TO_ADDR
22398: GO 22410
// k := tmp ;
22400: LD_ADDR_VAR 0 2
22404: PUSH
22405: LD_VAR 0 3
22409: ST_TO_ADDR
// for i := 1 to k do
22410: LD_ADDR_VAR 0 1
22414: PUSH
22415: DOUBLE
22416: LD_INT 1
22418: DEC
22419: ST_TO_ADDR
22420: LD_VAR 0 2
22424: PUSH
22425: FOR_TO
22426: IFFALSE 22525
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22428: LD_VAR 0 3
22432: PUSH
22433: LD_VAR 0 1
22437: ARRAY
22438: PPUSH
22439: LD_VAR 0 1
22443: PUSH
22444: LD_INT 4
22446: MOD
22447: PUSH
22448: LD_INT 1
22450: PLUS
22451: PPUSH
22452: CALL_OW 259
22456: PUSH
22457: LD_INT 10
22459: LESS
22460: IFFALSE 22523
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22462: LD_VAR 0 3
22466: PUSH
22467: LD_VAR 0 1
22471: ARRAY
22472: PPUSH
22473: LD_VAR 0 1
22477: PUSH
22478: LD_INT 4
22480: MOD
22481: PUSH
22482: LD_INT 1
22484: PLUS
22485: PPUSH
22486: LD_VAR 0 3
22490: PUSH
22491: LD_VAR 0 1
22495: ARRAY
22496: PPUSH
22497: LD_VAR 0 1
22501: PUSH
22502: LD_INT 4
22504: MOD
22505: PUSH
22506: LD_INT 1
22508: PLUS
22509: PPUSH
22510: CALL_OW 259
22514: PUSH
22515: LD_INT 1
22517: PLUS
22518: PPUSH
22519: CALL_OW 237
22523: GO 22425
22525: POP
22526: POP
// end ;
22527: PPOPN 3
22529: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22530: LD_EXP 52
22534: PUSH
22535: LD_EXP 60
22539: AND
22540: IFFALSE 22560
22542: GO 22544
22544: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22545: LD_INT 4
22547: PPUSH
22548: LD_OWVAR 2
22552: PPUSH
22553: LD_INT 0
22555: PPUSH
22556: CALL_OW 324
22560: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22561: LD_EXP 52
22565: PUSH
22566: LD_EXP 89
22570: AND
22571: IFFALSE 22591
22573: GO 22575
22575: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22576: LD_INT 19
22578: PPUSH
22579: LD_OWVAR 2
22583: PPUSH
22584: LD_INT 0
22586: PPUSH
22587: CALL_OW 324
22591: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22592: LD_EXP 52
22596: PUSH
22597: LD_EXP 61
22601: AND
22602: IFFALSE 22704
22604: GO 22606
22606: DISABLE
22607: LD_INT 0
22609: PPUSH
22610: PPUSH
// begin enable ;
22611: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22612: LD_ADDR_VAR 0 2
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_OWVAR 2
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 34
22634: PUSH
22635: LD_INT 11
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 34
22644: PUSH
22645: LD_INT 30
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PPUSH
22661: CALL_OW 69
22665: ST_TO_ADDR
// if not tmp then
22666: LD_VAR 0 2
22670: NOT
22671: IFFALSE 22675
// exit ;
22673: GO 22704
// for i in tmp do
22675: LD_ADDR_VAR 0 1
22679: PUSH
22680: LD_VAR 0 2
22684: PUSH
22685: FOR_IN
22686: IFFALSE 22702
// begin SetLives ( i , 0 ) ;
22688: LD_VAR 0 1
22692: PPUSH
22693: LD_INT 0
22695: PPUSH
22696: CALL_OW 234
// end ;
22700: GO 22685
22702: POP
22703: POP
// end ;
22704: PPOPN 2
22706: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22707: LD_EXP 52
22711: PUSH
22712: LD_EXP 62
22716: AND
22717: IFFALSE 22737
22719: GO 22721
22721: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22722: LD_INT 32
22724: PPUSH
22725: LD_OWVAR 2
22729: PPUSH
22730: LD_INT 0
22732: PPUSH
22733: CALL_OW 324
22737: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22738: LD_EXP 52
22742: PUSH
22743: LD_EXP 63
22747: AND
22748: IFFALSE 22929
22750: GO 22752
22752: DISABLE
22753: LD_INT 0
22755: PPUSH
22756: PPUSH
22757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22758: LD_ADDR_VAR 0 2
22762: PUSH
22763: LD_INT 22
22765: PUSH
22766: LD_OWVAR 2
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 33
22777: PUSH
22778: LD_INT 3
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PPUSH
22789: CALL_OW 69
22793: ST_TO_ADDR
// if not tmp then
22794: LD_VAR 0 2
22798: NOT
22799: IFFALSE 22803
// exit ;
22801: GO 22929
// side := 0 ;
22803: LD_ADDR_VAR 0 3
22807: PUSH
22808: LD_INT 0
22810: ST_TO_ADDR
// for i := 1 to 8 do
22811: LD_ADDR_VAR 0 1
22815: PUSH
22816: DOUBLE
22817: LD_INT 1
22819: DEC
22820: ST_TO_ADDR
22821: LD_INT 8
22823: PUSH
22824: FOR_TO
22825: IFFALSE 22873
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22827: LD_OWVAR 2
22831: PUSH
22832: LD_VAR 0 1
22836: NONEQUAL
22837: PUSH
22838: LD_OWVAR 2
22842: PPUSH
22843: LD_VAR 0 1
22847: PPUSH
22848: CALL_OW 81
22852: PUSH
22853: LD_INT 2
22855: EQUAL
22856: AND
22857: IFFALSE 22871
// begin side := i ;
22859: LD_ADDR_VAR 0 3
22863: PUSH
22864: LD_VAR 0 1
22868: ST_TO_ADDR
// break ;
22869: GO 22873
// end ;
22871: GO 22824
22873: POP
22874: POP
// if not side then
22875: LD_VAR 0 3
22879: NOT
22880: IFFALSE 22884
// exit ;
22882: GO 22929
// for i := 1 to tmp do
22884: LD_ADDR_VAR 0 1
22888: PUSH
22889: DOUBLE
22890: LD_INT 1
22892: DEC
22893: ST_TO_ADDR
22894: LD_VAR 0 2
22898: PUSH
22899: FOR_TO
22900: IFFALSE 22927
// if Prob ( 60 ) then
22902: LD_INT 60
22904: PPUSH
22905: CALL_OW 13
22909: IFFALSE 22925
// SetSide ( i , side ) ;
22911: LD_VAR 0 1
22915: PPUSH
22916: LD_VAR 0 3
22920: PPUSH
22921: CALL_OW 235
22925: GO 22899
22927: POP
22928: POP
// end ;
22929: PPOPN 3
22931: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22932: LD_EXP 52
22936: PUSH
22937: LD_EXP 65
22941: AND
22942: IFFALSE 23061
22944: GO 22946
22946: DISABLE
22947: LD_INT 0
22949: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22950: LD_ADDR_VAR 0 1
22954: PUSH
22955: LD_INT 22
22957: PUSH
22958: LD_OWVAR 2
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 21
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 3
22979: PUSH
22980: LD_INT 23
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: PPUSH
22999: CALL_OW 69
23003: PUSH
23004: FOR_IN
23005: IFFALSE 23059
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 257
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 2
23022: PUSH
23023: LD_INT 3
23025: PUSH
23026: LD_INT 4
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: IN
23035: IFFALSE 23057
// SetClass ( un , rand ( 1 , 4 ) ) ;
23037: LD_VAR 0 1
23041: PPUSH
23042: LD_INT 1
23044: PPUSH
23045: LD_INT 4
23047: PPUSH
23048: CALL_OW 12
23052: PPUSH
23053: CALL_OW 336
23057: GO 23004
23059: POP
23060: POP
// end ;
23061: PPOPN 1
23063: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23064: LD_EXP 52
23068: PUSH
23069: LD_EXP 64
23073: AND
23074: IFFALSE 23153
23076: GO 23078
23078: DISABLE
23079: LD_INT 0
23081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23082: LD_ADDR_VAR 0 1
23086: PUSH
23087: LD_INT 22
23089: PUSH
23090: LD_OWVAR 2
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 21
23101: PUSH
23102: LD_INT 3
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PPUSH
23113: CALL_OW 69
23117: ST_TO_ADDR
// if not tmp then
23118: LD_VAR 0 1
23122: NOT
23123: IFFALSE 23127
// exit ;
23125: GO 23153
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23127: LD_VAR 0 1
23131: PUSH
23132: LD_INT 1
23134: PPUSH
23135: LD_VAR 0 1
23139: PPUSH
23140: CALL_OW 12
23144: ARRAY
23145: PPUSH
23146: LD_INT 100
23148: PPUSH
23149: CALL_OW 234
// end ;
23153: PPOPN 1
23155: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23156: LD_EXP 52
23160: PUSH
23161: LD_EXP 66
23165: AND
23166: IFFALSE 23264
23168: GO 23170
23170: DISABLE
23171: LD_INT 0
23173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23174: LD_ADDR_VAR 0 1
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_OWVAR 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PPUSH
23205: CALL_OW 69
23209: ST_TO_ADDR
// if not tmp then
23210: LD_VAR 0 1
23214: NOT
23215: IFFALSE 23219
// exit ;
23217: GO 23264
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23219: LD_VAR 0 1
23223: PUSH
23224: LD_INT 1
23226: PPUSH
23227: LD_VAR 0 1
23231: PPUSH
23232: CALL_OW 12
23236: ARRAY
23237: PPUSH
23238: LD_INT 1
23240: PPUSH
23241: LD_INT 4
23243: PPUSH
23244: CALL_OW 12
23248: PPUSH
23249: LD_INT 3000
23251: PPUSH
23252: LD_INT 9000
23254: PPUSH
23255: CALL_OW 12
23259: PPUSH
23260: CALL_OW 492
// end ;
23264: PPOPN 1
23266: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23267: LD_EXP 52
23271: PUSH
23272: LD_EXP 67
23276: AND
23277: IFFALSE 23297
23279: GO 23281
23281: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23282: LD_INT 1
23284: PPUSH
23285: LD_OWVAR 2
23289: PPUSH
23290: LD_INT 0
23292: PPUSH
23293: CALL_OW 324
23297: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23298: LD_EXP 52
23302: PUSH
23303: LD_EXP 68
23307: AND
23308: IFFALSE 23391
23310: GO 23312
23312: DISABLE
23313: LD_INT 0
23315: PPUSH
23316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23317: LD_ADDR_VAR 0 2
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_OWVAR 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 21
23336: PUSH
23337: LD_INT 3
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PPUSH
23348: CALL_OW 69
23352: ST_TO_ADDR
// if not tmp then
23353: LD_VAR 0 2
23357: NOT
23358: IFFALSE 23362
// exit ;
23360: GO 23391
// for i in tmp do
23362: LD_ADDR_VAR 0 1
23366: PUSH
23367: LD_VAR 0 2
23371: PUSH
23372: FOR_IN
23373: IFFALSE 23389
// SetBLevel ( i , 10 ) ;
23375: LD_VAR 0 1
23379: PPUSH
23380: LD_INT 10
23382: PPUSH
23383: CALL_OW 241
23387: GO 23372
23389: POP
23390: POP
// end ;
23391: PPOPN 2
23393: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23394: LD_EXP 52
23398: PUSH
23399: LD_EXP 69
23403: AND
23404: IFFALSE 23515
23406: GO 23408
23408: DISABLE
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
23413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23414: LD_ADDR_VAR 0 3
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 25
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PPUSH
23445: CALL_OW 69
23449: ST_TO_ADDR
// if not tmp then
23450: LD_VAR 0 3
23454: NOT
23455: IFFALSE 23459
// exit ;
23457: GO 23515
// un := tmp [ rand ( 1 , tmp ) ] ;
23459: LD_ADDR_VAR 0 2
23463: PUSH
23464: LD_VAR 0 3
23468: PUSH
23469: LD_INT 1
23471: PPUSH
23472: LD_VAR 0 3
23476: PPUSH
23477: CALL_OW 12
23481: ARRAY
23482: ST_TO_ADDR
// if Crawls ( un ) then
23483: LD_VAR 0 2
23487: PPUSH
23488: CALL_OW 318
23492: IFFALSE 23503
// ComWalk ( un ) ;
23494: LD_VAR 0 2
23498: PPUSH
23499: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23503: LD_VAR 0 2
23507: PPUSH
23508: LD_INT 5
23510: PPUSH
23511: CALL_OW 336
// end ;
23515: PPOPN 3
23517: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
23518: LD_EXP 52
23522: PUSH
23523: LD_EXP 70
23527: AND
23528: PUSH
23529: LD_OWVAR 67
23533: PUSH
23534: LD_INT 3
23536: LESS
23537: AND
23538: IFFALSE 23557
23540: GO 23542
23542: DISABLE
// Difficulty := Difficulty + 1 ;
23543: LD_ADDR_OWVAR 67
23547: PUSH
23548: LD_OWVAR 67
23552: PUSH
23553: LD_INT 1
23555: PLUS
23556: ST_TO_ADDR
23557: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23558: LD_EXP 52
23562: PUSH
23563: LD_EXP 71
23567: AND
23568: IFFALSE 23671
23570: GO 23572
23572: DISABLE
23573: LD_INT 0
23575: PPUSH
// begin for i := 1 to 5 do
23576: LD_ADDR_VAR 0 1
23580: PUSH
23581: DOUBLE
23582: LD_INT 1
23584: DEC
23585: ST_TO_ADDR
23586: LD_INT 5
23588: PUSH
23589: FOR_TO
23590: IFFALSE 23669
// begin uc_nation := nation_nature ;
23592: LD_ADDR_OWVAR 21
23596: PUSH
23597: LD_INT 0
23599: ST_TO_ADDR
// uc_side := 0 ;
23600: LD_ADDR_OWVAR 20
23604: PUSH
23605: LD_INT 0
23607: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23608: LD_ADDR_OWVAR 29
23612: PUSH
23613: LD_INT 12
23615: PUSH
23616: LD_INT 12
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: ST_TO_ADDR
// hc_agressivity := 20 ;
23623: LD_ADDR_OWVAR 35
23627: PUSH
23628: LD_INT 20
23630: ST_TO_ADDR
// hc_class := class_tiger ;
23631: LD_ADDR_OWVAR 28
23635: PUSH
23636: LD_INT 14
23638: ST_TO_ADDR
// hc_gallery :=  ;
23639: LD_ADDR_OWVAR 33
23643: PUSH
23644: LD_STRING 
23646: ST_TO_ADDR
// hc_name :=  ;
23647: LD_ADDR_OWVAR 26
23651: PUSH
23652: LD_STRING 
23654: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23655: CALL_OW 44
23659: PPUSH
23660: LD_INT 0
23662: PPUSH
23663: CALL_OW 51
// end ;
23667: GO 23589
23669: POP
23670: POP
// end ;
23671: PPOPN 1
23673: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23674: LD_EXP 52
23678: PUSH
23679: LD_EXP 72
23683: AND
23684: IFFALSE 23693
23686: GO 23688
23688: DISABLE
// StreamSibBomb ;
23689: CALL 23694 0 0
23693: END
// export function StreamSibBomb ; var i , x , y ; begin
23694: LD_INT 0
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
// result := false ;
23700: LD_ADDR_VAR 0 1
23704: PUSH
23705: LD_INT 0
23707: ST_TO_ADDR
// for i := 1 to 16 do
23708: LD_ADDR_VAR 0 2
23712: PUSH
23713: DOUBLE
23714: LD_INT 1
23716: DEC
23717: ST_TO_ADDR
23718: LD_INT 16
23720: PUSH
23721: FOR_TO
23722: IFFALSE 23921
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23724: LD_ADDR_VAR 0 3
23728: PUSH
23729: LD_INT 10
23731: PUSH
23732: LD_INT 20
23734: PUSH
23735: LD_INT 30
23737: PUSH
23738: LD_INT 40
23740: PUSH
23741: LD_INT 50
23743: PUSH
23744: LD_INT 60
23746: PUSH
23747: LD_INT 70
23749: PUSH
23750: LD_INT 80
23752: PUSH
23753: LD_INT 90
23755: PUSH
23756: LD_INT 100
23758: PUSH
23759: LD_INT 110
23761: PUSH
23762: LD_INT 120
23764: PUSH
23765: LD_INT 130
23767: PUSH
23768: LD_INT 140
23770: PUSH
23771: LD_INT 150
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PPUSH
23794: LD_INT 15
23796: PPUSH
23797: CALL_OW 12
23801: ARRAY
23802: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: LD_INT 10
23810: PUSH
23811: LD_INT 20
23813: PUSH
23814: LD_INT 30
23816: PUSH
23817: LD_INT 40
23819: PUSH
23820: LD_INT 50
23822: PUSH
23823: LD_INT 60
23825: PUSH
23826: LD_INT 70
23828: PUSH
23829: LD_INT 80
23831: PUSH
23832: LD_INT 90
23834: PUSH
23835: LD_INT 100
23837: PUSH
23838: LD_INT 110
23840: PUSH
23841: LD_INT 120
23843: PUSH
23844: LD_INT 130
23846: PUSH
23847: LD_INT 140
23849: PUSH
23850: LD_INT 150
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: PPUSH
23873: LD_INT 15
23875: PPUSH
23876: CALL_OW 12
23880: ARRAY
23881: ST_TO_ADDR
// if ValidHex ( x , y ) then
23882: LD_VAR 0 3
23886: PPUSH
23887: LD_VAR 0 4
23891: PPUSH
23892: CALL_OW 488
23896: IFFALSE 23919
// begin result := [ x , y ] ;
23898: LD_ADDR_VAR 0 1
23902: PUSH
23903: LD_VAR 0 3
23907: PUSH
23908: LD_VAR 0 4
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: ST_TO_ADDR
// break ;
23917: GO 23921
// end ; end ;
23919: GO 23721
23921: POP
23922: POP
// if result then
23923: LD_VAR 0 1
23927: IFFALSE 23987
// begin ToLua ( playSibBomb() ) ;
23929: LD_STRING playSibBomb()
23931: PPUSH
23932: CALL_OW 559
// wait ( 0 0$14 ) ;
23936: LD_INT 490
23938: PPUSH
23939: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23943: LD_VAR 0 1
23947: PUSH
23948: LD_INT 1
23950: ARRAY
23951: PPUSH
23952: LD_VAR 0 1
23956: PUSH
23957: LD_INT 2
23959: ARRAY
23960: PPUSH
23961: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23965: LD_VAR 0 1
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PPUSH
23974: LD_VAR 0 1
23978: PUSH
23979: LD_INT 2
23981: ARRAY
23982: PPUSH
23983: CALL_OW 429
// end ; end ;
23987: LD_VAR 0 1
23991: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23992: LD_EXP 52
23996: PUSH
23997: LD_EXP 74
24001: AND
24002: IFFALSE 24014
24004: GO 24006
24006: DISABLE
// YouLost (  ) ;
24007: LD_STRING 
24009: PPUSH
24010: CALL_OW 104
24014: END
// every 0 0$1 trigger StreamModeActive and sFog do
24015: LD_EXP 52
24019: PUSH
24020: LD_EXP 73
24024: AND
24025: IFFALSE 24039
24027: GO 24029
24029: DISABLE
// FogOff ( your_side ) ;
24030: LD_OWVAR 2
24034: PPUSH
24035: CALL_OW 344
24039: END
// every 0 0$1 trigger StreamModeActive and sSun do
24040: LD_EXP 52
24044: PUSH
24045: LD_EXP 75
24049: AND
24050: IFFALSE 24078
24052: GO 24054
24054: DISABLE
// begin solar_recharge_percent := 0 ;
24055: LD_ADDR_OWVAR 79
24059: PUSH
24060: LD_INT 0
24062: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24063: LD_INT 10500
24065: PPUSH
24066: CALL_OW 67
// solar_recharge_percent := 100 ;
24070: LD_ADDR_OWVAR 79
24074: PUSH
24075: LD_INT 100
24077: ST_TO_ADDR
// end ;
24078: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24079: LD_EXP 52
24083: PUSH
24084: LD_EXP 76
24088: AND
24089: IFFALSE 24328
24091: GO 24093
24093: DISABLE
24094: LD_INT 0
24096: PPUSH
24097: PPUSH
24098: PPUSH
// begin tmp := [ ] ;
24099: LD_ADDR_VAR 0 3
24103: PUSH
24104: EMPTY
24105: ST_TO_ADDR
// for i := 1 to 6 do
24106: LD_ADDR_VAR 0 1
24110: PUSH
24111: DOUBLE
24112: LD_INT 1
24114: DEC
24115: ST_TO_ADDR
24116: LD_INT 6
24118: PUSH
24119: FOR_TO
24120: IFFALSE 24225
// begin uc_nation := nation_nature ;
24122: LD_ADDR_OWVAR 21
24126: PUSH
24127: LD_INT 0
24129: ST_TO_ADDR
// uc_side := 0 ;
24130: LD_ADDR_OWVAR 20
24134: PUSH
24135: LD_INT 0
24137: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24138: LD_ADDR_OWVAR 29
24142: PUSH
24143: LD_INT 12
24145: PUSH
24146: LD_INT 12
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: ST_TO_ADDR
// hc_agressivity := 20 ;
24153: LD_ADDR_OWVAR 35
24157: PUSH
24158: LD_INT 20
24160: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24161: LD_ADDR_OWVAR 28
24165: PUSH
24166: LD_INT 17
24168: ST_TO_ADDR
// hc_gallery :=  ;
24169: LD_ADDR_OWVAR 33
24173: PUSH
24174: LD_STRING 
24176: ST_TO_ADDR
// hc_name :=  ;
24177: LD_ADDR_OWVAR 26
24181: PUSH
24182: LD_STRING 
24184: ST_TO_ADDR
// un := CreateHuman ;
24185: LD_ADDR_VAR 0 2
24189: PUSH
24190: CALL_OW 44
24194: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24195: LD_VAR 0 2
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: CALL_OW 51
// tmp := tmp ^ un ;
24207: LD_ADDR_VAR 0 3
24211: PUSH
24212: LD_VAR 0 3
24216: PUSH
24217: LD_VAR 0 2
24221: ADD
24222: ST_TO_ADDR
// end ;
24223: GO 24119
24225: POP
24226: POP
// repeat wait ( 0 0$1 ) ;
24227: LD_INT 35
24229: PPUSH
24230: CALL_OW 67
// for un in tmp do
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_VAR 0 3
24243: PUSH
24244: FOR_IN
24245: IFFALSE 24319
// begin if IsDead ( un ) then
24247: LD_VAR 0 2
24251: PPUSH
24252: CALL_OW 301
24256: IFFALSE 24276
// begin tmp := tmp diff un ;
24258: LD_ADDR_VAR 0 3
24262: PUSH
24263: LD_VAR 0 3
24267: PUSH
24268: LD_VAR 0 2
24272: DIFF
24273: ST_TO_ADDR
// continue ;
24274: GO 24244
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24276: LD_VAR 0 2
24280: PPUSH
24281: LD_INT 3
24283: PUSH
24284: LD_INT 22
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 69
24302: PPUSH
24303: LD_VAR 0 2
24307: PPUSH
24308: CALL_OW 74
24312: PPUSH
24313: CALL_OW 115
// end ;
24317: GO 24244
24319: POP
24320: POP
// until not tmp ;
24321: LD_VAR 0 3
24325: NOT
24326: IFFALSE 24227
// end ;
24328: PPOPN 3
24330: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24331: LD_EXP 52
24335: PUSH
24336: LD_EXP 77
24340: AND
24341: IFFALSE 24395
24343: GO 24345
24345: DISABLE
// begin ToLua ( displayTroll(); ) ;
24346: LD_STRING displayTroll();
24348: PPUSH
24349: CALL_OW 559
// wait ( 3 3$00 ) ;
24353: LD_INT 6300
24355: PPUSH
24356: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24360: LD_STRING hideTroll();
24362: PPUSH
24363: CALL_OW 559
// wait ( 1 1$00 ) ;
24367: LD_INT 2100
24369: PPUSH
24370: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24374: LD_STRING displayTroll();
24376: PPUSH
24377: CALL_OW 559
// wait ( 1 1$00 ) ;
24381: LD_INT 2100
24383: PPUSH
24384: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24388: LD_STRING hideTroll();
24390: PPUSH
24391: CALL_OW 559
// end ;
24395: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24396: LD_EXP 52
24400: PUSH
24401: LD_EXP 78
24405: AND
24406: IFFALSE 24469
24408: GO 24410
24410: DISABLE
24411: LD_INT 0
24413: PPUSH
// begin p := 0 ;
24414: LD_ADDR_VAR 0 1
24418: PUSH
24419: LD_INT 0
24421: ST_TO_ADDR
// repeat game_speed := 1 ;
24422: LD_ADDR_OWVAR 65
24426: PUSH
24427: LD_INT 1
24429: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24430: LD_INT 35
24432: PPUSH
24433: CALL_OW 67
// p := p + 1 ;
24437: LD_ADDR_VAR 0 1
24441: PUSH
24442: LD_VAR 0 1
24446: PUSH
24447: LD_INT 1
24449: PLUS
24450: ST_TO_ADDR
// until p >= 60 ;
24451: LD_VAR 0 1
24455: PUSH
24456: LD_INT 60
24458: GREATEREQUAL
24459: IFFALSE 24422
// game_speed := 4 ;
24461: LD_ADDR_OWVAR 65
24465: PUSH
24466: LD_INT 4
24468: ST_TO_ADDR
// end ;
24469: PPOPN 1
24471: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24472: LD_EXP 52
24476: PUSH
24477: LD_EXP 79
24481: AND
24482: IFFALSE 24628
24484: GO 24486
24486: DISABLE
24487: LD_INT 0
24489: PPUSH
24490: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24491: LD_ADDR_VAR 0 1
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_OWVAR 2
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 2
24510: PUSH
24511: LD_INT 30
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 30
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PPUSH
24540: CALL_OW 69
24544: ST_TO_ADDR
// if not depot then
24545: LD_VAR 0 1
24549: NOT
24550: IFFALSE 24554
// exit ;
24552: GO 24628
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24554: LD_ADDR_VAR 0 2
24558: PUSH
24559: LD_VAR 0 1
24563: PUSH
24564: LD_INT 1
24566: PPUSH
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 12
24576: ARRAY
24577: PPUSH
24578: CALL_OW 274
24582: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_INT 1
24590: PPUSH
24591: LD_INT 0
24593: PPUSH
24594: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24598: LD_VAR 0 2
24602: PPUSH
24603: LD_INT 2
24605: PPUSH
24606: LD_INT 0
24608: PPUSH
24609: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24613: LD_VAR 0 2
24617: PPUSH
24618: LD_INT 3
24620: PPUSH
24621: LD_INT 0
24623: PPUSH
24624: CALL_OW 277
// end ;
24628: PPOPN 2
24630: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24631: LD_EXP 52
24635: PUSH
24636: LD_EXP 80
24640: AND
24641: IFFALSE 24738
24643: GO 24645
24645: DISABLE
24646: LD_INT 0
24648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24649: LD_ADDR_VAR 0 1
24653: PUSH
24654: LD_INT 22
24656: PUSH
24657: LD_OWVAR 2
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 21
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 23
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: PPUSH
24698: CALL_OW 69
24702: ST_TO_ADDR
// if not tmp then
24703: LD_VAR 0 1
24707: NOT
24708: IFFALSE 24712
// exit ;
24710: GO 24738
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24712: LD_VAR 0 1
24716: PUSH
24717: LD_INT 1
24719: PPUSH
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL_OW 12
24729: ARRAY
24730: PPUSH
24731: LD_INT 200
24733: PPUSH
24734: CALL_OW 234
// end ;
24738: PPOPN 1
24740: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24741: LD_EXP 52
24745: PUSH
24746: LD_EXP 81
24750: AND
24751: IFFALSE 24830
24753: GO 24755
24755: DISABLE
24756: LD_INT 0
24758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24759: LD_ADDR_VAR 0 1
24763: PUSH
24764: LD_INT 22
24766: PUSH
24767: LD_OWVAR 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 21
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PPUSH
24790: CALL_OW 69
24794: ST_TO_ADDR
// if not tmp then
24795: LD_VAR 0 1
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 24830
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24804: LD_VAR 0 1
24808: PUSH
24809: LD_INT 1
24811: PPUSH
24812: LD_VAR 0 1
24816: PPUSH
24817: CALL_OW 12
24821: ARRAY
24822: PPUSH
24823: LD_INT 60
24825: PPUSH
24826: CALL_OW 234
// end ;
24830: PPOPN 1
24832: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24833: LD_EXP 52
24837: PUSH
24838: LD_EXP 82
24842: AND
24843: IFFALSE 24942
24845: GO 24847
24847: DISABLE
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
// begin enable ;
24852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24853: LD_ADDR_VAR 0 1
24857: PUSH
24858: LD_INT 22
24860: PUSH
24861: LD_OWVAR 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 61
24872: PUSH
24873: EMPTY
24874: LIST
24875: PUSH
24876: LD_INT 33
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 69
24895: ST_TO_ADDR
// if not tmp then
24896: LD_VAR 0 1
24900: NOT
24901: IFFALSE 24905
// exit ;
24903: GO 24942
// for i in tmp do
24905: LD_ADDR_VAR 0 2
24909: PUSH
24910: LD_VAR 0 1
24914: PUSH
24915: FOR_IN
24916: IFFALSE 24940
// if IsControledBy ( i ) then
24918: LD_VAR 0 2
24922: PPUSH
24923: CALL_OW 312
24927: IFFALSE 24938
// ComUnlink ( i ) ;
24929: LD_VAR 0 2
24933: PPUSH
24934: CALL_OW 136
24938: GO 24915
24940: POP
24941: POP
// end ;
24942: PPOPN 2
24944: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24945: LD_EXP 52
24949: PUSH
24950: LD_EXP 83
24954: AND
24955: IFFALSE 25095
24957: GO 24959
24959: DISABLE
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
// begin ToLua ( displayPowell(); ) ;
24964: LD_STRING displayPowell();
24966: PPUSH
24967: CALL_OW 559
// uc_side := 0 ;
24971: LD_ADDR_OWVAR 20
24975: PUSH
24976: LD_INT 0
24978: ST_TO_ADDR
// uc_nation := 2 ;
24979: LD_ADDR_OWVAR 21
24983: PUSH
24984: LD_INT 2
24986: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24987: LD_ADDR_OWVAR 37
24991: PUSH
24992: LD_INT 14
24994: ST_TO_ADDR
// vc_engine := engine_siberite ;
24995: LD_ADDR_OWVAR 39
24999: PUSH
25000: LD_INT 3
25002: ST_TO_ADDR
// vc_control := control_apeman ;
25003: LD_ADDR_OWVAR 38
25007: PUSH
25008: LD_INT 5
25010: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25011: LD_ADDR_OWVAR 40
25015: PUSH
25016: LD_INT 29
25018: ST_TO_ADDR
// un := CreateVehicle ;
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: CALL_OW 45
25028: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25029: LD_VAR 0 2
25033: PPUSH
25034: LD_INT 1
25036: PPUSH
25037: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25041: LD_INT 35
25043: PPUSH
25044: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25048: LD_VAR 0 2
25052: PPUSH
25053: LD_INT 22
25055: PUSH
25056: LD_OWVAR 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PPUSH
25065: CALL_OW 69
25069: PPUSH
25070: LD_VAR 0 2
25074: PPUSH
25075: CALL_OW 74
25079: PPUSH
25080: CALL_OW 115
// until IsDead ( un ) ;
25084: LD_VAR 0 2
25088: PPUSH
25089: CALL_OW 301
25093: IFFALSE 25041
// end ;
25095: PPOPN 2
25097: END
// every 0 0$1 trigger StreamModeActive and sStu do
25098: LD_EXP 52
25102: PUSH
25103: LD_EXP 91
25107: AND
25108: IFFALSE 25124
25110: GO 25112
25112: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25113: LD_STRING displayStucuk();
25115: PPUSH
25116: CALL_OW 559
// ResetFog ;
25120: CALL_OW 335
// end ;
25124: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25125: LD_EXP 52
25129: PUSH
25130: LD_EXP 84
25134: AND
25135: IFFALSE 25276
25137: GO 25139
25139: DISABLE
25140: LD_INT 0
25142: PPUSH
25143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: LD_INT 22
25151: PUSH
25152: LD_OWVAR 2
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 21
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PPUSH
25175: CALL_OW 69
25179: ST_TO_ADDR
// if not tmp then
25180: LD_VAR 0 2
25184: NOT
25185: IFFALSE 25189
// exit ;
25187: GO 25276
// un := tmp [ rand ( 1 , tmp ) ] ;
25189: LD_ADDR_VAR 0 1
25193: PUSH
25194: LD_VAR 0 2
25198: PUSH
25199: LD_INT 1
25201: PPUSH
25202: LD_VAR 0 2
25206: PPUSH
25207: CALL_OW 12
25211: ARRAY
25212: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25213: LD_VAR 0 1
25217: PPUSH
25218: LD_INT 0
25220: PPUSH
25221: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_OWVAR 3
25234: PUSH
25235: LD_VAR 0 1
25239: DIFF
25240: PPUSH
25241: LD_VAR 0 1
25245: PPUSH
25246: CALL_OW 74
25250: PPUSH
25251: CALL_OW 115
// wait ( 0 0$20 ) ;
25255: LD_INT 700
25257: PPUSH
25258: CALL_OW 67
// SetSide ( un , your_side ) ;
25262: LD_VAR 0 1
25266: PPUSH
25267: LD_OWVAR 2
25271: PPUSH
25272: CALL_OW 235
// end ;
25276: PPOPN 2
25278: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25279: LD_EXP 52
25283: PUSH
25284: LD_EXP 85
25288: AND
25289: IFFALSE 25395
25291: GO 25293
25293: DISABLE
25294: LD_INT 0
25296: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25297: LD_ADDR_VAR 0 1
25301: PUSH
25302: LD_INT 22
25304: PUSH
25305: LD_OWVAR 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 30
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 30
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PPUSH
25346: CALL_OW 69
25350: ST_TO_ADDR
// if not depot then
25351: LD_VAR 0 1
25355: NOT
25356: IFFALSE 25360
// exit ;
25358: GO 25395
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25360: LD_VAR 0 1
25364: PUSH
25365: LD_INT 1
25367: ARRAY
25368: PPUSH
25369: CALL_OW 250
25373: PPUSH
25374: LD_VAR 0 1
25378: PUSH
25379: LD_INT 1
25381: ARRAY
25382: PPUSH
25383: CALL_OW 251
25387: PPUSH
25388: LD_INT 70
25390: PPUSH
25391: CALL_OW 495
// end ;
25395: PPOPN 1
25397: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25398: LD_EXP 52
25402: PUSH
25403: LD_EXP 86
25407: AND
25408: IFFALSE 25619
25410: GO 25412
25412: DISABLE
25413: LD_INT 0
25415: PPUSH
25416: PPUSH
25417: PPUSH
25418: PPUSH
25419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25420: LD_ADDR_VAR 0 5
25424: PUSH
25425: LD_INT 22
25427: PUSH
25428: LD_OWVAR 2
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 21
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PPUSH
25451: CALL_OW 69
25455: ST_TO_ADDR
// if not tmp then
25456: LD_VAR 0 5
25460: NOT
25461: IFFALSE 25465
// exit ;
25463: GO 25619
// for i in tmp do
25465: LD_ADDR_VAR 0 1
25469: PUSH
25470: LD_VAR 0 5
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25617
// begin d := rand ( 0 , 5 ) ;
25478: LD_ADDR_VAR 0 4
25482: PUSH
25483: LD_INT 0
25485: PPUSH
25486: LD_INT 5
25488: PPUSH
25489: CALL_OW 12
25493: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25494: LD_ADDR_VAR 0 2
25498: PUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL_OW 250
25508: PPUSH
25509: LD_VAR 0 4
25513: PPUSH
25514: LD_INT 3
25516: PPUSH
25517: LD_INT 12
25519: PPUSH
25520: CALL_OW 12
25524: PPUSH
25525: CALL_OW 272
25529: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25530: LD_ADDR_VAR 0 3
25534: PUSH
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 251
25544: PPUSH
25545: LD_VAR 0 4
25549: PPUSH
25550: LD_INT 3
25552: PPUSH
25553: LD_INT 12
25555: PPUSH
25556: CALL_OW 12
25560: PPUSH
25561: CALL_OW 273
25565: ST_TO_ADDR
// if ValidHex ( x , y ) then
25566: LD_VAR 0 2
25570: PPUSH
25571: LD_VAR 0 3
25575: PPUSH
25576: CALL_OW 488
25580: IFFALSE 25615
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25582: LD_VAR 0 1
25586: PPUSH
25587: LD_VAR 0 2
25591: PPUSH
25592: LD_VAR 0 3
25596: PPUSH
25597: LD_INT 3
25599: PPUSH
25600: LD_INT 6
25602: PPUSH
25603: CALL_OW 12
25607: PPUSH
25608: LD_INT 1
25610: PPUSH
25611: CALL_OW 483
// end ;
25615: GO 25475
25617: POP
25618: POP
// end ;
25619: PPOPN 5
25621: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25622: LD_EXP 52
25626: PUSH
25627: LD_EXP 87
25631: AND
25632: IFFALSE 25726
25634: GO 25636
25636: DISABLE
25637: LD_INT 0
25639: PPUSH
25640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25641: LD_ADDR_VAR 0 2
25645: PUSH
25646: LD_INT 22
25648: PUSH
25649: LD_OWVAR 2
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 32
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 21
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: PPUSH
25683: CALL_OW 69
25687: ST_TO_ADDR
// if not tmp then
25688: LD_VAR 0 2
25692: NOT
25693: IFFALSE 25697
// exit ;
25695: GO 25726
// for i in tmp do
25697: LD_ADDR_VAR 0 1
25701: PUSH
25702: LD_VAR 0 2
25706: PUSH
25707: FOR_IN
25708: IFFALSE 25724
// SetFuel ( i , 0 ) ;
25710: LD_VAR 0 1
25714: PPUSH
25715: LD_INT 0
25717: PPUSH
25718: CALL_OW 240
25722: GO 25707
25724: POP
25725: POP
// end ;
25726: PPOPN 2
25728: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25729: LD_EXP 52
25733: PUSH
25734: LD_EXP 88
25738: AND
25739: IFFALSE 25805
25741: GO 25743
25743: DISABLE
25744: LD_INT 0
25746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: LD_INT 22
25754: PUSH
25755: LD_OWVAR 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 30
25766: PUSH
25767: LD_INT 29
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PPUSH
25778: CALL_OW 69
25782: ST_TO_ADDR
// if not tmp then
25783: LD_VAR 0 1
25787: NOT
25788: IFFALSE 25792
// exit ;
25790: GO 25805
// DestroyUnit ( tmp [ 1 ] ) ;
25792: LD_VAR 0 1
25796: PUSH
25797: LD_INT 1
25799: ARRAY
25800: PPUSH
25801: CALL_OW 65
// end ;
25805: PPOPN 1
25807: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25808: LD_EXP 52
25812: PUSH
25813: LD_EXP 90
25817: AND
25818: IFFALSE 25947
25820: GO 25822
25822: DISABLE
25823: LD_INT 0
25825: PPUSH
// begin uc_side := 0 ;
25826: LD_ADDR_OWVAR 20
25830: PUSH
25831: LD_INT 0
25833: ST_TO_ADDR
// uc_nation := nation_arabian ;
25834: LD_ADDR_OWVAR 21
25838: PUSH
25839: LD_INT 2
25841: ST_TO_ADDR
// hc_gallery :=  ;
25842: LD_ADDR_OWVAR 33
25846: PUSH
25847: LD_STRING 
25849: ST_TO_ADDR
// hc_name :=  ;
25850: LD_ADDR_OWVAR 26
25854: PUSH
25855: LD_STRING 
25857: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25858: LD_INT 1
25860: PPUSH
25861: LD_INT 11
25863: PPUSH
25864: LD_INT 10
25866: PPUSH
25867: CALL_OW 380
// un := CreateHuman ;
25871: LD_ADDR_VAR 0 1
25875: PUSH
25876: CALL_OW 44
25880: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25881: LD_VAR 0 1
25885: PPUSH
25886: LD_INT 1
25888: PPUSH
25889: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25893: LD_INT 35
25895: PPUSH
25896: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 22
25907: PUSH
25908: LD_OWVAR 2
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PPUSH
25917: CALL_OW 69
25921: PPUSH
25922: LD_VAR 0 1
25926: PPUSH
25927: CALL_OW 74
25931: PPUSH
25932: CALL_OW 115
// until IsDead ( un ) ;
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 301
25945: IFFALSE 25893
// end ;
25947: PPOPN 1
25949: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25950: LD_EXP 52
25954: PUSH
25955: LD_EXP 92
25959: AND
25960: IFFALSE 25972
25962: GO 25964
25964: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25965: LD_STRING earthquake(getX(game), 0, 32)
25967: PPUSH
25968: CALL_OW 559
25972: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25973: LD_EXP 52
25977: PUSH
25978: LD_EXP 93
25982: AND
25983: IFFALSE 26074
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
// begin enable ;
25991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25992: LD_ADDR_VAR 0 1
25996: PUSH
25997: LD_INT 22
25999: PUSH
26000: LD_OWVAR 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 21
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 33
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 69
26038: ST_TO_ADDR
// if not tmp then
26039: LD_VAR 0 1
26043: NOT
26044: IFFALSE 26048
// exit ;
26046: GO 26074
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26048: LD_VAR 0 1
26052: PUSH
26053: LD_INT 1
26055: PPUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 12
26065: ARRAY
26066: PPUSH
26067: LD_INT 1
26069: PPUSH
26070: CALL_OW 234
// end ;
26074: PPOPN 1
26076: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26077: LD_EXP 52
26081: PUSH
26082: LD_EXP 94
26086: AND
26087: IFFALSE 26228
26089: GO 26091
26091: DISABLE
26092: LD_INT 0
26094: PPUSH
26095: PPUSH
26096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26097: LD_ADDR_VAR 0 3
26101: PUSH
26102: LD_INT 22
26104: PUSH
26105: LD_OWVAR 2
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 25
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 69
26132: ST_TO_ADDR
// if not tmp then
26133: LD_VAR 0 3
26137: NOT
26138: IFFALSE 26142
// exit ;
26140: GO 26228
// un := tmp [ rand ( 1 , tmp ) ] ;
26142: LD_ADDR_VAR 0 2
26146: PUSH
26147: LD_VAR 0 3
26151: PUSH
26152: LD_INT 1
26154: PPUSH
26155: LD_VAR 0 3
26159: PPUSH
26160: CALL_OW 12
26164: ARRAY
26165: ST_TO_ADDR
// if Crawls ( un ) then
26166: LD_VAR 0 2
26170: PPUSH
26171: CALL_OW 318
26175: IFFALSE 26186
// ComWalk ( un ) ;
26177: LD_VAR 0 2
26181: PPUSH
26182: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26186: LD_VAR 0 2
26190: PPUSH
26191: LD_INT 9
26193: PPUSH
26194: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26198: LD_INT 28
26200: PPUSH
26201: LD_OWVAR 2
26205: PPUSH
26206: LD_INT 2
26208: PPUSH
26209: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26213: LD_INT 29
26215: PPUSH
26216: LD_OWVAR 2
26220: PPUSH
26221: LD_INT 2
26223: PPUSH
26224: CALL_OW 322
// end ;
26228: PPOPN 3
26230: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26231: LD_EXP 52
26235: PUSH
26236: LD_EXP 95
26240: AND
26241: IFFALSE 26352
26243: GO 26245
26245: DISABLE
26246: LD_INT 0
26248: PPUSH
26249: PPUSH
26250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26251: LD_ADDR_VAR 0 3
26255: PUSH
26256: LD_INT 22
26258: PUSH
26259: LD_OWVAR 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 25
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: ST_TO_ADDR
// if not tmp then
26287: LD_VAR 0 3
26291: NOT
26292: IFFALSE 26296
// exit ;
26294: GO 26352
// un := tmp [ rand ( 1 , tmp ) ] ;
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_VAR 0 3
26305: PUSH
26306: LD_INT 1
26308: PPUSH
26309: LD_VAR 0 3
26313: PPUSH
26314: CALL_OW 12
26318: ARRAY
26319: ST_TO_ADDR
// if Crawls ( un ) then
26320: LD_VAR 0 2
26324: PPUSH
26325: CALL_OW 318
26329: IFFALSE 26340
// ComWalk ( un ) ;
26331: LD_VAR 0 2
26335: PPUSH
26336: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26340: LD_VAR 0 2
26344: PPUSH
26345: LD_INT 8
26347: PPUSH
26348: CALL_OW 336
// end ;
26352: PPOPN 3
26354: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26355: LD_EXP 52
26359: PUSH
26360: LD_EXP 96
26364: AND
26365: IFFALSE 26509
26367: GO 26369
26369: DISABLE
26370: LD_INT 0
26372: PPUSH
26373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26374: LD_ADDR_VAR 0 2
26378: PUSH
26379: LD_INT 22
26381: PUSH
26382: LD_OWVAR 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 21
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: LD_INT 34
26406: PUSH
26407: LD_INT 12
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 34
26416: PUSH
26417: LD_INT 51
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 34
26426: PUSH
26427: LD_INT 32
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: PPUSH
26445: CALL_OW 69
26449: ST_TO_ADDR
// if not tmp then
26450: LD_VAR 0 2
26454: NOT
26455: IFFALSE 26459
// exit ;
26457: GO 26509
// for i in tmp do
26459: LD_ADDR_VAR 0 1
26463: PUSH
26464: LD_VAR 0 2
26468: PUSH
26469: FOR_IN
26470: IFFALSE 26507
// if GetCargo ( i , mat_artifact ) = 0 then
26472: LD_VAR 0 1
26476: PPUSH
26477: LD_INT 4
26479: PPUSH
26480: CALL_OW 289
26484: PUSH
26485: LD_INT 0
26487: EQUAL
26488: IFFALSE 26505
// SetCargo ( i , mat_siberit , 100 ) ;
26490: LD_VAR 0 1
26494: PPUSH
26495: LD_INT 3
26497: PPUSH
26498: LD_INT 100
26500: PPUSH
26501: CALL_OW 290
26505: GO 26469
26507: POP
26508: POP
// end ;
26509: PPOPN 2
26511: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26512: LD_EXP 52
26516: PUSH
26517: LD_EXP 97
26521: AND
26522: IFFALSE 26705
26524: GO 26526
26526: DISABLE
26527: LD_INT 0
26529: PPUSH
26530: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: LD_INT 22
26538: PUSH
26539: LD_OWVAR 2
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PPUSH
26548: CALL_OW 69
26552: ST_TO_ADDR
// if not tmp then
26553: LD_VAR 0 2
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 26705
// for i := 1 to 2 do
26562: LD_ADDR_VAR 0 1
26566: PUSH
26567: DOUBLE
26568: LD_INT 1
26570: DEC
26571: ST_TO_ADDR
26572: LD_INT 2
26574: PUSH
26575: FOR_TO
26576: IFFALSE 26703
// begin uc_side := your_side ;
26578: LD_ADDR_OWVAR 20
26582: PUSH
26583: LD_OWVAR 2
26587: ST_TO_ADDR
// uc_nation := nation_american ;
26588: LD_ADDR_OWVAR 21
26592: PUSH
26593: LD_INT 1
26595: ST_TO_ADDR
// vc_chassis := us_morphling ;
26596: LD_ADDR_OWVAR 37
26600: PUSH
26601: LD_INT 5
26603: ST_TO_ADDR
// vc_engine := engine_siberite ;
26604: LD_ADDR_OWVAR 39
26608: PUSH
26609: LD_INT 3
26611: ST_TO_ADDR
// vc_control := control_computer ;
26612: LD_ADDR_OWVAR 38
26616: PUSH
26617: LD_INT 3
26619: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26620: LD_ADDR_OWVAR 40
26624: PUSH
26625: LD_INT 10
26627: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26628: LD_VAR 0 2
26632: PUSH
26633: LD_INT 1
26635: ARRAY
26636: PPUSH
26637: CALL_OW 310
26641: NOT
26642: IFFALSE 26689
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26644: CALL_OW 45
26648: PPUSH
26649: LD_VAR 0 2
26653: PUSH
26654: LD_INT 1
26656: ARRAY
26657: PPUSH
26658: CALL_OW 250
26662: PPUSH
26663: LD_VAR 0 2
26667: PUSH
26668: LD_INT 1
26670: ARRAY
26671: PPUSH
26672: CALL_OW 251
26676: PPUSH
26677: LD_INT 12
26679: PPUSH
26680: LD_INT 1
26682: PPUSH
26683: CALL_OW 50
26687: GO 26701
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26689: CALL_OW 45
26693: PPUSH
26694: LD_INT 1
26696: PPUSH
26697: CALL_OW 51
// end ;
26701: GO 26575
26703: POP
26704: POP
// end ;
26705: PPOPN 2
26707: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26708: LD_EXP 52
26712: PUSH
26713: LD_EXP 98
26717: AND
26718: IFFALSE 26940
26720: GO 26722
26722: DISABLE
26723: LD_INT 0
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26731: LD_ADDR_VAR 0 6
26735: PUSH
26736: LD_INT 22
26738: PUSH
26739: LD_OWVAR 2
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 21
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: LD_INT 23
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: PPUSH
26780: CALL_OW 69
26784: ST_TO_ADDR
// if not tmp then
26785: LD_VAR 0 6
26789: NOT
26790: IFFALSE 26794
// exit ;
26792: GO 26940
// s1 := rand ( 1 , 4 ) ;
26794: LD_ADDR_VAR 0 2
26798: PUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 4
26804: PPUSH
26805: CALL_OW 12
26809: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26810: LD_ADDR_VAR 0 4
26814: PUSH
26815: LD_VAR 0 6
26819: PUSH
26820: LD_INT 1
26822: ARRAY
26823: PPUSH
26824: LD_VAR 0 2
26828: PPUSH
26829: CALL_OW 259
26833: ST_TO_ADDR
// if s1 = 1 then
26834: LD_VAR 0 2
26838: PUSH
26839: LD_INT 1
26841: EQUAL
26842: IFFALSE 26862
// s2 := rand ( 2 , 4 ) else
26844: LD_ADDR_VAR 0 3
26848: PUSH
26849: LD_INT 2
26851: PPUSH
26852: LD_INT 4
26854: PPUSH
26855: CALL_OW 12
26859: ST_TO_ADDR
26860: GO 26870
// s2 := 1 ;
26862: LD_ADDR_VAR 0 3
26866: PUSH
26867: LD_INT 1
26869: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26870: LD_ADDR_VAR 0 5
26874: PUSH
26875: LD_VAR 0 6
26879: PUSH
26880: LD_INT 1
26882: ARRAY
26883: PPUSH
26884: LD_VAR 0 3
26888: PPUSH
26889: CALL_OW 259
26893: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26894: LD_VAR 0 6
26898: PUSH
26899: LD_INT 1
26901: ARRAY
26902: PPUSH
26903: LD_VAR 0 2
26907: PPUSH
26908: LD_VAR 0 5
26912: PPUSH
26913: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26917: LD_VAR 0 6
26921: PUSH
26922: LD_INT 1
26924: ARRAY
26925: PPUSH
26926: LD_VAR 0 3
26930: PPUSH
26931: LD_VAR 0 4
26935: PPUSH
26936: CALL_OW 237
// end ;
26940: PPOPN 6
26942: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26943: LD_EXP 52
26947: PUSH
26948: LD_EXP 99
26952: AND
26953: IFFALSE 27032
26955: GO 26957
26957: DISABLE
26958: LD_INT 0
26960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26961: LD_ADDR_VAR 0 1
26965: PUSH
26966: LD_INT 22
26968: PUSH
26969: LD_OWVAR 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 30
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PPUSH
26992: CALL_OW 69
26996: ST_TO_ADDR
// if not tmp then
26997: LD_VAR 0 1
27001: NOT
27002: IFFALSE 27006
// exit ;
27004: GO 27032
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27006: LD_VAR 0 1
27010: PUSH
27011: LD_INT 1
27013: PPUSH
27014: LD_VAR 0 1
27018: PPUSH
27019: CALL_OW 12
27023: ARRAY
27024: PPUSH
27025: LD_INT 1
27027: PPUSH
27028: CALL_OW 234
// end ;
27032: PPOPN 1
27034: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27035: LD_EXP 52
27039: PUSH
27040: LD_EXP 100
27044: AND
27045: IFFALSE 27157
27047: GO 27049
27049: DISABLE
27050: LD_INT 0
27052: PPUSH
27053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27054: LD_ADDR_VAR 0 2
27058: PUSH
27059: LD_INT 22
27061: PUSH
27062: LD_OWVAR 2
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: LD_INT 30
27076: PUSH
27077: LD_INT 27
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 30
27086: PUSH
27087: LD_INT 26
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 30
27096: PUSH
27097: LD_INT 28
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PPUSH
27114: CALL_OW 69
27118: ST_TO_ADDR
// if not tmp then
27119: LD_VAR 0 2
27123: NOT
27124: IFFALSE 27128
// exit ;
27126: GO 27157
// for i in tmp do
27128: LD_ADDR_VAR 0 1
27132: PUSH
27133: LD_VAR 0 2
27137: PUSH
27138: FOR_IN
27139: IFFALSE 27155
// SetLives ( i , 1 ) ;
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_INT 1
27148: PPUSH
27149: CALL_OW 234
27153: GO 27138
27155: POP
27156: POP
// end ;
27157: PPOPN 2
27159: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27160: LD_EXP 52
27164: PUSH
27165: LD_EXP 101
27169: AND
27170: IFFALSE 27444
27172: GO 27174
27174: DISABLE
27175: LD_INT 0
27177: PPUSH
27178: PPUSH
27179: PPUSH
// begin i := rand ( 1 , 7 ) ;
27180: LD_ADDR_VAR 0 1
27184: PUSH
27185: LD_INT 1
27187: PPUSH
27188: LD_INT 7
27190: PPUSH
27191: CALL_OW 12
27195: ST_TO_ADDR
// case i of 1 :
27196: LD_VAR 0 1
27200: PUSH
27201: LD_INT 1
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27209
27207: GO 27219
27209: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27210: LD_STRING earthquake(getX(game), 0, 32)
27212: PPUSH
27213: CALL_OW 559
27217: GO 27444
27219: LD_INT 2
27221: DOUBLE
27222: EQUAL
27223: IFTRUE 27227
27225: GO 27241
27227: POP
// begin ToLua ( displayStucuk(); ) ;
27228: LD_STRING displayStucuk();
27230: PPUSH
27231: CALL_OW 559
// ResetFog ;
27235: CALL_OW 335
// end ; 3 :
27239: GO 27444
27241: LD_INT 3
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27353
27249: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27250: LD_ADDR_VAR 0 2
27254: PUSH
27255: LD_INT 22
27257: PUSH
27258: LD_OWVAR 2
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 25
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PPUSH
27281: CALL_OW 69
27285: ST_TO_ADDR
// if not tmp then
27286: LD_VAR 0 2
27290: NOT
27291: IFFALSE 27295
// exit ;
27293: GO 27444
// un := tmp [ rand ( 1 , tmp ) ] ;
27295: LD_ADDR_VAR 0 3
27299: PUSH
27300: LD_VAR 0 2
27304: PUSH
27305: LD_INT 1
27307: PPUSH
27308: LD_VAR 0 2
27312: PPUSH
27313: CALL_OW 12
27317: ARRAY
27318: ST_TO_ADDR
// if Crawls ( un ) then
27319: LD_VAR 0 3
27323: PPUSH
27324: CALL_OW 318
27328: IFFALSE 27339
// ComWalk ( un ) ;
27330: LD_VAR 0 3
27334: PPUSH
27335: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27339: LD_VAR 0 3
27343: PPUSH
27344: LD_INT 8
27346: PPUSH
27347: CALL_OW 336
// end ; 4 :
27351: GO 27444
27353: LD_INT 4
27355: DOUBLE
27356: EQUAL
27357: IFTRUE 27361
27359: GO 27422
27361: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27362: LD_ADDR_VAR 0 2
27366: PUSH
27367: LD_INT 22
27369: PUSH
27370: LD_OWVAR 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 30
27381: PUSH
27382: LD_INT 29
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PPUSH
27393: CALL_OW 69
27397: ST_TO_ADDR
// if not tmp then
27398: LD_VAR 0 2
27402: NOT
27403: IFFALSE 27407
// exit ;
27405: GO 27444
// DestroyUnit ( tmp [ 1 ] ) ;
27407: LD_VAR 0 2
27411: PUSH
27412: LD_INT 1
27414: ARRAY
27415: PPUSH
27416: CALL_OW 65
// end ; 5 .. 7 :
27420: GO 27444
27422: LD_INT 5
27424: DOUBLE
27425: GREATEREQUAL
27426: IFFALSE 27434
27428: LD_INT 7
27430: DOUBLE
27431: LESSEQUAL
27432: IFTRUE 27436
27434: GO 27443
27436: POP
// StreamSibBomb ; end ;
27437: CALL 23694 0 0
27441: GO 27444
27443: POP
// end ;
27444: PPOPN 3
27446: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27447: LD_EXP 52
27451: PUSH
27452: LD_EXP 102
27456: AND
27457: IFFALSE 27613
27459: GO 27461
27461: DISABLE
27462: LD_INT 0
27464: PPUSH
27465: PPUSH
27466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27467: LD_ADDR_VAR 0 2
27471: PUSH
27472: LD_INT 81
27474: PUSH
27475: LD_OWVAR 2
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: LD_INT 21
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 21
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PPUSH
27516: CALL_OW 69
27520: ST_TO_ADDR
// if not tmp then
27521: LD_VAR 0 2
27525: NOT
27526: IFFALSE 27530
// exit ;
27528: GO 27613
// p := 0 ;
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_INT 0
27537: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27538: LD_INT 35
27540: PPUSH
27541: CALL_OW 67
// p := p + 1 ;
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_VAR 0 3
27554: PUSH
27555: LD_INT 1
27557: PLUS
27558: ST_TO_ADDR
// for i in tmp do
27559: LD_ADDR_VAR 0 1
27563: PUSH
27564: LD_VAR 0 2
27568: PUSH
27569: FOR_IN
27570: IFFALSE 27601
// if GetLives ( i ) < 1000 then
27572: LD_VAR 0 1
27576: PPUSH
27577: CALL_OW 256
27581: PUSH
27582: LD_INT 1000
27584: LESS
27585: IFFALSE 27599
// SetLives ( i , 1000 ) ;
27587: LD_VAR 0 1
27591: PPUSH
27592: LD_INT 1000
27594: PPUSH
27595: CALL_OW 234
27599: GO 27569
27601: POP
27602: POP
// until p > 20 ;
27603: LD_VAR 0 3
27607: PUSH
27608: LD_INT 20
27610: GREATER
27611: IFFALSE 27538
// end ;
27613: PPOPN 3
27615: END
// every 0 0$1 trigger StreamModeActive and sTime do
27616: LD_EXP 52
27620: PUSH
27621: LD_EXP 103
27625: AND
27626: IFFALSE 27661
27628: GO 27630
27630: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27631: LD_INT 28
27633: PPUSH
27634: LD_OWVAR 2
27638: PPUSH
27639: LD_INT 2
27641: PPUSH
27642: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27646: LD_INT 30
27648: PPUSH
27649: LD_OWVAR 2
27653: PPUSH
27654: LD_INT 2
27656: PPUSH
27657: CALL_OW 322
// end ;
27661: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27662: LD_EXP 52
27666: PUSH
27667: LD_EXP 104
27671: AND
27672: IFFALSE 27793
27674: GO 27676
27676: DISABLE
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27681: LD_ADDR_VAR 0 2
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_OWVAR 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 21
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 3
27710: PUSH
27711: LD_INT 23
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: PPUSH
27730: CALL_OW 69
27734: ST_TO_ADDR
// if not tmp then
27735: LD_VAR 0 2
27739: NOT
27740: IFFALSE 27744
// exit ;
27742: GO 27793
// for i in tmp do
27744: LD_ADDR_VAR 0 1
27748: PUSH
27749: LD_VAR 0 2
27753: PUSH
27754: FOR_IN
27755: IFFALSE 27791
// begin if Crawls ( i ) then
27757: LD_VAR 0 1
27761: PPUSH
27762: CALL_OW 318
27766: IFFALSE 27777
// ComWalk ( i ) ;
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL_OW 138
// SetClass ( i , 2 ) ;
27777: LD_VAR 0 1
27781: PPUSH
27782: LD_INT 2
27784: PPUSH
27785: CALL_OW 336
// end ;
27789: GO 27754
27791: POP
27792: POP
// end ;
27793: PPOPN 2
27795: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27796: LD_EXP 52
27800: PUSH
27801: LD_EXP 105
27805: AND
27806: IFFALSE 28087
27808: GO 27810
27810: DISABLE
27811: LD_INT 0
27813: PPUSH
27814: PPUSH
27815: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27816: LD_OWVAR 2
27820: PPUSH
27821: LD_INT 9
27823: PPUSH
27824: LD_INT 1
27826: PPUSH
27827: LD_INT 1
27829: PPUSH
27830: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27834: LD_INT 9
27836: PPUSH
27837: LD_OWVAR 2
27841: PPUSH
27842: CALL_OW 343
// uc_side := 9 ;
27846: LD_ADDR_OWVAR 20
27850: PUSH
27851: LD_INT 9
27853: ST_TO_ADDR
// uc_nation := 2 ;
27854: LD_ADDR_OWVAR 21
27858: PUSH
27859: LD_INT 2
27861: ST_TO_ADDR
// hc_name := Dark Warrior ;
27862: LD_ADDR_OWVAR 26
27866: PUSH
27867: LD_STRING Dark Warrior
27869: ST_TO_ADDR
// hc_gallery :=  ;
27870: LD_ADDR_OWVAR 33
27874: PUSH
27875: LD_STRING 
27877: ST_TO_ADDR
// hc_noskilllimit := true ;
27878: LD_ADDR_OWVAR 76
27882: PUSH
27883: LD_INT 1
27885: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27886: LD_ADDR_OWVAR 31
27890: PUSH
27891: LD_INT 30
27893: PUSH
27894: LD_INT 30
27896: PUSH
27897: LD_INT 30
27899: PUSH
27900: LD_INT 30
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: ST_TO_ADDR
// un := CreateHuman ;
27909: LD_ADDR_VAR 0 3
27913: PUSH
27914: CALL_OW 44
27918: ST_TO_ADDR
// hc_noskilllimit := false ;
27919: LD_ADDR_OWVAR 76
27923: PUSH
27924: LD_INT 0
27926: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27927: LD_VAR 0 3
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 51
// p := 0 ;
27939: LD_ADDR_VAR 0 2
27943: PUSH
27944: LD_INT 0
27946: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27947: LD_INT 35
27949: PPUSH
27950: CALL_OW 67
// p := p + 1 ;
27954: LD_ADDR_VAR 0 2
27958: PUSH
27959: LD_VAR 0 2
27963: PUSH
27964: LD_INT 1
27966: PLUS
27967: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27968: LD_VAR 0 3
27972: PPUSH
27973: CALL_OW 256
27977: PUSH
27978: LD_INT 1000
27980: LESS
27981: IFFALSE 27995
// SetLives ( un , 1000 ) ;
27983: LD_VAR 0 3
27987: PPUSH
27988: LD_INT 1000
27990: PPUSH
27991: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27995: LD_VAR 0 3
27999: PPUSH
28000: LD_INT 81
28002: PUSH
28003: LD_OWVAR 2
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 91
28014: PUSH
28015: LD_VAR 0 3
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PPUSH
28032: CALL_OW 69
28036: PPUSH
28037: LD_VAR 0 3
28041: PPUSH
28042: CALL_OW 74
28046: PPUSH
28047: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
28051: LD_VAR 0 2
28055: PUSH
28056: LD_INT 60
28058: GREATER
28059: PUSH
28060: LD_VAR 0 3
28064: PPUSH
28065: CALL_OW 301
28069: OR
28070: IFFALSE 27947
// if un then
28072: LD_VAR 0 3
28076: IFFALSE 28087
// RemoveUnit ( un ) ;
28078: LD_VAR 0 3
28082: PPUSH
28083: CALL_OW 64
// end ;
28087: PPOPN 3
28089: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28090: LD_INT 0
28092: PPUSH
// case cmd of 301 :
28093: LD_VAR 0 1
28097: PUSH
28098: LD_INT 301
28100: DOUBLE
28101: EQUAL
28102: IFTRUE 28106
28104: GO 28138
28106: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28107: LD_VAR 0 6
28111: PPUSH
28112: LD_VAR 0 7
28116: PPUSH
28117: LD_VAR 0 8
28121: PPUSH
28122: LD_VAR 0 4
28126: PPUSH
28127: LD_VAR 0 5
28131: PPUSH
28132: CALL 29339 0 5
28136: GO 28259
28138: LD_INT 302
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28183
28146: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28147: LD_VAR 0 6
28151: PPUSH
28152: LD_VAR 0 7
28156: PPUSH
28157: LD_VAR 0 8
28161: PPUSH
28162: LD_VAR 0 9
28166: PPUSH
28167: LD_VAR 0 4
28171: PPUSH
28172: LD_VAR 0 5
28176: PPUSH
28177: CALL 29430 0 6
28181: GO 28259
28183: LD_INT 303
28185: DOUBLE
28186: EQUAL
28187: IFTRUE 28191
28189: GO 28228
28191: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28192: LD_VAR 0 6
28196: PPUSH
28197: LD_VAR 0 7
28201: PPUSH
28202: LD_VAR 0 8
28206: PPUSH
28207: LD_VAR 0 9
28211: PPUSH
28212: LD_VAR 0 4
28216: PPUSH
28217: LD_VAR 0 5
28221: PPUSH
28222: CALL 28264 0 6
28226: GO 28259
28228: LD_INT 304
28230: DOUBLE
28231: EQUAL
28232: IFTRUE 28236
28234: GO 28258
28236: POP
// hHackTeleport ( unit , x , y ) ; end ;
28237: LD_VAR 0 2
28241: PPUSH
28242: LD_VAR 0 4
28246: PPUSH
28247: LD_VAR 0 5
28251: PPUSH
28252: CALL 30023 0 3
28256: GO 28259
28258: POP
// end ;
28259: LD_VAR 0 12
28263: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28264: LD_INT 0
28266: PPUSH
28267: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28268: LD_VAR 0 1
28272: PUSH
28273: LD_INT 1
28275: LESS
28276: PUSH
28277: LD_VAR 0 1
28281: PUSH
28282: LD_INT 3
28284: GREATER
28285: OR
28286: PUSH
28287: LD_VAR 0 5
28291: PPUSH
28292: LD_VAR 0 6
28296: PPUSH
28297: CALL_OW 428
28301: OR
28302: IFFALSE 28306
// exit ;
28304: GO 29026
// uc_side := your_side ;
28306: LD_ADDR_OWVAR 20
28310: PUSH
28311: LD_OWVAR 2
28315: ST_TO_ADDR
// uc_nation := nation ;
28316: LD_ADDR_OWVAR 21
28320: PUSH
28321: LD_VAR 0 1
28325: ST_TO_ADDR
// bc_level = 1 ;
28326: LD_ADDR_OWVAR 43
28330: PUSH
28331: LD_INT 1
28333: ST_TO_ADDR
// case btype of 1 :
28334: LD_VAR 0 2
28338: PUSH
28339: LD_INT 1
28341: DOUBLE
28342: EQUAL
28343: IFTRUE 28347
28345: GO 28358
28347: POP
// bc_type := b_depot ; 2 :
28348: LD_ADDR_OWVAR 42
28352: PUSH
28353: LD_INT 0
28355: ST_TO_ADDR
28356: GO 28970
28358: LD_INT 2
28360: DOUBLE
28361: EQUAL
28362: IFTRUE 28366
28364: GO 28377
28366: POP
// bc_type := b_warehouse ; 3 :
28367: LD_ADDR_OWVAR 42
28371: PUSH
28372: LD_INT 1
28374: ST_TO_ADDR
28375: GO 28970
28377: LD_INT 3
28379: DOUBLE
28380: EQUAL
28381: IFTRUE 28385
28383: GO 28396
28385: POP
// bc_type := b_lab ; 4 .. 9 :
28386: LD_ADDR_OWVAR 42
28390: PUSH
28391: LD_INT 6
28393: ST_TO_ADDR
28394: GO 28970
28396: LD_INT 4
28398: DOUBLE
28399: GREATEREQUAL
28400: IFFALSE 28408
28402: LD_INT 9
28404: DOUBLE
28405: LESSEQUAL
28406: IFTRUE 28410
28408: GO 28462
28410: POP
// begin bc_type := b_lab_half ;
28411: LD_ADDR_OWVAR 42
28415: PUSH
28416: LD_INT 7
28418: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28419: LD_ADDR_OWVAR 44
28423: PUSH
28424: LD_INT 10
28426: PUSH
28427: LD_INT 11
28429: PUSH
28430: LD_INT 12
28432: PUSH
28433: LD_INT 15
28435: PUSH
28436: LD_INT 14
28438: PUSH
28439: LD_INT 13
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: PUSH
28450: LD_VAR 0 2
28454: PUSH
28455: LD_INT 3
28457: MINUS
28458: ARRAY
28459: ST_TO_ADDR
// end ; 10 .. 13 :
28460: GO 28970
28462: LD_INT 10
28464: DOUBLE
28465: GREATEREQUAL
28466: IFFALSE 28474
28468: LD_INT 13
28470: DOUBLE
28471: LESSEQUAL
28472: IFTRUE 28476
28474: GO 28553
28476: POP
// begin bc_type := b_lab_full ;
28477: LD_ADDR_OWVAR 42
28481: PUSH
28482: LD_INT 8
28484: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28485: LD_ADDR_OWVAR 44
28489: PUSH
28490: LD_INT 10
28492: PUSH
28493: LD_INT 12
28495: PUSH
28496: LD_INT 14
28498: PUSH
28499: LD_INT 13
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: PUSH
28508: LD_VAR 0 2
28512: PUSH
28513: LD_INT 9
28515: MINUS
28516: ARRAY
28517: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28518: LD_ADDR_OWVAR 45
28522: PUSH
28523: LD_INT 11
28525: PUSH
28526: LD_INT 15
28528: PUSH
28529: LD_INT 12
28531: PUSH
28532: LD_INT 15
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: PUSH
28541: LD_VAR 0 2
28545: PUSH
28546: LD_INT 9
28548: MINUS
28549: ARRAY
28550: ST_TO_ADDR
// end ; 14 :
28551: GO 28970
28553: LD_INT 14
28555: DOUBLE
28556: EQUAL
28557: IFTRUE 28561
28559: GO 28572
28561: POP
// bc_type := b_workshop ; 15 :
28562: LD_ADDR_OWVAR 42
28566: PUSH
28567: LD_INT 2
28569: ST_TO_ADDR
28570: GO 28970
28572: LD_INT 15
28574: DOUBLE
28575: EQUAL
28576: IFTRUE 28580
28578: GO 28591
28580: POP
// bc_type := b_factory ; 16 :
28581: LD_ADDR_OWVAR 42
28585: PUSH
28586: LD_INT 3
28588: ST_TO_ADDR
28589: GO 28970
28591: LD_INT 16
28593: DOUBLE
28594: EQUAL
28595: IFTRUE 28599
28597: GO 28610
28599: POP
// bc_type := b_ext_gun ; 17 :
28600: LD_ADDR_OWVAR 42
28604: PUSH
28605: LD_INT 17
28607: ST_TO_ADDR
28608: GO 28970
28610: LD_INT 17
28612: DOUBLE
28613: EQUAL
28614: IFTRUE 28618
28616: GO 28646
28618: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28619: LD_ADDR_OWVAR 42
28623: PUSH
28624: LD_INT 19
28626: PUSH
28627: LD_INT 23
28629: PUSH
28630: LD_INT 19
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: LIST
28637: PUSH
28638: LD_VAR 0 1
28642: ARRAY
28643: ST_TO_ADDR
28644: GO 28970
28646: LD_INT 18
28648: DOUBLE
28649: EQUAL
28650: IFTRUE 28654
28652: GO 28665
28654: POP
// bc_type := b_ext_radar ; 19 :
28655: LD_ADDR_OWVAR 42
28659: PUSH
28660: LD_INT 20
28662: ST_TO_ADDR
28663: GO 28970
28665: LD_INT 19
28667: DOUBLE
28668: EQUAL
28669: IFTRUE 28673
28671: GO 28684
28673: POP
// bc_type := b_ext_radio ; 20 :
28674: LD_ADDR_OWVAR 42
28678: PUSH
28679: LD_INT 22
28681: ST_TO_ADDR
28682: GO 28970
28684: LD_INT 20
28686: DOUBLE
28687: EQUAL
28688: IFTRUE 28692
28690: GO 28703
28692: POP
// bc_type := b_ext_siberium ; 21 :
28693: LD_ADDR_OWVAR 42
28697: PUSH
28698: LD_INT 21
28700: ST_TO_ADDR
28701: GO 28970
28703: LD_INT 21
28705: DOUBLE
28706: EQUAL
28707: IFTRUE 28711
28709: GO 28722
28711: POP
// bc_type := b_ext_computer ; 22 :
28712: LD_ADDR_OWVAR 42
28716: PUSH
28717: LD_INT 24
28719: ST_TO_ADDR
28720: GO 28970
28722: LD_INT 22
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28741
28730: POP
// bc_type := b_ext_track ; 23 :
28731: LD_ADDR_OWVAR 42
28735: PUSH
28736: LD_INT 16
28738: ST_TO_ADDR
28739: GO 28970
28741: LD_INT 23
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28760
28749: POP
// bc_type := b_ext_laser ; 24 :
28750: LD_ADDR_OWVAR 42
28754: PUSH
28755: LD_INT 25
28757: ST_TO_ADDR
28758: GO 28970
28760: LD_INT 24
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28768
28766: GO 28779
28768: POP
// bc_type := b_control_tower ; 25 :
28769: LD_ADDR_OWVAR 42
28773: PUSH
28774: LD_INT 36
28776: ST_TO_ADDR
28777: GO 28970
28779: LD_INT 25
28781: DOUBLE
28782: EQUAL
28783: IFTRUE 28787
28785: GO 28798
28787: POP
// bc_type := b_breastwork ; 26 :
28788: LD_ADDR_OWVAR 42
28792: PUSH
28793: LD_INT 31
28795: ST_TO_ADDR
28796: GO 28970
28798: LD_INT 26
28800: DOUBLE
28801: EQUAL
28802: IFTRUE 28806
28804: GO 28817
28806: POP
// bc_type := b_bunker ; 27 :
28807: LD_ADDR_OWVAR 42
28811: PUSH
28812: LD_INT 32
28814: ST_TO_ADDR
28815: GO 28970
28817: LD_INT 27
28819: DOUBLE
28820: EQUAL
28821: IFTRUE 28825
28823: GO 28836
28825: POP
// bc_type := b_turret ; 28 :
28826: LD_ADDR_OWVAR 42
28830: PUSH
28831: LD_INT 33
28833: ST_TO_ADDR
28834: GO 28970
28836: LD_INT 28
28838: DOUBLE
28839: EQUAL
28840: IFTRUE 28844
28842: GO 28855
28844: POP
// bc_type := b_armoury ; 29 :
28845: LD_ADDR_OWVAR 42
28849: PUSH
28850: LD_INT 4
28852: ST_TO_ADDR
28853: GO 28970
28855: LD_INT 29
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28874
28863: POP
// bc_type := b_barracks ; 30 :
28864: LD_ADDR_OWVAR 42
28868: PUSH
28869: LD_INT 5
28871: ST_TO_ADDR
28872: GO 28970
28874: LD_INT 30
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28893
28882: POP
// bc_type := b_solar_power ; 31 :
28883: LD_ADDR_OWVAR 42
28887: PUSH
28888: LD_INT 27
28890: ST_TO_ADDR
28891: GO 28970
28893: LD_INT 31
28895: DOUBLE
28896: EQUAL
28897: IFTRUE 28901
28899: GO 28912
28901: POP
// bc_type := b_oil_power ; 32 :
28902: LD_ADDR_OWVAR 42
28906: PUSH
28907: LD_INT 26
28909: ST_TO_ADDR
28910: GO 28970
28912: LD_INT 32
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 28931
28920: POP
// bc_type := b_siberite_power ; 33 :
28921: LD_ADDR_OWVAR 42
28925: PUSH
28926: LD_INT 28
28928: ST_TO_ADDR
28929: GO 28970
28931: LD_INT 33
28933: DOUBLE
28934: EQUAL
28935: IFTRUE 28939
28937: GO 28950
28939: POP
// bc_type := b_oil_mine ; 34 :
28940: LD_ADDR_OWVAR 42
28944: PUSH
28945: LD_INT 29
28947: ST_TO_ADDR
28948: GO 28970
28950: LD_INT 34
28952: DOUBLE
28953: EQUAL
28954: IFTRUE 28958
28956: GO 28969
28958: POP
// bc_type := b_siberite_mine ; end ;
28959: LD_ADDR_OWVAR 42
28963: PUSH
28964: LD_INT 30
28966: ST_TO_ADDR
28967: GO 28970
28969: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28970: LD_ADDR_VAR 0 8
28974: PUSH
28975: LD_VAR 0 5
28979: PPUSH
28980: LD_VAR 0 6
28984: PPUSH
28985: LD_VAR 0 3
28989: PPUSH
28990: CALL_OW 47
28994: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28995: LD_OWVAR 42
28999: PUSH
29000: LD_INT 32
29002: PUSH
29003: LD_INT 33
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: IN
29010: IFFALSE 29026
// PlaceWeaponTurret ( b , weapon ) ;
29012: LD_VAR 0 8
29016: PPUSH
29017: LD_VAR 0 4
29021: PPUSH
29022: CALL_OW 431
// end ;
29026: LD_VAR 0 7
29030: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29031: LD_INT 0
29033: PPUSH
29034: PPUSH
29035: PPUSH
29036: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29037: LD_ADDR_VAR 0 4
29041: PUSH
29042: LD_INT 22
29044: PUSH
29045: LD_OWVAR 2
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 30
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 30
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL_OW 69
29090: ST_TO_ADDR
// if not tmp then
29091: LD_VAR 0 4
29095: NOT
29096: IFFALSE 29100
// exit ;
29098: GO 29159
// for i in tmp do
29100: LD_ADDR_VAR 0 2
29104: PUSH
29105: LD_VAR 0 4
29109: PUSH
29110: FOR_IN
29111: IFFALSE 29157
// for j = 1 to 3 do
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: DOUBLE
29119: LD_INT 1
29121: DEC
29122: ST_TO_ADDR
29123: LD_INT 3
29125: PUSH
29126: FOR_TO
29127: IFFALSE 29153
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29129: LD_VAR 0 2
29133: PPUSH
29134: CALL_OW 274
29138: PPUSH
29139: LD_VAR 0 3
29143: PPUSH
29144: LD_INT 99999
29146: PPUSH
29147: CALL_OW 277
29151: GO 29126
29153: POP
29154: POP
29155: GO 29110
29157: POP
29158: POP
// end ;
29159: LD_VAR 0 1
29163: RET
// export function hHackSetLevel10 ; var i , j ; begin
29164: LD_INT 0
29166: PPUSH
29167: PPUSH
29168: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29169: LD_ADDR_VAR 0 2
29173: PUSH
29174: LD_INT 21
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PPUSH
29184: CALL_OW 69
29188: PUSH
29189: FOR_IN
29190: IFFALSE 29242
// if IsSelected ( i ) then
29192: LD_VAR 0 2
29196: PPUSH
29197: CALL_OW 306
29201: IFFALSE 29240
// begin for j := 1 to 4 do
29203: LD_ADDR_VAR 0 3
29207: PUSH
29208: DOUBLE
29209: LD_INT 1
29211: DEC
29212: ST_TO_ADDR
29213: LD_INT 4
29215: PUSH
29216: FOR_TO
29217: IFFALSE 29238
// SetSkill ( i , j , 10 ) ;
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_VAR 0 3
29228: PPUSH
29229: LD_INT 10
29231: PPUSH
29232: CALL_OW 237
29236: GO 29216
29238: POP
29239: POP
// end ;
29240: GO 29189
29242: POP
29243: POP
// end ;
29244: LD_VAR 0 1
29248: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29249: LD_INT 0
29251: PPUSH
29252: PPUSH
29253: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29254: LD_ADDR_VAR 0 2
29258: PUSH
29259: LD_INT 22
29261: PUSH
29262: LD_OWVAR 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 21
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PPUSH
29285: CALL_OW 69
29289: PUSH
29290: FOR_IN
29291: IFFALSE 29332
// begin for j := 1 to 4 do
29293: LD_ADDR_VAR 0 3
29297: PUSH
29298: DOUBLE
29299: LD_INT 1
29301: DEC
29302: ST_TO_ADDR
29303: LD_INT 4
29305: PUSH
29306: FOR_TO
29307: IFFALSE 29328
// SetSkill ( i , j , 10 ) ;
29309: LD_VAR 0 2
29313: PPUSH
29314: LD_VAR 0 3
29318: PPUSH
29319: LD_INT 10
29321: PPUSH
29322: CALL_OW 237
29326: GO 29306
29328: POP
29329: POP
// end ;
29330: GO 29290
29332: POP
29333: POP
// end ;
29334: LD_VAR 0 1
29338: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29339: LD_INT 0
29341: PPUSH
// uc_side := your_side ;
29342: LD_ADDR_OWVAR 20
29346: PUSH
29347: LD_OWVAR 2
29351: ST_TO_ADDR
// uc_nation := nation ;
29352: LD_ADDR_OWVAR 21
29356: PUSH
29357: LD_VAR 0 1
29361: ST_TO_ADDR
// InitHc ;
29362: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29366: LD_INT 0
29368: PPUSH
29369: LD_VAR 0 2
29373: PPUSH
29374: LD_VAR 0 3
29378: PPUSH
29379: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29383: LD_VAR 0 4
29387: PPUSH
29388: LD_VAR 0 5
29392: PPUSH
29393: CALL_OW 428
29397: PUSH
29398: LD_INT 0
29400: EQUAL
29401: IFFALSE 29425
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29403: CALL_OW 44
29407: PPUSH
29408: LD_VAR 0 4
29412: PPUSH
29413: LD_VAR 0 5
29417: PPUSH
29418: LD_INT 1
29420: PPUSH
29421: CALL_OW 48
// end ;
29425: LD_VAR 0 6
29429: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29430: LD_INT 0
29432: PPUSH
29433: PPUSH
// uc_side := your_side ;
29434: LD_ADDR_OWVAR 20
29438: PUSH
29439: LD_OWVAR 2
29443: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29444: LD_VAR 0 1
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 4
29460: PUSH
29461: LD_INT 5
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: IN
29471: IFFALSE 29483
// uc_nation := nation_american else
29473: LD_ADDR_OWVAR 21
29477: PUSH
29478: LD_INT 1
29480: ST_TO_ADDR
29481: GO 29526
// if chassis in [ 11 , 12 , 13 , 14 ] then
29483: LD_VAR 0 1
29487: PUSH
29488: LD_INT 11
29490: PUSH
29491: LD_INT 12
29493: PUSH
29494: LD_INT 13
29496: PUSH
29497: LD_INT 14
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: IN
29506: IFFALSE 29518
// uc_nation := nation_arabian else
29508: LD_ADDR_OWVAR 21
29512: PUSH
29513: LD_INT 2
29515: ST_TO_ADDR
29516: GO 29526
// uc_nation := nation_russian ;
29518: LD_ADDR_OWVAR 21
29522: PUSH
29523: LD_INT 3
29525: ST_TO_ADDR
// vc_chassis := chassis ;
29526: LD_ADDR_OWVAR 37
29530: PUSH
29531: LD_VAR 0 1
29535: ST_TO_ADDR
// vc_engine := engine ;
29536: LD_ADDR_OWVAR 39
29540: PUSH
29541: LD_VAR 0 2
29545: ST_TO_ADDR
// vc_control := control ;
29546: LD_ADDR_OWVAR 38
29550: PUSH
29551: LD_VAR 0 3
29555: ST_TO_ADDR
// vc_weapon := weapon ;
29556: LD_ADDR_OWVAR 40
29560: PUSH
29561: LD_VAR 0 4
29565: ST_TO_ADDR
// un := CreateVehicle ;
29566: LD_ADDR_VAR 0 8
29570: PUSH
29571: CALL_OW 45
29575: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29576: LD_VAR 0 8
29580: PPUSH
29581: LD_INT 0
29583: PPUSH
29584: LD_INT 5
29586: PPUSH
29587: CALL_OW 12
29591: PPUSH
29592: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29596: LD_VAR 0 8
29600: PPUSH
29601: LD_VAR 0 5
29605: PPUSH
29606: LD_VAR 0 6
29610: PPUSH
29611: LD_INT 1
29613: PPUSH
29614: CALL_OW 48
// end ;
29618: LD_VAR 0 7
29622: RET
// export hInvincible ; every 1 do
29623: GO 29625
29625: DISABLE
// hInvincible := [ ] ;
29626: LD_ADDR_EXP 106
29630: PUSH
29631: EMPTY
29632: ST_TO_ADDR
29633: END
// every 10 do var i ;
29634: GO 29636
29636: DISABLE
29637: LD_INT 0
29639: PPUSH
// begin enable ;
29640: ENABLE
// if not hInvincible then
29641: LD_EXP 106
29645: NOT
29646: IFFALSE 29650
// exit ;
29648: GO 29694
// for i in hInvincible do
29650: LD_ADDR_VAR 0 1
29654: PUSH
29655: LD_EXP 106
29659: PUSH
29660: FOR_IN
29661: IFFALSE 29692
// if GetLives ( i ) < 1000 then
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 256
29672: PUSH
29673: LD_INT 1000
29675: LESS
29676: IFFALSE 29690
// SetLives ( i , 1000 ) ;
29678: LD_VAR 0 1
29682: PPUSH
29683: LD_INT 1000
29685: PPUSH
29686: CALL_OW 234
29690: GO 29660
29692: POP
29693: POP
// end ;
29694: PPOPN 1
29696: END
// export function hHackInvincible ; var i ; begin
29697: LD_INT 0
29699: PPUSH
29700: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29701: LD_ADDR_VAR 0 2
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: LD_INT 21
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 21
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: PUSH
29739: FOR_IN
29740: IFFALSE 29801
// if IsSelected ( i ) then
29742: LD_VAR 0 2
29746: PPUSH
29747: CALL_OW 306
29751: IFFALSE 29799
// begin if i in hInvincible then
29753: LD_VAR 0 2
29757: PUSH
29758: LD_EXP 106
29762: IN
29763: IFFALSE 29783
// hInvincible := hInvincible diff i else
29765: LD_ADDR_EXP 106
29769: PUSH
29770: LD_EXP 106
29774: PUSH
29775: LD_VAR 0 2
29779: DIFF
29780: ST_TO_ADDR
29781: GO 29799
// hInvincible := hInvincible union i ;
29783: LD_ADDR_EXP 106
29787: PUSH
29788: LD_EXP 106
29792: PUSH
29793: LD_VAR 0 2
29797: UNION
29798: ST_TO_ADDR
// end ;
29799: GO 29739
29801: POP
29802: POP
// end ;
29803: LD_VAR 0 1
29807: RET
// export function hHackInvisible ; var i , j ; begin
29808: LD_INT 0
29810: PPUSH
29811: PPUSH
29812: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29813: LD_ADDR_VAR 0 2
29817: PUSH
29818: LD_INT 21
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PPUSH
29828: CALL_OW 69
29832: PUSH
29833: FOR_IN
29834: IFFALSE 29858
// if IsSelected ( i ) then
29836: LD_VAR 0 2
29840: PPUSH
29841: CALL_OW 306
29845: IFFALSE 29856
// ComForceInvisible ( i ) ;
29847: LD_VAR 0 2
29851: PPUSH
29852: CALL_OW 496
29856: GO 29833
29858: POP
29859: POP
// end ;
29860: LD_VAR 0 1
29864: RET
// export function hHackChangeYourSide ; begin
29865: LD_INT 0
29867: PPUSH
// if your_side = 8 then
29868: LD_OWVAR 2
29872: PUSH
29873: LD_INT 8
29875: EQUAL
29876: IFFALSE 29888
// your_side := 0 else
29878: LD_ADDR_OWVAR 2
29882: PUSH
29883: LD_INT 0
29885: ST_TO_ADDR
29886: GO 29902
// your_side := your_side + 1 ;
29888: LD_ADDR_OWVAR 2
29892: PUSH
29893: LD_OWVAR 2
29897: PUSH
29898: LD_INT 1
29900: PLUS
29901: ST_TO_ADDR
// end ;
29902: LD_VAR 0 1
29906: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29907: LD_INT 0
29909: PPUSH
29910: PPUSH
29911: PPUSH
// for i in all_units do
29912: LD_ADDR_VAR 0 2
29916: PUSH
29917: LD_OWVAR 3
29921: PUSH
29922: FOR_IN
29923: IFFALSE 30001
// if IsSelected ( i ) then
29925: LD_VAR 0 2
29929: PPUSH
29930: CALL_OW 306
29934: IFFALSE 29999
// begin j := GetSide ( i ) ;
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_VAR 0 2
29945: PPUSH
29946: CALL_OW 255
29950: ST_TO_ADDR
// if j = 8 then
29951: LD_VAR 0 3
29955: PUSH
29956: LD_INT 8
29958: EQUAL
29959: IFFALSE 29971
// j := 0 else
29961: LD_ADDR_VAR 0 3
29965: PUSH
29966: LD_INT 0
29968: ST_TO_ADDR
29969: GO 29985
// j := j + 1 ;
29971: LD_ADDR_VAR 0 3
29975: PUSH
29976: LD_VAR 0 3
29980: PUSH
29981: LD_INT 1
29983: PLUS
29984: ST_TO_ADDR
// SetSide ( i , j ) ;
29985: LD_VAR 0 2
29989: PPUSH
29990: LD_VAR 0 3
29994: PPUSH
29995: CALL_OW 235
// end ;
29999: GO 29922
30001: POP
30002: POP
// end ;
30003: LD_VAR 0 1
30007: RET
// export function hHackFog ; begin
30008: LD_INT 0
30010: PPUSH
// FogOff ( true ) ;
30011: LD_INT 1
30013: PPUSH
30014: CALL_OW 344
// end ;
30018: LD_VAR 0 1
30022: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30023: LD_INT 0
30025: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30026: LD_VAR 0 1
30030: PPUSH
30031: LD_VAR 0 2
30035: PPUSH
30036: LD_VAR 0 3
30040: PPUSH
30041: LD_INT 1
30043: PPUSH
30044: LD_INT 1
30046: PPUSH
30047: CALL_OW 483
// CenterOnXY ( x , y ) ;
30051: LD_VAR 0 2
30055: PPUSH
30056: LD_VAR 0 3
30060: PPUSH
30061: CALL_OW 84
// end ; end_of_file
30065: LD_VAR 0 4
30069: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
30070: LD_VAR 0 1
30074: PUSH
30075: LD_INT 200
30077: DOUBLE
30078: GREATEREQUAL
30079: IFFALSE 30087
30081: LD_INT 299
30083: DOUBLE
30084: LESSEQUAL
30085: IFTRUE 30089
30087: GO 30121
30089: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
30090: LD_VAR 0 1
30094: PPUSH
30095: LD_VAR 0 2
30099: PPUSH
30100: LD_VAR 0 3
30104: PPUSH
30105: LD_VAR 0 4
30109: PPUSH
30110: LD_VAR 0 5
30114: PPUSH
30115: CALL 30365 0 5
30119: GO 30198
30121: LD_INT 300
30123: DOUBLE
30124: GREATEREQUAL
30125: IFFALSE 30133
30127: LD_INT 399
30129: DOUBLE
30130: LESSEQUAL
30131: IFTRUE 30135
30133: GO 30197
30135: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
30136: LD_VAR 0 1
30140: PPUSH
30141: LD_VAR 0 2
30145: PPUSH
30146: LD_VAR 0 3
30150: PPUSH
30151: LD_VAR 0 4
30155: PPUSH
30156: LD_VAR 0 5
30160: PPUSH
30161: LD_VAR 0 6
30165: PPUSH
30166: LD_VAR 0 7
30170: PPUSH
30171: LD_VAR 0 8
30175: PPUSH
30176: LD_VAR 0 9
30180: PPUSH
30181: LD_VAR 0 10
30185: PPUSH
30186: LD_VAR 0 11
30190: PPUSH
30191: CALL 28090 0 11
30195: GO 30198
30197: POP
// end ;
30198: PPOPN 11
30200: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
30201: LD_VAR 0 1
30205: PPUSH
30206: LD_VAR 0 2
30210: PPUSH
30211: LD_VAR 0 3
30215: PPUSH
30216: LD_VAR 0 4
30220: PPUSH
30221: LD_VAR 0 5
30225: PPUSH
30226: CALL 30347 0 5
// end ; end_of_file
30230: PPOPN 5
30232: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30233: LD_INT 0
30235: PPUSH
30236: PPUSH
30237: PPUSH
30238: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 264
30248: PUSH
30249: LD_EXP 123
30253: EQUAL
30254: IFFALSE 30326
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30256: LD_INT 68
30258: PPUSH
30259: LD_VAR 0 1
30263: PPUSH
30264: CALL_OW 255
30268: PPUSH
30269: CALL_OW 321
30273: PUSH
30274: LD_INT 2
30276: EQUAL
30277: IFFALSE 30289
// eff := 70 else
30279: LD_ADDR_VAR 0 4
30283: PUSH
30284: LD_INT 70
30286: ST_TO_ADDR
30287: GO 30297
// eff := 30 ;
30289: LD_ADDR_VAR 0 4
30293: PUSH
30294: LD_INT 30
30296: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 250
30306: PPUSH
30307: LD_VAR 0 1
30311: PPUSH
30312: CALL_OW 251
30316: PPUSH
30317: LD_VAR 0 4
30321: PPUSH
30322: CALL_OW 495
// end ; end ;
30326: LD_VAR 0 2
30330: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30331: LD_INT 0
30333: PPUSH
// end ;
30334: LD_VAR 0 4
30338: RET
// export function SOS_Command ( cmd ) ; begin
30339: LD_INT 0
30341: PPUSH
// end ;
30342: LD_VAR 0 2
30346: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30347: LD_INT 0
30349: PPUSH
// if cmd = 121 then
30350: LD_VAR 0 1
30354: PUSH
30355: LD_INT 121
30357: EQUAL
30358: IFFALSE 30360
// end ;
30360: LD_VAR 0 6
30364: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
30365: LD_INT 0
30367: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
30368: LD_VAR 0 1
30372: PUSH
30373: LD_INT 250
30375: EQUAL
30376: PUSH
30377: LD_VAR 0 2
30381: PPUSH
30382: CALL_OW 264
30386: PUSH
30387: LD_EXP 126
30391: EQUAL
30392: AND
30393: IFFALSE 30414
// MinerPlaceMine ( unit , x , y ) ;
30395: LD_VAR 0 2
30399: PPUSH
30400: LD_VAR 0 4
30404: PPUSH
30405: LD_VAR 0 5
30409: PPUSH
30410: CALL 32763 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
30414: LD_VAR 0 1
30418: PUSH
30419: LD_INT 251
30421: EQUAL
30422: PUSH
30423: LD_VAR 0 2
30427: PPUSH
30428: CALL_OW 264
30432: PUSH
30433: LD_EXP 126
30437: EQUAL
30438: AND
30439: IFFALSE 30460
// MinerDetonateMine ( unit , x , y ) ;
30441: LD_VAR 0 2
30445: PPUSH
30446: LD_VAR 0 4
30450: PPUSH
30451: LD_VAR 0 5
30455: PPUSH
30456: CALL 33040 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30460: LD_VAR 0 1
30464: PUSH
30465: LD_INT 252
30467: EQUAL
30468: PUSH
30469: LD_VAR 0 2
30473: PPUSH
30474: CALL_OW 264
30478: PUSH
30479: LD_EXP 126
30483: EQUAL
30484: AND
30485: IFFALSE 30506
// MinerCreateMinefield ( unit , x , y ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_VAR 0 4
30496: PPUSH
30497: LD_VAR 0 5
30501: PPUSH
30502: CALL 33457 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30506: LD_VAR 0 1
30510: PUSH
30511: LD_INT 253
30513: EQUAL
30514: PUSH
30515: LD_VAR 0 2
30519: PPUSH
30520: CALL_OW 257
30524: PUSH
30525: LD_INT 5
30527: EQUAL
30528: AND
30529: IFFALSE 30550
// ComBinocular ( unit , x , y ) ;
30531: LD_VAR 0 2
30535: PPUSH
30536: LD_VAR 0 4
30540: PPUSH
30541: LD_VAR 0 5
30545: PPUSH
30546: CALL 33828 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30550: LD_VAR 0 1
30554: PUSH
30555: LD_INT 254
30557: EQUAL
30558: PUSH
30559: LD_VAR 0 2
30563: PPUSH
30564: CALL_OW 264
30568: PUSH
30569: LD_EXP 121
30573: EQUAL
30574: AND
30575: PUSH
30576: LD_VAR 0 3
30580: PPUSH
30581: CALL_OW 263
30585: PUSH
30586: LD_INT 3
30588: EQUAL
30589: AND
30590: IFFALSE 30606
// HackDestroyVehicle ( unit , selectedUnit ) ;
30592: LD_VAR 0 2
30596: PPUSH
30597: LD_VAR 0 3
30601: PPUSH
30602: CALL 32123 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30606: LD_VAR 0 1
30610: PUSH
30611: LD_INT 255
30613: EQUAL
30614: PUSH
30615: LD_VAR 0 2
30619: PPUSH
30620: CALL_OW 264
30624: PUSH
30625: LD_INT 14
30627: PUSH
30628: LD_INT 53
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: IN
30635: AND
30636: PUSH
30637: LD_VAR 0 4
30641: PPUSH
30642: LD_VAR 0 5
30646: PPUSH
30647: CALL_OW 488
30651: AND
30652: IFFALSE 30676
// CutTreeXYR ( unit , x , y , 12 ) ;
30654: LD_VAR 0 2
30658: PPUSH
30659: LD_VAR 0 4
30663: PPUSH
30664: LD_VAR 0 5
30668: PPUSH
30669: LD_INT 12
30671: PPUSH
30672: CALL 30689 0 4
// end ;
30676: LD_VAR 0 6
30680: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
30681: LD_INT 0
30683: PPUSH
// end ;
30684: LD_VAR 0 4
30688: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30689: LD_INT 0
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30700: LD_VAR 0 1
30704: NOT
30705: PUSH
30706: LD_VAR 0 2
30710: PPUSH
30711: LD_VAR 0 3
30715: PPUSH
30716: CALL_OW 488
30720: NOT
30721: OR
30722: PUSH
30723: LD_VAR 0 4
30727: NOT
30728: OR
30729: IFFALSE 30733
// exit ;
30731: GO 31073
// list := [ ] ;
30733: LD_ADDR_VAR 0 13
30737: PUSH
30738: EMPTY
30739: ST_TO_ADDR
// if x - r < 0 then
30740: LD_VAR 0 2
30744: PUSH
30745: LD_VAR 0 4
30749: MINUS
30750: PUSH
30751: LD_INT 0
30753: LESS
30754: IFFALSE 30766
// min_x := 0 else
30756: LD_ADDR_VAR 0 7
30760: PUSH
30761: LD_INT 0
30763: ST_TO_ADDR
30764: GO 30782
// min_x := x - r ;
30766: LD_ADDR_VAR 0 7
30770: PUSH
30771: LD_VAR 0 2
30775: PUSH
30776: LD_VAR 0 4
30780: MINUS
30781: ST_TO_ADDR
// if y - r < 0 then
30782: LD_VAR 0 3
30786: PUSH
30787: LD_VAR 0 4
30791: MINUS
30792: PUSH
30793: LD_INT 0
30795: LESS
30796: IFFALSE 30808
// min_y := 0 else
30798: LD_ADDR_VAR 0 8
30802: PUSH
30803: LD_INT 0
30805: ST_TO_ADDR
30806: GO 30824
// min_y := y - r ;
30808: LD_ADDR_VAR 0 8
30812: PUSH
30813: LD_VAR 0 3
30817: PUSH
30818: LD_VAR 0 4
30822: MINUS
30823: ST_TO_ADDR
// max_x := x + r ;
30824: LD_ADDR_VAR 0 9
30828: PUSH
30829: LD_VAR 0 2
30833: PUSH
30834: LD_VAR 0 4
30838: PLUS
30839: ST_TO_ADDR
// max_y := y + r ;
30840: LD_ADDR_VAR 0 10
30844: PUSH
30845: LD_VAR 0 3
30849: PUSH
30850: LD_VAR 0 4
30854: PLUS
30855: ST_TO_ADDR
// for _x = min_x to max_x do
30856: LD_ADDR_VAR 0 11
30860: PUSH
30861: DOUBLE
30862: LD_VAR 0 7
30866: DEC
30867: ST_TO_ADDR
30868: LD_VAR 0 9
30872: PUSH
30873: FOR_TO
30874: IFFALSE 30991
// for _y = min_y to max_y do
30876: LD_ADDR_VAR 0 12
30880: PUSH
30881: DOUBLE
30882: LD_VAR 0 8
30886: DEC
30887: ST_TO_ADDR
30888: LD_VAR 0 10
30892: PUSH
30893: FOR_TO
30894: IFFALSE 30987
// begin if not ValidHex ( _x , _y ) then
30896: LD_VAR 0 11
30900: PPUSH
30901: LD_VAR 0 12
30905: PPUSH
30906: CALL_OW 488
30910: NOT
30911: IFFALSE 30915
// continue ;
30913: GO 30893
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30915: LD_VAR 0 11
30919: PPUSH
30920: LD_VAR 0 12
30924: PPUSH
30925: CALL_OW 351
30929: PUSH
30930: LD_VAR 0 11
30934: PPUSH
30935: LD_VAR 0 12
30939: PPUSH
30940: CALL_OW 554
30944: AND
30945: IFFALSE 30985
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30947: LD_ADDR_VAR 0 13
30951: PUSH
30952: LD_VAR 0 13
30956: PPUSH
30957: LD_VAR 0 13
30961: PUSH
30962: LD_INT 1
30964: PLUS
30965: PPUSH
30966: LD_VAR 0 11
30970: PUSH
30971: LD_VAR 0 12
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PPUSH
30980: CALL_OW 2
30984: ST_TO_ADDR
// end ;
30985: GO 30893
30987: POP
30988: POP
30989: GO 30873
30991: POP
30992: POP
// if not list then
30993: LD_VAR 0 13
30997: NOT
30998: IFFALSE 31002
// exit ;
31000: GO 31073
// for i in list do
31002: LD_ADDR_VAR 0 6
31006: PUSH
31007: LD_VAR 0 13
31011: PUSH
31012: FOR_IN
31013: IFFALSE 31071
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31015: LD_VAR 0 1
31019: PPUSH
31020: LD_STRING M
31022: PUSH
31023: LD_VAR 0 6
31027: PUSH
31028: LD_INT 1
31030: ARRAY
31031: PUSH
31032: LD_VAR 0 6
31036: PUSH
31037: LD_INT 2
31039: ARRAY
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: PUSH
31062: EMPTY
31063: LIST
31064: PPUSH
31065: CALL_OW 447
31069: GO 31012
31071: POP
31072: POP
// end ;
31073: LD_VAR 0 5
31077: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31078: LD_EXP 109
31082: NOT
31083: IFFALSE 31133
31085: GO 31087
31087: DISABLE
// begin initHack := true ;
31088: LD_ADDR_EXP 109
31092: PUSH
31093: LD_INT 1
31095: ST_TO_ADDR
// hackTanks := [ ] ;
31096: LD_ADDR_EXP 110
31100: PUSH
31101: EMPTY
31102: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31103: LD_ADDR_EXP 111
31107: PUSH
31108: EMPTY
31109: ST_TO_ADDR
// hackLimit := 3 ;
31110: LD_ADDR_EXP 112
31114: PUSH
31115: LD_INT 3
31117: ST_TO_ADDR
// hackDist := 12 ;
31118: LD_ADDR_EXP 113
31122: PUSH
31123: LD_INT 12
31125: ST_TO_ADDR
// hackCounter := [ ] ;
31126: LD_ADDR_EXP 114
31130: PUSH
31131: EMPTY
31132: ST_TO_ADDR
// end ;
31133: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31134: LD_EXP 109
31138: PUSH
31139: LD_INT 34
31141: PUSH
31142: LD_EXP 121
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PPUSH
31151: CALL_OW 69
31155: AND
31156: IFFALSE 31411
31158: GO 31160
31160: DISABLE
31161: LD_INT 0
31163: PPUSH
31164: PPUSH
// begin enable ;
31165: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31166: LD_ADDR_VAR 0 1
31170: PUSH
31171: LD_INT 34
31173: PUSH
31174: LD_EXP 121
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PPUSH
31183: CALL_OW 69
31187: PUSH
31188: FOR_IN
31189: IFFALSE 31409
// begin if not i in hackTanks then
31191: LD_VAR 0 1
31195: PUSH
31196: LD_EXP 110
31200: IN
31201: NOT
31202: IFFALSE 31285
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31204: LD_ADDR_EXP 110
31208: PUSH
31209: LD_EXP 110
31213: PPUSH
31214: LD_EXP 110
31218: PUSH
31219: LD_INT 1
31221: PLUS
31222: PPUSH
31223: LD_VAR 0 1
31227: PPUSH
31228: CALL_OW 1
31232: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31233: LD_ADDR_EXP 111
31237: PUSH
31238: LD_EXP 111
31242: PPUSH
31243: LD_EXP 111
31247: PUSH
31248: LD_INT 1
31250: PLUS
31251: PPUSH
31252: EMPTY
31253: PPUSH
31254: CALL_OW 1
31258: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31259: LD_ADDR_EXP 114
31263: PUSH
31264: LD_EXP 114
31268: PPUSH
31269: LD_EXP 114
31273: PUSH
31274: LD_INT 1
31276: PLUS
31277: PPUSH
31278: EMPTY
31279: PPUSH
31280: CALL_OW 1
31284: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31285: LD_VAR 0 1
31289: PPUSH
31290: CALL_OW 302
31294: NOT
31295: IFFALSE 31308
// begin HackUnlinkAll ( i ) ;
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL 31414 0 1
// continue ;
31306: GO 31188
// end ; HackCheckCapturedStatus ( i ) ;
31308: LD_VAR 0 1
31312: PPUSH
31313: CALL 31857 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31317: LD_ADDR_VAR 0 2
31321: PUSH
31322: LD_INT 81
31324: PUSH
31325: LD_VAR 0 1
31329: PPUSH
31330: CALL_OW 255
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 33
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 91
31351: PUSH
31352: LD_VAR 0 1
31356: PUSH
31357: LD_EXP 113
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 50
31369: PUSH
31370: EMPTY
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: PPUSH
31379: CALL_OW 69
31383: ST_TO_ADDR
// if not tmp then
31384: LD_VAR 0 2
31388: NOT
31389: IFFALSE 31393
// continue ;
31391: GO 31188
// HackLink ( i , tmp ) ;
31393: LD_VAR 0 1
31397: PPUSH
31398: LD_VAR 0 2
31402: PPUSH
31403: CALL 31550 0 2
// end ;
31407: GO 31188
31409: POP
31410: POP
// end ;
31411: PPOPN 2
31413: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31414: LD_INT 0
31416: PPUSH
31417: PPUSH
31418: PPUSH
// if not hack in hackTanks then
31419: LD_VAR 0 1
31423: PUSH
31424: LD_EXP 110
31428: IN
31429: NOT
31430: IFFALSE 31434
// exit ;
31432: GO 31545
// index := GetElementIndex ( hackTanks , hack ) ;
31434: LD_ADDR_VAR 0 4
31438: PUSH
31439: LD_EXP 110
31443: PPUSH
31444: LD_VAR 0 1
31448: PPUSH
31449: CALL 39187 0 2
31453: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31454: LD_EXP 111
31458: PUSH
31459: LD_VAR 0 4
31463: ARRAY
31464: IFFALSE 31545
// begin for i in hackTanksCaptured [ index ] do
31466: LD_ADDR_VAR 0 3
31470: PUSH
31471: LD_EXP 111
31475: PUSH
31476: LD_VAR 0 4
31480: ARRAY
31481: PUSH
31482: FOR_IN
31483: IFFALSE 31509
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31485: LD_VAR 0 3
31489: PUSH
31490: LD_INT 1
31492: ARRAY
31493: PPUSH
31494: LD_VAR 0 3
31498: PUSH
31499: LD_INT 2
31501: ARRAY
31502: PPUSH
31503: CALL_OW 235
31507: GO 31482
31509: POP
31510: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31511: LD_ADDR_EXP 111
31515: PUSH
31516: LD_EXP 111
31520: PPUSH
31521: LD_VAR 0 4
31525: PPUSH
31526: EMPTY
31527: PPUSH
31528: CALL_OW 1
31532: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31533: LD_VAR 0 1
31537: PPUSH
31538: LD_INT 0
31540: PPUSH
31541: CALL_OW 505
// end ; end ;
31545: LD_VAR 0 2
31549: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31550: LD_INT 0
31552: PPUSH
31553: PPUSH
31554: PPUSH
// if not hack in hackTanks or not vehicles then
31555: LD_VAR 0 1
31559: PUSH
31560: LD_EXP 110
31564: IN
31565: NOT
31566: PUSH
31567: LD_VAR 0 2
31571: NOT
31572: OR
31573: IFFALSE 31577
// exit ;
31575: GO 31852
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31577: LD_ADDR_VAR 0 2
31581: PUSH
31582: LD_VAR 0 1
31586: PPUSH
31587: LD_VAR 0 2
31591: PPUSH
31592: LD_INT 1
31594: PPUSH
31595: LD_INT 1
31597: PPUSH
31598: CALL 39837 0 4
31602: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31603: LD_ADDR_VAR 0 5
31607: PUSH
31608: LD_EXP 110
31612: PPUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL 39187 0 2
31622: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31623: LD_EXP 111
31627: PUSH
31628: LD_VAR 0 5
31632: ARRAY
31633: PUSH
31634: LD_EXP 112
31638: LESS
31639: IFFALSE 31828
// begin for i := 1 to vehicles do
31641: LD_ADDR_VAR 0 4
31645: PUSH
31646: DOUBLE
31647: LD_INT 1
31649: DEC
31650: ST_TO_ADDR
31651: LD_VAR 0 2
31655: PUSH
31656: FOR_TO
31657: IFFALSE 31826
// begin if hackTanksCaptured [ index ] = hackLimit then
31659: LD_EXP 111
31663: PUSH
31664: LD_VAR 0 5
31668: ARRAY
31669: PUSH
31670: LD_EXP 112
31674: EQUAL
31675: IFFALSE 31679
// break ;
31677: GO 31826
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31679: LD_ADDR_EXP 114
31683: PUSH
31684: LD_EXP 114
31688: PPUSH
31689: LD_VAR 0 5
31693: PPUSH
31694: LD_EXP 114
31698: PUSH
31699: LD_VAR 0 5
31703: ARRAY
31704: PUSH
31705: LD_INT 1
31707: PLUS
31708: PPUSH
31709: CALL_OW 1
31713: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31714: LD_ADDR_EXP 111
31718: PUSH
31719: LD_EXP 111
31723: PPUSH
31724: LD_VAR 0 5
31728: PUSH
31729: LD_EXP 111
31733: PUSH
31734: LD_VAR 0 5
31738: ARRAY
31739: PUSH
31740: LD_INT 1
31742: PLUS
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PPUSH
31748: LD_VAR 0 2
31752: PUSH
31753: LD_VAR 0 4
31757: ARRAY
31758: PUSH
31759: LD_VAR 0 2
31763: PUSH
31764: LD_VAR 0 4
31768: ARRAY
31769: PPUSH
31770: CALL_OW 255
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PPUSH
31779: CALL 39402 0 3
31783: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31784: LD_VAR 0 2
31788: PUSH
31789: LD_VAR 0 4
31793: ARRAY
31794: PPUSH
31795: LD_VAR 0 1
31799: PPUSH
31800: CALL_OW 255
31804: PPUSH
31805: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31809: LD_VAR 0 2
31813: PUSH
31814: LD_VAR 0 4
31818: ARRAY
31819: PPUSH
31820: CALL_OW 141
// end ;
31824: GO 31656
31826: POP
31827: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31828: LD_VAR 0 1
31832: PPUSH
31833: LD_EXP 111
31837: PUSH
31838: LD_VAR 0 5
31842: ARRAY
31843: PUSH
31844: LD_INT 0
31846: PLUS
31847: PPUSH
31848: CALL_OW 505
// end ;
31852: LD_VAR 0 3
31856: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31857: LD_INT 0
31859: PPUSH
31860: PPUSH
31861: PPUSH
31862: PPUSH
// if not hack in hackTanks then
31863: LD_VAR 0 1
31867: PUSH
31868: LD_EXP 110
31872: IN
31873: NOT
31874: IFFALSE 31878
// exit ;
31876: GO 32118
// index := GetElementIndex ( hackTanks , hack ) ;
31878: LD_ADDR_VAR 0 4
31882: PUSH
31883: LD_EXP 110
31887: PPUSH
31888: LD_VAR 0 1
31892: PPUSH
31893: CALL 39187 0 2
31897: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31898: LD_ADDR_VAR 0 3
31902: PUSH
31903: DOUBLE
31904: LD_EXP 111
31908: PUSH
31909: LD_VAR 0 4
31913: ARRAY
31914: INC
31915: ST_TO_ADDR
31916: LD_INT 1
31918: PUSH
31919: FOR_DOWNTO
31920: IFFALSE 32092
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31922: LD_ADDR_VAR 0 5
31926: PUSH
31927: LD_EXP 111
31931: PUSH
31932: LD_VAR 0 4
31936: ARRAY
31937: PUSH
31938: LD_VAR 0 3
31942: ARRAY
31943: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31944: LD_VAR 0 5
31948: PUSH
31949: LD_INT 1
31951: ARRAY
31952: PPUSH
31953: CALL_OW 302
31957: NOT
31958: PUSH
31959: LD_VAR 0 5
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: PPUSH
31968: CALL_OW 255
31972: PUSH
31973: LD_VAR 0 1
31977: PPUSH
31978: CALL_OW 255
31982: NONEQUAL
31983: OR
31984: IFFALSE 32090
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31986: LD_VAR 0 5
31990: PUSH
31991: LD_INT 1
31993: ARRAY
31994: PPUSH
31995: CALL_OW 305
31999: PUSH
32000: LD_VAR 0 5
32004: PUSH
32005: LD_INT 1
32007: ARRAY
32008: PPUSH
32009: CALL_OW 255
32013: PUSH
32014: LD_VAR 0 1
32018: PPUSH
32019: CALL_OW 255
32023: EQUAL
32024: AND
32025: IFFALSE 32049
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32027: LD_VAR 0 5
32031: PUSH
32032: LD_INT 1
32034: ARRAY
32035: PPUSH
32036: LD_VAR 0 5
32040: PUSH
32041: LD_INT 2
32043: ARRAY
32044: PPUSH
32045: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32049: LD_ADDR_EXP 111
32053: PUSH
32054: LD_EXP 111
32058: PPUSH
32059: LD_VAR 0 4
32063: PPUSH
32064: LD_EXP 111
32068: PUSH
32069: LD_VAR 0 4
32073: ARRAY
32074: PPUSH
32075: LD_VAR 0 3
32079: PPUSH
32080: CALL_OW 3
32084: PPUSH
32085: CALL_OW 1
32089: ST_TO_ADDR
// end ; end ;
32090: GO 31919
32092: POP
32093: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32094: LD_VAR 0 1
32098: PPUSH
32099: LD_EXP 111
32103: PUSH
32104: LD_VAR 0 4
32108: ARRAY
32109: PUSH
32110: LD_INT 0
32112: PLUS
32113: PPUSH
32114: CALL_OW 505
// end ;
32118: LD_VAR 0 2
32122: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32123: LD_INT 0
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
// if not hack in hackTanks then
32129: LD_VAR 0 1
32133: PUSH
32134: LD_EXP 110
32138: IN
32139: NOT
32140: IFFALSE 32144
// exit ;
32142: GO 32229
// index := GetElementIndex ( hackTanks , hack ) ;
32144: LD_ADDR_VAR 0 5
32148: PUSH
32149: LD_EXP 110
32153: PPUSH
32154: LD_VAR 0 1
32158: PPUSH
32159: CALL 39187 0 2
32163: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32164: LD_ADDR_VAR 0 4
32168: PUSH
32169: DOUBLE
32170: LD_INT 1
32172: DEC
32173: ST_TO_ADDR
32174: LD_EXP 111
32178: PUSH
32179: LD_VAR 0 5
32183: ARRAY
32184: PUSH
32185: FOR_TO
32186: IFFALSE 32227
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32188: LD_EXP 111
32192: PUSH
32193: LD_VAR 0 5
32197: ARRAY
32198: PUSH
32199: LD_VAR 0 4
32203: ARRAY
32204: PUSH
32205: LD_INT 1
32207: ARRAY
32208: PUSH
32209: LD_VAR 0 2
32213: EQUAL
32214: IFFALSE 32225
// KillUnit ( vehicle ) ;
32216: LD_VAR 0 2
32220: PPUSH
32221: CALL_OW 66
32225: GO 32185
32227: POP
32228: POP
// end ;
32229: LD_VAR 0 3
32233: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32234: LD_EXP 115
32238: NOT
32239: IFFALSE 32274
32241: GO 32243
32243: DISABLE
// begin initMiner := true ;
32244: LD_ADDR_EXP 115
32248: PUSH
32249: LD_INT 1
32251: ST_TO_ADDR
// minersList := [ ] ;
32252: LD_ADDR_EXP 116
32256: PUSH
32257: EMPTY
32258: ST_TO_ADDR
// minerMinesList := [ ] ;
32259: LD_ADDR_EXP 117
32263: PUSH
32264: EMPTY
32265: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32266: LD_ADDR_EXP 118
32270: PUSH
32271: LD_INT 5
32273: ST_TO_ADDR
// end ;
32274: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32275: LD_EXP 115
32279: PUSH
32280: LD_INT 34
32282: PUSH
32283: LD_EXP 126
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PPUSH
32292: CALL_OW 69
32296: AND
32297: IFFALSE 32760
32299: GO 32301
32301: DISABLE
32302: LD_INT 0
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
// begin enable ;
32308: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32309: LD_ADDR_VAR 0 1
32313: PUSH
32314: LD_INT 34
32316: PUSH
32317: LD_EXP 126
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PPUSH
32326: CALL_OW 69
32330: PUSH
32331: FOR_IN
32332: IFFALSE 32404
// begin if not i in minersList then
32334: LD_VAR 0 1
32338: PUSH
32339: LD_EXP 116
32343: IN
32344: NOT
32345: IFFALSE 32402
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32347: LD_ADDR_EXP 116
32351: PUSH
32352: LD_EXP 116
32356: PPUSH
32357: LD_EXP 116
32361: PUSH
32362: LD_INT 1
32364: PLUS
32365: PPUSH
32366: LD_VAR 0 1
32370: PPUSH
32371: CALL_OW 1
32375: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32376: LD_ADDR_EXP 117
32380: PUSH
32381: LD_EXP 117
32385: PPUSH
32386: LD_EXP 117
32390: PUSH
32391: LD_INT 1
32393: PLUS
32394: PPUSH
32395: EMPTY
32396: PPUSH
32397: CALL_OW 1
32401: ST_TO_ADDR
// end end ;
32402: GO 32331
32404: POP
32405: POP
// for i := minerMinesList downto 1 do
32406: LD_ADDR_VAR 0 1
32410: PUSH
32411: DOUBLE
32412: LD_EXP 117
32416: INC
32417: ST_TO_ADDR
32418: LD_INT 1
32420: PUSH
32421: FOR_DOWNTO
32422: IFFALSE 32758
// begin if IsLive ( minersList [ i ] ) then
32424: LD_EXP 116
32428: PUSH
32429: LD_VAR 0 1
32433: ARRAY
32434: PPUSH
32435: CALL_OW 300
32439: IFFALSE 32467
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32441: LD_EXP 116
32445: PUSH
32446: LD_VAR 0 1
32450: ARRAY
32451: PPUSH
32452: LD_EXP 117
32456: PUSH
32457: LD_VAR 0 1
32461: ARRAY
32462: PPUSH
32463: CALL_OW 505
// if not minerMinesList [ i ] then
32467: LD_EXP 117
32471: PUSH
32472: LD_VAR 0 1
32476: ARRAY
32477: NOT
32478: IFFALSE 32482
// continue ;
32480: GO 32421
// for j := minerMinesList [ i ] downto 1 do
32482: LD_ADDR_VAR 0 2
32486: PUSH
32487: DOUBLE
32488: LD_EXP 117
32492: PUSH
32493: LD_VAR 0 1
32497: ARRAY
32498: INC
32499: ST_TO_ADDR
32500: LD_INT 1
32502: PUSH
32503: FOR_DOWNTO
32504: IFFALSE 32754
// begin side := GetSide ( minersList [ i ] ) ;
32506: LD_ADDR_VAR 0 3
32510: PUSH
32511: LD_EXP 116
32515: PUSH
32516: LD_VAR 0 1
32520: ARRAY
32521: PPUSH
32522: CALL_OW 255
32526: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32527: LD_ADDR_VAR 0 4
32531: PUSH
32532: LD_EXP 117
32536: PUSH
32537: LD_VAR 0 1
32541: ARRAY
32542: PUSH
32543: LD_VAR 0 2
32547: ARRAY
32548: PUSH
32549: LD_INT 1
32551: ARRAY
32552: PPUSH
32553: LD_EXP 117
32557: PUSH
32558: LD_VAR 0 1
32562: ARRAY
32563: PUSH
32564: LD_VAR 0 2
32568: ARRAY
32569: PUSH
32570: LD_INT 2
32572: ARRAY
32573: PPUSH
32574: CALL_OW 428
32578: ST_TO_ADDR
// if not tmp then
32579: LD_VAR 0 4
32583: NOT
32584: IFFALSE 32588
// continue ;
32586: GO 32503
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32588: LD_VAR 0 4
32592: PUSH
32593: LD_INT 81
32595: PUSH
32596: LD_VAR 0 3
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PPUSH
32605: CALL_OW 69
32609: IN
32610: PUSH
32611: LD_EXP 117
32615: PUSH
32616: LD_VAR 0 1
32620: ARRAY
32621: PUSH
32622: LD_VAR 0 2
32626: ARRAY
32627: PUSH
32628: LD_INT 1
32630: ARRAY
32631: PPUSH
32632: LD_EXP 117
32636: PUSH
32637: LD_VAR 0 1
32641: ARRAY
32642: PUSH
32643: LD_VAR 0 2
32647: ARRAY
32648: PUSH
32649: LD_INT 2
32651: ARRAY
32652: PPUSH
32653: CALL_OW 458
32657: AND
32658: IFFALSE 32752
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32660: LD_EXP 117
32664: PUSH
32665: LD_VAR 0 1
32669: ARRAY
32670: PUSH
32671: LD_VAR 0 2
32675: ARRAY
32676: PUSH
32677: LD_INT 1
32679: ARRAY
32680: PPUSH
32681: LD_EXP 117
32685: PUSH
32686: LD_VAR 0 1
32690: ARRAY
32691: PUSH
32692: LD_VAR 0 2
32696: ARRAY
32697: PUSH
32698: LD_INT 2
32700: ARRAY
32701: PPUSH
32702: LD_VAR 0 3
32706: PPUSH
32707: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32711: LD_ADDR_EXP 117
32715: PUSH
32716: LD_EXP 117
32720: PPUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: LD_EXP 117
32730: PUSH
32731: LD_VAR 0 1
32735: ARRAY
32736: PPUSH
32737: LD_VAR 0 2
32741: PPUSH
32742: CALL_OW 3
32746: PPUSH
32747: CALL_OW 1
32751: ST_TO_ADDR
// end ; end ;
32752: GO 32503
32754: POP
32755: POP
// end ;
32756: GO 32421
32758: POP
32759: POP
// end ;
32760: PPOPN 4
32762: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32763: LD_INT 0
32765: PPUSH
32766: PPUSH
// result := false ;
32767: LD_ADDR_VAR 0 4
32771: PUSH
32772: LD_INT 0
32774: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 264
32784: PUSH
32785: LD_EXP 126
32789: EQUAL
32790: NOT
32791: IFFALSE 32795
// exit ;
32793: GO 33035
// index := GetElementIndex ( minersList , unit ) ;
32795: LD_ADDR_VAR 0 5
32799: PUSH
32800: LD_EXP 116
32804: PPUSH
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL 39187 0 2
32814: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32815: LD_EXP 117
32819: PUSH
32820: LD_VAR 0 5
32824: ARRAY
32825: PUSH
32826: LD_EXP 118
32830: GREATEREQUAL
32831: IFFALSE 32835
// exit ;
32833: GO 33035
// ComMoveXY ( unit , x , y ) ;
32835: LD_VAR 0 1
32839: PPUSH
32840: LD_VAR 0 2
32844: PPUSH
32845: LD_VAR 0 3
32849: PPUSH
32850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32854: LD_INT 35
32856: PPUSH
32857: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32861: LD_VAR 0 1
32865: PPUSH
32866: LD_VAR 0 2
32870: PPUSH
32871: LD_VAR 0 3
32875: PPUSH
32876: CALL 69960 0 3
32880: NOT
32881: PUSH
32882: LD_VAR 0 1
32886: PPUSH
32887: CALL_OW 314
32891: AND
32892: IFFALSE 32896
// exit ;
32894: GO 33035
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32896: LD_VAR 0 2
32900: PPUSH
32901: LD_VAR 0 3
32905: PPUSH
32906: CALL_OW 428
32910: PUSH
32911: LD_VAR 0 1
32915: EQUAL
32916: PUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 314
32926: NOT
32927: AND
32928: IFFALSE 32854
// PlaySoundXY ( x , y , PlantMine ) ;
32930: LD_VAR 0 2
32934: PPUSH
32935: LD_VAR 0 3
32939: PPUSH
32940: LD_STRING PlantMine
32942: PPUSH
32943: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32947: LD_VAR 0 2
32951: PPUSH
32952: LD_VAR 0 3
32956: PPUSH
32957: LD_VAR 0 1
32961: PPUSH
32962: CALL_OW 255
32966: PPUSH
32967: LD_INT 0
32969: PPUSH
32970: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32974: LD_ADDR_EXP 117
32978: PUSH
32979: LD_EXP 117
32983: PPUSH
32984: LD_VAR 0 5
32988: PUSH
32989: LD_EXP 117
32993: PUSH
32994: LD_VAR 0 5
32998: ARRAY
32999: PUSH
33000: LD_INT 1
33002: PLUS
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PPUSH
33008: LD_VAR 0 2
33012: PUSH
33013: LD_VAR 0 3
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PPUSH
33022: CALL 39402 0 3
33026: ST_TO_ADDR
// result := true ;
33027: LD_ADDR_VAR 0 4
33031: PUSH
33032: LD_INT 1
33034: ST_TO_ADDR
// end ;
33035: LD_VAR 0 4
33039: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33040: LD_INT 0
33042: PPUSH
33043: PPUSH
33044: PPUSH
// if not unit in minersList then
33045: LD_VAR 0 1
33049: PUSH
33050: LD_EXP 116
33054: IN
33055: NOT
33056: IFFALSE 33060
// exit ;
33058: GO 33452
// index := GetElementIndex ( minersList , unit ) ;
33060: LD_ADDR_VAR 0 6
33064: PUSH
33065: LD_EXP 116
33069: PPUSH
33070: LD_VAR 0 1
33074: PPUSH
33075: CALL 39187 0 2
33079: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33080: LD_ADDR_VAR 0 5
33084: PUSH
33085: DOUBLE
33086: LD_EXP 117
33090: PUSH
33091: LD_VAR 0 6
33095: ARRAY
33096: INC
33097: ST_TO_ADDR
33098: LD_INT 1
33100: PUSH
33101: FOR_DOWNTO
33102: IFFALSE 33263
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33104: LD_EXP 117
33108: PUSH
33109: LD_VAR 0 6
33113: ARRAY
33114: PUSH
33115: LD_VAR 0 5
33119: ARRAY
33120: PUSH
33121: LD_INT 1
33123: ARRAY
33124: PUSH
33125: LD_VAR 0 2
33129: EQUAL
33130: PUSH
33131: LD_EXP 117
33135: PUSH
33136: LD_VAR 0 6
33140: ARRAY
33141: PUSH
33142: LD_VAR 0 5
33146: ARRAY
33147: PUSH
33148: LD_INT 2
33150: ARRAY
33151: PUSH
33152: LD_VAR 0 3
33156: EQUAL
33157: AND
33158: IFFALSE 33261
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33160: LD_EXP 117
33164: PUSH
33165: LD_VAR 0 6
33169: ARRAY
33170: PUSH
33171: LD_VAR 0 5
33175: ARRAY
33176: PUSH
33177: LD_INT 1
33179: ARRAY
33180: PPUSH
33181: LD_EXP 117
33185: PUSH
33186: LD_VAR 0 6
33190: ARRAY
33191: PUSH
33192: LD_VAR 0 5
33196: ARRAY
33197: PUSH
33198: LD_INT 2
33200: ARRAY
33201: PPUSH
33202: LD_VAR 0 1
33206: PPUSH
33207: CALL_OW 255
33211: PPUSH
33212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33216: LD_ADDR_EXP 117
33220: PUSH
33221: LD_EXP 117
33225: PPUSH
33226: LD_VAR 0 6
33230: PPUSH
33231: LD_EXP 117
33235: PUSH
33236: LD_VAR 0 6
33240: ARRAY
33241: PPUSH
33242: LD_VAR 0 5
33246: PPUSH
33247: CALL_OW 3
33251: PPUSH
33252: CALL_OW 1
33256: ST_TO_ADDR
// exit ;
33257: POP
33258: POP
33259: GO 33452
// end ; end ;
33261: GO 33101
33263: POP
33264: POP
// for i := minerMinesList [ index ] downto 1 do
33265: LD_ADDR_VAR 0 5
33269: PUSH
33270: DOUBLE
33271: LD_EXP 117
33275: PUSH
33276: LD_VAR 0 6
33280: ARRAY
33281: INC
33282: ST_TO_ADDR
33283: LD_INT 1
33285: PUSH
33286: FOR_DOWNTO
33287: IFFALSE 33450
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33289: LD_EXP 117
33293: PUSH
33294: LD_VAR 0 6
33298: ARRAY
33299: PUSH
33300: LD_VAR 0 5
33304: ARRAY
33305: PUSH
33306: LD_INT 1
33308: ARRAY
33309: PPUSH
33310: LD_EXP 117
33314: PUSH
33315: LD_VAR 0 6
33319: ARRAY
33320: PUSH
33321: LD_VAR 0 5
33325: ARRAY
33326: PUSH
33327: LD_INT 2
33329: ARRAY
33330: PPUSH
33331: LD_VAR 0 2
33335: PPUSH
33336: LD_VAR 0 3
33340: PPUSH
33341: CALL_OW 298
33345: PUSH
33346: LD_INT 6
33348: LESS
33349: IFFALSE 33448
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33351: LD_EXP 117
33355: PUSH
33356: LD_VAR 0 6
33360: ARRAY
33361: PUSH
33362: LD_VAR 0 5
33366: ARRAY
33367: PUSH
33368: LD_INT 1
33370: ARRAY
33371: PPUSH
33372: LD_EXP 117
33376: PUSH
33377: LD_VAR 0 6
33381: ARRAY
33382: PUSH
33383: LD_VAR 0 5
33387: ARRAY
33388: PUSH
33389: LD_INT 2
33391: ARRAY
33392: PPUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 255
33402: PPUSH
33403: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33407: LD_ADDR_EXP 117
33411: PUSH
33412: LD_EXP 117
33416: PPUSH
33417: LD_VAR 0 6
33421: PPUSH
33422: LD_EXP 117
33426: PUSH
33427: LD_VAR 0 6
33431: ARRAY
33432: PPUSH
33433: LD_VAR 0 5
33437: PPUSH
33438: CALL_OW 3
33442: PPUSH
33443: CALL_OW 1
33447: ST_TO_ADDR
// end ; end ;
33448: GO 33286
33450: POP
33451: POP
// end ;
33452: LD_VAR 0 4
33456: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33468: LD_VAR 0 1
33472: PPUSH
33473: CALL_OW 264
33477: PUSH
33478: LD_EXP 126
33482: EQUAL
33483: NOT
33484: PUSH
33485: LD_VAR 0 1
33489: PUSH
33490: LD_EXP 116
33494: IN
33495: NOT
33496: OR
33497: IFFALSE 33501
// exit ;
33499: GO 33823
// index := GetElementIndex ( minersList , unit ) ;
33501: LD_ADDR_VAR 0 6
33505: PUSH
33506: LD_EXP 116
33510: PPUSH
33511: LD_VAR 0 1
33515: PPUSH
33516: CALL 39187 0 2
33520: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33521: LD_ADDR_VAR 0 8
33525: PUSH
33526: LD_EXP 118
33530: PUSH
33531: LD_EXP 117
33535: PUSH
33536: LD_VAR 0 6
33540: ARRAY
33541: MINUS
33542: ST_TO_ADDR
// if not minesFreeAmount then
33543: LD_VAR 0 8
33547: NOT
33548: IFFALSE 33552
// exit ;
33550: GO 33823
// tmp := [ ] ;
33552: LD_ADDR_VAR 0 7
33556: PUSH
33557: EMPTY
33558: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33559: LD_ADDR_VAR 0 5
33563: PUSH
33564: DOUBLE
33565: LD_INT 1
33567: DEC
33568: ST_TO_ADDR
33569: LD_VAR 0 8
33573: PUSH
33574: FOR_TO
33575: IFFALSE 33770
// begin _d := rand ( 0 , 5 ) ;
33577: LD_ADDR_VAR 0 11
33581: PUSH
33582: LD_INT 0
33584: PPUSH
33585: LD_INT 5
33587: PPUSH
33588: CALL_OW 12
33592: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33593: LD_ADDR_VAR 0 12
33597: PUSH
33598: LD_INT 2
33600: PPUSH
33601: LD_INT 6
33603: PPUSH
33604: CALL_OW 12
33608: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33609: LD_ADDR_VAR 0 9
33613: PUSH
33614: LD_VAR 0 2
33618: PPUSH
33619: LD_VAR 0 11
33623: PPUSH
33624: LD_VAR 0 12
33628: PPUSH
33629: CALL_OW 272
33633: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33634: LD_ADDR_VAR 0 10
33638: PUSH
33639: LD_VAR 0 3
33643: PPUSH
33644: LD_VAR 0 11
33648: PPUSH
33649: LD_VAR 0 12
33653: PPUSH
33654: CALL_OW 273
33658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33659: LD_VAR 0 9
33663: PPUSH
33664: LD_VAR 0 10
33668: PPUSH
33669: CALL_OW 488
33673: PUSH
33674: LD_VAR 0 9
33678: PUSH
33679: LD_VAR 0 10
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_VAR 0 7
33692: IN
33693: NOT
33694: AND
33695: PUSH
33696: LD_VAR 0 9
33700: PPUSH
33701: LD_VAR 0 10
33705: PPUSH
33706: CALL_OW 458
33710: NOT
33711: AND
33712: IFFALSE 33754
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33714: LD_ADDR_VAR 0 7
33718: PUSH
33719: LD_VAR 0 7
33723: PPUSH
33724: LD_VAR 0 7
33728: PUSH
33729: LD_INT 1
33731: PLUS
33732: PPUSH
33733: LD_VAR 0 9
33737: PUSH
33738: LD_VAR 0 10
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PPUSH
33747: CALL_OW 1
33751: ST_TO_ADDR
33752: GO 33768
// i := i - 1 ;
33754: LD_ADDR_VAR 0 5
33758: PUSH
33759: LD_VAR 0 5
33763: PUSH
33764: LD_INT 1
33766: MINUS
33767: ST_TO_ADDR
// end ;
33768: GO 33574
33770: POP
33771: POP
// for i in tmp do
33772: LD_ADDR_VAR 0 5
33776: PUSH
33777: LD_VAR 0 7
33781: PUSH
33782: FOR_IN
33783: IFFALSE 33821
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33785: LD_VAR 0 1
33789: PPUSH
33790: LD_VAR 0 5
33794: PUSH
33795: LD_INT 1
33797: ARRAY
33798: PPUSH
33799: LD_VAR 0 5
33803: PUSH
33804: LD_INT 2
33806: ARRAY
33807: PPUSH
33808: CALL 32763 0 3
33812: NOT
33813: IFFALSE 33819
// exit ;
33815: POP
33816: POP
33817: GO 33823
33819: GO 33782
33821: POP
33822: POP
// end ;
33823: LD_VAR 0 4
33827: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33828: LD_INT 0
33830: PPUSH
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
// if not GetClass ( unit ) = class_sniper then
33837: LD_VAR 0 1
33841: PPUSH
33842: CALL_OW 257
33846: PUSH
33847: LD_INT 5
33849: EQUAL
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 34243
// dist := 8 ;
33855: LD_ADDR_VAR 0 5
33859: PUSH
33860: LD_INT 8
33862: ST_TO_ADDR
// viewRange := 12 ;
33863: LD_ADDR_VAR 0 7
33867: PUSH
33868: LD_INT 12
33870: ST_TO_ADDR
// side := GetSide ( unit ) ;
33871: LD_ADDR_VAR 0 6
33875: PUSH
33876: LD_VAR 0 1
33880: PPUSH
33881: CALL_OW 255
33885: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33886: LD_INT 61
33888: PPUSH
33889: LD_VAR 0 6
33893: PPUSH
33894: CALL_OW 321
33898: PUSH
33899: LD_INT 2
33901: EQUAL
33902: IFFALSE 33912
// viewRange := 16 ;
33904: LD_ADDR_VAR 0 7
33908: PUSH
33909: LD_INT 16
33911: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33912: LD_VAR 0 1
33916: PPUSH
33917: LD_VAR 0 2
33921: PPUSH
33922: LD_VAR 0 3
33926: PPUSH
33927: CALL_OW 297
33931: PUSH
33932: LD_VAR 0 5
33936: GREATER
33937: IFFALSE 34016
// begin ComMoveXY ( unit , x , y ) ;
33939: LD_VAR 0 1
33943: PPUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: LD_VAR 0 3
33953: PPUSH
33954: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33958: LD_INT 35
33960: PPUSH
33961: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33965: LD_VAR 0 1
33969: PPUSH
33970: LD_VAR 0 2
33974: PPUSH
33975: LD_VAR 0 3
33979: PPUSH
33980: CALL 69960 0 3
33984: NOT
33985: IFFALSE 33989
// exit ;
33987: GO 34243
// until GetDistUnitXY ( unit , x , y ) < dist ;
33989: LD_VAR 0 1
33993: PPUSH
33994: LD_VAR 0 2
33998: PPUSH
33999: LD_VAR 0 3
34003: PPUSH
34004: CALL_OW 297
34008: PUSH
34009: LD_VAR 0 5
34013: LESS
34014: IFFALSE 33958
// end ; ComTurnXY ( unit , x , y ) ;
34016: LD_VAR 0 1
34020: PPUSH
34021: LD_VAR 0 2
34025: PPUSH
34026: LD_VAR 0 3
34030: PPUSH
34031: CALL_OW 118
// wait ( 5 ) ;
34035: LD_INT 5
34037: PPUSH
34038: CALL_OW 67
// _d := GetDir ( unit ) ;
34042: LD_ADDR_VAR 0 10
34046: PUSH
34047: LD_VAR 0 1
34051: PPUSH
34052: CALL_OW 254
34056: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34057: LD_ADDR_VAR 0 8
34061: PUSH
34062: LD_VAR 0 1
34066: PPUSH
34067: CALL_OW 250
34071: PPUSH
34072: LD_VAR 0 10
34076: PPUSH
34077: LD_VAR 0 5
34081: PPUSH
34082: CALL_OW 272
34086: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34087: LD_ADDR_VAR 0 9
34091: PUSH
34092: LD_VAR 0 1
34096: PPUSH
34097: CALL_OW 251
34101: PPUSH
34102: LD_VAR 0 10
34106: PPUSH
34107: LD_VAR 0 5
34111: PPUSH
34112: CALL_OW 273
34116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34117: LD_VAR 0 8
34121: PPUSH
34122: LD_VAR 0 9
34126: PPUSH
34127: CALL_OW 488
34131: NOT
34132: IFFALSE 34136
// exit ;
34134: GO 34243
// ComAnimCustom ( unit , 1 ) ;
34136: LD_VAR 0 1
34140: PPUSH
34141: LD_INT 1
34143: PPUSH
34144: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34148: LD_VAR 0 8
34152: PPUSH
34153: LD_VAR 0 9
34157: PPUSH
34158: LD_VAR 0 6
34162: PPUSH
34163: LD_VAR 0 7
34167: PPUSH
34168: CALL_OW 330
// repeat wait ( 1 ) ;
34172: LD_INT 1
34174: PPUSH
34175: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 316
34188: PUSH
34189: LD_VAR 0 1
34193: PPUSH
34194: CALL_OW 314
34198: OR
34199: PUSH
34200: LD_VAR 0 1
34204: PPUSH
34205: CALL_OW 302
34209: NOT
34210: OR
34211: PUSH
34212: LD_VAR 0 1
34216: PPUSH
34217: CALL_OW 301
34221: OR
34222: IFFALSE 34172
// RemoveSeeing ( _x , _y , side ) ;
34224: LD_VAR 0 8
34228: PPUSH
34229: LD_VAR 0 9
34233: PPUSH
34234: LD_VAR 0 6
34238: PPUSH
34239: CALL_OW 331
// end ; end_of_file
34243: LD_VAR 0 4
34247: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
34248: LD_INT 0
34250: PPUSH
// ar_miner := 81 ;
34251: LD_ADDR_EXP 126
34255: PUSH
34256: LD_INT 81
34258: ST_TO_ADDR
// ar_crane := 88 ;
34259: LD_ADDR_EXP 125
34263: PUSH
34264: LD_INT 88
34266: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
34267: LD_ADDR_EXP 120
34271: PUSH
34272: LD_INT 89
34274: ST_TO_ADDR
// us_hack := 99 ;
34275: LD_ADDR_EXP 121
34279: PUSH
34280: LD_INT 99
34282: ST_TO_ADDR
// us_artillery := 97 ;
34283: LD_ADDR_EXP 122
34287: PUSH
34288: LD_INT 97
34290: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34291: LD_ADDR_EXP 123
34295: PUSH
34296: LD_INT 91
34298: ST_TO_ADDR
// ar_mortar := 92 ;
34299: LD_ADDR_EXP 124
34303: PUSH
34304: LD_INT 92
34306: ST_TO_ADDR
// ru_radar := 98 ;
34307: LD_ADDR_EXP 119
34311: PUSH
34312: LD_INT 98
34314: ST_TO_ADDR
// tech_Artillery := 80 ;
34315: LD_ADDR_EXP 127
34319: PUSH
34320: LD_INT 80
34322: ST_TO_ADDR
// tech_RadMat := 81 ;
34323: LD_ADDR_EXP 128
34327: PUSH
34328: LD_INT 81
34330: ST_TO_ADDR
// tech_BasicTools := 82 ;
34331: LD_ADDR_EXP 129
34335: PUSH
34336: LD_INT 82
34338: ST_TO_ADDR
// tech_Cargo := 83 ;
34339: LD_ADDR_EXP 130
34343: PUSH
34344: LD_INT 83
34346: ST_TO_ADDR
// tech_Track := 84 ;
34347: LD_ADDR_EXP 131
34351: PUSH
34352: LD_INT 84
34354: ST_TO_ADDR
// tech_Crane := 85 ;
34355: LD_ADDR_EXP 132
34359: PUSH
34360: LD_INT 85
34362: ST_TO_ADDR
// tech_Bulldozer := 86 ;
34363: LD_ADDR_EXP 133
34367: PUSH
34368: LD_INT 86
34370: ST_TO_ADDR
// tech_Hovercraft := 87 ;
34371: LD_ADDR_EXP 134
34375: PUSH
34376: LD_INT 87
34378: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
34379: LD_ADDR_EXP 135
34383: PUSH
34384: LD_INT 88
34386: ST_TO_ADDR
// class_mastodont := 31 ;
34387: LD_ADDR_EXP 136
34391: PUSH
34392: LD_INT 31
34394: ST_TO_ADDR
// class_horse := 21 ;
34395: LD_ADDR_EXP 137
34399: PUSH
34400: LD_INT 21
34402: ST_TO_ADDR
// end ;
34403: LD_VAR 0 1
34407: RET
// every 1 do
34408: GO 34410
34410: DISABLE
// InitGlobalVariables ; end_of_file
34411: CALL 34248 0 0
34415: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34416: LD_INT 0
34418: PPUSH
34419: PPUSH
// if exist_mode then
34420: LD_VAR 0 2
34424: IFFALSE 34449
// unit := CreateCharacter ( prefix & ident ) else
34426: LD_ADDR_VAR 0 5
34430: PUSH
34431: LD_VAR 0 3
34435: PUSH
34436: LD_VAR 0 1
34440: STR
34441: PPUSH
34442: CALL_OW 34
34446: ST_TO_ADDR
34447: GO 34464
// unit := NewCharacter ( ident ) ;
34449: LD_ADDR_VAR 0 5
34453: PUSH
34454: LD_VAR 0 1
34458: PPUSH
34459: CALL_OW 25
34463: ST_TO_ADDR
// result := unit ;
34464: LD_ADDR_VAR 0 4
34468: PUSH
34469: LD_VAR 0 5
34473: ST_TO_ADDR
// end ;
34474: LD_VAR 0 4
34478: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34479: LD_INT 0
34481: PPUSH
34482: PPUSH
// if not side or not nation then
34483: LD_VAR 0 1
34487: NOT
34488: PUSH
34489: LD_VAR 0 2
34493: NOT
34494: OR
34495: IFFALSE 34499
// exit ;
34497: GO 35267
// case nation of nation_american :
34499: LD_VAR 0 2
34503: PUSH
34504: LD_INT 1
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34512
34510: GO 34726
34512: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34513: LD_ADDR_VAR 0 4
34517: PUSH
34518: LD_INT 35
34520: PUSH
34521: LD_INT 45
34523: PUSH
34524: LD_INT 46
34526: PUSH
34527: LD_INT 47
34529: PUSH
34530: LD_INT 82
34532: PUSH
34533: LD_INT 83
34535: PUSH
34536: LD_INT 84
34538: PUSH
34539: LD_INT 85
34541: PUSH
34542: LD_INT 86
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: LD_INT 6
34553: PUSH
34554: LD_INT 15
34556: PUSH
34557: LD_INT 16
34559: PUSH
34560: LD_INT 7
34562: PUSH
34563: LD_INT 12
34565: PUSH
34566: LD_INT 13
34568: PUSH
34569: LD_INT 10
34571: PUSH
34572: LD_INT 14
34574: PUSH
34575: LD_INT 20
34577: PUSH
34578: LD_INT 21
34580: PUSH
34581: LD_INT 22
34583: PUSH
34584: LD_INT 25
34586: PUSH
34587: LD_INT 32
34589: PUSH
34590: LD_INT 27
34592: PUSH
34593: LD_INT 36
34595: PUSH
34596: LD_INT 69
34598: PUSH
34599: LD_INT 39
34601: PUSH
34602: LD_INT 34
34604: PUSH
34605: LD_INT 40
34607: PUSH
34608: LD_INT 48
34610: PUSH
34611: LD_INT 49
34613: PUSH
34614: LD_INT 50
34616: PUSH
34617: LD_INT 51
34619: PUSH
34620: LD_INT 52
34622: PUSH
34623: LD_INT 53
34625: PUSH
34626: LD_INT 54
34628: PUSH
34629: LD_INT 55
34631: PUSH
34632: LD_INT 56
34634: PUSH
34635: LD_INT 57
34637: PUSH
34638: LD_INT 58
34640: PUSH
34641: LD_INT 59
34643: PUSH
34644: LD_INT 60
34646: PUSH
34647: LD_INT 61
34649: PUSH
34650: LD_INT 62
34652: PUSH
34653: LD_INT 80
34655: PUSH
34656: LD_INT 82
34658: PUSH
34659: LD_INT 83
34661: PUSH
34662: LD_INT 84
34664: PUSH
34665: LD_INT 85
34667: PUSH
34668: LD_INT 86
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: ST_TO_ADDR
34724: GO 35191
34726: LD_INT 2
34728: DOUBLE
34729: EQUAL
34730: IFTRUE 34734
34732: GO 34960
34734: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34735: LD_ADDR_VAR 0 4
34739: PUSH
34740: LD_INT 35
34742: PUSH
34743: LD_INT 45
34745: PUSH
34746: LD_INT 46
34748: PUSH
34749: LD_INT 47
34751: PUSH
34752: LD_INT 82
34754: PUSH
34755: LD_INT 83
34757: PUSH
34758: LD_INT 84
34760: PUSH
34761: LD_INT 85
34763: PUSH
34764: LD_INT 87
34766: PUSH
34767: LD_INT 70
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: LD_INT 11
34775: PUSH
34776: LD_INT 3
34778: PUSH
34779: LD_INT 4
34781: PUSH
34782: LD_INT 5
34784: PUSH
34785: LD_INT 6
34787: PUSH
34788: LD_INT 15
34790: PUSH
34791: LD_INT 18
34793: PUSH
34794: LD_INT 7
34796: PUSH
34797: LD_INT 17
34799: PUSH
34800: LD_INT 8
34802: PUSH
34803: LD_INT 20
34805: PUSH
34806: LD_INT 21
34808: PUSH
34809: LD_INT 22
34811: PUSH
34812: LD_INT 72
34814: PUSH
34815: LD_INT 26
34817: PUSH
34818: LD_INT 69
34820: PUSH
34821: LD_INT 39
34823: PUSH
34824: LD_INT 40
34826: PUSH
34827: LD_INT 41
34829: PUSH
34830: LD_INT 42
34832: PUSH
34833: LD_INT 43
34835: PUSH
34836: LD_INT 48
34838: PUSH
34839: LD_INT 49
34841: PUSH
34842: LD_INT 50
34844: PUSH
34845: LD_INT 51
34847: PUSH
34848: LD_INT 52
34850: PUSH
34851: LD_INT 53
34853: PUSH
34854: LD_INT 54
34856: PUSH
34857: LD_INT 55
34859: PUSH
34860: LD_INT 56
34862: PUSH
34863: LD_INT 60
34865: PUSH
34866: LD_INT 61
34868: PUSH
34869: LD_INT 62
34871: PUSH
34872: LD_INT 66
34874: PUSH
34875: LD_INT 67
34877: PUSH
34878: LD_INT 68
34880: PUSH
34881: LD_INT 81
34883: PUSH
34884: LD_INT 82
34886: PUSH
34887: LD_INT 83
34889: PUSH
34890: LD_INT 84
34892: PUSH
34893: LD_INT 85
34895: PUSH
34896: LD_INT 87
34898: PUSH
34899: LD_INT 88
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: ST_TO_ADDR
34958: GO 35191
34960: LD_INT 3
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 35190
34968: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34969: LD_ADDR_VAR 0 4
34973: PUSH
34974: LD_INT 46
34976: PUSH
34977: LD_INT 47
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 82
34988: PUSH
34989: LD_INT 83
34991: PUSH
34992: LD_INT 84
34994: PUSH
34995: LD_INT 85
34997: PUSH
34998: LD_INT 86
35000: PUSH
35001: LD_INT 11
35003: PUSH
35004: LD_INT 9
35006: PUSH
35007: LD_INT 20
35009: PUSH
35010: LD_INT 19
35012: PUSH
35013: LD_INT 21
35015: PUSH
35016: LD_INT 24
35018: PUSH
35019: LD_INT 22
35021: PUSH
35022: LD_INT 25
35024: PUSH
35025: LD_INT 28
35027: PUSH
35028: LD_INT 29
35030: PUSH
35031: LD_INT 30
35033: PUSH
35034: LD_INT 31
35036: PUSH
35037: LD_INT 37
35039: PUSH
35040: LD_INT 38
35042: PUSH
35043: LD_INT 32
35045: PUSH
35046: LD_INT 27
35048: PUSH
35049: LD_INT 33
35051: PUSH
35052: LD_INT 69
35054: PUSH
35055: LD_INT 39
35057: PUSH
35058: LD_INT 34
35060: PUSH
35061: LD_INT 40
35063: PUSH
35064: LD_INT 71
35066: PUSH
35067: LD_INT 23
35069: PUSH
35070: LD_INT 44
35072: PUSH
35073: LD_INT 48
35075: PUSH
35076: LD_INT 49
35078: PUSH
35079: LD_INT 50
35081: PUSH
35082: LD_INT 51
35084: PUSH
35085: LD_INT 52
35087: PUSH
35088: LD_INT 53
35090: PUSH
35091: LD_INT 54
35093: PUSH
35094: LD_INT 55
35096: PUSH
35097: LD_INT 56
35099: PUSH
35100: LD_INT 57
35102: PUSH
35103: LD_INT 58
35105: PUSH
35106: LD_INT 59
35108: PUSH
35109: LD_INT 63
35111: PUSH
35112: LD_INT 64
35114: PUSH
35115: LD_INT 65
35117: PUSH
35118: LD_INT 82
35120: PUSH
35121: LD_INT 83
35123: PUSH
35124: LD_INT 84
35126: PUSH
35127: LD_INT 85
35129: PUSH
35130: LD_INT 86
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: ST_TO_ADDR
35188: GO 35191
35190: POP
// if state > - 1 and state < 3 then
35191: LD_VAR 0 3
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: GREATER
35200: PUSH
35201: LD_VAR 0 3
35205: PUSH
35206: LD_INT 3
35208: LESS
35209: AND
35210: IFFALSE 35267
// for i in result do
35212: LD_ADDR_VAR 0 5
35216: PUSH
35217: LD_VAR 0 4
35221: PUSH
35222: FOR_IN
35223: IFFALSE 35265
// if GetTech ( i , side ) <> state then
35225: LD_VAR 0 5
35229: PPUSH
35230: LD_VAR 0 1
35234: PPUSH
35235: CALL_OW 321
35239: PUSH
35240: LD_VAR 0 3
35244: NONEQUAL
35245: IFFALSE 35263
// result := result diff i ;
35247: LD_ADDR_VAR 0 4
35251: PUSH
35252: LD_VAR 0 4
35256: PUSH
35257: LD_VAR 0 5
35261: DIFF
35262: ST_TO_ADDR
35263: GO 35222
35265: POP
35266: POP
// end ;
35267: LD_VAR 0 4
35271: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35272: LD_INT 0
35274: PPUSH
35275: PPUSH
35276: PPUSH
// result := true ;
35277: LD_ADDR_VAR 0 3
35281: PUSH
35282: LD_INT 1
35284: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35285: LD_ADDR_VAR 0 5
35289: PUSH
35290: LD_VAR 0 2
35294: PPUSH
35295: CALL_OW 480
35299: ST_TO_ADDR
// if not tmp then
35300: LD_VAR 0 5
35304: NOT
35305: IFFALSE 35309
// exit ;
35307: GO 35358
// for i in tmp do
35309: LD_ADDR_VAR 0 4
35313: PUSH
35314: LD_VAR 0 5
35318: PUSH
35319: FOR_IN
35320: IFFALSE 35356
// if GetTech ( i , side ) <> state_researched then
35322: LD_VAR 0 4
35326: PPUSH
35327: LD_VAR 0 1
35331: PPUSH
35332: CALL_OW 321
35336: PUSH
35337: LD_INT 2
35339: NONEQUAL
35340: IFFALSE 35354
// begin result := false ;
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: LD_INT 0
35349: ST_TO_ADDR
// exit ;
35350: POP
35351: POP
35352: GO 35358
// end ;
35354: GO 35319
35356: POP
35357: POP
// end ;
35358: LD_VAR 0 3
35362: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35363: LD_INT 0
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35378: LD_VAR 0 1
35382: NOT
35383: PUSH
35384: LD_VAR 0 1
35388: PPUSH
35389: CALL_OW 257
35393: PUSH
35394: LD_INT 9
35396: NONEQUAL
35397: OR
35398: IFFALSE 35402
// exit ;
35400: GO 35975
// side := GetSide ( unit ) ;
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_VAR 0 1
35411: PPUSH
35412: CALL_OW 255
35416: ST_TO_ADDR
// tech_space := tech_spacanom ;
35417: LD_ADDR_VAR 0 12
35421: PUSH
35422: LD_INT 29
35424: ST_TO_ADDR
// tech_time := tech_taurad ;
35425: LD_ADDR_VAR 0 13
35429: PUSH
35430: LD_INT 28
35432: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35433: LD_ADDR_VAR 0 11
35437: PUSH
35438: LD_VAR 0 1
35442: PPUSH
35443: CALL_OW 310
35447: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35448: LD_VAR 0 11
35452: PPUSH
35453: CALL_OW 247
35457: PUSH
35458: LD_INT 2
35460: EQUAL
35461: IFFALSE 35465
// exit ;
35463: GO 35975
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35465: LD_ADDR_VAR 0 8
35469: PUSH
35470: LD_INT 81
35472: PUSH
35473: LD_VAR 0 9
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 3
35484: PUSH
35485: LD_INT 21
35487: PUSH
35488: LD_INT 3
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PPUSH
35503: CALL_OW 69
35507: ST_TO_ADDR
// if not tmp then
35508: LD_VAR 0 8
35512: NOT
35513: IFFALSE 35517
// exit ;
35515: GO 35975
// if in_unit then
35517: LD_VAR 0 11
35521: IFFALSE 35545
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35523: LD_ADDR_VAR 0 10
35527: PUSH
35528: LD_VAR 0 8
35532: PPUSH
35533: LD_VAR 0 11
35537: PPUSH
35538: CALL_OW 74
35542: ST_TO_ADDR
35543: GO 35565
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35545: LD_ADDR_VAR 0 10
35549: PUSH
35550: LD_VAR 0 8
35554: PPUSH
35555: LD_VAR 0 1
35559: PPUSH
35560: CALL_OW 74
35564: ST_TO_ADDR
// if not enemy then
35565: LD_VAR 0 10
35569: NOT
35570: IFFALSE 35574
// exit ;
35572: GO 35975
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35574: LD_VAR 0 11
35578: PUSH
35579: LD_VAR 0 11
35583: PPUSH
35584: LD_VAR 0 10
35588: PPUSH
35589: CALL_OW 296
35593: PUSH
35594: LD_INT 13
35596: GREATER
35597: AND
35598: PUSH
35599: LD_VAR 0 1
35603: PPUSH
35604: LD_VAR 0 10
35608: PPUSH
35609: CALL_OW 296
35613: PUSH
35614: LD_INT 12
35616: GREATER
35617: OR
35618: IFFALSE 35622
// exit ;
35620: GO 35975
// missile := [ 1 ] ;
35622: LD_ADDR_VAR 0 14
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: EMPTY
35631: LIST
35632: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35633: LD_VAR 0 9
35637: PPUSH
35638: LD_VAR 0 12
35642: PPUSH
35643: CALL_OW 325
35647: IFFALSE 35676
// missile := Insert ( missile , missile + 1 , 2 ) ;
35649: LD_ADDR_VAR 0 14
35653: PUSH
35654: LD_VAR 0 14
35658: PPUSH
35659: LD_VAR 0 14
35663: PUSH
35664: LD_INT 1
35666: PLUS
35667: PPUSH
35668: LD_INT 2
35670: PPUSH
35671: CALL_OW 2
35675: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35676: LD_VAR 0 9
35680: PPUSH
35681: LD_VAR 0 13
35685: PPUSH
35686: CALL_OW 325
35690: PUSH
35691: LD_VAR 0 10
35695: PPUSH
35696: CALL_OW 255
35700: PPUSH
35701: LD_VAR 0 13
35705: PPUSH
35706: CALL_OW 325
35710: NOT
35711: AND
35712: IFFALSE 35741
// missile := Insert ( missile , missile + 1 , 3 ) ;
35714: LD_ADDR_VAR 0 14
35718: PUSH
35719: LD_VAR 0 14
35723: PPUSH
35724: LD_VAR 0 14
35728: PUSH
35729: LD_INT 1
35731: PLUS
35732: PPUSH
35733: LD_INT 3
35735: PPUSH
35736: CALL_OW 2
35740: ST_TO_ADDR
// if missile < 2 then
35741: LD_VAR 0 14
35745: PUSH
35746: LD_INT 2
35748: LESS
35749: IFFALSE 35753
// exit ;
35751: GO 35975
// x := GetX ( enemy ) ;
35753: LD_ADDR_VAR 0 4
35757: PUSH
35758: LD_VAR 0 10
35762: PPUSH
35763: CALL_OW 250
35767: ST_TO_ADDR
// y := GetY ( enemy ) ;
35768: LD_ADDR_VAR 0 5
35772: PUSH
35773: LD_VAR 0 10
35777: PPUSH
35778: CALL_OW 251
35782: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35783: LD_ADDR_VAR 0 6
35787: PUSH
35788: LD_VAR 0 4
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PPUSH
35797: LD_INT 1
35799: PPUSH
35800: CALL_OW 12
35804: PLUS
35805: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35806: LD_ADDR_VAR 0 7
35810: PUSH
35811: LD_VAR 0 5
35815: PUSH
35816: LD_INT 1
35818: NEG
35819: PPUSH
35820: LD_INT 1
35822: PPUSH
35823: CALL_OW 12
35827: PLUS
35828: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35829: LD_VAR 0 6
35833: PPUSH
35834: LD_VAR 0 7
35838: PPUSH
35839: CALL_OW 488
35843: NOT
35844: IFFALSE 35866
// begin _x := x ;
35846: LD_ADDR_VAR 0 6
35850: PUSH
35851: LD_VAR 0 4
35855: ST_TO_ADDR
// _y := y ;
35856: LD_ADDR_VAR 0 7
35860: PUSH
35861: LD_VAR 0 5
35865: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35866: LD_ADDR_VAR 0 3
35870: PUSH
35871: LD_INT 1
35873: PPUSH
35874: LD_VAR 0 14
35878: PPUSH
35879: CALL_OW 12
35883: ST_TO_ADDR
// case i of 1 :
35884: LD_VAR 0 3
35888: PUSH
35889: LD_INT 1
35891: DOUBLE
35892: EQUAL
35893: IFTRUE 35897
35895: GO 35914
35897: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35898: LD_VAR 0 1
35902: PPUSH
35903: LD_VAR 0 10
35907: PPUSH
35908: CALL_OW 115
35912: GO 35975
35914: LD_INT 2
35916: DOUBLE
35917: EQUAL
35918: IFTRUE 35922
35920: GO 35944
35922: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35923: LD_VAR 0 1
35927: PPUSH
35928: LD_VAR 0 6
35932: PPUSH
35933: LD_VAR 0 7
35937: PPUSH
35938: CALL_OW 153
35942: GO 35975
35944: LD_INT 3
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 35974
35952: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35953: LD_VAR 0 1
35957: PPUSH
35958: LD_VAR 0 6
35962: PPUSH
35963: LD_VAR 0 7
35967: PPUSH
35968: CALL_OW 154
35972: GO 35975
35974: POP
// end ;
35975: LD_VAR 0 2
35979: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35980: LD_INT 0
35982: PPUSH
35983: PPUSH
35984: PPUSH
35985: PPUSH
35986: PPUSH
35987: PPUSH
// if not unit or not building then
35988: LD_VAR 0 1
35992: NOT
35993: PUSH
35994: LD_VAR 0 2
35998: NOT
35999: OR
36000: IFFALSE 36004
// exit ;
36002: GO 36162
// x := GetX ( building ) ;
36004: LD_ADDR_VAR 0 5
36008: PUSH
36009: LD_VAR 0 2
36013: PPUSH
36014: CALL_OW 250
36018: ST_TO_ADDR
// y := GetY ( building ) ;
36019: LD_ADDR_VAR 0 6
36023: PUSH
36024: LD_VAR 0 2
36028: PPUSH
36029: CALL_OW 251
36033: ST_TO_ADDR
// for i = 0 to 5 do
36034: LD_ADDR_VAR 0 4
36038: PUSH
36039: DOUBLE
36040: LD_INT 0
36042: DEC
36043: ST_TO_ADDR
36044: LD_INT 5
36046: PUSH
36047: FOR_TO
36048: IFFALSE 36160
// begin _x := ShiftX ( x , i , 3 ) ;
36050: LD_ADDR_VAR 0 7
36054: PUSH
36055: LD_VAR 0 5
36059: PPUSH
36060: LD_VAR 0 4
36064: PPUSH
36065: LD_INT 3
36067: PPUSH
36068: CALL_OW 272
36072: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36073: LD_ADDR_VAR 0 8
36077: PUSH
36078: LD_VAR 0 6
36082: PPUSH
36083: LD_VAR 0 4
36087: PPUSH
36088: LD_INT 3
36090: PPUSH
36091: CALL_OW 273
36095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36096: LD_VAR 0 7
36100: PPUSH
36101: LD_VAR 0 8
36105: PPUSH
36106: CALL_OW 488
36110: NOT
36111: IFFALSE 36115
// continue ;
36113: GO 36047
// if HexInfo ( _x , _y ) = 0 then
36115: LD_VAR 0 7
36119: PPUSH
36120: LD_VAR 0 8
36124: PPUSH
36125: CALL_OW 428
36129: PUSH
36130: LD_INT 0
36132: EQUAL
36133: IFFALSE 36158
// begin ComMoveXY ( unit , _x , _y ) ;
36135: LD_VAR 0 1
36139: PPUSH
36140: LD_VAR 0 7
36144: PPUSH
36145: LD_VAR 0 8
36149: PPUSH
36150: CALL_OW 111
// exit ;
36154: POP
36155: POP
36156: GO 36162
// end ; end ;
36158: GO 36047
36160: POP
36161: POP
// end ;
36162: LD_VAR 0 3
36166: RET
// export function ScanBase ( side , base_area ) ; begin
36167: LD_INT 0
36169: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36170: LD_ADDR_VAR 0 3
36174: PUSH
36175: LD_VAR 0 2
36179: PPUSH
36180: LD_INT 81
36182: PUSH
36183: LD_VAR 0 1
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PPUSH
36192: CALL_OW 70
36196: ST_TO_ADDR
// end ;
36197: LD_VAR 0 3
36201: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36202: LD_INT 0
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
// result := false ;
36208: LD_ADDR_VAR 0 2
36212: PUSH
36213: LD_INT 0
36215: ST_TO_ADDR
// side := GetSide ( unit ) ;
36216: LD_ADDR_VAR 0 3
36220: PUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 255
36230: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36231: LD_ADDR_VAR 0 4
36235: PUSH
36236: LD_VAR 0 1
36240: PPUSH
36241: CALL_OW 248
36245: ST_TO_ADDR
// case nat of 1 :
36246: LD_VAR 0 4
36250: PUSH
36251: LD_INT 1
36253: DOUBLE
36254: EQUAL
36255: IFTRUE 36259
36257: GO 36270
36259: POP
// tech := tech_lassight ; 2 :
36260: LD_ADDR_VAR 0 5
36264: PUSH
36265: LD_INT 12
36267: ST_TO_ADDR
36268: GO 36309
36270: LD_INT 2
36272: DOUBLE
36273: EQUAL
36274: IFTRUE 36278
36276: GO 36289
36278: POP
// tech := tech_mortar ; 3 :
36279: LD_ADDR_VAR 0 5
36283: PUSH
36284: LD_INT 41
36286: ST_TO_ADDR
36287: GO 36309
36289: LD_INT 3
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36297
36295: GO 36308
36297: POP
// tech := tech_bazooka ; end ;
36298: LD_ADDR_VAR 0 5
36302: PUSH
36303: LD_INT 44
36305: ST_TO_ADDR
36306: GO 36309
36308: POP
// if Researched ( side , tech ) then
36309: LD_VAR 0 3
36313: PPUSH
36314: LD_VAR 0 5
36318: PPUSH
36319: CALL_OW 325
36323: IFFALSE 36350
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36325: LD_ADDR_VAR 0 2
36329: PUSH
36330: LD_INT 5
36332: PUSH
36333: LD_INT 8
36335: PUSH
36336: LD_INT 9
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: PUSH
36344: LD_VAR 0 4
36348: ARRAY
36349: ST_TO_ADDR
// end ;
36350: LD_VAR 0 2
36354: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36355: LD_INT 0
36357: PPUSH
36358: PPUSH
36359: PPUSH
// if not mines then
36360: LD_VAR 0 2
36364: NOT
36365: IFFALSE 36369
// exit ;
36367: GO 36513
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36369: LD_ADDR_VAR 0 5
36373: PUSH
36374: LD_INT 81
36376: PUSH
36377: LD_VAR 0 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: LD_INT 21
36391: PUSH
36392: LD_INT 3
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PPUSH
36407: CALL_OW 69
36411: ST_TO_ADDR
// for i in mines do
36412: LD_ADDR_VAR 0 4
36416: PUSH
36417: LD_VAR 0 2
36421: PUSH
36422: FOR_IN
36423: IFFALSE 36511
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36425: LD_VAR 0 4
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: PPUSH
36434: LD_VAR 0 4
36438: PUSH
36439: LD_INT 2
36441: ARRAY
36442: PPUSH
36443: CALL_OW 458
36447: NOT
36448: IFFALSE 36452
// continue ;
36450: GO 36422
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36452: LD_VAR 0 4
36456: PUSH
36457: LD_INT 1
36459: ARRAY
36460: PPUSH
36461: LD_VAR 0 4
36465: PUSH
36466: LD_INT 2
36468: ARRAY
36469: PPUSH
36470: CALL_OW 428
36474: PUSH
36475: LD_VAR 0 5
36479: IN
36480: IFFALSE 36509
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36482: LD_VAR 0 4
36486: PUSH
36487: LD_INT 1
36489: ARRAY
36490: PPUSH
36491: LD_VAR 0 4
36495: PUSH
36496: LD_INT 2
36498: ARRAY
36499: PPUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: CALL_OW 456
// end ;
36509: GO 36422
36511: POP
36512: POP
// end ;
36513: LD_VAR 0 3
36517: RET
// export function Count ( array ) ; var i ; begin
36518: LD_INT 0
36520: PPUSH
36521: PPUSH
// result := 0 ;
36522: LD_ADDR_VAR 0 2
36526: PUSH
36527: LD_INT 0
36529: ST_TO_ADDR
// for i in array do
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: LD_VAR 0 1
36539: PUSH
36540: FOR_IN
36541: IFFALSE 36565
// if i then
36543: LD_VAR 0 3
36547: IFFALSE 36563
// result := result + 1 ;
36549: LD_ADDR_VAR 0 2
36553: PUSH
36554: LD_VAR 0 2
36558: PUSH
36559: LD_INT 1
36561: PLUS
36562: ST_TO_ADDR
36563: GO 36540
36565: POP
36566: POP
// end ;
36567: LD_VAR 0 2
36571: RET
// export function IsEmpty ( building ) ; begin
36572: LD_INT 0
36574: PPUSH
// if not building then
36575: LD_VAR 0 1
36579: NOT
36580: IFFALSE 36584
// exit ;
36582: GO 36627
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36584: LD_ADDR_VAR 0 2
36588: PUSH
36589: LD_VAR 0 1
36593: PUSH
36594: LD_INT 22
36596: PUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: CALL_OW 255
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 58
36613: PUSH
36614: EMPTY
36615: LIST
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PPUSH
36621: CALL_OW 69
36625: IN
36626: ST_TO_ADDR
// end ;
36627: LD_VAR 0 2
36631: RET
// export function IsNotFull ( building ) ; begin
36632: LD_INT 0
36634: PPUSH
// if not building then
36635: LD_VAR 0 1
36639: NOT
36640: IFFALSE 36644
// exit ;
36642: GO 36663
// result := UnitsInside ( building ) < 6 ;
36644: LD_ADDR_VAR 0 2
36648: PUSH
36649: LD_VAR 0 1
36653: PPUSH
36654: CALL_OW 313
36658: PUSH
36659: LD_INT 6
36661: LESS
36662: ST_TO_ADDR
// end ;
36663: LD_VAR 0 2
36667: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36668: LD_INT 0
36670: PPUSH
36671: PPUSH
36672: PPUSH
36673: PPUSH
// tmp := [ ] ;
36674: LD_ADDR_VAR 0 3
36678: PUSH
36679: EMPTY
36680: ST_TO_ADDR
// list := [ ] ;
36681: LD_ADDR_VAR 0 5
36685: PUSH
36686: EMPTY
36687: ST_TO_ADDR
// for i = 16 to 25 do
36688: LD_ADDR_VAR 0 4
36692: PUSH
36693: DOUBLE
36694: LD_INT 16
36696: DEC
36697: ST_TO_ADDR
36698: LD_INT 25
36700: PUSH
36701: FOR_TO
36702: IFFALSE 36775
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36704: LD_ADDR_VAR 0 3
36708: PUSH
36709: LD_VAR 0 3
36713: PUSH
36714: LD_INT 22
36716: PUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: CALL_OW 255
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 91
36733: PUSH
36734: LD_VAR 0 1
36738: PUSH
36739: LD_INT 6
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 30
36749: PUSH
36750: LD_VAR 0 4
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: PUSH
36764: EMPTY
36765: LIST
36766: PPUSH
36767: CALL_OW 69
36771: ADD
36772: ST_TO_ADDR
36773: GO 36701
36775: POP
36776: POP
// for i = 1 to tmp do
36777: LD_ADDR_VAR 0 4
36781: PUSH
36782: DOUBLE
36783: LD_INT 1
36785: DEC
36786: ST_TO_ADDR
36787: LD_VAR 0 3
36791: PUSH
36792: FOR_TO
36793: IFFALSE 36881
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36795: LD_ADDR_VAR 0 5
36799: PUSH
36800: LD_VAR 0 5
36804: PUSH
36805: LD_VAR 0 3
36809: PUSH
36810: LD_VAR 0 4
36814: ARRAY
36815: PPUSH
36816: CALL_OW 266
36820: PUSH
36821: LD_VAR 0 3
36825: PUSH
36826: LD_VAR 0 4
36830: ARRAY
36831: PPUSH
36832: CALL_OW 250
36836: PUSH
36837: LD_VAR 0 3
36841: PUSH
36842: LD_VAR 0 4
36846: ARRAY
36847: PPUSH
36848: CALL_OW 251
36852: PUSH
36853: LD_VAR 0 3
36857: PUSH
36858: LD_VAR 0 4
36862: ARRAY
36863: PPUSH
36864: CALL_OW 254
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: PUSH
36875: EMPTY
36876: LIST
36877: ADD
36878: ST_TO_ADDR
36879: GO 36792
36881: POP
36882: POP
// result := list ;
36883: LD_ADDR_VAR 0 2
36887: PUSH
36888: LD_VAR 0 5
36892: ST_TO_ADDR
// end ;
36893: LD_VAR 0 2
36897: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36898: LD_INT 0
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
// if not factory then
36907: LD_VAR 0 1
36911: NOT
36912: IFFALSE 36916
// exit ;
36914: GO 37509
// if control = control_apeman then
36916: LD_VAR 0 4
36920: PUSH
36921: LD_INT 5
36923: EQUAL
36924: IFFALSE 37033
// begin tmp := UnitsInside ( factory ) ;
36926: LD_ADDR_VAR 0 8
36930: PUSH
36931: LD_VAR 0 1
36935: PPUSH
36936: CALL_OW 313
36940: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36941: LD_VAR 0 8
36945: PPUSH
36946: LD_INT 25
36948: PUSH
36949: LD_INT 12
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PPUSH
36956: CALL_OW 72
36960: NOT
36961: IFFALSE 36971
// control := control_manual ;
36963: LD_ADDR_VAR 0 4
36967: PUSH
36968: LD_INT 1
36970: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36971: LD_ADDR_VAR 0 8
36975: PUSH
36976: LD_VAR 0 1
36980: PPUSH
36981: CALL 36668 0 1
36985: ST_TO_ADDR
// if tmp then
36986: LD_VAR 0 8
36990: IFFALSE 37033
// begin for i in tmp do
36992: LD_ADDR_VAR 0 7
36996: PUSH
36997: LD_VAR 0 8
37001: PUSH
37002: FOR_IN
37003: IFFALSE 37031
// if i [ 1 ] = b_ext_radio then
37005: LD_VAR 0 7
37009: PUSH
37010: LD_INT 1
37012: ARRAY
37013: PUSH
37014: LD_INT 22
37016: EQUAL
37017: IFFALSE 37029
// begin control := control_remote ;
37019: LD_ADDR_VAR 0 4
37023: PUSH
37024: LD_INT 2
37026: ST_TO_ADDR
// break ;
37027: GO 37031
// end ;
37029: GO 37002
37031: POP
37032: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37033: LD_VAR 0 1
37037: PPUSH
37038: LD_VAR 0 2
37042: PPUSH
37043: LD_VAR 0 3
37047: PPUSH
37048: LD_VAR 0 4
37052: PPUSH
37053: LD_VAR 0 5
37057: PPUSH
37058: CALL_OW 448
37062: IFFALSE 37097
// begin result := [ chassis , engine , control , weapon ] ;
37064: LD_ADDR_VAR 0 6
37068: PUSH
37069: LD_VAR 0 2
37073: PUSH
37074: LD_VAR 0 3
37078: PUSH
37079: LD_VAR 0 4
37083: PUSH
37084: LD_VAR 0 5
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: ST_TO_ADDR
// exit ;
37095: GO 37509
// end ; _chassis := AvailableChassisList ( factory ) ;
37097: LD_ADDR_VAR 0 9
37101: PUSH
37102: LD_VAR 0 1
37106: PPUSH
37107: CALL_OW 475
37111: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37112: LD_ADDR_VAR 0 11
37116: PUSH
37117: LD_VAR 0 1
37121: PPUSH
37122: CALL_OW 476
37126: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37127: LD_ADDR_VAR 0 12
37131: PUSH
37132: LD_VAR 0 1
37136: PPUSH
37137: CALL_OW 477
37141: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37142: LD_ADDR_VAR 0 10
37146: PUSH
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 478
37156: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37157: LD_VAR 0 9
37161: NOT
37162: PUSH
37163: LD_VAR 0 11
37167: NOT
37168: OR
37169: PUSH
37170: LD_VAR 0 12
37174: NOT
37175: OR
37176: PUSH
37177: LD_VAR 0 10
37181: NOT
37182: OR
37183: IFFALSE 37218
// begin result := [ chassis , engine , control , weapon ] ;
37185: LD_ADDR_VAR 0 6
37189: PUSH
37190: LD_VAR 0 2
37194: PUSH
37195: LD_VAR 0 3
37199: PUSH
37200: LD_VAR 0 4
37204: PUSH
37205: LD_VAR 0 5
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: ST_TO_ADDR
// exit ;
37216: GO 37509
// end ; if not chassis in _chassis then
37218: LD_VAR 0 2
37222: PUSH
37223: LD_VAR 0 9
37227: IN
37228: NOT
37229: IFFALSE 37255
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37231: LD_ADDR_VAR 0 2
37235: PUSH
37236: LD_VAR 0 9
37240: PUSH
37241: LD_INT 1
37243: PPUSH
37244: LD_VAR 0 9
37248: PPUSH
37249: CALL_OW 12
37253: ARRAY
37254: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37255: LD_VAR 0 2
37259: PPUSH
37260: LD_VAR 0 3
37264: PPUSH
37265: CALL 37514 0 2
37269: NOT
37270: IFFALSE 37329
// repeat engine := _engine [ 1 ] ;
37272: LD_ADDR_VAR 0 3
37276: PUSH
37277: LD_VAR 0 11
37281: PUSH
37282: LD_INT 1
37284: ARRAY
37285: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37286: LD_ADDR_VAR 0 11
37290: PUSH
37291: LD_VAR 0 11
37295: PPUSH
37296: LD_INT 1
37298: PPUSH
37299: CALL_OW 3
37303: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37304: LD_VAR 0 2
37308: PPUSH
37309: LD_VAR 0 3
37313: PPUSH
37314: CALL 37514 0 2
37318: PUSH
37319: LD_VAR 0 11
37323: PUSH
37324: EMPTY
37325: EQUAL
37326: OR
37327: IFFALSE 37272
// if not control in _control then
37329: LD_VAR 0 4
37333: PUSH
37334: LD_VAR 0 12
37338: IN
37339: NOT
37340: IFFALSE 37366
// control := _control [ rand ( 1 , _control ) ] ;
37342: LD_ADDR_VAR 0 4
37346: PUSH
37347: LD_VAR 0 12
37351: PUSH
37352: LD_INT 1
37354: PPUSH
37355: LD_VAR 0 12
37359: PPUSH
37360: CALL_OW 12
37364: ARRAY
37365: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37366: LD_VAR 0 2
37370: PPUSH
37371: LD_VAR 0 5
37375: PPUSH
37376: CALL 37734 0 2
37380: NOT
37381: IFFALSE 37440
// repeat weapon := _weapon [ 1 ] ;
37383: LD_ADDR_VAR 0 5
37387: PUSH
37388: LD_VAR 0 10
37392: PUSH
37393: LD_INT 1
37395: ARRAY
37396: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37397: LD_ADDR_VAR 0 10
37401: PUSH
37402: LD_VAR 0 10
37406: PPUSH
37407: LD_INT 1
37409: PPUSH
37410: CALL_OW 3
37414: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37415: LD_VAR 0 2
37419: PPUSH
37420: LD_VAR 0 5
37424: PPUSH
37425: CALL 37734 0 2
37429: PUSH
37430: LD_VAR 0 10
37434: PUSH
37435: EMPTY
37436: EQUAL
37437: OR
37438: IFFALSE 37383
// result := [ ] ;
37440: LD_ADDR_VAR 0 6
37444: PUSH
37445: EMPTY
37446: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37447: LD_VAR 0 1
37451: PPUSH
37452: LD_VAR 0 2
37456: PPUSH
37457: LD_VAR 0 3
37461: PPUSH
37462: LD_VAR 0 4
37466: PPUSH
37467: LD_VAR 0 5
37471: PPUSH
37472: CALL_OW 448
37476: IFFALSE 37509
// result := [ chassis , engine , control , weapon ] ;
37478: LD_ADDR_VAR 0 6
37482: PUSH
37483: LD_VAR 0 2
37487: PUSH
37488: LD_VAR 0 3
37492: PUSH
37493: LD_VAR 0 4
37497: PUSH
37498: LD_VAR 0 5
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
// end ;
37509: LD_VAR 0 6
37513: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37514: LD_INT 0
37516: PPUSH
// if not chassis or not engine then
37517: LD_VAR 0 1
37521: NOT
37522: PUSH
37523: LD_VAR 0 2
37527: NOT
37528: OR
37529: IFFALSE 37533
// exit ;
37531: GO 37729
// case engine of engine_solar :
37533: LD_VAR 0 2
37537: PUSH
37538: LD_INT 2
37540: DOUBLE
37541: EQUAL
37542: IFTRUE 37546
37544: GO 37584
37546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37547: LD_ADDR_VAR 0 3
37551: PUSH
37552: LD_INT 11
37554: PUSH
37555: LD_INT 12
37557: PUSH
37558: LD_INT 13
37560: PUSH
37561: LD_INT 14
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: ST_TO_ADDR
37582: GO 37713
37584: LD_INT 1
37586: DOUBLE
37587: EQUAL
37588: IFTRUE 37592
37590: GO 37654
37592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37593: LD_ADDR_VAR 0 3
37597: PUSH
37598: LD_INT 11
37600: PUSH
37601: LD_INT 12
37603: PUSH
37604: LD_INT 13
37606: PUSH
37607: LD_INT 14
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: LD_INT 3
37618: PUSH
37619: LD_INT 4
37621: PUSH
37622: LD_INT 5
37624: PUSH
37625: LD_INT 21
37627: PUSH
37628: LD_INT 23
37630: PUSH
37631: LD_INT 22
37633: PUSH
37634: LD_INT 24
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: ST_TO_ADDR
37652: GO 37713
37654: LD_INT 3
37656: DOUBLE
37657: EQUAL
37658: IFTRUE 37662
37660: GO 37712
37662: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37663: LD_ADDR_VAR 0 3
37667: PUSH
37668: LD_INT 13
37670: PUSH
37671: LD_INT 14
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 4
37682: PUSH
37683: LD_INT 5
37685: PUSH
37686: LD_INT 21
37688: PUSH
37689: LD_INT 22
37691: PUSH
37692: LD_INT 23
37694: PUSH
37695: LD_INT 24
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: ST_TO_ADDR
37710: GO 37713
37712: POP
// result := ( chassis in result ) ;
37713: LD_ADDR_VAR 0 3
37717: PUSH
37718: LD_VAR 0 1
37722: PUSH
37723: LD_VAR 0 3
37727: IN
37728: ST_TO_ADDR
// end ;
37729: LD_VAR 0 3
37733: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37734: LD_INT 0
37736: PPUSH
// if not chassis or not weapon then
37737: LD_VAR 0 1
37741: NOT
37742: PUSH
37743: LD_VAR 0 2
37747: NOT
37748: OR
37749: IFFALSE 37753
// exit ;
37751: GO 38815
// case weapon of us_machine_gun :
37753: LD_VAR 0 2
37757: PUSH
37758: LD_INT 2
37760: DOUBLE
37761: EQUAL
37762: IFTRUE 37766
37764: GO 37796
37766: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37767: LD_ADDR_VAR 0 3
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: LD_INT 3
37780: PUSH
37781: LD_INT 4
37783: PUSH
37784: LD_INT 5
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: ST_TO_ADDR
37794: GO 38799
37796: LD_INT 3
37798: DOUBLE
37799: EQUAL
37800: IFTRUE 37804
37802: GO 37834
37804: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37805: LD_ADDR_VAR 0 3
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: LD_INT 4
37821: PUSH
37822: LD_INT 5
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
37832: GO 38799
37834: LD_INT 11
37836: DOUBLE
37837: EQUAL
37838: IFTRUE 37842
37840: GO 37872
37842: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37843: LD_ADDR_VAR 0 3
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: LD_INT 3
37856: PUSH
37857: LD_INT 4
37859: PUSH
37860: LD_INT 5
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
37870: GO 38799
37872: LD_INT 4
37874: DOUBLE
37875: EQUAL
37876: IFTRUE 37880
37878: GO 37906
37880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37881: LD_ADDR_VAR 0 3
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: LD_INT 3
37891: PUSH
37892: LD_INT 4
37894: PUSH
37895: LD_INT 5
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: ST_TO_ADDR
37904: GO 38799
37906: LD_INT 5
37908: DOUBLE
37909: EQUAL
37910: IFTRUE 37914
37912: GO 37940
37914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37915: LD_ADDR_VAR 0 3
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: LD_INT 4
37928: PUSH
37929: LD_INT 5
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: ST_TO_ADDR
37938: GO 38799
37940: LD_INT 9
37942: DOUBLE
37943: EQUAL
37944: IFTRUE 37948
37946: GO 37974
37948: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37949: LD_ADDR_VAR 0 3
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 3
37959: PUSH
37960: LD_INT 4
37962: PUSH
37963: LD_INT 5
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
37972: GO 38799
37974: LD_INT 7
37976: DOUBLE
37977: EQUAL
37978: IFTRUE 37982
37980: GO 38008
37982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37983: LD_ADDR_VAR 0 3
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: LD_INT 4
37996: PUSH
37997: LD_INT 5
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: ST_TO_ADDR
38006: GO 38799
38008: LD_INT 12
38010: DOUBLE
38011: EQUAL
38012: IFTRUE 38016
38014: GO 38042
38016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38017: LD_ADDR_VAR 0 3
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: LD_INT 4
38030: PUSH
38031: LD_INT 5
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: ST_TO_ADDR
38040: GO 38799
38042: LD_INT 13
38044: DOUBLE
38045: EQUAL
38046: IFTRUE 38050
38048: GO 38076
38050: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38051: LD_ADDR_VAR 0 3
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: LD_INT 4
38064: PUSH
38065: LD_INT 5
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: ST_TO_ADDR
38074: GO 38799
38076: LD_INT 14
38078: DOUBLE
38079: EQUAL
38080: IFTRUE 38084
38082: GO 38102
38084: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38085: LD_ADDR_VAR 0 3
38089: PUSH
38090: LD_INT 4
38092: PUSH
38093: LD_INT 5
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: ST_TO_ADDR
38100: GO 38799
38102: LD_INT 6
38104: DOUBLE
38105: EQUAL
38106: IFTRUE 38110
38108: GO 38128
38110: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38111: LD_ADDR_VAR 0 3
38115: PUSH
38116: LD_INT 4
38118: PUSH
38119: LD_INT 5
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: ST_TO_ADDR
38126: GO 38799
38128: LD_INT 10
38130: DOUBLE
38131: EQUAL
38132: IFTRUE 38136
38134: GO 38154
38136: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38137: LD_ADDR_VAR 0 3
38141: PUSH
38142: LD_INT 4
38144: PUSH
38145: LD_INT 5
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: ST_TO_ADDR
38152: GO 38799
38154: LD_INT 22
38156: DOUBLE
38157: EQUAL
38158: IFTRUE 38162
38160: GO 38188
38162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38163: LD_ADDR_VAR 0 3
38167: PUSH
38168: LD_INT 11
38170: PUSH
38171: LD_INT 12
38173: PUSH
38174: LD_INT 13
38176: PUSH
38177: LD_INT 14
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: ST_TO_ADDR
38186: GO 38799
38188: LD_INT 23
38190: DOUBLE
38191: EQUAL
38192: IFTRUE 38196
38194: GO 38222
38196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38197: LD_ADDR_VAR 0 3
38201: PUSH
38202: LD_INT 11
38204: PUSH
38205: LD_INT 12
38207: PUSH
38208: LD_INT 13
38210: PUSH
38211: LD_INT 14
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: ST_TO_ADDR
38220: GO 38799
38222: LD_INT 24
38224: DOUBLE
38225: EQUAL
38226: IFTRUE 38230
38228: GO 38256
38230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38231: LD_ADDR_VAR 0 3
38235: PUSH
38236: LD_INT 11
38238: PUSH
38239: LD_INT 12
38241: PUSH
38242: LD_INT 13
38244: PUSH
38245: LD_INT 14
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: ST_TO_ADDR
38254: GO 38799
38256: LD_INT 30
38258: DOUBLE
38259: EQUAL
38260: IFTRUE 38264
38262: GO 38290
38264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38265: LD_ADDR_VAR 0 3
38269: PUSH
38270: LD_INT 11
38272: PUSH
38273: LD_INT 12
38275: PUSH
38276: LD_INT 13
38278: PUSH
38279: LD_INT 14
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: ST_TO_ADDR
38288: GO 38799
38290: LD_INT 25
38292: DOUBLE
38293: EQUAL
38294: IFTRUE 38298
38296: GO 38316
38298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38299: LD_ADDR_VAR 0 3
38303: PUSH
38304: LD_INT 13
38306: PUSH
38307: LD_INT 14
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: ST_TO_ADDR
38314: GO 38799
38316: LD_INT 27
38318: DOUBLE
38319: EQUAL
38320: IFTRUE 38324
38322: GO 38342
38324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38325: LD_ADDR_VAR 0 3
38329: PUSH
38330: LD_INT 13
38332: PUSH
38333: LD_INT 14
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: ST_TO_ADDR
38340: GO 38799
38342: LD_EXP 124
38346: DOUBLE
38347: EQUAL
38348: IFTRUE 38352
38350: GO 38378
38352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38353: LD_ADDR_VAR 0 3
38357: PUSH
38358: LD_INT 11
38360: PUSH
38361: LD_INT 12
38363: PUSH
38364: LD_INT 13
38366: PUSH
38367: LD_INT 14
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: ST_TO_ADDR
38376: GO 38799
38378: LD_INT 28
38380: DOUBLE
38381: EQUAL
38382: IFTRUE 38386
38384: GO 38404
38386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38387: LD_ADDR_VAR 0 3
38391: PUSH
38392: LD_INT 13
38394: PUSH
38395: LD_INT 14
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: ST_TO_ADDR
38402: GO 38799
38404: LD_INT 29
38406: DOUBLE
38407: EQUAL
38408: IFTRUE 38412
38410: GO 38430
38412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38413: LD_ADDR_VAR 0 3
38417: PUSH
38418: LD_INT 13
38420: PUSH
38421: LD_INT 14
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: ST_TO_ADDR
38428: GO 38799
38430: LD_INT 31
38432: DOUBLE
38433: EQUAL
38434: IFTRUE 38438
38436: GO 38456
38438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_INT 13
38446: PUSH
38447: LD_INT 14
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: ST_TO_ADDR
38454: GO 38799
38456: LD_INT 26
38458: DOUBLE
38459: EQUAL
38460: IFTRUE 38464
38462: GO 38482
38464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38465: LD_ADDR_VAR 0 3
38469: PUSH
38470: LD_INT 13
38472: PUSH
38473: LD_INT 14
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: ST_TO_ADDR
38480: GO 38799
38482: LD_INT 42
38484: DOUBLE
38485: EQUAL
38486: IFTRUE 38490
38488: GO 38516
38490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38491: LD_ADDR_VAR 0 3
38495: PUSH
38496: LD_INT 21
38498: PUSH
38499: LD_INT 22
38501: PUSH
38502: LD_INT 23
38504: PUSH
38505: LD_INT 24
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: ST_TO_ADDR
38514: GO 38799
38516: LD_INT 43
38518: DOUBLE
38519: EQUAL
38520: IFTRUE 38524
38522: GO 38550
38524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38525: LD_ADDR_VAR 0 3
38529: PUSH
38530: LD_INT 21
38532: PUSH
38533: LD_INT 22
38535: PUSH
38536: LD_INT 23
38538: PUSH
38539: LD_INT 24
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
38548: GO 38799
38550: LD_INT 44
38552: DOUBLE
38553: EQUAL
38554: IFTRUE 38558
38556: GO 38584
38558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38559: LD_ADDR_VAR 0 3
38563: PUSH
38564: LD_INT 21
38566: PUSH
38567: LD_INT 22
38569: PUSH
38570: LD_INT 23
38572: PUSH
38573: LD_INT 24
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
38582: GO 38799
38584: LD_INT 45
38586: DOUBLE
38587: EQUAL
38588: IFTRUE 38592
38590: GO 38618
38592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38593: LD_ADDR_VAR 0 3
38597: PUSH
38598: LD_INT 21
38600: PUSH
38601: LD_INT 22
38603: PUSH
38604: LD_INT 23
38606: PUSH
38607: LD_INT 24
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
38616: GO 38799
38618: LD_INT 49
38620: DOUBLE
38621: EQUAL
38622: IFTRUE 38626
38624: GO 38652
38626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38627: LD_ADDR_VAR 0 3
38631: PUSH
38632: LD_INT 21
38634: PUSH
38635: LD_INT 22
38637: PUSH
38638: LD_INT 23
38640: PUSH
38641: LD_INT 24
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
38650: GO 38799
38652: LD_INT 51
38654: DOUBLE
38655: EQUAL
38656: IFTRUE 38660
38658: GO 38686
38660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38661: LD_ADDR_VAR 0 3
38665: PUSH
38666: LD_INT 21
38668: PUSH
38669: LD_INT 22
38671: PUSH
38672: LD_INT 23
38674: PUSH
38675: LD_INT 24
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: ST_TO_ADDR
38684: GO 38799
38686: LD_INT 52
38688: DOUBLE
38689: EQUAL
38690: IFTRUE 38694
38692: GO 38720
38694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38695: LD_ADDR_VAR 0 3
38699: PUSH
38700: LD_INT 21
38702: PUSH
38703: LD_INT 22
38705: PUSH
38706: LD_INT 23
38708: PUSH
38709: LD_INT 24
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: ST_TO_ADDR
38718: GO 38799
38720: LD_INT 53
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38728
38726: GO 38746
38728: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38729: LD_ADDR_VAR 0 3
38733: PUSH
38734: LD_INT 23
38736: PUSH
38737: LD_INT 24
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: ST_TO_ADDR
38744: GO 38799
38746: LD_INT 46
38748: DOUBLE
38749: EQUAL
38750: IFTRUE 38754
38752: GO 38772
38754: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38755: LD_ADDR_VAR 0 3
38759: PUSH
38760: LD_INT 23
38762: PUSH
38763: LD_INT 24
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: ST_TO_ADDR
38770: GO 38799
38772: LD_INT 47
38774: DOUBLE
38775: EQUAL
38776: IFTRUE 38780
38778: GO 38798
38780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38781: LD_ADDR_VAR 0 3
38785: PUSH
38786: LD_INT 23
38788: PUSH
38789: LD_INT 24
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: ST_TO_ADDR
38796: GO 38799
38798: POP
// result := ( chassis in result ) ;
38799: LD_ADDR_VAR 0 3
38803: PUSH
38804: LD_VAR 0 1
38808: PUSH
38809: LD_VAR 0 3
38813: IN
38814: ST_TO_ADDR
// end ;
38815: LD_VAR 0 3
38819: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38820: LD_INT 0
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
// result := array ;
38829: LD_ADDR_VAR 0 5
38833: PUSH
38834: LD_VAR 0 1
38838: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38839: LD_VAR 0 1
38843: NOT
38844: PUSH
38845: LD_VAR 0 2
38849: NOT
38850: OR
38851: PUSH
38852: LD_VAR 0 3
38856: NOT
38857: OR
38858: PUSH
38859: LD_VAR 0 2
38863: PUSH
38864: LD_VAR 0 1
38868: GREATER
38869: OR
38870: PUSH
38871: LD_VAR 0 3
38875: PUSH
38876: LD_VAR 0 1
38880: GREATER
38881: OR
38882: IFFALSE 38886
// exit ;
38884: GO 39182
// if direction then
38886: LD_VAR 0 4
38890: IFFALSE 38954
// begin d := 1 ;
38892: LD_ADDR_VAR 0 9
38896: PUSH
38897: LD_INT 1
38899: ST_TO_ADDR
// if i_from > i_to then
38900: LD_VAR 0 2
38904: PUSH
38905: LD_VAR 0 3
38909: GREATER
38910: IFFALSE 38936
// length := ( array - i_from ) + i_to else
38912: LD_ADDR_VAR 0 11
38916: PUSH
38917: LD_VAR 0 1
38921: PUSH
38922: LD_VAR 0 2
38926: MINUS
38927: PUSH
38928: LD_VAR 0 3
38932: PLUS
38933: ST_TO_ADDR
38934: GO 38952
// length := i_to - i_from ;
38936: LD_ADDR_VAR 0 11
38940: PUSH
38941: LD_VAR 0 3
38945: PUSH
38946: LD_VAR 0 2
38950: MINUS
38951: ST_TO_ADDR
// end else
38952: GO 39015
// begin d := - 1 ;
38954: LD_ADDR_VAR 0 9
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: ST_TO_ADDR
// if i_from > i_to then
38963: LD_VAR 0 2
38967: PUSH
38968: LD_VAR 0 3
38972: GREATER
38973: IFFALSE 38993
// length := i_from - i_to else
38975: LD_ADDR_VAR 0 11
38979: PUSH
38980: LD_VAR 0 2
38984: PUSH
38985: LD_VAR 0 3
38989: MINUS
38990: ST_TO_ADDR
38991: GO 39015
// length := ( array - i_to ) + i_from ;
38993: LD_ADDR_VAR 0 11
38997: PUSH
38998: LD_VAR 0 1
39002: PUSH
39003: LD_VAR 0 3
39007: MINUS
39008: PUSH
39009: LD_VAR 0 2
39013: PLUS
39014: ST_TO_ADDR
// end ; if not length then
39015: LD_VAR 0 11
39019: NOT
39020: IFFALSE 39024
// exit ;
39022: GO 39182
// tmp := array ;
39024: LD_ADDR_VAR 0 10
39028: PUSH
39029: LD_VAR 0 1
39033: ST_TO_ADDR
// for i = 1 to length do
39034: LD_ADDR_VAR 0 6
39038: PUSH
39039: DOUBLE
39040: LD_INT 1
39042: DEC
39043: ST_TO_ADDR
39044: LD_VAR 0 11
39048: PUSH
39049: FOR_TO
39050: IFFALSE 39170
// begin for j = 1 to array do
39052: LD_ADDR_VAR 0 7
39056: PUSH
39057: DOUBLE
39058: LD_INT 1
39060: DEC
39061: ST_TO_ADDR
39062: LD_VAR 0 1
39066: PUSH
39067: FOR_TO
39068: IFFALSE 39156
// begin k := j + d ;
39070: LD_ADDR_VAR 0 8
39074: PUSH
39075: LD_VAR 0 7
39079: PUSH
39080: LD_VAR 0 9
39084: PLUS
39085: ST_TO_ADDR
// if k > array then
39086: LD_VAR 0 8
39090: PUSH
39091: LD_VAR 0 1
39095: GREATER
39096: IFFALSE 39106
// k := 1 ;
39098: LD_ADDR_VAR 0 8
39102: PUSH
39103: LD_INT 1
39105: ST_TO_ADDR
// if not k then
39106: LD_VAR 0 8
39110: NOT
39111: IFFALSE 39123
// k := array ;
39113: LD_ADDR_VAR 0 8
39117: PUSH
39118: LD_VAR 0 1
39122: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39123: LD_ADDR_VAR 0 10
39127: PUSH
39128: LD_VAR 0 10
39132: PPUSH
39133: LD_VAR 0 8
39137: PPUSH
39138: LD_VAR 0 1
39142: PUSH
39143: LD_VAR 0 7
39147: ARRAY
39148: PPUSH
39149: CALL_OW 1
39153: ST_TO_ADDR
// end ;
39154: GO 39067
39156: POP
39157: POP
// array := tmp ;
39158: LD_ADDR_VAR 0 1
39162: PUSH
39163: LD_VAR 0 10
39167: ST_TO_ADDR
// end ;
39168: GO 39049
39170: POP
39171: POP
// result := array ;
39172: LD_ADDR_VAR 0 5
39176: PUSH
39177: LD_VAR 0 1
39181: ST_TO_ADDR
// end ;
39182: LD_VAR 0 5
39186: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39187: LD_INT 0
39189: PPUSH
39190: PPUSH
// result := 0 ;
39191: LD_ADDR_VAR 0 3
39195: PUSH
39196: LD_INT 0
39198: ST_TO_ADDR
// if not array or not value in array then
39199: LD_VAR 0 1
39203: NOT
39204: PUSH
39205: LD_VAR 0 2
39209: PUSH
39210: LD_VAR 0 1
39214: IN
39215: NOT
39216: OR
39217: IFFALSE 39221
// exit ;
39219: GO 39275
// for i = 1 to array do
39221: LD_ADDR_VAR 0 4
39225: PUSH
39226: DOUBLE
39227: LD_INT 1
39229: DEC
39230: ST_TO_ADDR
39231: LD_VAR 0 1
39235: PUSH
39236: FOR_TO
39237: IFFALSE 39273
// if value = array [ i ] then
39239: LD_VAR 0 2
39243: PUSH
39244: LD_VAR 0 1
39248: PUSH
39249: LD_VAR 0 4
39253: ARRAY
39254: EQUAL
39255: IFFALSE 39271
// begin result := i ;
39257: LD_ADDR_VAR 0 3
39261: PUSH
39262: LD_VAR 0 4
39266: ST_TO_ADDR
// exit ;
39267: POP
39268: POP
39269: GO 39275
// end ;
39271: GO 39236
39273: POP
39274: POP
// end ;
39275: LD_VAR 0 3
39279: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39280: LD_INT 0
39282: PPUSH
// vc_chassis := chassis ;
39283: LD_ADDR_OWVAR 37
39287: PUSH
39288: LD_VAR 0 1
39292: ST_TO_ADDR
// vc_engine := engine ;
39293: LD_ADDR_OWVAR 39
39297: PUSH
39298: LD_VAR 0 2
39302: ST_TO_ADDR
// vc_control := control ;
39303: LD_ADDR_OWVAR 38
39307: PUSH
39308: LD_VAR 0 3
39312: ST_TO_ADDR
// vc_weapon := weapon ;
39313: LD_ADDR_OWVAR 40
39317: PUSH
39318: LD_VAR 0 4
39322: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39323: LD_ADDR_OWVAR 41
39327: PUSH
39328: LD_VAR 0 5
39332: ST_TO_ADDR
// end ;
39333: LD_VAR 0 6
39337: RET
// export function WantPlant ( unit ) ; var task ; begin
39338: LD_INT 0
39340: PPUSH
39341: PPUSH
// result := false ;
39342: LD_ADDR_VAR 0 2
39346: PUSH
39347: LD_INT 0
39349: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39350: LD_ADDR_VAR 0 3
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: CALL_OW 437
39364: ST_TO_ADDR
// if task then
39365: LD_VAR 0 3
39369: IFFALSE 39397
// if task [ 1 ] [ 1 ] = p then
39371: LD_VAR 0 3
39375: PUSH
39376: LD_INT 1
39378: ARRAY
39379: PUSH
39380: LD_INT 1
39382: ARRAY
39383: PUSH
39384: LD_STRING p
39386: EQUAL
39387: IFFALSE 39397
// result := true ;
39389: LD_ADDR_VAR 0 2
39393: PUSH
39394: LD_INT 1
39396: ST_TO_ADDR
// end ;
39397: LD_VAR 0 2
39401: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39402: LD_INT 0
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
// if pos < 1 then
39408: LD_VAR 0 2
39412: PUSH
39413: LD_INT 1
39415: LESS
39416: IFFALSE 39420
// exit ;
39418: GO 39723
// if pos = 1 then
39420: LD_VAR 0 2
39424: PUSH
39425: LD_INT 1
39427: EQUAL
39428: IFFALSE 39461
// result := Replace ( arr , pos [ 1 ] , value ) else
39430: LD_ADDR_VAR 0 4
39434: PUSH
39435: LD_VAR 0 1
39439: PPUSH
39440: LD_VAR 0 2
39444: PUSH
39445: LD_INT 1
39447: ARRAY
39448: PPUSH
39449: LD_VAR 0 3
39453: PPUSH
39454: CALL_OW 1
39458: ST_TO_ADDR
39459: GO 39723
// begin tmp := arr ;
39461: LD_ADDR_VAR 0 6
39465: PUSH
39466: LD_VAR 0 1
39470: ST_TO_ADDR
// s_arr := [ tmp ] ;
39471: LD_ADDR_VAR 0 7
39475: PUSH
39476: LD_VAR 0 6
39480: PUSH
39481: EMPTY
39482: LIST
39483: ST_TO_ADDR
// for i = 1 to pos - 1 do
39484: LD_ADDR_VAR 0 5
39488: PUSH
39489: DOUBLE
39490: LD_INT 1
39492: DEC
39493: ST_TO_ADDR
39494: LD_VAR 0 2
39498: PUSH
39499: LD_INT 1
39501: MINUS
39502: PUSH
39503: FOR_TO
39504: IFFALSE 39549
// begin tmp := tmp [ pos [ i ] ] ;
39506: LD_ADDR_VAR 0 6
39510: PUSH
39511: LD_VAR 0 6
39515: PUSH
39516: LD_VAR 0 2
39520: PUSH
39521: LD_VAR 0 5
39525: ARRAY
39526: ARRAY
39527: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39528: LD_ADDR_VAR 0 7
39532: PUSH
39533: LD_VAR 0 7
39537: PUSH
39538: LD_VAR 0 6
39542: PUSH
39543: EMPTY
39544: LIST
39545: ADD
39546: ST_TO_ADDR
// end ;
39547: GO 39503
39549: POP
39550: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39551: LD_ADDR_VAR 0 6
39555: PUSH
39556: LD_VAR 0 6
39560: PPUSH
39561: LD_VAR 0 2
39565: PUSH
39566: LD_VAR 0 2
39570: ARRAY
39571: PPUSH
39572: LD_VAR 0 3
39576: PPUSH
39577: CALL_OW 1
39581: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39582: LD_ADDR_VAR 0 7
39586: PUSH
39587: LD_VAR 0 7
39591: PPUSH
39592: LD_VAR 0 7
39596: PPUSH
39597: LD_VAR 0 6
39601: PPUSH
39602: CALL_OW 1
39606: ST_TO_ADDR
// for i = s_arr downto 2 do
39607: LD_ADDR_VAR 0 5
39611: PUSH
39612: DOUBLE
39613: LD_VAR 0 7
39617: INC
39618: ST_TO_ADDR
39619: LD_INT 2
39621: PUSH
39622: FOR_DOWNTO
39623: IFFALSE 39707
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39625: LD_ADDR_VAR 0 6
39629: PUSH
39630: LD_VAR 0 7
39634: PUSH
39635: LD_VAR 0 5
39639: PUSH
39640: LD_INT 1
39642: MINUS
39643: ARRAY
39644: PPUSH
39645: LD_VAR 0 2
39649: PUSH
39650: LD_VAR 0 5
39654: PUSH
39655: LD_INT 1
39657: MINUS
39658: ARRAY
39659: PPUSH
39660: LD_VAR 0 7
39664: PUSH
39665: LD_VAR 0 5
39669: ARRAY
39670: PPUSH
39671: CALL_OW 1
39675: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39676: LD_ADDR_VAR 0 7
39680: PUSH
39681: LD_VAR 0 7
39685: PPUSH
39686: LD_VAR 0 5
39690: PUSH
39691: LD_INT 1
39693: MINUS
39694: PPUSH
39695: LD_VAR 0 6
39699: PPUSH
39700: CALL_OW 1
39704: ST_TO_ADDR
// end ;
39705: GO 39622
39707: POP
39708: POP
// result := s_arr [ 1 ] ;
39709: LD_ADDR_VAR 0 4
39713: PUSH
39714: LD_VAR 0 7
39718: PUSH
39719: LD_INT 1
39721: ARRAY
39722: ST_TO_ADDR
// end ; end ;
39723: LD_VAR 0 4
39727: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39728: LD_INT 0
39730: PPUSH
39731: PPUSH
// if not list then
39732: LD_VAR 0 1
39736: NOT
39737: IFFALSE 39741
// exit ;
39739: GO 39832
// i := list [ pos1 ] ;
39741: LD_ADDR_VAR 0 5
39745: PUSH
39746: LD_VAR 0 1
39750: PUSH
39751: LD_VAR 0 2
39755: ARRAY
39756: ST_TO_ADDR
// if not i then
39757: LD_VAR 0 5
39761: NOT
39762: IFFALSE 39766
// exit ;
39764: GO 39832
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39766: LD_ADDR_VAR 0 1
39770: PUSH
39771: LD_VAR 0 1
39775: PPUSH
39776: LD_VAR 0 2
39780: PPUSH
39781: LD_VAR 0 1
39785: PUSH
39786: LD_VAR 0 3
39790: ARRAY
39791: PPUSH
39792: CALL_OW 1
39796: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39797: LD_ADDR_VAR 0 1
39801: PUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: LD_VAR 0 3
39811: PPUSH
39812: LD_VAR 0 5
39816: PPUSH
39817: CALL_OW 1
39821: ST_TO_ADDR
// result := list ;
39822: LD_ADDR_VAR 0 4
39826: PUSH
39827: LD_VAR 0 1
39831: ST_TO_ADDR
// end ;
39832: LD_VAR 0 4
39836: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39837: LD_INT 0
39839: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 250
39854: PPUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 251
39864: PPUSH
39865: LD_VAR 0 2
39869: PPUSH
39870: LD_VAR 0 3
39874: PPUSH
39875: LD_VAR 0 4
39879: PPUSH
39880: CALL 39890 0 5
39884: ST_TO_ADDR
// end ;
39885: LD_VAR 0 5
39889: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39890: LD_INT 0
39892: PPUSH
39893: PPUSH
39894: PPUSH
39895: PPUSH
// if not list then
39896: LD_VAR 0 3
39900: NOT
39901: IFFALSE 39905
// exit ;
39903: GO 40293
// result := [ ] ;
39905: LD_ADDR_VAR 0 6
39909: PUSH
39910: EMPTY
39911: ST_TO_ADDR
// for i in list do
39912: LD_ADDR_VAR 0 7
39916: PUSH
39917: LD_VAR 0 3
39921: PUSH
39922: FOR_IN
39923: IFFALSE 40125
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39925: LD_ADDR_VAR 0 9
39929: PUSH
39930: LD_VAR 0 7
39934: PPUSH
39935: LD_VAR 0 1
39939: PPUSH
39940: LD_VAR 0 2
39944: PPUSH
39945: CALL_OW 297
39949: ST_TO_ADDR
// if not result then
39950: LD_VAR 0 6
39954: NOT
39955: IFFALSE 39981
// result := [ [ i , tmp ] ] else
39957: LD_ADDR_VAR 0 6
39961: PUSH
39962: LD_VAR 0 7
39966: PUSH
39967: LD_VAR 0 9
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: EMPTY
39977: LIST
39978: ST_TO_ADDR
39979: GO 40123
// begin if result [ result ] [ 2 ] < tmp then
39981: LD_VAR 0 6
39985: PUSH
39986: LD_VAR 0 6
39990: ARRAY
39991: PUSH
39992: LD_INT 2
39994: ARRAY
39995: PUSH
39996: LD_VAR 0 9
40000: LESS
40001: IFFALSE 40043
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40003: LD_ADDR_VAR 0 6
40007: PUSH
40008: LD_VAR 0 6
40012: PPUSH
40013: LD_VAR 0 6
40017: PUSH
40018: LD_INT 1
40020: PLUS
40021: PPUSH
40022: LD_VAR 0 7
40026: PUSH
40027: LD_VAR 0 9
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PPUSH
40036: CALL_OW 2
40040: ST_TO_ADDR
40041: GO 40123
// for j = 1 to result do
40043: LD_ADDR_VAR 0 8
40047: PUSH
40048: DOUBLE
40049: LD_INT 1
40051: DEC
40052: ST_TO_ADDR
40053: LD_VAR 0 6
40057: PUSH
40058: FOR_TO
40059: IFFALSE 40121
// begin if tmp < result [ j ] [ 2 ] then
40061: LD_VAR 0 9
40065: PUSH
40066: LD_VAR 0 6
40070: PUSH
40071: LD_VAR 0 8
40075: ARRAY
40076: PUSH
40077: LD_INT 2
40079: ARRAY
40080: LESS
40081: IFFALSE 40119
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40083: LD_ADDR_VAR 0 6
40087: PUSH
40088: LD_VAR 0 6
40092: PPUSH
40093: LD_VAR 0 8
40097: PPUSH
40098: LD_VAR 0 7
40102: PUSH
40103: LD_VAR 0 9
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PPUSH
40112: CALL_OW 2
40116: ST_TO_ADDR
// break ;
40117: GO 40121
// end ; end ;
40119: GO 40058
40121: POP
40122: POP
// end ; end ;
40123: GO 39922
40125: POP
40126: POP
// if result and not asc then
40127: LD_VAR 0 6
40131: PUSH
40132: LD_VAR 0 4
40136: NOT
40137: AND
40138: IFFALSE 40213
// begin tmp := result ;
40140: LD_ADDR_VAR 0 9
40144: PUSH
40145: LD_VAR 0 6
40149: ST_TO_ADDR
// for i = tmp downto 1 do
40150: LD_ADDR_VAR 0 7
40154: PUSH
40155: DOUBLE
40156: LD_VAR 0 9
40160: INC
40161: ST_TO_ADDR
40162: LD_INT 1
40164: PUSH
40165: FOR_DOWNTO
40166: IFFALSE 40211
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40168: LD_ADDR_VAR 0 6
40172: PUSH
40173: LD_VAR 0 6
40177: PPUSH
40178: LD_VAR 0 9
40182: PUSH
40183: LD_VAR 0 7
40187: MINUS
40188: PUSH
40189: LD_INT 1
40191: PLUS
40192: PPUSH
40193: LD_VAR 0 9
40197: PUSH
40198: LD_VAR 0 7
40202: ARRAY
40203: PPUSH
40204: CALL_OW 1
40208: ST_TO_ADDR
40209: GO 40165
40211: POP
40212: POP
// end ; tmp := [ ] ;
40213: LD_ADDR_VAR 0 9
40217: PUSH
40218: EMPTY
40219: ST_TO_ADDR
// if mode then
40220: LD_VAR 0 5
40224: IFFALSE 40293
// begin for i = 1 to result do
40226: LD_ADDR_VAR 0 7
40230: PUSH
40231: DOUBLE
40232: LD_INT 1
40234: DEC
40235: ST_TO_ADDR
40236: LD_VAR 0 6
40240: PUSH
40241: FOR_TO
40242: IFFALSE 40281
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40244: LD_ADDR_VAR 0 9
40248: PUSH
40249: LD_VAR 0 9
40253: PPUSH
40254: LD_VAR 0 7
40258: PPUSH
40259: LD_VAR 0 6
40263: PUSH
40264: LD_VAR 0 7
40268: ARRAY
40269: PUSH
40270: LD_INT 1
40272: ARRAY
40273: PPUSH
40274: CALL_OW 1
40278: ST_TO_ADDR
40279: GO 40241
40281: POP
40282: POP
// result := tmp ;
40283: LD_ADDR_VAR 0 6
40287: PUSH
40288: LD_VAR 0 9
40292: ST_TO_ADDR
// end ; end ;
40293: LD_VAR 0 6
40297: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40298: LD_INT 0
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40306: LD_ADDR_VAR 0 5
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: ST_TO_ADDR
// if not x or not y then
40328: LD_VAR 0 2
40332: NOT
40333: PUSH
40334: LD_VAR 0 3
40338: NOT
40339: OR
40340: IFFALSE 40344
// exit ;
40342: GO 41996
// if not range then
40344: LD_VAR 0 4
40348: NOT
40349: IFFALSE 40359
// range := 10 ;
40351: LD_ADDR_VAR 0 4
40355: PUSH
40356: LD_INT 10
40358: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40359: LD_ADDR_VAR 0 8
40363: PUSH
40364: LD_INT 81
40366: PUSH
40367: LD_VAR 0 1
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 92
40378: PUSH
40379: LD_VAR 0 2
40383: PUSH
40384: LD_VAR 0 3
40388: PUSH
40389: LD_VAR 0 4
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 3
40402: PUSH
40403: LD_INT 21
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: LIST
40421: PPUSH
40422: CALL_OW 69
40426: ST_TO_ADDR
// if not tmp then
40427: LD_VAR 0 8
40431: NOT
40432: IFFALSE 40436
// exit ;
40434: GO 41996
// for i in tmp do
40436: LD_ADDR_VAR 0 6
40440: PUSH
40441: LD_VAR 0 8
40445: PUSH
40446: FOR_IN
40447: IFFALSE 41971
// begin points := [ 0 , 0 , 0 ] ;
40449: LD_ADDR_VAR 0 9
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: LIST
40467: ST_TO_ADDR
// bpoints := 1 ;
40468: LD_ADDR_VAR 0 10
40472: PUSH
40473: LD_INT 1
40475: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40476: LD_VAR 0 6
40480: PPUSH
40481: CALL_OW 247
40485: PUSH
40486: LD_INT 1
40488: DOUBLE
40489: EQUAL
40490: IFTRUE 40494
40492: GO 41072
40494: POP
// begin if GetClass ( i ) = 1 then
40495: LD_VAR 0 6
40499: PPUSH
40500: CALL_OW 257
40504: PUSH
40505: LD_INT 1
40507: EQUAL
40508: IFFALSE 40529
// points := [ 10 , 5 , 3 ] ;
40510: LD_ADDR_VAR 0 9
40514: PUSH
40515: LD_INT 10
40517: PUSH
40518: LD_INT 5
40520: PUSH
40521: LD_INT 3
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: LIST
40528: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40529: LD_VAR 0 6
40533: PPUSH
40534: CALL_OW 257
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: LD_INT 3
40544: PUSH
40545: LD_INT 4
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: LIST
40552: IN
40553: IFFALSE 40574
// points := [ 3 , 2 , 1 ] ;
40555: LD_ADDR_VAR 0 9
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40574: LD_VAR 0 6
40578: PPUSH
40579: CALL_OW 257
40583: PUSH
40584: LD_INT 5
40586: EQUAL
40587: IFFALSE 40608
// points := [ 130 , 5 , 2 ] ;
40589: LD_ADDR_VAR 0 9
40593: PUSH
40594: LD_INT 130
40596: PUSH
40597: LD_INT 5
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40608: LD_VAR 0 6
40612: PPUSH
40613: CALL_OW 257
40617: PUSH
40618: LD_INT 8
40620: EQUAL
40621: IFFALSE 40642
// points := [ 35 , 35 , 30 ] ;
40623: LD_ADDR_VAR 0 9
40627: PUSH
40628: LD_INT 35
40630: PUSH
40631: LD_INT 35
40633: PUSH
40634: LD_INT 30
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: LIST
40641: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40642: LD_VAR 0 6
40646: PPUSH
40647: CALL_OW 257
40651: PUSH
40652: LD_INT 9
40654: EQUAL
40655: IFFALSE 40676
// points := [ 20 , 55 , 40 ] ;
40657: LD_ADDR_VAR 0 9
40661: PUSH
40662: LD_INT 20
40664: PUSH
40665: LD_INT 55
40667: PUSH
40668: LD_INT 40
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40676: LD_VAR 0 6
40680: PPUSH
40681: CALL_OW 257
40685: PUSH
40686: LD_INT 12
40688: PUSH
40689: LD_INT 16
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: IN
40696: IFFALSE 40717
// points := [ 5 , 3 , 2 ] ;
40698: LD_ADDR_VAR 0 9
40702: PUSH
40703: LD_INT 5
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40717: LD_VAR 0 6
40721: PPUSH
40722: CALL_OW 257
40726: PUSH
40727: LD_INT 17
40729: EQUAL
40730: IFFALSE 40751
// points := [ 100 , 50 , 75 ] ;
40732: LD_ADDR_VAR 0 9
40736: PUSH
40737: LD_INT 100
40739: PUSH
40740: LD_INT 50
40742: PUSH
40743: LD_INT 75
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40751: LD_VAR 0 6
40755: PPUSH
40756: CALL_OW 257
40760: PUSH
40761: LD_INT 15
40763: EQUAL
40764: IFFALSE 40785
// points := [ 10 , 5 , 3 ] ;
40766: LD_ADDR_VAR 0 9
40770: PUSH
40771: LD_INT 10
40773: PUSH
40774: LD_INT 5
40776: PUSH
40777: LD_INT 3
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40785: LD_VAR 0 6
40789: PPUSH
40790: CALL_OW 257
40794: PUSH
40795: LD_INT 14
40797: EQUAL
40798: IFFALSE 40819
// points := [ 10 , 0 , 0 ] ;
40800: LD_ADDR_VAR 0 9
40804: PUSH
40805: LD_INT 10
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40819: LD_VAR 0 6
40823: PPUSH
40824: CALL_OW 257
40828: PUSH
40829: LD_INT 11
40831: EQUAL
40832: IFFALSE 40853
// points := [ 30 , 10 , 5 ] ;
40834: LD_ADDR_VAR 0 9
40838: PUSH
40839: LD_INT 30
40841: PUSH
40842: LD_INT 10
40844: PUSH
40845: LD_INT 5
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40853: LD_VAR 0 1
40857: PPUSH
40858: LD_INT 5
40860: PPUSH
40861: CALL_OW 321
40865: PUSH
40866: LD_INT 2
40868: EQUAL
40869: IFFALSE 40886
// bpoints := bpoints * 1.8 ;
40871: LD_ADDR_VAR 0 10
40875: PUSH
40876: LD_VAR 0 10
40880: PUSH
40881: LD_REAL  1.80000000000000E+0000
40884: MUL
40885: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40886: LD_VAR 0 6
40890: PPUSH
40891: CALL_OW 257
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 3
40904: PUSH
40905: LD_INT 4
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: IN
40914: PUSH
40915: LD_VAR 0 1
40919: PPUSH
40920: LD_INT 51
40922: PPUSH
40923: CALL_OW 321
40927: PUSH
40928: LD_INT 2
40930: EQUAL
40931: AND
40932: IFFALSE 40949
// bpoints := bpoints * 1.2 ;
40934: LD_ADDR_VAR 0 10
40938: PUSH
40939: LD_VAR 0 10
40943: PUSH
40944: LD_REAL  1.20000000000000E+0000
40947: MUL
40948: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40949: LD_VAR 0 6
40953: PPUSH
40954: CALL_OW 257
40958: PUSH
40959: LD_INT 5
40961: PUSH
40962: LD_INT 7
40964: PUSH
40965: LD_INT 9
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: IN
40973: PUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: LD_INT 52
40981: PPUSH
40982: CALL_OW 321
40986: PUSH
40987: LD_INT 2
40989: EQUAL
40990: AND
40991: IFFALSE 41008
// bpoints := bpoints * 1.5 ;
40993: LD_ADDR_VAR 0 10
40997: PUSH
40998: LD_VAR 0 10
41002: PUSH
41003: LD_REAL  1.50000000000000E+0000
41006: MUL
41007: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41008: LD_VAR 0 1
41012: PPUSH
41013: LD_INT 66
41015: PPUSH
41016: CALL_OW 321
41020: PUSH
41021: LD_INT 2
41023: EQUAL
41024: IFFALSE 41041
// bpoints := bpoints * 1.1 ;
41026: LD_ADDR_VAR 0 10
41030: PUSH
41031: LD_VAR 0 10
41035: PUSH
41036: LD_REAL  1.10000000000000E+0000
41039: MUL
41040: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41041: LD_ADDR_VAR 0 10
41045: PUSH
41046: LD_VAR 0 10
41050: PUSH
41051: LD_VAR 0 6
41055: PPUSH
41056: LD_INT 1
41058: PPUSH
41059: CALL_OW 259
41063: PUSH
41064: LD_REAL  1.15000000000000E+0000
41067: MUL
41068: MUL
41069: ST_TO_ADDR
// end ; unit_vehicle :
41070: GO 41900
41072: LD_INT 2
41074: DOUBLE
41075: EQUAL
41076: IFTRUE 41080
41078: GO 41888
41080: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41081: LD_VAR 0 6
41085: PPUSH
41086: CALL_OW 264
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 42
41096: PUSH
41097: LD_INT 24
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: IN
41105: IFFALSE 41126
// points := [ 25 , 5 , 3 ] ;
41107: LD_ADDR_VAR 0 9
41111: PUSH
41112: LD_INT 25
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: LD_INT 3
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41126: LD_VAR 0 6
41130: PPUSH
41131: CALL_OW 264
41135: PUSH
41136: LD_INT 4
41138: PUSH
41139: LD_INT 43
41141: PUSH
41142: LD_INT 25
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: LIST
41149: IN
41150: IFFALSE 41171
// points := [ 40 , 15 , 5 ] ;
41152: LD_ADDR_VAR 0 9
41156: PUSH
41157: LD_INT 40
41159: PUSH
41160: LD_INT 15
41162: PUSH
41163: LD_INT 5
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41171: LD_VAR 0 6
41175: PPUSH
41176: CALL_OW 264
41180: PUSH
41181: LD_INT 3
41183: PUSH
41184: LD_INT 23
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: IN
41191: IFFALSE 41212
// points := [ 7 , 25 , 8 ] ;
41193: LD_ADDR_VAR 0 9
41197: PUSH
41198: LD_INT 7
41200: PUSH
41201: LD_INT 25
41203: PUSH
41204: LD_INT 8
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41212: LD_VAR 0 6
41216: PPUSH
41217: CALL_OW 264
41221: PUSH
41222: LD_INT 5
41224: PUSH
41225: LD_INT 27
41227: PUSH
41228: LD_INT 44
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: LIST
41235: IN
41236: IFFALSE 41257
// points := [ 14 , 50 , 16 ] ;
41238: LD_ADDR_VAR 0 9
41242: PUSH
41243: LD_INT 14
41245: PUSH
41246: LD_INT 50
41248: PUSH
41249: LD_INT 16
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41257: LD_VAR 0 6
41261: PPUSH
41262: CALL_OW 264
41266: PUSH
41267: LD_INT 6
41269: PUSH
41270: LD_INT 46
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: IN
41277: IFFALSE 41298
// points := [ 32 , 120 , 70 ] ;
41279: LD_ADDR_VAR 0 9
41283: PUSH
41284: LD_INT 32
41286: PUSH
41287: LD_INT 120
41289: PUSH
41290: LD_INT 70
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41298: LD_VAR 0 6
41302: PPUSH
41303: CALL_OW 264
41307: PUSH
41308: LD_INT 7
41310: PUSH
41311: LD_INT 28
41313: PUSH
41314: LD_INT 45
41316: PUSH
41317: LD_EXP 124
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: IN
41328: IFFALSE 41349
// points := [ 35 , 20 , 45 ] ;
41330: LD_ADDR_VAR 0 9
41334: PUSH
41335: LD_INT 35
41337: PUSH
41338: LD_INT 20
41340: PUSH
41341: LD_INT 45
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41349: LD_VAR 0 6
41353: PPUSH
41354: CALL_OW 264
41358: PUSH
41359: LD_INT 47
41361: PUSH
41362: EMPTY
41363: LIST
41364: IN
41365: IFFALSE 41386
// points := [ 67 , 45 , 75 ] ;
41367: LD_ADDR_VAR 0 9
41371: PUSH
41372: LD_INT 67
41374: PUSH
41375: LD_INT 45
41377: PUSH
41378: LD_INT 75
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: LIST
41385: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41386: LD_VAR 0 6
41390: PPUSH
41391: CALL_OW 264
41395: PUSH
41396: LD_INT 26
41398: PUSH
41399: EMPTY
41400: LIST
41401: IN
41402: IFFALSE 41423
// points := [ 120 , 30 , 80 ] ;
41404: LD_ADDR_VAR 0 9
41408: PUSH
41409: LD_INT 120
41411: PUSH
41412: LD_INT 30
41414: PUSH
41415: LD_INT 80
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41423: LD_VAR 0 6
41427: PPUSH
41428: CALL_OW 264
41432: PUSH
41433: LD_INT 22
41435: PUSH
41436: EMPTY
41437: LIST
41438: IN
41439: IFFALSE 41460
// points := [ 40 , 1 , 1 ] ;
41441: LD_ADDR_VAR 0 9
41445: PUSH
41446: LD_INT 40
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41460: LD_VAR 0 6
41464: PPUSH
41465: CALL_OW 264
41469: PUSH
41470: LD_INT 29
41472: PUSH
41473: EMPTY
41474: LIST
41475: IN
41476: IFFALSE 41497
// points := [ 70 , 200 , 400 ] ;
41478: LD_ADDR_VAR 0 9
41482: PUSH
41483: LD_INT 70
41485: PUSH
41486: LD_INT 200
41488: PUSH
41489: LD_INT 400
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: LIST
41496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41497: LD_VAR 0 6
41501: PPUSH
41502: CALL_OW 264
41506: PUSH
41507: LD_INT 14
41509: PUSH
41510: LD_INT 53
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: IN
41517: IFFALSE 41538
// points := [ 40 , 10 , 20 ] ;
41519: LD_ADDR_VAR 0 9
41523: PUSH
41524: LD_INT 40
41526: PUSH
41527: LD_INT 10
41529: PUSH
41530: LD_INT 20
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: LIST
41537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41538: LD_VAR 0 6
41542: PPUSH
41543: CALL_OW 264
41547: PUSH
41548: LD_INT 9
41550: PUSH
41551: EMPTY
41552: LIST
41553: IN
41554: IFFALSE 41575
// points := [ 5 , 70 , 20 ] ;
41556: LD_ADDR_VAR 0 9
41560: PUSH
41561: LD_INT 5
41563: PUSH
41564: LD_INT 70
41566: PUSH
41567: LD_INT 20
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: LIST
41574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41575: LD_VAR 0 6
41579: PPUSH
41580: CALL_OW 264
41584: PUSH
41585: LD_INT 10
41587: PUSH
41588: EMPTY
41589: LIST
41590: IN
41591: IFFALSE 41612
// points := [ 35 , 110 , 70 ] ;
41593: LD_ADDR_VAR 0 9
41597: PUSH
41598: LD_INT 35
41600: PUSH
41601: LD_INT 110
41603: PUSH
41604: LD_INT 70
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41612: LD_VAR 0 6
41616: PPUSH
41617: CALL_OW 265
41621: PUSH
41622: LD_INT 25
41624: EQUAL
41625: IFFALSE 41646
// points := [ 80 , 65 , 100 ] ;
41627: LD_ADDR_VAR 0 9
41631: PUSH
41632: LD_INT 80
41634: PUSH
41635: LD_INT 65
41637: PUSH
41638: LD_INT 100
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41646: LD_VAR 0 6
41650: PPUSH
41651: CALL_OW 263
41655: PUSH
41656: LD_INT 1
41658: EQUAL
41659: IFFALSE 41694
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41661: LD_ADDR_VAR 0 10
41665: PUSH
41666: LD_VAR 0 10
41670: PUSH
41671: LD_VAR 0 6
41675: PPUSH
41676: CALL_OW 311
41680: PPUSH
41681: LD_INT 3
41683: PPUSH
41684: CALL_OW 259
41688: PUSH
41689: LD_INT 4
41691: MUL
41692: MUL
41693: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41694: LD_VAR 0 6
41698: PPUSH
41699: CALL_OW 263
41703: PUSH
41704: LD_INT 2
41706: EQUAL
41707: IFFALSE 41758
// begin j := IsControledBy ( i ) ;
41709: LD_ADDR_VAR 0 7
41713: PUSH
41714: LD_VAR 0 6
41718: PPUSH
41719: CALL_OW 312
41723: ST_TO_ADDR
// if j then
41724: LD_VAR 0 7
41728: IFFALSE 41758
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41730: LD_ADDR_VAR 0 10
41734: PUSH
41735: LD_VAR 0 10
41739: PUSH
41740: LD_VAR 0 7
41744: PPUSH
41745: LD_INT 3
41747: PPUSH
41748: CALL_OW 259
41752: PUSH
41753: LD_INT 3
41755: MUL
41756: MUL
41757: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41758: LD_VAR 0 6
41762: PPUSH
41763: CALL_OW 264
41767: PUSH
41768: LD_INT 5
41770: PUSH
41771: LD_INT 6
41773: PUSH
41774: LD_INT 46
41776: PUSH
41777: LD_INT 44
41779: PUSH
41780: LD_INT 47
41782: PUSH
41783: LD_INT 45
41785: PUSH
41786: LD_INT 28
41788: PUSH
41789: LD_INT 7
41791: PUSH
41792: LD_INT 27
41794: PUSH
41795: LD_INT 29
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: IN
41810: PUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: LD_INT 52
41818: PPUSH
41819: CALL_OW 321
41823: PUSH
41824: LD_INT 2
41826: EQUAL
41827: AND
41828: IFFALSE 41845
// bpoints := bpoints * 1.2 ;
41830: LD_ADDR_VAR 0 10
41834: PUSH
41835: LD_VAR 0 10
41839: PUSH
41840: LD_REAL  1.20000000000000E+0000
41843: MUL
41844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41845: LD_VAR 0 6
41849: PPUSH
41850: CALL_OW 264
41854: PUSH
41855: LD_INT 6
41857: PUSH
41858: LD_INT 46
41860: PUSH
41861: LD_INT 47
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: IN
41869: IFFALSE 41886
// bpoints := bpoints * 1.2 ;
41871: LD_ADDR_VAR 0 10
41875: PUSH
41876: LD_VAR 0 10
41880: PUSH
41881: LD_REAL  1.20000000000000E+0000
41884: MUL
41885: ST_TO_ADDR
// end ; unit_building :
41886: GO 41900
41888: LD_INT 3
41890: DOUBLE
41891: EQUAL
41892: IFTRUE 41896
41894: GO 41899
41896: POP
// ; end ;
41897: GO 41900
41899: POP
// for j = 1 to 3 do
41900: LD_ADDR_VAR 0 7
41904: PUSH
41905: DOUBLE
41906: LD_INT 1
41908: DEC
41909: ST_TO_ADDR
41910: LD_INT 3
41912: PUSH
41913: FOR_TO
41914: IFFALSE 41967
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41916: LD_ADDR_VAR 0 5
41920: PUSH
41921: LD_VAR 0 5
41925: PPUSH
41926: LD_VAR 0 7
41930: PPUSH
41931: LD_VAR 0 5
41935: PUSH
41936: LD_VAR 0 7
41940: ARRAY
41941: PUSH
41942: LD_VAR 0 9
41946: PUSH
41947: LD_VAR 0 7
41951: ARRAY
41952: PUSH
41953: LD_VAR 0 10
41957: MUL
41958: PLUS
41959: PPUSH
41960: CALL_OW 1
41964: ST_TO_ADDR
41965: GO 41913
41967: POP
41968: POP
// end ;
41969: GO 40446
41971: POP
41972: POP
// result := Replace ( result , 4 , tmp ) ;
41973: LD_ADDR_VAR 0 5
41977: PUSH
41978: LD_VAR 0 5
41982: PPUSH
41983: LD_INT 4
41985: PPUSH
41986: LD_VAR 0 8
41990: PPUSH
41991: CALL_OW 1
41995: ST_TO_ADDR
// end ;
41996: LD_VAR 0 5
42000: RET
// export function DangerAtRange ( unit , range ) ; begin
42001: LD_INT 0
42003: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42004: LD_ADDR_VAR 0 3
42008: PUSH
42009: LD_VAR 0 1
42013: PPUSH
42014: CALL_OW 255
42018: PPUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 250
42028: PPUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: CALL_OW 251
42038: PPUSH
42039: LD_VAR 0 2
42043: PPUSH
42044: CALL 40298 0 4
42048: ST_TO_ADDR
// end ;
42049: LD_VAR 0 3
42053: RET
// export function DangerInArea ( side , area ) ; begin
42054: LD_INT 0
42056: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42057: LD_ADDR_VAR 0 3
42061: PUSH
42062: LD_VAR 0 2
42066: PPUSH
42067: LD_INT 81
42069: PUSH
42070: LD_VAR 0 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PPUSH
42079: CALL_OW 70
42083: ST_TO_ADDR
// end ;
42084: LD_VAR 0 3
42088: RET
// export function IsExtension ( b ) ; begin
42089: LD_INT 0
42091: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42092: LD_ADDR_VAR 0 2
42096: PUSH
42097: LD_VAR 0 1
42101: PUSH
42102: LD_INT 23
42104: PUSH
42105: LD_INT 20
42107: PUSH
42108: LD_INT 22
42110: PUSH
42111: LD_INT 17
42113: PUSH
42114: LD_INT 24
42116: PUSH
42117: LD_INT 21
42119: PUSH
42120: LD_INT 19
42122: PUSH
42123: LD_INT 16
42125: PUSH
42126: LD_INT 25
42128: PUSH
42129: LD_INT 18
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: IN
42144: ST_TO_ADDR
// end ;
42145: LD_VAR 0 2
42149: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42150: LD_INT 0
42152: PPUSH
42153: PPUSH
42154: PPUSH
// result := [ ] ;
42155: LD_ADDR_VAR 0 4
42159: PUSH
42160: EMPTY
42161: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42162: LD_ADDR_VAR 0 5
42166: PUSH
42167: LD_VAR 0 2
42171: PPUSH
42172: LD_INT 21
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PPUSH
42182: CALL_OW 70
42186: ST_TO_ADDR
// if not tmp then
42187: LD_VAR 0 5
42191: NOT
42192: IFFALSE 42196
// exit ;
42194: GO 42260
// if checkLink then
42196: LD_VAR 0 3
42200: IFFALSE 42250
// begin for i in tmp do
42202: LD_ADDR_VAR 0 6
42206: PUSH
42207: LD_VAR 0 5
42211: PUSH
42212: FOR_IN
42213: IFFALSE 42248
// if GetBase ( i ) <> base then
42215: LD_VAR 0 6
42219: PPUSH
42220: CALL_OW 274
42224: PUSH
42225: LD_VAR 0 1
42229: NONEQUAL
42230: IFFALSE 42246
// ComLinkToBase ( base , i ) ;
42232: LD_VAR 0 1
42236: PPUSH
42237: LD_VAR 0 6
42241: PPUSH
42242: CALL_OW 169
42246: GO 42212
42248: POP
42249: POP
// end ; result := tmp ;
42250: LD_ADDR_VAR 0 4
42254: PUSH
42255: LD_VAR 0 5
42259: ST_TO_ADDR
// end ;
42260: LD_VAR 0 4
42264: RET
// export function ComComplete ( units , b ) ; var i ; begin
42265: LD_INT 0
42267: PPUSH
42268: PPUSH
// if not units then
42269: LD_VAR 0 1
42273: NOT
42274: IFFALSE 42278
// exit ;
42276: GO 42368
// for i in units do
42278: LD_ADDR_VAR 0 4
42282: PUSH
42283: LD_VAR 0 1
42287: PUSH
42288: FOR_IN
42289: IFFALSE 42366
// if BuildingStatus ( b ) = bs_build then
42291: LD_VAR 0 2
42295: PPUSH
42296: CALL_OW 461
42300: PUSH
42301: LD_INT 1
42303: EQUAL
42304: IFFALSE 42364
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42306: LD_VAR 0 4
42310: PPUSH
42311: LD_STRING h
42313: PUSH
42314: LD_VAR 0 2
42318: PPUSH
42319: CALL_OW 250
42323: PUSH
42324: LD_VAR 0 2
42328: PPUSH
42329: CALL_OW 251
42333: PUSH
42334: LD_VAR 0 2
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: PPUSH
42360: CALL_OW 446
42364: GO 42288
42366: POP
42367: POP
// end ;
42368: LD_VAR 0 3
42372: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42373: LD_INT 0
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
42380: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
42381: LD_VAR 0 1
42385: NOT
42386: PUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 263
42396: PUSH
42397: LD_INT 2
42399: EQUAL
42400: NOT
42401: OR
42402: IFFALSE 42406
// exit ;
42404: GO 42722
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42406: LD_ADDR_VAR 0 6
42410: PUSH
42411: LD_INT 22
42413: PUSH
42414: LD_VAR 0 1
42418: PPUSH
42419: CALL_OW 255
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 30
42433: PUSH
42434: LD_INT 36
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 34
42443: PUSH
42444: LD_INT 31
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PPUSH
42460: CALL_OW 69
42464: ST_TO_ADDR
// if not tmp then
42465: LD_VAR 0 6
42469: NOT
42470: IFFALSE 42474
// exit ;
42472: GO 42722
// result := [ ] ;
42474: LD_ADDR_VAR 0 2
42478: PUSH
42479: EMPTY
42480: ST_TO_ADDR
// for i in tmp do
42481: LD_ADDR_VAR 0 3
42485: PUSH
42486: LD_VAR 0 6
42490: PUSH
42491: FOR_IN
42492: IFFALSE 42563
// begin t := UnitsInside ( i ) ;
42494: LD_ADDR_VAR 0 4
42498: PUSH
42499: LD_VAR 0 3
42503: PPUSH
42504: CALL_OW 313
42508: ST_TO_ADDR
// if t then
42509: LD_VAR 0 4
42513: IFFALSE 42561
// for j in t do
42515: LD_ADDR_VAR 0 7
42519: PUSH
42520: LD_VAR 0 4
42524: PUSH
42525: FOR_IN
42526: IFFALSE 42559
// result := Insert ( result , result + 1 , j ) ;
42528: LD_ADDR_VAR 0 2
42532: PUSH
42533: LD_VAR 0 2
42537: PPUSH
42538: LD_VAR 0 2
42542: PUSH
42543: LD_INT 1
42545: PLUS
42546: PPUSH
42547: LD_VAR 0 7
42551: PPUSH
42552: CALL_OW 2
42556: ST_TO_ADDR
42557: GO 42525
42559: POP
42560: POP
// end ;
42561: GO 42491
42563: POP
42564: POP
// if not result then
42565: LD_VAR 0 2
42569: NOT
42570: IFFALSE 42574
// exit ;
42572: GO 42722
// mech := result [ 1 ] ;
42574: LD_ADDR_VAR 0 5
42578: PUSH
42579: LD_VAR 0 2
42583: PUSH
42584: LD_INT 1
42586: ARRAY
42587: ST_TO_ADDR
// if result > 1 then
42588: LD_VAR 0 2
42592: PUSH
42593: LD_INT 1
42595: GREATER
42596: IFFALSE 42708
// for i = 2 to result do
42598: LD_ADDR_VAR 0 3
42602: PUSH
42603: DOUBLE
42604: LD_INT 2
42606: DEC
42607: ST_TO_ADDR
42608: LD_VAR 0 2
42612: PUSH
42613: FOR_TO
42614: IFFALSE 42706
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42616: LD_ADDR_VAR 0 4
42620: PUSH
42621: LD_VAR 0 2
42625: PUSH
42626: LD_VAR 0 3
42630: ARRAY
42631: PPUSH
42632: LD_INT 3
42634: PPUSH
42635: CALL_OW 259
42639: PUSH
42640: LD_VAR 0 2
42644: PUSH
42645: LD_VAR 0 3
42649: ARRAY
42650: PPUSH
42651: CALL_OW 432
42655: MINUS
42656: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42657: LD_VAR 0 4
42661: PUSH
42662: LD_VAR 0 5
42666: PPUSH
42667: LD_INT 3
42669: PPUSH
42670: CALL_OW 259
42674: PUSH
42675: LD_VAR 0 5
42679: PPUSH
42680: CALL_OW 432
42684: MINUS
42685: GREATEREQUAL
42686: IFFALSE 42704
// mech := result [ i ] ;
42688: LD_ADDR_VAR 0 5
42692: PUSH
42693: LD_VAR 0 2
42697: PUSH
42698: LD_VAR 0 3
42702: ARRAY
42703: ST_TO_ADDR
// end ;
42704: GO 42613
42706: POP
42707: POP
// ComLinkTo ( vehicle , mech ) ;
42708: LD_VAR 0 1
42712: PPUSH
42713: LD_VAR 0 5
42717: PPUSH
42718: CALL_OW 135
// end ;
42722: LD_VAR 0 2
42726: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42727: LD_INT 0
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
// result := [ ] ;
42742: LD_ADDR_VAR 0 7
42746: PUSH
42747: EMPTY
42748: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42749: LD_VAR 0 1
42753: PPUSH
42754: CALL_OW 266
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: IN
42769: NOT
42770: IFFALSE 42774
// exit ;
42772: GO 44408
// if name then
42774: LD_VAR 0 3
42778: IFFALSE 42794
// SetBName ( base_dep , name ) ;
42780: LD_VAR 0 1
42784: PPUSH
42785: LD_VAR 0 3
42789: PPUSH
42790: CALL_OW 500
// base := GetBase ( base_dep ) ;
42794: LD_ADDR_VAR 0 15
42798: PUSH
42799: LD_VAR 0 1
42803: PPUSH
42804: CALL_OW 274
42808: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42809: LD_ADDR_VAR 0 16
42813: PUSH
42814: LD_VAR 0 1
42818: PPUSH
42819: CALL_OW 255
42823: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42824: LD_ADDR_VAR 0 17
42828: PUSH
42829: LD_VAR 0 1
42833: PPUSH
42834: CALL_OW 248
42838: ST_TO_ADDR
// if sources then
42839: LD_VAR 0 5
42843: IFFALSE 42890
// for i = 1 to 3 do
42845: LD_ADDR_VAR 0 8
42849: PUSH
42850: DOUBLE
42851: LD_INT 1
42853: DEC
42854: ST_TO_ADDR
42855: LD_INT 3
42857: PUSH
42858: FOR_TO
42859: IFFALSE 42888
// AddResourceType ( base , i , sources [ i ] ) ;
42861: LD_VAR 0 15
42865: PPUSH
42866: LD_VAR 0 8
42870: PPUSH
42871: LD_VAR 0 5
42875: PUSH
42876: LD_VAR 0 8
42880: ARRAY
42881: PPUSH
42882: CALL_OW 276
42886: GO 42858
42888: POP
42889: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42890: LD_ADDR_VAR 0 18
42894: PUSH
42895: LD_VAR 0 15
42899: PPUSH
42900: LD_VAR 0 2
42904: PPUSH
42905: LD_INT 1
42907: PPUSH
42908: CALL 42150 0 3
42912: ST_TO_ADDR
// InitHc ;
42913: CALL_OW 19
// InitUc ;
42917: CALL_OW 18
// uc_side := side ;
42921: LD_ADDR_OWVAR 20
42925: PUSH
42926: LD_VAR 0 16
42930: ST_TO_ADDR
// uc_nation := nation ;
42931: LD_ADDR_OWVAR 21
42935: PUSH
42936: LD_VAR 0 17
42940: ST_TO_ADDR
// if buildings then
42941: LD_VAR 0 18
42945: IFFALSE 44267
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42947: LD_ADDR_VAR 0 19
42951: PUSH
42952: LD_VAR 0 18
42956: PPUSH
42957: LD_INT 2
42959: PUSH
42960: LD_INT 30
42962: PUSH
42963: LD_INT 29
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 30
42972: PUSH
42973: LD_INT 30
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: PPUSH
42985: CALL_OW 72
42989: ST_TO_ADDR
// if tmp then
42990: LD_VAR 0 19
42994: IFFALSE 43042
// for i in tmp do
42996: LD_ADDR_VAR 0 8
43000: PUSH
43001: LD_VAR 0 19
43005: PUSH
43006: FOR_IN
43007: IFFALSE 43040
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43009: LD_VAR 0 8
43013: PPUSH
43014: CALL_OW 250
43018: PPUSH
43019: LD_VAR 0 8
43023: PPUSH
43024: CALL_OW 251
43028: PPUSH
43029: LD_VAR 0 16
43033: PPUSH
43034: CALL_OW 441
43038: GO 43006
43040: POP
43041: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43042: LD_VAR 0 18
43046: PPUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 30
43052: PUSH
43053: LD_INT 32
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 30
43062: PUSH
43063: LD_INT 33
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: LIST
43074: PPUSH
43075: CALL_OW 72
43079: IFFALSE 43167
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43081: LD_ADDR_VAR 0 8
43085: PUSH
43086: LD_VAR 0 18
43090: PPUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 30
43096: PUSH
43097: LD_INT 32
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 30
43106: PUSH
43107: LD_INT 33
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: LIST
43118: PPUSH
43119: CALL_OW 72
43123: PUSH
43124: FOR_IN
43125: IFFALSE 43165
// begin if not GetBWeapon ( i ) then
43127: LD_VAR 0 8
43131: PPUSH
43132: CALL_OW 269
43136: NOT
43137: IFFALSE 43163
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43139: LD_VAR 0 8
43143: PPUSH
43144: LD_VAR 0 8
43148: PPUSH
43149: LD_VAR 0 2
43153: PPUSH
43154: CALL 44413 0 2
43158: PPUSH
43159: CALL_OW 431
// end ;
43163: GO 43124
43165: POP
43166: POP
// end ; for i = 1 to personel do
43167: LD_ADDR_VAR 0 8
43171: PUSH
43172: DOUBLE
43173: LD_INT 1
43175: DEC
43176: ST_TO_ADDR
43177: LD_VAR 0 6
43181: PUSH
43182: FOR_TO
43183: IFFALSE 44247
// begin if i > 4 then
43185: LD_VAR 0 8
43189: PUSH
43190: LD_INT 4
43192: GREATER
43193: IFFALSE 43197
// break ;
43195: GO 44247
// case i of 1 :
43197: LD_VAR 0 8
43201: PUSH
43202: LD_INT 1
43204: DOUBLE
43205: EQUAL
43206: IFTRUE 43210
43208: GO 43290
43210: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43211: LD_ADDR_VAR 0 12
43215: PUSH
43216: LD_VAR 0 18
43220: PPUSH
43221: LD_INT 22
43223: PUSH
43224: LD_VAR 0 16
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 58
43235: PUSH
43236: EMPTY
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 30
43244: PUSH
43245: LD_INT 32
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 30
43254: PUSH
43255: LD_INT 4
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 30
43264: PUSH
43265: LD_INT 5
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: PPUSH
43283: CALL_OW 72
43287: ST_TO_ADDR
43288: GO 43512
43290: LD_INT 2
43292: DOUBLE
43293: EQUAL
43294: IFTRUE 43298
43296: GO 43360
43298: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43299: LD_ADDR_VAR 0 12
43303: PUSH
43304: LD_VAR 0 18
43308: PPUSH
43309: LD_INT 22
43311: PUSH
43312: LD_VAR 0 16
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: LD_INT 30
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 30
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PPUSH
43353: CALL_OW 72
43357: ST_TO_ADDR
43358: GO 43512
43360: LD_INT 3
43362: DOUBLE
43363: EQUAL
43364: IFTRUE 43368
43366: GO 43430
43368: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43369: LD_ADDR_VAR 0 12
43373: PUSH
43374: LD_VAR 0 18
43378: PPUSH
43379: LD_INT 22
43381: PUSH
43382: LD_VAR 0 16
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: LD_INT 30
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 30
43406: PUSH
43407: LD_INT 3
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PPUSH
43423: CALL_OW 72
43427: ST_TO_ADDR
43428: GO 43512
43430: LD_INT 4
43432: DOUBLE
43433: EQUAL
43434: IFTRUE 43438
43436: GO 43511
43438: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43439: LD_ADDR_VAR 0 12
43443: PUSH
43444: LD_VAR 0 18
43448: PPUSH
43449: LD_INT 22
43451: PUSH
43452: LD_VAR 0 16
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 30
43466: PUSH
43467: LD_INT 6
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 30
43476: PUSH
43477: LD_INT 7
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 30
43486: PUSH
43487: LD_INT 8
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PPUSH
43504: CALL_OW 72
43508: ST_TO_ADDR
43509: GO 43512
43511: POP
// if i = 1 then
43512: LD_VAR 0 8
43516: PUSH
43517: LD_INT 1
43519: EQUAL
43520: IFFALSE 43631
// begin tmp := [ ] ;
43522: LD_ADDR_VAR 0 19
43526: PUSH
43527: EMPTY
43528: ST_TO_ADDR
// for j in f do
43529: LD_ADDR_VAR 0 9
43533: PUSH
43534: LD_VAR 0 12
43538: PUSH
43539: FOR_IN
43540: IFFALSE 43613
// if GetBType ( j ) = b_bunker then
43542: LD_VAR 0 9
43546: PPUSH
43547: CALL_OW 266
43551: PUSH
43552: LD_INT 32
43554: EQUAL
43555: IFFALSE 43582
// tmp := Insert ( tmp , 1 , j ) else
43557: LD_ADDR_VAR 0 19
43561: PUSH
43562: LD_VAR 0 19
43566: PPUSH
43567: LD_INT 1
43569: PPUSH
43570: LD_VAR 0 9
43574: PPUSH
43575: CALL_OW 2
43579: ST_TO_ADDR
43580: GO 43611
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43582: LD_ADDR_VAR 0 19
43586: PUSH
43587: LD_VAR 0 19
43591: PPUSH
43592: LD_VAR 0 19
43596: PUSH
43597: LD_INT 1
43599: PLUS
43600: PPUSH
43601: LD_VAR 0 9
43605: PPUSH
43606: CALL_OW 2
43610: ST_TO_ADDR
43611: GO 43539
43613: POP
43614: POP
// if tmp then
43615: LD_VAR 0 19
43619: IFFALSE 43631
// f := tmp ;
43621: LD_ADDR_VAR 0 12
43625: PUSH
43626: LD_VAR 0 19
43630: ST_TO_ADDR
// end ; x := personel [ i ] ;
43631: LD_ADDR_VAR 0 13
43635: PUSH
43636: LD_VAR 0 6
43640: PUSH
43641: LD_VAR 0 8
43645: ARRAY
43646: ST_TO_ADDR
// if x = - 1 then
43647: LD_VAR 0 13
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: EQUAL
43656: IFFALSE 43865
// begin for j in f do
43658: LD_ADDR_VAR 0 9
43662: PUSH
43663: LD_VAR 0 12
43667: PUSH
43668: FOR_IN
43669: IFFALSE 43861
// repeat InitHc ;
43671: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43675: LD_VAR 0 9
43679: PPUSH
43680: CALL_OW 266
43684: PUSH
43685: LD_INT 5
43687: EQUAL
43688: IFFALSE 43758
// begin if UnitsInside ( j ) < 3 then
43690: LD_VAR 0 9
43694: PPUSH
43695: CALL_OW 313
43699: PUSH
43700: LD_INT 3
43702: LESS
43703: IFFALSE 43739
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43705: LD_INT 0
43707: PPUSH
43708: LD_INT 5
43710: PUSH
43711: LD_INT 8
43713: PUSH
43714: LD_INT 9
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: PUSH
43722: LD_VAR 0 17
43726: ARRAY
43727: PPUSH
43728: LD_VAR 0 4
43732: PPUSH
43733: CALL_OW 380
43737: GO 43756
// PrepareHuman ( false , i , skill ) ;
43739: LD_INT 0
43741: PPUSH
43742: LD_VAR 0 8
43746: PPUSH
43747: LD_VAR 0 4
43751: PPUSH
43752: CALL_OW 380
// end else
43756: GO 43775
// PrepareHuman ( false , i , skill ) ;
43758: LD_INT 0
43760: PPUSH
43761: LD_VAR 0 8
43765: PPUSH
43766: LD_VAR 0 4
43770: PPUSH
43771: CALL_OW 380
// un := CreateHuman ;
43775: LD_ADDR_VAR 0 14
43779: PUSH
43780: CALL_OW 44
43784: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43785: LD_ADDR_VAR 0 7
43789: PUSH
43790: LD_VAR 0 7
43794: PPUSH
43795: LD_INT 1
43797: PPUSH
43798: LD_VAR 0 14
43802: PPUSH
43803: CALL_OW 2
43807: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43808: LD_VAR 0 14
43812: PPUSH
43813: LD_VAR 0 9
43817: PPUSH
43818: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43822: LD_VAR 0 9
43826: PPUSH
43827: CALL_OW 313
43831: PUSH
43832: LD_INT 6
43834: EQUAL
43835: PUSH
43836: LD_VAR 0 9
43840: PPUSH
43841: CALL_OW 266
43845: PUSH
43846: LD_INT 32
43848: PUSH
43849: LD_INT 31
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: IN
43856: OR
43857: IFFALSE 43671
43859: GO 43668
43861: POP
43862: POP
// end else
43863: GO 44245
// for j = 1 to x do
43865: LD_ADDR_VAR 0 9
43869: PUSH
43870: DOUBLE
43871: LD_INT 1
43873: DEC
43874: ST_TO_ADDR
43875: LD_VAR 0 13
43879: PUSH
43880: FOR_TO
43881: IFFALSE 44243
// begin InitHc ;
43883: CALL_OW 19
// if not f then
43887: LD_VAR 0 12
43891: NOT
43892: IFFALSE 43981
// begin PrepareHuman ( false , i , skill ) ;
43894: LD_INT 0
43896: PPUSH
43897: LD_VAR 0 8
43901: PPUSH
43902: LD_VAR 0 4
43906: PPUSH
43907: CALL_OW 380
// un := CreateHuman ;
43911: LD_ADDR_VAR 0 14
43915: PUSH
43916: CALL_OW 44
43920: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43921: LD_ADDR_VAR 0 7
43925: PUSH
43926: LD_VAR 0 7
43930: PPUSH
43931: LD_INT 1
43933: PPUSH
43934: LD_VAR 0 14
43938: PPUSH
43939: CALL_OW 2
43943: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43944: LD_VAR 0 14
43948: PPUSH
43949: LD_VAR 0 1
43953: PPUSH
43954: CALL_OW 250
43958: PPUSH
43959: LD_VAR 0 1
43963: PPUSH
43964: CALL_OW 251
43968: PPUSH
43969: LD_INT 10
43971: PPUSH
43972: LD_INT 0
43974: PPUSH
43975: CALL_OW 50
// continue ;
43979: GO 43880
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43981: LD_VAR 0 12
43985: PUSH
43986: LD_INT 1
43988: ARRAY
43989: PPUSH
43990: CALL_OW 313
43994: PUSH
43995: LD_VAR 0 12
43999: PUSH
44000: LD_INT 1
44002: ARRAY
44003: PPUSH
44004: CALL_OW 266
44008: PUSH
44009: LD_INT 32
44011: PUSH
44012: LD_INT 31
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: IN
44019: AND
44020: PUSH
44021: LD_VAR 0 12
44025: PUSH
44026: LD_INT 1
44028: ARRAY
44029: PPUSH
44030: CALL_OW 313
44034: PUSH
44035: LD_INT 6
44037: EQUAL
44038: OR
44039: IFFALSE 44059
// f := Delete ( f , 1 ) ;
44041: LD_ADDR_VAR 0 12
44045: PUSH
44046: LD_VAR 0 12
44050: PPUSH
44051: LD_INT 1
44053: PPUSH
44054: CALL_OW 3
44058: ST_TO_ADDR
// if not f then
44059: LD_VAR 0 12
44063: NOT
44064: IFFALSE 44082
// begin x := x + 2 ;
44066: LD_ADDR_VAR 0 13
44070: PUSH
44071: LD_VAR 0 13
44075: PUSH
44076: LD_INT 2
44078: PLUS
44079: ST_TO_ADDR
// continue ;
44080: GO 43880
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44082: LD_VAR 0 12
44086: PUSH
44087: LD_INT 1
44089: ARRAY
44090: PPUSH
44091: CALL_OW 266
44095: PUSH
44096: LD_INT 5
44098: EQUAL
44099: IFFALSE 44173
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44101: LD_VAR 0 12
44105: PUSH
44106: LD_INT 1
44108: ARRAY
44109: PPUSH
44110: CALL_OW 313
44114: PUSH
44115: LD_INT 3
44117: LESS
44118: IFFALSE 44154
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44120: LD_INT 0
44122: PPUSH
44123: LD_INT 5
44125: PUSH
44126: LD_INT 8
44128: PUSH
44129: LD_INT 9
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: LIST
44136: PUSH
44137: LD_VAR 0 17
44141: ARRAY
44142: PPUSH
44143: LD_VAR 0 4
44147: PPUSH
44148: CALL_OW 380
44152: GO 44171
// PrepareHuman ( false , i , skill ) ;
44154: LD_INT 0
44156: PPUSH
44157: LD_VAR 0 8
44161: PPUSH
44162: LD_VAR 0 4
44166: PPUSH
44167: CALL_OW 380
// end else
44171: GO 44190
// PrepareHuman ( false , i , skill ) ;
44173: LD_INT 0
44175: PPUSH
44176: LD_VAR 0 8
44180: PPUSH
44181: LD_VAR 0 4
44185: PPUSH
44186: CALL_OW 380
// un := CreateHuman ;
44190: LD_ADDR_VAR 0 14
44194: PUSH
44195: CALL_OW 44
44199: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44200: LD_ADDR_VAR 0 7
44204: PUSH
44205: LD_VAR 0 7
44209: PPUSH
44210: LD_INT 1
44212: PPUSH
44213: LD_VAR 0 14
44217: PPUSH
44218: CALL_OW 2
44222: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44223: LD_VAR 0 14
44227: PPUSH
44228: LD_VAR 0 12
44232: PUSH
44233: LD_INT 1
44235: ARRAY
44236: PPUSH
44237: CALL_OW 52
// end ;
44241: GO 43880
44243: POP
44244: POP
// end ;
44245: GO 43182
44247: POP
44248: POP
// result := result ^ buildings ;
44249: LD_ADDR_VAR 0 7
44253: PUSH
44254: LD_VAR 0 7
44258: PUSH
44259: LD_VAR 0 18
44263: ADD
44264: ST_TO_ADDR
// end else
44265: GO 44408
// begin for i = 1 to personel do
44267: LD_ADDR_VAR 0 8
44271: PUSH
44272: DOUBLE
44273: LD_INT 1
44275: DEC
44276: ST_TO_ADDR
44277: LD_VAR 0 6
44281: PUSH
44282: FOR_TO
44283: IFFALSE 44406
// begin if i > 4 then
44285: LD_VAR 0 8
44289: PUSH
44290: LD_INT 4
44292: GREATER
44293: IFFALSE 44297
// break ;
44295: GO 44406
// x := personel [ i ] ;
44297: LD_ADDR_VAR 0 13
44301: PUSH
44302: LD_VAR 0 6
44306: PUSH
44307: LD_VAR 0 8
44311: ARRAY
44312: ST_TO_ADDR
// if x = - 1 then
44313: LD_VAR 0 13
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: EQUAL
44322: IFFALSE 44326
// continue ;
44324: GO 44282
// PrepareHuman ( false , i , skill ) ;
44326: LD_INT 0
44328: PPUSH
44329: LD_VAR 0 8
44333: PPUSH
44334: LD_VAR 0 4
44338: PPUSH
44339: CALL_OW 380
// un := CreateHuman ;
44343: LD_ADDR_VAR 0 14
44347: PUSH
44348: CALL_OW 44
44352: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44353: LD_VAR 0 14
44357: PPUSH
44358: LD_VAR 0 1
44362: PPUSH
44363: CALL_OW 250
44367: PPUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 251
44377: PPUSH
44378: LD_INT 10
44380: PPUSH
44381: LD_INT 0
44383: PPUSH
44384: CALL_OW 50
// result := result ^ un ;
44388: LD_ADDR_VAR 0 7
44392: PUSH
44393: LD_VAR 0 7
44397: PUSH
44398: LD_VAR 0 14
44402: ADD
44403: ST_TO_ADDR
// end ;
44404: GO 44282
44406: POP
44407: POP
// end ; end ;
44408: LD_VAR 0 7
44412: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44413: LD_INT 0
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
44419: PPUSH
44420: PPUSH
44421: PPUSH
44422: PPUSH
44423: PPUSH
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
// result := false ;
44431: LD_ADDR_VAR 0 3
44435: PUSH
44436: LD_INT 0
44438: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44439: LD_VAR 0 1
44443: NOT
44444: PUSH
44445: LD_VAR 0 1
44449: PPUSH
44450: CALL_OW 266
44454: PUSH
44455: LD_INT 32
44457: PUSH
44458: LD_INT 33
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: IN
44465: NOT
44466: OR
44467: IFFALSE 44471
// exit ;
44469: GO 45580
// nat := GetNation ( tower ) ;
44471: LD_ADDR_VAR 0 12
44475: PUSH
44476: LD_VAR 0 1
44480: PPUSH
44481: CALL_OW 248
44485: ST_TO_ADDR
// side := GetSide ( tower ) ;
44486: LD_ADDR_VAR 0 16
44490: PUSH
44491: LD_VAR 0 1
44495: PPUSH
44496: CALL_OW 255
44500: ST_TO_ADDR
// x := GetX ( tower ) ;
44501: LD_ADDR_VAR 0 10
44505: PUSH
44506: LD_VAR 0 1
44510: PPUSH
44511: CALL_OW 250
44515: ST_TO_ADDR
// y := GetY ( tower ) ;
44516: LD_ADDR_VAR 0 11
44520: PUSH
44521: LD_VAR 0 1
44525: PPUSH
44526: CALL_OW 251
44530: ST_TO_ADDR
// if not x or not y then
44531: LD_VAR 0 10
44535: NOT
44536: PUSH
44537: LD_VAR 0 11
44541: NOT
44542: OR
44543: IFFALSE 44547
// exit ;
44545: GO 45580
// weapon := 0 ;
44547: LD_ADDR_VAR 0 18
44551: PUSH
44552: LD_INT 0
44554: ST_TO_ADDR
// fac_list := [ ] ;
44555: LD_ADDR_VAR 0 17
44559: PUSH
44560: EMPTY
44561: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44562: LD_ADDR_VAR 0 6
44566: PUSH
44567: LD_VAR 0 1
44571: PPUSH
44572: CALL_OW 274
44576: PPUSH
44577: LD_VAR 0 2
44581: PPUSH
44582: LD_INT 0
44584: PPUSH
44585: CALL 42150 0 3
44589: PPUSH
44590: LD_INT 30
44592: PUSH
44593: LD_INT 3
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PPUSH
44600: CALL_OW 72
44604: ST_TO_ADDR
// if not factories then
44605: LD_VAR 0 6
44609: NOT
44610: IFFALSE 44614
// exit ;
44612: GO 45580
// for i in factories do
44614: LD_ADDR_VAR 0 8
44618: PUSH
44619: LD_VAR 0 6
44623: PUSH
44624: FOR_IN
44625: IFFALSE 44650
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44627: LD_ADDR_VAR 0 17
44631: PUSH
44632: LD_VAR 0 17
44636: PUSH
44637: LD_VAR 0 8
44641: PPUSH
44642: CALL_OW 478
44646: UNION
44647: ST_TO_ADDR
44648: GO 44624
44650: POP
44651: POP
// if not fac_list then
44652: LD_VAR 0 17
44656: NOT
44657: IFFALSE 44661
// exit ;
44659: GO 45580
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44661: LD_ADDR_VAR 0 5
44665: PUSH
44666: LD_INT 4
44668: PUSH
44669: LD_INT 5
44671: PUSH
44672: LD_INT 9
44674: PUSH
44675: LD_INT 10
44677: PUSH
44678: LD_INT 6
44680: PUSH
44681: LD_INT 7
44683: PUSH
44684: LD_INT 11
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 27
44698: PUSH
44699: LD_INT 28
44701: PUSH
44702: LD_INT 26
44704: PUSH
44705: LD_INT 30
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 43
44716: PUSH
44717: LD_INT 44
44719: PUSH
44720: LD_INT 46
44722: PUSH
44723: LD_INT 45
44725: PUSH
44726: LD_INT 47
44728: PUSH
44729: LD_INT 49
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: PUSH
44745: LD_VAR 0 12
44749: ARRAY
44750: ST_TO_ADDR
// list := list isect fac_list ;
44751: LD_ADDR_VAR 0 5
44755: PUSH
44756: LD_VAR 0 5
44760: PUSH
44761: LD_VAR 0 17
44765: ISECT
44766: ST_TO_ADDR
// if not list then
44767: LD_VAR 0 5
44771: NOT
44772: IFFALSE 44776
// exit ;
44774: GO 45580
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44776: LD_VAR 0 12
44780: PUSH
44781: LD_INT 3
44783: EQUAL
44784: PUSH
44785: LD_INT 49
44787: PUSH
44788: LD_VAR 0 5
44792: IN
44793: AND
44794: PUSH
44795: LD_INT 31
44797: PPUSH
44798: LD_VAR 0 16
44802: PPUSH
44803: CALL_OW 321
44807: PUSH
44808: LD_INT 2
44810: EQUAL
44811: AND
44812: IFFALSE 44872
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44814: LD_INT 22
44816: PUSH
44817: LD_VAR 0 16
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 35
44828: PUSH
44829: LD_INT 49
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 91
44838: PUSH
44839: LD_VAR 0 1
44843: PUSH
44844: LD_INT 10
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: PPUSH
44857: CALL_OW 69
44861: NOT
44862: IFFALSE 44872
// weapon := ru_time_lapser ;
44864: LD_ADDR_VAR 0 18
44868: PUSH
44869: LD_INT 49
44871: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44872: LD_VAR 0 12
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: IN
44887: PUSH
44888: LD_INT 11
44890: PUSH
44891: LD_VAR 0 5
44895: IN
44896: PUSH
44897: LD_INT 30
44899: PUSH
44900: LD_VAR 0 5
44904: IN
44905: OR
44906: AND
44907: PUSH
44908: LD_INT 6
44910: PPUSH
44911: LD_VAR 0 16
44915: PPUSH
44916: CALL_OW 321
44920: PUSH
44921: LD_INT 2
44923: EQUAL
44924: AND
44925: IFFALSE 45090
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44927: LD_INT 22
44929: PUSH
44930: LD_VAR 0 16
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 35
44944: PUSH
44945: LD_INT 11
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 35
44954: PUSH
44955: LD_INT 30
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 91
44969: PUSH
44970: LD_VAR 0 1
44974: PUSH
44975: LD_INT 18
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: PPUSH
44988: CALL_OW 69
44992: NOT
44993: PUSH
44994: LD_INT 22
44996: PUSH
44997: LD_VAR 0 16
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: LD_INT 30
45011: PUSH
45012: LD_INT 32
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 30
45021: PUSH
45022: LD_INT 33
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 91
45036: PUSH
45037: LD_VAR 0 1
45041: PUSH
45042: LD_INT 12
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: PUSH
45055: EMPTY
45056: LIST
45057: PPUSH
45058: CALL_OW 69
45062: PUSH
45063: LD_INT 2
45065: GREATER
45066: AND
45067: IFFALSE 45090
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45069: LD_ADDR_VAR 0 18
45073: PUSH
45074: LD_INT 11
45076: PUSH
45077: LD_INT 30
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_VAR 0 12
45088: ARRAY
45089: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45090: LD_VAR 0 18
45094: NOT
45095: PUSH
45096: LD_INT 40
45098: PPUSH
45099: LD_VAR 0 16
45103: PPUSH
45104: CALL_OW 321
45108: PUSH
45109: LD_INT 2
45111: EQUAL
45112: AND
45113: PUSH
45114: LD_INT 7
45116: PUSH
45117: LD_VAR 0 5
45121: IN
45122: PUSH
45123: LD_INT 28
45125: PUSH
45126: LD_VAR 0 5
45130: IN
45131: OR
45132: PUSH
45133: LD_INT 45
45135: PUSH
45136: LD_VAR 0 5
45140: IN
45141: OR
45142: AND
45143: IFFALSE 45397
// begin hex := GetHexInfo ( x , y ) ;
45145: LD_ADDR_VAR 0 4
45149: PUSH
45150: LD_VAR 0 10
45154: PPUSH
45155: LD_VAR 0 11
45159: PPUSH
45160: CALL_OW 546
45164: ST_TO_ADDR
// if hex [ 1 ] then
45165: LD_VAR 0 4
45169: PUSH
45170: LD_INT 1
45172: ARRAY
45173: IFFALSE 45177
// exit ;
45175: GO 45580
// height := hex [ 2 ] ;
45177: LD_ADDR_VAR 0 15
45181: PUSH
45182: LD_VAR 0 4
45186: PUSH
45187: LD_INT 2
45189: ARRAY
45190: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45191: LD_ADDR_VAR 0 14
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: LD_INT 5
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// for i in tmp do
45214: LD_ADDR_VAR 0 8
45218: PUSH
45219: LD_VAR 0 14
45223: PUSH
45224: FOR_IN
45225: IFFALSE 45395
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45227: LD_ADDR_VAR 0 9
45231: PUSH
45232: LD_VAR 0 10
45236: PPUSH
45237: LD_VAR 0 8
45241: PPUSH
45242: LD_INT 5
45244: PPUSH
45245: CALL_OW 272
45249: PUSH
45250: LD_VAR 0 11
45254: PPUSH
45255: LD_VAR 0 8
45259: PPUSH
45260: LD_INT 5
45262: PPUSH
45263: CALL_OW 273
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45272: LD_VAR 0 9
45276: PUSH
45277: LD_INT 1
45279: ARRAY
45280: PPUSH
45281: LD_VAR 0 9
45285: PUSH
45286: LD_INT 2
45288: ARRAY
45289: PPUSH
45290: CALL_OW 488
45294: IFFALSE 45393
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45296: LD_ADDR_VAR 0 4
45300: PUSH
45301: LD_VAR 0 9
45305: PUSH
45306: LD_INT 1
45308: ARRAY
45309: PPUSH
45310: LD_VAR 0 9
45314: PUSH
45315: LD_INT 2
45317: ARRAY
45318: PPUSH
45319: CALL_OW 546
45323: ST_TO_ADDR
// if hex [ 1 ] then
45324: LD_VAR 0 4
45328: PUSH
45329: LD_INT 1
45331: ARRAY
45332: IFFALSE 45336
// continue ;
45334: GO 45224
// h := hex [ 2 ] ;
45336: LD_ADDR_VAR 0 13
45340: PUSH
45341: LD_VAR 0 4
45345: PUSH
45346: LD_INT 2
45348: ARRAY
45349: ST_TO_ADDR
// if h + 7 < height then
45350: LD_VAR 0 13
45354: PUSH
45355: LD_INT 7
45357: PLUS
45358: PUSH
45359: LD_VAR 0 15
45363: LESS
45364: IFFALSE 45393
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45366: LD_ADDR_VAR 0 18
45370: PUSH
45371: LD_INT 7
45373: PUSH
45374: LD_INT 28
45376: PUSH
45377: LD_INT 45
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: PUSH
45385: LD_VAR 0 12
45389: ARRAY
45390: ST_TO_ADDR
// break ;
45391: GO 45395
// end ; end ; end ;
45393: GO 45224
45395: POP
45396: POP
// end ; if not weapon then
45397: LD_VAR 0 18
45401: NOT
45402: IFFALSE 45462
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45404: LD_ADDR_VAR 0 5
45408: PUSH
45409: LD_VAR 0 5
45413: PUSH
45414: LD_INT 11
45416: PUSH
45417: LD_INT 30
45419: PUSH
45420: LD_INT 49
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: DIFF
45428: ST_TO_ADDR
// if not list then
45429: LD_VAR 0 5
45433: NOT
45434: IFFALSE 45438
// exit ;
45436: GO 45580
// weapon := list [ rand ( 1 , list ) ] ;
45438: LD_ADDR_VAR 0 18
45442: PUSH
45443: LD_VAR 0 5
45447: PUSH
45448: LD_INT 1
45450: PPUSH
45451: LD_VAR 0 5
45455: PPUSH
45456: CALL_OW 12
45460: ARRAY
45461: ST_TO_ADDR
// end ; if weapon then
45462: LD_VAR 0 18
45466: IFFALSE 45580
// begin tmp := CostOfWeapon ( weapon ) ;
45468: LD_ADDR_VAR 0 14
45472: PUSH
45473: LD_VAR 0 18
45477: PPUSH
45478: CALL_OW 451
45482: ST_TO_ADDR
// j := GetBase ( tower ) ;
45483: LD_ADDR_VAR 0 9
45487: PUSH
45488: LD_VAR 0 1
45492: PPUSH
45493: CALL_OW 274
45497: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45498: LD_VAR 0 9
45502: PPUSH
45503: LD_INT 1
45505: PPUSH
45506: CALL_OW 275
45510: PUSH
45511: LD_VAR 0 14
45515: PUSH
45516: LD_INT 1
45518: ARRAY
45519: GREATEREQUAL
45520: PUSH
45521: LD_VAR 0 9
45525: PPUSH
45526: LD_INT 2
45528: PPUSH
45529: CALL_OW 275
45533: PUSH
45534: LD_VAR 0 14
45538: PUSH
45539: LD_INT 2
45541: ARRAY
45542: GREATEREQUAL
45543: AND
45544: PUSH
45545: LD_VAR 0 9
45549: PPUSH
45550: LD_INT 3
45552: PPUSH
45553: CALL_OW 275
45557: PUSH
45558: LD_VAR 0 14
45562: PUSH
45563: LD_INT 3
45565: ARRAY
45566: GREATEREQUAL
45567: AND
45568: IFFALSE 45580
// result := weapon ;
45570: LD_ADDR_VAR 0 3
45574: PUSH
45575: LD_VAR 0 18
45579: ST_TO_ADDR
// end ; end ;
45580: LD_VAR 0 3
45584: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45585: LD_INT 0
45587: PPUSH
45588: PPUSH
// result := true ;
45589: LD_ADDR_VAR 0 3
45593: PUSH
45594: LD_INT 1
45596: ST_TO_ADDR
// if array1 = array2 then
45597: LD_VAR 0 1
45601: PUSH
45602: LD_VAR 0 2
45606: EQUAL
45607: IFFALSE 45667
// begin for i = 1 to array1 do
45609: LD_ADDR_VAR 0 4
45613: PUSH
45614: DOUBLE
45615: LD_INT 1
45617: DEC
45618: ST_TO_ADDR
45619: LD_VAR 0 1
45623: PUSH
45624: FOR_TO
45625: IFFALSE 45663
// if array1 [ i ] <> array2 [ i ] then
45627: LD_VAR 0 1
45631: PUSH
45632: LD_VAR 0 4
45636: ARRAY
45637: PUSH
45638: LD_VAR 0 2
45642: PUSH
45643: LD_VAR 0 4
45647: ARRAY
45648: NONEQUAL
45649: IFFALSE 45661
// begin result := false ;
45651: LD_ADDR_VAR 0 3
45655: PUSH
45656: LD_INT 0
45658: ST_TO_ADDR
// break ;
45659: GO 45663
// end ;
45661: GO 45624
45663: POP
45664: POP
// end else
45665: GO 45675
// result := false ;
45667: LD_ADDR_VAR 0 3
45671: PUSH
45672: LD_INT 0
45674: ST_TO_ADDR
// end ;
45675: LD_VAR 0 3
45679: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45680: LD_INT 0
45682: PPUSH
45683: PPUSH
// if not array1 or not array2 then
45684: LD_VAR 0 1
45688: NOT
45689: PUSH
45690: LD_VAR 0 2
45694: NOT
45695: OR
45696: IFFALSE 45700
// exit ;
45698: GO 45764
// result := true ;
45700: LD_ADDR_VAR 0 3
45704: PUSH
45705: LD_INT 1
45707: ST_TO_ADDR
// for i = 1 to array1 do
45708: LD_ADDR_VAR 0 4
45712: PUSH
45713: DOUBLE
45714: LD_INT 1
45716: DEC
45717: ST_TO_ADDR
45718: LD_VAR 0 1
45722: PUSH
45723: FOR_TO
45724: IFFALSE 45762
// if array1 [ i ] <> array2 [ i ] then
45726: LD_VAR 0 1
45730: PUSH
45731: LD_VAR 0 4
45735: ARRAY
45736: PUSH
45737: LD_VAR 0 2
45741: PUSH
45742: LD_VAR 0 4
45746: ARRAY
45747: NONEQUAL
45748: IFFALSE 45760
// begin result := false ;
45750: LD_ADDR_VAR 0 3
45754: PUSH
45755: LD_INT 0
45757: ST_TO_ADDR
// break ;
45758: GO 45762
// end ;
45760: GO 45723
45762: POP
45763: POP
// end ;
45764: LD_VAR 0 3
45768: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45769: LD_INT 0
45771: PPUSH
45772: PPUSH
45773: PPUSH
// pom := GetBase ( fac ) ;
45774: LD_ADDR_VAR 0 5
45778: PUSH
45779: LD_VAR 0 1
45783: PPUSH
45784: CALL_OW 274
45788: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45789: LD_ADDR_VAR 0 4
45793: PUSH
45794: LD_VAR 0 2
45798: PUSH
45799: LD_INT 1
45801: ARRAY
45802: PPUSH
45803: LD_VAR 0 2
45807: PUSH
45808: LD_INT 2
45810: ARRAY
45811: PPUSH
45812: LD_VAR 0 2
45816: PUSH
45817: LD_INT 3
45819: ARRAY
45820: PPUSH
45821: LD_VAR 0 2
45825: PUSH
45826: LD_INT 4
45828: ARRAY
45829: PPUSH
45830: CALL_OW 449
45834: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45835: LD_ADDR_VAR 0 3
45839: PUSH
45840: LD_VAR 0 5
45844: PPUSH
45845: LD_INT 1
45847: PPUSH
45848: CALL_OW 275
45852: PUSH
45853: LD_VAR 0 4
45857: PUSH
45858: LD_INT 1
45860: ARRAY
45861: GREATEREQUAL
45862: PUSH
45863: LD_VAR 0 5
45867: PPUSH
45868: LD_INT 2
45870: PPUSH
45871: CALL_OW 275
45875: PUSH
45876: LD_VAR 0 4
45880: PUSH
45881: LD_INT 2
45883: ARRAY
45884: GREATEREQUAL
45885: AND
45886: PUSH
45887: LD_VAR 0 5
45891: PPUSH
45892: LD_INT 3
45894: PPUSH
45895: CALL_OW 275
45899: PUSH
45900: LD_VAR 0 4
45904: PUSH
45905: LD_INT 3
45907: ARRAY
45908: GREATEREQUAL
45909: AND
45910: ST_TO_ADDR
// end ;
45911: LD_VAR 0 3
45915: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45916: LD_INT 0
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
// pom := GetBase ( building ) ;
45922: LD_ADDR_VAR 0 3
45926: PUSH
45927: LD_VAR 0 1
45931: PPUSH
45932: CALL_OW 274
45936: ST_TO_ADDR
// if not pom then
45937: LD_VAR 0 3
45941: NOT
45942: IFFALSE 45946
// exit ;
45944: GO 46116
// btype := GetBType ( building ) ;
45946: LD_ADDR_VAR 0 5
45950: PUSH
45951: LD_VAR 0 1
45955: PPUSH
45956: CALL_OW 266
45960: ST_TO_ADDR
// if btype = b_armoury then
45961: LD_VAR 0 5
45965: PUSH
45966: LD_INT 4
45968: EQUAL
45969: IFFALSE 45979
// btype := b_barracks ;
45971: LD_ADDR_VAR 0 5
45975: PUSH
45976: LD_INT 5
45978: ST_TO_ADDR
// if btype = b_depot then
45979: LD_VAR 0 5
45983: PUSH
45984: LD_INT 0
45986: EQUAL
45987: IFFALSE 45997
// btype := b_warehouse ;
45989: LD_ADDR_VAR 0 5
45993: PUSH
45994: LD_INT 1
45996: ST_TO_ADDR
// if btype = b_workshop then
45997: LD_VAR 0 5
46001: PUSH
46002: LD_INT 2
46004: EQUAL
46005: IFFALSE 46015
// btype := b_factory ;
46007: LD_ADDR_VAR 0 5
46011: PUSH
46012: LD_INT 3
46014: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46015: LD_ADDR_VAR 0 4
46019: PUSH
46020: LD_VAR 0 5
46024: PPUSH
46025: LD_VAR 0 1
46029: PPUSH
46030: CALL_OW 248
46034: PPUSH
46035: CALL_OW 450
46039: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46040: LD_ADDR_VAR 0 2
46044: PUSH
46045: LD_VAR 0 3
46049: PPUSH
46050: LD_INT 1
46052: PPUSH
46053: CALL_OW 275
46057: PUSH
46058: LD_VAR 0 4
46062: PUSH
46063: LD_INT 1
46065: ARRAY
46066: GREATEREQUAL
46067: PUSH
46068: LD_VAR 0 3
46072: PPUSH
46073: LD_INT 2
46075: PPUSH
46076: CALL_OW 275
46080: PUSH
46081: LD_VAR 0 4
46085: PUSH
46086: LD_INT 2
46088: ARRAY
46089: GREATEREQUAL
46090: AND
46091: PUSH
46092: LD_VAR 0 3
46096: PPUSH
46097: LD_INT 3
46099: PPUSH
46100: CALL_OW 275
46104: PUSH
46105: LD_VAR 0 4
46109: PUSH
46110: LD_INT 3
46112: ARRAY
46113: GREATEREQUAL
46114: AND
46115: ST_TO_ADDR
// end ;
46116: LD_VAR 0 2
46120: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46121: LD_INT 0
46123: PPUSH
46124: PPUSH
46125: PPUSH
// pom := GetBase ( building ) ;
46126: LD_ADDR_VAR 0 4
46130: PUSH
46131: LD_VAR 0 1
46135: PPUSH
46136: CALL_OW 274
46140: ST_TO_ADDR
// if not pom then
46141: LD_VAR 0 4
46145: NOT
46146: IFFALSE 46150
// exit ;
46148: GO 46251
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46150: LD_ADDR_VAR 0 5
46154: PUSH
46155: LD_VAR 0 2
46159: PPUSH
46160: LD_VAR 0 1
46164: PPUSH
46165: CALL_OW 248
46169: PPUSH
46170: CALL_OW 450
46174: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46175: LD_ADDR_VAR 0 3
46179: PUSH
46180: LD_VAR 0 4
46184: PPUSH
46185: LD_INT 1
46187: PPUSH
46188: CALL_OW 275
46192: PUSH
46193: LD_VAR 0 5
46197: PUSH
46198: LD_INT 1
46200: ARRAY
46201: GREATEREQUAL
46202: PUSH
46203: LD_VAR 0 4
46207: PPUSH
46208: LD_INT 2
46210: PPUSH
46211: CALL_OW 275
46215: PUSH
46216: LD_VAR 0 5
46220: PUSH
46221: LD_INT 2
46223: ARRAY
46224: GREATEREQUAL
46225: AND
46226: PUSH
46227: LD_VAR 0 4
46231: PPUSH
46232: LD_INT 3
46234: PPUSH
46235: CALL_OW 275
46239: PUSH
46240: LD_VAR 0 5
46244: PUSH
46245: LD_INT 3
46247: ARRAY
46248: GREATEREQUAL
46249: AND
46250: ST_TO_ADDR
// end ;
46251: LD_VAR 0 3
46255: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46256: LD_INT 0
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
// result := false ;
46269: LD_ADDR_VAR 0 8
46273: PUSH
46274: LD_INT 0
46276: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46277: LD_VAR 0 5
46281: NOT
46282: PUSH
46283: LD_VAR 0 1
46287: NOT
46288: OR
46289: PUSH
46290: LD_VAR 0 2
46294: NOT
46295: OR
46296: PUSH
46297: LD_VAR 0 3
46301: NOT
46302: OR
46303: IFFALSE 46307
// exit ;
46305: GO 47121
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46307: LD_ADDR_VAR 0 14
46311: PUSH
46312: LD_VAR 0 1
46316: PPUSH
46317: LD_VAR 0 2
46321: PPUSH
46322: LD_VAR 0 3
46326: PPUSH
46327: LD_VAR 0 4
46331: PPUSH
46332: LD_VAR 0 5
46336: PUSH
46337: LD_INT 1
46339: ARRAY
46340: PPUSH
46341: CALL_OW 248
46345: PPUSH
46346: LD_INT 0
46348: PPUSH
46349: CALL 48358 0 6
46353: ST_TO_ADDR
// if not hexes then
46354: LD_VAR 0 14
46358: NOT
46359: IFFALSE 46363
// exit ;
46361: GO 47121
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46363: LD_ADDR_VAR 0 17
46367: PUSH
46368: LD_VAR 0 5
46372: PPUSH
46373: LD_INT 22
46375: PUSH
46376: LD_VAR 0 13
46380: PPUSH
46381: CALL_OW 255
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 30
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 30
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PPUSH
46422: CALL_OW 72
46426: ST_TO_ADDR
// for i = 1 to hexes do
46427: LD_ADDR_VAR 0 9
46431: PUSH
46432: DOUBLE
46433: LD_INT 1
46435: DEC
46436: ST_TO_ADDR
46437: LD_VAR 0 14
46441: PUSH
46442: FOR_TO
46443: IFFALSE 47119
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46445: LD_ADDR_VAR 0 13
46449: PUSH
46450: LD_VAR 0 14
46454: PUSH
46455: LD_VAR 0 9
46459: ARRAY
46460: PUSH
46461: LD_INT 1
46463: ARRAY
46464: PPUSH
46465: LD_VAR 0 14
46469: PUSH
46470: LD_VAR 0 9
46474: ARRAY
46475: PUSH
46476: LD_INT 2
46478: ARRAY
46479: PPUSH
46480: CALL_OW 428
46484: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46485: LD_VAR 0 14
46489: PUSH
46490: LD_VAR 0 9
46494: ARRAY
46495: PUSH
46496: LD_INT 1
46498: ARRAY
46499: PPUSH
46500: LD_VAR 0 14
46504: PUSH
46505: LD_VAR 0 9
46509: ARRAY
46510: PUSH
46511: LD_INT 2
46513: ARRAY
46514: PPUSH
46515: CALL_OW 351
46519: PUSH
46520: LD_VAR 0 14
46524: PUSH
46525: LD_VAR 0 9
46529: ARRAY
46530: PUSH
46531: LD_INT 1
46533: ARRAY
46534: PPUSH
46535: LD_VAR 0 14
46539: PUSH
46540: LD_VAR 0 9
46544: ARRAY
46545: PUSH
46546: LD_INT 2
46548: ARRAY
46549: PPUSH
46550: CALL_OW 488
46554: NOT
46555: OR
46556: PUSH
46557: LD_VAR 0 13
46561: PPUSH
46562: CALL_OW 247
46566: PUSH
46567: LD_INT 3
46569: EQUAL
46570: OR
46571: IFFALSE 46577
// exit ;
46573: POP
46574: POP
46575: GO 47121
// if not tmp then
46577: LD_VAR 0 13
46581: NOT
46582: IFFALSE 46586
// continue ;
46584: GO 46442
// result := true ;
46586: LD_ADDR_VAR 0 8
46590: PUSH
46591: LD_INT 1
46593: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46594: LD_VAR 0 6
46598: PUSH
46599: LD_VAR 0 13
46603: PPUSH
46604: CALL_OW 247
46608: PUSH
46609: LD_INT 2
46611: EQUAL
46612: AND
46613: PUSH
46614: LD_VAR 0 13
46618: PPUSH
46619: CALL_OW 263
46623: PUSH
46624: LD_INT 1
46626: EQUAL
46627: AND
46628: IFFALSE 46792
// begin if IsDrivenBy ( tmp ) then
46630: LD_VAR 0 13
46634: PPUSH
46635: CALL_OW 311
46639: IFFALSE 46643
// continue ;
46641: GO 46442
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46643: LD_VAR 0 6
46647: PPUSH
46648: LD_INT 3
46650: PUSH
46651: LD_INT 60
46653: PUSH
46654: EMPTY
46655: LIST
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: LD_INT 55
46666: PUSH
46667: EMPTY
46668: LIST
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PPUSH
46678: CALL_OW 72
46682: IFFALSE 46790
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46684: LD_ADDR_VAR 0 18
46688: PUSH
46689: LD_VAR 0 6
46693: PPUSH
46694: LD_INT 3
46696: PUSH
46697: LD_INT 60
46699: PUSH
46700: EMPTY
46701: LIST
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: LD_INT 55
46712: PUSH
46713: EMPTY
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PPUSH
46724: CALL_OW 72
46728: PUSH
46729: LD_INT 1
46731: ARRAY
46732: ST_TO_ADDR
// if IsInUnit ( driver ) then
46733: LD_VAR 0 18
46737: PPUSH
46738: CALL_OW 310
46742: IFFALSE 46753
// ComExit ( driver ) ;
46744: LD_VAR 0 18
46748: PPUSH
46749: CALL 71542 0 1
// AddComEnterUnit ( driver , tmp ) ;
46753: LD_VAR 0 18
46757: PPUSH
46758: LD_VAR 0 13
46762: PPUSH
46763: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46767: LD_VAR 0 18
46771: PPUSH
46772: LD_VAR 0 7
46776: PPUSH
46777: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46781: LD_VAR 0 18
46785: PPUSH
46786: CALL_OW 181
// end ; continue ;
46790: GO 46442
// end ; if not cleaners or not tmp in cleaners then
46792: LD_VAR 0 6
46796: NOT
46797: PUSH
46798: LD_VAR 0 13
46802: PUSH
46803: LD_VAR 0 6
46807: IN
46808: NOT
46809: OR
46810: IFFALSE 47117
// begin if dep then
46812: LD_VAR 0 17
46816: IFFALSE 46952
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46818: LD_ADDR_VAR 0 16
46822: PUSH
46823: LD_VAR 0 17
46827: PUSH
46828: LD_INT 1
46830: ARRAY
46831: PPUSH
46832: CALL_OW 250
46836: PPUSH
46837: LD_VAR 0 17
46841: PUSH
46842: LD_INT 1
46844: ARRAY
46845: PPUSH
46846: CALL_OW 254
46850: PPUSH
46851: LD_INT 5
46853: PPUSH
46854: CALL_OW 272
46858: PUSH
46859: LD_VAR 0 17
46863: PUSH
46864: LD_INT 1
46866: ARRAY
46867: PPUSH
46868: CALL_OW 251
46872: PPUSH
46873: LD_VAR 0 17
46877: PUSH
46878: LD_INT 1
46880: ARRAY
46881: PPUSH
46882: CALL_OW 254
46886: PPUSH
46887: LD_INT 5
46889: PPUSH
46890: CALL_OW 273
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46899: LD_VAR 0 16
46903: PUSH
46904: LD_INT 1
46906: ARRAY
46907: PPUSH
46908: LD_VAR 0 16
46912: PUSH
46913: LD_INT 2
46915: ARRAY
46916: PPUSH
46917: CALL_OW 488
46921: IFFALSE 46952
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46923: LD_VAR 0 13
46927: PPUSH
46928: LD_VAR 0 16
46932: PUSH
46933: LD_INT 1
46935: ARRAY
46936: PPUSH
46937: LD_VAR 0 16
46941: PUSH
46942: LD_INT 2
46944: ARRAY
46945: PPUSH
46946: CALL_OW 111
// continue ;
46950: GO 46442
// end ; end ; r := GetDir ( tmp ) ;
46952: LD_ADDR_VAR 0 15
46956: PUSH
46957: LD_VAR 0 13
46961: PPUSH
46962: CALL_OW 254
46966: ST_TO_ADDR
// if r = 5 then
46967: LD_VAR 0 15
46971: PUSH
46972: LD_INT 5
46974: EQUAL
46975: IFFALSE 46985
// r := 0 ;
46977: LD_ADDR_VAR 0 15
46981: PUSH
46982: LD_INT 0
46984: ST_TO_ADDR
// for j = r to 5 do
46985: LD_ADDR_VAR 0 10
46989: PUSH
46990: DOUBLE
46991: LD_VAR 0 15
46995: DEC
46996: ST_TO_ADDR
46997: LD_INT 5
46999: PUSH
47000: FOR_TO
47001: IFFALSE 47115
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47003: LD_ADDR_VAR 0 11
47007: PUSH
47008: LD_VAR 0 13
47012: PPUSH
47013: CALL_OW 250
47017: PPUSH
47018: LD_VAR 0 10
47022: PPUSH
47023: LD_INT 2
47025: PPUSH
47026: CALL_OW 272
47030: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47031: LD_ADDR_VAR 0 12
47035: PUSH
47036: LD_VAR 0 13
47040: PPUSH
47041: CALL_OW 251
47045: PPUSH
47046: LD_VAR 0 10
47050: PPUSH
47051: LD_INT 2
47053: PPUSH
47054: CALL_OW 273
47058: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47059: LD_VAR 0 11
47063: PPUSH
47064: LD_VAR 0 12
47068: PPUSH
47069: CALL_OW 488
47073: PUSH
47074: LD_VAR 0 11
47078: PPUSH
47079: LD_VAR 0 12
47083: PPUSH
47084: CALL_OW 428
47088: NOT
47089: AND
47090: IFFALSE 47113
// begin ComMoveXY ( tmp , _x , _y ) ;
47092: LD_VAR 0 13
47096: PPUSH
47097: LD_VAR 0 11
47101: PPUSH
47102: LD_VAR 0 12
47106: PPUSH
47107: CALL_OW 111
// break ;
47111: GO 47115
// end ; end ;
47113: GO 47000
47115: POP
47116: POP
// end ; end ;
47117: GO 46442
47119: POP
47120: POP
// end ;
47121: LD_VAR 0 8
47125: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47126: LD_INT 0
47128: PPUSH
// result := true ;
47129: LD_ADDR_VAR 0 3
47133: PUSH
47134: LD_INT 1
47136: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47137: LD_VAR 0 2
47141: PUSH
47142: LD_INT 24
47144: DOUBLE
47145: EQUAL
47146: IFTRUE 47156
47148: LD_INT 33
47150: DOUBLE
47151: EQUAL
47152: IFTRUE 47156
47154: GO 47181
47156: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47157: LD_ADDR_VAR 0 3
47161: PUSH
47162: LD_INT 32
47164: PPUSH
47165: LD_VAR 0 1
47169: PPUSH
47170: CALL_OW 321
47174: PUSH
47175: LD_INT 2
47177: EQUAL
47178: ST_TO_ADDR
47179: GO 47501
47181: LD_INT 20
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47189
47187: GO 47214
47189: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47190: LD_ADDR_VAR 0 3
47194: PUSH
47195: LD_INT 6
47197: PPUSH
47198: LD_VAR 0 1
47202: PPUSH
47203: CALL_OW 321
47207: PUSH
47208: LD_INT 2
47210: EQUAL
47211: ST_TO_ADDR
47212: GO 47501
47214: LD_INT 22
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47228
47220: LD_INT 36
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47228
47226: GO 47253
47228: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47229: LD_ADDR_VAR 0 3
47233: PUSH
47234: LD_INT 15
47236: PPUSH
47237: LD_VAR 0 1
47241: PPUSH
47242: CALL_OW 321
47246: PUSH
47247: LD_INT 2
47249: EQUAL
47250: ST_TO_ADDR
47251: GO 47501
47253: LD_INT 30
47255: DOUBLE
47256: EQUAL
47257: IFTRUE 47261
47259: GO 47286
47261: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47262: LD_ADDR_VAR 0 3
47266: PUSH
47267: LD_INT 20
47269: PPUSH
47270: LD_VAR 0 1
47274: PPUSH
47275: CALL_OW 321
47279: PUSH
47280: LD_INT 2
47282: EQUAL
47283: ST_TO_ADDR
47284: GO 47501
47286: LD_INT 28
47288: DOUBLE
47289: EQUAL
47290: IFTRUE 47300
47292: LD_INT 21
47294: DOUBLE
47295: EQUAL
47296: IFTRUE 47300
47298: GO 47325
47300: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47301: LD_ADDR_VAR 0 3
47305: PUSH
47306: LD_INT 21
47308: PPUSH
47309: LD_VAR 0 1
47313: PPUSH
47314: CALL_OW 321
47318: PUSH
47319: LD_INT 2
47321: EQUAL
47322: ST_TO_ADDR
47323: GO 47501
47325: LD_INT 16
47327: DOUBLE
47328: EQUAL
47329: IFTRUE 47333
47331: GO 47360
47333: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47334: LD_ADDR_VAR 0 3
47338: PUSH
47339: LD_EXP 131
47343: PPUSH
47344: LD_VAR 0 1
47348: PPUSH
47349: CALL_OW 321
47353: PUSH
47354: LD_INT 2
47356: EQUAL
47357: ST_TO_ADDR
47358: GO 47501
47360: LD_INT 19
47362: DOUBLE
47363: EQUAL
47364: IFTRUE 47374
47366: LD_INT 23
47368: DOUBLE
47369: EQUAL
47370: IFTRUE 47374
47372: GO 47401
47374: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47375: LD_ADDR_VAR 0 3
47379: PUSH
47380: LD_EXP 130
47384: PPUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: CALL_OW 321
47394: PUSH
47395: LD_INT 2
47397: EQUAL
47398: ST_TO_ADDR
47399: GO 47501
47401: LD_INT 17
47403: DOUBLE
47404: EQUAL
47405: IFTRUE 47409
47407: GO 47434
47409: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47410: LD_ADDR_VAR 0 3
47414: PUSH
47415: LD_INT 39
47417: PPUSH
47418: LD_VAR 0 1
47422: PPUSH
47423: CALL_OW 321
47427: PUSH
47428: LD_INT 2
47430: EQUAL
47431: ST_TO_ADDR
47432: GO 47501
47434: LD_INT 18
47436: DOUBLE
47437: EQUAL
47438: IFTRUE 47442
47440: GO 47467
47442: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47443: LD_ADDR_VAR 0 3
47447: PUSH
47448: LD_INT 40
47450: PPUSH
47451: LD_VAR 0 1
47455: PPUSH
47456: CALL_OW 321
47460: PUSH
47461: LD_INT 2
47463: EQUAL
47464: ST_TO_ADDR
47465: GO 47501
47467: LD_INT 27
47469: DOUBLE
47470: EQUAL
47471: IFTRUE 47475
47473: GO 47500
47475: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47476: LD_ADDR_VAR 0 3
47480: PUSH
47481: LD_INT 35
47483: PPUSH
47484: LD_VAR 0 1
47488: PPUSH
47489: CALL_OW 321
47493: PUSH
47494: LD_INT 2
47496: EQUAL
47497: ST_TO_ADDR
47498: GO 47501
47500: POP
// end ;
47501: LD_VAR 0 3
47505: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47506: LD_INT 0
47508: PPUSH
47509: PPUSH
47510: PPUSH
47511: PPUSH
47512: PPUSH
47513: PPUSH
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
47518: PPUSH
// result := false ;
47519: LD_ADDR_VAR 0 6
47523: PUSH
47524: LD_INT 0
47526: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47527: LD_VAR 0 1
47531: NOT
47532: PUSH
47533: LD_VAR 0 1
47537: PPUSH
47538: CALL_OW 266
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: IN
47553: NOT
47554: OR
47555: PUSH
47556: LD_VAR 0 2
47560: NOT
47561: OR
47562: PUSH
47563: LD_VAR 0 5
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: LD_INT 4
47582: PUSH
47583: LD_INT 5
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: IN
47594: NOT
47595: OR
47596: PUSH
47597: LD_VAR 0 3
47601: PPUSH
47602: LD_VAR 0 4
47606: PPUSH
47607: CALL_OW 488
47611: NOT
47612: OR
47613: IFFALSE 47617
// exit ;
47615: GO 48353
// side := GetSide ( depot ) ;
47617: LD_ADDR_VAR 0 9
47621: PUSH
47622: LD_VAR 0 1
47626: PPUSH
47627: CALL_OW 255
47631: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47632: LD_VAR 0 9
47636: PPUSH
47637: LD_VAR 0 2
47641: PPUSH
47642: CALL 47126 0 2
47646: NOT
47647: IFFALSE 47651
// exit ;
47649: GO 48353
// pom := GetBase ( depot ) ;
47651: LD_ADDR_VAR 0 10
47655: PUSH
47656: LD_VAR 0 1
47660: PPUSH
47661: CALL_OW 274
47665: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47666: LD_ADDR_VAR 0 11
47670: PUSH
47671: LD_VAR 0 2
47675: PPUSH
47676: LD_VAR 0 1
47680: PPUSH
47681: CALL_OW 248
47685: PPUSH
47686: CALL_OW 450
47690: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47691: LD_VAR 0 10
47695: PPUSH
47696: LD_INT 1
47698: PPUSH
47699: CALL_OW 275
47703: PUSH
47704: LD_VAR 0 11
47708: PUSH
47709: LD_INT 1
47711: ARRAY
47712: GREATEREQUAL
47713: PUSH
47714: LD_VAR 0 10
47718: PPUSH
47719: LD_INT 2
47721: PPUSH
47722: CALL_OW 275
47726: PUSH
47727: LD_VAR 0 11
47731: PUSH
47732: LD_INT 2
47734: ARRAY
47735: GREATEREQUAL
47736: AND
47737: PUSH
47738: LD_VAR 0 10
47742: PPUSH
47743: LD_INT 3
47745: PPUSH
47746: CALL_OW 275
47750: PUSH
47751: LD_VAR 0 11
47755: PUSH
47756: LD_INT 3
47758: ARRAY
47759: GREATEREQUAL
47760: AND
47761: NOT
47762: IFFALSE 47766
// exit ;
47764: GO 48353
// if GetBType ( depot ) = b_depot then
47766: LD_VAR 0 1
47770: PPUSH
47771: CALL_OW 266
47775: PUSH
47776: LD_INT 0
47778: EQUAL
47779: IFFALSE 47791
// dist := 28 else
47781: LD_ADDR_VAR 0 14
47785: PUSH
47786: LD_INT 28
47788: ST_TO_ADDR
47789: GO 47799
// dist := 36 ;
47791: LD_ADDR_VAR 0 14
47795: PUSH
47796: LD_INT 36
47798: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47799: LD_VAR 0 1
47803: PPUSH
47804: LD_VAR 0 3
47808: PPUSH
47809: LD_VAR 0 4
47813: PPUSH
47814: CALL_OW 297
47818: PUSH
47819: LD_VAR 0 14
47823: GREATER
47824: IFFALSE 47828
// exit ;
47826: GO 48353
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47828: LD_ADDR_VAR 0 12
47832: PUSH
47833: LD_VAR 0 2
47837: PPUSH
47838: LD_VAR 0 3
47842: PPUSH
47843: LD_VAR 0 4
47847: PPUSH
47848: LD_VAR 0 5
47852: PPUSH
47853: LD_VAR 0 1
47857: PPUSH
47858: CALL_OW 248
47862: PPUSH
47863: LD_INT 0
47865: PPUSH
47866: CALL 48358 0 6
47870: ST_TO_ADDR
// if not hexes then
47871: LD_VAR 0 12
47875: NOT
47876: IFFALSE 47880
// exit ;
47878: GO 48353
// hex := GetHexInfo ( x , y ) ;
47880: LD_ADDR_VAR 0 15
47884: PUSH
47885: LD_VAR 0 3
47889: PPUSH
47890: LD_VAR 0 4
47894: PPUSH
47895: CALL_OW 546
47899: ST_TO_ADDR
// if hex [ 1 ] then
47900: LD_VAR 0 15
47904: PUSH
47905: LD_INT 1
47907: ARRAY
47908: IFFALSE 47912
// exit ;
47910: GO 48353
// height := hex [ 2 ] ;
47912: LD_ADDR_VAR 0 13
47916: PUSH
47917: LD_VAR 0 15
47921: PUSH
47922: LD_INT 2
47924: ARRAY
47925: ST_TO_ADDR
// for i = 1 to hexes do
47926: LD_ADDR_VAR 0 7
47930: PUSH
47931: DOUBLE
47932: LD_INT 1
47934: DEC
47935: ST_TO_ADDR
47936: LD_VAR 0 12
47940: PUSH
47941: FOR_TO
47942: IFFALSE 48272
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47944: LD_VAR 0 12
47948: PUSH
47949: LD_VAR 0 7
47953: ARRAY
47954: PUSH
47955: LD_INT 1
47957: ARRAY
47958: PPUSH
47959: LD_VAR 0 12
47963: PUSH
47964: LD_VAR 0 7
47968: ARRAY
47969: PUSH
47970: LD_INT 2
47972: ARRAY
47973: PPUSH
47974: CALL_OW 488
47978: NOT
47979: PUSH
47980: LD_VAR 0 12
47984: PUSH
47985: LD_VAR 0 7
47989: ARRAY
47990: PUSH
47991: LD_INT 1
47993: ARRAY
47994: PPUSH
47995: LD_VAR 0 12
47999: PUSH
48000: LD_VAR 0 7
48004: ARRAY
48005: PUSH
48006: LD_INT 2
48008: ARRAY
48009: PPUSH
48010: CALL_OW 428
48014: PUSH
48015: LD_INT 0
48017: GREATER
48018: OR
48019: PUSH
48020: LD_VAR 0 12
48024: PUSH
48025: LD_VAR 0 7
48029: ARRAY
48030: PUSH
48031: LD_INT 1
48033: ARRAY
48034: PPUSH
48035: LD_VAR 0 12
48039: PUSH
48040: LD_VAR 0 7
48044: ARRAY
48045: PUSH
48046: LD_INT 2
48048: ARRAY
48049: PPUSH
48050: CALL_OW 351
48054: OR
48055: IFFALSE 48061
// exit ;
48057: POP
48058: POP
48059: GO 48353
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48061: LD_ADDR_VAR 0 8
48065: PUSH
48066: LD_VAR 0 12
48070: PUSH
48071: LD_VAR 0 7
48075: ARRAY
48076: PUSH
48077: LD_INT 1
48079: ARRAY
48080: PPUSH
48081: LD_VAR 0 12
48085: PUSH
48086: LD_VAR 0 7
48090: ARRAY
48091: PUSH
48092: LD_INT 2
48094: ARRAY
48095: PPUSH
48096: CALL_OW 546
48100: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48101: LD_VAR 0 8
48105: PUSH
48106: LD_INT 1
48108: ARRAY
48109: PUSH
48110: LD_VAR 0 8
48114: PUSH
48115: LD_INT 2
48117: ARRAY
48118: PUSH
48119: LD_VAR 0 13
48123: PUSH
48124: LD_INT 2
48126: PLUS
48127: GREATER
48128: OR
48129: PUSH
48130: LD_VAR 0 8
48134: PUSH
48135: LD_INT 2
48137: ARRAY
48138: PUSH
48139: LD_VAR 0 13
48143: PUSH
48144: LD_INT 2
48146: MINUS
48147: LESS
48148: OR
48149: PUSH
48150: LD_VAR 0 8
48154: PUSH
48155: LD_INT 3
48157: ARRAY
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 8
48164: PUSH
48165: LD_INT 9
48167: PUSH
48168: LD_INT 10
48170: PUSH
48171: LD_INT 11
48173: PUSH
48174: LD_INT 12
48176: PUSH
48177: LD_INT 13
48179: PUSH
48180: LD_INT 16
48182: PUSH
48183: LD_INT 17
48185: PUSH
48186: LD_INT 18
48188: PUSH
48189: LD_INT 19
48191: PUSH
48192: LD_INT 20
48194: PUSH
48195: LD_INT 21
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: IN
48213: NOT
48214: OR
48215: PUSH
48216: LD_VAR 0 8
48220: PUSH
48221: LD_INT 5
48223: ARRAY
48224: NOT
48225: OR
48226: PUSH
48227: LD_VAR 0 8
48231: PUSH
48232: LD_INT 6
48234: ARRAY
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 7
48244: PUSH
48245: LD_INT 9
48247: PUSH
48248: LD_INT 10
48250: PUSH
48251: LD_INT 11
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: IN
48262: NOT
48263: OR
48264: IFFALSE 48270
// exit ;
48266: POP
48267: POP
48268: GO 48353
// end ;
48270: GO 47941
48272: POP
48273: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48274: LD_VAR 0 9
48278: PPUSH
48279: LD_VAR 0 3
48283: PPUSH
48284: LD_VAR 0 4
48288: PPUSH
48289: LD_INT 20
48291: PPUSH
48292: CALL 40298 0 4
48296: PUSH
48297: LD_INT 4
48299: ARRAY
48300: IFFALSE 48304
// exit ;
48302: GO 48353
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48304: LD_VAR 0 2
48308: PUSH
48309: LD_INT 29
48311: PUSH
48312: LD_INT 30
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: IN
48319: PUSH
48320: LD_VAR 0 3
48324: PPUSH
48325: LD_VAR 0 4
48329: PPUSH
48330: LD_VAR 0 9
48334: PPUSH
48335: CALL_OW 440
48339: NOT
48340: AND
48341: IFFALSE 48345
// exit ;
48343: GO 48353
// result := true ;
48345: LD_ADDR_VAR 0 6
48349: PUSH
48350: LD_INT 1
48352: ST_TO_ADDR
// end ;
48353: LD_VAR 0 6
48357: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48358: LD_INT 0
48360: PPUSH
48361: PPUSH
48362: PPUSH
48363: PPUSH
48364: PPUSH
48365: PPUSH
48366: PPUSH
48367: PPUSH
48368: PPUSH
48369: PPUSH
48370: PPUSH
48371: PPUSH
48372: PPUSH
48373: PPUSH
48374: PPUSH
48375: PPUSH
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
48392: PPUSH
48393: PPUSH
48394: PPUSH
48395: PPUSH
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
48402: PPUSH
48403: PPUSH
48404: PPUSH
48405: PPUSH
48406: PPUSH
48407: PPUSH
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
// result = [ ] ;
48418: LD_ADDR_VAR 0 7
48422: PUSH
48423: EMPTY
48424: ST_TO_ADDR
// temp_list = [ ] ;
48425: LD_ADDR_VAR 0 9
48429: PUSH
48430: EMPTY
48431: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48432: LD_VAR 0 4
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: LD_INT 4
48451: PUSH
48452: LD_INT 5
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: IN
48463: NOT
48464: PUSH
48465: LD_VAR 0 1
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: IN
48480: PUSH
48481: LD_VAR 0 5
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 3
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: IN
48500: NOT
48501: AND
48502: OR
48503: IFFALSE 48507
// exit ;
48505: GO 66898
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48507: LD_VAR 0 1
48511: PUSH
48512: LD_INT 6
48514: PUSH
48515: LD_INT 7
48517: PUSH
48518: LD_INT 8
48520: PUSH
48521: LD_INT 13
48523: PUSH
48524: LD_INT 12
48526: PUSH
48527: LD_INT 15
48529: PUSH
48530: LD_INT 11
48532: PUSH
48533: LD_INT 14
48535: PUSH
48536: LD_INT 10
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: IN
48550: IFFALSE 48560
// btype = b_lab ;
48552: LD_ADDR_VAR 0 1
48556: PUSH
48557: LD_INT 6
48559: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48560: LD_VAR 0 6
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: IN
48579: NOT
48580: PUSH
48581: LD_VAR 0 1
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: LD_INT 6
48600: PUSH
48601: LD_INT 36
48603: PUSH
48604: LD_INT 4
48606: PUSH
48607: LD_INT 5
48609: PUSH
48610: LD_INT 31
48612: PUSH
48613: LD_INT 32
48615: PUSH
48616: LD_INT 33
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: IN
48632: NOT
48633: PUSH
48634: LD_VAR 0 6
48638: PUSH
48639: LD_INT 1
48641: EQUAL
48642: AND
48643: OR
48644: PUSH
48645: LD_VAR 0 1
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 3
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: IN
48660: NOT
48661: PUSH
48662: LD_VAR 0 6
48666: PUSH
48667: LD_INT 2
48669: EQUAL
48670: AND
48671: OR
48672: IFFALSE 48682
// mode = 0 ;
48674: LD_ADDR_VAR 0 6
48678: PUSH
48679: LD_INT 0
48681: ST_TO_ADDR
// case mode of 0 :
48682: LD_VAR 0 6
48686: PUSH
48687: LD_INT 0
48689: DOUBLE
48690: EQUAL
48691: IFTRUE 48695
48693: GO 60148
48695: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48696: LD_ADDR_VAR 0 11
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48889: LD_ADDR_VAR 0 12
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 3
49046: NEG
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 3
49057: NEG
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49085: LD_ADDR_VAR 0 13
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 3
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: LD_INT 3
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49284: LD_ADDR_VAR 0 14
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49480: LD_ADDR_VAR 0 15
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 3
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49673: LD_ADDR_VAR 0 16
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49866: LD_ADDR_VAR 0 17
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50096: LD_ADDR_VAR 0 18
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 2
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50326: LD_ADDR_VAR 0 19
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50556: LD_ADDR_VAR 0 20
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50786: LD_ADDR_VAR 0 21
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51016: LD_ADDR_VAR 0 22
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51246: LD_ADDR_VAR 0 23
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51526: LD_ADDR_VAR 0 24
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51802: LD_ADDR_VAR 0 25
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 3
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52076: LD_ADDR_VAR 0 26
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52352: LD_ADDR_VAR 0 27
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52632: LD_ADDR_VAR 0 28
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: LD_INT 2
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: NEG
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52914: LD_ADDR_VAR 0 29
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 2
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53193: LD_ADDR_VAR 0 30
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53471: LD_ADDR_VAR 0 31
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53749: LD_ADDR_VAR 0 32
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54027: LD_ADDR_VAR 0 33
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: NEG
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54306: LD_ADDR_VAR 0 34
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 3
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54586: LD_ADDR_VAR 0 35
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54698: LD_ADDR_VAR 0 36
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54810: LD_ADDR_VAR 0 37
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: LD_INT 1
54830: NEG
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54922: LD_ADDR_VAR 0 38
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55034: LD_ADDR_VAR 0 39
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 2
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55146: LD_ADDR_VAR 0 40
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55258: LD_ADDR_VAR 0 41
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: NEG
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 3
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55608: LD_ADDR_VAR 0 42
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 3
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 3
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: NEG
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: LD_INT 3
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55958: LD_ADDR_VAR 0 43
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56306: LD_ADDR_VAR 0 44
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: NEG
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 2
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56656: LD_ADDR_VAR 0 45
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: NEG
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57006: LD_ADDR_VAR 0 46
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 3
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 3
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 3
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57354: LD_ADDR_VAR 0 47
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57505: LD_ADDR_VAR 0 48
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57652: LD_ADDR_VAR 0 49
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57796: LD_ADDR_VAR 0 50
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 2
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57940: LD_ADDR_VAR 0 51
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58087: LD_ADDR_VAR 0 52
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58238: LD_ADDR_VAR 0 53
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 1
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58468: LD_ADDR_VAR 0 54
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: LD_INT 1
58659: NEG
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: LD_INT 2
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58698: LD_ADDR_VAR 0 55
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58928: LD_ADDR_VAR 0 56
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59158: LD_ADDR_VAR 0 57
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 1
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: LD_INT 2
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59388: LD_ADDR_VAR 0 58
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 1
59469: NEG
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 2
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59618: LD_ADDR_VAR 0 59
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: LD_INT 1
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59706: LD_ADDR_VAR 0 60
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 1
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59794: LD_ADDR_VAR 0 61
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59882: LD_ADDR_VAR 0 62
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59970: LD_ADDR_VAR 0 63
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: LD_INT 0
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 0
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60058: LD_ADDR_VAR 0 64
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// end ; 1 :
60146: GO 66043
60148: LD_INT 1
60150: DOUBLE
60151: EQUAL
60152: IFTRUE 60156
60154: GO 62779
60156: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60157: LD_ADDR_VAR 0 11
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60201: LD_ADDR_VAR 0 12
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60242: LD_ADDR_VAR 0 13
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: LD_INT 3
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: LIST
60281: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60282: LD_ADDR_VAR 0 14
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 3
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60323: LD_ADDR_VAR 0 15
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60367: LD_ADDR_VAR 0 16
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60413: LD_ADDR_VAR 0 17
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 3
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60457: LD_ADDR_VAR 0 18
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: LD_INT 1
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: LIST
60497: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60498: LD_ADDR_VAR 0 19
60502: PUSH
60503: LD_INT 3
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 3
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60538: LD_ADDR_VAR 0 20
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 3
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60579: LD_ADDR_VAR 0 21
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60623: LD_ADDR_VAR 0 22
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 3
60654: NEG
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60669: LD_ADDR_VAR 0 23
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 3
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: LIST
60712: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60713: LD_ADDR_VAR 0 24
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 4
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: LIST
60753: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60754: LD_ADDR_VAR 0 25
60758: PUSH
60759: LD_INT 3
60761: PUSH
60762: LD_INT 3
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 4
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: LD_INT 4
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60794: LD_ADDR_VAR 0 26
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 3
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 4
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: LIST
60834: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60835: LD_ADDR_VAR 0 27
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 3
60853: NEG
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 4
60864: NEG
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: LIST
60878: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60879: LD_ADDR_VAR 0 28
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: NEG
60899: PUSH
60900: LD_INT 4
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 4
60910: NEG
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60925: LD_ADDR_VAR 0 29
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 3
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 4
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 4
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: LD_INT 5
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 5
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 4
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: LD_INT 6
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 6
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: LD_INT 5
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61080: LD_ADDR_VAR 0 30
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 4
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 4
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 5
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 5
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 5
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 6
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 6
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61223: LD_ADDR_VAR 0 31
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 4
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 4
61270: PUSH
61271: LD_INT 4
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: LD_INT 4
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 5
61290: PUSH
61291: LD_INT 4
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 5
61300: PUSH
61301: LD_INT 5
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 4
61310: PUSH
61311: LD_INT 5
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 6
61320: PUSH
61321: LD_INT 5
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 6
61330: PUSH
61331: LD_INT 6
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 5
61340: PUSH
61341: LD_INT 6
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61362: LD_ADDR_VAR 0 32
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 4
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 4
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: LD_INT 3
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 5
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 5
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 4
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 6
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 6
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 5
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61505: LD_ADDR_VAR 0 33
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 3
61523: NEG
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 3
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 4
61557: NEG
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 4
61580: NEG
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 5
61591: NEG
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 5
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 5
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 6
61625: NEG
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 6
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61660: LD_ADDR_VAR 0 34
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 3
61679: NEG
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: NEG
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: NEG
61704: PUSH
61705: LD_INT 4
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: LD_INT 3
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 4
61727: NEG
61728: PUSH
61729: LD_INT 4
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 4
61739: NEG
61740: PUSH
61741: LD_INT 5
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 5
61751: NEG
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 5
61763: NEG
61764: PUSH
61765: LD_INT 5
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 5
61775: NEG
61776: PUSH
61777: LD_INT 6
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 6
61787: NEG
61788: PUSH
61789: LD_INT 5
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 6
61799: NEG
61800: PUSH
61801: LD_INT 6
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61823: LD_ADDR_VAR 0 41
61827: PUSH
61828: LD_INT 0
61830: PUSH
61831: LD_INT 2
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61867: LD_ADDR_VAR 0 42
61871: PUSH
61872: LD_INT 2
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 3
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61908: LD_ADDR_VAR 0 43
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: LIST
61947: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61948: LD_ADDR_VAR 0 44
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: LD_INT 3
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61989: LD_ADDR_VAR 0 45
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62033: LD_ADDR_VAR 0 46
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 2
62052: NEG
62053: PUSH
62054: LD_INT 3
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: NEG
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62079: LD_ADDR_VAR 0 47
62083: PUSH
62084: LD_INT 2
62086: NEG
62087: PUSH
62088: LD_INT 3
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62112: LD_ADDR_VAR 0 48
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 1
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62143: LD_ADDR_VAR 0 49
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: LD_INT 2
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62172: LD_ADDR_VAR 0 50
62176: PUSH
62177: LD_INT 2
62179: PUSH
62180: LD_INT 3
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62201: LD_ADDR_VAR 0 51
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: LD_INT 2
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 1
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62232: LD_ADDR_VAR 0 52
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: LD_INT 2
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62265: LD_ADDR_VAR 0 53
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 3
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 2
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62309: LD_ADDR_VAR 0 54
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 3
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62350: LD_ADDR_VAR 0 55
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 3
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62390: LD_ADDR_VAR 0 56
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 0
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: LD_INT 2
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62431: LD_ADDR_VAR 0 57
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 3
62460: NEG
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: LIST
62474: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62475: LD_ADDR_VAR 0 58
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62521: LD_ADDR_VAR 0 59
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62565: LD_ADDR_VAR 0 60
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62606: LD_ADDR_VAR 0 61
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62646: LD_ADDR_VAR 0 62
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: LD_INT 2
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 2
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62687: LD_ADDR_VAR 0 63
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62731: LD_ADDR_VAR 0 64
62735: PUSH
62736: LD_INT 1
62738: NEG
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 2
62750: NEG
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: LIST
62776: ST_TO_ADDR
// end ; 2 :
62777: GO 66043
62779: LD_INT 2
62781: DOUBLE
62782: EQUAL
62783: IFTRUE 62787
62785: GO 66042
62787: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62788: LD_ADDR_VAR 0 29
62792: PUSH
62793: LD_INT 4
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 4
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 5
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 5
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 4
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 3
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 3
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: LD_INT 2
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 5
62878: PUSH
62879: LD_INT 2
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 3
62888: PUSH
62889: LD_INT 3
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 3
62898: PUSH
62899: LD_INT 2
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 4
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 4
62918: PUSH
62919: LD_INT 4
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: LD_INT 4
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: LD_INT 3
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 2
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 4
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 4
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 0
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: LD_INT 4
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: LD_INT 5
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: LD_INT 5
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: LD_INT 4
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: LD_INT 5
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 2
63060: NEG
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 3
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 4
63127: NEG
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 4
63138: NEG
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 4
63150: NEG
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 4
63173: NEG
63174: PUSH
63175: LD_INT 4
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: NEG
63186: PUSH
63187: LD_INT 5
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 3
63197: NEG
63198: PUSH
63199: LD_INT 4
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: LD_INT 3
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 4
63221: NEG
63222: PUSH
63223: LD_INT 3
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 5
63233: NEG
63234: PUSH
63235: LD_INT 4
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 5
63245: NEG
63246: PUSH
63247: LD_INT 5
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: LD_INT 5
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 5
63269: NEG
63270: PUSH
63271: LD_INT 3
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63326: LD_ADDR_VAR 0 30
63330: PUSH
63331: LD_INT 4
63333: PUSH
63334: LD_INT 4
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 4
63343: PUSH
63344: LD_INT 3
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 5
63353: PUSH
63354: LD_INT 4
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 5
63363: PUSH
63364: LD_INT 5
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 4
63373: PUSH
63374: LD_INT 5
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: LD_INT 4
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: LD_INT 3
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 5
63403: PUSH
63404: LD_INT 3
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: LD_INT 5
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: LD_INT 4
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 4
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 3
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: LD_INT 4
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 4
63516: NEG
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 4
63527: NEG
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 3
63539: NEG
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 4
63561: NEG
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 5
63572: NEG
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 5
63583: NEG
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 5
63595: NEG
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 3
63618: NEG
63619: PUSH
63620: LD_INT 3
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 3
63630: NEG
63631: PUSH
63632: LD_INT 4
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: NEG
63643: PUSH
63644: LD_INT 3
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: NEG
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 3
63666: NEG
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 4
63678: NEG
63679: PUSH
63680: LD_INT 3
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 4
63690: NEG
63691: PUSH
63692: LD_INT 4
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 2
63702: NEG
63703: PUSH
63704: LD_INT 4
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 4
63714: NEG
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 4
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 5
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 4
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: LD_INT 3
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: LD_INT 4
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 5
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: LD_INT 3
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 2
63816: NEG
63817: PUSH
63818: LD_INT 5
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63873: LD_ADDR_VAR 0 31
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 4
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: LD_INT 3
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 1
63900: PUSH
63901: LD_INT 4
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 5
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 5
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: LD_INT 4
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: NEG
63942: PUSH
63943: LD_INT 3
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: LD_INT 5
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 2
63962: NEG
63963: PUSH
63964: LD_INT 3
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 3
63973: NEG
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 3
63984: NEG
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 2
64007: NEG
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 4
64029: NEG
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 4
64040: NEG
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 4
64052: NEG
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: NEG
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 4
64075: NEG
64076: PUSH
64077: LD_INT 4
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 4
64087: NEG
64088: PUSH
64089: LD_INT 5
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 3
64099: NEG
64100: PUSH
64101: LD_INT 4
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: LD_INT 3
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 4
64123: NEG
64124: PUSH
64125: LD_INT 3
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 5
64135: NEG
64136: PUSH
64137: LD_INT 4
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 5
64147: NEG
64148: PUSH
64149: LD_INT 5
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 3
64159: NEG
64160: PUSH
64161: LD_INT 5
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 5
64171: NEG
64172: PUSH
64173: LD_INT 3
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 3
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: LD_INT 4
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 1
64205: PUSH
64206: LD_INT 3
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: LD_INT 2
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 3
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: LD_INT 4
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: LD_INT 2
64265: NEG
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 2
64273: NEG
64274: PUSH
64275: LD_INT 4
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 4
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 4
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 5
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 5
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 4
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 3
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 3
64357: PUSH
64358: LD_INT 2
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 5
64368: PUSH
64369: LD_INT 2
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64423: LD_ADDR_VAR 0 32
64427: PUSH
64428: LD_INT 4
64430: NEG
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 4
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 3
64453: NEG
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 3
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 4
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 5
64486: NEG
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 5
64497: NEG
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 5
64509: NEG
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 3
64521: NEG
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 3
64532: NEG
64533: PUSH
64534: LD_INT 3
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: NEG
64545: PUSH
64546: LD_INT 4
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: LD_INT 3
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 3
64580: NEG
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 4
64592: NEG
64593: PUSH
64594: LD_INT 3
64596: NEG
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 4
64604: NEG
64605: PUSH
64606: LD_INT 4
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: LD_INT 4
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 4
64628: NEG
64629: PUSH
64630: LD_INT 2
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: LD_INT 4
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 5
64654: NEG
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: PUSH
64663: LD_INT 4
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: LD_INT 3
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: LD_INT 4
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: NEG
64708: PUSH
64709: LD_INT 5
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 2
64730: NEG
64731: PUSH
64732: LD_INT 5
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 3
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 4
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 4
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 4
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 4
64835: PUSH
64836: LD_INT 4
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 4
64845: PUSH
64846: LD_INT 3
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 5
64855: PUSH
64856: LD_INT 4
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 5
64865: PUSH
64866: LD_INT 5
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 4
64875: PUSH
64876: LD_INT 5
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: PUSH
64886: LD_INT 4
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 3
64895: PUSH
64896: LD_INT 3
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 5
64905: PUSH
64906: LD_INT 3
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 3
64915: PUSH
64916: LD_INT 5
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64970: LD_ADDR_VAR 0 33
64974: PUSH
64975: LD_INT 4
64977: NEG
64978: PUSH
64979: LD_INT 4
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 4
64989: NEG
64990: PUSH
64991: LD_INT 5
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: LD_INT 4
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: LD_INT 3
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 4
65025: NEG
65026: PUSH
65027: LD_INT 3
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 5
65037: NEG
65038: PUSH
65039: LD_INT 4
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 5
65049: NEG
65050: PUSH
65051: LD_INT 5
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 3
65061: NEG
65062: PUSH
65063: LD_INT 5
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 5
65073: NEG
65074: PUSH
65075: LD_INT 3
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: LD_INT 3
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 4
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: LD_INT 3
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 2
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 4
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: LD_INT 2
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 4
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 4
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 4
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 5
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 5
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 4
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 3
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: LD_INT 2
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 5
65270: PUSH
65271: LD_INT 2
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 4
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 4
65310: PUSH
65311: LD_INT 4
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 4
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: LD_INT 2
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 4
65350: PUSH
65351: LD_INT 2
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 2
65360: PUSH
65361: LD_INT 4
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 4
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 3
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: LD_INT 4
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 1
65400: PUSH
65401: LD_INT 5
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: LD_INT 5
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: LD_INT 4
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: NEG
65432: PUSH
65433: LD_INT 3
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: LD_INT 5
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 2
65452: NEG
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65508: LD_ADDR_VAR 0 34
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: LD_INT 4
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: LD_INT 5
65529: NEG
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: PUSH
65538: LD_INT 4
65540: NEG
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: LD_INT 3
65551: NEG
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 3
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: LD_INT 4
65574: NEG
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: LD_INT 5
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 2
65594: PUSH
65595: LD_INT 3
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: NEG
65606: PUSH
65607: LD_INT 5
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 3
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 3
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 4
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 4
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: LD_INT 2
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 4
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 4
65710: PUSH
65711: LD_INT 4
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 4
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 5
65730: PUSH
65731: LD_INT 4
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 5
65740: PUSH
65741: LD_INT 5
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: LD_INT 5
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: LD_INT 4
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 3
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 5
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: LD_INT 5
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 3
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: PUSH
65831: LD_INT 4
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: LD_INT 4
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 1
65850: NEG
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 1
65861: NEG
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 4
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 4
65893: NEG
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 4
65904: NEG
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 4
65938: NEG
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 5
65949: NEG
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 5
65960: NEG
65961: PUSH
65962: LD_INT 1
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 5
65972: NEG
65973: PUSH
65974: LD_INT 2
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 3
65984: NEG
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: ST_TO_ADDR
// end ; end ;
66040: GO 66043
66042: POP
// case btype of b_depot , b_warehouse :
66043: LD_VAR 0 1
66047: PUSH
66048: LD_INT 0
66050: DOUBLE
66051: EQUAL
66052: IFTRUE 66062
66054: LD_INT 1
66056: DOUBLE
66057: EQUAL
66058: IFTRUE 66062
66060: GO 66263
66062: POP
// case nation of nation_american :
66063: LD_VAR 0 5
66067: PUSH
66068: LD_INT 1
66070: DOUBLE
66071: EQUAL
66072: IFTRUE 66076
66074: GO 66132
66076: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66077: LD_ADDR_VAR 0 9
66081: PUSH
66082: LD_VAR 0 11
66086: PUSH
66087: LD_VAR 0 12
66091: PUSH
66092: LD_VAR 0 13
66096: PUSH
66097: LD_VAR 0 14
66101: PUSH
66102: LD_VAR 0 15
66106: PUSH
66107: LD_VAR 0 16
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: PUSH
66120: LD_VAR 0 4
66124: PUSH
66125: LD_INT 1
66127: PLUS
66128: ARRAY
66129: ST_TO_ADDR
66130: GO 66261
66132: LD_INT 2
66134: DOUBLE
66135: EQUAL
66136: IFTRUE 66140
66138: GO 66196
66140: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66141: LD_ADDR_VAR 0 9
66145: PUSH
66146: LD_VAR 0 17
66150: PUSH
66151: LD_VAR 0 18
66155: PUSH
66156: LD_VAR 0 19
66160: PUSH
66161: LD_VAR 0 20
66165: PUSH
66166: LD_VAR 0 21
66170: PUSH
66171: LD_VAR 0 22
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: PUSH
66184: LD_VAR 0 4
66188: PUSH
66189: LD_INT 1
66191: PLUS
66192: ARRAY
66193: ST_TO_ADDR
66194: GO 66261
66196: LD_INT 3
66198: DOUBLE
66199: EQUAL
66200: IFTRUE 66204
66202: GO 66260
66204: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66205: LD_ADDR_VAR 0 9
66209: PUSH
66210: LD_VAR 0 23
66214: PUSH
66215: LD_VAR 0 24
66219: PUSH
66220: LD_VAR 0 25
66224: PUSH
66225: LD_VAR 0 26
66229: PUSH
66230: LD_VAR 0 27
66234: PUSH
66235: LD_VAR 0 28
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: LD_VAR 0 4
66252: PUSH
66253: LD_INT 1
66255: PLUS
66256: ARRAY
66257: ST_TO_ADDR
66258: GO 66261
66260: POP
66261: GO 66816
66263: LD_INT 2
66265: DOUBLE
66266: EQUAL
66267: IFTRUE 66277
66269: LD_INT 3
66271: DOUBLE
66272: EQUAL
66273: IFTRUE 66277
66275: GO 66333
66277: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66278: LD_ADDR_VAR 0 9
66282: PUSH
66283: LD_VAR 0 29
66287: PUSH
66288: LD_VAR 0 30
66292: PUSH
66293: LD_VAR 0 31
66297: PUSH
66298: LD_VAR 0 32
66302: PUSH
66303: LD_VAR 0 33
66307: PUSH
66308: LD_VAR 0 34
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: PUSH
66321: LD_VAR 0 4
66325: PUSH
66326: LD_INT 1
66328: PLUS
66329: ARRAY
66330: ST_TO_ADDR
66331: GO 66816
66333: LD_INT 16
66335: DOUBLE
66336: EQUAL
66337: IFTRUE 66395
66339: LD_INT 17
66341: DOUBLE
66342: EQUAL
66343: IFTRUE 66395
66345: LD_INT 18
66347: DOUBLE
66348: EQUAL
66349: IFTRUE 66395
66351: LD_INT 19
66353: DOUBLE
66354: EQUAL
66355: IFTRUE 66395
66357: LD_INT 22
66359: DOUBLE
66360: EQUAL
66361: IFTRUE 66395
66363: LD_INT 20
66365: DOUBLE
66366: EQUAL
66367: IFTRUE 66395
66369: LD_INT 21
66371: DOUBLE
66372: EQUAL
66373: IFTRUE 66395
66375: LD_INT 23
66377: DOUBLE
66378: EQUAL
66379: IFTRUE 66395
66381: LD_INT 24
66383: DOUBLE
66384: EQUAL
66385: IFTRUE 66395
66387: LD_INT 25
66389: DOUBLE
66390: EQUAL
66391: IFTRUE 66395
66393: GO 66451
66395: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66396: LD_ADDR_VAR 0 9
66400: PUSH
66401: LD_VAR 0 35
66405: PUSH
66406: LD_VAR 0 36
66410: PUSH
66411: LD_VAR 0 37
66415: PUSH
66416: LD_VAR 0 38
66420: PUSH
66421: LD_VAR 0 39
66425: PUSH
66426: LD_VAR 0 40
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: LD_VAR 0 4
66443: PUSH
66444: LD_INT 1
66446: PLUS
66447: ARRAY
66448: ST_TO_ADDR
66449: GO 66816
66451: LD_INT 6
66453: DOUBLE
66454: EQUAL
66455: IFTRUE 66507
66457: LD_INT 7
66459: DOUBLE
66460: EQUAL
66461: IFTRUE 66507
66463: LD_INT 8
66465: DOUBLE
66466: EQUAL
66467: IFTRUE 66507
66469: LD_INT 13
66471: DOUBLE
66472: EQUAL
66473: IFTRUE 66507
66475: LD_INT 12
66477: DOUBLE
66478: EQUAL
66479: IFTRUE 66507
66481: LD_INT 15
66483: DOUBLE
66484: EQUAL
66485: IFTRUE 66507
66487: LD_INT 11
66489: DOUBLE
66490: EQUAL
66491: IFTRUE 66507
66493: LD_INT 14
66495: DOUBLE
66496: EQUAL
66497: IFTRUE 66507
66499: LD_INT 10
66501: DOUBLE
66502: EQUAL
66503: IFTRUE 66507
66505: GO 66563
66507: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66508: LD_ADDR_VAR 0 9
66512: PUSH
66513: LD_VAR 0 41
66517: PUSH
66518: LD_VAR 0 42
66522: PUSH
66523: LD_VAR 0 43
66527: PUSH
66528: LD_VAR 0 44
66532: PUSH
66533: LD_VAR 0 45
66537: PUSH
66538: LD_VAR 0 46
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: PUSH
66551: LD_VAR 0 4
66555: PUSH
66556: LD_INT 1
66558: PLUS
66559: ARRAY
66560: ST_TO_ADDR
66561: GO 66816
66563: LD_INT 36
66565: DOUBLE
66566: EQUAL
66567: IFTRUE 66571
66569: GO 66627
66571: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66572: LD_ADDR_VAR 0 9
66576: PUSH
66577: LD_VAR 0 47
66581: PUSH
66582: LD_VAR 0 48
66586: PUSH
66587: LD_VAR 0 49
66591: PUSH
66592: LD_VAR 0 50
66596: PUSH
66597: LD_VAR 0 51
66601: PUSH
66602: LD_VAR 0 52
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: PUSH
66615: LD_VAR 0 4
66619: PUSH
66620: LD_INT 1
66622: PLUS
66623: ARRAY
66624: ST_TO_ADDR
66625: GO 66816
66627: LD_INT 4
66629: DOUBLE
66630: EQUAL
66631: IFTRUE 66653
66633: LD_INT 5
66635: DOUBLE
66636: EQUAL
66637: IFTRUE 66653
66639: LD_INT 34
66641: DOUBLE
66642: EQUAL
66643: IFTRUE 66653
66645: LD_INT 37
66647: DOUBLE
66648: EQUAL
66649: IFTRUE 66653
66651: GO 66709
66653: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66654: LD_ADDR_VAR 0 9
66658: PUSH
66659: LD_VAR 0 53
66663: PUSH
66664: LD_VAR 0 54
66668: PUSH
66669: LD_VAR 0 55
66673: PUSH
66674: LD_VAR 0 56
66678: PUSH
66679: LD_VAR 0 57
66683: PUSH
66684: LD_VAR 0 58
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: PUSH
66697: LD_VAR 0 4
66701: PUSH
66702: LD_INT 1
66704: PLUS
66705: ARRAY
66706: ST_TO_ADDR
66707: GO 66816
66709: LD_INT 31
66711: DOUBLE
66712: EQUAL
66713: IFTRUE 66759
66715: LD_INT 32
66717: DOUBLE
66718: EQUAL
66719: IFTRUE 66759
66721: LD_INT 33
66723: DOUBLE
66724: EQUAL
66725: IFTRUE 66759
66727: LD_INT 27
66729: DOUBLE
66730: EQUAL
66731: IFTRUE 66759
66733: LD_INT 26
66735: DOUBLE
66736: EQUAL
66737: IFTRUE 66759
66739: LD_INT 28
66741: DOUBLE
66742: EQUAL
66743: IFTRUE 66759
66745: LD_INT 29
66747: DOUBLE
66748: EQUAL
66749: IFTRUE 66759
66751: LD_INT 30
66753: DOUBLE
66754: EQUAL
66755: IFTRUE 66759
66757: GO 66815
66759: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66760: LD_ADDR_VAR 0 9
66764: PUSH
66765: LD_VAR 0 59
66769: PUSH
66770: LD_VAR 0 60
66774: PUSH
66775: LD_VAR 0 61
66779: PUSH
66780: LD_VAR 0 62
66784: PUSH
66785: LD_VAR 0 63
66789: PUSH
66790: LD_VAR 0 64
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: PUSH
66803: LD_VAR 0 4
66807: PUSH
66808: LD_INT 1
66810: PLUS
66811: ARRAY
66812: ST_TO_ADDR
66813: GO 66816
66815: POP
// temp_list2 = [ ] ;
66816: LD_ADDR_VAR 0 10
66820: PUSH
66821: EMPTY
66822: ST_TO_ADDR
// for i in temp_list do
66823: LD_ADDR_VAR 0 8
66827: PUSH
66828: LD_VAR 0 9
66832: PUSH
66833: FOR_IN
66834: IFFALSE 66886
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66836: LD_ADDR_VAR 0 10
66840: PUSH
66841: LD_VAR 0 10
66845: PUSH
66846: LD_VAR 0 8
66850: PUSH
66851: LD_INT 1
66853: ARRAY
66854: PUSH
66855: LD_VAR 0 2
66859: PLUS
66860: PUSH
66861: LD_VAR 0 8
66865: PUSH
66866: LD_INT 2
66868: ARRAY
66869: PUSH
66870: LD_VAR 0 3
66874: PLUS
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: EMPTY
66881: LIST
66882: ADD
66883: ST_TO_ADDR
66884: GO 66833
66886: POP
66887: POP
// result = temp_list2 ;
66888: LD_ADDR_VAR 0 7
66892: PUSH
66893: LD_VAR 0 10
66897: ST_TO_ADDR
// end ;
66898: LD_VAR 0 7
66902: RET
// export function EnemyInRange ( unit , dist ) ; begin
66903: LD_INT 0
66905: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66906: LD_ADDR_VAR 0 3
66910: PUSH
66911: LD_VAR 0 1
66915: PPUSH
66916: CALL_OW 255
66920: PPUSH
66921: LD_VAR 0 1
66925: PPUSH
66926: CALL_OW 250
66930: PPUSH
66931: LD_VAR 0 1
66935: PPUSH
66936: CALL_OW 251
66940: PPUSH
66941: LD_VAR 0 2
66945: PPUSH
66946: CALL 40298 0 4
66950: PUSH
66951: LD_INT 4
66953: ARRAY
66954: ST_TO_ADDR
// end ;
66955: LD_VAR 0 3
66959: RET
// export function PlayerSeeMe ( unit ) ; begin
66960: LD_INT 0
66962: PPUSH
// result := See ( your_side , unit ) ;
66963: LD_ADDR_VAR 0 2
66967: PUSH
66968: LD_OWVAR 2
66972: PPUSH
66973: LD_VAR 0 1
66977: PPUSH
66978: CALL_OW 292
66982: ST_TO_ADDR
// end ;
66983: LD_VAR 0 2
66987: RET
// export function ReverseDir ( unit ) ; begin
66988: LD_INT 0
66990: PPUSH
// if not unit then
66991: LD_VAR 0 1
66995: NOT
66996: IFFALSE 67000
// exit ;
66998: GO 67023
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67000: LD_ADDR_VAR 0 2
67004: PUSH
67005: LD_VAR 0 1
67009: PPUSH
67010: CALL_OW 254
67014: PUSH
67015: LD_INT 3
67017: PLUS
67018: PUSH
67019: LD_INT 6
67021: MOD
67022: ST_TO_ADDR
// end ;
67023: LD_VAR 0 2
67027: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67028: LD_INT 0
67030: PPUSH
67031: PPUSH
67032: PPUSH
67033: PPUSH
67034: PPUSH
// if not hexes then
67035: LD_VAR 0 2
67039: NOT
67040: IFFALSE 67044
// exit ;
67042: GO 67192
// dist := 9999 ;
67044: LD_ADDR_VAR 0 5
67048: PUSH
67049: LD_INT 9999
67051: ST_TO_ADDR
// for i = 1 to hexes do
67052: LD_ADDR_VAR 0 4
67056: PUSH
67057: DOUBLE
67058: LD_INT 1
67060: DEC
67061: ST_TO_ADDR
67062: LD_VAR 0 2
67066: PUSH
67067: FOR_TO
67068: IFFALSE 67180
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67070: LD_VAR 0 1
67074: PPUSH
67075: LD_VAR 0 2
67079: PUSH
67080: LD_VAR 0 4
67084: ARRAY
67085: PUSH
67086: LD_INT 1
67088: ARRAY
67089: PPUSH
67090: LD_VAR 0 2
67094: PUSH
67095: LD_VAR 0 4
67099: ARRAY
67100: PUSH
67101: LD_INT 2
67103: ARRAY
67104: PPUSH
67105: CALL_OW 297
67109: PUSH
67110: LD_VAR 0 5
67114: LESS
67115: IFFALSE 67178
// begin hex := hexes [ i ] ;
67117: LD_ADDR_VAR 0 7
67121: PUSH
67122: LD_VAR 0 2
67126: PUSH
67127: LD_VAR 0 4
67131: ARRAY
67132: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67133: LD_ADDR_VAR 0 5
67137: PUSH
67138: LD_VAR 0 1
67142: PPUSH
67143: LD_VAR 0 2
67147: PUSH
67148: LD_VAR 0 4
67152: ARRAY
67153: PUSH
67154: LD_INT 1
67156: ARRAY
67157: PPUSH
67158: LD_VAR 0 2
67162: PUSH
67163: LD_VAR 0 4
67167: ARRAY
67168: PUSH
67169: LD_INT 2
67171: ARRAY
67172: PPUSH
67173: CALL_OW 297
67177: ST_TO_ADDR
// end ; end ;
67178: GO 67067
67180: POP
67181: POP
// result := hex ;
67182: LD_ADDR_VAR 0 3
67186: PUSH
67187: LD_VAR 0 7
67191: ST_TO_ADDR
// end ;
67192: LD_VAR 0 3
67196: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67197: LD_INT 0
67199: PPUSH
67200: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67201: LD_VAR 0 1
67205: NOT
67206: PUSH
67207: LD_VAR 0 1
67211: PUSH
67212: LD_INT 21
67214: PUSH
67215: LD_INT 2
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 23
67224: PUSH
67225: LD_INT 2
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PPUSH
67236: CALL_OW 69
67240: IN
67241: NOT
67242: OR
67243: IFFALSE 67247
// exit ;
67245: GO 67294
// for i = 1 to 3 do
67247: LD_ADDR_VAR 0 3
67251: PUSH
67252: DOUBLE
67253: LD_INT 1
67255: DEC
67256: ST_TO_ADDR
67257: LD_INT 3
67259: PUSH
67260: FOR_TO
67261: IFFALSE 67292
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67263: LD_VAR 0 1
67267: PPUSH
67268: CALL_OW 250
67272: PPUSH
67273: LD_VAR 0 1
67277: PPUSH
67278: CALL_OW 251
67282: PPUSH
67283: LD_INT 1
67285: PPUSH
67286: CALL_OW 453
67290: GO 67260
67292: POP
67293: POP
// end ;
67294: LD_VAR 0 2
67298: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67299: LD_INT 0
67301: PPUSH
67302: PPUSH
67303: PPUSH
67304: PPUSH
67305: PPUSH
67306: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67307: LD_VAR 0 1
67311: NOT
67312: PUSH
67313: LD_VAR 0 2
67317: NOT
67318: OR
67319: PUSH
67320: LD_VAR 0 1
67324: PPUSH
67325: CALL_OW 314
67329: OR
67330: IFFALSE 67334
// exit ;
67332: GO 67775
// x := GetX ( enemy_unit ) ;
67334: LD_ADDR_VAR 0 7
67338: PUSH
67339: LD_VAR 0 2
67343: PPUSH
67344: CALL_OW 250
67348: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67349: LD_ADDR_VAR 0 8
67353: PUSH
67354: LD_VAR 0 2
67358: PPUSH
67359: CALL_OW 251
67363: ST_TO_ADDR
// if not x or not y then
67364: LD_VAR 0 7
67368: NOT
67369: PUSH
67370: LD_VAR 0 8
67374: NOT
67375: OR
67376: IFFALSE 67380
// exit ;
67378: GO 67775
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67380: LD_ADDR_VAR 0 6
67384: PUSH
67385: LD_VAR 0 7
67389: PPUSH
67390: LD_INT 0
67392: PPUSH
67393: LD_INT 4
67395: PPUSH
67396: CALL_OW 272
67400: PUSH
67401: LD_VAR 0 8
67405: PPUSH
67406: LD_INT 0
67408: PPUSH
67409: LD_INT 4
67411: PPUSH
67412: CALL_OW 273
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_VAR 0 7
67425: PPUSH
67426: LD_INT 1
67428: PPUSH
67429: LD_INT 4
67431: PPUSH
67432: CALL_OW 272
67436: PUSH
67437: LD_VAR 0 8
67441: PPUSH
67442: LD_INT 1
67444: PPUSH
67445: LD_INT 4
67447: PPUSH
67448: CALL_OW 273
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_VAR 0 7
67461: PPUSH
67462: LD_INT 2
67464: PPUSH
67465: LD_INT 4
67467: PPUSH
67468: CALL_OW 272
67472: PUSH
67473: LD_VAR 0 8
67477: PPUSH
67478: LD_INT 2
67480: PPUSH
67481: LD_INT 4
67483: PPUSH
67484: CALL_OW 273
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_VAR 0 7
67497: PPUSH
67498: LD_INT 3
67500: PPUSH
67501: LD_INT 4
67503: PPUSH
67504: CALL_OW 272
67508: PUSH
67509: LD_VAR 0 8
67513: PPUSH
67514: LD_INT 3
67516: PPUSH
67517: LD_INT 4
67519: PPUSH
67520: CALL_OW 273
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_VAR 0 7
67533: PPUSH
67534: LD_INT 4
67536: PPUSH
67537: LD_INT 4
67539: PPUSH
67540: CALL_OW 272
67544: PUSH
67545: LD_VAR 0 8
67549: PPUSH
67550: LD_INT 4
67552: PPUSH
67553: LD_INT 4
67555: PPUSH
67556: CALL_OW 273
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_VAR 0 7
67569: PPUSH
67570: LD_INT 5
67572: PPUSH
67573: LD_INT 4
67575: PPUSH
67576: CALL_OW 272
67580: PUSH
67581: LD_VAR 0 8
67585: PPUSH
67586: LD_INT 5
67588: PPUSH
67589: LD_INT 4
67591: PPUSH
67592: CALL_OW 273
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: ST_TO_ADDR
// for i = tmp downto 1 do
67609: LD_ADDR_VAR 0 4
67613: PUSH
67614: DOUBLE
67615: LD_VAR 0 6
67619: INC
67620: ST_TO_ADDR
67621: LD_INT 1
67623: PUSH
67624: FOR_DOWNTO
67625: IFFALSE 67726
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67627: LD_VAR 0 6
67631: PUSH
67632: LD_VAR 0 4
67636: ARRAY
67637: PUSH
67638: LD_INT 1
67640: ARRAY
67641: PPUSH
67642: LD_VAR 0 6
67646: PUSH
67647: LD_VAR 0 4
67651: ARRAY
67652: PUSH
67653: LD_INT 2
67655: ARRAY
67656: PPUSH
67657: CALL_OW 488
67661: NOT
67662: PUSH
67663: LD_VAR 0 6
67667: PUSH
67668: LD_VAR 0 4
67672: ARRAY
67673: PUSH
67674: LD_INT 1
67676: ARRAY
67677: PPUSH
67678: LD_VAR 0 6
67682: PUSH
67683: LD_VAR 0 4
67687: ARRAY
67688: PUSH
67689: LD_INT 2
67691: ARRAY
67692: PPUSH
67693: CALL_OW 428
67697: PUSH
67698: LD_INT 0
67700: NONEQUAL
67701: OR
67702: IFFALSE 67724
// tmp := Delete ( tmp , i ) ;
67704: LD_ADDR_VAR 0 6
67708: PUSH
67709: LD_VAR 0 6
67713: PPUSH
67714: LD_VAR 0 4
67718: PPUSH
67719: CALL_OW 3
67723: ST_TO_ADDR
67724: GO 67624
67726: POP
67727: POP
// j := GetClosestHex ( unit , tmp ) ;
67728: LD_ADDR_VAR 0 5
67732: PUSH
67733: LD_VAR 0 1
67737: PPUSH
67738: LD_VAR 0 6
67742: PPUSH
67743: CALL 67028 0 2
67747: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67748: LD_VAR 0 1
67752: PPUSH
67753: LD_VAR 0 5
67757: PUSH
67758: LD_INT 1
67760: ARRAY
67761: PPUSH
67762: LD_VAR 0 5
67766: PUSH
67767: LD_INT 2
67769: ARRAY
67770: PPUSH
67771: CALL_OW 111
// end ;
67775: LD_VAR 0 3
67779: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67780: LD_INT 0
67782: PPUSH
67783: PPUSH
67784: PPUSH
// uc_side = 0 ;
67785: LD_ADDR_OWVAR 20
67789: PUSH
67790: LD_INT 0
67792: ST_TO_ADDR
// uc_nation = 0 ;
67793: LD_ADDR_OWVAR 21
67797: PUSH
67798: LD_INT 0
67800: ST_TO_ADDR
// InitHc_All ( ) ;
67801: CALL_OW 584
// InitVc ;
67805: CALL_OW 20
// if mastodonts then
67809: LD_VAR 0 6
67813: IFFALSE 67880
// for i = 1 to mastodonts do
67815: LD_ADDR_VAR 0 11
67819: PUSH
67820: DOUBLE
67821: LD_INT 1
67823: DEC
67824: ST_TO_ADDR
67825: LD_VAR 0 6
67829: PUSH
67830: FOR_TO
67831: IFFALSE 67878
// begin vc_chassis := 31 ;
67833: LD_ADDR_OWVAR 37
67837: PUSH
67838: LD_INT 31
67840: ST_TO_ADDR
// vc_control := control_rider ;
67841: LD_ADDR_OWVAR 38
67845: PUSH
67846: LD_INT 4
67848: ST_TO_ADDR
// animal := CreateVehicle ;
67849: LD_ADDR_VAR 0 12
67853: PUSH
67854: CALL_OW 45
67858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67859: LD_VAR 0 12
67863: PPUSH
67864: LD_VAR 0 8
67868: PPUSH
67869: LD_INT 0
67871: PPUSH
67872: CALL 70068 0 3
// end ;
67876: GO 67830
67878: POP
67879: POP
// if horses then
67880: LD_VAR 0 5
67884: IFFALSE 67951
// for i = 1 to horses do
67886: LD_ADDR_VAR 0 11
67890: PUSH
67891: DOUBLE
67892: LD_INT 1
67894: DEC
67895: ST_TO_ADDR
67896: LD_VAR 0 5
67900: PUSH
67901: FOR_TO
67902: IFFALSE 67949
// begin hc_class := 21 ;
67904: LD_ADDR_OWVAR 28
67908: PUSH
67909: LD_INT 21
67911: ST_TO_ADDR
// hc_gallery :=  ;
67912: LD_ADDR_OWVAR 33
67916: PUSH
67917: LD_STRING 
67919: ST_TO_ADDR
// animal := CreateHuman ;
67920: LD_ADDR_VAR 0 12
67924: PUSH
67925: CALL_OW 44
67929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67930: LD_VAR 0 12
67934: PPUSH
67935: LD_VAR 0 8
67939: PPUSH
67940: LD_INT 0
67942: PPUSH
67943: CALL 70068 0 3
// end ;
67947: GO 67901
67949: POP
67950: POP
// if birds then
67951: LD_VAR 0 1
67955: IFFALSE 68022
// for i = 1 to birds do
67957: LD_ADDR_VAR 0 11
67961: PUSH
67962: DOUBLE
67963: LD_INT 1
67965: DEC
67966: ST_TO_ADDR
67967: LD_VAR 0 1
67971: PUSH
67972: FOR_TO
67973: IFFALSE 68020
// begin hc_class = 18 ;
67975: LD_ADDR_OWVAR 28
67979: PUSH
67980: LD_INT 18
67982: ST_TO_ADDR
// hc_gallery =  ;
67983: LD_ADDR_OWVAR 33
67987: PUSH
67988: LD_STRING 
67990: ST_TO_ADDR
// animal := CreateHuman ;
67991: LD_ADDR_VAR 0 12
67995: PUSH
67996: CALL_OW 44
68000: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68001: LD_VAR 0 12
68005: PPUSH
68006: LD_VAR 0 8
68010: PPUSH
68011: LD_INT 0
68013: PPUSH
68014: CALL 70068 0 3
// end ;
68018: GO 67972
68020: POP
68021: POP
// if tigers then
68022: LD_VAR 0 2
68026: IFFALSE 68110
// for i = 1 to tigers do
68028: LD_ADDR_VAR 0 11
68032: PUSH
68033: DOUBLE
68034: LD_INT 1
68036: DEC
68037: ST_TO_ADDR
68038: LD_VAR 0 2
68042: PUSH
68043: FOR_TO
68044: IFFALSE 68108
// begin hc_class = class_tiger ;
68046: LD_ADDR_OWVAR 28
68050: PUSH
68051: LD_INT 14
68053: ST_TO_ADDR
// hc_gallery =  ;
68054: LD_ADDR_OWVAR 33
68058: PUSH
68059: LD_STRING 
68061: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68062: LD_ADDR_OWVAR 35
68066: PUSH
68067: LD_INT 7
68069: NEG
68070: PPUSH
68071: LD_INT 7
68073: PPUSH
68074: CALL_OW 12
68078: ST_TO_ADDR
// animal := CreateHuman ;
68079: LD_ADDR_VAR 0 12
68083: PUSH
68084: CALL_OW 44
68088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68089: LD_VAR 0 12
68093: PPUSH
68094: LD_VAR 0 8
68098: PPUSH
68099: LD_INT 0
68101: PPUSH
68102: CALL 70068 0 3
// end ;
68106: GO 68043
68108: POP
68109: POP
// if apemans then
68110: LD_VAR 0 3
68114: IFFALSE 68237
// for i = 1 to apemans do
68116: LD_ADDR_VAR 0 11
68120: PUSH
68121: DOUBLE
68122: LD_INT 1
68124: DEC
68125: ST_TO_ADDR
68126: LD_VAR 0 3
68130: PUSH
68131: FOR_TO
68132: IFFALSE 68235
// begin hc_class = class_apeman ;
68134: LD_ADDR_OWVAR 28
68138: PUSH
68139: LD_INT 12
68141: ST_TO_ADDR
// hc_gallery =  ;
68142: LD_ADDR_OWVAR 33
68146: PUSH
68147: LD_STRING 
68149: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68150: LD_ADDR_OWVAR 35
68154: PUSH
68155: LD_INT 2
68157: NEG
68158: PPUSH
68159: LD_INT 2
68161: PPUSH
68162: CALL_OW 12
68166: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68167: LD_ADDR_OWVAR 31
68171: PUSH
68172: LD_INT 1
68174: PPUSH
68175: LD_INT 3
68177: PPUSH
68178: CALL_OW 12
68182: PUSH
68183: LD_INT 1
68185: PPUSH
68186: LD_INT 3
68188: PPUSH
68189: CALL_OW 12
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: LD_INT 0
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: ST_TO_ADDR
// animal := CreateHuman ;
68206: LD_ADDR_VAR 0 12
68210: PUSH
68211: CALL_OW 44
68215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68216: LD_VAR 0 12
68220: PPUSH
68221: LD_VAR 0 8
68225: PPUSH
68226: LD_INT 0
68228: PPUSH
68229: CALL 70068 0 3
// end ;
68233: GO 68131
68235: POP
68236: POP
// if enchidnas then
68237: LD_VAR 0 4
68241: IFFALSE 68308
// for i = 1 to enchidnas do
68243: LD_ADDR_VAR 0 11
68247: PUSH
68248: DOUBLE
68249: LD_INT 1
68251: DEC
68252: ST_TO_ADDR
68253: LD_VAR 0 4
68257: PUSH
68258: FOR_TO
68259: IFFALSE 68306
// begin hc_class = 13 ;
68261: LD_ADDR_OWVAR 28
68265: PUSH
68266: LD_INT 13
68268: ST_TO_ADDR
// hc_gallery =  ;
68269: LD_ADDR_OWVAR 33
68273: PUSH
68274: LD_STRING 
68276: ST_TO_ADDR
// animal := CreateHuman ;
68277: LD_ADDR_VAR 0 12
68281: PUSH
68282: CALL_OW 44
68286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68287: LD_VAR 0 12
68291: PPUSH
68292: LD_VAR 0 8
68296: PPUSH
68297: LD_INT 0
68299: PPUSH
68300: CALL 70068 0 3
// end ;
68304: GO 68258
68306: POP
68307: POP
// if fishes then
68308: LD_VAR 0 7
68312: IFFALSE 68379
// for i = 1 to fishes do
68314: LD_ADDR_VAR 0 11
68318: PUSH
68319: DOUBLE
68320: LD_INT 1
68322: DEC
68323: ST_TO_ADDR
68324: LD_VAR 0 7
68328: PUSH
68329: FOR_TO
68330: IFFALSE 68377
// begin hc_class = 20 ;
68332: LD_ADDR_OWVAR 28
68336: PUSH
68337: LD_INT 20
68339: ST_TO_ADDR
// hc_gallery =  ;
68340: LD_ADDR_OWVAR 33
68344: PUSH
68345: LD_STRING 
68347: ST_TO_ADDR
// animal := CreateHuman ;
68348: LD_ADDR_VAR 0 12
68352: PUSH
68353: CALL_OW 44
68357: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68358: LD_VAR 0 12
68362: PPUSH
68363: LD_VAR 0 9
68367: PPUSH
68368: LD_INT 0
68370: PPUSH
68371: CALL 70068 0 3
// end ;
68375: GO 68329
68377: POP
68378: POP
// end ;
68379: LD_VAR 0 10
68383: RET
// export function WantHeal ( sci , unit ) ; begin
68384: LD_INT 0
68386: PPUSH
// if GetTaskList ( sci ) > 0 then
68387: LD_VAR 0 1
68391: PPUSH
68392: CALL_OW 437
68396: PUSH
68397: LD_INT 0
68399: GREATER
68400: IFFALSE 68470
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68402: LD_VAR 0 1
68406: PPUSH
68407: CALL_OW 437
68411: PUSH
68412: LD_INT 1
68414: ARRAY
68415: PUSH
68416: LD_INT 1
68418: ARRAY
68419: PUSH
68420: LD_STRING l
68422: EQUAL
68423: PUSH
68424: LD_VAR 0 1
68428: PPUSH
68429: CALL_OW 437
68433: PUSH
68434: LD_INT 1
68436: ARRAY
68437: PUSH
68438: LD_INT 4
68440: ARRAY
68441: PUSH
68442: LD_VAR 0 2
68446: EQUAL
68447: AND
68448: IFFALSE 68460
// result := true else
68450: LD_ADDR_VAR 0 3
68454: PUSH
68455: LD_INT 1
68457: ST_TO_ADDR
68458: GO 68468
// result := false ;
68460: LD_ADDR_VAR 0 3
68464: PUSH
68465: LD_INT 0
68467: ST_TO_ADDR
// end else
68468: GO 68478
// result := false ;
68470: LD_ADDR_VAR 0 3
68474: PUSH
68475: LD_INT 0
68477: ST_TO_ADDR
// end ;
68478: LD_VAR 0 3
68482: RET
// export function HealTarget ( sci ) ; begin
68483: LD_INT 0
68485: PPUSH
// if not sci then
68486: LD_VAR 0 1
68490: NOT
68491: IFFALSE 68495
// exit ;
68493: GO 68560
// result := 0 ;
68495: LD_ADDR_VAR 0 2
68499: PUSH
68500: LD_INT 0
68502: ST_TO_ADDR
// if GetTaskList ( sci ) then
68503: LD_VAR 0 1
68507: PPUSH
68508: CALL_OW 437
68512: IFFALSE 68560
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68514: LD_VAR 0 1
68518: PPUSH
68519: CALL_OW 437
68523: PUSH
68524: LD_INT 1
68526: ARRAY
68527: PUSH
68528: LD_INT 1
68530: ARRAY
68531: PUSH
68532: LD_STRING l
68534: EQUAL
68535: IFFALSE 68560
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68537: LD_ADDR_VAR 0 2
68541: PUSH
68542: LD_VAR 0 1
68546: PPUSH
68547: CALL_OW 437
68551: PUSH
68552: LD_INT 1
68554: ARRAY
68555: PUSH
68556: LD_INT 4
68558: ARRAY
68559: ST_TO_ADDR
// end ;
68560: LD_VAR 0 2
68564: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68565: LD_INT 0
68567: PPUSH
68568: PPUSH
68569: PPUSH
68570: PPUSH
// if not base_units then
68571: LD_VAR 0 1
68575: NOT
68576: IFFALSE 68580
// exit ;
68578: GO 68667
// result := false ;
68580: LD_ADDR_VAR 0 2
68584: PUSH
68585: LD_INT 0
68587: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68588: LD_ADDR_VAR 0 5
68592: PUSH
68593: LD_VAR 0 1
68597: PPUSH
68598: LD_INT 21
68600: PUSH
68601: LD_INT 3
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PPUSH
68608: CALL_OW 72
68612: ST_TO_ADDR
// if not tmp then
68613: LD_VAR 0 5
68617: NOT
68618: IFFALSE 68622
// exit ;
68620: GO 68667
// for i in tmp do
68622: LD_ADDR_VAR 0 3
68626: PUSH
68627: LD_VAR 0 5
68631: PUSH
68632: FOR_IN
68633: IFFALSE 68665
// begin result := EnemyInRange ( i , 22 ) ;
68635: LD_ADDR_VAR 0 2
68639: PUSH
68640: LD_VAR 0 3
68644: PPUSH
68645: LD_INT 22
68647: PPUSH
68648: CALL 66903 0 2
68652: ST_TO_ADDR
// if result then
68653: LD_VAR 0 2
68657: IFFALSE 68663
// exit ;
68659: POP
68660: POP
68661: GO 68667
// end ;
68663: GO 68632
68665: POP
68666: POP
// end ;
68667: LD_VAR 0 2
68671: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68672: LD_INT 0
68674: PPUSH
68675: PPUSH
// if not units then
68676: LD_VAR 0 1
68680: NOT
68681: IFFALSE 68685
// exit ;
68683: GO 68755
// result := [ ] ;
68685: LD_ADDR_VAR 0 3
68689: PUSH
68690: EMPTY
68691: ST_TO_ADDR
// for i in units do
68692: LD_ADDR_VAR 0 4
68696: PUSH
68697: LD_VAR 0 1
68701: PUSH
68702: FOR_IN
68703: IFFALSE 68753
// if GetTag ( i ) = tag then
68705: LD_VAR 0 4
68709: PPUSH
68710: CALL_OW 110
68714: PUSH
68715: LD_VAR 0 2
68719: EQUAL
68720: IFFALSE 68751
// result := Insert ( result , result + 1 , i ) ;
68722: LD_ADDR_VAR 0 3
68726: PUSH
68727: LD_VAR 0 3
68731: PPUSH
68732: LD_VAR 0 3
68736: PUSH
68737: LD_INT 1
68739: PLUS
68740: PPUSH
68741: LD_VAR 0 4
68745: PPUSH
68746: CALL_OW 2
68750: ST_TO_ADDR
68751: GO 68702
68753: POP
68754: POP
// end ;
68755: LD_VAR 0 3
68759: RET
// export function IsDriver ( un ) ; begin
68760: LD_INT 0
68762: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68763: LD_ADDR_VAR 0 2
68767: PUSH
68768: LD_VAR 0 1
68772: PUSH
68773: LD_INT 55
68775: PUSH
68776: EMPTY
68777: LIST
68778: PPUSH
68779: CALL_OW 69
68783: IN
68784: ST_TO_ADDR
// end ;
68785: LD_VAR 0 2
68789: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68790: LD_INT 0
68792: PPUSH
68793: PPUSH
// list := [ ] ;
68794: LD_ADDR_VAR 0 5
68798: PUSH
68799: EMPTY
68800: ST_TO_ADDR
// case d of 0 :
68801: LD_VAR 0 3
68805: PUSH
68806: LD_INT 0
68808: DOUBLE
68809: EQUAL
68810: IFTRUE 68814
68812: GO 68947
68814: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68815: LD_ADDR_VAR 0 5
68819: PUSH
68820: LD_VAR 0 1
68824: PUSH
68825: LD_INT 4
68827: MINUS
68828: PUSH
68829: LD_VAR 0 2
68833: PUSH
68834: LD_INT 4
68836: MINUS
68837: PUSH
68838: LD_INT 2
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: LIST
68845: PUSH
68846: LD_VAR 0 1
68850: PUSH
68851: LD_INT 3
68853: MINUS
68854: PUSH
68855: LD_VAR 0 2
68859: PUSH
68860: LD_INT 1
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: LIST
68867: PUSH
68868: LD_VAR 0 1
68872: PUSH
68873: LD_INT 4
68875: PLUS
68876: PUSH
68877: LD_VAR 0 2
68881: PUSH
68882: LD_INT 4
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: PUSH
68890: LD_VAR 0 1
68894: PUSH
68895: LD_INT 3
68897: PLUS
68898: PUSH
68899: LD_VAR 0 2
68903: PUSH
68904: LD_INT 3
68906: PLUS
68907: PUSH
68908: LD_INT 5
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: LIST
68915: PUSH
68916: LD_VAR 0 1
68920: PUSH
68921: LD_VAR 0 2
68925: PUSH
68926: LD_INT 4
68928: PLUS
68929: PUSH
68930: LD_INT 0
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: LIST
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: ST_TO_ADDR
// end ; 1 :
68945: GO 69645
68947: LD_INT 1
68949: DOUBLE
68950: EQUAL
68951: IFTRUE 68955
68953: GO 69088
68955: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68956: LD_ADDR_VAR 0 5
68960: PUSH
68961: LD_VAR 0 1
68965: PUSH
68966: LD_VAR 0 2
68970: PUSH
68971: LD_INT 4
68973: MINUS
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: LIST
68982: PUSH
68983: LD_VAR 0 1
68987: PUSH
68988: LD_INT 3
68990: MINUS
68991: PUSH
68992: LD_VAR 0 2
68996: PUSH
68997: LD_INT 3
68999: MINUS
69000: PUSH
69001: LD_INT 2
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: LIST
69008: PUSH
69009: LD_VAR 0 1
69013: PUSH
69014: LD_INT 4
69016: MINUS
69017: PUSH
69018: LD_VAR 0 2
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: LIST
69030: PUSH
69031: LD_VAR 0 1
69035: PUSH
69036: LD_VAR 0 2
69040: PUSH
69041: LD_INT 3
69043: PLUS
69044: PUSH
69045: LD_INT 0
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: LIST
69052: PUSH
69053: LD_VAR 0 1
69057: PUSH
69058: LD_INT 4
69060: PLUS
69061: PUSH
69062: LD_VAR 0 2
69066: PUSH
69067: LD_INT 4
69069: PLUS
69070: PUSH
69071: LD_INT 5
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: ST_TO_ADDR
// end ; 2 :
69086: GO 69645
69088: LD_INT 2
69090: DOUBLE
69091: EQUAL
69092: IFTRUE 69096
69094: GO 69225
69096: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69097: LD_ADDR_VAR 0 5
69101: PUSH
69102: LD_VAR 0 1
69106: PUSH
69107: LD_VAR 0 2
69111: PUSH
69112: LD_INT 3
69114: MINUS
69115: PUSH
69116: LD_INT 3
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: LIST
69123: PUSH
69124: LD_VAR 0 1
69128: PUSH
69129: LD_INT 4
69131: PLUS
69132: PUSH
69133: LD_VAR 0 2
69137: PUSH
69138: LD_INT 4
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: LIST
69145: PUSH
69146: LD_VAR 0 1
69150: PUSH
69151: LD_VAR 0 2
69155: PUSH
69156: LD_INT 4
69158: PLUS
69159: PUSH
69160: LD_INT 0
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: LIST
69167: PUSH
69168: LD_VAR 0 1
69172: PUSH
69173: LD_INT 3
69175: MINUS
69176: PUSH
69177: LD_VAR 0 2
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: LIST
69189: PUSH
69190: LD_VAR 0 1
69194: PUSH
69195: LD_INT 4
69197: MINUS
69198: PUSH
69199: LD_VAR 0 2
69203: PUSH
69204: LD_INT 4
69206: MINUS
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: LIST
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: ST_TO_ADDR
// end ; 3 :
69223: GO 69645
69225: LD_INT 3
69227: DOUBLE
69228: EQUAL
69229: IFTRUE 69233
69231: GO 69366
69233: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69234: LD_ADDR_VAR 0 5
69238: PUSH
69239: LD_VAR 0 1
69243: PUSH
69244: LD_INT 3
69246: PLUS
69247: PUSH
69248: LD_VAR 0 2
69252: PUSH
69253: LD_INT 4
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: LIST
69260: PUSH
69261: LD_VAR 0 1
69265: PUSH
69266: LD_INT 4
69268: PLUS
69269: PUSH
69270: LD_VAR 0 2
69274: PUSH
69275: LD_INT 4
69277: PLUS
69278: PUSH
69279: LD_INT 5
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: PUSH
69287: LD_VAR 0 1
69291: PUSH
69292: LD_INT 4
69294: MINUS
69295: PUSH
69296: LD_VAR 0 2
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: PUSH
69309: LD_VAR 0 1
69313: PUSH
69314: LD_VAR 0 2
69318: PUSH
69319: LD_INT 4
69321: MINUS
69322: PUSH
69323: LD_INT 3
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: LIST
69330: PUSH
69331: LD_VAR 0 1
69335: PUSH
69336: LD_INT 3
69338: MINUS
69339: PUSH
69340: LD_VAR 0 2
69344: PUSH
69345: LD_INT 3
69347: MINUS
69348: PUSH
69349: LD_INT 2
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: ST_TO_ADDR
// end ; 4 :
69364: GO 69645
69366: LD_INT 4
69368: DOUBLE
69369: EQUAL
69370: IFTRUE 69374
69372: GO 69507
69374: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69375: LD_ADDR_VAR 0 5
69379: PUSH
69380: LD_VAR 0 1
69384: PUSH
69385: LD_VAR 0 2
69389: PUSH
69390: LD_INT 4
69392: PLUS
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: PUSH
69402: LD_VAR 0 1
69406: PUSH
69407: LD_INT 3
69409: PLUS
69410: PUSH
69411: LD_VAR 0 2
69415: PUSH
69416: LD_INT 3
69418: PLUS
69419: PUSH
69420: LD_INT 5
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: LIST
69427: PUSH
69428: LD_VAR 0 1
69432: PUSH
69433: LD_INT 4
69435: PLUS
69436: PUSH
69437: LD_VAR 0 2
69441: PUSH
69442: LD_INT 4
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: LIST
69449: PUSH
69450: LD_VAR 0 1
69454: PUSH
69455: LD_VAR 0 2
69459: PUSH
69460: LD_INT 3
69462: MINUS
69463: PUSH
69464: LD_INT 3
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: PUSH
69472: LD_VAR 0 1
69476: PUSH
69477: LD_INT 4
69479: MINUS
69480: PUSH
69481: LD_VAR 0 2
69485: PUSH
69486: LD_INT 4
69488: MINUS
69489: PUSH
69490: LD_INT 2
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: LIST
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: ST_TO_ADDR
// end ; 5 :
69505: GO 69645
69507: LD_INT 5
69509: DOUBLE
69510: EQUAL
69511: IFTRUE 69515
69513: GO 69644
69515: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69516: LD_ADDR_VAR 0 5
69520: PUSH
69521: LD_VAR 0 1
69525: PUSH
69526: LD_INT 4
69528: MINUS
69529: PUSH
69530: LD_VAR 0 2
69534: PUSH
69535: LD_INT 1
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: PUSH
69543: LD_VAR 0 1
69547: PUSH
69548: LD_VAR 0 2
69552: PUSH
69553: LD_INT 4
69555: MINUS
69556: PUSH
69557: LD_INT 3
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: LIST
69564: PUSH
69565: LD_VAR 0 1
69569: PUSH
69570: LD_INT 4
69572: PLUS
69573: PUSH
69574: LD_VAR 0 2
69578: PUSH
69579: LD_INT 4
69581: PLUS
69582: PUSH
69583: LD_INT 5
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: LIST
69590: PUSH
69591: LD_VAR 0 1
69595: PUSH
69596: LD_INT 3
69598: PLUS
69599: PUSH
69600: LD_VAR 0 2
69604: PUSH
69605: LD_INT 4
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: LIST
69612: PUSH
69613: LD_VAR 0 1
69617: PUSH
69618: LD_VAR 0 2
69622: PUSH
69623: LD_INT 3
69625: PLUS
69626: PUSH
69627: LD_INT 0
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: LIST
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: ST_TO_ADDR
// end ; end ;
69642: GO 69645
69644: POP
// result := list ;
69645: LD_ADDR_VAR 0 4
69649: PUSH
69650: LD_VAR 0 5
69654: ST_TO_ADDR
// end ;
69655: LD_VAR 0 4
69659: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69660: LD_INT 0
69662: PPUSH
69663: PPUSH
69664: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69665: LD_VAR 0 1
69669: NOT
69670: PUSH
69671: LD_VAR 0 2
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: LD_INT 2
69681: PUSH
69682: LD_INT 3
69684: PUSH
69685: LD_INT 4
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: IN
69694: NOT
69695: OR
69696: IFFALSE 69700
// exit ;
69698: GO 69792
// tmp := [ ] ;
69700: LD_ADDR_VAR 0 5
69704: PUSH
69705: EMPTY
69706: ST_TO_ADDR
// for i in units do
69707: LD_ADDR_VAR 0 4
69711: PUSH
69712: LD_VAR 0 1
69716: PUSH
69717: FOR_IN
69718: IFFALSE 69761
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69720: LD_ADDR_VAR 0 5
69724: PUSH
69725: LD_VAR 0 5
69729: PPUSH
69730: LD_VAR 0 5
69734: PUSH
69735: LD_INT 1
69737: PLUS
69738: PPUSH
69739: LD_VAR 0 4
69743: PPUSH
69744: LD_VAR 0 2
69748: PPUSH
69749: CALL_OW 259
69753: PPUSH
69754: CALL_OW 2
69758: ST_TO_ADDR
69759: GO 69717
69761: POP
69762: POP
// if not tmp then
69763: LD_VAR 0 5
69767: NOT
69768: IFFALSE 69772
// exit ;
69770: GO 69792
// result := SortListByListDesc ( units , tmp ) ;
69772: LD_ADDR_VAR 0 3
69776: PUSH
69777: LD_VAR 0 1
69781: PPUSH
69782: LD_VAR 0 5
69786: PPUSH
69787: CALL_OW 77
69791: ST_TO_ADDR
// end ;
69792: LD_VAR 0 3
69796: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69797: LD_INT 0
69799: PPUSH
69800: PPUSH
69801: PPUSH
// result := false ;
69802: LD_ADDR_VAR 0 3
69806: PUSH
69807: LD_INT 0
69809: ST_TO_ADDR
// x := GetX ( building ) ;
69810: LD_ADDR_VAR 0 4
69814: PUSH
69815: LD_VAR 0 2
69819: PPUSH
69820: CALL_OW 250
69824: ST_TO_ADDR
// y := GetY ( building ) ;
69825: LD_ADDR_VAR 0 5
69829: PUSH
69830: LD_VAR 0 2
69834: PPUSH
69835: CALL_OW 251
69839: ST_TO_ADDR
// if not building or not x or not y then
69840: LD_VAR 0 2
69844: NOT
69845: PUSH
69846: LD_VAR 0 4
69850: NOT
69851: OR
69852: PUSH
69853: LD_VAR 0 5
69857: NOT
69858: OR
69859: IFFALSE 69863
// exit ;
69861: GO 69955
// if GetTaskList ( unit ) then
69863: LD_VAR 0 1
69867: PPUSH
69868: CALL_OW 437
69872: IFFALSE 69955
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69874: LD_STRING e
69876: PUSH
69877: LD_VAR 0 1
69881: PPUSH
69882: CALL_OW 437
69886: PUSH
69887: LD_INT 1
69889: ARRAY
69890: PUSH
69891: LD_INT 1
69893: ARRAY
69894: EQUAL
69895: PUSH
69896: LD_VAR 0 4
69900: PUSH
69901: LD_VAR 0 1
69905: PPUSH
69906: CALL_OW 437
69910: PUSH
69911: LD_INT 1
69913: ARRAY
69914: PUSH
69915: LD_INT 2
69917: ARRAY
69918: EQUAL
69919: AND
69920: PUSH
69921: LD_VAR 0 5
69925: PUSH
69926: LD_VAR 0 1
69930: PPUSH
69931: CALL_OW 437
69935: PUSH
69936: LD_INT 1
69938: ARRAY
69939: PUSH
69940: LD_INT 3
69942: ARRAY
69943: EQUAL
69944: AND
69945: IFFALSE 69955
// result := true end ;
69947: LD_ADDR_VAR 0 3
69951: PUSH
69952: LD_INT 1
69954: ST_TO_ADDR
// end ;
69955: LD_VAR 0 3
69959: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69960: LD_INT 0
69962: PPUSH
// result := false ;
69963: LD_ADDR_VAR 0 4
69967: PUSH
69968: LD_INT 0
69970: ST_TO_ADDR
// if GetTaskList ( unit ) then
69971: LD_VAR 0 1
69975: PPUSH
69976: CALL_OW 437
69980: IFFALSE 70063
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69982: LD_STRING M
69984: PUSH
69985: LD_VAR 0 1
69989: PPUSH
69990: CALL_OW 437
69994: PUSH
69995: LD_INT 1
69997: ARRAY
69998: PUSH
69999: LD_INT 1
70001: ARRAY
70002: EQUAL
70003: PUSH
70004: LD_VAR 0 2
70008: PUSH
70009: LD_VAR 0 1
70013: PPUSH
70014: CALL_OW 437
70018: PUSH
70019: LD_INT 1
70021: ARRAY
70022: PUSH
70023: LD_INT 2
70025: ARRAY
70026: EQUAL
70027: AND
70028: PUSH
70029: LD_VAR 0 3
70033: PUSH
70034: LD_VAR 0 1
70038: PPUSH
70039: CALL_OW 437
70043: PUSH
70044: LD_INT 1
70046: ARRAY
70047: PUSH
70048: LD_INT 3
70050: ARRAY
70051: EQUAL
70052: AND
70053: IFFALSE 70063
// result := true ;
70055: LD_ADDR_VAR 0 4
70059: PUSH
70060: LD_INT 1
70062: ST_TO_ADDR
// end ; end ;
70063: LD_VAR 0 4
70067: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70068: LD_INT 0
70070: PPUSH
70071: PPUSH
70072: PPUSH
70073: PPUSH
// if not unit or not area then
70074: LD_VAR 0 1
70078: NOT
70079: PUSH
70080: LD_VAR 0 2
70084: NOT
70085: OR
70086: IFFALSE 70090
// exit ;
70088: GO 70254
// tmp := AreaToList ( area , i ) ;
70090: LD_ADDR_VAR 0 6
70094: PUSH
70095: LD_VAR 0 2
70099: PPUSH
70100: LD_VAR 0 5
70104: PPUSH
70105: CALL_OW 517
70109: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70110: LD_ADDR_VAR 0 5
70114: PUSH
70115: DOUBLE
70116: LD_INT 1
70118: DEC
70119: ST_TO_ADDR
70120: LD_VAR 0 6
70124: PUSH
70125: LD_INT 1
70127: ARRAY
70128: PUSH
70129: FOR_TO
70130: IFFALSE 70252
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70132: LD_ADDR_VAR 0 7
70136: PUSH
70137: LD_VAR 0 6
70141: PUSH
70142: LD_INT 1
70144: ARRAY
70145: PUSH
70146: LD_VAR 0 5
70150: ARRAY
70151: PUSH
70152: LD_VAR 0 6
70156: PUSH
70157: LD_INT 2
70159: ARRAY
70160: PUSH
70161: LD_VAR 0 5
70165: ARRAY
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70171: LD_VAR 0 7
70175: PUSH
70176: LD_INT 1
70178: ARRAY
70179: PPUSH
70180: LD_VAR 0 7
70184: PUSH
70185: LD_INT 2
70187: ARRAY
70188: PPUSH
70189: CALL_OW 428
70193: PUSH
70194: LD_INT 0
70196: EQUAL
70197: IFFALSE 70250
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70199: LD_VAR 0 1
70203: PPUSH
70204: LD_VAR 0 7
70208: PUSH
70209: LD_INT 1
70211: ARRAY
70212: PPUSH
70213: LD_VAR 0 7
70217: PUSH
70218: LD_INT 2
70220: ARRAY
70221: PPUSH
70222: LD_VAR 0 3
70226: PPUSH
70227: CALL_OW 48
// result := IsPlaced ( unit ) ;
70231: LD_ADDR_VAR 0 4
70235: PUSH
70236: LD_VAR 0 1
70240: PPUSH
70241: CALL_OW 305
70245: ST_TO_ADDR
// exit ;
70246: POP
70247: POP
70248: GO 70254
// end ; end ;
70250: GO 70129
70252: POP
70253: POP
// end ;
70254: LD_VAR 0 4
70258: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70259: LD_INT 0
70261: PPUSH
70262: PPUSH
70263: PPUSH
// if not side or side > 8 then
70264: LD_VAR 0 1
70268: NOT
70269: PUSH
70270: LD_VAR 0 1
70274: PUSH
70275: LD_INT 8
70277: GREATER
70278: OR
70279: IFFALSE 70283
// exit ;
70281: GO 70470
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70283: LD_ADDR_VAR 0 4
70287: PUSH
70288: LD_INT 22
70290: PUSH
70291: LD_VAR 0 1
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 21
70302: PUSH
70303: LD_INT 3
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PPUSH
70314: CALL_OW 69
70318: ST_TO_ADDR
// if not tmp then
70319: LD_VAR 0 4
70323: NOT
70324: IFFALSE 70328
// exit ;
70326: GO 70470
// enable_addtolog := true ;
70328: LD_ADDR_OWVAR 81
70332: PUSH
70333: LD_INT 1
70335: ST_TO_ADDR
// AddToLog ( [ ) ;
70336: LD_STRING [
70338: PPUSH
70339: CALL_OW 561
// for i in tmp do
70343: LD_ADDR_VAR 0 3
70347: PUSH
70348: LD_VAR 0 4
70352: PUSH
70353: FOR_IN
70354: IFFALSE 70461
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70356: LD_STRING [
70358: PUSH
70359: LD_VAR 0 3
70363: PPUSH
70364: CALL_OW 266
70368: STR
70369: PUSH
70370: LD_STRING , 
70372: STR
70373: PUSH
70374: LD_VAR 0 3
70378: PPUSH
70379: CALL_OW 250
70383: STR
70384: PUSH
70385: LD_STRING , 
70387: STR
70388: PUSH
70389: LD_VAR 0 3
70393: PPUSH
70394: CALL_OW 251
70398: STR
70399: PUSH
70400: LD_STRING , 
70402: STR
70403: PUSH
70404: LD_VAR 0 3
70408: PPUSH
70409: CALL_OW 254
70413: STR
70414: PUSH
70415: LD_STRING , 
70417: STR
70418: PUSH
70419: LD_VAR 0 3
70423: PPUSH
70424: LD_INT 1
70426: PPUSH
70427: CALL_OW 268
70431: STR
70432: PUSH
70433: LD_STRING , 
70435: STR
70436: PUSH
70437: LD_VAR 0 3
70441: PPUSH
70442: LD_INT 2
70444: PPUSH
70445: CALL_OW 268
70449: STR
70450: PUSH
70451: LD_STRING ],
70453: STR
70454: PPUSH
70455: CALL_OW 561
// end ;
70459: GO 70353
70461: POP
70462: POP
// AddToLog ( ]; ) ;
70463: LD_STRING ];
70465: PPUSH
70466: CALL_OW 561
// end ;
70470: LD_VAR 0 2
70474: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70475: LD_INT 0
70477: PPUSH
70478: PPUSH
70479: PPUSH
70480: PPUSH
70481: PPUSH
// if not area or not rate or not max then
70482: LD_VAR 0 1
70486: NOT
70487: PUSH
70488: LD_VAR 0 2
70492: NOT
70493: OR
70494: PUSH
70495: LD_VAR 0 4
70499: NOT
70500: OR
70501: IFFALSE 70505
// exit ;
70503: GO 70697
// while 1 do
70505: LD_INT 1
70507: IFFALSE 70697
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70509: LD_ADDR_VAR 0 9
70513: PUSH
70514: LD_VAR 0 1
70518: PPUSH
70519: LD_INT 1
70521: PPUSH
70522: CALL_OW 287
70526: PUSH
70527: LD_INT 10
70529: MUL
70530: ST_TO_ADDR
// r := rate / 10 ;
70531: LD_ADDR_VAR 0 7
70535: PUSH
70536: LD_VAR 0 2
70540: PUSH
70541: LD_INT 10
70543: DIVREAL
70544: ST_TO_ADDR
// time := 1 1$00 ;
70545: LD_ADDR_VAR 0 8
70549: PUSH
70550: LD_INT 2100
70552: ST_TO_ADDR
// if amount < min then
70553: LD_VAR 0 9
70557: PUSH
70558: LD_VAR 0 3
70562: LESS
70563: IFFALSE 70581
// r := r * 2 else
70565: LD_ADDR_VAR 0 7
70569: PUSH
70570: LD_VAR 0 7
70574: PUSH
70575: LD_INT 2
70577: MUL
70578: ST_TO_ADDR
70579: GO 70607
// if amount > max then
70581: LD_VAR 0 9
70585: PUSH
70586: LD_VAR 0 4
70590: GREATER
70591: IFFALSE 70607
// r := r / 2 ;
70593: LD_ADDR_VAR 0 7
70597: PUSH
70598: LD_VAR 0 7
70602: PUSH
70603: LD_INT 2
70605: DIVREAL
70606: ST_TO_ADDR
// time := time / r ;
70607: LD_ADDR_VAR 0 8
70611: PUSH
70612: LD_VAR 0 8
70616: PUSH
70617: LD_VAR 0 7
70621: DIVREAL
70622: ST_TO_ADDR
// if time < 0 then
70623: LD_VAR 0 8
70627: PUSH
70628: LD_INT 0
70630: LESS
70631: IFFALSE 70648
// time := time * - 1 ;
70633: LD_ADDR_VAR 0 8
70637: PUSH
70638: LD_VAR 0 8
70642: PUSH
70643: LD_INT 1
70645: NEG
70646: MUL
70647: ST_TO_ADDR
// wait ( time ) ;
70648: LD_VAR 0 8
70652: PPUSH
70653: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70657: LD_INT 35
70659: PPUSH
70660: LD_INT 875
70662: PPUSH
70663: CALL_OW 12
70667: PPUSH
70668: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70672: LD_INT 1
70674: PPUSH
70675: LD_INT 5
70677: PPUSH
70678: CALL_OW 12
70682: PPUSH
70683: LD_VAR 0 1
70687: PPUSH
70688: LD_INT 1
70690: PPUSH
70691: CALL_OW 55
// end ;
70695: GO 70505
// end ;
70697: LD_VAR 0 5
70701: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70702: LD_INT 0
70704: PPUSH
70705: PPUSH
70706: PPUSH
70707: PPUSH
70708: PPUSH
70709: PPUSH
70710: PPUSH
70711: PPUSH
// if not turrets or not factories then
70712: LD_VAR 0 1
70716: NOT
70717: PUSH
70718: LD_VAR 0 2
70722: NOT
70723: OR
70724: IFFALSE 70728
// exit ;
70726: GO 71035
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70728: LD_ADDR_VAR 0 10
70732: PUSH
70733: LD_INT 5
70735: PUSH
70736: LD_INT 6
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 2
70745: PUSH
70746: LD_INT 4
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 3
70755: PUSH
70756: LD_INT 5
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 24
70770: PUSH
70771: LD_INT 25
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 23
70780: PUSH
70781: LD_INT 27
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 42
70794: PUSH
70795: LD_INT 43
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 44
70804: PUSH
70805: LD_INT 46
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 45
70814: PUSH
70815: LD_INT 47
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: LIST
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: LIST
70831: ST_TO_ADDR
// result := [ ] ;
70832: LD_ADDR_VAR 0 3
70836: PUSH
70837: EMPTY
70838: ST_TO_ADDR
// for i in turrets do
70839: LD_ADDR_VAR 0 4
70843: PUSH
70844: LD_VAR 0 1
70848: PUSH
70849: FOR_IN
70850: IFFALSE 71033
// begin nat := GetNation ( i ) ;
70852: LD_ADDR_VAR 0 7
70856: PUSH
70857: LD_VAR 0 4
70861: PPUSH
70862: CALL_OW 248
70866: ST_TO_ADDR
// weapon := 0 ;
70867: LD_ADDR_VAR 0 8
70871: PUSH
70872: LD_INT 0
70874: ST_TO_ADDR
// if not nat then
70875: LD_VAR 0 7
70879: NOT
70880: IFFALSE 70884
// continue ;
70882: GO 70849
// for j in list [ nat ] do
70884: LD_ADDR_VAR 0 5
70888: PUSH
70889: LD_VAR 0 10
70893: PUSH
70894: LD_VAR 0 7
70898: ARRAY
70899: PUSH
70900: FOR_IN
70901: IFFALSE 70942
// if GetBWeapon ( i ) = j [ 1 ] then
70903: LD_VAR 0 4
70907: PPUSH
70908: CALL_OW 269
70912: PUSH
70913: LD_VAR 0 5
70917: PUSH
70918: LD_INT 1
70920: ARRAY
70921: EQUAL
70922: IFFALSE 70940
// begin weapon := j [ 2 ] ;
70924: LD_ADDR_VAR 0 8
70928: PUSH
70929: LD_VAR 0 5
70933: PUSH
70934: LD_INT 2
70936: ARRAY
70937: ST_TO_ADDR
// break ;
70938: GO 70942
// end ;
70940: GO 70900
70942: POP
70943: POP
// if not weapon then
70944: LD_VAR 0 8
70948: NOT
70949: IFFALSE 70953
// continue ;
70951: GO 70849
// for k in factories do
70953: LD_ADDR_VAR 0 6
70957: PUSH
70958: LD_VAR 0 2
70962: PUSH
70963: FOR_IN
70964: IFFALSE 71029
// begin weapons := AvailableWeaponList ( k ) ;
70966: LD_ADDR_VAR 0 9
70970: PUSH
70971: LD_VAR 0 6
70975: PPUSH
70976: CALL_OW 478
70980: ST_TO_ADDR
// if not weapons then
70981: LD_VAR 0 9
70985: NOT
70986: IFFALSE 70990
// continue ;
70988: GO 70963
// if weapon in weapons then
70990: LD_VAR 0 8
70994: PUSH
70995: LD_VAR 0 9
70999: IN
71000: IFFALSE 71027
// begin result := [ i , weapon ] ;
71002: LD_ADDR_VAR 0 3
71006: PUSH
71007: LD_VAR 0 4
71011: PUSH
71012: LD_VAR 0 8
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: ST_TO_ADDR
// exit ;
71021: POP
71022: POP
71023: POP
71024: POP
71025: GO 71035
// end ; end ;
71027: GO 70963
71029: POP
71030: POP
// end ;
71031: GO 70849
71033: POP
71034: POP
// end ;
71035: LD_VAR 0 3
71039: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71040: LD_INT 0
71042: PPUSH
// if not side or side > 8 then
71043: LD_VAR 0 3
71047: NOT
71048: PUSH
71049: LD_VAR 0 3
71053: PUSH
71054: LD_INT 8
71056: GREATER
71057: OR
71058: IFFALSE 71062
// exit ;
71060: GO 71121
// if not range then
71062: LD_VAR 0 4
71066: NOT
71067: IFFALSE 71078
// range := - 12 ;
71069: LD_ADDR_VAR 0 4
71073: PUSH
71074: LD_INT 12
71076: NEG
71077: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71078: LD_VAR 0 1
71082: PPUSH
71083: LD_VAR 0 2
71087: PPUSH
71088: LD_VAR 0 3
71092: PPUSH
71093: LD_VAR 0 4
71097: PPUSH
71098: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71102: LD_VAR 0 1
71106: PPUSH
71107: LD_VAR 0 2
71111: PPUSH
71112: LD_VAR 0 3
71116: PPUSH
71117: CALL_OW 331
// end ;
71121: LD_VAR 0 5
71125: RET
// export function Video ( mode ) ; begin
71126: LD_INT 0
71128: PPUSH
// ingame_video = mode ;
71129: LD_ADDR_OWVAR 52
71133: PUSH
71134: LD_VAR 0 1
71138: ST_TO_ADDR
// interface_hidden = mode ;
71139: LD_ADDR_OWVAR 54
71143: PUSH
71144: LD_VAR 0 1
71148: ST_TO_ADDR
// end ;
71149: LD_VAR 0 2
71153: RET
// export function Join ( array , element ) ; begin
71154: LD_INT 0
71156: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71157: LD_ADDR_VAR 0 3
71161: PUSH
71162: LD_VAR 0 1
71166: PPUSH
71167: LD_VAR 0 1
71171: PUSH
71172: LD_INT 1
71174: PLUS
71175: PPUSH
71176: LD_VAR 0 2
71180: PPUSH
71181: CALL_OW 1
71185: ST_TO_ADDR
// end ;
71186: LD_VAR 0 3
71190: RET
// export function JoinUnion ( array , element ) ; begin
71191: LD_INT 0
71193: PPUSH
// result := array union element ;
71194: LD_ADDR_VAR 0 3
71198: PUSH
71199: LD_VAR 0 1
71203: PUSH
71204: LD_VAR 0 2
71208: UNION
71209: ST_TO_ADDR
// end ;
71210: LD_VAR 0 3
71214: RET
// export function GetBehemoths ( side ) ; begin
71215: LD_INT 0
71217: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71218: LD_ADDR_VAR 0 2
71222: PUSH
71223: LD_INT 22
71225: PUSH
71226: LD_VAR 0 1
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 31
71237: PUSH
71238: LD_INT 25
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PPUSH
71249: CALL_OW 69
71253: ST_TO_ADDR
// end ;
71254: LD_VAR 0 2
71258: RET
// export function Shuffle ( array ) ; var i , index ; begin
71259: LD_INT 0
71261: PPUSH
71262: PPUSH
71263: PPUSH
// result := [ ] ;
71264: LD_ADDR_VAR 0 2
71268: PUSH
71269: EMPTY
71270: ST_TO_ADDR
// if not array then
71271: LD_VAR 0 1
71275: NOT
71276: IFFALSE 71280
// exit ;
71278: GO 71379
// Randomize ;
71280: CALL_OW 10
// for i = array downto 1 do
71284: LD_ADDR_VAR 0 3
71288: PUSH
71289: DOUBLE
71290: LD_VAR 0 1
71294: INC
71295: ST_TO_ADDR
71296: LD_INT 1
71298: PUSH
71299: FOR_DOWNTO
71300: IFFALSE 71377
// begin index := rand ( 1 , array ) ;
71302: LD_ADDR_VAR 0 4
71306: PUSH
71307: LD_INT 1
71309: PPUSH
71310: LD_VAR 0 1
71314: PPUSH
71315: CALL_OW 12
71319: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71320: LD_ADDR_VAR 0 2
71324: PUSH
71325: LD_VAR 0 2
71329: PPUSH
71330: LD_VAR 0 2
71334: PUSH
71335: LD_INT 1
71337: PLUS
71338: PPUSH
71339: LD_VAR 0 1
71343: PUSH
71344: LD_VAR 0 4
71348: ARRAY
71349: PPUSH
71350: CALL_OW 2
71354: ST_TO_ADDR
// array := Delete ( array , index ) ;
71355: LD_ADDR_VAR 0 1
71359: PUSH
71360: LD_VAR 0 1
71364: PPUSH
71365: LD_VAR 0 4
71369: PPUSH
71370: CALL_OW 3
71374: ST_TO_ADDR
// end ;
71375: GO 71299
71377: POP
71378: POP
// end ;
71379: LD_VAR 0 2
71383: RET
// export function GetBaseMaterials ( base ) ; begin
71384: LD_INT 0
71386: PPUSH
// result := [ 0 , 0 , 0 ] ;
71387: LD_ADDR_VAR 0 2
71391: PUSH
71392: LD_INT 0
71394: PUSH
71395: LD_INT 0
71397: PUSH
71398: LD_INT 0
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: LIST
71405: ST_TO_ADDR
// if not base then
71406: LD_VAR 0 1
71410: NOT
71411: IFFALSE 71415
// exit ;
71413: GO 71464
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71415: LD_ADDR_VAR 0 2
71419: PUSH
71420: LD_VAR 0 1
71424: PPUSH
71425: LD_INT 1
71427: PPUSH
71428: CALL_OW 275
71432: PUSH
71433: LD_VAR 0 1
71437: PPUSH
71438: LD_INT 2
71440: PPUSH
71441: CALL_OW 275
71445: PUSH
71446: LD_VAR 0 1
71450: PPUSH
71451: LD_INT 3
71453: PPUSH
71454: CALL_OW 275
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: LIST
71463: ST_TO_ADDR
// end ;
71464: LD_VAR 0 2
71468: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71469: LD_INT 0
71471: PPUSH
71472: PPUSH
// result := array ;
71473: LD_ADDR_VAR 0 3
71477: PUSH
71478: LD_VAR 0 1
71482: ST_TO_ADDR
// if size > 0 then
71483: LD_VAR 0 2
71487: PUSH
71488: LD_INT 0
71490: GREATER
71491: IFFALSE 71537
// for i := array downto size do
71493: LD_ADDR_VAR 0 4
71497: PUSH
71498: DOUBLE
71499: LD_VAR 0 1
71503: INC
71504: ST_TO_ADDR
71505: LD_VAR 0 2
71509: PUSH
71510: FOR_DOWNTO
71511: IFFALSE 71535
// result := Delete ( result , result ) ;
71513: LD_ADDR_VAR 0 3
71517: PUSH
71518: LD_VAR 0 3
71522: PPUSH
71523: LD_VAR 0 3
71527: PPUSH
71528: CALL_OW 3
71532: ST_TO_ADDR
71533: GO 71510
71535: POP
71536: POP
// end ;
71537: LD_VAR 0 3
71541: RET
// export function ComExit ( unit ) ; var tmp ; begin
71542: LD_INT 0
71544: PPUSH
71545: PPUSH
// if not IsInUnit ( unit ) then
71546: LD_VAR 0 1
71550: PPUSH
71551: CALL_OW 310
71555: NOT
71556: IFFALSE 71560
// exit ;
71558: GO 71620
// tmp := IsInUnit ( unit ) ;
71560: LD_ADDR_VAR 0 3
71564: PUSH
71565: LD_VAR 0 1
71569: PPUSH
71570: CALL_OW 310
71574: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71575: LD_VAR 0 3
71579: PPUSH
71580: CALL_OW 247
71584: PUSH
71585: LD_INT 2
71587: EQUAL
71588: IFFALSE 71601
// ComExitVehicle ( unit ) else
71590: LD_VAR 0 1
71594: PPUSH
71595: CALL_OW 121
71599: GO 71610
// ComExitBuilding ( unit ) ;
71601: LD_VAR 0 1
71605: PPUSH
71606: CALL_OW 122
// result := tmp ;
71610: LD_ADDR_VAR 0 2
71614: PUSH
71615: LD_VAR 0 3
71619: ST_TO_ADDR
// end ;
71620: LD_VAR 0 2
71624: RET
// export function ComExitAll ( units ) ; var i ; begin
71625: LD_INT 0
71627: PPUSH
71628: PPUSH
// if not units then
71629: LD_VAR 0 1
71633: NOT
71634: IFFALSE 71638
// exit ;
71636: GO 71664
// for i in units do
71638: LD_ADDR_VAR 0 3
71642: PUSH
71643: LD_VAR 0 1
71647: PUSH
71648: FOR_IN
71649: IFFALSE 71662
// ComExit ( i ) ;
71651: LD_VAR 0 3
71655: PPUSH
71656: CALL 71542 0 1
71660: GO 71648
71662: POP
71663: POP
// end ;
71664: LD_VAR 0 2
71668: RET
// export function ResetHc ; begin
71669: LD_INT 0
71671: PPUSH
// InitHc ;
71672: CALL_OW 19
// hc_importance := 0 ;
71676: LD_ADDR_OWVAR 32
71680: PUSH
71681: LD_INT 0
71683: ST_TO_ADDR
// end ;
71684: LD_VAR 0 1
71688: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71689: LD_INT 0
71691: PPUSH
71692: PPUSH
71693: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71694: LD_ADDR_VAR 0 6
71698: PUSH
71699: LD_VAR 0 1
71703: PUSH
71704: LD_VAR 0 3
71708: PLUS
71709: PUSH
71710: LD_INT 2
71712: DIV
71713: ST_TO_ADDR
// if _x < 0 then
71714: LD_VAR 0 6
71718: PUSH
71719: LD_INT 0
71721: LESS
71722: IFFALSE 71739
// _x := _x * - 1 ;
71724: LD_ADDR_VAR 0 6
71728: PUSH
71729: LD_VAR 0 6
71733: PUSH
71734: LD_INT 1
71736: NEG
71737: MUL
71738: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71739: LD_ADDR_VAR 0 7
71743: PUSH
71744: LD_VAR 0 2
71748: PUSH
71749: LD_VAR 0 4
71753: PLUS
71754: PUSH
71755: LD_INT 2
71757: DIV
71758: ST_TO_ADDR
// if _y < 0 then
71759: LD_VAR 0 7
71763: PUSH
71764: LD_INT 0
71766: LESS
71767: IFFALSE 71784
// _y := _y * - 1 ;
71769: LD_ADDR_VAR 0 7
71773: PUSH
71774: LD_VAR 0 7
71778: PUSH
71779: LD_INT 1
71781: NEG
71782: MUL
71783: ST_TO_ADDR
// result := [ _x , _y ] ;
71784: LD_ADDR_VAR 0 5
71788: PUSH
71789: LD_VAR 0 6
71793: PUSH
71794: LD_VAR 0 7
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: ST_TO_ADDR
// end ;
71803: LD_VAR 0 5
71807: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71808: LD_INT 0
71810: PPUSH
71811: PPUSH
71812: PPUSH
71813: PPUSH
// task := GetTaskList ( unit ) ;
71814: LD_ADDR_VAR 0 7
71818: PUSH
71819: LD_VAR 0 1
71823: PPUSH
71824: CALL_OW 437
71828: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71829: LD_VAR 0 7
71833: NOT
71834: PUSH
71835: LD_VAR 0 1
71839: PPUSH
71840: LD_VAR 0 2
71844: PPUSH
71845: CALL_OW 308
71849: NOT
71850: AND
71851: IFFALSE 71855
// exit ;
71853: GO 71973
// if IsInArea ( unit , area ) then
71855: LD_VAR 0 1
71859: PPUSH
71860: LD_VAR 0 2
71864: PPUSH
71865: CALL_OW 308
71869: IFFALSE 71887
// begin ComMoveToArea ( unit , goAway ) ;
71871: LD_VAR 0 1
71875: PPUSH
71876: LD_VAR 0 3
71880: PPUSH
71881: CALL_OW 113
// exit ;
71885: GO 71973
// end ; if task [ 1 ] [ 1 ] <> M then
71887: LD_VAR 0 7
71891: PUSH
71892: LD_INT 1
71894: ARRAY
71895: PUSH
71896: LD_INT 1
71898: ARRAY
71899: PUSH
71900: LD_STRING M
71902: NONEQUAL
71903: IFFALSE 71907
// exit ;
71905: GO 71973
// x := task [ 1 ] [ 2 ] ;
71907: LD_ADDR_VAR 0 5
71911: PUSH
71912: LD_VAR 0 7
71916: PUSH
71917: LD_INT 1
71919: ARRAY
71920: PUSH
71921: LD_INT 2
71923: ARRAY
71924: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71925: LD_ADDR_VAR 0 6
71929: PUSH
71930: LD_VAR 0 7
71934: PUSH
71935: LD_INT 1
71937: ARRAY
71938: PUSH
71939: LD_INT 3
71941: ARRAY
71942: ST_TO_ADDR
// if InArea ( x , y , area ) then
71943: LD_VAR 0 5
71947: PPUSH
71948: LD_VAR 0 6
71952: PPUSH
71953: LD_VAR 0 2
71957: PPUSH
71958: CALL_OW 309
71962: IFFALSE 71973
// ComStop ( unit ) ;
71964: LD_VAR 0 1
71968: PPUSH
71969: CALL_OW 141
// end ;
71973: LD_VAR 0 4
71977: RET
// export function Abs ( value ) ; begin
71978: LD_INT 0
71980: PPUSH
// result := value ;
71981: LD_ADDR_VAR 0 2
71985: PUSH
71986: LD_VAR 0 1
71990: ST_TO_ADDR
// if value < 0 then
71991: LD_VAR 0 1
71995: PUSH
71996: LD_INT 0
71998: LESS
71999: IFFALSE 72016
// result := value * - 1 ;
72001: LD_ADDR_VAR 0 2
72005: PUSH
72006: LD_VAR 0 1
72010: PUSH
72011: LD_INT 1
72013: NEG
72014: MUL
72015: ST_TO_ADDR
// end ;
72016: LD_VAR 0 2
72020: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72021: LD_INT 0
72023: PPUSH
72024: PPUSH
72025: PPUSH
72026: PPUSH
72027: PPUSH
72028: PPUSH
72029: PPUSH
72030: PPUSH
// if not unit or not building then
72031: LD_VAR 0 1
72035: NOT
72036: PUSH
72037: LD_VAR 0 2
72041: NOT
72042: OR
72043: IFFALSE 72047
// exit ;
72045: GO 72273
// x := GetX ( building ) ;
72047: LD_ADDR_VAR 0 4
72051: PUSH
72052: LD_VAR 0 2
72056: PPUSH
72057: CALL_OW 250
72061: ST_TO_ADDR
// y := GetY ( building ) ;
72062: LD_ADDR_VAR 0 6
72066: PUSH
72067: LD_VAR 0 2
72071: PPUSH
72072: CALL_OW 251
72076: ST_TO_ADDR
// d := GetDir ( building ) ;
72077: LD_ADDR_VAR 0 8
72081: PUSH
72082: LD_VAR 0 2
72086: PPUSH
72087: CALL_OW 254
72091: ST_TO_ADDR
// r := 4 ;
72092: LD_ADDR_VAR 0 9
72096: PUSH
72097: LD_INT 4
72099: ST_TO_ADDR
// for i := 1 to 5 do
72100: LD_ADDR_VAR 0 10
72104: PUSH
72105: DOUBLE
72106: LD_INT 1
72108: DEC
72109: ST_TO_ADDR
72110: LD_INT 5
72112: PUSH
72113: FOR_TO
72114: IFFALSE 72271
// begin _x := ShiftX ( x , d , r + i ) ;
72116: LD_ADDR_VAR 0 5
72120: PUSH
72121: LD_VAR 0 4
72125: PPUSH
72126: LD_VAR 0 8
72130: PPUSH
72131: LD_VAR 0 9
72135: PUSH
72136: LD_VAR 0 10
72140: PLUS
72141: PPUSH
72142: CALL_OW 272
72146: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72147: LD_ADDR_VAR 0 7
72151: PUSH
72152: LD_VAR 0 6
72156: PPUSH
72157: LD_VAR 0 8
72161: PPUSH
72162: LD_VAR 0 9
72166: PUSH
72167: LD_VAR 0 10
72171: PLUS
72172: PPUSH
72173: CALL_OW 273
72177: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72178: LD_VAR 0 5
72182: PPUSH
72183: LD_VAR 0 7
72187: PPUSH
72188: CALL_OW 488
72192: PUSH
72193: LD_VAR 0 5
72197: PPUSH
72198: LD_VAR 0 7
72202: PPUSH
72203: CALL_OW 428
72207: PPUSH
72208: CALL_OW 247
72212: PUSH
72213: LD_INT 3
72215: PUSH
72216: LD_INT 2
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: IN
72223: NOT
72224: AND
72225: IFFALSE 72269
// begin ComMoveXY ( unit , _x , _y ) ;
72227: LD_VAR 0 1
72231: PPUSH
72232: LD_VAR 0 5
72236: PPUSH
72237: LD_VAR 0 7
72241: PPUSH
72242: CALL_OW 111
// result := [ _x , _y ] ;
72246: LD_ADDR_VAR 0 3
72250: PUSH
72251: LD_VAR 0 5
72255: PUSH
72256: LD_VAR 0 7
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: ST_TO_ADDR
// exit ;
72265: POP
72266: POP
72267: GO 72273
// end ; end ;
72269: GO 72113
72271: POP
72272: POP
// end ;
72273: LD_VAR 0 3
72277: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72278: LD_INT 0
72280: PPUSH
72281: PPUSH
72282: PPUSH
// result := 0 ;
72283: LD_ADDR_VAR 0 3
72287: PUSH
72288: LD_INT 0
72290: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72291: LD_VAR 0 1
72295: PUSH
72296: LD_INT 0
72298: LESS
72299: PUSH
72300: LD_VAR 0 1
72304: PUSH
72305: LD_INT 8
72307: GREATER
72308: OR
72309: PUSH
72310: LD_VAR 0 2
72314: PUSH
72315: LD_INT 0
72317: LESS
72318: OR
72319: PUSH
72320: LD_VAR 0 2
72324: PUSH
72325: LD_INT 8
72327: GREATER
72328: OR
72329: IFFALSE 72333
// exit ;
72331: GO 72408
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72333: LD_ADDR_VAR 0 4
72337: PUSH
72338: LD_INT 22
72340: PUSH
72341: LD_VAR 0 2
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PPUSH
72350: CALL_OW 69
72354: PUSH
72355: FOR_IN
72356: IFFALSE 72406
// begin un := UnitShoot ( i ) ;
72358: LD_ADDR_VAR 0 5
72362: PUSH
72363: LD_VAR 0 4
72367: PPUSH
72368: CALL_OW 504
72372: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72373: LD_VAR 0 5
72377: PPUSH
72378: CALL_OW 255
72382: PUSH
72383: LD_VAR 0 1
72387: EQUAL
72388: IFFALSE 72404
// begin result := un ;
72390: LD_ADDR_VAR 0 3
72394: PUSH
72395: LD_VAR 0 5
72399: ST_TO_ADDR
// exit ;
72400: POP
72401: POP
72402: GO 72408
// end ; end ;
72404: GO 72355
72406: POP
72407: POP
// end ;
72408: LD_VAR 0 3
72412: RET
// export function GetCargoBay ( units ) ; begin
72413: LD_INT 0
72415: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72416: LD_ADDR_VAR 0 2
72420: PUSH
72421: LD_VAR 0 1
72425: PPUSH
72426: LD_INT 2
72428: PUSH
72429: LD_INT 34
72431: PUSH
72432: LD_INT 12
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 34
72441: PUSH
72442: LD_INT 51
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 34
72451: PUSH
72452: LD_INT 32
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 34
72461: PUSH
72462: LD_EXP 120
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: PPUSH
72478: CALL_OW 72
72482: ST_TO_ADDR
// end ;
72483: LD_VAR 0 2
72487: RET
// export function Negate ( value ) ; begin
72488: LD_INT 0
72490: PPUSH
// result := not value ;
72491: LD_ADDR_VAR 0 2
72495: PUSH
72496: LD_VAR 0 1
72500: NOT
72501: ST_TO_ADDR
// end ;
72502: LD_VAR 0 2
72506: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
72507: LD_INT 0
72509: PPUSH
// if x1 = x2 then
72510: LD_VAR 0 1
72514: PUSH
72515: LD_VAR 0 3
72519: EQUAL
72520: IFFALSE 72554
// begin if y1 > y2 then
72522: LD_VAR 0 2
72526: PUSH
72527: LD_VAR 0 4
72531: GREATER
72532: IFFALSE 72544
// result := 0 else
72534: LD_ADDR_VAR 0 5
72538: PUSH
72539: LD_INT 0
72541: ST_TO_ADDR
72542: GO 72552
// result := 3 ;
72544: LD_ADDR_VAR 0 5
72548: PUSH
72549: LD_INT 3
72551: ST_TO_ADDR
// exit ;
72552: GO 72640
// end ; if y1 = y2 then
72554: LD_VAR 0 2
72558: PUSH
72559: LD_VAR 0 4
72563: EQUAL
72564: IFFALSE 72598
// begin if x1 > x2 then
72566: LD_VAR 0 1
72570: PUSH
72571: LD_VAR 0 3
72575: GREATER
72576: IFFALSE 72588
// result := 1 else
72578: LD_ADDR_VAR 0 5
72582: PUSH
72583: LD_INT 1
72585: ST_TO_ADDR
72586: GO 72596
// result := 4 ;
72588: LD_ADDR_VAR 0 5
72592: PUSH
72593: LD_INT 4
72595: ST_TO_ADDR
// exit ;
72596: GO 72640
// end ; if x1 > x2 and y1 > y2 then
72598: LD_VAR 0 1
72602: PUSH
72603: LD_VAR 0 3
72607: GREATER
72608: PUSH
72609: LD_VAR 0 2
72613: PUSH
72614: LD_VAR 0 4
72618: GREATER
72619: AND
72620: IFFALSE 72632
// result := 2 else
72622: LD_ADDR_VAR 0 5
72626: PUSH
72627: LD_INT 2
72629: ST_TO_ADDR
72630: GO 72640
// result := 5 ;
72632: LD_ADDR_VAR 0 5
72636: PUSH
72637: LD_INT 5
72639: ST_TO_ADDR
// end ;
72640: LD_VAR 0 5
72644: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72645: LD_INT 0
72647: PPUSH
72648: PPUSH
// if not driver or not IsInUnit ( driver ) then
72649: LD_VAR 0 1
72653: NOT
72654: PUSH
72655: LD_VAR 0 1
72659: PPUSH
72660: CALL_OW 310
72664: NOT
72665: OR
72666: IFFALSE 72670
// exit ;
72668: GO 72760
// vehicle := IsInUnit ( driver ) ;
72670: LD_ADDR_VAR 0 3
72674: PUSH
72675: LD_VAR 0 1
72679: PPUSH
72680: CALL_OW 310
72684: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72685: LD_VAR 0 1
72689: PPUSH
72690: LD_STRING \
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: LD_INT 0
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: LD_INT 0
72704: PUSH
72705: LD_INT 0
72707: PUSH
72708: LD_INT 0
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: PUSH
72720: LD_STRING E
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 0
72728: PUSH
72729: LD_VAR 0 3
72733: PUSH
72734: LD_INT 0
72736: PUSH
72737: LD_INT 0
72739: PUSH
72740: LD_INT 0
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PPUSH
72756: CALL_OW 446
// end ;
72760: LD_VAR 0 2
72764: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72765: LD_INT 0
72767: PPUSH
72768: PPUSH
// if not driver or not IsInUnit ( driver ) then
72769: LD_VAR 0 1
72773: NOT
72774: PUSH
72775: LD_VAR 0 1
72779: PPUSH
72780: CALL_OW 310
72784: NOT
72785: OR
72786: IFFALSE 72790
// exit ;
72788: GO 72880
// vehicle := IsInUnit ( driver ) ;
72790: LD_ADDR_VAR 0 3
72794: PUSH
72795: LD_VAR 0 1
72799: PPUSH
72800: CALL_OW 310
72804: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72805: LD_VAR 0 1
72809: PPUSH
72810: LD_STRING \
72812: PUSH
72813: LD_INT 0
72815: PUSH
72816: LD_INT 0
72818: PUSH
72819: LD_INT 0
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: PUSH
72840: LD_STRING E
72842: PUSH
72843: LD_INT 0
72845: PUSH
72846: LD_INT 0
72848: PUSH
72849: LD_VAR 0 3
72853: PUSH
72854: LD_INT 0
72856: PUSH
72857: LD_INT 0
72859: PUSH
72860: LD_INT 0
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PPUSH
72876: CALL_OW 447
// end ;
72880: LD_VAR 0 2
72884: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72885: LD_INT 0
72887: PPUSH
72888: PPUSH
72889: PPUSH
// tmp := [ ] ;
72890: LD_ADDR_VAR 0 5
72894: PUSH
72895: EMPTY
72896: ST_TO_ADDR
// for i in units do
72897: LD_ADDR_VAR 0 4
72901: PUSH
72902: LD_VAR 0 1
72906: PUSH
72907: FOR_IN
72908: IFFALSE 72946
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72910: LD_ADDR_VAR 0 5
72914: PUSH
72915: LD_VAR 0 5
72919: PPUSH
72920: LD_VAR 0 5
72924: PUSH
72925: LD_INT 1
72927: PLUS
72928: PPUSH
72929: LD_VAR 0 4
72933: PPUSH
72934: CALL_OW 256
72938: PPUSH
72939: CALL_OW 2
72943: ST_TO_ADDR
72944: GO 72907
72946: POP
72947: POP
// if not tmp then
72948: LD_VAR 0 5
72952: NOT
72953: IFFALSE 72957
// exit ;
72955: GO 73005
// if asc then
72957: LD_VAR 0 2
72961: IFFALSE 72985
// result := SortListByListAsc ( units , tmp ) else
72963: LD_ADDR_VAR 0 3
72967: PUSH
72968: LD_VAR 0 1
72972: PPUSH
72973: LD_VAR 0 5
72977: PPUSH
72978: CALL_OW 76
72982: ST_TO_ADDR
72983: GO 73005
// result := SortListByListDesc ( units , tmp ) ;
72985: LD_ADDR_VAR 0 3
72989: PUSH
72990: LD_VAR 0 1
72994: PPUSH
72995: LD_VAR 0 5
72999: PPUSH
73000: CALL_OW 77
73004: ST_TO_ADDR
// end ;
73005: LD_VAR 0 3
73009: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73010: LD_INT 0
73012: PPUSH
73013: PPUSH
// task := GetTaskList ( mech ) ;
73014: LD_ADDR_VAR 0 4
73018: PUSH
73019: LD_VAR 0 1
73023: PPUSH
73024: CALL_OW 437
73028: ST_TO_ADDR
// if not task then
73029: LD_VAR 0 4
73033: NOT
73034: IFFALSE 73038
// exit ;
73036: GO 73080
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73038: LD_ADDR_VAR 0 3
73042: PUSH
73043: LD_VAR 0 4
73047: PUSH
73048: LD_INT 1
73050: ARRAY
73051: PUSH
73052: LD_INT 1
73054: ARRAY
73055: PUSH
73056: LD_STRING r
73058: EQUAL
73059: PUSH
73060: LD_VAR 0 4
73064: PUSH
73065: LD_INT 1
73067: ARRAY
73068: PUSH
73069: LD_INT 4
73071: ARRAY
73072: PUSH
73073: LD_VAR 0 2
73077: EQUAL
73078: AND
73079: ST_TO_ADDR
// end ;
73080: LD_VAR 0 3
73084: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73085: LD_INT 0
73087: PPUSH
// SetDir ( unit , d ) ;
73088: LD_VAR 0 1
73092: PPUSH
73093: LD_VAR 0 4
73097: PPUSH
73098: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73102: LD_VAR 0 1
73106: PPUSH
73107: LD_VAR 0 2
73111: PPUSH
73112: LD_VAR 0 3
73116: PPUSH
73117: LD_VAR 0 5
73121: PPUSH
73122: CALL_OW 48
// end ;
73126: LD_VAR 0 6
73130: RET
// export function ToNaturalNumber ( number ) ; begin
73131: LD_INT 0
73133: PPUSH
// result := number div 1 ;
73134: LD_ADDR_VAR 0 2
73138: PUSH
73139: LD_VAR 0 1
73143: PUSH
73144: LD_INT 1
73146: DIV
73147: ST_TO_ADDR
// if number < 0 then
73148: LD_VAR 0 1
73152: PUSH
73153: LD_INT 0
73155: LESS
73156: IFFALSE 73166
// result := 0 ;
73158: LD_ADDR_VAR 0 2
73162: PUSH
73163: LD_INT 0
73165: ST_TO_ADDR
// end ; end_of_file
73166: LD_VAR 0 2
73170: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73171: LD_VAR 0 1
73175: PPUSH
73176: LD_VAR 0 2
73180: PPUSH
73181: LD_VAR 0 3
73185: PPUSH
73186: LD_VAR 0 4
73190: PPUSH
73191: LD_VAR 0 5
73195: PPUSH
73196: LD_VAR 0 6
73200: PPUSH
73201: CALL 16898 0 6
// end ;
73205: PPOPN 6
73207: END
