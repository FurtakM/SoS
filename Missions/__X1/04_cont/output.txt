// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// PrepareNature ;
   8: CALL 1860 0 0
// PrepareArabian ;
  12: CALL 2230 0 0
// PrepareAmerican ;
  16: CALL 7225 0 0
// PrepareRussian ;
  20: CALL 3186 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8785 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// escapeCounter := 0 ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// loseCounter := 0 ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// labCaptured := false ;
 222: LD_ADDR_EXP 21
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// hillBase := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 238: LD_ADDR_EXP 8
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 4
 248: PUSH
 249: LD_INT 5
 251: PUSH
 252: LD_INT 6
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 8
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// kaganCaptured := false ;
 277: LD_ADDR_EXP 24
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// end ;
 285: LD_VAR 0 1
 289: RET
// every 0 0$1 trigger debug do var i ;
 290: LD_EXP 1
 294: IFFALSE 363
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
// begin enable ;
 302: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 3
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 3
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 361
// SetLives ( i , 1000 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: LD_INT 1000
 354: PPUSH
 355: CALL_OW 234
 359: GO 344
 361: POP
 362: POP
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 366: LD_INT 0
 368: PPUSH
 369: PPUSH
// if exist_mode then
 370: LD_VAR 0 2
 374: IFFALSE 399
// unit := CreateCharacter ( prefix & ident ) else
 376: LD_ADDR_VAR 0 5
 380: PUSH
 381: LD_VAR 0 3
 385: PUSH
 386: LD_VAR 0 1
 390: STR
 391: PPUSH
 392: CALL_OW 34
 396: ST_TO_ADDR
 397: GO 414
// unit := NewCharacter ( ident ) ;
 399: LD_ADDR_VAR 0 5
 403: PUSH
 404: LD_VAR 0 1
 408: PPUSH
 409: CALL_OW 25
 413: ST_TO_ADDR
// result := unit ;
 414: LD_ADDR_VAR 0 4
 418: PUSH
 419: LD_VAR 0 5
 423: ST_TO_ADDR
// end ;
 424: LD_VAR 0 4
 428: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 429: LD_INT 0
 431: PPUSH
// uc_side := side ;
 432: LD_ADDR_OWVAR 20
 436: PUSH
 437: LD_VAR 0 1
 441: ST_TO_ADDR
// uc_nation := nation ;
 442: LD_ADDR_OWVAR 21
 446: PUSH
 447: LD_VAR 0 2
 451: ST_TO_ADDR
// vc_chassis := chassis ;
 452: LD_ADDR_OWVAR 37
 456: PUSH
 457: LD_VAR 0 3
 461: ST_TO_ADDR
// vc_engine := engine ;
 462: LD_ADDR_OWVAR 39
 466: PUSH
 467: LD_VAR 0 4
 471: ST_TO_ADDR
// vc_control := control ;
 472: LD_ADDR_OWVAR 38
 476: PUSH
 477: LD_VAR 0 5
 481: ST_TO_ADDR
// vc_weapon := weapon ;
 482: LD_ADDR_OWVAR 40
 486: PUSH
 487: LD_VAR 0 6
 491: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 492: LD_ADDR_OWVAR 41
 496: PUSH
 497: LD_VAR 0 7
 501: ST_TO_ADDR
// result := CreateVehicle ;
 502: LD_ADDR_VAR 0 8
 506: PUSH
 507: CALL_OW 45
 511: ST_TO_ADDR
// end ;
 512: LD_VAR 0 8
 516: RET
// export function SayX ( units , ident ) ; var i ; begin
 517: LD_INT 0
 519: PPUSH
 520: PPUSH
// result := false ;
 521: LD_ADDR_VAR 0 3
 525: PUSH
 526: LD_INT 0
 528: ST_TO_ADDR
// if not units then
 529: LD_VAR 0 1
 533: NOT
 534: IFFALSE 538
// exit ;
 536: GO 592
// for i in units do
 538: LD_ADDR_VAR 0 4
 542: PUSH
 543: LD_VAR 0 1
 547: PUSH
 548: FOR_IN
 549: IFFALSE 590
// if IsOk ( i ) then
 551: LD_VAR 0 4
 555: PPUSH
 556: CALL_OW 302
 560: IFFALSE 588
// begin Say ( i , ident ) ;
 562: LD_VAR 0 4
 566: PPUSH
 567: LD_VAR 0 2
 571: PPUSH
 572: CALL_OW 88
// result := i ;
 576: LD_ADDR_VAR 0 3
 580: PUSH
 581: LD_VAR 0 4
 585: ST_TO_ADDR
// break ;
 586: GO 590
// end ;
 588: GO 548
 590: POP
 591: POP
// end ;
 592: LD_VAR 0 3
 596: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 597: LD_INT 0
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if not observer or not unit then
 602: LD_VAR 0 1
 606: NOT
 607: PUSH
 608: LD_VAR 0 2
 612: NOT
 613: OR
 614: IFFALSE 618
// exit ;
 616: GO 666
// if not See ( GetSide ( observer ) , unit ) then
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 255
 627: PPUSH
 628: LD_VAR 0 2
 632: PPUSH
 633: CALL_OW 292
 637: NOT
 638: IFFALSE 642
// exit ;
 640: GO 666
// result := GetDistUnits ( observer , unit ) < 12 ;
 642: LD_ADDR_VAR 0 3
 646: PUSH
 647: LD_VAR 0 1
 651: PPUSH
 652: LD_VAR 0 2
 656: PPUSH
 657: CALL_OW 296
 661: PUSH
 662: LD_INT 12
 664: LESS
 665: ST_TO_ADDR
// end ;
 666: LD_VAR 0 3
 670: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 671: LD_INT 0
 673: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 674: LD_VAR 0 2
 678: PUSH
 679: LD_INT 1
 681: ARRAY
 682: PPUSH
 683: LD_VAR 0 2
 687: PUSH
 688: LD_INT 2
 690: ARRAY
 691: PPUSH
 692: CALL_OW 488
 696: PUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 1
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 2
 713: ARRAY
 714: PPUSH
 715: CALL_OW 428
 719: PUSH
 720: LD_INT 0
 722: EQUAL
 723: AND
 724: IFFALSE 758
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 726: LD_VAR 0 1
 730: PPUSH
 731: LD_VAR 0 2
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: LD_VAR 0 2
 744: PUSH
 745: LD_INT 2
 747: ARRAY
 748: PPUSH
 749: LD_VAR 0 3
 753: PPUSH
 754: CALL_OW 48
// end ;
 758: LD_VAR 0 4
 762: RET
// export function Video ( mode ) ; begin
 763: LD_INT 0
 765: PPUSH
// ingame_video = mode ;
 766: LD_ADDR_OWVAR 52
 770: PUSH
 771: LD_VAR 0 1
 775: ST_TO_ADDR
// interface_hidden = mode ;
 776: LD_ADDR_OWVAR 54
 780: PUSH
 781: LD_VAR 0 1
 785: ST_TO_ADDR
// end ;
 786: LD_VAR 0 2
 790: RET
// export function ReverseArray ( array ) ; var i ; begin
 791: LD_INT 0
 793: PPUSH
 794: PPUSH
// if not array then
 795: LD_VAR 0 1
 799: NOT
 800: IFFALSE 804
// exit ;
 802: GO 862
// result := [ ] ;
 804: LD_ADDR_VAR 0 2
 808: PUSH
 809: EMPTY
 810: ST_TO_ADDR
// for i := 1 to array do
 811: LD_ADDR_VAR 0 3
 815: PUSH
 816: DOUBLE
 817: LD_INT 1
 819: DEC
 820: ST_TO_ADDR
 821: LD_VAR 0 1
 825: PUSH
 826: FOR_TO
 827: IFFALSE 860
// result := Insert ( result , 1 , array [ i ] ) ;
 829: LD_ADDR_VAR 0 2
 833: PUSH
 834: LD_VAR 0 2
 838: PPUSH
 839: LD_INT 1
 841: PPUSH
 842: LD_VAR 0 1
 846: PUSH
 847: LD_VAR 0 3
 851: ARRAY
 852: PPUSH
 853: CALL_OW 2
 857: ST_TO_ADDR
 858: GO 826
 860: POP
 861: POP
// end ;
 862: LD_VAR 0 2
 866: RET
// export function ComExit ( unit ) ; begin
 867: LD_INT 0
 869: PPUSH
// result := IsInUnit ( unit ) ;
 870: LD_ADDR_VAR 0 2
 874: PUSH
 875: LD_VAR 0 1
 879: PPUSH
 880: CALL_OW 310
 884: ST_TO_ADDR
// if not result then
 885: LD_VAR 0 2
 889: NOT
 890: IFFALSE 894
// exit ;
 892: GO 929
// if GetType ( result ) = unit_vehicle then
 894: LD_VAR 0 2
 898: PPUSH
 899: CALL_OW 247
 903: PUSH
 904: LD_INT 2
 906: EQUAL
 907: IFFALSE 920
// ComExitVehicle ( unit ) else
 909: LD_VAR 0 1
 913: PPUSH
 914: CALL_OW 121
 918: GO 929
// ComExitBuilding ( unit ) ;
 920: LD_VAR 0 1
 924: PPUSH
 925: CALL_OW 122
// end ;
 929: LD_VAR 0 2
 933: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 934: LD_INT 0
 936: PPUSH
 937: PPUSH
// if not side or not nation then
 938: LD_VAR 0 1
 942: NOT
 943: PUSH
 944: LD_VAR 0 2
 948: NOT
 949: OR
 950: IFFALSE 954
// exit ;
 952: GO 1718
// case nation of nation_american :
 954: LD_VAR 0 2
 958: PUSH
 959: LD_INT 1
 961: DOUBLE
 962: EQUAL
 963: IFTRUE 967
 965: GO 1181
 967: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 968: LD_ADDR_VAR 0 4
 972: PUSH
 973: LD_INT 35
 975: PUSH
 976: LD_INT 45
 978: PUSH
 979: LD_INT 46
 981: PUSH
 982: LD_INT 47
 984: PUSH
 985: LD_INT 82
 987: PUSH
 988: LD_INT 83
 990: PUSH
 991: LD_INT 84
 993: PUSH
 994: LD_INT 85
 996: PUSH
 997: LD_INT 86
 999: PUSH
1000: LD_INT 1
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: LD_INT 6
1008: PUSH
1009: LD_INT 15
1011: PUSH
1012: LD_INT 16
1014: PUSH
1015: LD_INT 7
1017: PUSH
1018: LD_INT 12
1020: PUSH
1021: LD_INT 13
1023: PUSH
1024: LD_INT 10
1026: PUSH
1027: LD_INT 14
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: LD_INT 21
1035: PUSH
1036: LD_INT 22
1038: PUSH
1039: LD_INT 25
1041: PUSH
1042: LD_INT 32
1044: PUSH
1045: LD_INT 27
1047: PUSH
1048: LD_INT 36
1050: PUSH
1051: LD_INT 69
1053: PUSH
1054: LD_INT 39
1056: PUSH
1057: LD_INT 34
1059: PUSH
1060: LD_INT 40
1062: PUSH
1063: LD_INT 48
1065: PUSH
1066: LD_INT 49
1068: PUSH
1069: LD_INT 50
1071: PUSH
1072: LD_INT 51
1074: PUSH
1075: LD_INT 52
1077: PUSH
1078: LD_INT 53
1080: PUSH
1081: LD_INT 54
1083: PUSH
1084: LD_INT 55
1086: PUSH
1087: LD_INT 56
1089: PUSH
1090: LD_INT 57
1092: PUSH
1093: LD_INT 58
1095: PUSH
1096: LD_INT 59
1098: PUSH
1099: LD_INT 60
1101: PUSH
1102: LD_INT 61
1104: PUSH
1105: LD_INT 62
1107: PUSH
1108: LD_INT 80
1110: PUSH
1111: LD_INT 82
1113: PUSH
1114: LD_INT 83
1116: PUSH
1117: LD_INT 84
1119: PUSH
1120: LD_INT 85
1122: PUSH
1123: LD_INT 86
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: ST_TO_ADDR
1179: GO 1642
1181: LD_INT 2
1183: DOUBLE
1184: EQUAL
1185: IFTRUE 1189
1187: GO 1411
1189: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1190: LD_ADDR_VAR 0 4
1194: PUSH
1195: LD_INT 35
1197: PUSH
1198: LD_INT 45
1200: PUSH
1201: LD_INT 46
1203: PUSH
1204: LD_INT 47
1206: PUSH
1207: LD_INT 82
1209: PUSH
1210: LD_INT 83
1212: PUSH
1213: LD_INT 84
1215: PUSH
1216: LD_INT 85
1218: PUSH
1219: LD_INT 87
1221: PUSH
1222: LD_INT 70
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 11
1230: PUSH
1231: LD_INT 3
1233: PUSH
1234: LD_INT 4
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: LD_INT 6
1242: PUSH
1243: LD_INT 15
1245: PUSH
1246: LD_INT 18
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: LD_INT 17
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: LD_INT 20
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 22
1266: PUSH
1267: LD_INT 72
1269: PUSH
1270: LD_INT 26
1272: PUSH
1273: LD_INT 69
1275: PUSH
1276: LD_INT 39
1278: PUSH
1279: LD_INT 40
1281: PUSH
1282: LD_INT 41
1284: PUSH
1285: LD_INT 42
1287: PUSH
1288: LD_INT 43
1290: PUSH
1291: LD_INT 48
1293: PUSH
1294: LD_INT 49
1296: PUSH
1297: LD_INT 50
1299: PUSH
1300: LD_INT 51
1302: PUSH
1303: LD_INT 52
1305: PUSH
1306: LD_INT 53
1308: PUSH
1309: LD_INT 54
1311: PUSH
1312: LD_INT 55
1314: PUSH
1315: LD_INT 56
1317: PUSH
1318: LD_INT 60
1320: PUSH
1321: LD_INT 61
1323: PUSH
1324: LD_INT 62
1326: PUSH
1327: LD_INT 66
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: LD_INT 68
1335: PUSH
1336: LD_INT 81
1338: PUSH
1339: LD_INT 82
1341: PUSH
1342: LD_INT 83
1344: PUSH
1345: LD_INT 84
1347: PUSH
1348: LD_INT 85
1350: PUSH
1351: LD_INT 87
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
1409: GO 1642
1411: LD_INT 3
1413: DOUBLE
1414: EQUAL
1415: IFTRUE 1419
1417: GO 1641
1419: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1420: LD_ADDR_VAR 0 4
1424: PUSH
1425: LD_INT 46
1427: PUSH
1428: LD_INT 47
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 82
1439: PUSH
1440: LD_INT 83
1442: PUSH
1443: LD_INT 84
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 86
1451: PUSH
1452: LD_INT 11
1454: PUSH
1455: LD_INT 9
1457: PUSH
1458: LD_INT 20
1460: PUSH
1461: LD_INT 19
1463: PUSH
1464: LD_INT 21
1466: PUSH
1467: LD_INT 24
1469: PUSH
1470: LD_INT 22
1472: PUSH
1473: LD_INT 25
1475: PUSH
1476: LD_INT 28
1478: PUSH
1479: LD_INT 29
1481: PUSH
1482: LD_INT 30
1484: PUSH
1485: LD_INT 31
1487: PUSH
1488: LD_INT 37
1490: PUSH
1491: LD_INT 38
1493: PUSH
1494: LD_INT 32
1496: PUSH
1497: LD_INT 27
1499: PUSH
1500: LD_INT 33
1502: PUSH
1503: LD_INT 69
1505: PUSH
1506: LD_INT 39
1508: PUSH
1509: LD_INT 34
1511: PUSH
1512: LD_INT 40
1514: PUSH
1515: LD_INT 71
1517: PUSH
1518: LD_INT 23
1520: PUSH
1521: LD_INT 44
1523: PUSH
1524: LD_INT 48
1526: PUSH
1527: LD_INT 49
1529: PUSH
1530: LD_INT 50
1532: PUSH
1533: LD_INT 51
1535: PUSH
1536: LD_INT 52
1538: PUSH
1539: LD_INT 53
1541: PUSH
1542: LD_INT 54
1544: PUSH
1545: LD_INT 55
1547: PUSH
1548: LD_INT 56
1550: PUSH
1551: LD_INT 57
1553: PUSH
1554: LD_INT 58
1556: PUSH
1557: LD_INT 59
1559: PUSH
1560: LD_INT 63
1562: PUSH
1563: LD_INT 64
1565: PUSH
1566: LD_INT 65
1568: PUSH
1569: LD_INT 82
1571: PUSH
1572: LD_INT 83
1574: PUSH
1575: LD_INT 84
1577: PUSH
1578: LD_INT 85
1580: PUSH
1581: LD_INT 86
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
1639: GO 1642
1641: POP
// if state > - 1 and state < 3 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 1
1649: NEG
1650: GREATER
1651: PUSH
1652: LD_VAR 0 3
1656: PUSH
1657: LD_INT 3
1659: LESS
1660: AND
1661: IFFALSE 1718
// for i in result do
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 4
1672: PUSH
1673: FOR_IN
1674: IFFALSE 1716
// if GetTech ( i , side ) <> state then
1676: LD_VAR 0 5
1680: PPUSH
1681: LD_VAR 0 1
1685: PPUSH
1686: CALL_OW 321
1690: PUSH
1691: LD_VAR 0 3
1695: NONEQUAL
1696: IFFALSE 1714
// result := result diff i ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_VAR 0 4
1707: PUSH
1708: LD_VAR 0 5
1712: DIFF
1713: ST_TO_ADDR
1714: GO 1673
1716: POP
1717: POP
// end ;
1718: LD_VAR 0 4
1722: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1723: LD_INT 0
1725: PPUSH
1726: PPUSH
// InitUc ;
1727: CALL_OW 18
// InitHc ;
1731: CALL_OW 19
// uc_side := 0 ;
1735: LD_ADDR_OWVAR 20
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// uc_nation := 0 ;
1743: LD_ADDR_OWVAR 21
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// for i = 1 to amount do
1751: LD_ADDR_VAR 0 4
1755: PUSH
1756: DOUBLE
1757: LD_INT 1
1759: DEC
1760: ST_TO_ADDR
1761: LD_VAR 0 2
1765: PUSH
1766: FOR_TO
1767: IFFALSE 1849
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1769: LD_ADDR_OWVAR 29
1773: PUSH
1774: LD_INT 9
1776: PPUSH
1777: LD_INT 12
1779: PPUSH
1780: CALL_OW 12
1784: PUSH
1785: LD_INT 9
1787: PPUSH
1788: LD_INT 12
1790: PPUSH
1791: CALL_OW 12
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1800: LD_ADDR_OWVAR 35
1804: PUSH
1805: LD_INT 1
1807: NEG
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 12
1816: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1817: LD_INT 0
1819: PPUSH
1820: LD_INT 12
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1830: CALL_OW 44
1834: PPUSH
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 49
// end ;
1847: GO 1766
1849: POP
1850: POP
// InitHc ;
1851: CALL_OW 19
// end ;
1855: LD_VAR 0 3
1859: RET
// export function PrepareNature ; var i ; begin
1860: LD_INT 0
1862: PPUSH
1863: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1864: LD_INT 18
1866: PPUSH
1867: LD_INT 5
1869: PUSH
1870: LD_INT 4
1872: PUSH
1873: LD_INT 3
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_OWVAR 67
1885: ARRAY
1886: PPUSH
1887: CALL 1723 0 2
// for i := 1 to 3 do
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1940
// begin hc_class := 21 ;
1907: LD_ADDR_OWVAR 28
1911: PUSH
1912: LD_INT 21
1914: ST_TO_ADDR
// hc_gallery :=  ;
1915: LD_ADDR_OWVAR 33
1919: PUSH
1920: LD_STRING 
1922: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1923: CALL_OW 44
1927: PPUSH
1928: LD_INT 18
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 49
// end ;
1938: GO 1904
1940: POP
1941: POP
// for i := 1 to 2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: DOUBLE
1948: LD_INT 1
1950: DEC
1951: ST_TO_ADDR
1952: LD_INT 2
1954: PUSH
1955: FOR_TO
1956: IFFALSE 1991
// begin hc_class := 18 ;
1958: LD_ADDR_OWVAR 28
1962: PUSH
1963: LD_INT 18
1965: ST_TO_ADDR
// hc_gallery :=  ;
1966: LD_ADDR_OWVAR 33
1970: PUSH
1971: LD_STRING 
1973: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1974: CALL_OW 44
1978: PPUSH
1979: LD_INT 18
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: CALL_OW 49
// end ;
1989: GO 1955
1991: POP
1992: POP
// for i := 1 to 2 do
1993: LD_ADDR_VAR 0 2
1997: PUSH
1998: DOUBLE
1999: LD_INT 1
2001: DEC
2002: ST_TO_ADDR
2003: LD_INT 2
2005: PUSH
2006: FOR_TO
2007: IFFALSE 2042
// begin hc_class := 13 ;
2009: LD_ADDR_OWVAR 28
2013: PUSH
2014: LD_INT 13
2016: ST_TO_ADDR
// hc_gallery :=  ;
2017: LD_ADDR_OWVAR 33
2021: PUSH
2022: LD_STRING 
2024: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
2025: CALL_OW 44
2029: PPUSH
2030: LD_INT 18
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// end ;
2040: GO 2006
2042: POP
2043: POP
// end ;
2044: LD_VAR 0 1
2048: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
2049: LD_INT 0
2051: PPUSH
2052: PPUSH
2053: PPUSH
2054: PPUSH
2055: PPUSH
// result := false ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 0
2063: ST_TO_ADDR
// if not sideList or not enemySide then
2064: LD_VAR 0 1
2068: NOT
2069: PUSH
2070: LD_VAR 0 2
2074: NOT
2075: OR
2076: IFFALSE 2080
// exit ;
2078: GO 2225
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 22
2087: PUSH
2088: LD_VAR 0 2
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PPUSH
2097: CALL_OW 69
2101: ST_TO_ADDR
// if not tmp then
2102: LD_VAR 0 7
2106: NOT
2107: IFFALSE 2111
// exit ;
2109: GO 2225
// for s in sideList do
2111: LD_ADDR_VAR 0 6
2115: PUSH
2116: LD_VAR 0 1
2120: PUSH
2121: FOR_IN
2122: IFFALSE 2223
// for i in tmp do
2124: LD_ADDR_VAR 0 5
2128: PUSH
2129: LD_VAR 0 7
2133: PUSH
2134: FOR_IN
2135: IFFALSE 2219
// if See ( s , i ) then
2137: LD_VAR 0 6
2141: PPUSH
2142: LD_VAR 0 5
2146: PPUSH
2147: CALL_OW 292
2151: IFFALSE 2217
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2153: LD_ADDR_VAR 0 8
2157: PUSH
2158: LD_INT 22
2160: PUSH
2161: LD_VAR 0 6
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: PPUSH
2170: CALL_OW 69
2174: PPUSH
2175: LD_VAR 0 5
2179: PPUSH
2180: CALL_OW 74
2184: ST_TO_ADDR
// if tmp2 in exceptUnits then
2185: LD_VAR 0 8
2189: PUSH
2190: LD_VAR 0 3
2194: IN
2195: IFFALSE 2201
// continue else
2197: GO 2134
2199: GO 2217
// begin result := tmp2 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 8
2210: ST_TO_ADDR
// exit ;
2211: POP
2212: POP
2213: POP
2214: POP
2215: GO 2225
// end ; end ;
2217: GO 2134
2219: POP
2220: POP
2221: GO 2121
2223: POP
2224: POP
// end ; end_of_file
2225: LD_VAR 0 4
2229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
// uc_side := 5 ;
2234: LD_ADDR_OWVAR 20
2238: PUSH
2239: LD_INT 5
2241: ST_TO_ADDR
// uc_nation := 2 ;
2242: LD_ADDR_OWVAR 21
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2250: LD_ADDR_EXP 36
2254: PUSH
2255: LD_STRING Abdul
2257: PPUSH
2258: LD_INT 0
2260: PPUSH
2261: LD_STRING 
2263: PPUSH
2264: CALL 366 0 3
2268: ST_TO_ADDR
// uc_side := 2 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 2
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2285: LD_ADDR_EXP 25
2289: PUSH
2290: LD_STRING Heike
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_EXP 2
2303: PPUSH
2304: CALL 366 0 3
2308: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2309: LD_ADDR_EXP 28
2313: PUSH
2314: LD_STRING Ibrahim
2316: PPUSH
2317: LD_EXP 1
2321: NOT
2322: PPUSH
2323: LD_EXP 2
2327: PPUSH
2328: CALL 366 0 3
2332: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2333: LD_ADDR_EXP 26
2337: PUSH
2338: LD_STRING Givi
2340: PPUSH
2341: LD_EXP 1
2345: NOT
2346: PPUSH
2347: LD_EXP 2
2351: PPUSH
2352: CALL 366 0 3
2356: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2357: LD_ADDR_EXP 29
2361: PUSH
2362: LD_STRING Kamil
2364: PPUSH
2365: LD_EXP 1
2369: NOT
2370: PPUSH
2371: LD_EXP 2
2375: PPUSH
2376: CALL 366 0 3
2380: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2381: LD_ADDR_EXP 30
2385: PUSH
2386: LD_STRING Kaia
2388: PPUSH
2389: LD_EXP 1
2393: NOT
2394: PPUSH
2395: LD_EXP 2
2399: PPUSH
2400: CALL 366 0 3
2404: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2405: LD_ADDR_EXP 31
2409: PUSH
2410: LD_STRING Sophia
2412: PPUSH
2413: LD_EXP 1
2417: NOT
2418: PPUSH
2419: LD_EXP 2
2423: PPUSH
2424: CALL 366 0 3
2428: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2429: LD_ADDR_EXP 32
2433: PUSH
2434: LD_STRING Markov
2436: PPUSH
2437: LD_EXP 1
2441: NOT
2442: PPUSH
2443: LD_EXP 2
2447: PPUSH
2448: CALL 366 0 3
2452: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2453: LD_ADDR_EXP 35
2457: PUSH
2458: LD_STRING Aviradze
2460: PPUSH
2461: LD_EXP 1
2465: NOT
2466: PPUSH
2467: LD_EXP 2
2471: PPUSH
2472: CALL 366 0 3
2476: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2477: LD_ADDR_EXP 39
2481: PUSH
2482: EMPTY
2483: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2484: LD_ADDR_EXP 37
2488: PUSH
2489: LD_STRING 03_others
2491: PPUSH
2492: CALL_OW 31
2496: ST_TO_ADDR
// uc_side := 5 ;
2497: LD_ADDR_OWVAR 20
2501: PUSH
2502: LD_INT 5
2504: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2505: LD_ADDR_EXP 34
2509: PUSH
2510: LD_STRING Kurt
2512: PPUSH
2513: LD_INT 0
2515: PPUSH
2516: LD_STRING 
2518: PPUSH
2519: CALL 366 0 3
2523: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2524: LD_ADDR_EXP 27
2528: PUSH
2529: LD_STRING Mike
2531: PPUSH
2532: LD_EXP 1
2536: NOT
2537: PPUSH
2538: LD_EXP 2
2542: PPUSH
2543: CALL 366 0 3
2547: ST_TO_ADDR
// if Mike then
2548: LD_EXP 27
2552: IFFALSE 2575
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2554: LD_EXP 27
2558: PPUSH
2559: LD_INT 142
2561: PPUSH
2562: LD_INT 63
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: LD_INT 0
2570: PPUSH
2571: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2575: LD_EXP 34
2579: PPUSH
2580: LD_INT 142
2582: PPUSH
2583: LD_INT 63
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2596: LD_EXP 34
2600: PUSH
2601: LD_EXP 27
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PPUSH
2610: CALL_OW 140
// end ;
2614: LD_VAR 0 1
2618: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
2624: PPUSH
// uc_side := 5 ;
2625: LD_ADDR_OWVAR 20
2629: PUSH
2630: LD_INT 5
2632: ST_TO_ADDR
// uc_nation := 2 ;
2633: LD_ADDR_OWVAR 21
2637: PUSH
2638: LD_INT 2
2640: ST_TO_ADDR
// InitHc ;
2641: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2645: LD_ADDR_EXP 33
2649: PUSH
2650: LD_STRING Omar
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: LD_STRING 
2658: PPUSH
2659: CALL 366 0 3
2663: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2664: LD_EXP 33
2668: PPUSH
2669: LD_INT 284
2671: PPUSH
2672: LD_INT 163
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2682: LD_EXP 33
2686: PPUSH
2687: LD_INT 256
2689: PPUSH
2690: LD_INT 129
2692: PPUSH
2693: CALL_OW 111
// wait ( 0 0$2 ) ;
2697: LD_INT 70
2699: PPUSH
2700: CALL_OW 67
// omarSquad := [ ] ;
2704: LD_ADDR_EXP 38
2708: PUSH
2709: EMPTY
2710: ST_TO_ADDR
// for i := 1 to 5 do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: DOUBLE
2717: LD_INT 1
2719: DEC
2720: ST_TO_ADDR
2721: LD_INT 5
2723: PUSH
2724: FOR_TO
2725: IFFALSE 2931
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2727: LD_INT 5
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: LD_INT 13
2735: PUSH
2736: LD_INT 14
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 2
2750: MOD
2751: PUSH
2752: LD_INT 1
2754: PLUS
2755: ARRAY
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: LD_INT 25
2765: PUSH
2766: LD_INT 27
2768: PUSH
2769: LD_INT 26
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 3
2784: MOD
2785: PUSH
2786: LD_INT 1
2788: PLUS
2789: ARRAY
2790: PPUSH
2791: LD_INT 100
2793: PPUSH
2794: CALL 429 0 7
// veh := CreateVehicle ;
2798: LD_ADDR_VAR 0 4
2802: PUSH
2803: CALL_OW 45
2807: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2808: LD_VAR 0 4
2812: PPUSH
2813: LD_INT 5
2815: PPUSH
2816: CALL_OW 233
// omarSquad := omarSquad union veh ;
2820: LD_ADDR_EXP 38
2824: PUSH
2825: LD_EXP 38
2829: PUSH
2830: LD_VAR 0 4
2834: UNION
2835: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2836: LD_VAR 0 4
2840: PPUSH
2841: LD_INT 284
2843: PPUSH
2844: LD_INT 163
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: CALL_OW 380
// un := CreateHuman ;
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: CALL_OW 44
2876: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2877: LD_ADDR_EXP 38
2881: PUSH
2882: LD_EXP 38
2886: PUSH
2887: LD_VAR 0 3
2891: UNION
2892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2893: LD_VAR 0 3
2897: PPUSH
2898: LD_VAR 0 4
2902: PPUSH
2903: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 271
2914: PPUSH
2915: LD_INT 144
2917: PPUSH
2918: CALL_OW 111
// wait ( 0 0$2 ) ;
2922: LD_INT 70
2924: PPUSH
2925: CALL_OW 67
// end ;
2929: GO 2724
2931: POP
2932: POP
// for i := 1 to 3 do
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: DOUBLE
2939: LD_INT 1
2941: DEC
2942: ST_TO_ADDR
2943: LD_INT 3
2945: PUSH
2946: FOR_TO
2947: IFFALSE 3030
// begin PrepareHuman ( false , 1 , 2 ) ;
2949: LD_INT 0
2951: PPUSH
2952: LD_INT 1
2954: PPUSH
2955: LD_INT 2
2957: PPUSH
2958: CALL_OW 380
// un := CreateHuman ;
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: CALL_OW 44
2971: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2972: LD_ADDR_EXP 38
2976: PUSH
2977: LD_EXP 38
2981: PUSH
2982: LD_VAR 0 3
2986: UNION
2987: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 284
2995: PPUSH
2996: LD_INT 163
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
3006: LD_VAR 0 3
3010: PPUSH
3011: LD_INT 257
3013: PPUSH
3014: LD_INT 138
3016: PPUSH
3017: CALL_OW 111
// wait ( 0 0$1 ) ;
3021: LD_INT 35
3023: PPUSH
3024: CALL_OW 67
// end ;
3028: GO 2946
3030: POP
3031: POP
// for i := 1 to 6 do
3032: LD_ADDR_VAR 0 2
3036: PUSH
3037: DOUBLE
3038: LD_INT 1
3040: DEC
3041: ST_TO_ADDR
3042: LD_INT 6
3044: PUSH
3045: FOR_TO
3046: IFFALSE 3179
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
3048: LD_INT 0
3050: PPUSH
3051: LD_INT 1
3053: PUSH
3054: LD_INT 1
3056: PUSH
3057: LD_INT 4
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: PUSH
3065: LD_VAR 0 2
3069: PUSH
3070: LD_INT 3
3072: MOD
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: ARRAY
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 380
// un := CreateHuman ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: CALL_OW 44
3095: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3096: LD_ADDR_EXP 38
3100: PUSH
3101: LD_EXP 38
3105: PUSH
3106: LD_VAR 0 3
3110: UNION
3111: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3112: LD_VAR 0 3
3116: PPUSH
3117: LD_INT 225
3119: PPUSH
3120: LD_INT 163
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 48
// if i = 1 then
3130: LD_VAR 0 2
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3155
// SetAttr ( un , attr_speed , 12 ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 12
3150: PPUSH
3151: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3155: LD_VAR 0 3
3159: PPUSH
3160: LD_INT 222
3162: PPUSH
3163: LD_INT 157
3165: PPUSH
3166: CALL_OW 111
// wait ( 0 0$1 ) ;
3170: LD_INT 35
3172: PPUSH
3173: CALL_OW 67
// end ;
3177: GO 3045
3179: POP
3180: POP
// end ; end_of_file
3181: LD_VAR 0 1
3185: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3186: LD_INT 0
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
3193: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 149
3199: PPUSH
3200: LD_INT 67
3202: PPUSH
3203: CALL_OW 428
3207: PPUSH
3208: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
3212: LD_ADDR_EXP 50
3216: PUSH
3217: LD_INT 111
3219: PPUSH
3220: LD_INT 89
3222: PPUSH
3223: CALL_OW 428
3227: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 21
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 23
3245: PUSH
3246: LD_INT 3
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3279
// SetBLevel ( i , 5 ) ;
3265: LD_VAR 0 2
3269: PPUSH
3270: LD_INT 5
3272: PPUSH
3273: CALL_OW 241
3277: GO 3262
3279: POP
3280: POP
// SetBName ( kirov , kirov ) ;
3281: LD_INT 71
3283: PPUSH
3284: LD_STRING kirov
3286: PPUSH
3287: CALL_OW 500
// SetBName ( beria , beria ) ;
3291: LD_INT 106
3293: PPUSH
3294: LD_STRING beria
3296: PPUSH
3297: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3301: LD_INT 112
3303: PPUSH
3304: LD_STRING kagan
3306: PPUSH
3307: CALL_OW 500
// uc_side := 6 ;
3311: LD_ADDR_OWVAR 20
3315: PUSH
3316: LD_INT 6
3318: ST_TO_ADDR
// uc_nation := 3 ;
3319: LD_ADDR_OWVAR 21
3323: PUSH
3324: LD_INT 3
3326: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3327: LD_ADDR_VAR 0 5
3331: PUSH
3332: LD_INT 22
3334: PUSH
3335: LD_INT 6
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 30
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: PUSH
3361: LD_INT 1
3363: ARRAY
3364: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: LD_INT 22
3372: PUSH
3373: LD_INT 6
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PUSH
3380: LD_INT 30
3382: PUSH
3383: LD_INT 4
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PPUSH
3394: CALL_OW 69
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3403: LD_ADDR_EXP 44
3407: PUSH
3408: EMPTY
3409: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3410: LD_ADDR_EXP 45
3414: PUSH
3415: EMPTY
3416: ST_TO_ADDR
// russianPatrol := [ ] ;
3417: LD_ADDR_EXP 47
3421: PUSH
3422: EMPTY
3423: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3424: LD_ADDR_EXP 40
3428: PUSH
3429: LD_STRING Kurin
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: LD_STRING 
3437: PPUSH
3438: CALL 366 0 3
3442: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3443: LD_EXP 40
3447: PPUSH
3448: LD_INT 71
3450: PPUSH
3451: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3455: LD_ADDR_EXP 42
3459: PUSH
3460: LD_STRING Popov
3462: PPUSH
3463: LD_INT 0
3465: PPUSH
3466: LD_STRING 
3468: PPUSH
3469: CALL 366 0 3
3473: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3474: LD_EXP 42
3478: PPUSH
3479: LD_INT 71
3481: PPUSH
3482: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3486: LD_ADDR_EXP 41
3490: PUSH
3491: LD_STRING Grishko
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: LD_STRING 
3499: PPUSH
3500: CALL 366 0 3
3504: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3505: LD_EXP 41
3509: PPUSH
3510: LD_INT 207
3512: PPUSH
3513: LD_INT 106
3515: PPUSH
3516: LD_INT 0
3518: PPUSH
3519: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3523: LD_EXP 41
3527: PPUSH
3528: LD_INT 209
3530: PPUSH
3531: LD_INT 106
3533: PPUSH
3534: CALL_OW 118
// for i := 1 to 2 do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 2
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3607
// begin PrepareHuman ( false , 2 , 2 ) ;
3554: LD_INT 0
3556: PPUSH
3557: LD_INT 2
3559: PPUSH
3560: LD_INT 2
3562: PPUSH
3563: CALL_OW 380
// un := CreateHuman ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: CALL_OW 44
3576: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: LD_INT 71
3584: PPUSH
3585: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3589: LD_ADDR_EXP 44
3593: PUSH
3594: LD_EXP 44
3598: PUSH
3599: LD_VAR 0 3
3603: UNION
3604: ST_TO_ADDR
// end ;
3605: GO 3551
3607: POP
3608: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: DOUBLE
3615: LD_INT 1
3617: DEC
3618: ST_TO_ADDR
3619: LD_INT 5
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: LD_INT 6
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: PUSH
3633: LD_OWVAR 67
3637: ARRAY
3638: PUSH
3639: FOR_TO
3640: IFFALSE 3714
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3642: LD_INT 0
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_INT 2
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: CALL_OW 380
// un := CreateHuman ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: CALL_OW 44
3681: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3682: LD_VAR 0 3
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3696: LD_ADDR_EXP 44
3700: PUSH
3701: LD_EXP 44
3705: PUSH
3706: LD_VAR 0 3
3710: UNION
3711: ST_TO_ADDR
// end ;
3712: GO 3639
3714: POP
3715: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
3716: LD_ADDR_VAR 0 2
3720: PUSH
3721: LD_INT 22
3723: PUSH
3724: LD_INT 6
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 30
3733: PUSH
3734: LD_INT 32
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PPUSH
3745: CALL_OW 69
3749: PUSH
3750: FOR_IN
3751: IFFALSE 3825
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3753: LD_INT 0
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PPUSH
3779: CALL_OW 380
// un := CreateHuman ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: CALL_OW 44
3792: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: LD_VAR 0 2
3802: PPUSH
3803: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3807: LD_ADDR_EXP 44
3811: PUSH
3812: LD_EXP 44
3816: PUSH
3817: LD_VAR 0 3
3821: UNION
3822: ST_TO_ADDR
// end ;
3823: GO 3750
3825: POP
3826: POP
// for i := 1 to 3 do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: DOUBLE
3833: LD_INT 1
3835: DEC
3836: ST_TO_ADDR
3837: LD_INT 3
3839: PUSH
3840: FOR_TO
3841: IFFALSE 3896
// begin PrepareHuman ( false , 3 , 3 ) ;
3843: LD_INT 0
3845: PPUSH
3846: LD_INT 3
3848: PPUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL_OW 380
// un := CreateHuman ;
3856: LD_ADDR_VAR 0 3
3860: PUSH
3861: CALL_OW 44
3865: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3866: LD_VAR 0 3
3870: PPUSH
3871: LD_INT 92
3873: PPUSH
3874: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3878: LD_ADDR_EXP 44
3882: PUSH
3883: LD_EXP 44
3887: PUSH
3888: LD_VAR 0 3
3892: UNION
3893: ST_TO_ADDR
// end ;
3894: GO 3840
3896: POP
3897: POP
// for i := 1 to 2 do
3898: LD_ADDR_VAR 0 2
3902: PUSH
3903: DOUBLE
3904: LD_INT 1
3906: DEC
3907: ST_TO_ADDR
3908: LD_INT 2
3910: PUSH
3911: FOR_TO
3912: IFFALSE 3967
// begin PrepareHuman ( false , 4 , 3 ) ;
3914: LD_INT 0
3916: PPUSH
3917: LD_INT 4
3919: PPUSH
3920: LD_INT 3
3922: PPUSH
3923: CALL_OW 380
// un := CreateHuman ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: LD_INT 83
3944: PPUSH
3945: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3949: LD_ADDR_EXP 44
3953: PUSH
3954: LD_EXP 44
3958: PUSH
3959: LD_VAR 0 3
3963: UNION
3964: ST_TO_ADDR
// end ;
3965: GO 3911
3967: POP
3968: POP
// for i := 1 to 5 do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: DOUBLE
3975: LD_INT 1
3977: DEC
3978: ST_TO_ADDR
3979: LD_INT 5
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4040
// begin PrepareHuman ( false , 1 , 3 ) ;
3985: LD_INT 0
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: LD_INT 3
3993: PPUSH
3994: CALL_OW 380
// un := CreateHuman ;
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: CALL_OW 44
4007: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 4
4017: PPUSH
4018: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
4022: LD_ADDR_EXP 46
4026: PUSH
4027: LD_EXP 46
4031: PUSH
4032: LD_VAR 0 3
4036: UNION
4037: ST_TO_ADDR
// end ;
4038: GO 3982
4040: POP
4041: POP
// russianCargo := [ ] ;
4042: LD_ADDR_EXP 49
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// for i := 1 to 2 do
4049: LD_ADDR_VAR 0 2
4053: PUSH
4054: DOUBLE
4055: LD_INT 1
4057: DEC
4058: ST_TO_ADDR
4059: LD_INT 2
4061: PUSH
4062: FOR_TO
4063: IFFALSE 4195
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
4065: LD_INT 6
4067: PPUSH
4068: LD_INT 3
4070: PPUSH
4071: LD_INT 21
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_INT 1
4079: PPUSH
4080: LD_INT 51
4082: PPUSH
4083: LD_INT 100
4085: PPUSH
4086: CALL 429 0 7
// un := CreateVehicle ;
4090: LD_ADDR_VAR 0 3
4094: PUSH
4095: CALL_OW 45
4099: ST_TO_ADDR
// russianCargo := russianCargo union un ;
4100: LD_ADDR_EXP 49
4104: PUSH
4105: LD_EXP 49
4109: PUSH
4110: LD_VAR 0 3
4114: UNION
4115: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
4116: LD_VAR 0 3
4120: PPUSH
4121: LD_INT 2
4123: PPUSH
4124: LD_INT 100
4126: PPUSH
4127: CALL_OW 290
// SetDir ( un , 4 ) ;
4131: LD_VAR 0 3
4135: PPUSH
4136: LD_INT 4
4138: PPUSH
4139: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 147
4150: PPUSH
4151: LD_INT 103
4153: PPUSH
4154: LD_INT 4
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
4164: LD_INT 0
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: LD_OWVAR 67
4174: PPUSH
4175: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
4179: CALL_OW 44
4183: PPUSH
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 52
// end ;
4193: GO 4062
4195: POP
4196: POP
// uc_side := 3 ;
4197: LD_ADDR_OWVAR 20
4201: PUSH
4202: LD_INT 3
4204: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4205: LD_ADDR_EXP 43
4209: PUSH
4210: LD_STRING Burlak
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: LD_STRING 
4218: PPUSH
4219: CALL 366 0 3
4223: ST_TO_ADDR
// for i := 1 to 5 do
4224: LD_ADDR_VAR 0 2
4228: PUSH
4229: DOUBLE
4230: LD_INT 1
4232: DEC
4233: ST_TO_ADDR
4234: LD_INT 5
4236: PUSH
4237: FOR_TO
4238: IFFALSE 4331
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_OWVAR 67
4250: PUSH
4251: LD_INT 1
4253: PLUS
4254: PPUSH
4255: CALL_OW 380
// un := CreateHuman ;
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: CALL_OW 44
4268: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 30
4286: PUSH
4287: LD_INT 32
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PPUSH
4298: CALL_OW 69
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: PPUSH
4309: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4313: LD_ADDR_EXP 45
4317: PUSH
4318: LD_EXP 45
4322: PUSH
4323: LD_VAR 0 3
4327: UNION
4328: ST_TO_ADDR
// end ;
4329: GO 4237
4331: POP
4332: POP
// for i := 1 to 2 do
4333: LD_ADDR_VAR 0 2
4337: PUSH
4338: DOUBLE
4339: LD_INT 1
4341: DEC
4342: ST_TO_ADDR
4343: LD_INT 2
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4438
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4349: LD_INT 0
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: LD_OWVAR 67
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: CALL_OW 380
// un := CreateHuman ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 44
4377: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 30
4395: PUSH
4396: LD_INT 5
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: PPUSH
4416: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4420: LD_ADDR_EXP 45
4424: PUSH
4425: LD_EXP 45
4429: PUSH
4430: LD_VAR 0 3
4434: UNION
4435: ST_TO_ADDR
// end ;
4436: GO 4346
4438: POP
4439: POP
// for i := 1 to 2 do
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: DOUBLE
4446: LD_INT 1
4448: DEC
4449: ST_TO_ADDR
4450: LD_INT 2
4452: PUSH
4453: FOR_TO
4454: IFFALSE 4541
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4456: LD_INT 0
4458: PPUSH
4459: LD_INT 4
4461: PPUSH
4462: LD_OWVAR 67
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4481: LD_VAR 0 3
4485: PPUSH
4486: LD_INT 22
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 30
4498: PUSH
4499: LD_INT 7
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 1
4517: ARRAY
4518: PPUSH
4519: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4523: LD_ADDR_EXP 45
4527: PUSH
4528: LD_EXP 45
4532: PUSH
4533: LD_VAR 0 3
4537: UNION
4538: ST_TO_ADDR
// end ;
4539: GO 4453
4541: POP
4542: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4543: LD_INT 0
4545: PPUSH
4546: LD_INT 2
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 380
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4568: LD_VAR 0 3
4572: PPUSH
4573: LD_INT 106
4575: PPUSH
4576: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4580: LD_ADDR_EXP 45
4584: PUSH
4585: LD_EXP 45
4589: PUSH
4590: LD_VAR 0 3
4594: UNION
4595: ST_TO_ADDR
// for i := 1 to 3 do
4596: LD_ADDR_VAR 0 2
4600: PUSH
4601: DOUBLE
4602: LD_INT 1
4604: DEC
4605: ST_TO_ADDR
4606: LD_INT 3
4608: PUSH
4609: FOR_TO
4610: IFFALSE 4732
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4612: LD_ADDR_VAR 0 6
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_INT 3
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 30
4629: PUSH
4630: LD_INT 31
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PPUSH
4641: CALL_OW 69
4645: PUSH
4646: LD_VAR 0 2
4650: ARRAY
4651: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4652: LD_INT 0
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: LD_OWVAR 67
4662: PPUSH
4663: CALL_OW 380
// un := CreateHuman ;
4667: LD_ADDR_VAR 0 3
4671: PUSH
4672: CALL_OW 44
4676: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_VAR 0 6
4686: PPUSH
4687: CALL_OW 254
4691: PUSH
4692: LD_INT 3
4694: PLUS
4695: PPUSH
4696: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4700: LD_VAR 0 3
4704: PPUSH
4705: LD_VAR 0 6
4709: PPUSH
4710: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4714: LD_ADDR_EXP 45
4718: PUSH
4719: LD_EXP 45
4723: PUSH
4724: LD_VAR 0 3
4728: UNION
4729: ST_TO_ADDR
// end ;
4730: GO 4609
4732: POP
4733: POP
// if Difficulty > 1 then
4734: LD_OWVAR 67
4738: PUSH
4739: LD_INT 1
4741: GREATER
4742: IFFALSE 4817
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PPUSH
4755: LD_INT 23
4757: PPUSH
4758: LD_INT 1
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: LD_INT 44
4766: PPUSH
4767: LD_INT 100
4769: PPUSH
4770: CALL 429 0 7
4774: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: LD_INT 73
4782: PPUSH
4783: LD_INT 110
4785: PPUSH
4786: LD_INT 0
4788: PPUSH
4789: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
4793: LD_INT 0
4795: PPUSH
4796: LD_INT 3
4798: PPUSH
4799: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
4803: CALL_OW 44
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
4817: LD_ADDR_EXP 48
4821: PUSH
4822: EMPTY
4823: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 ] [ Difficulty ] do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 6
4836: PUSH
4837: LD_INT 7
4839: PUSH
4840: LD_INT 8
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_OWVAR 67
4852: ARRAY
4853: PUSH
4854: FOR_TO
4855: IFFALSE 5079
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 3
4862: PPUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 23
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 2
4877: PUSH
4878: LD_INT 2
4880: MOD
4881: PUSH
4882: LD_INT 1
4884: PLUS
4885: ARRAY
4886: PPUSH
4887: LD_INT 1
4889: PPUSH
4890: LD_INT 1
4892: PPUSH
4893: LD_INT 43
4895: PUSH
4896: LD_INT 44
4898: PUSH
4899: LD_INT 42
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: LD_VAR 0 2
4911: PUSH
4912: LD_INT 3
4914: MOD
4915: PUSH
4916: LD_INT 1
4918: PLUS
4919: ARRAY
4920: PPUSH
4921: LD_INT 100
4923: PPUSH
4924: CALL 429 0 7
// un := CreateVehicle ;
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: CALL_OW 45
4937: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4938: LD_VAR 0 3
4942: PPUSH
4943: LD_INT 0
4945: PUSH
4946: LD_INT 5
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 1
4955: PPUSH
4956: LD_INT 2
4958: PPUSH
4959: CALL_OW 12
4963: ARRAY
4964: PPUSH
4965: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4969: LD_ADDR_EXP 48
4973: PUSH
4974: LD_EXP 48
4978: PUSH
4979: LD_VAR 0 3
4983: UNION
4984: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4985: LD_VAR 0 3
4989: PPUSH
4990: LD_INT 127
4992: PPUSH
4993: LD_INT 89
4995: PPUSH
4996: LD_INT 7
4998: PPUSH
4999: LD_INT 0
5001: PPUSH
5002: CALL_OW 50
// uc_side := 3 ;
5006: LD_ADDR_OWVAR 20
5010: PUSH
5011: LD_INT 3
5013: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
5014: LD_INT 0
5016: PPUSH
5017: LD_INT 3
5019: PPUSH
5020: LD_INT 3
5022: PPUSH
5023: CALL_OW 380
// un := CreateHuman ;
5027: LD_ADDR_VAR 0 3
5031: PUSH
5032: CALL_OW 44
5036: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5037: LD_ADDR_EXP 48
5041: PUSH
5042: LD_EXP 48
5046: PUSH
5047: LD_VAR 0 3
5051: UNION
5052: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_EXP 48
5062: PUSH
5063: LD_EXP 48
5067: PUSH
5068: LD_INT 1
5070: MINUS
5071: ARRAY
5072: PPUSH
5073: CALL_OW 52
// end ;
5077: GO 4854
5079: POP
5080: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 3
5093: PUSH
5094: LD_INT 4
5096: PUSH
5097: LD_INT 5
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: LD_OWVAR 67
5109: ARRAY
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5178
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5114: LD_INT 0
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_OWVAR 67
5124: PPUSH
5125: CALL_OW 380
// un := CreateHuman ;
5129: LD_ADDR_VAR 0 3
5133: PUSH
5134: CALL_OW 44
5138: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
5139: LD_ADDR_EXP 48
5143: PUSH
5144: LD_EXP 48
5148: PUSH
5149: LD_VAR 0 3
5153: UNION
5154: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
5155: LD_VAR 0 3
5159: PPUSH
5160: LD_INT 91
5162: PPUSH
5163: LD_INT 60
5165: PPUSH
5166: LD_INT 3
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 50
// end ;
5176: GO 5111
5178: POP
5179: POP
// end ;
5180: LD_VAR 0 1
5184: RET
// every 0 0$3 do var i ;
5185: GO 5187
5187: DISABLE
5188: LD_INT 0
5190: PPUSH
// begin for i := 1 to 4 do
5191: LD_ADDR_VAR 0 1
5195: PUSH
5196: DOUBLE
5197: LD_INT 1
5199: DEC
5200: ST_TO_ADDR
5201: LD_INT 4
5203: PUSH
5204: FOR_TO
5205: IFFALSE 5224
// ComExitBuilding ( grishkoSquad [ i ] ) ;
5207: LD_EXP 46
5211: PUSH
5212: LD_VAR 0 1
5216: ARRAY
5217: PPUSH
5218: CALL_OW 122
5222: GO 5204
5224: POP
5225: POP
// wait ( 3 ) ;
5226: LD_INT 3
5228: PPUSH
5229: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
5233: LD_EXP 46
5237: PUSH
5238: LD_INT 1
5240: ARRAY
5241: PPUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 6
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 31
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: LD_EXP 46
5275: PUSH
5276: LD_INT 1
5278: ARRAY
5279: PPUSH
5280: CALL_OW 74
5284: PPUSH
5285: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
5289: LD_EXP 46
5293: PUSH
5294: LD_INT 2
5296: ARRAY
5297: PPUSH
5298: LD_INT 211
5300: PPUSH
5301: LD_INT 107
5303: PPUSH
5304: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
5308: LD_EXP 46
5312: PUSH
5313: LD_INT 2
5315: ARRAY
5316: PPUSH
5317: LD_INT 209
5319: PPUSH
5320: LD_INT 106
5322: PPUSH
5323: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5327: LD_EXP 46
5331: PUSH
5332: LD_INT 3
5334: ARRAY
5335: PPUSH
5336: LD_INT 209
5338: PPUSH
5339: LD_INT 103
5341: PPUSH
5342: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5346: LD_EXP 46
5350: PUSH
5351: LD_INT 3
5353: ARRAY
5354: PPUSH
5355: LD_INT 209
5357: PPUSH
5358: LD_INT 106
5360: PPUSH
5361: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5365: LD_EXP 46
5369: PUSH
5370: LD_INT 4
5372: ARRAY
5373: PPUSH
5374: LD_INT 227
5376: PPUSH
5377: LD_INT 117
5379: PPUSH
5380: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5384: LD_EXP 46
5388: PUSH
5389: LD_INT 4
5391: ARRAY
5392: PPUSH
5393: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5397: LD_INT 700
5399: PPUSH
5400: CALL_OW 67
// for i := 3 downto 2 do
5404: LD_ADDR_VAR 0 1
5408: PUSH
5409: DOUBLE
5410: LD_INT 3
5412: INC
5413: ST_TO_ADDR
5414: LD_INT 2
5416: PUSH
5417: FOR_DOWNTO
5418: IFFALSE 5585
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5420: LD_EXP 46
5424: PUSH
5425: LD_VAR 0 1
5429: ARRAY
5430: PPUSH
5431: LD_INT 200
5433: PPUSH
5434: LD_INT 91
5436: PPUSH
5437: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5441: LD_EXP 46
5445: PUSH
5446: LD_VAR 0 1
5450: ARRAY
5451: PPUSH
5452: LD_INT 210
5454: PPUSH
5455: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5459: LD_EXP 46
5463: PUSH
5464: LD_VAR 0 1
5468: ARRAY
5469: PPUSH
5470: LD_INT 224
5472: PPUSH
5473: LD_INT 93
5475: PPUSH
5476: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5480: LD_EXP 46
5484: PUSH
5485: LD_VAR 0 1
5489: ARRAY
5490: PPUSH
5491: LD_INT 210
5493: PPUSH
5494: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5498: LD_EXP 46
5502: PUSH
5503: LD_VAR 0 1
5507: ARRAY
5508: PPUSH
5509: LD_INT 239
5511: PPUSH
5512: LD_INT 123
5514: PPUSH
5515: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5519: LD_EXP 46
5523: PUSH
5524: LD_VAR 0 1
5528: ARRAY
5529: PPUSH
5530: LD_INT 210
5532: PPUSH
5533: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5537: LD_EXP 46
5541: PUSH
5542: LD_VAR 0 1
5546: ARRAY
5547: PPUSH
5548: LD_INT 212
5550: PPUSH
5551: LD_INT 105
5553: PPUSH
5554: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5558: LD_EXP 46
5562: PUSH
5563: LD_VAR 0 1
5567: ARRAY
5568: PPUSH
5569: LD_INT 700
5571: PPUSH
5572: CALL_OW 202
// wait ( 0 0$30 ) ;
5576: LD_INT 1050
5578: PPUSH
5579: CALL_OW 67
// end ;
5583: GO 5417
5585: POP
5586: POP
// until not activeGrishkoAI ;
5587: LD_EXP 10
5591: NOT
5592: IFFALSE 5397
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5594: LD_EXP 46
5598: PPUSH
5599: LD_INT 221
5601: PPUSH
5602: LD_INT 110
5604: PPUSH
5605: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5609: LD_EXP 46
5613: PPUSH
5614: LD_INT 228
5616: PPUSH
5617: LD_INT 115
5619: PPUSH
5620: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5624: LD_EXP 46
5628: PPUSH
5629: CALL_OW 200
// end ;
5633: PPOPN 1
5635: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5636: LD_EXP 12
5640: IFFALSE 6382
5642: GO 5644
5644: DISABLE
5645: LD_INT 0
5647: PPUSH
5648: PPUSH
5649: PPUSH
5650: PPUSH
// begin uc_side := 6 ;
5651: LD_ADDR_OWVAR 20
5655: PUSH
5656: LD_INT 6
5658: ST_TO_ADDR
// uc_nation := 3 ;
5659: LD_ADDR_OWVAR 21
5663: PUSH
5664: LD_INT 3
5666: ST_TO_ADDR
// for i := 1 to 3 do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_INT 3
5679: PUSH
5680: FOR_TO
5681: IFFALSE 5790
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5683: LD_INT 0
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: LD_INT 2
5691: PUSH
5692: LD_INT 3
5694: PUSH
5695: LD_INT 4
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_OWVAR 67
5707: ARRAY
5708: PPUSH
5709: CALL_OW 380
// un := CreateHuman ;
5713: LD_ADDR_VAR 0 1
5717: PUSH
5718: CALL_OW 44
5722: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5723: LD_ADDR_EXP 47
5727: PUSH
5728: LD_EXP 47
5732: PUSH
5733: LD_VAR 0 1
5737: UNION
5738: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5739: LD_VAR 0 1
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_INT 11
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 210
5773: PPUSH
5774: LD_INT 159
5776: PPUSH
5777: CALL_OW 111
// wait ( 0 0$2 ) ;
5781: LD_INT 70
5783: PPUSH
5784: CALL_OW 67
// end ;
5788: GO 5680
5790: POP
5791: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: LD_INT 172
5799: PUSH
5800: LD_INT 76
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 150
5809: PUSH
5810: LD_INT 38
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 148
5819: PUSH
5820: LD_INT 9
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 165
5829: PUSH
5830: LD_INT 38
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 191
5845: PUSH
5846: LD_INT 77
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: LD_INT 168
5855: PUSH
5856: LD_INT 42
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 166
5865: PUSH
5866: LD_INT 11
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 151
5875: PUSH
5876: LD_INT 12
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 221
5891: PUSH
5892: LD_INT 88
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 217
5901: PUSH
5902: LD_INT 64
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: LD_INT 232
5911: PUSH
5912: LD_INT 66
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 200
5921: PUSH
5922: LD_INT 56
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5940: LD_INT 35
5942: PPUSH
5943: CALL_OW 67
// for i := russianPatrol downto 1 do
5947: LD_ADDR_VAR 0 2
5951: PUSH
5952: DOUBLE
5953: LD_EXP 47
5957: INC
5958: ST_TO_ADDR
5959: LD_INT 1
5961: PUSH
5962: FOR_DOWNTO
5963: IFFALSE 6346
// begin if IsDead ( russianPatrol [ i ] ) then
5965: LD_EXP 47
5969: PUSH
5970: LD_VAR 0 2
5974: ARRAY
5975: PPUSH
5976: CALL_OW 301
5980: IFFALSE 5984
// continue ;
5982: GO 5962
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5984: LD_EXP 47
5988: PUSH
5989: LD_VAR 0 2
5993: ARRAY
5994: PPUSH
5995: CALL_OW 256
5999: PUSH
6000: LD_INT 990
6002: LESS
6003: PUSH
6004: LD_EXP 47
6008: PUSH
6009: LD_VAR 0 2
6013: ARRAY
6014: PPUSH
6015: CALL_OW 110
6019: PUSH
6020: LD_INT 1
6022: EQUAL
6023: AND
6024: IFFALSE 6044
// SetTag ( russianPatrol [ i ] , 2 ) ;
6026: LD_EXP 47
6030: PUSH
6031: LD_VAR 0 2
6035: ARRAY
6036: PPUSH
6037: LD_INT 2
6039: PPUSH
6040: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
6044: LD_EXP 47
6048: PUSH
6049: LD_VAR 0 2
6053: ARRAY
6054: PPUSH
6055: CALL_OW 110
6059: PUSH
6060: LD_INT 2
6062: EQUAL
6063: IFFALSE 6130
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
6065: LD_EXP 47
6069: PUSH
6070: LD_VAR 0 2
6074: ARRAY
6075: PPUSH
6076: LD_INT 166
6078: PPUSH
6079: LD_INT 101
6081: PPUSH
6082: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
6086: LD_EXP 47
6090: PUSH
6091: LD_VAR 0 2
6095: ARRAY
6096: PPUSH
6097: LD_INT 71
6099: PPUSH
6100: CALL_OW 296
6104: PUSH
6105: LD_INT 10
6107: LESS
6108: IFFALSE 6128
// SetTag ( russianPatrol [ i ] , 3 ) ;
6110: LD_EXP 47
6114: PUSH
6115: LD_VAR 0 2
6119: ARRAY
6120: PPUSH
6121: LD_INT 3
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5962
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
6130: LD_EXP 47
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: CALL_OW 110
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: IFFALSE 6244
// begin spottedByPatrol := true ;
6151: LD_ADDR_EXP 7
6155: PUSH
6156: LD_INT 1
6158: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
6159: LD_EXP 47
6163: PUSH
6164: LD_VAR 0 2
6168: ARRAY
6169: PPUSH
6170: CALL_OW 250
6174: PPUSH
6175: LD_EXP 47
6179: PUSH
6180: LD_VAR 0 2
6184: ARRAY
6185: PPUSH
6186: CALL_OW 251
6190: PPUSH
6191: LD_INT 2
6193: PPUSH
6194: LD_INT 6
6196: NEG
6197: PPUSH
6198: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
6202: LD_EXP 47
6206: PUSH
6207: LD_VAR 0 2
6211: ARRAY
6212: PPUSH
6213: CALL_OW 87
// DialogueOn ;
6217: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
6221: LD_EXP 25
6225: PPUSH
6226: LD_STRING DH-Spot-f-3
6228: PPUSH
6229: CALL_OW 88
// DialogueOff ;
6233: CALL_OW 7
// YouLost ( Spotted ) ;
6237: LD_STRING Spotted
6239: PPUSH
6240: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
6244: LD_EXP 47
6248: PUSH
6249: LD_VAR 0 2
6253: ARRAY
6254: PPUSH
6255: CALL_OW 314
6259: NOT
6260: IFFALSE 6344
// for j in patrol [ i ] do
6262: LD_ADDR_VAR 0 3
6266: PUSH
6267: LD_VAR 0 4
6271: PUSH
6272: LD_VAR 0 2
6276: ARRAY
6277: PUSH
6278: FOR_IN
6279: IFFALSE 6342
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
6281: LD_EXP 47
6285: PUSH
6286: LD_VAR 0 2
6290: ARRAY
6291: PPUSH
6292: LD_INT 35
6294: PPUSH
6295: LD_INT 175
6297: PPUSH
6298: CALL_OW 12
6302: PPUSH
6303: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
6307: LD_EXP 47
6311: PUSH
6312: LD_VAR 0 2
6316: ARRAY
6317: PPUSH
6318: LD_VAR 0 3
6322: PUSH
6323: LD_INT 1
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 2
6334: ARRAY
6335: PPUSH
6336: CALL_OW 174
// end ;
6340: GO 6278
6342: POP
6343: POP
// end ;
6344: GO 5962
6346: POP
6347: POP
// until not russianPatrol or russianAlert ;
6348: LD_EXP 47
6352: NOT
6353: PUSH
6354: LD_EXP 9
6358: OR
6359: IFFALSE 5940
// if russianPatrol then
6361: LD_EXP 47
6365: IFFALSE 6382
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
6367: LD_EXP 47
6371: PPUSH
6372: LD_INT 161
6374: PPUSH
6375: LD_INT 107
6377: PPUSH
6378: CALL_OW 114
// end ;
6382: PPOPN 4
6384: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
6385: LD_EXP 6
6389: PUSH
6390: LD_EXP 13
6394: NOT
6395: AND
6396: IFFALSE 6882
6398: GO 6400
6400: DISABLE
6401: LD_INT 0
6403: PPUSH
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
// begin enable ;
6408: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_EXP 48
6418: PPUSH
6419: LD_INT 21
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 72
6433: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
6434: LD_ADDR_VAR 0 4
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 69
6453: ST_TO_ADDR
// for i in filter do
6454: LD_ADDR_VAR 0 1
6458: PUSH
6459: LD_VAR 0 2
6463: PUSH
6464: FOR_IN
6465: IFFALSE 6880
// begin tmp := IsDrivenBy ( i ) ;
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_VAR 0 1
6476: PPUSH
6477: CALL_OW 311
6481: ST_TO_ADDR
// if not tmp then
6482: LD_VAR 0 3
6486: NOT
6487: IFFALSE 6491
// continue ;
6489: GO 6464
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 261
6500: PUSH
6501: LD_INT 90
6503: GREATER
6504: PUSH
6505: LD_VAR 0 1
6509: PPUSH
6510: CALL_OW 110
6514: PUSH
6515: LD_INT 2
6517: EQUAL
6518: AND
6519: IFFALSE 6535
// SetTag ( i , 0 ) else
6521: LD_VAR 0 1
6525: PPUSH
6526: LD_INT 0
6528: PPUSH
6529: CALL_OW 109
6533: GO 6631
// if GetTag ( i ) = 2 then
6535: LD_VAR 0 1
6539: PPUSH
6540: CALL_OW 110
6544: PUSH
6545: LD_INT 2
6547: EQUAL
6548: IFFALSE 6631
// begin x := rand ( 1 , 2 ) ;
6550: LD_ADDR_VAR 0 5
6554: PUSH
6555: LD_INT 1
6557: PPUSH
6558: LD_INT 2
6560: PPUSH
6561: CALL_OW 12
6565: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6566: LD_VAR 0 1
6570: PPUSH
6571: LD_EXP 49
6575: PUSH
6576: LD_VAR 0 5
6580: ARRAY
6581: PPUSH
6582: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6586: LD_EXP 49
6590: PUSH
6591: LD_VAR 0 5
6595: ARRAY
6596: PPUSH
6597: LD_INT 2
6599: PPUSH
6600: CALL_OW 289
6604: PUSH
6605: LD_INT 20
6607: LESS
6608: IFFALSE 6631
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6610: LD_EXP 49
6614: PUSH
6615: LD_VAR 0 5
6619: ARRAY
6620: PPUSH
6621: LD_INT 2
6623: PPUSH
6624: LD_INT 100
6626: PPUSH
6627: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6631: LD_VAR 0 1
6635: PPUSH
6636: CALL_OW 256
6640: PUSH
6641: LD_INT 600
6643: GREATEREQUAL
6644: PUSH
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 110
6654: NOT
6655: AND
6656: IFFALSE 6682
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6658: LD_VAR 0 1
6662: PPUSH
6663: LD_VAR 0 4
6667: PPUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 74
6677: PPUSH
6678: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 256
6691: PUSH
6692: LD_INT 600
6694: LESS
6695: PUSH
6696: LD_VAR 0 1
6700: PPUSH
6701: CALL_OW 110
6705: NOT
6706: AND
6707: IFFALSE 6736
// begin SetTag ( i , 1 ) ;
6709: LD_VAR 0 1
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: LD_INT 62
6728: PPUSH
6729: LD_INT 22
6731: PPUSH
6732: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6736: LD_VAR 0 1
6740: PPUSH
6741: CALL_OW 110
6745: PUSH
6746: LD_INT 1
6748: EQUAL
6749: PUSH
6750: LD_VAR 0 1
6754: PPUSH
6755: LD_INT 62
6757: PPUSH
6758: LD_INT 22
6760: PPUSH
6761: CALL_OW 297
6765: PUSH
6766: LD_INT 6
6768: LESS
6769: AND
6770: PUSH
6771: LD_VAR 0 3
6775: AND
6776: IFFALSE 6878
// begin ComExitVehicle ( tmp ) ;
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6787: LD_VAR 0 3
6791: PPUSH
6792: LD_VAR 0 1
6796: PPUSH
6797: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6801: LD_INT 35
6803: PPUSH
6804: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6808: LD_VAR 0 1
6812: PPUSH
6813: CALL_OW 256
6817: PUSH
6818: LD_INT 1000
6820: EQUAL
6821: IFFALSE 6801
// ComEnterUnit ( tmp , i ) ;
6823: LD_VAR 0 3
6827: PPUSH
6828: LD_VAR 0 1
6832: PPUSH
6833: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 261
6846: PUSH
6847: LD_INT 90
6849: LESSEQUAL
6850: IFFALSE 6866
// SetTag ( i , 2 ) else
6852: LD_VAR 0 1
6856: PPUSH
6857: LD_INT 2
6859: PPUSH
6860: CALL_OW 109
6864: GO 6878
// SetTag ( i , 0 ) ;
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: CALL_OW 109
// end ; end ;
6878: GO 6464
6880: POP
6881: POP
// end ;
6882: PPOPN 5
6884: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6885: LD_EXP 20
6889: IFFALSE 7112
6891: GO 6893
6893: DISABLE
6894: LD_INT 0
6896: PPUSH
6897: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6898: LD_EXP 49
6902: PPUSH
6903: LD_INT 79
6905: PPUSH
6906: LD_INT 155
6908: PPUSH
6909: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6913: LD_EXP 49
6917: PPUSH
6918: LD_INT 16
6920: PPUSH
6921: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_EXP 48
6934: PPUSH
6935: LD_INT 50
6937: PUSH
6938: EMPTY
6939: LIST
6940: PPUSH
6941: CALL_OW 72
6945: ST_TO_ADDR
// for i in tmp do
6946: LD_ADDR_VAR 0 1
6950: PUSH
6951: LD_VAR 0 2
6955: PUSH
6956: FOR_IN
6957: IFFALSE 6991
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 123
6966: PPUSH
6967: LD_INT 60
6969: PPUSH
6970: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6974: LD_VAR 0 1
6978: PPUSH
6979: LD_INT 153
6981: PPUSH
6982: LD_INT 103
6984: PPUSH
6985: CALL_OW 174
// end ;
6989: GO 6956
6991: POP
6992: POP
// repeat wait ( 0 0$1 ) ;
6993: LD_INT 35
6995: PPUSH
6996: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 48
7009: PPUSH
7010: LD_INT 50
7012: PUSH
7013: EMPTY
7014: LIST
7015: PPUSH
7016: CALL_OW 72
7020: ST_TO_ADDR
// for i in tmp do
7021: LD_ADDR_VAR 0 1
7025: PUSH
7026: LD_VAR 0 2
7030: PUSH
7031: FOR_IN
7032: IFFALSE 7103
// if not HasTask ( i ) then
7034: LD_VAR 0 1
7038: PPUSH
7039: CALL_OW 314
7043: NOT
7044: IFFALSE 7101
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
7046: LD_VAR 0 1
7050: PPUSH
7051: LD_INT 81
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 3
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 69
7086: PPUSH
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL_OW 74
7096: PPUSH
7097: CALL_OW 115
7101: GO 7031
7103: POP
7104: POP
7105: LD_VAR 0 2
7109: NOT
7110: IFFALSE 6993
// end ;
7112: PPOPN 2
7114: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
7115: LD_INT 22
7117: PUSH
7118: LD_INT 3
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 32
7127: PUSH
7128: LD_INT 1
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: IFFALSE 7222
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
// begin enable ;
7151: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
7152: LD_ADDR_VAR 0 1
7156: PUSH
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 32
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: FOR_IN
7187: IFFALSE 7220
// if GetFuel ( i ) < 1 then
7189: LD_VAR 0 1
7193: PPUSH
7194: CALL_OW 261
7198: PUSH
7199: LD_INT 1
7201: LESS
7202: IFFALSE 7218
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 311
7213: PPUSH
7214: CALL_OW 121
7218: GO 7186
7220: POP
7221: POP
// end ; end_of_file
7222: PPOPN 1
7224: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
7225: LD_INT 0
7227: PPUSH
7228: PPUSH
7229: PPUSH
// SetBName ( omikron , omikron ) ;
7230: LD_INT 64
7232: PPUSH
7233: LD_STRING omikron
7235: PPUSH
7236: CALL_OW 500
// uc_side := 4 ;
7240: LD_ADDR_OWVAR 20
7244: PUSH
7245: LD_INT 4
7247: ST_TO_ADDR
// uc_nation := 1 ;
7248: LD_ADDR_OWVAR 21
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// omicronSquad := [ ] ;
7256: LD_ADDR_EXP 51
7260: PUSH
7261: EMPTY
7262: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_INT 22
7270: PUSH
7271: LD_INT 4
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 30
7283: PUSH
7284: LD_INT 32
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 30
7293: PUSH
7294: LD_INT 31
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PUSH
7315: FOR_IN
7316: IFFALSE 7373
// begin PrepareHuman ( false , 1 , 1 ) ;
7318: LD_INT 0
7320: PPUSH
7321: LD_INT 1
7323: PPUSH
7324: LD_INT 1
7326: PPUSH
7327: CALL_OW 380
// un := CreateHuman ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7341: LD_ADDR_EXP 51
7345: PUSH
7346: LD_EXP 51
7350: PUSH
7351: LD_VAR 0 3
7355: UNION
7356: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
7357: LD_VAR 0 3
7361: PPUSH
7362: LD_VAR 0 2
7366: PPUSH
7367: CALL_OW 52
// end ;
7371: GO 7315
7373: POP
7374: POP
// for i := 1 to 3 do
7375: LD_ADDR_VAR 0 2
7379: PUSH
7380: DOUBLE
7381: LD_INT 1
7383: DEC
7384: ST_TO_ADDR
7385: LD_INT 3
7387: PUSH
7388: FOR_TO
7389: IFFALSE 7444
// begin PrepareHuman ( false , 2 , 2 ) ;
7391: LD_INT 0
7393: PPUSH
7394: LD_INT 2
7396: PPUSH
7397: LD_INT 2
7399: PPUSH
7400: CALL_OW 380
// un := CreateHuman ;
7404: LD_ADDR_VAR 0 3
7408: PUSH
7409: CALL_OW 44
7413: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7414: LD_ADDR_EXP 51
7418: PUSH
7419: LD_EXP 51
7423: PUSH
7424: LD_VAR 0 3
7428: UNION
7429: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_INT 64
7437: PPUSH
7438: CALL_OW 52
// end ;
7442: GO 7388
7444: POP
7445: POP
// for i := 1 to 2 do
7446: LD_ADDR_VAR 0 2
7450: PUSH
7451: DOUBLE
7452: LD_INT 1
7454: DEC
7455: ST_TO_ADDR
7456: LD_INT 2
7458: PUSH
7459: FOR_TO
7460: IFFALSE 7599
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7462: LD_INT 4
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: LD_INT 2
7470: PPUSH
7471: LD_INT 2
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 3
7479: PPUSH
7480: LD_INT 100
7482: PPUSH
7483: CALL 429 0 7
// un := CreateVehicle ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: CALL_OW 45
7496: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7497: LD_ADDR_EXP 51
7501: PUSH
7502: LD_EXP 51
7506: PUSH
7507: LD_VAR 0 3
7511: UNION
7512: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7513: LD_VAR 0 3
7517: PPUSH
7518: LD_INT 28
7520: PPUSH
7521: LD_INT 37
7523: PPUSH
7524: LD_INT 6
7526: PPUSH
7527: LD_INT 0
7529: PPUSH
7530: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7534: LD_INT 0
7536: PPUSH
7537: LD_INT 3
7539: PPUSH
7540: LD_INT 2
7542: PPUSH
7543: CALL_OW 380
// un := CreateHuman ;
7547: LD_ADDR_VAR 0 3
7551: PUSH
7552: CALL_OW 44
7556: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7557: LD_ADDR_EXP 51
7561: PUSH
7562: LD_EXP 51
7566: PUSH
7567: LD_VAR 0 3
7571: UNION
7572: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7573: LD_VAR 0 3
7577: PPUSH
7578: LD_EXP 51
7582: PUSH
7583: LD_EXP 51
7587: PUSH
7588: LD_INT 1
7590: MINUS
7591: ARRAY
7592: PPUSH
7593: CALL_OW 52
// end ;
7597: GO 7459
7599: POP
7600: POP
// end ;
7601: LD_VAR 0 1
7605: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
// uc_side := 4 ;
7612: LD_ADDR_OWVAR 20
7616: PUSH
7617: LD_INT 4
7619: ST_TO_ADDR
// uc_nation := 1 ;
7620: LD_ADDR_OWVAR 21
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// tmp := [ ] ;
7628: LD_ADDR_VAR 0 4
7632: PUSH
7633: EMPTY
7634: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7635: LD_INT 4
7637: PPUSH
7638: LD_INT 1
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 1
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: LD_INT 4
7652: PPUSH
7653: LD_INT 77
7655: PPUSH
7656: CALL 429 0 7
// un := CreateVehicle ;
7660: LD_ADDR_VAR 0 3
7664: PUSH
7665: CALL_OW 45
7669: ST_TO_ADDR
// tmp := tmp union un ;
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PUSH
7680: LD_VAR 0 3
7684: UNION
7685: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7686: LD_VAR 0 3
7690: PPUSH
7691: LD_INT 2
7693: PPUSH
7694: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7698: LD_VAR 0 3
7702: PPUSH
7703: LD_INT 106
7705: PPUSH
7706: LD_INT 3
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7716: LD_INT 0
7718: PPUSH
7719: LD_INT 3
7721: PPUSH
7722: LD_INT 2
7724: PPUSH
7725: CALL_OW 380
// un := CreateHuman ;
7729: LD_ADDR_VAR 0 3
7733: PUSH
7734: CALL_OW 44
7738: ST_TO_ADDR
// tmp := tmp union un ;
7739: LD_ADDR_VAR 0 4
7743: PUSH
7744: LD_VAR 0 4
7748: PUSH
7749: LD_VAR 0 3
7753: UNION
7754: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7755: LD_VAR 0 3
7759: PPUSH
7760: LD_VAR 0 4
7764: PUSH
7765: LD_VAR 0 4
7769: PUSH
7770: LD_INT 1
7772: MINUS
7773: ARRAY
7774: PPUSH
7775: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7779: LD_VAR 0 3
7783: PPUSH
7784: LD_INT 109
7786: PPUSH
7787: LD_INT 9
7789: PPUSH
7790: CALL_OW 111
// wait ( 0 0$1 ) ;
7794: LD_INT 35
7796: PPUSH
7797: CALL_OW 67
// for i := 1 to 2 do
7801: LD_ADDR_VAR 0 2
7805: PUSH
7806: DOUBLE
7807: LD_INT 1
7809: DEC
7810: ST_TO_ADDR
7811: LD_INT 2
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7879
// begin PrepareHuman ( false , 1 , 2 ) ;
7817: LD_INT 0
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: CALL_OW 380
// un := CreateHuman ;
7830: LD_ADDR_VAR 0 3
7834: PUSH
7835: CALL_OW 44
7839: ST_TO_ADDR
// tmp := tmp union un ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_VAR 0 4
7849: PUSH
7850: LD_VAR 0 3
7854: UNION
7855: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7856: LD_VAR 0 3
7860: PPUSH
7861: LD_INT 105
7863: PPUSH
7864: LD_INT 2
7866: PPUSH
7867: LD_INT 2
7869: PPUSH
7870: LD_INT 0
7872: PPUSH
7873: CALL_OW 50
// end ;
7877: GO 7814
7879: POP
7880: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7881: LD_VAR 0 4
7885: PPUSH
7886: LD_INT 26
7888: PPUSH
7889: LD_INT 35
7891: PPUSH
7892: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7896: LD_INT 35
7898: PPUSH
7899: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_INT 50
7910: PUSH
7911: EMPTY
7912: LIST
7913: PPUSH
7914: CALL_OW 72
7918: NOT
7919: IFFALSE 7923
// exit ;
7921: GO 8050
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7923: LD_VAR 0 4
7927: PPUSH
7928: LD_INT 91
7930: PUSH
7931: LD_INT 64
7933: PUSH
7934: LD_INT 12
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 72
7946: PUSH
7947: LD_VAR 0 4
7951: EQUAL
7952: IFFALSE 7896
// omicronSquad := omicronSquad union tmp ;
7954: LD_ADDR_EXP 51
7958: PUSH
7959: LD_EXP 51
7963: PUSH
7964: LD_VAR 0 4
7968: UNION
7969: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7970: LD_ADDR_VAR 0 2
7974: PUSH
7975: LD_VAR 0 4
7979: PPUSH
7980: LD_INT 25
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 72
7994: PUSH
7995: FOR_IN
7996: IFFALSE 8048
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 4
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 30
8015: PUSH
8016: LD_INT 4
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PPUSH
8027: CALL_OW 69
8031: PPUSH
8032: LD_VAR 0 2
8036: PPUSH
8037: CALL_OW 74
8041: PPUSH
8042: CALL_OW 120
8046: GO 7995
8048: POP
8049: POP
// end ;
8050: LD_VAR 0 1
8054: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
8055: LD_EXP 13
8059: NOT
8060: IFFALSE 8631
8062: GO 8064
8064: DISABLE
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
// begin enable ;
8071: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: LD_INT 22
8079: PUSH
8080: LD_INT 4
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 21
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: LD_INT 3
8099: PUSH
8100: LD_INT 24
8102: PUSH
8103: LD_INT 1000
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 69
8123: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
8124: LD_ADDR_VAR 0 3
8128: PUSH
8129: LD_EXP 51
8133: PPUSH
8134: LD_INT 25
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 72
8148: ST_TO_ADDR
// if filter and tmp then
8149: LD_VAR 0 2
8153: PUSH
8154: LD_VAR 0 3
8158: AND
8159: IFFALSE 8232
// begin for i in tmp do
8161: LD_ADDR_VAR 0 1
8165: PUSH
8166: LD_VAR 0 3
8170: PUSH
8171: FOR_IN
8172: IFFALSE 8228
// if IsInUnit ( i ) then
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 310
8183: IFFALSE 8196
// ComExitBuilding ( i ) else
8185: LD_VAR 0 1
8189: PPUSH
8190: CALL_OW 122
8194: GO 8226
// if not HasTask ( i ) then
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 314
8205: NOT
8206: IFFALSE 8226
// ComRepairBuilding ( i , filter [ 1 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 2
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: CALL_OW 130
8226: GO 8171
8228: POP
8229: POP
// end else
8230: GO 8303
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
8232: LD_VAR 0 3
8236: PPUSH
8237: LD_INT 3
8239: PUSH
8240: LD_INT 54
8242: PUSH
8243: EMPTY
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PPUSH
8250: CALL_OW 72
8254: IFFALSE 8303
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
8256: LD_ADDR_VAR 0 1
8260: PUSH
8261: LD_VAR 0 3
8265: PPUSH
8266: LD_INT 3
8268: PUSH
8269: LD_INT 54
8271: PUSH
8272: EMPTY
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 72
8283: PUSH
8284: FOR_IN
8285: IFFALSE 8301
// ComEnterUnit ( i , omikron ) ;
8287: LD_VAR 0 1
8291: PPUSH
8292: LD_INT 64
8294: PPUSH
8295: CALL_OW 120
8299: GO 8284
8301: POP
8302: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
8303: LD_ADDR_VAR 0 2
8307: PUSH
8308: LD_EXP 51
8312: PPUSH
8313: LD_INT 21
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PPUSH
8323: CALL_OW 72
8327: ST_TO_ADDR
// if not filter then
8328: LD_VAR 0 2
8332: NOT
8333: IFFALSE 8337
// exit ;
8335: GO 8631
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
8337: LD_ADDR_VAR 0 4
8341: PUSH
8342: LD_INT 13
8344: PPUSH
8345: LD_INT 81
8347: PUSH
8348: LD_INT 4
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 70
8359: ST_TO_ADDR
// if enemy then
8360: LD_VAR 0 4
8364: IFFALSE 8631
// begin for i in filter do
8366: LD_ADDR_VAR 0 1
8370: PUSH
8371: LD_VAR 0 2
8375: PUSH
8376: FOR_IN
8377: IFFALSE 8629
// begin tmp := IsDrivenBy ( i ) ;
8379: LD_ADDR_VAR 0 3
8383: PUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL_OW 311
8393: ST_TO_ADDR
// if not tmp then
8394: LD_VAR 0 3
8398: NOT
8399: IFFALSE 8403
// continue ;
8401: GO 8376
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 256
8412: PUSH
8413: LD_INT 600
8415: GREATEREQUAL
8416: PUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: CALL_OW 110
8426: PUSH
8427: LD_INT 1
8429: NONEQUAL
8430: AND
8431: IFFALSE 8457
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8433: LD_VAR 0 1
8437: PPUSH
8438: LD_VAR 0 4
8442: PPUSH
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 74
8452: PPUSH
8453: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 256
8466: PUSH
8467: LD_INT 600
8469: LESS
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 110
8480: PUSH
8481: LD_INT 1
8483: NONEQUAL
8484: AND
8485: IFFALSE 8514
// begin SetTag ( i , 1 ) ;
8487: LD_VAR 0 1
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8499: LD_VAR 0 1
8503: PPUSH
8504: LD_INT 27
8506: PPUSH
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 110
8523: PUSH
8524: LD_INT 1
8526: EQUAL
8527: PUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_INT 27
8535: PPUSH
8536: LD_INT 35
8538: PPUSH
8539: CALL_OW 297
8543: PUSH
8544: LD_INT 6
8546: LESS
8547: AND
8548: PUSH
8549: LD_VAR 0 3
8553: AND
8554: IFFALSE 8627
// begin ComExitVehicle ( tmp ) ;
8556: LD_VAR 0 3
8560: PPUSH
8561: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8565: LD_VAR 0 3
8569: PPUSH
8570: LD_VAR 0 1
8574: PPUSH
8575: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8579: LD_INT 35
8581: PPUSH
8582: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 256
8595: PUSH
8596: LD_INT 1000
8598: EQUAL
8599: IFFALSE 8579
// ComEnterUnit ( tmp , i ) ;
8601: LD_VAR 0 3
8605: PPUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 120
// SetTag ( i , 0 ) ;
8615: LD_VAR 0 1
8619: PPUSH
8620: LD_INT 0
8622: PPUSH
8623: CALL_OW 109
// end ; end ;
8627: GO 8376
8629: POP
8630: POP
// end ; end ;
8631: PPOPN 4
8633: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8634: LD_EXP 13
8638: IFFALSE 8782
8640: GO 8642
8642: DISABLE
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8647: LD_ADDR_VAR 0 2
8651: PUSH
8652: LD_EXP 51
8656: PPUSH
8657: LD_INT 21
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 50
8669: PUSH
8670: EMPTY
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 72
8681: ST_TO_ADDR
// if not tmp then
8682: LD_VAR 0 2
8686: NOT
8687: IFFALSE 8691
// exit ;
8689: GO 8782
// repeat wait ( 0 0$1 ) ;
8691: LD_INT 35
8693: PPUSH
8694: CALL_OW 67
// for i in tmp do
8698: LD_ADDR_VAR 0 1
8702: PUSH
8703: LD_VAR 0 2
8707: PUSH
8708: FOR_IN
8709: IFFALSE 8773
// begin ComExit ( i ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: CALL 867 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8720: LD_VAR 0 1
8724: PPUSH
8725: LD_INT 14
8727: PPUSH
8728: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8732: LD_VAR 0 1
8736: PPUSH
8737: LD_INT 14
8739: PPUSH
8740: CALL_OW 308
8744: IFFALSE 8771
// begin tmp := tmp diff i ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: LD_VAR 0 2
8755: PUSH
8756: LD_VAR 0 1
8760: DIFF
8761: ST_TO_ADDR
// RemoveUnit ( i ) ;
8762: LD_VAR 0 1
8766: PPUSH
8767: CALL_OW 64
// end ; end ;
8771: GO 8708
8773: POP
8774: POP
// until not tmp ;
8775: LD_VAR 0 2
8779: NOT
8780: IFFALSE 8691
// end ; end_of_file
8782: PPOPN 2
8784: END
// export function Action ; var i , un , veh , tmp ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
8791: PPUSH
// InGameOn ;
8792: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8796: LD_INT 179
8798: PPUSH
8799: LD_INT 5
8801: PPUSH
8802: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_INT 2
8813: PPUSH
8814: LD_INT 2
8816: PPUSH
8817: LD_INT 12
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_INT 1
8825: PPUSH
8826: LD_INT 24
8828: PPUSH
8829: LD_INT 33
8831: PPUSH
8832: CALL 429 0 7
8836: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8837: LD_VAR 0 4
8841: PPUSH
8842: LD_INT 2
8844: PPUSH
8845: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8849: LD_VAR 0 4
8853: PPUSH
8854: LD_INT 178
8856: PPUSH
8857: LD_INT 2
8859: PPUSH
8860: LD_INT 0
8862: PPUSH
8863: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8867: LD_EXP 25
8871: PPUSH
8872: LD_VAR 0 4
8876: PPUSH
8877: CALL_OW 52
// if Kamil then
8881: LD_EXP 29
8885: IFFALSE 8920
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8887: LD_EXP 29
8891: PPUSH
8892: LD_INT 207
8894: PPUSH
8895: LD_INT 37
8897: PPUSH
8898: LD_INT 0
8900: PPUSH
8901: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8905: LD_EXP 29
8909: PPUSH
8910: LD_INT 211
8912: PPUSH
8913: LD_INT 38
8915: PPUSH
8916: CALL_OW 118
// end ; if Sophia then
8920: LD_EXP 31
8924: IFFALSE 8959
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8926: LD_EXP 31
8930: PPUSH
8931: LD_INT 209
8933: PPUSH
8934: LD_INT 40
8936: PPUSH
8937: LD_INT 0
8939: PPUSH
8940: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8944: LD_EXP 31
8948: PPUSH
8949: LD_INT 211
8951: PPUSH
8952: LD_INT 38
8954: PPUSH
8955: CALL_OW 118
// end ; if Givi then
8959: LD_EXP 26
8963: IFFALSE 8998
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8965: LD_EXP 26
8969: PPUSH
8970: LD_INT 201
8972: PPUSH
8973: LD_INT 34
8975: PPUSH
8976: LD_INT 0
8978: PPUSH
8979: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_INT 206
8990: PPUSH
8991: LD_INT 36
8993: PPUSH
8994: CALL_OW 118
// end ; if Ibrahim then
8998: LD_EXP 28
9002: IFFALSE 9037
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
9004: LD_EXP 28
9008: PPUSH
9009: LD_INT 202
9011: PPUSH
9012: LD_INT 39
9014: PPUSH
9015: LD_INT 0
9017: PPUSH
9018: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
9022: LD_EXP 28
9026: PPUSH
9027: LD_INT 206
9029: PPUSH
9030: LD_INT 36
9032: PPUSH
9033: CALL_OW 118
// end ; if Markov then
9037: LD_EXP 32
9041: IFFALSE 9128
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
9043: LD_ADDR_VAR 0 4
9047: PUSH
9048: LD_INT 2
9050: PPUSH
9051: LD_INT 2
9053: PPUSH
9054: LD_INT 13
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: LD_INT 1
9062: PPUSH
9063: LD_INT 25
9065: PPUSH
9066: LD_INT 80
9068: PUSH
9069: LD_INT 20
9071: PUSH
9072: LD_OWVAR 67
9076: MUL
9077: MINUS
9078: PPUSH
9079: CALL 429 0 7
9083: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
9084: LD_VAR 0 4
9088: PPUSH
9089: LD_INT 2
9091: PPUSH
9092: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
9096: LD_VAR 0 4
9100: PPUSH
9101: LD_INT 197
9103: PPUSH
9104: LD_INT 35
9106: PPUSH
9107: LD_INT 0
9109: PPUSH
9110: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
9114: LD_EXP 32
9118: PPUSH
9119: LD_VAR 0 4
9123: PPUSH
9124: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
9128: LD_ADDR_VAR 0 5
9132: PUSH
9133: LD_EXP 30
9137: PUSH
9138: LD_EXP 37
9142: UNION
9143: ST_TO_ADDR
// for i in tmp do
9144: LD_ADDR_VAR 0 2
9148: PUSH
9149: LD_VAR 0 5
9153: PUSH
9154: FOR_IN
9155: IFFALSE 9189
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
9157: LD_VAR 0 2
9161: PPUSH
9162: LD_INT 203
9164: PPUSH
9165: LD_INT 41
9167: PPUSH
9168: LD_INT 6
9170: PPUSH
9171: LD_INT 0
9173: PPUSH
9174: CALL_OW 50
// ComHold ( i ) ;
9178: LD_VAR 0 2
9182: PPUSH
9183: CALL_OW 140
// end ;
9187: GO 9154
9189: POP
9190: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
9191: LD_INT 22
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 25
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: NOT
9220: IFFALSE 9234
// SetClass ( Heike , 2 ) ;
9222: LD_EXP 25
9226: PPUSH
9227: LD_INT 2
9229: PPUSH
9230: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
9234: LD_EXP 25
9238: PPUSH
9239: LD_INT 183
9241: PPUSH
9242: LD_INT 12
9244: PPUSH
9245: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
9249: LD_EXP 25
9253: PPUSH
9254: LD_INT 188
9256: PPUSH
9257: LD_INT 20
9259: PPUSH
9260: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
9264: LD_EXP 25
9268: PPUSH
9269: LD_INT 191
9271: PPUSH
9272: LD_INT 25
9274: PPUSH
9275: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
9279: LD_EXP 25
9283: PPUSH
9284: LD_INT 203
9286: PPUSH
9287: LD_INT 29
9289: PPUSH
9290: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
9294: LD_EXP 25
9298: PPUSH
9299: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9303: LD_INT 35
9305: PPUSH
9306: CALL_OW 67
// until not IsInUnit ( Heike ) ;
9310: LD_EXP 25
9314: PPUSH
9315: CALL_OW 310
9319: NOT
9320: IFFALSE 9303
// CenterOnUnits ( Heike ) ;
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
9331: LD_ADDR_VAR 0 5
9335: PUSH
9336: LD_INT 22
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 21
9348: PUSH
9349: LD_INT 1
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: PUSH
9365: LD_EXP 25
9369: PUSH
9370: LD_EXP 32
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: DIFF
9379: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
9380: LD_VAR 0 5
9384: PPUSH
9385: LD_EXP 25
9389: PPUSH
9390: CALL_OW 119
// if Givi then
9394: LD_EXP 26
9398: IFFALSE 9416
// ComTurnUnit ( Heike , Givi ) else
9400: LD_EXP 25
9404: PPUSH
9405: LD_EXP 26
9409: PPUSH
9410: CALL_OW 119
9414: GO 9434
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9416: LD_EXP 25
9420: PPUSH
9421: LD_VAR 0 5
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9434: LD_EXP 25
9438: PPUSH
9439: LD_STRING DH-Start-1
9441: PPUSH
9442: CALL_OW 88
// if Givi then
9446: LD_EXP 26
9450: IFFALSE 9497
// begin Say ( Givi , DG-Start-2 ) ;
9452: LD_EXP 26
9456: PPUSH
9457: LD_STRING DG-Start-2
9459: PPUSH
9460: CALL_OW 88
// if not Mike then
9464: LD_EXP 27
9468: NOT
9469: IFFALSE 9495
// begin Say ( Givi , DG-Start-b-3 ) ;
9471: LD_EXP 26
9475: PPUSH
9476: LD_STRING DG-Start-b-3
9478: PPUSH
9479: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9483: LD_EXP 25
9487: PPUSH
9488: LD_STRING DH-Start-b-4
9490: PPUSH
9491: CALL_OW 88
// end ; end else
9495: GO 9562
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9497: LD_EXP 37
9501: PPUSH
9502: LD_INT 26
9504: PUSH
9505: LD_INT 1
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 72
9516: PUSH
9517: LD_INT 1
9519: ARRAY
9520: PPUSH
9521: LD_STRING DArm-Start-a-2
9523: PPUSH
9524: CALL_OW 88
9528: NOT
9529: IFFALSE 9562
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9531: LD_EXP 37
9535: PPUSH
9536: LD_INT 26
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PPUSH
9546: CALL_OW 72
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: LD_STRING DArf-Start-a-2
9557: PPUSH
9558: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9562: LD_EXP 25
9566: PPUSH
9567: LD_INT 211
9569: PPUSH
9570: LD_INT 38
9572: PPUSH
9573: CALL_OW 118
// wait ( 0 0$1 ) ;
9577: LD_INT 35
9579: PPUSH
9580: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9584: LD_EXP 25
9588: PPUSH
9589: LD_STRING DH-Start-3
9591: PPUSH
9592: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9596: LD_EXP 25
9600: PPUSH
9601: LD_STRING DH-Start-4
9603: PPUSH
9604: CALL_OW 88
// InGameOff ;
9608: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9612: LD_STRING Prepare
9614: PPUSH
9615: CALL_OW 337
// SaveForQuickRestart ;
9619: CALL_OW 22
// wait ( 0 0$10 ) ;
9623: LD_INT 350
9625: PPUSH
9626: CALL_OW 67
// if not Aviradze then
9630: LD_EXP 35
9634: NOT
9635: IFFALSE 9639
// exit ;
9637: GO 9879
// SetDir ( Aviradze , 4 ) ;
9639: LD_EXP 35
9643: PPUSH
9644: LD_INT 4
9646: PPUSH
9647: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9651: LD_EXP 35
9655: PPUSH
9656: LD_INT 225
9658: PPUSH
9659: LD_INT 33
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: CALL_OW 48
// for i := 1 to 2 do
9669: LD_ADDR_VAR 0 2
9673: PUSH
9674: DOUBLE
9675: LD_INT 1
9677: DEC
9678: ST_TO_ADDR
9679: LD_INT 2
9681: PUSH
9682: FOR_TO
9683: IFFALSE 9814
// begin uc_side := 2 ;
9685: LD_ADDR_OWVAR 20
9689: PUSH
9690: LD_INT 2
9692: ST_TO_ADDR
// uc_nation := 0 ;
9693: LD_ADDR_OWVAR 21
9697: PUSH
9698: LD_INT 0
9700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9701: LD_INT 0
9703: PPUSH
9704: LD_INT 12
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 380
// hc_gallery :=  ;
9714: LD_ADDR_OWVAR 33
9718: PUSH
9719: LD_STRING 
9721: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9722: LD_ADDR_OWVAR 26
9726: PUSH
9727: LD_STRING Artudito
9729: PUSH
9730: LD_STRING Textur
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: LD_VAR 0 2
9741: ARRAY
9742: ST_TO_ADDR
// un := CreateHuman ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: CALL_OW 44
9752: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9753: LD_VAR 0 3
9757: PPUSH
9758: LD_INT 224
9760: PUSH
9761: LD_INT 226
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_VAR 0 2
9772: ARRAY
9773: PPUSH
9774: LD_INT 31
9776: PUSH
9777: LD_INT 35
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_VAR 0 2
9788: ARRAY
9789: PPUSH
9790: LD_INT 0
9792: PPUSH
9793: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9797: LD_VAR 0 3
9801: PPUSH
9802: LD_INT 215
9804: PPUSH
9805: LD_INT 36
9807: PPUSH
9808: CALL_OW 111
// end ;
9812: GO 9682
9814: POP
9815: POP
// hc_name :=  ;
9816: LD_ADDR_OWVAR 26
9820: PUSH
9821: LD_STRING 
9823: ST_TO_ADDR
// InitHc ;
9824: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9828: LD_EXP 35
9832: PPUSH
9833: LD_INT 215
9835: PPUSH
9836: LD_INT 36
9838: PPUSH
9839: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9843: LD_EXP 35
9847: PPUSH
9848: LD_STRING DA-Arrive-1
9850: PPUSH
9851: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9855: LD_EXP 25
9859: PPUSH
9860: LD_STRING DH-Arrive-2
9862: PPUSH
9863: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9867: LD_EXP 35
9871: PPUSH
9872: LD_STRING DA-Arrive-3
9874: PPUSH
9875: CALL_OW 88
// end ;
9879: LD_VAR 0 1
9883: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9884: LD_EXP 3
9888: IFFALSE 11277
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
9896: PPUSH
9897: PPUSH
// begin DialogueOn ;
9898: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9902: LD_EXP 25
9906: PPUSH
9907: LD_STRING DH-base-1
9909: PPUSH
9910: CALL_OW 88
// if Markov then
9914: LD_EXP 32
9918: IFFALSE 9970
// begin Say ( Markov , DMar-base-2 ) ;
9920: LD_EXP 32
9924: PPUSH
9925: LD_STRING DMar-base-2
9927: PPUSH
9928: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9932: LD_EXP 32
9936: PPUSH
9937: LD_STRING DMar-base-3
9939: PPUSH
9940: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9944: LD_EXP 25
9948: PPUSH
9949: LD_STRING DH-base-4
9951: PPUSH
9952: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9956: LD_EXP 32
9960: PPUSH
9961: LD_STRING DMar-base-5
9963: PPUSH
9964: CALL_OW 88
// end else
9968: GO 10047
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9970: LD_EXP 37
9974: PPUSH
9975: LD_INT 26
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PUSH
9990: LD_INT 1
9992: ARRAY
9993: PPUSH
9994: LD_STRING DArm-base-a-2
9996: PPUSH
9997: CALL_OW 88
10001: NOT
10002: IFFALSE 10035
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_INT 26
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: CALL_OW 72
10023: PUSH
10024: LD_INT 1
10026: ARRAY
10027: PPUSH
10028: LD_STRING DArf-base-a-2
10030: PPUSH
10031: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
10035: LD_EXP 25
10039: PPUSH
10040: LD_STRING DH-base-a-3
10042: PPUSH
10043: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
10047: LD_EXP 35
10051: PPUSH
10052: LD_STRING DA-base-6
10054: PPUSH
10055: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
10059: LD_EXP 35
10063: PPUSH
10064: LD_STRING DA-base-7
10066: PPUSH
10067: CALL_OW 88
// DialogueOff ;
10071: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
10075: LD_STRING Flamethrower
10077: PPUSH
10078: CALL_OW 337
// wait ( 2 2$00 ) ;
10082: LD_INT 4200
10084: PPUSH
10085: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
10089: LD_EXP 34
10093: PUSH
10094: LD_EXP 27
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PPUSH
10103: LD_INT 203
10105: PPUSH
10106: LD_INT 37
10108: PPUSH
10109: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
10113: LD_INT 22
10115: PUSH
10116: LD_INT 2
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 92
10125: PUSH
10126: LD_INT 203
10128: PUSH
10129: LD_INT 37
10131: PUSH
10132: LD_INT 10
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL_OW 69
10149: NOT
10150: IFFALSE 10190
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
10152: LD_EXP 34
10156: PUSH
10157: LD_EXP 27
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: LD_EXP 25
10170: PPUSH
10171: CALL_OW 250
10175: PPUSH
10176: LD_EXP 25
10180: PPUSH
10181: CALL_OW 251
10185: PPUSH
10186: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10190: LD_INT 35
10192: PPUSH
10193: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
10197: LD_INT 2
10199: PPUSH
10200: LD_EXP 34
10204: PPUSH
10205: CALL_OW 292
10209: PUSH
10210: LD_EXP 34
10214: PPUSH
10215: LD_EXP 25
10219: PPUSH
10220: CALL_OW 296
10224: PUSH
10225: LD_INT 8
10227: LESS
10228: PUSH
10229: LD_EXP 34
10233: PPUSH
10234: LD_INT 22
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 21
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PPUSH
10258: CALL_OW 69
10262: PPUSH
10263: LD_EXP 34
10267: PPUSH
10268: CALL_OW 74
10272: PPUSH
10273: CALL_OW 296
10277: PUSH
10278: LD_INT 7
10280: LESS
10281: OR
10282: AND
10283: PUSH
10284: LD_EXP 34
10288: PPUSH
10289: LD_INT 10
10291: PPUSH
10292: CALL_OW 308
10296: NOT
10297: AND
10298: IFFALSE 10190
// InGameOn ;
10300: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
10304: LD_EXP 34
10308: PPUSH
10309: CALL_OW 87
// if IsInUnit ( Heike ) then
10313: LD_EXP 25
10317: PPUSH
10318: CALL_OW 310
10322: IFFALSE 10333
// ComExitBuilding ( Heike ) ;
10324: LD_EXP 25
10328: PPUSH
10329: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
10333: LD_EXP 34
10337: PUSH
10338: LD_EXP 27
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PPUSH
10347: LD_EXP 25
10351: PPUSH
10352: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
10356: LD_EXP 25
10360: PPUSH
10361: LD_EXP 34
10365: PPUSH
10366: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10370: LD_INT 22
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 91
10382: PUSH
10383: LD_EXP 34
10387: PUSH
10388: LD_INT 10
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 21
10398: PUSH
10399: LD_INT 3
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: PPUSH
10411: CALL_OW 69
10415: IFFALSE 10441
// begin Say ( Kurt , DKs-scout-1 ) ;
10417: LD_EXP 34
10421: PPUSH
10422: LD_STRING DKs-scout-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10429: LD_EXP 25
10433: PPUSH
10434: LD_STRING DH-scout-2
10436: PPUSH
10437: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10441: LD_EXP 25
10445: PPUSH
10446: CALL_OW 85
// if IsInUnit ( Heike ) then
10450: LD_EXP 25
10454: PPUSH
10455: CALL_OW 310
10459: IFFALSE 10470
// ComExit ( Heike ) ;
10461: LD_EXP 25
10465: PPUSH
10466: CALL 867 0 1
// repeat wait ( 0 0$1 ) ;
10470: LD_INT 35
10472: PPUSH
10473: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10477: LD_EXP 25
10481: PPUSH
10482: LD_EXP 34
10486: PPUSH
10487: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10491: LD_EXP 25
10495: PPUSH
10496: LD_EXP 34
10500: PPUSH
10501: CALL_OW 296
10505: PUSH
10506: LD_INT 6
10508: LESS
10509: IFFALSE 10470
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10511: LD_EXP 34
10515: PUSH
10516: LD_EXP 27
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PPUSH
10525: LD_EXP 25
10529: PPUSH
10530: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10534: LD_EXP 34
10538: PPUSH
10539: LD_STRING DKs-scout-3
10541: PPUSH
10542: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10546: LD_EXP 30
10550: PUSH
10551: LD_EXP 30
10555: PPUSH
10556: LD_EXP 34
10560: PPUSH
10561: CALL_OW 296
10565: PUSH
10566: LD_INT 15
10568: LESS
10569: AND
10570: IFFALSE 10760
// begin if IsInUnit ( Kaia ) then
10572: LD_EXP 30
10576: PPUSH
10577: CALL_OW 310
10581: IFFALSE 10592
// ComExitBuilding ( Kaia ) ;
10583: LD_EXP 30
10587: PPUSH
10588: CALL_OW 122
// wait ( 0 0$1 ) ;
10592: LD_INT 35
10594: PPUSH
10595: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10599: LD_EXP 30
10603: PPUSH
10604: LD_EXP 34
10608: PPUSH
10609: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10613: LD_INT 35
10615: PPUSH
10616: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10620: LD_EXP 30
10624: PPUSH
10625: LD_EXP 34
10629: PPUSH
10630: CALL_OW 296
10634: PUSH
10635: LD_INT 6
10637: LESS
10638: IFFALSE 10613
// ComTurnUnit ( Kaia , Kurt ) ;
10640: LD_EXP 30
10644: PPUSH
10645: LD_EXP 34
10649: PPUSH
10650: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10654: LD_EXP 30
10658: PPUSH
10659: LD_STRING DK-scout-4
10661: PPUSH
10662: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10666: LD_EXP 34
10670: PPUSH
10671: LD_EXP 30
10675: PPUSH
10676: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10680: LD_EXP 34
10684: PPUSH
10685: LD_STRING DKs-scout-5
10687: PPUSH
10688: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10692: LD_EXP 30
10696: PPUSH
10697: LD_STRING DK-scout-6
10699: PPUSH
10700: CALL_OW 88
// if Mike then
10704: LD_EXP 27
10708: IFFALSE 10760
// begin Say ( Mike , DM-scout-7 ) ;
10710: LD_EXP 27
10714: PPUSH
10715: LD_STRING DM-scout-7
10717: PPUSH
10718: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10722: LD_EXP 30
10726: PPUSH
10727: LD_EXP 27
10731: PPUSH
10732: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10736: LD_EXP 30
10740: PPUSH
10741: LD_STRING DK-scout-8
10743: PPUSH
10744: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10748: LD_EXP 27
10752: PPUSH
10753: LD_STRING DM-scout-9
10755: PPUSH
10756: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10760: LD_INT 184
10762: PPUSH
10763: LD_INT 100
10765: PPUSH
10766: LD_INT 2
10768: PPUSH
10769: LD_INT 12
10771: NEG
10772: PPUSH
10773: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10777: LD_INT 184
10779: PPUSH
10780: LD_INT 100
10782: PPUSH
10783: LD_INT 2
10785: PPUSH
10786: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10790: LD_INT 184
10792: PPUSH
10793: LD_INT 100
10795: PPUSH
10796: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10800: LD_EXP 34
10804: PPUSH
10805: LD_STRING DKs-scout-10
10807: PPUSH
10808: CALL_OW 88
// wait ( 0 0$1 ) ;
10812: LD_INT 35
10814: PPUSH
10815: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10819: LD_INT 144
10821: PPUSH
10822: LD_INT 65
10824: PPUSH
10825: LD_INT 2
10827: PPUSH
10828: LD_INT 12
10830: NEG
10831: PPUSH
10832: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10836: LD_INT 144
10838: PPUSH
10839: LD_INT 65
10841: PPUSH
10842: LD_INT 2
10844: PPUSH
10845: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10849: LD_INT 144
10851: PPUSH
10852: LD_INT 65
10854: PPUSH
10855: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10859: LD_EXP 34
10863: PPUSH
10864: LD_STRING DKs-scout-11
10866: PPUSH
10867: CALL_OW 88
// wait ( 0 0$1 ) ;
10871: LD_INT 35
10873: PPUSH
10874: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10878: LD_EXP 34
10882: PPUSH
10883: CALL_OW 87
// if Mike and not Givi then
10887: LD_EXP 27
10891: PUSH
10892: LD_EXP 26
10896: NOT
10897: AND
10898: IFFALSE 10924
// begin Say ( Mike , DM-scout-a-1 ) ;
10900: LD_EXP 27
10904: PPUSH
10905: LD_STRING DM-scout-a-1
10907: PPUSH
10908: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10912: LD_EXP 25
10916: PPUSH
10917: LD_STRING DH-scout-a-2
10919: PPUSH
10920: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10924: LD_EXP 34
10928: PUSH
10929: LD_EXP 27
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PPUSH
10938: LD_INT 2
10940: PPUSH
10941: CALL_OW 235
// InGameOff ;
10945: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10949: LD_STRING Hill
10951: PPUSH
10952: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
10956: LD_INT 20
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 424
// allowToPatrol := true ;
10966: LD_ADDR_EXP 12
10970: PUSH
10971: LD_INT 1
10973: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10974: LD_INT 3150
10976: PPUSH
10977: CALL_OW 67
// InitHc ;
10981: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: DOUBLE
10991: LD_INT 1
10993: DEC
10994: ST_TO_ADDR
10995: LD_INT 3
10997: PUSH
10998: LD_INT 3
11000: PUSH
11001: LD_INT 2
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_OWVAR 67
11013: ARRAY
11014: PUSH
11015: FOR_TO
11016: IFFALSE 11275
// begin uc_side := 2 ;
11018: LD_ADDR_OWVAR 20
11022: PUSH
11023: LD_INT 2
11025: ST_TO_ADDR
// uc_nation := 2 ;
11026: LD_ADDR_OWVAR 21
11030: PUSH
11031: LD_INT 2
11033: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
11034: LD_INT 0
11036: PPUSH
11037: LD_INT 1
11039: PUSH
11040: LD_INT 3
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: PUSH
11051: LD_VAR 0 1
11055: PUSH
11056: LD_INT 3
11058: MOD
11059: PUSH
11060: LD_INT 1
11062: PLUS
11063: ARRAY
11064: PPUSH
11065: LD_INT 3
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: LD_INT 2
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_OWVAR 67
11083: ARRAY
11084: PPUSH
11085: CALL_OW 380
// un := CreateHuman ;
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: CALL_OW 44
11098: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
11099: LD_ADDR_EXP 37
11103: PUSH
11104: LD_EXP 37
11108: PUSH
11109: LD_VAR 0 2
11113: UNION
11114: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
11115: LD_INT 2
11117: PPUSH
11118: LD_INT 2
11120: PPUSH
11121: LD_INT 13
11123: PPUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 1
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_VAR 0 1
11138: PUSH
11139: LD_INT 2
11141: MOD
11142: PUSH
11143: LD_INT 1
11145: PLUS
11146: ARRAY
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: LD_INT 27
11153: PUSH
11154: LD_INT 25
11156: PUSH
11157: LD_INT 27
11159: PUSH
11160: LD_INT 23
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_OWVAR 67
11173: PUSH
11174: LD_INT 0
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 12
11184: PLUS
11185: ARRAY
11186: PPUSH
11187: LD_INT 77
11189: PPUSH
11190: CALL 429 0 7
// veh := CreateVehicle ;
11194: LD_ADDR_VAR 0 3
11198: PUSH
11199: CALL_OW 45
11203: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 2
11211: PPUSH
11212: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 178
11223: PPUSH
11224: LD_INT 2
11226: PPUSH
11227: LD_INT 2
11229: PPUSH
11230: LD_INT 0
11232: PPUSH
11233: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
11237: LD_VAR 0 2
11241: PPUSH
11242: LD_VAR 0 3
11246: PPUSH
11247: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
11251: LD_VAR 0 2
11255: PPUSH
11256: LD_INT 183
11258: PPUSH
11259: LD_INT 11
11261: PPUSH
11262: CALL_OW 111
// wait ( 0 0$2 ) ;
11266: LD_INT 70
11268: PPUSH
11269: CALL_OW 67
// end ;
11273: GO 11015
11275: POP
11276: POP
// end ;
11277: PPOPN 3
11279: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11280: LD_EXP 4
11284: PUSH
11285: LD_EXP 35
11289: PPUSH
11290: CALL_OW 302
11294: AND
11295: IFFALSE 11344
11297: GO 11299
11299: DISABLE
// begin DialogueOn ;
11300: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11304: LD_EXP 35
11308: PPUSH
11309: LD_STRING DA-lab-1
11311: PPUSH
11312: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11316: LD_EXP 35
11320: PPUSH
11321: LD_STRING DA-lab-2
11323: PPUSH
11324: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11328: LD_EXP 25
11332: PPUSH
11333: LD_STRING DH-lab-3
11335: PPUSH
11336: CALL_OW 88
// DialogueOff ;
11340: CALL_OW 7
// end ;
11344: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11345: LD_INT 17
11347: PPUSH
11348: LD_INT 2
11350: PPUSH
11351: CALL_OW 321
11355: PUSH
11356: LD_INT 2
11358: EQUAL
11359: IFFALSE 11491
11361: GO 11363
11363: DISABLE
11364: LD_INT 0
11366: PPUSH
// begin DialogueOn ;
11367: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11371: LD_EXP 35
11375: PPUSH
11376: LD_STRING DA-Cam-1
11378: PPUSH
11379: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11383: LD_EXP 35
11387: PPUSH
11388: LD_STRING DA-Cam-2
11390: PPUSH
11391: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11395: LD_EXP 35
11399: PPUSH
11400: LD_STRING DA-Cam-3
11402: PPUSH
11403: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11407: LD_EXP 25
11411: PPUSH
11412: LD_STRING DH-Cam-4
11414: PPUSH
11415: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11419: LD_EXP 30
11423: PPUSH
11424: LD_STRING DK-Cam-5
11426: PPUSH
11427: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11431: LD_EXP 30
11435: PPUSH
11436: LD_STRING DK-Cam-6
11438: PPUSH
11439: CALL_OW 88
// DialogueOff ;
11443: CALL_OW 7
// Query ( Camera ) ;
11447: LD_STRING Camera
11449: PPUSH
11450: CALL_OW 97
// hiddenCameraAllowed := true ;
11454: LD_ADDR_EXP 5
11458: PUSH
11459: LD_INT 1
11461: ST_TO_ADDR
// for i in camAreas do
11462: LD_ADDR_VAR 0 1
11466: PUSH
11467: LD_EXP 8
11471: PUSH
11472: FOR_IN
11473: IFFALSE 11489
// SetAreaMapShow ( i , 1 ) ;
11475: LD_VAR 0 1
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: CALL_OW 424
11487: GO 11472
11489: POP
11490: POP
// end ;
11491: PPOPN 1
11493: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11494: LD_EXP 8
11498: NOT
11499: PUSH
11500: LD_EXP 5
11504: AND
11505: IFFALSE 11603
11507: GO 11509
11509: DISABLE
11510: LD_INT 0
11512: PPUSH
// begin stop_talking := true ;
11513: LD_ADDR_OWVAR 56
11517: PUSH
11518: LD_INT 1
11520: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11521: LD_ADDR_VAR 0 1
11525: PUSH
11526: LD_INT 22
11528: PUSH
11529: LD_INT 2
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 21
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 23
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: PUSH
11566: FOR_IN
11567: IFFALSE 11586
// AddExperience ( i , 2 , 450 ) ;
11569: LD_VAR 0 1
11573: PPUSH
11574: LD_INT 2
11576: PPUSH
11577: LD_INT 450
11579: PPUSH
11580: CALL_OW 492
11584: GO 11566
11586: POP
11587: POP
// stop_talking := false ;
11588: LD_ADDR_OWVAR 56
11592: PUSH
11593: LD_INT 0
11595: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11596: LD_STRING ACH_CAMERA
11598: PPUSH
11599: CALL_OW 543
// end ;
11603: PPOPN 1
11605: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11606: LD_EXP 9
11610: PUSH
11611: LD_EXP 11
11615: NOT
11616: AND
11617: IFFALSE 11676
11619: GO 11621
11621: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11622: LD_EXP 9
11626: PPUSH
11627: CALL_OW 250
11631: PPUSH
11632: LD_EXP 9
11636: PPUSH
11637: CALL_OW 251
11641: PPUSH
11642: LD_INT 2
11644: PPUSH
11645: LD_INT 6
11647: NEG
11648: PPUSH
11649: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11653: LD_EXP 9
11657: PPUSH
11658: CALL_OW 87
// wait ( 0 0$1 ) ;
11662: LD_INT 35
11664: PPUSH
11665: CALL_OW 67
// YouLost ( Spotted ) ;
11669: LD_STRING Spotted
11671: PPUSH
11672: CALL_OW 104
// end ;
11676: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11677: LD_INT 3
11679: PUSH
11680: LD_INT 6
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: LD_INT 2
11689: PPUSH
11690: LD_EXP 47
11694: PPUSH
11695: CALL 2049 0 3
11699: IFFALSE 11732
11701: GO 11703
11703: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11704: LD_ADDR_EXP 9
11708: PUSH
11709: LD_INT 3
11711: PUSH
11712: LD_INT 6
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PPUSH
11719: LD_INT 2
11721: PPUSH
11722: LD_EXP 47
11726: PPUSH
11727: CALL 2049 0 3
11731: ST_TO_ADDR
11732: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11733: LD_INT 22
11735: PUSH
11736: LD_INT 6
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 30
11745: PUSH
11746: LD_INT 32
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 3
11755: PUSH
11756: LD_INT 24
11758: PUSH
11759: LD_INT 1000
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: PPUSH
11775: CALL_OW 69
11779: IFFALSE 11840
11781: GO 11783
11783: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11784: LD_ADDR_EXP 9
11788: PUSH
11789: LD_INT 22
11791: PUSH
11792: LD_INT 6
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 30
11801: PUSH
11802: LD_INT 32
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 3
11811: PUSH
11812: LD_INT 24
11814: PUSH
11815: LD_INT 1000
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: PPUSH
11831: CALL_OW 69
11835: PUSH
11836: LD_INT 1
11838: ARRAY
11839: ST_TO_ADDR
11840: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11841: LD_EXP 9
11845: IFFALSE 12077
11847: GO 11849
11849: DISABLE
11850: LD_INT 0
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11856: LD_ADDR_VAR 0 4
11860: PUSH
11861: LD_EXP 42
11865: PUSH
11866: LD_EXP 44
11870: PUSH
11871: LD_EXP 45
11875: UNION
11876: PPUSH
11877: LD_INT 3
11879: PUSH
11880: LD_INT 25
11882: PUSH
11883: LD_INT 1
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 72
11898: UNION
11899: ST_TO_ADDR
// for i in noncombat do
11900: LD_ADDR_VAR 0 1
11904: PUSH
11905: LD_VAR 0 4
11909: PUSH
11910: FOR_IN
11911: IFFALSE 12007
// begin if IsInUnit ( i ) then
11913: LD_VAR 0 1
11917: PPUSH
11918: CALL_OW 310
11922: IFFALSE 11933
// ComExitBuilding ( i ) ;
11924: LD_VAR 0 1
11928: PPUSH
11929: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11933: LD_VAR 0 1
11937: PPUSH
11938: LD_INT 114
11940: PPUSH
11941: LD_INT 97
11943: PPUSH
11944: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11948: LD_VAR 0 1
11952: PPUSH
11953: LD_INT 99
11955: PPUSH
11956: LD_INT 128
11958: PPUSH
11959: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11963: LD_VAR 0 1
11967: PPUSH
11968: LD_INT 91
11970: PPUSH
11971: LD_INT 145
11973: PPUSH
11974: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11978: LD_VAR 0 1
11982: PPUSH
11983: LD_INT 82
11985: PPUSH
11986: LD_INT 153
11988: PPUSH
11989: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11993: LD_VAR 0 1
11997: PPUSH
11998: LD_INT 16
12000: PPUSH
12001: CALL_OW 173
// end ;
12005: GO 11910
12007: POP
12008: POP
// if not allowHeikeAttack then
12009: LD_EXP 11
12013: NOT
12014: IFFALSE 12018
// exit ;
12016: GO 12077
// SayRadio ( Kurin , D9a-Kur-1 ) ;
12018: LD_EXP 40
12022: PPUSH
12023: LD_STRING D9a-Kur-1
12025: PPUSH
12026: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
12030: LD_EXP 43
12034: PPUSH
12035: LD_STRING D9a-Bur-1
12037: PPUSH
12038: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
12042: LD_EXP 40
12046: PPUSH
12047: LD_STRING D9a-Kur-2
12049: PPUSH
12050: CALL_OW 94
// omicronFall := true ;
12054: LD_ADDR_EXP 13
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12062: LD_INT 105
12064: PPUSH
12065: CALL_OW 67
// retreatFromOmicron := true ;
12069: LD_ADDR_EXP 20
12073: PUSH
12074: LD_INT 1
12076: ST_TO_ADDR
// end ;
12077: PPOPN 4
12079: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
12080: LD_INT 16
12082: PPUSH
12083: LD_INT 3
12085: PUSH
12086: LD_INT 22
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 23
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 70
12118: IFFALSE 12201
12120: GO 12122
12122: DISABLE
12123: LD_INT 0
12125: PPUSH
// begin enable ;
12126: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
12127: LD_ADDR_VAR 0 1
12131: PUSH
12132: LD_INT 16
12134: PPUSH
12135: LD_INT 3
12137: PUSH
12138: LD_INT 22
12140: PUSH
12141: LD_INT 2
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 23
12154: PUSH
12155: LD_INT 3
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 70
12170: PUSH
12171: FOR_IN
12172: IFFALSE 12199
// begin escapeCounter := escapeCounter + 1 ;
12174: LD_ADDR_EXP 19
12178: PUSH
12179: LD_EXP 19
12183: PUSH
12184: LD_INT 1
12186: PLUS
12187: ST_TO_ADDR
// RemoveUnit ( i ) ;
12188: LD_VAR 0 1
12192: PPUSH
12193: CALL_OW 64
// end ;
12197: GO 12171
12199: POP
12200: POP
// end ;
12201: PPOPN 1
12203: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12204: LD_OWVAR 1
12208: PUSH
12209: LD_INT 13650
12211: PUSH
12212: LD_INT 0
12214: PPUSH
12215: LD_INT 3150
12217: PPUSH
12218: CALL_OW 12
12222: PLUS
12223: GREATEREQUAL
12224: IFFALSE 12233
12226: GO 12228
12228: DISABLE
// SmallAmericanReinforcements ;
12229: CALL 7606 0 0
12233: END
// every 0 0$1 trigger tick >= 9 9$15 do
12234: LD_OWVAR 1
12238: PUSH
12239: LD_INT 19425
12241: GREATEREQUAL
12242: IFFALSE 12307
12244: GO 12246
12246: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12247: LD_EXP 48
12251: PPUSH
12252: LD_INT 21
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 72
12266: PPUSH
12267: LD_INT 62
12269: PPUSH
12270: LD_INT 22
12272: PPUSH
12273: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12277: LD_EXP 49
12281: PPUSH
12282: LD_INT 69
12284: PPUSH
12285: LD_INT 27
12287: PPUSH
12288: CALL_OW 111
// wait ( 1 1$00 ) ;
12292: LD_INT 2100
12294: PPUSH
12295: CALL_OW 67
// startAttackOnOmicron := true ;
12299: LD_ADDR_EXP 6
12303: PUSH
12304: LD_INT 1
12306: ST_TO_ADDR
// end ;
12307: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12308: LD_EXP 22
12312: PUSH
12313: LD_INT 0
12315: EQUAL
12316: IFFALSE 14333
12318: GO 12320
12320: DISABLE
12321: LD_INT 0
12323: PPUSH
12324: PPUSH
12325: PPUSH
12326: PPUSH
12327: PPUSH
12328: PPUSH
12329: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12330: LD_INT 5
12332: PPUSH
12333: LD_INT 2
12335: PPUSH
12336: CALL_OW 343
// PrepareOmarForces ;
12340: CALL 2619 0 0
// wait ( 0 0$03 ) ;
12344: LD_INT 105
12346: PPUSH
12347: CALL_OW 67
// allowHeikeAttack := true ;
12351: LD_ADDR_EXP 11
12355: PUSH
12356: LD_INT 1
12358: ST_TO_ADDR
// activeGrishkoAI := false ;
12359: LD_ADDR_EXP 10
12363: PUSH
12364: LD_INT 0
12366: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12367: LD_INT 20
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 424
// if not hillBase then
12377: LD_EXP 15
12381: NOT
12382: IFFALSE 12391
// ChangeMissionObjectives ( HillDone ) ;
12384: LD_STRING HillDone
12386: PPUSH
12387: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12391: LD_EXP 33
12395: PPUSH
12396: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12400: LD_ADDR_VAR 0 1
12404: PUSH
12405: LD_INT 22
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 69
12433: PUSH
12434: FOR_IN
12435: IFFALSE 12459
// if HasTask ( i ) then
12437: LD_VAR 0 1
12441: PPUSH
12442: CALL_OW 314
12446: IFFALSE 12457
// ComHold ( i ) ;
12448: LD_VAR 0 1
12452: PPUSH
12453: CALL_OW 140
12457: GO 12434
12459: POP
12460: POP
// DialogueOn ;
12461: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12465: LD_EXP 33
12469: PPUSH
12470: LD_STRING DO-assault-1
12472: PPUSH
12473: CALL_OW 94
// DialogueOff ;
12477: CALL_OW 7
// game_speed := 4 ;
12481: LD_ADDR_OWVAR 65
12485: PUSH
12486: LD_INT 4
12488: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12489: LD_ADDR_VAR 0 1
12493: PUSH
12494: LD_EXP 46
12498: PPUSH
12499: LD_INT 3
12501: PUSH
12502: LD_INT 54
12504: PUSH
12505: EMPTY
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 72
12516: PUSH
12517: FOR_IN
12518: IFFALSE 12537
// ComMoveXY ( i , 226 , 114 ) ;
12520: LD_VAR 0 1
12524: PPUSH
12525: LD_INT 226
12527: PPUSH
12528: LD_INT 114
12530: PPUSH
12531: CALL_OW 111
12535: GO 12517
12537: POP
12538: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12539: LD_EXP 41
12543: PPUSH
12544: LD_INT 22
12546: PUSH
12547: LD_INT 6
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 30
12556: PUSH
12557: LD_INT 4
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 69
12572: PPUSH
12573: LD_EXP 41
12577: PPUSH
12578: CALL_OW 74
12582: PPUSH
12583: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12587: LD_STRING Attack
12589: PPUSH
12590: CALL_OW 337
// music_class := music_combat ;
12594: LD_ADDR_OWVAR 72
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// music_nat := 4 ;
12602: LD_ADDR_OWVAR 71
12606: PUSH
12607: LD_INT 4
12609: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12610: LD_INT 5
12612: PPUSH
12613: LD_EXP 41
12617: PPUSH
12618: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12622: LD_INT 6
12624: PPUSH
12625: LD_EXP 38
12629: PPUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 72
12644: PUSH
12645: LD_INT 4
12647: ARRAY
12648: PPUSH
12649: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_EXP 38
12662: PPUSH
12663: LD_INT 3
12665: PUSH
12666: LD_INT 25
12668: PUSH
12669: LD_INT 4
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 72
12684: PUSH
12685: FOR_IN
12686: IFFALSE 12705
// ComAgressiveMove ( i , 221 , 110 ) ;
12688: LD_VAR 0 1
12692: PPUSH
12693: LD_INT 221
12695: PPUSH
12696: LD_INT 110
12698: PPUSH
12699: CALL_OW 114
12703: GO 12685
12705: POP
12706: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12707: LD_EXP 38
12711: PPUSH
12712: LD_INT 25
12714: PUSH
12715: LD_INT 4
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 72
12726: PPUSH
12727: LD_INT 214
12729: PPUSH
12730: LD_INT 124
12732: PPUSH
12733: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12737: LD_EXP 38
12741: PPUSH
12742: LD_INT 25
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PPUSH
12752: CALL_OW 72
12756: PUSH
12757: LD_INT 4
12759: ARRAY
12760: PPUSH
12761: LD_INT 214
12763: PPUSH
12764: LD_INT 114
12766: PPUSH
12767: LD_INT 0
12769: PPUSH
12770: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12774: LD_EXP 41
12778: PPUSH
12779: LD_STRING D9-Gri-1
12781: PPUSH
12782: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12786: LD_EXP 40
12790: PPUSH
12791: LD_STRING D9-Kur-1
12793: PPUSH
12794: CALL_OW 94
// wait ( 0 0$1 ) ;
12798: LD_INT 35
12800: PPUSH
12801: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12805: LD_EXP 33
12809: PPUSH
12810: LD_INT 233
12812: PPUSH
12813: LD_INT 130
12815: PPUSH
12816: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12820: LD_EXP 41
12824: PPUSH
12825: LD_STRING D9-Gri-2
12827: PPUSH
12828: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12832: LD_EXP 40
12836: PPUSH
12837: LD_STRING D9-Kur-2
12839: PPUSH
12840: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12844: LD_EXP 41
12848: PPUSH
12849: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12853: LD_EXP 41
12857: PPUSH
12858: LD_INT 211
12860: PPUSH
12861: LD_INT 104
12863: PPUSH
12864: CALL_OW 171
// AddComHold ( Grishko ) ;
12868: LD_EXP 41
12872: PPUSH
12873: CALL_OW 200
// repeat wait ( 3 ) ;
12877: LD_INT 3
12879: PPUSH
12880: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12884: LD_EXP 41
12888: PPUSH
12889: CALL_OW 310
12893: NOT
12894: IFFALSE 12877
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12896: LD_EXP 38
12900: PPUSH
12901: LD_INT 34
12903: PUSH
12904: LD_INT 26
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PPUSH
12911: CALL_OW 72
12915: PPUSH
12916: LD_EXP 41
12920: PPUSH
12921: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12925: LD_EXP 38
12929: PPUSH
12930: LD_INT 34
12932: PUSH
12933: LD_INT 26
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL_OW 72
12944: PPUSH
12945: LD_INT 215
12947: PPUSH
12948: LD_INT 106
12950: PPUSH
12951: CALL_OW 174
// repeat wait ( 3 ) ;
12955: LD_INT 3
12957: PPUSH
12958: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12962: LD_EXP 41
12966: PPUSH
12967: CALL_OW 256
12971: PUSH
12972: LD_INT 1000
12974: LESS
12975: IFFALSE 12955
// NormalAttack ( 5 , Grishko ) ;
12977: LD_INT 5
12979: PPUSH
12980: LD_EXP 41
12984: PPUSH
12985: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12989: LD_INT 6
12991: PPUSH
12992: LD_EXP 38
12996: PPUSH
12997: LD_INT 25
12999: PUSH
13000: LD_INT 1
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 72
13011: PUSH
13012: LD_INT 4
13014: ARRAY
13015: PPUSH
13016: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
13020: LD_EXP 41
13024: PPUSH
13025: LD_STRING D9-Gri-3
13027: PPUSH
13028: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
13032: LD_EXP 40
13036: PPUSH
13037: LD_STRING D9-Kur-3
13039: PPUSH
13040: CALL_OW 94
// music_class := music_auto ;
13044: LD_ADDR_OWVAR 72
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// music_nat := music_auto ;
13052: LD_ADDR_OWVAR 71
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// for i in omarSquad do
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_EXP 38
13069: PUSH
13070: FOR_IN
13071: IFFALSE 13213
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 247
13082: PUSH
13083: LD_INT 2
13085: EQUAL
13086: PUSH
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 256
13096: PUSH
13097: LD_INT 1000
13099: LESS
13100: AND
13101: IFFALSE 13167
// begin driver := IsDrivenBy ( i ) ;
13103: LD_ADDR_VAR 0 2
13107: PUSH
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 311
13117: ST_TO_ADDR
// veh := i ;
13118: LD_ADDR_VAR 0 3
13122: PUSH
13123: LD_VAR 0 1
13127: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
13128: LD_VAR 0 2
13132: PPUSH
13133: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
13137: LD_VAR 0 2
13141: PPUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13151: LD_VAR 0 2
13155: PPUSH
13156: LD_VAR 0 3
13160: PPUSH
13161: CALL_OW 180
// end else
13165: GO 13211
// if GetLives ( i ) < 500 then
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 256
13176: PUSH
13177: LD_INT 500
13179: LESS
13180: IFFALSE 13211
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13182: LD_EXP 38
13186: PPUSH
13187: LD_INT 25
13189: PUSH
13190: LD_INT 4
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 72
13201: PPUSH
13202: LD_VAR 0 1
13206: PPUSH
13207: CALL_OW 188
// end ; end ;
13211: GO 13070
13213: POP
13214: POP
// repeat wait ( 0 0$1 ) ;
13215: LD_INT 35
13217: PPUSH
13218: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13222: LD_EXP 38
13226: PPUSH
13227: LD_INT 3
13229: PUSH
13230: LD_INT 24
13232: PUSH
13233: LD_INT 1000
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 21
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PPUSH
13258: CALL_OW 72
13262: NOT
13263: PUSH
13264: LD_EXP 38
13268: PPUSH
13269: LD_INT 3
13271: PUSH
13272: LD_INT 24
13274: PUSH
13275: LD_INT 250
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PPUSH
13286: CALL_OW 72
13290: NOT
13291: AND
13292: IFFALSE 13215
// wait ( 0 0$2 ) ;
13294: LD_INT 70
13296: PPUSH
13297: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13301: LD_ADDR_VAR 0 5
13305: PUSH
13306: LD_EXP 38
13310: PPUSH
13311: LD_INT 58
13313: PUSH
13314: EMPTY
13315: LIST
13316: PUSH
13317: LD_INT 21
13319: PUSH
13320: LD_INT 2
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 72
13335: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13336: LD_ADDR_VAR 0 6
13340: PUSH
13341: LD_EXP 38
13345: PPUSH
13346: LD_INT 25
13348: PUSH
13349: LD_INT 3
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 3
13358: PUSH
13359: LD_INT 55
13361: PUSH
13362: EMPTY
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 72
13377: ST_TO_ADDR
// for i := 1 to tmp do
13378: LD_ADDR_VAR 0 1
13382: PUSH
13383: DOUBLE
13384: LD_INT 1
13386: DEC
13387: ST_TO_ADDR
13388: LD_VAR 0 5
13392: PUSH
13393: FOR_TO
13394: IFFALSE 13424
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13396: LD_VAR 0 6
13400: PUSH
13401: LD_VAR 0 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 5
13411: PUSH
13412: LD_VAR 0 1
13416: ARRAY
13417: PPUSH
13418: CALL_OW 120
13422: GO 13393
13424: POP
13425: POP
// wait ( 0 0$5 ) ;
13426: LD_INT 175
13428: PPUSH
13429: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13433: LD_EXP 38
13437: PPUSH
13438: LD_INT 199
13440: PPUSH
13441: LD_INT 141
13443: PPUSH
13444: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13448: LD_EXP 33
13452: PPUSH
13453: LD_INT 190
13455: PPUSH
13456: LD_INT 143
13458: PPUSH
13459: CALL_OW 114
// AddComHold ( Omar ) ;
13463: LD_EXP 33
13467: PPUSH
13468: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13472: LD_EXP 38
13476: PPUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 25
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 25
13492: PUSH
13493: LD_INT 4
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: PPUSH
13510: LD_INT 161
13512: PPUSH
13513: LD_INT 130
13515: PPUSH
13516: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13520: LD_EXP 38
13524: PPUSH
13525: LD_INT 25
13527: PUSH
13528: LD_INT 1
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PPUSH
13535: CALL_OW 72
13539: PPUSH
13540: LD_INT 163
13542: PPUSH
13543: LD_INT 122
13545: PPUSH
13546: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13550: LD_EXP 38
13554: PPUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 1
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 72
13569: PUSH
13570: LD_INT 4
13572: ARRAY
13573: PPUSH
13574: LD_INT 165
13576: PPUSH
13577: LD_INT 118
13579: PPUSH
13580: LD_INT 0
13582: PPUSH
13583: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13587: LD_EXP 38
13591: PPUSH
13592: LD_INT 25
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 72
13606: PUSH
13607: LD_INT 4
13609: ARRAY
13610: PPUSH
13611: LD_INT 159
13613: PPUSH
13614: LD_INT 116
13616: PPUSH
13617: LD_INT 0
13619: PPUSH
13620: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13624: LD_EXP 38
13628: PPUSH
13629: LD_INT 21
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PPUSH
13639: CALL_OW 72
13643: PPUSH
13644: LD_INT 169
13646: PPUSH
13647: LD_INT 114
13649: PPUSH
13650: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13654: LD_INT 35
13656: PPUSH
13657: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13661: LD_ADDR_VAR 0 5
13665: PUSH
13666: LD_EXP 38
13670: PPUSH
13671: LD_INT 25
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL_OW 72
13685: ST_TO_ADDR
// for i in tmp do
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 5
13695: PUSH
13696: FOR_IN
13697: IFFALSE 13794
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13699: LD_VAR 0 1
13703: PPUSH
13704: CALL_OW 256
13708: PUSH
13709: LD_INT 600
13711: LESS
13712: PUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: LD_INT 161
13720: PPUSH
13721: LD_INT 130
13723: PPUSH
13724: CALL_OW 297
13728: PUSH
13729: LD_INT 6
13731: GREATER
13732: AND
13733: IFFALSE 13750
// ComMoveXY ( i , 161 , 130 ) ;
13735: LD_VAR 0 1
13739: PPUSH
13740: LD_INT 161
13742: PPUSH
13743: LD_INT 130
13745: PPUSH
13746: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 256
13759: PUSH
13760: LD_INT 1000
13762: EQUAL
13763: PUSH
13764: LD_VAR 0 1
13768: PPUSH
13769: CALL_OW 314
13773: NOT
13774: AND
13775: IFFALSE 13792
// ComAgressiveMove ( i , 160 , 109 ) ;
13777: LD_VAR 0 1
13781: PPUSH
13782: LD_INT 160
13784: PPUSH
13785: LD_INT 109
13787: PPUSH
13788: CALL_OW 114
// end ;
13792: GO 13696
13794: POP
13795: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13796: LD_ADDR_VAR 0 5
13800: PUSH
13801: LD_EXP 38
13805: PPUSH
13806: LD_INT 21
13808: PUSH
13809: LD_INT 2
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 72
13820: ST_TO_ADDR
// for i in tmp do
13821: LD_ADDR_VAR 0 1
13825: PUSH
13826: LD_VAR 0 5
13830: PUSH
13831: FOR_IN
13832: IFFALSE 14098
// begin tmp2 := IsDrivenBy ( i ) ;
13834: LD_ADDR_VAR 0 6
13838: PUSH
13839: LD_VAR 0 1
13843: PPUSH
13844: CALL_OW 311
13848: ST_TO_ADDR
// if not tmp2 then
13849: LD_VAR 0 6
13853: NOT
13854: IFFALSE 13858
// continue ;
13856: GO 13831
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13858: LD_VAR 0 1
13862: PPUSH
13863: CALL_OW 256
13867: PUSH
13868: LD_INT 600
13870: GREATEREQUAL
13871: PUSH
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 110
13881: PUSH
13882: LD_INT 1
13884: EQUAL
13885: AND
13886: IFFALSE 13900
// SetTag ( i , 0 ) ;
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_INT 0
13895: PPUSH
13896: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13900: LD_VAR 0 1
13904: PPUSH
13905: CALL_OW 256
13909: PUSH
13910: LD_INT 600
13912: GREATEREQUAL
13913: PUSH
13914: LD_VAR 0 1
13918: PPUSH
13919: CALL_OW 110
13923: NOT
13924: AND
13925: IFFALSE 13951
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13927: LD_VAR 0 1
13931: PPUSH
13932: LD_VAR 0 7
13936: PPUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 74
13946: PPUSH
13947: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 256
13960: PUSH
13961: LD_INT 600
13963: LESS
13964: PUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 110
13974: NOT
13975: AND
13976: IFFALSE 14005
// begin SetTag ( i , 1 ) ;
13978: LD_VAR 0 1
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13990: LD_VAR 0 1
13994: PPUSH
13995: LD_INT 202
13997: PPUSH
13998: LD_INT 150
14000: PPUSH
14001: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
14005: LD_VAR 0 1
14009: PPUSH
14010: CALL_OW 110
14014: PUSH
14015: LD_INT 1
14017: EQUAL
14018: PUSH
14019: LD_VAR 0 1
14023: PPUSH
14024: LD_INT 202
14026: PPUSH
14027: LD_INT 150
14029: PPUSH
14030: CALL_OW 297
14034: PUSH
14035: LD_INT 6
14037: LESS
14038: AND
14039: PUSH
14040: LD_VAR 0 6
14044: AND
14045: IFFALSE 14096
// begin ComExitVehicle ( tmp2 ) ;
14047: LD_VAR 0 6
14051: PPUSH
14052: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
14056: LD_VAR 0 6
14060: PPUSH
14061: LD_VAR 0 1
14065: PPUSH
14066: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
14070: LD_VAR 0 6
14074: PPUSH
14075: LD_INT 700
14077: PPUSH
14078: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
14082: LD_VAR 0 6
14086: PPUSH
14087: LD_VAR 0 1
14091: PPUSH
14092: CALL_OW 180
// end ; end ;
14096: GO 13831
14098: POP
14099: POP
// until kirovDestroyed ;
14100: LD_EXP 16
14104: IFFALSE 13654
// repeat wait ( 0 0$1 ) ;
14106: LD_INT 35
14108: PPUSH
14109: CALL_OW 67
// for i in omarSquad union Omar do
14113: LD_ADDR_VAR 0 1
14117: PUSH
14118: LD_EXP 38
14122: PUSH
14123: LD_EXP 33
14127: UNION
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14300
// if IsInArea ( i , southRoadArea ) then
14132: LD_VAR 0 1
14136: PPUSH
14137: LD_INT 15
14139: PPUSH
14140: CALL_OW 308
14144: IFFALSE 14157
// RemoveUnit ( i ) else
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 64
14155: GO 14298
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 257
14166: PUSH
14167: LD_INT 3
14169: EQUAL
14170: PUSH
14171: LD_VAR 0 1
14175: PPUSH
14176: CALL_OW 310
14180: NOT
14181: AND
14182: PUSH
14183: LD_INT 22
14185: PUSH
14186: LD_INT 5
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 24
14195: PUSH
14196: LD_INT 251
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 21
14205: PUSH
14206: LD_INT 2
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: LD_INT 58
14215: PUSH
14216: EMPTY
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 69
14229: AND
14230: IFFALSE 14283
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14232: LD_VAR 0 1
14236: PPUSH
14237: LD_INT 22
14239: PUSH
14240: LD_INT 5
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 58
14259: PUSH
14260: EMPTY
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: PPUSH
14277: CALL_OW 120
14281: GO 14298
// ComMoveXY ( i , 208 , 162 ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_INT 208
14290: PPUSH
14291: LD_INT 162
14293: PPUSH
14294: CALL_OW 111
// end ;
14298: GO 14129
14300: POP
14301: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14302: LD_INT 22
14304: PUSH
14305: LD_INT 5
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 21
14314: PUSH
14315: LD_INT 1
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: NOT
14331: IFFALSE 14106
// end ;
14333: PPOPN 7
14335: END
// every 0 0$1 trigger IsDead ( kirov ) do
14336: LD_INT 71
14338: PPUSH
14339: CALL_OW 301
14343: IFFALSE 14360
14345: GO 14347
14347: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14348: LD_EXP 25
14352: PPUSH
14353: LD_STRING DH-1-Kirov
14355: PPUSH
14356: CALL_OW 88
14360: END
// every 0 0$1 trigger See ( 2 , beria ) do
14361: LD_INT 2
14363: PPUSH
14364: LD_INT 106
14366: PPUSH
14367: CALL_OW 292
14371: IFFALSE 14388
14373: GO 14375
14375: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14376: LD_EXP 25
14380: PPUSH
14381: LD_STRING DH-1-Beria
14383: PPUSH
14384: CALL_OW 88
14388: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14389: LD_INT 2
14391: PPUSH
14392: LD_INT 112
14394: PPUSH
14395: CALL_OW 292
14399: IFFALSE 14666
14401: GO 14403
14403: DISABLE
// begin DialogueOn ;
14404: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14408: LD_INT 112
14410: PPUSH
14411: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14415: LD_EXP 25
14419: PPUSH
14420: LD_STRING DH-1-Kagan
14422: PPUSH
14423: CALL_OW 88
// if Kamil then
14427: LD_EXP 29
14431: IFFALSE 14469
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14433: LD_EXP 29
14437: PPUSH
14438: LD_STRING DKam-Kagan-2
14440: PPUSH
14441: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14445: LD_EXP 26
14449: PPUSH
14450: LD_STRING DG-Kagan-3
14452: PPUSH
14453: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14457: LD_EXP 26
14461: PPUSH
14462: LD_STRING DG-Kagan-4
14464: PPUSH
14465: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14469: LD_STRING KaganBase
14471: PPUSH
14472: CALL_OW 97
14476: PUSH
14477: LD_INT 1
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14580
14485: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14486: LD_EXP 25
14490: PPUSH
14491: LD_STRING DH-Kagan-5
14493: PPUSH
14494: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14498: LD_EXP 25
14502: PPUSH
14503: LD_STRING DH-Kagan-6
14505: PPUSH
14506: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14510: LD_EXP 36
14514: PPUSH
14515: LD_STRING DShar-Kagan-7
14517: PPUSH
14518: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14522: LD_EXP 25
14526: PPUSH
14527: LD_STRING DH-Kagan-8
14529: PPUSH
14530: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14534: LD_EXP 25
14538: PPUSH
14539: LD_STRING DH-Kagan-9
14541: PPUSH
14542: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14546: LD_EXP 36
14550: PPUSH
14551: LD_STRING DShar-Kagan-10
14553: PPUSH
14554: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14558: LD_EXP 25
14562: PPUSH
14563: LD_STRING DH-Kagan-11
14565: PPUSH
14566: CALL_OW 88
// kaganCaptured := true ;
14570: LD_ADDR_EXP 24
14574: PUSH
14575: LD_INT 1
14577: ST_TO_ADDR
// end ; 2 :
14578: GO 14662
14580: LD_INT 2
14582: DOUBLE
14583: EQUAL
14584: IFTRUE 14588
14586: GO 14661
14588: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14589: LD_INT 22
14591: PUSH
14592: LD_INT 8
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PPUSH
14599: CALL_OW 69
14603: PUSH
14604: LD_EXP 35
14608: AND
14609: IFFALSE 14623
// Say ( Heike , DH-Kagan-a-5 ) ;
14611: LD_EXP 25
14615: PPUSH
14616: LD_STRING DH-Kagan-a-5
14618: PPUSH
14619: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14623: LD_EXP 25
14627: PPUSH
14628: LD_STRING DH-Kagan-a-6
14630: PPUSH
14631: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14635: LD_EXP 25
14639: PPUSH
14640: LD_STRING DH-Kagan-a-7
14642: PPUSH
14643: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14647: LD_EXP 26
14651: PPUSH
14652: LD_STRING DG-Kagan-a-8
14654: PPUSH
14655: CALL_OW 88
// end ; end ;
14659: GO 14662
14661: POP
// DialogueOff ;
14662: CALL_OW 7
// end ;
14666: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14667: LD_EXP 18
14671: PUSH
14672: LD_INT 112
14674: PPUSH
14675: CALL_OW 255
14679: PUSH
14680: LD_INT 2
14682: EQUAL
14683: OR
14684: IFFALSE 14696
14686: GO 14688
14688: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14689: LD_STRING KaganDone
14691: PPUSH
14692: CALL_OW 337
14696: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14697: LD_EXP 6
14701: PUSH
14702: LD_EXP 48
14706: PPUSH
14707: LD_INT 95
14709: PUSH
14710: LD_INT 19
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 72
14721: AND
14722: IFFALSE 14799
14724: GO 14726
14726: DISABLE
// begin DialogueOn ;
14727: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14731: LD_INT 63
14733: PPUSH
14734: LD_INT 32
14736: PPUSH
14737: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14741: LD_INT 63
14743: PPUSH
14744: LD_INT 32
14746: PPUSH
14747: LD_INT 2
14749: PPUSH
14750: LD_INT 12
14752: NEG
14753: PPUSH
14754: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14758: LD_EXP 25
14762: PPUSH
14763: LD_STRING DH-Omicron-1
14765: PPUSH
14766: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14770: LD_EXP 27
14774: PPUSH
14775: LD_STRING DM-Omicron-2
14777: PPUSH
14778: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14782: LD_INT 63
14784: PPUSH
14785: LD_INT 32
14787: PPUSH
14788: LD_INT 2
14790: PPUSH
14791: CALL_OW 331
// DialogueOff ;
14795: CALL_OW 7
// end ;
14799: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14800: LD_INT 2
14802: PPUSH
14803: LD_EXP 50
14807: PPUSH
14808: CALL_OW 292
14812: PUSH
14813: LD_EXP 50
14817: PPUSH
14818: CALL_OW 255
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: OR
14827: PUSH
14828: LD_INT 106
14830: PPUSH
14831: CALL_OW 255
14835: PUSH
14836: LD_INT 2
14838: EQUAL
14839: OR
14840: PUSH
14841: LD_EXP 50
14845: PPUSH
14846: CALL_OW 302
14850: AND
14851: PUSH
14852: LD_EXP 25
14856: PPUSH
14857: CALL_OW 302
14861: AND
14862: PUSH
14863: LD_EXP 35
14867: PPUSH
14868: CALL_OW 302
14872: AND
14873: IFFALSE 15494
14875: GO 14877
14877: DISABLE
14878: LD_INT 0
14880: PPUSH
14881: PPUSH
14882: PPUSH
14883: PPUSH
14884: PPUSH
// begin DialogueOn ;
14885: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14889: LD_INT 111
14891: PPUSH
14892: LD_INT 90
14894: PPUSH
14895: LD_INT 2
14897: PPUSH
14898: LD_INT 6
14900: NEG
14901: PPUSH
14902: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14906: LD_INT 111
14908: PPUSH
14909: LD_INT 90
14911: PPUSH
14912: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14916: LD_EXP 35
14920: PPUSH
14921: LD_STRING DA-Cap-1
14923: PPUSH
14924: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14928: LD_EXP 25
14932: PPUSH
14933: LD_STRING DH-Cap-2
14935: PPUSH
14936: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14940: LD_INT 111
14942: PPUSH
14943: LD_INT 90
14945: PPUSH
14946: LD_INT 2
14948: PPUSH
14949: CALL_OW 331
// DialogueOff ;
14953: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14957: LD_INT 35
14959: PPUSH
14960: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) ;
14964: LD_EXP 17
14968: PUSH
14969: LD_INT 106
14971: PPUSH
14972: CALL_OW 255
14976: PUSH
14977: LD_INT 2
14979: EQUAL
14980: OR
14981: PUSH
14982: LD_EXP 50
14986: PPUSH
14987: CALL_OW 255
14991: PUSH
14992: LD_INT 2
14994: EQUAL
14995: OR
14996: PUSH
14997: LD_EXP 50
15001: PPUSH
15002: CALL_OW 302
15006: AND
15007: PUSH
15008: LD_EXP 35
15012: PPUSH
15013: CALL_OW 302
15017: AND
15018: PUSH
15019: LD_INT 2
15021: PPUSH
15022: CALL_OW 463
15026: NOT
15027: AND
15028: IFFALSE 14957
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_EXP 37
15039: PUSH
15040: LD_EXP 28
15044: PUSH
15045: LD_EXP 29
15049: PUSH
15050: LD_EXP 31
15054: PUSH
15055: LD_EXP 30
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: UNION
15066: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
15067: LD_ADDR_VAR 0 2
15071: PUSH
15072: LD_VAR 0 2
15076: PPUSH
15077: LD_INT 50
15079: PUSH
15080: EMPTY
15081: LIST
15082: PPUSH
15083: CALL_OW 72
15087: ST_TO_ADDR
// if tmp < 2 then
15088: LD_VAR 0 2
15092: PUSH
15093: LD_INT 2
15095: LESS
15096: IFFALSE 15108
// q := 2 else
15098: LD_ADDR_VAR 0 4
15102: PUSH
15103: LD_INT 2
15105: ST_TO_ADDR
15106: GO 15121
// q := Query ( LabCap ) ;
15108: LD_ADDR_VAR 0 4
15112: PUSH
15113: LD_STRING LabCap
15115: PPUSH
15116: CALL_OW 97
15120: ST_TO_ADDR
// case q of 1 :
15121: LD_VAR 0 4
15125: PUSH
15126: LD_INT 1
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15458
15134: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15135: LD_INT 2
15137: PPUSH
15138: LD_EXP 50
15142: PPUSH
15143: CALL_OW 471
// labCaptured := true ;
15147: LD_ADDR_EXP 21
15151: PUSH
15152: LD_INT 1
15154: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15155: LD_EXP 25
15159: PPUSH
15160: LD_STRING DH-Cap-a-1
15162: PPUSH
15163: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15167: LD_EXP 35
15171: PPUSH
15172: LD_STRING DA-Cap-a-2
15174: PPUSH
15175: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
15179: LD_ADDR_VAR 0 5
15183: PUSH
15184: LD_EXP 35
15188: PUSH
15189: LD_INT -3
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT -2
15198: PUSH
15199: LD_INT -4
15201: PUSH
15202: LD_EXP 25
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: ADD
15212: PUSH
15213: LD_INT -3
15215: PUSH
15216: EMPTY
15217: LIST
15218: ADD
15219: PUSH
15220: LD_VAR 0 2
15224: ADD
15225: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15226: LD_ADDR_VAR 0 3
15230: PUSH
15231: LD_STRING Select two characters to go with Aviradze
15233: PPUSH
15234: LD_INT 2
15236: PPUSH
15237: LD_INT 2
15239: PPUSH
15240: LD_VAR 0 5
15244: PPUSH
15245: EMPTY
15246: PPUSH
15247: CALL_OW 42
15251: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15252: LD_EXP 50
15256: PPUSH
15257: LD_INT 8
15259: PPUSH
15260: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15264: LD_EXP 35
15268: PPUSH
15269: LD_INT 8
15271: PPUSH
15272: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15276: LD_ADDR_EXP 39
15280: PUSH
15281: LD_EXP 35
15285: PUSH
15286: EMPTY
15287: LIST
15288: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15289: LD_EXP 35
15293: PPUSH
15294: CALL_OW 310
15298: IFFALSE 15309
// ComExit ( Aviradze ) ;
15300: LD_EXP 35
15304: PPUSH
15305: CALL 867 0 1
// wait ( 3 ) ;
15309: LD_INT 3
15311: PPUSH
15312: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15316: LD_EXP 35
15320: PPUSH
15321: LD_EXP 50
15325: PPUSH
15326: CALL_OW 120
// for i := 1 to 2 do
15330: LD_ADDR_VAR 0 1
15334: PUSH
15335: DOUBLE
15336: LD_INT 1
15338: DEC
15339: ST_TO_ADDR
15340: LD_INT 2
15342: PUSH
15343: FOR_TO
15344: IFFALSE 15447
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15346: LD_ADDR_EXP 39
15350: PUSH
15351: LD_EXP 39
15355: PUSH
15356: LD_VAR 0 3
15360: PUSH
15361: LD_VAR 0 1
15365: ARRAY
15366: UNION
15367: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15368: LD_VAR 0 3
15372: PUSH
15373: LD_VAR 0 1
15377: ARRAY
15378: PPUSH
15379: LD_INT 8
15381: PPUSH
15382: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15386: LD_VAR 0 3
15390: PUSH
15391: LD_VAR 0 1
15395: ARRAY
15396: PPUSH
15397: CALL_OW 310
15401: IFFALSE 15418
// ComExit ( tmp2 [ i ] ) ;
15403: LD_VAR 0 3
15407: PUSH
15408: LD_VAR 0 1
15412: ARRAY
15413: PPUSH
15414: CALL 867 0 1
// wait ( 3 ) ;
15418: LD_INT 3
15420: PPUSH
15421: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15425: LD_VAR 0 3
15429: PUSH
15430: LD_VAR 0 1
15434: ARRAY
15435: PPUSH
15436: LD_EXP 50
15440: PPUSH
15441: CALL_OW 120
// end ;
15445: GO 15343
15447: POP
15448: POP
// SetAchievement ( ACH_LAB ) ;
15449: LD_STRING ACH_LAB
15451: PPUSH
15452: CALL_OW 543
// end ; 2 :
15456: GO 15494
15458: LD_INT 2
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15493
15466: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15467: LD_EXP 25
15471: PPUSH
15472: LD_STRING DH-Cap-b-1
15474: PPUSH
15475: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15479: LD_EXP 35
15483: PPUSH
15484: LD_STRING DA-Cap-b-2
15486: PPUSH
15487: CALL_OW 88
// end ; end ;
15491: GO 15494
15493: POP
// end ;
15494: PPOPN 5
15496: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15497: LD_INT 10
15499: PPUSH
15500: LD_INT 22
15502: PUSH
15503: LD_INT 2
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 30
15512: PUSH
15513: LD_INT 31
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PPUSH
15524: CALL_OW 70
15528: PUSH
15529: LD_INT 2
15531: GREATEREQUAL
15532: IFFALSE 15544
15534: GO 15536
15536: DISABLE
// SetAchievement ( ACH_KING ) ;
15537: LD_STRING ACH_KING
15539: PPUSH
15540: CALL_OW 543
15544: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15545: LD_EXP 11
15549: NOT
15550: PUSH
15551: LD_INT 10
15553: PPUSH
15554: LD_INT 22
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 30
15569: PUSH
15570: LD_INT 31
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 30
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 70
15600: AND
15601: IFFALSE 15621
15603: GO 15605
15605: DISABLE
// begin hillBase := true ;
15606: LD_ADDR_EXP 15
15610: PUSH
15611: LD_INT 1
15613: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15614: LD_STRING HillDone
15616: PPUSH
15617: CALL_OW 337
// end ;
15621: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15622: LD_EXP 30
15626: PUSH
15627: LD_EXP 30
15631: PPUSH
15632: CALL_OW 256
15636: PUSH
15637: LD_INT 3
15639: LESS
15640: AND
15641: IFFALSE 15687
15643: GO 15645
15645: DISABLE
// begin DialogueOn ;
15646: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15650: LD_EXP 30
15654: PPUSH
15655: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15659: LD_EXP 30
15663: PPUSH
15664: LD_STRING DK-Kkilled-1
15666: PPUSH
15667: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15671: LD_EXP 25
15675: PPUSH
15676: LD_STRING DH-Kkilled-2
15678: PPUSH
15679: CALL_OW 88
// DialogueOff ;
15683: CALL_OW 7
// end ;
15687: END
// every 0 0$1 trigger kaiaKilledByRussian do
15688: LD_EXP 23
15692: IFFALSE 15709
15694: GO 15696
15696: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15697: LD_EXP 25
15701: PPUSH
15702: LD_STRING DH-Kkilled-3
15704: PPUSH
15705: CALL_OW 88
15709: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
15710: LD_EXP 16
15714: PUSH
15715: LD_INT 106
15717: PPUSH
15718: CALL_OW 255
15722: PUSH
15723: LD_INT 2
15725: EQUAL
15726: PUSH
15727: LD_EXP 17
15731: OR
15732: AND
15733: PUSH
15734: LD_EXP 18
15738: PUSH
15739: LD_EXP 24
15743: PUSH
15744: LD_INT 112
15746: PPUSH
15747: CALL_OW 255
15751: PUSH
15752: LD_INT 2
15754: EQUAL
15755: AND
15756: OR
15757: AND
15758: IFFALSE 16940
15760: GO 15762
15762: DISABLE
15763: LD_INT 0
15765: PPUSH
15766: PPUSH
15767: PPUSH
15768: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15769: LD_STRING GoToWest
15771: PPUSH
15772: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15776: LD_INT 17
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15786: LD_INT 35
15788: PPUSH
15789: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15793: LD_ADDR_VAR 0 2
15797: PUSH
15798: LD_INT 17
15800: PPUSH
15801: LD_INT 22
15803: PUSH
15804: LD_INT 2
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 2
15813: PUSH
15814: LD_INT 21
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 21
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 3
15836: PUSH
15837: LD_INT 58
15839: PUSH
15840: EMPTY
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PPUSH
15860: CALL_OW 70
15864: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15865: LD_ADDR_VAR 0 3
15869: PUSH
15870: LD_INT 22
15872: PUSH
15873: LD_INT 2
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 3
15882: PUSH
15883: LD_INT 55
15885: PUSH
15886: EMPTY
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 2
15895: PUSH
15896: LD_INT 21
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 2
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: LD_INT 58
15921: PUSH
15922: EMPTY
15923: LIST
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: PPUSH
15943: CALL_OW 69
15947: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15948: LD_VAR 0 2
15952: PUSH
15953: LD_INT 0
15955: PLUS
15956: PUSH
15957: LD_VAR 0 3
15961: PUSH
15962: LD_INT 0
15964: PLUS
15965: EQUAL
15966: IFFALSE 15786
// SaveCharacters ( Heike , 04_1_Heike ) ;
15968: LD_EXP 25
15972: PPUSH
15973: LD_STRING 04_1_Heike
15975: PPUSH
15976: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15980: LD_EXP 35
15984: PUSH
15985: LD_EXP 35
15989: PUSH
15990: LD_EXP 39
15994: IN
15995: NOT
15996: AND
15997: IFFALSE 16013
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15999: LD_EXP 35
16003: PPUSH
16004: LD_STRING 04_1_Aviradze
16006: PPUSH
16007: CALL_OW 38
16011: GO 16031
// if Aviradze then
16013: LD_EXP 35
16017: IFFALSE 16031
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
16019: LD_EXP 35
16023: PPUSH
16024: LD_STRING 04_1_Aviradze_L
16026: PPUSH
16027: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
16031: LD_EXP 28
16035: PUSH
16036: LD_EXP 28
16040: PUSH
16041: LD_EXP 39
16045: IN
16046: NOT
16047: AND
16048: IFFALSE 16064
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
16050: LD_EXP 28
16054: PPUSH
16055: LD_STRING 04_1_Ibrahim
16057: PPUSH
16058: CALL_OW 38
16062: GO 16082
// if Ibrahim then
16064: LD_EXP 28
16068: IFFALSE 16082
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
16070: LD_EXP 28
16074: PPUSH
16075: LD_STRING 04_1_Ibrahim_L
16077: PPUSH
16078: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
16082: LD_EXP 29
16086: PUSH
16087: LD_EXP 29
16091: PUSH
16092: LD_EXP 39
16096: IN
16097: NOT
16098: AND
16099: IFFALSE 16115
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16101: LD_EXP 29
16105: PPUSH
16106: LD_STRING 04_1_Kamil
16108: PPUSH
16109: CALL_OW 38
16113: GO 16133
// if Kamil then
16115: LD_EXP 29
16119: IFFALSE 16133
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16121: LD_EXP 29
16125: PPUSH
16126: LD_STRING 04_1_Kamil_L
16128: PPUSH
16129: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16133: LD_EXP 31
16137: PUSH
16138: LD_EXP 31
16142: PUSH
16143: LD_EXP 39
16147: IN
16148: NOT
16149: AND
16150: IFFALSE 16166
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16152: LD_EXP 31
16156: PPUSH
16157: LD_STRING 04_1_Sophia
16159: PPUSH
16160: CALL_OW 38
16164: GO 16184
// if Sophia then
16166: LD_EXP 31
16170: IFFALSE 16184
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16172: LD_EXP 31
16176: PPUSH
16177: LD_STRING 04_1_Sophia_L
16179: PPUSH
16180: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16184: LD_EXP 30
16188: PUSH
16189: LD_EXP 30
16193: PUSH
16194: LD_EXP 39
16198: IN
16199: NOT
16200: AND
16201: IFFALSE 16217
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16203: LD_EXP 30
16207: PPUSH
16208: LD_STRING 04_1_Kaia
16210: PPUSH
16211: CALL_OW 38
16215: GO 16235
// if Kaia then
16217: LD_EXP 30
16221: IFFALSE 16235
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16223: LD_EXP 30
16227: PPUSH
16228: LD_STRING 04_1_Kaia_L
16230: PPUSH
16231: CALL_OW 38
// if Givi then
16235: LD_EXP 26
16239: IFFALSE 16253
// SaveCharacters ( Givi , 04_1_Givi ) ;
16241: LD_EXP 26
16245: PPUSH
16246: LD_STRING 04_1_Givi
16248: PPUSH
16249: CALL_OW 38
// if Mike then
16253: LD_EXP 27
16257: IFFALSE 16271
// SaveCharacters ( Mike , 04_1_Mike ) ;
16259: LD_EXP 27
16263: PPUSH
16264: LD_STRING 04_1_Mike
16266: PPUSH
16267: CALL_OW 38
// if Markov then
16271: LD_EXP 32
16275: IFFALSE 16289
// SaveCharacters ( Markov , 04_1_Markov ) ;
16277: LD_EXP 32
16281: PPUSH
16282: LD_STRING 04_1_Markov
16284: PPUSH
16285: CALL_OW 38
// if Kurt then
16289: LD_EXP 34
16293: IFFALSE 16307
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
16295: LD_EXP 34
16299: PPUSH
16300: LD_STRING 04_1_Kurt
16302: PPUSH
16303: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
16307: LD_EXP 37
16311: PUSH
16312: LD_EXP 39
16316: DIFF
16317: IFFALSE 16337
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16319: LD_EXP 37
16323: PUSH
16324: LD_EXP 39
16328: DIFF
16329: PPUSH
16330: LD_STRING 04_1_others
16332: PPUSH
16333: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16337: LD_EXP 39
16341: PUSH
16342: LD_EXP 37
16346: AND
16347: IFFALSE 16432
// begin tmp := [ ] ;
16349: LD_ADDR_VAR 0 2
16353: PUSH
16354: EMPTY
16355: ST_TO_ADDR
// for i in heikeSecondSquad do
16356: LD_ADDR_VAR 0 1
16360: PUSH
16361: LD_EXP 37
16365: PUSH
16366: FOR_IN
16367: IFFALSE 16412
// if i in aviradzeSquad then
16369: LD_VAR 0 1
16373: PUSH
16374: LD_EXP 39
16378: IN
16379: IFFALSE 16410
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16381: LD_ADDR_VAR 0 2
16385: PUSH
16386: LD_VAR 0 2
16390: PPUSH
16391: LD_VAR 0 2
16395: PUSH
16396: LD_INT 1
16398: PLUS
16399: PPUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 1
16409: ST_TO_ADDR
16410: GO 16366
16412: POP
16413: POP
// if tmp then
16414: LD_VAR 0 2
16418: IFFALSE 16432
// SaveCharacters ( tmp , 04_1_others_L ) ;
16420: LD_VAR 0 2
16424: PPUSH
16425: LD_STRING 04_1_others_L
16427: PPUSH
16428: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16432: LD_ADDR_VAR 0 2
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_INT 2
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 23
16449: PUSH
16450: LD_INT 0
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PPUSH
16461: CALL_OW 69
16465: ST_TO_ADDR
// if tmp then
16466: LD_VAR 0 2
16470: IFFALSE 16484
// SaveCharacters ( tmp , 04_1_apes ) ;
16472: LD_VAR 0 2
16476: PPUSH
16477: LD_STRING 04_1_apes
16479: PPUSH
16480: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16484: LD_ADDR_VAR 0 2
16488: PUSH
16489: LD_INT 17
16491: PPUSH
16492: LD_INT 21
16494: PUSH
16495: LD_INT 2
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PPUSH
16502: CALL_OW 70
16506: ST_TO_ADDR
// if tmp then
16507: LD_VAR 0 2
16511: IFFALSE 16805
// begin tmp2 := [ ] ;
16513: LD_ADDR_VAR 0 3
16517: PUSH
16518: EMPTY
16519: ST_TO_ADDR
// for i in tmp do
16520: LD_ADDR_VAR 0 1
16524: PUSH
16525: LD_VAR 0 2
16529: PUSH
16530: FOR_IN
16531: IFFALSE 16791
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
16533: LD_VAR 0 1
16537: PPUSH
16538: CALL_OW 264
16542: PUSH
16543: LD_INT 32
16545: PUSH
16546: LD_INT 12
16548: PUSH
16549: LD_INT 51
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: IN
16557: IFFALSE 16694
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16559: LD_ADDR_VAR 0 4
16563: PUSH
16564: LD_VAR 0 1
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 289
16576: PUSH
16577: LD_VAR 0 1
16581: PPUSH
16582: LD_INT 2
16584: PPUSH
16585: CALL_OW 289
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_VAR 0 3
16603: PPUSH
16604: LD_VAR 0 3
16608: PUSH
16609: LD_INT 1
16611: PLUS
16612: PPUSH
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 265
16622: PUSH
16623: LD_VAR 0 1
16627: PPUSH
16628: CALL_OW 262
16632: PUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 263
16642: PUSH
16643: LD_VAR 0 1
16647: PPUSH
16648: CALL_OW 264
16652: PUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 248
16662: PUSH
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 256
16672: PUSH
16673: LD_VAR 0 4
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: PPUSH
16687: CALL_OW 1
16691: ST_TO_ADDR
// end else
16692: GO 16789
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
16694: LD_ADDR_VAR 0 3
16698: PUSH
16699: LD_VAR 0 3
16703: PPUSH
16704: LD_VAR 0 3
16708: PUSH
16709: LD_INT 1
16711: PLUS
16712: PPUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 265
16722: PUSH
16723: LD_VAR 0 1
16727: PPUSH
16728: CALL_OW 262
16732: PUSH
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 263
16742: PUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 264
16752: PUSH
16753: LD_VAR 0 1
16757: PPUSH
16758: CALL_OW 248
16762: PUSH
16763: LD_VAR 0 1
16767: PPUSH
16768: CALL_OW 256
16772: PUSH
16773: EMPTY
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: PPUSH
16784: CALL_OW 1
16788: ST_TO_ADDR
16789: GO 16530
16791: POP
16792: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16793: LD_VAR 0 3
16797: PPUSH
16798: LD_STRING 04_1_Vehicles
16800: PPUSH
16801: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16805: LD_EXP 21
16809: PPUSH
16810: LD_STRING 04_1_RuLabCaptured
16812: PPUSH
16813: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16817: LD_EXP 19
16821: PPUSH
16822: LD_STRING 04_1_EscapeCounter
16824: PPUSH
16825: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16829: LD_EXP 15
16833: PPUSH
16834: LD_STRING 04_1_BaseHill
16836: PPUSH
16837: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16841: LD_OWVAR 1
16845: PPUSH
16846: LD_STRING 04_1_Time
16848: PPUSH
16849: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16853: LD_EXP 14
16857: PPUSH
16858: LD_STRING 04_1_DeadCounter
16860: PPUSH
16861: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16865: LD_EXP 24
16869: PUSH
16870: LD_INT 112
16872: PPUSH
16873: CALL_OW 255
16877: MUL
16878: PUSH
16879: LD_INT 2
16881: EQUAL
16882: PPUSH
16883: LD_STRING 04_1_KaganCaptured
16885: PPUSH
16886: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16890: LD_INT 22
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 34
16902: PUSH
16903: LD_INT 26
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PPUSH
16914: CALL_OW 69
16918: PUSH
16919: LD_INT 0
16921: PLUS
16922: PPUSH
16923: LD_STRING 04_1_Flamethrower
16925: PPUSH
16926: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16930: LD_INT 1
16932: PPUSH
16933: LD_STRING __x1\04_cont2
16935: PPUSH
16936: CALL_OW 340
// end ; end_of_file
16940: PPOPN 4
16942: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 266
16952: PUSH
16953: LD_INT 0
16955: EQUAL
16956: PUSH
16957: LD_VAR 0 1
16961: PPUSH
16962: CALL_OW 255
16966: PUSH
16967: LD_INT 2
16969: EQUAL
16970: AND
16971: IFFALSE 16981
// baseConstructed := true ;
16973: LD_ADDR_EXP 3
16977: PUSH
16978: LD_INT 1
16980: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16981: LD_VAR 0 1
16985: PPUSH
16986: CALL_OW 266
16990: PUSH
16991: LD_INT 6
16993: EQUAL
16994: PUSH
16995: LD_VAR 0 1
16999: PPUSH
17000: CALL_OW 255
17004: PUSH
17005: LD_INT 2
17007: EQUAL
17008: AND
17009: IFFALSE 17019
// labConstructed := true ;
17011: LD_ADDR_EXP 4
17015: PUSH
17016: LD_INT 1
17018: ST_TO_ADDR
// end ;
17019: PPOPN 1
17021: END
// on UnitDestroyed ( un ) do begin if un = Heike then
17022: LD_VAR 0 1
17026: PUSH
17027: LD_EXP 25
17031: EQUAL
17032: IFFALSE 17041
// YouLost ( Heike ) ;
17034: LD_STRING Heike
17036: PPUSH
17037: CALL_OW 104
// if un = Omar then
17041: LD_VAR 0 1
17045: PUSH
17046: LD_EXP 33
17050: EQUAL
17051: IFFALSE 17060
// YouLost ( Omar ) ;
17053: LD_STRING Omar
17055: PPUSH
17056: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17060: LD_VAR 0 1
17064: PUSH
17065: LD_INT 22
17067: PUSH
17068: LD_INT 2
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 23
17077: PUSH
17078: LD_INT 2
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 21
17087: PUSH
17088: LD_INT 1
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 69
17104: IN
17105: IFFALSE 17121
// loseCounter := loseCounter + 1 ;
17107: LD_ADDR_EXP 14
17111: PUSH
17112: LD_EXP 14
17116: PUSH
17117: LD_INT 1
17119: PLUS
17120: ST_TO_ADDR
// if un = omikron then
17121: LD_VAR 0 1
17125: PUSH
17126: LD_INT 64
17128: EQUAL
17129: IFFALSE 17139
// omicronFall := true ;
17131: LD_ADDR_EXP 13
17135: PUSH
17136: LD_INT 1
17138: ST_TO_ADDR
// if un = kirov then
17139: LD_VAR 0 1
17143: PUSH
17144: LD_INT 71
17146: EQUAL
17147: IFFALSE 17164
// begin ChangeMissionObjectives ( KirovDone ) ;
17149: LD_STRING KirovDone
17151: PPUSH
17152: CALL_OW 337
// kirovDestroyed := true ;
17156: LD_ADDR_EXP 16
17160: PUSH
17161: LD_INT 1
17163: ST_TO_ADDR
// end ; if un = beria then
17164: LD_VAR 0 1
17168: PUSH
17169: LD_INT 106
17171: EQUAL
17172: IFFALSE 17189
// begin ChangeMissionObjectives ( BeriaDone ) ;
17174: LD_STRING BeriaDone
17176: PPUSH
17177: CALL_OW 337
// beriaDestroyed := true ;
17181: LD_ADDR_EXP 17
17185: PUSH
17186: LD_INT 1
17188: ST_TO_ADDR
// end ; if un = kagan then
17189: LD_VAR 0 1
17193: PUSH
17194: LD_INT 112
17196: EQUAL
17197: IFFALSE 17207
// kaganDestroyed := true ;
17199: LD_ADDR_EXP 18
17203: PUSH
17204: LD_INT 1
17206: ST_TO_ADDR
// if un in russianPatrol then
17207: LD_VAR 0 1
17211: PUSH
17212: LD_EXP 47
17216: IN
17217: IFFALSE 17235
// russianPatrol := russianPatrol diff un ;
17219: LD_ADDR_EXP 47
17223: PUSH
17224: LD_EXP 47
17228: PUSH
17229: LD_VAR 0 1
17233: DIFF
17234: ST_TO_ADDR
// if un in russianOmicronAttackers then
17235: LD_VAR 0 1
17239: PUSH
17240: LD_EXP 48
17244: IN
17245: IFFALSE 17263
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17247: LD_ADDR_EXP 48
17251: PUSH
17252: LD_EXP 48
17256: PUSH
17257: LD_VAR 0 1
17261: DIFF
17262: ST_TO_ADDR
// end ;
17263: PPOPN 1
17265: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17266: LD_INT 0
17268: PPUSH
17269: PPUSH
17270: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17271: LD_VAR 0 1
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 22
17281: PUSH
17282: LD_INT 3
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 22
17291: PUSH
17292: LD_INT 4
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 22
17301: PUSH
17302: LD_INT 6
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: PUSH
17315: LD_INT 30
17317: PUSH
17318: LD_INT 32
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 69
17333: IN
17334: IFFALSE 17507
// begin sol := UnitsInside ( un ) ;
17336: LD_ADDR_VAR 0 3
17340: PUSH
17341: LD_VAR 0 1
17345: PPUSH
17346: CALL_OW 313
17350: ST_TO_ADDR
// if not sol then
17351: LD_VAR 0 3
17355: NOT
17356: IFFALSE 17360
// exit ;
17358: GO 17507
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17360: LD_ADDR_VAR 0 4
17364: PUSH
17365: LD_INT 22
17367: PUSH
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 255
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: LD_INT 2
17384: PUSH
17385: LD_INT 30
17387: PUSH
17388: LD_INT 4
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 30
17397: PUSH
17398: LD_INT 5
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: LIST
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PPUSH
17414: CALL_OW 69
17418: ST_TO_ADDR
// if not nearestBarracks then
17419: LD_VAR 0 4
17423: NOT
17424: IFFALSE 17428
// exit ;
17426: GO 17507
// for i in nearestBarracks do
17428: LD_ADDR_VAR 0 2
17432: PUSH
17433: LD_VAR 0 4
17437: PUSH
17438: FOR_IN
17439: IFFALSE 17474
// if UnitsInside ( i ) = 6 then
17441: LD_VAR 0 2
17445: PPUSH
17446: CALL_OW 313
17450: PUSH
17451: LD_INT 6
17453: EQUAL
17454: IFFALSE 17472
// nearestBarracks := nearestBarracks diff i ;
17456: LD_ADDR_VAR 0 4
17460: PUSH
17461: LD_VAR 0 4
17465: PUSH
17466: LD_VAR 0 2
17470: DIFF
17471: ST_TO_ADDR
17472: GO 17438
17474: POP
17475: POP
// if not nearestBarracks then
17476: LD_VAR 0 4
17480: NOT
17481: IFFALSE 17485
// exit ;
17483: GO 17507
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17485: LD_VAR 0 3
17489: PUSH
17490: LD_INT 1
17492: ARRAY
17493: PPUSH
17494: LD_VAR 0 4
17498: PUSH
17499: LD_INT 1
17501: ARRAY
17502: PPUSH
17503: CALL_OW 120
// end ; end ;
17507: PPOPN 4
17509: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17510: LD_INT 0
17512: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17513: LD_EXP 8
17517: NOT
17518: PUSH
17519: LD_EXP 5
17523: NOT
17524: OR
17525: IFFALSE 17529
// exit ;
17527: GO 17597
// for i in camAreas do
17529: LD_ADDR_VAR 0 5
17533: PUSH
17534: LD_EXP 8
17538: PUSH
17539: FOR_IN
17540: IFFALSE 17595
// if InArea ( x , y , i ) then
17542: LD_VAR 0 3
17546: PPUSH
17547: LD_VAR 0 4
17551: PPUSH
17552: LD_VAR 0 5
17556: PPUSH
17557: CALL_OW 309
17561: IFFALSE 17593
// begin SetAreaMapShow ( i , 0 ) ;
17563: LD_VAR 0 5
17567: PPUSH
17568: LD_INT 0
17570: PPUSH
17571: CALL_OW 424
// camAreas := camAreas diff i ;
17575: LD_ADDR_EXP 8
17579: PUSH
17580: LD_EXP 8
17584: PUSH
17585: LD_VAR 0 5
17589: DIFF
17590: ST_TO_ADDR
// break ;
17591: GO 17595
// end ;
17593: GO 17539
17595: POP
17596: POP
// end ;
17597: PPOPN 5
17599: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17600: LD_VAR 0 1
17604: PUSH
17605: LD_INT 2
17607: EQUAL
17608: PUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 5
17616: PUSH
17617: LD_INT 8
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: IN
17624: AND
17625: IFFALSE 17634
// YouLost ( Ally ) ;
17627: LD_STRING Ally
17629: PPUSH
17630: CALL_OW 104
// end ;
17634: PPOPN 2
17636: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17637: LD_VAR 0 1
17641: PUSH
17642: LD_EXP 30
17646: EQUAL
17647: PUSH
17648: LD_VAR 0 2
17652: PUSH
17653: LD_INT 3
17655: PUSH
17656: LD_INT 6
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: IN
17663: AND
17664: IFFALSE 17695
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17666: LD_ADDR_EXP 23
17670: PUSH
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 250
17680: PUSH
17681: LD_VAR 0 1
17685: PPUSH
17686: CALL_OW 251
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: ST_TO_ADDR
// end ; end_of_file
17695: PPOPN 3
17697: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
17698: LD_EXP 11
17702: NOT
17703: PUSH
17704: LD_INT 12
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 287
17714: PUSH
17715: LD_INT 20
17717: PUSH
17718: LD_INT 16
17720: PUSH
17721: LD_INT 12
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: PUSH
17729: LD_OWVAR 67
17733: ARRAY
17734: LESS
17735: AND
17736: IFFALSE 17763
17738: GO 17740
17740: DISABLE
// begin enable ;
17741: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17742: LD_INT 1
17744: PPUSH
17745: LD_INT 5
17747: PPUSH
17748: CALL_OW 12
17752: PPUSH
17753: LD_INT 12
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: CALL_OW 55
// end ; end_of_file
17763: END
// every 0 0$1 trigger omarCountdown do
17764: LD_EXP 22
17768: IFFALSE 17820
17770: GO 17772
17772: DISABLE
// begin enable ;
17773: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17774: LD_ADDR_OWVAR 47
17778: PUSH
17779: LD_STRING #X104-1
17781: PUSH
17782: LD_EXP 22
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17791: LD_ADDR_EXP 22
17795: PUSH
17796: LD_EXP 22
17800: PUSH
17801: LD_INT 35
17803: MINUS
17804: ST_TO_ADDR
// if not omarCountdown then
17805: LD_EXP 22
17809: NOT
17810: IFFALSE 17820
// display_strings :=  ;
17812: LD_ADDR_OWVAR 47
17816: PUSH
17817: LD_STRING 
17819: ST_TO_ADDR
// end ; end_of_file
17820: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
17821: LD_VAR 0 2
17825: PUSH
17826: LD_INT 100
17828: EQUAL
17829: IFFALSE 18778
// begin if not StreamModeActive then
17831: LD_EXP 52
17835: NOT
17836: IFFALSE 17846
// StreamModeActive := true ;
17838: LD_ADDR_EXP 52
17842: PUSH
17843: LD_INT 1
17845: ST_TO_ADDR
// if p3 = 0 then
17846: LD_VAR 0 3
17850: PUSH
17851: LD_INT 0
17853: EQUAL
17854: IFFALSE 17860
// InitStreamMode ;
17856: CALL 19011 0 0
// if p3 = 1 then
17860: LD_VAR 0 3
17864: PUSH
17865: LD_INT 1
17867: EQUAL
17868: IFFALSE 17878
// sRocket := true ;
17870: LD_ADDR_EXP 57
17874: PUSH
17875: LD_INT 1
17877: ST_TO_ADDR
// if p3 = 2 then
17878: LD_VAR 0 3
17882: PUSH
17883: LD_INT 2
17885: EQUAL
17886: IFFALSE 17896
// sSpeed := true ;
17888: LD_ADDR_EXP 56
17892: PUSH
17893: LD_INT 1
17895: ST_TO_ADDR
// if p3 = 3 then
17896: LD_VAR 0 3
17900: PUSH
17901: LD_INT 3
17903: EQUAL
17904: IFFALSE 17914
// sEngine := true ;
17906: LD_ADDR_EXP 58
17910: PUSH
17911: LD_INT 1
17913: ST_TO_ADDR
// if p3 = 4 then
17914: LD_VAR 0 3
17918: PUSH
17919: LD_INT 4
17921: EQUAL
17922: IFFALSE 17932
// sSpec := true ;
17924: LD_ADDR_EXP 55
17928: PUSH
17929: LD_INT 1
17931: ST_TO_ADDR
// if p3 = 5 then
17932: LD_VAR 0 3
17936: PUSH
17937: LD_INT 5
17939: EQUAL
17940: IFFALSE 17950
// sLevel := true ;
17942: LD_ADDR_EXP 59
17946: PUSH
17947: LD_INT 1
17949: ST_TO_ADDR
// if p3 = 6 then
17950: LD_VAR 0 3
17954: PUSH
17955: LD_INT 6
17957: EQUAL
17958: IFFALSE 17968
// sArmoury := true ;
17960: LD_ADDR_EXP 60
17964: PUSH
17965: LD_INT 1
17967: ST_TO_ADDR
// if p3 = 7 then
17968: LD_VAR 0 3
17972: PUSH
17973: LD_INT 7
17975: EQUAL
17976: IFFALSE 17986
// sRadar := true ;
17978: LD_ADDR_EXP 61
17982: PUSH
17983: LD_INT 1
17985: ST_TO_ADDR
// if p3 = 8 then
17986: LD_VAR 0 3
17990: PUSH
17991: LD_INT 8
17993: EQUAL
17994: IFFALSE 18004
// sBunker := true ;
17996: LD_ADDR_EXP 62
18000: PUSH
18001: LD_INT 1
18003: ST_TO_ADDR
// if p3 = 9 then
18004: LD_VAR 0 3
18008: PUSH
18009: LD_INT 9
18011: EQUAL
18012: IFFALSE 18022
// sHack := true ;
18014: LD_ADDR_EXP 63
18018: PUSH
18019: LD_INT 1
18021: ST_TO_ADDR
// if p3 = 10 then
18022: LD_VAR 0 3
18026: PUSH
18027: LD_INT 10
18029: EQUAL
18030: IFFALSE 18040
// sFire := true ;
18032: LD_ADDR_EXP 64
18036: PUSH
18037: LD_INT 1
18039: ST_TO_ADDR
// if p3 = 11 then
18040: LD_VAR 0 3
18044: PUSH
18045: LD_INT 11
18047: EQUAL
18048: IFFALSE 18058
// sRefresh := true ;
18050: LD_ADDR_EXP 65
18054: PUSH
18055: LD_INT 1
18057: ST_TO_ADDR
// if p3 = 12 then
18058: LD_VAR 0 3
18062: PUSH
18063: LD_INT 12
18065: EQUAL
18066: IFFALSE 18076
// sExp := true ;
18068: LD_ADDR_EXP 66
18072: PUSH
18073: LD_INT 1
18075: ST_TO_ADDR
// if p3 = 13 then
18076: LD_VAR 0 3
18080: PUSH
18081: LD_INT 13
18083: EQUAL
18084: IFFALSE 18094
// sDepot := true ;
18086: LD_ADDR_EXP 67
18090: PUSH
18091: LD_INT 1
18093: ST_TO_ADDR
// if p3 = 14 then
18094: LD_VAR 0 3
18098: PUSH
18099: LD_INT 14
18101: EQUAL
18102: IFFALSE 18112
// sFlag := true ;
18104: LD_ADDR_EXP 68
18108: PUSH
18109: LD_INT 1
18111: ST_TO_ADDR
// if p3 = 15 then
18112: LD_VAR 0 3
18116: PUSH
18117: LD_INT 15
18119: EQUAL
18120: IFFALSE 18130
// sKamikadze := true ;
18122: LD_ADDR_EXP 76
18126: PUSH
18127: LD_INT 1
18129: ST_TO_ADDR
// if p3 = 16 then
18130: LD_VAR 0 3
18134: PUSH
18135: LD_INT 16
18137: EQUAL
18138: IFFALSE 18148
// sTroll := true ;
18140: LD_ADDR_EXP 77
18144: PUSH
18145: LD_INT 1
18147: ST_TO_ADDR
// if p3 = 17 then
18148: LD_VAR 0 3
18152: PUSH
18153: LD_INT 17
18155: EQUAL
18156: IFFALSE 18166
// sSlow := true ;
18158: LD_ADDR_EXP 78
18162: PUSH
18163: LD_INT 1
18165: ST_TO_ADDR
// if p3 = 18 then
18166: LD_VAR 0 3
18170: PUSH
18171: LD_INT 18
18173: EQUAL
18174: IFFALSE 18184
// sLack := true ;
18176: LD_ADDR_EXP 79
18180: PUSH
18181: LD_INT 1
18183: ST_TO_ADDR
// if p3 = 19 then
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 19
18191: EQUAL
18192: IFFALSE 18202
// sTank := true ;
18194: LD_ADDR_EXP 81
18198: PUSH
18199: LD_INT 1
18201: ST_TO_ADDR
// if p3 = 20 then
18202: LD_VAR 0 3
18206: PUSH
18207: LD_INT 20
18209: EQUAL
18210: IFFALSE 18220
// sRemote := true ;
18212: LD_ADDR_EXP 82
18216: PUSH
18217: LD_INT 1
18219: ST_TO_ADDR
// if p3 = 21 then
18220: LD_VAR 0 3
18224: PUSH
18225: LD_INT 21
18227: EQUAL
18228: IFFALSE 18238
// sPowell := true ;
18230: LD_ADDR_EXP 83
18234: PUSH
18235: LD_INT 1
18237: ST_TO_ADDR
// if p3 = 22 then
18238: LD_VAR 0 3
18242: PUSH
18243: LD_INT 22
18245: EQUAL
18246: IFFALSE 18256
// sTeleport := true ;
18248: LD_ADDR_EXP 86
18252: PUSH
18253: LD_INT 1
18255: ST_TO_ADDR
// if p3 = 23 then
18256: LD_VAR 0 3
18260: PUSH
18261: LD_INT 23
18263: EQUAL
18264: IFFALSE 18274
// sOilTower := true ;
18266: LD_ADDR_EXP 88
18270: PUSH
18271: LD_INT 1
18273: ST_TO_ADDR
// if p3 = 24 then
18274: LD_VAR 0 3
18278: PUSH
18279: LD_INT 24
18281: EQUAL
18282: IFFALSE 18292
// sShovel := true ;
18284: LD_ADDR_EXP 89
18288: PUSH
18289: LD_INT 1
18291: ST_TO_ADDR
// if p3 = 25 then
18292: LD_VAR 0 3
18296: PUSH
18297: LD_INT 25
18299: EQUAL
18300: IFFALSE 18310
// sSheik := true ;
18302: LD_ADDR_EXP 90
18306: PUSH
18307: LD_INT 1
18309: ST_TO_ADDR
// if p3 = 26 then
18310: LD_VAR 0 3
18314: PUSH
18315: LD_INT 26
18317: EQUAL
18318: IFFALSE 18328
// sEarthquake := true ;
18320: LD_ADDR_EXP 92
18324: PUSH
18325: LD_INT 1
18327: ST_TO_ADDR
// if p3 = 27 then
18328: LD_VAR 0 3
18332: PUSH
18333: LD_INT 27
18335: EQUAL
18336: IFFALSE 18346
// sAI := true ;
18338: LD_ADDR_EXP 93
18342: PUSH
18343: LD_INT 1
18345: ST_TO_ADDR
// if p3 = 28 then
18346: LD_VAR 0 3
18350: PUSH
18351: LD_INT 28
18353: EQUAL
18354: IFFALSE 18364
// sCargo := true ;
18356: LD_ADDR_EXP 96
18360: PUSH
18361: LD_INT 1
18363: ST_TO_ADDR
// if p3 = 29 then
18364: LD_VAR 0 3
18368: PUSH
18369: LD_INT 29
18371: EQUAL
18372: IFFALSE 18382
// sDLaser := true ;
18374: LD_ADDR_EXP 97
18378: PUSH
18379: LD_INT 1
18381: ST_TO_ADDR
// if p3 = 30 then
18382: LD_VAR 0 3
18386: PUSH
18387: LD_INT 30
18389: EQUAL
18390: IFFALSE 18400
// sExchange := true ;
18392: LD_ADDR_EXP 98
18396: PUSH
18397: LD_INT 1
18399: ST_TO_ADDR
// if p3 = 31 then
18400: LD_VAR 0 3
18404: PUSH
18405: LD_INT 31
18407: EQUAL
18408: IFFALSE 18418
// sFac := true ;
18410: LD_ADDR_EXP 99
18414: PUSH
18415: LD_INT 1
18417: ST_TO_ADDR
// if p3 = 32 then
18418: LD_VAR 0 3
18422: PUSH
18423: LD_INT 32
18425: EQUAL
18426: IFFALSE 18436
// sPower := true ;
18428: LD_ADDR_EXP 100
18432: PUSH
18433: LD_INT 1
18435: ST_TO_ADDR
// if p3 = 33 then
18436: LD_VAR 0 3
18440: PUSH
18441: LD_INT 33
18443: EQUAL
18444: IFFALSE 18454
// sRandom := true ;
18446: LD_ADDR_EXP 101
18450: PUSH
18451: LD_INT 1
18453: ST_TO_ADDR
// if p3 = 34 then
18454: LD_VAR 0 3
18458: PUSH
18459: LD_INT 34
18461: EQUAL
18462: IFFALSE 18472
// sShield := true ;
18464: LD_ADDR_EXP 102
18468: PUSH
18469: LD_INT 1
18471: ST_TO_ADDR
// if p3 = 35 then
18472: LD_VAR 0 3
18476: PUSH
18477: LD_INT 35
18479: EQUAL
18480: IFFALSE 18490
// sTime := true ;
18482: LD_ADDR_EXP 103
18486: PUSH
18487: LD_INT 1
18489: ST_TO_ADDR
// if p3 = 36 then
18490: LD_VAR 0 3
18494: PUSH
18495: LD_INT 36
18497: EQUAL
18498: IFFALSE 18508
// sTools := true ;
18500: LD_ADDR_EXP 104
18504: PUSH
18505: LD_INT 1
18507: ST_TO_ADDR
// if p3 = 101 then
18508: LD_VAR 0 3
18512: PUSH
18513: LD_INT 101
18515: EQUAL
18516: IFFALSE 18526
// sSold := true ;
18518: LD_ADDR_EXP 69
18522: PUSH
18523: LD_INT 1
18525: ST_TO_ADDR
// if p3 = 102 then
18526: LD_VAR 0 3
18530: PUSH
18531: LD_INT 102
18533: EQUAL
18534: IFFALSE 18544
// sDiff := true ;
18536: LD_ADDR_EXP 70
18540: PUSH
18541: LD_INT 1
18543: ST_TO_ADDR
// if p3 = 103 then
18544: LD_VAR 0 3
18548: PUSH
18549: LD_INT 103
18551: EQUAL
18552: IFFALSE 18562
// sFog := true ;
18554: LD_ADDR_EXP 73
18558: PUSH
18559: LD_INT 1
18561: ST_TO_ADDR
// if p3 = 104 then
18562: LD_VAR 0 3
18566: PUSH
18567: LD_INT 104
18569: EQUAL
18570: IFFALSE 18580
// sReset := true ;
18572: LD_ADDR_EXP 74
18576: PUSH
18577: LD_INT 1
18579: ST_TO_ADDR
// if p3 = 105 then
18580: LD_VAR 0 3
18584: PUSH
18585: LD_INT 105
18587: EQUAL
18588: IFFALSE 18598
// sSun := true ;
18590: LD_ADDR_EXP 75
18594: PUSH
18595: LD_INT 1
18597: ST_TO_ADDR
// if p3 = 106 then
18598: LD_VAR 0 3
18602: PUSH
18603: LD_INT 106
18605: EQUAL
18606: IFFALSE 18616
// sTiger := true ;
18608: LD_ADDR_EXP 71
18612: PUSH
18613: LD_INT 1
18615: ST_TO_ADDR
// if p3 = 107 then
18616: LD_VAR 0 3
18620: PUSH
18621: LD_INT 107
18623: EQUAL
18624: IFFALSE 18634
// sBomb := true ;
18626: LD_ADDR_EXP 72
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// if p3 = 108 then
18634: LD_VAR 0 3
18638: PUSH
18639: LD_INT 108
18641: EQUAL
18642: IFFALSE 18652
// sWound := true ;
18644: LD_ADDR_EXP 80
18648: PUSH
18649: LD_INT 1
18651: ST_TO_ADDR
// if p3 = 109 then
18652: LD_VAR 0 3
18656: PUSH
18657: LD_INT 109
18659: EQUAL
18660: IFFALSE 18670
// sBetray := true ;
18662: LD_ADDR_EXP 84
18666: PUSH
18667: LD_INT 1
18669: ST_TO_ADDR
// if p3 = 110 then
18670: LD_VAR 0 3
18674: PUSH
18675: LD_INT 110
18677: EQUAL
18678: IFFALSE 18688
// sContamin := true ;
18680: LD_ADDR_EXP 85
18684: PUSH
18685: LD_INT 1
18687: ST_TO_ADDR
// if p3 = 111 then
18688: LD_VAR 0 3
18692: PUSH
18693: LD_INT 111
18695: EQUAL
18696: IFFALSE 18706
// sOil := true ;
18698: LD_ADDR_EXP 87
18702: PUSH
18703: LD_INT 1
18705: ST_TO_ADDR
// if p3 = 112 then
18706: LD_VAR 0 3
18710: PUSH
18711: LD_INT 112
18713: EQUAL
18714: IFFALSE 18724
// sStu := true ;
18716: LD_ADDR_EXP 91
18720: PUSH
18721: LD_INT 1
18723: ST_TO_ADDR
// if p3 = 113 then
18724: LD_VAR 0 3
18728: PUSH
18729: LD_INT 113
18731: EQUAL
18732: IFFALSE 18742
// sBazooka := true ;
18734: LD_ADDR_EXP 94
18738: PUSH
18739: LD_INT 1
18741: ST_TO_ADDR
// if p3 = 114 then
18742: LD_VAR 0 3
18746: PUSH
18747: LD_INT 114
18749: EQUAL
18750: IFFALSE 18760
// sMortar := true ;
18752: LD_ADDR_EXP 95
18756: PUSH
18757: LD_INT 1
18759: ST_TO_ADDR
// if p3 = 115 then
18760: LD_VAR 0 3
18764: PUSH
18765: LD_INT 115
18767: EQUAL
18768: IFFALSE 18778
// sRanger := true ;
18770: LD_ADDR_EXP 105
18774: PUSH
18775: LD_INT 1
18777: ST_TO_ADDR
// end ; if p2 = 101 then
18778: LD_VAR 0 2
18782: PUSH
18783: LD_INT 101
18785: EQUAL
18786: IFFALSE 18989
// begin case p3 of 1 :
18788: LD_VAR 0 3
18792: PUSH
18793: LD_INT 1
18795: DOUBLE
18796: EQUAL
18797: IFTRUE 18801
18799: GO 18808
18801: POP
// hHackUnlimitedResources ; 2 :
18802: CALL 29083 0 0
18806: GO 18989
18808: LD_INT 2
18810: DOUBLE
18811: EQUAL
18812: IFTRUE 18816
18814: GO 18823
18816: POP
// hHackSetLevel10 ; 3 :
18817: CALL 29216 0 0
18821: GO 18989
18823: LD_INT 3
18825: DOUBLE
18826: EQUAL
18827: IFTRUE 18831
18829: GO 18838
18831: POP
// hHackSetLevel10YourUnits ; 4 :
18832: CALL 29301 0 0
18836: GO 18989
18838: LD_INT 4
18840: DOUBLE
18841: EQUAL
18842: IFTRUE 18846
18844: GO 18868
18846: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
18847: LD_VAR 0 4
18851: PPUSH
18852: LD_VAR 0 5
18856: PPUSH
18857: LD_VAR 0 6
18861: PPUSH
18862: CALL 29391 0 3
18866: GO 18989
18868: LD_INT 5
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18883
18876: POP
// hHackSpawnVehicle ; 6 :
18877: CALL 29452 0 0
18881: GO 18989
18883: LD_INT 6
18885: DOUBLE
18886: EQUAL
18887: IFTRUE 18891
18889: GO 18898
18891: POP
// hHackInvincible ; 7 :
18892: CALL 29998 0 0
18896: GO 18989
18898: LD_INT 7
18900: DOUBLE
18901: EQUAL
18902: IFTRUE 18906
18904: GO 18913
18906: POP
// hHackInvisible ; 8 :
18907: CALL 30109 0 0
18911: GO 18989
18913: LD_INT 8
18915: DOUBLE
18916: EQUAL
18917: IFTRUE 18921
18919: GO 18928
18921: POP
// hHackChangeYourSide ; 9 :
18922: CALL 30166 0 0
18926: GO 18989
18928: LD_INT 9
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 18943
18936: POP
// hHackChangeUnitSide ; 10 :
18937: CALL 30208 0 0
18941: GO 18989
18943: LD_INT 10
18945: DOUBLE
18946: EQUAL
18947: IFTRUE 18951
18949: GO 18958
18951: POP
// hHackFog ; 11 :
18952: CALL 30309 0 0
18956: GO 18989
18958: LD_INT 11
18960: DOUBLE
18961: EQUAL
18962: IFTRUE 18966
18964: GO 18973
18966: POP
// hHackApeman ; 12 :
18967: CALL 30324 0 0
18971: GO 18989
18973: LD_INT 12
18975: DOUBLE
18976: EQUAL
18977: IFTRUE 18981
18979: GO 18988
18981: POP
// hHackBoom ; end ;
18982: CALL 30409 0 0
18986: GO 18989
18988: POP
// end ; end ;
18989: PPOPN 6
18991: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
18992: GO 18994
18994: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18995: LD_STRING initStreamRollete();
18997: PPUSH
18998: CALL_OW 559
// InitStreamMode ;
19002: CALL 19011 0 0
// DefineStreamItems ( ) ;
19006: CALL 19451 0 0
// end ;
19010: END
// function InitStreamMode ; begin
19011: LD_INT 0
19013: PPUSH
// streamModeActive := false ;
19014: LD_ADDR_EXP 52
19018: PUSH
19019: LD_INT 0
19021: ST_TO_ADDR
// normalCounter := 36 ;
19022: LD_ADDR_EXP 53
19026: PUSH
19027: LD_INT 36
19029: ST_TO_ADDR
// hardcoreCounter := 16 ;
19030: LD_ADDR_EXP 54
19034: PUSH
19035: LD_INT 16
19037: ST_TO_ADDR
// sRocket := false ;
19038: LD_ADDR_EXP 57
19042: PUSH
19043: LD_INT 0
19045: ST_TO_ADDR
// sSpeed := false ;
19046: LD_ADDR_EXP 56
19050: PUSH
19051: LD_INT 0
19053: ST_TO_ADDR
// sEngine := false ;
19054: LD_ADDR_EXP 58
19058: PUSH
19059: LD_INT 0
19061: ST_TO_ADDR
// sSpec := false ;
19062: LD_ADDR_EXP 55
19066: PUSH
19067: LD_INT 0
19069: ST_TO_ADDR
// sLevel := false ;
19070: LD_ADDR_EXP 59
19074: PUSH
19075: LD_INT 0
19077: ST_TO_ADDR
// sArmoury := false ;
19078: LD_ADDR_EXP 60
19082: PUSH
19083: LD_INT 0
19085: ST_TO_ADDR
// sRadar := false ;
19086: LD_ADDR_EXP 61
19090: PUSH
19091: LD_INT 0
19093: ST_TO_ADDR
// sBunker := false ;
19094: LD_ADDR_EXP 62
19098: PUSH
19099: LD_INT 0
19101: ST_TO_ADDR
// sHack := false ;
19102: LD_ADDR_EXP 63
19106: PUSH
19107: LD_INT 0
19109: ST_TO_ADDR
// sFire := false ;
19110: LD_ADDR_EXP 64
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// sRefresh := false ;
19118: LD_ADDR_EXP 65
19122: PUSH
19123: LD_INT 0
19125: ST_TO_ADDR
// sExp := false ;
19126: LD_ADDR_EXP 66
19130: PUSH
19131: LD_INT 0
19133: ST_TO_ADDR
// sDepot := false ;
19134: LD_ADDR_EXP 67
19138: PUSH
19139: LD_INT 0
19141: ST_TO_ADDR
// sFlag := false ;
19142: LD_ADDR_EXP 68
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// sKamikadze := false ;
19150: LD_ADDR_EXP 76
19154: PUSH
19155: LD_INT 0
19157: ST_TO_ADDR
// sTroll := false ;
19158: LD_ADDR_EXP 77
19162: PUSH
19163: LD_INT 0
19165: ST_TO_ADDR
// sSlow := false ;
19166: LD_ADDR_EXP 78
19170: PUSH
19171: LD_INT 0
19173: ST_TO_ADDR
// sLack := false ;
19174: LD_ADDR_EXP 79
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// sTank := false ;
19182: LD_ADDR_EXP 81
19186: PUSH
19187: LD_INT 0
19189: ST_TO_ADDR
// sRemote := false ;
19190: LD_ADDR_EXP 82
19194: PUSH
19195: LD_INT 0
19197: ST_TO_ADDR
// sPowell := false ;
19198: LD_ADDR_EXP 83
19202: PUSH
19203: LD_INT 0
19205: ST_TO_ADDR
// sTeleport := false ;
19206: LD_ADDR_EXP 86
19210: PUSH
19211: LD_INT 0
19213: ST_TO_ADDR
// sOilTower := false ;
19214: LD_ADDR_EXP 88
19218: PUSH
19219: LD_INT 0
19221: ST_TO_ADDR
// sShovel := false ;
19222: LD_ADDR_EXP 89
19226: PUSH
19227: LD_INT 0
19229: ST_TO_ADDR
// sSheik := false ;
19230: LD_ADDR_EXP 90
19234: PUSH
19235: LD_INT 0
19237: ST_TO_ADDR
// sEarthquake := false ;
19238: LD_ADDR_EXP 92
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// sAI := false ;
19246: LD_ADDR_EXP 93
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
// sCargo := false ;
19254: LD_ADDR_EXP 96
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
// sDLaser := false ;
19262: LD_ADDR_EXP 97
19266: PUSH
19267: LD_INT 0
19269: ST_TO_ADDR
// sExchange := false ;
19270: LD_ADDR_EXP 98
19274: PUSH
19275: LD_INT 0
19277: ST_TO_ADDR
// sFac := false ;
19278: LD_ADDR_EXP 99
19282: PUSH
19283: LD_INT 0
19285: ST_TO_ADDR
// sPower := false ;
19286: LD_ADDR_EXP 100
19290: PUSH
19291: LD_INT 0
19293: ST_TO_ADDR
// sRandom := false ;
19294: LD_ADDR_EXP 101
19298: PUSH
19299: LD_INT 0
19301: ST_TO_ADDR
// sShield := false ;
19302: LD_ADDR_EXP 102
19306: PUSH
19307: LD_INT 0
19309: ST_TO_ADDR
// sTime := false ;
19310: LD_ADDR_EXP 103
19314: PUSH
19315: LD_INT 0
19317: ST_TO_ADDR
// sTools := false ;
19318: LD_ADDR_EXP 104
19322: PUSH
19323: LD_INT 0
19325: ST_TO_ADDR
// sSold := false ;
19326: LD_ADDR_EXP 69
19330: PUSH
19331: LD_INT 0
19333: ST_TO_ADDR
// sDiff := false ;
19334: LD_ADDR_EXP 70
19338: PUSH
19339: LD_INT 0
19341: ST_TO_ADDR
// sFog := false ;
19342: LD_ADDR_EXP 73
19346: PUSH
19347: LD_INT 0
19349: ST_TO_ADDR
// sReset := false ;
19350: LD_ADDR_EXP 74
19354: PUSH
19355: LD_INT 0
19357: ST_TO_ADDR
// sSun := false ;
19358: LD_ADDR_EXP 75
19362: PUSH
19363: LD_INT 0
19365: ST_TO_ADDR
// sTiger := false ;
19366: LD_ADDR_EXP 71
19370: PUSH
19371: LD_INT 0
19373: ST_TO_ADDR
// sBomb := false ;
19374: LD_ADDR_EXP 72
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// sWound := false ;
19382: LD_ADDR_EXP 80
19386: PUSH
19387: LD_INT 0
19389: ST_TO_ADDR
// sBetray := false ;
19390: LD_ADDR_EXP 84
19394: PUSH
19395: LD_INT 0
19397: ST_TO_ADDR
// sContamin := false ;
19398: LD_ADDR_EXP 85
19402: PUSH
19403: LD_INT 0
19405: ST_TO_ADDR
// sOil := false ;
19406: LD_ADDR_EXP 87
19410: PUSH
19411: LD_INT 0
19413: ST_TO_ADDR
// sStu := false ;
19414: LD_ADDR_EXP 91
19418: PUSH
19419: LD_INT 0
19421: ST_TO_ADDR
// sBazooka := false ;
19422: LD_ADDR_EXP 94
19426: PUSH
19427: LD_INT 0
19429: ST_TO_ADDR
// sMortar := false ;
19430: LD_ADDR_EXP 95
19434: PUSH
19435: LD_INT 0
19437: ST_TO_ADDR
// sRanger := false ;
19438: LD_ADDR_EXP 105
19442: PUSH
19443: LD_INT 0
19445: ST_TO_ADDR
// end ;
19446: LD_VAR 0 1
19450: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19451: LD_INT 0
19453: PPUSH
19454: PPUSH
19455: PPUSH
19456: PPUSH
19457: PPUSH
// result := [ ] ;
19458: LD_ADDR_VAR 0 1
19462: PUSH
19463: EMPTY
19464: ST_TO_ADDR
// if campaign_id = 1 then
19465: LD_OWVAR 69
19469: PUSH
19470: LD_INT 1
19472: EQUAL
19473: IFFALSE 22411
// begin case mission_number of 1 :
19475: LD_OWVAR 70
19479: PUSH
19480: LD_INT 1
19482: DOUBLE
19483: EQUAL
19484: IFTRUE 19488
19486: GO 19552
19488: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19489: LD_ADDR_VAR 0 1
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: LD_INT 4
19499: PUSH
19500: LD_INT 11
19502: PUSH
19503: LD_INT 12
19505: PUSH
19506: LD_INT 15
19508: PUSH
19509: LD_INT 16
19511: PUSH
19512: LD_INT 22
19514: PUSH
19515: LD_INT 23
19517: PUSH
19518: LD_INT 26
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 101
19534: PUSH
19535: LD_INT 102
19537: PUSH
19538: LD_INT 106
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: ST_TO_ADDR
19550: GO 22409
19552: LD_INT 2
19554: DOUBLE
19555: EQUAL
19556: IFTRUE 19560
19558: GO 19632
19560: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19561: LD_ADDR_VAR 0 1
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 4
19571: PUSH
19572: LD_INT 11
19574: PUSH
19575: LD_INT 12
19577: PUSH
19578: LD_INT 15
19580: PUSH
19581: LD_INT 16
19583: PUSH
19584: LD_INT 22
19586: PUSH
19587: LD_INT 23
19589: PUSH
19590: LD_INT 26
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 101
19606: PUSH
19607: LD_INT 102
19609: PUSH
19610: LD_INT 105
19612: PUSH
19613: LD_INT 106
19615: PUSH
19616: LD_INT 108
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: ST_TO_ADDR
19630: GO 22409
19632: LD_INT 3
19634: DOUBLE
19635: EQUAL
19636: IFTRUE 19640
19638: GO 19716
19640: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19641: LD_ADDR_VAR 0 1
19645: PUSH
19646: LD_INT 2
19648: PUSH
19649: LD_INT 4
19651: PUSH
19652: LD_INT 5
19654: PUSH
19655: LD_INT 11
19657: PUSH
19658: LD_INT 12
19660: PUSH
19661: LD_INT 15
19663: PUSH
19664: LD_INT 16
19666: PUSH
19667: LD_INT 22
19669: PUSH
19670: LD_INT 26
19672: PUSH
19673: LD_INT 36
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 101
19690: PUSH
19691: LD_INT 102
19693: PUSH
19694: LD_INT 105
19696: PUSH
19697: LD_INT 106
19699: PUSH
19700: LD_INT 108
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: ST_TO_ADDR
19714: GO 22409
19716: LD_INT 4
19718: DOUBLE
19719: EQUAL
19720: IFTRUE 19724
19722: GO 19808
19724: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19725: LD_ADDR_VAR 0 1
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: LD_INT 4
19735: PUSH
19736: LD_INT 5
19738: PUSH
19739: LD_INT 8
19741: PUSH
19742: LD_INT 11
19744: PUSH
19745: LD_INT 12
19747: PUSH
19748: LD_INT 15
19750: PUSH
19751: LD_INT 16
19753: PUSH
19754: LD_INT 22
19756: PUSH
19757: LD_INT 23
19759: PUSH
19760: LD_INT 26
19762: PUSH
19763: LD_INT 36
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 101
19782: PUSH
19783: LD_INT 102
19785: PUSH
19786: LD_INT 105
19788: PUSH
19789: LD_INT 106
19791: PUSH
19792: LD_INT 108
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: ST_TO_ADDR
19806: GO 22409
19808: LD_INT 5
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19916
19816: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19817: LD_ADDR_VAR 0 1
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 4
19827: PUSH
19828: LD_INT 5
19830: PUSH
19831: LD_INT 6
19833: PUSH
19834: LD_INT 8
19836: PUSH
19837: LD_INT 11
19839: PUSH
19840: LD_INT 12
19842: PUSH
19843: LD_INT 15
19845: PUSH
19846: LD_INT 16
19848: PUSH
19849: LD_INT 22
19851: PUSH
19852: LD_INT 23
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 26
19860: PUSH
19861: LD_INT 36
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 101
19882: PUSH
19883: LD_INT 102
19885: PUSH
19886: LD_INT 105
19888: PUSH
19889: LD_INT 106
19891: PUSH
19892: LD_INT 108
19894: PUSH
19895: LD_INT 109
19897: PUSH
19898: LD_INT 112
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: ST_TO_ADDR
19914: GO 22409
19916: LD_INT 6
19918: DOUBLE
19919: EQUAL
19920: IFTRUE 19924
19922: GO 20044
19924: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
19925: LD_ADDR_VAR 0 1
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 4
19935: PUSH
19936: LD_INT 5
19938: PUSH
19939: LD_INT 6
19941: PUSH
19942: LD_INT 8
19944: PUSH
19945: LD_INT 11
19947: PUSH
19948: LD_INT 12
19950: PUSH
19951: LD_INT 15
19953: PUSH
19954: LD_INT 16
19956: PUSH
19957: LD_INT 20
19959: PUSH
19960: LD_INT 21
19962: PUSH
19963: LD_INT 22
19965: PUSH
19966: LD_INT 23
19968: PUSH
19969: LD_INT 25
19971: PUSH
19972: LD_INT 26
19974: PUSH
19975: LD_INT 30
19977: PUSH
19978: LD_INT 31
19980: PUSH
19981: LD_INT 32
19983: PUSH
19984: LD_INT 36
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 101
20010: PUSH
20011: LD_INT 102
20013: PUSH
20014: LD_INT 105
20016: PUSH
20017: LD_INT 106
20019: PUSH
20020: LD_INT 108
20022: PUSH
20023: LD_INT 109
20025: PUSH
20026: LD_INT 112
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: ST_TO_ADDR
20042: GO 22409
20044: LD_INT 7
20046: DOUBLE
20047: EQUAL
20048: IFTRUE 20052
20050: GO 20152
20052: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20053: LD_ADDR_VAR 0 1
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: LD_INT 4
20063: PUSH
20064: LD_INT 5
20066: PUSH
20067: LD_INT 7
20069: PUSH
20070: LD_INT 11
20072: PUSH
20073: LD_INT 12
20075: PUSH
20076: LD_INT 15
20078: PUSH
20079: LD_INT 16
20081: PUSH
20082: LD_INT 20
20084: PUSH
20085: LD_INT 21
20087: PUSH
20088: LD_INT 22
20090: PUSH
20091: LD_INT 23
20093: PUSH
20094: LD_INT 25
20096: PUSH
20097: LD_INT 26
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 101
20118: PUSH
20119: LD_INT 102
20121: PUSH
20122: LD_INT 103
20124: PUSH
20125: LD_INT 105
20127: PUSH
20128: LD_INT 106
20130: PUSH
20131: LD_INT 108
20133: PUSH
20134: LD_INT 112
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: ST_TO_ADDR
20150: GO 22409
20152: LD_INT 8
20154: DOUBLE
20155: EQUAL
20156: IFTRUE 20160
20158: GO 20288
20160: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20161: LD_ADDR_VAR 0 1
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: LD_INT 4
20171: PUSH
20172: LD_INT 5
20174: PUSH
20175: LD_INT 6
20177: PUSH
20178: LD_INT 7
20180: PUSH
20181: LD_INT 8
20183: PUSH
20184: LD_INT 11
20186: PUSH
20187: LD_INT 12
20189: PUSH
20190: LD_INT 15
20192: PUSH
20193: LD_INT 16
20195: PUSH
20196: LD_INT 20
20198: PUSH
20199: LD_INT 21
20201: PUSH
20202: LD_INT 22
20204: PUSH
20205: LD_INT 23
20207: PUSH
20208: LD_INT 25
20210: PUSH
20211: LD_INT 26
20213: PUSH
20214: LD_INT 30
20216: PUSH
20217: LD_INT 31
20219: PUSH
20220: LD_INT 32
20222: PUSH
20223: LD_INT 36
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 101
20250: PUSH
20251: LD_INT 102
20253: PUSH
20254: LD_INT 103
20256: PUSH
20257: LD_INT 105
20259: PUSH
20260: LD_INT 106
20262: PUSH
20263: LD_INT 108
20265: PUSH
20266: LD_INT 109
20268: PUSH
20269: LD_INT 112
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: ST_TO_ADDR
20286: GO 22409
20288: LD_INT 9
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20432
20296: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20297: LD_ADDR_VAR 0 1
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: LD_INT 4
20307: PUSH
20308: LD_INT 5
20310: PUSH
20311: LD_INT 6
20313: PUSH
20314: LD_INT 7
20316: PUSH
20317: LD_INT 8
20319: PUSH
20320: LD_INT 11
20322: PUSH
20323: LD_INT 12
20325: PUSH
20326: LD_INT 15
20328: PUSH
20329: LD_INT 16
20331: PUSH
20332: LD_INT 20
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 22
20340: PUSH
20341: LD_INT 23
20343: PUSH
20344: LD_INT 25
20346: PUSH
20347: LD_INT 26
20349: PUSH
20350: LD_INT 28
20352: PUSH
20353: LD_INT 30
20355: PUSH
20356: LD_INT 31
20358: PUSH
20359: LD_INT 32
20361: PUSH
20362: LD_INT 36
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 101
20390: PUSH
20391: LD_INT 102
20393: PUSH
20394: LD_INT 103
20396: PUSH
20397: LD_INT 105
20399: PUSH
20400: LD_INT 106
20402: PUSH
20403: LD_INT 108
20405: PUSH
20406: LD_INT 109
20408: PUSH
20409: LD_INT 112
20411: PUSH
20412: LD_INT 114
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: ST_TO_ADDR
20430: GO 22409
20432: LD_INT 10
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20624
20440: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20441: LD_ADDR_VAR 0 1
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 4
20451: PUSH
20452: LD_INT 5
20454: PUSH
20455: LD_INT 6
20457: PUSH
20458: LD_INT 7
20460: PUSH
20461: LD_INT 8
20463: PUSH
20464: LD_INT 9
20466: PUSH
20467: LD_INT 10
20469: PUSH
20470: LD_INT 11
20472: PUSH
20473: LD_INT 12
20475: PUSH
20476: LD_INT 13
20478: PUSH
20479: LD_INT 14
20481: PUSH
20482: LD_INT 15
20484: PUSH
20485: LD_INT 16
20487: PUSH
20488: LD_INT 17
20490: PUSH
20491: LD_INT 18
20493: PUSH
20494: LD_INT 19
20496: PUSH
20497: LD_INT 20
20499: PUSH
20500: LD_INT 21
20502: PUSH
20503: LD_INT 22
20505: PUSH
20506: LD_INT 23
20508: PUSH
20509: LD_INT 24
20511: PUSH
20512: LD_INT 25
20514: PUSH
20515: LD_INT 26
20517: PUSH
20518: LD_INT 28
20520: PUSH
20521: LD_INT 30
20523: PUSH
20524: LD_INT 31
20526: PUSH
20527: LD_INT 32
20529: PUSH
20530: LD_INT 36
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 101
20566: PUSH
20567: LD_INT 102
20569: PUSH
20570: LD_INT 103
20572: PUSH
20573: LD_INT 104
20575: PUSH
20576: LD_INT 105
20578: PUSH
20579: LD_INT 106
20581: PUSH
20582: LD_INT 107
20584: PUSH
20585: LD_INT 108
20587: PUSH
20588: LD_INT 109
20590: PUSH
20591: LD_INT 110
20593: PUSH
20594: LD_INT 111
20596: PUSH
20597: LD_INT 112
20599: PUSH
20600: LD_INT 114
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: ST_TO_ADDR
20622: GO 22409
20624: LD_INT 11
20626: DOUBLE
20627: EQUAL
20628: IFTRUE 20632
20630: GO 20824
20632: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20633: LD_ADDR_VAR 0 1
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 3
20643: PUSH
20644: LD_INT 4
20646: PUSH
20647: LD_INT 5
20649: PUSH
20650: LD_INT 6
20652: PUSH
20653: LD_INT 7
20655: PUSH
20656: LD_INT 8
20658: PUSH
20659: LD_INT 9
20661: PUSH
20662: LD_INT 10
20664: PUSH
20665: LD_INT 11
20667: PUSH
20668: LD_INT 12
20670: PUSH
20671: LD_INT 13
20673: PUSH
20674: LD_INT 14
20676: PUSH
20677: LD_INT 15
20679: PUSH
20680: LD_INT 16
20682: PUSH
20683: LD_INT 17
20685: PUSH
20686: LD_INT 18
20688: PUSH
20689: LD_INT 19
20691: PUSH
20692: LD_INT 20
20694: PUSH
20695: LD_INT 21
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 23
20703: PUSH
20704: LD_INT 24
20706: PUSH
20707: LD_INT 25
20709: PUSH
20710: LD_INT 26
20712: PUSH
20713: LD_INT 28
20715: PUSH
20716: LD_INT 30
20718: PUSH
20719: LD_INT 31
20721: PUSH
20722: LD_INT 32
20724: PUSH
20725: LD_INT 34
20727: PUSH
20728: LD_INT 36
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 101
20766: PUSH
20767: LD_INT 102
20769: PUSH
20770: LD_INT 103
20772: PUSH
20773: LD_INT 104
20775: PUSH
20776: LD_INT 105
20778: PUSH
20779: LD_INT 106
20781: PUSH
20782: LD_INT 107
20784: PUSH
20785: LD_INT 108
20787: PUSH
20788: LD_INT 109
20790: PUSH
20791: LD_INT 110
20793: PUSH
20794: LD_INT 111
20796: PUSH
20797: LD_INT 112
20799: PUSH
20800: LD_INT 114
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: ST_TO_ADDR
20822: GO 22409
20824: LD_INT 12
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 21040
20832: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20833: LD_ADDR_VAR 0 1
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: LD_INT 3
20846: PUSH
20847: LD_INT 4
20849: PUSH
20850: LD_INT 5
20852: PUSH
20853: LD_INT 6
20855: PUSH
20856: LD_INT 7
20858: PUSH
20859: LD_INT 8
20861: PUSH
20862: LD_INT 9
20864: PUSH
20865: LD_INT 10
20867: PUSH
20868: LD_INT 11
20870: PUSH
20871: LD_INT 12
20873: PUSH
20874: LD_INT 13
20876: PUSH
20877: LD_INT 14
20879: PUSH
20880: LD_INT 15
20882: PUSH
20883: LD_INT 16
20885: PUSH
20886: LD_INT 17
20888: PUSH
20889: LD_INT 18
20891: PUSH
20892: LD_INT 19
20894: PUSH
20895: LD_INT 20
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 22
20903: PUSH
20904: LD_INT 23
20906: PUSH
20907: LD_INT 24
20909: PUSH
20910: LD_INT 25
20912: PUSH
20913: LD_INT 26
20915: PUSH
20916: LD_INT 27
20918: PUSH
20919: LD_INT 28
20921: PUSH
20922: LD_INT 30
20924: PUSH
20925: LD_INT 31
20927: PUSH
20928: LD_INT 32
20930: PUSH
20931: LD_INT 33
20933: PUSH
20934: LD_INT 34
20936: PUSH
20937: LD_INT 36
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 101
20978: PUSH
20979: LD_INT 102
20981: PUSH
20982: LD_INT 103
20984: PUSH
20985: LD_INT 104
20987: PUSH
20988: LD_INT 105
20990: PUSH
20991: LD_INT 106
20993: PUSH
20994: LD_INT 107
20996: PUSH
20997: LD_INT 108
20999: PUSH
21000: LD_INT 109
21002: PUSH
21003: LD_INT 110
21005: PUSH
21006: LD_INT 111
21008: PUSH
21009: LD_INT 112
21011: PUSH
21012: LD_INT 113
21014: PUSH
21015: LD_INT 114
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: ST_TO_ADDR
21038: GO 22409
21040: LD_INT 13
21042: DOUBLE
21043: EQUAL
21044: IFTRUE 21048
21046: GO 21244
21048: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21049: LD_ADDR_VAR 0 1
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: LD_INT 3
21062: PUSH
21063: LD_INT 4
21065: PUSH
21066: LD_INT 5
21068: PUSH
21069: LD_INT 8
21071: PUSH
21072: LD_INT 9
21074: PUSH
21075: LD_INT 10
21077: PUSH
21078: LD_INT 11
21080: PUSH
21081: LD_INT 12
21083: PUSH
21084: LD_INT 14
21086: PUSH
21087: LD_INT 15
21089: PUSH
21090: LD_INT 16
21092: PUSH
21093: LD_INT 17
21095: PUSH
21096: LD_INT 18
21098: PUSH
21099: LD_INT 19
21101: PUSH
21102: LD_INT 20
21104: PUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 22
21110: PUSH
21111: LD_INT 23
21113: PUSH
21114: LD_INT 24
21116: PUSH
21117: LD_INT 25
21119: PUSH
21120: LD_INT 26
21122: PUSH
21123: LD_INT 27
21125: PUSH
21126: LD_INT 28
21128: PUSH
21129: LD_INT 30
21131: PUSH
21132: LD_INT 31
21134: PUSH
21135: LD_INT 32
21137: PUSH
21138: LD_INT 33
21140: PUSH
21141: LD_INT 34
21143: PUSH
21144: LD_INT 36
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 101
21182: PUSH
21183: LD_INT 102
21185: PUSH
21186: LD_INT 103
21188: PUSH
21189: LD_INT 104
21191: PUSH
21192: LD_INT 105
21194: PUSH
21195: LD_INT 106
21197: PUSH
21198: LD_INT 107
21200: PUSH
21201: LD_INT 108
21203: PUSH
21204: LD_INT 109
21206: PUSH
21207: LD_INT 110
21209: PUSH
21210: LD_INT 111
21212: PUSH
21213: LD_INT 112
21215: PUSH
21216: LD_INT 113
21218: PUSH
21219: LD_INT 114
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: ST_TO_ADDR
21242: GO 22409
21244: LD_INT 14
21246: DOUBLE
21247: EQUAL
21248: IFTRUE 21252
21250: GO 21464
21252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21253: LD_ADDR_VAR 0 1
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: LD_INT 3
21266: PUSH
21267: LD_INT 4
21269: PUSH
21270: LD_INT 5
21272: PUSH
21273: LD_INT 6
21275: PUSH
21276: LD_INT 7
21278: PUSH
21279: LD_INT 8
21281: PUSH
21282: LD_INT 9
21284: PUSH
21285: LD_INT 10
21287: PUSH
21288: LD_INT 11
21290: PUSH
21291: LD_INT 12
21293: PUSH
21294: LD_INT 13
21296: PUSH
21297: LD_INT 14
21299: PUSH
21300: LD_INT 15
21302: PUSH
21303: LD_INT 16
21305: PUSH
21306: LD_INT 17
21308: PUSH
21309: LD_INT 18
21311: PUSH
21312: LD_INT 19
21314: PUSH
21315: LD_INT 20
21317: PUSH
21318: LD_INT 21
21320: PUSH
21321: LD_INT 22
21323: PUSH
21324: LD_INT 23
21326: PUSH
21327: LD_INT 24
21329: PUSH
21330: LD_INT 25
21332: PUSH
21333: LD_INT 26
21335: PUSH
21336: LD_INT 27
21338: PUSH
21339: LD_INT 28
21341: PUSH
21342: LD_INT 29
21344: PUSH
21345: LD_INT 30
21347: PUSH
21348: LD_INT 31
21350: PUSH
21351: LD_INT 32
21353: PUSH
21354: LD_INT 33
21356: PUSH
21357: LD_INT 34
21359: PUSH
21360: LD_INT 36
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 101
21402: PUSH
21403: LD_INT 102
21405: PUSH
21406: LD_INT 103
21408: PUSH
21409: LD_INT 104
21411: PUSH
21412: LD_INT 105
21414: PUSH
21415: LD_INT 106
21417: PUSH
21418: LD_INT 107
21420: PUSH
21421: LD_INT 108
21423: PUSH
21424: LD_INT 109
21426: PUSH
21427: LD_INT 110
21429: PUSH
21430: LD_INT 111
21432: PUSH
21433: LD_INT 112
21435: PUSH
21436: LD_INT 113
21438: PUSH
21439: LD_INT 114
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: ST_TO_ADDR
21462: GO 22409
21464: LD_INT 15
21466: DOUBLE
21467: EQUAL
21468: IFTRUE 21472
21470: GO 21684
21472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21473: LD_ADDR_VAR 0 1
21477: PUSH
21478: LD_INT 1
21480: PUSH
21481: LD_INT 2
21483: PUSH
21484: LD_INT 3
21486: PUSH
21487: LD_INT 4
21489: PUSH
21490: LD_INT 5
21492: PUSH
21493: LD_INT 6
21495: PUSH
21496: LD_INT 7
21498: PUSH
21499: LD_INT 8
21501: PUSH
21502: LD_INT 9
21504: PUSH
21505: LD_INT 10
21507: PUSH
21508: LD_INT 11
21510: PUSH
21511: LD_INT 12
21513: PUSH
21514: LD_INT 13
21516: PUSH
21517: LD_INT 14
21519: PUSH
21520: LD_INT 15
21522: PUSH
21523: LD_INT 16
21525: PUSH
21526: LD_INT 17
21528: PUSH
21529: LD_INT 18
21531: PUSH
21532: LD_INT 19
21534: PUSH
21535: LD_INT 20
21537: PUSH
21538: LD_INT 21
21540: PUSH
21541: LD_INT 22
21543: PUSH
21544: LD_INT 23
21546: PUSH
21547: LD_INT 24
21549: PUSH
21550: LD_INT 25
21552: PUSH
21553: LD_INT 26
21555: PUSH
21556: LD_INT 27
21558: PUSH
21559: LD_INT 28
21561: PUSH
21562: LD_INT 29
21564: PUSH
21565: LD_INT 30
21567: PUSH
21568: LD_INT 31
21570: PUSH
21571: LD_INT 32
21573: PUSH
21574: LD_INT 33
21576: PUSH
21577: LD_INT 34
21579: PUSH
21580: LD_INT 36
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 101
21622: PUSH
21623: LD_INT 102
21625: PUSH
21626: LD_INT 103
21628: PUSH
21629: LD_INT 104
21631: PUSH
21632: LD_INT 105
21634: PUSH
21635: LD_INT 106
21637: PUSH
21638: LD_INT 107
21640: PUSH
21641: LD_INT 108
21643: PUSH
21644: LD_INT 109
21646: PUSH
21647: LD_INT 110
21649: PUSH
21650: LD_INT 111
21652: PUSH
21653: LD_INT 112
21655: PUSH
21656: LD_INT 113
21658: PUSH
21659: LD_INT 114
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: ST_TO_ADDR
21682: GO 22409
21684: LD_INT 16
21686: DOUBLE
21687: EQUAL
21688: IFTRUE 21692
21690: GO 21816
21692: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21693: LD_ADDR_VAR 0 1
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: LD_INT 4
21703: PUSH
21704: LD_INT 5
21706: PUSH
21707: LD_INT 7
21709: PUSH
21710: LD_INT 11
21712: PUSH
21713: LD_INT 12
21715: PUSH
21716: LD_INT 15
21718: PUSH
21719: LD_INT 16
21721: PUSH
21722: LD_INT 20
21724: PUSH
21725: LD_INT 21
21727: PUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 23
21733: PUSH
21734: LD_INT 25
21736: PUSH
21737: LD_INT 26
21739: PUSH
21740: LD_INT 30
21742: PUSH
21743: LD_INT 31
21745: PUSH
21746: LD_INT 32
21748: PUSH
21749: LD_INT 33
21751: PUSH
21752: LD_INT 34
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 101
21778: PUSH
21779: LD_INT 102
21781: PUSH
21782: LD_INT 103
21784: PUSH
21785: LD_INT 106
21787: PUSH
21788: LD_INT 108
21790: PUSH
21791: LD_INT 112
21793: PUSH
21794: LD_INT 113
21796: PUSH
21797: LD_INT 114
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: ST_TO_ADDR
21814: GO 22409
21816: LD_INT 17
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 22036
21824: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21825: LD_ADDR_VAR 0 1
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: LD_INT 3
21838: PUSH
21839: LD_INT 4
21841: PUSH
21842: LD_INT 5
21844: PUSH
21845: LD_INT 6
21847: PUSH
21848: LD_INT 7
21850: PUSH
21851: LD_INT 8
21853: PUSH
21854: LD_INT 9
21856: PUSH
21857: LD_INT 10
21859: PUSH
21860: LD_INT 11
21862: PUSH
21863: LD_INT 12
21865: PUSH
21866: LD_INT 13
21868: PUSH
21869: LD_INT 14
21871: PUSH
21872: LD_INT 15
21874: PUSH
21875: LD_INT 16
21877: PUSH
21878: LD_INT 17
21880: PUSH
21881: LD_INT 18
21883: PUSH
21884: LD_INT 19
21886: PUSH
21887: LD_INT 20
21889: PUSH
21890: LD_INT 21
21892: PUSH
21893: LD_INT 22
21895: PUSH
21896: LD_INT 23
21898: PUSH
21899: LD_INT 24
21901: PUSH
21902: LD_INT 25
21904: PUSH
21905: LD_INT 26
21907: PUSH
21908: LD_INT 27
21910: PUSH
21911: LD_INT 28
21913: PUSH
21914: LD_INT 29
21916: PUSH
21917: LD_INT 30
21919: PUSH
21920: LD_INT 31
21922: PUSH
21923: LD_INT 32
21925: PUSH
21926: LD_INT 33
21928: PUSH
21929: LD_INT 34
21931: PUSH
21932: LD_INT 36
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 101
21974: PUSH
21975: LD_INT 102
21977: PUSH
21978: LD_INT 103
21980: PUSH
21981: LD_INT 104
21983: PUSH
21984: LD_INT 105
21986: PUSH
21987: LD_INT 106
21989: PUSH
21990: LD_INT 107
21992: PUSH
21993: LD_INT 108
21995: PUSH
21996: LD_INT 109
21998: PUSH
21999: LD_INT 110
22001: PUSH
22002: LD_INT 111
22004: PUSH
22005: LD_INT 112
22007: PUSH
22008: LD_INT 113
22010: PUSH
22011: LD_INT 114
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: ST_TO_ADDR
22034: GO 22409
22036: LD_INT 18
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22180
22044: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 4
22055: PUSH
22056: LD_INT 5
22058: PUSH
22059: LD_INT 7
22061: PUSH
22062: LD_INT 11
22064: PUSH
22065: LD_INT 12
22067: PUSH
22068: LD_INT 15
22070: PUSH
22071: LD_INT 16
22073: PUSH
22074: LD_INT 20
22076: PUSH
22077: LD_INT 21
22079: PUSH
22080: LD_INT 22
22082: PUSH
22083: LD_INT 23
22085: PUSH
22086: LD_INT 25
22088: PUSH
22089: LD_INT 26
22091: PUSH
22092: LD_INT 30
22094: PUSH
22095: LD_INT 31
22097: PUSH
22098: LD_INT 32
22100: PUSH
22101: LD_INT 33
22103: PUSH
22104: LD_INT 34
22106: PUSH
22107: LD_INT 35
22109: PUSH
22110: LD_INT 36
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 101
22138: PUSH
22139: LD_INT 102
22141: PUSH
22142: LD_INT 103
22144: PUSH
22145: LD_INT 106
22147: PUSH
22148: LD_INT 108
22150: PUSH
22151: LD_INT 112
22153: PUSH
22154: LD_INT 113
22156: PUSH
22157: LD_INT 114
22159: PUSH
22160: LD_INT 115
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: ST_TO_ADDR
22178: GO 22409
22180: LD_INT 19
22182: DOUBLE
22183: EQUAL
22184: IFTRUE 22188
22186: GO 22408
22188: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22189: LD_ADDR_VAR 0 1
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 3
22202: PUSH
22203: LD_INT 4
22205: PUSH
22206: LD_INT 5
22208: PUSH
22209: LD_INT 6
22211: PUSH
22212: LD_INT 7
22214: PUSH
22215: LD_INT 8
22217: PUSH
22218: LD_INT 9
22220: PUSH
22221: LD_INT 10
22223: PUSH
22224: LD_INT 11
22226: PUSH
22227: LD_INT 12
22229: PUSH
22230: LD_INT 13
22232: PUSH
22233: LD_INT 14
22235: PUSH
22236: LD_INT 15
22238: PUSH
22239: LD_INT 16
22241: PUSH
22242: LD_INT 17
22244: PUSH
22245: LD_INT 18
22247: PUSH
22248: LD_INT 19
22250: PUSH
22251: LD_INT 20
22253: PUSH
22254: LD_INT 21
22256: PUSH
22257: LD_INT 22
22259: PUSH
22260: LD_INT 23
22262: PUSH
22263: LD_INT 24
22265: PUSH
22266: LD_INT 25
22268: PUSH
22269: LD_INT 26
22271: PUSH
22272: LD_INT 27
22274: PUSH
22275: LD_INT 28
22277: PUSH
22278: LD_INT 29
22280: PUSH
22281: LD_INT 30
22283: PUSH
22284: LD_INT 31
22286: PUSH
22287: LD_INT 32
22289: PUSH
22290: LD_INT 33
22292: PUSH
22293: LD_INT 34
22295: PUSH
22296: LD_INT 35
22298: PUSH
22299: LD_INT 36
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 101
22342: PUSH
22343: LD_INT 102
22345: PUSH
22346: LD_INT 103
22348: PUSH
22349: LD_INT 104
22351: PUSH
22352: LD_INT 105
22354: PUSH
22355: LD_INT 106
22357: PUSH
22358: LD_INT 107
22360: PUSH
22361: LD_INT 108
22363: PUSH
22364: LD_INT 109
22366: PUSH
22367: LD_INT 110
22369: PUSH
22370: LD_INT 111
22372: PUSH
22373: LD_INT 112
22375: PUSH
22376: LD_INT 113
22378: PUSH
22379: LD_INT 114
22381: PUSH
22382: LD_INT 115
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: ST_TO_ADDR
22406: GO 22409
22408: POP
// end else
22409: GO 22628
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22411: LD_ADDR_VAR 0 1
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: LD_INT 4
22427: PUSH
22428: LD_INT 5
22430: PUSH
22431: LD_INT 6
22433: PUSH
22434: LD_INT 7
22436: PUSH
22437: LD_INT 8
22439: PUSH
22440: LD_INT 9
22442: PUSH
22443: LD_INT 10
22445: PUSH
22446: LD_INT 11
22448: PUSH
22449: LD_INT 12
22451: PUSH
22452: LD_INT 13
22454: PUSH
22455: LD_INT 14
22457: PUSH
22458: LD_INT 15
22460: PUSH
22461: LD_INT 16
22463: PUSH
22464: LD_INT 17
22466: PUSH
22467: LD_INT 18
22469: PUSH
22470: LD_INT 19
22472: PUSH
22473: LD_INT 20
22475: PUSH
22476: LD_INT 21
22478: PUSH
22479: LD_INT 22
22481: PUSH
22482: LD_INT 23
22484: PUSH
22485: LD_INT 24
22487: PUSH
22488: LD_INT 25
22490: PUSH
22491: LD_INT 26
22493: PUSH
22494: LD_INT 27
22496: PUSH
22497: LD_INT 28
22499: PUSH
22500: LD_INT 29
22502: PUSH
22503: LD_INT 30
22505: PUSH
22506: LD_INT 31
22508: PUSH
22509: LD_INT 32
22511: PUSH
22512: LD_INT 33
22514: PUSH
22515: LD_INT 34
22517: PUSH
22518: LD_INT 35
22520: PUSH
22521: LD_INT 36
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 101
22564: PUSH
22565: LD_INT 102
22567: PUSH
22568: LD_INT 103
22570: PUSH
22571: LD_INT 104
22573: PUSH
22574: LD_INT 105
22576: PUSH
22577: LD_INT 106
22579: PUSH
22580: LD_INT 107
22582: PUSH
22583: LD_INT 108
22585: PUSH
22586: LD_INT 109
22588: PUSH
22589: LD_INT 110
22591: PUSH
22592: LD_INT 111
22594: PUSH
22595: LD_INT 112
22597: PUSH
22598: LD_INT 113
22600: PUSH
22601: LD_INT 114
22603: PUSH
22604: LD_INT 115
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: ST_TO_ADDR
// if result then
22628: LD_VAR 0 1
22632: IFFALSE 22921
// begin normal :=  ;
22634: LD_ADDR_VAR 0 3
22638: PUSH
22639: LD_STRING 
22641: ST_TO_ADDR
// hardcore :=  ;
22642: LD_ADDR_VAR 0 4
22646: PUSH
22647: LD_STRING 
22649: ST_TO_ADDR
// for i = 1 to normalCounter do
22650: LD_ADDR_VAR 0 5
22654: PUSH
22655: DOUBLE
22656: LD_INT 1
22658: DEC
22659: ST_TO_ADDR
22660: LD_EXP 53
22664: PUSH
22665: FOR_TO
22666: IFFALSE 22767
// begin tmp := 0 ;
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_STRING 0
22675: ST_TO_ADDR
// if result [ 1 ] then
22676: LD_VAR 0 1
22680: PUSH
22681: LD_INT 1
22683: ARRAY
22684: IFFALSE 22749
// if result [ 1 ] [ 1 ] = i then
22686: LD_VAR 0 1
22690: PUSH
22691: LD_INT 1
22693: ARRAY
22694: PUSH
22695: LD_INT 1
22697: ARRAY
22698: PUSH
22699: LD_VAR 0 5
22703: EQUAL
22704: IFFALSE 22749
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22706: LD_ADDR_VAR 0 1
22710: PUSH
22711: LD_VAR 0 1
22715: PPUSH
22716: LD_INT 1
22718: PPUSH
22719: LD_VAR 0 1
22723: PUSH
22724: LD_INT 1
22726: ARRAY
22727: PPUSH
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 3
22735: PPUSH
22736: CALL_OW 1
22740: ST_TO_ADDR
// tmp := 1 ;
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: LD_STRING 1
22748: ST_TO_ADDR
// end ; normal := normal & tmp ;
22749: LD_ADDR_VAR 0 3
22753: PUSH
22754: LD_VAR 0 3
22758: PUSH
22759: LD_VAR 0 2
22763: STR
22764: ST_TO_ADDR
// end ;
22765: GO 22665
22767: POP
22768: POP
// for i = 1 to hardcoreCounter do
22769: LD_ADDR_VAR 0 5
22773: PUSH
22774: DOUBLE
22775: LD_INT 1
22777: DEC
22778: ST_TO_ADDR
22779: LD_EXP 54
22783: PUSH
22784: FOR_TO
22785: IFFALSE 22890
// begin tmp := 0 ;
22787: LD_ADDR_VAR 0 2
22791: PUSH
22792: LD_STRING 0
22794: ST_TO_ADDR
// if result [ 2 ] then
22795: LD_VAR 0 1
22799: PUSH
22800: LD_INT 2
22802: ARRAY
22803: IFFALSE 22872
// if result [ 2 ] [ 1 ] = 100 + i then
22805: LD_VAR 0 1
22809: PUSH
22810: LD_INT 2
22812: ARRAY
22813: PUSH
22814: LD_INT 1
22816: ARRAY
22817: PUSH
22818: LD_INT 100
22820: PUSH
22821: LD_VAR 0 5
22825: PLUS
22826: EQUAL
22827: IFFALSE 22872
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22829: LD_ADDR_VAR 0 1
22833: PUSH
22834: LD_VAR 0 1
22838: PPUSH
22839: LD_INT 2
22841: PPUSH
22842: LD_VAR 0 1
22846: PUSH
22847: LD_INT 2
22849: ARRAY
22850: PPUSH
22851: LD_INT 1
22853: PPUSH
22854: CALL_OW 3
22858: PPUSH
22859: CALL_OW 1
22863: ST_TO_ADDR
// tmp := 1 ;
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_STRING 1
22871: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22872: LD_ADDR_VAR 0 4
22876: PUSH
22877: LD_VAR 0 4
22881: PUSH
22882: LD_VAR 0 2
22886: STR
22887: ST_TO_ADDR
// end ;
22888: GO 22784
22890: POP
22891: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22892: LD_STRING getStreamItemsFromMission("
22894: PUSH
22895: LD_VAR 0 3
22899: STR
22900: PUSH
22901: LD_STRING ","
22903: STR
22904: PUSH
22905: LD_VAR 0 4
22909: STR
22910: PUSH
22911: LD_STRING ")
22913: STR
22914: PPUSH
22915: CALL_OW 559
// end else
22919: GO 22928
// ToLua ( getStreamItemsFromMission("","") ) ;
22921: LD_STRING getStreamItemsFromMission("","")
22923: PPUSH
22924: CALL_OW 559
// end ;
22928: LD_VAR 0 1
22932: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22933: LD_EXP 52
22937: PUSH
22938: LD_EXP 57
22942: AND
22943: IFFALSE 23067
22945: GO 22947
22947: DISABLE
22948: LD_INT 0
22950: PPUSH
22951: PPUSH
// begin enable ;
22952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22953: LD_ADDR_VAR 0 2
22957: PUSH
22958: LD_INT 22
22960: PUSH
22961: LD_OWVAR 2
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 2
22972: PUSH
22973: LD_INT 34
22975: PUSH
22976: LD_INT 7
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 34
22985: PUSH
22986: LD_INT 45
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 34
22995: PUSH
22996: LD_INT 28
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 34
23005: PUSH
23006: LD_INT 47
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PPUSH
23024: CALL_OW 69
23028: ST_TO_ADDR
// if not tmp then
23029: LD_VAR 0 2
23033: NOT
23034: IFFALSE 23038
// exit ;
23036: GO 23067
// for i in tmp do
23038: LD_ADDR_VAR 0 1
23042: PUSH
23043: LD_VAR 0 2
23047: PUSH
23048: FOR_IN
23049: IFFALSE 23065
// begin SetLives ( i , 0 ) ;
23051: LD_VAR 0 1
23055: PPUSH
23056: LD_INT 0
23058: PPUSH
23059: CALL_OW 234
// end ;
23063: GO 23048
23065: POP
23066: POP
// end ;
23067: PPOPN 2
23069: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23070: LD_EXP 52
23074: PUSH
23075: LD_EXP 58
23079: AND
23080: IFFALSE 23164
23082: GO 23084
23084: DISABLE
23085: LD_INT 0
23087: PPUSH
23088: PPUSH
// begin enable ;
23089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23090: LD_ADDR_VAR 0 2
23094: PUSH
23095: LD_INT 22
23097: PUSH
23098: LD_OWVAR 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 32
23109: PUSH
23110: LD_INT 3
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PPUSH
23121: CALL_OW 69
23125: ST_TO_ADDR
// if not tmp then
23126: LD_VAR 0 2
23130: NOT
23131: IFFALSE 23135
// exit ;
23133: GO 23164
// for i in tmp do
23135: LD_ADDR_VAR 0 1
23139: PUSH
23140: LD_VAR 0 2
23144: PUSH
23145: FOR_IN
23146: IFFALSE 23162
// begin SetLives ( i , 0 ) ;
23148: LD_VAR 0 1
23152: PPUSH
23153: LD_INT 0
23155: PPUSH
23156: CALL_OW 234
// end ;
23160: GO 23145
23162: POP
23163: POP
// end ;
23164: PPOPN 2
23166: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23167: LD_EXP 52
23171: PUSH
23172: LD_EXP 55
23176: AND
23177: IFFALSE 23270
23179: GO 23181
23181: DISABLE
23182: LD_INT 0
23184: PPUSH
// begin enable ;
23185: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23186: LD_ADDR_VAR 0 1
23190: PUSH
23191: LD_INT 22
23193: PUSH
23194: LD_OWVAR 2
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 2
23205: PUSH
23206: LD_INT 25
23208: PUSH
23209: LD_INT 5
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 25
23218: PUSH
23219: LD_INT 9
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 25
23228: PUSH
23229: LD_INT 8
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PPUSH
23246: CALL_OW 69
23250: PUSH
23251: FOR_IN
23252: IFFALSE 23268
// begin SetClass ( i , 1 ) ;
23254: LD_VAR 0 1
23258: PPUSH
23259: LD_INT 1
23261: PPUSH
23262: CALL_OW 336
// end ;
23266: GO 23251
23268: POP
23269: POP
// end ;
23270: PPOPN 1
23272: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23273: LD_EXP 52
23277: PUSH
23278: LD_EXP 56
23282: AND
23283: PUSH
23284: LD_OWVAR 65
23288: PUSH
23289: LD_INT 7
23291: LESS
23292: AND
23293: IFFALSE 23307
23295: GO 23297
23297: DISABLE
// begin enable ;
23298: ENABLE
// game_speed := 7 ;
23299: LD_ADDR_OWVAR 65
23303: PUSH
23304: LD_INT 7
23306: ST_TO_ADDR
// end ;
23307: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23308: LD_EXP 52
23312: PUSH
23313: LD_EXP 59
23317: AND
23318: IFFALSE 23520
23320: GO 23322
23322: DISABLE
23323: LD_INT 0
23325: PPUSH
23326: PPUSH
23327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23328: LD_ADDR_VAR 0 3
23332: PUSH
23333: LD_INT 81
23335: PUSH
23336: LD_OWVAR 2
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 21
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: ST_TO_ADDR
// if not tmp then
23364: LD_VAR 0 3
23368: NOT
23369: IFFALSE 23373
// exit ;
23371: GO 23520
// if tmp > 5 then
23373: LD_VAR 0 3
23377: PUSH
23378: LD_INT 5
23380: GREATER
23381: IFFALSE 23393
// k := 5 else
23383: LD_ADDR_VAR 0 2
23387: PUSH
23388: LD_INT 5
23390: ST_TO_ADDR
23391: GO 23403
// k := tmp ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_VAR 0 3
23402: ST_TO_ADDR
// for i := 1 to k do
23403: LD_ADDR_VAR 0 1
23407: PUSH
23408: DOUBLE
23409: LD_INT 1
23411: DEC
23412: ST_TO_ADDR
23413: LD_VAR 0 2
23417: PUSH
23418: FOR_TO
23419: IFFALSE 23518
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23421: LD_VAR 0 3
23425: PUSH
23426: LD_VAR 0 1
23430: ARRAY
23431: PPUSH
23432: LD_VAR 0 1
23436: PUSH
23437: LD_INT 4
23439: MOD
23440: PUSH
23441: LD_INT 1
23443: PLUS
23444: PPUSH
23445: CALL_OW 259
23449: PUSH
23450: LD_INT 10
23452: LESS
23453: IFFALSE 23516
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23455: LD_VAR 0 3
23459: PUSH
23460: LD_VAR 0 1
23464: ARRAY
23465: PPUSH
23466: LD_VAR 0 1
23470: PUSH
23471: LD_INT 4
23473: MOD
23474: PUSH
23475: LD_INT 1
23477: PLUS
23478: PPUSH
23479: LD_VAR 0 3
23483: PUSH
23484: LD_VAR 0 1
23488: ARRAY
23489: PPUSH
23490: LD_VAR 0 1
23494: PUSH
23495: LD_INT 4
23497: MOD
23498: PUSH
23499: LD_INT 1
23501: PLUS
23502: PPUSH
23503: CALL_OW 259
23507: PUSH
23508: LD_INT 1
23510: PLUS
23511: PPUSH
23512: CALL_OW 237
23516: GO 23418
23518: POP
23519: POP
// end ;
23520: PPOPN 3
23522: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23523: LD_EXP 52
23527: PUSH
23528: LD_EXP 60
23532: AND
23533: IFFALSE 23553
23535: GO 23537
23537: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23538: LD_INT 4
23540: PPUSH
23541: LD_OWVAR 2
23545: PPUSH
23546: LD_INT 0
23548: PPUSH
23549: CALL_OW 324
23553: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23554: LD_EXP 52
23558: PUSH
23559: LD_EXP 89
23563: AND
23564: IFFALSE 23584
23566: GO 23568
23568: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23569: LD_INT 19
23571: PPUSH
23572: LD_OWVAR 2
23576: PPUSH
23577: LD_INT 0
23579: PPUSH
23580: CALL_OW 324
23584: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23585: LD_EXP 52
23589: PUSH
23590: LD_EXP 61
23594: AND
23595: IFFALSE 23697
23597: GO 23599
23599: DISABLE
23600: LD_INT 0
23602: PPUSH
23603: PPUSH
// begin enable ;
23604: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23605: LD_ADDR_VAR 0 2
23609: PUSH
23610: LD_INT 22
23612: PUSH
23613: LD_OWVAR 2
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: LD_INT 34
23627: PUSH
23628: LD_INT 11
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 34
23637: PUSH
23638: LD_INT 30
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PPUSH
23654: CALL_OW 69
23658: ST_TO_ADDR
// if not tmp then
23659: LD_VAR 0 2
23663: NOT
23664: IFFALSE 23668
// exit ;
23666: GO 23697
// for i in tmp do
23668: LD_ADDR_VAR 0 1
23672: PUSH
23673: LD_VAR 0 2
23677: PUSH
23678: FOR_IN
23679: IFFALSE 23695
// begin SetLives ( i , 0 ) ;
23681: LD_VAR 0 1
23685: PPUSH
23686: LD_INT 0
23688: PPUSH
23689: CALL_OW 234
// end ;
23693: GO 23678
23695: POP
23696: POP
// end ;
23697: PPOPN 2
23699: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23700: LD_EXP 52
23704: PUSH
23705: LD_EXP 62
23709: AND
23710: IFFALSE 23730
23712: GO 23714
23714: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23715: LD_INT 32
23717: PPUSH
23718: LD_OWVAR 2
23722: PPUSH
23723: LD_INT 0
23725: PPUSH
23726: CALL_OW 324
23730: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23731: LD_EXP 52
23735: PUSH
23736: LD_EXP 63
23740: AND
23741: IFFALSE 23922
23743: GO 23745
23745: DISABLE
23746: LD_INT 0
23748: PPUSH
23749: PPUSH
23750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23751: LD_ADDR_VAR 0 2
23755: PUSH
23756: LD_INT 22
23758: PUSH
23759: LD_OWVAR 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 33
23770: PUSH
23771: LD_INT 3
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PPUSH
23782: CALL_OW 69
23786: ST_TO_ADDR
// if not tmp then
23787: LD_VAR 0 2
23791: NOT
23792: IFFALSE 23796
// exit ;
23794: GO 23922
// side := 0 ;
23796: LD_ADDR_VAR 0 3
23800: PUSH
23801: LD_INT 0
23803: ST_TO_ADDR
// for i := 1 to 8 do
23804: LD_ADDR_VAR 0 1
23808: PUSH
23809: DOUBLE
23810: LD_INT 1
23812: DEC
23813: ST_TO_ADDR
23814: LD_INT 8
23816: PUSH
23817: FOR_TO
23818: IFFALSE 23866
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23820: LD_OWVAR 2
23824: PUSH
23825: LD_VAR 0 1
23829: NONEQUAL
23830: PUSH
23831: LD_OWVAR 2
23835: PPUSH
23836: LD_VAR 0 1
23840: PPUSH
23841: CALL_OW 81
23845: PUSH
23846: LD_INT 2
23848: EQUAL
23849: AND
23850: IFFALSE 23864
// begin side := i ;
23852: LD_ADDR_VAR 0 3
23856: PUSH
23857: LD_VAR 0 1
23861: ST_TO_ADDR
// break ;
23862: GO 23866
// end ;
23864: GO 23817
23866: POP
23867: POP
// if not side then
23868: LD_VAR 0 3
23872: NOT
23873: IFFALSE 23877
// exit ;
23875: GO 23922
// for i := 1 to tmp do
23877: LD_ADDR_VAR 0 1
23881: PUSH
23882: DOUBLE
23883: LD_INT 1
23885: DEC
23886: ST_TO_ADDR
23887: LD_VAR 0 2
23891: PUSH
23892: FOR_TO
23893: IFFALSE 23920
// if Prob ( 60 ) then
23895: LD_INT 60
23897: PPUSH
23898: CALL_OW 13
23902: IFFALSE 23918
// SetSide ( i , side ) ;
23904: LD_VAR 0 1
23908: PPUSH
23909: LD_VAR 0 3
23913: PPUSH
23914: CALL_OW 235
23918: GO 23892
23920: POP
23921: POP
// end ;
23922: PPOPN 3
23924: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23925: LD_EXP 52
23929: PUSH
23930: LD_EXP 65
23934: AND
23935: IFFALSE 24054
23937: GO 23939
23939: DISABLE
23940: LD_INT 0
23942: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23943: LD_ADDR_VAR 0 1
23947: PUSH
23948: LD_INT 22
23950: PUSH
23951: LD_OWVAR 2
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 21
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 3
23972: PUSH
23973: LD_INT 23
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: PPUSH
23992: CALL_OW 69
23996: PUSH
23997: FOR_IN
23998: IFFALSE 24052
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24000: LD_VAR 0 1
24004: PPUSH
24005: CALL_OW 257
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 3
24018: PUSH
24019: LD_INT 4
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: IN
24028: IFFALSE 24050
// SetClass ( un , rand ( 1 , 4 ) ) ;
24030: LD_VAR 0 1
24034: PPUSH
24035: LD_INT 1
24037: PPUSH
24038: LD_INT 4
24040: PPUSH
24041: CALL_OW 12
24045: PPUSH
24046: CALL_OW 336
24050: GO 23997
24052: POP
24053: POP
// end ;
24054: PPOPN 1
24056: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24057: LD_EXP 52
24061: PUSH
24062: LD_EXP 64
24066: AND
24067: IFFALSE 24146
24069: GO 24071
24071: DISABLE
24072: LD_INT 0
24074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24075: LD_ADDR_VAR 0 1
24079: PUSH
24080: LD_INT 22
24082: PUSH
24083: LD_OWVAR 2
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 21
24094: PUSH
24095: LD_INT 3
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PPUSH
24106: CALL_OW 69
24110: ST_TO_ADDR
// if not tmp then
24111: LD_VAR 0 1
24115: NOT
24116: IFFALSE 24120
// exit ;
24118: GO 24146
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24120: LD_VAR 0 1
24124: PUSH
24125: LD_INT 1
24127: PPUSH
24128: LD_VAR 0 1
24132: PPUSH
24133: CALL_OW 12
24137: ARRAY
24138: PPUSH
24139: LD_INT 100
24141: PPUSH
24142: CALL_OW 234
// end ;
24146: PPOPN 1
24148: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24149: LD_EXP 52
24153: PUSH
24154: LD_EXP 66
24158: AND
24159: IFFALSE 24257
24161: GO 24163
24163: DISABLE
24164: LD_INT 0
24166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24167: LD_ADDR_VAR 0 1
24171: PUSH
24172: LD_INT 22
24174: PUSH
24175: LD_OWVAR 2
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 21
24186: PUSH
24187: LD_INT 1
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PPUSH
24198: CALL_OW 69
24202: ST_TO_ADDR
// if not tmp then
24203: LD_VAR 0 1
24207: NOT
24208: IFFALSE 24212
// exit ;
24210: GO 24257
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24212: LD_VAR 0 1
24216: PUSH
24217: LD_INT 1
24219: PPUSH
24220: LD_VAR 0 1
24224: PPUSH
24225: CALL_OW 12
24229: ARRAY
24230: PPUSH
24231: LD_INT 1
24233: PPUSH
24234: LD_INT 4
24236: PPUSH
24237: CALL_OW 12
24241: PPUSH
24242: LD_INT 3000
24244: PPUSH
24245: LD_INT 9000
24247: PPUSH
24248: CALL_OW 12
24252: PPUSH
24253: CALL_OW 492
// end ;
24257: PPOPN 1
24259: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24260: LD_EXP 52
24264: PUSH
24265: LD_EXP 67
24269: AND
24270: IFFALSE 24290
24272: GO 24274
24274: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24275: LD_INT 1
24277: PPUSH
24278: LD_OWVAR 2
24282: PPUSH
24283: LD_INT 0
24285: PPUSH
24286: CALL_OW 324
24290: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24291: LD_EXP 52
24295: PUSH
24296: LD_EXP 68
24300: AND
24301: IFFALSE 24384
24303: GO 24305
24305: DISABLE
24306: LD_INT 0
24308: PPUSH
24309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24310: LD_ADDR_VAR 0 2
24314: PUSH
24315: LD_INT 22
24317: PUSH
24318: LD_OWVAR 2
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 21
24329: PUSH
24330: LD_INT 3
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PPUSH
24341: CALL_OW 69
24345: ST_TO_ADDR
// if not tmp then
24346: LD_VAR 0 2
24350: NOT
24351: IFFALSE 24355
// exit ;
24353: GO 24384
// for i in tmp do
24355: LD_ADDR_VAR 0 1
24359: PUSH
24360: LD_VAR 0 2
24364: PUSH
24365: FOR_IN
24366: IFFALSE 24382
// SetBLevel ( i , 10 ) ;
24368: LD_VAR 0 1
24372: PPUSH
24373: LD_INT 10
24375: PPUSH
24376: CALL_OW 241
24380: GO 24365
24382: POP
24383: POP
// end ;
24384: PPOPN 2
24386: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24387: LD_EXP 52
24391: PUSH
24392: LD_EXP 69
24396: AND
24397: IFFALSE 24508
24399: GO 24401
24401: DISABLE
24402: LD_INT 0
24404: PPUSH
24405: PPUSH
24406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24407: LD_ADDR_VAR 0 3
24411: PUSH
24412: LD_INT 22
24414: PUSH
24415: LD_OWVAR 2
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 25
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PPUSH
24438: CALL_OW 69
24442: ST_TO_ADDR
// if not tmp then
24443: LD_VAR 0 3
24447: NOT
24448: IFFALSE 24452
// exit ;
24450: GO 24508
// un := tmp [ rand ( 1 , tmp ) ] ;
24452: LD_ADDR_VAR 0 2
24456: PUSH
24457: LD_VAR 0 3
24461: PUSH
24462: LD_INT 1
24464: PPUSH
24465: LD_VAR 0 3
24469: PPUSH
24470: CALL_OW 12
24474: ARRAY
24475: ST_TO_ADDR
// if Crawls ( un ) then
24476: LD_VAR 0 2
24480: PPUSH
24481: CALL_OW 318
24485: IFFALSE 24496
// ComWalk ( un ) ;
24487: LD_VAR 0 2
24491: PPUSH
24492: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24496: LD_VAR 0 2
24500: PPUSH
24501: LD_INT 5
24503: PPUSH
24504: CALL_OW 336
// end ;
24508: PPOPN 3
24510: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24511: LD_EXP 52
24515: PUSH
24516: LD_EXP 70
24520: AND
24521: PUSH
24522: LD_OWVAR 67
24526: PUSH
24527: LD_INT 3
24529: LESS
24530: AND
24531: IFFALSE 24550
24533: GO 24535
24535: DISABLE
// Difficulty := Difficulty + 1 ;
24536: LD_ADDR_OWVAR 67
24540: PUSH
24541: LD_OWVAR 67
24545: PUSH
24546: LD_INT 1
24548: PLUS
24549: ST_TO_ADDR
24550: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24551: LD_EXP 52
24555: PUSH
24556: LD_EXP 71
24560: AND
24561: IFFALSE 24664
24563: GO 24565
24565: DISABLE
24566: LD_INT 0
24568: PPUSH
// begin for i := 1 to 5 do
24569: LD_ADDR_VAR 0 1
24573: PUSH
24574: DOUBLE
24575: LD_INT 1
24577: DEC
24578: ST_TO_ADDR
24579: LD_INT 5
24581: PUSH
24582: FOR_TO
24583: IFFALSE 24662
// begin uc_nation := nation_nature ;
24585: LD_ADDR_OWVAR 21
24589: PUSH
24590: LD_INT 0
24592: ST_TO_ADDR
// uc_side := 0 ;
24593: LD_ADDR_OWVAR 20
24597: PUSH
24598: LD_INT 0
24600: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24601: LD_ADDR_OWVAR 29
24605: PUSH
24606: LD_INT 12
24608: PUSH
24609: LD_INT 12
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: ST_TO_ADDR
// hc_agressivity := 20 ;
24616: LD_ADDR_OWVAR 35
24620: PUSH
24621: LD_INT 20
24623: ST_TO_ADDR
// hc_class := class_tiger ;
24624: LD_ADDR_OWVAR 28
24628: PUSH
24629: LD_INT 14
24631: ST_TO_ADDR
// hc_gallery :=  ;
24632: LD_ADDR_OWVAR 33
24636: PUSH
24637: LD_STRING 
24639: ST_TO_ADDR
// hc_name :=  ;
24640: LD_ADDR_OWVAR 26
24644: PUSH
24645: LD_STRING 
24647: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24648: CALL_OW 44
24652: PPUSH
24653: LD_INT 0
24655: PPUSH
24656: CALL_OW 51
// end ;
24660: GO 24582
24662: POP
24663: POP
// end ;
24664: PPOPN 1
24666: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24667: LD_EXP 52
24671: PUSH
24672: LD_EXP 72
24676: AND
24677: IFFALSE 24686
24679: GO 24681
24681: DISABLE
// StreamSibBomb ;
24682: CALL 24687 0 0
24686: END
// export function StreamSibBomb ; var i , x , y ; begin
24687: LD_INT 0
24689: PPUSH
24690: PPUSH
24691: PPUSH
24692: PPUSH
// result := false ;
24693: LD_ADDR_VAR 0 1
24697: PUSH
24698: LD_INT 0
24700: ST_TO_ADDR
// for i := 1 to 16 do
24701: LD_ADDR_VAR 0 2
24705: PUSH
24706: DOUBLE
24707: LD_INT 1
24709: DEC
24710: ST_TO_ADDR
24711: LD_INT 16
24713: PUSH
24714: FOR_TO
24715: IFFALSE 24914
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24717: LD_ADDR_VAR 0 3
24721: PUSH
24722: LD_INT 10
24724: PUSH
24725: LD_INT 20
24727: PUSH
24728: LD_INT 30
24730: PUSH
24731: LD_INT 40
24733: PUSH
24734: LD_INT 50
24736: PUSH
24737: LD_INT 60
24739: PUSH
24740: LD_INT 70
24742: PUSH
24743: LD_INT 80
24745: PUSH
24746: LD_INT 90
24748: PUSH
24749: LD_INT 100
24751: PUSH
24752: LD_INT 110
24754: PUSH
24755: LD_INT 120
24757: PUSH
24758: LD_INT 130
24760: PUSH
24761: LD_INT 140
24763: PUSH
24764: LD_INT 150
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: PPUSH
24787: LD_INT 15
24789: PPUSH
24790: CALL_OW 12
24794: ARRAY
24795: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24796: LD_ADDR_VAR 0 4
24800: PUSH
24801: LD_INT 10
24803: PUSH
24804: LD_INT 20
24806: PUSH
24807: LD_INT 30
24809: PUSH
24810: LD_INT 40
24812: PUSH
24813: LD_INT 50
24815: PUSH
24816: LD_INT 60
24818: PUSH
24819: LD_INT 70
24821: PUSH
24822: LD_INT 80
24824: PUSH
24825: LD_INT 90
24827: PUSH
24828: LD_INT 100
24830: PUSH
24831: LD_INT 110
24833: PUSH
24834: LD_INT 120
24836: PUSH
24837: LD_INT 130
24839: PUSH
24840: LD_INT 140
24842: PUSH
24843: LD_INT 150
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: PPUSH
24866: LD_INT 15
24868: PPUSH
24869: CALL_OW 12
24873: ARRAY
24874: ST_TO_ADDR
// if ValidHex ( x , y ) then
24875: LD_VAR 0 3
24879: PPUSH
24880: LD_VAR 0 4
24884: PPUSH
24885: CALL_OW 488
24889: IFFALSE 24912
// begin result := [ x , y ] ;
24891: LD_ADDR_VAR 0 1
24895: PUSH
24896: LD_VAR 0 3
24900: PUSH
24901: LD_VAR 0 4
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: ST_TO_ADDR
// break ;
24910: GO 24914
// end ; end ;
24912: GO 24714
24914: POP
24915: POP
// if result then
24916: LD_VAR 0 1
24920: IFFALSE 24980
// begin ToLua ( playSibBomb() ) ;
24922: LD_STRING playSibBomb()
24924: PPUSH
24925: CALL_OW 559
// wait ( 0 0$14 ) ;
24929: LD_INT 490
24931: PPUSH
24932: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24936: LD_VAR 0 1
24940: PUSH
24941: LD_INT 1
24943: ARRAY
24944: PPUSH
24945: LD_VAR 0 1
24949: PUSH
24950: LD_INT 2
24952: ARRAY
24953: PPUSH
24954: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24958: LD_VAR 0 1
24962: PUSH
24963: LD_INT 1
24965: ARRAY
24966: PPUSH
24967: LD_VAR 0 1
24971: PUSH
24972: LD_INT 2
24974: ARRAY
24975: PPUSH
24976: CALL_OW 429
// end ; end ;
24980: LD_VAR 0 1
24984: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24985: LD_EXP 52
24989: PUSH
24990: LD_EXP 74
24994: AND
24995: IFFALSE 25007
24997: GO 24999
24999: DISABLE
// YouLost (  ) ;
25000: LD_STRING 
25002: PPUSH
25003: CALL_OW 104
25007: END
// every 0 0$1 trigger StreamModeActive and sFog do
25008: LD_EXP 52
25012: PUSH
25013: LD_EXP 73
25017: AND
25018: IFFALSE 25032
25020: GO 25022
25022: DISABLE
// FogOff ( your_side ) ;
25023: LD_OWVAR 2
25027: PPUSH
25028: CALL_OW 344
25032: END
// every 0 0$1 trigger StreamModeActive and sSun do
25033: LD_EXP 52
25037: PUSH
25038: LD_EXP 75
25042: AND
25043: IFFALSE 25071
25045: GO 25047
25047: DISABLE
// begin solar_recharge_percent := 0 ;
25048: LD_ADDR_OWVAR 79
25052: PUSH
25053: LD_INT 0
25055: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25056: LD_INT 10500
25058: PPUSH
25059: CALL_OW 67
// solar_recharge_percent := 100 ;
25063: LD_ADDR_OWVAR 79
25067: PUSH
25068: LD_INT 100
25070: ST_TO_ADDR
// end ;
25071: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25072: LD_EXP 52
25076: PUSH
25077: LD_EXP 76
25081: AND
25082: IFFALSE 25321
25084: GO 25086
25086: DISABLE
25087: LD_INT 0
25089: PPUSH
25090: PPUSH
25091: PPUSH
// begin tmp := [ ] ;
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: EMPTY
25098: ST_TO_ADDR
// for i := 1 to 6 do
25099: LD_ADDR_VAR 0 1
25103: PUSH
25104: DOUBLE
25105: LD_INT 1
25107: DEC
25108: ST_TO_ADDR
25109: LD_INT 6
25111: PUSH
25112: FOR_TO
25113: IFFALSE 25218
// begin uc_nation := nation_nature ;
25115: LD_ADDR_OWVAR 21
25119: PUSH
25120: LD_INT 0
25122: ST_TO_ADDR
// uc_side := 0 ;
25123: LD_ADDR_OWVAR 20
25127: PUSH
25128: LD_INT 0
25130: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25131: LD_ADDR_OWVAR 29
25135: PUSH
25136: LD_INT 12
25138: PUSH
25139: LD_INT 12
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: ST_TO_ADDR
// hc_agressivity := 20 ;
25146: LD_ADDR_OWVAR 35
25150: PUSH
25151: LD_INT 20
25153: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25154: LD_ADDR_OWVAR 28
25158: PUSH
25159: LD_INT 17
25161: ST_TO_ADDR
// hc_gallery :=  ;
25162: LD_ADDR_OWVAR 33
25166: PUSH
25167: LD_STRING 
25169: ST_TO_ADDR
// hc_name :=  ;
25170: LD_ADDR_OWVAR 26
25174: PUSH
25175: LD_STRING 
25177: ST_TO_ADDR
// un := CreateHuman ;
25178: LD_ADDR_VAR 0 2
25182: PUSH
25183: CALL_OW 44
25187: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25188: LD_VAR 0 2
25192: PPUSH
25193: LD_INT 1
25195: PPUSH
25196: CALL_OW 51
// tmp := tmp ^ un ;
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_VAR 0 3
25209: PUSH
25210: LD_VAR 0 2
25214: ADD
25215: ST_TO_ADDR
// end ;
25216: GO 25112
25218: POP
25219: POP
// repeat wait ( 0 0$1 ) ;
25220: LD_INT 35
25222: PPUSH
25223: CALL_OW 67
// for un in tmp do
25227: LD_ADDR_VAR 0 2
25231: PUSH
25232: LD_VAR 0 3
25236: PUSH
25237: FOR_IN
25238: IFFALSE 25312
// begin if IsDead ( un ) then
25240: LD_VAR 0 2
25244: PPUSH
25245: CALL_OW 301
25249: IFFALSE 25269
// begin tmp := tmp diff un ;
25251: LD_ADDR_VAR 0 3
25255: PUSH
25256: LD_VAR 0 3
25260: PUSH
25261: LD_VAR 0 2
25265: DIFF
25266: ST_TO_ADDR
// continue ;
25267: GO 25237
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25269: LD_VAR 0 2
25273: PPUSH
25274: LD_INT 3
25276: PUSH
25277: LD_INT 22
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: CALL_OW 69
25295: PPUSH
25296: LD_VAR 0 2
25300: PPUSH
25301: CALL_OW 74
25305: PPUSH
25306: CALL_OW 115
// end ;
25310: GO 25237
25312: POP
25313: POP
// until not tmp ;
25314: LD_VAR 0 3
25318: NOT
25319: IFFALSE 25220
// end ;
25321: PPOPN 3
25323: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25324: LD_EXP 52
25328: PUSH
25329: LD_EXP 77
25333: AND
25334: IFFALSE 25388
25336: GO 25338
25338: DISABLE
// begin ToLua ( displayTroll(); ) ;
25339: LD_STRING displayTroll();
25341: PPUSH
25342: CALL_OW 559
// wait ( 3 3$00 ) ;
25346: LD_INT 6300
25348: PPUSH
25349: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25353: LD_STRING hideTroll();
25355: PPUSH
25356: CALL_OW 559
// wait ( 1 1$00 ) ;
25360: LD_INT 2100
25362: PPUSH
25363: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25367: LD_STRING displayTroll();
25369: PPUSH
25370: CALL_OW 559
// wait ( 1 1$00 ) ;
25374: LD_INT 2100
25376: PPUSH
25377: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25381: LD_STRING hideTroll();
25383: PPUSH
25384: CALL_OW 559
// end ;
25388: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25389: LD_EXP 52
25393: PUSH
25394: LD_EXP 78
25398: AND
25399: IFFALSE 25462
25401: GO 25403
25403: DISABLE
25404: LD_INT 0
25406: PPUSH
// begin p := 0 ;
25407: LD_ADDR_VAR 0 1
25411: PUSH
25412: LD_INT 0
25414: ST_TO_ADDR
// repeat game_speed := 1 ;
25415: LD_ADDR_OWVAR 65
25419: PUSH
25420: LD_INT 1
25422: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25423: LD_INT 35
25425: PPUSH
25426: CALL_OW 67
// p := p + 1 ;
25430: LD_ADDR_VAR 0 1
25434: PUSH
25435: LD_VAR 0 1
25439: PUSH
25440: LD_INT 1
25442: PLUS
25443: ST_TO_ADDR
// until p >= 60 ;
25444: LD_VAR 0 1
25448: PUSH
25449: LD_INT 60
25451: GREATEREQUAL
25452: IFFALSE 25415
// game_speed := 4 ;
25454: LD_ADDR_OWVAR 65
25458: PUSH
25459: LD_INT 4
25461: ST_TO_ADDR
// end ;
25462: PPOPN 1
25464: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25465: LD_EXP 52
25469: PUSH
25470: LD_EXP 79
25474: AND
25475: IFFALSE 25621
25477: GO 25479
25479: DISABLE
25480: LD_INT 0
25482: PPUSH
25483: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25484: LD_ADDR_VAR 0 1
25488: PUSH
25489: LD_INT 22
25491: PUSH
25492: LD_OWVAR 2
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: LD_INT 30
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 30
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL_OW 69
25537: ST_TO_ADDR
// if not depot then
25538: LD_VAR 0 1
25542: NOT
25543: IFFALSE 25547
// exit ;
25545: GO 25621
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25547: LD_ADDR_VAR 0 2
25551: PUSH
25552: LD_VAR 0 1
25556: PUSH
25557: LD_INT 1
25559: PPUSH
25560: LD_VAR 0 1
25564: PPUSH
25565: CALL_OW 12
25569: ARRAY
25570: PPUSH
25571: CALL_OW 274
25575: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25576: LD_VAR 0 2
25580: PPUSH
25581: LD_INT 1
25583: PPUSH
25584: LD_INT 0
25586: PPUSH
25587: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25591: LD_VAR 0 2
25595: PPUSH
25596: LD_INT 2
25598: PPUSH
25599: LD_INT 0
25601: PPUSH
25602: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25606: LD_VAR 0 2
25610: PPUSH
25611: LD_INT 3
25613: PPUSH
25614: LD_INT 0
25616: PPUSH
25617: CALL_OW 277
// end ;
25621: PPOPN 2
25623: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25624: LD_EXP 52
25628: PUSH
25629: LD_EXP 80
25633: AND
25634: IFFALSE 25731
25636: GO 25638
25638: DISABLE
25639: LD_INT 0
25641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25642: LD_ADDR_VAR 0 1
25646: PUSH
25647: LD_INT 22
25649: PUSH
25650: LD_OWVAR 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 21
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: LD_INT 23
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: PPUSH
25691: CALL_OW 69
25695: ST_TO_ADDR
// if not tmp then
25696: LD_VAR 0 1
25700: NOT
25701: IFFALSE 25705
// exit ;
25703: GO 25731
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25705: LD_VAR 0 1
25709: PUSH
25710: LD_INT 1
25712: PPUSH
25713: LD_VAR 0 1
25717: PPUSH
25718: CALL_OW 12
25722: ARRAY
25723: PPUSH
25724: LD_INT 200
25726: PPUSH
25727: CALL_OW 234
// end ;
25731: PPOPN 1
25733: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25734: LD_EXP 52
25738: PUSH
25739: LD_EXP 81
25743: AND
25744: IFFALSE 25823
25746: GO 25748
25748: DISABLE
25749: LD_INT 0
25751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25752: LD_ADDR_VAR 0 1
25756: PUSH
25757: LD_INT 22
25759: PUSH
25760: LD_OWVAR 2
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 21
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 69
25787: ST_TO_ADDR
// if not tmp then
25788: LD_VAR 0 1
25792: NOT
25793: IFFALSE 25797
// exit ;
25795: GO 25823
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25797: LD_VAR 0 1
25801: PUSH
25802: LD_INT 1
25804: PPUSH
25805: LD_VAR 0 1
25809: PPUSH
25810: CALL_OW 12
25814: ARRAY
25815: PPUSH
25816: LD_INT 60
25818: PPUSH
25819: CALL_OW 234
// end ;
25823: PPOPN 1
25825: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25826: LD_EXP 52
25830: PUSH
25831: LD_EXP 82
25835: AND
25836: IFFALSE 25935
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
25844: PPUSH
// begin enable ;
25845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25846: LD_ADDR_VAR 0 1
25850: PUSH
25851: LD_INT 22
25853: PUSH
25854: LD_OWVAR 2
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 61
25865: PUSH
25866: EMPTY
25867: LIST
25868: PUSH
25869: LD_INT 33
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: PPUSH
25884: CALL_OW 69
25888: ST_TO_ADDR
// if not tmp then
25889: LD_VAR 0 1
25893: NOT
25894: IFFALSE 25898
// exit ;
25896: GO 25935
// for i in tmp do
25898: LD_ADDR_VAR 0 2
25902: PUSH
25903: LD_VAR 0 1
25907: PUSH
25908: FOR_IN
25909: IFFALSE 25933
// if IsControledBy ( i ) then
25911: LD_VAR 0 2
25915: PPUSH
25916: CALL_OW 312
25920: IFFALSE 25931
// ComUnlink ( i ) ;
25922: LD_VAR 0 2
25926: PPUSH
25927: CALL_OW 136
25931: GO 25908
25933: POP
25934: POP
// end ;
25935: PPOPN 2
25937: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25938: LD_EXP 52
25942: PUSH
25943: LD_EXP 83
25947: AND
25948: IFFALSE 26088
25950: GO 25952
25952: DISABLE
25953: LD_INT 0
25955: PPUSH
25956: PPUSH
// begin ToLua ( displayPowell(); ) ;
25957: LD_STRING displayPowell();
25959: PPUSH
25960: CALL_OW 559
// uc_side := 0 ;
25964: LD_ADDR_OWVAR 20
25968: PUSH
25969: LD_INT 0
25971: ST_TO_ADDR
// uc_nation := 2 ;
25972: LD_ADDR_OWVAR 21
25976: PUSH
25977: LD_INT 2
25979: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25980: LD_ADDR_OWVAR 37
25984: PUSH
25985: LD_INT 14
25987: ST_TO_ADDR
// vc_engine := engine_siberite ;
25988: LD_ADDR_OWVAR 39
25992: PUSH
25993: LD_INT 3
25995: ST_TO_ADDR
// vc_control := control_apeman ;
25996: LD_ADDR_OWVAR 38
26000: PUSH
26001: LD_INT 5
26003: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26004: LD_ADDR_OWVAR 40
26008: PUSH
26009: LD_INT 29
26011: ST_TO_ADDR
// un := CreateVehicle ;
26012: LD_ADDR_VAR 0 2
26016: PUSH
26017: CALL_OW 45
26021: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_INT 1
26029: PPUSH
26030: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26034: LD_INT 35
26036: PPUSH
26037: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26041: LD_VAR 0 2
26045: PPUSH
26046: LD_INT 22
26048: PUSH
26049: LD_OWVAR 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PPUSH
26058: CALL_OW 69
26062: PPUSH
26063: LD_VAR 0 2
26067: PPUSH
26068: CALL_OW 74
26072: PPUSH
26073: CALL_OW 115
// until IsDead ( un ) ;
26077: LD_VAR 0 2
26081: PPUSH
26082: CALL_OW 301
26086: IFFALSE 26034
// end ;
26088: PPOPN 2
26090: END
// every 0 0$1 trigger StreamModeActive and sStu do
26091: LD_EXP 52
26095: PUSH
26096: LD_EXP 91
26100: AND
26101: IFFALSE 26117
26103: GO 26105
26105: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26106: LD_STRING displayStucuk();
26108: PPUSH
26109: CALL_OW 559
// ResetFog ;
26113: CALL_OW 335
// end ;
26117: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26118: LD_EXP 52
26122: PUSH
26123: LD_EXP 84
26127: AND
26128: IFFALSE 26269
26130: GO 26132
26132: DISABLE
26133: LD_INT 0
26135: PPUSH
26136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26137: LD_ADDR_VAR 0 2
26141: PUSH
26142: LD_INT 22
26144: PUSH
26145: LD_OWVAR 2
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 21
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PPUSH
26168: CALL_OW 69
26172: ST_TO_ADDR
// if not tmp then
26173: LD_VAR 0 2
26177: NOT
26178: IFFALSE 26182
// exit ;
26180: GO 26269
// un := tmp [ rand ( 1 , tmp ) ] ;
26182: LD_ADDR_VAR 0 1
26186: PUSH
26187: LD_VAR 0 2
26191: PUSH
26192: LD_INT 1
26194: PPUSH
26195: LD_VAR 0 2
26199: PPUSH
26200: CALL_OW 12
26204: ARRAY
26205: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26206: LD_VAR 0 1
26210: PPUSH
26211: LD_INT 0
26213: PPUSH
26214: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26218: LD_VAR 0 1
26222: PPUSH
26223: LD_OWVAR 3
26227: PUSH
26228: LD_VAR 0 1
26232: DIFF
26233: PPUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 74
26243: PPUSH
26244: CALL_OW 115
// wait ( 0 0$20 ) ;
26248: LD_INT 700
26250: PPUSH
26251: CALL_OW 67
// SetSide ( un , your_side ) ;
26255: LD_VAR 0 1
26259: PPUSH
26260: LD_OWVAR 2
26264: PPUSH
26265: CALL_OW 235
// end ;
26269: PPOPN 2
26271: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26272: LD_EXP 52
26276: PUSH
26277: LD_EXP 85
26281: AND
26282: IFFALSE 26388
26284: GO 26286
26286: DISABLE
26287: LD_INT 0
26289: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26290: LD_ADDR_VAR 0 1
26294: PUSH
26295: LD_INT 22
26297: PUSH
26298: LD_OWVAR 2
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 2
26309: PUSH
26310: LD_INT 30
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 30
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PPUSH
26339: CALL_OW 69
26343: ST_TO_ADDR
// if not depot then
26344: LD_VAR 0 1
26348: NOT
26349: IFFALSE 26353
// exit ;
26351: GO 26388
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26353: LD_VAR 0 1
26357: PUSH
26358: LD_INT 1
26360: ARRAY
26361: PPUSH
26362: CALL_OW 250
26366: PPUSH
26367: LD_VAR 0 1
26371: PUSH
26372: LD_INT 1
26374: ARRAY
26375: PPUSH
26376: CALL_OW 251
26380: PPUSH
26381: LD_INT 70
26383: PPUSH
26384: CALL_OW 495
// end ;
26388: PPOPN 1
26390: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26391: LD_EXP 52
26395: PUSH
26396: LD_EXP 86
26400: AND
26401: IFFALSE 26612
26403: GO 26405
26405: DISABLE
26406: LD_INT 0
26408: PPUSH
26409: PPUSH
26410: PPUSH
26411: PPUSH
26412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26413: LD_ADDR_VAR 0 5
26417: PUSH
26418: LD_INT 22
26420: PUSH
26421: LD_OWVAR 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 21
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PPUSH
26444: CALL_OW 69
26448: ST_TO_ADDR
// if not tmp then
26449: LD_VAR 0 5
26453: NOT
26454: IFFALSE 26458
// exit ;
26456: GO 26612
// for i in tmp do
26458: LD_ADDR_VAR 0 1
26462: PUSH
26463: LD_VAR 0 5
26467: PUSH
26468: FOR_IN
26469: IFFALSE 26610
// begin d := rand ( 0 , 5 ) ;
26471: LD_ADDR_VAR 0 4
26475: PUSH
26476: LD_INT 0
26478: PPUSH
26479: LD_INT 5
26481: PPUSH
26482: CALL_OW 12
26486: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26487: LD_ADDR_VAR 0 2
26491: PUSH
26492: LD_VAR 0 1
26496: PPUSH
26497: CALL_OW 250
26501: PPUSH
26502: LD_VAR 0 4
26506: PPUSH
26507: LD_INT 3
26509: PPUSH
26510: LD_INT 12
26512: PPUSH
26513: CALL_OW 12
26517: PPUSH
26518: CALL_OW 272
26522: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26523: LD_ADDR_VAR 0 3
26527: PUSH
26528: LD_VAR 0 1
26532: PPUSH
26533: CALL_OW 251
26537: PPUSH
26538: LD_VAR 0 4
26542: PPUSH
26543: LD_INT 3
26545: PPUSH
26546: LD_INT 12
26548: PPUSH
26549: CALL_OW 12
26553: PPUSH
26554: CALL_OW 273
26558: ST_TO_ADDR
// if ValidHex ( x , y ) then
26559: LD_VAR 0 2
26563: PPUSH
26564: LD_VAR 0 3
26568: PPUSH
26569: CALL_OW 488
26573: IFFALSE 26608
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26575: LD_VAR 0 1
26579: PPUSH
26580: LD_VAR 0 2
26584: PPUSH
26585: LD_VAR 0 3
26589: PPUSH
26590: LD_INT 3
26592: PPUSH
26593: LD_INT 6
26595: PPUSH
26596: CALL_OW 12
26600: PPUSH
26601: LD_INT 1
26603: PPUSH
26604: CALL_OW 483
// end ;
26608: GO 26468
26610: POP
26611: POP
// end ;
26612: PPOPN 5
26614: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26615: LD_EXP 52
26619: PUSH
26620: LD_EXP 87
26624: AND
26625: IFFALSE 26719
26627: GO 26629
26629: DISABLE
26630: LD_INT 0
26632: PPUSH
26633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26634: LD_ADDR_VAR 0 2
26638: PUSH
26639: LD_INT 22
26641: PUSH
26642: LD_OWVAR 2
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 32
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 21
26663: PUSH
26664: LD_INT 2
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: PPUSH
26676: CALL_OW 69
26680: ST_TO_ADDR
// if not tmp then
26681: LD_VAR 0 2
26685: NOT
26686: IFFALSE 26690
// exit ;
26688: GO 26719
// for i in tmp do
26690: LD_ADDR_VAR 0 1
26694: PUSH
26695: LD_VAR 0 2
26699: PUSH
26700: FOR_IN
26701: IFFALSE 26717
// SetFuel ( i , 0 ) ;
26703: LD_VAR 0 1
26707: PPUSH
26708: LD_INT 0
26710: PPUSH
26711: CALL_OW 240
26715: GO 26700
26717: POP
26718: POP
// end ;
26719: PPOPN 2
26721: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26722: LD_EXP 52
26726: PUSH
26727: LD_EXP 88
26731: AND
26732: IFFALSE 26798
26734: GO 26736
26736: DISABLE
26737: LD_INT 0
26739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26740: LD_ADDR_VAR 0 1
26744: PUSH
26745: LD_INT 22
26747: PUSH
26748: LD_OWVAR 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 30
26759: PUSH
26760: LD_INT 29
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PPUSH
26771: CALL_OW 69
26775: ST_TO_ADDR
// if not tmp then
26776: LD_VAR 0 1
26780: NOT
26781: IFFALSE 26785
// exit ;
26783: GO 26798
// DestroyUnit ( tmp [ 1 ] ) ;
26785: LD_VAR 0 1
26789: PUSH
26790: LD_INT 1
26792: ARRAY
26793: PPUSH
26794: CALL_OW 65
// end ;
26798: PPOPN 1
26800: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26801: LD_EXP 52
26805: PUSH
26806: LD_EXP 90
26810: AND
26811: IFFALSE 26940
26813: GO 26815
26815: DISABLE
26816: LD_INT 0
26818: PPUSH
// begin uc_side := 0 ;
26819: LD_ADDR_OWVAR 20
26823: PUSH
26824: LD_INT 0
26826: ST_TO_ADDR
// uc_nation := nation_arabian ;
26827: LD_ADDR_OWVAR 21
26831: PUSH
26832: LD_INT 2
26834: ST_TO_ADDR
// hc_gallery :=  ;
26835: LD_ADDR_OWVAR 33
26839: PUSH
26840: LD_STRING 
26842: ST_TO_ADDR
// hc_name :=  ;
26843: LD_ADDR_OWVAR 26
26847: PUSH
26848: LD_STRING 
26850: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26851: LD_INT 1
26853: PPUSH
26854: LD_INT 11
26856: PPUSH
26857: LD_INT 10
26859: PPUSH
26860: CALL_OW 380
// un := CreateHuman ;
26864: LD_ADDR_VAR 0 1
26868: PUSH
26869: CALL_OW 44
26873: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_INT 1
26881: PPUSH
26882: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26886: LD_INT 35
26888: PPUSH
26889: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26893: LD_VAR 0 1
26897: PPUSH
26898: LD_INT 22
26900: PUSH
26901: LD_OWVAR 2
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 69
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 74
26924: PPUSH
26925: CALL_OW 115
// until IsDead ( un ) ;
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 301
26938: IFFALSE 26886
// end ;
26940: PPOPN 1
26942: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26943: LD_EXP 52
26947: PUSH
26948: LD_EXP 92
26952: AND
26953: IFFALSE 26965
26955: GO 26957
26957: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26958: LD_STRING earthquake(getX(game), 0, 32)
26960: PPUSH
26961: CALL_OW 559
26965: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26966: LD_EXP 52
26970: PUSH
26971: LD_EXP 93
26975: AND
26976: IFFALSE 27067
26978: GO 26980
26980: DISABLE
26981: LD_INT 0
26983: PPUSH
// begin enable ;
26984: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26985: LD_ADDR_VAR 0 1
26989: PUSH
26990: LD_INT 22
26992: PUSH
26993: LD_OWVAR 2
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 21
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 33
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: PPUSH
27027: CALL_OW 69
27031: ST_TO_ADDR
// if not tmp then
27032: LD_VAR 0 1
27036: NOT
27037: IFFALSE 27041
// exit ;
27039: GO 27067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27041: LD_VAR 0 1
27045: PUSH
27046: LD_INT 1
27048: PPUSH
27049: LD_VAR 0 1
27053: PPUSH
27054: CALL_OW 12
27058: ARRAY
27059: PPUSH
27060: LD_INT 1
27062: PPUSH
27063: CALL_OW 234
// end ;
27067: PPOPN 1
27069: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27070: LD_EXP 52
27074: PUSH
27075: LD_EXP 94
27079: AND
27080: IFFALSE 27221
27082: GO 27084
27084: DISABLE
27085: LD_INT 0
27087: PPUSH
27088: PPUSH
27089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27090: LD_ADDR_VAR 0 3
27094: PUSH
27095: LD_INT 22
27097: PUSH
27098: LD_OWVAR 2
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 25
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PPUSH
27121: CALL_OW 69
27125: ST_TO_ADDR
// if not tmp then
27126: LD_VAR 0 3
27130: NOT
27131: IFFALSE 27135
// exit ;
27133: GO 27221
// un := tmp [ rand ( 1 , tmp ) ] ;
27135: LD_ADDR_VAR 0 2
27139: PUSH
27140: LD_VAR 0 3
27144: PUSH
27145: LD_INT 1
27147: PPUSH
27148: LD_VAR 0 3
27152: PPUSH
27153: CALL_OW 12
27157: ARRAY
27158: ST_TO_ADDR
// if Crawls ( un ) then
27159: LD_VAR 0 2
27163: PPUSH
27164: CALL_OW 318
27168: IFFALSE 27179
// ComWalk ( un ) ;
27170: LD_VAR 0 2
27174: PPUSH
27175: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27179: LD_VAR 0 2
27183: PPUSH
27184: LD_INT 9
27186: PPUSH
27187: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27191: LD_INT 28
27193: PPUSH
27194: LD_OWVAR 2
27198: PPUSH
27199: LD_INT 2
27201: PPUSH
27202: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27206: LD_INT 29
27208: PPUSH
27209: LD_OWVAR 2
27213: PPUSH
27214: LD_INT 2
27216: PPUSH
27217: CALL_OW 322
// end ;
27221: PPOPN 3
27223: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27224: LD_EXP 52
27228: PUSH
27229: LD_EXP 95
27233: AND
27234: IFFALSE 27345
27236: GO 27238
27238: DISABLE
27239: LD_INT 0
27241: PPUSH
27242: PPUSH
27243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27244: LD_ADDR_VAR 0 3
27248: PUSH
27249: LD_INT 22
27251: PUSH
27252: LD_OWVAR 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 25
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PPUSH
27275: CALL_OW 69
27279: ST_TO_ADDR
// if not tmp then
27280: LD_VAR 0 3
27284: NOT
27285: IFFALSE 27289
// exit ;
27287: GO 27345
// un := tmp [ rand ( 1 , tmp ) ] ;
27289: LD_ADDR_VAR 0 2
27293: PUSH
27294: LD_VAR 0 3
27298: PUSH
27299: LD_INT 1
27301: PPUSH
27302: LD_VAR 0 3
27306: PPUSH
27307: CALL_OW 12
27311: ARRAY
27312: ST_TO_ADDR
// if Crawls ( un ) then
27313: LD_VAR 0 2
27317: PPUSH
27318: CALL_OW 318
27322: IFFALSE 27333
// ComWalk ( un ) ;
27324: LD_VAR 0 2
27328: PPUSH
27329: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27333: LD_VAR 0 2
27337: PPUSH
27338: LD_INT 8
27340: PPUSH
27341: CALL_OW 336
// end ;
27345: PPOPN 3
27347: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27348: LD_EXP 52
27352: PUSH
27353: LD_EXP 96
27357: AND
27358: IFFALSE 27502
27360: GO 27362
27362: DISABLE
27363: LD_INT 0
27365: PPUSH
27366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27367: LD_ADDR_VAR 0 2
27371: PUSH
27372: LD_INT 22
27374: PUSH
27375: LD_OWVAR 2
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 21
27386: PUSH
27387: LD_INT 2
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 2
27396: PUSH
27397: LD_INT 34
27399: PUSH
27400: LD_INT 12
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 34
27409: PUSH
27410: LD_INT 51
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 34
27419: PUSH
27420: LD_INT 32
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: LIST
27437: PPUSH
27438: CALL_OW 69
27442: ST_TO_ADDR
// if not tmp then
27443: LD_VAR 0 2
27447: NOT
27448: IFFALSE 27452
// exit ;
27450: GO 27502
// for i in tmp do
27452: LD_ADDR_VAR 0 1
27456: PUSH
27457: LD_VAR 0 2
27461: PUSH
27462: FOR_IN
27463: IFFALSE 27500
// if GetCargo ( i , mat_artifact ) = 0 then
27465: LD_VAR 0 1
27469: PPUSH
27470: LD_INT 4
27472: PPUSH
27473: CALL_OW 289
27477: PUSH
27478: LD_INT 0
27480: EQUAL
27481: IFFALSE 27498
// SetCargo ( i , mat_siberit , 100 ) ;
27483: LD_VAR 0 1
27487: PPUSH
27488: LD_INT 3
27490: PPUSH
27491: LD_INT 100
27493: PPUSH
27494: CALL_OW 290
27498: GO 27462
27500: POP
27501: POP
// end ;
27502: PPOPN 2
27504: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27505: LD_EXP 52
27509: PUSH
27510: LD_EXP 97
27514: AND
27515: IFFALSE 27698
27517: GO 27519
27519: DISABLE
27520: LD_INT 0
27522: PPUSH
27523: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27524: LD_ADDR_VAR 0 2
27528: PUSH
27529: LD_INT 22
27531: PUSH
27532: LD_OWVAR 2
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PPUSH
27541: CALL_OW 69
27545: ST_TO_ADDR
// if not tmp then
27546: LD_VAR 0 2
27550: NOT
27551: IFFALSE 27555
// exit ;
27553: GO 27698
// for i := 1 to 2 do
27555: LD_ADDR_VAR 0 1
27559: PUSH
27560: DOUBLE
27561: LD_INT 1
27563: DEC
27564: ST_TO_ADDR
27565: LD_INT 2
27567: PUSH
27568: FOR_TO
27569: IFFALSE 27696
// begin uc_side := your_side ;
27571: LD_ADDR_OWVAR 20
27575: PUSH
27576: LD_OWVAR 2
27580: ST_TO_ADDR
// uc_nation := nation_american ;
27581: LD_ADDR_OWVAR 21
27585: PUSH
27586: LD_INT 1
27588: ST_TO_ADDR
// vc_chassis := us_morphling ;
27589: LD_ADDR_OWVAR 37
27593: PUSH
27594: LD_INT 5
27596: ST_TO_ADDR
// vc_engine := engine_siberite ;
27597: LD_ADDR_OWVAR 39
27601: PUSH
27602: LD_INT 3
27604: ST_TO_ADDR
// vc_control := control_computer ;
27605: LD_ADDR_OWVAR 38
27609: PUSH
27610: LD_INT 3
27612: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27613: LD_ADDR_OWVAR 40
27617: PUSH
27618: LD_INT 10
27620: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27621: LD_VAR 0 2
27625: PUSH
27626: LD_INT 1
27628: ARRAY
27629: PPUSH
27630: CALL_OW 310
27634: NOT
27635: IFFALSE 27682
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27637: CALL_OW 45
27641: PPUSH
27642: LD_VAR 0 2
27646: PUSH
27647: LD_INT 1
27649: ARRAY
27650: PPUSH
27651: CALL_OW 250
27655: PPUSH
27656: LD_VAR 0 2
27660: PUSH
27661: LD_INT 1
27663: ARRAY
27664: PPUSH
27665: CALL_OW 251
27669: PPUSH
27670: LD_INT 12
27672: PPUSH
27673: LD_INT 1
27675: PPUSH
27676: CALL_OW 50
27680: GO 27694
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27682: CALL_OW 45
27686: PPUSH
27687: LD_INT 1
27689: PPUSH
27690: CALL_OW 51
// end ;
27694: GO 27568
27696: POP
27697: POP
// end ;
27698: PPOPN 2
27700: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27701: LD_EXP 52
27705: PUSH
27706: LD_EXP 98
27710: AND
27711: IFFALSE 27933
27713: GO 27715
27715: DISABLE
27716: LD_INT 0
27718: PPUSH
27719: PPUSH
27720: PPUSH
27721: PPUSH
27722: PPUSH
27723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27724: LD_ADDR_VAR 0 6
27728: PUSH
27729: LD_INT 22
27731: PUSH
27732: LD_OWVAR 2
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 21
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 3
27753: PUSH
27754: LD_INT 23
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: PPUSH
27773: CALL_OW 69
27777: ST_TO_ADDR
// if not tmp then
27778: LD_VAR 0 6
27782: NOT
27783: IFFALSE 27787
// exit ;
27785: GO 27933
// s1 := rand ( 1 , 4 ) ;
27787: LD_ADDR_VAR 0 2
27791: PUSH
27792: LD_INT 1
27794: PPUSH
27795: LD_INT 4
27797: PPUSH
27798: CALL_OW 12
27802: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27803: LD_ADDR_VAR 0 4
27807: PUSH
27808: LD_VAR 0 6
27812: PUSH
27813: LD_INT 1
27815: ARRAY
27816: PPUSH
27817: LD_VAR 0 2
27821: PPUSH
27822: CALL_OW 259
27826: ST_TO_ADDR
// if s1 = 1 then
27827: LD_VAR 0 2
27831: PUSH
27832: LD_INT 1
27834: EQUAL
27835: IFFALSE 27855
// s2 := rand ( 2 , 4 ) else
27837: LD_ADDR_VAR 0 3
27841: PUSH
27842: LD_INT 2
27844: PPUSH
27845: LD_INT 4
27847: PPUSH
27848: CALL_OW 12
27852: ST_TO_ADDR
27853: GO 27863
// s2 := 1 ;
27855: LD_ADDR_VAR 0 3
27859: PUSH
27860: LD_INT 1
27862: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27863: LD_ADDR_VAR 0 5
27867: PUSH
27868: LD_VAR 0 6
27872: PUSH
27873: LD_INT 1
27875: ARRAY
27876: PPUSH
27877: LD_VAR 0 3
27881: PPUSH
27882: CALL_OW 259
27886: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27887: LD_VAR 0 6
27891: PUSH
27892: LD_INT 1
27894: ARRAY
27895: PPUSH
27896: LD_VAR 0 2
27900: PPUSH
27901: LD_VAR 0 5
27905: PPUSH
27906: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27910: LD_VAR 0 6
27914: PUSH
27915: LD_INT 1
27917: ARRAY
27918: PPUSH
27919: LD_VAR 0 3
27923: PPUSH
27924: LD_VAR 0 4
27928: PPUSH
27929: CALL_OW 237
// end ;
27933: PPOPN 6
27935: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27936: LD_EXP 52
27940: PUSH
27941: LD_EXP 99
27945: AND
27946: IFFALSE 28025
27948: GO 27950
27950: DISABLE
27951: LD_INT 0
27953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27954: LD_ADDR_VAR 0 1
27958: PUSH
27959: LD_INT 22
27961: PUSH
27962: LD_OWVAR 2
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 30
27973: PUSH
27974: LD_INT 3
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: ST_TO_ADDR
// if not tmp then
27990: LD_VAR 0 1
27994: NOT
27995: IFFALSE 27999
// exit ;
27997: GO 28025
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27999: LD_VAR 0 1
28003: PUSH
28004: LD_INT 1
28006: PPUSH
28007: LD_VAR 0 1
28011: PPUSH
28012: CALL_OW 12
28016: ARRAY
28017: PPUSH
28018: LD_INT 1
28020: PPUSH
28021: CALL_OW 234
// end ;
28025: PPOPN 1
28027: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28028: LD_EXP 52
28032: PUSH
28033: LD_EXP 100
28037: AND
28038: IFFALSE 28150
28040: GO 28042
28042: DISABLE
28043: LD_INT 0
28045: PPUSH
28046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28047: LD_ADDR_VAR 0 2
28051: PUSH
28052: LD_INT 22
28054: PUSH
28055: LD_OWVAR 2
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 2
28066: PUSH
28067: LD_INT 30
28069: PUSH
28070: LD_INT 27
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 30
28079: PUSH
28080: LD_INT 26
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 30
28089: PUSH
28090: LD_INT 28
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PPUSH
28107: CALL_OW 69
28111: ST_TO_ADDR
// if not tmp then
28112: LD_VAR 0 2
28116: NOT
28117: IFFALSE 28121
// exit ;
28119: GO 28150
// for i in tmp do
28121: LD_ADDR_VAR 0 1
28125: PUSH
28126: LD_VAR 0 2
28130: PUSH
28131: FOR_IN
28132: IFFALSE 28148
// SetLives ( i , 1 ) ;
28134: LD_VAR 0 1
28138: PPUSH
28139: LD_INT 1
28141: PPUSH
28142: CALL_OW 234
28146: GO 28131
28148: POP
28149: POP
// end ;
28150: PPOPN 2
28152: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28153: LD_EXP 52
28157: PUSH
28158: LD_EXP 101
28162: AND
28163: IFFALSE 28437
28165: GO 28167
28167: DISABLE
28168: LD_INT 0
28170: PPUSH
28171: PPUSH
28172: PPUSH
// begin i := rand ( 1 , 7 ) ;
28173: LD_ADDR_VAR 0 1
28177: PUSH
28178: LD_INT 1
28180: PPUSH
28181: LD_INT 7
28183: PPUSH
28184: CALL_OW 12
28188: ST_TO_ADDR
// case i of 1 :
28189: LD_VAR 0 1
28193: PUSH
28194: LD_INT 1
28196: DOUBLE
28197: EQUAL
28198: IFTRUE 28202
28200: GO 28212
28202: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28203: LD_STRING earthquake(getX(game), 0, 32)
28205: PPUSH
28206: CALL_OW 559
28210: GO 28437
28212: LD_INT 2
28214: DOUBLE
28215: EQUAL
28216: IFTRUE 28220
28218: GO 28234
28220: POP
// begin ToLua ( displayStucuk(); ) ;
28221: LD_STRING displayStucuk();
28223: PPUSH
28224: CALL_OW 559
// ResetFog ;
28228: CALL_OW 335
// end ; 3 :
28232: GO 28437
28234: LD_INT 3
28236: DOUBLE
28237: EQUAL
28238: IFTRUE 28242
28240: GO 28346
28242: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28243: LD_ADDR_VAR 0 2
28247: PUSH
28248: LD_INT 22
28250: PUSH
28251: LD_OWVAR 2
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 25
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 69
28278: ST_TO_ADDR
// if not tmp then
28279: LD_VAR 0 2
28283: NOT
28284: IFFALSE 28288
// exit ;
28286: GO 28437
// un := tmp [ rand ( 1 , tmp ) ] ;
28288: LD_ADDR_VAR 0 3
28292: PUSH
28293: LD_VAR 0 2
28297: PUSH
28298: LD_INT 1
28300: PPUSH
28301: LD_VAR 0 2
28305: PPUSH
28306: CALL_OW 12
28310: ARRAY
28311: ST_TO_ADDR
// if Crawls ( un ) then
28312: LD_VAR 0 3
28316: PPUSH
28317: CALL_OW 318
28321: IFFALSE 28332
// ComWalk ( un ) ;
28323: LD_VAR 0 3
28327: PPUSH
28328: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28332: LD_VAR 0 3
28336: PPUSH
28337: LD_INT 8
28339: PPUSH
28340: CALL_OW 336
// end ; 4 :
28344: GO 28437
28346: LD_INT 4
28348: DOUBLE
28349: EQUAL
28350: IFTRUE 28354
28352: GO 28415
28354: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28355: LD_ADDR_VAR 0 2
28359: PUSH
28360: LD_INT 22
28362: PUSH
28363: LD_OWVAR 2
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 30
28374: PUSH
28375: LD_INT 29
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PPUSH
28386: CALL_OW 69
28390: ST_TO_ADDR
// if not tmp then
28391: LD_VAR 0 2
28395: NOT
28396: IFFALSE 28400
// exit ;
28398: GO 28437
// DestroyUnit ( tmp [ 1 ] ) ;
28400: LD_VAR 0 2
28404: PUSH
28405: LD_INT 1
28407: ARRAY
28408: PPUSH
28409: CALL_OW 65
// end ; 5 .. 7 :
28413: GO 28437
28415: LD_INT 5
28417: DOUBLE
28418: GREATEREQUAL
28419: IFFALSE 28427
28421: LD_INT 7
28423: DOUBLE
28424: LESSEQUAL
28425: IFTRUE 28429
28427: GO 28436
28429: POP
// StreamSibBomb ; end ;
28430: CALL 24687 0 0
28434: GO 28437
28436: POP
// end ;
28437: PPOPN 3
28439: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28440: LD_EXP 52
28444: PUSH
28445: LD_EXP 102
28449: AND
28450: IFFALSE 28606
28452: GO 28454
28454: DISABLE
28455: LD_INT 0
28457: PPUSH
28458: PPUSH
28459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28460: LD_ADDR_VAR 0 2
28464: PUSH
28465: LD_INT 81
28467: PUSH
28468: LD_OWVAR 2
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: LD_INT 21
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 21
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: LIST
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PPUSH
28509: CALL_OW 69
28513: ST_TO_ADDR
// if not tmp then
28514: LD_VAR 0 2
28518: NOT
28519: IFFALSE 28523
// exit ;
28521: GO 28606
// p := 0 ;
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 0
28530: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28531: LD_INT 35
28533: PPUSH
28534: CALL_OW 67
// p := p + 1 ;
28538: LD_ADDR_VAR 0 3
28542: PUSH
28543: LD_VAR 0 3
28547: PUSH
28548: LD_INT 1
28550: PLUS
28551: ST_TO_ADDR
// for i in tmp do
28552: LD_ADDR_VAR 0 1
28556: PUSH
28557: LD_VAR 0 2
28561: PUSH
28562: FOR_IN
28563: IFFALSE 28594
// if GetLives ( i ) < 1000 then
28565: LD_VAR 0 1
28569: PPUSH
28570: CALL_OW 256
28574: PUSH
28575: LD_INT 1000
28577: LESS
28578: IFFALSE 28592
// SetLives ( i , 1000 ) ;
28580: LD_VAR 0 1
28584: PPUSH
28585: LD_INT 1000
28587: PPUSH
28588: CALL_OW 234
28592: GO 28562
28594: POP
28595: POP
// until p > 20 ;
28596: LD_VAR 0 3
28600: PUSH
28601: LD_INT 20
28603: GREATER
28604: IFFALSE 28531
// end ;
28606: PPOPN 3
28608: END
// every 0 0$1 trigger StreamModeActive and sTime do
28609: LD_EXP 52
28613: PUSH
28614: LD_EXP 103
28618: AND
28619: IFFALSE 28654
28621: GO 28623
28623: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28624: LD_INT 28
28626: PPUSH
28627: LD_OWVAR 2
28631: PPUSH
28632: LD_INT 2
28634: PPUSH
28635: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28639: LD_INT 30
28641: PPUSH
28642: LD_OWVAR 2
28646: PPUSH
28647: LD_INT 2
28649: PPUSH
28650: CALL_OW 322
// end ;
28654: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28655: LD_EXP 52
28659: PUSH
28660: LD_EXP 104
28664: AND
28665: IFFALSE 28786
28667: GO 28669
28669: DISABLE
28670: LD_INT 0
28672: PPUSH
28673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28674: LD_ADDR_VAR 0 2
28678: PUSH
28679: LD_INT 22
28681: PUSH
28682: LD_OWVAR 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 21
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 3
28703: PUSH
28704: LD_INT 23
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: PPUSH
28723: CALL_OW 69
28727: ST_TO_ADDR
// if not tmp then
28728: LD_VAR 0 2
28732: NOT
28733: IFFALSE 28737
// exit ;
28735: GO 28786
// for i in tmp do
28737: LD_ADDR_VAR 0 1
28741: PUSH
28742: LD_VAR 0 2
28746: PUSH
28747: FOR_IN
28748: IFFALSE 28784
// begin if Crawls ( i ) then
28750: LD_VAR 0 1
28754: PPUSH
28755: CALL_OW 318
28759: IFFALSE 28770
// ComWalk ( i ) ;
28761: LD_VAR 0 1
28765: PPUSH
28766: CALL_OW 138
// SetClass ( i , 2 ) ;
28770: LD_VAR 0 1
28774: PPUSH
28775: LD_INT 2
28777: PPUSH
28778: CALL_OW 336
// end ;
28782: GO 28747
28784: POP
28785: POP
// end ;
28786: PPOPN 2
28788: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28789: LD_EXP 52
28793: PUSH
28794: LD_EXP 105
28798: AND
28799: IFFALSE 29080
28801: GO 28803
28803: DISABLE
28804: LD_INT 0
28806: PPUSH
28807: PPUSH
28808: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28809: LD_OWVAR 2
28813: PPUSH
28814: LD_INT 9
28816: PPUSH
28817: LD_INT 1
28819: PPUSH
28820: LD_INT 1
28822: PPUSH
28823: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28827: LD_INT 9
28829: PPUSH
28830: LD_OWVAR 2
28834: PPUSH
28835: CALL_OW 343
// uc_side := 9 ;
28839: LD_ADDR_OWVAR 20
28843: PUSH
28844: LD_INT 9
28846: ST_TO_ADDR
// uc_nation := 2 ;
28847: LD_ADDR_OWVAR 21
28851: PUSH
28852: LD_INT 2
28854: ST_TO_ADDR
// hc_name := Dark Warrior ;
28855: LD_ADDR_OWVAR 26
28859: PUSH
28860: LD_STRING Dark Warrior
28862: ST_TO_ADDR
// hc_gallery :=  ;
28863: LD_ADDR_OWVAR 33
28867: PUSH
28868: LD_STRING 
28870: ST_TO_ADDR
// hc_noskilllimit := true ;
28871: LD_ADDR_OWVAR 76
28875: PUSH
28876: LD_INT 1
28878: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28879: LD_ADDR_OWVAR 31
28883: PUSH
28884: LD_INT 30
28886: PUSH
28887: LD_INT 30
28889: PUSH
28890: LD_INT 30
28892: PUSH
28893: LD_INT 30
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: ST_TO_ADDR
// un := CreateHuman ;
28902: LD_ADDR_VAR 0 3
28906: PUSH
28907: CALL_OW 44
28911: ST_TO_ADDR
// hc_noskilllimit := false ;
28912: LD_ADDR_OWVAR 76
28916: PUSH
28917: LD_INT 0
28919: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28920: LD_VAR 0 3
28924: PPUSH
28925: LD_INT 1
28927: PPUSH
28928: CALL_OW 51
// p := 0 ;
28932: LD_ADDR_VAR 0 2
28936: PUSH
28937: LD_INT 0
28939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28940: LD_INT 35
28942: PPUSH
28943: CALL_OW 67
// p := p + 1 ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_VAR 0 2
28956: PUSH
28957: LD_INT 1
28959: PLUS
28960: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28961: LD_VAR 0 3
28965: PPUSH
28966: CALL_OW 256
28970: PUSH
28971: LD_INT 1000
28973: LESS
28974: IFFALSE 28988
// SetLives ( un , 1000 ) ;
28976: LD_VAR 0 3
28980: PPUSH
28981: LD_INT 1000
28983: PPUSH
28984: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28988: LD_VAR 0 3
28992: PPUSH
28993: LD_INT 81
28995: PUSH
28996: LD_OWVAR 2
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 91
29007: PUSH
29008: LD_VAR 0 3
29012: PUSH
29013: LD_INT 30
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PPUSH
29025: CALL_OW 69
29029: PPUSH
29030: LD_VAR 0 3
29034: PPUSH
29035: CALL_OW 74
29039: PPUSH
29040: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29044: LD_VAR 0 2
29048: PUSH
29049: LD_INT 60
29051: GREATER
29052: PUSH
29053: LD_VAR 0 3
29057: PPUSH
29058: CALL_OW 301
29062: OR
29063: IFFALSE 28940
// if un then
29065: LD_VAR 0 3
29069: IFFALSE 29080
// RemoveUnit ( un ) ;
29071: LD_VAR 0 3
29075: PPUSH
29076: CALL_OW 64
// end ;
29080: PPOPN 3
29082: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29083: LD_INT 0
29085: PPUSH
29086: PPUSH
29087: PPUSH
29088: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29089: LD_ADDR_VAR 0 4
29093: PUSH
29094: LD_INT 22
29096: PUSH
29097: LD_OWVAR 2
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 2
29108: PUSH
29109: LD_INT 30
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 30
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PPUSH
29138: CALL_OW 69
29142: ST_TO_ADDR
// if not tmp then
29143: LD_VAR 0 4
29147: NOT
29148: IFFALSE 29152
// exit ;
29150: GO 29211
// for i in tmp do
29152: LD_ADDR_VAR 0 2
29156: PUSH
29157: LD_VAR 0 4
29161: PUSH
29162: FOR_IN
29163: IFFALSE 29209
// for j = 1 to 3 do
29165: LD_ADDR_VAR 0 3
29169: PUSH
29170: DOUBLE
29171: LD_INT 1
29173: DEC
29174: ST_TO_ADDR
29175: LD_INT 3
29177: PUSH
29178: FOR_TO
29179: IFFALSE 29205
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29181: LD_VAR 0 2
29185: PPUSH
29186: CALL_OW 274
29190: PPUSH
29191: LD_VAR 0 3
29195: PPUSH
29196: LD_INT 99999
29198: PPUSH
29199: CALL_OW 277
29203: GO 29178
29205: POP
29206: POP
29207: GO 29162
29209: POP
29210: POP
// end ;
29211: LD_VAR 0 1
29215: RET
// export function hHackSetLevel10 ; var i , j ; begin
29216: LD_INT 0
29218: PPUSH
29219: PPUSH
29220: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29221: LD_ADDR_VAR 0 2
29225: PUSH
29226: LD_INT 21
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PPUSH
29236: CALL_OW 69
29240: PUSH
29241: FOR_IN
29242: IFFALSE 29294
// if IsSelected ( i ) then
29244: LD_VAR 0 2
29248: PPUSH
29249: CALL_OW 306
29253: IFFALSE 29292
// begin for j := 1 to 4 do
29255: LD_ADDR_VAR 0 3
29259: PUSH
29260: DOUBLE
29261: LD_INT 1
29263: DEC
29264: ST_TO_ADDR
29265: LD_INT 4
29267: PUSH
29268: FOR_TO
29269: IFFALSE 29290
// SetSkill ( i , j , 10 ) ;
29271: LD_VAR 0 2
29275: PPUSH
29276: LD_VAR 0 3
29280: PPUSH
29281: LD_INT 10
29283: PPUSH
29284: CALL_OW 237
29288: GO 29268
29290: POP
29291: POP
// end ;
29292: GO 29241
29294: POP
29295: POP
// end ;
29296: LD_VAR 0 1
29300: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29301: LD_INT 0
29303: PPUSH
29304: PPUSH
29305: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29306: LD_ADDR_VAR 0 2
29310: PUSH
29311: LD_INT 22
29313: PUSH
29314: LD_OWVAR 2
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 21
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PPUSH
29337: CALL_OW 69
29341: PUSH
29342: FOR_IN
29343: IFFALSE 29384
// begin for j := 1 to 4 do
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: DOUBLE
29351: LD_INT 1
29353: DEC
29354: ST_TO_ADDR
29355: LD_INT 4
29357: PUSH
29358: FOR_TO
29359: IFFALSE 29380
// SetSkill ( i , j , 10 ) ;
29361: LD_VAR 0 2
29365: PPUSH
29366: LD_VAR 0 3
29370: PPUSH
29371: LD_INT 10
29373: PPUSH
29374: CALL_OW 237
29378: GO 29358
29380: POP
29381: POP
// end ;
29382: GO 29342
29384: POP
29385: POP
// end ;
29386: LD_VAR 0 1
29390: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
29391: LD_INT 0
29393: PPUSH
// uc_side := your_side ;
29394: LD_ADDR_OWVAR 20
29398: PUSH
29399: LD_OWVAR 2
29403: ST_TO_ADDR
// uc_nation := nation ;
29404: LD_ADDR_OWVAR 21
29408: PUSH
29409: LD_VAR 0 1
29413: ST_TO_ADDR
// InitHc ;
29414: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29418: LD_INT 0
29420: PPUSH
29421: LD_VAR 0 2
29425: PPUSH
29426: LD_VAR 0 3
29430: PPUSH
29431: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
29435: CALL_OW 44
29439: PPUSH
29440: LD_INT 1
29442: PPUSH
29443: CALL_OW 51
// end ;
29447: LD_VAR 0 4
29451: RET
// export function hHackSpawnVehicle ; begin
29452: LD_INT 0
29454: PPUSH
// uc_side := your_side ;
29455: LD_ADDR_OWVAR 20
29459: PUSH
29460: LD_OWVAR 2
29464: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
29465: LD_ADDR_OWVAR 21
29469: PUSH
29470: LD_INT 1
29472: PPUSH
29473: LD_INT 3
29475: PPUSH
29476: CALL_OW 12
29480: ST_TO_ADDR
// InitVc ;
29481: CALL_OW 20
// case uc_nation of 1 :
29485: LD_OWVAR 21
29489: PUSH
29490: LD_INT 1
29492: DOUBLE
29493: EQUAL
29494: IFTRUE 29498
29496: GO 29642
29498: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
29499: LD_ADDR_OWVAR 37
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: LD_INT 4
29515: PUSH
29516: LD_INT 5
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: PPUSH
29529: LD_INT 5
29531: PPUSH
29532: CALL_OW 12
29536: ARRAY
29537: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29538: LD_ADDR_OWVAR 39
29542: PUSH
29543: LD_INT 1
29545: PPUSH
29546: LD_INT 3
29548: PPUSH
29549: CALL_OW 12
29553: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
29554: LD_ADDR_OWVAR 38
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: PPUSH
29576: LD_INT 3
29578: PPUSH
29579: CALL_OW 12
29583: ARRAY
29584: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
29585: LD_ADDR_OWVAR 40
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: LD_INT 4
29595: PUSH
29596: LD_INT 5
29598: PUSH
29599: LD_INT 3
29601: PUSH
29602: LD_INT 7
29604: PUSH
29605: LD_INT 8
29607: PUSH
29608: LD_INT 9
29610: PUSH
29611: LD_INT 10
29613: PUSH
29614: LD_INT 6
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: PPUSH
29631: LD_INT 9
29633: PPUSH
29634: CALL_OW 12
29638: ARRAY
29639: ST_TO_ADDR
// end ; 2 :
29640: GO 29907
29642: LD_INT 2
29644: DOUBLE
29645: EQUAL
29646: IFTRUE 29650
29648: GO 29774
29650: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
29651: LD_ADDR_OWVAR 37
29655: PUSH
29656: LD_INT 11
29658: PUSH
29659: LD_INT 12
29661: PUSH
29662: LD_INT 13
29664: PUSH
29665: LD_INT 14
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: PPUSH
29677: LD_INT 4
29679: PPUSH
29680: CALL_OW 12
29684: ARRAY
29685: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29686: LD_ADDR_OWVAR 39
29690: PUSH
29691: LD_INT 1
29693: PPUSH
29694: LD_INT 3
29696: PPUSH
29697: CALL_OW 12
29701: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
29702: LD_ADDR_OWVAR 38
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: LD_INT 5
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PPUSH
29724: LD_INT 3
29726: PPUSH
29727: CALL_OW 12
29731: ARRAY
29732: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
29733: LD_ADDR_OWVAR 40
29737: PUSH
29738: LD_INT 24
29740: PUSH
29741: LD_INT 26
29743: PUSH
29744: LD_INT 27
29746: PUSH
29747: LD_INT 28
29749: PUSH
29750: LD_INT 29
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: PPUSH
29763: LD_INT 5
29765: PPUSH
29766: CALL_OW 12
29770: ARRAY
29771: ST_TO_ADDR
// end ; 3 :
29772: GO 29907
29774: LD_INT 3
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29906
29782: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
29783: LD_ADDR_OWVAR 37
29787: PUSH
29788: LD_INT 21
29790: PUSH
29791: LD_INT 23
29793: PUSH
29794: LD_INT 22
29796: PUSH
29797: LD_INT 24
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PPUSH
29809: LD_INT 4
29811: PPUSH
29812: CALL_OW 12
29816: ARRAY
29817: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
29818: LD_ADDR_OWVAR 39
29822: PUSH
29823: LD_INT 1
29825: PPUSH
29826: LD_INT 3
29828: PPUSH
29829: CALL_OW 12
29833: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
29834: LD_ADDR_OWVAR 38
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: LD_INT 3
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: PPUSH
29852: LD_INT 2
29854: PPUSH
29855: CALL_OW 12
29859: ARRAY
29860: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
29861: LD_ADDR_OWVAR 40
29865: PUSH
29866: LD_INT 42
29868: PUSH
29869: LD_INT 43
29871: PUSH
29872: LD_INT 44
29874: PUSH
29875: LD_INT 46
29877: PUSH
29878: LD_INT 48
29880: PUSH
29881: LD_INT 47
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PPUSH
29895: LD_INT 6
29897: PPUSH
29898: CALL_OW 12
29902: ARRAY
29903: ST_TO_ADDR
// end ; end ;
29904: GO 29907
29906: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29907: CALL_OW 45
29911: PPUSH
29912: LD_INT 1
29914: PPUSH
29915: CALL_OW 51
// end ;
29919: LD_VAR 0 1
29923: RET
// export hInvincible ; every 1 do
29924: GO 29926
29926: DISABLE
// hInvincible := [ ] ;
29927: LD_ADDR_EXP 106
29931: PUSH
29932: EMPTY
29933: ST_TO_ADDR
29934: END
// every 10 do var i ;
29935: GO 29937
29937: DISABLE
29938: LD_INT 0
29940: PPUSH
// begin enable ;
29941: ENABLE
// if not hInvincible then
29942: LD_EXP 106
29946: NOT
29947: IFFALSE 29951
// exit ;
29949: GO 29995
// for i in hInvincible do
29951: LD_ADDR_VAR 0 1
29955: PUSH
29956: LD_EXP 106
29960: PUSH
29961: FOR_IN
29962: IFFALSE 29993
// if GetLives ( i ) < 1000 then
29964: LD_VAR 0 1
29968: PPUSH
29969: CALL_OW 256
29973: PUSH
29974: LD_INT 1000
29976: LESS
29977: IFFALSE 29991
// SetLives ( i , 1000 ) ;
29979: LD_VAR 0 1
29983: PPUSH
29984: LD_INT 1000
29986: PPUSH
29987: CALL_OW 234
29991: GO 29961
29993: POP
29994: POP
// end ;
29995: PPOPN 1
29997: END
// export function hHackInvincible ; var i ; begin
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30002: LD_ADDR_VAR 0 2
30006: PUSH
30007: LD_INT 2
30009: PUSH
30010: LD_INT 21
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 21
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: PPUSH
30035: CALL_OW 69
30039: PUSH
30040: FOR_IN
30041: IFFALSE 30102
// if IsSelected ( i ) then
30043: LD_VAR 0 2
30047: PPUSH
30048: CALL_OW 306
30052: IFFALSE 30100
// begin if i in hInvincible then
30054: LD_VAR 0 2
30058: PUSH
30059: LD_EXP 106
30063: IN
30064: IFFALSE 30084
// hInvincible := hInvincible diff i else
30066: LD_ADDR_EXP 106
30070: PUSH
30071: LD_EXP 106
30075: PUSH
30076: LD_VAR 0 2
30080: DIFF
30081: ST_TO_ADDR
30082: GO 30100
// hInvincible := hInvincible union i ;
30084: LD_ADDR_EXP 106
30088: PUSH
30089: LD_EXP 106
30093: PUSH
30094: LD_VAR 0 2
30098: UNION
30099: ST_TO_ADDR
// end ;
30100: GO 30040
30102: POP
30103: POP
// end ;
30104: LD_VAR 0 1
30108: RET
// export function hHackInvisible ; var i , j ; begin
30109: LD_INT 0
30111: PPUSH
30112: PPUSH
30113: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30114: LD_ADDR_VAR 0 2
30118: PUSH
30119: LD_INT 21
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PPUSH
30129: CALL_OW 69
30133: PUSH
30134: FOR_IN
30135: IFFALSE 30159
// if IsSelected ( i ) then
30137: LD_VAR 0 2
30141: PPUSH
30142: CALL_OW 306
30146: IFFALSE 30157
// ComForceInvisible ( i ) ;
30148: LD_VAR 0 2
30152: PPUSH
30153: CALL_OW 496
30157: GO 30134
30159: POP
30160: POP
// end ;
30161: LD_VAR 0 1
30165: RET
// export function hHackChangeYourSide ; begin
30166: LD_INT 0
30168: PPUSH
// if your_side = 8 then
30169: LD_OWVAR 2
30173: PUSH
30174: LD_INT 8
30176: EQUAL
30177: IFFALSE 30189
// your_side := 0 else
30179: LD_ADDR_OWVAR 2
30183: PUSH
30184: LD_INT 0
30186: ST_TO_ADDR
30187: GO 30203
// your_side := your_side + 1 ;
30189: LD_ADDR_OWVAR 2
30193: PUSH
30194: LD_OWVAR 2
30198: PUSH
30199: LD_INT 1
30201: PLUS
30202: ST_TO_ADDR
// end ;
30203: LD_VAR 0 1
30207: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30208: LD_INT 0
30210: PPUSH
30211: PPUSH
30212: PPUSH
// for i in all_units do
30213: LD_ADDR_VAR 0 2
30217: PUSH
30218: LD_OWVAR 3
30222: PUSH
30223: FOR_IN
30224: IFFALSE 30302
// if IsSelected ( i ) then
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 306
30235: IFFALSE 30300
// begin j := GetSide ( i ) ;
30237: LD_ADDR_VAR 0 3
30241: PUSH
30242: LD_VAR 0 2
30246: PPUSH
30247: CALL_OW 255
30251: ST_TO_ADDR
// if j = 8 then
30252: LD_VAR 0 3
30256: PUSH
30257: LD_INT 8
30259: EQUAL
30260: IFFALSE 30272
// j := 0 else
30262: LD_ADDR_VAR 0 3
30266: PUSH
30267: LD_INT 0
30269: ST_TO_ADDR
30270: GO 30286
// j := j + 1 ;
30272: LD_ADDR_VAR 0 3
30276: PUSH
30277: LD_VAR 0 3
30281: PUSH
30282: LD_INT 1
30284: PLUS
30285: ST_TO_ADDR
// SetSide ( i , j ) ;
30286: LD_VAR 0 2
30290: PPUSH
30291: LD_VAR 0 3
30295: PPUSH
30296: CALL_OW 235
// end ;
30300: GO 30223
30302: POP
30303: POP
// end ;
30304: LD_VAR 0 1
30308: RET
// export function hHackFog ; begin
30309: LD_INT 0
30311: PPUSH
// FogOff ( true ) ;
30312: LD_INT 1
30314: PPUSH
30315: CALL_OW 344
// end ;
30319: LD_VAR 0 1
30323: RET
// export function hHackApeman ; begin
30324: LD_INT 0
30326: PPUSH
// uc_side := your_side ;
30327: LD_ADDR_OWVAR 20
30331: PUSH
30332: LD_OWVAR 2
30336: ST_TO_ADDR
// uc_nation := 0 ;
30337: LD_ADDR_OWVAR 21
30341: PUSH
30342: LD_INT 0
30344: ST_TO_ADDR
// hc_name :=  ;
30345: LD_ADDR_OWVAR 26
30349: PUSH
30350: LD_STRING 
30352: ST_TO_ADDR
// hc_gallery :=  ;
30353: LD_ADDR_OWVAR 33
30357: PUSH
30358: LD_STRING 
30360: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
30361: LD_ADDR_OWVAR 31
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: ST_TO_ADDR
// hc_class := class_apeman ;
30384: LD_ADDR_OWVAR 28
30388: PUSH
30389: LD_INT 12
30391: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30392: CALL_OW 44
30396: PPUSH
30397: LD_INT 1
30399: PPUSH
30400: CALL_OW 51
// end ;
30404: LD_VAR 0 1
30408: RET
// export function hHackBoom ; begin
30409: LD_INT 0
30411: PPUSH
// uc_side := your_side ;
30412: LD_ADDR_OWVAR 20
30416: PUSH
30417: LD_OWVAR 2
30421: ST_TO_ADDR
// uc_nation := 1 ;
30422: LD_ADDR_OWVAR 21
30426: PUSH
30427: LD_INT 1
30429: ST_TO_ADDR
// vc_chassis := us_morphling ;
30430: LD_ADDR_OWVAR 37
30434: PUSH
30435: LD_INT 5
30437: ST_TO_ADDR
// vc_engine := engine_siberite ;
30438: LD_ADDR_OWVAR 39
30442: PUSH
30443: LD_INT 3
30445: ST_TO_ADDR
// vc_control := control_computer ;
30446: LD_ADDR_OWVAR 38
30450: PUSH
30451: LD_INT 3
30453: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
30454: LD_ADDR_OWVAR 40
30458: PUSH
30459: LD_INT 8
30461: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30462: CALL_OW 45
30466: PPUSH
30467: LD_INT 1
30469: PPUSH
30470: CALL_OW 51
// end ;
30474: LD_VAR 0 1
30478: RET
