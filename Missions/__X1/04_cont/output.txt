// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6234 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7794 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 , 22 22$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: LD_INT 46200
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 36253 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 36253 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 36253 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 36253 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 36253 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 36253 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 36253 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 36253 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 36253 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 36253 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 36253 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 36253 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 36253 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 36253 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 36253 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 36253 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ; end_of_file
6231: PPOPN 1
6233: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
// SetBName ( omikron , omikron ) ;
6239: LD_INT 64
6241: PPUSH
6242: LD_STRING omikron
6244: PPUSH
6245: CALL_OW 500
// uc_side := 4 ;
6249: LD_ADDR_OWVAR 20
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// uc_nation := 1 ;
6257: LD_ADDR_OWVAR 21
6261: PUSH
6262: LD_INT 1
6264: ST_TO_ADDR
// omicronSquad := [ ] ;
6265: LD_ADDR_EXP 51
6269: PUSH
6270: EMPTY
6271: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 30
6292: PUSH
6293: LD_INT 32
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 30
6302: PUSH
6303: LD_INT 31
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6382
// begin PrepareHuman ( false , 1 , 1 ) ;
6327: LD_INT 0
6329: PPUSH
6330: LD_INT 1
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 380
// un := CreateHuman ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: CALL_OW 44
6349: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6350: LD_ADDR_EXP 51
6354: PUSH
6355: LD_EXP 51
6359: PUSH
6360: LD_VAR 0 3
6364: UNION
6365: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: GO 6324
6382: POP
6383: POP
// for i := 1 to 3 do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6453
// begin PrepareHuman ( false , 2 , 2 ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 2
6405: PPUSH
6406: LD_INT 2
6408: PPUSH
6409: CALL_OW 380
// un := CreateHuman ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: CALL_OW 44
6422: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6423: LD_ADDR_EXP 51
6427: PUSH
6428: LD_EXP 51
6432: PUSH
6433: LD_VAR 0 3
6437: UNION
6438: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 64
6446: PPUSH
6447: CALL_OW 52
// end ;
6451: GO 6397
6453: POP
6454: POP
// for i := 1 to 2 do
6455: LD_ADDR_VAR 0 2
6459: PUSH
6460: DOUBLE
6461: LD_INT 1
6463: DEC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_TO
6469: IFFALSE 6608
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6471: LD_INT 4
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: LD_INT 2
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 100
6491: PPUSH
6492: CALL 370 0 7
// un := CreateVehicle ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: CALL_OW 45
6505: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6506: LD_ADDR_EXP 51
6510: PUSH
6511: LD_EXP 51
6515: PUSH
6516: LD_VAR 0 3
6520: UNION
6521: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6522: LD_VAR 0 3
6526: PPUSH
6527: LD_INT 28
6529: PPUSH
6530: LD_INT 37
6532: PPUSH
6533: LD_INT 6
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6543: LD_INT 0
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: CALL_OW 380
// un := CreateHuman ;
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: CALL_OW 44
6565: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6566: LD_ADDR_EXP 51
6570: PUSH
6571: LD_EXP 51
6575: PUSH
6576: LD_VAR 0 3
6580: UNION
6581: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_EXP 51
6591: PUSH
6592: LD_EXP 51
6596: PUSH
6597: LD_INT 1
6599: MINUS
6600: ARRAY
6601: PPUSH
6602: CALL_OW 52
// end ;
6606: GO 6468
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 1
6614: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
// uc_side := 4 ;
6621: LD_ADDR_OWVAR 20
6625: PUSH
6626: LD_INT 4
6628: ST_TO_ADDR
// uc_nation := 1 ;
6629: LD_ADDR_OWVAR 21
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// tmp := [ ] ;
6637: LD_ADDR_VAR 0 4
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6644: LD_INT 4
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: LD_INT 2
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 4
6661: PPUSH
6662: LD_INT 77
6664: PPUSH
6665: CALL 370 0 7
// un := CreateVehicle ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: CALL_OW 45
6678: ST_TO_ADDR
// tmp := tmp union un ;
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: LD_VAR 0 4
6688: PUSH
6689: LD_VAR 0 3
6693: UNION
6694: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6707: LD_VAR 0 3
6711: PPUSH
6712: LD_INT 106
6714: PPUSH
6715: LD_INT 3
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 2
6733: PPUSH
6734: CALL_OW 380
// un := CreateHuman ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: CALL_OW 44
6747: ST_TO_ADDR
// tmp := tmp union un ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_VAR 0 3
6762: UNION
6763: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: ARRAY
6783: PPUSH
6784: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 109
6795: PPUSH
6796: LD_INT 9
6798: PPUSH
6799: CALL_OW 111
// wait ( 0 0$1 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// for i := 1 to 2 do
6810: LD_ADDR_VAR 0 2
6814: PUSH
6815: DOUBLE
6816: LD_INT 1
6818: DEC
6819: ST_TO_ADDR
6820: LD_INT 2
6822: PUSH
6823: FOR_TO
6824: IFFALSE 6888
// begin PrepareHuman ( false , 1 , 2 ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: CALL_OW 380
// un := CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// tmp := tmp union un ;
6849: LD_ADDR_VAR 0 4
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 3
6863: UNION
6864: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_INT 105
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 50
// end ;
6886: GO 6823
6888: POP
6889: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6890: LD_VAR 0 4
6894: PPUSH
6895: LD_INT 26
6897: PPUSH
6898: LD_INT 35
6900: PPUSH
6901: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6905: LD_INT 35
6907: PPUSH
6908: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6912: LD_VAR 0 4
6916: PPUSH
6917: LD_INT 50
6919: PUSH
6920: EMPTY
6921: LIST
6922: PPUSH
6923: CALL_OW 72
6927: NOT
6928: IFFALSE 6932
// exit ;
6930: GO 7059
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 64
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 72
6955: PUSH
6956: LD_VAR 0 4
6960: EQUAL
6961: IFFALSE 6905
// omicronSquad := omicronSquad union tmp ;
6963: LD_ADDR_EXP 51
6967: PUSH
6968: LD_EXP 51
6972: PUSH
6973: LD_VAR 0 4
6977: UNION
6978: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: LD_VAR 0 4
6988: PPUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: PUSH
7004: FOR_IN
7005: IFFALSE 7057
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 74
7050: PPUSH
7051: CALL_OW 120
7055: GO 7004
7057: POP
7058: POP
// end ;
7059: LD_VAR 0 1
7063: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7064: LD_EXP 13
7068: NOT
7069: IFFALSE 7640
7071: GO 7073
7073: DISABLE
7074: LD_INT 0
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// begin enable ;
7080: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 22
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: LD_INT 1000
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_EXP 51
7142: PPUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 72
7157: ST_TO_ADDR
// if filter and tmp then
7158: LD_VAR 0 2
7162: PUSH
7163: LD_VAR 0 3
7167: AND
7168: IFFALSE 7241
// begin for i in tmp do
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: FOR_IN
7181: IFFALSE 7237
// if IsInUnit ( i ) then
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 310
7192: IFFALSE 7205
// ComExitBuilding ( i ) else
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
7203: GO 7235
// if not HasTask ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 314
7214: NOT
7215: IFFALSE 7235
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: CALL_OW 130
7235: GO 7180
7237: POP
7238: POP
// end else
7239: GO 7312
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 54
7251: PUSH
7252: EMPTY
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 72
7263: IFFALSE 7312
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7265: LD_ADDR_VAR 0 1
7269: PUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 54
7280: PUSH
7281: EMPTY
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 72
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7310
// ComEnterUnit ( i , omikron ) ;
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_INT 64
7303: PPUSH
7304: CALL_OW 120
7308: GO 7293
7310: POP
7311: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_EXP 51
7321: PPUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 72
7336: ST_TO_ADDR
// if not filter then
7337: LD_VAR 0 2
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7640
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 13
7353: PPUSH
7354: LD_INT 81
7356: PUSH
7357: LD_INT 4
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 70
7368: ST_TO_ADDR
// if enemy then
7369: LD_VAR 0 4
7373: IFFALSE 7640
// begin for i in filter do
7375: LD_ADDR_VAR 0 1
7379: PUSH
7380: LD_VAR 0 2
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7638
// begin tmp := IsDrivenBy ( i ) ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 311
7402: ST_TO_ADDR
// if not tmp then
7403: LD_VAR 0 3
7407: NOT
7408: IFFALSE 7412
// continue ;
7410: GO 7385
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 256
7421: PUSH
7422: LD_INT 600
7424: GREATEREQUAL
7425: PUSH
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 110
7435: PUSH
7436: LD_INT 1
7438: NONEQUAL
7439: AND
7440: IFFALSE 7466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7442: LD_VAR 0 1
7446: PPUSH
7447: LD_VAR 0 4
7451: PPUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 74
7461: PPUSH
7462: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 256
7475: PUSH
7476: LD_INT 600
7478: LESS
7479: PUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 110
7489: PUSH
7490: LD_INT 1
7492: NONEQUAL
7493: AND
7494: IFFALSE 7523
// begin SetTag ( i , 1 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 1
7503: PPUSH
7504: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_INT 27
7515: PPUSH
7516: LD_INT 35
7518: PPUSH
7519: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7523: LD_VAR 0 1
7527: PPUSH
7528: CALL_OW 110
7532: PUSH
7533: LD_INT 1
7535: EQUAL
7536: PUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 27
7544: PPUSH
7545: LD_INT 35
7547: PPUSH
7548: CALL_OW 297
7552: PUSH
7553: LD_INT 6
7555: LESS
7556: AND
7557: PUSH
7558: LD_VAR 0 3
7562: AND
7563: IFFALSE 7636
// begin ComExitVehicle ( tmp ) ;
7565: LD_VAR 0 3
7569: PPUSH
7570: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7574: LD_VAR 0 3
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7588: LD_INT 35
7590: PPUSH
7591: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 256
7604: PUSH
7605: LD_INT 1000
7607: EQUAL
7608: IFFALSE 7588
// ComEnterUnit ( tmp , i ) ;
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 120
// SetTag ( i , 0 ) ;
7624: LD_VAR 0 1
7628: PPUSH
7629: LD_INT 0
7631: PPUSH
7632: CALL_OW 109
// end ; end ;
7636: GO 7385
7638: POP
7639: POP
// end ; end ;
7640: PPOPN 4
7642: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7643: LD_EXP 13
7647: IFFALSE 7791
7649: GO 7651
7651: DISABLE
7652: LD_INT 0
7654: PPUSH
7655: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: LD_EXP 51
7665: PPUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 50
7678: PUSH
7679: EMPTY
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 2
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7791
// repeat wait ( 0 0$1 ) ;
7700: LD_INT 35
7702: PPUSH
7703: CALL_OW 67
// for i in tmp do
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 2
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7782
// begin ComExit ( i ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL 73378 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7729: LD_VAR 0 1
7733: PPUSH
7734: LD_INT 14
7736: PPUSH
7737: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 14
7748: PPUSH
7749: CALL_OW 308
7753: IFFALSE 7780
// begin tmp := tmp diff i ;
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_VAR 0 2
7764: PUSH
7765: LD_VAR 0 1
7769: DIFF
7770: ST_TO_ADDR
// RemoveUnit ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 64
// end ; end ;
7780: GO 7717
7782: POP
7783: POP
// until not tmp ;
7784: LD_VAR 0 2
7788: NOT
7789: IFFALSE 7700
// end ; end_of_file
7791: PPOPN 2
7793: END
// export function Action ; var i , un , veh , tmp ; begin
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
// InGameOn ;
7801: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7805: LD_INT 179
7807: PPUSH
7808: LD_INT 5
7810: PPUSH
7811: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 2
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: LD_INT 12
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 24
7837: PPUSH
7838: LD_INT 33
7840: PPUSH
7841: CALL 370 0 7
7845: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7858: LD_VAR 0 4
7862: PPUSH
7863: LD_INT 178
7865: PPUSH
7866: LD_INT 2
7868: PPUSH
7869: LD_INT 0
7871: PPUSH
7872: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7876: LD_EXP 25
7880: PPUSH
7881: LD_VAR 0 4
7885: PPUSH
7886: CALL_OW 52
// if Kamil then
7890: LD_EXP 29
7894: IFFALSE 7929
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7896: LD_EXP 29
7900: PPUSH
7901: LD_INT 207
7903: PPUSH
7904: LD_INT 37
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7914: LD_EXP 29
7918: PPUSH
7919: LD_INT 211
7921: PPUSH
7922: LD_INT 38
7924: PPUSH
7925: CALL_OW 118
// end ; if Sophia then
7929: LD_EXP 31
7933: IFFALSE 7968
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7935: LD_EXP 31
7939: PPUSH
7940: LD_INT 209
7942: PPUSH
7943: LD_INT 40
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7953: LD_EXP 31
7957: PPUSH
7958: LD_INT 211
7960: PPUSH
7961: LD_INT 38
7963: PPUSH
7964: CALL_OW 118
// end ; if Givi then
7968: LD_EXP 26
7972: IFFALSE 8007
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7974: LD_EXP 26
7978: PPUSH
7979: LD_INT 201
7981: PPUSH
7982: LD_INT 34
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7992: LD_EXP 26
7996: PPUSH
7997: LD_INT 206
7999: PPUSH
8000: LD_INT 36
8002: PPUSH
8003: CALL_OW 118
// end ; if Ibrahim then
8007: LD_EXP 28
8011: IFFALSE 8046
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8013: LD_EXP 28
8017: PPUSH
8018: LD_INT 202
8020: PPUSH
8021: LD_INT 39
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8031: LD_EXP 28
8035: PPUSH
8036: LD_INT 206
8038: PPUSH
8039: LD_INT 36
8041: PPUSH
8042: CALL_OW 118
// end ; if Markov then
8046: LD_EXP 32
8050: IFFALSE 8137
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: LD_INT 13
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 25
8074: PPUSH
8075: LD_INT 80
8077: PUSH
8078: LD_INT 20
8080: PUSH
8081: LD_OWVAR 67
8085: MUL
8086: MINUS
8087: PPUSH
8088: CALL 370 0 7
8092: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_INT 197
8112: PPUSH
8113: LD_INT 35
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8123: LD_EXP 32
8127: PPUSH
8128: LD_VAR 0 4
8132: PPUSH
8133: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8137: LD_ADDR_VAR 0 5
8141: PUSH
8142: LD_EXP 30
8146: PUSH
8147: LD_EXP 37
8151: UNION
8152: ST_TO_ADDR
// for i in tmp do
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8198
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 203
8173: PPUSH
8174: LD_INT 41
8176: PPUSH
8177: LD_INT 6
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 50
// ComHold ( i ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: CALL_OW 140
// end ;
8196: GO 8163
8198: POP
8199: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8200: LD_INT 22
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 69
8228: NOT
8229: IFFALSE 8243
// SetClass ( Heike , 2 ) ;
8231: LD_EXP 25
8235: PPUSH
8236: LD_INT 2
8238: PPUSH
8239: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8243: LD_EXP 25
8247: PPUSH
8248: LD_INT 183
8250: PPUSH
8251: LD_INT 12
8253: PPUSH
8254: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8258: LD_EXP 25
8262: PPUSH
8263: LD_INT 188
8265: PPUSH
8266: LD_INT 20
8268: PPUSH
8269: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8273: LD_EXP 25
8277: PPUSH
8278: LD_INT 191
8280: PPUSH
8281: LD_INT 25
8283: PPUSH
8284: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8288: LD_EXP 25
8292: PPUSH
8293: LD_INT 203
8295: PPUSH
8296: LD_INT 29
8298: PPUSH
8299: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8303: LD_EXP 25
8307: PPUSH
8308: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8319: LD_EXP 25
8323: PPUSH
8324: CALL_OW 310
8328: NOT
8329: IFFALSE 8312
// CenterOnUnits ( Heike ) ;
8331: LD_EXP 25
8335: PPUSH
8336: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PUSH
8374: LD_EXP 25
8378: PUSH
8379: LD_EXP 32
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: DIFF
8388: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8389: LD_VAR 0 5
8393: PPUSH
8394: LD_EXP 25
8398: PPUSH
8399: CALL_OW 119
// if Givi then
8403: LD_EXP 26
8407: IFFALSE 8425
// ComTurnUnit ( Heike , Givi ) else
8409: LD_EXP 25
8413: PPUSH
8414: LD_EXP 26
8418: PPUSH
8419: CALL_OW 119
8423: GO 8443
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8425: LD_EXP 25
8429: PPUSH
8430: LD_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8443: LD_EXP 25
8447: PPUSH
8448: LD_STRING DH-Start-1
8450: PPUSH
8451: CALL_OW 88
// if Givi then
8455: LD_EXP 26
8459: IFFALSE 8506
// begin Say ( Givi , DG-Start-2 ) ;
8461: LD_EXP 26
8465: PPUSH
8466: LD_STRING DG-Start-2
8468: PPUSH
8469: CALL_OW 88
// if not Mike then
8473: LD_EXP 27
8477: NOT
8478: IFFALSE 8504
// begin Say ( Givi , DG-Start-b-3 ) ;
8480: LD_EXP 26
8484: PPUSH
8485: LD_STRING DG-Start-b-3
8487: PPUSH
8488: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8492: LD_EXP 25
8496: PPUSH
8497: LD_STRING DH-Start-b-4
8499: PPUSH
8500: CALL_OW 88
// end ; end else
8504: GO 8571
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8506: LD_EXP 37
8510: PPUSH
8511: LD_INT 26
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_STRING DArm-Start-a-2
8532: PPUSH
8533: CALL_OW 88
8537: NOT
8538: IFFALSE 8571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8540: LD_EXP 37
8544: PPUSH
8545: LD_INT 26
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 72
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: LD_STRING DArf-Start-a-2
8566: PPUSH
8567: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8571: LD_EXP 25
8575: PPUSH
8576: LD_INT 211
8578: PPUSH
8579: LD_INT 38
8581: PPUSH
8582: CALL_OW 118
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8593: LD_EXP 25
8597: PPUSH
8598: LD_STRING DH-Start-3
8600: PPUSH
8601: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8605: LD_EXP 25
8609: PPUSH
8610: LD_STRING DH-Start-4
8612: PPUSH
8613: CALL_OW 88
// InGameOff ;
8617: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8621: LD_STRING Prepare
8623: PPUSH
8624: CALL_OW 337
// SaveForQuickRestart ;
8628: CALL_OW 22
// wait ( 0 0$10 ) ;
8632: LD_INT 350
8634: PPUSH
8635: CALL_OW 67
// if not Aviradze then
8639: LD_EXP 35
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8888
// SetDir ( Aviradze , 4 ) ;
8648: LD_EXP 35
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8660: LD_EXP 35
8664: PPUSH
8665: LD_INT 225
8667: PPUSH
8668: LD_INT 33
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 48
// for i := 1 to 2 do
8678: LD_ADDR_VAR 0 2
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_INT 2
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8823
// begin uc_side := 2 ;
8694: LD_ADDR_OWVAR 20
8698: PUSH
8699: LD_INT 2
8701: ST_TO_ADDR
// uc_nation := 0 ;
8702: LD_ADDR_OWVAR 21
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8710: LD_INT 0
8712: PPUSH
8713: LD_INT 12
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 380
// hc_gallery :=  ;
8723: LD_ADDR_OWVAR 33
8727: PUSH
8728: LD_STRING 
8730: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8731: LD_ADDR_OWVAR 26
8735: PUSH
8736: LD_STRING Artudito
8738: PUSH
8739: LD_STRING Textur
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_VAR 0 2
8750: ARRAY
8751: ST_TO_ADDR
// un := CreateHuman ;
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: CALL_OW 44
8761: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8762: LD_VAR 0 3
8766: PPUSH
8767: LD_INT 224
8769: PUSH
8770: LD_INT 226
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_VAR 0 2
8781: ARRAY
8782: PPUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_VAR 0 2
8797: ARRAY
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 215
8813: PPUSH
8814: LD_INT 36
8816: PPUSH
8817: CALL_OW 111
// end ;
8821: GO 8691
8823: POP
8824: POP
// hc_name :=  ;
8825: LD_ADDR_OWVAR 26
8829: PUSH
8830: LD_STRING 
8832: ST_TO_ADDR
// InitHc ;
8833: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8837: LD_EXP 35
8841: PPUSH
8842: LD_INT 215
8844: PPUSH
8845: LD_INT 36
8847: PPUSH
8848: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8852: LD_EXP 35
8856: PPUSH
8857: LD_STRING DA-Arrive-1
8859: PPUSH
8860: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8864: LD_EXP 25
8868: PPUSH
8869: LD_STRING DH-Arrive-2
8871: PPUSH
8872: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8876: LD_EXP 35
8880: PPUSH
8881: LD_STRING DA-Arrive-3
8883: PPUSH
8884: CALL_OW 88
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8893: LD_EXP 3
8897: IFFALSE 10298
8899: GO 8901
8901: DISABLE
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
// begin DialogueOn ;
8907: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8911: LD_EXP 25
8915: PPUSH
8916: LD_STRING DH-base-1
8918: PPUSH
8919: CALL_OW 88
// if Markov then
8923: LD_EXP 32
8927: IFFALSE 8979
// begin Say ( Markov , DMar-base-2 ) ;
8929: LD_EXP 32
8933: PPUSH
8934: LD_STRING DMar-base-2
8936: PPUSH
8937: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8941: LD_EXP 32
8945: PPUSH
8946: LD_STRING DMar-base-3
8948: PPUSH
8949: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8953: LD_EXP 25
8957: PPUSH
8958: LD_STRING DH-base-4
8960: PPUSH
8961: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8965: LD_EXP 32
8969: PPUSH
8970: LD_STRING DMar-base-5
8972: PPUSH
8973: CALL_OW 88
// end else
8977: GO 9056
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8979: LD_EXP 37
8983: PPUSH
8984: LD_INT 26
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 72
8998: PUSH
8999: LD_INT 1
9001: ARRAY
9002: PPUSH
9003: LD_STRING DArm-base-a-2
9005: PPUSH
9006: CALL_OW 88
9010: NOT
9011: IFFALSE 9044
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9013: LD_EXP 37
9017: PPUSH
9018: LD_INT 26
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 72
9032: PUSH
9033: LD_INT 1
9035: ARRAY
9036: PPUSH
9037: LD_STRING DArf-base-a-2
9039: PPUSH
9040: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9044: LD_EXP 25
9048: PPUSH
9049: LD_STRING DH-base-a-3
9051: PPUSH
9052: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9056: LD_EXP 35
9060: PPUSH
9061: LD_STRING DA-base-6
9063: PPUSH
9064: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9068: LD_EXP 35
9072: PPUSH
9073: LD_STRING DA-base-7
9075: PPUSH
9076: CALL_OW 88
// DialogueOff ;
9080: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9084: LD_STRING Flamethrower
9086: PPUSH
9087: CALL_OW 337
// wait ( 2 2$00 ) ;
9091: LD_INT 4200
9093: PPUSH
9094: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9098: LD_EXP 34
9102: PUSH
9103: LD_EXP 27
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: LD_INT 203
9114: PPUSH
9115: LD_INT 37
9117: PPUSH
9118: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9122: LD_INT 22
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 92
9134: PUSH
9135: LD_INT 203
9137: PUSH
9138: LD_INT 37
9140: PUSH
9141: LD_INT 10
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: NOT
9159: IFFALSE 9199
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9161: LD_EXP 34
9165: PUSH
9166: LD_EXP 27
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: LD_EXP 25
9179: PPUSH
9180: CALL_OW 250
9184: PPUSH
9185: LD_EXP 25
9189: PPUSH
9190: CALL_OW 251
9194: PPUSH
9195: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9206: LD_INT 2
9208: PPUSH
9209: LD_EXP 34
9213: PPUSH
9214: CALL_OW 292
9218: PUSH
9219: LD_EXP 34
9223: PPUSH
9224: LD_EXP 25
9228: PPUSH
9229: CALL_OW 296
9233: PUSH
9234: LD_INT 8
9236: LESS
9237: PUSH
9238: LD_EXP 34
9242: PPUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 21
9255: PUSH
9256: LD_INT 3
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 69
9271: PPUSH
9272: LD_EXP 34
9276: PPUSH
9277: CALL_OW 74
9281: PPUSH
9282: CALL_OW 296
9286: PUSH
9287: LD_INT 7
9289: LESS
9290: OR
9291: AND
9292: PUSH
9293: LD_EXP 34
9297: PPUSH
9298: LD_INT 10
9300: PPUSH
9301: CALL_OW 308
9305: NOT
9306: AND
9307: IFFALSE 9199
// InGameOn ;
9309: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9313: LD_EXP 34
9317: PPUSH
9318: CALL_OW 87
// if IsInUnit ( Heike ) then
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( Heike ) ;
9333: LD_EXP 25
9337: PPUSH
9338: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9342: LD_EXP 34
9346: PUSH
9347: LD_EXP 27
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: LD_EXP 25
9360: PPUSH
9361: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9365: LD_EXP 25
9369: PPUSH
9370: LD_EXP 34
9374: PPUSH
9375: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9379: LD_INT 22
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 91
9391: PUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 21
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: IFFALSE 9450
// begin Say ( Kurt , DKs-scout-1 ) ;
9426: LD_EXP 34
9430: PPUSH
9431: LD_STRING DKs-scout-1
9433: PPUSH
9434: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9438: LD_EXP 25
9442: PPUSH
9443: LD_STRING DH-scout-2
9445: PPUSH
9446: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9450: LD_EXP 25
9454: PPUSH
9455: CALL_OW 85
// if IsInUnit ( Heike ) then
9459: LD_EXP 25
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExit ( Heike ) ;
9470: LD_EXP 25
9474: PPUSH
9475: CALL 73378 0 1
// repeat wait ( 0 0$1 ) ;
9479: LD_INT 35
9481: PPUSH
9482: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9486: LD_EXP 25
9490: PPUSH
9491: LD_EXP 34
9495: PPUSH
9496: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9500: LD_EXP 25
9504: PPUSH
9505: LD_EXP 34
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 6
9517: LESS
9518: IFFALSE 9479
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9520: LD_EXP 34
9524: PUSH
9525: LD_EXP 27
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: LD_EXP 25
9538: PPUSH
9539: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9543: LD_EXP 34
9547: PPUSH
9548: LD_STRING DKs-scout-3
9550: PPUSH
9551: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9555: LD_EXP 30
9559: PUSH
9560: LD_EXP 30
9564: PPUSH
9565: LD_EXP 34
9569: PPUSH
9570: CALL_OW 296
9574: PUSH
9575: LD_INT 15
9577: LESS
9578: AND
9579: IFFALSE 9769
// begin if IsInUnit ( Kaia ) then
9581: LD_EXP 30
9585: PPUSH
9586: CALL_OW 310
9590: IFFALSE 9601
// ComExitBuilding ( Kaia ) ;
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 122
// wait ( 0 0$1 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 34
9617: PPUSH
9618: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9622: LD_INT 35
9624: PPUSH
9625: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9629: LD_EXP 30
9633: PPUSH
9634: LD_EXP 34
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 6
9646: LESS
9647: IFFALSE 9622
// ComTurnUnit ( Kaia , Kurt ) ;
9649: LD_EXP 30
9653: PPUSH
9654: LD_EXP 34
9658: PPUSH
9659: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9663: LD_EXP 30
9667: PPUSH
9668: LD_STRING DK-scout-4
9670: PPUSH
9671: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9675: LD_EXP 34
9679: PPUSH
9680: LD_EXP 30
9684: PPUSH
9685: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9689: LD_EXP 34
9693: PPUSH
9694: LD_STRING DKs-scout-5
9696: PPUSH
9697: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9701: LD_EXP 30
9705: PPUSH
9706: LD_STRING DK-scout-6
9708: PPUSH
9709: CALL_OW 88
// if Mike then
9713: LD_EXP 27
9717: IFFALSE 9769
// begin Say ( Mike , DM-scout-7 ) ;
9719: LD_EXP 27
9723: PPUSH
9724: LD_STRING DM-scout-7
9726: PPUSH
9727: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9731: LD_EXP 30
9735: PPUSH
9736: LD_EXP 27
9740: PPUSH
9741: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9745: LD_EXP 30
9749: PPUSH
9750: LD_STRING DK-scout-8
9752: PPUSH
9753: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9757: LD_EXP 27
9761: PPUSH
9762: LD_STRING DM-scout-9
9764: PPUSH
9765: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9769: LD_INT 184
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: LD_INT 2
9777: PPUSH
9778: LD_INT 12
9780: NEG
9781: PPUSH
9782: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9786: LD_INT 184
9788: PPUSH
9789: LD_INT 100
9791: PPUSH
9792: LD_INT 2
9794: PPUSH
9795: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9799: LD_INT 184
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DKs-scout-10
9816: PPUSH
9817: CALL_OW 88
// wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9828: LD_INT 144
9830: PPUSH
9831: LD_INT 65
9833: PPUSH
9834: LD_INT 2
9836: PPUSH
9837: LD_INT 12
9839: NEG
9840: PPUSH
9841: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9845: LD_INT 144
9847: PPUSH
9848: LD_INT 65
9850: PPUSH
9851: LD_INT 2
9853: PPUSH
9854: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9858: LD_INT 144
9860: PPUSH
9861: LD_INT 65
9863: PPUSH
9864: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9868: LD_EXP 34
9872: PPUSH
9873: LD_STRING DKs-scout-11
9875: PPUSH
9876: CALL_OW 88
// wait ( 0 0$1 ) ;
9880: LD_INT 35
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9887: LD_EXP 34
9891: PPUSH
9892: CALL_OW 87
// if Mike and not Givi then
9896: LD_EXP 27
9900: PUSH
9901: LD_EXP 26
9905: NOT
9906: AND
9907: IFFALSE 9933
// begin Say ( Mike , DM-scout-a-1 ) ;
9909: LD_EXP 27
9913: PPUSH
9914: LD_STRING DM-scout-a-1
9916: PPUSH
9917: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9921: LD_EXP 25
9925: PPUSH
9926: LD_STRING DH-scout-a-2
9928: PPUSH
9929: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9933: LD_EXP 34
9937: PUSH
9938: LD_EXP 27
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: LD_INT 2
9949: PPUSH
9950: CALL_OW 235
// InGameOff ;
9954: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9958: LD_STRING Hill
9960: PPUSH
9961: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
9965: LD_INT 20
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 424
// allowToPatrol := true ;
9975: LD_ADDR_EXP 12
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9983: LD_INT 3150
9985: PPUSH
9986: CALL_OW 67
// InitHc ;
9990: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
9994: LD_ADDR_VAR 0 1
9998: PUSH
9999: DOUBLE
10000: LD_INT 1
10002: DEC
10003: ST_TO_ADDR
10004: LD_INT 3
10006: PUSH
10007: LD_INT 3
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 2
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_OWVAR 67
10026: ARRAY
10027: PUSH
10028: FOR_TO
10029: IFFALSE 10296
// begin uc_side := 2 ;
10031: LD_ADDR_OWVAR 20
10035: PUSH
10036: LD_INT 2
10038: ST_TO_ADDR
// uc_nation := 2 ;
10039: LD_ADDR_OWVAR 21
10043: PUSH
10044: LD_INT 2
10046: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10047: LD_INT 0
10049: PPUSH
10050: LD_INT 1
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_VAR 0 1
10068: PUSH
10069: LD_INT 3
10071: MOD
10072: PUSH
10073: LD_INT 1
10075: PLUS
10076: ARRAY
10077: PPUSH
10078: LD_INT 3
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: PUSH
10096: LD_OWVAR 67
10100: ARRAY
10101: PPUSH
10102: CALL_OW 380
// un := CreateHuman ;
10106: LD_ADDR_VAR 0 2
10110: PUSH
10111: CALL_OW 44
10115: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10116: LD_ADDR_EXP 37
10120: PUSH
10121: LD_EXP 37
10125: PUSH
10126: LD_VAR 0 2
10130: UNION
10131: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10132: LD_INT 2
10134: PPUSH
10135: LD_INT 2
10137: PPUSH
10138: LD_INT 13
10140: PPUSH
10141: LD_INT 2
10143: PUSH
10144: LD_INT 1
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_VAR 0 1
10155: PUSH
10156: LD_INT 2
10158: MOD
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: LD_INT 27
10170: PUSH
10171: LD_INT 25
10173: PUSH
10174: LD_INT 27
10176: PUSH
10177: LD_INT 23
10179: PUSH
10180: LD_INT 23
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: PUSH
10190: LD_OWVAR 67
10194: PUSH
10195: LD_INT 0
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 12
10205: PLUS
10206: ARRAY
10207: PPUSH
10208: LD_INT 77
10210: PPUSH
10211: CALL 370 0 7
// veh := CreateVehicle ;
10215: LD_ADDR_VAR 0 3
10219: PUSH
10220: CALL_OW 45
10224: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10225: LD_VAR 0 3
10229: PPUSH
10230: LD_INT 2
10232: PPUSH
10233: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 178
10244: PPUSH
10245: LD_INT 2
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: LD_INT 0
10253: PPUSH
10254: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10258: LD_VAR 0 2
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10272: LD_VAR 0 2
10276: PPUSH
10277: LD_INT 183
10279: PPUSH
10280: LD_INT 11
10282: PPUSH
10283: CALL_OW 111
// wait ( 0 0$2 ) ;
10287: LD_INT 70
10289: PPUSH
10290: CALL_OW 67
// end ;
10294: GO 10028
10296: POP
10297: POP
// end ;
10298: PPOPN 3
10300: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10301: LD_EXP 4
10305: PUSH
10306: LD_EXP 35
10310: PPUSH
10311: CALL_OW 302
10315: AND
10316: IFFALSE 10365
10318: GO 10320
10320: DISABLE
// begin DialogueOn ;
10321: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10325: LD_EXP 35
10329: PPUSH
10330: LD_STRING DA-lab-1
10332: PPUSH
10333: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10337: LD_EXP 35
10341: PPUSH
10342: LD_STRING DA-lab-2
10344: PPUSH
10345: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10349: LD_EXP 25
10353: PPUSH
10354: LD_STRING DH-lab-3
10356: PPUSH
10357: CALL_OW 88
// DialogueOff ;
10361: CALL_OW 7
// end ;
10365: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10366: LD_INT 17
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 321
10376: PUSH
10377: LD_INT 2
10379: EQUAL
10380: IFFALSE 10512
10382: GO 10384
10384: DISABLE
10385: LD_INT 0
10387: PPUSH
// begin DialogueOn ;
10388: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10392: LD_EXP 35
10396: PPUSH
10397: LD_STRING DA-Cam-1
10399: PPUSH
10400: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10404: LD_EXP 35
10408: PPUSH
10409: LD_STRING DA-Cam-2
10411: PPUSH
10412: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10416: LD_EXP 35
10420: PPUSH
10421: LD_STRING DA-Cam-3
10423: PPUSH
10424: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10428: LD_EXP 25
10432: PPUSH
10433: LD_STRING DH-Cam-4
10435: PPUSH
10436: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10440: LD_EXP 30
10444: PPUSH
10445: LD_STRING DK-Cam-5
10447: PPUSH
10448: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10452: LD_EXP 30
10456: PPUSH
10457: LD_STRING DK-Cam-6
10459: PPUSH
10460: CALL_OW 88
// DialogueOff ;
10464: CALL_OW 7
// Query ( Camera ) ;
10468: LD_STRING Camera
10470: PPUSH
10471: CALL_OW 97
// hiddenCameraAllowed := true ;
10475: LD_ADDR_EXP 5
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// for i in camAreas do
10483: LD_ADDR_VAR 0 1
10487: PUSH
10488: LD_EXP 8
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10510
// SetAreaMapShow ( i , 1 ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 424
10508: GO 10493
10510: POP
10511: POP
// end ;
10512: PPOPN 1
10514: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10515: LD_EXP 8
10519: NOT
10520: PUSH
10521: LD_EXP 5
10525: AND
10526: IFFALSE 10624
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
// begin stop_talking := true ;
10534: LD_ADDR_OWVAR 56
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10542: LD_ADDR_VAR 0 1
10546: PUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 21
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 23
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: PUSH
10587: FOR_IN
10588: IFFALSE 10607
// AddExperience ( i , 2 , 450 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 2
10597: PPUSH
10598: LD_INT 450
10600: PPUSH
10601: CALL_OW 492
10605: GO 10587
10607: POP
10608: POP
// stop_talking := false ;
10609: LD_ADDR_OWVAR 56
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10617: LD_STRING ACH_CAMERA
10619: PPUSH
10620: CALL_OW 543
// end ;
10624: PPOPN 1
10626: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10627: LD_EXP 9
10631: PUSH
10632: LD_EXP 11
10636: NOT
10637: AND
10638: IFFALSE 10697
10640: GO 10642
10642: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10643: LD_EXP 9
10647: PPUSH
10648: CALL_OW 250
10652: PPUSH
10653: LD_EXP 9
10657: PPUSH
10658: CALL_OW 251
10662: PPUSH
10663: LD_INT 2
10665: PPUSH
10666: LD_INT 6
10668: NEG
10669: PPUSH
10670: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10674: LD_EXP 9
10678: PPUSH
10679: CALL_OW 87
// wait ( 0 0$1 ) ;
10683: LD_INT 35
10685: PPUSH
10686: CALL_OW 67
// YouLost ( Spotted ) ;
10690: LD_STRING Spotted
10692: PPUSH
10693: CALL_OW 104
// end ;
10697: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10698: LD_INT 3
10700: PUSH
10701: LD_INT 6
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PPUSH
10708: LD_INT 2
10710: PPUSH
10711: LD_EXP 47
10715: PPUSH
10716: CALL 1034 0 3
10720: IFFALSE 10753
10722: GO 10724
10724: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10725: LD_ADDR_EXP 9
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 6
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: LD_INT 2
10742: PPUSH
10743: LD_EXP 47
10747: PPUSH
10748: CALL 1034 0 3
10752: ST_TO_ADDR
10753: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10754: LD_INT 22
10756: PUSH
10757: LD_INT 6
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 30
10766: PUSH
10767: LD_INT 32
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 3
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 1000
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 69
10800: IFFALSE 10861
10802: GO 10804
10804: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10805: LD_ADDR_EXP 9
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 6
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 30
10822: PUSH
10823: LD_INT 32
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 3
10832: PUSH
10833: LD_INT 24
10835: PUSH
10836: LD_INT 1000
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 69
10856: PUSH
10857: LD_INT 1
10859: ARRAY
10860: ST_TO_ADDR
10861: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10862: LD_EXP 9
10866: IFFALSE 11098
10868: GO 10870
10870: DISABLE
10871: LD_INT 0
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10877: LD_ADDR_VAR 0 4
10881: PUSH
10882: LD_EXP 42
10886: PUSH
10887: LD_EXP 44
10891: PUSH
10892: LD_EXP 45
10896: UNION
10897: PPUSH
10898: LD_INT 3
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 72
10919: UNION
10920: ST_TO_ADDR
// for i in noncombat do
10921: LD_ADDR_VAR 0 1
10925: PUSH
10926: LD_VAR 0 4
10930: PUSH
10931: FOR_IN
10932: IFFALSE 11028
// begin if IsInUnit ( i ) then
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 310
10943: IFFALSE 10954
// ComExitBuilding ( i ) ;
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
10954: LD_VAR 0 1
10958: PPUSH
10959: LD_INT 114
10961: PPUSH
10962: LD_INT 97
10964: PPUSH
10965: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
10969: LD_VAR 0 1
10973: PPUSH
10974: LD_INT 99
10976: PPUSH
10977: LD_INT 128
10979: PPUSH
10980: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
10984: LD_VAR 0 1
10988: PPUSH
10989: LD_INT 91
10991: PPUSH
10992: LD_INT 145
10994: PPUSH
10995: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
10999: LD_VAR 0 1
11003: PPUSH
11004: LD_INT 82
11006: PPUSH
11007: LD_INT 153
11009: PPUSH
11010: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11014: LD_VAR 0 1
11018: PPUSH
11019: LD_INT 16
11021: PPUSH
11022: CALL_OW 173
// end ;
11026: GO 10931
11028: POP
11029: POP
// if not allowHeikeAttack then
11030: LD_EXP 11
11034: NOT
11035: IFFALSE 11039
// exit ;
11037: GO 11098
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11039: LD_EXP 40
11043: PPUSH
11044: LD_STRING D9a-Kur-1
11046: PPUSH
11047: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11051: LD_EXP 43
11055: PPUSH
11056: LD_STRING D9a-Bur-1
11058: PPUSH
11059: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11063: LD_EXP 40
11067: PPUSH
11068: LD_STRING D9a-Kur-2
11070: PPUSH
11071: CALL_OW 94
// omicronFall := true ;
11075: LD_ADDR_EXP 13
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11083: LD_INT 105
11085: PPUSH
11086: CALL_OW 67
// retreatFromOmicron := true ;
11090: LD_ADDR_EXP 20
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// end ;
11098: PPOPN 4
11100: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11101: LD_INT 16
11103: PPUSH
11104: LD_INT 3
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 23
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: IFFALSE 11222
11141: GO 11143
11143: DISABLE
11144: LD_INT 0
11146: PPUSH
// begin enable ;
11147: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11148: LD_ADDR_VAR 0 1
11152: PUSH
11153: LD_INT 16
11155: PPUSH
11156: LD_INT 3
11158: PUSH
11159: LD_INT 22
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 23
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 70
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11220
// begin escapeCounter := escapeCounter + 1 ;
11195: LD_ADDR_EXP 19
11199: PUSH
11200: LD_EXP 19
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: ST_TO_ADDR
// RemoveUnit ( i ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 64
// end ;
11218: GO 11192
11220: POP
11221: POP
// end ;
11222: PPOPN 1
11224: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11225: LD_OWVAR 1
11229: PUSH
11230: LD_INT 13650
11232: PUSH
11233: LD_INT 0
11235: PPUSH
11236: LD_INT 3150
11238: PPUSH
11239: CALL_OW 12
11243: PLUS
11244: GREATEREQUAL
11245: IFFALSE 11254
11247: GO 11249
11249: DISABLE
// SmallAmericanReinforcements ;
11250: CALL 6615 0 0
11254: END
// every 0 0$1 trigger tick >= 9 9$15 do
11255: LD_OWVAR 1
11259: PUSH
11260: LD_INT 19425
11262: GREATEREQUAL
11263: IFFALSE 11328
11265: GO 11267
11267: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11268: LD_EXP 48
11272: PPUSH
11273: LD_INT 21
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 72
11287: PPUSH
11288: LD_INT 62
11290: PPUSH
11291: LD_INT 22
11293: PPUSH
11294: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11298: LD_EXP 49
11302: PPUSH
11303: LD_INT 69
11305: PPUSH
11306: LD_INT 27
11308: PPUSH
11309: CALL_OW 111
// wait ( 1 1$00 ) ;
11313: LD_INT 2100
11315: PPUSH
11316: CALL_OW 67
// startAttackOnOmicron := true ;
11320: LD_ADDR_EXP 6
11324: PUSH
11325: LD_INT 1
11327: ST_TO_ADDR
// end ;
11328: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11329: LD_EXP 22
11333: PUSH
11334: LD_INT 0
11336: EQUAL
11337: IFFALSE 13354
11339: GO 11341
11341: DISABLE
11342: LD_INT 0
11344: PPUSH
11345: PPUSH
11346: PPUSH
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11351: LD_INT 5
11353: PPUSH
11354: LD_INT 2
11356: PPUSH
11357: CALL_OW 343
// PrepareOmarForces ;
11361: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11365: LD_INT 105
11367: PPUSH
11368: CALL_OW 67
// allowHeikeAttack := true ;
11372: LD_ADDR_EXP 11
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// activeGrishkoAI := false ;
11380: LD_ADDR_EXP 10
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11388: LD_INT 20
11390: PPUSH
11391: LD_INT 0
11393: PPUSH
11394: CALL_OW 424
// if not hillBase then
11398: LD_EXP 15
11402: NOT
11403: IFFALSE 11412
// ChangeMissionObjectives ( HillDone ) ;
11405: LD_STRING HillDone
11407: PPUSH
11408: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11412: LD_EXP 33
11416: PPUSH
11417: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11480
// if HasTask ( i ) then
11458: LD_VAR 0 1
11462: PPUSH
11463: CALL_OW 314
11467: IFFALSE 11478
// ComHold ( i ) ;
11469: LD_VAR 0 1
11473: PPUSH
11474: CALL_OW 140
11478: GO 11455
11480: POP
11481: POP
// DialogueOn ;
11482: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11486: LD_EXP 33
11490: PPUSH
11491: LD_STRING DO-assault-1
11493: PPUSH
11494: CALL_OW 94
// DialogueOff ;
11498: CALL_OW 7
// game_speed := 4 ;
11502: LD_ADDR_OWVAR 65
11506: PUSH
11507: LD_INT 4
11509: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11510: LD_ADDR_VAR 0 1
11514: PUSH
11515: LD_EXP 46
11519: PPUSH
11520: LD_INT 3
11522: PUSH
11523: LD_INT 54
11525: PUSH
11526: EMPTY
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 72
11537: PUSH
11538: FOR_IN
11539: IFFALSE 11558
// ComMoveXY ( i , 226 , 114 ) ;
11541: LD_VAR 0 1
11545: PPUSH
11546: LD_INT 226
11548: PPUSH
11549: LD_INT 114
11551: PPUSH
11552: CALL_OW 111
11556: GO 11538
11558: POP
11559: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11560: LD_EXP 41
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 6
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 30
11577: PUSH
11578: LD_INT 4
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: PPUSH
11594: LD_EXP 41
11598: PPUSH
11599: CALL_OW 74
11603: PPUSH
11604: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11608: LD_STRING Attack
11610: PPUSH
11611: CALL_OW 337
// music_class := music_combat ;
11615: LD_ADDR_OWVAR 72
11619: PUSH
11620: LD_INT 1
11622: ST_TO_ADDR
// music_nat := 4 ;
11623: LD_ADDR_OWVAR 71
11627: PUSH
11628: LD_INT 4
11630: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11631: LD_INT 5
11633: PPUSH
11634: LD_EXP 41
11638: PPUSH
11639: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11643: LD_INT 6
11645: PPUSH
11646: LD_EXP 38
11650: PPUSH
11651: LD_INT 25
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: PUSH
11666: LD_INT 4
11668: ARRAY
11669: PPUSH
11670: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_EXP 38
11683: PPUSH
11684: LD_INT 3
11686: PUSH
11687: LD_INT 25
11689: PUSH
11690: LD_INT 4
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 72
11705: PUSH
11706: FOR_IN
11707: IFFALSE 11726
// ComAgressiveMove ( i , 221 , 110 ) ;
11709: LD_VAR 0 1
11713: PPUSH
11714: LD_INT 221
11716: PPUSH
11717: LD_INT 110
11719: PPUSH
11720: CALL_OW 114
11724: GO 11706
11726: POP
11727: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11728: LD_EXP 38
11732: PPUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 4
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PPUSH
11743: CALL_OW 72
11747: PPUSH
11748: LD_INT 214
11750: PPUSH
11751: LD_INT 124
11753: PPUSH
11754: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11758: LD_EXP 38
11762: PPUSH
11763: LD_INT 25
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 72
11777: PUSH
11778: LD_INT 4
11780: ARRAY
11781: PPUSH
11782: LD_INT 214
11784: PPUSH
11785: LD_INT 114
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11795: LD_EXP 41
11799: PPUSH
11800: LD_STRING D9-Gri-1
11802: PPUSH
11803: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11807: LD_EXP 40
11811: PPUSH
11812: LD_STRING D9-Kur-1
11814: PPUSH
11815: CALL_OW 94
// wait ( 0 0$1 ) ;
11819: LD_INT 35
11821: PPUSH
11822: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11826: LD_EXP 33
11830: PPUSH
11831: LD_INT 233
11833: PPUSH
11834: LD_INT 130
11836: PPUSH
11837: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11841: LD_EXP 41
11845: PPUSH
11846: LD_STRING D9-Gri-2
11848: PPUSH
11849: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11853: LD_EXP 40
11857: PPUSH
11858: LD_STRING D9-Kur-2
11860: PPUSH
11861: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11865: LD_EXP 41
11869: PPUSH
11870: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11874: LD_EXP 41
11878: PPUSH
11879: LD_INT 211
11881: PPUSH
11882: LD_INT 104
11884: PPUSH
11885: CALL_OW 171
// AddComHold ( Grishko ) ;
11889: LD_EXP 41
11893: PPUSH
11894: CALL_OW 200
// repeat wait ( 3 ) ;
11898: LD_INT 3
11900: PPUSH
11901: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11905: LD_EXP 41
11909: PPUSH
11910: CALL_OW 310
11914: NOT
11915: IFFALSE 11898
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11917: LD_EXP 38
11921: PPUSH
11922: LD_INT 34
11924: PUSH
11925: LD_INT 26
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 72
11936: PPUSH
11937: LD_EXP 41
11941: PPUSH
11942: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11946: LD_EXP 38
11950: PPUSH
11951: LD_INT 34
11953: PUSH
11954: LD_INT 26
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 72
11965: PPUSH
11966: LD_INT 215
11968: PPUSH
11969: LD_INT 106
11971: PPUSH
11972: CALL_OW 174
// repeat wait ( 3 ) ;
11976: LD_INT 3
11978: PPUSH
11979: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11983: LD_EXP 41
11987: PPUSH
11988: CALL_OW 256
11992: PUSH
11993: LD_INT 1000
11995: LESS
11996: IFFALSE 11976
// NormalAttack ( 5 , Grishko ) ;
11998: LD_INT 5
12000: PPUSH
12001: LD_EXP 41
12005: PPUSH
12006: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12010: LD_INT 6
12012: PPUSH
12013: LD_EXP 38
12017: PPUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 1
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 72
12032: PUSH
12033: LD_INT 4
12035: ARRAY
12036: PPUSH
12037: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12041: LD_EXP 41
12045: PPUSH
12046: LD_STRING D9-Gri-3
12048: PPUSH
12049: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12053: LD_EXP 40
12057: PPUSH
12058: LD_STRING D9-Kur-3
12060: PPUSH
12061: CALL_OW 94
// music_class := music_auto ;
12065: LD_ADDR_OWVAR 72
12069: PUSH
12070: LD_INT 0
12072: ST_TO_ADDR
// music_nat := music_auto ;
12073: LD_ADDR_OWVAR 71
12077: PUSH
12078: LD_INT 0
12080: ST_TO_ADDR
// for i in omarSquad do
12081: LD_ADDR_VAR 0 1
12085: PUSH
12086: LD_EXP 38
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12234
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 247
12103: PUSH
12104: LD_INT 2
12106: EQUAL
12107: PUSH
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 256
12117: PUSH
12118: LD_INT 1000
12120: LESS
12121: AND
12122: IFFALSE 12188
// begin driver := IsDrivenBy ( i ) ;
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 311
12138: ST_TO_ADDR
// veh := i ;
12139: LD_ADDR_VAR 0 3
12143: PUSH
12144: LD_VAR 0 1
12148: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12149: LD_VAR 0 2
12153: PPUSH
12154: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12158: LD_VAR 0 2
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12172: LD_VAR 0 2
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: CALL_OW 180
// end else
12186: GO 12232
// if GetLives ( i ) < 500 then
12188: LD_VAR 0 1
12192: PPUSH
12193: CALL_OW 256
12197: PUSH
12198: LD_INT 500
12200: LESS
12201: IFFALSE 12232
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12203: LD_EXP 38
12207: PPUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 72
12222: PPUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 188
// end ; end ;
12232: GO 12091
12234: POP
12235: POP
// repeat wait ( 0 0$1 ) ;
12236: LD_INT 35
12238: PPUSH
12239: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12243: LD_EXP 38
12247: PPUSH
12248: LD_INT 3
12250: PUSH
12251: LD_INT 24
12253: PUSH
12254: LD_INT 1000
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 21
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 72
12283: NOT
12284: PUSH
12285: LD_EXP 38
12289: PPUSH
12290: LD_INT 3
12292: PUSH
12293: LD_INT 24
12295: PUSH
12296: LD_INT 250
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 72
12311: NOT
12312: AND
12313: IFFALSE 12236
// wait ( 0 0$2 ) ;
12315: LD_INT 70
12317: PPUSH
12318: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12322: LD_ADDR_VAR 0 5
12326: PUSH
12327: LD_EXP 38
12331: PPUSH
12332: LD_INT 58
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 72
12356: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12357: LD_ADDR_VAR 0 6
12361: PUSH
12362: LD_EXP 38
12366: PPUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 55
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 72
12398: ST_TO_ADDR
// for i := 1 to tmp do
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_VAR 0 5
12413: PUSH
12414: FOR_TO
12415: IFFALSE 12445
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12417: LD_VAR 0 6
12421: PUSH
12422: LD_VAR 0 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 5
12432: PUSH
12433: LD_VAR 0 1
12437: ARRAY
12438: PPUSH
12439: CALL_OW 120
12443: GO 12414
12445: POP
12446: POP
// wait ( 0 0$5 ) ;
12447: LD_INT 175
12449: PPUSH
12450: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12454: LD_EXP 38
12458: PPUSH
12459: LD_INT 199
12461: PPUSH
12462: LD_INT 141
12464: PPUSH
12465: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12469: LD_EXP 33
12473: PPUSH
12474: LD_INT 190
12476: PPUSH
12477: LD_INT 143
12479: PPUSH
12480: CALL_OW 114
// AddComHold ( Omar ) ;
12484: LD_EXP 33
12488: PPUSH
12489: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12493: LD_EXP 38
12497: PPUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 25
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 72
12530: PPUSH
12531: LD_INT 161
12533: PPUSH
12534: LD_INT 130
12536: PPUSH
12537: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12541: LD_EXP 38
12545: PPUSH
12546: LD_INT 25
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PPUSH
12556: CALL_OW 72
12560: PPUSH
12561: LD_INT 163
12563: PPUSH
12564: LD_INT 122
12566: PPUSH
12567: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12571: LD_EXP 38
12575: PPUSH
12576: LD_INT 25
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 72
12590: PUSH
12591: LD_INT 4
12593: ARRAY
12594: PPUSH
12595: LD_INT 165
12597: PPUSH
12598: LD_INT 118
12600: PPUSH
12601: LD_INT 0
12603: PPUSH
12604: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12608: LD_EXP 38
12612: PPUSH
12613: LD_INT 25
12615: PUSH
12616: LD_INT 1
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 72
12627: PUSH
12628: LD_INT 4
12630: ARRAY
12631: PPUSH
12632: LD_INT 159
12634: PPUSH
12635: LD_INT 116
12637: PPUSH
12638: LD_INT 0
12640: PPUSH
12641: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12645: LD_EXP 38
12649: PPUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 72
12664: PPUSH
12665: LD_INT 169
12667: PPUSH
12668: LD_INT 114
12670: PPUSH
12671: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12675: LD_INT 35
12677: PPUSH
12678: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_EXP 38
12691: PPUSH
12692: LD_INT 25
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PPUSH
12702: CALL_OW 72
12706: ST_TO_ADDR
// for i in tmp do
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_VAR 0 5
12716: PUSH
12717: FOR_IN
12718: IFFALSE 12815
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12720: LD_VAR 0 1
12724: PPUSH
12725: CALL_OW 256
12729: PUSH
12730: LD_INT 600
12732: LESS
12733: PUSH
12734: LD_VAR 0 1
12738: PPUSH
12739: LD_INT 161
12741: PPUSH
12742: LD_INT 130
12744: PPUSH
12745: CALL_OW 297
12749: PUSH
12750: LD_INT 6
12752: GREATER
12753: AND
12754: IFFALSE 12771
// ComMoveXY ( i , 161 , 130 ) ;
12756: LD_VAR 0 1
12760: PPUSH
12761: LD_INT 161
12763: PPUSH
12764: LD_INT 130
12766: PPUSH
12767: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 256
12780: PUSH
12781: LD_INT 1000
12783: EQUAL
12784: PUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 314
12794: NOT
12795: AND
12796: IFFALSE 12813
// ComAgressiveMove ( i , 160 , 109 ) ;
12798: LD_VAR 0 1
12802: PPUSH
12803: LD_INT 160
12805: PPUSH
12806: LD_INT 109
12808: PPUSH
12809: CALL_OW 114
// end ;
12813: GO 12717
12815: POP
12816: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12817: LD_ADDR_VAR 0 5
12821: PUSH
12822: LD_EXP 38
12826: PPUSH
12827: LD_INT 21
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 72
12841: ST_TO_ADDR
// for i in tmp do
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_VAR 0 5
12851: PUSH
12852: FOR_IN
12853: IFFALSE 13119
// begin tmp2 := IsDrivenBy ( i ) ;
12855: LD_ADDR_VAR 0 6
12859: PUSH
12860: LD_VAR 0 1
12864: PPUSH
12865: CALL_OW 311
12869: ST_TO_ADDR
// if not tmp2 then
12870: LD_VAR 0 6
12874: NOT
12875: IFFALSE 12879
// continue ;
12877: GO 12852
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 256
12888: PUSH
12889: LD_INT 600
12891: GREATEREQUAL
12892: PUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 110
12902: PUSH
12903: LD_INT 1
12905: EQUAL
12906: AND
12907: IFFALSE 12921
// SetTag ( i , 0 ) ;
12909: LD_VAR 0 1
12913: PPUSH
12914: LD_INT 0
12916: PPUSH
12917: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 256
12930: PUSH
12931: LD_INT 600
12933: GREATEREQUAL
12934: PUSH
12935: LD_VAR 0 1
12939: PPUSH
12940: CALL_OW 110
12944: NOT
12945: AND
12946: IFFALSE 12972
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_VAR 0 7
12957: PPUSH
12958: LD_VAR 0 1
12962: PPUSH
12963: CALL_OW 74
12967: PPUSH
12968: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12972: LD_VAR 0 1
12976: PPUSH
12977: CALL_OW 256
12981: PUSH
12982: LD_INT 600
12984: LESS
12985: PUSH
12986: LD_VAR 0 1
12990: PPUSH
12991: CALL_OW 110
12995: NOT
12996: AND
12997: IFFALSE 13026
// begin SetTag ( i , 1 ) ;
12999: LD_VAR 0 1
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13011: LD_VAR 0 1
13015: PPUSH
13016: LD_INT 202
13018: PPUSH
13019: LD_INT 150
13021: PPUSH
13022: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 110
13035: PUSH
13036: LD_INT 1
13038: EQUAL
13039: PUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_INT 202
13047: PPUSH
13048: LD_INT 150
13050: PPUSH
13051: CALL_OW 297
13055: PUSH
13056: LD_INT 6
13058: LESS
13059: AND
13060: PUSH
13061: LD_VAR 0 6
13065: AND
13066: IFFALSE 13117
// begin ComExitVehicle ( tmp2 ) ;
13068: LD_VAR 0 6
13072: PPUSH
13073: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13077: LD_VAR 0 6
13081: PPUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13091: LD_VAR 0 6
13095: PPUSH
13096: LD_INT 700
13098: PPUSH
13099: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13103: LD_VAR 0 6
13107: PPUSH
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 180
// end ; end ;
13117: GO 12852
13119: POP
13120: POP
// until kirovDestroyed ;
13121: LD_EXP 16
13125: IFFALSE 12675
// repeat wait ( 0 0$1 ) ;
13127: LD_INT 35
13129: PPUSH
13130: CALL_OW 67
// for i in omarSquad union Omar do
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_EXP 38
13143: PUSH
13144: LD_EXP 33
13148: UNION
13149: PUSH
13150: FOR_IN
13151: IFFALSE 13321
// if IsInArea ( i , southRoadArea ) then
13153: LD_VAR 0 1
13157: PPUSH
13158: LD_INT 15
13160: PPUSH
13161: CALL_OW 308
13165: IFFALSE 13178
// RemoveUnit ( i ) else
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 64
13176: GO 13319
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 257
13187: PUSH
13188: LD_INT 3
13190: EQUAL
13191: PUSH
13192: LD_VAR 0 1
13196: PPUSH
13197: CALL_OW 310
13201: NOT
13202: AND
13203: PUSH
13204: LD_INT 22
13206: PUSH
13207: LD_INT 5
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 24
13216: PUSH
13217: LD_INT 251
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 58
13236: PUSH
13237: EMPTY
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 69
13250: AND
13251: IFFALSE 13304
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13253: LD_VAR 0 1
13257: PPUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 5
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 21
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 58
13280: PUSH
13281: EMPTY
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: PUSH
13294: LD_INT 1
13296: ARRAY
13297: PPUSH
13298: CALL_OW 120
13302: GO 13319
// ComMoveXY ( i , 208 , 162 ) ;
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_INT 208
13311: PPUSH
13312: LD_INT 162
13314: PPUSH
13315: CALL_OW 111
// end ;
13319: GO 13150
13321: POP
13322: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13323: LD_INT 22
13325: PUSH
13326: LD_INT 5
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 21
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 69
13351: NOT
13352: IFFALSE 13127
// end ;
13354: PPOPN 7
13356: END
// every 0 0$1 trigger IsDead ( kirov ) do
13357: LD_INT 71
13359: PPUSH
13360: CALL_OW 301
13364: IFFALSE 13381
13366: GO 13368
13368: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13369: LD_EXP 25
13373: PPUSH
13374: LD_STRING DH-1-Kirov
13376: PPUSH
13377: CALL_OW 88
13381: END
// every 0 0$1 trigger See ( 2 , beria ) do
13382: LD_INT 2
13384: PPUSH
13385: LD_INT 106
13387: PPUSH
13388: CALL_OW 292
13392: IFFALSE 13409
13394: GO 13396
13396: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13397: LD_EXP 25
13401: PPUSH
13402: LD_STRING DH-1-Beria
13404: PPUSH
13405: CALL_OW 88
13409: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13410: LD_INT 2
13412: PPUSH
13413: LD_INT 112
13415: PPUSH
13416: CALL_OW 292
13420: IFFALSE 13687
13422: GO 13424
13424: DISABLE
// begin DialogueOn ;
13425: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13429: LD_INT 112
13431: PPUSH
13432: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13436: LD_EXP 25
13440: PPUSH
13441: LD_STRING DH-1-Kagan
13443: PPUSH
13444: CALL_OW 88
// if Kamil then
13448: LD_EXP 29
13452: IFFALSE 13490
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13454: LD_EXP 29
13458: PPUSH
13459: LD_STRING DKam-Kagan-2
13461: PPUSH
13462: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13466: LD_EXP 26
13470: PPUSH
13471: LD_STRING DG-Kagan-3
13473: PPUSH
13474: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13478: LD_EXP 26
13482: PPUSH
13483: LD_STRING DG-Kagan-4
13485: PPUSH
13486: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13490: LD_STRING KaganBase
13492: PPUSH
13493: CALL_OW 97
13497: PUSH
13498: LD_INT 1
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13601
13506: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13507: LD_EXP 25
13511: PPUSH
13512: LD_STRING DH-Kagan-5
13514: PPUSH
13515: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13519: LD_EXP 25
13523: PPUSH
13524: LD_STRING DH-Kagan-6
13526: PPUSH
13527: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13531: LD_EXP 36
13535: PPUSH
13536: LD_STRING DShar-Kagan-7
13538: PPUSH
13539: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13543: LD_EXP 25
13547: PPUSH
13548: LD_STRING DH-Kagan-8
13550: PPUSH
13551: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13555: LD_EXP 25
13559: PPUSH
13560: LD_STRING DH-Kagan-9
13562: PPUSH
13563: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13567: LD_EXP 36
13571: PPUSH
13572: LD_STRING DShar-Kagan-10
13574: PPUSH
13575: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13579: LD_EXP 25
13583: PPUSH
13584: LD_STRING DH-Kagan-11
13586: PPUSH
13587: CALL_OW 88
// kaganCaptured := true ;
13591: LD_ADDR_EXP 24
13595: PUSH
13596: LD_INT 1
13598: ST_TO_ADDR
// end ; 2 :
13599: GO 13683
13601: LD_INT 2
13603: DOUBLE
13604: EQUAL
13605: IFTRUE 13609
13607: GO 13682
13609: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13610: LD_INT 22
13612: PUSH
13613: LD_INT 8
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: PUSH
13625: LD_EXP 35
13629: AND
13630: IFFALSE 13644
// Say ( Heike , DH-Kagan-a-5 ) ;
13632: LD_EXP 25
13636: PPUSH
13637: LD_STRING DH-Kagan-a-5
13639: PPUSH
13640: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13644: LD_EXP 25
13648: PPUSH
13649: LD_STRING DH-Kagan-a-6
13651: PPUSH
13652: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13656: LD_EXP 25
13660: PPUSH
13661: LD_STRING DH-Kagan-a-7
13663: PPUSH
13664: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13668: LD_EXP 26
13672: PPUSH
13673: LD_STRING DG-Kagan-a-8
13675: PPUSH
13676: CALL_OW 88
// end ; end ;
13680: GO 13683
13682: POP
// DialogueOff ;
13683: CALL_OW 7
// end ;
13687: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13688: LD_EXP 18
13692: PUSH
13693: LD_INT 112
13695: PPUSH
13696: CALL_OW 255
13700: PUSH
13701: LD_INT 2
13703: EQUAL
13704: OR
13705: IFFALSE 13717
13707: GO 13709
13709: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13710: LD_STRING KaganDone
13712: PPUSH
13713: CALL_OW 337
13717: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13718: LD_EXP 6
13722: PUSH
13723: LD_EXP 48
13727: PPUSH
13728: LD_INT 95
13730: PUSH
13731: LD_INT 19
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 72
13742: AND
13743: IFFALSE 13820
13745: GO 13747
13747: DISABLE
// begin DialogueOn ;
13748: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13752: LD_INT 63
13754: PPUSH
13755: LD_INT 32
13757: PPUSH
13758: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13762: LD_INT 63
13764: PPUSH
13765: LD_INT 32
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: LD_INT 12
13773: NEG
13774: PPUSH
13775: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13779: LD_EXP 25
13783: PPUSH
13784: LD_STRING DH-Omicron-1
13786: PPUSH
13787: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13791: LD_EXP 27
13795: PPUSH
13796: LD_STRING DM-Omicron-2
13798: PPUSH
13799: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13803: LD_INT 63
13805: PPUSH
13806: LD_INT 32
13808: PPUSH
13809: LD_INT 2
13811: PPUSH
13812: CALL_OW 331
// DialogueOff ;
13816: CALL_OW 7
// end ;
13820: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13821: LD_INT 2
13823: PPUSH
13824: LD_EXP 50
13828: PPUSH
13829: CALL_OW 292
13833: PUSH
13834: LD_EXP 50
13838: PPUSH
13839: CALL_OW 255
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: OR
13848: PUSH
13849: LD_INT 106
13851: PPUSH
13852: CALL_OW 255
13856: PUSH
13857: LD_INT 2
13859: EQUAL
13860: OR
13861: PUSH
13862: LD_EXP 50
13866: PPUSH
13867: CALL_OW 302
13871: AND
13872: PUSH
13873: LD_EXP 25
13877: PPUSH
13878: CALL_OW 302
13882: AND
13883: PUSH
13884: LD_EXP 35
13888: PPUSH
13889: CALL_OW 302
13893: AND
13894: IFFALSE 14615
13896: GO 13898
13898: DISABLE
13899: LD_INT 0
13901: PPUSH
13902: PPUSH
13903: PPUSH
13904: PPUSH
13905: PPUSH
// begin DialogueOn ;
13906: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13910: LD_INT 111
13912: PPUSH
13913: LD_INT 90
13915: PPUSH
13916: LD_INT 2
13918: PPUSH
13919: LD_INT 6
13921: NEG
13922: PPUSH
13923: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13927: LD_INT 111
13929: PPUSH
13930: LD_INT 90
13932: PPUSH
13933: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13937: LD_EXP 35
13941: PPUSH
13942: LD_STRING DA-Cap-1
13944: PPUSH
13945: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13949: LD_EXP 25
13953: PPUSH
13954: LD_STRING DH-Cap-2
13956: PPUSH
13957: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
13961: LD_INT 111
13963: PPUSH
13964: LD_INT 90
13966: PPUSH
13967: LD_INT 2
13969: PPUSH
13970: CALL_OW 331
// DialogueOff ;
13974: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13978: LD_INT 35
13980: PPUSH
13981: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
13985: LD_EXP 17
13989: PUSH
13990: LD_INT 106
13992: PPUSH
13993: CALL_OW 255
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: OR
14002: PUSH
14003: LD_EXP 50
14007: PPUSH
14008: CALL_OW 255
14012: PUSH
14013: LD_INT 2
14015: EQUAL
14016: OR
14017: PUSH
14018: LD_EXP 50
14022: PPUSH
14023: CALL_OW 302
14027: AND
14028: PUSH
14029: LD_EXP 35
14033: PPUSH
14034: CALL_OW 302
14038: AND
14039: PUSH
14040: LD_INT 2
14042: PPUSH
14043: CALL_OW 463
14047: NOT
14048: AND
14049: PUSH
14050: LD_INT 22
14052: PUSH
14053: LD_INT 3
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 92
14072: PUSH
14073: LD_INT 110
14075: PUSH
14076: LD_INT 95
14078: PUSH
14079: LD_INT 12
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 69
14097: NOT
14098: AND
14099: PUSH
14100: LD_INT 22
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 30
14112: PUSH
14113: LD_INT 5
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 92
14122: PUSH
14123: LD_INT 110
14125: PUSH
14126: LD_INT 95
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: NOT
14148: AND
14149: IFFALSE 13978
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14151: LD_ADDR_VAR 0 2
14155: PUSH
14156: LD_EXP 37
14160: PUSH
14161: LD_EXP 28
14165: PUSH
14166: LD_EXP 29
14170: PUSH
14171: LD_EXP 31
14175: PUSH
14176: LD_EXP 30
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: UNION
14187: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14188: LD_ADDR_VAR 0 2
14192: PUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_INT 50
14200: PUSH
14201: EMPTY
14202: LIST
14203: PPUSH
14204: CALL_OW 72
14208: ST_TO_ADDR
// if tmp < 2 then
14209: LD_VAR 0 2
14213: PUSH
14214: LD_INT 2
14216: LESS
14217: IFFALSE 14229
// q := 2 else
14219: LD_ADDR_VAR 0 4
14223: PUSH
14224: LD_INT 2
14226: ST_TO_ADDR
14227: GO 14242
// q := Query ( LabCap ) ;
14229: LD_ADDR_VAR 0 4
14233: PUSH
14234: LD_STRING LabCap
14236: PPUSH
14237: CALL_OW 97
14241: ST_TO_ADDR
// case q of 1 :
14242: LD_VAR 0 4
14246: PUSH
14247: LD_INT 1
14249: DOUBLE
14250: EQUAL
14251: IFTRUE 14255
14253: GO 14579
14255: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14256: LD_INT 2
14258: PPUSH
14259: LD_EXP 50
14263: PPUSH
14264: CALL_OW 471
// labCaptured := true ;
14268: LD_ADDR_EXP 21
14272: PUSH
14273: LD_INT 1
14275: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14276: LD_EXP 25
14280: PPUSH
14281: LD_STRING DH-Cap-a-1
14283: PPUSH
14284: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14288: LD_EXP 35
14292: PPUSH
14293: LD_STRING DA-Cap-a-2
14295: PPUSH
14296: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14300: LD_ADDR_VAR 0 5
14304: PUSH
14305: LD_EXP 35
14309: PUSH
14310: LD_INT -3
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT -2
14319: PUSH
14320: LD_INT -4
14322: PUSH
14323: LD_EXP 25
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: ADD
14333: PUSH
14334: LD_INT -3
14336: PUSH
14337: EMPTY
14338: LIST
14339: ADD
14340: PUSH
14341: LD_VAR 0 2
14345: ADD
14346: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_STRING Select two characters to go with Aviradze
14354: PPUSH
14355: LD_INT 2
14357: PPUSH
14358: LD_INT 2
14360: PPUSH
14361: LD_VAR 0 5
14365: PPUSH
14366: EMPTY
14367: PPUSH
14368: CALL_OW 42
14372: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14373: LD_EXP 50
14377: PPUSH
14378: LD_INT 8
14380: PPUSH
14381: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14385: LD_EXP 35
14389: PPUSH
14390: LD_INT 8
14392: PPUSH
14393: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14397: LD_ADDR_EXP 39
14401: PUSH
14402: LD_EXP 35
14406: PUSH
14407: EMPTY
14408: LIST
14409: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14410: LD_EXP 35
14414: PPUSH
14415: CALL_OW 310
14419: IFFALSE 14430
// ComExit ( Aviradze ) ;
14421: LD_EXP 35
14425: PPUSH
14426: CALL 73378 0 1
// wait ( 3 ) ;
14430: LD_INT 3
14432: PPUSH
14433: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14437: LD_EXP 35
14441: PPUSH
14442: LD_EXP 50
14446: PPUSH
14447: CALL_OW 120
// for i := 1 to 2 do
14451: LD_ADDR_VAR 0 1
14455: PUSH
14456: DOUBLE
14457: LD_INT 1
14459: DEC
14460: ST_TO_ADDR
14461: LD_INT 2
14463: PUSH
14464: FOR_TO
14465: IFFALSE 14568
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14467: LD_ADDR_EXP 39
14471: PUSH
14472: LD_EXP 39
14476: PUSH
14477: LD_VAR 0 3
14481: PUSH
14482: LD_VAR 0 1
14486: ARRAY
14487: UNION
14488: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14489: LD_VAR 0 3
14493: PUSH
14494: LD_VAR 0 1
14498: ARRAY
14499: PPUSH
14500: LD_INT 8
14502: PPUSH
14503: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14507: LD_VAR 0 3
14511: PUSH
14512: LD_VAR 0 1
14516: ARRAY
14517: PPUSH
14518: CALL_OW 310
14522: IFFALSE 14539
// ComExit ( tmp2 [ i ] ) ;
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 1
14533: ARRAY
14534: PPUSH
14535: CALL 73378 0 1
// wait ( 3 ) ;
14539: LD_INT 3
14541: PPUSH
14542: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14546: LD_VAR 0 3
14550: PUSH
14551: LD_VAR 0 1
14555: ARRAY
14556: PPUSH
14557: LD_EXP 50
14561: PPUSH
14562: CALL_OW 120
// end ;
14566: GO 14464
14568: POP
14569: POP
// SetAchievement ( ACH_LAB ) ;
14570: LD_STRING ACH_LAB
14572: PPUSH
14573: CALL_OW 543
// end ; 2 :
14577: GO 14615
14579: LD_INT 2
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14614
14587: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14588: LD_EXP 25
14592: PPUSH
14593: LD_STRING DH-Cap-b-1
14595: PPUSH
14596: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14600: LD_EXP 35
14604: PPUSH
14605: LD_STRING DA-Cap-b-2
14607: PPUSH
14608: CALL_OW 88
// end ; end ;
14612: GO 14615
14614: POP
// end ;
14615: PPOPN 5
14617: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14618: LD_INT 10
14620: PPUSH
14621: LD_INT 22
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 31
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PPUSH
14645: CALL_OW 70
14649: PUSH
14650: LD_INT 2
14652: GREATEREQUAL
14653: IFFALSE 14665
14655: GO 14657
14657: DISABLE
// SetAchievement ( ACH_KING ) ;
14658: LD_STRING ACH_KING
14660: PPUSH
14661: CALL_OW 543
14665: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14666: LD_EXP 11
14670: NOT
14671: PUSH
14672: LD_INT 10
14674: PPUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 31
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 4
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 70
14721: AND
14722: IFFALSE 14742
14724: GO 14726
14726: DISABLE
// begin hillBase := true ;
14727: LD_ADDR_EXP 15
14731: PUSH
14732: LD_INT 1
14734: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14735: LD_STRING HillDone
14737: PPUSH
14738: CALL_OW 337
// end ;
14742: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14743: LD_EXP 30
14747: PUSH
14748: LD_EXP 30
14752: PPUSH
14753: CALL_OW 256
14757: PUSH
14758: LD_INT 3
14760: LESS
14761: AND
14762: IFFALSE 14808
14764: GO 14766
14766: DISABLE
// begin DialogueOn ;
14767: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14771: LD_EXP 30
14775: PPUSH
14776: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14780: LD_EXP 30
14784: PPUSH
14785: LD_STRING DK-Kkilled-1
14787: PPUSH
14788: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14792: LD_EXP 25
14796: PPUSH
14797: LD_STRING DH-Kkilled-2
14799: PPUSH
14800: CALL_OW 88
// DialogueOff ;
14804: CALL_OW 7
// end ;
14808: END
// every 0 0$1 trigger kaiaKilledByRussian do
14809: LD_EXP 23
14813: IFFALSE 14830
14815: GO 14817
14817: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14818: LD_EXP 25
14822: PPUSH
14823: LD_STRING DH-Kkilled-3
14825: PPUSH
14826: CALL_OW 88
14830: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14831: LD_EXP 16
14835: PUSH
14836: LD_INT 106
14838: PPUSH
14839: CALL_OW 255
14843: PUSH
14844: LD_INT 2
14846: EQUAL
14847: PUSH
14848: LD_EXP 17
14852: OR
14853: AND
14854: PUSH
14855: LD_EXP 18
14859: PUSH
14860: LD_EXP 24
14864: PUSH
14865: LD_INT 112
14867: PPUSH
14868: CALL_OW 255
14872: PUSH
14873: LD_INT 2
14875: EQUAL
14876: AND
14877: OR
14878: AND
14879: IFFALSE 16068
14881: GO 14883
14883: DISABLE
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14890: LD_STRING GoToWest
14892: PPUSH
14893: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14897: LD_INT 17
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14907: LD_INT 35
14909: PPUSH
14910: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_INT 17
14921: PPUSH
14922: LD_INT 22
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 2
14934: PUSH
14935: LD_INT 21
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 3
14957: PUSH
14958: LD_INT 58
14960: PUSH
14961: EMPTY
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 70
14985: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14986: LD_ADDR_VAR 0 3
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: LD_INT 55
15006: PUSH
15007: EMPTY
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: LD_INT 21
15019: PUSH
15020: LD_INT 1
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 21
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: LD_INT 58
15042: PUSH
15043: EMPTY
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15069: LD_VAR 0 2
15073: PUSH
15074: LD_INT 0
15076: PLUS
15077: PUSH
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 0
15085: PLUS
15086: EQUAL
15087: IFFALSE 14907
// SaveCharacters ( Heike , 04_1_Heike ) ;
15089: LD_EXP 25
15093: PPUSH
15094: LD_STRING 04_1_Heike
15096: PPUSH
15097: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15101: LD_EXP 35
15105: PUSH
15106: LD_EXP 35
15110: PUSH
15111: LD_EXP 39
15115: IN
15116: NOT
15117: AND
15118: IFFALSE 15134
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15120: LD_EXP 35
15124: PPUSH
15125: LD_STRING 04_1_Aviradze
15127: PPUSH
15128: CALL_OW 38
15132: GO 15152
// if Aviradze then
15134: LD_EXP 35
15138: IFFALSE 15152
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15140: LD_EXP 35
15144: PPUSH
15145: LD_STRING 04_1_Aviradze_L
15147: PPUSH
15148: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15152: LD_EXP 28
15156: PUSH
15157: LD_EXP 28
15161: PUSH
15162: LD_EXP 39
15166: IN
15167: NOT
15168: AND
15169: IFFALSE 15185
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15171: LD_EXP 28
15175: PPUSH
15176: LD_STRING 04_1_Ibrahim
15178: PPUSH
15179: CALL_OW 38
15183: GO 15203
// if Ibrahim then
15185: LD_EXP 28
15189: IFFALSE 15203
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15191: LD_EXP 28
15195: PPUSH
15196: LD_STRING 04_1_Ibrahim_L
15198: PPUSH
15199: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15203: LD_EXP 29
15207: PUSH
15208: LD_EXP 29
15212: PUSH
15213: LD_EXP 39
15217: IN
15218: NOT
15219: AND
15220: IFFALSE 15236
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15222: LD_EXP 29
15226: PPUSH
15227: LD_STRING 04_1_Kamil
15229: PPUSH
15230: CALL_OW 38
15234: GO 15254
// if Kamil then
15236: LD_EXP 29
15240: IFFALSE 15254
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15242: LD_EXP 29
15246: PPUSH
15247: LD_STRING 04_1_Kamil_L
15249: PPUSH
15250: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15254: LD_EXP 31
15258: PUSH
15259: LD_EXP 31
15263: PUSH
15264: LD_EXP 39
15268: IN
15269: NOT
15270: AND
15271: IFFALSE 15287
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15273: LD_EXP 31
15277: PPUSH
15278: LD_STRING 04_1_Sophia
15280: PPUSH
15281: CALL_OW 38
15285: GO 15305
// if Sophia then
15287: LD_EXP 31
15291: IFFALSE 15305
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15293: LD_EXP 31
15297: PPUSH
15298: LD_STRING 04_1_Sophia_L
15300: PPUSH
15301: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15305: LD_EXP 30
15309: PUSH
15310: LD_EXP 30
15314: PUSH
15315: LD_EXP 39
15319: IN
15320: NOT
15321: AND
15322: IFFALSE 15338
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15324: LD_EXP 30
15328: PPUSH
15329: LD_STRING 04_1_Kaia
15331: PPUSH
15332: CALL_OW 38
15336: GO 15356
// if Kaia then
15338: LD_EXP 30
15342: IFFALSE 15356
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15344: LD_EXP 30
15348: PPUSH
15349: LD_STRING 04_1_Kaia_L
15351: PPUSH
15352: CALL_OW 38
// if Givi then
15356: LD_EXP 26
15360: IFFALSE 15374
// SaveCharacters ( Givi , 04_1_Givi ) ;
15362: LD_EXP 26
15366: PPUSH
15367: LD_STRING 04_1_Givi
15369: PPUSH
15370: CALL_OW 38
// if Mike then
15374: LD_EXP 27
15378: IFFALSE 15392
// SaveCharacters ( Mike , 04_1_Mike ) ;
15380: LD_EXP 27
15384: PPUSH
15385: LD_STRING 04_1_Mike
15387: PPUSH
15388: CALL_OW 38
// if Markov then
15392: LD_EXP 32
15396: IFFALSE 15410
// SaveCharacters ( Markov , 04_1_Markov ) ;
15398: LD_EXP 32
15402: PPUSH
15403: LD_STRING 04_1_Markov
15405: PPUSH
15406: CALL_OW 38
// if Kurt then
15410: LD_EXP 34
15414: IFFALSE 15435
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15416: LD_EXP 34
15420: PPUSH
15421: LD_STRING 04_1_Kurt
15423: PPUSH
15424: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15428: LD_STRING enableBioCharacter(BIO_KURT)
15430: PPUSH
15431: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15435: LD_EXP 37
15439: PUSH
15440: LD_EXP 39
15444: DIFF
15445: IFFALSE 15465
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15447: LD_EXP 37
15451: PUSH
15452: LD_EXP 39
15456: DIFF
15457: PPUSH
15458: LD_STRING 04_1_others
15460: PPUSH
15461: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15465: LD_EXP 39
15469: PUSH
15470: LD_EXP 37
15474: AND
15475: IFFALSE 15560
// begin tmp := [ ] ;
15477: LD_ADDR_VAR 0 2
15481: PUSH
15482: EMPTY
15483: ST_TO_ADDR
// for i in heikeSecondSquad do
15484: LD_ADDR_VAR 0 1
15488: PUSH
15489: LD_EXP 37
15493: PUSH
15494: FOR_IN
15495: IFFALSE 15540
// if i in aviradzeSquad then
15497: LD_VAR 0 1
15501: PUSH
15502: LD_EXP 39
15506: IN
15507: IFFALSE 15538
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_VAR 0 2
15523: PUSH
15524: LD_INT 1
15526: PLUS
15527: PPUSH
15528: LD_VAR 0 1
15532: PPUSH
15533: CALL_OW 1
15537: ST_TO_ADDR
15538: GO 15494
15540: POP
15541: POP
// if tmp then
15542: LD_VAR 0 2
15546: IFFALSE 15560
// SaveCharacters ( tmp , 04_1_others_L ) ;
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_STRING 04_1_others_L
15555: PPUSH
15556: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15560: LD_ADDR_VAR 0 2
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 23
15577: PUSH
15578: LD_INT 0
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: ST_TO_ADDR
// if tmp then
15594: LD_VAR 0 2
15598: IFFALSE 15612
// SaveCharacters ( tmp , 04_1_apes ) ;
15600: LD_VAR 0 2
15604: PPUSH
15605: LD_STRING 04_1_apes
15607: PPUSH
15608: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 17
15619: PPUSH
15620: LD_INT 21
15622: PUSH
15623: LD_INT 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PPUSH
15630: CALL_OW 70
15634: ST_TO_ADDR
// if tmp then
15635: LD_VAR 0 2
15639: IFFALSE 15933
// begin tmp2 := [ ] ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: EMPTY
15647: ST_TO_ADDR
// for i in tmp do
15648: LD_ADDR_VAR 0 1
15652: PUSH
15653: LD_VAR 0 2
15657: PUSH
15658: FOR_IN
15659: IFFALSE 15919
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 264
15670: PUSH
15671: LD_INT 32
15673: PUSH
15674: LD_INT 12
15676: PUSH
15677: LD_INT 51
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: IN
15685: IFFALSE 15822
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 289
15704: PUSH
15705: LD_VAR 0 1
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 289
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 1
15739: PLUS
15740: PPUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 265
15750: PUSH
15751: LD_VAR 0 1
15755: PPUSH
15756: CALL_OW 262
15760: PUSH
15761: LD_VAR 0 1
15765: PPUSH
15766: CALL_OW 263
15770: PUSH
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 264
15780: PUSH
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 248
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 256
15800: PUSH
15801: LD_VAR 0 4
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 1
15819: ST_TO_ADDR
// end else
15820: GO 15917
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15822: LD_ADDR_VAR 0 3
15826: PUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_VAR 0 3
15836: PUSH
15837: LD_INT 1
15839: PLUS
15840: PPUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 265
15850: PUSH
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 262
15860: PUSH
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 263
15870: PUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: CALL_OW 264
15880: PUSH
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 248
15890: PUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 256
15900: PUSH
15901: EMPTY
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 1
15916: ST_TO_ADDR
15917: GO 15658
15919: POP
15920: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15921: LD_VAR 0 3
15925: PPUSH
15926: LD_STRING 04_1_Vehicles
15928: PPUSH
15929: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15933: LD_EXP 21
15937: PPUSH
15938: LD_STRING 04_1_RuLabCaptured
15940: PPUSH
15941: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15945: LD_EXP 19
15949: PPUSH
15950: LD_STRING 04_1_EscapeCounter
15952: PPUSH
15953: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15957: LD_EXP 15
15961: PPUSH
15962: LD_STRING 04_1_BaseHill
15964: PPUSH
15965: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15969: LD_OWVAR 1
15973: PPUSH
15974: LD_STRING 04_1_Time
15976: PPUSH
15977: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15981: LD_EXP 14
15985: PPUSH
15986: LD_STRING 04_1_DeadCounter
15988: PPUSH
15989: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15993: LD_EXP 24
15997: PUSH
15998: LD_INT 112
16000: PPUSH
16001: CALL_OW 255
16005: MUL
16006: PUSH
16007: LD_INT 2
16009: EQUAL
16010: PPUSH
16011: LD_STRING 04_1_KaganCaptured
16013: PPUSH
16014: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16018: LD_INT 22
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 34
16030: PUSH
16031: LD_INT 26
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PPUSH
16042: CALL_OW 69
16046: PUSH
16047: LD_INT 0
16049: PLUS
16050: PPUSH
16051: LD_STRING 04_1_Flamethrower
16053: PPUSH
16054: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16058: LD_INT 1
16060: PPUSH
16061: LD_STRING __x1\04_cont2
16063: PPUSH
16064: CALL_OW 340
// end ; end_of_file
16068: PPOPN 4
16070: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 266
16080: PUSH
16081: LD_INT 0
16083: EQUAL
16084: PUSH
16085: LD_VAR 0 1
16089: PPUSH
16090: CALL_OW 255
16094: PUSH
16095: LD_INT 2
16097: EQUAL
16098: AND
16099: IFFALSE 16109
// baseConstructed := true ;
16101: LD_ADDR_EXP 3
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 266
16118: PUSH
16119: LD_INT 6
16121: EQUAL
16122: PUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 255
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: AND
16137: IFFALSE 16147
// labConstructed := true ;
16139: LD_ADDR_EXP 4
16143: PUSH
16144: LD_INT 1
16146: ST_TO_ADDR
// end ;
16147: PPOPN 1
16149: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16150: LD_VAR 0 1
16154: PUSH
16155: LD_EXP 25
16159: EQUAL
16160: IFFALSE 16169
// YouLost ( Heike ) ;
16162: LD_STRING Heike
16164: PPUSH
16165: CALL_OW 104
// if un = Omar then
16169: LD_VAR 0 1
16173: PUSH
16174: LD_EXP 33
16178: EQUAL
16179: IFFALSE 16188
// YouLost ( Omar ) ;
16181: LD_STRING Omar
16183: PPUSH
16184: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16188: LD_VAR 0 1
16192: PUSH
16193: LD_INT 22
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 23
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 21
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: IN
16233: IFFALSE 16249
// loseCounter := loseCounter + 1 ;
16235: LD_ADDR_EXP 14
16239: PUSH
16240: LD_EXP 14
16244: PUSH
16245: LD_INT 1
16247: PLUS
16248: ST_TO_ADDR
// if un = omikron then
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 64
16256: EQUAL
16257: IFFALSE 16267
// omicronFall := true ;
16259: LD_ADDR_EXP 13
16263: PUSH
16264: LD_INT 1
16266: ST_TO_ADDR
// if un = kirov then
16267: LD_VAR 0 1
16271: PUSH
16272: LD_INT 71
16274: EQUAL
16275: IFFALSE 16292
// begin ChangeMissionObjectives ( KirovDone ) ;
16277: LD_STRING KirovDone
16279: PPUSH
16280: CALL_OW 337
// kirovDestroyed := true ;
16284: LD_ADDR_EXP 16
16288: PUSH
16289: LD_INT 1
16291: ST_TO_ADDR
// end ; if un = beria then
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 106
16299: EQUAL
16300: IFFALSE 16317
// begin ChangeMissionObjectives ( BeriaDone ) ;
16302: LD_STRING BeriaDone
16304: PPUSH
16305: CALL_OW 337
// beriaDestroyed := true ;
16309: LD_ADDR_EXP 17
16313: PUSH
16314: LD_INT 1
16316: ST_TO_ADDR
// end ; if un = kagan then
16317: LD_VAR 0 1
16321: PUSH
16322: LD_INT 112
16324: EQUAL
16325: IFFALSE 16335
// kaganDestroyed := true ;
16327: LD_ADDR_EXP 18
16331: PUSH
16332: LD_INT 1
16334: ST_TO_ADDR
// if un in russianPatrol then
16335: LD_VAR 0 1
16339: PUSH
16340: LD_EXP 47
16344: IN
16345: IFFALSE 16363
// russianPatrol := russianPatrol diff un ;
16347: LD_ADDR_EXP 47
16351: PUSH
16352: LD_EXP 47
16356: PUSH
16357: LD_VAR 0 1
16361: DIFF
16362: ST_TO_ADDR
// if un in russianOmicronAttackers then
16363: LD_VAR 0 1
16367: PUSH
16368: LD_EXP 48
16372: IN
16373: IFFALSE 16391
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16375: LD_ADDR_EXP 48
16379: PUSH
16380: LD_EXP 48
16384: PUSH
16385: LD_VAR 0 1
16389: DIFF
16390: ST_TO_ADDR
// end ;
16391: PPOPN 1
16393: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16394: LD_INT 0
16396: PPUSH
16397: PPUSH
16398: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16399: LD_VAR 0 1
16403: PUSH
16404: LD_INT 2
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 22
16419: PUSH
16420: LD_INT 4
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_INT 6
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 30
16445: PUSH
16446: LD_INT 32
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PPUSH
16457: CALL_OW 69
16461: IN
16462: IFFALSE 16635
// begin sol := UnitsInside ( un ) ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: CALL_OW 313
16478: ST_TO_ADDR
// if not sol then
16479: LD_VAR 0 3
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16635
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16488: LD_ADDR_VAR 0 4
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 255
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: LD_INT 30
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 30
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PPUSH
16542: CALL_OW 69
16546: ST_TO_ADDR
// if not nearestBarracks then
16547: LD_VAR 0 4
16551: NOT
16552: IFFALSE 16556
// exit ;
16554: GO 16635
// for i in nearestBarracks do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_VAR 0 4
16565: PUSH
16566: FOR_IN
16567: IFFALSE 16602
// if UnitsInside ( i ) = 6 then
16569: LD_VAR 0 2
16573: PPUSH
16574: CALL_OW 313
16578: PUSH
16579: LD_INT 6
16581: EQUAL
16582: IFFALSE 16600
// nearestBarracks := nearestBarracks diff i ;
16584: LD_ADDR_VAR 0 4
16588: PUSH
16589: LD_VAR 0 4
16593: PUSH
16594: LD_VAR 0 2
16598: DIFF
16599: ST_TO_ADDR
16600: GO 16566
16602: POP
16603: POP
// if not nearestBarracks then
16604: LD_VAR 0 4
16608: NOT
16609: IFFALSE 16613
// exit ;
16611: GO 16635
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16613: LD_VAR 0 3
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PPUSH
16622: LD_VAR 0 4
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PPUSH
16631: CALL_OW 120
// end ; end ;
16635: PPOPN 4
16637: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16638: LD_INT 0
16640: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16641: LD_EXP 8
16645: NOT
16646: PUSH
16647: LD_EXP 5
16651: NOT
16652: OR
16653: IFFALSE 16657
// exit ;
16655: GO 16725
// for i in camAreas do
16657: LD_ADDR_VAR 0 5
16661: PUSH
16662: LD_EXP 8
16666: PUSH
16667: FOR_IN
16668: IFFALSE 16723
// if InArea ( x , y , i ) then
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_VAR 0 4
16679: PPUSH
16680: LD_VAR 0 5
16684: PPUSH
16685: CALL_OW 309
16689: IFFALSE 16721
// begin SetAreaMapShow ( i , 0 ) ;
16691: LD_VAR 0 5
16695: PPUSH
16696: LD_INT 0
16698: PPUSH
16699: CALL_OW 424
// camAreas := camAreas diff i ;
16703: LD_ADDR_EXP 8
16707: PUSH
16708: LD_EXP 8
16712: PUSH
16713: LD_VAR 0 5
16717: DIFF
16718: ST_TO_ADDR
// break ;
16719: GO 16723
// end ;
16721: GO 16667
16723: POP
16724: POP
// end ;
16725: PPOPN 5
16727: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16728: LD_VAR 0 1
16732: PUSH
16733: LD_INT 2
16735: EQUAL
16736: PUSH
16737: LD_VAR 0 2
16741: PUSH
16742: LD_INT 5
16744: PUSH
16745: LD_INT 8
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: IN
16752: AND
16753: IFFALSE 16762
// YouLost ( Ally ) ;
16755: LD_STRING Ally
16757: PPUSH
16758: CALL_OW 104
// end ;
16762: PPOPN 2
16764: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16765: LD_VAR 0 1
16769: PUSH
16770: LD_EXP 30
16774: EQUAL
16775: PUSH
16776: LD_VAR 0 2
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: LD_INT 6
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: IN
16791: AND
16792: IFFALSE 16823
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16794: LD_ADDR_EXP 23
16798: PUSH
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 250
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 251
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: ST_TO_ADDR
// end ; end_of_file
16823: PPOPN 3
16825: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
16826: LD_EXP 11
16830: NOT
16831: PUSH
16832: LD_INT 12
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 287
16842: PUSH
16843: LD_INT 20
16845: PUSH
16846: LD_INT 16
16848: PUSH
16849: LD_INT 12
16851: PUSH
16852: LD_INT 10
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: LD_OWVAR 67
16865: ARRAY
16866: LESS
16867: AND
16868: IFFALSE 16895
16870: GO 16872
16872: DISABLE
// begin enable ;
16873: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 5
16879: PPUSH
16880: CALL_OW 12
16884: PPUSH
16885: LD_INT 12
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 55
// end ; end_of_file
16895: END
// every 0 0$1 trigger omarCountdown do
16896: LD_EXP 22
16900: IFFALSE 16952
16902: GO 16904
16904: DISABLE
// begin enable ;
16905: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16906: LD_ADDR_OWVAR 47
16910: PUSH
16911: LD_STRING #X104-1
16913: PUSH
16914: LD_EXP 22
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16923: LD_ADDR_EXP 22
16927: PUSH
16928: LD_EXP 22
16932: PUSH
16933: LD_INT 35
16935: MINUS
16936: ST_TO_ADDR
// if not omarCountdown then
16937: LD_EXP 22
16941: NOT
16942: IFFALSE 16952
// display_strings :=  ;
16944: LD_ADDR_OWVAR 47
16948: PUSH
16949: LD_STRING 
16951: ST_TO_ADDR
// end ; end_of_file
16952: END
// every 0 0$1 do
16953: GO 16955
16955: DISABLE
// begin enable ;
16956: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16957: LD_STRING updateTimer(
16959: PUSH
16960: LD_OWVAR 1
16964: STR
16965: PUSH
16966: LD_STRING );
16968: STR
16969: PPUSH
16970: CALL_OW 559
// end ;
16974: END
// on MapStart ( p ) do begin if streamModeActive then
16975: LD_EXP 52
16979: IFFALSE 16988
// DefineStreamItems ( true ) ;
16981: LD_INT 1
16983: PPUSH
16984: CALL 18636 0 1
// UpdateFactoryWaypoints ( ) ;
16988: CALL 32383 0 0
// end ;
16992: PPOPN 1
16994: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16995: LD_INT 0
16997: PPUSH
// if p2 = 100 then
16998: LD_VAR 0 2
17002: PUSH
17003: LD_INT 100
17005: EQUAL
17006: IFFALSE 18009
// begin if not StreamModeActive then
17008: LD_EXP 52
17012: NOT
17013: IFFALSE 17023
// StreamModeActive := true ;
17015: LD_ADDR_EXP 52
17019: PUSH
17020: LD_INT 1
17022: ST_TO_ADDR
// if p3 = 0 then
17023: LD_VAR 0 3
17027: PUSH
17028: LD_INT 0
17030: EQUAL
17031: IFFALSE 17037
// InitStreamMode ;
17033: CALL 18172 0 0
// if p3 = 1 then
17037: LD_VAR 0 3
17041: PUSH
17042: LD_INT 1
17044: EQUAL
17045: IFFALSE 17055
// sRocket := true ;
17047: LD_ADDR_EXP 57
17051: PUSH
17052: LD_INT 1
17054: ST_TO_ADDR
// if p3 = 2 then
17055: LD_VAR 0 3
17059: PUSH
17060: LD_INT 2
17062: EQUAL
17063: IFFALSE 17073
// sSpeed := true ;
17065: LD_ADDR_EXP 56
17069: PUSH
17070: LD_INT 1
17072: ST_TO_ADDR
// if p3 = 3 then
17073: LD_VAR 0 3
17077: PUSH
17078: LD_INT 3
17080: EQUAL
17081: IFFALSE 17091
// sEngine := true ;
17083: LD_ADDR_EXP 58
17087: PUSH
17088: LD_INT 1
17090: ST_TO_ADDR
// if p3 = 4 then
17091: LD_VAR 0 3
17095: PUSH
17096: LD_INT 4
17098: EQUAL
17099: IFFALSE 17109
// sSpec := true ;
17101: LD_ADDR_EXP 55
17105: PUSH
17106: LD_INT 1
17108: ST_TO_ADDR
// if p3 = 5 then
17109: LD_VAR 0 3
17113: PUSH
17114: LD_INT 5
17116: EQUAL
17117: IFFALSE 17127
// sLevel := true ;
17119: LD_ADDR_EXP 59
17123: PUSH
17124: LD_INT 1
17126: ST_TO_ADDR
// if p3 = 6 then
17127: LD_VAR 0 3
17131: PUSH
17132: LD_INT 6
17134: EQUAL
17135: IFFALSE 17145
// sArmoury := true ;
17137: LD_ADDR_EXP 60
17141: PUSH
17142: LD_INT 1
17144: ST_TO_ADDR
// if p3 = 7 then
17145: LD_VAR 0 3
17149: PUSH
17150: LD_INT 7
17152: EQUAL
17153: IFFALSE 17163
// sRadar := true ;
17155: LD_ADDR_EXP 61
17159: PUSH
17160: LD_INT 1
17162: ST_TO_ADDR
// if p3 = 8 then
17163: LD_VAR 0 3
17167: PUSH
17168: LD_INT 8
17170: EQUAL
17171: IFFALSE 17181
// sBunker := true ;
17173: LD_ADDR_EXP 62
17177: PUSH
17178: LD_INT 1
17180: ST_TO_ADDR
// if p3 = 9 then
17181: LD_VAR 0 3
17185: PUSH
17186: LD_INT 9
17188: EQUAL
17189: IFFALSE 17199
// sHack := true ;
17191: LD_ADDR_EXP 63
17195: PUSH
17196: LD_INT 1
17198: ST_TO_ADDR
// if p3 = 10 then
17199: LD_VAR 0 3
17203: PUSH
17204: LD_INT 10
17206: EQUAL
17207: IFFALSE 17217
// sFire := true ;
17209: LD_ADDR_EXP 64
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
// if p3 = 11 then
17217: LD_VAR 0 3
17221: PUSH
17222: LD_INT 11
17224: EQUAL
17225: IFFALSE 17235
// sRefresh := true ;
17227: LD_ADDR_EXP 65
17231: PUSH
17232: LD_INT 1
17234: ST_TO_ADDR
// if p3 = 12 then
17235: LD_VAR 0 3
17239: PUSH
17240: LD_INT 12
17242: EQUAL
17243: IFFALSE 17253
// sExp := true ;
17245: LD_ADDR_EXP 66
17249: PUSH
17250: LD_INT 1
17252: ST_TO_ADDR
// if p3 = 13 then
17253: LD_VAR 0 3
17257: PUSH
17258: LD_INT 13
17260: EQUAL
17261: IFFALSE 17271
// sDepot := true ;
17263: LD_ADDR_EXP 67
17267: PUSH
17268: LD_INT 1
17270: ST_TO_ADDR
// if p3 = 14 then
17271: LD_VAR 0 3
17275: PUSH
17276: LD_INT 14
17278: EQUAL
17279: IFFALSE 17289
// sFlag := true ;
17281: LD_ADDR_EXP 68
17285: PUSH
17286: LD_INT 1
17288: ST_TO_ADDR
// if p3 = 15 then
17289: LD_VAR 0 3
17293: PUSH
17294: LD_INT 15
17296: EQUAL
17297: IFFALSE 17307
// sKamikadze := true ;
17299: LD_ADDR_EXP 76
17303: PUSH
17304: LD_INT 1
17306: ST_TO_ADDR
// if p3 = 16 then
17307: LD_VAR 0 3
17311: PUSH
17312: LD_INT 16
17314: EQUAL
17315: IFFALSE 17325
// sTroll := true ;
17317: LD_ADDR_EXP 77
17321: PUSH
17322: LD_INT 1
17324: ST_TO_ADDR
// if p3 = 17 then
17325: LD_VAR 0 3
17329: PUSH
17330: LD_INT 17
17332: EQUAL
17333: IFFALSE 17343
// sSlow := true ;
17335: LD_ADDR_EXP 78
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
// if p3 = 18 then
17343: LD_VAR 0 3
17347: PUSH
17348: LD_INT 18
17350: EQUAL
17351: IFFALSE 17361
// sLack := true ;
17353: LD_ADDR_EXP 79
17357: PUSH
17358: LD_INT 1
17360: ST_TO_ADDR
// if p3 = 19 then
17361: LD_VAR 0 3
17365: PUSH
17366: LD_INT 19
17368: EQUAL
17369: IFFALSE 17379
// sTank := true ;
17371: LD_ADDR_EXP 81
17375: PUSH
17376: LD_INT 1
17378: ST_TO_ADDR
// if p3 = 20 then
17379: LD_VAR 0 3
17383: PUSH
17384: LD_INT 20
17386: EQUAL
17387: IFFALSE 17397
// sRemote := true ;
17389: LD_ADDR_EXP 82
17393: PUSH
17394: LD_INT 1
17396: ST_TO_ADDR
// if p3 = 21 then
17397: LD_VAR 0 3
17401: PUSH
17402: LD_INT 21
17404: EQUAL
17405: IFFALSE 17415
// sPowell := true ;
17407: LD_ADDR_EXP 83
17411: PUSH
17412: LD_INT 1
17414: ST_TO_ADDR
// if p3 = 22 then
17415: LD_VAR 0 3
17419: PUSH
17420: LD_INT 22
17422: EQUAL
17423: IFFALSE 17433
// sTeleport := true ;
17425: LD_ADDR_EXP 86
17429: PUSH
17430: LD_INT 1
17432: ST_TO_ADDR
// if p3 = 23 then
17433: LD_VAR 0 3
17437: PUSH
17438: LD_INT 23
17440: EQUAL
17441: IFFALSE 17451
// sOilTower := true ;
17443: LD_ADDR_EXP 88
17447: PUSH
17448: LD_INT 1
17450: ST_TO_ADDR
// if p3 = 24 then
17451: LD_VAR 0 3
17455: PUSH
17456: LD_INT 24
17458: EQUAL
17459: IFFALSE 17469
// sShovel := true ;
17461: LD_ADDR_EXP 89
17465: PUSH
17466: LD_INT 1
17468: ST_TO_ADDR
// if p3 = 25 then
17469: LD_VAR 0 3
17473: PUSH
17474: LD_INT 25
17476: EQUAL
17477: IFFALSE 17487
// sSheik := true ;
17479: LD_ADDR_EXP 90
17483: PUSH
17484: LD_INT 1
17486: ST_TO_ADDR
// if p3 = 26 then
17487: LD_VAR 0 3
17491: PUSH
17492: LD_INT 26
17494: EQUAL
17495: IFFALSE 17505
// sEarthquake := true ;
17497: LD_ADDR_EXP 92
17501: PUSH
17502: LD_INT 1
17504: ST_TO_ADDR
// if p3 = 27 then
17505: LD_VAR 0 3
17509: PUSH
17510: LD_INT 27
17512: EQUAL
17513: IFFALSE 17523
// sAI := true ;
17515: LD_ADDR_EXP 93
17519: PUSH
17520: LD_INT 1
17522: ST_TO_ADDR
// if p3 = 28 then
17523: LD_VAR 0 3
17527: PUSH
17528: LD_INT 28
17530: EQUAL
17531: IFFALSE 17541
// sCargo := true ;
17533: LD_ADDR_EXP 96
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
// if p3 = 29 then
17541: LD_VAR 0 3
17545: PUSH
17546: LD_INT 29
17548: EQUAL
17549: IFFALSE 17559
// sDLaser := true ;
17551: LD_ADDR_EXP 97
17555: PUSH
17556: LD_INT 1
17558: ST_TO_ADDR
// if p3 = 30 then
17559: LD_VAR 0 3
17563: PUSH
17564: LD_INT 30
17566: EQUAL
17567: IFFALSE 17577
// sExchange := true ;
17569: LD_ADDR_EXP 98
17573: PUSH
17574: LD_INT 1
17576: ST_TO_ADDR
// if p3 = 31 then
17577: LD_VAR 0 3
17581: PUSH
17582: LD_INT 31
17584: EQUAL
17585: IFFALSE 17595
// sFac := true ;
17587: LD_ADDR_EXP 99
17591: PUSH
17592: LD_INT 1
17594: ST_TO_ADDR
// if p3 = 32 then
17595: LD_VAR 0 3
17599: PUSH
17600: LD_INT 32
17602: EQUAL
17603: IFFALSE 17613
// sPower := true ;
17605: LD_ADDR_EXP 100
17609: PUSH
17610: LD_INT 1
17612: ST_TO_ADDR
// if p3 = 33 then
17613: LD_VAR 0 3
17617: PUSH
17618: LD_INT 33
17620: EQUAL
17621: IFFALSE 17631
// sRandom := true ;
17623: LD_ADDR_EXP 101
17627: PUSH
17628: LD_INT 1
17630: ST_TO_ADDR
// if p3 = 34 then
17631: LD_VAR 0 3
17635: PUSH
17636: LD_INT 34
17638: EQUAL
17639: IFFALSE 17649
// sShield := true ;
17641: LD_ADDR_EXP 102
17645: PUSH
17646: LD_INT 1
17648: ST_TO_ADDR
// if p3 = 35 then
17649: LD_VAR 0 3
17653: PUSH
17654: LD_INT 35
17656: EQUAL
17657: IFFALSE 17667
// sTime := true ;
17659: LD_ADDR_EXP 103
17663: PUSH
17664: LD_INT 1
17666: ST_TO_ADDR
// if p3 = 36 then
17667: LD_VAR 0 3
17671: PUSH
17672: LD_INT 36
17674: EQUAL
17675: IFFALSE 17685
// sTools := true ;
17677: LD_ADDR_EXP 104
17681: PUSH
17682: LD_INT 1
17684: ST_TO_ADDR
// if p3 = 101 then
17685: LD_VAR 0 3
17689: PUSH
17690: LD_INT 101
17692: EQUAL
17693: IFFALSE 17703
// sSold := true ;
17695: LD_ADDR_EXP 69
17699: PUSH
17700: LD_INT 1
17702: ST_TO_ADDR
// if p3 = 102 then
17703: LD_VAR 0 3
17707: PUSH
17708: LD_INT 102
17710: EQUAL
17711: IFFALSE 17721
// sDiff := true ;
17713: LD_ADDR_EXP 70
17717: PUSH
17718: LD_INT 1
17720: ST_TO_ADDR
// if p3 = 103 then
17721: LD_VAR 0 3
17725: PUSH
17726: LD_INT 103
17728: EQUAL
17729: IFFALSE 17739
// sFog := true ;
17731: LD_ADDR_EXP 73
17735: PUSH
17736: LD_INT 1
17738: ST_TO_ADDR
// if p3 = 104 then
17739: LD_VAR 0 3
17743: PUSH
17744: LD_INT 104
17746: EQUAL
17747: IFFALSE 17757
// sReset := true ;
17749: LD_ADDR_EXP 74
17753: PUSH
17754: LD_INT 1
17756: ST_TO_ADDR
// if p3 = 105 then
17757: LD_VAR 0 3
17761: PUSH
17762: LD_INT 105
17764: EQUAL
17765: IFFALSE 17775
// sSun := true ;
17767: LD_ADDR_EXP 75
17771: PUSH
17772: LD_INT 1
17774: ST_TO_ADDR
// if p3 = 106 then
17775: LD_VAR 0 3
17779: PUSH
17780: LD_INT 106
17782: EQUAL
17783: IFFALSE 17793
// sTiger := true ;
17785: LD_ADDR_EXP 71
17789: PUSH
17790: LD_INT 1
17792: ST_TO_ADDR
// if p3 = 107 then
17793: LD_VAR 0 3
17797: PUSH
17798: LD_INT 107
17800: EQUAL
17801: IFFALSE 17811
// sBomb := true ;
17803: LD_ADDR_EXP 72
17807: PUSH
17808: LD_INT 1
17810: ST_TO_ADDR
// if p3 = 108 then
17811: LD_VAR 0 3
17815: PUSH
17816: LD_INT 108
17818: EQUAL
17819: IFFALSE 17829
// sWound := true ;
17821: LD_ADDR_EXP 80
17825: PUSH
17826: LD_INT 1
17828: ST_TO_ADDR
// if p3 = 109 then
17829: LD_VAR 0 3
17833: PUSH
17834: LD_INT 109
17836: EQUAL
17837: IFFALSE 17847
// sBetray := true ;
17839: LD_ADDR_EXP 84
17843: PUSH
17844: LD_INT 1
17846: ST_TO_ADDR
// if p3 = 110 then
17847: LD_VAR 0 3
17851: PUSH
17852: LD_INT 110
17854: EQUAL
17855: IFFALSE 17865
// sContamin := true ;
17857: LD_ADDR_EXP 85
17861: PUSH
17862: LD_INT 1
17864: ST_TO_ADDR
// if p3 = 111 then
17865: LD_VAR 0 3
17869: PUSH
17870: LD_INT 111
17872: EQUAL
17873: IFFALSE 17883
// sOil := true ;
17875: LD_ADDR_EXP 87
17879: PUSH
17880: LD_INT 1
17882: ST_TO_ADDR
// if p3 = 112 then
17883: LD_VAR 0 3
17887: PUSH
17888: LD_INT 112
17890: EQUAL
17891: IFFALSE 17901
// sStu := true ;
17893: LD_ADDR_EXP 91
17897: PUSH
17898: LD_INT 1
17900: ST_TO_ADDR
// if p3 = 113 then
17901: LD_VAR 0 3
17905: PUSH
17906: LD_INT 113
17908: EQUAL
17909: IFFALSE 17919
// sBazooka := true ;
17911: LD_ADDR_EXP 94
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// if p3 = 114 then
17919: LD_VAR 0 3
17923: PUSH
17924: LD_INT 114
17926: EQUAL
17927: IFFALSE 17937
// sMortar := true ;
17929: LD_ADDR_EXP 95
17933: PUSH
17934: LD_INT 1
17936: ST_TO_ADDR
// if p3 = 115 then
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 115
17944: EQUAL
17945: IFFALSE 17955
// sRanger := true ;
17947: LD_ADDR_EXP 105
17951: PUSH
17952: LD_INT 1
17954: ST_TO_ADDR
// if p3 = 116 then
17955: LD_VAR 0 3
17959: PUSH
17960: LD_INT 116
17962: EQUAL
17963: IFFALSE 17973
// sComputer := true ;
17965: LD_ADDR_EXP 106
17969: PUSH
17970: LD_INT 1
17972: ST_TO_ADDR
// if p3 = 117 then
17973: LD_VAR 0 3
17977: PUSH
17978: LD_INT 117
17980: EQUAL
17981: IFFALSE 17991
// s30 := true ;
17983: LD_ADDR_EXP 107
17987: PUSH
17988: LD_INT 1
17990: ST_TO_ADDR
// if p3 = 118 then
17991: LD_VAR 0 3
17995: PUSH
17996: LD_INT 118
17998: EQUAL
17999: IFFALSE 18009
// s60 := true ;
18001: LD_ADDR_EXP 108
18005: PUSH
18006: LD_INT 1
18008: ST_TO_ADDR
// end ; if p2 = 101 then
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 101
18016: EQUAL
18017: IFFALSE 18145
// begin case p3 of 1 :
18019: LD_VAR 0 3
18023: PUSH
18024: LD_INT 1
18026: DOUBLE
18027: EQUAL
18028: IFTRUE 18032
18030: GO 18039
18032: POP
// hHackUnlimitedResources ; 2 :
18033: CALL 30243 0 0
18037: GO 18145
18039: LD_INT 2
18041: DOUBLE
18042: EQUAL
18043: IFTRUE 18047
18045: GO 18054
18047: POP
// hHackSetLevel10 ; 3 :
18048: CALL 30376 0 0
18052: GO 18145
18054: LD_INT 3
18056: DOUBLE
18057: EQUAL
18058: IFTRUE 18062
18060: GO 18069
18062: POP
// hHackSetLevel10YourUnits ; 4 :
18063: CALL 30461 0 0
18067: GO 18145
18069: LD_INT 4
18071: DOUBLE
18072: EQUAL
18073: IFTRUE 18077
18075: GO 18084
18077: POP
// hHackInvincible ; 5 :
18078: CALL 30909 0 0
18082: GO 18145
18084: LD_INT 5
18086: DOUBLE
18087: EQUAL
18088: IFTRUE 18092
18090: GO 18099
18092: POP
// hHackInvisible ; 6 :
18093: CALL 31020 0 0
18097: GO 18145
18099: LD_INT 6
18101: DOUBLE
18102: EQUAL
18103: IFTRUE 18107
18105: GO 18114
18107: POP
// hHackChangeYourSide ; 7 :
18108: CALL 31077 0 0
18112: GO 18145
18114: LD_INT 7
18116: DOUBLE
18117: EQUAL
18118: IFTRUE 18122
18120: GO 18129
18122: POP
// hHackChangeUnitSide ; 8 :
18123: CALL 31119 0 0
18127: GO 18145
18129: LD_INT 8
18131: DOUBLE
18132: EQUAL
18133: IFTRUE 18137
18135: GO 18144
18137: POP
// hHackFog ; end ;
18138: CALL 31220 0 0
18142: GO 18145
18144: POP
// end ; end ;
18145: LD_VAR 0 7
18149: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18150: GO 18152
18152: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18153: LD_STRING initStreamRollete();
18155: PPUSH
18156: CALL_OW 559
// InitStreamMode ;
18160: CALL 18172 0 0
// DefineStreamItems ( false ) ;
18164: LD_INT 0
18166: PPUSH
18167: CALL 18636 0 1
// end ;
18171: END
// function InitStreamMode ; begin
18172: LD_INT 0
18174: PPUSH
// streamModeActive := false ;
18175: LD_ADDR_EXP 52
18179: PUSH
18180: LD_INT 0
18182: ST_TO_ADDR
// normalCounter := 36 ;
18183: LD_ADDR_EXP 53
18187: PUSH
18188: LD_INT 36
18190: ST_TO_ADDR
// hardcoreCounter := 18 ;
18191: LD_ADDR_EXP 54
18195: PUSH
18196: LD_INT 18
18198: ST_TO_ADDR
// sRocket := false ;
18199: LD_ADDR_EXP 57
18203: PUSH
18204: LD_INT 0
18206: ST_TO_ADDR
// sSpeed := false ;
18207: LD_ADDR_EXP 56
18211: PUSH
18212: LD_INT 0
18214: ST_TO_ADDR
// sEngine := false ;
18215: LD_ADDR_EXP 58
18219: PUSH
18220: LD_INT 0
18222: ST_TO_ADDR
// sSpec := false ;
18223: LD_ADDR_EXP 55
18227: PUSH
18228: LD_INT 0
18230: ST_TO_ADDR
// sLevel := false ;
18231: LD_ADDR_EXP 59
18235: PUSH
18236: LD_INT 0
18238: ST_TO_ADDR
// sArmoury := false ;
18239: LD_ADDR_EXP 60
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// sRadar := false ;
18247: LD_ADDR_EXP 61
18251: PUSH
18252: LD_INT 0
18254: ST_TO_ADDR
// sBunker := false ;
18255: LD_ADDR_EXP 62
18259: PUSH
18260: LD_INT 0
18262: ST_TO_ADDR
// sHack := false ;
18263: LD_ADDR_EXP 63
18267: PUSH
18268: LD_INT 0
18270: ST_TO_ADDR
// sFire := false ;
18271: LD_ADDR_EXP 64
18275: PUSH
18276: LD_INT 0
18278: ST_TO_ADDR
// sRefresh := false ;
18279: LD_ADDR_EXP 65
18283: PUSH
18284: LD_INT 0
18286: ST_TO_ADDR
// sExp := false ;
18287: LD_ADDR_EXP 66
18291: PUSH
18292: LD_INT 0
18294: ST_TO_ADDR
// sDepot := false ;
18295: LD_ADDR_EXP 67
18299: PUSH
18300: LD_INT 0
18302: ST_TO_ADDR
// sFlag := false ;
18303: LD_ADDR_EXP 68
18307: PUSH
18308: LD_INT 0
18310: ST_TO_ADDR
// sKamikadze := false ;
18311: LD_ADDR_EXP 76
18315: PUSH
18316: LD_INT 0
18318: ST_TO_ADDR
// sTroll := false ;
18319: LD_ADDR_EXP 77
18323: PUSH
18324: LD_INT 0
18326: ST_TO_ADDR
// sSlow := false ;
18327: LD_ADDR_EXP 78
18331: PUSH
18332: LD_INT 0
18334: ST_TO_ADDR
// sLack := false ;
18335: LD_ADDR_EXP 79
18339: PUSH
18340: LD_INT 0
18342: ST_TO_ADDR
// sTank := false ;
18343: LD_ADDR_EXP 81
18347: PUSH
18348: LD_INT 0
18350: ST_TO_ADDR
// sRemote := false ;
18351: LD_ADDR_EXP 82
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// sPowell := false ;
18359: LD_ADDR_EXP 83
18363: PUSH
18364: LD_INT 0
18366: ST_TO_ADDR
// sTeleport := false ;
18367: LD_ADDR_EXP 86
18371: PUSH
18372: LD_INT 0
18374: ST_TO_ADDR
// sOilTower := false ;
18375: LD_ADDR_EXP 88
18379: PUSH
18380: LD_INT 0
18382: ST_TO_ADDR
// sShovel := false ;
18383: LD_ADDR_EXP 89
18387: PUSH
18388: LD_INT 0
18390: ST_TO_ADDR
// sSheik := false ;
18391: LD_ADDR_EXP 90
18395: PUSH
18396: LD_INT 0
18398: ST_TO_ADDR
// sEarthquake := false ;
18399: LD_ADDR_EXP 92
18403: PUSH
18404: LD_INT 0
18406: ST_TO_ADDR
// sAI := false ;
18407: LD_ADDR_EXP 93
18411: PUSH
18412: LD_INT 0
18414: ST_TO_ADDR
// sCargo := false ;
18415: LD_ADDR_EXP 96
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
// sDLaser := false ;
18423: LD_ADDR_EXP 97
18427: PUSH
18428: LD_INT 0
18430: ST_TO_ADDR
// sExchange := false ;
18431: LD_ADDR_EXP 98
18435: PUSH
18436: LD_INT 0
18438: ST_TO_ADDR
// sFac := false ;
18439: LD_ADDR_EXP 99
18443: PUSH
18444: LD_INT 0
18446: ST_TO_ADDR
// sPower := false ;
18447: LD_ADDR_EXP 100
18451: PUSH
18452: LD_INT 0
18454: ST_TO_ADDR
// sRandom := false ;
18455: LD_ADDR_EXP 101
18459: PUSH
18460: LD_INT 0
18462: ST_TO_ADDR
// sShield := false ;
18463: LD_ADDR_EXP 102
18467: PUSH
18468: LD_INT 0
18470: ST_TO_ADDR
// sTime := false ;
18471: LD_ADDR_EXP 103
18475: PUSH
18476: LD_INT 0
18478: ST_TO_ADDR
// sTools := false ;
18479: LD_ADDR_EXP 104
18483: PUSH
18484: LD_INT 0
18486: ST_TO_ADDR
// sSold := false ;
18487: LD_ADDR_EXP 69
18491: PUSH
18492: LD_INT 0
18494: ST_TO_ADDR
// sDiff := false ;
18495: LD_ADDR_EXP 70
18499: PUSH
18500: LD_INT 0
18502: ST_TO_ADDR
// sFog := false ;
18503: LD_ADDR_EXP 73
18507: PUSH
18508: LD_INT 0
18510: ST_TO_ADDR
// sReset := false ;
18511: LD_ADDR_EXP 74
18515: PUSH
18516: LD_INT 0
18518: ST_TO_ADDR
// sSun := false ;
18519: LD_ADDR_EXP 75
18523: PUSH
18524: LD_INT 0
18526: ST_TO_ADDR
// sTiger := false ;
18527: LD_ADDR_EXP 71
18531: PUSH
18532: LD_INT 0
18534: ST_TO_ADDR
// sBomb := false ;
18535: LD_ADDR_EXP 72
18539: PUSH
18540: LD_INT 0
18542: ST_TO_ADDR
// sWound := false ;
18543: LD_ADDR_EXP 80
18547: PUSH
18548: LD_INT 0
18550: ST_TO_ADDR
// sBetray := false ;
18551: LD_ADDR_EXP 84
18555: PUSH
18556: LD_INT 0
18558: ST_TO_ADDR
// sContamin := false ;
18559: LD_ADDR_EXP 85
18563: PUSH
18564: LD_INT 0
18566: ST_TO_ADDR
// sOil := false ;
18567: LD_ADDR_EXP 87
18571: PUSH
18572: LD_INT 0
18574: ST_TO_ADDR
// sStu := false ;
18575: LD_ADDR_EXP 91
18579: PUSH
18580: LD_INT 0
18582: ST_TO_ADDR
// sBazooka := false ;
18583: LD_ADDR_EXP 94
18587: PUSH
18588: LD_INT 0
18590: ST_TO_ADDR
// sMortar := false ;
18591: LD_ADDR_EXP 95
18595: PUSH
18596: LD_INT 0
18598: ST_TO_ADDR
// sRanger := false ;
18599: LD_ADDR_EXP 105
18603: PUSH
18604: LD_INT 0
18606: ST_TO_ADDR
// sComputer := false ;
18607: LD_ADDR_EXP 106
18611: PUSH
18612: LD_INT 0
18614: ST_TO_ADDR
// s30 := false ;
18615: LD_ADDR_EXP 107
18619: PUSH
18620: LD_INT 0
18622: ST_TO_ADDR
// s60 := false ;
18623: LD_ADDR_EXP 108
18627: PUSH
18628: LD_INT 0
18630: ST_TO_ADDR
// end ;
18631: LD_VAR 0 1
18635: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18636: LD_INT 0
18638: PPUSH
18639: PPUSH
18640: PPUSH
18641: PPUSH
18642: PPUSH
18643: PPUSH
18644: PPUSH
// result := [ ] ;
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: EMPTY
18651: ST_TO_ADDR
// if campaign_id = 1 then
18652: LD_OWVAR 69
18656: PUSH
18657: LD_INT 1
18659: EQUAL
18660: IFFALSE 21826
// begin case mission_number of 1 :
18662: LD_OWVAR 70
18666: PUSH
18667: LD_INT 1
18669: DOUBLE
18670: EQUAL
18671: IFTRUE 18675
18673: GO 18751
18675: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18676: LD_ADDR_VAR 0 2
18680: PUSH
18681: LD_INT 2
18683: PUSH
18684: LD_INT 4
18686: PUSH
18687: LD_INT 11
18689: PUSH
18690: LD_INT 12
18692: PUSH
18693: LD_INT 15
18695: PUSH
18696: LD_INT 16
18698: PUSH
18699: LD_INT 22
18701: PUSH
18702: LD_INT 23
18704: PUSH
18705: LD_INT 26
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: LD_INT 101
18721: PUSH
18722: LD_INT 102
18724: PUSH
18725: LD_INT 106
18727: PUSH
18728: LD_INT 116
18730: PUSH
18731: LD_INT 117
18733: PUSH
18734: LD_INT 118
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: ST_TO_ADDR
18749: GO 21824
18751: LD_INT 2
18753: DOUBLE
18754: EQUAL
18755: IFTRUE 18759
18757: GO 18843
18759: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18760: LD_ADDR_VAR 0 2
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: LD_INT 4
18770: PUSH
18771: LD_INT 11
18773: PUSH
18774: LD_INT 12
18776: PUSH
18777: LD_INT 15
18779: PUSH
18780: LD_INT 16
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_INT 23
18788: PUSH
18789: LD_INT 26
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 101
18805: PUSH
18806: LD_INT 102
18808: PUSH
18809: LD_INT 105
18811: PUSH
18812: LD_INT 106
18814: PUSH
18815: LD_INT 108
18817: PUSH
18818: LD_INT 116
18820: PUSH
18821: LD_INT 117
18823: PUSH
18824: LD_INT 118
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: ST_TO_ADDR
18841: GO 21824
18843: LD_INT 3
18845: DOUBLE
18846: EQUAL
18847: IFTRUE 18851
18849: GO 18939
18851: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18852: LD_ADDR_VAR 0 2
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: LD_INT 4
18862: PUSH
18863: LD_INT 5
18865: PUSH
18866: LD_INT 11
18868: PUSH
18869: LD_INT 12
18871: PUSH
18872: LD_INT 15
18874: PUSH
18875: LD_INT 16
18877: PUSH
18878: LD_INT 22
18880: PUSH
18881: LD_INT 26
18883: PUSH
18884: LD_INT 36
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 101
18901: PUSH
18902: LD_INT 102
18904: PUSH
18905: LD_INT 105
18907: PUSH
18908: LD_INT 106
18910: PUSH
18911: LD_INT 108
18913: PUSH
18914: LD_INT 116
18916: PUSH
18917: LD_INT 117
18919: PUSH
18920: LD_INT 118
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: ST_TO_ADDR
18937: GO 21824
18939: LD_INT 4
18941: DOUBLE
18942: EQUAL
18943: IFTRUE 18947
18945: GO 19043
18947: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18948: LD_ADDR_VAR 0 2
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: LD_INT 4
18958: PUSH
18959: LD_INT 5
18961: PUSH
18962: LD_INT 8
18964: PUSH
18965: LD_INT 11
18967: PUSH
18968: LD_INT 12
18970: PUSH
18971: LD_INT 15
18973: PUSH
18974: LD_INT 16
18976: PUSH
18977: LD_INT 22
18979: PUSH
18980: LD_INT 23
18982: PUSH
18983: LD_INT 26
18985: PUSH
18986: LD_INT 36
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 101
19005: PUSH
19006: LD_INT 102
19008: PUSH
19009: LD_INT 105
19011: PUSH
19012: LD_INT 106
19014: PUSH
19015: LD_INT 108
19017: PUSH
19018: LD_INT 116
19020: PUSH
19021: LD_INT 117
19023: PUSH
19024: LD_INT 118
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: ST_TO_ADDR
19041: GO 21824
19043: LD_INT 5
19045: DOUBLE
19046: EQUAL
19047: IFTRUE 19051
19049: GO 19163
19051: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19052: LD_ADDR_VAR 0 2
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: LD_INT 4
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: LD_INT 6
19068: PUSH
19069: LD_INT 8
19071: PUSH
19072: LD_INT 11
19074: PUSH
19075: LD_INT 12
19077: PUSH
19078: LD_INT 15
19080: PUSH
19081: LD_INT 16
19083: PUSH
19084: LD_INT 22
19086: PUSH
19087: LD_INT 23
19089: PUSH
19090: LD_INT 25
19092: PUSH
19093: LD_INT 26
19095: PUSH
19096: LD_INT 36
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 101
19117: PUSH
19118: LD_INT 102
19120: PUSH
19121: LD_INT 105
19123: PUSH
19124: LD_INT 106
19126: PUSH
19127: LD_INT 108
19129: PUSH
19130: LD_INT 109
19132: PUSH
19133: LD_INT 112
19135: PUSH
19136: LD_INT 116
19138: PUSH
19139: LD_INT 117
19141: PUSH
19142: LD_INT 118
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: ST_TO_ADDR
19161: GO 21824
19163: LD_INT 6
19165: DOUBLE
19166: EQUAL
19167: IFTRUE 19171
19169: GO 19303
19171: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19172: LD_ADDR_VAR 0 2
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: LD_INT 4
19182: PUSH
19183: LD_INT 5
19185: PUSH
19186: LD_INT 6
19188: PUSH
19189: LD_INT 8
19191: PUSH
19192: LD_INT 11
19194: PUSH
19195: LD_INT 12
19197: PUSH
19198: LD_INT 15
19200: PUSH
19201: LD_INT 16
19203: PUSH
19204: LD_INT 20
19206: PUSH
19207: LD_INT 21
19209: PUSH
19210: LD_INT 22
19212: PUSH
19213: LD_INT 23
19215: PUSH
19216: LD_INT 25
19218: PUSH
19219: LD_INT 26
19221: PUSH
19222: LD_INT 30
19224: PUSH
19225: LD_INT 31
19227: PUSH
19228: LD_INT 32
19230: PUSH
19231: LD_INT 36
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 101
19257: PUSH
19258: LD_INT 102
19260: PUSH
19261: LD_INT 105
19263: PUSH
19264: LD_INT 106
19266: PUSH
19267: LD_INT 108
19269: PUSH
19270: LD_INT 109
19272: PUSH
19273: LD_INT 112
19275: PUSH
19276: LD_INT 116
19278: PUSH
19279: LD_INT 117
19281: PUSH
19282: LD_INT 118
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: ST_TO_ADDR
19301: GO 21824
19303: LD_INT 7
19305: DOUBLE
19306: EQUAL
19307: IFTRUE 19311
19309: GO 19423
19311: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19312: LD_ADDR_VAR 0 2
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 4
19322: PUSH
19323: LD_INT 5
19325: PUSH
19326: LD_INT 7
19328: PUSH
19329: LD_INT 11
19331: PUSH
19332: LD_INT 12
19334: PUSH
19335: LD_INT 15
19337: PUSH
19338: LD_INT 16
19340: PUSH
19341: LD_INT 20
19343: PUSH
19344: LD_INT 21
19346: PUSH
19347: LD_INT 22
19349: PUSH
19350: LD_INT 23
19352: PUSH
19353: LD_INT 25
19355: PUSH
19356: LD_INT 26
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 101
19377: PUSH
19378: LD_INT 102
19380: PUSH
19381: LD_INT 103
19383: PUSH
19384: LD_INT 105
19386: PUSH
19387: LD_INT 106
19389: PUSH
19390: LD_INT 108
19392: PUSH
19393: LD_INT 112
19395: PUSH
19396: LD_INT 116
19398: PUSH
19399: LD_INT 117
19401: PUSH
19402: LD_INT 118
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: ST_TO_ADDR
19421: GO 21824
19423: LD_INT 8
19425: DOUBLE
19426: EQUAL
19427: IFTRUE 19431
19429: GO 19571
19431: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19432: LD_ADDR_VAR 0 2
19436: PUSH
19437: LD_INT 2
19439: PUSH
19440: LD_INT 4
19442: PUSH
19443: LD_INT 5
19445: PUSH
19446: LD_INT 6
19448: PUSH
19449: LD_INT 7
19451: PUSH
19452: LD_INT 8
19454: PUSH
19455: LD_INT 11
19457: PUSH
19458: LD_INT 12
19460: PUSH
19461: LD_INT 15
19463: PUSH
19464: LD_INT 16
19466: PUSH
19467: LD_INT 20
19469: PUSH
19470: LD_INT 21
19472: PUSH
19473: LD_INT 22
19475: PUSH
19476: LD_INT 23
19478: PUSH
19479: LD_INT 25
19481: PUSH
19482: LD_INT 26
19484: PUSH
19485: LD_INT 30
19487: PUSH
19488: LD_INT 31
19490: PUSH
19491: LD_INT 32
19493: PUSH
19494: LD_INT 36
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 101
19521: PUSH
19522: LD_INT 102
19524: PUSH
19525: LD_INT 103
19527: PUSH
19528: LD_INT 105
19530: PUSH
19531: LD_INT 106
19533: PUSH
19534: LD_INT 108
19536: PUSH
19537: LD_INT 109
19539: PUSH
19540: LD_INT 112
19542: PUSH
19543: LD_INT 116
19545: PUSH
19546: LD_INT 117
19548: PUSH
19549: LD_INT 118
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: ST_TO_ADDR
19569: GO 21824
19571: LD_INT 9
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19727
19579: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19580: LD_ADDR_VAR 0 2
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 4
19590: PUSH
19591: LD_INT 5
19593: PUSH
19594: LD_INT 6
19596: PUSH
19597: LD_INT 7
19599: PUSH
19600: LD_INT 8
19602: PUSH
19603: LD_INT 11
19605: PUSH
19606: LD_INT 12
19608: PUSH
19609: LD_INT 15
19611: PUSH
19612: LD_INT 16
19614: PUSH
19615: LD_INT 20
19617: PUSH
19618: LD_INT 21
19620: PUSH
19621: LD_INT 22
19623: PUSH
19624: LD_INT 23
19626: PUSH
19627: LD_INT 25
19629: PUSH
19630: LD_INT 26
19632: PUSH
19633: LD_INT 28
19635: PUSH
19636: LD_INT 30
19638: PUSH
19639: LD_INT 31
19641: PUSH
19642: LD_INT 32
19644: PUSH
19645: LD_INT 36
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 101
19673: PUSH
19674: LD_INT 102
19676: PUSH
19677: LD_INT 103
19679: PUSH
19680: LD_INT 105
19682: PUSH
19683: LD_INT 106
19685: PUSH
19686: LD_INT 108
19688: PUSH
19689: LD_INT 109
19691: PUSH
19692: LD_INT 112
19694: PUSH
19695: LD_INT 114
19697: PUSH
19698: LD_INT 116
19700: PUSH
19701: LD_INT 117
19703: PUSH
19704: LD_INT 118
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: ST_TO_ADDR
19725: GO 21824
19727: LD_INT 10
19729: DOUBLE
19730: EQUAL
19731: IFTRUE 19735
19733: GO 19931
19735: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: LD_INT 2
19743: PUSH
19744: LD_INT 4
19746: PUSH
19747: LD_INT 5
19749: PUSH
19750: LD_INT 6
19752: PUSH
19753: LD_INT 7
19755: PUSH
19756: LD_INT 8
19758: PUSH
19759: LD_INT 9
19761: PUSH
19762: LD_INT 10
19764: PUSH
19765: LD_INT 11
19767: PUSH
19768: LD_INT 12
19770: PUSH
19771: LD_INT 13
19773: PUSH
19774: LD_INT 14
19776: PUSH
19777: LD_INT 15
19779: PUSH
19780: LD_INT 16
19782: PUSH
19783: LD_INT 17
19785: PUSH
19786: LD_INT 18
19788: PUSH
19789: LD_INT 19
19791: PUSH
19792: LD_INT 20
19794: PUSH
19795: LD_INT 21
19797: PUSH
19798: LD_INT 22
19800: PUSH
19801: LD_INT 23
19803: PUSH
19804: LD_INT 24
19806: PUSH
19807: LD_INT 25
19809: PUSH
19810: LD_INT 26
19812: PUSH
19813: LD_INT 28
19815: PUSH
19816: LD_INT 30
19818: PUSH
19819: LD_INT 31
19821: PUSH
19822: LD_INT 32
19824: PUSH
19825: LD_INT 36
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 101
19861: PUSH
19862: LD_INT 102
19864: PUSH
19865: LD_INT 103
19867: PUSH
19868: LD_INT 104
19870: PUSH
19871: LD_INT 105
19873: PUSH
19874: LD_INT 106
19876: PUSH
19877: LD_INT 107
19879: PUSH
19880: LD_INT 108
19882: PUSH
19883: LD_INT 109
19885: PUSH
19886: LD_INT 110
19888: PUSH
19889: LD_INT 111
19891: PUSH
19892: LD_INT 112
19894: PUSH
19895: LD_INT 114
19897: PUSH
19898: LD_INT 116
19900: PUSH
19901: LD_INT 117
19903: PUSH
19904: LD_INT 118
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: ST_TO_ADDR
19929: GO 21824
19931: LD_INT 11
19933: DOUBLE
19934: EQUAL
19935: IFTRUE 19939
19937: GO 20143
19939: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19940: LD_ADDR_VAR 0 2
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: LD_INT 3
19950: PUSH
19951: LD_INT 4
19953: PUSH
19954: LD_INT 5
19956: PUSH
19957: LD_INT 6
19959: PUSH
19960: LD_INT 7
19962: PUSH
19963: LD_INT 8
19965: PUSH
19966: LD_INT 9
19968: PUSH
19969: LD_INT 10
19971: PUSH
19972: LD_INT 11
19974: PUSH
19975: LD_INT 12
19977: PUSH
19978: LD_INT 13
19980: PUSH
19981: LD_INT 14
19983: PUSH
19984: LD_INT 15
19986: PUSH
19987: LD_INT 16
19989: PUSH
19990: LD_INT 17
19992: PUSH
19993: LD_INT 18
19995: PUSH
19996: LD_INT 19
19998: PUSH
19999: LD_INT 20
20001: PUSH
20002: LD_INT 21
20004: PUSH
20005: LD_INT 22
20007: PUSH
20008: LD_INT 23
20010: PUSH
20011: LD_INT 24
20013: PUSH
20014: LD_INT 25
20016: PUSH
20017: LD_INT 26
20019: PUSH
20020: LD_INT 28
20022: PUSH
20023: LD_INT 30
20025: PUSH
20026: LD_INT 31
20028: PUSH
20029: LD_INT 32
20031: PUSH
20032: LD_INT 34
20034: PUSH
20035: LD_INT 36
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 101
20073: PUSH
20074: LD_INT 102
20076: PUSH
20077: LD_INT 103
20079: PUSH
20080: LD_INT 104
20082: PUSH
20083: LD_INT 105
20085: PUSH
20086: LD_INT 106
20088: PUSH
20089: LD_INT 107
20091: PUSH
20092: LD_INT 108
20094: PUSH
20095: LD_INT 109
20097: PUSH
20098: LD_INT 110
20100: PUSH
20101: LD_INT 111
20103: PUSH
20104: LD_INT 112
20106: PUSH
20107: LD_INT 114
20109: PUSH
20110: LD_INT 116
20112: PUSH
20113: LD_INT 117
20115: PUSH
20116: LD_INT 118
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: ST_TO_ADDR
20141: GO 21824
20143: LD_INT 12
20145: DOUBLE
20146: EQUAL
20147: IFTRUE 20151
20149: GO 20371
20151: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20152: LD_ADDR_VAR 0 2
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: LD_INT 3
20165: PUSH
20166: LD_INT 4
20168: PUSH
20169: LD_INT 5
20171: PUSH
20172: LD_INT 6
20174: PUSH
20175: LD_INT 7
20177: PUSH
20178: LD_INT 8
20180: PUSH
20181: LD_INT 9
20183: PUSH
20184: LD_INT 10
20186: PUSH
20187: LD_INT 11
20189: PUSH
20190: LD_INT 12
20192: PUSH
20193: LD_INT 13
20195: PUSH
20196: LD_INT 14
20198: PUSH
20199: LD_INT 15
20201: PUSH
20202: LD_INT 16
20204: PUSH
20205: LD_INT 17
20207: PUSH
20208: LD_INT 18
20210: PUSH
20211: LD_INT 19
20213: PUSH
20214: LD_INT 20
20216: PUSH
20217: LD_INT 21
20219: PUSH
20220: LD_INT 22
20222: PUSH
20223: LD_INT 23
20225: PUSH
20226: LD_INT 24
20228: PUSH
20229: LD_INT 25
20231: PUSH
20232: LD_INT 26
20234: PUSH
20235: LD_INT 27
20237: PUSH
20238: LD_INT 28
20240: PUSH
20241: LD_INT 30
20243: PUSH
20244: LD_INT 31
20246: PUSH
20247: LD_INT 32
20249: PUSH
20250: LD_INT 33
20252: PUSH
20253: LD_INT 34
20255: PUSH
20256: LD_INT 36
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 101
20297: PUSH
20298: LD_INT 102
20300: PUSH
20301: LD_INT 103
20303: PUSH
20304: LD_INT 104
20306: PUSH
20307: LD_INT 105
20309: PUSH
20310: LD_INT 106
20312: PUSH
20313: LD_INT 107
20315: PUSH
20316: LD_INT 108
20318: PUSH
20319: LD_INT 109
20321: PUSH
20322: LD_INT 110
20324: PUSH
20325: LD_INT 111
20327: PUSH
20328: LD_INT 112
20330: PUSH
20331: LD_INT 113
20333: PUSH
20334: LD_INT 114
20336: PUSH
20337: LD_INT 116
20339: PUSH
20340: LD_INT 117
20342: PUSH
20343: LD_INT 118
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: ST_TO_ADDR
20369: GO 21824
20371: LD_INT 13
20373: DOUBLE
20374: EQUAL
20375: IFTRUE 20379
20377: GO 20587
20379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20380: LD_ADDR_VAR 0 2
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: LD_INT 3
20393: PUSH
20394: LD_INT 4
20396: PUSH
20397: LD_INT 5
20399: PUSH
20400: LD_INT 8
20402: PUSH
20403: LD_INT 9
20405: PUSH
20406: LD_INT 10
20408: PUSH
20409: LD_INT 11
20411: PUSH
20412: LD_INT 12
20414: PUSH
20415: LD_INT 14
20417: PUSH
20418: LD_INT 15
20420: PUSH
20421: LD_INT 16
20423: PUSH
20424: LD_INT 17
20426: PUSH
20427: LD_INT 18
20429: PUSH
20430: LD_INT 19
20432: PUSH
20433: LD_INT 20
20435: PUSH
20436: LD_INT 21
20438: PUSH
20439: LD_INT 22
20441: PUSH
20442: LD_INT 23
20444: PUSH
20445: LD_INT 24
20447: PUSH
20448: LD_INT 25
20450: PUSH
20451: LD_INT 26
20453: PUSH
20454: LD_INT 27
20456: PUSH
20457: LD_INT 28
20459: PUSH
20460: LD_INT 30
20462: PUSH
20463: LD_INT 31
20465: PUSH
20466: LD_INT 32
20468: PUSH
20469: LD_INT 33
20471: PUSH
20472: LD_INT 34
20474: PUSH
20475: LD_INT 36
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: PUSH
20511: LD_INT 101
20513: PUSH
20514: LD_INT 102
20516: PUSH
20517: LD_INT 103
20519: PUSH
20520: LD_INT 104
20522: PUSH
20523: LD_INT 105
20525: PUSH
20526: LD_INT 106
20528: PUSH
20529: LD_INT 107
20531: PUSH
20532: LD_INT 108
20534: PUSH
20535: LD_INT 109
20537: PUSH
20538: LD_INT 110
20540: PUSH
20541: LD_INT 111
20543: PUSH
20544: LD_INT 112
20546: PUSH
20547: LD_INT 113
20549: PUSH
20550: LD_INT 114
20552: PUSH
20553: LD_INT 116
20555: PUSH
20556: LD_INT 117
20558: PUSH
20559: LD_INT 118
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: ST_TO_ADDR
20585: GO 21824
20587: LD_INT 14
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20819
20595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20596: LD_ADDR_VAR 0 2
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: LD_INT 3
20609: PUSH
20610: LD_INT 4
20612: PUSH
20613: LD_INT 5
20615: PUSH
20616: LD_INT 6
20618: PUSH
20619: LD_INT 7
20621: PUSH
20622: LD_INT 8
20624: PUSH
20625: LD_INT 9
20627: PUSH
20628: LD_INT 10
20630: PUSH
20631: LD_INT 11
20633: PUSH
20634: LD_INT 12
20636: PUSH
20637: LD_INT 13
20639: PUSH
20640: LD_INT 14
20642: PUSH
20643: LD_INT 15
20645: PUSH
20646: LD_INT 16
20648: PUSH
20649: LD_INT 17
20651: PUSH
20652: LD_INT 18
20654: PUSH
20655: LD_INT 19
20657: PUSH
20658: LD_INT 20
20660: PUSH
20661: LD_INT 21
20663: PUSH
20664: LD_INT 22
20666: PUSH
20667: LD_INT 23
20669: PUSH
20670: LD_INT 24
20672: PUSH
20673: LD_INT 25
20675: PUSH
20676: LD_INT 26
20678: PUSH
20679: LD_INT 27
20681: PUSH
20682: LD_INT 28
20684: PUSH
20685: LD_INT 29
20687: PUSH
20688: LD_INT 30
20690: PUSH
20691: LD_INT 31
20693: PUSH
20694: LD_INT 32
20696: PUSH
20697: LD_INT 33
20699: PUSH
20700: LD_INT 34
20702: PUSH
20703: LD_INT 36
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 101
20745: PUSH
20746: LD_INT 102
20748: PUSH
20749: LD_INT 103
20751: PUSH
20752: LD_INT 104
20754: PUSH
20755: LD_INT 105
20757: PUSH
20758: LD_INT 106
20760: PUSH
20761: LD_INT 107
20763: PUSH
20764: LD_INT 108
20766: PUSH
20767: LD_INT 109
20769: PUSH
20770: LD_INT 110
20772: PUSH
20773: LD_INT 111
20775: PUSH
20776: LD_INT 112
20778: PUSH
20779: LD_INT 113
20781: PUSH
20782: LD_INT 114
20784: PUSH
20785: LD_INT 116
20787: PUSH
20788: LD_INT 117
20790: PUSH
20791: LD_INT 118
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: ST_TO_ADDR
20817: GO 21824
20819: LD_INT 15
20821: DOUBLE
20822: EQUAL
20823: IFTRUE 20827
20825: GO 21051
20827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20828: LD_ADDR_VAR 0 2
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: LD_INT 2
20838: PUSH
20839: LD_INT 3
20841: PUSH
20842: LD_INT 4
20844: PUSH
20845: LD_INT 5
20847: PUSH
20848: LD_INT 6
20850: PUSH
20851: LD_INT 7
20853: PUSH
20854: LD_INT 8
20856: PUSH
20857: LD_INT 9
20859: PUSH
20860: LD_INT 10
20862: PUSH
20863: LD_INT 11
20865: PUSH
20866: LD_INT 12
20868: PUSH
20869: LD_INT 13
20871: PUSH
20872: LD_INT 14
20874: PUSH
20875: LD_INT 15
20877: PUSH
20878: LD_INT 16
20880: PUSH
20881: LD_INT 17
20883: PUSH
20884: LD_INT 18
20886: PUSH
20887: LD_INT 19
20889: PUSH
20890: LD_INT 20
20892: PUSH
20893: LD_INT 21
20895: PUSH
20896: LD_INT 22
20898: PUSH
20899: LD_INT 23
20901: PUSH
20902: LD_INT 24
20904: PUSH
20905: LD_INT 25
20907: PUSH
20908: LD_INT 26
20910: PUSH
20911: LD_INT 27
20913: PUSH
20914: LD_INT 28
20916: PUSH
20917: LD_INT 29
20919: PUSH
20920: LD_INT 30
20922: PUSH
20923: LD_INT 31
20925: PUSH
20926: LD_INT 32
20928: PUSH
20929: LD_INT 33
20931: PUSH
20932: LD_INT 34
20934: PUSH
20935: LD_INT 36
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 101
20977: PUSH
20978: LD_INT 102
20980: PUSH
20981: LD_INT 103
20983: PUSH
20984: LD_INT 104
20986: PUSH
20987: LD_INT 105
20989: PUSH
20990: LD_INT 106
20992: PUSH
20993: LD_INT 107
20995: PUSH
20996: LD_INT 108
20998: PUSH
20999: LD_INT 109
21001: PUSH
21002: LD_INT 110
21004: PUSH
21005: LD_INT 111
21007: PUSH
21008: LD_INT 112
21010: PUSH
21011: LD_INT 113
21013: PUSH
21014: LD_INT 114
21016: PUSH
21017: LD_INT 116
21019: PUSH
21020: LD_INT 117
21022: PUSH
21023: LD_INT 118
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: ST_TO_ADDR
21049: GO 21824
21051: LD_INT 16
21053: DOUBLE
21054: EQUAL
21055: IFTRUE 21059
21057: GO 21195
21059: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21060: LD_ADDR_VAR 0 2
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: LD_INT 4
21070: PUSH
21071: LD_INT 5
21073: PUSH
21074: LD_INT 7
21076: PUSH
21077: LD_INT 11
21079: PUSH
21080: LD_INT 12
21082: PUSH
21083: LD_INT 15
21085: PUSH
21086: LD_INT 16
21088: PUSH
21089: LD_INT 20
21091: PUSH
21092: LD_INT 21
21094: PUSH
21095: LD_INT 22
21097: PUSH
21098: LD_INT 23
21100: PUSH
21101: LD_INT 25
21103: PUSH
21104: LD_INT 26
21106: PUSH
21107: LD_INT 30
21109: PUSH
21110: LD_INT 31
21112: PUSH
21113: LD_INT 32
21115: PUSH
21116: LD_INT 33
21118: PUSH
21119: LD_INT 34
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 101
21145: PUSH
21146: LD_INT 102
21148: PUSH
21149: LD_INT 103
21151: PUSH
21152: LD_INT 106
21154: PUSH
21155: LD_INT 108
21157: PUSH
21158: LD_INT 112
21160: PUSH
21161: LD_INT 113
21163: PUSH
21164: LD_INT 114
21166: PUSH
21167: LD_INT 116
21169: PUSH
21170: LD_INT 117
21172: PUSH
21173: LD_INT 118
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: ST_TO_ADDR
21193: GO 21824
21195: LD_INT 17
21197: DOUBLE
21198: EQUAL
21199: IFTRUE 21203
21201: GO 21427
21203: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21204: LD_ADDR_VAR 0 2
21208: PUSH
21209: LD_INT 1
21211: PUSH
21212: LD_INT 2
21214: PUSH
21215: LD_INT 3
21217: PUSH
21218: LD_INT 4
21220: PUSH
21221: LD_INT 5
21223: PUSH
21224: LD_INT 6
21226: PUSH
21227: LD_INT 7
21229: PUSH
21230: LD_INT 8
21232: PUSH
21233: LD_INT 9
21235: PUSH
21236: LD_INT 10
21238: PUSH
21239: LD_INT 11
21241: PUSH
21242: LD_INT 12
21244: PUSH
21245: LD_INT 13
21247: PUSH
21248: LD_INT 14
21250: PUSH
21251: LD_INT 15
21253: PUSH
21254: LD_INT 16
21256: PUSH
21257: LD_INT 17
21259: PUSH
21260: LD_INT 18
21262: PUSH
21263: LD_INT 19
21265: PUSH
21266: LD_INT 20
21268: PUSH
21269: LD_INT 21
21271: PUSH
21272: LD_INT 22
21274: PUSH
21275: LD_INT 23
21277: PUSH
21278: LD_INT 24
21280: PUSH
21281: LD_INT 25
21283: PUSH
21284: LD_INT 26
21286: PUSH
21287: LD_INT 27
21289: PUSH
21290: LD_INT 28
21292: PUSH
21293: LD_INT 29
21295: PUSH
21296: LD_INT 30
21298: PUSH
21299: LD_INT 31
21301: PUSH
21302: LD_INT 32
21304: PUSH
21305: LD_INT 33
21307: PUSH
21308: LD_INT 34
21310: PUSH
21311: LD_INT 36
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 101
21353: PUSH
21354: LD_INT 102
21356: PUSH
21357: LD_INT 103
21359: PUSH
21360: LD_INT 104
21362: PUSH
21363: LD_INT 105
21365: PUSH
21366: LD_INT 106
21368: PUSH
21369: LD_INT 107
21371: PUSH
21372: LD_INT 108
21374: PUSH
21375: LD_INT 109
21377: PUSH
21378: LD_INT 110
21380: PUSH
21381: LD_INT 111
21383: PUSH
21384: LD_INT 112
21386: PUSH
21387: LD_INT 113
21389: PUSH
21390: LD_INT 114
21392: PUSH
21393: LD_INT 116
21395: PUSH
21396: LD_INT 117
21398: PUSH
21399: LD_INT 118
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: ST_TO_ADDR
21425: GO 21824
21427: LD_INT 18
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21583
21435: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21436: LD_ADDR_VAR 0 2
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 4
21446: PUSH
21447: LD_INT 5
21449: PUSH
21450: LD_INT 7
21452: PUSH
21453: LD_INT 11
21455: PUSH
21456: LD_INT 12
21458: PUSH
21459: LD_INT 15
21461: PUSH
21462: LD_INT 16
21464: PUSH
21465: LD_INT 20
21467: PUSH
21468: LD_INT 21
21470: PUSH
21471: LD_INT 22
21473: PUSH
21474: LD_INT 23
21476: PUSH
21477: LD_INT 25
21479: PUSH
21480: LD_INT 26
21482: PUSH
21483: LD_INT 30
21485: PUSH
21486: LD_INT 31
21488: PUSH
21489: LD_INT 32
21491: PUSH
21492: LD_INT 33
21494: PUSH
21495: LD_INT 34
21497: PUSH
21498: LD_INT 35
21500: PUSH
21501: LD_INT 36
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 101
21529: PUSH
21530: LD_INT 102
21532: PUSH
21533: LD_INT 103
21535: PUSH
21536: LD_INT 106
21538: PUSH
21539: LD_INT 108
21541: PUSH
21542: LD_INT 112
21544: PUSH
21545: LD_INT 113
21547: PUSH
21548: LD_INT 114
21550: PUSH
21551: LD_INT 115
21553: PUSH
21554: LD_INT 116
21556: PUSH
21557: LD_INT 117
21559: PUSH
21560: LD_INT 118
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: ST_TO_ADDR
21581: GO 21824
21583: LD_INT 19
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 21823
21591: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21592: LD_ADDR_VAR 0 2
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 3
21605: PUSH
21606: LD_INT 4
21608: PUSH
21609: LD_INT 5
21611: PUSH
21612: LD_INT 6
21614: PUSH
21615: LD_INT 7
21617: PUSH
21618: LD_INT 8
21620: PUSH
21621: LD_INT 9
21623: PUSH
21624: LD_INT 10
21626: PUSH
21627: LD_INT 11
21629: PUSH
21630: LD_INT 12
21632: PUSH
21633: LD_INT 13
21635: PUSH
21636: LD_INT 14
21638: PUSH
21639: LD_INT 15
21641: PUSH
21642: LD_INT 16
21644: PUSH
21645: LD_INT 17
21647: PUSH
21648: LD_INT 18
21650: PUSH
21651: LD_INT 19
21653: PUSH
21654: LD_INT 20
21656: PUSH
21657: LD_INT 21
21659: PUSH
21660: LD_INT 22
21662: PUSH
21663: LD_INT 23
21665: PUSH
21666: LD_INT 24
21668: PUSH
21669: LD_INT 25
21671: PUSH
21672: LD_INT 26
21674: PUSH
21675: LD_INT 27
21677: PUSH
21678: LD_INT 28
21680: PUSH
21681: LD_INT 29
21683: PUSH
21684: LD_INT 30
21686: PUSH
21687: LD_INT 31
21689: PUSH
21690: LD_INT 32
21692: PUSH
21693: LD_INT 33
21695: PUSH
21696: LD_INT 34
21698: PUSH
21699: LD_INT 35
21701: PUSH
21702: LD_INT 36
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 101
21745: PUSH
21746: LD_INT 102
21748: PUSH
21749: LD_INT 103
21751: PUSH
21752: LD_INT 104
21754: PUSH
21755: LD_INT 105
21757: PUSH
21758: LD_INT 106
21760: PUSH
21761: LD_INT 107
21763: PUSH
21764: LD_INT 108
21766: PUSH
21767: LD_INT 109
21769: PUSH
21770: LD_INT 110
21772: PUSH
21773: LD_INT 111
21775: PUSH
21776: LD_INT 112
21778: PUSH
21779: LD_INT 113
21781: PUSH
21782: LD_INT 114
21784: PUSH
21785: LD_INT 115
21787: PUSH
21788: LD_INT 116
21790: PUSH
21791: LD_INT 117
21793: PUSH
21794: LD_INT 118
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: ST_TO_ADDR
21821: GO 21824
21823: POP
// end else
21824: GO 22055
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21826: LD_ADDR_VAR 0 2
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 3
21839: PUSH
21840: LD_INT 4
21842: PUSH
21843: LD_INT 5
21845: PUSH
21846: LD_INT 6
21848: PUSH
21849: LD_INT 7
21851: PUSH
21852: LD_INT 8
21854: PUSH
21855: LD_INT 9
21857: PUSH
21858: LD_INT 10
21860: PUSH
21861: LD_INT 11
21863: PUSH
21864: LD_INT 12
21866: PUSH
21867: LD_INT 13
21869: PUSH
21870: LD_INT 14
21872: PUSH
21873: LD_INT 15
21875: PUSH
21876: LD_INT 16
21878: PUSH
21879: LD_INT 17
21881: PUSH
21882: LD_INT 18
21884: PUSH
21885: LD_INT 19
21887: PUSH
21888: LD_INT 20
21890: PUSH
21891: LD_INT 21
21893: PUSH
21894: LD_INT 22
21896: PUSH
21897: LD_INT 23
21899: PUSH
21900: LD_INT 24
21902: PUSH
21903: LD_INT 25
21905: PUSH
21906: LD_INT 26
21908: PUSH
21909: LD_INT 27
21911: PUSH
21912: LD_INT 28
21914: PUSH
21915: LD_INT 29
21917: PUSH
21918: LD_INT 30
21920: PUSH
21921: LD_INT 31
21923: PUSH
21924: LD_INT 32
21926: PUSH
21927: LD_INT 33
21929: PUSH
21930: LD_INT 34
21932: PUSH
21933: LD_INT 35
21935: PUSH
21936: LD_INT 36
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 101
21979: PUSH
21980: LD_INT 102
21982: PUSH
21983: LD_INT 103
21985: PUSH
21986: LD_INT 104
21988: PUSH
21989: LD_INT 105
21991: PUSH
21992: LD_INT 106
21994: PUSH
21995: LD_INT 107
21997: PUSH
21998: LD_INT 108
22000: PUSH
22001: LD_INT 109
22003: PUSH
22004: LD_INT 110
22006: PUSH
22007: LD_INT 111
22009: PUSH
22010: LD_INT 112
22012: PUSH
22013: LD_INT 113
22015: PUSH
22016: LD_INT 114
22018: PUSH
22019: LD_INT 115
22021: PUSH
22022: LD_INT 116
22024: PUSH
22025: LD_INT 117
22027: PUSH
22028: LD_INT 118
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: ST_TO_ADDR
// if result then
22055: LD_VAR 0 2
22059: IFFALSE 22845
// begin normal :=  ;
22061: LD_ADDR_VAR 0 5
22065: PUSH
22066: LD_STRING 
22068: ST_TO_ADDR
// hardcore :=  ;
22069: LD_ADDR_VAR 0 6
22073: PUSH
22074: LD_STRING 
22076: ST_TO_ADDR
// active :=  ;
22077: LD_ADDR_VAR 0 7
22081: PUSH
22082: LD_STRING 
22084: ST_TO_ADDR
// for i = 1 to normalCounter do
22085: LD_ADDR_VAR 0 8
22089: PUSH
22090: DOUBLE
22091: LD_INT 1
22093: DEC
22094: ST_TO_ADDR
22095: LD_EXP 53
22099: PUSH
22100: FOR_TO
22101: IFFALSE 22202
// begin tmp := 0 ;
22103: LD_ADDR_VAR 0 3
22107: PUSH
22108: LD_STRING 0
22110: ST_TO_ADDR
// if result [ 1 ] then
22111: LD_VAR 0 2
22115: PUSH
22116: LD_INT 1
22118: ARRAY
22119: IFFALSE 22184
// if result [ 1 ] [ 1 ] = i then
22121: LD_VAR 0 2
22125: PUSH
22126: LD_INT 1
22128: ARRAY
22129: PUSH
22130: LD_INT 1
22132: ARRAY
22133: PUSH
22134: LD_VAR 0 8
22138: EQUAL
22139: IFFALSE 22184
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22141: LD_ADDR_VAR 0 2
22145: PUSH
22146: LD_VAR 0 2
22150: PPUSH
22151: LD_INT 1
22153: PPUSH
22154: LD_VAR 0 2
22158: PUSH
22159: LD_INT 1
22161: ARRAY
22162: PPUSH
22163: LD_INT 1
22165: PPUSH
22166: CALL_OW 3
22170: PPUSH
22171: CALL_OW 1
22175: ST_TO_ADDR
// tmp := 1 ;
22176: LD_ADDR_VAR 0 3
22180: PUSH
22181: LD_STRING 1
22183: ST_TO_ADDR
// end ; normal := normal & tmp ;
22184: LD_ADDR_VAR 0 5
22188: PUSH
22189: LD_VAR 0 5
22193: PUSH
22194: LD_VAR 0 3
22198: STR
22199: ST_TO_ADDR
// end ;
22200: GO 22100
22202: POP
22203: POP
// for i = 1 to hardcoreCounter do
22204: LD_ADDR_VAR 0 8
22208: PUSH
22209: DOUBLE
22210: LD_INT 1
22212: DEC
22213: ST_TO_ADDR
22214: LD_EXP 54
22218: PUSH
22219: FOR_TO
22220: IFFALSE 22325
// begin tmp := 0 ;
22222: LD_ADDR_VAR 0 3
22226: PUSH
22227: LD_STRING 0
22229: ST_TO_ADDR
// if result [ 2 ] then
22230: LD_VAR 0 2
22234: PUSH
22235: LD_INT 2
22237: ARRAY
22238: IFFALSE 22307
// if result [ 2 ] [ 1 ] = 100 + i then
22240: LD_VAR 0 2
22244: PUSH
22245: LD_INT 2
22247: ARRAY
22248: PUSH
22249: LD_INT 1
22251: ARRAY
22252: PUSH
22253: LD_INT 100
22255: PUSH
22256: LD_VAR 0 8
22260: PLUS
22261: EQUAL
22262: IFFALSE 22307
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22264: LD_ADDR_VAR 0 2
22268: PUSH
22269: LD_VAR 0 2
22273: PPUSH
22274: LD_INT 2
22276: PPUSH
22277: LD_VAR 0 2
22281: PUSH
22282: LD_INT 2
22284: ARRAY
22285: PPUSH
22286: LD_INT 1
22288: PPUSH
22289: CALL_OW 3
22293: PPUSH
22294: CALL_OW 1
22298: ST_TO_ADDR
// tmp := 1 ;
22299: LD_ADDR_VAR 0 3
22303: PUSH
22304: LD_STRING 1
22306: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22307: LD_ADDR_VAR 0 6
22311: PUSH
22312: LD_VAR 0 6
22316: PUSH
22317: LD_VAR 0 3
22321: STR
22322: ST_TO_ADDR
// end ;
22323: GO 22219
22325: POP
22326: POP
// if isGameLoad then
22327: LD_VAR 0 1
22331: IFFALSE 22806
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22333: LD_ADDR_VAR 0 4
22337: PUSH
22338: LD_EXP 57
22342: PUSH
22343: LD_EXP 56
22347: PUSH
22348: LD_EXP 58
22352: PUSH
22353: LD_EXP 55
22357: PUSH
22358: LD_EXP 59
22362: PUSH
22363: LD_EXP 60
22367: PUSH
22368: LD_EXP 61
22372: PUSH
22373: LD_EXP 62
22377: PUSH
22378: LD_EXP 63
22382: PUSH
22383: LD_EXP 64
22387: PUSH
22388: LD_EXP 65
22392: PUSH
22393: LD_EXP 66
22397: PUSH
22398: LD_EXP 67
22402: PUSH
22403: LD_EXP 68
22407: PUSH
22408: LD_EXP 76
22412: PUSH
22413: LD_EXP 77
22417: PUSH
22418: LD_EXP 78
22422: PUSH
22423: LD_EXP 79
22427: PUSH
22428: LD_EXP 81
22432: PUSH
22433: LD_EXP 82
22437: PUSH
22438: LD_EXP 83
22442: PUSH
22443: LD_EXP 86
22447: PUSH
22448: LD_EXP 88
22452: PUSH
22453: LD_EXP 89
22457: PUSH
22458: LD_EXP 90
22462: PUSH
22463: LD_EXP 92
22467: PUSH
22468: LD_EXP 93
22472: PUSH
22473: LD_EXP 96
22477: PUSH
22478: LD_EXP 97
22482: PUSH
22483: LD_EXP 98
22487: PUSH
22488: LD_EXP 99
22492: PUSH
22493: LD_EXP 100
22497: PUSH
22498: LD_EXP 101
22502: PUSH
22503: LD_EXP 102
22507: PUSH
22508: LD_EXP 103
22512: PUSH
22513: LD_EXP 104
22517: PUSH
22518: LD_EXP 69
22522: PUSH
22523: LD_EXP 70
22527: PUSH
22528: LD_EXP 73
22532: PUSH
22533: LD_EXP 74
22537: PUSH
22538: LD_EXP 75
22542: PUSH
22543: LD_EXP 71
22547: PUSH
22548: LD_EXP 72
22552: PUSH
22553: LD_EXP 80
22557: PUSH
22558: LD_EXP 84
22562: PUSH
22563: LD_EXP 85
22567: PUSH
22568: LD_EXP 87
22572: PUSH
22573: LD_EXP 91
22577: PUSH
22578: LD_EXP 94
22582: PUSH
22583: LD_EXP 95
22587: PUSH
22588: LD_EXP 105
22592: PUSH
22593: LD_EXP 106
22597: PUSH
22598: LD_EXP 107
22602: PUSH
22603: LD_EXP 108
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: ST_TO_ADDR
// tmp :=  ;
22664: LD_ADDR_VAR 0 3
22668: PUSH
22669: LD_STRING 
22671: ST_TO_ADDR
// for i = 1 to normalCounter do
22672: LD_ADDR_VAR 0 8
22676: PUSH
22677: DOUBLE
22678: LD_INT 1
22680: DEC
22681: ST_TO_ADDR
22682: LD_EXP 53
22686: PUSH
22687: FOR_TO
22688: IFFALSE 22724
// begin if flags [ i ] then
22690: LD_VAR 0 4
22694: PUSH
22695: LD_VAR 0 8
22699: ARRAY
22700: IFFALSE 22722
// tmp := tmp & i & ; ;
22702: LD_ADDR_VAR 0 3
22706: PUSH
22707: LD_VAR 0 3
22711: PUSH
22712: LD_VAR 0 8
22716: STR
22717: PUSH
22718: LD_STRING ;
22720: STR
22721: ST_TO_ADDR
// end ;
22722: GO 22687
22724: POP
22725: POP
// for i = 1 to hardcoreCounter do
22726: LD_ADDR_VAR 0 8
22730: PUSH
22731: DOUBLE
22732: LD_INT 1
22734: DEC
22735: ST_TO_ADDR
22736: LD_EXP 54
22740: PUSH
22741: FOR_TO
22742: IFFALSE 22788
// begin if flags [ normalCounter + i ] then
22744: LD_VAR 0 4
22748: PUSH
22749: LD_EXP 53
22753: PUSH
22754: LD_VAR 0 8
22758: PLUS
22759: ARRAY
22760: IFFALSE 22786
// tmp := tmp & ( 100 + i ) & ; ;
22762: LD_ADDR_VAR 0 3
22766: PUSH
22767: LD_VAR 0 3
22771: PUSH
22772: LD_INT 100
22774: PUSH
22775: LD_VAR 0 8
22779: PLUS
22780: STR
22781: PUSH
22782: LD_STRING ;
22784: STR
22785: ST_TO_ADDR
// end ;
22786: GO 22741
22788: POP
22789: POP
// if tmp then
22790: LD_VAR 0 3
22794: IFFALSE 22806
// active := tmp ;
22796: LD_ADDR_VAR 0 7
22800: PUSH
22801: LD_VAR 0 3
22805: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22806: LD_STRING getStreamItemsFromMission("
22808: PUSH
22809: LD_VAR 0 5
22813: STR
22814: PUSH
22815: LD_STRING ","
22817: STR
22818: PUSH
22819: LD_VAR 0 6
22823: STR
22824: PUSH
22825: LD_STRING ","
22827: STR
22828: PUSH
22829: LD_VAR 0 7
22833: STR
22834: PUSH
22835: LD_STRING ")
22837: STR
22838: PPUSH
22839: CALL_OW 559
// end else
22843: GO 22852
// ToLua ( getStreamItemsFromMission("","","") ) ;
22845: LD_STRING getStreamItemsFromMission("","","")
22847: PPUSH
22848: CALL_OW 559
// end ;
22852: LD_VAR 0 2
22856: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22857: LD_EXP 52
22861: PUSH
22862: LD_EXP 57
22866: AND
22867: IFFALSE 22991
22869: GO 22871
22871: DISABLE
22872: LD_INT 0
22874: PPUSH
22875: PPUSH
// begin enable ;
22876: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22877: LD_ADDR_VAR 0 2
22881: PUSH
22882: LD_INT 22
22884: PUSH
22885: LD_OWVAR 2
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 34
22899: PUSH
22900: LD_INT 7
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 34
22909: PUSH
22910: LD_INT 45
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 34
22919: PUSH
22920: LD_INT 28
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 34
22929: PUSH
22930: LD_INT 47
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PPUSH
22948: CALL_OW 69
22952: ST_TO_ADDR
// if not tmp then
22953: LD_VAR 0 2
22957: NOT
22958: IFFALSE 22962
// exit ;
22960: GO 22991
// for i in tmp do
22962: LD_ADDR_VAR 0 1
22966: PUSH
22967: LD_VAR 0 2
22971: PUSH
22972: FOR_IN
22973: IFFALSE 22989
// begin SetLives ( i , 0 ) ;
22975: LD_VAR 0 1
22979: PPUSH
22980: LD_INT 0
22982: PPUSH
22983: CALL_OW 234
// end ;
22987: GO 22972
22989: POP
22990: POP
// end ;
22991: PPOPN 2
22993: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22994: LD_EXP 52
22998: PUSH
22999: LD_EXP 58
23003: AND
23004: IFFALSE 23088
23006: GO 23008
23008: DISABLE
23009: LD_INT 0
23011: PPUSH
23012: PPUSH
// begin enable ;
23013: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23014: LD_ADDR_VAR 0 2
23018: PUSH
23019: LD_INT 22
23021: PUSH
23022: LD_OWVAR 2
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 32
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PPUSH
23045: CALL_OW 69
23049: ST_TO_ADDR
// if not tmp then
23050: LD_VAR 0 2
23054: NOT
23055: IFFALSE 23059
// exit ;
23057: GO 23088
// for i in tmp do
23059: LD_ADDR_VAR 0 1
23063: PUSH
23064: LD_VAR 0 2
23068: PUSH
23069: FOR_IN
23070: IFFALSE 23086
// begin SetLives ( i , 0 ) ;
23072: LD_VAR 0 1
23076: PPUSH
23077: LD_INT 0
23079: PPUSH
23080: CALL_OW 234
// end ;
23084: GO 23069
23086: POP
23087: POP
// end ;
23088: PPOPN 2
23090: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23091: LD_EXP 52
23095: PUSH
23096: LD_EXP 55
23100: AND
23101: IFFALSE 23194
23103: GO 23105
23105: DISABLE
23106: LD_INT 0
23108: PPUSH
// begin enable ;
23109: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23110: LD_ADDR_VAR 0 1
23114: PUSH
23115: LD_INT 22
23117: PUSH
23118: LD_OWVAR 2
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 25
23132: PUSH
23133: LD_INT 5
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 25
23142: PUSH
23143: LD_INT 9
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 25
23152: PUSH
23153: LD_INT 8
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PPUSH
23170: CALL_OW 69
23174: PUSH
23175: FOR_IN
23176: IFFALSE 23192
// begin SetClass ( i , 1 ) ;
23178: LD_VAR 0 1
23182: PPUSH
23183: LD_INT 1
23185: PPUSH
23186: CALL_OW 336
// end ;
23190: GO 23175
23192: POP
23193: POP
// end ;
23194: PPOPN 1
23196: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23197: LD_EXP 52
23201: PUSH
23202: LD_EXP 56
23206: AND
23207: PUSH
23208: LD_OWVAR 65
23212: PUSH
23213: LD_INT 7
23215: LESS
23216: AND
23217: IFFALSE 23231
23219: GO 23221
23221: DISABLE
// begin enable ;
23222: ENABLE
// game_speed := 7 ;
23223: LD_ADDR_OWVAR 65
23227: PUSH
23228: LD_INT 7
23230: ST_TO_ADDR
// end ;
23231: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23232: LD_EXP 52
23236: PUSH
23237: LD_EXP 59
23241: AND
23242: IFFALSE 23444
23244: GO 23246
23246: DISABLE
23247: LD_INT 0
23249: PPUSH
23250: PPUSH
23251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23252: LD_ADDR_VAR 0 3
23256: PUSH
23257: LD_INT 81
23259: PUSH
23260: LD_OWVAR 2
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 21
23271: PUSH
23272: LD_INT 1
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PPUSH
23283: CALL_OW 69
23287: ST_TO_ADDR
// if not tmp then
23288: LD_VAR 0 3
23292: NOT
23293: IFFALSE 23297
// exit ;
23295: GO 23444
// if tmp > 5 then
23297: LD_VAR 0 3
23301: PUSH
23302: LD_INT 5
23304: GREATER
23305: IFFALSE 23317
// k := 5 else
23307: LD_ADDR_VAR 0 2
23311: PUSH
23312: LD_INT 5
23314: ST_TO_ADDR
23315: GO 23327
// k := tmp ;
23317: LD_ADDR_VAR 0 2
23321: PUSH
23322: LD_VAR 0 3
23326: ST_TO_ADDR
// for i := 1 to k do
23327: LD_ADDR_VAR 0 1
23331: PUSH
23332: DOUBLE
23333: LD_INT 1
23335: DEC
23336: ST_TO_ADDR
23337: LD_VAR 0 2
23341: PUSH
23342: FOR_TO
23343: IFFALSE 23442
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23345: LD_VAR 0 3
23349: PUSH
23350: LD_VAR 0 1
23354: ARRAY
23355: PPUSH
23356: LD_VAR 0 1
23360: PUSH
23361: LD_INT 4
23363: MOD
23364: PUSH
23365: LD_INT 1
23367: PLUS
23368: PPUSH
23369: CALL_OW 259
23373: PUSH
23374: LD_INT 10
23376: LESS
23377: IFFALSE 23440
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23379: LD_VAR 0 3
23383: PUSH
23384: LD_VAR 0 1
23388: ARRAY
23389: PPUSH
23390: LD_VAR 0 1
23394: PUSH
23395: LD_INT 4
23397: MOD
23398: PUSH
23399: LD_INT 1
23401: PLUS
23402: PPUSH
23403: LD_VAR 0 3
23407: PUSH
23408: LD_VAR 0 1
23412: ARRAY
23413: PPUSH
23414: LD_VAR 0 1
23418: PUSH
23419: LD_INT 4
23421: MOD
23422: PUSH
23423: LD_INT 1
23425: PLUS
23426: PPUSH
23427: CALL_OW 259
23431: PUSH
23432: LD_INT 1
23434: PLUS
23435: PPUSH
23436: CALL_OW 237
23440: GO 23342
23442: POP
23443: POP
// end ;
23444: PPOPN 3
23446: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23447: LD_EXP 52
23451: PUSH
23452: LD_EXP 60
23456: AND
23457: IFFALSE 23477
23459: GO 23461
23461: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23462: LD_INT 4
23464: PPUSH
23465: LD_OWVAR 2
23469: PPUSH
23470: LD_INT 0
23472: PPUSH
23473: CALL_OW 324
23477: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23478: LD_EXP 52
23482: PUSH
23483: LD_EXP 89
23487: AND
23488: IFFALSE 23508
23490: GO 23492
23492: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23493: LD_INT 19
23495: PPUSH
23496: LD_OWVAR 2
23500: PPUSH
23501: LD_INT 0
23503: PPUSH
23504: CALL_OW 324
23508: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23509: LD_EXP 52
23513: PUSH
23514: LD_EXP 61
23518: AND
23519: IFFALSE 23621
23521: GO 23523
23523: DISABLE
23524: LD_INT 0
23526: PPUSH
23527: PPUSH
// begin enable ;
23528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23529: LD_ADDR_VAR 0 2
23533: PUSH
23534: LD_INT 22
23536: PUSH
23537: LD_OWVAR 2
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 34
23551: PUSH
23552: LD_INT 11
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 34
23561: PUSH
23562: LD_INT 30
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PPUSH
23578: CALL_OW 69
23582: ST_TO_ADDR
// if not tmp then
23583: LD_VAR 0 2
23587: NOT
23588: IFFALSE 23592
// exit ;
23590: GO 23621
// for i in tmp do
23592: LD_ADDR_VAR 0 1
23596: PUSH
23597: LD_VAR 0 2
23601: PUSH
23602: FOR_IN
23603: IFFALSE 23619
// begin SetLives ( i , 0 ) ;
23605: LD_VAR 0 1
23609: PPUSH
23610: LD_INT 0
23612: PPUSH
23613: CALL_OW 234
// end ;
23617: GO 23602
23619: POP
23620: POP
// end ;
23621: PPOPN 2
23623: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23624: LD_EXP 52
23628: PUSH
23629: LD_EXP 62
23633: AND
23634: IFFALSE 23654
23636: GO 23638
23638: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23639: LD_INT 32
23641: PPUSH
23642: LD_OWVAR 2
23646: PPUSH
23647: LD_INT 0
23649: PPUSH
23650: CALL_OW 324
23654: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23655: LD_EXP 52
23659: PUSH
23660: LD_EXP 63
23664: AND
23665: IFFALSE 23846
23667: GO 23669
23669: DISABLE
23670: LD_INT 0
23672: PPUSH
23673: PPUSH
23674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23675: LD_ADDR_VAR 0 2
23679: PUSH
23680: LD_INT 22
23682: PUSH
23683: LD_OWVAR 2
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 33
23694: PUSH
23695: LD_INT 3
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PPUSH
23706: CALL_OW 69
23710: ST_TO_ADDR
// if not tmp then
23711: LD_VAR 0 2
23715: NOT
23716: IFFALSE 23720
// exit ;
23718: GO 23846
// side := 0 ;
23720: LD_ADDR_VAR 0 3
23724: PUSH
23725: LD_INT 0
23727: ST_TO_ADDR
// for i := 1 to 8 do
23728: LD_ADDR_VAR 0 1
23732: PUSH
23733: DOUBLE
23734: LD_INT 1
23736: DEC
23737: ST_TO_ADDR
23738: LD_INT 8
23740: PUSH
23741: FOR_TO
23742: IFFALSE 23790
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23744: LD_OWVAR 2
23748: PUSH
23749: LD_VAR 0 1
23753: NONEQUAL
23754: PUSH
23755: LD_OWVAR 2
23759: PPUSH
23760: LD_VAR 0 1
23764: PPUSH
23765: CALL_OW 81
23769: PUSH
23770: LD_INT 2
23772: EQUAL
23773: AND
23774: IFFALSE 23788
// begin side := i ;
23776: LD_ADDR_VAR 0 3
23780: PUSH
23781: LD_VAR 0 1
23785: ST_TO_ADDR
// break ;
23786: GO 23790
// end ;
23788: GO 23741
23790: POP
23791: POP
// if not side then
23792: LD_VAR 0 3
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23846
// for i := 1 to tmp do
23801: LD_ADDR_VAR 0 1
23805: PUSH
23806: DOUBLE
23807: LD_INT 1
23809: DEC
23810: ST_TO_ADDR
23811: LD_VAR 0 2
23815: PUSH
23816: FOR_TO
23817: IFFALSE 23844
// if Prob ( 60 ) then
23819: LD_INT 60
23821: PPUSH
23822: CALL_OW 13
23826: IFFALSE 23842
// SetSide ( i , side ) ;
23828: LD_VAR 0 1
23832: PPUSH
23833: LD_VAR 0 3
23837: PPUSH
23838: CALL_OW 235
23842: GO 23816
23844: POP
23845: POP
// end ;
23846: PPOPN 3
23848: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23849: LD_EXP 52
23853: PUSH
23854: LD_EXP 65
23858: AND
23859: IFFALSE 23978
23861: GO 23863
23863: DISABLE
23864: LD_INT 0
23866: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23867: LD_ADDR_VAR 0 1
23871: PUSH
23872: LD_INT 22
23874: PUSH
23875: LD_OWVAR 2
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 21
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 3
23896: PUSH
23897: LD_INT 23
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: LIST
23915: PPUSH
23916: CALL_OW 69
23920: PUSH
23921: FOR_IN
23922: IFFALSE 23976
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23924: LD_VAR 0 1
23928: PPUSH
23929: CALL_OW 257
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: LD_INT 3
23942: PUSH
23943: LD_INT 4
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: IN
23952: IFFALSE 23974
// SetClass ( un , rand ( 1 , 4 ) ) ;
23954: LD_VAR 0 1
23958: PPUSH
23959: LD_INT 1
23961: PPUSH
23962: LD_INT 4
23964: PPUSH
23965: CALL_OW 12
23969: PPUSH
23970: CALL_OW 336
23974: GO 23921
23976: POP
23977: POP
// end ;
23978: PPOPN 1
23980: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23981: LD_EXP 52
23985: PUSH
23986: LD_EXP 64
23990: AND
23991: IFFALSE 24070
23993: GO 23995
23995: DISABLE
23996: LD_INT 0
23998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23999: LD_ADDR_VAR 0 1
24003: PUSH
24004: LD_INT 22
24006: PUSH
24007: LD_OWVAR 2
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 21
24018: PUSH
24019: LD_INT 3
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 69
24034: ST_TO_ADDR
// if not tmp then
24035: LD_VAR 0 1
24039: NOT
24040: IFFALSE 24044
// exit ;
24042: GO 24070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24044: LD_VAR 0 1
24048: PUSH
24049: LD_INT 1
24051: PPUSH
24052: LD_VAR 0 1
24056: PPUSH
24057: CALL_OW 12
24061: ARRAY
24062: PPUSH
24063: LD_INT 100
24065: PPUSH
24066: CALL_OW 234
// end ;
24070: PPOPN 1
24072: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24073: LD_EXP 52
24077: PUSH
24078: LD_EXP 66
24082: AND
24083: IFFALSE 24181
24085: GO 24087
24087: DISABLE
24088: LD_INT 0
24090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24091: LD_ADDR_VAR 0 1
24095: PUSH
24096: LD_INT 22
24098: PUSH
24099: LD_OWVAR 2
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 21
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PPUSH
24122: CALL_OW 69
24126: ST_TO_ADDR
// if not tmp then
24127: LD_VAR 0 1
24131: NOT
24132: IFFALSE 24136
// exit ;
24134: GO 24181
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24136: LD_VAR 0 1
24140: PUSH
24141: LD_INT 1
24143: PPUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 12
24153: ARRAY
24154: PPUSH
24155: LD_INT 1
24157: PPUSH
24158: LD_INT 4
24160: PPUSH
24161: CALL_OW 12
24165: PPUSH
24166: LD_INT 3000
24168: PPUSH
24169: LD_INT 9000
24171: PPUSH
24172: CALL_OW 12
24176: PPUSH
24177: CALL_OW 492
// end ;
24181: PPOPN 1
24183: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24184: LD_EXP 52
24188: PUSH
24189: LD_EXP 67
24193: AND
24194: IFFALSE 24214
24196: GO 24198
24198: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24199: LD_INT 1
24201: PPUSH
24202: LD_OWVAR 2
24206: PPUSH
24207: LD_INT 0
24209: PPUSH
24210: CALL_OW 324
24214: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24215: LD_EXP 52
24219: PUSH
24220: LD_EXP 68
24224: AND
24225: IFFALSE 24308
24227: GO 24229
24229: DISABLE
24230: LD_INT 0
24232: PPUSH
24233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_INT 22
24241: PUSH
24242: LD_OWVAR 2
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 21
24253: PUSH
24254: LD_INT 3
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 69
24269: ST_TO_ADDR
// if not tmp then
24270: LD_VAR 0 2
24274: NOT
24275: IFFALSE 24279
// exit ;
24277: GO 24308
// for i in tmp do
24279: LD_ADDR_VAR 0 1
24283: PUSH
24284: LD_VAR 0 2
24288: PUSH
24289: FOR_IN
24290: IFFALSE 24306
// SetBLevel ( i , 10 ) ;
24292: LD_VAR 0 1
24296: PPUSH
24297: LD_INT 10
24299: PPUSH
24300: CALL_OW 241
24304: GO 24289
24306: POP
24307: POP
// end ;
24308: PPOPN 2
24310: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24311: LD_EXP 52
24315: PUSH
24316: LD_EXP 69
24320: AND
24321: IFFALSE 24432
24323: GO 24325
24325: DISABLE
24326: LD_INT 0
24328: PPUSH
24329: PPUSH
24330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24331: LD_ADDR_VAR 0 3
24335: PUSH
24336: LD_INT 22
24338: PUSH
24339: LD_OWVAR 2
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 25
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PPUSH
24362: CALL_OW 69
24366: ST_TO_ADDR
// if not tmp then
24367: LD_VAR 0 3
24371: NOT
24372: IFFALSE 24376
// exit ;
24374: GO 24432
// un := tmp [ rand ( 1 , tmp ) ] ;
24376: LD_ADDR_VAR 0 2
24380: PUSH
24381: LD_VAR 0 3
24385: PUSH
24386: LD_INT 1
24388: PPUSH
24389: LD_VAR 0 3
24393: PPUSH
24394: CALL_OW 12
24398: ARRAY
24399: ST_TO_ADDR
// if Crawls ( un ) then
24400: LD_VAR 0 2
24404: PPUSH
24405: CALL_OW 318
24409: IFFALSE 24420
// ComWalk ( un ) ;
24411: LD_VAR 0 2
24415: PPUSH
24416: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24420: LD_VAR 0 2
24424: PPUSH
24425: LD_INT 5
24427: PPUSH
24428: CALL_OW 336
// end ;
24432: PPOPN 3
24434: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24435: LD_EXP 52
24439: PUSH
24440: LD_EXP 70
24444: AND
24445: PUSH
24446: LD_OWVAR 67
24450: PUSH
24451: LD_INT 4
24453: LESS
24454: AND
24455: IFFALSE 24474
24457: GO 24459
24459: DISABLE
// begin Difficulty := Difficulty + 1 ;
24460: LD_ADDR_OWVAR 67
24464: PUSH
24465: LD_OWVAR 67
24469: PUSH
24470: LD_INT 1
24472: PLUS
24473: ST_TO_ADDR
// end ;
24474: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24475: LD_EXP 52
24479: PUSH
24480: LD_EXP 71
24484: AND
24485: IFFALSE 24588
24487: GO 24489
24489: DISABLE
24490: LD_INT 0
24492: PPUSH
// begin for i := 1 to 5 do
24493: LD_ADDR_VAR 0 1
24497: PUSH
24498: DOUBLE
24499: LD_INT 1
24501: DEC
24502: ST_TO_ADDR
24503: LD_INT 5
24505: PUSH
24506: FOR_TO
24507: IFFALSE 24586
// begin uc_nation := nation_nature ;
24509: LD_ADDR_OWVAR 21
24513: PUSH
24514: LD_INT 0
24516: ST_TO_ADDR
// uc_side := 0 ;
24517: LD_ADDR_OWVAR 20
24521: PUSH
24522: LD_INT 0
24524: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24525: LD_ADDR_OWVAR 29
24529: PUSH
24530: LD_INT 12
24532: PUSH
24533: LD_INT 12
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: ST_TO_ADDR
// hc_agressivity := 20 ;
24540: LD_ADDR_OWVAR 35
24544: PUSH
24545: LD_INT 20
24547: ST_TO_ADDR
// hc_class := class_tiger ;
24548: LD_ADDR_OWVAR 28
24552: PUSH
24553: LD_INT 14
24555: ST_TO_ADDR
// hc_gallery :=  ;
24556: LD_ADDR_OWVAR 33
24560: PUSH
24561: LD_STRING 
24563: ST_TO_ADDR
// hc_name :=  ;
24564: LD_ADDR_OWVAR 26
24568: PUSH
24569: LD_STRING 
24571: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24572: CALL_OW 44
24576: PPUSH
24577: LD_INT 0
24579: PPUSH
24580: CALL_OW 51
// end ;
24584: GO 24506
24586: POP
24587: POP
// end ;
24588: PPOPN 1
24590: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24591: LD_EXP 52
24595: PUSH
24596: LD_EXP 72
24600: AND
24601: IFFALSE 24610
24603: GO 24605
24605: DISABLE
// StreamSibBomb ;
24606: CALL 24611 0 0
24610: END
// export function StreamSibBomb ; var i , x , y ; begin
24611: LD_INT 0
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
// result := false ;
24617: LD_ADDR_VAR 0 1
24621: PUSH
24622: LD_INT 0
24624: ST_TO_ADDR
// for i := 1 to 16 do
24625: LD_ADDR_VAR 0 2
24629: PUSH
24630: DOUBLE
24631: LD_INT 1
24633: DEC
24634: ST_TO_ADDR
24635: LD_INT 16
24637: PUSH
24638: FOR_TO
24639: IFFALSE 24838
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: LD_INT 10
24648: PUSH
24649: LD_INT 20
24651: PUSH
24652: LD_INT 30
24654: PUSH
24655: LD_INT 40
24657: PUSH
24658: LD_INT 50
24660: PUSH
24661: LD_INT 60
24663: PUSH
24664: LD_INT 70
24666: PUSH
24667: LD_INT 80
24669: PUSH
24670: LD_INT 90
24672: PUSH
24673: LD_INT 100
24675: PUSH
24676: LD_INT 110
24678: PUSH
24679: LD_INT 120
24681: PUSH
24682: LD_INT 130
24684: PUSH
24685: LD_INT 140
24687: PUSH
24688: LD_INT 150
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: PPUSH
24711: LD_INT 15
24713: PPUSH
24714: CALL_OW 12
24718: ARRAY
24719: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24720: LD_ADDR_VAR 0 4
24724: PUSH
24725: LD_INT 10
24727: PUSH
24728: LD_INT 20
24730: PUSH
24731: LD_INT 30
24733: PUSH
24734: LD_INT 40
24736: PUSH
24737: LD_INT 50
24739: PUSH
24740: LD_INT 60
24742: PUSH
24743: LD_INT 70
24745: PUSH
24746: LD_INT 80
24748: PUSH
24749: LD_INT 90
24751: PUSH
24752: LD_INT 100
24754: PUSH
24755: LD_INT 110
24757: PUSH
24758: LD_INT 120
24760: PUSH
24761: LD_INT 130
24763: PUSH
24764: LD_INT 140
24766: PUSH
24767: LD_INT 150
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: PPUSH
24790: LD_INT 15
24792: PPUSH
24793: CALL_OW 12
24797: ARRAY
24798: ST_TO_ADDR
// if ValidHex ( x , y ) then
24799: LD_VAR 0 3
24803: PPUSH
24804: LD_VAR 0 4
24808: PPUSH
24809: CALL_OW 488
24813: IFFALSE 24836
// begin result := [ x , y ] ;
24815: LD_ADDR_VAR 0 1
24819: PUSH
24820: LD_VAR 0 3
24824: PUSH
24825: LD_VAR 0 4
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: ST_TO_ADDR
// break ;
24834: GO 24838
// end ; end ;
24836: GO 24638
24838: POP
24839: POP
// if result then
24840: LD_VAR 0 1
24844: IFFALSE 24904
// begin ToLua ( playSibBomb() ) ;
24846: LD_STRING playSibBomb()
24848: PPUSH
24849: CALL_OW 559
// wait ( 0 0$14 ) ;
24853: LD_INT 490
24855: PPUSH
24856: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24860: LD_VAR 0 1
24864: PUSH
24865: LD_INT 1
24867: ARRAY
24868: PPUSH
24869: LD_VAR 0 1
24873: PUSH
24874: LD_INT 2
24876: ARRAY
24877: PPUSH
24878: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24882: LD_VAR 0 1
24886: PUSH
24887: LD_INT 1
24889: ARRAY
24890: PPUSH
24891: LD_VAR 0 1
24895: PUSH
24896: LD_INT 2
24898: ARRAY
24899: PPUSH
24900: CALL_OW 429
// end ; end ;
24904: LD_VAR 0 1
24908: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24909: LD_EXP 52
24913: PUSH
24914: LD_EXP 74
24918: AND
24919: IFFALSE 24931
24921: GO 24923
24923: DISABLE
// YouLost (  ) ;
24924: LD_STRING 
24926: PPUSH
24927: CALL_OW 104
24931: END
// every 0 0$1 trigger StreamModeActive and sFog do
24932: LD_EXP 52
24936: PUSH
24937: LD_EXP 73
24941: AND
24942: IFFALSE 24956
24944: GO 24946
24946: DISABLE
// FogOff ( your_side ) ;
24947: LD_OWVAR 2
24951: PPUSH
24952: CALL_OW 344
24956: END
// every 0 0$1 trigger StreamModeActive and sSun do
24957: LD_EXP 52
24961: PUSH
24962: LD_EXP 75
24966: AND
24967: IFFALSE 24995
24969: GO 24971
24971: DISABLE
// begin solar_recharge_percent := 0 ;
24972: LD_ADDR_OWVAR 79
24976: PUSH
24977: LD_INT 0
24979: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24980: LD_INT 10500
24982: PPUSH
24983: CALL_OW 67
// solar_recharge_percent := 100 ;
24987: LD_ADDR_OWVAR 79
24991: PUSH
24992: LD_INT 100
24994: ST_TO_ADDR
// end ;
24995: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24996: LD_EXP 52
25000: PUSH
25001: LD_EXP 76
25005: AND
25006: IFFALSE 25245
25008: GO 25010
25010: DISABLE
25011: LD_INT 0
25013: PPUSH
25014: PPUSH
25015: PPUSH
// begin tmp := [ ] ;
25016: LD_ADDR_VAR 0 3
25020: PUSH
25021: EMPTY
25022: ST_TO_ADDR
// for i := 1 to 6 do
25023: LD_ADDR_VAR 0 1
25027: PUSH
25028: DOUBLE
25029: LD_INT 1
25031: DEC
25032: ST_TO_ADDR
25033: LD_INT 6
25035: PUSH
25036: FOR_TO
25037: IFFALSE 25142
// begin uc_nation := nation_nature ;
25039: LD_ADDR_OWVAR 21
25043: PUSH
25044: LD_INT 0
25046: ST_TO_ADDR
// uc_side := 0 ;
25047: LD_ADDR_OWVAR 20
25051: PUSH
25052: LD_INT 0
25054: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25055: LD_ADDR_OWVAR 29
25059: PUSH
25060: LD_INT 12
25062: PUSH
25063: LD_INT 12
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: ST_TO_ADDR
// hc_agressivity := 20 ;
25070: LD_ADDR_OWVAR 35
25074: PUSH
25075: LD_INT 20
25077: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25078: LD_ADDR_OWVAR 28
25082: PUSH
25083: LD_INT 17
25085: ST_TO_ADDR
// hc_gallery :=  ;
25086: LD_ADDR_OWVAR 33
25090: PUSH
25091: LD_STRING 
25093: ST_TO_ADDR
// hc_name :=  ;
25094: LD_ADDR_OWVAR 26
25098: PUSH
25099: LD_STRING 
25101: ST_TO_ADDR
// un := CreateHuman ;
25102: LD_ADDR_VAR 0 2
25106: PUSH
25107: CALL_OW 44
25111: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25112: LD_VAR 0 2
25116: PPUSH
25117: LD_INT 1
25119: PPUSH
25120: CALL_OW 51
// tmp := tmp ^ un ;
25124: LD_ADDR_VAR 0 3
25128: PUSH
25129: LD_VAR 0 3
25133: PUSH
25134: LD_VAR 0 2
25138: ADD
25139: ST_TO_ADDR
// end ;
25140: GO 25036
25142: POP
25143: POP
// repeat wait ( 0 0$1 ) ;
25144: LD_INT 35
25146: PPUSH
25147: CALL_OW 67
// for un in tmp do
25151: LD_ADDR_VAR 0 2
25155: PUSH
25156: LD_VAR 0 3
25160: PUSH
25161: FOR_IN
25162: IFFALSE 25236
// begin if IsDead ( un ) then
25164: LD_VAR 0 2
25168: PPUSH
25169: CALL_OW 301
25173: IFFALSE 25193
// begin tmp := tmp diff un ;
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_VAR 0 3
25184: PUSH
25185: LD_VAR 0 2
25189: DIFF
25190: ST_TO_ADDR
// continue ;
25191: GO 25161
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25193: LD_VAR 0 2
25197: PPUSH
25198: LD_INT 3
25200: PUSH
25201: LD_INT 22
25203: PUSH
25204: LD_INT 0
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PPUSH
25215: CALL_OW 69
25219: PPUSH
25220: LD_VAR 0 2
25224: PPUSH
25225: CALL_OW 74
25229: PPUSH
25230: CALL_OW 115
// end ;
25234: GO 25161
25236: POP
25237: POP
// until not tmp ;
25238: LD_VAR 0 3
25242: NOT
25243: IFFALSE 25144
// end ;
25245: PPOPN 3
25247: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25248: LD_EXP 52
25252: PUSH
25253: LD_EXP 77
25257: AND
25258: IFFALSE 25312
25260: GO 25262
25262: DISABLE
// begin ToLua ( displayTroll(); ) ;
25263: LD_STRING displayTroll();
25265: PPUSH
25266: CALL_OW 559
// wait ( 3 3$00 ) ;
25270: LD_INT 6300
25272: PPUSH
25273: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25277: LD_STRING hideTroll();
25279: PPUSH
25280: CALL_OW 559
// wait ( 1 1$00 ) ;
25284: LD_INT 2100
25286: PPUSH
25287: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25291: LD_STRING displayTroll();
25293: PPUSH
25294: CALL_OW 559
// wait ( 1 1$00 ) ;
25298: LD_INT 2100
25300: PPUSH
25301: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25305: LD_STRING hideTroll();
25307: PPUSH
25308: CALL_OW 559
// end ;
25312: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25313: LD_EXP 52
25317: PUSH
25318: LD_EXP 78
25322: AND
25323: IFFALSE 25386
25325: GO 25327
25327: DISABLE
25328: LD_INT 0
25330: PPUSH
// begin p := 0 ;
25331: LD_ADDR_VAR 0 1
25335: PUSH
25336: LD_INT 0
25338: ST_TO_ADDR
// repeat game_speed := 1 ;
25339: LD_ADDR_OWVAR 65
25343: PUSH
25344: LD_INT 1
25346: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25347: LD_INT 35
25349: PPUSH
25350: CALL_OW 67
// p := p + 1 ;
25354: LD_ADDR_VAR 0 1
25358: PUSH
25359: LD_VAR 0 1
25363: PUSH
25364: LD_INT 1
25366: PLUS
25367: ST_TO_ADDR
// until p >= 60 ;
25368: LD_VAR 0 1
25372: PUSH
25373: LD_INT 60
25375: GREATEREQUAL
25376: IFFALSE 25339
// game_speed := 4 ;
25378: LD_ADDR_OWVAR 65
25382: PUSH
25383: LD_INT 4
25385: ST_TO_ADDR
// end ;
25386: PPOPN 1
25388: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25389: LD_EXP 52
25393: PUSH
25394: LD_EXP 79
25398: AND
25399: IFFALSE 25545
25401: GO 25403
25403: DISABLE
25404: LD_INT 0
25406: PPUSH
25407: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25408: LD_ADDR_VAR 0 1
25412: PUSH
25413: LD_INT 22
25415: PUSH
25416: LD_OWVAR 2
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: LD_INT 30
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 30
25440: PUSH
25441: LD_INT 1
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PPUSH
25457: CALL_OW 69
25461: ST_TO_ADDR
// if not depot then
25462: LD_VAR 0 1
25466: NOT
25467: IFFALSE 25471
// exit ;
25469: GO 25545
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25471: LD_ADDR_VAR 0 2
25475: PUSH
25476: LD_VAR 0 1
25480: PUSH
25481: LD_INT 1
25483: PPUSH
25484: LD_VAR 0 1
25488: PPUSH
25489: CALL_OW 12
25493: ARRAY
25494: PPUSH
25495: CALL_OW 274
25499: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25500: LD_VAR 0 2
25504: PPUSH
25505: LD_INT 1
25507: PPUSH
25508: LD_INT 0
25510: PPUSH
25511: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25515: LD_VAR 0 2
25519: PPUSH
25520: LD_INT 2
25522: PPUSH
25523: LD_INT 0
25525: PPUSH
25526: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25530: LD_VAR 0 2
25534: PPUSH
25535: LD_INT 3
25537: PPUSH
25538: LD_INT 0
25540: PPUSH
25541: CALL_OW 277
// end ;
25545: PPOPN 2
25547: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25548: LD_EXP 52
25552: PUSH
25553: LD_EXP 80
25557: AND
25558: IFFALSE 25655
25560: GO 25562
25562: DISABLE
25563: LD_INT 0
25565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25566: LD_ADDR_VAR 0 1
25570: PUSH
25571: LD_INT 22
25573: PUSH
25574: LD_OWVAR 2
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 21
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 3
25595: PUSH
25596: LD_INT 23
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: PPUSH
25615: CALL_OW 69
25619: ST_TO_ADDR
// if not tmp then
25620: LD_VAR 0 1
25624: NOT
25625: IFFALSE 25629
// exit ;
25627: GO 25655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 1
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 12
25646: ARRAY
25647: PPUSH
25648: LD_INT 200
25650: PPUSH
25651: CALL_OW 234
// end ;
25655: PPOPN 1
25657: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25658: LD_EXP 52
25662: PUSH
25663: LD_EXP 81
25667: AND
25668: IFFALSE 25747
25670: GO 25672
25672: DISABLE
25673: LD_INT 0
25675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25676: LD_ADDR_VAR 0 1
25680: PUSH
25681: LD_INT 22
25683: PUSH
25684: LD_OWVAR 2
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 21
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PPUSH
25707: CALL_OW 69
25711: ST_TO_ADDR
// if not tmp then
25712: LD_VAR 0 1
25716: NOT
25717: IFFALSE 25721
// exit ;
25719: GO 25747
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25721: LD_VAR 0 1
25725: PUSH
25726: LD_INT 1
25728: PPUSH
25729: LD_VAR 0 1
25733: PPUSH
25734: CALL_OW 12
25738: ARRAY
25739: PPUSH
25740: LD_INT 60
25742: PPUSH
25743: CALL_OW 234
// end ;
25747: PPOPN 1
25749: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25750: LD_EXP 52
25754: PUSH
25755: LD_EXP 82
25759: AND
25760: IFFALSE 25859
25762: GO 25764
25764: DISABLE
25765: LD_INT 0
25767: PPUSH
25768: PPUSH
// begin enable ;
25769: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25770: LD_ADDR_VAR 0 1
25774: PUSH
25775: LD_INT 22
25777: PUSH
25778: LD_OWVAR 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 61
25789: PUSH
25790: EMPTY
25791: LIST
25792: PUSH
25793: LD_INT 33
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: LIST
25807: PPUSH
25808: CALL_OW 69
25812: ST_TO_ADDR
// if not tmp then
25813: LD_VAR 0 1
25817: NOT
25818: IFFALSE 25822
// exit ;
25820: GO 25859
// for i in tmp do
25822: LD_ADDR_VAR 0 2
25826: PUSH
25827: LD_VAR 0 1
25831: PUSH
25832: FOR_IN
25833: IFFALSE 25857
// if IsControledBy ( i ) then
25835: LD_VAR 0 2
25839: PPUSH
25840: CALL_OW 312
25844: IFFALSE 25855
// ComUnlink ( i ) ;
25846: LD_VAR 0 2
25850: PPUSH
25851: CALL_OW 136
25855: GO 25832
25857: POP
25858: POP
// end ;
25859: PPOPN 2
25861: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25862: LD_EXP 52
25866: PUSH
25867: LD_EXP 83
25871: AND
25872: IFFALSE 26012
25874: GO 25876
25876: DISABLE
25877: LD_INT 0
25879: PPUSH
25880: PPUSH
// begin ToLua ( displayPowell(); ) ;
25881: LD_STRING displayPowell();
25883: PPUSH
25884: CALL_OW 559
// uc_side := 0 ;
25888: LD_ADDR_OWVAR 20
25892: PUSH
25893: LD_INT 0
25895: ST_TO_ADDR
// uc_nation := 2 ;
25896: LD_ADDR_OWVAR 21
25900: PUSH
25901: LD_INT 2
25903: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25904: LD_ADDR_OWVAR 37
25908: PUSH
25909: LD_INT 14
25911: ST_TO_ADDR
// vc_engine := engine_siberite ;
25912: LD_ADDR_OWVAR 39
25916: PUSH
25917: LD_INT 3
25919: ST_TO_ADDR
// vc_control := control_apeman ;
25920: LD_ADDR_OWVAR 38
25924: PUSH
25925: LD_INT 5
25927: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25928: LD_ADDR_OWVAR 40
25932: PUSH
25933: LD_INT 29
25935: ST_TO_ADDR
// un := CreateVehicle ;
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: CALL_OW 45
25945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25946: LD_VAR 0 2
25950: PPUSH
25951: LD_INT 1
25953: PPUSH
25954: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25958: LD_INT 35
25960: PPUSH
25961: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_INT 22
25972: PUSH
25973: LD_OWVAR 2
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PPUSH
25982: CALL_OW 69
25986: PPUSH
25987: LD_VAR 0 2
25991: PPUSH
25992: CALL_OW 74
25996: PPUSH
25997: CALL_OW 115
// until IsDead ( un ) ;
26001: LD_VAR 0 2
26005: PPUSH
26006: CALL_OW 301
26010: IFFALSE 25958
// end ;
26012: PPOPN 2
26014: END
// every 0 0$1 trigger StreamModeActive and sStu do
26015: LD_EXP 52
26019: PUSH
26020: LD_EXP 91
26024: AND
26025: IFFALSE 26041
26027: GO 26029
26029: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26030: LD_STRING displayStucuk();
26032: PPUSH
26033: CALL_OW 559
// ResetFog ;
26037: CALL_OW 335
// end ;
26041: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26042: LD_EXP 52
26046: PUSH
26047: LD_EXP 84
26051: AND
26052: IFFALSE 26193
26054: GO 26056
26056: DISABLE
26057: LD_INT 0
26059: PPUSH
26060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26061: LD_ADDR_VAR 0 2
26065: PUSH
26066: LD_INT 22
26068: PUSH
26069: LD_OWVAR 2
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 21
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PPUSH
26092: CALL_OW 69
26096: ST_TO_ADDR
// if not tmp then
26097: LD_VAR 0 2
26101: NOT
26102: IFFALSE 26106
// exit ;
26104: GO 26193
// un := tmp [ rand ( 1 , tmp ) ] ;
26106: LD_ADDR_VAR 0 1
26110: PUSH
26111: LD_VAR 0 2
26115: PUSH
26116: LD_INT 1
26118: PPUSH
26119: LD_VAR 0 2
26123: PPUSH
26124: CALL_OW 12
26128: ARRAY
26129: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26130: LD_VAR 0 1
26134: PPUSH
26135: LD_INT 0
26137: PPUSH
26138: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26142: LD_VAR 0 1
26146: PPUSH
26147: LD_OWVAR 3
26151: PUSH
26152: LD_VAR 0 1
26156: DIFF
26157: PPUSH
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 74
26167: PPUSH
26168: CALL_OW 115
// wait ( 0 0$20 ) ;
26172: LD_INT 700
26174: PPUSH
26175: CALL_OW 67
// SetSide ( un , your_side ) ;
26179: LD_VAR 0 1
26183: PPUSH
26184: LD_OWVAR 2
26188: PPUSH
26189: CALL_OW 235
// end ;
26193: PPOPN 2
26195: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26196: LD_EXP 52
26200: PUSH
26201: LD_EXP 85
26205: AND
26206: IFFALSE 26312
26208: GO 26210
26210: DISABLE
26211: LD_INT 0
26213: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26214: LD_ADDR_VAR 0 1
26218: PUSH
26219: LD_INT 22
26221: PUSH
26222: LD_OWVAR 2
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: LD_INT 30
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 30
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: ST_TO_ADDR
// if not depot then
26268: LD_VAR 0 1
26272: NOT
26273: IFFALSE 26277
// exit ;
26275: GO 26312
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26277: LD_VAR 0 1
26281: PUSH
26282: LD_INT 1
26284: ARRAY
26285: PPUSH
26286: CALL_OW 250
26290: PPUSH
26291: LD_VAR 0 1
26295: PUSH
26296: LD_INT 1
26298: ARRAY
26299: PPUSH
26300: CALL_OW 251
26304: PPUSH
26305: LD_INT 70
26307: PPUSH
26308: CALL_OW 495
// end ;
26312: PPOPN 1
26314: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26315: LD_EXP 52
26319: PUSH
26320: LD_EXP 86
26324: AND
26325: IFFALSE 26536
26327: GO 26329
26329: DISABLE
26330: LD_INT 0
26332: PPUSH
26333: PPUSH
26334: PPUSH
26335: PPUSH
26336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26337: LD_ADDR_VAR 0 5
26341: PUSH
26342: LD_INT 22
26344: PUSH
26345: LD_OWVAR 2
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 21
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PPUSH
26368: CALL_OW 69
26372: ST_TO_ADDR
// if not tmp then
26373: LD_VAR 0 5
26377: NOT
26378: IFFALSE 26382
// exit ;
26380: GO 26536
// for i in tmp do
26382: LD_ADDR_VAR 0 1
26386: PUSH
26387: LD_VAR 0 5
26391: PUSH
26392: FOR_IN
26393: IFFALSE 26534
// begin d := rand ( 0 , 5 ) ;
26395: LD_ADDR_VAR 0 4
26399: PUSH
26400: LD_INT 0
26402: PPUSH
26403: LD_INT 5
26405: PPUSH
26406: CALL_OW 12
26410: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26411: LD_ADDR_VAR 0 2
26415: PUSH
26416: LD_VAR 0 1
26420: PPUSH
26421: CALL_OW 250
26425: PPUSH
26426: LD_VAR 0 4
26430: PPUSH
26431: LD_INT 3
26433: PPUSH
26434: LD_INT 12
26436: PPUSH
26437: CALL_OW 12
26441: PPUSH
26442: CALL_OW 272
26446: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26447: LD_ADDR_VAR 0 3
26451: PUSH
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL_OW 251
26461: PPUSH
26462: LD_VAR 0 4
26466: PPUSH
26467: LD_INT 3
26469: PPUSH
26470: LD_INT 12
26472: PPUSH
26473: CALL_OW 12
26477: PPUSH
26478: CALL_OW 273
26482: ST_TO_ADDR
// if ValidHex ( x , y ) then
26483: LD_VAR 0 2
26487: PPUSH
26488: LD_VAR 0 3
26492: PPUSH
26493: CALL_OW 488
26497: IFFALSE 26532
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26499: LD_VAR 0 1
26503: PPUSH
26504: LD_VAR 0 2
26508: PPUSH
26509: LD_VAR 0 3
26513: PPUSH
26514: LD_INT 3
26516: PPUSH
26517: LD_INT 6
26519: PPUSH
26520: CALL_OW 12
26524: PPUSH
26525: LD_INT 1
26527: PPUSH
26528: CALL_OW 483
// end ;
26532: GO 26392
26534: POP
26535: POP
// end ;
26536: PPOPN 5
26538: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26539: LD_EXP 52
26543: PUSH
26544: LD_EXP 87
26548: AND
26549: IFFALSE 26643
26551: GO 26553
26553: DISABLE
26554: LD_INT 0
26556: PPUSH
26557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26558: LD_ADDR_VAR 0 2
26562: PUSH
26563: LD_INT 22
26565: PUSH
26566: LD_OWVAR 2
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 32
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 21
26587: PUSH
26588: LD_INT 2
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: LIST
26599: PPUSH
26600: CALL_OW 69
26604: ST_TO_ADDR
// if not tmp then
26605: LD_VAR 0 2
26609: NOT
26610: IFFALSE 26614
// exit ;
26612: GO 26643
// for i in tmp do
26614: LD_ADDR_VAR 0 1
26618: PUSH
26619: LD_VAR 0 2
26623: PUSH
26624: FOR_IN
26625: IFFALSE 26641
// SetFuel ( i , 0 ) ;
26627: LD_VAR 0 1
26631: PPUSH
26632: LD_INT 0
26634: PPUSH
26635: CALL_OW 240
26639: GO 26624
26641: POP
26642: POP
// end ;
26643: PPOPN 2
26645: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26646: LD_EXP 52
26650: PUSH
26651: LD_EXP 88
26655: AND
26656: IFFALSE 26722
26658: GO 26660
26660: DISABLE
26661: LD_INT 0
26663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26664: LD_ADDR_VAR 0 1
26668: PUSH
26669: LD_INT 22
26671: PUSH
26672: LD_OWVAR 2
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 30
26683: PUSH
26684: LD_INT 29
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PPUSH
26695: CALL_OW 69
26699: ST_TO_ADDR
// if not tmp then
26700: LD_VAR 0 1
26704: NOT
26705: IFFALSE 26709
// exit ;
26707: GO 26722
// DestroyUnit ( tmp [ 1 ] ) ;
26709: LD_VAR 0 1
26713: PUSH
26714: LD_INT 1
26716: ARRAY
26717: PPUSH
26718: CALL_OW 65
// end ;
26722: PPOPN 1
26724: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26725: LD_EXP 52
26729: PUSH
26730: LD_EXP 90
26734: AND
26735: IFFALSE 26864
26737: GO 26739
26739: DISABLE
26740: LD_INT 0
26742: PPUSH
// begin uc_side := 0 ;
26743: LD_ADDR_OWVAR 20
26747: PUSH
26748: LD_INT 0
26750: ST_TO_ADDR
// uc_nation := nation_arabian ;
26751: LD_ADDR_OWVAR 21
26755: PUSH
26756: LD_INT 2
26758: ST_TO_ADDR
// hc_gallery :=  ;
26759: LD_ADDR_OWVAR 33
26763: PUSH
26764: LD_STRING 
26766: ST_TO_ADDR
// hc_name :=  ;
26767: LD_ADDR_OWVAR 26
26771: PUSH
26772: LD_STRING 
26774: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26775: LD_INT 1
26777: PPUSH
26778: LD_INT 11
26780: PPUSH
26781: LD_INT 10
26783: PPUSH
26784: CALL_OW 380
// un := CreateHuman ;
26788: LD_ADDR_VAR 0 1
26792: PUSH
26793: CALL_OW 44
26797: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26798: LD_VAR 0 1
26802: PPUSH
26803: LD_INT 1
26805: PPUSH
26806: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26810: LD_INT 35
26812: PPUSH
26813: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26817: LD_VAR 0 1
26821: PPUSH
26822: LD_INT 22
26824: PUSH
26825: LD_OWVAR 2
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PPUSH
26834: CALL_OW 69
26838: PPUSH
26839: LD_VAR 0 1
26843: PPUSH
26844: CALL_OW 74
26848: PPUSH
26849: CALL_OW 115
// until IsDead ( un ) ;
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 301
26862: IFFALSE 26810
// end ;
26864: PPOPN 1
26866: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26867: LD_EXP 52
26871: PUSH
26872: LD_EXP 92
26876: AND
26877: IFFALSE 26889
26879: GO 26881
26881: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26882: LD_STRING earthquake(getX(game), 0, 32)
26884: PPUSH
26885: CALL_OW 559
26889: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26890: LD_EXP 52
26894: PUSH
26895: LD_EXP 93
26899: AND
26900: IFFALSE 26991
26902: GO 26904
26904: DISABLE
26905: LD_INT 0
26907: PPUSH
// begin enable ;
26908: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26909: LD_ADDR_VAR 0 1
26913: PUSH
26914: LD_INT 22
26916: PUSH
26917: LD_OWVAR 2
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 21
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 33
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: PPUSH
26951: CALL_OW 69
26955: ST_TO_ADDR
// if not tmp then
26956: LD_VAR 0 1
26960: NOT
26961: IFFALSE 26965
// exit ;
26963: GO 26991
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26965: LD_VAR 0 1
26969: PUSH
26970: LD_INT 1
26972: PPUSH
26973: LD_VAR 0 1
26977: PPUSH
26978: CALL_OW 12
26982: ARRAY
26983: PPUSH
26984: LD_INT 1
26986: PPUSH
26987: CALL_OW 234
// end ;
26991: PPOPN 1
26993: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26994: LD_EXP 52
26998: PUSH
26999: LD_EXP 94
27003: AND
27004: IFFALSE 27145
27006: GO 27008
27008: DISABLE
27009: LD_INT 0
27011: PPUSH
27012: PPUSH
27013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27014: LD_ADDR_VAR 0 3
27018: PUSH
27019: LD_INT 22
27021: PUSH
27022: LD_OWVAR 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 25
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PPUSH
27045: CALL_OW 69
27049: ST_TO_ADDR
// if not tmp then
27050: LD_VAR 0 3
27054: NOT
27055: IFFALSE 27059
// exit ;
27057: GO 27145
// un := tmp [ rand ( 1 , tmp ) ] ;
27059: LD_ADDR_VAR 0 2
27063: PUSH
27064: LD_VAR 0 3
27068: PUSH
27069: LD_INT 1
27071: PPUSH
27072: LD_VAR 0 3
27076: PPUSH
27077: CALL_OW 12
27081: ARRAY
27082: ST_TO_ADDR
// if Crawls ( un ) then
27083: LD_VAR 0 2
27087: PPUSH
27088: CALL_OW 318
27092: IFFALSE 27103
// ComWalk ( un ) ;
27094: LD_VAR 0 2
27098: PPUSH
27099: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27103: LD_VAR 0 2
27107: PPUSH
27108: LD_INT 9
27110: PPUSH
27111: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27115: LD_INT 28
27117: PPUSH
27118: LD_OWVAR 2
27122: PPUSH
27123: LD_INT 2
27125: PPUSH
27126: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27130: LD_INT 29
27132: PPUSH
27133: LD_OWVAR 2
27137: PPUSH
27138: LD_INT 2
27140: PPUSH
27141: CALL_OW 322
// end ;
27145: PPOPN 3
27147: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27148: LD_EXP 52
27152: PUSH
27153: LD_EXP 95
27157: AND
27158: IFFALSE 27269
27160: GO 27162
27162: DISABLE
27163: LD_INT 0
27165: PPUSH
27166: PPUSH
27167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27168: LD_ADDR_VAR 0 3
27172: PUSH
27173: LD_INT 22
27175: PUSH
27176: LD_OWVAR 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 25
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PPUSH
27199: CALL_OW 69
27203: ST_TO_ADDR
// if not tmp then
27204: LD_VAR 0 3
27208: NOT
27209: IFFALSE 27213
// exit ;
27211: GO 27269
// un := tmp [ rand ( 1 , tmp ) ] ;
27213: LD_ADDR_VAR 0 2
27217: PUSH
27218: LD_VAR 0 3
27222: PUSH
27223: LD_INT 1
27225: PPUSH
27226: LD_VAR 0 3
27230: PPUSH
27231: CALL_OW 12
27235: ARRAY
27236: ST_TO_ADDR
// if Crawls ( un ) then
27237: LD_VAR 0 2
27241: PPUSH
27242: CALL_OW 318
27246: IFFALSE 27257
// ComWalk ( un ) ;
27248: LD_VAR 0 2
27252: PPUSH
27253: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27257: LD_VAR 0 2
27261: PPUSH
27262: LD_INT 8
27264: PPUSH
27265: CALL_OW 336
// end ;
27269: PPOPN 3
27271: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27272: LD_EXP 52
27276: PUSH
27277: LD_EXP 96
27281: AND
27282: IFFALSE 27426
27284: GO 27286
27286: DISABLE
27287: LD_INT 0
27289: PPUSH
27290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27291: LD_ADDR_VAR 0 2
27295: PUSH
27296: LD_INT 22
27298: PUSH
27299: LD_OWVAR 2
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 21
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: LD_INT 34
27323: PUSH
27324: LD_INT 12
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 34
27333: PUSH
27334: LD_INT 51
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 34
27343: PUSH
27344: LD_INT 32
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: PPUSH
27362: CALL_OW 69
27366: ST_TO_ADDR
// if not tmp then
27367: LD_VAR 0 2
27371: NOT
27372: IFFALSE 27376
// exit ;
27374: GO 27426
// for i in tmp do
27376: LD_ADDR_VAR 0 1
27380: PUSH
27381: LD_VAR 0 2
27385: PUSH
27386: FOR_IN
27387: IFFALSE 27424
// if GetCargo ( i , mat_artifact ) = 0 then
27389: LD_VAR 0 1
27393: PPUSH
27394: LD_INT 4
27396: PPUSH
27397: CALL_OW 289
27401: PUSH
27402: LD_INT 0
27404: EQUAL
27405: IFFALSE 27422
// SetCargo ( i , mat_siberit , 100 ) ;
27407: LD_VAR 0 1
27411: PPUSH
27412: LD_INT 3
27414: PPUSH
27415: LD_INT 100
27417: PPUSH
27418: CALL_OW 290
27422: GO 27386
27424: POP
27425: POP
// end ;
27426: PPOPN 2
27428: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27429: LD_EXP 52
27433: PUSH
27434: LD_EXP 97
27438: AND
27439: IFFALSE 27622
27441: GO 27443
27443: DISABLE
27444: LD_INT 0
27446: PPUSH
27447: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27448: LD_ADDR_VAR 0 2
27452: PUSH
27453: LD_INT 22
27455: PUSH
27456: LD_OWVAR 2
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PPUSH
27465: CALL_OW 69
27469: ST_TO_ADDR
// if not tmp then
27470: LD_VAR 0 2
27474: NOT
27475: IFFALSE 27479
// exit ;
27477: GO 27622
// for i := 1 to 2 do
27479: LD_ADDR_VAR 0 1
27483: PUSH
27484: DOUBLE
27485: LD_INT 1
27487: DEC
27488: ST_TO_ADDR
27489: LD_INT 2
27491: PUSH
27492: FOR_TO
27493: IFFALSE 27620
// begin uc_side := your_side ;
27495: LD_ADDR_OWVAR 20
27499: PUSH
27500: LD_OWVAR 2
27504: ST_TO_ADDR
// uc_nation := nation_american ;
27505: LD_ADDR_OWVAR 21
27509: PUSH
27510: LD_INT 1
27512: ST_TO_ADDR
// vc_chassis := us_morphling ;
27513: LD_ADDR_OWVAR 37
27517: PUSH
27518: LD_INT 5
27520: ST_TO_ADDR
// vc_engine := engine_siberite ;
27521: LD_ADDR_OWVAR 39
27525: PUSH
27526: LD_INT 3
27528: ST_TO_ADDR
// vc_control := control_computer ;
27529: LD_ADDR_OWVAR 38
27533: PUSH
27534: LD_INT 3
27536: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27537: LD_ADDR_OWVAR 40
27541: PUSH
27542: LD_INT 10
27544: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27545: LD_VAR 0 2
27549: PUSH
27550: LD_INT 1
27552: ARRAY
27553: PPUSH
27554: CALL_OW 310
27558: NOT
27559: IFFALSE 27606
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27561: CALL_OW 45
27565: PPUSH
27566: LD_VAR 0 2
27570: PUSH
27571: LD_INT 1
27573: ARRAY
27574: PPUSH
27575: CALL_OW 250
27579: PPUSH
27580: LD_VAR 0 2
27584: PUSH
27585: LD_INT 1
27587: ARRAY
27588: PPUSH
27589: CALL_OW 251
27593: PPUSH
27594: LD_INT 12
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: CALL_OW 50
27604: GO 27618
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27606: CALL_OW 45
27610: PPUSH
27611: LD_INT 1
27613: PPUSH
27614: CALL_OW 51
// end ;
27618: GO 27492
27620: POP
27621: POP
// end ;
27622: PPOPN 2
27624: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27625: LD_EXP 52
27629: PUSH
27630: LD_EXP 98
27634: AND
27635: IFFALSE 27857
27637: GO 27639
27639: DISABLE
27640: LD_INT 0
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27648: LD_ADDR_VAR 0 6
27652: PUSH
27653: LD_INT 22
27655: PUSH
27656: LD_OWVAR 2
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 21
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 3
27677: PUSH
27678: LD_INT 23
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: PPUSH
27697: CALL_OW 69
27701: ST_TO_ADDR
// if not tmp then
27702: LD_VAR 0 6
27706: NOT
27707: IFFALSE 27711
// exit ;
27709: GO 27857
// s1 := rand ( 1 , 4 ) ;
27711: LD_ADDR_VAR 0 2
27715: PUSH
27716: LD_INT 1
27718: PPUSH
27719: LD_INT 4
27721: PPUSH
27722: CALL_OW 12
27726: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27727: LD_ADDR_VAR 0 4
27731: PUSH
27732: LD_VAR 0 6
27736: PUSH
27737: LD_INT 1
27739: ARRAY
27740: PPUSH
27741: LD_VAR 0 2
27745: PPUSH
27746: CALL_OW 259
27750: ST_TO_ADDR
// if s1 = 1 then
27751: LD_VAR 0 2
27755: PUSH
27756: LD_INT 1
27758: EQUAL
27759: IFFALSE 27779
// s2 := rand ( 2 , 4 ) else
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: LD_INT 2
27768: PPUSH
27769: LD_INT 4
27771: PPUSH
27772: CALL_OW 12
27776: ST_TO_ADDR
27777: GO 27787
// s2 := 1 ;
27779: LD_ADDR_VAR 0 3
27783: PUSH
27784: LD_INT 1
27786: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27787: LD_ADDR_VAR 0 5
27791: PUSH
27792: LD_VAR 0 6
27796: PUSH
27797: LD_INT 1
27799: ARRAY
27800: PPUSH
27801: LD_VAR 0 3
27805: PPUSH
27806: CALL_OW 259
27810: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27811: LD_VAR 0 6
27815: PUSH
27816: LD_INT 1
27818: ARRAY
27819: PPUSH
27820: LD_VAR 0 2
27824: PPUSH
27825: LD_VAR 0 5
27829: PPUSH
27830: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27834: LD_VAR 0 6
27838: PUSH
27839: LD_INT 1
27841: ARRAY
27842: PPUSH
27843: LD_VAR 0 3
27847: PPUSH
27848: LD_VAR 0 4
27852: PPUSH
27853: CALL_OW 237
// end ;
27857: PPOPN 6
27859: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27860: LD_EXP 52
27864: PUSH
27865: LD_EXP 99
27869: AND
27870: IFFALSE 27949
27872: GO 27874
27874: DISABLE
27875: LD_INT 0
27877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27878: LD_ADDR_VAR 0 1
27882: PUSH
27883: LD_INT 22
27885: PUSH
27886: LD_OWVAR 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 30
27897: PUSH
27898: LD_INT 3
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PPUSH
27909: CALL_OW 69
27913: ST_TO_ADDR
// if not tmp then
27914: LD_VAR 0 1
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 27949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27923: LD_VAR 0 1
27927: PUSH
27928: LD_INT 1
27930: PPUSH
27931: LD_VAR 0 1
27935: PPUSH
27936: CALL_OW 12
27940: ARRAY
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: CALL_OW 234
// end ;
27949: PPOPN 1
27951: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27952: LD_EXP 52
27956: PUSH
27957: LD_EXP 100
27961: AND
27962: IFFALSE 28074
27964: GO 27966
27966: DISABLE
27967: LD_INT 0
27969: PPUSH
27970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27971: LD_ADDR_VAR 0 2
27975: PUSH
27976: LD_INT 22
27978: PUSH
27979: LD_OWVAR 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: LD_INT 30
27993: PUSH
27994: LD_INT 27
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 30
28003: PUSH
28004: LD_INT 26
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 30
28013: PUSH
28014: LD_INT 28
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PPUSH
28031: CALL_OW 69
28035: ST_TO_ADDR
// if not tmp then
28036: LD_VAR 0 2
28040: NOT
28041: IFFALSE 28045
// exit ;
28043: GO 28074
// for i in tmp do
28045: LD_ADDR_VAR 0 1
28049: PUSH
28050: LD_VAR 0 2
28054: PUSH
28055: FOR_IN
28056: IFFALSE 28072
// SetLives ( i , 1 ) ;
28058: LD_VAR 0 1
28062: PPUSH
28063: LD_INT 1
28065: PPUSH
28066: CALL_OW 234
28070: GO 28055
28072: POP
28073: POP
// end ;
28074: PPOPN 2
28076: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28077: LD_EXP 52
28081: PUSH
28082: LD_EXP 101
28086: AND
28087: IFFALSE 28374
28089: GO 28091
28091: DISABLE
28092: LD_INT 0
28094: PPUSH
28095: PPUSH
28096: PPUSH
// begin i := rand ( 1 , 7 ) ;
28097: LD_ADDR_VAR 0 1
28101: PUSH
28102: LD_INT 1
28104: PPUSH
28105: LD_INT 7
28107: PPUSH
28108: CALL_OW 12
28112: ST_TO_ADDR
// case i of 1 :
28113: LD_VAR 0 1
28117: PUSH
28118: LD_INT 1
28120: DOUBLE
28121: EQUAL
28122: IFTRUE 28126
28124: GO 28136
28126: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28127: LD_STRING earthquake(getX(game), 0, 32)
28129: PPUSH
28130: CALL_OW 559
28134: GO 28374
28136: LD_INT 2
28138: DOUBLE
28139: EQUAL
28140: IFTRUE 28144
28142: GO 28158
28144: POP
// begin ToLua ( displayStucuk(); ) ;
28145: LD_STRING displayStucuk();
28147: PPUSH
28148: CALL_OW 559
// ResetFog ;
28152: CALL_OW 335
// end ; 3 :
28156: GO 28374
28158: LD_INT 3
28160: DOUBLE
28161: EQUAL
28162: IFTRUE 28166
28164: GO 28270
28166: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28167: LD_ADDR_VAR 0 2
28171: PUSH
28172: LD_INT 22
28174: PUSH
28175: LD_OWVAR 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 25
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PPUSH
28198: CALL_OW 69
28202: ST_TO_ADDR
// if not tmp then
28203: LD_VAR 0 2
28207: NOT
28208: IFFALSE 28212
// exit ;
28210: GO 28374
// un := tmp [ rand ( 1 , tmp ) ] ;
28212: LD_ADDR_VAR 0 3
28216: PUSH
28217: LD_VAR 0 2
28221: PUSH
28222: LD_INT 1
28224: PPUSH
28225: LD_VAR 0 2
28229: PPUSH
28230: CALL_OW 12
28234: ARRAY
28235: ST_TO_ADDR
// if Crawls ( un ) then
28236: LD_VAR 0 3
28240: PPUSH
28241: CALL_OW 318
28245: IFFALSE 28256
// ComWalk ( un ) ;
28247: LD_VAR 0 3
28251: PPUSH
28252: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28256: LD_VAR 0 3
28260: PPUSH
28261: LD_INT 8
28263: PPUSH
28264: CALL_OW 336
// end ; 4 :
28268: GO 28374
28270: LD_INT 4
28272: DOUBLE
28273: EQUAL
28274: IFTRUE 28278
28276: GO 28352
28278: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28279: LD_ADDR_VAR 0 2
28283: PUSH
28284: LD_INT 22
28286: PUSH
28287: LD_OWVAR 2
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 30
28298: PUSH
28299: LD_INT 29
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PPUSH
28310: CALL_OW 69
28314: ST_TO_ADDR
// if not tmp then
28315: LD_VAR 0 2
28319: NOT
28320: IFFALSE 28324
// exit ;
28322: GO 28374
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28324: LD_VAR 0 2
28328: PUSH
28329: LD_INT 1
28331: ARRAY
28332: PPUSH
28333: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28337: LD_VAR 0 2
28341: PUSH
28342: LD_INT 1
28344: ARRAY
28345: PPUSH
28346: CALL_OW 65
// end ; 5 .. 7 :
28350: GO 28374
28352: LD_INT 5
28354: DOUBLE
28355: GREATEREQUAL
28356: IFFALSE 28364
28358: LD_INT 7
28360: DOUBLE
28361: LESSEQUAL
28362: IFTRUE 28366
28364: GO 28373
28366: POP
// StreamSibBomb ; end ;
28367: CALL 24611 0 0
28371: GO 28374
28373: POP
// end ;
28374: PPOPN 3
28376: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28377: LD_EXP 52
28381: PUSH
28382: LD_EXP 102
28386: AND
28387: IFFALSE 28543
28389: GO 28391
28391: DISABLE
28392: LD_INT 0
28394: PPUSH
28395: PPUSH
28396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28397: LD_ADDR_VAR 0 2
28401: PUSH
28402: LD_INT 81
28404: PUSH
28405: LD_OWVAR 2
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 21
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 21
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PPUSH
28446: CALL_OW 69
28450: ST_TO_ADDR
// if not tmp then
28451: LD_VAR 0 2
28455: NOT
28456: IFFALSE 28460
// exit ;
28458: GO 28543
// p := 0 ;
28460: LD_ADDR_VAR 0 3
28464: PUSH
28465: LD_INT 0
28467: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28468: LD_INT 35
28470: PPUSH
28471: CALL_OW 67
// p := p + 1 ;
28475: LD_ADDR_VAR 0 3
28479: PUSH
28480: LD_VAR 0 3
28484: PUSH
28485: LD_INT 1
28487: PLUS
28488: ST_TO_ADDR
// for i in tmp do
28489: LD_ADDR_VAR 0 1
28493: PUSH
28494: LD_VAR 0 2
28498: PUSH
28499: FOR_IN
28500: IFFALSE 28531
// if GetLives ( i ) < 1000 then
28502: LD_VAR 0 1
28506: PPUSH
28507: CALL_OW 256
28511: PUSH
28512: LD_INT 1000
28514: LESS
28515: IFFALSE 28529
// SetLives ( i , 1000 ) ;
28517: LD_VAR 0 1
28521: PPUSH
28522: LD_INT 1000
28524: PPUSH
28525: CALL_OW 234
28529: GO 28499
28531: POP
28532: POP
// until p > 20 ;
28533: LD_VAR 0 3
28537: PUSH
28538: LD_INT 20
28540: GREATER
28541: IFFALSE 28468
// end ;
28543: PPOPN 3
28545: END
// every 0 0$1 trigger StreamModeActive and sTime do
28546: LD_EXP 52
28550: PUSH
28551: LD_EXP 103
28555: AND
28556: IFFALSE 28591
28558: GO 28560
28560: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28561: LD_INT 28
28563: PPUSH
28564: LD_OWVAR 2
28568: PPUSH
28569: LD_INT 2
28571: PPUSH
28572: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28576: LD_INT 30
28578: PPUSH
28579: LD_OWVAR 2
28583: PPUSH
28584: LD_INT 2
28586: PPUSH
28587: CALL_OW 322
// end ;
28591: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28592: LD_EXP 52
28596: PUSH
28597: LD_EXP 104
28601: AND
28602: IFFALSE 28723
28604: GO 28606
28606: DISABLE
28607: LD_INT 0
28609: PPUSH
28610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28611: LD_ADDR_VAR 0 2
28615: PUSH
28616: LD_INT 22
28618: PUSH
28619: LD_OWVAR 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 21
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 3
28640: PUSH
28641: LD_INT 23
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: LIST
28659: PPUSH
28660: CALL_OW 69
28664: ST_TO_ADDR
// if not tmp then
28665: LD_VAR 0 2
28669: NOT
28670: IFFALSE 28674
// exit ;
28672: GO 28723
// for i in tmp do
28674: LD_ADDR_VAR 0 1
28678: PUSH
28679: LD_VAR 0 2
28683: PUSH
28684: FOR_IN
28685: IFFALSE 28721
// begin if Crawls ( i ) then
28687: LD_VAR 0 1
28691: PPUSH
28692: CALL_OW 318
28696: IFFALSE 28707
// ComWalk ( i ) ;
28698: LD_VAR 0 1
28702: PPUSH
28703: CALL_OW 138
// SetClass ( i , 2 ) ;
28707: LD_VAR 0 1
28711: PPUSH
28712: LD_INT 2
28714: PPUSH
28715: CALL_OW 336
// end ;
28719: GO 28684
28721: POP
28722: POP
// end ;
28723: PPOPN 2
28725: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28726: LD_EXP 52
28730: PUSH
28731: LD_EXP 105
28735: AND
28736: IFFALSE 29024
28738: GO 28740
28740: DISABLE
28741: LD_INT 0
28743: PPUSH
28744: PPUSH
28745: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28746: LD_OWVAR 2
28750: PPUSH
28751: LD_INT 9
28753: PPUSH
28754: LD_INT 1
28756: PPUSH
28757: LD_INT 1
28759: PPUSH
28760: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28764: LD_INT 9
28766: PPUSH
28767: LD_OWVAR 2
28771: PPUSH
28772: CALL_OW 343
// uc_side := 9 ;
28776: LD_ADDR_OWVAR 20
28780: PUSH
28781: LD_INT 9
28783: ST_TO_ADDR
// uc_nation := 2 ;
28784: LD_ADDR_OWVAR 21
28788: PUSH
28789: LD_INT 2
28791: ST_TO_ADDR
// hc_name := Dark Warrior ;
28792: LD_ADDR_OWVAR 26
28796: PUSH
28797: LD_STRING Dark Warrior
28799: ST_TO_ADDR
// hc_gallery :=  ;
28800: LD_ADDR_OWVAR 33
28804: PUSH
28805: LD_STRING 
28807: ST_TO_ADDR
// hc_noskilllimit := true ;
28808: LD_ADDR_OWVAR 76
28812: PUSH
28813: LD_INT 1
28815: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28816: LD_ADDR_OWVAR 31
28820: PUSH
28821: LD_INT 30
28823: PUSH
28824: LD_INT 30
28826: PUSH
28827: LD_INT 30
28829: PUSH
28830: LD_INT 30
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: ST_TO_ADDR
// un := CreateHuman ;
28839: LD_ADDR_VAR 0 3
28843: PUSH
28844: CALL_OW 44
28848: ST_TO_ADDR
// hc_noskilllimit := false ;
28849: LD_ADDR_OWVAR 76
28853: PUSH
28854: LD_INT 0
28856: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28857: LD_VAR 0 3
28861: PPUSH
28862: LD_INT 1
28864: PPUSH
28865: CALL_OW 51
// ToLua ( playRanger() ) ;
28869: LD_STRING playRanger()
28871: PPUSH
28872: CALL_OW 559
// p := 0 ;
28876: LD_ADDR_VAR 0 2
28880: PUSH
28881: LD_INT 0
28883: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28884: LD_INT 35
28886: PPUSH
28887: CALL_OW 67
// p := p + 1 ;
28891: LD_ADDR_VAR 0 2
28895: PUSH
28896: LD_VAR 0 2
28900: PUSH
28901: LD_INT 1
28903: PLUS
28904: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28905: LD_VAR 0 3
28909: PPUSH
28910: CALL_OW 256
28914: PUSH
28915: LD_INT 1000
28917: LESS
28918: IFFALSE 28932
// SetLives ( un , 1000 ) ;
28920: LD_VAR 0 3
28924: PPUSH
28925: LD_INT 1000
28927: PPUSH
28928: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28932: LD_VAR 0 3
28936: PPUSH
28937: LD_INT 81
28939: PUSH
28940: LD_OWVAR 2
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 91
28951: PUSH
28952: LD_VAR 0 3
28956: PUSH
28957: LD_INT 30
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: LIST
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PPUSH
28969: CALL_OW 69
28973: PPUSH
28974: LD_VAR 0 3
28978: PPUSH
28979: CALL_OW 74
28983: PPUSH
28984: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28988: LD_VAR 0 2
28992: PUSH
28993: LD_INT 80
28995: GREATER
28996: PUSH
28997: LD_VAR 0 3
29001: PPUSH
29002: CALL_OW 301
29006: OR
29007: IFFALSE 28884
// if un then
29009: LD_VAR 0 3
29013: IFFALSE 29024
// RemoveUnit ( un ) ;
29015: LD_VAR 0 3
29019: PPUSH
29020: CALL_OW 64
// end ;
29024: PPOPN 3
29026: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29027: LD_EXP 106
29031: IFFALSE 29147
29033: GO 29035
29035: DISABLE
29036: LD_INT 0
29038: PPUSH
29039: PPUSH
29040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29041: LD_ADDR_VAR 0 2
29045: PUSH
29046: LD_INT 81
29048: PUSH
29049: LD_OWVAR 2
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 21
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PPUSH
29072: CALL_OW 69
29076: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29077: LD_STRING playComputer()
29079: PPUSH
29080: CALL_OW 559
// if not tmp then
29084: LD_VAR 0 2
29088: NOT
29089: IFFALSE 29093
// exit ;
29091: GO 29147
// for i in tmp do
29093: LD_ADDR_VAR 0 1
29097: PUSH
29098: LD_VAR 0 2
29102: PUSH
29103: FOR_IN
29104: IFFALSE 29145
// for j := 1 to 4 do
29106: LD_ADDR_VAR 0 3
29110: PUSH
29111: DOUBLE
29112: LD_INT 1
29114: DEC
29115: ST_TO_ADDR
29116: LD_INT 4
29118: PUSH
29119: FOR_TO
29120: IFFALSE 29141
// SetSkill ( i , j , 10 ) ;
29122: LD_VAR 0 1
29126: PPUSH
29127: LD_VAR 0 3
29131: PPUSH
29132: LD_INT 10
29134: PPUSH
29135: CALL_OW 237
29139: GO 29119
29141: POP
29142: POP
29143: GO 29103
29145: POP
29146: POP
// end ;
29147: PPOPN 3
29149: END
// every 0 0$1 trigger s30 do var i , tmp ;
29150: LD_EXP 107
29154: IFFALSE 29223
29156: GO 29158
29158: DISABLE
29159: LD_INT 0
29161: PPUSH
29162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29163: LD_ADDR_VAR 0 2
29167: PUSH
29168: LD_INT 22
29170: PUSH
29171: LD_OWVAR 2
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PPUSH
29180: CALL_OW 69
29184: ST_TO_ADDR
// if not tmp then
29185: LD_VAR 0 2
29189: NOT
29190: IFFALSE 29194
// exit ;
29192: GO 29223
// for i in tmp do
29194: LD_ADDR_VAR 0 1
29198: PUSH
29199: LD_VAR 0 2
29203: PUSH
29204: FOR_IN
29205: IFFALSE 29221
// SetLives ( i , 300 ) ;
29207: LD_VAR 0 1
29211: PPUSH
29212: LD_INT 300
29214: PPUSH
29215: CALL_OW 234
29219: GO 29204
29221: POP
29222: POP
// end ;
29223: PPOPN 2
29225: END
// every 0 0$1 trigger s60 do var i , tmp ;
29226: LD_EXP 108
29230: IFFALSE 29299
29232: GO 29234
29234: DISABLE
29235: LD_INT 0
29237: PPUSH
29238: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29239: LD_ADDR_VAR 0 2
29243: PUSH
29244: LD_INT 22
29246: PUSH
29247: LD_OWVAR 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PPUSH
29256: CALL_OW 69
29260: ST_TO_ADDR
// if not tmp then
29261: LD_VAR 0 2
29265: NOT
29266: IFFALSE 29270
// exit ;
29268: GO 29299
// for i in tmp do
29270: LD_ADDR_VAR 0 1
29274: PUSH
29275: LD_VAR 0 2
29279: PUSH
29280: FOR_IN
29281: IFFALSE 29297
// SetLives ( i , 600 ) ;
29283: LD_VAR 0 1
29287: PPUSH
29288: LD_INT 600
29290: PPUSH
29291: CALL_OW 234
29295: GO 29280
29297: POP
29298: POP
// end ;
29299: PPOPN 2
29301: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29302: LD_INT 0
29304: PPUSH
// case cmd of 301 :
29305: LD_VAR 0 1
29309: PUSH
29310: LD_INT 301
29312: DOUBLE
29313: EQUAL
29314: IFTRUE 29318
29316: GO 29350
29318: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29319: LD_VAR 0 6
29323: PPUSH
29324: LD_VAR 0 7
29328: PPUSH
29329: LD_VAR 0 8
29333: PPUSH
29334: LD_VAR 0 4
29338: PPUSH
29339: LD_VAR 0 5
29343: PPUSH
29344: CALL 30551 0 5
29348: GO 29471
29350: LD_INT 302
29352: DOUBLE
29353: EQUAL
29354: IFTRUE 29358
29356: GO 29395
29358: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29359: LD_VAR 0 6
29363: PPUSH
29364: LD_VAR 0 7
29368: PPUSH
29369: LD_VAR 0 8
29373: PPUSH
29374: LD_VAR 0 9
29378: PPUSH
29379: LD_VAR 0 4
29383: PPUSH
29384: LD_VAR 0 5
29388: PPUSH
29389: CALL 30642 0 6
29393: GO 29471
29395: LD_INT 303
29397: DOUBLE
29398: EQUAL
29399: IFTRUE 29403
29401: GO 29440
29403: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29404: LD_VAR 0 6
29408: PPUSH
29409: LD_VAR 0 7
29413: PPUSH
29414: LD_VAR 0 8
29418: PPUSH
29419: LD_VAR 0 9
29423: PPUSH
29424: LD_VAR 0 4
29428: PPUSH
29429: LD_VAR 0 5
29433: PPUSH
29434: CALL 29476 0 6
29438: GO 29471
29440: LD_INT 304
29442: DOUBLE
29443: EQUAL
29444: IFTRUE 29448
29446: GO 29470
29448: POP
// hHackTeleport ( unit , x , y ) ; end ;
29449: LD_VAR 0 2
29453: PPUSH
29454: LD_VAR 0 4
29458: PPUSH
29459: LD_VAR 0 5
29463: PPUSH
29464: CALL 31235 0 3
29468: GO 29471
29470: POP
// end ;
29471: LD_VAR 0 12
29475: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29476: LD_INT 0
29478: PPUSH
29479: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29480: LD_VAR 0 1
29484: PUSH
29485: LD_INT 1
29487: LESS
29488: PUSH
29489: LD_VAR 0 1
29493: PUSH
29494: LD_INT 3
29496: GREATER
29497: OR
29498: PUSH
29499: LD_VAR 0 5
29503: PPUSH
29504: LD_VAR 0 6
29508: PPUSH
29509: CALL_OW 428
29513: OR
29514: IFFALSE 29518
// exit ;
29516: GO 30238
// uc_side := your_side ;
29518: LD_ADDR_OWVAR 20
29522: PUSH
29523: LD_OWVAR 2
29527: ST_TO_ADDR
// uc_nation := nation ;
29528: LD_ADDR_OWVAR 21
29532: PUSH
29533: LD_VAR 0 1
29537: ST_TO_ADDR
// bc_level = 1 ;
29538: LD_ADDR_OWVAR 43
29542: PUSH
29543: LD_INT 1
29545: ST_TO_ADDR
// case btype of 1 :
29546: LD_VAR 0 2
29550: PUSH
29551: LD_INT 1
29553: DOUBLE
29554: EQUAL
29555: IFTRUE 29559
29557: GO 29570
29559: POP
// bc_type := b_depot ; 2 :
29560: LD_ADDR_OWVAR 42
29564: PUSH
29565: LD_INT 0
29567: ST_TO_ADDR
29568: GO 30182
29570: LD_INT 2
29572: DOUBLE
29573: EQUAL
29574: IFTRUE 29578
29576: GO 29589
29578: POP
// bc_type := b_warehouse ; 3 :
29579: LD_ADDR_OWVAR 42
29583: PUSH
29584: LD_INT 1
29586: ST_TO_ADDR
29587: GO 30182
29589: LD_INT 3
29591: DOUBLE
29592: EQUAL
29593: IFTRUE 29597
29595: GO 29608
29597: POP
// bc_type := b_lab ; 4 .. 9 :
29598: LD_ADDR_OWVAR 42
29602: PUSH
29603: LD_INT 6
29605: ST_TO_ADDR
29606: GO 30182
29608: LD_INT 4
29610: DOUBLE
29611: GREATEREQUAL
29612: IFFALSE 29620
29614: LD_INT 9
29616: DOUBLE
29617: LESSEQUAL
29618: IFTRUE 29622
29620: GO 29674
29622: POP
// begin bc_type := b_lab_half ;
29623: LD_ADDR_OWVAR 42
29627: PUSH
29628: LD_INT 7
29630: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29631: LD_ADDR_OWVAR 44
29635: PUSH
29636: LD_INT 10
29638: PUSH
29639: LD_INT 11
29641: PUSH
29642: LD_INT 12
29644: PUSH
29645: LD_INT 15
29647: PUSH
29648: LD_INT 14
29650: PUSH
29651: LD_INT 13
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: PUSH
29662: LD_VAR 0 2
29666: PUSH
29667: LD_INT 3
29669: MINUS
29670: ARRAY
29671: ST_TO_ADDR
// end ; 10 .. 13 :
29672: GO 30182
29674: LD_INT 10
29676: DOUBLE
29677: GREATEREQUAL
29678: IFFALSE 29686
29680: LD_INT 13
29682: DOUBLE
29683: LESSEQUAL
29684: IFTRUE 29688
29686: GO 29765
29688: POP
// begin bc_type := b_lab_full ;
29689: LD_ADDR_OWVAR 42
29693: PUSH
29694: LD_INT 8
29696: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29697: LD_ADDR_OWVAR 44
29701: PUSH
29702: LD_INT 10
29704: PUSH
29705: LD_INT 12
29707: PUSH
29708: LD_INT 14
29710: PUSH
29711: LD_INT 13
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: PUSH
29720: LD_VAR 0 2
29724: PUSH
29725: LD_INT 9
29727: MINUS
29728: ARRAY
29729: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29730: LD_ADDR_OWVAR 45
29734: PUSH
29735: LD_INT 11
29737: PUSH
29738: LD_INT 15
29740: PUSH
29741: LD_INT 12
29743: PUSH
29744: LD_INT 15
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: PUSH
29753: LD_VAR 0 2
29757: PUSH
29758: LD_INT 9
29760: MINUS
29761: ARRAY
29762: ST_TO_ADDR
// end ; 14 :
29763: GO 30182
29765: LD_INT 14
29767: DOUBLE
29768: EQUAL
29769: IFTRUE 29773
29771: GO 29784
29773: POP
// bc_type := b_workshop ; 15 :
29774: LD_ADDR_OWVAR 42
29778: PUSH
29779: LD_INT 2
29781: ST_TO_ADDR
29782: GO 30182
29784: LD_INT 15
29786: DOUBLE
29787: EQUAL
29788: IFTRUE 29792
29790: GO 29803
29792: POP
// bc_type := b_factory ; 16 :
29793: LD_ADDR_OWVAR 42
29797: PUSH
29798: LD_INT 3
29800: ST_TO_ADDR
29801: GO 30182
29803: LD_INT 16
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29811
29809: GO 29822
29811: POP
// bc_type := b_ext_gun ; 17 :
29812: LD_ADDR_OWVAR 42
29816: PUSH
29817: LD_INT 17
29819: ST_TO_ADDR
29820: GO 30182
29822: LD_INT 17
29824: DOUBLE
29825: EQUAL
29826: IFTRUE 29830
29828: GO 29858
29830: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29831: LD_ADDR_OWVAR 42
29835: PUSH
29836: LD_INT 19
29838: PUSH
29839: LD_INT 23
29841: PUSH
29842: LD_INT 19
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: PUSH
29850: LD_VAR 0 1
29854: ARRAY
29855: ST_TO_ADDR
29856: GO 30182
29858: LD_INT 18
29860: DOUBLE
29861: EQUAL
29862: IFTRUE 29866
29864: GO 29877
29866: POP
// bc_type := b_ext_radar ; 19 :
29867: LD_ADDR_OWVAR 42
29871: PUSH
29872: LD_INT 20
29874: ST_TO_ADDR
29875: GO 30182
29877: LD_INT 19
29879: DOUBLE
29880: EQUAL
29881: IFTRUE 29885
29883: GO 29896
29885: POP
// bc_type := b_ext_radio ; 20 :
29886: LD_ADDR_OWVAR 42
29890: PUSH
29891: LD_INT 22
29893: ST_TO_ADDR
29894: GO 30182
29896: LD_INT 20
29898: DOUBLE
29899: EQUAL
29900: IFTRUE 29904
29902: GO 29915
29904: POP
// bc_type := b_ext_siberium ; 21 :
29905: LD_ADDR_OWVAR 42
29909: PUSH
29910: LD_INT 21
29912: ST_TO_ADDR
29913: GO 30182
29915: LD_INT 21
29917: DOUBLE
29918: EQUAL
29919: IFTRUE 29923
29921: GO 29934
29923: POP
// bc_type := b_ext_computer ; 22 :
29924: LD_ADDR_OWVAR 42
29928: PUSH
29929: LD_INT 24
29931: ST_TO_ADDR
29932: GO 30182
29934: LD_INT 22
29936: DOUBLE
29937: EQUAL
29938: IFTRUE 29942
29940: GO 29953
29942: POP
// bc_type := b_ext_track ; 23 :
29943: LD_ADDR_OWVAR 42
29947: PUSH
29948: LD_INT 16
29950: ST_TO_ADDR
29951: GO 30182
29953: LD_INT 23
29955: DOUBLE
29956: EQUAL
29957: IFTRUE 29961
29959: GO 29972
29961: POP
// bc_type := b_ext_laser ; 24 :
29962: LD_ADDR_OWVAR 42
29966: PUSH
29967: LD_INT 25
29969: ST_TO_ADDR
29970: GO 30182
29972: LD_INT 24
29974: DOUBLE
29975: EQUAL
29976: IFTRUE 29980
29978: GO 29991
29980: POP
// bc_type := b_control_tower ; 25 :
29981: LD_ADDR_OWVAR 42
29985: PUSH
29986: LD_INT 36
29988: ST_TO_ADDR
29989: GO 30182
29991: LD_INT 25
29993: DOUBLE
29994: EQUAL
29995: IFTRUE 29999
29997: GO 30010
29999: POP
// bc_type := b_breastwork ; 26 :
30000: LD_ADDR_OWVAR 42
30004: PUSH
30005: LD_INT 31
30007: ST_TO_ADDR
30008: GO 30182
30010: LD_INT 26
30012: DOUBLE
30013: EQUAL
30014: IFTRUE 30018
30016: GO 30029
30018: POP
// bc_type := b_bunker ; 27 :
30019: LD_ADDR_OWVAR 42
30023: PUSH
30024: LD_INT 32
30026: ST_TO_ADDR
30027: GO 30182
30029: LD_INT 27
30031: DOUBLE
30032: EQUAL
30033: IFTRUE 30037
30035: GO 30048
30037: POP
// bc_type := b_turret ; 28 :
30038: LD_ADDR_OWVAR 42
30042: PUSH
30043: LD_INT 33
30045: ST_TO_ADDR
30046: GO 30182
30048: LD_INT 28
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30067
30056: POP
// bc_type := b_armoury ; 29 :
30057: LD_ADDR_OWVAR 42
30061: PUSH
30062: LD_INT 4
30064: ST_TO_ADDR
30065: GO 30182
30067: LD_INT 29
30069: DOUBLE
30070: EQUAL
30071: IFTRUE 30075
30073: GO 30086
30075: POP
// bc_type := b_barracks ; 30 :
30076: LD_ADDR_OWVAR 42
30080: PUSH
30081: LD_INT 5
30083: ST_TO_ADDR
30084: GO 30182
30086: LD_INT 30
30088: DOUBLE
30089: EQUAL
30090: IFTRUE 30094
30092: GO 30105
30094: POP
// bc_type := b_solar_power ; 31 :
30095: LD_ADDR_OWVAR 42
30099: PUSH
30100: LD_INT 27
30102: ST_TO_ADDR
30103: GO 30182
30105: LD_INT 31
30107: DOUBLE
30108: EQUAL
30109: IFTRUE 30113
30111: GO 30124
30113: POP
// bc_type := b_oil_power ; 32 :
30114: LD_ADDR_OWVAR 42
30118: PUSH
30119: LD_INT 26
30121: ST_TO_ADDR
30122: GO 30182
30124: LD_INT 32
30126: DOUBLE
30127: EQUAL
30128: IFTRUE 30132
30130: GO 30143
30132: POP
// bc_type := b_siberite_power ; 33 :
30133: LD_ADDR_OWVAR 42
30137: PUSH
30138: LD_INT 28
30140: ST_TO_ADDR
30141: GO 30182
30143: LD_INT 33
30145: DOUBLE
30146: EQUAL
30147: IFTRUE 30151
30149: GO 30162
30151: POP
// bc_type := b_oil_mine ; 34 :
30152: LD_ADDR_OWVAR 42
30156: PUSH
30157: LD_INT 29
30159: ST_TO_ADDR
30160: GO 30182
30162: LD_INT 34
30164: DOUBLE
30165: EQUAL
30166: IFTRUE 30170
30168: GO 30181
30170: POP
// bc_type := b_siberite_mine ; end ;
30171: LD_ADDR_OWVAR 42
30175: PUSH
30176: LD_INT 30
30178: ST_TO_ADDR
30179: GO 30182
30181: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30182: LD_ADDR_VAR 0 8
30186: PUSH
30187: LD_VAR 0 5
30191: PPUSH
30192: LD_VAR 0 6
30196: PPUSH
30197: LD_VAR 0 3
30201: PPUSH
30202: CALL_OW 47
30206: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30207: LD_OWVAR 42
30211: PUSH
30212: LD_INT 32
30214: PUSH
30215: LD_INT 33
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: IN
30222: IFFALSE 30238
// PlaceWeaponTurret ( b , weapon ) ;
30224: LD_VAR 0 8
30228: PPUSH
30229: LD_VAR 0 4
30233: PPUSH
30234: CALL_OW 431
// end ;
30238: LD_VAR 0 7
30242: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30243: LD_INT 0
30245: PPUSH
30246: PPUSH
30247: PPUSH
30248: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30249: LD_ADDR_VAR 0 4
30253: PUSH
30254: LD_INT 22
30256: PUSH
30257: LD_OWVAR 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: LD_INT 30
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 30
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: LIST
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PPUSH
30298: CALL_OW 69
30302: ST_TO_ADDR
// if not tmp then
30303: LD_VAR 0 4
30307: NOT
30308: IFFALSE 30312
// exit ;
30310: GO 30371
// for i in tmp do
30312: LD_ADDR_VAR 0 2
30316: PUSH
30317: LD_VAR 0 4
30321: PUSH
30322: FOR_IN
30323: IFFALSE 30369
// for j = 1 to 3 do
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: DOUBLE
30331: LD_INT 1
30333: DEC
30334: ST_TO_ADDR
30335: LD_INT 3
30337: PUSH
30338: FOR_TO
30339: IFFALSE 30365
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30341: LD_VAR 0 2
30345: PPUSH
30346: CALL_OW 274
30350: PPUSH
30351: LD_VAR 0 3
30355: PPUSH
30356: LD_INT 99999
30358: PPUSH
30359: CALL_OW 277
30363: GO 30338
30365: POP
30366: POP
30367: GO 30322
30369: POP
30370: POP
// end ;
30371: LD_VAR 0 1
30375: RET
// export function hHackSetLevel10 ; var i , j ; begin
30376: LD_INT 0
30378: PPUSH
30379: PPUSH
30380: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30381: LD_ADDR_VAR 0 2
30385: PUSH
30386: LD_INT 21
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PPUSH
30396: CALL_OW 69
30400: PUSH
30401: FOR_IN
30402: IFFALSE 30454
// if IsSelected ( i ) then
30404: LD_VAR 0 2
30408: PPUSH
30409: CALL_OW 306
30413: IFFALSE 30452
// begin for j := 1 to 4 do
30415: LD_ADDR_VAR 0 3
30419: PUSH
30420: DOUBLE
30421: LD_INT 1
30423: DEC
30424: ST_TO_ADDR
30425: LD_INT 4
30427: PUSH
30428: FOR_TO
30429: IFFALSE 30450
// SetSkill ( i , j , 10 ) ;
30431: LD_VAR 0 2
30435: PPUSH
30436: LD_VAR 0 3
30440: PPUSH
30441: LD_INT 10
30443: PPUSH
30444: CALL_OW 237
30448: GO 30428
30450: POP
30451: POP
// end ;
30452: GO 30401
30454: POP
30455: POP
// end ;
30456: LD_VAR 0 1
30460: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30461: LD_INT 0
30463: PPUSH
30464: PPUSH
30465: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30466: LD_ADDR_VAR 0 2
30470: PUSH
30471: LD_INT 22
30473: PUSH
30474: LD_OWVAR 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 21
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PPUSH
30497: CALL_OW 69
30501: PUSH
30502: FOR_IN
30503: IFFALSE 30544
// begin for j := 1 to 4 do
30505: LD_ADDR_VAR 0 3
30509: PUSH
30510: DOUBLE
30511: LD_INT 1
30513: DEC
30514: ST_TO_ADDR
30515: LD_INT 4
30517: PUSH
30518: FOR_TO
30519: IFFALSE 30540
// SetSkill ( i , j , 10 ) ;
30521: LD_VAR 0 2
30525: PPUSH
30526: LD_VAR 0 3
30530: PPUSH
30531: LD_INT 10
30533: PPUSH
30534: CALL_OW 237
30538: GO 30518
30540: POP
30541: POP
// end ;
30542: GO 30502
30544: POP
30545: POP
// end ;
30546: LD_VAR 0 1
30550: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30551: LD_INT 0
30553: PPUSH
// uc_side := your_side ;
30554: LD_ADDR_OWVAR 20
30558: PUSH
30559: LD_OWVAR 2
30563: ST_TO_ADDR
// uc_nation := nation ;
30564: LD_ADDR_OWVAR 21
30568: PUSH
30569: LD_VAR 0 1
30573: ST_TO_ADDR
// InitHc ;
30574: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30578: LD_INT 0
30580: PPUSH
30581: LD_VAR 0 2
30585: PPUSH
30586: LD_VAR 0 3
30590: PPUSH
30591: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30595: LD_VAR 0 4
30599: PPUSH
30600: LD_VAR 0 5
30604: PPUSH
30605: CALL_OW 428
30609: PUSH
30610: LD_INT 0
30612: EQUAL
30613: IFFALSE 30637
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30615: CALL_OW 44
30619: PPUSH
30620: LD_VAR 0 4
30624: PPUSH
30625: LD_VAR 0 5
30629: PPUSH
30630: LD_INT 1
30632: PPUSH
30633: CALL_OW 48
// end ;
30637: LD_VAR 0 6
30641: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30642: LD_INT 0
30644: PPUSH
30645: PPUSH
// uc_side := your_side ;
30646: LD_ADDR_OWVAR 20
30650: PUSH
30651: LD_OWVAR 2
30655: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30656: LD_VAR 0 1
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: LD_INT 4
30672: PUSH
30673: LD_INT 5
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: IN
30683: IFFALSE 30695
// uc_nation := nation_american else
30685: LD_ADDR_OWVAR 21
30689: PUSH
30690: LD_INT 1
30692: ST_TO_ADDR
30693: GO 30738
// if chassis in [ 11 , 12 , 13 , 14 ] then
30695: LD_VAR 0 1
30699: PUSH
30700: LD_INT 11
30702: PUSH
30703: LD_INT 12
30705: PUSH
30706: LD_INT 13
30708: PUSH
30709: LD_INT 14
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: IN
30718: IFFALSE 30730
// uc_nation := nation_arabian else
30720: LD_ADDR_OWVAR 21
30724: PUSH
30725: LD_INT 2
30727: ST_TO_ADDR
30728: GO 30738
// uc_nation := nation_russian ;
30730: LD_ADDR_OWVAR 21
30734: PUSH
30735: LD_INT 3
30737: ST_TO_ADDR
// vc_chassis := chassis ;
30738: LD_ADDR_OWVAR 37
30742: PUSH
30743: LD_VAR 0 1
30747: ST_TO_ADDR
// vc_engine := engine ;
30748: LD_ADDR_OWVAR 39
30752: PUSH
30753: LD_VAR 0 2
30757: ST_TO_ADDR
// vc_control := control ;
30758: LD_ADDR_OWVAR 38
30762: PUSH
30763: LD_VAR 0 3
30767: ST_TO_ADDR
// vc_weapon := weapon ;
30768: LD_ADDR_OWVAR 40
30772: PUSH
30773: LD_VAR 0 4
30777: ST_TO_ADDR
// un := CreateVehicle ;
30778: LD_ADDR_VAR 0 8
30782: PUSH
30783: CALL_OW 45
30787: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30788: LD_VAR 0 8
30792: PPUSH
30793: LD_INT 0
30795: PPUSH
30796: LD_INT 5
30798: PPUSH
30799: CALL_OW 12
30803: PPUSH
30804: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30808: LD_VAR 0 8
30812: PPUSH
30813: LD_VAR 0 5
30817: PPUSH
30818: LD_VAR 0 6
30822: PPUSH
30823: LD_INT 1
30825: PPUSH
30826: CALL_OW 48
// end ;
30830: LD_VAR 0 7
30834: RET
// export hInvincible ; every 1 do
30835: GO 30837
30837: DISABLE
// hInvincible := [ ] ;
30838: LD_ADDR_EXP 109
30842: PUSH
30843: EMPTY
30844: ST_TO_ADDR
30845: END
// every 10 do var i ;
30846: GO 30848
30848: DISABLE
30849: LD_INT 0
30851: PPUSH
// begin enable ;
30852: ENABLE
// if not hInvincible then
30853: LD_EXP 109
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 30906
// for i in hInvincible do
30862: LD_ADDR_VAR 0 1
30866: PUSH
30867: LD_EXP 109
30871: PUSH
30872: FOR_IN
30873: IFFALSE 30904
// if GetLives ( i ) < 1000 then
30875: LD_VAR 0 1
30879: PPUSH
30880: CALL_OW 256
30884: PUSH
30885: LD_INT 1000
30887: LESS
30888: IFFALSE 30902
// SetLives ( i , 1000 ) ;
30890: LD_VAR 0 1
30894: PPUSH
30895: LD_INT 1000
30897: PPUSH
30898: CALL_OW 234
30902: GO 30872
30904: POP
30905: POP
// end ;
30906: PPOPN 1
30908: END
// export function hHackInvincible ; var i ; begin
30909: LD_INT 0
30911: PPUSH
30912: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30913: LD_ADDR_VAR 0 2
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: LD_INT 21
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: PPUSH
30946: CALL_OW 69
30950: PUSH
30951: FOR_IN
30952: IFFALSE 31013
// if IsSelected ( i ) then
30954: LD_VAR 0 2
30958: PPUSH
30959: CALL_OW 306
30963: IFFALSE 31011
// begin if i in hInvincible then
30965: LD_VAR 0 2
30969: PUSH
30970: LD_EXP 109
30974: IN
30975: IFFALSE 30995
// hInvincible := hInvincible diff i else
30977: LD_ADDR_EXP 109
30981: PUSH
30982: LD_EXP 109
30986: PUSH
30987: LD_VAR 0 2
30991: DIFF
30992: ST_TO_ADDR
30993: GO 31011
// hInvincible := hInvincible union i ;
30995: LD_ADDR_EXP 109
30999: PUSH
31000: LD_EXP 109
31004: PUSH
31005: LD_VAR 0 2
31009: UNION
31010: ST_TO_ADDR
// end ;
31011: GO 30951
31013: POP
31014: POP
// end ;
31015: LD_VAR 0 1
31019: RET
// export function hHackInvisible ; var i , j ; begin
31020: LD_INT 0
31022: PPUSH
31023: PPUSH
31024: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31025: LD_ADDR_VAR 0 2
31029: PUSH
31030: LD_INT 21
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PPUSH
31040: CALL_OW 69
31044: PUSH
31045: FOR_IN
31046: IFFALSE 31070
// if IsSelected ( i ) then
31048: LD_VAR 0 2
31052: PPUSH
31053: CALL_OW 306
31057: IFFALSE 31068
// ComForceInvisible ( i ) ;
31059: LD_VAR 0 2
31063: PPUSH
31064: CALL_OW 496
31068: GO 31045
31070: POP
31071: POP
// end ;
31072: LD_VAR 0 1
31076: RET
// export function hHackChangeYourSide ; begin
31077: LD_INT 0
31079: PPUSH
// if your_side = 8 then
31080: LD_OWVAR 2
31084: PUSH
31085: LD_INT 8
31087: EQUAL
31088: IFFALSE 31100
// your_side := 0 else
31090: LD_ADDR_OWVAR 2
31094: PUSH
31095: LD_INT 0
31097: ST_TO_ADDR
31098: GO 31114
// your_side := your_side + 1 ;
31100: LD_ADDR_OWVAR 2
31104: PUSH
31105: LD_OWVAR 2
31109: PUSH
31110: LD_INT 1
31112: PLUS
31113: ST_TO_ADDR
// end ;
31114: LD_VAR 0 1
31118: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31119: LD_INT 0
31121: PPUSH
31122: PPUSH
31123: PPUSH
// for i in all_units do
31124: LD_ADDR_VAR 0 2
31128: PUSH
31129: LD_OWVAR 3
31133: PUSH
31134: FOR_IN
31135: IFFALSE 31213
// if IsSelected ( i ) then
31137: LD_VAR 0 2
31141: PPUSH
31142: CALL_OW 306
31146: IFFALSE 31211
// begin j := GetSide ( i ) ;
31148: LD_ADDR_VAR 0 3
31152: PUSH
31153: LD_VAR 0 2
31157: PPUSH
31158: CALL_OW 255
31162: ST_TO_ADDR
// if j = 8 then
31163: LD_VAR 0 3
31167: PUSH
31168: LD_INT 8
31170: EQUAL
31171: IFFALSE 31183
// j := 0 else
31173: LD_ADDR_VAR 0 3
31177: PUSH
31178: LD_INT 0
31180: ST_TO_ADDR
31181: GO 31197
// j := j + 1 ;
31183: LD_ADDR_VAR 0 3
31187: PUSH
31188: LD_VAR 0 3
31192: PUSH
31193: LD_INT 1
31195: PLUS
31196: ST_TO_ADDR
// SetSide ( i , j ) ;
31197: LD_VAR 0 2
31201: PPUSH
31202: LD_VAR 0 3
31206: PPUSH
31207: CALL_OW 235
// end ;
31211: GO 31134
31213: POP
31214: POP
// end ;
31215: LD_VAR 0 1
31219: RET
// export function hHackFog ; begin
31220: LD_INT 0
31222: PPUSH
// FogOff ( true ) ;
31223: LD_INT 1
31225: PPUSH
31226: CALL_OW 344
// end ;
31230: LD_VAR 0 1
31234: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31235: LD_INT 0
31237: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31238: LD_VAR 0 1
31242: PPUSH
31243: LD_VAR 0 2
31247: PPUSH
31248: LD_VAR 0 3
31252: PPUSH
31253: LD_INT 1
31255: PPUSH
31256: LD_INT 1
31258: PPUSH
31259: CALL_OW 483
// CenterOnXY ( x , y ) ;
31263: LD_VAR 0 2
31267: PPUSH
31268: LD_VAR 0 3
31272: PPUSH
31273: CALL_OW 84
// end ; end_of_file
31277: LD_VAR 0 4
31281: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31282: LD_VAR 0 1
31286: PUSH
31287: LD_INT 200
31289: DOUBLE
31290: GREATEREQUAL
31291: IFFALSE 31299
31293: LD_INT 299
31295: DOUBLE
31296: LESSEQUAL
31297: IFTRUE 31301
31299: GO 31333
31301: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
31302: LD_VAR 0 1
31306: PPUSH
31307: LD_VAR 0 2
31311: PPUSH
31312: LD_VAR 0 3
31316: PPUSH
31317: LD_VAR 0 4
31321: PPUSH
31322: LD_VAR 0 5
31326: PPUSH
31327: CALL 31823 0 5
31331: GO 31410
31333: LD_INT 300
31335: DOUBLE
31336: GREATEREQUAL
31337: IFFALSE 31345
31339: LD_INT 399
31341: DOUBLE
31342: LESSEQUAL
31343: IFTRUE 31347
31345: GO 31409
31347: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
31348: LD_VAR 0 1
31352: PPUSH
31353: LD_VAR 0 2
31357: PPUSH
31358: LD_VAR 0 3
31362: PPUSH
31363: LD_VAR 0 4
31367: PPUSH
31368: LD_VAR 0 5
31372: PPUSH
31373: LD_VAR 0 6
31377: PPUSH
31378: LD_VAR 0 7
31382: PPUSH
31383: LD_VAR 0 8
31387: PPUSH
31388: LD_VAR 0 9
31392: PPUSH
31393: LD_VAR 0 10
31397: PPUSH
31398: LD_VAR 0 11
31402: PPUSH
31403: CALL 29302 0 11
31407: GO 31410
31409: POP
// end ;
31410: PPOPN 11
31412: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
31413: LD_VAR 0 1
31417: PPUSH
31418: LD_VAR 0 2
31422: PPUSH
31423: LD_VAR 0 3
31427: PPUSH
31428: LD_VAR 0 4
31432: PPUSH
31433: LD_VAR 0 5
31437: PPUSH
31438: CALL 31559 0 5
// end ; end_of_file
31442: PPOPN 5
31444: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31445: LD_INT 0
31447: PPUSH
31448: PPUSH
31449: PPUSH
31450: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31451: LD_VAR 0 1
31455: PPUSH
31456: CALL_OW 264
31460: PUSH
31461: LD_EXP 125
31465: EQUAL
31466: IFFALSE 31538
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31468: LD_INT 68
31470: PPUSH
31471: LD_VAR 0 1
31475: PPUSH
31476: CALL_OW 255
31480: PPUSH
31481: CALL_OW 321
31485: PUSH
31486: LD_INT 2
31488: EQUAL
31489: IFFALSE 31501
// eff := 70 else
31491: LD_ADDR_VAR 0 4
31495: PUSH
31496: LD_INT 70
31498: ST_TO_ADDR
31499: GO 31509
// eff := 30 ;
31501: LD_ADDR_VAR 0 4
31505: PUSH
31506: LD_INT 30
31508: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31509: LD_VAR 0 1
31513: PPUSH
31514: CALL_OW 250
31518: PPUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: CALL_OW 251
31528: PPUSH
31529: LD_VAR 0 4
31533: PPUSH
31534: CALL_OW 495
// end ; end ;
31538: LD_VAR 0 2
31542: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31543: LD_INT 0
31545: PPUSH
// end ;
31546: LD_VAR 0 4
31550: RET
// export function SOS_Command ( cmd ) ; begin
31551: LD_INT 0
31553: PPUSH
// end ;
31554: LD_VAR 0 2
31558: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31559: LD_INT 0
31561: PPUSH
// end ;
31562: LD_VAR 0 6
31566: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31567: LD_INT 0
31569: PPUSH
31570: PPUSH
// if not vehicle or not factory then
31571: LD_VAR 0 1
31575: NOT
31576: PUSH
31577: LD_VAR 0 2
31581: NOT
31582: OR
31583: IFFALSE 31587
// exit ;
31585: GO 31818
// if factoryWaypoints >= factory then
31587: LD_EXP 110
31591: PUSH
31592: LD_VAR 0 2
31596: GREATEREQUAL
31597: IFFALSE 31818
// if factoryWaypoints [ factory ] then
31599: LD_EXP 110
31603: PUSH
31604: LD_VAR 0 2
31608: ARRAY
31609: IFFALSE 31818
// begin if GetControl ( vehicle ) = control_manual then
31611: LD_VAR 0 1
31615: PPUSH
31616: CALL_OW 263
31620: PUSH
31621: LD_INT 1
31623: EQUAL
31624: IFFALSE 31705
// begin driver := IsDrivenBy ( vehicle ) ;
31626: LD_ADDR_VAR 0 4
31630: PUSH
31631: LD_VAR 0 1
31635: PPUSH
31636: CALL_OW 311
31640: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
31641: LD_VAR 0 4
31645: PPUSH
31646: LD_EXP 110
31650: PUSH
31651: LD_VAR 0 2
31655: ARRAY
31656: PUSH
31657: LD_INT 1
31659: ARRAY
31660: PPUSH
31661: LD_EXP 110
31665: PUSH
31666: LD_VAR 0 2
31670: ARRAY
31671: PUSH
31672: LD_INT 2
31674: ARRAY
31675: PPUSH
31676: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31680: LD_VAR 0 4
31684: PPUSH
31685: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31689: LD_VAR 0 4
31693: PPUSH
31694: LD_VAR 0 2
31698: PPUSH
31699: CALL_OW 180
// end else
31703: GO 31818
// if GetControl ( vehicle ) = control_remote then
31705: LD_VAR 0 1
31709: PPUSH
31710: CALL_OW 263
31714: PUSH
31715: LD_INT 2
31717: EQUAL
31718: IFFALSE 31779
// begin wait ( 0 0$2 ) ;
31720: LD_INT 70
31722: PPUSH
31723: CALL_OW 67
// if Connect ( vehicle ) then
31727: LD_VAR 0 1
31731: PPUSH
31732: CALL 44210 0 1
31736: IFFALSE 31777
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
31738: LD_VAR 0 1
31742: PPUSH
31743: LD_EXP 110
31747: PUSH
31748: LD_VAR 0 2
31752: ARRAY
31753: PUSH
31754: LD_INT 1
31756: ARRAY
31757: PPUSH
31758: LD_EXP 110
31762: PUSH
31763: LD_VAR 0 2
31767: ARRAY
31768: PUSH
31769: LD_INT 2
31771: ARRAY
31772: PPUSH
31773: CALL_OW 171
// end else
31777: GO 31818
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
31779: LD_VAR 0 1
31783: PPUSH
31784: LD_EXP 110
31788: PUSH
31789: LD_VAR 0 2
31793: ARRAY
31794: PUSH
31795: LD_INT 1
31797: ARRAY
31798: PPUSH
31799: LD_EXP 110
31803: PUSH
31804: LD_VAR 0 2
31808: ARRAY
31809: PUSH
31810: LD_INT 2
31812: ARRAY
31813: PPUSH
31814: CALL_OW 171
// end ; end ;
31818: LD_VAR 0 3
31822: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31823: LD_INT 0
31825: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31826: LD_VAR 0 1
31830: PUSH
31831: LD_INT 250
31833: EQUAL
31834: PUSH
31835: LD_VAR 0 2
31839: PPUSH
31840: CALL_OW 264
31844: PUSH
31845: LD_EXP 128
31849: EQUAL
31850: AND
31851: IFFALSE 31872
// MinerPlaceMine ( unit , x , y ) ;
31853: LD_VAR 0 2
31857: PPUSH
31858: LD_VAR 0 4
31862: PPUSH
31863: LD_VAR 0 5
31867: PPUSH
31868: CALL 34600 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31872: LD_VAR 0 1
31876: PUSH
31877: LD_INT 251
31879: EQUAL
31880: PUSH
31881: LD_VAR 0 2
31885: PPUSH
31886: CALL_OW 264
31890: PUSH
31891: LD_EXP 128
31895: EQUAL
31896: AND
31897: IFFALSE 31918
// MinerDetonateMine ( unit , x , y ) ;
31899: LD_VAR 0 2
31903: PPUSH
31904: LD_VAR 0 4
31908: PPUSH
31909: LD_VAR 0 5
31913: PPUSH
31914: CALL 34877 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31918: LD_VAR 0 1
31922: PUSH
31923: LD_INT 252
31925: EQUAL
31926: PUSH
31927: LD_VAR 0 2
31931: PPUSH
31932: CALL_OW 264
31936: PUSH
31937: LD_EXP 128
31941: EQUAL
31942: AND
31943: IFFALSE 31964
// MinerCreateMinefield ( unit , x , y ) ;
31945: LD_VAR 0 2
31949: PPUSH
31950: LD_VAR 0 4
31954: PPUSH
31955: LD_VAR 0 5
31959: PPUSH
31960: CALL 35294 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31964: LD_VAR 0 1
31968: PUSH
31969: LD_INT 253
31971: EQUAL
31972: PUSH
31973: LD_VAR 0 2
31977: PPUSH
31978: CALL_OW 257
31982: PUSH
31983: LD_INT 5
31985: EQUAL
31986: AND
31987: IFFALSE 32008
// ComBinocular ( unit , x , y ) ;
31989: LD_VAR 0 2
31993: PPUSH
31994: LD_VAR 0 4
31998: PPUSH
31999: LD_VAR 0 5
32003: PPUSH
32004: CALL 35665 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32008: LD_VAR 0 1
32012: PUSH
32013: LD_INT 254
32015: EQUAL
32016: PUSH
32017: LD_VAR 0 2
32021: PPUSH
32022: CALL_OW 264
32026: PUSH
32027: LD_EXP 123
32031: EQUAL
32032: AND
32033: PUSH
32034: LD_VAR 0 3
32038: PPUSH
32039: CALL_OW 263
32043: PUSH
32044: LD_INT 3
32046: EQUAL
32047: AND
32048: IFFALSE 32064
// HackDestroyVehicle ( unit , selectedUnit ) ;
32050: LD_VAR 0 2
32054: PPUSH
32055: LD_VAR 0 3
32059: PPUSH
32060: CALL 33960 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32064: LD_VAR 0 1
32068: PUSH
32069: LD_INT 255
32071: EQUAL
32072: PUSH
32073: LD_VAR 0 2
32077: PPUSH
32078: CALL_OW 264
32082: PUSH
32083: LD_INT 14
32085: PUSH
32086: LD_INT 53
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: IN
32093: AND
32094: PUSH
32095: LD_VAR 0 4
32099: PPUSH
32100: LD_VAR 0 5
32104: PPUSH
32105: CALL_OW 488
32109: AND
32110: IFFALSE 32134
// CutTreeXYR ( unit , x , y , 12 ) ;
32112: LD_VAR 0 2
32116: PPUSH
32117: LD_VAR 0 4
32121: PPUSH
32122: LD_VAR 0 5
32126: PPUSH
32127: LD_INT 12
32129: PPUSH
32130: CALL 32526 0 4
// if cmd = 256 then
32134: LD_VAR 0 1
32138: PUSH
32139: LD_INT 256
32141: EQUAL
32142: IFFALSE 32163
// SetFactoryWaypoint ( unit , x , y ) ;
32144: LD_VAR 0 2
32148: PPUSH
32149: LD_VAR 0 4
32153: PPUSH
32154: LD_VAR 0 5
32158: PPUSH
32159: CALL 32168 0 3
// end ;
32163: LD_VAR 0 6
32167: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32168: LD_INT 0
32170: PPUSH
32171: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32172: LD_VAR 0 1
32176: NOT
32177: PUSH
32178: LD_VAR 0 2
32182: PPUSH
32183: LD_VAR 0 3
32187: PPUSH
32188: CALL_OW 488
32192: NOT
32193: OR
32194: PUSH
32195: LD_VAR 0 1
32199: PPUSH
32200: CALL_OW 266
32204: PUSH
32205: LD_INT 3
32207: NONEQUAL
32208: PUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL_OW 247
32218: PUSH
32219: LD_INT 1
32221: EQUAL
32222: NOT
32223: AND
32224: OR
32225: IFFALSE 32229
// exit ;
32227: GO 32378
// if GetType ( factory ) = unit_human then
32229: LD_VAR 0 1
32233: PPUSH
32234: CALL_OW 247
32238: PUSH
32239: LD_INT 1
32241: EQUAL
32242: IFFALSE 32259
// factory := IsInUnit ( factory ) ;
32244: LD_ADDR_VAR 0 1
32248: PUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: CALL_OW 310
32258: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32259: LD_VAR 0 1
32263: PPUSH
32264: CALL_OW 266
32268: PUSH
32269: LD_INT 3
32271: NONEQUAL
32272: IFFALSE 32276
// exit ;
32274: GO 32378
// if HexInfo ( x , y ) = factory then
32276: LD_VAR 0 2
32280: PPUSH
32281: LD_VAR 0 3
32285: PPUSH
32286: CALL_OW 428
32290: PUSH
32291: LD_VAR 0 1
32295: EQUAL
32296: IFFALSE 32323
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32298: LD_ADDR_EXP 110
32302: PUSH
32303: LD_EXP 110
32307: PPUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: LD_INT 0
32315: PPUSH
32316: CALL_OW 1
32320: ST_TO_ADDR
32321: GO 32374
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32323: LD_ADDR_EXP 110
32327: PUSH
32328: LD_EXP 110
32332: PPUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: LD_VAR 0 1
32342: PPUSH
32343: CALL_OW 255
32347: PUSH
32348: LD_VAR 0 1
32352: PUSH
32353: LD_VAR 0 2
32357: PUSH
32358: LD_VAR 0 3
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: PPUSH
32369: CALL_OW 1
32373: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32374: CALL 32383 0 0
// end ;
32378: LD_VAR 0 4
32382: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
32383: LD_INT 0
32385: PPUSH
32386: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32387: LD_STRING resetFactoryWaypoint();
32389: PPUSH
32390: CALL_OW 559
// if factoryWaypoints then
32394: LD_EXP 110
32398: IFFALSE 32521
// begin for i := 1 to factoryWaypoints do
32400: LD_ADDR_VAR 0 2
32404: PUSH
32405: DOUBLE
32406: LD_INT 1
32408: DEC
32409: ST_TO_ADDR
32410: LD_EXP 110
32414: PUSH
32415: FOR_TO
32416: IFFALSE 32519
// if factoryWaypoints [ i ] then
32418: LD_EXP 110
32422: PUSH
32423: LD_VAR 0 2
32427: ARRAY
32428: IFFALSE 32517
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
32430: LD_STRING setFactoryWaypointXY(
32432: PUSH
32433: LD_EXP 110
32437: PUSH
32438: LD_VAR 0 2
32442: ARRAY
32443: PUSH
32444: LD_INT 1
32446: ARRAY
32447: STR
32448: PUSH
32449: LD_STRING ,
32451: STR
32452: PUSH
32453: LD_EXP 110
32457: PUSH
32458: LD_VAR 0 2
32462: ARRAY
32463: PUSH
32464: LD_INT 2
32466: ARRAY
32467: STR
32468: PUSH
32469: LD_STRING ,
32471: STR
32472: PUSH
32473: LD_EXP 110
32477: PUSH
32478: LD_VAR 0 2
32482: ARRAY
32483: PUSH
32484: LD_INT 3
32486: ARRAY
32487: STR
32488: PUSH
32489: LD_STRING ,
32491: STR
32492: PUSH
32493: LD_EXP 110
32497: PUSH
32498: LD_VAR 0 2
32502: ARRAY
32503: PUSH
32504: LD_INT 4
32506: ARRAY
32507: STR
32508: PUSH
32509: LD_STRING )
32511: STR
32512: PPUSH
32513: CALL_OW 559
32517: GO 32415
32519: POP
32520: POP
// end ; end ;
32521: LD_VAR 0 1
32525: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32526: LD_INT 0
32528: PPUSH
32529: PPUSH
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32537: LD_VAR 0 1
32541: NOT
32542: PUSH
32543: LD_VAR 0 2
32547: PPUSH
32548: LD_VAR 0 3
32552: PPUSH
32553: CALL_OW 488
32557: NOT
32558: OR
32559: PUSH
32560: LD_VAR 0 4
32564: NOT
32565: OR
32566: IFFALSE 32570
// exit ;
32568: GO 32910
// list := [ ] ;
32570: LD_ADDR_VAR 0 13
32574: PUSH
32575: EMPTY
32576: ST_TO_ADDR
// if x - r < 0 then
32577: LD_VAR 0 2
32581: PUSH
32582: LD_VAR 0 4
32586: MINUS
32587: PUSH
32588: LD_INT 0
32590: LESS
32591: IFFALSE 32603
// min_x := 0 else
32593: LD_ADDR_VAR 0 7
32597: PUSH
32598: LD_INT 0
32600: ST_TO_ADDR
32601: GO 32619
// min_x := x - r ;
32603: LD_ADDR_VAR 0 7
32607: PUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_VAR 0 4
32617: MINUS
32618: ST_TO_ADDR
// if y - r < 0 then
32619: LD_VAR 0 3
32623: PUSH
32624: LD_VAR 0 4
32628: MINUS
32629: PUSH
32630: LD_INT 0
32632: LESS
32633: IFFALSE 32645
// min_y := 0 else
32635: LD_ADDR_VAR 0 8
32639: PUSH
32640: LD_INT 0
32642: ST_TO_ADDR
32643: GO 32661
// min_y := y - r ;
32645: LD_ADDR_VAR 0 8
32649: PUSH
32650: LD_VAR 0 3
32654: PUSH
32655: LD_VAR 0 4
32659: MINUS
32660: ST_TO_ADDR
// max_x := x + r ;
32661: LD_ADDR_VAR 0 9
32665: PUSH
32666: LD_VAR 0 2
32670: PUSH
32671: LD_VAR 0 4
32675: PLUS
32676: ST_TO_ADDR
// max_y := y + r ;
32677: LD_ADDR_VAR 0 10
32681: PUSH
32682: LD_VAR 0 3
32686: PUSH
32687: LD_VAR 0 4
32691: PLUS
32692: ST_TO_ADDR
// for _x = min_x to max_x do
32693: LD_ADDR_VAR 0 11
32697: PUSH
32698: DOUBLE
32699: LD_VAR 0 7
32703: DEC
32704: ST_TO_ADDR
32705: LD_VAR 0 9
32709: PUSH
32710: FOR_TO
32711: IFFALSE 32828
// for _y = min_y to max_y do
32713: LD_ADDR_VAR 0 12
32717: PUSH
32718: DOUBLE
32719: LD_VAR 0 8
32723: DEC
32724: ST_TO_ADDR
32725: LD_VAR 0 10
32729: PUSH
32730: FOR_TO
32731: IFFALSE 32824
// begin if not ValidHex ( _x , _y ) then
32733: LD_VAR 0 11
32737: PPUSH
32738: LD_VAR 0 12
32742: PPUSH
32743: CALL_OW 488
32747: NOT
32748: IFFALSE 32752
// continue ;
32750: GO 32730
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32752: LD_VAR 0 11
32756: PPUSH
32757: LD_VAR 0 12
32761: PPUSH
32762: CALL_OW 351
32766: PUSH
32767: LD_VAR 0 11
32771: PPUSH
32772: LD_VAR 0 12
32776: PPUSH
32777: CALL_OW 554
32781: AND
32782: IFFALSE 32822
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32784: LD_ADDR_VAR 0 13
32788: PUSH
32789: LD_VAR 0 13
32793: PPUSH
32794: LD_VAR 0 13
32798: PUSH
32799: LD_INT 1
32801: PLUS
32802: PPUSH
32803: LD_VAR 0 11
32807: PUSH
32808: LD_VAR 0 12
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PPUSH
32817: CALL_OW 2
32821: ST_TO_ADDR
// end ;
32822: GO 32730
32824: POP
32825: POP
32826: GO 32710
32828: POP
32829: POP
// if not list then
32830: LD_VAR 0 13
32834: NOT
32835: IFFALSE 32839
// exit ;
32837: GO 32910
// for i in list do
32839: LD_ADDR_VAR 0 6
32843: PUSH
32844: LD_VAR 0 13
32848: PUSH
32849: FOR_IN
32850: IFFALSE 32908
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32852: LD_VAR 0 1
32856: PPUSH
32857: LD_STRING M
32859: PUSH
32860: LD_VAR 0 6
32864: PUSH
32865: LD_INT 1
32867: ARRAY
32868: PUSH
32869: LD_VAR 0 6
32873: PUSH
32874: LD_INT 2
32876: ARRAY
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: PUSH
32899: EMPTY
32900: LIST
32901: PPUSH
32902: CALL_OW 447
32906: GO 32849
32908: POP
32909: POP
// end ;
32910: LD_VAR 0 5
32914: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32915: LD_EXP 111
32919: NOT
32920: IFFALSE 32970
32922: GO 32924
32924: DISABLE
// begin initHack := true ;
32925: LD_ADDR_EXP 111
32929: PUSH
32930: LD_INT 1
32932: ST_TO_ADDR
// hackTanks := [ ] ;
32933: LD_ADDR_EXP 112
32937: PUSH
32938: EMPTY
32939: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32940: LD_ADDR_EXP 113
32944: PUSH
32945: EMPTY
32946: ST_TO_ADDR
// hackLimit := 3 ;
32947: LD_ADDR_EXP 114
32951: PUSH
32952: LD_INT 3
32954: ST_TO_ADDR
// hackDist := 12 ;
32955: LD_ADDR_EXP 115
32959: PUSH
32960: LD_INT 12
32962: ST_TO_ADDR
// hackCounter := [ ] ;
32963: LD_ADDR_EXP 116
32967: PUSH
32968: EMPTY
32969: ST_TO_ADDR
// end ;
32970: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32971: LD_EXP 111
32975: PUSH
32976: LD_INT 34
32978: PUSH
32979: LD_EXP 123
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PPUSH
32988: CALL_OW 69
32992: AND
32993: IFFALSE 33248
32995: GO 32997
32997: DISABLE
32998: LD_INT 0
33000: PPUSH
33001: PPUSH
// begin enable ;
33002: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33003: LD_ADDR_VAR 0 1
33007: PUSH
33008: LD_INT 34
33010: PUSH
33011: LD_EXP 123
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PPUSH
33020: CALL_OW 69
33024: PUSH
33025: FOR_IN
33026: IFFALSE 33246
// begin if not i in hackTanks then
33028: LD_VAR 0 1
33032: PUSH
33033: LD_EXP 112
33037: IN
33038: NOT
33039: IFFALSE 33122
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33041: LD_ADDR_EXP 112
33045: PUSH
33046: LD_EXP 112
33050: PPUSH
33051: LD_EXP 112
33055: PUSH
33056: LD_INT 1
33058: PLUS
33059: PPUSH
33060: LD_VAR 0 1
33064: PPUSH
33065: CALL_OW 1
33069: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33070: LD_ADDR_EXP 113
33074: PUSH
33075: LD_EXP 113
33079: PPUSH
33080: LD_EXP 113
33084: PUSH
33085: LD_INT 1
33087: PLUS
33088: PPUSH
33089: EMPTY
33090: PPUSH
33091: CALL_OW 1
33095: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33096: LD_ADDR_EXP 116
33100: PUSH
33101: LD_EXP 116
33105: PPUSH
33106: LD_EXP 116
33110: PUSH
33111: LD_INT 1
33113: PLUS
33114: PPUSH
33115: EMPTY
33116: PPUSH
33117: CALL_OW 1
33121: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33122: LD_VAR 0 1
33126: PPUSH
33127: CALL_OW 302
33131: NOT
33132: IFFALSE 33145
// begin HackUnlinkAll ( i ) ;
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL 33251 0 1
// continue ;
33143: GO 33025
// end ; HackCheckCapturedStatus ( i ) ;
33145: LD_VAR 0 1
33149: PPUSH
33150: CALL 33694 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33154: LD_ADDR_VAR 0 2
33158: PUSH
33159: LD_INT 81
33161: PUSH
33162: LD_VAR 0 1
33166: PPUSH
33167: CALL_OW 255
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 33
33178: PUSH
33179: LD_INT 3
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 91
33188: PUSH
33189: LD_VAR 0 1
33193: PUSH
33194: LD_EXP 115
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 50
33206: PUSH
33207: EMPTY
33208: LIST
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: PPUSH
33216: CALL_OW 69
33220: ST_TO_ADDR
// if not tmp then
33221: LD_VAR 0 2
33225: NOT
33226: IFFALSE 33230
// continue ;
33228: GO 33025
// HackLink ( i , tmp ) ;
33230: LD_VAR 0 1
33234: PPUSH
33235: LD_VAR 0 2
33239: PPUSH
33240: CALL 33387 0 2
// end ;
33244: GO 33025
33246: POP
33247: POP
// end ;
33248: PPOPN 2
33250: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33251: LD_INT 0
33253: PPUSH
33254: PPUSH
33255: PPUSH
// if not hack in hackTanks then
33256: LD_VAR 0 1
33260: PUSH
33261: LD_EXP 112
33265: IN
33266: NOT
33267: IFFALSE 33271
// exit ;
33269: GO 33382
// index := GetElementIndex ( hackTanks , hack ) ;
33271: LD_ADDR_VAR 0 4
33275: PUSH
33276: LD_EXP 112
33280: PPUSH
33281: LD_VAR 0 1
33285: PPUSH
33286: CALL 41024 0 2
33290: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33291: LD_EXP 113
33295: PUSH
33296: LD_VAR 0 4
33300: ARRAY
33301: IFFALSE 33382
// begin for i in hackTanksCaptured [ index ] do
33303: LD_ADDR_VAR 0 3
33307: PUSH
33308: LD_EXP 113
33312: PUSH
33313: LD_VAR 0 4
33317: ARRAY
33318: PUSH
33319: FOR_IN
33320: IFFALSE 33346
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33322: LD_VAR 0 3
33326: PUSH
33327: LD_INT 1
33329: ARRAY
33330: PPUSH
33331: LD_VAR 0 3
33335: PUSH
33336: LD_INT 2
33338: ARRAY
33339: PPUSH
33340: CALL_OW 235
33344: GO 33319
33346: POP
33347: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33348: LD_ADDR_EXP 113
33352: PUSH
33353: LD_EXP 113
33357: PPUSH
33358: LD_VAR 0 4
33362: PPUSH
33363: EMPTY
33364: PPUSH
33365: CALL_OW 1
33369: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33370: LD_VAR 0 1
33374: PPUSH
33375: LD_INT 0
33377: PPUSH
33378: CALL_OW 505
// end ; end ;
33382: LD_VAR 0 2
33386: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33387: LD_INT 0
33389: PPUSH
33390: PPUSH
33391: PPUSH
// if not hack in hackTanks or not vehicles then
33392: LD_VAR 0 1
33396: PUSH
33397: LD_EXP 112
33401: IN
33402: NOT
33403: PUSH
33404: LD_VAR 0 2
33408: NOT
33409: OR
33410: IFFALSE 33414
// exit ;
33412: GO 33689
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33414: LD_ADDR_VAR 0 2
33418: PUSH
33419: LD_VAR 0 1
33423: PPUSH
33424: LD_VAR 0 2
33428: PPUSH
33429: LD_INT 1
33431: PPUSH
33432: LD_INT 1
33434: PPUSH
33435: CALL 41674 0 4
33439: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33440: LD_ADDR_VAR 0 5
33444: PUSH
33445: LD_EXP 112
33449: PPUSH
33450: LD_VAR 0 1
33454: PPUSH
33455: CALL 41024 0 2
33459: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33460: LD_EXP 113
33464: PUSH
33465: LD_VAR 0 5
33469: ARRAY
33470: PUSH
33471: LD_EXP 114
33475: LESS
33476: IFFALSE 33665
// begin for i := 1 to vehicles do
33478: LD_ADDR_VAR 0 4
33482: PUSH
33483: DOUBLE
33484: LD_INT 1
33486: DEC
33487: ST_TO_ADDR
33488: LD_VAR 0 2
33492: PUSH
33493: FOR_TO
33494: IFFALSE 33663
// begin if hackTanksCaptured [ index ] = hackLimit then
33496: LD_EXP 113
33500: PUSH
33501: LD_VAR 0 5
33505: ARRAY
33506: PUSH
33507: LD_EXP 114
33511: EQUAL
33512: IFFALSE 33516
// break ;
33514: GO 33663
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33516: LD_ADDR_EXP 116
33520: PUSH
33521: LD_EXP 116
33525: PPUSH
33526: LD_VAR 0 5
33530: PPUSH
33531: LD_EXP 116
33535: PUSH
33536: LD_VAR 0 5
33540: ARRAY
33541: PUSH
33542: LD_INT 1
33544: PLUS
33545: PPUSH
33546: CALL_OW 1
33550: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33551: LD_ADDR_EXP 113
33555: PUSH
33556: LD_EXP 113
33560: PPUSH
33561: LD_VAR 0 5
33565: PUSH
33566: LD_EXP 113
33570: PUSH
33571: LD_VAR 0 5
33575: ARRAY
33576: PUSH
33577: LD_INT 1
33579: PLUS
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PPUSH
33585: LD_VAR 0 2
33589: PUSH
33590: LD_VAR 0 4
33594: ARRAY
33595: PUSH
33596: LD_VAR 0 2
33600: PUSH
33601: LD_VAR 0 4
33605: ARRAY
33606: PPUSH
33607: CALL_OW 255
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PPUSH
33616: CALL 41239 0 3
33620: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33621: LD_VAR 0 2
33625: PUSH
33626: LD_VAR 0 4
33630: ARRAY
33631: PPUSH
33632: LD_VAR 0 1
33636: PPUSH
33637: CALL_OW 255
33641: PPUSH
33642: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33646: LD_VAR 0 2
33650: PUSH
33651: LD_VAR 0 4
33655: ARRAY
33656: PPUSH
33657: CALL_OW 141
// end ;
33661: GO 33493
33663: POP
33664: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33665: LD_VAR 0 1
33669: PPUSH
33670: LD_EXP 113
33674: PUSH
33675: LD_VAR 0 5
33679: ARRAY
33680: PUSH
33681: LD_INT 0
33683: PLUS
33684: PPUSH
33685: CALL_OW 505
// end ;
33689: LD_VAR 0 3
33693: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33694: LD_INT 0
33696: PPUSH
33697: PPUSH
33698: PPUSH
33699: PPUSH
// if not hack in hackTanks then
33700: LD_VAR 0 1
33704: PUSH
33705: LD_EXP 112
33709: IN
33710: NOT
33711: IFFALSE 33715
// exit ;
33713: GO 33955
// index := GetElementIndex ( hackTanks , hack ) ;
33715: LD_ADDR_VAR 0 4
33719: PUSH
33720: LD_EXP 112
33724: PPUSH
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL 41024 0 2
33734: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: DOUBLE
33741: LD_EXP 113
33745: PUSH
33746: LD_VAR 0 4
33750: ARRAY
33751: INC
33752: ST_TO_ADDR
33753: LD_INT 1
33755: PUSH
33756: FOR_DOWNTO
33757: IFFALSE 33929
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33759: LD_ADDR_VAR 0 5
33763: PUSH
33764: LD_EXP 113
33768: PUSH
33769: LD_VAR 0 4
33773: ARRAY
33774: PUSH
33775: LD_VAR 0 3
33779: ARRAY
33780: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33781: LD_VAR 0 5
33785: PUSH
33786: LD_INT 1
33788: ARRAY
33789: PPUSH
33790: CALL_OW 302
33794: NOT
33795: PUSH
33796: LD_VAR 0 5
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: PPUSH
33805: CALL_OW 255
33809: PUSH
33810: LD_VAR 0 1
33814: PPUSH
33815: CALL_OW 255
33819: NONEQUAL
33820: OR
33821: IFFALSE 33927
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33823: LD_VAR 0 5
33827: PUSH
33828: LD_INT 1
33830: ARRAY
33831: PPUSH
33832: CALL_OW 305
33836: PUSH
33837: LD_VAR 0 5
33841: PUSH
33842: LD_INT 1
33844: ARRAY
33845: PPUSH
33846: CALL_OW 255
33850: PUSH
33851: LD_VAR 0 1
33855: PPUSH
33856: CALL_OW 255
33860: EQUAL
33861: AND
33862: IFFALSE 33886
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33864: LD_VAR 0 5
33868: PUSH
33869: LD_INT 1
33871: ARRAY
33872: PPUSH
33873: LD_VAR 0 5
33877: PUSH
33878: LD_INT 2
33880: ARRAY
33881: PPUSH
33882: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33886: LD_ADDR_EXP 113
33890: PUSH
33891: LD_EXP 113
33895: PPUSH
33896: LD_VAR 0 4
33900: PPUSH
33901: LD_EXP 113
33905: PUSH
33906: LD_VAR 0 4
33910: ARRAY
33911: PPUSH
33912: LD_VAR 0 3
33916: PPUSH
33917: CALL_OW 3
33921: PPUSH
33922: CALL_OW 1
33926: ST_TO_ADDR
// end ; end ;
33927: GO 33756
33929: POP
33930: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33931: LD_VAR 0 1
33935: PPUSH
33936: LD_EXP 113
33940: PUSH
33941: LD_VAR 0 4
33945: ARRAY
33946: PUSH
33947: LD_INT 0
33949: PLUS
33950: PPUSH
33951: CALL_OW 505
// end ;
33955: LD_VAR 0 2
33959: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33960: LD_INT 0
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
// if not hack in hackTanks then
33966: LD_VAR 0 1
33970: PUSH
33971: LD_EXP 112
33975: IN
33976: NOT
33977: IFFALSE 33981
// exit ;
33979: GO 34066
// index := GetElementIndex ( hackTanks , hack ) ;
33981: LD_ADDR_VAR 0 5
33985: PUSH
33986: LD_EXP 112
33990: PPUSH
33991: LD_VAR 0 1
33995: PPUSH
33996: CALL 41024 0 2
34000: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34001: LD_ADDR_VAR 0 4
34005: PUSH
34006: DOUBLE
34007: LD_INT 1
34009: DEC
34010: ST_TO_ADDR
34011: LD_EXP 113
34015: PUSH
34016: LD_VAR 0 5
34020: ARRAY
34021: PUSH
34022: FOR_TO
34023: IFFALSE 34064
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34025: LD_EXP 113
34029: PUSH
34030: LD_VAR 0 5
34034: ARRAY
34035: PUSH
34036: LD_VAR 0 4
34040: ARRAY
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PUSH
34046: LD_VAR 0 2
34050: EQUAL
34051: IFFALSE 34062
// KillUnit ( vehicle ) ;
34053: LD_VAR 0 2
34057: PPUSH
34058: CALL_OW 66
34062: GO 34022
34064: POP
34065: POP
// end ;
34066: LD_VAR 0 3
34070: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34071: LD_EXP 117
34075: NOT
34076: IFFALSE 34111
34078: GO 34080
34080: DISABLE
// begin initMiner := true ;
34081: LD_ADDR_EXP 117
34085: PUSH
34086: LD_INT 1
34088: ST_TO_ADDR
// minersList := [ ] ;
34089: LD_ADDR_EXP 118
34093: PUSH
34094: EMPTY
34095: ST_TO_ADDR
// minerMinesList := [ ] ;
34096: LD_ADDR_EXP 119
34100: PUSH
34101: EMPTY
34102: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34103: LD_ADDR_EXP 120
34107: PUSH
34108: LD_INT 5
34110: ST_TO_ADDR
// end ;
34111: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34112: LD_EXP 117
34116: PUSH
34117: LD_INT 34
34119: PUSH
34120: LD_EXP 128
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PPUSH
34129: CALL_OW 69
34133: AND
34134: IFFALSE 34597
34136: GO 34138
34138: DISABLE
34139: LD_INT 0
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
// begin enable ;
34145: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34146: LD_ADDR_VAR 0 1
34150: PUSH
34151: LD_INT 34
34153: PUSH
34154: LD_EXP 128
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PPUSH
34163: CALL_OW 69
34167: PUSH
34168: FOR_IN
34169: IFFALSE 34241
// begin if not i in minersList then
34171: LD_VAR 0 1
34175: PUSH
34176: LD_EXP 118
34180: IN
34181: NOT
34182: IFFALSE 34239
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34184: LD_ADDR_EXP 118
34188: PUSH
34189: LD_EXP 118
34193: PPUSH
34194: LD_EXP 118
34198: PUSH
34199: LD_INT 1
34201: PLUS
34202: PPUSH
34203: LD_VAR 0 1
34207: PPUSH
34208: CALL_OW 1
34212: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34213: LD_ADDR_EXP 119
34217: PUSH
34218: LD_EXP 119
34222: PPUSH
34223: LD_EXP 119
34227: PUSH
34228: LD_INT 1
34230: PLUS
34231: PPUSH
34232: EMPTY
34233: PPUSH
34234: CALL_OW 1
34238: ST_TO_ADDR
// end end ;
34239: GO 34168
34241: POP
34242: POP
// for i := minerMinesList downto 1 do
34243: LD_ADDR_VAR 0 1
34247: PUSH
34248: DOUBLE
34249: LD_EXP 119
34253: INC
34254: ST_TO_ADDR
34255: LD_INT 1
34257: PUSH
34258: FOR_DOWNTO
34259: IFFALSE 34595
// begin if IsLive ( minersList [ i ] ) then
34261: LD_EXP 118
34265: PUSH
34266: LD_VAR 0 1
34270: ARRAY
34271: PPUSH
34272: CALL_OW 300
34276: IFFALSE 34304
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34278: LD_EXP 118
34282: PUSH
34283: LD_VAR 0 1
34287: ARRAY
34288: PPUSH
34289: LD_EXP 119
34293: PUSH
34294: LD_VAR 0 1
34298: ARRAY
34299: PPUSH
34300: CALL_OW 505
// if not minerMinesList [ i ] then
34304: LD_EXP 119
34308: PUSH
34309: LD_VAR 0 1
34313: ARRAY
34314: NOT
34315: IFFALSE 34319
// continue ;
34317: GO 34258
// for j := minerMinesList [ i ] downto 1 do
34319: LD_ADDR_VAR 0 2
34323: PUSH
34324: DOUBLE
34325: LD_EXP 119
34329: PUSH
34330: LD_VAR 0 1
34334: ARRAY
34335: INC
34336: ST_TO_ADDR
34337: LD_INT 1
34339: PUSH
34340: FOR_DOWNTO
34341: IFFALSE 34591
// begin side := GetSide ( minersList [ i ] ) ;
34343: LD_ADDR_VAR 0 3
34347: PUSH
34348: LD_EXP 118
34352: PUSH
34353: LD_VAR 0 1
34357: ARRAY
34358: PPUSH
34359: CALL_OW 255
34363: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34364: LD_ADDR_VAR 0 4
34368: PUSH
34369: LD_EXP 119
34373: PUSH
34374: LD_VAR 0 1
34378: ARRAY
34379: PUSH
34380: LD_VAR 0 2
34384: ARRAY
34385: PUSH
34386: LD_INT 1
34388: ARRAY
34389: PPUSH
34390: LD_EXP 119
34394: PUSH
34395: LD_VAR 0 1
34399: ARRAY
34400: PUSH
34401: LD_VAR 0 2
34405: ARRAY
34406: PUSH
34407: LD_INT 2
34409: ARRAY
34410: PPUSH
34411: CALL_OW 428
34415: ST_TO_ADDR
// if not tmp then
34416: LD_VAR 0 4
34420: NOT
34421: IFFALSE 34425
// continue ;
34423: GO 34340
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34425: LD_VAR 0 4
34429: PUSH
34430: LD_INT 81
34432: PUSH
34433: LD_VAR 0 3
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PPUSH
34442: CALL_OW 69
34446: IN
34447: PUSH
34448: LD_EXP 119
34452: PUSH
34453: LD_VAR 0 1
34457: ARRAY
34458: PUSH
34459: LD_VAR 0 2
34463: ARRAY
34464: PUSH
34465: LD_INT 1
34467: ARRAY
34468: PPUSH
34469: LD_EXP 119
34473: PUSH
34474: LD_VAR 0 1
34478: ARRAY
34479: PUSH
34480: LD_VAR 0 2
34484: ARRAY
34485: PUSH
34486: LD_INT 2
34488: ARRAY
34489: PPUSH
34490: CALL_OW 458
34494: AND
34495: IFFALSE 34589
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34497: LD_EXP 119
34501: PUSH
34502: LD_VAR 0 1
34506: ARRAY
34507: PUSH
34508: LD_VAR 0 2
34512: ARRAY
34513: PUSH
34514: LD_INT 1
34516: ARRAY
34517: PPUSH
34518: LD_EXP 119
34522: PUSH
34523: LD_VAR 0 1
34527: ARRAY
34528: PUSH
34529: LD_VAR 0 2
34533: ARRAY
34534: PUSH
34535: LD_INT 2
34537: ARRAY
34538: PPUSH
34539: LD_VAR 0 3
34543: PPUSH
34544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34548: LD_ADDR_EXP 119
34552: PUSH
34553: LD_EXP 119
34557: PPUSH
34558: LD_VAR 0 1
34562: PPUSH
34563: LD_EXP 119
34567: PUSH
34568: LD_VAR 0 1
34572: ARRAY
34573: PPUSH
34574: LD_VAR 0 2
34578: PPUSH
34579: CALL_OW 3
34583: PPUSH
34584: CALL_OW 1
34588: ST_TO_ADDR
// end ; end ;
34589: GO 34340
34591: POP
34592: POP
// end ;
34593: GO 34258
34595: POP
34596: POP
// end ;
34597: PPOPN 4
34599: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34600: LD_INT 0
34602: PPUSH
34603: PPUSH
// result := false ;
34604: LD_ADDR_VAR 0 4
34608: PUSH
34609: LD_INT 0
34611: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 264
34621: PUSH
34622: LD_EXP 128
34626: EQUAL
34627: NOT
34628: IFFALSE 34632
// exit ;
34630: GO 34872
// index := GetElementIndex ( minersList , unit ) ;
34632: LD_ADDR_VAR 0 5
34636: PUSH
34637: LD_EXP 118
34641: PPUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL 41024 0 2
34651: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34652: LD_EXP 119
34656: PUSH
34657: LD_VAR 0 5
34661: ARRAY
34662: PUSH
34663: LD_EXP 120
34667: GREATEREQUAL
34668: IFFALSE 34672
// exit ;
34670: GO 34872
// ComMoveXY ( unit , x , y ) ;
34672: LD_VAR 0 1
34676: PPUSH
34677: LD_VAR 0 2
34681: PPUSH
34682: LD_VAR 0 3
34686: PPUSH
34687: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34691: LD_INT 35
34693: PPUSH
34694: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34698: LD_VAR 0 1
34702: PPUSH
34703: LD_VAR 0 2
34707: PPUSH
34708: LD_VAR 0 3
34712: PPUSH
34713: CALL 71796 0 3
34717: NOT
34718: PUSH
34719: LD_VAR 0 1
34723: PPUSH
34724: CALL_OW 314
34728: AND
34729: IFFALSE 34733
// exit ;
34731: GO 34872
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34733: LD_VAR 0 2
34737: PPUSH
34738: LD_VAR 0 3
34742: PPUSH
34743: CALL_OW 428
34747: PUSH
34748: LD_VAR 0 1
34752: EQUAL
34753: PUSH
34754: LD_VAR 0 1
34758: PPUSH
34759: CALL_OW 314
34763: NOT
34764: AND
34765: IFFALSE 34691
// PlaySoundXY ( x , y , PlantMine ) ;
34767: LD_VAR 0 2
34771: PPUSH
34772: LD_VAR 0 3
34776: PPUSH
34777: LD_STRING PlantMine
34779: PPUSH
34780: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34784: LD_VAR 0 2
34788: PPUSH
34789: LD_VAR 0 3
34793: PPUSH
34794: LD_VAR 0 1
34798: PPUSH
34799: CALL_OW 255
34803: PPUSH
34804: LD_INT 0
34806: PPUSH
34807: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34811: LD_ADDR_EXP 119
34815: PUSH
34816: LD_EXP 119
34820: PPUSH
34821: LD_VAR 0 5
34825: PUSH
34826: LD_EXP 119
34830: PUSH
34831: LD_VAR 0 5
34835: ARRAY
34836: PUSH
34837: LD_INT 1
34839: PLUS
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PPUSH
34845: LD_VAR 0 2
34849: PUSH
34850: LD_VAR 0 3
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PPUSH
34859: CALL 41239 0 3
34863: ST_TO_ADDR
// result := true ;
34864: LD_ADDR_VAR 0 4
34868: PUSH
34869: LD_INT 1
34871: ST_TO_ADDR
// end ;
34872: LD_VAR 0 4
34876: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34877: LD_INT 0
34879: PPUSH
34880: PPUSH
34881: PPUSH
// if not unit in minersList then
34882: LD_VAR 0 1
34886: PUSH
34887: LD_EXP 118
34891: IN
34892: NOT
34893: IFFALSE 34897
// exit ;
34895: GO 35289
// index := GetElementIndex ( minersList , unit ) ;
34897: LD_ADDR_VAR 0 6
34901: PUSH
34902: LD_EXP 118
34906: PPUSH
34907: LD_VAR 0 1
34911: PPUSH
34912: CALL 41024 0 2
34916: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34917: LD_ADDR_VAR 0 5
34921: PUSH
34922: DOUBLE
34923: LD_EXP 119
34927: PUSH
34928: LD_VAR 0 6
34932: ARRAY
34933: INC
34934: ST_TO_ADDR
34935: LD_INT 1
34937: PUSH
34938: FOR_DOWNTO
34939: IFFALSE 35100
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34941: LD_EXP 119
34945: PUSH
34946: LD_VAR 0 6
34950: ARRAY
34951: PUSH
34952: LD_VAR 0 5
34956: ARRAY
34957: PUSH
34958: LD_INT 1
34960: ARRAY
34961: PUSH
34962: LD_VAR 0 2
34966: EQUAL
34967: PUSH
34968: LD_EXP 119
34972: PUSH
34973: LD_VAR 0 6
34977: ARRAY
34978: PUSH
34979: LD_VAR 0 5
34983: ARRAY
34984: PUSH
34985: LD_INT 2
34987: ARRAY
34988: PUSH
34989: LD_VAR 0 3
34993: EQUAL
34994: AND
34995: IFFALSE 35098
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34997: LD_EXP 119
35001: PUSH
35002: LD_VAR 0 6
35006: ARRAY
35007: PUSH
35008: LD_VAR 0 5
35012: ARRAY
35013: PUSH
35014: LD_INT 1
35016: ARRAY
35017: PPUSH
35018: LD_EXP 119
35022: PUSH
35023: LD_VAR 0 6
35027: ARRAY
35028: PUSH
35029: LD_VAR 0 5
35033: ARRAY
35034: PUSH
35035: LD_INT 2
35037: ARRAY
35038: PPUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL_OW 255
35048: PPUSH
35049: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35053: LD_ADDR_EXP 119
35057: PUSH
35058: LD_EXP 119
35062: PPUSH
35063: LD_VAR 0 6
35067: PPUSH
35068: LD_EXP 119
35072: PUSH
35073: LD_VAR 0 6
35077: ARRAY
35078: PPUSH
35079: LD_VAR 0 5
35083: PPUSH
35084: CALL_OW 3
35088: PPUSH
35089: CALL_OW 1
35093: ST_TO_ADDR
// exit ;
35094: POP
35095: POP
35096: GO 35289
// end ; end ;
35098: GO 34938
35100: POP
35101: POP
// for i := minerMinesList [ index ] downto 1 do
35102: LD_ADDR_VAR 0 5
35106: PUSH
35107: DOUBLE
35108: LD_EXP 119
35112: PUSH
35113: LD_VAR 0 6
35117: ARRAY
35118: INC
35119: ST_TO_ADDR
35120: LD_INT 1
35122: PUSH
35123: FOR_DOWNTO
35124: IFFALSE 35287
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35126: LD_EXP 119
35130: PUSH
35131: LD_VAR 0 6
35135: ARRAY
35136: PUSH
35137: LD_VAR 0 5
35141: ARRAY
35142: PUSH
35143: LD_INT 1
35145: ARRAY
35146: PPUSH
35147: LD_EXP 119
35151: PUSH
35152: LD_VAR 0 6
35156: ARRAY
35157: PUSH
35158: LD_VAR 0 5
35162: ARRAY
35163: PUSH
35164: LD_INT 2
35166: ARRAY
35167: PPUSH
35168: LD_VAR 0 2
35172: PPUSH
35173: LD_VAR 0 3
35177: PPUSH
35178: CALL_OW 298
35182: PUSH
35183: LD_INT 6
35185: LESS
35186: IFFALSE 35285
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35188: LD_EXP 119
35192: PUSH
35193: LD_VAR 0 6
35197: ARRAY
35198: PUSH
35199: LD_VAR 0 5
35203: ARRAY
35204: PUSH
35205: LD_INT 1
35207: ARRAY
35208: PPUSH
35209: LD_EXP 119
35213: PUSH
35214: LD_VAR 0 6
35218: ARRAY
35219: PUSH
35220: LD_VAR 0 5
35224: ARRAY
35225: PUSH
35226: LD_INT 2
35228: ARRAY
35229: PPUSH
35230: LD_VAR 0 1
35234: PPUSH
35235: CALL_OW 255
35239: PPUSH
35240: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35244: LD_ADDR_EXP 119
35248: PUSH
35249: LD_EXP 119
35253: PPUSH
35254: LD_VAR 0 6
35258: PPUSH
35259: LD_EXP 119
35263: PUSH
35264: LD_VAR 0 6
35268: ARRAY
35269: PPUSH
35270: LD_VAR 0 5
35274: PPUSH
35275: CALL_OW 3
35279: PPUSH
35280: CALL_OW 1
35284: ST_TO_ADDR
// end ; end ;
35285: GO 35123
35287: POP
35288: POP
// end ;
35289: LD_VAR 0 4
35293: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35294: LD_INT 0
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
35303: PPUSH
35304: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35305: LD_VAR 0 1
35309: PPUSH
35310: CALL_OW 264
35314: PUSH
35315: LD_EXP 128
35319: EQUAL
35320: NOT
35321: PUSH
35322: LD_VAR 0 1
35326: PUSH
35327: LD_EXP 118
35331: IN
35332: NOT
35333: OR
35334: IFFALSE 35338
// exit ;
35336: GO 35660
// index := GetElementIndex ( minersList , unit ) ;
35338: LD_ADDR_VAR 0 6
35342: PUSH
35343: LD_EXP 118
35347: PPUSH
35348: LD_VAR 0 1
35352: PPUSH
35353: CALL 41024 0 2
35357: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35358: LD_ADDR_VAR 0 8
35362: PUSH
35363: LD_EXP 120
35367: PUSH
35368: LD_EXP 119
35372: PUSH
35373: LD_VAR 0 6
35377: ARRAY
35378: MINUS
35379: ST_TO_ADDR
// if not minesFreeAmount then
35380: LD_VAR 0 8
35384: NOT
35385: IFFALSE 35389
// exit ;
35387: GO 35660
// tmp := [ ] ;
35389: LD_ADDR_VAR 0 7
35393: PUSH
35394: EMPTY
35395: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35396: LD_ADDR_VAR 0 5
35400: PUSH
35401: DOUBLE
35402: LD_INT 1
35404: DEC
35405: ST_TO_ADDR
35406: LD_VAR 0 8
35410: PUSH
35411: FOR_TO
35412: IFFALSE 35607
// begin _d := rand ( 0 , 5 ) ;
35414: LD_ADDR_VAR 0 11
35418: PUSH
35419: LD_INT 0
35421: PPUSH
35422: LD_INT 5
35424: PPUSH
35425: CALL_OW 12
35429: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35430: LD_ADDR_VAR 0 12
35434: PUSH
35435: LD_INT 2
35437: PPUSH
35438: LD_INT 6
35440: PPUSH
35441: CALL_OW 12
35445: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35446: LD_ADDR_VAR 0 9
35450: PUSH
35451: LD_VAR 0 2
35455: PPUSH
35456: LD_VAR 0 11
35460: PPUSH
35461: LD_VAR 0 12
35465: PPUSH
35466: CALL_OW 272
35470: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35471: LD_ADDR_VAR 0 10
35475: PUSH
35476: LD_VAR 0 3
35480: PPUSH
35481: LD_VAR 0 11
35485: PPUSH
35486: LD_VAR 0 12
35490: PPUSH
35491: CALL_OW 273
35495: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35496: LD_VAR 0 9
35500: PPUSH
35501: LD_VAR 0 10
35505: PPUSH
35506: CALL_OW 488
35510: PUSH
35511: LD_VAR 0 9
35515: PUSH
35516: LD_VAR 0 10
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_VAR 0 7
35529: IN
35530: NOT
35531: AND
35532: PUSH
35533: LD_VAR 0 9
35537: PPUSH
35538: LD_VAR 0 10
35542: PPUSH
35543: CALL_OW 458
35547: NOT
35548: AND
35549: IFFALSE 35591
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35551: LD_ADDR_VAR 0 7
35555: PUSH
35556: LD_VAR 0 7
35560: PPUSH
35561: LD_VAR 0 7
35565: PUSH
35566: LD_INT 1
35568: PLUS
35569: PPUSH
35570: LD_VAR 0 9
35574: PUSH
35575: LD_VAR 0 10
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PPUSH
35584: CALL_OW 1
35588: ST_TO_ADDR
35589: GO 35605
// i := i - 1 ;
35591: LD_ADDR_VAR 0 5
35595: PUSH
35596: LD_VAR 0 5
35600: PUSH
35601: LD_INT 1
35603: MINUS
35604: ST_TO_ADDR
// end ;
35605: GO 35411
35607: POP
35608: POP
// for i in tmp do
35609: LD_ADDR_VAR 0 5
35613: PUSH
35614: LD_VAR 0 7
35618: PUSH
35619: FOR_IN
35620: IFFALSE 35658
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35622: LD_VAR 0 1
35626: PPUSH
35627: LD_VAR 0 5
35631: PUSH
35632: LD_INT 1
35634: ARRAY
35635: PPUSH
35636: LD_VAR 0 5
35640: PUSH
35641: LD_INT 2
35643: ARRAY
35644: PPUSH
35645: CALL 34600 0 3
35649: NOT
35650: IFFALSE 35656
// exit ;
35652: POP
35653: POP
35654: GO 35660
35656: GO 35619
35658: POP
35659: POP
// end ;
35660: LD_VAR 0 4
35664: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35665: LD_INT 0
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
// if not GetClass ( unit ) = class_sniper then
35674: LD_VAR 0 1
35678: PPUSH
35679: CALL_OW 257
35683: PUSH
35684: LD_INT 5
35686: EQUAL
35687: NOT
35688: IFFALSE 35692
// exit ;
35690: GO 36080
// dist := 8 ;
35692: LD_ADDR_VAR 0 5
35696: PUSH
35697: LD_INT 8
35699: ST_TO_ADDR
// viewRange := 12 ;
35700: LD_ADDR_VAR 0 7
35704: PUSH
35705: LD_INT 12
35707: ST_TO_ADDR
// side := GetSide ( unit ) ;
35708: LD_ADDR_VAR 0 6
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 255
35722: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35723: LD_INT 61
35725: PPUSH
35726: LD_VAR 0 6
35730: PPUSH
35731: CALL_OW 321
35735: PUSH
35736: LD_INT 2
35738: EQUAL
35739: IFFALSE 35749
// viewRange := 16 ;
35741: LD_ADDR_VAR 0 7
35745: PUSH
35746: LD_INT 16
35748: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35749: LD_VAR 0 1
35753: PPUSH
35754: LD_VAR 0 2
35758: PPUSH
35759: LD_VAR 0 3
35763: PPUSH
35764: CALL_OW 297
35768: PUSH
35769: LD_VAR 0 5
35773: GREATER
35774: IFFALSE 35853
// begin ComMoveXY ( unit , x , y ) ;
35776: LD_VAR 0 1
35780: PPUSH
35781: LD_VAR 0 2
35785: PPUSH
35786: LD_VAR 0 3
35790: PPUSH
35791: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35795: LD_INT 35
35797: PPUSH
35798: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35802: LD_VAR 0 1
35806: PPUSH
35807: LD_VAR 0 2
35811: PPUSH
35812: LD_VAR 0 3
35816: PPUSH
35817: CALL 71796 0 3
35821: NOT
35822: IFFALSE 35826
// exit ;
35824: GO 36080
// until GetDistUnitXY ( unit , x , y ) < dist ;
35826: LD_VAR 0 1
35830: PPUSH
35831: LD_VAR 0 2
35835: PPUSH
35836: LD_VAR 0 3
35840: PPUSH
35841: CALL_OW 297
35845: PUSH
35846: LD_VAR 0 5
35850: LESS
35851: IFFALSE 35795
// end ; ComTurnXY ( unit , x , y ) ;
35853: LD_VAR 0 1
35857: PPUSH
35858: LD_VAR 0 2
35862: PPUSH
35863: LD_VAR 0 3
35867: PPUSH
35868: CALL_OW 118
// wait ( 5 ) ;
35872: LD_INT 5
35874: PPUSH
35875: CALL_OW 67
// _d := GetDir ( unit ) ;
35879: LD_ADDR_VAR 0 10
35883: PUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 254
35893: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35894: LD_ADDR_VAR 0 8
35898: PUSH
35899: LD_VAR 0 1
35903: PPUSH
35904: CALL_OW 250
35908: PPUSH
35909: LD_VAR 0 10
35913: PPUSH
35914: LD_VAR 0 5
35918: PPUSH
35919: CALL_OW 272
35923: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35924: LD_ADDR_VAR 0 9
35928: PUSH
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL_OW 251
35938: PPUSH
35939: LD_VAR 0 10
35943: PPUSH
35944: LD_VAR 0 5
35948: PPUSH
35949: CALL_OW 273
35953: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35954: LD_VAR 0 8
35958: PPUSH
35959: LD_VAR 0 9
35963: PPUSH
35964: CALL_OW 488
35968: NOT
35969: IFFALSE 35973
// exit ;
35971: GO 36080
// ComAnimCustom ( unit , 1 ) ;
35973: LD_VAR 0 1
35977: PPUSH
35978: LD_INT 1
35980: PPUSH
35981: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35985: LD_VAR 0 8
35989: PPUSH
35990: LD_VAR 0 9
35994: PPUSH
35995: LD_VAR 0 6
35999: PPUSH
36000: LD_VAR 0 7
36004: PPUSH
36005: CALL_OW 330
// repeat wait ( 1 ) ;
36009: LD_INT 1
36011: PPUSH
36012: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36016: LD_VAR 0 1
36020: PPUSH
36021: CALL_OW 316
36025: PUSH
36026: LD_VAR 0 1
36030: PPUSH
36031: CALL_OW 314
36035: OR
36036: PUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL_OW 302
36046: NOT
36047: OR
36048: PUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 301
36058: OR
36059: IFFALSE 36009
// RemoveSeeing ( _x , _y , side ) ;
36061: LD_VAR 0 8
36065: PPUSH
36066: LD_VAR 0 9
36070: PPUSH
36071: LD_VAR 0 6
36075: PPUSH
36076: CALL_OW 331
// end ; end_of_file
36080: LD_VAR 0 4
36084: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
36085: LD_INT 0
36087: PPUSH
// ar_miner := 81 ;
36088: LD_ADDR_EXP 128
36092: PUSH
36093: LD_INT 81
36095: ST_TO_ADDR
// ar_crane := 88 ;
36096: LD_ADDR_EXP 127
36100: PUSH
36101: LD_INT 88
36103: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
36104: LD_ADDR_EXP 122
36108: PUSH
36109: LD_INT 89
36111: ST_TO_ADDR
// us_hack := 99 ;
36112: LD_ADDR_EXP 123
36116: PUSH
36117: LD_INT 99
36119: ST_TO_ADDR
// us_artillery := 97 ;
36120: LD_ADDR_EXP 124
36124: PUSH
36125: LD_INT 97
36127: ST_TO_ADDR
// ar_bio_bomb := 91 ;
36128: LD_ADDR_EXP 125
36132: PUSH
36133: LD_INT 91
36135: ST_TO_ADDR
// ar_mortar := 92 ;
36136: LD_ADDR_EXP 126
36140: PUSH
36141: LD_INT 92
36143: ST_TO_ADDR
// ru_radar := 98 ;
36144: LD_ADDR_EXP 121
36148: PUSH
36149: LD_INT 98
36151: ST_TO_ADDR
// tech_Artillery := 80 ;
36152: LD_ADDR_EXP 129
36156: PUSH
36157: LD_INT 80
36159: ST_TO_ADDR
// tech_RadMat := 81 ;
36160: LD_ADDR_EXP 130
36164: PUSH
36165: LD_INT 81
36167: ST_TO_ADDR
// tech_BasicTools := 82 ;
36168: LD_ADDR_EXP 131
36172: PUSH
36173: LD_INT 82
36175: ST_TO_ADDR
// tech_Cargo := 83 ;
36176: LD_ADDR_EXP 132
36180: PUSH
36181: LD_INT 83
36183: ST_TO_ADDR
// tech_Track := 84 ;
36184: LD_ADDR_EXP 133
36188: PUSH
36189: LD_INT 84
36191: ST_TO_ADDR
// tech_Crane := 85 ;
36192: LD_ADDR_EXP 134
36196: PUSH
36197: LD_INT 85
36199: ST_TO_ADDR
// tech_Bulldozer := 86 ;
36200: LD_ADDR_EXP 135
36204: PUSH
36205: LD_INT 86
36207: ST_TO_ADDR
// tech_Hovercraft := 87 ;
36208: LD_ADDR_EXP 136
36212: PUSH
36213: LD_INT 87
36215: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
36216: LD_ADDR_EXP 137
36220: PUSH
36221: LD_INT 88
36223: ST_TO_ADDR
// class_mastodont := 31 ;
36224: LD_ADDR_EXP 138
36228: PUSH
36229: LD_INT 31
36231: ST_TO_ADDR
// class_horse := 21 ;
36232: LD_ADDR_EXP 139
36236: PUSH
36237: LD_INT 21
36239: ST_TO_ADDR
// end ;
36240: LD_VAR 0 1
36244: RET
// every 1 do
36245: GO 36247
36247: DISABLE
// InitGlobalVariables ; end_of_file
36248: CALL 36085 0 0
36252: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36253: LD_INT 0
36255: PPUSH
36256: PPUSH
// if exist_mode then
36257: LD_VAR 0 2
36261: IFFALSE 36286
// unit := CreateCharacter ( prefix & ident ) else
36263: LD_ADDR_VAR 0 5
36267: PUSH
36268: LD_VAR 0 3
36272: PUSH
36273: LD_VAR 0 1
36277: STR
36278: PPUSH
36279: CALL_OW 34
36283: ST_TO_ADDR
36284: GO 36301
// unit := NewCharacter ( ident ) ;
36286: LD_ADDR_VAR 0 5
36290: PUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL_OW 25
36300: ST_TO_ADDR
// result := unit ;
36301: LD_ADDR_VAR 0 4
36305: PUSH
36306: LD_VAR 0 5
36310: ST_TO_ADDR
// end ;
36311: LD_VAR 0 4
36315: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36316: LD_INT 0
36318: PPUSH
36319: PPUSH
// if not side or not nation then
36320: LD_VAR 0 1
36324: NOT
36325: PUSH
36326: LD_VAR 0 2
36330: NOT
36331: OR
36332: IFFALSE 36336
// exit ;
36334: GO 37104
// case nation of nation_american :
36336: LD_VAR 0 2
36340: PUSH
36341: LD_INT 1
36343: DOUBLE
36344: EQUAL
36345: IFTRUE 36349
36347: GO 36563
36349: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36350: LD_ADDR_VAR 0 4
36354: PUSH
36355: LD_INT 35
36357: PUSH
36358: LD_INT 45
36360: PUSH
36361: LD_INT 46
36363: PUSH
36364: LD_INT 47
36366: PUSH
36367: LD_INT 82
36369: PUSH
36370: LD_INT 83
36372: PUSH
36373: LD_INT 84
36375: PUSH
36376: LD_INT 85
36378: PUSH
36379: LD_INT 86
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: LD_INT 6
36390: PUSH
36391: LD_INT 15
36393: PUSH
36394: LD_INT 16
36396: PUSH
36397: LD_INT 7
36399: PUSH
36400: LD_INT 12
36402: PUSH
36403: LD_INT 13
36405: PUSH
36406: LD_INT 10
36408: PUSH
36409: LD_INT 14
36411: PUSH
36412: LD_INT 20
36414: PUSH
36415: LD_INT 21
36417: PUSH
36418: LD_INT 22
36420: PUSH
36421: LD_INT 25
36423: PUSH
36424: LD_INT 32
36426: PUSH
36427: LD_INT 27
36429: PUSH
36430: LD_INT 36
36432: PUSH
36433: LD_INT 69
36435: PUSH
36436: LD_INT 39
36438: PUSH
36439: LD_INT 34
36441: PUSH
36442: LD_INT 40
36444: PUSH
36445: LD_INT 48
36447: PUSH
36448: LD_INT 49
36450: PUSH
36451: LD_INT 50
36453: PUSH
36454: LD_INT 51
36456: PUSH
36457: LD_INT 52
36459: PUSH
36460: LD_INT 53
36462: PUSH
36463: LD_INT 54
36465: PUSH
36466: LD_INT 55
36468: PUSH
36469: LD_INT 56
36471: PUSH
36472: LD_INT 57
36474: PUSH
36475: LD_INT 58
36477: PUSH
36478: LD_INT 59
36480: PUSH
36481: LD_INT 60
36483: PUSH
36484: LD_INT 61
36486: PUSH
36487: LD_INT 62
36489: PUSH
36490: LD_INT 80
36492: PUSH
36493: LD_INT 82
36495: PUSH
36496: LD_INT 83
36498: PUSH
36499: LD_INT 84
36501: PUSH
36502: LD_INT 85
36504: PUSH
36505: LD_INT 86
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: ST_TO_ADDR
36561: GO 37028
36563: LD_INT 2
36565: DOUBLE
36566: EQUAL
36567: IFTRUE 36571
36569: GO 36797
36571: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36572: LD_ADDR_VAR 0 4
36576: PUSH
36577: LD_INT 35
36579: PUSH
36580: LD_INT 45
36582: PUSH
36583: LD_INT 46
36585: PUSH
36586: LD_INT 47
36588: PUSH
36589: LD_INT 82
36591: PUSH
36592: LD_INT 83
36594: PUSH
36595: LD_INT 84
36597: PUSH
36598: LD_INT 85
36600: PUSH
36601: LD_INT 87
36603: PUSH
36604: LD_INT 70
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 11
36612: PUSH
36613: LD_INT 3
36615: PUSH
36616: LD_INT 4
36618: PUSH
36619: LD_INT 5
36621: PUSH
36622: LD_INT 6
36624: PUSH
36625: LD_INT 15
36627: PUSH
36628: LD_INT 18
36630: PUSH
36631: LD_INT 7
36633: PUSH
36634: LD_INT 17
36636: PUSH
36637: LD_INT 8
36639: PUSH
36640: LD_INT 20
36642: PUSH
36643: LD_INT 21
36645: PUSH
36646: LD_INT 22
36648: PUSH
36649: LD_INT 72
36651: PUSH
36652: LD_INT 26
36654: PUSH
36655: LD_INT 69
36657: PUSH
36658: LD_INT 39
36660: PUSH
36661: LD_INT 40
36663: PUSH
36664: LD_INT 41
36666: PUSH
36667: LD_INT 42
36669: PUSH
36670: LD_INT 43
36672: PUSH
36673: LD_INT 48
36675: PUSH
36676: LD_INT 49
36678: PUSH
36679: LD_INT 50
36681: PUSH
36682: LD_INT 51
36684: PUSH
36685: LD_INT 52
36687: PUSH
36688: LD_INT 53
36690: PUSH
36691: LD_INT 54
36693: PUSH
36694: LD_INT 55
36696: PUSH
36697: LD_INT 56
36699: PUSH
36700: LD_INT 60
36702: PUSH
36703: LD_INT 61
36705: PUSH
36706: LD_INT 62
36708: PUSH
36709: LD_INT 66
36711: PUSH
36712: LD_INT 67
36714: PUSH
36715: LD_INT 68
36717: PUSH
36718: LD_INT 81
36720: PUSH
36721: LD_INT 82
36723: PUSH
36724: LD_INT 83
36726: PUSH
36727: LD_INT 84
36729: PUSH
36730: LD_INT 85
36732: PUSH
36733: LD_INT 87
36735: PUSH
36736: LD_INT 88
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
36795: GO 37028
36797: LD_INT 3
36799: DOUBLE
36800: EQUAL
36801: IFTRUE 36805
36803: GO 37027
36805: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36806: LD_ADDR_VAR 0 4
36810: PUSH
36811: LD_INT 46
36813: PUSH
36814: LD_INT 47
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: LD_INT 82
36825: PUSH
36826: LD_INT 83
36828: PUSH
36829: LD_INT 84
36831: PUSH
36832: LD_INT 85
36834: PUSH
36835: LD_INT 86
36837: PUSH
36838: LD_INT 11
36840: PUSH
36841: LD_INT 9
36843: PUSH
36844: LD_INT 20
36846: PUSH
36847: LD_INT 19
36849: PUSH
36850: LD_INT 21
36852: PUSH
36853: LD_INT 24
36855: PUSH
36856: LD_INT 22
36858: PUSH
36859: LD_INT 25
36861: PUSH
36862: LD_INT 28
36864: PUSH
36865: LD_INT 29
36867: PUSH
36868: LD_INT 30
36870: PUSH
36871: LD_INT 31
36873: PUSH
36874: LD_INT 37
36876: PUSH
36877: LD_INT 38
36879: PUSH
36880: LD_INT 32
36882: PUSH
36883: LD_INT 27
36885: PUSH
36886: LD_INT 33
36888: PUSH
36889: LD_INT 69
36891: PUSH
36892: LD_INT 39
36894: PUSH
36895: LD_INT 34
36897: PUSH
36898: LD_INT 40
36900: PUSH
36901: LD_INT 71
36903: PUSH
36904: LD_INT 23
36906: PUSH
36907: LD_INT 44
36909: PUSH
36910: LD_INT 48
36912: PUSH
36913: LD_INT 49
36915: PUSH
36916: LD_INT 50
36918: PUSH
36919: LD_INT 51
36921: PUSH
36922: LD_INT 52
36924: PUSH
36925: LD_INT 53
36927: PUSH
36928: LD_INT 54
36930: PUSH
36931: LD_INT 55
36933: PUSH
36934: LD_INT 56
36936: PUSH
36937: LD_INT 57
36939: PUSH
36940: LD_INT 58
36942: PUSH
36943: LD_INT 59
36945: PUSH
36946: LD_INT 63
36948: PUSH
36949: LD_INT 64
36951: PUSH
36952: LD_INT 65
36954: PUSH
36955: LD_INT 82
36957: PUSH
36958: LD_INT 83
36960: PUSH
36961: LD_INT 84
36963: PUSH
36964: LD_INT 85
36966: PUSH
36967: LD_INT 86
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: ST_TO_ADDR
37025: GO 37028
37027: POP
// if state > - 1 and state < 3 then
37028: LD_VAR 0 3
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: GREATER
37037: PUSH
37038: LD_VAR 0 3
37042: PUSH
37043: LD_INT 3
37045: LESS
37046: AND
37047: IFFALSE 37104
// for i in result do
37049: LD_ADDR_VAR 0 5
37053: PUSH
37054: LD_VAR 0 4
37058: PUSH
37059: FOR_IN
37060: IFFALSE 37102
// if GetTech ( i , side ) <> state then
37062: LD_VAR 0 5
37066: PPUSH
37067: LD_VAR 0 1
37071: PPUSH
37072: CALL_OW 321
37076: PUSH
37077: LD_VAR 0 3
37081: NONEQUAL
37082: IFFALSE 37100
// result := result diff i ;
37084: LD_ADDR_VAR 0 4
37088: PUSH
37089: LD_VAR 0 4
37093: PUSH
37094: LD_VAR 0 5
37098: DIFF
37099: ST_TO_ADDR
37100: GO 37059
37102: POP
37103: POP
// end ;
37104: LD_VAR 0 4
37108: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37109: LD_INT 0
37111: PPUSH
37112: PPUSH
37113: PPUSH
// result := true ;
37114: LD_ADDR_VAR 0 3
37118: PUSH
37119: LD_INT 1
37121: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37122: LD_ADDR_VAR 0 5
37126: PUSH
37127: LD_VAR 0 2
37131: PPUSH
37132: CALL_OW 480
37136: ST_TO_ADDR
// if not tmp then
37137: LD_VAR 0 5
37141: NOT
37142: IFFALSE 37146
// exit ;
37144: GO 37195
// for i in tmp do
37146: LD_ADDR_VAR 0 4
37150: PUSH
37151: LD_VAR 0 5
37155: PUSH
37156: FOR_IN
37157: IFFALSE 37193
// if GetTech ( i , side ) <> state_researched then
37159: LD_VAR 0 4
37163: PPUSH
37164: LD_VAR 0 1
37168: PPUSH
37169: CALL_OW 321
37173: PUSH
37174: LD_INT 2
37176: NONEQUAL
37177: IFFALSE 37191
// begin result := false ;
37179: LD_ADDR_VAR 0 3
37183: PUSH
37184: LD_INT 0
37186: ST_TO_ADDR
// exit ;
37187: POP
37188: POP
37189: GO 37195
// end ;
37191: GO 37156
37193: POP
37194: POP
// end ;
37195: LD_VAR 0 3
37199: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37200: LD_INT 0
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
37209: PPUSH
37210: PPUSH
37211: PPUSH
37212: PPUSH
37213: PPUSH
37214: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37215: LD_VAR 0 1
37219: NOT
37220: PUSH
37221: LD_VAR 0 1
37225: PPUSH
37226: CALL_OW 257
37230: PUSH
37231: LD_INT 9
37233: NONEQUAL
37234: OR
37235: IFFALSE 37239
// exit ;
37237: GO 37812
// side := GetSide ( unit ) ;
37239: LD_ADDR_VAR 0 9
37243: PUSH
37244: LD_VAR 0 1
37248: PPUSH
37249: CALL_OW 255
37253: ST_TO_ADDR
// tech_space := tech_spacanom ;
37254: LD_ADDR_VAR 0 12
37258: PUSH
37259: LD_INT 29
37261: ST_TO_ADDR
// tech_time := tech_taurad ;
37262: LD_ADDR_VAR 0 13
37266: PUSH
37267: LD_INT 28
37269: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37270: LD_ADDR_VAR 0 11
37274: PUSH
37275: LD_VAR 0 1
37279: PPUSH
37280: CALL_OW 310
37284: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37285: LD_VAR 0 11
37289: PPUSH
37290: CALL_OW 247
37294: PUSH
37295: LD_INT 2
37297: EQUAL
37298: IFFALSE 37302
// exit ;
37300: GO 37812
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37302: LD_ADDR_VAR 0 8
37306: PUSH
37307: LD_INT 81
37309: PUSH
37310: LD_VAR 0 9
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 3
37321: PUSH
37322: LD_INT 21
37324: PUSH
37325: LD_INT 3
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PPUSH
37340: CALL_OW 69
37344: ST_TO_ADDR
// if not tmp then
37345: LD_VAR 0 8
37349: NOT
37350: IFFALSE 37354
// exit ;
37352: GO 37812
// if in_unit then
37354: LD_VAR 0 11
37358: IFFALSE 37382
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37360: LD_ADDR_VAR 0 10
37364: PUSH
37365: LD_VAR 0 8
37369: PPUSH
37370: LD_VAR 0 11
37374: PPUSH
37375: CALL_OW 74
37379: ST_TO_ADDR
37380: GO 37402
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37382: LD_ADDR_VAR 0 10
37386: PUSH
37387: LD_VAR 0 8
37391: PPUSH
37392: LD_VAR 0 1
37396: PPUSH
37397: CALL_OW 74
37401: ST_TO_ADDR
// if not enemy then
37402: LD_VAR 0 10
37406: NOT
37407: IFFALSE 37411
// exit ;
37409: GO 37812
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37411: LD_VAR 0 11
37415: PUSH
37416: LD_VAR 0 11
37420: PPUSH
37421: LD_VAR 0 10
37425: PPUSH
37426: CALL_OW 296
37430: PUSH
37431: LD_INT 13
37433: GREATER
37434: AND
37435: PUSH
37436: LD_VAR 0 1
37440: PPUSH
37441: LD_VAR 0 10
37445: PPUSH
37446: CALL_OW 296
37450: PUSH
37451: LD_INT 12
37453: GREATER
37454: OR
37455: IFFALSE 37459
// exit ;
37457: GO 37812
// missile := [ 1 ] ;
37459: LD_ADDR_VAR 0 14
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37470: LD_VAR 0 9
37474: PPUSH
37475: LD_VAR 0 12
37479: PPUSH
37480: CALL_OW 325
37484: IFFALSE 37513
// missile := Insert ( missile , missile + 1 , 2 ) ;
37486: LD_ADDR_VAR 0 14
37490: PUSH
37491: LD_VAR 0 14
37495: PPUSH
37496: LD_VAR 0 14
37500: PUSH
37501: LD_INT 1
37503: PLUS
37504: PPUSH
37505: LD_INT 2
37507: PPUSH
37508: CALL_OW 2
37512: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37513: LD_VAR 0 9
37517: PPUSH
37518: LD_VAR 0 13
37522: PPUSH
37523: CALL_OW 325
37527: PUSH
37528: LD_VAR 0 10
37532: PPUSH
37533: CALL_OW 255
37537: PPUSH
37538: LD_VAR 0 13
37542: PPUSH
37543: CALL_OW 325
37547: NOT
37548: AND
37549: IFFALSE 37578
// missile := Insert ( missile , missile + 1 , 3 ) ;
37551: LD_ADDR_VAR 0 14
37555: PUSH
37556: LD_VAR 0 14
37560: PPUSH
37561: LD_VAR 0 14
37565: PUSH
37566: LD_INT 1
37568: PLUS
37569: PPUSH
37570: LD_INT 3
37572: PPUSH
37573: CALL_OW 2
37577: ST_TO_ADDR
// if missile < 2 then
37578: LD_VAR 0 14
37582: PUSH
37583: LD_INT 2
37585: LESS
37586: IFFALSE 37590
// exit ;
37588: GO 37812
// x := GetX ( enemy ) ;
37590: LD_ADDR_VAR 0 4
37594: PUSH
37595: LD_VAR 0 10
37599: PPUSH
37600: CALL_OW 250
37604: ST_TO_ADDR
// y := GetY ( enemy ) ;
37605: LD_ADDR_VAR 0 5
37609: PUSH
37610: LD_VAR 0 10
37614: PPUSH
37615: CALL_OW 251
37619: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37620: LD_ADDR_VAR 0 6
37624: PUSH
37625: LD_VAR 0 4
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PPUSH
37634: LD_INT 1
37636: PPUSH
37637: CALL_OW 12
37641: PLUS
37642: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37643: LD_ADDR_VAR 0 7
37647: PUSH
37648: LD_VAR 0 5
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PPUSH
37657: LD_INT 1
37659: PPUSH
37660: CALL_OW 12
37664: PLUS
37665: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37666: LD_VAR 0 6
37670: PPUSH
37671: LD_VAR 0 7
37675: PPUSH
37676: CALL_OW 488
37680: NOT
37681: IFFALSE 37703
// begin _x := x ;
37683: LD_ADDR_VAR 0 6
37687: PUSH
37688: LD_VAR 0 4
37692: ST_TO_ADDR
// _y := y ;
37693: LD_ADDR_VAR 0 7
37697: PUSH
37698: LD_VAR 0 5
37702: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37703: LD_ADDR_VAR 0 3
37707: PUSH
37708: LD_INT 1
37710: PPUSH
37711: LD_VAR 0 14
37715: PPUSH
37716: CALL_OW 12
37720: ST_TO_ADDR
// case i of 1 :
37721: LD_VAR 0 3
37725: PUSH
37726: LD_INT 1
37728: DOUBLE
37729: EQUAL
37730: IFTRUE 37734
37732: GO 37751
37734: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37735: LD_VAR 0 1
37739: PPUSH
37740: LD_VAR 0 10
37744: PPUSH
37745: CALL_OW 115
37749: GO 37812
37751: LD_INT 2
37753: DOUBLE
37754: EQUAL
37755: IFTRUE 37759
37757: GO 37781
37759: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37760: LD_VAR 0 1
37764: PPUSH
37765: LD_VAR 0 6
37769: PPUSH
37770: LD_VAR 0 7
37774: PPUSH
37775: CALL_OW 153
37779: GO 37812
37781: LD_INT 3
37783: DOUBLE
37784: EQUAL
37785: IFTRUE 37789
37787: GO 37811
37789: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37790: LD_VAR 0 1
37794: PPUSH
37795: LD_VAR 0 6
37799: PPUSH
37800: LD_VAR 0 7
37804: PPUSH
37805: CALL_OW 154
37809: GO 37812
37811: POP
// end ;
37812: LD_VAR 0 2
37816: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37817: LD_INT 0
37819: PPUSH
37820: PPUSH
37821: PPUSH
37822: PPUSH
37823: PPUSH
37824: PPUSH
// if not unit or not building then
37825: LD_VAR 0 1
37829: NOT
37830: PUSH
37831: LD_VAR 0 2
37835: NOT
37836: OR
37837: IFFALSE 37841
// exit ;
37839: GO 37999
// x := GetX ( building ) ;
37841: LD_ADDR_VAR 0 5
37845: PUSH
37846: LD_VAR 0 2
37850: PPUSH
37851: CALL_OW 250
37855: ST_TO_ADDR
// y := GetY ( building ) ;
37856: LD_ADDR_VAR 0 6
37860: PUSH
37861: LD_VAR 0 2
37865: PPUSH
37866: CALL_OW 251
37870: ST_TO_ADDR
// for i = 0 to 5 do
37871: LD_ADDR_VAR 0 4
37875: PUSH
37876: DOUBLE
37877: LD_INT 0
37879: DEC
37880: ST_TO_ADDR
37881: LD_INT 5
37883: PUSH
37884: FOR_TO
37885: IFFALSE 37997
// begin _x := ShiftX ( x , i , 3 ) ;
37887: LD_ADDR_VAR 0 7
37891: PUSH
37892: LD_VAR 0 5
37896: PPUSH
37897: LD_VAR 0 4
37901: PPUSH
37902: LD_INT 3
37904: PPUSH
37905: CALL_OW 272
37909: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37910: LD_ADDR_VAR 0 8
37914: PUSH
37915: LD_VAR 0 6
37919: PPUSH
37920: LD_VAR 0 4
37924: PPUSH
37925: LD_INT 3
37927: PPUSH
37928: CALL_OW 273
37932: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37933: LD_VAR 0 7
37937: PPUSH
37938: LD_VAR 0 8
37942: PPUSH
37943: CALL_OW 488
37947: NOT
37948: IFFALSE 37952
// continue ;
37950: GO 37884
// if HexInfo ( _x , _y ) = 0 then
37952: LD_VAR 0 7
37956: PPUSH
37957: LD_VAR 0 8
37961: PPUSH
37962: CALL_OW 428
37966: PUSH
37967: LD_INT 0
37969: EQUAL
37970: IFFALSE 37995
// begin ComMoveXY ( unit , _x , _y ) ;
37972: LD_VAR 0 1
37976: PPUSH
37977: LD_VAR 0 7
37981: PPUSH
37982: LD_VAR 0 8
37986: PPUSH
37987: CALL_OW 111
// exit ;
37991: POP
37992: POP
37993: GO 37999
// end ; end ;
37995: GO 37884
37997: POP
37998: POP
// end ;
37999: LD_VAR 0 3
38003: RET
// export function ScanBase ( side , base_area ) ; begin
38004: LD_INT 0
38006: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_VAR 0 2
38016: PPUSH
38017: LD_INT 81
38019: PUSH
38020: LD_VAR 0 1
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PPUSH
38029: CALL_OW 70
38033: ST_TO_ADDR
// end ;
38034: LD_VAR 0 3
38038: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38039: LD_INT 0
38041: PPUSH
38042: PPUSH
38043: PPUSH
38044: PPUSH
// result := false ;
38045: LD_ADDR_VAR 0 2
38049: PUSH
38050: LD_INT 0
38052: ST_TO_ADDR
// side := GetSide ( unit ) ;
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL_OW 255
38067: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38068: LD_ADDR_VAR 0 4
38072: PUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: CALL_OW 248
38082: ST_TO_ADDR
// case nat of 1 :
38083: LD_VAR 0 4
38087: PUSH
38088: LD_INT 1
38090: DOUBLE
38091: EQUAL
38092: IFTRUE 38096
38094: GO 38107
38096: POP
// tech := tech_lassight ; 2 :
38097: LD_ADDR_VAR 0 5
38101: PUSH
38102: LD_INT 12
38104: ST_TO_ADDR
38105: GO 38146
38107: LD_INT 2
38109: DOUBLE
38110: EQUAL
38111: IFTRUE 38115
38113: GO 38126
38115: POP
// tech := tech_mortar ; 3 :
38116: LD_ADDR_VAR 0 5
38120: PUSH
38121: LD_INT 41
38123: ST_TO_ADDR
38124: GO 38146
38126: LD_INT 3
38128: DOUBLE
38129: EQUAL
38130: IFTRUE 38134
38132: GO 38145
38134: POP
// tech := tech_bazooka ; end ;
38135: LD_ADDR_VAR 0 5
38139: PUSH
38140: LD_INT 44
38142: ST_TO_ADDR
38143: GO 38146
38145: POP
// if Researched ( side , tech ) then
38146: LD_VAR 0 3
38150: PPUSH
38151: LD_VAR 0 5
38155: PPUSH
38156: CALL_OW 325
38160: IFFALSE 38187
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38162: LD_ADDR_VAR 0 2
38166: PUSH
38167: LD_INT 5
38169: PUSH
38170: LD_INT 8
38172: PUSH
38173: LD_INT 9
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: PUSH
38181: LD_VAR 0 4
38185: ARRAY
38186: ST_TO_ADDR
// end ;
38187: LD_VAR 0 2
38191: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38192: LD_INT 0
38194: PPUSH
38195: PPUSH
38196: PPUSH
// if not mines then
38197: LD_VAR 0 2
38201: NOT
38202: IFFALSE 38206
// exit ;
38204: GO 38350
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38206: LD_ADDR_VAR 0 5
38210: PUSH
38211: LD_INT 81
38213: PUSH
38214: LD_VAR 0 1
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 3
38225: PUSH
38226: LD_INT 21
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PPUSH
38244: CALL_OW 69
38248: ST_TO_ADDR
// for i in mines do
38249: LD_ADDR_VAR 0 4
38253: PUSH
38254: LD_VAR 0 2
38258: PUSH
38259: FOR_IN
38260: IFFALSE 38348
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38262: LD_VAR 0 4
38266: PUSH
38267: LD_INT 1
38269: ARRAY
38270: PPUSH
38271: LD_VAR 0 4
38275: PUSH
38276: LD_INT 2
38278: ARRAY
38279: PPUSH
38280: CALL_OW 458
38284: NOT
38285: IFFALSE 38289
// continue ;
38287: GO 38259
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38289: LD_VAR 0 4
38293: PUSH
38294: LD_INT 1
38296: ARRAY
38297: PPUSH
38298: LD_VAR 0 4
38302: PUSH
38303: LD_INT 2
38305: ARRAY
38306: PPUSH
38307: CALL_OW 428
38311: PUSH
38312: LD_VAR 0 5
38316: IN
38317: IFFALSE 38346
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38319: LD_VAR 0 4
38323: PUSH
38324: LD_INT 1
38326: ARRAY
38327: PPUSH
38328: LD_VAR 0 4
38332: PUSH
38333: LD_INT 2
38335: ARRAY
38336: PPUSH
38337: LD_VAR 0 1
38341: PPUSH
38342: CALL_OW 456
// end ;
38346: GO 38259
38348: POP
38349: POP
// end ;
38350: LD_VAR 0 3
38354: RET
// export function Count ( array ) ; var i ; begin
38355: LD_INT 0
38357: PPUSH
38358: PPUSH
// result := 0 ;
38359: LD_ADDR_VAR 0 2
38363: PUSH
38364: LD_INT 0
38366: ST_TO_ADDR
// for i in array do
38367: LD_ADDR_VAR 0 3
38371: PUSH
38372: LD_VAR 0 1
38376: PUSH
38377: FOR_IN
38378: IFFALSE 38402
// if i then
38380: LD_VAR 0 3
38384: IFFALSE 38400
// result := result + 1 ;
38386: LD_ADDR_VAR 0 2
38390: PUSH
38391: LD_VAR 0 2
38395: PUSH
38396: LD_INT 1
38398: PLUS
38399: ST_TO_ADDR
38400: GO 38377
38402: POP
38403: POP
// end ;
38404: LD_VAR 0 2
38408: RET
// export function IsEmpty ( building ) ; begin
38409: LD_INT 0
38411: PPUSH
// if not building then
38412: LD_VAR 0 1
38416: NOT
38417: IFFALSE 38421
// exit ;
38419: GO 38464
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38421: LD_ADDR_VAR 0 2
38425: PUSH
38426: LD_VAR 0 1
38430: PUSH
38431: LD_INT 22
38433: PUSH
38434: LD_VAR 0 1
38438: PPUSH
38439: CALL_OW 255
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 58
38450: PUSH
38451: EMPTY
38452: LIST
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PPUSH
38458: CALL_OW 69
38462: IN
38463: ST_TO_ADDR
// end ;
38464: LD_VAR 0 2
38468: RET
// export function IsNotFull ( building ) ; begin
38469: LD_INT 0
38471: PPUSH
// if not building then
38472: LD_VAR 0 1
38476: NOT
38477: IFFALSE 38481
// exit ;
38479: GO 38500
// result := UnitsInside ( building ) < 6 ;
38481: LD_ADDR_VAR 0 2
38485: PUSH
38486: LD_VAR 0 1
38490: PPUSH
38491: CALL_OW 313
38495: PUSH
38496: LD_INT 6
38498: LESS
38499: ST_TO_ADDR
// end ;
38500: LD_VAR 0 2
38504: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38505: LD_INT 0
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
// tmp := [ ] ;
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: EMPTY
38517: ST_TO_ADDR
// list := [ ] ;
38518: LD_ADDR_VAR 0 5
38522: PUSH
38523: EMPTY
38524: ST_TO_ADDR
// for i = 16 to 25 do
38525: LD_ADDR_VAR 0 4
38529: PUSH
38530: DOUBLE
38531: LD_INT 16
38533: DEC
38534: ST_TO_ADDR
38535: LD_INT 25
38537: PUSH
38538: FOR_TO
38539: IFFALSE 38612
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38541: LD_ADDR_VAR 0 3
38545: PUSH
38546: LD_VAR 0 3
38550: PUSH
38551: LD_INT 22
38553: PUSH
38554: LD_VAR 0 1
38558: PPUSH
38559: CALL_OW 255
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 91
38570: PUSH
38571: LD_VAR 0 1
38575: PUSH
38576: LD_INT 6
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 30
38586: PUSH
38587: LD_VAR 0 4
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: PPUSH
38604: CALL_OW 69
38608: ADD
38609: ST_TO_ADDR
38610: GO 38538
38612: POP
38613: POP
// for i = 1 to tmp do
38614: LD_ADDR_VAR 0 4
38618: PUSH
38619: DOUBLE
38620: LD_INT 1
38622: DEC
38623: ST_TO_ADDR
38624: LD_VAR 0 3
38628: PUSH
38629: FOR_TO
38630: IFFALSE 38718
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38632: LD_ADDR_VAR 0 5
38636: PUSH
38637: LD_VAR 0 5
38641: PUSH
38642: LD_VAR 0 3
38646: PUSH
38647: LD_VAR 0 4
38651: ARRAY
38652: PPUSH
38653: CALL_OW 266
38657: PUSH
38658: LD_VAR 0 3
38662: PUSH
38663: LD_VAR 0 4
38667: ARRAY
38668: PPUSH
38669: CALL_OW 250
38673: PUSH
38674: LD_VAR 0 3
38678: PUSH
38679: LD_VAR 0 4
38683: ARRAY
38684: PPUSH
38685: CALL_OW 251
38689: PUSH
38690: LD_VAR 0 3
38694: PUSH
38695: LD_VAR 0 4
38699: ARRAY
38700: PPUSH
38701: CALL_OW 254
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: PUSH
38712: EMPTY
38713: LIST
38714: ADD
38715: ST_TO_ADDR
38716: GO 38629
38718: POP
38719: POP
// result := list ;
38720: LD_ADDR_VAR 0 2
38724: PUSH
38725: LD_VAR 0 5
38729: ST_TO_ADDR
// end ;
38730: LD_VAR 0 2
38734: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38735: LD_INT 0
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
38743: PPUSH
// if not factory then
38744: LD_VAR 0 1
38748: NOT
38749: IFFALSE 38753
// exit ;
38751: GO 39346
// if control = control_apeman then
38753: LD_VAR 0 4
38757: PUSH
38758: LD_INT 5
38760: EQUAL
38761: IFFALSE 38870
// begin tmp := UnitsInside ( factory ) ;
38763: LD_ADDR_VAR 0 8
38767: PUSH
38768: LD_VAR 0 1
38772: PPUSH
38773: CALL_OW 313
38777: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38778: LD_VAR 0 8
38782: PPUSH
38783: LD_INT 25
38785: PUSH
38786: LD_INT 12
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PPUSH
38793: CALL_OW 72
38797: NOT
38798: IFFALSE 38808
// control := control_manual ;
38800: LD_ADDR_VAR 0 4
38804: PUSH
38805: LD_INT 1
38807: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38808: LD_ADDR_VAR 0 8
38812: PUSH
38813: LD_VAR 0 1
38817: PPUSH
38818: CALL 38505 0 1
38822: ST_TO_ADDR
// if tmp then
38823: LD_VAR 0 8
38827: IFFALSE 38870
// begin for i in tmp do
38829: LD_ADDR_VAR 0 7
38833: PUSH
38834: LD_VAR 0 8
38838: PUSH
38839: FOR_IN
38840: IFFALSE 38868
// if i [ 1 ] = b_ext_radio then
38842: LD_VAR 0 7
38846: PUSH
38847: LD_INT 1
38849: ARRAY
38850: PUSH
38851: LD_INT 22
38853: EQUAL
38854: IFFALSE 38866
// begin control := control_remote ;
38856: LD_ADDR_VAR 0 4
38860: PUSH
38861: LD_INT 2
38863: ST_TO_ADDR
// break ;
38864: GO 38868
// end ;
38866: GO 38839
38868: POP
38869: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38870: LD_VAR 0 1
38874: PPUSH
38875: LD_VAR 0 2
38879: PPUSH
38880: LD_VAR 0 3
38884: PPUSH
38885: LD_VAR 0 4
38889: PPUSH
38890: LD_VAR 0 5
38894: PPUSH
38895: CALL_OW 448
38899: IFFALSE 38934
// begin result := [ chassis , engine , control , weapon ] ;
38901: LD_ADDR_VAR 0 6
38905: PUSH
38906: LD_VAR 0 2
38910: PUSH
38911: LD_VAR 0 3
38915: PUSH
38916: LD_VAR 0 4
38920: PUSH
38921: LD_VAR 0 5
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: ST_TO_ADDR
// exit ;
38932: GO 39346
// end ; _chassis := AvailableChassisList ( factory ) ;
38934: LD_ADDR_VAR 0 9
38938: PUSH
38939: LD_VAR 0 1
38943: PPUSH
38944: CALL_OW 475
38948: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38949: LD_ADDR_VAR 0 11
38953: PUSH
38954: LD_VAR 0 1
38958: PPUSH
38959: CALL_OW 476
38963: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38964: LD_ADDR_VAR 0 12
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 477
38978: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38979: LD_ADDR_VAR 0 10
38983: PUSH
38984: LD_VAR 0 1
38988: PPUSH
38989: CALL_OW 478
38993: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38994: LD_VAR 0 9
38998: NOT
38999: PUSH
39000: LD_VAR 0 11
39004: NOT
39005: OR
39006: PUSH
39007: LD_VAR 0 12
39011: NOT
39012: OR
39013: PUSH
39014: LD_VAR 0 10
39018: NOT
39019: OR
39020: IFFALSE 39055
// begin result := [ chassis , engine , control , weapon ] ;
39022: LD_ADDR_VAR 0 6
39026: PUSH
39027: LD_VAR 0 2
39031: PUSH
39032: LD_VAR 0 3
39036: PUSH
39037: LD_VAR 0 4
39041: PUSH
39042: LD_VAR 0 5
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: ST_TO_ADDR
// exit ;
39053: GO 39346
// end ; if not chassis in _chassis then
39055: LD_VAR 0 2
39059: PUSH
39060: LD_VAR 0 9
39064: IN
39065: NOT
39066: IFFALSE 39092
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39068: LD_ADDR_VAR 0 2
39072: PUSH
39073: LD_VAR 0 9
39077: PUSH
39078: LD_INT 1
39080: PPUSH
39081: LD_VAR 0 9
39085: PPUSH
39086: CALL_OW 12
39090: ARRAY
39091: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39092: LD_VAR 0 2
39096: PPUSH
39097: LD_VAR 0 3
39101: PPUSH
39102: CALL 39351 0 2
39106: NOT
39107: IFFALSE 39166
// repeat engine := _engine [ 1 ] ;
39109: LD_ADDR_VAR 0 3
39113: PUSH
39114: LD_VAR 0 11
39118: PUSH
39119: LD_INT 1
39121: ARRAY
39122: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39123: LD_ADDR_VAR 0 11
39127: PUSH
39128: LD_VAR 0 11
39132: PPUSH
39133: LD_INT 1
39135: PPUSH
39136: CALL_OW 3
39140: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39141: LD_VAR 0 2
39145: PPUSH
39146: LD_VAR 0 3
39150: PPUSH
39151: CALL 39351 0 2
39155: PUSH
39156: LD_VAR 0 11
39160: PUSH
39161: EMPTY
39162: EQUAL
39163: OR
39164: IFFALSE 39109
// if not control in _control then
39166: LD_VAR 0 4
39170: PUSH
39171: LD_VAR 0 12
39175: IN
39176: NOT
39177: IFFALSE 39203
// control := _control [ rand ( 1 , _control ) ] ;
39179: LD_ADDR_VAR 0 4
39183: PUSH
39184: LD_VAR 0 12
39188: PUSH
39189: LD_INT 1
39191: PPUSH
39192: LD_VAR 0 12
39196: PPUSH
39197: CALL_OW 12
39201: ARRAY
39202: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39203: LD_VAR 0 2
39207: PPUSH
39208: LD_VAR 0 5
39212: PPUSH
39213: CALL 39571 0 2
39217: NOT
39218: IFFALSE 39277
// repeat weapon := _weapon [ 1 ] ;
39220: LD_ADDR_VAR 0 5
39224: PUSH
39225: LD_VAR 0 10
39229: PUSH
39230: LD_INT 1
39232: ARRAY
39233: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39234: LD_ADDR_VAR 0 10
39238: PUSH
39239: LD_VAR 0 10
39243: PPUSH
39244: LD_INT 1
39246: PPUSH
39247: CALL_OW 3
39251: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39252: LD_VAR 0 2
39256: PPUSH
39257: LD_VAR 0 5
39261: PPUSH
39262: CALL 39571 0 2
39266: PUSH
39267: LD_VAR 0 10
39271: PUSH
39272: EMPTY
39273: EQUAL
39274: OR
39275: IFFALSE 39220
// result := [ ] ;
39277: LD_ADDR_VAR 0 6
39281: PUSH
39282: EMPTY
39283: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39284: LD_VAR 0 1
39288: PPUSH
39289: LD_VAR 0 2
39293: PPUSH
39294: LD_VAR 0 3
39298: PPUSH
39299: LD_VAR 0 4
39303: PPUSH
39304: LD_VAR 0 5
39308: PPUSH
39309: CALL_OW 448
39313: IFFALSE 39346
// result := [ chassis , engine , control , weapon ] ;
39315: LD_ADDR_VAR 0 6
39319: PUSH
39320: LD_VAR 0 2
39324: PUSH
39325: LD_VAR 0 3
39329: PUSH
39330: LD_VAR 0 4
39334: PUSH
39335: LD_VAR 0 5
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// end ;
39346: LD_VAR 0 6
39350: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39351: LD_INT 0
39353: PPUSH
// if not chassis or not engine then
39354: LD_VAR 0 1
39358: NOT
39359: PUSH
39360: LD_VAR 0 2
39364: NOT
39365: OR
39366: IFFALSE 39370
// exit ;
39368: GO 39566
// case engine of engine_solar :
39370: LD_VAR 0 2
39374: PUSH
39375: LD_INT 2
39377: DOUBLE
39378: EQUAL
39379: IFTRUE 39383
39381: GO 39421
39383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39384: LD_ADDR_VAR 0 3
39388: PUSH
39389: LD_INT 11
39391: PUSH
39392: LD_INT 12
39394: PUSH
39395: LD_INT 13
39397: PUSH
39398: LD_INT 14
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 3
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: ST_TO_ADDR
39419: GO 39550
39421: LD_INT 1
39423: DOUBLE
39424: EQUAL
39425: IFTRUE 39429
39427: GO 39491
39429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39430: LD_ADDR_VAR 0 3
39434: PUSH
39435: LD_INT 11
39437: PUSH
39438: LD_INT 12
39440: PUSH
39441: LD_INT 13
39443: PUSH
39444: LD_INT 14
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 3
39455: PUSH
39456: LD_INT 4
39458: PUSH
39459: LD_INT 5
39461: PUSH
39462: LD_INT 21
39464: PUSH
39465: LD_INT 23
39467: PUSH
39468: LD_INT 22
39470: PUSH
39471: LD_INT 24
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: ST_TO_ADDR
39489: GO 39550
39491: LD_INT 3
39493: DOUBLE
39494: EQUAL
39495: IFTRUE 39499
39497: GO 39549
39499: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39500: LD_ADDR_VAR 0 3
39504: PUSH
39505: LD_INT 13
39507: PUSH
39508: LD_INT 14
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: LD_INT 3
39516: PUSH
39517: LD_INT 4
39519: PUSH
39520: LD_INT 5
39522: PUSH
39523: LD_INT 21
39525: PUSH
39526: LD_INT 22
39528: PUSH
39529: LD_INT 23
39531: PUSH
39532: LD_INT 24
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: ST_TO_ADDR
39547: GO 39550
39549: POP
// result := ( chassis in result ) ;
39550: LD_ADDR_VAR 0 3
39554: PUSH
39555: LD_VAR 0 1
39559: PUSH
39560: LD_VAR 0 3
39564: IN
39565: ST_TO_ADDR
// end ;
39566: LD_VAR 0 3
39570: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39571: LD_INT 0
39573: PPUSH
// if not chassis or not weapon then
39574: LD_VAR 0 1
39578: NOT
39579: PUSH
39580: LD_VAR 0 2
39584: NOT
39585: OR
39586: IFFALSE 39590
// exit ;
39588: GO 40652
// case weapon of us_machine_gun :
39590: LD_VAR 0 2
39594: PUSH
39595: LD_INT 2
39597: DOUBLE
39598: EQUAL
39599: IFTRUE 39603
39601: GO 39633
39603: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39604: LD_ADDR_VAR 0 3
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: LD_INT 2
39614: PUSH
39615: LD_INT 3
39617: PUSH
39618: LD_INT 4
39620: PUSH
39621: LD_INT 5
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: ST_TO_ADDR
39631: GO 40636
39633: LD_INT 3
39635: DOUBLE
39636: EQUAL
39637: IFTRUE 39641
39639: GO 39671
39641: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39642: LD_ADDR_VAR 0 3
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: LD_INT 4
39658: PUSH
39659: LD_INT 5
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: ST_TO_ADDR
39669: GO 40636
39671: LD_INT 11
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39679
39677: GO 39709
39679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39680: LD_ADDR_VAR 0 3
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: LD_INT 3
39693: PUSH
39694: LD_INT 4
39696: PUSH
39697: LD_INT 5
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
39707: GO 40636
39709: LD_INT 4
39711: DOUBLE
39712: EQUAL
39713: IFTRUE 39717
39715: GO 39743
39717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39718: LD_ADDR_VAR 0 3
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 3
39728: PUSH
39729: LD_INT 4
39731: PUSH
39732: LD_INT 5
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: ST_TO_ADDR
39741: GO 40636
39743: LD_INT 5
39745: DOUBLE
39746: EQUAL
39747: IFTRUE 39751
39749: GO 39777
39751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39752: LD_ADDR_VAR 0 3
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: LD_INT 4
39765: PUSH
39766: LD_INT 5
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: ST_TO_ADDR
39775: GO 40636
39777: LD_INT 9
39779: DOUBLE
39780: EQUAL
39781: IFTRUE 39785
39783: GO 39811
39785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39786: LD_ADDR_VAR 0 3
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: LD_INT 3
39796: PUSH
39797: LD_INT 4
39799: PUSH
39800: LD_INT 5
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: ST_TO_ADDR
39809: GO 40636
39811: LD_INT 7
39813: DOUBLE
39814: EQUAL
39815: IFTRUE 39819
39817: GO 39845
39819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39820: LD_ADDR_VAR 0 3
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 3
39830: PUSH
39831: LD_INT 4
39833: PUSH
39834: LD_INT 5
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: ST_TO_ADDR
39843: GO 40636
39845: LD_INT 12
39847: DOUBLE
39848: EQUAL
39849: IFTRUE 39853
39851: GO 39879
39853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39854: LD_ADDR_VAR 0 3
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 3
39864: PUSH
39865: LD_INT 4
39867: PUSH
39868: LD_INT 5
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: ST_TO_ADDR
39877: GO 40636
39879: LD_INT 13
39881: DOUBLE
39882: EQUAL
39883: IFTRUE 39887
39885: GO 39913
39887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39888: LD_ADDR_VAR 0 3
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 3
39898: PUSH
39899: LD_INT 4
39901: PUSH
39902: LD_INT 5
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: ST_TO_ADDR
39911: GO 40636
39913: LD_INT 14
39915: DOUBLE
39916: EQUAL
39917: IFTRUE 39921
39919: GO 39939
39921: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39922: LD_ADDR_VAR 0 3
39926: PUSH
39927: LD_INT 4
39929: PUSH
39930: LD_INT 5
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: ST_TO_ADDR
39937: GO 40636
39939: LD_INT 6
39941: DOUBLE
39942: EQUAL
39943: IFTRUE 39947
39945: GO 39965
39947: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_INT 4
39955: PUSH
39956: LD_INT 5
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: ST_TO_ADDR
39963: GO 40636
39965: LD_INT 10
39967: DOUBLE
39968: EQUAL
39969: IFTRUE 39973
39971: GO 39991
39973: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39974: LD_ADDR_VAR 0 3
39978: PUSH
39979: LD_INT 4
39981: PUSH
39982: LD_INT 5
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: ST_TO_ADDR
39989: GO 40636
39991: LD_INT 22
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 39999
39997: GO 40025
39999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40000: LD_ADDR_VAR 0 3
40004: PUSH
40005: LD_INT 11
40007: PUSH
40008: LD_INT 12
40010: PUSH
40011: LD_INT 13
40013: PUSH
40014: LD_INT 14
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
40023: GO 40636
40025: LD_INT 23
40027: DOUBLE
40028: EQUAL
40029: IFTRUE 40033
40031: GO 40059
40033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40034: LD_ADDR_VAR 0 3
40038: PUSH
40039: LD_INT 11
40041: PUSH
40042: LD_INT 12
40044: PUSH
40045: LD_INT 13
40047: PUSH
40048: LD_INT 14
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: ST_TO_ADDR
40057: GO 40636
40059: LD_INT 24
40061: DOUBLE
40062: EQUAL
40063: IFTRUE 40067
40065: GO 40093
40067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40068: LD_ADDR_VAR 0 3
40072: PUSH
40073: LD_INT 11
40075: PUSH
40076: LD_INT 12
40078: PUSH
40079: LD_INT 13
40081: PUSH
40082: LD_INT 14
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: ST_TO_ADDR
40091: GO 40636
40093: LD_INT 30
40095: DOUBLE
40096: EQUAL
40097: IFTRUE 40101
40099: GO 40127
40101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40102: LD_ADDR_VAR 0 3
40106: PUSH
40107: LD_INT 11
40109: PUSH
40110: LD_INT 12
40112: PUSH
40113: LD_INT 13
40115: PUSH
40116: LD_INT 14
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: ST_TO_ADDR
40125: GO 40636
40127: LD_INT 25
40129: DOUBLE
40130: EQUAL
40131: IFTRUE 40135
40133: GO 40153
40135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40136: LD_ADDR_VAR 0 3
40140: PUSH
40141: LD_INT 13
40143: PUSH
40144: LD_INT 14
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: ST_TO_ADDR
40151: GO 40636
40153: LD_INT 27
40155: DOUBLE
40156: EQUAL
40157: IFTRUE 40161
40159: GO 40179
40161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40162: LD_ADDR_VAR 0 3
40166: PUSH
40167: LD_INT 13
40169: PUSH
40170: LD_INT 14
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: ST_TO_ADDR
40177: GO 40636
40179: LD_EXP 126
40183: DOUBLE
40184: EQUAL
40185: IFTRUE 40189
40187: GO 40215
40189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40190: LD_ADDR_VAR 0 3
40194: PUSH
40195: LD_INT 11
40197: PUSH
40198: LD_INT 12
40200: PUSH
40201: LD_INT 13
40203: PUSH
40204: LD_INT 14
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: ST_TO_ADDR
40213: GO 40636
40215: LD_INT 28
40217: DOUBLE
40218: EQUAL
40219: IFTRUE 40223
40221: GO 40241
40223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40224: LD_ADDR_VAR 0 3
40228: PUSH
40229: LD_INT 13
40231: PUSH
40232: LD_INT 14
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: ST_TO_ADDR
40239: GO 40636
40241: LD_INT 29
40243: DOUBLE
40244: EQUAL
40245: IFTRUE 40249
40247: GO 40267
40249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40250: LD_ADDR_VAR 0 3
40254: PUSH
40255: LD_INT 13
40257: PUSH
40258: LD_INT 14
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: ST_TO_ADDR
40265: GO 40636
40267: LD_INT 31
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40275
40273: GO 40293
40275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: LD_INT 13
40283: PUSH
40284: LD_INT 14
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: ST_TO_ADDR
40291: GO 40636
40293: LD_INT 26
40295: DOUBLE
40296: EQUAL
40297: IFTRUE 40301
40299: GO 40319
40301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40302: LD_ADDR_VAR 0 3
40306: PUSH
40307: LD_INT 13
40309: PUSH
40310: LD_INT 14
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: ST_TO_ADDR
40317: GO 40636
40319: LD_INT 42
40321: DOUBLE
40322: EQUAL
40323: IFTRUE 40327
40325: GO 40353
40327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40328: LD_ADDR_VAR 0 3
40332: PUSH
40333: LD_INT 21
40335: PUSH
40336: LD_INT 22
40338: PUSH
40339: LD_INT 23
40341: PUSH
40342: LD_INT 24
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: ST_TO_ADDR
40351: GO 40636
40353: LD_INT 43
40355: DOUBLE
40356: EQUAL
40357: IFTRUE 40361
40359: GO 40387
40361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40362: LD_ADDR_VAR 0 3
40366: PUSH
40367: LD_INT 21
40369: PUSH
40370: LD_INT 22
40372: PUSH
40373: LD_INT 23
40375: PUSH
40376: LD_INT 24
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: ST_TO_ADDR
40385: GO 40636
40387: LD_INT 44
40389: DOUBLE
40390: EQUAL
40391: IFTRUE 40395
40393: GO 40421
40395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40396: LD_ADDR_VAR 0 3
40400: PUSH
40401: LD_INT 21
40403: PUSH
40404: LD_INT 22
40406: PUSH
40407: LD_INT 23
40409: PUSH
40410: LD_INT 24
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
40419: GO 40636
40421: LD_INT 45
40423: DOUBLE
40424: EQUAL
40425: IFTRUE 40429
40427: GO 40455
40429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_INT 21
40437: PUSH
40438: LD_INT 22
40440: PUSH
40441: LD_INT 23
40443: PUSH
40444: LD_INT 24
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: ST_TO_ADDR
40453: GO 40636
40455: LD_INT 49
40457: DOUBLE
40458: EQUAL
40459: IFTRUE 40463
40461: GO 40489
40463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: LD_INT 21
40471: PUSH
40472: LD_INT 22
40474: PUSH
40475: LD_INT 23
40477: PUSH
40478: LD_INT 24
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
40487: GO 40636
40489: LD_INT 51
40491: DOUBLE
40492: EQUAL
40493: IFTRUE 40497
40495: GO 40523
40497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40498: LD_ADDR_VAR 0 3
40502: PUSH
40503: LD_INT 21
40505: PUSH
40506: LD_INT 22
40508: PUSH
40509: LD_INT 23
40511: PUSH
40512: LD_INT 24
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: ST_TO_ADDR
40521: GO 40636
40523: LD_INT 52
40525: DOUBLE
40526: EQUAL
40527: IFTRUE 40531
40529: GO 40557
40531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40532: LD_ADDR_VAR 0 3
40536: PUSH
40537: LD_INT 21
40539: PUSH
40540: LD_INT 22
40542: PUSH
40543: LD_INT 23
40545: PUSH
40546: LD_INT 24
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: ST_TO_ADDR
40555: GO 40636
40557: LD_INT 53
40559: DOUBLE
40560: EQUAL
40561: IFTRUE 40565
40563: GO 40583
40565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40566: LD_ADDR_VAR 0 3
40570: PUSH
40571: LD_INT 23
40573: PUSH
40574: LD_INT 24
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: ST_TO_ADDR
40581: GO 40636
40583: LD_INT 46
40585: DOUBLE
40586: EQUAL
40587: IFTRUE 40591
40589: GO 40609
40591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40592: LD_ADDR_VAR 0 3
40596: PUSH
40597: LD_INT 23
40599: PUSH
40600: LD_INT 24
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: ST_TO_ADDR
40607: GO 40636
40609: LD_INT 47
40611: DOUBLE
40612: EQUAL
40613: IFTRUE 40617
40615: GO 40635
40617: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40618: LD_ADDR_VAR 0 3
40622: PUSH
40623: LD_INT 23
40625: PUSH
40626: LD_INT 24
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: ST_TO_ADDR
40633: GO 40636
40635: POP
// result := ( chassis in result ) ;
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_VAR 0 1
40645: PUSH
40646: LD_VAR 0 3
40650: IN
40651: ST_TO_ADDR
// end ;
40652: LD_VAR 0 3
40656: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40657: LD_INT 0
40659: PPUSH
40660: PPUSH
40661: PPUSH
40662: PPUSH
40663: PPUSH
40664: PPUSH
40665: PPUSH
// result := array ;
40666: LD_ADDR_VAR 0 5
40670: PUSH
40671: LD_VAR 0 1
40675: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40676: LD_VAR 0 1
40680: NOT
40681: PUSH
40682: LD_VAR 0 2
40686: NOT
40687: OR
40688: PUSH
40689: LD_VAR 0 3
40693: NOT
40694: OR
40695: PUSH
40696: LD_VAR 0 2
40700: PUSH
40701: LD_VAR 0 1
40705: GREATER
40706: OR
40707: PUSH
40708: LD_VAR 0 3
40712: PUSH
40713: LD_VAR 0 1
40717: GREATER
40718: OR
40719: IFFALSE 40723
// exit ;
40721: GO 41019
// if direction then
40723: LD_VAR 0 4
40727: IFFALSE 40791
// begin d := 1 ;
40729: LD_ADDR_VAR 0 9
40733: PUSH
40734: LD_INT 1
40736: ST_TO_ADDR
// if i_from > i_to then
40737: LD_VAR 0 2
40741: PUSH
40742: LD_VAR 0 3
40746: GREATER
40747: IFFALSE 40773
// length := ( array - i_from ) + i_to else
40749: LD_ADDR_VAR 0 11
40753: PUSH
40754: LD_VAR 0 1
40758: PUSH
40759: LD_VAR 0 2
40763: MINUS
40764: PUSH
40765: LD_VAR 0 3
40769: PLUS
40770: ST_TO_ADDR
40771: GO 40789
// length := i_to - i_from ;
40773: LD_ADDR_VAR 0 11
40777: PUSH
40778: LD_VAR 0 3
40782: PUSH
40783: LD_VAR 0 2
40787: MINUS
40788: ST_TO_ADDR
// end else
40789: GO 40852
// begin d := - 1 ;
40791: LD_ADDR_VAR 0 9
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: ST_TO_ADDR
// if i_from > i_to then
40800: LD_VAR 0 2
40804: PUSH
40805: LD_VAR 0 3
40809: GREATER
40810: IFFALSE 40830
// length := i_from - i_to else
40812: LD_ADDR_VAR 0 11
40816: PUSH
40817: LD_VAR 0 2
40821: PUSH
40822: LD_VAR 0 3
40826: MINUS
40827: ST_TO_ADDR
40828: GO 40852
// length := ( array - i_to ) + i_from ;
40830: LD_ADDR_VAR 0 11
40834: PUSH
40835: LD_VAR 0 1
40839: PUSH
40840: LD_VAR 0 3
40844: MINUS
40845: PUSH
40846: LD_VAR 0 2
40850: PLUS
40851: ST_TO_ADDR
// end ; if not length then
40852: LD_VAR 0 11
40856: NOT
40857: IFFALSE 40861
// exit ;
40859: GO 41019
// tmp := array ;
40861: LD_ADDR_VAR 0 10
40865: PUSH
40866: LD_VAR 0 1
40870: ST_TO_ADDR
// for i = 1 to length do
40871: LD_ADDR_VAR 0 6
40875: PUSH
40876: DOUBLE
40877: LD_INT 1
40879: DEC
40880: ST_TO_ADDR
40881: LD_VAR 0 11
40885: PUSH
40886: FOR_TO
40887: IFFALSE 41007
// begin for j = 1 to array do
40889: LD_ADDR_VAR 0 7
40893: PUSH
40894: DOUBLE
40895: LD_INT 1
40897: DEC
40898: ST_TO_ADDR
40899: LD_VAR 0 1
40903: PUSH
40904: FOR_TO
40905: IFFALSE 40993
// begin k := j + d ;
40907: LD_ADDR_VAR 0 8
40911: PUSH
40912: LD_VAR 0 7
40916: PUSH
40917: LD_VAR 0 9
40921: PLUS
40922: ST_TO_ADDR
// if k > array then
40923: LD_VAR 0 8
40927: PUSH
40928: LD_VAR 0 1
40932: GREATER
40933: IFFALSE 40943
// k := 1 ;
40935: LD_ADDR_VAR 0 8
40939: PUSH
40940: LD_INT 1
40942: ST_TO_ADDR
// if not k then
40943: LD_VAR 0 8
40947: NOT
40948: IFFALSE 40960
// k := array ;
40950: LD_ADDR_VAR 0 8
40954: PUSH
40955: LD_VAR 0 1
40959: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40960: LD_ADDR_VAR 0 10
40964: PUSH
40965: LD_VAR 0 10
40969: PPUSH
40970: LD_VAR 0 8
40974: PPUSH
40975: LD_VAR 0 1
40979: PUSH
40980: LD_VAR 0 7
40984: ARRAY
40985: PPUSH
40986: CALL_OW 1
40990: ST_TO_ADDR
// end ;
40991: GO 40904
40993: POP
40994: POP
// array := tmp ;
40995: LD_ADDR_VAR 0 1
40999: PUSH
41000: LD_VAR 0 10
41004: ST_TO_ADDR
// end ;
41005: GO 40886
41007: POP
41008: POP
// result := array ;
41009: LD_ADDR_VAR 0 5
41013: PUSH
41014: LD_VAR 0 1
41018: ST_TO_ADDR
// end ;
41019: LD_VAR 0 5
41023: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41024: LD_INT 0
41026: PPUSH
41027: PPUSH
// result := 0 ;
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: LD_INT 0
41035: ST_TO_ADDR
// if not array or not value in array then
41036: LD_VAR 0 1
41040: NOT
41041: PUSH
41042: LD_VAR 0 2
41046: PUSH
41047: LD_VAR 0 1
41051: IN
41052: NOT
41053: OR
41054: IFFALSE 41058
// exit ;
41056: GO 41112
// for i = 1 to array do
41058: LD_ADDR_VAR 0 4
41062: PUSH
41063: DOUBLE
41064: LD_INT 1
41066: DEC
41067: ST_TO_ADDR
41068: LD_VAR 0 1
41072: PUSH
41073: FOR_TO
41074: IFFALSE 41110
// if value = array [ i ] then
41076: LD_VAR 0 2
41080: PUSH
41081: LD_VAR 0 1
41085: PUSH
41086: LD_VAR 0 4
41090: ARRAY
41091: EQUAL
41092: IFFALSE 41108
// begin result := i ;
41094: LD_ADDR_VAR 0 3
41098: PUSH
41099: LD_VAR 0 4
41103: ST_TO_ADDR
// exit ;
41104: POP
41105: POP
41106: GO 41112
// end ;
41108: GO 41073
41110: POP
41111: POP
// end ;
41112: LD_VAR 0 3
41116: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41117: LD_INT 0
41119: PPUSH
// vc_chassis := chassis ;
41120: LD_ADDR_OWVAR 37
41124: PUSH
41125: LD_VAR 0 1
41129: ST_TO_ADDR
// vc_engine := engine ;
41130: LD_ADDR_OWVAR 39
41134: PUSH
41135: LD_VAR 0 2
41139: ST_TO_ADDR
// vc_control := control ;
41140: LD_ADDR_OWVAR 38
41144: PUSH
41145: LD_VAR 0 3
41149: ST_TO_ADDR
// vc_weapon := weapon ;
41150: LD_ADDR_OWVAR 40
41154: PUSH
41155: LD_VAR 0 4
41159: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41160: LD_ADDR_OWVAR 41
41164: PUSH
41165: LD_VAR 0 5
41169: ST_TO_ADDR
// end ;
41170: LD_VAR 0 6
41174: RET
// export function WantPlant ( unit ) ; var task ; begin
41175: LD_INT 0
41177: PPUSH
41178: PPUSH
// result := false ;
41179: LD_ADDR_VAR 0 2
41183: PUSH
41184: LD_INT 0
41186: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41187: LD_ADDR_VAR 0 3
41191: PUSH
41192: LD_VAR 0 1
41196: PPUSH
41197: CALL_OW 437
41201: ST_TO_ADDR
// if task then
41202: LD_VAR 0 3
41206: IFFALSE 41234
// if task [ 1 ] [ 1 ] = p then
41208: LD_VAR 0 3
41212: PUSH
41213: LD_INT 1
41215: ARRAY
41216: PUSH
41217: LD_INT 1
41219: ARRAY
41220: PUSH
41221: LD_STRING p
41223: EQUAL
41224: IFFALSE 41234
// result := true ;
41226: LD_ADDR_VAR 0 2
41230: PUSH
41231: LD_INT 1
41233: ST_TO_ADDR
// end ;
41234: LD_VAR 0 2
41238: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41239: LD_INT 0
41241: PPUSH
41242: PPUSH
41243: PPUSH
41244: PPUSH
// if pos < 1 then
41245: LD_VAR 0 2
41249: PUSH
41250: LD_INT 1
41252: LESS
41253: IFFALSE 41257
// exit ;
41255: GO 41560
// if pos = 1 then
41257: LD_VAR 0 2
41261: PUSH
41262: LD_INT 1
41264: EQUAL
41265: IFFALSE 41298
// result := Replace ( arr , pos [ 1 ] , value ) else
41267: LD_ADDR_VAR 0 4
41271: PUSH
41272: LD_VAR 0 1
41276: PPUSH
41277: LD_VAR 0 2
41281: PUSH
41282: LD_INT 1
41284: ARRAY
41285: PPUSH
41286: LD_VAR 0 3
41290: PPUSH
41291: CALL_OW 1
41295: ST_TO_ADDR
41296: GO 41560
// begin tmp := arr ;
41298: LD_ADDR_VAR 0 6
41302: PUSH
41303: LD_VAR 0 1
41307: ST_TO_ADDR
// s_arr := [ tmp ] ;
41308: LD_ADDR_VAR 0 7
41312: PUSH
41313: LD_VAR 0 6
41317: PUSH
41318: EMPTY
41319: LIST
41320: ST_TO_ADDR
// for i = 1 to pos - 1 do
41321: LD_ADDR_VAR 0 5
41325: PUSH
41326: DOUBLE
41327: LD_INT 1
41329: DEC
41330: ST_TO_ADDR
41331: LD_VAR 0 2
41335: PUSH
41336: LD_INT 1
41338: MINUS
41339: PUSH
41340: FOR_TO
41341: IFFALSE 41386
// begin tmp := tmp [ pos [ i ] ] ;
41343: LD_ADDR_VAR 0 6
41347: PUSH
41348: LD_VAR 0 6
41352: PUSH
41353: LD_VAR 0 2
41357: PUSH
41358: LD_VAR 0 5
41362: ARRAY
41363: ARRAY
41364: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41365: LD_ADDR_VAR 0 7
41369: PUSH
41370: LD_VAR 0 7
41374: PUSH
41375: LD_VAR 0 6
41379: PUSH
41380: EMPTY
41381: LIST
41382: ADD
41383: ST_TO_ADDR
// end ;
41384: GO 41340
41386: POP
41387: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41388: LD_ADDR_VAR 0 6
41392: PUSH
41393: LD_VAR 0 6
41397: PPUSH
41398: LD_VAR 0 2
41402: PUSH
41403: LD_VAR 0 2
41407: ARRAY
41408: PPUSH
41409: LD_VAR 0 3
41413: PPUSH
41414: CALL_OW 1
41418: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41419: LD_ADDR_VAR 0 7
41423: PUSH
41424: LD_VAR 0 7
41428: PPUSH
41429: LD_VAR 0 7
41433: PPUSH
41434: LD_VAR 0 6
41438: PPUSH
41439: CALL_OW 1
41443: ST_TO_ADDR
// for i = s_arr downto 2 do
41444: LD_ADDR_VAR 0 5
41448: PUSH
41449: DOUBLE
41450: LD_VAR 0 7
41454: INC
41455: ST_TO_ADDR
41456: LD_INT 2
41458: PUSH
41459: FOR_DOWNTO
41460: IFFALSE 41544
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41462: LD_ADDR_VAR 0 6
41466: PUSH
41467: LD_VAR 0 7
41471: PUSH
41472: LD_VAR 0 5
41476: PUSH
41477: LD_INT 1
41479: MINUS
41480: ARRAY
41481: PPUSH
41482: LD_VAR 0 2
41486: PUSH
41487: LD_VAR 0 5
41491: PUSH
41492: LD_INT 1
41494: MINUS
41495: ARRAY
41496: PPUSH
41497: LD_VAR 0 7
41501: PUSH
41502: LD_VAR 0 5
41506: ARRAY
41507: PPUSH
41508: CALL_OW 1
41512: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41513: LD_ADDR_VAR 0 7
41517: PUSH
41518: LD_VAR 0 7
41522: PPUSH
41523: LD_VAR 0 5
41527: PUSH
41528: LD_INT 1
41530: MINUS
41531: PPUSH
41532: LD_VAR 0 6
41536: PPUSH
41537: CALL_OW 1
41541: ST_TO_ADDR
// end ;
41542: GO 41459
41544: POP
41545: POP
// result := s_arr [ 1 ] ;
41546: LD_ADDR_VAR 0 4
41550: PUSH
41551: LD_VAR 0 7
41555: PUSH
41556: LD_INT 1
41558: ARRAY
41559: ST_TO_ADDR
// end ; end ;
41560: LD_VAR 0 4
41564: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41565: LD_INT 0
41567: PPUSH
41568: PPUSH
// if not list then
41569: LD_VAR 0 1
41573: NOT
41574: IFFALSE 41578
// exit ;
41576: GO 41669
// i := list [ pos1 ] ;
41578: LD_ADDR_VAR 0 5
41582: PUSH
41583: LD_VAR 0 1
41587: PUSH
41588: LD_VAR 0 2
41592: ARRAY
41593: ST_TO_ADDR
// if not i then
41594: LD_VAR 0 5
41598: NOT
41599: IFFALSE 41603
// exit ;
41601: GO 41669
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41603: LD_ADDR_VAR 0 1
41607: PUSH
41608: LD_VAR 0 1
41612: PPUSH
41613: LD_VAR 0 2
41617: PPUSH
41618: LD_VAR 0 1
41622: PUSH
41623: LD_VAR 0 3
41627: ARRAY
41628: PPUSH
41629: CALL_OW 1
41633: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41634: LD_ADDR_VAR 0 1
41638: PUSH
41639: LD_VAR 0 1
41643: PPUSH
41644: LD_VAR 0 3
41648: PPUSH
41649: LD_VAR 0 5
41653: PPUSH
41654: CALL_OW 1
41658: ST_TO_ADDR
// result := list ;
41659: LD_ADDR_VAR 0 4
41663: PUSH
41664: LD_VAR 0 1
41668: ST_TO_ADDR
// end ;
41669: LD_VAR 0 4
41673: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41674: LD_INT 0
41676: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41677: LD_ADDR_VAR 0 5
41681: PUSH
41682: LD_VAR 0 1
41686: PPUSH
41687: CALL_OW 250
41691: PPUSH
41692: LD_VAR 0 1
41696: PPUSH
41697: CALL_OW 251
41701: PPUSH
41702: LD_VAR 0 2
41706: PPUSH
41707: LD_VAR 0 3
41711: PPUSH
41712: LD_VAR 0 4
41716: PPUSH
41717: CALL 41727 0 5
41721: ST_TO_ADDR
// end ;
41722: LD_VAR 0 5
41726: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41727: LD_INT 0
41729: PPUSH
41730: PPUSH
41731: PPUSH
41732: PPUSH
// if not list then
41733: LD_VAR 0 3
41737: NOT
41738: IFFALSE 41742
// exit ;
41740: GO 42130
// result := [ ] ;
41742: LD_ADDR_VAR 0 6
41746: PUSH
41747: EMPTY
41748: ST_TO_ADDR
// for i in list do
41749: LD_ADDR_VAR 0 7
41753: PUSH
41754: LD_VAR 0 3
41758: PUSH
41759: FOR_IN
41760: IFFALSE 41962
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41762: LD_ADDR_VAR 0 9
41766: PUSH
41767: LD_VAR 0 7
41771: PPUSH
41772: LD_VAR 0 1
41776: PPUSH
41777: LD_VAR 0 2
41781: PPUSH
41782: CALL_OW 297
41786: ST_TO_ADDR
// if not result then
41787: LD_VAR 0 6
41791: NOT
41792: IFFALSE 41818
// result := [ [ i , tmp ] ] else
41794: LD_ADDR_VAR 0 6
41798: PUSH
41799: LD_VAR 0 7
41803: PUSH
41804: LD_VAR 0 9
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: ST_TO_ADDR
41816: GO 41960
// begin if result [ result ] [ 2 ] < tmp then
41818: LD_VAR 0 6
41822: PUSH
41823: LD_VAR 0 6
41827: ARRAY
41828: PUSH
41829: LD_INT 2
41831: ARRAY
41832: PUSH
41833: LD_VAR 0 9
41837: LESS
41838: IFFALSE 41880
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41840: LD_ADDR_VAR 0 6
41844: PUSH
41845: LD_VAR 0 6
41849: PPUSH
41850: LD_VAR 0 6
41854: PUSH
41855: LD_INT 1
41857: PLUS
41858: PPUSH
41859: LD_VAR 0 7
41863: PUSH
41864: LD_VAR 0 9
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PPUSH
41873: CALL_OW 2
41877: ST_TO_ADDR
41878: GO 41960
// for j = 1 to result do
41880: LD_ADDR_VAR 0 8
41884: PUSH
41885: DOUBLE
41886: LD_INT 1
41888: DEC
41889: ST_TO_ADDR
41890: LD_VAR 0 6
41894: PUSH
41895: FOR_TO
41896: IFFALSE 41958
// begin if tmp < result [ j ] [ 2 ] then
41898: LD_VAR 0 9
41902: PUSH
41903: LD_VAR 0 6
41907: PUSH
41908: LD_VAR 0 8
41912: ARRAY
41913: PUSH
41914: LD_INT 2
41916: ARRAY
41917: LESS
41918: IFFALSE 41956
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41920: LD_ADDR_VAR 0 6
41924: PUSH
41925: LD_VAR 0 6
41929: PPUSH
41930: LD_VAR 0 8
41934: PPUSH
41935: LD_VAR 0 7
41939: PUSH
41940: LD_VAR 0 9
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PPUSH
41949: CALL_OW 2
41953: ST_TO_ADDR
// break ;
41954: GO 41958
// end ; end ;
41956: GO 41895
41958: POP
41959: POP
// end ; end ;
41960: GO 41759
41962: POP
41963: POP
// if result and not asc then
41964: LD_VAR 0 6
41968: PUSH
41969: LD_VAR 0 4
41973: NOT
41974: AND
41975: IFFALSE 42050
// begin tmp := result ;
41977: LD_ADDR_VAR 0 9
41981: PUSH
41982: LD_VAR 0 6
41986: ST_TO_ADDR
// for i = tmp downto 1 do
41987: LD_ADDR_VAR 0 7
41991: PUSH
41992: DOUBLE
41993: LD_VAR 0 9
41997: INC
41998: ST_TO_ADDR
41999: LD_INT 1
42001: PUSH
42002: FOR_DOWNTO
42003: IFFALSE 42048
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42005: LD_ADDR_VAR 0 6
42009: PUSH
42010: LD_VAR 0 6
42014: PPUSH
42015: LD_VAR 0 9
42019: PUSH
42020: LD_VAR 0 7
42024: MINUS
42025: PUSH
42026: LD_INT 1
42028: PLUS
42029: PPUSH
42030: LD_VAR 0 9
42034: PUSH
42035: LD_VAR 0 7
42039: ARRAY
42040: PPUSH
42041: CALL_OW 1
42045: ST_TO_ADDR
42046: GO 42002
42048: POP
42049: POP
// end ; tmp := [ ] ;
42050: LD_ADDR_VAR 0 9
42054: PUSH
42055: EMPTY
42056: ST_TO_ADDR
// if mode then
42057: LD_VAR 0 5
42061: IFFALSE 42130
// begin for i = 1 to result do
42063: LD_ADDR_VAR 0 7
42067: PUSH
42068: DOUBLE
42069: LD_INT 1
42071: DEC
42072: ST_TO_ADDR
42073: LD_VAR 0 6
42077: PUSH
42078: FOR_TO
42079: IFFALSE 42118
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42081: LD_ADDR_VAR 0 9
42085: PUSH
42086: LD_VAR 0 9
42090: PPUSH
42091: LD_VAR 0 7
42095: PPUSH
42096: LD_VAR 0 6
42100: PUSH
42101: LD_VAR 0 7
42105: ARRAY
42106: PUSH
42107: LD_INT 1
42109: ARRAY
42110: PPUSH
42111: CALL_OW 1
42115: ST_TO_ADDR
42116: GO 42078
42118: POP
42119: POP
// result := tmp ;
42120: LD_ADDR_VAR 0 6
42124: PUSH
42125: LD_VAR 0 9
42129: ST_TO_ADDR
// end ; end ;
42130: LD_VAR 0 6
42134: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42135: LD_INT 0
42137: PPUSH
42138: PPUSH
42139: PPUSH
42140: PPUSH
42141: PPUSH
42142: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42143: LD_ADDR_VAR 0 5
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: ST_TO_ADDR
// if not x or not y then
42165: LD_VAR 0 2
42169: NOT
42170: PUSH
42171: LD_VAR 0 3
42175: NOT
42176: OR
42177: IFFALSE 42181
// exit ;
42179: GO 43833
// if not range then
42181: LD_VAR 0 4
42185: NOT
42186: IFFALSE 42196
// range := 10 ;
42188: LD_ADDR_VAR 0 4
42192: PUSH
42193: LD_INT 10
42195: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42196: LD_ADDR_VAR 0 8
42200: PUSH
42201: LD_INT 81
42203: PUSH
42204: LD_VAR 0 1
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 92
42215: PUSH
42216: LD_VAR 0 2
42220: PUSH
42221: LD_VAR 0 3
42225: PUSH
42226: LD_VAR 0 4
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 3
42239: PUSH
42240: LD_INT 21
42242: PUSH
42243: LD_INT 3
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: PPUSH
42259: CALL_OW 69
42263: ST_TO_ADDR
// if not tmp then
42264: LD_VAR 0 8
42268: NOT
42269: IFFALSE 42273
// exit ;
42271: GO 43833
// for i in tmp do
42273: LD_ADDR_VAR 0 6
42277: PUSH
42278: LD_VAR 0 8
42282: PUSH
42283: FOR_IN
42284: IFFALSE 43808
// begin points := [ 0 , 0 , 0 ] ;
42286: LD_ADDR_VAR 0 9
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// bpoints := 1 ;
42305: LD_ADDR_VAR 0 10
42309: PUSH
42310: LD_INT 1
42312: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42313: LD_VAR 0 6
42317: PPUSH
42318: CALL_OW 247
42322: PUSH
42323: LD_INT 1
42325: DOUBLE
42326: EQUAL
42327: IFTRUE 42331
42329: GO 42909
42331: POP
// begin if GetClass ( i ) = 1 then
42332: LD_VAR 0 6
42336: PPUSH
42337: CALL_OW 257
42341: PUSH
42342: LD_INT 1
42344: EQUAL
42345: IFFALSE 42366
// points := [ 10 , 5 , 3 ] ;
42347: LD_ADDR_VAR 0 9
42351: PUSH
42352: LD_INT 10
42354: PUSH
42355: LD_INT 5
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42366: LD_VAR 0 6
42370: PPUSH
42371: CALL_OW 257
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: LD_INT 4
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: IN
42390: IFFALSE 42411
// points := [ 3 , 2 , 1 ] ;
42392: LD_ADDR_VAR 0 9
42396: PUSH
42397: LD_INT 3
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42411: LD_VAR 0 6
42415: PPUSH
42416: CALL_OW 257
42420: PUSH
42421: LD_INT 5
42423: EQUAL
42424: IFFALSE 42445
// points := [ 130 , 5 , 2 ] ;
42426: LD_ADDR_VAR 0 9
42430: PUSH
42431: LD_INT 130
42433: PUSH
42434: LD_INT 5
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42445: LD_VAR 0 6
42449: PPUSH
42450: CALL_OW 257
42454: PUSH
42455: LD_INT 8
42457: EQUAL
42458: IFFALSE 42479
// points := [ 35 , 35 , 30 ] ;
42460: LD_ADDR_VAR 0 9
42464: PUSH
42465: LD_INT 35
42467: PUSH
42468: LD_INT 35
42470: PUSH
42471: LD_INT 30
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42479: LD_VAR 0 6
42483: PPUSH
42484: CALL_OW 257
42488: PUSH
42489: LD_INT 9
42491: EQUAL
42492: IFFALSE 42513
// points := [ 20 , 55 , 40 ] ;
42494: LD_ADDR_VAR 0 9
42498: PUSH
42499: LD_INT 20
42501: PUSH
42502: LD_INT 55
42504: PUSH
42505: LD_INT 40
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42513: LD_VAR 0 6
42517: PPUSH
42518: CALL_OW 257
42522: PUSH
42523: LD_INT 12
42525: PUSH
42526: LD_INT 16
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: IN
42533: IFFALSE 42554
// points := [ 5 , 3 , 2 ] ;
42535: LD_ADDR_VAR 0 9
42539: PUSH
42540: LD_INT 5
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42554: LD_VAR 0 6
42558: PPUSH
42559: CALL_OW 257
42563: PUSH
42564: LD_INT 17
42566: EQUAL
42567: IFFALSE 42588
// points := [ 100 , 50 , 75 ] ;
42569: LD_ADDR_VAR 0 9
42573: PUSH
42574: LD_INT 100
42576: PUSH
42577: LD_INT 50
42579: PUSH
42580: LD_INT 75
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: LIST
42587: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42588: LD_VAR 0 6
42592: PPUSH
42593: CALL_OW 257
42597: PUSH
42598: LD_INT 15
42600: EQUAL
42601: IFFALSE 42622
// points := [ 10 , 5 , 3 ] ;
42603: LD_ADDR_VAR 0 9
42607: PUSH
42608: LD_INT 10
42610: PUSH
42611: LD_INT 5
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42622: LD_VAR 0 6
42626: PPUSH
42627: CALL_OW 257
42631: PUSH
42632: LD_INT 14
42634: EQUAL
42635: IFFALSE 42656
// points := [ 10 , 0 , 0 ] ;
42637: LD_ADDR_VAR 0 9
42641: PUSH
42642: LD_INT 10
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42656: LD_VAR 0 6
42660: PPUSH
42661: CALL_OW 257
42665: PUSH
42666: LD_INT 11
42668: EQUAL
42669: IFFALSE 42690
// points := [ 30 , 10 , 5 ] ;
42671: LD_ADDR_VAR 0 9
42675: PUSH
42676: LD_INT 30
42678: PUSH
42679: LD_INT 10
42681: PUSH
42682: LD_INT 5
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42690: LD_VAR 0 1
42694: PPUSH
42695: LD_INT 5
42697: PPUSH
42698: CALL_OW 321
42702: PUSH
42703: LD_INT 2
42705: EQUAL
42706: IFFALSE 42723
// bpoints := bpoints * 1.8 ;
42708: LD_ADDR_VAR 0 10
42712: PUSH
42713: LD_VAR 0 10
42717: PUSH
42718: LD_REAL  1.80000000000000E+0000
42721: MUL
42722: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42723: LD_VAR 0 6
42727: PPUSH
42728: CALL_OW 257
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: LD_INT 4
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: IN
42751: PUSH
42752: LD_VAR 0 1
42756: PPUSH
42757: LD_INT 51
42759: PPUSH
42760: CALL_OW 321
42764: PUSH
42765: LD_INT 2
42767: EQUAL
42768: AND
42769: IFFALSE 42786
// bpoints := bpoints * 1.2 ;
42771: LD_ADDR_VAR 0 10
42775: PUSH
42776: LD_VAR 0 10
42780: PUSH
42781: LD_REAL  1.20000000000000E+0000
42784: MUL
42785: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42786: LD_VAR 0 6
42790: PPUSH
42791: CALL_OW 257
42795: PUSH
42796: LD_INT 5
42798: PUSH
42799: LD_INT 7
42801: PUSH
42802: LD_INT 9
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: IN
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: LD_INT 52
42818: PPUSH
42819: CALL_OW 321
42823: PUSH
42824: LD_INT 2
42826: EQUAL
42827: AND
42828: IFFALSE 42845
// bpoints := bpoints * 1.5 ;
42830: LD_ADDR_VAR 0 10
42834: PUSH
42835: LD_VAR 0 10
42839: PUSH
42840: LD_REAL  1.50000000000000E+0000
42843: MUL
42844: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42845: LD_VAR 0 1
42849: PPUSH
42850: LD_INT 66
42852: PPUSH
42853: CALL_OW 321
42857: PUSH
42858: LD_INT 2
42860: EQUAL
42861: IFFALSE 42878
// bpoints := bpoints * 1.1 ;
42863: LD_ADDR_VAR 0 10
42867: PUSH
42868: LD_VAR 0 10
42872: PUSH
42873: LD_REAL  1.10000000000000E+0000
42876: MUL
42877: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42878: LD_ADDR_VAR 0 10
42882: PUSH
42883: LD_VAR 0 10
42887: PUSH
42888: LD_VAR 0 6
42892: PPUSH
42893: LD_INT 1
42895: PPUSH
42896: CALL_OW 259
42900: PUSH
42901: LD_REAL  1.15000000000000E+0000
42904: MUL
42905: MUL
42906: ST_TO_ADDR
// end ; unit_vehicle :
42907: GO 43737
42909: LD_INT 2
42911: DOUBLE
42912: EQUAL
42913: IFTRUE 42917
42915: GO 43725
42917: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42918: LD_VAR 0 6
42922: PPUSH
42923: CALL_OW 264
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: LD_INT 42
42933: PUSH
42934: LD_INT 24
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: IN
42942: IFFALSE 42963
// points := [ 25 , 5 , 3 ] ;
42944: LD_ADDR_VAR 0 9
42948: PUSH
42949: LD_INT 25
42951: PUSH
42952: LD_INT 5
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42963: LD_VAR 0 6
42967: PPUSH
42968: CALL_OW 264
42972: PUSH
42973: LD_INT 4
42975: PUSH
42976: LD_INT 43
42978: PUSH
42979: LD_INT 25
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: IN
42987: IFFALSE 43008
// points := [ 40 , 15 , 5 ] ;
42989: LD_ADDR_VAR 0 9
42993: PUSH
42994: LD_INT 40
42996: PUSH
42997: LD_INT 15
42999: PUSH
43000: LD_INT 5
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43008: LD_VAR 0 6
43012: PPUSH
43013: CALL_OW 264
43017: PUSH
43018: LD_INT 3
43020: PUSH
43021: LD_INT 23
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: IN
43028: IFFALSE 43049
// points := [ 7 , 25 , 8 ] ;
43030: LD_ADDR_VAR 0 9
43034: PUSH
43035: LD_INT 7
43037: PUSH
43038: LD_INT 25
43040: PUSH
43041: LD_INT 8
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: LIST
43048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43049: LD_VAR 0 6
43053: PPUSH
43054: CALL_OW 264
43058: PUSH
43059: LD_INT 5
43061: PUSH
43062: LD_INT 27
43064: PUSH
43065: LD_INT 44
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: LIST
43072: IN
43073: IFFALSE 43094
// points := [ 14 , 50 , 16 ] ;
43075: LD_ADDR_VAR 0 9
43079: PUSH
43080: LD_INT 14
43082: PUSH
43083: LD_INT 50
43085: PUSH
43086: LD_INT 16
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43094: LD_VAR 0 6
43098: PPUSH
43099: CALL_OW 264
43103: PUSH
43104: LD_INT 6
43106: PUSH
43107: LD_INT 46
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: IN
43114: IFFALSE 43135
// points := [ 32 , 120 , 70 ] ;
43116: LD_ADDR_VAR 0 9
43120: PUSH
43121: LD_INT 32
43123: PUSH
43124: LD_INT 120
43126: PUSH
43127: LD_INT 70
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43135: LD_VAR 0 6
43139: PPUSH
43140: CALL_OW 264
43144: PUSH
43145: LD_INT 7
43147: PUSH
43148: LD_INT 28
43150: PUSH
43151: LD_INT 45
43153: PUSH
43154: LD_EXP 126
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: IN
43165: IFFALSE 43186
// points := [ 35 , 20 , 45 ] ;
43167: LD_ADDR_VAR 0 9
43171: PUSH
43172: LD_INT 35
43174: PUSH
43175: LD_INT 20
43177: PUSH
43178: LD_INT 45
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43186: LD_VAR 0 6
43190: PPUSH
43191: CALL_OW 264
43195: PUSH
43196: LD_INT 47
43198: PUSH
43199: EMPTY
43200: LIST
43201: IN
43202: IFFALSE 43223
// points := [ 67 , 45 , 75 ] ;
43204: LD_ADDR_VAR 0 9
43208: PUSH
43209: LD_INT 67
43211: PUSH
43212: LD_INT 45
43214: PUSH
43215: LD_INT 75
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43223: LD_VAR 0 6
43227: PPUSH
43228: CALL_OW 264
43232: PUSH
43233: LD_INT 26
43235: PUSH
43236: EMPTY
43237: LIST
43238: IN
43239: IFFALSE 43260
// points := [ 120 , 30 , 80 ] ;
43241: LD_ADDR_VAR 0 9
43245: PUSH
43246: LD_INT 120
43248: PUSH
43249: LD_INT 30
43251: PUSH
43252: LD_INT 80
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: LIST
43259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43260: LD_VAR 0 6
43264: PPUSH
43265: CALL_OW 264
43269: PUSH
43270: LD_INT 22
43272: PUSH
43273: EMPTY
43274: LIST
43275: IN
43276: IFFALSE 43297
// points := [ 40 , 1 , 1 ] ;
43278: LD_ADDR_VAR 0 9
43282: PUSH
43283: LD_INT 40
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43297: LD_VAR 0 6
43301: PPUSH
43302: CALL_OW 264
43306: PUSH
43307: LD_INT 29
43309: PUSH
43310: EMPTY
43311: LIST
43312: IN
43313: IFFALSE 43334
// points := [ 70 , 200 , 400 ] ;
43315: LD_ADDR_VAR 0 9
43319: PUSH
43320: LD_INT 70
43322: PUSH
43323: LD_INT 200
43325: PUSH
43326: LD_INT 400
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43334: LD_VAR 0 6
43338: PPUSH
43339: CALL_OW 264
43343: PUSH
43344: LD_INT 14
43346: PUSH
43347: LD_INT 53
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: IN
43354: IFFALSE 43375
// points := [ 40 , 10 , 20 ] ;
43356: LD_ADDR_VAR 0 9
43360: PUSH
43361: LD_INT 40
43363: PUSH
43364: LD_INT 10
43366: PUSH
43367: LD_INT 20
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43375: LD_VAR 0 6
43379: PPUSH
43380: CALL_OW 264
43384: PUSH
43385: LD_INT 9
43387: PUSH
43388: EMPTY
43389: LIST
43390: IN
43391: IFFALSE 43412
// points := [ 5 , 70 , 20 ] ;
43393: LD_ADDR_VAR 0 9
43397: PUSH
43398: LD_INT 5
43400: PUSH
43401: LD_INT 70
43403: PUSH
43404: LD_INT 20
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43412: LD_VAR 0 6
43416: PPUSH
43417: CALL_OW 264
43421: PUSH
43422: LD_INT 10
43424: PUSH
43425: EMPTY
43426: LIST
43427: IN
43428: IFFALSE 43449
// points := [ 35 , 110 , 70 ] ;
43430: LD_ADDR_VAR 0 9
43434: PUSH
43435: LD_INT 35
43437: PUSH
43438: LD_INT 110
43440: PUSH
43441: LD_INT 70
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43449: LD_VAR 0 6
43453: PPUSH
43454: CALL_OW 265
43458: PUSH
43459: LD_INT 25
43461: EQUAL
43462: IFFALSE 43483
// points := [ 80 , 65 , 100 ] ;
43464: LD_ADDR_VAR 0 9
43468: PUSH
43469: LD_INT 80
43471: PUSH
43472: LD_INT 65
43474: PUSH
43475: LD_INT 100
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43483: LD_VAR 0 6
43487: PPUSH
43488: CALL_OW 263
43492: PUSH
43493: LD_INT 1
43495: EQUAL
43496: IFFALSE 43531
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43498: LD_ADDR_VAR 0 10
43502: PUSH
43503: LD_VAR 0 10
43507: PUSH
43508: LD_VAR 0 6
43512: PPUSH
43513: CALL_OW 311
43517: PPUSH
43518: LD_INT 3
43520: PPUSH
43521: CALL_OW 259
43525: PUSH
43526: LD_INT 4
43528: MUL
43529: MUL
43530: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43531: LD_VAR 0 6
43535: PPUSH
43536: CALL_OW 263
43540: PUSH
43541: LD_INT 2
43543: EQUAL
43544: IFFALSE 43595
// begin j := IsControledBy ( i ) ;
43546: LD_ADDR_VAR 0 7
43550: PUSH
43551: LD_VAR 0 6
43555: PPUSH
43556: CALL_OW 312
43560: ST_TO_ADDR
// if j then
43561: LD_VAR 0 7
43565: IFFALSE 43595
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43567: LD_ADDR_VAR 0 10
43571: PUSH
43572: LD_VAR 0 10
43576: PUSH
43577: LD_VAR 0 7
43581: PPUSH
43582: LD_INT 3
43584: PPUSH
43585: CALL_OW 259
43589: PUSH
43590: LD_INT 3
43592: MUL
43593: MUL
43594: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43595: LD_VAR 0 6
43599: PPUSH
43600: CALL_OW 264
43604: PUSH
43605: LD_INT 5
43607: PUSH
43608: LD_INT 6
43610: PUSH
43611: LD_INT 46
43613: PUSH
43614: LD_INT 44
43616: PUSH
43617: LD_INT 47
43619: PUSH
43620: LD_INT 45
43622: PUSH
43623: LD_INT 28
43625: PUSH
43626: LD_INT 7
43628: PUSH
43629: LD_INT 27
43631: PUSH
43632: LD_INT 29
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: IN
43647: PUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: LD_INT 52
43655: PPUSH
43656: CALL_OW 321
43660: PUSH
43661: LD_INT 2
43663: EQUAL
43664: AND
43665: IFFALSE 43682
// bpoints := bpoints * 1.2 ;
43667: LD_ADDR_VAR 0 10
43671: PUSH
43672: LD_VAR 0 10
43676: PUSH
43677: LD_REAL  1.20000000000000E+0000
43680: MUL
43681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43682: LD_VAR 0 6
43686: PPUSH
43687: CALL_OW 264
43691: PUSH
43692: LD_INT 6
43694: PUSH
43695: LD_INT 46
43697: PUSH
43698: LD_INT 47
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: IN
43706: IFFALSE 43723
// bpoints := bpoints * 1.2 ;
43708: LD_ADDR_VAR 0 10
43712: PUSH
43713: LD_VAR 0 10
43717: PUSH
43718: LD_REAL  1.20000000000000E+0000
43721: MUL
43722: ST_TO_ADDR
// end ; unit_building :
43723: GO 43737
43725: LD_INT 3
43727: DOUBLE
43728: EQUAL
43729: IFTRUE 43733
43731: GO 43736
43733: POP
// ; end ;
43734: GO 43737
43736: POP
// for j = 1 to 3 do
43737: LD_ADDR_VAR 0 7
43741: PUSH
43742: DOUBLE
43743: LD_INT 1
43745: DEC
43746: ST_TO_ADDR
43747: LD_INT 3
43749: PUSH
43750: FOR_TO
43751: IFFALSE 43804
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43753: LD_ADDR_VAR 0 5
43757: PUSH
43758: LD_VAR 0 5
43762: PPUSH
43763: LD_VAR 0 7
43767: PPUSH
43768: LD_VAR 0 5
43772: PUSH
43773: LD_VAR 0 7
43777: ARRAY
43778: PUSH
43779: LD_VAR 0 9
43783: PUSH
43784: LD_VAR 0 7
43788: ARRAY
43789: PUSH
43790: LD_VAR 0 10
43794: MUL
43795: PLUS
43796: PPUSH
43797: CALL_OW 1
43801: ST_TO_ADDR
43802: GO 43750
43804: POP
43805: POP
// end ;
43806: GO 42283
43808: POP
43809: POP
// result := Replace ( result , 4 , tmp ) ;
43810: LD_ADDR_VAR 0 5
43814: PUSH
43815: LD_VAR 0 5
43819: PPUSH
43820: LD_INT 4
43822: PPUSH
43823: LD_VAR 0 8
43827: PPUSH
43828: CALL_OW 1
43832: ST_TO_ADDR
// end ;
43833: LD_VAR 0 5
43837: RET
// export function DangerAtRange ( unit , range ) ; begin
43838: LD_INT 0
43840: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43841: LD_ADDR_VAR 0 3
43845: PUSH
43846: LD_VAR 0 1
43850: PPUSH
43851: CALL_OW 255
43855: PPUSH
43856: LD_VAR 0 1
43860: PPUSH
43861: CALL_OW 250
43865: PPUSH
43866: LD_VAR 0 1
43870: PPUSH
43871: CALL_OW 251
43875: PPUSH
43876: LD_VAR 0 2
43880: PPUSH
43881: CALL 42135 0 4
43885: ST_TO_ADDR
// end ;
43886: LD_VAR 0 3
43890: RET
// export function DangerInArea ( side , area ) ; begin
43891: LD_INT 0
43893: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43894: LD_ADDR_VAR 0 3
43898: PUSH
43899: LD_VAR 0 2
43903: PPUSH
43904: LD_INT 81
43906: PUSH
43907: LD_VAR 0 1
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PPUSH
43916: CALL_OW 70
43920: ST_TO_ADDR
// end ;
43921: LD_VAR 0 3
43925: RET
// export function IsExtension ( b ) ; begin
43926: LD_INT 0
43928: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43929: LD_ADDR_VAR 0 2
43933: PUSH
43934: LD_VAR 0 1
43938: PUSH
43939: LD_INT 23
43941: PUSH
43942: LD_INT 20
43944: PUSH
43945: LD_INT 22
43947: PUSH
43948: LD_INT 17
43950: PUSH
43951: LD_INT 24
43953: PUSH
43954: LD_INT 21
43956: PUSH
43957: LD_INT 19
43959: PUSH
43960: LD_INT 16
43962: PUSH
43963: LD_INT 25
43965: PUSH
43966: LD_INT 18
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: IN
43981: ST_TO_ADDR
// end ;
43982: LD_VAR 0 2
43986: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43987: LD_INT 0
43989: PPUSH
43990: PPUSH
43991: PPUSH
// result := [ ] ;
43992: LD_ADDR_VAR 0 4
43996: PUSH
43997: EMPTY
43998: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43999: LD_ADDR_VAR 0 5
44003: PUSH
44004: LD_VAR 0 2
44008: PPUSH
44009: LD_INT 21
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PPUSH
44019: CALL_OW 70
44023: ST_TO_ADDR
// if not tmp then
44024: LD_VAR 0 5
44028: NOT
44029: IFFALSE 44033
// exit ;
44031: GO 44097
// if checkLink then
44033: LD_VAR 0 3
44037: IFFALSE 44087
// begin for i in tmp do
44039: LD_ADDR_VAR 0 6
44043: PUSH
44044: LD_VAR 0 5
44048: PUSH
44049: FOR_IN
44050: IFFALSE 44085
// if GetBase ( i ) <> base then
44052: LD_VAR 0 6
44056: PPUSH
44057: CALL_OW 274
44061: PUSH
44062: LD_VAR 0 1
44066: NONEQUAL
44067: IFFALSE 44083
// ComLinkToBase ( base , i ) ;
44069: LD_VAR 0 1
44073: PPUSH
44074: LD_VAR 0 6
44078: PPUSH
44079: CALL_OW 169
44083: GO 44049
44085: POP
44086: POP
// end ; result := tmp ;
44087: LD_ADDR_VAR 0 4
44091: PUSH
44092: LD_VAR 0 5
44096: ST_TO_ADDR
// end ;
44097: LD_VAR 0 4
44101: RET
// export function ComComplete ( units , b ) ; var i ; begin
44102: LD_INT 0
44104: PPUSH
44105: PPUSH
// if not units then
44106: LD_VAR 0 1
44110: NOT
44111: IFFALSE 44115
// exit ;
44113: GO 44205
// for i in units do
44115: LD_ADDR_VAR 0 4
44119: PUSH
44120: LD_VAR 0 1
44124: PUSH
44125: FOR_IN
44126: IFFALSE 44203
// if BuildingStatus ( b ) = bs_build then
44128: LD_VAR 0 2
44132: PPUSH
44133: CALL_OW 461
44137: PUSH
44138: LD_INT 1
44140: EQUAL
44141: IFFALSE 44201
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44143: LD_VAR 0 4
44147: PPUSH
44148: LD_STRING h
44150: PUSH
44151: LD_VAR 0 2
44155: PPUSH
44156: CALL_OW 250
44160: PUSH
44161: LD_VAR 0 2
44165: PPUSH
44166: CALL_OW 251
44170: PUSH
44171: LD_VAR 0 2
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: PUSH
44194: EMPTY
44195: LIST
44196: PPUSH
44197: CALL_OW 446
44201: GO 44125
44203: POP
44204: POP
// end ;
44205: LD_VAR 0 3
44209: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44210: LD_INT 0
44212: PPUSH
44213: PPUSH
44214: PPUSH
44215: PPUSH
44216: PPUSH
44217: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44218: LD_VAR 0 1
44222: NOT
44223: PUSH
44224: LD_VAR 0 1
44228: PPUSH
44229: CALL_OW 263
44233: PUSH
44234: LD_INT 2
44236: NONEQUAL
44237: OR
44238: IFFALSE 44242
// exit ;
44240: GO 44558
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44242: LD_ADDR_VAR 0 6
44246: PUSH
44247: LD_INT 22
44249: PUSH
44250: LD_VAR 0 1
44254: PPUSH
44255: CALL_OW 255
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 30
44269: PUSH
44270: LD_INT 36
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 34
44279: PUSH
44280: LD_INT 31
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PPUSH
44296: CALL_OW 69
44300: ST_TO_ADDR
// if not tmp then
44301: LD_VAR 0 6
44305: NOT
44306: IFFALSE 44310
// exit ;
44308: GO 44558
// result := [ ] ;
44310: LD_ADDR_VAR 0 2
44314: PUSH
44315: EMPTY
44316: ST_TO_ADDR
// for i in tmp do
44317: LD_ADDR_VAR 0 3
44321: PUSH
44322: LD_VAR 0 6
44326: PUSH
44327: FOR_IN
44328: IFFALSE 44399
// begin t := UnitsInside ( i ) ;
44330: LD_ADDR_VAR 0 4
44334: PUSH
44335: LD_VAR 0 3
44339: PPUSH
44340: CALL_OW 313
44344: ST_TO_ADDR
// if t then
44345: LD_VAR 0 4
44349: IFFALSE 44397
// for j in t do
44351: LD_ADDR_VAR 0 7
44355: PUSH
44356: LD_VAR 0 4
44360: PUSH
44361: FOR_IN
44362: IFFALSE 44395
// result := Replace ( result , result + 1 , j ) ;
44364: LD_ADDR_VAR 0 2
44368: PUSH
44369: LD_VAR 0 2
44373: PPUSH
44374: LD_VAR 0 2
44378: PUSH
44379: LD_INT 1
44381: PLUS
44382: PPUSH
44383: LD_VAR 0 7
44387: PPUSH
44388: CALL_OW 1
44392: ST_TO_ADDR
44393: GO 44361
44395: POP
44396: POP
// end ;
44397: GO 44327
44399: POP
44400: POP
// if not result then
44401: LD_VAR 0 2
44405: NOT
44406: IFFALSE 44410
// exit ;
44408: GO 44558
// mech := result [ 1 ] ;
44410: LD_ADDR_VAR 0 5
44414: PUSH
44415: LD_VAR 0 2
44419: PUSH
44420: LD_INT 1
44422: ARRAY
44423: ST_TO_ADDR
// if result > 1 then
44424: LD_VAR 0 2
44428: PUSH
44429: LD_INT 1
44431: GREATER
44432: IFFALSE 44544
// begin for i = 2 to result do
44434: LD_ADDR_VAR 0 3
44438: PUSH
44439: DOUBLE
44440: LD_INT 2
44442: DEC
44443: ST_TO_ADDR
44444: LD_VAR 0 2
44448: PUSH
44449: FOR_TO
44450: IFFALSE 44542
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44452: LD_ADDR_VAR 0 4
44456: PUSH
44457: LD_VAR 0 2
44461: PUSH
44462: LD_VAR 0 3
44466: ARRAY
44467: PPUSH
44468: LD_INT 3
44470: PPUSH
44471: CALL_OW 259
44475: PUSH
44476: LD_VAR 0 2
44480: PUSH
44481: LD_VAR 0 3
44485: ARRAY
44486: PPUSH
44487: CALL_OW 432
44491: MINUS
44492: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44493: LD_VAR 0 4
44497: PUSH
44498: LD_VAR 0 5
44502: PPUSH
44503: LD_INT 3
44505: PPUSH
44506: CALL_OW 259
44510: PUSH
44511: LD_VAR 0 5
44515: PPUSH
44516: CALL_OW 432
44520: MINUS
44521: GREATEREQUAL
44522: IFFALSE 44540
// mech := result [ i ] ;
44524: LD_ADDR_VAR 0 5
44528: PUSH
44529: LD_VAR 0 2
44533: PUSH
44534: LD_VAR 0 3
44538: ARRAY
44539: ST_TO_ADDR
// end ;
44540: GO 44449
44542: POP
44543: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44544: LD_VAR 0 1
44548: PPUSH
44549: LD_VAR 0 5
44553: PPUSH
44554: CALL_OW 135
// end ;
44558: LD_VAR 0 2
44562: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44563: LD_INT 0
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
44574: PPUSH
44575: PPUSH
44576: PPUSH
44577: PPUSH
// result := [ ] ;
44578: LD_ADDR_VAR 0 7
44582: PUSH
44583: EMPTY
44584: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44585: LD_VAR 0 1
44589: PPUSH
44590: CALL_OW 266
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: IN
44605: NOT
44606: IFFALSE 44610
// exit ;
44608: GO 46244
// if name then
44610: LD_VAR 0 3
44614: IFFALSE 44630
// SetBName ( base_dep , name ) ;
44616: LD_VAR 0 1
44620: PPUSH
44621: LD_VAR 0 3
44625: PPUSH
44626: CALL_OW 500
// base := GetBase ( base_dep ) ;
44630: LD_ADDR_VAR 0 15
44634: PUSH
44635: LD_VAR 0 1
44639: PPUSH
44640: CALL_OW 274
44644: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44645: LD_ADDR_VAR 0 16
44649: PUSH
44650: LD_VAR 0 1
44654: PPUSH
44655: CALL_OW 255
44659: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44660: LD_ADDR_VAR 0 17
44664: PUSH
44665: LD_VAR 0 1
44669: PPUSH
44670: CALL_OW 248
44674: ST_TO_ADDR
// if sources then
44675: LD_VAR 0 5
44679: IFFALSE 44726
// for i = 1 to 3 do
44681: LD_ADDR_VAR 0 8
44685: PUSH
44686: DOUBLE
44687: LD_INT 1
44689: DEC
44690: ST_TO_ADDR
44691: LD_INT 3
44693: PUSH
44694: FOR_TO
44695: IFFALSE 44724
// AddResourceType ( base , i , sources [ i ] ) ;
44697: LD_VAR 0 15
44701: PPUSH
44702: LD_VAR 0 8
44706: PPUSH
44707: LD_VAR 0 5
44711: PUSH
44712: LD_VAR 0 8
44716: ARRAY
44717: PPUSH
44718: CALL_OW 276
44722: GO 44694
44724: POP
44725: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44726: LD_ADDR_VAR 0 18
44730: PUSH
44731: LD_VAR 0 15
44735: PPUSH
44736: LD_VAR 0 2
44740: PPUSH
44741: LD_INT 1
44743: PPUSH
44744: CALL 43987 0 3
44748: ST_TO_ADDR
// InitHc ;
44749: CALL_OW 19
// InitUc ;
44753: CALL_OW 18
// uc_side := side ;
44757: LD_ADDR_OWVAR 20
44761: PUSH
44762: LD_VAR 0 16
44766: ST_TO_ADDR
// uc_nation := nation ;
44767: LD_ADDR_OWVAR 21
44771: PUSH
44772: LD_VAR 0 17
44776: ST_TO_ADDR
// if buildings then
44777: LD_VAR 0 18
44781: IFFALSE 46103
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44783: LD_ADDR_VAR 0 19
44787: PUSH
44788: LD_VAR 0 18
44792: PPUSH
44793: LD_INT 2
44795: PUSH
44796: LD_INT 30
44798: PUSH
44799: LD_INT 29
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 30
44808: PUSH
44809: LD_INT 30
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: PPUSH
44821: CALL_OW 72
44825: ST_TO_ADDR
// if tmp then
44826: LD_VAR 0 19
44830: IFFALSE 44878
// for i in tmp do
44832: LD_ADDR_VAR 0 8
44836: PUSH
44837: LD_VAR 0 19
44841: PUSH
44842: FOR_IN
44843: IFFALSE 44876
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44845: LD_VAR 0 8
44849: PPUSH
44850: CALL_OW 250
44854: PPUSH
44855: LD_VAR 0 8
44859: PPUSH
44860: CALL_OW 251
44864: PPUSH
44865: LD_VAR 0 16
44869: PPUSH
44870: CALL_OW 441
44874: GO 44842
44876: POP
44877: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44878: LD_VAR 0 18
44882: PPUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 30
44888: PUSH
44889: LD_INT 32
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 30
44898: PUSH
44899: LD_INT 33
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: PPUSH
44911: CALL_OW 72
44915: IFFALSE 45003
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44917: LD_ADDR_VAR 0 8
44921: PUSH
44922: LD_VAR 0 18
44926: PPUSH
44927: LD_INT 2
44929: PUSH
44930: LD_INT 30
44932: PUSH
44933: LD_INT 32
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 30
44942: PUSH
44943: LD_INT 33
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: PPUSH
44955: CALL_OW 72
44959: PUSH
44960: FOR_IN
44961: IFFALSE 45001
// begin if not GetBWeapon ( i ) then
44963: LD_VAR 0 8
44967: PPUSH
44968: CALL_OW 269
44972: NOT
44973: IFFALSE 44999
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44975: LD_VAR 0 8
44979: PPUSH
44980: LD_VAR 0 8
44984: PPUSH
44985: LD_VAR 0 2
44989: PPUSH
44990: CALL 46249 0 2
44994: PPUSH
44995: CALL_OW 431
// end ;
44999: GO 44960
45001: POP
45002: POP
// end ; for i = 1 to personel do
45003: LD_ADDR_VAR 0 8
45007: PUSH
45008: DOUBLE
45009: LD_INT 1
45011: DEC
45012: ST_TO_ADDR
45013: LD_VAR 0 6
45017: PUSH
45018: FOR_TO
45019: IFFALSE 46083
// begin if i > 4 then
45021: LD_VAR 0 8
45025: PUSH
45026: LD_INT 4
45028: GREATER
45029: IFFALSE 45033
// break ;
45031: GO 46083
// case i of 1 :
45033: LD_VAR 0 8
45037: PUSH
45038: LD_INT 1
45040: DOUBLE
45041: EQUAL
45042: IFTRUE 45046
45044: GO 45126
45046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45047: LD_ADDR_VAR 0 12
45051: PUSH
45052: LD_VAR 0 18
45056: PPUSH
45057: LD_INT 22
45059: PUSH
45060: LD_VAR 0 16
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 58
45071: PUSH
45072: EMPTY
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: LD_INT 30
45080: PUSH
45081: LD_INT 32
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 30
45090: PUSH
45091: LD_INT 4
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 30
45100: PUSH
45101: LD_INT 5
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: PPUSH
45119: CALL_OW 72
45123: ST_TO_ADDR
45124: GO 45348
45126: LD_INT 2
45128: DOUBLE
45129: EQUAL
45130: IFTRUE 45134
45132: GO 45196
45134: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45135: LD_ADDR_VAR 0 12
45139: PUSH
45140: LD_VAR 0 18
45144: PPUSH
45145: LD_INT 22
45147: PUSH
45148: LD_VAR 0 16
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 30
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 30
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PPUSH
45189: CALL_OW 72
45193: ST_TO_ADDR
45194: GO 45348
45196: LD_INT 3
45198: DOUBLE
45199: EQUAL
45200: IFTRUE 45204
45202: GO 45266
45204: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45205: LD_ADDR_VAR 0 12
45209: PUSH
45210: LD_VAR 0 18
45214: PPUSH
45215: LD_INT 22
45217: PUSH
45218: LD_VAR 0 16
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 30
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 30
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PPUSH
45259: CALL_OW 72
45263: ST_TO_ADDR
45264: GO 45348
45266: LD_INT 4
45268: DOUBLE
45269: EQUAL
45270: IFTRUE 45274
45272: GO 45347
45274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45275: LD_ADDR_VAR 0 12
45279: PUSH
45280: LD_VAR 0 18
45284: PPUSH
45285: LD_INT 22
45287: PUSH
45288: LD_VAR 0 16
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 30
45302: PUSH
45303: LD_INT 6
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 30
45312: PUSH
45313: LD_INT 7
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 30
45322: PUSH
45323: LD_INT 8
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PPUSH
45340: CALL_OW 72
45344: ST_TO_ADDR
45345: GO 45348
45347: POP
// if i = 1 then
45348: LD_VAR 0 8
45352: PUSH
45353: LD_INT 1
45355: EQUAL
45356: IFFALSE 45467
// begin tmp := [ ] ;
45358: LD_ADDR_VAR 0 19
45362: PUSH
45363: EMPTY
45364: ST_TO_ADDR
// for j in f do
45365: LD_ADDR_VAR 0 9
45369: PUSH
45370: LD_VAR 0 12
45374: PUSH
45375: FOR_IN
45376: IFFALSE 45449
// if GetBType ( j ) = b_bunker then
45378: LD_VAR 0 9
45382: PPUSH
45383: CALL_OW 266
45387: PUSH
45388: LD_INT 32
45390: EQUAL
45391: IFFALSE 45418
// tmp := Insert ( tmp , 1 , j ) else
45393: LD_ADDR_VAR 0 19
45397: PUSH
45398: LD_VAR 0 19
45402: PPUSH
45403: LD_INT 1
45405: PPUSH
45406: LD_VAR 0 9
45410: PPUSH
45411: CALL_OW 2
45415: ST_TO_ADDR
45416: GO 45447
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45418: LD_ADDR_VAR 0 19
45422: PUSH
45423: LD_VAR 0 19
45427: PPUSH
45428: LD_VAR 0 19
45432: PUSH
45433: LD_INT 1
45435: PLUS
45436: PPUSH
45437: LD_VAR 0 9
45441: PPUSH
45442: CALL_OW 2
45446: ST_TO_ADDR
45447: GO 45375
45449: POP
45450: POP
// if tmp then
45451: LD_VAR 0 19
45455: IFFALSE 45467
// f := tmp ;
45457: LD_ADDR_VAR 0 12
45461: PUSH
45462: LD_VAR 0 19
45466: ST_TO_ADDR
// end ; x := personel [ i ] ;
45467: LD_ADDR_VAR 0 13
45471: PUSH
45472: LD_VAR 0 6
45476: PUSH
45477: LD_VAR 0 8
45481: ARRAY
45482: ST_TO_ADDR
// if x = - 1 then
45483: LD_VAR 0 13
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: EQUAL
45492: IFFALSE 45701
// begin for j in f do
45494: LD_ADDR_VAR 0 9
45498: PUSH
45499: LD_VAR 0 12
45503: PUSH
45504: FOR_IN
45505: IFFALSE 45697
// repeat InitHc ;
45507: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45511: LD_VAR 0 9
45515: PPUSH
45516: CALL_OW 266
45520: PUSH
45521: LD_INT 5
45523: EQUAL
45524: IFFALSE 45594
// begin if UnitsInside ( j ) < 3 then
45526: LD_VAR 0 9
45530: PPUSH
45531: CALL_OW 313
45535: PUSH
45536: LD_INT 3
45538: LESS
45539: IFFALSE 45575
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45541: LD_INT 0
45543: PPUSH
45544: LD_INT 5
45546: PUSH
45547: LD_INT 8
45549: PUSH
45550: LD_INT 9
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: PUSH
45558: LD_VAR 0 17
45562: ARRAY
45563: PPUSH
45564: LD_VAR 0 4
45568: PPUSH
45569: CALL_OW 380
45573: GO 45592
// PrepareHuman ( false , i , skill ) ;
45575: LD_INT 0
45577: PPUSH
45578: LD_VAR 0 8
45582: PPUSH
45583: LD_VAR 0 4
45587: PPUSH
45588: CALL_OW 380
// end else
45592: GO 45611
// PrepareHuman ( false , i , skill ) ;
45594: LD_INT 0
45596: PPUSH
45597: LD_VAR 0 8
45601: PPUSH
45602: LD_VAR 0 4
45606: PPUSH
45607: CALL_OW 380
// un := CreateHuman ;
45611: LD_ADDR_VAR 0 14
45615: PUSH
45616: CALL_OW 44
45620: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45621: LD_ADDR_VAR 0 7
45625: PUSH
45626: LD_VAR 0 7
45630: PPUSH
45631: LD_INT 1
45633: PPUSH
45634: LD_VAR 0 14
45638: PPUSH
45639: CALL_OW 2
45643: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45644: LD_VAR 0 14
45648: PPUSH
45649: LD_VAR 0 9
45653: PPUSH
45654: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45658: LD_VAR 0 9
45662: PPUSH
45663: CALL_OW 313
45667: PUSH
45668: LD_INT 6
45670: EQUAL
45671: PUSH
45672: LD_VAR 0 9
45676: PPUSH
45677: CALL_OW 266
45681: PUSH
45682: LD_INT 32
45684: PUSH
45685: LD_INT 31
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: IN
45692: OR
45693: IFFALSE 45507
45695: GO 45504
45697: POP
45698: POP
// end else
45699: GO 46081
// for j = 1 to x do
45701: LD_ADDR_VAR 0 9
45705: PUSH
45706: DOUBLE
45707: LD_INT 1
45709: DEC
45710: ST_TO_ADDR
45711: LD_VAR 0 13
45715: PUSH
45716: FOR_TO
45717: IFFALSE 46079
// begin InitHc ;
45719: CALL_OW 19
// if not f then
45723: LD_VAR 0 12
45727: NOT
45728: IFFALSE 45817
// begin PrepareHuman ( false , i , skill ) ;
45730: LD_INT 0
45732: PPUSH
45733: LD_VAR 0 8
45737: PPUSH
45738: LD_VAR 0 4
45742: PPUSH
45743: CALL_OW 380
// un := CreateHuman ;
45747: LD_ADDR_VAR 0 14
45751: PUSH
45752: CALL_OW 44
45756: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45757: LD_ADDR_VAR 0 7
45761: PUSH
45762: LD_VAR 0 7
45766: PPUSH
45767: LD_INT 1
45769: PPUSH
45770: LD_VAR 0 14
45774: PPUSH
45775: CALL_OW 2
45779: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45780: LD_VAR 0 14
45784: PPUSH
45785: LD_VAR 0 1
45789: PPUSH
45790: CALL_OW 250
45794: PPUSH
45795: LD_VAR 0 1
45799: PPUSH
45800: CALL_OW 251
45804: PPUSH
45805: LD_INT 10
45807: PPUSH
45808: LD_INT 0
45810: PPUSH
45811: CALL_OW 50
// continue ;
45815: GO 45716
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45817: LD_VAR 0 12
45821: PUSH
45822: LD_INT 1
45824: ARRAY
45825: PPUSH
45826: CALL_OW 313
45830: PUSH
45831: LD_VAR 0 12
45835: PUSH
45836: LD_INT 1
45838: ARRAY
45839: PPUSH
45840: CALL_OW 266
45844: PUSH
45845: LD_INT 32
45847: PUSH
45848: LD_INT 31
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: IN
45855: AND
45856: PUSH
45857: LD_VAR 0 12
45861: PUSH
45862: LD_INT 1
45864: ARRAY
45865: PPUSH
45866: CALL_OW 313
45870: PUSH
45871: LD_INT 6
45873: EQUAL
45874: OR
45875: IFFALSE 45895
// f := Delete ( f , 1 ) ;
45877: LD_ADDR_VAR 0 12
45881: PUSH
45882: LD_VAR 0 12
45886: PPUSH
45887: LD_INT 1
45889: PPUSH
45890: CALL_OW 3
45894: ST_TO_ADDR
// if not f then
45895: LD_VAR 0 12
45899: NOT
45900: IFFALSE 45918
// begin x := x + 2 ;
45902: LD_ADDR_VAR 0 13
45906: PUSH
45907: LD_VAR 0 13
45911: PUSH
45912: LD_INT 2
45914: PLUS
45915: ST_TO_ADDR
// continue ;
45916: GO 45716
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45918: LD_VAR 0 12
45922: PUSH
45923: LD_INT 1
45925: ARRAY
45926: PPUSH
45927: CALL_OW 266
45931: PUSH
45932: LD_INT 5
45934: EQUAL
45935: IFFALSE 46009
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45937: LD_VAR 0 12
45941: PUSH
45942: LD_INT 1
45944: ARRAY
45945: PPUSH
45946: CALL_OW 313
45950: PUSH
45951: LD_INT 3
45953: LESS
45954: IFFALSE 45990
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45956: LD_INT 0
45958: PPUSH
45959: LD_INT 5
45961: PUSH
45962: LD_INT 8
45964: PUSH
45965: LD_INT 9
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: PUSH
45973: LD_VAR 0 17
45977: ARRAY
45978: PPUSH
45979: LD_VAR 0 4
45983: PPUSH
45984: CALL_OW 380
45988: GO 46007
// PrepareHuman ( false , i , skill ) ;
45990: LD_INT 0
45992: PPUSH
45993: LD_VAR 0 8
45997: PPUSH
45998: LD_VAR 0 4
46002: PPUSH
46003: CALL_OW 380
// end else
46007: GO 46026
// PrepareHuman ( false , i , skill ) ;
46009: LD_INT 0
46011: PPUSH
46012: LD_VAR 0 8
46016: PPUSH
46017: LD_VAR 0 4
46021: PPUSH
46022: CALL_OW 380
// un := CreateHuman ;
46026: LD_ADDR_VAR 0 14
46030: PUSH
46031: CALL_OW 44
46035: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46036: LD_ADDR_VAR 0 7
46040: PUSH
46041: LD_VAR 0 7
46045: PPUSH
46046: LD_INT 1
46048: PPUSH
46049: LD_VAR 0 14
46053: PPUSH
46054: CALL_OW 2
46058: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46059: LD_VAR 0 14
46063: PPUSH
46064: LD_VAR 0 12
46068: PUSH
46069: LD_INT 1
46071: ARRAY
46072: PPUSH
46073: CALL_OW 52
// end ;
46077: GO 45716
46079: POP
46080: POP
// end ;
46081: GO 45018
46083: POP
46084: POP
// result := result ^ buildings ;
46085: LD_ADDR_VAR 0 7
46089: PUSH
46090: LD_VAR 0 7
46094: PUSH
46095: LD_VAR 0 18
46099: ADD
46100: ST_TO_ADDR
// end else
46101: GO 46244
// begin for i = 1 to personel do
46103: LD_ADDR_VAR 0 8
46107: PUSH
46108: DOUBLE
46109: LD_INT 1
46111: DEC
46112: ST_TO_ADDR
46113: LD_VAR 0 6
46117: PUSH
46118: FOR_TO
46119: IFFALSE 46242
// begin if i > 4 then
46121: LD_VAR 0 8
46125: PUSH
46126: LD_INT 4
46128: GREATER
46129: IFFALSE 46133
// break ;
46131: GO 46242
// x := personel [ i ] ;
46133: LD_ADDR_VAR 0 13
46137: PUSH
46138: LD_VAR 0 6
46142: PUSH
46143: LD_VAR 0 8
46147: ARRAY
46148: ST_TO_ADDR
// if x = - 1 then
46149: LD_VAR 0 13
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: EQUAL
46158: IFFALSE 46162
// continue ;
46160: GO 46118
// PrepareHuman ( false , i , skill ) ;
46162: LD_INT 0
46164: PPUSH
46165: LD_VAR 0 8
46169: PPUSH
46170: LD_VAR 0 4
46174: PPUSH
46175: CALL_OW 380
// un := CreateHuman ;
46179: LD_ADDR_VAR 0 14
46183: PUSH
46184: CALL_OW 44
46188: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46189: LD_VAR 0 14
46193: PPUSH
46194: LD_VAR 0 1
46198: PPUSH
46199: CALL_OW 250
46203: PPUSH
46204: LD_VAR 0 1
46208: PPUSH
46209: CALL_OW 251
46213: PPUSH
46214: LD_INT 10
46216: PPUSH
46217: LD_INT 0
46219: PPUSH
46220: CALL_OW 50
// result := result ^ un ;
46224: LD_ADDR_VAR 0 7
46228: PUSH
46229: LD_VAR 0 7
46233: PUSH
46234: LD_VAR 0 14
46238: ADD
46239: ST_TO_ADDR
// end ;
46240: GO 46118
46242: POP
46243: POP
// end ; end ;
46244: LD_VAR 0 7
46248: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46249: LD_INT 0
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
// result := false ;
46267: LD_ADDR_VAR 0 3
46271: PUSH
46272: LD_INT 0
46274: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46275: LD_VAR 0 1
46279: NOT
46280: PUSH
46281: LD_VAR 0 1
46285: PPUSH
46286: CALL_OW 266
46290: PUSH
46291: LD_INT 32
46293: PUSH
46294: LD_INT 33
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: IN
46301: NOT
46302: OR
46303: IFFALSE 46307
// exit ;
46305: GO 47416
// nat := GetNation ( tower ) ;
46307: LD_ADDR_VAR 0 12
46311: PUSH
46312: LD_VAR 0 1
46316: PPUSH
46317: CALL_OW 248
46321: ST_TO_ADDR
// side := GetSide ( tower ) ;
46322: LD_ADDR_VAR 0 16
46326: PUSH
46327: LD_VAR 0 1
46331: PPUSH
46332: CALL_OW 255
46336: ST_TO_ADDR
// x := GetX ( tower ) ;
46337: LD_ADDR_VAR 0 10
46341: PUSH
46342: LD_VAR 0 1
46346: PPUSH
46347: CALL_OW 250
46351: ST_TO_ADDR
// y := GetY ( tower ) ;
46352: LD_ADDR_VAR 0 11
46356: PUSH
46357: LD_VAR 0 1
46361: PPUSH
46362: CALL_OW 251
46366: ST_TO_ADDR
// if not x or not y then
46367: LD_VAR 0 10
46371: NOT
46372: PUSH
46373: LD_VAR 0 11
46377: NOT
46378: OR
46379: IFFALSE 46383
// exit ;
46381: GO 47416
// weapon := 0 ;
46383: LD_ADDR_VAR 0 18
46387: PUSH
46388: LD_INT 0
46390: ST_TO_ADDR
// fac_list := [ ] ;
46391: LD_ADDR_VAR 0 17
46395: PUSH
46396: EMPTY
46397: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46398: LD_ADDR_VAR 0 6
46402: PUSH
46403: LD_VAR 0 1
46407: PPUSH
46408: CALL_OW 274
46412: PPUSH
46413: LD_VAR 0 2
46417: PPUSH
46418: LD_INT 0
46420: PPUSH
46421: CALL 43987 0 3
46425: PPUSH
46426: LD_INT 30
46428: PUSH
46429: LD_INT 3
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PPUSH
46436: CALL_OW 72
46440: ST_TO_ADDR
// if not factories then
46441: LD_VAR 0 6
46445: NOT
46446: IFFALSE 46450
// exit ;
46448: GO 47416
// for i in factories do
46450: LD_ADDR_VAR 0 8
46454: PUSH
46455: LD_VAR 0 6
46459: PUSH
46460: FOR_IN
46461: IFFALSE 46486
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46463: LD_ADDR_VAR 0 17
46467: PUSH
46468: LD_VAR 0 17
46472: PUSH
46473: LD_VAR 0 8
46477: PPUSH
46478: CALL_OW 478
46482: UNION
46483: ST_TO_ADDR
46484: GO 46460
46486: POP
46487: POP
// if not fac_list then
46488: LD_VAR 0 17
46492: NOT
46493: IFFALSE 46497
// exit ;
46495: GO 47416
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46497: LD_ADDR_VAR 0 5
46501: PUSH
46502: LD_INT 4
46504: PUSH
46505: LD_INT 5
46507: PUSH
46508: LD_INT 9
46510: PUSH
46511: LD_INT 10
46513: PUSH
46514: LD_INT 6
46516: PUSH
46517: LD_INT 7
46519: PUSH
46520: LD_INT 11
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 27
46534: PUSH
46535: LD_INT 28
46537: PUSH
46538: LD_INT 26
46540: PUSH
46541: LD_INT 30
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 43
46552: PUSH
46553: LD_INT 44
46555: PUSH
46556: LD_INT 46
46558: PUSH
46559: LD_INT 45
46561: PUSH
46562: LD_INT 47
46564: PUSH
46565: LD_INT 49
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: PUSH
46581: LD_VAR 0 12
46585: ARRAY
46586: ST_TO_ADDR
// list := list isect fac_list ;
46587: LD_ADDR_VAR 0 5
46591: PUSH
46592: LD_VAR 0 5
46596: PUSH
46597: LD_VAR 0 17
46601: ISECT
46602: ST_TO_ADDR
// if not list then
46603: LD_VAR 0 5
46607: NOT
46608: IFFALSE 46612
// exit ;
46610: GO 47416
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46612: LD_VAR 0 12
46616: PUSH
46617: LD_INT 3
46619: EQUAL
46620: PUSH
46621: LD_INT 49
46623: PUSH
46624: LD_VAR 0 5
46628: IN
46629: AND
46630: PUSH
46631: LD_INT 31
46633: PPUSH
46634: LD_VAR 0 16
46638: PPUSH
46639: CALL_OW 321
46643: PUSH
46644: LD_INT 2
46646: EQUAL
46647: AND
46648: IFFALSE 46708
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46650: LD_INT 22
46652: PUSH
46653: LD_VAR 0 16
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 35
46664: PUSH
46665: LD_INT 49
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 91
46674: PUSH
46675: LD_VAR 0 1
46679: PUSH
46680: LD_INT 10
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: LIST
46692: PPUSH
46693: CALL_OW 69
46697: NOT
46698: IFFALSE 46708
// weapon := ru_time_lapser ;
46700: LD_ADDR_VAR 0 18
46704: PUSH
46705: LD_INT 49
46707: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46708: LD_VAR 0 12
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: IN
46723: PUSH
46724: LD_INT 11
46726: PUSH
46727: LD_VAR 0 5
46731: IN
46732: PUSH
46733: LD_INT 30
46735: PUSH
46736: LD_VAR 0 5
46740: IN
46741: OR
46742: AND
46743: PUSH
46744: LD_INT 6
46746: PPUSH
46747: LD_VAR 0 16
46751: PPUSH
46752: CALL_OW 321
46756: PUSH
46757: LD_INT 2
46759: EQUAL
46760: AND
46761: IFFALSE 46926
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46763: LD_INT 22
46765: PUSH
46766: LD_VAR 0 16
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 35
46780: PUSH
46781: LD_INT 11
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 35
46790: PUSH
46791: LD_INT 30
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 91
46805: PUSH
46806: LD_VAR 0 1
46810: PUSH
46811: LD_INT 18
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: PPUSH
46824: CALL_OW 69
46828: NOT
46829: PUSH
46830: LD_INT 22
46832: PUSH
46833: LD_VAR 0 16
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 30
46847: PUSH
46848: LD_INT 32
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 30
46857: PUSH
46858: LD_INT 33
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 91
46872: PUSH
46873: LD_VAR 0 1
46877: PUSH
46878: LD_INT 12
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: PUSH
46891: EMPTY
46892: LIST
46893: PPUSH
46894: CALL_OW 69
46898: PUSH
46899: LD_INT 2
46901: GREATER
46902: AND
46903: IFFALSE 46926
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46905: LD_ADDR_VAR 0 18
46909: PUSH
46910: LD_INT 11
46912: PUSH
46913: LD_INT 30
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_VAR 0 12
46924: ARRAY
46925: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46926: LD_VAR 0 18
46930: NOT
46931: PUSH
46932: LD_INT 40
46934: PPUSH
46935: LD_VAR 0 16
46939: PPUSH
46940: CALL_OW 321
46944: PUSH
46945: LD_INT 2
46947: EQUAL
46948: AND
46949: PUSH
46950: LD_INT 7
46952: PUSH
46953: LD_VAR 0 5
46957: IN
46958: PUSH
46959: LD_INT 28
46961: PUSH
46962: LD_VAR 0 5
46966: IN
46967: OR
46968: PUSH
46969: LD_INT 45
46971: PUSH
46972: LD_VAR 0 5
46976: IN
46977: OR
46978: AND
46979: IFFALSE 47233
// begin hex := GetHexInfo ( x , y ) ;
46981: LD_ADDR_VAR 0 4
46985: PUSH
46986: LD_VAR 0 10
46990: PPUSH
46991: LD_VAR 0 11
46995: PPUSH
46996: CALL_OW 546
47000: ST_TO_ADDR
// if hex [ 1 ] then
47001: LD_VAR 0 4
47005: PUSH
47006: LD_INT 1
47008: ARRAY
47009: IFFALSE 47013
// exit ;
47011: GO 47416
// height := hex [ 2 ] ;
47013: LD_ADDR_VAR 0 15
47017: PUSH
47018: LD_VAR 0 4
47022: PUSH
47023: LD_INT 2
47025: ARRAY
47026: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47027: LD_ADDR_VAR 0 14
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 3
47040: PUSH
47041: LD_INT 5
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: ST_TO_ADDR
// for i in tmp do
47050: LD_ADDR_VAR 0 8
47054: PUSH
47055: LD_VAR 0 14
47059: PUSH
47060: FOR_IN
47061: IFFALSE 47231
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47063: LD_ADDR_VAR 0 9
47067: PUSH
47068: LD_VAR 0 10
47072: PPUSH
47073: LD_VAR 0 8
47077: PPUSH
47078: LD_INT 5
47080: PPUSH
47081: CALL_OW 272
47085: PUSH
47086: LD_VAR 0 11
47090: PPUSH
47091: LD_VAR 0 8
47095: PPUSH
47096: LD_INT 5
47098: PPUSH
47099: CALL_OW 273
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47108: LD_VAR 0 9
47112: PUSH
47113: LD_INT 1
47115: ARRAY
47116: PPUSH
47117: LD_VAR 0 9
47121: PUSH
47122: LD_INT 2
47124: ARRAY
47125: PPUSH
47126: CALL_OW 488
47130: IFFALSE 47229
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47132: LD_ADDR_VAR 0 4
47136: PUSH
47137: LD_VAR 0 9
47141: PUSH
47142: LD_INT 1
47144: ARRAY
47145: PPUSH
47146: LD_VAR 0 9
47150: PUSH
47151: LD_INT 2
47153: ARRAY
47154: PPUSH
47155: CALL_OW 546
47159: ST_TO_ADDR
// if hex [ 1 ] then
47160: LD_VAR 0 4
47164: PUSH
47165: LD_INT 1
47167: ARRAY
47168: IFFALSE 47172
// continue ;
47170: GO 47060
// h := hex [ 2 ] ;
47172: LD_ADDR_VAR 0 13
47176: PUSH
47177: LD_VAR 0 4
47181: PUSH
47182: LD_INT 2
47184: ARRAY
47185: ST_TO_ADDR
// if h + 7 < height then
47186: LD_VAR 0 13
47190: PUSH
47191: LD_INT 7
47193: PLUS
47194: PUSH
47195: LD_VAR 0 15
47199: LESS
47200: IFFALSE 47229
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47202: LD_ADDR_VAR 0 18
47206: PUSH
47207: LD_INT 7
47209: PUSH
47210: LD_INT 28
47212: PUSH
47213: LD_INT 45
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: PUSH
47221: LD_VAR 0 12
47225: ARRAY
47226: ST_TO_ADDR
// break ;
47227: GO 47231
// end ; end ; end ;
47229: GO 47060
47231: POP
47232: POP
// end ; if not weapon then
47233: LD_VAR 0 18
47237: NOT
47238: IFFALSE 47298
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47240: LD_ADDR_VAR 0 5
47244: PUSH
47245: LD_VAR 0 5
47249: PUSH
47250: LD_INT 11
47252: PUSH
47253: LD_INT 30
47255: PUSH
47256: LD_INT 49
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: DIFF
47264: ST_TO_ADDR
// if not list then
47265: LD_VAR 0 5
47269: NOT
47270: IFFALSE 47274
// exit ;
47272: GO 47416
// weapon := list [ rand ( 1 , list ) ] ;
47274: LD_ADDR_VAR 0 18
47278: PUSH
47279: LD_VAR 0 5
47283: PUSH
47284: LD_INT 1
47286: PPUSH
47287: LD_VAR 0 5
47291: PPUSH
47292: CALL_OW 12
47296: ARRAY
47297: ST_TO_ADDR
// end ; if weapon then
47298: LD_VAR 0 18
47302: IFFALSE 47416
// begin tmp := CostOfWeapon ( weapon ) ;
47304: LD_ADDR_VAR 0 14
47308: PUSH
47309: LD_VAR 0 18
47313: PPUSH
47314: CALL_OW 451
47318: ST_TO_ADDR
// j := GetBase ( tower ) ;
47319: LD_ADDR_VAR 0 9
47323: PUSH
47324: LD_VAR 0 1
47328: PPUSH
47329: CALL_OW 274
47333: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47334: LD_VAR 0 9
47338: PPUSH
47339: LD_INT 1
47341: PPUSH
47342: CALL_OW 275
47346: PUSH
47347: LD_VAR 0 14
47351: PUSH
47352: LD_INT 1
47354: ARRAY
47355: GREATEREQUAL
47356: PUSH
47357: LD_VAR 0 9
47361: PPUSH
47362: LD_INT 2
47364: PPUSH
47365: CALL_OW 275
47369: PUSH
47370: LD_VAR 0 14
47374: PUSH
47375: LD_INT 2
47377: ARRAY
47378: GREATEREQUAL
47379: AND
47380: PUSH
47381: LD_VAR 0 9
47385: PPUSH
47386: LD_INT 3
47388: PPUSH
47389: CALL_OW 275
47393: PUSH
47394: LD_VAR 0 14
47398: PUSH
47399: LD_INT 3
47401: ARRAY
47402: GREATEREQUAL
47403: AND
47404: IFFALSE 47416
// result := weapon ;
47406: LD_ADDR_VAR 0 3
47410: PUSH
47411: LD_VAR 0 18
47415: ST_TO_ADDR
// end ; end ;
47416: LD_VAR 0 3
47420: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47421: LD_INT 0
47423: PPUSH
47424: PPUSH
// result := true ;
47425: LD_ADDR_VAR 0 3
47429: PUSH
47430: LD_INT 1
47432: ST_TO_ADDR
// if array1 = array2 then
47433: LD_VAR 0 1
47437: PUSH
47438: LD_VAR 0 2
47442: EQUAL
47443: IFFALSE 47503
// begin for i = 1 to array1 do
47445: LD_ADDR_VAR 0 4
47449: PUSH
47450: DOUBLE
47451: LD_INT 1
47453: DEC
47454: ST_TO_ADDR
47455: LD_VAR 0 1
47459: PUSH
47460: FOR_TO
47461: IFFALSE 47499
// if array1 [ i ] <> array2 [ i ] then
47463: LD_VAR 0 1
47467: PUSH
47468: LD_VAR 0 4
47472: ARRAY
47473: PUSH
47474: LD_VAR 0 2
47478: PUSH
47479: LD_VAR 0 4
47483: ARRAY
47484: NONEQUAL
47485: IFFALSE 47497
// begin result := false ;
47487: LD_ADDR_VAR 0 3
47491: PUSH
47492: LD_INT 0
47494: ST_TO_ADDR
// break ;
47495: GO 47499
// end ;
47497: GO 47460
47499: POP
47500: POP
// end else
47501: GO 47511
// result := false ;
47503: LD_ADDR_VAR 0 3
47507: PUSH
47508: LD_INT 0
47510: ST_TO_ADDR
// end ;
47511: LD_VAR 0 3
47515: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47516: LD_INT 0
47518: PPUSH
47519: PPUSH
// if not array1 or not array2 then
47520: LD_VAR 0 1
47524: NOT
47525: PUSH
47526: LD_VAR 0 2
47530: NOT
47531: OR
47532: IFFALSE 47536
// exit ;
47534: GO 47600
// result := true ;
47536: LD_ADDR_VAR 0 3
47540: PUSH
47541: LD_INT 1
47543: ST_TO_ADDR
// for i = 1 to array1 do
47544: LD_ADDR_VAR 0 4
47548: PUSH
47549: DOUBLE
47550: LD_INT 1
47552: DEC
47553: ST_TO_ADDR
47554: LD_VAR 0 1
47558: PUSH
47559: FOR_TO
47560: IFFALSE 47598
// if array1 [ i ] <> array2 [ i ] then
47562: LD_VAR 0 1
47566: PUSH
47567: LD_VAR 0 4
47571: ARRAY
47572: PUSH
47573: LD_VAR 0 2
47577: PUSH
47578: LD_VAR 0 4
47582: ARRAY
47583: NONEQUAL
47584: IFFALSE 47596
// begin result := false ;
47586: LD_ADDR_VAR 0 3
47590: PUSH
47591: LD_INT 0
47593: ST_TO_ADDR
// break ;
47594: GO 47598
// end ;
47596: GO 47559
47598: POP
47599: POP
// end ;
47600: LD_VAR 0 3
47604: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47605: LD_INT 0
47607: PPUSH
47608: PPUSH
47609: PPUSH
// pom := GetBase ( fac ) ;
47610: LD_ADDR_VAR 0 5
47614: PUSH
47615: LD_VAR 0 1
47619: PPUSH
47620: CALL_OW 274
47624: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47625: LD_ADDR_VAR 0 4
47629: PUSH
47630: LD_VAR 0 2
47634: PUSH
47635: LD_INT 1
47637: ARRAY
47638: PPUSH
47639: LD_VAR 0 2
47643: PUSH
47644: LD_INT 2
47646: ARRAY
47647: PPUSH
47648: LD_VAR 0 2
47652: PUSH
47653: LD_INT 3
47655: ARRAY
47656: PPUSH
47657: LD_VAR 0 2
47661: PUSH
47662: LD_INT 4
47664: ARRAY
47665: PPUSH
47666: CALL_OW 449
47670: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_VAR 0 5
47680: PPUSH
47681: LD_INT 1
47683: PPUSH
47684: CALL_OW 275
47688: PUSH
47689: LD_VAR 0 4
47693: PUSH
47694: LD_INT 1
47696: ARRAY
47697: GREATEREQUAL
47698: PUSH
47699: LD_VAR 0 5
47703: PPUSH
47704: LD_INT 2
47706: PPUSH
47707: CALL_OW 275
47711: PUSH
47712: LD_VAR 0 4
47716: PUSH
47717: LD_INT 2
47719: ARRAY
47720: GREATEREQUAL
47721: AND
47722: PUSH
47723: LD_VAR 0 5
47727: PPUSH
47728: LD_INT 3
47730: PPUSH
47731: CALL_OW 275
47735: PUSH
47736: LD_VAR 0 4
47740: PUSH
47741: LD_INT 3
47743: ARRAY
47744: GREATEREQUAL
47745: AND
47746: ST_TO_ADDR
// end ;
47747: LD_VAR 0 3
47751: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47752: LD_INT 0
47754: PPUSH
47755: PPUSH
47756: PPUSH
47757: PPUSH
// pom := GetBase ( building ) ;
47758: LD_ADDR_VAR 0 3
47762: PUSH
47763: LD_VAR 0 1
47767: PPUSH
47768: CALL_OW 274
47772: ST_TO_ADDR
// if not pom then
47773: LD_VAR 0 3
47777: NOT
47778: IFFALSE 47782
// exit ;
47780: GO 47952
// btype := GetBType ( building ) ;
47782: LD_ADDR_VAR 0 5
47786: PUSH
47787: LD_VAR 0 1
47791: PPUSH
47792: CALL_OW 266
47796: ST_TO_ADDR
// if btype = b_armoury then
47797: LD_VAR 0 5
47801: PUSH
47802: LD_INT 4
47804: EQUAL
47805: IFFALSE 47815
// btype := b_barracks ;
47807: LD_ADDR_VAR 0 5
47811: PUSH
47812: LD_INT 5
47814: ST_TO_ADDR
// if btype = b_depot then
47815: LD_VAR 0 5
47819: PUSH
47820: LD_INT 0
47822: EQUAL
47823: IFFALSE 47833
// btype := b_warehouse ;
47825: LD_ADDR_VAR 0 5
47829: PUSH
47830: LD_INT 1
47832: ST_TO_ADDR
// if btype = b_workshop then
47833: LD_VAR 0 5
47837: PUSH
47838: LD_INT 2
47840: EQUAL
47841: IFFALSE 47851
// btype := b_factory ;
47843: LD_ADDR_VAR 0 5
47847: PUSH
47848: LD_INT 3
47850: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47851: LD_ADDR_VAR 0 4
47855: PUSH
47856: LD_VAR 0 5
47860: PPUSH
47861: LD_VAR 0 1
47865: PPUSH
47866: CALL_OW 248
47870: PPUSH
47871: CALL_OW 450
47875: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47876: LD_ADDR_VAR 0 2
47880: PUSH
47881: LD_VAR 0 3
47885: PPUSH
47886: LD_INT 1
47888: PPUSH
47889: CALL_OW 275
47893: PUSH
47894: LD_VAR 0 4
47898: PUSH
47899: LD_INT 1
47901: ARRAY
47902: GREATEREQUAL
47903: PUSH
47904: LD_VAR 0 3
47908: PPUSH
47909: LD_INT 2
47911: PPUSH
47912: CALL_OW 275
47916: PUSH
47917: LD_VAR 0 4
47921: PUSH
47922: LD_INT 2
47924: ARRAY
47925: GREATEREQUAL
47926: AND
47927: PUSH
47928: LD_VAR 0 3
47932: PPUSH
47933: LD_INT 3
47935: PPUSH
47936: CALL_OW 275
47940: PUSH
47941: LD_VAR 0 4
47945: PUSH
47946: LD_INT 3
47948: ARRAY
47949: GREATEREQUAL
47950: AND
47951: ST_TO_ADDR
// end ;
47952: LD_VAR 0 2
47956: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47957: LD_INT 0
47959: PPUSH
47960: PPUSH
47961: PPUSH
// pom := GetBase ( building ) ;
47962: LD_ADDR_VAR 0 4
47966: PUSH
47967: LD_VAR 0 1
47971: PPUSH
47972: CALL_OW 274
47976: ST_TO_ADDR
// if not pom then
47977: LD_VAR 0 4
47981: NOT
47982: IFFALSE 47986
// exit ;
47984: GO 48087
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47986: LD_ADDR_VAR 0 5
47990: PUSH
47991: LD_VAR 0 2
47995: PPUSH
47996: LD_VAR 0 1
48000: PPUSH
48001: CALL_OW 248
48005: PPUSH
48006: CALL_OW 450
48010: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48011: LD_ADDR_VAR 0 3
48015: PUSH
48016: LD_VAR 0 4
48020: PPUSH
48021: LD_INT 1
48023: PPUSH
48024: CALL_OW 275
48028: PUSH
48029: LD_VAR 0 5
48033: PUSH
48034: LD_INT 1
48036: ARRAY
48037: GREATEREQUAL
48038: PUSH
48039: LD_VAR 0 4
48043: PPUSH
48044: LD_INT 2
48046: PPUSH
48047: CALL_OW 275
48051: PUSH
48052: LD_VAR 0 5
48056: PUSH
48057: LD_INT 2
48059: ARRAY
48060: GREATEREQUAL
48061: AND
48062: PUSH
48063: LD_VAR 0 4
48067: PPUSH
48068: LD_INT 3
48070: PPUSH
48071: CALL_OW 275
48075: PUSH
48076: LD_VAR 0 5
48080: PUSH
48081: LD_INT 3
48083: ARRAY
48084: GREATEREQUAL
48085: AND
48086: ST_TO_ADDR
// end ;
48087: LD_VAR 0 3
48091: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48092: LD_INT 0
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
// result := false ;
48105: LD_ADDR_VAR 0 8
48109: PUSH
48110: LD_INT 0
48112: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48113: LD_VAR 0 5
48117: NOT
48118: PUSH
48119: LD_VAR 0 1
48123: NOT
48124: OR
48125: PUSH
48126: LD_VAR 0 2
48130: NOT
48131: OR
48132: PUSH
48133: LD_VAR 0 3
48137: NOT
48138: OR
48139: IFFALSE 48143
// exit ;
48141: GO 48957
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48143: LD_ADDR_VAR 0 14
48147: PUSH
48148: LD_VAR 0 1
48152: PPUSH
48153: LD_VAR 0 2
48157: PPUSH
48158: LD_VAR 0 3
48162: PPUSH
48163: LD_VAR 0 4
48167: PPUSH
48168: LD_VAR 0 5
48172: PUSH
48173: LD_INT 1
48175: ARRAY
48176: PPUSH
48177: CALL_OW 248
48181: PPUSH
48182: LD_INT 0
48184: PPUSH
48185: CALL 50194 0 6
48189: ST_TO_ADDR
// if not hexes then
48190: LD_VAR 0 14
48194: NOT
48195: IFFALSE 48199
// exit ;
48197: GO 48957
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48199: LD_ADDR_VAR 0 17
48203: PUSH
48204: LD_VAR 0 5
48208: PPUSH
48209: LD_INT 22
48211: PUSH
48212: LD_VAR 0 13
48216: PPUSH
48217: CALL_OW 255
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 30
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 30
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PPUSH
48258: CALL_OW 72
48262: ST_TO_ADDR
// for i = 1 to hexes do
48263: LD_ADDR_VAR 0 9
48267: PUSH
48268: DOUBLE
48269: LD_INT 1
48271: DEC
48272: ST_TO_ADDR
48273: LD_VAR 0 14
48277: PUSH
48278: FOR_TO
48279: IFFALSE 48955
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48281: LD_ADDR_VAR 0 13
48285: PUSH
48286: LD_VAR 0 14
48290: PUSH
48291: LD_VAR 0 9
48295: ARRAY
48296: PUSH
48297: LD_INT 1
48299: ARRAY
48300: PPUSH
48301: LD_VAR 0 14
48305: PUSH
48306: LD_VAR 0 9
48310: ARRAY
48311: PUSH
48312: LD_INT 2
48314: ARRAY
48315: PPUSH
48316: CALL_OW 428
48320: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48321: LD_VAR 0 14
48325: PUSH
48326: LD_VAR 0 9
48330: ARRAY
48331: PUSH
48332: LD_INT 1
48334: ARRAY
48335: PPUSH
48336: LD_VAR 0 14
48340: PUSH
48341: LD_VAR 0 9
48345: ARRAY
48346: PUSH
48347: LD_INT 2
48349: ARRAY
48350: PPUSH
48351: CALL_OW 351
48355: PUSH
48356: LD_VAR 0 14
48360: PUSH
48361: LD_VAR 0 9
48365: ARRAY
48366: PUSH
48367: LD_INT 1
48369: ARRAY
48370: PPUSH
48371: LD_VAR 0 14
48375: PUSH
48376: LD_VAR 0 9
48380: ARRAY
48381: PUSH
48382: LD_INT 2
48384: ARRAY
48385: PPUSH
48386: CALL_OW 488
48390: NOT
48391: OR
48392: PUSH
48393: LD_VAR 0 13
48397: PPUSH
48398: CALL_OW 247
48402: PUSH
48403: LD_INT 3
48405: EQUAL
48406: OR
48407: IFFALSE 48413
// exit ;
48409: POP
48410: POP
48411: GO 48957
// if not tmp then
48413: LD_VAR 0 13
48417: NOT
48418: IFFALSE 48422
// continue ;
48420: GO 48278
// result := true ;
48422: LD_ADDR_VAR 0 8
48426: PUSH
48427: LD_INT 1
48429: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48430: LD_VAR 0 6
48434: PUSH
48435: LD_VAR 0 13
48439: PPUSH
48440: CALL_OW 247
48444: PUSH
48445: LD_INT 2
48447: EQUAL
48448: AND
48449: PUSH
48450: LD_VAR 0 13
48454: PPUSH
48455: CALL_OW 263
48459: PUSH
48460: LD_INT 1
48462: EQUAL
48463: AND
48464: IFFALSE 48628
// begin if IsDrivenBy ( tmp ) then
48466: LD_VAR 0 13
48470: PPUSH
48471: CALL_OW 311
48475: IFFALSE 48479
// continue ;
48477: GO 48278
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48479: LD_VAR 0 6
48483: PPUSH
48484: LD_INT 3
48486: PUSH
48487: LD_INT 60
48489: PUSH
48490: EMPTY
48491: LIST
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 55
48502: PUSH
48503: EMPTY
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PPUSH
48514: CALL_OW 72
48518: IFFALSE 48626
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48520: LD_ADDR_VAR 0 18
48524: PUSH
48525: LD_VAR 0 6
48529: PPUSH
48530: LD_INT 3
48532: PUSH
48533: LD_INT 60
48535: PUSH
48536: EMPTY
48537: LIST
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 55
48548: PUSH
48549: EMPTY
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PPUSH
48560: CALL_OW 72
48564: PUSH
48565: LD_INT 1
48567: ARRAY
48568: ST_TO_ADDR
// if IsInUnit ( driver ) then
48569: LD_VAR 0 18
48573: PPUSH
48574: CALL_OW 310
48578: IFFALSE 48589
// ComExit ( driver ) ;
48580: LD_VAR 0 18
48584: PPUSH
48585: CALL 73378 0 1
// AddComEnterUnit ( driver , tmp ) ;
48589: LD_VAR 0 18
48593: PPUSH
48594: LD_VAR 0 13
48598: PPUSH
48599: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48603: LD_VAR 0 18
48607: PPUSH
48608: LD_VAR 0 7
48612: PPUSH
48613: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48617: LD_VAR 0 18
48621: PPUSH
48622: CALL_OW 181
// end ; continue ;
48626: GO 48278
// end ; if not cleaners or not tmp in cleaners then
48628: LD_VAR 0 6
48632: NOT
48633: PUSH
48634: LD_VAR 0 13
48638: PUSH
48639: LD_VAR 0 6
48643: IN
48644: NOT
48645: OR
48646: IFFALSE 48953
// begin if dep then
48648: LD_VAR 0 17
48652: IFFALSE 48788
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48654: LD_ADDR_VAR 0 16
48658: PUSH
48659: LD_VAR 0 17
48663: PUSH
48664: LD_INT 1
48666: ARRAY
48667: PPUSH
48668: CALL_OW 250
48672: PPUSH
48673: LD_VAR 0 17
48677: PUSH
48678: LD_INT 1
48680: ARRAY
48681: PPUSH
48682: CALL_OW 254
48686: PPUSH
48687: LD_INT 5
48689: PPUSH
48690: CALL_OW 272
48694: PUSH
48695: LD_VAR 0 17
48699: PUSH
48700: LD_INT 1
48702: ARRAY
48703: PPUSH
48704: CALL_OW 251
48708: PPUSH
48709: LD_VAR 0 17
48713: PUSH
48714: LD_INT 1
48716: ARRAY
48717: PPUSH
48718: CALL_OW 254
48722: PPUSH
48723: LD_INT 5
48725: PPUSH
48726: CALL_OW 273
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48735: LD_VAR 0 16
48739: PUSH
48740: LD_INT 1
48742: ARRAY
48743: PPUSH
48744: LD_VAR 0 16
48748: PUSH
48749: LD_INT 2
48751: ARRAY
48752: PPUSH
48753: CALL_OW 488
48757: IFFALSE 48788
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48759: LD_VAR 0 13
48763: PPUSH
48764: LD_VAR 0 16
48768: PUSH
48769: LD_INT 1
48771: ARRAY
48772: PPUSH
48773: LD_VAR 0 16
48777: PUSH
48778: LD_INT 2
48780: ARRAY
48781: PPUSH
48782: CALL_OW 111
// continue ;
48786: GO 48278
// end ; end ; r := GetDir ( tmp ) ;
48788: LD_ADDR_VAR 0 15
48792: PUSH
48793: LD_VAR 0 13
48797: PPUSH
48798: CALL_OW 254
48802: ST_TO_ADDR
// if r = 5 then
48803: LD_VAR 0 15
48807: PUSH
48808: LD_INT 5
48810: EQUAL
48811: IFFALSE 48821
// r := 0 ;
48813: LD_ADDR_VAR 0 15
48817: PUSH
48818: LD_INT 0
48820: ST_TO_ADDR
// for j = r to 5 do
48821: LD_ADDR_VAR 0 10
48825: PUSH
48826: DOUBLE
48827: LD_VAR 0 15
48831: DEC
48832: ST_TO_ADDR
48833: LD_INT 5
48835: PUSH
48836: FOR_TO
48837: IFFALSE 48951
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48839: LD_ADDR_VAR 0 11
48843: PUSH
48844: LD_VAR 0 13
48848: PPUSH
48849: CALL_OW 250
48853: PPUSH
48854: LD_VAR 0 10
48858: PPUSH
48859: LD_INT 2
48861: PPUSH
48862: CALL_OW 272
48866: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48867: LD_ADDR_VAR 0 12
48871: PUSH
48872: LD_VAR 0 13
48876: PPUSH
48877: CALL_OW 251
48881: PPUSH
48882: LD_VAR 0 10
48886: PPUSH
48887: LD_INT 2
48889: PPUSH
48890: CALL_OW 273
48894: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48895: LD_VAR 0 11
48899: PPUSH
48900: LD_VAR 0 12
48904: PPUSH
48905: CALL_OW 488
48909: PUSH
48910: LD_VAR 0 11
48914: PPUSH
48915: LD_VAR 0 12
48919: PPUSH
48920: CALL_OW 428
48924: NOT
48925: AND
48926: IFFALSE 48949
// begin ComMoveXY ( tmp , _x , _y ) ;
48928: LD_VAR 0 13
48932: PPUSH
48933: LD_VAR 0 11
48937: PPUSH
48938: LD_VAR 0 12
48942: PPUSH
48943: CALL_OW 111
// break ;
48947: GO 48951
// end ; end ;
48949: GO 48836
48951: POP
48952: POP
// end ; end ;
48953: GO 48278
48955: POP
48956: POP
// end ;
48957: LD_VAR 0 8
48961: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48962: LD_INT 0
48964: PPUSH
// result := true ;
48965: LD_ADDR_VAR 0 3
48969: PUSH
48970: LD_INT 1
48972: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48973: LD_VAR 0 2
48977: PUSH
48978: LD_INT 24
48980: DOUBLE
48981: EQUAL
48982: IFTRUE 48992
48984: LD_INT 33
48986: DOUBLE
48987: EQUAL
48988: IFTRUE 48992
48990: GO 49017
48992: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48993: LD_ADDR_VAR 0 3
48997: PUSH
48998: LD_INT 32
49000: PPUSH
49001: LD_VAR 0 1
49005: PPUSH
49006: CALL_OW 321
49010: PUSH
49011: LD_INT 2
49013: EQUAL
49014: ST_TO_ADDR
49015: GO 49337
49017: LD_INT 20
49019: DOUBLE
49020: EQUAL
49021: IFTRUE 49025
49023: GO 49050
49025: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49026: LD_ADDR_VAR 0 3
49030: PUSH
49031: LD_INT 6
49033: PPUSH
49034: LD_VAR 0 1
49038: PPUSH
49039: CALL_OW 321
49043: PUSH
49044: LD_INT 2
49046: EQUAL
49047: ST_TO_ADDR
49048: GO 49337
49050: LD_INT 22
49052: DOUBLE
49053: EQUAL
49054: IFTRUE 49064
49056: LD_INT 36
49058: DOUBLE
49059: EQUAL
49060: IFTRUE 49064
49062: GO 49089
49064: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49065: LD_ADDR_VAR 0 3
49069: PUSH
49070: LD_INT 15
49072: PPUSH
49073: LD_VAR 0 1
49077: PPUSH
49078: CALL_OW 321
49082: PUSH
49083: LD_INT 2
49085: EQUAL
49086: ST_TO_ADDR
49087: GO 49337
49089: LD_INT 30
49091: DOUBLE
49092: EQUAL
49093: IFTRUE 49097
49095: GO 49122
49097: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49098: LD_ADDR_VAR 0 3
49102: PUSH
49103: LD_INT 20
49105: PPUSH
49106: LD_VAR 0 1
49110: PPUSH
49111: CALL_OW 321
49115: PUSH
49116: LD_INT 2
49118: EQUAL
49119: ST_TO_ADDR
49120: GO 49337
49122: LD_INT 28
49124: DOUBLE
49125: EQUAL
49126: IFTRUE 49136
49128: LD_INT 21
49130: DOUBLE
49131: EQUAL
49132: IFTRUE 49136
49134: GO 49161
49136: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49137: LD_ADDR_VAR 0 3
49141: PUSH
49142: LD_INT 21
49144: PPUSH
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 321
49154: PUSH
49155: LD_INT 2
49157: EQUAL
49158: ST_TO_ADDR
49159: GO 49337
49161: LD_INT 16
49163: DOUBLE
49164: EQUAL
49165: IFTRUE 49169
49167: GO 49196
49169: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49170: LD_ADDR_VAR 0 3
49174: PUSH
49175: LD_EXP 133
49179: PPUSH
49180: LD_VAR 0 1
49184: PPUSH
49185: CALL_OW 321
49189: PUSH
49190: LD_INT 2
49192: EQUAL
49193: ST_TO_ADDR
49194: GO 49337
49196: LD_INT 19
49198: DOUBLE
49199: EQUAL
49200: IFTRUE 49210
49202: LD_INT 23
49204: DOUBLE
49205: EQUAL
49206: IFTRUE 49210
49208: GO 49237
49210: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49211: LD_ADDR_VAR 0 3
49215: PUSH
49216: LD_EXP 132
49220: PPUSH
49221: LD_VAR 0 1
49225: PPUSH
49226: CALL_OW 321
49230: PUSH
49231: LD_INT 2
49233: EQUAL
49234: ST_TO_ADDR
49235: GO 49337
49237: LD_INT 17
49239: DOUBLE
49240: EQUAL
49241: IFTRUE 49245
49243: GO 49270
49245: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49246: LD_ADDR_VAR 0 3
49250: PUSH
49251: LD_INT 39
49253: PPUSH
49254: LD_VAR 0 1
49258: PPUSH
49259: CALL_OW 321
49263: PUSH
49264: LD_INT 2
49266: EQUAL
49267: ST_TO_ADDR
49268: GO 49337
49270: LD_INT 18
49272: DOUBLE
49273: EQUAL
49274: IFTRUE 49278
49276: GO 49303
49278: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49279: LD_ADDR_VAR 0 3
49283: PUSH
49284: LD_INT 40
49286: PPUSH
49287: LD_VAR 0 1
49291: PPUSH
49292: CALL_OW 321
49296: PUSH
49297: LD_INT 2
49299: EQUAL
49300: ST_TO_ADDR
49301: GO 49337
49303: LD_INT 27
49305: DOUBLE
49306: EQUAL
49307: IFTRUE 49311
49309: GO 49336
49311: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49312: LD_ADDR_VAR 0 3
49316: PUSH
49317: LD_INT 35
49319: PPUSH
49320: LD_VAR 0 1
49324: PPUSH
49325: CALL_OW 321
49329: PUSH
49330: LD_INT 2
49332: EQUAL
49333: ST_TO_ADDR
49334: GO 49337
49336: POP
// end ;
49337: LD_VAR 0 3
49341: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49342: LD_INT 0
49344: PPUSH
49345: PPUSH
49346: PPUSH
49347: PPUSH
49348: PPUSH
49349: PPUSH
49350: PPUSH
49351: PPUSH
49352: PPUSH
49353: PPUSH
49354: PPUSH
// result := false ;
49355: LD_ADDR_VAR 0 6
49359: PUSH
49360: LD_INT 0
49362: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49363: LD_VAR 0 1
49367: NOT
49368: PUSH
49369: LD_VAR 0 1
49373: PPUSH
49374: CALL_OW 266
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: IN
49389: NOT
49390: OR
49391: PUSH
49392: LD_VAR 0 2
49396: NOT
49397: OR
49398: PUSH
49399: LD_VAR 0 5
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 3
49415: PUSH
49416: LD_INT 4
49418: PUSH
49419: LD_INT 5
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: IN
49430: NOT
49431: OR
49432: PUSH
49433: LD_VAR 0 3
49437: PPUSH
49438: LD_VAR 0 4
49442: PPUSH
49443: CALL_OW 488
49447: NOT
49448: OR
49449: IFFALSE 49453
// exit ;
49451: GO 50189
// side := GetSide ( depot ) ;
49453: LD_ADDR_VAR 0 9
49457: PUSH
49458: LD_VAR 0 1
49462: PPUSH
49463: CALL_OW 255
49467: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49468: LD_VAR 0 9
49472: PPUSH
49473: LD_VAR 0 2
49477: PPUSH
49478: CALL 48962 0 2
49482: NOT
49483: IFFALSE 49487
// exit ;
49485: GO 50189
// pom := GetBase ( depot ) ;
49487: LD_ADDR_VAR 0 10
49491: PUSH
49492: LD_VAR 0 1
49496: PPUSH
49497: CALL_OW 274
49501: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49502: LD_ADDR_VAR 0 11
49506: PUSH
49507: LD_VAR 0 2
49511: PPUSH
49512: LD_VAR 0 1
49516: PPUSH
49517: CALL_OW 248
49521: PPUSH
49522: CALL_OW 450
49526: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49527: LD_VAR 0 10
49531: PPUSH
49532: LD_INT 1
49534: PPUSH
49535: CALL_OW 275
49539: PUSH
49540: LD_VAR 0 11
49544: PUSH
49545: LD_INT 1
49547: ARRAY
49548: GREATEREQUAL
49549: PUSH
49550: LD_VAR 0 10
49554: PPUSH
49555: LD_INT 2
49557: PPUSH
49558: CALL_OW 275
49562: PUSH
49563: LD_VAR 0 11
49567: PUSH
49568: LD_INT 2
49570: ARRAY
49571: GREATEREQUAL
49572: AND
49573: PUSH
49574: LD_VAR 0 10
49578: PPUSH
49579: LD_INT 3
49581: PPUSH
49582: CALL_OW 275
49586: PUSH
49587: LD_VAR 0 11
49591: PUSH
49592: LD_INT 3
49594: ARRAY
49595: GREATEREQUAL
49596: AND
49597: NOT
49598: IFFALSE 49602
// exit ;
49600: GO 50189
// if GetBType ( depot ) = b_depot then
49602: LD_VAR 0 1
49606: PPUSH
49607: CALL_OW 266
49611: PUSH
49612: LD_INT 0
49614: EQUAL
49615: IFFALSE 49627
// dist := 28 else
49617: LD_ADDR_VAR 0 14
49621: PUSH
49622: LD_INT 28
49624: ST_TO_ADDR
49625: GO 49635
// dist := 36 ;
49627: LD_ADDR_VAR 0 14
49631: PUSH
49632: LD_INT 36
49634: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49635: LD_VAR 0 1
49639: PPUSH
49640: LD_VAR 0 3
49644: PPUSH
49645: LD_VAR 0 4
49649: PPUSH
49650: CALL_OW 297
49654: PUSH
49655: LD_VAR 0 14
49659: GREATER
49660: IFFALSE 49664
// exit ;
49662: GO 50189
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49664: LD_ADDR_VAR 0 12
49668: PUSH
49669: LD_VAR 0 2
49673: PPUSH
49674: LD_VAR 0 3
49678: PPUSH
49679: LD_VAR 0 4
49683: PPUSH
49684: LD_VAR 0 5
49688: PPUSH
49689: LD_VAR 0 1
49693: PPUSH
49694: CALL_OW 248
49698: PPUSH
49699: LD_INT 0
49701: PPUSH
49702: CALL 50194 0 6
49706: ST_TO_ADDR
// if not hexes then
49707: LD_VAR 0 12
49711: NOT
49712: IFFALSE 49716
// exit ;
49714: GO 50189
// hex := GetHexInfo ( x , y ) ;
49716: LD_ADDR_VAR 0 15
49720: PUSH
49721: LD_VAR 0 3
49725: PPUSH
49726: LD_VAR 0 4
49730: PPUSH
49731: CALL_OW 546
49735: ST_TO_ADDR
// if hex [ 1 ] then
49736: LD_VAR 0 15
49740: PUSH
49741: LD_INT 1
49743: ARRAY
49744: IFFALSE 49748
// exit ;
49746: GO 50189
// height := hex [ 2 ] ;
49748: LD_ADDR_VAR 0 13
49752: PUSH
49753: LD_VAR 0 15
49757: PUSH
49758: LD_INT 2
49760: ARRAY
49761: ST_TO_ADDR
// for i = 1 to hexes do
49762: LD_ADDR_VAR 0 7
49766: PUSH
49767: DOUBLE
49768: LD_INT 1
49770: DEC
49771: ST_TO_ADDR
49772: LD_VAR 0 12
49776: PUSH
49777: FOR_TO
49778: IFFALSE 50108
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49780: LD_VAR 0 12
49784: PUSH
49785: LD_VAR 0 7
49789: ARRAY
49790: PUSH
49791: LD_INT 1
49793: ARRAY
49794: PPUSH
49795: LD_VAR 0 12
49799: PUSH
49800: LD_VAR 0 7
49804: ARRAY
49805: PUSH
49806: LD_INT 2
49808: ARRAY
49809: PPUSH
49810: CALL_OW 488
49814: NOT
49815: PUSH
49816: LD_VAR 0 12
49820: PUSH
49821: LD_VAR 0 7
49825: ARRAY
49826: PUSH
49827: LD_INT 1
49829: ARRAY
49830: PPUSH
49831: LD_VAR 0 12
49835: PUSH
49836: LD_VAR 0 7
49840: ARRAY
49841: PUSH
49842: LD_INT 2
49844: ARRAY
49845: PPUSH
49846: CALL_OW 428
49850: PUSH
49851: LD_INT 0
49853: GREATER
49854: OR
49855: PUSH
49856: LD_VAR 0 12
49860: PUSH
49861: LD_VAR 0 7
49865: ARRAY
49866: PUSH
49867: LD_INT 1
49869: ARRAY
49870: PPUSH
49871: LD_VAR 0 12
49875: PUSH
49876: LD_VAR 0 7
49880: ARRAY
49881: PUSH
49882: LD_INT 2
49884: ARRAY
49885: PPUSH
49886: CALL_OW 351
49890: OR
49891: IFFALSE 49897
// exit ;
49893: POP
49894: POP
49895: GO 50189
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49897: LD_ADDR_VAR 0 8
49901: PUSH
49902: LD_VAR 0 12
49906: PUSH
49907: LD_VAR 0 7
49911: ARRAY
49912: PUSH
49913: LD_INT 1
49915: ARRAY
49916: PPUSH
49917: LD_VAR 0 12
49921: PUSH
49922: LD_VAR 0 7
49926: ARRAY
49927: PUSH
49928: LD_INT 2
49930: ARRAY
49931: PPUSH
49932: CALL_OW 546
49936: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49937: LD_VAR 0 8
49941: PUSH
49942: LD_INT 1
49944: ARRAY
49945: PUSH
49946: LD_VAR 0 8
49950: PUSH
49951: LD_INT 2
49953: ARRAY
49954: PUSH
49955: LD_VAR 0 13
49959: PUSH
49960: LD_INT 2
49962: PLUS
49963: GREATER
49964: OR
49965: PUSH
49966: LD_VAR 0 8
49970: PUSH
49971: LD_INT 2
49973: ARRAY
49974: PUSH
49975: LD_VAR 0 13
49979: PUSH
49980: LD_INT 2
49982: MINUS
49983: LESS
49984: OR
49985: PUSH
49986: LD_VAR 0 8
49990: PUSH
49991: LD_INT 3
49993: ARRAY
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 8
50000: PUSH
50001: LD_INT 9
50003: PUSH
50004: LD_INT 10
50006: PUSH
50007: LD_INT 11
50009: PUSH
50010: LD_INT 12
50012: PUSH
50013: LD_INT 13
50015: PUSH
50016: LD_INT 16
50018: PUSH
50019: LD_INT 17
50021: PUSH
50022: LD_INT 18
50024: PUSH
50025: LD_INT 19
50027: PUSH
50028: LD_INT 20
50030: PUSH
50031: LD_INT 21
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: IN
50049: NOT
50050: OR
50051: PUSH
50052: LD_VAR 0 8
50056: PUSH
50057: LD_INT 5
50059: ARRAY
50060: NOT
50061: OR
50062: PUSH
50063: LD_VAR 0 8
50067: PUSH
50068: LD_INT 6
50070: ARRAY
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: LD_INT 7
50080: PUSH
50081: LD_INT 9
50083: PUSH
50084: LD_INT 10
50086: PUSH
50087: LD_INT 11
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: IN
50098: NOT
50099: OR
50100: IFFALSE 50106
// exit ;
50102: POP
50103: POP
50104: GO 50189
// end ;
50106: GO 49777
50108: POP
50109: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50110: LD_VAR 0 9
50114: PPUSH
50115: LD_VAR 0 3
50119: PPUSH
50120: LD_VAR 0 4
50124: PPUSH
50125: LD_INT 20
50127: PPUSH
50128: CALL 42135 0 4
50132: PUSH
50133: LD_INT 4
50135: ARRAY
50136: IFFALSE 50140
// exit ;
50138: GO 50189
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50140: LD_VAR 0 2
50144: PUSH
50145: LD_INT 29
50147: PUSH
50148: LD_INT 30
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: IN
50155: PUSH
50156: LD_VAR 0 3
50160: PPUSH
50161: LD_VAR 0 4
50165: PPUSH
50166: LD_VAR 0 9
50170: PPUSH
50171: CALL_OW 440
50175: NOT
50176: AND
50177: IFFALSE 50181
// exit ;
50179: GO 50189
// result := true ;
50181: LD_ADDR_VAR 0 6
50185: PUSH
50186: LD_INT 1
50188: ST_TO_ADDR
// end ;
50189: LD_VAR 0 6
50193: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50194: LD_INT 0
50196: PPUSH
50197: PPUSH
50198: PPUSH
50199: PPUSH
50200: PPUSH
50201: PPUSH
50202: PPUSH
50203: PPUSH
50204: PPUSH
50205: PPUSH
50206: PPUSH
50207: PPUSH
50208: PPUSH
50209: PPUSH
50210: PPUSH
50211: PPUSH
50212: PPUSH
50213: PPUSH
50214: PPUSH
50215: PPUSH
50216: PPUSH
50217: PPUSH
50218: PPUSH
50219: PPUSH
50220: PPUSH
50221: PPUSH
50222: PPUSH
50223: PPUSH
50224: PPUSH
50225: PPUSH
50226: PPUSH
50227: PPUSH
50228: PPUSH
50229: PPUSH
50230: PPUSH
50231: PPUSH
50232: PPUSH
50233: PPUSH
50234: PPUSH
50235: PPUSH
50236: PPUSH
50237: PPUSH
50238: PPUSH
50239: PPUSH
50240: PPUSH
50241: PPUSH
50242: PPUSH
50243: PPUSH
50244: PPUSH
50245: PPUSH
50246: PPUSH
50247: PPUSH
50248: PPUSH
50249: PPUSH
50250: PPUSH
50251: PPUSH
50252: PPUSH
50253: PPUSH
// result = [ ] ;
50254: LD_ADDR_VAR 0 7
50258: PUSH
50259: EMPTY
50260: ST_TO_ADDR
// temp_list = [ ] ;
50261: LD_ADDR_VAR 0 9
50265: PUSH
50266: EMPTY
50267: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50268: LD_VAR 0 4
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: LD_INT 3
50284: PUSH
50285: LD_INT 4
50287: PUSH
50288: LD_INT 5
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: IN
50299: NOT
50300: PUSH
50301: LD_VAR 0 1
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: IN
50316: PUSH
50317: LD_VAR 0 5
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: LIST
50335: IN
50336: NOT
50337: AND
50338: OR
50339: IFFALSE 50343
// exit ;
50341: GO 68734
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50343: LD_VAR 0 1
50347: PUSH
50348: LD_INT 6
50350: PUSH
50351: LD_INT 7
50353: PUSH
50354: LD_INT 8
50356: PUSH
50357: LD_INT 13
50359: PUSH
50360: LD_INT 12
50362: PUSH
50363: LD_INT 15
50365: PUSH
50366: LD_INT 11
50368: PUSH
50369: LD_INT 14
50371: PUSH
50372: LD_INT 10
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: IN
50386: IFFALSE 50396
// btype = b_lab ;
50388: LD_ADDR_VAR 0 1
50392: PUSH
50393: LD_INT 6
50395: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50396: LD_VAR 0 6
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: IN
50415: NOT
50416: PUSH
50417: LD_VAR 0 1
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: LD_INT 6
50436: PUSH
50437: LD_INT 36
50439: PUSH
50440: LD_INT 4
50442: PUSH
50443: LD_INT 5
50445: PUSH
50446: LD_INT 31
50448: PUSH
50449: LD_INT 32
50451: PUSH
50452: LD_INT 33
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: IN
50468: NOT
50469: PUSH
50470: LD_VAR 0 6
50474: PUSH
50475: LD_INT 1
50477: EQUAL
50478: AND
50479: OR
50480: PUSH
50481: LD_VAR 0 1
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 3
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: IN
50496: NOT
50497: PUSH
50498: LD_VAR 0 6
50502: PUSH
50503: LD_INT 2
50505: EQUAL
50506: AND
50507: OR
50508: IFFALSE 50518
// mode = 0 ;
50510: LD_ADDR_VAR 0 6
50514: PUSH
50515: LD_INT 0
50517: ST_TO_ADDR
// case mode of 0 :
50518: LD_VAR 0 6
50522: PUSH
50523: LD_INT 0
50525: DOUBLE
50526: EQUAL
50527: IFTRUE 50531
50529: GO 61984
50531: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50532: LD_ADDR_VAR 0 11
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50725: LD_ADDR_VAR 0 12
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 3
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50921: LD_ADDR_VAR 0 13
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 2
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 3
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: NEG
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51120: LD_ADDR_VAR 0 14
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 3
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51316: LD_ADDR_VAR 0 15
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51509: LD_ADDR_VAR 0 16
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 3
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51702: LD_ADDR_VAR 0 17
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51932: LD_ADDR_VAR 0 18
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52162: LD_ADDR_VAR 0 19
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52392: LD_ADDR_VAR 0 20
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 2
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52622: LD_ADDR_VAR 0 21
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 2
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52852: LD_ADDR_VAR 0 22
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53082: LD_ADDR_VAR 0 23
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: NEG
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 2
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 3
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53362: LD_ADDR_VAR 0 24
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 3
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 3
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53638: LD_ADDR_VAR 0 25
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53912: LD_ADDR_VAR 0 26
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: LD_INT 3
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54188: LD_ADDR_VAR 0 27
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54468: LD_ADDR_VAR 0 28
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: LD_INT 2
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 3
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 3
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 3
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54750: LD_ADDR_VAR 0 29
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 3
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55029: LD_ADDR_VAR 0 30
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55307: LD_ADDR_VAR 0 31
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: NEG
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 3
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 3
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55585: LD_ADDR_VAR 0 32
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 3
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 3
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55863: LD_ADDR_VAR 0 33
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56142: LD_ADDR_VAR 0 34
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 3
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56422: LD_ADDR_VAR 0 35
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56534: LD_ADDR_VAR 0 36
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56646: LD_ADDR_VAR 0 37
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56758: LD_ADDR_VAR 0 38
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56870: LD_ADDR_VAR 0 39
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56982: LD_ADDR_VAR 0 40
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57094: LD_ADDR_VAR 0 41
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 2
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 2
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 3
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: LD_INT 2
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 3
57337: PUSH
57338: LD_INT 3
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: LD_INT 3
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 3
57379: NEG
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57444: LD_ADDR_VAR 0 42
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 3
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: NEG
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57794: LD_ADDR_VAR 0 43
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 2
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 2
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 3
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58142: LD_ADDR_VAR 0 44
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: LD_INT 3
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: PUSH
58396: LD_INT 3
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 3
58427: NEG
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: NEG
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58492: LD_ADDR_VAR 0 45
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: LD_INT 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: LD_INT 3
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: LD_INT 2
58720: NEG
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 3
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58842: LD_ADDR_VAR 0 46
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 3
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 3
59138: NEG
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: NEG
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59190: LD_ADDR_VAR 0 47
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: NEG
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59341: LD_ADDR_VAR 0 48
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 1
59410: NEG
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 2
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59488: LD_ADDR_VAR 0 49
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 1
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: LD_INT 2
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59632: LD_ADDR_VAR 0 50
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 2
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59776: LD_ADDR_VAR 0 51
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59923: LD_ADDR_VAR 0 52
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: NEG
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60074: LD_ADDR_VAR 0 53
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60304: LD_ADDR_VAR 0 54
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60534: LD_ADDR_VAR 0 55
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60764: LD_ADDR_VAR 0 56
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 2
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60994: LD_ADDR_VAR 0 57
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 2
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61224: LD_ADDR_VAR 0 58
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 1
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 2
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61454: LD_ADDR_VAR 0 59
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61542: LD_ADDR_VAR 0 60
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61630: LD_ADDR_VAR 0 61
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61718: LD_ADDR_VAR 0 62
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61806: LD_ADDR_VAR 0 63
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61894: LD_ADDR_VAR 0 64
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 1
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: NEG
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// end ; 1 :
61982: GO 67879
61984: LD_INT 1
61986: DOUBLE
61987: EQUAL
61988: IFTRUE 61992
61990: GO 64615
61992: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61993: LD_ADDR_VAR 0 11
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 3
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62037: LD_ADDR_VAR 0 12
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62078: LD_ADDR_VAR 0 13
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: LD_INT 2
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 3
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: PUSH
62106: LD_INT 3
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62118: LD_ADDR_VAR 0 14
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 3
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62159: LD_ADDR_VAR 0 15
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 3
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: LIST
62202: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62203: LD_ADDR_VAR 0 16
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: LD_INT 3
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: LD_INT 2
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 3
62234: NEG
62235: PUSH
62236: LD_INT 3
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62249: LD_ADDR_VAR 0 17
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: LD_INT 3
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: LD_INT 3
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 2
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62293: LD_ADDR_VAR 0 18
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 3
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62334: LD_ADDR_VAR 0 19
62338: PUSH
62339: LD_INT 3
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: PUSH
62352: LD_INT 3
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62374: LD_ADDR_VAR 0 20
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: LIST
62414: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62415: LD_ADDR_VAR 0 21
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 3
62433: NEG
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 3
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62459: LD_ADDR_VAR 0 22
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: NEG
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 3
62490: NEG
62491: PUSH
62492: LD_INT 3
62494: NEG
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62505: LD_ADDR_VAR 0 23
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: LD_INT 4
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: LD_INT 3
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: LIST
62548: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62549: LD_ADDR_VAR 0 24
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 3
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 4
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: LIST
62589: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62590: LD_ADDR_VAR 0 25
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 4
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: LD_INT 4
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62630: LD_ADDR_VAR 0 26
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: LD_INT 3
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: LD_INT 4
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: LD_INT 3
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: LIST
62670: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62671: LD_ADDR_VAR 0 27
62675: PUSH
62676: LD_INT 3
62678: NEG
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 3
62689: NEG
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 4
62700: NEG
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62715: LD_ADDR_VAR 0 28
62719: PUSH
62720: LD_INT 3
62722: NEG
62723: PUSH
62724: LD_INT 3
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 3
62734: NEG
62735: PUSH
62736: LD_INT 4
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 4
62746: NEG
62747: PUSH
62748: LD_INT 3
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: LIST
62760: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62761: LD_ADDR_VAR 0 29
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: LD_INT 3
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: LD_INT 4
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: LD_INT 4
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: LD_INT 3
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: LD_INT 5
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 5
62851: NEG
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: LD_INT 4
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: LD_INT 6
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 6
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: LD_INT 5
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62916: LD_ADDR_VAR 0 30
62920: PUSH
62921: LD_INT 2
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 3
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 3
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 4
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 4
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 4
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 5
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 5
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 5
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 6
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 6
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63059: LD_ADDR_VAR 0 31
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: LD_INT 2
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 3
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 4
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 4
63106: PUSH
63107: LD_INT 4
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 3
63116: PUSH
63117: LD_INT 4
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 5
63126: PUSH
63127: LD_INT 4
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 5
63136: PUSH
63137: LD_INT 5
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 4
63146: PUSH
63147: LD_INT 5
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 6
63156: PUSH
63157: LD_INT 5
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 6
63166: PUSH
63167: LD_INT 6
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 5
63176: PUSH
63177: LD_INT 6
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63198: LD_ADDR_VAR 0 32
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: LD_INT 3
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: LD_INT 4
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: LD_INT 4
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: NEG
63257: PUSH
63258: LD_INT 3
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: LD_INT 5
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: LD_INT 5
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: NEG
63288: PUSH
63289: LD_INT 4
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: PUSH
63299: LD_INT 6
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 6
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: LD_INT 5
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63341: LD_ADDR_VAR 0 33
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 3
63359: NEG
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: NEG
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 3
63382: NEG
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 4
63393: NEG
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 4
63404: NEG
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 4
63416: NEG
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 5
63427: NEG
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 5
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 5
63450: NEG
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 6
63461: NEG
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 6
63472: NEG
63473: PUSH
63474: LD_INT 1
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63496: LD_ADDR_VAR 0 34
63500: PUSH
63501: LD_INT 2
63503: NEG
63504: PUSH
63505: LD_INT 3
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 3
63515: NEG
63516: PUSH
63517: LD_INT 2
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 3
63527: NEG
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 3
63539: NEG
63540: PUSH
63541: LD_INT 4
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 4
63551: NEG
63552: PUSH
63553: LD_INT 3
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 4
63563: NEG
63564: PUSH
63565: LD_INT 4
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 4
63575: NEG
63576: PUSH
63577: LD_INT 5
63579: NEG
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 5
63587: NEG
63588: PUSH
63589: LD_INT 4
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 5
63599: NEG
63600: PUSH
63601: LD_INT 5
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 5
63611: NEG
63612: PUSH
63613: LD_INT 6
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 6
63623: NEG
63624: PUSH
63625: LD_INT 5
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 6
63635: NEG
63636: PUSH
63637: LD_INT 6
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63659: LD_ADDR_VAR 0 41
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: NEG
63678: PUSH
63679: LD_INT 3
63681: NEG
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63703: LD_ADDR_VAR 0 42
63707: PUSH
63708: LD_INT 2
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 3
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63744: LD_ADDR_VAR 0 43
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 3
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 3
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: LIST
63783: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63784: LD_ADDR_VAR 0 44
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: LD_INT 3
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63825: LD_ADDR_VAR 0 45
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: LIST
63868: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63869: LD_ADDR_VAR 0 46
63873: PUSH
63874: LD_INT 2
63876: NEG
63877: PUSH
63878: LD_INT 2
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: LD_INT 3
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 3
63900: NEG
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63915: LD_ADDR_VAR 0 47
63919: PUSH
63920: LD_INT 2
63922: NEG
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63948: LD_ADDR_VAR 0 48
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63979: LD_ADDR_VAR 0 49
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 3
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64008: LD_ADDR_VAR 0 50
64012: PUSH
64013: LD_INT 2
64015: PUSH
64016: LD_INT 3
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64037: LD_ADDR_VAR 0 51
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 2
64055: NEG
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64068: LD_ADDR_VAR 0 52
64072: PUSH
64073: LD_INT 3
64075: NEG
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 3
64087: NEG
64088: PUSH
64089: LD_INT 2
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64101: LD_ADDR_VAR 0 53
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 3
64123: NEG
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64145: LD_ADDR_VAR 0 54
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 3
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64186: LD_ADDR_VAR 0 55
64190: PUSH
64191: LD_INT 3
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 3
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64226: LD_ADDR_VAR 0 56
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: LD_INT 3
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: LD_INT 3
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: LIST
64266: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64267: LD_ADDR_VAR 0 57
64271: PUSH
64272: LD_INT 2
64274: NEG
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 3
64285: NEG
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: LIST
64310: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64311: LD_ADDR_VAR 0 58
64315: PUSH
64316: LD_INT 2
64318: NEG
64319: PUSH
64320: LD_INT 3
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 3
64330: NEG
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 3
64342: NEG
64343: PUSH
64344: LD_INT 3
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64357: LD_ADDR_VAR 0 59
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 2
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: LD_INT 2
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64401: LD_ADDR_VAR 0 60
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 2
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64442: LD_ADDR_VAR 0 61
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: LIST
64481: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64482: LD_ADDR_VAR 0 62
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: LD_INT 2
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64523: LD_ADDR_VAR 0 63
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 2
64541: NEG
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 2
64552: NEG
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64567: LD_ADDR_VAR 0 64
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 2
64586: NEG
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: NEG
64599: PUSH
64600: LD_INT 2
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: ST_TO_ADDR
// end ; 2 :
64613: GO 67879
64615: LD_INT 2
64617: DOUBLE
64618: EQUAL
64619: IFTRUE 64623
64621: GO 67878
64623: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64624: LD_ADDR_VAR 0 29
64628: PUSH
64629: LD_INT 4
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 4
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 5
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 5
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 4
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 3
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 3
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 3
64703: PUSH
64704: LD_INT 2
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 5
64714: PUSH
64715: LD_INT 2
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: LD_INT 3
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: PUSH
64735: LD_INT 2
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 4
64744: PUSH
64745: LD_INT 3
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 4
64754: PUSH
64755: LD_INT 4
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 3
64764: PUSH
64765: LD_INT 4
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 2
64774: PUSH
64775: LD_INT 3
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 2
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 4
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 2
64804: PUSH
64805: LD_INT 4
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 0
64814: PUSH
64815: LD_INT 4
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 3
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: LD_INT 4
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: LD_INT 5
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 5
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 4
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 2
64886: PUSH
64887: LD_INT 5
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 2
64896: NEG
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 3
64907: NEG
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 3
64918: NEG
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: NEG
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 3
64952: NEG
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 4
64963: NEG
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 4
64974: NEG
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 4
64986: NEG
64987: PUSH
64988: LD_INT 2
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 2
64998: NEG
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 4
65009: NEG
65010: PUSH
65011: LD_INT 4
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 4
65021: NEG
65022: PUSH
65023: LD_INT 5
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 3
65033: NEG
65034: PUSH
65035: LD_INT 4
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 3
65045: NEG
65046: PUSH
65047: LD_INT 3
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: NEG
65058: PUSH
65059: LD_INT 3
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 5
65069: NEG
65070: PUSH
65071: LD_INT 4
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 5
65081: NEG
65082: PUSH
65083: LD_INT 5
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: NEG
65094: PUSH
65095: LD_INT 5
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 5
65105: NEG
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65162: LD_ADDR_VAR 0 30
65166: PUSH
65167: LD_INT 4
65169: PUSH
65170: LD_INT 4
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 4
65179: PUSH
65180: LD_INT 3
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 5
65189: PUSH
65190: LD_INT 4
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 5
65199: PUSH
65200: LD_INT 5
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 4
65209: PUSH
65210: LD_INT 5
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 3
65219: PUSH
65220: LD_INT 4
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: LD_INT 3
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 5
65239: PUSH
65240: LD_INT 3
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 3
65249: PUSH
65250: LD_INT 5
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 0
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: LD_INT 3
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: LD_INT 4
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: LD_INT 4
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 2
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: LD_INT 4
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 4
65352: NEG
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 4
65363: NEG
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 3
65375: NEG
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 3
65386: NEG
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 4
65397: NEG
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 5
65408: NEG
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 5
65419: NEG
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 5
65431: NEG
65432: PUSH
65433: LD_INT 2
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 3
65443: NEG
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: LD_INT 3
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 3
65466: NEG
65467: PUSH
65468: LD_INT 4
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 2
65478: NEG
65479: PUSH
65480: LD_INT 3
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: LD_INT 2
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 3
65502: NEG
65503: PUSH
65504: LD_INT 2
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 4
65514: NEG
65515: PUSH
65516: LD_INT 3
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 4
65526: NEG
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 2
65538: NEG
65539: PUSH
65540: LD_INT 4
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 4
65550: NEG
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 4
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 5
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 4
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: LD_INT 3
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: LD_INT 3
65609: NEG
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: LD_INT 4
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: LD_INT 5
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 2
65641: PUSH
65642: LD_INT 3
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 2
65652: NEG
65653: PUSH
65654: LD_INT 5
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65709: LD_ADDR_VAR 0 31
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 4
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: LD_INT 4
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: PUSH
65747: LD_INT 5
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: LD_INT 5
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 1
65766: NEG
65767: PUSH
65768: LD_INT 4
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: PUSH
65789: LD_INT 5
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 2
65798: NEG
65799: PUSH
65800: LD_INT 3
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 3
65809: NEG
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 3
65820: NEG
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 2
65832: NEG
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 3
65854: NEG
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 4
65865: NEG
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 4
65876: NEG
65877: PUSH
65878: LD_INT 1
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 4
65888: NEG
65889: PUSH
65890: LD_INT 2
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 4
65911: NEG
65912: PUSH
65913: LD_INT 4
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 4
65923: NEG
65924: PUSH
65925: LD_INT 5
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: LD_INT 4
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 3
65947: NEG
65948: PUSH
65949: LD_INT 3
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 4
65959: NEG
65960: PUSH
65961: LD_INT 3
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 5
65971: NEG
65972: PUSH
65973: LD_INT 4
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 5
65983: NEG
65984: PUSH
65985: LD_INT 5
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: NEG
65996: PUSH
65997: LD_INT 5
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 5
66007: NEG
66008: PUSH
66009: LD_INT 3
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: LD_INT 3
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: LD_INT 4
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: LD_INT 3
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: PUSH
66053: LD_INT 2
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 2
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: LD_INT 3
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: LD_INT 4
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 2
66098: PUSH
66099: LD_INT 2
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: LD_INT 4
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 4
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 4
66131: PUSH
66132: LD_INT 1
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 5
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 5
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 4
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 3
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 3
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 5
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66259: LD_ADDR_VAR 0 32
66263: PUSH
66264: LD_INT 4
66266: NEG
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 4
66277: NEG
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 3
66289: NEG
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 4
66311: NEG
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 5
66322: NEG
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 5
66333: NEG
66334: PUSH
66335: LD_INT 1
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 5
66345: NEG
66346: PUSH
66347: LD_INT 2
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 3
66357: NEG
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 3
66368: NEG
66369: PUSH
66370: LD_INT 3
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 3
66380: NEG
66381: PUSH
66382: LD_INT 4
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: LD_INT 3
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: LD_INT 2
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: LD_INT 2
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 4
66428: NEG
66429: PUSH
66430: LD_INT 3
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 4
66440: NEG
66441: PUSH
66442: LD_INT 4
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 2
66452: NEG
66453: PUSH
66454: LD_INT 4
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 4
66464: NEG
66465: PUSH
66466: LD_INT 2
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 4
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: LD_INT 5
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: LD_INT 4
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: LD_INT 3
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: LD_INT 3
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: LD_INT 4
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: LD_INT 5
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 2
66555: PUSH
66556: LD_INT 3
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 2
66566: NEG
66567: PUSH
66568: LD_INT 5
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 3
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 3
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 4
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 4
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 2
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 4
66661: PUSH
66662: LD_INT 2
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 4
66671: PUSH
66672: LD_INT 4
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 4
66681: PUSH
66682: LD_INT 3
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 5
66691: PUSH
66692: LD_INT 4
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 5
66701: PUSH
66702: LD_INT 5
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 4
66711: PUSH
66712: LD_INT 5
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: LD_INT 4
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 3
66731: PUSH
66732: LD_INT 3
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 5
66741: PUSH
66742: LD_INT 3
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: LD_INT 5
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66806: LD_ADDR_VAR 0 33
66810: PUSH
66811: LD_INT 4
66813: NEG
66814: PUSH
66815: LD_INT 4
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 4
66825: NEG
66826: PUSH
66827: LD_INT 5
66829: NEG
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 3
66837: NEG
66838: PUSH
66839: LD_INT 4
66841: NEG
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 4
66861: NEG
66862: PUSH
66863: LD_INT 3
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 5
66873: NEG
66874: PUSH
66875: LD_INT 4
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 5
66885: NEG
66886: PUSH
66887: LD_INT 5
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 3
66897: NEG
66898: PUSH
66899: LD_INT 5
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 5
66909: NEG
66910: PUSH
66911: LD_INT 3
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: LD_INT 3
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 0
66932: PUSH
66933: LD_INT 4
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: LD_INT 3
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 2
66957: NEG
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 0
66965: PUSH
66966: LD_INT 2
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: LD_INT 3
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 4
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: NEG
67012: PUSH
67013: LD_INT 4
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 4
67023: PUSH
67024: LD_INT 0
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 4
67033: PUSH
67034: LD_INT 1
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 5
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 5
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 4
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 3
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 3
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 3
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 5
67106: PUSH
67107: LD_INT 2
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 3
67116: PUSH
67117: LD_INT 3
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: LD_INT 2
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 4
67136: PUSH
67137: LD_INT 3
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 4
67146: PUSH
67147: LD_INT 4
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 3
67156: PUSH
67157: LD_INT 4
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: LD_INT 2
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: LD_INT 2
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 2
67196: PUSH
67197: LD_INT 4
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 0
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 3
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: LD_INT 4
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: LD_INT 5
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: LD_INT 5
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: LD_INT 4
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: LD_INT 3
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 2
67278: PUSH
67279: LD_INT 5
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 2
67288: NEG
67289: PUSH
67290: LD_INT 3
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67344: LD_ADDR_VAR 0 34
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 4
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 5
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: PUSH
67374: LD_INT 4
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 3
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 1
67406: NEG
67407: PUSH
67408: LD_INT 4
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: LD_INT 5
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 2
67430: PUSH
67431: LD_INT 3
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: LD_INT 5
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 3
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 3
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 4
67474: PUSH
67475: LD_INT 0
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 4
67484: PUSH
67485: LD_INT 1
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: LD_INT 1
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: LD_INT 1
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: LD_INT 2
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 4
67536: PUSH
67537: LD_INT 2
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 4
67546: PUSH
67547: LD_INT 4
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 4
67556: PUSH
67557: LD_INT 3
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 5
67566: PUSH
67567: LD_INT 4
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 5
67576: PUSH
67577: LD_INT 5
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 4
67586: PUSH
67587: LD_INT 5
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 3
67596: PUSH
67597: LD_INT 4
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 3
67606: PUSH
67607: LD_INT 3
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 5
67616: PUSH
67617: LD_INT 3
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 3
67626: PUSH
67627: LD_INT 5
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 0
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 3
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: PUSH
67667: LD_INT 4
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: LD_INT 4
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: LD_INT 3
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: NEG
67698: PUSH
67699: LD_INT 2
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: LD_INT 4
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: LD_INT 2
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 4
67729: NEG
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 4
67740: NEG
67741: PUSH
67742: LD_INT 1
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 3
67752: NEG
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 3
67763: NEG
67764: PUSH
67765: LD_INT 1
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 4
67774: NEG
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 5
67785: NEG
67786: PUSH
67787: LD_INT 0
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 5
67796: NEG
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 5
67808: NEG
67809: PUSH
67810: LD_INT 2
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 3
67820: NEG
67821: PUSH
67822: LD_INT 2
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: ST_TO_ADDR
// end ; end ;
67876: GO 67879
67878: POP
// case btype of b_depot , b_warehouse :
67879: LD_VAR 0 1
67883: PUSH
67884: LD_INT 0
67886: DOUBLE
67887: EQUAL
67888: IFTRUE 67898
67890: LD_INT 1
67892: DOUBLE
67893: EQUAL
67894: IFTRUE 67898
67896: GO 68099
67898: POP
// case nation of nation_american :
67899: LD_VAR 0 5
67903: PUSH
67904: LD_INT 1
67906: DOUBLE
67907: EQUAL
67908: IFTRUE 67912
67910: GO 67968
67912: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67913: LD_ADDR_VAR 0 9
67917: PUSH
67918: LD_VAR 0 11
67922: PUSH
67923: LD_VAR 0 12
67927: PUSH
67928: LD_VAR 0 13
67932: PUSH
67933: LD_VAR 0 14
67937: PUSH
67938: LD_VAR 0 15
67942: PUSH
67943: LD_VAR 0 16
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: PUSH
67956: LD_VAR 0 4
67960: PUSH
67961: LD_INT 1
67963: PLUS
67964: ARRAY
67965: ST_TO_ADDR
67966: GO 68097
67968: LD_INT 2
67970: DOUBLE
67971: EQUAL
67972: IFTRUE 67976
67974: GO 68032
67976: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67977: LD_ADDR_VAR 0 9
67981: PUSH
67982: LD_VAR 0 17
67986: PUSH
67987: LD_VAR 0 18
67991: PUSH
67992: LD_VAR 0 19
67996: PUSH
67997: LD_VAR 0 20
68001: PUSH
68002: LD_VAR 0 21
68006: PUSH
68007: LD_VAR 0 22
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: PUSH
68020: LD_VAR 0 4
68024: PUSH
68025: LD_INT 1
68027: PLUS
68028: ARRAY
68029: ST_TO_ADDR
68030: GO 68097
68032: LD_INT 3
68034: DOUBLE
68035: EQUAL
68036: IFTRUE 68040
68038: GO 68096
68040: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68041: LD_ADDR_VAR 0 9
68045: PUSH
68046: LD_VAR 0 23
68050: PUSH
68051: LD_VAR 0 24
68055: PUSH
68056: LD_VAR 0 25
68060: PUSH
68061: LD_VAR 0 26
68065: PUSH
68066: LD_VAR 0 27
68070: PUSH
68071: LD_VAR 0 28
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: PUSH
68084: LD_VAR 0 4
68088: PUSH
68089: LD_INT 1
68091: PLUS
68092: ARRAY
68093: ST_TO_ADDR
68094: GO 68097
68096: POP
68097: GO 68652
68099: LD_INT 2
68101: DOUBLE
68102: EQUAL
68103: IFTRUE 68113
68105: LD_INT 3
68107: DOUBLE
68108: EQUAL
68109: IFTRUE 68113
68111: GO 68169
68113: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68114: LD_ADDR_VAR 0 9
68118: PUSH
68119: LD_VAR 0 29
68123: PUSH
68124: LD_VAR 0 30
68128: PUSH
68129: LD_VAR 0 31
68133: PUSH
68134: LD_VAR 0 32
68138: PUSH
68139: LD_VAR 0 33
68143: PUSH
68144: LD_VAR 0 34
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: PUSH
68157: LD_VAR 0 4
68161: PUSH
68162: LD_INT 1
68164: PLUS
68165: ARRAY
68166: ST_TO_ADDR
68167: GO 68652
68169: LD_INT 16
68171: DOUBLE
68172: EQUAL
68173: IFTRUE 68231
68175: LD_INT 17
68177: DOUBLE
68178: EQUAL
68179: IFTRUE 68231
68181: LD_INT 18
68183: DOUBLE
68184: EQUAL
68185: IFTRUE 68231
68187: LD_INT 19
68189: DOUBLE
68190: EQUAL
68191: IFTRUE 68231
68193: LD_INT 22
68195: DOUBLE
68196: EQUAL
68197: IFTRUE 68231
68199: LD_INT 20
68201: DOUBLE
68202: EQUAL
68203: IFTRUE 68231
68205: LD_INT 21
68207: DOUBLE
68208: EQUAL
68209: IFTRUE 68231
68211: LD_INT 23
68213: DOUBLE
68214: EQUAL
68215: IFTRUE 68231
68217: LD_INT 24
68219: DOUBLE
68220: EQUAL
68221: IFTRUE 68231
68223: LD_INT 25
68225: DOUBLE
68226: EQUAL
68227: IFTRUE 68231
68229: GO 68287
68231: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68232: LD_ADDR_VAR 0 9
68236: PUSH
68237: LD_VAR 0 35
68241: PUSH
68242: LD_VAR 0 36
68246: PUSH
68247: LD_VAR 0 37
68251: PUSH
68252: LD_VAR 0 38
68256: PUSH
68257: LD_VAR 0 39
68261: PUSH
68262: LD_VAR 0 40
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: PUSH
68275: LD_VAR 0 4
68279: PUSH
68280: LD_INT 1
68282: PLUS
68283: ARRAY
68284: ST_TO_ADDR
68285: GO 68652
68287: LD_INT 6
68289: DOUBLE
68290: EQUAL
68291: IFTRUE 68343
68293: LD_INT 7
68295: DOUBLE
68296: EQUAL
68297: IFTRUE 68343
68299: LD_INT 8
68301: DOUBLE
68302: EQUAL
68303: IFTRUE 68343
68305: LD_INT 13
68307: DOUBLE
68308: EQUAL
68309: IFTRUE 68343
68311: LD_INT 12
68313: DOUBLE
68314: EQUAL
68315: IFTRUE 68343
68317: LD_INT 15
68319: DOUBLE
68320: EQUAL
68321: IFTRUE 68343
68323: LD_INT 11
68325: DOUBLE
68326: EQUAL
68327: IFTRUE 68343
68329: LD_INT 14
68331: DOUBLE
68332: EQUAL
68333: IFTRUE 68343
68335: LD_INT 10
68337: DOUBLE
68338: EQUAL
68339: IFTRUE 68343
68341: GO 68399
68343: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68344: LD_ADDR_VAR 0 9
68348: PUSH
68349: LD_VAR 0 41
68353: PUSH
68354: LD_VAR 0 42
68358: PUSH
68359: LD_VAR 0 43
68363: PUSH
68364: LD_VAR 0 44
68368: PUSH
68369: LD_VAR 0 45
68373: PUSH
68374: LD_VAR 0 46
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: PUSH
68387: LD_VAR 0 4
68391: PUSH
68392: LD_INT 1
68394: PLUS
68395: ARRAY
68396: ST_TO_ADDR
68397: GO 68652
68399: LD_INT 36
68401: DOUBLE
68402: EQUAL
68403: IFTRUE 68407
68405: GO 68463
68407: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68408: LD_ADDR_VAR 0 9
68412: PUSH
68413: LD_VAR 0 47
68417: PUSH
68418: LD_VAR 0 48
68422: PUSH
68423: LD_VAR 0 49
68427: PUSH
68428: LD_VAR 0 50
68432: PUSH
68433: LD_VAR 0 51
68437: PUSH
68438: LD_VAR 0 52
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: PUSH
68451: LD_VAR 0 4
68455: PUSH
68456: LD_INT 1
68458: PLUS
68459: ARRAY
68460: ST_TO_ADDR
68461: GO 68652
68463: LD_INT 4
68465: DOUBLE
68466: EQUAL
68467: IFTRUE 68489
68469: LD_INT 5
68471: DOUBLE
68472: EQUAL
68473: IFTRUE 68489
68475: LD_INT 34
68477: DOUBLE
68478: EQUAL
68479: IFTRUE 68489
68481: LD_INT 37
68483: DOUBLE
68484: EQUAL
68485: IFTRUE 68489
68487: GO 68545
68489: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68490: LD_ADDR_VAR 0 9
68494: PUSH
68495: LD_VAR 0 53
68499: PUSH
68500: LD_VAR 0 54
68504: PUSH
68505: LD_VAR 0 55
68509: PUSH
68510: LD_VAR 0 56
68514: PUSH
68515: LD_VAR 0 57
68519: PUSH
68520: LD_VAR 0 58
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: PUSH
68533: LD_VAR 0 4
68537: PUSH
68538: LD_INT 1
68540: PLUS
68541: ARRAY
68542: ST_TO_ADDR
68543: GO 68652
68545: LD_INT 31
68547: DOUBLE
68548: EQUAL
68549: IFTRUE 68595
68551: LD_INT 32
68553: DOUBLE
68554: EQUAL
68555: IFTRUE 68595
68557: LD_INT 33
68559: DOUBLE
68560: EQUAL
68561: IFTRUE 68595
68563: LD_INT 27
68565: DOUBLE
68566: EQUAL
68567: IFTRUE 68595
68569: LD_INT 26
68571: DOUBLE
68572: EQUAL
68573: IFTRUE 68595
68575: LD_INT 28
68577: DOUBLE
68578: EQUAL
68579: IFTRUE 68595
68581: LD_INT 29
68583: DOUBLE
68584: EQUAL
68585: IFTRUE 68595
68587: LD_INT 30
68589: DOUBLE
68590: EQUAL
68591: IFTRUE 68595
68593: GO 68651
68595: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68596: LD_ADDR_VAR 0 9
68600: PUSH
68601: LD_VAR 0 59
68605: PUSH
68606: LD_VAR 0 60
68610: PUSH
68611: LD_VAR 0 61
68615: PUSH
68616: LD_VAR 0 62
68620: PUSH
68621: LD_VAR 0 63
68625: PUSH
68626: LD_VAR 0 64
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: PUSH
68639: LD_VAR 0 4
68643: PUSH
68644: LD_INT 1
68646: PLUS
68647: ARRAY
68648: ST_TO_ADDR
68649: GO 68652
68651: POP
// temp_list2 = [ ] ;
68652: LD_ADDR_VAR 0 10
68656: PUSH
68657: EMPTY
68658: ST_TO_ADDR
// for i in temp_list do
68659: LD_ADDR_VAR 0 8
68663: PUSH
68664: LD_VAR 0 9
68668: PUSH
68669: FOR_IN
68670: IFFALSE 68722
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68672: LD_ADDR_VAR 0 10
68676: PUSH
68677: LD_VAR 0 10
68681: PUSH
68682: LD_VAR 0 8
68686: PUSH
68687: LD_INT 1
68689: ARRAY
68690: PUSH
68691: LD_VAR 0 2
68695: PLUS
68696: PUSH
68697: LD_VAR 0 8
68701: PUSH
68702: LD_INT 2
68704: ARRAY
68705: PUSH
68706: LD_VAR 0 3
68710: PLUS
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: EMPTY
68717: LIST
68718: ADD
68719: ST_TO_ADDR
68720: GO 68669
68722: POP
68723: POP
// result = temp_list2 ;
68724: LD_ADDR_VAR 0 7
68728: PUSH
68729: LD_VAR 0 10
68733: ST_TO_ADDR
// end ;
68734: LD_VAR 0 7
68738: RET
// export function EnemyInRange ( unit , dist ) ; begin
68739: LD_INT 0
68741: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68742: LD_ADDR_VAR 0 3
68746: PUSH
68747: LD_VAR 0 1
68751: PPUSH
68752: CALL_OW 255
68756: PPUSH
68757: LD_VAR 0 1
68761: PPUSH
68762: CALL_OW 250
68766: PPUSH
68767: LD_VAR 0 1
68771: PPUSH
68772: CALL_OW 251
68776: PPUSH
68777: LD_VAR 0 2
68781: PPUSH
68782: CALL 42135 0 4
68786: PUSH
68787: LD_INT 4
68789: ARRAY
68790: ST_TO_ADDR
// end ;
68791: LD_VAR 0 3
68795: RET
// export function PlayerSeeMe ( unit ) ; begin
68796: LD_INT 0
68798: PPUSH
// result := See ( your_side , unit ) ;
68799: LD_ADDR_VAR 0 2
68803: PUSH
68804: LD_OWVAR 2
68808: PPUSH
68809: LD_VAR 0 1
68813: PPUSH
68814: CALL_OW 292
68818: ST_TO_ADDR
// end ;
68819: LD_VAR 0 2
68823: RET
// export function ReverseDir ( unit ) ; begin
68824: LD_INT 0
68826: PPUSH
// if not unit then
68827: LD_VAR 0 1
68831: NOT
68832: IFFALSE 68836
// exit ;
68834: GO 68859
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68836: LD_ADDR_VAR 0 2
68840: PUSH
68841: LD_VAR 0 1
68845: PPUSH
68846: CALL_OW 254
68850: PUSH
68851: LD_INT 3
68853: PLUS
68854: PUSH
68855: LD_INT 6
68857: MOD
68858: ST_TO_ADDR
// end ;
68859: LD_VAR 0 2
68863: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68864: LD_INT 0
68866: PPUSH
68867: PPUSH
68868: PPUSH
68869: PPUSH
68870: PPUSH
// if not hexes then
68871: LD_VAR 0 2
68875: NOT
68876: IFFALSE 68880
// exit ;
68878: GO 69028
// dist := 9999 ;
68880: LD_ADDR_VAR 0 5
68884: PUSH
68885: LD_INT 9999
68887: ST_TO_ADDR
// for i = 1 to hexes do
68888: LD_ADDR_VAR 0 4
68892: PUSH
68893: DOUBLE
68894: LD_INT 1
68896: DEC
68897: ST_TO_ADDR
68898: LD_VAR 0 2
68902: PUSH
68903: FOR_TO
68904: IFFALSE 69016
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68906: LD_VAR 0 1
68910: PPUSH
68911: LD_VAR 0 2
68915: PUSH
68916: LD_VAR 0 4
68920: ARRAY
68921: PUSH
68922: LD_INT 1
68924: ARRAY
68925: PPUSH
68926: LD_VAR 0 2
68930: PUSH
68931: LD_VAR 0 4
68935: ARRAY
68936: PUSH
68937: LD_INT 2
68939: ARRAY
68940: PPUSH
68941: CALL_OW 297
68945: PUSH
68946: LD_VAR 0 5
68950: LESS
68951: IFFALSE 69014
// begin hex := hexes [ i ] ;
68953: LD_ADDR_VAR 0 7
68957: PUSH
68958: LD_VAR 0 2
68962: PUSH
68963: LD_VAR 0 4
68967: ARRAY
68968: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68969: LD_ADDR_VAR 0 5
68973: PUSH
68974: LD_VAR 0 1
68978: PPUSH
68979: LD_VAR 0 2
68983: PUSH
68984: LD_VAR 0 4
68988: ARRAY
68989: PUSH
68990: LD_INT 1
68992: ARRAY
68993: PPUSH
68994: LD_VAR 0 2
68998: PUSH
68999: LD_VAR 0 4
69003: ARRAY
69004: PUSH
69005: LD_INT 2
69007: ARRAY
69008: PPUSH
69009: CALL_OW 297
69013: ST_TO_ADDR
// end ; end ;
69014: GO 68903
69016: POP
69017: POP
// result := hex ;
69018: LD_ADDR_VAR 0 3
69022: PUSH
69023: LD_VAR 0 7
69027: ST_TO_ADDR
// end ;
69028: LD_VAR 0 3
69032: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69033: LD_INT 0
69035: PPUSH
69036: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69037: LD_VAR 0 1
69041: NOT
69042: PUSH
69043: LD_VAR 0 1
69047: PUSH
69048: LD_INT 21
69050: PUSH
69051: LD_INT 2
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 23
69060: PUSH
69061: LD_INT 2
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PPUSH
69072: CALL_OW 69
69076: IN
69077: NOT
69078: OR
69079: IFFALSE 69083
// exit ;
69081: GO 69130
// for i = 1 to 3 do
69083: LD_ADDR_VAR 0 3
69087: PUSH
69088: DOUBLE
69089: LD_INT 1
69091: DEC
69092: ST_TO_ADDR
69093: LD_INT 3
69095: PUSH
69096: FOR_TO
69097: IFFALSE 69128
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69099: LD_VAR 0 1
69103: PPUSH
69104: CALL_OW 250
69108: PPUSH
69109: LD_VAR 0 1
69113: PPUSH
69114: CALL_OW 251
69118: PPUSH
69119: LD_INT 1
69121: PPUSH
69122: CALL_OW 453
69126: GO 69096
69128: POP
69129: POP
// end ;
69130: LD_VAR 0 2
69134: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69135: LD_INT 0
69137: PPUSH
69138: PPUSH
69139: PPUSH
69140: PPUSH
69141: PPUSH
69142: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69143: LD_VAR 0 1
69147: NOT
69148: PUSH
69149: LD_VAR 0 2
69153: NOT
69154: OR
69155: PUSH
69156: LD_VAR 0 1
69160: PPUSH
69161: CALL_OW 314
69165: OR
69166: IFFALSE 69170
// exit ;
69168: GO 69611
// x := GetX ( enemy_unit ) ;
69170: LD_ADDR_VAR 0 7
69174: PUSH
69175: LD_VAR 0 2
69179: PPUSH
69180: CALL_OW 250
69184: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69185: LD_ADDR_VAR 0 8
69189: PUSH
69190: LD_VAR 0 2
69194: PPUSH
69195: CALL_OW 251
69199: ST_TO_ADDR
// if not x or not y then
69200: LD_VAR 0 7
69204: NOT
69205: PUSH
69206: LD_VAR 0 8
69210: NOT
69211: OR
69212: IFFALSE 69216
// exit ;
69214: GO 69611
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69216: LD_ADDR_VAR 0 6
69220: PUSH
69221: LD_VAR 0 7
69225: PPUSH
69226: LD_INT 0
69228: PPUSH
69229: LD_INT 4
69231: PPUSH
69232: CALL_OW 272
69236: PUSH
69237: LD_VAR 0 8
69241: PPUSH
69242: LD_INT 0
69244: PPUSH
69245: LD_INT 4
69247: PPUSH
69248: CALL_OW 273
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_VAR 0 7
69261: PPUSH
69262: LD_INT 1
69264: PPUSH
69265: LD_INT 4
69267: PPUSH
69268: CALL_OW 272
69272: PUSH
69273: LD_VAR 0 8
69277: PPUSH
69278: LD_INT 1
69280: PPUSH
69281: LD_INT 4
69283: PPUSH
69284: CALL_OW 273
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_VAR 0 7
69297: PPUSH
69298: LD_INT 2
69300: PPUSH
69301: LD_INT 4
69303: PPUSH
69304: CALL_OW 272
69308: PUSH
69309: LD_VAR 0 8
69313: PPUSH
69314: LD_INT 2
69316: PPUSH
69317: LD_INT 4
69319: PPUSH
69320: CALL_OW 273
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_VAR 0 7
69333: PPUSH
69334: LD_INT 3
69336: PPUSH
69337: LD_INT 4
69339: PPUSH
69340: CALL_OW 272
69344: PUSH
69345: LD_VAR 0 8
69349: PPUSH
69350: LD_INT 3
69352: PPUSH
69353: LD_INT 4
69355: PPUSH
69356: CALL_OW 273
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_VAR 0 7
69369: PPUSH
69370: LD_INT 4
69372: PPUSH
69373: LD_INT 4
69375: PPUSH
69376: CALL_OW 272
69380: PUSH
69381: LD_VAR 0 8
69385: PPUSH
69386: LD_INT 4
69388: PPUSH
69389: LD_INT 4
69391: PPUSH
69392: CALL_OW 273
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_VAR 0 7
69405: PPUSH
69406: LD_INT 5
69408: PPUSH
69409: LD_INT 4
69411: PPUSH
69412: CALL_OW 272
69416: PUSH
69417: LD_VAR 0 8
69421: PPUSH
69422: LD_INT 5
69424: PPUSH
69425: LD_INT 4
69427: PPUSH
69428: CALL_OW 273
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: ST_TO_ADDR
// for i = tmp downto 1 do
69445: LD_ADDR_VAR 0 4
69449: PUSH
69450: DOUBLE
69451: LD_VAR 0 6
69455: INC
69456: ST_TO_ADDR
69457: LD_INT 1
69459: PUSH
69460: FOR_DOWNTO
69461: IFFALSE 69562
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69463: LD_VAR 0 6
69467: PUSH
69468: LD_VAR 0 4
69472: ARRAY
69473: PUSH
69474: LD_INT 1
69476: ARRAY
69477: PPUSH
69478: LD_VAR 0 6
69482: PUSH
69483: LD_VAR 0 4
69487: ARRAY
69488: PUSH
69489: LD_INT 2
69491: ARRAY
69492: PPUSH
69493: CALL_OW 488
69497: NOT
69498: PUSH
69499: LD_VAR 0 6
69503: PUSH
69504: LD_VAR 0 4
69508: ARRAY
69509: PUSH
69510: LD_INT 1
69512: ARRAY
69513: PPUSH
69514: LD_VAR 0 6
69518: PUSH
69519: LD_VAR 0 4
69523: ARRAY
69524: PUSH
69525: LD_INT 2
69527: ARRAY
69528: PPUSH
69529: CALL_OW 428
69533: PUSH
69534: LD_INT 0
69536: NONEQUAL
69537: OR
69538: IFFALSE 69560
// tmp := Delete ( tmp , i ) ;
69540: LD_ADDR_VAR 0 6
69544: PUSH
69545: LD_VAR 0 6
69549: PPUSH
69550: LD_VAR 0 4
69554: PPUSH
69555: CALL_OW 3
69559: ST_TO_ADDR
69560: GO 69460
69562: POP
69563: POP
// j := GetClosestHex ( unit , tmp ) ;
69564: LD_ADDR_VAR 0 5
69568: PUSH
69569: LD_VAR 0 1
69573: PPUSH
69574: LD_VAR 0 6
69578: PPUSH
69579: CALL 68864 0 2
69583: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69584: LD_VAR 0 1
69588: PPUSH
69589: LD_VAR 0 5
69593: PUSH
69594: LD_INT 1
69596: ARRAY
69597: PPUSH
69598: LD_VAR 0 5
69602: PUSH
69603: LD_INT 2
69605: ARRAY
69606: PPUSH
69607: CALL_OW 111
// end ;
69611: LD_VAR 0 3
69615: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69616: LD_INT 0
69618: PPUSH
69619: PPUSH
69620: PPUSH
// uc_side = 0 ;
69621: LD_ADDR_OWVAR 20
69625: PUSH
69626: LD_INT 0
69628: ST_TO_ADDR
// uc_nation = 0 ;
69629: LD_ADDR_OWVAR 21
69633: PUSH
69634: LD_INT 0
69636: ST_TO_ADDR
// InitHc_All ( ) ;
69637: CALL_OW 584
// InitVc ;
69641: CALL_OW 20
// if mastodonts then
69645: LD_VAR 0 6
69649: IFFALSE 69716
// for i = 1 to mastodonts do
69651: LD_ADDR_VAR 0 11
69655: PUSH
69656: DOUBLE
69657: LD_INT 1
69659: DEC
69660: ST_TO_ADDR
69661: LD_VAR 0 6
69665: PUSH
69666: FOR_TO
69667: IFFALSE 69714
// begin vc_chassis := 31 ;
69669: LD_ADDR_OWVAR 37
69673: PUSH
69674: LD_INT 31
69676: ST_TO_ADDR
// vc_control := control_rider ;
69677: LD_ADDR_OWVAR 38
69681: PUSH
69682: LD_INT 4
69684: ST_TO_ADDR
// animal := CreateVehicle ;
69685: LD_ADDR_VAR 0 12
69689: PUSH
69690: CALL_OW 45
69694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69695: LD_VAR 0 12
69699: PPUSH
69700: LD_VAR 0 8
69704: PPUSH
69705: LD_INT 0
69707: PPUSH
69708: CALL 71904 0 3
// end ;
69712: GO 69666
69714: POP
69715: POP
// if horses then
69716: LD_VAR 0 5
69720: IFFALSE 69787
// for i = 1 to horses do
69722: LD_ADDR_VAR 0 11
69726: PUSH
69727: DOUBLE
69728: LD_INT 1
69730: DEC
69731: ST_TO_ADDR
69732: LD_VAR 0 5
69736: PUSH
69737: FOR_TO
69738: IFFALSE 69785
// begin hc_class := 21 ;
69740: LD_ADDR_OWVAR 28
69744: PUSH
69745: LD_INT 21
69747: ST_TO_ADDR
// hc_gallery :=  ;
69748: LD_ADDR_OWVAR 33
69752: PUSH
69753: LD_STRING 
69755: ST_TO_ADDR
// animal := CreateHuman ;
69756: LD_ADDR_VAR 0 12
69760: PUSH
69761: CALL_OW 44
69765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69766: LD_VAR 0 12
69770: PPUSH
69771: LD_VAR 0 8
69775: PPUSH
69776: LD_INT 0
69778: PPUSH
69779: CALL 71904 0 3
// end ;
69783: GO 69737
69785: POP
69786: POP
// if birds then
69787: LD_VAR 0 1
69791: IFFALSE 69858
// for i = 1 to birds do
69793: LD_ADDR_VAR 0 11
69797: PUSH
69798: DOUBLE
69799: LD_INT 1
69801: DEC
69802: ST_TO_ADDR
69803: LD_VAR 0 1
69807: PUSH
69808: FOR_TO
69809: IFFALSE 69856
// begin hc_class = 18 ;
69811: LD_ADDR_OWVAR 28
69815: PUSH
69816: LD_INT 18
69818: ST_TO_ADDR
// hc_gallery =  ;
69819: LD_ADDR_OWVAR 33
69823: PUSH
69824: LD_STRING 
69826: ST_TO_ADDR
// animal := CreateHuman ;
69827: LD_ADDR_VAR 0 12
69831: PUSH
69832: CALL_OW 44
69836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69837: LD_VAR 0 12
69841: PPUSH
69842: LD_VAR 0 8
69846: PPUSH
69847: LD_INT 0
69849: PPUSH
69850: CALL 71904 0 3
// end ;
69854: GO 69808
69856: POP
69857: POP
// if tigers then
69858: LD_VAR 0 2
69862: IFFALSE 69946
// for i = 1 to tigers do
69864: LD_ADDR_VAR 0 11
69868: PUSH
69869: DOUBLE
69870: LD_INT 1
69872: DEC
69873: ST_TO_ADDR
69874: LD_VAR 0 2
69878: PUSH
69879: FOR_TO
69880: IFFALSE 69944
// begin hc_class = class_tiger ;
69882: LD_ADDR_OWVAR 28
69886: PUSH
69887: LD_INT 14
69889: ST_TO_ADDR
// hc_gallery =  ;
69890: LD_ADDR_OWVAR 33
69894: PUSH
69895: LD_STRING 
69897: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69898: LD_ADDR_OWVAR 35
69902: PUSH
69903: LD_INT 7
69905: NEG
69906: PPUSH
69907: LD_INT 7
69909: PPUSH
69910: CALL_OW 12
69914: ST_TO_ADDR
// animal := CreateHuman ;
69915: LD_ADDR_VAR 0 12
69919: PUSH
69920: CALL_OW 44
69924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69925: LD_VAR 0 12
69929: PPUSH
69930: LD_VAR 0 8
69934: PPUSH
69935: LD_INT 0
69937: PPUSH
69938: CALL 71904 0 3
// end ;
69942: GO 69879
69944: POP
69945: POP
// if apemans then
69946: LD_VAR 0 3
69950: IFFALSE 70073
// for i = 1 to apemans do
69952: LD_ADDR_VAR 0 11
69956: PUSH
69957: DOUBLE
69958: LD_INT 1
69960: DEC
69961: ST_TO_ADDR
69962: LD_VAR 0 3
69966: PUSH
69967: FOR_TO
69968: IFFALSE 70071
// begin hc_class = class_apeman ;
69970: LD_ADDR_OWVAR 28
69974: PUSH
69975: LD_INT 12
69977: ST_TO_ADDR
// hc_gallery =  ;
69978: LD_ADDR_OWVAR 33
69982: PUSH
69983: LD_STRING 
69985: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69986: LD_ADDR_OWVAR 35
69990: PUSH
69991: LD_INT 2
69993: NEG
69994: PPUSH
69995: LD_INT 2
69997: PPUSH
69998: CALL_OW 12
70002: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70003: LD_ADDR_OWVAR 31
70007: PUSH
70008: LD_INT 1
70010: PPUSH
70011: LD_INT 3
70013: PPUSH
70014: CALL_OW 12
70018: PUSH
70019: LD_INT 1
70021: PPUSH
70022: LD_INT 3
70024: PPUSH
70025: CALL_OW 12
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: LD_INT 0
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: ST_TO_ADDR
// animal := CreateHuman ;
70042: LD_ADDR_VAR 0 12
70046: PUSH
70047: CALL_OW 44
70051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70052: LD_VAR 0 12
70056: PPUSH
70057: LD_VAR 0 8
70061: PPUSH
70062: LD_INT 0
70064: PPUSH
70065: CALL 71904 0 3
// end ;
70069: GO 69967
70071: POP
70072: POP
// if enchidnas then
70073: LD_VAR 0 4
70077: IFFALSE 70144
// for i = 1 to enchidnas do
70079: LD_ADDR_VAR 0 11
70083: PUSH
70084: DOUBLE
70085: LD_INT 1
70087: DEC
70088: ST_TO_ADDR
70089: LD_VAR 0 4
70093: PUSH
70094: FOR_TO
70095: IFFALSE 70142
// begin hc_class = 13 ;
70097: LD_ADDR_OWVAR 28
70101: PUSH
70102: LD_INT 13
70104: ST_TO_ADDR
// hc_gallery =  ;
70105: LD_ADDR_OWVAR 33
70109: PUSH
70110: LD_STRING 
70112: ST_TO_ADDR
// animal := CreateHuman ;
70113: LD_ADDR_VAR 0 12
70117: PUSH
70118: CALL_OW 44
70122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70123: LD_VAR 0 12
70127: PPUSH
70128: LD_VAR 0 8
70132: PPUSH
70133: LD_INT 0
70135: PPUSH
70136: CALL 71904 0 3
// end ;
70140: GO 70094
70142: POP
70143: POP
// if fishes then
70144: LD_VAR 0 7
70148: IFFALSE 70215
// for i = 1 to fishes do
70150: LD_ADDR_VAR 0 11
70154: PUSH
70155: DOUBLE
70156: LD_INT 1
70158: DEC
70159: ST_TO_ADDR
70160: LD_VAR 0 7
70164: PUSH
70165: FOR_TO
70166: IFFALSE 70213
// begin hc_class = 20 ;
70168: LD_ADDR_OWVAR 28
70172: PUSH
70173: LD_INT 20
70175: ST_TO_ADDR
// hc_gallery =  ;
70176: LD_ADDR_OWVAR 33
70180: PUSH
70181: LD_STRING 
70183: ST_TO_ADDR
// animal := CreateHuman ;
70184: LD_ADDR_VAR 0 12
70188: PUSH
70189: CALL_OW 44
70193: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70194: LD_VAR 0 12
70198: PPUSH
70199: LD_VAR 0 9
70203: PPUSH
70204: LD_INT 0
70206: PPUSH
70207: CALL 71904 0 3
// end ;
70211: GO 70165
70213: POP
70214: POP
// end ;
70215: LD_VAR 0 10
70219: RET
// export function WantHeal ( sci , unit ) ; begin
70220: LD_INT 0
70222: PPUSH
// if GetTaskList ( sci ) > 0 then
70223: LD_VAR 0 1
70227: PPUSH
70228: CALL_OW 437
70232: PUSH
70233: LD_INT 0
70235: GREATER
70236: IFFALSE 70306
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70238: LD_VAR 0 1
70242: PPUSH
70243: CALL_OW 437
70247: PUSH
70248: LD_INT 1
70250: ARRAY
70251: PUSH
70252: LD_INT 1
70254: ARRAY
70255: PUSH
70256: LD_STRING l
70258: EQUAL
70259: PUSH
70260: LD_VAR 0 1
70264: PPUSH
70265: CALL_OW 437
70269: PUSH
70270: LD_INT 1
70272: ARRAY
70273: PUSH
70274: LD_INT 4
70276: ARRAY
70277: PUSH
70278: LD_VAR 0 2
70282: EQUAL
70283: AND
70284: IFFALSE 70296
// result := true else
70286: LD_ADDR_VAR 0 3
70290: PUSH
70291: LD_INT 1
70293: ST_TO_ADDR
70294: GO 70304
// result := false ;
70296: LD_ADDR_VAR 0 3
70300: PUSH
70301: LD_INT 0
70303: ST_TO_ADDR
// end else
70304: GO 70314
// result := false ;
70306: LD_ADDR_VAR 0 3
70310: PUSH
70311: LD_INT 0
70313: ST_TO_ADDR
// end ;
70314: LD_VAR 0 3
70318: RET
// export function HealTarget ( sci ) ; begin
70319: LD_INT 0
70321: PPUSH
// if not sci then
70322: LD_VAR 0 1
70326: NOT
70327: IFFALSE 70331
// exit ;
70329: GO 70396
// result := 0 ;
70331: LD_ADDR_VAR 0 2
70335: PUSH
70336: LD_INT 0
70338: ST_TO_ADDR
// if GetTaskList ( sci ) then
70339: LD_VAR 0 1
70343: PPUSH
70344: CALL_OW 437
70348: IFFALSE 70396
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70350: LD_VAR 0 1
70354: PPUSH
70355: CALL_OW 437
70359: PUSH
70360: LD_INT 1
70362: ARRAY
70363: PUSH
70364: LD_INT 1
70366: ARRAY
70367: PUSH
70368: LD_STRING l
70370: EQUAL
70371: IFFALSE 70396
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70373: LD_ADDR_VAR 0 2
70377: PUSH
70378: LD_VAR 0 1
70382: PPUSH
70383: CALL_OW 437
70387: PUSH
70388: LD_INT 1
70390: ARRAY
70391: PUSH
70392: LD_INT 4
70394: ARRAY
70395: ST_TO_ADDR
// end ;
70396: LD_VAR 0 2
70400: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70401: LD_INT 0
70403: PPUSH
70404: PPUSH
70405: PPUSH
70406: PPUSH
// if not base_units then
70407: LD_VAR 0 1
70411: NOT
70412: IFFALSE 70416
// exit ;
70414: GO 70503
// result := false ;
70416: LD_ADDR_VAR 0 2
70420: PUSH
70421: LD_INT 0
70423: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70424: LD_ADDR_VAR 0 5
70428: PUSH
70429: LD_VAR 0 1
70433: PPUSH
70434: LD_INT 21
70436: PUSH
70437: LD_INT 3
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PPUSH
70444: CALL_OW 72
70448: ST_TO_ADDR
// if not tmp then
70449: LD_VAR 0 5
70453: NOT
70454: IFFALSE 70458
// exit ;
70456: GO 70503
// for i in tmp do
70458: LD_ADDR_VAR 0 3
70462: PUSH
70463: LD_VAR 0 5
70467: PUSH
70468: FOR_IN
70469: IFFALSE 70501
// begin result := EnemyInRange ( i , 22 ) ;
70471: LD_ADDR_VAR 0 2
70475: PUSH
70476: LD_VAR 0 3
70480: PPUSH
70481: LD_INT 22
70483: PPUSH
70484: CALL 68739 0 2
70488: ST_TO_ADDR
// if result then
70489: LD_VAR 0 2
70493: IFFALSE 70499
// exit ;
70495: POP
70496: POP
70497: GO 70503
// end ;
70499: GO 70468
70501: POP
70502: POP
// end ;
70503: LD_VAR 0 2
70507: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70508: LD_INT 0
70510: PPUSH
70511: PPUSH
// if not units then
70512: LD_VAR 0 1
70516: NOT
70517: IFFALSE 70521
// exit ;
70519: GO 70591
// result := [ ] ;
70521: LD_ADDR_VAR 0 3
70525: PUSH
70526: EMPTY
70527: ST_TO_ADDR
// for i in units do
70528: LD_ADDR_VAR 0 4
70532: PUSH
70533: LD_VAR 0 1
70537: PUSH
70538: FOR_IN
70539: IFFALSE 70589
// if GetTag ( i ) = tag then
70541: LD_VAR 0 4
70545: PPUSH
70546: CALL_OW 110
70550: PUSH
70551: LD_VAR 0 2
70555: EQUAL
70556: IFFALSE 70587
// result := Replace ( result , result + 1 , i ) ;
70558: LD_ADDR_VAR 0 3
70562: PUSH
70563: LD_VAR 0 3
70567: PPUSH
70568: LD_VAR 0 3
70572: PUSH
70573: LD_INT 1
70575: PLUS
70576: PPUSH
70577: LD_VAR 0 4
70581: PPUSH
70582: CALL_OW 1
70586: ST_TO_ADDR
70587: GO 70538
70589: POP
70590: POP
// end ;
70591: LD_VAR 0 3
70595: RET
// export function IsDriver ( un ) ; begin
70596: LD_INT 0
70598: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70599: LD_ADDR_VAR 0 2
70603: PUSH
70604: LD_VAR 0 1
70608: PUSH
70609: LD_INT 55
70611: PUSH
70612: EMPTY
70613: LIST
70614: PPUSH
70615: CALL_OW 69
70619: IN
70620: ST_TO_ADDR
// end ;
70621: LD_VAR 0 2
70625: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70626: LD_INT 0
70628: PPUSH
70629: PPUSH
// list := [ ] ;
70630: LD_ADDR_VAR 0 5
70634: PUSH
70635: EMPTY
70636: ST_TO_ADDR
// case d of 0 :
70637: LD_VAR 0 3
70641: PUSH
70642: LD_INT 0
70644: DOUBLE
70645: EQUAL
70646: IFTRUE 70650
70648: GO 70783
70650: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70651: LD_ADDR_VAR 0 5
70655: PUSH
70656: LD_VAR 0 1
70660: PUSH
70661: LD_INT 4
70663: MINUS
70664: PUSH
70665: LD_VAR 0 2
70669: PUSH
70670: LD_INT 4
70672: MINUS
70673: PUSH
70674: LD_INT 2
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: LIST
70681: PUSH
70682: LD_VAR 0 1
70686: PUSH
70687: LD_INT 3
70689: MINUS
70690: PUSH
70691: LD_VAR 0 2
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: PUSH
70704: LD_VAR 0 1
70708: PUSH
70709: LD_INT 4
70711: PLUS
70712: PUSH
70713: LD_VAR 0 2
70717: PUSH
70718: LD_INT 4
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: PUSH
70726: LD_VAR 0 1
70730: PUSH
70731: LD_INT 3
70733: PLUS
70734: PUSH
70735: LD_VAR 0 2
70739: PUSH
70740: LD_INT 3
70742: PLUS
70743: PUSH
70744: LD_INT 5
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: LIST
70751: PUSH
70752: LD_VAR 0 1
70756: PUSH
70757: LD_VAR 0 2
70761: PUSH
70762: LD_INT 4
70764: PLUS
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: LIST
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: ST_TO_ADDR
// end ; 1 :
70781: GO 71481
70783: LD_INT 1
70785: DOUBLE
70786: EQUAL
70787: IFTRUE 70791
70789: GO 70924
70791: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70792: LD_ADDR_VAR 0 5
70796: PUSH
70797: LD_VAR 0 1
70801: PUSH
70802: LD_VAR 0 2
70806: PUSH
70807: LD_INT 4
70809: MINUS
70810: PUSH
70811: LD_INT 3
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: LIST
70818: PUSH
70819: LD_VAR 0 1
70823: PUSH
70824: LD_INT 3
70826: MINUS
70827: PUSH
70828: LD_VAR 0 2
70832: PUSH
70833: LD_INT 3
70835: MINUS
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: LIST
70844: PUSH
70845: LD_VAR 0 1
70849: PUSH
70850: LD_INT 4
70852: MINUS
70853: PUSH
70854: LD_VAR 0 2
70858: PUSH
70859: LD_INT 1
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: LIST
70866: PUSH
70867: LD_VAR 0 1
70871: PUSH
70872: LD_VAR 0 2
70876: PUSH
70877: LD_INT 3
70879: PLUS
70880: PUSH
70881: LD_INT 0
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: LIST
70888: PUSH
70889: LD_VAR 0 1
70893: PUSH
70894: LD_INT 4
70896: PLUS
70897: PUSH
70898: LD_VAR 0 2
70902: PUSH
70903: LD_INT 4
70905: PLUS
70906: PUSH
70907: LD_INT 5
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: LIST
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: ST_TO_ADDR
// end ; 2 :
70922: GO 71481
70924: LD_INT 2
70926: DOUBLE
70927: EQUAL
70928: IFTRUE 70932
70930: GO 71061
70932: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70933: LD_ADDR_VAR 0 5
70937: PUSH
70938: LD_VAR 0 1
70942: PUSH
70943: LD_VAR 0 2
70947: PUSH
70948: LD_INT 3
70950: MINUS
70951: PUSH
70952: LD_INT 3
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: LIST
70959: PUSH
70960: LD_VAR 0 1
70964: PUSH
70965: LD_INT 4
70967: PLUS
70968: PUSH
70969: LD_VAR 0 2
70973: PUSH
70974: LD_INT 4
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: LIST
70981: PUSH
70982: LD_VAR 0 1
70986: PUSH
70987: LD_VAR 0 2
70991: PUSH
70992: LD_INT 4
70994: PLUS
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: PUSH
71004: LD_VAR 0 1
71008: PUSH
71009: LD_INT 3
71011: MINUS
71012: PUSH
71013: LD_VAR 0 2
71017: PUSH
71018: LD_INT 1
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: LIST
71025: PUSH
71026: LD_VAR 0 1
71030: PUSH
71031: LD_INT 4
71033: MINUS
71034: PUSH
71035: LD_VAR 0 2
71039: PUSH
71040: LD_INT 4
71042: MINUS
71043: PUSH
71044: LD_INT 2
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: LIST
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: ST_TO_ADDR
// end ; 3 :
71059: GO 71481
71061: LD_INT 3
71063: DOUBLE
71064: EQUAL
71065: IFTRUE 71069
71067: GO 71202
71069: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71070: LD_ADDR_VAR 0 5
71074: PUSH
71075: LD_VAR 0 1
71079: PUSH
71080: LD_INT 3
71082: PLUS
71083: PUSH
71084: LD_VAR 0 2
71088: PUSH
71089: LD_INT 4
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: LIST
71096: PUSH
71097: LD_VAR 0 1
71101: PUSH
71102: LD_INT 4
71104: PLUS
71105: PUSH
71106: LD_VAR 0 2
71110: PUSH
71111: LD_INT 4
71113: PLUS
71114: PUSH
71115: LD_INT 5
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: LIST
71122: PUSH
71123: LD_VAR 0 1
71127: PUSH
71128: LD_INT 4
71130: MINUS
71131: PUSH
71132: LD_VAR 0 2
71136: PUSH
71137: LD_INT 1
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: PUSH
71145: LD_VAR 0 1
71149: PUSH
71150: LD_VAR 0 2
71154: PUSH
71155: LD_INT 4
71157: MINUS
71158: PUSH
71159: LD_INT 3
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: LIST
71166: PUSH
71167: LD_VAR 0 1
71171: PUSH
71172: LD_INT 3
71174: MINUS
71175: PUSH
71176: LD_VAR 0 2
71180: PUSH
71181: LD_INT 3
71183: MINUS
71184: PUSH
71185: LD_INT 2
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: LIST
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: ST_TO_ADDR
// end ; 4 :
71200: GO 71481
71202: LD_INT 4
71204: DOUBLE
71205: EQUAL
71206: IFTRUE 71210
71208: GO 71343
71210: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71211: LD_ADDR_VAR 0 5
71215: PUSH
71216: LD_VAR 0 1
71220: PUSH
71221: LD_VAR 0 2
71225: PUSH
71226: LD_INT 4
71228: PLUS
71229: PUSH
71230: LD_INT 0
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: LIST
71237: PUSH
71238: LD_VAR 0 1
71242: PUSH
71243: LD_INT 3
71245: PLUS
71246: PUSH
71247: LD_VAR 0 2
71251: PUSH
71252: LD_INT 3
71254: PLUS
71255: PUSH
71256: LD_INT 5
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: LIST
71263: PUSH
71264: LD_VAR 0 1
71268: PUSH
71269: LD_INT 4
71271: PLUS
71272: PUSH
71273: LD_VAR 0 2
71277: PUSH
71278: LD_INT 4
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: PUSH
71286: LD_VAR 0 1
71290: PUSH
71291: LD_VAR 0 2
71295: PUSH
71296: LD_INT 3
71298: MINUS
71299: PUSH
71300: LD_INT 3
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: LIST
71307: PUSH
71308: LD_VAR 0 1
71312: PUSH
71313: LD_INT 4
71315: MINUS
71316: PUSH
71317: LD_VAR 0 2
71321: PUSH
71322: LD_INT 4
71324: MINUS
71325: PUSH
71326: LD_INT 2
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: LIST
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: ST_TO_ADDR
// end ; 5 :
71341: GO 71481
71343: LD_INT 5
71345: DOUBLE
71346: EQUAL
71347: IFTRUE 71351
71349: GO 71480
71351: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71352: LD_ADDR_VAR 0 5
71356: PUSH
71357: LD_VAR 0 1
71361: PUSH
71362: LD_INT 4
71364: MINUS
71365: PUSH
71366: LD_VAR 0 2
71370: PUSH
71371: LD_INT 1
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: LIST
71378: PUSH
71379: LD_VAR 0 1
71383: PUSH
71384: LD_VAR 0 2
71388: PUSH
71389: LD_INT 4
71391: MINUS
71392: PUSH
71393: LD_INT 3
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: LIST
71400: PUSH
71401: LD_VAR 0 1
71405: PUSH
71406: LD_INT 4
71408: PLUS
71409: PUSH
71410: LD_VAR 0 2
71414: PUSH
71415: LD_INT 4
71417: PLUS
71418: PUSH
71419: LD_INT 5
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: LIST
71426: PUSH
71427: LD_VAR 0 1
71431: PUSH
71432: LD_INT 3
71434: PLUS
71435: PUSH
71436: LD_VAR 0 2
71440: PUSH
71441: LD_INT 4
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: LIST
71448: PUSH
71449: LD_VAR 0 1
71453: PUSH
71454: LD_VAR 0 2
71458: PUSH
71459: LD_INT 3
71461: PLUS
71462: PUSH
71463: LD_INT 0
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: LIST
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: ST_TO_ADDR
// end ; end ;
71478: GO 71481
71480: POP
// result := list ;
71481: LD_ADDR_VAR 0 4
71485: PUSH
71486: LD_VAR 0 5
71490: ST_TO_ADDR
// end ;
71491: LD_VAR 0 4
71495: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71496: LD_INT 0
71498: PPUSH
71499: PPUSH
71500: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71501: LD_VAR 0 1
71505: NOT
71506: PUSH
71507: LD_VAR 0 2
71511: PUSH
71512: LD_INT 1
71514: PUSH
71515: LD_INT 2
71517: PUSH
71518: LD_INT 3
71520: PUSH
71521: LD_INT 4
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: IN
71530: NOT
71531: OR
71532: IFFALSE 71536
// exit ;
71534: GO 71628
// tmp := [ ] ;
71536: LD_ADDR_VAR 0 5
71540: PUSH
71541: EMPTY
71542: ST_TO_ADDR
// for i in units do
71543: LD_ADDR_VAR 0 4
71547: PUSH
71548: LD_VAR 0 1
71552: PUSH
71553: FOR_IN
71554: IFFALSE 71597
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71556: LD_ADDR_VAR 0 5
71560: PUSH
71561: LD_VAR 0 5
71565: PPUSH
71566: LD_VAR 0 5
71570: PUSH
71571: LD_INT 1
71573: PLUS
71574: PPUSH
71575: LD_VAR 0 4
71579: PPUSH
71580: LD_VAR 0 2
71584: PPUSH
71585: CALL_OW 259
71589: PPUSH
71590: CALL_OW 2
71594: ST_TO_ADDR
71595: GO 71553
71597: POP
71598: POP
// if not tmp then
71599: LD_VAR 0 5
71603: NOT
71604: IFFALSE 71608
// exit ;
71606: GO 71628
// result := SortListByListDesc ( units , tmp ) ;
71608: LD_ADDR_VAR 0 3
71612: PUSH
71613: LD_VAR 0 1
71617: PPUSH
71618: LD_VAR 0 5
71622: PPUSH
71623: CALL_OW 77
71627: ST_TO_ADDR
// end ;
71628: LD_VAR 0 3
71632: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71633: LD_INT 0
71635: PPUSH
71636: PPUSH
71637: PPUSH
// result := false ;
71638: LD_ADDR_VAR 0 3
71642: PUSH
71643: LD_INT 0
71645: ST_TO_ADDR
// x := GetX ( building ) ;
71646: LD_ADDR_VAR 0 4
71650: PUSH
71651: LD_VAR 0 2
71655: PPUSH
71656: CALL_OW 250
71660: ST_TO_ADDR
// y := GetY ( building ) ;
71661: LD_ADDR_VAR 0 5
71665: PUSH
71666: LD_VAR 0 2
71670: PPUSH
71671: CALL_OW 251
71675: ST_TO_ADDR
// if not building or not x or not y then
71676: LD_VAR 0 2
71680: NOT
71681: PUSH
71682: LD_VAR 0 4
71686: NOT
71687: OR
71688: PUSH
71689: LD_VAR 0 5
71693: NOT
71694: OR
71695: IFFALSE 71699
// exit ;
71697: GO 71791
// if GetTaskList ( unit ) then
71699: LD_VAR 0 1
71703: PPUSH
71704: CALL_OW 437
71708: IFFALSE 71791
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71710: LD_STRING e
71712: PUSH
71713: LD_VAR 0 1
71717: PPUSH
71718: CALL_OW 437
71722: PUSH
71723: LD_INT 1
71725: ARRAY
71726: PUSH
71727: LD_INT 1
71729: ARRAY
71730: EQUAL
71731: PUSH
71732: LD_VAR 0 4
71736: PUSH
71737: LD_VAR 0 1
71741: PPUSH
71742: CALL_OW 437
71746: PUSH
71747: LD_INT 1
71749: ARRAY
71750: PUSH
71751: LD_INT 2
71753: ARRAY
71754: EQUAL
71755: AND
71756: PUSH
71757: LD_VAR 0 5
71761: PUSH
71762: LD_VAR 0 1
71766: PPUSH
71767: CALL_OW 437
71771: PUSH
71772: LD_INT 1
71774: ARRAY
71775: PUSH
71776: LD_INT 3
71778: ARRAY
71779: EQUAL
71780: AND
71781: IFFALSE 71791
// result := true end ;
71783: LD_ADDR_VAR 0 3
71787: PUSH
71788: LD_INT 1
71790: ST_TO_ADDR
// end ;
71791: LD_VAR 0 3
71795: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71796: LD_INT 0
71798: PPUSH
// result := false ;
71799: LD_ADDR_VAR 0 4
71803: PUSH
71804: LD_INT 0
71806: ST_TO_ADDR
// if GetTaskList ( unit ) then
71807: LD_VAR 0 1
71811: PPUSH
71812: CALL_OW 437
71816: IFFALSE 71899
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71818: LD_STRING M
71820: PUSH
71821: LD_VAR 0 1
71825: PPUSH
71826: CALL_OW 437
71830: PUSH
71831: LD_INT 1
71833: ARRAY
71834: PUSH
71835: LD_INT 1
71837: ARRAY
71838: EQUAL
71839: PUSH
71840: LD_VAR 0 2
71844: PUSH
71845: LD_VAR 0 1
71849: PPUSH
71850: CALL_OW 437
71854: PUSH
71855: LD_INT 1
71857: ARRAY
71858: PUSH
71859: LD_INT 2
71861: ARRAY
71862: EQUAL
71863: AND
71864: PUSH
71865: LD_VAR 0 3
71869: PUSH
71870: LD_VAR 0 1
71874: PPUSH
71875: CALL_OW 437
71879: PUSH
71880: LD_INT 1
71882: ARRAY
71883: PUSH
71884: LD_INT 3
71886: ARRAY
71887: EQUAL
71888: AND
71889: IFFALSE 71899
// result := true ;
71891: LD_ADDR_VAR 0 4
71895: PUSH
71896: LD_INT 1
71898: ST_TO_ADDR
// end ; end ;
71899: LD_VAR 0 4
71903: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71904: LD_INT 0
71906: PPUSH
71907: PPUSH
71908: PPUSH
71909: PPUSH
// if not unit or not area then
71910: LD_VAR 0 1
71914: NOT
71915: PUSH
71916: LD_VAR 0 2
71920: NOT
71921: OR
71922: IFFALSE 71926
// exit ;
71924: GO 72090
// tmp := AreaToList ( area , i ) ;
71926: LD_ADDR_VAR 0 6
71930: PUSH
71931: LD_VAR 0 2
71935: PPUSH
71936: LD_VAR 0 5
71940: PPUSH
71941: CALL_OW 517
71945: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71946: LD_ADDR_VAR 0 5
71950: PUSH
71951: DOUBLE
71952: LD_INT 1
71954: DEC
71955: ST_TO_ADDR
71956: LD_VAR 0 6
71960: PUSH
71961: LD_INT 1
71963: ARRAY
71964: PUSH
71965: FOR_TO
71966: IFFALSE 72088
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71968: LD_ADDR_VAR 0 7
71972: PUSH
71973: LD_VAR 0 6
71977: PUSH
71978: LD_INT 1
71980: ARRAY
71981: PUSH
71982: LD_VAR 0 5
71986: ARRAY
71987: PUSH
71988: LD_VAR 0 6
71992: PUSH
71993: LD_INT 2
71995: ARRAY
71996: PUSH
71997: LD_VAR 0 5
72001: ARRAY
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72007: LD_VAR 0 7
72011: PUSH
72012: LD_INT 1
72014: ARRAY
72015: PPUSH
72016: LD_VAR 0 7
72020: PUSH
72021: LD_INT 2
72023: ARRAY
72024: PPUSH
72025: CALL_OW 428
72029: PUSH
72030: LD_INT 0
72032: EQUAL
72033: IFFALSE 72086
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72035: LD_VAR 0 1
72039: PPUSH
72040: LD_VAR 0 7
72044: PUSH
72045: LD_INT 1
72047: ARRAY
72048: PPUSH
72049: LD_VAR 0 7
72053: PUSH
72054: LD_INT 2
72056: ARRAY
72057: PPUSH
72058: LD_VAR 0 3
72062: PPUSH
72063: CALL_OW 48
// result := IsPlaced ( unit ) ;
72067: LD_ADDR_VAR 0 4
72071: PUSH
72072: LD_VAR 0 1
72076: PPUSH
72077: CALL_OW 305
72081: ST_TO_ADDR
// exit ;
72082: POP
72083: POP
72084: GO 72090
// end ; end ;
72086: GO 71965
72088: POP
72089: POP
// end ;
72090: LD_VAR 0 4
72094: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72095: LD_INT 0
72097: PPUSH
72098: PPUSH
72099: PPUSH
// if not side or side > 8 then
72100: LD_VAR 0 1
72104: NOT
72105: PUSH
72106: LD_VAR 0 1
72110: PUSH
72111: LD_INT 8
72113: GREATER
72114: OR
72115: IFFALSE 72119
// exit ;
72117: GO 72306
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72119: LD_ADDR_VAR 0 4
72123: PUSH
72124: LD_INT 22
72126: PUSH
72127: LD_VAR 0 1
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 21
72138: PUSH
72139: LD_INT 3
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PPUSH
72150: CALL_OW 69
72154: ST_TO_ADDR
// if not tmp then
72155: LD_VAR 0 4
72159: NOT
72160: IFFALSE 72164
// exit ;
72162: GO 72306
// enable_addtolog := true ;
72164: LD_ADDR_OWVAR 81
72168: PUSH
72169: LD_INT 1
72171: ST_TO_ADDR
// AddToLog ( [ ) ;
72172: LD_STRING [
72174: PPUSH
72175: CALL_OW 561
// for i in tmp do
72179: LD_ADDR_VAR 0 3
72183: PUSH
72184: LD_VAR 0 4
72188: PUSH
72189: FOR_IN
72190: IFFALSE 72297
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72192: LD_STRING [
72194: PUSH
72195: LD_VAR 0 3
72199: PPUSH
72200: CALL_OW 266
72204: STR
72205: PUSH
72206: LD_STRING , 
72208: STR
72209: PUSH
72210: LD_VAR 0 3
72214: PPUSH
72215: CALL_OW 250
72219: STR
72220: PUSH
72221: LD_STRING , 
72223: STR
72224: PUSH
72225: LD_VAR 0 3
72229: PPUSH
72230: CALL_OW 251
72234: STR
72235: PUSH
72236: LD_STRING , 
72238: STR
72239: PUSH
72240: LD_VAR 0 3
72244: PPUSH
72245: CALL_OW 254
72249: STR
72250: PUSH
72251: LD_STRING , 
72253: STR
72254: PUSH
72255: LD_VAR 0 3
72259: PPUSH
72260: LD_INT 1
72262: PPUSH
72263: CALL_OW 268
72267: STR
72268: PUSH
72269: LD_STRING , 
72271: STR
72272: PUSH
72273: LD_VAR 0 3
72277: PPUSH
72278: LD_INT 2
72280: PPUSH
72281: CALL_OW 268
72285: STR
72286: PUSH
72287: LD_STRING ],
72289: STR
72290: PPUSH
72291: CALL_OW 561
// end ;
72295: GO 72189
72297: POP
72298: POP
// AddToLog ( ]; ) ;
72299: LD_STRING ];
72301: PPUSH
72302: CALL_OW 561
// end ;
72306: LD_VAR 0 2
72310: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72311: LD_INT 0
72313: PPUSH
72314: PPUSH
72315: PPUSH
72316: PPUSH
72317: PPUSH
// if not area or not rate or not max then
72318: LD_VAR 0 1
72322: NOT
72323: PUSH
72324: LD_VAR 0 2
72328: NOT
72329: OR
72330: PUSH
72331: LD_VAR 0 4
72335: NOT
72336: OR
72337: IFFALSE 72341
// exit ;
72339: GO 72533
// while 1 do
72341: LD_INT 1
72343: IFFALSE 72533
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72345: LD_ADDR_VAR 0 9
72349: PUSH
72350: LD_VAR 0 1
72354: PPUSH
72355: LD_INT 1
72357: PPUSH
72358: CALL_OW 287
72362: PUSH
72363: LD_INT 10
72365: MUL
72366: ST_TO_ADDR
// r := rate / 10 ;
72367: LD_ADDR_VAR 0 7
72371: PUSH
72372: LD_VAR 0 2
72376: PUSH
72377: LD_INT 10
72379: DIVREAL
72380: ST_TO_ADDR
// time := 1 1$00 ;
72381: LD_ADDR_VAR 0 8
72385: PUSH
72386: LD_INT 2100
72388: ST_TO_ADDR
// if amount < min then
72389: LD_VAR 0 9
72393: PUSH
72394: LD_VAR 0 3
72398: LESS
72399: IFFALSE 72417
// r := r * 2 else
72401: LD_ADDR_VAR 0 7
72405: PUSH
72406: LD_VAR 0 7
72410: PUSH
72411: LD_INT 2
72413: MUL
72414: ST_TO_ADDR
72415: GO 72443
// if amount > max then
72417: LD_VAR 0 9
72421: PUSH
72422: LD_VAR 0 4
72426: GREATER
72427: IFFALSE 72443
// r := r / 2 ;
72429: LD_ADDR_VAR 0 7
72433: PUSH
72434: LD_VAR 0 7
72438: PUSH
72439: LD_INT 2
72441: DIVREAL
72442: ST_TO_ADDR
// time := time / r ;
72443: LD_ADDR_VAR 0 8
72447: PUSH
72448: LD_VAR 0 8
72452: PUSH
72453: LD_VAR 0 7
72457: DIVREAL
72458: ST_TO_ADDR
// if time < 0 then
72459: LD_VAR 0 8
72463: PUSH
72464: LD_INT 0
72466: LESS
72467: IFFALSE 72484
// time := time * - 1 ;
72469: LD_ADDR_VAR 0 8
72473: PUSH
72474: LD_VAR 0 8
72478: PUSH
72479: LD_INT 1
72481: NEG
72482: MUL
72483: ST_TO_ADDR
// wait ( time ) ;
72484: LD_VAR 0 8
72488: PPUSH
72489: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72493: LD_INT 35
72495: PPUSH
72496: LD_INT 875
72498: PPUSH
72499: CALL_OW 12
72503: PPUSH
72504: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72508: LD_INT 1
72510: PPUSH
72511: LD_INT 5
72513: PPUSH
72514: CALL_OW 12
72518: PPUSH
72519: LD_VAR 0 1
72523: PPUSH
72524: LD_INT 1
72526: PPUSH
72527: CALL_OW 55
// end ;
72531: GO 72341
// end ;
72533: LD_VAR 0 5
72537: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72538: LD_INT 0
72540: PPUSH
72541: PPUSH
72542: PPUSH
72543: PPUSH
72544: PPUSH
72545: PPUSH
72546: PPUSH
72547: PPUSH
// if not turrets or not factories then
72548: LD_VAR 0 1
72552: NOT
72553: PUSH
72554: LD_VAR 0 2
72558: NOT
72559: OR
72560: IFFALSE 72564
// exit ;
72562: GO 72871
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72564: LD_ADDR_VAR 0 10
72568: PUSH
72569: LD_INT 5
72571: PUSH
72572: LD_INT 6
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 2
72581: PUSH
72582: LD_INT 4
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 3
72591: PUSH
72592: LD_INT 5
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 24
72606: PUSH
72607: LD_INT 25
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PUSH
72614: LD_INT 23
72616: PUSH
72617: LD_INT 27
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 42
72630: PUSH
72631: LD_INT 43
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 44
72640: PUSH
72641: LD_INT 46
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 45
72650: PUSH
72651: LD_INT 47
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: LIST
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: ST_TO_ADDR
// result := [ ] ;
72668: LD_ADDR_VAR 0 3
72672: PUSH
72673: EMPTY
72674: ST_TO_ADDR
// for i in turrets do
72675: LD_ADDR_VAR 0 4
72679: PUSH
72680: LD_VAR 0 1
72684: PUSH
72685: FOR_IN
72686: IFFALSE 72869
// begin nat := GetNation ( i ) ;
72688: LD_ADDR_VAR 0 7
72692: PUSH
72693: LD_VAR 0 4
72697: PPUSH
72698: CALL_OW 248
72702: ST_TO_ADDR
// weapon := 0 ;
72703: LD_ADDR_VAR 0 8
72707: PUSH
72708: LD_INT 0
72710: ST_TO_ADDR
// if not nat then
72711: LD_VAR 0 7
72715: NOT
72716: IFFALSE 72720
// continue ;
72718: GO 72685
// for j in list [ nat ] do
72720: LD_ADDR_VAR 0 5
72724: PUSH
72725: LD_VAR 0 10
72729: PUSH
72730: LD_VAR 0 7
72734: ARRAY
72735: PUSH
72736: FOR_IN
72737: IFFALSE 72778
// if GetBWeapon ( i ) = j [ 1 ] then
72739: LD_VAR 0 4
72743: PPUSH
72744: CALL_OW 269
72748: PUSH
72749: LD_VAR 0 5
72753: PUSH
72754: LD_INT 1
72756: ARRAY
72757: EQUAL
72758: IFFALSE 72776
// begin weapon := j [ 2 ] ;
72760: LD_ADDR_VAR 0 8
72764: PUSH
72765: LD_VAR 0 5
72769: PUSH
72770: LD_INT 2
72772: ARRAY
72773: ST_TO_ADDR
// break ;
72774: GO 72778
// end ;
72776: GO 72736
72778: POP
72779: POP
// if not weapon then
72780: LD_VAR 0 8
72784: NOT
72785: IFFALSE 72789
// continue ;
72787: GO 72685
// for k in factories do
72789: LD_ADDR_VAR 0 6
72793: PUSH
72794: LD_VAR 0 2
72798: PUSH
72799: FOR_IN
72800: IFFALSE 72865
// begin weapons := AvailableWeaponList ( k ) ;
72802: LD_ADDR_VAR 0 9
72806: PUSH
72807: LD_VAR 0 6
72811: PPUSH
72812: CALL_OW 478
72816: ST_TO_ADDR
// if not weapons then
72817: LD_VAR 0 9
72821: NOT
72822: IFFALSE 72826
// continue ;
72824: GO 72799
// if weapon in weapons then
72826: LD_VAR 0 8
72830: PUSH
72831: LD_VAR 0 9
72835: IN
72836: IFFALSE 72863
// begin result := [ i , weapon ] ;
72838: LD_ADDR_VAR 0 3
72842: PUSH
72843: LD_VAR 0 4
72847: PUSH
72848: LD_VAR 0 8
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: ST_TO_ADDR
// exit ;
72857: POP
72858: POP
72859: POP
72860: POP
72861: GO 72871
// end ; end ;
72863: GO 72799
72865: POP
72866: POP
// end ;
72867: GO 72685
72869: POP
72870: POP
// end ;
72871: LD_VAR 0 3
72875: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72876: LD_INT 0
72878: PPUSH
// if not side or side > 8 then
72879: LD_VAR 0 3
72883: NOT
72884: PUSH
72885: LD_VAR 0 3
72889: PUSH
72890: LD_INT 8
72892: GREATER
72893: OR
72894: IFFALSE 72898
// exit ;
72896: GO 72957
// if not range then
72898: LD_VAR 0 4
72902: NOT
72903: IFFALSE 72914
// range := - 12 ;
72905: LD_ADDR_VAR 0 4
72909: PUSH
72910: LD_INT 12
72912: NEG
72913: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72914: LD_VAR 0 1
72918: PPUSH
72919: LD_VAR 0 2
72923: PPUSH
72924: LD_VAR 0 3
72928: PPUSH
72929: LD_VAR 0 4
72933: PPUSH
72934: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72938: LD_VAR 0 1
72942: PPUSH
72943: LD_VAR 0 2
72947: PPUSH
72948: LD_VAR 0 3
72952: PPUSH
72953: CALL_OW 331
// end ;
72957: LD_VAR 0 5
72961: RET
// export function Video ( mode ) ; begin
72962: LD_INT 0
72964: PPUSH
// ingame_video = mode ;
72965: LD_ADDR_OWVAR 52
72969: PUSH
72970: LD_VAR 0 1
72974: ST_TO_ADDR
// interface_hidden = mode ;
72975: LD_ADDR_OWVAR 54
72979: PUSH
72980: LD_VAR 0 1
72984: ST_TO_ADDR
// end ;
72985: LD_VAR 0 2
72989: RET
// export function Join ( array , element ) ; begin
72990: LD_INT 0
72992: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72993: LD_ADDR_VAR 0 3
72997: PUSH
72998: LD_VAR 0 1
73002: PPUSH
73003: LD_VAR 0 1
73007: PUSH
73008: LD_INT 1
73010: PLUS
73011: PPUSH
73012: LD_VAR 0 2
73016: PPUSH
73017: CALL_OW 1
73021: ST_TO_ADDR
// end ;
73022: LD_VAR 0 3
73026: RET
// export function JoinUnion ( array , element ) ; begin
73027: LD_INT 0
73029: PPUSH
// result := array union element ;
73030: LD_ADDR_VAR 0 3
73034: PUSH
73035: LD_VAR 0 1
73039: PUSH
73040: LD_VAR 0 2
73044: UNION
73045: ST_TO_ADDR
// end ;
73046: LD_VAR 0 3
73050: RET
// export function GetBehemoths ( side ) ; begin
73051: LD_INT 0
73053: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73054: LD_ADDR_VAR 0 2
73058: PUSH
73059: LD_INT 22
73061: PUSH
73062: LD_VAR 0 1
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 31
73073: PUSH
73074: LD_INT 25
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PPUSH
73085: CALL_OW 69
73089: ST_TO_ADDR
// end ;
73090: LD_VAR 0 2
73094: RET
// export function Shuffle ( array ) ; var i , index ; begin
73095: LD_INT 0
73097: PPUSH
73098: PPUSH
73099: PPUSH
// result := [ ] ;
73100: LD_ADDR_VAR 0 2
73104: PUSH
73105: EMPTY
73106: ST_TO_ADDR
// if not array then
73107: LD_VAR 0 1
73111: NOT
73112: IFFALSE 73116
// exit ;
73114: GO 73215
// Randomize ;
73116: CALL_OW 10
// for i = array downto 1 do
73120: LD_ADDR_VAR 0 3
73124: PUSH
73125: DOUBLE
73126: LD_VAR 0 1
73130: INC
73131: ST_TO_ADDR
73132: LD_INT 1
73134: PUSH
73135: FOR_DOWNTO
73136: IFFALSE 73213
// begin index := rand ( 1 , array ) ;
73138: LD_ADDR_VAR 0 4
73142: PUSH
73143: LD_INT 1
73145: PPUSH
73146: LD_VAR 0 1
73150: PPUSH
73151: CALL_OW 12
73155: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73156: LD_ADDR_VAR 0 2
73160: PUSH
73161: LD_VAR 0 2
73165: PPUSH
73166: LD_VAR 0 2
73170: PUSH
73171: LD_INT 1
73173: PLUS
73174: PPUSH
73175: LD_VAR 0 1
73179: PUSH
73180: LD_VAR 0 4
73184: ARRAY
73185: PPUSH
73186: CALL_OW 2
73190: ST_TO_ADDR
// array := Delete ( array , index ) ;
73191: LD_ADDR_VAR 0 1
73195: PUSH
73196: LD_VAR 0 1
73200: PPUSH
73201: LD_VAR 0 4
73205: PPUSH
73206: CALL_OW 3
73210: ST_TO_ADDR
// end ;
73211: GO 73135
73213: POP
73214: POP
// end ;
73215: LD_VAR 0 2
73219: RET
// export function GetBaseMaterials ( base ) ; begin
73220: LD_INT 0
73222: PPUSH
// result := [ 0 , 0 , 0 ] ;
73223: LD_ADDR_VAR 0 2
73227: PUSH
73228: LD_INT 0
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: LD_INT 0
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: LIST
73241: ST_TO_ADDR
// if not base then
73242: LD_VAR 0 1
73246: NOT
73247: IFFALSE 73251
// exit ;
73249: GO 73300
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73251: LD_ADDR_VAR 0 2
73255: PUSH
73256: LD_VAR 0 1
73260: PPUSH
73261: LD_INT 1
73263: PPUSH
73264: CALL_OW 275
73268: PUSH
73269: LD_VAR 0 1
73273: PPUSH
73274: LD_INT 2
73276: PPUSH
73277: CALL_OW 275
73281: PUSH
73282: LD_VAR 0 1
73286: PPUSH
73287: LD_INT 3
73289: PPUSH
73290: CALL_OW 275
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: LIST
73299: ST_TO_ADDR
// end ;
73300: LD_VAR 0 2
73304: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73305: LD_INT 0
73307: PPUSH
73308: PPUSH
// result := array ;
73309: LD_ADDR_VAR 0 3
73313: PUSH
73314: LD_VAR 0 1
73318: ST_TO_ADDR
// if size > 0 then
73319: LD_VAR 0 2
73323: PUSH
73324: LD_INT 0
73326: GREATER
73327: IFFALSE 73373
// for i := array downto size do
73329: LD_ADDR_VAR 0 4
73333: PUSH
73334: DOUBLE
73335: LD_VAR 0 1
73339: INC
73340: ST_TO_ADDR
73341: LD_VAR 0 2
73345: PUSH
73346: FOR_DOWNTO
73347: IFFALSE 73371
// result := Delete ( result , result ) ;
73349: LD_ADDR_VAR 0 3
73353: PUSH
73354: LD_VAR 0 3
73358: PPUSH
73359: LD_VAR 0 3
73363: PPUSH
73364: CALL_OW 3
73368: ST_TO_ADDR
73369: GO 73346
73371: POP
73372: POP
// end ;
73373: LD_VAR 0 3
73377: RET
// export function ComExit ( unit ) ; var tmp ; begin
73378: LD_INT 0
73380: PPUSH
73381: PPUSH
// if not IsInUnit ( unit ) then
73382: LD_VAR 0 1
73386: PPUSH
73387: CALL_OW 310
73391: NOT
73392: IFFALSE 73396
// exit ;
73394: GO 73456
// tmp := IsInUnit ( unit ) ;
73396: LD_ADDR_VAR 0 3
73400: PUSH
73401: LD_VAR 0 1
73405: PPUSH
73406: CALL_OW 310
73410: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73411: LD_VAR 0 3
73415: PPUSH
73416: CALL_OW 247
73420: PUSH
73421: LD_INT 2
73423: EQUAL
73424: IFFALSE 73437
// ComExitVehicle ( unit ) else
73426: LD_VAR 0 1
73430: PPUSH
73431: CALL_OW 121
73435: GO 73446
// ComExitBuilding ( unit ) ;
73437: LD_VAR 0 1
73441: PPUSH
73442: CALL_OW 122
// result := tmp ;
73446: LD_ADDR_VAR 0 2
73450: PUSH
73451: LD_VAR 0 3
73455: ST_TO_ADDR
// end ;
73456: LD_VAR 0 2
73460: RET
// export function ComExitAll ( units ) ; var i ; begin
73461: LD_INT 0
73463: PPUSH
73464: PPUSH
// if not units then
73465: LD_VAR 0 1
73469: NOT
73470: IFFALSE 73474
// exit ;
73472: GO 73500
// for i in units do
73474: LD_ADDR_VAR 0 3
73478: PUSH
73479: LD_VAR 0 1
73483: PUSH
73484: FOR_IN
73485: IFFALSE 73498
// ComExit ( i ) ;
73487: LD_VAR 0 3
73491: PPUSH
73492: CALL 73378 0 1
73496: GO 73484
73498: POP
73499: POP
// end ;
73500: LD_VAR 0 2
73504: RET
// export function ResetHc ; begin
73505: LD_INT 0
73507: PPUSH
// InitHc ;
73508: CALL_OW 19
// hc_importance := 0 ;
73512: LD_ADDR_OWVAR 32
73516: PUSH
73517: LD_INT 0
73519: ST_TO_ADDR
// end ;
73520: LD_VAR 0 1
73524: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73525: LD_INT 0
73527: PPUSH
73528: PPUSH
73529: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73530: LD_ADDR_VAR 0 6
73534: PUSH
73535: LD_VAR 0 1
73539: PUSH
73540: LD_VAR 0 3
73544: PLUS
73545: PUSH
73546: LD_INT 2
73548: DIV
73549: ST_TO_ADDR
// if _x < 0 then
73550: LD_VAR 0 6
73554: PUSH
73555: LD_INT 0
73557: LESS
73558: IFFALSE 73575
// _x := _x * - 1 ;
73560: LD_ADDR_VAR 0 6
73564: PUSH
73565: LD_VAR 0 6
73569: PUSH
73570: LD_INT 1
73572: NEG
73573: MUL
73574: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73575: LD_ADDR_VAR 0 7
73579: PUSH
73580: LD_VAR 0 2
73584: PUSH
73585: LD_VAR 0 4
73589: PLUS
73590: PUSH
73591: LD_INT 2
73593: DIV
73594: ST_TO_ADDR
// if _y < 0 then
73595: LD_VAR 0 7
73599: PUSH
73600: LD_INT 0
73602: LESS
73603: IFFALSE 73620
// _y := _y * - 1 ;
73605: LD_ADDR_VAR 0 7
73609: PUSH
73610: LD_VAR 0 7
73614: PUSH
73615: LD_INT 1
73617: NEG
73618: MUL
73619: ST_TO_ADDR
// result := [ _x , _y ] ;
73620: LD_ADDR_VAR 0 5
73624: PUSH
73625: LD_VAR 0 6
73629: PUSH
73630: LD_VAR 0 7
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: ST_TO_ADDR
// end ;
73639: LD_VAR 0 5
73643: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73644: LD_INT 0
73646: PPUSH
73647: PPUSH
73648: PPUSH
73649: PPUSH
// task := GetTaskList ( unit ) ;
73650: LD_ADDR_VAR 0 7
73654: PUSH
73655: LD_VAR 0 1
73659: PPUSH
73660: CALL_OW 437
73664: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73665: LD_VAR 0 7
73669: NOT
73670: PUSH
73671: LD_VAR 0 1
73675: PPUSH
73676: LD_VAR 0 2
73680: PPUSH
73681: CALL_OW 308
73685: NOT
73686: AND
73687: IFFALSE 73691
// exit ;
73689: GO 73809
// if IsInArea ( unit , area ) then
73691: LD_VAR 0 1
73695: PPUSH
73696: LD_VAR 0 2
73700: PPUSH
73701: CALL_OW 308
73705: IFFALSE 73723
// begin ComMoveToArea ( unit , goAway ) ;
73707: LD_VAR 0 1
73711: PPUSH
73712: LD_VAR 0 3
73716: PPUSH
73717: CALL_OW 113
// exit ;
73721: GO 73809
// end ; if task [ 1 ] [ 1 ] <> M then
73723: LD_VAR 0 7
73727: PUSH
73728: LD_INT 1
73730: ARRAY
73731: PUSH
73732: LD_INT 1
73734: ARRAY
73735: PUSH
73736: LD_STRING M
73738: NONEQUAL
73739: IFFALSE 73743
// exit ;
73741: GO 73809
// x := task [ 1 ] [ 2 ] ;
73743: LD_ADDR_VAR 0 5
73747: PUSH
73748: LD_VAR 0 7
73752: PUSH
73753: LD_INT 1
73755: ARRAY
73756: PUSH
73757: LD_INT 2
73759: ARRAY
73760: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73761: LD_ADDR_VAR 0 6
73765: PUSH
73766: LD_VAR 0 7
73770: PUSH
73771: LD_INT 1
73773: ARRAY
73774: PUSH
73775: LD_INT 3
73777: ARRAY
73778: ST_TO_ADDR
// if InArea ( x , y , area ) then
73779: LD_VAR 0 5
73783: PPUSH
73784: LD_VAR 0 6
73788: PPUSH
73789: LD_VAR 0 2
73793: PPUSH
73794: CALL_OW 309
73798: IFFALSE 73809
// ComStop ( unit ) ;
73800: LD_VAR 0 1
73804: PPUSH
73805: CALL_OW 141
// end ;
73809: LD_VAR 0 4
73813: RET
// export function Abs ( value ) ; begin
73814: LD_INT 0
73816: PPUSH
// result := value ;
73817: LD_ADDR_VAR 0 2
73821: PUSH
73822: LD_VAR 0 1
73826: ST_TO_ADDR
// if value < 0 then
73827: LD_VAR 0 1
73831: PUSH
73832: LD_INT 0
73834: LESS
73835: IFFALSE 73852
// result := value * - 1 ;
73837: LD_ADDR_VAR 0 2
73841: PUSH
73842: LD_VAR 0 1
73846: PUSH
73847: LD_INT 1
73849: NEG
73850: MUL
73851: ST_TO_ADDR
// end ;
73852: LD_VAR 0 2
73856: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73857: LD_INT 0
73859: PPUSH
73860: PPUSH
73861: PPUSH
73862: PPUSH
73863: PPUSH
73864: PPUSH
73865: PPUSH
73866: PPUSH
// if not unit or not building then
73867: LD_VAR 0 1
73871: NOT
73872: PUSH
73873: LD_VAR 0 2
73877: NOT
73878: OR
73879: IFFALSE 73883
// exit ;
73881: GO 74109
// x := GetX ( building ) ;
73883: LD_ADDR_VAR 0 4
73887: PUSH
73888: LD_VAR 0 2
73892: PPUSH
73893: CALL_OW 250
73897: ST_TO_ADDR
// y := GetY ( building ) ;
73898: LD_ADDR_VAR 0 6
73902: PUSH
73903: LD_VAR 0 2
73907: PPUSH
73908: CALL_OW 251
73912: ST_TO_ADDR
// d := GetDir ( building ) ;
73913: LD_ADDR_VAR 0 8
73917: PUSH
73918: LD_VAR 0 2
73922: PPUSH
73923: CALL_OW 254
73927: ST_TO_ADDR
// r := 4 ;
73928: LD_ADDR_VAR 0 9
73932: PUSH
73933: LD_INT 4
73935: ST_TO_ADDR
// for i := 1 to 5 do
73936: LD_ADDR_VAR 0 10
73940: PUSH
73941: DOUBLE
73942: LD_INT 1
73944: DEC
73945: ST_TO_ADDR
73946: LD_INT 5
73948: PUSH
73949: FOR_TO
73950: IFFALSE 74107
// begin _x := ShiftX ( x , d , r + i ) ;
73952: LD_ADDR_VAR 0 5
73956: PUSH
73957: LD_VAR 0 4
73961: PPUSH
73962: LD_VAR 0 8
73966: PPUSH
73967: LD_VAR 0 9
73971: PUSH
73972: LD_VAR 0 10
73976: PLUS
73977: PPUSH
73978: CALL_OW 272
73982: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73983: LD_ADDR_VAR 0 7
73987: PUSH
73988: LD_VAR 0 6
73992: PPUSH
73993: LD_VAR 0 8
73997: PPUSH
73998: LD_VAR 0 9
74002: PUSH
74003: LD_VAR 0 10
74007: PLUS
74008: PPUSH
74009: CALL_OW 273
74013: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74014: LD_VAR 0 5
74018: PPUSH
74019: LD_VAR 0 7
74023: PPUSH
74024: CALL_OW 488
74028: PUSH
74029: LD_VAR 0 5
74033: PPUSH
74034: LD_VAR 0 7
74038: PPUSH
74039: CALL_OW 428
74043: PPUSH
74044: CALL_OW 247
74048: PUSH
74049: LD_INT 3
74051: PUSH
74052: LD_INT 2
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: IN
74059: NOT
74060: AND
74061: IFFALSE 74105
// begin ComMoveXY ( unit , _x , _y ) ;
74063: LD_VAR 0 1
74067: PPUSH
74068: LD_VAR 0 5
74072: PPUSH
74073: LD_VAR 0 7
74077: PPUSH
74078: CALL_OW 111
// result := [ _x , _y ] ;
74082: LD_ADDR_VAR 0 3
74086: PUSH
74087: LD_VAR 0 5
74091: PUSH
74092: LD_VAR 0 7
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: ST_TO_ADDR
// exit ;
74101: POP
74102: POP
74103: GO 74109
// end ; end ;
74105: GO 73949
74107: POP
74108: POP
// end ;
74109: LD_VAR 0 3
74113: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74114: LD_INT 0
74116: PPUSH
74117: PPUSH
74118: PPUSH
// result := 0 ;
74119: LD_ADDR_VAR 0 3
74123: PUSH
74124: LD_INT 0
74126: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74127: LD_VAR 0 1
74131: PUSH
74132: LD_INT 0
74134: LESS
74135: PUSH
74136: LD_VAR 0 1
74140: PUSH
74141: LD_INT 8
74143: GREATER
74144: OR
74145: PUSH
74146: LD_VAR 0 2
74150: PUSH
74151: LD_INT 0
74153: LESS
74154: OR
74155: PUSH
74156: LD_VAR 0 2
74160: PUSH
74161: LD_INT 8
74163: GREATER
74164: OR
74165: IFFALSE 74169
// exit ;
74167: GO 74244
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74169: LD_ADDR_VAR 0 4
74173: PUSH
74174: LD_INT 22
74176: PUSH
74177: LD_VAR 0 2
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PPUSH
74186: CALL_OW 69
74190: PUSH
74191: FOR_IN
74192: IFFALSE 74242
// begin un := UnitShoot ( i ) ;
74194: LD_ADDR_VAR 0 5
74198: PUSH
74199: LD_VAR 0 4
74203: PPUSH
74204: CALL_OW 504
74208: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74209: LD_VAR 0 5
74213: PPUSH
74214: CALL_OW 255
74218: PUSH
74219: LD_VAR 0 1
74223: EQUAL
74224: IFFALSE 74240
// begin result := un ;
74226: LD_ADDR_VAR 0 3
74230: PUSH
74231: LD_VAR 0 5
74235: ST_TO_ADDR
// exit ;
74236: POP
74237: POP
74238: GO 74244
// end ; end ;
74240: GO 74191
74242: POP
74243: POP
// end ;
74244: LD_VAR 0 3
74248: RET
// export function GetCargoBay ( units ) ; begin
74249: LD_INT 0
74251: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74252: LD_ADDR_VAR 0 2
74256: PUSH
74257: LD_VAR 0 1
74261: PPUSH
74262: LD_INT 2
74264: PUSH
74265: LD_INT 34
74267: PUSH
74268: LD_INT 12
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: PUSH
74275: LD_INT 34
74277: PUSH
74278: LD_INT 51
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 34
74287: PUSH
74288: LD_INT 32
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 34
74297: PUSH
74298: LD_EXP 122
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: PPUSH
74314: CALL_OW 72
74318: ST_TO_ADDR
// end ;
74319: LD_VAR 0 2
74323: RET
// export function Negate ( value ) ; begin
74324: LD_INT 0
74326: PPUSH
// result := not value ;
74327: LD_ADDR_VAR 0 2
74331: PUSH
74332: LD_VAR 0 1
74336: NOT
74337: ST_TO_ADDR
// end ;
74338: LD_VAR 0 2
74342: RET
// export function Inc ( value ) ; begin
74343: LD_INT 0
74345: PPUSH
// result := value + 1 ;
74346: LD_ADDR_VAR 0 2
74350: PUSH
74351: LD_VAR 0 1
74355: PUSH
74356: LD_INT 1
74358: PLUS
74359: ST_TO_ADDR
// end ;
74360: LD_VAR 0 2
74364: RET
// export function Dec ( value ) ; begin
74365: LD_INT 0
74367: PPUSH
// result := value - 1 ;
74368: LD_ADDR_VAR 0 2
74372: PUSH
74373: LD_VAR 0 1
74377: PUSH
74378: LD_INT 1
74380: MINUS
74381: ST_TO_ADDR
// end ;
74382: LD_VAR 0 2
74386: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74387: LD_INT 0
74389: PPUSH
74390: PPUSH
74391: PPUSH
74392: PPUSH
74393: PPUSH
74394: PPUSH
74395: PPUSH
74396: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74397: LD_VAR 0 1
74401: PPUSH
74402: LD_VAR 0 2
74406: PPUSH
74407: CALL_OW 488
74411: NOT
74412: PUSH
74413: LD_VAR 0 3
74417: PPUSH
74418: LD_VAR 0 4
74422: PPUSH
74423: CALL_OW 488
74427: NOT
74428: OR
74429: IFFALSE 74442
// begin result := - 1 ;
74431: LD_ADDR_VAR 0 5
74435: PUSH
74436: LD_INT 1
74438: NEG
74439: ST_TO_ADDR
// exit ;
74440: GO 74677
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74442: LD_ADDR_VAR 0 12
74446: PUSH
74447: LD_VAR 0 1
74451: PPUSH
74452: LD_VAR 0 2
74456: PPUSH
74457: LD_VAR 0 3
74461: PPUSH
74462: LD_VAR 0 4
74466: PPUSH
74467: CALL 73525 0 4
74471: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74472: LD_ADDR_VAR 0 11
74476: PUSH
74477: LD_VAR 0 1
74481: PPUSH
74482: LD_VAR 0 2
74486: PPUSH
74487: LD_VAR 0 12
74491: PUSH
74492: LD_INT 1
74494: ARRAY
74495: PPUSH
74496: LD_VAR 0 12
74500: PUSH
74501: LD_INT 2
74503: ARRAY
74504: PPUSH
74505: CALL_OW 298
74509: ST_TO_ADDR
// distance := 9999 ;
74510: LD_ADDR_VAR 0 10
74514: PUSH
74515: LD_INT 9999
74517: ST_TO_ADDR
// for i := 0 to 5 do
74518: LD_ADDR_VAR 0 6
74522: PUSH
74523: DOUBLE
74524: LD_INT 0
74526: DEC
74527: ST_TO_ADDR
74528: LD_INT 5
74530: PUSH
74531: FOR_TO
74532: IFFALSE 74675
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74534: LD_ADDR_VAR 0 7
74538: PUSH
74539: LD_VAR 0 1
74543: PPUSH
74544: LD_VAR 0 6
74548: PPUSH
74549: LD_VAR 0 11
74553: PPUSH
74554: CALL_OW 272
74558: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74559: LD_ADDR_VAR 0 8
74563: PUSH
74564: LD_VAR 0 2
74568: PPUSH
74569: LD_VAR 0 6
74573: PPUSH
74574: LD_VAR 0 11
74578: PPUSH
74579: CALL_OW 273
74583: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74584: LD_VAR 0 7
74588: PPUSH
74589: LD_VAR 0 8
74593: PPUSH
74594: CALL_OW 488
74598: NOT
74599: IFFALSE 74603
// continue ;
74601: GO 74531
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74603: LD_ADDR_VAR 0 9
74607: PUSH
74608: LD_VAR 0 12
74612: PUSH
74613: LD_INT 1
74615: ARRAY
74616: PPUSH
74617: LD_VAR 0 12
74621: PUSH
74622: LD_INT 2
74624: ARRAY
74625: PPUSH
74626: LD_VAR 0 7
74630: PPUSH
74631: LD_VAR 0 8
74635: PPUSH
74636: CALL_OW 298
74640: ST_TO_ADDR
// if tmp < distance then
74641: LD_VAR 0 9
74645: PUSH
74646: LD_VAR 0 10
74650: LESS
74651: IFFALSE 74673
// begin result := i ;
74653: LD_ADDR_VAR 0 5
74657: PUSH
74658: LD_VAR 0 6
74662: ST_TO_ADDR
// distance := tmp ;
74663: LD_ADDR_VAR 0 10
74667: PUSH
74668: LD_VAR 0 9
74672: ST_TO_ADDR
// end ; end ;
74673: GO 74531
74675: POP
74676: POP
// end ;
74677: LD_VAR 0 5
74681: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74682: LD_INT 0
74684: PPUSH
74685: PPUSH
// if not driver or not IsInUnit ( driver ) then
74686: LD_VAR 0 1
74690: NOT
74691: PUSH
74692: LD_VAR 0 1
74696: PPUSH
74697: CALL_OW 310
74701: NOT
74702: OR
74703: IFFALSE 74707
// exit ;
74705: GO 74797
// vehicle := IsInUnit ( driver ) ;
74707: LD_ADDR_VAR 0 3
74711: PUSH
74712: LD_VAR 0 1
74716: PPUSH
74717: CALL_OW 310
74721: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74722: LD_VAR 0 1
74726: PPUSH
74727: LD_STRING \
74729: PUSH
74730: LD_INT 0
74732: PUSH
74733: LD_INT 0
74735: PUSH
74736: LD_INT 0
74738: PUSH
74739: LD_INT 0
74741: PUSH
74742: LD_INT 0
74744: PUSH
74745: LD_INT 0
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: PUSH
74757: LD_STRING E
74759: PUSH
74760: LD_INT 0
74762: PUSH
74763: LD_INT 0
74765: PUSH
74766: LD_VAR 0 3
74770: PUSH
74771: LD_INT 0
74773: PUSH
74774: LD_INT 0
74776: PUSH
74777: LD_INT 0
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: PPUSH
74793: CALL_OW 446
// end ;
74797: LD_VAR 0 2
74801: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74802: LD_INT 0
74804: PPUSH
74805: PPUSH
// if not driver or not IsInUnit ( driver ) then
74806: LD_VAR 0 1
74810: NOT
74811: PUSH
74812: LD_VAR 0 1
74816: PPUSH
74817: CALL_OW 310
74821: NOT
74822: OR
74823: IFFALSE 74827
// exit ;
74825: GO 74917
// vehicle := IsInUnit ( driver ) ;
74827: LD_ADDR_VAR 0 3
74831: PUSH
74832: LD_VAR 0 1
74836: PPUSH
74837: CALL_OW 310
74841: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74842: LD_VAR 0 1
74846: PPUSH
74847: LD_STRING \
74849: PUSH
74850: LD_INT 0
74852: PUSH
74853: LD_INT 0
74855: PUSH
74856: LD_INT 0
74858: PUSH
74859: LD_INT 0
74861: PUSH
74862: LD_INT 0
74864: PUSH
74865: LD_INT 0
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: PUSH
74877: LD_STRING E
74879: PUSH
74880: LD_INT 0
74882: PUSH
74883: LD_INT 0
74885: PUSH
74886: LD_VAR 0 3
74890: PUSH
74891: LD_INT 0
74893: PUSH
74894: LD_INT 0
74896: PUSH
74897: LD_INT 0
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PPUSH
74913: CALL_OW 447
// end ;
74917: LD_VAR 0 2
74921: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74922: LD_INT 0
74924: PPUSH
74925: PPUSH
74926: PPUSH
// tmp := [ ] ;
74927: LD_ADDR_VAR 0 5
74931: PUSH
74932: EMPTY
74933: ST_TO_ADDR
// for i in units do
74934: LD_ADDR_VAR 0 4
74938: PUSH
74939: LD_VAR 0 1
74943: PUSH
74944: FOR_IN
74945: IFFALSE 74983
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74947: LD_ADDR_VAR 0 5
74951: PUSH
74952: LD_VAR 0 5
74956: PPUSH
74957: LD_VAR 0 5
74961: PUSH
74962: LD_INT 1
74964: PLUS
74965: PPUSH
74966: LD_VAR 0 4
74970: PPUSH
74971: CALL_OW 256
74975: PPUSH
74976: CALL_OW 2
74980: ST_TO_ADDR
74981: GO 74944
74983: POP
74984: POP
// if not tmp then
74985: LD_VAR 0 5
74989: NOT
74990: IFFALSE 74994
// exit ;
74992: GO 75042
// if asc then
74994: LD_VAR 0 2
74998: IFFALSE 75022
// result := SortListByListAsc ( units , tmp ) else
75000: LD_ADDR_VAR 0 3
75004: PUSH
75005: LD_VAR 0 1
75009: PPUSH
75010: LD_VAR 0 5
75014: PPUSH
75015: CALL_OW 76
75019: ST_TO_ADDR
75020: GO 75042
// result := SortListByListDesc ( units , tmp ) ;
75022: LD_ADDR_VAR 0 3
75026: PUSH
75027: LD_VAR 0 1
75031: PPUSH
75032: LD_VAR 0 5
75036: PPUSH
75037: CALL_OW 77
75041: ST_TO_ADDR
// end ;
75042: LD_VAR 0 3
75046: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75047: LD_INT 0
75049: PPUSH
75050: PPUSH
// task := GetTaskList ( mech ) ;
75051: LD_ADDR_VAR 0 4
75055: PUSH
75056: LD_VAR 0 1
75060: PPUSH
75061: CALL_OW 437
75065: ST_TO_ADDR
// if not task then
75066: LD_VAR 0 4
75070: NOT
75071: IFFALSE 75075
// exit ;
75073: GO 75117
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75075: LD_ADDR_VAR 0 3
75079: PUSH
75080: LD_VAR 0 4
75084: PUSH
75085: LD_INT 1
75087: ARRAY
75088: PUSH
75089: LD_INT 1
75091: ARRAY
75092: PUSH
75093: LD_STRING r
75095: EQUAL
75096: PUSH
75097: LD_VAR 0 4
75101: PUSH
75102: LD_INT 1
75104: ARRAY
75105: PUSH
75106: LD_INT 4
75108: ARRAY
75109: PUSH
75110: LD_VAR 0 2
75114: EQUAL
75115: AND
75116: ST_TO_ADDR
// end ;
75117: LD_VAR 0 3
75121: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75122: LD_INT 0
75124: PPUSH
// SetDir ( unit , d ) ;
75125: LD_VAR 0 1
75129: PPUSH
75130: LD_VAR 0 4
75134: PPUSH
75135: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75139: LD_VAR 0 1
75143: PPUSH
75144: LD_VAR 0 2
75148: PPUSH
75149: LD_VAR 0 3
75153: PPUSH
75154: LD_VAR 0 5
75158: PPUSH
75159: CALL_OW 48
// end ;
75163: LD_VAR 0 6
75167: RET
// export function ToNaturalNumber ( number ) ; begin
75168: LD_INT 0
75170: PPUSH
// result := number div 1 ;
75171: LD_ADDR_VAR 0 2
75175: PUSH
75176: LD_VAR 0 1
75180: PUSH
75181: LD_INT 1
75183: DIV
75184: ST_TO_ADDR
// if number < 0 then
75185: LD_VAR 0 1
75189: PUSH
75190: LD_INT 0
75192: LESS
75193: IFFALSE 75203
// result := 0 ;
75195: LD_ADDR_VAR 0 2
75199: PUSH
75200: LD_INT 0
75202: ST_TO_ADDR
// end ;
75203: LD_VAR 0 2
75207: RET
// export function SortByClass ( units , class ) ; var un ; begin
75208: LD_INT 0
75210: PPUSH
75211: PPUSH
// if not units or not class then
75212: LD_VAR 0 1
75216: NOT
75217: PUSH
75218: LD_VAR 0 2
75222: NOT
75223: OR
75224: IFFALSE 75228
// exit ;
75226: GO 75323
// result := [ ] ;
75228: LD_ADDR_VAR 0 3
75232: PUSH
75233: EMPTY
75234: ST_TO_ADDR
// for un in units do
75235: LD_ADDR_VAR 0 4
75239: PUSH
75240: LD_VAR 0 1
75244: PUSH
75245: FOR_IN
75246: IFFALSE 75321
// if GetClass ( un ) = class then
75248: LD_VAR 0 4
75252: PPUSH
75253: CALL_OW 257
75257: PUSH
75258: LD_VAR 0 2
75262: EQUAL
75263: IFFALSE 75290
// result := Insert ( result , 1 , un ) else
75265: LD_ADDR_VAR 0 3
75269: PUSH
75270: LD_VAR 0 3
75274: PPUSH
75275: LD_INT 1
75277: PPUSH
75278: LD_VAR 0 4
75282: PPUSH
75283: CALL_OW 2
75287: ST_TO_ADDR
75288: GO 75319
// result := Replace ( result , result + 1 , un ) ;
75290: LD_ADDR_VAR 0 3
75294: PUSH
75295: LD_VAR 0 3
75299: PPUSH
75300: LD_VAR 0 3
75304: PUSH
75305: LD_INT 1
75307: PLUS
75308: PPUSH
75309: LD_VAR 0 4
75313: PPUSH
75314: CALL_OW 1
75318: ST_TO_ADDR
75319: GO 75245
75321: POP
75322: POP
// end ;
75323: LD_VAR 0 3
75327: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75328: LD_INT 0
75330: PPUSH
75331: PPUSH
75332: PPUSH
75333: PPUSH
75334: PPUSH
75335: PPUSH
75336: PPUSH
// result := [ ] ;
75337: LD_ADDR_VAR 0 4
75341: PUSH
75342: EMPTY
75343: ST_TO_ADDR
// if x - r < 0 then
75344: LD_VAR 0 1
75348: PUSH
75349: LD_VAR 0 3
75353: MINUS
75354: PUSH
75355: LD_INT 0
75357: LESS
75358: IFFALSE 75370
// min_x := 0 else
75360: LD_ADDR_VAR 0 8
75364: PUSH
75365: LD_INT 0
75367: ST_TO_ADDR
75368: GO 75386
// min_x := x - r ;
75370: LD_ADDR_VAR 0 8
75374: PUSH
75375: LD_VAR 0 1
75379: PUSH
75380: LD_VAR 0 3
75384: MINUS
75385: ST_TO_ADDR
// if y - r < 0 then
75386: LD_VAR 0 2
75390: PUSH
75391: LD_VAR 0 3
75395: MINUS
75396: PUSH
75397: LD_INT 0
75399: LESS
75400: IFFALSE 75412
// min_y := 0 else
75402: LD_ADDR_VAR 0 7
75406: PUSH
75407: LD_INT 0
75409: ST_TO_ADDR
75410: GO 75428
// min_y := y - r ;
75412: LD_ADDR_VAR 0 7
75416: PUSH
75417: LD_VAR 0 2
75421: PUSH
75422: LD_VAR 0 3
75426: MINUS
75427: ST_TO_ADDR
// max_x := x + r ;
75428: LD_ADDR_VAR 0 9
75432: PUSH
75433: LD_VAR 0 1
75437: PUSH
75438: LD_VAR 0 3
75442: PLUS
75443: ST_TO_ADDR
// max_y := y + r ;
75444: LD_ADDR_VAR 0 10
75448: PUSH
75449: LD_VAR 0 2
75453: PUSH
75454: LD_VAR 0 3
75458: PLUS
75459: ST_TO_ADDR
// for _x = min_x to max_x do
75460: LD_ADDR_VAR 0 5
75464: PUSH
75465: DOUBLE
75466: LD_VAR 0 8
75470: DEC
75471: ST_TO_ADDR
75472: LD_VAR 0 9
75476: PUSH
75477: FOR_TO
75478: IFFALSE 75579
// for _y = min_y to max_y do
75480: LD_ADDR_VAR 0 6
75484: PUSH
75485: DOUBLE
75486: LD_VAR 0 7
75490: DEC
75491: ST_TO_ADDR
75492: LD_VAR 0 10
75496: PUSH
75497: FOR_TO
75498: IFFALSE 75575
// begin if not ValidHex ( _x , _y ) then
75500: LD_VAR 0 5
75504: PPUSH
75505: LD_VAR 0 6
75509: PPUSH
75510: CALL_OW 488
75514: NOT
75515: IFFALSE 75519
// continue ;
75517: GO 75497
// if GetResourceTypeXY ( _x , _y ) then
75519: LD_VAR 0 5
75523: PPUSH
75524: LD_VAR 0 6
75528: PPUSH
75529: CALL_OW 283
75533: IFFALSE 75573
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75535: LD_ADDR_VAR 0 4
75539: PUSH
75540: LD_VAR 0 4
75544: PPUSH
75545: LD_VAR 0 4
75549: PUSH
75550: LD_INT 1
75552: PLUS
75553: PPUSH
75554: LD_VAR 0 5
75558: PUSH
75559: LD_VAR 0 6
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: PPUSH
75568: CALL_OW 1
75572: ST_TO_ADDR
// end ;
75573: GO 75497
75575: POP
75576: POP
75577: GO 75477
75579: POP
75580: POP
// end ;
75581: LD_VAR 0 4
75585: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75586: LD_INT 0
75588: PPUSH
75589: PPUSH
75590: PPUSH
75591: PPUSH
75592: PPUSH
75593: PPUSH
75594: PPUSH
75595: PPUSH
// if not units then
75596: LD_VAR 0 1
75600: NOT
75601: IFFALSE 75605
// exit ;
75603: GO 76030
// result := UnitFilter ( units , [ f_ok ] ) ;
75605: LD_ADDR_VAR 0 3
75609: PUSH
75610: LD_VAR 0 1
75614: PPUSH
75615: LD_INT 50
75617: PUSH
75618: EMPTY
75619: LIST
75620: PPUSH
75621: CALL_OW 72
75625: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75626: LD_ADDR_VAR 0 8
75630: PUSH
75631: LD_VAR 0 1
75635: PUSH
75636: LD_INT 1
75638: ARRAY
75639: PPUSH
75640: CALL_OW 255
75644: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
75645: LD_ADDR_VAR 0 10
75649: PUSH
75650: LD_INT 29
75652: PUSH
75653: LD_EXP 125
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: ST_TO_ADDR
// if not result then
75662: LD_VAR 0 3
75666: NOT
75667: IFFALSE 75671
// exit ;
75669: GO 76030
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75671: LD_ADDR_VAR 0 5
75675: PUSH
75676: LD_INT 81
75678: PUSH
75679: LD_VAR 0 8
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PPUSH
75688: CALL_OW 69
75692: ST_TO_ADDR
// for i in result do
75693: LD_ADDR_VAR 0 4
75697: PUSH
75698: LD_VAR 0 3
75702: PUSH
75703: FOR_IN
75704: IFFALSE 76028
// begin tag := GetTag ( i ) + 1 ;
75706: LD_ADDR_VAR 0 9
75710: PUSH
75711: LD_VAR 0 4
75715: PPUSH
75716: CALL_OW 110
75720: PUSH
75721: LD_INT 1
75723: PLUS
75724: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75725: LD_ADDR_VAR 0 7
75729: PUSH
75730: LD_VAR 0 4
75734: PPUSH
75735: CALL_OW 250
75739: PPUSH
75740: LD_VAR 0 4
75744: PPUSH
75745: CALL_OW 251
75749: PPUSH
75750: LD_INT 6
75752: PPUSH
75753: CALL 75328 0 3
75757: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75758: LD_VAR 0 7
75762: PUSH
75763: LD_VAR 0 4
75767: PPUSH
75768: CALL_OW 264
75772: PUSH
75773: LD_VAR 0 10
75777: IN
75778: NOT
75779: AND
75780: IFFALSE 75819
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75782: LD_VAR 0 4
75786: PPUSH
75787: LD_VAR 0 7
75791: PUSH
75792: LD_INT 1
75794: ARRAY
75795: PUSH
75796: LD_INT 1
75798: ARRAY
75799: PPUSH
75800: LD_VAR 0 7
75804: PUSH
75805: LD_INT 1
75807: ARRAY
75808: PUSH
75809: LD_INT 2
75811: ARRAY
75812: PPUSH
75813: CALL_OW 116
75817: GO 76026
// if path > tag then
75819: LD_VAR 0 2
75823: PUSH
75824: LD_VAR 0 9
75828: GREATER
75829: IFFALSE 75996
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
75831: LD_ADDR_VAR 0 6
75835: PUSH
75836: LD_VAR 0 5
75840: PPUSH
75841: LD_INT 91
75843: PUSH
75844: LD_VAR 0 4
75848: PUSH
75849: LD_INT 12
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: LIST
75856: PPUSH
75857: CALL_OW 72
75861: ST_TO_ADDR
// if nearEnemy then
75862: LD_VAR 0 6
75866: IFFALSE 75894
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75868: LD_VAR 0 4
75872: PPUSH
75873: LD_VAR 0 6
75877: PPUSH
75878: LD_VAR 0 4
75882: PPUSH
75883: CALL_OW 74
75887: PPUSH
75888: CALL_OW 115
75892: GO 75994
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75894: LD_VAR 0 4
75898: PPUSH
75899: LD_VAR 0 2
75903: PUSH
75904: LD_VAR 0 9
75908: ARRAY
75909: PUSH
75910: LD_INT 1
75912: ARRAY
75913: PPUSH
75914: LD_VAR 0 2
75918: PUSH
75919: LD_VAR 0 9
75923: ARRAY
75924: PUSH
75925: LD_INT 2
75927: ARRAY
75928: PPUSH
75929: CALL_OW 297
75933: PUSH
75934: LD_INT 6
75936: GREATER
75937: IFFALSE 75980
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75939: LD_VAR 0 4
75943: PPUSH
75944: LD_VAR 0 2
75948: PUSH
75949: LD_VAR 0 9
75953: ARRAY
75954: PUSH
75955: LD_INT 1
75957: ARRAY
75958: PPUSH
75959: LD_VAR 0 2
75963: PUSH
75964: LD_VAR 0 9
75968: ARRAY
75969: PUSH
75970: LD_INT 2
75972: ARRAY
75973: PPUSH
75974: CALL_OW 114
75978: GO 75994
// SetTag ( i , tag ) ;
75980: LD_VAR 0 4
75984: PPUSH
75985: LD_VAR 0 9
75989: PPUSH
75990: CALL_OW 109
// end else
75994: GO 76026
// if enemy then
75996: LD_VAR 0 5
76000: IFFALSE 76026
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76002: LD_VAR 0 4
76006: PPUSH
76007: LD_VAR 0 5
76011: PPUSH
76012: LD_VAR 0 4
76016: PPUSH
76017: CALL_OW 74
76021: PPUSH
76022: CALL_OW 115
// end ;
76026: GO 75703
76028: POP
76029: POP
// end ;
76030: LD_VAR 0 3
76034: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76035: LD_INT 0
76037: PPUSH
76038: PPUSH
76039: PPUSH
// if not unit or IsInUnit ( unit ) then
76040: LD_VAR 0 1
76044: NOT
76045: PUSH
76046: LD_VAR 0 1
76050: PPUSH
76051: CALL_OW 310
76055: OR
76056: IFFALSE 76060
// exit ;
76058: GO 76151
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76060: LD_ADDR_VAR 0 4
76064: PUSH
76065: LD_VAR 0 1
76069: PPUSH
76070: CALL_OW 250
76074: PPUSH
76075: LD_VAR 0 2
76079: PPUSH
76080: LD_INT 1
76082: PPUSH
76083: CALL_OW 272
76087: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76088: LD_ADDR_VAR 0 5
76092: PUSH
76093: LD_VAR 0 1
76097: PPUSH
76098: CALL_OW 251
76102: PPUSH
76103: LD_VAR 0 2
76107: PPUSH
76108: LD_INT 1
76110: PPUSH
76111: CALL_OW 273
76115: ST_TO_ADDR
// if ValidHex ( x , y ) then
76116: LD_VAR 0 4
76120: PPUSH
76121: LD_VAR 0 5
76125: PPUSH
76126: CALL_OW 488
76130: IFFALSE 76151
// ComTurnXY ( unit , x , y ) ;
76132: LD_VAR 0 1
76136: PPUSH
76137: LD_VAR 0 4
76141: PPUSH
76142: LD_VAR 0 5
76146: PPUSH
76147: CALL_OW 118
// end ;
76151: LD_VAR 0 3
76155: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76156: LD_INT 0
76158: PPUSH
76159: PPUSH
// result := false ;
76160: LD_ADDR_VAR 0 3
76164: PUSH
76165: LD_INT 0
76167: ST_TO_ADDR
// if not units then
76168: LD_VAR 0 2
76172: NOT
76173: IFFALSE 76177
// exit ;
76175: GO 76222
// for i in units do
76177: LD_ADDR_VAR 0 4
76181: PUSH
76182: LD_VAR 0 2
76186: PUSH
76187: FOR_IN
76188: IFFALSE 76220
// if See ( side , i ) then
76190: LD_VAR 0 1
76194: PPUSH
76195: LD_VAR 0 4
76199: PPUSH
76200: CALL_OW 292
76204: IFFALSE 76218
// begin result := true ;
76206: LD_ADDR_VAR 0 3
76210: PUSH
76211: LD_INT 1
76213: ST_TO_ADDR
// exit ;
76214: POP
76215: POP
76216: GO 76222
// end ;
76218: GO 76187
76220: POP
76221: POP
// end ;
76222: LD_VAR 0 3
76226: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76227: LD_INT 0
76229: PPUSH
76230: PPUSH
76231: PPUSH
76232: PPUSH
// if not unit or not points then
76233: LD_VAR 0 1
76237: NOT
76238: PUSH
76239: LD_VAR 0 2
76243: NOT
76244: OR
76245: IFFALSE 76249
// exit ;
76247: GO 76339
// dist := 99999 ;
76249: LD_ADDR_VAR 0 5
76253: PUSH
76254: LD_INT 99999
76256: ST_TO_ADDR
// for i in points do
76257: LD_ADDR_VAR 0 4
76261: PUSH
76262: LD_VAR 0 2
76266: PUSH
76267: FOR_IN
76268: IFFALSE 76337
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76270: LD_ADDR_VAR 0 6
76274: PUSH
76275: LD_VAR 0 1
76279: PPUSH
76280: LD_VAR 0 4
76284: PUSH
76285: LD_INT 1
76287: ARRAY
76288: PPUSH
76289: LD_VAR 0 4
76293: PUSH
76294: LD_INT 2
76296: ARRAY
76297: PPUSH
76298: CALL_OW 297
76302: ST_TO_ADDR
// if tmpDist < dist then
76303: LD_VAR 0 6
76307: PUSH
76308: LD_VAR 0 5
76312: LESS
76313: IFFALSE 76335
// begin result := i ;
76315: LD_ADDR_VAR 0 3
76319: PUSH
76320: LD_VAR 0 4
76324: ST_TO_ADDR
// dist := tmpDist ;
76325: LD_ADDR_VAR 0 5
76329: PUSH
76330: LD_VAR 0 6
76334: ST_TO_ADDR
// end ; end ;
76335: GO 76267
76337: POP
76338: POP
// end ; end_of_file
76339: LD_VAR 0 3
76343: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76344: LD_VAR 0 1
76348: PPUSH
76349: LD_VAR 0 2
76353: PPUSH
76354: LD_VAR 0 3
76358: PPUSH
76359: LD_VAR 0 4
76363: PPUSH
76364: LD_VAR 0 5
76368: PPUSH
76369: LD_VAR 0 6
76373: PPUSH
76374: CALL 16995 0 6
// end ;
76378: PPOPN 6
76380: END
