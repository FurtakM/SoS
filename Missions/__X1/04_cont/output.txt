// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1727 0 0
// PrepareArabian ;
  12: CALL 1916 0 0
// PrepareAmerican ;
  16: CALL 6330 0 0
// PrepareRussian ;
  20: CALL 2837 0 0
// Action ;
  24: CALL 7890 0 0
// if debug then
  28: LD_EXP 1
  32: IFFALSE 41
// FogOff ( 2 ) ;
  34: LD_INT 2
  36: PPUSH
  37: CALL_OW 344
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 15
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// escapeCounter := 0 ;
 173: LD_ADDR_EXP 18
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// loseCounter := 0 ;
 181: LD_ADDR_EXP 14
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// labCaptured := false ;
 189: LD_ADDR_EXP 20
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 197: LD_ADDR_EXP 8
 201: PUSH
 202: LD_INT 3
 204: PUSH
 205: LD_INT 4
 207: PUSH
 208: LD_INT 5
 210: PUSH
 211: LD_INT 6
 213: PUSH
 214: LD_INT 7
 216: PUSH
 217: LD_INT 8
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if exist_mode then
 237: LD_VAR 0 2
 241: IFFALSE 266
// unit := CreateCharacter ( prefix & ident ) else
 243: LD_ADDR_VAR 0 5
 247: PUSH
 248: LD_VAR 0 3
 252: PUSH
 253: LD_VAR 0 1
 257: STR
 258: PPUSH
 259: CALL_OW 34
 263: ST_TO_ADDR
 264: GO 281
// unit := NewCharacter ( ident ) ;
 266: LD_ADDR_VAR 0 5
 270: PUSH
 271: LD_VAR 0 1
 275: PPUSH
 276: CALL_OW 25
 280: ST_TO_ADDR
// result := unit ;
 281: LD_ADDR_VAR 0 4
 285: PUSH
 286: LD_VAR 0 5
 290: ST_TO_ADDR
// end ;
 291: LD_VAR 0 4
 295: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 296: LD_INT 0
 298: PPUSH
// uc_side := side ;
 299: LD_ADDR_OWVAR 20
 303: PUSH
 304: LD_VAR 0 1
 308: ST_TO_ADDR
// uc_nation := nation ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_VAR 0 2
 318: ST_TO_ADDR
// vc_chassis := chassis ;
 319: LD_ADDR_OWVAR 37
 323: PUSH
 324: LD_VAR 0 3
 328: ST_TO_ADDR
// vc_engine := engine ;
 329: LD_ADDR_OWVAR 39
 333: PUSH
 334: LD_VAR 0 4
 338: ST_TO_ADDR
// vc_control := control ;
 339: LD_ADDR_OWVAR 38
 343: PUSH
 344: LD_VAR 0 5
 348: ST_TO_ADDR
// vc_weapon := weapon ;
 349: LD_ADDR_OWVAR 40
 353: PUSH
 354: LD_VAR 0 6
 358: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 359: LD_ADDR_OWVAR 41
 363: PUSH
 364: LD_VAR 0 7
 368: ST_TO_ADDR
// result := CreateVehicle ;
 369: LD_ADDR_VAR 0 8
 373: PUSH
 374: CALL_OW 45
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 8
 383: RET
// export function SayX ( units , ident ) ; var i ; begin
 384: LD_INT 0
 386: PPUSH
 387: PPUSH
// result := false ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// if not units then
 396: LD_VAR 0 1
 400: NOT
 401: IFFALSE 405
// exit ;
 403: GO 459
// for i in units do
 405: LD_ADDR_VAR 0 4
 409: PUSH
 410: LD_VAR 0 1
 414: PUSH
 415: FOR_IN
 416: IFFALSE 457
// if IsOk ( i ) then
 418: LD_VAR 0 4
 422: PPUSH
 423: CALL_OW 302
 427: IFFALSE 455
// begin Say ( i , ident ) ;
 429: LD_VAR 0 4
 433: PPUSH
 434: LD_VAR 0 2
 438: PPUSH
 439: CALL_OW 88
// result := i ;
 443: LD_ADDR_VAR 0 3
 447: PUSH
 448: LD_VAR 0 4
 452: ST_TO_ADDR
// break ;
 453: GO 457
// end ;
 455: GO 415
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 3
 463: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
 468: PPUSH
// if not observer or not unit then
 469: LD_VAR 0 1
 473: NOT
 474: PUSH
 475: LD_VAR 0 2
 479: NOT
 480: OR
 481: IFFALSE 485
// exit ;
 483: GO 533
// if not See ( GetSide ( observer ) , unit ) then
 485: LD_VAR 0 1
 489: PPUSH
 490: CALL_OW 255
 494: PPUSH
 495: LD_VAR 0 2
 499: PPUSH
 500: CALL_OW 292
 504: NOT
 505: IFFALSE 509
// exit ;
 507: GO 533
// result := GetDistUnits ( observer , unit ) < 12 ;
 509: LD_ADDR_VAR 0 3
 513: PUSH
 514: LD_VAR 0 1
 518: PPUSH
 519: LD_VAR 0 2
 523: PPUSH
 524: CALL_OW 296
 528: PUSH
 529: LD_INT 12
 531: LESS
 532: ST_TO_ADDR
// end ;
 533: LD_VAR 0 3
 537: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 538: LD_INT 0
 540: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 541: LD_VAR 0 2
 545: PUSH
 546: LD_INT 1
 548: ARRAY
 549: PPUSH
 550: LD_VAR 0 2
 554: PUSH
 555: LD_INT 2
 557: ARRAY
 558: PPUSH
 559: CALL_OW 488
 563: PUSH
 564: LD_VAR 0 2
 568: PUSH
 569: LD_INT 1
 571: ARRAY
 572: PPUSH
 573: LD_VAR 0 2
 577: PUSH
 578: LD_INT 2
 580: ARRAY
 581: PPUSH
 582: CALL_OW 428
 586: PUSH
 587: LD_INT 0
 589: EQUAL
 590: AND
 591: IFFALSE 625
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 593: LD_VAR 0 1
 597: PPUSH
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_VAR 0 3
 620: PPUSH
 621: CALL_OW 48
// end ;
 625: LD_VAR 0 4
 629: RET
// export function Video ( mode ) ; begin
 630: LD_INT 0
 632: PPUSH
// ingame_video = mode ;
 633: LD_ADDR_OWVAR 52
 637: PUSH
 638: LD_VAR 0 1
 642: ST_TO_ADDR
// interface_hidden = mode ;
 643: LD_ADDR_OWVAR 54
 647: PUSH
 648: LD_VAR 0 1
 652: ST_TO_ADDR
// end ;
 653: LD_VAR 0 2
 657: RET
// export function ReverseArray ( array ) ; var i ; begin
 658: LD_INT 0
 660: PPUSH
 661: PPUSH
// if not array then
 662: LD_VAR 0 1
 666: NOT
 667: IFFALSE 671
// exit ;
 669: GO 729
// result := [ ] ;
 671: LD_ADDR_VAR 0 2
 675: PUSH
 676: EMPTY
 677: ST_TO_ADDR
// for i := 1 to array do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_VAR 0 1
 692: PUSH
 693: FOR_TO
 694: IFFALSE 727
// result := Insert ( result , 1 , array [ i ] ) ;
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: LD_VAR 0 2
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: LD_VAR 0 1
 713: PUSH
 714: LD_VAR 0 3
 718: ARRAY
 719: PPUSH
 720: CALL_OW 2
 724: ST_TO_ADDR
 725: GO 693
 727: POP
 728: POP
// end ;
 729: LD_VAR 0 2
 733: RET
// export function ComExit ( unit ) ; begin
 734: LD_INT 0
 736: PPUSH
// result := IsInUnit ( unit ) ;
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_VAR 0 1
 746: PPUSH
 747: CALL_OW 310
 751: ST_TO_ADDR
// if not result then
 752: LD_VAR 0 2
 756: NOT
 757: IFFALSE 761
// exit ;
 759: GO 796
// if GetType ( result ) = unit_vehicle then
 761: LD_VAR 0 2
 765: PPUSH
 766: CALL_OW 247
 770: PUSH
 771: LD_INT 2
 773: EQUAL
 774: IFFALSE 787
// ComExitVehicle ( unit ) else
 776: LD_VAR 0 1
 780: PPUSH
 781: CALL_OW 121
 785: GO 796
// ComExitBuilding ( unit ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 122
// end ;
 796: LD_VAR 0 2
 800: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 801: LD_INT 0
 803: PPUSH
 804: PPUSH
// if not side or not nation then
 805: LD_VAR 0 1
 809: NOT
 810: PUSH
 811: LD_VAR 0 2
 815: NOT
 816: OR
 817: IFFALSE 821
// exit ;
 819: GO 1585
// case nation of nation_american :
 821: LD_VAR 0 2
 825: PUSH
 826: LD_INT 1
 828: DOUBLE
 829: EQUAL
 830: IFTRUE 834
 832: GO 1048
 834: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 835: LD_ADDR_VAR 0 4
 839: PUSH
 840: LD_INT 35
 842: PUSH
 843: LD_INT 45
 845: PUSH
 846: LD_INT 46
 848: PUSH
 849: LD_INT 47
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 83
 857: PUSH
 858: LD_INT 84
 860: PUSH
 861: LD_INT 85
 863: PUSH
 864: LD_INT 86
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 6
 875: PUSH
 876: LD_INT 15
 878: PUSH
 879: LD_INT 16
 881: PUSH
 882: LD_INT 7
 884: PUSH
 885: LD_INT 12
 887: PUSH
 888: LD_INT 13
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: LD_INT 14
 896: PUSH
 897: LD_INT 20
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 22
 905: PUSH
 906: LD_INT 25
 908: PUSH
 909: LD_INT 32
 911: PUSH
 912: LD_INT 27
 914: PUSH
 915: LD_INT 36
 917: PUSH
 918: LD_INT 69
 920: PUSH
 921: LD_INT 39
 923: PUSH
 924: LD_INT 34
 926: PUSH
 927: LD_INT 40
 929: PUSH
 930: LD_INT 48
 932: PUSH
 933: LD_INT 49
 935: PUSH
 936: LD_INT 50
 938: PUSH
 939: LD_INT 51
 941: PUSH
 942: LD_INT 52
 944: PUSH
 945: LD_INT 53
 947: PUSH
 948: LD_INT 54
 950: PUSH
 951: LD_INT 55
 953: PUSH
 954: LD_INT 56
 956: PUSH
 957: LD_INT 57
 959: PUSH
 960: LD_INT 58
 962: PUSH
 963: LD_INT 59
 965: PUSH
 966: LD_INT 60
 968: PUSH
 969: LD_INT 61
 971: PUSH
 972: LD_INT 62
 974: PUSH
 975: LD_INT 80
 977: PUSH
 978: LD_INT 82
 980: PUSH
 981: LD_INT 83
 983: PUSH
 984: LD_INT 84
 986: PUSH
 987: LD_INT 85
 989: PUSH
 990: LD_INT 86
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: ST_TO_ADDR
1046: GO 1509
1048: LD_INT 2
1050: DOUBLE
1051: EQUAL
1052: IFTRUE 1056
1054: GO 1278
1056: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 35
1064: PUSH
1065: LD_INT 45
1067: PUSH
1068: LD_INT 46
1070: PUSH
1071: LD_INT 47
1073: PUSH
1074: LD_INT 82
1076: PUSH
1077: LD_INT 83
1079: PUSH
1080: LD_INT 84
1082: PUSH
1083: LD_INT 85
1085: PUSH
1086: LD_INT 87
1088: PUSH
1089: LD_INT 70
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 11
1097: PUSH
1098: LD_INT 3
1100: PUSH
1101: LD_INT 4
1103: PUSH
1104: LD_INT 5
1106: PUSH
1107: LD_INT 6
1109: PUSH
1110: LD_INT 15
1112: PUSH
1113: LD_INT 18
1115: PUSH
1116: LD_INT 7
1118: PUSH
1119: LD_INT 17
1121: PUSH
1122: LD_INT 8
1124: PUSH
1125: LD_INT 20
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 22
1133: PUSH
1134: LD_INT 72
1136: PUSH
1137: LD_INT 26
1139: PUSH
1140: LD_INT 69
1142: PUSH
1143: LD_INT 39
1145: PUSH
1146: LD_INT 40
1148: PUSH
1149: LD_INT 41
1151: PUSH
1152: LD_INT 42
1154: PUSH
1155: LD_INT 43
1157: PUSH
1158: LD_INT 48
1160: PUSH
1161: LD_INT 49
1163: PUSH
1164: LD_INT 50
1166: PUSH
1167: LD_INT 51
1169: PUSH
1170: LD_INT 52
1172: PUSH
1173: LD_INT 53
1175: PUSH
1176: LD_INT 54
1178: PUSH
1179: LD_INT 55
1181: PUSH
1182: LD_INT 56
1184: PUSH
1185: LD_INT 60
1187: PUSH
1188: LD_INT 61
1190: PUSH
1191: LD_INT 62
1193: PUSH
1194: LD_INT 66
1196: PUSH
1197: LD_INT 67
1199: PUSH
1200: LD_INT 68
1202: PUSH
1203: LD_INT 81
1205: PUSH
1206: LD_INT 82
1208: PUSH
1209: LD_INT 83
1211: PUSH
1212: LD_INT 84
1214: PUSH
1215: LD_INT 85
1217: PUSH
1218: LD_INT 87
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: ST_TO_ADDR
1276: GO 1509
1278: LD_INT 3
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1508
1286: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1287: LD_ADDR_VAR 0 4
1291: PUSH
1292: LD_INT 46
1294: PUSH
1295: LD_INT 47
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: LD_INT 2
1303: PUSH
1304: LD_INT 82
1306: PUSH
1307: LD_INT 83
1309: PUSH
1310: LD_INT 84
1312: PUSH
1313: LD_INT 85
1315: PUSH
1316: LD_INT 86
1318: PUSH
1319: LD_INT 11
1321: PUSH
1322: LD_INT 9
1324: PUSH
1325: LD_INT 20
1327: PUSH
1328: LD_INT 19
1330: PUSH
1331: LD_INT 21
1333: PUSH
1334: LD_INT 24
1336: PUSH
1337: LD_INT 22
1339: PUSH
1340: LD_INT 25
1342: PUSH
1343: LD_INT 28
1345: PUSH
1346: LD_INT 29
1348: PUSH
1349: LD_INT 30
1351: PUSH
1352: LD_INT 31
1354: PUSH
1355: LD_INT 37
1357: PUSH
1358: LD_INT 38
1360: PUSH
1361: LD_INT 32
1363: PUSH
1364: LD_INT 27
1366: PUSH
1367: LD_INT 33
1369: PUSH
1370: LD_INT 69
1372: PUSH
1373: LD_INT 39
1375: PUSH
1376: LD_INT 34
1378: PUSH
1379: LD_INT 40
1381: PUSH
1382: LD_INT 71
1384: PUSH
1385: LD_INT 23
1387: PUSH
1388: LD_INT 44
1390: PUSH
1391: LD_INT 48
1393: PUSH
1394: LD_INT 49
1396: PUSH
1397: LD_INT 50
1399: PUSH
1400: LD_INT 51
1402: PUSH
1403: LD_INT 52
1405: PUSH
1406: LD_INT 53
1408: PUSH
1409: LD_INT 54
1411: PUSH
1412: LD_INT 55
1414: PUSH
1415: LD_INT 56
1417: PUSH
1418: LD_INT 57
1420: PUSH
1421: LD_INT 58
1423: PUSH
1424: LD_INT 59
1426: PUSH
1427: LD_INT 63
1429: PUSH
1430: LD_INT 64
1432: PUSH
1433: LD_INT 65
1435: PUSH
1436: LD_INT 82
1438: PUSH
1439: LD_INT 83
1441: PUSH
1442: LD_INT 84
1444: PUSH
1445: LD_INT 85
1447: PUSH
1448: LD_INT 86
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
1506: GO 1509
1508: POP
// if state > - 1 and state < 3 then
1509: LD_VAR 0 3
1513: PUSH
1514: LD_INT 1
1516: NEG
1517: GREATER
1518: PUSH
1519: LD_VAR 0 3
1523: PUSH
1524: LD_INT 3
1526: LESS
1527: AND
1528: IFFALSE 1585
// for i in result do
1530: LD_ADDR_VAR 0 5
1534: PUSH
1535: LD_VAR 0 4
1539: PUSH
1540: FOR_IN
1541: IFFALSE 1583
// if GetTech ( i , side ) <> state then
1543: LD_VAR 0 5
1547: PPUSH
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 321
1557: PUSH
1558: LD_VAR 0 3
1562: NONEQUAL
1563: IFFALSE 1581
// result := result diff i ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_VAR 0 4
1574: PUSH
1575: LD_VAR 0 5
1579: DIFF
1580: ST_TO_ADDR
1581: GO 1540
1583: POP
1584: POP
// end ;
1585: LD_VAR 0 4
1589: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1590: LD_INT 0
1592: PPUSH
1593: PPUSH
// InitUc ;
1594: CALL_OW 18
// InitHc ;
1598: CALL_OW 19
// uc_side := 0 ;
1602: LD_ADDR_OWVAR 20
1606: PUSH
1607: LD_INT 0
1609: ST_TO_ADDR
// uc_nation := 0 ;
1610: LD_ADDR_OWVAR 21
1614: PUSH
1615: LD_INT 0
1617: ST_TO_ADDR
// for i = 1 to amount do
1618: LD_ADDR_VAR 0 4
1622: PUSH
1623: DOUBLE
1624: LD_INT 1
1626: DEC
1627: ST_TO_ADDR
1628: LD_VAR 0 2
1632: PUSH
1633: FOR_TO
1634: IFFALSE 1716
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1636: LD_ADDR_OWVAR 29
1640: PUSH
1641: LD_INT 9
1643: PPUSH
1644: LD_INT 12
1646: PPUSH
1647: CALL_OW 12
1651: PUSH
1652: LD_INT 9
1654: PPUSH
1655: LD_INT 12
1657: PPUSH
1658: CALL_OW 12
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1667: LD_ADDR_OWVAR 35
1671: PUSH
1672: LD_INT 1
1674: NEG
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: CALL_OW 12
1683: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1684: LD_INT 0
1686: PPUSH
1687: LD_INT 12
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1697: CALL_OW 44
1701: PPUSH
1702: LD_VAR 0 1
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL_OW 49
// end ;
1714: GO 1633
1716: POP
1717: POP
// InitHc ;
1718: CALL_OW 19
// end ;
1722: LD_VAR 0 3
1726: RET
// export function PrepareNature ; var i ; begin
1727: LD_INT 0
1729: PPUSH
1730: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1731: LD_INT 18
1733: PPUSH
1734: LD_INT 5
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 3
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_OWVAR 67
1752: ARRAY
1753: PPUSH
1754: CALL 1590 0 2
// for i := 1 to 3 do
1758: LD_ADDR_VAR 0 2
1762: PUSH
1763: DOUBLE
1764: LD_INT 1
1766: DEC
1767: ST_TO_ADDR
1768: LD_INT 3
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1807
// begin hc_class := 21 ;
1774: LD_ADDR_OWVAR 28
1778: PUSH
1779: LD_INT 21
1781: ST_TO_ADDR
// hc_gallery :=  ;
1782: LD_ADDR_OWVAR 33
1786: PUSH
1787: LD_STRING 
1789: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1790: CALL_OW 44
1794: PPUSH
1795: LD_INT 18
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 49
// end ;
1805: GO 1771
1807: POP
1808: POP
// for i := 1 to 2 do
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 2
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1858
// begin hc_class := 18 ;
1825: LD_ADDR_OWVAR 28
1829: PUSH
1830: LD_INT 18
1832: ST_TO_ADDR
// hc_gallery :=  ;
1833: LD_ADDR_OWVAR 33
1837: PUSH
1838: LD_STRING 
1840: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1841: CALL_OW 44
1845: PPUSH
1846: LD_INT 18
1848: PPUSH
1849: LD_INT 0
1851: PPUSH
1852: CALL_OW 49
// end ;
1856: GO 1822
1858: POP
1859: POP
// for i := 1 to 2 do
1860: LD_ADDR_VAR 0 2
1864: PUSH
1865: DOUBLE
1866: LD_INT 1
1868: DEC
1869: ST_TO_ADDR
1870: LD_INT 2
1872: PUSH
1873: FOR_TO
1874: IFFALSE 1909
// begin hc_class := 13 ;
1876: LD_ADDR_OWVAR 28
1880: PUSH
1881: LD_INT 13
1883: ST_TO_ADDR
// hc_gallery :=  ;
1884: LD_ADDR_OWVAR 33
1888: PUSH
1889: LD_STRING 
1891: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1892: CALL_OW 44
1896: PPUSH
1897: LD_INT 18
1899: PPUSH
1900: LD_INT 0
1902: PPUSH
1903: CALL_OW 49
// end ;
1907: GO 1873
1909: POP
1910: POP
// end ; end_of_file
1911: LD_VAR 0 1
1915: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1916: LD_INT 0
1918: PPUSH
1919: PPUSH
// uc_side := 2 ;
1920: LD_ADDR_OWVAR 20
1924: PUSH
1925: LD_INT 2
1927: ST_TO_ADDR
// uc_nation := 2 ;
1928: LD_ADDR_OWVAR 21
1932: PUSH
1933: LD_INT 2
1935: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1936: LD_ADDR_EXP 21
1940: PUSH
1941: LD_STRING Heike
1943: PPUSH
1944: LD_EXP 1
1948: NOT
1949: PPUSH
1950: LD_EXP 2
1954: PPUSH
1955: CALL 233 0 3
1959: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1960: LD_ADDR_EXP 24
1964: PUSH
1965: LD_STRING Ibrahim
1967: PPUSH
1968: LD_EXP 1
1972: NOT
1973: PPUSH
1974: LD_EXP 2
1978: PPUSH
1979: CALL 233 0 3
1983: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1984: LD_ADDR_EXP 22
1988: PUSH
1989: LD_STRING Givi
1991: PPUSH
1992: LD_EXP 1
1996: NOT
1997: PPUSH
1998: LD_EXP 2
2002: PPUSH
2003: CALL 233 0 3
2007: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2008: LD_ADDR_EXP 25
2012: PUSH
2013: LD_STRING Kamil
2015: PPUSH
2016: LD_EXP 1
2020: NOT
2021: PPUSH
2022: LD_EXP 2
2026: PPUSH
2027: CALL 233 0 3
2031: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2032: LD_ADDR_EXP 26
2036: PUSH
2037: LD_STRING Kaia
2039: PPUSH
2040: LD_EXP 1
2044: NOT
2045: PPUSH
2046: LD_EXP 2
2050: PPUSH
2051: CALL 233 0 3
2055: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2056: LD_ADDR_EXP 27
2060: PUSH
2061: LD_STRING Sophia
2063: PPUSH
2064: LD_EXP 1
2068: NOT
2069: PPUSH
2070: LD_EXP 2
2074: PPUSH
2075: CALL 233 0 3
2079: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2080: LD_ADDR_EXP 28
2084: PUSH
2085: LD_STRING Markov
2087: PPUSH
2088: LD_EXP 1
2092: NOT
2093: PPUSH
2094: LD_EXP 2
2098: PPUSH
2099: CALL 233 0 3
2103: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2104: LD_ADDR_EXP 31
2108: PUSH
2109: LD_STRING Aviradze
2111: PPUSH
2112: LD_EXP 1
2116: NOT
2117: PPUSH
2118: LD_EXP 2
2122: PPUSH
2123: CALL 233 0 3
2127: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2128: LD_ADDR_EXP 34
2132: PUSH
2133: EMPTY
2134: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2135: LD_ADDR_EXP 32
2139: PUSH
2140: LD_STRING 03_others
2142: PPUSH
2143: CALL_OW 31
2147: ST_TO_ADDR
// uc_side := 5 ;
2148: LD_ADDR_OWVAR 20
2152: PUSH
2153: LD_INT 5
2155: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2156: LD_ADDR_EXP 30
2160: PUSH
2161: LD_STRING Kurt
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: LD_STRING 
2169: PPUSH
2170: CALL 233 0 3
2174: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2175: LD_ADDR_EXP 23
2179: PUSH
2180: LD_STRING Mike
2182: PPUSH
2183: LD_EXP 1
2187: NOT
2188: PPUSH
2189: LD_EXP 2
2193: PPUSH
2194: CALL 233 0 3
2198: ST_TO_ADDR
// if Mike then
2199: LD_EXP 23
2203: IFFALSE 2226
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2205: LD_EXP 23
2209: PPUSH
2210: LD_INT 142
2212: PPUSH
2213: LD_INT 63
2215: PPUSH
2216: LD_INT 2
2218: PPUSH
2219: LD_INT 0
2221: PPUSH
2222: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2226: LD_EXP 30
2230: PPUSH
2231: LD_INT 142
2233: PPUSH
2234: LD_INT 63
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2247: LD_EXP 30
2251: PUSH
2252: LD_EXP 23
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PPUSH
2261: CALL_OW 140
// end ;
2265: LD_VAR 0 1
2269: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2270: LD_INT 0
2272: PPUSH
2273: PPUSH
2274: PPUSH
2275: PPUSH
// uc_side := 5 ;
2276: LD_ADDR_OWVAR 20
2280: PUSH
2281: LD_INT 5
2283: ST_TO_ADDR
// uc_nation := 2 ;
2284: LD_ADDR_OWVAR 21
2288: PUSH
2289: LD_INT 2
2291: ST_TO_ADDR
// InitHc ;
2292: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2296: LD_ADDR_EXP 29
2300: PUSH
2301: LD_STRING Omar
2303: PPUSH
2304: LD_INT 0
2306: PPUSH
2307: LD_STRING 
2309: PPUSH
2310: CALL 233 0 3
2314: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2315: LD_EXP 29
2319: PPUSH
2320: LD_INT 284
2322: PPUSH
2323: LD_INT 163
2325: PPUSH
2326: LD_INT 0
2328: PPUSH
2329: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2333: LD_EXP 29
2337: PPUSH
2338: LD_INT 256
2340: PPUSH
2341: LD_INT 129
2343: PPUSH
2344: CALL_OW 111
// wait ( 0 0$2 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// omarSquad := [ ] ;
2355: LD_ADDR_EXP 33
2359: PUSH
2360: EMPTY
2361: ST_TO_ADDR
// for i := 1 to 5 do
2362: LD_ADDR_VAR 0 2
2366: PUSH
2367: DOUBLE
2368: LD_INT 1
2370: DEC
2371: ST_TO_ADDR
2372: LD_INT 5
2374: PUSH
2375: FOR_TO
2376: IFFALSE 2582
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2378: LD_INT 5
2380: PPUSH
2381: LD_INT 2
2383: PPUSH
2384: LD_INT 13
2386: PUSH
2387: LD_INT 14
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_VAR 0 2
2398: PUSH
2399: LD_INT 2
2401: MOD
2402: PUSH
2403: LD_INT 1
2405: PLUS
2406: ARRAY
2407: PPUSH
2408: LD_INT 1
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: LD_INT 25
2416: PUSH
2417: LD_INT 27
2419: PUSH
2420: LD_INT 26
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_VAR 0 2
2432: PUSH
2433: LD_INT 3
2435: MOD
2436: PUSH
2437: LD_INT 1
2439: PLUS
2440: ARRAY
2441: PPUSH
2442: LD_INT 100
2444: PPUSH
2445: CALL 296 0 7
// veh := CreateVehicle ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: CALL_OW 45
2458: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2459: LD_VAR 0 4
2463: PPUSH
2464: LD_INT 5
2466: PPUSH
2467: CALL_OW 233
// omarSquad := omarSquad union veh ;
2471: LD_ADDR_EXP 33
2475: PUSH
2476: LD_EXP 33
2480: PUSH
2481: LD_VAR 0 4
2485: UNION
2486: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2487: LD_VAR 0 4
2491: PPUSH
2492: LD_INT 284
2494: PPUSH
2495: LD_INT 163
2497: PPUSH
2498: LD_INT 0
2500: PPUSH
2501: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2505: LD_INT 0
2507: PPUSH
2508: LD_INT 3
2510: PPUSH
2511: LD_INT 3
2513: PPUSH
2514: CALL_OW 380
// un := CreateHuman ;
2518: LD_ADDR_VAR 0 3
2522: PUSH
2523: CALL_OW 44
2527: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2528: LD_ADDR_EXP 33
2532: PUSH
2533: LD_EXP 33
2537: PUSH
2538: LD_VAR 0 3
2542: UNION
2543: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2544: LD_VAR 0 3
2548: PPUSH
2549: LD_VAR 0 4
2553: PPUSH
2554: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2558: LD_VAR 0 3
2562: PPUSH
2563: LD_INT 271
2565: PPUSH
2566: LD_INT 144
2568: PPUSH
2569: CALL_OW 111
// wait ( 0 0$2 ) ;
2573: LD_INT 70
2575: PPUSH
2576: CALL_OW 67
// end ;
2580: GO 2375
2582: POP
2583: POP
// for i := 1 to 3 do
2584: LD_ADDR_VAR 0 2
2588: PUSH
2589: DOUBLE
2590: LD_INT 1
2592: DEC
2593: ST_TO_ADDR
2594: LD_INT 3
2596: PUSH
2597: FOR_TO
2598: IFFALSE 2681
// begin PrepareHuman ( false , 1 , 3 ) ;
2600: LD_INT 0
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: LD_INT 3
2608: PPUSH
2609: CALL_OW 380
// un := CreateHuman ;
2613: LD_ADDR_VAR 0 3
2617: PUSH
2618: CALL_OW 44
2622: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2623: LD_ADDR_EXP 33
2627: PUSH
2628: LD_EXP 33
2632: PUSH
2633: LD_VAR 0 3
2637: UNION
2638: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 284
2646: PPUSH
2647: LD_INT 163
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_INT 257
2664: PPUSH
2665: LD_INT 138
2667: PPUSH
2668: CALL_OW 111
// wait ( 0 0$1 ) ;
2672: LD_INT 35
2674: PPUSH
2675: CALL_OW 67
// end ;
2679: GO 2597
2681: POP
2682: POP
// for i := 1 to 6 do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: DOUBLE
2689: LD_INT 1
2691: DEC
2692: ST_TO_ADDR
2693: LD_INT 6
2695: PUSH
2696: FOR_TO
2697: IFFALSE 2830
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2699: LD_INT 0
2701: PPUSH
2702: LD_INT 1
2704: PUSH
2705: LD_INT 1
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: PUSH
2716: LD_VAR 0 2
2720: PUSH
2721: LD_INT 3
2723: MOD
2724: PUSH
2725: LD_INT 1
2727: PLUS
2728: ARRAY
2729: PPUSH
2730: LD_INT 3
2732: PPUSH
2733: CALL_OW 380
// un := CreateHuman ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: CALL_OW 44
2746: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2747: LD_ADDR_EXP 33
2751: PUSH
2752: LD_EXP 33
2756: PUSH
2757: LD_VAR 0 3
2761: UNION
2762: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2763: LD_VAR 0 3
2767: PPUSH
2768: LD_INT 225
2770: PPUSH
2771: LD_INT 163
2773: PPUSH
2774: LD_INT 0
2776: PPUSH
2777: CALL_OW 48
// if i = 1 then
2781: LD_VAR 0 2
2785: PUSH
2786: LD_INT 1
2788: EQUAL
2789: IFFALSE 2806
// SetAttr ( un , attr_speed , 12 ) ;
2791: LD_VAR 0 3
2795: PPUSH
2796: LD_INT 2
2798: PPUSH
2799: LD_INT 12
2801: PPUSH
2802: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2806: LD_VAR 0 3
2810: PPUSH
2811: LD_INT 222
2813: PPUSH
2814: LD_INT 157
2816: PPUSH
2817: CALL_OW 111
// wait ( 0 0$1 ) ;
2821: LD_INT 35
2823: PPUSH
2824: CALL_OW 67
// end ;
2828: GO 2696
2830: POP
2831: POP
// end ; end_of_file
2832: LD_VAR 0 1
2836: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2837: LD_INT 0
2839: PPUSH
2840: PPUSH
2841: PPUSH
2842: PPUSH
2843: PPUSH
2844: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
2845: LD_ADDR_EXP 45
2849: PUSH
2850: LD_INT 22
2852: PUSH
2853: LD_INT 3
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 30
2862: PUSH
2863: LD_INT 7
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PPUSH
2874: CALL_OW 69
2878: PUSH
2879: LD_INT 1
2881: ARRAY
2882: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2883: LD_ADDR_VAR 0 2
2887: PUSH
2888: LD_INT 21
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: LD_INT 23
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PPUSH
2912: CALL_OW 69
2916: PUSH
2917: FOR_IN
2918: IFFALSE 2934
// SetBLevel ( i , 5 ) ;
2920: LD_VAR 0 2
2924: PPUSH
2925: LD_INT 5
2927: PPUSH
2928: CALL_OW 241
2932: GO 2917
2934: POP
2935: POP
// SetBName ( kirov , kirov ) ;
2936: LD_INT 71
2938: PPUSH
2939: LD_STRING kirov
2941: PPUSH
2942: CALL_OW 500
// SetBName ( beria , beria ) ;
2946: LD_INT 106
2948: PPUSH
2949: LD_STRING beria
2951: PPUSH
2952: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2956: LD_INT 112
2958: PPUSH
2959: LD_STRING kagan
2961: PPUSH
2962: CALL_OW 500
// uc_side := 6 ;
2966: LD_ADDR_OWVAR 20
2970: PUSH
2971: LD_INT 6
2973: ST_TO_ADDR
// uc_nation := 3 ;
2974: LD_ADDR_OWVAR 21
2978: PUSH
2979: LD_INT 3
2981: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_INT 22
2989: PUSH
2990: LD_INT 6
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 30
2999: PUSH
3000: LD_INT 5
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PPUSH
3011: CALL_OW 69
3015: PUSH
3016: LD_INT 1
3018: ARRAY
3019: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3020: LD_ADDR_VAR 0 4
3024: PUSH
3025: LD_INT 22
3027: PUSH
3028: LD_INT 6
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 30
3037: PUSH
3038: LD_INT 4
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PPUSH
3049: CALL_OW 69
3053: PUSH
3054: LD_INT 1
3056: ARRAY
3057: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3058: LD_ADDR_EXP 39
3062: PUSH
3063: EMPTY
3064: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3065: LD_ADDR_EXP 40
3069: PUSH
3070: EMPTY
3071: ST_TO_ADDR
// russianPatrol := [ ] ;
3072: LD_ADDR_EXP 42
3076: PUSH
3077: EMPTY
3078: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3079: LD_ADDR_EXP 35
3083: PUSH
3084: LD_STRING Kurin
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: LD_STRING 
3092: PPUSH
3093: CALL 233 0 3
3097: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3098: LD_EXP 35
3102: PPUSH
3103: LD_INT 71
3105: PPUSH
3106: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3110: LD_ADDR_EXP 37
3114: PUSH
3115: LD_STRING Popov
3117: PPUSH
3118: LD_INT 0
3120: PPUSH
3121: LD_STRING 
3123: PPUSH
3124: CALL 233 0 3
3128: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3129: LD_EXP 37
3133: PPUSH
3134: LD_INT 71
3136: PPUSH
3137: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3141: LD_ADDR_EXP 36
3145: PUSH
3146: LD_STRING Grishko
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: LD_STRING 
3154: PPUSH
3155: CALL 233 0 3
3159: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3160: LD_EXP 36
3164: PPUSH
3165: LD_INT 207
3167: PPUSH
3168: LD_INT 106
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3178: LD_EXP 36
3182: PPUSH
3183: LD_INT 209
3185: PPUSH
3186: LD_INT 106
3188: PPUSH
3189: CALL_OW 118
// for i := 1 to 2 do
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: DOUBLE
3199: LD_INT 1
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 2
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3262
// begin PrepareHuman ( false , 2 , 2 ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: LD_INT 2
3217: PPUSH
3218: CALL_OW 380
// un := CreateHuman ;
3222: LD_ADDR_VAR 0 3
3226: PUSH
3227: CALL_OW 44
3231: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3232: LD_VAR 0 3
3236: PPUSH
3237: LD_INT 71
3239: PPUSH
3240: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3244: LD_ADDR_EXP 39
3248: PUSH
3249: LD_EXP 39
3253: PUSH
3254: LD_VAR 0 3
3258: UNION
3259: ST_TO_ADDR
// end ;
3260: GO 3206
3262: POP
3263: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3264: LD_ADDR_VAR 0 2
3268: PUSH
3269: DOUBLE
3270: LD_INT 1
3272: DEC
3273: ST_TO_ADDR
3274: LD_INT 5
3276: PUSH
3277: LD_INT 6
3279: PUSH
3280: LD_INT 6
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: PUSH
3288: LD_OWVAR 67
3292: ARRAY
3293: PUSH
3294: FOR_TO
3295: IFFALSE 3369
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3297: LD_INT 0
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: LD_INT 2
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: LIST
3316: PUSH
3317: LD_OWVAR 67
3321: ARRAY
3322: PPUSH
3323: CALL_OW 380
// un := CreateHuman ;
3327: LD_ADDR_VAR 0 3
3331: PUSH
3332: CALL_OW 44
3336: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3337: LD_VAR 0 3
3341: PPUSH
3342: LD_VAR 0 5
3346: PPUSH
3347: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3351: LD_ADDR_EXP 39
3355: PUSH
3356: LD_EXP 39
3360: PUSH
3361: LD_VAR 0 3
3365: UNION
3366: ST_TO_ADDR
// end ;
3367: GO 3294
3369: POP
3370: POP
// for i := 1 to 3 do
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: DOUBLE
3377: LD_INT 1
3379: DEC
3380: ST_TO_ADDR
3381: LD_INT 3
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3440
// begin PrepareHuman ( false , 3 , 3 ) ;
3387: LD_INT 0
3389: PPUSH
3390: LD_INT 3
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 380
// un := CreateHuman ;
3400: LD_ADDR_VAR 0 3
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 92
3417: PPUSH
3418: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3422: LD_ADDR_EXP 39
3426: PUSH
3427: LD_EXP 39
3431: PUSH
3432: LD_VAR 0 3
3436: UNION
3437: ST_TO_ADDR
// end ;
3438: GO 3384
3440: POP
3441: POP
// for i := 1 to 2 do
3442: LD_ADDR_VAR 0 2
3446: PUSH
3447: DOUBLE
3448: LD_INT 1
3450: DEC
3451: ST_TO_ADDR
3452: LD_INT 2
3454: PUSH
3455: FOR_TO
3456: IFFALSE 3511
// begin PrepareHuman ( false , 4 , 3 ) ;
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 3
3466: PPUSH
3467: CALL_OW 380
// un := CreateHuman ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: CALL_OW 44
3480: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3481: LD_VAR 0 3
3485: PPUSH
3486: LD_INT 83
3488: PPUSH
3489: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3493: LD_ADDR_EXP 39
3497: PUSH
3498: LD_EXP 39
3502: PUSH
3503: LD_VAR 0 3
3507: UNION
3508: ST_TO_ADDR
// end ;
3509: GO 3455
3511: POP
3512: POP
// for i := 1 to 5 do
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: DOUBLE
3519: LD_INT 1
3521: DEC
3522: ST_TO_ADDR
3523: LD_INT 5
3525: PUSH
3526: FOR_TO
3527: IFFALSE 3584
// begin PrepareHuman ( false , 1 , 3 ) ;
3529: LD_INT 0
3531: PPUSH
3532: LD_INT 1
3534: PPUSH
3535: LD_INT 3
3537: PPUSH
3538: CALL_OW 380
// un := CreateHuman ;
3542: LD_ADDR_VAR 0 3
3546: PUSH
3547: CALL_OW 44
3551: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3552: LD_VAR 0 3
3556: PPUSH
3557: LD_VAR 0 4
3561: PPUSH
3562: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3566: LD_ADDR_EXP 41
3570: PUSH
3571: LD_EXP 41
3575: PUSH
3576: LD_VAR 0 3
3580: UNION
3581: ST_TO_ADDR
// end ;
3582: GO 3526
3584: POP
3585: POP
// russianCargo := [ ] ;
3586: LD_ADDR_EXP 44
3590: PUSH
3591: EMPTY
3592: ST_TO_ADDR
// for i := 1 to 2 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 2
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3739
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3609: LD_INT 6
3611: PPUSH
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 21
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 1
3623: PPUSH
3624: LD_INT 51
3626: PPUSH
3627: LD_INT 100
3629: PPUSH
3630: CALL 296 0 7
// un := CreateVehicle ;
3634: LD_ADDR_VAR 0 3
3638: PUSH
3639: CALL_OW 45
3643: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3644: LD_ADDR_EXP 44
3648: PUSH
3649: LD_EXP 44
3653: PUSH
3654: LD_VAR 0 3
3658: UNION
3659: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3660: LD_VAR 0 3
3664: PPUSH
3665: LD_INT 2
3667: PPUSH
3668: LD_INT 100
3670: PPUSH
3671: CALL_OW 290
// SetDir ( un , 4 ) ;
3675: LD_VAR 0 3
3679: PPUSH
3680: LD_INT 4
3682: PPUSH
3683: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3687: LD_VAR 0 3
3691: PPUSH
3692: LD_INT 147
3694: PPUSH
3695: LD_INT 103
3697: PPUSH
3698: LD_INT 4
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3708: LD_INT 0
3710: PPUSH
3711: LD_INT 1
3713: PPUSH
3714: LD_OWVAR 67
3718: PPUSH
3719: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3723: CALL_OW 44
3727: PPUSH
3728: LD_VAR 0 3
3732: PPUSH
3733: CALL_OW 52
// end ;
3737: GO 3606
3739: POP
3740: POP
// uc_side := 3 ;
3741: LD_ADDR_OWVAR 20
3745: PUSH
3746: LD_INT 3
3748: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3749: LD_ADDR_EXP 38
3753: PUSH
3754: LD_STRING Burlak
3756: PPUSH
3757: LD_INT 0
3759: PPUSH
3760: LD_STRING 
3762: PPUSH
3763: CALL 233 0 3
3767: ST_TO_ADDR
// for i := 1 to 2 do
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 2
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3875
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3784: LD_INT 0
3786: PPUSH
3787: LD_INT 1
3789: PPUSH
3790: LD_OWVAR 67
3794: PUSH
3795: LD_INT 1
3797: PLUS
3798: PPUSH
3799: CALL_OW 380
// un := CreateHuman ;
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: CALL_OW 44
3812: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 30
3830: PUSH
3831: LD_INT 32
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PPUSH
3842: CALL_OW 69
3846: PUSH
3847: LD_VAR 0 2
3851: ARRAY
3852: PPUSH
3853: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PUSH
3867: LD_VAR 0 3
3871: UNION
3872: ST_TO_ADDR
// end ;
3873: GO 3781
3875: POP
3876: POP
// for i := 1 to 2 do
3877: LD_ADDR_VAR 0 2
3881: PUSH
3882: DOUBLE
3883: LD_INT 1
3885: DEC
3886: ST_TO_ADDR
3887: LD_INT 2
3889: PUSH
3890: FOR_TO
3891: IFFALSE 3982
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3893: LD_INT 0
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_OWVAR 67
3903: PUSH
3904: LD_INT 1
3906: PLUS
3907: PPUSH
3908: CALL_OW 380
// un := CreateHuman ;
3912: LD_ADDR_VAR 0 3
3916: PUSH
3917: CALL_OW 44
3921: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3922: LD_VAR 0 3
3926: PPUSH
3927: LD_INT 22
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_INT 30
3939: PUSH
3940: LD_INT 5
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PPUSH
3951: CALL_OW 69
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PPUSH
3960: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3964: LD_ADDR_EXP 40
3968: PUSH
3969: LD_EXP 40
3973: PUSH
3974: LD_VAR 0 3
3978: UNION
3979: ST_TO_ADDR
// end ;
3980: GO 3890
3982: POP
3983: POP
// for i := 1 to 2 do
3984: LD_ADDR_VAR 0 2
3988: PUSH
3989: DOUBLE
3990: LD_INT 1
3992: DEC
3993: ST_TO_ADDR
3994: LD_INT 2
3996: PUSH
3997: FOR_TO
3998: IFFALSE 4085
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4000: LD_INT 0
4002: PPUSH
4003: LD_INT 4
4005: PPUSH
4006: LD_OWVAR 67
4010: PPUSH
4011: CALL_OW 380
// un := CreateHuman ;
4015: LD_ADDR_VAR 0 3
4019: PUSH
4020: CALL_OW 44
4024: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_INT 22
4032: PUSH
4033: LD_INT 3
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 30
4042: PUSH
4043: LD_INT 7
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PPUSH
4054: CALL_OW 69
4058: PUSH
4059: LD_INT 1
4061: ARRAY
4062: PPUSH
4063: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4067: LD_ADDR_EXP 40
4071: PUSH
4072: LD_EXP 40
4076: PUSH
4077: LD_VAR 0 3
4081: UNION
4082: ST_TO_ADDR
// end ;
4083: GO 3997
4085: POP
4086: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4087: LD_INT 0
4089: PPUSH
4090: LD_INT 2
4092: PPUSH
4093: LD_OWVAR 67
4097: PPUSH
4098: CALL_OW 380
// un := CreateHuman ;
4102: LD_ADDR_VAR 0 3
4106: PUSH
4107: CALL_OW 44
4111: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4112: LD_VAR 0 3
4116: PPUSH
4117: LD_INT 106
4119: PPUSH
4120: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4124: LD_ADDR_EXP 40
4128: PUSH
4129: LD_EXP 40
4133: PUSH
4134: LD_VAR 0 3
4138: UNION
4139: ST_TO_ADDR
// for i := 1 to 3 do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 3
4152: PUSH
4153: FOR_TO
4154: IFFALSE 4276
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4156: LD_ADDR_VAR 0 6
4160: PUSH
4161: LD_INT 22
4163: PUSH
4164: LD_INT 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PUSH
4171: LD_INT 30
4173: PUSH
4174: LD_INT 31
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 69
4189: PUSH
4190: LD_VAR 0 2
4194: ARRAY
4195: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4196: LD_INT 0
4198: PPUSH
4199: LD_INT 1
4201: PPUSH
4202: LD_OWVAR 67
4206: PPUSH
4207: CALL_OW 380
// un := CreateHuman ;
4211: LD_ADDR_VAR 0 3
4215: PUSH
4216: CALL_OW 44
4220: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4221: LD_VAR 0 3
4225: PPUSH
4226: LD_VAR 0 6
4230: PPUSH
4231: CALL_OW 254
4235: PUSH
4236: LD_INT 3
4238: PLUS
4239: PPUSH
4240: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4244: LD_VAR 0 3
4248: PPUSH
4249: LD_VAR 0 6
4253: PPUSH
4254: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4258: LD_ADDR_EXP 40
4262: PUSH
4263: LD_EXP 40
4267: PUSH
4268: LD_VAR 0 3
4272: UNION
4273: ST_TO_ADDR
// end ;
4274: GO 4153
4276: POP
4277: POP
// russianOmicronAttackers := [ ] ;
4278: LD_ADDR_EXP 43
4282: PUSH
4283: EMPTY
4284: ST_TO_ADDR
// for i := 1 to 6 do
4285: LD_ADDR_VAR 0 2
4289: PUSH
4290: DOUBLE
4291: LD_INT 1
4293: DEC
4294: ST_TO_ADDR
4295: LD_INT 6
4297: PUSH
4298: FOR_TO
4299: IFFALSE 4523
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4301: LD_INT 3
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: LD_INT 21
4309: PUSH
4310: LD_INT 23
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_VAR 0 2
4321: PUSH
4322: LD_INT 2
4324: MOD
4325: PUSH
4326: LD_INT 1
4328: PLUS
4329: ARRAY
4330: PPUSH
4331: LD_INT 1
4333: PPUSH
4334: LD_INT 1
4336: PPUSH
4337: LD_INT 43
4339: PUSH
4340: LD_INT 44
4342: PUSH
4343: LD_INT 42
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: PUSH
4351: LD_VAR 0 2
4355: PUSH
4356: LD_INT 3
4358: MOD
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: ARRAY
4364: PPUSH
4365: LD_INT 100
4367: PPUSH
4368: CALL 296 0 7
// un := CreateVehicle ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: CALL_OW 45
4381: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4382: LD_VAR 0 3
4386: PPUSH
4387: LD_INT 0
4389: PUSH
4390: LD_INT 5
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 1
4399: PPUSH
4400: LD_INT 2
4402: PPUSH
4403: CALL_OW 12
4407: ARRAY
4408: PPUSH
4409: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4413: LD_ADDR_EXP 43
4417: PUSH
4418: LD_EXP 43
4422: PUSH
4423: LD_VAR 0 3
4427: UNION
4428: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_INT 127
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: LD_INT 7
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 50
// uc_side := 3 ;
4450: LD_ADDR_OWVAR 20
4454: PUSH
4455: LD_INT 3
4457: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4458: LD_INT 0
4460: PPUSH
4461: LD_INT 3
4463: PPUSH
4464: LD_INT 3
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4481: LD_ADDR_EXP 43
4485: PUSH
4486: LD_EXP 43
4490: PUSH
4491: LD_VAR 0 3
4495: UNION
4496: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4497: LD_VAR 0 3
4501: PPUSH
4502: LD_EXP 43
4506: PUSH
4507: LD_EXP 43
4511: PUSH
4512: LD_INT 1
4514: MINUS
4515: ARRAY
4516: PPUSH
4517: CALL_OW 52
// end ;
4521: GO 4298
4523: POP
4524: POP
// for i := 1 to 3 do
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: DOUBLE
4531: LD_INT 1
4533: DEC
4534: ST_TO_ADDR
4535: LD_INT 3
4537: PUSH
4538: FOR_TO
4539: IFFALSE 4605
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4541: LD_INT 0
4543: PPUSH
4544: LD_INT 1
4546: PPUSH
4547: LD_OWVAR 67
4551: PPUSH
4552: CALL_OW 380
// un := CreateHuman ;
4556: LD_ADDR_VAR 0 3
4560: PUSH
4561: CALL_OW 44
4565: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4566: LD_ADDR_EXP 43
4570: PUSH
4571: LD_EXP 43
4575: PUSH
4576: LD_VAR 0 3
4580: UNION
4581: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 91
4589: PPUSH
4590: LD_INT 60
4592: PPUSH
4593: LD_INT 3
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 50
// end ;
4603: GO 4538
4605: POP
4606: POP
// end ;
4607: LD_VAR 0 1
4611: RET
// every 0 0$3 do var i ;
4612: GO 4614
4614: DISABLE
4615: LD_INT 0
4617: PPUSH
// begin for i := 1 to 4 do
4618: LD_ADDR_VAR 0 1
4622: PUSH
4623: DOUBLE
4624: LD_INT 1
4626: DEC
4627: ST_TO_ADDR
4628: LD_INT 4
4630: PUSH
4631: FOR_TO
4632: IFFALSE 4651
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4634: LD_EXP 41
4638: PUSH
4639: LD_VAR 0 1
4643: ARRAY
4644: PPUSH
4645: CALL_OW 122
4649: GO 4631
4651: POP
4652: POP
// wait ( 3 ) ;
4653: LD_INT 3
4655: PPUSH
4656: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4660: LD_EXP 41
4664: PUSH
4665: LD_INT 1
4667: ARRAY
4668: PPUSH
4669: LD_INT 22
4671: PUSH
4672: LD_INT 6
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 31
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PPUSH
4693: CALL_OW 69
4697: PPUSH
4698: LD_EXP 41
4702: PUSH
4703: LD_INT 1
4705: ARRAY
4706: PPUSH
4707: CALL_OW 74
4711: PPUSH
4712: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4716: LD_EXP 41
4720: PUSH
4721: LD_INT 2
4723: ARRAY
4724: PPUSH
4725: LD_INT 211
4727: PPUSH
4728: LD_INT 107
4730: PPUSH
4731: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4735: LD_EXP 41
4739: PUSH
4740: LD_INT 2
4742: ARRAY
4743: PPUSH
4744: LD_INT 209
4746: PPUSH
4747: LD_INT 106
4749: PPUSH
4750: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4754: LD_EXP 41
4758: PUSH
4759: LD_INT 3
4761: ARRAY
4762: PPUSH
4763: LD_INT 209
4765: PPUSH
4766: LD_INT 103
4768: PPUSH
4769: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4773: LD_EXP 41
4777: PUSH
4778: LD_INT 3
4780: ARRAY
4781: PPUSH
4782: LD_INT 209
4784: PPUSH
4785: LD_INT 106
4787: PPUSH
4788: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4792: LD_EXP 41
4796: PUSH
4797: LD_INT 4
4799: ARRAY
4800: PPUSH
4801: LD_INT 227
4803: PPUSH
4804: LD_INT 117
4806: PPUSH
4807: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4811: LD_EXP 41
4815: PUSH
4816: LD_INT 4
4818: ARRAY
4819: PPUSH
4820: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4824: LD_INT 700
4826: PPUSH
4827: CALL_OW 67
// for i := 3 downto 2 do
4831: LD_ADDR_VAR 0 1
4835: PUSH
4836: DOUBLE
4837: LD_INT 3
4839: INC
4840: ST_TO_ADDR
4841: LD_INT 2
4843: PUSH
4844: FOR_DOWNTO
4845: IFFALSE 5012
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4847: LD_EXP 41
4851: PUSH
4852: LD_VAR 0 1
4856: ARRAY
4857: PPUSH
4858: LD_INT 200
4860: PPUSH
4861: LD_INT 91
4863: PPUSH
4864: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4868: LD_EXP 41
4872: PUSH
4873: LD_VAR 0 1
4877: ARRAY
4878: PPUSH
4879: LD_INT 210
4881: PPUSH
4882: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4886: LD_EXP 41
4890: PUSH
4891: LD_VAR 0 1
4895: ARRAY
4896: PPUSH
4897: LD_INT 224
4899: PPUSH
4900: LD_INT 93
4902: PPUSH
4903: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4907: LD_EXP 41
4911: PUSH
4912: LD_VAR 0 1
4916: ARRAY
4917: PPUSH
4918: LD_INT 210
4920: PPUSH
4921: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4925: LD_EXP 41
4929: PUSH
4930: LD_VAR 0 1
4934: ARRAY
4935: PPUSH
4936: LD_INT 239
4938: PPUSH
4939: LD_INT 123
4941: PPUSH
4942: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4946: LD_EXP 41
4950: PUSH
4951: LD_VAR 0 1
4955: ARRAY
4956: PPUSH
4957: LD_INT 210
4959: PPUSH
4960: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4964: LD_EXP 41
4968: PUSH
4969: LD_VAR 0 1
4973: ARRAY
4974: PPUSH
4975: LD_INT 212
4977: PPUSH
4978: LD_INT 105
4980: PPUSH
4981: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4985: LD_EXP 41
4989: PUSH
4990: LD_VAR 0 1
4994: ARRAY
4995: PPUSH
4996: LD_INT 700
4998: PPUSH
4999: CALL_OW 202
// wait ( 0 0$30 ) ;
5003: LD_INT 1050
5005: PPUSH
5006: CALL_OW 67
// end ;
5010: GO 4844
5012: POP
5013: POP
// until not activeGrishkoAI ;
5014: LD_EXP 10
5018: NOT
5019: IFFALSE 4824
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5021: LD_EXP 41
5025: PPUSH
5026: LD_INT 221
5028: PPUSH
5029: LD_INT 110
5031: PPUSH
5032: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5036: LD_EXP 41
5040: PPUSH
5041: LD_INT 228
5043: PPUSH
5044: LD_INT 115
5046: PPUSH
5047: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5051: LD_EXP 41
5055: PPUSH
5056: CALL_OW 200
// end ;
5060: PPOPN 1
5062: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5063: LD_EXP 12
5067: IFFALSE 5663
5069: GO 5071
5071: DISABLE
5072: LD_INT 0
5074: PPUSH
5075: PPUSH
5076: PPUSH
5077: PPUSH
// begin uc_side := 6 ;
5078: LD_ADDR_OWVAR 20
5082: PUSH
5083: LD_INT 6
5085: ST_TO_ADDR
// uc_nation := 3 ;
5086: LD_ADDR_OWVAR 21
5090: PUSH
5091: LD_INT 3
5093: ST_TO_ADDR
// for i := 1 to 3 do
5094: LD_ADDR_VAR 0 2
5098: PUSH
5099: DOUBLE
5100: LD_INT 1
5102: DEC
5103: ST_TO_ADDR
5104: LD_INT 3
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5217
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5110: LD_INT 0
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: LD_INT 2
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 4
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PUSH
5130: LD_OWVAR 67
5134: ARRAY
5135: PPUSH
5136: CALL_OW 380
// un := CreateHuman ;
5140: LD_ADDR_VAR 0 1
5144: PUSH
5145: CALL_OW 44
5149: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5150: LD_ADDR_EXP 42
5154: PUSH
5155: LD_EXP 42
5159: PUSH
5160: LD_VAR 0 1
5164: UNION
5165: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5166: LD_VAR 0 1
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5178: LD_VAR 0 1
5182: PPUSH
5183: LD_INT 11
5185: PPUSH
5186: LD_INT 0
5188: PPUSH
5189: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5193: LD_VAR 0 1
5197: PPUSH
5198: LD_INT 210
5200: PPUSH
5201: LD_INT 159
5203: PPUSH
5204: CALL_OW 111
// wait ( 0 0$2 ) ;
5208: LD_INT 70
5210: PPUSH
5211: CALL_OW 67
// end ;
5215: GO 5107
5217: POP
5218: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
5219: LD_ADDR_VAR 0 4
5223: PUSH
5224: LD_INT 172
5226: PUSH
5227: LD_INT 76
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 150
5236: PUSH
5237: LD_INT 38
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 148
5246: PUSH
5247: LD_INT 9
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 165
5256: PUSH
5257: LD_INT 38
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 191
5272: PUSH
5273: LD_INT 77
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 168
5282: PUSH
5283: LD_INT 42
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: LD_INT 166
5292: PUSH
5293: LD_INT 11
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 151
5302: PUSH
5303: LD_INT 12
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 221
5318: PUSH
5319: LD_INT 88
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 217
5328: PUSH
5329: LD_INT 64
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 208
5338: PUSH
5339: LD_INT 42
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5356: LD_INT 35
5358: PPUSH
5359: CALL_OW 67
// for i := 1 to patrol do
5363: LD_ADDR_VAR 0 2
5367: PUSH
5368: DOUBLE
5369: LD_INT 1
5371: DEC
5372: ST_TO_ADDR
5373: LD_VAR 0 4
5377: PUSH
5378: FOR_TO
5379: IFFALSE 5627
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5381: LD_EXP 42
5385: PUSH
5386: LD_VAR 0 2
5390: ARRAY
5391: PPUSH
5392: CALL_OW 256
5396: PUSH
5397: LD_INT 990
5399: LESS
5400: PUSH
5401: LD_EXP 42
5405: PUSH
5406: LD_VAR 0 2
5410: ARRAY
5411: PPUSH
5412: CALL_OW 110
5416: PUSH
5417: LD_INT 1
5419: EQUAL
5420: AND
5421: IFFALSE 5449
// begin spottedByPatrol := true ;
5423: LD_ADDR_EXP 7
5427: PUSH
5428: LD_INT 1
5430: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5431: LD_EXP 42
5435: PUSH
5436: LD_VAR 0 2
5440: ARRAY
5441: PPUSH
5442: LD_INT 2
5444: PPUSH
5445: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5449: LD_EXP 42
5453: PUSH
5454: LD_VAR 0 2
5458: ARRAY
5459: PPUSH
5460: CALL_OW 110
5464: PUSH
5465: LD_INT 2
5467: EQUAL
5468: IFFALSE 5525
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5470: LD_EXP 42
5474: PUSH
5475: LD_VAR 0 2
5479: ARRAY
5480: PPUSH
5481: LD_INT 166
5483: PPUSH
5484: LD_INT 101
5486: PPUSH
5487: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5491: LD_EXP 42
5495: PUSH
5496: LD_VAR 0 2
5500: ARRAY
5501: PPUSH
5502: LD_INT 71
5504: PPUSH
5505: CALL_OW 296
5509: PUSH
5510: LD_INT 10
5512: LESS
5513: IFFALSE 5523
// russianAlert := true ;
5515: LD_ADDR_EXP 9
5519: PUSH
5520: LD_INT 1
5522: ST_TO_ADDR
// continue ;
5523: GO 5378
// end ; if not HasTask ( russianPatrol [ i ] ) then
5525: LD_EXP 42
5529: PUSH
5530: LD_VAR 0 2
5534: ARRAY
5535: PPUSH
5536: CALL_OW 314
5540: NOT
5541: IFFALSE 5625
// for j in patrol [ i ] do
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: LD_VAR 0 4
5552: PUSH
5553: LD_VAR 0 2
5557: ARRAY
5558: PUSH
5559: FOR_IN
5560: IFFALSE 5623
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5562: LD_EXP 42
5566: PUSH
5567: LD_VAR 0 2
5571: ARRAY
5572: PPUSH
5573: LD_INT 35
5575: PPUSH
5576: LD_INT 175
5578: PPUSH
5579: CALL_OW 12
5583: PPUSH
5584: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5588: LD_EXP 42
5592: PUSH
5593: LD_VAR 0 2
5597: ARRAY
5598: PPUSH
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_VAR 0 3
5612: PUSH
5613: LD_INT 2
5615: ARRAY
5616: PPUSH
5617: CALL_OW 174
// end ;
5621: GO 5559
5623: POP
5624: POP
// end ;
5625: GO 5378
5627: POP
5628: POP
// until not russianPatrol or russianAlert ;
5629: LD_EXP 42
5633: NOT
5634: PUSH
5635: LD_EXP 9
5639: OR
5640: IFFALSE 5356
// if russianPatrol then
5642: LD_EXP 42
5646: IFFALSE 5663
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5648: LD_EXP 42
5652: PPUSH
5653: LD_INT 161
5655: PPUSH
5656: LD_INT 107
5658: PPUSH
5659: CALL_OW 114
// end ;
5663: PPOPN 4
5665: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5666: LD_EXP 6
5670: PUSH
5671: LD_EXP 13
5675: NOT
5676: AND
5677: IFFALSE 6118
5679: GO 5681
5681: DISABLE
5682: LD_INT 0
5684: PPUSH
5685: PPUSH
5686: PPUSH
5687: PPUSH
5688: PPUSH
// begin enable ;
5689: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5690: LD_ADDR_VAR 0 2
5694: PUSH
5695: LD_EXP 43
5699: PPUSH
5700: LD_INT 21
5702: PUSH
5703: LD_INT 2
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PPUSH
5710: CALL_OW 72
5714: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5715: LD_ADDR_VAR 0 4
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 4
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 69
5734: ST_TO_ADDR
// for i in filter do
5735: LD_ADDR_VAR 0 1
5739: PUSH
5740: LD_VAR 0 2
5744: PUSH
5745: FOR_IN
5746: IFFALSE 6116
// begin tmp := IsDrivenBy ( i ) ;
5748: LD_ADDR_VAR 0 3
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 311
5762: ST_TO_ADDR
// if not tmp then
5763: LD_VAR 0 3
5767: NOT
5768: IFFALSE 5772
// continue ;
5770: GO 5745
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5772: LD_VAR 0 1
5776: PPUSH
5777: CALL_OW 261
5781: PUSH
5782: LD_INT 90
5784: GREATER
5785: PUSH
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 110
5795: PUSH
5796: LD_INT 2
5798: EQUAL
5799: AND
5800: IFFALSE 5816
// SetTag ( i , 0 ) else
5802: LD_VAR 0 1
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: CALL_OW 109
5814: GO 5867
// if GetTag ( i ) = 2 then
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 110
5825: PUSH
5826: LD_INT 2
5828: EQUAL
5829: IFFALSE 5867
// begin x := rand ( 1 , 2 ) ;
5831: LD_ADDR_VAR 0 5
5835: PUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_INT 2
5841: PPUSH
5842: CALL_OW 12
5846: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5847: LD_VAR 0 1
5851: PPUSH
5852: LD_EXP 44
5856: PUSH
5857: LD_VAR 0 5
5861: ARRAY
5862: PPUSH
5863: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5867: LD_VAR 0 1
5871: PPUSH
5872: CALL_OW 256
5876: PUSH
5877: LD_INT 600
5879: GREATEREQUAL
5880: PUSH
5881: LD_VAR 0 1
5885: PPUSH
5886: CALL_OW 110
5890: NOT
5891: AND
5892: IFFALSE 5918
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5894: LD_VAR 0 1
5898: PPUSH
5899: LD_VAR 0 4
5903: PPUSH
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 74
5913: PPUSH
5914: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5918: LD_VAR 0 1
5922: PPUSH
5923: CALL_OW 256
5927: PUSH
5928: LD_INT 600
5930: LESS
5931: PUSH
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 110
5941: NOT
5942: AND
5943: IFFALSE 5972
// begin SetTag ( i , 1 ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_INT 1
5952: PPUSH
5953: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 62
5964: PPUSH
5965: LD_INT 22
5967: PPUSH
5968: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 110
5981: PUSH
5982: LD_INT 1
5984: EQUAL
5985: PUSH
5986: LD_VAR 0 1
5990: PPUSH
5991: LD_INT 62
5993: PPUSH
5994: LD_INT 22
5996: PPUSH
5997: CALL_OW 297
6001: PUSH
6002: LD_INT 6
6004: LESS
6005: AND
6006: PUSH
6007: LD_VAR 0 3
6011: AND
6012: IFFALSE 6114
// begin ComExitVehicle ( tmp ) ;
6014: LD_VAR 0 3
6018: PPUSH
6019: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6023: LD_VAR 0 3
6027: PPUSH
6028: LD_VAR 0 1
6032: PPUSH
6033: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6037: LD_INT 35
6039: PPUSH
6040: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 256
6053: PUSH
6054: LD_INT 1000
6056: EQUAL
6057: IFFALSE 6037
// ComEnterUnit ( tmp , i ) ;
6059: LD_VAR 0 3
6063: PPUSH
6064: LD_VAR 0 1
6068: PPUSH
6069: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6073: LD_VAR 0 1
6077: PPUSH
6078: CALL_OW 261
6082: PUSH
6083: LD_INT 90
6085: LESSEQUAL
6086: IFFALSE 6102
// SetTag ( i , 2 ) else
6088: LD_VAR 0 1
6092: PPUSH
6093: LD_INT 2
6095: PPUSH
6096: CALL_OW 109
6100: GO 6114
// SetTag ( i , 0 ) ;
6102: LD_VAR 0 1
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 109
// end ; end ;
6114: GO 5745
6116: POP
6117: POP
// end ;
6118: PPOPN 5
6120: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6121: LD_EXP 19
6125: IFFALSE 6327
6127: GO 6129
6129: DISABLE
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6134: LD_EXP 44
6138: PPUSH
6139: LD_INT 79
6141: PPUSH
6142: LD_INT 155
6144: PPUSH
6145: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6149: LD_EXP 44
6153: PPUSH
6154: LD_INT 16
6156: PPUSH
6157: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6161: LD_ADDR_VAR 0 2
6165: PUSH
6166: LD_EXP 43
6170: PPUSH
6171: LD_INT 50
6173: PUSH
6174: EMPTY
6175: LIST
6176: PPUSH
6177: CALL_OW 72
6181: ST_TO_ADDR
// for i in tmp do
6182: LD_ADDR_VAR 0 1
6186: PUSH
6187: LD_VAR 0 2
6191: PUSH
6192: FOR_IN
6193: IFFALSE 6227
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_INT 123
6202: PPUSH
6203: LD_INT 60
6205: PPUSH
6206: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6210: LD_VAR 0 1
6214: PPUSH
6215: LD_INT 153
6217: PPUSH
6218: LD_INT 103
6220: PPUSH
6221: CALL_OW 174
// end ;
6225: GO 6192
6227: POP
6228: POP
// repeat wait ( 0 0$1 ) ;
6229: LD_INT 35
6231: PPUSH
6232: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6236: LD_ADDR_VAR 0 2
6240: PUSH
6241: LD_EXP 43
6245: PPUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PPUSH
6252: CALL_OW 72
6256: ST_TO_ADDR
// for i in tmp do
6257: LD_ADDR_VAR 0 1
6261: PUSH
6262: LD_VAR 0 2
6266: PUSH
6267: FOR_IN
6268: IFFALSE 6318
// if not HasTask ( i ) then
6270: LD_VAR 0 1
6274: PPUSH
6275: CALL_OW 314
6279: NOT
6280: IFFALSE 6316
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6282: LD_VAR 0 1
6286: PPUSH
6287: LD_INT 81
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PPUSH
6302: LD_VAR 0 1
6306: PPUSH
6307: CALL_OW 74
6311: PPUSH
6312: CALL_OW 115
6316: GO 6267
6318: POP
6319: POP
6320: LD_VAR 0 2
6324: NOT
6325: IFFALSE 6229
// end ; end_of_file
6327: PPOPN 2
6329: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6330: LD_INT 0
6332: PPUSH
6333: PPUSH
6334: PPUSH
// SetBName ( omikron , omikron ) ;
6335: LD_INT 64
6337: PPUSH
6338: LD_STRING omikron
6340: PPUSH
6341: CALL_OW 500
// uc_side := 4 ;
6345: LD_ADDR_OWVAR 20
6349: PUSH
6350: LD_INT 4
6352: ST_TO_ADDR
// uc_nation := 1 ;
6353: LD_ADDR_OWVAR 21
6357: PUSH
6358: LD_INT 1
6360: ST_TO_ADDR
// omicronSquad := [ ] ;
6361: LD_ADDR_EXP 46
6365: PUSH
6366: EMPTY
6367: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6368: LD_ADDR_VAR 0 2
6372: PUSH
6373: LD_INT 22
6375: PUSH
6376: LD_INT 4
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PUSH
6383: LD_INT 2
6385: PUSH
6386: LD_INT 30
6388: PUSH
6389: LD_INT 32
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 30
6398: PUSH
6399: LD_INT 31
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 69
6419: PUSH
6420: FOR_IN
6421: IFFALSE 6478
// begin PrepareHuman ( false , 1 , 1 ) ;
6423: LD_INT 0
6425: PPUSH
6426: LD_INT 1
6428: PPUSH
6429: LD_INT 1
6431: PPUSH
6432: CALL_OW 380
// un := CreateHuman ;
6436: LD_ADDR_VAR 0 3
6440: PUSH
6441: CALL_OW 44
6445: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6446: LD_ADDR_EXP 46
6450: PUSH
6451: LD_EXP 46
6455: PUSH
6456: LD_VAR 0 3
6460: UNION
6461: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6462: LD_VAR 0 3
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: CALL_OW 52
// end ;
6476: GO 6420
6478: POP
6479: POP
// for i := 1 to 3 do
6480: LD_ADDR_VAR 0 2
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_INT 3
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6549
// begin PrepareHuman ( false , 2 , 2 ) ;
6496: LD_INT 0
6498: PPUSH
6499: LD_INT 2
6501: PPUSH
6502: LD_INT 2
6504: PPUSH
6505: CALL_OW 380
// un := CreateHuman ;
6509: LD_ADDR_VAR 0 3
6513: PUSH
6514: CALL_OW 44
6518: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6519: LD_ADDR_EXP 46
6523: PUSH
6524: LD_EXP 46
6528: PUSH
6529: LD_VAR 0 3
6533: UNION
6534: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6535: LD_VAR 0 3
6539: PPUSH
6540: LD_INT 64
6542: PPUSH
6543: CALL_OW 52
// end ;
6547: GO 6493
6549: POP
6550: POP
// for i := 1 to 2 do
6551: LD_ADDR_VAR 0 2
6555: PUSH
6556: DOUBLE
6557: LD_INT 1
6559: DEC
6560: ST_TO_ADDR
6561: LD_INT 2
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6704
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6567: LD_INT 4
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: LD_INT 2
6575: PPUSH
6576: LD_INT 2
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: LD_INT 3
6584: PPUSH
6585: LD_INT 100
6587: PPUSH
6588: CALL 296 0 7
// un := CreateVehicle ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: CALL_OW 45
6601: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6602: LD_ADDR_EXP 46
6606: PUSH
6607: LD_EXP 46
6611: PUSH
6612: LD_VAR 0 3
6616: UNION
6617: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6618: LD_VAR 0 3
6622: PPUSH
6623: LD_INT 28
6625: PPUSH
6626: LD_INT 37
6628: PPUSH
6629: LD_INT 6
6631: PPUSH
6632: LD_INT 0
6634: PPUSH
6635: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6639: LD_INT 0
6641: PPUSH
6642: LD_INT 3
6644: PPUSH
6645: LD_INT 2
6647: PPUSH
6648: CALL_OW 380
// un := CreateHuman ;
6652: LD_ADDR_VAR 0 3
6656: PUSH
6657: CALL_OW 44
6661: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6662: LD_ADDR_EXP 46
6666: PUSH
6667: LD_EXP 46
6671: PUSH
6672: LD_VAR 0 3
6676: UNION
6677: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6678: LD_VAR 0 3
6682: PPUSH
6683: LD_EXP 46
6687: PUSH
6688: LD_EXP 46
6692: PUSH
6693: LD_INT 1
6695: MINUS
6696: ARRAY
6697: PPUSH
6698: CALL_OW 52
// end ;
6702: GO 6564
6704: POP
6705: POP
// end ;
6706: LD_VAR 0 1
6710: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6711: LD_INT 0
6713: PPUSH
6714: PPUSH
6715: PPUSH
6716: PPUSH
// uc_side := 4 ;
6717: LD_ADDR_OWVAR 20
6721: PUSH
6722: LD_INT 4
6724: ST_TO_ADDR
// uc_nation := 1 ;
6725: LD_ADDR_OWVAR 21
6729: PUSH
6730: LD_INT 1
6732: ST_TO_ADDR
// tmp := [ ] ;
6733: LD_ADDR_VAR 0 4
6737: PUSH
6738: EMPTY
6739: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6740: LD_INT 4
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: LD_INT 2
6748: PPUSH
6749: LD_INT 1
6751: PPUSH
6752: LD_INT 1
6754: PPUSH
6755: LD_INT 4
6757: PPUSH
6758: LD_INT 77
6760: PPUSH
6761: CALL 296 0 7
// un := CreateVehicle ;
6765: LD_ADDR_VAR 0 3
6769: PUSH
6770: CALL_OW 45
6774: ST_TO_ADDR
// tmp := tmp union un ;
6775: LD_ADDR_VAR 0 4
6779: PUSH
6780: LD_VAR 0 4
6784: PUSH
6785: LD_VAR 0 3
6789: UNION
6790: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6791: LD_VAR 0 3
6795: PPUSH
6796: LD_INT 2
6798: PPUSH
6799: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6803: LD_VAR 0 3
6807: PPUSH
6808: LD_INT 106
6810: PPUSH
6811: LD_INT 3
6813: PPUSH
6814: LD_INT 0
6816: PPUSH
6817: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6821: LD_INT 0
6823: PPUSH
6824: LD_INT 3
6826: PPUSH
6827: LD_INT 2
6829: PPUSH
6830: CALL_OW 380
// un := CreateHuman ;
6834: LD_ADDR_VAR 0 3
6838: PUSH
6839: CALL_OW 44
6843: ST_TO_ADDR
// tmp := tmp union un ;
6844: LD_ADDR_VAR 0 4
6848: PUSH
6849: LD_VAR 0 4
6853: PUSH
6854: LD_VAR 0 3
6858: UNION
6859: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6860: LD_VAR 0 3
6864: PPUSH
6865: LD_VAR 0 4
6869: PUSH
6870: LD_VAR 0 4
6874: PUSH
6875: LD_INT 1
6877: MINUS
6878: ARRAY
6879: PPUSH
6880: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6884: LD_VAR 0 3
6888: PPUSH
6889: LD_INT 109
6891: PPUSH
6892: LD_INT 9
6894: PPUSH
6895: CALL_OW 111
// wait ( 0 0$1 ) ;
6899: LD_INT 35
6901: PPUSH
6902: CALL_OW 67
// for i := 1 to 2 do
6906: LD_ADDR_VAR 0 2
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_INT 2
6918: PUSH
6919: FOR_TO
6920: IFFALSE 6984
// begin PrepareHuman ( false , 1 , 2 ) ;
6922: LD_INT 0
6924: PPUSH
6925: LD_INT 1
6927: PPUSH
6928: LD_INT 2
6930: PPUSH
6931: CALL_OW 380
// un := CreateHuman ;
6935: LD_ADDR_VAR 0 3
6939: PUSH
6940: CALL_OW 44
6944: ST_TO_ADDR
// tmp := tmp union un ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 4
6954: PUSH
6955: LD_VAR 0 3
6959: UNION
6960: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6961: LD_VAR 0 3
6965: PPUSH
6966: LD_INT 105
6968: PPUSH
6969: LD_INT 2
6971: PPUSH
6972: LD_INT 2
6974: PPUSH
6975: LD_INT 0
6977: PPUSH
6978: CALL_OW 50
// end ;
6982: GO 6919
6984: POP
6985: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6986: LD_VAR 0 4
6990: PPUSH
6991: LD_INT 26
6993: PPUSH
6994: LD_INT 35
6996: PPUSH
6997: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7001: LD_INT 35
7003: PPUSH
7004: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7008: LD_VAR 0 4
7012: PPUSH
7013: LD_INT 50
7015: PUSH
7016: EMPTY
7017: LIST
7018: PPUSH
7019: CALL_OW 72
7023: NOT
7024: IFFALSE 7028
// exit ;
7026: GO 7155
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7028: LD_VAR 0 4
7032: PPUSH
7033: LD_INT 91
7035: PUSH
7036: LD_INT 64
7038: PUSH
7039: LD_INT 12
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PUSH
7052: LD_VAR 0 4
7056: EQUAL
7057: IFFALSE 7001
// omicronSquad := omicronSquad union tmp ;
7059: LD_ADDR_EXP 46
7063: PUSH
7064: LD_EXP 46
7068: PUSH
7069: LD_VAR 0 4
7073: UNION
7074: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7075: LD_ADDR_VAR 0 2
7079: PUSH
7080: LD_VAR 0 4
7084: PPUSH
7085: LD_INT 25
7087: PUSH
7088: LD_INT 1
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: PUSH
7100: FOR_IN
7101: IFFALSE 7153
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7103: LD_VAR 0 2
7107: PPUSH
7108: LD_INT 22
7110: PUSH
7111: LD_INT 4
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 30
7120: PUSH
7121: LD_INT 4
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PPUSH
7137: LD_VAR 0 2
7141: PPUSH
7142: CALL_OW 74
7146: PPUSH
7147: CALL_OW 120
7151: GO 7100
7153: POP
7154: POP
// end ;
7155: LD_VAR 0 1
7159: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7160: LD_EXP 13
7164: NOT
7165: IFFALSE 7736
7167: GO 7169
7169: DISABLE
7170: LD_INT 0
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
// begin enable ;
7176: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7177: LD_ADDR_VAR 0 2
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_INT 4
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: LD_INT 21
7194: PUSH
7195: LD_INT 3
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 3
7204: PUSH
7205: LD_INT 24
7207: PUSH
7208: LD_INT 1000
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: PPUSH
7224: CALL_OW 69
7228: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_EXP 46
7238: PPUSH
7239: LD_INT 25
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 72
7253: ST_TO_ADDR
// if filter and tmp then
7254: LD_VAR 0 2
7258: PUSH
7259: LD_VAR 0 3
7263: AND
7264: IFFALSE 7337
// begin for i in tmp do
7266: LD_ADDR_VAR 0 1
7270: PUSH
7271: LD_VAR 0 3
7275: PUSH
7276: FOR_IN
7277: IFFALSE 7333
// if IsInUnit ( i ) then
7279: LD_VAR 0 1
7283: PPUSH
7284: CALL_OW 310
7288: IFFALSE 7301
// ComExitBuilding ( i ) else
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 122
7299: GO 7331
// if not HasTask ( i ) then
7301: LD_VAR 0 1
7305: PPUSH
7306: CALL_OW 314
7310: NOT
7311: IFFALSE 7331
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7313: LD_VAR 0 1
7317: PPUSH
7318: LD_VAR 0 2
7322: PUSH
7323: LD_INT 1
7325: ARRAY
7326: PPUSH
7327: CALL_OW 130
7331: GO 7276
7333: POP
7334: POP
// end else
7335: GO 7408
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7337: LD_VAR 0 3
7341: PPUSH
7342: LD_INT 3
7344: PUSH
7345: LD_INT 54
7347: PUSH
7348: EMPTY
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 72
7359: IFFALSE 7408
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7361: LD_ADDR_VAR 0 1
7365: PUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: LD_INT 3
7373: PUSH
7374: LD_INT 54
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PPUSH
7384: CALL_OW 72
7388: PUSH
7389: FOR_IN
7390: IFFALSE 7406
// ComEnterUnit ( i , omikron ) ;
7392: LD_VAR 0 1
7396: PPUSH
7397: LD_INT 64
7399: PPUSH
7400: CALL_OW 120
7404: GO 7389
7406: POP
7407: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_EXP 46
7417: PPUSH
7418: LD_INT 21
7420: PUSH
7421: LD_INT 2
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PPUSH
7428: CALL_OW 72
7432: ST_TO_ADDR
// if not filter then
7433: LD_VAR 0 2
7437: NOT
7438: IFFALSE 7442
// exit ;
7440: GO 7736
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7442: LD_ADDR_VAR 0 4
7446: PUSH
7447: LD_INT 13
7449: PPUSH
7450: LD_INT 81
7452: PUSH
7453: LD_INT 4
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PPUSH
7460: CALL_OW 70
7464: ST_TO_ADDR
// if enemy then
7465: LD_VAR 0 4
7469: IFFALSE 7736
// begin for i in filter do
7471: LD_ADDR_VAR 0 1
7475: PUSH
7476: LD_VAR 0 2
7480: PUSH
7481: FOR_IN
7482: IFFALSE 7734
// begin tmp := IsDrivenBy ( i ) ;
7484: LD_ADDR_VAR 0 3
7488: PUSH
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 311
7498: ST_TO_ADDR
// if not tmp then
7499: LD_VAR 0 3
7503: NOT
7504: IFFALSE 7508
// continue ;
7506: GO 7481
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7508: LD_VAR 0 1
7512: PPUSH
7513: CALL_OW 256
7517: PUSH
7518: LD_INT 600
7520: GREATEREQUAL
7521: PUSH
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 110
7531: PUSH
7532: LD_INT 1
7534: NONEQUAL
7535: AND
7536: IFFALSE 7562
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7538: LD_VAR 0 1
7542: PPUSH
7543: LD_VAR 0 4
7547: PPUSH
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 74
7557: PPUSH
7558: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7562: LD_VAR 0 1
7566: PPUSH
7567: CALL_OW 256
7571: PUSH
7572: LD_INT 600
7574: LESS
7575: PUSH
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 110
7585: PUSH
7586: LD_INT 1
7588: NONEQUAL
7589: AND
7590: IFFALSE 7619
// begin SetTag ( i , 1 ) ;
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_INT 1
7599: PPUSH
7600: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7604: LD_VAR 0 1
7608: PPUSH
7609: LD_INT 27
7611: PPUSH
7612: LD_INT 35
7614: PPUSH
7615: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7619: LD_VAR 0 1
7623: PPUSH
7624: CALL_OW 110
7628: PUSH
7629: LD_INT 1
7631: EQUAL
7632: PUSH
7633: LD_VAR 0 1
7637: PPUSH
7638: LD_INT 27
7640: PPUSH
7641: LD_INT 35
7643: PPUSH
7644: CALL_OW 297
7648: PUSH
7649: LD_INT 6
7651: LESS
7652: AND
7653: PUSH
7654: LD_VAR 0 3
7658: AND
7659: IFFALSE 7732
// begin ComExitVehicle ( tmp ) ;
7661: LD_VAR 0 3
7665: PPUSH
7666: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7670: LD_VAR 0 3
7674: PPUSH
7675: LD_VAR 0 1
7679: PPUSH
7680: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7684: LD_INT 35
7686: PPUSH
7687: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7691: LD_VAR 0 1
7695: PPUSH
7696: CALL_OW 256
7700: PUSH
7701: LD_INT 1000
7703: EQUAL
7704: IFFALSE 7684
// ComEnterUnit ( tmp , i ) ;
7706: LD_VAR 0 3
7710: PPUSH
7711: LD_VAR 0 1
7715: PPUSH
7716: CALL_OW 120
// SetTag ( i , 0 ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: LD_INT 0
7727: PPUSH
7728: CALL_OW 109
// end ; end ;
7732: GO 7481
7734: POP
7735: POP
// end ; end ;
7736: PPOPN 4
7738: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7739: LD_EXP 13
7743: IFFALSE 7887
7745: GO 7747
7747: DISABLE
7748: LD_INT 0
7750: PPUSH
7751: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7752: LD_ADDR_VAR 0 2
7756: PUSH
7757: LD_EXP 46
7761: PPUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 1
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 50
7774: PUSH
7775: EMPTY
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 72
7786: ST_TO_ADDR
// if not tmp then
7787: LD_VAR 0 2
7791: NOT
7792: IFFALSE 7796
// exit ;
7794: GO 7887
// repeat wait ( 0 0$1 ) ;
7796: LD_INT 35
7798: PPUSH
7799: CALL_OW 67
// for i in tmp do
7803: LD_ADDR_VAR 0 1
7807: PUSH
7808: LD_VAR 0 2
7812: PUSH
7813: FOR_IN
7814: IFFALSE 7878
// begin ComExit ( i ) ;
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL 734 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7825: LD_VAR 0 1
7829: PPUSH
7830: LD_INT 14
7832: PPUSH
7833: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7837: LD_VAR 0 1
7841: PPUSH
7842: LD_INT 14
7844: PPUSH
7845: CALL_OW 308
7849: IFFALSE 7876
// begin tmp := tmp diff i ;
7851: LD_ADDR_VAR 0 2
7855: PUSH
7856: LD_VAR 0 2
7860: PUSH
7861: LD_VAR 0 1
7865: DIFF
7866: ST_TO_ADDR
// RemoveUnit ( i ) ;
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 64
// end ; end ;
7876: GO 7813
7878: POP
7879: POP
// until not tmp ;
7880: LD_VAR 0 2
7884: NOT
7885: IFFALSE 7796
// end ; end_of_file
7887: PPOPN 2
7889: END
// export function Action ; var i , un , veh , tmp ; begin
7890: LD_INT 0
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
// InGameOn ;
7897: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7901: LD_INT 179
7903: PPUSH
7904: LD_INT 5
7906: PPUSH
7907: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7911: LD_ADDR_VAR 0 4
7915: PUSH
7916: LD_INT 2
7918: PPUSH
7919: LD_INT 2
7921: PPUSH
7922: LD_INT 12
7924: PPUSH
7925: LD_INT 1
7927: PPUSH
7928: LD_INT 1
7930: PPUSH
7931: LD_INT 24
7933: PPUSH
7934: LD_INT 33
7936: PPUSH
7937: CALL 296 0 7
7941: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7942: LD_VAR 0 4
7946: PPUSH
7947: LD_INT 2
7949: PPUSH
7950: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7954: LD_VAR 0 4
7958: PPUSH
7959: LD_INT 178
7961: PPUSH
7962: LD_INT 2
7964: PPUSH
7965: LD_INT 0
7967: PPUSH
7968: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7972: LD_EXP 21
7976: PPUSH
7977: LD_VAR 0 4
7981: PPUSH
7982: CALL_OW 52
// if Kamil then
7986: LD_EXP 25
7990: IFFALSE 8025
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7992: LD_EXP 25
7996: PPUSH
7997: LD_INT 207
7999: PPUSH
8000: LD_INT 37
8002: PPUSH
8003: LD_INT 0
8005: PPUSH
8006: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8010: LD_EXP 25
8014: PPUSH
8015: LD_INT 211
8017: PPUSH
8018: LD_INT 38
8020: PPUSH
8021: CALL_OW 118
// end ; if Sophia then
8025: LD_EXP 27
8029: IFFALSE 8064
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8031: LD_EXP 27
8035: PPUSH
8036: LD_INT 209
8038: PPUSH
8039: LD_INT 40
8041: PPUSH
8042: LD_INT 0
8044: PPUSH
8045: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8049: LD_EXP 27
8053: PPUSH
8054: LD_INT 211
8056: PPUSH
8057: LD_INT 38
8059: PPUSH
8060: CALL_OW 118
// end ; if Givi then
8064: LD_EXP 22
8068: IFFALSE 8103
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8070: LD_EXP 22
8074: PPUSH
8075: LD_INT 201
8077: PPUSH
8078: LD_INT 34
8080: PPUSH
8081: LD_INT 0
8083: PPUSH
8084: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8088: LD_EXP 22
8092: PPUSH
8093: LD_INT 206
8095: PPUSH
8096: LD_INT 36
8098: PPUSH
8099: CALL_OW 118
// end ; if Markov then
8103: LD_EXP 28
8107: IFFALSE 8194
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8109: LD_ADDR_VAR 0 4
8113: PUSH
8114: LD_INT 2
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: LD_INT 13
8122: PPUSH
8123: LD_INT 1
8125: PPUSH
8126: LD_INT 1
8128: PPUSH
8129: LD_INT 25
8131: PPUSH
8132: LD_INT 80
8134: PUSH
8135: LD_INT 20
8137: PUSH
8138: LD_OWVAR 67
8142: MUL
8143: MINUS
8144: PPUSH
8145: CALL 296 0 7
8149: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8150: LD_VAR 0 4
8154: PPUSH
8155: LD_INT 2
8157: PPUSH
8158: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8162: LD_VAR 0 4
8166: PPUSH
8167: LD_INT 197
8169: PPUSH
8170: LD_INT 35
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8180: LD_EXP 28
8184: PPUSH
8185: LD_VAR 0 4
8189: PPUSH
8190: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8194: LD_ADDR_VAR 0 5
8198: PUSH
8199: LD_EXP 26
8203: PUSH
8204: LD_EXP 32
8208: UNION
8209: ST_TO_ADDR
// for i in tmp do
8210: LD_ADDR_VAR 0 2
8214: PUSH
8215: LD_VAR 0 5
8219: PUSH
8220: FOR_IN
8221: IFFALSE 8255
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 203
8230: PPUSH
8231: LD_INT 41
8233: PPUSH
8234: LD_INT 6
8236: PPUSH
8237: LD_INT 0
8239: PPUSH
8240: CALL_OW 50
// ComHold ( i ) ;
8244: LD_VAR 0 2
8248: PPUSH
8249: CALL_OW 140
// end ;
8253: GO 8220
8255: POP
8256: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8257: LD_INT 22
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 25
8269: PUSH
8270: LD_INT 2
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PPUSH
8281: CALL_OW 69
8285: NOT
8286: IFFALSE 8300
// SetClass ( Heike , 2 ) ;
8288: LD_EXP 21
8292: PPUSH
8293: LD_INT 2
8295: PPUSH
8296: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8300: LD_EXP 21
8304: PPUSH
8305: LD_INT 183
8307: PPUSH
8308: LD_INT 12
8310: PPUSH
8311: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8315: LD_EXP 21
8319: PPUSH
8320: LD_INT 188
8322: PPUSH
8323: LD_INT 20
8325: PPUSH
8326: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8330: LD_EXP 21
8334: PPUSH
8335: LD_INT 191
8337: PPUSH
8338: LD_INT 25
8340: PPUSH
8341: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8345: LD_EXP 21
8349: PPUSH
8350: LD_INT 203
8352: PPUSH
8353: LD_INT 29
8355: PPUSH
8356: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8360: LD_EXP 21
8364: PPUSH
8365: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8369: LD_INT 35
8371: PPUSH
8372: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8376: LD_EXP 21
8380: PPUSH
8381: CALL_OW 310
8385: NOT
8386: IFFALSE 8369
// CenterOnUnits ( Heike ) ;
8388: LD_EXP 21
8392: PPUSH
8393: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8397: LD_ADDR_VAR 0 5
8401: PUSH
8402: LD_INT 22
8404: PUSH
8405: LD_INT 2
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 1
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PPUSH
8426: CALL_OW 69
8430: PUSH
8431: LD_EXP 21
8435: PUSH
8436: LD_EXP 28
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: DIFF
8445: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8446: LD_VAR 0 5
8450: PPUSH
8451: LD_EXP 21
8455: PPUSH
8456: CALL_OW 119
// if Givi then
8460: LD_EXP 22
8464: IFFALSE 8482
// ComTurnUnit ( Heike , Givi ) else
8466: LD_EXP 21
8470: PPUSH
8471: LD_EXP 22
8475: PPUSH
8476: CALL_OW 119
8480: GO 8500
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8482: LD_EXP 21
8486: PPUSH
8487: LD_VAR 0 5
8491: PUSH
8492: LD_INT 1
8494: ARRAY
8495: PPUSH
8496: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8500: LD_EXP 21
8504: PPUSH
8505: LD_STRING DH-Start-1
8507: PPUSH
8508: CALL_OW 88
// if Givi then
8512: LD_EXP 22
8516: IFFALSE 8563
// begin Say ( Givi , DG-Start-2 ) ;
8518: LD_EXP 22
8522: PPUSH
8523: LD_STRING DG-Start-2
8525: PPUSH
8526: CALL_OW 88
// if not Mike then
8530: LD_EXP 23
8534: NOT
8535: IFFALSE 8561
// begin Say ( Givi , DG-Start-b-3 ) ;
8537: LD_EXP 22
8541: PPUSH
8542: LD_STRING DG-Start-b-3
8544: PPUSH
8545: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8549: LD_EXP 21
8553: PPUSH
8554: LD_STRING DH-Start-b-4
8556: PPUSH
8557: CALL_OW 88
// end ; end else
8561: GO 8628
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8563: LD_EXP 32
8567: PPUSH
8568: LD_INT 26
8570: PUSH
8571: LD_INT 1
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PPUSH
8578: CALL_OW 72
8582: PUSH
8583: LD_INT 1
8585: ARRAY
8586: PPUSH
8587: LD_STRING DArm-Start-a-2
8589: PPUSH
8590: CALL_OW 88
8594: NOT
8595: IFFALSE 8628
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8597: LD_EXP 32
8601: PPUSH
8602: LD_INT 26
8604: PUSH
8605: LD_INT 2
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 1
8619: ARRAY
8620: PPUSH
8621: LD_STRING DArf-Start-a-2
8623: PPUSH
8624: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8628: LD_EXP 21
8632: PPUSH
8633: LD_INT 211
8635: PPUSH
8636: LD_INT 38
8638: PPUSH
8639: CALL_OW 118
// wait ( 0 0$1 ) ;
8643: LD_INT 35
8645: PPUSH
8646: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8650: LD_EXP 21
8654: PPUSH
8655: LD_STRING DH-Start-3
8657: PPUSH
8658: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8662: LD_EXP 21
8666: PPUSH
8667: LD_STRING DH-Start-4
8669: PPUSH
8670: CALL_OW 88
// InGameOff ;
8674: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8678: LD_STRING Prepare
8680: PPUSH
8681: CALL_OW 337
// wait ( 0 0$10 ) ;
8685: LD_INT 350
8687: PPUSH
8688: CALL_OW 67
// if not Aviradze then
8692: LD_EXP 31
8696: NOT
8697: IFFALSE 8701
// exit ;
8699: GO 8897
// SetDir ( Aviradze , 4 ) ;
8701: LD_EXP 31
8705: PPUSH
8706: LD_INT 4
8708: PPUSH
8709: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8713: LD_EXP 31
8717: PPUSH
8718: LD_INT 225
8720: PPUSH
8721: LD_INT 33
8723: PPUSH
8724: LD_INT 0
8726: PPUSH
8727: CALL_OW 48
// for i := 1 to 2 do
8731: LD_ADDR_VAR 0 2
8735: PUSH
8736: DOUBLE
8737: LD_INT 1
8739: DEC
8740: ST_TO_ADDR
8741: LD_INT 2
8743: PUSH
8744: FOR_TO
8745: IFFALSE 8876
// begin uc_side := 2 ;
8747: LD_ADDR_OWVAR 20
8751: PUSH
8752: LD_INT 2
8754: ST_TO_ADDR
// uc_nation := 0 ;
8755: LD_ADDR_OWVAR 21
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8763: LD_INT 0
8765: PPUSH
8766: LD_INT 12
8768: PPUSH
8769: LD_INT 1
8771: PPUSH
8772: CALL_OW 380
// hc_gallery :=  ;
8776: LD_ADDR_OWVAR 33
8780: PUSH
8781: LD_STRING 
8783: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8784: LD_ADDR_OWVAR 26
8788: PUSH
8789: LD_STRING Artudito
8791: PUSH
8792: LD_STRING Textur
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_VAR 0 2
8803: ARRAY
8804: ST_TO_ADDR
// un := CreateHuman ;
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: CALL_OW 44
8814: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8815: LD_VAR 0 3
8819: PPUSH
8820: LD_INT 224
8822: PUSH
8823: LD_INT 226
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_VAR 0 2
8834: ARRAY
8835: PPUSH
8836: LD_INT 31
8838: PUSH
8839: LD_INT 35
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_VAR 0 2
8850: ARRAY
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8859: LD_VAR 0 3
8863: PPUSH
8864: LD_INT 215
8866: PPUSH
8867: LD_INT 36
8869: PPUSH
8870: CALL_OW 111
// end ;
8874: GO 8744
8876: POP
8877: POP
// InitHc ;
8878: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8882: LD_EXP 31
8886: PPUSH
8887: LD_INT 215
8889: PPUSH
8890: LD_INT 36
8892: PPUSH
8893: CALL_OW 111
// end ;
8897: LD_VAR 0 1
8901: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8902: LD_EXP 3
8906: IFFALSE 10099
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
// begin DialogueOn ;
8916: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8920: LD_EXP 21
8924: PPUSH
8925: LD_STRING DH-base-1
8927: PPUSH
8928: CALL_OW 88
// if Markov then
8932: LD_EXP 28
8936: IFFALSE 8988
// begin Say ( Markov , DMar-base-2 ) ;
8938: LD_EXP 28
8942: PPUSH
8943: LD_STRING DMar-base-2
8945: PPUSH
8946: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8950: LD_EXP 28
8954: PPUSH
8955: LD_STRING DMar-base-3
8957: PPUSH
8958: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8962: LD_EXP 21
8966: PPUSH
8967: LD_STRING DH-base-4
8969: PPUSH
8970: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8974: LD_EXP 28
8978: PPUSH
8979: LD_STRING DMar-base-5
8981: PPUSH
8982: CALL_OW 88
// end else
8986: GO 9065
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8988: LD_EXP 32
8992: PPUSH
8993: LD_INT 26
8995: PUSH
8996: LD_INT 1
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PPUSH
9003: CALL_OW 72
9007: PUSH
9008: LD_INT 1
9010: ARRAY
9011: PPUSH
9012: LD_STRING DArm-base-a-2
9014: PPUSH
9015: CALL_OW 88
9019: NOT
9020: IFFALSE 9053
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9022: LD_EXP 32
9026: PPUSH
9027: LD_INT 26
9029: PUSH
9030: LD_INT 2
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PPUSH
9037: CALL_OW 72
9041: PUSH
9042: LD_INT 1
9044: ARRAY
9045: PPUSH
9046: LD_STRING DArf-base-a-2
9048: PPUSH
9049: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9053: LD_EXP 21
9057: PPUSH
9058: LD_STRING DH-base-a-3
9060: PPUSH
9061: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9065: LD_EXP 31
9069: PPUSH
9070: LD_STRING DA-base-6
9072: PPUSH
9073: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9077: LD_EXP 31
9081: PPUSH
9082: LD_STRING DA-base-7
9084: PPUSH
9085: CALL_OW 88
// DialogueOff ;
9089: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9093: LD_STRING Flamethrower
9095: PPUSH
9096: CALL_OW 337
// wait ( 2 2$00 ) ;
9100: LD_INT 4200
9102: PPUSH
9103: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9107: LD_EXP 30
9111: PUSH
9112: LD_EXP 23
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PPUSH
9121: LD_INT 203
9123: PPUSH
9124: LD_INT 37
9126: PPUSH
9127: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9131: LD_INT 22
9133: PUSH
9134: LD_INT 2
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: LD_INT 92
9143: PUSH
9144: LD_INT 203
9146: PUSH
9147: LD_INT 37
9149: PUSH
9150: LD_INT 10
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: NOT
9168: IFFALSE 9208
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9170: LD_EXP 30
9174: PUSH
9175: LD_EXP 23
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PPUSH
9184: LD_EXP 21
9188: PPUSH
9189: CALL_OW 250
9193: PPUSH
9194: LD_EXP 21
9198: PPUSH
9199: CALL_OW 251
9203: PPUSH
9204: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9208: LD_INT 35
9210: PPUSH
9211: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
9215: LD_INT 2
9217: PPUSH
9218: LD_EXP 30
9222: PPUSH
9223: CALL_OW 292
9227: PUSH
9228: LD_EXP 30
9232: PPUSH
9233: LD_EXP 21
9237: PPUSH
9238: CALL_OW 296
9242: PUSH
9243: LD_INT 8
9245: LESS
9246: OR
9247: IFFALSE 9208
// InGameOn ;
9249: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9253: LD_EXP 30
9257: PPUSH
9258: CALL_OW 87
// if IsInUnit ( Heike ) then
9262: LD_EXP 21
9266: PPUSH
9267: CALL_OW 310
9271: IFFALSE 9282
// ComExitBuilding ( Heike ) ;
9273: LD_EXP 21
9277: PPUSH
9278: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9282: LD_EXP 30
9286: PUSH
9287: LD_EXP 23
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PPUSH
9296: LD_EXP 21
9300: PPUSH
9301: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9305: LD_EXP 21
9309: PPUSH
9310: LD_EXP 30
9314: PPUSH
9315: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9319: LD_INT 22
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 91
9331: PUSH
9332: LD_EXP 30
9336: PUSH
9337: LD_INT 10
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 21
9347: PUSH
9348: LD_INT 3
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: PPUSH
9360: CALL_OW 69
9364: IFFALSE 9390
// begin Say ( Kurt , DKs-scout-1 ) ;
9366: LD_EXP 30
9370: PPUSH
9371: LD_STRING DKs-scout-1
9373: PPUSH
9374: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9378: LD_EXP 21
9382: PPUSH
9383: LD_STRING DH-scout-2
9385: PPUSH
9386: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9390: LD_INT 35
9392: PPUSH
9393: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9397: LD_EXP 21
9401: PPUSH
9402: LD_EXP 30
9406: PPUSH
9407: CALL_OW 296
9411: PUSH
9412: LD_INT 6
9414: LESS
9415: IFFALSE 9390
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9417: LD_EXP 30
9421: PUSH
9422: LD_EXP 23
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PPUSH
9431: LD_EXP 21
9435: PPUSH
9436: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9440: LD_EXP 30
9444: PPUSH
9445: LD_STRING DKs-scout-3
9447: PPUSH
9448: CALL_OW 88
// if Kaia then
9452: LD_EXP 26
9456: IFFALSE 9639
// begin if IsInUnit ( Kaia ) then
9458: LD_EXP 26
9462: PPUSH
9463: CALL_OW 310
9467: IFFALSE 9478
// ComExitBuilding ( Kaia ) ;
9469: LD_EXP 26
9473: PPUSH
9474: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9478: LD_EXP 26
9482: PPUSH
9483: LD_EXP 30
9487: PPUSH
9488: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
9492: LD_INT 35
9494: PPUSH
9495: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9499: LD_EXP 26
9503: PPUSH
9504: LD_EXP 30
9508: PPUSH
9509: CALL_OW 296
9513: PUSH
9514: LD_INT 6
9516: LESS
9517: IFFALSE 9492
// ComTurnUnit ( Kaia , Kurt ) ;
9519: LD_EXP 26
9523: PPUSH
9524: LD_EXP 30
9528: PPUSH
9529: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9533: LD_EXP 26
9537: PPUSH
9538: LD_STRING DK-scout-4
9540: PPUSH
9541: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9545: LD_EXP 30
9549: PPUSH
9550: LD_EXP 26
9554: PPUSH
9555: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9559: LD_EXP 30
9563: PPUSH
9564: LD_STRING DKs-scout-5
9566: PPUSH
9567: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9571: LD_EXP 26
9575: PPUSH
9576: LD_STRING DK-scout-6
9578: PPUSH
9579: CALL_OW 88
// if Mike then
9583: LD_EXP 23
9587: IFFALSE 9639
// begin Say ( Mike , DM-scout-7 ) ;
9589: LD_EXP 23
9593: PPUSH
9594: LD_STRING DM-scout-7
9596: PPUSH
9597: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9601: LD_EXP 26
9605: PPUSH
9606: LD_EXP 23
9610: PPUSH
9611: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9615: LD_EXP 26
9619: PPUSH
9620: LD_STRING DK-scout-8
9622: PPUSH
9623: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9627: LD_EXP 23
9631: PPUSH
9632: LD_STRING DM-scout-9
9634: PPUSH
9635: CALL_OW 88
// end ; end ; ShowArea ( 2 , scoutArea ) ;
9639: LD_INT 2
9641: PPUSH
9642: LD_INT 9
9644: PPUSH
9645: CALL_OW 334
// CenterOnXY ( 184 , 100 ) ;
9649: LD_INT 184
9651: PPUSH
9652: LD_INT 100
9654: PPUSH
9655: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9659: LD_EXP 30
9663: PPUSH
9664: LD_STRING DKs-scout-10
9666: PPUSH
9667: CALL_OW 88
// wait ( 0 0$1 ) ;
9671: LD_INT 35
9673: PPUSH
9674: CALL_OW 67
// ShowArea ( 2 , hillArea ) ;
9678: LD_INT 2
9680: PPUSH
9681: LD_INT 10
9683: PPUSH
9684: CALL_OW 334
// CenterOnXY ( 144 , 65 ) ;
9688: LD_INT 144
9690: PPUSH
9691: LD_INT 65
9693: PPUSH
9694: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9698: LD_EXP 30
9702: PPUSH
9703: LD_STRING DKs-scout-11
9705: PPUSH
9706: CALL_OW 88
// wait ( 0 0$1 ) ;
9710: LD_INT 35
9712: PPUSH
9713: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9717: LD_EXP 30
9721: PPUSH
9722: CALL_OW 87
// if Mike and not Givi then
9726: LD_EXP 23
9730: PUSH
9731: LD_EXP 22
9735: NOT
9736: AND
9737: IFFALSE 9763
// begin Say ( Mike , DM-scout-a-1 ) ;
9739: LD_EXP 23
9743: PPUSH
9744: LD_STRING DM-scout-a-1
9746: PPUSH
9747: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9751: LD_EXP 21
9755: PPUSH
9756: LD_STRING DH-scout-a-2
9758: PPUSH
9759: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9763: LD_EXP 30
9767: PUSH
9768: LD_EXP 23
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PPUSH
9777: LD_INT 2
9779: PPUSH
9780: CALL_OW 235
// InGameOff ;
9784: CALL_OW 9
// allowToPatrol := true ;
9788: LD_ADDR_EXP 12
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9796: LD_INT 3150
9798: PPUSH
9799: CALL_OW 67
// InitHc ;
9803: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
9807: LD_ADDR_VAR 0 1
9811: PUSH
9812: DOUBLE
9813: LD_INT 1
9815: DEC
9816: ST_TO_ADDR
9817: LD_INT 3
9819: PUSH
9820: LD_INT 3
9822: PUSH
9823: LD_INT 2
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: LIST
9830: PUSH
9831: LD_OWVAR 67
9835: ARRAY
9836: PUSH
9837: FOR_TO
9838: IFFALSE 10097
// begin uc_side := 2 ;
9840: LD_ADDR_OWVAR 20
9844: PUSH
9845: LD_INT 2
9847: ST_TO_ADDR
// uc_nation := 2 ;
9848: LD_ADDR_OWVAR 21
9852: PUSH
9853: LD_INT 2
9855: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
9856: LD_INT 0
9858: PPUSH
9859: LD_INT 1
9861: PUSH
9862: LD_INT 3
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: PUSH
9873: LD_VAR 0 1
9877: PUSH
9878: LD_INT 3
9880: MOD
9881: PUSH
9882: LD_INT 1
9884: PLUS
9885: ARRAY
9886: PPUSH
9887: LD_INT 3
9889: PUSH
9890: LD_INT 2
9892: PUSH
9893: LD_INT 2
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: LD_OWVAR 67
9905: ARRAY
9906: PPUSH
9907: CALL_OW 380
// un := CreateHuman ;
9911: LD_ADDR_VAR 0 2
9915: PUSH
9916: CALL_OW 44
9920: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
9921: LD_ADDR_EXP 32
9925: PUSH
9926: LD_EXP 32
9930: PUSH
9931: LD_VAR 0 2
9935: UNION
9936: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
9937: LD_INT 2
9939: PPUSH
9940: LD_INT 2
9942: PPUSH
9943: LD_INT 13
9945: PPUSH
9946: LD_INT 2
9948: PUSH
9949: LD_INT 1
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_VAR 0 1
9960: PUSH
9961: LD_INT 2
9963: MOD
9964: PUSH
9965: LD_INT 1
9967: PLUS
9968: ARRAY
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: LD_INT 27
9975: PUSH
9976: LD_INT 25
9978: PUSH
9979: LD_INT 27
9981: PUSH
9982: LD_INT 23
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: PUSH
9991: LD_OWVAR 67
9995: PUSH
9996: LD_INT 0
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 12
10006: PLUS
10007: ARRAY
10008: PPUSH
10009: LD_INT 77
10011: PPUSH
10012: CALL 296 0 7
// veh := CreateVehicle ;
10016: LD_ADDR_VAR 0 3
10020: PUSH
10021: CALL_OW 45
10025: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10026: LD_VAR 0 3
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_INT 178
10045: PPUSH
10046: LD_INT 2
10048: PPUSH
10049: LD_INT 2
10051: PPUSH
10052: LD_INT 0
10054: PPUSH
10055: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_VAR 0 3
10068: PPUSH
10069: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 183
10080: PPUSH
10081: LD_INT 11
10083: PPUSH
10084: CALL_OW 111
// wait ( 0 0$2 ) ;
10088: LD_INT 70
10090: PPUSH
10091: CALL_OW 67
// end ;
10095: GO 9837
10097: POP
10098: POP
// end ;
10099: PPOPN 3
10101: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10102: LD_EXP 4
10106: PUSH
10107: LD_EXP 31
10111: PPUSH
10112: CALL_OW 302
10116: AND
10117: IFFALSE 10166
10119: GO 10121
10121: DISABLE
// begin DialogueOn ;
10122: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10126: LD_EXP 31
10130: PPUSH
10131: LD_STRING DA-lab-1
10133: PPUSH
10134: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10138: LD_EXP 31
10142: PPUSH
10143: LD_STRING DA-lab-2
10145: PPUSH
10146: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10150: LD_EXP 21
10154: PPUSH
10155: LD_STRING DH-lab-3
10157: PPUSH
10158: CALL_OW 88
// DialogueOff ;
10162: CALL_OW 7
// end ;
10166: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10167: LD_INT 17
10169: PPUSH
10170: LD_INT 2
10172: PPUSH
10173: CALL_OW 321
10177: PUSH
10178: LD_INT 2
10180: EQUAL
10181: IFFALSE 10313
10183: GO 10185
10185: DISABLE
10186: LD_INT 0
10188: PPUSH
// begin DialogueOn ;
10189: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10193: LD_EXP 31
10197: PPUSH
10198: LD_STRING DA-Cam-1
10200: PPUSH
10201: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10205: LD_EXP 31
10209: PPUSH
10210: LD_STRING DA-Cam-2
10212: PPUSH
10213: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10217: LD_EXP 31
10221: PPUSH
10222: LD_STRING DA-Cam-3
10224: PPUSH
10225: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10229: LD_EXP 21
10233: PPUSH
10234: LD_STRING DH-Cam-4
10236: PPUSH
10237: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10241: LD_EXP 26
10245: PPUSH
10246: LD_STRING DK-Cam-5
10248: PPUSH
10249: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10253: LD_EXP 26
10257: PPUSH
10258: LD_STRING DK-Cam-6
10260: PPUSH
10261: CALL_OW 88
// DialogueOff ;
10265: CALL_OW 7
// Query ( Camera ) ;
10269: LD_STRING Camera
10271: PPUSH
10272: CALL_OW 97
// hiddenCameraAllowed := true ;
10276: LD_ADDR_EXP 5
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// for i in camAreas do
10284: LD_ADDR_VAR 0 1
10288: PUSH
10289: LD_EXP 8
10293: PUSH
10294: FOR_IN
10295: IFFALSE 10311
// SetAreaMapShow ( i , 1 ) ;
10297: LD_VAR 0 1
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 424
10309: GO 10294
10311: POP
10312: POP
// end ;
10313: PPOPN 1
10315: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10316: LD_EXP 8
10320: NOT
10321: PUSH
10322: LD_EXP 5
10326: AND
10327: IFFALSE 10418
10329: GO 10331
10331: DISABLE
10332: LD_INT 0
10334: PPUSH
// begin stop_talking := true ;
10335: LD_ADDR_OWVAR 56
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10343: LD_ADDR_VAR 0 1
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_INT 2
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 21
10360: PUSH
10361: LD_INT 1
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 23
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: LIST
10382: PPUSH
10383: CALL_OW 69
10387: PUSH
10388: FOR_IN
10389: IFFALSE 10408
// AddExperience ( i , 2 , 450 ) ;
10391: LD_VAR 0 1
10395: PPUSH
10396: LD_INT 2
10398: PPUSH
10399: LD_INT 450
10401: PPUSH
10402: CALL_OW 492
10406: GO 10388
10408: POP
10409: POP
// stop_talking := false ;
10410: LD_ADDR_OWVAR 56
10414: PUSH
10415: LD_INT 0
10417: ST_TO_ADDR
// end ;
10418: PPOPN 1
10420: END
// every 0 0$2 trigger russianAlert and not allowHeikeAttack do
10421: LD_EXP 9
10425: PUSH
10426: LD_EXP 11
10430: NOT
10431: AND
10432: IFFALSE 10462
10434: GO 10436
10436: DISABLE
// begin if spottedByPatrol then
10437: LD_EXP 7
10441: IFFALSE 10455
// Say ( Heike , DH-Spot-f-3 ) ;
10443: LD_EXP 21
10447: PPUSH
10448: LD_STRING DH-Spot-f-3
10450: PPUSH
10451: CALL_OW 88
// YouLost ( Spotted ) ;
10455: LD_STRING Spotted
10457: PPUSH
10458: CALL_OW 104
// end ;
10462: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
10463: LD_INT 2
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_INT 3
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 22
10478: PUSH
10479: LD_INT 6
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 101
10493: PUSH
10494: LD_INT 2
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 69
10509: PUSH
10510: LD_EXP 42
10514: DIFF
10515: IFFALSE 10528
10517: GO 10519
10519: DISABLE
// russianAlert := true ;
10520: LD_ADDR_EXP 9
10524: PUSH
10525: LD_INT 1
10527: ST_TO_ADDR
10528: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10529: LD_EXP 9
10533: IFFALSE 10830
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
10542: PPUSH
10543: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: LD_EXP 39
10553: PPUSH
10554: LD_INT 25
10556: PUSH
10557: LD_INT 1
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 54
10566: PUSH
10567: EMPTY
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 72
10578: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: LD_INT 22
10586: PUSH
10587: LD_INT 6
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: LD_INT 32
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PPUSH
10608: CALL_OW 69
10612: ST_TO_ADDR
// for i := 1 to tmp do
10613: LD_ADDR_VAR 0 1
10617: PUSH
10618: DOUBLE
10619: LD_INT 1
10621: DEC
10622: ST_TO_ADDR
10623: LD_VAR 0 2
10627: PUSH
10628: FOR_TO
10629: IFFALSE 10674
// begin ComExitBuilding ( tmp [ i ] ) ;
10631: LD_VAR 0 2
10635: PUSH
10636: LD_VAR 0 1
10640: ARRAY
10641: PPUSH
10642: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
10646: LD_VAR 0 2
10650: PUSH
10651: LD_VAR 0 1
10655: ARRAY
10656: PPUSH
10657: LD_VAR 0 3
10661: PUSH
10662: LD_VAR 0 1
10666: ARRAY
10667: PPUSH
10668: CALL_OW 180
// end ;
10672: GO 10628
10674: POP
10675: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10676: LD_ADDR_VAR 0 4
10680: PUSH
10681: LD_EXP 37
10685: PUSH
10686: LD_EXP 39
10690: PUSH
10691: LD_EXP 40
10695: UNION
10696: PPUSH
10697: LD_INT 3
10699: PUSH
10700: LD_INT 25
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 72
10718: UNION
10719: ST_TO_ADDR
// for i in noncombat do
10720: LD_ADDR_VAR 0 1
10724: PUSH
10725: LD_VAR 0 4
10729: PUSH
10730: FOR_IN
10731: IFFALSE 10767
// begin if IsInUnit ( i ) then
10733: LD_VAR 0 1
10737: PPUSH
10738: CALL_OW 310
10742: IFFALSE 10753
// ComExitBuilding ( i ) ;
10744: LD_VAR 0 1
10748: PPUSH
10749: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
10753: LD_VAR 0 1
10757: PPUSH
10758: LD_INT 16
10760: PPUSH
10761: CALL_OW 173
// end ;
10765: GO 10730
10767: POP
10768: POP
// if not allowHeikeAttack then
10769: LD_EXP 11
10773: NOT
10774: IFFALSE 10778
// exit ;
10776: GO 10830
// SayRadio ( Kurin , D9a-Kur-1 ) ;
10778: LD_EXP 35
10782: PPUSH
10783: LD_STRING D9a-Kur-1
10785: PPUSH
10786: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
10790: LD_EXP 38
10794: PPUSH
10795: LD_STRING D9a-Bur-1
10797: PPUSH
10798: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
10802: LD_EXP 35
10806: PPUSH
10807: LD_STRING D9a-Kur-2
10809: PPUSH
10810: CALL_OW 94
// omicronFall := true ;
10814: LD_ADDR_EXP 13
10818: PUSH
10819: LD_INT 1
10821: ST_TO_ADDR
// retreatFromOmicron := true ;
10822: LD_ADDR_EXP 19
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// end ;
10830: PPOPN 4
10832: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
10833: LD_INT 16
10835: PPUSH
10836: LD_INT 3
10838: PUSH
10839: LD_INT 22
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 23
10855: PUSH
10856: LD_INT 3
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 70
10871: IFFALSE 10954
10873: GO 10875
10875: DISABLE
10876: LD_INT 0
10878: PPUSH
// begin enable ;
10879: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
10880: LD_ADDR_VAR 0 1
10884: PUSH
10885: LD_INT 16
10887: PPUSH
10888: LD_INT 3
10890: PUSH
10891: LD_INT 22
10893: PUSH
10894: LD_INT 2
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 23
10907: PUSH
10908: LD_INT 3
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PPUSH
10919: CALL_OW 70
10923: PUSH
10924: FOR_IN
10925: IFFALSE 10952
// begin escapeCounter := escapeCounter + 1 ;
10927: LD_ADDR_EXP 18
10931: PUSH
10932: LD_EXP 18
10936: PUSH
10937: LD_INT 1
10939: PLUS
10940: ST_TO_ADDR
// RemoveUnit ( i ) ;
10941: LD_VAR 0 1
10945: PPUSH
10946: CALL_OW 64
// end ;
10950: GO 10924
10952: POP
10953: POP
// end ;
10954: PPOPN 1
10956: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
10957: LD_OWVAR 1
10961: PUSH
10962: LD_INT 13650
10964: PUSH
10965: LD_INT 0
10967: PPUSH
10968: LD_INT 3150
10970: PPUSH
10971: CALL_OW 12
10975: PLUS
10976: GREATEREQUAL
10977: IFFALSE 10986
10979: GO 10981
10981: DISABLE
// SmallAmericanReinforcements ;
10982: CALL 6711 0 0
10986: END
// every 0 0$1 trigger tick >= 9 9$15 do
10987: LD_OWVAR 1
10991: PUSH
10992: LD_INT 19425
10994: GREATEREQUAL
10995: IFFALSE 11060
10997: GO 10999
10999: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11000: LD_EXP 43
11004: PPUSH
11005: LD_INT 21
11007: PUSH
11008: LD_INT 2
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PPUSH
11015: CALL_OW 72
11019: PPUSH
11020: LD_INT 62
11022: PPUSH
11023: LD_INT 22
11025: PPUSH
11026: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11030: LD_EXP 44
11034: PPUSH
11035: LD_INT 69
11037: PPUSH
11038: LD_INT 27
11040: PPUSH
11041: CALL_OW 111
// wait ( 1 1$00 ) ;
11045: LD_INT 2100
11047: PPUSH
11048: CALL_OW 67
// startAttackOnOmicron := true ;
11052: LD_ADDR_EXP 6
11056: PUSH
11057: LD_INT 1
11059: ST_TO_ADDR
// end ;
11060: END
// every 0 0$2 trigger tick >= 20 20$00 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11061: LD_OWVAR 1
11065: PUSH
11066: LD_INT 42000
11068: GREATEREQUAL
11069: IFFALSE 12928
11071: GO 11073
11073: DISABLE
11074: LD_INT 0
11076: PPUSH
11077: PPUSH
11078: PPUSH
11079: PPUSH
11080: PPUSH
11081: PPUSH
11082: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11083: LD_INT 5
11085: PPUSH
11086: LD_INT 2
11088: PPUSH
11089: CALL_OW 343
// PrepareOmarForces ;
11093: CALL 2270 0 0
// wait ( 0 0$03 ) ;
11097: LD_INT 105
11099: PPUSH
11100: CALL_OW 67
// allowHeikeAttack := true ;
11104: LD_ADDR_EXP 11
11108: PUSH
11109: LD_INT 1
11111: ST_TO_ADDR
// activeGrishkoAI := false ;
11112: LD_ADDR_EXP 10
11116: PUSH
11117: LD_INT 0
11119: ST_TO_ADDR
// CenterOnUnits ( Omar ) ;
11120: LD_EXP 29
11124: PPUSH
11125: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11129: LD_ADDR_VAR 0 1
11133: PUSH
11134: LD_INT 22
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 21
11146: PUSH
11147: LD_INT 1
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: PUSH
11163: FOR_IN
11164: IFFALSE 11188
// if HasTask ( i ) then
11166: LD_VAR 0 1
11170: PPUSH
11171: CALL_OW 314
11175: IFFALSE 11186
// ComHold ( i ) ;
11177: LD_VAR 0 1
11181: PPUSH
11182: CALL_OW 140
11186: GO 11163
11188: POP
11189: POP
// DialogueOn ;
11190: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11194: LD_EXP 29
11198: PPUSH
11199: LD_STRING DO-assault-1
11201: PPUSH
11202: CALL_OW 94
// DialogueOff ;
11206: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11210: LD_ADDR_VAR 0 1
11214: PUSH
11215: LD_EXP 41
11219: PPUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 54
11225: PUSH
11226: EMPTY
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 72
11237: PUSH
11238: FOR_IN
11239: IFFALSE 11258
// ComMoveXY ( i , 226 , 114 ) ;
11241: LD_VAR 0 1
11245: PPUSH
11246: LD_INT 226
11248: PPUSH
11249: LD_INT 114
11251: PPUSH
11252: CALL_OW 111
11256: GO 11238
11258: POP
11259: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11260: LD_EXP 36
11264: PPUSH
11265: LD_INT 22
11267: PUSH
11268: LD_INT 6
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 30
11277: PUSH
11278: LD_INT 4
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PPUSH
11289: CALL_OW 69
11293: PPUSH
11294: LD_EXP 36
11298: PPUSH
11299: CALL_OW 74
11303: PPUSH
11304: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11308: LD_STRING Attack
11310: PPUSH
11311: CALL_OW 337
// music_class := music_combat ;
11315: LD_ADDR_OWVAR 72
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// music_nat := 4 ;
11323: LD_ADDR_OWVAR 71
11327: PUSH
11328: LD_INT 4
11330: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11331: LD_INT 5
11333: PPUSH
11334: LD_EXP 36
11338: PPUSH
11339: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11343: LD_INT 6
11345: PPUSH
11346: LD_EXP 33
11350: PPUSH
11351: LD_INT 25
11353: PUSH
11354: LD_INT 1
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 72
11365: PUSH
11366: LD_INT 4
11368: ARRAY
11369: PPUSH
11370: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11374: LD_ADDR_VAR 0 1
11378: PUSH
11379: LD_EXP 33
11383: PPUSH
11384: LD_INT 3
11386: PUSH
11387: LD_INT 25
11389: PUSH
11390: LD_INT 4
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PPUSH
11401: CALL_OW 72
11405: PUSH
11406: FOR_IN
11407: IFFALSE 11426
// ComAgressiveMove ( i , 221 , 110 ) ;
11409: LD_VAR 0 1
11413: PPUSH
11414: LD_INT 221
11416: PPUSH
11417: LD_INT 110
11419: PPUSH
11420: CALL_OW 114
11424: GO 11406
11426: POP
11427: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11428: LD_EXP 33
11432: PPUSH
11433: LD_INT 25
11435: PUSH
11436: LD_INT 4
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 72
11447: PPUSH
11448: LD_INT 214
11450: PPUSH
11451: LD_INT 124
11453: PPUSH
11454: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11458: LD_EXP 33
11462: PPUSH
11463: LD_INT 25
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PPUSH
11473: CALL_OW 72
11477: PUSH
11478: LD_INT 4
11480: ARRAY
11481: PPUSH
11482: LD_INT 214
11484: PPUSH
11485: LD_INT 114
11487: PPUSH
11488: LD_INT 0
11490: PPUSH
11491: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11495: LD_EXP 36
11499: PPUSH
11500: LD_STRING D9-Gri-1
11502: PPUSH
11503: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11507: LD_EXP 35
11511: PPUSH
11512: LD_STRING D9-Kur-1
11514: PPUSH
11515: CALL_OW 94
// wait ( 0 0$1 ) ;
11519: LD_INT 35
11521: PPUSH
11522: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11526: LD_EXP 29
11530: PPUSH
11531: LD_INT 233
11533: PPUSH
11534: LD_INT 130
11536: PPUSH
11537: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11541: LD_EXP 36
11545: PPUSH
11546: LD_STRING D9-Gri-2
11548: PPUSH
11549: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11553: LD_EXP 35
11557: PPUSH
11558: LD_STRING D9-Kur-2
11560: PPUSH
11561: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11565: LD_EXP 36
11569: PPUSH
11570: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11574: LD_EXP 36
11578: PPUSH
11579: LD_INT 211
11581: PPUSH
11582: LD_INT 104
11584: PPUSH
11585: CALL_OW 171
// AddComHold ( Grishko ) ;
11589: LD_EXP 36
11593: PPUSH
11594: CALL_OW 200
// repeat wait ( 3 ) ;
11598: LD_INT 3
11600: PPUSH
11601: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11605: LD_EXP 36
11609: PPUSH
11610: CALL_OW 310
11614: NOT
11615: IFFALSE 11598
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11617: LD_EXP 33
11621: PPUSH
11622: LD_INT 34
11624: PUSH
11625: LD_INT 26
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PPUSH
11632: CALL_OW 72
11636: PPUSH
11637: LD_EXP 36
11641: PPUSH
11642: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11646: LD_EXP 33
11650: PPUSH
11651: LD_INT 34
11653: PUSH
11654: LD_INT 26
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: PPUSH
11666: LD_INT 215
11668: PPUSH
11669: LD_INT 106
11671: PPUSH
11672: CALL_OW 174
// repeat wait ( 3 ) ;
11676: LD_INT 3
11678: PPUSH
11679: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11683: LD_EXP 36
11687: PPUSH
11688: CALL_OW 256
11692: PUSH
11693: LD_INT 1000
11695: LESS
11696: IFFALSE 11676
// NormalAttack ( 5 , Grishko ) ;
11698: LD_INT 5
11700: PPUSH
11701: LD_EXP 36
11705: PPUSH
11706: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11710: LD_INT 6
11712: PPUSH
11713: LD_EXP 33
11717: PPUSH
11718: LD_INT 25
11720: PUSH
11721: LD_INT 1
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PPUSH
11728: CALL_OW 72
11732: PUSH
11733: LD_INT 4
11735: ARRAY
11736: PPUSH
11737: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
11741: LD_EXP 36
11745: PPUSH
11746: LD_STRING D9-Gri-3
11748: PPUSH
11749: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
11753: LD_EXP 35
11757: PPUSH
11758: LD_STRING D9-Kur-3
11760: PPUSH
11761: CALL_OW 94
// music_class := music_auto ;
11765: LD_ADDR_OWVAR 72
11769: PUSH
11770: LD_INT 0
11772: ST_TO_ADDR
// music_nat := music_auto ;
11773: LD_ADDR_OWVAR 71
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// for i in omarSquad do
11781: LD_ADDR_VAR 0 1
11785: PUSH
11786: LD_EXP 33
11790: PUSH
11791: FOR_IN
11792: IFFALSE 11934
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
11794: LD_VAR 0 1
11798: PPUSH
11799: CALL_OW 247
11803: PUSH
11804: LD_INT 2
11806: EQUAL
11807: PUSH
11808: LD_VAR 0 1
11812: PPUSH
11813: CALL_OW 256
11817: PUSH
11818: LD_INT 1000
11820: LESS
11821: AND
11822: IFFALSE 11888
// begin driver := IsDrivenBy ( i ) ;
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL_OW 311
11838: ST_TO_ADDR
// veh := i ;
11839: LD_ADDR_VAR 0 3
11843: PUSH
11844: LD_VAR 0 1
11848: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11849: LD_VAR 0 2
11853: PPUSH
11854: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_VAR 0 3
11867: PPUSH
11868: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
11872: LD_VAR 0 2
11876: PPUSH
11877: LD_VAR 0 3
11881: PPUSH
11882: CALL_OW 180
// end else
11886: GO 11932
// if GetLives ( i ) < 500 then
11888: LD_VAR 0 1
11892: PPUSH
11893: CALL_OW 256
11897: PUSH
11898: LD_INT 500
11900: LESS
11901: IFFALSE 11932
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
11903: LD_EXP 33
11907: PPUSH
11908: LD_INT 25
11910: PUSH
11911: LD_INT 4
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 72
11922: PPUSH
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 188
// end ; end ;
11932: GO 11791
11934: POP
11935: POP
// repeat wait ( 0 0$1 ) ;
11936: LD_INT 35
11938: PPUSH
11939: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
11943: LD_EXP 33
11947: PPUSH
11948: LD_INT 3
11950: PUSH
11951: LD_INT 24
11953: PUSH
11954: LD_INT 1000
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 21
11967: PUSH
11968: LD_INT 2
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 72
11983: NOT
11984: PUSH
11985: LD_EXP 33
11989: PPUSH
11990: LD_INT 3
11992: PUSH
11993: LD_INT 24
11995: PUSH
11996: LD_INT 250
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 72
12011: NOT
12012: AND
12013: IFFALSE 11936
// wait ( 0 0$2 ) ;
12015: LD_INT 70
12017: PPUSH
12018: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12022: LD_ADDR_VAR 0 5
12026: PUSH
12027: LD_EXP 33
12031: PPUSH
12032: LD_INT 58
12034: PUSH
12035: EMPTY
12036: LIST
12037: PUSH
12038: LD_INT 21
12040: PUSH
12041: LD_INT 2
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 72
12056: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12057: LD_ADDR_VAR 0 6
12061: PUSH
12062: LD_EXP 33
12066: PPUSH
12067: LD_INT 25
12069: PUSH
12070: LD_INT 3
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 3
12079: PUSH
12080: LD_INT 55
12082: PUSH
12083: EMPTY
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PPUSH
12094: CALL_OW 72
12098: ST_TO_ADDR
// for i := 1 to tmp do
12099: LD_ADDR_VAR 0 1
12103: PUSH
12104: DOUBLE
12105: LD_INT 1
12107: DEC
12108: ST_TO_ADDR
12109: LD_VAR 0 5
12113: PUSH
12114: FOR_TO
12115: IFFALSE 12145
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12117: LD_VAR 0 6
12121: PUSH
12122: LD_VAR 0 1
12126: ARRAY
12127: PPUSH
12128: LD_VAR 0 5
12132: PUSH
12133: LD_VAR 0 1
12137: ARRAY
12138: PPUSH
12139: CALL_OW 120
12143: GO 12114
12145: POP
12146: POP
// wait ( 0 0$5 ) ;
12147: LD_INT 175
12149: PPUSH
12150: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12154: LD_EXP 33
12158: PPUSH
12159: LD_INT 199
12161: PPUSH
12162: LD_INT 141
12164: PPUSH
12165: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12169: LD_EXP 29
12173: PPUSH
12174: LD_INT 190
12176: PPUSH
12177: LD_INT 143
12179: PPUSH
12180: CALL_OW 111
// AddComHold ( Omar ) ;
12184: LD_EXP 29
12188: PPUSH
12189: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12193: LD_EXP 33
12197: PPUSH
12198: LD_INT 2
12200: PUSH
12201: LD_INT 25
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 25
12213: PUSH
12214: LD_INT 4
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PPUSH
12226: CALL_OW 72
12230: PPUSH
12231: LD_INT 161
12233: PPUSH
12234: LD_INT 130
12236: PPUSH
12237: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12241: LD_EXP 33
12245: PPUSH
12246: LD_INT 25
12248: PUSH
12249: LD_INT 1
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PPUSH
12256: CALL_OW 72
12260: PPUSH
12261: LD_INT 163
12263: PPUSH
12264: LD_INT 122
12266: PPUSH
12267: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12271: LD_EXP 33
12275: PPUSH
12276: LD_INT 25
12278: PUSH
12279: LD_INT 1
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 72
12290: PUSH
12291: LD_INT 4
12293: ARRAY
12294: PPUSH
12295: LD_INT 165
12297: PPUSH
12298: LD_INT 118
12300: PPUSH
12301: LD_INT 0
12303: PPUSH
12304: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12308: LD_EXP 33
12312: PPUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 72
12327: PUSH
12328: LD_INT 4
12330: ARRAY
12331: PPUSH
12332: LD_INT 159
12334: PPUSH
12335: LD_INT 116
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12345: LD_EXP 33
12349: PPUSH
12350: LD_INT 21
12352: PUSH
12353: LD_INT 2
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: PPUSH
12365: LD_INT 169
12367: PPUSH
12368: LD_INT 114
12370: PPUSH
12371: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12375: LD_INT 35
12377: PPUSH
12378: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12382: LD_ADDR_VAR 0 5
12386: PUSH
12387: LD_EXP 33
12391: PPUSH
12392: LD_INT 25
12394: PUSH
12395: LD_INT 1
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PPUSH
12402: CALL_OW 72
12406: ST_TO_ADDR
// for i in tmp do
12407: LD_ADDR_VAR 0 1
12411: PUSH
12412: LD_VAR 0 5
12416: PUSH
12417: FOR_IN
12418: IFFALSE 12515
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12420: LD_VAR 0 1
12424: PPUSH
12425: CALL_OW 256
12429: PUSH
12430: LD_INT 600
12432: LESS
12433: PUSH
12434: LD_VAR 0 1
12438: PPUSH
12439: LD_INT 161
12441: PPUSH
12442: LD_INT 130
12444: PPUSH
12445: CALL_OW 297
12449: PUSH
12450: LD_INT 6
12452: GREATER
12453: AND
12454: IFFALSE 12471
// ComMoveXY ( i , 161 , 130 ) ;
12456: LD_VAR 0 1
12460: PPUSH
12461: LD_INT 161
12463: PPUSH
12464: LD_INT 130
12466: PPUSH
12467: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12471: LD_VAR 0 1
12475: PPUSH
12476: CALL_OW 256
12480: PUSH
12481: LD_INT 1000
12483: EQUAL
12484: PUSH
12485: LD_VAR 0 1
12489: PPUSH
12490: CALL_OW 314
12494: NOT
12495: AND
12496: IFFALSE 12513
// ComAgressiveMove ( i , 160 , 109 ) ;
12498: LD_VAR 0 1
12502: PPUSH
12503: LD_INT 160
12505: PPUSH
12506: LD_INT 109
12508: PPUSH
12509: CALL_OW 114
// end ;
12513: GO 12417
12515: POP
12516: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12517: LD_ADDR_VAR 0 5
12521: PUSH
12522: LD_EXP 33
12526: PPUSH
12527: LD_INT 21
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 72
12541: ST_TO_ADDR
// for i in tmp do
12542: LD_ADDR_VAR 0 1
12546: PUSH
12547: LD_VAR 0 5
12551: PUSH
12552: FOR_IN
12553: IFFALSE 12819
// begin tmp2 := IsDrivenBy ( i ) ;
12555: LD_ADDR_VAR 0 6
12559: PUSH
12560: LD_VAR 0 1
12564: PPUSH
12565: CALL_OW 311
12569: ST_TO_ADDR
// if not tmp2 then
12570: LD_VAR 0 6
12574: NOT
12575: IFFALSE 12579
// continue ;
12577: GO 12552
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12579: LD_VAR 0 1
12583: PPUSH
12584: CALL_OW 256
12588: PUSH
12589: LD_INT 600
12591: GREATEREQUAL
12592: PUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 110
12602: PUSH
12603: LD_INT 1
12605: EQUAL
12606: AND
12607: IFFALSE 12621
// SetTag ( i , 0 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 0
12616: PPUSH
12617: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 256
12630: PUSH
12631: LD_INT 600
12633: GREATEREQUAL
12634: PUSH
12635: LD_VAR 0 1
12639: PPUSH
12640: CALL_OW 110
12644: NOT
12645: AND
12646: IFFALSE 12672
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12648: LD_VAR 0 1
12652: PPUSH
12653: LD_VAR 0 7
12657: PPUSH
12658: LD_VAR 0 1
12662: PPUSH
12663: CALL_OW 74
12667: PPUSH
12668: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12672: LD_VAR 0 1
12676: PPUSH
12677: CALL_OW 256
12681: PUSH
12682: LD_INT 600
12684: LESS
12685: PUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 110
12695: NOT
12696: AND
12697: IFFALSE 12726
// begin SetTag ( i , 1 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
12711: LD_VAR 0 1
12715: PPUSH
12716: LD_INT 202
12718: PPUSH
12719: LD_INT 150
12721: PPUSH
12722: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
12726: LD_VAR 0 1
12730: PPUSH
12731: CALL_OW 110
12735: PUSH
12736: LD_INT 1
12738: EQUAL
12739: PUSH
12740: LD_VAR 0 1
12744: PPUSH
12745: LD_INT 202
12747: PPUSH
12748: LD_INT 150
12750: PPUSH
12751: CALL_OW 297
12755: PUSH
12756: LD_INT 6
12758: LESS
12759: AND
12760: PUSH
12761: LD_VAR 0 6
12765: AND
12766: IFFALSE 12817
// begin ComExitVehicle ( tmp2 ) ;
12768: LD_VAR 0 6
12772: PPUSH
12773: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
12777: LD_VAR 0 6
12781: PPUSH
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
12791: LD_VAR 0 6
12795: PPUSH
12796: LD_INT 700
12798: PPUSH
12799: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
12803: LD_VAR 0 6
12807: PPUSH
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL_OW 180
// end ; end ;
12817: GO 12552
12819: POP
12820: POP
// until kirovDestroyed ;
12821: LD_EXP 15
12825: IFFALSE 12375
// repeat wait ( 0 0$1 ) ;
12827: LD_INT 35
12829: PPUSH
12830: CALL_OW 67
// for i in omarSquad union Omar do
12834: LD_ADDR_VAR 0 1
12838: PUSH
12839: LD_EXP 33
12843: PUSH
12844: LD_EXP 29
12848: UNION
12849: PUSH
12850: FOR_IN
12851: IFFALSE 12895
// if IsInArea ( i , southRoadArea ) then
12853: LD_VAR 0 1
12857: PPUSH
12858: LD_INT 15
12860: PPUSH
12861: CALL_OW 308
12865: IFFALSE 12878
// RemoveUnit ( i ) else
12867: LD_VAR 0 1
12871: PPUSH
12872: CALL_OW 64
12876: GO 12893
// ComMoveXY ( i , 208 , 162 ) ;
12878: LD_VAR 0 1
12882: PPUSH
12883: LD_INT 208
12885: PPUSH
12886: LD_INT 162
12888: PPUSH
12889: CALL_OW 111
12893: GO 12850
12895: POP
12896: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
12897: LD_INT 22
12899: PUSH
12900: LD_INT 5
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 21
12909: PUSH
12910: LD_INT 1
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PPUSH
12921: CALL_OW 69
12925: NOT
12926: IFFALSE 12827
// end ;
12928: PPOPN 7
12930: END
// every 0 0$1 trigger IsDead ( kirov ) do
12931: LD_INT 71
12933: PPUSH
12934: CALL_OW 301
12938: IFFALSE 12955
12940: GO 12942
12942: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
12943: LD_EXP 21
12947: PPUSH
12948: LD_STRING DH-1-Kirov
12950: PPUSH
12951: CALL_OW 88
12955: END
// every 0 0$1 trigger See ( 2 , beria ) do
12956: LD_INT 2
12958: PPUSH
12959: LD_INT 106
12961: PPUSH
12962: CALL_OW 292
12966: IFFALSE 12983
12968: GO 12970
12970: DISABLE
// Say ( Heike , DH-1-Beria ) ;
12971: LD_EXP 21
12975: PPUSH
12976: LD_STRING DH-1-Beria
12978: PPUSH
12979: CALL_OW 88
12983: END
// every 0 0$1 trigger See ( 2 , kagan ) do
12984: LD_INT 2
12986: PPUSH
12987: LD_INT 112
12989: PPUSH
12990: CALL_OW 292
12994: IFFALSE 13011
12996: GO 12998
12998: DISABLE
// Say ( Heike , DH-1-Kagan ) ;
12999: LD_EXP 21
13003: PPUSH
13004: LD_STRING DH-1-Kagan
13006: PPUSH
13007: CALL_OW 88
13011: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , q ;
13012: LD_INT 2
13014: PPUSH
13015: LD_EXP 45
13019: PPUSH
13020: CALL_OW 292
13024: PUSH
13025: LD_EXP 45
13029: PPUSH
13030: CALL_OW 302
13034: AND
13035: PUSH
13036: LD_EXP 21
13040: PPUSH
13041: CALL_OW 302
13045: AND
13046: PUSH
13047: LD_EXP 31
13051: PPUSH
13052: CALL_OW 302
13056: AND
13057: PUSH
13058: LD_INT 2
13060: PPUSH
13061: CALL_OW 463
13065: NOT
13066: AND
13067: IFFALSE 13433
13069: GO 13071
13071: DISABLE
13072: LD_INT 0
13074: PPUSH
13075: PPUSH
13076: PPUSH
// begin DialogueOn ;
13077: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13081: LD_INT 111
13083: PPUSH
13084: LD_INT 90
13086: PPUSH
13087: LD_INT 2
13089: PPUSH
13090: LD_INT 6
13092: NEG
13093: PPUSH
13094: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13098: LD_INT 111
13100: PPUSH
13101: LD_INT 90
13103: PPUSH
13104: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13108: LD_EXP 31
13112: PPUSH
13113: LD_STRING DA-Cap-1
13115: PPUSH
13116: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13120: LD_EXP 21
13124: PPUSH
13125: LD_STRING DH-Cap-2
13127: PPUSH
13128: CALL_OW 88
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: LD_EXP 32
13141: PUSH
13142: LD_EXP 24
13146: PUSH
13147: LD_EXP 25
13151: PUSH
13152: LD_EXP 27
13156: PUSH
13157: LD_EXP 26
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: UNION
13168: ST_TO_ADDR
// if tmp < 2 then
13169: LD_VAR 0 2
13173: PUSH
13174: LD_INT 2
13176: LESS
13177: IFFALSE 13189
// q := 2 else
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_INT 2
13186: ST_TO_ADDR
13187: GO 13202
// q := Query ( LabCap ) ;
13189: LD_ADDR_VAR 0 3
13193: PUSH
13194: LD_STRING LabCap
13196: PPUSH
13197: CALL_OW 97
13201: ST_TO_ADDR
// case q of 1 :
13202: LD_VAR 0 3
13206: PUSH
13207: LD_INT 1
13209: DOUBLE
13210: EQUAL
13211: IFTRUE 13215
13213: GO 13393
13215: POP
// begin DoNotAttack ( 2 , ruLab ) ;
13216: LD_INT 2
13218: PPUSH
13219: LD_EXP 45
13223: PPUSH
13224: CALL_OW 471
// labCaptured := true ;
13228: LD_ADDR_EXP 20
13232: PUSH
13233: LD_INT 1
13235: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
13236: LD_EXP 21
13240: PPUSH
13241: LD_STRING DH-Cap-a-1
13243: PPUSH
13244: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
13248: LD_EXP 31
13252: PPUSH
13253: LD_STRING DA-Cap-a-2
13255: PPUSH
13256: CALL_OW 88
// SetSide ( ruLab , 5 ) ;
13260: LD_EXP 45
13264: PPUSH
13265: LD_INT 5
13267: PPUSH
13268: CALL_OW 235
// SetSide ( Aviradze , 5 ) ;
13272: LD_EXP 31
13276: PPUSH
13277: LD_INT 5
13279: PPUSH
13280: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
13284: LD_ADDR_EXP 34
13288: PUSH
13289: LD_EXP 31
13293: PUSH
13294: EMPTY
13295: LIST
13296: ST_TO_ADDR
// ComEnterUnit ( Aviradze , ruLab ) ;
13297: LD_EXP 31
13301: PPUSH
13302: LD_EXP 45
13306: PPUSH
13307: CALL_OW 120
// for i := 1 to 2 do
13311: LD_ADDR_VAR 0 1
13315: PUSH
13316: DOUBLE
13317: LD_INT 1
13319: DEC
13320: ST_TO_ADDR
13321: LD_INT 2
13323: PUSH
13324: FOR_TO
13325: IFFALSE 13389
// begin aviradzeSquad := aviradzeSquad union tmp [ i ] ;
13327: LD_ADDR_EXP 34
13331: PUSH
13332: LD_EXP 34
13336: PUSH
13337: LD_VAR 0 2
13341: PUSH
13342: LD_VAR 0 1
13346: ARRAY
13347: UNION
13348: ST_TO_ADDR
// SetSide ( tmp [ i ] , 5 ) ;
13349: LD_VAR 0 2
13353: PUSH
13354: LD_VAR 0 1
13358: ARRAY
13359: PPUSH
13360: LD_INT 5
13362: PPUSH
13363: CALL_OW 235
// ComEnterUnit ( tmp [ i ] , ruLab ) ;
13367: LD_VAR 0 2
13371: PUSH
13372: LD_VAR 0 1
13376: ARRAY
13377: PPUSH
13378: LD_EXP 45
13382: PPUSH
13383: CALL_OW 120
// end ;
13387: GO 13324
13389: POP
13390: POP
// end ; 2 :
13391: GO 13429
13393: LD_INT 2
13395: DOUBLE
13396: EQUAL
13397: IFTRUE 13401
13399: GO 13428
13401: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
13402: LD_EXP 21
13406: PPUSH
13407: LD_STRING DH-Cap-b-1
13409: PPUSH
13410: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
13414: LD_EXP 31
13418: PPUSH
13419: LD_STRING DA-Cap-b-2
13421: PPUSH
13422: CALL_OW 88
// end ; end ;
13426: GO 13429
13428: POP
// DialogueOff ;
13429: CALL_OW 7
// end ;
13433: PPOPN 3
13435: END
// every 0 0$1 trigger kirovDestroyed and beriaDestroyed and kaganDestroyed do var i , tmp , tmp2 , cargo ;
13436: LD_EXP 15
13440: PUSH
13441: LD_EXP 16
13445: AND
13446: PUSH
13447: LD_EXP 17
13451: AND
13452: IFFALSE 14598
13454: GO 13456
13456: DISABLE
13457: LD_INT 0
13459: PPUSH
13460: PPUSH
13461: PPUSH
13462: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
13463: LD_STRING GoToWest
13465: PPUSH
13466: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
13470: LD_INT 17
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
13480: LD_INT 35
13482: PPUSH
13483: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) = FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
13487: LD_INT 22
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 2
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 21
13512: PUSH
13513: LD_INT 2
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 3
13522: PUSH
13523: LD_INT 58
13525: PUSH
13526: EMPTY
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PPUSH
13546: CALL_OW 69
13550: PUSH
13551: LD_INT 17
13553: PPUSH
13554: LD_INT 22
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 2
13566: PUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 21
13579: PUSH
13580: LD_INT 2
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 3
13589: PUSH
13590: LD_INT 58
13592: PUSH
13593: EMPTY
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 70
13617: EQUAL
13618: IFFALSE 13480
// SaveCharacters ( Heike , 04_1_Heike ) ;
13620: LD_EXP 21
13624: PPUSH
13625: LD_STRING 04_1_Heike
13627: PPUSH
13628: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
13632: LD_EXP 31
13636: PUSH
13637: LD_EXP 31
13641: PUSH
13642: LD_EXP 34
13646: IN
13647: NOT
13648: AND
13649: IFFALSE 13665
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
13651: LD_EXP 31
13655: PPUSH
13656: LD_STRING 04_1_Aviradze
13658: PPUSH
13659: CALL_OW 38
13663: GO 13683
// if Aviradze then
13665: LD_EXP 31
13669: IFFALSE 13683
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
13671: LD_EXP 31
13675: PPUSH
13676: LD_STRING 04_1_Aviradze_L
13678: PPUSH
13679: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
13683: LD_EXP 24
13687: PUSH
13688: LD_EXP 24
13692: PUSH
13693: LD_EXP 34
13697: IN
13698: NOT
13699: AND
13700: IFFALSE 13716
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
13702: LD_EXP 24
13706: PPUSH
13707: LD_STRING 04_1_Ibrahim
13709: PPUSH
13710: CALL_OW 38
13714: GO 13734
// if Ibrahim then
13716: LD_EXP 24
13720: IFFALSE 13734
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
13722: LD_EXP 24
13726: PPUSH
13727: LD_STRING 04_1_Ibrahim_L
13729: PPUSH
13730: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
13734: LD_EXP 25
13738: PUSH
13739: LD_EXP 25
13743: PUSH
13744: LD_EXP 34
13748: IN
13749: NOT
13750: AND
13751: IFFALSE 13767
// SaveCharacters ( Kamil , 04_1_Kamil ) else
13753: LD_EXP 25
13757: PPUSH
13758: LD_STRING 04_1_Kamil
13760: PPUSH
13761: CALL_OW 38
13765: GO 13785
// if Kamil then
13767: LD_EXP 25
13771: IFFALSE 13785
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
13773: LD_EXP 25
13777: PPUSH
13778: LD_STRING 04_1_Kamil_L
13780: PPUSH
13781: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
13785: LD_EXP 27
13789: PUSH
13790: LD_EXP 27
13794: PUSH
13795: LD_EXP 34
13799: IN
13800: NOT
13801: AND
13802: IFFALSE 13818
// SaveCharacters ( Sophia , 04_1_Sophia ) else
13804: LD_EXP 27
13808: PPUSH
13809: LD_STRING 04_1_Sophia
13811: PPUSH
13812: CALL_OW 38
13816: GO 13836
// if Sophia then
13818: LD_EXP 27
13822: IFFALSE 13836
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
13824: LD_EXP 27
13828: PPUSH
13829: LD_STRING 04_1_Sophia_L
13831: PPUSH
13832: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
13836: LD_EXP 26
13840: PUSH
13841: LD_EXP 26
13845: PUSH
13846: LD_EXP 34
13850: IN
13851: NOT
13852: AND
13853: IFFALSE 13869
// SaveCharacters ( Kaia , 04_1_Kaia ) else
13855: LD_EXP 26
13859: PPUSH
13860: LD_STRING 04_1_Kaia
13862: PPUSH
13863: CALL_OW 38
13867: GO 13887
// if Kaia then
13869: LD_EXP 26
13873: IFFALSE 13887
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
13875: LD_EXP 26
13879: PPUSH
13880: LD_STRING 04_1_Kaia_L
13882: PPUSH
13883: CALL_OW 38
// if Givi then
13887: LD_EXP 22
13891: IFFALSE 13905
// SaveCharacters ( Givi , 04_1_Givi ) ;
13893: LD_EXP 22
13897: PPUSH
13898: LD_STRING 04_1_Givi
13900: PPUSH
13901: CALL_OW 38
// if Mike then
13905: LD_EXP 23
13909: IFFALSE 13923
// SaveCharacters ( Mike , 04_1_Mike ) ;
13911: LD_EXP 23
13915: PPUSH
13916: LD_STRING 04_1_Mike
13918: PPUSH
13919: CALL_OW 38
// if Markov then
13923: LD_EXP 28
13927: IFFALSE 13941
// SaveCharacters ( Markov , 04_1_Markov ) ;
13929: LD_EXP 28
13933: PPUSH
13934: LD_STRING 04_1_Markov
13936: PPUSH
13937: CALL_OW 38
// if Kurt then
13941: LD_EXP 30
13945: IFFALSE 13959
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
13947: LD_EXP 30
13951: PPUSH
13952: LD_STRING 04_1_Kurt
13954: PPUSH
13955: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
13959: LD_EXP 32
13963: PUSH
13964: LD_EXP 34
13968: DIFF
13969: IFFALSE 13989
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
13971: LD_EXP 32
13975: PUSH
13976: LD_EXP 34
13980: DIFF
13981: PPUSH
13982: LD_STRING 04_1_others
13984: PPUSH
13985: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
13989: LD_EXP 34
13993: PUSH
13994: LD_EXP 32
13998: AND
13999: IFFALSE 14084
// begin tmp := [ ] ;
14001: LD_ADDR_VAR 0 2
14005: PUSH
14006: EMPTY
14007: ST_TO_ADDR
// for i in heikeSecondSquad do
14008: LD_ADDR_VAR 0 1
14012: PUSH
14013: LD_EXP 32
14017: PUSH
14018: FOR_IN
14019: IFFALSE 14064
// if i in aviradzeSquad then
14021: LD_VAR 0 1
14025: PUSH
14026: LD_EXP 34
14030: IN
14031: IFFALSE 14062
// tmp := Replace ( tmp , tmp + 1 , i ) ;
14033: LD_ADDR_VAR 0 2
14037: PUSH
14038: LD_VAR 0 2
14042: PPUSH
14043: LD_VAR 0 2
14047: PUSH
14048: LD_INT 1
14050: PLUS
14051: PPUSH
14052: LD_VAR 0 1
14056: PPUSH
14057: CALL_OW 1
14061: ST_TO_ADDR
14062: GO 14018
14064: POP
14065: POP
// if tmp then
14066: LD_VAR 0 2
14070: IFFALSE 14084
// SaveCharacters ( tmp , 04_1_others_L ) ;
14072: LD_VAR 0 2
14076: PPUSH
14077: LD_STRING 04_1_others_L
14079: PPUSH
14080: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_INT 2
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 23
14101: PUSH
14102: LD_INT 0
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 69
14117: ST_TO_ADDR
// if tmp then
14118: LD_VAR 0 2
14122: IFFALSE 14136
// SaveCharacters ( tmp , 04_1_apes ) ;
14124: LD_VAR 0 2
14128: PPUSH
14129: LD_STRING 04_1_apes
14131: PPUSH
14132: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
14136: LD_ADDR_VAR 0 2
14140: PUSH
14141: LD_INT 17
14143: PPUSH
14144: LD_INT 21
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PPUSH
14154: CALL_OW 70
14158: ST_TO_ADDR
// if tmp then
14159: LD_VAR 0 2
14163: IFFALSE 14457
// begin tmp2 := [ ] ;
14165: LD_ADDR_VAR 0 3
14169: PUSH
14170: EMPTY
14171: ST_TO_ADDR
// for i in tmp do
14172: LD_ADDR_VAR 0 1
14176: PUSH
14177: LD_VAR 0 2
14181: PUSH
14182: FOR_IN
14183: IFFALSE 14443
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
14185: LD_VAR 0 1
14189: PPUSH
14190: CALL_OW 264
14194: PUSH
14195: LD_INT 32
14197: PUSH
14198: LD_INT 12
14200: PUSH
14201: LD_INT 51
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: IN
14209: IFFALSE 14346
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
14211: LD_ADDR_VAR 0 4
14215: PUSH
14216: LD_VAR 0 1
14220: PPUSH
14221: LD_INT 1
14223: PPUSH
14224: CALL_OW 289
14228: PUSH
14229: LD_VAR 0 1
14233: PPUSH
14234: LD_INT 2
14236: PPUSH
14237: CALL_OW 289
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
14246: LD_ADDR_VAR 0 3
14250: PUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: LD_VAR 0 3
14260: PUSH
14261: LD_INT 1
14263: PLUS
14264: PPUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 265
14274: PUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 262
14284: PUSH
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 263
14294: PUSH
14295: LD_VAR 0 1
14299: PPUSH
14300: CALL_OW 264
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 248
14314: PUSH
14315: LD_VAR 0 1
14319: PPUSH
14320: CALL_OW 256
14324: PUSH
14325: LD_VAR 0 4
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 1
14343: ST_TO_ADDR
// end else
14344: GO 14441
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
14346: LD_ADDR_VAR 0 3
14350: PUSH
14351: LD_VAR 0 3
14355: PPUSH
14356: LD_VAR 0 3
14360: PUSH
14361: LD_INT 1
14363: PLUS
14364: PPUSH
14365: LD_VAR 0 1
14369: PPUSH
14370: CALL_OW 265
14374: PUSH
14375: LD_VAR 0 1
14379: PPUSH
14380: CALL_OW 262
14384: PUSH
14385: LD_VAR 0 1
14389: PPUSH
14390: CALL_OW 263
14394: PUSH
14395: LD_VAR 0 1
14399: PPUSH
14400: CALL_OW 264
14404: PUSH
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL_OW 248
14414: PUSH
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 256
14424: PUSH
14425: EMPTY
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: PPUSH
14436: CALL_OW 1
14440: ST_TO_ADDR
14441: GO 14182
14443: POP
14444: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
14445: LD_VAR 0 3
14449: PPUSH
14450: LD_STRING 04_1_Vehicles
14452: PPUSH
14453: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
14457: LD_EXP 20
14461: PPUSH
14462: LD_STRING 04_1_RuLabCaptured
14464: PPUSH
14465: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
14469: LD_EXP 18
14473: PPUSH
14474: LD_STRING 04_1_EscapeCounter
14476: PPUSH
14477: CALL_OW 39
// SaveVariable ( FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) > 0 , 04_1_BaseHill ) ;
14481: LD_INT 10
14483: PPUSH
14484: LD_INT 22
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 21
14496: PUSH
14497: LD_INT 3
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PPUSH
14508: CALL_OW 70
14512: PUSH
14513: LD_INT 0
14515: GREATER
14516: PPUSH
14517: LD_STRING 04_1_BaseHill
14519: PPUSH
14520: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
14524: LD_OWVAR 1
14528: PPUSH
14529: LD_STRING 04_1_Time
14531: PPUSH
14532: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
14536: LD_EXP 14
14540: PPUSH
14541: LD_STRING 04_1_DeadCounter
14543: PPUSH
14544: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
14548: LD_INT 22
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 34
14560: PUSH
14561: LD_INT 26
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 69
14576: PUSH
14577: LD_INT 0
14579: PLUS
14580: PPUSH
14581: LD_STRING 04_1_Flamethrower
14583: PPUSH
14584: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
14588: LD_INT 1
14590: PPUSH
14591: LD_STRING __x1\04_cont2
14593: PPUSH
14594: CALL_OW 340
// end ; end_of_file
14598: PPOPN 4
14600: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 266
14610: PUSH
14611: LD_INT 0
14613: EQUAL
14614: PUSH
14615: LD_VAR 0 1
14619: PPUSH
14620: CALL_OW 255
14624: PUSH
14625: LD_INT 2
14627: EQUAL
14628: AND
14629: IFFALSE 14639
// baseConstructed := true ;
14631: LD_ADDR_EXP 3
14635: PUSH
14636: LD_INT 1
14638: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
14639: LD_VAR 0 1
14643: PPUSH
14644: CALL_OW 266
14648: PUSH
14649: LD_INT 6
14651: EQUAL
14652: PUSH
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL_OW 255
14662: PUSH
14663: LD_INT 2
14665: EQUAL
14666: AND
14667: IFFALSE 14677
// labConstructed := true ;
14669: LD_ADDR_EXP 4
14673: PUSH
14674: LD_INT 1
14676: ST_TO_ADDR
// end ;
14677: PPOPN 1
14679: END
// on UnitDestroyed ( un ) do begin if un = Heike then
14680: LD_VAR 0 1
14684: PUSH
14685: LD_EXP 21
14689: EQUAL
14690: IFFALSE 14699
// YouLost ( Heike ) ;
14692: LD_STRING Heike
14694: PPUSH
14695: CALL_OW 104
// if un = Omar then
14699: LD_VAR 0 1
14703: PUSH
14704: LD_EXP 29
14708: EQUAL
14709: IFFALSE 14718
// YouLost ( Omar ) ;
14711: LD_STRING Omar
14713: PPUSH
14714: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
14718: LD_VAR 0 1
14722: PUSH
14723: LD_INT 22
14725: PUSH
14726: LD_INT 2
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 23
14735: PUSH
14736: LD_INT 2
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 21
14745: PUSH
14746: LD_INT 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 69
14762: IN
14763: IFFALSE 14779
// loseCounter := loseCounter + 1 ;
14765: LD_ADDR_EXP 14
14769: PUSH
14770: LD_EXP 14
14774: PUSH
14775: LD_INT 1
14777: PLUS
14778: ST_TO_ADDR
// if un = omikron then
14779: LD_VAR 0 1
14783: PUSH
14784: LD_INT 64
14786: EQUAL
14787: IFFALSE 14797
// omicronFall := true ;
14789: LD_ADDR_EXP 13
14793: PUSH
14794: LD_INT 1
14796: ST_TO_ADDR
// if un = kirov then
14797: LD_VAR 0 1
14801: PUSH
14802: LD_INT 71
14804: EQUAL
14805: IFFALSE 14822
// begin ChangeMissionObjectives ( KirovDone ) ;
14807: LD_STRING KirovDone
14809: PPUSH
14810: CALL_OW 337
// kirovDestroyed := true ;
14814: LD_ADDR_EXP 15
14818: PUSH
14819: LD_INT 1
14821: ST_TO_ADDR
// end ; if un = beria then
14822: LD_VAR 0 1
14826: PUSH
14827: LD_INT 106
14829: EQUAL
14830: IFFALSE 14847
// begin ChangeMissionObjectives ( BeriaDone ) ;
14832: LD_STRING BeriaDone
14834: PPUSH
14835: CALL_OW 337
// beriaDestroyed := true ;
14839: LD_ADDR_EXP 16
14843: PUSH
14844: LD_INT 1
14846: ST_TO_ADDR
// end ; if un = kagan then
14847: LD_VAR 0 1
14851: PUSH
14852: LD_INT 112
14854: EQUAL
14855: IFFALSE 14872
// begin ChangeMissionObjectives ( KaganDone ) ;
14857: LD_STRING KaganDone
14859: PPUSH
14860: CALL_OW 337
// kaganDestroyed := true ;
14864: LD_ADDR_EXP 17
14868: PUSH
14869: LD_INT 1
14871: ST_TO_ADDR
// end ; if un in russianPatrol then
14872: LD_VAR 0 1
14876: PUSH
14877: LD_EXP 42
14881: IN
14882: IFFALSE 14923
// begin if GetTag ( un ) = 2 then
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 110
14893: PUSH
14894: LD_INT 2
14896: EQUAL
14897: IFFALSE 14907
// spottedByPatrol := false ;
14899: LD_ADDR_EXP 7
14903: PUSH
14904: LD_INT 0
14906: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
14907: LD_ADDR_EXP 42
14911: PUSH
14912: LD_EXP 42
14916: PUSH
14917: LD_VAR 0 1
14921: DIFF
14922: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
14923: LD_VAR 0 1
14927: PUSH
14928: LD_EXP 43
14932: IN
14933: IFFALSE 14951
// russianOmicronAttackers := russianOmicronAttackers diff un ;
14935: LD_ADDR_EXP 43
14939: PUSH
14940: LD_EXP 43
14944: PUSH
14945: LD_VAR 0 1
14949: DIFF
14950: ST_TO_ADDR
// end ;
14951: PPOPN 1
14953: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
14954: LD_INT 0
14956: PPUSH
14957: PPUSH
14958: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
14959: LD_VAR 0 1
14963: PUSH
14964: LD_INT 2
14966: PUSH
14967: LD_INT 22
14969: PUSH
14970: LD_INT 3
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 22
14979: PUSH
14980: LD_INT 4
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_INT 6
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 30
15005: PUSH
15006: LD_INT 32
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PPUSH
15017: CALL_OW 69
15021: IN
15022: IFFALSE 15195
// begin sol := UnitsInside ( un ) ;
15024: LD_ADDR_VAR 0 3
15028: PUSH
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 313
15038: ST_TO_ADDR
// if not sol then
15039: LD_VAR 0 3
15043: NOT
15044: IFFALSE 15048
// exit ;
15046: GO 15195
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15048: LD_ADDR_VAR 0 4
15052: PUSH
15053: LD_INT 22
15055: PUSH
15056: LD_VAR 0 1
15060: PPUSH
15061: CALL_OW 255
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 2
15072: PUSH
15073: LD_INT 30
15075: PUSH
15076: LD_INT 4
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 30
15085: PUSH
15086: LD_INT 5
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PPUSH
15102: CALL_OW 69
15106: ST_TO_ADDR
// if not nearestBarracks then
15107: LD_VAR 0 4
15111: NOT
15112: IFFALSE 15116
// exit ;
15114: GO 15195
// for i in nearestBarracks do
15116: LD_ADDR_VAR 0 2
15120: PUSH
15121: LD_VAR 0 4
15125: PUSH
15126: FOR_IN
15127: IFFALSE 15162
// if UnitsInside ( i ) = 6 then
15129: LD_VAR 0 2
15133: PPUSH
15134: CALL_OW 313
15138: PUSH
15139: LD_INT 6
15141: EQUAL
15142: IFFALSE 15160
// nearestBarracks := nearestBarracks diff i ;
15144: LD_ADDR_VAR 0 4
15148: PUSH
15149: LD_VAR 0 4
15153: PUSH
15154: LD_VAR 0 2
15158: DIFF
15159: ST_TO_ADDR
15160: GO 15126
15162: POP
15163: POP
// if not nearestBarracks then
15164: LD_VAR 0 4
15168: NOT
15169: IFFALSE 15173
// exit ;
15171: GO 15195
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
15173: LD_VAR 0 3
15177: PUSH
15178: LD_INT 1
15180: ARRAY
15181: PPUSH
15182: LD_VAR 0 4
15186: PUSH
15187: LD_INT 1
15189: ARRAY
15190: PPUSH
15191: CALL_OW 120
// end ; end ;
15195: PPOPN 4
15197: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
15198: LD_INT 0
15200: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
15201: LD_EXP 8
15205: NOT
15206: PUSH
15207: LD_EXP 5
15211: NOT
15212: OR
15213: IFFALSE 15217
// exit ;
15215: GO 15285
// for i in camAreas do
15217: LD_ADDR_VAR 0 5
15221: PUSH
15222: LD_EXP 8
15226: PUSH
15227: FOR_IN
15228: IFFALSE 15283
// if InArea ( x , y , i ) then
15230: LD_VAR 0 3
15234: PPUSH
15235: LD_VAR 0 4
15239: PPUSH
15240: LD_VAR 0 5
15244: PPUSH
15245: CALL_OW 309
15249: IFFALSE 15281
// begin SetAreaMapShow ( i , 0 ) ;
15251: LD_VAR 0 5
15255: PPUSH
15256: LD_INT 0
15258: PPUSH
15259: CALL_OW 424
// camAreas := camAreas diff i ;
15263: LD_ADDR_EXP 8
15267: PUSH
15268: LD_EXP 8
15272: PUSH
15273: LD_VAR 0 5
15277: DIFF
15278: ST_TO_ADDR
// break ;
15279: GO 15283
// end ;
15281: GO 15227
15283: POP
15284: POP
// end ;
15285: PPOPN 5
15287: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
15288: LD_VAR 0 1
15292: PUSH
15293: LD_INT 2
15295: EQUAL
15296: PUSH
15297: LD_VAR 0 2
15301: PUSH
15302: LD_INT 5
15304: EQUAL
15305: AND
15306: IFFALSE 15315
// YouLost ( Ally ) ;
15308: LD_STRING Ally
15310: PPUSH
15311: CALL_OW 104
// end ; end_of_file
15315: PPOPN 2
15317: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
15318: LD_EXP 11
15322: NOT
15323: PUSH
15324: LD_INT 12
15326: PPUSH
15327: LD_INT 1
15329: PPUSH
15330: CALL_OW 287
15334: PUSH
15335: LD_INT 200
15337: PUSH
15338: LD_INT 160
15340: PUSH
15341: LD_INT 120
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: PUSH
15349: LD_OWVAR 67
15353: ARRAY
15354: LESS
15355: AND
15356: IFFALSE 15383
15358: GO 15360
15360: DISABLE
// begin enable ;
15361: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
15362: LD_INT 1
15364: PPUSH
15365: LD_INT 5
15367: PPUSH
15368: CALL_OW 12
15372: PPUSH
15373: LD_INT 12
15375: PPUSH
15376: LD_INT 1
15378: PPUSH
15379: CALL_OW 55
// end ;
15383: END
