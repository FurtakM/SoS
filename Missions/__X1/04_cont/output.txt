// starting begin InitMap ;
   0: CALL 1440 0 0
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitTriggers ;
  11: CALL 1825 0 0
// Start_Game ;
  15: CALL 13213 0 0
// InitPlayer ;
  19: CALL 2062 0 0
// InitRussian ;
  23: CALL 2952 0 0
// end ; end_of_file
  27: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
  28: LD_INT 0
  30: PPUSH
  31: PPUSH
  32: PPUSH
  33: PPUSH
  34: PPUSH
// uc_nation = nation_nature ;
  35: LD_ADDR_OWVAR 21
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// uc_side = 0 ;
  43: LD_ADDR_OWVAR 20
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// l = 0 ;
  51: LD_ADDR_VAR 0 6
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
  59: LD_ADDR_OWVAR 24
  63: PUSH
  64: LD_INT 0
  66: PPUSH
  67: LD_INT 5
  69: PPUSH
  70: CALL_OW 12
  74: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
  75: LD_ADDR_OWVAR 35
  79: PUSH
  80: LD_INT 5
  82: NEG
  83: PPUSH
  84: LD_INT 5
  86: PPUSH
  87: CALL_OW 12
  91: ST_TO_ADDR
// hc_gallery =  ;
  92: LD_ADDR_OWVAR 33
  96: PUSH
  97: LD_STRING 
  99: ST_TO_ADDR
// hc_class = class_apeman ;
 100: LD_ADDR_OWVAR 28
 104: PUSH
 105: LD_INT 12
 107: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 108: LD_ADDR_OWVAR 29
 112: PUSH
 113: LD_INT 11
 115: PPUSH
 116: LD_INT 13
 118: PPUSH
 119: CALL_OW 12
 123: PUSH
 124: LD_INT 10
 126: PPUSH
 127: LD_INT 11
 129: PPUSH
 130: CALL_OW 12
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: ST_TO_ADDR
// hc_sex = sex_male ;
 139: LD_ADDR_OWVAR 27
 143: PUSH
 144: LD_INT 1
 146: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 147: LD_ADDR_OWVAR 31
 151: PUSH
 152: LD_INT 0
 154: PPUSH
 155: LD_INT 2
 157: PPUSH
 158: CALL_OW 12
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: EMPTY
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: ST_TO_ADDR
// apeman = CreateHuman ;
 178: LD_ADDR_VAR 0 7
 182: PUSH
 183: CALL_OW 44
 187: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 188: LD_VAR 0 7
 192: PPUSH
 193: LD_VAR 0 4
 197: PPUSH
 198: LD_INT 0
 200: PPUSH
 201: CALL_OW 49
// l = l + 1 ;
 205: LD_ADDR_VAR 0 6
 209: PUSH
 210: LD_VAR 0 6
 214: PUSH
 215: LD_INT 1
 217: PLUS
 218: ST_TO_ADDR
// end until l = num1 ;
 219: LD_VAR 0 6
 223: PUSH
 224: LD_VAR 0 1
 228: EQUAL
 229: IFFALSE 59
// l = 0 ;
 231: LD_ADDR_VAR 0 6
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 239: LD_ADDR_OWVAR 35
 243: PUSH
 244: LD_INT 0
 246: PPUSH
 247: LD_INT 25
 249: PPUSH
 250: CALL_OW 12
 254: ST_TO_ADDR
// hc_class = class_tiger ;
 255: LD_ADDR_OWVAR 28
 259: PUSH
 260: LD_INT 14
 262: ST_TO_ADDR
// hc_sex = sex_male ;
 263: LD_ADDR_OWVAR 27
 267: PUSH
 268: LD_INT 1
 270: ST_TO_ADDR
// hc_gallery = sandnature ;
 271: LD_ADDR_OWVAR 33
 275: PUSH
 276: LD_STRING sandnature
 278: ST_TO_ADDR
// hc_face_number = 3 ;
 279: LD_ADDR_OWVAR 34
 283: PUSH
 284: LD_INT 3
 286: ST_TO_ADDR
// tiger = CreateHuman ;
 287: LD_ADDR_VAR 0 8
 291: PUSH
 292: CALL_OW 44
 296: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 297: LD_VAR 0 8
 301: PPUSH
 302: LD_VAR 0 4
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// l = l + 1 ;
 314: LD_ADDR_VAR 0 6
 318: PUSH
 319: LD_VAR 0 6
 323: PUSH
 324: LD_INT 1
 326: PLUS
 327: ST_TO_ADDR
// end until l = num2 ;
 328: LD_VAR 0 6
 332: PUSH
 333: LD_VAR 0 2
 337: EQUAL
 338: IFFALSE 239
// l = 0 ;
 340: LD_ADDR_VAR 0 6
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 348: LD_ADDR_OWVAR 28
 352: PUSH
 353: LD_INT 18
 355: ST_TO_ADDR
// hc_gallery = sandnature ;
 356: LD_ADDR_OWVAR 33
 360: PUSH
 361: LD_STRING sandnature
 363: ST_TO_ADDR
// hc_face_number = 1 ;
 364: LD_ADDR_OWVAR 34
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// bird = CreateHuman ;
 372: LD_ADDR_VAR 0 9
 376: PUSH
 377: CALL_OW 44
 381: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 382: LD_VAR 0 9
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 51
// l = l + 1 ;
 394: LD_ADDR_VAR 0 6
 398: PUSH
 399: LD_VAR 0 6
 403: PUSH
 404: LD_INT 1
 406: PLUS
 407: ST_TO_ADDR
// end until l = num3 ;
 408: LD_VAR 0 6
 412: PUSH
 413: LD_VAR 0 3
 417: EQUAL
 418: IFFALSE 348
// end ;
 420: LD_VAR 0 5
 424: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 425: LD_INT 0
 427: PPUSH
 428: PPUSH
 429: PPUSH
 430: PPUSH
 431: PPUSH
 432: PPUSH
// hc_class := clas ;
 433: LD_ADDR_OWVAR 28
 437: PUSH
 438: LD_VAR 0 1
 442: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 443: LD_ADDR_VAR 0 4
 447: PUSH
 448: LD_VAR 0 2
 452: PUSH
 453: LD_INT 1
 455: NEG
 456: PPUSH
 457: LD_INT 1
 459: PPUSH
 460: CALL_OW 12
 464: PLUS
 465: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 466: LD_ADDR_VAR 0 5
 470: PUSH
 471: LD_VAR 0 2
 475: PUSH
 476: LD_INT 1
 478: NEG
 479: PPUSH
 480: LD_INT 1
 482: PPUSH
 483: CALL_OW 12
 487: PLUS
 488: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 489: LD_ADDR_VAR 0 6
 493: PUSH
 494: LD_VAR 0 2
 498: PUSH
 499: LD_INT 1
 501: NEG
 502: PPUSH
 503: LD_INT 1
 505: PPUSH
 506: CALL_OW 12
 510: PLUS
 511: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 512: LD_ADDR_VAR 0 7
 516: PUSH
 517: LD_VAR 0 2
 521: PUSH
 522: LD_INT 1
 524: NEG
 525: PPUSH
 526: LD_INT 1
 528: PPUSH
 529: CALL_OW 12
 533: PLUS
 534: ST_TO_ADDR
// if clas = 1 or clas = 9 then
 535: LD_VAR 0 1
 539: PUSH
 540: LD_INT 1
 542: EQUAL
 543: PUSH
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 9
 551: EQUAL
 552: OR
 553: IFFALSE 578
// bonus := [ 2 , 0 , 0 , 0 ] ;
 555: LD_ADDR_VAR 0 8
 559: PUSH
 560: LD_INT 2
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: LD_INT 0
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: ST_TO_ADDR
// if clas = 2 then
 578: LD_VAR 0 1
 582: PUSH
 583: LD_INT 2
 585: EQUAL
 586: IFFALSE 611
// bonus := [ 0 , 2 , 0 , 0 ] ;
 588: LD_ADDR_VAR 0 8
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: ST_TO_ADDR
// if clas = 3 then
 611: LD_VAR 0 1
 615: PUSH
 616: LD_INT 3
 618: EQUAL
 619: IFFALSE 644
// bonus := [ 0 , 0 , 2 , 0 ] ;
 621: LD_ADDR_VAR 0 8
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: LD_INT 0
 631: PUSH
 632: LD_INT 2
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: ST_TO_ADDR
// if clas = 4 then
 644: LD_VAR 0 1
 648: PUSH
 649: LD_INT 4
 651: EQUAL
 652: IFFALSE 677
// bonus := [ 0 , 0 , 0 , 2 ] ;
 654: LD_ADDR_VAR 0 8
 658: PUSH
 659: LD_INT 0
 661: PUSH
 662: LD_INT 0
 664: PUSH
 665: LD_INT 0
 667: PUSH
 668: LD_INT 2
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: ST_TO_ADDR
// if clas > 4 and not clas = 9 then
 677: LD_VAR 0 1
 681: PUSH
 682: LD_INT 4
 684: GREATER
 685: PUSH
 686: LD_VAR 0 1
 690: PUSH
 691: LD_INT 9
 693: EQUAL
 694: NOT
 695: AND
 696: IFFALSE 721
// bonus := [ 0 , 0 , 0 , 0 ] ;
 698: LD_ADDR_VAR 0 8
 702: PUSH
 703: LD_INT 0
 705: PUSH
 706: LD_INT 0
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
 721: LD_ADDR_OWVAR 31
 725: PUSH
 726: LD_VAR 0 4
 730: PUSH
 731: LD_VAR 0 8
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PLUS
 740: PUSH
 741: LD_VAR 0 5
 745: PUSH
 746: LD_VAR 0 8
 750: PUSH
 751: LD_INT 2
 753: ARRAY
 754: PLUS
 755: PUSH
 756: LD_VAR 0 6
 760: PUSH
 761: LD_VAR 0 8
 765: PUSH
 766: LD_INT 3
 768: ARRAY
 769: PLUS
 770: PUSH
 771: LD_VAR 0 7
 775: PUSH
 776: LD_VAR 0 8
 780: PUSH
 781: LD_INT 4
 783: ARRAY
 784: PLUS
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
 792: LD_ADDR_OWVAR 27
 796: PUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 2
 802: PPUSH
 803: CALL_OW 12
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
 816: LD_ADDR_OWVAR 29
 820: PUSH
 821: LD_INT 8
 823: PPUSH
 824: LD_INT 12
 826: PPUSH
 827: CALL_OW 12
 831: PUSH
 832: LD_INT 9
 834: PPUSH
 835: LD_INT 11
 837: PPUSH
 838: CALL_OW 12
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// hc_name :=  ;
 847: LD_ADDR_OWVAR 26
 851: PUSH
 852: LD_STRING 
 854: ST_TO_ADDR
// result := CreateHuman ;
 855: LD_ADDR_VAR 0 3
 859: PUSH
 860: CALL_OW 44
 864: ST_TO_ADDR
// end ;
 865: LD_VAR 0 3
 869: RET
// export function SeeSide ( unit , side ) ; var i ; begin
 870: LD_INT 0
 872: PPUSH
 873: PPUSH
// result := false ;
 874: LD_ADDR_VAR 0 3
 878: PUSH
 879: LD_INT 0
 881: ST_TO_ADDR
// i := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
 882: LD_ADDR_VAR 0 4
 886: PUSH
 887: LD_INT 22
 889: PUSH
 890: LD_VAR 0 2
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PPUSH
 899: CALL_OW 69
 903: PPUSH
 904: LD_VAR 0 1
 908: PPUSH
 909: CALL_OW 74
 913: ST_TO_ADDR
// if GetDistUnits ( unit , i ) < 9 then
 914: LD_VAR 0 1
 918: PPUSH
 919: LD_VAR 0 4
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 9
 931: LESS
 932: IFFALSE 942
// result := true ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: ST_TO_ADDR
// end ;
 942: LD_VAR 0 3
 946: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
 947: LD_VAR 0 1
 951: PUSH
 952: LD_EXP 1
 956: IN
 957: NOT
 958: IFFALSE 989
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
 960: LD_ADDR_EXP 1
 964: PUSH
 965: LD_EXP 1
 969: PPUSH
 970: LD_EXP 1
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: LD_VAR 0 1
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: PPOPN 1
 991: END
// export function ComAttack ( unit , ignore_list ) ; var i , j , target , enemy_list , _list , types_list ; begin
 992: LD_INT 0
 994: PPUSH
 995: PPUSH
 996: PPUSH
 997: PPUSH
 998: PPUSH
 999: PPUSH
1000: PPUSH
// if not IsPlaced ( unit ) then
1001: LD_VAR 0 1
1005: PPUSH
1006: CALL_OW 305
1010: NOT
1011: IFFALSE 1015
// exit ;
1013: GO 1322
// enemy_list := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
1015: LD_ADDR_VAR 0 7
1019: PUSH
1020: LD_INT 81
1022: PUSH
1023: LD_VAR 0 1
1027: PPUSH
1028: CALL_OW 255
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: ST_TO_ADDR
// if not enemy_list then
1042: LD_VAR 0 7
1046: NOT
1047: IFFALSE 1051
// exit ;
1049: GO 1322
// if ignore_list then
1051: LD_VAR 0 2
1055: IFFALSE 1197
// begin _list := [ ] ;
1057: LD_ADDR_VAR 0 8
1061: PUSH
1062: EMPTY
1063: ST_TO_ADDR
// types_list := [ f_btype , f_weapon , f_class ] ;
1064: LD_ADDR_VAR 0 9
1068: PUSH
1069: LD_INT 30
1071: PUSH
1072: LD_INT 34
1074: PUSH
1075: LD_INT 25
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: ST_TO_ADDR
// for i = 1 to 3 do
1083: LD_ADDR_VAR 0 4
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_INT 3
1095: PUSH
1096: FOR_TO
1097: IFFALSE 1195
// begin if not ignore_list [ i ] then
1099: LD_VAR 0 2
1103: PUSH
1104: LD_VAR 0 4
1108: ARRAY
1109: NOT
1110: IFFALSE 1116
// continue else
1112: GO 1096
1114: GO 1193
// for j in ignore_list [ i ] do
1116: LD_ADDR_VAR 0 5
1120: PUSH
1121: LD_VAR 0 2
1125: PUSH
1126: LD_VAR 0 4
1130: ARRAY
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1191
// begin _list := Insert ( _list , _list + 1 , UnitFilter ( enemy_list , [ types_list [ i ] , j ] ) ) ;
1135: LD_ADDR_VAR 0 8
1139: PUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: LD_VAR 0 8
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: PPUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 9
1163: PUSH
1164: LD_VAR 0 4
1168: ARRAY
1169: PUSH
1170: LD_VAR 0 5
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 72
1183: PPUSH
1184: CALL_OW 2
1188: ST_TO_ADDR
// end ;
1189: GO 1132
1191: POP
1192: POP
// end ;
1193: GO 1096
1195: POP
1196: POP
// end ; if enemy_list diff _list > 0 then
1197: LD_VAR 0 7
1201: PUSH
1202: LD_VAR 0 8
1206: PUSH
1207: LD_INT 0
1209: GREATER
1210: DIFF
1211: IFFALSE 1229
// enemy_list := enemy_list diff _list ;
1213: LD_ADDR_VAR 0 7
1217: PUSH
1218: LD_VAR 0 7
1222: PUSH
1223: LD_VAR 0 8
1227: DIFF
1228: ST_TO_ADDR
// target := NearestUnitToUnit ( enemy_list , unit ) ;
1229: LD_ADDR_VAR 0 6
1233: PUSH
1234: LD_VAR 0 7
1238: PPUSH
1239: LD_VAR 0 1
1243: PPUSH
1244: CALL_OW 74
1248: ST_TO_ADDR
// if not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
1249: LD_VAR 0 1
1253: PPUSH
1254: LD_VAR 0 6
1258: PPUSH
1259: CALL_OW 250
1263: PPUSH
1264: LD_VAR 0 6
1268: PPUSH
1269: CALL_OW 251
1273: PPUSH
1274: CALL 1327 0 3
1278: NOT
1279: IFFALSE 1322
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ) ;
1281: LD_VAR 0 1
1285: PPUSH
1286: LD_INT 81
1288: PUSH
1289: LD_VAR 0 1
1293: PPUSH
1294: CALL_OW 255
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: PPUSH
1308: LD_VAR 0 1
1312: PPUSH
1313: CALL_OW 74
1317: PPUSH
1318: CALL_OW 115
// end ;
1322: LD_VAR 0 3
1326: RET
// export function DestinationReachable ( unit , x , y ) ; begin
1327: LD_INT 0
1329: PPUSH
// if unit in unreachableList then
1330: LD_VAR 0 1
1334: PUSH
1335: LD_EXP 1
1339: IN
1340: IFFALSE 1358
// unreachableList := unreachableList diff unit ;
1342: LD_ADDR_EXP 1
1346: PUSH
1347: LD_EXP 1
1351: PUSH
1352: LD_VAR 0 1
1356: DIFF
1357: ST_TO_ADDR
// if ValidHex ( x , y ) then
1358: LD_VAR 0 2
1362: PPUSH
1363: LD_VAR 0 3
1367: PPUSH
1368: CALL_OW 488
1372: IFFALSE 1398
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
1374: LD_VAR 0 1
1378: PPUSH
1379: LD_VAR 0 2
1383: PPUSH
1384: LD_VAR 0 3
1388: PPUSH
1389: CALL_OW 428
1393: PPUSH
1394: CALL_OW 115
// Wait ( 1 ) ;
1398: LD_INT 1
1400: PPUSH
1401: CALL_OW 67
// if unit in unreachableList then
1405: LD_VAR 0 1
1409: PUSH
1410: LD_EXP 1
1414: IN
1415: IFFALSE 1427
// result := false else
1417: LD_ADDR_VAR 0 4
1421: PUSH
1422: LD_INT 0
1424: ST_TO_ADDR
1425: GO 1435
// result := true ;
1427: LD_ADDR_VAR 0 4
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// end ; end_of_file
1435: LD_VAR 0 4
1439: RET
// export function InitMap ; begin
1440: LD_INT 0
1442: PPUSH
// ResetFog ;
1443: CALL_OW 335
// PrepareAnimals ( 2 , 3 , 3 , nature_area ) ;
1447: LD_INT 2
1449: PPUSH
1450: LD_INT 3
1452: PPUSH
1453: LD_INT 3
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 28 0 4
// end ;
1463: LD_VAR 0 1
1467: RET
// export function SpawnCrates ; var i ; begin
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
// while ( crates_allow ) do
1472: LD_EXP 13
1476: IFFALSE 1629
// begin Wait ( crates_time + Rand ( - 0 0$10 , 0 0$20 ) ) ;
1478: LD_EXP 11
1482: PUSH
1483: LD_INT 350
1485: NEG
1486: PPUSH
1487: LD_INT 700
1489: PPUSH
1490: CALL_OW 12
1494: PLUS
1495: PPUSH
1496: CALL_OW 67
// for i = 1 to crates_num do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: DOUBLE
1506: LD_INT 1
1508: DEC
1509: ST_TO_ADDR
1510: LD_EXP 12
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1625
// begin CreateCratesArea ( Rand ( 1 , 5 ) , crates_main_area , true ) ;
1518: LD_INT 1
1520: PPUSH
1521: LD_INT 5
1523: PPUSH
1524: CALL_OW 12
1528: PPUSH
1529: LD_INT 2
1531: PPUSH
1532: LD_INT 1
1534: PPUSH
1535: CALL_OW 55
// Wait ( Rand ( 0 0$03 , 0 0$12 ) ) ;
1539: LD_INT 105
1541: PPUSH
1542: LD_INT 420
1544: PPUSH
1545: CALL_OW 12
1549: PPUSH
1550: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_main_area , true ) ;
1554: LD_INT 1
1556: PPUSH
1557: LD_INT 5
1559: PPUSH
1560: CALL_OW 12
1564: PPUSH
1565: LD_INT 2
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: CALL_OW 55
// Wait ( Rand ( 0 0$04 , 0 0$15 ) ) ;
1575: LD_INT 140
1577: PPUSH
1578: LD_INT 525
1580: PPUSH
1581: CALL_OW 12
1585: PPUSH
1586: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 5
1595: PPUSH
1596: CALL_OW 12
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 57
// Wait ( Rand ( 0 0$05 , 0 0$10 ) ) ;
1608: LD_INT 175
1610: PPUSH
1611: LD_INT 350
1613: PPUSH
1614: CALL_OW 12
1618: PPUSH
1619: CALL_OW 67
// end ;
1623: GO 1515
1625: POP
1626: POP
// end ;
1627: GO 1472
// end ;
1629: LD_VAR 0 1
1633: RET
// every 1 1$25 trigger game_started do
1634: LD_EXP 10
1638: IFFALSE 1692
1640: GO 1642
1642: DISABLE
// begin enable ;
1643: ENABLE
// if timer <= [ 23 23$00 , 21 21$00 , 19 19$00 ] [ global_diff ] then
1644: LD_EXP 2
1648: PUSH
1649: LD_INT 48300
1651: PUSH
1652: LD_INT 44100
1654: PUSH
1655: LD_INT 39900
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: PUSH
1663: LD_EXP 3
1667: ARRAY
1668: LESSEQUAL
1669: IFFALSE 1692
// CreateCratesArea ( Rand ( 2 , 5 ) , us_crates , true ) ;
1671: LD_INT 2
1673: PPUSH
1674: LD_INT 5
1676: PPUSH
1677: CALL_OW 12
1681: PPUSH
1682: LD_INT 12
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: CALL_OW 55
// end ;
1692: END
// every 0 0$01 trigger game_started do
1693: LD_EXP 10
1697: IFFALSE 1706
1699: GO 1701
1701: DISABLE
// SpawnCrates ;
1702: CALL 1468 0 0
1706: END
// export timer ; every 1 do
1707: GO 1709
1709: DISABLE
// timer := 0 0$00 ;
1710: LD_ADDR_EXP 2
1714: PUSH
1715: LD_INT 0
1717: ST_TO_ADDR
1718: END
// every 0 0$01 trigger game_started do
1719: LD_EXP 10
1723: IFFALSE 1760
1725: GO 1727
1727: DISABLE
// begin enable ;
1728: ENABLE
// timer := timer + 0 0$01 ;
1729: LD_ADDR_EXP 2
1733: PUSH
1734: LD_EXP 2
1738: PUSH
1739: LD_INT 35
1741: PLUS
1742: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
1743: LD_ADDR_OWVAR 47
1747: PUSH
1748: LD_STRING #tick
1750: PUSH
1751: LD_EXP 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: ST_TO_ADDR
// end ;
1760: END
// every 0 0$01 trigger timer <= 13 13$00 do
1761: LD_EXP 2
1765: PUSH
1766: LD_INT 27300
1768: LESSEQUAL
1769: IFFALSE 1782
1771: GO 1773
1773: DISABLE
// music_nat := 1 ;
1774: LD_ADDR_OWVAR 71
1778: PUSH
1779: LD_INT 1
1781: ST_TO_ADDR
1782: END
// every 5 5$00 trigger timer > 13 13$00 do
1783: LD_EXP 2
1787: PUSH
1788: LD_INT 27300
1790: GREATER
1791: IFFALSE 1824
1793: GO 1795
1795: DISABLE
// begin enable ;
1796: ENABLE
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1797: LD_ADDR_OWVAR 71
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 3
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 12
1822: ARRAY
1823: ST_TO_ADDR
// end ; end_of_file
1824: END
// export global_diff , ru_force , ru_def , am_def , am_force , ar_def , ar_force ; export game_started ; export crates_time , crates_num , crates_allow ; export sikorski , kurin , heike , ron , jack ; export sikorski_come , russian_produce , beria_action , sikorski_veh ; export function InitTriggers ; begin
1825: LD_INT 0
1827: PPUSH
// game_started := false ;
1828: LD_ADDR_EXP 10
1832: PUSH
1833: LD_INT 0
1835: ST_TO_ADDR
// global_diff := [ 1 , 2 , 3 ] ;
1836: LD_ADDR_EXP 3
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 2
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: ST_TO_ADDR
// crates_time := [ 0 0$55 , 1 1$15 , 1 1$35 ] [ global_diff ] ;
1855: LD_ADDR_EXP 11
1859: PUSH
1860: LD_INT 1925
1862: PUSH
1863: LD_INT 2625
1865: PUSH
1866: LD_INT 3325
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_EXP 3
1878: ARRAY
1879: ST_TO_ADDR
// crates_num := [ 3 , 2 , 1 ] [ global_diff ] ;
1880: LD_ADDR_EXP 12
1884: PUSH
1885: LD_INT 3
1887: PUSH
1888: LD_INT 2
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_EXP 3
1903: ARRAY
1904: ST_TO_ADDR
// crates_allow := false ;
1905: LD_ADDR_EXP 13
1909: PUSH
1910: LD_INT 0
1912: ST_TO_ADDR
// am_def := [ 4 , 3 , 2 ] [ global_diff ] ;
1913: LD_ADDR_EXP 6
1917: PUSH
1918: LD_INT 4
1920: PUSH
1921: LD_INT 3
1923: PUSH
1924: LD_INT 2
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_EXP 3
1936: ARRAY
1937: ST_TO_ADDR
// ru_def := [ 2 , 3 , 4 ] [ global_diff ] ;
1938: LD_ADDR_EXP 5
1942: PUSH
1943: LD_INT 2
1945: PUSH
1946: LD_INT 3
1948: PUSH
1949: LD_INT 4
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: LD_EXP 3
1961: ARRAY
1962: ST_TO_ADDR
// ru_force := [ 16 , 18 , 20 ] [ global_diff ] ;
1963: LD_ADDR_EXP 4
1967: PUSH
1968: LD_INT 16
1970: PUSH
1971: LD_INT 18
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_EXP 3
1986: ARRAY
1987: ST_TO_ADDR
// ar_def := [ 3 , 4 , 5 ] [ global_diff ] ;
1988: LD_ADDR_EXP 8
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: LD_INT 4
1998: PUSH
1999: LD_INT 5
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_EXP 3
2011: ARRAY
2012: ST_TO_ADDR
// ar_force := [ 4 , 5 , 6 ] [ global_diff ] ;
2013: LD_ADDR_EXP 9
2017: PUSH
2018: LD_INT 4
2020: PUSH
2021: LD_INT 5
2023: PUSH
2024: LD_INT 6
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_EXP 3
2036: ARRAY
2037: ST_TO_ADDR
// sikorski_come := false ;
2038: LD_ADDR_EXP 19
2042: PUSH
2043: LD_INT 0
2045: ST_TO_ADDR
// russian_produce := false ;
2046: LD_ADDR_EXP 20
2050: PUSH
2051: LD_INT 0
2053: ST_TO_ADDR
// disable ( 99 ) ;
2054: LD_INT 99
2056: DISABLE_MARKED
// end ; end_of_file
2057: LD_VAR 0 1
2061: RET
// export function InitPlayer ; var i , p , un , am , am2 , filter ; begin
2062: LD_INT 0
2064: PPUSH
2065: PPUSH
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
2070: PPUSH
// uc_nation := nation_american ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 1
2078: ST_TO_ADDR
// am := 1 ;
2079: LD_ADDR_VAR 0 5
2083: PUSH
2084: LD_INT 1
2086: ST_TO_ADDR
// am2 := 4 ;
2087: LD_ADDR_VAR 0 6
2091: PUSH
2092: LD_INT 4
2094: ST_TO_ADDR
// filter := [ ] ;
2095: LD_ADDR_VAR 0 7
2099: PUSH
2100: EMPTY
2101: ST_TO_ADDR
// SetSide ( omikron , am2 ) ;
2102: LD_INT 64
2104: PPUSH
2105: LD_VAR 0 6
2109: PPUSH
2110: CALL_OW 235
// SetBName ( omikron , omikron ) ;
2114: LD_INT 64
2116: PPUSH
2117: LD_STRING omikron
2119: PPUSH
2120: CALL_OW 500
// ResetFog ;
2124: CALL_OW 335
// uc_side := am2 ;
2128: LD_ADDR_OWVAR 20
2132: PUSH
2133: LD_VAR 0 6
2137: ST_TO_ADDR
// for i = 1 to 4 do
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: DOUBLE
2144: LD_INT 1
2146: DEC
2147: ST_TO_ADDR
2148: LD_INT 4
2150: PUSH
2151: FOR_TO
2152: IFFALSE 2274
// for p = 1 to 2 do
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: DOUBLE
2160: LD_INT 1
2162: DEC
2163: ST_TO_ADDR
2164: LD_INT 2
2166: PUSH
2167: FOR_TO
2168: IFFALSE 2270
// begin un := CreateHumanWithClass ( i , am_def ) ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_EXP 6
2184: PPUSH
2185: CALL 425 0 2
2189: ST_TO_ADDR
// PlaceUnitArea ( un , am_area , false ) ;
2190: LD_VAR 0 4
2194: PPUSH
2195: LD_INT 3
2197: PPUSH
2198: LD_INT 0
2200: PPUSH
2201: CALL_OW 49
// if GetClass ( un ) = 1 then
2205: LD_VAR 0 4
2209: PPUSH
2210: CALL_OW 257
2214: PUSH
2215: LD_INT 1
2217: EQUAL
2218: IFFALSE 2268
// ComEnterUnit ( un , ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) diff us_spec_b ) [ p ] ) ;
2220: LD_VAR 0 4
2224: PPUSH
2225: LD_INT 22
2227: PUSH
2228: LD_INT 4
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 30
2237: PUSH
2238: LD_INT 31
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PPUSH
2249: CALL_OW 69
2253: PUSH
2254: LD_INT 140
2256: DIFF
2257: PUSH
2258: LD_VAR 0 3
2262: ARRAY
2263: PPUSH
2264: CALL_OW 120
// end ;
2268: GO 2167
2270: POP
2271: POP
2272: GO 2151
2274: POP
2275: POP
// if IsPlaced ( us_spec_b ) then
2276: LD_INT 140
2278: PPUSH
2279: CALL_OW 305
2283: IFFALSE 2347
// begin un := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] ] ) [ 1 ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: LD_INT 22
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 25
2302: PUSH
2303: LD_INT 3
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PUSH
2319: LD_INT 1
2321: ARRAY
2322: ST_TO_ADDR
// SetClass ( un , 1 ) ;
2323: LD_VAR 0 4
2327: PPUSH
2328: LD_INT 1
2330: PPUSH
2331: CALL_OW 336
// ComEnterUnit ( un , us_spec_b ) ;
2335: LD_VAR 0 4
2339: PPUSH
2340: LD_INT 140
2342: PPUSH
2343: CALL_OW 120
// end ; vc_chassis := us_medium_wheeled ;
2347: LD_ADDR_OWVAR 37
2351: PUSH
2352: LD_INT 2
2354: ST_TO_ADDR
// vc_engine := engine_solar ;
2355: LD_ADDR_OWVAR 39
2359: PUSH
2360: LD_INT 2
2362: ST_TO_ADDR
// vc_control := control_manual ;
2363: LD_ADDR_OWVAR 38
2367: PUSH
2368: LD_INT 1
2370: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_gatling_gun ] [ global_diff ] ;
2371: LD_ADDR_OWVAR 40
2375: PUSH
2376: LD_INT 5
2378: PUSH
2379: LD_INT 5
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: LD_EXP 3
2394: ARRAY
2395: ST_TO_ADDR
// un := CreateVehicle ;
2396: LD_ADDR_VAR 0 4
2400: PUSH
2401: CALL_OW 45
2405: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2406: LD_VAR 0 4
2410: PPUSH
2411: LD_INT 4
2413: PPUSH
2414: CALL_OW 233
// PlaceUnitXY ( un , 12 , 17 , false ) ;
2418: LD_VAR 0 4
2422: PPUSH
2423: LD_INT 12
2425: PPUSH
2426: LD_INT 17
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: CALL_OW 48
// vc_chassis := us_light_wheeled ;
2436: LD_ADDR_OWVAR 37
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_engine := engine_combustion ;
2444: LD_ADDR_OWVAR 39
2448: PUSH
2449: LD_INT 1
2451: ST_TO_ADDR
// vc_control := control_manual ;
2452: LD_ADDR_OWVAR 38
2456: PUSH
2457: LD_INT 1
2459: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2460: LD_ADDR_OWVAR 40
2464: PUSH
2465: LD_INT 3
2467: ST_TO_ADDR
// un := CreateVehicle ;
2468: LD_ADDR_VAR 0 4
2472: PUSH
2473: CALL_OW 45
2477: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2478: LD_VAR 0 4
2482: PPUSH
2483: LD_INT 4
2485: PPUSH
2486: CALL_OW 233
// PlaceUnitXY ( un , 19 , 19 , false ) ;
2490: LD_VAR 0 4
2494: PPUSH
2495: LD_INT 19
2497: PPUSH
2498: LD_INT 19
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// uc_side := am ;
2508: LD_ADDR_OWVAR 20
2512: PUSH
2513: LD_VAR 0 5
2517: ST_TO_ADDR
// hc_importance := 100 ;
2518: LD_ADDR_OWVAR 32
2522: PUSH
2523: LD_INT 100
2525: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
2526: LD_ADDR_OWVAR 26
2530: PUSH
2531: LD_STRING Jeremy Sikorski
2533: ST_TO_ADDR
// hc_gallery := us ;
2534: LD_ADDR_OWVAR 33
2538: PUSH
2539: LD_STRING us
2541: ST_TO_ADDR
// hc_face_number := 19 ;
2542: LD_ADDR_OWVAR 34
2546: PUSH
2547: LD_INT 19
2549: ST_TO_ADDR
// hc_skills := [ Rand ( am_def + 2 , am_def + 4 ) , Rand ( am_def - 1 , am_def + 1 ) , Rand ( am_def - 1 , am_def + 1 ) , Rand ( am_def - 1 , am_def + 1 ) ] ;
2550: LD_ADDR_OWVAR 31
2554: PUSH
2555: LD_EXP 6
2559: PUSH
2560: LD_INT 2
2562: PLUS
2563: PPUSH
2564: LD_EXP 6
2568: PUSH
2569: LD_INT 4
2571: PLUS
2572: PPUSH
2573: CALL_OW 12
2577: PUSH
2578: LD_EXP 6
2582: PUSH
2583: LD_INT 1
2585: MINUS
2586: PPUSH
2587: LD_EXP 6
2591: PUSH
2592: LD_INT 1
2594: PLUS
2595: PPUSH
2596: CALL_OW 12
2600: PUSH
2601: LD_EXP 6
2605: PUSH
2606: LD_INT 1
2608: MINUS
2609: PPUSH
2610: LD_EXP 6
2614: PUSH
2615: LD_INT 1
2617: PLUS
2618: PPUSH
2619: CALL_OW 12
2623: PUSH
2624: LD_EXP 6
2628: PUSH
2629: LD_INT 1
2631: MINUS
2632: PPUSH
2633: LD_EXP 6
2637: PUSH
2638: LD_INT 1
2640: PLUS
2641: PPUSH
2642: CALL_OW 12
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: ST_TO_ADDR
// hc_sex := sex_male ;
2653: LD_ADDR_OWVAR 27
2657: PUSH
2658: LD_INT 1
2660: ST_TO_ADDR
// hc_class := 1 ;
2661: LD_ADDR_OWVAR 28
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2669: LD_ADDR_OWVAR 29
2673: PUSH
2674: LD_INT 10
2676: PUSH
2677: LD_INT 12
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: ST_TO_ADDR
// sikorski := CreateHuman ;
2684: LD_ADDR_EXP 14
2688: PUSH
2689: CALL_OW 44
2693: ST_TO_ADDR
// if global_diff > 1 then
2694: LD_EXP 3
2698: PUSH
2699: LD_INT 1
2701: GREATER
2702: IFFALSE 2721
// PlaceUnitArea ( sikorski , sikorski_area , false ) else
2704: LD_EXP 14
2708: PPUSH
2709: LD_INT 8
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 49
2719: GO 2812
// begin vc_chassis := us_light_wheeled ;
2721: LD_ADDR_OWVAR 37
2725: PUSH
2726: LD_INT 1
2728: ST_TO_ADDR
// vc_engine := engine_combustion ;
2729: LD_ADDR_OWVAR 39
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// vc_control := control_manual ;
2737: LD_ADDR_OWVAR 38
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2745: LD_ADDR_OWVAR 40
2749: PUSH
2750: LD_INT 2
2752: ST_TO_ADDR
// vc_fuel_battery := 21 ;
2753: LD_ADDR_OWVAR 41
2757: PUSH
2758: LD_INT 21
2760: ST_TO_ADDR
// sikorski_veh := CreateVehicle ;
2761: LD_ADDR_EXP 22
2765: PUSH
2766: CALL_OW 45
2770: ST_TO_ADDR
// SetDir ( sikorski_veh , 0 ) ;
2771: LD_EXP 22
2775: PPUSH
2776: LD_INT 0
2778: PPUSH
2779: CALL_OW 233
// PlaceUnitArea ( sikorski_veh , sikorski_area , false ) ;
2783: LD_EXP 22
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 49
// PlaceHumanInUnit ( sikorski , sikorski_veh ) ;
2798: LD_EXP 14
2802: PPUSH
2803: LD_EXP 22
2807: PPUSH
2808: CALL_OW 52
// end ; hc_importance := 0 ;
2812: LD_ADDR_OWVAR 32
2816: PUSH
2817: LD_INT 0
2819: ST_TO_ADDR
// hc_name := Ronn Harisson ;
2820: LD_ADDR_OWVAR 26
2824: PUSH
2825: LD_STRING Ronn Harisson
2827: ST_TO_ADDR
// hc_gallery := us ;
2828: LD_ADDR_OWVAR 33
2832: PUSH
2833: LD_STRING us
2835: ST_TO_ADDR
// hc_face_number := 6 ;
2836: LD_ADDR_OWVAR 34
2840: PUSH
2841: LD_INT 6
2843: ST_TO_ADDR
// ron := CreateHuman ;
2844: LD_ADDR_EXP 17
2848: PUSH
2849: CALL_OW 44
2853: ST_TO_ADDR
// hc_name := Jack Dickens ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_STRING Jack Dickens
2861: ST_TO_ADDR
// hc_gallery :=  ;
2862: LD_ADDR_OWVAR 33
2866: PUSH
2867: LD_STRING 
2869: ST_TO_ADDR
// jack := CreateHuman ;
2870: LD_ADDR_EXP 18
2874: PUSH
2875: CALL_OW 44
2879: ST_TO_ADDR
// end ;
2880: LD_VAR 0 1
2884: RET
// every 0 0$01 trigger GetDistUnits ( sikorski , omikron ) <= 45 do
2885: LD_EXP 14
2889: PPUSH
2890: LD_INT 64
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 45
2900: LESSEQUAL
2901: IFFALSE 2951
2903: GO 2905
2905: DISABLE
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_workshop , 16 , 5 , 3 ) ; end_of_file
2906: LD_INT 22
2908: PUSH
2909: LD_INT 4
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 25
2918: PUSH
2919: LD_INT 2
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PPUSH
2930: CALL_OW 69
2934: PPUSH
2935: LD_INT 2
2937: PPUSH
2938: LD_INT 16
2940: PPUSH
2941: LD_INT 5
2943: PPUSH
2944: LD_INT 3
2946: PPUSH
2947: CALL_OW 145
2951: END
// export ru_sold , ru_stw , ru_tw , ru_tech , ru_veh , ru_eng , ru_mech , ru_sci , ru_bul , ru_b ; export ru2_sold , ru2_stw , ru2_tw , ru2_tech , ru2_veh , ru2_eng , ru2_mech , ru2_sci , ru2_bul , ru2_b ; export ru_list_attackers ; export function InitRussian ; var ru , ru2 , i , un , filter ; begin
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
2956: PPUSH
2957: PPUSH
2958: PPUSH
2959: PPUSH
// ru := 6 ;
2960: LD_ADDR_VAR 0 2
2964: PUSH
2965: LD_INT 6
2967: ST_TO_ADDR
// ru2 := 3 ;
2968: LD_ADDR_VAR 0 3
2972: PUSH
2973: LD_INT 3
2975: ST_TO_ADDR
// uc_nation := nation_russian ;
2976: LD_ADDR_OWVAR 21
2980: PUSH
2981: LD_INT 3
2983: ST_TO_ADDR
// ru_radar := 98 ;
2984: LD_ADDR_EXP 46
2988: PUSH
2989: LD_INT 98
2991: ST_TO_ADDR
// ru_list_attackers := [ ] ;
2992: LD_ADDR_EXP 43
2996: PUSH
2997: EMPTY
2998: ST_TO_ADDR
// uc_side := ru ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_VAR 0 2
3008: ST_TO_ADDR
// ru_sold := [ ] ;
3009: LD_ADDR_EXP 23
3013: PUSH
3014: EMPTY
3015: ST_TO_ADDR
// ru_stw := [ ] ;
3016: LD_ADDR_EXP 24
3020: PUSH
3021: EMPTY
3022: ST_TO_ADDR
// ru_tw := [ ] ;
3023: LD_ADDR_EXP 25
3027: PUSH
3028: EMPTY
3029: ST_TO_ADDR
// ru_b := [ ] ;
3030: LD_ADDR_EXP 32
3034: PUSH
3035: EMPTY
3036: ST_TO_ADDR
// ru_eng := [ ] ;
3037: LD_ADDR_EXP 28
3041: PUSH
3042: EMPTY
3043: ST_TO_ADDR
// ru_mech := [ ] ;
3044: LD_ADDR_EXP 29
3048: PUSH
3049: EMPTY
3050: ST_TO_ADDR
// ru_sci := [ ] ;
3051: LD_ADDR_EXP 30
3055: PUSH
3056: EMPTY
3057: ST_TO_ADDR
// ru_bul := [ b_bunker , 162 , 101 , 0 , b_ext_rocket , 149 , 86 , 4 ] ;
3058: LD_ADDR_EXP 31
3062: PUSH
3063: LD_INT 32
3065: PUSH
3066: LD_INT 162
3068: PUSH
3069: LD_INT 101
3071: PUSH
3072: LD_INT 0
3074: PUSH
3075: LD_INT 18
3077: PUSH
3078: LD_INT 149
3080: PUSH
3081: LD_INT 86
3083: PUSH
3084: LD_INT 4
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: ST_TO_ADDR
// ru_tech := [ tech_tech1 , tech_tech2 , tech_tech3 , tech_oilpow , tech_oileng , tech_weap1 , tech_weap2 , tech_gatling , tech_advmet , tech_weap3 ] ;
3097: LD_ADDR_EXP 26
3101: PUSH
3102: LD_INT 48
3104: PUSH
3105: LD_INT 49
3107: PUSH
3108: LD_INT 50
3110: PUSH
3111: LD_INT 46
3113: PUSH
3114: LD_INT 47
3116: PUSH
3117: LD_INT 51
3119: PUSH
3120: LD_INT 52
3122: PUSH
3123: LD_INT 69
3125: PUSH
3126: LD_INT 34
3128: PUSH
3129: LD_INT 53
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: ST_TO_ADDR
// ru_veh := [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , ru_medium_tracked , engine_combustion , control_manual , ru_crane , ru_medium_tracked , engine_combustion , control_manual , ru_crane ] ;
3144: LD_ADDR_EXP 27
3148: PUSH
3149: LD_INT 21
3151: PUSH
3152: LD_INT 1
3154: PUSH
3155: LD_INT 1
3157: PUSH
3158: LD_INT 51
3160: PUSH
3161: LD_INT 22
3163: PUSH
3164: LD_INT 1
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: LD_INT 52
3172: PUSH
3173: LD_INT 22
3175: PUSH
3176: LD_INT 1
3178: PUSH
3179: LD_INT 1
3181: PUSH
3182: LD_INT 52
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
3199: LD_INT 71
3201: PPUSH
3202: LD_STRING kirov
3204: PPUSH
3205: CALL_OW 500
// hc_gallery := ru ;
3209: LD_ADDR_OWVAR 33
3213: PUSH
3214: LD_STRING ru
3216: ST_TO_ADDR
// hc_face_number := 8 ;
3217: LD_ADDR_OWVAR 34
3221: PUSH
3222: LD_INT 8
3224: ST_TO_ADDR
// hc_skills := [ 7 , 4 , 3 , 2 ] ;
3225: LD_ADDR_OWVAR 31
3229: PUSH
3230: LD_INT 7
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: ST_TO_ADDR
// hc_sex := sex_male ;
3248: LD_ADDR_OWVAR 27
3252: PUSH
3253: LD_INT 1
3255: ST_TO_ADDR
// hc_name := Ivan Kurin ;
3256: LD_ADDR_OWVAR 26
3260: PUSH
3261: LD_STRING Ivan Kurin
3263: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3264: LD_ADDR_OWVAR 29
3268: PUSH
3269: LD_INT 10
3271: PUSH
3272: LD_INT 10
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: ST_TO_ADDR
// kurin := CreateHuman ;
3279: LD_ADDR_EXP 15
3283: PUSH
3284: CALL_OW 44
3288: ST_TO_ADDR
// PlaceHumanInUnit ( kurin , kirov ) ;
3289: LD_EXP 15
3293: PPUSH
3294: LD_INT 71
3296: PPUSH
3297: CALL_OW 52
// filter := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
3301: LD_ADDR_VAR 0 6
3305: PUSH
3306: LD_INT 22
3308: PUSH
3309: LD_INT 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 30
3318: PUSH
3319: LD_INT 32
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 69
3334: ST_TO_ADDR
// for i = 1 to ru_force do
3335: LD_ADDR_VAR 0 4
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_EXP 4
3349: PUSH
3350: FOR_TO
3351: IFFALSE 3422
// begin un := CreateHumanWithClass ( 1 , ru_def ) ;
3353: LD_ADDR_VAR 0 5
3357: PUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_EXP 5
3365: PPUSH
3366: CALL 425 0 2
3370: ST_TO_ADDR
// if i <= filter then
3371: LD_VAR 0 4
3375: PUSH
3376: LD_VAR 0 6
3380: LESSEQUAL
3381: IFFALSE 3405
// PlaceHumanInUnit ( un , filter [ i ] ) else
3383: LD_VAR 0 5
3387: PPUSH
3388: LD_VAR 0 6
3392: PUSH
3393: LD_VAR 0 4
3397: ARRAY
3398: PPUSH
3399: CALL_OW 52
3403: GO 3420
// PlaceUnitArea ( un , ru_area , false ) ;
3405: LD_VAR 0 5
3409: PPUSH
3410: LD_INT 4
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 49
// end ;
3420: GO 3350
3422: POP
3423: POP
// for i = 1 to 6 do
3424: LD_ADDR_VAR 0 4
3428: PUSH
3429: DOUBLE
3430: LD_INT 1
3432: DEC
3433: ST_TO_ADDR
3434: LD_INT 6
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3475
// begin un := CreateHumanWithClass ( 3 , ru_def ) ;
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_INT 3
3447: PPUSH
3448: LD_EXP 5
3452: PPUSH
3453: CALL 425 0 2
3457: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3458: LD_VAR 0 5
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 0
3468: PPUSH
3469: CALL_OW 49
// end ;
3473: GO 3437
3475: POP
3476: POP
// for i = 1 to 3 do
3477: LD_ADDR_VAR 0 4
3481: PUSH
3482: DOUBLE
3483: LD_INT 1
3485: DEC
3486: ST_TO_ADDR
3487: LD_INT 3
3489: PUSH
3490: FOR_TO
3491: IFFALSE 3528
// begin un := CreateHumanWithClass ( 4 , ru_def ) ;
3493: LD_ADDR_VAR 0 5
3497: PUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_EXP 5
3505: PPUSH
3506: CALL 425 0 2
3510: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3511: LD_VAR 0 5
3515: PPUSH
3516: LD_INT 4
3518: PPUSH
3519: LD_INT 0
3521: PPUSH
3522: CALL_OW 49
// end ;
3526: GO 3490
3528: POP
3529: POP
// for i = 1 to 4 do
3530: LD_ADDR_VAR 0 4
3534: PUSH
3535: DOUBLE
3536: LD_INT 1
3538: DEC
3539: ST_TO_ADDR
3540: LD_INT 4
3542: PUSH
3543: FOR_TO
3544: IFFALSE 3581
// begin un := CreateHumanWithClass ( 2 , ru_def ) ;
3546: LD_ADDR_VAR 0 5
3550: PUSH
3551: LD_INT 2
3553: PPUSH
3554: LD_EXP 5
3558: PPUSH
3559: CALL 425 0 2
3563: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3564: LD_VAR 0 5
3568: PPUSH
3569: LD_INT 4
3571: PPUSH
3572: LD_INT 0
3574: PPUSH
3575: CALL_OW 49
// end ;
3579: GO 3543
3581: POP
3582: POP
// uc_side := ru2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_VAR 0 3
3592: ST_TO_ADDR
// ru2_sold := [ ] ;
3593: LD_ADDR_EXP 33
3597: PUSH
3598: EMPTY
3599: ST_TO_ADDR
// ru2_stw := [ ] ;
3600: LD_ADDR_EXP 34
3604: PUSH
3605: EMPTY
3606: ST_TO_ADDR
// ru2_tw := [ ] ;
3607: LD_ADDR_EXP 35
3611: PUSH
3612: EMPTY
3613: ST_TO_ADDR
// ru2_b := [ ] ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: EMPTY
3620: ST_TO_ADDR
// ru2_eng := [ ] ;
3621: LD_ADDR_EXP 38
3625: PUSH
3626: EMPTY
3627: ST_TO_ADDR
// ru2_mech := [ ] ;
3628: LD_ADDR_EXP 39
3632: PUSH
3633: EMPTY
3634: ST_TO_ADDR
// ru2_sci := [ ] ;
3635: LD_ADDR_EXP 40
3639: PUSH
3640: EMPTY
3641: ST_TO_ADDR
// ru2_bul := [ b_lab , 90 , 71 , 1 , b_armoury , 88 , 58 , 2 , b_workshop , 103 , 66 , 4 , b_oil_power , 106 , 77 , 3 , b_oil_power , 110 , 77 , 3 , b_bunker , 109 , 65 , 4 , b_bunker , 92 , 85 , 0 , b_bunker , 74 , 72 , 0 , b_bunker , 71 , 66 , 2 , b_bunker , 115 , 79 , 4 , b_bunker , 112 , 69 , 4 , b_bunker , 111 , 84 , 5 ] ;
3642: LD_ADDR_EXP 41
3646: PUSH
3647: LD_INT 6
3649: PUSH
3650: LD_INT 90
3652: PUSH
3653: LD_INT 71
3655: PUSH
3656: LD_INT 1
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: LD_INT 88
3664: PUSH
3665: LD_INT 58
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: LD_INT 103
3676: PUSH
3677: LD_INT 66
3679: PUSH
3680: LD_INT 4
3682: PUSH
3683: LD_INT 26
3685: PUSH
3686: LD_INT 106
3688: PUSH
3689: LD_INT 77
3691: PUSH
3692: LD_INT 3
3694: PUSH
3695: LD_INT 26
3697: PUSH
3698: LD_INT 110
3700: PUSH
3701: LD_INT 77
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: LD_INT 32
3709: PUSH
3710: LD_INT 109
3712: PUSH
3713: LD_INT 65
3715: PUSH
3716: LD_INT 4
3718: PUSH
3719: LD_INT 32
3721: PUSH
3722: LD_INT 92
3724: PUSH
3725: LD_INT 85
3727: PUSH
3728: LD_INT 0
3730: PUSH
3731: LD_INT 32
3733: PUSH
3734: LD_INT 74
3736: PUSH
3737: LD_INT 72
3739: PUSH
3740: LD_INT 0
3742: PUSH
3743: LD_INT 32
3745: PUSH
3746: LD_INT 71
3748: PUSH
3749: LD_INT 66
3751: PUSH
3752: LD_INT 2
3754: PUSH
3755: LD_INT 32
3757: PUSH
3758: LD_INT 115
3760: PUSH
3761: LD_INT 79
3763: PUSH
3764: LD_INT 4
3766: PUSH
3767: LD_INT 32
3769: PUSH
3770: LD_INT 112
3772: PUSH
3773: LD_INT 69
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 32
3781: PUSH
3782: LD_INT 111
3784: PUSH
3785: LD_INT 84
3787: PUSH
3788: LD_INT 5
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: ST_TO_ADDR
// ru2_tech := [ tech_tech1 , tech_tech2 , tech_weap1 , tech_weap2 , tech_gatling , tech_gun , tech_advmet , tech_weap3 , tech_tech3 ] ;
3841: LD_ADDR_EXP 36
3845: PUSH
3846: LD_INT 48
3848: PUSH
3849: LD_INT 49
3851: PUSH
3852: LD_INT 51
3854: PUSH
3855: LD_INT 52
3857: PUSH
3858: LD_INT 69
3860: PUSH
3861: LD_INT 39
3863: PUSH
3864: LD_INT 34
3866: PUSH
3867: LD_INT 53
3869: PUSH
3870: LD_INT 50
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: ST_TO_ADDR
// ru2_veh := [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , ru_medium_tracked , engine_combustion , control_manual , ru_crane , ru_medium_tracked , engine_combustion , control_manual , ru_crane ] ;
3884: LD_ADDR_EXP 37
3888: PUSH
3889: LD_INT 21
3891: PUSH
3892: LD_INT 1
3894: PUSH
3895: LD_INT 1
3897: PUSH
3898: LD_INT 51
3900: PUSH
3901: LD_INT 22
3903: PUSH
3904: LD_INT 1
3906: PUSH
3907: LD_INT 1
3909: PUSH
3910: LD_INT 52
3912: PUSH
3913: LD_INT 22
3915: PUSH
3916: LD_INT 1
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: LD_INT 52
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: ST_TO_ADDR
// SetBName ( beria , beria ) ;
3939: LD_INT 106
3941: PPUSH
3942: LD_STRING beria
3944: PPUSH
3945: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3949: LD_INT 112
3951: PPUSH
3952: LD_STRING kagan
3954: PPUSH
3955: CALL_OW 500
// for i = 1 to 12 do
3959: LD_ADDR_VAR 0 4
3963: PUSH
3964: DOUBLE
3965: LD_INT 1
3967: DEC
3968: ST_TO_ADDR
3969: LD_INT 12
3971: PUSH
3972: FOR_TO
3973: IFFALSE 4010
// begin un := CreateHumanWithClass ( 1 , ru_def ) ;
3975: LD_ADDR_VAR 0 5
3979: PUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_EXP 5
3987: PPUSH
3988: CALL 425 0 2
3992: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_INT 9
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 49
// end ;
4008: GO 3972
4010: POP
4011: POP
// for i = 1 to 6 do
4012: LD_ADDR_VAR 0 4
4016: PUSH
4017: DOUBLE
4018: LD_INT 1
4020: DEC
4021: ST_TO_ADDR
4022: LD_INT 6
4024: PUSH
4025: FOR_TO
4026: IFFALSE 4063
// begin un := CreateHumanWithClass ( 3 , ru_def ) ;
4028: LD_ADDR_VAR 0 5
4032: PUSH
4033: LD_INT 3
4035: PPUSH
4036: LD_EXP 5
4040: PPUSH
4041: CALL 425 0 2
4045: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4046: LD_VAR 0 5
4050: PPUSH
4051: LD_INT 9
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 49
// end ;
4061: GO 4025
4063: POP
4064: POP
// for i = 1 to 4 do
4065: LD_ADDR_VAR 0 4
4069: PUSH
4070: DOUBLE
4071: LD_INT 1
4073: DEC
4074: ST_TO_ADDR
4075: LD_INT 4
4077: PUSH
4078: FOR_TO
4079: IFFALSE 4116
// begin un := CreateHumanWithClass ( 4 , ru_def ) ;
4081: LD_ADDR_VAR 0 5
4085: PUSH
4086: LD_INT 4
4088: PPUSH
4089: LD_EXP 5
4093: PPUSH
4094: CALL 425 0 2
4098: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4099: LD_VAR 0 5
4103: PPUSH
4104: LD_INT 9
4106: PPUSH
4107: LD_INT 0
4109: PPUSH
4110: CALL_OW 49
// end ;
4114: GO 4078
4116: POP
4117: POP
// for i = 1 to 4 do
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: DOUBLE
4124: LD_INT 1
4126: DEC
4127: ST_TO_ADDR
4128: LD_INT 4
4130: PUSH
4131: FOR_TO
4132: IFFALSE 4169
// begin un := CreateHumanWithClass ( 2 , ru_def ) ;
4134: LD_ADDR_VAR 0 5
4138: PUSH
4139: LD_INT 2
4141: PPUSH
4142: LD_EXP 5
4146: PPUSH
4147: CALL 425 0 2
4151: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4152: LD_VAR 0 5
4156: PPUSH
4157: LD_INT 9
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ;
4167: GO 4131
4169: POP
4170: POP
// end ;
4171: LD_VAR 0 1
4175: RET
// every 0 0$01 do var i , p , un , filter , h_dmgunit , b_dmgunit , b_unit , b_weap , b_upgrade , enemy_detected ;
4176: GO 4178
4178: DISABLE
4179: LD_INT 0
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
// begin enable ;
4191: ENABLE
// ru_sold := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 1 ] , [ f_lives , 600 ] ] ] ) diff Kurin ;
4192: LD_ADDR_EXP 23
4196: PUSH
4197: LD_INT 22
4199: PUSH
4200: LD_INT 6
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 25
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 24
4219: PUSH
4220: LD_INT 600
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: PUSH
4240: LD_EXP 15
4244: DIFF
4245: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 2 ] , [ f_lives , 600 ] ] ] ) ;
4246: LD_ADDR_EXP 28
4250: PUSH
4251: LD_INT 22
4253: PUSH
4254: LD_INT 6
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 25
4263: PUSH
4264: LD_INT 2
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 24
4273: PUSH
4274: LD_INT 600
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: PUSH
4286: EMPTY
4287: LIST
4288: PPUSH
4289: CALL_OW 69
4293: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 3 ] , [ f_lives , 600 ] ] ] ) ;
4294: LD_ADDR_EXP 29
4298: PUSH
4299: LD_INT 22
4301: PUSH
4302: LD_INT 6
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PUSH
4309: LD_INT 25
4311: PUSH
4312: LD_INT 3
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 24
4321: PUSH
4322: LD_INT 600
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: EMPTY
4335: LIST
4336: PPUSH
4337: CALL_OW 69
4341: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 4 ] , [ f_lives , 600 ] ] ] ) ;
4342: LD_ADDR_EXP 30
4346: PUSH
4347: LD_INT 22
4349: PUSH
4350: LD_INT 6
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 4
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 24
4369: PUSH
4370: LD_INT 600
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: PPUSH
4385: CALL_OW 69
4389: ST_TO_ADDR
// ru_tw := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] , [ f_lives , 250 ] ] ] ) ;
4390: LD_ADDR_EXP 25
4394: PUSH
4395: LD_INT 22
4397: PUSH
4398: LD_INT 6
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: LD_INT 30
4410: PUSH
4411: LD_INT 31
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 30
4420: PUSH
4421: LD_INT 32
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 24
4435: PUSH
4436: LD_INT 250
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: PPUSH
4451: CALL_OW 69
4455: ST_TO_ADDR
// ru_b := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) ;
4456: LD_ADDR_EXP 32
4460: PUSH
4461: LD_INT 22
4463: PUSH
4464: LD_INT 6
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 21
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 69
4489: ST_TO_ADDR
// b_dmgunit := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4490: LD_ADDR_VAR 0 6
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 6
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 3
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 3
4517: PUSH
4518: LD_INT 24
4520: PUSH
4521: LD_INT 1000
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: PPUSH
4540: CALL_OW 69
4544: ST_TO_ADDR
// h_dmgunit := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ] ) ;
4545: LD_ADDR_VAR 0 5
4549: PUSH
4550: LD_INT 22
4552: PUSH
4553: LD_INT 6
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 21
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: LD_INT 24
4575: PUSH
4576: LD_INT 600
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// b_weap := AvailableWeaponList ( ru_fac ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar , 89 ] ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_INT 92
4607: PPUSH
4608: CALL_OW 478
4612: PUSH
4613: LD_INT 52
4615: PUSH
4616: LD_INT 51
4618: PUSH
4619: LD_INT 53
4621: PUSH
4622: LD_EXP 46
4626: PUSH
4627: LD_INT 89
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: DIFF
4637: ST_TO_ADDR
// b_upgrade := [ b_depot , b_armoury , b_breastwork , b_workshop ] ;
4638: LD_ADDR_VAR 0 9
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: LD_INT 4
4648: PUSH
4649: LD_INT 31
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: ST_TO_ADDR
// if FilterUnitsInArea ( kirov_strict , [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) > 0 then
4661: LD_INT 10
4663: PPUSH
4664: LD_INT 2
4666: PUSH
4667: LD_INT 22
4669: PUSH
4670: LD_INT 1
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 70
4696: PUSH
4697: LD_INT 0
4699: GREATER
4700: IFFALSE 4712
// enemy_detected := true else
4702: LD_ADDR_VAR 0 10
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
4710: GO 4720
// enemy_detected := false ;
4712: LD_ADDR_VAR 0 10
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// if enemy_detected = false then
4720: LD_VAR 0 10
4724: PUSH
4725: LD_INT 0
4727: EQUAL
4728: IFFALSE 4790
// for i = 1 to ru_b do
4730: LD_ADDR_VAR 0 1
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 32
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4788
// if GetBType ( ru_b [ i ] ) in b_upgrade then
4748: LD_EXP 32
4752: PUSH
4753: LD_VAR 0 1
4757: ARRAY
4758: PPUSH
4759: CALL_OW 266
4763: PUSH
4764: LD_VAR 0 9
4768: IN
4769: IFFALSE 4786
// ComUpgrade ( ru_b [ i ] ) ;
4771: LD_EXP 32
4775: PUSH
4776: LD_VAR 0 1
4780: ARRAY
4781: PPUSH
4782: CALL_OW 146
4786: GO 4745
4788: POP
4789: POP
// if ru_sold > 0 then
4790: LD_EXP 23
4794: PUSH
4795: LD_INT 0
4797: GREATER
4798: IFFALSE 5246
// begin filter := UnitFilter ( ru_sold , [ f_not , [ f_inside ] ] ) ;
4800: LD_ADDR_VAR 0 4
4804: PUSH
4805: LD_EXP 23
4809: PPUSH
4810: LD_INT 3
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: EMPTY
4817: LIST
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PPUSH
4823: CALL_OW 72
4827: ST_TO_ADDR
// if UnitFilter ( ru_tw , [ f_empty ] ) > 0 then
4828: LD_EXP 25
4832: PPUSH
4833: LD_INT 58
4835: PUSH
4836: EMPTY
4837: LIST
4838: PPUSH
4839: CALL_OW 72
4843: PUSH
4844: LD_INT 0
4846: GREATER
4847: IFFALSE 4949
// begin if filter = 0 then
4849: LD_VAR 0 4
4853: PUSH
4854: LD_INT 0
4856: EQUAL
4857: IFFALSE 4882
// ComExitBuilding ( ru_sold [ Rand ( 1 , ru_sold ) ] ) ;
4859: LD_EXP 23
4863: PUSH
4864: LD_INT 1
4866: PPUSH
4867: LD_EXP 23
4871: PPUSH
4872: CALL_OW 12
4876: ARRAY
4877: PPUSH
4878: CALL_OW 122
// filter := UnitFilter ( ru_sold , [ f_not , [ f_inside ] ] ) ;
4882: LD_ADDR_VAR 0 4
4886: PUSH
4887: LD_EXP 23
4891: PPUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 54
4897: PUSH
4898: EMPTY
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PPUSH
4905: CALL_OW 72
4909: ST_TO_ADDR
// if filter then
4910: LD_VAR 0 4
4914: IFFALSE 4949
// ComEnterUnit ( filter [ 1 ] , UnitFilter ( ru_tw , [ f_empty ] ) [ 1 ] ) ;
4916: LD_VAR 0 4
4920: PUSH
4921: LD_INT 1
4923: ARRAY
4924: PPUSH
4925: LD_EXP 25
4929: PPUSH
4930: LD_INT 58
4932: PUSH
4933: EMPTY
4934: LIST
4935: PPUSH
4936: CALL_OW 72
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: PPUSH
4945: CALL_OW 120
// end ; if UnitFilter ( ru_tw , [ f_empty ] ) = 0 then
4949: LD_EXP 25
4953: PPUSH
4954: LD_INT 58
4956: PUSH
4957: EMPTY
4958: LIST
4959: PPUSH
4960: CALL_OW 72
4964: PUSH
4965: LD_INT 0
4967: EQUAL
4968: IFFALSE 5123
// begin b_unit := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
4970: LD_ADDR_VAR 0 7
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 6
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 2
4987: PUSH
4988: LD_INT 30
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 30
5000: PUSH
5001: LD_INT 5
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 69
5021: ST_TO_ADDR
// if b_unit > 0 then
5022: LD_VAR 0 7
5026: PUSH
5027: LD_INT 0
5029: GREATER
5030: IFFALSE 5123
// for p = 1 to b_unit do
5032: LD_ADDR_VAR 0 2
5036: PUSH
5037: DOUBLE
5038: LD_INT 1
5040: DEC
5041: ST_TO_ADDR
5042: LD_VAR 0 7
5046: PUSH
5047: FOR_TO
5048: IFFALSE 5121
// if UnitsInSide ( b_unit [ p ] ) < 6 then
5050: LD_VAR 0 7
5054: PUSH
5055: LD_VAR 0 2
5059: ARRAY
5060: PPUSH
5061: CALL_OW 313
5065: PUSH
5066: LD_INT 6
5068: LESS
5069: IFFALSE 5119
// for i = 1 to filter do
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_VAR 0 4
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5117
// ComEnterUnit ( filter [ i ] , b_unit [ p ] ) ;
5089: LD_VAR 0 4
5093: PUSH
5094: LD_VAR 0 1
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 7
5104: PUSH
5105: LD_VAR 0 2
5109: ARRAY
5110: PPUSH
5111: CALL_OW 120
5115: GO 5086
5117: POP
5118: POP
5119: GO 5047
5121: POP
5122: POP
// end ; if UnitFilter ( ru_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) > 0 then
5123: LD_EXP 25
5127: PPUSH
5128: LD_INT 30
5130: PUSH
5131: LD_INT 32
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 35
5140: PUSH
5141: LD_INT 0
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 72
5156: PUSH
5157: LD_INT 0
5159: GREATER
5160: IFFALSE 5246
// begin filter := UnitFilter ( ru_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_EXP 25
5171: PPUSH
5172: LD_INT 30
5174: PUSH
5175: LD_INT 32
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 35
5184: PUSH
5185: LD_INT 0
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 72
5200: ST_TO_ADDR
// if BuildingStatus ( ru_fac ) = bs_idle then
5201: LD_INT 92
5203: PPUSH
5204: CALL_OW 461
5208: PUSH
5209: LD_INT 2
5211: EQUAL
5212: IFFALSE 5246
// ComPlaceWeapon ( filter [ 1 ] , b_weap [ Rand ( 1 , b_weap ) ] ) ;
5214: LD_VAR 0 4
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: LD_VAR 0 8
5227: PUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_VAR 0 8
5235: PPUSH
5236: CALL_OW 12
5240: ARRAY
5241: PPUSH
5242: CALL_OW 148
// end ; end ; if ru_mech > 0 then
5246: LD_EXP 29
5250: PUSH
5251: LD_INT 0
5253: GREATER
5254: IFFALSE 5314
// for i = 1 to ru_mech do
5256: LD_ADDR_VAR 0 1
5260: PUSH
5261: DOUBLE
5262: LD_INT 1
5264: DEC
5265: ST_TO_ADDR
5266: LD_EXP 29
5270: PUSH
5271: FOR_TO
5272: IFFALSE 5312
// if not IsInUnit ( ru_mech [ i ] ) then
5274: LD_EXP 29
5278: PUSH
5279: LD_VAR 0 1
5283: ARRAY
5284: PPUSH
5285: CALL_OW 310
5289: NOT
5290: IFFALSE 5310
// ComEnterUnit ( ru_mech [ i ] , ru_fac ) ;
5292: LD_EXP 29
5296: PUSH
5297: LD_VAR 0 1
5301: ARRAY
5302: PPUSH
5303: LD_INT 92
5305: PPUSH
5306: CALL_OW 120
5310: GO 5271
5312: POP
5313: POP
// if ru_fac then
5314: LD_INT 92
5316: IFFALSE 5422
// if ru_veh > 0 then
5318: LD_EXP 27
5322: PUSH
5323: LD_INT 0
5325: GREATER
5326: IFFALSE 5422
// if BuildingStatus ( ru_fac ) = bs_idle then
5328: LD_INT 92
5330: PPUSH
5331: CALL_OW 461
5335: PUSH
5336: LD_INT 2
5338: EQUAL
5339: IFFALSE 5422
// begin ComConstruct ( ru_fac , ru_veh [ 1 ] , ru_veh [ 2 ] , ru_veh [ 3 ] , ru_veh [ 4 ] ) ;
5341: LD_INT 92
5343: PPUSH
5344: LD_EXP 27
5348: PUSH
5349: LD_INT 1
5351: ARRAY
5352: PPUSH
5353: LD_EXP 27
5357: PUSH
5358: LD_INT 2
5360: ARRAY
5361: PPUSH
5362: LD_EXP 27
5366: PUSH
5367: LD_INT 3
5369: ARRAY
5370: PPUSH
5371: LD_EXP 27
5375: PUSH
5376: LD_INT 4
5378: ARRAY
5379: PPUSH
5380: CALL_OW 125
// for i = 1 to 4 do
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: DOUBLE
5390: LD_INT 1
5392: DEC
5393: ST_TO_ADDR
5394: LD_INT 4
5396: PUSH
5397: FOR_TO
5398: IFFALSE 5420
// ru_veh := Delete ( ru_veh , 1 ) ;
5400: LD_ADDR_EXP 27
5404: PUSH
5405: LD_EXP 27
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 3
5417: ST_TO_ADDR
5418: GO 5397
5420: POP
5421: POP
// end ; if ru_bul > 0 and enemy_detected = false then
5422: LD_EXP 31
5426: PUSH
5427: LD_INT 0
5429: GREATER
5430: PUSH
5431: LD_VAR 0 10
5435: PUSH
5436: LD_INT 0
5438: EQUAL
5439: AND
5440: IFFALSE 5543
// if ru_eng > 0 then
5442: LD_EXP 28
5446: PUSH
5447: LD_INT 0
5449: GREATER
5450: IFFALSE 5543
// for i = 1 to ru_eng do
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: DOUBLE
5458: LD_INT 1
5460: DEC
5461: ST_TO_ADDR
5462: LD_EXP 28
5466: PUSH
5467: FOR_TO
5468: IFFALSE 5541
// if not HasTask ( ru_eng [ i ] ) then
5470: LD_EXP 28
5474: PUSH
5475: LD_VAR 0 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 314
5485: NOT
5486: IFFALSE 5539
// begin ComBuild ( ru_eng [ i ] , ru_bul [ 1 ] , ru_bul [ 2 ] , ru_bul [ 3 ] , ru_bul [ 4 ] ) ;
5488: LD_EXP 28
5492: PUSH
5493: LD_VAR 0 1
5497: ARRAY
5498: PPUSH
5499: LD_EXP 31
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: LD_EXP 31
5512: PUSH
5513: LD_INT 2
5515: ARRAY
5516: PPUSH
5517: LD_EXP 31
5521: PUSH
5522: LD_INT 3
5524: ARRAY
5525: PPUSH
5526: LD_EXP 31
5530: PUSH
5531: LD_INT 4
5533: ARRAY
5534: PPUSH
5535: CALL_OW 145
// end ;
5539: GO 5467
5541: POP
5542: POP
// if b_dmgunit > 0 then
5543: LD_VAR 0 6
5547: PUSH
5548: LD_INT 0
5550: GREATER
5551: IFFALSE 5736
// begin if ru_eng > 0 then
5553: LD_EXP 28
5557: PUSH
5558: LD_INT 0
5560: GREATER
5561: IFFALSE 5641
// for i = 1 to ru_eng do
5563: LD_ADDR_VAR 0 1
5567: PUSH
5568: DOUBLE
5569: LD_INT 1
5571: DEC
5572: ST_TO_ADDR
5573: LD_EXP 28
5577: PUSH
5578: FOR_TO
5579: IFFALSE 5639
// begin if IsInUnit ( ru_eng [ i ] ) then
5581: LD_EXP 28
5585: PUSH
5586: LD_VAR 0 1
5590: ARRAY
5591: PPUSH
5592: CALL_OW 310
5596: IFFALSE 5613
// ComExitBuilding ( ru_eng [ i ] ) ;
5598: LD_EXP 28
5602: PUSH
5603: LD_VAR 0 1
5607: ARRAY
5608: PPUSH
5609: CALL_OW 122
// ComRepairBuilding ( ru_eng [ i ] , b_dmgunit [ 1 ] ) ;
5613: LD_EXP 28
5617: PUSH
5618: LD_VAR 0 1
5622: ARRAY
5623: PPUSH
5624: LD_VAR 0 6
5628: PUSH
5629: LD_INT 1
5631: ARRAY
5632: PPUSH
5633: CALL_OW 130
// end ;
5637: GO 5578
5639: POP
5640: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_crane ] ] ) > 0 then
5641: LD_INT 22
5643: PUSH
5644: LD_INT 6
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 34
5653: PUSH
5654: LD_INT 52
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 69
5669: PUSH
5670: LD_INT 0
5672: GREATER
5673: IFFALSE 5734
// for p in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_crane ] ] ) do
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 6
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 34
5692: PUSH
5693: LD_INT 52
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5732
// ComRepairBuilding ( p , b_dmgunit [ 1 ] ) ;
5712: LD_VAR 0 2
5716: PPUSH
5717: LD_VAR 0 6
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: CALL_OW 130
5730: GO 5709
5732: POP
5733: POP
// end else
5734: GO 5864
// if ru_bul = 0 then
5736: LD_EXP 31
5740: PUSH
5741: LD_INT 0
5743: EQUAL
5744: IFFALSE 5864
// for i = 1 to ru_eng do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_EXP 28
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5862
// if not HasTask ( ru_eng [ i ] ) then
5764: LD_EXP 28
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: PPUSH
5775: CALL_OW 314
5779: NOT
5780: IFFALSE 5860
// ComEnterUnit ( ru_eng [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) , ru_eng [ i ] ) ) ;
5782: LD_EXP 28
5786: PUSH
5787: LD_VAR 0 1
5791: ARRAY
5792: PPUSH
5793: LD_INT 22
5795: PUSH
5796: LD_INT 6
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 2
5805: PUSH
5806: LD_INT 30
5808: PUSH
5809: LD_INT 0
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 30
5818: PUSH
5819: LD_INT 1
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PPUSH
5835: CALL_OW 69
5839: PPUSH
5840: LD_EXP 28
5844: PUSH
5845: LD_VAR 0 1
5849: ARRAY
5850: PPUSH
5851: CALL_OW 74
5855: PPUSH
5856: CALL_OW 120
5860: GO 5761
5862: POP
5863: POP
// if h_dmgunit > 0 then
5864: LD_VAR 0 5
5868: PUSH
5869: LD_INT 0
5871: GREATER
5872: IFFALSE 6079
// begin for p = 1 to h_dmgunit do
5874: LD_ADDR_VAR 0 2
5878: PUSH
5879: DOUBLE
5880: LD_INT 1
5882: DEC
5883: ST_TO_ADDR
5884: LD_VAR 0 5
5888: PUSH
5889: FOR_TO
5890: IFFALSE 5939
// if GetDistUnits ( h_dmgunit [ p ] , ru_lab ) > 6 then
5892: LD_VAR 0 5
5896: PUSH
5897: LD_VAR 0 2
5901: ARRAY
5902: PPUSH
5903: LD_INT 83
5905: PPUSH
5906: CALL_OW 296
5910: PUSH
5911: LD_INT 6
5913: GREATER
5914: IFFALSE 5937
// ComMoveXY ( h_dmgunit [ p ] , 140 , 76 ) ;
5916: LD_VAR 0 5
5920: PUSH
5921: LD_VAR 0 2
5925: ARRAY
5926: PPUSH
5927: LD_INT 140
5929: PPUSH
5930: LD_INT 76
5932: PPUSH
5933: CALL_OW 111
5937: GO 5889
5939: POP
5940: POP
// if ru_sci > 0 then
5941: LD_EXP 30
5945: PUSH
5946: LD_INT 0
5948: GREATER
5949: IFFALSE 6079
// for i = 1 to ru_sci do
5951: LD_ADDR_VAR 0 1
5955: PUSH
5956: DOUBLE
5957: LD_INT 1
5959: DEC
5960: ST_TO_ADDR
5961: LD_EXP 30
5965: PUSH
5966: FOR_TO
5967: IFFALSE 6077
// if IsInUnit ( ru_sci [ i ] ) then
5969: LD_EXP 30
5973: PUSH
5974: LD_VAR 0 1
5978: ARRAY
5979: PPUSH
5980: CALL_OW 310
5984: IFFALSE 6003
// ComExitBuilding ( ru_sci [ i ] ) else
5986: LD_EXP 30
5990: PUSH
5991: LD_VAR 0 1
5995: ARRAY
5996: PPUSH
5997: CALL_OW 122
6001: GO 6075
// if not HasTask ( ru_sci [ i ] ) then
6003: LD_EXP 30
6007: PUSH
6008: LD_VAR 0 1
6012: ARRAY
6013: PPUSH
6014: CALL_OW 314
6018: NOT
6019: IFFALSE 6075
// if GetDistUnits ( ru_sci [ i ] , h_dmgunit [ 1 ] ) <= 15 then
6021: LD_EXP 30
6025: PUSH
6026: LD_VAR 0 1
6030: ARRAY
6031: PPUSH
6032: LD_VAR 0 5
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PPUSH
6041: CALL_OW 296
6045: PUSH
6046: LD_INT 15
6048: LESSEQUAL
6049: IFFALSE 6075
// ComHeal ( ru_sci [ i ] , h_dmgunit [ 1 ] ) ;
6051: LD_EXP 30
6055: PUSH
6056: LD_VAR 0 1
6060: ARRAY
6061: PPUSH
6062: LD_VAR 0 5
6066: PUSH
6067: LD_INT 1
6069: ARRAY
6070: PPUSH
6071: CALL_OW 128
6075: GO 5966
6077: POP
6078: POP
// end ; if h_dmgunit = 0 then
6079: LD_VAR 0 5
6083: PUSH
6084: LD_INT 0
6086: EQUAL
6087: IFFALSE 6204
// begin for i = 1 to ru_sci do
6089: LD_ADDR_VAR 0 1
6093: PUSH
6094: DOUBLE
6095: LD_INT 1
6097: DEC
6098: ST_TO_ADDR
6099: LD_EXP 30
6103: PUSH
6104: FOR_TO
6105: IFFALSE 6145
// if not IsInUnit ( ru_sci [ i ] ) then
6107: LD_EXP 30
6111: PUSH
6112: LD_VAR 0 1
6116: ARRAY
6117: PPUSH
6118: CALL_OW 310
6122: NOT
6123: IFFALSE 6143
// ComEnterUnit ( ru_sci [ i ] , ru_lab ) ;
6125: LD_EXP 30
6129: PUSH
6130: LD_VAR 0 1
6134: ARRAY
6135: PPUSH
6136: LD_INT 83
6138: PPUSH
6139: CALL_OW 120
6143: GO 6104
6145: POP
6146: POP
// if ru_tech > 0 then
6147: LD_EXP 26
6151: PUSH
6152: LD_INT 0
6154: GREATER
6155: IFFALSE 6204
// if BuildingStatus ( ru_lab ) = bs_idle then
6157: LD_INT 83
6159: PPUSH
6160: CALL_OW 461
6164: PUSH
6165: LD_INT 2
6167: EQUAL
6168: IFFALSE 6204
// begin ComResearch ( ru_lab , ru_tech [ 1 ] ) ;
6170: LD_INT 83
6172: PPUSH
6173: LD_EXP 26
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: CALL_OW 124
// ru_tech := Delete ( ru_tech , 1 ) ;
6186: LD_ADDR_EXP 26
6190: PUSH
6191: LD_EXP 26
6195: PPUSH
6196: LD_INT 1
6198: PPUSH
6199: CALL_OW 3
6203: ST_TO_ADDR
// end ; end ; end ;
6204: PPOPN 10
6206: END
// every 20 20$00 trigger ru_fac do var weap ;
6207: LD_INT 92
6209: IFFALSE 6436
6211: GO 6213
6213: DISABLE
6214: LD_INT 0
6216: PPUSH
// begin enable ;
6217: ENABLE
// weap := AvailableWeaponList ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar ] ;
6218: LD_ADDR_VAR 0 1
6222: PUSH
6223: LD_INT 22
6225: PUSH
6226: LD_INT 6
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 30
6235: PUSH
6236: LD_INT 3
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 69
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PPUSH
6256: CALL_OW 478
6260: PUSH
6261: LD_INT 52
6263: PUSH
6264: LD_INT 51
6266: PUSH
6267: LD_INT 53
6269: PUSH
6270: LD_EXP 46
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: DIFF
6281: ST_TO_ADDR
// ru_veh := ru_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , weap [ Rand ( 1 , weap ) ] ] ;
6282: LD_ADDR_EXP 27
6286: PUSH
6287: LD_EXP 27
6291: PUSH
6292: LD_INT 23
6294: PUSH
6295: LD_INT 1
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 1
6308: PPUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 12
6318: ARRAY
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: ADD
6326: ST_TO_ADDR
// weap := AvailableWeaponList ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar ] ;
6327: LD_ADDR_VAR 0 1
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 30
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 69
6360: PUSH
6361: LD_INT 1
6363: ARRAY
6364: PPUSH
6365: CALL_OW 478
6369: PUSH
6370: LD_INT 52
6372: PUSH
6373: LD_INT 51
6375: PUSH
6376: LD_INT 53
6378: PUSH
6379: LD_EXP 46
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: DIFF
6390: ST_TO_ADDR
// ru2_veh := ru2_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , weap [ Rand ( 1 , weap ) ] ] ;
6391: LD_ADDR_EXP 37
6395: PUSH
6396: LD_EXP 37
6400: PUSH
6401: LD_INT 23
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: LD_INT 1
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 1
6417: PPUSH
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL_OW 12
6427: ARRAY
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: ADD
6435: ST_TO_ADDR
// end ;
6436: PPOPN 1
6438: END
// every 0 0$03 do var i , c , p , skr , filter , cargo , dep ;
6439: GO 6441
6441: DISABLE
6442: LD_INT 0
6444: PPUSH
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
// begin enable ;
6451: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: LD_INT 50
6459: PUSH
6460: EMPTY
6461: LIST
6462: PUSH
6463: LD_INT 22
6465: PUSH
6466: LD_INT 6
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: LD_INT 25
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PUSH
6486: LD_INT 25
6488: PUSH
6489: LD_INT 16
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PPUSH
6506: CALL_OW 69
6510: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
6511: LD_ADDR_VAR 0 6
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 6
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 22
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 34
6546: PUSH
6547: LD_INT 51
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: LD_INT 24
6556: PUSH
6557: LD_INT 600
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: PPUSH
6569: CALL_OW 69
6573: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6574: LD_ADDR_VAR 0 7
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 22
6584: PUSH
6585: LD_INT 6
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 22
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: LD_INT 30
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 30
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_main_area ) ;
6644: LD_ADDR_VAR 0 4
6648: PUSH
6649: LD_INT 2
6651: PPUSH
6652: CALL_OW 435
6656: ST_TO_ADDR
// c = 1 ;
6657: LD_ADDR_VAR 0 2
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if cargo > 0 then
6665: LD_VAR 0 6
6669: PUSH
6670: LD_INT 0
6672: GREATER
6673: IFFALSE 6965
// while c < skr do
6675: LD_VAR 0 2
6679: PUSH
6680: LD_VAR 0 4
6684: LESS
6685: IFFALSE 6965
// begin if cargo then
6687: LD_VAR 0 6
6691: IFFALSE 6963
// for i in cargo do
6693: LD_ADDR_VAR 0 1
6697: PUSH
6698: LD_VAR 0 6
6702: PUSH
6703: FOR_IN
6704: IFFALSE 6961
// begin if not IsOk ( i ) or not skr then
6706: LD_VAR 0 1
6710: PPUSH
6711: CALL_OW 302
6715: NOT
6716: PUSH
6717: LD_VAR 0 4
6721: NOT
6722: OR
6723: IFFALSE 6727
// continue ;
6725: GO 6703
// if c > skr then
6727: LD_VAR 0 2
6731: PUSH
6732: LD_VAR 0 4
6736: GREATER
6737: IFFALSE 6741
// continue ;
6739: GO 6703
// if GetFuel ( i ) > 40 and GetDistUnitXY ( i , skr [ c ] , skr [ c + 1 ] ) < 51 then
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 261
6750: PUSH
6751: LD_INT 40
6753: GREATER
6754: PUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: LD_VAR 0 4
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: PPUSH
6771: LD_VAR 0 4
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 1
6783: PLUS
6784: ARRAY
6785: PPUSH
6786: CALL_OW 297
6790: PUSH
6791: LD_INT 51
6793: LESS
6794: AND
6795: IFFALSE 6832
// ComCollect ( i , skr [ c ] , skr [ c + 1 ] ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: LD_VAR 0 4
6806: PUSH
6807: LD_VAR 0 2
6811: ARRAY
6812: PPUSH
6813: LD_VAR 0 4
6817: PUSH
6818: LD_VAR 0 2
6822: PUSH
6823: LD_INT 1
6825: PLUS
6826: ARRAY
6827: PPUSH
6828: CALL_OW 117
// if GetFuel ( i ) <= 40 then
6832: LD_VAR 0 1
6836: PPUSH
6837: CALL_OW 261
6841: PUSH
6842: LD_INT 40
6844: LESSEQUAL
6845: IFFALSE 6945
// begin repeat begin ComMoveXY ( i , GetX ( NearestUnitToUnit ( dep , i ) ) , GetY ( NearestUnitToUnit ( dep , i ) ) ) ;
6847: LD_VAR 0 1
6851: PPUSH
6852: LD_VAR 0 7
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: CALL_OW 74
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 7
6876: PPUSH
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL_OW 74
6886: PPUSH
6887: CALL_OW 251
6891: PPUSH
6892: CALL_OW 111
// Wait ( 0 0$01 ) ;
6896: LD_INT 35
6898: PPUSH
6899: CALL_OW 67
// end until GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 5 ;
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 7
6912: PPUSH
6913: LD_VAR 0 1
6917: PPUSH
6918: CALL_OW 74
6922: PPUSH
6923: CALL_OW 296
6927: PUSH
6928: LD_INT 5
6930: LESS
6931: IFFALSE 6847
// SetFuel ( i , 100 ) ;
6933: LD_VAR 0 1
6937: PPUSH
6938: LD_INT 100
6940: PPUSH
6941: CALL_OW 240
// end ; c = c + 2 ;
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: LD_VAR 0 2
6954: PUSH
6955: LD_INT 2
6957: PLUS
6958: ST_TO_ADDR
// end ;
6959: GO 6703
6961: POP
6962: POP
// end ;
6963: GO 6675
// end ;
6965: PPOPN 7
6967: END
// every 0 0$01 do var i , p , un , filter , h_dmgunit , b_dmgunit , b_unit , b_weap , b_upgrade , b_fac , b_labb , b_ext , enemy_detected ;
6968: GO 6970
6970: DISABLE
6971: LD_INT 0
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
// begin enable ;
6986: ENABLE
// ru2_sold := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_lives , 600 ] ] ] ) ;
6987: LD_ADDR_EXP 33
6991: PUSH
6992: LD_INT 22
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 25
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 24
7014: PUSH
7015: LD_INT 600
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: ST_TO_ADDR
// ru2_eng := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 2 ] , [ f_lives , 600 ] ] ] ) ;
7035: LD_ADDR_EXP 38
7039: PUSH
7040: LD_INT 22
7042: PUSH
7043: LD_INT 3
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 25
7052: PUSH
7053: LD_INT 2
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 24
7062: PUSH
7063: LD_INT 600
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: EMPTY
7076: LIST
7077: PPUSH
7078: CALL_OW 69
7082: ST_TO_ADDR
// ru2_mech := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 3 ] , [ f_lives , 600 ] ] ] ) ;
7083: LD_ADDR_EXP 39
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 25
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 24
7110: PUSH
7111: LD_INT 600
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: PPUSH
7126: CALL_OW 69
7130: ST_TO_ADDR
// ru2_sci := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_lives , 600 ] ] ] ) ;
7131: LD_ADDR_EXP 40
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 4
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: LD_INT 600
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: PPUSH
7174: CALL_OW 69
7178: ST_TO_ADDR
// ru2_tw := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] , [ f_lives , 250 ] ] ] ) ;
7179: LD_ADDR_EXP 35
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 3
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: LD_INT 30
7199: PUSH
7200: LD_INT 31
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 30
7209: PUSH
7210: LD_INT 32
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 24
7224: PUSH
7225: LD_INT 250
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: ST_TO_ADDR
// ru2_b := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7245: LD_ADDR_EXP 42
7249: PUSH
7250: LD_INT 22
7252: PUSH
7253: LD_INT 3
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 21
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 69
7278: ST_TO_ADDR
// b_dmgunit := FilterUnitsInArea ( beria_defa , [ [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7279: LD_ADDR_VAR 0 6
7283: PUSH
7284: LD_INT 17
7286: PPUSH
7287: LD_INT 22
7289: PUSH
7290: LD_INT 3
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 21
7299: PUSH
7300: LD_INT 3
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 3
7309: PUSH
7310: LD_INT 24
7312: PUSH
7313: LD_INT 1000
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: PPUSH
7332: CALL_OW 70
7336: ST_TO_ADDR
// h_dmgunit := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ] ) ;
7337: LD_ADDR_VAR 0 5
7341: PUSH
7342: LD_INT 22
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 21
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 3
7364: PUSH
7365: LD_INT 24
7367: PUSH
7368: LD_INT 600
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: PPUSH
7387: CALL_OW 69
7391: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 7460
// b_fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7422: LD_ADDR_VAR 0 10
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 30
7439: PUSH
7440: LD_INT 3
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 69
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) then
7460: LD_INT 22
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 2
7472: PUSH
7473: LD_INT 30
7475: PUSH
7476: LD_INT 6
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 30
7485: PUSH
7486: LD_INT 7
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 30
7495: PUSH
7496: LD_INT 8
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IFFALSE 7586
// b_labb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7519: LD_ADDR_VAR 0 11
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 3
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 2
7536: PUSH
7537: LD_INT 30
7539: PUSH
7540: LD_INT 6
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 30
7549: PUSH
7550: LD_INT 7
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 30
7559: PUSH
7560: LD_INT 8
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: ST_TO_ADDR
// b_weap := AvailableWeaponList ( b_fac ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar , 89 ] ;
7586: LD_ADDR_VAR 0 8
7590: PUSH
7591: LD_VAR 0 10
7595: PPUSH
7596: CALL_OW 478
7600: PUSH
7601: LD_INT 52
7603: PUSH
7604: LD_INT 51
7606: PUSH
7607: LD_INT 53
7609: PUSH
7610: LD_EXP 46
7614: PUSH
7615: LD_INT 89
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: DIFF
7625: ST_TO_ADDR
// b_upgrade := [ b_depot , b_armoury , b_workshop ] ;
7626: LD_ADDR_VAR 0 9
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: ST_TO_ADDR
// b_ext := [ ] ;
7645: LD_ADDR_VAR 0 12
7649: PUSH
7650: EMPTY
7651: ST_TO_ADDR
// if FilterUnitsInArea ( beria_strict , [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) diff FilterAllUnits ( [ f_weapon , us_radar ] ) > 0 then
7652: LD_INT 11
7654: PPUSH
7655: LD_INT 2
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 70
7687: PUSH
7688: LD_INT 34
7690: PUSH
7691: LD_INT 11
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PPUSH
7698: CALL_OW 69
7702: PUSH
7703: LD_INT 0
7705: GREATER
7706: DIFF
7707: IFFALSE 7719
// enemy_detected := true else
7709: LD_ADDR_VAR 0 13
7713: PUSH
7714: LD_INT 1
7716: ST_TO_ADDR
7717: GO 7727
// enemy_detected := false ;
7719: LD_ADDR_VAR 0 13
7723: PUSH
7724: LD_INT 0
7726: ST_TO_ADDR
// if enemy_detected = false then
7727: LD_VAR 0 13
7731: PUSH
7732: LD_INT 0
7734: EQUAL
7735: IFFALSE 7836
// for i = 1 to ru2_b do
7737: LD_ADDR_VAR 0 1
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_EXP 42
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7834
// begin if GetBType ( ru2_b [ i ] ) in b_upgrade then
7755: LD_EXP 42
7759: PUSH
7760: LD_VAR 0 1
7764: ARRAY
7765: PPUSH
7766: CALL_OW 266
7770: PUSH
7771: LD_VAR 0 9
7775: IN
7776: IFFALSE 7793
// ComUpgrade ( ru2_b [ i ] ) ;
7778: LD_EXP 42
7782: PUSH
7783: LD_VAR 0 1
7787: ARRAY
7788: PPUSH
7789: CALL_OW 146
// if GetBType ( ru2_b [ i ] ) in b_lab then
7793: LD_EXP 42
7797: PUSH
7798: LD_VAR 0 1
7802: ARRAY
7803: PPUSH
7804: CALL_OW 266
7808: PUSH
7809: LD_INT 6
7811: IN
7812: IFFALSE 7832
// ComUpgradeLab ( ru2_b [ i ] , b_lab_weapon ) ;
7814: LD_EXP 42
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 10
7827: PPUSH
7828: CALL_OW 147
// end ;
7832: GO 7752
7834: POP
7835: POP
// if ru2_sold > 0 then
7836: LD_EXP 33
7840: PUSH
7841: LD_INT 0
7843: GREATER
7844: IFFALSE 8342
// begin filter := UnitFilter ( ru2_sold , [ f_not , [ f_inside ] ] ) ;
7846: LD_ADDR_VAR 0 4
7850: PUSH
7851: LD_EXP 33
7855: PPUSH
7856: LD_INT 3
7858: PUSH
7859: LD_INT 54
7861: PUSH
7862: EMPTY
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 72
7873: ST_TO_ADDR
// if UnitFilter ( ru2_tw , [ f_empty ] ) > 0 then
7874: LD_EXP 35
7878: PPUSH
7879: LD_INT 58
7881: PUSH
7882: EMPTY
7883: LIST
7884: PPUSH
7885: CALL_OW 72
7889: PUSH
7890: LD_INT 0
7892: GREATER
7893: IFFALSE 8043
// begin if filter = 0 then
7895: LD_VAR 0 4
7899: PUSH
7900: LD_INT 0
7902: EQUAL
7903: IFFALSE 7928
// ComExitBuilding ( ru2_sold [ Rand ( 1 , ru2_sold ) ] ) ;
7905: LD_EXP 33
7909: PUSH
7910: LD_INT 1
7912: PPUSH
7913: LD_EXP 33
7917: PPUSH
7918: CALL_OW 12
7922: ARRAY
7923: PPUSH
7924: CALL_OW 122
// if UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) then
7928: LD_VAR 0 4
7932: PPUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 60
7938: PUSH
7939: EMPTY
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 72
7950: IFFALSE 8043
// for i in UnitFilter ( ru2_tw , [ f_empty ] ) do
7952: LD_ADDR_VAR 0 1
7956: PUSH
7957: LD_EXP 35
7961: PPUSH
7962: LD_INT 58
7964: PUSH
7965: EMPTY
7966: LIST
7967: PPUSH
7968: CALL_OW 72
7972: PUSH
7973: FOR_IN
7974: IFFALSE 8041
// begin ComEnterUnit ( UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) [ 1 ] , i ) ;
7976: LD_VAR 0 4
7980: PPUSH
7981: LD_INT 3
7983: PUSH
7984: LD_INT 60
7986: PUSH
7987: EMPTY
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 72
7998: PUSH
7999: LD_INT 1
8001: ARRAY
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 120
// if not UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) then
8012: LD_VAR 0 4
8016: PPUSH
8017: LD_INT 3
8019: PUSH
8020: LD_INT 60
8022: PUSH
8023: EMPTY
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PPUSH
8030: CALL_OW 72
8034: NOT
8035: IFFALSE 8039
// break ;
8037: GO 8041
// end ;
8039: GO 7973
8041: POP
8042: POP
// end ; if UnitFilter ( ru2_tw , [ f_empty ] ) = 0 then
8043: LD_EXP 35
8047: PPUSH
8048: LD_INT 58
8050: PUSH
8051: EMPTY
8052: LIST
8053: PPUSH
8054: CALL_OW 72
8058: PUSH
8059: LD_INT 0
8061: EQUAL
8062: IFFALSE 8217
// begin b_unit := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
8064: LD_ADDR_VAR 0 7
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 3
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 2
8081: PUSH
8082: LD_INT 30
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 30
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PPUSH
8111: CALL_OW 69
8115: ST_TO_ADDR
// if b_unit > 0 then
8116: LD_VAR 0 7
8120: PUSH
8121: LD_INT 0
8123: GREATER
8124: IFFALSE 8217
// for p = 1 to b_unit do
8126: LD_ADDR_VAR 0 2
8130: PUSH
8131: DOUBLE
8132: LD_INT 1
8134: DEC
8135: ST_TO_ADDR
8136: LD_VAR 0 7
8140: PUSH
8141: FOR_TO
8142: IFFALSE 8215
// if UnitsInSide ( b_unit [ p ] ) < 6 then
8144: LD_VAR 0 7
8148: PUSH
8149: LD_VAR 0 2
8153: ARRAY
8154: PPUSH
8155: CALL_OW 313
8159: PUSH
8160: LD_INT 6
8162: LESS
8163: IFFALSE 8213
// for i = 1 to filter do
8165: LD_ADDR_VAR 0 1
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_VAR 0 4
8179: PUSH
8180: FOR_TO
8181: IFFALSE 8211
// ComEnterUnit ( filter [ i ] , b_unit [ p ] ) ;
8183: LD_VAR 0 4
8187: PUSH
8188: LD_VAR 0 1
8192: ARRAY
8193: PPUSH
8194: LD_VAR 0 7
8198: PUSH
8199: LD_VAR 0 2
8203: ARRAY
8204: PPUSH
8205: CALL_OW 120
8209: GO 8180
8211: POP
8212: POP
8213: GO 8141
8215: POP
8216: POP
// end ; if UnitFilter ( ru2_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) > 0 then
8217: LD_EXP 35
8221: PPUSH
8222: LD_INT 30
8224: PUSH
8225: LD_INT 32
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 35
8234: PUSH
8235: LD_INT 0
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 72
8250: PUSH
8251: LD_INT 0
8253: GREATER
8254: IFFALSE 8342
// begin filter := UnitFilter ( ru2_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) ;
8256: LD_ADDR_VAR 0 4
8260: PUSH
8261: LD_EXP 35
8265: PPUSH
8266: LD_INT 30
8268: PUSH
8269: LD_INT 32
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 35
8278: PUSH
8279: LD_INT 0
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 72
8294: ST_TO_ADDR
// if BuildingStatus ( b_fac ) = bs_idle then
8295: LD_VAR 0 10
8299: PPUSH
8300: CALL_OW 461
8304: PUSH
8305: LD_INT 2
8307: EQUAL
8308: IFFALSE 8342
// ComPlaceWeapon ( filter [ 1 ] , b_weap [ Rand ( 1 , b_weap ) ] ) ;
8310: LD_VAR 0 4
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: LD_VAR 0 8
8323: PUSH
8324: LD_INT 1
8326: PPUSH
8327: LD_VAR 0 8
8331: PPUSH
8332: CALL_OW 12
8336: ARRAY
8337: PPUSH
8338: CALL_OW 148
// end ; end ; if b_fac > 0 and ru2_mech > 0 then
8342: LD_VAR 0 10
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: PUSH
8351: LD_EXP 39
8355: PUSH
8356: LD_INT 0
8358: GREATER
8359: AND
8360: IFFALSE 8422
// for i = 1 to ru2_mech do
8362: LD_ADDR_VAR 0 1
8366: PUSH
8367: DOUBLE
8368: LD_INT 1
8370: DEC
8371: ST_TO_ADDR
8372: LD_EXP 39
8376: PUSH
8377: FOR_TO
8378: IFFALSE 8420
// if not IsInUnit ( ru2_mech [ i ] ) then
8380: LD_EXP 39
8384: PUSH
8385: LD_VAR 0 1
8389: ARRAY
8390: PPUSH
8391: CALL_OW 310
8395: NOT
8396: IFFALSE 8418
// ComEnterUnit ( ru2_mech [ i ] , b_fac ) ;
8398: LD_EXP 39
8402: PUSH
8403: LD_VAR 0 1
8407: ARRAY
8408: PPUSH
8409: LD_VAR 0 10
8413: PPUSH
8414: CALL_OW 120
8418: GO 8377
8420: POP
8421: POP
// if b_fac > 0 and ru2_veh > 0 then
8422: LD_VAR 0 10
8426: PUSH
8427: LD_INT 0
8429: GREATER
8430: PUSH
8431: LD_EXP 37
8435: PUSH
8436: LD_INT 0
8438: GREATER
8439: AND
8440: IFFALSE 8540
// if BuildingStatus ( b_fac ) = bs_idle then
8442: LD_VAR 0 10
8446: PPUSH
8447: CALL_OW 461
8451: PUSH
8452: LD_INT 2
8454: EQUAL
8455: IFFALSE 8540
// begin ComConstruct ( b_fac , ru2_veh [ 1 ] , ru2_veh [ 2 ] , ru2_veh [ 3 ] , ru2_veh [ 4 ] ) ;
8457: LD_VAR 0 10
8461: PPUSH
8462: LD_EXP 37
8466: PUSH
8467: LD_INT 1
8469: ARRAY
8470: PPUSH
8471: LD_EXP 37
8475: PUSH
8476: LD_INT 2
8478: ARRAY
8479: PPUSH
8480: LD_EXP 37
8484: PUSH
8485: LD_INT 3
8487: ARRAY
8488: PPUSH
8489: LD_EXP 37
8493: PUSH
8494: LD_INT 4
8496: ARRAY
8497: PPUSH
8498: CALL_OW 125
// for i = 1 to 4 do
8502: LD_ADDR_VAR 0 1
8506: PUSH
8507: DOUBLE
8508: LD_INT 1
8510: DEC
8511: ST_TO_ADDR
8512: LD_INT 4
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8538
// ru2_veh := Delete ( ru2_veh , 1 ) ;
8518: LD_ADDR_EXP 37
8522: PUSH
8523: LD_EXP 37
8527: PPUSH
8528: LD_INT 1
8530: PPUSH
8531: CALL_OW 3
8535: ST_TO_ADDR
8536: GO 8515
8538: POP
8539: POP
// end ; if ru2_bul > 0 and enemy_detected = false then
8540: LD_EXP 41
8544: PUSH
8545: LD_INT 0
8547: GREATER
8548: PUSH
8549: LD_VAR 0 13
8553: PUSH
8554: LD_INT 0
8556: EQUAL
8557: AND
8558: IFFALSE 8661
// if ru2_eng > 0 then
8560: LD_EXP 38
8564: PUSH
8565: LD_INT 0
8567: GREATER
8568: IFFALSE 8661
// for i = 1 to ru2_eng do
8570: LD_ADDR_VAR 0 1
8574: PUSH
8575: DOUBLE
8576: LD_INT 1
8578: DEC
8579: ST_TO_ADDR
8580: LD_EXP 38
8584: PUSH
8585: FOR_TO
8586: IFFALSE 8659
// if not HasTask ( ru2_eng [ i ] ) then
8588: LD_EXP 38
8592: PUSH
8593: LD_VAR 0 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 314
8603: NOT
8604: IFFALSE 8657
// begin ComBuild ( ru2_eng [ i ] , ru2_bul [ 1 ] , ru2_bul [ 2 ] , ru2_bul [ 3 ] , ru2_bul [ 4 ] ) ;
8606: LD_EXP 38
8610: PUSH
8611: LD_VAR 0 1
8615: ARRAY
8616: PPUSH
8617: LD_EXP 41
8621: PUSH
8622: LD_INT 1
8624: ARRAY
8625: PPUSH
8626: LD_EXP 41
8630: PUSH
8631: LD_INT 2
8633: ARRAY
8634: PPUSH
8635: LD_EXP 41
8639: PUSH
8640: LD_INT 3
8642: ARRAY
8643: PPUSH
8644: LD_EXP 41
8648: PUSH
8649: LD_INT 4
8651: ARRAY
8652: PPUSH
8653: CALL_OW 145
// end ;
8657: GO 8585
8659: POP
8660: POP
// for i = 1 to ru2_b do
8661: LD_ADDR_VAR 0 1
8665: PUSH
8666: DOUBLE
8667: LD_INT 1
8669: DEC
8670: ST_TO_ADDR
8671: LD_EXP 42
8675: PUSH
8676: FOR_TO
8677: IFFALSE 8865
// if BuildingStatus ( ru2_b [ i ] ) = bs_need_extension then
8679: LD_EXP 42
8683: PUSH
8684: LD_VAR 0 1
8688: ARRAY
8689: PPUSH
8690: CALL_OW 461
8694: PUSH
8695: LD_INT 8
8697: EQUAL
8698: IFFALSE 8863
// begin b_ext := GetExtPositions ( ru2_b [ i ] ) ;
8700: LD_ADDR_VAR 0 12
8704: PUSH
8705: LD_EXP 42
8709: PUSH
8710: LD_VAR 0 1
8714: ARRAY
8715: PPUSH
8716: CALL_OW 270
8720: ST_TO_ADDR
// if b_ext > 0 and not b_ext_gun in ru2_bul then
8721: LD_VAR 0 12
8725: PUSH
8726: LD_INT 0
8728: GREATER
8729: PUSH
8730: LD_INT 17
8732: PUSH
8733: LD_EXP 41
8737: IN
8738: NOT
8739: AND
8740: IFFALSE 8863
// ru2_bul := ru2_bul ^ [ b_ext_noncombat , b_ext [ 1 ] [ 1 ] , b_ext [ 1 ] [ 2 ] , 3 , b_ext_track , b_ext [ 2 ] [ 1 ] , b_ext [ 2 ] [ 2 ] , 5 , b_ext_gun , b_ext [ 3 ] [ 1 ] , b_ext [ 3 ] [ 2 ] , 2 ] ;
8742: LD_ADDR_EXP 41
8746: PUSH
8747: LD_EXP 41
8751: PUSH
8752: LD_INT 19
8754: PUSH
8755: LD_VAR 0 12
8759: PUSH
8760: LD_INT 1
8762: ARRAY
8763: PUSH
8764: LD_INT 1
8766: ARRAY
8767: PUSH
8768: LD_VAR 0 12
8772: PUSH
8773: LD_INT 1
8775: ARRAY
8776: PUSH
8777: LD_INT 2
8779: ARRAY
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_VAR 0 12
8791: PUSH
8792: LD_INT 2
8794: ARRAY
8795: PUSH
8796: LD_INT 1
8798: ARRAY
8799: PUSH
8800: LD_VAR 0 12
8804: PUSH
8805: LD_INT 2
8807: ARRAY
8808: PUSH
8809: LD_INT 2
8811: ARRAY
8812: PUSH
8813: LD_INT 5
8815: PUSH
8816: LD_INT 17
8818: PUSH
8819: LD_VAR 0 12
8823: PUSH
8824: LD_INT 3
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PUSH
8832: LD_VAR 0 12
8836: PUSH
8837: LD_INT 3
8839: ARRAY
8840: PUSH
8841: LD_INT 2
8843: ARRAY
8844: PUSH
8845: LD_INT 2
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: ADD
8862: ST_TO_ADDR
// end ;
8863: GO 8676
8865: POP
8866: POP
// if b_dmgunit > 0 then
8867: LD_VAR 0 6
8871: PUSH
8872: LD_INT 0
8874: GREATER
8875: IFFALSE 9060
// begin if ru2_eng > 0 then
8877: LD_EXP 38
8881: PUSH
8882: LD_INT 0
8884: GREATER
8885: IFFALSE 8965
// for i = 1 to ru2_eng do
8887: LD_ADDR_VAR 0 1
8891: PUSH
8892: DOUBLE
8893: LD_INT 1
8895: DEC
8896: ST_TO_ADDR
8897: LD_EXP 38
8901: PUSH
8902: FOR_TO
8903: IFFALSE 8963
// begin if IsInUnit ( ru2_eng [ i ] ) then
8905: LD_EXP 38
8909: PUSH
8910: LD_VAR 0 1
8914: ARRAY
8915: PPUSH
8916: CALL_OW 310
8920: IFFALSE 8937
// ComExitBuilding ( ru2_eng [ i ] ) ;
8922: LD_EXP 38
8926: PUSH
8927: LD_VAR 0 1
8931: ARRAY
8932: PPUSH
8933: CALL_OW 122
// ComRepairBuilding ( ru2_eng [ i ] , b_dmgunit [ 1 ] ) ;
8937: LD_EXP 38
8941: PUSH
8942: LD_VAR 0 1
8946: ARRAY
8947: PPUSH
8948: LD_VAR 0 6
8952: PUSH
8953: LD_INT 1
8955: ARRAY
8956: PPUSH
8957: CALL_OW 130
// end ;
8961: GO 8902
8963: POP
8964: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) > 0 then
8965: LD_INT 22
8967: PUSH
8968: LD_INT 3
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 34
8977: PUSH
8978: LD_INT 52
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 69
8993: PUSH
8994: LD_INT 0
8996: GREATER
8997: IFFALSE 9058
// for p in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) do
8999: LD_ADDR_VAR 0 2
9003: PUSH
9004: LD_INT 22
9006: PUSH
9007: LD_INT 3
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 34
9016: PUSH
9017: LD_INT 52
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 69
9032: PUSH
9033: FOR_IN
9034: IFFALSE 9056
// ComRepairBuilding ( p , b_dmgunit [ 1 ] ) ;
9036: LD_VAR 0 2
9040: PPUSH
9041: LD_VAR 0 6
9045: PUSH
9046: LD_INT 1
9048: ARRAY
9049: PPUSH
9050: CALL_OW 130
9054: GO 9033
9056: POP
9057: POP
// end else
9058: GO 9188
// if ru2_bul = 0 then
9060: LD_EXP 41
9064: PUSH
9065: LD_INT 0
9067: EQUAL
9068: IFFALSE 9188
// for i = 1 to ru2_eng do
9070: LD_ADDR_VAR 0 1
9074: PUSH
9075: DOUBLE
9076: LD_INT 1
9078: DEC
9079: ST_TO_ADDR
9080: LD_EXP 38
9084: PUSH
9085: FOR_TO
9086: IFFALSE 9186
// if not HasTask ( ru2_eng [ i ] ) then
9088: LD_EXP 38
9092: PUSH
9093: LD_VAR 0 1
9097: ARRAY
9098: PPUSH
9099: CALL_OW 314
9103: NOT
9104: IFFALSE 9184
// ComEnterUnit ( ru2_eng [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) , ru2_eng [ i ] ) ) ;
9106: LD_EXP 38
9110: PUSH
9111: LD_VAR 0 1
9115: ARRAY
9116: PPUSH
9117: LD_INT 22
9119: PUSH
9120: LD_INT 3
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 2
9129: PUSH
9130: LD_INT 30
9132: PUSH
9133: LD_INT 0
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: LD_INT 30
9142: PUSH
9143: LD_INT 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PPUSH
9159: CALL_OW 69
9163: PPUSH
9164: LD_EXP 38
9168: PUSH
9169: LD_VAR 0 1
9173: ARRAY
9174: PPUSH
9175: CALL_OW 74
9179: PPUSH
9180: CALL_OW 120
9184: GO 9085
9186: POP
9187: POP
// if b_labb > 0 then
9188: LD_VAR 0 11
9192: PUSH
9193: LD_INT 0
9195: GREATER
9196: IFFALSE 9546
// begin if h_dmgunit > 0 then
9198: LD_VAR 0 5
9202: PUSH
9203: LD_INT 0
9205: GREATER
9206: IFFALSE 9415
// begin for p = 1 to h_dmgunit do
9208: LD_ADDR_VAR 0 2
9212: PUSH
9213: DOUBLE
9214: LD_INT 1
9216: DEC
9217: ST_TO_ADDR
9218: LD_VAR 0 5
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9275
// if GetDistUnits ( h_dmgunit [ p ] , b_labb ) > 6 then
9226: LD_VAR 0 5
9230: PUSH
9231: LD_VAR 0 2
9235: ARRAY
9236: PPUSH
9237: LD_VAR 0 11
9241: PPUSH
9242: CALL_OW 296
9246: PUSH
9247: LD_INT 6
9249: GREATER
9250: IFFALSE 9273
// ComMoveXY ( h_dmgunit [ p ] , 95 , 72 ) ;
9252: LD_VAR 0 5
9256: PUSH
9257: LD_VAR 0 2
9261: ARRAY
9262: PPUSH
9263: LD_INT 95
9265: PPUSH
9266: LD_INT 72
9268: PPUSH
9269: CALL_OW 111
9273: GO 9223
9275: POP
9276: POP
// if ru2_sci > 0 then
9277: LD_EXP 40
9281: PUSH
9282: LD_INT 0
9284: GREATER
9285: IFFALSE 9415
// for i = 1 to ru2_sci do
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: DOUBLE
9293: LD_INT 1
9295: DEC
9296: ST_TO_ADDR
9297: LD_EXP 40
9301: PUSH
9302: FOR_TO
9303: IFFALSE 9413
// if IsInUnit ( ru2_sci [ i ] ) then
9305: LD_EXP 40
9309: PUSH
9310: LD_VAR 0 1
9314: ARRAY
9315: PPUSH
9316: CALL_OW 310
9320: IFFALSE 9339
// ComExitBuilding ( ru2_sci [ i ] ) else
9322: LD_EXP 40
9326: PUSH
9327: LD_VAR 0 1
9331: ARRAY
9332: PPUSH
9333: CALL_OW 122
9337: GO 9411
// if not HasTask ( ru2_sci [ i ] ) then
9339: LD_EXP 40
9343: PUSH
9344: LD_VAR 0 1
9348: ARRAY
9349: PPUSH
9350: CALL_OW 314
9354: NOT
9355: IFFALSE 9411
// if GetDistUnits ( ru2_sci [ i ] , h_dmgunit [ 1 ] ) <= 15 then
9357: LD_EXP 40
9361: PUSH
9362: LD_VAR 0 1
9366: ARRAY
9367: PPUSH
9368: LD_VAR 0 5
9372: PUSH
9373: LD_INT 1
9375: ARRAY
9376: PPUSH
9377: CALL_OW 296
9381: PUSH
9382: LD_INT 15
9384: LESSEQUAL
9385: IFFALSE 9411
// ComHeal ( ru2_sci [ i ] , h_dmgunit [ 1 ] ) ;
9387: LD_EXP 40
9391: PUSH
9392: LD_VAR 0 1
9396: ARRAY
9397: PPUSH
9398: LD_VAR 0 5
9402: PUSH
9403: LD_INT 1
9405: ARRAY
9406: PPUSH
9407: CALL_OW 128
9411: GO 9302
9413: POP
9414: POP
// end ; if h_dmgunit = 0 then
9415: LD_VAR 0 5
9419: PUSH
9420: LD_INT 0
9422: EQUAL
9423: IFFALSE 9546
// begin for i = 1 to ru2_sci do
9425: LD_ADDR_VAR 0 1
9429: PUSH
9430: DOUBLE
9431: LD_INT 1
9433: DEC
9434: ST_TO_ADDR
9435: LD_EXP 40
9439: PUSH
9440: FOR_TO
9441: IFFALSE 9483
// if not IsInUnit ( ru2_sci [ i ] ) then
9443: LD_EXP 40
9447: PUSH
9448: LD_VAR 0 1
9452: ARRAY
9453: PPUSH
9454: CALL_OW 310
9458: NOT
9459: IFFALSE 9481
// ComEnterUnit ( ru2_sci [ i ] , b_labb ) ;
9461: LD_EXP 40
9465: PUSH
9466: LD_VAR 0 1
9470: ARRAY
9471: PPUSH
9472: LD_VAR 0 11
9476: PPUSH
9477: CALL_OW 120
9481: GO 9440
9483: POP
9484: POP
// if ru2_tech > 0 then
9485: LD_EXP 36
9489: PUSH
9490: LD_INT 0
9492: GREATER
9493: IFFALSE 9546
// if BuildingStatus ( b_labb ) = bs_idle then
9495: LD_VAR 0 11
9499: PPUSH
9500: CALL_OW 461
9504: PUSH
9505: LD_INT 2
9507: EQUAL
9508: IFFALSE 9546
// begin ComResearch ( b_labb , ru2_tech [ 1 ] ) ;
9510: LD_VAR 0 11
9514: PPUSH
9515: LD_EXP 36
9519: PUSH
9520: LD_INT 1
9522: ARRAY
9523: PPUSH
9524: CALL_OW 124
// ru2_tech := Delete ( ru2_tech , 1 ) ;
9528: LD_ADDR_EXP 36
9532: PUSH
9533: LD_EXP 36
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 3
9545: ST_TO_ADDR
// end ; end ; end ; end ;
9546: PPOPN 13
9548: END
// every 0 0$01 trigger russian_produce do
9549: LD_EXP 20
9553: IFFALSE 10002
9555: GO 9557
9557: DISABLE
// begin case global_diff of 1 :
9558: LD_EXP 3
9562: PUSH
9563: LD_INT 1
9565: DOUBLE
9566: EQUAL
9567: IFTRUE 9571
9569: GO 9635
9571: POP
// ru_veh := ru_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ] ; 2 :
9572: LD_ADDR_EXP 27
9576: PUSH
9577: LD_EXP 27
9581: PUSH
9582: LD_INT 21
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: LD_INT 1
9590: PUSH
9591: LD_INT 42
9593: PUSH
9594: LD_INT 21
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: LD_INT 1
9602: PUSH
9603: LD_INT 42
9605: PUSH
9606: LD_INT 21
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: LD_INT 1
9614: PUSH
9615: LD_INT 43
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: ADD
9632: ST_TO_ADDR
9633: GO 9780
9635: LD_INT 2
9637: DOUBLE
9638: EQUAL
9639: IFTRUE 9643
9641: GO 9707
9643: POP
// ru_veh := ru_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ; 3 :
9644: LD_ADDR_EXP 27
9648: PUSH
9649: LD_EXP 27
9653: PUSH
9654: LD_INT 21
9656: PUSH
9657: LD_INT 1
9659: PUSH
9660: LD_INT 1
9662: PUSH
9663: LD_INT 44
9665: PUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 1
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 42
9677: PUSH
9678: LD_INT 22
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: LD_INT 43
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: ADD
9704: ST_TO_ADDR
9705: GO 9780
9707: LD_INT 3
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9779
9715: POP
// ru_veh := ru_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_gatling_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher ] ; end ;
9716: LD_ADDR_EXP 27
9720: PUSH
9721: LD_EXP 27
9725: PUSH
9726: LD_INT 23
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: LD_INT 43
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: LD_INT 1
9746: PUSH
9747: LD_INT 44
9749: PUSH
9750: LD_INT 22
9752: PUSH
9753: LD_INT 1
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: LD_INT 45
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: ADD
9776: ST_TO_ADDR
9777: GO 9780
9779: POP
// case global_diff of 1 :
9780: LD_EXP 3
9784: PUSH
9785: LD_INT 1
9787: DOUBLE
9788: EQUAL
9789: IFTRUE 9793
9791: GO 9857
9793: POP
// ru2_veh := ru2_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ] ; 2 :
9794: LD_ADDR_EXP 37
9798: PUSH
9799: LD_EXP 37
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 1
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: LD_INT 42
9815: PUSH
9816: LD_INT 21
9818: PUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 1
9824: PUSH
9825: LD_INT 42
9827: PUSH
9828: LD_INT 21
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: LD_INT 43
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: ADD
9854: ST_TO_ADDR
9855: GO 10002
9857: LD_INT 2
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9929
9865: POP
// ru2_veh := ru2_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ; 3 :
9866: LD_ADDR_EXP 37
9870: PUSH
9871: LD_EXP 37
9875: PUSH
9876: LD_INT 21
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: LD_INT 44
9887: PUSH
9888: LD_INT 22
9890: PUSH
9891: LD_INT 1
9893: PUSH
9894: LD_INT 1
9896: PUSH
9897: LD_INT 44
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 1
9905: PUSH
9906: LD_INT 1
9908: PUSH
9909: LD_INT 43
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: ADD
9926: ST_TO_ADDR
9927: GO 10002
9929: LD_INT 3
9931: DOUBLE
9932: EQUAL
9933: IFTRUE 9937
9935: GO 10001
9937: POP
// ru2_veh := ru2_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun ] ; end ;
9938: LD_ADDR_EXP 37
9942: PUSH
9943: LD_EXP 37
9947: PUSH
9948: LD_INT 23
9950: PUSH
9951: LD_INT 1
9953: PUSH
9954: LD_INT 1
9956: PUSH
9957: LD_INT 42
9959: PUSH
9960: LD_INT 22
9962: PUSH
9963: LD_INT 1
9965: PUSH
9966: LD_INT 1
9968: PUSH
9969: LD_INT 44
9971: PUSH
9972: LD_INT 22
9974: PUSH
9975: LD_INT 1
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: LD_INT 44
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: ADD
9998: ST_TO_ADDR
9999: GO 10002
10001: POP
// end ;
10002: END
// every 12 12$00 trigger timer >= [ 26 26$00 , 21 21$00 , 16 16$00 ] [ global_diff ] and FilterAllUnits ( [ f_side , 3 ] ) > 0 do var veh , i , p , area ;
10003: LD_EXP 2
10007: PUSH
10008: LD_INT 54600
10010: PUSH
10011: LD_INT 44100
10013: PUSH
10014: LD_INT 33600
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_EXP 3
10026: ARRAY
10027: GREATEREQUAL
10028: PUSH
10029: LD_INT 22
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PPUSH
10039: CALL_OW 69
10043: PUSH
10044: LD_INT 0
10046: GREATER
10047: AND
10048: IFFALSE 10264
10050: GO 10052
10052: DISABLE
10053: LD_INT 0
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
// begin enable ;
10059: ENABLE
// uc_side := [ 3 , 6 ] [ Rand ( 1 , 2 ) ] ;
10060: LD_ADDR_OWVAR 20
10064: PUSH
10065: LD_INT 3
10067: PUSH
10068: LD_INT 6
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 1
10077: PPUSH
10078: LD_INT 2
10080: PPUSH
10081: CALL_OW 12
10085: ARRAY
10086: ST_TO_ADDR
// uc_nation := 3 ;
10087: LD_ADDR_OWVAR 21
10091: PUSH
10092: LD_INT 3
10094: ST_TO_ADDR
// area := [ ru_west , south_spawn ] ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: LD_INT 18
10102: PUSH
10103: LD_INT 7
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
10110: LD_ADDR_VAR 0 3
10114: PUSH
10115: LD_INT 1
10117: PPUSH
10118: LD_INT 2
10120: PPUSH
10121: CALL_OW 12
10125: ST_TO_ADDR
// for i = 1 to Rand ( 1 , 2 ) do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 1
10138: PPUSH
10139: LD_INT 2
10141: PPUSH
10142: CALL_OW 12
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10262
// begin vc_chassis := ru_medium_tracked ;
10150: LD_ADDR_OWVAR 37
10154: PUSH
10155: LD_INT 22
10157: ST_TO_ADDR
// vc_engine := engine_combustion ;
10158: LD_ADDR_OWVAR 39
10162: PUSH
10163: LD_INT 1
10165: ST_TO_ADDR
// vc_control := control_manual ;
10166: LD_ADDR_OWVAR 38
10170: PUSH
10171: LD_INT 1
10173: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ Rand ( 1 , 3 ) ] ;
10174: LD_ADDR_OWVAR 40
10178: PUSH
10179: LD_INT 43
10181: PUSH
10182: LD_INT 44
10184: PUSH
10185: LD_INT 45
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 1
10195: PPUSH
10196: LD_INT 3
10198: PPUSH
10199: CALL_OW 12
10203: ARRAY
10204: ST_TO_ADDR
// veh := CreateVehicle ;
10205: LD_ADDR_VAR 0 1
10209: PUSH
10210: CALL_OW 45
10214: ST_TO_ADDR
// PlaceUnitArea ( veh , area [ p ] , false ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 4
10224: PUSH
10225: LD_VAR 0 3
10229: ARRAY
10230: PPUSH
10231: LD_INT 0
10233: PPUSH
10234: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , ru_def ) , veh ) ;
10238: LD_INT 3
10240: PPUSH
10241: LD_EXP 5
10245: PPUSH
10246: CALL 425 0 2
10250: PPUSH
10251: LD_VAR 0 1
10255: PPUSH
10256: CALL_OW 52
// end ;
10260: GO 10147
10262: POP
10263: POP
// end ;
10264: PPOPN 4
10266: END
// every 4 4$35 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] ] ] ] ) >= 6 do var filter , enemy , i , _list ;
10267: LD_INT 2
10269: PUSH
10270: LD_INT 22
10272: PUSH
10273: LD_INT 3
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 22
10282: PUSH
10283: LD_INT 6
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 21
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: LD_INT 34
10313: PUSH
10314: LD_INT 52
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 34
10323: PUSH
10324: LD_INT 51
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 34
10333: PUSH
10334: LD_INT 53
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL_OW 69
10360: PUSH
10361: LD_INT 6
10363: GREATEREQUAL
10364: IFFALSE 10604
10366: GO 10368
10368: DISABLE
10369: LD_INT 0
10371: PPUSH
10372: PPUSH
10373: PPUSH
10374: PPUSH
// begin enable ;
10375: ENABLE
// _list := [ [ b_oil_mine , b_solar_power , b_oil_power ] , [ us_cargo_bay ] , [ ] ] ;
10376: LD_ADDR_VAR 0 4
10380: PUSH
10381: LD_INT 29
10383: PUSH
10384: LD_INT 27
10386: PUSH
10387: LD_INT 26
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 12
10397: PUSH
10398: EMPTY
10399: LIST
10400: PUSH
10401: EMPTY
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
// filter := ru_list_attackers ;
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: LD_EXP 43
10417: ST_TO_ADDR
// while ( filter ) do
10418: LD_VAR 0 1
10422: IFFALSE 10604
// begin Wait ( 0 0$01 ) ;
10424: LD_INT 35
10426: PPUSH
10427: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
10431: LD_INT 22
10433: PUSH
10434: LD_INT 2
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: PUSH
10446: LD_INT 0
10448: EQUAL
10449: IFFALSE 10491
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) else
10451: LD_ADDR_VAR 0 2
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: LD_INT 22
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_INT 4
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 69
10488: ST_TO_ADDR
10489: GO 10511
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
10491: LD_ADDR_VAR 0 2
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 69
10510: ST_TO_ADDR
// for i = filter downto 1 do
10511: LD_ADDR_VAR 0 3
10515: PUSH
10516: DOUBLE
10517: LD_VAR 0 1
10521: INC
10522: ST_TO_ADDR
10523: LD_INT 1
10525: PUSH
10526: FOR_DOWNTO
10527: IFFALSE 10591
// if not IsPlaced ( filter [ i ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_VAR 0 3
10538: ARRAY
10539: PPUSH
10540: CALL_OW 305
10544: NOT
10545: IFFALSE 10569
// filter := Delete ( filter , i ) else
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_VAR 0 1
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: CALL_OW 3
10566: ST_TO_ADDR
10567: GO 10589
// ComAttack ( filter [ i ] , _list ) ;
10569: LD_VAR 0 1
10573: PUSH
10574: LD_VAR 0 3
10578: ARRAY
10579: PPUSH
10580: LD_VAR 0 4
10584: PPUSH
10585: CALL 992 0 2
10589: GO 10526
10591: POP
10592: POP
// if not filter then
10593: LD_VAR 0 1
10597: NOT
10598: IFFALSE 10602
// break ;
10600: GO 10604
// end ;
10602: GO 10418
// end ;
10604: PPOPN 4
10606: END
// export ru_spec_group ; every 0 0$10 trigger FilterUnitsInArea ( buffor , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 do var i , un , veh ;
10607: LD_INT 22
10609: PPUSH
10610: LD_INT 22
10612: PUSH
10613: LD_INT 1
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 3
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: PUSH
10639: LD_INT 0
10641: GREATER
10642: IFFALSE 10787
10644: GO 10646
10646: DISABLE
10647: LD_INT 0
10649: PPUSH
10650: PPUSH
10651: PPUSH
// begin uc_side := 6 ;
10652: LD_ADDR_OWVAR 20
10656: PUSH
10657: LD_INT 6
10659: ST_TO_ADDR
// uc_nation := 3 ;
10660: LD_ADDR_OWVAR 21
10664: PUSH
10665: LD_INT 3
10667: ST_TO_ADDR
// for i = 1 to Difficulty + 1 do
10668: LD_ADDR_VAR 0 1
10672: PUSH
10673: DOUBLE
10674: LD_INT 1
10676: DEC
10677: ST_TO_ADDR
10678: LD_OWVAR 67
10682: PUSH
10683: LD_INT 1
10685: PLUS
10686: PUSH
10687: FOR_TO
10688: IFFALSE 10782
// begin vc_chassis := ru_medium_tracked ;
10690: LD_ADDR_OWVAR 37
10694: PUSH
10695: LD_INT 22
10697: ST_TO_ADDR
// vc_engine := engine_combustion ;
10698: LD_ADDR_OWVAR 39
10702: PUSH
10703: LD_INT 1
10705: ST_TO_ADDR
// vc_control := control_manual ;
10706: LD_ADDR_OWVAR 38
10710: PUSH
10711: LD_INT 1
10713: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
10714: LD_ADDR_OWVAR 40
10718: PUSH
10719: LD_INT 45
10721: ST_TO_ADDR
// veh := CreateVehicle ;
10722: LD_ADDR_VAR 0 3
10726: PUSH
10727: CALL_OW 45
10731: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_INT 3
10739: PPUSH
10740: LD_EXP 5
10744: PPUSH
10745: CALL 425 0 2
10749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10750: LD_VAR 0 2
10754: PPUSH
10755: LD_VAR 0 3
10759: PPUSH
10760: CALL_OW 52
// ru_spec_group := ru_spec_group ^ veh ;
10764: LD_ADDR_EXP 44
10768: PUSH
10769: LD_EXP 44
10773: PUSH
10774: LD_VAR 0 3
10778: ADD
10779: ST_TO_ADDR
// end ;
10780: GO 10687
10782: POP
10783: POP
// enable ( 99 ) ;
10784: LD_INT 99
10786: ENABLE_MARKED
// end ;
10787: PPOPN 3
10789: END
// every 0 0$01 trigger ru_spec_group marked 99 do var i , enemy , filter ;
10790: LD_EXP 44
10794: IFFALSE 10963
10796: GO 10798
10798: DISABLE
10799: LD_INT 0
10801: PPUSH
10802: PPUSH
10803: PPUSH
// begin enable ;
10804: ENABLE
// filter := ru_spec_group ;
10805: LD_ADDR_VAR 0 3
10809: PUSH
10810: LD_EXP 44
10814: ST_TO_ADDR
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
10815: LD_INT 22
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: CALL_OW 69
10829: PUSH
10830: LD_INT 0
10832: EQUAL
10833: IFFALSE 10875
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) else
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 4
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: PPUSH
10868: CALL_OW 69
10872: ST_TO_ADDR
10873: GO 10895
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
10875: LD_ADDR_VAR 0 2
10879: PUSH
10880: LD_INT 22
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 69
10894: ST_TO_ADDR
// if filter > 0 then
10895: LD_VAR 0 3
10899: PUSH
10900: LD_INT 0
10902: GREATER
10903: IFFALSE 10963
// for i = 1 to filter do
10905: LD_ADDR_VAR 0 1
10909: PUSH
10910: DOUBLE
10911: LD_INT 1
10913: DEC
10914: ST_TO_ADDR
10915: LD_VAR 0 3
10919: PUSH
10920: FOR_TO
10921: IFFALSE 10961
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
10923: LD_VAR 0 3
10927: PUSH
10928: LD_VAR 0 1
10932: ARRAY
10933: PPUSH
10934: LD_VAR 0 2
10938: PPUSH
10939: LD_VAR 0 3
10943: PUSH
10944: LD_VAR 0 1
10948: ARRAY
10949: PPUSH
10950: CALL_OW 74
10954: PPUSH
10955: CALL_OW 115
10959: GO 10920
10961: POP
10962: POP
// end ; end_of_file
10963: PPOPN 3
10965: END
// export function ArabianAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
10966: LD_INT 0
10968: PPUSH
10969: PPUSH
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
// uc_side := side ;
10975: LD_ADDR_OWVAR 20
10979: PUSH
10980: LD_VAR 0 1
10984: ST_TO_ADDR
// uc_nation := nation_arabian ;
10985: LD_ADDR_OWVAR 21
10989: PUSH
10990: LD_INT 2
10992: ST_TO_ADDR
// chassis := [ ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
10993: LD_ADDR_VAR 0 10
10997: PUSH
10998: LD_INT 12
11000: PUSH
11001: LD_INT 13
11003: PUSH
11004: LD_INT 14
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: ST_TO_ADDR
// weapon := [ ar_multimissile_ballista , ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher ] ;
11012: LD_ADDR_VAR 0 11
11016: PUSH
11017: LD_INT 22
11019: PUSH
11020: LD_INT 24
11022: PUSH
11023: LD_INT 25
11025: PUSH
11026: LD_INT 27
11028: PUSH
11029: LD_INT 28
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: ST_TO_ADDR
// case typ of 1 :
11039: LD_VAR 0 3
11043: PUSH
11044: LD_INT 1
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11277
11052: POP
// begin for i = 1 to num do
11053: LD_ADDR_VAR 0 6
11057: PUSH
11058: DOUBLE
11059: LD_INT 1
11061: DEC
11062: ST_TO_ADDR
11063: LD_VAR 0 2
11067: PUSH
11068: FOR_TO
11069: IFFALSE 11228
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
11071: LD_ADDR_OWVAR 37
11075: PUSH
11076: LD_VAR 0 10
11080: PUSH
11081: LD_INT 1
11083: PPUSH
11084: LD_INT 2
11086: PPUSH
11087: CALL_OW 12
11091: ARRAY
11092: ST_TO_ADDR
// vc_engine := engine_combustion ;
11093: LD_ADDR_OWVAR 39
11097: PUSH
11098: LD_INT 1
11100: ST_TO_ADDR
// vc_control := control_manual ;
11101: LD_ADDR_OWVAR 38
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 2 ) ] ;
11109: LD_ADDR_OWVAR 40
11113: PUSH
11114: LD_VAR 0 11
11118: PUSH
11119: LD_INT 1
11121: PPUSH
11122: LD_INT 2
11124: PPUSH
11125: CALL_OW 12
11129: ARRAY
11130: ST_TO_ADDR
// veh := CreateVehicle ;
11131: LD_ADDR_VAR 0 9
11135: PUSH
11136: CALL_OW 45
11140: ST_TO_ADDR
// if area = ar_area1 then
11141: LD_VAR 0 4
11145: PUSH
11146: LD_INT 6
11148: EQUAL
11149: IFFALSE 11165
// SetDir ( veh , 3 ) else
11151: LD_VAR 0 9
11155: PPUSH
11156: LD_INT 3
11158: PPUSH
11159: CALL_OW 233
11163: GO 11177
// SetDir ( veh , 0 ) ;
11165: LD_VAR 0 9
11169: PPUSH
11170: LD_INT 0
11172: PPUSH
11173: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
11177: LD_VAR 0 9
11181: PPUSH
11182: LD_VAR 0 4
11186: PPUSH
11187: LD_INT 0
11189: PPUSH
11190: CALL_OW 49
// un := CreateHumanWithClass ( 1 , ar_def ) ;
11194: LD_ADDR_VAR 0 7
11198: PUSH
11199: LD_INT 1
11201: PPUSH
11202: LD_EXP 8
11206: PPUSH
11207: CALL 425 0 2
11211: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11212: LD_VAR 0 7
11216: PPUSH
11217: LD_VAR 0 9
11221: PPUSH
11222: CALL_OW 52
// end ;
11226: GO 11068
11228: POP
11229: POP
// for i = 1 to 3 do
11230: LD_ADDR_VAR 0 6
11234: PUSH
11235: DOUBLE
11236: LD_INT 1
11238: DEC
11239: ST_TO_ADDR
11240: LD_INT 3
11242: PUSH
11243: FOR_TO
11244: IFFALSE 11273
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , ar_def ) , area , false ) ;
11246: LD_INT 8
11248: PPUSH
11249: LD_EXP 8
11253: PPUSH
11254: CALL 425 0 2
11258: PPUSH
11259: LD_VAR 0 4
11263: PPUSH
11264: LD_INT 0
11266: PPUSH
11267: CALL_OW 49
11271: GO 11243
11273: POP
11274: POP
// end ; 2 :
11275: GO 11544
11277: LD_INT 2
11279: DOUBLE
11280: EQUAL
11281: IFTRUE 11285
11283: GO 11543
11285: POP
// begin for i = 1 to num do
11286: LD_ADDR_VAR 0 6
11290: PUSH
11291: DOUBLE
11292: LD_INT 1
11294: DEC
11295: ST_TO_ADDR
11296: LD_VAR 0 2
11300: PUSH
11301: FOR_TO
11302: IFFALSE 11461
// begin vc_chassis := chassis [ Rand ( 2 , 3 ) ] ;
11304: LD_ADDR_OWVAR 37
11308: PUSH
11309: LD_VAR 0 10
11313: PUSH
11314: LD_INT 2
11316: PPUSH
11317: LD_INT 3
11319: PPUSH
11320: CALL_OW 12
11324: ARRAY
11325: ST_TO_ADDR
// vc_engine := engine_combustion ;
11326: LD_ADDR_OWVAR 39
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// vc_control := control_manual ;
11334: LD_ADDR_OWVAR 38
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
11342: LD_ADDR_OWVAR 40
11346: PUSH
11347: LD_VAR 0 11
11351: PUSH
11352: LD_INT 3
11354: PPUSH
11355: LD_INT 5
11357: PPUSH
11358: CALL_OW 12
11362: ARRAY
11363: ST_TO_ADDR
// veh := CreateVehicle ;
11364: LD_ADDR_VAR 0 9
11368: PUSH
11369: CALL_OW 45
11373: ST_TO_ADDR
// if area = ar_area1 then
11374: LD_VAR 0 4
11378: PUSH
11379: LD_INT 6
11381: EQUAL
11382: IFFALSE 11398
// SetDir ( veh , 3 ) else
11384: LD_VAR 0 9
11388: PPUSH
11389: LD_INT 3
11391: PPUSH
11392: CALL_OW 233
11396: GO 11410
// SetDir ( veh , 0 ) ;
11398: LD_VAR 0 9
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
11410: LD_VAR 0 9
11414: PPUSH
11415: LD_VAR 0 4
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// un := CreateHumanWithClass ( 1 , ar_def ) ;
11427: LD_ADDR_VAR 0 7
11431: PUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_EXP 8
11439: PPUSH
11440: CALL 425 0 2
11444: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11445: LD_VAR 0 7
11449: PPUSH
11450: LD_VAR 0 9
11454: PPUSH
11455: CALL_OW 52
// end ;
11459: GO 11301
11461: POP
11462: POP
// for i = 1 to 2 do
11463: LD_ADDR_VAR 0 6
11467: PUSH
11468: DOUBLE
11469: LD_INT 1
11471: DEC
11472: ST_TO_ADDR
11473: LD_INT 2
11475: PUSH
11476: FOR_TO
11477: IFFALSE 11539
// begin uc_nation := 0 ;
11479: LD_ADDR_OWVAR 21
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// hc_class := 17 ;
11487: LD_ADDR_OWVAR 28
11491: PUSH
11492: LD_INT 17
11494: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
11495: LD_ADDR_OWVAR 29
11499: PUSH
11500: LD_INT 11
11502: PUSH
11503: LD_INT 13
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: ST_TO_ADDR
// un := CreateHuman ;
11510: LD_ADDR_VAR 0 7
11514: PUSH
11515: CALL_OW 44
11519: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
11520: LD_VAR 0 7
11524: PPUSH
11525: LD_VAR 0 4
11529: PPUSH
11530: LD_INT 0
11532: PPUSH
11533: CALL_OW 49
// end ;
11537: GO 11476
11539: POP
11540: POP
// end ; end ;
11541: GO 11544
11543: POP
// end ;
11544: LD_VAR 0 5
11548: RET
// export function FHeike ; begin
11549: LD_INT 0
11551: PPUSH
// uc_side := 2 ;
11552: LD_ADDR_OWVAR 20
11556: PUSH
11557: LD_INT 2
11559: ST_TO_ADDR
// uc_nation := 2 ;
11560: LD_ADDR_OWVAR 21
11564: PUSH
11565: LD_INT 2
11567: ST_TO_ADDR
// hc_gallery := sandar ;
11568: LD_ADDR_OWVAR 33
11572: PUSH
11573: LD_STRING sandar
11575: ST_TO_ADDR
// hc_face_number := 14 ;
11576: LD_ADDR_OWVAR 34
11580: PUSH
11581: LD_INT 14
11583: ST_TO_ADDR
// hc_name := Heike Steyer ;
11584: LD_ADDR_OWVAR 26
11588: PUSH
11589: LD_STRING Heike Steyer
11591: ST_TO_ADDR
// hc_sex := sex_female ;
11592: LD_ADDR_OWVAR 27
11596: PUSH
11597: LD_INT 2
11599: ST_TO_ADDR
// hc_class := 1 ;
11600: LD_ADDR_OWVAR 28
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// heike := CreateHuman ;
11608: LD_ADDR_EXP 16
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// end ;
11618: LD_VAR 0 1
11622: RET
// every 0 0$01 do var filter , enemy , i ;
11623: GO 11625
11625: DISABLE
11626: LD_INT 0
11628: PPUSH
11629: PPUSH
11630: PPUSH
// begin enable ;
11631: ENABLE
// filter := FilterAllUnits ( [ f_side , 2 ] ) ;
11632: LD_ADDR_VAR 0 1
11636: PUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
11652: LD_ADDR_VAR 0 2
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 1
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 22
11682: PUSH
11683: LD_INT 6
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if filter > 0 then
11701: LD_VAR 0 1
11705: PUSH
11706: LD_INT 0
11708: GREATER
11709: IFFALSE 11769
// for i = 1 to filter do
11711: LD_ADDR_VAR 0 3
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 1
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11767
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
11729: LD_VAR 0 1
11733: PUSH
11734: LD_VAR 0 3
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: LD_VAR 0 1
11749: PUSH
11750: LD_VAR 0 3
11754: ARRAY
11755: PPUSH
11756: CALL_OW 74
11760: PPUSH
11761: CALL_OW 115
11765: GO 11726
11767: POP
11768: POP
// end ; end_of_file
11769: PPOPN 3
11771: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11772: LD_VAR 0 1
11776: PPUSH
11777: CALL 26281 0 1
// if un = sikorski then
11781: LD_VAR 0 1
11785: PUSH
11786: LD_EXP 14
11790: EQUAL
11791: IFFALSE 11800
// YouLost ( sik ) ;
11793: LD_STRING sik
11795: PPUSH
11796: CALL_OW 104
// if un = omikron then
11800: LD_VAR 0 1
11804: PUSH
11805: LD_INT 64
11807: EQUAL
11808: IFFALSE 11817
// YouLost ( omi ) ;
11810: LD_STRING omi
11812: PPUSH
11813: CALL_OW 104
// if un in ru_list_attackers then
11817: LD_VAR 0 1
11821: PUSH
11822: LD_EXP 43
11826: IN
11827: IFFALSE 11845
// ru_list_attackers := ru_list_attackers diff un ;
11829: LD_ADDR_EXP 43
11833: PUSH
11834: LD_EXP 43
11838: PUSH
11839: LD_VAR 0 1
11843: DIFF
11844: ST_TO_ADDR
// if GetSide ( un ) = 6 and un in FilterAllUnits ( [ f_type , unit_building ] ) then
11845: LD_VAR 0 1
11849: PPUSH
11850: CALL_OW 255
11854: PUSH
11855: LD_INT 6
11857: EQUAL
11858: PUSH
11859: LD_VAR 0 1
11863: PUSH
11864: LD_INT 21
11866: PUSH
11867: LD_INT 3
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PPUSH
11874: CALL_OW 69
11878: IN
11879: AND
11880: IFFALSE 12099
// begin if GetBType ( un ) = b_factory then
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 266
11891: PUSH
11892: LD_INT 3
11894: EQUAL
11895: IFFALSE 11911
// ru_bul := ru_bul ^ b_workshop ;
11897: LD_ADDR_EXP 31
11901: PUSH
11902: LD_EXP 31
11906: PUSH
11907: LD_INT 2
11909: ADD
11910: ST_TO_ADDR
// if GetBType ( un ) = b_lab_full or GetBType ( un ) = b_lab_half then
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL_OW 266
11920: PUSH
11921: LD_INT 8
11923: EQUAL
11924: PUSH
11925: LD_VAR 0 1
11929: PPUSH
11930: CALL_OW 266
11934: PUSH
11935: LD_INT 7
11937: EQUAL
11938: OR
11939: IFFALSE 11955
// ru_bul := ru_bul ^ b_lab ;
11941: LD_ADDR_EXP 31
11945: PUSH
11946: LD_EXP 31
11950: PUSH
11951: LD_INT 6
11953: ADD
11954: ST_TO_ADDR
// if GetBType ( un ) = b_barracks then
11955: LD_VAR 0 1
11959: PPUSH
11960: CALL_OW 266
11964: PUSH
11965: LD_INT 5
11967: EQUAL
11968: IFFALSE 11984
// ru_bul := ru_bul ^ b_armoury ;
11970: LD_ADDR_EXP 31
11974: PUSH
11975: LD_EXP 31
11979: PUSH
11980: LD_INT 4
11982: ADD
11983: ST_TO_ADDR
// if not GetBType ( un ) in [ b_factory , b_lab_full , b_lab_half , b_barracks ] then
11984: LD_VAR 0 1
11988: PPUSH
11989: CALL_OW 266
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: LD_INT 8
11999: PUSH
12000: LD_INT 7
12002: PUSH
12003: LD_INT 5
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: IN
12012: NOT
12013: IFFALSE 12036
// ru_bul := ru_bul ^ GetBType ( un ) ;
12015: LD_ADDR_EXP 31
12019: PUSH
12020: LD_EXP 31
12024: PUSH
12025: LD_VAR 0 1
12029: PPUSH
12030: CALL_OW 266
12034: ADD
12035: ST_TO_ADDR
// ru_bul := ru_bul ^ GetX ( un ) ;
12036: LD_ADDR_EXP 31
12040: PUSH
12041: LD_EXP 31
12045: PUSH
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 250
12055: ADD
12056: ST_TO_ADDR
// ru_bul := ru_bul ^ GetY ( un ) ;
12057: LD_ADDR_EXP 31
12061: PUSH
12062: LD_EXP 31
12066: PUSH
12067: LD_VAR 0 1
12071: PPUSH
12072: CALL_OW 251
12076: ADD
12077: ST_TO_ADDR
// ru_bul := ru_bul ^ GetDir ( un ) ;
12078: LD_ADDR_EXP 31
12082: PUSH
12083: LD_EXP 31
12087: PUSH
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 254
12097: ADD
12098: ST_TO_ADDR
// end ; if GetSide ( un ) = 6 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) diff FilterAllUnits ( [ f_weapon , ru_rocket_launcher ] ) then
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 255
12108: PUSH
12109: LD_INT 6
12111: EQUAL
12112: PUSH
12113: LD_VAR 0 1
12117: PUSH
12118: LD_INT 21
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PPUSH
12128: CALL_OW 69
12132: PUSH
12133: LD_INT 34
12135: PUSH
12136: LD_INT 45
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: DIFF
12148: IN
12149: AND
12150: IFFALSE 12236
// begin ru_veh := ru_veh ^ GetChassis ( un ) ;
12152: LD_ADDR_EXP 27
12156: PUSH
12157: LD_EXP 27
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 265
12171: ADD
12172: ST_TO_ADDR
// ru_veh := ru_veh ^ GetEngine ( un ) ;
12173: LD_ADDR_EXP 27
12177: PUSH
12178: LD_EXP 27
12182: PUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL_OW 262
12192: ADD
12193: ST_TO_ADDR
// ru_veh := ru_veh ^ GetControl ( un ) ;
12194: LD_ADDR_EXP 27
12198: PUSH
12199: LD_EXP 27
12203: PUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 263
12213: ADD
12214: ST_TO_ADDR
// ru_veh := ru_veh ^ GetWeapon ( un ) ;
12215: LD_ADDR_EXP 27
12219: PUSH
12220: LD_EXP 27
12224: PUSH
12225: LD_VAR 0 1
12229: PPUSH
12230: CALL_OW 264
12234: ADD
12235: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_lives , 251 ] ] ) > 0 then
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 22
12243: PUSH
12244: LD_INT 6
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 25
12253: PUSH
12254: LD_INT 3
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: IN
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: LD_INT 6
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: LD_INT 3
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 24
12293: PUSH
12294: LD_INT 251
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 69
12310: PUSH
12311: LD_INT 0
12313: GREATER
12314: AND
12315: IFFALSE 12363
// begin uc_side := 6 ;
12317: LD_ADDR_OWVAR 20
12321: PUSH
12322: LD_INT 6
12324: ST_TO_ADDR
// uc_nation := 3 ;
12325: LD_ADDR_OWVAR 21
12329: PUSH
12330: LD_INT 3
12332: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_INT 3
12340: PPUSH
12341: LD_EXP 5
12345: PPUSH
12346: CALL 425 0 2
12350: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
12351: LD_VAR 0 1
12355: PPUSH
12356: LD_INT 92
12358: PPUSH
12359: CALL_OW 52
// end ; if GetSide ( un ) = 3 and un in FilterAllUnits ( [ f_type , unit_building ] ) then
12363: LD_VAR 0 1
12367: PPUSH
12368: CALL_OW 255
12372: PUSH
12373: LD_INT 3
12375: EQUAL
12376: PUSH
12377: LD_VAR 0 1
12381: PUSH
12382: LD_INT 21
12384: PUSH
12385: LD_INT 3
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 69
12396: IN
12397: AND
12398: IFFALSE 12629
// begin if GetBType ( un ) = b_factory then
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 266
12409: PUSH
12410: LD_INT 3
12412: EQUAL
12413: IFFALSE 12429
// ru2_bul := ru2_bul ^ b_workshop ;
12415: LD_ADDR_EXP 41
12419: PUSH
12420: LD_EXP 41
12424: PUSH
12425: LD_INT 2
12427: ADD
12428: ST_TO_ADDR
// if GetBType ( un ) = b_lab_full or GetBType ( un ) = b_lab_half then
12429: LD_VAR 0 1
12433: PPUSH
12434: CALL_OW 266
12438: PUSH
12439: LD_INT 8
12441: EQUAL
12442: PUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 266
12452: PUSH
12453: LD_INT 7
12455: EQUAL
12456: OR
12457: IFFALSE 12473
// ru2_bul := ru2_bul ^ b_lab ;
12459: LD_ADDR_EXP 41
12463: PUSH
12464: LD_EXP 41
12468: PUSH
12469: LD_INT 6
12471: ADD
12472: ST_TO_ADDR
// if GetBType ( un ) = b_barracks then
12473: LD_VAR 0 1
12477: PPUSH
12478: CALL_OW 266
12482: PUSH
12483: LD_INT 5
12485: EQUAL
12486: IFFALSE 12502
// ru2_bul := ru2_bul ^ b_armoury ;
12488: LD_ADDR_EXP 41
12492: PUSH
12493: LD_EXP 41
12497: PUSH
12498: LD_INT 4
12500: ADD
12501: ST_TO_ADDR
// if not GetBType ( un ) in [ b_factory , b_lab_full , b_lab_half , b_barracks , b_ext_gun , b_ext_noncombat , b_ext_track ] then
12502: LD_VAR 0 1
12506: PPUSH
12507: CALL_OW 266
12511: PUSH
12512: LD_INT 3
12514: PUSH
12515: LD_INT 8
12517: PUSH
12518: LD_INT 7
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: LD_INT 17
12526: PUSH
12527: LD_INT 19
12529: PUSH
12530: LD_INT 16
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: IN
12542: NOT
12543: IFFALSE 12566
// ru2_bul := ru2_bul ^ GetBType ( un ) ;
12545: LD_ADDR_EXP 41
12549: PUSH
12550: LD_EXP 41
12554: PUSH
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 266
12564: ADD
12565: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetX ( un ) ;
12566: LD_ADDR_EXP 41
12570: PUSH
12571: LD_EXP 41
12575: PUSH
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 250
12585: ADD
12586: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetY ( un ) ;
12587: LD_ADDR_EXP 41
12591: PUSH
12592: LD_EXP 41
12596: PUSH
12597: LD_VAR 0 1
12601: PPUSH
12602: CALL_OW 251
12606: ADD
12607: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetDir ( un ) ;
12608: LD_ADDR_EXP 41
12612: PUSH
12613: LD_EXP 41
12617: PUSH
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 254
12627: ADD
12628: ST_TO_ADDR
// end ; if GetSide ( un ) = 3 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) diff FilterAllUnits ( [ f_weapon , ru_rocket_launcher ] ) then
12629: LD_VAR 0 1
12633: PPUSH
12634: CALL_OW 255
12638: PUSH
12639: LD_INT 3
12641: EQUAL
12642: PUSH
12643: LD_VAR 0 1
12647: PUSH
12648: LD_INT 21
12650: PUSH
12651: LD_INT 2
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PPUSH
12658: CALL_OW 69
12662: PUSH
12663: LD_INT 34
12665: PUSH
12666: LD_INT 45
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: DIFF
12678: IN
12679: AND
12680: IFFALSE 12766
// begin ru2_veh := ru2_veh ^ GetChassis ( un ) ;
12682: LD_ADDR_EXP 37
12686: PUSH
12687: LD_EXP 37
12691: PUSH
12692: LD_VAR 0 1
12696: PPUSH
12697: CALL_OW 265
12701: ADD
12702: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetEngine ( un ) ;
12703: LD_ADDR_EXP 37
12707: PUSH
12708: LD_EXP 37
12712: PUSH
12713: LD_VAR 0 1
12717: PPUSH
12718: CALL_OW 262
12722: ADD
12723: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetControl ( un ) ;
12724: LD_ADDR_EXP 37
12728: PUSH
12729: LD_EXP 37
12733: PUSH
12734: LD_VAR 0 1
12738: PPUSH
12739: CALL_OW 263
12743: ADD
12744: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetWeapon ( un ) ;
12745: LD_ADDR_EXP 37
12749: PUSH
12750: LD_EXP 37
12754: PUSH
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 264
12764: ADD
12765: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_lives , 251 ] ] ) > 0 then
12766: LD_VAR 0 1
12770: PUSH
12771: LD_INT 22
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 25
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 69
12799: IN
12800: PUSH
12801: LD_INT 22
12803: PUSH
12804: LD_INT 3
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 30
12813: PUSH
12814: LD_INT 3
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 24
12823: PUSH
12824: LD_INT 251
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: PUSH
12841: LD_INT 0
12843: GREATER
12844: AND
12845: IFFALSE 12923
// begin uc_side := 3 ;
12847: LD_ADDR_OWVAR 20
12851: PUSH
12852: LD_INT 3
12854: ST_TO_ADDR
// uc_nation := 3 ;
12855: LD_ADDR_OWVAR 21
12859: PUSH
12860: LD_INT 3
12862: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
12863: LD_ADDR_VAR 0 1
12867: PUSH
12868: LD_INT 3
12870: PPUSH
12871: LD_EXP 5
12875: PPUSH
12876: CALL 425 0 2
12880: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12881: LD_VAR 0 1
12885: PPUSH
12886: LD_INT 22
12888: PUSH
12889: LD_INT 3
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 30
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: CALL_OW 52
// end ; end ;
12923: PPOPN 1
12925: END
// on VehicleConstructed ( veh , fac ) do begin if veh in FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] ] ] ] ) then
12926: LD_VAR 0 1
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_INT 6
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 22
12946: PUSH
12947: LD_INT 3
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 21
12961: PUSH
12962: LD_INT 2
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: LD_INT 2
12974: PUSH
12975: LD_INT 34
12977: PUSH
12978: LD_INT 52
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 34
12987: PUSH
12988: LD_INT 51
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 34
12997: PUSH
12998: LD_INT 53
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 69
13024: IN
13025: IFFALSE 13050
// ru_list_attackers := Insert ( ru_list_attackers , 1 , veh ) ;
13027: LD_ADDR_EXP 43
13031: PUSH
13032: LD_EXP 43
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: CALL_OW 2
13049: ST_TO_ADDR
// end ;
13050: PPOPN 2
13052: END
// on BuildingComplete ( b ) do var i ;
13053: LD_INT 0
13055: PPUSH
// begin if b in FilterAllUnits ( [ f_side , 6 ] ) then
13056: LD_VAR 0 1
13060: PUSH
13061: LD_INT 22
13063: PUSH
13064: LD_INT 6
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 69
13075: IN
13076: IFFALSE 13116
// for i = 1 to 4 do
13078: LD_ADDR_VAR 0 2
13082: PUSH
13083: DOUBLE
13084: LD_INT 1
13086: DEC
13087: ST_TO_ADDR
13088: LD_INT 4
13090: PUSH
13091: FOR_TO
13092: IFFALSE 13114
// ru_bul := Delete ( ru_bul , 1 ) ;
13094: LD_ADDR_EXP 31
13098: PUSH
13099: LD_EXP 31
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 3
13111: ST_TO_ADDR
13112: GO 13091
13114: POP
13115: POP
// if b in FilterAllUnits ( [ f_side , 3 ] ) then
13116: LD_VAR 0 1
13120: PUSH
13121: LD_INT 22
13123: PUSH
13124: LD_INT 3
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 69
13135: IN
13136: IFFALSE 13176
// for i = 1 to 4 do
13138: LD_ADDR_VAR 0 2
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_INT 4
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13174
// ru2_bul := Delete ( ru2_bul , 1 ) ;
13154: LD_ADDR_EXP 41
13158: PUSH
13159: LD_EXP 41
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: CALL_OW 3
13171: ST_TO_ADDR
13172: GO 13151
13174: POP
13175: POP
// end ;
13176: PPOPN 2
13178: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
13179: LD_VAR 0 1
13183: PPUSH
13184: LD_VAR 0 2
13188: PPUSH
13189: LD_VAR 0 3
13193: PPUSH
13194: CALL 26379 0 3
// end ;
13198: PPOPN 3
13200: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: CALL 26387 0 1
// end ; end_of_file
13210: PPOPN 1
13212: END
// export function Start_Game ; begin
13213: LD_INT 0
13215: PPUSH
// global_diff := GetMultiplayerSetting ( 0 ) ;
13216: LD_ADDR_EXP 3
13220: PUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 426
13228: ST_TO_ADDR
// if not global_diff then
13229: LD_EXP 3
13233: NOT
13234: IFFALSE 13244
// global_diff := 1 ;
13236: LD_ADDR_EXP 3
13240: PUSH
13241: LD_INT 1
13243: ST_TO_ADDR
// CenterOnXY ( 70 , 130 ) ;
13244: LD_INT 70
13246: PPUSH
13247: LD_INT 130
13249: PPUSH
13250: CALL_OW 84
// case Query ( text1 ) of 1 :
13254: LD_STRING text1
13256: PPUSH
13257: CALL_OW 97
13261: PUSH
13262: LD_INT 1
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13273
13270: POP
// ; end ;
13271: GO 13274
13273: POP
// ChangeMissionObjectives ( target1 ) ;
13274: LD_STRING target1
13276: PPUSH
13277: CALL_OW 337
// game_started := true ;
13281: LD_ADDR_EXP 10
13285: PUSH
13286: LD_INT 1
13288: ST_TO_ADDR
// crates_allow := true ;
13289: LD_ADDR_EXP 13
13293: PUSH
13294: LD_INT 1
13296: ST_TO_ADDR
// if global_diff > 2 then
13297: LD_EXP 3
13301: PUSH
13302: LD_INT 2
13304: GREATER
13305: IFFALSE 13314
// RemoveUnit ( us_spec_b ) ;
13307: LD_INT 140
13309: PPUSH
13310: CALL_OW 64
// end ;
13314: LD_VAR 0 1
13318: RET
// every 0 0$0.3 trigger SeeSide ( sikorski_veh , 6 ) or SeeSide ( sikorski_veh , 3 ) or SeeSide ( sikorski , 3 ) or SeeSide ( sikorski , 6 ) do
13319: LD_EXP 22
13323: PPUSH
13324: LD_INT 6
13326: PPUSH
13327: CALL 870 0 2
13331: PUSH
13332: LD_EXP 22
13336: PPUSH
13337: LD_INT 3
13339: PPUSH
13340: CALL 870 0 2
13344: OR
13345: PUSH
13346: LD_EXP 14
13350: PPUSH
13351: LD_INT 3
13353: PPUSH
13354: CALL 870 0 2
13358: OR
13359: PUSH
13360: LD_EXP 14
13364: PPUSH
13365: LD_INT 6
13367: PPUSH
13368: CALL 870 0 2
13372: OR
13373: IFFALSE 13390
13375: GO 13377
13377: DISABLE
// Say ( sikorski , DRus ) ;
13378: LD_EXP 14
13382: PPUSH
13383: LD_STRING DRus
13385: PPUSH
13386: CALL_OW 88
13390: END
// every 0 0$03 trigger See ( 4 , sikorski ) or See ( 4 , sikorski_veh ) do var i , per ;
13391: LD_INT 4
13393: PPUSH
13394: LD_EXP 14
13398: PPUSH
13399: CALL_OW 292
13403: PUSH
13404: LD_INT 4
13406: PPUSH
13407: LD_EXP 22
13411: PPUSH
13412: CALL_OW 292
13416: OR
13417: IFFALSE 13839
13419: GO 13421
13421: DISABLE
13422: LD_INT 0
13424: PPUSH
13425: PPUSH
// begin Wait ( 0 0$05 ) ;
13426: LD_INT 175
13428: PPUSH
13429: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
13433: LD_ADDR_VAR 0 1
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_INT 4
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: PUSH
13453: FOR_IN
13454: IFFALSE 13470
// SetSide ( i , 1 ) ;
13456: LD_VAR 0 1
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: CALL_OW 235
13468: GO 13453
13470: POP
13471: POP
// per := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff sikorski ;
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 21
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 26
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 69
13516: PUSH
13517: LD_EXP 14
13521: DIFF
13522: ST_TO_ADDR
// InGameOn ;
13523: CALL_OW 8
// CenterNowOnXY ( 19 , 13 ) ;
13527: LD_INT 19
13529: PPUSH
13530: LD_INT 13
13532: PPUSH
13533: CALL_OW 86
// if IsInUnit ( sikorski ) then
13537: LD_EXP 14
13541: PPUSH
13542: CALL_OW 310
13546: IFFALSE 13564
// begin ComExitVehicle ( sikorski ) ;
13548: LD_EXP 14
13552: PPUSH
13553: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
13557: LD_INT 10
13559: PPUSH
13560: CALL_OW 67
// end ; ComTurnUnit ( sikorski , per [ 1 ] ) ;
13564: LD_EXP 14
13568: PPUSH
13569: LD_VAR 0 2
13573: PUSH
13574: LD_INT 1
13576: ARRAY
13577: PPUSH
13578: CALL_OW 119
// ComTurnUnit ( per [ 1 ] , sikorski ) ;
13582: LD_VAR 0 2
13586: PUSH
13587: LD_INT 1
13589: ARRAY
13590: PPUSH
13591: LD_EXP 14
13595: PPUSH
13596: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
13600: LD_INT 10
13602: PPUSH
13603: CALL_OW 67
// Say ( sikorski , DS-1 ) ;
13607: LD_EXP 14
13611: PPUSH
13612: LD_STRING DS-1
13614: PPUSH
13615: CALL_OW 88
// Say ( per [ 1 ] , DP-1 ) ;
13619: LD_VAR 0 2
13623: PUSH
13624: LD_INT 1
13626: ARRAY
13627: PPUSH
13628: LD_STRING DP-1
13630: PPUSH
13631: CALL_OW 88
// Say ( sikorski , DS-2 ) ;
13635: LD_EXP 14
13639: PPUSH
13640: LD_STRING DS-2
13642: PPUSH
13643: CALL_OW 88
// Say ( per [ 1 ] , DP-2 ) ;
13647: LD_VAR 0 2
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: LD_STRING DP-2
13658: PPUSH
13659: CALL_OW 88
// Say ( sikorski , DS-3 ) ;
13663: LD_EXP 14
13667: PPUSH
13668: LD_STRING DS-3
13670: PPUSH
13671: CALL_OW 88
// Say ( per [ 1 ] , DP-3 ) ;
13675: LD_VAR 0 2
13679: PUSH
13680: LD_INT 1
13682: ARRAY
13683: PPUSH
13684: LD_STRING DP-3
13686: PPUSH
13687: CALL_OW 88
// Say ( sikorski , DS-4 ) ;
13691: LD_EXP 14
13695: PPUSH
13696: LD_STRING DS-4
13698: PPUSH
13699: CALL_OW 88
// Wait ( 0 0$0.6 ) ;
13703: LD_INT 21
13705: PPUSH
13706: CALL_OW 67
// SayRadio ( ron , DR-1 ) ;
13710: LD_EXP 17
13714: PPUSH
13715: LD_STRING DR-1
13717: PPUSH
13718: CALL_OW 94
// Say ( sikorski , DS-5 ) ;
13722: LD_EXP 14
13726: PPUSH
13727: LD_STRING DS-5
13729: PPUSH
13730: CALL_OW 88
// SayRadio ( ron , DR-2 ) ;
13734: LD_EXP 17
13738: PPUSH
13739: LD_STRING DR-2
13741: PPUSH
13742: CALL_OW 94
// Say ( sikorski , DS-6 ) ;
13746: LD_EXP 14
13750: PPUSH
13751: LD_STRING DS-6
13753: PPUSH
13754: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
13758: LD_INT 10
13760: PPUSH
13761: CALL_OW 67
// SayRadio ( ron , DR-3 ) ;
13765: LD_EXP 17
13769: PPUSH
13770: LD_STRING DR-3
13772: PPUSH
13773: CALL_OW 94
// InGameOff ;
13777: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
13781: LD_STRING target2
13783: PPUSH
13784: CALL_OW 337
// Wait ( 0 0$03 ) ;
13788: LD_INT 105
13790: PPUSH
13791: CALL_OW 67
// Say ( sikorski , DS-7 ) ;
13795: LD_EXP 14
13799: PPUSH
13800: LD_STRING DS-7
13802: PPUSH
13803: CALL_OW 88
// Wait ( [ 6 6$00 , 5 5$00 , 4 4$00 ] [ global_diff ] ) ;
13807: LD_INT 12600
13809: PUSH
13810: LD_INT 10500
13812: PUSH
13813: LD_INT 8400
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: LD_EXP 3
13825: ARRAY
13826: PPUSH
13827: CALL_OW 67
// russian_produce := true ;
13831: LD_ADDR_EXP 20
13835: PUSH
13836: LD_INT 1
13838: ST_TO_ADDR
// end ;
13839: PPOPN 2
13841: END
// export us_unit ; every 0 0$11 trigger timer >= [ 25 25$00 , 27 27$30 , 29 29$20 ] [ global_diff ] do
13842: LD_EXP 2
13846: PUSH
13847: LD_INT 52500
13849: PUSH
13850: LD_INT 57750
13852: PUSH
13853: LD_INT 61600
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: PUSH
13861: LD_EXP 3
13865: ARRAY
13866: GREATEREQUAL
13867: IFFALSE 14035
13869: GO 13871
13871: DISABLE
// begin uc_side := 8 ;
13872: LD_ADDR_OWVAR 20
13876: PUSH
13877: LD_INT 8
13879: ST_TO_ADDR
// uc_nation := 1 ;
13880: LD_ADDR_OWVAR 21
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
// hc_sex := sex_male ;
13888: LD_ADDR_OWVAR 27
13892: PUSH
13893: LD_INT 1
13895: ST_TO_ADDR
// hc_gallery :=  ;
13896: LD_ADDR_OWVAR 33
13900: PUSH
13901: LD_STRING 
13903: ST_TO_ADDR
// hc_name :=  ;
13904: LD_ADDR_OWVAR 26
13908: PUSH
13909: LD_STRING 
13911: ST_TO_ADDR
// hc_class := Rand ( 1 , 4 ) ;
13912: LD_ADDR_OWVAR 28
13916: PUSH
13917: LD_INT 1
13919: PPUSH
13920: LD_INT 4
13922: PPUSH
13923: CALL_OW 12
13927: ST_TO_ADDR
// hc_skills := [ Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) ] ;
13928: LD_ADDR_OWVAR 31
13932: PUSH
13933: LD_INT 2
13935: PPUSH
13936: LD_EXP 6
13940: PPUSH
13941: CALL_OW 12
13945: PUSH
13946: LD_INT 2
13948: PPUSH
13949: LD_EXP 6
13953: PPUSH
13954: CALL_OW 12
13958: PUSH
13959: LD_INT 2
13961: PPUSH
13962: LD_EXP 6
13966: PPUSH
13967: CALL_OW 12
13971: PUSH
13972: LD_INT 2
13974: PPUSH
13975: LD_EXP 6
13979: PPUSH
13980: CALL_OW 12
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: ST_TO_ADDR
// us_unit := CreateHuman ;
13991: LD_ADDR_EXP 45
13995: PUSH
13996: CALL_OW 44
14000: ST_TO_ADDR
// PlaceUnitArea ( us_unit , swamp_spawn , true ) ;
14001: LD_EXP 45
14005: PPUSH
14006: LD_INT 13
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 49
// Wait ( 0 0$0.3 ) ;
14016: LD_INT 10
14018: PPUSH
14019: CALL_OW 67
// SayRadio ( us_unit , Dun1 ) ;
14023: LD_EXP 45
14027: PPUSH
14028: LD_STRING Dun1
14030: PPUSH
14031: CALL_OW 94
// end ;
14035: END
// every 0 0$01 trigger See ( 1 , us_unit ) do
14036: LD_INT 1
14038: PPUSH
14039: LD_EXP 45
14043: PPUSH
14044: CALL_OW 292
14048: IFFALSE 14065
14050: GO 14052
14052: DISABLE
// SetSide ( us_unit , 1 ) ;
14053: LD_EXP 45
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 235
14065: END
// every 1 1$35 trigger timer >= [ 8 8$00 , 9 9$00 , 10 10$00 ] [ global_diff ] do var un , veh , i ;
14066: LD_EXP 2
14070: PUSH
14071: LD_INT 16800
14073: PUSH
14074: LD_INT 18900
14076: PUSH
14077: LD_INT 21000
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_EXP 3
14089: ARRAY
14090: GREATEREQUAL
14091: IFFALSE 14470
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
14099: PPUSH
14100: PPUSH
// begin uc_side := 4 ;
14101: LD_ADDR_OWVAR 20
14105: PUSH
14106: LD_INT 4
14108: ST_TO_ADDR
// uc_nation := 1 ;
14109: LD_ADDR_OWVAR 21
14113: PUSH
14114: LD_INT 1
14116: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_wheeled , us_medium_wheeled ] [ global_diff ] ;
14117: LD_ADDR_OWVAR 37
14121: PUSH
14122: LD_INT 3
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: LD_INT 2
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_EXP 3
14140: ARRAY
14141: ST_TO_ADDR
// vc_engine := engine_solar ;
14142: LD_ADDR_OWVAR 39
14146: PUSH
14147: LD_INT 2
14149: ST_TO_ADDR
// vc_control := control_manual ;
14150: LD_ADDR_OWVAR 38
14154: PUSH
14155: LD_INT 1
14157: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
14158: LD_ADDR_OWVAR 40
14162: PUSH
14163: LD_INT 12
14165: ST_TO_ADDR
// veh := CreateVehicle ;
14166: LD_ADDR_VAR 0 2
14170: PUSH
14171: CALL_OW 45
14175: ST_TO_ADDR
// PlaceUnitArea ( veh , am_car , false ) ;
14176: LD_VAR 0 2
14180: PPUSH
14181: LD_INT 20
14183: PPUSH
14184: LD_INT 0
14186: PPUSH
14187: CALL_OW 49
// hc_sex := sex_male ;
14191: LD_ADDR_OWVAR 27
14195: PUSH
14196: LD_INT 1
14198: ST_TO_ADDR
// hc_gallery :=  ;
14199: LD_ADDR_OWVAR 33
14203: PUSH
14204: LD_STRING 
14206: ST_TO_ADDR
// hc_name :=  ;
14207: LD_ADDR_OWVAR 26
14211: PUSH
14212: LD_STRING 
14214: ST_TO_ADDR
// hc_class := 3 ;
14215: LD_ADDR_OWVAR 28
14219: PUSH
14220: LD_INT 3
14222: ST_TO_ADDR
// hc_skills := [ Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) ] ;
14223: LD_ADDR_OWVAR 31
14227: PUSH
14228: LD_INT 2
14230: PPUSH
14231: LD_EXP 6
14235: PPUSH
14236: CALL_OW 12
14240: PUSH
14241: LD_INT 2
14243: PPUSH
14244: LD_EXP 6
14248: PPUSH
14249: CALL_OW 12
14253: PUSH
14254: LD_INT 2
14256: PPUSH
14257: LD_EXP 6
14261: PPUSH
14262: CALL_OW 12
14266: PUSH
14267: LD_INT 2
14269: PPUSH
14270: LD_EXP 6
14274: PPUSH
14275: CALL_OW 12
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: ST_TO_ADDR
// un := CreateHuman ;
14286: LD_ADDR_VAR 0 1
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceUnitArea ( veh , am_car , true ) ;
14296: LD_VAR 0 2
14300: PPUSH
14301: LD_INT 20
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_VAR 0 2
14320: PPUSH
14321: CALL_OW 52
// SetCargo ( veh , mat_cans , 60 ) ;
14325: LD_VAR 0 2
14329: PPUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 60
14335: PPUSH
14336: CALL_OW 290
// SetFuel ( veh , 98 ) ;
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 98
14347: PPUSH
14348: CALL_OW 240
// SetLives ( un , 500 ) ;
14352: LD_VAR 0 1
14356: PPUSH
14357: LD_INT 500
14359: PPUSH
14360: CALL_OW 234
// SetLives ( veh , Rand ( 900 , 999 ) ) ;
14364: LD_VAR 0 2
14368: PPUSH
14369: LD_INT 900
14371: PPUSH
14372: LD_INT 999
14374: PPUSH
14375: CALL_OW 12
14379: PPUSH
14380: CALL_OW 234
// ComMoveXY ( un , 14 , 9 ) ;
14384: LD_VAR 0 1
14388: PPUSH
14389: LD_INT 14
14391: PPUSH
14392: LD_INT 9
14394: PPUSH
14395: CALL_OW 111
// repeat Wait ( 0 0$01 ) ;
14399: LD_INT 35
14401: PPUSH
14402: CALL_OW 67
// until See ( 1 , veh ) or See ( 1 , un ) ;
14406: LD_INT 1
14408: PPUSH
14409: LD_VAR 0 2
14413: PPUSH
14414: CALL_OW 292
14418: PUSH
14419: LD_INT 1
14421: PPUSH
14422: LD_VAR 0 1
14426: PPUSH
14427: CALL_OW 292
14431: OR
14432: IFFALSE 14399
// Say ( un , Dcargo ) ;
14434: LD_VAR 0 1
14438: PPUSH
14439: LD_STRING Dcargo
14441: PPUSH
14442: CALL_OW 88
// SetSide ( un , 1 ) ;
14446: LD_VAR 0 1
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 235
// SetSide ( veh , 1 ) ;
14458: LD_VAR 0 2
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 235
// end ;
14470: PPOPN 3
14472: END
// every 0 0$01 trigger timer >= [ 18 18$00 , 19 19$00 , 21 21$00 ] [ global_diff ] and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) < 5 do var un , speaker , veh , i , area ;
14473: LD_EXP 2
14477: PUSH
14478: LD_INT 37800
14480: PUSH
14481: LD_INT 39900
14483: PUSH
14484: LD_INT 44100
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: LD_EXP 3
14496: ARRAY
14497: GREATEREQUAL
14498: PUSH
14499: LD_INT 22
14501: PUSH
14502: LD_INT 6
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 21
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PUSH
14528: LD_INT 5
14530: LESS
14531: AND
14532: IFFALSE 14867
14534: GO 14536
14536: DISABLE
14537: LD_INT 0
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
14543: PPUSH
// begin area := [ us_north , us_south , us_north ] [ global_diff ] ;
14544: LD_ADDR_VAR 0 5
14548: PUSH
14549: LD_INT 21
14551: PUSH
14552: LD_INT 14
14554: PUSH
14555: LD_INT 21
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_EXP 3
14567: ARRAY
14568: ST_TO_ADDR
// speaker := [ ] ;
14569: LD_ADDR_VAR 0 2
14573: PUSH
14574: EMPTY
14575: ST_TO_ADDR
// uc_side := 1 ;
14576: LD_ADDR_OWVAR 20
14580: PUSH
14581: LD_INT 1
14583: ST_TO_ADDR
// uc_nation := 1 ;
14584: LD_ADDR_OWVAR 21
14588: PUSH
14589: LD_INT 1
14591: ST_TO_ADDR
// for i = 1 to 7 - [ global_diff ] do
14592: LD_ADDR_VAR 0 4
14596: PUSH
14597: DOUBLE
14598: LD_INT 1
14600: DEC
14601: ST_TO_ADDR
14602: LD_INT 7
14604: PUSH
14605: LD_EXP 3
14609: PUSH
14610: EMPTY
14611: LIST
14612: MINUS
14613: PUSH
14614: FOR_TO
14615: IFFALSE 14678
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , am_def ) ;
14617: LD_ADDR_VAR 0 1
14621: PUSH
14622: LD_INT 1
14624: PPUSH
14625: LD_INT 4
14627: PPUSH
14628: CALL_OW 12
14632: PPUSH
14633: LD_EXP 6
14637: PPUSH
14638: CALL 425 0 2
14642: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
14643: LD_VAR 0 1
14647: PPUSH
14648: LD_VAR 0 5
14652: PPUSH
14653: LD_INT 0
14655: PPUSH
14656: CALL_OW 49
// speaker := speaker ^ un ;
14660: LD_ADDR_VAR 0 2
14664: PUSH
14665: LD_VAR 0 2
14669: PUSH
14670: LD_VAR 0 1
14674: ADD
14675: ST_TO_ADDR
// end ;
14676: GO 14614
14678: POP
14679: POP
// vc_chassis := [ us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ global_diff ] ;
14680: LD_ADDR_OWVAR 37
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: LD_INT 1
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: LD_EXP 3
14703: ARRAY
14704: ST_TO_ADDR
// vc_engine := engine_solar ;
14705: LD_ADDR_OWVAR 39
14709: PUSH
14710: LD_INT 2
14712: ST_TO_ADDR
// vc_control := control_manual ;
14713: LD_ADDR_OWVAR 38
14717: PUSH
14718: LD_INT 1
14720: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_gatling_gun , us_machine_gun ] [ global_diff ] ;
14721: LD_ADDR_OWVAR 40
14725: PUSH
14726: LD_INT 5
14728: PUSH
14729: LD_INT 4
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: PUSH
14740: LD_EXP 3
14744: ARRAY
14745: ST_TO_ADDR
// veh := CreateVehicle ;
14746: LD_ADDR_VAR 0 3
14750: PUSH
14751: CALL_OW 45
14755: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14756: LD_VAR 0 3
14760: PPUSH
14761: LD_VAR 0 5
14765: PPUSH
14766: LD_INT 0
14768: PPUSH
14769: CALL_OW 49
// un := CreateHumanWithClass ( 3 , am_def ) ;
14773: LD_ADDR_VAR 0 1
14777: PUSH
14778: LD_INT 3
14780: PPUSH
14781: LD_EXP 6
14785: PPUSH
14786: CALL 425 0 2
14790: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14791: LD_VAR 0 1
14795: PPUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: CALL_OW 52
// Wait ( 0 0$0.3 ) ;
14805: LD_INT 10
14807: PPUSH
14808: CALL_OW 67
// SayRadio ( UnitFilter ( speaker , [ f_sex , sex_male ] ) [ 1 ] , Dhelp ) ;
14812: LD_VAR 0 2
14816: PPUSH
14817: LD_INT 26
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PPUSH
14827: CALL_OW 72
14831: PUSH
14832: LD_INT 1
14834: ARRAY
14835: PPUSH
14836: LD_STRING Dhelp
14838: PPUSH
14839: CALL_OW 94
// CenterNowOnXY ( GetX ( un ) , GetY ( un ) ) ;
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 250
14852: PPUSH
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 251
14862: PPUSH
14863: CALL_OW 86
// end ;
14867: PPOPN 5
14869: END
// every 0 0$01 trigger FilterUnitsInArea ( kurin_a , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) and IsOk ( Kurin ) do
14870: LD_INT 19
14872: PPUSH
14873: LD_INT 2
14875: PUSH
14876: LD_INT 22
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_INT 6
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: PPUSH
14901: CALL_OW 70
14905: PUSH
14906: LD_EXP 15
14910: PPUSH
14911: CALL_OW 302
14915: AND
14916: IFFALSE 14933
14918: GO 14920
14920: DISABLE
// SayRadio ( Kurin , Dkurin ) ;
14921: LD_EXP 15
14925: PPUSH
14926: LD_STRING Dkurin
14928: PPUSH
14929: CALL_OW 94
14933: END
// every 0 0$01 trigger timer > 27 27$00 do
14934: LD_EXP 2
14938: PUSH
14939: LD_INT 56700
14941: GREATER
14942: IFFALSE 14959
14944: GO 14946
14946: DISABLE
// SayRadio ( jack , ar_come ) ;
14947: LD_EXP 18
14951: PPUSH
14952: LD_STRING ar_come
14954: PPUSH
14955: CALL_OW 94
14959: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) > 0 do
14960: LD_INT 22
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: PUSH
14975: LD_INT 0
14977: GREATER
14978: IFFALSE 15006
14980: GO 14982
14982: DISABLE
// begin FHeike ;
14983: CALL 11549 0 0
// Wait ( 0 0$01 ) ;
14987: LD_INT 35
14989: PPUSH
14990: CALL_OW 67
// SayRadio ( heike , heike1 ) ;
14994: LD_EXP 16
14998: PPUSH
14999: LD_STRING heike1
15001: PPUSH
15002: CALL_OW 94
// end ;
15006: END
// every 15 15$00 trigger timer > 22 22$00 do
15007: LD_EXP 2
15011: PUSH
15012: LD_INT 46200
15014: GREATER
15015: IFFALSE 15066
15017: GO 15019
15019: DISABLE
// begin enable ;
15020: ENABLE
// ArabianAttack ( 2 , ar_force , Rand ( 1 , 2 ) , [ ar_area1 , ar_area2 ] [ Rand ( 1 , 2 ) ] ) ;
15021: LD_INT 2
15023: PPUSH
15024: LD_EXP 9
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: LD_INT 2
15034: PPUSH
15035: CALL_OW 12
15039: PPUSH
15040: LD_INT 6
15042: PUSH
15043: LD_INT 16
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 1
15052: PPUSH
15053: LD_INT 2
15055: PPUSH
15056: CALL_OW 12
15060: ARRAY
15061: PPUSH
15062: CALL 10966 0 4
// end ;
15066: END
// every 0 0$01 trigger timer >= Rand ( 65 65$00 , 67 67$30 ) or ( FilterAllUnits ( [ f_side , 3 ] ) + FilterAllUnits ( [ f_side , 6 ] ) < 3 ) do var i ;
15067: LD_EXP 2
15071: PUSH
15072: LD_INT 136500
15074: PPUSH
15075: LD_INT 141750
15077: PPUSH
15078: CALL_OW 12
15082: GREATEREQUAL
15083: PUSH
15084: LD_INT 22
15086: PUSH
15087: LD_INT 3
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 69
15098: PUSH
15099: LD_INT 22
15101: PUSH
15102: LD_INT 6
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 69
15113: PLUS
15114: PUSH
15115: LD_INT 3
15117: LESS
15118: OR
15119: IFFALSE 15193
15121: GO 15123
15123: DISABLE
15124: LD_INT 0
15126: PPUSH
// begin InGameOn ;
15127: CALL_OW 8
// DialogueOn ;
15131: CALL_OW 6
// SayRadio ( ron , you_win ) ;
15135: LD_EXP 17
15139: PPUSH
15140: LD_STRING you_win
15142: PPUSH
15143: CALL_OW 94
// DialogueOff ;
15147: CALL_OW 7
// InGameOff ;
15151: CALL_OW 9
// AddMedal ( med , 1 ) ;
15155: LD_STRING med
15157: PPUSH
15158: LD_INT 1
15160: PPUSH
15161: CALL_OW 101
// End_The_Mission_Allowed := true ;
15165: LD_ADDR_OWVAR 57
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// case Query ( MEnd ) of 1 :
15173: LD_STRING MEnd
15175: PPUSH
15176: CALL_OW 97
15180: PUSH
15181: LD_INT 1
15183: DOUBLE
15184: EQUAL
15185: IFTRUE 15189
15187: GO 15192
15189: POP
// ; end ;
15190: GO 15193
15192: POP
// end ;
15193: PPOPN 1
15195: END
// on EndTheMissionRaised ( exitt ) do begin End_The_Mission_Allowed := false ;
15196: LD_ADDR_OWVAR 57
15200: PUSH
15201: LD_INT 0
15203: ST_TO_ADDR
// if FilterAllUnits ( [ f_side , 3 ] ) + FilterAllUnits ( [ f_side , 6 ] ) < 3 then
15204: LD_INT 22
15206: PUSH
15207: LD_INT 3
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PPUSH
15214: CALL_OW 69
15218: PUSH
15219: LD_INT 22
15221: PUSH
15222: LD_INT 6
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PPUSH
15229: CALL_OW 69
15233: PLUS
15234: PUSH
15235: LD_INT 3
15237: LESS
15238: IFFALSE 15252
// AddMedal ( ru , 1 ) else
15240: LD_STRING ru
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 101
15250: GO 15263
// AddMedal ( ru , - 1 ) ;
15252: LD_STRING ru
15254: PPUSH
15255: LD_INT 1
15257: NEG
15258: PPUSH
15259: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 6 then
15263: LD_INT 22
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 21
15275: PUSH
15276: LD_INT 1
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PPUSH
15287: CALL_OW 69
15291: PUSH
15292: LD_INT 6
15294: GREATER
15295: IFFALSE 15309
// AddMedal ( pep , 1 ) else
15297: LD_STRING pep
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: CALL_OW 101
15307: GO 15320
// AddMedal ( pep , - 1 ) ;
15309: LD_STRING pep
15311: PPUSH
15312: LD_INT 1
15314: NEG
15315: PPUSH
15316: CALL_OW 101
// GiveMedals ( MAIN ) ;
15320: LD_STRING MAIN
15322: PPUSH
15323: CALL_OW 102
// YouWin ;
15327: CALL_OW 103
// end ; end_of_file
15331: PPOPN 1
15333: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
15334: GO 15336
15336: DISABLE
// begin ru_radar := 98 ;
15337: LD_ADDR_EXP 46
15341: PUSH
15342: LD_INT 98
15344: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15345: LD_ADDR_EXP 47
15349: PUSH
15350: LD_INT 89
15352: ST_TO_ADDR
// us_hack := 99 ;
15353: LD_ADDR_EXP 48
15357: PUSH
15358: LD_INT 99
15360: ST_TO_ADDR
// us_artillery := 97 ;
15361: LD_ADDR_EXP 49
15365: PUSH
15366: LD_INT 97
15368: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15369: LD_ADDR_EXP 50
15373: PUSH
15374: LD_INT 91
15376: ST_TO_ADDR
// tech_Artillery := 80 ;
15377: LD_ADDR_EXP 51
15381: PUSH
15382: LD_INT 80
15384: ST_TO_ADDR
// tech_RadMat := 81 ;
15385: LD_ADDR_EXP 52
15389: PUSH
15390: LD_INT 81
15392: ST_TO_ADDR
// tech_BasicTools := 82 ;
15393: LD_ADDR_EXP 53
15397: PUSH
15398: LD_INT 82
15400: ST_TO_ADDR
// tech_Cargo := 83 ;
15401: LD_ADDR_EXP 54
15405: PUSH
15406: LD_INT 83
15408: ST_TO_ADDR
// tech_Track := 84 ;
15409: LD_ADDR_EXP 55
15413: PUSH
15414: LD_INT 84
15416: ST_TO_ADDR
// tech_Crane := 85 ;
15417: LD_ADDR_EXP 56
15421: PUSH
15422: LD_INT 85
15424: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15425: LD_ADDR_EXP 57
15429: PUSH
15430: LD_INT 86
15432: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15433: LD_ADDR_EXP 58
15437: PUSH
15438: LD_INT 87
15440: ST_TO_ADDR
// end ; end_of_file end_of_file
15441: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15442: GO 15444
15444: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15445: LD_STRING initStreamRollete();
15447: PPUSH
15448: CALL_OW 559
// InitStreamMode ;
15452: CALL 15461 0 0
// DefineStreamItems ( ) ;
15456: CALL 15901 0 0
// end ;
15460: END
// function InitStreamMode ; begin
15461: LD_INT 0
15463: PPUSH
// streamModeActive := false ;
15464: LD_ADDR_EXP 59
15468: PUSH
15469: LD_INT 0
15471: ST_TO_ADDR
// normalCounter := 36 ;
15472: LD_ADDR_EXP 60
15476: PUSH
15477: LD_INT 36
15479: ST_TO_ADDR
// hardcoreCounter := 16 ;
15480: LD_ADDR_EXP 61
15484: PUSH
15485: LD_INT 16
15487: ST_TO_ADDR
// sRocket := false ;
15488: LD_ADDR_EXP 64
15492: PUSH
15493: LD_INT 0
15495: ST_TO_ADDR
// sSpeed := false ;
15496: LD_ADDR_EXP 63
15500: PUSH
15501: LD_INT 0
15503: ST_TO_ADDR
// sEngine := false ;
15504: LD_ADDR_EXP 65
15508: PUSH
15509: LD_INT 0
15511: ST_TO_ADDR
// sSpec := false ;
15512: LD_ADDR_EXP 62
15516: PUSH
15517: LD_INT 0
15519: ST_TO_ADDR
// sLevel := false ;
15520: LD_ADDR_EXP 66
15524: PUSH
15525: LD_INT 0
15527: ST_TO_ADDR
// sArmoury := false ;
15528: LD_ADDR_EXP 67
15532: PUSH
15533: LD_INT 0
15535: ST_TO_ADDR
// sRadar := false ;
15536: LD_ADDR_EXP 68
15540: PUSH
15541: LD_INT 0
15543: ST_TO_ADDR
// sBunker := false ;
15544: LD_ADDR_EXP 69
15548: PUSH
15549: LD_INT 0
15551: ST_TO_ADDR
// sHack := false ;
15552: LD_ADDR_EXP 70
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// sFire := false ;
15560: LD_ADDR_EXP 71
15564: PUSH
15565: LD_INT 0
15567: ST_TO_ADDR
// sRefresh := false ;
15568: LD_ADDR_EXP 72
15572: PUSH
15573: LD_INT 0
15575: ST_TO_ADDR
// sExp := false ;
15576: LD_ADDR_EXP 73
15580: PUSH
15581: LD_INT 0
15583: ST_TO_ADDR
// sDepot := false ;
15584: LD_ADDR_EXP 74
15588: PUSH
15589: LD_INT 0
15591: ST_TO_ADDR
// sFlag := false ;
15592: LD_ADDR_EXP 75
15596: PUSH
15597: LD_INT 0
15599: ST_TO_ADDR
// sKamikadze := false ;
15600: LD_ADDR_EXP 83
15604: PUSH
15605: LD_INT 0
15607: ST_TO_ADDR
// sTroll := false ;
15608: LD_ADDR_EXP 84
15612: PUSH
15613: LD_INT 0
15615: ST_TO_ADDR
// sSlow := false ;
15616: LD_ADDR_EXP 85
15620: PUSH
15621: LD_INT 0
15623: ST_TO_ADDR
// sLack := false ;
15624: LD_ADDR_EXP 86
15628: PUSH
15629: LD_INT 0
15631: ST_TO_ADDR
// sTank := false ;
15632: LD_ADDR_EXP 88
15636: PUSH
15637: LD_INT 0
15639: ST_TO_ADDR
// sRemote := false ;
15640: LD_ADDR_EXP 89
15644: PUSH
15645: LD_INT 0
15647: ST_TO_ADDR
// sPowell := false ;
15648: LD_ADDR_EXP 90
15652: PUSH
15653: LD_INT 0
15655: ST_TO_ADDR
// sTeleport := false ;
15656: LD_ADDR_EXP 93
15660: PUSH
15661: LD_INT 0
15663: ST_TO_ADDR
// sOilTower := false ;
15664: LD_ADDR_EXP 95
15668: PUSH
15669: LD_INT 0
15671: ST_TO_ADDR
// sShovel := false ;
15672: LD_ADDR_EXP 96
15676: PUSH
15677: LD_INT 0
15679: ST_TO_ADDR
// sSheik := false ;
15680: LD_ADDR_EXP 97
15684: PUSH
15685: LD_INT 0
15687: ST_TO_ADDR
// sEarthquake := false ;
15688: LD_ADDR_EXP 99
15692: PUSH
15693: LD_INT 0
15695: ST_TO_ADDR
// sAI := false ;
15696: LD_ADDR_EXP 100
15700: PUSH
15701: LD_INT 0
15703: ST_TO_ADDR
// sCargo := false ;
15704: LD_ADDR_EXP 103
15708: PUSH
15709: LD_INT 0
15711: ST_TO_ADDR
// sDLaser := false ;
15712: LD_ADDR_EXP 104
15716: PUSH
15717: LD_INT 0
15719: ST_TO_ADDR
// sExchange := false ;
15720: LD_ADDR_EXP 105
15724: PUSH
15725: LD_INT 0
15727: ST_TO_ADDR
// sFac := false ;
15728: LD_ADDR_EXP 106
15732: PUSH
15733: LD_INT 0
15735: ST_TO_ADDR
// sPower := false ;
15736: LD_ADDR_EXP 107
15740: PUSH
15741: LD_INT 0
15743: ST_TO_ADDR
// sRandom := false ;
15744: LD_ADDR_EXP 108
15748: PUSH
15749: LD_INT 0
15751: ST_TO_ADDR
// sShield := false ;
15752: LD_ADDR_EXP 109
15756: PUSH
15757: LD_INT 0
15759: ST_TO_ADDR
// sTime := false ;
15760: LD_ADDR_EXP 110
15764: PUSH
15765: LD_INT 0
15767: ST_TO_ADDR
// sTools := false ;
15768: LD_ADDR_EXP 111
15772: PUSH
15773: LD_INT 0
15775: ST_TO_ADDR
// sSold := false ;
15776: LD_ADDR_EXP 76
15780: PUSH
15781: LD_INT 0
15783: ST_TO_ADDR
// sDiff := false ;
15784: LD_ADDR_EXP 77
15788: PUSH
15789: LD_INT 0
15791: ST_TO_ADDR
// sFog := false ;
15792: LD_ADDR_EXP 80
15796: PUSH
15797: LD_INT 0
15799: ST_TO_ADDR
// sReset := false ;
15800: LD_ADDR_EXP 81
15804: PUSH
15805: LD_INT 0
15807: ST_TO_ADDR
// sSun := false ;
15808: LD_ADDR_EXP 82
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// sTiger := false ;
15816: LD_ADDR_EXP 78
15820: PUSH
15821: LD_INT 0
15823: ST_TO_ADDR
// sBomb := false ;
15824: LD_ADDR_EXP 79
15828: PUSH
15829: LD_INT 0
15831: ST_TO_ADDR
// sWound := false ;
15832: LD_ADDR_EXP 87
15836: PUSH
15837: LD_INT 0
15839: ST_TO_ADDR
// sBetray := false ;
15840: LD_ADDR_EXP 91
15844: PUSH
15845: LD_INT 0
15847: ST_TO_ADDR
// sContamin := false ;
15848: LD_ADDR_EXP 92
15852: PUSH
15853: LD_INT 0
15855: ST_TO_ADDR
// sOil := false ;
15856: LD_ADDR_EXP 94
15860: PUSH
15861: LD_INT 0
15863: ST_TO_ADDR
// sStu := false ;
15864: LD_ADDR_EXP 98
15868: PUSH
15869: LD_INT 0
15871: ST_TO_ADDR
// sBazooka := false ;
15872: LD_ADDR_EXP 101
15876: PUSH
15877: LD_INT 0
15879: ST_TO_ADDR
// sMortar := false ;
15880: LD_ADDR_EXP 102
15884: PUSH
15885: LD_INT 0
15887: ST_TO_ADDR
// sRanger := false ;
15888: LD_ADDR_EXP 112
15892: PUSH
15893: LD_INT 0
15895: ST_TO_ADDR
// end ;
15896: LD_VAR 0 1
15900: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
15901: LD_INT 0
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
// result := [ ] ;
15908: LD_ADDR_VAR 0 1
15912: PUSH
15913: EMPTY
15914: ST_TO_ADDR
// if campaign_id = 1 then
15915: LD_OWVAR 69
15919: PUSH
15920: LD_INT 1
15922: EQUAL
15923: IFFALSE 18861
// begin case mission_number of 1 :
15925: LD_OWVAR 70
15929: PUSH
15930: LD_INT 1
15932: DOUBLE
15933: EQUAL
15934: IFTRUE 15938
15936: GO 16002
15938: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
15939: LD_ADDR_VAR 0 1
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: LD_INT 4
15949: PUSH
15950: LD_INT 11
15952: PUSH
15953: LD_INT 12
15955: PUSH
15956: LD_INT 15
15958: PUSH
15959: LD_INT 16
15961: PUSH
15962: LD_INT 22
15964: PUSH
15965: LD_INT 23
15967: PUSH
15968: LD_INT 26
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 101
15984: PUSH
15985: LD_INT 102
15987: PUSH
15988: LD_INT 106
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: ST_TO_ADDR
16000: GO 18859
16002: LD_INT 2
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16082
16010: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16011: LD_ADDR_VAR 0 1
16015: PUSH
16016: LD_INT 2
16018: PUSH
16019: LD_INT 4
16021: PUSH
16022: LD_INT 11
16024: PUSH
16025: LD_INT 12
16027: PUSH
16028: LD_INT 15
16030: PUSH
16031: LD_INT 16
16033: PUSH
16034: LD_INT 22
16036: PUSH
16037: LD_INT 23
16039: PUSH
16040: LD_INT 26
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 101
16056: PUSH
16057: LD_INT 102
16059: PUSH
16060: LD_INT 105
16062: PUSH
16063: LD_INT 106
16065: PUSH
16066: LD_INT 108
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: ST_TO_ADDR
16080: GO 18859
16082: LD_INT 3
16084: DOUBLE
16085: EQUAL
16086: IFTRUE 16090
16088: GO 16166
16090: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: LD_INT 4
16101: PUSH
16102: LD_INT 5
16104: PUSH
16105: LD_INT 11
16107: PUSH
16108: LD_INT 12
16110: PUSH
16111: LD_INT 15
16113: PUSH
16114: LD_INT 16
16116: PUSH
16117: LD_INT 22
16119: PUSH
16120: LD_INT 26
16122: PUSH
16123: LD_INT 36
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 101
16140: PUSH
16141: LD_INT 102
16143: PUSH
16144: LD_INT 105
16146: PUSH
16147: LD_INT 106
16149: PUSH
16150: LD_INT 108
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: ST_TO_ADDR
16164: GO 18859
16166: LD_INT 4
16168: DOUBLE
16169: EQUAL
16170: IFTRUE 16174
16172: GO 16258
16174: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16175: LD_ADDR_VAR 0 1
16179: PUSH
16180: LD_INT 2
16182: PUSH
16183: LD_INT 4
16185: PUSH
16186: LD_INT 5
16188: PUSH
16189: LD_INT 8
16191: PUSH
16192: LD_INT 11
16194: PUSH
16195: LD_INT 12
16197: PUSH
16198: LD_INT 15
16200: PUSH
16201: LD_INT 16
16203: PUSH
16204: LD_INT 22
16206: PUSH
16207: LD_INT 23
16209: PUSH
16210: LD_INT 26
16212: PUSH
16213: LD_INT 36
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 101
16232: PUSH
16233: LD_INT 102
16235: PUSH
16236: LD_INT 105
16238: PUSH
16239: LD_INT 106
16241: PUSH
16242: LD_INT 108
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: ST_TO_ADDR
16256: GO 18859
16258: LD_INT 5
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16266
16264: GO 16366
16266: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16267: LD_ADDR_VAR 0 1
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: LD_INT 4
16277: PUSH
16278: LD_INT 5
16280: PUSH
16281: LD_INT 6
16283: PUSH
16284: LD_INT 8
16286: PUSH
16287: LD_INT 11
16289: PUSH
16290: LD_INT 12
16292: PUSH
16293: LD_INT 15
16295: PUSH
16296: LD_INT 16
16298: PUSH
16299: LD_INT 22
16301: PUSH
16302: LD_INT 23
16304: PUSH
16305: LD_INT 25
16307: PUSH
16308: LD_INT 26
16310: PUSH
16311: LD_INT 36
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 101
16332: PUSH
16333: LD_INT 102
16335: PUSH
16336: LD_INT 105
16338: PUSH
16339: LD_INT 106
16341: PUSH
16342: LD_INT 108
16344: PUSH
16345: LD_INT 109
16347: PUSH
16348: LD_INT 112
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: ST_TO_ADDR
16364: GO 18859
16366: LD_INT 6
16368: DOUBLE
16369: EQUAL
16370: IFTRUE 16374
16372: GO 16494
16374: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16375: LD_ADDR_VAR 0 1
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: LD_INT 4
16385: PUSH
16386: LD_INT 5
16388: PUSH
16389: LD_INT 6
16391: PUSH
16392: LD_INT 8
16394: PUSH
16395: LD_INT 11
16397: PUSH
16398: LD_INT 12
16400: PUSH
16401: LD_INT 15
16403: PUSH
16404: LD_INT 16
16406: PUSH
16407: LD_INT 20
16409: PUSH
16410: LD_INT 21
16412: PUSH
16413: LD_INT 22
16415: PUSH
16416: LD_INT 23
16418: PUSH
16419: LD_INT 25
16421: PUSH
16422: LD_INT 26
16424: PUSH
16425: LD_INT 30
16427: PUSH
16428: LD_INT 31
16430: PUSH
16431: LD_INT 32
16433: PUSH
16434: LD_INT 36
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 101
16460: PUSH
16461: LD_INT 102
16463: PUSH
16464: LD_INT 105
16466: PUSH
16467: LD_INT 106
16469: PUSH
16470: LD_INT 108
16472: PUSH
16473: LD_INT 109
16475: PUSH
16476: LD_INT 112
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: ST_TO_ADDR
16492: GO 18859
16494: LD_INT 7
16496: DOUBLE
16497: EQUAL
16498: IFTRUE 16502
16500: GO 16602
16502: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16503: LD_ADDR_VAR 0 1
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: LD_INT 4
16513: PUSH
16514: LD_INT 5
16516: PUSH
16517: LD_INT 7
16519: PUSH
16520: LD_INT 11
16522: PUSH
16523: LD_INT 12
16525: PUSH
16526: LD_INT 15
16528: PUSH
16529: LD_INT 16
16531: PUSH
16532: LD_INT 20
16534: PUSH
16535: LD_INT 21
16537: PUSH
16538: LD_INT 22
16540: PUSH
16541: LD_INT 23
16543: PUSH
16544: LD_INT 25
16546: PUSH
16547: LD_INT 26
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 101
16568: PUSH
16569: LD_INT 102
16571: PUSH
16572: LD_INT 103
16574: PUSH
16575: LD_INT 105
16577: PUSH
16578: LD_INT 106
16580: PUSH
16581: LD_INT 108
16583: PUSH
16584: LD_INT 112
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: ST_TO_ADDR
16600: GO 18859
16602: LD_INT 8
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16738
16610: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: LD_INT 2
16618: PUSH
16619: LD_INT 4
16621: PUSH
16622: LD_INT 5
16624: PUSH
16625: LD_INT 6
16627: PUSH
16628: LD_INT 7
16630: PUSH
16631: LD_INT 8
16633: PUSH
16634: LD_INT 11
16636: PUSH
16637: LD_INT 12
16639: PUSH
16640: LD_INT 15
16642: PUSH
16643: LD_INT 16
16645: PUSH
16646: LD_INT 20
16648: PUSH
16649: LD_INT 21
16651: PUSH
16652: LD_INT 22
16654: PUSH
16655: LD_INT 23
16657: PUSH
16658: LD_INT 25
16660: PUSH
16661: LD_INT 26
16663: PUSH
16664: LD_INT 30
16666: PUSH
16667: LD_INT 31
16669: PUSH
16670: LD_INT 32
16672: PUSH
16673: LD_INT 36
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 101
16700: PUSH
16701: LD_INT 102
16703: PUSH
16704: LD_INT 103
16706: PUSH
16707: LD_INT 105
16709: PUSH
16710: LD_INT 106
16712: PUSH
16713: LD_INT 108
16715: PUSH
16716: LD_INT 109
16718: PUSH
16719: LD_INT 112
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: ST_TO_ADDR
16736: GO 18859
16738: LD_INT 9
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16882
16746: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16747: LD_ADDR_VAR 0 1
16751: PUSH
16752: LD_INT 2
16754: PUSH
16755: LD_INT 4
16757: PUSH
16758: LD_INT 5
16760: PUSH
16761: LD_INT 6
16763: PUSH
16764: LD_INT 7
16766: PUSH
16767: LD_INT 8
16769: PUSH
16770: LD_INT 11
16772: PUSH
16773: LD_INT 12
16775: PUSH
16776: LD_INT 15
16778: PUSH
16779: LD_INT 16
16781: PUSH
16782: LD_INT 20
16784: PUSH
16785: LD_INT 21
16787: PUSH
16788: LD_INT 22
16790: PUSH
16791: LD_INT 23
16793: PUSH
16794: LD_INT 25
16796: PUSH
16797: LD_INT 26
16799: PUSH
16800: LD_INT 28
16802: PUSH
16803: LD_INT 30
16805: PUSH
16806: LD_INT 31
16808: PUSH
16809: LD_INT 32
16811: PUSH
16812: LD_INT 36
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 101
16840: PUSH
16841: LD_INT 102
16843: PUSH
16844: LD_INT 103
16846: PUSH
16847: LD_INT 105
16849: PUSH
16850: LD_INT 106
16852: PUSH
16853: LD_INT 108
16855: PUSH
16856: LD_INT 109
16858: PUSH
16859: LD_INT 112
16861: PUSH
16862: LD_INT 114
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: ST_TO_ADDR
16880: GO 18859
16882: LD_INT 10
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 17074
16890: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
16891: LD_ADDR_VAR 0 1
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 4
16901: PUSH
16902: LD_INT 5
16904: PUSH
16905: LD_INT 6
16907: PUSH
16908: LD_INT 7
16910: PUSH
16911: LD_INT 8
16913: PUSH
16914: LD_INT 9
16916: PUSH
16917: LD_INT 10
16919: PUSH
16920: LD_INT 11
16922: PUSH
16923: LD_INT 12
16925: PUSH
16926: LD_INT 13
16928: PUSH
16929: LD_INT 14
16931: PUSH
16932: LD_INT 15
16934: PUSH
16935: LD_INT 16
16937: PUSH
16938: LD_INT 17
16940: PUSH
16941: LD_INT 18
16943: PUSH
16944: LD_INT 19
16946: PUSH
16947: LD_INT 20
16949: PUSH
16950: LD_INT 21
16952: PUSH
16953: LD_INT 22
16955: PUSH
16956: LD_INT 23
16958: PUSH
16959: LD_INT 24
16961: PUSH
16962: LD_INT 25
16964: PUSH
16965: LD_INT 26
16967: PUSH
16968: LD_INT 28
16970: PUSH
16971: LD_INT 30
16973: PUSH
16974: LD_INT 31
16976: PUSH
16977: LD_INT 32
16979: PUSH
16980: LD_INT 36
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 101
17016: PUSH
17017: LD_INT 102
17019: PUSH
17020: LD_INT 103
17022: PUSH
17023: LD_INT 104
17025: PUSH
17026: LD_INT 105
17028: PUSH
17029: LD_INT 106
17031: PUSH
17032: LD_INT 107
17034: PUSH
17035: LD_INT 108
17037: PUSH
17038: LD_INT 109
17040: PUSH
17041: LD_INT 110
17043: PUSH
17044: LD_INT 111
17046: PUSH
17047: LD_INT 112
17049: PUSH
17050: LD_INT 114
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: ST_TO_ADDR
17072: GO 18859
17074: LD_INT 11
17076: DOUBLE
17077: EQUAL
17078: IFTRUE 17082
17080: GO 17274
17082: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: LD_INT 2
17090: PUSH
17091: LD_INT 3
17093: PUSH
17094: LD_INT 4
17096: PUSH
17097: LD_INT 5
17099: PUSH
17100: LD_INT 6
17102: PUSH
17103: LD_INT 7
17105: PUSH
17106: LD_INT 8
17108: PUSH
17109: LD_INT 9
17111: PUSH
17112: LD_INT 10
17114: PUSH
17115: LD_INT 11
17117: PUSH
17118: LD_INT 12
17120: PUSH
17121: LD_INT 13
17123: PUSH
17124: LD_INT 14
17126: PUSH
17127: LD_INT 15
17129: PUSH
17130: LD_INT 16
17132: PUSH
17133: LD_INT 17
17135: PUSH
17136: LD_INT 18
17138: PUSH
17139: LD_INT 19
17141: PUSH
17142: LD_INT 20
17144: PUSH
17145: LD_INT 21
17147: PUSH
17148: LD_INT 22
17150: PUSH
17151: LD_INT 23
17153: PUSH
17154: LD_INT 24
17156: PUSH
17157: LD_INT 25
17159: PUSH
17160: LD_INT 26
17162: PUSH
17163: LD_INT 28
17165: PUSH
17166: LD_INT 30
17168: PUSH
17169: LD_INT 31
17171: PUSH
17172: LD_INT 32
17174: PUSH
17175: LD_INT 34
17177: PUSH
17178: LD_INT 36
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 101
17216: PUSH
17217: LD_INT 102
17219: PUSH
17220: LD_INT 103
17222: PUSH
17223: LD_INT 104
17225: PUSH
17226: LD_INT 105
17228: PUSH
17229: LD_INT 106
17231: PUSH
17232: LD_INT 107
17234: PUSH
17235: LD_INT 108
17237: PUSH
17238: LD_INT 109
17240: PUSH
17241: LD_INT 110
17243: PUSH
17244: LD_INT 111
17246: PUSH
17247: LD_INT 112
17249: PUSH
17250: LD_INT 114
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: ST_TO_ADDR
17272: GO 18859
17274: LD_INT 12
17276: DOUBLE
17277: EQUAL
17278: IFTRUE 17282
17280: GO 17490
17282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17283: LD_ADDR_VAR 0 1
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: LD_INT 3
17296: PUSH
17297: LD_INT 4
17299: PUSH
17300: LD_INT 5
17302: PUSH
17303: LD_INT 6
17305: PUSH
17306: LD_INT 7
17308: PUSH
17309: LD_INT 8
17311: PUSH
17312: LD_INT 9
17314: PUSH
17315: LD_INT 10
17317: PUSH
17318: LD_INT 11
17320: PUSH
17321: LD_INT 12
17323: PUSH
17324: LD_INT 13
17326: PUSH
17327: LD_INT 14
17329: PUSH
17330: LD_INT 15
17332: PUSH
17333: LD_INT 16
17335: PUSH
17336: LD_INT 17
17338: PUSH
17339: LD_INT 18
17341: PUSH
17342: LD_INT 19
17344: PUSH
17345: LD_INT 20
17347: PUSH
17348: LD_INT 21
17350: PUSH
17351: LD_INT 22
17353: PUSH
17354: LD_INT 23
17356: PUSH
17357: LD_INT 24
17359: PUSH
17360: LD_INT 25
17362: PUSH
17363: LD_INT 26
17365: PUSH
17366: LD_INT 27
17368: PUSH
17369: LD_INT 28
17371: PUSH
17372: LD_INT 30
17374: PUSH
17375: LD_INT 31
17377: PUSH
17378: LD_INT 32
17380: PUSH
17381: LD_INT 33
17383: PUSH
17384: LD_INT 34
17386: PUSH
17387: LD_INT 36
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 101
17428: PUSH
17429: LD_INT 102
17431: PUSH
17432: LD_INT 103
17434: PUSH
17435: LD_INT 104
17437: PUSH
17438: LD_INT 105
17440: PUSH
17441: LD_INT 106
17443: PUSH
17444: LD_INT 107
17446: PUSH
17447: LD_INT 108
17449: PUSH
17450: LD_INT 109
17452: PUSH
17453: LD_INT 110
17455: PUSH
17456: LD_INT 111
17458: PUSH
17459: LD_INT 112
17461: PUSH
17462: LD_INT 113
17464: PUSH
17465: LD_INT 114
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: ST_TO_ADDR
17488: GO 18859
17490: LD_INT 13
17492: DOUBLE
17493: EQUAL
17494: IFTRUE 17498
17496: GO 17694
17498: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: LD_INT 4
17515: PUSH
17516: LD_INT 5
17518: PUSH
17519: LD_INT 8
17521: PUSH
17522: LD_INT 9
17524: PUSH
17525: LD_INT 10
17527: PUSH
17528: LD_INT 11
17530: PUSH
17531: LD_INT 12
17533: PUSH
17534: LD_INT 14
17536: PUSH
17537: LD_INT 15
17539: PUSH
17540: LD_INT 16
17542: PUSH
17543: LD_INT 17
17545: PUSH
17546: LD_INT 18
17548: PUSH
17549: LD_INT 19
17551: PUSH
17552: LD_INT 20
17554: PUSH
17555: LD_INT 21
17557: PUSH
17558: LD_INT 22
17560: PUSH
17561: LD_INT 23
17563: PUSH
17564: LD_INT 24
17566: PUSH
17567: LD_INT 25
17569: PUSH
17570: LD_INT 26
17572: PUSH
17573: LD_INT 27
17575: PUSH
17576: LD_INT 28
17578: PUSH
17579: LD_INT 30
17581: PUSH
17582: LD_INT 31
17584: PUSH
17585: LD_INT 32
17587: PUSH
17588: LD_INT 33
17590: PUSH
17591: LD_INT 34
17593: PUSH
17594: LD_INT 36
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 101
17632: PUSH
17633: LD_INT 102
17635: PUSH
17636: LD_INT 103
17638: PUSH
17639: LD_INT 104
17641: PUSH
17642: LD_INT 105
17644: PUSH
17645: LD_INT 106
17647: PUSH
17648: LD_INT 107
17650: PUSH
17651: LD_INT 108
17653: PUSH
17654: LD_INT 109
17656: PUSH
17657: LD_INT 110
17659: PUSH
17660: LD_INT 111
17662: PUSH
17663: LD_INT 112
17665: PUSH
17666: LD_INT 113
17668: PUSH
17669: LD_INT 114
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: ST_TO_ADDR
17692: GO 18859
17694: LD_INT 14
17696: DOUBLE
17697: EQUAL
17698: IFTRUE 17702
17700: GO 17914
17702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17703: LD_ADDR_VAR 0 1
17707: PUSH
17708: LD_INT 1
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: LD_INT 4
17719: PUSH
17720: LD_INT 5
17722: PUSH
17723: LD_INT 6
17725: PUSH
17726: LD_INT 7
17728: PUSH
17729: LD_INT 8
17731: PUSH
17732: LD_INT 9
17734: PUSH
17735: LD_INT 10
17737: PUSH
17738: LD_INT 11
17740: PUSH
17741: LD_INT 12
17743: PUSH
17744: LD_INT 13
17746: PUSH
17747: LD_INT 14
17749: PUSH
17750: LD_INT 15
17752: PUSH
17753: LD_INT 16
17755: PUSH
17756: LD_INT 17
17758: PUSH
17759: LD_INT 18
17761: PUSH
17762: LD_INT 19
17764: PUSH
17765: LD_INT 20
17767: PUSH
17768: LD_INT 21
17770: PUSH
17771: LD_INT 22
17773: PUSH
17774: LD_INT 23
17776: PUSH
17777: LD_INT 24
17779: PUSH
17780: LD_INT 25
17782: PUSH
17783: LD_INT 26
17785: PUSH
17786: LD_INT 27
17788: PUSH
17789: LD_INT 28
17791: PUSH
17792: LD_INT 29
17794: PUSH
17795: LD_INT 30
17797: PUSH
17798: LD_INT 31
17800: PUSH
17801: LD_INT 32
17803: PUSH
17804: LD_INT 33
17806: PUSH
17807: LD_INT 34
17809: PUSH
17810: LD_INT 36
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 101
17852: PUSH
17853: LD_INT 102
17855: PUSH
17856: LD_INT 103
17858: PUSH
17859: LD_INT 104
17861: PUSH
17862: LD_INT 105
17864: PUSH
17865: LD_INT 106
17867: PUSH
17868: LD_INT 107
17870: PUSH
17871: LD_INT 108
17873: PUSH
17874: LD_INT 109
17876: PUSH
17877: LD_INT 110
17879: PUSH
17880: LD_INT 111
17882: PUSH
17883: LD_INT 112
17885: PUSH
17886: LD_INT 113
17888: PUSH
17889: LD_INT 114
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: ST_TO_ADDR
17912: GO 18859
17914: LD_INT 15
17916: DOUBLE
17917: EQUAL
17918: IFTRUE 17922
17920: GO 18134
17922: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: LD_INT 2
17933: PUSH
17934: LD_INT 3
17936: PUSH
17937: LD_INT 4
17939: PUSH
17940: LD_INT 5
17942: PUSH
17943: LD_INT 6
17945: PUSH
17946: LD_INT 7
17948: PUSH
17949: LD_INT 8
17951: PUSH
17952: LD_INT 9
17954: PUSH
17955: LD_INT 10
17957: PUSH
17958: LD_INT 11
17960: PUSH
17961: LD_INT 12
17963: PUSH
17964: LD_INT 13
17966: PUSH
17967: LD_INT 14
17969: PUSH
17970: LD_INT 15
17972: PUSH
17973: LD_INT 16
17975: PUSH
17976: LD_INT 17
17978: PUSH
17979: LD_INT 18
17981: PUSH
17982: LD_INT 19
17984: PUSH
17985: LD_INT 20
17987: PUSH
17988: LD_INT 21
17990: PUSH
17991: LD_INT 22
17993: PUSH
17994: LD_INT 23
17996: PUSH
17997: LD_INT 24
17999: PUSH
18000: LD_INT 25
18002: PUSH
18003: LD_INT 26
18005: PUSH
18006: LD_INT 27
18008: PUSH
18009: LD_INT 28
18011: PUSH
18012: LD_INT 29
18014: PUSH
18015: LD_INT 30
18017: PUSH
18018: LD_INT 31
18020: PUSH
18021: LD_INT 32
18023: PUSH
18024: LD_INT 33
18026: PUSH
18027: LD_INT 34
18029: PUSH
18030: LD_INT 36
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 101
18072: PUSH
18073: LD_INT 102
18075: PUSH
18076: LD_INT 103
18078: PUSH
18079: LD_INT 104
18081: PUSH
18082: LD_INT 105
18084: PUSH
18085: LD_INT 106
18087: PUSH
18088: LD_INT 107
18090: PUSH
18091: LD_INT 108
18093: PUSH
18094: LD_INT 109
18096: PUSH
18097: LD_INT 110
18099: PUSH
18100: LD_INT 111
18102: PUSH
18103: LD_INT 112
18105: PUSH
18106: LD_INT 113
18108: PUSH
18109: LD_INT 114
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: ST_TO_ADDR
18132: GO 18859
18134: LD_INT 16
18136: DOUBLE
18137: EQUAL
18138: IFTRUE 18142
18140: GO 18266
18142: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18143: LD_ADDR_VAR 0 1
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 4
18153: PUSH
18154: LD_INT 5
18156: PUSH
18157: LD_INT 7
18159: PUSH
18160: LD_INT 11
18162: PUSH
18163: LD_INT 12
18165: PUSH
18166: LD_INT 15
18168: PUSH
18169: LD_INT 16
18171: PUSH
18172: LD_INT 20
18174: PUSH
18175: LD_INT 21
18177: PUSH
18178: LD_INT 22
18180: PUSH
18181: LD_INT 23
18183: PUSH
18184: LD_INT 25
18186: PUSH
18187: LD_INT 26
18189: PUSH
18190: LD_INT 30
18192: PUSH
18193: LD_INT 31
18195: PUSH
18196: LD_INT 32
18198: PUSH
18199: LD_INT 33
18201: PUSH
18202: LD_INT 34
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 101
18228: PUSH
18229: LD_INT 102
18231: PUSH
18232: LD_INT 103
18234: PUSH
18235: LD_INT 106
18237: PUSH
18238: LD_INT 108
18240: PUSH
18241: LD_INT 112
18243: PUSH
18244: LD_INT 113
18246: PUSH
18247: LD_INT 114
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: ST_TO_ADDR
18264: GO 18859
18266: LD_INT 17
18268: DOUBLE
18269: EQUAL
18270: IFTRUE 18274
18272: GO 18486
18274: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18275: LD_ADDR_VAR 0 1
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 3
18288: PUSH
18289: LD_INT 4
18291: PUSH
18292: LD_INT 5
18294: PUSH
18295: LD_INT 6
18297: PUSH
18298: LD_INT 7
18300: PUSH
18301: LD_INT 8
18303: PUSH
18304: LD_INT 9
18306: PUSH
18307: LD_INT 10
18309: PUSH
18310: LD_INT 11
18312: PUSH
18313: LD_INT 12
18315: PUSH
18316: LD_INT 13
18318: PUSH
18319: LD_INT 14
18321: PUSH
18322: LD_INT 15
18324: PUSH
18325: LD_INT 16
18327: PUSH
18328: LD_INT 17
18330: PUSH
18331: LD_INT 18
18333: PUSH
18334: LD_INT 19
18336: PUSH
18337: LD_INT 20
18339: PUSH
18340: LD_INT 21
18342: PUSH
18343: LD_INT 22
18345: PUSH
18346: LD_INT 23
18348: PUSH
18349: LD_INT 24
18351: PUSH
18352: LD_INT 25
18354: PUSH
18355: LD_INT 26
18357: PUSH
18358: LD_INT 27
18360: PUSH
18361: LD_INT 28
18363: PUSH
18364: LD_INT 29
18366: PUSH
18367: LD_INT 30
18369: PUSH
18370: LD_INT 31
18372: PUSH
18373: LD_INT 32
18375: PUSH
18376: LD_INT 33
18378: PUSH
18379: LD_INT 34
18381: PUSH
18382: LD_INT 36
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 101
18424: PUSH
18425: LD_INT 102
18427: PUSH
18428: LD_INT 103
18430: PUSH
18431: LD_INT 104
18433: PUSH
18434: LD_INT 105
18436: PUSH
18437: LD_INT 106
18439: PUSH
18440: LD_INT 107
18442: PUSH
18443: LD_INT 108
18445: PUSH
18446: LD_INT 109
18448: PUSH
18449: LD_INT 110
18451: PUSH
18452: LD_INT 111
18454: PUSH
18455: LD_INT 112
18457: PUSH
18458: LD_INT 113
18460: PUSH
18461: LD_INT 114
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: ST_TO_ADDR
18484: GO 18859
18486: LD_INT 18
18488: DOUBLE
18489: EQUAL
18490: IFTRUE 18494
18492: GO 18630
18494: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18495: LD_ADDR_VAR 0 1
18499: PUSH
18500: LD_INT 2
18502: PUSH
18503: LD_INT 4
18505: PUSH
18506: LD_INT 5
18508: PUSH
18509: LD_INT 7
18511: PUSH
18512: LD_INT 11
18514: PUSH
18515: LD_INT 12
18517: PUSH
18518: LD_INT 15
18520: PUSH
18521: LD_INT 16
18523: PUSH
18524: LD_INT 20
18526: PUSH
18527: LD_INT 21
18529: PUSH
18530: LD_INT 22
18532: PUSH
18533: LD_INT 23
18535: PUSH
18536: LD_INT 25
18538: PUSH
18539: LD_INT 26
18541: PUSH
18542: LD_INT 30
18544: PUSH
18545: LD_INT 31
18547: PUSH
18548: LD_INT 32
18550: PUSH
18551: LD_INT 33
18553: PUSH
18554: LD_INT 34
18556: PUSH
18557: LD_INT 35
18559: PUSH
18560: LD_INT 36
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 101
18588: PUSH
18589: LD_INT 102
18591: PUSH
18592: LD_INT 103
18594: PUSH
18595: LD_INT 106
18597: PUSH
18598: LD_INT 108
18600: PUSH
18601: LD_INT 112
18603: PUSH
18604: LD_INT 113
18606: PUSH
18607: LD_INT 114
18609: PUSH
18610: LD_INT 115
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: ST_TO_ADDR
18628: GO 18859
18630: LD_INT 19
18632: DOUBLE
18633: EQUAL
18634: IFTRUE 18638
18636: GO 18858
18638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18639: LD_ADDR_VAR 0 1
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: LD_INT 4
18655: PUSH
18656: LD_INT 5
18658: PUSH
18659: LD_INT 6
18661: PUSH
18662: LD_INT 7
18664: PUSH
18665: LD_INT 8
18667: PUSH
18668: LD_INT 9
18670: PUSH
18671: LD_INT 10
18673: PUSH
18674: LD_INT 11
18676: PUSH
18677: LD_INT 12
18679: PUSH
18680: LD_INT 13
18682: PUSH
18683: LD_INT 14
18685: PUSH
18686: LD_INT 15
18688: PUSH
18689: LD_INT 16
18691: PUSH
18692: LD_INT 17
18694: PUSH
18695: LD_INT 18
18697: PUSH
18698: LD_INT 19
18700: PUSH
18701: LD_INT 20
18703: PUSH
18704: LD_INT 21
18706: PUSH
18707: LD_INT 22
18709: PUSH
18710: LD_INT 23
18712: PUSH
18713: LD_INT 24
18715: PUSH
18716: LD_INT 25
18718: PUSH
18719: LD_INT 26
18721: PUSH
18722: LD_INT 27
18724: PUSH
18725: LD_INT 28
18727: PUSH
18728: LD_INT 29
18730: PUSH
18731: LD_INT 30
18733: PUSH
18734: LD_INT 31
18736: PUSH
18737: LD_INT 32
18739: PUSH
18740: LD_INT 33
18742: PUSH
18743: LD_INT 34
18745: PUSH
18746: LD_INT 35
18748: PUSH
18749: LD_INT 36
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 101
18792: PUSH
18793: LD_INT 102
18795: PUSH
18796: LD_INT 103
18798: PUSH
18799: LD_INT 104
18801: PUSH
18802: LD_INT 105
18804: PUSH
18805: LD_INT 106
18807: PUSH
18808: LD_INT 107
18810: PUSH
18811: LD_INT 108
18813: PUSH
18814: LD_INT 109
18816: PUSH
18817: LD_INT 110
18819: PUSH
18820: LD_INT 111
18822: PUSH
18823: LD_INT 112
18825: PUSH
18826: LD_INT 113
18828: PUSH
18829: LD_INT 114
18831: PUSH
18832: LD_INT 115
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: ST_TO_ADDR
18856: GO 18859
18858: POP
// end else
18859: GO 18896
// if campaign_id = 5 then
18861: LD_OWVAR 69
18865: PUSH
18866: LD_INT 5
18868: EQUAL
18869: IFFALSE 18896
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
18871: LD_ADDR_VAR 0 1
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 100
18888: PUSH
18889: EMPTY
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: ST_TO_ADDR
// end ; if result then
18896: LD_VAR 0 1
18900: IFFALSE 19189
// begin normal :=  ;
18902: LD_ADDR_VAR 0 3
18906: PUSH
18907: LD_STRING 
18909: ST_TO_ADDR
// hardcore :=  ;
18910: LD_ADDR_VAR 0 4
18914: PUSH
18915: LD_STRING 
18917: ST_TO_ADDR
// for i = 1 to normalCounter do
18918: LD_ADDR_VAR 0 5
18922: PUSH
18923: DOUBLE
18924: LD_INT 1
18926: DEC
18927: ST_TO_ADDR
18928: LD_EXP 60
18932: PUSH
18933: FOR_TO
18934: IFFALSE 19035
// begin tmp := 0 ;
18936: LD_ADDR_VAR 0 2
18940: PUSH
18941: LD_STRING 0
18943: ST_TO_ADDR
// if result [ 1 ] then
18944: LD_VAR 0 1
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: IFFALSE 19017
// if result [ 1 ] [ 1 ] = i then
18954: LD_VAR 0 1
18958: PUSH
18959: LD_INT 1
18961: ARRAY
18962: PUSH
18963: LD_INT 1
18965: ARRAY
18966: PUSH
18967: LD_VAR 0 5
18971: EQUAL
18972: IFFALSE 19017
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18974: LD_ADDR_VAR 0 1
18978: PUSH
18979: LD_VAR 0 1
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: LD_VAR 0 1
18991: PUSH
18992: LD_INT 1
18994: ARRAY
18995: PPUSH
18996: LD_INT 1
18998: PPUSH
18999: CALL_OW 3
19003: PPUSH
19004: CALL_OW 1
19008: ST_TO_ADDR
// tmp := 1 ;
19009: LD_ADDR_VAR 0 2
19013: PUSH
19014: LD_STRING 1
19016: ST_TO_ADDR
// end ; normal := normal & tmp ;
19017: LD_ADDR_VAR 0 3
19021: PUSH
19022: LD_VAR 0 3
19026: PUSH
19027: LD_VAR 0 2
19031: STR
19032: ST_TO_ADDR
// end ;
19033: GO 18933
19035: POP
19036: POP
// for i = 1 to hardcoreCounter do
19037: LD_ADDR_VAR 0 5
19041: PUSH
19042: DOUBLE
19043: LD_INT 1
19045: DEC
19046: ST_TO_ADDR
19047: LD_EXP 61
19051: PUSH
19052: FOR_TO
19053: IFFALSE 19158
// begin tmp := 0 ;
19055: LD_ADDR_VAR 0 2
19059: PUSH
19060: LD_STRING 0
19062: ST_TO_ADDR
// if result [ 2 ] then
19063: LD_VAR 0 1
19067: PUSH
19068: LD_INT 2
19070: ARRAY
19071: IFFALSE 19140
// if result [ 2 ] [ 1 ] = 100 + i then
19073: LD_VAR 0 1
19077: PUSH
19078: LD_INT 2
19080: ARRAY
19081: PUSH
19082: LD_INT 1
19084: ARRAY
19085: PUSH
19086: LD_INT 100
19088: PUSH
19089: LD_VAR 0 5
19093: PLUS
19094: EQUAL
19095: IFFALSE 19140
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19097: LD_ADDR_VAR 0 1
19101: PUSH
19102: LD_VAR 0 1
19106: PPUSH
19107: LD_INT 2
19109: PPUSH
19110: LD_VAR 0 1
19114: PUSH
19115: LD_INT 2
19117: ARRAY
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 3
19126: PPUSH
19127: CALL_OW 1
19131: ST_TO_ADDR
// tmp := 1 ;
19132: LD_ADDR_VAR 0 2
19136: PUSH
19137: LD_STRING 1
19139: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19140: LD_ADDR_VAR 0 4
19144: PUSH
19145: LD_VAR 0 4
19149: PUSH
19150: LD_VAR 0 2
19154: STR
19155: ST_TO_ADDR
// end ;
19156: GO 19052
19158: POP
19159: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19160: LD_STRING getStreamItemsFromMission("
19162: PUSH
19163: LD_VAR 0 3
19167: STR
19168: PUSH
19169: LD_STRING ","
19171: STR
19172: PUSH
19173: LD_VAR 0 4
19177: STR
19178: PUSH
19179: LD_STRING ")
19181: STR
19182: PPUSH
19183: CALL_OW 559
// end else
19187: GO 19196
// ToLua ( getStreamItemsFromMission("","") ) ;
19189: LD_STRING getStreamItemsFromMission("","")
19191: PPUSH
19192: CALL_OW 559
// end ;
19196: LD_VAR 0 1
19200: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19201: LD_VAR 0 2
19205: PUSH
19206: LD_INT 100
19208: EQUAL
19209: IFFALSE 20158
// begin if not StreamModeActive then
19211: LD_EXP 59
19215: NOT
19216: IFFALSE 19226
// StreamModeActive := true ;
19218: LD_ADDR_EXP 59
19222: PUSH
19223: LD_INT 1
19225: ST_TO_ADDR
// if p3 = 0 then
19226: LD_VAR 0 3
19230: PUSH
19231: LD_INT 0
19233: EQUAL
19234: IFFALSE 19240
// InitStreamMode ;
19236: CALL 15461 0 0
// if p3 = 1 then
19240: LD_VAR 0 3
19244: PUSH
19245: LD_INT 1
19247: EQUAL
19248: IFFALSE 19258
// sRocket := true ;
19250: LD_ADDR_EXP 64
19254: PUSH
19255: LD_INT 1
19257: ST_TO_ADDR
// if p3 = 2 then
19258: LD_VAR 0 3
19262: PUSH
19263: LD_INT 2
19265: EQUAL
19266: IFFALSE 19276
// sSpeed := true ;
19268: LD_ADDR_EXP 63
19272: PUSH
19273: LD_INT 1
19275: ST_TO_ADDR
// if p3 = 3 then
19276: LD_VAR 0 3
19280: PUSH
19281: LD_INT 3
19283: EQUAL
19284: IFFALSE 19294
// sEngine := true ;
19286: LD_ADDR_EXP 65
19290: PUSH
19291: LD_INT 1
19293: ST_TO_ADDR
// if p3 = 4 then
19294: LD_VAR 0 3
19298: PUSH
19299: LD_INT 4
19301: EQUAL
19302: IFFALSE 19312
// sSpec := true ;
19304: LD_ADDR_EXP 62
19308: PUSH
19309: LD_INT 1
19311: ST_TO_ADDR
// if p3 = 5 then
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 5
19319: EQUAL
19320: IFFALSE 19330
// sLevel := true ;
19322: LD_ADDR_EXP 66
19326: PUSH
19327: LD_INT 1
19329: ST_TO_ADDR
// if p3 = 6 then
19330: LD_VAR 0 3
19334: PUSH
19335: LD_INT 6
19337: EQUAL
19338: IFFALSE 19348
// sArmoury := true ;
19340: LD_ADDR_EXP 67
19344: PUSH
19345: LD_INT 1
19347: ST_TO_ADDR
// if p3 = 7 then
19348: LD_VAR 0 3
19352: PUSH
19353: LD_INT 7
19355: EQUAL
19356: IFFALSE 19366
// sRadar := true ;
19358: LD_ADDR_EXP 68
19362: PUSH
19363: LD_INT 1
19365: ST_TO_ADDR
// if p3 = 8 then
19366: LD_VAR 0 3
19370: PUSH
19371: LD_INT 8
19373: EQUAL
19374: IFFALSE 19384
// sBunker := true ;
19376: LD_ADDR_EXP 69
19380: PUSH
19381: LD_INT 1
19383: ST_TO_ADDR
// if p3 = 9 then
19384: LD_VAR 0 3
19388: PUSH
19389: LD_INT 9
19391: EQUAL
19392: IFFALSE 19402
// sHack := true ;
19394: LD_ADDR_EXP 70
19398: PUSH
19399: LD_INT 1
19401: ST_TO_ADDR
// if p3 = 10 then
19402: LD_VAR 0 3
19406: PUSH
19407: LD_INT 10
19409: EQUAL
19410: IFFALSE 19420
// sFire := true ;
19412: LD_ADDR_EXP 71
19416: PUSH
19417: LD_INT 1
19419: ST_TO_ADDR
// if p3 = 11 then
19420: LD_VAR 0 3
19424: PUSH
19425: LD_INT 11
19427: EQUAL
19428: IFFALSE 19438
// sRefresh := true ;
19430: LD_ADDR_EXP 72
19434: PUSH
19435: LD_INT 1
19437: ST_TO_ADDR
// if p3 = 12 then
19438: LD_VAR 0 3
19442: PUSH
19443: LD_INT 12
19445: EQUAL
19446: IFFALSE 19456
// sExp := true ;
19448: LD_ADDR_EXP 73
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// if p3 = 13 then
19456: LD_VAR 0 3
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19474
// sDepot := true ;
19466: LD_ADDR_EXP 74
19470: PUSH
19471: LD_INT 1
19473: ST_TO_ADDR
// if p3 = 14 then
19474: LD_VAR 0 3
19478: PUSH
19479: LD_INT 14
19481: EQUAL
19482: IFFALSE 19492
// sFlag := true ;
19484: LD_ADDR_EXP 75
19488: PUSH
19489: LD_INT 1
19491: ST_TO_ADDR
// if p3 = 15 then
19492: LD_VAR 0 3
19496: PUSH
19497: LD_INT 15
19499: EQUAL
19500: IFFALSE 19510
// sKamikadze := true ;
19502: LD_ADDR_EXP 83
19506: PUSH
19507: LD_INT 1
19509: ST_TO_ADDR
// if p3 = 16 then
19510: LD_VAR 0 3
19514: PUSH
19515: LD_INT 16
19517: EQUAL
19518: IFFALSE 19528
// sTroll := true ;
19520: LD_ADDR_EXP 84
19524: PUSH
19525: LD_INT 1
19527: ST_TO_ADDR
// if p3 = 17 then
19528: LD_VAR 0 3
19532: PUSH
19533: LD_INT 17
19535: EQUAL
19536: IFFALSE 19546
// sSlow := true ;
19538: LD_ADDR_EXP 85
19542: PUSH
19543: LD_INT 1
19545: ST_TO_ADDR
// if p3 = 18 then
19546: LD_VAR 0 3
19550: PUSH
19551: LD_INT 18
19553: EQUAL
19554: IFFALSE 19564
// sLack := true ;
19556: LD_ADDR_EXP 86
19560: PUSH
19561: LD_INT 1
19563: ST_TO_ADDR
// if p3 = 19 then
19564: LD_VAR 0 3
19568: PUSH
19569: LD_INT 19
19571: EQUAL
19572: IFFALSE 19582
// sTank := true ;
19574: LD_ADDR_EXP 88
19578: PUSH
19579: LD_INT 1
19581: ST_TO_ADDR
// if p3 = 20 then
19582: LD_VAR 0 3
19586: PUSH
19587: LD_INT 20
19589: EQUAL
19590: IFFALSE 19600
// sRemote := true ;
19592: LD_ADDR_EXP 89
19596: PUSH
19597: LD_INT 1
19599: ST_TO_ADDR
// if p3 = 21 then
19600: LD_VAR 0 3
19604: PUSH
19605: LD_INT 21
19607: EQUAL
19608: IFFALSE 19618
// sPowell := true ;
19610: LD_ADDR_EXP 90
19614: PUSH
19615: LD_INT 1
19617: ST_TO_ADDR
// if p3 = 22 then
19618: LD_VAR 0 3
19622: PUSH
19623: LD_INT 22
19625: EQUAL
19626: IFFALSE 19636
// sTeleport := true ;
19628: LD_ADDR_EXP 93
19632: PUSH
19633: LD_INT 1
19635: ST_TO_ADDR
// if p3 = 23 then
19636: LD_VAR 0 3
19640: PUSH
19641: LD_INT 23
19643: EQUAL
19644: IFFALSE 19654
// sOilTower := true ;
19646: LD_ADDR_EXP 95
19650: PUSH
19651: LD_INT 1
19653: ST_TO_ADDR
// if p3 = 24 then
19654: LD_VAR 0 3
19658: PUSH
19659: LD_INT 24
19661: EQUAL
19662: IFFALSE 19672
// sShovel := true ;
19664: LD_ADDR_EXP 96
19668: PUSH
19669: LD_INT 1
19671: ST_TO_ADDR
// if p3 = 25 then
19672: LD_VAR 0 3
19676: PUSH
19677: LD_INT 25
19679: EQUAL
19680: IFFALSE 19690
// sSheik := true ;
19682: LD_ADDR_EXP 97
19686: PUSH
19687: LD_INT 1
19689: ST_TO_ADDR
// if p3 = 26 then
19690: LD_VAR 0 3
19694: PUSH
19695: LD_INT 26
19697: EQUAL
19698: IFFALSE 19708
// sEarthquake := true ;
19700: LD_ADDR_EXP 99
19704: PUSH
19705: LD_INT 1
19707: ST_TO_ADDR
// if p3 = 27 then
19708: LD_VAR 0 3
19712: PUSH
19713: LD_INT 27
19715: EQUAL
19716: IFFALSE 19726
// sAI := true ;
19718: LD_ADDR_EXP 100
19722: PUSH
19723: LD_INT 1
19725: ST_TO_ADDR
// if p3 = 28 then
19726: LD_VAR 0 3
19730: PUSH
19731: LD_INT 28
19733: EQUAL
19734: IFFALSE 19744
// sCargo := true ;
19736: LD_ADDR_EXP 103
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// if p3 = 29 then
19744: LD_VAR 0 3
19748: PUSH
19749: LD_INT 29
19751: EQUAL
19752: IFFALSE 19762
// sDLaser := true ;
19754: LD_ADDR_EXP 104
19758: PUSH
19759: LD_INT 1
19761: ST_TO_ADDR
// if p3 = 30 then
19762: LD_VAR 0 3
19766: PUSH
19767: LD_INT 30
19769: EQUAL
19770: IFFALSE 19780
// sExchange := true ;
19772: LD_ADDR_EXP 105
19776: PUSH
19777: LD_INT 1
19779: ST_TO_ADDR
// if p3 = 31 then
19780: LD_VAR 0 3
19784: PUSH
19785: LD_INT 31
19787: EQUAL
19788: IFFALSE 19798
// sFac := true ;
19790: LD_ADDR_EXP 106
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// if p3 = 32 then
19798: LD_VAR 0 3
19802: PUSH
19803: LD_INT 32
19805: EQUAL
19806: IFFALSE 19816
// sPower := true ;
19808: LD_ADDR_EXP 107
19812: PUSH
19813: LD_INT 1
19815: ST_TO_ADDR
// if p3 = 33 then
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 33
19823: EQUAL
19824: IFFALSE 19834
// sRandom := true ;
19826: LD_ADDR_EXP 108
19830: PUSH
19831: LD_INT 1
19833: ST_TO_ADDR
// if p3 = 34 then
19834: LD_VAR 0 3
19838: PUSH
19839: LD_INT 34
19841: EQUAL
19842: IFFALSE 19852
// sShield := true ;
19844: LD_ADDR_EXP 109
19848: PUSH
19849: LD_INT 1
19851: ST_TO_ADDR
// if p3 = 35 then
19852: LD_VAR 0 3
19856: PUSH
19857: LD_INT 35
19859: EQUAL
19860: IFFALSE 19870
// sTime := true ;
19862: LD_ADDR_EXP 110
19866: PUSH
19867: LD_INT 1
19869: ST_TO_ADDR
// if p3 = 36 then
19870: LD_VAR 0 3
19874: PUSH
19875: LD_INT 36
19877: EQUAL
19878: IFFALSE 19888
// sTools := true ;
19880: LD_ADDR_EXP 111
19884: PUSH
19885: LD_INT 1
19887: ST_TO_ADDR
// if p3 = 101 then
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 101
19895: EQUAL
19896: IFFALSE 19906
// sSold := true ;
19898: LD_ADDR_EXP 76
19902: PUSH
19903: LD_INT 1
19905: ST_TO_ADDR
// if p3 = 102 then
19906: LD_VAR 0 3
19910: PUSH
19911: LD_INT 102
19913: EQUAL
19914: IFFALSE 19924
// sDiff := true ;
19916: LD_ADDR_EXP 77
19920: PUSH
19921: LD_INT 1
19923: ST_TO_ADDR
// if p3 = 103 then
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 103
19931: EQUAL
19932: IFFALSE 19942
// sFog := true ;
19934: LD_ADDR_EXP 80
19938: PUSH
19939: LD_INT 1
19941: ST_TO_ADDR
// if p3 = 104 then
19942: LD_VAR 0 3
19946: PUSH
19947: LD_INT 104
19949: EQUAL
19950: IFFALSE 19960
// sReset := true ;
19952: LD_ADDR_EXP 81
19956: PUSH
19957: LD_INT 1
19959: ST_TO_ADDR
// if p3 = 105 then
19960: LD_VAR 0 3
19964: PUSH
19965: LD_INT 105
19967: EQUAL
19968: IFFALSE 19978
// sSun := true ;
19970: LD_ADDR_EXP 82
19974: PUSH
19975: LD_INT 1
19977: ST_TO_ADDR
// if p3 = 106 then
19978: LD_VAR 0 3
19982: PUSH
19983: LD_INT 106
19985: EQUAL
19986: IFFALSE 19996
// sTiger := true ;
19988: LD_ADDR_EXP 78
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// if p3 = 107 then
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 107
20003: EQUAL
20004: IFFALSE 20014
// sBomb := true ;
20006: LD_ADDR_EXP 79
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// if p3 = 108 then
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 108
20021: EQUAL
20022: IFFALSE 20032
// sWound := true ;
20024: LD_ADDR_EXP 87
20028: PUSH
20029: LD_INT 1
20031: ST_TO_ADDR
// if p3 = 109 then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 109
20039: EQUAL
20040: IFFALSE 20050
// sBetray := true ;
20042: LD_ADDR_EXP 91
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// if p3 = 110 then
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 110
20057: EQUAL
20058: IFFALSE 20068
// sContamin := true ;
20060: LD_ADDR_EXP 92
20064: PUSH
20065: LD_INT 1
20067: ST_TO_ADDR
// if p3 = 111 then
20068: LD_VAR 0 3
20072: PUSH
20073: LD_INT 111
20075: EQUAL
20076: IFFALSE 20086
// sOil := true ;
20078: LD_ADDR_EXP 94
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// if p3 = 112 then
20086: LD_VAR 0 3
20090: PUSH
20091: LD_INT 112
20093: EQUAL
20094: IFFALSE 20104
// sStu := true ;
20096: LD_ADDR_EXP 98
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// if p3 = 113 then
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 113
20111: EQUAL
20112: IFFALSE 20122
// sBazooka := true ;
20114: LD_ADDR_EXP 101
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// if p3 = 114 then
20122: LD_VAR 0 3
20126: PUSH
20127: LD_INT 114
20129: EQUAL
20130: IFFALSE 20140
// sMortar := true ;
20132: LD_ADDR_EXP 102
20136: PUSH
20137: LD_INT 1
20139: ST_TO_ADDR
// if p3 = 115 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 115
20147: EQUAL
20148: IFFALSE 20158
// sRanger := true ;
20150: LD_ADDR_EXP 112
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// end ; end ;
20158: PPOPN 6
20160: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20161: LD_EXP 59
20165: PUSH
20166: LD_EXP 64
20170: AND
20171: IFFALSE 20295
20173: GO 20175
20175: DISABLE
20176: LD_INT 0
20178: PPUSH
20179: PPUSH
// begin enable ;
20180: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20181: LD_ADDR_VAR 0 2
20185: PUSH
20186: LD_INT 22
20188: PUSH
20189: LD_OWVAR 2
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: LD_INT 34
20203: PUSH
20204: LD_INT 7
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: LD_INT 34
20213: PUSH
20214: LD_INT 45
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 34
20223: PUSH
20224: LD_INT 28
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 34
20233: PUSH
20234: LD_INT 47
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 69
20256: ST_TO_ADDR
// if not tmp then
20257: LD_VAR 0 2
20261: NOT
20262: IFFALSE 20266
// exit ;
20264: GO 20295
// for i in tmp do
20266: LD_ADDR_VAR 0 1
20270: PUSH
20271: LD_VAR 0 2
20275: PUSH
20276: FOR_IN
20277: IFFALSE 20293
// begin SetLives ( i , 0 ) ;
20279: LD_VAR 0 1
20283: PPUSH
20284: LD_INT 0
20286: PPUSH
20287: CALL_OW 234
// end ;
20291: GO 20276
20293: POP
20294: POP
// end ;
20295: PPOPN 2
20297: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20298: LD_EXP 59
20302: PUSH
20303: LD_EXP 65
20307: AND
20308: IFFALSE 20392
20310: GO 20312
20312: DISABLE
20313: LD_INT 0
20315: PPUSH
20316: PPUSH
// begin enable ;
20317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20318: LD_ADDR_VAR 0 2
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_OWVAR 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 32
20337: PUSH
20338: LD_INT 3
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PPUSH
20349: CALL_OW 69
20353: ST_TO_ADDR
// if not tmp then
20354: LD_VAR 0 2
20358: NOT
20359: IFFALSE 20363
// exit ;
20361: GO 20392
// for i in tmp do
20363: LD_ADDR_VAR 0 1
20367: PUSH
20368: LD_VAR 0 2
20372: PUSH
20373: FOR_IN
20374: IFFALSE 20390
// begin SetLives ( i , 0 ) ;
20376: LD_VAR 0 1
20380: PPUSH
20381: LD_INT 0
20383: PPUSH
20384: CALL_OW 234
// end ;
20388: GO 20373
20390: POP
20391: POP
// end ;
20392: PPOPN 2
20394: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20395: LD_EXP 59
20399: PUSH
20400: LD_EXP 62
20404: AND
20405: IFFALSE 20498
20407: GO 20409
20409: DISABLE
20410: LD_INT 0
20412: PPUSH
// begin enable ;
20413: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20414: LD_ADDR_VAR 0 1
20418: PUSH
20419: LD_INT 22
20421: PUSH
20422: LD_OWVAR 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 2
20433: PUSH
20434: LD_INT 25
20436: PUSH
20437: LD_INT 5
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 25
20446: PUSH
20447: LD_INT 9
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 25
20456: PUSH
20457: LD_INT 8
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PPUSH
20474: CALL_OW 69
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20496
// begin SetClass ( i , 1 ) ;
20482: LD_VAR 0 1
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: CALL_OW 336
// end ;
20494: GO 20479
20496: POP
20497: POP
// end ;
20498: PPOPN 1
20500: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20501: LD_EXP 59
20505: PUSH
20506: LD_EXP 63
20510: AND
20511: PUSH
20512: LD_OWVAR 65
20516: PUSH
20517: LD_INT 7
20519: LESS
20520: AND
20521: IFFALSE 20535
20523: GO 20525
20525: DISABLE
// begin enable ;
20526: ENABLE
// game_speed := 7 ;
20527: LD_ADDR_OWVAR 65
20531: PUSH
20532: LD_INT 7
20534: ST_TO_ADDR
// end ;
20535: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20536: LD_EXP 59
20540: PUSH
20541: LD_EXP 66
20545: AND
20546: IFFALSE 20748
20548: GO 20550
20550: DISABLE
20551: LD_INT 0
20553: PPUSH
20554: PPUSH
20555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20556: LD_ADDR_VAR 0 3
20560: PUSH
20561: LD_INT 81
20563: PUSH
20564: LD_OWVAR 2
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 21
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PPUSH
20587: CALL_OW 69
20591: ST_TO_ADDR
// if not tmp then
20592: LD_VAR 0 3
20596: NOT
20597: IFFALSE 20601
// exit ;
20599: GO 20748
// if tmp > 5 then
20601: LD_VAR 0 3
20605: PUSH
20606: LD_INT 5
20608: GREATER
20609: IFFALSE 20621
// k := 5 else
20611: LD_ADDR_VAR 0 2
20615: PUSH
20616: LD_INT 5
20618: ST_TO_ADDR
20619: GO 20631
// k := tmp ;
20621: LD_ADDR_VAR 0 2
20625: PUSH
20626: LD_VAR 0 3
20630: ST_TO_ADDR
// for i := 1 to k do
20631: LD_ADDR_VAR 0 1
20635: PUSH
20636: DOUBLE
20637: LD_INT 1
20639: DEC
20640: ST_TO_ADDR
20641: LD_VAR 0 2
20645: PUSH
20646: FOR_TO
20647: IFFALSE 20746
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_VAR 0 1
20658: ARRAY
20659: PPUSH
20660: LD_VAR 0 1
20664: PUSH
20665: LD_INT 4
20667: MOD
20668: PUSH
20669: LD_INT 1
20671: PLUS
20672: PPUSH
20673: CALL_OW 259
20677: PUSH
20678: LD_INT 10
20680: LESS
20681: IFFALSE 20744
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20683: LD_VAR 0 3
20687: PUSH
20688: LD_VAR 0 1
20692: ARRAY
20693: PPUSH
20694: LD_VAR 0 1
20698: PUSH
20699: LD_INT 4
20701: MOD
20702: PUSH
20703: LD_INT 1
20705: PLUS
20706: PPUSH
20707: LD_VAR 0 3
20711: PUSH
20712: LD_VAR 0 1
20716: ARRAY
20717: PPUSH
20718: LD_VAR 0 1
20722: PUSH
20723: LD_INT 4
20725: MOD
20726: PUSH
20727: LD_INT 1
20729: PLUS
20730: PPUSH
20731: CALL_OW 259
20735: PUSH
20736: LD_INT 1
20738: PLUS
20739: PPUSH
20740: CALL_OW 237
20744: GO 20646
20746: POP
20747: POP
// end ;
20748: PPOPN 3
20750: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20751: LD_EXP 59
20755: PUSH
20756: LD_EXP 67
20760: AND
20761: IFFALSE 20781
20763: GO 20765
20765: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20766: LD_INT 4
20768: PPUSH
20769: LD_OWVAR 2
20773: PPUSH
20774: LD_INT 0
20776: PPUSH
20777: CALL_OW 324
20781: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20782: LD_EXP 59
20786: PUSH
20787: LD_EXP 96
20791: AND
20792: IFFALSE 20812
20794: GO 20796
20796: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20797: LD_INT 19
20799: PPUSH
20800: LD_OWVAR 2
20804: PPUSH
20805: LD_INT 0
20807: PPUSH
20808: CALL_OW 324
20812: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20813: LD_EXP 59
20817: PUSH
20818: LD_EXP 68
20822: AND
20823: IFFALSE 20925
20825: GO 20827
20827: DISABLE
20828: LD_INT 0
20830: PPUSH
20831: PPUSH
// begin enable ;
20832: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20833: LD_ADDR_VAR 0 2
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_OWVAR 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 2
20852: PUSH
20853: LD_INT 34
20855: PUSH
20856: LD_INT 11
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 34
20865: PUSH
20866: LD_INT 30
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 69
20886: ST_TO_ADDR
// if not tmp then
20887: LD_VAR 0 2
20891: NOT
20892: IFFALSE 20896
// exit ;
20894: GO 20925
// for i in tmp do
20896: LD_ADDR_VAR 0 1
20900: PUSH
20901: LD_VAR 0 2
20905: PUSH
20906: FOR_IN
20907: IFFALSE 20923
// begin SetLives ( i , 0 ) ;
20909: LD_VAR 0 1
20913: PPUSH
20914: LD_INT 0
20916: PPUSH
20917: CALL_OW 234
// end ;
20921: GO 20906
20923: POP
20924: POP
// end ;
20925: PPOPN 2
20927: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20928: LD_EXP 59
20932: PUSH
20933: LD_EXP 69
20937: AND
20938: IFFALSE 20958
20940: GO 20942
20942: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20943: LD_INT 32
20945: PPUSH
20946: LD_OWVAR 2
20950: PPUSH
20951: LD_INT 0
20953: PPUSH
20954: CALL_OW 324
20958: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20959: LD_EXP 59
20963: PUSH
20964: LD_EXP 70
20968: AND
20969: IFFALSE 21150
20971: GO 20973
20973: DISABLE
20974: LD_INT 0
20976: PPUSH
20977: PPUSH
20978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_INT 22
20986: PUSH
20987: LD_OWVAR 2
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 33
20998: PUSH
20999: LD_INT 3
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PPUSH
21010: CALL_OW 69
21014: ST_TO_ADDR
// if not tmp then
21015: LD_VAR 0 2
21019: NOT
21020: IFFALSE 21024
// exit ;
21022: GO 21150
// side := 0 ;
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_INT 0
21031: ST_TO_ADDR
// for i := 1 to 8 do
21032: LD_ADDR_VAR 0 1
21036: PUSH
21037: DOUBLE
21038: LD_INT 1
21040: DEC
21041: ST_TO_ADDR
21042: LD_INT 8
21044: PUSH
21045: FOR_TO
21046: IFFALSE 21094
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21048: LD_OWVAR 2
21052: PUSH
21053: LD_VAR 0 1
21057: NONEQUAL
21058: PUSH
21059: LD_OWVAR 2
21063: PPUSH
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL_OW 81
21073: PUSH
21074: LD_INT 2
21076: EQUAL
21077: AND
21078: IFFALSE 21092
// begin side := i ;
21080: LD_ADDR_VAR 0 3
21084: PUSH
21085: LD_VAR 0 1
21089: ST_TO_ADDR
// break ;
21090: GO 21094
// end ;
21092: GO 21045
21094: POP
21095: POP
// if not side then
21096: LD_VAR 0 3
21100: NOT
21101: IFFALSE 21105
// exit ;
21103: GO 21150
// for i := 1 to tmp do
21105: LD_ADDR_VAR 0 1
21109: PUSH
21110: DOUBLE
21111: LD_INT 1
21113: DEC
21114: ST_TO_ADDR
21115: LD_VAR 0 2
21119: PUSH
21120: FOR_TO
21121: IFFALSE 21148
// if Prob ( 60 ) then
21123: LD_INT 60
21125: PPUSH
21126: CALL_OW 13
21130: IFFALSE 21146
// SetSide ( i , side ) ;
21132: LD_VAR 0 1
21136: PPUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: CALL_OW 235
21146: GO 21120
21148: POP
21149: POP
// end ;
21150: PPOPN 3
21152: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21153: LD_EXP 59
21157: PUSH
21158: LD_EXP 72
21162: AND
21163: IFFALSE 21282
21165: GO 21167
21167: DISABLE
21168: LD_INT 0
21170: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21171: LD_ADDR_VAR 0 1
21175: PUSH
21176: LD_INT 22
21178: PUSH
21179: LD_OWVAR 2
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 21
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 3
21200: PUSH
21201: LD_INT 23
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: PUSH
21225: FOR_IN
21226: IFFALSE 21280
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21228: LD_VAR 0 1
21232: PPUSH
21233: CALL_OW 257
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 3
21246: PUSH
21247: LD_INT 4
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: IN
21256: IFFALSE 21278
// SetClass ( un , rand ( 1 , 4 ) ) ;
21258: LD_VAR 0 1
21262: PPUSH
21263: LD_INT 1
21265: PPUSH
21266: LD_INT 4
21268: PPUSH
21269: CALL_OW 12
21273: PPUSH
21274: CALL_OW 336
21278: GO 21225
21280: POP
21281: POP
// end ;
21282: PPOPN 1
21284: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21285: LD_EXP 59
21289: PUSH
21290: LD_EXP 71
21294: AND
21295: IFFALSE 21374
21297: GO 21299
21299: DISABLE
21300: LD_INT 0
21302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21303: LD_ADDR_VAR 0 1
21307: PUSH
21308: LD_INT 22
21310: PUSH
21311: LD_OWVAR 2
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 21
21322: PUSH
21323: LD_INT 3
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PPUSH
21334: CALL_OW 69
21338: ST_TO_ADDR
// if not tmp then
21339: LD_VAR 0 1
21343: NOT
21344: IFFALSE 21348
// exit ;
21346: GO 21374
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21348: LD_VAR 0 1
21352: PUSH
21353: LD_INT 1
21355: PPUSH
21356: LD_VAR 0 1
21360: PPUSH
21361: CALL_OW 12
21365: ARRAY
21366: PPUSH
21367: LD_INT 100
21369: PPUSH
21370: CALL_OW 234
// end ;
21374: PPOPN 1
21376: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21377: LD_EXP 59
21381: PUSH
21382: LD_EXP 73
21386: AND
21387: IFFALSE 21485
21389: GO 21391
21391: DISABLE
21392: LD_INT 0
21394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21395: LD_ADDR_VAR 0 1
21399: PUSH
21400: LD_INT 22
21402: PUSH
21403: LD_OWVAR 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 21
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PPUSH
21426: CALL_OW 69
21430: ST_TO_ADDR
// if not tmp then
21431: LD_VAR 0 1
21435: NOT
21436: IFFALSE 21440
// exit ;
21438: GO 21485
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21440: LD_VAR 0 1
21444: PUSH
21445: LD_INT 1
21447: PPUSH
21448: LD_VAR 0 1
21452: PPUSH
21453: CALL_OW 12
21457: ARRAY
21458: PPUSH
21459: LD_INT 1
21461: PPUSH
21462: LD_INT 4
21464: PPUSH
21465: CALL_OW 12
21469: PPUSH
21470: LD_INT 3000
21472: PPUSH
21473: LD_INT 9000
21475: PPUSH
21476: CALL_OW 12
21480: PPUSH
21481: CALL_OW 492
// end ;
21485: PPOPN 1
21487: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21488: LD_EXP 59
21492: PUSH
21493: LD_EXP 74
21497: AND
21498: IFFALSE 21518
21500: GO 21502
21502: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21503: LD_INT 1
21505: PPUSH
21506: LD_OWVAR 2
21510: PPUSH
21511: LD_INT 0
21513: PPUSH
21514: CALL_OW 324
21518: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21519: LD_EXP 59
21523: PUSH
21524: LD_EXP 75
21528: AND
21529: IFFALSE 21612
21531: GO 21533
21533: DISABLE
21534: LD_INT 0
21536: PPUSH
21537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21538: LD_ADDR_VAR 0 2
21542: PUSH
21543: LD_INT 22
21545: PUSH
21546: LD_OWVAR 2
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 21
21557: PUSH
21558: LD_INT 3
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 69
21573: ST_TO_ADDR
// if not tmp then
21574: LD_VAR 0 2
21578: NOT
21579: IFFALSE 21583
// exit ;
21581: GO 21612
// for i in tmp do
21583: LD_ADDR_VAR 0 1
21587: PUSH
21588: LD_VAR 0 2
21592: PUSH
21593: FOR_IN
21594: IFFALSE 21610
// SetBLevel ( i , 10 ) ;
21596: LD_VAR 0 1
21600: PPUSH
21601: LD_INT 10
21603: PPUSH
21604: CALL_OW 241
21608: GO 21593
21610: POP
21611: POP
// end ;
21612: PPOPN 2
21614: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21615: LD_EXP 59
21619: PUSH
21620: LD_EXP 76
21624: AND
21625: IFFALSE 21736
21627: GO 21629
21629: DISABLE
21630: LD_INT 0
21632: PPUSH
21633: PPUSH
21634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21635: LD_ADDR_VAR 0 3
21639: PUSH
21640: LD_INT 22
21642: PUSH
21643: LD_OWVAR 2
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 25
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PPUSH
21666: CALL_OW 69
21670: ST_TO_ADDR
// if not tmp then
21671: LD_VAR 0 3
21675: NOT
21676: IFFALSE 21680
// exit ;
21678: GO 21736
// un := tmp [ rand ( 1 , tmp ) ] ;
21680: LD_ADDR_VAR 0 2
21684: PUSH
21685: LD_VAR 0 3
21689: PUSH
21690: LD_INT 1
21692: PPUSH
21693: LD_VAR 0 3
21697: PPUSH
21698: CALL_OW 12
21702: ARRAY
21703: ST_TO_ADDR
// if Crawls ( un ) then
21704: LD_VAR 0 2
21708: PPUSH
21709: CALL_OW 318
21713: IFFALSE 21724
// ComWalk ( un ) ;
21715: LD_VAR 0 2
21719: PPUSH
21720: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21724: LD_VAR 0 2
21728: PPUSH
21729: LD_INT 5
21731: PPUSH
21732: CALL_OW 336
// end ;
21736: PPOPN 3
21738: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21739: LD_EXP 59
21743: PUSH
21744: LD_EXP 77
21748: AND
21749: PUSH
21750: LD_OWVAR 67
21754: PUSH
21755: LD_INT 3
21757: LESS
21758: AND
21759: IFFALSE 21778
21761: GO 21763
21763: DISABLE
// Difficulty := Difficulty + 1 ;
21764: LD_ADDR_OWVAR 67
21768: PUSH
21769: LD_OWVAR 67
21773: PUSH
21774: LD_INT 1
21776: PLUS
21777: ST_TO_ADDR
21778: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21779: LD_EXP 59
21783: PUSH
21784: LD_EXP 78
21788: AND
21789: IFFALSE 21892
21791: GO 21793
21793: DISABLE
21794: LD_INT 0
21796: PPUSH
// begin for i := 1 to 5 do
21797: LD_ADDR_VAR 0 1
21801: PUSH
21802: DOUBLE
21803: LD_INT 1
21805: DEC
21806: ST_TO_ADDR
21807: LD_INT 5
21809: PUSH
21810: FOR_TO
21811: IFFALSE 21890
// begin uc_nation := nation_nature ;
21813: LD_ADDR_OWVAR 21
21817: PUSH
21818: LD_INT 0
21820: ST_TO_ADDR
// uc_side := 0 ;
21821: LD_ADDR_OWVAR 20
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21829: LD_ADDR_OWVAR 29
21833: PUSH
21834: LD_INT 12
21836: PUSH
21837: LD_INT 12
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: ST_TO_ADDR
// hc_agressivity := 20 ;
21844: LD_ADDR_OWVAR 35
21848: PUSH
21849: LD_INT 20
21851: ST_TO_ADDR
// hc_class := class_tiger ;
21852: LD_ADDR_OWVAR 28
21856: PUSH
21857: LD_INT 14
21859: ST_TO_ADDR
// hc_gallery :=  ;
21860: LD_ADDR_OWVAR 33
21864: PUSH
21865: LD_STRING 
21867: ST_TO_ADDR
// hc_name :=  ;
21868: LD_ADDR_OWVAR 26
21872: PUSH
21873: LD_STRING 
21875: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21876: CALL_OW 44
21880: PPUSH
21881: LD_INT 0
21883: PPUSH
21884: CALL_OW 51
// end ;
21888: GO 21810
21890: POP
21891: POP
// end ;
21892: PPOPN 1
21894: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21895: LD_EXP 59
21899: PUSH
21900: LD_EXP 79
21904: AND
21905: IFFALSE 21914
21907: GO 21909
21909: DISABLE
// StreamSibBomb ;
21910: CALL 21915 0 0
21914: END
// export function StreamSibBomb ; var i , x , y ; begin
21915: LD_INT 0
21917: PPUSH
21918: PPUSH
21919: PPUSH
21920: PPUSH
// result := false ;
21921: LD_ADDR_VAR 0 1
21925: PUSH
21926: LD_INT 0
21928: ST_TO_ADDR
// for i := 1 to 16 do
21929: LD_ADDR_VAR 0 2
21933: PUSH
21934: DOUBLE
21935: LD_INT 1
21937: DEC
21938: ST_TO_ADDR
21939: LD_INT 16
21941: PUSH
21942: FOR_TO
21943: IFFALSE 22142
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21945: LD_ADDR_VAR 0 3
21949: PUSH
21950: LD_INT 10
21952: PUSH
21953: LD_INT 20
21955: PUSH
21956: LD_INT 30
21958: PUSH
21959: LD_INT 40
21961: PUSH
21962: LD_INT 50
21964: PUSH
21965: LD_INT 60
21967: PUSH
21968: LD_INT 70
21970: PUSH
21971: LD_INT 80
21973: PUSH
21974: LD_INT 90
21976: PUSH
21977: LD_INT 100
21979: PUSH
21980: LD_INT 110
21982: PUSH
21983: LD_INT 120
21985: PUSH
21986: LD_INT 130
21988: PUSH
21989: LD_INT 140
21991: PUSH
21992: LD_INT 150
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PPUSH
22015: LD_INT 15
22017: PPUSH
22018: CALL_OW 12
22022: ARRAY
22023: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22024: LD_ADDR_VAR 0 4
22028: PUSH
22029: LD_INT 10
22031: PUSH
22032: LD_INT 20
22034: PUSH
22035: LD_INT 30
22037: PUSH
22038: LD_INT 40
22040: PUSH
22041: LD_INT 50
22043: PUSH
22044: LD_INT 60
22046: PUSH
22047: LD_INT 70
22049: PUSH
22050: LD_INT 80
22052: PUSH
22053: LD_INT 90
22055: PUSH
22056: LD_INT 100
22058: PUSH
22059: LD_INT 110
22061: PUSH
22062: LD_INT 120
22064: PUSH
22065: LD_INT 130
22067: PUSH
22068: LD_INT 140
22070: PUSH
22071: LD_INT 150
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 1
22093: PPUSH
22094: LD_INT 15
22096: PPUSH
22097: CALL_OW 12
22101: ARRAY
22102: ST_TO_ADDR
// if ValidHex ( x , y ) then
22103: LD_VAR 0 3
22107: PPUSH
22108: LD_VAR 0 4
22112: PPUSH
22113: CALL_OW 488
22117: IFFALSE 22140
// begin result := [ x , y ] ;
22119: LD_ADDR_VAR 0 1
22123: PUSH
22124: LD_VAR 0 3
22128: PUSH
22129: LD_VAR 0 4
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: ST_TO_ADDR
// break ;
22138: GO 22142
// end ; end ;
22140: GO 21942
22142: POP
22143: POP
// if result then
22144: LD_VAR 0 1
22148: IFFALSE 22208
// begin ToLua ( playSibBomb() ) ;
22150: LD_STRING playSibBomb()
22152: PPUSH
22153: CALL_OW 559
// wait ( 0 0$14 ) ;
22157: LD_INT 490
22159: PPUSH
22160: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22164: LD_VAR 0 1
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PPUSH
22173: LD_VAR 0 1
22177: PUSH
22178: LD_INT 2
22180: ARRAY
22181: PPUSH
22182: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22186: LD_VAR 0 1
22190: PUSH
22191: LD_INT 1
22193: ARRAY
22194: PPUSH
22195: LD_VAR 0 1
22199: PUSH
22200: LD_INT 2
22202: ARRAY
22203: PPUSH
22204: CALL_OW 429
// end ; end ;
22208: LD_VAR 0 1
22212: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22213: LD_EXP 59
22217: PUSH
22218: LD_EXP 81
22222: AND
22223: IFFALSE 22235
22225: GO 22227
22227: DISABLE
// YouLost (  ) ;
22228: LD_STRING 
22230: PPUSH
22231: CALL_OW 104
22235: END
// every 0 0$1 trigger StreamModeActive and sFog do
22236: LD_EXP 59
22240: PUSH
22241: LD_EXP 80
22245: AND
22246: IFFALSE 22260
22248: GO 22250
22250: DISABLE
// FogOff ( your_side ) ;
22251: LD_OWVAR 2
22255: PPUSH
22256: CALL_OW 344
22260: END
// every 0 0$1 trigger StreamModeActive and sSun do
22261: LD_EXP 59
22265: PUSH
22266: LD_EXP 82
22270: AND
22271: IFFALSE 22299
22273: GO 22275
22275: DISABLE
// begin solar_recharge_percent := 0 ;
22276: LD_ADDR_OWVAR 79
22280: PUSH
22281: LD_INT 0
22283: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22284: LD_INT 10500
22286: PPUSH
22287: CALL_OW 67
// solar_recharge_percent := 100 ;
22291: LD_ADDR_OWVAR 79
22295: PUSH
22296: LD_INT 100
22298: ST_TO_ADDR
// end ;
22299: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22300: LD_EXP 59
22304: PUSH
22305: LD_EXP 83
22309: AND
22310: IFFALSE 22549
22312: GO 22314
22314: DISABLE
22315: LD_INT 0
22317: PPUSH
22318: PPUSH
22319: PPUSH
// begin tmp := [ ] ;
22320: LD_ADDR_VAR 0 3
22324: PUSH
22325: EMPTY
22326: ST_TO_ADDR
// for i := 1 to 6 do
22327: LD_ADDR_VAR 0 1
22331: PUSH
22332: DOUBLE
22333: LD_INT 1
22335: DEC
22336: ST_TO_ADDR
22337: LD_INT 6
22339: PUSH
22340: FOR_TO
22341: IFFALSE 22446
// begin uc_nation := nation_nature ;
22343: LD_ADDR_OWVAR 21
22347: PUSH
22348: LD_INT 0
22350: ST_TO_ADDR
// uc_side := 0 ;
22351: LD_ADDR_OWVAR 20
22355: PUSH
22356: LD_INT 0
22358: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22359: LD_ADDR_OWVAR 29
22363: PUSH
22364: LD_INT 12
22366: PUSH
22367: LD_INT 12
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: ST_TO_ADDR
// hc_agressivity := 20 ;
22374: LD_ADDR_OWVAR 35
22378: PUSH
22379: LD_INT 20
22381: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22382: LD_ADDR_OWVAR 28
22386: PUSH
22387: LD_INT 17
22389: ST_TO_ADDR
// hc_gallery :=  ;
22390: LD_ADDR_OWVAR 33
22394: PUSH
22395: LD_STRING 
22397: ST_TO_ADDR
// hc_name :=  ;
22398: LD_ADDR_OWVAR 26
22402: PUSH
22403: LD_STRING 
22405: ST_TO_ADDR
// un := CreateHuman ;
22406: LD_ADDR_VAR 0 2
22410: PUSH
22411: CALL_OW 44
22415: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22416: LD_VAR 0 2
22420: PPUSH
22421: LD_INT 1
22423: PPUSH
22424: CALL_OW 51
// tmp := tmp ^ un ;
22428: LD_ADDR_VAR 0 3
22432: PUSH
22433: LD_VAR 0 3
22437: PUSH
22438: LD_VAR 0 2
22442: ADD
22443: ST_TO_ADDR
// end ;
22444: GO 22340
22446: POP
22447: POP
// repeat wait ( 0 0$1 ) ;
22448: LD_INT 35
22450: PPUSH
22451: CALL_OW 67
// for un in tmp do
22455: LD_ADDR_VAR 0 2
22459: PUSH
22460: LD_VAR 0 3
22464: PUSH
22465: FOR_IN
22466: IFFALSE 22540
// begin if IsDead ( un ) then
22468: LD_VAR 0 2
22472: PPUSH
22473: CALL_OW 301
22477: IFFALSE 22497
// begin tmp := tmp diff un ;
22479: LD_ADDR_VAR 0 3
22483: PUSH
22484: LD_VAR 0 3
22488: PUSH
22489: LD_VAR 0 2
22493: DIFF
22494: ST_TO_ADDR
// continue ;
22495: GO 22465
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22497: LD_VAR 0 2
22501: PPUSH
22502: LD_INT 3
22504: PUSH
22505: LD_INT 22
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PPUSH
22519: CALL_OW 69
22523: PPUSH
22524: LD_VAR 0 2
22528: PPUSH
22529: CALL_OW 74
22533: PPUSH
22534: CALL_OW 115
// end ;
22538: GO 22465
22540: POP
22541: POP
// until not tmp ;
22542: LD_VAR 0 3
22546: NOT
22547: IFFALSE 22448
// end ;
22549: PPOPN 3
22551: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22552: LD_EXP 59
22556: PUSH
22557: LD_EXP 84
22561: AND
22562: IFFALSE 22616
22564: GO 22566
22566: DISABLE
// begin ToLua ( displayTroll(); ) ;
22567: LD_STRING displayTroll();
22569: PPUSH
22570: CALL_OW 559
// wait ( 3 3$00 ) ;
22574: LD_INT 6300
22576: PPUSH
22577: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22581: LD_STRING hideTroll();
22583: PPUSH
22584: CALL_OW 559
// wait ( 1 1$00 ) ;
22588: LD_INT 2100
22590: PPUSH
22591: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22595: LD_STRING displayTroll();
22597: PPUSH
22598: CALL_OW 559
// wait ( 1 1$00 ) ;
22602: LD_INT 2100
22604: PPUSH
22605: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22609: LD_STRING hideTroll();
22611: PPUSH
22612: CALL_OW 559
// end ;
22616: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22617: LD_EXP 59
22621: PUSH
22622: LD_EXP 85
22626: AND
22627: IFFALSE 22690
22629: GO 22631
22631: DISABLE
22632: LD_INT 0
22634: PPUSH
// begin p := 0 ;
22635: LD_ADDR_VAR 0 1
22639: PUSH
22640: LD_INT 0
22642: ST_TO_ADDR
// repeat game_speed := 1 ;
22643: LD_ADDR_OWVAR 65
22647: PUSH
22648: LD_INT 1
22650: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22651: LD_INT 35
22653: PPUSH
22654: CALL_OW 67
// p := p + 1 ;
22658: LD_ADDR_VAR 0 1
22662: PUSH
22663: LD_VAR 0 1
22667: PUSH
22668: LD_INT 1
22670: PLUS
22671: ST_TO_ADDR
// until p >= 60 ;
22672: LD_VAR 0 1
22676: PUSH
22677: LD_INT 60
22679: GREATEREQUAL
22680: IFFALSE 22643
// game_speed := 4 ;
22682: LD_ADDR_OWVAR 65
22686: PUSH
22687: LD_INT 4
22689: ST_TO_ADDR
// end ;
22690: PPOPN 1
22692: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22693: LD_EXP 59
22697: PUSH
22698: LD_EXP 86
22702: AND
22703: IFFALSE 22849
22705: GO 22707
22707: DISABLE
22708: LD_INT 0
22710: PPUSH
22711: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22712: LD_ADDR_VAR 0 1
22716: PUSH
22717: LD_INT 22
22719: PUSH
22720: LD_OWVAR 2
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 30
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 30
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PPUSH
22761: CALL_OW 69
22765: ST_TO_ADDR
// if not depot then
22766: LD_VAR 0 1
22770: NOT
22771: IFFALSE 22775
// exit ;
22773: GO 22849
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22775: LD_ADDR_VAR 0 2
22779: PUSH
22780: LD_VAR 0 1
22784: PUSH
22785: LD_INT 1
22787: PPUSH
22788: LD_VAR 0 1
22792: PPUSH
22793: CALL_OW 12
22797: ARRAY
22798: PPUSH
22799: CALL_OW 274
22803: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22804: LD_VAR 0 2
22808: PPUSH
22809: LD_INT 1
22811: PPUSH
22812: LD_INT 0
22814: PPUSH
22815: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22819: LD_VAR 0 2
22823: PPUSH
22824: LD_INT 2
22826: PPUSH
22827: LD_INT 0
22829: PPUSH
22830: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22834: LD_VAR 0 2
22838: PPUSH
22839: LD_INT 3
22841: PPUSH
22842: LD_INT 0
22844: PPUSH
22845: CALL_OW 277
// end ;
22849: PPOPN 2
22851: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22852: LD_EXP 59
22856: PUSH
22857: LD_EXP 87
22861: AND
22862: IFFALSE 22959
22864: GO 22866
22866: DISABLE
22867: LD_INT 0
22869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22870: LD_ADDR_VAR 0 1
22874: PUSH
22875: LD_INT 22
22877: PUSH
22878: LD_OWVAR 2
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 21
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 3
22899: PUSH
22900: LD_INT 23
22902: PUSH
22903: LD_INT 0
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 69
22923: ST_TO_ADDR
// if not tmp then
22924: LD_VAR 0 1
22928: NOT
22929: IFFALSE 22933
// exit ;
22931: GO 22959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22933: LD_VAR 0 1
22937: PUSH
22938: LD_INT 1
22940: PPUSH
22941: LD_VAR 0 1
22945: PPUSH
22946: CALL_OW 12
22950: ARRAY
22951: PPUSH
22952: LD_INT 200
22954: PPUSH
22955: CALL_OW 234
// end ;
22959: PPOPN 1
22961: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22962: LD_EXP 59
22966: PUSH
22967: LD_EXP 88
22971: AND
22972: IFFALSE 23051
22974: GO 22976
22976: DISABLE
22977: LD_INT 0
22979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22980: LD_ADDR_VAR 0 1
22984: PUSH
22985: LD_INT 22
22987: PUSH
22988: LD_OWVAR 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 21
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 69
23015: ST_TO_ADDR
// if not tmp then
23016: LD_VAR 0 1
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23051
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23025: LD_VAR 0 1
23029: PUSH
23030: LD_INT 1
23032: PPUSH
23033: LD_VAR 0 1
23037: PPUSH
23038: CALL_OW 12
23042: ARRAY
23043: PPUSH
23044: LD_INT 60
23046: PPUSH
23047: CALL_OW 234
// end ;
23051: PPOPN 1
23053: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23054: LD_EXP 59
23058: PUSH
23059: LD_EXP 89
23063: AND
23064: IFFALSE 23163
23066: GO 23068
23068: DISABLE
23069: LD_INT 0
23071: PPUSH
23072: PPUSH
// begin enable ;
23073: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23074: LD_ADDR_VAR 0 1
23078: PUSH
23079: LD_INT 22
23081: PUSH
23082: LD_OWVAR 2
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 61
23093: PUSH
23094: EMPTY
23095: LIST
23096: PUSH
23097: LD_INT 33
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: PPUSH
23112: CALL_OW 69
23116: ST_TO_ADDR
// if not tmp then
23117: LD_VAR 0 1
23121: NOT
23122: IFFALSE 23126
// exit ;
23124: GO 23163
// for i in tmp do
23126: LD_ADDR_VAR 0 2
23130: PUSH
23131: LD_VAR 0 1
23135: PUSH
23136: FOR_IN
23137: IFFALSE 23161
// if IsControledBy ( i ) then
23139: LD_VAR 0 2
23143: PPUSH
23144: CALL_OW 312
23148: IFFALSE 23159
// ComUnlink ( i ) ;
23150: LD_VAR 0 2
23154: PPUSH
23155: CALL_OW 136
23159: GO 23136
23161: POP
23162: POP
// end ;
23163: PPOPN 2
23165: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23166: LD_EXP 59
23170: PUSH
23171: LD_EXP 90
23175: AND
23176: IFFALSE 23316
23178: GO 23180
23180: DISABLE
23181: LD_INT 0
23183: PPUSH
23184: PPUSH
// begin ToLua ( displayPowell(); ) ;
23185: LD_STRING displayPowell();
23187: PPUSH
23188: CALL_OW 559
// uc_side := 0 ;
23192: LD_ADDR_OWVAR 20
23196: PUSH
23197: LD_INT 0
23199: ST_TO_ADDR
// uc_nation := 2 ;
23200: LD_ADDR_OWVAR 21
23204: PUSH
23205: LD_INT 2
23207: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23208: LD_ADDR_OWVAR 37
23212: PUSH
23213: LD_INT 14
23215: ST_TO_ADDR
// vc_engine := engine_siberite ;
23216: LD_ADDR_OWVAR 39
23220: PUSH
23221: LD_INT 3
23223: ST_TO_ADDR
// vc_control := control_apeman ;
23224: LD_ADDR_OWVAR 38
23228: PUSH
23229: LD_INT 5
23231: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23232: LD_ADDR_OWVAR 40
23236: PUSH
23237: LD_INT 29
23239: ST_TO_ADDR
// un := CreateVehicle ;
23240: LD_ADDR_VAR 0 2
23244: PUSH
23245: CALL_OW 45
23249: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23250: LD_VAR 0 2
23254: PPUSH
23255: LD_INT 1
23257: PPUSH
23258: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23262: LD_INT 35
23264: PPUSH
23265: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23269: LD_VAR 0 2
23273: PPUSH
23274: LD_INT 22
23276: PUSH
23277: LD_OWVAR 2
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PPUSH
23286: CALL_OW 69
23290: PPUSH
23291: LD_VAR 0 2
23295: PPUSH
23296: CALL_OW 74
23300: PPUSH
23301: CALL_OW 115
// until IsDead ( un ) ;
23305: LD_VAR 0 2
23309: PPUSH
23310: CALL_OW 301
23314: IFFALSE 23262
// end ;
23316: PPOPN 2
23318: END
// every 0 0$1 trigger StreamModeActive and sStu do
23319: LD_EXP 59
23323: PUSH
23324: LD_EXP 98
23328: AND
23329: IFFALSE 23345
23331: GO 23333
23333: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23334: LD_STRING displayStucuk();
23336: PPUSH
23337: CALL_OW 559
// ResetFog ;
23341: CALL_OW 335
// end ;
23345: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23346: LD_EXP 59
23350: PUSH
23351: LD_EXP 91
23355: AND
23356: IFFALSE 23497
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23365: LD_ADDR_VAR 0 2
23369: PUSH
23370: LD_INT 22
23372: PUSH
23373: LD_OWVAR 2
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 21
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PPUSH
23396: CALL_OW 69
23400: ST_TO_ADDR
// if not tmp then
23401: LD_VAR 0 2
23405: NOT
23406: IFFALSE 23410
// exit ;
23408: GO 23497
// un := tmp [ rand ( 1 , tmp ) ] ;
23410: LD_ADDR_VAR 0 1
23414: PUSH
23415: LD_VAR 0 2
23419: PUSH
23420: LD_INT 1
23422: PPUSH
23423: LD_VAR 0 2
23427: PPUSH
23428: CALL_OW 12
23432: ARRAY
23433: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23434: LD_VAR 0 1
23438: PPUSH
23439: LD_INT 0
23441: PPUSH
23442: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23446: LD_VAR 0 1
23450: PPUSH
23451: LD_OWVAR 3
23455: PUSH
23456: LD_VAR 0 1
23460: DIFF
23461: PPUSH
23462: LD_VAR 0 1
23466: PPUSH
23467: CALL_OW 74
23471: PPUSH
23472: CALL_OW 115
// wait ( 0 0$20 ) ;
23476: LD_INT 700
23478: PPUSH
23479: CALL_OW 67
// SetSide ( un , your_side ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: LD_OWVAR 2
23492: PPUSH
23493: CALL_OW 235
// end ;
23497: PPOPN 2
23499: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23500: LD_EXP 59
23504: PUSH
23505: LD_EXP 92
23509: AND
23510: IFFALSE 23616
23512: GO 23514
23514: DISABLE
23515: LD_INT 0
23517: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23518: LD_ADDR_VAR 0 1
23522: PUSH
23523: LD_INT 22
23525: PUSH
23526: LD_OWVAR 2
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 2
23537: PUSH
23538: LD_INT 30
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 30
23550: PUSH
23551: LD_INT 1
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PPUSH
23567: CALL_OW 69
23571: ST_TO_ADDR
// if not depot then
23572: LD_VAR 0 1
23576: NOT
23577: IFFALSE 23581
// exit ;
23579: GO 23616
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23581: LD_VAR 0 1
23585: PUSH
23586: LD_INT 1
23588: ARRAY
23589: PPUSH
23590: CALL_OW 250
23594: PPUSH
23595: LD_VAR 0 1
23599: PUSH
23600: LD_INT 1
23602: ARRAY
23603: PPUSH
23604: CALL_OW 251
23608: PPUSH
23609: LD_INT 70
23611: PPUSH
23612: CALL_OW 495
// end ;
23616: PPOPN 1
23618: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23619: LD_EXP 59
23623: PUSH
23624: LD_EXP 93
23628: AND
23629: IFFALSE 23840
23631: GO 23633
23633: DISABLE
23634: LD_INT 0
23636: PPUSH
23637: PPUSH
23638: PPUSH
23639: PPUSH
23640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23641: LD_ADDR_VAR 0 5
23645: PUSH
23646: LD_INT 22
23648: PUSH
23649: LD_OWVAR 2
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 21
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PPUSH
23672: CALL_OW 69
23676: ST_TO_ADDR
// if not tmp then
23677: LD_VAR 0 5
23681: NOT
23682: IFFALSE 23686
// exit ;
23684: GO 23840
// for i in tmp do
23686: LD_ADDR_VAR 0 1
23690: PUSH
23691: LD_VAR 0 5
23695: PUSH
23696: FOR_IN
23697: IFFALSE 23838
// begin d := rand ( 0 , 5 ) ;
23699: LD_ADDR_VAR 0 4
23703: PUSH
23704: LD_INT 0
23706: PPUSH
23707: LD_INT 5
23709: PPUSH
23710: CALL_OW 12
23714: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23715: LD_ADDR_VAR 0 2
23719: PUSH
23720: LD_VAR 0 1
23724: PPUSH
23725: CALL_OW 250
23729: PPUSH
23730: LD_VAR 0 4
23734: PPUSH
23735: LD_INT 3
23737: PPUSH
23738: LD_INT 12
23740: PPUSH
23741: CALL_OW 12
23745: PPUSH
23746: CALL_OW 272
23750: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23751: LD_ADDR_VAR 0 3
23755: PUSH
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 251
23765: PPUSH
23766: LD_VAR 0 4
23770: PPUSH
23771: LD_INT 3
23773: PPUSH
23774: LD_INT 12
23776: PPUSH
23777: CALL_OW 12
23781: PPUSH
23782: CALL_OW 273
23786: ST_TO_ADDR
// if ValidHex ( x , y ) then
23787: LD_VAR 0 2
23791: PPUSH
23792: LD_VAR 0 3
23796: PPUSH
23797: CALL_OW 488
23801: IFFALSE 23836
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23803: LD_VAR 0 1
23807: PPUSH
23808: LD_VAR 0 2
23812: PPUSH
23813: LD_VAR 0 3
23817: PPUSH
23818: LD_INT 3
23820: PPUSH
23821: LD_INT 6
23823: PPUSH
23824: CALL_OW 12
23828: PPUSH
23829: LD_INT 1
23831: PPUSH
23832: CALL_OW 483
// end ;
23836: GO 23696
23838: POP
23839: POP
// end ;
23840: PPOPN 5
23842: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23843: LD_EXP 59
23847: PUSH
23848: LD_EXP 94
23852: AND
23853: IFFALSE 23947
23855: GO 23857
23857: DISABLE
23858: LD_INT 0
23860: PPUSH
23861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23862: LD_ADDR_VAR 0 2
23866: PUSH
23867: LD_INT 22
23869: PUSH
23870: LD_OWVAR 2
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 32
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 21
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 69
23908: ST_TO_ADDR
// if not tmp then
23909: LD_VAR 0 2
23913: NOT
23914: IFFALSE 23918
// exit ;
23916: GO 23947
// for i in tmp do
23918: LD_ADDR_VAR 0 1
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: FOR_IN
23929: IFFALSE 23945
// SetFuel ( i , 0 ) ;
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_INT 0
23938: PPUSH
23939: CALL_OW 240
23943: GO 23928
23945: POP
23946: POP
// end ;
23947: PPOPN 2
23949: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23950: LD_EXP 59
23954: PUSH
23955: LD_EXP 95
23959: AND
23960: IFFALSE 24026
23962: GO 23964
23964: DISABLE
23965: LD_INT 0
23967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23968: LD_ADDR_VAR 0 1
23972: PUSH
23973: LD_INT 22
23975: PUSH
23976: LD_OWVAR 2
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 30
23987: PUSH
23988: LD_INT 29
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PPUSH
23999: CALL_OW 69
24003: ST_TO_ADDR
// if not tmp then
24004: LD_VAR 0 1
24008: NOT
24009: IFFALSE 24013
// exit ;
24011: GO 24026
// DestroyUnit ( tmp [ 1 ] ) ;
24013: LD_VAR 0 1
24017: PUSH
24018: LD_INT 1
24020: ARRAY
24021: PPUSH
24022: CALL_OW 65
// end ;
24026: PPOPN 1
24028: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24029: LD_EXP 59
24033: PUSH
24034: LD_EXP 97
24038: AND
24039: IFFALSE 24168
24041: GO 24043
24043: DISABLE
24044: LD_INT 0
24046: PPUSH
// begin uc_side := 0 ;
24047: LD_ADDR_OWVAR 20
24051: PUSH
24052: LD_INT 0
24054: ST_TO_ADDR
// uc_nation := nation_arabian ;
24055: LD_ADDR_OWVAR 21
24059: PUSH
24060: LD_INT 2
24062: ST_TO_ADDR
// hc_gallery :=  ;
24063: LD_ADDR_OWVAR 33
24067: PUSH
24068: LD_STRING 
24070: ST_TO_ADDR
// hc_name :=  ;
24071: LD_ADDR_OWVAR 26
24075: PUSH
24076: LD_STRING 
24078: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24079: LD_INT 1
24081: PPUSH
24082: LD_INT 11
24084: PPUSH
24085: LD_INT 10
24087: PPUSH
24088: CALL_OW 380
// un := CreateHuman ;
24092: LD_ADDR_VAR 0 1
24096: PUSH
24097: CALL_OW 44
24101: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24102: LD_VAR 0 1
24106: PPUSH
24107: LD_INT 1
24109: PPUSH
24110: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24114: LD_INT 35
24116: PPUSH
24117: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24121: LD_VAR 0 1
24125: PPUSH
24126: LD_INT 22
24128: PUSH
24129: LD_OWVAR 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PPUSH
24138: CALL_OW 69
24142: PPUSH
24143: LD_VAR 0 1
24147: PPUSH
24148: CALL_OW 74
24152: PPUSH
24153: CALL_OW 115
// until IsDead ( un ) ;
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 301
24166: IFFALSE 24114
// end ;
24168: PPOPN 1
24170: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24171: LD_EXP 59
24175: PUSH
24176: LD_EXP 99
24180: AND
24181: IFFALSE 24193
24183: GO 24185
24185: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24186: LD_STRING earthquake(getX(game), 0, 32)
24188: PPUSH
24189: CALL_OW 559
24193: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24194: LD_EXP 59
24198: PUSH
24199: LD_EXP 100
24203: AND
24204: IFFALSE 24295
24206: GO 24208
24208: DISABLE
24209: LD_INT 0
24211: PPUSH
// begin enable ;
24212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24213: LD_ADDR_VAR 0 1
24217: PUSH
24218: LD_INT 22
24220: PUSH
24221: LD_OWVAR 2
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 21
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 33
24242: PUSH
24243: LD_INT 3
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: PPUSH
24255: CALL_OW 69
24259: ST_TO_ADDR
// if not tmp then
24260: LD_VAR 0 1
24264: NOT
24265: IFFALSE 24269
// exit ;
24267: GO 24295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24269: LD_VAR 0 1
24273: PUSH
24274: LD_INT 1
24276: PPUSH
24277: LD_VAR 0 1
24281: PPUSH
24282: CALL_OW 12
24286: ARRAY
24287: PPUSH
24288: LD_INT 1
24290: PPUSH
24291: CALL_OW 234
// end ;
24295: PPOPN 1
24297: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24298: LD_EXP 59
24302: PUSH
24303: LD_EXP 101
24307: AND
24308: IFFALSE 24449
24310: GO 24312
24312: DISABLE
24313: LD_INT 0
24315: PPUSH
24316: PPUSH
24317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24318: LD_ADDR_VAR 0 3
24322: PUSH
24323: LD_INT 22
24325: PUSH
24326: LD_OWVAR 2
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 25
24337: PUSH
24338: LD_INT 1
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PPUSH
24349: CALL_OW 69
24353: ST_TO_ADDR
// if not tmp then
24354: LD_VAR 0 3
24358: NOT
24359: IFFALSE 24363
// exit ;
24361: GO 24449
// un := tmp [ rand ( 1 , tmp ) ] ;
24363: LD_ADDR_VAR 0 2
24367: PUSH
24368: LD_VAR 0 3
24372: PUSH
24373: LD_INT 1
24375: PPUSH
24376: LD_VAR 0 3
24380: PPUSH
24381: CALL_OW 12
24385: ARRAY
24386: ST_TO_ADDR
// if Crawls ( un ) then
24387: LD_VAR 0 2
24391: PPUSH
24392: CALL_OW 318
24396: IFFALSE 24407
// ComWalk ( un ) ;
24398: LD_VAR 0 2
24402: PPUSH
24403: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24407: LD_VAR 0 2
24411: PPUSH
24412: LD_INT 9
24414: PPUSH
24415: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24419: LD_INT 28
24421: PPUSH
24422: LD_OWVAR 2
24426: PPUSH
24427: LD_INT 2
24429: PPUSH
24430: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24434: LD_INT 29
24436: PPUSH
24437: LD_OWVAR 2
24441: PPUSH
24442: LD_INT 2
24444: PPUSH
24445: CALL_OW 322
// end ;
24449: PPOPN 3
24451: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24452: LD_EXP 59
24456: PUSH
24457: LD_EXP 102
24461: AND
24462: IFFALSE 24573
24464: GO 24466
24466: DISABLE
24467: LD_INT 0
24469: PPUSH
24470: PPUSH
24471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24472: LD_ADDR_VAR 0 3
24476: PUSH
24477: LD_INT 22
24479: PUSH
24480: LD_OWVAR 2
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 25
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PPUSH
24503: CALL_OW 69
24507: ST_TO_ADDR
// if not tmp then
24508: LD_VAR 0 3
24512: NOT
24513: IFFALSE 24517
// exit ;
24515: GO 24573
// un := tmp [ rand ( 1 , tmp ) ] ;
24517: LD_ADDR_VAR 0 2
24521: PUSH
24522: LD_VAR 0 3
24526: PUSH
24527: LD_INT 1
24529: PPUSH
24530: LD_VAR 0 3
24534: PPUSH
24535: CALL_OW 12
24539: ARRAY
24540: ST_TO_ADDR
// if Crawls ( un ) then
24541: LD_VAR 0 2
24545: PPUSH
24546: CALL_OW 318
24550: IFFALSE 24561
// ComWalk ( un ) ;
24552: LD_VAR 0 2
24556: PPUSH
24557: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_INT 8
24568: PPUSH
24569: CALL_OW 336
// end ;
24573: PPOPN 3
24575: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24576: LD_EXP 59
24580: PUSH
24581: LD_EXP 103
24585: AND
24586: IFFALSE 24730
24588: GO 24590
24590: DISABLE
24591: LD_INT 0
24593: PPUSH
24594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: LD_INT 22
24602: PUSH
24603: LD_OWVAR 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 21
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: LD_INT 34
24627: PUSH
24628: LD_INT 12
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 34
24637: PUSH
24638: LD_INT 51
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 34
24647: PUSH
24648: LD_INT 32
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: PPUSH
24666: CALL_OW 69
24670: ST_TO_ADDR
// if not tmp then
24671: LD_VAR 0 2
24675: NOT
24676: IFFALSE 24680
// exit ;
24678: GO 24730
// for i in tmp do
24680: LD_ADDR_VAR 0 1
24684: PUSH
24685: LD_VAR 0 2
24689: PUSH
24690: FOR_IN
24691: IFFALSE 24728
// if GetCargo ( i , mat_artifact ) = 0 then
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_INT 4
24700: PPUSH
24701: CALL_OW 289
24705: PUSH
24706: LD_INT 0
24708: EQUAL
24709: IFFALSE 24726
// SetCargo ( i , mat_siberit , 100 ) ;
24711: LD_VAR 0 1
24715: PPUSH
24716: LD_INT 3
24718: PPUSH
24719: LD_INT 100
24721: PPUSH
24722: CALL_OW 290
24726: GO 24690
24728: POP
24729: POP
// end ;
24730: PPOPN 2
24732: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24733: LD_EXP 59
24737: PUSH
24738: LD_EXP 104
24742: AND
24743: IFFALSE 24896
24745: GO 24747
24747: DISABLE
24748: LD_INT 0
24750: PPUSH
24751: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24752: LD_ADDR_VAR 0 2
24756: PUSH
24757: LD_INT 22
24759: PUSH
24760: LD_OWVAR 2
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PPUSH
24769: CALL_OW 69
24773: ST_TO_ADDR
// if not tmp then
24774: LD_VAR 0 2
24778: NOT
24779: IFFALSE 24783
// exit ;
24781: GO 24896
// for i := 1 to 2 do
24783: LD_ADDR_VAR 0 1
24787: PUSH
24788: DOUBLE
24789: LD_INT 1
24791: DEC
24792: ST_TO_ADDR
24793: LD_INT 2
24795: PUSH
24796: FOR_TO
24797: IFFALSE 24894
// begin uc_side := your_side ;
24799: LD_ADDR_OWVAR 20
24803: PUSH
24804: LD_OWVAR 2
24808: ST_TO_ADDR
// uc_nation := nation_american ;
24809: LD_ADDR_OWVAR 21
24813: PUSH
24814: LD_INT 1
24816: ST_TO_ADDR
// vc_chassis := us_morphling ;
24817: LD_ADDR_OWVAR 37
24821: PUSH
24822: LD_INT 5
24824: ST_TO_ADDR
// vc_engine := engine_siberite ;
24825: LD_ADDR_OWVAR 39
24829: PUSH
24830: LD_INT 3
24832: ST_TO_ADDR
// vc_control := control_computer ;
24833: LD_ADDR_OWVAR 38
24837: PUSH
24838: LD_INT 3
24840: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24841: LD_ADDR_OWVAR 40
24845: PUSH
24846: LD_INT 10
24848: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
24849: CALL_OW 45
24853: PPUSH
24854: LD_VAR 0 2
24858: PUSH
24859: LD_INT 1
24861: ARRAY
24862: PPUSH
24863: CALL_OW 250
24867: PPUSH
24868: LD_VAR 0 2
24872: PUSH
24873: LD_INT 1
24875: ARRAY
24876: PPUSH
24877: CALL_OW 251
24881: PPUSH
24882: LD_INT 12
24884: PPUSH
24885: LD_INT 1
24887: PPUSH
24888: CALL_OW 50
// end ;
24892: GO 24796
24894: POP
24895: POP
// end ;
24896: PPOPN 2
24898: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24899: LD_EXP 59
24903: PUSH
24904: LD_EXP 105
24908: AND
24909: IFFALSE 25131
24911: GO 24913
24913: DISABLE
24914: LD_INT 0
24916: PPUSH
24917: PPUSH
24918: PPUSH
24919: PPUSH
24920: PPUSH
24921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24922: LD_ADDR_VAR 0 6
24926: PUSH
24927: LD_INT 22
24929: PUSH
24930: LD_OWVAR 2
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 21
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 3
24951: PUSH
24952: LD_INT 23
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: PPUSH
24971: CALL_OW 69
24975: ST_TO_ADDR
// if not tmp then
24976: LD_VAR 0 6
24980: NOT
24981: IFFALSE 24985
// exit ;
24983: GO 25131
// s1 := rand ( 1 , 4 ) ;
24985: LD_ADDR_VAR 0 2
24989: PUSH
24990: LD_INT 1
24992: PPUSH
24993: LD_INT 4
24995: PPUSH
24996: CALL_OW 12
25000: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25001: LD_ADDR_VAR 0 4
25005: PUSH
25006: LD_VAR 0 6
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: PPUSH
25015: LD_VAR 0 2
25019: PPUSH
25020: CALL_OW 259
25024: ST_TO_ADDR
// if s1 = 1 then
25025: LD_VAR 0 2
25029: PUSH
25030: LD_INT 1
25032: EQUAL
25033: IFFALSE 25053
// s2 := rand ( 2 , 4 ) else
25035: LD_ADDR_VAR 0 3
25039: PUSH
25040: LD_INT 2
25042: PPUSH
25043: LD_INT 4
25045: PPUSH
25046: CALL_OW 12
25050: ST_TO_ADDR
25051: GO 25061
// s2 := 1 ;
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: LD_INT 1
25060: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25061: LD_ADDR_VAR 0 5
25065: PUSH
25066: LD_VAR 0 6
25070: PUSH
25071: LD_INT 1
25073: ARRAY
25074: PPUSH
25075: LD_VAR 0 3
25079: PPUSH
25080: CALL_OW 259
25084: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25085: LD_VAR 0 6
25089: PUSH
25090: LD_INT 1
25092: ARRAY
25093: PPUSH
25094: LD_VAR 0 2
25098: PPUSH
25099: LD_VAR 0 5
25103: PPUSH
25104: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25108: LD_VAR 0 6
25112: PUSH
25113: LD_INT 1
25115: ARRAY
25116: PPUSH
25117: LD_VAR 0 3
25121: PPUSH
25122: LD_VAR 0 4
25126: PPUSH
25127: CALL_OW 237
// end ;
25131: PPOPN 6
25133: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25134: LD_EXP 59
25138: PUSH
25139: LD_EXP 106
25143: AND
25144: IFFALSE 25223
25146: GO 25148
25148: DISABLE
25149: LD_INT 0
25151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25152: LD_ADDR_VAR 0 1
25156: PUSH
25157: LD_INT 22
25159: PUSH
25160: LD_OWVAR 2
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 30
25171: PUSH
25172: LD_INT 3
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PPUSH
25183: CALL_OW 69
25187: ST_TO_ADDR
// if not tmp then
25188: LD_VAR 0 1
25192: NOT
25193: IFFALSE 25197
// exit ;
25195: GO 25223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25197: LD_VAR 0 1
25201: PUSH
25202: LD_INT 1
25204: PPUSH
25205: LD_VAR 0 1
25209: PPUSH
25210: CALL_OW 12
25214: ARRAY
25215: PPUSH
25216: LD_INT 1
25218: PPUSH
25219: CALL_OW 234
// end ;
25223: PPOPN 1
25225: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25226: LD_EXP 59
25230: PUSH
25231: LD_EXP 107
25235: AND
25236: IFFALSE 25348
25238: GO 25240
25240: DISABLE
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25245: LD_ADDR_VAR 0 2
25249: PUSH
25250: LD_INT 22
25252: PUSH
25253: LD_OWVAR 2
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 2
25264: PUSH
25265: LD_INT 30
25267: PUSH
25268: LD_INT 27
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 30
25277: PUSH
25278: LD_INT 26
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 30
25287: PUSH
25288: LD_INT 28
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PPUSH
25305: CALL_OW 69
25309: ST_TO_ADDR
// if not tmp then
25310: LD_VAR 0 2
25314: NOT
25315: IFFALSE 25319
// exit ;
25317: GO 25348
// for i in tmp do
25319: LD_ADDR_VAR 0 1
25323: PUSH
25324: LD_VAR 0 2
25328: PUSH
25329: FOR_IN
25330: IFFALSE 25346
// SetLives ( i , 1 ) ;
25332: LD_VAR 0 1
25336: PPUSH
25337: LD_INT 1
25339: PPUSH
25340: CALL_OW 234
25344: GO 25329
25346: POP
25347: POP
// end ;
25348: PPOPN 2
25350: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25351: LD_EXP 59
25355: PUSH
25356: LD_EXP 108
25360: AND
25361: IFFALSE 25635
25363: GO 25365
25365: DISABLE
25366: LD_INT 0
25368: PPUSH
25369: PPUSH
25370: PPUSH
// begin i := rand ( 1 , 7 ) ;
25371: LD_ADDR_VAR 0 1
25375: PUSH
25376: LD_INT 1
25378: PPUSH
25379: LD_INT 7
25381: PPUSH
25382: CALL_OW 12
25386: ST_TO_ADDR
// case i of 1 :
25387: LD_VAR 0 1
25391: PUSH
25392: LD_INT 1
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25410
25400: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25401: LD_STRING earthquake(getX(game), 0, 32)
25403: PPUSH
25404: CALL_OW 559
25408: GO 25635
25410: LD_INT 2
25412: DOUBLE
25413: EQUAL
25414: IFTRUE 25418
25416: GO 25432
25418: POP
// begin ToLua ( displayStucuk(); ) ;
25419: LD_STRING displayStucuk();
25421: PPUSH
25422: CALL_OW 559
// ResetFog ;
25426: CALL_OW 335
// end ; 3 :
25430: GO 25635
25432: LD_INT 3
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25544
25440: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25441: LD_ADDR_VAR 0 2
25445: PUSH
25446: LD_INT 22
25448: PUSH
25449: LD_OWVAR 2
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 25
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PPUSH
25472: CALL_OW 69
25476: ST_TO_ADDR
// if not tmp then
25477: LD_VAR 0 2
25481: NOT
25482: IFFALSE 25486
// exit ;
25484: GO 25635
// un := tmp [ rand ( 1 , tmp ) ] ;
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_VAR 0 2
25495: PUSH
25496: LD_INT 1
25498: PPUSH
25499: LD_VAR 0 2
25503: PPUSH
25504: CALL_OW 12
25508: ARRAY
25509: ST_TO_ADDR
// if Crawls ( un ) then
25510: LD_VAR 0 3
25514: PPUSH
25515: CALL_OW 318
25519: IFFALSE 25530
// ComWalk ( un ) ;
25521: LD_VAR 0 3
25525: PPUSH
25526: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25530: LD_VAR 0 3
25534: PPUSH
25535: LD_INT 8
25537: PPUSH
25538: CALL_OW 336
// end ; 4 :
25542: GO 25635
25544: LD_INT 4
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25613
25552: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25553: LD_ADDR_VAR 0 2
25557: PUSH
25558: LD_INT 22
25560: PUSH
25561: LD_OWVAR 2
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 30
25572: PUSH
25573: LD_INT 29
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PPUSH
25584: CALL_OW 69
25588: ST_TO_ADDR
// if not tmp then
25589: LD_VAR 0 2
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25635
// DestroyUnit ( tmp [ 1 ] ) ;
25598: LD_VAR 0 2
25602: PUSH
25603: LD_INT 1
25605: ARRAY
25606: PPUSH
25607: CALL_OW 65
// end ; 5 .. 7 :
25611: GO 25635
25613: LD_INT 5
25615: DOUBLE
25616: GREATEREQUAL
25617: IFFALSE 25625
25619: LD_INT 7
25621: DOUBLE
25622: LESSEQUAL
25623: IFTRUE 25627
25625: GO 25634
25627: POP
// StreamSibBomb ; end ;
25628: CALL 21915 0 0
25632: GO 25635
25634: POP
// end ;
25635: PPOPN 3
25637: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25638: LD_EXP 59
25642: PUSH
25643: LD_EXP 109
25647: AND
25648: IFFALSE 25804
25650: GO 25652
25652: DISABLE
25653: LD_INT 0
25655: PPUSH
25656: PPUSH
25657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25658: LD_ADDR_VAR 0 2
25662: PUSH
25663: LD_INT 81
25665: PUSH
25666: LD_OWVAR 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 2
25677: PUSH
25678: LD_INT 21
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 21
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PPUSH
25707: CALL_OW 69
25711: ST_TO_ADDR
// if not tmp then
25712: LD_VAR 0 2
25716: NOT
25717: IFFALSE 25721
// exit ;
25719: GO 25804
// p := 0 ;
25721: LD_ADDR_VAR 0 3
25725: PUSH
25726: LD_INT 0
25728: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25729: LD_INT 35
25731: PPUSH
25732: CALL_OW 67
// p := p + 1 ;
25736: LD_ADDR_VAR 0 3
25740: PUSH
25741: LD_VAR 0 3
25745: PUSH
25746: LD_INT 1
25748: PLUS
25749: ST_TO_ADDR
// for i in tmp do
25750: LD_ADDR_VAR 0 1
25754: PUSH
25755: LD_VAR 0 2
25759: PUSH
25760: FOR_IN
25761: IFFALSE 25792
// if GetLives ( i ) < 1000 then
25763: LD_VAR 0 1
25767: PPUSH
25768: CALL_OW 256
25772: PUSH
25773: LD_INT 1000
25775: LESS
25776: IFFALSE 25790
// SetLives ( i , 1000 ) ;
25778: LD_VAR 0 1
25782: PPUSH
25783: LD_INT 1000
25785: PPUSH
25786: CALL_OW 234
25790: GO 25760
25792: POP
25793: POP
// until p > 20 ;
25794: LD_VAR 0 3
25798: PUSH
25799: LD_INT 20
25801: GREATER
25802: IFFALSE 25729
// end ;
25804: PPOPN 3
25806: END
// every 0 0$1 trigger StreamModeActive and sTime do
25807: LD_EXP 59
25811: PUSH
25812: LD_EXP 110
25816: AND
25817: IFFALSE 25852
25819: GO 25821
25821: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25822: LD_INT 28
25824: PPUSH
25825: LD_OWVAR 2
25829: PPUSH
25830: LD_INT 2
25832: PPUSH
25833: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25837: LD_INT 30
25839: PPUSH
25840: LD_OWVAR 2
25844: PPUSH
25845: LD_INT 2
25847: PPUSH
25848: CALL_OW 322
// end ;
25852: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25853: LD_EXP 59
25857: PUSH
25858: LD_EXP 111
25862: AND
25863: IFFALSE 25984
25865: GO 25867
25867: DISABLE
25868: LD_INT 0
25870: PPUSH
25871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25872: LD_ADDR_VAR 0 2
25876: PUSH
25877: LD_INT 22
25879: PUSH
25880: LD_OWVAR 2
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 3
25901: PUSH
25902: LD_INT 23
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL_OW 69
25925: ST_TO_ADDR
// if not tmp then
25926: LD_VAR 0 2
25930: NOT
25931: IFFALSE 25935
// exit ;
25933: GO 25984
// for i in tmp do
25935: LD_ADDR_VAR 0 1
25939: PUSH
25940: LD_VAR 0 2
25944: PUSH
25945: FOR_IN
25946: IFFALSE 25982
// begin if Crawls ( i ) then
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 318
25957: IFFALSE 25968
// ComWalk ( i ) ;
25959: LD_VAR 0 1
25963: PPUSH
25964: CALL_OW 138
// SetClass ( i , 2 ) ;
25968: LD_VAR 0 1
25972: PPUSH
25973: LD_INT 2
25975: PPUSH
25976: CALL_OW 336
// end ;
25980: GO 25945
25982: POP
25983: POP
// end ;
25984: PPOPN 2
25986: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25987: LD_EXP 59
25991: PUSH
25992: LD_EXP 112
25996: AND
25997: IFFALSE 26278
25999: GO 26001
26001: DISABLE
26002: LD_INT 0
26004: PPUSH
26005: PPUSH
26006: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26007: LD_OWVAR 2
26011: PPUSH
26012: LD_INT 9
26014: PPUSH
26015: LD_INT 1
26017: PPUSH
26018: LD_INT 1
26020: PPUSH
26021: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26025: LD_INT 9
26027: PPUSH
26028: LD_OWVAR 2
26032: PPUSH
26033: CALL_OW 343
// uc_side := 9 ;
26037: LD_ADDR_OWVAR 20
26041: PUSH
26042: LD_INT 9
26044: ST_TO_ADDR
// uc_nation := 2 ;
26045: LD_ADDR_OWVAR 21
26049: PUSH
26050: LD_INT 2
26052: ST_TO_ADDR
// hc_name := Dark Warrior ;
26053: LD_ADDR_OWVAR 26
26057: PUSH
26058: LD_STRING Dark Warrior
26060: ST_TO_ADDR
// hc_gallery :=  ;
26061: LD_ADDR_OWVAR 33
26065: PUSH
26066: LD_STRING 
26068: ST_TO_ADDR
// hc_noskilllimit := true ;
26069: LD_ADDR_OWVAR 76
26073: PUSH
26074: LD_INT 1
26076: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26077: LD_ADDR_OWVAR 31
26081: PUSH
26082: LD_INT 30
26084: PUSH
26085: LD_INT 30
26087: PUSH
26088: LD_INT 30
26090: PUSH
26091: LD_INT 30
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: ST_TO_ADDR
// un := CreateHuman ;
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: CALL_OW 44
26109: ST_TO_ADDR
// hc_noskilllimit := false ;
26110: LD_ADDR_OWVAR 76
26114: PUSH
26115: LD_INT 0
26117: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26118: LD_VAR 0 3
26122: PPUSH
26123: LD_INT 1
26125: PPUSH
26126: CALL_OW 51
// p := 0 ;
26130: LD_ADDR_VAR 0 2
26134: PUSH
26135: LD_INT 0
26137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26138: LD_INT 35
26140: PPUSH
26141: CALL_OW 67
// p := p + 1 ;
26145: LD_ADDR_VAR 0 2
26149: PUSH
26150: LD_VAR 0 2
26154: PUSH
26155: LD_INT 1
26157: PLUS
26158: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26159: LD_VAR 0 3
26163: PPUSH
26164: CALL_OW 256
26168: PUSH
26169: LD_INT 1000
26171: LESS
26172: IFFALSE 26186
// SetLives ( un , 1000 ) ;
26174: LD_VAR 0 3
26178: PPUSH
26179: LD_INT 1000
26181: PPUSH
26182: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26186: LD_VAR 0 3
26190: PPUSH
26191: LD_INT 81
26193: PUSH
26194: LD_OWVAR 2
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 91
26205: PUSH
26206: LD_VAR 0 3
26210: PUSH
26211: LD_INT 30
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PPUSH
26223: CALL_OW 69
26227: PPUSH
26228: LD_VAR 0 3
26232: PPUSH
26233: CALL_OW 74
26237: PPUSH
26238: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26242: LD_VAR 0 2
26246: PUSH
26247: LD_INT 60
26249: GREATER
26250: PUSH
26251: LD_VAR 0 3
26255: PPUSH
26256: CALL_OW 301
26260: OR
26261: IFFALSE 26138
// if un then
26263: LD_VAR 0 3
26267: IFFALSE 26278
// RemoveUnit ( un ) ;
26269: LD_VAR 0 3
26273: PPUSH
26274: CALL_OW 64
// end ; end_of_file
26278: PPOPN 3
26280: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26281: LD_INT 0
26283: PPUSH
26284: PPUSH
26285: PPUSH
26286: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26287: LD_VAR 0 1
26291: PPUSH
26292: CALL_OW 264
26296: PUSH
26297: LD_EXP 50
26301: EQUAL
26302: IFFALSE 26374
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26304: LD_INT 68
26306: PPUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: CALL_OW 255
26316: PPUSH
26317: CALL_OW 321
26321: PUSH
26322: LD_INT 2
26324: EQUAL
26325: IFFALSE 26337
// eff := 70 else
26327: LD_ADDR_VAR 0 4
26331: PUSH
26332: LD_INT 70
26334: ST_TO_ADDR
26335: GO 26345
// eff := 30 ;
26337: LD_ADDR_VAR 0 4
26341: PUSH
26342: LD_INT 30
26344: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26345: LD_VAR 0 1
26349: PPUSH
26350: CALL_OW 250
26354: PPUSH
26355: LD_VAR 0 1
26359: PPUSH
26360: CALL_OW 251
26364: PPUSH
26365: LD_VAR 0 4
26369: PPUSH
26370: CALL_OW 495
// end ; end ;
26374: LD_VAR 0 2
26378: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26379: LD_INT 0
26381: PPUSH
// end ;
26382: LD_VAR 0 4
26386: RET
// export function SOS_Command ( cmd ) ; begin
26387: LD_INT 0
26389: PPUSH
// end ;
26390: LD_VAR 0 2
26394: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26395: LD_VAR 0 1
26399: PUSH
26400: LD_INT 255
26402: EQUAL
26403: PUSH
26404: LD_VAR 0 2
26408: PPUSH
26409: CALL_OW 264
26413: PUSH
26414: LD_INT 14
26416: PUSH
26417: LD_INT 53
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: IN
26424: AND
26425: PUSH
26426: LD_VAR 0 4
26430: PPUSH
26431: LD_VAR 0 5
26435: PPUSH
26436: CALL_OW 488
26440: AND
26441: IFFALSE 26465
// CutTreeXYR ( unit , x , y , 12 ) ;
26443: LD_VAR 0 2
26447: PPUSH
26448: LD_VAR 0 4
26452: PPUSH
26453: LD_VAR 0 5
26457: PPUSH
26458: LD_INT 12
26460: PPUSH
26461: CALL 26468 0 4
// end ;
26465: PPOPN 5
26467: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26468: LD_INT 0
26470: PPUSH
26471: PPUSH
26472: PPUSH
26473: PPUSH
26474: PPUSH
26475: PPUSH
26476: PPUSH
26477: PPUSH
26478: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26479: LD_VAR 0 1
26483: NOT
26484: PUSH
26485: LD_VAR 0 2
26489: PPUSH
26490: LD_VAR 0 3
26494: PPUSH
26495: CALL_OW 488
26499: NOT
26500: OR
26501: PUSH
26502: LD_VAR 0 4
26506: NOT
26507: OR
26508: IFFALSE 26512
// exit ;
26510: GO 26852
// list := [ ] ;
26512: LD_ADDR_VAR 0 13
26516: PUSH
26517: EMPTY
26518: ST_TO_ADDR
// if x - r < 0 then
26519: LD_VAR 0 2
26523: PUSH
26524: LD_VAR 0 4
26528: MINUS
26529: PUSH
26530: LD_INT 0
26532: LESS
26533: IFFALSE 26545
// min_x := 0 else
26535: LD_ADDR_VAR 0 7
26539: PUSH
26540: LD_INT 0
26542: ST_TO_ADDR
26543: GO 26561
// min_x := x - r ;
26545: LD_ADDR_VAR 0 7
26549: PUSH
26550: LD_VAR 0 2
26554: PUSH
26555: LD_VAR 0 4
26559: MINUS
26560: ST_TO_ADDR
// if y - r < 0 then
26561: LD_VAR 0 3
26565: PUSH
26566: LD_VAR 0 4
26570: MINUS
26571: PUSH
26572: LD_INT 0
26574: LESS
26575: IFFALSE 26587
// min_y := 0 else
26577: LD_ADDR_VAR 0 8
26581: PUSH
26582: LD_INT 0
26584: ST_TO_ADDR
26585: GO 26603
// min_y := y - r ;
26587: LD_ADDR_VAR 0 8
26591: PUSH
26592: LD_VAR 0 3
26596: PUSH
26597: LD_VAR 0 4
26601: MINUS
26602: ST_TO_ADDR
// max_x := x + r ;
26603: LD_ADDR_VAR 0 9
26607: PUSH
26608: LD_VAR 0 2
26612: PUSH
26613: LD_VAR 0 4
26617: PLUS
26618: ST_TO_ADDR
// max_y := y + r ;
26619: LD_ADDR_VAR 0 10
26623: PUSH
26624: LD_VAR 0 3
26628: PUSH
26629: LD_VAR 0 4
26633: PLUS
26634: ST_TO_ADDR
// for _x = min_x to max_x do
26635: LD_ADDR_VAR 0 11
26639: PUSH
26640: DOUBLE
26641: LD_VAR 0 7
26645: DEC
26646: ST_TO_ADDR
26647: LD_VAR 0 9
26651: PUSH
26652: FOR_TO
26653: IFFALSE 26770
// for _y = min_y to max_y do
26655: LD_ADDR_VAR 0 12
26659: PUSH
26660: DOUBLE
26661: LD_VAR 0 8
26665: DEC
26666: ST_TO_ADDR
26667: LD_VAR 0 10
26671: PUSH
26672: FOR_TO
26673: IFFALSE 26766
// begin if not ValidHex ( _x , _y ) then
26675: LD_VAR 0 11
26679: PPUSH
26680: LD_VAR 0 12
26684: PPUSH
26685: CALL_OW 488
26689: NOT
26690: IFFALSE 26694
// continue ;
26692: GO 26672
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26694: LD_VAR 0 11
26698: PPUSH
26699: LD_VAR 0 12
26703: PPUSH
26704: CALL_OW 351
26708: PUSH
26709: LD_VAR 0 11
26713: PPUSH
26714: LD_VAR 0 12
26718: PPUSH
26719: CALL_OW 554
26723: AND
26724: IFFALSE 26764
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26726: LD_ADDR_VAR 0 13
26730: PUSH
26731: LD_VAR 0 13
26735: PPUSH
26736: LD_VAR 0 13
26740: PUSH
26741: LD_INT 1
26743: PLUS
26744: PPUSH
26745: LD_VAR 0 11
26749: PUSH
26750: LD_VAR 0 12
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PPUSH
26759: CALL_OW 2
26763: ST_TO_ADDR
// end ;
26764: GO 26672
26766: POP
26767: POP
26768: GO 26652
26770: POP
26771: POP
// if not list then
26772: LD_VAR 0 13
26776: NOT
26777: IFFALSE 26781
// exit ;
26779: GO 26852
// for i in list do
26781: LD_ADDR_VAR 0 6
26785: PUSH
26786: LD_VAR 0 13
26790: PUSH
26791: FOR_IN
26792: IFFALSE 26850
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26794: LD_VAR 0 1
26798: PPUSH
26799: LD_STRING M
26801: PUSH
26802: LD_VAR 0 6
26806: PUSH
26807: LD_INT 1
26809: ARRAY
26810: PUSH
26811: LD_VAR 0 6
26815: PUSH
26816: LD_INT 2
26818: ARRAY
26819: PUSH
26820: LD_INT 0
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: PPUSH
26844: CALL_OW 447
26848: GO 26791
26850: POP
26851: POP
// end ;
26852: LD_VAR 0 5
26856: RET
