// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 857 0 0
// PrepareArabian ;
  12: CALL 1231 0 0
// PrepareAmerican ;
  16: CALL 6760 0 0
// PrepareRussian ;
  20: CALL 2219 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8320 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: PUSH
 565: LD_VAR 0 2
 569: NOT
 570: OR
 571: IFFALSE 575
// exit ;
 573: GO 623
// if not See ( GetSide ( observer ) , unit ) then
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 255
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 292
 594: NOT
 595: IFFALSE 599
// exit ;
 597: GO 623
// result := GetDistUnits ( observer , unit ) < 12 ;
 599: LD_ADDR_VAR 0 3
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_VAR 0 2
 613: PPUSH
 614: CALL_OW 296
 618: PUSH
 619: LD_INT 12
 621: LESS
 622: ST_TO_ADDR
// end ;
 623: LD_VAR 0 3
 627: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 628: LD_INT 0
 630: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 631: LD_VAR 0 2
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: LD_VAR 0 2
 644: PUSH
 645: LD_INT 2
 647: ARRAY
 648: PPUSH
 649: CALL_OW 488
 653: PUSH
 654: LD_VAR 0 2
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: LD_VAR 0 2
 667: PUSH
 668: LD_INT 2
 670: ARRAY
 671: PPUSH
 672: CALL_OW 428
 676: PUSH
 677: LD_INT 0
 679: EQUAL
 680: AND
 681: IFFALSE 715
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 683: LD_VAR 0 1
 687: PPUSH
 688: LD_VAR 0 2
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 2
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 3
 710: PPUSH
 711: CALL_OW 48
// end ;
 715: LD_VAR 0 4
 719: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
// InitUc ;
 724: CALL_OW 18
// InitHc ;
 728: CALL_OW 19
// uc_side := 0 ;
 732: LD_ADDR_OWVAR 20
 736: PUSH
 737: LD_INT 0
 739: ST_TO_ADDR
// uc_nation := 0 ;
 740: LD_ADDR_OWVAR 21
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// for i = 1 to amount do
 748: LD_ADDR_VAR 0 4
 752: PUSH
 753: DOUBLE
 754: LD_INT 1
 756: DEC
 757: ST_TO_ADDR
 758: LD_VAR 0 2
 762: PUSH
 763: FOR_TO
 764: IFFALSE 846
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 766: LD_ADDR_OWVAR 29
 770: PUSH
 771: LD_INT 9
 773: PPUSH
 774: LD_INT 12
 776: PPUSH
 777: CALL_OW 12
 781: PUSH
 782: LD_INT 9
 784: PPUSH
 785: LD_INT 12
 787: PPUSH
 788: CALL_OW 12
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 797: LD_ADDR_OWVAR 35
 801: PUSH
 802: LD_INT 1
 804: NEG
 805: PPUSH
 806: LD_INT 1
 808: PPUSH
 809: CALL_OW 12
 813: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 814: LD_INT 0
 816: PPUSH
 817: LD_INT 12
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 827: CALL_OW 44
 831: PPUSH
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// end ;
 844: GO 763
 846: POP
 847: POP
// InitHc ;
 848: CALL_OW 19
// end ;
 852: LD_VAR 0 3
 856: RET
// export function CreateNature ; var i ; begin
 857: LD_INT 0
 859: PPUSH
 860: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 861: LD_INT 18
 863: PPUSH
 864: LD_INT 5
 866: PUSH
 867: LD_INT 4
 869: PUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL 720 0 2
// for i := 1 to 3 do
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: DOUBLE
 898: LD_INT 1
 900: DEC
 901: ST_TO_ADDR
 902: LD_INT 3
 904: PUSH
 905: FOR_TO
 906: IFFALSE 941
// begin hc_class := 21 ;
 908: LD_ADDR_OWVAR 28
 912: PUSH
 913: LD_INT 21
 915: ST_TO_ADDR
// hc_gallery :=  ;
 916: LD_ADDR_OWVAR 33
 920: PUSH
 921: LD_STRING 
 923: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 924: CALL_OW 44
 928: PPUSH
 929: LD_INT 18
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// end ;
 939: GO 905
 941: POP
 942: POP
// for i := 1 to 2 do
 943: LD_ADDR_VAR 0 2
 947: PUSH
 948: DOUBLE
 949: LD_INT 1
 951: DEC
 952: ST_TO_ADDR
 953: LD_INT 2
 955: PUSH
 956: FOR_TO
 957: IFFALSE 992
// begin hc_class := 18 ;
 959: LD_ADDR_OWVAR 28
 963: PUSH
 964: LD_INT 18
 966: ST_TO_ADDR
// hc_gallery :=  ;
 967: LD_ADDR_OWVAR 33
 971: PUSH
 972: LD_STRING 
 974: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 975: CALL_OW 44
 979: PPUSH
 980: LD_INT 18
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 49
// end ;
 990: GO 956
 992: POP
 993: POP
// for i := 1 to 2 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 2
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1043
// begin hc_class := 13 ;
1010: LD_ADDR_OWVAR 28
1014: PUSH
1015: LD_INT 13
1017: ST_TO_ADDR
// hc_gallery :=  ;
1018: LD_ADDR_OWVAR 33
1022: PUSH
1023: LD_STRING 
1025: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1026: CALL_OW 44
1030: PPUSH
1031: LD_INT 18
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end ;
1041: GO 1007
1043: POP
1044: POP
// end ;
1045: LD_VAR 0 1
1049: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1050: LD_INT 0
1052: PPUSH
1053: PPUSH
1054: PPUSH
1055: PPUSH
1056: PPUSH
// result := false ;
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// if not sideList or not enemySide then
1065: LD_VAR 0 1
1069: NOT
1070: PUSH
1071: LD_VAR 0 2
1075: NOT
1076: OR
1077: IFFALSE 1081
// exit ;
1079: GO 1226
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1081: LD_ADDR_VAR 0 7
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 69
1102: ST_TO_ADDR
// if not tmp then
1103: LD_VAR 0 7
1107: NOT
1108: IFFALSE 1112
// exit ;
1110: GO 1226
// for s in sideList do
1112: LD_ADDR_VAR 0 6
1116: PUSH
1117: LD_VAR 0 1
1121: PUSH
1122: FOR_IN
1123: IFFALSE 1224
// for i in tmp do
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_VAR 0 7
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1220
// if See ( s , i ) then
1138: LD_VAR 0 6
1142: PPUSH
1143: LD_VAR 0 5
1147: PPUSH
1148: CALL_OW 292
1152: IFFALSE 1218
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1154: LD_ADDR_VAR 0 8
1158: PUSH
1159: LD_INT 22
1161: PUSH
1162: LD_VAR 0 6
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 69
1175: PPUSH
1176: LD_VAR 0 5
1180: PPUSH
1181: CALL_OW 74
1185: ST_TO_ADDR
// if tmp2 in exceptUnits then
1186: LD_VAR 0 8
1190: PUSH
1191: LD_VAR 0 3
1195: IN
1196: IFFALSE 1202
// continue else
1198: GO 1135
1200: GO 1218
// begin result := tmp2 ;
1202: LD_ADDR_VAR 0 4
1206: PUSH
1207: LD_VAR 0 8
1211: ST_TO_ADDR
// exit ;
1212: POP
1213: POP
1214: POP
1215: POP
1216: GO 1226
// end ; end ;
1218: GO 1135
1220: POP
1221: POP
1222: GO 1122
1224: POP
1225: POP
// end ; end_of_file
1226: LD_VAR 0 4
1230: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
// if cargoRecycled then
1235: LD_EXP 25
1239: IFFALSE 1267
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1241: LD_INT 82
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1254: LD_INT 83
1256: PPUSH
1257: LD_INT 2
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 322
// end ; uc_side := 5 ;
1267: LD_ADDR_OWVAR 20
1271: PUSH
1272: LD_INT 5
1274: ST_TO_ADDR
// uc_nation := 2 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 2
1282: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1283: LD_ADDR_EXP 37
1287: PUSH
1288: LD_STRING Abdul
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: LD_STRING 
1296: PPUSH
1297: CALL 38674 0 3
1301: ST_TO_ADDR
// uc_side := 2 ;
1302: LD_ADDR_OWVAR 20
1306: PUSH
1307: LD_INT 2
1309: ST_TO_ADDR
// uc_nation := 2 ;
1310: LD_ADDR_OWVAR 21
1314: PUSH
1315: LD_INT 2
1317: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Heike
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 38674 0 3
1341: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Ibrahim
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 38674 0 3
1365: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 27
1370: PUSH
1371: LD_STRING Givi
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 38674 0 3
1389: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_STRING Kamil
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 38674 0 3
1413: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 31
1418: PUSH
1419: LD_STRING Kaia
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 38674 0 3
1437: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 32
1442: PUSH
1443: LD_STRING Sophia
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 38674 0 3
1461: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1462: LD_ADDR_EXP 33
1466: PUSH
1467: LD_STRING Markov
1469: PPUSH
1470: LD_EXP 1
1474: NOT
1475: PPUSH
1476: LD_EXP 2
1480: PPUSH
1481: CALL 38674 0 3
1485: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1486: LD_ADDR_EXP 36
1490: PUSH
1491: LD_STRING Aviradze
1493: PPUSH
1494: LD_EXP 1
1498: NOT
1499: PPUSH
1500: LD_EXP 2
1504: PPUSH
1505: CALL 38674 0 3
1509: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1510: LD_ADDR_EXP 40
1514: PUSH
1515: EMPTY
1516: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1517: LD_ADDR_EXP 38
1521: PUSH
1522: LD_STRING 03_others
1524: PPUSH
1525: CALL_OW 31
1529: ST_TO_ADDR
// uc_side := 5 ;
1530: LD_ADDR_OWVAR 20
1534: PUSH
1535: LD_INT 5
1537: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1538: LD_ADDR_EXP 35
1542: PUSH
1543: LD_STRING Kurt
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: LD_STRING 
1551: PPUSH
1552: CALL 38674 0 3
1556: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 28
1561: PUSH
1562: LD_STRING Mike
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 38674 0 3
1580: ST_TO_ADDR
// if Mike then
1581: LD_EXP 28
1585: IFFALSE 1608
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1587: LD_EXP 28
1591: PPUSH
1592: LD_INT 142
1594: PPUSH
1595: LD_INT 63
1597: PPUSH
1598: LD_INT 2
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1608: LD_EXP 35
1612: PPUSH
1613: LD_INT 142
1615: PPUSH
1616: LD_INT 63
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1629: LD_EXP 35
1633: PUSH
1634: LD_EXP 28
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 140
// end ;
1647: LD_VAR 0 1
1651: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1652: LD_INT 0
1654: PPUSH
1655: PPUSH
1656: PPUSH
1657: PPUSH
// uc_side := 5 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 5
1665: ST_TO_ADDR
// uc_nation := 2 ;
1666: LD_ADDR_OWVAR 21
1670: PUSH
1671: LD_INT 2
1673: ST_TO_ADDR
// InitHc ;
1674: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1678: LD_ADDR_EXP 34
1682: PUSH
1683: LD_STRING Omar
1685: PPUSH
1686: LD_INT 0
1688: PPUSH
1689: LD_STRING 
1691: PPUSH
1692: CALL 38674 0 3
1696: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1697: LD_EXP 34
1701: PPUSH
1702: LD_INT 284
1704: PPUSH
1705: LD_INT 163
1707: PPUSH
1708: LD_INT 0
1710: PPUSH
1711: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1715: LD_EXP 34
1719: PPUSH
1720: LD_INT 256
1722: PPUSH
1723: LD_INT 129
1725: PPUSH
1726: CALL_OW 111
// wait ( 0 0$2 ) ;
1730: LD_INT 70
1732: PPUSH
1733: CALL_OW 67
// omarSquad := [ ] ;
1737: LD_ADDR_EXP 39
1741: PUSH
1742: EMPTY
1743: ST_TO_ADDR
// for i := 1 to 5 do
1744: LD_ADDR_VAR 0 2
1748: PUSH
1749: DOUBLE
1750: LD_INT 1
1752: DEC
1753: ST_TO_ADDR
1754: LD_INT 5
1756: PUSH
1757: FOR_TO
1758: IFFALSE 1964
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1760: LD_INT 5
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 14
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 2
1783: MOD
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: ARRAY
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: LD_INT 25
1798: PUSH
1799: LD_INT 27
1801: PUSH
1802: LD_INT 26
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 3
1817: MOD
1818: PUSH
1819: LD_INT 1
1821: PLUS
1822: ARRAY
1823: PPUSH
1824: LD_INT 100
1826: PPUSH
1827: CALL 386 0 7
// veh := CreateVehicle ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: CALL_OW 45
1840: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1841: LD_VAR 0 4
1845: PPUSH
1846: LD_INT 5
1848: PPUSH
1849: CALL_OW 233
// omarSquad := omarSquad union veh ;
1853: LD_ADDR_EXP 39
1857: PUSH
1858: LD_EXP 39
1862: PUSH
1863: LD_VAR 0 4
1867: UNION
1868: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 284
1876: PPUSH
1877: LD_INT 163
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1887: LD_INT 0
1889: PPUSH
1890: LD_INT 3
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL_OW 380
// un := CreateHuman ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: CALL_OW 44
1909: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1910: LD_ADDR_EXP 39
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_VAR 0 3
1924: UNION
1925: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1926: LD_VAR 0 3
1930: PPUSH
1931: LD_VAR 0 4
1935: PPUSH
1936: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 271
1947: PPUSH
1948: LD_INT 144
1950: PPUSH
1951: CALL_OW 111
// wait ( 0 0$2 ) ;
1955: LD_INT 70
1957: PPUSH
1958: CALL_OW 67
// end ;
1962: GO 1757
1964: POP
1965: POP
// for i := 1 to 3 do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_INT 3
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2063
// begin PrepareHuman ( false , 1 , 2 ) ;
1982: LD_INT 0
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 380
// un := CreateHuman ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: CALL_OW 44
2004: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2005: LD_ADDR_EXP 39
2009: PUSH
2010: LD_EXP 39
2014: PUSH
2015: LD_VAR 0 3
2019: UNION
2020: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 284
2028: PPUSH
2029: LD_INT 163
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2039: LD_VAR 0 3
2043: PPUSH
2044: LD_INT 257
2046: PPUSH
2047: LD_INT 138
2049: PPUSH
2050: CALL_OW 111
// wait ( 0 0$1 ) ;
2054: LD_INT 35
2056: PPUSH
2057: CALL_OW 67
// end ;
2061: GO 1979
2063: POP
2064: POP
// for i := 1 to 6 do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_INT 6
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2212
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2081: LD_INT 0
2083: PPUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 4
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_VAR 0 2
2102: PUSH
2103: LD_INT 3
2105: MOD
2106: PUSH
2107: LD_INT 1
2109: PLUS
2110: ARRAY
2111: PPUSH
2112: LD_INT 3
2114: PPUSH
2115: CALL_OW 380
// un := CreateHuman ;
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: CALL_OW 44
2128: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2129: LD_ADDR_EXP 39
2133: PUSH
2134: LD_EXP 39
2138: PUSH
2139: LD_VAR 0 3
2143: UNION
2144: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 225
2152: PPUSH
2153: LD_INT 163
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 48
// if i = 1 then
2163: LD_VAR 0 2
2167: PUSH
2168: LD_INT 1
2170: EQUAL
2171: IFFALSE 2188
// SetAttr ( un , attr_speed , 12 ) ;
2173: LD_VAR 0 3
2177: PPUSH
2178: LD_INT 2
2180: PPUSH
2181: LD_INT 12
2183: PPUSH
2184: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 222
2195: PPUSH
2196: LD_INT 157
2198: PPUSH
2199: CALL_OW 111
// wait ( 0 0$1 ) ;
2203: LD_INT 35
2205: PPUSH
2206: CALL_OW 67
// end ;
2210: GO 2078
2212: POP
2213: POP
// end ; end_of_file
2214: LD_VAR 0 1
2218: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2219: LD_INT 0
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 149
2232: PPUSH
2233: LD_INT 67
2235: PPUSH
2236: CALL_OW 428
2240: PPUSH
2241: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2245: LD_ADDR_EXP 51
2249: PUSH
2250: LD_INT 111
2252: PPUSH
2253: LD_INT 89
2255: PPUSH
2256: CALL_OW 428
2260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_INT 21
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 23
2278: PUSH
2279: LD_INT 3
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 69
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2312
// SetBLevel ( i , 5 ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL_OW 241
2310: GO 2295
2312: POP
2313: POP
// SetBName ( kirov , kirov ) ;
2314: LD_INT 71
2316: PPUSH
2317: LD_STRING kirov
2319: PPUSH
2320: CALL_OW 500
// SetBName ( beria , beria ) ;
2324: LD_INT 106
2326: PPUSH
2327: LD_STRING beria
2329: PPUSH
2330: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2334: LD_INT 112
2336: PPUSH
2337: LD_STRING kagan
2339: PPUSH
2340: CALL_OW 500
// uc_side := 6 ;
2344: LD_ADDR_OWVAR 20
2348: PUSH
2349: LD_INT 6
2351: ST_TO_ADDR
// uc_nation := 3 ;
2352: LD_ADDR_OWVAR 21
2356: PUSH
2357: LD_INT 3
2359: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_INT 22
2367: PUSH
2368: LD_INT 6
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 30
2377: PUSH
2378: LD_INT 5
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: LD_INT 1
2396: ARRAY
2397: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 6
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 30
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2436: LD_ADDR_EXP 45
2440: PUSH
2441: EMPTY
2442: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2443: LD_ADDR_EXP 46
2447: PUSH
2448: EMPTY
2449: ST_TO_ADDR
// russianPatrol := [ ] ;
2450: LD_ADDR_EXP 48
2454: PUSH
2455: EMPTY
2456: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2457: LD_ADDR_EXP 41
2461: PUSH
2462: LD_STRING Kurin
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 38674 0 3
2475: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2476: LD_EXP 41
2480: PPUSH
2481: LD_INT 71
2483: PPUSH
2484: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2488: LD_ADDR_EXP 43
2492: PUSH
2493: LD_STRING Popov
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_STRING 
2501: PPUSH
2502: CALL 38674 0 3
2506: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2507: LD_EXP 43
2511: PPUSH
2512: LD_INT 71
2514: PPUSH
2515: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2519: LD_ADDR_EXP 42
2523: PUSH
2524: LD_STRING Grishko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 38674 0 3
2537: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2538: LD_EXP 42
2542: PPUSH
2543: LD_INT 207
2545: PPUSH
2546: LD_INT 106
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2556: LD_EXP 42
2560: PPUSH
2561: LD_INT 209
2563: PPUSH
2564: LD_INT 106
2566: PPUSH
2567: CALL_OW 118
// for i := 1 to 2 do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: DOUBLE
2577: LD_INT 1
2579: DEC
2580: ST_TO_ADDR
2581: LD_INT 2
2583: PUSH
2584: FOR_TO
2585: IFFALSE 2640
// begin PrepareHuman ( false , 2 , 2 ) ;
2587: LD_INT 0
2589: PPUSH
2590: LD_INT 2
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 380
// un := CreateHuman ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: CALL_OW 44
2609: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2610: LD_VAR 0 3
2614: PPUSH
2615: LD_INT 71
2617: PPUSH
2618: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2622: LD_ADDR_EXP 45
2626: PUSH
2627: LD_EXP 45
2631: PUSH
2632: LD_VAR 0 3
2636: UNION
2637: ST_TO_ADDR
// end ;
2638: GO 2584
2640: POP
2641: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: DOUBLE
2648: LD_INT 1
2650: DEC
2651: ST_TO_ADDR
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: LD_INT 6
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_OWVAR 67
2674: ARRAY
2675: PUSH
2676: FOR_TO
2677: IFFALSE 2755
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2679: LD_INT 0
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 4
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_OWVAR 67
2707: ARRAY
2708: PPUSH
2709: CALL_OW 380
// un := CreateHuman ;
2713: LD_ADDR_VAR 0 3
2717: PUSH
2718: CALL_OW 44
2722: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2723: LD_VAR 0 3
2727: PPUSH
2728: LD_VAR 0 5
2732: PPUSH
2733: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2737: LD_ADDR_EXP 45
2741: PUSH
2742: LD_EXP 45
2746: PUSH
2747: LD_VAR 0 3
2751: UNION
2752: ST_TO_ADDR
// end ;
2753: GO 2676
2755: POP
2756: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2757: LD_ADDR_VAR 0 2
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_INT 6
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 30
2774: PUSH
2775: LD_INT 32
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: PUSH
2791: FOR_IN
2792: IFFALSE 2870
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2794: LD_INT 0
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PUSH
2803: LD_INT 4
2805: PUSH
2806: LD_INT 4
2808: PUSH
2809: LD_INT 5
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: LD_OWVAR 67
2822: ARRAY
2823: PPUSH
2824: CALL_OW 380
// un := CreateHuman ;
2828: LD_ADDR_VAR 0 3
2832: PUSH
2833: CALL_OW 44
2837: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2852: LD_ADDR_EXP 45
2856: PUSH
2857: LD_EXP 45
2861: PUSH
2862: LD_VAR 0 3
2866: UNION
2867: ST_TO_ADDR
// end ;
2868: GO 2791
2870: POP
2871: POP
// for i := 1 to 3 do
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: DOUBLE
2878: LD_INT 1
2880: DEC
2881: ST_TO_ADDR
2882: LD_INT 3
2884: PUSH
2885: FOR_TO
2886: IFFALSE 2941
// begin PrepareHuman ( false , 3 , 3 ) ;
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: CALL_OW 380
// un := CreateHuman ;
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: CALL_OW 44
2910: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_INT 92
2918: PPUSH
2919: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2923: LD_ADDR_EXP 45
2927: PUSH
2928: LD_EXP 45
2932: PUSH
2933: LD_VAR 0 3
2937: UNION
2938: ST_TO_ADDR
// end ;
2939: GO 2885
2941: POP
2942: POP
// for i := 1 to 2 do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_INT 2
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3012
// begin PrepareHuman ( false , 4 , 3 ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: CALL_OW 380
// un := CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 83
2989: PPUSH
2990: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2994: LD_ADDR_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PUSH
3004: LD_VAR 0 3
3008: UNION
3009: ST_TO_ADDR
// end ;
3010: GO 2956
3012: POP
3013: POP
// for i := 1 to 5 do
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: DOUBLE
3020: LD_INT 1
3022: DEC
3023: ST_TO_ADDR
3024: LD_INT 5
3026: PUSH
3027: FOR_TO
3028: IFFALSE 3085
// begin PrepareHuman ( false , 1 , 3 ) ;
3030: LD_INT 0
3032: PPUSH
3033: LD_INT 1
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: CALL_OW 380
// un := CreateHuman ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: CALL_OW 44
3052: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3053: LD_VAR 0 3
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3067: LD_ADDR_EXP 47
3071: PUSH
3072: LD_EXP 47
3076: PUSH
3077: LD_VAR 0 3
3081: UNION
3082: ST_TO_ADDR
// end ;
3083: GO 3027
3085: POP
3086: POP
// russianCargo := [ ] ;
3087: LD_ADDR_EXP 50
3091: PUSH
3092: EMPTY
3093: ST_TO_ADDR
// for i := 1 to 2 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 2
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3240
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3110: LD_INT 6
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 21
3118: PPUSH
3119: LD_INT 1
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 51
3127: PPUSH
3128: LD_INT 100
3130: PPUSH
3131: CALL 386 0 7
// un := CreateVehicle ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 45
3144: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3145: LD_ADDR_EXP 50
3149: PUSH
3150: LD_EXP 50
3154: PUSH
3155: LD_VAR 0 3
3159: UNION
3160: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: LD_INT 100
3171: PPUSH
3172: CALL_OW 290
// SetDir ( un , 4 ) ;
3176: LD_VAR 0 3
3180: PPUSH
3181: LD_INT 4
3183: PPUSH
3184: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_INT 147
3195: PPUSH
3196: LD_INT 103
3198: PPUSH
3199: LD_INT 4
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_OWVAR 67
3219: PPUSH
3220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3224: CALL_OW 44
3228: PPUSH
3229: LD_VAR 0 3
3233: PPUSH
3234: CALL_OW 52
// end ;
3238: GO 3107
3240: POP
3241: POP
// uc_side := 3 ;
3242: LD_ADDR_OWVAR 20
3246: PUSH
3247: LD_INT 3
3249: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3250: LD_ADDR_EXP 44
3254: PUSH
3255: LD_STRING Burlak
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: LD_STRING 
3263: PPUSH
3264: CALL 38674 0 3
3268: ST_TO_ADDR
// for i := 1 to 5 do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 5
3281: PUSH
3282: FOR_TO
3283: IFFALSE 3376
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 1
3290: PPUSH
3291: LD_OWVAR 67
3295: PUSH
3296: LD_INT 1
3298: PLUS
3299: PPUSH
3300: CALL_OW 380
// un := CreateHuman ;
3304: LD_ADDR_VAR 0 3
3308: PUSH
3309: CALL_OW 44
3313: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3314: LD_VAR 0 3
3318: PPUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 3
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PPUSH
3354: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3358: LD_ADDR_EXP 46
3362: PUSH
3363: LD_EXP 46
3367: PUSH
3368: LD_VAR 0 3
3372: UNION
3373: ST_TO_ADDR
// end ;
3374: GO 3282
3376: POP
3377: POP
// for i := 1 to 2 do
3378: LD_ADDR_VAR 0 2
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_INT 2
3390: PUSH
3391: FOR_TO
3392: IFFALSE 3483
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3394: LD_INT 0
3396: PPUSH
3397: LD_INT 1
3399: PPUSH
3400: LD_OWVAR 67
3404: PUSH
3405: LD_INT 1
3407: PLUS
3408: PPUSH
3409: CALL_OW 380
// un := CreateHuman ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: CALL_OW 44
3422: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 22
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 30
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PPUSH
3452: CALL_OW 69
3456: PUSH
3457: LD_INT 1
3459: ARRAY
3460: PPUSH
3461: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3465: LD_ADDR_EXP 46
3469: PUSH
3470: LD_EXP 46
3474: PUSH
3475: LD_VAR 0 3
3479: UNION
3480: ST_TO_ADDR
// end ;
3481: GO 3391
3483: POP
3484: POP
// for i := 1 to 2 do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: DOUBLE
3491: LD_INT 1
3493: DEC
3494: ST_TO_ADDR
3495: LD_INT 2
3497: PUSH
3498: FOR_TO
3499: IFFALSE 3586
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3501: LD_INT 0
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_OWVAR 67
3511: PPUSH
3512: CALL_OW 380
// un := CreateHuman ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: CALL_OW 44
3525: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_INT 22
3533: PUSH
3534: LD_INT 3
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 7
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 69
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3568: LD_ADDR_EXP 46
3572: PUSH
3573: LD_EXP 46
3577: PUSH
3578: LD_VAR 0 3
3582: UNION
3583: ST_TO_ADDR
// end ;
3584: GO 3498
3586: POP
3587: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3588: LD_INT 0
3590: PPUSH
3591: LD_INT 2
3593: PPUSH
3594: LD_OWVAR 67
3598: PPUSH
3599: CALL_OW 380
// un := CreateHuman ;
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_INT 106
3620: PPUSH
3621: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3625: LD_ADDR_EXP 46
3629: PUSH
3630: LD_EXP 46
3634: PUSH
3635: LD_VAR 0 3
3639: UNION
3640: ST_TO_ADDR
// for i := 1 to 3 do
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 3
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3777
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 3
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 30
3674: PUSH
3675: LD_INT 31
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_VAR 0 2
3695: ARRAY
3696: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 1
3702: PPUSH
3703: LD_OWVAR 67
3707: PPUSH
3708: CALL_OW 380
// un := CreateHuman ;
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: CALL_OW 44
3721: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3722: LD_VAR 0 3
3726: PPUSH
3727: LD_VAR 0 6
3731: PPUSH
3732: CALL_OW 254
3736: PUSH
3737: LD_INT 3
3739: PLUS
3740: PPUSH
3741: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 6
3754: PPUSH
3755: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3759: LD_ADDR_EXP 46
3763: PUSH
3764: LD_EXP 46
3768: PUSH
3769: LD_VAR 0 3
3773: UNION
3774: ST_TO_ADDR
// end ;
3775: GO 3654
3777: POP
3778: POP
// if Difficulty > 1 then
3779: LD_OWVAR 67
3783: PUSH
3784: LD_INT 1
3786: GREATER
3787: IFFALSE 3862
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: LD_INT 23
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 44
3811: PPUSH
3812: LD_INT 100
3814: PPUSH
3815: CALL 386 0 7
3819: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_INT 73
3827: PPUSH
3828: LD_INT 110
3830: PPUSH
3831: LD_INT 0
3833: PPUSH
3834: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 3
3843: PPUSH
3844: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3848: CALL_OW 44
3852: PPUSH
3853: LD_VAR 0 3
3857: PPUSH
3858: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3862: LD_ADDR_EXP 49
3866: PUSH
3867: EMPTY
3868: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 6
3881: PUSH
3882: LD_INT 7
3884: PUSH
3885: LD_INT 8
3887: PUSH
3888: LD_INT 8
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: LD_OWVAR 67
3901: ARRAY
3902: PUSH
3903: FOR_TO
3904: IFFALSE 4128
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3906: LD_INT 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 23
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 2
3929: MOD
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ARRAY
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: LD_INT 43
3944: PUSH
3945: LD_INT 44
3947: PUSH
3948: LD_INT 42
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 3
3963: MOD
3964: PUSH
3965: LD_INT 1
3967: PLUS
3968: ARRAY
3969: PPUSH
3970: LD_INT 100
3972: PPUSH
3973: CALL 386 0 7
// un := CreateVehicle ;
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: CALL_OW 45
3986: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 5
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: PPUSH
4014: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4018: LD_ADDR_EXP 49
4022: PUSH
4023: LD_EXP 49
4027: PUSH
4028: LD_VAR 0 3
4032: UNION
4033: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4034: LD_VAR 0 3
4038: PPUSH
4039: LD_INT 127
4041: PPUSH
4042: LD_INT 89
4044: PPUSH
4045: LD_INT 7
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 50
// uc_side := 3 ;
4055: LD_ADDR_OWVAR 20
4059: PUSH
4060: LD_INT 3
4062: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4063: LD_INT 0
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 380
// un := CreateHuman ;
4076: LD_ADDR_VAR 0 3
4080: PUSH
4081: CALL_OW 44
4085: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4086: LD_ADDR_EXP 49
4090: PUSH
4091: LD_EXP 49
4095: PUSH
4096: LD_VAR 0 3
4100: UNION
4101: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4102: LD_VAR 0 3
4106: PPUSH
4107: LD_EXP 49
4111: PUSH
4112: LD_EXP 49
4116: PUSH
4117: LD_INT 1
4119: MINUS
4120: ARRAY
4121: PPUSH
4122: CALL_OW 52
// end ;
4126: GO 3903
4128: POP
4129: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4130: LD_ADDR_VAR 0 2
4134: PUSH
4135: DOUBLE
4136: LD_INT 1
4138: DEC
4139: ST_TO_ADDR
4140: LD_INT 3
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 6
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: LD_OWVAR 67
4162: ARRAY
4163: PUSH
4164: FOR_TO
4165: IFFALSE 4231
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4167: LD_INT 0
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: LD_OWVAR 67
4177: PPUSH
4178: CALL_OW 380
// un := CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4192: LD_ADDR_EXP 49
4196: PUSH
4197: LD_EXP 49
4201: PUSH
4202: LD_VAR 0 3
4206: UNION
4207: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: LD_INT 91
4215: PPUSH
4216: LD_INT 60
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 50
// end ;
4229: GO 4164
4231: POP
4232: POP
// end ;
4233: LD_VAR 0 1
4237: RET
// every 0 0$3 do var i ;
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
// begin for i := 1 to 4 do
4244: LD_ADDR_VAR 0 1
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 4
4256: PUSH
4257: FOR_TO
4258: IFFALSE 4277
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4260: LD_EXP 47
4264: PUSH
4265: LD_VAR 0 1
4269: ARRAY
4270: PPUSH
4271: CALL_OW 122
4275: GO 4257
4277: POP
4278: POP
// wait ( 3 ) ;
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4286: LD_EXP 47
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: LD_INT 22
4297: PUSH
4298: LD_INT 6
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_INT 31
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PPUSH
4324: LD_EXP 47
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: CALL_OW 74
4337: PPUSH
4338: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4342: LD_EXP 47
4346: PUSH
4347: LD_INT 2
4349: ARRAY
4350: PPUSH
4351: LD_INT 211
4353: PPUSH
4354: LD_INT 107
4356: PPUSH
4357: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4361: LD_EXP 47
4365: PUSH
4366: LD_INT 2
4368: ARRAY
4369: PPUSH
4370: LD_INT 209
4372: PPUSH
4373: LD_INT 106
4375: PPUSH
4376: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4380: LD_EXP 47
4384: PUSH
4385: LD_INT 3
4387: ARRAY
4388: PPUSH
4389: LD_INT 209
4391: PPUSH
4392: LD_INT 103
4394: PPUSH
4395: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4399: LD_EXP 47
4403: PUSH
4404: LD_INT 3
4406: ARRAY
4407: PPUSH
4408: LD_INT 209
4410: PPUSH
4411: LD_INT 106
4413: PPUSH
4414: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4418: LD_EXP 47
4422: PUSH
4423: LD_INT 4
4425: ARRAY
4426: PPUSH
4427: LD_INT 227
4429: PPUSH
4430: LD_INT 117
4432: PPUSH
4433: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4437: LD_EXP 47
4441: PUSH
4442: LD_INT 4
4444: ARRAY
4445: PPUSH
4446: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4450: LD_INT 700
4452: PPUSH
4453: CALL_OW 67
// for i := 3 downto 2 do
4457: LD_ADDR_VAR 0 1
4461: PUSH
4462: DOUBLE
4463: LD_INT 3
4465: INC
4466: ST_TO_ADDR
4467: LD_INT 2
4469: PUSH
4470: FOR_DOWNTO
4471: IFFALSE 4638
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4473: LD_EXP 47
4477: PUSH
4478: LD_VAR 0 1
4482: ARRAY
4483: PPUSH
4484: LD_INT 200
4486: PPUSH
4487: LD_INT 91
4489: PPUSH
4490: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4494: LD_EXP 47
4498: PUSH
4499: LD_VAR 0 1
4503: ARRAY
4504: PPUSH
4505: LD_INT 210
4507: PPUSH
4508: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4512: LD_EXP 47
4516: PUSH
4517: LD_VAR 0 1
4521: ARRAY
4522: PPUSH
4523: LD_INT 224
4525: PPUSH
4526: LD_INT 93
4528: PPUSH
4529: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4533: LD_EXP 47
4537: PUSH
4538: LD_VAR 0 1
4542: ARRAY
4543: PPUSH
4544: LD_INT 210
4546: PPUSH
4547: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4551: LD_EXP 47
4555: PUSH
4556: LD_VAR 0 1
4560: ARRAY
4561: PPUSH
4562: LD_INT 239
4564: PPUSH
4565: LD_INT 123
4567: PPUSH
4568: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4572: LD_EXP 47
4576: PUSH
4577: LD_VAR 0 1
4581: ARRAY
4582: PPUSH
4583: LD_INT 210
4585: PPUSH
4586: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4590: LD_EXP 47
4594: PUSH
4595: LD_VAR 0 1
4599: ARRAY
4600: PPUSH
4601: LD_INT 212
4603: PPUSH
4604: LD_INT 105
4606: PPUSH
4607: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4611: LD_EXP 47
4615: PUSH
4616: LD_VAR 0 1
4620: ARRAY
4621: PPUSH
4622: LD_INT 700
4624: PPUSH
4625: CALL_OW 202
// wait ( 0 0$30 ) ;
4629: LD_INT 1050
4631: PPUSH
4632: CALL_OW 67
// end ;
4636: GO 4470
4638: POP
4639: POP
// until not activeGrishkoAI ;
4640: LD_EXP 10
4644: NOT
4645: IFFALSE 4450
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 221
4654: PPUSH
4655: LD_INT 110
4657: PPUSH
4658: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4662: LD_EXP 47
4666: PPUSH
4667: LD_INT 228
4669: PPUSH
4670: LD_INT 115
4672: PPUSH
4673: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4677: LD_EXP 47
4681: PPUSH
4682: CALL_OW 200
// end ;
4686: PPOPN 1
4688: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4689: LD_EXP 12
4693: IFFALSE 5439
4695: GO 4697
4697: DISABLE
4698: LD_INT 0
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
// begin uc_side := 6 ;
4704: LD_ADDR_OWVAR 20
4708: PUSH
4709: LD_INT 6
4711: ST_TO_ADDR
// uc_nation := 3 ;
4712: LD_ADDR_OWVAR 21
4716: PUSH
4717: LD_INT 3
4719: ST_TO_ADDR
// for i := 1 to 3 do
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_INT 3
4732: PUSH
4733: FOR_TO
4734: IFFALSE 4847
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4736: LD_INT 0
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: LD_INT 2
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_OWVAR 67
4764: ARRAY
4765: PPUSH
4766: CALL_OW 380
// un := CreateHuman ;
4770: LD_ADDR_VAR 0 1
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4780: LD_ADDR_EXP 48
4784: PUSH
4785: LD_EXP 48
4789: PUSH
4790: LD_VAR 0 1
4794: UNION
4795: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4808: LD_VAR 0 1
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4823: LD_VAR 0 1
4827: PPUSH
4828: LD_INT 210
4830: PPUSH
4831: LD_INT 159
4833: PPUSH
4834: CALL_OW 111
// wait ( 0 0$2 ) ;
4838: LD_INT 70
4840: PPUSH
4841: CALL_OW 67
// end ;
4845: GO 4733
4847: POP
4848: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4849: LD_ADDR_VAR 0 4
4853: PUSH
4854: LD_INT 172
4856: PUSH
4857: LD_INT 76
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 150
4866: PUSH
4867: LD_INT 38
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 148
4876: PUSH
4877: LD_INT 9
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 165
4886: PUSH
4887: LD_INT 38
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 191
4902: PUSH
4903: LD_INT 77
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 168
4912: PUSH
4913: LD_INT 42
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 166
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 151
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 221
4948: PUSH
4949: LD_INT 88
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 217
4958: PUSH
4959: LD_INT 64
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 232
4968: PUSH
4969: LD_INT 66
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 200
4978: PUSH
4979: LD_INT 56
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4997: LD_INT 35
4999: PPUSH
5000: CALL_OW 67
// for i := russianPatrol downto 1 do
5004: LD_ADDR_VAR 0 2
5008: PUSH
5009: DOUBLE
5010: LD_EXP 48
5014: INC
5015: ST_TO_ADDR
5016: LD_INT 1
5018: PUSH
5019: FOR_DOWNTO
5020: IFFALSE 5403
// begin if IsDead ( russianPatrol [ i ] ) then
5022: LD_EXP 48
5026: PUSH
5027: LD_VAR 0 2
5031: ARRAY
5032: PPUSH
5033: CALL_OW 301
5037: IFFALSE 5041
// continue ;
5039: GO 5019
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5041: LD_EXP 48
5045: PUSH
5046: LD_VAR 0 2
5050: ARRAY
5051: PPUSH
5052: CALL_OW 256
5056: PUSH
5057: LD_INT 990
5059: LESS
5060: PUSH
5061: LD_EXP 48
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: PPUSH
5072: CALL_OW 110
5076: PUSH
5077: LD_INT 1
5079: EQUAL
5080: AND
5081: IFFALSE 5101
// SetTag ( russianPatrol [ i ] , 2 ) ;
5083: LD_EXP 48
5087: PUSH
5088: LD_VAR 0 2
5092: ARRAY
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5101: LD_EXP 48
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PPUSH
5112: CALL_OW 110
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: IFFALSE 5187
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5122: LD_EXP 48
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: LD_INT 166
5135: PPUSH
5136: LD_INT 101
5138: PPUSH
5139: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5143: LD_EXP 48
5147: PUSH
5148: LD_VAR 0 2
5152: ARRAY
5153: PPUSH
5154: LD_INT 71
5156: PPUSH
5157: CALL_OW 296
5161: PUSH
5162: LD_INT 10
5164: LESS
5165: IFFALSE 5185
// SetTag ( russianPatrol [ i ] , 3 ) ;
5167: LD_EXP 48
5171: PUSH
5172: LD_VAR 0 2
5176: ARRAY
5177: PPUSH
5178: LD_INT 3
5180: PPUSH
5181: CALL_OW 109
// continue ;
5185: GO 5019
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5187: LD_EXP 48
5191: PUSH
5192: LD_VAR 0 2
5196: ARRAY
5197: PPUSH
5198: CALL_OW 110
5202: PUSH
5203: LD_INT 3
5205: EQUAL
5206: IFFALSE 5301
// begin spottedByPatrol := true ;
5208: LD_ADDR_EXP 7
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5216: LD_EXP 48
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: PPUSH
5227: CALL_OW 250
5231: PPUSH
5232: LD_EXP 48
5236: PUSH
5237: LD_VAR 0 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 251
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_INT 6
5253: NEG
5254: PPUSH
5255: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5259: LD_EXP 48
5263: PUSH
5264: LD_VAR 0 2
5268: ARRAY
5269: PPUSH
5270: CALL_OW 87
// DialogueOn ;
5274: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5278: LD_EXP 26
5282: PPUSH
5283: LD_STRING DH-Spot-f-3
5285: PPUSH
5286: CALL_OW 88
// DialogueOff ;
5290: CALL_OW 7
// YouLost ( Spotted ) ;
5294: LD_STRING Spotted
5296: PPUSH
5297: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5301: LD_EXP 48
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PPUSH
5312: CALL_OW 314
5316: NOT
5317: IFFALSE 5401
// for j in patrol [ i ] do
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_VAR 0 4
5328: PUSH
5329: LD_VAR 0 2
5333: ARRAY
5334: PUSH
5335: FOR_IN
5336: IFFALSE 5399
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5338: LD_EXP 48
5342: PUSH
5343: LD_VAR 0 2
5347: ARRAY
5348: PPUSH
5349: LD_INT 35
5351: PPUSH
5352: LD_INT 175
5354: PPUSH
5355: CALL_OW 12
5359: PPUSH
5360: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5364: LD_EXP 48
5368: PUSH
5369: LD_VAR 0 2
5373: ARRAY
5374: PPUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 2
5391: ARRAY
5392: PPUSH
5393: CALL_OW 174
// end ;
5397: GO 5335
5399: POP
5400: POP
// end ;
5401: GO 5019
5403: POP
5404: POP
// until not russianPatrol or russianAlert ;
5405: LD_EXP 48
5409: NOT
5410: PUSH
5411: LD_EXP 9
5415: OR
5416: IFFALSE 4997
// if russianPatrol then
5418: LD_EXP 48
5422: IFFALSE 5439
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5424: LD_EXP 48
5428: PPUSH
5429: LD_INT 161
5431: PPUSH
5432: LD_INT 107
5434: PPUSH
5435: CALL_OW 114
// end ;
5439: PPOPN 4
5441: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5442: LD_EXP 6
5446: PUSH
5447: LD_EXP 13
5451: NOT
5452: AND
5453: IFFALSE 5939
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_EXP 49
5475: PPUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 72
5490: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: ST_TO_ADDR
// for i in filter do
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: FOR_IN
5522: IFFALSE 5937
// begin tmp := IsDrivenBy ( i ) ;
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 311
5538: ST_TO_ADDR
// if not tmp then
5539: LD_VAR 0 3
5543: NOT
5544: IFFALSE 5548
// continue ;
5546: GO 5521
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 261
5557: PUSH
5558: LD_INT 90
5560: GREATER
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 110
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: AND
5576: IFFALSE 5592
// SetTag ( i , 0 ) else
5578: LD_VAR 0 1
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: CALL_OW 109
5590: GO 5688
// if GetTag ( i ) = 2 then
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 110
5601: PUSH
5602: LD_INT 2
5604: EQUAL
5605: IFFALSE 5688
// begin x := rand ( 1 , 2 ) ;
5607: LD_ADDR_VAR 0 5
5611: PUSH
5612: LD_INT 1
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: CALL_OW 12
5622: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_EXP 50
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PPUSH
5639: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5643: LD_EXP 50
5647: PUSH
5648: LD_VAR 0 5
5652: ARRAY
5653: PPUSH
5654: LD_INT 2
5656: PPUSH
5657: CALL_OW 289
5661: PUSH
5662: LD_INT 20
5664: LESS
5665: IFFALSE 5688
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5667: LD_EXP 50
5671: PUSH
5672: LD_VAR 0 5
5676: ARRAY
5677: PPUSH
5678: LD_INT 2
5680: PPUSH
5681: LD_INT 100
5683: PPUSH
5684: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 256
5697: PUSH
5698: LD_INT 600
5700: GREATEREQUAL
5701: PUSH
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 110
5711: NOT
5712: AND
5713: IFFALSE 5739
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5715: LD_VAR 0 1
5719: PPUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL_OW 74
5734: PPUSH
5735: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 256
5748: PUSH
5749: LD_INT 600
5751: LESS
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 110
5762: NOT
5763: AND
5764: IFFALSE 5793
// begin SetTag ( i , 1 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5778: LD_VAR 0 1
5782: PPUSH
5783: LD_INT 62
5785: PPUSH
5786: LD_INT 22
5788: PPUSH
5789: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5793: LD_VAR 0 1
5797: PPUSH
5798: CALL_OW 110
5802: PUSH
5803: LD_INT 1
5805: EQUAL
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 62
5814: PPUSH
5815: LD_INT 22
5817: PPUSH
5818: CALL_OW 297
5822: PUSH
5823: LD_INT 6
5825: LESS
5826: AND
5827: PUSH
5828: LD_VAR 0 3
5832: AND
5833: IFFALSE 5935
// begin ComExitVehicle ( tmp ) ;
5835: LD_VAR 0 3
5839: PPUSH
5840: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5844: LD_VAR 0 3
5848: PPUSH
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5858: LD_INT 35
5860: PPUSH
5861: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 256
5874: PUSH
5875: LD_INT 1000
5877: EQUAL
5878: IFFALSE 5858
// ComEnterUnit ( tmp , i ) ;
5880: LD_VAR 0 3
5884: PPUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 261
5903: PUSH
5904: LD_INT 90
5906: LESSEQUAL
5907: IFFALSE 5923
// SetTag ( i , 2 ) else
5909: LD_VAR 0 1
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: CALL_OW 109
5921: GO 5935
// SetTag ( i , 0 ) ;
5923: LD_VAR 0 1
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 109
// end ; end ;
5935: GO 5521
5937: POP
5938: POP
// end ;
5939: PPOPN 5
5941: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5942: LD_EXP 20
5946: IFFALSE 6169
5948: GO 5950
5950: DISABLE
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5955: LD_EXP 50
5959: PPUSH
5960: LD_INT 79
5962: PPUSH
5963: LD_INT 155
5965: PPUSH
5966: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5970: LD_EXP 50
5974: PPUSH
5975: LD_INT 16
5977: PPUSH
5978: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_EXP 49
5991: PPUSH
5992: LD_INT 50
5994: PUSH
5995: EMPTY
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
// for i in tmp do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_VAR 0 2
6012: PUSH
6013: FOR_IN
6014: IFFALSE 6048
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_INT 123
6023: PPUSH
6024: LD_INT 60
6026: PPUSH
6027: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6031: LD_VAR 0 1
6035: PPUSH
6036: LD_INT 153
6038: PPUSH
6039: LD_INT 103
6041: PPUSH
6042: CALL_OW 174
// end ;
6046: GO 6013
6048: POP
6049: POP
// repeat wait ( 0 0$1 ) ;
6050: LD_INT 35
6052: PPUSH
6053: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_EXP 49
6066: PPUSH
6067: LD_INT 50
6069: PUSH
6070: EMPTY
6071: LIST
6072: PPUSH
6073: CALL_OW 72
6077: ST_TO_ADDR
// for i in tmp do
6078: LD_ADDR_VAR 0 1
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6160
// if not HasTask ( i ) then
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 314
6100: NOT
6101: IFFALSE 6158
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6103: LD_VAR 0 1
6107: PPUSH
6108: LD_INT 81
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 21
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 69
6143: PPUSH
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 74
6153: PPUSH
6154: CALL_OW 115
6158: GO 6088
6160: POP
6161: POP
6162: LD_VAR 0 2
6166: NOT
6167: IFFALSE 6050
// end ;
6169: PPOPN 2
6171: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6172: LD_INT 22
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 32
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: IFFALSE 6279
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
// begin enable ;
6208: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6209: LD_ADDR_VAR 0 1
6213: PUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 32
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: PUSH
6243: FOR_IN
6244: IFFALSE 6277
// if GetFuel ( i ) < 1 then
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL_OW 261
6255: PUSH
6256: LD_INT 1
6258: LESS
6259: IFFALSE 6275
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 311
6270: PPUSH
6271: CALL_OW 121
6275: GO 6243
6277: POP
6278: POP
// end ;
6279: PPOPN 1
6281: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6282: LD_EXP 41
6286: PPUSH
6287: CALL_OW 303
6291: PUSH
6292: LD_EXP 41
6296: PPUSH
6297: CALL_OW 301
6301: OR
6302: PUSH
6303: LD_INT 71
6305: PPUSH
6306: CALL_OW 303
6310: OR
6311: PUSH
6312: LD_INT 71
6314: PPUSH
6315: CALL_OW 301
6319: OR
6320: IFFALSE 6643
6322: GO 6324
6324: DISABLE
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PPUSH
6351: CALL_OW 72
6355: ST_TO_ADDR
// if not tmp then
6356: LD_VAR 0 2
6360: NOT
6361: IFFALSE 6365
// exit ;
6363: GO 6643
// barracks := HexInfo ( 166 , 116 ) ;
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_INT 166
6372: PPUSH
6373: LD_INT 116
6375: PPUSH
6376: CALL_OW 428
6380: ST_TO_ADDR
// for i in tmp do
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_VAR 0 2
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6405
// ComExitBuilding ( i ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 122
6403: GO 6391
6405: POP
6406: POP
// repeat wait ( 0 0$1 ) ;
6407: LD_INT 35
6409: PPUSH
6410: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6414: LD_ADDR_VAR 0 2
6418: PUSH
6419: LD_EXP 45
6423: PPUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 50
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL_OW 72
6448: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 21
6456: PPUSH
6457: LD_INT 81
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 70
6471: ST_TO_ADDR
// if enemy then
6472: LD_VAR 0 3
6476: IFFALSE 6521
// begin for i in tmp do
6478: LD_ADDR_VAR 0 1
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: FOR_IN
6489: IFFALSE 6517
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 74
6510: PPUSH
6511: CALL_OW 115
6515: GO 6488
6517: POP
6518: POP
// end else
6519: GO 6636
// begin for i in tmp do
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_VAR 0 2
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6634
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 314
6543: PUSH
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 21
6551: PPUSH
6552: CALL_OW 308
6556: NOT
6557: OR
6558: IFFALSE 6632
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 600
6572: LESS
6573: PUSH
6574: LD_VAR 0 4
6578: PPUSH
6579: CALL_OW 302
6583: AND
6584: PUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: CALL_OW 313
6594: PUSH
6595: LD_INT 6
6597: LESS
6598: AND
6599: IFFALSE 6617
// ComEnterUnit ( i , barracks ) else
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_VAR 0 4
6610: PPUSH
6611: CALL_OW 120
6615: GO 6632
// ComMoveXY ( i , 162 , 109 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 162
6624: PPUSH
6625: LD_INT 109
6627: PPUSH
6628: CALL_OW 111
6632: GO 6531
6634: POP
6635: POP
// end ; until not tmp ;
6636: LD_VAR 0 2
6640: NOT
6641: IFFALSE 6407
// end ;
6643: PPOPN 4
6645: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6646: LD_INT 106
6648: PPUSH
6649: CALL_OW 303
6653: PUSH
6654: LD_INT 106
6656: PPUSH
6657: CALL_OW 301
6661: OR
6662: IFFALSE 6757
6664: GO 6666
6666: DISABLE
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: LD_EXP 46
6680: PPUSH
6681: LD_INT 25
6683: PUSH
6684: LD_INT 1
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 72
6695: ST_TO_ADDR
// if not tmp then
6696: LD_VAR 0 2
6700: NOT
6701: IFFALSE 6705
// exit ;
6703: GO 6757
// for i in tmp do
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: LD_VAR 0 2
6714: PUSH
6715: FOR_IN
6716: IFFALSE 6755
// begin if IsInUnit ( i ) then
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 310
6727: IFFALSE 6738
// ComExitBuilding ( i ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6738: LD_VAR 0 1
6742: PPUSH
6743: LD_INT 66
6745: PPUSH
6746: LD_INT 128
6748: PPUSH
6749: CALL_OW 171
// end ;
6753: GO 6715
6755: POP
6756: POP
// end ; end_of_file
6757: PPOPN 2
6759: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6760: LD_INT 0
6762: PPUSH
6763: PPUSH
6764: PPUSH
// SetBName ( omikron , omikron ) ;
6765: LD_INT 64
6767: PPUSH
6768: LD_STRING omikron
6770: PPUSH
6771: CALL_OW 500
// uc_side := 4 ;
6775: LD_ADDR_OWVAR 20
6779: PUSH
6780: LD_INT 4
6782: ST_TO_ADDR
// uc_nation := 1 ;
6783: LD_ADDR_OWVAR 21
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// omicronSquad := [ ] ;
6791: LD_ADDR_EXP 52
6795: PUSH
6796: EMPTY
6797: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 32
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 31
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6908
// begin PrepareHuman ( false , 1 , 1 ) ;
6853: LD_INT 0
6855: PPUSH
6856: LD_INT 1
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 380
// un := CreateHuman ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: CALL_OW 44
6875: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6876: LD_ADDR_EXP 52
6880: PUSH
6881: LD_EXP 52
6885: PUSH
6886: LD_VAR 0 3
6890: UNION
6891: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6892: LD_VAR 0 3
6896: PPUSH
6897: LD_VAR 0 2
6901: PPUSH
6902: CALL_OW 52
// end ;
6906: GO 6850
6908: POP
6909: POP
// for i := 1 to 3 do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: DOUBLE
6916: LD_INT 1
6918: DEC
6919: ST_TO_ADDR
6920: LD_INT 3
6922: PUSH
6923: FOR_TO
6924: IFFALSE 6979
// begin PrepareHuman ( false , 2 , 2 ) ;
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 2
6931: PPUSH
6932: LD_INT 2
6934: PPUSH
6935: CALL_OW 380
// un := CreateHuman ;
6939: LD_ADDR_VAR 0 3
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6949: LD_ADDR_EXP 52
6953: PUSH
6954: LD_EXP 52
6958: PUSH
6959: LD_VAR 0 3
6963: UNION
6964: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_INT 64
6972: PPUSH
6973: CALL_OW 52
// end ;
6977: GO 6923
6979: POP
6980: POP
// for i := 1 to 2 do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_INT 2
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7134
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6997: LD_INT 4
6999: PPUSH
7000: LD_INT 1
7002: PPUSH
7003: LD_INT 2
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 3
7014: PPUSH
7015: LD_INT 100
7017: PPUSH
7018: CALL 386 0 7
// un := CreateVehicle ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: CALL_OW 45
7031: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7032: LD_ADDR_EXP 52
7036: PUSH
7037: LD_EXP 52
7041: PUSH
7042: LD_VAR 0 3
7046: UNION
7047: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7048: LD_VAR 0 3
7052: PPUSH
7053: LD_INT 28
7055: PPUSH
7056: LD_INT 37
7058: PPUSH
7059: LD_INT 6
7061: PPUSH
7062: LD_INT 0
7064: PPUSH
7065: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7069: LD_INT 0
7071: PPUSH
7072: LD_INT 3
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: CALL_OW 380
// un := CreateHuman ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7092: LD_ADDR_EXP 52
7096: PUSH
7097: LD_EXP 52
7101: PUSH
7102: LD_VAR 0 3
7106: UNION
7107: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7108: LD_VAR 0 3
7112: PPUSH
7113: LD_EXP 52
7117: PUSH
7118: LD_EXP 52
7122: PUSH
7123: LD_INT 1
7125: MINUS
7126: ARRAY
7127: PPUSH
7128: CALL_OW 52
// end ;
7132: GO 6994
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
// uc_side := 4 ;
7147: LD_ADDR_OWVAR 20
7151: PUSH
7152: LD_INT 4
7154: ST_TO_ADDR
// uc_nation := 1 ;
7155: LD_ADDR_OWVAR 21
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// tmp := [ ] ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: EMPTY
7169: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7170: LD_INT 4
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 1
7184: PPUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_INT 77
7190: PPUSH
7191: CALL 386 0 7
// un := CreateVehicle ;
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: CALL_OW 45
7204: ST_TO_ADDR
// tmp := tmp union un ;
7205: LD_ADDR_VAR 0 4
7209: PUSH
7210: LD_VAR 0 4
7214: PUSH
7215: LD_VAR 0 3
7219: UNION
7220: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_INT 106
7240: PPUSH
7241: LD_INT 3
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7251: LD_INT 0
7253: PPUSH
7254: LD_INT 3
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: CALL_OW 380
// un := CreateHuman ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: CALL_OW 44
7273: ST_TO_ADDR
// tmp := tmp union un ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 4
7283: PUSH
7284: LD_VAR 0 3
7288: UNION
7289: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7290: LD_VAR 0 3
7294: PPUSH
7295: LD_VAR 0 4
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_INT 1
7307: MINUS
7308: ARRAY
7309: PPUSH
7310: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7314: LD_VAR 0 3
7318: PPUSH
7319: LD_INT 109
7321: PPUSH
7322: LD_INT 9
7324: PPUSH
7325: CALL_OW 111
// wait ( 0 0$1 ) ;
7329: LD_INT 35
7331: PPUSH
7332: CALL_OW 67
// for i := 1 to 2 do
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: DOUBLE
7342: LD_INT 1
7344: DEC
7345: ST_TO_ADDR
7346: LD_INT 2
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7414
// begin PrepareHuman ( false , 1 , 2 ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: LD_INT 2
7360: PPUSH
7361: CALL_OW 380
// un := CreateHuman ;
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: CALL_OW 44
7374: ST_TO_ADDR
// tmp := tmp union un ;
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 4
7384: PUSH
7385: LD_VAR 0 3
7389: UNION
7390: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7391: LD_VAR 0 3
7395: PPUSH
7396: LD_INT 105
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: LD_INT 0
7407: PPUSH
7408: CALL_OW 50
// end ;
7412: GO 7349
7414: POP
7415: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7416: LD_VAR 0 4
7420: PPUSH
7421: LD_INT 26
7423: PPUSH
7424: LD_INT 35
7426: PPUSH
7427: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7431: LD_INT 35
7433: PPUSH
7434: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7438: LD_VAR 0 4
7442: PPUSH
7443: LD_INT 50
7445: PUSH
7446: EMPTY
7447: LIST
7448: PPUSH
7449: CALL_OW 72
7453: NOT
7454: IFFALSE 7458
// exit ;
7456: GO 7585
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_INT 91
7465: PUSH
7466: LD_INT 64
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: LD_VAR 0 4
7486: EQUAL
7487: IFFALSE 7431
// omicronSquad := omicronSquad union tmp ;
7489: LD_ADDR_EXP 52
7493: PUSH
7494: LD_EXP 52
7498: PUSH
7499: LD_VAR 0 4
7503: UNION
7504: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_INT 25
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 72
7529: PUSH
7530: FOR_IN
7531: IFFALSE 7583
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: LD_INT 22
7540: PUSH
7541: LD_INT 4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 30
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 69
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 74
7576: PPUSH
7577: CALL_OW 120
7581: GO 7530
7583: POP
7584: POP
// end ;
7585: LD_VAR 0 1
7589: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7590: LD_EXP 13
7594: NOT
7595: IFFALSE 8166
7597: GO 7599
7599: DISABLE
7600: LD_INT 0
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
// begin enable ;
7606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 4
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_EXP 52
7668: PPUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 72
7683: ST_TO_ADDR
// if filter and tmp then
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 3
7693: AND
7694: IFFALSE 7767
// begin for i in tmp do
7696: LD_ADDR_VAR 0 1
7700: PUSH
7701: LD_VAR 0 3
7705: PUSH
7706: FOR_IN
7707: IFFALSE 7763
// if IsInUnit ( i ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 310
7718: IFFALSE 7731
// ComExitBuilding ( i ) else
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 122
7729: GO 7761
// if not HasTask ( i ) then
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 314
7740: NOT
7741: IFFALSE 7761
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7743: LD_VAR 0 1
7747: PPUSH
7748: LD_VAR 0 2
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: CALL_OW 130
7761: GO 7706
7763: POP
7764: POP
// end else
7765: GO 7838
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7767: LD_VAR 0 3
7771: PPUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 54
7777: PUSH
7778: EMPTY
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 72
7789: IFFALSE 7838
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7791: LD_ADDR_VAR 0 1
7795: PUSH
7796: LD_VAR 0 3
7800: PPUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: PUSH
7819: FOR_IN
7820: IFFALSE 7836
// ComEnterUnit ( i , omikron ) ;
7822: LD_VAR 0 1
7826: PPUSH
7827: LD_INT 64
7829: PPUSH
7830: CALL_OW 120
7834: GO 7819
7836: POP
7837: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7838: LD_ADDR_VAR 0 2
7842: PUSH
7843: LD_EXP 52
7847: PPUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 2
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 72
7862: ST_TO_ADDR
// if not filter then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 8166
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_INT 13
7879: PPUSH
7880: LD_INT 81
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 70
7894: ST_TO_ADDR
// if enemy then
7895: LD_VAR 0 4
7899: IFFALSE 8166
// begin for i in filter do
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: FOR_IN
7912: IFFALSE 8164
// begin tmp := IsDrivenBy ( i ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 311
7928: ST_TO_ADDR
// if not tmp then
7929: LD_VAR 0 3
7933: NOT
7934: IFFALSE 7938
// continue ;
7936: GO 7911
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7938: LD_VAR 0 1
7942: PPUSH
7943: CALL_OW 256
7947: PUSH
7948: LD_INT 600
7950: GREATEREQUAL
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 110
7961: PUSH
7962: LD_INT 1
7964: NONEQUAL
7965: AND
7966: IFFALSE 7992
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 4
7977: PPUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 74
7987: PPUSH
7988: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 256
8001: PUSH
8002: LD_INT 600
8004: LESS
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 110
8015: PUSH
8016: LD_INT 1
8018: NONEQUAL
8019: AND
8020: IFFALSE 8049
// begin SetTag ( i , 1 ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_INT 27
8041: PPUSH
8042: LD_INT 35
8044: PPUSH
8045: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 110
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 27
8070: PPUSH
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 297
8078: PUSH
8079: LD_INT 6
8081: LESS
8082: AND
8083: PUSH
8084: LD_VAR 0 3
8088: AND
8089: IFFALSE 8162
// begin ComExitVehicle ( tmp ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8114: LD_INT 35
8116: PPUSH
8117: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 256
8130: PUSH
8131: LD_INT 1000
8133: EQUAL
8134: IFFALSE 8114
// ComEnterUnit ( tmp , i ) ;
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 120
// SetTag ( i , 0 ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 0
8157: PPUSH
8158: CALL_OW 109
// end ; end ;
8162: GO 7911
8164: POP
8165: POP
// end ; end ;
8166: PPOPN 4
8168: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8169: LD_EXP 13
8173: IFFALSE 8317
8175: GO 8177
8177: DISABLE
8178: LD_INT 0
8180: PPUSH
8181: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_EXP 52
8191: PPUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 50
8204: PUSH
8205: EMPTY
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 72
8216: ST_TO_ADDR
// if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8226
// exit ;
8224: GO 8317
// repeat wait ( 0 0$1 ) ;
8226: LD_INT 35
8228: PPUSH
8229: CALL_OW 67
// for i in tmp do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8308
// begin ComExit ( i ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: CALL 76763 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 14
8262: PPUSH
8263: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_INT 14
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8306
// begin tmp := tmp diff i ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 1
8295: DIFF
8296: ST_TO_ADDR
// RemoveUnit ( i ) ;
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 64
// end ; end ;
8306: GO 8243
8308: POP
8309: POP
// until not tmp ;
8310: LD_VAR 0 2
8314: NOT
8315: IFFALSE 8226
// end ; end_of_file
8317: PPOPN 2
8319: END
// export function Action ; var i , un , veh , tmp ; begin
8320: LD_INT 0
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
8326: PPUSH
// InGameOn ;
8327: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8331: LD_INT 179
8333: PPUSH
8334: LD_INT 5
8336: PPUSH
8337: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8341: LD_ADDR_VAR 0 4
8345: PUSH
8346: LD_INT 2
8348: PPUSH
8349: LD_INT 2
8351: PPUSH
8352: LD_INT 12
8354: PPUSH
8355: LD_INT 1
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 24
8363: PPUSH
8364: LD_INT 33
8366: PPUSH
8367: CALL 386 0 7
8371: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 2
8379: PPUSH
8380: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8384: LD_VAR 0 4
8388: PPUSH
8389: LD_INT 178
8391: PPUSH
8392: LD_INT 2
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8402: LD_EXP 26
8406: PPUSH
8407: LD_VAR 0 4
8411: PPUSH
8412: CALL_OW 52
// if Kamil then
8416: LD_EXP 30
8420: IFFALSE 8455
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8422: LD_EXP 30
8426: PPUSH
8427: LD_INT 207
8429: PPUSH
8430: LD_INT 37
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8440: LD_EXP 30
8444: PPUSH
8445: LD_INT 211
8447: PPUSH
8448: LD_INT 38
8450: PPUSH
8451: CALL_OW 118
// end ; if Sophia then
8455: LD_EXP 32
8459: IFFALSE 8494
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8461: LD_EXP 32
8465: PPUSH
8466: LD_INT 209
8468: PPUSH
8469: LD_INT 40
8471: PPUSH
8472: LD_INT 0
8474: PPUSH
8475: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8479: LD_EXP 32
8483: PPUSH
8484: LD_INT 211
8486: PPUSH
8487: LD_INT 38
8489: PPUSH
8490: CALL_OW 118
// end ; if Givi then
8494: LD_EXP 27
8498: IFFALSE 8533
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8500: LD_EXP 27
8504: PPUSH
8505: LD_INT 201
8507: PPUSH
8508: LD_INT 34
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8518: LD_EXP 27
8522: PPUSH
8523: LD_INT 206
8525: PPUSH
8526: LD_INT 36
8528: PPUSH
8529: CALL_OW 118
// end ; if Ibrahim then
8533: LD_EXP 29
8537: IFFALSE 8572
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8539: LD_EXP 29
8543: PPUSH
8544: LD_INT 202
8546: PPUSH
8547: LD_INT 39
8549: PPUSH
8550: LD_INT 0
8552: PPUSH
8553: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8557: LD_EXP 29
8561: PPUSH
8562: LD_INT 206
8564: PPUSH
8565: LD_INT 36
8567: PPUSH
8568: CALL_OW 118
// end ; if Markov then
8572: LD_EXP 33
8576: IFFALSE 8663
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_INT 2
8585: PPUSH
8586: LD_INT 2
8588: PPUSH
8589: LD_INT 13
8591: PPUSH
8592: LD_INT 1
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: LD_INT 25
8600: PPUSH
8601: LD_INT 80
8603: PUSH
8604: LD_INT 20
8606: PUSH
8607: LD_OWVAR 67
8611: MUL
8612: MINUS
8613: PPUSH
8614: CALL 386 0 7
8618: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8619: LD_VAR 0 4
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8631: LD_VAR 0 4
8635: PPUSH
8636: LD_INT 197
8638: PPUSH
8639: LD_INT 35
8641: PPUSH
8642: LD_INT 0
8644: PPUSH
8645: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8649: LD_EXP 33
8653: PPUSH
8654: LD_VAR 0 4
8658: PPUSH
8659: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: LD_EXP 31
8672: PUSH
8673: LD_EXP 38
8677: UNION
8678: ST_TO_ADDR
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 5
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8724
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 203
8699: PPUSH
8700: LD_INT 41
8702: PPUSH
8703: LD_INT 6
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 50
// ComHold ( i ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: CALL_OW 140
// end ;
8722: GO 8689
8724: POP
8725: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8726: LD_INT 22
8728: PUSH
8729: LD_INT 2
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 69
8754: NOT
8755: IFFALSE 8769
// SetClass ( Heike , 2 ) ;
8757: LD_EXP 26
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8769: LD_EXP 26
8773: PPUSH
8774: LD_INT 183
8776: PPUSH
8777: LD_INT 12
8779: PPUSH
8780: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8784: LD_EXP 26
8788: PPUSH
8789: LD_INT 188
8791: PPUSH
8792: LD_INT 20
8794: PPUSH
8795: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8799: LD_EXP 26
8803: PPUSH
8804: LD_INT 191
8806: PPUSH
8807: LD_INT 25
8809: PPUSH
8810: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8814: LD_EXP 26
8818: PPUSH
8819: LD_INT 203
8821: PPUSH
8822: LD_INT 29
8824: PPUSH
8825: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8829: LD_EXP 26
8833: PPUSH
8834: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8838: LD_INT 35
8840: PPUSH
8841: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8845: LD_EXP 26
8849: PPUSH
8850: CALL_OW 310
8854: NOT
8855: IFFALSE 8838
// CenterOnUnits ( Heike ) ;
8857: LD_EXP 26
8861: PPUSH
8862: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8866: LD_ADDR_VAR 0 5
8870: PUSH
8871: LD_INT 22
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 21
8883: PUSH
8884: LD_INT 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: PUSH
8900: LD_EXP 26
8904: PUSH
8905: LD_EXP 33
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: DIFF
8914: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8915: LD_VAR 0 5
8919: PPUSH
8920: LD_EXP 26
8924: PPUSH
8925: CALL_OW 119
// if Givi then
8929: LD_EXP 27
8933: IFFALSE 8951
// ComTurnUnit ( Heike , Givi ) else
8935: LD_EXP 26
8939: PPUSH
8940: LD_EXP 27
8944: PPUSH
8945: CALL_OW 119
8949: GO 8969
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8951: LD_EXP 26
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8969: LD_EXP 26
8973: PPUSH
8974: LD_STRING DH-Start-1
8976: PPUSH
8977: CALL_OW 88
// if Givi then
8981: LD_EXP 27
8985: IFFALSE 9032
// begin Say ( Givi , DG-Start-2 ) ;
8987: LD_EXP 27
8991: PPUSH
8992: LD_STRING DG-Start-2
8994: PPUSH
8995: CALL_OW 88
// if not Mike then
8999: LD_EXP 28
9003: NOT
9004: IFFALSE 9030
// begin Say ( Givi , DG-Start-b-3 ) ;
9006: LD_EXP 27
9010: PPUSH
9011: LD_STRING DG-Start-b-3
9013: PPUSH
9014: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9018: LD_EXP 26
9022: PPUSH
9023: LD_STRING DH-Start-b-4
9025: PPUSH
9026: CALL_OW 88
// end ; end else
9030: GO 9097
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9032: LD_EXP 38
9036: PPUSH
9037: LD_INT 26
9039: PUSH
9040: LD_INT 1
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 72
9051: PUSH
9052: LD_INT 1
9054: ARRAY
9055: PPUSH
9056: LD_STRING DArm-Start-a-2
9058: PPUSH
9059: CALL_OW 88
9063: NOT
9064: IFFALSE 9097
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9066: LD_EXP 38
9070: PPUSH
9071: LD_INT 26
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 72
9085: PUSH
9086: LD_INT 1
9088: ARRAY
9089: PPUSH
9090: LD_STRING DArf-Start-a-2
9092: PPUSH
9093: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9097: LD_EXP 26
9101: PPUSH
9102: LD_INT 211
9104: PPUSH
9105: LD_INT 38
9107: PPUSH
9108: CALL_OW 118
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9119: LD_EXP 26
9123: PPUSH
9124: LD_STRING DH-Start-3
9126: PPUSH
9127: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9131: LD_EXP 26
9135: PPUSH
9136: LD_STRING DH-Start-4
9138: PPUSH
9139: CALL_OW 88
// InGameOff ;
9143: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9147: LD_STRING Prepare
9149: PPUSH
9150: CALL_OW 337
// SaveForQuickRestart ;
9154: CALL_OW 22
// wait ( 0 0$10 ) ;
9158: LD_INT 350
9160: PPUSH
9161: CALL_OW 67
// if not Aviradze then
9165: LD_EXP 36
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9414
// SetDir ( Aviradze , 4 ) ;
9174: LD_EXP 36
9178: PPUSH
9179: LD_INT 4
9181: PPUSH
9182: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_INT 225
9193: PPUSH
9194: LD_INT 33
9196: PPUSH
9197: LD_INT 0
9199: PPUSH
9200: CALL_OW 48
// for i := 1 to 2 do
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: DOUBLE
9210: LD_INT 1
9212: DEC
9213: ST_TO_ADDR
9214: LD_INT 2
9216: PUSH
9217: FOR_TO
9218: IFFALSE 9349
// begin uc_side := 2 ;
9220: LD_ADDR_OWVAR 20
9224: PUSH
9225: LD_INT 2
9227: ST_TO_ADDR
// uc_nation := 0 ;
9228: LD_ADDR_OWVAR 21
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9236: LD_INT 0
9238: PPUSH
9239: LD_INT 12
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 380
// hc_gallery :=  ;
9249: LD_ADDR_OWVAR 33
9253: PUSH
9254: LD_STRING 
9256: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9257: LD_ADDR_OWVAR 26
9261: PUSH
9262: LD_STRING Artudito
9264: PUSH
9265: LD_STRING Textur
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_VAR 0 2
9276: ARRAY
9277: ST_TO_ADDR
// un := CreateHuman ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: CALL_OW 44
9287: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9288: LD_VAR 0 3
9292: PPUSH
9293: LD_INT 224
9295: PUSH
9296: LD_INT 226
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_VAR 0 2
9307: ARRAY
9308: PPUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 35
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_VAR 0 2
9323: ARRAY
9324: PPUSH
9325: LD_INT 0
9327: PPUSH
9328: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_INT 215
9339: PPUSH
9340: LD_INT 36
9342: PPUSH
9343: CALL_OW 111
// end ;
9347: GO 9217
9349: POP
9350: POP
// hc_name :=  ;
9351: LD_ADDR_OWVAR 26
9355: PUSH
9356: LD_STRING 
9358: ST_TO_ADDR
// InitHc ;
9359: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9363: LD_EXP 36
9367: PPUSH
9368: LD_INT 215
9370: PPUSH
9371: LD_INT 36
9373: PPUSH
9374: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9378: LD_EXP 36
9382: PPUSH
9383: LD_STRING DA-Arrive-1
9385: PPUSH
9386: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9390: LD_EXP 26
9394: PPUSH
9395: LD_STRING DH-Arrive-2
9397: PPUSH
9398: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9402: LD_EXP 36
9406: PPUSH
9407: LD_STRING DA-Arrive-3
9409: PPUSH
9410: CALL_OW 88
// end ;
9414: LD_VAR 0 1
9418: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p , sex ;
9419: LD_EXP 3
9423: IFFALSE 10937
9425: GO 9427
9427: DISABLE
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
// begin DialogueOn ;
9435: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9439: LD_EXP 26
9443: PPUSH
9444: LD_STRING DH-base-1
9446: PPUSH
9447: CALL_OW 88
// if Markov then
9451: LD_EXP 33
9455: IFFALSE 9507
// begin Say ( Markov , DMar-base-2 ) ;
9457: LD_EXP 33
9461: PPUSH
9462: LD_STRING DMar-base-2
9464: PPUSH
9465: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9469: LD_EXP 33
9473: PPUSH
9474: LD_STRING DMar-base-3
9476: PPUSH
9477: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9481: LD_EXP 26
9485: PPUSH
9486: LD_STRING DH-base-4
9488: PPUSH
9489: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9493: LD_EXP 33
9497: PPUSH
9498: LD_STRING DMar-base-5
9500: PPUSH
9501: CALL_OW 88
// end else
9505: GO 9584
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9507: LD_EXP 38
9511: PPUSH
9512: LD_INT 26
9514: PUSH
9515: LD_INT 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PPUSH
9522: CALL_OW 72
9526: PUSH
9527: LD_INT 1
9529: ARRAY
9530: PPUSH
9531: LD_STRING DArm-base-a-2
9533: PPUSH
9534: CALL_OW 88
9538: NOT
9539: IFFALSE 9572
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9541: LD_EXP 38
9545: PPUSH
9546: LD_INT 26
9548: PUSH
9549: LD_INT 2
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 72
9560: PUSH
9561: LD_INT 1
9563: ARRAY
9564: PPUSH
9565: LD_STRING DArf-base-a-2
9567: PPUSH
9568: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9572: LD_EXP 26
9576: PPUSH
9577: LD_STRING DH-base-a-3
9579: PPUSH
9580: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9584: LD_EXP 36
9588: PPUSH
9589: LD_STRING DA-base-6
9591: PPUSH
9592: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9596: LD_EXP 36
9600: PPUSH
9601: LD_STRING DA-base-7
9603: PPUSH
9604: CALL_OW 88
// DialogueOff ;
9608: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9612: LD_STRING Flamethrower
9614: PPUSH
9615: CALL_OW 337
// wait ( 2 2$00 ) ;
9619: LD_INT 4200
9621: PPUSH
9622: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9626: LD_EXP 35
9630: PUSH
9631: LD_EXP 28
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: LD_INT 203
9642: PPUSH
9643: LD_INT 37
9645: PPUSH
9646: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9650: LD_INT 22
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 92
9662: PUSH
9663: LD_INT 203
9665: PUSH
9666: LD_INT 37
9668: PUSH
9669: LD_INT 10
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PPUSH
9682: CALL_OW 69
9686: NOT
9687: IFFALSE 9727
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9689: LD_EXP 35
9693: PUSH
9694: LD_EXP 28
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PPUSH
9703: LD_EXP 26
9707: PPUSH
9708: CALL_OW 250
9712: PPUSH
9713: LD_EXP 26
9717: PPUSH
9718: CALL_OW 251
9722: PPUSH
9723: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9727: LD_INT 35
9729: PPUSH
9730: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9734: LD_INT 2
9736: PPUSH
9737: LD_EXP 35
9741: PPUSH
9742: CALL_OW 292
9746: PUSH
9747: LD_EXP 35
9751: PPUSH
9752: LD_EXP 26
9756: PPUSH
9757: CALL_OW 296
9761: PUSH
9762: LD_INT 8
9764: LESS
9765: PUSH
9766: LD_EXP 35
9770: PPUSH
9771: LD_INT 22
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 21
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PPUSH
9795: CALL_OW 69
9799: PPUSH
9800: LD_EXP 35
9804: PPUSH
9805: CALL_OW 74
9809: PPUSH
9810: CALL_OW 296
9814: PUSH
9815: LD_INT 7
9817: LESS
9818: OR
9819: AND
9820: PUSH
9821: LD_EXP 35
9825: PPUSH
9826: LD_INT 10
9828: PPUSH
9829: CALL_OW 308
9833: NOT
9834: AND
9835: IFFALSE 9727
// InGameOn ;
9837: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9841: LD_EXP 35
9845: PPUSH
9846: CALL_OW 87
// if IsInUnit ( Heike ) then
9850: LD_EXP 26
9854: PPUSH
9855: CALL_OW 310
9859: IFFALSE 9870
// ComExitBuilding ( Heike ) ;
9861: LD_EXP 26
9865: PPUSH
9866: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9870: LD_EXP 35
9874: PUSH
9875: LD_EXP 28
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: LD_EXP 26
9888: PPUSH
9889: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9893: LD_EXP 26
9897: PPUSH
9898: LD_EXP 35
9902: PPUSH
9903: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9907: LD_INT 22
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 91
9919: PUSH
9920: LD_EXP 35
9924: PUSH
9925: LD_INT 10
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 21
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: IFFALSE 9978
// begin Say ( Kurt , DKs-scout-1 ) ;
9954: LD_EXP 35
9958: PPUSH
9959: LD_STRING DKs-scout-1
9961: PPUSH
9962: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9966: LD_EXP 26
9970: PPUSH
9971: LD_STRING DH-scout-2
9973: PPUSH
9974: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9978: LD_EXP 26
9982: PPUSH
9983: CALL_OW 85
// if IsInUnit ( Heike ) then
9987: LD_EXP 26
9991: PPUSH
9992: CALL_OW 310
9996: IFFALSE 10007
// ComExit ( Heike ) ;
9998: LD_EXP 26
10002: PPUSH
10003: CALL 76763 0 1
// repeat wait ( 0 0$1 ) ;
10007: LD_INT 35
10009: PPUSH
10010: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10014: LD_EXP 26
10018: PPUSH
10019: LD_EXP 35
10023: PPUSH
10024: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10028: LD_EXP 26
10032: PPUSH
10033: LD_EXP 35
10037: PPUSH
10038: CALL_OW 296
10042: PUSH
10043: LD_INT 6
10045: LESS
10046: IFFALSE 10007
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10048: LD_EXP 35
10052: PUSH
10053: LD_EXP 28
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: LD_EXP 26
10066: PPUSH
10067: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10071: LD_EXP 35
10075: PPUSH
10076: LD_STRING DKs-scout-3
10078: PPUSH
10079: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10083: LD_EXP 31
10087: PUSH
10088: LD_EXP 31
10092: PPUSH
10093: LD_EXP 35
10097: PPUSH
10098: CALL_OW 296
10102: PUSH
10103: LD_INT 15
10105: LESS
10106: AND
10107: IFFALSE 10330
// begin p := 1 ;
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10117: LD_EXP 31
10121: PPUSH
10122: CALL_OW 310
10126: IFFALSE 10137
// ComExit ( Kaia ) ;
10128: LD_EXP 31
10132: PPUSH
10133: CALL 76763 0 1
// wait ( 0 0$1 ) ;
10137: LD_INT 35
10139: PPUSH
10140: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10144: LD_EXP 31
10148: PPUSH
10149: LD_EXP 35
10153: PPUSH
10154: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10158: LD_INT 35
10160: PPUSH
10161: CALL_OW 67
// p := Inc ( p ) ;
10165: LD_ADDR_VAR 0 4
10169: PUSH
10170: LD_VAR 0 4
10174: PPUSH
10175: CALL 77726 0 1
10179: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10180: LD_EXP 31
10184: PPUSH
10185: LD_EXP 35
10189: PPUSH
10190: CALL_OW 296
10194: PUSH
10195: LD_INT 6
10197: LESS
10198: PUSH
10199: LD_VAR 0 4
10203: PUSH
10204: LD_INT 12
10206: GREATER
10207: OR
10208: IFFALSE 10158
// ComTurnUnit ( Kaia , Kurt ) ;
10210: LD_EXP 31
10214: PPUSH
10215: LD_EXP 35
10219: PPUSH
10220: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10224: LD_EXP 31
10228: PPUSH
10229: LD_STRING DK-scout-4
10231: PPUSH
10232: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10236: LD_EXP 35
10240: PPUSH
10241: LD_EXP 31
10245: PPUSH
10246: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10250: LD_EXP 35
10254: PPUSH
10255: LD_STRING DKs-scout-5
10257: PPUSH
10258: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10262: LD_EXP 31
10266: PPUSH
10267: LD_STRING DK-scout-6
10269: PPUSH
10270: CALL_OW 88
// if Mike then
10274: LD_EXP 28
10278: IFFALSE 10330
// begin Say ( Mike , DM-scout-7 ) ;
10280: LD_EXP 28
10284: PPUSH
10285: LD_STRING DM-scout-7
10287: PPUSH
10288: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10292: LD_EXP 31
10296: PPUSH
10297: LD_EXP 28
10301: PPUSH
10302: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10306: LD_EXP 31
10310: PPUSH
10311: LD_STRING DK-scout-8
10313: PPUSH
10314: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10318: LD_EXP 28
10322: PPUSH
10323: LD_STRING DM-scout-9
10325: PPUSH
10326: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10330: LD_INT 184
10332: PPUSH
10333: LD_INT 100
10335: PPUSH
10336: LD_INT 2
10338: PPUSH
10339: LD_INT 12
10341: NEG
10342: PPUSH
10343: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10347: LD_INT 184
10349: PPUSH
10350: LD_INT 100
10352: PPUSH
10353: LD_INT 2
10355: PPUSH
10356: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10360: LD_INT 184
10362: PPUSH
10363: LD_INT 100
10365: PPUSH
10366: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10370: LD_EXP 35
10374: PPUSH
10375: LD_STRING DKs-scout-10
10377: PPUSH
10378: CALL_OW 88
// wait ( 0 0$1 ) ;
10382: LD_INT 35
10384: PPUSH
10385: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10389: LD_INT 144
10391: PPUSH
10392: LD_INT 65
10394: PPUSH
10395: LD_INT 2
10397: PPUSH
10398: LD_INT 12
10400: NEG
10401: PPUSH
10402: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10406: LD_INT 144
10408: PPUSH
10409: LD_INT 65
10411: PPUSH
10412: LD_INT 2
10414: PPUSH
10415: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10419: LD_INT 144
10421: PPUSH
10422: LD_INT 65
10424: PPUSH
10425: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10429: LD_EXP 35
10433: PPUSH
10434: LD_STRING DKs-scout-11
10436: PPUSH
10437: CALL_OW 88
// wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10448: LD_EXP 35
10452: PPUSH
10453: CALL_OW 87
// if Mike and not Givi then
10457: LD_EXP 28
10461: PUSH
10462: LD_EXP 27
10466: NOT
10467: AND
10468: IFFALSE 10494
// begin Say ( Mike , DM-scout-a-1 ) ;
10470: LD_EXP 28
10474: PPUSH
10475: LD_STRING DM-scout-a-1
10477: PPUSH
10478: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10482: LD_EXP 26
10486: PPUSH
10487: LD_STRING DH-scout-a-2
10489: PPUSH
10490: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10494: LD_EXP 35
10498: PUSH
10499: LD_EXP 28
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: LD_INT 2
10510: PPUSH
10511: CALL_OW 235
// InGameOff ;
10515: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10519: LD_STRING Hill
10521: PPUSH
10522: CALL_OW 337
// Hint ( BunkerHill ) ;
10526: LD_STRING BunkerHill
10528: PPUSH
10529: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10533: LD_INT 22
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10543: LD_INT 20
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 424
// allowToPatrol := true ;
10553: LD_ADDR_EXP 12
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10561: LD_INT 3150
10563: PPUSH
10564: CALL_OW 67
// InitHc ;
10568: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10572: LD_ADDR_VAR 0 1
10576: PUSH
10577: DOUBLE
10578: LD_INT 1
10580: DEC
10581: ST_TO_ADDR
10582: LD_INT 3
10584: PUSH
10585: LD_INT 3
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: LD_INT 2
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: LD_OWVAR 67
10604: ARRAY
10605: PUSH
10606: FOR_TO
10607: IFFALSE 10935
// begin uc_side := 2 ;
10609: LD_ADDR_OWVAR 20
10613: PUSH
10614: LD_INT 2
10616: ST_TO_ADDR
// uc_nation := 2 ;
10617: LD_ADDR_OWVAR 21
10621: PUSH
10622: LD_INT 2
10624: ST_TO_ADDR
// if i = 1 then
10625: LD_VAR 0 1
10629: PUSH
10630: LD_INT 1
10632: EQUAL
10633: IFFALSE 10645
// sex := sex_male else
10635: LD_ADDR_VAR 0 5
10639: PUSH
10640: LD_INT 1
10642: ST_TO_ADDR
10643: GO 10653
// sex := false ;
10645: LD_ADDR_VAR 0 5
10649: PUSH
10650: LD_INT 0
10652: ST_TO_ADDR
// PrepareHuman ( sex , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10653: LD_VAR 0 5
10657: PPUSH
10658: LD_INT 1
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: LD_INT 1
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: LD_INT 3
10679: MOD
10680: PUSH
10681: LD_INT 1
10683: PLUS
10684: ARRAY
10685: PPUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: PUSH
10704: LD_OWVAR 67
10708: ARRAY
10709: PPUSH
10710: CALL_OW 380
// un := CreateHuman ;
10714: LD_ADDR_VAR 0 2
10718: PUSH
10719: CALL_OW 44
10723: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10724: LD_ADDR_EXP 38
10728: PUSH
10729: LD_EXP 38
10733: PUSH
10734: LD_VAR 0 2
10738: UNION
10739: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10740: LD_INT 2
10742: PPUSH
10743: LD_INT 2
10745: PPUSH
10746: LD_INT 13
10748: PPUSH
10749: LD_INT 2
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_VAR 0 1
10763: PUSH
10764: LD_INT 2
10766: MOD
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ARRAY
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: LD_INT 27
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 27
10784: PUSH
10785: LD_INT 23
10787: PUSH
10788: LD_INT 23
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: PUSH
10798: LD_OWVAR 67
10802: PUSH
10803: LD_INT 0
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: CALL_OW 12
10813: PLUS
10814: ARRAY
10815: PPUSH
10816: LD_INT 77
10818: PPUSH
10819: CALL 386 0 7
// veh := CreateVehicle ;
10823: LD_ADDR_VAR 0 3
10827: PUSH
10828: CALL_OW 45
10832: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10833: LD_VAR 0 3
10837: PPUSH
10838: LD_INT 2
10840: PPUSH
10841: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 178
10852: PPUSH
10853: LD_INT 2
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10866: LD_VAR 0 2
10870: PPUSH
10871: LD_VAR 0 3
10875: PPUSH
10876: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10880: LD_VAR 0 2
10884: PPUSH
10885: LD_INT 183
10887: PPUSH
10888: LD_INT 11
10890: PPUSH
10891: CALL_OW 111
// if i = 1 then
10895: LD_VAR 0 1
10899: PUSH
10900: LD_INT 1
10902: EQUAL
10903: IFFALSE 10926
// begin CenterOnUnits ( un ) ;
10905: LD_VAR 0 2
10909: PPUSH
10910: CALL_OW 85
// Say ( un , DArSol-Arrival-1 ) ;
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_STRING DArSol-Arrival-1
10921: PPUSH
10922: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
10926: LD_INT 70
10928: PPUSH
10929: CALL_OW 67
// end ;
10933: GO 10606
10935: POP
10936: POP
// end ;
10937: PPOPN 5
10939: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10940: LD_EXP 4
10944: PUSH
10945: LD_EXP 36
10949: PPUSH
10950: CALL_OW 302
10954: AND
10955: IFFALSE 11004
10957: GO 10959
10959: DISABLE
// begin DialogueOn ;
10960: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10964: LD_EXP 36
10968: PPUSH
10969: LD_STRING DA-lab-1
10971: PPUSH
10972: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_STRING DA-lab-2
10983: PPUSH
10984: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10988: LD_EXP 26
10992: PPUSH
10993: LD_STRING DH-lab-3
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// end ;
11004: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11005: LD_INT 17
11007: PPUSH
11008: LD_INT 2
11010: PPUSH
11011: CALL_OW 321
11015: PUSH
11016: LD_INT 2
11018: EQUAL
11019: IFFALSE 11151
11021: GO 11023
11023: DISABLE
11024: LD_INT 0
11026: PPUSH
// begin DialogueOn ;
11027: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11031: LD_EXP 36
11035: PPUSH
11036: LD_STRING DA-Cam-1
11038: PPUSH
11039: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11043: LD_EXP 36
11047: PPUSH
11048: LD_STRING DA-Cam-2
11050: PPUSH
11051: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11055: LD_EXP 36
11059: PPUSH
11060: LD_STRING DA-Cam-3
11062: PPUSH
11063: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11067: LD_EXP 26
11071: PPUSH
11072: LD_STRING DH-Cam-4
11074: PPUSH
11075: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11079: LD_EXP 31
11083: PPUSH
11084: LD_STRING DK-Cam-5
11086: PPUSH
11087: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11091: LD_EXP 31
11095: PPUSH
11096: LD_STRING DK-Cam-6
11098: PPUSH
11099: CALL_OW 88
// DialogueOff ;
11103: CALL_OW 7
// Query ( Camera ) ;
11107: LD_STRING Camera
11109: PPUSH
11110: CALL_OW 97
// hiddenCameraAllowed := true ;
11114: LD_ADDR_EXP 5
11118: PUSH
11119: LD_INT 1
11121: ST_TO_ADDR
// for i in camAreas do
11122: LD_ADDR_VAR 0 1
11126: PUSH
11127: LD_EXP 8
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11149
// SetAreaMapShow ( i , 1 ) ;
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 424
11147: GO 11132
11149: POP
11150: POP
// end ;
11151: PPOPN 1
11153: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11154: LD_EXP 8
11158: NOT
11159: PUSH
11160: LD_EXP 5
11164: AND
11165: IFFALSE 11263
11167: GO 11169
11169: DISABLE
11170: LD_INT 0
11172: PPUSH
// begin stop_talking := true ;
11173: LD_ADDR_OWVAR 56
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11181: LD_ADDR_VAR 0 1
11185: PUSH
11186: LD_INT 22
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 21
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 23
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: LIST
11220: PPUSH
11221: CALL_OW 69
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11246
// AddExperience ( i , 2 , 450 ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_INT 2
11236: PPUSH
11237: LD_INT 450
11239: PPUSH
11240: CALL_OW 492
11244: GO 11226
11246: POP
11247: POP
// stop_talking := false ;
11248: LD_ADDR_OWVAR 56
11252: PUSH
11253: LD_INT 0
11255: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11256: LD_STRING ACH_CAMERA
11258: PPUSH
11259: CALL_OW 543
// end ;
11263: PPOPN 1
11265: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11266: LD_EXP 9
11270: PUSH
11271: LD_EXP 11
11275: NOT
11276: AND
11277: IFFALSE 11336
11279: GO 11281
11281: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11282: LD_EXP 9
11286: PPUSH
11287: CALL_OW 250
11291: PPUSH
11292: LD_EXP 9
11296: PPUSH
11297: CALL_OW 251
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: LD_INT 6
11307: NEG
11308: PPUSH
11309: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11313: LD_EXP 9
11317: PPUSH
11318: CALL_OW 87
// wait ( 0 0$1 ) ;
11322: LD_INT 35
11324: PPUSH
11325: CALL_OW 67
// YouLost ( Spotted ) ;
11329: LD_STRING Spotted
11331: PPUSH
11332: CALL_OW 104
// end ;
11336: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11337: LD_INT 3
11339: PUSH
11340: LD_INT 6
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: LD_INT 2
11349: PPUSH
11350: LD_EXP 48
11354: PPUSH
11355: CALL 1050 0 3
11359: IFFALSE 11392
11361: GO 11363
11363: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11364: LD_ADDR_EXP 9
11368: PUSH
11369: LD_INT 3
11371: PUSH
11372: LD_INT 6
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: LD_INT 2
11381: PPUSH
11382: LD_EXP 48
11386: PPUSH
11387: CALL 1050 0 3
11391: ST_TO_ADDR
11392: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11393: LD_INT 22
11395: PUSH
11396: LD_INT 6
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 30
11405: PUSH
11406: LD_INT 32
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 24
11418: PUSH
11419: LD_INT 1000
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: PPUSH
11435: CALL_OW 69
11439: IFFALSE 11500
11441: GO 11443
11443: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11444: LD_ADDR_EXP 9
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 6
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 30
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 3
11471: PUSH
11472: LD_INT 24
11474: PUSH
11475: LD_INT 1000
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 69
11495: PUSH
11496: LD_INT 1
11498: ARRAY
11499: ST_TO_ADDR
11500: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11501: LD_EXP 9
11505: PUSH
11506: LD_INT 21
11508: PPUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 3
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 24
11524: PUSH
11525: LD_INT 1000
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PPUSH
11540: CALL_OW 70
11544: AND
11545: IFFALSE 11784
11547: GO 11549
11549: DISABLE
11550: LD_INT 0
11552: PPUSH
11553: PPUSH
11554: PPUSH
11555: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11556: LD_ADDR_VAR 0 4
11560: PUSH
11561: LD_EXP 43
11565: PUSH
11566: LD_EXP 45
11570: PUSH
11571: LD_EXP 46
11575: UNION
11576: PPUSH
11577: LD_INT 3
11579: PUSH
11580: LD_INT 25
11582: PUSH
11583: LD_INT 1
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PPUSH
11594: CALL_OW 72
11598: UNION
11599: ST_TO_ADDR
// for i in noncombat do
11600: LD_ADDR_VAR 0 1
11604: PUSH
11605: LD_VAR 0 4
11609: PUSH
11610: FOR_IN
11611: IFFALSE 11707
// begin if IsInUnit ( i ) then
11613: LD_VAR 0 1
11617: PPUSH
11618: CALL_OW 310
11622: IFFALSE 11633
// ComExitBuilding ( i ) ;
11624: LD_VAR 0 1
11628: PPUSH
11629: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11633: LD_VAR 0 1
11637: PPUSH
11638: LD_INT 114
11640: PPUSH
11641: LD_INT 97
11643: PPUSH
11644: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11648: LD_VAR 0 1
11652: PPUSH
11653: LD_INT 99
11655: PPUSH
11656: LD_INT 128
11658: PPUSH
11659: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11663: LD_VAR 0 1
11667: PPUSH
11668: LD_INT 91
11670: PPUSH
11671: LD_INT 145
11673: PPUSH
11674: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11678: LD_VAR 0 1
11682: PPUSH
11683: LD_INT 82
11685: PPUSH
11686: LD_INT 153
11688: PPUSH
11689: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11693: LD_VAR 0 1
11697: PPUSH
11698: LD_INT 16
11700: PPUSH
11701: CALL_OW 173
// end ;
11705: GO 11610
11707: POP
11708: POP
// if not allowHeikeAttack then
11709: LD_EXP 11
11713: NOT
11714: IFFALSE 11718
// exit ;
11716: GO 11784
// wait ( 0 0$05 ) ;
11718: LD_INT 175
11720: PPUSH
11721: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11725: LD_EXP 41
11729: PPUSH
11730: LD_STRING D9a-Kur-1
11732: PPUSH
11733: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11737: LD_EXP 44
11741: PPUSH
11742: LD_STRING D9a-Bur-1
11744: PPUSH
11745: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11749: LD_EXP 41
11753: PPUSH
11754: LD_STRING D9a-Kur-2
11756: PPUSH
11757: CALL_OW 94
// omicronFall := true ;
11761: LD_ADDR_EXP 13
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11769: LD_INT 105
11771: PPUSH
11772: CALL_OW 67
// retreatFromOmicron := true ;
11776: LD_ADDR_EXP 20
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// end ;
11784: PPOPN 4
11786: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11787: LD_INT 16
11789: PPUSH
11790: LD_INT 3
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_INT 2
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 23
11809: PUSH
11810: LD_INT 3
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 70
11825: IFFALSE 11908
11827: GO 11829
11829: DISABLE
11830: LD_INT 0
11832: PPUSH
// begin enable ;
11833: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_INT 16
11841: PPUSH
11842: LD_INT 3
11844: PUSH
11845: LD_INT 22
11847: PUSH
11848: LD_INT 2
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 23
11861: PUSH
11862: LD_INT 3
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL_OW 70
11877: PUSH
11878: FOR_IN
11879: IFFALSE 11906
// begin escapeCounter := escapeCounter + 1 ;
11881: LD_ADDR_EXP 19
11885: PUSH
11886: LD_EXP 19
11890: PUSH
11891: LD_INT 1
11893: PLUS
11894: ST_TO_ADDR
// RemoveUnit ( i ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 64
// end ;
11904: GO 11878
11906: POP
11907: POP
// end ;
11908: PPOPN 1
11910: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11911: LD_OWVAR 1
11915: PUSH
11916: LD_INT 13650
11918: PUSH
11919: LD_INT 0
11921: PPUSH
11922: LD_INT 3150
11924: PPUSH
11925: CALL_OW 12
11929: PLUS
11930: GREATEREQUAL
11931: IFFALSE 11940
11933: GO 11935
11935: DISABLE
// SmallAmericanReinforcements ;
11936: CALL 7141 0 0
11940: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11941: LD_OWVAR 1
11945: PUSH
11946: LD_INT 31500
11948: PUSH
11949: LD_INT 29400
11951: PUSH
11952: LD_INT 27300
11954: PUSH
11955: LD_INT 25200
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: PUSH
11964: LD_OWVAR 67
11968: ARRAY
11969: GREATEREQUAL
11970: IFFALSE 12035
11972: GO 11974
11974: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11975: LD_EXP 49
11979: PPUSH
11980: LD_INT 21
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 72
11994: PPUSH
11995: LD_INT 62
11997: PPUSH
11998: LD_INT 22
12000: PPUSH
12001: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12005: LD_EXP 50
12009: PPUSH
12010: LD_INT 69
12012: PPUSH
12013: LD_INT 27
12015: PPUSH
12016: CALL_OW 111
// wait ( 1 1$00 ) ;
12020: LD_INT 2100
12022: PPUSH
12023: CALL_OW 67
// startAttackOnOmicron := true ;
12027: LD_ADDR_EXP 6
12031: PUSH
12032: LD_INT 1
12034: ST_TO_ADDR
// end ;
12035: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12036: LD_EXP 22
12040: PUSH
12041: LD_INT 0
12043: EQUAL
12044: IFFALSE 14094
12046: GO 12048
12048: DISABLE
12049: LD_INT 0
12051: PPUSH
12052: PPUSH
12053: PPUSH
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12058: LD_INT 5
12060: PPUSH
12061: LD_INT 2
12063: PPUSH
12064: CALL_OW 343
// PrepareOmarForces ;
12068: CALL 1652 0 0
// wait ( 0 0$03 ) ;
12072: LD_INT 105
12074: PPUSH
12075: CALL_OW 67
// allowHeikeAttack := true ;
12079: LD_ADDR_EXP 11
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// activeGrishkoAI := false ;
12087: LD_ADDR_EXP 10
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12095: LD_INT 20
12097: PPUSH
12098: LD_INT 0
12100: PPUSH
12101: CALL_OW 424
// if not hillBase then
12105: LD_EXP 15
12109: NOT
12110: IFFALSE 12119
// ChangeMissionObjectives ( HillDone ) ;
12112: LD_STRING HillDone
12114: PPUSH
12115: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12119: LD_EXP 34
12123: PPUSH
12124: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12128: LD_ADDR_VAR 0 1
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 1
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: CALL_OW 69
12161: PUSH
12162: FOR_IN
12163: IFFALSE 12187
// if HasTask ( i ) then
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 314
12174: IFFALSE 12185
// ComHold ( i ) ;
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 140
12185: GO 12162
12187: POP
12188: POP
// DialogueOn ;
12189: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12193: LD_EXP 34
12197: PPUSH
12198: LD_STRING DO-assault-1
12200: PPUSH
12201: CALL_OW 94
// DialogueOff ;
12205: CALL_OW 7
// game_speed := 4 ;
12209: LD_ADDR_OWVAR 65
12213: PUSH
12214: LD_INT 4
12216: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: LD_EXP 47
12226: PPUSH
12227: LD_INT 3
12229: PUSH
12230: LD_INT 54
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 72
12244: PUSH
12245: FOR_IN
12246: IFFALSE 12265
// ComMoveXY ( i , 226 , 114 ) ;
12248: LD_VAR 0 1
12252: PPUSH
12253: LD_INT 226
12255: PPUSH
12256: LD_INT 114
12258: PPUSH
12259: CALL_OW 111
12263: GO 12245
12265: POP
12266: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12267: LD_EXP 42
12271: PPUSH
12272: LD_INT 22
12274: PUSH
12275: LD_INT 6
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 30
12284: PUSH
12285: LD_INT 4
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 69
12300: PPUSH
12301: LD_EXP 42
12305: PPUSH
12306: CALL_OW 74
12310: PPUSH
12311: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12315: LD_STRING Attack
12317: PPUSH
12318: CALL_OW 337
// music_class := music_combat ;
12322: LD_ADDR_OWVAR 72
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// music_nat := 4 ;
12330: LD_ADDR_OWVAR 71
12334: PUSH
12335: LD_INT 4
12337: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12338: LD_INT 5
12340: PPUSH
12341: LD_EXP 42
12345: PPUSH
12346: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12350: LD_INT 6
12352: PPUSH
12353: LD_EXP 39
12357: PPUSH
12358: LD_INT 25
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 72
12372: PUSH
12373: LD_INT 4
12375: ARRAY
12376: PPUSH
12377: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_EXP 39
12390: PPUSH
12391: LD_INT 3
12393: PUSH
12394: LD_INT 25
12396: PUSH
12397: LD_INT 4
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL_OW 72
12412: PUSH
12413: FOR_IN
12414: IFFALSE 12433
// ComAgressiveMove ( i , 221 , 110 ) ;
12416: LD_VAR 0 1
12420: PPUSH
12421: LD_INT 221
12423: PPUSH
12424: LD_INT 110
12426: PPUSH
12427: CALL_OW 114
12431: GO 12413
12433: POP
12434: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12435: LD_EXP 39
12439: PPUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 4
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 72
12454: PPUSH
12455: LD_INT 214
12457: PPUSH
12458: LD_INT 124
12460: PPUSH
12461: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12465: LD_EXP 39
12469: PPUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 72
12484: PUSH
12485: LD_INT 4
12487: ARRAY
12488: PPUSH
12489: LD_INT 214
12491: PPUSH
12492: LD_INT 114
12494: PPUSH
12495: LD_INT 0
12497: PPUSH
12498: CALL_OW 132
// if IsOk ( Grishko ) then
12502: LD_EXP 42
12506: PPUSH
12507: CALL_OW 302
12511: IFFALSE 12537
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12513: LD_EXP 42
12517: PPUSH
12518: LD_STRING D9-Gri-1
12520: PPUSH
12521: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12525: LD_EXP 41
12529: PPUSH
12530: LD_STRING D9-Kur-1
12532: PPUSH
12533: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12537: LD_INT 35
12539: PPUSH
12540: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12544: LD_EXP 34
12548: PPUSH
12549: LD_INT 233
12551: PPUSH
12552: LD_INT 130
12554: PPUSH
12555: CALL_OW 114
// if IsOk ( Grishko ) then
12559: LD_EXP 42
12563: PPUSH
12564: CALL_OW 302
12568: IFFALSE 12594
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12570: LD_EXP 42
12574: PPUSH
12575: LD_STRING D9-Gri-2
12577: PPUSH
12578: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12582: LD_EXP 41
12586: PPUSH
12587: LD_STRING D9-Kur-2
12589: PPUSH
12590: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12594: LD_EXP 42
12598: PPUSH
12599: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12603: LD_EXP 42
12607: PPUSH
12608: LD_INT 211
12610: PPUSH
12611: LD_INT 104
12613: PPUSH
12614: CALL_OW 171
// AddComHold ( Grishko ) ;
12618: LD_EXP 42
12622: PPUSH
12623: CALL_OW 200
// repeat wait ( 3 ) ;
12627: LD_INT 3
12629: PPUSH
12630: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12634: LD_EXP 42
12638: PPUSH
12639: CALL_OW 310
12643: NOT
12644: IFFALSE 12627
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12646: LD_EXP 39
12650: PPUSH
12651: LD_INT 34
12653: PUSH
12654: LD_INT 26
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 72
12665: PPUSH
12666: LD_EXP 42
12670: PPUSH
12671: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12675: LD_EXP 39
12679: PPUSH
12680: LD_INT 34
12682: PUSH
12683: LD_INT 26
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 72
12694: PPUSH
12695: LD_INT 215
12697: PPUSH
12698: LD_INT 106
12700: PPUSH
12701: CALL_OW 174
// repeat wait ( 3 ) ;
12705: LD_INT 3
12707: PPUSH
12708: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12712: LD_EXP 42
12716: PPUSH
12717: CALL_OW 256
12721: PUSH
12722: LD_INT 1000
12724: LESS
12725: IFFALSE 12705
// NormalAttack ( 5 , Grishko ) ;
12727: LD_INT 5
12729: PPUSH
12730: LD_EXP 42
12734: PPUSH
12735: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12739: LD_INT 6
12741: PPUSH
12742: LD_EXP 39
12746: PPUSH
12747: LD_INT 25
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 72
12761: PUSH
12762: LD_INT 4
12764: ARRAY
12765: PPUSH
12766: CALL_OW 472
// if IsOk ( Grishko ) then
12770: LD_EXP 42
12774: PPUSH
12775: CALL_OW 302
12779: IFFALSE 12805
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12781: LD_EXP 42
12785: PPUSH
12786: LD_STRING D9-Gri-3
12788: PPUSH
12789: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12793: LD_EXP 41
12797: PPUSH
12798: LD_STRING D9-Kur-3
12800: PPUSH
12801: CALL_OW 94
// end ; music_class := music_auto ;
12805: LD_ADDR_OWVAR 72
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// music_nat := music_auto ;
12813: LD_ADDR_OWVAR 71
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// for i in omarSquad do
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: LD_EXP 39
12830: PUSH
12831: FOR_IN
12832: IFFALSE 12974
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12834: LD_VAR 0 1
12838: PPUSH
12839: CALL_OW 247
12843: PUSH
12844: LD_INT 2
12846: EQUAL
12847: PUSH
12848: LD_VAR 0 1
12852: PPUSH
12853: CALL_OW 256
12857: PUSH
12858: LD_INT 1000
12860: LESS
12861: AND
12862: IFFALSE 12928
// begin driver := IsDrivenBy ( i ) ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 311
12878: ST_TO_ADDR
// veh := i ;
12879: LD_ADDR_VAR 0 3
12883: PUSH
12884: LD_VAR 0 1
12888: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12889: LD_VAR 0 2
12893: PPUSH
12894: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12898: LD_VAR 0 2
12902: PPUSH
12903: LD_VAR 0 3
12907: PPUSH
12908: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12912: LD_VAR 0 2
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: CALL_OW 180
// end else
12926: GO 12972
// if GetLives ( i ) < 500 then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 256
12937: PUSH
12938: LD_INT 500
12940: LESS
12941: IFFALSE 12972
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12943: LD_EXP 39
12947: PPUSH
12948: LD_INT 25
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 72
12962: PPUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 188
// end ; end ;
12972: GO 12831
12974: POP
12975: POP
// repeat wait ( 0 0$1 ) ;
12976: LD_INT 35
12978: PPUSH
12979: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12983: LD_EXP 39
12987: PPUSH
12988: LD_INT 3
12990: PUSH
12991: LD_INT 24
12993: PUSH
12994: LD_INT 1000
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 2
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 72
13023: NOT
13024: PUSH
13025: LD_EXP 39
13029: PPUSH
13030: LD_INT 3
13032: PUSH
13033: LD_INT 24
13035: PUSH
13036: LD_INT 250
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 72
13051: NOT
13052: AND
13053: IFFALSE 12976
// wait ( 0 0$2 ) ;
13055: LD_INT 70
13057: PPUSH
13058: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13062: LD_ADDR_VAR 0 5
13066: PUSH
13067: LD_EXP 39
13071: PPUSH
13072: LD_INT 58
13074: PUSH
13075: EMPTY
13076: LIST
13077: PUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 72
13096: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13097: LD_ADDR_VAR 0 6
13101: PUSH
13102: LD_EXP 39
13106: PPUSH
13107: LD_INT 25
13109: PUSH
13110: LD_INT 3
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 3
13119: PUSH
13120: LD_INT 55
13122: PUSH
13123: EMPTY
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PPUSH
13134: CALL_OW 72
13138: ST_TO_ADDR
// for i := 1 to tmp do
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_VAR 0 5
13153: PUSH
13154: FOR_TO
13155: IFFALSE 13185
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13157: LD_VAR 0 6
13161: PUSH
13162: LD_VAR 0 1
13166: ARRAY
13167: PPUSH
13168: LD_VAR 0 5
13172: PUSH
13173: LD_VAR 0 1
13177: ARRAY
13178: PPUSH
13179: CALL_OW 120
13183: GO 13154
13185: POP
13186: POP
// wait ( 0 0$5 ) ;
13187: LD_INT 175
13189: PPUSH
13190: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13194: LD_EXP 39
13198: PPUSH
13199: LD_INT 199
13201: PPUSH
13202: LD_INT 141
13204: PPUSH
13205: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13209: LD_EXP 34
13213: PPUSH
13214: LD_INT 190
13216: PPUSH
13217: LD_INT 143
13219: PPUSH
13220: CALL_OW 114
// AddComHold ( Omar ) ;
13224: LD_EXP 34
13228: PPUSH
13229: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13233: LD_EXP 39
13237: PPUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: PPUSH
13266: CALL_OW 72
13270: PPUSH
13271: LD_INT 161
13273: PPUSH
13274: LD_INT 130
13276: PPUSH
13277: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13281: LD_EXP 39
13285: PPUSH
13286: LD_INT 25
13288: PUSH
13289: LD_INT 1
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 72
13300: PPUSH
13301: LD_INT 163
13303: PPUSH
13304: LD_INT 122
13306: PPUSH
13307: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13311: LD_EXP 39
13315: PPUSH
13316: LD_INT 25
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PPUSH
13326: CALL_OW 72
13330: PUSH
13331: LD_INT 4
13333: ARRAY
13334: PPUSH
13335: LD_INT 165
13337: PPUSH
13338: LD_INT 118
13340: PPUSH
13341: LD_INT 0
13343: PPUSH
13344: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13348: LD_EXP 39
13352: PPUSH
13353: LD_INT 25
13355: PUSH
13356: LD_INT 1
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 72
13367: PUSH
13368: LD_INT 4
13370: ARRAY
13371: PPUSH
13372: LD_INT 159
13374: PPUSH
13375: LD_INT 116
13377: PPUSH
13378: LD_INT 0
13380: PPUSH
13381: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13385: LD_EXP 39
13389: PPUSH
13390: LD_INT 21
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 72
13404: PPUSH
13405: LD_INT 169
13407: PPUSH
13408: LD_INT 114
13410: PPUSH
13411: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13415: LD_INT 35
13417: PPUSH
13418: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13422: LD_ADDR_VAR 0 5
13426: PUSH
13427: LD_EXP 39
13431: PPUSH
13432: LD_INT 25
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PPUSH
13442: CALL_OW 72
13446: ST_TO_ADDR
// for i in tmp do
13447: LD_ADDR_VAR 0 1
13451: PUSH
13452: LD_VAR 0 5
13456: PUSH
13457: FOR_IN
13458: IFFALSE 13555
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13460: LD_VAR 0 1
13464: PPUSH
13465: CALL_OW 256
13469: PUSH
13470: LD_INT 600
13472: LESS
13473: PUSH
13474: LD_VAR 0 1
13478: PPUSH
13479: LD_INT 161
13481: PPUSH
13482: LD_INT 130
13484: PPUSH
13485: CALL_OW 297
13489: PUSH
13490: LD_INT 6
13492: GREATER
13493: AND
13494: IFFALSE 13511
// ComMoveXY ( i , 161 , 130 ) ;
13496: LD_VAR 0 1
13500: PPUSH
13501: LD_INT 161
13503: PPUSH
13504: LD_INT 130
13506: PPUSH
13507: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 256
13520: PUSH
13521: LD_INT 1000
13523: EQUAL
13524: PUSH
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 314
13534: NOT
13535: AND
13536: IFFALSE 13553
// ComAgressiveMove ( i , 160 , 109 ) ;
13538: LD_VAR 0 1
13542: PPUSH
13543: LD_INT 160
13545: PPUSH
13546: LD_INT 109
13548: PPUSH
13549: CALL_OW 114
// end ;
13553: GO 13457
13555: POP
13556: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13557: LD_ADDR_VAR 0 5
13561: PUSH
13562: LD_EXP 39
13566: PPUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PPUSH
13577: CALL_OW 72
13581: ST_TO_ADDR
// for i in tmp do
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_VAR 0 5
13591: PUSH
13592: FOR_IN
13593: IFFALSE 13859
// begin tmp2 := IsDrivenBy ( i ) ;
13595: LD_ADDR_VAR 0 6
13599: PUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: CALL_OW 311
13609: ST_TO_ADDR
// if not tmp2 then
13610: LD_VAR 0 6
13614: NOT
13615: IFFALSE 13619
// continue ;
13617: GO 13592
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13619: LD_VAR 0 1
13623: PPUSH
13624: CALL_OW 256
13628: PUSH
13629: LD_INT 600
13631: GREATEREQUAL
13632: PUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 110
13642: PUSH
13643: LD_INT 1
13645: EQUAL
13646: AND
13647: IFFALSE 13661
// SetTag ( i , 0 ) ;
13649: LD_VAR 0 1
13653: PPUSH
13654: LD_INT 0
13656: PPUSH
13657: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 256
13670: PUSH
13671: LD_INT 600
13673: GREATEREQUAL
13674: PUSH
13675: LD_VAR 0 1
13679: PPUSH
13680: CALL_OW 110
13684: NOT
13685: AND
13686: IFFALSE 13712
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13688: LD_VAR 0 1
13692: PPUSH
13693: LD_VAR 0 7
13697: PPUSH
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 74
13707: PPUSH
13708: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13712: LD_VAR 0 1
13716: PPUSH
13717: CALL_OW 256
13721: PUSH
13722: LD_INT 600
13724: LESS
13725: PUSH
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 110
13735: NOT
13736: AND
13737: IFFALSE 13766
// begin SetTag ( i , 1 ) ;
13739: LD_VAR 0 1
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13751: LD_VAR 0 1
13755: PPUSH
13756: LD_INT 202
13758: PPUSH
13759: LD_INT 150
13761: PPUSH
13762: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13766: LD_VAR 0 1
13770: PPUSH
13771: CALL_OW 110
13775: PUSH
13776: LD_INT 1
13778: EQUAL
13779: PUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: LD_INT 202
13787: PPUSH
13788: LD_INT 150
13790: PPUSH
13791: CALL_OW 297
13795: PUSH
13796: LD_INT 6
13798: LESS
13799: AND
13800: PUSH
13801: LD_VAR 0 6
13805: AND
13806: IFFALSE 13857
// begin ComExitVehicle ( tmp2 ) ;
13808: LD_VAR 0 6
13812: PPUSH
13813: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13817: LD_VAR 0 6
13821: PPUSH
13822: LD_VAR 0 1
13826: PPUSH
13827: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13831: LD_VAR 0 6
13835: PPUSH
13836: LD_INT 700
13838: PPUSH
13839: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13843: LD_VAR 0 6
13847: PPUSH
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 180
// end ; end ;
13857: GO 13592
13859: POP
13860: POP
// until kirovDestroyed ;
13861: LD_EXP 16
13865: IFFALSE 13415
// repeat wait ( 0 0$1 ) ;
13867: LD_INT 35
13869: PPUSH
13870: CALL_OW 67
// for i in omarSquad union Omar do
13874: LD_ADDR_VAR 0 1
13878: PUSH
13879: LD_EXP 39
13883: PUSH
13884: LD_EXP 34
13888: UNION
13889: PUSH
13890: FOR_IN
13891: IFFALSE 14061
// if IsInArea ( i , southRoadArea ) then
13893: LD_VAR 0 1
13897: PPUSH
13898: LD_INT 15
13900: PPUSH
13901: CALL_OW 308
13905: IFFALSE 13918
// RemoveUnit ( i ) else
13907: LD_VAR 0 1
13911: PPUSH
13912: CALL_OW 64
13916: GO 14059
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13918: LD_VAR 0 1
13922: PPUSH
13923: CALL_OW 257
13927: PUSH
13928: LD_INT 3
13930: EQUAL
13931: PUSH
13932: LD_VAR 0 1
13936: PPUSH
13937: CALL_OW 310
13941: NOT
13942: AND
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_INT 5
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 24
13956: PUSH
13957: LD_INT 251
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 58
13976: PUSH
13977: EMPTY
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: AND
13991: IFFALSE 14044
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13993: LD_VAR 0 1
13997: PPUSH
13998: LD_INT 22
14000: PUSH
14001: LD_INT 5
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 58
14020: PUSH
14021: EMPTY
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: PUSH
14034: LD_INT 1
14036: ARRAY
14037: PPUSH
14038: CALL_OW 120
14042: GO 14059
// ComMoveXY ( i , 208 , 162 ) ;
14044: LD_VAR 0 1
14048: PPUSH
14049: LD_INT 208
14051: PPUSH
14052: LD_INT 162
14054: PPUSH
14055: CALL_OW 111
// end ;
14059: GO 13890
14061: POP
14062: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14063: LD_INT 22
14065: PUSH
14066: LD_INT 5
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 21
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: NOT
14092: IFFALSE 13867
// end ;
14094: PPOPN 7
14096: END
// every 0 0$1 trigger IsDead ( kirov ) do
14097: LD_INT 71
14099: PPUSH
14100: CALL_OW 301
14104: IFFALSE 14121
14106: GO 14108
14108: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14109: LD_EXP 26
14113: PPUSH
14114: LD_STRING DH-1-Kirov
14116: PPUSH
14117: CALL_OW 88
14121: END
// every 0 0$1 trigger See ( 2 , beria ) do
14122: LD_INT 2
14124: PPUSH
14125: LD_INT 106
14127: PPUSH
14128: CALL_OW 292
14132: IFFALSE 14149
14134: GO 14136
14136: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14137: LD_EXP 26
14141: PPUSH
14142: LD_STRING DH-1-Beria
14144: PPUSH
14145: CALL_OW 88
14149: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14150: LD_INT 2
14152: PPUSH
14153: LD_INT 112
14155: PPUSH
14156: CALL_OW 292
14160: IFFALSE 14427
14162: GO 14164
14164: DISABLE
// begin DialogueOn ;
14165: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14169: LD_INT 112
14171: PPUSH
14172: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14176: LD_EXP 26
14180: PPUSH
14181: LD_STRING DH-1-Kagan
14183: PPUSH
14184: CALL_OW 88
// if Kamil then
14188: LD_EXP 30
14192: IFFALSE 14230
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14194: LD_EXP 30
14198: PPUSH
14199: LD_STRING DKam-Kagan-2
14201: PPUSH
14202: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14206: LD_EXP 27
14210: PPUSH
14211: LD_STRING DG-Kagan-3
14213: PPUSH
14214: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14218: LD_EXP 27
14222: PPUSH
14223: LD_STRING DG-Kagan-4
14225: PPUSH
14226: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14230: LD_STRING KaganBase
14232: PPUSH
14233: CALL_OW 97
14237: PUSH
14238: LD_INT 1
14240: DOUBLE
14241: EQUAL
14242: IFTRUE 14246
14244: GO 14341
14246: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14247: LD_EXP 26
14251: PPUSH
14252: LD_STRING DH-Kagan-5
14254: PPUSH
14255: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14259: LD_EXP 26
14263: PPUSH
14264: LD_STRING DH-Kagan-6
14266: PPUSH
14267: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14271: LD_EXP 37
14275: PPUSH
14276: LD_STRING DShar-Kagan-7
14278: PPUSH
14279: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14283: LD_EXP 26
14287: PPUSH
14288: LD_STRING DH-Kagan-8
14290: PPUSH
14291: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14295: LD_EXP 26
14299: PPUSH
14300: LD_STRING DH-Kagan-9
14302: PPUSH
14303: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14307: LD_EXP 37
14311: PPUSH
14312: LD_STRING DShar-Kagan-10
14314: PPUSH
14315: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14319: LD_EXP 26
14323: PPUSH
14324: LD_STRING DH-Kagan-11
14326: PPUSH
14327: CALL_OW 88
// kaganCaptured := true ;
14331: LD_ADDR_EXP 24
14335: PUSH
14336: LD_INT 1
14338: ST_TO_ADDR
// end ; 2 :
14339: GO 14423
14341: LD_INT 2
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14422
14349: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14350: LD_INT 22
14352: PUSH
14353: LD_INT 8
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: PUSH
14365: LD_EXP 36
14369: AND
14370: IFFALSE 14384
// Say ( Heike , DH-Kagan-a-5 ) ;
14372: LD_EXP 26
14376: PPUSH
14377: LD_STRING DH-Kagan-a-5
14379: PPUSH
14380: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14384: LD_EXP 26
14388: PPUSH
14389: LD_STRING DH-Kagan-a-6
14391: PPUSH
14392: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14396: LD_EXP 26
14400: PPUSH
14401: LD_STRING DH-Kagan-a-7
14403: PPUSH
14404: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14408: LD_EXP 27
14412: PPUSH
14413: LD_STRING DG-Kagan-a-8
14415: PPUSH
14416: CALL_OW 88
// end ; end ;
14420: GO 14423
14422: POP
// DialogueOff ;
14423: CALL_OW 7
// end ;
14427: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14428: LD_EXP 18
14432: PUSH
14433: LD_INT 112
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 2
14443: EQUAL
14444: OR
14445: IFFALSE 14457
14447: GO 14449
14449: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14450: LD_STRING KaganDone
14452: PPUSH
14453: CALL_OW 337
14457: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14458: LD_EXP 6
14462: PUSH
14463: LD_EXP 49
14467: PPUSH
14468: LD_INT 95
14470: PUSH
14471: LD_INT 19
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PPUSH
14478: CALL_OW 72
14482: AND
14483: IFFALSE 14560
14485: GO 14487
14487: DISABLE
// begin DialogueOn ;
14488: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14492: LD_INT 63
14494: PPUSH
14495: LD_INT 32
14497: PPUSH
14498: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14502: LD_INT 63
14504: PPUSH
14505: LD_INT 32
14507: PPUSH
14508: LD_INT 2
14510: PPUSH
14511: LD_INT 12
14513: NEG
14514: PPUSH
14515: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14519: LD_EXP 26
14523: PPUSH
14524: LD_STRING DH-Omicron-1
14526: PPUSH
14527: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14531: LD_EXP 28
14535: PPUSH
14536: LD_STRING DM-Omicron-2
14538: PPUSH
14539: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14543: LD_INT 63
14545: PPUSH
14546: LD_INT 32
14548: PPUSH
14549: LD_INT 2
14551: PPUSH
14552: CALL_OW 331
// DialogueOff ;
14556: CALL_OW 7
// end ;
14560: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14561: LD_INT 2
14563: PPUSH
14564: LD_EXP 51
14568: PPUSH
14569: CALL_OW 292
14573: PUSH
14574: LD_EXP 51
14578: PPUSH
14579: CALL_OW 255
14583: PUSH
14584: LD_INT 2
14586: EQUAL
14587: OR
14588: PUSH
14589: LD_INT 106
14591: PPUSH
14592: CALL_OW 255
14596: PUSH
14597: LD_INT 2
14599: EQUAL
14600: OR
14601: PUSH
14602: LD_EXP 51
14606: PPUSH
14607: CALL_OW 302
14611: AND
14612: PUSH
14613: LD_EXP 26
14617: PPUSH
14618: CALL_OW 302
14622: AND
14623: PUSH
14624: LD_EXP 36
14628: PPUSH
14629: CALL_OW 302
14633: AND
14634: IFFALSE 15373
14636: GO 14638
14638: DISABLE
14639: LD_INT 0
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
// begin DialogueOn ;
14646: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14650: LD_INT 111
14652: PPUSH
14653: LD_INT 90
14655: PPUSH
14656: LD_INT 2
14658: PPUSH
14659: LD_INT 6
14661: NEG
14662: PPUSH
14663: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14667: LD_INT 111
14669: PPUSH
14670: LD_INT 90
14672: PPUSH
14673: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14677: LD_EXP 36
14681: PPUSH
14682: LD_STRING DA-Cap-1
14684: PPUSH
14685: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14689: LD_EXP 26
14693: PPUSH
14694: LD_STRING DH-Cap-2
14696: PPUSH
14697: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14701: LD_INT 111
14703: PPUSH
14704: LD_INT 90
14706: PPUSH
14707: LD_INT 2
14709: PPUSH
14710: CALL_OW 331
// DialogueOff ;
14714: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14725: LD_EXP 17
14729: PUSH
14730: LD_INT 106
14732: PPUSH
14733: CALL_OW 255
14737: PUSH
14738: LD_INT 2
14740: EQUAL
14741: OR
14742: PUSH
14743: LD_EXP 51
14747: PPUSH
14748: CALL_OW 255
14752: PUSH
14753: LD_INT 2
14755: EQUAL
14756: OR
14757: PUSH
14758: LD_EXP 51
14762: PPUSH
14763: CALL_OW 302
14767: AND
14768: PUSH
14769: LD_EXP 36
14773: PPUSH
14774: CALL_OW 302
14778: AND
14779: PUSH
14780: LD_INT 2
14782: PPUSH
14783: CALL_OW 463
14787: NOT
14788: AND
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_INT 3
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 21
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 92
14812: PUSH
14813: LD_INT 110
14815: PUSH
14816: LD_INT 95
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: NOT
14838: AND
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 3
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 30
14852: PUSH
14853: LD_INT 5
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 92
14862: PUSH
14863: LD_INT 110
14865: PUSH
14866: LD_INT 95
14868: PUSH
14869: LD_INT 12
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: NOT
14888: AND
14889: IFFALSE 14718
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_EXP 38
14900: PUSH
14901: LD_EXP 29
14905: PUSH
14906: LD_EXP 30
14910: PUSH
14911: LD_EXP 32
14915: PUSH
14916: LD_EXP 31
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: UNION
14927: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_VAR 0 2
14937: PPUSH
14938: LD_INT 50
14940: PUSH
14941: EMPTY
14942: LIST
14943: PPUSH
14944: CALL_OW 72
14948: ST_TO_ADDR
// if tmp < 2 then
14949: LD_VAR 0 2
14953: PUSH
14954: LD_INT 2
14956: LESS
14957: IFFALSE 14969
// q := 2 else
14959: LD_ADDR_VAR 0 4
14963: PUSH
14964: LD_INT 2
14966: ST_TO_ADDR
14967: GO 14982
// q := Query ( LabCap ) ;
14969: LD_ADDR_VAR 0 4
14973: PUSH
14974: LD_STRING LabCap
14976: PPUSH
14977: CALL_OW 97
14981: ST_TO_ADDR
// case q of 1 :
14982: LD_VAR 0 4
14986: PUSH
14987: LD_INT 1
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15337
14995: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14996: LD_INT 2
14998: PPUSH
14999: LD_EXP 51
15003: PPUSH
15004: CALL_OW 471
// labCaptured := true ;
15008: LD_ADDR_EXP 21
15012: PUSH
15013: LD_INT 1
15015: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15016: LD_EXP 26
15020: PPUSH
15021: LD_STRING DH-Cap-a-1
15023: PPUSH
15024: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15028: LD_EXP 36
15032: PPUSH
15033: LD_STRING DA-Cap-a-2
15035: PPUSH
15036: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
15040: LD_ADDR_VAR 0 5
15044: PUSH
15045: LD_EXP 36
15049: PUSH
15050: LD_INT -3
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT -2
15059: PUSH
15060: LD_INT -4
15062: PUSH
15063: LD_EXP 26
15067: PUSH
15068: LD_EXP 27
15072: PUSH
15073: LD_EXP 35
15077: PUSH
15078: LD_EXP 33
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: ADD
15091: PUSH
15092: LD_INT -3
15094: PUSH
15095: EMPTY
15096: LIST
15097: ADD
15098: PUSH
15099: LD_VAR 0 2
15103: ADD
15104: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_STRING Select two characters to go with Aviradze
15112: PPUSH
15113: LD_INT 2
15115: PPUSH
15116: LD_INT 2
15118: PPUSH
15119: LD_VAR 0 5
15123: PPUSH
15124: EMPTY
15125: PPUSH
15126: CALL_OW 42
15130: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15131: LD_EXP 51
15135: PPUSH
15136: LD_INT 8
15138: PPUSH
15139: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15143: LD_EXP 36
15147: PPUSH
15148: LD_INT 8
15150: PPUSH
15151: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15155: LD_ADDR_EXP 40
15159: PUSH
15160: LD_EXP 36
15164: PUSH
15165: EMPTY
15166: LIST
15167: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15168: LD_EXP 36
15172: PPUSH
15173: CALL_OW 310
15177: IFFALSE 15188
// ComExit ( Aviradze ) ;
15179: LD_EXP 36
15183: PPUSH
15184: CALL 76763 0 1
// wait ( 3 ) ;
15188: LD_INT 3
15190: PPUSH
15191: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15195: LD_EXP 36
15199: PPUSH
15200: LD_EXP 51
15204: PPUSH
15205: CALL_OW 120
// for i := 1 to 2 do
15209: LD_ADDR_VAR 0 1
15213: PUSH
15214: DOUBLE
15215: LD_INT 1
15217: DEC
15218: ST_TO_ADDR
15219: LD_INT 2
15221: PUSH
15222: FOR_TO
15223: IFFALSE 15326
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15225: LD_ADDR_EXP 40
15229: PUSH
15230: LD_EXP 40
15234: PUSH
15235: LD_VAR 0 3
15239: PUSH
15240: LD_VAR 0 1
15244: ARRAY
15245: UNION
15246: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15247: LD_VAR 0 3
15251: PUSH
15252: LD_VAR 0 1
15256: ARRAY
15257: PPUSH
15258: LD_INT 8
15260: PPUSH
15261: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_VAR 0 1
15274: ARRAY
15275: PPUSH
15276: CALL_OW 310
15280: IFFALSE 15297
// ComExit ( tmp2 [ i ] ) ;
15282: LD_VAR 0 3
15286: PUSH
15287: LD_VAR 0 1
15291: ARRAY
15292: PPUSH
15293: CALL 76763 0 1
// wait ( 3 ) ;
15297: LD_INT 3
15299: PPUSH
15300: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15304: LD_VAR 0 3
15308: PUSH
15309: LD_VAR 0 1
15313: ARRAY
15314: PPUSH
15315: LD_EXP 51
15319: PPUSH
15320: CALL_OW 120
// end ;
15324: GO 15222
15326: POP
15327: POP
// SetAchievement ( ACH_LAB ) ;
15328: LD_STRING ACH_LAB
15330: PPUSH
15331: CALL_OW 543
// end ; 2 :
15335: GO 15373
15337: LD_INT 2
15339: DOUBLE
15340: EQUAL
15341: IFTRUE 15345
15343: GO 15372
15345: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15346: LD_EXP 26
15350: PPUSH
15351: LD_STRING DH-Cap-b-1
15353: PPUSH
15354: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15358: LD_EXP 36
15362: PPUSH
15363: LD_STRING DA-Cap-b-2
15365: PPUSH
15366: CALL_OW 88
// end ; end ;
15370: GO 15373
15372: POP
// end ;
15373: PPOPN 5
15375: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15376: LD_INT 10
15378: PPUSH
15379: LD_INT 22
15381: PUSH
15382: LD_INT 2
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 30
15391: PUSH
15392: LD_INT 31
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PPUSH
15403: CALL_OW 70
15407: PUSH
15408: LD_INT 2
15410: GREATEREQUAL
15411: IFFALSE 15423
15413: GO 15415
15415: DISABLE
// SetAchievement ( ACH_KING ) ;
15416: LD_STRING ACH_KING
15418: PPUSH
15419: CALL_OW 543
15423: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15424: LD_EXP 11
15428: NOT
15429: PUSH
15430: LD_INT 10
15432: PPUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: LD_INT 30
15448: PUSH
15449: LD_INT 31
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 30
15458: PUSH
15459: LD_INT 4
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL_OW 70
15479: AND
15480: IFFALSE 15510
15482: GO 15484
15484: DISABLE
// begin hillBase := true ;
15485: LD_ADDR_EXP 15
15489: PUSH
15490: LD_INT 1
15492: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15493: LD_STRING HillDone
15495: PPUSH
15496: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15500: LD_INT 22
15502: PPUSH
15503: LD_INT 0
15505: PPUSH
15506: CALL_OW 424
// end ;
15510: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15511: LD_EXP 31
15515: PUSH
15516: LD_EXP 31
15520: PPUSH
15521: CALL_OW 256
15525: PUSH
15526: LD_INT 3
15528: LESS
15529: AND
15530: IFFALSE 15576
15532: GO 15534
15534: DISABLE
// begin DialogueOn ;
15535: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15539: LD_EXP 31
15543: PPUSH
15544: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15548: LD_EXP 31
15552: PPUSH
15553: LD_STRING DK-Kkilled-1
15555: PPUSH
15556: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15560: LD_EXP 26
15564: PPUSH
15565: LD_STRING DH-Kkilled-2
15567: PPUSH
15568: CALL_OW 88
// DialogueOff ;
15572: CALL_OW 7
// end ;
15576: END
// every 0 0$1 trigger kaiaKilledByRussian do
15577: LD_EXP 23
15581: IFFALSE 15598
15583: GO 15585
15585: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15586: LD_EXP 26
15590: PPUSH
15591: LD_STRING DH-Kkilled-3
15593: PPUSH
15594: CALL_OW 88
15598: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15599: LD_EXP 16
15603: PUSH
15604: LD_INT 106
15606: PPUSH
15607: CALL_OW 255
15611: PUSH
15612: LD_INT 2
15614: EQUAL
15615: PUSH
15616: LD_EXP 17
15620: OR
15621: AND
15622: PUSH
15623: LD_EXP 18
15627: PUSH
15628: LD_EXP 24
15632: PUSH
15633: LD_INT 112
15635: PPUSH
15636: CALL_OW 255
15640: PUSH
15641: LD_INT 2
15643: EQUAL
15644: AND
15645: OR
15646: AND
15647: IFFALSE 16887
15649: GO 15651
15651: DISABLE
15652: LD_INT 0
15654: PPUSH
15655: PPUSH
15656: PPUSH
15657: PPUSH
15658: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15659: LD_STRING GoToWest
15661: PPUSH
15662: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15666: LD_INT 17
15668: PPUSH
15669: LD_INT 1
15671: PPUSH
15672: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15676: LD_INT 35
15678: PPUSH
15679: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: LD_INT 17
15690: PPUSH
15691: LD_INT 22
15693: PUSH
15694: LD_INT 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 21
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 58
15729: PUSH
15730: EMPTY
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 70
15754: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15755: LD_ADDR_VAR 0 3
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 55
15775: PUSH
15776: EMPTY
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 2
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 21
15798: PUSH
15799: LD_INT 2
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 3
15808: PUSH
15809: LD_INT 58
15811: PUSH
15812: EMPTY
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 69
15837: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15838: LD_VAR 0 2
15842: PUSH
15843: LD_INT 0
15845: PLUS
15846: PUSH
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 0
15854: PLUS
15855: EQUAL
15856: IFFALSE 15676
// SaveCharacters ( Heike , 04_1_Heike ) ;
15858: LD_EXP 26
15862: PPUSH
15863: LD_STRING 04_1_Heike
15865: PPUSH
15866: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15870: LD_EXP 36
15874: PUSH
15875: LD_EXP 36
15879: PUSH
15880: LD_EXP 40
15884: IN
15885: NOT
15886: AND
15887: IFFALSE 15903
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15889: LD_EXP 36
15893: PPUSH
15894: LD_STRING 04_1_Aviradze
15896: PPUSH
15897: CALL_OW 38
15901: GO 15921
// if Aviradze then
15903: LD_EXP 36
15907: IFFALSE 15921
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15909: LD_EXP 36
15913: PPUSH
15914: LD_STRING 04_1_Aviradze_L
15916: PPUSH
15917: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15921: LD_EXP 29
15925: PUSH
15926: LD_EXP 29
15930: PUSH
15931: LD_EXP 40
15935: IN
15936: NOT
15937: AND
15938: IFFALSE 15954
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15940: LD_EXP 29
15944: PPUSH
15945: LD_STRING 04_1_Ibrahim
15947: PPUSH
15948: CALL_OW 38
15952: GO 15972
// if Ibrahim then
15954: LD_EXP 29
15958: IFFALSE 15972
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15960: LD_EXP 29
15964: PPUSH
15965: LD_STRING 04_1_Ibrahim_L
15967: PPUSH
15968: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15972: LD_EXP 30
15976: PUSH
15977: LD_EXP 30
15981: PUSH
15982: LD_EXP 40
15986: IN
15987: NOT
15988: AND
15989: IFFALSE 16005
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15991: LD_EXP 30
15995: PPUSH
15996: LD_STRING 04_1_Kamil
15998: PPUSH
15999: CALL_OW 38
16003: GO 16023
// if Kamil then
16005: LD_EXP 30
16009: IFFALSE 16023
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16011: LD_EXP 30
16015: PPUSH
16016: LD_STRING 04_1_Kamil_L
16018: PPUSH
16019: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16023: LD_EXP 32
16027: PUSH
16028: LD_EXP 32
16032: PUSH
16033: LD_EXP 40
16037: IN
16038: NOT
16039: AND
16040: IFFALSE 16056
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16042: LD_EXP 32
16046: PPUSH
16047: LD_STRING 04_1_Sophia
16049: PPUSH
16050: CALL_OW 38
16054: GO 16074
// if Sophia then
16056: LD_EXP 32
16060: IFFALSE 16074
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16062: LD_EXP 32
16066: PPUSH
16067: LD_STRING 04_1_Sophia_L
16069: PPUSH
16070: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16074: LD_EXP 31
16078: PUSH
16079: LD_EXP 31
16083: PUSH
16084: LD_EXP 40
16088: IN
16089: NOT
16090: AND
16091: IFFALSE 16107
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16093: LD_EXP 31
16097: PPUSH
16098: LD_STRING 04_1_Kaia
16100: PPUSH
16101: CALL_OW 38
16105: GO 16125
// if Kaia then
16107: LD_EXP 31
16111: IFFALSE 16125
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16113: LD_EXP 31
16117: PPUSH
16118: LD_STRING 04_1_Kaia_L
16120: PPUSH
16121: CALL_OW 38
// if Givi then
16125: LD_EXP 27
16129: IFFALSE 16143
// SaveCharacters ( Givi , 04_1_Givi ) ;
16131: LD_EXP 27
16135: PPUSH
16136: LD_STRING 04_1_Givi
16138: PPUSH
16139: CALL_OW 38
// if Mike then
16143: LD_EXP 28
16147: IFFALSE 16161
// SaveCharacters ( Mike , 04_1_Mike ) ;
16149: LD_EXP 28
16153: PPUSH
16154: LD_STRING 04_1_Mike
16156: PPUSH
16157: CALL_OW 38
// if Markov then
16161: LD_EXP 33
16165: IFFALSE 16179
// SaveCharacters ( Markov , 04_1_Markov ) ;
16167: LD_EXP 33
16171: PPUSH
16172: LD_STRING 04_1_Markov
16174: PPUSH
16175: CALL_OW 38
// if Kurt then
16179: LD_EXP 35
16183: IFFALSE 16204
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16185: LD_EXP 35
16189: PPUSH
16190: LD_STRING 04_1_Kurt
16192: PPUSH
16193: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16197: LD_STRING enableBioCharacter(BIO_KURT)
16199: PPUSH
16200: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16204: LD_EXP 38
16208: PUSH
16209: LD_EXP 40
16213: DIFF
16214: IFFALSE 16234
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16216: LD_EXP 38
16220: PUSH
16221: LD_EXP 40
16225: DIFF
16226: PPUSH
16227: LD_STRING 04_1_others
16229: PPUSH
16230: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16234: LD_EXP 40
16238: PUSH
16239: LD_EXP 38
16243: AND
16244: IFFALSE 16329
// begin tmp := [ ] ;
16246: LD_ADDR_VAR 0 2
16250: PUSH
16251: EMPTY
16252: ST_TO_ADDR
// for i in heikeSecondSquad do
16253: LD_ADDR_VAR 0 1
16257: PUSH
16258: LD_EXP 38
16262: PUSH
16263: FOR_IN
16264: IFFALSE 16309
// if i in aviradzeSquad then
16266: LD_VAR 0 1
16270: PUSH
16271: LD_EXP 40
16275: IN
16276: IFFALSE 16307
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16278: LD_ADDR_VAR 0 2
16282: PUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: LD_VAR 0 2
16292: PUSH
16293: LD_INT 1
16295: PLUS
16296: PPUSH
16297: LD_VAR 0 1
16301: PPUSH
16302: CALL_OW 1
16306: ST_TO_ADDR
16307: GO 16263
16309: POP
16310: POP
// if tmp then
16311: LD_VAR 0 2
16315: IFFALSE 16329
// SaveCharacters ( tmp , 04_1_others_L ) ;
16317: LD_VAR 0 2
16321: PPUSH
16322: LD_STRING 04_1_others_L
16324: PPUSH
16325: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16329: LD_ADDR_VAR 0 2
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_INT 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 23
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if tmp then
16363: LD_VAR 0 2
16367: IFFALSE 16381
// SaveCharacters ( tmp , 04_1_apes ) ;
16369: LD_VAR 0 2
16373: PPUSH
16374: LD_STRING 04_1_apes
16376: PPUSH
16377: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16381: LD_ADDR_VAR 0 2
16385: PUSH
16386: LD_INT 17
16388: PPUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PPUSH
16399: CALL_OW 70
16403: ST_TO_ADDR
// if tmp then
16404: LD_VAR 0 2
16408: IFFALSE 16752
// begin tmp2 := [ ] ;
16410: LD_ADDR_VAR 0 3
16414: PUSH
16415: EMPTY
16416: ST_TO_ADDR
// for i in tmp do
16417: LD_ADDR_VAR 0 1
16421: PUSH
16422: LD_VAR 0 2
16426: PUSH
16427: FOR_IN
16428: IFFALSE 16738
// begin driver := IsDrivenBy ( i ) ;
16430: LD_ADDR_VAR 0 5
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 311
16444: ST_TO_ADDR
// if not driver then
16445: LD_VAR 0 5
16449: NOT
16450: IFFALSE 16454
// continue ;
16452: GO 16427
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 264
16463: PUSH
16464: LD_INT 32
16466: PUSH
16467: LD_INT 12
16469: PUSH
16470: LD_INT 51
16472: PUSH
16473: LD_INT 89
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: IN
16482: IFFALSE 16630
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16484: LD_ADDR_VAR 0 4
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 289
16501: PUSH
16502: LD_VAR 0 1
16506: PPUSH
16507: LD_INT 2
16509: PPUSH
16510: CALL_OW 289
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_INT 1
16536: PLUS
16537: PPUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 265
16547: PUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 262
16557: PUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 263
16567: PUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 264
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 248
16587: PUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 256
16597: PUSH
16598: LD_VAR 0 4
16602: PUSH
16603: LD_VAR 0 5
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PPUSH
16623: CALL_OW 1
16627: ST_TO_ADDR
// end else
16628: GO 16736
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16630: LD_ADDR_VAR 0 3
16634: PUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_VAR 0 3
16644: PUSH
16645: LD_INT 1
16647: PLUS
16648: PPUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 265
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 262
16668: PUSH
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 263
16678: PUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 264
16688: PUSH
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 248
16698: PUSH
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 256
16708: PUSH
16709: EMPTY
16710: PUSH
16711: LD_VAR 0 5
16715: PPUSH
16716: CALL_OW 257
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: PPUSH
16731: CALL_OW 1
16735: ST_TO_ADDR
// end ;
16736: GO 16427
16738: POP
16739: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_STRING 04_1_Vehicles
16747: PPUSH
16748: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16752: LD_EXP 21
16756: PPUSH
16757: LD_STRING 04_1_RuLabCaptured
16759: PPUSH
16760: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16764: LD_EXP 19
16768: PPUSH
16769: LD_STRING 04_1_EscapeCounter
16771: PPUSH
16772: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16776: LD_EXP 15
16780: PPUSH
16781: LD_STRING 04_1_BaseHill
16783: PPUSH
16784: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16788: LD_OWVAR 1
16792: PPUSH
16793: LD_STRING 04_1_Time
16795: PPUSH
16796: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16800: LD_EXP 14
16804: PPUSH
16805: LD_STRING 04_1_DeadCounter
16807: PPUSH
16808: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16812: LD_EXP 24
16816: PUSH
16817: LD_INT 112
16819: PPUSH
16820: CALL_OW 255
16824: MUL
16825: PUSH
16826: LD_INT 2
16828: EQUAL
16829: PPUSH
16830: LD_STRING 04_1_KaganCaptured
16832: PPUSH
16833: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16837: LD_INT 22
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 34
16849: PUSH
16850: LD_INT 26
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PPUSH
16861: CALL_OW 69
16865: PUSH
16866: LD_INT 0
16868: PLUS
16869: PPUSH
16870: LD_STRING 04_1_Flamethrower
16872: PPUSH
16873: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16877: LD_INT 1
16879: PPUSH
16880: LD_STRING __x1\04_cont2
16882: PPUSH
16883: CALL_OW 340
// end ; end_of_file
16887: PPOPN 5
16889: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16890: LD_VAR 0 1
16894: PPUSH
16895: CALL_OW 266
16899: PUSH
16900: LD_INT 0
16902: EQUAL
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 255
16913: PUSH
16914: LD_INT 2
16916: EQUAL
16917: AND
16918: IFFALSE 16928
// baseConstructed := true ;
16920: LD_ADDR_EXP 3
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 266
16937: PUSH
16938: LD_INT 6
16940: EQUAL
16941: PUSH
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 255
16951: PUSH
16952: LD_INT 2
16954: EQUAL
16955: AND
16956: IFFALSE 16966
// labConstructed := true ;
16958: LD_ADDR_EXP 4
16962: PUSH
16963: LD_INT 1
16965: ST_TO_ADDR
// end ;
16966: PPOPN 1
16968: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL 33780 0 1
// if un = Heike then
16978: LD_VAR 0 1
16982: PUSH
16983: LD_EXP 26
16987: EQUAL
16988: IFFALSE 16997
// YouLost ( Heike ) ;
16990: LD_STRING Heike
16992: PPUSH
16993: CALL_OW 104
// if un = Omar then
16997: LD_VAR 0 1
17001: PUSH
17002: LD_EXP 34
17006: EQUAL
17007: IFFALSE 17016
// YouLost ( Omar ) ;
17009: LD_STRING Omar
17011: PPUSH
17012: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17016: LD_VAR 0 1
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 23
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: IN
17061: IFFALSE 17077
// loseCounter := loseCounter + 1 ;
17063: LD_ADDR_EXP 14
17067: PUSH
17068: LD_EXP 14
17072: PUSH
17073: LD_INT 1
17075: PLUS
17076: ST_TO_ADDR
// if un = omikron then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_INT 64
17084: EQUAL
17085: IFFALSE 17095
// omicronFall := true ;
17087: LD_ADDR_EXP 13
17091: PUSH
17092: LD_INT 1
17094: ST_TO_ADDR
// if un = kirov then
17095: LD_VAR 0 1
17099: PUSH
17100: LD_INT 71
17102: EQUAL
17103: IFFALSE 17120
// begin ChangeMissionObjectives ( KirovDone ) ;
17105: LD_STRING KirovDone
17107: PPUSH
17108: CALL_OW 337
// kirovDestroyed := true ;
17112: LD_ADDR_EXP 16
17116: PUSH
17117: LD_INT 1
17119: ST_TO_ADDR
// end ; if un = beria then
17120: LD_VAR 0 1
17124: PUSH
17125: LD_INT 106
17127: EQUAL
17128: IFFALSE 17145
// begin ChangeMissionObjectives ( BeriaDone ) ;
17130: LD_STRING BeriaDone
17132: PPUSH
17133: CALL_OW 337
// beriaDestroyed := true ;
17137: LD_ADDR_EXP 17
17141: PUSH
17142: LD_INT 1
17144: ST_TO_ADDR
// end ; if un = kagan then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_INT 112
17152: EQUAL
17153: IFFALSE 17163
// kaganDestroyed := true ;
17155: LD_ADDR_EXP 18
17159: PUSH
17160: LD_INT 1
17162: ST_TO_ADDR
// if un in russianPatrol then
17163: LD_VAR 0 1
17167: PUSH
17168: LD_EXP 48
17172: IN
17173: IFFALSE 17191
// russianPatrol := russianPatrol diff un ;
17175: LD_ADDR_EXP 48
17179: PUSH
17180: LD_EXP 48
17184: PUSH
17185: LD_VAR 0 1
17189: DIFF
17190: ST_TO_ADDR
// if un in russianOmicronAttackers then
17191: LD_VAR 0 1
17195: PUSH
17196: LD_EXP 49
17200: IN
17201: IFFALSE 17219
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17203: LD_ADDR_EXP 49
17207: PUSH
17208: LD_EXP 49
17212: PUSH
17213: LD_VAR 0 1
17217: DIFF
17218: ST_TO_ADDR
// end ;
17219: PPOPN 1
17221: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17222: LD_INT 0
17224: PPUSH
17225: PPUSH
17226: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17227: LD_VAR 0 1
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: LD_INT 22
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 22
17247: PUSH
17248: LD_INT 4
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 22
17257: PUSH
17258: LD_INT 6
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 30
17273: PUSH
17274: LD_INT 32
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 69
17289: IN
17290: IFFALSE 17463
// begin sol := UnitsInside ( un ) ;
17292: LD_ADDR_VAR 0 3
17296: PUSH
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 313
17306: ST_TO_ADDR
// if not sol then
17307: LD_VAR 0 3
17311: NOT
17312: IFFALSE 17316
// exit ;
17314: GO 17463
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17316: LD_ADDR_VAR 0 4
17320: PUSH
17321: LD_INT 22
17323: PUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: CALL_OW 255
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: PUSH
17341: LD_INT 30
17343: PUSH
17344: LD_INT 4
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 30
17353: PUSH
17354: LD_INT 5
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 69
17374: ST_TO_ADDR
// if not nearestBarracks then
17375: LD_VAR 0 4
17379: NOT
17380: IFFALSE 17384
// exit ;
17382: GO 17463
// for i in nearestBarracks do
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: LD_VAR 0 4
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17430
// if UnitsInside ( i ) = 6 then
17397: LD_VAR 0 2
17401: PPUSH
17402: CALL_OW 313
17406: PUSH
17407: LD_INT 6
17409: EQUAL
17410: IFFALSE 17428
// nearestBarracks := nearestBarracks diff i ;
17412: LD_ADDR_VAR 0 4
17416: PUSH
17417: LD_VAR 0 4
17421: PUSH
17422: LD_VAR 0 2
17426: DIFF
17427: ST_TO_ADDR
17428: GO 17394
17430: POP
17431: POP
// if not nearestBarracks then
17432: LD_VAR 0 4
17436: NOT
17437: IFFALSE 17441
// exit ;
17439: GO 17463
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17441: LD_VAR 0 3
17445: PUSH
17446: LD_INT 1
17448: ARRAY
17449: PPUSH
17450: LD_VAR 0 4
17454: PUSH
17455: LD_INT 1
17457: ARRAY
17458: PPUSH
17459: CALL_OW 120
// end ; end ;
17463: PPOPN 4
17465: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17466: LD_INT 0
17468: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17469: LD_EXP 8
17473: NOT
17474: PUSH
17475: LD_EXP 5
17479: NOT
17480: OR
17481: IFFALSE 17485
// exit ;
17483: GO 17553
// for i in camAreas do
17485: LD_ADDR_VAR 0 5
17489: PUSH
17490: LD_EXP 8
17494: PUSH
17495: FOR_IN
17496: IFFALSE 17551
// if InArea ( x , y , i ) then
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_VAR 0 4
17507: PPUSH
17508: LD_VAR 0 5
17512: PPUSH
17513: CALL_OW 309
17517: IFFALSE 17549
// begin SetAreaMapShow ( i , 0 ) ;
17519: LD_VAR 0 5
17523: PPUSH
17524: LD_INT 0
17526: PPUSH
17527: CALL_OW 424
// camAreas := camAreas diff i ;
17531: LD_ADDR_EXP 8
17535: PUSH
17536: LD_EXP 8
17540: PUSH
17541: LD_VAR 0 5
17545: DIFF
17546: ST_TO_ADDR
// break ;
17547: GO 17551
// end ;
17549: GO 17495
17551: POP
17552: POP
// end ;
17553: PPOPN 5
17555: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17556: LD_VAR 0 1
17560: PUSH
17561: LD_INT 2
17563: EQUAL
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: LD_INT 5
17572: PUSH
17573: LD_INT 8
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: IN
17580: AND
17581: IFFALSE 17590
// YouLost ( Ally ) ;
17583: LD_STRING Ally
17585: PPUSH
17586: CALL_OW 104
// end ;
17590: PPOPN 2
17592: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17593: LD_VAR 0 1
17597: PUSH
17598: LD_EXP 31
17602: EQUAL
17603: PUSH
17604: LD_VAR 0 2
17608: PUSH
17609: LD_INT 3
17611: PUSH
17612: LD_INT 6
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: IN
17619: AND
17620: IFFALSE 17651
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17622: LD_ADDR_EXP 23
17626: PUSH
17627: LD_VAR 0 1
17631: PPUSH
17632: CALL_OW 250
17636: PUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 251
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: ST_TO_ADDR
// end ;
17651: PPOPN 3
17653: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17654: LD_VAR 0 1
17658: PPUSH
17659: LD_VAR 0 2
17663: PPUSH
17664: CALL 33900 0 2
// end ; end_of_file
17668: PPOPN 2
17670: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17671: LD_EXP 11
17675: NOT
17676: PUSH
17677: LD_INT 12
17679: PPUSH
17680: LD_INT 1
17682: PPUSH
17683: CALL_OW 287
17687: PUSH
17688: LD_INT 20
17690: PUSH
17691: LD_INT 16
17693: PUSH
17694: LD_INT 12
17696: PUSH
17697: LD_INT 10
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: PUSH
17706: LD_OWVAR 67
17710: ARRAY
17711: LESS
17712: AND
17713: IFFALSE 17740
17715: GO 17717
17717: DISABLE
// begin enable ;
17718: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17719: LD_INT 1
17721: PPUSH
17722: LD_INT 5
17724: PPUSH
17725: CALL_OW 12
17729: PPUSH
17730: LD_INT 12
17732: PPUSH
17733: LD_INT 1
17735: PPUSH
17736: CALL_OW 55
// end ; end_of_file
17740: END
// every 0 0$1 trigger omarCountdown do
17741: LD_EXP 22
17745: IFFALSE 17797
17747: GO 17749
17749: DISABLE
// begin enable ;
17750: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17751: LD_ADDR_OWVAR 47
17755: PUSH
17756: LD_STRING #X104-1
17758: PUSH
17759: LD_EXP 22
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17768: LD_ADDR_EXP 22
17772: PUSH
17773: LD_EXP 22
17777: PUSH
17778: LD_INT 35
17780: MINUS
17781: ST_TO_ADDR
// if not omarCountdown then
17782: LD_EXP 22
17786: NOT
17787: IFFALSE 17797
// display_strings :=  ;
17789: LD_ADDR_OWVAR 47
17793: PUSH
17794: LD_STRING 
17796: ST_TO_ADDR
// end ; end_of_file
17797: END
// export globalGameSaveCounter ; every 0 0$1 do
17798: GO 17800
17800: DISABLE
// begin enable ;
17801: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17802: LD_STRING updateTimer(
17804: PUSH
17805: LD_OWVAR 1
17809: STR
17810: PUSH
17811: LD_STRING );
17813: STR
17814: PPUSH
17815: CALL_OW 559
// end ;
17819: END
// every 0 0$1 do
17820: GO 17822
17822: DISABLE
// begin globalGameSaveCounter := 0 ;
17823: LD_ADDR_EXP 53
17827: PUSH
17828: LD_INT 0
17830: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17831: LD_STRING setGameSaveCounter(0)
17833: PPUSH
17834: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17838: LD_STRING initStreamRollete();
17840: PPUSH
17841: CALL_OW 559
// InitStreamMode ;
17845: CALL 19188 0 0
// DefineStreamItems ( false ) ;
17849: LD_INT 0
17851: PPUSH
17852: CALL 19652 0 1
// end ;
17856: END
// export function SOS_MapStart ( ) ; begin
17857: LD_INT 0
17859: PPUSH
// if streamModeActive then
17860: LD_EXP 54
17864: IFFALSE 17873
// DefineStreamItems ( true ) ;
17866: LD_INT 1
17868: PPUSH
17869: CALL 19652 0 1
// UpdateLuaVariables ( ) ;
17873: CALL 17890 0 0
// UpdateFactoryWaypoints ( ) ;
17877: CALL 32521 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17881: CALL 32778 0 0
// end ;
17885: LD_VAR 0 1
17889: RET
// function UpdateLuaVariables ( ) ; begin
17890: LD_INT 0
17892: PPUSH
// if globalGameSaveCounter then
17893: LD_EXP 53
17897: IFFALSE 17931
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17899: LD_ADDR_EXP 53
17903: PUSH
17904: LD_EXP 53
17908: PPUSH
17909: CALL 77726 0 1
17913: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17914: LD_STRING setGameSaveCounter(
17916: PUSH
17917: LD_EXP 53
17921: STR
17922: PUSH
17923: LD_STRING )
17925: STR
17926: PPUSH
17927: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17931: LD_STRING setGameDifficulty(
17933: PUSH
17934: LD_OWVAR 67
17938: STR
17939: PUSH
17940: LD_STRING )
17942: STR
17943: PPUSH
17944: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17948: LD_STRING displayDifficulty(
17950: PUSH
17951: LD_OWVAR 67
17955: STR
17956: PUSH
17957: LD_STRING )
17959: STR
17960: PPUSH
17961: CALL_OW 559
// end ;
17965: LD_VAR 0 1
17969: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17970: LD_INT 0
17972: PPUSH
// if p2 = stream_mode then
17973: LD_VAR 0 2
17977: PUSH
17978: LD_INT 100
17980: EQUAL
17981: IFFALSE 18984
// begin if not StreamModeActive then
17983: LD_EXP 54
17987: NOT
17988: IFFALSE 17998
// StreamModeActive := true ;
17990: LD_ADDR_EXP 54
17994: PUSH
17995: LD_INT 1
17997: ST_TO_ADDR
// if p3 = 0 then
17998: LD_VAR 0 3
18002: PUSH
18003: LD_INT 0
18005: EQUAL
18006: IFFALSE 18012
// InitStreamMode ;
18008: CALL 19188 0 0
// if p3 = 1 then
18012: LD_VAR 0 3
18016: PUSH
18017: LD_INT 1
18019: EQUAL
18020: IFFALSE 18030
// sRocket := true ;
18022: LD_ADDR_EXP 59
18026: PUSH
18027: LD_INT 1
18029: ST_TO_ADDR
// if p3 = 2 then
18030: LD_VAR 0 3
18034: PUSH
18035: LD_INT 2
18037: EQUAL
18038: IFFALSE 18048
// sSpeed := true ;
18040: LD_ADDR_EXP 58
18044: PUSH
18045: LD_INT 1
18047: ST_TO_ADDR
// if p3 = 3 then
18048: LD_VAR 0 3
18052: PUSH
18053: LD_INT 3
18055: EQUAL
18056: IFFALSE 18066
// sEngine := true ;
18058: LD_ADDR_EXP 60
18062: PUSH
18063: LD_INT 1
18065: ST_TO_ADDR
// if p3 = 4 then
18066: LD_VAR 0 3
18070: PUSH
18071: LD_INT 4
18073: EQUAL
18074: IFFALSE 18084
// sSpec := true ;
18076: LD_ADDR_EXP 57
18080: PUSH
18081: LD_INT 1
18083: ST_TO_ADDR
// if p3 = 5 then
18084: LD_VAR 0 3
18088: PUSH
18089: LD_INT 5
18091: EQUAL
18092: IFFALSE 18102
// sLevel := true ;
18094: LD_ADDR_EXP 61
18098: PUSH
18099: LD_INT 1
18101: ST_TO_ADDR
// if p3 = 6 then
18102: LD_VAR 0 3
18106: PUSH
18107: LD_INT 6
18109: EQUAL
18110: IFFALSE 18120
// sArmoury := true ;
18112: LD_ADDR_EXP 62
18116: PUSH
18117: LD_INT 1
18119: ST_TO_ADDR
// if p3 = 7 then
18120: LD_VAR 0 3
18124: PUSH
18125: LD_INT 7
18127: EQUAL
18128: IFFALSE 18138
// sRadar := true ;
18130: LD_ADDR_EXP 63
18134: PUSH
18135: LD_INT 1
18137: ST_TO_ADDR
// if p3 = 8 then
18138: LD_VAR 0 3
18142: PUSH
18143: LD_INT 8
18145: EQUAL
18146: IFFALSE 18156
// sBunker := true ;
18148: LD_ADDR_EXP 64
18152: PUSH
18153: LD_INT 1
18155: ST_TO_ADDR
// if p3 = 9 then
18156: LD_VAR 0 3
18160: PUSH
18161: LD_INT 9
18163: EQUAL
18164: IFFALSE 18174
// sHack := true ;
18166: LD_ADDR_EXP 65
18170: PUSH
18171: LD_INT 1
18173: ST_TO_ADDR
// if p3 = 10 then
18174: LD_VAR 0 3
18178: PUSH
18179: LD_INT 10
18181: EQUAL
18182: IFFALSE 18192
// sFire := true ;
18184: LD_ADDR_EXP 66
18188: PUSH
18189: LD_INT 1
18191: ST_TO_ADDR
// if p3 = 11 then
18192: LD_VAR 0 3
18196: PUSH
18197: LD_INT 11
18199: EQUAL
18200: IFFALSE 18210
// sRefresh := true ;
18202: LD_ADDR_EXP 67
18206: PUSH
18207: LD_INT 1
18209: ST_TO_ADDR
// if p3 = 12 then
18210: LD_VAR 0 3
18214: PUSH
18215: LD_INT 12
18217: EQUAL
18218: IFFALSE 18228
// sExp := true ;
18220: LD_ADDR_EXP 68
18224: PUSH
18225: LD_INT 1
18227: ST_TO_ADDR
// if p3 = 13 then
18228: LD_VAR 0 3
18232: PUSH
18233: LD_INT 13
18235: EQUAL
18236: IFFALSE 18246
// sDepot := true ;
18238: LD_ADDR_EXP 69
18242: PUSH
18243: LD_INT 1
18245: ST_TO_ADDR
// if p3 = 14 then
18246: LD_VAR 0 3
18250: PUSH
18251: LD_INT 14
18253: EQUAL
18254: IFFALSE 18264
// sFlag := true ;
18256: LD_ADDR_EXP 70
18260: PUSH
18261: LD_INT 1
18263: ST_TO_ADDR
// if p3 = 15 then
18264: LD_VAR 0 3
18268: PUSH
18269: LD_INT 15
18271: EQUAL
18272: IFFALSE 18282
// sKamikadze := true ;
18274: LD_ADDR_EXP 78
18278: PUSH
18279: LD_INT 1
18281: ST_TO_ADDR
// if p3 = 16 then
18282: LD_VAR 0 3
18286: PUSH
18287: LD_INT 16
18289: EQUAL
18290: IFFALSE 18300
// sTroll := true ;
18292: LD_ADDR_EXP 79
18296: PUSH
18297: LD_INT 1
18299: ST_TO_ADDR
// if p3 = 17 then
18300: LD_VAR 0 3
18304: PUSH
18305: LD_INT 17
18307: EQUAL
18308: IFFALSE 18318
// sSlow := true ;
18310: LD_ADDR_EXP 80
18314: PUSH
18315: LD_INT 1
18317: ST_TO_ADDR
// if p3 = 18 then
18318: LD_VAR 0 3
18322: PUSH
18323: LD_INT 18
18325: EQUAL
18326: IFFALSE 18336
// sLack := true ;
18328: LD_ADDR_EXP 81
18332: PUSH
18333: LD_INT 1
18335: ST_TO_ADDR
// if p3 = 19 then
18336: LD_VAR 0 3
18340: PUSH
18341: LD_INT 19
18343: EQUAL
18344: IFFALSE 18354
// sTank := true ;
18346: LD_ADDR_EXP 83
18350: PUSH
18351: LD_INT 1
18353: ST_TO_ADDR
// if p3 = 20 then
18354: LD_VAR 0 3
18358: PUSH
18359: LD_INT 20
18361: EQUAL
18362: IFFALSE 18372
// sRemote := true ;
18364: LD_ADDR_EXP 84
18368: PUSH
18369: LD_INT 1
18371: ST_TO_ADDR
// if p3 = 21 then
18372: LD_VAR 0 3
18376: PUSH
18377: LD_INT 21
18379: EQUAL
18380: IFFALSE 18390
// sPowell := true ;
18382: LD_ADDR_EXP 85
18386: PUSH
18387: LD_INT 1
18389: ST_TO_ADDR
// if p3 = 22 then
18390: LD_VAR 0 3
18394: PUSH
18395: LD_INT 22
18397: EQUAL
18398: IFFALSE 18408
// sTeleport := true ;
18400: LD_ADDR_EXP 88
18404: PUSH
18405: LD_INT 1
18407: ST_TO_ADDR
// if p3 = 23 then
18408: LD_VAR 0 3
18412: PUSH
18413: LD_INT 23
18415: EQUAL
18416: IFFALSE 18426
// sOilTower := true ;
18418: LD_ADDR_EXP 90
18422: PUSH
18423: LD_INT 1
18425: ST_TO_ADDR
// if p3 = 24 then
18426: LD_VAR 0 3
18430: PUSH
18431: LD_INT 24
18433: EQUAL
18434: IFFALSE 18444
// sShovel := true ;
18436: LD_ADDR_EXP 91
18440: PUSH
18441: LD_INT 1
18443: ST_TO_ADDR
// if p3 = 25 then
18444: LD_VAR 0 3
18448: PUSH
18449: LD_INT 25
18451: EQUAL
18452: IFFALSE 18462
// sSheik := true ;
18454: LD_ADDR_EXP 92
18458: PUSH
18459: LD_INT 1
18461: ST_TO_ADDR
// if p3 = 26 then
18462: LD_VAR 0 3
18466: PUSH
18467: LD_INT 26
18469: EQUAL
18470: IFFALSE 18480
// sEarthquake := true ;
18472: LD_ADDR_EXP 94
18476: PUSH
18477: LD_INT 1
18479: ST_TO_ADDR
// if p3 = 27 then
18480: LD_VAR 0 3
18484: PUSH
18485: LD_INT 27
18487: EQUAL
18488: IFFALSE 18498
// sAI := true ;
18490: LD_ADDR_EXP 95
18494: PUSH
18495: LD_INT 1
18497: ST_TO_ADDR
// if p3 = 28 then
18498: LD_VAR 0 3
18502: PUSH
18503: LD_INT 28
18505: EQUAL
18506: IFFALSE 18516
// sCargo := true ;
18508: LD_ADDR_EXP 98
18512: PUSH
18513: LD_INT 1
18515: ST_TO_ADDR
// if p3 = 29 then
18516: LD_VAR 0 3
18520: PUSH
18521: LD_INT 29
18523: EQUAL
18524: IFFALSE 18534
// sDLaser := true ;
18526: LD_ADDR_EXP 99
18530: PUSH
18531: LD_INT 1
18533: ST_TO_ADDR
// if p3 = 30 then
18534: LD_VAR 0 3
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: IFFALSE 18552
// sExchange := true ;
18544: LD_ADDR_EXP 100
18548: PUSH
18549: LD_INT 1
18551: ST_TO_ADDR
// if p3 = 31 then
18552: LD_VAR 0 3
18556: PUSH
18557: LD_INT 31
18559: EQUAL
18560: IFFALSE 18570
// sFac := true ;
18562: LD_ADDR_EXP 101
18566: PUSH
18567: LD_INT 1
18569: ST_TO_ADDR
// if p3 = 32 then
18570: LD_VAR 0 3
18574: PUSH
18575: LD_INT 32
18577: EQUAL
18578: IFFALSE 18588
// sPower := true ;
18580: LD_ADDR_EXP 102
18584: PUSH
18585: LD_INT 1
18587: ST_TO_ADDR
// if p3 = 33 then
18588: LD_VAR 0 3
18592: PUSH
18593: LD_INT 33
18595: EQUAL
18596: IFFALSE 18606
// sRandom := true ;
18598: LD_ADDR_EXP 103
18602: PUSH
18603: LD_INT 1
18605: ST_TO_ADDR
// if p3 = 34 then
18606: LD_VAR 0 3
18610: PUSH
18611: LD_INT 34
18613: EQUAL
18614: IFFALSE 18624
// sShield := true ;
18616: LD_ADDR_EXP 104
18620: PUSH
18621: LD_INT 1
18623: ST_TO_ADDR
// if p3 = 35 then
18624: LD_VAR 0 3
18628: PUSH
18629: LD_INT 35
18631: EQUAL
18632: IFFALSE 18642
// sTime := true ;
18634: LD_ADDR_EXP 105
18638: PUSH
18639: LD_INT 1
18641: ST_TO_ADDR
// if p3 = 36 then
18642: LD_VAR 0 3
18646: PUSH
18647: LD_INT 36
18649: EQUAL
18650: IFFALSE 18660
// sTools := true ;
18652: LD_ADDR_EXP 106
18656: PUSH
18657: LD_INT 1
18659: ST_TO_ADDR
// if p3 = 101 then
18660: LD_VAR 0 3
18664: PUSH
18665: LD_INT 101
18667: EQUAL
18668: IFFALSE 18678
// sSold := true ;
18670: LD_ADDR_EXP 71
18674: PUSH
18675: LD_INT 1
18677: ST_TO_ADDR
// if p3 = 102 then
18678: LD_VAR 0 3
18682: PUSH
18683: LD_INT 102
18685: EQUAL
18686: IFFALSE 18696
// sDiff := true ;
18688: LD_ADDR_EXP 72
18692: PUSH
18693: LD_INT 1
18695: ST_TO_ADDR
// if p3 = 103 then
18696: LD_VAR 0 3
18700: PUSH
18701: LD_INT 103
18703: EQUAL
18704: IFFALSE 18714
// sFog := true ;
18706: LD_ADDR_EXP 75
18710: PUSH
18711: LD_INT 1
18713: ST_TO_ADDR
// if p3 = 104 then
18714: LD_VAR 0 3
18718: PUSH
18719: LD_INT 104
18721: EQUAL
18722: IFFALSE 18732
// sReset := true ;
18724: LD_ADDR_EXP 76
18728: PUSH
18729: LD_INT 1
18731: ST_TO_ADDR
// if p3 = 105 then
18732: LD_VAR 0 3
18736: PUSH
18737: LD_INT 105
18739: EQUAL
18740: IFFALSE 18750
// sSun := true ;
18742: LD_ADDR_EXP 77
18746: PUSH
18747: LD_INT 1
18749: ST_TO_ADDR
// if p3 = 106 then
18750: LD_VAR 0 3
18754: PUSH
18755: LD_INT 106
18757: EQUAL
18758: IFFALSE 18768
// sTiger := true ;
18760: LD_ADDR_EXP 73
18764: PUSH
18765: LD_INT 1
18767: ST_TO_ADDR
// if p3 = 107 then
18768: LD_VAR 0 3
18772: PUSH
18773: LD_INT 107
18775: EQUAL
18776: IFFALSE 18786
// sBomb := true ;
18778: LD_ADDR_EXP 74
18782: PUSH
18783: LD_INT 1
18785: ST_TO_ADDR
// if p3 = 108 then
18786: LD_VAR 0 3
18790: PUSH
18791: LD_INT 108
18793: EQUAL
18794: IFFALSE 18804
// sWound := true ;
18796: LD_ADDR_EXP 82
18800: PUSH
18801: LD_INT 1
18803: ST_TO_ADDR
// if p3 = 109 then
18804: LD_VAR 0 3
18808: PUSH
18809: LD_INT 109
18811: EQUAL
18812: IFFALSE 18822
// sBetray := true ;
18814: LD_ADDR_EXP 86
18818: PUSH
18819: LD_INT 1
18821: ST_TO_ADDR
// if p3 = 110 then
18822: LD_VAR 0 3
18826: PUSH
18827: LD_INT 110
18829: EQUAL
18830: IFFALSE 18840
// sContamin := true ;
18832: LD_ADDR_EXP 87
18836: PUSH
18837: LD_INT 1
18839: ST_TO_ADDR
// if p3 = 111 then
18840: LD_VAR 0 3
18844: PUSH
18845: LD_INT 111
18847: EQUAL
18848: IFFALSE 18858
// sOil := true ;
18850: LD_ADDR_EXP 89
18854: PUSH
18855: LD_INT 1
18857: ST_TO_ADDR
// if p3 = 112 then
18858: LD_VAR 0 3
18862: PUSH
18863: LD_INT 112
18865: EQUAL
18866: IFFALSE 18876
// sStu := true ;
18868: LD_ADDR_EXP 93
18872: PUSH
18873: LD_INT 1
18875: ST_TO_ADDR
// if p3 = 113 then
18876: LD_VAR 0 3
18880: PUSH
18881: LD_INT 113
18883: EQUAL
18884: IFFALSE 18894
// sBazooka := true ;
18886: LD_ADDR_EXP 96
18890: PUSH
18891: LD_INT 1
18893: ST_TO_ADDR
// if p3 = 114 then
18894: LD_VAR 0 3
18898: PUSH
18899: LD_INT 114
18901: EQUAL
18902: IFFALSE 18912
// sMortar := true ;
18904: LD_ADDR_EXP 97
18908: PUSH
18909: LD_INT 1
18911: ST_TO_ADDR
// if p3 = 115 then
18912: LD_VAR 0 3
18916: PUSH
18917: LD_INT 115
18919: EQUAL
18920: IFFALSE 18930
// sRanger := true ;
18922: LD_ADDR_EXP 107
18926: PUSH
18927: LD_INT 1
18929: ST_TO_ADDR
// if p3 = 116 then
18930: LD_VAR 0 3
18934: PUSH
18935: LD_INT 116
18937: EQUAL
18938: IFFALSE 18948
// sComputer := true ;
18940: LD_ADDR_EXP 108
18944: PUSH
18945: LD_INT 1
18947: ST_TO_ADDR
// if p3 = 117 then
18948: LD_VAR 0 3
18952: PUSH
18953: LD_INT 117
18955: EQUAL
18956: IFFALSE 18966
// s30 := true ;
18958: LD_ADDR_EXP 109
18962: PUSH
18963: LD_INT 1
18965: ST_TO_ADDR
// if p3 = 118 then
18966: LD_VAR 0 3
18970: PUSH
18971: LD_INT 118
18973: EQUAL
18974: IFFALSE 18984
// s60 := true ;
18976: LD_ADDR_EXP 110
18980: PUSH
18981: LD_INT 1
18983: ST_TO_ADDR
// end ; if p2 = hack_mode then
18984: LD_VAR 0 2
18988: PUSH
18989: LD_INT 101
18991: EQUAL
18992: IFFALSE 19120
// begin case p3 of 1 :
18994: LD_VAR 0 3
18998: PUSH
18999: LD_INT 1
19001: DOUBLE
19002: EQUAL
19003: IFTRUE 19007
19005: GO 19014
19007: POP
// hHackUnlimitedResources ; 2 :
19008: CALL 31267 0 0
19012: GO 19120
19014: LD_INT 2
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19029
19022: POP
// hHackSetLevel10 ; 3 :
19023: CALL 31400 0 0
19027: GO 19120
19029: LD_INT 3
19031: DOUBLE
19032: EQUAL
19033: IFTRUE 19037
19035: GO 19044
19037: POP
// hHackSetLevel10YourUnits ; 4 :
19038: CALL 31485 0 0
19042: GO 19120
19044: LD_INT 4
19046: DOUBLE
19047: EQUAL
19048: IFTRUE 19052
19050: GO 19059
19052: POP
// hHackInvincible ; 5 :
19053: CALL 31933 0 0
19057: GO 19120
19059: LD_INT 5
19061: DOUBLE
19062: EQUAL
19063: IFTRUE 19067
19065: GO 19074
19067: POP
// hHackInvisible ; 6 :
19068: CALL 32044 0 0
19072: GO 19120
19074: LD_INT 6
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19089
19082: POP
// hHackChangeYourSide ; 7 :
19083: CALL 32101 0 0
19087: GO 19120
19089: LD_INT 7
19091: DOUBLE
19092: EQUAL
19093: IFTRUE 19097
19095: GO 19104
19097: POP
// hHackChangeUnitSide ; 8 :
19098: CALL 32143 0 0
19102: GO 19120
19104: LD_INT 8
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19119
19112: POP
// hHackFog ; end ;
19113: CALL 32244 0 0
19117: GO 19120
19119: POP
// end ; if p2 = game_save_mode then
19120: LD_VAR 0 2
19124: PUSH
19125: LD_INT 102
19127: EQUAL
19128: IFFALSE 19183
// begin if p3 = 1 then
19130: LD_VAR 0 3
19134: PUSH
19135: LD_INT 1
19137: EQUAL
19138: IFFALSE 19150
// globalGameSaveCounter := p4 ;
19140: LD_ADDR_EXP 53
19144: PUSH
19145: LD_VAR 0 4
19149: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19150: LD_VAR 0 3
19154: PUSH
19155: LD_INT 2
19157: EQUAL
19158: PUSH
19159: LD_EXP 53
19163: AND
19164: IFFALSE 19183
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19166: LD_STRING setGameSaveCounter(
19168: PUSH
19169: LD_EXP 53
19173: STR
19174: PUSH
19175: LD_STRING )
19177: STR
19178: PPUSH
19179: CALL_OW 559
// end ; end ;
19183: LD_VAR 0 7
19187: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19188: LD_INT 0
19190: PPUSH
// streamModeActive := false ;
19191: LD_ADDR_EXP 54
19195: PUSH
19196: LD_INT 0
19198: ST_TO_ADDR
// normalCounter := 36 ;
19199: LD_ADDR_EXP 55
19203: PUSH
19204: LD_INT 36
19206: ST_TO_ADDR
// hardcoreCounter := 18 ;
19207: LD_ADDR_EXP 56
19211: PUSH
19212: LD_INT 18
19214: ST_TO_ADDR
// sRocket := false ;
19215: LD_ADDR_EXP 59
19219: PUSH
19220: LD_INT 0
19222: ST_TO_ADDR
// sSpeed := false ;
19223: LD_ADDR_EXP 58
19227: PUSH
19228: LD_INT 0
19230: ST_TO_ADDR
// sEngine := false ;
19231: LD_ADDR_EXP 60
19235: PUSH
19236: LD_INT 0
19238: ST_TO_ADDR
// sSpec := false ;
19239: LD_ADDR_EXP 57
19243: PUSH
19244: LD_INT 0
19246: ST_TO_ADDR
// sLevel := false ;
19247: LD_ADDR_EXP 61
19251: PUSH
19252: LD_INT 0
19254: ST_TO_ADDR
// sArmoury := false ;
19255: LD_ADDR_EXP 62
19259: PUSH
19260: LD_INT 0
19262: ST_TO_ADDR
// sRadar := false ;
19263: LD_ADDR_EXP 63
19267: PUSH
19268: LD_INT 0
19270: ST_TO_ADDR
// sBunker := false ;
19271: LD_ADDR_EXP 64
19275: PUSH
19276: LD_INT 0
19278: ST_TO_ADDR
// sHack := false ;
19279: LD_ADDR_EXP 65
19283: PUSH
19284: LD_INT 0
19286: ST_TO_ADDR
// sFire := false ;
19287: LD_ADDR_EXP 66
19291: PUSH
19292: LD_INT 0
19294: ST_TO_ADDR
// sRefresh := false ;
19295: LD_ADDR_EXP 67
19299: PUSH
19300: LD_INT 0
19302: ST_TO_ADDR
// sExp := false ;
19303: LD_ADDR_EXP 68
19307: PUSH
19308: LD_INT 0
19310: ST_TO_ADDR
// sDepot := false ;
19311: LD_ADDR_EXP 69
19315: PUSH
19316: LD_INT 0
19318: ST_TO_ADDR
// sFlag := false ;
19319: LD_ADDR_EXP 70
19323: PUSH
19324: LD_INT 0
19326: ST_TO_ADDR
// sKamikadze := false ;
19327: LD_ADDR_EXP 78
19331: PUSH
19332: LD_INT 0
19334: ST_TO_ADDR
// sTroll := false ;
19335: LD_ADDR_EXP 79
19339: PUSH
19340: LD_INT 0
19342: ST_TO_ADDR
// sSlow := false ;
19343: LD_ADDR_EXP 80
19347: PUSH
19348: LD_INT 0
19350: ST_TO_ADDR
// sLack := false ;
19351: LD_ADDR_EXP 81
19355: PUSH
19356: LD_INT 0
19358: ST_TO_ADDR
// sTank := false ;
19359: LD_ADDR_EXP 83
19363: PUSH
19364: LD_INT 0
19366: ST_TO_ADDR
// sRemote := false ;
19367: LD_ADDR_EXP 84
19371: PUSH
19372: LD_INT 0
19374: ST_TO_ADDR
// sPowell := false ;
19375: LD_ADDR_EXP 85
19379: PUSH
19380: LD_INT 0
19382: ST_TO_ADDR
// sTeleport := false ;
19383: LD_ADDR_EXP 88
19387: PUSH
19388: LD_INT 0
19390: ST_TO_ADDR
// sOilTower := false ;
19391: LD_ADDR_EXP 90
19395: PUSH
19396: LD_INT 0
19398: ST_TO_ADDR
// sShovel := false ;
19399: LD_ADDR_EXP 91
19403: PUSH
19404: LD_INT 0
19406: ST_TO_ADDR
// sSheik := false ;
19407: LD_ADDR_EXP 92
19411: PUSH
19412: LD_INT 0
19414: ST_TO_ADDR
// sEarthquake := false ;
19415: LD_ADDR_EXP 94
19419: PUSH
19420: LD_INT 0
19422: ST_TO_ADDR
// sAI := false ;
19423: LD_ADDR_EXP 95
19427: PUSH
19428: LD_INT 0
19430: ST_TO_ADDR
// sCargo := false ;
19431: LD_ADDR_EXP 98
19435: PUSH
19436: LD_INT 0
19438: ST_TO_ADDR
// sDLaser := false ;
19439: LD_ADDR_EXP 99
19443: PUSH
19444: LD_INT 0
19446: ST_TO_ADDR
// sExchange := false ;
19447: LD_ADDR_EXP 100
19451: PUSH
19452: LD_INT 0
19454: ST_TO_ADDR
// sFac := false ;
19455: LD_ADDR_EXP 101
19459: PUSH
19460: LD_INT 0
19462: ST_TO_ADDR
// sPower := false ;
19463: LD_ADDR_EXP 102
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// sRandom := false ;
19471: LD_ADDR_EXP 103
19475: PUSH
19476: LD_INT 0
19478: ST_TO_ADDR
// sShield := false ;
19479: LD_ADDR_EXP 104
19483: PUSH
19484: LD_INT 0
19486: ST_TO_ADDR
// sTime := false ;
19487: LD_ADDR_EXP 105
19491: PUSH
19492: LD_INT 0
19494: ST_TO_ADDR
// sTools := false ;
19495: LD_ADDR_EXP 106
19499: PUSH
19500: LD_INT 0
19502: ST_TO_ADDR
// sSold := false ;
19503: LD_ADDR_EXP 71
19507: PUSH
19508: LD_INT 0
19510: ST_TO_ADDR
// sDiff := false ;
19511: LD_ADDR_EXP 72
19515: PUSH
19516: LD_INT 0
19518: ST_TO_ADDR
// sFog := false ;
19519: LD_ADDR_EXP 75
19523: PUSH
19524: LD_INT 0
19526: ST_TO_ADDR
// sReset := false ;
19527: LD_ADDR_EXP 76
19531: PUSH
19532: LD_INT 0
19534: ST_TO_ADDR
// sSun := false ;
19535: LD_ADDR_EXP 77
19539: PUSH
19540: LD_INT 0
19542: ST_TO_ADDR
// sTiger := false ;
19543: LD_ADDR_EXP 73
19547: PUSH
19548: LD_INT 0
19550: ST_TO_ADDR
// sBomb := false ;
19551: LD_ADDR_EXP 74
19555: PUSH
19556: LD_INT 0
19558: ST_TO_ADDR
// sWound := false ;
19559: LD_ADDR_EXP 82
19563: PUSH
19564: LD_INT 0
19566: ST_TO_ADDR
// sBetray := false ;
19567: LD_ADDR_EXP 86
19571: PUSH
19572: LD_INT 0
19574: ST_TO_ADDR
// sContamin := false ;
19575: LD_ADDR_EXP 87
19579: PUSH
19580: LD_INT 0
19582: ST_TO_ADDR
// sOil := false ;
19583: LD_ADDR_EXP 89
19587: PUSH
19588: LD_INT 0
19590: ST_TO_ADDR
// sStu := false ;
19591: LD_ADDR_EXP 93
19595: PUSH
19596: LD_INT 0
19598: ST_TO_ADDR
// sBazooka := false ;
19599: LD_ADDR_EXP 96
19603: PUSH
19604: LD_INT 0
19606: ST_TO_ADDR
// sMortar := false ;
19607: LD_ADDR_EXP 97
19611: PUSH
19612: LD_INT 0
19614: ST_TO_ADDR
// sRanger := false ;
19615: LD_ADDR_EXP 107
19619: PUSH
19620: LD_INT 0
19622: ST_TO_ADDR
// sComputer := false ;
19623: LD_ADDR_EXP 108
19627: PUSH
19628: LD_INT 0
19630: ST_TO_ADDR
// s30 := false ;
19631: LD_ADDR_EXP 109
19635: PUSH
19636: LD_INT 0
19638: ST_TO_ADDR
// s60 := false ;
19639: LD_ADDR_EXP 110
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// end ;
19647: LD_VAR 0 1
19651: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19652: LD_INT 0
19654: PPUSH
19655: PPUSH
19656: PPUSH
19657: PPUSH
19658: PPUSH
19659: PPUSH
19660: PPUSH
// result := [ ] ;
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: EMPTY
19667: ST_TO_ADDR
// if campaign_id = 1 then
19668: LD_OWVAR 69
19672: PUSH
19673: LD_INT 1
19675: EQUAL
19676: IFFALSE 22842
// begin case mission_number of 1 :
19678: LD_OWVAR 70
19682: PUSH
19683: LD_INT 1
19685: DOUBLE
19686: EQUAL
19687: IFTRUE 19691
19689: GO 19767
19691: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19692: LD_ADDR_VAR 0 2
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: LD_INT 4
19702: PUSH
19703: LD_INT 11
19705: PUSH
19706: LD_INT 12
19708: PUSH
19709: LD_INT 15
19711: PUSH
19712: LD_INT 16
19714: PUSH
19715: LD_INT 22
19717: PUSH
19718: LD_INT 23
19720: PUSH
19721: LD_INT 26
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 101
19737: PUSH
19738: LD_INT 102
19740: PUSH
19741: LD_INT 106
19743: PUSH
19744: LD_INT 116
19746: PUSH
19747: LD_INT 117
19749: PUSH
19750: LD_INT 118
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: ST_TO_ADDR
19765: GO 22840
19767: LD_INT 2
19769: DOUBLE
19770: EQUAL
19771: IFTRUE 19775
19773: GO 19859
19775: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19776: LD_ADDR_VAR 0 2
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 4
19786: PUSH
19787: LD_INT 11
19789: PUSH
19790: LD_INT 12
19792: PUSH
19793: LD_INT 15
19795: PUSH
19796: LD_INT 16
19798: PUSH
19799: LD_INT 22
19801: PUSH
19802: LD_INT 23
19804: PUSH
19805: LD_INT 26
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 101
19821: PUSH
19822: LD_INT 102
19824: PUSH
19825: LD_INT 105
19827: PUSH
19828: LD_INT 106
19830: PUSH
19831: LD_INT 108
19833: PUSH
19834: LD_INT 116
19836: PUSH
19837: LD_INT 117
19839: PUSH
19840: LD_INT 118
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: ST_TO_ADDR
19857: GO 22840
19859: LD_INT 3
19861: DOUBLE
19862: EQUAL
19863: IFTRUE 19867
19865: GO 19955
19867: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19868: LD_ADDR_VAR 0 2
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: LD_INT 4
19878: PUSH
19879: LD_INT 5
19881: PUSH
19882: LD_INT 11
19884: PUSH
19885: LD_INT 12
19887: PUSH
19888: LD_INT 15
19890: PUSH
19891: LD_INT 16
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_INT 26
19899: PUSH
19900: LD_INT 36
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 101
19917: PUSH
19918: LD_INT 102
19920: PUSH
19921: LD_INT 105
19923: PUSH
19924: LD_INT 106
19926: PUSH
19927: LD_INT 108
19929: PUSH
19930: LD_INT 116
19932: PUSH
19933: LD_INT 117
19935: PUSH
19936: LD_INT 118
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: ST_TO_ADDR
19953: GO 22840
19955: LD_INT 4
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 20059
19963: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19964: LD_ADDR_VAR 0 2
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 4
19974: PUSH
19975: LD_INT 5
19977: PUSH
19978: LD_INT 8
19980: PUSH
19981: LD_INT 11
19983: PUSH
19984: LD_INT 12
19986: PUSH
19987: LD_INT 15
19989: PUSH
19990: LD_INT 16
19992: PUSH
19993: LD_INT 22
19995: PUSH
19996: LD_INT 23
19998: PUSH
19999: LD_INT 26
20001: PUSH
20002: LD_INT 36
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 101
20021: PUSH
20022: LD_INT 102
20024: PUSH
20025: LD_INT 105
20027: PUSH
20028: LD_INT 106
20030: PUSH
20031: LD_INT 108
20033: PUSH
20034: LD_INT 116
20036: PUSH
20037: LD_INT 117
20039: PUSH
20040: LD_INT 118
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: ST_TO_ADDR
20057: GO 22840
20059: LD_INT 5
20061: DOUBLE
20062: EQUAL
20063: IFTRUE 20067
20065: GO 20179
20067: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20068: LD_ADDR_VAR 0 2
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: LD_INT 4
20078: PUSH
20079: LD_INT 5
20081: PUSH
20082: LD_INT 6
20084: PUSH
20085: LD_INT 8
20087: PUSH
20088: LD_INT 11
20090: PUSH
20091: LD_INT 12
20093: PUSH
20094: LD_INT 15
20096: PUSH
20097: LD_INT 16
20099: PUSH
20100: LD_INT 22
20102: PUSH
20103: LD_INT 23
20105: PUSH
20106: LD_INT 25
20108: PUSH
20109: LD_INT 26
20111: PUSH
20112: LD_INT 36
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 101
20133: PUSH
20134: LD_INT 102
20136: PUSH
20137: LD_INT 105
20139: PUSH
20140: LD_INT 106
20142: PUSH
20143: LD_INT 108
20145: PUSH
20146: LD_INT 109
20148: PUSH
20149: LD_INT 112
20151: PUSH
20152: LD_INT 116
20154: PUSH
20155: LD_INT 117
20157: PUSH
20158: LD_INT 118
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: ST_TO_ADDR
20177: GO 22840
20179: LD_INT 6
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20319
20187: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20188: LD_ADDR_VAR 0 2
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: LD_INT 4
20198: PUSH
20199: LD_INT 5
20201: PUSH
20202: LD_INT 6
20204: PUSH
20205: LD_INT 8
20207: PUSH
20208: LD_INT 11
20210: PUSH
20211: LD_INT 12
20213: PUSH
20214: LD_INT 15
20216: PUSH
20217: LD_INT 16
20219: PUSH
20220: LD_INT 20
20222: PUSH
20223: LD_INT 21
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_INT 23
20231: PUSH
20232: LD_INT 25
20234: PUSH
20235: LD_INT 26
20237: PUSH
20238: LD_INT 30
20240: PUSH
20241: LD_INT 31
20243: PUSH
20244: LD_INT 32
20246: PUSH
20247: LD_INT 36
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 101
20273: PUSH
20274: LD_INT 102
20276: PUSH
20277: LD_INT 105
20279: PUSH
20280: LD_INT 106
20282: PUSH
20283: LD_INT 108
20285: PUSH
20286: LD_INT 109
20288: PUSH
20289: LD_INT 112
20291: PUSH
20292: LD_INT 116
20294: PUSH
20295: LD_INT 117
20297: PUSH
20298: LD_INT 118
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: ST_TO_ADDR
20317: GO 22840
20319: LD_INT 7
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20439
20327: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20328: LD_ADDR_VAR 0 2
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: LD_INT 4
20338: PUSH
20339: LD_INT 5
20341: PUSH
20342: LD_INT 7
20344: PUSH
20345: LD_INT 11
20347: PUSH
20348: LD_INT 12
20350: PUSH
20351: LD_INT 15
20353: PUSH
20354: LD_INT 16
20356: PUSH
20357: LD_INT 20
20359: PUSH
20360: LD_INT 21
20362: PUSH
20363: LD_INT 22
20365: PUSH
20366: LD_INT 23
20368: PUSH
20369: LD_INT 25
20371: PUSH
20372: LD_INT 26
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 101
20393: PUSH
20394: LD_INT 102
20396: PUSH
20397: LD_INT 103
20399: PUSH
20400: LD_INT 105
20402: PUSH
20403: LD_INT 106
20405: PUSH
20406: LD_INT 108
20408: PUSH
20409: LD_INT 112
20411: PUSH
20412: LD_INT 116
20414: PUSH
20415: LD_INT 117
20417: PUSH
20418: LD_INT 118
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: ST_TO_ADDR
20437: GO 22840
20439: LD_INT 8
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20587
20447: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20448: LD_ADDR_VAR 0 2
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 4
20458: PUSH
20459: LD_INT 5
20461: PUSH
20462: LD_INT 6
20464: PUSH
20465: LD_INT 7
20467: PUSH
20468: LD_INT 8
20470: PUSH
20471: LD_INT 11
20473: PUSH
20474: LD_INT 12
20476: PUSH
20477: LD_INT 15
20479: PUSH
20480: LD_INT 16
20482: PUSH
20483: LD_INT 20
20485: PUSH
20486: LD_INT 21
20488: PUSH
20489: LD_INT 22
20491: PUSH
20492: LD_INT 23
20494: PUSH
20495: LD_INT 25
20497: PUSH
20498: LD_INT 26
20500: PUSH
20501: LD_INT 30
20503: PUSH
20504: LD_INT 31
20506: PUSH
20507: LD_INT 32
20509: PUSH
20510: LD_INT 36
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 101
20537: PUSH
20538: LD_INT 102
20540: PUSH
20541: LD_INT 103
20543: PUSH
20544: LD_INT 105
20546: PUSH
20547: LD_INT 106
20549: PUSH
20550: LD_INT 108
20552: PUSH
20553: LD_INT 109
20555: PUSH
20556: LD_INT 112
20558: PUSH
20559: LD_INT 116
20561: PUSH
20562: LD_INT 117
20564: PUSH
20565: LD_INT 118
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: ST_TO_ADDR
20585: GO 22840
20587: LD_INT 9
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20743
20595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20596: LD_ADDR_VAR 0 2
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 4
20606: PUSH
20607: LD_INT 5
20609: PUSH
20610: LD_INT 6
20612: PUSH
20613: LD_INT 7
20615: PUSH
20616: LD_INT 8
20618: PUSH
20619: LD_INT 11
20621: PUSH
20622: LD_INT 12
20624: PUSH
20625: LD_INT 15
20627: PUSH
20628: LD_INT 16
20630: PUSH
20631: LD_INT 20
20633: PUSH
20634: LD_INT 21
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 23
20642: PUSH
20643: LD_INT 25
20645: PUSH
20646: LD_INT 26
20648: PUSH
20649: LD_INT 28
20651: PUSH
20652: LD_INT 30
20654: PUSH
20655: LD_INT 31
20657: PUSH
20658: LD_INT 32
20660: PUSH
20661: LD_INT 36
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 101
20689: PUSH
20690: LD_INT 102
20692: PUSH
20693: LD_INT 103
20695: PUSH
20696: LD_INT 105
20698: PUSH
20699: LD_INT 106
20701: PUSH
20702: LD_INT 108
20704: PUSH
20705: LD_INT 109
20707: PUSH
20708: LD_INT 112
20710: PUSH
20711: LD_INT 114
20713: PUSH
20714: LD_INT 116
20716: PUSH
20717: LD_INT 117
20719: PUSH
20720: LD_INT 118
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: ST_TO_ADDR
20741: GO 22840
20743: LD_INT 10
20745: DOUBLE
20746: EQUAL
20747: IFTRUE 20751
20749: GO 20947
20751: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20752: LD_ADDR_VAR 0 2
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 4
20762: PUSH
20763: LD_INT 5
20765: PUSH
20766: LD_INT 6
20768: PUSH
20769: LD_INT 7
20771: PUSH
20772: LD_INT 8
20774: PUSH
20775: LD_INT 9
20777: PUSH
20778: LD_INT 10
20780: PUSH
20781: LD_INT 11
20783: PUSH
20784: LD_INT 12
20786: PUSH
20787: LD_INT 13
20789: PUSH
20790: LD_INT 14
20792: PUSH
20793: LD_INT 15
20795: PUSH
20796: LD_INT 16
20798: PUSH
20799: LD_INT 17
20801: PUSH
20802: LD_INT 18
20804: PUSH
20805: LD_INT 19
20807: PUSH
20808: LD_INT 20
20810: PUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 22
20816: PUSH
20817: LD_INT 23
20819: PUSH
20820: LD_INT 24
20822: PUSH
20823: LD_INT 25
20825: PUSH
20826: LD_INT 26
20828: PUSH
20829: LD_INT 28
20831: PUSH
20832: LD_INT 30
20834: PUSH
20835: LD_INT 31
20837: PUSH
20838: LD_INT 32
20840: PUSH
20841: LD_INT 36
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 101
20877: PUSH
20878: LD_INT 102
20880: PUSH
20881: LD_INT 103
20883: PUSH
20884: LD_INT 104
20886: PUSH
20887: LD_INT 105
20889: PUSH
20890: LD_INT 106
20892: PUSH
20893: LD_INT 107
20895: PUSH
20896: LD_INT 108
20898: PUSH
20899: LD_INT 109
20901: PUSH
20902: LD_INT 110
20904: PUSH
20905: LD_INT 111
20907: PUSH
20908: LD_INT 112
20910: PUSH
20911: LD_INT 114
20913: PUSH
20914: LD_INT 116
20916: PUSH
20917: LD_INT 117
20919: PUSH
20920: LD_INT 118
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: ST_TO_ADDR
20945: GO 22840
20947: LD_INT 11
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 21159
20955: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20956: LD_ADDR_VAR 0 2
20960: PUSH
20961: LD_INT 2
20963: PUSH
20964: LD_INT 3
20966: PUSH
20967: LD_INT 4
20969: PUSH
20970: LD_INT 5
20972: PUSH
20973: LD_INT 6
20975: PUSH
20976: LD_INT 7
20978: PUSH
20979: LD_INT 8
20981: PUSH
20982: LD_INT 9
20984: PUSH
20985: LD_INT 10
20987: PUSH
20988: LD_INT 11
20990: PUSH
20991: LD_INT 12
20993: PUSH
20994: LD_INT 13
20996: PUSH
20997: LD_INT 14
20999: PUSH
21000: LD_INT 15
21002: PUSH
21003: LD_INT 16
21005: PUSH
21006: LD_INT 17
21008: PUSH
21009: LD_INT 18
21011: PUSH
21012: LD_INT 19
21014: PUSH
21015: LD_INT 20
21017: PUSH
21018: LD_INT 21
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_INT 23
21026: PUSH
21027: LD_INT 24
21029: PUSH
21030: LD_INT 25
21032: PUSH
21033: LD_INT 26
21035: PUSH
21036: LD_INT 28
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 31
21044: PUSH
21045: LD_INT 32
21047: PUSH
21048: LD_INT 34
21050: PUSH
21051: LD_INT 36
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 101
21089: PUSH
21090: LD_INT 102
21092: PUSH
21093: LD_INT 103
21095: PUSH
21096: LD_INT 104
21098: PUSH
21099: LD_INT 105
21101: PUSH
21102: LD_INT 106
21104: PUSH
21105: LD_INT 107
21107: PUSH
21108: LD_INT 108
21110: PUSH
21111: LD_INT 109
21113: PUSH
21114: LD_INT 110
21116: PUSH
21117: LD_INT 111
21119: PUSH
21120: LD_INT 112
21122: PUSH
21123: LD_INT 114
21125: PUSH
21126: LD_INT 116
21128: PUSH
21129: LD_INT 117
21131: PUSH
21132: LD_INT 118
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: ST_TO_ADDR
21157: GO 22840
21159: LD_INT 12
21161: DOUBLE
21162: EQUAL
21163: IFTRUE 21167
21165: GO 21387
21167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21168: LD_ADDR_VAR 0 2
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: LD_INT 3
21181: PUSH
21182: LD_INT 4
21184: PUSH
21185: LD_INT 5
21187: PUSH
21188: LD_INT 6
21190: PUSH
21191: LD_INT 7
21193: PUSH
21194: LD_INT 8
21196: PUSH
21197: LD_INT 9
21199: PUSH
21200: LD_INT 10
21202: PUSH
21203: LD_INT 11
21205: PUSH
21206: LD_INT 12
21208: PUSH
21209: LD_INT 13
21211: PUSH
21212: LD_INT 14
21214: PUSH
21215: LD_INT 15
21217: PUSH
21218: LD_INT 16
21220: PUSH
21221: LD_INT 17
21223: PUSH
21224: LD_INT 18
21226: PUSH
21227: LD_INT 19
21229: PUSH
21230: LD_INT 20
21232: PUSH
21233: LD_INT 21
21235: PUSH
21236: LD_INT 22
21238: PUSH
21239: LD_INT 23
21241: PUSH
21242: LD_INT 24
21244: PUSH
21245: LD_INT 25
21247: PUSH
21248: LD_INT 26
21250: PUSH
21251: LD_INT 27
21253: PUSH
21254: LD_INT 28
21256: PUSH
21257: LD_INT 30
21259: PUSH
21260: LD_INT 31
21262: PUSH
21263: LD_INT 32
21265: PUSH
21266: LD_INT 33
21268: PUSH
21269: LD_INT 34
21271: PUSH
21272: LD_INT 36
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 101
21313: PUSH
21314: LD_INT 102
21316: PUSH
21317: LD_INT 103
21319: PUSH
21320: LD_INT 104
21322: PUSH
21323: LD_INT 105
21325: PUSH
21326: LD_INT 106
21328: PUSH
21329: LD_INT 107
21331: PUSH
21332: LD_INT 108
21334: PUSH
21335: LD_INT 109
21337: PUSH
21338: LD_INT 110
21340: PUSH
21341: LD_INT 111
21343: PUSH
21344: LD_INT 112
21346: PUSH
21347: LD_INT 113
21349: PUSH
21350: LD_INT 114
21352: PUSH
21353: LD_INT 116
21355: PUSH
21356: LD_INT 117
21358: PUSH
21359: LD_INT 118
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: ST_TO_ADDR
21385: GO 22840
21387: LD_INT 13
21389: DOUBLE
21390: EQUAL
21391: IFTRUE 21395
21393: GO 21603
21395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21396: LD_ADDR_VAR 0 2
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 2
21406: PUSH
21407: LD_INT 3
21409: PUSH
21410: LD_INT 4
21412: PUSH
21413: LD_INT 5
21415: PUSH
21416: LD_INT 8
21418: PUSH
21419: LD_INT 9
21421: PUSH
21422: LD_INT 10
21424: PUSH
21425: LD_INT 11
21427: PUSH
21428: LD_INT 12
21430: PUSH
21431: LD_INT 14
21433: PUSH
21434: LD_INT 15
21436: PUSH
21437: LD_INT 16
21439: PUSH
21440: LD_INT 17
21442: PUSH
21443: LD_INT 18
21445: PUSH
21446: LD_INT 19
21448: PUSH
21449: LD_INT 20
21451: PUSH
21452: LD_INT 21
21454: PUSH
21455: LD_INT 22
21457: PUSH
21458: LD_INT 23
21460: PUSH
21461: LD_INT 24
21463: PUSH
21464: LD_INT 25
21466: PUSH
21467: LD_INT 26
21469: PUSH
21470: LD_INT 27
21472: PUSH
21473: LD_INT 28
21475: PUSH
21476: LD_INT 30
21478: PUSH
21479: LD_INT 31
21481: PUSH
21482: LD_INT 32
21484: PUSH
21485: LD_INT 33
21487: PUSH
21488: LD_INT 34
21490: PUSH
21491: LD_INT 36
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 101
21529: PUSH
21530: LD_INT 102
21532: PUSH
21533: LD_INT 103
21535: PUSH
21536: LD_INT 104
21538: PUSH
21539: LD_INT 105
21541: PUSH
21542: LD_INT 106
21544: PUSH
21545: LD_INT 107
21547: PUSH
21548: LD_INT 108
21550: PUSH
21551: LD_INT 109
21553: PUSH
21554: LD_INT 110
21556: PUSH
21557: LD_INT 111
21559: PUSH
21560: LD_INT 112
21562: PUSH
21563: LD_INT 113
21565: PUSH
21566: LD_INT 114
21568: PUSH
21569: LD_INT 116
21571: PUSH
21572: LD_INT 117
21574: PUSH
21575: LD_INT 118
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: ST_TO_ADDR
21601: GO 22840
21603: LD_INT 14
21605: DOUBLE
21606: EQUAL
21607: IFTRUE 21611
21609: GO 21835
21611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21612: LD_ADDR_VAR 0 2
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: LD_INT 4
21628: PUSH
21629: LD_INT 5
21631: PUSH
21632: LD_INT 6
21634: PUSH
21635: LD_INT 7
21637: PUSH
21638: LD_INT 8
21640: PUSH
21641: LD_INT 9
21643: PUSH
21644: LD_INT 10
21646: PUSH
21647: LD_INT 11
21649: PUSH
21650: LD_INT 12
21652: PUSH
21653: LD_INT 13
21655: PUSH
21656: LD_INT 14
21658: PUSH
21659: LD_INT 15
21661: PUSH
21662: LD_INT 16
21664: PUSH
21665: LD_INT 17
21667: PUSH
21668: LD_INT 18
21670: PUSH
21671: LD_INT 19
21673: PUSH
21674: LD_INT 20
21676: PUSH
21677: LD_INT 21
21679: PUSH
21680: LD_INT 22
21682: PUSH
21683: LD_INT 23
21685: PUSH
21686: LD_INT 24
21688: PUSH
21689: LD_INT 25
21691: PUSH
21692: LD_INT 26
21694: PUSH
21695: LD_INT 27
21697: PUSH
21698: LD_INT 28
21700: PUSH
21701: LD_INT 29
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 31
21709: PUSH
21710: LD_INT 32
21712: PUSH
21713: LD_INT 33
21715: PUSH
21716: LD_INT 34
21718: PUSH
21719: LD_INT 36
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 101
21761: PUSH
21762: LD_INT 102
21764: PUSH
21765: LD_INT 103
21767: PUSH
21768: LD_INT 104
21770: PUSH
21771: LD_INT 105
21773: PUSH
21774: LD_INT 106
21776: PUSH
21777: LD_INT 107
21779: PUSH
21780: LD_INT 108
21782: PUSH
21783: LD_INT 109
21785: PUSH
21786: LD_INT 110
21788: PUSH
21789: LD_INT 111
21791: PUSH
21792: LD_INT 112
21794: PUSH
21795: LD_INT 113
21797: PUSH
21798: LD_INT 114
21800: PUSH
21801: LD_INT 116
21803: PUSH
21804: LD_INT 117
21806: PUSH
21807: LD_INT 118
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: ST_TO_ADDR
21833: GO 22840
21835: LD_INT 15
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 22067
21843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: LD_INT 3
21857: PUSH
21858: LD_INT 4
21860: PUSH
21861: LD_INT 5
21863: PUSH
21864: LD_INT 6
21866: PUSH
21867: LD_INT 7
21869: PUSH
21870: LD_INT 8
21872: PUSH
21873: LD_INT 9
21875: PUSH
21876: LD_INT 10
21878: PUSH
21879: LD_INT 11
21881: PUSH
21882: LD_INT 12
21884: PUSH
21885: LD_INT 13
21887: PUSH
21888: LD_INT 14
21890: PUSH
21891: LD_INT 15
21893: PUSH
21894: LD_INT 16
21896: PUSH
21897: LD_INT 17
21899: PUSH
21900: LD_INT 18
21902: PUSH
21903: LD_INT 19
21905: PUSH
21906: LD_INT 20
21908: PUSH
21909: LD_INT 21
21911: PUSH
21912: LD_INT 22
21914: PUSH
21915: LD_INT 23
21917: PUSH
21918: LD_INT 24
21920: PUSH
21921: LD_INT 25
21923: PUSH
21924: LD_INT 26
21926: PUSH
21927: LD_INT 27
21929: PUSH
21930: LD_INT 28
21932: PUSH
21933: LD_INT 29
21935: PUSH
21936: LD_INT 30
21938: PUSH
21939: LD_INT 31
21941: PUSH
21942: LD_INT 32
21944: PUSH
21945: LD_INT 33
21947: PUSH
21948: LD_INT 34
21950: PUSH
21951: LD_INT 36
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 101
21993: PUSH
21994: LD_INT 102
21996: PUSH
21997: LD_INT 103
21999: PUSH
22000: LD_INT 104
22002: PUSH
22003: LD_INT 105
22005: PUSH
22006: LD_INT 106
22008: PUSH
22009: LD_INT 107
22011: PUSH
22012: LD_INT 108
22014: PUSH
22015: LD_INT 109
22017: PUSH
22018: LD_INT 110
22020: PUSH
22021: LD_INT 111
22023: PUSH
22024: LD_INT 112
22026: PUSH
22027: LD_INT 113
22029: PUSH
22030: LD_INT 114
22032: PUSH
22033: LD_INT 116
22035: PUSH
22036: LD_INT 117
22038: PUSH
22039: LD_INT 118
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 22840
22067: LD_INT 16
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22211
22075: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 7
22092: PUSH
22093: LD_INT 11
22095: PUSH
22096: LD_INT 12
22098: PUSH
22099: LD_INT 15
22101: PUSH
22102: LD_INT 16
22104: PUSH
22105: LD_INT 20
22107: PUSH
22108: LD_INT 21
22110: PUSH
22111: LD_INT 22
22113: PUSH
22114: LD_INT 23
22116: PUSH
22117: LD_INT 25
22119: PUSH
22120: LD_INT 26
22122: PUSH
22123: LD_INT 30
22125: PUSH
22126: LD_INT 31
22128: PUSH
22129: LD_INT 32
22131: PUSH
22132: LD_INT 33
22134: PUSH
22135: LD_INT 34
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 101
22161: PUSH
22162: LD_INT 102
22164: PUSH
22165: LD_INT 103
22167: PUSH
22168: LD_INT 106
22170: PUSH
22171: LD_INT 108
22173: PUSH
22174: LD_INT 112
22176: PUSH
22177: LD_INT 113
22179: PUSH
22180: LD_INT 114
22182: PUSH
22183: LD_INT 116
22185: PUSH
22186: LD_INT 117
22188: PUSH
22189: LD_INT 118
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: ST_TO_ADDR
22209: GO 22840
22211: LD_INT 17
22213: DOUBLE
22214: EQUAL
22215: IFTRUE 22219
22217: GO 22443
22219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22220: LD_ADDR_VAR 0 2
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 3
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 6
22242: PUSH
22243: LD_INT 7
22245: PUSH
22246: LD_INT 8
22248: PUSH
22249: LD_INT 9
22251: PUSH
22252: LD_INT 10
22254: PUSH
22255: LD_INT 11
22257: PUSH
22258: LD_INT 12
22260: PUSH
22261: LD_INT 13
22263: PUSH
22264: LD_INT 14
22266: PUSH
22267: LD_INT 15
22269: PUSH
22270: LD_INT 16
22272: PUSH
22273: LD_INT 17
22275: PUSH
22276: LD_INT 18
22278: PUSH
22279: LD_INT 19
22281: PUSH
22282: LD_INT 20
22284: PUSH
22285: LD_INT 21
22287: PUSH
22288: LD_INT 22
22290: PUSH
22291: LD_INT 23
22293: PUSH
22294: LD_INT 24
22296: PUSH
22297: LD_INT 25
22299: PUSH
22300: LD_INT 26
22302: PUSH
22303: LD_INT 27
22305: PUSH
22306: LD_INT 28
22308: PUSH
22309: LD_INT 29
22311: PUSH
22312: LD_INT 30
22314: PUSH
22315: LD_INT 31
22317: PUSH
22318: LD_INT 32
22320: PUSH
22321: LD_INT 33
22323: PUSH
22324: LD_INT 34
22326: PUSH
22327: LD_INT 36
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 101
22369: PUSH
22370: LD_INT 102
22372: PUSH
22373: LD_INT 103
22375: PUSH
22376: LD_INT 104
22378: PUSH
22379: LD_INT 105
22381: PUSH
22382: LD_INT 106
22384: PUSH
22385: LD_INT 107
22387: PUSH
22388: LD_INT 108
22390: PUSH
22391: LD_INT 109
22393: PUSH
22394: LD_INT 110
22396: PUSH
22397: LD_INT 111
22399: PUSH
22400: LD_INT 112
22402: PUSH
22403: LD_INT 113
22405: PUSH
22406: LD_INT 114
22408: PUSH
22409: LD_INT 116
22411: PUSH
22412: LD_INT 117
22414: PUSH
22415: LD_INT 118
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: ST_TO_ADDR
22441: GO 22840
22443: LD_INT 18
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22599
22451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 4
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 7
22468: PUSH
22469: LD_INT 11
22471: PUSH
22472: LD_INT 12
22474: PUSH
22475: LD_INT 15
22477: PUSH
22478: LD_INT 16
22480: PUSH
22481: LD_INT 20
22483: PUSH
22484: LD_INT 21
22486: PUSH
22487: LD_INT 22
22489: PUSH
22490: LD_INT 23
22492: PUSH
22493: LD_INT 25
22495: PUSH
22496: LD_INT 26
22498: PUSH
22499: LD_INT 30
22501: PUSH
22502: LD_INT 31
22504: PUSH
22505: LD_INT 32
22507: PUSH
22508: LD_INT 33
22510: PUSH
22511: LD_INT 34
22513: PUSH
22514: LD_INT 35
22516: PUSH
22517: LD_INT 36
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 101
22545: PUSH
22546: LD_INT 102
22548: PUSH
22549: LD_INT 103
22551: PUSH
22552: LD_INT 106
22554: PUSH
22555: LD_INT 108
22557: PUSH
22558: LD_INT 112
22560: PUSH
22561: LD_INT 113
22563: PUSH
22564: LD_INT 114
22566: PUSH
22567: LD_INT 115
22569: PUSH
22570: LD_INT 116
22572: PUSH
22573: LD_INT 117
22575: PUSH
22576: LD_INT 118
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: ST_TO_ADDR
22597: GO 22840
22599: LD_INT 19
22601: DOUBLE
22602: EQUAL
22603: IFTRUE 22607
22605: GO 22839
22607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22608: LD_ADDR_VAR 0 2
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: LD_INT 4
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: LD_INT 6
22630: PUSH
22631: LD_INT 7
22633: PUSH
22634: LD_INT 8
22636: PUSH
22637: LD_INT 9
22639: PUSH
22640: LD_INT 10
22642: PUSH
22643: LD_INT 11
22645: PUSH
22646: LD_INT 12
22648: PUSH
22649: LD_INT 13
22651: PUSH
22652: LD_INT 14
22654: PUSH
22655: LD_INT 15
22657: PUSH
22658: LD_INT 16
22660: PUSH
22661: LD_INT 17
22663: PUSH
22664: LD_INT 18
22666: PUSH
22667: LD_INT 19
22669: PUSH
22670: LD_INT 20
22672: PUSH
22673: LD_INT 21
22675: PUSH
22676: LD_INT 22
22678: PUSH
22679: LD_INT 23
22681: PUSH
22682: LD_INT 24
22684: PUSH
22685: LD_INT 25
22687: PUSH
22688: LD_INT 26
22690: PUSH
22691: LD_INT 27
22693: PUSH
22694: LD_INT 28
22696: PUSH
22697: LD_INT 29
22699: PUSH
22700: LD_INT 30
22702: PUSH
22703: LD_INT 31
22705: PUSH
22706: LD_INT 32
22708: PUSH
22709: LD_INT 33
22711: PUSH
22712: LD_INT 34
22714: PUSH
22715: LD_INT 35
22717: PUSH
22718: LD_INT 36
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 101
22761: PUSH
22762: LD_INT 102
22764: PUSH
22765: LD_INT 103
22767: PUSH
22768: LD_INT 104
22770: PUSH
22771: LD_INT 105
22773: PUSH
22774: LD_INT 106
22776: PUSH
22777: LD_INT 107
22779: PUSH
22780: LD_INT 108
22782: PUSH
22783: LD_INT 109
22785: PUSH
22786: LD_INT 110
22788: PUSH
22789: LD_INT 111
22791: PUSH
22792: LD_INT 112
22794: PUSH
22795: LD_INT 113
22797: PUSH
22798: LD_INT 114
22800: PUSH
22801: LD_INT 115
22803: PUSH
22804: LD_INT 116
22806: PUSH
22807: LD_INT 117
22809: PUSH
22810: LD_INT 118
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: ST_TO_ADDR
22837: GO 22840
22839: POP
// end else
22840: GO 23071
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22842: LD_ADDR_VAR 0 2
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: LD_INT 4
22858: PUSH
22859: LD_INT 5
22861: PUSH
22862: LD_INT 6
22864: PUSH
22865: LD_INT 7
22867: PUSH
22868: LD_INT 8
22870: PUSH
22871: LD_INT 9
22873: PUSH
22874: LD_INT 10
22876: PUSH
22877: LD_INT 11
22879: PUSH
22880: LD_INT 12
22882: PUSH
22883: LD_INT 13
22885: PUSH
22886: LD_INT 14
22888: PUSH
22889: LD_INT 15
22891: PUSH
22892: LD_INT 16
22894: PUSH
22895: LD_INT 17
22897: PUSH
22898: LD_INT 18
22900: PUSH
22901: LD_INT 19
22903: PUSH
22904: LD_INT 20
22906: PUSH
22907: LD_INT 21
22909: PUSH
22910: LD_INT 22
22912: PUSH
22913: LD_INT 23
22915: PUSH
22916: LD_INT 24
22918: PUSH
22919: LD_INT 25
22921: PUSH
22922: LD_INT 26
22924: PUSH
22925: LD_INT 27
22927: PUSH
22928: LD_INT 28
22930: PUSH
22931: LD_INT 29
22933: PUSH
22934: LD_INT 30
22936: PUSH
22937: LD_INT 31
22939: PUSH
22940: LD_INT 32
22942: PUSH
22943: LD_INT 33
22945: PUSH
22946: LD_INT 34
22948: PUSH
22949: LD_INT 35
22951: PUSH
22952: LD_INT 36
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 101
22995: PUSH
22996: LD_INT 102
22998: PUSH
22999: LD_INT 103
23001: PUSH
23002: LD_INT 104
23004: PUSH
23005: LD_INT 105
23007: PUSH
23008: LD_INT 106
23010: PUSH
23011: LD_INT 107
23013: PUSH
23014: LD_INT 108
23016: PUSH
23017: LD_INT 109
23019: PUSH
23020: LD_INT 110
23022: PUSH
23023: LD_INT 111
23025: PUSH
23026: LD_INT 112
23028: PUSH
23029: LD_INT 113
23031: PUSH
23032: LD_INT 114
23034: PUSH
23035: LD_INT 115
23037: PUSH
23038: LD_INT 116
23040: PUSH
23041: LD_INT 117
23043: PUSH
23044: LD_INT 118
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// if result then
23071: LD_VAR 0 2
23075: IFFALSE 23861
// begin normal :=  ;
23077: LD_ADDR_VAR 0 5
23081: PUSH
23082: LD_STRING 
23084: ST_TO_ADDR
// hardcore :=  ;
23085: LD_ADDR_VAR 0 6
23089: PUSH
23090: LD_STRING 
23092: ST_TO_ADDR
// active :=  ;
23093: LD_ADDR_VAR 0 7
23097: PUSH
23098: LD_STRING 
23100: ST_TO_ADDR
// for i = 1 to normalCounter do
23101: LD_ADDR_VAR 0 8
23105: PUSH
23106: DOUBLE
23107: LD_INT 1
23109: DEC
23110: ST_TO_ADDR
23111: LD_EXP 55
23115: PUSH
23116: FOR_TO
23117: IFFALSE 23218
// begin tmp := 0 ;
23119: LD_ADDR_VAR 0 3
23123: PUSH
23124: LD_STRING 0
23126: ST_TO_ADDR
// if result [ 1 ] then
23127: LD_VAR 0 2
23131: PUSH
23132: LD_INT 1
23134: ARRAY
23135: IFFALSE 23200
// if result [ 1 ] [ 1 ] = i then
23137: LD_VAR 0 2
23141: PUSH
23142: LD_INT 1
23144: ARRAY
23145: PUSH
23146: LD_INT 1
23148: ARRAY
23149: PUSH
23150: LD_VAR 0 8
23154: EQUAL
23155: IFFALSE 23200
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23157: LD_ADDR_VAR 0 2
23161: PUSH
23162: LD_VAR 0 2
23166: PPUSH
23167: LD_INT 1
23169: PPUSH
23170: LD_VAR 0 2
23174: PUSH
23175: LD_INT 1
23177: ARRAY
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: CALL_OW 3
23186: PPUSH
23187: CALL_OW 1
23191: ST_TO_ADDR
// tmp := 1 ;
23192: LD_ADDR_VAR 0 3
23196: PUSH
23197: LD_STRING 1
23199: ST_TO_ADDR
// end ; normal := normal & tmp ;
23200: LD_ADDR_VAR 0 5
23204: PUSH
23205: LD_VAR 0 5
23209: PUSH
23210: LD_VAR 0 3
23214: STR
23215: ST_TO_ADDR
// end ;
23216: GO 23116
23218: POP
23219: POP
// for i = 1 to hardcoreCounter do
23220: LD_ADDR_VAR 0 8
23224: PUSH
23225: DOUBLE
23226: LD_INT 1
23228: DEC
23229: ST_TO_ADDR
23230: LD_EXP 56
23234: PUSH
23235: FOR_TO
23236: IFFALSE 23341
// begin tmp := 0 ;
23238: LD_ADDR_VAR 0 3
23242: PUSH
23243: LD_STRING 0
23245: ST_TO_ADDR
// if result [ 2 ] then
23246: LD_VAR 0 2
23250: PUSH
23251: LD_INT 2
23253: ARRAY
23254: IFFALSE 23323
// if result [ 2 ] [ 1 ] = 100 + i then
23256: LD_VAR 0 2
23260: PUSH
23261: LD_INT 2
23263: ARRAY
23264: PUSH
23265: LD_INT 1
23267: ARRAY
23268: PUSH
23269: LD_INT 100
23271: PUSH
23272: LD_VAR 0 8
23276: PLUS
23277: EQUAL
23278: IFFALSE 23323
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23280: LD_ADDR_VAR 0 2
23284: PUSH
23285: LD_VAR 0 2
23289: PPUSH
23290: LD_INT 2
23292: PPUSH
23293: LD_VAR 0 2
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 3
23309: PPUSH
23310: CALL_OW 1
23314: ST_TO_ADDR
// tmp := 1 ;
23315: LD_ADDR_VAR 0 3
23319: PUSH
23320: LD_STRING 1
23322: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23323: LD_ADDR_VAR 0 6
23327: PUSH
23328: LD_VAR 0 6
23332: PUSH
23333: LD_VAR 0 3
23337: STR
23338: ST_TO_ADDR
// end ;
23339: GO 23235
23341: POP
23342: POP
// if isGameLoad then
23343: LD_VAR 0 1
23347: IFFALSE 23822
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23349: LD_ADDR_VAR 0 4
23353: PUSH
23354: LD_EXP 59
23358: PUSH
23359: LD_EXP 58
23363: PUSH
23364: LD_EXP 60
23368: PUSH
23369: LD_EXP 57
23373: PUSH
23374: LD_EXP 61
23378: PUSH
23379: LD_EXP 62
23383: PUSH
23384: LD_EXP 63
23388: PUSH
23389: LD_EXP 64
23393: PUSH
23394: LD_EXP 65
23398: PUSH
23399: LD_EXP 66
23403: PUSH
23404: LD_EXP 67
23408: PUSH
23409: LD_EXP 68
23413: PUSH
23414: LD_EXP 69
23418: PUSH
23419: LD_EXP 70
23423: PUSH
23424: LD_EXP 78
23428: PUSH
23429: LD_EXP 79
23433: PUSH
23434: LD_EXP 80
23438: PUSH
23439: LD_EXP 81
23443: PUSH
23444: LD_EXP 83
23448: PUSH
23449: LD_EXP 84
23453: PUSH
23454: LD_EXP 85
23458: PUSH
23459: LD_EXP 88
23463: PUSH
23464: LD_EXP 90
23468: PUSH
23469: LD_EXP 91
23473: PUSH
23474: LD_EXP 92
23478: PUSH
23479: LD_EXP 94
23483: PUSH
23484: LD_EXP 95
23488: PUSH
23489: LD_EXP 98
23493: PUSH
23494: LD_EXP 99
23498: PUSH
23499: LD_EXP 100
23503: PUSH
23504: LD_EXP 101
23508: PUSH
23509: LD_EXP 102
23513: PUSH
23514: LD_EXP 103
23518: PUSH
23519: LD_EXP 104
23523: PUSH
23524: LD_EXP 105
23528: PUSH
23529: LD_EXP 106
23533: PUSH
23534: LD_EXP 71
23538: PUSH
23539: LD_EXP 72
23543: PUSH
23544: LD_EXP 75
23548: PUSH
23549: LD_EXP 76
23553: PUSH
23554: LD_EXP 77
23558: PUSH
23559: LD_EXP 73
23563: PUSH
23564: LD_EXP 74
23568: PUSH
23569: LD_EXP 82
23573: PUSH
23574: LD_EXP 86
23578: PUSH
23579: LD_EXP 87
23583: PUSH
23584: LD_EXP 89
23588: PUSH
23589: LD_EXP 93
23593: PUSH
23594: LD_EXP 96
23598: PUSH
23599: LD_EXP 97
23603: PUSH
23604: LD_EXP 107
23608: PUSH
23609: LD_EXP 108
23613: PUSH
23614: LD_EXP 109
23618: PUSH
23619: LD_EXP 110
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// tmp :=  ;
23680: LD_ADDR_VAR 0 3
23684: PUSH
23685: LD_STRING 
23687: ST_TO_ADDR
// for i = 1 to normalCounter do
23688: LD_ADDR_VAR 0 8
23692: PUSH
23693: DOUBLE
23694: LD_INT 1
23696: DEC
23697: ST_TO_ADDR
23698: LD_EXP 55
23702: PUSH
23703: FOR_TO
23704: IFFALSE 23740
// begin if flags [ i ] then
23706: LD_VAR 0 4
23710: PUSH
23711: LD_VAR 0 8
23715: ARRAY
23716: IFFALSE 23738
// tmp := tmp & i & ; ;
23718: LD_ADDR_VAR 0 3
23722: PUSH
23723: LD_VAR 0 3
23727: PUSH
23728: LD_VAR 0 8
23732: STR
23733: PUSH
23734: LD_STRING ;
23736: STR
23737: ST_TO_ADDR
// end ;
23738: GO 23703
23740: POP
23741: POP
// for i = 1 to hardcoreCounter do
23742: LD_ADDR_VAR 0 8
23746: PUSH
23747: DOUBLE
23748: LD_INT 1
23750: DEC
23751: ST_TO_ADDR
23752: LD_EXP 56
23756: PUSH
23757: FOR_TO
23758: IFFALSE 23804
// begin if flags [ normalCounter + i ] then
23760: LD_VAR 0 4
23764: PUSH
23765: LD_EXP 55
23769: PUSH
23770: LD_VAR 0 8
23774: PLUS
23775: ARRAY
23776: IFFALSE 23802
// tmp := tmp & ( 100 + i ) & ; ;
23778: LD_ADDR_VAR 0 3
23782: PUSH
23783: LD_VAR 0 3
23787: PUSH
23788: LD_INT 100
23790: PUSH
23791: LD_VAR 0 8
23795: PLUS
23796: STR
23797: PUSH
23798: LD_STRING ;
23800: STR
23801: ST_TO_ADDR
// end ;
23802: GO 23757
23804: POP
23805: POP
// if tmp then
23806: LD_VAR 0 3
23810: IFFALSE 23822
// active := tmp ;
23812: LD_ADDR_VAR 0 7
23816: PUSH
23817: LD_VAR 0 3
23821: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23822: LD_STRING getStreamItemsFromMission("
23824: PUSH
23825: LD_VAR 0 5
23829: STR
23830: PUSH
23831: LD_STRING ","
23833: STR
23834: PUSH
23835: LD_VAR 0 6
23839: STR
23840: PUSH
23841: LD_STRING ","
23843: STR
23844: PUSH
23845: LD_VAR 0 7
23849: STR
23850: PUSH
23851: LD_STRING ")
23853: STR
23854: PPUSH
23855: CALL_OW 559
// end else
23859: GO 23868
// ToLua ( getStreamItemsFromMission("","","") ) ;
23861: LD_STRING getStreamItemsFromMission("","","")
23863: PPUSH
23864: CALL_OW 559
// end ;
23868: LD_VAR 0 2
23872: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23873: LD_EXP 54
23877: PUSH
23878: LD_EXP 59
23882: AND
23883: IFFALSE 24007
23885: GO 23887
23887: DISABLE
23888: LD_INT 0
23890: PPUSH
23891: PPUSH
// begin enable ;
23892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23893: LD_ADDR_VAR 0 2
23897: PUSH
23898: LD_INT 22
23900: PUSH
23901: LD_OWVAR 2
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: LD_INT 34
23915: PUSH
23916: LD_INT 7
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 34
23925: PUSH
23926: LD_INT 45
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 34
23935: PUSH
23936: LD_INT 28
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 34
23945: PUSH
23946: LD_INT 47
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PPUSH
23964: CALL_OW 69
23968: ST_TO_ADDR
// if not tmp then
23969: LD_VAR 0 2
23973: NOT
23974: IFFALSE 23978
// exit ;
23976: GO 24007
// for i in tmp do
23978: LD_ADDR_VAR 0 1
23982: PUSH
23983: LD_VAR 0 2
23987: PUSH
23988: FOR_IN
23989: IFFALSE 24005
// begin SetLives ( i , 0 ) ;
23991: LD_VAR 0 1
23995: PPUSH
23996: LD_INT 0
23998: PPUSH
23999: CALL_OW 234
// end ;
24003: GO 23988
24005: POP
24006: POP
// end ;
24007: PPOPN 2
24009: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24010: LD_EXP 54
24014: PUSH
24015: LD_EXP 60
24019: AND
24020: IFFALSE 24104
24022: GO 24024
24024: DISABLE
24025: LD_INT 0
24027: PPUSH
24028: PPUSH
// begin enable ;
24029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24030: LD_ADDR_VAR 0 2
24034: PUSH
24035: LD_INT 22
24037: PUSH
24038: LD_OWVAR 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 32
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 69
24065: ST_TO_ADDR
// if not tmp then
24066: LD_VAR 0 2
24070: NOT
24071: IFFALSE 24075
// exit ;
24073: GO 24104
// for i in tmp do
24075: LD_ADDR_VAR 0 1
24079: PUSH
24080: LD_VAR 0 2
24084: PUSH
24085: FOR_IN
24086: IFFALSE 24102
// begin SetLives ( i , 0 ) ;
24088: LD_VAR 0 1
24092: PPUSH
24093: LD_INT 0
24095: PPUSH
24096: CALL_OW 234
// end ;
24100: GO 24085
24102: POP
24103: POP
// end ;
24104: PPOPN 2
24106: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24107: LD_EXP 54
24111: PUSH
24112: LD_EXP 57
24116: AND
24117: IFFALSE 24210
24119: GO 24121
24121: DISABLE
24122: LD_INT 0
24124: PPUSH
// begin enable ;
24125: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24126: LD_ADDR_VAR 0 1
24130: PUSH
24131: LD_INT 22
24133: PUSH
24134: LD_OWVAR 2
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: LD_INT 25
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 25
24158: PUSH
24159: LD_INT 9
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 25
24168: PUSH
24169: LD_INT 8
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: PUSH
24191: FOR_IN
24192: IFFALSE 24208
// begin SetClass ( i , 1 ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_INT 1
24201: PPUSH
24202: CALL_OW 336
// end ;
24206: GO 24191
24208: POP
24209: POP
// end ;
24210: PPOPN 1
24212: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24213: LD_EXP 54
24217: PUSH
24218: LD_EXP 58
24222: AND
24223: PUSH
24224: LD_OWVAR 65
24228: PUSH
24229: LD_INT 7
24231: LESS
24232: AND
24233: IFFALSE 24247
24235: GO 24237
24237: DISABLE
// begin enable ;
24238: ENABLE
// game_speed := 7 ;
24239: LD_ADDR_OWVAR 65
24243: PUSH
24244: LD_INT 7
24246: ST_TO_ADDR
// end ;
24247: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24248: LD_EXP 54
24252: PUSH
24253: LD_EXP 61
24257: AND
24258: IFFALSE 24460
24260: GO 24262
24262: DISABLE
24263: LD_INT 0
24265: PPUSH
24266: PPUSH
24267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24268: LD_ADDR_VAR 0 3
24272: PUSH
24273: LD_INT 81
24275: PUSH
24276: LD_OWVAR 2
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 21
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PPUSH
24299: CALL_OW 69
24303: ST_TO_ADDR
// if not tmp then
24304: LD_VAR 0 3
24308: NOT
24309: IFFALSE 24313
// exit ;
24311: GO 24460
// if tmp > 5 then
24313: LD_VAR 0 3
24317: PUSH
24318: LD_INT 5
24320: GREATER
24321: IFFALSE 24333
// k := 5 else
24323: LD_ADDR_VAR 0 2
24327: PUSH
24328: LD_INT 5
24330: ST_TO_ADDR
24331: GO 24343
// k := tmp ;
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_VAR 0 3
24342: ST_TO_ADDR
// for i := 1 to k do
24343: LD_ADDR_VAR 0 1
24347: PUSH
24348: DOUBLE
24349: LD_INT 1
24351: DEC
24352: ST_TO_ADDR
24353: LD_VAR 0 2
24357: PUSH
24358: FOR_TO
24359: IFFALSE 24458
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24361: LD_VAR 0 3
24365: PUSH
24366: LD_VAR 0 1
24370: ARRAY
24371: PPUSH
24372: LD_VAR 0 1
24376: PUSH
24377: LD_INT 4
24379: MOD
24380: PUSH
24381: LD_INT 1
24383: PLUS
24384: PPUSH
24385: CALL_OW 259
24389: PUSH
24390: LD_INT 10
24392: LESS
24393: IFFALSE 24456
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24395: LD_VAR 0 3
24399: PUSH
24400: LD_VAR 0 1
24404: ARRAY
24405: PPUSH
24406: LD_VAR 0 1
24410: PUSH
24411: LD_INT 4
24413: MOD
24414: PUSH
24415: LD_INT 1
24417: PLUS
24418: PPUSH
24419: LD_VAR 0 3
24423: PUSH
24424: LD_VAR 0 1
24428: ARRAY
24429: PPUSH
24430: LD_VAR 0 1
24434: PUSH
24435: LD_INT 4
24437: MOD
24438: PUSH
24439: LD_INT 1
24441: PLUS
24442: PPUSH
24443: CALL_OW 259
24447: PUSH
24448: LD_INT 1
24450: PLUS
24451: PPUSH
24452: CALL_OW 237
24456: GO 24358
24458: POP
24459: POP
// end ;
24460: PPOPN 3
24462: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24463: LD_EXP 54
24467: PUSH
24468: LD_EXP 62
24472: AND
24473: IFFALSE 24493
24475: GO 24477
24477: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24478: LD_INT 4
24480: PPUSH
24481: LD_OWVAR 2
24485: PPUSH
24486: LD_INT 0
24488: PPUSH
24489: CALL_OW 324
24493: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24494: LD_EXP 54
24498: PUSH
24499: LD_EXP 91
24503: AND
24504: IFFALSE 24524
24506: GO 24508
24508: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24509: LD_INT 19
24511: PPUSH
24512: LD_OWVAR 2
24516: PPUSH
24517: LD_INT 0
24519: PPUSH
24520: CALL_OW 324
24524: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24525: LD_EXP 54
24529: PUSH
24530: LD_EXP 63
24534: AND
24535: IFFALSE 24637
24537: GO 24539
24539: DISABLE
24540: LD_INT 0
24542: PPUSH
24543: PPUSH
// begin enable ;
24544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24545: LD_ADDR_VAR 0 2
24549: PUSH
24550: LD_INT 22
24552: PUSH
24553: LD_OWVAR 2
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: LD_INT 34
24567: PUSH
24568: LD_INT 11
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 34
24577: PUSH
24578: LD_INT 30
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PPUSH
24594: CALL_OW 69
24598: ST_TO_ADDR
// if not tmp then
24599: LD_VAR 0 2
24603: NOT
24604: IFFALSE 24608
// exit ;
24606: GO 24637
// for i in tmp do
24608: LD_ADDR_VAR 0 1
24612: PUSH
24613: LD_VAR 0 2
24617: PUSH
24618: FOR_IN
24619: IFFALSE 24635
// begin SetLives ( i , 0 ) ;
24621: LD_VAR 0 1
24625: PPUSH
24626: LD_INT 0
24628: PPUSH
24629: CALL_OW 234
// end ;
24633: GO 24618
24635: POP
24636: POP
// end ;
24637: PPOPN 2
24639: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24640: LD_EXP 54
24644: PUSH
24645: LD_EXP 64
24649: AND
24650: IFFALSE 24670
24652: GO 24654
24654: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24655: LD_INT 32
24657: PPUSH
24658: LD_OWVAR 2
24662: PPUSH
24663: LD_INT 0
24665: PPUSH
24666: CALL_OW 324
24670: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24671: LD_EXP 54
24675: PUSH
24676: LD_EXP 65
24680: AND
24681: IFFALSE 24862
24683: GO 24685
24685: DISABLE
24686: LD_INT 0
24688: PPUSH
24689: PPUSH
24690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24691: LD_ADDR_VAR 0 2
24695: PUSH
24696: LD_INT 22
24698: PUSH
24699: LD_OWVAR 2
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 33
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PPUSH
24722: CALL_OW 69
24726: ST_TO_ADDR
// if not tmp then
24727: LD_VAR 0 2
24731: NOT
24732: IFFALSE 24736
// exit ;
24734: GO 24862
// side := 0 ;
24736: LD_ADDR_VAR 0 3
24740: PUSH
24741: LD_INT 0
24743: ST_TO_ADDR
// for i := 1 to 8 do
24744: LD_ADDR_VAR 0 1
24748: PUSH
24749: DOUBLE
24750: LD_INT 1
24752: DEC
24753: ST_TO_ADDR
24754: LD_INT 8
24756: PUSH
24757: FOR_TO
24758: IFFALSE 24806
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24760: LD_OWVAR 2
24764: PUSH
24765: LD_VAR 0 1
24769: NONEQUAL
24770: PUSH
24771: LD_OWVAR 2
24775: PPUSH
24776: LD_VAR 0 1
24780: PPUSH
24781: CALL_OW 81
24785: PUSH
24786: LD_INT 2
24788: EQUAL
24789: AND
24790: IFFALSE 24804
// begin side := i ;
24792: LD_ADDR_VAR 0 3
24796: PUSH
24797: LD_VAR 0 1
24801: ST_TO_ADDR
// break ;
24802: GO 24806
// end ;
24804: GO 24757
24806: POP
24807: POP
// if not side then
24808: LD_VAR 0 3
24812: NOT
24813: IFFALSE 24817
// exit ;
24815: GO 24862
// for i := 1 to tmp do
24817: LD_ADDR_VAR 0 1
24821: PUSH
24822: DOUBLE
24823: LD_INT 1
24825: DEC
24826: ST_TO_ADDR
24827: LD_VAR 0 2
24831: PUSH
24832: FOR_TO
24833: IFFALSE 24860
// if Prob ( 60 ) then
24835: LD_INT 60
24837: PPUSH
24838: CALL_OW 13
24842: IFFALSE 24858
// SetSide ( i , side ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_VAR 0 3
24853: PPUSH
24854: CALL_OW 235
24858: GO 24832
24860: POP
24861: POP
// end ;
24862: PPOPN 3
24864: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24865: LD_EXP 54
24869: PUSH
24870: LD_EXP 67
24874: AND
24875: IFFALSE 24994
24877: GO 24879
24879: DISABLE
24880: LD_INT 0
24882: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24883: LD_ADDR_VAR 0 1
24887: PUSH
24888: LD_INT 22
24890: PUSH
24891: LD_OWVAR 2
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 21
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: LD_INT 23
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: PPUSH
24932: CALL_OW 69
24936: PUSH
24937: FOR_IN
24938: IFFALSE 24992
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 257
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 3
24958: PUSH
24959: LD_INT 4
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: IN
24968: IFFALSE 24990
// SetClass ( un , rand ( 1 , 4 ) ) ;
24970: LD_VAR 0 1
24974: PPUSH
24975: LD_INT 1
24977: PPUSH
24978: LD_INT 4
24980: PPUSH
24981: CALL_OW 12
24985: PPUSH
24986: CALL_OW 336
24990: GO 24937
24992: POP
24993: POP
// end ;
24994: PPOPN 1
24996: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24997: LD_EXP 54
25001: PUSH
25002: LD_EXP 66
25006: AND
25007: IFFALSE 25086
25009: GO 25011
25011: DISABLE
25012: LD_INT 0
25014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25015: LD_ADDR_VAR 0 1
25019: PUSH
25020: LD_INT 22
25022: PUSH
25023: LD_OWVAR 2
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 21
25034: PUSH
25035: LD_INT 3
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PPUSH
25046: CALL_OW 69
25050: ST_TO_ADDR
// if not tmp then
25051: LD_VAR 0 1
25055: NOT
25056: IFFALSE 25060
// exit ;
25058: GO 25086
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25060: LD_VAR 0 1
25064: PUSH
25065: LD_INT 1
25067: PPUSH
25068: LD_VAR 0 1
25072: PPUSH
25073: CALL_OW 12
25077: ARRAY
25078: PPUSH
25079: LD_INT 100
25081: PPUSH
25082: CALL_OW 234
// end ;
25086: PPOPN 1
25088: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25089: LD_EXP 54
25093: PUSH
25094: LD_EXP 68
25098: AND
25099: IFFALSE 25197
25101: GO 25103
25103: DISABLE
25104: LD_INT 0
25106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25107: LD_ADDR_VAR 0 1
25111: PUSH
25112: LD_INT 22
25114: PUSH
25115: LD_OWVAR 2
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 21
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PPUSH
25138: CALL_OW 69
25142: ST_TO_ADDR
// if not tmp then
25143: LD_VAR 0 1
25147: NOT
25148: IFFALSE 25152
// exit ;
25150: GO 25197
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25152: LD_VAR 0 1
25156: PUSH
25157: LD_INT 1
25159: PPUSH
25160: LD_VAR 0 1
25164: PPUSH
25165: CALL_OW 12
25169: ARRAY
25170: PPUSH
25171: LD_INT 1
25173: PPUSH
25174: LD_INT 4
25176: PPUSH
25177: CALL_OW 12
25181: PPUSH
25182: LD_INT 3000
25184: PPUSH
25185: LD_INT 9000
25187: PPUSH
25188: CALL_OW 12
25192: PPUSH
25193: CALL_OW 492
// end ;
25197: PPOPN 1
25199: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25200: LD_EXP 54
25204: PUSH
25205: LD_EXP 69
25209: AND
25210: IFFALSE 25230
25212: GO 25214
25214: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25215: LD_INT 1
25217: PPUSH
25218: LD_OWVAR 2
25222: PPUSH
25223: LD_INT 0
25225: PPUSH
25226: CALL_OW 324
25230: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25231: LD_EXP 54
25235: PUSH
25236: LD_EXP 70
25240: AND
25241: IFFALSE 25324
25243: GO 25245
25245: DISABLE
25246: LD_INT 0
25248: PPUSH
25249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25250: LD_ADDR_VAR 0 2
25254: PUSH
25255: LD_INT 22
25257: PUSH
25258: LD_OWVAR 2
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PPUSH
25281: CALL_OW 69
25285: ST_TO_ADDR
// if not tmp then
25286: LD_VAR 0 2
25290: NOT
25291: IFFALSE 25295
// exit ;
25293: GO 25324
// for i in tmp do
25295: LD_ADDR_VAR 0 1
25299: PUSH
25300: LD_VAR 0 2
25304: PUSH
25305: FOR_IN
25306: IFFALSE 25322
// SetBLevel ( i , 10 ) ;
25308: LD_VAR 0 1
25312: PPUSH
25313: LD_INT 10
25315: PPUSH
25316: CALL_OW 241
25320: GO 25305
25322: POP
25323: POP
// end ;
25324: PPOPN 2
25326: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25327: LD_EXP 54
25331: PUSH
25332: LD_EXP 71
25336: AND
25337: IFFALSE 25448
25339: GO 25341
25341: DISABLE
25342: LD_INT 0
25344: PPUSH
25345: PPUSH
25346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25347: LD_ADDR_VAR 0 3
25351: PUSH
25352: LD_INT 22
25354: PUSH
25355: LD_OWVAR 2
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 25
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PPUSH
25378: CALL_OW 69
25382: ST_TO_ADDR
// if not tmp then
25383: LD_VAR 0 3
25387: NOT
25388: IFFALSE 25392
// exit ;
25390: GO 25448
// un := tmp [ rand ( 1 , tmp ) ] ;
25392: LD_ADDR_VAR 0 2
25396: PUSH
25397: LD_VAR 0 3
25401: PUSH
25402: LD_INT 1
25404: PPUSH
25405: LD_VAR 0 3
25409: PPUSH
25410: CALL_OW 12
25414: ARRAY
25415: ST_TO_ADDR
// if Crawls ( un ) then
25416: LD_VAR 0 2
25420: PPUSH
25421: CALL_OW 318
25425: IFFALSE 25436
// ComWalk ( un ) ;
25427: LD_VAR 0 2
25431: PPUSH
25432: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25436: LD_VAR 0 2
25440: PPUSH
25441: LD_INT 5
25443: PPUSH
25444: CALL_OW 336
// end ;
25448: PPOPN 3
25450: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25451: LD_EXP 54
25455: PUSH
25456: LD_EXP 72
25460: AND
25461: PUSH
25462: LD_OWVAR 67
25466: PUSH
25467: LD_INT 4
25469: LESS
25470: AND
25471: IFFALSE 25490
25473: GO 25475
25475: DISABLE
// begin Difficulty := Difficulty + 1 ;
25476: LD_ADDR_OWVAR 67
25480: PUSH
25481: LD_OWVAR 67
25485: PUSH
25486: LD_INT 1
25488: PLUS
25489: ST_TO_ADDR
// end ;
25490: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25491: LD_EXP 54
25495: PUSH
25496: LD_EXP 73
25500: AND
25501: IFFALSE 25604
25503: GO 25505
25505: DISABLE
25506: LD_INT 0
25508: PPUSH
// begin for i := 1 to 5 do
25509: LD_ADDR_VAR 0 1
25513: PUSH
25514: DOUBLE
25515: LD_INT 1
25517: DEC
25518: ST_TO_ADDR
25519: LD_INT 5
25521: PUSH
25522: FOR_TO
25523: IFFALSE 25602
// begin uc_nation := nation_nature ;
25525: LD_ADDR_OWVAR 21
25529: PUSH
25530: LD_INT 0
25532: ST_TO_ADDR
// uc_side := 0 ;
25533: LD_ADDR_OWVAR 20
25537: PUSH
25538: LD_INT 0
25540: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25541: LD_ADDR_OWVAR 29
25545: PUSH
25546: LD_INT 12
25548: PUSH
25549: LD_INT 12
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: ST_TO_ADDR
// hc_agressivity := 20 ;
25556: LD_ADDR_OWVAR 35
25560: PUSH
25561: LD_INT 20
25563: ST_TO_ADDR
// hc_class := class_tiger ;
25564: LD_ADDR_OWVAR 28
25568: PUSH
25569: LD_INT 14
25571: ST_TO_ADDR
// hc_gallery :=  ;
25572: LD_ADDR_OWVAR 33
25576: PUSH
25577: LD_STRING 
25579: ST_TO_ADDR
// hc_name :=  ;
25580: LD_ADDR_OWVAR 26
25584: PUSH
25585: LD_STRING 
25587: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25588: CALL_OW 44
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 51
// end ;
25600: GO 25522
25602: POP
25603: POP
// end ;
25604: PPOPN 1
25606: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25607: LD_EXP 54
25611: PUSH
25612: LD_EXP 74
25616: AND
25617: IFFALSE 25626
25619: GO 25621
25621: DISABLE
// StreamSibBomb ;
25622: CALL 25627 0 0
25626: END
// export function StreamSibBomb ; var i , x , y ; begin
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
// result := false ;
25633: LD_ADDR_VAR 0 1
25637: PUSH
25638: LD_INT 0
25640: ST_TO_ADDR
// for i := 1 to 16 do
25641: LD_ADDR_VAR 0 2
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_INT 16
25653: PUSH
25654: FOR_TO
25655: IFFALSE 25854
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25657: LD_ADDR_VAR 0 3
25661: PUSH
25662: LD_INT 10
25664: PUSH
25665: LD_INT 20
25667: PUSH
25668: LD_INT 30
25670: PUSH
25671: LD_INT 40
25673: PUSH
25674: LD_INT 50
25676: PUSH
25677: LD_INT 60
25679: PUSH
25680: LD_INT 70
25682: PUSH
25683: LD_INT 80
25685: PUSH
25686: LD_INT 90
25688: PUSH
25689: LD_INT 100
25691: PUSH
25692: LD_INT 110
25694: PUSH
25695: LD_INT 120
25697: PUSH
25698: LD_INT 130
25700: PUSH
25701: LD_INT 140
25703: PUSH
25704: LD_INT 150
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: PPUSH
25727: LD_INT 15
25729: PPUSH
25730: CALL_OW 12
25734: ARRAY
25735: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25736: LD_ADDR_VAR 0 4
25740: PUSH
25741: LD_INT 10
25743: PUSH
25744: LD_INT 20
25746: PUSH
25747: LD_INT 30
25749: PUSH
25750: LD_INT 40
25752: PUSH
25753: LD_INT 50
25755: PUSH
25756: LD_INT 60
25758: PUSH
25759: LD_INT 70
25761: PUSH
25762: LD_INT 80
25764: PUSH
25765: LD_INT 90
25767: PUSH
25768: LD_INT 100
25770: PUSH
25771: LD_INT 110
25773: PUSH
25774: LD_INT 120
25776: PUSH
25777: LD_INT 130
25779: PUSH
25780: LD_INT 140
25782: PUSH
25783: LD_INT 150
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: PPUSH
25806: LD_INT 15
25808: PPUSH
25809: CALL_OW 12
25813: ARRAY
25814: ST_TO_ADDR
// if ValidHex ( x , y ) then
25815: LD_VAR 0 3
25819: PPUSH
25820: LD_VAR 0 4
25824: PPUSH
25825: CALL_OW 488
25829: IFFALSE 25852
// begin result := [ x , y ] ;
25831: LD_ADDR_VAR 0 1
25835: PUSH
25836: LD_VAR 0 3
25840: PUSH
25841: LD_VAR 0 4
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: ST_TO_ADDR
// break ;
25850: GO 25854
// end ; end ;
25852: GO 25654
25854: POP
25855: POP
// if result then
25856: LD_VAR 0 1
25860: IFFALSE 25920
// begin ToLua ( playSibBomb() ) ;
25862: LD_STRING playSibBomb()
25864: PPUSH
25865: CALL_OW 559
// wait ( 0 0$14 ) ;
25869: LD_INT 490
25871: PPUSH
25872: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25876: LD_VAR 0 1
25880: PUSH
25881: LD_INT 1
25883: ARRAY
25884: PPUSH
25885: LD_VAR 0 1
25889: PUSH
25890: LD_INT 2
25892: ARRAY
25893: PPUSH
25894: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25898: LD_VAR 0 1
25902: PUSH
25903: LD_INT 1
25905: ARRAY
25906: PPUSH
25907: LD_VAR 0 1
25911: PUSH
25912: LD_INT 2
25914: ARRAY
25915: PPUSH
25916: CALL_OW 429
// end ; end ;
25920: LD_VAR 0 1
25924: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25925: LD_EXP 54
25929: PUSH
25930: LD_EXP 76
25934: AND
25935: IFFALSE 25947
25937: GO 25939
25939: DISABLE
// YouLost (  ) ;
25940: LD_STRING 
25942: PPUSH
25943: CALL_OW 104
25947: END
// every 0 0$1 trigger StreamModeActive and sFog do
25948: LD_EXP 54
25952: PUSH
25953: LD_EXP 75
25957: AND
25958: IFFALSE 25972
25960: GO 25962
25962: DISABLE
// FogOff ( your_side ) ;
25963: LD_OWVAR 2
25967: PPUSH
25968: CALL_OW 344
25972: END
// every 0 0$1 trigger StreamModeActive and sSun do
25973: LD_EXP 54
25977: PUSH
25978: LD_EXP 77
25982: AND
25983: IFFALSE 26011
25985: GO 25987
25987: DISABLE
// begin solar_recharge_percent := 0 ;
25988: LD_ADDR_OWVAR 79
25992: PUSH
25993: LD_INT 0
25995: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25996: LD_INT 10500
25998: PPUSH
25999: CALL_OW 67
// solar_recharge_percent := 100 ;
26003: LD_ADDR_OWVAR 79
26007: PUSH
26008: LD_INT 100
26010: ST_TO_ADDR
// end ;
26011: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26012: LD_EXP 54
26016: PUSH
26017: LD_EXP 78
26021: AND
26022: IFFALSE 26261
26024: GO 26026
26026: DISABLE
26027: LD_INT 0
26029: PPUSH
26030: PPUSH
26031: PPUSH
// begin tmp := [ ] ;
26032: LD_ADDR_VAR 0 3
26036: PUSH
26037: EMPTY
26038: ST_TO_ADDR
// for i := 1 to 6 do
26039: LD_ADDR_VAR 0 1
26043: PUSH
26044: DOUBLE
26045: LD_INT 1
26047: DEC
26048: ST_TO_ADDR
26049: LD_INT 6
26051: PUSH
26052: FOR_TO
26053: IFFALSE 26158
// begin uc_nation := nation_nature ;
26055: LD_ADDR_OWVAR 21
26059: PUSH
26060: LD_INT 0
26062: ST_TO_ADDR
// uc_side := 0 ;
26063: LD_ADDR_OWVAR 20
26067: PUSH
26068: LD_INT 0
26070: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26071: LD_ADDR_OWVAR 29
26075: PUSH
26076: LD_INT 12
26078: PUSH
26079: LD_INT 12
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: ST_TO_ADDR
// hc_agressivity := 20 ;
26086: LD_ADDR_OWVAR 35
26090: PUSH
26091: LD_INT 20
26093: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26094: LD_ADDR_OWVAR 28
26098: PUSH
26099: LD_INT 17
26101: ST_TO_ADDR
// hc_gallery :=  ;
26102: LD_ADDR_OWVAR 33
26106: PUSH
26107: LD_STRING 
26109: ST_TO_ADDR
// hc_name :=  ;
26110: LD_ADDR_OWVAR 26
26114: PUSH
26115: LD_STRING 
26117: ST_TO_ADDR
// un := CreateHuman ;
26118: LD_ADDR_VAR 0 2
26122: PUSH
26123: CALL_OW 44
26127: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26128: LD_VAR 0 2
26132: PPUSH
26133: LD_INT 1
26135: PPUSH
26136: CALL_OW 51
// tmp := tmp ^ un ;
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: LD_VAR 0 3
26149: PUSH
26150: LD_VAR 0 2
26154: ADD
26155: ST_TO_ADDR
// end ;
26156: GO 26052
26158: POP
26159: POP
// repeat wait ( 0 0$1 ) ;
26160: LD_INT 35
26162: PPUSH
26163: CALL_OW 67
// for un in tmp do
26167: LD_ADDR_VAR 0 2
26171: PUSH
26172: LD_VAR 0 3
26176: PUSH
26177: FOR_IN
26178: IFFALSE 26252
// begin if IsDead ( un ) then
26180: LD_VAR 0 2
26184: PPUSH
26185: CALL_OW 301
26189: IFFALSE 26209
// begin tmp := tmp diff un ;
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_VAR 0 2
26205: DIFF
26206: ST_TO_ADDR
// continue ;
26207: GO 26177
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26209: LD_VAR 0 2
26213: PPUSH
26214: LD_INT 3
26216: PUSH
26217: LD_INT 22
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PPUSH
26231: CALL_OW 69
26235: PPUSH
26236: LD_VAR 0 2
26240: PPUSH
26241: CALL_OW 74
26245: PPUSH
26246: CALL_OW 115
// end ;
26250: GO 26177
26252: POP
26253: POP
// until not tmp ;
26254: LD_VAR 0 3
26258: NOT
26259: IFFALSE 26160
// end ;
26261: PPOPN 3
26263: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26264: LD_EXP 54
26268: PUSH
26269: LD_EXP 79
26273: AND
26274: IFFALSE 26328
26276: GO 26278
26278: DISABLE
// begin ToLua ( displayTroll(); ) ;
26279: LD_STRING displayTroll();
26281: PPUSH
26282: CALL_OW 559
// wait ( 3 3$00 ) ;
26286: LD_INT 6300
26288: PPUSH
26289: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26293: LD_STRING hideTroll();
26295: PPUSH
26296: CALL_OW 559
// wait ( 1 1$00 ) ;
26300: LD_INT 2100
26302: PPUSH
26303: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26307: LD_STRING displayTroll();
26309: PPUSH
26310: CALL_OW 559
// wait ( 1 1$00 ) ;
26314: LD_INT 2100
26316: PPUSH
26317: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26321: LD_STRING hideTroll();
26323: PPUSH
26324: CALL_OW 559
// end ;
26328: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26329: LD_EXP 54
26333: PUSH
26334: LD_EXP 80
26338: AND
26339: IFFALSE 26402
26341: GO 26343
26343: DISABLE
26344: LD_INT 0
26346: PPUSH
// begin p := 0 ;
26347: LD_ADDR_VAR 0 1
26351: PUSH
26352: LD_INT 0
26354: ST_TO_ADDR
// repeat game_speed := 1 ;
26355: LD_ADDR_OWVAR 65
26359: PUSH
26360: LD_INT 1
26362: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26363: LD_INT 35
26365: PPUSH
26366: CALL_OW 67
// p := p + 1 ;
26370: LD_ADDR_VAR 0 1
26374: PUSH
26375: LD_VAR 0 1
26379: PUSH
26380: LD_INT 1
26382: PLUS
26383: ST_TO_ADDR
// until p >= 60 ;
26384: LD_VAR 0 1
26388: PUSH
26389: LD_INT 60
26391: GREATEREQUAL
26392: IFFALSE 26355
// game_speed := 4 ;
26394: LD_ADDR_OWVAR 65
26398: PUSH
26399: LD_INT 4
26401: ST_TO_ADDR
// end ;
26402: PPOPN 1
26404: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26405: LD_EXP 54
26409: PUSH
26410: LD_EXP 81
26414: AND
26415: IFFALSE 26561
26417: GO 26419
26419: DISABLE
26420: LD_INT 0
26422: PPUSH
26423: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26424: LD_ADDR_VAR 0 1
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_OWVAR 2
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 30
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 30
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 69
26477: ST_TO_ADDR
// if not depot then
26478: LD_VAR 0 1
26482: NOT
26483: IFFALSE 26487
// exit ;
26485: GO 26561
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26487: LD_ADDR_VAR 0 2
26491: PUSH
26492: LD_VAR 0 1
26496: PUSH
26497: LD_INT 1
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 12
26509: ARRAY
26510: PPUSH
26511: CALL_OW 274
26515: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26516: LD_VAR 0 2
26520: PPUSH
26521: LD_INT 1
26523: PPUSH
26524: LD_INT 0
26526: PPUSH
26527: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26531: LD_VAR 0 2
26535: PPUSH
26536: LD_INT 2
26538: PPUSH
26539: LD_INT 0
26541: PPUSH
26542: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26546: LD_VAR 0 2
26550: PPUSH
26551: LD_INT 3
26553: PPUSH
26554: LD_INT 0
26556: PPUSH
26557: CALL_OW 277
// end ;
26561: PPOPN 2
26563: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26564: LD_EXP 54
26568: PUSH
26569: LD_EXP 82
26573: AND
26574: IFFALSE 26671
26576: GO 26578
26578: DISABLE
26579: LD_INT 0
26581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26582: LD_ADDR_VAR 0 1
26586: PUSH
26587: LD_INT 22
26589: PUSH
26590: LD_OWVAR 2
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 21
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 3
26611: PUSH
26612: LD_INT 23
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: PPUSH
26631: CALL_OW 69
26635: ST_TO_ADDR
// if not tmp then
26636: LD_VAR 0 1
26640: NOT
26641: IFFALSE 26645
// exit ;
26643: GO 26671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26645: LD_VAR 0 1
26649: PUSH
26650: LD_INT 1
26652: PPUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 12
26662: ARRAY
26663: PPUSH
26664: LD_INT 200
26666: PPUSH
26667: CALL_OW 234
// end ;
26671: PPOPN 1
26673: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26674: LD_EXP 54
26678: PUSH
26679: LD_EXP 83
26683: AND
26684: IFFALSE 26763
26686: GO 26688
26688: DISABLE
26689: LD_INT 0
26691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26692: LD_ADDR_VAR 0 1
26696: PUSH
26697: LD_INT 22
26699: PUSH
26700: LD_OWVAR 2
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 21
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PPUSH
26723: CALL_OW 69
26727: ST_TO_ADDR
// if not tmp then
26728: LD_VAR 0 1
26732: NOT
26733: IFFALSE 26737
// exit ;
26735: GO 26763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26737: LD_VAR 0 1
26741: PUSH
26742: LD_INT 1
26744: PPUSH
26745: LD_VAR 0 1
26749: PPUSH
26750: CALL_OW 12
26754: ARRAY
26755: PPUSH
26756: LD_INT 60
26758: PPUSH
26759: CALL_OW 234
// end ;
26763: PPOPN 1
26765: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26766: LD_EXP 54
26770: PUSH
26771: LD_EXP 84
26775: AND
26776: IFFALSE 26875
26778: GO 26780
26780: DISABLE
26781: LD_INT 0
26783: PPUSH
26784: PPUSH
// begin enable ;
26785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26786: LD_ADDR_VAR 0 1
26790: PUSH
26791: LD_INT 22
26793: PUSH
26794: LD_OWVAR 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 61
26805: PUSH
26806: EMPTY
26807: LIST
26808: PUSH
26809: LD_INT 33
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: PPUSH
26824: CALL_OW 69
26828: ST_TO_ADDR
// if not tmp then
26829: LD_VAR 0 1
26833: NOT
26834: IFFALSE 26838
// exit ;
26836: GO 26875
// for i in tmp do
26838: LD_ADDR_VAR 0 2
26842: PUSH
26843: LD_VAR 0 1
26847: PUSH
26848: FOR_IN
26849: IFFALSE 26873
// if IsControledBy ( i ) then
26851: LD_VAR 0 2
26855: PPUSH
26856: CALL_OW 312
26860: IFFALSE 26871
// ComUnlink ( i ) ;
26862: LD_VAR 0 2
26866: PPUSH
26867: CALL_OW 136
26871: GO 26848
26873: POP
26874: POP
// end ;
26875: PPOPN 2
26877: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26878: LD_EXP 54
26882: PUSH
26883: LD_EXP 85
26887: AND
26888: IFFALSE 27028
26890: GO 26892
26892: DISABLE
26893: LD_INT 0
26895: PPUSH
26896: PPUSH
// begin ToLua ( displayPowell(); ) ;
26897: LD_STRING displayPowell();
26899: PPUSH
26900: CALL_OW 559
// uc_side := 0 ;
26904: LD_ADDR_OWVAR 20
26908: PUSH
26909: LD_INT 0
26911: ST_TO_ADDR
// uc_nation := 2 ;
26912: LD_ADDR_OWVAR 21
26916: PUSH
26917: LD_INT 2
26919: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26920: LD_ADDR_OWVAR 37
26924: PUSH
26925: LD_INT 14
26927: ST_TO_ADDR
// vc_engine := engine_siberite ;
26928: LD_ADDR_OWVAR 39
26932: PUSH
26933: LD_INT 3
26935: ST_TO_ADDR
// vc_control := control_apeman ;
26936: LD_ADDR_OWVAR 38
26940: PUSH
26941: LD_INT 5
26943: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26944: LD_ADDR_OWVAR 40
26948: PUSH
26949: LD_INT 29
26951: ST_TO_ADDR
// un := CreateVehicle ;
26952: LD_ADDR_VAR 0 2
26956: PUSH
26957: CALL_OW 45
26961: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26962: LD_VAR 0 2
26966: PPUSH
26967: LD_INT 1
26969: PPUSH
26970: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26974: LD_INT 35
26976: PPUSH
26977: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26981: LD_VAR 0 2
26985: PPUSH
26986: LD_INT 22
26988: PUSH
26989: LD_OWVAR 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PPUSH
26998: CALL_OW 69
27002: PPUSH
27003: LD_VAR 0 2
27007: PPUSH
27008: CALL_OW 74
27012: PPUSH
27013: CALL_OW 115
// until IsDead ( un ) ;
27017: LD_VAR 0 2
27021: PPUSH
27022: CALL_OW 301
27026: IFFALSE 26974
// end ;
27028: PPOPN 2
27030: END
// every 0 0$1 trigger StreamModeActive and sStu do
27031: LD_EXP 54
27035: PUSH
27036: LD_EXP 93
27040: AND
27041: IFFALSE 27057
27043: GO 27045
27045: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27046: LD_STRING displayStucuk();
27048: PPUSH
27049: CALL_OW 559
// ResetFog ;
27053: CALL_OW 335
// end ;
27057: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27058: LD_EXP 54
27062: PUSH
27063: LD_EXP 86
27067: AND
27068: IFFALSE 27209
27070: GO 27072
27072: DISABLE
27073: LD_INT 0
27075: PPUSH
27076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27077: LD_ADDR_VAR 0 2
27081: PUSH
27082: LD_INT 22
27084: PUSH
27085: LD_OWVAR 2
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 21
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PPUSH
27108: CALL_OW 69
27112: ST_TO_ADDR
// if not tmp then
27113: LD_VAR 0 2
27117: NOT
27118: IFFALSE 27122
// exit ;
27120: GO 27209
// un := tmp [ rand ( 1 , tmp ) ] ;
27122: LD_ADDR_VAR 0 1
27126: PUSH
27127: LD_VAR 0 2
27131: PUSH
27132: LD_INT 1
27134: PPUSH
27135: LD_VAR 0 2
27139: PPUSH
27140: CALL_OW 12
27144: ARRAY
27145: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_INT 0
27153: PPUSH
27154: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27158: LD_VAR 0 1
27162: PPUSH
27163: LD_OWVAR 3
27167: PUSH
27168: LD_VAR 0 1
27172: DIFF
27173: PPUSH
27174: LD_VAR 0 1
27178: PPUSH
27179: CALL_OW 74
27183: PPUSH
27184: CALL_OW 115
// wait ( 0 0$20 ) ;
27188: LD_INT 700
27190: PPUSH
27191: CALL_OW 67
// SetSide ( un , your_side ) ;
27195: LD_VAR 0 1
27199: PPUSH
27200: LD_OWVAR 2
27204: PPUSH
27205: CALL_OW 235
// end ;
27209: PPOPN 2
27211: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27212: LD_EXP 54
27216: PUSH
27217: LD_EXP 87
27221: AND
27222: IFFALSE 27328
27224: GO 27226
27226: DISABLE
27227: LD_INT 0
27229: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27230: LD_ADDR_VAR 0 1
27234: PUSH
27235: LD_INT 22
27237: PUSH
27238: LD_OWVAR 2
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 30
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 30
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PPUSH
27279: CALL_OW 69
27283: ST_TO_ADDR
// if not depot then
27284: LD_VAR 0 1
27288: NOT
27289: IFFALSE 27293
// exit ;
27291: GO 27328
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27293: LD_VAR 0 1
27297: PUSH
27298: LD_INT 1
27300: ARRAY
27301: PPUSH
27302: CALL_OW 250
27306: PPUSH
27307: LD_VAR 0 1
27311: PUSH
27312: LD_INT 1
27314: ARRAY
27315: PPUSH
27316: CALL_OW 251
27320: PPUSH
27321: LD_INT 70
27323: PPUSH
27324: CALL_OW 495
// end ;
27328: PPOPN 1
27330: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27331: LD_EXP 54
27335: PUSH
27336: LD_EXP 88
27340: AND
27341: IFFALSE 27552
27343: GO 27345
27345: DISABLE
27346: LD_INT 0
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27353: LD_ADDR_VAR 0 5
27357: PUSH
27358: LD_INT 22
27360: PUSH
27361: LD_OWVAR 2
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 21
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PPUSH
27384: CALL_OW 69
27388: ST_TO_ADDR
// if not tmp then
27389: LD_VAR 0 5
27393: NOT
27394: IFFALSE 27398
// exit ;
27396: GO 27552
// for i in tmp do
27398: LD_ADDR_VAR 0 1
27402: PUSH
27403: LD_VAR 0 5
27407: PUSH
27408: FOR_IN
27409: IFFALSE 27550
// begin d := rand ( 0 , 5 ) ;
27411: LD_ADDR_VAR 0 4
27415: PUSH
27416: LD_INT 0
27418: PPUSH
27419: LD_INT 5
27421: PPUSH
27422: CALL_OW 12
27426: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_VAR 0 1
27436: PPUSH
27437: CALL_OW 250
27441: PPUSH
27442: LD_VAR 0 4
27446: PPUSH
27447: LD_INT 3
27449: PPUSH
27450: LD_INT 12
27452: PPUSH
27453: CALL_OW 12
27457: PPUSH
27458: CALL_OW 272
27462: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27463: LD_ADDR_VAR 0 3
27467: PUSH
27468: LD_VAR 0 1
27472: PPUSH
27473: CALL_OW 251
27477: PPUSH
27478: LD_VAR 0 4
27482: PPUSH
27483: LD_INT 3
27485: PPUSH
27486: LD_INT 12
27488: PPUSH
27489: CALL_OW 12
27493: PPUSH
27494: CALL_OW 273
27498: ST_TO_ADDR
// if ValidHex ( x , y ) then
27499: LD_VAR 0 2
27503: PPUSH
27504: LD_VAR 0 3
27508: PPUSH
27509: CALL_OW 488
27513: IFFALSE 27548
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27515: LD_VAR 0 1
27519: PPUSH
27520: LD_VAR 0 2
27524: PPUSH
27525: LD_VAR 0 3
27529: PPUSH
27530: LD_INT 3
27532: PPUSH
27533: LD_INT 6
27535: PPUSH
27536: CALL_OW 12
27540: PPUSH
27541: LD_INT 1
27543: PPUSH
27544: CALL_OW 483
// end ;
27548: GO 27408
27550: POP
27551: POP
// end ;
27552: PPOPN 5
27554: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27555: LD_EXP 54
27559: PUSH
27560: LD_EXP 89
27564: AND
27565: IFFALSE 27659
27567: GO 27569
27569: DISABLE
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27574: LD_ADDR_VAR 0 2
27578: PUSH
27579: LD_INT 22
27581: PUSH
27582: LD_OWVAR 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 32
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 21
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: PPUSH
27616: CALL_OW 69
27620: ST_TO_ADDR
// if not tmp then
27621: LD_VAR 0 2
27625: NOT
27626: IFFALSE 27630
// exit ;
27628: GO 27659
// for i in tmp do
27630: LD_ADDR_VAR 0 1
27634: PUSH
27635: LD_VAR 0 2
27639: PUSH
27640: FOR_IN
27641: IFFALSE 27657
// SetFuel ( i , 0 ) ;
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_INT 0
27650: PPUSH
27651: CALL_OW 240
27655: GO 27640
27657: POP
27658: POP
// end ;
27659: PPOPN 2
27661: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27662: LD_EXP 54
27666: PUSH
27667: LD_EXP 90
27671: AND
27672: IFFALSE 27738
27674: GO 27676
27676: DISABLE
27677: LD_INT 0
27679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27680: LD_ADDR_VAR 0 1
27684: PUSH
27685: LD_INT 22
27687: PUSH
27688: LD_OWVAR 2
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 30
27699: PUSH
27700: LD_INT 29
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PPUSH
27711: CALL_OW 69
27715: ST_TO_ADDR
// if not tmp then
27716: LD_VAR 0 1
27720: NOT
27721: IFFALSE 27725
// exit ;
27723: GO 27738
// DestroyUnit ( tmp [ 1 ] ) ;
27725: LD_VAR 0 1
27729: PUSH
27730: LD_INT 1
27732: ARRAY
27733: PPUSH
27734: CALL_OW 65
// end ;
27738: PPOPN 1
27740: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27741: LD_EXP 54
27745: PUSH
27746: LD_EXP 92
27750: AND
27751: IFFALSE 27880
27753: GO 27755
27755: DISABLE
27756: LD_INT 0
27758: PPUSH
// begin uc_side := 0 ;
27759: LD_ADDR_OWVAR 20
27763: PUSH
27764: LD_INT 0
27766: ST_TO_ADDR
// uc_nation := nation_arabian ;
27767: LD_ADDR_OWVAR 21
27771: PUSH
27772: LD_INT 2
27774: ST_TO_ADDR
// hc_gallery :=  ;
27775: LD_ADDR_OWVAR 33
27779: PUSH
27780: LD_STRING 
27782: ST_TO_ADDR
// hc_name :=  ;
27783: LD_ADDR_OWVAR 26
27787: PUSH
27788: LD_STRING 
27790: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27791: LD_INT 1
27793: PPUSH
27794: LD_INT 11
27796: PPUSH
27797: LD_INT 10
27799: PPUSH
27800: CALL_OW 380
// un := CreateHuman ;
27804: LD_ADDR_VAR 0 1
27808: PUSH
27809: CALL_OW 44
27813: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27814: LD_VAR 0 1
27818: PPUSH
27819: LD_INT 1
27821: PPUSH
27822: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27826: LD_INT 35
27828: PPUSH
27829: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_INT 22
27840: PUSH
27841: LD_OWVAR 2
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PPUSH
27850: CALL_OW 69
27854: PPUSH
27855: LD_VAR 0 1
27859: PPUSH
27860: CALL_OW 74
27864: PPUSH
27865: CALL_OW 115
// until IsDead ( un ) ;
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 301
27878: IFFALSE 27826
// end ;
27880: PPOPN 1
27882: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27883: LD_EXP 54
27887: PUSH
27888: LD_EXP 94
27892: AND
27893: IFFALSE 27905
27895: GO 27897
27897: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27898: LD_STRING earthquake(getX(game), 0, 32)
27900: PPUSH
27901: CALL_OW 559
27905: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27906: LD_EXP 54
27910: PUSH
27911: LD_EXP 95
27915: AND
27916: IFFALSE 28007
27918: GO 27920
27920: DISABLE
27921: LD_INT 0
27923: PPUSH
// begin enable ;
27924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27925: LD_ADDR_VAR 0 1
27929: PUSH
27930: LD_INT 22
27932: PUSH
27933: LD_OWVAR 2
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 21
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 33
27954: PUSH
27955: LD_INT 3
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: PPUSH
27967: CALL_OW 69
27971: ST_TO_ADDR
// if not tmp then
27972: LD_VAR 0 1
27976: NOT
27977: IFFALSE 27981
// exit ;
27979: GO 28007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27981: LD_VAR 0 1
27985: PUSH
27986: LD_INT 1
27988: PPUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 12
27998: ARRAY
27999: PPUSH
28000: LD_INT 1
28002: PPUSH
28003: CALL_OW 234
// end ;
28007: PPOPN 1
28009: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28010: LD_EXP 54
28014: PUSH
28015: LD_EXP 96
28019: AND
28020: IFFALSE 28161
28022: GO 28024
28024: DISABLE
28025: LD_INT 0
28027: PPUSH
28028: PPUSH
28029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28030: LD_ADDR_VAR 0 3
28034: PUSH
28035: LD_INT 22
28037: PUSH
28038: LD_OWVAR 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 25
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PPUSH
28061: CALL_OW 69
28065: ST_TO_ADDR
// if not tmp then
28066: LD_VAR 0 3
28070: NOT
28071: IFFALSE 28075
// exit ;
28073: GO 28161
// un := tmp [ rand ( 1 , tmp ) ] ;
28075: LD_ADDR_VAR 0 2
28079: PUSH
28080: LD_VAR 0 3
28084: PUSH
28085: LD_INT 1
28087: PPUSH
28088: LD_VAR 0 3
28092: PPUSH
28093: CALL_OW 12
28097: ARRAY
28098: ST_TO_ADDR
// if Crawls ( un ) then
28099: LD_VAR 0 2
28103: PPUSH
28104: CALL_OW 318
28108: IFFALSE 28119
// ComWalk ( un ) ;
28110: LD_VAR 0 2
28114: PPUSH
28115: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28119: LD_VAR 0 2
28123: PPUSH
28124: LD_INT 9
28126: PPUSH
28127: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28131: LD_INT 28
28133: PPUSH
28134: LD_OWVAR 2
28138: PPUSH
28139: LD_INT 2
28141: PPUSH
28142: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28146: LD_INT 29
28148: PPUSH
28149: LD_OWVAR 2
28153: PPUSH
28154: LD_INT 2
28156: PPUSH
28157: CALL_OW 322
// end ;
28161: PPOPN 3
28163: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28164: LD_EXP 54
28168: PUSH
28169: LD_EXP 97
28173: AND
28174: IFFALSE 28285
28176: GO 28178
28178: DISABLE
28179: LD_INT 0
28181: PPUSH
28182: PPUSH
28183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28184: LD_ADDR_VAR 0 3
28188: PUSH
28189: LD_INT 22
28191: PUSH
28192: LD_OWVAR 2
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 25
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PPUSH
28215: CALL_OW 69
28219: ST_TO_ADDR
// if not tmp then
28220: LD_VAR 0 3
28224: NOT
28225: IFFALSE 28229
// exit ;
28227: GO 28285
// un := tmp [ rand ( 1 , tmp ) ] ;
28229: LD_ADDR_VAR 0 2
28233: PUSH
28234: LD_VAR 0 3
28238: PUSH
28239: LD_INT 1
28241: PPUSH
28242: LD_VAR 0 3
28246: PPUSH
28247: CALL_OW 12
28251: ARRAY
28252: ST_TO_ADDR
// if Crawls ( un ) then
28253: LD_VAR 0 2
28257: PPUSH
28258: CALL_OW 318
28262: IFFALSE 28273
// ComWalk ( un ) ;
28264: LD_VAR 0 2
28268: PPUSH
28269: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28273: LD_VAR 0 2
28277: PPUSH
28278: LD_INT 8
28280: PPUSH
28281: CALL_OW 336
// end ;
28285: PPOPN 3
28287: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28288: LD_EXP 54
28292: PUSH
28293: LD_EXP 98
28297: AND
28298: IFFALSE 28442
28300: GO 28302
28302: DISABLE
28303: LD_INT 0
28305: PPUSH
28306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28307: LD_ADDR_VAR 0 2
28311: PUSH
28312: LD_INT 22
28314: PUSH
28315: LD_OWVAR 2
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 21
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: LD_INT 34
28339: PUSH
28340: LD_INT 12
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 34
28349: PUSH
28350: LD_INT 51
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 34
28359: PUSH
28360: LD_INT 32
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: PPUSH
28378: CALL_OW 69
28382: ST_TO_ADDR
// if not tmp then
28383: LD_VAR 0 2
28387: NOT
28388: IFFALSE 28392
// exit ;
28390: GO 28442
// for i in tmp do
28392: LD_ADDR_VAR 0 1
28396: PUSH
28397: LD_VAR 0 2
28401: PUSH
28402: FOR_IN
28403: IFFALSE 28440
// if GetCargo ( i , mat_artifact ) = 0 then
28405: LD_VAR 0 1
28409: PPUSH
28410: LD_INT 4
28412: PPUSH
28413: CALL_OW 289
28417: PUSH
28418: LD_INT 0
28420: EQUAL
28421: IFFALSE 28438
// SetCargo ( i , mat_siberit , 100 ) ;
28423: LD_VAR 0 1
28427: PPUSH
28428: LD_INT 3
28430: PPUSH
28431: LD_INT 100
28433: PPUSH
28434: CALL_OW 290
28438: GO 28402
28440: POP
28441: POP
// end ;
28442: PPOPN 2
28444: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28445: LD_EXP 54
28449: PUSH
28450: LD_EXP 99
28454: AND
28455: IFFALSE 28638
28457: GO 28459
28459: DISABLE
28460: LD_INT 0
28462: PPUSH
28463: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28464: LD_ADDR_VAR 0 2
28468: PUSH
28469: LD_INT 22
28471: PUSH
28472: LD_OWVAR 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PPUSH
28481: CALL_OW 69
28485: ST_TO_ADDR
// if not tmp then
28486: LD_VAR 0 2
28490: NOT
28491: IFFALSE 28495
// exit ;
28493: GO 28638
// for i := 1 to 2 do
28495: LD_ADDR_VAR 0 1
28499: PUSH
28500: DOUBLE
28501: LD_INT 1
28503: DEC
28504: ST_TO_ADDR
28505: LD_INT 2
28507: PUSH
28508: FOR_TO
28509: IFFALSE 28636
// begin uc_side := your_side ;
28511: LD_ADDR_OWVAR 20
28515: PUSH
28516: LD_OWVAR 2
28520: ST_TO_ADDR
// uc_nation := nation_american ;
28521: LD_ADDR_OWVAR 21
28525: PUSH
28526: LD_INT 1
28528: ST_TO_ADDR
// vc_chassis := us_morphling ;
28529: LD_ADDR_OWVAR 37
28533: PUSH
28534: LD_INT 5
28536: ST_TO_ADDR
// vc_engine := engine_siberite ;
28537: LD_ADDR_OWVAR 39
28541: PUSH
28542: LD_INT 3
28544: ST_TO_ADDR
// vc_control := control_computer ;
28545: LD_ADDR_OWVAR 38
28549: PUSH
28550: LD_INT 3
28552: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28553: LD_ADDR_OWVAR 40
28557: PUSH
28558: LD_INT 10
28560: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28561: LD_VAR 0 2
28565: PUSH
28566: LD_INT 1
28568: ARRAY
28569: PPUSH
28570: CALL_OW 310
28574: NOT
28575: IFFALSE 28622
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28577: CALL_OW 45
28581: PPUSH
28582: LD_VAR 0 2
28586: PUSH
28587: LD_INT 1
28589: ARRAY
28590: PPUSH
28591: CALL_OW 250
28595: PPUSH
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: ARRAY
28604: PPUSH
28605: CALL_OW 251
28609: PPUSH
28610: LD_INT 12
28612: PPUSH
28613: LD_INT 1
28615: PPUSH
28616: CALL_OW 50
28620: GO 28634
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28622: CALL_OW 45
28626: PPUSH
28627: LD_INT 1
28629: PPUSH
28630: CALL_OW 51
// end ;
28634: GO 28508
28636: POP
28637: POP
// end ;
28638: PPOPN 2
28640: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28641: LD_EXP 54
28645: PUSH
28646: LD_EXP 100
28650: AND
28651: IFFALSE 28873
28653: GO 28655
28655: DISABLE
28656: LD_INT 0
28658: PPUSH
28659: PPUSH
28660: PPUSH
28661: PPUSH
28662: PPUSH
28663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28664: LD_ADDR_VAR 0 6
28668: PUSH
28669: LD_INT 22
28671: PUSH
28672: LD_OWVAR 2
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 21
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 3
28693: PUSH
28694: LD_INT 23
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 69
28717: ST_TO_ADDR
// if not tmp then
28718: LD_VAR 0 6
28722: NOT
28723: IFFALSE 28727
// exit ;
28725: GO 28873
// s1 := rand ( 1 , 4 ) ;
28727: LD_ADDR_VAR 0 2
28731: PUSH
28732: LD_INT 1
28734: PPUSH
28735: LD_INT 4
28737: PPUSH
28738: CALL_OW 12
28742: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28743: LD_ADDR_VAR 0 4
28747: PUSH
28748: LD_VAR 0 6
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: PPUSH
28757: LD_VAR 0 2
28761: PPUSH
28762: CALL_OW 259
28766: ST_TO_ADDR
// if s1 = 1 then
28767: LD_VAR 0 2
28771: PUSH
28772: LD_INT 1
28774: EQUAL
28775: IFFALSE 28795
// s2 := rand ( 2 , 4 ) else
28777: LD_ADDR_VAR 0 3
28781: PUSH
28782: LD_INT 2
28784: PPUSH
28785: LD_INT 4
28787: PPUSH
28788: CALL_OW 12
28792: ST_TO_ADDR
28793: GO 28803
// s2 := 1 ;
28795: LD_ADDR_VAR 0 3
28799: PUSH
28800: LD_INT 1
28802: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28803: LD_ADDR_VAR 0 5
28807: PUSH
28808: LD_VAR 0 6
28812: PUSH
28813: LD_INT 1
28815: ARRAY
28816: PPUSH
28817: LD_VAR 0 3
28821: PPUSH
28822: CALL_OW 259
28826: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28827: LD_VAR 0 6
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: PPUSH
28836: LD_VAR 0 2
28840: PPUSH
28841: LD_VAR 0 5
28845: PPUSH
28846: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28850: LD_VAR 0 6
28854: PUSH
28855: LD_INT 1
28857: ARRAY
28858: PPUSH
28859: LD_VAR 0 3
28863: PPUSH
28864: LD_VAR 0 4
28868: PPUSH
28869: CALL_OW 237
// end ;
28873: PPOPN 6
28875: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28876: LD_EXP 54
28880: PUSH
28881: LD_EXP 101
28885: AND
28886: IFFALSE 28965
28888: GO 28890
28890: DISABLE
28891: LD_INT 0
28893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28894: LD_ADDR_VAR 0 1
28898: PUSH
28899: LD_INT 22
28901: PUSH
28902: LD_OWVAR 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 30
28913: PUSH
28914: LD_INT 3
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PPUSH
28925: CALL_OW 69
28929: ST_TO_ADDR
// if not tmp then
28930: LD_VAR 0 1
28934: NOT
28935: IFFALSE 28939
// exit ;
28937: GO 28965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28939: LD_VAR 0 1
28943: PUSH
28944: LD_INT 1
28946: PPUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: CALL_OW 12
28956: ARRAY
28957: PPUSH
28958: LD_INT 1
28960: PPUSH
28961: CALL_OW 234
// end ;
28965: PPOPN 1
28967: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28968: LD_EXP 54
28972: PUSH
28973: LD_EXP 102
28977: AND
28978: IFFALSE 29090
28980: GO 28982
28982: DISABLE
28983: LD_INT 0
28985: PPUSH
28986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28987: LD_ADDR_VAR 0 2
28991: PUSH
28992: LD_INT 22
28994: PUSH
28995: LD_OWVAR 2
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: LD_INT 30
29009: PUSH
29010: LD_INT 27
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 30
29019: PUSH
29020: LD_INT 26
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 30
29029: PUSH
29030: LD_INT 28
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: ST_TO_ADDR
// if not tmp then
29052: LD_VAR 0 2
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29090
// for i in tmp do
29061: LD_ADDR_VAR 0 1
29065: PUSH
29066: LD_VAR 0 2
29070: PUSH
29071: FOR_IN
29072: IFFALSE 29088
// SetLives ( i , 1 ) ;
29074: LD_VAR 0 1
29078: PPUSH
29079: LD_INT 1
29081: PPUSH
29082: CALL_OW 234
29086: GO 29071
29088: POP
29089: POP
// end ;
29090: PPOPN 2
29092: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29093: LD_EXP 54
29097: PUSH
29098: LD_EXP 103
29102: AND
29103: IFFALSE 29390
29105: GO 29107
29107: DISABLE
29108: LD_INT 0
29110: PPUSH
29111: PPUSH
29112: PPUSH
// begin i := rand ( 1 , 7 ) ;
29113: LD_ADDR_VAR 0 1
29117: PUSH
29118: LD_INT 1
29120: PPUSH
29121: LD_INT 7
29123: PPUSH
29124: CALL_OW 12
29128: ST_TO_ADDR
// case i of 1 :
29129: LD_VAR 0 1
29133: PUSH
29134: LD_INT 1
29136: DOUBLE
29137: EQUAL
29138: IFTRUE 29142
29140: GO 29152
29142: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29143: LD_STRING earthquake(getX(game), 0, 32)
29145: PPUSH
29146: CALL_OW 559
29150: GO 29390
29152: LD_INT 2
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29174
29160: POP
// begin ToLua ( displayStucuk(); ) ;
29161: LD_STRING displayStucuk();
29163: PPUSH
29164: CALL_OW 559
// ResetFog ;
29168: CALL_OW 335
// end ; 3 :
29172: GO 29390
29174: LD_INT 3
29176: DOUBLE
29177: EQUAL
29178: IFTRUE 29182
29180: GO 29286
29182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29183: LD_ADDR_VAR 0 2
29187: PUSH
29188: LD_INT 22
29190: PUSH
29191: LD_OWVAR 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 25
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 69
29218: ST_TO_ADDR
// if not tmp then
29219: LD_VAR 0 2
29223: NOT
29224: IFFALSE 29228
// exit ;
29226: GO 29390
// un := tmp [ rand ( 1 , tmp ) ] ;
29228: LD_ADDR_VAR 0 3
29232: PUSH
29233: LD_VAR 0 2
29237: PUSH
29238: LD_INT 1
29240: PPUSH
29241: LD_VAR 0 2
29245: PPUSH
29246: CALL_OW 12
29250: ARRAY
29251: ST_TO_ADDR
// if Crawls ( un ) then
29252: LD_VAR 0 3
29256: PPUSH
29257: CALL_OW 318
29261: IFFALSE 29272
// ComWalk ( un ) ;
29263: LD_VAR 0 3
29267: PPUSH
29268: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29272: LD_VAR 0 3
29276: PPUSH
29277: LD_INT 8
29279: PPUSH
29280: CALL_OW 336
// end ; 4 :
29284: GO 29390
29286: LD_INT 4
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29368
29294: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29295: LD_ADDR_VAR 0 2
29299: PUSH
29300: LD_INT 22
29302: PUSH
29303: LD_OWVAR 2
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 30
29314: PUSH
29315: LD_INT 29
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PPUSH
29326: CALL_OW 69
29330: ST_TO_ADDR
// if not tmp then
29331: LD_VAR 0 2
29335: NOT
29336: IFFALSE 29340
// exit ;
29338: GO 29390
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29340: LD_VAR 0 2
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: PPUSH
29349: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29353: LD_VAR 0 2
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: PPUSH
29362: CALL_OW 65
// end ; 5 .. 7 :
29366: GO 29390
29368: LD_INT 5
29370: DOUBLE
29371: GREATEREQUAL
29372: IFFALSE 29380
29374: LD_INT 7
29376: DOUBLE
29377: LESSEQUAL
29378: IFTRUE 29382
29380: GO 29389
29382: POP
// StreamSibBomb ; end ;
29383: CALL 25627 0 0
29387: GO 29390
29389: POP
// end ;
29390: PPOPN 3
29392: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29393: LD_EXP 54
29397: PUSH
29398: LD_EXP 104
29402: AND
29403: IFFALSE 29559
29405: GO 29407
29407: DISABLE
29408: LD_INT 0
29410: PPUSH
29411: PPUSH
29412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29413: LD_ADDR_VAR 0 2
29417: PUSH
29418: LD_INT 81
29420: PUSH
29421: LD_OWVAR 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 21
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 21
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: LIST
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PPUSH
29462: CALL_OW 69
29466: ST_TO_ADDR
// if not tmp then
29467: LD_VAR 0 2
29471: NOT
29472: IFFALSE 29476
// exit ;
29474: GO 29559
// p := 0 ;
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: LD_INT 0
29483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29484: LD_INT 35
29486: PPUSH
29487: CALL_OW 67
// p := p + 1 ;
29491: LD_ADDR_VAR 0 3
29495: PUSH
29496: LD_VAR 0 3
29500: PUSH
29501: LD_INT 1
29503: PLUS
29504: ST_TO_ADDR
// for i in tmp do
29505: LD_ADDR_VAR 0 1
29509: PUSH
29510: LD_VAR 0 2
29514: PUSH
29515: FOR_IN
29516: IFFALSE 29547
// if GetLives ( i ) < 1000 then
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 256
29527: PUSH
29528: LD_INT 1000
29530: LESS
29531: IFFALSE 29545
// SetLives ( i , 1000 ) ;
29533: LD_VAR 0 1
29537: PPUSH
29538: LD_INT 1000
29540: PPUSH
29541: CALL_OW 234
29545: GO 29515
29547: POP
29548: POP
// until p > 20 ;
29549: LD_VAR 0 3
29553: PUSH
29554: LD_INT 20
29556: GREATER
29557: IFFALSE 29484
// end ;
29559: PPOPN 3
29561: END
// every 0 0$1 trigger StreamModeActive and sTime do
29562: LD_EXP 54
29566: PUSH
29567: LD_EXP 105
29571: AND
29572: IFFALSE 29607
29574: GO 29576
29576: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29577: LD_INT 28
29579: PPUSH
29580: LD_OWVAR 2
29584: PPUSH
29585: LD_INT 2
29587: PPUSH
29588: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29592: LD_INT 30
29594: PPUSH
29595: LD_OWVAR 2
29599: PPUSH
29600: LD_INT 2
29602: PPUSH
29603: CALL_OW 322
// end ;
29607: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29608: LD_EXP 54
29612: PUSH
29613: LD_EXP 106
29617: AND
29618: IFFALSE 29739
29620: GO 29622
29622: DISABLE
29623: LD_INT 0
29625: PPUSH
29626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29627: LD_ADDR_VAR 0 2
29631: PUSH
29632: LD_INT 22
29634: PUSH
29635: LD_OWVAR 2
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 21
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: LD_INT 23
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: PPUSH
29676: CALL_OW 69
29680: ST_TO_ADDR
// if not tmp then
29681: LD_VAR 0 2
29685: NOT
29686: IFFALSE 29690
// exit ;
29688: GO 29739
// for i in tmp do
29690: LD_ADDR_VAR 0 1
29694: PUSH
29695: LD_VAR 0 2
29699: PUSH
29700: FOR_IN
29701: IFFALSE 29737
// begin if Crawls ( i ) then
29703: LD_VAR 0 1
29707: PPUSH
29708: CALL_OW 318
29712: IFFALSE 29723
// ComWalk ( i ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL_OW 138
// SetClass ( i , 2 ) ;
29723: LD_VAR 0 1
29727: PPUSH
29728: LD_INT 2
29730: PPUSH
29731: CALL_OW 336
// end ;
29735: GO 29700
29737: POP
29738: POP
// end ;
29739: PPOPN 2
29741: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29742: LD_EXP 54
29746: PUSH
29747: LD_EXP 107
29751: AND
29752: IFFALSE 30040
29754: GO 29756
29756: DISABLE
29757: LD_INT 0
29759: PPUSH
29760: PPUSH
29761: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29762: LD_OWVAR 2
29766: PPUSH
29767: LD_INT 9
29769: PPUSH
29770: LD_INT 1
29772: PPUSH
29773: LD_INT 1
29775: PPUSH
29776: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29780: LD_INT 9
29782: PPUSH
29783: LD_OWVAR 2
29787: PPUSH
29788: CALL_OW 343
// uc_side := 9 ;
29792: LD_ADDR_OWVAR 20
29796: PUSH
29797: LD_INT 9
29799: ST_TO_ADDR
// uc_nation := 2 ;
29800: LD_ADDR_OWVAR 21
29804: PUSH
29805: LD_INT 2
29807: ST_TO_ADDR
// hc_name := Dark Warrior ;
29808: LD_ADDR_OWVAR 26
29812: PUSH
29813: LD_STRING Dark Warrior
29815: ST_TO_ADDR
// hc_gallery :=  ;
29816: LD_ADDR_OWVAR 33
29820: PUSH
29821: LD_STRING 
29823: ST_TO_ADDR
// hc_noskilllimit := true ;
29824: LD_ADDR_OWVAR 76
29828: PUSH
29829: LD_INT 1
29831: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29832: LD_ADDR_OWVAR 31
29836: PUSH
29837: LD_INT 30
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: LD_INT 30
29845: PUSH
29846: LD_INT 30
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
// un := CreateHuman ;
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: CALL_OW 44
29864: ST_TO_ADDR
// hc_noskilllimit := false ;
29865: LD_ADDR_OWVAR 76
29869: PUSH
29870: LD_INT 0
29872: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29873: LD_VAR 0 3
29877: PPUSH
29878: LD_INT 1
29880: PPUSH
29881: CALL_OW 51
// ToLua ( playRanger() ) ;
29885: LD_STRING playRanger()
29887: PPUSH
29888: CALL_OW 559
// p := 0 ;
29892: LD_ADDR_VAR 0 2
29896: PUSH
29897: LD_INT 0
29899: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29900: LD_INT 35
29902: PPUSH
29903: CALL_OW 67
// p := p + 1 ;
29907: LD_ADDR_VAR 0 2
29911: PUSH
29912: LD_VAR 0 2
29916: PUSH
29917: LD_INT 1
29919: PLUS
29920: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29921: LD_VAR 0 3
29925: PPUSH
29926: CALL_OW 256
29930: PUSH
29931: LD_INT 1000
29933: LESS
29934: IFFALSE 29948
// SetLives ( un , 1000 ) ;
29936: LD_VAR 0 3
29940: PPUSH
29941: LD_INT 1000
29943: PPUSH
29944: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29948: LD_VAR 0 3
29952: PPUSH
29953: LD_INT 81
29955: PUSH
29956: LD_OWVAR 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 91
29967: PUSH
29968: LD_VAR 0 3
29972: PUSH
29973: LD_INT 30
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PPUSH
29985: CALL_OW 69
29989: PPUSH
29990: LD_VAR 0 3
29994: PPUSH
29995: CALL_OW 74
29999: PPUSH
30000: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30004: LD_VAR 0 2
30008: PUSH
30009: LD_INT 80
30011: GREATER
30012: PUSH
30013: LD_VAR 0 3
30017: PPUSH
30018: CALL_OW 301
30022: OR
30023: IFFALSE 29900
// if un then
30025: LD_VAR 0 3
30029: IFFALSE 30040
// RemoveUnit ( un ) ;
30031: LD_VAR 0 3
30035: PPUSH
30036: CALL_OW 64
// end ;
30040: PPOPN 3
30042: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30043: LD_EXP 108
30047: IFFALSE 30163
30049: GO 30051
30051: DISABLE
30052: LD_INT 0
30054: PPUSH
30055: PPUSH
30056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30057: LD_ADDR_VAR 0 2
30061: PUSH
30062: LD_INT 81
30064: PUSH
30065: LD_OWVAR 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 21
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 69
30092: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30093: LD_STRING playComputer()
30095: PPUSH
30096: CALL_OW 559
// if not tmp then
30100: LD_VAR 0 2
30104: NOT
30105: IFFALSE 30109
// exit ;
30107: GO 30163
// for i in tmp do
30109: LD_ADDR_VAR 0 1
30113: PUSH
30114: LD_VAR 0 2
30118: PUSH
30119: FOR_IN
30120: IFFALSE 30161
// for j := 1 to 4 do
30122: LD_ADDR_VAR 0 3
30126: PUSH
30127: DOUBLE
30128: LD_INT 1
30130: DEC
30131: ST_TO_ADDR
30132: LD_INT 4
30134: PUSH
30135: FOR_TO
30136: IFFALSE 30157
// SetSkill ( i , j , 10 ) ;
30138: LD_VAR 0 1
30142: PPUSH
30143: LD_VAR 0 3
30147: PPUSH
30148: LD_INT 10
30150: PPUSH
30151: CALL_OW 237
30155: GO 30135
30157: POP
30158: POP
30159: GO 30119
30161: POP
30162: POP
// end ;
30163: PPOPN 3
30165: END
// every 0 0$1 trigger s30 do var i , tmp ;
30166: LD_EXP 109
30170: IFFALSE 30239
30172: GO 30174
30174: DISABLE
30175: LD_INT 0
30177: PPUSH
30178: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30179: LD_ADDR_VAR 0 2
30183: PUSH
30184: LD_INT 22
30186: PUSH
30187: LD_OWVAR 2
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PPUSH
30196: CALL_OW 69
30200: ST_TO_ADDR
// if not tmp then
30201: LD_VAR 0 2
30205: NOT
30206: IFFALSE 30210
// exit ;
30208: GO 30239
// for i in tmp do
30210: LD_ADDR_VAR 0 1
30214: PUSH
30215: LD_VAR 0 2
30219: PUSH
30220: FOR_IN
30221: IFFALSE 30237
// SetLives ( i , 300 ) ;
30223: LD_VAR 0 1
30227: PPUSH
30228: LD_INT 300
30230: PPUSH
30231: CALL_OW 234
30235: GO 30220
30237: POP
30238: POP
// end ;
30239: PPOPN 2
30241: END
// every 0 0$1 trigger s60 do var i , tmp ;
30242: LD_EXP 110
30246: IFFALSE 30315
30248: GO 30250
30250: DISABLE
30251: LD_INT 0
30253: PPUSH
30254: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30255: LD_ADDR_VAR 0 2
30259: PUSH
30260: LD_INT 22
30262: PUSH
30263: LD_OWVAR 2
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PPUSH
30272: CALL_OW 69
30276: ST_TO_ADDR
// if not tmp then
30277: LD_VAR 0 2
30281: NOT
30282: IFFALSE 30286
// exit ;
30284: GO 30315
// for i in tmp do
30286: LD_ADDR_VAR 0 1
30290: PUSH
30291: LD_VAR 0 2
30295: PUSH
30296: FOR_IN
30297: IFFALSE 30313
// SetLives ( i , 600 ) ;
30299: LD_VAR 0 1
30303: PPUSH
30304: LD_INT 600
30306: PPUSH
30307: CALL_OW 234
30311: GO 30296
30313: POP
30314: POP
// end ;
30315: PPOPN 2
30317: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30318: LD_INT 0
30320: PPUSH
// case cmd of 301 :
30321: LD_VAR 0 1
30325: PUSH
30326: LD_INT 301
30328: DOUBLE
30329: EQUAL
30330: IFTRUE 30334
30332: GO 30366
30334: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30335: LD_VAR 0 6
30339: PPUSH
30340: LD_VAR 0 7
30344: PPUSH
30345: LD_VAR 0 8
30349: PPUSH
30350: LD_VAR 0 4
30354: PPUSH
30355: LD_VAR 0 5
30359: PPUSH
30360: CALL 31575 0 5
30364: GO 30487
30366: LD_INT 302
30368: DOUBLE
30369: EQUAL
30370: IFTRUE 30374
30372: GO 30411
30374: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30375: LD_VAR 0 6
30379: PPUSH
30380: LD_VAR 0 7
30384: PPUSH
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 9
30394: PPUSH
30395: LD_VAR 0 4
30399: PPUSH
30400: LD_VAR 0 5
30404: PPUSH
30405: CALL 31666 0 6
30409: GO 30487
30411: LD_INT 303
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30419
30417: GO 30456
30419: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30420: LD_VAR 0 6
30424: PPUSH
30425: LD_VAR 0 7
30429: PPUSH
30430: LD_VAR 0 8
30434: PPUSH
30435: LD_VAR 0 9
30439: PPUSH
30440: LD_VAR 0 4
30444: PPUSH
30445: LD_VAR 0 5
30449: PPUSH
30450: CALL 30492 0 6
30454: GO 30487
30456: LD_INT 304
30458: DOUBLE
30459: EQUAL
30460: IFTRUE 30464
30462: GO 30486
30464: POP
// hHackTeleport ( unit , x , y ) ; end ;
30465: LD_VAR 0 2
30469: PPUSH
30470: LD_VAR 0 4
30474: PPUSH
30475: LD_VAR 0 5
30479: PPUSH
30480: CALL 32259 0 3
30484: GO 30487
30486: POP
// end ;
30487: LD_VAR 0 12
30491: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30492: LD_INT 0
30494: PPUSH
30495: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30496: LD_VAR 0 1
30500: PUSH
30501: LD_INT 1
30503: LESS
30504: PUSH
30505: LD_VAR 0 1
30509: PUSH
30510: LD_INT 3
30512: GREATER
30513: OR
30514: PUSH
30515: LD_VAR 0 5
30519: PPUSH
30520: LD_VAR 0 6
30524: PPUSH
30525: CALL_OW 428
30529: OR
30530: IFFALSE 30534
// exit ;
30532: GO 31262
// uc_side := your_side ;
30534: LD_ADDR_OWVAR 20
30538: PUSH
30539: LD_OWVAR 2
30543: ST_TO_ADDR
// uc_nation := nation ;
30544: LD_ADDR_OWVAR 21
30548: PUSH
30549: LD_VAR 0 1
30553: ST_TO_ADDR
// bc_level = 1 ;
30554: LD_ADDR_OWVAR 43
30558: PUSH
30559: LD_INT 1
30561: ST_TO_ADDR
// case btype of 1 :
30562: LD_VAR 0 2
30566: PUSH
30567: LD_INT 1
30569: DOUBLE
30570: EQUAL
30571: IFTRUE 30575
30573: GO 30586
30575: POP
// bc_type := b_depot ; 2 :
30576: LD_ADDR_OWVAR 42
30580: PUSH
30581: LD_INT 0
30583: ST_TO_ADDR
30584: GO 31206
30586: LD_INT 2
30588: DOUBLE
30589: EQUAL
30590: IFTRUE 30594
30592: GO 30605
30594: POP
// bc_type := b_warehouse ; 3 :
30595: LD_ADDR_OWVAR 42
30599: PUSH
30600: LD_INT 1
30602: ST_TO_ADDR
30603: GO 31206
30605: LD_INT 3
30607: DOUBLE
30608: EQUAL
30609: IFTRUE 30613
30611: GO 30624
30613: POP
// bc_type := b_lab ; 4 .. 9 :
30614: LD_ADDR_OWVAR 42
30618: PUSH
30619: LD_INT 6
30621: ST_TO_ADDR
30622: GO 31206
30624: LD_INT 4
30626: DOUBLE
30627: GREATEREQUAL
30628: IFFALSE 30636
30630: LD_INT 9
30632: DOUBLE
30633: LESSEQUAL
30634: IFTRUE 30638
30636: GO 30698
30638: POP
// begin bc_type := b_lab_half ;
30639: LD_ADDR_OWVAR 42
30643: PUSH
30644: LD_INT 7
30646: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30647: LD_ADDR_OWVAR 44
30651: PUSH
30652: LD_INT 10
30654: PUSH
30655: LD_INT 11
30657: PUSH
30658: LD_INT 12
30660: PUSH
30661: LD_INT 15
30663: PUSH
30664: LD_INT 14
30666: PUSH
30667: LD_INT 13
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_INT 3
30685: MINUS
30686: ARRAY
30687: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30688: LD_ADDR_OWVAR 45
30692: PUSH
30693: LD_INT 9
30695: ST_TO_ADDR
// end ; 10 .. 13 :
30696: GO 31206
30698: LD_INT 10
30700: DOUBLE
30701: GREATEREQUAL
30702: IFFALSE 30710
30704: LD_INT 13
30706: DOUBLE
30707: LESSEQUAL
30708: IFTRUE 30712
30710: GO 30789
30712: POP
// begin bc_type := b_lab_full ;
30713: LD_ADDR_OWVAR 42
30717: PUSH
30718: LD_INT 8
30720: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30721: LD_ADDR_OWVAR 44
30725: PUSH
30726: LD_INT 10
30728: PUSH
30729: LD_INT 12
30731: PUSH
30732: LD_INT 14
30734: PUSH
30735: LD_INT 13
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: PUSH
30744: LD_VAR 0 2
30748: PUSH
30749: LD_INT 9
30751: MINUS
30752: ARRAY
30753: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30754: LD_ADDR_OWVAR 45
30758: PUSH
30759: LD_INT 11
30761: PUSH
30762: LD_INT 15
30764: PUSH
30765: LD_INT 12
30767: PUSH
30768: LD_INT 15
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: PUSH
30777: LD_VAR 0 2
30781: PUSH
30782: LD_INT 9
30784: MINUS
30785: ARRAY
30786: ST_TO_ADDR
// end ; 14 :
30787: GO 31206
30789: LD_INT 14
30791: DOUBLE
30792: EQUAL
30793: IFTRUE 30797
30795: GO 30808
30797: POP
// bc_type := b_workshop ; 15 :
30798: LD_ADDR_OWVAR 42
30802: PUSH
30803: LD_INT 2
30805: ST_TO_ADDR
30806: GO 31206
30808: LD_INT 15
30810: DOUBLE
30811: EQUAL
30812: IFTRUE 30816
30814: GO 30827
30816: POP
// bc_type := b_factory ; 16 :
30817: LD_ADDR_OWVAR 42
30821: PUSH
30822: LD_INT 3
30824: ST_TO_ADDR
30825: GO 31206
30827: LD_INT 16
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30846
30835: POP
// bc_type := b_ext_gun ; 17 :
30836: LD_ADDR_OWVAR 42
30840: PUSH
30841: LD_INT 17
30843: ST_TO_ADDR
30844: GO 31206
30846: LD_INT 17
30848: DOUBLE
30849: EQUAL
30850: IFTRUE 30854
30852: GO 30882
30854: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30855: LD_ADDR_OWVAR 42
30859: PUSH
30860: LD_INT 19
30862: PUSH
30863: LD_INT 23
30865: PUSH
30866: LD_INT 19
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: LIST
30873: PUSH
30874: LD_VAR 0 1
30878: ARRAY
30879: ST_TO_ADDR
30880: GO 31206
30882: LD_INT 18
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30890
30888: GO 30901
30890: POP
// bc_type := b_ext_radar ; 19 :
30891: LD_ADDR_OWVAR 42
30895: PUSH
30896: LD_INT 20
30898: ST_TO_ADDR
30899: GO 31206
30901: LD_INT 19
30903: DOUBLE
30904: EQUAL
30905: IFTRUE 30909
30907: GO 30920
30909: POP
// bc_type := b_ext_radio ; 20 :
30910: LD_ADDR_OWVAR 42
30914: PUSH
30915: LD_INT 22
30917: ST_TO_ADDR
30918: GO 31206
30920: LD_INT 20
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30939
30928: POP
// bc_type := b_ext_siberium ; 21 :
30929: LD_ADDR_OWVAR 42
30933: PUSH
30934: LD_INT 21
30936: ST_TO_ADDR
30937: GO 31206
30939: LD_INT 21
30941: DOUBLE
30942: EQUAL
30943: IFTRUE 30947
30945: GO 30958
30947: POP
// bc_type := b_ext_computer ; 22 :
30948: LD_ADDR_OWVAR 42
30952: PUSH
30953: LD_INT 24
30955: ST_TO_ADDR
30956: GO 31206
30958: LD_INT 22
30960: DOUBLE
30961: EQUAL
30962: IFTRUE 30966
30964: GO 30977
30966: POP
// bc_type := b_ext_track ; 23 :
30967: LD_ADDR_OWVAR 42
30971: PUSH
30972: LD_INT 16
30974: ST_TO_ADDR
30975: GO 31206
30977: LD_INT 23
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 30996
30985: POP
// bc_type := b_ext_laser ; 24 :
30986: LD_ADDR_OWVAR 42
30990: PUSH
30991: LD_INT 25
30993: ST_TO_ADDR
30994: GO 31206
30996: LD_INT 24
30998: DOUBLE
30999: EQUAL
31000: IFTRUE 31004
31002: GO 31015
31004: POP
// bc_type := b_control_tower ; 25 :
31005: LD_ADDR_OWVAR 42
31009: PUSH
31010: LD_INT 36
31012: ST_TO_ADDR
31013: GO 31206
31015: LD_INT 25
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31034
31023: POP
// bc_type := b_breastwork ; 26 :
31024: LD_ADDR_OWVAR 42
31028: PUSH
31029: LD_INT 31
31031: ST_TO_ADDR
31032: GO 31206
31034: LD_INT 26
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31053
31042: POP
// bc_type := b_bunker ; 27 :
31043: LD_ADDR_OWVAR 42
31047: PUSH
31048: LD_INT 32
31050: ST_TO_ADDR
31051: GO 31206
31053: LD_INT 27
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31072
31061: POP
// bc_type := b_turret ; 28 :
31062: LD_ADDR_OWVAR 42
31066: PUSH
31067: LD_INT 33
31069: ST_TO_ADDR
31070: GO 31206
31072: LD_INT 28
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31091
31080: POP
// bc_type := b_armoury ; 29 :
31081: LD_ADDR_OWVAR 42
31085: PUSH
31086: LD_INT 4
31088: ST_TO_ADDR
31089: GO 31206
31091: LD_INT 29
31093: DOUBLE
31094: EQUAL
31095: IFTRUE 31099
31097: GO 31110
31099: POP
// bc_type := b_barracks ; 30 :
31100: LD_ADDR_OWVAR 42
31104: PUSH
31105: LD_INT 5
31107: ST_TO_ADDR
31108: GO 31206
31110: LD_INT 30
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31129
31118: POP
// bc_type := b_solar_power ; 31 :
31119: LD_ADDR_OWVAR 42
31123: PUSH
31124: LD_INT 27
31126: ST_TO_ADDR
31127: GO 31206
31129: LD_INT 31
31131: DOUBLE
31132: EQUAL
31133: IFTRUE 31137
31135: GO 31148
31137: POP
// bc_type := b_oil_power ; 32 :
31138: LD_ADDR_OWVAR 42
31142: PUSH
31143: LD_INT 26
31145: ST_TO_ADDR
31146: GO 31206
31148: LD_INT 32
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31167
31156: POP
// bc_type := b_siberite_power ; 33 :
31157: LD_ADDR_OWVAR 42
31161: PUSH
31162: LD_INT 28
31164: ST_TO_ADDR
31165: GO 31206
31167: LD_INT 33
31169: DOUBLE
31170: EQUAL
31171: IFTRUE 31175
31173: GO 31186
31175: POP
// bc_type := b_oil_mine ; 34 :
31176: LD_ADDR_OWVAR 42
31180: PUSH
31181: LD_INT 29
31183: ST_TO_ADDR
31184: GO 31206
31186: LD_INT 34
31188: DOUBLE
31189: EQUAL
31190: IFTRUE 31194
31192: GO 31205
31194: POP
// bc_type := b_siberite_mine ; end ;
31195: LD_ADDR_OWVAR 42
31199: PUSH
31200: LD_INT 30
31202: ST_TO_ADDR
31203: GO 31206
31205: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31206: LD_ADDR_VAR 0 8
31210: PUSH
31211: LD_VAR 0 5
31215: PPUSH
31216: LD_VAR 0 6
31220: PPUSH
31221: LD_VAR 0 3
31225: PPUSH
31226: CALL_OW 47
31230: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31231: LD_OWVAR 42
31235: PUSH
31236: LD_INT 32
31238: PUSH
31239: LD_INT 33
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: IN
31246: IFFALSE 31262
// PlaceWeaponTurret ( b , weapon ) ;
31248: LD_VAR 0 8
31252: PPUSH
31253: LD_VAR 0 4
31257: PPUSH
31258: CALL_OW 431
// end ;
31262: LD_VAR 0 7
31266: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31267: LD_INT 0
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31273: LD_ADDR_VAR 0 4
31277: PUSH
31278: LD_INT 22
31280: PUSH
31281: LD_OWVAR 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: LD_INT 30
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 30
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PPUSH
31322: CALL_OW 69
31326: ST_TO_ADDR
// if not tmp then
31327: LD_VAR 0 4
31331: NOT
31332: IFFALSE 31336
// exit ;
31334: GO 31395
// for i in tmp do
31336: LD_ADDR_VAR 0 2
31340: PUSH
31341: LD_VAR 0 4
31345: PUSH
31346: FOR_IN
31347: IFFALSE 31393
// for j = 1 to 3 do
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: DOUBLE
31355: LD_INT 1
31357: DEC
31358: ST_TO_ADDR
31359: LD_INT 3
31361: PUSH
31362: FOR_TO
31363: IFFALSE 31389
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31365: LD_VAR 0 2
31369: PPUSH
31370: CALL_OW 274
31374: PPUSH
31375: LD_VAR 0 3
31379: PPUSH
31380: LD_INT 99999
31382: PPUSH
31383: CALL_OW 277
31387: GO 31362
31389: POP
31390: POP
31391: GO 31346
31393: POP
31394: POP
// end ;
31395: LD_VAR 0 1
31399: RET
// export function hHackSetLevel10 ; var i , j ; begin
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
31404: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31405: LD_ADDR_VAR 0 2
31409: PUSH
31410: LD_INT 21
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PPUSH
31420: CALL_OW 69
31424: PUSH
31425: FOR_IN
31426: IFFALSE 31478
// if IsSelected ( i ) then
31428: LD_VAR 0 2
31432: PPUSH
31433: CALL_OW 306
31437: IFFALSE 31476
// begin for j := 1 to 4 do
31439: LD_ADDR_VAR 0 3
31443: PUSH
31444: DOUBLE
31445: LD_INT 1
31447: DEC
31448: ST_TO_ADDR
31449: LD_INT 4
31451: PUSH
31452: FOR_TO
31453: IFFALSE 31474
// SetSkill ( i , j , 10 ) ;
31455: LD_VAR 0 2
31459: PPUSH
31460: LD_VAR 0 3
31464: PPUSH
31465: LD_INT 10
31467: PPUSH
31468: CALL_OW 237
31472: GO 31452
31474: POP
31475: POP
// end ;
31476: GO 31425
31478: POP
31479: POP
// end ;
31480: LD_VAR 0 1
31484: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31485: LD_INT 0
31487: PPUSH
31488: PPUSH
31489: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31490: LD_ADDR_VAR 0 2
31494: PUSH
31495: LD_INT 22
31497: PUSH
31498: LD_OWVAR 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 21
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PPUSH
31521: CALL_OW 69
31525: PUSH
31526: FOR_IN
31527: IFFALSE 31568
// begin for j := 1 to 4 do
31529: LD_ADDR_VAR 0 3
31533: PUSH
31534: DOUBLE
31535: LD_INT 1
31537: DEC
31538: ST_TO_ADDR
31539: LD_INT 4
31541: PUSH
31542: FOR_TO
31543: IFFALSE 31564
// SetSkill ( i , j , 10 ) ;
31545: LD_VAR 0 2
31549: PPUSH
31550: LD_VAR 0 3
31554: PPUSH
31555: LD_INT 10
31557: PPUSH
31558: CALL_OW 237
31562: GO 31542
31564: POP
31565: POP
// end ;
31566: GO 31526
31568: POP
31569: POP
// end ;
31570: LD_VAR 0 1
31574: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31575: LD_INT 0
31577: PPUSH
// uc_side := your_side ;
31578: LD_ADDR_OWVAR 20
31582: PUSH
31583: LD_OWVAR 2
31587: ST_TO_ADDR
// uc_nation := nation ;
31588: LD_ADDR_OWVAR 21
31592: PUSH
31593: LD_VAR 0 1
31597: ST_TO_ADDR
// InitHc ;
31598: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31602: LD_INT 0
31604: PPUSH
31605: LD_VAR 0 2
31609: PPUSH
31610: LD_VAR 0 3
31614: PPUSH
31615: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31619: LD_VAR 0 4
31623: PPUSH
31624: LD_VAR 0 5
31628: PPUSH
31629: CALL_OW 428
31633: PUSH
31634: LD_INT 0
31636: EQUAL
31637: IFFALSE 31661
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31639: CALL_OW 44
31643: PPUSH
31644: LD_VAR 0 4
31648: PPUSH
31649: LD_VAR 0 5
31653: PPUSH
31654: LD_INT 1
31656: PPUSH
31657: CALL_OW 48
// end ;
31661: LD_VAR 0 6
31665: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31666: LD_INT 0
31668: PPUSH
31669: PPUSH
// uc_side := your_side ;
31670: LD_ADDR_OWVAR 20
31674: PUSH
31675: LD_OWVAR 2
31679: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31680: LD_VAR 0 1
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: LD_INT 2
31690: PUSH
31691: LD_INT 3
31693: PUSH
31694: LD_INT 4
31696: PUSH
31697: LD_INT 5
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: IN
31707: IFFALSE 31719
// uc_nation := nation_american else
31709: LD_ADDR_OWVAR 21
31713: PUSH
31714: LD_INT 1
31716: ST_TO_ADDR
31717: GO 31762
// if chassis in [ 11 , 12 , 13 , 14 ] then
31719: LD_VAR 0 1
31723: PUSH
31724: LD_INT 11
31726: PUSH
31727: LD_INT 12
31729: PUSH
31730: LD_INT 13
31732: PUSH
31733: LD_INT 14
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: IN
31742: IFFALSE 31754
// uc_nation := nation_arabian else
31744: LD_ADDR_OWVAR 21
31748: PUSH
31749: LD_INT 2
31751: ST_TO_ADDR
31752: GO 31762
// uc_nation := nation_russian ;
31754: LD_ADDR_OWVAR 21
31758: PUSH
31759: LD_INT 3
31761: ST_TO_ADDR
// vc_chassis := chassis ;
31762: LD_ADDR_OWVAR 37
31766: PUSH
31767: LD_VAR 0 1
31771: ST_TO_ADDR
// vc_engine := engine ;
31772: LD_ADDR_OWVAR 39
31776: PUSH
31777: LD_VAR 0 2
31781: ST_TO_ADDR
// vc_control := control ;
31782: LD_ADDR_OWVAR 38
31786: PUSH
31787: LD_VAR 0 3
31791: ST_TO_ADDR
// vc_weapon := weapon ;
31792: LD_ADDR_OWVAR 40
31796: PUSH
31797: LD_VAR 0 4
31801: ST_TO_ADDR
// un := CreateVehicle ;
31802: LD_ADDR_VAR 0 8
31806: PUSH
31807: CALL_OW 45
31811: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31812: LD_VAR 0 8
31816: PPUSH
31817: LD_INT 0
31819: PPUSH
31820: LD_INT 5
31822: PPUSH
31823: CALL_OW 12
31827: PPUSH
31828: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31832: LD_VAR 0 8
31836: PPUSH
31837: LD_VAR 0 5
31841: PPUSH
31842: LD_VAR 0 6
31846: PPUSH
31847: LD_INT 1
31849: PPUSH
31850: CALL_OW 48
// end ;
31854: LD_VAR 0 7
31858: RET
// export hInvincible ; every 1 do
31859: GO 31861
31861: DISABLE
// hInvincible := [ ] ;
31862: LD_ADDR_EXP 111
31866: PUSH
31867: EMPTY
31868: ST_TO_ADDR
31869: END
// every 10 do var i ;
31870: GO 31872
31872: DISABLE
31873: LD_INT 0
31875: PPUSH
// begin enable ;
31876: ENABLE
// if not hInvincible then
31877: LD_EXP 111
31881: NOT
31882: IFFALSE 31886
// exit ;
31884: GO 31930
// for i in hInvincible do
31886: LD_ADDR_VAR 0 1
31890: PUSH
31891: LD_EXP 111
31895: PUSH
31896: FOR_IN
31897: IFFALSE 31928
// if GetLives ( i ) < 1000 then
31899: LD_VAR 0 1
31903: PPUSH
31904: CALL_OW 256
31908: PUSH
31909: LD_INT 1000
31911: LESS
31912: IFFALSE 31926
// SetLives ( i , 1000 ) ;
31914: LD_VAR 0 1
31918: PPUSH
31919: LD_INT 1000
31921: PPUSH
31922: CALL_OW 234
31926: GO 31896
31928: POP
31929: POP
// end ;
31930: PPOPN 1
31932: END
// export function hHackInvincible ; var i ; begin
31933: LD_INT 0
31935: PPUSH
31936: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31937: LD_ADDR_VAR 0 2
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: LD_INT 21
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 21
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: PPUSH
31970: CALL_OW 69
31974: PUSH
31975: FOR_IN
31976: IFFALSE 32037
// if IsSelected ( i ) then
31978: LD_VAR 0 2
31982: PPUSH
31983: CALL_OW 306
31987: IFFALSE 32035
// begin if i in hInvincible then
31989: LD_VAR 0 2
31993: PUSH
31994: LD_EXP 111
31998: IN
31999: IFFALSE 32019
// hInvincible := hInvincible diff i else
32001: LD_ADDR_EXP 111
32005: PUSH
32006: LD_EXP 111
32010: PUSH
32011: LD_VAR 0 2
32015: DIFF
32016: ST_TO_ADDR
32017: GO 32035
// hInvincible := hInvincible union i ;
32019: LD_ADDR_EXP 111
32023: PUSH
32024: LD_EXP 111
32028: PUSH
32029: LD_VAR 0 2
32033: UNION
32034: ST_TO_ADDR
// end ;
32035: GO 31975
32037: POP
32038: POP
// end ;
32039: LD_VAR 0 1
32043: RET
// export function hHackInvisible ; var i , j ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
32048: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32049: LD_ADDR_VAR 0 2
32053: PUSH
32054: LD_INT 21
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PPUSH
32064: CALL_OW 69
32068: PUSH
32069: FOR_IN
32070: IFFALSE 32094
// if IsSelected ( i ) then
32072: LD_VAR 0 2
32076: PPUSH
32077: CALL_OW 306
32081: IFFALSE 32092
// ComForceInvisible ( i ) ;
32083: LD_VAR 0 2
32087: PPUSH
32088: CALL_OW 496
32092: GO 32069
32094: POP
32095: POP
// end ;
32096: LD_VAR 0 1
32100: RET
// export function hHackChangeYourSide ; begin
32101: LD_INT 0
32103: PPUSH
// if your_side = 8 then
32104: LD_OWVAR 2
32108: PUSH
32109: LD_INT 8
32111: EQUAL
32112: IFFALSE 32124
// your_side := 0 else
32114: LD_ADDR_OWVAR 2
32118: PUSH
32119: LD_INT 0
32121: ST_TO_ADDR
32122: GO 32138
// your_side := your_side + 1 ;
32124: LD_ADDR_OWVAR 2
32128: PUSH
32129: LD_OWVAR 2
32133: PUSH
32134: LD_INT 1
32136: PLUS
32137: ST_TO_ADDR
// end ;
32138: LD_VAR 0 1
32142: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32143: LD_INT 0
32145: PPUSH
32146: PPUSH
32147: PPUSH
// for i in all_units do
32148: LD_ADDR_VAR 0 2
32152: PUSH
32153: LD_OWVAR 3
32157: PUSH
32158: FOR_IN
32159: IFFALSE 32237
// if IsSelected ( i ) then
32161: LD_VAR 0 2
32165: PPUSH
32166: CALL_OW 306
32170: IFFALSE 32235
// begin j := GetSide ( i ) ;
32172: LD_ADDR_VAR 0 3
32176: PUSH
32177: LD_VAR 0 2
32181: PPUSH
32182: CALL_OW 255
32186: ST_TO_ADDR
// if j = 8 then
32187: LD_VAR 0 3
32191: PUSH
32192: LD_INT 8
32194: EQUAL
32195: IFFALSE 32207
// j := 0 else
32197: LD_ADDR_VAR 0 3
32201: PUSH
32202: LD_INT 0
32204: ST_TO_ADDR
32205: GO 32221
// j := j + 1 ;
32207: LD_ADDR_VAR 0 3
32211: PUSH
32212: LD_VAR 0 3
32216: PUSH
32217: LD_INT 1
32219: PLUS
32220: ST_TO_ADDR
// SetSide ( i , j ) ;
32221: LD_VAR 0 2
32225: PPUSH
32226: LD_VAR 0 3
32230: PPUSH
32231: CALL_OW 235
// end ;
32235: GO 32158
32237: POP
32238: POP
// end ;
32239: LD_VAR 0 1
32243: RET
// export function hHackFog ; begin
32244: LD_INT 0
32246: PPUSH
// FogOff ( true ) ;
32247: LD_INT 1
32249: PPUSH
32250: CALL_OW 344
// end ;
32254: LD_VAR 0 1
32258: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32259: LD_INT 0
32261: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32262: LD_VAR 0 1
32266: PPUSH
32267: LD_VAR 0 2
32271: PPUSH
32272: LD_VAR 0 3
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: LD_INT 1
32282: PPUSH
32283: CALL_OW 483
// CenterOnXY ( x , y ) ;
32287: LD_VAR 0 2
32291: PPUSH
32292: LD_VAR 0 3
32296: PPUSH
32297: CALL_OW 84
// end ;
32301: LD_VAR 0 4
32305: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32306: LD_INT 0
32308: PPUSH
32309: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32310: LD_VAR 0 1
32314: NOT
32315: PUSH
32316: LD_VAR 0 2
32320: PPUSH
32321: LD_VAR 0 3
32325: PPUSH
32326: CALL_OW 488
32330: NOT
32331: OR
32332: PUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: CALL_OW 266
32342: PUSH
32343: LD_INT 3
32345: NONEQUAL
32346: PUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: CALL_OW 247
32356: PUSH
32357: LD_INT 1
32359: EQUAL
32360: NOT
32361: AND
32362: OR
32363: IFFALSE 32367
// exit ;
32365: GO 32516
// if GetType ( factory ) = unit_human then
32367: LD_VAR 0 1
32371: PPUSH
32372: CALL_OW 247
32376: PUSH
32377: LD_INT 1
32379: EQUAL
32380: IFFALSE 32397
// factory := IsInUnit ( factory ) ;
32382: LD_ADDR_VAR 0 1
32386: PUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: CALL_OW 310
32396: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32397: LD_VAR 0 1
32401: PPUSH
32402: CALL_OW 266
32406: PUSH
32407: LD_INT 3
32409: NONEQUAL
32410: IFFALSE 32414
// exit ;
32412: GO 32516
// if HexInfo ( x , y ) = factory then
32414: LD_VAR 0 2
32418: PPUSH
32419: LD_VAR 0 3
32423: PPUSH
32424: CALL_OW 428
32428: PUSH
32429: LD_VAR 0 1
32433: EQUAL
32434: IFFALSE 32461
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32436: LD_ADDR_EXP 112
32440: PUSH
32441: LD_EXP 112
32445: PPUSH
32446: LD_VAR 0 1
32450: PPUSH
32451: LD_INT 0
32453: PPUSH
32454: CALL_OW 1
32458: ST_TO_ADDR
32459: GO 32512
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32461: LD_ADDR_EXP 112
32465: PUSH
32466: LD_EXP 112
32470: PPUSH
32471: LD_VAR 0 1
32475: PPUSH
32476: LD_VAR 0 1
32480: PPUSH
32481: CALL_OW 255
32485: PUSH
32486: LD_VAR 0 1
32490: PUSH
32491: LD_VAR 0 2
32495: PUSH
32496: LD_VAR 0 3
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 1
32511: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32512: CALL 32521 0 0
// end ;
32516: LD_VAR 0 4
32520: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32521: LD_INT 0
32523: PPUSH
32524: PPUSH
32525: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32526: LD_STRING resetFactoryWaypoint();
32528: PPUSH
32529: CALL_OW 559
// if factoryWaypoints then
32533: LD_EXP 112
32537: IFFALSE 32663
// begin list := PrepareArray ( factoryWaypoints ) ;
32539: LD_ADDR_VAR 0 3
32543: PUSH
32544: LD_EXP 112
32548: PPUSH
32549: CALL 80123 0 1
32553: ST_TO_ADDR
// for i := 1 to list do
32554: LD_ADDR_VAR 0 2
32558: PUSH
32559: DOUBLE
32560: LD_INT 1
32562: DEC
32563: ST_TO_ADDR
32564: LD_VAR 0 3
32568: PUSH
32569: FOR_TO
32570: IFFALSE 32661
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32572: LD_STRING setFactoryWaypointXY(
32574: PUSH
32575: LD_VAR 0 3
32579: PUSH
32580: LD_VAR 0 2
32584: ARRAY
32585: PUSH
32586: LD_INT 1
32588: ARRAY
32589: STR
32590: PUSH
32591: LD_STRING ,
32593: STR
32594: PUSH
32595: LD_VAR 0 3
32599: PUSH
32600: LD_VAR 0 2
32604: ARRAY
32605: PUSH
32606: LD_INT 2
32608: ARRAY
32609: STR
32610: PUSH
32611: LD_STRING ,
32613: STR
32614: PUSH
32615: LD_VAR 0 3
32619: PUSH
32620: LD_VAR 0 2
32624: ARRAY
32625: PUSH
32626: LD_INT 3
32628: ARRAY
32629: STR
32630: PUSH
32631: LD_STRING ,
32633: STR
32634: PUSH
32635: LD_VAR 0 3
32639: PUSH
32640: LD_VAR 0 2
32644: ARRAY
32645: PUSH
32646: LD_INT 4
32648: ARRAY
32649: STR
32650: PUSH
32651: LD_STRING )
32653: STR
32654: PPUSH
32655: CALL_OW 559
32659: GO 32569
32661: POP
32662: POP
// end ; end ;
32663: LD_VAR 0 1
32667: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32668: LD_INT 0
32670: PPUSH
// if HexInfo ( x , y ) = warehouse then
32671: LD_VAR 0 2
32675: PPUSH
32676: LD_VAR 0 3
32680: PPUSH
32681: CALL_OW 428
32685: PUSH
32686: LD_VAR 0 1
32690: EQUAL
32691: IFFALSE 32718
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32693: LD_ADDR_EXP 113
32697: PUSH
32698: LD_EXP 113
32702: PPUSH
32703: LD_VAR 0 1
32707: PPUSH
32708: LD_INT 0
32710: PPUSH
32711: CALL_OW 1
32715: ST_TO_ADDR
32716: GO 32769
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32718: LD_ADDR_EXP 113
32722: PUSH
32723: LD_EXP 113
32727: PPUSH
32728: LD_VAR 0 1
32732: PPUSH
32733: LD_VAR 0 1
32737: PPUSH
32738: CALL_OW 255
32742: PUSH
32743: LD_VAR 0 1
32747: PUSH
32748: LD_VAR 0 2
32752: PUSH
32753: LD_VAR 0 3
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: PPUSH
32764: CALL_OW 1
32768: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32769: CALL 32778 0 0
// end ;
32773: LD_VAR 0 4
32777: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32778: LD_INT 0
32780: PPUSH
32781: PPUSH
32782: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32783: LD_STRING resetWarehouseGatheringPoints();
32785: PPUSH
32786: CALL_OW 559
// if warehouseGatheringPoints then
32790: LD_EXP 113
32794: IFFALSE 32920
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32796: LD_ADDR_VAR 0 3
32800: PUSH
32801: LD_EXP 113
32805: PPUSH
32806: CALL 80123 0 1
32810: ST_TO_ADDR
// for i := 1 to list do
32811: LD_ADDR_VAR 0 2
32815: PUSH
32816: DOUBLE
32817: LD_INT 1
32819: DEC
32820: ST_TO_ADDR
32821: LD_VAR 0 3
32825: PUSH
32826: FOR_TO
32827: IFFALSE 32918
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32829: LD_STRING setWarehouseGatheringPointXY(
32831: PUSH
32832: LD_VAR 0 3
32836: PUSH
32837: LD_VAR 0 2
32841: ARRAY
32842: PUSH
32843: LD_INT 1
32845: ARRAY
32846: STR
32847: PUSH
32848: LD_STRING ,
32850: STR
32851: PUSH
32852: LD_VAR 0 3
32856: PUSH
32857: LD_VAR 0 2
32861: ARRAY
32862: PUSH
32863: LD_INT 2
32865: ARRAY
32866: STR
32867: PUSH
32868: LD_STRING ,
32870: STR
32871: PUSH
32872: LD_VAR 0 3
32876: PUSH
32877: LD_VAR 0 2
32881: ARRAY
32882: PUSH
32883: LD_INT 3
32885: ARRAY
32886: STR
32887: PUSH
32888: LD_STRING ,
32890: STR
32891: PUSH
32892: LD_VAR 0 3
32896: PUSH
32897: LD_VAR 0 2
32901: ARRAY
32902: PUSH
32903: LD_INT 4
32905: ARRAY
32906: STR
32907: PUSH
32908: LD_STRING )
32910: STR
32911: PPUSH
32912: CALL_OW 559
32916: GO 32826
32918: POP
32919: POP
// end ; end ;
32920: LD_VAR 0 1
32924: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32925: LD_EXP 113
32929: IFFALSE 33614
32931: GO 32933
32933: DISABLE
32934: LD_INT 0
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
32944: PPUSH
// begin enable ;
32945: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_EXP 113
32955: PPUSH
32956: CALL 80123 0 1
32960: ST_TO_ADDR
// if not list then
32961: LD_VAR 0 3
32965: NOT
32966: IFFALSE 32970
// exit ;
32968: GO 33614
// for i := 1 to list do
32970: LD_ADDR_VAR 0 1
32974: PUSH
32975: DOUBLE
32976: LD_INT 1
32978: DEC
32979: ST_TO_ADDR
32980: LD_VAR 0 3
32984: PUSH
32985: FOR_TO
32986: IFFALSE 33612
// begin depot := list [ i ] [ 2 ] ;
32988: LD_ADDR_VAR 0 8
32992: PUSH
32993: LD_VAR 0 3
32997: PUSH
32998: LD_VAR 0 1
33002: ARRAY
33003: PUSH
33004: LD_INT 2
33006: ARRAY
33007: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33008: LD_ADDR_VAR 0 5
33012: PUSH
33013: LD_VAR 0 3
33017: PUSH
33018: LD_VAR 0 1
33022: ARRAY
33023: PUSH
33024: LD_INT 1
33026: ARRAY
33027: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33028: LD_VAR 0 8
33032: PPUSH
33033: CALL_OW 301
33037: PUSH
33038: LD_VAR 0 5
33042: PUSH
33043: LD_VAR 0 8
33047: PPUSH
33048: CALL_OW 255
33052: NONEQUAL
33053: OR
33054: IFFALSE 33083
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33056: LD_ADDR_EXP 113
33060: PUSH
33061: LD_EXP 113
33065: PPUSH
33066: LD_VAR 0 8
33070: PPUSH
33071: LD_INT 0
33073: PPUSH
33074: CALL_OW 1
33078: ST_TO_ADDR
// exit ;
33079: POP
33080: POP
33081: GO 33614
// end ; x := list [ i ] [ 3 ] ;
33083: LD_ADDR_VAR 0 6
33087: PUSH
33088: LD_VAR 0 3
33092: PUSH
33093: LD_VAR 0 1
33097: ARRAY
33098: PUSH
33099: LD_INT 3
33101: ARRAY
33102: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33103: LD_ADDR_VAR 0 7
33107: PUSH
33108: LD_VAR 0 3
33112: PUSH
33113: LD_VAR 0 1
33117: ARRAY
33118: PUSH
33119: LD_INT 4
33121: ARRAY
33122: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33123: LD_ADDR_VAR 0 9
33127: PUSH
33128: LD_VAR 0 6
33132: PPUSH
33133: LD_VAR 0 7
33137: PPUSH
33138: LD_INT 16
33140: PPUSH
33141: CALL 78711 0 3
33145: ST_TO_ADDR
// if not cratesNearbyPoint then
33146: LD_VAR 0 9
33150: NOT
33151: IFFALSE 33157
// exit ;
33153: POP
33154: POP
33155: GO 33614
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33157: LD_ADDR_VAR 0 4
33161: PUSH
33162: LD_INT 22
33164: PUSH
33165: LD_VAR 0 5
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: LD_INT 60
33179: PUSH
33180: EMPTY
33181: LIST
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 91
33189: PUSH
33190: LD_VAR 0 8
33194: PUSH
33195: LD_INT 6
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 25
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 25
33218: PUSH
33219: LD_INT 16
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: PPUSH
33237: CALL_OW 69
33241: PUSH
33242: LD_VAR 0 8
33246: PPUSH
33247: CALL_OW 313
33251: PPUSH
33252: LD_INT 3
33254: PUSH
33255: LD_INT 60
33257: PUSH
33258: EMPTY
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 25
33270: PUSH
33271: LD_INT 2
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 25
33280: PUSH
33281: LD_INT 16
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: LIST
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PPUSH
33297: CALL_OW 72
33301: UNION
33302: ST_TO_ADDR
// if tmp then
33303: LD_VAR 0 4
33307: IFFALSE 33387
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33309: LD_ADDR_VAR 0 4
33313: PUSH
33314: LD_VAR 0 4
33318: PPUSH
33319: LD_INT 3
33321: PPUSH
33322: CALL 76680 0 2
33326: ST_TO_ADDR
// for j in tmp do
33327: LD_ADDR_VAR 0 2
33331: PUSH
33332: LD_VAR 0 4
33336: PUSH
33337: FOR_IN
33338: IFFALSE 33381
// begin if IsInUnit ( j ) then
33340: LD_VAR 0 2
33344: PPUSH
33345: CALL_OW 310
33349: IFFALSE 33360
// ComExit ( j ) ;
33351: LD_VAR 0 2
33355: PPUSH
33356: CALL 76763 0 1
// AddComCollect ( j , x , y ) ;
33360: LD_VAR 0 2
33364: PPUSH
33365: LD_VAR 0 6
33369: PPUSH
33370: LD_VAR 0 7
33374: PPUSH
33375: CALL_OW 177
// end ;
33379: GO 33337
33381: POP
33382: POP
// exit ;
33383: POP
33384: POP
33385: GO 33614
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33387: LD_ADDR_VAR 0 4
33391: PUSH
33392: LD_INT 22
33394: PUSH
33395: LD_VAR 0 5
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 91
33406: PUSH
33407: LD_VAR 0 8
33411: PUSH
33412: LD_INT 8
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: LD_INT 34
33425: PUSH
33426: LD_INT 12
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 34
33435: PUSH
33436: LD_INT 51
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 34
33445: PUSH
33446: LD_INT 32
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 34
33455: PUSH
33456: LD_INT 89
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: PPUSH
33475: CALL_OW 69
33479: ST_TO_ADDR
// if tmp then
33480: LD_VAR 0 4
33484: IFFALSE 33610
// begin for j in tmp do
33486: LD_ADDR_VAR 0 2
33490: PUSH
33491: LD_VAR 0 4
33495: PUSH
33496: FOR_IN
33497: IFFALSE 33608
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33499: LD_VAR 0 2
33503: PPUSH
33504: CALL_OW 262
33508: PUSH
33509: LD_INT 3
33511: EQUAL
33512: PUSH
33513: LD_VAR 0 2
33517: PPUSH
33518: CALL_OW 261
33522: PUSH
33523: LD_INT 20
33525: GREATER
33526: OR
33527: PUSH
33528: LD_VAR 0 2
33532: PPUSH
33533: CALL_OW 314
33537: NOT
33538: AND
33539: PUSH
33540: LD_VAR 0 2
33544: PPUSH
33545: CALL_OW 263
33549: PUSH
33550: LD_INT 1
33552: NONEQUAL
33553: PUSH
33554: LD_VAR 0 2
33558: PPUSH
33559: CALL_OW 311
33563: OR
33564: AND
33565: IFFALSE 33606
// begin ComCollect ( j , x , y ) ;
33567: LD_VAR 0 2
33571: PPUSH
33572: LD_VAR 0 6
33576: PPUSH
33577: LD_VAR 0 7
33581: PPUSH
33582: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33586: LD_VAR 0 2
33590: PPUSH
33591: LD_VAR 0 8
33595: PPUSH
33596: CALL_OW 172
// exit ;
33600: POP
33601: POP
33602: POP
33603: POP
33604: GO 33614
// end ;
33606: GO 33496
33608: POP
33609: POP
// end ; end ;
33610: GO 32985
33612: POP
33613: POP
// end ; end_of_file
33614: PPOPN 9
33616: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33617: LD_VAR 0 1
33621: PUSH
33622: LD_INT 200
33624: DOUBLE
33625: GREATEREQUAL
33626: IFFALSE 33634
33628: LD_INT 299
33630: DOUBLE
33631: LESSEQUAL
33632: IFTRUE 33636
33634: GO 33668
33636: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33637: LD_VAR 0 1
33641: PPUSH
33642: LD_VAR 0 2
33646: PPUSH
33647: LD_VAR 0 3
33651: PPUSH
33652: LD_VAR 0 4
33656: PPUSH
33657: LD_VAR 0 5
33661: PPUSH
33662: CALL 34156 0 5
33666: GO 33745
33668: LD_INT 300
33670: DOUBLE
33671: GREATEREQUAL
33672: IFFALSE 33680
33674: LD_INT 399
33676: DOUBLE
33677: LESSEQUAL
33678: IFTRUE 33682
33680: GO 33744
33682: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33683: LD_VAR 0 1
33687: PPUSH
33688: LD_VAR 0 2
33692: PPUSH
33693: LD_VAR 0 3
33697: PPUSH
33698: LD_VAR 0 4
33702: PPUSH
33703: LD_VAR 0 5
33707: PPUSH
33708: LD_VAR 0 6
33712: PPUSH
33713: LD_VAR 0 7
33717: PPUSH
33718: LD_VAR 0 8
33722: PPUSH
33723: LD_VAR 0 9
33727: PPUSH
33728: LD_VAR 0 10
33732: PPUSH
33733: LD_VAR 0 11
33737: PPUSH
33738: CALL 30318 0 11
33742: GO 33745
33744: POP
// end ;
33745: PPOPN 11
33747: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33748: LD_VAR 0 1
33752: PPUSH
33753: LD_VAR 0 2
33757: PPUSH
33758: LD_VAR 0 3
33762: PPUSH
33763: LD_VAR 0 4
33767: PPUSH
33768: LD_VAR 0 5
33772: PPUSH
33773: CALL 33892 0 5
// end ; end_of_file
33777: PPOPN 5
33779: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33780: LD_INT 0
33782: PPUSH
33783: PPUSH
33784: PPUSH
33785: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33786: LD_VAR 0 1
33790: PPUSH
33791: CALL_OW 264
33795: PUSH
33796: LD_INT 91
33798: EQUAL
33799: IFFALSE 33871
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33801: LD_INT 68
33803: PPUSH
33804: LD_VAR 0 1
33808: PPUSH
33809: CALL_OW 255
33813: PPUSH
33814: CALL_OW 321
33818: PUSH
33819: LD_INT 2
33821: EQUAL
33822: IFFALSE 33834
// eff := 70 else
33824: LD_ADDR_VAR 0 4
33828: PUSH
33829: LD_INT 70
33831: ST_TO_ADDR
33832: GO 33842
// eff := 30 ;
33834: LD_ADDR_VAR 0 4
33838: PUSH
33839: LD_INT 30
33841: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 250
33851: PPUSH
33852: LD_VAR 0 1
33856: PPUSH
33857: CALL_OW 251
33861: PPUSH
33862: LD_VAR 0 4
33866: PPUSH
33867: CALL_OW 495
// end ; end ;
33871: LD_VAR 0 2
33875: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33876: LD_INT 0
33878: PPUSH
// end ;
33879: LD_VAR 0 4
33883: RET
// export function SOS_Command ( cmd ) ; begin
33884: LD_INT 0
33886: PPUSH
// end ;
33887: LD_VAR 0 2
33891: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33892: LD_INT 0
33894: PPUSH
// end ;
33895: LD_VAR 0 6
33899: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33900: LD_INT 0
33902: PPUSH
33903: PPUSH
// if not vehicle or not factory then
33904: LD_VAR 0 1
33908: NOT
33909: PUSH
33910: LD_VAR 0 2
33914: NOT
33915: OR
33916: IFFALSE 33920
// exit ;
33918: GO 34151
// if factoryWaypoints >= factory then
33920: LD_EXP 112
33924: PUSH
33925: LD_VAR 0 2
33929: GREATEREQUAL
33930: IFFALSE 34151
// if factoryWaypoints [ factory ] then
33932: LD_EXP 112
33936: PUSH
33937: LD_VAR 0 2
33941: ARRAY
33942: IFFALSE 34151
// begin if GetControl ( vehicle ) = control_manual then
33944: LD_VAR 0 1
33948: PPUSH
33949: CALL_OW 263
33953: PUSH
33954: LD_INT 1
33956: EQUAL
33957: IFFALSE 34038
// begin driver := IsDrivenBy ( vehicle ) ;
33959: LD_ADDR_VAR 0 4
33963: PUSH
33964: LD_VAR 0 1
33968: PPUSH
33969: CALL_OW 311
33973: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33974: LD_VAR 0 4
33978: PPUSH
33979: LD_EXP 112
33983: PUSH
33984: LD_VAR 0 2
33988: ARRAY
33989: PUSH
33990: LD_INT 3
33992: ARRAY
33993: PPUSH
33994: LD_EXP 112
33998: PUSH
33999: LD_VAR 0 2
34003: ARRAY
34004: PUSH
34005: LD_INT 4
34007: ARRAY
34008: PPUSH
34009: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34013: LD_VAR 0 4
34017: PPUSH
34018: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34022: LD_VAR 0 4
34026: PPUSH
34027: LD_VAR 0 2
34031: PPUSH
34032: CALL_OW 180
// end else
34036: GO 34151
// if GetControl ( vehicle ) = control_remote then
34038: LD_VAR 0 1
34042: PPUSH
34043: CALL_OW 263
34047: PUSH
34048: LD_INT 2
34050: EQUAL
34051: IFFALSE 34112
// begin wait ( 0 0$2 ) ;
34053: LD_INT 70
34055: PPUSH
34056: CALL_OW 67
// if Connect ( vehicle ) then
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL 46982 0 1
34069: IFFALSE 34110
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34071: LD_VAR 0 1
34075: PPUSH
34076: LD_EXP 112
34080: PUSH
34081: LD_VAR 0 2
34085: ARRAY
34086: PUSH
34087: LD_INT 3
34089: ARRAY
34090: PPUSH
34091: LD_EXP 112
34095: PUSH
34096: LD_VAR 0 2
34100: ARRAY
34101: PUSH
34102: LD_INT 4
34104: ARRAY
34105: PPUSH
34106: CALL_OW 171
// end else
34110: GO 34151
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34112: LD_VAR 0 1
34116: PPUSH
34117: LD_EXP 112
34121: PUSH
34122: LD_VAR 0 2
34126: ARRAY
34127: PUSH
34128: LD_INT 3
34130: ARRAY
34131: PPUSH
34132: LD_EXP 112
34136: PUSH
34137: LD_VAR 0 2
34141: ARRAY
34142: PUSH
34143: LD_INT 4
34145: ARRAY
34146: PPUSH
34147: CALL_OW 171
// end ; end ;
34151: LD_VAR 0 3
34155: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34156: LD_INT 0
34158: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34159: LD_VAR 0 1
34163: PUSH
34164: LD_INT 250
34166: EQUAL
34167: PUSH
34168: LD_VAR 0 2
34172: PPUSH
34173: CALL_OW 264
34177: PUSH
34178: LD_INT 81
34180: EQUAL
34181: AND
34182: IFFALSE 34203
// MinerPlaceMine ( unit , x , y ) ;
34184: LD_VAR 0 2
34188: PPUSH
34189: LD_VAR 0 4
34193: PPUSH
34194: LD_VAR 0 5
34198: PPUSH
34199: CALL 37193 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34203: LD_VAR 0 1
34207: PUSH
34208: LD_INT 251
34210: EQUAL
34211: PUSH
34212: LD_VAR 0 2
34216: PPUSH
34217: CALL_OW 264
34221: PUSH
34222: LD_INT 81
34224: EQUAL
34225: AND
34226: IFFALSE 34247
// MinerDetonateMine ( unit , x , y ) ;
34228: LD_VAR 0 2
34232: PPUSH
34233: LD_VAR 0 4
34237: PPUSH
34238: LD_VAR 0 5
34242: PPUSH
34243: CALL 37468 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34247: LD_VAR 0 1
34251: PUSH
34252: LD_INT 252
34254: EQUAL
34255: PUSH
34256: LD_VAR 0 2
34260: PPUSH
34261: CALL_OW 264
34265: PUSH
34266: LD_INT 81
34268: EQUAL
34269: AND
34270: IFFALSE 34291
// MinerCreateMinefield ( unit , x , y ) ;
34272: LD_VAR 0 2
34276: PPUSH
34277: LD_VAR 0 4
34281: PPUSH
34282: LD_VAR 0 5
34286: PPUSH
34287: CALL 37885 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34291: LD_VAR 0 1
34295: PUSH
34296: LD_INT 253
34298: EQUAL
34299: PUSH
34300: LD_VAR 0 2
34304: PPUSH
34305: CALL_OW 257
34309: PUSH
34310: LD_INT 5
34312: EQUAL
34313: AND
34314: IFFALSE 34335
// ComBinocular ( unit , x , y ) ;
34316: LD_VAR 0 2
34320: PPUSH
34321: LD_VAR 0 4
34325: PPUSH
34326: LD_VAR 0 5
34330: PPUSH
34331: CALL 38254 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34335: LD_VAR 0 1
34339: PUSH
34340: LD_INT 254
34342: EQUAL
34343: PUSH
34344: LD_VAR 0 2
34348: PPUSH
34349: CALL_OW 264
34353: PUSH
34354: LD_INT 99
34356: EQUAL
34357: AND
34358: PUSH
34359: LD_VAR 0 3
34363: PPUSH
34364: CALL_OW 263
34368: PUSH
34369: LD_INT 3
34371: EQUAL
34372: AND
34373: IFFALSE 34389
// HackDestroyVehicle ( unit , selectedUnit ) ;
34375: LD_VAR 0 2
34379: PPUSH
34380: LD_VAR 0 3
34384: PPUSH
34385: CALL 36557 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34389: LD_VAR 0 1
34393: PUSH
34394: LD_INT 255
34396: EQUAL
34397: PUSH
34398: LD_VAR 0 2
34402: PPUSH
34403: CALL_OW 264
34407: PUSH
34408: LD_INT 14
34410: PUSH
34411: LD_INT 53
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: IN
34418: AND
34419: PUSH
34420: LD_VAR 0 4
34424: PPUSH
34425: LD_VAR 0 5
34429: PPUSH
34430: CALL_OW 488
34434: AND
34435: IFFALSE 34459
// CutTreeXYR ( unit , x , y , 12 ) ;
34437: LD_VAR 0 2
34441: PPUSH
34442: LD_VAR 0 4
34446: PPUSH
34447: LD_VAR 0 5
34451: PPUSH
34452: LD_INT 12
34454: PPUSH
34455: CALL 34554 0 4
// if cmd = 256 then
34459: LD_VAR 0 1
34463: PUSH
34464: LD_INT 256
34466: EQUAL
34467: IFFALSE 34488
// SetFactoryWaypoint ( unit , x , y ) ;
34469: LD_VAR 0 2
34473: PPUSH
34474: LD_VAR 0 4
34478: PPUSH
34479: LD_VAR 0 5
34483: PPUSH
34484: CALL 32306 0 3
// if cmd = 257 then
34488: LD_VAR 0 1
34492: PUSH
34493: LD_INT 257
34495: EQUAL
34496: IFFALSE 34517
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34498: LD_VAR 0 2
34502: PPUSH
34503: LD_VAR 0 4
34507: PPUSH
34508: LD_VAR 0 5
34512: PPUSH
34513: CALL 32668 0 3
// if cmd = 258 then
34517: LD_VAR 0 1
34521: PUSH
34522: LD_INT 258
34524: EQUAL
34525: IFFALSE 34549
// BurnTreeXYR ( unit , x , y , 8 ) ;
34527: LD_VAR 0 2
34531: PPUSH
34532: LD_VAR 0 4
34536: PPUSH
34537: LD_VAR 0 5
34541: PPUSH
34542: LD_INT 8
34544: PPUSH
34545: CALL 34948 0 4
// end ;
34549: LD_VAR 0 6
34553: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34554: LD_INT 0
34556: PPUSH
34557: PPUSH
34558: PPUSH
34559: PPUSH
34560: PPUSH
34561: PPUSH
34562: PPUSH
34563: PPUSH
34564: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34565: LD_VAR 0 1
34569: PPUSH
34570: CALL_OW 302
34574: NOT
34575: PUSH
34576: LD_VAR 0 2
34580: PPUSH
34581: LD_VAR 0 3
34585: PPUSH
34586: CALL_OW 488
34590: NOT
34591: OR
34592: PUSH
34593: LD_VAR 0 4
34597: NOT
34598: OR
34599: IFFALSE 34603
// exit ;
34601: GO 34943
// list := [ ] ;
34603: LD_ADDR_VAR 0 13
34607: PUSH
34608: EMPTY
34609: ST_TO_ADDR
// if x - r < 0 then
34610: LD_VAR 0 2
34614: PUSH
34615: LD_VAR 0 4
34619: MINUS
34620: PUSH
34621: LD_INT 0
34623: LESS
34624: IFFALSE 34636
// min_x := 0 else
34626: LD_ADDR_VAR 0 7
34630: PUSH
34631: LD_INT 0
34633: ST_TO_ADDR
34634: GO 34652
// min_x := x - r ;
34636: LD_ADDR_VAR 0 7
34640: PUSH
34641: LD_VAR 0 2
34645: PUSH
34646: LD_VAR 0 4
34650: MINUS
34651: ST_TO_ADDR
// if y - r < 0 then
34652: LD_VAR 0 3
34656: PUSH
34657: LD_VAR 0 4
34661: MINUS
34662: PUSH
34663: LD_INT 0
34665: LESS
34666: IFFALSE 34678
// min_y := 0 else
34668: LD_ADDR_VAR 0 8
34672: PUSH
34673: LD_INT 0
34675: ST_TO_ADDR
34676: GO 34694
// min_y := y - r ;
34678: LD_ADDR_VAR 0 8
34682: PUSH
34683: LD_VAR 0 3
34687: PUSH
34688: LD_VAR 0 4
34692: MINUS
34693: ST_TO_ADDR
// max_x := x + r ;
34694: LD_ADDR_VAR 0 9
34698: PUSH
34699: LD_VAR 0 2
34703: PUSH
34704: LD_VAR 0 4
34708: PLUS
34709: ST_TO_ADDR
// max_y := y + r ;
34710: LD_ADDR_VAR 0 10
34714: PUSH
34715: LD_VAR 0 3
34719: PUSH
34720: LD_VAR 0 4
34724: PLUS
34725: ST_TO_ADDR
// for _x = min_x to max_x do
34726: LD_ADDR_VAR 0 11
34730: PUSH
34731: DOUBLE
34732: LD_VAR 0 7
34736: DEC
34737: ST_TO_ADDR
34738: LD_VAR 0 9
34742: PUSH
34743: FOR_TO
34744: IFFALSE 34861
// for _y = min_y to max_y do
34746: LD_ADDR_VAR 0 12
34750: PUSH
34751: DOUBLE
34752: LD_VAR 0 8
34756: DEC
34757: ST_TO_ADDR
34758: LD_VAR 0 10
34762: PUSH
34763: FOR_TO
34764: IFFALSE 34857
// begin if not ValidHex ( _x , _y ) then
34766: LD_VAR 0 11
34770: PPUSH
34771: LD_VAR 0 12
34775: PPUSH
34776: CALL_OW 488
34780: NOT
34781: IFFALSE 34785
// continue ;
34783: GO 34763
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34785: LD_VAR 0 11
34789: PPUSH
34790: LD_VAR 0 12
34794: PPUSH
34795: CALL_OW 351
34799: PUSH
34800: LD_VAR 0 11
34804: PPUSH
34805: LD_VAR 0 12
34809: PPUSH
34810: CALL_OW 554
34814: AND
34815: IFFALSE 34855
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34817: LD_ADDR_VAR 0 13
34821: PUSH
34822: LD_VAR 0 13
34826: PPUSH
34827: LD_VAR 0 13
34831: PUSH
34832: LD_INT 1
34834: PLUS
34835: PPUSH
34836: LD_VAR 0 11
34840: PUSH
34841: LD_VAR 0 12
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PPUSH
34850: CALL_OW 2
34854: ST_TO_ADDR
// end ;
34855: GO 34763
34857: POP
34858: POP
34859: GO 34743
34861: POP
34862: POP
// if not list then
34863: LD_VAR 0 13
34867: NOT
34868: IFFALSE 34872
// exit ;
34870: GO 34943
// for i in list do
34872: LD_ADDR_VAR 0 6
34876: PUSH
34877: LD_VAR 0 13
34881: PUSH
34882: FOR_IN
34883: IFFALSE 34941
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34885: LD_VAR 0 1
34889: PPUSH
34890: LD_STRING M
34892: PUSH
34893: LD_VAR 0 6
34897: PUSH
34898: LD_INT 1
34900: ARRAY
34901: PUSH
34902: LD_VAR 0 6
34906: PUSH
34907: LD_INT 2
34909: ARRAY
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: PUSH
34932: EMPTY
34933: LIST
34934: PPUSH
34935: CALL_OW 447
34939: GO 34882
34941: POP
34942: POP
// end ;
34943: LD_VAR 0 5
34947: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
34948: LD_INT 0
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
34960: LD_VAR 0 1
34964: PPUSH
34965: CALL_OW 302
34969: NOT
34970: PUSH
34971: LD_VAR 0 2
34975: PPUSH
34976: LD_VAR 0 3
34980: PPUSH
34981: CALL_OW 488
34985: NOT
34986: OR
34987: PUSH
34988: LD_VAR 0 4
34992: NOT
34993: OR
34994: IFFALSE 34998
// exit ;
34996: GO 35511
// list := [ ] ;
34998: LD_ADDR_VAR 0 13
35002: PUSH
35003: EMPTY
35004: ST_TO_ADDR
// if x - r < 0 then
35005: LD_VAR 0 2
35009: PUSH
35010: LD_VAR 0 4
35014: MINUS
35015: PUSH
35016: LD_INT 0
35018: LESS
35019: IFFALSE 35031
// min_x := 0 else
35021: LD_ADDR_VAR 0 7
35025: PUSH
35026: LD_INT 0
35028: ST_TO_ADDR
35029: GO 35047
// min_x := x - r ;
35031: LD_ADDR_VAR 0 7
35035: PUSH
35036: LD_VAR 0 2
35040: PUSH
35041: LD_VAR 0 4
35045: MINUS
35046: ST_TO_ADDR
// if y - r < 0 then
35047: LD_VAR 0 3
35051: PUSH
35052: LD_VAR 0 4
35056: MINUS
35057: PUSH
35058: LD_INT 0
35060: LESS
35061: IFFALSE 35073
// min_y := 0 else
35063: LD_ADDR_VAR 0 8
35067: PUSH
35068: LD_INT 0
35070: ST_TO_ADDR
35071: GO 35089
// min_y := y - r ;
35073: LD_ADDR_VAR 0 8
35077: PUSH
35078: LD_VAR 0 3
35082: PUSH
35083: LD_VAR 0 4
35087: MINUS
35088: ST_TO_ADDR
// max_x := x + r ;
35089: LD_ADDR_VAR 0 9
35093: PUSH
35094: LD_VAR 0 2
35098: PUSH
35099: LD_VAR 0 4
35103: PLUS
35104: ST_TO_ADDR
// max_y := y + r ;
35105: LD_ADDR_VAR 0 10
35109: PUSH
35110: LD_VAR 0 3
35114: PUSH
35115: LD_VAR 0 4
35119: PLUS
35120: ST_TO_ADDR
// for _x = min_x to max_x do
35121: LD_ADDR_VAR 0 11
35125: PUSH
35126: DOUBLE
35127: LD_VAR 0 7
35131: DEC
35132: ST_TO_ADDR
35133: LD_VAR 0 9
35137: PUSH
35138: FOR_TO
35139: IFFALSE 35256
// for _y = min_y to max_y do
35141: LD_ADDR_VAR 0 12
35145: PUSH
35146: DOUBLE
35147: LD_VAR 0 8
35151: DEC
35152: ST_TO_ADDR
35153: LD_VAR 0 10
35157: PUSH
35158: FOR_TO
35159: IFFALSE 35252
// begin if not ValidHex ( _x , _y ) then
35161: LD_VAR 0 11
35165: PPUSH
35166: LD_VAR 0 12
35170: PPUSH
35171: CALL_OW 488
35175: NOT
35176: IFFALSE 35180
// continue ;
35178: GO 35158
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35180: LD_VAR 0 11
35184: PPUSH
35185: LD_VAR 0 12
35189: PPUSH
35190: CALL_OW 351
35194: PUSH
35195: LD_VAR 0 11
35199: PPUSH
35200: LD_VAR 0 12
35204: PPUSH
35205: CALL_OW 554
35209: AND
35210: IFFALSE 35250
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35212: LD_ADDR_VAR 0 13
35216: PUSH
35217: LD_VAR 0 13
35221: PPUSH
35222: LD_VAR 0 13
35226: PUSH
35227: LD_INT 1
35229: PLUS
35230: PPUSH
35231: LD_VAR 0 11
35235: PUSH
35236: LD_VAR 0 12
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PPUSH
35245: CALL_OW 2
35249: ST_TO_ADDR
// end ;
35250: GO 35158
35252: POP
35253: POP
35254: GO 35138
35256: POP
35257: POP
// if not list then
35258: LD_VAR 0 13
35262: NOT
35263: IFFALSE 35267
// exit ;
35265: GO 35511
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35267: LD_ADDR_VAR 0 13
35271: PUSH
35272: LD_VAR 0 1
35276: PPUSH
35277: LD_VAR 0 13
35281: PPUSH
35282: LD_INT 1
35284: PPUSH
35285: LD_INT 1
35287: PPUSH
35288: CALL 44124 0 4
35292: ST_TO_ADDR
// ComStop ( flame ) ;
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 141
// for i in list do
35302: LD_ADDR_VAR 0 6
35306: PUSH
35307: LD_VAR 0 13
35311: PUSH
35312: FOR_IN
35313: IFFALSE 35344
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35315: LD_VAR 0 1
35319: PPUSH
35320: LD_VAR 0 6
35324: PUSH
35325: LD_INT 1
35327: ARRAY
35328: PPUSH
35329: LD_VAR 0 6
35333: PUSH
35334: LD_INT 2
35336: ARRAY
35337: PPUSH
35338: CALL_OW 176
35342: GO 35312
35344: POP
35345: POP
// repeat wait ( 0 0$1 ) ;
35346: LD_INT 35
35348: PPUSH
35349: CALL_OW 67
// task := GetTaskList ( flame ) ;
35353: LD_ADDR_VAR 0 14
35357: PUSH
35358: LD_VAR 0 1
35362: PPUSH
35363: CALL_OW 437
35367: ST_TO_ADDR
// if not task then
35368: LD_VAR 0 14
35372: NOT
35373: IFFALSE 35377
// exit ;
35375: GO 35511
// if task [ 1 ] [ 1 ] <> | then
35377: LD_VAR 0 14
35381: PUSH
35382: LD_INT 1
35384: ARRAY
35385: PUSH
35386: LD_INT 1
35388: ARRAY
35389: PUSH
35390: LD_STRING |
35392: NONEQUAL
35393: IFFALSE 35397
// exit ;
35395: GO 35511
// _x := task [ 1 ] [ 2 ] ;
35397: LD_ADDR_VAR 0 11
35401: PUSH
35402: LD_VAR 0 14
35406: PUSH
35407: LD_INT 1
35409: ARRAY
35410: PUSH
35411: LD_INT 2
35413: ARRAY
35414: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
35415: LD_ADDR_VAR 0 12
35419: PUSH
35420: LD_VAR 0 14
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: PUSH
35429: LD_INT 3
35431: ARRAY
35432: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
35433: LD_VAR 0 11
35437: PPUSH
35438: LD_VAR 0 12
35442: PPUSH
35443: CALL_OW 351
35447: NOT
35448: PUSH
35449: LD_VAR 0 11
35453: PPUSH
35454: LD_VAR 0 12
35458: PPUSH
35459: CALL_OW 554
35463: NOT
35464: OR
35465: IFFALSE 35499
// begin task := Delete ( task , 1 ) ;
35467: LD_ADDR_VAR 0 14
35471: PUSH
35472: LD_VAR 0 14
35476: PPUSH
35477: LD_INT 1
35479: PPUSH
35480: CALL_OW 3
35484: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
35485: LD_VAR 0 1
35489: PPUSH
35490: LD_VAR 0 14
35494: PPUSH
35495: CALL_OW 446
// end ; until not HasTask ( flame ) ;
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 314
35508: NOT
35509: IFFALSE 35346
// end ;
35511: LD_VAR 0 5
35515: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35516: LD_EXP 115
35520: NOT
35521: IFFALSE 35571
35523: GO 35525
35525: DISABLE
// begin initHack := true ;
35526: LD_ADDR_EXP 115
35530: PUSH
35531: LD_INT 1
35533: ST_TO_ADDR
// hackTanks := [ ] ;
35534: LD_ADDR_EXP 116
35538: PUSH
35539: EMPTY
35540: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35541: LD_ADDR_EXP 117
35545: PUSH
35546: EMPTY
35547: ST_TO_ADDR
// hackLimit := 3 ;
35548: LD_ADDR_EXP 118
35552: PUSH
35553: LD_INT 3
35555: ST_TO_ADDR
// hackDist := 12 ;
35556: LD_ADDR_EXP 119
35560: PUSH
35561: LD_INT 12
35563: ST_TO_ADDR
// hackCounter := [ ] ;
35564: LD_ADDR_EXP 120
35568: PUSH
35569: EMPTY
35570: ST_TO_ADDR
// end ;
35571: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35572: LD_EXP 115
35576: PUSH
35577: LD_INT 34
35579: PUSH
35580: LD_INT 99
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PPUSH
35587: CALL_OW 69
35591: AND
35592: IFFALSE 35845
35594: GO 35596
35596: DISABLE
35597: LD_INT 0
35599: PPUSH
35600: PPUSH
// begin enable ;
35601: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35602: LD_ADDR_VAR 0 1
35606: PUSH
35607: LD_INT 34
35609: PUSH
35610: LD_INT 99
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PPUSH
35617: CALL_OW 69
35621: PUSH
35622: FOR_IN
35623: IFFALSE 35843
// begin if not i in hackTanks then
35625: LD_VAR 0 1
35629: PUSH
35630: LD_EXP 116
35634: IN
35635: NOT
35636: IFFALSE 35719
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35638: LD_ADDR_EXP 116
35642: PUSH
35643: LD_EXP 116
35647: PPUSH
35648: LD_EXP 116
35652: PUSH
35653: LD_INT 1
35655: PLUS
35656: PPUSH
35657: LD_VAR 0 1
35661: PPUSH
35662: CALL_OW 1
35666: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35667: LD_ADDR_EXP 117
35671: PUSH
35672: LD_EXP 117
35676: PPUSH
35677: LD_EXP 117
35681: PUSH
35682: LD_INT 1
35684: PLUS
35685: PPUSH
35686: EMPTY
35687: PPUSH
35688: CALL_OW 1
35692: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35693: LD_ADDR_EXP 120
35697: PUSH
35698: LD_EXP 120
35702: PPUSH
35703: LD_EXP 120
35707: PUSH
35708: LD_INT 1
35710: PLUS
35711: PPUSH
35712: EMPTY
35713: PPUSH
35714: CALL_OW 1
35718: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35719: LD_VAR 0 1
35723: PPUSH
35724: CALL_OW 302
35728: NOT
35729: IFFALSE 35742
// begin HackUnlinkAll ( i ) ;
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL 35848 0 1
// continue ;
35740: GO 35622
// end ; HackCheckCapturedStatus ( i ) ;
35742: LD_VAR 0 1
35746: PPUSH
35747: CALL 36291 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35751: LD_ADDR_VAR 0 2
35755: PUSH
35756: LD_INT 81
35758: PUSH
35759: LD_VAR 0 1
35763: PPUSH
35764: CALL_OW 255
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 33
35775: PUSH
35776: LD_INT 3
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 91
35785: PUSH
35786: LD_VAR 0 1
35790: PUSH
35791: LD_EXP 119
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 50
35803: PUSH
35804: EMPTY
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: PPUSH
35813: CALL_OW 69
35817: ST_TO_ADDR
// if not tmp then
35818: LD_VAR 0 2
35822: NOT
35823: IFFALSE 35827
// continue ;
35825: GO 35622
// HackLink ( i , tmp ) ;
35827: LD_VAR 0 1
35831: PPUSH
35832: LD_VAR 0 2
35836: PPUSH
35837: CALL 35984 0 2
// end ;
35841: GO 35622
35843: POP
35844: POP
// end ;
35845: PPOPN 2
35847: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35848: LD_INT 0
35850: PPUSH
35851: PPUSH
35852: PPUSH
// if not hack in hackTanks then
35853: LD_VAR 0 1
35857: PUSH
35858: LD_EXP 116
35862: IN
35863: NOT
35864: IFFALSE 35868
// exit ;
35866: GO 35979
// index := GetElementIndex ( hackTanks , hack ) ;
35868: LD_ADDR_VAR 0 4
35872: PUSH
35873: LD_EXP 116
35877: PPUSH
35878: LD_VAR 0 1
35882: PPUSH
35883: CALL 43421 0 2
35887: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35888: LD_EXP 117
35892: PUSH
35893: LD_VAR 0 4
35897: ARRAY
35898: IFFALSE 35979
// begin for i in hackTanksCaptured [ index ] do
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_EXP 117
35909: PUSH
35910: LD_VAR 0 4
35914: ARRAY
35915: PUSH
35916: FOR_IN
35917: IFFALSE 35943
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35919: LD_VAR 0 3
35923: PUSH
35924: LD_INT 1
35926: ARRAY
35927: PPUSH
35928: LD_VAR 0 3
35932: PUSH
35933: LD_INT 2
35935: ARRAY
35936: PPUSH
35937: CALL_OW 235
35941: GO 35916
35943: POP
35944: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35945: LD_ADDR_EXP 117
35949: PUSH
35950: LD_EXP 117
35954: PPUSH
35955: LD_VAR 0 4
35959: PPUSH
35960: EMPTY
35961: PPUSH
35962: CALL_OW 1
35966: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35967: LD_VAR 0 1
35971: PPUSH
35972: LD_INT 0
35974: PPUSH
35975: CALL_OW 505
// end ; end ;
35979: LD_VAR 0 2
35983: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35984: LD_INT 0
35986: PPUSH
35987: PPUSH
35988: PPUSH
// if not hack in hackTanks or not vehicles then
35989: LD_VAR 0 1
35993: PUSH
35994: LD_EXP 116
35998: IN
35999: NOT
36000: PUSH
36001: LD_VAR 0 2
36005: NOT
36006: OR
36007: IFFALSE 36011
// exit ;
36009: GO 36286
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36011: LD_ADDR_VAR 0 2
36015: PUSH
36016: LD_VAR 0 1
36020: PPUSH
36021: LD_VAR 0 2
36025: PPUSH
36026: LD_INT 1
36028: PPUSH
36029: LD_INT 1
36031: PPUSH
36032: CALL 44071 0 4
36036: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36037: LD_ADDR_VAR 0 5
36041: PUSH
36042: LD_EXP 116
36046: PPUSH
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL 43421 0 2
36056: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36057: LD_EXP 117
36061: PUSH
36062: LD_VAR 0 5
36066: ARRAY
36067: PUSH
36068: LD_EXP 118
36072: LESS
36073: IFFALSE 36262
// begin for i := 1 to vehicles do
36075: LD_ADDR_VAR 0 4
36079: PUSH
36080: DOUBLE
36081: LD_INT 1
36083: DEC
36084: ST_TO_ADDR
36085: LD_VAR 0 2
36089: PUSH
36090: FOR_TO
36091: IFFALSE 36260
// begin if hackTanksCaptured [ index ] = hackLimit then
36093: LD_EXP 117
36097: PUSH
36098: LD_VAR 0 5
36102: ARRAY
36103: PUSH
36104: LD_EXP 118
36108: EQUAL
36109: IFFALSE 36113
// break ;
36111: GO 36260
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36113: LD_ADDR_EXP 120
36117: PUSH
36118: LD_EXP 120
36122: PPUSH
36123: LD_VAR 0 5
36127: PPUSH
36128: LD_EXP 120
36132: PUSH
36133: LD_VAR 0 5
36137: ARRAY
36138: PUSH
36139: LD_INT 1
36141: PLUS
36142: PPUSH
36143: CALL_OW 1
36147: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36148: LD_ADDR_EXP 117
36152: PUSH
36153: LD_EXP 117
36157: PPUSH
36158: LD_VAR 0 5
36162: PUSH
36163: LD_EXP 117
36167: PUSH
36168: LD_VAR 0 5
36172: ARRAY
36173: PUSH
36174: LD_INT 1
36176: PLUS
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PPUSH
36182: LD_VAR 0 2
36186: PUSH
36187: LD_VAR 0 4
36191: ARRAY
36192: PUSH
36193: LD_VAR 0 2
36197: PUSH
36198: LD_VAR 0 4
36202: ARRAY
36203: PPUSH
36204: CALL_OW 255
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PPUSH
36213: CALL 43636 0 3
36217: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36218: LD_VAR 0 2
36222: PUSH
36223: LD_VAR 0 4
36227: ARRAY
36228: PPUSH
36229: LD_VAR 0 1
36233: PPUSH
36234: CALL_OW 255
36238: PPUSH
36239: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36243: LD_VAR 0 2
36247: PUSH
36248: LD_VAR 0 4
36252: ARRAY
36253: PPUSH
36254: CALL_OW 141
// end ;
36258: GO 36090
36260: POP
36261: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36262: LD_VAR 0 1
36266: PPUSH
36267: LD_EXP 117
36271: PUSH
36272: LD_VAR 0 5
36276: ARRAY
36277: PUSH
36278: LD_INT 0
36280: PLUS
36281: PPUSH
36282: CALL_OW 505
// end ;
36286: LD_VAR 0 3
36290: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36291: LD_INT 0
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
// if not hack in hackTanks then
36297: LD_VAR 0 1
36301: PUSH
36302: LD_EXP 116
36306: IN
36307: NOT
36308: IFFALSE 36312
// exit ;
36310: GO 36552
// index := GetElementIndex ( hackTanks , hack ) ;
36312: LD_ADDR_VAR 0 4
36316: PUSH
36317: LD_EXP 116
36321: PPUSH
36322: LD_VAR 0 1
36326: PPUSH
36327: CALL 43421 0 2
36331: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36332: LD_ADDR_VAR 0 3
36336: PUSH
36337: DOUBLE
36338: LD_EXP 117
36342: PUSH
36343: LD_VAR 0 4
36347: ARRAY
36348: INC
36349: ST_TO_ADDR
36350: LD_INT 1
36352: PUSH
36353: FOR_DOWNTO
36354: IFFALSE 36526
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36356: LD_ADDR_VAR 0 5
36360: PUSH
36361: LD_EXP 117
36365: PUSH
36366: LD_VAR 0 4
36370: ARRAY
36371: PUSH
36372: LD_VAR 0 3
36376: ARRAY
36377: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36378: LD_VAR 0 5
36382: PUSH
36383: LD_INT 1
36385: ARRAY
36386: PPUSH
36387: CALL_OW 302
36391: NOT
36392: PUSH
36393: LD_VAR 0 5
36397: PUSH
36398: LD_INT 1
36400: ARRAY
36401: PPUSH
36402: CALL_OW 255
36406: PUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 255
36416: NONEQUAL
36417: OR
36418: IFFALSE 36524
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36420: LD_VAR 0 5
36424: PUSH
36425: LD_INT 1
36427: ARRAY
36428: PPUSH
36429: CALL_OW 305
36433: PUSH
36434: LD_VAR 0 5
36438: PUSH
36439: LD_INT 1
36441: ARRAY
36442: PPUSH
36443: CALL_OW 255
36447: PUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: CALL_OW 255
36457: EQUAL
36458: AND
36459: IFFALSE 36483
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36461: LD_VAR 0 5
36465: PUSH
36466: LD_INT 1
36468: ARRAY
36469: PPUSH
36470: LD_VAR 0 5
36474: PUSH
36475: LD_INT 2
36477: ARRAY
36478: PPUSH
36479: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36483: LD_ADDR_EXP 117
36487: PUSH
36488: LD_EXP 117
36492: PPUSH
36493: LD_VAR 0 4
36497: PPUSH
36498: LD_EXP 117
36502: PUSH
36503: LD_VAR 0 4
36507: ARRAY
36508: PPUSH
36509: LD_VAR 0 3
36513: PPUSH
36514: CALL_OW 3
36518: PPUSH
36519: CALL_OW 1
36523: ST_TO_ADDR
// end ; end ;
36524: GO 36353
36526: POP
36527: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36528: LD_VAR 0 1
36532: PPUSH
36533: LD_EXP 117
36537: PUSH
36538: LD_VAR 0 4
36542: ARRAY
36543: PUSH
36544: LD_INT 0
36546: PLUS
36547: PPUSH
36548: CALL_OW 505
// end ;
36552: LD_VAR 0 2
36556: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36557: LD_INT 0
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
// if not hack in hackTanks then
36563: LD_VAR 0 1
36567: PUSH
36568: LD_EXP 116
36572: IN
36573: NOT
36574: IFFALSE 36578
// exit ;
36576: GO 36663
// index := GetElementIndex ( hackTanks , hack ) ;
36578: LD_ADDR_VAR 0 5
36582: PUSH
36583: LD_EXP 116
36587: PPUSH
36588: LD_VAR 0 1
36592: PPUSH
36593: CALL 43421 0 2
36597: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36598: LD_ADDR_VAR 0 4
36602: PUSH
36603: DOUBLE
36604: LD_INT 1
36606: DEC
36607: ST_TO_ADDR
36608: LD_EXP 117
36612: PUSH
36613: LD_VAR 0 5
36617: ARRAY
36618: PUSH
36619: FOR_TO
36620: IFFALSE 36661
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36622: LD_EXP 117
36626: PUSH
36627: LD_VAR 0 5
36631: ARRAY
36632: PUSH
36633: LD_VAR 0 4
36637: ARRAY
36638: PUSH
36639: LD_INT 1
36641: ARRAY
36642: PUSH
36643: LD_VAR 0 2
36647: EQUAL
36648: IFFALSE 36659
// KillUnit ( vehicle ) ;
36650: LD_VAR 0 2
36654: PPUSH
36655: CALL_OW 66
36659: GO 36619
36661: POP
36662: POP
// end ;
36663: LD_VAR 0 3
36667: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36668: LD_EXP 121
36672: NOT
36673: IFFALSE 36708
36675: GO 36677
36677: DISABLE
// begin initMiner := true ;
36678: LD_ADDR_EXP 121
36682: PUSH
36683: LD_INT 1
36685: ST_TO_ADDR
// minersList := [ ] ;
36686: LD_ADDR_EXP 122
36690: PUSH
36691: EMPTY
36692: ST_TO_ADDR
// minerMinesList := [ ] ;
36693: LD_ADDR_EXP 123
36697: PUSH
36698: EMPTY
36699: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36700: LD_ADDR_EXP 124
36704: PUSH
36705: LD_INT 5
36707: ST_TO_ADDR
// end ;
36708: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36709: LD_EXP 121
36713: PUSH
36714: LD_INT 34
36716: PUSH
36717: LD_INT 81
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PPUSH
36724: CALL_OW 69
36728: AND
36729: IFFALSE 37190
36731: GO 36733
36733: DISABLE
36734: LD_INT 0
36736: PPUSH
36737: PPUSH
36738: PPUSH
36739: PPUSH
// begin enable ;
36740: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36741: LD_ADDR_VAR 0 1
36745: PUSH
36746: LD_INT 34
36748: PUSH
36749: LD_INT 81
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PPUSH
36756: CALL_OW 69
36760: PUSH
36761: FOR_IN
36762: IFFALSE 36834
// begin if not i in minersList then
36764: LD_VAR 0 1
36768: PUSH
36769: LD_EXP 122
36773: IN
36774: NOT
36775: IFFALSE 36832
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36777: LD_ADDR_EXP 122
36781: PUSH
36782: LD_EXP 122
36786: PPUSH
36787: LD_EXP 122
36791: PUSH
36792: LD_INT 1
36794: PLUS
36795: PPUSH
36796: LD_VAR 0 1
36800: PPUSH
36801: CALL_OW 1
36805: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36806: LD_ADDR_EXP 123
36810: PUSH
36811: LD_EXP 123
36815: PPUSH
36816: LD_EXP 123
36820: PUSH
36821: LD_INT 1
36823: PLUS
36824: PPUSH
36825: EMPTY
36826: PPUSH
36827: CALL_OW 1
36831: ST_TO_ADDR
// end end ;
36832: GO 36761
36834: POP
36835: POP
// for i := minerMinesList downto 1 do
36836: LD_ADDR_VAR 0 1
36840: PUSH
36841: DOUBLE
36842: LD_EXP 123
36846: INC
36847: ST_TO_ADDR
36848: LD_INT 1
36850: PUSH
36851: FOR_DOWNTO
36852: IFFALSE 37188
// begin if IsLive ( minersList [ i ] ) then
36854: LD_EXP 122
36858: PUSH
36859: LD_VAR 0 1
36863: ARRAY
36864: PPUSH
36865: CALL_OW 300
36869: IFFALSE 36897
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36871: LD_EXP 122
36875: PUSH
36876: LD_VAR 0 1
36880: ARRAY
36881: PPUSH
36882: LD_EXP 123
36886: PUSH
36887: LD_VAR 0 1
36891: ARRAY
36892: PPUSH
36893: CALL_OW 505
// if not minerMinesList [ i ] then
36897: LD_EXP 123
36901: PUSH
36902: LD_VAR 0 1
36906: ARRAY
36907: NOT
36908: IFFALSE 36912
// continue ;
36910: GO 36851
// for j := minerMinesList [ i ] downto 1 do
36912: LD_ADDR_VAR 0 2
36916: PUSH
36917: DOUBLE
36918: LD_EXP 123
36922: PUSH
36923: LD_VAR 0 1
36927: ARRAY
36928: INC
36929: ST_TO_ADDR
36930: LD_INT 1
36932: PUSH
36933: FOR_DOWNTO
36934: IFFALSE 37184
// begin side := GetSide ( minersList [ i ] ) ;
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_EXP 122
36945: PUSH
36946: LD_VAR 0 1
36950: ARRAY
36951: PPUSH
36952: CALL_OW 255
36956: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36957: LD_ADDR_VAR 0 4
36961: PUSH
36962: LD_EXP 123
36966: PUSH
36967: LD_VAR 0 1
36971: ARRAY
36972: PUSH
36973: LD_VAR 0 2
36977: ARRAY
36978: PUSH
36979: LD_INT 1
36981: ARRAY
36982: PPUSH
36983: LD_EXP 123
36987: PUSH
36988: LD_VAR 0 1
36992: ARRAY
36993: PUSH
36994: LD_VAR 0 2
36998: ARRAY
36999: PUSH
37000: LD_INT 2
37002: ARRAY
37003: PPUSH
37004: CALL_OW 428
37008: ST_TO_ADDR
// if not tmp then
37009: LD_VAR 0 4
37013: NOT
37014: IFFALSE 37018
// continue ;
37016: GO 36933
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37018: LD_VAR 0 4
37022: PUSH
37023: LD_INT 81
37025: PUSH
37026: LD_VAR 0 3
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PPUSH
37035: CALL_OW 69
37039: IN
37040: PUSH
37041: LD_EXP 123
37045: PUSH
37046: LD_VAR 0 1
37050: ARRAY
37051: PUSH
37052: LD_VAR 0 2
37056: ARRAY
37057: PUSH
37058: LD_INT 1
37060: ARRAY
37061: PPUSH
37062: LD_EXP 123
37066: PUSH
37067: LD_VAR 0 1
37071: ARRAY
37072: PUSH
37073: LD_VAR 0 2
37077: ARRAY
37078: PUSH
37079: LD_INT 2
37081: ARRAY
37082: PPUSH
37083: CALL_OW 458
37087: AND
37088: IFFALSE 37182
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37090: LD_EXP 123
37094: PUSH
37095: LD_VAR 0 1
37099: ARRAY
37100: PUSH
37101: LD_VAR 0 2
37105: ARRAY
37106: PUSH
37107: LD_INT 1
37109: ARRAY
37110: PPUSH
37111: LD_EXP 123
37115: PUSH
37116: LD_VAR 0 1
37120: ARRAY
37121: PUSH
37122: LD_VAR 0 2
37126: ARRAY
37127: PUSH
37128: LD_INT 2
37130: ARRAY
37131: PPUSH
37132: LD_VAR 0 3
37136: PPUSH
37137: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37141: LD_ADDR_EXP 123
37145: PUSH
37146: LD_EXP 123
37150: PPUSH
37151: LD_VAR 0 1
37155: PPUSH
37156: LD_EXP 123
37160: PUSH
37161: LD_VAR 0 1
37165: ARRAY
37166: PPUSH
37167: LD_VAR 0 2
37171: PPUSH
37172: CALL_OW 3
37176: PPUSH
37177: CALL_OW 1
37181: ST_TO_ADDR
// end ; end ;
37182: GO 36933
37184: POP
37185: POP
// end ;
37186: GO 36851
37188: POP
37189: POP
// end ;
37190: PPOPN 4
37192: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37193: LD_INT 0
37195: PPUSH
37196: PPUSH
// result := false ;
37197: LD_ADDR_VAR 0 4
37201: PUSH
37202: LD_INT 0
37204: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37205: LD_VAR 0 1
37209: PPUSH
37210: CALL_OW 264
37214: PUSH
37215: LD_INT 81
37217: EQUAL
37218: NOT
37219: IFFALSE 37223
// exit ;
37221: GO 37463
// index := GetElementIndex ( minersList , unit ) ;
37223: LD_ADDR_VAR 0 5
37227: PUSH
37228: LD_EXP 122
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL 43421 0 2
37242: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37243: LD_EXP 123
37247: PUSH
37248: LD_VAR 0 5
37252: ARRAY
37253: PUSH
37254: LD_EXP 124
37258: GREATEREQUAL
37259: IFFALSE 37263
// exit ;
37261: GO 37463
// ComMoveXY ( unit , x , y ) ;
37263: LD_VAR 0 1
37267: PPUSH
37268: LD_VAR 0 2
37272: PPUSH
37273: LD_VAR 0 3
37277: PPUSH
37278: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37282: LD_INT 35
37284: PPUSH
37285: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37289: LD_VAR 0 1
37293: PPUSH
37294: LD_VAR 0 2
37298: PPUSH
37299: LD_VAR 0 3
37303: PPUSH
37304: CALL 75162 0 3
37308: NOT
37309: PUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: CALL_OW 314
37319: AND
37320: IFFALSE 37324
// exit ;
37322: GO 37463
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37324: LD_VAR 0 2
37328: PPUSH
37329: LD_VAR 0 3
37333: PPUSH
37334: CALL_OW 428
37338: PUSH
37339: LD_VAR 0 1
37343: EQUAL
37344: PUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 314
37354: NOT
37355: AND
37356: IFFALSE 37282
// PlaySoundXY ( x , y , PlantMine ) ;
37358: LD_VAR 0 2
37362: PPUSH
37363: LD_VAR 0 3
37367: PPUSH
37368: LD_STRING PlantMine
37370: PPUSH
37371: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37375: LD_VAR 0 2
37379: PPUSH
37380: LD_VAR 0 3
37384: PPUSH
37385: LD_VAR 0 1
37389: PPUSH
37390: CALL_OW 255
37394: PPUSH
37395: LD_INT 0
37397: PPUSH
37398: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37402: LD_ADDR_EXP 123
37406: PUSH
37407: LD_EXP 123
37411: PPUSH
37412: LD_VAR 0 5
37416: PUSH
37417: LD_EXP 123
37421: PUSH
37422: LD_VAR 0 5
37426: ARRAY
37427: PUSH
37428: LD_INT 1
37430: PLUS
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PPUSH
37436: LD_VAR 0 2
37440: PUSH
37441: LD_VAR 0 3
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PPUSH
37450: CALL 43636 0 3
37454: ST_TO_ADDR
// result := true ;
37455: LD_ADDR_VAR 0 4
37459: PUSH
37460: LD_INT 1
37462: ST_TO_ADDR
// end ;
37463: LD_VAR 0 4
37467: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37468: LD_INT 0
37470: PPUSH
37471: PPUSH
37472: PPUSH
// if not unit in minersList then
37473: LD_VAR 0 1
37477: PUSH
37478: LD_EXP 122
37482: IN
37483: NOT
37484: IFFALSE 37488
// exit ;
37486: GO 37880
// index := GetElementIndex ( minersList , unit ) ;
37488: LD_ADDR_VAR 0 6
37492: PUSH
37493: LD_EXP 122
37497: PPUSH
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL 43421 0 2
37507: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37508: LD_ADDR_VAR 0 5
37512: PUSH
37513: DOUBLE
37514: LD_EXP 123
37518: PUSH
37519: LD_VAR 0 6
37523: ARRAY
37524: INC
37525: ST_TO_ADDR
37526: LD_INT 1
37528: PUSH
37529: FOR_DOWNTO
37530: IFFALSE 37691
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37532: LD_EXP 123
37536: PUSH
37537: LD_VAR 0 6
37541: ARRAY
37542: PUSH
37543: LD_VAR 0 5
37547: ARRAY
37548: PUSH
37549: LD_INT 1
37551: ARRAY
37552: PUSH
37553: LD_VAR 0 2
37557: EQUAL
37558: PUSH
37559: LD_EXP 123
37563: PUSH
37564: LD_VAR 0 6
37568: ARRAY
37569: PUSH
37570: LD_VAR 0 5
37574: ARRAY
37575: PUSH
37576: LD_INT 2
37578: ARRAY
37579: PUSH
37580: LD_VAR 0 3
37584: EQUAL
37585: AND
37586: IFFALSE 37689
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37588: LD_EXP 123
37592: PUSH
37593: LD_VAR 0 6
37597: ARRAY
37598: PUSH
37599: LD_VAR 0 5
37603: ARRAY
37604: PUSH
37605: LD_INT 1
37607: ARRAY
37608: PPUSH
37609: LD_EXP 123
37613: PUSH
37614: LD_VAR 0 6
37618: ARRAY
37619: PUSH
37620: LD_VAR 0 5
37624: ARRAY
37625: PUSH
37626: LD_INT 2
37628: ARRAY
37629: PPUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 255
37639: PPUSH
37640: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37644: LD_ADDR_EXP 123
37648: PUSH
37649: LD_EXP 123
37653: PPUSH
37654: LD_VAR 0 6
37658: PPUSH
37659: LD_EXP 123
37663: PUSH
37664: LD_VAR 0 6
37668: ARRAY
37669: PPUSH
37670: LD_VAR 0 5
37674: PPUSH
37675: CALL_OW 3
37679: PPUSH
37680: CALL_OW 1
37684: ST_TO_ADDR
// exit ;
37685: POP
37686: POP
37687: GO 37880
// end ; end ;
37689: GO 37529
37691: POP
37692: POP
// for i := minerMinesList [ index ] downto 1 do
37693: LD_ADDR_VAR 0 5
37697: PUSH
37698: DOUBLE
37699: LD_EXP 123
37703: PUSH
37704: LD_VAR 0 6
37708: ARRAY
37709: INC
37710: ST_TO_ADDR
37711: LD_INT 1
37713: PUSH
37714: FOR_DOWNTO
37715: IFFALSE 37878
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37717: LD_EXP 123
37721: PUSH
37722: LD_VAR 0 6
37726: ARRAY
37727: PUSH
37728: LD_VAR 0 5
37732: ARRAY
37733: PUSH
37734: LD_INT 1
37736: ARRAY
37737: PPUSH
37738: LD_EXP 123
37742: PUSH
37743: LD_VAR 0 6
37747: ARRAY
37748: PUSH
37749: LD_VAR 0 5
37753: ARRAY
37754: PUSH
37755: LD_INT 2
37757: ARRAY
37758: PPUSH
37759: LD_VAR 0 2
37763: PPUSH
37764: LD_VAR 0 3
37768: PPUSH
37769: CALL_OW 298
37773: PUSH
37774: LD_INT 6
37776: LESS
37777: IFFALSE 37876
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37779: LD_EXP 123
37783: PUSH
37784: LD_VAR 0 6
37788: ARRAY
37789: PUSH
37790: LD_VAR 0 5
37794: ARRAY
37795: PUSH
37796: LD_INT 1
37798: ARRAY
37799: PPUSH
37800: LD_EXP 123
37804: PUSH
37805: LD_VAR 0 6
37809: ARRAY
37810: PUSH
37811: LD_VAR 0 5
37815: ARRAY
37816: PUSH
37817: LD_INT 2
37819: ARRAY
37820: PPUSH
37821: LD_VAR 0 1
37825: PPUSH
37826: CALL_OW 255
37830: PPUSH
37831: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37835: LD_ADDR_EXP 123
37839: PUSH
37840: LD_EXP 123
37844: PPUSH
37845: LD_VAR 0 6
37849: PPUSH
37850: LD_EXP 123
37854: PUSH
37855: LD_VAR 0 6
37859: ARRAY
37860: PPUSH
37861: LD_VAR 0 5
37865: PPUSH
37866: CALL_OW 3
37870: PPUSH
37871: CALL_OW 1
37875: ST_TO_ADDR
// end ; end ;
37876: GO 37714
37878: POP
37879: POP
// end ;
37880: LD_VAR 0 4
37884: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37885: LD_INT 0
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37896: LD_VAR 0 1
37900: PPUSH
37901: CALL_OW 264
37905: PUSH
37906: LD_INT 81
37908: EQUAL
37909: NOT
37910: PUSH
37911: LD_VAR 0 1
37915: PUSH
37916: LD_EXP 122
37920: IN
37921: NOT
37922: OR
37923: IFFALSE 37927
// exit ;
37925: GO 38249
// index := GetElementIndex ( minersList , unit ) ;
37927: LD_ADDR_VAR 0 6
37931: PUSH
37932: LD_EXP 122
37936: PPUSH
37937: LD_VAR 0 1
37941: PPUSH
37942: CALL 43421 0 2
37946: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37947: LD_ADDR_VAR 0 8
37951: PUSH
37952: LD_EXP 124
37956: PUSH
37957: LD_EXP 123
37961: PUSH
37962: LD_VAR 0 6
37966: ARRAY
37967: MINUS
37968: ST_TO_ADDR
// if not minesFreeAmount then
37969: LD_VAR 0 8
37973: NOT
37974: IFFALSE 37978
// exit ;
37976: GO 38249
// tmp := [ ] ;
37978: LD_ADDR_VAR 0 7
37982: PUSH
37983: EMPTY
37984: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37985: LD_ADDR_VAR 0 5
37989: PUSH
37990: DOUBLE
37991: LD_INT 1
37993: DEC
37994: ST_TO_ADDR
37995: LD_VAR 0 8
37999: PUSH
38000: FOR_TO
38001: IFFALSE 38196
// begin _d := rand ( 0 , 5 ) ;
38003: LD_ADDR_VAR 0 11
38007: PUSH
38008: LD_INT 0
38010: PPUSH
38011: LD_INT 5
38013: PPUSH
38014: CALL_OW 12
38018: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38019: LD_ADDR_VAR 0 12
38023: PUSH
38024: LD_INT 2
38026: PPUSH
38027: LD_INT 6
38029: PPUSH
38030: CALL_OW 12
38034: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38035: LD_ADDR_VAR 0 9
38039: PUSH
38040: LD_VAR 0 2
38044: PPUSH
38045: LD_VAR 0 11
38049: PPUSH
38050: LD_VAR 0 12
38054: PPUSH
38055: CALL_OW 272
38059: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38060: LD_ADDR_VAR 0 10
38064: PUSH
38065: LD_VAR 0 3
38069: PPUSH
38070: LD_VAR 0 11
38074: PPUSH
38075: LD_VAR 0 12
38079: PPUSH
38080: CALL_OW 273
38084: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38085: LD_VAR 0 9
38089: PPUSH
38090: LD_VAR 0 10
38094: PPUSH
38095: CALL_OW 488
38099: PUSH
38100: LD_VAR 0 9
38104: PUSH
38105: LD_VAR 0 10
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_VAR 0 7
38118: IN
38119: NOT
38120: AND
38121: PUSH
38122: LD_VAR 0 9
38126: PPUSH
38127: LD_VAR 0 10
38131: PPUSH
38132: CALL_OW 458
38136: NOT
38137: AND
38138: IFFALSE 38180
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: LD_VAR 0 7
38149: PPUSH
38150: LD_VAR 0 7
38154: PUSH
38155: LD_INT 1
38157: PLUS
38158: PPUSH
38159: LD_VAR 0 9
38163: PUSH
38164: LD_VAR 0 10
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PPUSH
38173: CALL_OW 1
38177: ST_TO_ADDR
38178: GO 38194
// i := i - 1 ;
38180: LD_ADDR_VAR 0 5
38184: PUSH
38185: LD_VAR 0 5
38189: PUSH
38190: LD_INT 1
38192: MINUS
38193: ST_TO_ADDR
// end ;
38194: GO 38000
38196: POP
38197: POP
// for i in tmp do
38198: LD_ADDR_VAR 0 5
38202: PUSH
38203: LD_VAR 0 7
38207: PUSH
38208: FOR_IN
38209: IFFALSE 38247
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38211: LD_VAR 0 1
38215: PPUSH
38216: LD_VAR 0 5
38220: PUSH
38221: LD_INT 1
38223: ARRAY
38224: PPUSH
38225: LD_VAR 0 5
38229: PUSH
38230: LD_INT 2
38232: ARRAY
38233: PPUSH
38234: CALL 37193 0 3
38238: NOT
38239: IFFALSE 38245
// exit ;
38241: POP
38242: POP
38243: GO 38249
38245: GO 38208
38247: POP
38248: POP
// end ;
38249: LD_VAR 0 4
38253: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38254: LD_INT 0
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
38260: PPUSH
38261: PPUSH
38262: PPUSH
// if not GetClass ( unit ) = class_sniper then
38263: LD_VAR 0 1
38267: PPUSH
38268: CALL_OW 257
38272: PUSH
38273: LD_INT 5
38275: EQUAL
38276: NOT
38277: IFFALSE 38281
// exit ;
38279: GO 38669
// dist := 8 ;
38281: LD_ADDR_VAR 0 5
38285: PUSH
38286: LD_INT 8
38288: ST_TO_ADDR
// viewRange := 12 ;
38289: LD_ADDR_VAR 0 7
38293: PUSH
38294: LD_INT 12
38296: ST_TO_ADDR
// side := GetSide ( unit ) ;
38297: LD_ADDR_VAR 0 6
38301: PUSH
38302: LD_VAR 0 1
38306: PPUSH
38307: CALL_OW 255
38311: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38312: LD_INT 61
38314: PPUSH
38315: LD_VAR 0 6
38319: PPUSH
38320: CALL_OW 321
38324: PUSH
38325: LD_INT 2
38327: EQUAL
38328: IFFALSE 38338
// viewRange := 16 ;
38330: LD_ADDR_VAR 0 7
38334: PUSH
38335: LD_INT 16
38337: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38338: LD_VAR 0 1
38342: PPUSH
38343: LD_VAR 0 2
38347: PPUSH
38348: LD_VAR 0 3
38352: PPUSH
38353: CALL_OW 297
38357: PUSH
38358: LD_VAR 0 5
38362: GREATER
38363: IFFALSE 38442
// begin ComMoveXY ( unit , x , y ) ;
38365: LD_VAR 0 1
38369: PPUSH
38370: LD_VAR 0 2
38374: PPUSH
38375: LD_VAR 0 3
38379: PPUSH
38380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38384: LD_INT 35
38386: PPUSH
38387: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38391: LD_VAR 0 1
38395: PPUSH
38396: LD_VAR 0 2
38400: PPUSH
38401: LD_VAR 0 3
38405: PPUSH
38406: CALL 75162 0 3
38410: NOT
38411: IFFALSE 38415
// exit ;
38413: GO 38669
// until GetDistUnitXY ( unit , x , y ) < dist ;
38415: LD_VAR 0 1
38419: PPUSH
38420: LD_VAR 0 2
38424: PPUSH
38425: LD_VAR 0 3
38429: PPUSH
38430: CALL_OW 297
38434: PUSH
38435: LD_VAR 0 5
38439: LESS
38440: IFFALSE 38384
// end ; ComTurnXY ( unit , x , y ) ;
38442: LD_VAR 0 1
38446: PPUSH
38447: LD_VAR 0 2
38451: PPUSH
38452: LD_VAR 0 3
38456: PPUSH
38457: CALL_OW 118
// wait ( 5 ) ;
38461: LD_INT 5
38463: PPUSH
38464: CALL_OW 67
// _d := GetDir ( unit ) ;
38468: LD_ADDR_VAR 0 10
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 254
38482: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38483: LD_ADDR_VAR 0 8
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 250
38497: PPUSH
38498: LD_VAR 0 10
38502: PPUSH
38503: LD_VAR 0 5
38507: PPUSH
38508: CALL_OW 272
38512: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38513: LD_ADDR_VAR 0 9
38517: PUSH
38518: LD_VAR 0 1
38522: PPUSH
38523: CALL_OW 251
38527: PPUSH
38528: LD_VAR 0 10
38532: PPUSH
38533: LD_VAR 0 5
38537: PPUSH
38538: CALL_OW 273
38542: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38543: LD_VAR 0 8
38547: PPUSH
38548: LD_VAR 0 9
38552: PPUSH
38553: CALL_OW 488
38557: NOT
38558: IFFALSE 38562
// exit ;
38560: GO 38669
// ComAnimCustom ( unit , 1 ) ;
38562: LD_VAR 0 1
38566: PPUSH
38567: LD_INT 1
38569: PPUSH
38570: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38574: LD_VAR 0 8
38578: PPUSH
38579: LD_VAR 0 9
38583: PPUSH
38584: LD_VAR 0 6
38588: PPUSH
38589: LD_VAR 0 7
38593: PPUSH
38594: CALL_OW 330
// repeat wait ( 1 ) ;
38598: LD_INT 1
38600: PPUSH
38601: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 316
38614: PUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 314
38624: OR
38625: PUSH
38626: LD_VAR 0 1
38630: PPUSH
38631: CALL_OW 302
38635: NOT
38636: OR
38637: PUSH
38638: LD_VAR 0 1
38642: PPUSH
38643: CALL_OW 301
38647: OR
38648: IFFALSE 38598
// RemoveSeeing ( _x , _y , side ) ;
38650: LD_VAR 0 8
38654: PPUSH
38655: LD_VAR 0 9
38659: PPUSH
38660: LD_VAR 0 6
38664: PPUSH
38665: CALL_OW 331
// end ; end_of_file
38669: LD_VAR 0 4
38673: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38674: LD_INT 0
38676: PPUSH
38677: PPUSH
// if exist_mode then
38678: LD_VAR 0 2
38682: IFFALSE 38707
// unit := CreateCharacter ( prefix & ident ) else
38684: LD_ADDR_VAR 0 5
38688: PUSH
38689: LD_VAR 0 3
38693: PUSH
38694: LD_VAR 0 1
38698: STR
38699: PPUSH
38700: CALL_OW 34
38704: ST_TO_ADDR
38705: GO 38722
// unit := NewCharacter ( ident ) ;
38707: LD_ADDR_VAR 0 5
38711: PUSH
38712: LD_VAR 0 1
38716: PPUSH
38717: CALL_OW 25
38721: ST_TO_ADDR
// result := unit ;
38722: LD_ADDR_VAR 0 4
38726: PUSH
38727: LD_VAR 0 5
38731: ST_TO_ADDR
// end ;
38732: LD_VAR 0 4
38736: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38737: LD_INT 0
38739: PPUSH
38740: PPUSH
// if not side or not nation then
38741: LD_VAR 0 1
38745: NOT
38746: PUSH
38747: LD_VAR 0 2
38751: NOT
38752: OR
38753: IFFALSE 38757
// exit ;
38755: GO 39525
// case nation of nation_american :
38757: LD_VAR 0 2
38761: PUSH
38762: LD_INT 1
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38770
38768: GO 38984
38770: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: LD_INT 35
38778: PUSH
38779: LD_INT 45
38781: PUSH
38782: LD_INT 46
38784: PUSH
38785: LD_INT 47
38787: PUSH
38788: LD_INT 82
38790: PUSH
38791: LD_INT 83
38793: PUSH
38794: LD_INT 84
38796: PUSH
38797: LD_INT 85
38799: PUSH
38800: LD_INT 86
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: LD_INT 6
38811: PUSH
38812: LD_INT 15
38814: PUSH
38815: LD_INT 16
38817: PUSH
38818: LD_INT 7
38820: PUSH
38821: LD_INT 12
38823: PUSH
38824: LD_INT 13
38826: PUSH
38827: LD_INT 10
38829: PUSH
38830: LD_INT 14
38832: PUSH
38833: LD_INT 20
38835: PUSH
38836: LD_INT 21
38838: PUSH
38839: LD_INT 22
38841: PUSH
38842: LD_INT 25
38844: PUSH
38845: LD_INT 32
38847: PUSH
38848: LD_INT 27
38850: PUSH
38851: LD_INT 36
38853: PUSH
38854: LD_INT 69
38856: PUSH
38857: LD_INT 39
38859: PUSH
38860: LD_INT 34
38862: PUSH
38863: LD_INT 40
38865: PUSH
38866: LD_INT 48
38868: PUSH
38869: LD_INT 49
38871: PUSH
38872: LD_INT 50
38874: PUSH
38875: LD_INT 51
38877: PUSH
38878: LD_INT 52
38880: PUSH
38881: LD_INT 53
38883: PUSH
38884: LD_INT 54
38886: PUSH
38887: LD_INT 55
38889: PUSH
38890: LD_INT 56
38892: PUSH
38893: LD_INT 57
38895: PUSH
38896: LD_INT 58
38898: PUSH
38899: LD_INT 59
38901: PUSH
38902: LD_INT 60
38904: PUSH
38905: LD_INT 61
38907: PUSH
38908: LD_INT 62
38910: PUSH
38911: LD_INT 80
38913: PUSH
38914: LD_INT 82
38916: PUSH
38917: LD_INT 83
38919: PUSH
38920: LD_INT 84
38922: PUSH
38923: LD_INT 85
38925: PUSH
38926: LD_INT 86
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: ST_TO_ADDR
38982: GO 39449
38984: LD_INT 2
38986: DOUBLE
38987: EQUAL
38988: IFTRUE 38992
38990: GO 39218
38992: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38993: LD_ADDR_VAR 0 4
38997: PUSH
38998: LD_INT 35
39000: PUSH
39001: LD_INT 45
39003: PUSH
39004: LD_INT 46
39006: PUSH
39007: LD_INT 47
39009: PUSH
39010: LD_INT 82
39012: PUSH
39013: LD_INT 83
39015: PUSH
39016: LD_INT 84
39018: PUSH
39019: LD_INT 85
39021: PUSH
39022: LD_INT 87
39024: PUSH
39025: LD_INT 70
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: LD_INT 11
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: LD_INT 4
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: LD_INT 6
39045: PUSH
39046: LD_INT 15
39048: PUSH
39049: LD_INT 18
39051: PUSH
39052: LD_INT 7
39054: PUSH
39055: LD_INT 17
39057: PUSH
39058: LD_INT 8
39060: PUSH
39061: LD_INT 20
39063: PUSH
39064: LD_INT 21
39066: PUSH
39067: LD_INT 22
39069: PUSH
39070: LD_INT 72
39072: PUSH
39073: LD_INT 26
39075: PUSH
39076: LD_INT 69
39078: PUSH
39079: LD_INT 39
39081: PUSH
39082: LD_INT 40
39084: PUSH
39085: LD_INT 41
39087: PUSH
39088: LD_INT 42
39090: PUSH
39091: LD_INT 43
39093: PUSH
39094: LD_INT 48
39096: PUSH
39097: LD_INT 49
39099: PUSH
39100: LD_INT 50
39102: PUSH
39103: LD_INT 51
39105: PUSH
39106: LD_INT 52
39108: PUSH
39109: LD_INT 53
39111: PUSH
39112: LD_INT 54
39114: PUSH
39115: LD_INT 55
39117: PUSH
39118: LD_INT 56
39120: PUSH
39121: LD_INT 60
39123: PUSH
39124: LD_INT 61
39126: PUSH
39127: LD_INT 62
39129: PUSH
39130: LD_INT 66
39132: PUSH
39133: LD_INT 67
39135: PUSH
39136: LD_INT 68
39138: PUSH
39139: LD_INT 81
39141: PUSH
39142: LD_INT 82
39144: PUSH
39145: LD_INT 83
39147: PUSH
39148: LD_INT 84
39150: PUSH
39151: LD_INT 85
39153: PUSH
39154: LD_INT 87
39156: PUSH
39157: LD_INT 88
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
39216: GO 39449
39218: LD_INT 3
39220: DOUBLE
39221: EQUAL
39222: IFTRUE 39226
39224: GO 39448
39226: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39227: LD_ADDR_VAR 0 4
39231: PUSH
39232: LD_INT 46
39234: PUSH
39235: LD_INT 47
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: LD_INT 82
39246: PUSH
39247: LD_INT 83
39249: PUSH
39250: LD_INT 84
39252: PUSH
39253: LD_INT 85
39255: PUSH
39256: LD_INT 86
39258: PUSH
39259: LD_INT 11
39261: PUSH
39262: LD_INT 9
39264: PUSH
39265: LD_INT 20
39267: PUSH
39268: LD_INT 19
39270: PUSH
39271: LD_INT 21
39273: PUSH
39274: LD_INT 24
39276: PUSH
39277: LD_INT 22
39279: PUSH
39280: LD_INT 25
39282: PUSH
39283: LD_INT 28
39285: PUSH
39286: LD_INT 29
39288: PUSH
39289: LD_INT 30
39291: PUSH
39292: LD_INT 31
39294: PUSH
39295: LD_INT 37
39297: PUSH
39298: LD_INT 38
39300: PUSH
39301: LD_INT 32
39303: PUSH
39304: LD_INT 27
39306: PUSH
39307: LD_INT 33
39309: PUSH
39310: LD_INT 69
39312: PUSH
39313: LD_INT 39
39315: PUSH
39316: LD_INT 34
39318: PUSH
39319: LD_INT 40
39321: PUSH
39322: LD_INT 71
39324: PUSH
39325: LD_INT 23
39327: PUSH
39328: LD_INT 44
39330: PUSH
39331: LD_INT 48
39333: PUSH
39334: LD_INT 49
39336: PUSH
39337: LD_INT 50
39339: PUSH
39340: LD_INT 51
39342: PUSH
39343: LD_INT 52
39345: PUSH
39346: LD_INT 53
39348: PUSH
39349: LD_INT 54
39351: PUSH
39352: LD_INT 55
39354: PUSH
39355: LD_INT 56
39357: PUSH
39358: LD_INT 57
39360: PUSH
39361: LD_INT 58
39363: PUSH
39364: LD_INT 59
39366: PUSH
39367: LD_INT 63
39369: PUSH
39370: LD_INT 64
39372: PUSH
39373: LD_INT 65
39375: PUSH
39376: LD_INT 82
39378: PUSH
39379: LD_INT 83
39381: PUSH
39382: LD_INT 84
39384: PUSH
39385: LD_INT 85
39387: PUSH
39388: LD_INT 86
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: ST_TO_ADDR
39446: GO 39449
39448: POP
// if state > - 1 and state < 3 then
39449: LD_VAR 0 3
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: GREATER
39458: PUSH
39459: LD_VAR 0 3
39463: PUSH
39464: LD_INT 3
39466: LESS
39467: AND
39468: IFFALSE 39525
// for i in result do
39470: LD_ADDR_VAR 0 5
39474: PUSH
39475: LD_VAR 0 4
39479: PUSH
39480: FOR_IN
39481: IFFALSE 39523
// if GetTech ( i , side ) <> state then
39483: LD_VAR 0 5
39487: PPUSH
39488: LD_VAR 0 1
39492: PPUSH
39493: CALL_OW 321
39497: PUSH
39498: LD_VAR 0 3
39502: NONEQUAL
39503: IFFALSE 39521
// result := result diff i ;
39505: LD_ADDR_VAR 0 4
39509: PUSH
39510: LD_VAR 0 4
39514: PUSH
39515: LD_VAR 0 5
39519: DIFF
39520: ST_TO_ADDR
39521: GO 39480
39523: POP
39524: POP
// end ;
39525: LD_VAR 0 4
39529: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39530: LD_INT 0
39532: PPUSH
39533: PPUSH
39534: PPUSH
// result := true ;
39535: LD_ADDR_VAR 0 3
39539: PUSH
39540: LD_INT 1
39542: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39543: LD_ADDR_VAR 0 5
39547: PUSH
39548: LD_VAR 0 2
39552: PPUSH
39553: CALL_OW 480
39557: ST_TO_ADDR
// if not tmp then
39558: LD_VAR 0 5
39562: NOT
39563: IFFALSE 39567
// exit ;
39565: GO 39616
// for i in tmp do
39567: LD_ADDR_VAR 0 4
39571: PUSH
39572: LD_VAR 0 5
39576: PUSH
39577: FOR_IN
39578: IFFALSE 39614
// if GetTech ( i , side ) <> state_researched then
39580: LD_VAR 0 4
39584: PPUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 321
39594: PUSH
39595: LD_INT 2
39597: NONEQUAL
39598: IFFALSE 39612
// begin result := false ;
39600: LD_ADDR_VAR 0 3
39604: PUSH
39605: LD_INT 0
39607: ST_TO_ADDR
// exit ;
39608: POP
39609: POP
39610: GO 39616
// end ;
39612: GO 39577
39614: POP
39615: POP
// end ;
39616: LD_VAR 0 3
39620: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39621: LD_INT 0
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
39634: PPUSH
39635: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39636: LD_VAR 0 1
39640: NOT
39641: PUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 257
39651: PUSH
39652: LD_INT 9
39654: NONEQUAL
39655: OR
39656: IFFALSE 39660
// exit ;
39658: GO 40233
// side := GetSide ( unit ) ;
39660: LD_ADDR_VAR 0 9
39664: PUSH
39665: LD_VAR 0 1
39669: PPUSH
39670: CALL_OW 255
39674: ST_TO_ADDR
// tech_space := tech_spacanom ;
39675: LD_ADDR_VAR 0 12
39679: PUSH
39680: LD_INT 29
39682: ST_TO_ADDR
// tech_time := tech_taurad ;
39683: LD_ADDR_VAR 0 13
39687: PUSH
39688: LD_INT 28
39690: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39691: LD_ADDR_VAR 0 11
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 310
39705: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39706: LD_VAR 0 11
39710: PPUSH
39711: CALL_OW 247
39715: PUSH
39716: LD_INT 2
39718: EQUAL
39719: IFFALSE 39723
// exit ;
39721: GO 40233
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39723: LD_ADDR_VAR 0 8
39727: PUSH
39728: LD_INT 81
39730: PUSH
39731: LD_VAR 0 9
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 3
39742: PUSH
39743: LD_INT 21
39745: PUSH
39746: LD_INT 3
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PPUSH
39761: CALL_OW 69
39765: ST_TO_ADDR
// if not tmp then
39766: LD_VAR 0 8
39770: NOT
39771: IFFALSE 39775
// exit ;
39773: GO 40233
// if in_unit then
39775: LD_VAR 0 11
39779: IFFALSE 39803
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39781: LD_ADDR_VAR 0 10
39785: PUSH
39786: LD_VAR 0 8
39790: PPUSH
39791: LD_VAR 0 11
39795: PPUSH
39796: CALL_OW 74
39800: ST_TO_ADDR
39801: GO 39823
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39803: LD_ADDR_VAR 0 10
39807: PUSH
39808: LD_VAR 0 8
39812: PPUSH
39813: LD_VAR 0 1
39817: PPUSH
39818: CALL_OW 74
39822: ST_TO_ADDR
// if not enemy then
39823: LD_VAR 0 10
39827: NOT
39828: IFFALSE 39832
// exit ;
39830: GO 40233
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39832: LD_VAR 0 11
39836: PUSH
39837: LD_VAR 0 11
39841: PPUSH
39842: LD_VAR 0 10
39846: PPUSH
39847: CALL_OW 296
39851: PUSH
39852: LD_INT 13
39854: GREATER
39855: AND
39856: PUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: LD_VAR 0 10
39866: PPUSH
39867: CALL_OW 296
39871: PUSH
39872: LD_INT 12
39874: GREATER
39875: OR
39876: IFFALSE 39880
// exit ;
39878: GO 40233
// missile := [ 1 ] ;
39880: LD_ADDR_VAR 0 14
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39891: LD_VAR 0 9
39895: PPUSH
39896: LD_VAR 0 12
39900: PPUSH
39901: CALL_OW 325
39905: IFFALSE 39934
// missile := Replace ( missile , missile + 1 , 2 ) ;
39907: LD_ADDR_VAR 0 14
39911: PUSH
39912: LD_VAR 0 14
39916: PPUSH
39917: LD_VAR 0 14
39921: PUSH
39922: LD_INT 1
39924: PLUS
39925: PPUSH
39926: LD_INT 2
39928: PPUSH
39929: CALL_OW 1
39933: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39934: LD_VAR 0 9
39938: PPUSH
39939: LD_VAR 0 13
39943: PPUSH
39944: CALL_OW 325
39948: PUSH
39949: LD_VAR 0 10
39953: PPUSH
39954: CALL_OW 255
39958: PPUSH
39959: LD_VAR 0 13
39963: PPUSH
39964: CALL_OW 325
39968: NOT
39969: AND
39970: IFFALSE 39999
// missile := Replace ( missile , missile + 1 , 3 ) ;
39972: LD_ADDR_VAR 0 14
39976: PUSH
39977: LD_VAR 0 14
39981: PPUSH
39982: LD_VAR 0 14
39986: PUSH
39987: LD_INT 1
39989: PLUS
39990: PPUSH
39991: LD_INT 3
39993: PPUSH
39994: CALL_OW 1
39998: ST_TO_ADDR
// if missile < 2 then
39999: LD_VAR 0 14
40003: PUSH
40004: LD_INT 2
40006: LESS
40007: IFFALSE 40011
// exit ;
40009: GO 40233
// x := GetX ( enemy ) ;
40011: LD_ADDR_VAR 0 4
40015: PUSH
40016: LD_VAR 0 10
40020: PPUSH
40021: CALL_OW 250
40025: ST_TO_ADDR
// y := GetY ( enemy ) ;
40026: LD_ADDR_VAR 0 5
40030: PUSH
40031: LD_VAR 0 10
40035: PPUSH
40036: CALL_OW 251
40040: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40041: LD_ADDR_VAR 0 6
40045: PUSH
40046: LD_VAR 0 4
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PPUSH
40055: LD_INT 1
40057: PPUSH
40058: CALL_OW 12
40062: PLUS
40063: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40064: LD_ADDR_VAR 0 7
40068: PUSH
40069: LD_VAR 0 5
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PPUSH
40078: LD_INT 1
40080: PPUSH
40081: CALL_OW 12
40085: PLUS
40086: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40087: LD_VAR 0 6
40091: PPUSH
40092: LD_VAR 0 7
40096: PPUSH
40097: CALL_OW 488
40101: NOT
40102: IFFALSE 40124
// begin _x := x ;
40104: LD_ADDR_VAR 0 6
40108: PUSH
40109: LD_VAR 0 4
40113: ST_TO_ADDR
// _y := y ;
40114: LD_ADDR_VAR 0 7
40118: PUSH
40119: LD_VAR 0 5
40123: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_INT 1
40131: PPUSH
40132: LD_VAR 0 14
40136: PPUSH
40137: CALL_OW 12
40141: ST_TO_ADDR
// case i of 1 :
40142: LD_VAR 0 3
40146: PUSH
40147: LD_INT 1
40149: DOUBLE
40150: EQUAL
40151: IFTRUE 40155
40153: GO 40172
40155: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40156: LD_VAR 0 1
40160: PPUSH
40161: LD_VAR 0 10
40165: PPUSH
40166: CALL_OW 115
40170: GO 40233
40172: LD_INT 2
40174: DOUBLE
40175: EQUAL
40176: IFTRUE 40180
40178: GO 40202
40180: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40181: LD_VAR 0 1
40185: PPUSH
40186: LD_VAR 0 6
40190: PPUSH
40191: LD_VAR 0 7
40195: PPUSH
40196: CALL_OW 153
40200: GO 40233
40202: LD_INT 3
40204: DOUBLE
40205: EQUAL
40206: IFTRUE 40210
40208: GO 40232
40210: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40211: LD_VAR 0 1
40215: PPUSH
40216: LD_VAR 0 6
40220: PPUSH
40221: LD_VAR 0 7
40225: PPUSH
40226: CALL_OW 154
40230: GO 40233
40232: POP
// end ;
40233: LD_VAR 0 2
40237: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40238: LD_INT 0
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
// if not unit or not building then
40246: LD_VAR 0 1
40250: NOT
40251: PUSH
40252: LD_VAR 0 2
40256: NOT
40257: OR
40258: IFFALSE 40262
// exit ;
40260: GO 40420
// x := GetX ( building ) ;
40262: LD_ADDR_VAR 0 5
40266: PUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: CALL_OW 250
40276: ST_TO_ADDR
// y := GetY ( building ) ;
40277: LD_ADDR_VAR 0 6
40281: PUSH
40282: LD_VAR 0 2
40286: PPUSH
40287: CALL_OW 251
40291: ST_TO_ADDR
// for i = 0 to 5 do
40292: LD_ADDR_VAR 0 4
40296: PUSH
40297: DOUBLE
40298: LD_INT 0
40300: DEC
40301: ST_TO_ADDR
40302: LD_INT 5
40304: PUSH
40305: FOR_TO
40306: IFFALSE 40418
// begin _x := ShiftX ( x , i , 3 ) ;
40308: LD_ADDR_VAR 0 7
40312: PUSH
40313: LD_VAR 0 5
40317: PPUSH
40318: LD_VAR 0 4
40322: PPUSH
40323: LD_INT 3
40325: PPUSH
40326: CALL_OW 272
40330: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40331: LD_ADDR_VAR 0 8
40335: PUSH
40336: LD_VAR 0 6
40340: PPUSH
40341: LD_VAR 0 4
40345: PPUSH
40346: LD_INT 3
40348: PPUSH
40349: CALL_OW 273
40353: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40354: LD_VAR 0 7
40358: PPUSH
40359: LD_VAR 0 8
40363: PPUSH
40364: CALL_OW 488
40368: NOT
40369: IFFALSE 40373
// continue ;
40371: GO 40305
// if HexInfo ( _x , _y ) = 0 then
40373: LD_VAR 0 7
40377: PPUSH
40378: LD_VAR 0 8
40382: PPUSH
40383: CALL_OW 428
40387: PUSH
40388: LD_INT 0
40390: EQUAL
40391: IFFALSE 40416
// begin ComMoveXY ( unit , _x , _y ) ;
40393: LD_VAR 0 1
40397: PPUSH
40398: LD_VAR 0 7
40402: PPUSH
40403: LD_VAR 0 8
40407: PPUSH
40408: CALL_OW 111
// exit ;
40412: POP
40413: POP
40414: GO 40420
// end ; end ;
40416: GO 40305
40418: POP
40419: POP
// end ;
40420: LD_VAR 0 3
40424: RET
// export function ScanBase ( side , base_area ) ; begin
40425: LD_INT 0
40427: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40428: LD_ADDR_VAR 0 3
40432: PUSH
40433: LD_VAR 0 2
40437: PPUSH
40438: LD_INT 81
40440: PUSH
40441: LD_VAR 0 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PPUSH
40450: CALL_OW 70
40454: ST_TO_ADDR
// end ;
40455: LD_VAR 0 3
40459: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40460: LD_INT 0
40462: PPUSH
40463: PPUSH
40464: PPUSH
40465: PPUSH
// result := false ;
40466: LD_ADDR_VAR 0 2
40470: PUSH
40471: LD_INT 0
40473: ST_TO_ADDR
// side := GetSide ( unit ) ;
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 255
40488: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40489: LD_ADDR_VAR 0 4
40493: PUSH
40494: LD_VAR 0 1
40498: PPUSH
40499: CALL_OW 248
40503: ST_TO_ADDR
// case nat of 1 :
40504: LD_VAR 0 4
40508: PUSH
40509: LD_INT 1
40511: DOUBLE
40512: EQUAL
40513: IFTRUE 40517
40515: GO 40528
40517: POP
// tech := tech_lassight ; 2 :
40518: LD_ADDR_VAR 0 5
40522: PUSH
40523: LD_INT 12
40525: ST_TO_ADDR
40526: GO 40567
40528: LD_INT 2
40530: DOUBLE
40531: EQUAL
40532: IFTRUE 40536
40534: GO 40547
40536: POP
// tech := tech_mortar ; 3 :
40537: LD_ADDR_VAR 0 5
40541: PUSH
40542: LD_INT 41
40544: ST_TO_ADDR
40545: GO 40567
40547: LD_INT 3
40549: DOUBLE
40550: EQUAL
40551: IFTRUE 40555
40553: GO 40566
40555: POP
// tech := tech_bazooka ; end ;
40556: LD_ADDR_VAR 0 5
40560: PUSH
40561: LD_INT 44
40563: ST_TO_ADDR
40564: GO 40567
40566: POP
// if Researched ( side , tech ) then
40567: LD_VAR 0 3
40571: PPUSH
40572: LD_VAR 0 5
40576: PPUSH
40577: CALL_OW 325
40581: IFFALSE 40608
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40583: LD_ADDR_VAR 0 2
40587: PUSH
40588: LD_INT 5
40590: PUSH
40591: LD_INT 8
40593: PUSH
40594: LD_INT 9
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: PUSH
40602: LD_VAR 0 4
40606: ARRAY
40607: ST_TO_ADDR
// end ;
40608: LD_VAR 0 2
40612: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40613: LD_INT 0
40615: PPUSH
40616: PPUSH
40617: PPUSH
// if not mines then
40618: LD_VAR 0 2
40622: NOT
40623: IFFALSE 40627
// exit ;
40625: GO 40771
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40627: LD_ADDR_VAR 0 5
40631: PUSH
40632: LD_INT 81
40634: PUSH
40635: LD_VAR 0 1
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 3
40646: PUSH
40647: LD_INT 21
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PPUSH
40665: CALL_OW 69
40669: ST_TO_ADDR
// for i in mines do
40670: LD_ADDR_VAR 0 4
40674: PUSH
40675: LD_VAR 0 2
40679: PUSH
40680: FOR_IN
40681: IFFALSE 40769
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40683: LD_VAR 0 4
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: PPUSH
40692: LD_VAR 0 4
40696: PUSH
40697: LD_INT 2
40699: ARRAY
40700: PPUSH
40701: CALL_OW 458
40705: NOT
40706: IFFALSE 40710
// continue ;
40708: GO 40680
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40710: LD_VAR 0 4
40714: PUSH
40715: LD_INT 1
40717: ARRAY
40718: PPUSH
40719: LD_VAR 0 4
40723: PUSH
40724: LD_INT 2
40726: ARRAY
40727: PPUSH
40728: CALL_OW 428
40732: PUSH
40733: LD_VAR 0 5
40737: IN
40738: IFFALSE 40767
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40740: LD_VAR 0 4
40744: PUSH
40745: LD_INT 1
40747: ARRAY
40748: PPUSH
40749: LD_VAR 0 4
40753: PUSH
40754: LD_INT 2
40756: ARRAY
40757: PPUSH
40758: LD_VAR 0 1
40762: PPUSH
40763: CALL_OW 456
// end ;
40767: GO 40680
40769: POP
40770: POP
// end ;
40771: LD_VAR 0 3
40775: RET
// export function Count ( array ) ; begin
40776: LD_INT 0
40778: PPUSH
// result := array + 0 ;
40779: LD_ADDR_VAR 0 2
40783: PUSH
40784: LD_VAR 0 1
40788: PUSH
40789: LD_INT 0
40791: PLUS
40792: ST_TO_ADDR
// end ;
40793: LD_VAR 0 2
40797: RET
// export function IsEmpty ( building ) ; begin
40798: LD_INT 0
40800: PPUSH
// if not building then
40801: LD_VAR 0 1
40805: NOT
40806: IFFALSE 40810
// exit ;
40808: GO 40853
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40810: LD_ADDR_VAR 0 2
40814: PUSH
40815: LD_VAR 0 1
40819: PUSH
40820: LD_INT 22
40822: PUSH
40823: LD_VAR 0 1
40827: PPUSH
40828: CALL_OW 255
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 58
40839: PUSH
40840: EMPTY
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PPUSH
40847: CALL_OW 69
40851: IN
40852: ST_TO_ADDR
// end ;
40853: LD_VAR 0 2
40857: RET
// export function IsNotFull ( building ) ; var places ; begin
40858: LD_INT 0
40860: PPUSH
40861: PPUSH
// if not building then
40862: LD_VAR 0 1
40866: NOT
40867: IFFALSE 40871
// exit ;
40869: GO 40899
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40871: LD_ADDR_VAR 0 2
40875: PUSH
40876: LD_VAR 0 1
40880: PPUSH
40881: LD_INT 3
40883: PUSH
40884: LD_INT 62
40886: PUSH
40887: EMPTY
40888: LIST
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PPUSH
40894: CALL_OW 72
40898: ST_TO_ADDR
// end ;
40899: LD_VAR 0 2
40903: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40904: LD_INT 0
40906: PPUSH
40907: PPUSH
40908: PPUSH
40909: PPUSH
// tmp := [ ] ;
40910: LD_ADDR_VAR 0 3
40914: PUSH
40915: EMPTY
40916: ST_TO_ADDR
// list := [ ] ;
40917: LD_ADDR_VAR 0 5
40921: PUSH
40922: EMPTY
40923: ST_TO_ADDR
// for i = 16 to 25 do
40924: LD_ADDR_VAR 0 4
40928: PUSH
40929: DOUBLE
40930: LD_INT 16
40932: DEC
40933: ST_TO_ADDR
40934: LD_INT 25
40936: PUSH
40937: FOR_TO
40938: IFFALSE 41011
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40940: LD_ADDR_VAR 0 3
40944: PUSH
40945: LD_VAR 0 3
40949: PUSH
40950: LD_INT 22
40952: PUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 255
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 91
40969: PUSH
40970: LD_VAR 0 1
40974: PUSH
40975: LD_INT 6
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 30
40985: PUSH
40986: LD_VAR 0 4
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: LIST
40999: PUSH
41000: EMPTY
41001: LIST
41002: PPUSH
41003: CALL_OW 69
41007: ADD
41008: ST_TO_ADDR
41009: GO 40937
41011: POP
41012: POP
// for i = 1 to tmp do
41013: LD_ADDR_VAR 0 4
41017: PUSH
41018: DOUBLE
41019: LD_INT 1
41021: DEC
41022: ST_TO_ADDR
41023: LD_VAR 0 3
41027: PUSH
41028: FOR_TO
41029: IFFALSE 41117
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41031: LD_ADDR_VAR 0 5
41035: PUSH
41036: LD_VAR 0 5
41040: PUSH
41041: LD_VAR 0 3
41045: PUSH
41046: LD_VAR 0 4
41050: ARRAY
41051: PPUSH
41052: CALL_OW 266
41056: PUSH
41057: LD_VAR 0 3
41061: PUSH
41062: LD_VAR 0 4
41066: ARRAY
41067: PPUSH
41068: CALL_OW 250
41072: PUSH
41073: LD_VAR 0 3
41077: PUSH
41078: LD_VAR 0 4
41082: ARRAY
41083: PPUSH
41084: CALL_OW 251
41088: PUSH
41089: LD_VAR 0 3
41093: PUSH
41094: LD_VAR 0 4
41098: ARRAY
41099: PPUSH
41100: CALL_OW 254
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: ADD
41114: ST_TO_ADDR
41115: GO 41028
41117: POP
41118: POP
// result := list ;
41119: LD_ADDR_VAR 0 2
41123: PUSH
41124: LD_VAR 0 5
41128: ST_TO_ADDR
// end ;
41129: LD_VAR 0 2
41133: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41134: LD_INT 0
41136: PPUSH
41137: PPUSH
41138: PPUSH
41139: PPUSH
41140: PPUSH
41141: PPUSH
41142: PPUSH
// if not factory then
41143: LD_VAR 0 1
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 41745
// if control = control_apeman then
41152: LD_VAR 0 4
41156: PUSH
41157: LD_INT 5
41159: EQUAL
41160: IFFALSE 41269
// begin tmp := UnitsInside ( factory ) ;
41162: LD_ADDR_VAR 0 8
41166: PUSH
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 313
41176: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41177: LD_VAR 0 8
41181: PPUSH
41182: LD_INT 25
41184: PUSH
41185: LD_INT 12
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PPUSH
41192: CALL_OW 72
41196: NOT
41197: IFFALSE 41207
// control := control_manual ;
41199: LD_ADDR_VAR 0 4
41203: PUSH
41204: LD_INT 1
41206: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41207: LD_ADDR_VAR 0 8
41211: PUSH
41212: LD_VAR 0 1
41216: PPUSH
41217: CALL 40904 0 1
41221: ST_TO_ADDR
// if tmp then
41222: LD_VAR 0 8
41226: IFFALSE 41269
// begin for i in tmp do
41228: LD_ADDR_VAR 0 7
41232: PUSH
41233: LD_VAR 0 8
41237: PUSH
41238: FOR_IN
41239: IFFALSE 41267
// if i [ 1 ] = b_ext_radio then
41241: LD_VAR 0 7
41245: PUSH
41246: LD_INT 1
41248: ARRAY
41249: PUSH
41250: LD_INT 22
41252: EQUAL
41253: IFFALSE 41265
// begin control := control_remote ;
41255: LD_ADDR_VAR 0 4
41259: PUSH
41260: LD_INT 2
41262: ST_TO_ADDR
// break ;
41263: GO 41267
// end ;
41265: GO 41238
41267: POP
41268: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41269: LD_VAR 0 1
41273: PPUSH
41274: LD_VAR 0 2
41278: PPUSH
41279: LD_VAR 0 3
41283: PPUSH
41284: LD_VAR 0 4
41288: PPUSH
41289: LD_VAR 0 5
41293: PPUSH
41294: CALL_OW 448
41298: IFFALSE 41333
// begin result := [ chassis , engine , control , weapon ] ;
41300: LD_ADDR_VAR 0 6
41304: PUSH
41305: LD_VAR 0 2
41309: PUSH
41310: LD_VAR 0 3
41314: PUSH
41315: LD_VAR 0 4
41319: PUSH
41320: LD_VAR 0 5
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: ST_TO_ADDR
// exit ;
41331: GO 41745
// end ; _chassis := AvailableChassisList ( factory ) ;
41333: LD_ADDR_VAR 0 9
41337: PUSH
41338: LD_VAR 0 1
41342: PPUSH
41343: CALL_OW 475
41347: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41348: LD_ADDR_VAR 0 11
41352: PUSH
41353: LD_VAR 0 1
41357: PPUSH
41358: CALL_OW 476
41362: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41363: LD_ADDR_VAR 0 12
41367: PUSH
41368: LD_VAR 0 1
41372: PPUSH
41373: CALL_OW 477
41377: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41378: LD_ADDR_VAR 0 10
41382: PUSH
41383: LD_VAR 0 1
41387: PPUSH
41388: CALL_OW 478
41392: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41393: LD_VAR 0 9
41397: NOT
41398: PUSH
41399: LD_VAR 0 11
41403: NOT
41404: OR
41405: PUSH
41406: LD_VAR 0 12
41410: NOT
41411: OR
41412: PUSH
41413: LD_VAR 0 10
41417: NOT
41418: OR
41419: IFFALSE 41454
// begin result := [ chassis , engine , control , weapon ] ;
41421: LD_ADDR_VAR 0 6
41425: PUSH
41426: LD_VAR 0 2
41430: PUSH
41431: LD_VAR 0 3
41435: PUSH
41436: LD_VAR 0 4
41440: PUSH
41441: LD_VAR 0 5
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: ST_TO_ADDR
// exit ;
41452: GO 41745
// end ; if not chassis in _chassis then
41454: LD_VAR 0 2
41458: PUSH
41459: LD_VAR 0 9
41463: IN
41464: NOT
41465: IFFALSE 41491
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41467: LD_ADDR_VAR 0 2
41471: PUSH
41472: LD_VAR 0 9
41476: PUSH
41477: LD_INT 1
41479: PPUSH
41480: LD_VAR 0 9
41484: PPUSH
41485: CALL_OW 12
41489: ARRAY
41490: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41491: LD_VAR 0 2
41495: PPUSH
41496: LD_VAR 0 3
41500: PPUSH
41501: CALL 41750 0 2
41505: NOT
41506: IFFALSE 41565
// repeat engine := _engine [ 1 ] ;
41508: LD_ADDR_VAR 0 3
41512: PUSH
41513: LD_VAR 0 11
41517: PUSH
41518: LD_INT 1
41520: ARRAY
41521: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41522: LD_ADDR_VAR 0 11
41526: PUSH
41527: LD_VAR 0 11
41531: PPUSH
41532: LD_INT 1
41534: PPUSH
41535: CALL_OW 3
41539: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41540: LD_VAR 0 2
41544: PPUSH
41545: LD_VAR 0 3
41549: PPUSH
41550: CALL 41750 0 2
41554: PUSH
41555: LD_VAR 0 11
41559: PUSH
41560: EMPTY
41561: EQUAL
41562: OR
41563: IFFALSE 41508
// if not control in _control then
41565: LD_VAR 0 4
41569: PUSH
41570: LD_VAR 0 12
41574: IN
41575: NOT
41576: IFFALSE 41602
// control := _control [ rand ( 1 , _control ) ] ;
41578: LD_ADDR_VAR 0 4
41582: PUSH
41583: LD_VAR 0 12
41587: PUSH
41588: LD_INT 1
41590: PPUSH
41591: LD_VAR 0 12
41595: PPUSH
41596: CALL_OW 12
41600: ARRAY
41601: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41602: LD_VAR 0 2
41606: PPUSH
41607: LD_VAR 0 5
41611: PPUSH
41612: CALL 41970 0 2
41616: NOT
41617: IFFALSE 41676
// repeat weapon := _weapon [ 1 ] ;
41619: LD_ADDR_VAR 0 5
41623: PUSH
41624: LD_VAR 0 10
41628: PUSH
41629: LD_INT 1
41631: ARRAY
41632: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41633: LD_ADDR_VAR 0 10
41637: PUSH
41638: LD_VAR 0 10
41642: PPUSH
41643: LD_INT 1
41645: PPUSH
41646: CALL_OW 3
41650: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41651: LD_VAR 0 2
41655: PPUSH
41656: LD_VAR 0 5
41660: PPUSH
41661: CALL 41970 0 2
41665: PUSH
41666: LD_VAR 0 10
41670: PUSH
41671: EMPTY
41672: EQUAL
41673: OR
41674: IFFALSE 41619
// result := [ ] ;
41676: LD_ADDR_VAR 0 6
41680: PUSH
41681: EMPTY
41682: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41683: LD_VAR 0 1
41687: PPUSH
41688: LD_VAR 0 2
41692: PPUSH
41693: LD_VAR 0 3
41697: PPUSH
41698: LD_VAR 0 4
41702: PPUSH
41703: LD_VAR 0 5
41707: PPUSH
41708: CALL_OW 448
41712: IFFALSE 41745
// result := [ chassis , engine , control , weapon ] ;
41714: LD_ADDR_VAR 0 6
41718: PUSH
41719: LD_VAR 0 2
41723: PUSH
41724: LD_VAR 0 3
41728: PUSH
41729: LD_VAR 0 4
41733: PUSH
41734: LD_VAR 0 5
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: ST_TO_ADDR
// end ;
41745: LD_VAR 0 6
41749: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41750: LD_INT 0
41752: PPUSH
// if not chassis or not engine then
41753: LD_VAR 0 1
41757: NOT
41758: PUSH
41759: LD_VAR 0 2
41763: NOT
41764: OR
41765: IFFALSE 41769
// exit ;
41767: GO 41965
// case engine of engine_solar :
41769: LD_VAR 0 2
41773: PUSH
41774: LD_INT 2
41776: DOUBLE
41777: EQUAL
41778: IFTRUE 41782
41780: GO 41820
41782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41783: LD_ADDR_VAR 0 3
41787: PUSH
41788: LD_INT 11
41790: PUSH
41791: LD_INT 12
41793: PUSH
41794: LD_INT 13
41796: PUSH
41797: LD_INT 14
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: LD_INT 3
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: ST_TO_ADDR
41818: GO 41949
41820: LD_INT 1
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 41890
41828: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41829: LD_ADDR_VAR 0 3
41833: PUSH
41834: LD_INT 11
41836: PUSH
41837: LD_INT 12
41839: PUSH
41840: LD_INT 13
41842: PUSH
41843: LD_INT 14
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 2
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: LD_INT 4
41857: PUSH
41858: LD_INT 5
41860: PUSH
41861: LD_INT 21
41863: PUSH
41864: LD_INT 23
41866: PUSH
41867: LD_INT 22
41869: PUSH
41870: LD_INT 24
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: ST_TO_ADDR
41888: GO 41949
41890: LD_INT 3
41892: DOUBLE
41893: EQUAL
41894: IFTRUE 41898
41896: GO 41948
41898: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_INT 13
41906: PUSH
41907: LD_INT 14
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: LD_INT 3
41915: PUSH
41916: LD_INT 4
41918: PUSH
41919: LD_INT 5
41921: PUSH
41922: LD_INT 21
41924: PUSH
41925: LD_INT 22
41927: PUSH
41928: LD_INT 23
41930: PUSH
41931: LD_INT 24
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: ST_TO_ADDR
41946: GO 41949
41948: POP
// result := ( chassis in result ) ;
41949: LD_ADDR_VAR 0 3
41953: PUSH
41954: LD_VAR 0 1
41958: PUSH
41959: LD_VAR 0 3
41963: IN
41964: ST_TO_ADDR
// end ;
41965: LD_VAR 0 3
41969: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41970: LD_INT 0
41972: PPUSH
// if not chassis or not weapon then
41973: LD_VAR 0 1
41977: NOT
41978: PUSH
41979: LD_VAR 0 2
41983: NOT
41984: OR
41985: IFFALSE 41989
// exit ;
41987: GO 43049
// case weapon of us_machine_gun :
41989: LD_VAR 0 2
41993: PUSH
41994: LD_INT 2
41996: DOUBLE
41997: EQUAL
41998: IFTRUE 42002
42000: GO 42032
42002: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 3
42016: PUSH
42017: LD_INT 4
42019: PUSH
42020: LD_INT 5
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: ST_TO_ADDR
42030: GO 43033
42032: LD_INT 3
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42040
42038: GO 42070
42040: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42041: LD_ADDR_VAR 0 3
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 4
42057: PUSH
42058: LD_INT 5
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
42068: GO 43033
42070: LD_INT 11
42072: DOUBLE
42073: EQUAL
42074: IFTRUE 42078
42076: GO 42108
42078: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42079: LD_ADDR_VAR 0 3
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: LD_INT 3
42092: PUSH
42093: LD_INT 4
42095: PUSH
42096: LD_INT 5
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: ST_TO_ADDR
42106: GO 43033
42108: LD_INT 4
42110: DOUBLE
42111: EQUAL
42112: IFTRUE 42116
42114: GO 42142
42116: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42117: LD_ADDR_VAR 0 3
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: LD_INT 3
42127: PUSH
42128: LD_INT 4
42130: PUSH
42131: LD_INT 5
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
42140: GO 43033
42142: LD_INT 5
42144: DOUBLE
42145: EQUAL
42146: IFTRUE 42150
42148: GO 42176
42150: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42151: LD_ADDR_VAR 0 3
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: LD_INT 4
42164: PUSH
42165: LD_INT 5
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
42174: GO 43033
42176: LD_INT 9
42178: DOUBLE
42179: EQUAL
42180: IFTRUE 42184
42182: GO 42210
42184: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42185: LD_ADDR_VAR 0 3
42189: PUSH
42190: LD_INT 2
42192: PUSH
42193: LD_INT 3
42195: PUSH
42196: LD_INT 4
42198: PUSH
42199: LD_INT 5
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: ST_TO_ADDR
42208: GO 43033
42210: LD_INT 7
42212: DOUBLE
42213: EQUAL
42214: IFTRUE 42218
42216: GO 42244
42218: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 3
42229: PUSH
42230: LD_INT 4
42232: PUSH
42233: LD_INT 5
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: ST_TO_ADDR
42242: GO 43033
42244: LD_INT 12
42246: DOUBLE
42247: EQUAL
42248: IFTRUE 42252
42250: GO 42278
42252: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42253: LD_ADDR_VAR 0 3
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: LD_INT 4
42266: PUSH
42267: LD_INT 5
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: ST_TO_ADDR
42276: GO 43033
42278: LD_INT 13
42280: DOUBLE
42281: EQUAL
42282: IFTRUE 42286
42284: GO 42312
42286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42287: LD_ADDR_VAR 0 3
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: LD_INT 4
42300: PUSH
42301: LD_INT 5
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: ST_TO_ADDR
42310: GO 43033
42312: LD_INT 14
42314: DOUBLE
42315: EQUAL
42316: IFTRUE 42320
42318: GO 42338
42320: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_INT 4
42328: PUSH
42329: LD_INT 5
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: ST_TO_ADDR
42336: GO 43033
42338: LD_INT 6
42340: DOUBLE
42341: EQUAL
42342: IFTRUE 42346
42344: GO 42364
42346: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42347: LD_ADDR_VAR 0 3
42351: PUSH
42352: LD_INT 4
42354: PUSH
42355: LD_INT 5
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: ST_TO_ADDR
42362: GO 43033
42364: LD_INT 10
42366: DOUBLE
42367: EQUAL
42368: IFTRUE 42372
42370: GO 42390
42372: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42373: LD_ADDR_VAR 0 3
42377: PUSH
42378: LD_INT 4
42380: PUSH
42381: LD_INT 5
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: ST_TO_ADDR
42388: GO 43033
42390: LD_INT 22
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 42424
42398: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_INT 11
42406: PUSH
42407: LD_INT 12
42409: PUSH
42410: LD_INT 13
42412: PUSH
42413: LD_INT 14
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
42422: GO 43033
42424: LD_INT 23
42426: DOUBLE
42427: EQUAL
42428: IFTRUE 42432
42430: GO 42458
42432: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: LD_INT 11
42440: PUSH
42441: LD_INT 12
42443: PUSH
42444: LD_INT 13
42446: PUSH
42447: LD_INT 14
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
42456: GO 43033
42458: LD_INT 24
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42492
42466: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_INT 11
42474: PUSH
42475: LD_INT 12
42477: PUSH
42478: LD_INT 13
42480: PUSH
42481: LD_INT 14
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
42490: GO 43033
42492: LD_INT 30
42494: DOUBLE
42495: EQUAL
42496: IFTRUE 42500
42498: GO 42526
42500: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42501: LD_ADDR_VAR 0 3
42505: PUSH
42506: LD_INT 11
42508: PUSH
42509: LD_INT 12
42511: PUSH
42512: LD_INT 13
42514: PUSH
42515: LD_INT 14
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: ST_TO_ADDR
42524: GO 43033
42526: LD_INT 25
42528: DOUBLE
42529: EQUAL
42530: IFTRUE 42534
42532: GO 42552
42534: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_INT 13
42542: PUSH
42543: LD_INT 14
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: ST_TO_ADDR
42550: GO 43033
42552: LD_INT 27
42554: DOUBLE
42555: EQUAL
42556: IFTRUE 42560
42558: GO 42578
42560: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42561: LD_ADDR_VAR 0 3
42565: PUSH
42566: LD_INT 13
42568: PUSH
42569: LD_INT 14
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: ST_TO_ADDR
42576: GO 43033
42578: LD_INT 92
42580: DOUBLE
42581: EQUAL
42582: IFTRUE 42586
42584: GO 42612
42586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42587: LD_ADDR_VAR 0 3
42591: PUSH
42592: LD_INT 11
42594: PUSH
42595: LD_INT 12
42597: PUSH
42598: LD_INT 13
42600: PUSH
42601: LD_INT 14
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
42610: GO 43033
42612: LD_INT 28
42614: DOUBLE
42615: EQUAL
42616: IFTRUE 42620
42618: GO 42638
42620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_INT 13
42628: PUSH
42629: LD_INT 14
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: ST_TO_ADDR
42636: GO 43033
42638: LD_INT 29
42640: DOUBLE
42641: EQUAL
42642: IFTRUE 42646
42644: GO 42664
42646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_INT 13
42654: PUSH
42655: LD_INT 14
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: ST_TO_ADDR
42662: GO 43033
42664: LD_INT 31
42666: DOUBLE
42667: EQUAL
42668: IFTRUE 42672
42670: GO 42690
42672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42673: LD_ADDR_VAR 0 3
42677: PUSH
42678: LD_INT 13
42680: PUSH
42681: LD_INT 14
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: ST_TO_ADDR
42688: GO 43033
42690: LD_INT 26
42692: DOUBLE
42693: EQUAL
42694: IFTRUE 42698
42696: GO 42716
42698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42699: LD_ADDR_VAR 0 3
42703: PUSH
42704: LD_INT 13
42706: PUSH
42707: LD_INT 14
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: ST_TO_ADDR
42714: GO 43033
42716: LD_INT 42
42718: DOUBLE
42719: EQUAL
42720: IFTRUE 42724
42722: GO 42750
42724: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42725: LD_ADDR_VAR 0 3
42729: PUSH
42730: LD_INT 21
42732: PUSH
42733: LD_INT 22
42735: PUSH
42736: LD_INT 23
42738: PUSH
42739: LD_INT 24
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: ST_TO_ADDR
42748: GO 43033
42750: LD_INT 43
42752: DOUBLE
42753: EQUAL
42754: IFTRUE 42758
42756: GO 42784
42758: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42759: LD_ADDR_VAR 0 3
42763: PUSH
42764: LD_INT 21
42766: PUSH
42767: LD_INT 22
42769: PUSH
42770: LD_INT 23
42772: PUSH
42773: LD_INT 24
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: ST_TO_ADDR
42782: GO 43033
42784: LD_INT 44
42786: DOUBLE
42787: EQUAL
42788: IFTRUE 42792
42790: GO 42818
42792: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42793: LD_ADDR_VAR 0 3
42797: PUSH
42798: LD_INT 21
42800: PUSH
42801: LD_INT 22
42803: PUSH
42804: LD_INT 23
42806: PUSH
42807: LD_INT 24
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: ST_TO_ADDR
42816: GO 43033
42818: LD_INT 45
42820: DOUBLE
42821: EQUAL
42822: IFTRUE 42826
42824: GO 42852
42826: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42827: LD_ADDR_VAR 0 3
42831: PUSH
42832: LD_INT 21
42834: PUSH
42835: LD_INT 22
42837: PUSH
42838: LD_INT 23
42840: PUSH
42841: LD_INT 24
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: ST_TO_ADDR
42850: GO 43033
42852: LD_INT 49
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42860
42858: GO 42886
42860: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42861: LD_ADDR_VAR 0 3
42865: PUSH
42866: LD_INT 21
42868: PUSH
42869: LD_INT 22
42871: PUSH
42872: LD_INT 23
42874: PUSH
42875: LD_INT 24
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: ST_TO_ADDR
42884: GO 43033
42886: LD_INT 51
42888: DOUBLE
42889: EQUAL
42890: IFTRUE 42894
42892: GO 42920
42894: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_INT 21
42902: PUSH
42903: LD_INT 22
42905: PUSH
42906: LD_INT 23
42908: PUSH
42909: LD_INT 24
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: ST_TO_ADDR
42918: GO 43033
42920: LD_INT 52
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42954
42928: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42929: LD_ADDR_VAR 0 3
42933: PUSH
42934: LD_INT 21
42936: PUSH
42937: LD_INT 22
42939: PUSH
42940: LD_INT 23
42942: PUSH
42943: LD_INT 24
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: ST_TO_ADDR
42952: GO 43033
42954: LD_INT 53
42956: DOUBLE
42957: EQUAL
42958: IFTRUE 42962
42960: GO 42980
42962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42963: LD_ADDR_VAR 0 3
42967: PUSH
42968: LD_INT 23
42970: PUSH
42971: LD_INT 24
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: ST_TO_ADDR
42978: GO 43033
42980: LD_INT 46
42982: DOUBLE
42983: EQUAL
42984: IFTRUE 42988
42986: GO 43006
42988: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_INT 23
42996: PUSH
42997: LD_INT 24
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: ST_TO_ADDR
43004: GO 43033
43006: LD_INT 47
43008: DOUBLE
43009: EQUAL
43010: IFTRUE 43014
43012: GO 43032
43014: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43015: LD_ADDR_VAR 0 3
43019: PUSH
43020: LD_INT 23
43022: PUSH
43023: LD_INT 24
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: ST_TO_ADDR
43030: GO 43033
43032: POP
// result := ( chassis in result ) ;
43033: LD_ADDR_VAR 0 3
43037: PUSH
43038: LD_VAR 0 1
43042: PUSH
43043: LD_VAR 0 3
43047: IN
43048: ST_TO_ADDR
// end ;
43049: LD_VAR 0 3
43053: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43054: LD_INT 0
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
43061: PPUSH
43062: PPUSH
// result := array ;
43063: LD_ADDR_VAR 0 5
43067: PUSH
43068: LD_VAR 0 1
43072: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43073: LD_VAR 0 1
43077: NOT
43078: PUSH
43079: LD_VAR 0 2
43083: NOT
43084: OR
43085: PUSH
43086: LD_VAR 0 3
43090: NOT
43091: OR
43092: PUSH
43093: LD_VAR 0 2
43097: PUSH
43098: LD_VAR 0 1
43102: GREATER
43103: OR
43104: PUSH
43105: LD_VAR 0 3
43109: PUSH
43110: LD_VAR 0 1
43114: GREATER
43115: OR
43116: IFFALSE 43120
// exit ;
43118: GO 43416
// if direction then
43120: LD_VAR 0 4
43124: IFFALSE 43188
// begin d := 1 ;
43126: LD_ADDR_VAR 0 9
43130: PUSH
43131: LD_INT 1
43133: ST_TO_ADDR
// if i_from > i_to then
43134: LD_VAR 0 2
43138: PUSH
43139: LD_VAR 0 3
43143: GREATER
43144: IFFALSE 43170
// length := ( array - i_from ) + i_to else
43146: LD_ADDR_VAR 0 11
43150: PUSH
43151: LD_VAR 0 1
43155: PUSH
43156: LD_VAR 0 2
43160: MINUS
43161: PUSH
43162: LD_VAR 0 3
43166: PLUS
43167: ST_TO_ADDR
43168: GO 43186
// length := i_to - i_from ;
43170: LD_ADDR_VAR 0 11
43174: PUSH
43175: LD_VAR 0 3
43179: PUSH
43180: LD_VAR 0 2
43184: MINUS
43185: ST_TO_ADDR
// end else
43186: GO 43249
// begin d := - 1 ;
43188: LD_ADDR_VAR 0 9
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: ST_TO_ADDR
// if i_from > i_to then
43197: LD_VAR 0 2
43201: PUSH
43202: LD_VAR 0 3
43206: GREATER
43207: IFFALSE 43227
// length := i_from - i_to else
43209: LD_ADDR_VAR 0 11
43213: PUSH
43214: LD_VAR 0 2
43218: PUSH
43219: LD_VAR 0 3
43223: MINUS
43224: ST_TO_ADDR
43225: GO 43249
// length := ( array - i_to ) + i_from ;
43227: LD_ADDR_VAR 0 11
43231: PUSH
43232: LD_VAR 0 1
43236: PUSH
43237: LD_VAR 0 3
43241: MINUS
43242: PUSH
43243: LD_VAR 0 2
43247: PLUS
43248: ST_TO_ADDR
// end ; if not length then
43249: LD_VAR 0 11
43253: NOT
43254: IFFALSE 43258
// exit ;
43256: GO 43416
// tmp := array ;
43258: LD_ADDR_VAR 0 10
43262: PUSH
43263: LD_VAR 0 1
43267: ST_TO_ADDR
// for i = 1 to length do
43268: LD_ADDR_VAR 0 6
43272: PUSH
43273: DOUBLE
43274: LD_INT 1
43276: DEC
43277: ST_TO_ADDR
43278: LD_VAR 0 11
43282: PUSH
43283: FOR_TO
43284: IFFALSE 43404
// begin for j = 1 to array do
43286: LD_ADDR_VAR 0 7
43290: PUSH
43291: DOUBLE
43292: LD_INT 1
43294: DEC
43295: ST_TO_ADDR
43296: LD_VAR 0 1
43300: PUSH
43301: FOR_TO
43302: IFFALSE 43390
// begin k := j + d ;
43304: LD_ADDR_VAR 0 8
43308: PUSH
43309: LD_VAR 0 7
43313: PUSH
43314: LD_VAR 0 9
43318: PLUS
43319: ST_TO_ADDR
// if k > array then
43320: LD_VAR 0 8
43324: PUSH
43325: LD_VAR 0 1
43329: GREATER
43330: IFFALSE 43340
// k := 1 ;
43332: LD_ADDR_VAR 0 8
43336: PUSH
43337: LD_INT 1
43339: ST_TO_ADDR
// if not k then
43340: LD_VAR 0 8
43344: NOT
43345: IFFALSE 43357
// k := array ;
43347: LD_ADDR_VAR 0 8
43351: PUSH
43352: LD_VAR 0 1
43356: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43357: LD_ADDR_VAR 0 10
43361: PUSH
43362: LD_VAR 0 10
43366: PPUSH
43367: LD_VAR 0 8
43371: PPUSH
43372: LD_VAR 0 1
43376: PUSH
43377: LD_VAR 0 7
43381: ARRAY
43382: PPUSH
43383: CALL_OW 1
43387: ST_TO_ADDR
// end ;
43388: GO 43301
43390: POP
43391: POP
// array := tmp ;
43392: LD_ADDR_VAR 0 1
43396: PUSH
43397: LD_VAR 0 10
43401: ST_TO_ADDR
// end ;
43402: GO 43283
43404: POP
43405: POP
// result := array ;
43406: LD_ADDR_VAR 0 5
43410: PUSH
43411: LD_VAR 0 1
43415: ST_TO_ADDR
// end ;
43416: LD_VAR 0 5
43420: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43421: LD_INT 0
43423: PPUSH
43424: PPUSH
// result := 0 ;
43425: LD_ADDR_VAR 0 3
43429: PUSH
43430: LD_INT 0
43432: ST_TO_ADDR
// if not array or not value in array then
43433: LD_VAR 0 1
43437: NOT
43438: PUSH
43439: LD_VAR 0 2
43443: PUSH
43444: LD_VAR 0 1
43448: IN
43449: NOT
43450: OR
43451: IFFALSE 43455
// exit ;
43453: GO 43509
// for i = 1 to array do
43455: LD_ADDR_VAR 0 4
43459: PUSH
43460: DOUBLE
43461: LD_INT 1
43463: DEC
43464: ST_TO_ADDR
43465: LD_VAR 0 1
43469: PUSH
43470: FOR_TO
43471: IFFALSE 43507
// if value = array [ i ] then
43473: LD_VAR 0 2
43477: PUSH
43478: LD_VAR 0 1
43482: PUSH
43483: LD_VAR 0 4
43487: ARRAY
43488: EQUAL
43489: IFFALSE 43505
// begin result := i ;
43491: LD_ADDR_VAR 0 3
43495: PUSH
43496: LD_VAR 0 4
43500: ST_TO_ADDR
// exit ;
43501: POP
43502: POP
43503: GO 43509
// end ;
43505: GO 43470
43507: POP
43508: POP
// end ;
43509: LD_VAR 0 3
43513: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43514: LD_INT 0
43516: PPUSH
// vc_chassis := chassis ;
43517: LD_ADDR_OWVAR 37
43521: PUSH
43522: LD_VAR 0 1
43526: ST_TO_ADDR
// vc_engine := engine ;
43527: LD_ADDR_OWVAR 39
43531: PUSH
43532: LD_VAR 0 2
43536: ST_TO_ADDR
// vc_control := control ;
43537: LD_ADDR_OWVAR 38
43541: PUSH
43542: LD_VAR 0 3
43546: ST_TO_ADDR
// vc_weapon := weapon ;
43547: LD_ADDR_OWVAR 40
43551: PUSH
43552: LD_VAR 0 4
43556: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43557: LD_ADDR_OWVAR 41
43561: PUSH
43562: LD_VAR 0 5
43566: ST_TO_ADDR
// end ;
43567: LD_VAR 0 6
43571: RET
// export function WantPlant ( unit ) ; var task ; begin
43572: LD_INT 0
43574: PPUSH
43575: PPUSH
// result := false ;
43576: LD_ADDR_VAR 0 2
43580: PUSH
43581: LD_INT 0
43583: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43584: LD_ADDR_VAR 0 3
43588: PUSH
43589: LD_VAR 0 1
43593: PPUSH
43594: CALL_OW 437
43598: ST_TO_ADDR
// if task then
43599: LD_VAR 0 3
43603: IFFALSE 43631
// if task [ 1 ] [ 1 ] = p then
43605: LD_VAR 0 3
43609: PUSH
43610: LD_INT 1
43612: ARRAY
43613: PUSH
43614: LD_INT 1
43616: ARRAY
43617: PUSH
43618: LD_STRING p
43620: EQUAL
43621: IFFALSE 43631
// result := true ;
43623: LD_ADDR_VAR 0 2
43627: PUSH
43628: LD_INT 1
43630: ST_TO_ADDR
// end ;
43631: LD_VAR 0 2
43635: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43636: LD_INT 0
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
// if pos < 1 then
43642: LD_VAR 0 2
43646: PUSH
43647: LD_INT 1
43649: LESS
43650: IFFALSE 43654
// exit ;
43652: GO 43957
// if pos = 1 then
43654: LD_VAR 0 2
43658: PUSH
43659: LD_INT 1
43661: EQUAL
43662: IFFALSE 43695
// result := Replace ( arr , pos [ 1 ] , value ) else
43664: LD_ADDR_VAR 0 4
43668: PUSH
43669: LD_VAR 0 1
43673: PPUSH
43674: LD_VAR 0 2
43678: PUSH
43679: LD_INT 1
43681: ARRAY
43682: PPUSH
43683: LD_VAR 0 3
43687: PPUSH
43688: CALL_OW 1
43692: ST_TO_ADDR
43693: GO 43957
// begin tmp := arr ;
43695: LD_ADDR_VAR 0 6
43699: PUSH
43700: LD_VAR 0 1
43704: ST_TO_ADDR
// s_arr := [ tmp ] ;
43705: LD_ADDR_VAR 0 7
43709: PUSH
43710: LD_VAR 0 6
43714: PUSH
43715: EMPTY
43716: LIST
43717: ST_TO_ADDR
// for i = 1 to pos - 1 do
43718: LD_ADDR_VAR 0 5
43722: PUSH
43723: DOUBLE
43724: LD_INT 1
43726: DEC
43727: ST_TO_ADDR
43728: LD_VAR 0 2
43732: PUSH
43733: LD_INT 1
43735: MINUS
43736: PUSH
43737: FOR_TO
43738: IFFALSE 43783
// begin tmp := tmp [ pos [ i ] ] ;
43740: LD_ADDR_VAR 0 6
43744: PUSH
43745: LD_VAR 0 6
43749: PUSH
43750: LD_VAR 0 2
43754: PUSH
43755: LD_VAR 0 5
43759: ARRAY
43760: ARRAY
43761: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43762: LD_ADDR_VAR 0 7
43766: PUSH
43767: LD_VAR 0 7
43771: PUSH
43772: LD_VAR 0 6
43776: PUSH
43777: EMPTY
43778: LIST
43779: ADD
43780: ST_TO_ADDR
// end ;
43781: GO 43737
43783: POP
43784: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43785: LD_ADDR_VAR 0 6
43789: PUSH
43790: LD_VAR 0 6
43794: PPUSH
43795: LD_VAR 0 2
43799: PUSH
43800: LD_VAR 0 2
43804: ARRAY
43805: PPUSH
43806: LD_VAR 0 3
43810: PPUSH
43811: CALL_OW 1
43815: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43816: LD_ADDR_VAR 0 7
43820: PUSH
43821: LD_VAR 0 7
43825: PPUSH
43826: LD_VAR 0 7
43830: PPUSH
43831: LD_VAR 0 6
43835: PPUSH
43836: CALL_OW 1
43840: ST_TO_ADDR
// for i = s_arr downto 2 do
43841: LD_ADDR_VAR 0 5
43845: PUSH
43846: DOUBLE
43847: LD_VAR 0 7
43851: INC
43852: ST_TO_ADDR
43853: LD_INT 2
43855: PUSH
43856: FOR_DOWNTO
43857: IFFALSE 43941
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43859: LD_ADDR_VAR 0 6
43863: PUSH
43864: LD_VAR 0 7
43868: PUSH
43869: LD_VAR 0 5
43873: PUSH
43874: LD_INT 1
43876: MINUS
43877: ARRAY
43878: PPUSH
43879: LD_VAR 0 2
43883: PUSH
43884: LD_VAR 0 5
43888: PUSH
43889: LD_INT 1
43891: MINUS
43892: ARRAY
43893: PPUSH
43894: LD_VAR 0 7
43898: PUSH
43899: LD_VAR 0 5
43903: ARRAY
43904: PPUSH
43905: CALL_OW 1
43909: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43910: LD_ADDR_VAR 0 7
43914: PUSH
43915: LD_VAR 0 7
43919: PPUSH
43920: LD_VAR 0 5
43924: PUSH
43925: LD_INT 1
43927: MINUS
43928: PPUSH
43929: LD_VAR 0 6
43933: PPUSH
43934: CALL_OW 1
43938: ST_TO_ADDR
// end ;
43939: GO 43856
43941: POP
43942: POP
// result := s_arr [ 1 ] ;
43943: LD_ADDR_VAR 0 4
43947: PUSH
43948: LD_VAR 0 7
43952: PUSH
43953: LD_INT 1
43955: ARRAY
43956: ST_TO_ADDR
// end ; end ;
43957: LD_VAR 0 4
43961: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43962: LD_INT 0
43964: PPUSH
43965: PPUSH
// if not list then
43966: LD_VAR 0 1
43970: NOT
43971: IFFALSE 43975
// exit ;
43973: GO 44066
// i := list [ pos1 ] ;
43975: LD_ADDR_VAR 0 5
43979: PUSH
43980: LD_VAR 0 1
43984: PUSH
43985: LD_VAR 0 2
43989: ARRAY
43990: ST_TO_ADDR
// if not i then
43991: LD_VAR 0 5
43995: NOT
43996: IFFALSE 44000
// exit ;
43998: GO 44066
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44000: LD_ADDR_VAR 0 1
44004: PUSH
44005: LD_VAR 0 1
44009: PPUSH
44010: LD_VAR 0 2
44014: PPUSH
44015: LD_VAR 0 1
44019: PUSH
44020: LD_VAR 0 3
44024: ARRAY
44025: PPUSH
44026: CALL_OW 1
44030: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44031: LD_ADDR_VAR 0 1
44035: PUSH
44036: LD_VAR 0 1
44040: PPUSH
44041: LD_VAR 0 3
44045: PPUSH
44046: LD_VAR 0 5
44050: PPUSH
44051: CALL_OW 1
44055: ST_TO_ADDR
// result := list ;
44056: LD_ADDR_VAR 0 4
44060: PUSH
44061: LD_VAR 0 1
44065: ST_TO_ADDR
// end ;
44066: LD_VAR 0 4
44070: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44071: LD_INT 0
44073: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44074: LD_ADDR_VAR 0 5
44078: PUSH
44079: LD_VAR 0 1
44083: PPUSH
44084: CALL_OW 250
44088: PPUSH
44089: LD_VAR 0 1
44093: PPUSH
44094: CALL_OW 251
44098: PPUSH
44099: LD_VAR 0 2
44103: PPUSH
44104: LD_VAR 0 3
44108: PPUSH
44109: LD_VAR 0 4
44113: PPUSH
44114: CALL 44492 0 5
44118: ST_TO_ADDR
// end ;
44119: LD_VAR 0 5
44123: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44124: LD_INT 0
44126: PPUSH
44127: PPUSH
44128: PPUSH
44129: PPUSH
// if not list or not unit then
44130: LD_VAR 0 2
44134: NOT
44135: PUSH
44136: LD_VAR 0 1
44140: NOT
44141: OR
44142: IFFALSE 44146
// exit ;
44144: GO 44487
// result := [ ] ;
44146: LD_ADDR_VAR 0 5
44150: PUSH
44151: EMPTY
44152: ST_TO_ADDR
// for i in list do
44153: LD_ADDR_VAR 0 6
44157: PUSH
44158: LD_VAR 0 2
44162: PUSH
44163: FOR_IN
44164: IFFALSE 44382
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44166: LD_ADDR_VAR 0 8
44170: PUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: LD_VAR 0 6
44180: PUSH
44181: LD_INT 1
44183: ARRAY
44184: PPUSH
44185: LD_VAR 0 6
44189: PUSH
44190: LD_INT 2
44192: ARRAY
44193: PPUSH
44194: CALL_OW 297
44198: ST_TO_ADDR
// if not Count ( result ) then
44199: LD_VAR 0 5
44203: PPUSH
44204: CALL 40776 0 1
44208: NOT
44209: IFFALSE 44242
// begin result := Join ( result , [ i , tmp ] ) ;
44211: LD_ADDR_VAR 0 5
44215: PUSH
44216: LD_VAR 0 5
44220: PPUSH
44221: LD_VAR 0 6
44225: PUSH
44226: LD_VAR 0 8
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PPUSH
44235: CALL 76365 0 2
44239: ST_TO_ADDR
// continue ;
44240: GO 44163
// end ; if result [ result ] [ 2 ] <= tmp then
44242: LD_VAR 0 5
44246: PUSH
44247: LD_VAR 0 5
44251: ARRAY
44252: PUSH
44253: LD_INT 2
44255: ARRAY
44256: PUSH
44257: LD_VAR 0 8
44261: LESSEQUAL
44262: IFFALSE 44295
// result := Join ( result , [ i , tmp ] ) else
44264: LD_ADDR_VAR 0 5
44268: PUSH
44269: LD_VAR 0 5
44273: PPUSH
44274: LD_VAR 0 6
44278: PUSH
44279: LD_VAR 0 8
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PPUSH
44288: CALL 76365 0 2
44292: ST_TO_ADDR
44293: GO 44380
// begin for j := 1 to Count ( result ) do
44295: LD_ADDR_VAR 0 7
44299: PUSH
44300: DOUBLE
44301: LD_INT 1
44303: DEC
44304: ST_TO_ADDR
44305: LD_VAR 0 5
44309: PPUSH
44310: CALL 40776 0 1
44314: PUSH
44315: FOR_TO
44316: IFFALSE 44378
// begin if tmp < result [ j ] [ 2 ] then
44318: LD_VAR 0 8
44322: PUSH
44323: LD_VAR 0 5
44327: PUSH
44328: LD_VAR 0 7
44332: ARRAY
44333: PUSH
44334: LD_INT 2
44336: ARRAY
44337: LESS
44338: IFFALSE 44376
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44340: LD_ADDR_VAR 0 5
44344: PUSH
44345: LD_VAR 0 5
44349: PPUSH
44350: LD_VAR 0 7
44354: PPUSH
44355: LD_VAR 0 6
44359: PUSH
44360: LD_VAR 0 8
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PPUSH
44369: CALL_OW 2
44373: ST_TO_ADDR
// break ;
44374: GO 44378
// end ; end ;
44376: GO 44315
44378: POP
44379: POP
// end ; end ;
44380: GO 44163
44382: POP
44383: POP
// if result and not asc then
44384: LD_VAR 0 5
44388: PUSH
44389: LD_VAR 0 3
44393: NOT
44394: AND
44395: IFFALSE 44412
// result := ReverseArray ( result ) ;
44397: LD_ADDR_VAR 0 5
44401: PUSH
44402: LD_VAR 0 5
44406: PPUSH
44407: CALL 71652 0 1
44411: ST_TO_ADDR
// tmp := [ ] ;
44412: LD_ADDR_VAR 0 8
44416: PUSH
44417: EMPTY
44418: ST_TO_ADDR
// if mode then
44419: LD_VAR 0 4
44423: IFFALSE 44487
// begin for i := 1 to result do
44425: LD_ADDR_VAR 0 6
44429: PUSH
44430: DOUBLE
44431: LD_INT 1
44433: DEC
44434: ST_TO_ADDR
44435: LD_VAR 0 5
44439: PUSH
44440: FOR_TO
44441: IFFALSE 44475
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44443: LD_ADDR_VAR 0 8
44447: PUSH
44448: LD_VAR 0 8
44452: PPUSH
44453: LD_VAR 0 5
44457: PUSH
44458: LD_VAR 0 6
44462: ARRAY
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: PPUSH
44468: CALL 76365 0 2
44472: ST_TO_ADDR
44473: GO 44440
44475: POP
44476: POP
// result := tmp ;
44477: LD_ADDR_VAR 0 5
44481: PUSH
44482: LD_VAR 0 8
44486: ST_TO_ADDR
// end ; end ;
44487: LD_VAR 0 5
44491: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44492: LD_INT 0
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
// if not list then
44498: LD_VAR 0 3
44502: NOT
44503: IFFALSE 44507
// exit ;
44505: GO 44895
// result := [ ] ;
44507: LD_ADDR_VAR 0 6
44511: PUSH
44512: EMPTY
44513: ST_TO_ADDR
// for i in list do
44514: LD_ADDR_VAR 0 7
44518: PUSH
44519: LD_VAR 0 3
44523: PUSH
44524: FOR_IN
44525: IFFALSE 44727
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44527: LD_ADDR_VAR 0 9
44531: PUSH
44532: LD_VAR 0 7
44536: PPUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: LD_VAR 0 2
44546: PPUSH
44547: CALL_OW 297
44551: ST_TO_ADDR
// if not result then
44552: LD_VAR 0 6
44556: NOT
44557: IFFALSE 44583
// result := [ [ i , tmp ] ] else
44559: LD_ADDR_VAR 0 6
44563: PUSH
44564: LD_VAR 0 7
44568: PUSH
44569: LD_VAR 0 9
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: EMPTY
44579: LIST
44580: ST_TO_ADDR
44581: GO 44725
// begin if result [ result ] [ 2 ] < tmp then
44583: LD_VAR 0 6
44587: PUSH
44588: LD_VAR 0 6
44592: ARRAY
44593: PUSH
44594: LD_INT 2
44596: ARRAY
44597: PUSH
44598: LD_VAR 0 9
44602: LESS
44603: IFFALSE 44645
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44605: LD_ADDR_VAR 0 6
44609: PUSH
44610: LD_VAR 0 6
44614: PPUSH
44615: LD_VAR 0 6
44619: PUSH
44620: LD_INT 1
44622: PLUS
44623: PPUSH
44624: LD_VAR 0 7
44628: PUSH
44629: LD_VAR 0 9
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PPUSH
44638: CALL_OW 2
44642: ST_TO_ADDR
44643: GO 44725
// for j = 1 to result do
44645: LD_ADDR_VAR 0 8
44649: PUSH
44650: DOUBLE
44651: LD_INT 1
44653: DEC
44654: ST_TO_ADDR
44655: LD_VAR 0 6
44659: PUSH
44660: FOR_TO
44661: IFFALSE 44723
// begin if tmp < result [ j ] [ 2 ] then
44663: LD_VAR 0 9
44667: PUSH
44668: LD_VAR 0 6
44672: PUSH
44673: LD_VAR 0 8
44677: ARRAY
44678: PUSH
44679: LD_INT 2
44681: ARRAY
44682: LESS
44683: IFFALSE 44721
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44685: LD_ADDR_VAR 0 6
44689: PUSH
44690: LD_VAR 0 6
44694: PPUSH
44695: LD_VAR 0 8
44699: PPUSH
44700: LD_VAR 0 7
44704: PUSH
44705: LD_VAR 0 9
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PPUSH
44714: CALL_OW 2
44718: ST_TO_ADDR
// break ;
44719: GO 44723
// end ; end ;
44721: GO 44660
44723: POP
44724: POP
// end ; end ;
44725: GO 44524
44727: POP
44728: POP
// if result and not asc then
44729: LD_VAR 0 6
44733: PUSH
44734: LD_VAR 0 4
44738: NOT
44739: AND
44740: IFFALSE 44815
// begin tmp := result ;
44742: LD_ADDR_VAR 0 9
44746: PUSH
44747: LD_VAR 0 6
44751: ST_TO_ADDR
// for i = tmp downto 1 do
44752: LD_ADDR_VAR 0 7
44756: PUSH
44757: DOUBLE
44758: LD_VAR 0 9
44762: INC
44763: ST_TO_ADDR
44764: LD_INT 1
44766: PUSH
44767: FOR_DOWNTO
44768: IFFALSE 44813
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44770: LD_ADDR_VAR 0 6
44774: PUSH
44775: LD_VAR 0 6
44779: PPUSH
44780: LD_VAR 0 9
44784: PUSH
44785: LD_VAR 0 7
44789: MINUS
44790: PUSH
44791: LD_INT 1
44793: PLUS
44794: PPUSH
44795: LD_VAR 0 9
44799: PUSH
44800: LD_VAR 0 7
44804: ARRAY
44805: PPUSH
44806: CALL_OW 1
44810: ST_TO_ADDR
44811: GO 44767
44813: POP
44814: POP
// end ; tmp := [ ] ;
44815: LD_ADDR_VAR 0 9
44819: PUSH
44820: EMPTY
44821: ST_TO_ADDR
// if mode then
44822: LD_VAR 0 5
44826: IFFALSE 44895
// begin for i = 1 to result do
44828: LD_ADDR_VAR 0 7
44832: PUSH
44833: DOUBLE
44834: LD_INT 1
44836: DEC
44837: ST_TO_ADDR
44838: LD_VAR 0 6
44842: PUSH
44843: FOR_TO
44844: IFFALSE 44883
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44846: LD_ADDR_VAR 0 9
44850: PUSH
44851: LD_VAR 0 9
44855: PPUSH
44856: LD_VAR 0 7
44860: PPUSH
44861: LD_VAR 0 6
44865: PUSH
44866: LD_VAR 0 7
44870: ARRAY
44871: PUSH
44872: LD_INT 1
44874: ARRAY
44875: PPUSH
44876: CALL_OW 1
44880: ST_TO_ADDR
44881: GO 44843
44883: POP
44884: POP
// result := tmp ;
44885: LD_ADDR_VAR 0 6
44889: PUSH
44890: LD_VAR 0 9
44894: ST_TO_ADDR
// end ; end ;
44895: LD_VAR 0 6
44899: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44900: LD_INT 0
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44908: LD_ADDR_VAR 0 5
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// if not x or not y then
44930: LD_VAR 0 2
44934: NOT
44935: PUSH
44936: LD_VAR 0 3
44940: NOT
44941: OR
44942: IFFALSE 44946
// exit ;
44944: GO 46596
// if not range then
44946: LD_VAR 0 4
44950: NOT
44951: IFFALSE 44961
// range := 10 ;
44953: LD_ADDR_VAR 0 4
44957: PUSH
44958: LD_INT 10
44960: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44961: LD_ADDR_VAR 0 8
44965: PUSH
44966: LD_INT 81
44968: PUSH
44969: LD_VAR 0 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 92
44980: PUSH
44981: LD_VAR 0 2
44985: PUSH
44986: LD_VAR 0 3
44990: PUSH
44991: LD_VAR 0 4
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: LD_INT 21
45007: PUSH
45008: LD_INT 3
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: PPUSH
45024: CALL_OW 69
45028: ST_TO_ADDR
// if not tmp then
45029: LD_VAR 0 8
45033: NOT
45034: IFFALSE 45038
// exit ;
45036: GO 46596
// for i in tmp do
45038: LD_ADDR_VAR 0 6
45042: PUSH
45043: LD_VAR 0 8
45047: PUSH
45048: FOR_IN
45049: IFFALSE 46571
// begin points := [ 0 , 0 , 0 ] ;
45051: LD_ADDR_VAR 0 9
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// bpoints := 1 ;
45070: LD_ADDR_VAR 0 10
45074: PUSH
45075: LD_INT 1
45077: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45078: LD_VAR 0 6
45082: PPUSH
45083: CALL_OW 247
45087: PUSH
45088: LD_INT 1
45090: DOUBLE
45091: EQUAL
45092: IFTRUE 45096
45094: GO 45674
45096: POP
// begin if GetClass ( i ) = 1 then
45097: LD_VAR 0 6
45101: PPUSH
45102: CALL_OW 257
45106: PUSH
45107: LD_INT 1
45109: EQUAL
45110: IFFALSE 45131
// points := [ 10 , 5 , 3 ] ;
45112: LD_ADDR_VAR 0 9
45116: PUSH
45117: LD_INT 10
45119: PUSH
45120: LD_INT 5
45122: PUSH
45123: LD_INT 3
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45131: LD_VAR 0 6
45135: PPUSH
45136: CALL_OW 257
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: LD_INT 4
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: LIST
45154: IN
45155: IFFALSE 45176
// points := [ 3 , 2 , 1 ] ;
45157: LD_ADDR_VAR 0 9
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45176: LD_VAR 0 6
45180: PPUSH
45181: CALL_OW 257
45185: PUSH
45186: LD_INT 5
45188: EQUAL
45189: IFFALSE 45210
// points := [ 130 , 5 , 2 ] ;
45191: LD_ADDR_VAR 0 9
45195: PUSH
45196: LD_INT 130
45198: PUSH
45199: LD_INT 5
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45210: LD_VAR 0 6
45214: PPUSH
45215: CALL_OW 257
45219: PUSH
45220: LD_INT 8
45222: EQUAL
45223: IFFALSE 45244
// points := [ 35 , 35 , 30 ] ;
45225: LD_ADDR_VAR 0 9
45229: PUSH
45230: LD_INT 35
45232: PUSH
45233: LD_INT 35
45235: PUSH
45236: LD_INT 30
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45244: LD_VAR 0 6
45248: PPUSH
45249: CALL_OW 257
45253: PUSH
45254: LD_INT 9
45256: EQUAL
45257: IFFALSE 45278
// points := [ 20 , 55 , 40 ] ;
45259: LD_ADDR_VAR 0 9
45263: PUSH
45264: LD_INT 20
45266: PUSH
45267: LD_INT 55
45269: PUSH
45270: LD_INT 40
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: LIST
45277: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45278: LD_VAR 0 6
45282: PPUSH
45283: CALL_OW 257
45287: PUSH
45288: LD_INT 12
45290: PUSH
45291: LD_INT 16
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: IN
45298: IFFALSE 45319
// points := [ 5 , 3 , 2 ] ;
45300: LD_ADDR_VAR 0 9
45304: PUSH
45305: LD_INT 5
45307: PUSH
45308: LD_INT 3
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45319: LD_VAR 0 6
45323: PPUSH
45324: CALL_OW 257
45328: PUSH
45329: LD_INT 17
45331: EQUAL
45332: IFFALSE 45353
// points := [ 100 , 50 , 75 ] ;
45334: LD_ADDR_VAR 0 9
45338: PUSH
45339: LD_INT 100
45341: PUSH
45342: LD_INT 50
45344: PUSH
45345: LD_INT 75
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45353: LD_VAR 0 6
45357: PPUSH
45358: CALL_OW 257
45362: PUSH
45363: LD_INT 15
45365: EQUAL
45366: IFFALSE 45387
// points := [ 10 , 5 , 3 ] ;
45368: LD_ADDR_VAR 0 9
45372: PUSH
45373: LD_INT 10
45375: PUSH
45376: LD_INT 5
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45387: LD_VAR 0 6
45391: PPUSH
45392: CALL_OW 257
45396: PUSH
45397: LD_INT 14
45399: EQUAL
45400: IFFALSE 45421
// points := [ 10 , 0 , 0 ] ;
45402: LD_ADDR_VAR 0 9
45406: PUSH
45407: LD_INT 10
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45421: LD_VAR 0 6
45425: PPUSH
45426: CALL_OW 257
45430: PUSH
45431: LD_INT 11
45433: EQUAL
45434: IFFALSE 45455
// points := [ 30 , 10 , 5 ] ;
45436: LD_ADDR_VAR 0 9
45440: PUSH
45441: LD_INT 30
45443: PUSH
45444: LD_INT 10
45446: PUSH
45447: LD_INT 5
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: LIST
45454: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45455: LD_VAR 0 1
45459: PPUSH
45460: LD_INT 5
45462: PPUSH
45463: CALL_OW 321
45467: PUSH
45468: LD_INT 2
45470: EQUAL
45471: IFFALSE 45488
// bpoints := bpoints * 1.8 ;
45473: LD_ADDR_VAR 0 10
45477: PUSH
45478: LD_VAR 0 10
45482: PUSH
45483: LD_REAL  1.80000000000000E+0000
45486: MUL
45487: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45488: LD_VAR 0 6
45492: PPUSH
45493: CALL_OW 257
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: LD_INT 4
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: IN
45516: PUSH
45517: LD_VAR 0 1
45521: PPUSH
45522: LD_INT 51
45524: PPUSH
45525: CALL_OW 321
45529: PUSH
45530: LD_INT 2
45532: EQUAL
45533: AND
45534: IFFALSE 45551
// bpoints := bpoints * 1.2 ;
45536: LD_ADDR_VAR 0 10
45540: PUSH
45541: LD_VAR 0 10
45545: PUSH
45546: LD_REAL  1.20000000000000E+0000
45549: MUL
45550: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45551: LD_VAR 0 6
45555: PPUSH
45556: CALL_OW 257
45560: PUSH
45561: LD_INT 5
45563: PUSH
45564: LD_INT 7
45566: PUSH
45567: LD_INT 9
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: IN
45575: PUSH
45576: LD_VAR 0 1
45580: PPUSH
45581: LD_INT 52
45583: PPUSH
45584: CALL_OW 321
45588: PUSH
45589: LD_INT 2
45591: EQUAL
45592: AND
45593: IFFALSE 45610
// bpoints := bpoints * 1.5 ;
45595: LD_ADDR_VAR 0 10
45599: PUSH
45600: LD_VAR 0 10
45604: PUSH
45605: LD_REAL  1.50000000000000E+0000
45608: MUL
45609: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45610: LD_VAR 0 1
45614: PPUSH
45615: LD_INT 66
45617: PPUSH
45618: CALL_OW 321
45622: PUSH
45623: LD_INT 2
45625: EQUAL
45626: IFFALSE 45643
// bpoints := bpoints * 1.1 ;
45628: LD_ADDR_VAR 0 10
45632: PUSH
45633: LD_VAR 0 10
45637: PUSH
45638: LD_REAL  1.10000000000000E+0000
45641: MUL
45642: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45643: LD_ADDR_VAR 0 10
45647: PUSH
45648: LD_VAR 0 10
45652: PUSH
45653: LD_VAR 0 6
45657: PPUSH
45658: LD_INT 1
45660: PPUSH
45661: CALL_OW 259
45665: PUSH
45666: LD_REAL  1.15000000000000E+0000
45669: MUL
45670: MUL
45671: ST_TO_ADDR
// end ; unit_vehicle :
45672: GO 46500
45674: LD_INT 2
45676: DOUBLE
45677: EQUAL
45678: IFTRUE 45682
45680: GO 46488
45682: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45683: LD_VAR 0 6
45687: PPUSH
45688: CALL_OW 264
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 42
45698: PUSH
45699: LD_INT 24
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: IN
45707: IFFALSE 45728
// points := [ 25 , 5 , 3 ] ;
45709: LD_ADDR_VAR 0 9
45713: PUSH
45714: LD_INT 25
45716: PUSH
45717: LD_INT 5
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45728: LD_VAR 0 6
45732: PPUSH
45733: CALL_OW 264
45737: PUSH
45738: LD_INT 4
45740: PUSH
45741: LD_INT 43
45743: PUSH
45744: LD_INT 25
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: IN
45752: IFFALSE 45773
// points := [ 40 , 15 , 5 ] ;
45754: LD_ADDR_VAR 0 9
45758: PUSH
45759: LD_INT 40
45761: PUSH
45762: LD_INT 15
45764: PUSH
45765: LD_INT 5
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45773: LD_VAR 0 6
45777: PPUSH
45778: CALL_OW 264
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: LD_INT 23
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: IN
45793: IFFALSE 45814
// points := [ 7 , 25 , 8 ] ;
45795: LD_ADDR_VAR 0 9
45799: PUSH
45800: LD_INT 7
45802: PUSH
45803: LD_INT 25
45805: PUSH
45806: LD_INT 8
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45814: LD_VAR 0 6
45818: PPUSH
45819: CALL_OW 264
45823: PUSH
45824: LD_INT 5
45826: PUSH
45827: LD_INT 27
45829: PUSH
45830: LD_INT 44
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: LIST
45837: IN
45838: IFFALSE 45859
// points := [ 14 , 50 , 16 ] ;
45840: LD_ADDR_VAR 0 9
45844: PUSH
45845: LD_INT 14
45847: PUSH
45848: LD_INT 50
45850: PUSH
45851: LD_INT 16
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45859: LD_VAR 0 6
45863: PPUSH
45864: CALL_OW 264
45868: PUSH
45869: LD_INT 6
45871: PUSH
45872: LD_INT 46
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: IN
45879: IFFALSE 45900
// points := [ 32 , 120 , 70 ] ;
45881: LD_ADDR_VAR 0 9
45885: PUSH
45886: LD_INT 32
45888: PUSH
45889: LD_INT 120
45891: PUSH
45892: LD_INT 70
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45900: LD_VAR 0 6
45904: PPUSH
45905: CALL_OW 264
45909: PUSH
45910: LD_INT 7
45912: PUSH
45913: LD_INT 28
45915: PUSH
45916: LD_INT 45
45918: PUSH
45919: LD_INT 92
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: IN
45928: IFFALSE 45949
// points := [ 35 , 20 , 45 ] ;
45930: LD_ADDR_VAR 0 9
45934: PUSH
45935: LD_INT 35
45937: PUSH
45938: LD_INT 20
45940: PUSH
45941: LD_INT 45
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45949: LD_VAR 0 6
45953: PPUSH
45954: CALL_OW 264
45958: PUSH
45959: LD_INT 47
45961: PUSH
45962: EMPTY
45963: LIST
45964: IN
45965: IFFALSE 45986
// points := [ 67 , 45 , 75 ] ;
45967: LD_ADDR_VAR 0 9
45971: PUSH
45972: LD_INT 67
45974: PUSH
45975: LD_INT 45
45977: PUSH
45978: LD_INT 75
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45986: LD_VAR 0 6
45990: PPUSH
45991: CALL_OW 264
45995: PUSH
45996: LD_INT 26
45998: PUSH
45999: EMPTY
46000: LIST
46001: IN
46002: IFFALSE 46023
// points := [ 120 , 30 , 80 ] ;
46004: LD_ADDR_VAR 0 9
46008: PUSH
46009: LD_INT 120
46011: PUSH
46012: LD_INT 30
46014: PUSH
46015: LD_INT 80
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46023: LD_VAR 0 6
46027: PPUSH
46028: CALL_OW 264
46032: PUSH
46033: LD_INT 22
46035: PUSH
46036: EMPTY
46037: LIST
46038: IN
46039: IFFALSE 46060
// points := [ 40 , 1 , 1 ] ;
46041: LD_ADDR_VAR 0 9
46045: PUSH
46046: LD_INT 40
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: LIST
46059: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46060: LD_VAR 0 6
46064: PPUSH
46065: CALL_OW 264
46069: PUSH
46070: LD_INT 29
46072: PUSH
46073: EMPTY
46074: LIST
46075: IN
46076: IFFALSE 46097
// points := [ 70 , 200 , 400 ] ;
46078: LD_ADDR_VAR 0 9
46082: PUSH
46083: LD_INT 70
46085: PUSH
46086: LD_INT 200
46088: PUSH
46089: LD_INT 400
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46097: LD_VAR 0 6
46101: PPUSH
46102: CALL_OW 264
46106: PUSH
46107: LD_INT 14
46109: PUSH
46110: LD_INT 53
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: IN
46117: IFFALSE 46138
// points := [ 40 , 10 , 20 ] ;
46119: LD_ADDR_VAR 0 9
46123: PUSH
46124: LD_INT 40
46126: PUSH
46127: LD_INT 10
46129: PUSH
46130: LD_INT 20
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46138: LD_VAR 0 6
46142: PPUSH
46143: CALL_OW 264
46147: PUSH
46148: LD_INT 9
46150: PUSH
46151: EMPTY
46152: LIST
46153: IN
46154: IFFALSE 46175
// points := [ 5 , 70 , 20 ] ;
46156: LD_ADDR_VAR 0 9
46160: PUSH
46161: LD_INT 5
46163: PUSH
46164: LD_INT 70
46166: PUSH
46167: LD_INT 20
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46175: LD_VAR 0 6
46179: PPUSH
46180: CALL_OW 264
46184: PUSH
46185: LD_INT 10
46187: PUSH
46188: EMPTY
46189: LIST
46190: IN
46191: IFFALSE 46212
// points := [ 35 , 110 , 70 ] ;
46193: LD_ADDR_VAR 0 9
46197: PUSH
46198: LD_INT 35
46200: PUSH
46201: LD_INT 110
46203: PUSH
46204: LD_INT 70
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46212: LD_VAR 0 6
46216: PPUSH
46217: CALL_OW 265
46221: PUSH
46222: LD_INT 25
46224: EQUAL
46225: IFFALSE 46246
// points := [ 80 , 65 , 100 ] ;
46227: LD_ADDR_VAR 0 9
46231: PUSH
46232: LD_INT 80
46234: PUSH
46235: LD_INT 65
46237: PUSH
46238: LD_INT 100
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: LIST
46245: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46246: LD_VAR 0 6
46250: PPUSH
46251: CALL_OW 263
46255: PUSH
46256: LD_INT 1
46258: EQUAL
46259: IFFALSE 46294
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46261: LD_ADDR_VAR 0 10
46265: PUSH
46266: LD_VAR 0 10
46270: PUSH
46271: LD_VAR 0 6
46275: PPUSH
46276: CALL_OW 311
46280: PPUSH
46281: LD_INT 3
46283: PPUSH
46284: CALL_OW 259
46288: PUSH
46289: LD_INT 4
46291: MUL
46292: MUL
46293: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46294: LD_VAR 0 6
46298: PPUSH
46299: CALL_OW 263
46303: PUSH
46304: LD_INT 2
46306: EQUAL
46307: IFFALSE 46358
// begin j := IsControledBy ( i ) ;
46309: LD_ADDR_VAR 0 7
46313: PUSH
46314: LD_VAR 0 6
46318: PPUSH
46319: CALL_OW 312
46323: ST_TO_ADDR
// if j then
46324: LD_VAR 0 7
46328: IFFALSE 46358
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46330: LD_ADDR_VAR 0 10
46334: PUSH
46335: LD_VAR 0 10
46339: PUSH
46340: LD_VAR 0 7
46344: PPUSH
46345: LD_INT 3
46347: PPUSH
46348: CALL_OW 259
46352: PUSH
46353: LD_INT 3
46355: MUL
46356: MUL
46357: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46358: LD_VAR 0 6
46362: PPUSH
46363: CALL_OW 264
46367: PUSH
46368: LD_INT 5
46370: PUSH
46371: LD_INT 6
46373: PUSH
46374: LD_INT 46
46376: PUSH
46377: LD_INT 44
46379: PUSH
46380: LD_INT 47
46382: PUSH
46383: LD_INT 45
46385: PUSH
46386: LD_INT 28
46388: PUSH
46389: LD_INT 7
46391: PUSH
46392: LD_INT 27
46394: PUSH
46395: LD_INT 29
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: IN
46410: PUSH
46411: LD_VAR 0 1
46415: PPUSH
46416: LD_INT 52
46418: PPUSH
46419: CALL_OW 321
46423: PUSH
46424: LD_INT 2
46426: EQUAL
46427: AND
46428: IFFALSE 46445
// bpoints := bpoints * 1.2 ;
46430: LD_ADDR_VAR 0 10
46434: PUSH
46435: LD_VAR 0 10
46439: PUSH
46440: LD_REAL  1.20000000000000E+0000
46443: MUL
46444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46445: LD_VAR 0 6
46449: PPUSH
46450: CALL_OW 264
46454: PUSH
46455: LD_INT 6
46457: PUSH
46458: LD_INT 46
46460: PUSH
46461: LD_INT 47
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: IN
46469: IFFALSE 46486
// bpoints := bpoints * 1.2 ;
46471: LD_ADDR_VAR 0 10
46475: PUSH
46476: LD_VAR 0 10
46480: PUSH
46481: LD_REAL  1.20000000000000E+0000
46484: MUL
46485: ST_TO_ADDR
// end ; unit_building :
46486: GO 46500
46488: LD_INT 3
46490: DOUBLE
46491: EQUAL
46492: IFTRUE 46496
46494: GO 46499
46496: POP
// ; end ;
46497: GO 46500
46499: POP
// for j = 1 to 3 do
46500: LD_ADDR_VAR 0 7
46504: PUSH
46505: DOUBLE
46506: LD_INT 1
46508: DEC
46509: ST_TO_ADDR
46510: LD_INT 3
46512: PUSH
46513: FOR_TO
46514: IFFALSE 46567
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46516: LD_ADDR_VAR 0 5
46520: PUSH
46521: LD_VAR 0 5
46525: PPUSH
46526: LD_VAR 0 7
46530: PPUSH
46531: LD_VAR 0 5
46535: PUSH
46536: LD_VAR 0 7
46540: ARRAY
46541: PUSH
46542: LD_VAR 0 9
46546: PUSH
46547: LD_VAR 0 7
46551: ARRAY
46552: PUSH
46553: LD_VAR 0 10
46557: MUL
46558: PLUS
46559: PPUSH
46560: CALL_OW 1
46564: ST_TO_ADDR
46565: GO 46513
46567: POP
46568: POP
// end ;
46569: GO 45048
46571: POP
46572: POP
// result := Replace ( result , 4 , tmp ) ;
46573: LD_ADDR_VAR 0 5
46577: PUSH
46578: LD_VAR 0 5
46582: PPUSH
46583: LD_INT 4
46585: PPUSH
46586: LD_VAR 0 8
46590: PPUSH
46591: CALL_OW 1
46595: ST_TO_ADDR
// end ;
46596: LD_VAR 0 5
46600: RET
// export function DangerAtRange ( unit , range ) ; begin
46601: LD_INT 0
46603: PPUSH
// if not unit then
46604: LD_VAR 0 1
46608: NOT
46609: IFFALSE 46613
// exit ;
46611: GO 46658
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46613: LD_ADDR_VAR 0 3
46617: PUSH
46618: LD_VAR 0 1
46622: PPUSH
46623: CALL_OW 255
46627: PPUSH
46628: LD_VAR 0 1
46632: PPUSH
46633: CALL_OW 250
46637: PPUSH
46638: LD_VAR 0 1
46642: PPUSH
46643: CALL_OW 251
46647: PPUSH
46648: LD_VAR 0 2
46652: PPUSH
46653: CALL 44900 0 4
46657: ST_TO_ADDR
// end ;
46658: LD_VAR 0 3
46662: RET
// export function DangerInArea ( side , area ) ; begin
46663: LD_INT 0
46665: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46666: LD_ADDR_VAR 0 3
46670: PUSH
46671: LD_VAR 0 2
46675: PPUSH
46676: LD_INT 81
46678: PUSH
46679: LD_VAR 0 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PPUSH
46688: CALL_OW 70
46692: ST_TO_ADDR
// end ;
46693: LD_VAR 0 3
46697: RET
// export function IsExtension ( b ) ; begin
46698: LD_INT 0
46700: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46701: LD_ADDR_VAR 0 2
46705: PUSH
46706: LD_VAR 0 1
46710: PUSH
46711: LD_INT 23
46713: PUSH
46714: LD_INT 20
46716: PUSH
46717: LD_INT 22
46719: PUSH
46720: LD_INT 17
46722: PUSH
46723: LD_INT 24
46725: PUSH
46726: LD_INT 21
46728: PUSH
46729: LD_INT 19
46731: PUSH
46732: LD_INT 16
46734: PUSH
46735: LD_INT 25
46737: PUSH
46738: LD_INT 18
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: IN
46753: ST_TO_ADDR
// end ;
46754: LD_VAR 0 2
46758: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46759: LD_INT 0
46761: PPUSH
46762: PPUSH
46763: PPUSH
// result := [ ] ;
46764: LD_ADDR_VAR 0 4
46768: PUSH
46769: EMPTY
46770: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46771: LD_ADDR_VAR 0 5
46775: PUSH
46776: LD_VAR 0 2
46780: PPUSH
46781: LD_INT 21
46783: PUSH
46784: LD_INT 3
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PPUSH
46791: CALL_OW 70
46795: ST_TO_ADDR
// if not tmp then
46796: LD_VAR 0 5
46800: NOT
46801: IFFALSE 46805
// exit ;
46803: GO 46869
// if checkLink then
46805: LD_VAR 0 3
46809: IFFALSE 46859
// begin for i in tmp do
46811: LD_ADDR_VAR 0 6
46815: PUSH
46816: LD_VAR 0 5
46820: PUSH
46821: FOR_IN
46822: IFFALSE 46857
// if GetBase ( i ) <> base then
46824: LD_VAR 0 6
46828: PPUSH
46829: CALL_OW 274
46833: PUSH
46834: LD_VAR 0 1
46838: NONEQUAL
46839: IFFALSE 46855
// ComLinkToBase ( base , i ) ;
46841: LD_VAR 0 1
46845: PPUSH
46846: LD_VAR 0 6
46850: PPUSH
46851: CALL_OW 169
46855: GO 46821
46857: POP
46858: POP
// end ; result := tmp ;
46859: LD_ADDR_VAR 0 4
46863: PUSH
46864: LD_VAR 0 5
46868: ST_TO_ADDR
// end ;
46869: LD_VAR 0 4
46873: RET
// export function ComComplete ( units , b ) ; var i ; begin
46874: LD_INT 0
46876: PPUSH
46877: PPUSH
// if not units then
46878: LD_VAR 0 1
46882: NOT
46883: IFFALSE 46887
// exit ;
46885: GO 46977
// for i in units do
46887: LD_ADDR_VAR 0 4
46891: PUSH
46892: LD_VAR 0 1
46896: PUSH
46897: FOR_IN
46898: IFFALSE 46975
// if BuildingStatus ( b ) = bs_build then
46900: LD_VAR 0 2
46904: PPUSH
46905: CALL_OW 461
46909: PUSH
46910: LD_INT 1
46912: EQUAL
46913: IFFALSE 46973
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46915: LD_VAR 0 4
46919: PPUSH
46920: LD_STRING h
46922: PUSH
46923: LD_VAR 0 2
46927: PPUSH
46928: CALL_OW 250
46932: PUSH
46933: LD_VAR 0 2
46937: PPUSH
46938: CALL_OW 251
46942: PUSH
46943: LD_VAR 0 2
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: PPUSH
46969: CALL_OW 446
46973: GO 46897
46975: POP
46976: POP
// end ;
46977: LD_VAR 0 3
46981: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46982: LD_INT 0
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46990: LD_VAR 0 1
46994: NOT
46995: PUSH
46996: LD_VAR 0 1
47000: PPUSH
47001: CALL_OW 263
47005: PUSH
47006: LD_INT 2
47008: NONEQUAL
47009: OR
47010: IFFALSE 47014
// exit ;
47012: GO 47330
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47014: LD_ADDR_VAR 0 6
47018: PUSH
47019: LD_INT 22
47021: PUSH
47022: LD_VAR 0 1
47026: PPUSH
47027: CALL_OW 255
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 30
47041: PUSH
47042: LD_INT 36
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 34
47051: PUSH
47052: LD_INT 31
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PPUSH
47068: CALL_OW 69
47072: ST_TO_ADDR
// if not tmp then
47073: LD_VAR 0 6
47077: NOT
47078: IFFALSE 47082
// exit ;
47080: GO 47330
// result := [ ] ;
47082: LD_ADDR_VAR 0 2
47086: PUSH
47087: EMPTY
47088: ST_TO_ADDR
// for i in tmp do
47089: LD_ADDR_VAR 0 3
47093: PUSH
47094: LD_VAR 0 6
47098: PUSH
47099: FOR_IN
47100: IFFALSE 47171
// begin t := UnitsInside ( i ) ;
47102: LD_ADDR_VAR 0 4
47106: PUSH
47107: LD_VAR 0 3
47111: PPUSH
47112: CALL_OW 313
47116: ST_TO_ADDR
// if t then
47117: LD_VAR 0 4
47121: IFFALSE 47169
// for j in t do
47123: LD_ADDR_VAR 0 7
47127: PUSH
47128: LD_VAR 0 4
47132: PUSH
47133: FOR_IN
47134: IFFALSE 47167
// result := Replace ( result , result + 1 , j ) ;
47136: LD_ADDR_VAR 0 2
47140: PUSH
47141: LD_VAR 0 2
47145: PPUSH
47146: LD_VAR 0 2
47150: PUSH
47151: LD_INT 1
47153: PLUS
47154: PPUSH
47155: LD_VAR 0 7
47159: PPUSH
47160: CALL_OW 1
47164: ST_TO_ADDR
47165: GO 47133
47167: POP
47168: POP
// end ;
47169: GO 47099
47171: POP
47172: POP
// if not result then
47173: LD_VAR 0 2
47177: NOT
47178: IFFALSE 47182
// exit ;
47180: GO 47330
// mech := result [ 1 ] ;
47182: LD_ADDR_VAR 0 5
47186: PUSH
47187: LD_VAR 0 2
47191: PUSH
47192: LD_INT 1
47194: ARRAY
47195: ST_TO_ADDR
// if result > 1 then
47196: LD_VAR 0 2
47200: PUSH
47201: LD_INT 1
47203: GREATER
47204: IFFALSE 47316
// begin for i = 2 to result do
47206: LD_ADDR_VAR 0 3
47210: PUSH
47211: DOUBLE
47212: LD_INT 2
47214: DEC
47215: ST_TO_ADDR
47216: LD_VAR 0 2
47220: PUSH
47221: FOR_TO
47222: IFFALSE 47314
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47224: LD_ADDR_VAR 0 4
47228: PUSH
47229: LD_VAR 0 2
47233: PUSH
47234: LD_VAR 0 3
47238: ARRAY
47239: PPUSH
47240: LD_INT 3
47242: PPUSH
47243: CALL_OW 259
47247: PUSH
47248: LD_VAR 0 2
47252: PUSH
47253: LD_VAR 0 3
47257: ARRAY
47258: PPUSH
47259: CALL_OW 432
47263: MINUS
47264: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47265: LD_VAR 0 4
47269: PUSH
47270: LD_VAR 0 5
47274: PPUSH
47275: LD_INT 3
47277: PPUSH
47278: CALL_OW 259
47282: PUSH
47283: LD_VAR 0 5
47287: PPUSH
47288: CALL_OW 432
47292: MINUS
47293: GREATEREQUAL
47294: IFFALSE 47312
// mech := result [ i ] ;
47296: LD_ADDR_VAR 0 5
47300: PUSH
47301: LD_VAR 0 2
47305: PUSH
47306: LD_VAR 0 3
47310: ARRAY
47311: ST_TO_ADDR
// end ;
47312: GO 47221
47314: POP
47315: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47316: LD_VAR 0 1
47320: PPUSH
47321: LD_VAR 0 5
47325: PPUSH
47326: CALL_OW 135
// end ;
47330: LD_VAR 0 2
47334: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47335: LD_INT 0
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
47344: PPUSH
47345: PPUSH
47346: PPUSH
47347: PPUSH
47348: PPUSH
47349: PPUSH
// result := [ ] ;
47350: LD_ADDR_VAR 0 7
47354: PUSH
47355: EMPTY
47356: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47357: LD_VAR 0 1
47361: PPUSH
47362: CALL_OW 266
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: IN
47377: NOT
47378: IFFALSE 47382
// exit ;
47380: GO 49016
// if name then
47382: LD_VAR 0 3
47386: IFFALSE 47402
// SetBName ( base_dep , name ) ;
47388: LD_VAR 0 1
47392: PPUSH
47393: LD_VAR 0 3
47397: PPUSH
47398: CALL_OW 500
// base := GetBase ( base_dep ) ;
47402: LD_ADDR_VAR 0 15
47406: PUSH
47407: LD_VAR 0 1
47411: PPUSH
47412: CALL_OW 274
47416: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47417: LD_ADDR_VAR 0 16
47421: PUSH
47422: LD_VAR 0 1
47426: PPUSH
47427: CALL_OW 255
47431: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47432: LD_ADDR_VAR 0 17
47436: PUSH
47437: LD_VAR 0 1
47441: PPUSH
47442: CALL_OW 248
47446: ST_TO_ADDR
// if sources then
47447: LD_VAR 0 5
47451: IFFALSE 47498
// for i = 1 to 3 do
47453: LD_ADDR_VAR 0 8
47457: PUSH
47458: DOUBLE
47459: LD_INT 1
47461: DEC
47462: ST_TO_ADDR
47463: LD_INT 3
47465: PUSH
47466: FOR_TO
47467: IFFALSE 47496
// AddResourceType ( base , i , sources [ i ] ) ;
47469: LD_VAR 0 15
47473: PPUSH
47474: LD_VAR 0 8
47478: PPUSH
47479: LD_VAR 0 5
47483: PUSH
47484: LD_VAR 0 8
47488: ARRAY
47489: PPUSH
47490: CALL_OW 276
47494: GO 47466
47496: POP
47497: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47498: LD_ADDR_VAR 0 18
47502: PUSH
47503: LD_VAR 0 15
47507: PPUSH
47508: LD_VAR 0 2
47512: PPUSH
47513: LD_INT 1
47515: PPUSH
47516: CALL 46759 0 3
47520: ST_TO_ADDR
// InitHc ;
47521: CALL_OW 19
// InitUc ;
47525: CALL_OW 18
// uc_side := side ;
47529: LD_ADDR_OWVAR 20
47533: PUSH
47534: LD_VAR 0 16
47538: ST_TO_ADDR
// uc_nation := nation ;
47539: LD_ADDR_OWVAR 21
47543: PUSH
47544: LD_VAR 0 17
47548: ST_TO_ADDR
// if buildings then
47549: LD_VAR 0 18
47553: IFFALSE 48875
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47555: LD_ADDR_VAR 0 19
47559: PUSH
47560: LD_VAR 0 18
47564: PPUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 30
47570: PUSH
47571: LD_INT 29
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 30
47580: PUSH
47581: LD_INT 30
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: LIST
47592: PPUSH
47593: CALL_OW 72
47597: ST_TO_ADDR
// if tmp then
47598: LD_VAR 0 19
47602: IFFALSE 47650
// for i in tmp do
47604: LD_ADDR_VAR 0 8
47608: PUSH
47609: LD_VAR 0 19
47613: PUSH
47614: FOR_IN
47615: IFFALSE 47648
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47617: LD_VAR 0 8
47621: PPUSH
47622: CALL_OW 250
47626: PPUSH
47627: LD_VAR 0 8
47631: PPUSH
47632: CALL_OW 251
47636: PPUSH
47637: LD_VAR 0 16
47641: PPUSH
47642: CALL_OW 441
47646: GO 47614
47648: POP
47649: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47650: LD_VAR 0 18
47654: PPUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 30
47660: PUSH
47661: LD_INT 32
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 30
47670: PUSH
47671: LD_INT 33
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: LIST
47682: PPUSH
47683: CALL_OW 72
47687: IFFALSE 47775
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47689: LD_ADDR_VAR 0 8
47693: PUSH
47694: LD_VAR 0 18
47698: PPUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 30
47704: PUSH
47705: LD_INT 32
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 30
47714: PUSH
47715: LD_INT 33
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: LIST
47726: PPUSH
47727: CALL_OW 72
47731: PUSH
47732: FOR_IN
47733: IFFALSE 47773
// begin if not GetBWeapon ( i ) then
47735: LD_VAR 0 8
47739: PPUSH
47740: CALL_OW 269
47744: NOT
47745: IFFALSE 47771
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47747: LD_VAR 0 8
47751: PPUSH
47752: LD_VAR 0 8
47756: PPUSH
47757: LD_VAR 0 2
47761: PPUSH
47762: CALL 49021 0 2
47766: PPUSH
47767: CALL_OW 431
// end ;
47771: GO 47732
47773: POP
47774: POP
// end ; for i = 1 to personel do
47775: LD_ADDR_VAR 0 8
47779: PUSH
47780: DOUBLE
47781: LD_INT 1
47783: DEC
47784: ST_TO_ADDR
47785: LD_VAR 0 6
47789: PUSH
47790: FOR_TO
47791: IFFALSE 48855
// begin if i > 4 then
47793: LD_VAR 0 8
47797: PUSH
47798: LD_INT 4
47800: GREATER
47801: IFFALSE 47805
// break ;
47803: GO 48855
// case i of 1 :
47805: LD_VAR 0 8
47809: PUSH
47810: LD_INT 1
47812: DOUBLE
47813: EQUAL
47814: IFTRUE 47818
47816: GO 47898
47818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47819: LD_ADDR_VAR 0 12
47823: PUSH
47824: LD_VAR 0 18
47828: PPUSH
47829: LD_INT 22
47831: PUSH
47832: LD_VAR 0 16
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 58
47843: PUSH
47844: EMPTY
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 30
47852: PUSH
47853: LD_INT 32
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 30
47862: PUSH
47863: LD_INT 4
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 30
47872: PUSH
47873: LD_INT 5
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: LIST
47890: PPUSH
47891: CALL_OW 72
47895: ST_TO_ADDR
47896: GO 48120
47898: LD_INT 2
47900: DOUBLE
47901: EQUAL
47902: IFTRUE 47906
47904: GO 47968
47906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47907: LD_ADDR_VAR 0 12
47911: PUSH
47912: LD_VAR 0 18
47916: PPUSH
47917: LD_INT 22
47919: PUSH
47920: LD_VAR 0 16
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 30
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 30
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PPUSH
47961: CALL_OW 72
47965: ST_TO_ADDR
47966: GO 48120
47968: LD_INT 3
47970: DOUBLE
47971: EQUAL
47972: IFTRUE 47976
47974: GO 48038
47976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47977: LD_ADDR_VAR 0 12
47981: PUSH
47982: LD_VAR 0 18
47986: PPUSH
47987: LD_INT 22
47989: PUSH
47990: LD_VAR 0 16
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 30
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 30
48014: PUSH
48015: LD_INT 3
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PPUSH
48031: CALL_OW 72
48035: ST_TO_ADDR
48036: GO 48120
48038: LD_INT 4
48040: DOUBLE
48041: EQUAL
48042: IFTRUE 48046
48044: GO 48119
48046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48047: LD_ADDR_VAR 0 12
48051: PUSH
48052: LD_VAR 0 18
48056: PPUSH
48057: LD_INT 22
48059: PUSH
48060: LD_VAR 0 16
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 30
48074: PUSH
48075: LD_INT 6
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 30
48084: PUSH
48085: LD_INT 7
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 30
48094: PUSH
48095: LD_INT 8
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PPUSH
48112: CALL_OW 72
48116: ST_TO_ADDR
48117: GO 48120
48119: POP
// if i = 1 then
48120: LD_VAR 0 8
48124: PUSH
48125: LD_INT 1
48127: EQUAL
48128: IFFALSE 48239
// begin tmp := [ ] ;
48130: LD_ADDR_VAR 0 19
48134: PUSH
48135: EMPTY
48136: ST_TO_ADDR
// for j in f do
48137: LD_ADDR_VAR 0 9
48141: PUSH
48142: LD_VAR 0 12
48146: PUSH
48147: FOR_IN
48148: IFFALSE 48221
// if GetBType ( j ) = b_bunker then
48150: LD_VAR 0 9
48154: PPUSH
48155: CALL_OW 266
48159: PUSH
48160: LD_INT 32
48162: EQUAL
48163: IFFALSE 48190
// tmp := Insert ( tmp , 1 , j ) else
48165: LD_ADDR_VAR 0 19
48169: PUSH
48170: LD_VAR 0 19
48174: PPUSH
48175: LD_INT 1
48177: PPUSH
48178: LD_VAR 0 9
48182: PPUSH
48183: CALL_OW 2
48187: ST_TO_ADDR
48188: GO 48219
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48190: LD_ADDR_VAR 0 19
48194: PUSH
48195: LD_VAR 0 19
48199: PPUSH
48200: LD_VAR 0 19
48204: PUSH
48205: LD_INT 1
48207: PLUS
48208: PPUSH
48209: LD_VAR 0 9
48213: PPUSH
48214: CALL_OW 2
48218: ST_TO_ADDR
48219: GO 48147
48221: POP
48222: POP
// if tmp then
48223: LD_VAR 0 19
48227: IFFALSE 48239
// f := tmp ;
48229: LD_ADDR_VAR 0 12
48233: PUSH
48234: LD_VAR 0 19
48238: ST_TO_ADDR
// end ; x := personel [ i ] ;
48239: LD_ADDR_VAR 0 13
48243: PUSH
48244: LD_VAR 0 6
48248: PUSH
48249: LD_VAR 0 8
48253: ARRAY
48254: ST_TO_ADDR
// if x = - 1 then
48255: LD_VAR 0 13
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: EQUAL
48264: IFFALSE 48473
// begin for j in f do
48266: LD_ADDR_VAR 0 9
48270: PUSH
48271: LD_VAR 0 12
48275: PUSH
48276: FOR_IN
48277: IFFALSE 48469
// repeat InitHc ;
48279: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48283: LD_VAR 0 9
48287: PPUSH
48288: CALL_OW 266
48292: PUSH
48293: LD_INT 5
48295: EQUAL
48296: IFFALSE 48366
// begin if UnitsInside ( j ) < 3 then
48298: LD_VAR 0 9
48302: PPUSH
48303: CALL_OW 313
48307: PUSH
48308: LD_INT 3
48310: LESS
48311: IFFALSE 48347
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48313: LD_INT 0
48315: PPUSH
48316: LD_INT 5
48318: PUSH
48319: LD_INT 8
48321: PUSH
48322: LD_INT 9
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: PUSH
48330: LD_VAR 0 17
48334: ARRAY
48335: PPUSH
48336: LD_VAR 0 4
48340: PPUSH
48341: CALL_OW 380
48345: GO 48364
// PrepareHuman ( false , i , skill ) ;
48347: LD_INT 0
48349: PPUSH
48350: LD_VAR 0 8
48354: PPUSH
48355: LD_VAR 0 4
48359: PPUSH
48360: CALL_OW 380
// end else
48364: GO 48383
// PrepareHuman ( false , i , skill ) ;
48366: LD_INT 0
48368: PPUSH
48369: LD_VAR 0 8
48373: PPUSH
48374: LD_VAR 0 4
48378: PPUSH
48379: CALL_OW 380
// un := CreateHuman ;
48383: LD_ADDR_VAR 0 14
48387: PUSH
48388: CALL_OW 44
48392: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48393: LD_ADDR_VAR 0 7
48397: PUSH
48398: LD_VAR 0 7
48402: PPUSH
48403: LD_INT 1
48405: PPUSH
48406: LD_VAR 0 14
48410: PPUSH
48411: CALL_OW 2
48415: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48416: LD_VAR 0 14
48420: PPUSH
48421: LD_VAR 0 9
48425: PPUSH
48426: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48430: LD_VAR 0 9
48434: PPUSH
48435: CALL_OW 313
48439: PUSH
48440: LD_INT 6
48442: EQUAL
48443: PUSH
48444: LD_VAR 0 9
48448: PPUSH
48449: CALL_OW 266
48453: PUSH
48454: LD_INT 32
48456: PUSH
48457: LD_INT 31
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: IN
48464: OR
48465: IFFALSE 48279
48467: GO 48276
48469: POP
48470: POP
// end else
48471: GO 48853
// for j = 1 to x do
48473: LD_ADDR_VAR 0 9
48477: PUSH
48478: DOUBLE
48479: LD_INT 1
48481: DEC
48482: ST_TO_ADDR
48483: LD_VAR 0 13
48487: PUSH
48488: FOR_TO
48489: IFFALSE 48851
// begin InitHc ;
48491: CALL_OW 19
// if not f then
48495: LD_VAR 0 12
48499: NOT
48500: IFFALSE 48589
// begin PrepareHuman ( false , i , skill ) ;
48502: LD_INT 0
48504: PPUSH
48505: LD_VAR 0 8
48509: PPUSH
48510: LD_VAR 0 4
48514: PPUSH
48515: CALL_OW 380
// un := CreateHuman ;
48519: LD_ADDR_VAR 0 14
48523: PUSH
48524: CALL_OW 44
48528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48529: LD_ADDR_VAR 0 7
48533: PUSH
48534: LD_VAR 0 7
48538: PPUSH
48539: LD_INT 1
48541: PPUSH
48542: LD_VAR 0 14
48546: PPUSH
48547: CALL_OW 2
48551: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48552: LD_VAR 0 14
48556: PPUSH
48557: LD_VAR 0 1
48561: PPUSH
48562: CALL_OW 250
48566: PPUSH
48567: LD_VAR 0 1
48571: PPUSH
48572: CALL_OW 251
48576: PPUSH
48577: LD_INT 10
48579: PPUSH
48580: LD_INT 0
48582: PPUSH
48583: CALL_OW 50
// continue ;
48587: GO 48488
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48589: LD_VAR 0 12
48593: PUSH
48594: LD_INT 1
48596: ARRAY
48597: PPUSH
48598: CALL_OW 313
48602: PUSH
48603: LD_VAR 0 12
48607: PUSH
48608: LD_INT 1
48610: ARRAY
48611: PPUSH
48612: CALL_OW 266
48616: PUSH
48617: LD_INT 32
48619: PUSH
48620: LD_INT 31
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: IN
48627: AND
48628: PUSH
48629: LD_VAR 0 12
48633: PUSH
48634: LD_INT 1
48636: ARRAY
48637: PPUSH
48638: CALL_OW 313
48642: PUSH
48643: LD_INT 6
48645: EQUAL
48646: OR
48647: IFFALSE 48667
// f := Delete ( f , 1 ) ;
48649: LD_ADDR_VAR 0 12
48653: PUSH
48654: LD_VAR 0 12
48658: PPUSH
48659: LD_INT 1
48661: PPUSH
48662: CALL_OW 3
48666: ST_TO_ADDR
// if not f then
48667: LD_VAR 0 12
48671: NOT
48672: IFFALSE 48690
// begin x := x + 2 ;
48674: LD_ADDR_VAR 0 13
48678: PUSH
48679: LD_VAR 0 13
48683: PUSH
48684: LD_INT 2
48686: PLUS
48687: ST_TO_ADDR
// continue ;
48688: GO 48488
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48690: LD_VAR 0 12
48694: PUSH
48695: LD_INT 1
48697: ARRAY
48698: PPUSH
48699: CALL_OW 266
48703: PUSH
48704: LD_INT 5
48706: EQUAL
48707: IFFALSE 48781
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48709: LD_VAR 0 12
48713: PUSH
48714: LD_INT 1
48716: ARRAY
48717: PPUSH
48718: CALL_OW 313
48722: PUSH
48723: LD_INT 3
48725: LESS
48726: IFFALSE 48762
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48728: LD_INT 0
48730: PPUSH
48731: LD_INT 5
48733: PUSH
48734: LD_INT 8
48736: PUSH
48737: LD_INT 9
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: PUSH
48745: LD_VAR 0 17
48749: ARRAY
48750: PPUSH
48751: LD_VAR 0 4
48755: PPUSH
48756: CALL_OW 380
48760: GO 48779
// PrepareHuman ( false , i , skill ) ;
48762: LD_INT 0
48764: PPUSH
48765: LD_VAR 0 8
48769: PPUSH
48770: LD_VAR 0 4
48774: PPUSH
48775: CALL_OW 380
// end else
48779: GO 48798
// PrepareHuman ( false , i , skill ) ;
48781: LD_INT 0
48783: PPUSH
48784: LD_VAR 0 8
48788: PPUSH
48789: LD_VAR 0 4
48793: PPUSH
48794: CALL_OW 380
// un := CreateHuman ;
48798: LD_ADDR_VAR 0 14
48802: PUSH
48803: CALL_OW 44
48807: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48808: LD_ADDR_VAR 0 7
48812: PUSH
48813: LD_VAR 0 7
48817: PPUSH
48818: LD_INT 1
48820: PPUSH
48821: LD_VAR 0 14
48825: PPUSH
48826: CALL_OW 2
48830: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48831: LD_VAR 0 14
48835: PPUSH
48836: LD_VAR 0 12
48840: PUSH
48841: LD_INT 1
48843: ARRAY
48844: PPUSH
48845: CALL_OW 52
// end ;
48849: GO 48488
48851: POP
48852: POP
// end ;
48853: GO 47790
48855: POP
48856: POP
// result := result ^ buildings ;
48857: LD_ADDR_VAR 0 7
48861: PUSH
48862: LD_VAR 0 7
48866: PUSH
48867: LD_VAR 0 18
48871: ADD
48872: ST_TO_ADDR
// end else
48873: GO 49016
// begin for i = 1 to personel do
48875: LD_ADDR_VAR 0 8
48879: PUSH
48880: DOUBLE
48881: LD_INT 1
48883: DEC
48884: ST_TO_ADDR
48885: LD_VAR 0 6
48889: PUSH
48890: FOR_TO
48891: IFFALSE 49014
// begin if i > 4 then
48893: LD_VAR 0 8
48897: PUSH
48898: LD_INT 4
48900: GREATER
48901: IFFALSE 48905
// break ;
48903: GO 49014
// x := personel [ i ] ;
48905: LD_ADDR_VAR 0 13
48909: PUSH
48910: LD_VAR 0 6
48914: PUSH
48915: LD_VAR 0 8
48919: ARRAY
48920: ST_TO_ADDR
// if x = - 1 then
48921: LD_VAR 0 13
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: EQUAL
48930: IFFALSE 48934
// continue ;
48932: GO 48890
// PrepareHuman ( false , i , skill ) ;
48934: LD_INT 0
48936: PPUSH
48937: LD_VAR 0 8
48941: PPUSH
48942: LD_VAR 0 4
48946: PPUSH
48947: CALL_OW 380
// un := CreateHuman ;
48951: LD_ADDR_VAR 0 14
48955: PUSH
48956: CALL_OW 44
48960: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48961: LD_VAR 0 14
48965: PPUSH
48966: LD_VAR 0 1
48970: PPUSH
48971: CALL_OW 250
48975: PPUSH
48976: LD_VAR 0 1
48980: PPUSH
48981: CALL_OW 251
48985: PPUSH
48986: LD_INT 10
48988: PPUSH
48989: LD_INT 0
48991: PPUSH
48992: CALL_OW 50
// result := result ^ un ;
48996: LD_ADDR_VAR 0 7
49000: PUSH
49001: LD_VAR 0 7
49005: PUSH
49006: LD_VAR 0 14
49010: ADD
49011: ST_TO_ADDR
// end ;
49012: GO 48890
49014: POP
49015: POP
// end ; end ;
49016: LD_VAR 0 7
49020: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49021: LD_INT 0
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
49035: PPUSH
49036: PPUSH
49037: PPUSH
49038: PPUSH
// result := false ;
49039: LD_ADDR_VAR 0 3
49043: PUSH
49044: LD_INT 0
49046: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49047: LD_VAR 0 1
49051: NOT
49052: PUSH
49053: LD_VAR 0 1
49057: PPUSH
49058: CALL_OW 266
49062: PUSH
49063: LD_INT 32
49065: PUSH
49066: LD_INT 33
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: IN
49073: NOT
49074: OR
49075: IFFALSE 49079
// exit ;
49077: GO 50188
// nat := GetNation ( tower ) ;
49079: LD_ADDR_VAR 0 12
49083: PUSH
49084: LD_VAR 0 1
49088: PPUSH
49089: CALL_OW 248
49093: ST_TO_ADDR
// side := GetSide ( tower ) ;
49094: LD_ADDR_VAR 0 16
49098: PUSH
49099: LD_VAR 0 1
49103: PPUSH
49104: CALL_OW 255
49108: ST_TO_ADDR
// x := GetX ( tower ) ;
49109: LD_ADDR_VAR 0 10
49113: PUSH
49114: LD_VAR 0 1
49118: PPUSH
49119: CALL_OW 250
49123: ST_TO_ADDR
// y := GetY ( tower ) ;
49124: LD_ADDR_VAR 0 11
49128: PUSH
49129: LD_VAR 0 1
49133: PPUSH
49134: CALL_OW 251
49138: ST_TO_ADDR
// if not x or not y then
49139: LD_VAR 0 10
49143: NOT
49144: PUSH
49145: LD_VAR 0 11
49149: NOT
49150: OR
49151: IFFALSE 49155
// exit ;
49153: GO 50188
// weapon := 0 ;
49155: LD_ADDR_VAR 0 18
49159: PUSH
49160: LD_INT 0
49162: ST_TO_ADDR
// fac_list := [ ] ;
49163: LD_ADDR_VAR 0 17
49167: PUSH
49168: EMPTY
49169: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49170: LD_ADDR_VAR 0 6
49174: PUSH
49175: LD_VAR 0 1
49179: PPUSH
49180: CALL_OW 274
49184: PPUSH
49185: LD_VAR 0 2
49189: PPUSH
49190: LD_INT 0
49192: PPUSH
49193: CALL 46759 0 3
49197: PPUSH
49198: LD_INT 30
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PPUSH
49208: CALL_OW 72
49212: ST_TO_ADDR
// if not factories then
49213: LD_VAR 0 6
49217: NOT
49218: IFFALSE 49222
// exit ;
49220: GO 50188
// for i in factories do
49222: LD_ADDR_VAR 0 8
49226: PUSH
49227: LD_VAR 0 6
49231: PUSH
49232: FOR_IN
49233: IFFALSE 49258
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49235: LD_ADDR_VAR 0 17
49239: PUSH
49240: LD_VAR 0 17
49244: PUSH
49245: LD_VAR 0 8
49249: PPUSH
49250: CALL_OW 478
49254: UNION
49255: ST_TO_ADDR
49256: GO 49232
49258: POP
49259: POP
// if not fac_list then
49260: LD_VAR 0 17
49264: NOT
49265: IFFALSE 49269
// exit ;
49267: GO 50188
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49269: LD_ADDR_VAR 0 5
49273: PUSH
49274: LD_INT 4
49276: PUSH
49277: LD_INT 5
49279: PUSH
49280: LD_INT 9
49282: PUSH
49283: LD_INT 10
49285: PUSH
49286: LD_INT 6
49288: PUSH
49289: LD_INT 7
49291: PUSH
49292: LD_INT 11
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 27
49306: PUSH
49307: LD_INT 28
49309: PUSH
49310: LD_INT 26
49312: PUSH
49313: LD_INT 30
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 43
49324: PUSH
49325: LD_INT 44
49327: PUSH
49328: LD_INT 46
49330: PUSH
49331: LD_INT 45
49333: PUSH
49334: LD_INT 47
49336: PUSH
49337: LD_INT 49
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: PUSH
49353: LD_VAR 0 12
49357: ARRAY
49358: ST_TO_ADDR
// list := list isect fac_list ;
49359: LD_ADDR_VAR 0 5
49363: PUSH
49364: LD_VAR 0 5
49368: PUSH
49369: LD_VAR 0 17
49373: ISECT
49374: ST_TO_ADDR
// if not list then
49375: LD_VAR 0 5
49379: NOT
49380: IFFALSE 49384
// exit ;
49382: GO 50188
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49384: LD_VAR 0 12
49388: PUSH
49389: LD_INT 3
49391: EQUAL
49392: PUSH
49393: LD_INT 49
49395: PUSH
49396: LD_VAR 0 5
49400: IN
49401: AND
49402: PUSH
49403: LD_INT 31
49405: PPUSH
49406: LD_VAR 0 16
49410: PPUSH
49411: CALL_OW 321
49415: PUSH
49416: LD_INT 2
49418: EQUAL
49419: AND
49420: IFFALSE 49480
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49422: LD_INT 22
49424: PUSH
49425: LD_VAR 0 16
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 35
49436: PUSH
49437: LD_INT 49
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 91
49446: PUSH
49447: LD_VAR 0 1
49451: PUSH
49452: LD_INT 10
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: PPUSH
49465: CALL_OW 69
49469: NOT
49470: IFFALSE 49480
// weapon := ru_time_lapser ;
49472: LD_ADDR_VAR 0 18
49476: PUSH
49477: LD_INT 49
49479: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49480: LD_VAR 0 12
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: IN
49495: PUSH
49496: LD_INT 11
49498: PUSH
49499: LD_VAR 0 5
49503: IN
49504: PUSH
49505: LD_INT 30
49507: PUSH
49508: LD_VAR 0 5
49512: IN
49513: OR
49514: AND
49515: PUSH
49516: LD_INT 6
49518: PPUSH
49519: LD_VAR 0 16
49523: PPUSH
49524: CALL_OW 321
49528: PUSH
49529: LD_INT 2
49531: EQUAL
49532: AND
49533: IFFALSE 49698
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49535: LD_INT 22
49537: PUSH
49538: LD_VAR 0 16
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 35
49552: PUSH
49553: LD_INT 11
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 35
49562: PUSH
49563: LD_INT 30
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 91
49577: PUSH
49578: LD_VAR 0 1
49582: PUSH
49583: LD_INT 18
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: PPUSH
49596: CALL_OW 69
49600: NOT
49601: PUSH
49602: LD_INT 22
49604: PUSH
49605: LD_VAR 0 16
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 30
49619: PUSH
49620: LD_INT 32
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 30
49629: PUSH
49630: LD_INT 33
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 91
49644: PUSH
49645: LD_VAR 0 1
49649: PUSH
49650: LD_INT 12
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: PPUSH
49666: CALL_OW 69
49670: PUSH
49671: LD_INT 2
49673: GREATER
49674: AND
49675: IFFALSE 49698
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49677: LD_ADDR_VAR 0 18
49681: PUSH
49682: LD_INT 11
49684: PUSH
49685: LD_INT 30
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_VAR 0 12
49696: ARRAY
49697: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49698: LD_VAR 0 18
49702: NOT
49703: PUSH
49704: LD_INT 40
49706: PPUSH
49707: LD_VAR 0 16
49711: PPUSH
49712: CALL_OW 321
49716: PUSH
49717: LD_INT 2
49719: EQUAL
49720: AND
49721: PUSH
49722: LD_INT 7
49724: PUSH
49725: LD_VAR 0 5
49729: IN
49730: PUSH
49731: LD_INT 28
49733: PUSH
49734: LD_VAR 0 5
49738: IN
49739: OR
49740: PUSH
49741: LD_INT 45
49743: PUSH
49744: LD_VAR 0 5
49748: IN
49749: OR
49750: AND
49751: IFFALSE 50005
// begin hex := GetHexInfo ( x , y ) ;
49753: LD_ADDR_VAR 0 4
49757: PUSH
49758: LD_VAR 0 10
49762: PPUSH
49763: LD_VAR 0 11
49767: PPUSH
49768: CALL_OW 546
49772: ST_TO_ADDR
// if hex [ 1 ] then
49773: LD_VAR 0 4
49777: PUSH
49778: LD_INT 1
49780: ARRAY
49781: IFFALSE 49785
// exit ;
49783: GO 50188
// height := hex [ 2 ] ;
49785: LD_ADDR_VAR 0 15
49789: PUSH
49790: LD_VAR 0 4
49794: PUSH
49795: LD_INT 2
49797: ARRAY
49798: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49799: LD_ADDR_VAR 0 14
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 3
49812: PUSH
49813: LD_INT 5
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: ST_TO_ADDR
// for i in tmp do
49822: LD_ADDR_VAR 0 8
49826: PUSH
49827: LD_VAR 0 14
49831: PUSH
49832: FOR_IN
49833: IFFALSE 50003
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49835: LD_ADDR_VAR 0 9
49839: PUSH
49840: LD_VAR 0 10
49844: PPUSH
49845: LD_VAR 0 8
49849: PPUSH
49850: LD_INT 5
49852: PPUSH
49853: CALL_OW 272
49857: PUSH
49858: LD_VAR 0 11
49862: PPUSH
49863: LD_VAR 0 8
49867: PPUSH
49868: LD_INT 5
49870: PPUSH
49871: CALL_OW 273
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49880: LD_VAR 0 9
49884: PUSH
49885: LD_INT 1
49887: ARRAY
49888: PPUSH
49889: LD_VAR 0 9
49893: PUSH
49894: LD_INT 2
49896: ARRAY
49897: PPUSH
49898: CALL_OW 488
49902: IFFALSE 50001
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49904: LD_ADDR_VAR 0 4
49908: PUSH
49909: LD_VAR 0 9
49913: PUSH
49914: LD_INT 1
49916: ARRAY
49917: PPUSH
49918: LD_VAR 0 9
49922: PUSH
49923: LD_INT 2
49925: ARRAY
49926: PPUSH
49927: CALL_OW 546
49931: ST_TO_ADDR
// if hex [ 1 ] then
49932: LD_VAR 0 4
49936: PUSH
49937: LD_INT 1
49939: ARRAY
49940: IFFALSE 49944
// continue ;
49942: GO 49832
// h := hex [ 2 ] ;
49944: LD_ADDR_VAR 0 13
49948: PUSH
49949: LD_VAR 0 4
49953: PUSH
49954: LD_INT 2
49956: ARRAY
49957: ST_TO_ADDR
// if h + 7 < height then
49958: LD_VAR 0 13
49962: PUSH
49963: LD_INT 7
49965: PLUS
49966: PUSH
49967: LD_VAR 0 15
49971: LESS
49972: IFFALSE 50001
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49974: LD_ADDR_VAR 0 18
49978: PUSH
49979: LD_INT 7
49981: PUSH
49982: LD_INT 28
49984: PUSH
49985: LD_INT 45
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: PUSH
49993: LD_VAR 0 12
49997: ARRAY
49998: ST_TO_ADDR
// break ;
49999: GO 50003
// end ; end ; end ;
50001: GO 49832
50003: POP
50004: POP
// end ; if not weapon then
50005: LD_VAR 0 18
50009: NOT
50010: IFFALSE 50070
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50012: LD_ADDR_VAR 0 5
50016: PUSH
50017: LD_VAR 0 5
50021: PUSH
50022: LD_INT 11
50024: PUSH
50025: LD_INT 30
50027: PUSH
50028: LD_INT 49
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: LIST
50035: DIFF
50036: ST_TO_ADDR
// if not list then
50037: LD_VAR 0 5
50041: NOT
50042: IFFALSE 50046
// exit ;
50044: GO 50188
// weapon := list [ rand ( 1 , list ) ] ;
50046: LD_ADDR_VAR 0 18
50050: PUSH
50051: LD_VAR 0 5
50055: PUSH
50056: LD_INT 1
50058: PPUSH
50059: LD_VAR 0 5
50063: PPUSH
50064: CALL_OW 12
50068: ARRAY
50069: ST_TO_ADDR
// end ; if weapon then
50070: LD_VAR 0 18
50074: IFFALSE 50188
// begin tmp := CostOfWeapon ( weapon ) ;
50076: LD_ADDR_VAR 0 14
50080: PUSH
50081: LD_VAR 0 18
50085: PPUSH
50086: CALL_OW 451
50090: ST_TO_ADDR
// j := GetBase ( tower ) ;
50091: LD_ADDR_VAR 0 9
50095: PUSH
50096: LD_VAR 0 1
50100: PPUSH
50101: CALL_OW 274
50105: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50106: LD_VAR 0 9
50110: PPUSH
50111: LD_INT 1
50113: PPUSH
50114: CALL_OW 275
50118: PUSH
50119: LD_VAR 0 14
50123: PUSH
50124: LD_INT 1
50126: ARRAY
50127: GREATEREQUAL
50128: PUSH
50129: LD_VAR 0 9
50133: PPUSH
50134: LD_INT 2
50136: PPUSH
50137: CALL_OW 275
50141: PUSH
50142: LD_VAR 0 14
50146: PUSH
50147: LD_INT 2
50149: ARRAY
50150: GREATEREQUAL
50151: AND
50152: PUSH
50153: LD_VAR 0 9
50157: PPUSH
50158: LD_INT 3
50160: PPUSH
50161: CALL_OW 275
50165: PUSH
50166: LD_VAR 0 14
50170: PUSH
50171: LD_INT 3
50173: ARRAY
50174: GREATEREQUAL
50175: AND
50176: IFFALSE 50188
// result := weapon ;
50178: LD_ADDR_VAR 0 3
50182: PUSH
50183: LD_VAR 0 18
50187: ST_TO_ADDR
// end ; end ;
50188: LD_VAR 0 3
50192: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50193: LD_INT 0
50195: PPUSH
50196: PPUSH
// result := true ;
50197: LD_ADDR_VAR 0 3
50201: PUSH
50202: LD_INT 1
50204: ST_TO_ADDR
// if array1 = array2 then
50205: LD_VAR 0 1
50209: PUSH
50210: LD_VAR 0 2
50214: EQUAL
50215: IFFALSE 50275
// begin for i = 1 to array1 do
50217: LD_ADDR_VAR 0 4
50221: PUSH
50222: DOUBLE
50223: LD_INT 1
50225: DEC
50226: ST_TO_ADDR
50227: LD_VAR 0 1
50231: PUSH
50232: FOR_TO
50233: IFFALSE 50271
// if array1 [ i ] <> array2 [ i ] then
50235: LD_VAR 0 1
50239: PUSH
50240: LD_VAR 0 4
50244: ARRAY
50245: PUSH
50246: LD_VAR 0 2
50250: PUSH
50251: LD_VAR 0 4
50255: ARRAY
50256: NONEQUAL
50257: IFFALSE 50269
// begin result := false ;
50259: LD_ADDR_VAR 0 3
50263: PUSH
50264: LD_INT 0
50266: ST_TO_ADDR
// break ;
50267: GO 50271
// end ;
50269: GO 50232
50271: POP
50272: POP
// end else
50273: GO 50283
// result := false ;
50275: LD_ADDR_VAR 0 3
50279: PUSH
50280: LD_INT 0
50282: ST_TO_ADDR
// end ;
50283: LD_VAR 0 3
50287: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50288: LD_INT 0
50290: PPUSH
50291: PPUSH
// if not array1 or not array2 then
50292: LD_VAR 0 1
50296: NOT
50297: PUSH
50298: LD_VAR 0 2
50302: NOT
50303: OR
50304: IFFALSE 50308
// exit ;
50306: GO 50372
// result := true ;
50308: LD_ADDR_VAR 0 3
50312: PUSH
50313: LD_INT 1
50315: ST_TO_ADDR
// for i = 1 to array1 do
50316: LD_ADDR_VAR 0 4
50320: PUSH
50321: DOUBLE
50322: LD_INT 1
50324: DEC
50325: ST_TO_ADDR
50326: LD_VAR 0 1
50330: PUSH
50331: FOR_TO
50332: IFFALSE 50370
// if array1 [ i ] <> array2 [ i ] then
50334: LD_VAR 0 1
50338: PUSH
50339: LD_VAR 0 4
50343: ARRAY
50344: PUSH
50345: LD_VAR 0 2
50349: PUSH
50350: LD_VAR 0 4
50354: ARRAY
50355: NONEQUAL
50356: IFFALSE 50368
// begin result := false ;
50358: LD_ADDR_VAR 0 3
50362: PUSH
50363: LD_INT 0
50365: ST_TO_ADDR
// break ;
50366: GO 50370
// end ;
50368: GO 50331
50370: POP
50371: POP
// end ;
50372: LD_VAR 0 3
50376: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50377: LD_INT 0
50379: PPUSH
50380: PPUSH
50381: PPUSH
// pom := GetBase ( fac ) ;
50382: LD_ADDR_VAR 0 5
50386: PUSH
50387: LD_VAR 0 1
50391: PPUSH
50392: CALL_OW 274
50396: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50397: LD_ADDR_VAR 0 4
50401: PUSH
50402: LD_VAR 0 2
50406: PUSH
50407: LD_INT 1
50409: ARRAY
50410: PPUSH
50411: LD_VAR 0 2
50415: PUSH
50416: LD_INT 2
50418: ARRAY
50419: PPUSH
50420: LD_VAR 0 2
50424: PUSH
50425: LD_INT 3
50427: ARRAY
50428: PPUSH
50429: LD_VAR 0 2
50433: PUSH
50434: LD_INT 4
50436: ARRAY
50437: PPUSH
50438: CALL_OW 449
50442: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50443: LD_ADDR_VAR 0 3
50447: PUSH
50448: LD_VAR 0 5
50452: PPUSH
50453: LD_INT 1
50455: PPUSH
50456: CALL_OW 275
50460: PUSH
50461: LD_VAR 0 4
50465: PUSH
50466: LD_INT 1
50468: ARRAY
50469: GREATEREQUAL
50470: PUSH
50471: LD_VAR 0 5
50475: PPUSH
50476: LD_INT 2
50478: PPUSH
50479: CALL_OW 275
50483: PUSH
50484: LD_VAR 0 4
50488: PUSH
50489: LD_INT 2
50491: ARRAY
50492: GREATEREQUAL
50493: AND
50494: PUSH
50495: LD_VAR 0 5
50499: PPUSH
50500: LD_INT 3
50502: PPUSH
50503: CALL_OW 275
50507: PUSH
50508: LD_VAR 0 4
50512: PUSH
50513: LD_INT 3
50515: ARRAY
50516: GREATEREQUAL
50517: AND
50518: ST_TO_ADDR
// end ;
50519: LD_VAR 0 3
50523: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50524: LD_INT 0
50526: PPUSH
50527: PPUSH
50528: PPUSH
50529: PPUSH
// pom := GetBase ( building ) ;
50530: LD_ADDR_VAR 0 3
50534: PUSH
50535: LD_VAR 0 1
50539: PPUSH
50540: CALL_OW 274
50544: ST_TO_ADDR
// if not pom then
50545: LD_VAR 0 3
50549: NOT
50550: IFFALSE 50554
// exit ;
50552: GO 50724
// btype := GetBType ( building ) ;
50554: LD_ADDR_VAR 0 5
50558: PUSH
50559: LD_VAR 0 1
50563: PPUSH
50564: CALL_OW 266
50568: ST_TO_ADDR
// if btype = b_armoury then
50569: LD_VAR 0 5
50573: PUSH
50574: LD_INT 4
50576: EQUAL
50577: IFFALSE 50587
// btype := b_barracks ;
50579: LD_ADDR_VAR 0 5
50583: PUSH
50584: LD_INT 5
50586: ST_TO_ADDR
// if btype = b_depot then
50587: LD_VAR 0 5
50591: PUSH
50592: LD_INT 0
50594: EQUAL
50595: IFFALSE 50605
// btype := b_warehouse ;
50597: LD_ADDR_VAR 0 5
50601: PUSH
50602: LD_INT 1
50604: ST_TO_ADDR
// if btype = b_workshop then
50605: LD_VAR 0 5
50609: PUSH
50610: LD_INT 2
50612: EQUAL
50613: IFFALSE 50623
// btype := b_factory ;
50615: LD_ADDR_VAR 0 5
50619: PUSH
50620: LD_INT 3
50622: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50623: LD_ADDR_VAR 0 4
50627: PUSH
50628: LD_VAR 0 5
50632: PPUSH
50633: LD_VAR 0 1
50637: PPUSH
50638: CALL_OW 248
50642: PPUSH
50643: CALL_OW 450
50647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50648: LD_ADDR_VAR 0 2
50652: PUSH
50653: LD_VAR 0 3
50657: PPUSH
50658: LD_INT 1
50660: PPUSH
50661: CALL_OW 275
50665: PUSH
50666: LD_VAR 0 4
50670: PUSH
50671: LD_INT 1
50673: ARRAY
50674: GREATEREQUAL
50675: PUSH
50676: LD_VAR 0 3
50680: PPUSH
50681: LD_INT 2
50683: PPUSH
50684: CALL_OW 275
50688: PUSH
50689: LD_VAR 0 4
50693: PUSH
50694: LD_INT 2
50696: ARRAY
50697: GREATEREQUAL
50698: AND
50699: PUSH
50700: LD_VAR 0 3
50704: PPUSH
50705: LD_INT 3
50707: PPUSH
50708: CALL_OW 275
50712: PUSH
50713: LD_VAR 0 4
50717: PUSH
50718: LD_INT 3
50720: ARRAY
50721: GREATEREQUAL
50722: AND
50723: ST_TO_ADDR
// end ;
50724: LD_VAR 0 2
50728: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50729: LD_INT 0
50731: PPUSH
50732: PPUSH
50733: PPUSH
// pom := GetBase ( building ) ;
50734: LD_ADDR_VAR 0 4
50738: PUSH
50739: LD_VAR 0 1
50743: PPUSH
50744: CALL_OW 274
50748: ST_TO_ADDR
// if not pom then
50749: LD_VAR 0 4
50753: NOT
50754: IFFALSE 50758
// exit ;
50756: GO 50859
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50758: LD_ADDR_VAR 0 5
50762: PUSH
50763: LD_VAR 0 2
50767: PPUSH
50768: LD_VAR 0 1
50772: PPUSH
50773: CALL_OW 248
50777: PPUSH
50778: CALL_OW 450
50782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50783: LD_ADDR_VAR 0 3
50787: PUSH
50788: LD_VAR 0 4
50792: PPUSH
50793: LD_INT 1
50795: PPUSH
50796: CALL_OW 275
50800: PUSH
50801: LD_VAR 0 5
50805: PUSH
50806: LD_INT 1
50808: ARRAY
50809: GREATEREQUAL
50810: PUSH
50811: LD_VAR 0 4
50815: PPUSH
50816: LD_INT 2
50818: PPUSH
50819: CALL_OW 275
50823: PUSH
50824: LD_VAR 0 5
50828: PUSH
50829: LD_INT 2
50831: ARRAY
50832: GREATEREQUAL
50833: AND
50834: PUSH
50835: LD_VAR 0 4
50839: PPUSH
50840: LD_INT 3
50842: PPUSH
50843: CALL_OW 275
50847: PUSH
50848: LD_VAR 0 5
50852: PUSH
50853: LD_INT 3
50855: ARRAY
50856: GREATEREQUAL
50857: AND
50858: ST_TO_ADDR
// end ;
50859: LD_VAR 0 3
50863: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50864: LD_INT 0
50866: PPUSH
50867: PPUSH
50868: PPUSH
50869: PPUSH
50870: PPUSH
50871: PPUSH
50872: PPUSH
50873: PPUSH
50874: PPUSH
50875: PPUSH
50876: PPUSH
// result := false ;
50877: LD_ADDR_VAR 0 8
50881: PUSH
50882: LD_INT 0
50884: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50885: LD_VAR 0 5
50889: NOT
50890: PUSH
50891: LD_VAR 0 1
50895: NOT
50896: OR
50897: PUSH
50898: LD_VAR 0 2
50902: NOT
50903: OR
50904: PUSH
50905: LD_VAR 0 3
50909: NOT
50910: OR
50911: IFFALSE 50915
// exit ;
50913: GO 51729
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50915: LD_ADDR_VAR 0 14
50919: PUSH
50920: LD_VAR 0 1
50924: PPUSH
50925: LD_VAR 0 2
50929: PPUSH
50930: LD_VAR 0 3
50934: PPUSH
50935: LD_VAR 0 4
50939: PPUSH
50940: LD_VAR 0 5
50944: PUSH
50945: LD_INT 1
50947: ARRAY
50948: PPUSH
50949: CALL_OW 248
50953: PPUSH
50954: LD_INT 0
50956: PPUSH
50957: CALL 52982 0 6
50961: ST_TO_ADDR
// if not hexes then
50962: LD_VAR 0 14
50966: NOT
50967: IFFALSE 50971
// exit ;
50969: GO 51729
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50971: LD_ADDR_VAR 0 17
50975: PUSH
50976: LD_VAR 0 5
50980: PPUSH
50981: LD_INT 22
50983: PUSH
50984: LD_VAR 0 13
50988: PPUSH
50989: CALL_OW 255
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: PUSH
51001: LD_INT 30
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 30
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PPUSH
51030: CALL_OW 72
51034: ST_TO_ADDR
// for i = 1 to hexes do
51035: LD_ADDR_VAR 0 9
51039: PUSH
51040: DOUBLE
51041: LD_INT 1
51043: DEC
51044: ST_TO_ADDR
51045: LD_VAR 0 14
51049: PUSH
51050: FOR_TO
51051: IFFALSE 51727
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51053: LD_ADDR_VAR 0 13
51057: PUSH
51058: LD_VAR 0 14
51062: PUSH
51063: LD_VAR 0 9
51067: ARRAY
51068: PUSH
51069: LD_INT 1
51071: ARRAY
51072: PPUSH
51073: LD_VAR 0 14
51077: PUSH
51078: LD_VAR 0 9
51082: ARRAY
51083: PUSH
51084: LD_INT 2
51086: ARRAY
51087: PPUSH
51088: CALL_OW 428
51092: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51093: LD_VAR 0 14
51097: PUSH
51098: LD_VAR 0 9
51102: ARRAY
51103: PUSH
51104: LD_INT 1
51106: ARRAY
51107: PPUSH
51108: LD_VAR 0 14
51112: PUSH
51113: LD_VAR 0 9
51117: ARRAY
51118: PUSH
51119: LD_INT 2
51121: ARRAY
51122: PPUSH
51123: CALL_OW 351
51127: PUSH
51128: LD_VAR 0 14
51132: PUSH
51133: LD_VAR 0 9
51137: ARRAY
51138: PUSH
51139: LD_INT 1
51141: ARRAY
51142: PPUSH
51143: LD_VAR 0 14
51147: PUSH
51148: LD_VAR 0 9
51152: ARRAY
51153: PUSH
51154: LD_INT 2
51156: ARRAY
51157: PPUSH
51158: CALL_OW 488
51162: NOT
51163: OR
51164: PUSH
51165: LD_VAR 0 13
51169: PPUSH
51170: CALL_OW 247
51174: PUSH
51175: LD_INT 3
51177: EQUAL
51178: OR
51179: IFFALSE 51185
// exit ;
51181: POP
51182: POP
51183: GO 51729
// if not tmp then
51185: LD_VAR 0 13
51189: NOT
51190: IFFALSE 51194
// continue ;
51192: GO 51050
// result := true ;
51194: LD_ADDR_VAR 0 8
51198: PUSH
51199: LD_INT 1
51201: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51202: LD_VAR 0 6
51206: PUSH
51207: LD_VAR 0 13
51211: PPUSH
51212: CALL_OW 247
51216: PUSH
51217: LD_INT 2
51219: EQUAL
51220: AND
51221: PUSH
51222: LD_VAR 0 13
51226: PPUSH
51227: CALL_OW 263
51231: PUSH
51232: LD_INT 1
51234: EQUAL
51235: AND
51236: IFFALSE 51400
// begin if IsDrivenBy ( tmp ) then
51238: LD_VAR 0 13
51242: PPUSH
51243: CALL_OW 311
51247: IFFALSE 51251
// continue ;
51249: GO 51050
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51251: LD_VAR 0 6
51255: PPUSH
51256: LD_INT 3
51258: PUSH
51259: LD_INT 60
51261: PUSH
51262: EMPTY
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: LD_INT 55
51274: PUSH
51275: EMPTY
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PPUSH
51286: CALL_OW 72
51290: IFFALSE 51398
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51292: LD_ADDR_VAR 0 18
51296: PUSH
51297: LD_VAR 0 6
51301: PPUSH
51302: LD_INT 3
51304: PUSH
51305: LD_INT 60
51307: PUSH
51308: EMPTY
51309: LIST
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: LD_INT 55
51320: PUSH
51321: EMPTY
51322: LIST
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PPUSH
51332: CALL_OW 72
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: ST_TO_ADDR
// if IsInUnit ( driver ) then
51341: LD_VAR 0 18
51345: PPUSH
51346: CALL_OW 310
51350: IFFALSE 51361
// ComExit ( driver ) ;
51352: LD_VAR 0 18
51356: PPUSH
51357: CALL 76763 0 1
// AddComEnterUnit ( driver , tmp ) ;
51361: LD_VAR 0 18
51365: PPUSH
51366: LD_VAR 0 13
51370: PPUSH
51371: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51375: LD_VAR 0 18
51379: PPUSH
51380: LD_VAR 0 7
51384: PPUSH
51385: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51389: LD_VAR 0 18
51393: PPUSH
51394: CALL_OW 181
// end ; continue ;
51398: GO 51050
// end ; if not cleaners or not tmp in cleaners then
51400: LD_VAR 0 6
51404: NOT
51405: PUSH
51406: LD_VAR 0 13
51410: PUSH
51411: LD_VAR 0 6
51415: IN
51416: NOT
51417: OR
51418: IFFALSE 51725
// begin if dep then
51420: LD_VAR 0 17
51424: IFFALSE 51560
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51426: LD_ADDR_VAR 0 16
51430: PUSH
51431: LD_VAR 0 17
51435: PUSH
51436: LD_INT 1
51438: ARRAY
51439: PPUSH
51440: CALL_OW 250
51444: PPUSH
51445: LD_VAR 0 17
51449: PUSH
51450: LD_INT 1
51452: ARRAY
51453: PPUSH
51454: CALL_OW 254
51458: PPUSH
51459: LD_INT 5
51461: PPUSH
51462: CALL_OW 272
51466: PUSH
51467: LD_VAR 0 17
51471: PUSH
51472: LD_INT 1
51474: ARRAY
51475: PPUSH
51476: CALL_OW 251
51480: PPUSH
51481: LD_VAR 0 17
51485: PUSH
51486: LD_INT 1
51488: ARRAY
51489: PPUSH
51490: CALL_OW 254
51494: PPUSH
51495: LD_INT 5
51497: PPUSH
51498: CALL_OW 273
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51507: LD_VAR 0 16
51511: PUSH
51512: LD_INT 1
51514: ARRAY
51515: PPUSH
51516: LD_VAR 0 16
51520: PUSH
51521: LD_INT 2
51523: ARRAY
51524: PPUSH
51525: CALL_OW 488
51529: IFFALSE 51560
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51531: LD_VAR 0 13
51535: PPUSH
51536: LD_VAR 0 16
51540: PUSH
51541: LD_INT 1
51543: ARRAY
51544: PPUSH
51545: LD_VAR 0 16
51549: PUSH
51550: LD_INT 2
51552: ARRAY
51553: PPUSH
51554: CALL_OW 111
// continue ;
51558: GO 51050
// end ; end ; r := GetDir ( tmp ) ;
51560: LD_ADDR_VAR 0 15
51564: PUSH
51565: LD_VAR 0 13
51569: PPUSH
51570: CALL_OW 254
51574: ST_TO_ADDR
// if r = 5 then
51575: LD_VAR 0 15
51579: PUSH
51580: LD_INT 5
51582: EQUAL
51583: IFFALSE 51593
// r := 0 ;
51585: LD_ADDR_VAR 0 15
51589: PUSH
51590: LD_INT 0
51592: ST_TO_ADDR
// for j = r to 5 do
51593: LD_ADDR_VAR 0 10
51597: PUSH
51598: DOUBLE
51599: LD_VAR 0 15
51603: DEC
51604: ST_TO_ADDR
51605: LD_INT 5
51607: PUSH
51608: FOR_TO
51609: IFFALSE 51723
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51611: LD_ADDR_VAR 0 11
51615: PUSH
51616: LD_VAR 0 13
51620: PPUSH
51621: CALL_OW 250
51625: PPUSH
51626: LD_VAR 0 10
51630: PPUSH
51631: LD_INT 2
51633: PPUSH
51634: CALL_OW 272
51638: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51639: LD_ADDR_VAR 0 12
51643: PUSH
51644: LD_VAR 0 13
51648: PPUSH
51649: CALL_OW 251
51653: PPUSH
51654: LD_VAR 0 10
51658: PPUSH
51659: LD_INT 2
51661: PPUSH
51662: CALL_OW 273
51666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51667: LD_VAR 0 11
51671: PPUSH
51672: LD_VAR 0 12
51676: PPUSH
51677: CALL_OW 488
51681: PUSH
51682: LD_VAR 0 11
51686: PPUSH
51687: LD_VAR 0 12
51691: PPUSH
51692: CALL_OW 428
51696: NOT
51697: AND
51698: IFFALSE 51721
// begin ComMoveXY ( tmp , _x , _y ) ;
51700: LD_VAR 0 13
51704: PPUSH
51705: LD_VAR 0 11
51709: PPUSH
51710: LD_VAR 0 12
51714: PPUSH
51715: CALL_OW 111
// break ;
51719: GO 51723
// end ; end ;
51721: GO 51608
51723: POP
51724: POP
// end ; end ;
51725: GO 51050
51727: POP
51728: POP
// end ;
51729: LD_VAR 0 8
51733: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51734: LD_INT 0
51736: PPUSH
// result := true ;
51737: LD_ADDR_VAR 0 3
51741: PUSH
51742: LD_INT 1
51744: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51745: LD_VAR 0 2
51749: PUSH
51750: LD_INT 24
51752: DOUBLE
51753: EQUAL
51754: IFTRUE 51764
51756: LD_INT 33
51758: DOUBLE
51759: EQUAL
51760: IFTRUE 51764
51762: GO 51789
51764: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51765: LD_ADDR_VAR 0 3
51769: PUSH
51770: LD_INT 32
51772: PPUSH
51773: LD_VAR 0 1
51777: PPUSH
51778: CALL_OW 321
51782: PUSH
51783: LD_INT 2
51785: EQUAL
51786: ST_TO_ADDR
51787: GO 52105
51789: LD_INT 20
51791: DOUBLE
51792: EQUAL
51793: IFTRUE 51797
51795: GO 51822
51797: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51798: LD_ADDR_VAR 0 3
51802: PUSH
51803: LD_INT 6
51805: PPUSH
51806: LD_VAR 0 1
51810: PPUSH
51811: CALL_OW 321
51815: PUSH
51816: LD_INT 2
51818: EQUAL
51819: ST_TO_ADDR
51820: GO 52105
51822: LD_INT 22
51824: DOUBLE
51825: EQUAL
51826: IFTRUE 51836
51828: LD_INT 36
51830: DOUBLE
51831: EQUAL
51832: IFTRUE 51836
51834: GO 51861
51836: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51837: LD_ADDR_VAR 0 3
51841: PUSH
51842: LD_INT 15
51844: PPUSH
51845: LD_VAR 0 1
51849: PPUSH
51850: CALL_OW 321
51854: PUSH
51855: LD_INT 2
51857: EQUAL
51858: ST_TO_ADDR
51859: GO 52105
51861: LD_INT 30
51863: DOUBLE
51864: EQUAL
51865: IFTRUE 51869
51867: GO 51894
51869: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51870: LD_ADDR_VAR 0 3
51874: PUSH
51875: LD_INT 20
51877: PPUSH
51878: LD_VAR 0 1
51882: PPUSH
51883: CALL_OW 321
51887: PUSH
51888: LD_INT 2
51890: EQUAL
51891: ST_TO_ADDR
51892: GO 52105
51894: LD_INT 28
51896: DOUBLE
51897: EQUAL
51898: IFTRUE 51908
51900: LD_INT 21
51902: DOUBLE
51903: EQUAL
51904: IFTRUE 51908
51906: GO 51933
51908: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51909: LD_ADDR_VAR 0 3
51913: PUSH
51914: LD_INT 21
51916: PPUSH
51917: LD_VAR 0 1
51921: PPUSH
51922: CALL_OW 321
51926: PUSH
51927: LD_INT 2
51929: EQUAL
51930: ST_TO_ADDR
51931: GO 52105
51933: LD_INT 16
51935: DOUBLE
51936: EQUAL
51937: IFTRUE 51941
51939: GO 51966
51941: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51942: LD_ADDR_VAR 0 3
51946: PUSH
51947: LD_INT 84
51949: PPUSH
51950: LD_VAR 0 1
51954: PPUSH
51955: CALL_OW 321
51959: PUSH
51960: LD_INT 2
51962: EQUAL
51963: ST_TO_ADDR
51964: GO 52105
51966: LD_INT 19
51968: DOUBLE
51969: EQUAL
51970: IFTRUE 51980
51972: LD_INT 23
51974: DOUBLE
51975: EQUAL
51976: IFTRUE 51980
51978: GO 52005
51980: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51981: LD_ADDR_VAR 0 3
51985: PUSH
51986: LD_INT 83
51988: PPUSH
51989: LD_VAR 0 1
51993: PPUSH
51994: CALL_OW 321
51998: PUSH
51999: LD_INT 2
52001: EQUAL
52002: ST_TO_ADDR
52003: GO 52105
52005: LD_INT 17
52007: DOUBLE
52008: EQUAL
52009: IFTRUE 52013
52011: GO 52038
52013: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52014: LD_ADDR_VAR 0 3
52018: PUSH
52019: LD_INT 39
52021: PPUSH
52022: LD_VAR 0 1
52026: PPUSH
52027: CALL_OW 321
52031: PUSH
52032: LD_INT 2
52034: EQUAL
52035: ST_TO_ADDR
52036: GO 52105
52038: LD_INT 18
52040: DOUBLE
52041: EQUAL
52042: IFTRUE 52046
52044: GO 52071
52046: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52047: LD_ADDR_VAR 0 3
52051: PUSH
52052: LD_INT 40
52054: PPUSH
52055: LD_VAR 0 1
52059: PPUSH
52060: CALL_OW 321
52064: PUSH
52065: LD_INT 2
52067: EQUAL
52068: ST_TO_ADDR
52069: GO 52105
52071: LD_INT 27
52073: DOUBLE
52074: EQUAL
52075: IFTRUE 52079
52077: GO 52104
52079: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52080: LD_ADDR_VAR 0 3
52084: PUSH
52085: LD_INT 35
52087: PPUSH
52088: LD_VAR 0 1
52092: PPUSH
52093: CALL_OW 321
52097: PUSH
52098: LD_INT 2
52100: EQUAL
52101: ST_TO_ADDR
52102: GO 52105
52104: POP
// end ;
52105: LD_VAR 0 3
52109: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52110: LD_INT 0
52112: PPUSH
52113: PPUSH
52114: PPUSH
52115: PPUSH
52116: PPUSH
52117: PPUSH
52118: PPUSH
52119: PPUSH
52120: PPUSH
52121: PPUSH
52122: PPUSH
// result := false ;
52123: LD_ADDR_VAR 0 6
52127: PUSH
52128: LD_INT 0
52130: ST_TO_ADDR
// if btype = b_depot then
52131: LD_VAR 0 2
52135: PUSH
52136: LD_INT 0
52138: EQUAL
52139: IFFALSE 52151
// begin result := true ;
52141: LD_ADDR_VAR 0 6
52145: PUSH
52146: LD_INT 1
52148: ST_TO_ADDR
// exit ;
52149: GO 52977
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52151: LD_VAR 0 1
52155: NOT
52156: PUSH
52157: LD_VAR 0 1
52161: PPUSH
52162: CALL_OW 266
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: IN
52177: NOT
52178: OR
52179: PUSH
52180: LD_VAR 0 2
52184: NOT
52185: OR
52186: PUSH
52187: LD_VAR 0 5
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: LD_INT 4
52206: PUSH
52207: LD_INT 5
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: IN
52218: NOT
52219: OR
52220: PUSH
52221: LD_VAR 0 3
52225: PPUSH
52226: LD_VAR 0 4
52230: PPUSH
52231: CALL_OW 488
52235: NOT
52236: OR
52237: IFFALSE 52241
// exit ;
52239: GO 52977
// side := GetSide ( depot ) ;
52241: LD_ADDR_VAR 0 9
52245: PUSH
52246: LD_VAR 0 1
52250: PPUSH
52251: CALL_OW 255
52255: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52256: LD_VAR 0 9
52260: PPUSH
52261: LD_VAR 0 2
52265: PPUSH
52266: CALL 51734 0 2
52270: NOT
52271: IFFALSE 52275
// exit ;
52273: GO 52977
// pom := GetBase ( depot ) ;
52275: LD_ADDR_VAR 0 10
52279: PUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: CALL_OW 274
52289: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52290: LD_ADDR_VAR 0 11
52294: PUSH
52295: LD_VAR 0 2
52299: PPUSH
52300: LD_VAR 0 1
52304: PPUSH
52305: CALL_OW 248
52309: PPUSH
52310: CALL_OW 450
52314: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52315: LD_VAR 0 10
52319: PPUSH
52320: LD_INT 1
52322: PPUSH
52323: CALL_OW 275
52327: PUSH
52328: LD_VAR 0 11
52332: PUSH
52333: LD_INT 1
52335: ARRAY
52336: GREATEREQUAL
52337: PUSH
52338: LD_VAR 0 10
52342: PPUSH
52343: LD_INT 2
52345: PPUSH
52346: CALL_OW 275
52350: PUSH
52351: LD_VAR 0 11
52355: PUSH
52356: LD_INT 2
52358: ARRAY
52359: GREATEREQUAL
52360: AND
52361: PUSH
52362: LD_VAR 0 10
52366: PPUSH
52367: LD_INT 3
52369: PPUSH
52370: CALL_OW 275
52374: PUSH
52375: LD_VAR 0 11
52379: PUSH
52380: LD_INT 3
52382: ARRAY
52383: GREATEREQUAL
52384: AND
52385: NOT
52386: IFFALSE 52390
// exit ;
52388: GO 52977
// if GetBType ( depot ) = b_depot then
52390: LD_VAR 0 1
52394: PPUSH
52395: CALL_OW 266
52399: PUSH
52400: LD_INT 0
52402: EQUAL
52403: IFFALSE 52415
// dist := 28 else
52405: LD_ADDR_VAR 0 14
52409: PUSH
52410: LD_INT 28
52412: ST_TO_ADDR
52413: GO 52423
// dist := 36 ;
52415: LD_ADDR_VAR 0 14
52419: PUSH
52420: LD_INT 36
52422: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52423: LD_VAR 0 1
52427: PPUSH
52428: LD_VAR 0 3
52432: PPUSH
52433: LD_VAR 0 4
52437: PPUSH
52438: CALL_OW 297
52442: PUSH
52443: LD_VAR 0 14
52447: GREATER
52448: IFFALSE 52452
// exit ;
52450: GO 52977
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52452: LD_ADDR_VAR 0 12
52456: PUSH
52457: LD_VAR 0 2
52461: PPUSH
52462: LD_VAR 0 3
52466: PPUSH
52467: LD_VAR 0 4
52471: PPUSH
52472: LD_VAR 0 5
52476: PPUSH
52477: LD_VAR 0 1
52481: PPUSH
52482: CALL_OW 248
52486: PPUSH
52487: LD_INT 0
52489: PPUSH
52490: CALL 52982 0 6
52494: ST_TO_ADDR
// if not hexes then
52495: LD_VAR 0 12
52499: NOT
52500: IFFALSE 52504
// exit ;
52502: GO 52977
// hex := GetHexInfo ( x , y ) ;
52504: LD_ADDR_VAR 0 15
52508: PUSH
52509: LD_VAR 0 3
52513: PPUSH
52514: LD_VAR 0 4
52518: PPUSH
52519: CALL_OW 546
52523: ST_TO_ADDR
// if hex [ 1 ] then
52524: LD_VAR 0 15
52528: PUSH
52529: LD_INT 1
52531: ARRAY
52532: IFFALSE 52536
// exit ;
52534: GO 52977
// height := hex [ 2 ] ;
52536: LD_ADDR_VAR 0 13
52540: PUSH
52541: LD_VAR 0 15
52545: PUSH
52546: LD_INT 2
52548: ARRAY
52549: ST_TO_ADDR
// for i = 1 to hexes do
52550: LD_ADDR_VAR 0 7
52554: PUSH
52555: DOUBLE
52556: LD_INT 1
52558: DEC
52559: ST_TO_ADDR
52560: LD_VAR 0 12
52564: PUSH
52565: FOR_TO
52566: IFFALSE 52896
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52568: LD_VAR 0 12
52572: PUSH
52573: LD_VAR 0 7
52577: ARRAY
52578: PUSH
52579: LD_INT 1
52581: ARRAY
52582: PPUSH
52583: LD_VAR 0 12
52587: PUSH
52588: LD_VAR 0 7
52592: ARRAY
52593: PUSH
52594: LD_INT 2
52596: ARRAY
52597: PPUSH
52598: CALL_OW 488
52602: NOT
52603: PUSH
52604: LD_VAR 0 12
52608: PUSH
52609: LD_VAR 0 7
52613: ARRAY
52614: PUSH
52615: LD_INT 1
52617: ARRAY
52618: PPUSH
52619: LD_VAR 0 12
52623: PUSH
52624: LD_VAR 0 7
52628: ARRAY
52629: PUSH
52630: LD_INT 2
52632: ARRAY
52633: PPUSH
52634: CALL_OW 428
52638: PUSH
52639: LD_INT 0
52641: GREATER
52642: OR
52643: PUSH
52644: LD_VAR 0 12
52648: PUSH
52649: LD_VAR 0 7
52653: ARRAY
52654: PUSH
52655: LD_INT 1
52657: ARRAY
52658: PPUSH
52659: LD_VAR 0 12
52663: PUSH
52664: LD_VAR 0 7
52668: ARRAY
52669: PUSH
52670: LD_INT 2
52672: ARRAY
52673: PPUSH
52674: CALL_OW 351
52678: OR
52679: IFFALSE 52685
// exit ;
52681: POP
52682: POP
52683: GO 52977
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52685: LD_ADDR_VAR 0 8
52689: PUSH
52690: LD_VAR 0 12
52694: PUSH
52695: LD_VAR 0 7
52699: ARRAY
52700: PUSH
52701: LD_INT 1
52703: ARRAY
52704: PPUSH
52705: LD_VAR 0 12
52709: PUSH
52710: LD_VAR 0 7
52714: ARRAY
52715: PUSH
52716: LD_INT 2
52718: ARRAY
52719: PPUSH
52720: CALL_OW 546
52724: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52725: LD_VAR 0 8
52729: PUSH
52730: LD_INT 1
52732: ARRAY
52733: PUSH
52734: LD_VAR 0 8
52738: PUSH
52739: LD_INT 2
52741: ARRAY
52742: PUSH
52743: LD_VAR 0 13
52747: PUSH
52748: LD_INT 2
52750: PLUS
52751: GREATER
52752: OR
52753: PUSH
52754: LD_VAR 0 8
52758: PUSH
52759: LD_INT 2
52761: ARRAY
52762: PUSH
52763: LD_VAR 0 13
52767: PUSH
52768: LD_INT 2
52770: MINUS
52771: LESS
52772: OR
52773: PUSH
52774: LD_VAR 0 8
52778: PUSH
52779: LD_INT 3
52781: ARRAY
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 8
52788: PUSH
52789: LD_INT 9
52791: PUSH
52792: LD_INT 10
52794: PUSH
52795: LD_INT 11
52797: PUSH
52798: LD_INT 12
52800: PUSH
52801: LD_INT 13
52803: PUSH
52804: LD_INT 16
52806: PUSH
52807: LD_INT 17
52809: PUSH
52810: LD_INT 18
52812: PUSH
52813: LD_INT 19
52815: PUSH
52816: LD_INT 20
52818: PUSH
52819: LD_INT 21
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: IN
52837: NOT
52838: OR
52839: PUSH
52840: LD_VAR 0 8
52844: PUSH
52845: LD_INT 5
52847: ARRAY
52848: NOT
52849: OR
52850: PUSH
52851: LD_VAR 0 8
52855: PUSH
52856: LD_INT 6
52858: ARRAY
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 7
52868: PUSH
52869: LD_INT 9
52871: PUSH
52872: LD_INT 10
52874: PUSH
52875: LD_INT 11
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: IN
52886: NOT
52887: OR
52888: IFFALSE 52894
// exit ;
52890: POP
52891: POP
52892: GO 52977
// end ;
52894: GO 52565
52896: POP
52897: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52898: LD_VAR 0 9
52902: PPUSH
52903: LD_VAR 0 3
52907: PPUSH
52908: LD_VAR 0 4
52912: PPUSH
52913: LD_INT 20
52915: PPUSH
52916: CALL 44900 0 4
52920: PUSH
52921: LD_INT 4
52923: ARRAY
52924: IFFALSE 52928
// exit ;
52926: GO 52977
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52928: LD_VAR 0 2
52932: PUSH
52933: LD_INT 29
52935: PUSH
52936: LD_INT 30
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: IN
52943: PUSH
52944: LD_VAR 0 3
52948: PPUSH
52949: LD_VAR 0 4
52953: PPUSH
52954: LD_VAR 0 9
52958: PPUSH
52959: CALL_OW 440
52963: NOT
52964: AND
52965: IFFALSE 52969
// exit ;
52967: GO 52977
// result := true ;
52969: LD_ADDR_VAR 0 6
52973: PUSH
52974: LD_INT 1
52976: ST_TO_ADDR
// end ;
52977: LD_VAR 0 6
52981: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52982: LD_INT 0
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
53009: PPUSH
53010: PPUSH
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
53023: PPUSH
53024: PPUSH
53025: PPUSH
53026: PPUSH
53027: PPUSH
53028: PPUSH
53029: PPUSH
53030: PPUSH
53031: PPUSH
53032: PPUSH
53033: PPUSH
53034: PPUSH
53035: PPUSH
53036: PPUSH
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
53041: PPUSH
// result = [ ] ;
53042: LD_ADDR_VAR 0 7
53046: PUSH
53047: EMPTY
53048: ST_TO_ADDR
// temp_list = [ ] ;
53049: LD_ADDR_VAR 0 9
53053: PUSH
53054: EMPTY
53055: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53056: LD_VAR 0 4
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: LD_INT 3
53072: PUSH
53073: LD_INT 4
53075: PUSH
53076: LD_INT 5
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: IN
53087: NOT
53088: PUSH
53089: LD_VAR 0 1
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 1
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: IN
53104: PUSH
53105: LD_VAR 0 5
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: IN
53124: NOT
53125: AND
53126: OR
53127: IFFALSE 53131
// exit ;
53129: GO 71522
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53131: LD_VAR 0 1
53135: PUSH
53136: LD_INT 6
53138: PUSH
53139: LD_INT 7
53141: PUSH
53142: LD_INT 8
53144: PUSH
53145: LD_INT 13
53147: PUSH
53148: LD_INT 12
53150: PUSH
53151: LD_INT 15
53153: PUSH
53154: LD_INT 11
53156: PUSH
53157: LD_INT 14
53159: PUSH
53160: LD_INT 10
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: IN
53174: IFFALSE 53184
// btype = b_lab ;
53176: LD_ADDR_VAR 0 1
53180: PUSH
53181: LD_INT 6
53183: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53184: LD_VAR 0 6
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: IN
53203: NOT
53204: PUSH
53205: LD_VAR 0 1
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: LD_INT 6
53224: PUSH
53225: LD_INT 36
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 5
53233: PUSH
53234: LD_INT 31
53236: PUSH
53237: LD_INT 32
53239: PUSH
53240: LD_INT 33
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: IN
53256: NOT
53257: PUSH
53258: LD_VAR 0 6
53262: PUSH
53263: LD_INT 1
53265: EQUAL
53266: AND
53267: OR
53268: PUSH
53269: LD_VAR 0 1
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: IN
53284: NOT
53285: PUSH
53286: LD_VAR 0 6
53290: PUSH
53291: LD_INT 2
53293: EQUAL
53294: AND
53295: OR
53296: IFFALSE 53306
// mode = 0 ;
53298: LD_ADDR_VAR 0 6
53302: PUSH
53303: LD_INT 0
53305: ST_TO_ADDR
// case mode of 0 :
53306: LD_VAR 0 6
53310: PUSH
53311: LD_INT 0
53313: DOUBLE
53314: EQUAL
53315: IFTRUE 53319
53317: GO 64772
53319: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53320: LD_ADDR_VAR 0 11
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53513: LD_ADDR_VAR 0 12
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 3
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53709: LD_ADDR_VAR 0 13
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 3
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53908: LD_ADDR_VAR 0 14
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54104: LD_ADDR_VAR 0 15
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54297: LD_ADDR_VAR 0 16
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 3
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54490: LD_ADDR_VAR 0 17
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54720: LD_ADDR_VAR 0 18
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 2
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54950: LD_ADDR_VAR 0 19
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55180: LD_ADDR_VAR 0 20
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: NEG
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 2
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55410: LD_ADDR_VAR 0 21
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55640: LD_ADDR_VAR 0 22
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55870: LD_ADDR_VAR 0 23
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 3
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 3
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56150: LD_ADDR_VAR 0 24
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56426: LD_ADDR_VAR 0 25
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 3
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56700: LD_ADDR_VAR 0 26
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 2
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56976: LD_ADDR_VAR 0 27
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 1
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 2
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 3
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 3
57221: NEG
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57256: LD_ADDR_VAR 0 28
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 3
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57538: LD_ADDR_VAR 0 29
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 1
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: NEG
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: LD_INT 3
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57817: LD_ADDR_VAR 0 30
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: NEG
57899: PUSH
57900: LD_INT 2
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: LD_INT 2
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58095: LD_ADDR_VAR 0 31
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58373: LD_ADDR_VAR 0 32
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: LD_INT 2
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: LD_INT 3
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58651: LD_ADDR_VAR 0 33
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: LD_INT 2
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 3
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58930: LD_ADDR_VAR 0 34
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 2
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: LD_INT 2
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 3
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59210: LD_ADDR_VAR 0 35
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59322: LD_ADDR_VAR 0 36
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59434: LD_ADDR_VAR 0 37
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59546: LD_ADDR_VAR 0 38
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 1
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59658: LD_ADDR_VAR 0 39
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59770: LD_ADDR_VAR 0 40
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59882: LD_ADDR_VAR 0 41
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 2
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: LD_INT 2
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 3
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 3
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 3
60191: NEG
60192: PUSH
60193: LD_INT 3
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60232: LD_ADDR_VAR 0 42
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 3
60529: NEG
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: LD_INT 3
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60582: LD_ADDR_VAR 0 43
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 1
60640: NEG
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60930: LD_ADDR_VAR 0 44
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: NEG
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 3
61204: NEG
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: NEG
61228: PUSH
61229: LD_INT 2
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 3
61239: NEG
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61280: LD_ADDR_VAR 0 45
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 2
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: LD_INT 3
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 3
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 3
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: LD_INT 3
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 3
61577: NEG
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61630: LD_ADDR_VAR 0 46
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 1
61711: NEG
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: LD_INT 2
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 2
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: NEG
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 3
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 3
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 2
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: LD_INT 3
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 3
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 3
61926: NEG
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: NEG
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61978: LD_ADDR_VAR 0 47
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: NEG
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 2
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62129: LD_ADDR_VAR 0 48
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 2
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 2
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62276: LD_ADDR_VAR 0 49
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: LD_INT 1
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62420: LD_ADDR_VAR 0 50
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: LD_INT 1
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: NEG
62490: PUSH
62491: LD_INT 1
62493: NEG
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 2
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62564: LD_ADDR_VAR 0 51
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: LD_INT 1
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62711: LD_ADDR_VAR 0 52
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62862: LD_ADDR_VAR 0 53
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: LD_INT 2
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: LD_INT 2
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 2
63049: NEG
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: NEG
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63092: LD_ADDR_VAR 0 54
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 2
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 2
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 2
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 2
63291: NEG
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63322: LD_ADDR_VAR 0 55
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: LD_INT 2
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: LD_INT 2
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 2
63498: NEG
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 2
63509: NEG
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 2
63521: NEG
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63552: LD_ADDR_VAR 0 56
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: LD_INT 1
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 1
63610: NEG
63611: PUSH
63612: LD_INT 0
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: NEG
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 2
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: LD_INT 2
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 2
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: LD_INT 2
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63782: LD_ADDR_VAR 0 57
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: LD_INT 2
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 2
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 2
63981: NEG
63982: PUSH
63983: LD_INT 2
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64012: LD_ADDR_VAR 0 58
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 2
64188: NEG
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: LD_INT 2
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64242: LD_ADDR_VAR 0 59
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 1
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64330: LD_ADDR_VAR 0 60
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 0
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64418: LD_ADDR_VAR 0 61
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64506: LD_ADDR_VAR 0 62
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64594: LD_ADDR_VAR 0 63
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 1
64614: NEG
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64682: LD_ADDR_VAR 0 64
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: LD_INT 1
64702: NEG
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 1
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// end ; 1 :
64770: GO 70667
64772: LD_INT 1
64774: DOUBLE
64775: EQUAL
64776: IFTRUE 64780
64778: GO 67403
64780: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64781: LD_ADDR_VAR 0 11
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 3
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 3
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: LIST
64824: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64825: LD_ADDR_VAR 0 12
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: LD_INT 1
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: LIST
64865: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64866: LD_ADDR_VAR 0 13
64870: PUSH
64871: LD_INT 3
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 3
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64906: LD_ADDR_VAR 0 14
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 3
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: LD_INT 2
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64947: LD_ADDR_VAR 0 15
64951: PUSH
64952: LD_INT 2
64954: NEG
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 3
64965: NEG
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 3
64976: NEG
64977: PUSH
64978: LD_INT 1
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64991: LD_ADDR_VAR 0 16
64995: PUSH
64996: LD_INT 2
64998: NEG
64999: PUSH
65000: LD_INT 3
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 3
65010: NEG
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 3
65022: NEG
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: LIST
65036: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65037: LD_ADDR_VAR 0 17
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: LD_INT 3
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: LD_INT 3
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: LIST
65080: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65081: LD_ADDR_VAR 0 18
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 3
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65122: LD_ADDR_VAR 0 19
65126: PUSH
65127: LD_INT 3
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 3
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: LD_INT 3
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65162: LD_ADDR_VAR 0 20
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 3
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 1
65189: NEG
65190: PUSH
65191: LD_INT 2
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65203: LD_ADDR_VAR 0 21
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 3
65232: NEG
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: LIST
65246: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65247: LD_ADDR_VAR 0 22
65251: PUSH
65252: LD_INT 2
65254: NEG
65255: PUSH
65256: LD_INT 3
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 3
65266: NEG
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 3
65278: NEG
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65293: LD_ADDR_VAR 0 23
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 3
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: LD_INT 4
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 1
65323: PUSH
65324: LD_INT 3
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65337: LD_ADDR_VAR 0 24
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: LD_INT 0
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 3
65354: PUSH
65355: LD_INT 1
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 4
65365: PUSH
65366: LD_INT 1
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65378: LD_ADDR_VAR 0 25
65382: PUSH
65383: LD_INT 3
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 4
65395: PUSH
65396: LD_INT 3
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 3
65405: PUSH
65406: LD_INT 4
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: LIST
65417: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65418: LD_ADDR_VAR 0 26
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: LD_INT 3
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: LD_INT 4
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65459: LD_ADDR_VAR 0 27
65463: PUSH
65464: LD_INT 3
65466: NEG
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 3
65477: NEG
65478: PUSH
65479: LD_INT 1
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 4
65488: NEG
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: LIST
65502: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65503: LD_ADDR_VAR 0 28
65507: PUSH
65508: LD_INT 3
65510: NEG
65511: PUSH
65512: LD_INT 3
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 3
65522: NEG
65523: PUSH
65524: LD_INT 4
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 4
65534: NEG
65535: PUSH
65536: LD_INT 3
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65549: LD_ADDR_VAR 0 29
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: LD_INT 3
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: LD_INT 3
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: LD_INT 2
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: LD_INT 4
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 4
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 3
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: LD_INT 5
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 0
65636: PUSH
65637: LD_INT 5
65639: NEG
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 4
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: LD_INT 6
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: LD_INT 6
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: LD_INT 5
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65704: LD_ADDR_VAR 0 30
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 3
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 3
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 4
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 4
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 4
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 5
65784: PUSH
65785: LD_INT 0
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 5
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 5
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 6
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 6
65825: PUSH
65826: LD_INT 1
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65847: LD_ADDR_VAR 0 31
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 3
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 4
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: LD_INT 4
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: LD_INT 4
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 5
65914: PUSH
65915: LD_INT 4
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 5
65924: PUSH
65925: LD_INT 5
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 4
65934: PUSH
65935: LD_INT 5
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 6
65944: PUSH
65945: LD_INT 5
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 6
65954: PUSH
65955: LD_INT 6
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 5
65964: PUSH
65965: LD_INT 6
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65986: LD_ADDR_VAR 0 32
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: LD_INT 3
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 1
66013: NEG
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 1
66024: PUSH
66025: LD_INT 4
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 4
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: LD_INT 3
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: PUSH
66056: LD_INT 5
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 5
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: LD_INT 4
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 1
66086: PUSH
66087: LD_INT 6
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 0
66096: PUSH
66097: LD_INT 6
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: LD_INT 5
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66129: LD_ADDR_VAR 0 33
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 3
66147: NEG
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 3
66158: NEG
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 3
66170: NEG
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 4
66181: NEG
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 4
66192: NEG
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 4
66204: NEG
66205: PUSH
66206: LD_INT 1
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 5
66215: NEG
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 5
66226: NEG
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 5
66238: NEG
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 6
66249: NEG
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 6
66260: NEG
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66284: LD_ADDR_VAR 0 34
66288: PUSH
66289: LD_INT 2
66291: NEG
66292: PUSH
66293: LD_INT 3
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 3
66303: NEG
66304: PUSH
66305: LD_INT 2
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 3
66315: NEG
66316: PUSH
66317: LD_INT 3
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 3
66327: NEG
66328: PUSH
66329: LD_INT 4
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 4
66339: NEG
66340: PUSH
66341: LD_INT 3
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 4
66351: NEG
66352: PUSH
66353: LD_INT 4
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 4
66363: NEG
66364: PUSH
66365: LD_INT 5
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 5
66375: NEG
66376: PUSH
66377: LD_INT 4
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 5
66387: NEG
66388: PUSH
66389: LD_INT 5
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 5
66399: NEG
66400: PUSH
66401: LD_INT 6
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 6
66411: NEG
66412: PUSH
66413: LD_INT 5
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 6
66423: NEG
66424: PUSH
66425: LD_INT 6
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66447: LD_ADDR_VAR 0 41
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: LD_INT 2
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: LD_INT 3
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: LD_INT 2
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: LIST
66490: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66491: LD_ADDR_VAR 0 42
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: LD_INT 1
66511: NEG
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 3
66519: PUSH
66520: LD_INT 1
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66532: LD_ADDR_VAR 0 43
66536: PUSH
66537: LD_INT 2
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: LD_INT 3
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: LIST
66571: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66572: LD_ADDR_VAR 0 44
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: PUSH
66590: LD_INT 3
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: NEG
66600: PUSH
66601: LD_INT 2
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66613: LD_ADDR_VAR 0 45
66617: PUSH
66618: LD_INT 2
66620: NEG
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_INT 3
66642: NEG
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: LIST
66656: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66657: LD_ADDR_VAR 0 46
66661: PUSH
66662: LD_INT 2
66664: NEG
66665: PUSH
66666: LD_INT 2
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: LD_INT 3
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 3
66688: NEG
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66703: LD_ADDR_VAR 0 47
66707: PUSH
66708: LD_INT 2
66710: NEG
66711: PUSH
66712: LD_INT 3
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: LD_INT 3
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66736: LD_ADDR_VAR 0 48
66740: PUSH
66741: LD_INT 1
66743: PUSH
66744: LD_INT 2
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 2
66754: PUSH
66755: LD_INT 1
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66767: LD_ADDR_VAR 0 49
66771: PUSH
66772: LD_INT 3
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66796: LD_ADDR_VAR 0 50
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: LD_INT 3
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: LD_INT 3
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66825: LD_ADDR_VAR 0 51
66829: PUSH
66830: LD_INT 1
66832: NEG
66833: PUSH
66834: LD_INT 2
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66856: LD_ADDR_VAR 0 52
66860: PUSH
66861: LD_INT 3
66863: NEG
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 3
66875: NEG
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66889: LD_ADDR_VAR 0 53
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: LD_INT 3
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: LD_INT 3
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: LD_INT 2
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66933: LD_ADDR_VAR 0 54
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: LD_INT 0
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66974: LD_ADDR_VAR 0 55
66978: PUSH
66979: LD_INT 3
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: LIST
67013: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67014: LD_ADDR_VAR 0 56
67018: PUSH
67019: LD_INT 1
67021: PUSH
67022: LD_INT 3
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: LD_INT 3
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: LD_INT 2
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: LIST
67054: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67055: LD_ADDR_VAR 0 57
67059: PUSH
67060: LD_INT 2
67062: NEG
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 3
67073: NEG
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 3
67084: NEG
67085: PUSH
67086: LD_INT 1
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: LIST
67098: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67099: LD_ADDR_VAR 0 58
67103: PUSH
67104: LD_INT 2
67106: NEG
67107: PUSH
67108: LD_INT 3
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 3
67118: NEG
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 3
67130: NEG
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67145: LD_ADDR_VAR 0 59
67149: PUSH
67150: LD_INT 1
67152: NEG
67153: PUSH
67154: LD_INT 2
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: LD_INT 2
67167: NEG
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: LIST
67188: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67189: LD_ADDR_VAR 0 60
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 2
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 2
67217: PUSH
67218: LD_INT 1
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: LIST
67229: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67230: LD_ADDR_VAR 0 61
67234: PUSH
67235: LD_INT 2
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: LD_INT 2
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: LIST
67269: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67270: LD_ADDR_VAR 0 62
67274: PUSH
67275: LD_INT 1
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: LD_INT 2
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: LD_INT 1
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67311: LD_ADDR_VAR 0 63
67315: PUSH
67316: LD_INT 1
67318: NEG
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 2
67329: NEG
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 2
67340: NEG
67341: PUSH
67342: LD_INT 1
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: LIST
67354: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67355: LD_ADDR_VAR 0 64
67359: PUSH
67360: LD_INT 1
67362: NEG
67363: PUSH
67364: LD_INT 2
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 2
67374: NEG
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: NEG
67387: PUSH
67388: LD_INT 2
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: LIST
67400: ST_TO_ADDR
// end ; 2 :
67401: GO 70667
67403: LD_INT 2
67405: DOUBLE
67406: EQUAL
67407: IFTRUE 67411
67409: GO 70666
67411: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67412: LD_ADDR_VAR 0 29
67416: PUSH
67417: LD_INT 4
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 4
67429: PUSH
67430: LD_INT 1
67432: NEG
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 5
67440: PUSH
67441: LD_INT 0
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 5
67450: PUSH
67451: LD_INT 1
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 4
67460: PUSH
67461: LD_INT 1
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 3
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 3
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: LD_INT 2
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 5
67502: PUSH
67503: LD_INT 2
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 3
67512: PUSH
67513: LD_INT 3
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 4
67532: PUSH
67533: LD_INT 3
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 4
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 4
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 2
67562: PUSH
67563: LD_INT 3
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 2
67572: PUSH
67573: LD_INT 2
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 4
67582: PUSH
67583: LD_INT 2
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: PUSH
67593: LD_INT 4
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 0
67602: PUSH
67603: LD_INT 4
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: LD_INT 3
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: LD_INT 4
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: LD_INT 5
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 0
67642: PUSH
67643: LD_INT 5
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: LD_INT 4
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 1
67663: NEG
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: PUSH
67675: LD_INT 5
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 2
67684: NEG
67685: PUSH
67686: LD_INT 3
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 3
67695: NEG
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 3
67706: NEG
67707: PUSH
67708: LD_INT 1
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: LD_INT 0
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 2
67729: NEG
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: LD_INT 1
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 4
67751: NEG
67752: PUSH
67753: LD_INT 0
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 4
67762: NEG
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 4
67774: NEG
67775: PUSH
67776: LD_INT 2
67778: NEG
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: NEG
67787: PUSH
67788: LD_INT 2
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 4
67797: NEG
67798: PUSH
67799: LD_INT 4
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 4
67809: NEG
67810: PUSH
67811: LD_INT 5
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 3
67821: NEG
67822: PUSH
67823: LD_INT 4
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 3
67833: NEG
67834: PUSH
67835: LD_INT 3
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 4
67845: NEG
67846: PUSH
67847: LD_INT 3
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 5
67857: NEG
67858: PUSH
67859: LD_INT 4
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 5
67869: NEG
67870: PUSH
67871: LD_INT 5
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 3
67881: NEG
67882: PUSH
67883: LD_INT 5
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 5
67893: NEG
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67950: LD_ADDR_VAR 0 30
67954: PUSH
67955: LD_INT 4
67957: PUSH
67958: LD_INT 4
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 4
67967: PUSH
67968: LD_INT 3
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 5
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 5
67987: PUSH
67988: LD_INT 5
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 4
67997: PUSH
67998: LD_INT 5
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: LD_INT 4
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 3
68017: PUSH
68018: LD_INT 3
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 5
68027: PUSH
68028: LD_INT 3
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 3
68037: PUSH
68038: LD_INT 5
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: LD_INT 3
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 0
68057: PUSH
68058: LD_INT 2
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 1
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 4
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: LD_INT 3
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 2
68119: PUSH
68120: LD_INT 4
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 2
68129: NEG
68130: PUSH
68131: LD_INT 2
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 4
68140: NEG
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 4
68151: NEG
68152: PUSH
68153: LD_INT 1
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 3
68163: NEG
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 3
68174: NEG
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: NEG
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 5
68196: NEG
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 5
68207: NEG
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 5
68219: NEG
68220: PUSH
68221: LD_INT 2
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 3
68231: NEG
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 3
68242: NEG
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 3
68254: NEG
68255: PUSH
68256: LD_INT 4
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 2
68266: NEG
68267: PUSH
68268: LD_INT 3
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 2
68278: NEG
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 3
68290: NEG
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 4
68302: NEG
68303: PUSH
68304: LD_INT 3
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 4
68314: NEG
68315: PUSH
68316: LD_INT 4
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: LD_INT 4
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 4
68338: NEG
68339: PUSH
68340: LD_INT 2
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 0
68350: PUSH
68351: LD_INT 4
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: LD_INT 5
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: LD_INT 4
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: LD_INT 3
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: LD_INT 3
68397: NEG
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: LD_INT 4
68409: NEG
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: LD_INT 5
68421: NEG
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 2
68429: PUSH
68430: LD_INT 3
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 2
68440: NEG
68441: PUSH
68442: LD_INT 5
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68497: LD_ADDR_VAR 0 31
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: LD_INT 4
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: LD_INT 3
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: LD_INT 4
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 1
68534: PUSH
68535: LD_INT 5
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 0
68544: PUSH
68545: LD_INT 5
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: LD_INT 4
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 1
68565: NEG
68566: PUSH
68567: LD_INT 3
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 2
68576: PUSH
68577: LD_INT 5
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 2
68586: NEG
68587: PUSH
68588: LD_INT 3
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 3
68597: NEG
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 3
68608: NEG
68609: PUSH
68610: LD_INT 1
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: NEG
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 2
68631: NEG
68632: PUSH
68633: LD_INT 1
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 4
68653: NEG
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 4
68664: NEG
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 4
68676: NEG
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 2
68688: NEG
68689: PUSH
68690: LD_INT 2
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 4
68699: NEG
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 4
68711: NEG
68712: PUSH
68713: LD_INT 5
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 3
68723: NEG
68724: PUSH
68725: LD_INT 4
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: LD_INT 3
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 4
68747: NEG
68748: PUSH
68749: LD_INT 3
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 5
68759: NEG
68760: PUSH
68761: LD_INT 4
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 5
68771: NEG
68772: PUSH
68773: LD_INT 5
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 3
68783: NEG
68784: PUSH
68785: LD_INT 5
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 5
68795: NEG
68796: PUSH
68797: LD_INT 3
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 0
68807: PUSH
68808: LD_INT 3
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 0
68818: PUSH
68819: LD_INT 4
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: LD_INT 3
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 1
68840: PUSH
68841: LD_INT 2
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 0
68851: PUSH
68852: LD_INT 2
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 1
68862: NEG
68863: PUSH
68864: LD_INT 3
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 1
68874: NEG
68875: PUSH
68876: LD_INT 4
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: LD_INT 2
68886: PUSH
68887: LD_INT 2
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 2
68897: NEG
68898: PUSH
68899: LD_INT 4
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 4
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 4
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 5
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 5
68940: PUSH
68941: LD_INT 1
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 4
68950: PUSH
68951: LD_INT 1
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 3
68960: PUSH
68961: LD_INT 0
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 3
68970: PUSH
68971: LD_INT 1
68973: NEG
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 3
68981: PUSH
68982: LD_INT 2
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 5
68992: PUSH
68993: LD_INT 2
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69047: LD_ADDR_VAR 0 32
69051: PUSH
69052: LD_INT 4
69054: NEG
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 4
69065: NEG
69066: PUSH
69067: LD_INT 1
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 3
69077: NEG
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 3
69088: NEG
69089: PUSH
69090: LD_INT 1
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 4
69099: NEG
69100: PUSH
69101: LD_INT 1
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 5
69110: NEG
69111: PUSH
69112: LD_INT 0
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 5
69121: NEG
69122: PUSH
69123: LD_INT 1
69125: NEG
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 5
69133: NEG
69134: PUSH
69135: LD_INT 2
69137: NEG
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 3
69145: NEG
69146: PUSH
69147: LD_INT 2
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 3
69156: NEG
69157: PUSH
69158: LD_INT 3
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 3
69168: NEG
69169: PUSH
69170: LD_INT 4
69172: NEG
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 2
69180: NEG
69181: PUSH
69182: LD_INT 3
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 2
69192: NEG
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 3
69204: NEG
69205: PUSH
69206: LD_INT 2
69208: NEG
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 4
69216: NEG
69217: PUSH
69218: LD_INT 3
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 4
69228: NEG
69229: PUSH
69230: LD_INT 4
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 2
69240: NEG
69241: PUSH
69242: LD_INT 4
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 4
69252: NEG
69253: PUSH
69254: LD_INT 2
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: LD_INT 4
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: LD_INT 5
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: LD_INT 4
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: LD_INT 3
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 0
69308: PUSH
69309: LD_INT 3
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 1
69319: NEG
69320: PUSH
69321: LD_INT 4
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: LD_INT 5
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 2
69343: PUSH
69344: LD_INT 3
69346: NEG
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: LD_INT 5
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 3
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 3
69376: PUSH
69377: LD_INT 1
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 4
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 4
69397: PUSH
69398: LD_INT 1
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 3
69407: PUSH
69408: LD_INT 1
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 2
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 2
69438: PUSH
69439: LD_INT 2
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 4
69449: PUSH
69450: LD_INT 2
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 4
69459: PUSH
69460: LD_INT 4
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 4
69469: PUSH
69470: LD_INT 3
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 5
69479: PUSH
69480: LD_INT 4
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 5
69489: PUSH
69490: LD_INT 5
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 4
69499: PUSH
69500: LD_INT 5
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 3
69509: PUSH
69510: LD_INT 4
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 3
69519: PUSH
69520: LD_INT 3
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 5
69529: PUSH
69530: LD_INT 3
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 3
69539: PUSH
69540: LD_INT 5
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69594: LD_ADDR_VAR 0 33
69598: PUSH
69599: LD_INT 4
69601: NEG
69602: PUSH
69603: LD_INT 4
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 4
69613: NEG
69614: PUSH
69615: LD_INT 5
69617: NEG
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 3
69625: NEG
69626: PUSH
69627: LD_INT 4
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 3
69637: NEG
69638: PUSH
69639: LD_INT 3
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 4
69649: NEG
69650: PUSH
69651: LD_INT 3
69653: NEG
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 5
69661: NEG
69662: PUSH
69663: LD_INT 4
69665: NEG
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 5
69673: NEG
69674: PUSH
69675: LD_INT 5
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 3
69685: NEG
69686: PUSH
69687: LD_INT 5
69689: NEG
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 5
69697: NEG
69698: PUSH
69699: LD_INT 3
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: LD_INT 3
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 0
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 1
69731: PUSH
69732: LD_INT 3
69734: NEG
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 1
69742: PUSH
69743: LD_INT 2
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 0
69753: PUSH
69754: LD_INT 2
69756: NEG
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 1
69764: NEG
69765: PUSH
69766: LD_INT 3
69768: NEG
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 1
69776: NEG
69777: PUSH
69778: LD_INT 4
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 2
69788: PUSH
69789: LD_INT 2
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 2
69799: NEG
69800: PUSH
69801: LD_INT 4
69803: NEG
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 4
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 4
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 5
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 5
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 4
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 3
69872: PUSH
69873: LD_INT 1
69875: NEG
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 3
69883: PUSH
69884: LD_INT 2
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 5
69894: PUSH
69895: LD_INT 2
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 3
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 3
69914: PUSH
69915: LD_INT 2
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 4
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 4
69934: PUSH
69935: LD_INT 4
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 3
69944: PUSH
69945: LD_INT 4
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 2
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: LD_INT 2
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 4
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 2
69984: PUSH
69985: LD_INT 4
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: LD_INT 3
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 1
70014: PUSH
70015: LD_INT 4
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: LD_INT 5
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 5
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 1
70044: NEG
70045: PUSH
70046: LD_INT 4
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 1
70055: NEG
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 2
70066: PUSH
70067: LD_INT 5
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 2
70076: NEG
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70132: LD_ADDR_VAR 0 34
70136: PUSH
70137: LD_INT 0
70139: PUSH
70140: LD_INT 4
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 5
70153: NEG
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: LD_INT 4
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: LD_INT 3
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: LD_INT 3
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: LD_INT 4
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: NEG
70207: PUSH
70208: LD_INT 5
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 2
70218: PUSH
70219: LD_INT 3
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 2
70229: NEG
70230: PUSH
70231: LD_INT 5
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 3
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 3
70251: PUSH
70252: LD_INT 1
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 4
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 4
70272: PUSH
70273: LD_INT 1
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 3
70282: PUSH
70283: LD_INT 1
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 2
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 2
70313: PUSH
70314: LD_INT 2
70316: NEG
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 4
70324: PUSH
70325: LD_INT 2
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 4
70334: PUSH
70335: LD_INT 4
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 4
70344: PUSH
70345: LD_INT 3
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 5
70354: PUSH
70355: LD_INT 4
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 5
70364: PUSH
70365: LD_INT 5
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 4
70374: PUSH
70375: LD_INT 5
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 3
70384: PUSH
70385: LD_INT 4
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 3
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 5
70404: PUSH
70405: LD_INT 3
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 3
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 0
70424: PUSH
70425: LD_INT 3
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: LD_INT 2
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 1
70444: PUSH
70445: LD_INT 3
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 1
70454: PUSH
70455: LD_INT 4
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: LD_INT 4
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: LD_INT 1
70474: NEG
70475: PUSH
70476: LD_INT 3
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 2
70496: PUSH
70497: LD_INT 4
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 2
70506: NEG
70507: PUSH
70508: LD_INT 2
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 4
70517: NEG
70518: PUSH
70519: LD_INT 0
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 4
70528: NEG
70529: PUSH
70530: LD_INT 1
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 3
70540: NEG
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 3
70551: NEG
70552: PUSH
70553: LD_INT 1
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 4
70562: NEG
70563: PUSH
70564: LD_INT 1
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 5
70573: NEG
70574: PUSH
70575: LD_INT 0
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 5
70584: NEG
70585: PUSH
70586: LD_INT 1
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 5
70596: NEG
70597: PUSH
70598: LD_INT 2
70600: NEG
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 3
70608: NEG
70609: PUSH
70610: LD_INT 2
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: ST_TO_ADDR
// end ; end ;
70664: GO 70667
70666: POP
// case btype of b_depot , b_warehouse :
70667: LD_VAR 0 1
70671: PUSH
70672: LD_INT 0
70674: DOUBLE
70675: EQUAL
70676: IFTRUE 70686
70678: LD_INT 1
70680: DOUBLE
70681: EQUAL
70682: IFTRUE 70686
70684: GO 70887
70686: POP
// case nation of nation_american :
70687: LD_VAR 0 5
70691: PUSH
70692: LD_INT 1
70694: DOUBLE
70695: EQUAL
70696: IFTRUE 70700
70698: GO 70756
70700: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70701: LD_ADDR_VAR 0 9
70705: PUSH
70706: LD_VAR 0 11
70710: PUSH
70711: LD_VAR 0 12
70715: PUSH
70716: LD_VAR 0 13
70720: PUSH
70721: LD_VAR 0 14
70725: PUSH
70726: LD_VAR 0 15
70730: PUSH
70731: LD_VAR 0 16
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: PUSH
70744: LD_VAR 0 4
70748: PUSH
70749: LD_INT 1
70751: PLUS
70752: ARRAY
70753: ST_TO_ADDR
70754: GO 70885
70756: LD_INT 2
70758: DOUBLE
70759: EQUAL
70760: IFTRUE 70764
70762: GO 70820
70764: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70765: LD_ADDR_VAR 0 9
70769: PUSH
70770: LD_VAR 0 17
70774: PUSH
70775: LD_VAR 0 18
70779: PUSH
70780: LD_VAR 0 19
70784: PUSH
70785: LD_VAR 0 20
70789: PUSH
70790: LD_VAR 0 21
70794: PUSH
70795: LD_VAR 0 22
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: PUSH
70808: LD_VAR 0 4
70812: PUSH
70813: LD_INT 1
70815: PLUS
70816: ARRAY
70817: ST_TO_ADDR
70818: GO 70885
70820: LD_INT 3
70822: DOUBLE
70823: EQUAL
70824: IFTRUE 70828
70826: GO 70884
70828: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70829: LD_ADDR_VAR 0 9
70833: PUSH
70834: LD_VAR 0 23
70838: PUSH
70839: LD_VAR 0 24
70843: PUSH
70844: LD_VAR 0 25
70848: PUSH
70849: LD_VAR 0 26
70853: PUSH
70854: LD_VAR 0 27
70858: PUSH
70859: LD_VAR 0 28
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: PUSH
70872: LD_VAR 0 4
70876: PUSH
70877: LD_INT 1
70879: PLUS
70880: ARRAY
70881: ST_TO_ADDR
70882: GO 70885
70884: POP
70885: GO 71440
70887: LD_INT 2
70889: DOUBLE
70890: EQUAL
70891: IFTRUE 70901
70893: LD_INT 3
70895: DOUBLE
70896: EQUAL
70897: IFTRUE 70901
70899: GO 70957
70901: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70902: LD_ADDR_VAR 0 9
70906: PUSH
70907: LD_VAR 0 29
70911: PUSH
70912: LD_VAR 0 30
70916: PUSH
70917: LD_VAR 0 31
70921: PUSH
70922: LD_VAR 0 32
70926: PUSH
70927: LD_VAR 0 33
70931: PUSH
70932: LD_VAR 0 34
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: PUSH
70945: LD_VAR 0 4
70949: PUSH
70950: LD_INT 1
70952: PLUS
70953: ARRAY
70954: ST_TO_ADDR
70955: GO 71440
70957: LD_INT 16
70959: DOUBLE
70960: EQUAL
70961: IFTRUE 71019
70963: LD_INT 17
70965: DOUBLE
70966: EQUAL
70967: IFTRUE 71019
70969: LD_INT 18
70971: DOUBLE
70972: EQUAL
70973: IFTRUE 71019
70975: LD_INT 19
70977: DOUBLE
70978: EQUAL
70979: IFTRUE 71019
70981: LD_INT 22
70983: DOUBLE
70984: EQUAL
70985: IFTRUE 71019
70987: LD_INT 20
70989: DOUBLE
70990: EQUAL
70991: IFTRUE 71019
70993: LD_INT 21
70995: DOUBLE
70996: EQUAL
70997: IFTRUE 71019
70999: LD_INT 23
71001: DOUBLE
71002: EQUAL
71003: IFTRUE 71019
71005: LD_INT 24
71007: DOUBLE
71008: EQUAL
71009: IFTRUE 71019
71011: LD_INT 25
71013: DOUBLE
71014: EQUAL
71015: IFTRUE 71019
71017: GO 71075
71019: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71020: LD_ADDR_VAR 0 9
71024: PUSH
71025: LD_VAR 0 35
71029: PUSH
71030: LD_VAR 0 36
71034: PUSH
71035: LD_VAR 0 37
71039: PUSH
71040: LD_VAR 0 38
71044: PUSH
71045: LD_VAR 0 39
71049: PUSH
71050: LD_VAR 0 40
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: PUSH
71063: LD_VAR 0 4
71067: PUSH
71068: LD_INT 1
71070: PLUS
71071: ARRAY
71072: ST_TO_ADDR
71073: GO 71440
71075: LD_INT 6
71077: DOUBLE
71078: EQUAL
71079: IFTRUE 71131
71081: LD_INT 7
71083: DOUBLE
71084: EQUAL
71085: IFTRUE 71131
71087: LD_INT 8
71089: DOUBLE
71090: EQUAL
71091: IFTRUE 71131
71093: LD_INT 13
71095: DOUBLE
71096: EQUAL
71097: IFTRUE 71131
71099: LD_INT 12
71101: DOUBLE
71102: EQUAL
71103: IFTRUE 71131
71105: LD_INT 15
71107: DOUBLE
71108: EQUAL
71109: IFTRUE 71131
71111: LD_INT 11
71113: DOUBLE
71114: EQUAL
71115: IFTRUE 71131
71117: LD_INT 14
71119: DOUBLE
71120: EQUAL
71121: IFTRUE 71131
71123: LD_INT 10
71125: DOUBLE
71126: EQUAL
71127: IFTRUE 71131
71129: GO 71187
71131: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71132: LD_ADDR_VAR 0 9
71136: PUSH
71137: LD_VAR 0 41
71141: PUSH
71142: LD_VAR 0 42
71146: PUSH
71147: LD_VAR 0 43
71151: PUSH
71152: LD_VAR 0 44
71156: PUSH
71157: LD_VAR 0 45
71161: PUSH
71162: LD_VAR 0 46
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: PUSH
71175: LD_VAR 0 4
71179: PUSH
71180: LD_INT 1
71182: PLUS
71183: ARRAY
71184: ST_TO_ADDR
71185: GO 71440
71187: LD_INT 36
71189: DOUBLE
71190: EQUAL
71191: IFTRUE 71195
71193: GO 71251
71195: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71196: LD_ADDR_VAR 0 9
71200: PUSH
71201: LD_VAR 0 47
71205: PUSH
71206: LD_VAR 0 48
71210: PUSH
71211: LD_VAR 0 49
71215: PUSH
71216: LD_VAR 0 50
71220: PUSH
71221: LD_VAR 0 51
71225: PUSH
71226: LD_VAR 0 52
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: PUSH
71239: LD_VAR 0 4
71243: PUSH
71244: LD_INT 1
71246: PLUS
71247: ARRAY
71248: ST_TO_ADDR
71249: GO 71440
71251: LD_INT 4
71253: DOUBLE
71254: EQUAL
71255: IFTRUE 71277
71257: LD_INT 5
71259: DOUBLE
71260: EQUAL
71261: IFTRUE 71277
71263: LD_INT 34
71265: DOUBLE
71266: EQUAL
71267: IFTRUE 71277
71269: LD_INT 37
71271: DOUBLE
71272: EQUAL
71273: IFTRUE 71277
71275: GO 71333
71277: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71278: LD_ADDR_VAR 0 9
71282: PUSH
71283: LD_VAR 0 53
71287: PUSH
71288: LD_VAR 0 54
71292: PUSH
71293: LD_VAR 0 55
71297: PUSH
71298: LD_VAR 0 56
71302: PUSH
71303: LD_VAR 0 57
71307: PUSH
71308: LD_VAR 0 58
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: PUSH
71321: LD_VAR 0 4
71325: PUSH
71326: LD_INT 1
71328: PLUS
71329: ARRAY
71330: ST_TO_ADDR
71331: GO 71440
71333: LD_INT 31
71335: DOUBLE
71336: EQUAL
71337: IFTRUE 71383
71339: LD_INT 32
71341: DOUBLE
71342: EQUAL
71343: IFTRUE 71383
71345: LD_INT 33
71347: DOUBLE
71348: EQUAL
71349: IFTRUE 71383
71351: LD_INT 27
71353: DOUBLE
71354: EQUAL
71355: IFTRUE 71383
71357: LD_INT 26
71359: DOUBLE
71360: EQUAL
71361: IFTRUE 71383
71363: LD_INT 28
71365: DOUBLE
71366: EQUAL
71367: IFTRUE 71383
71369: LD_INT 29
71371: DOUBLE
71372: EQUAL
71373: IFTRUE 71383
71375: LD_INT 30
71377: DOUBLE
71378: EQUAL
71379: IFTRUE 71383
71381: GO 71439
71383: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71384: LD_ADDR_VAR 0 9
71388: PUSH
71389: LD_VAR 0 59
71393: PUSH
71394: LD_VAR 0 60
71398: PUSH
71399: LD_VAR 0 61
71403: PUSH
71404: LD_VAR 0 62
71408: PUSH
71409: LD_VAR 0 63
71413: PUSH
71414: LD_VAR 0 64
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: PUSH
71427: LD_VAR 0 4
71431: PUSH
71432: LD_INT 1
71434: PLUS
71435: ARRAY
71436: ST_TO_ADDR
71437: GO 71440
71439: POP
// temp_list2 = [ ] ;
71440: LD_ADDR_VAR 0 10
71444: PUSH
71445: EMPTY
71446: ST_TO_ADDR
// for i in temp_list do
71447: LD_ADDR_VAR 0 8
71451: PUSH
71452: LD_VAR 0 9
71456: PUSH
71457: FOR_IN
71458: IFFALSE 71510
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71460: LD_ADDR_VAR 0 10
71464: PUSH
71465: LD_VAR 0 10
71469: PUSH
71470: LD_VAR 0 8
71474: PUSH
71475: LD_INT 1
71477: ARRAY
71478: PUSH
71479: LD_VAR 0 2
71483: PLUS
71484: PUSH
71485: LD_VAR 0 8
71489: PUSH
71490: LD_INT 2
71492: ARRAY
71493: PUSH
71494: LD_VAR 0 3
71498: PLUS
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: EMPTY
71505: LIST
71506: ADD
71507: ST_TO_ADDR
71508: GO 71457
71510: POP
71511: POP
// result = temp_list2 ;
71512: LD_ADDR_VAR 0 7
71516: PUSH
71517: LD_VAR 0 10
71521: ST_TO_ADDR
// end ;
71522: LD_VAR 0 7
71526: RET
// export function EnemyInRange ( unit , dist ) ; begin
71527: LD_INT 0
71529: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71530: LD_ADDR_VAR 0 3
71534: PUSH
71535: LD_VAR 0 1
71539: PPUSH
71540: CALL_OW 255
71544: PPUSH
71545: LD_VAR 0 1
71549: PPUSH
71550: CALL_OW 250
71554: PPUSH
71555: LD_VAR 0 1
71559: PPUSH
71560: CALL_OW 251
71564: PPUSH
71565: LD_VAR 0 2
71569: PPUSH
71570: CALL 44900 0 4
71574: PUSH
71575: LD_INT 4
71577: ARRAY
71578: ST_TO_ADDR
// end ;
71579: LD_VAR 0 3
71583: RET
// export function PlayerSeeMe ( unit ) ; begin
71584: LD_INT 0
71586: PPUSH
// result := See ( your_side , unit ) ;
71587: LD_ADDR_VAR 0 2
71591: PUSH
71592: LD_OWVAR 2
71596: PPUSH
71597: LD_VAR 0 1
71601: PPUSH
71602: CALL_OW 292
71606: ST_TO_ADDR
// end ;
71607: LD_VAR 0 2
71611: RET
// export function ReverseDir ( unit ) ; begin
71612: LD_INT 0
71614: PPUSH
// if not unit then
71615: LD_VAR 0 1
71619: NOT
71620: IFFALSE 71624
// exit ;
71622: GO 71647
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71624: LD_ADDR_VAR 0 2
71628: PUSH
71629: LD_VAR 0 1
71633: PPUSH
71634: CALL_OW 254
71638: PUSH
71639: LD_INT 3
71641: PLUS
71642: PUSH
71643: LD_INT 6
71645: MOD
71646: ST_TO_ADDR
// end ;
71647: LD_VAR 0 2
71651: RET
// export function ReverseArray ( array ) ; var i ; begin
71652: LD_INT 0
71654: PPUSH
71655: PPUSH
// if not array then
71656: LD_VAR 0 1
71660: NOT
71661: IFFALSE 71665
// exit ;
71663: GO 71720
// result := [ ] ;
71665: LD_ADDR_VAR 0 2
71669: PUSH
71670: EMPTY
71671: ST_TO_ADDR
// for i := array downto 1 do
71672: LD_ADDR_VAR 0 3
71676: PUSH
71677: DOUBLE
71678: LD_VAR 0 1
71682: INC
71683: ST_TO_ADDR
71684: LD_INT 1
71686: PUSH
71687: FOR_DOWNTO
71688: IFFALSE 71718
// result := Join ( result , array [ i ] ) ;
71690: LD_ADDR_VAR 0 2
71694: PUSH
71695: LD_VAR 0 2
71699: PPUSH
71700: LD_VAR 0 1
71704: PUSH
71705: LD_VAR 0 3
71709: ARRAY
71710: PPUSH
71711: CALL 76365 0 2
71715: ST_TO_ADDR
71716: GO 71687
71718: POP
71719: POP
// end ;
71720: LD_VAR 0 2
71724: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71725: LD_INT 0
71727: PPUSH
71728: PPUSH
71729: PPUSH
71730: PPUSH
71731: PPUSH
71732: PPUSH
// if not unit or not hexes then
71733: LD_VAR 0 1
71737: NOT
71738: PUSH
71739: LD_VAR 0 2
71743: NOT
71744: OR
71745: IFFALSE 71749
// exit ;
71747: GO 71872
// dist := 9999 ;
71749: LD_ADDR_VAR 0 5
71753: PUSH
71754: LD_INT 9999
71756: ST_TO_ADDR
// for i = 1 to hexes do
71757: LD_ADDR_VAR 0 4
71761: PUSH
71762: DOUBLE
71763: LD_INT 1
71765: DEC
71766: ST_TO_ADDR
71767: LD_VAR 0 2
71771: PUSH
71772: FOR_TO
71773: IFFALSE 71860
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71775: LD_ADDR_VAR 0 6
71779: PUSH
71780: LD_VAR 0 1
71784: PPUSH
71785: LD_VAR 0 2
71789: PUSH
71790: LD_VAR 0 4
71794: ARRAY
71795: PUSH
71796: LD_INT 1
71798: ARRAY
71799: PPUSH
71800: LD_VAR 0 2
71804: PUSH
71805: LD_VAR 0 4
71809: ARRAY
71810: PUSH
71811: LD_INT 2
71813: ARRAY
71814: PPUSH
71815: CALL_OW 297
71819: ST_TO_ADDR
// if tdist < dist then
71820: LD_VAR 0 6
71824: PUSH
71825: LD_VAR 0 5
71829: LESS
71830: IFFALSE 71858
// begin hex := hexes [ i ] ;
71832: LD_ADDR_VAR 0 8
71836: PUSH
71837: LD_VAR 0 2
71841: PUSH
71842: LD_VAR 0 4
71846: ARRAY
71847: ST_TO_ADDR
// dist := tdist ;
71848: LD_ADDR_VAR 0 5
71852: PUSH
71853: LD_VAR 0 6
71857: ST_TO_ADDR
// end ; end ;
71858: GO 71772
71860: POP
71861: POP
// result := hex ;
71862: LD_ADDR_VAR 0 3
71866: PUSH
71867: LD_VAR 0 8
71871: ST_TO_ADDR
// end ;
71872: LD_VAR 0 3
71876: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71877: LD_INT 0
71879: PPUSH
71880: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71881: LD_VAR 0 1
71885: NOT
71886: PUSH
71887: LD_VAR 0 1
71891: PUSH
71892: LD_INT 21
71894: PUSH
71895: LD_INT 2
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 23
71904: PUSH
71905: LD_INT 2
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PPUSH
71916: CALL_OW 69
71920: IN
71921: NOT
71922: OR
71923: IFFALSE 71927
// exit ;
71925: GO 71974
// for i = 1 to 3 do
71927: LD_ADDR_VAR 0 3
71931: PUSH
71932: DOUBLE
71933: LD_INT 1
71935: DEC
71936: ST_TO_ADDR
71937: LD_INT 3
71939: PUSH
71940: FOR_TO
71941: IFFALSE 71972
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71943: LD_VAR 0 1
71947: PPUSH
71948: CALL_OW 250
71952: PPUSH
71953: LD_VAR 0 1
71957: PPUSH
71958: CALL_OW 251
71962: PPUSH
71963: LD_INT 1
71965: PPUSH
71966: CALL_OW 453
71970: GO 71940
71972: POP
71973: POP
// end ;
71974: LD_VAR 0 2
71978: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71979: LD_INT 0
71981: PPUSH
71982: PPUSH
71983: PPUSH
71984: PPUSH
71985: PPUSH
71986: PPUSH
// if not unit or not enemy_unit then
71987: LD_VAR 0 1
71991: NOT
71992: PUSH
71993: LD_VAR 0 2
71997: NOT
71998: OR
71999: IFFALSE 72003
// exit ;
72001: GO 72470
// if GetLives ( i ) < 250 then
72003: LD_VAR 0 4
72007: PPUSH
72008: CALL_OW 256
72012: PUSH
72013: LD_INT 250
72015: LESS
72016: IFFALSE 72029
// begin ComAutodestruct ( i ) ;
72018: LD_VAR 0 4
72022: PPUSH
72023: CALL 71877 0 1
// exit ;
72027: GO 72470
// end ; x := GetX ( enemy_unit ) ;
72029: LD_ADDR_VAR 0 7
72033: PUSH
72034: LD_VAR 0 2
72038: PPUSH
72039: CALL_OW 250
72043: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72044: LD_ADDR_VAR 0 8
72048: PUSH
72049: LD_VAR 0 2
72053: PPUSH
72054: CALL_OW 251
72058: ST_TO_ADDR
// if not x or not y then
72059: LD_VAR 0 7
72063: NOT
72064: PUSH
72065: LD_VAR 0 8
72069: NOT
72070: OR
72071: IFFALSE 72075
// exit ;
72073: GO 72470
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72075: LD_ADDR_VAR 0 6
72079: PUSH
72080: LD_VAR 0 7
72084: PPUSH
72085: LD_INT 0
72087: PPUSH
72088: LD_INT 4
72090: PPUSH
72091: CALL_OW 272
72095: PUSH
72096: LD_VAR 0 8
72100: PPUSH
72101: LD_INT 0
72103: PPUSH
72104: LD_INT 4
72106: PPUSH
72107: CALL_OW 273
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_VAR 0 7
72120: PPUSH
72121: LD_INT 1
72123: PPUSH
72124: LD_INT 4
72126: PPUSH
72127: CALL_OW 272
72131: PUSH
72132: LD_VAR 0 8
72136: PPUSH
72137: LD_INT 1
72139: PPUSH
72140: LD_INT 4
72142: PPUSH
72143: CALL_OW 273
72147: PUSH
72148: EMPTY
72149: LIST
72150: LIST
72151: PUSH
72152: LD_VAR 0 7
72156: PPUSH
72157: LD_INT 2
72159: PPUSH
72160: LD_INT 4
72162: PPUSH
72163: CALL_OW 272
72167: PUSH
72168: LD_VAR 0 8
72172: PPUSH
72173: LD_INT 2
72175: PPUSH
72176: LD_INT 4
72178: PPUSH
72179: CALL_OW 273
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_VAR 0 7
72192: PPUSH
72193: LD_INT 3
72195: PPUSH
72196: LD_INT 4
72198: PPUSH
72199: CALL_OW 272
72203: PUSH
72204: LD_VAR 0 8
72208: PPUSH
72209: LD_INT 3
72211: PPUSH
72212: LD_INT 4
72214: PPUSH
72215: CALL_OW 273
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_VAR 0 7
72228: PPUSH
72229: LD_INT 4
72231: PPUSH
72232: LD_INT 4
72234: PPUSH
72235: CALL_OW 272
72239: PUSH
72240: LD_VAR 0 8
72244: PPUSH
72245: LD_INT 4
72247: PPUSH
72248: LD_INT 4
72250: PPUSH
72251: CALL_OW 273
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_VAR 0 7
72264: PPUSH
72265: LD_INT 5
72267: PPUSH
72268: LD_INT 4
72270: PPUSH
72271: CALL_OW 272
72275: PUSH
72276: LD_VAR 0 8
72280: PPUSH
72281: LD_INT 5
72283: PPUSH
72284: LD_INT 4
72286: PPUSH
72287: CALL_OW 273
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: ST_TO_ADDR
// for i = tmp downto 1 do
72304: LD_ADDR_VAR 0 4
72308: PUSH
72309: DOUBLE
72310: LD_VAR 0 6
72314: INC
72315: ST_TO_ADDR
72316: LD_INT 1
72318: PUSH
72319: FOR_DOWNTO
72320: IFFALSE 72421
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72322: LD_VAR 0 6
72326: PUSH
72327: LD_VAR 0 4
72331: ARRAY
72332: PUSH
72333: LD_INT 1
72335: ARRAY
72336: PPUSH
72337: LD_VAR 0 6
72341: PUSH
72342: LD_VAR 0 4
72346: ARRAY
72347: PUSH
72348: LD_INT 2
72350: ARRAY
72351: PPUSH
72352: CALL_OW 488
72356: NOT
72357: PUSH
72358: LD_VAR 0 6
72362: PUSH
72363: LD_VAR 0 4
72367: ARRAY
72368: PUSH
72369: LD_INT 1
72371: ARRAY
72372: PPUSH
72373: LD_VAR 0 6
72377: PUSH
72378: LD_VAR 0 4
72382: ARRAY
72383: PUSH
72384: LD_INT 2
72386: ARRAY
72387: PPUSH
72388: CALL_OW 428
72392: PUSH
72393: LD_INT 0
72395: NONEQUAL
72396: OR
72397: IFFALSE 72419
// tmp := Delete ( tmp , i ) ;
72399: LD_ADDR_VAR 0 6
72403: PUSH
72404: LD_VAR 0 6
72408: PPUSH
72409: LD_VAR 0 4
72413: PPUSH
72414: CALL_OW 3
72418: ST_TO_ADDR
72419: GO 72319
72421: POP
72422: POP
// j := GetClosestHex ( unit , tmp ) ;
72423: LD_ADDR_VAR 0 5
72427: PUSH
72428: LD_VAR 0 1
72432: PPUSH
72433: LD_VAR 0 6
72437: PPUSH
72438: CALL 71725 0 2
72442: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72443: LD_VAR 0 1
72447: PPUSH
72448: LD_VAR 0 5
72452: PUSH
72453: LD_INT 1
72455: ARRAY
72456: PPUSH
72457: LD_VAR 0 5
72461: PUSH
72462: LD_INT 2
72464: ARRAY
72465: PPUSH
72466: CALL_OW 111
// end ;
72470: LD_VAR 0 3
72474: RET
// export function PrepareApemanSoldier ( ) ; begin
72475: LD_INT 0
72477: PPUSH
// uc_nation := 0 ;
72478: LD_ADDR_OWVAR 21
72482: PUSH
72483: LD_INT 0
72485: ST_TO_ADDR
// hc_sex := sex_male ;
72486: LD_ADDR_OWVAR 27
72490: PUSH
72491: LD_INT 1
72493: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72494: LD_ADDR_OWVAR 28
72498: PUSH
72499: LD_INT 15
72501: ST_TO_ADDR
// hc_gallery :=  ;
72502: LD_ADDR_OWVAR 33
72506: PUSH
72507: LD_STRING 
72509: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72510: LD_ADDR_OWVAR 31
72514: PUSH
72515: LD_INT 0
72517: PPUSH
72518: LD_INT 3
72520: PPUSH
72521: CALL_OW 12
72525: PUSH
72526: LD_INT 0
72528: PPUSH
72529: LD_INT 3
72531: PPUSH
72532: CALL_OW 12
72536: PUSH
72537: LD_INT 0
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: ST_TO_ADDR
// end ;
72549: LD_VAR 0 1
72553: RET
// export function PrepareApemanEngineer ( ) ; begin
72554: LD_INT 0
72556: PPUSH
// uc_nation := 0 ;
72557: LD_ADDR_OWVAR 21
72561: PUSH
72562: LD_INT 0
72564: ST_TO_ADDR
// hc_sex := sex_male ;
72565: LD_ADDR_OWVAR 27
72569: PUSH
72570: LD_INT 1
72572: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72573: LD_ADDR_OWVAR 28
72577: PUSH
72578: LD_INT 16
72580: ST_TO_ADDR
// hc_gallery :=  ;
72581: LD_ADDR_OWVAR 33
72585: PUSH
72586: LD_STRING 
72588: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72589: LD_ADDR_OWVAR 31
72593: PUSH
72594: LD_INT 0
72596: PPUSH
72597: LD_INT 3
72599: PPUSH
72600: CALL_OW 12
72604: PUSH
72605: LD_INT 0
72607: PPUSH
72608: LD_INT 3
72610: PPUSH
72611: CALL_OW 12
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: LD_INT 0
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: ST_TO_ADDR
// end ;
72628: LD_VAR 0 1
72632: RET
// export function PrepareApeman ( agressivity ) ; begin
72633: LD_INT 0
72635: PPUSH
// uc_side := 0 ;
72636: LD_ADDR_OWVAR 20
72640: PUSH
72641: LD_INT 0
72643: ST_TO_ADDR
// uc_nation := 0 ;
72644: LD_ADDR_OWVAR 21
72648: PUSH
72649: LD_INT 0
72651: ST_TO_ADDR
// hc_sex := sex_male ;
72652: LD_ADDR_OWVAR 27
72656: PUSH
72657: LD_INT 1
72659: ST_TO_ADDR
// hc_class := class_apeman ;
72660: LD_ADDR_OWVAR 28
72664: PUSH
72665: LD_INT 12
72667: ST_TO_ADDR
// hc_gallery :=  ;
72668: LD_ADDR_OWVAR 33
72672: PUSH
72673: LD_STRING 
72675: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72676: LD_ADDR_OWVAR 35
72680: PUSH
72681: LD_VAR 0 1
72685: NEG
72686: PPUSH
72687: LD_VAR 0 1
72691: PPUSH
72692: CALL_OW 12
72696: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72697: LD_ADDR_OWVAR 31
72701: PUSH
72702: LD_INT 0
72704: PPUSH
72705: LD_INT 3
72707: PPUSH
72708: CALL_OW 12
72712: PUSH
72713: LD_INT 0
72715: PPUSH
72716: LD_INT 3
72718: PPUSH
72719: CALL_OW 12
72723: PUSH
72724: LD_INT 0
72726: PUSH
72727: LD_INT 0
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: ST_TO_ADDR
// end ;
72736: LD_VAR 0 2
72740: RET
// export function PrepareTiger ( agressivity ) ; begin
72741: LD_INT 0
72743: PPUSH
// uc_side := 0 ;
72744: LD_ADDR_OWVAR 20
72748: PUSH
72749: LD_INT 0
72751: ST_TO_ADDR
// uc_nation := 0 ;
72752: LD_ADDR_OWVAR 21
72756: PUSH
72757: LD_INT 0
72759: ST_TO_ADDR
// hc_class := class_tiger ;
72760: LD_ADDR_OWVAR 28
72764: PUSH
72765: LD_INT 14
72767: ST_TO_ADDR
// hc_gallery :=  ;
72768: LD_ADDR_OWVAR 33
72772: PUSH
72773: LD_STRING 
72775: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72776: LD_ADDR_OWVAR 35
72780: PUSH
72781: LD_VAR 0 1
72785: NEG
72786: PPUSH
72787: LD_VAR 0 1
72791: PPUSH
72792: CALL_OW 12
72796: ST_TO_ADDR
// end ;
72797: LD_VAR 0 2
72801: RET
// export function PrepareEnchidna ( ) ; begin
72802: LD_INT 0
72804: PPUSH
// uc_side := 0 ;
72805: LD_ADDR_OWVAR 20
72809: PUSH
72810: LD_INT 0
72812: ST_TO_ADDR
// uc_nation := 0 ;
72813: LD_ADDR_OWVAR 21
72817: PUSH
72818: LD_INT 0
72820: ST_TO_ADDR
// hc_class := class_baggie ;
72821: LD_ADDR_OWVAR 28
72825: PUSH
72826: LD_INT 13
72828: ST_TO_ADDR
// hc_gallery :=  ;
72829: LD_ADDR_OWVAR 33
72833: PUSH
72834: LD_STRING 
72836: ST_TO_ADDR
// end ;
72837: LD_VAR 0 1
72841: RET
// export function PrepareFrog ( ) ; begin
72842: LD_INT 0
72844: PPUSH
// uc_side := 0 ;
72845: LD_ADDR_OWVAR 20
72849: PUSH
72850: LD_INT 0
72852: ST_TO_ADDR
// uc_nation := 0 ;
72853: LD_ADDR_OWVAR 21
72857: PUSH
72858: LD_INT 0
72860: ST_TO_ADDR
// hc_class := class_frog ;
72861: LD_ADDR_OWVAR 28
72865: PUSH
72866: LD_INT 19
72868: ST_TO_ADDR
// hc_gallery :=  ;
72869: LD_ADDR_OWVAR 33
72873: PUSH
72874: LD_STRING 
72876: ST_TO_ADDR
// end ;
72877: LD_VAR 0 1
72881: RET
// export function PrepareFish ( ) ; begin
72882: LD_INT 0
72884: PPUSH
// uc_side := 0 ;
72885: LD_ADDR_OWVAR 20
72889: PUSH
72890: LD_INT 0
72892: ST_TO_ADDR
// uc_nation := 0 ;
72893: LD_ADDR_OWVAR 21
72897: PUSH
72898: LD_INT 0
72900: ST_TO_ADDR
// hc_class := class_fish ;
72901: LD_ADDR_OWVAR 28
72905: PUSH
72906: LD_INT 20
72908: ST_TO_ADDR
// hc_gallery :=  ;
72909: LD_ADDR_OWVAR 33
72913: PUSH
72914: LD_STRING 
72916: ST_TO_ADDR
// end ;
72917: LD_VAR 0 1
72921: RET
// export function PrepareBird ( ) ; begin
72922: LD_INT 0
72924: PPUSH
// uc_side := 0 ;
72925: LD_ADDR_OWVAR 20
72929: PUSH
72930: LD_INT 0
72932: ST_TO_ADDR
// uc_nation := 0 ;
72933: LD_ADDR_OWVAR 21
72937: PUSH
72938: LD_INT 0
72940: ST_TO_ADDR
// hc_class := class_phororhacos ;
72941: LD_ADDR_OWVAR 28
72945: PUSH
72946: LD_INT 18
72948: ST_TO_ADDR
// hc_gallery :=  ;
72949: LD_ADDR_OWVAR 33
72953: PUSH
72954: LD_STRING 
72956: ST_TO_ADDR
// end ;
72957: LD_VAR 0 1
72961: RET
// export function PrepareHorse ( ) ; begin
72962: LD_INT 0
72964: PPUSH
// uc_side := 0 ;
72965: LD_ADDR_OWVAR 20
72969: PUSH
72970: LD_INT 0
72972: ST_TO_ADDR
// uc_nation := 0 ;
72973: LD_ADDR_OWVAR 21
72977: PUSH
72978: LD_INT 0
72980: ST_TO_ADDR
// hc_class := class_horse ;
72981: LD_ADDR_OWVAR 28
72985: PUSH
72986: LD_INT 21
72988: ST_TO_ADDR
// hc_gallery :=  ;
72989: LD_ADDR_OWVAR 33
72993: PUSH
72994: LD_STRING 
72996: ST_TO_ADDR
// end ;
72997: LD_VAR 0 1
73001: RET
// export function PrepareMastodont ( ) ; begin
73002: LD_INT 0
73004: PPUSH
// uc_side := 0 ;
73005: LD_ADDR_OWVAR 20
73009: PUSH
73010: LD_INT 0
73012: ST_TO_ADDR
// uc_nation := 0 ;
73013: LD_ADDR_OWVAR 21
73017: PUSH
73018: LD_INT 0
73020: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73021: LD_ADDR_OWVAR 37
73025: PUSH
73026: LD_INT 31
73028: ST_TO_ADDR
// vc_control := control_rider ;
73029: LD_ADDR_OWVAR 38
73033: PUSH
73034: LD_INT 4
73036: ST_TO_ADDR
// end ;
73037: LD_VAR 0 1
73041: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73042: LD_INT 0
73044: PPUSH
73045: PPUSH
73046: PPUSH
// uc_side = 0 ;
73047: LD_ADDR_OWVAR 20
73051: PUSH
73052: LD_INT 0
73054: ST_TO_ADDR
// uc_nation = 0 ;
73055: LD_ADDR_OWVAR 21
73059: PUSH
73060: LD_INT 0
73062: ST_TO_ADDR
// InitHc_All ( ) ;
73063: CALL_OW 584
// InitVc ;
73067: CALL_OW 20
// if mastodonts then
73071: LD_VAR 0 6
73075: IFFALSE 73142
// for i = 1 to mastodonts do
73077: LD_ADDR_VAR 0 11
73081: PUSH
73082: DOUBLE
73083: LD_INT 1
73085: DEC
73086: ST_TO_ADDR
73087: LD_VAR 0 6
73091: PUSH
73092: FOR_TO
73093: IFFALSE 73140
// begin vc_chassis := 31 ;
73095: LD_ADDR_OWVAR 37
73099: PUSH
73100: LD_INT 31
73102: ST_TO_ADDR
// vc_control := control_rider ;
73103: LD_ADDR_OWVAR 38
73107: PUSH
73108: LD_INT 4
73110: ST_TO_ADDR
// animal := CreateVehicle ;
73111: LD_ADDR_VAR 0 12
73115: PUSH
73116: CALL_OW 45
73120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73121: LD_VAR 0 12
73125: PPUSH
73126: LD_VAR 0 8
73130: PPUSH
73131: LD_INT 0
73133: PPUSH
73134: CALL 75270 0 3
// end ;
73138: GO 73092
73140: POP
73141: POP
// if horses then
73142: LD_VAR 0 5
73146: IFFALSE 73213
// for i = 1 to horses do
73148: LD_ADDR_VAR 0 11
73152: PUSH
73153: DOUBLE
73154: LD_INT 1
73156: DEC
73157: ST_TO_ADDR
73158: LD_VAR 0 5
73162: PUSH
73163: FOR_TO
73164: IFFALSE 73211
// begin hc_class := 21 ;
73166: LD_ADDR_OWVAR 28
73170: PUSH
73171: LD_INT 21
73173: ST_TO_ADDR
// hc_gallery :=  ;
73174: LD_ADDR_OWVAR 33
73178: PUSH
73179: LD_STRING 
73181: ST_TO_ADDR
// animal := CreateHuman ;
73182: LD_ADDR_VAR 0 12
73186: PUSH
73187: CALL_OW 44
73191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73192: LD_VAR 0 12
73196: PPUSH
73197: LD_VAR 0 8
73201: PPUSH
73202: LD_INT 0
73204: PPUSH
73205: CALL 75270 0 3
// end ;
73209: GO 73163
73211: POP
73212: POP
// if birds then
73213: LD_VAR 0 1
73217: IFFALSE 73284
// for i = 1 to birds do
73219: LD_ADDR_VAR 0 11
73223: PUSH
73224: DOUBLE
73225: LD_INT 1
73227: DEC
73228: ST_TO_ADDR
73229: LD_VAR 0 1
73233: PUSH
73234: FOR_TO
73235: IFFALSE 73282
// begin hc_class := 18 ;
73237: LD_ADDR_OWVAR 28
73241: PUSH
73242: LD_INT 18
73244: ST_TO_ADDR
// hc_gallery =  ;
73245: LD_ADDR_OWVAR 33
73249: PUSH
73250: LD_STRING 
73252: ST_TO_ADDR
// animal := CreateHuman ;
73253: LD_ADDR_VAR 0 12
73257: PUSH
73258: CALL_OW 44
73262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73263: LD_VAR 0 12
73267: PPUSH
73268: LD_VAR 0 8
73272: PPUSH
73273: LD_INT 0
73275: PPUSH
73276: CALL 75270 0 3
// end ;
73280: GO 73234
73282: POP
73283: POP
// if tigers then
73284: LD_VAR 0 2
73288: IFFALSE 73372
// for i = 1 to tigers do
73290: LD_ADDR_VAR 0 11
73294: PUSH
73295: DOUBLE
73296: LD_INT 1
73298: DEC
73299: ST_TO_ADDR
73300: LD_VAR 0 2
73304: PUSH
73305: FOR_TO
73306: IFFALSE 73370
// begin hc_class = class_tiger ;
73308: LD_ADDR_OWVAR 28
73312: PUSH
73313: LD_INT 14
73315: ST_TO_ADDR
// hc_gallery =  ;
73316: LD_ADDR_OWVAR 33
73320: PUSH
73321: LD_STRING 
73323: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73324: LD_ADDR_OWVAR 35
73328: PUSH
73329: LD_INT 7
73331: NEG
73332: PPUSH
73333: LD_INT 7
73335: PPUSH
73336: CALL_OW 12
73340: ST_TO_ADDR
// animal := CreateHuman ;
73341: LD_ADDR_VAR 0 12
73345: PUSH
73346: CALL_OW 44
73350: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73351: LD_VAR 0 12
73355: PPUSH
73356: LD_VAR 0 8
73360: PPUSH
73361: LD_INT 0
73363: PPUSH
73364: CALL 75270 0 3
// end ;
73368: GO 73305
73370: POP
73371: POP
// if apemans then
73372: LD_VAR 0 3
73376: IFFALSE 73499
// for i = 1 to apemans do
73378: LD_ADDR_VAR 0 11
73382: PUSH
73383: DOUBLE
73384: LD_INT 1
73386: DEC
73387: ST_TO_ADDR
73388: LD_VAR 0 3
73392: PUSH
73393: FOR_TO
73394: IFFALSE 73497
// begin hc_class = class_apeman ;
73396: LD_ADDR_OWVAR 28
73400: PUSH
73401: LD_INT 12
73403: ST_TO_ADDR
// hc_gallery =  ;
73404: LD_ADDR_OWVAR 33
73408: PUSH
73409: LD_STRING 
73411: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73412: LD_ADDR_OWVAR 35
73416: PUSH
73417: LD_INT 2
73419: NEG
73420: PPUSH
73421: LD_INT 2
73423: PPUSH
73424: CALL_OW 12
73428: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73429: LD_ADDR_OWVAR 31
73433: PUSH
73434: LD_INT 1
73436: PPUSH
73437: LD_INT 3
73439: PPUSH
73440: CALL_OW 12
73444: PUSH
73445: LD_INT 1
73447: PPUSH
73448: LD_INT 3
73450: PPUSH
73451: CALL_OW 12
73455: PUSH
73456: LD_INT 0
73458: PUSH
73459: LD_INT 0
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: ST_TO_ADDR
// animal := CreateHuman ;
73468: LD_ADDR_VAR 0 12
73472: PUSH
73473: CALL_OW 44
73477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73478: LD_VAR 0 12
73482: PPUSH
73483: LD_VAR 0 8
73487: PPUSH
73488: LD_INT 0
73490: PPUSH
73491: CALL 75270 0 3
// end ;
73495: GO 73393
73497: POP
73498: POP
// if enchidnas then
73499: LD_VAR 0 4
73503: IFFALSE 73570
// for i = 1 to enchidnas do
73505: LD_ADDR_VAR 0 11
73509: PUSH
73510: DOUBLE
73511: LD_INT 1
73513: DEC
73514: ST_TO_ADDR
73515: LD_VAR 0 4
73519: PUSH
73520: FOR_TO
73521: IFFALSE 73568
// begin hc_class = 13 ;
73523: LD_ADDR_OWVAR 28
73527: PUSH
73528: LD_INT 13
73530: ST_TO_ADDR
// hc_gallery =  ;
73531: LD_ADDR_OWVAR 33
73535: PUSH
73536: LD_STRING 
73538: ST_TO_ADDR
// animal := CreateHuman ;
73539: LD_ADDR_VAR 0 12
73543: PUSH
73544: CALL_OW 44
73548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73549: LD_VAR 0 12
73553: PPUSH
73554: LD_VAR 0 8
73558: PPUSH
73559: LD_INT 0
73561: PPUSH
73562: CALL 75270 0 3
// end ;
73566: GO 73520
73568: POP
73569: POP
// if fishes then
73570: LD_VAR 0 7
73574: IFFALSE 73641
// for i = 1 to fishes do
73576: LD_ADDR_VAR 0 11
73580: PUSH
73581: DOUBLE
73582: LD_INT 1
73584: DEC
73585: ST_TO_ADDR
73586: LD_VAR 0 7
73590: PUSH
73591: FOR_TO
73592: IFFALSE 73639
// begin hc_class = 20 ;
73594: LD_ADDR_OWVAR 28
73598: PUSH
73599: LD_INT 20
73601: ST_TO_ADDR
// hc_gallery =  ;
73602: LD_ADDR_OWVAR 33
73606: PUSH
73607: LD_STRING 
73609: ST_TO_ADDR
// animal := CreateHuman ;
73610: LD_ADDR_VAR 0 12
73614: PUSH
73615: CALL_OW 44
73619: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73620: LD_VAR 0 12
73624: PPUSH
73625: LD_VAR 0 9
73629: PPUSH
73630: LD_INT 0
73632: PPUSH
73633: CALL 75270 0 3
// end ;
73637: GO 73591
73639: POP
73640: POP
// end ;
73641: LD_VAR 0 10
73645: RET
// export function WantHeal ( sci , unit ) ; begin
73646: LD_INT 0
73648: PPUSH
// if GetTaskList ( sci ) > 0 then
73649: LD_VAR 0 1
73653: PPUSH
73654: CALL_OW 437
73658: PUSH
73659: LD_INT 0
73661: GREATER
73662: IFFALSE 73732
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73664: LD_VAR 0 1
73668: PPUSH
73669: CALL_OW 437
73673: PUSH
73674: LD_INT 1
73676: ARRAY
73677: PUSH
73678: LD_INT 1
73680: ARRAY
73681: PUSH
73682: LD_STRING l
73684: EQUAL
73685: PUSH
73686: LD_VAR 0 1
73690: PPUSH
73691: CALL_OW 437
73695: PUSH
73696: LD_INT 1
73698: ARRAY
73699: PUSH
73700: LD_INT 4
73702: ARRAY
73703: PUSH
73704: LD_VAR 0 2
73708: EQUAL
73709: AND
73710: IFFALSE 73722
// result := true else
73712: LD_ADDR_VAR 0 3
73716: PUSH
73717: LD_INT 1
73719: ST_TO_ADDR
73720: GO 73730
// result := false ;
73722: LD_ADDR_VAR 0 3
73726: PUSH
73727: LD_INT 0
73729: ST_TO_ADDR
// end else
73730: GO 73740
// result := false ;
73732: LD_ADDR_VAR 0 3
73736: PUSH
73737: LD_INT 0
73739: ST_TO_ADDR
// end ;
73740: LD_VAR 0 3
73744: RET
// export function HealTarget ( sci ) ; begin
73745: LD_INT 0
73747: PPUSH
// if not sci then
73748: LD_VAR 0 1
73752: NOT
73753: IFFALSE 73757
// exit ;
73755: GO 73822
// result := 0 ;
73757: LD_ADDR_VAR 0 2
73761: PUSH
73762: LD_INT 0
73764: ST_TO_ADDR
// if GetTaskList ( sci ) then
73765: LD_VAR 0 1
73769: PPUSH
73770: CALL_OW 437
73774: IFFALSE 73822
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73776: LD_VAR 0 1
73780: PPUSH
73781: CALL_OW 437
73785: PUSH
73786: LD_INT 1
73788: ARRAY
73789: PUSH
73790: LD_INT 1
73792: ARRAY
73793: PUSH
73794: LD_STRING l
73796: EQUAL
73797: IFFALSE 73822
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73799: LD_ADDR_VAR 0 2
73803: PUSH
73804: LD_VAR 0 1
73808: PPUSH
73809: CALL_OW 437
73813: PUSH
73814: LD_INT 1
73816: ARRAY
73817: PUSH
73818: LD_INT 4
73820: ARRAY
73821: ST_TO_ADDR
// end ;
73822: LD_VAR 0 2
73826: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73827: LD_INT 0
73829: PPUSH
73830: PPUSH
73831: PPUSH
73832: PPUSH
// if not base_units then
73833: LD_VAR 0 1
73837: NOT
73838: IFFALSE 73842
// exit ;
73840: GO 73929
// result := false ;
73842: LD_ADDR_VAR 0 2
73846: PUSH
73847: LD_INT 0
73849: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73850: LD_ADDR_VAR 0 5
73854: PUSH
73855: LD_VAR 0 1
73859: PPUSH
73860: LD_INT 21
73862: PUSH
73863: LD_INT 3
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PPUSH
73870: CALL_OW 72
73874: ST_TO_ADDR
// if not tmp then
73875: LD_VAR 0 5
73879: NOT
73880: IFFALSE 73884
// exit ;
73882: GO 73929
// for i in tmp do
73884: LD_ADDR_VAR 0 3
73888: PUSH
73889: LD_VAR 0 5
73893: PUSH
73894: FOR_IN
73895: IFFALSE 73927
// begin result := EnemyInRange ( i , 22 ) ;
73897: LD_ADDR_VAR 0 2
73901: PUSH
73902: LD_VAR 0 3
73906: PPUSH
73907: LD_INT 22
73909: PPUSH
73910: CALL 71527 0 2
73914: ST_TO_ADDR
// if result then
73915: LD_VAR 0 2
73919: IFFALSE 73925
// exit ;
73921: POP
73922: POP
73923: GO 73929
// end ;
73925: GO 73894
73927: POP
73928: POP
// end ;
73929: LD_VAR 0 2
73933: RET
// export function FilterByTag ( units , tag ) ; begin
73934: LD_INT 0
73936: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73937: LD_ADDR_VAR 0 3
73941: PUSH
73942: LD_VAR 0 1
73946: PPUSH
73947: LD_INT 120
73949: PUSH
73950: LD_VAR 0 2
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PPUSH
73959: CALL_OW 72
73963: ST_TO_ADDR
// end ;
73964: LD_VAR 0 3
73968: RET
// export function IsDriver ( un ) ; begin
73969: LD_INT 0
73971: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73972: LD_ADDR_VAR 0 2
73976: PUSH
73977: LD_VAR 0 1
73981: PUSH
73982: LD_INT 55
73984: PUSH
73985: EMPTY
73986: LIST
73987: PPUSH
73988: CALL_OW 69
73992: IN
73993: ST_TO_ADDR
// end ;
73994: LD_VAR 0 2
73998: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73999: LD_INT 0
74001: PPUSH
74002: PPUSH
// list := [ ] ;
74003: LD_ADDR_VAR 0 5
74007: PUSH
74008: EMPTY
74009: ST_TO_ADDR
// case d of 0 :
74010: LD_VAR 0 3
74014: PUSH
74015: LD_INT 0
74017: DOUBLE
74018: EQUAL
74019: IFTRUE 74023
74021: GO 74156
74023: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74024: LD_ADDR_VAR 0 5
74028: PUSH
74029: LD_VAR 0 1
74033: PUSH
74034: LD_INT 4
74036: MINUS
74037: PUSH
74038: LD_VAR 0 2
74042: PUSH
74043: LD_INT 4
74045: MINUS
74046: PUSH
74047: LD_INT 2
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: LIST
74054: PUSH
74055: LD_VAR 0 1
74059: PUSH
74060: LD_INT 3
74062: MINUS
74063: PUSH
74064: LD_VAR 0 2
74068: PUSH
74069: LD_INT 1
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: LIST
74076: PUSH
74077: LD_VAR 0 1
74081: PUSH
74082: LD_INT 4
74084: PLUS
74085: PUSH
74086: LD_VAR 0 2
74090: PUSH
74091: LD_INT 4
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: LIST
74098: PUSH
74099: LD_VAR 0 1
74103: PUSH
74104: LD_INT 3
74106: PLUS
74107: PUSH
74108: LD_VAR 0 2
74112: PUSH
74113: LD_INT 3
74115: PLUS
74116: PUSH
74117: LD_INT 5
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: LIST
74124: PUSH
74125: LD_VAR 0 1
74129: PUSH
74130: LD_VAR 0 2
74134: PUSH
74135: LD_INT 4
74137: PLUS
74138: PUSH
74139: LD_INT 0
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: LIST
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: ST_TO_ADDR
// end ; 1 :
74154: GO 74854
74156: LD_INT 1
74158: DOUBLE
74159: EQUAL
74160: IFTRUE 74164
74162: GO 74297
74164: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74165: LD_ADDR_VAR 0 5
74169: PUSH
74170: LD_VAR 0 1
74174: PUSH
74175: LD_VAR 0 2
74179: PUSH
74180: LD_INT 4
74182: MINUS
74183: PUSH
74184: LD_INT 3
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: LIST
74191: PUSH
74192: LD_VAR 0 1
74196: PUSH
74197: LD_INT 3
74199: MINUS
74200: PUSH
74201: LD_VAR 0 2
74205: PUSH
74206: LD_INT 3
74208: MINUS
74209: PUSH
74210: LD_INT 2
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: LIST
74217: PUSH
74218: LD_VAR 0 1
74222: PUSH
74223: LD_INT 4
74225: MINUS
74226: PUSH
74227: LD_VAR 0 2
74231: PUSH
74232: LD_INT 1
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: LIST
74239: PUSH
74240: LD_VAR 0 1
74244: PUSH
74245: LD_VAR 0 2
74249: PUSH
74250: LD_INT 3
74252: PLUS
74253: PUSH
74254: LD_INT 0
74256: PUSH
74257: EMPTY
74258: LIST
74259: LIST
74260: LIST
74261: PUSH
74262: LD_VAR 0 1
74266: PUSH
74267: LD_INT 4
74269: PLUS
74270: PUSH
74271: LD_VAR 0 2
74275: PUSH
74276: LD_INT 4
74278: PLUS
74279: PUSH
74280: LD_INT 5
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: LIST
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: ST_TO_ADDR
// end ; 2 :
74295: GO 74854
74297: LD_INT 2
74299: DOUBLE
74300: EQUAL
74301: IFTRUE 74305
74303: GO 74434
74305: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74306: LD_ADDR_VAR 0 5
74310: PUSH
74311: LD_VAR 0 1
74315: PUSH
74316: LD_VAR 0 2
74320: PUSH
74321: LD_INT 3
74323: MINUS
74324: PUSH
74325: LD_INT 3
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: LIST
74332: PUSH
74333: LD_VAR 0 1
74337: PUSH
74338: LD_INT 4
74340: PLUS
74341: PUSH
74342: LD_VAR 0 2
74346: PUSH
74347: LD_INT 4
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: LIST
74354: PUSH
74355: LD_VAR 0 1
74359: PUSH
74360: LD_VAR 0 2
74364: PUSH
74365: LD_INT 4
74367: PLUS
74368: PUSH
74369: LD_INT 0
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: LIST
74376: PUSH
74377: LD_VAR 0 1
74381: PUSH
74382: LD_INT 3
74384: MINUS
74385: PUSH
74386: LD_VAR 0 2
74390: PUSH
74391: LD_INT 1
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: LIST
74398: PUSH
74399: LD_VAR 0 1
74403: PUSH
74404: LD_INT 4
74406: MINUS
74407: PUSH
74408: LD_VAR 0 2
74412: PUSH
74413: LD_INT 4
74415: MINUS
74416: PUSH
74417: LD_INT 2
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: LIST
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: ST_TO_ADDR
// end ; 3 :
74432: GO 74854
74434: LD_INT 3
74436: DOUBLE
74437: EQUAL
74438: IFTRUE 74442
74440: GO 74575
74442: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74443: LD_ADDR_VAR 0 5
74447: PUSH
74448: LD_VAR 0 1
74452: PUSH
74453: LD_INT 3
74455: PLUS
74456: PUSH
74457: LD_VAR 0 2
74461: PUSH
74462: LD_INT 4
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: LIST
74469: PUSH
74470: LD_VAR 0 1
74474: PUSH
74475: LD_INT 4
74477: PLUS
74478: PUSH
74479: LD_VAR 0 2
74483: PUSH
74484: LD_INT 4
74486: PLUS
74487: PUSH
74488: LD_INT 5
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: LIST
74495: PUSH
74496: LD_VAR 0 1
74500: PUSH
74501: LD_INT 4
74503: MINUS
74504: PUSH
74505: LD_VAR 0 2
74509: PUSH
74510: LD_INT 1
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: LIST
74517: PUSH
74518: LD_VAR 0 1
74522: PUSH
74523: LD_VAR 0 2
74527: PUSH
74528: LD_INT 4
74530: MINUS
74531: PUSH
74532: LD_INT 3
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: LIST
74539: PUSH
74540: LD_VAR 0 1
74544: PUSH
74545: LD_INT 3
74547: MINUS
74548: PUSH
74549: LD_VAR 0 2
74553: PUSH
74554: LD_INT 3
74556: MINUS
74557: PUSH
74558: LD_INT 2
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: LIST
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: ST_TO_ADDR
// end ; 4 :
74573: GO 74854
74575: LD_INT 4
74577: DOUBLE
74578: EQUAL
74579: IFTRUE 74583
74581: GO 74716
74583: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74584: LD_ADDR_VAR 0 5
74588: PUSH
74589: LD_VAR 0 1
74593: PUSH
74594: LD_VAR 0 2
74598: PUSH
74599: LD_INT 4
74601: PLUS
74602: PUSH
74603: LD_INT 0
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: LIST
74610: PUSH
74611: LD_VAR 0 1
74615: PUSH
74616: LD_INT 3
74618: PLUS
74619: PUSH
74620: LD_VAR 0 2
74624: PUSH
74625: LD_INT 3
74627: PLUS
74628: PUSH
74629: LD_INT 5
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: LIST
74636: PUSH
74637: LD_VAR 0 1
74641: PUSH
74642: LD_INT 4
74644: PLUS
74645: PUSH
74646: LD_VAR 0 2
74650: PUSH
74651: LD_INT 4
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: LIST
74658: PUSH
74659: LD_VAR 0 1
74663: PUSH
74664: LD_VAR 0 2
74668: PUSH
74669: LD_INT 3
74671: MINUS
74672: PUSH
74673: LD_INT 3
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: LIST
74680: PUSH
74681: LD_VAR 0 1
74685: PUSH
74686: LD_INT 4
74688: MINUS
74689: PUSH
74690: LD_VAR 0 2
74694: PUSH
74695: LD_INT 4
74697: MINUS
74698: PUSH
74699: LD_INT 2
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: LIST
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: ST_TO_ADDR
// end ; 5 :
74714: GO 74854
74716: LD_INT 5
74718: DOUBLE
74719: EQUAL
74720: IFTRUE 74724
74722: GO 74853
74724: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74725: LD_ADDR_VAR 0 5
74729: PUSH
74730: LD_VAR 0 1
74734: PUSH
74735: LD_INT 4
74737: MINUS
74738: PUSH
74739: LD_VAR 0 2
74743: PUSH
74744: LD_INT 1
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: LIST
74751: PUSH
74752: LD_VAR 0 1
74756: PUSH
74757: LD_VAR 0 2
74761: PUSH
74762: LD_INT 4
74764: MINUS
74765: PUSH
74766: LD_INT 3
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: LIST
74773: PUSH
74774: LD_VAR 0 1
74778: PUSH
74779: LD_INT 4
74781: PLUS
74782: PUSH
74783: LD_VAR 0 2
74787: PUSH
74788: LD_INT 4
74790: PLUS
74791: PUSH
74792: LD_INT 5
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: LIST
74799: PUSH
74800: LD_VAR 0 1
74804: PUSH
74805: LD_INT 3
74807: PLUS
74808: PUSH
74809: LD_VAR 0 2
74813: PUSH
74814: LD_INT 4
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: LIST
74821: PUSH
74822: LD_VAR 0 1
74826: PUSH
74827: LD_VAR 0 2
74831: PUSH
74832: LD_INT 3
74834: PLUS
74835: PUSH
74836: LD_INT 0
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: LIST
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: ST_TO_ADDR
// end ; end ;
74851: GO 74854
74853: POP
// result := list ;
74854: LD_ADDR_VAR 0 4
74858: PUSH
74859: LD_VAR 0 5
74863: ST_TO_ADDR
// end ;
74864: LD_VAR 0 4
74868: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74869: LD_INT 0
74871: PPUSH
74872: PPUSH
74873: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74874: LD_VAR 0 1
74878: NOT
74879: PUSH
74880: LD_VAR 0 2
74884: PUSH
74885: LD_INT 1
74887: PUSH
74888: LD_INT 2
74890: PUSH
74891: LD_INT 3
74893: PUSH
74894: LD_INT 4
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: IN
74903: NOT
74904: OR
74905: IFFALSE 74909
// exit ;
74907: GO 74992
// tmp := [ ] ;
74909: LD_ADDR_VAR 0 5
74913: PUSH
74914: EMPTY
74915: ST_TO_ADDR
// for i in units do
74916: LD_ADDR_VAR 0 4
74920: PUSH
74921: LD_VAR 0 1
74925: PUSH
74926: FOR_IN
74927: IFFALSE 74961
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74929: LD_ADDR_VAR 0 5
74933: PUSH
74934: LD_VAR 0 5
74938: PPUSH
74939: LD_VAR 0 4
74943: PPUSH
74944: LD_VAR 0 2
74948: PPUSH
74949: CALL_OW 259
74953: PPUSH
74954: CALL 76365 0 2
74958: ST_TO_ADDR
74959: GO 74926
74961: POP
74962: POP
// if not tmp then
74963: LD_VAR 0 5
74967: NOT
74968: IFFALSE 74972
// exit ;
74970: GO 74992
// result := SortListByListDesc ( units , tmp ) ;
74972: LD_ADDR_VAR 0 3
74976: PUSH
74977: LD_VAR 0 1
74981: PPUSH
74982: LD_VAR 0 5
74986: PPUSH
74987: CALL_OW 77
74991: ST_TO_ADDR
// end ;
74992: LD_VAR 0 3
74996: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74997: LD_INT 0
74999: PPUSH
75000: PPUSH
75001: PPUSH
// result := false ;
75002: LD_ADDR_VAR 0 3
75006: PUSH
75007: LD_INT 0
75009: ST_TO_ADDR
// if not building then
75010: LD_VAR 0 2
75014: NOT
75015: IFFALSE 75019
// exit ;
75017: GO 75157
// x := GetX ( building ) ;
75019: LD_ADDR_VAR 0 4
75023: PUSH
75024: LD_VAR 0 2
75028: PPUSH
75029: CALL_OW 250
75033: ST_TO_ADDR
// y := GetY ( building ) ;
75034: LD_ADDR_VAR 0 5
75038: PUSH
75039: LD_VAR 0 2
75043: PPUSH
75044: CALL_OW 251
75048: ST_TO_ADDR
// if not x or not y then
75049: LD_VAR 0 4
75053: NOT
75054: PUSH
75055: LD_VAR 0 5
75059: NOT
75060: OR
75061: IFFALSE 75065
// exit ;
75063: GO 75157
// if GetTaskList ( unit ) then
75065: LD_VAR 0 1
75069: PPUSH
75070: CALL_OW 437
75074: IFFALSE 75157
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75076: LD_STRING e
75078: PUSH
75079: LD_VAR 0 1
75083: PPUSH
75084: CALL_OW 437
75088: PUSH
75089: LD_INT 1
75091: ARRAY
75092: PUSH
75093: LD_INT 1
75095: ARRAY
75096: EQUAL
75097: PUSH
75098: LD_VAR 0 4
75102: PUSH
75103: LD_VAR 0 1
75107: PPUSH
75108: CALL_OW 437
75112: PUSH
75113: LD_INT 1
75115: ARRAY
75116: PUSH
75117: LD_INT 2
75119: ARRAY
75120: EQUAL
75121: AND
75122: PUSH
75123: LD_VAR 0 5
75127: PUSH
75128: LD_VAR 0 1
75132: PPUSH
75133: CALL_OW 437
75137: PUSH
75138: LD_INT 1
75140: ARRAY
75141: PUSH
75142: LD_INT 3
75144: ARRAY
75145: EQUAL
75146: AND
75147: IFFALSE 75157
// result := true end ;
75149: LD_ADDR_VAR 0 3
75153: PUSH
75154: LD_INT 1
75156: ST_TO_ADDR
// end ;
75157: LD_VAR 0 3
75161: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75162: LD_INT 0
75164: PPUSH
// result := false ;
75165: LD_ADDR_VAR 0 4
75169: PUSH
75170: LD_INT 0
75172: ST_TO_ADDR
// if GetTaskList ( unit ) then
75173: LD_VAR 0 1
75177: PPUSH
75178: CALL_OW 437
75182: IFFALSE 75265
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75184: LD_STRING M
75186: PUSH
75187: LD_VAR 0 1
75191: PPUSH
75192: CALL_OW 437
75196: PUSH
75197: LD_INT 1
75199: ARRAY
75200: PUSH
75201: LD_INT 1
75203: ARRAY
75204: EQUAL
75205: PUSH
75206: LD_VAR 0 2
75210: PUSH
75211: LD_VAR 0 1
75215: PPUSH
75216: CALL_OW 437
75220: PUSH
75221: LD_INT 1
75223: ARRAY
75224: PUSH
75225: LD_INT 2
75227: ARRAY
75228: EQUAL
75229: AND
75230: PUSH
75231: LD_VAR 0 3
75235: PUSH
75236: LD_VAR 0 1
75240: PPUSH
75241: CALL_OW 437
75245: PUSH
75246: LD_INT 1
75248: ARRAY
75249: PUSH
75250: LD_INT 3
75252: ARRAY
75253: EQUAL
75254: AND
75255: IFFALSE 75265
// result := true ;
75257: LD_ADDR_VAR 0 4
75261: PUSH
75262: LD_INT 1
75264: ST_TO_ADDR
// end ; end ;
75265: LD_VAR 0 4
75269: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75270: LD_INT 0
75272: PPUSH
75273: PPUSH
75274: PPUSH
75275: PPUSH
// if not unit or not area then
75276: LD_VAR 0 1
75280: NOT
75281: PUSH
75282: LD_VAR 0 2
75286: NOT
75287: OR
75288: IFFALSE 75292
// exit ;
75290: GO 75468
// tmp := AreaToList ( area , i ) ;
75292: LD_ADDR_VAR 0 6
75296: PUSH
75297: LD_VAR 0 2
75301: PPUSH
75302: LD_VAR 0 5
75306: PPUSH
75307: CALL_OW 517
75311: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75312: LD_ADDR_VAR 0 5
75316: PUSH
75317: DOUBLE
75318: LD_INT 1
75320: DEC
75321: ST_TO_ADDR
75322: LD_VAR 0 6
75326: PUSH
75327: LD_INT 1
75329: ARRAY
75330: PUSH
75331: FOR_TO
75332: IFFALSE 75466
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75334: LD_ADDR_VAR 0 7
75338: PUSH
75339: LD_VAR 0 6
75343: PUSH
75344: LD_INT 1
75346: ARRAY
75347: PUSH
75348: LD_VAR 0 5
75352: ARRAY
75353: PUSH
75354: LD_VAR 0 6
75358: PUSH
75359: LD_INT 2
75361: ARRAY
75362: PUSH
75363: LD_VAR 0 5
75367: ARRAY
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75373: LD_INT 92
75375: PUSH
75376: LD_VAR 0 7
75380: PUSH
75381: LD_INT 1
75383: ARRAY
75384: PUSH
75385: LD_VAR 0 7
75389: PUSH
75390: LD_INT 2
75392: ARRAY
75393: PUSH
75394: LD_INT 2
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: PPUSH
75403: CALL_OW 69
75407: PUSH
75408: LD_INT 0
75410: EQUAL
75411: IFFALSE 75464
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75413: LD_VAR 0 1
75417: PPUSH
75418: LD_VAR 0 7
75422: PUSH
75423: LD_INT 1
75425: ARRAY
75426: PPUSH
75427: LD_VAR 0 7
75431: PUSH
75432: LD_INT 2
75434: ARRAY
75435: PPUSH
75436: LD_VAR 0 3
75440: PPUSH
75441: CALL_OW 48
// result := IsPlaced ( unit ) ;
75445: LD_ADDR_VAR 0 4
75449: PUSH
75450: LD_VAR 0 1
75454: PPUSH
75455: CALL_OW 305
75459: ST_TO_ADDR
// exit ;
75460: POP
75461: POP
75462: GO 75468
// end ; end ;
75464: GO 75331
75466: POP
75467: POP
// end ;
75468: LD_VAR 0 4
75472: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75473: LD_INT 0
75475: PPUSH
75476: PPUSH
75477: PPUSH
// if not side or side > 8 then
75478: LD_VAR 0 1
75482: NOT
75483: PUSH
75484: LD_VAR 0 1
75488: PUSH
75489: LD_INT 8
75491: GREATER
75492: OR
75493: IFFALSE 75497
// exit ;
75495: GO 75684
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75497: LD_ADDR_VAR 0 4
75501: PUSH
75502: LD_INT 22
75504: PUSH
75505: LD_VAR 0 1
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PUSH
75514: LD_INT 21
75516: PUSH
75517: LD_INT 3
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PPUSH
75528: CALL_OW 69
75532: ST_TO_ADDR
// if not tmp then
75533: LD_VAR 0 4
75537: NOT
75538: IFFALSE 75542
// exit ;
75540: GO 75684
// enable_addtolog := true ;
75542: LD_ADDR_OWVAR 81
75546: PUSH
75547: LD_INT 1
75549: ST_TO_ADDR
// AddToLog ( [ ) ;
75550: LD_STRING [
75552: PPUSH
75553: CALL_OW 561
// for i in tmp do
75557: LD_ADDR_VAR 0 3
75561: PUSH
75562: LD_VAR 0 4
75566: PUSH
75567: FOR_IN
75568: IFFALSE 75675
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75570: LD_STRING [
75572: PUSH
75573: LD_VAR 0 3
75577: PPUSH
75578: CALL_OW 266
75582: STR
75583: PUSH
75584: LD_STRING , 
75586: STR
75587: PUSH
75588: LD_VAR 0 3
75592: PPUSH
75593: CALL_OW 250
75597: STR
75598: PUSH
75599: LD_STRING , 
75601: STR
75602: PUSH
75603: LD_VAR 0 3
75607: PPUSH
75608: CALL_OW 251
75612: STR
75613: PUSH
75614: LD_STRING , 
75616: STR
75617: PUSH
75618: LD_VAR 0 3
75622: PPUSH
75623: CALL_OW 254
75627: STR
75628: PUSH
75629: LD_STRING , 
75631: STR
75632: PUSH
75633: LD_VAR 0 3
75637: PPUSH
75638: LD_INT 1
75640: PPUSH
75641: CALL_OW 268
75645: STR
75646: PUSH
75647: LD_STRING , 
75649: STR
75650: PUSH
75651: LD_VAR 0 3
75655: PPUSH
75656: LD_INT 2
75658: PPUSH
75659: CALL_OW 268
75663: STR
75664: PUSH
75665: LD_STRING ],
75667: STR
75668: PPUSH
75669: CALL_OW 561
// end ;
75673: GO 75567
75675: POP
75676: POP
// AddToLog ( ]; ) ;
75677: LD_STRING ];
75679: PPUSH
75680: CALL_OW 561
// end ;
75684: LD_VAR 0 2
75688: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75689: LD_INT 0
75691: PPUSH
75692: PPUSH
75693: PPUSH
75694: PPUSH
75695: PPUSH
// if not area or not rate or not max then
75696: LD_VAR 0 1
75700: NOT
75701: PUSH
75702: LD_VAR 0 2
75706: NOT
75707: OR
75708: PUSH
75709: LD_VAR 0 4
75713: NOT
75714: OR
75715: IFFALSE 75719
// exit ;
75717: GO 75908
// while 1 do
75719: LD_INT 1
75721: IFFALSE 75908
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75723: LD_ADDR_VAR 0 9
75727: PUSH
75728: LD_VAR 0 1
75732: PPUSH
75733: LD_INT 1
75735: PPUSH
75736: CALL_OW 287
75740: PUSH
75741: LD_INT 10
75743: MUL
75744: ST_TO_ADDR
// r := rate / 10 ;
75745: LD_ADDR_VAR 0 7
75749: PUSH
75750: LD_VAR 0 2
75754: PUSH
75755: LD_INT 10
75757: DIVREAL
75758: ST_TO_ADDR
// time := 1 1$00 ;
75759: LD_ADDR_VAR 0 8
75763: PUSH
75764: LD_INT 2100
75766: ST_TO_ADDR
// if amount < min then
75767: LD_VAR 0 9
75771: PUSH
75772: LD_VAR 0 3
75776: LESS
75777: IFFALSE 75795
// r := r * 2 else
75779: LD_ADDR_VAR 0 7
75783: PUSH
75784: LD_VAR 0 7
75788: PUSH
75789: LD_INT 2
75791: MUL
75792: ST_TO_ADDR
75793: GO 75821
// if amount > max then
75795: LD_VAR 0 9
75799: PUSH
75800: LD_VAR 0 4
75804: GREATER
75805: IFFALSE 75821
// r := r / 2 ;
75807: LD_ADDR_VAR 0 7
75811: PUSH
75812: LD_VAR 0 7
75816: PUSH
75817: LD_INT 2
75819: DIVREAL
75820: ST_TO_ADDR
// time := time / r ;
75821: LD_ADDR_VAR 0 8
75825: PUSH
75826: LD_VAR 0 8
75830: PUSH
75831: LD_VAR 0 7
75835: DIVREAL
75836: ST_TO_ADDR
// if time < 0 then
75837: LD_VAR 0 8
75841: PUSH
75842: LD_INT 0
75844: LESS
75845: IFFALSE 75862
// time := time * - 1 ;
75847: LD_ADDR_VAR 0 8
75851: PUSH
75852: LD_VAR 0 8
75856: PUSH
75857: LD_INT 1
75859: NEG
75860: MUL
75861: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75862: LD_VAR 0 8
75866: PUSH
75867: LD_INT 35
75869: PPUSH
75870: LD_INT 875
75872: PPUSH
75873: CALL_OW 12
75877: PLUS
75878: PPUSH
75879: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75883: LD_INT 1
75885: PPUSH
75886: LD_INT 5
75888: PPUSH
75889: CALL_OW 12
75893: PPUSH
75894: LD_VAR 0 1
75898: PPUSH
75899: LD_INT 1
75901: PPUSH
75902: CALL_OW 55
// end ;
75906: GO 75719
// end ;
75908: LD_VAR 0 5
75912: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75913: LD_INT 0
75915: PPUSH
75916: PPUSH
75917: PPUSH
75918: PPUSH
75919: PPUSH
75920: PPUSH
75921: PPUSH
75922: PPUSH
// if not turrets or not factories then
75923: LD_VAR 0 1
75927: NOT
75928: PUSH
75929: LD_VAR 0 2
75933: NOT
75934: OR
75935: IFFALSE 75939
// exit ;
75937: GO 76246
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75939: LD_ADDR_VAR 0 10
75943: PUSH
75944: LD_INT 5
75946: PUSH
75947: LD_INT 6
75949: PUSH
75950: EMPTY
75951: LIST
75952: LIST
75953: PUSH
75954: LD_INT 2
75956: PUSH
75957: LD_INT 4
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: LD_INT 3
75966: PUSH
75967: LD_INT 5
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: LIST
75978: PUSH
75979: LD_INT 24
75981: PUSH
75982: LD_INT 25
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: PUSH
75989: LD_INT 23
75991: PUSH
75992: LD_INT 27
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: PUSH
76003: LD_INT 42
76005: PUSH
76006: LD_INT 43
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: PUSH
76013: LD_INT 44
76015: PUSH
76016: LD_INT 46
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: LD_INT 45
76025: PUSH
76026: LD_INT 47
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: LIST
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: LIST
76042: ST_TO_ADDR
// result := [ ] ;
76043: LD_ADDR_VAR 0 3
76047: PUSH
76048: EMPTY
76049: ST_TO_ADDR
// for i in turrets do
76050: LD_ADDR_VAR 0 4
76054: PUSH
76055: LD_VAR 0 1
76059: PUSH
76060: FOR_IN
76061: IFFALSE 76244
// begin nat := GetNation ( i ) ;
76063: LD_ADDR_VAR 0 7
76067: PUSH
76068: LD_VAR 0 4
76072: PPUSH
76073: CALL_OW 248
76077: ST_TO_ADDR
// weapon := 0 ;
76078: LD_ADDR_VAR 0 8
76082: PUSH
76083: LD_INT 0
76085: ST_TO_ADDR
// if not nat then
76086: LD_VAR 0 7
76090: NOT
76091: IFFALSE 76095
// continue ;
76093: GO 76060
// for j in list [ nat ] do
76095: LD_ADDR_VAR 0 5
76099: PUSH
76100: LD_VAR 0 10
76104: PUSH
76105: LD_VAR 0 7
76109: ARRAY
76110: PUSH
76111: FOR_IN
76112: IFFALSE 76153
// if GetBWeapon ( i ) = j [ 1 ] then
76114: LD_VAR 0 4
76118: PPUSH
76119: CALL_OW 269
76123: PUSH
76124: LD_VAR 0 5
76128: PUSH
76129: LD_INT 1
76131: ARRAY
76132: EQUAL
76133: IFFALSE 76151
// begin weapon := j [ 2 ] ;
76135: LD_ADDR_VAR 0 8
76139: PUSH
76140: LD_VAR 0 5
76144: PUSH
76145: LD_INT 2
76147: ARRAY
76148: ST_TO_ADDR
// break ;
76149: GO 76153
// end ;
76151: GO 76111
76153: POP
76154: POP
// if not weapon then
76155: LD_VAR 0 8
76159: NOT
76160: IFFALSE 76164
// continue ;
76162: GO 76060
// for k in factories do
76164: LD_ADDR_VAR 0 6
76168: PUSH
76169: LD_VAR 0 2
76173: PUSH
76174: FOR_IN
76175: IFFALSE 76240
// begin weapons := AvailableWeaponList ( k ) ;
76177: LD_ADDR_VAR 0 9
76181: PUSH
76182: LD_VAR 0 6
76186: PPUSH
76187: CALL_OW 478
76191: ST_TO_ADDR
// if not weapons then
76192: LD_VAR 0 9
76196: NOT
76197: IFFALSE 76201
// continue ;
76199: GO 76174
// if weapon in weapons then
76201: LD_VAR 0 8
76205: PUSH
76206: LD_VAR 0 9
76210: IN
76211: IFFALSE 76238
// begin result := [ i , weapon ] ;
76213: LD_ADDR_VAR 0 3
76217: PUSH
76218: LD_VAR 0 4
76222: PUSH
76223: LD_VAR 0 8
76227: PUSH
76228: EMPTY
76229: LIST
76230: LIST
76231: ST_TO_ADDR
// exit ;
76232: POP
76233: POP
76234: POP
76235: POP
76236: GO 76246
// end ; end ;
76238: GO 76174
76240: POP
76241: POP
// end ;
76242: GO 76060
76244: POP
76245: POP
// end ;
76246: LD_VAR 0 3
76250: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76251: LD_INT 0
76253: PPUSH
// if not side or side > 8 then
76254: LD_VAR 0 3
76258: NOT
76259: PUSH
76260: LD_VAR 0 3
76264: PUSH
76265: LD_INT 8
76267: GREATER
76268: OR
76269: IFFALSE 76273
// exit ;
76271: GO 76332
// if not range then
76273: LD_VAR 0 4
76277: NOT
76278: IFFALSE 76289
// range := - 12 ;
76280: LD_ADDR_VAR 0 4
76284: PUSH
76285: LD_INT 12
76287: NEG
76288: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76289: LD_VAR 0 1
76293: PPUSH
76294: LD_VAR 0 2
76298: PPUSH
76299: LD_VAR 0 3
76303: PPUSH
76304: LD_VAR 0 4
76308: PPUSH
76309: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76313: LD_VAR 0 1
76317: PPUSH
76318: LD_VAR 0 2
76322: PPUSH
76323: LD_VAR 0 3
76327: PPUSH
76328: CALL_OW 331
// end ;
76332: LD_VAR 0 5
76336: RET
// export function Video ( mode ) ; begin
76337: LD_INT 0
76339: PPUSH
// ingame_video = mode ;
76340: LD_ADDR_OWVAR 52
76344: PUSH
76345: LD_VAR 0 1
76349: ST_TO_ADDR
// interface_hidden = mode ;
76350: LD_ADDR_OWVAR 54
76354: PUSH
76355: LD_VAR 0 1
76359: ST_TO_ADDR
// end ;
76360: LD_VAR 0 2
76364: RET
// export function Join ( array , element ) ; begin
76365: LD_INT 0
76367: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76368: LD_ADDR_VAR 0 3
76372: PUSH
76373: LD_VAR 0 1
76377: PPUSH
76378: LD_VAR 0 1
76382: PUSH
76383: LD_INT 1
76385: PLUS
76386: PPUSH
76387: LD_VAR 0 2
76391: PPUSH
76392: CALL_OW 1
76396: ST_TO_ADDR
// end ;
76397: LD_VAR 0 3
76401: RET
// export function JoinUnion ( array , element ) ; begin
76402: LD_INT 0
76404: PPUSH
// result := array union element ;
76405: LD_ADDR_VAR 0 3
76409: PUSH
76410: LD_VAR 0 1
76414: PUSH
76415: LD_VAR 0 2
76419: UNION
76420: ST_TO_ADDR
// end ;
76421: LD_VAR 0 3
76425: RET
// export function GetBehemoths ( side ) ; begin
76426: LD_INT 0
76428: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76429: LD_ADDR_VAR 0 2
76433: PUSH
76434: LD_INT 22
76436: PUSH
76437: LD_VAR 0 1
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: LD_INT 31
76448: PUSH
76449: LD_INT 25
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: PPUSH
76460: CALL_OW 69
76464: ST_TO_ADDR
// end ;
76465: LD_VAR 0 2
76469: RET
// export function Shuffle ( array ) ; var i , index ; begin
76470: LD_INT 0
76472: PPUSH
76473: PPUSH
76474: PPUSH
// result := [ ] ;
76475: LD_ADDR_VAR 0 2
76479: PUSH
76480: EMPTY
76481: ST_TO_ADDR
// if not array then
76482: LD_VAR 0 1
76486: NOT
76487: IFFALSE 76491
// exit ;
76489: GO 76590
// Randomize ;
76491: CALL_OW 10
// for i = array downto 1 do
76495: LD_ADDR_VAR 0 3
76499: PUSH
76500: DOUBLE
76501: LD_VAR 0 1
76505: INC
76506: ST_TO_ADDR
76507: LD_INT 1
76509: PUSH
76510: FOR_DOWNTO
76511: IFFALSE 76588
// begin index := rand ( 1 , array ) ;
76513: LD_ADDR_VAR 0 4
76517: PUSH
76518: LD_INT 1
76520: PPUSH
76521: LD_VAR 0 1
76525: PPUSH
76526: CALL_OW 12
76530: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76531: LD_ADDR_VAR 0 2
76535: PUSH
76536: LD_VAR 0 2
76540: PPUSH
76541: LD_VAR 0 2
76545: PUSH
76546: LD_INT 1
76548: PLUS
76549: PPUSH
76550: LD_VAR 0 1
76554: PUSH
76555: LD_VAR 0 4
76559: ARRAY
76560: PPUSH
76561: CALL_OW 2
76565: ST_TO_ADDR
// array := Delete ( array , index ) ;
76566: LD_ADDR_VAR 0 1
76570: PUSH
76571: LD_VAR 0 1
76575: PPUSH
76576: LD_VAR 0 4
76580: PPUSH
76581: CALL_OW 3
76585: ST_TO_ADDR
// end ;
76586: GO 76510
76588: POP
76589: POP
// end ;
76590: LD_VAR 0 2
76594: RET
// export function GetBaseMaterials ( base ) ; begin
76595: LD_INT 0
76597: PPUSH
// result := [ 0 , 0 , 0 ] ;
76598: LD_ADDR_VAR 0 2
76602: PUSH
76603: LD_INT 0
76605: PUSH
76606: LD_INT 0
76608: PUSH
76609: LD_INT 0
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: LIST
76616: ST_TO_ADDR
// if not base then
76617: LD_VAR 0 1
76621: NOT
76622: IFFALSE 76626
// exit ;
76624: GO 76675
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76626: LD_ADDR_VAR 0 2
76630: PUSH
76631: LD_VAR 0 1
76635: PPUSH
76636: LD_INT 1
76638: PPUSH
76639: CALL_OW 275
76643: PUSH
76644: LD_VAR 0 1
76648: PPUSH
76649: LD_INT 2
76651: PPUSH
76652: CALL_OW 275
76656: PUSH
76657: LD_VAR 0 1
76661: PPUSH
76662: LD_INT 3
76664: PPUSH
76665: CALL_OW 275
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: LIST
76674: ST_TO_ADDR
// end ;
76675: LD_VAR 0 2
76679: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76680: LD_INT 0
76682: PPUSH
76683: PPUSH
// result := array ;
76684: LD_ADDR_VAR 0 3
76688: PUSH
76689: LD_VAR 0 1
76693: ST_TO_ADDR
// if size >= result then
76694: LD_VAR 0 2
76698: PUSH
76699: LD_VAR 0 3
76703: GREATEREQUAL
76704: IFFALSE 76708
// exit ;
76706: GO 76758
// if size then
76708: LD_VAR 0 2
76712: IFFALSE 76758
// for i := array downto size do
76714: LD_ADDR_VAR 0 4
76718: PUSH
76719: DOUBLE
76720: LD_VAR 0 1
76724: INC
76725: ST_TO_ADDR
76726: LD_VAR 0 2
76730: PUSH
76731: FOR_DOWNTO
76732: IFFALSE 76756
// result := Delete ( result , result ) ;
76734: LD_ADDR_VAR 0 3
76738: PUSH
76739: LD_VAR 0 3
76743: PPUSH
76744: LD_VAR 0 3
76748: PPUSH
76749: CALL_OW 3
76753: ST_TO_ADDR
76754: GO 76731
76756: POP
76757: POP
// end ;
76758: LD_VAR 0 3
76762: RET
// export function ComExit ( unit ) ; var tmp ; begin
76763: LD_INT 0
76765: PPUSH
76766: PPUSH
// if not IsInUnit ( unit ) then
76767: LD_VAR 0 1
76771: PPUSH
76772: CALL_OW 310
76776: NOT
76777: IFFALSE 76781
// exit ;
76779: GO 76841
// tmp := IsInUnit ( unit ) ;
76781: LD_ADDR_VAR 0 3
76785: PUSH
76786: LD_VAR 0 1
76790: PPUSH
76791: CALL_OW 310
76795: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76796: LD_VAR 0 3
76800: PPUSH
76801: CALL_OW 247
76805: PUSH
76806: LD_INT 2
76808: EQUAL
76809: IFFALSE 76822
// ComExitVehicle ( unit ) else
76811: LD_VAR 0 1
76815: PPUSH
76816: CALL_OW 121
76820: GO 76831
// ComExitBuilding ( unit ) ;
76822: LD_VAR 0 1
76826: PPUSH
76827: CALL_OW 122
// result := tmp ;
76831: LD_ADDR_VAR 0 2
76835: PUSH
76836: LD_VAR 0 3
76840: ST_TO_ADDR
// end ;
76841: LD_VAR 0 2
76845: RET
// export function ComExitAll ( units ) ; var i ; begin
76846: LD_INT 0
76848: PPUSH
76849: PPUSH
// if not units then
76850: LD_VAR 0 1
76854: NOT
76855: IFFALSE 76859
// exit ;
76857: GO 76885
// for i in units do
76859: LD_ADDR_VAR 0 3
76863: PUSH
76864: LD_VAR 0 1
76868: PUSH
76869: FOR_IN
76870: IFFALSE 76883
// ComExit ( i ) ;
76872: LD_VAR 0 3
76876: PPUSH
76877: CALL 76763 0 1
76881: GO 76869
76883: POP
76884: POP
// end ;
76885: LD_VAR 0 2
76889: RET
// export function ResetHc ; begin
76890: LD_INT 0
76892: PPUSH
// InitHc ;
76893: CALL_OW 19
// hc_importance := 0 ;
76897: LD_ADDR_OWVAR 32
76901: PUSH
76902: LD_INT 0
76904: ST_TO_ADDR
// end ;
76905: LD_VAR 0 1
76909: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76910: LD_INT 0
76912: PPUSH
76913: PPUSH
76914: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76915: LD_ADDR_VAR 0 6
76919: PUSH
76920: LD_VAR 0 1
76924: PUSH
76925: LD_VAR 0 3
76929: PLUS
76930: PUSH
76931: LD_INT 2
76933: DIV
76934: ST_TO_ADDR
// if _x < 0 then
76935: LD_VAR 0 6
76939: PUSH
76940: LD_INT 0
76942: LESS
76943: IFFALSE 76960
// _x := _x * - 1 ;
76945: LD_ADDR_VAR 0 6
76949: PUSH
76950: LD_VAR 0 6
76954: PUSH
76955: LD_INT 1
76957: NEG
76958: MUL
76959: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76960: LD_ADDR_VAR 0 7
76964: PUSH
76965: LD_VAR 0 2
76969: PUSH
76970: LD_VAR 0 4
76974: PLUS
76975: PUSH
76976: LD_INT 2
76978: DIV
76979: ST_TO_ADDR
// if _y < 0 then
76980: LD_VAR 0 7
76984: PUSH
76985: LD_INT 0
76987: LESS
76988: IFFALSE 77005
// _y := _y * - 1 ;
76990: LD_ADDR_VAR 0 7
76994: PUSH
76995: LD_VAR 0 7
76999: PUSH
77000: LD_INT 1
77002: NEG
77003: MUL
77004: ST_TO_ADDR
// result := [ _x , _y ] ;
77005: LD_ADDR_VAR 0 5
77009: PUSH
77010: LD_VAR 0 6
77014: PUSH
77015: LD_VAR 0 7
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: ST_TO_ADDR
// end ;
77024: LD_VAR 0 5
77028: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77029: LD_INT 0
77031: PPUSH
77032: PPUSH
77033: PPUSH
77034: PPUSH
// task := GetTaskList ( unit ) ;
77035: LD_ADDR_VAR 0 7
77039: PUSH
77040: LD_VAR 0 1
77044: PPUSH
77045: CALL_OW 437
77049: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77050: LD_VAR 0 7
77054: NOT
77055: PUSH
77056: LD_VAR 0 1
77060: PPUSH
77061: LD_VAR 0 2
77065: PPUSH
77066: CALL_OW 308
77070: NOT
77071: AND
77072: IFFALSE 77076
// exit ;
77074: GO 77194
// if IsInArea ( unit , area ) then
77076: LD_VAR 0 1
77080: PPUSH
77081: LD_VAR 0 2
77085: PPUSH
77086: CALL_OW 308
77090: IFFALSE 77108
// begin ComMoveToArea ( unit , goAway ) ;
77092: LD_VAR 0 1
77096: PPUSH
77097: LD_VAR 0 3
77101: PPUSH
77102: CALL_OW 113
// exit ;
77106: GO 77194
// end ; if task [ 1 ] [ 1 ] <> M then
77108: LD_VAR 0 7
77112: PUSH
77113: LD_INT 1
77115: ARRAY
77116: PUSH
77117: LD_INT 1
77119: ARRAY
77120: PUSH
77121: LD_STRING M
77123: NONEQUAL
77124: IFFALSE 77128
// exit ;
77126: GO 77194
// x := task [ 1 ] [ 2 ] ;
77128: LD_ADDR_VAR 0 5
77132: PUSH
77133: LD_VAR 0 7
77137: PUSH
77138: LD_INT 1
77140: ARRAY
77141: PUSH
77142: LD_INT 2
77144: ARRAY
77145: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77146: LD_ADDR_VAR 0 6
77150: PUSH
77151: LD_VAR 0 7
77155: PUSH
77156: LD_INT 1
77158: ARRAY
77159: PUSH
77160: LD_INT 3
77162: ARRAY
77163: ST_TO_ADDR
// if InArea ( x , y , area ) then
77164: LD_VAR 0 5
77168: PPUSH
77169: LD_VAR 0 6
77173: PPUSH
77174: LD_VAR 0 2
77178: PPUSH
77179: CALL_OW 309
77183: IFFALSE 77194
// ComStop ( unit ) ;
77185: LD_VAR 0 1
77189: PPUSH
77190: CALL_OW 141
// end ;
77194: LD_VAR 0 4
77198: RET
// export function Abs ( value ) ; begin
77199: LD_INT 0
77201: PPUSH
// result := value ;
77202: LD_ADDR_VAR 0 2
77206: PUSH
77207: LD_VAR 0 1
77211: ST_TO_ADDR
// if value < 0 then
77212: LD_VAR 0 1
77216: PUSH
77217: LD_INT 0
77219: LESS
77220: IFFALSE 77237
// result := value * - 1 ;
77222: LD_ADDR_VAR 0 2
77226: PUSH
77227: LD_VAR 0 1
77231: PUSH
77232: LD_INT 1
77234: NEG
77235: MUL
77236: ST_TO_ADDR
// end ;
77237: LD_VAR 0 2
77241: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77242: LD_INT 0
77244: PPUSH
77245: PPUSH
77246: PPUSH
77247: PPUSH
77248: PPUSH
77249: PPUSH
77250: PPUSH
77251: PPUSH
// if not unit or not building then
77252: LD_VAR 0 1
77256: NOT
77257: PUSH
77258: LD_VAR 0 2
77262: NOT
77263: OR
77264: IFFALSE 77268
// exit ;
77266: GO 77494
// x := GetX ( building ) ;
77268: LD_ADDR_VAR 0 4
77272: PUSH
77273: LD_VAR 0 2
77277: PPUSH
77278: CALL_OW 250
77282: ST_TO_ADDR
// y := GetY ( building ) ;
77283: LD_ADDR_VAR 0 6
77287: PUSH
77288: LD_VAR 0 2
77292: PPUSH
77293: CALL_OW 251
77297: ST_TO_ADDR
// d := GetDir ( building ) ;
77298: LD_ADDR_VAR 0 8
77302: PUSH
77303: LD_VAR 0 2
77307: PPUSH
77308: CALL_OW 254
77312: ST_TO_ADDR
// r := 4 ;
77313: LD_ADDR_VAR 0 9
77317: PUSH
77318: LD_INT 4
77320: ST_TO_ADDR
// for i := 1 to 5 do
77321: LD_ADDR_VAR 0 10
77325: PUSH
77326: DOUBLE
77327: LD_INT 1
77329: DEC
77330: ST_TO_ADDR
77331: LD_INT 5
77333: PUSH
77334: FOR_TO
77335: IFFALSE 77492
// begin _x := ShiftX ( x , d , r + i ) ;
77337: LD_ADDR_VAR 0 5
77341: PUSH
77342: LD_VAR 0 4
77346: PPUSH
77347: LD_VAR 0 8
77351: PPUSH
77352: LD_VAR 0 9
77356: PUSH
77357: LD_VAR 0 10
77361: PLUS
77362: PPUSH
77363: CALL_OW 272
77367: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77368: LD_ADDR_VAR 0 7
77372: PUSH
77373: LD_VAR 0 6
77377: PPUSH
77378: LD_VAR 0 8
77382: PPUSH
77383: LD_VAR 0 9
77387: PUSH
77388: LD_VAR 0 10
77392: PLUS
77393: PPUSH
77394: CALL_OW 273
77398: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77399: LD_VAR 0 5
77403: PPUSH
77404: LD_VAR 0 7
77408: PPUSH
77409: CALL_OW 488
77413: PUSH
77414: LD_VAR 0 5
77418: PPUSH
77419: LD_VAR 0 7
77423: PPUSH
77424: CALL_OW 428
77428: PPUSH
77429: CALL_OW 247
77433: PUSH
77434: LD_INT 3
77436: PUSH
77437: LD_INT 2
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: IN
77444: NOT
77445: AND
77446: IFFALSE 77490
// begin ComMoveXY ( unit , _x , _y ) ;
77448: LD_VAR 0 1
77452: PPUSH
77453: LD_VAR 0 5
77457: PPUSH
77458: LD_VAR 0 7
77462: PPUSH
77463: CALL_OW 111
// result := [ _x , _y ] ;
77467: LD_ADDR_VAR 0 3
77471: PUSH
77472: LD_VAR 0 5
77476: PUSH
77477: LD_VAR 0 7
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: ST_TO_ADDR
// exit ;
77486: POP
77487: POP
77488: GO 77494
// end ; end ;
77490: GO 77334
77492: POP
77493: POP
// end ;
77494: LD_VAR 0 3
77498: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77499: LD_INT 0
77501: PPUSH
77502: PPUSH
77503: PPUSH
// result := 0 ;
77504: LD_ADDR_VAR 0 3
77508: PUSH
77509: LD_INT 0
77511: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77512: LD_VAR 0 1
77516: PUSH
77517: LD_INT 0
77519: LESS
77520: PUSH
77521: LD_VAR 0 1
77525: PUSH
77526: LD_INT 8
77528: GREATER
77529: OR
77530: PUSH
77531: LD_VAR 0 2
77535: PUSH
77536: LD_INT 0
77538: LESS
77539: OR
77540: PUSH
77541: LD_VAR 0 2
77545: PUSH
77546: LD_INT 8
77548: GREATER
77549: OR
77550: IFFALSE 77554
// exit ;
77552: GO 77629
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77554: LD_ADDR_VAR 0 4
77558: PUSH
77559: LD_INT 22
77561: PUSH
77562: LD_VAR 0 2
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: PPUSH
77571: CALL_OW 69
77575: PUSH
77576: FOR_IN
77577: IFFALSE 77627
// begin un := UnitShoot ( i ) ;
77579: LD_ADDR_VAR 0 5
77583: PUSH
77584: LD_VAR 0 4
77588: PPUSH
77589: CALL_OW 504
77593: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77594: LD_VAR 0 5
77598: PPUSH
77599: CALL_OW 255
77603: PUSH
77604: LD_VAR 0 1
77608: EQUAL
77609: IFFALSE 77625
// begin result := un ;
77611: LD_ADDR_VAR 0 3
77615: PUSH
77616: LD_VAR 0 5
77620: ST_TO_ADDR
// exit ;
77621: POP
77622: POP
77623: GO 77629
// end ; end ;
77625: GO 77576
77627: POP
77628: POP
// end ;
77629: LD_VAR 0 3
77633: RET
// export function GetCargoBay ( units ) ; begin
77634: LD_INT 0
77636: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77637: LD_ADDR_VAR 0 2
77641: PUSH
77642: LD_VAR 0 1
77646: PPUSH
77647: LD_INT 2
77649: PUSH
77650: LD_INT 34
77652: PUSH
77653: LD_INT 12
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 34
77662: PUSH
77663: LD_INT 51
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PUSH
77670: LD_INT 34
77672: PUSH
77673: LD_INT 32
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: LD_INT 34
77682: PUSH
77683: LD_INT 89
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: LIST
77694: LIST
77695: LIST
77696: PPUSH
77697: CALL_OW 72
77701: ST_TO_ADDR
// end ;
77702: LD_VAR 0 2
77706: RET
// export function Negate ( value ) ; begin
77707: LD_INT 0
77709: PPUSH
// result := not value ;
77710: LD_ADDR_VAR 0 2
77714: PUSH
77715: LD_VAR 0 1
77719: NOT
77720: ST_TO_ADDR
// end ;
77721: LD_VAR 0 2
77725: RET
// export function Inc ( value ) ; begin
77726: LD_INT 0
77728: PPUSH
// result := value + 1 ;
77729: LD_ADDR_VAR 0 2
77733: PUSH
77734: LD_VAR 0 1
77738: PUSH
77739: LD_INT 1
77741: PLUS
77742: ST_TO_ADDR
// end ;
77743: LD_VAR 0 2
77747: RET
// export function Dec ( value ) ; begin
77748: LD_INT 0
77750: PPUSH
// result := value - 1 ;
77751: LD_ADDR_VAR 0 2
77755: PUSH
77756: LD_VAR 0 1
77760: PUSH
77761: LD_INT 1
77763: MINUS
77764: ST_TO_ADDR
// end ;
77765: LD_VAR 0 2
77769: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77770: LD_INT 0
77772: PPUSH
77773: PPUSH
77774: PPUSH
77775: PPUSH
77776: PPUSH
77777: PPUSH
77778: PPUSH
77779: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77780: LD_VAR 0 1
77784: PPUSH
77785: LD_VAR 0 2
77789: PPUSH
77790: CALL_OW 488
77794: NOT
77795: PUSH
77796: LD_VAR 0 3
77800: PPUSH
77801: LD_VAR 0 4
77805: PPUSH
77806: CALL_OW 488
77810: NOT
77811: OR
77812: IFFALSE 77825
// begin result := - 1 ;
77814: LD_ADDR_VAR 0 5
77818: PUSH
77819: LD_INT 1
77821: NEG
77822: ST_TO_ADDR
// exit ;
77823: GO 78060
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77825: LD_ADDR_VAR 0 12
77829: PUSH
77830: LD_VAR 0 1
77834: PPUSH
77835: LD_VAR 0 2
77839: PPUSH
77840: LD_VAR 0 3
77844: PPUSH
77845: LD_VAR 0 4
77849: PPUSH
77850: CALL 76910 0 4
77854: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77855: LD_ADDR_VAR 0 11
77859: PUSH
77860: LD_VAR 0 1
77864: PPUSH
77865: LD_VAR 0 2
77869: PPUSH
77870: LD_VAR 0 12
77874: PUSH
77875: LD_INT 1
77877: ARRAY
77878: PPUSH
77879: LD_VAR 0 12
77883: PUSH
77884: LD_INT 2
77886: ARRAY
77887: PPUSH
77888: CALL_OW 298
77892: ST_TO_ADDR
// distance := 9999 ;
77893: LD_ADDR_VAR 0 10
77897: PUSH
77898: LD_INT 9999
77900: ST_TO_ADDR
// for i := 0 to 5 do
77901: LD_ADDR_VAR 0 6
77905: PUSH
77906: DOUBLE
77907: LD_INT 0
77909: DEC
77910: ST_TO_ADDR
77911: LD_INT 5
77913: PUSH
77914: FOR_TO
77915: IFFALSE 78058
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77917: LD_ADDR_VAR 0 7
77921: PUSH
77922: LD_VAR 0 1
77926: PPUSH
77927: LD_VAR 0 6
77931: PPUSH
77932: LD_VAR 0 11
77936: PPUSH
77937: CALL_OW 272
77941: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77942: LD_ADDR_VAR 0 8
77946: PUSH
77947: LD_VAR 0 2
77951: PPUSH
77952: LD_VAR 0 6
77956: PPUSH
77957: LD_VAR 0 11
77961: PPUSH
77962: CALL_OW 273
77966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77967: LD_VAR 0 7
77971: PPUSH
77972: LD_VAR 0 8
77976: PPUSH
77977: CALL_OW 488
77981: NOT
77982: IFFALSE 77986
// continue ;
77984: GO 77914
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77986: LD_ADDR_VAR 0 9
77990: PUSH
77991: LD_VAR 0 12
77995: PUSH
77996: LD_INT 1
77998: ARRAY
77999: PPUSH
78000: LD_VAR 0 12
78004: PUSH
78005: LD_INT 2
78007: ARRAY
78008: PPUSH
78009: LD_VAR 0 7
78013: PPUSH
78014: LD_VAR 0 8
78018: PPUSH
78019: CALL_OW 298
78023: ST_TO_ADDR
// if tmp < distance then
78024: LD_VAR 0 9
78028: PUSH
78029: LD_VAR 0 10
78033: LESS
78034: IFFALSE 78056
// begin result := i ;
78036: LD_ADDR_VAR 0 5
78040: PUSH
78041: LD_VAR 0 6
78045: ST_TO_ADDR
// distance := tmp ;
78046: LD_ADDR_VAR 0 10
78050: PUSH
78051: LD_VAR 0 9
78055: ST_TO_ADDR
// end ; end ;
78056: GO 77914
78058: POP
78059: POP
// end ;
78060: LD_VAR 0 5
78064: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78065: LD_INT 0
78067: PPUSH
78068: PPUSH
// if not driver or not IsInUnit ( driver ) then
78069: LD_VAR 0 1
78073: NOT
78074: PUSH
78075: LD_VAR 0 1
78079: PPUSH
78080: CALL_OW 310
78084: NOT
78085: OR
78086: IFFALSE 78090
// exit ;
78088: GO 78180
// vehicle := IsInUnit ( driver ) ;
78090: LD_ADDR_VAR 0 3
78094: PUSH
78095: LD_VAR 0 1
78099: PPUSH
78100: CALL_OW 310
78104: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78105: LD_VAR 0 1
78109: PPUSH
78110: LD_STRING \
78112: PUSH
78113: LD_INT 0
78115: PUSH
78116: LD_INT 0
78118: PUSH
78119: LD_INT 0
78121: PUSH
78122: LD_INT 0
78124: PUSH
78125: LD_INT 0
78127: PUSH
78128: LD_INT 0
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: PUSH
78140: LD_STRING E
78142: PUSH
78143: LD_INT 0
78145: PUSH
78146: LD_INT 0
78148: PUSH
78149: LD_VAR 0 3
78153: PUSH
78154: LD_INT 0
78156: PUSH
78157: LD_INT 0
78159: PUSH
78160: LD_INT 0
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: PPUSH
78176: CALL_OW 446
// end ;
78180: LD_VAR 0 2
78184: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78185: LD_INT 0
78187: PPUSH
78188: PPUSH
// if not driver or not IsInUnit ( driver ) then
78189: LD_VAR 0 1
78193: NOT
78194: PUSH
78195: LD_VAR 0 1
78199: PPUSH
78200: CALL_OW 310
78204: NOT
78205: OR
78206: IFFALSE 78210
// exit ;
78208: GO 78300
// vehicle := IsInUnit ( driver ) ;
78210: LD_ADDR_VAR 0 3
78214: PUSH
78215: LD_VAR 0 1
78219: PPUSH
78220: CALL_OW 310
78224: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78225: LD_VAR 0 1
78229: PPUSH
78230: LD_STRING \
78232: PUSH
78233: LD_INT 0
78235: PUSH
78236: LD_INT 0
78238: PUSH
78239: LD_INT 0
78241: PUSH
78242: LD_INT 0
78244: PUSH
78245: LD_INT 0
78247: PUSH
78248: LD_INT 0
78250: PUSH
78251: EMPTY
78252: LIST
78253: LIST
78254: LIST
78255: LIST
78256: LIST
78257: LIST
78258: LIST
78259: PUSH
78260: LD_STRING E
78262: PUSH
78263: LD_INT 0
78265: PUSH
78266: LD_INT 0
78268: PUSH
78269: LD_VAR 0 3
78273: PUSH
78274: LD_INT 0
78276: PUSH
78277: LD_INT 0
78279: PUSH
78280: LD_INT 0
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: LIST
78287: LIST
78288: LIST
78289: LIST
78290: LIST
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PPUSH
78296: CALL_OW 447
// end ;
78300: LD_VAR 0 2
78304: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78305: LD_INT 0
78307: PPUSH
78308: PPUSH
78309: PPUSH
// tmp := [ ] ;
78310: LD_ADDR_VAR 0 5
78314: PUSH
78315: EMPTY
78316: ST_TO_ADDR
// for i in units do
78317: LD_ADDR_VAR 0 4
78321: PUSH
78322: LD_VAR 0 1
78326: PUSH
78327: FOR_IN
78328: IFFALSE 78366
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78330: LD_ADDR_VAR 0 5
78334: PUSH
78335: LD_VAR 0 5
78339: PPUSH
78340: LD_VAR 0 5
78344: PUSH
78345: LD_INT 1
78347: PLUS
78348: PPUSH
78349: LD_VAR 0 4
78353: PPUSH
78354: CALL_OW 256
78358: PPUSH
78359: CALL_OW 2
78363: ST_TO_ADDR
78364: GO 78327
78366: POP
78367: POP
// if not tmp then
78368: LD_VAR 0 5
78372: NOT
78373: IFFALSE 78377
// exit ;
78375: GO 78425
// if asc then
78377: LD_VAR 0 2
78381: IFFALSE 78405
// result := SortListByListAsc ( units , tmp ) else
78383: LD_ADDR_VAR 0 3
78387: PUSH
78388: LD_VAR 0 1
78392: PPUSH
78393: LD_VAR 0 5
78397: PPUSH
78398: CALL_OW 76
78402: ST_TO_ADDR
78403: GO 78425
// result := SortListByListDesc ( units , tmp ) ;
78405: LD_ADDR_VAR 0 3
78409: PUSH
78410: LD_VAR 0 1
78414: PPUSH
78415: LD_VAR 0 5
78419: PPUSH
78420: CALL_OW 77
78424: ST_TO_ADDR
// end ;
78425: LD_VAR 0 3
78429: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78430: LD_INT 0
78432: PPUSH
78433: PPUSH
// task := GetTaskList ( mech ) ;
78434: LD_ADDR_VAR 0 4
78438: PUSH
78439: LD_VAR 0 1
78443: PPUSH
78444: CALL_OW 437
78448: ST_TO_ADDR
// if not task then
78449: LD_VAR 0 4
78453: NOT
78454: IFFALSE 78458
// exit ;
78456: GO 78500
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78458: LD_ADDR_VAR 0 3
78462: PUSH
78463: LD_VAR 0 4
78467: PUSH
78468: LD_INT 1
78470: ARRAY
78471: PUSH
78472: LD_INT 1
78474: ARRAY
78475: PUSH
78476: LD_STRING r
78478: EQUAL
78479: PUSH
78480: LD_VAR 0 4
78484: PUSH
78485: LD_INT 1
78487: ARRAY
78488: PUSH
78489: LD_INT 4
78491: ARRAY
78492: PUSH
78493: LD_VAR 0 2
78497: EQUAL
78498: AND
78499: ST_TO_ADDR
// end ;
78500: LD_VAR 0 3
78504: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78505: LD_INT 0
78507: PPUSH
// SetDir ( unit , d ) ;
78508: LD_VAR 0 1
78512: PPUSH
78513: LD_VAR 0 4
78517: PPUSH
78518: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78522: LD_VAR 0 1
78526: PPUSH
78527: LD_VAR 0 2
78531: PPUSH
78532: LD_VAR 0 3
78536: PPUSH
78537: LD_VAR 0 5
78541: PPUSH
78542: CALL_OW 48
// end ;
78546: LD_VAR 0 6
78550: RET
// export function ToNaturalNumber ( number ) ; begin
78551: LD_INT 0
78553: PPUSH
// result := number div 1 ;
78554: LD_ADDR_VAR 0 2
78558: PUSH
78559: LD_VAR 0 1
78563: PUSH
78564: LD_INT 1
78566: DIV
78567: ST_TO_ADDR
// if number < 0 then
78568: LD_VAR 0 1
78572: PUSH
78573: LD_INT 0
78575: LESS
78576: IFFALSE 78586
// result := 0 ;
78578: LD_ADDR_VAR 0 2
78582: PUSH
78583: LD_INT 0
78585: ST_TO_ADDR
// end ;
78586: LD_VAR 0 2
78590: RET
// export function SortByClass ( units , class ) ; var un ; begin
78591: LD_INT 0
78593: PPUSH
78594: PPUSH
// if not units or not class then
78595: LD_VAR 0 1
78599: NOT
78600: PUSH
78601: LD_VAR 0 2
78605: NOT
78606: OR
78607: IFFALSE 78611
// exit ;
78609: GO 78706
// result := [ ] ;
78611: LD_ADDR_VAR 0 3
78615: PUSH
78616: EMPTY
78617: ST_TO_ADDR
// for un in units do
78618: LD_ADDR_VAR 0 4
78622: PUSH
78623: LD_VAR 0 1
78627: PUSH
78628: FOR_IN
78629: IFFALSE 78704
// if GetClass ( un ) = class then
78631: LD_VAR 0 4
78635: PPUSH
78636: CALL_OW 257
78640: PUSH
78641: LD_VAR 0 2
78645: EQUAL
78646: IFFALSE 78673
// result := Insert ( result , 1 , un ) else
78648: LD_ADDR_VAR 0 3
78652: PUSH
78653: LD_VAR 0 3
78657: PPUSH
78658: LD_INT 1
78660: PPUSH
78661: LD_VAR 0 4
78665: PPUSH
78666: CALL_OW 2
78670: ST_TO_ADDR
78671: GO 78702
// result := Replace ( result , result + 1 , un ) ;
78673: LD_ADDR_VAR 0 3
78677: PUSH
78678: LD_VAR 0 3
78682: PPUSH
78683: LD_VAR 0 3
78687: PUSH
78688: LD_INT 1
78690: PLUS
78691: PPUSH
78692: LD_VAR 0 4
78696: PPUSH
78697: CALL_OW 1
78701: ST_TO_ADDR
78702: GO 78628
78704: POP
78705: POP
// end ;
78706: LD_VAR 0 3
78710: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78711: LD_INT 0
78713: PPUSH
78714: PPUSH
78715: PPUSH
78716: PPUSH
78717: PPUSH
78718: PPUSH
78719: PPUSH
// result := [ ] ;
78720: LD_ADDR_VAR 0 4
78724: PUSH
78725: EMPTY
78726: ST_TO_ADDR
// if x - r < 0 then
78727: LD_VAR 0 1
78731: PUSH
78732: LD_VAR 0 3
78736: MINUS
78737: PUSH
78738: LD_INT 0
78740: LESS
78741: IFFALSE 78753
// min_x := 0 else
78743: LD_ADDR_VAR 0 8
78747: PUSH
78748: LD_INT 0
78750: ST_TO_ADDR
78751: GO 78769
// min_x := x - r ;
78753: LD_ADDR_VAR 0 8
78757: PUSH
78758: LD_VAR 0 1
78762: PUSH
78763: LD_VAR 0 3
78767: MINUS
78768: ST_TO_ADDR
// if y - r < 0 then
78769: LD_VAR 0 2
78773: PUSH
78774: LD_VAR 0 3
78778: MINUS
78779: PUSH
78780: LD_INT 0
78782: LESS
78783: IFFALSE 78795
// min_y := 0 else
78785: LD_ADDR_VAR 0 7
78789: PUSH
78790: LD_INT 0
78792: ST_TO_ADDR
78793: GO 78811
// min_y := y - r ;
78795: LD_ADDR_VAR 0 7
78799: PUSH
78800: LD_VAR 0 2
78804: PUSH
78805: LD_VAR 0 3
78809: MINUS
78810: ST_TO_ADDR
// max_x := x + r ;
78811: LD_ADDR_VAR 0 9
78815: PUSH
78816: LD_VAR 0 1
78820: PUSH
78821: LD_VAR 0 3
78825: PLUS
78826: ST_TO_ADDR
// max_y := y + r ;
78827: LD_ADDR_VAR 0 10
78831: PUSH
78832: LD_VAR 0 2
78836: PUSH
78837: LD_VAR 0 3
78841: PLUS
78842: ST_TO_ADDR
// for _x = min_x to max_x do
78843: LD_ADDR_VAR 0 5
78847: PUSH
78848: DOUBLE
78849: LD_VAR 0 8
78853: DEC
78854: ST_TO_ADDR
78855: LD_VAR 0 9
78859: PUSH
78860: FOR_TO
78861: IFFALSE 78962
// for _y = min_y to max_y do
78863: LD_ADDR_VAR 0 6
78867: PUSH
78868: DOUBLE
78869: LD_VAR 0 7
78873: DEC
78874: ST_TO_ADDR
78875: LD_VAR 0 10
78879: PUSH
78880: FOR_TO
78881: IFFALSE 78958
// begin if not ValidHex ( _x , _y ) then
78883: LD_VAR 0 5
78887: PPUSH
78888: LD_VAR 0 6
78892: PPUSH
78893: CALL_OW 488
78897: NOT
78898: IFFALSE 78902
// continue ;
78900: GO 78880
// if GetResourceTypeXY ( _x , _y ) then
78902: LD_VAR 0 5
78906: PPUSH
78907: LD_VAR 0 6
78911: PPUSH
78912: CALL_OW 283
78916: IFFALSE 78956
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78918: LD_ADDR_VAR 0 4
78922: PUSH
78923: LD_VAR 0 4
78927: PPUSH
78928: LD_VAR 0 4
78932: PUSH
78933: LD_INT 1
78935: PLUS
78936: PPUSH
78937: LD_VAR 0 5
78941: PUSH
78942: LD_VAR 0 6
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: PPUSH
78951: CALL_OW 1
78955: ST_TO_ADDR
// end ;
78956: GO 78880
78958: POP
78959: POP
78960: GO 78860
78962: POP
78963: POP
// end ;
78964: LD_VAR 0 4
78968: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78969: LD_INT 0
78971: PPUSH
78972: PPUSH
78973: PPUSH
78974: PPUSH
78975: PPUSH
78976: PPUSH
78977: PPUSH
78978: PPUSH
// if not units then
78979: LD_VAR 0 1
78983: NOT
78984: IFFALSE 78988
// exit ;
78986: GO 79512
// result := UnitFilter ( units , [ f_ok ] ) ;
78988: LD_ADDR_VAR 0 3
78992: PUSH
78993: LD_VAR 0 1
78997: PPUSH
78998: LD_INT 50
79000: PUSH
79001: EMPTY
79002: LIST
79003: PPUSH
79004: CALL_OW 72
79008: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79009: LD_ADDR_VAR 0 8
79013: PUSH
79014: LD_VAR 0 1
79018: PUSH
79019: LD_INT 1
79021: ARRAY
79022: PPUSH
79023: CALL_OW 255
79027: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79028: LD_ADDR_VAR 0 10
79032: PUSH
79033: LD_INT 29
79035: PUSH
79036: LD_INT 91
79038: PUSH
79039: LD_INT 49
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: LIST
79046: ST_TO_ADDR
// if not result then
79047: LD_VAR 0 3
79051: NOT
79052: IFFALSE 79056
// exit ;
79054: GO 79512
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79056: LD_ADDR_VAR 0 5
79060: PUSH
79061: LD_INT 81
79063: PUSH
79064: LD_VAR 0 8
79068: PUSH
79069: EMPTY
79070: LIST
79071: LIST
79072: PPUSH
79073: CALL_OW 69
79077: ST_TO_ADDR
// for i in result do
79078: LD_ADDR_VAR 0 4
79082: PUSH
79083: LD_VAR 0 3
79087: PUSH
79088: FOR_IN
79089: IFFALSE 79510
// begin tag := GetTag ( i ) + 1 ;
79091: LD_ADDR_VAR 0 9
79095: PUSH
79096: LD_VAR 0 4
79100: PPUSH
79101: CALL_OW 110
79105: PUSH
79106: LD_INT 1
79108: PLUS
79109: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79110: LD_ADDR_VAR 0 7
79114: PUSH
79115: LD_VAR 0 4
79119: PPUSH
79120: CALL_OW 250
79124: PPUSH
79125: LD_VAR 0 4
79129: PPUSH
79130: CALL_OW 251
79134: PPUSH
79135: LD_INT 6
79137: PPUSH
79138: CALL 78711 0 3
79142: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79143: LD_VAR 0 4
79147: PPUSH
79148: CALL_OW 247
79152: PUSH
79153: LD_INT 2
79155: EQUAL
79156: PUSH
79157: LD_VAR 0 7
79161: AND
79162: PUSH
79163: LD_VAR 0 4
79167: PPUSH
79168: CALL_OW 264
79172: PUSH
79173: LD_VAR 0 10
79177: IN
79178: NOT
79179: AND
79180: IFFALSE 79219
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79182: LD_VAR 0 4
79186: PPUSH
79187: LD_VAR 0 7
79191: PUSH
79192: LD_INT 1
79194: ARRAY
79195: PUSH
79196: LD_INT 1
79198: ARRAY
79199: PPUSH
79200: LD_VAR 0 7
79204: PUSH
79205: LD_INT 1
79207: ARRAY
79208: PUSH
79209: LD_INT 2
79211: ARRAY
79212: PPUSH
79213: CALL_OW 116
79217: GO 79508
// if path > tag then
79219: LD_VAR 0 2
79223: PUSH
79224: LD_VAR 0 9
79228: GREATER
79229: IFFALSE 79437
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79231: LD_ADDR_VAR 0 6
79235: PUSH
79236: LD_VAR 0 5
79240: PPUSH
79241: LD_INT 91
79243: PUSH
79244: LD_VAR 0 4
79248: PUSH
79249: LD_INT 8
79251: PUSH
79252: EMPTY
79253: LIST
79254: LIST
79255: LIST
79256: PPUSH
79257: CALL_OW 72
79261: ST_TO_ADDR
// if nearEnemy then
79262: LD_VAR 0 6
79266: IFFALSE 79335
// begin if GetWeapon ( i ) = ru_time_lapser then
79268: LD_VAR 0 4
79272: PPUSH
79273: CALL_OW 264
79277: PUSH
79278: LD_INT 49
79280: EQUAL
79281: IFFALSE 79309
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79283: LD_VAR 0 4
79287: PPUSH
79288: LD_VAR 0 6
79292: PPUSH
79293: LD_VAR 0 4
79297: PPUSH
79298: CALL_OW 74
79302: PPUSH
79303: CALL_OW 112
79307: GO 79333
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79309: LD_VAR 0 4
79313: PPUSH
79314: LD_VAR 0 6
79318: PPUSH
79319: LD_VAR 0 4
79323: PPUSH
79324: CALL_OW 74
79328: PPUSH
79329: CALL 80437 0 2
// end else
79333: GO 79435
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79335: LD_VAR 0 4
79339: PPUSH
79340: LD_VAR 0 2
79344: PUSH
79345: LD_VAR 0 9
79349: ARRAY
79350: PUSH
79351: LD_INT 1
79353: ARRAY
79354: PPUSH
79355: LD_VAR 0 2
79359: PUSH
79360: LD_VAR 0 9
79364: ARRAY
79365: PUSH
79366: LD_INT 2
79368: ARRAY
79369: PPUSH
79370: CALL_OW 297
79374: PUSH
79375: LD_INT 6
79377: GREATER
79378: IFFALSE 79421
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79380: LD_VAR 0 4
79384: PPUSH
79385: LD_VAR 0 2
79389: PUSH
79390: LD_VAR 0 9
79394: ARRAY
79395: PUSH
79396: LD_INT 1
79398: ARRAY
79399: PPUSH
79400: LD_VAR 0 2
79404: PUSH
79405: LD_VAR 0 9
79409: ARRAY
79410: PUSH
79411: LD_INT 2
79413: ARRAY
79414: PPUSH
79415: CALL_OW 114
79419: GO 79435
// SetTag ( i , tag ) ;
79421: LD_VAR 0 4
79425: PPUSH
79426: LD_VAR 0 9
79430: PPUSH
79431: CALL_OW 109
// end else
79435: GO 79508
// if enemy then
79437: LD_VAR 0 5
79441: IFFALSE 79508
// begin if GetWeapon ( i ) = ru_time_lapser then
79443: LD_VAR 0 4
79447: PPUSH
79448: CALL_OW 264
79452: PUSH
79453: LD_INT 49
79455: EQUAL
79456: IFFALSE 79484
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79458: LD_VAR 0 4
79462: PPUSH
79463: LD_VAR 0 5
79467: PPUSH
79468: LD_VAR 0 4
79472: PPUSH
79473: CALL_OW 74
79477: PPUSH
79478: CALL_OW 112
79482: GO 79508
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79484: LD_VAR 0 4
79488: PPUSH
79489: LD_VAR 0 5
79493: PPUSH
79494: LD_VAR 0 4
79498: PPUSH
79499: CALL_OW 74
79503: PPUSH
79504: CALL 80437 0 2
// end ; end ;
79508: GO 79088
79510: POP
79511: POP
// end ;
79512: LD_VAR 0 3
79516: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79517: LD_INT 0
79519: PPUSH
79520: PPUSH
79521: PPUSH
// if not unit or IsInUnit ( unit ) then
79522: LD_VAR 0 1
79526: NOT
79527: PUSH
79528: LD_VAR 0 1
79532: PPUSH
79533: CALL_OW 310
79537: OR
79538: IFFALSE 79542
// exit ;
79540: GO 79633
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79542: LD_ADDR_VAR 0 4
79546: PUSH
79547: LD_VAR 0 1
79551: PPUSH
79552: CALL_OW 250
79556: PPUSH
79557: LD_VAR 0 2
79561: PPUSH
79562: LD_INT 1
79564: PPUSH
79565: CALL_OW 272
79569: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79570: LD_ADDR_VAR 0 5
79574: PUSH
79575: LD_VAR 0 1
79579: PPUSH
79580: CALL_OW 251
79584: PPUSH
79585: LD_VAR 0 2
79589: PPUSH
79590: LD_INT 1
79592: PPUSH
79593: CALL_OW 273
79597: ST_TO_ADDR
// if ValidHex ( x , y ) then
79598: LD_VAR 0 4
79602: PPUSH
79603: LD_VAR 0 5
79607: PPUSH
79608: CALL_OW 488
79612: IFFALSE 79633
// ComTurnXY ( unit , x , y ) ;
79614: LD_VAR 0 1
79618: PPUSH
79619: LD_VAR 0 4
79623: PPUSH
79624: LD_VAR 0 5
79628: PPUSH
79629: CALL_OW 118
// end ;
79633: LD_VAR 0 3
79637: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79638: LD_INT 0
79640: PPUSH
79641: PPUSH
// result := false ;
79642: LD_ADDR_VAR 0 3
79646: PUSH
79647: LD_INT 0
79649: ST_TO_ADDR
// if not units then
79650: LD_VAR 0 2
79654: NOT
79655: IFFALSE 79659
// exit ;
79657: GO 79704
// for i in units do
79659: LD_ADDR_VAR 0 4
79663: PUSH
79664: LD_VAR 0 2
79668: PUSH
79669: FOR_IN
79670: IFFALSE 79702
// if See ( side , i ) then
79672: LD_VAR 0 1
79676: PPUSH
79677: LD_VAR 0 4
79681: PPUSH
79682: CALL_OW 292
79686: IFFALSE 79700
// begin result := true ;
79688: LD_ADDR_VAR 0 3
79692: PUSH
79693: LD_INT 1
79695: ST_TO_ADDR
// exit ;
79696: POP
79697: POP
79698: GO 79704
// end ;
79700: GO 79669
79702: POP
79703: POP
// end ;
79704: LD_VAR 0 3
79708: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79709: LD_INT 0
79711: PPUSH
79712: PPUSH
79713: PPUSH
79714: PPUSH
// if not unit or not points then
79715: LD_VAR 0 1
79719: NOT
79720: PUSH
79721: LD_VAR 0 2
79725: NOT
79726: OR
79727: IFFALSE 79731
// exit ;
79729: GO 79821
// dist := 99999 ;
79731: LD_ADDR_VAR 0 5
79735: PUSH
79736: LD_INT 99999
79738: ST_TO_ADDR
// for i in points do
79739: LD_ADDR_VAR 0 4
79743: PUSH
79744: LD_VAR 0 2
79748: PUSH
79749: FOR_IN
79750: IFFALSE 79819
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79752: LD_ADDR_VAR 0 6
79756: PUSH
79757: LD_VAR 0 1
79761: PPUSH
79762: LD_VAR 0 4
79766: PUSH
79767: LD_INT 1
79769: ARRAY
79770: PPUSH
79771: LD_VAR 0 4
79775: PUSH
79776: LD_INT 2
79778: ARRAY
79779: PPUSH
79780: CALL_OW 297
79784: ST_TO_ADDR
// if tmpDist < dist then
79785: LD_VAR 0 6
79789: PUSH
79790: LD_VAR 0 5
79794: LESS
79795: IFFALSE 79817
// begin result := i ;
79797: LD_ADDR_VAR 0 3
79801: PUSH
79802: LD_VAR 0 4
79806: ST_TO_ADDR
// dist := tmpDist ;
79807: LD_ADDR_VAR 0 5
79811: PUSH
79812: LD_VAR 0 6
79816: ST_TO_ADDR
// end ; end ;
79817: GO 79749
79819: POP
79820: POP
// end ;
79821: LD_VAR 0 3
79825: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79826: LD_INT 0
79828: PPUSH
// uc_side := side ;
79829: LD_ADDR_OWVAR 20
79833: PUSH
79834: LD_VAR 0 1
79838: ST_TO_ADDR
// uc_nation := 3 ;
79839: LD_ADDR_OWVAR 21
79843: PUSH
79844: LD_INT 3
79846: ST_TO_ADDR
// vc_chassis := 25 ;
79847: LD_ADDR_OWVAR 37
79851: PUSH
79852: LD_INT 25
79854: ST_TO_ADDR
// vc_engine := engine_siberite ;
79855: LD_ADDR_OWVAR 39
79859: PUSH
79860: LD_INT 3
79862: ST_TO_ADDR
// vc_control := control_computer ;
79863: LD_ADDR_OWVAR 38
79867: PUSH
79868: LD_INT 3
79870: ST_TO_ADDR
// vc_weapon := 59 ;
79871: LD_ADDR_OWVAR 40
79875: PUSH
79876: LD_INT 59
79878: ST_TO_ADDR
// result := CreateVehicle ;
79879: LD_ADDR_VAR 0 5
79883: PUSH
79884: CALL_OW 45
79888: ST_TO_ADDR
// SetDir ( result , d ) ;
79889: LD_VAR 0 5
79893: PPUSH
79894: LD_VAR 0 4
79898: PPUSH
79899: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79903: LD_VAR 0 5
79907: PPUSH
79908: LD_VAR 0 2
79912: PPUSH
79913: LD_VAR 0 3
79917: PPUSH
79918: LD_INT 0
79920: PPUSH
79921: CALL_OW 48
// end ;
79925: LD_VAR 0 5
79929: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79930: LD_INT 0
79932: PPUSH
79933: PPUSH
79934: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79935: LD_ADDR_VAR 0 2
79939: PUSH
79940: LD_INT 0
79942: PUSH
79943: LD_INT 0
79945: PUSH
79946: LD_INT 0
79948: PUSH
79949: LD_INT 0
79951: PUSH
79952: EMPTY
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79958: LD_VAR 0 1
79962: NOT
79963: PUSH
79964: LD_VAR 0 1
79968: PPUSH
79969: CALL_OW 264
79973: PUSH
79974: LD_INT 12
79976: PUSH
79977: LD_INT 51
79979: PUSH
79980: LD_INT 32
79982: PUSH
79983: LD_INT 89
79985: PUSH
79986: EMPTY
79987: LIST
79988: LIST
79989: LIST
79990: LIST
79991: IN
79992: NOT
79993: OR
79994: IFFALSE 79998
// exit ;
79996: GO 80096
// for i := 1 to 3 do
79998: LD_ADDR_VAR 0 3
80002: PUSH
80003: DOUBLE
80004: LD_INT 1
80006: DEC
80007: ST_TO_ADDR
80008: LD_INT 3
80010: PUSH
80011: FOR_TO
80012: IFFALSE 80094
// begin tmp := GetCargo ( cargo , i ) ;
80014: LD_ADDR_VAR 0 4
80018: PUSH
80019: LD_VAR 0 1
80023: PPUSH
80024: LD_VAR 0 3
80028: PPUSH
80029: CALL_OW 289
80033: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80034: LD_ADDR_VAR 0 2
80038: PUSH
80039: LD_VAR 0 2
80043: PPUSH
80044: LD_VAR 0 3
80048: PPUSH
80049: LD_VAR 0 4
80053: PPUSH
80054: CALL_OW 1
80058: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80059: LD_ADDR_VAR 0 2
80063: PUSH
80064: LD_VAR 0 2
80068: PPUSH
80069: LD_INT 4
80071: PPUSH
80072: LD_VAR 0 2
80076: PUSH
80077: LD_INT 4
80079: ARRAY
80080: PUSH
80081: LD_VAR 0 4
80085: PLUS
80086: PPUSH
80087: CALL_OW 1
80091: ST_TO_ADDR
// end ;
80092: GO 80011
80094: POP
80095: POP
// end ;
80096: LD_VAR 0 2
80100: RET
// export function Length ( array ) ; begin
80101: LD_INT 0
80103: PPUSH
// result := array + 0 ;
80104: LD_ADDR_VAR 0 2
80108: PUSH
80109: LD_VAR 0 1
80113: PUSH
80114: LD_INT 0
80116: PLUS
80117: ST_TO_ADDR
// end ;
80118: LD_VAR 0 2
80122: RET
// export function PrepareArray ( array ) ; begin
80123: LD_INT 0
80125: PPUSH
// result := array diff 0 ;
80126: LD_ADDR_VAR 0 2
80130: PUSH
80131: LD_VAR 0 1
80135: PUSH
80136: LD_INT 0
80138: DIFF
80139: ST_TO_ADDR
// if not result [ 1 ] then
80140: LD_VAR 0 2
80144: PUSH
80145: LD_INT 1
80147: ARRAY
80148: NOT
80149: IFFALSE 80169
// result := Delete ( result , 1 ) ;
80151: LD_ADDR_VAR 0 2
80155: PUSH
80156: LD_VAR 0 2
80160: PPUSH
80161: LD_INT 1
80163: PPUSH
80164: CALL_OW 3
80168: ST_TO_ADDR
// end ;
80169: LD_VAR 0 2
80173: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80174: LD_INT 0
80176: PPUSH
80177: PPUSH
80178: PPUSH
80179: PPUSH
// sibRocketRange := 25 ;
80180: LD_ADDR_VAR 0 6
80184: PUSH
80185: LD_INT 25
80187: ST_TO_ADDR
// result := false ;
80188: LD_ADDR_VAR 0 4
80192: PUSH
80193: LD_INT 0
80195: ST_TO_ADDR
// for i := 0 to 5 do
80196: LD_ADDR_VAR 0 5
80200: PUSH
80201: DOUBLE
80202: LD_INT 0
80204: DEC
80205: ST_TO_ADDR
80206: LD_INT 5
80208: PUSH
80209: FOR_TO
80210: IFFALSE 80277
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80212: LD_VAR 0 1
80216: PPUSH
80217: LD_VAR 0 5
80221: PPUSH
80222: LD_VAR 0 6
80226: PPUSH
80227: CALL_OW 272
80231: PPUSH
80232: LD_VAR 0 2
80236: PPUSH
80237: LD_VAR 0 5
80241: PPUSH
80242: LD_VAR 0 6
80246: PPUSH
80247: CALL_OW 273
80251: PPUSH
80252: LD_VAR 0 3
80256: PPUSH
80257: CALL_OW 309
80261: IFFALSE 80275
// begin result := true ;
80263: LD_ADDR_VAR 0 4
80267: PUSH
80268: LD_INT 1
80270: ST_TO_ADDR
// exit ;
80271: POP
80272: POP
80273: GO 80279
// end ;
80275: GO 80209
80277: POP
80278: POP
// end ;
80279: LD_VAR 0 4
80283: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80284: LD_INT 0
80286: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80287: LD_VAR 0 1
80291: PPUSH
80292: LD_VAR 0 2
80296: PPUSH
80297: LD_INT 0
80299: PPUSH
80300: LD_INT 0
80302: PPUSH
80303: LD_INT 1
80305: PPUSH
80306: LD_INT 0
80308: PPUSH
80309: CALL_OW 587
// end ;
80313: LD_VAR 0 3
80317: RET
// export function CenterOnNow ( unit ) ; begin
80318: LD_INT 0
80320: PPUSH
// result := IsInUnit ( unit ) ;
80321: LD_ADDR_VAR 0 2
80325: PUSH
80326: LD_VAR 0 1
80330: PPUSH
80331: CALL_OW 310
80335: ST_TO_ADDR
// if not result then
80336: LD_VAR 0 2
80340: NOT
80341: IFFALSE 80353
// result := unit ;
80343: LD_ADDR_VAR 0 2
80347: PUSH
80348: LD_VAR 0 1
80352: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80353: LD_VAR 0 1
80357: PPUSH
80358: CALL_OW 87
// end ;
80362: LD_VAR 0 2
80366: RET
// export function ComMoveHex ( unit , hex ) ; begin
80367: LD_INT 0
80369: PPUSH
// if not hex then
80370: LD_VAR 0 2
80374: NOT
80375: IFFALSE 80379
// exit ;
80377: GO 80432
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80379: LD_VAR 0 2
80383: PUSH
80384: LD_INT 1
80386: ARRAY
80387: PPUSH
80388: LD_VAR 0 2
80392: PUSH
80393: LD_INT 2
80395: ARRAY
80396: PPUSH
80397: CALL_OW 428
80401: IFFALSE 80405
// exit ;
80403: GO 80432
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80405: LD_VAR 0 1
80409: PPUSH
80410: LD_VAR 0 2
80414: PUSH
80415: LD_INT 1
80417: ARRAY
80418: PPUSH
80419: LD_VAR 0 2
80423: PUSH
80424: LD_INT 2
80426: ARRAY
80427: PPUSH
80428: CALL_OW 111
// end ;
80432: LD_VAR 0 3
80436: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80437: LD_INT 0
80439: PPUSH
80440: PPUSH
80441: PPUSH
// if not unit or not enemy then
80442: LD_VAR 0 1
80446: NOT
80447: PUSH
80448: LD_VAR 0 2
80452: NOT
80453: OR
80454: IFFALSE 80458
// exit ;
80456: GO 80582
// x := GetX ( enemy ) ;
80458: LD_ADDR_VAR 0 4
80462: PUSH
80463: LD_VAR 0 2
80467: PPUSH
80468: CALL_OW 250
80472: ST_TO_ADDR
// y := GetY ( enemy ) ;
80473: LD_ADDR_VAR 0 5
80477: PUSH
80478: LD_VAR 0 2
80482: PPUSH
80483: CALL_OW 251
80487: ST_TO_ADDR
// if ValidHex ( x , y ) then
80488: LD_VAR 0 4
80492: PPUSH
80493: LD_VAR 0 5
80497: PPUSH
80498: CALL_OW 488
80502: IFFALSE 80582
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
80504: LD_VAR 0 2
80508: PPUSH
80509: CALL_OW 247
80513: PUSH
80514: LD_INT 3
80516: PUSH
80517: LD_INT 2
80519: PUSH
80520: EMPTY
80521: LIST
80522: LIST
80523: IN
80524: PUSH
80525: LD_VAR 0 1
80529: PPUSH
80530: CALL_OW 255
80534: PPUSH
80535: LD_VAR 0 2
80539: PPUSH
80540: CALL_OW 292
80544: OR
80545: IFFALSE 80563
// ComAttackUnit ( unit , enemy ) else
80547: LD_VAR 0 1
80551: PPUSH
80552: LD_VAR 0 2
80556: PPUSH
80557: CALL_OW 115
80561: GO 80582
// ComAgressiveMove ( unit , x , y ) ;
80563: LD_VAR 0 1
80567: PPUSH
80568: LD_VAR 0 4
80572: PPUSH
80573: LD_VAR 0 5
80577: PPUSH
80578: CALL_OW 114
// end ;
80582: LD_VAR 0 3
80586: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80587: LD_INT 0
80589: PPUSH
80590: PPUSH
80591: PPUSH
// list := AreaToList ( area , 0 ) ;
80592: LD_ADDR_VAR 0 5
80596: PUSH
80597: LD_VAR 0 1
80601: PPUSH
80602: LD_INT 0
80604: PPUSH
80605: CALL_OW 517
80609: ST_TO_ADDR
// if not list then
80610: LD_VAR 0 5
80614: NOT
80615: IFFALSE 80619
// exit ;
80617: GO 80749
// if all then
80619: LD_VAR 0 2
80623: IFFALSE 80711
// begin for i := 1 to list [ 1 ] do
80625: LD_ADDR_VAR 0 4
80629: PUSH
80630: DOUBLE
80631: LD_INT 1
80633: DEC
80634: ST_TO_ADDR
80635: LD_VAR 0 5
80639: PUSH
80640: LD_INT 1
80642: ARRAY
80643: PUSH
80644: FOR_TO
80645: IFFALSE 80707
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80647: LD_ADDR_VAR 0 3
80651: PUSH
80652: LD_VAR 0 3
80656: PPUSH
80657: LD_VAR 0 3
80661: PUSH
80662: LD_INT 1
80664: PLUS
80665: PPUSH
80666: LD_VAR 0 5
80670: PUSH
80671: LD_INT 1
80673: ARRAY
80674: PUSH
80675: LD_VAR 0 4
80679: ARRAY
80680: PUSH
80681: LD_VAR 0 5
80685: PUSH
80686: LD_INT 2
80688: ARRAY
80689: PUSH
80690: LD_VAR 0 4
80694: ARRAY
80695: PUSH
80696: EMPTY
80697: LIST
80698: LIST
80699: PPUSH
80700: CALL_OW 1
80704: ST_TO_ADDR
80705: GO 80644
80707: POP
80708: POP
// exit ;
80709: GO 80749
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80711: LD_ADDR_VAR 0 3
80715: PUSH
80716: LD_VAR 0 5
80720: PUSH
80721: LD_INT 1
80723: ARRAY
80724: PUSH
80725: LD_INT 1
80727: ARRAY
80728: PUSH
80729: LD_VAR 0 5
80733: PUSH
80734: LD_INT 2
80736: ARRAY
80737: PUSH
80738: LD_INT 1
80740: ARRAY
80741: PUSH
80742: EMPTY
80743: LIST
80744: LIST
80745: PUSH
80746: EMPTY
80747: LIST
80748: ST_TO_ADDR
// end ;
80749: LD_VAR 0 3
80753: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80754: LD_INT 0
80756: PPUSH
80757: PPUSH
// list := AreaToList ( area , 0 ) ;
80758: LD_ADDR_VAR 0 4
80762: PUSH
80763: LD_VAR 0 1
80767: PPUSH
80768: LD_INT 0
80770: PPUSH
80771: CALL_OW 517
80775: ST_TO_ADDR
// if not list then
80776: LD_VAR 0 4
80780: NOT
80781: IFFALSE 80785
// exit ;
80783: GO 80826
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80785: LD_ADDR_VAR 0 3
80789: PUSH
80790: LD_VAR 0 4
80794: PUSH
80795: LD_INT 1
80797: ARRAY
80798: PUSH
80799: LD_INT 1
80801: ARRAY
80802: PUSH
80803: LD_VAR 0 4
80807: PUSH
80808: LD_INT 2
80810: ARRAY
80811: PUSH
80812: LD_INT 1
80814: ARRAY
80815: PUSH
80816: LD_VAR 0 2
80820: PUSH
80821: EMPTY
80822: LIST
80823: LIST
80824: LIST
80825: ST_TO_ADDR
// end ;
80826: LD_VAR 0 3
80830: RET
// export function First ( array ) ; begin
80831: LD_INT 0
80833: PPUSH
// if not array then
80834: LD_VAR 0 1
80838: NOT
80839: IFFALSE 80843
// exit ;
80841: GO 80857
// result := array [ 1 ] ;
80843: LD_ADDR_VAR 0 2
80847: PUSH
80848: LD_VAR 0 1
80852: PUSH
80853: LD_INT 1
80855: ARRAY
80856: ST_TO_ADDR
// end ;
80857: LD_VAR 0 2
80861: RET
// export function Last ( array ) ; begin
80862: LD_INT 0
80864: PPUSH
// if not array then
80865: LD_VAR 0 1
80869: NOT
80870: IFFALSE 80874
// exit ;
80872: GO 80890
// result := array [ array ] ;
80874: LD_ADDR_VAR 0 2
80878: PUSH
80879: LD_VAR 0 1
80883: PUSH
80884: LD_VAR 0 1
80888: ARRAY
80889: ST_TO_ADDR
// end ;
80890: LD_VAR 0 2
80894: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
80895: LD_INT 0
80897: PPUSH
80898: PPUSH
// result := [ ] ;
80899: LD_ADDR_VAR 0 5
80903: PUSH
80904: EMPTY
80905: ST_TO_ADDR
// if not array then
80906: LD_VAR 0 1
80910: NOT
80911: IFFALSE 80915
// exit ;
80913: GO 81027
// for i := 1 to array do
80915: LD_ADDR_VAR 0 6
80919: PUSH
80920: DOUBLE
80921: LD_INT 1
80923: DEC
80924: ST_TO_ADDR
80925: LD_VAR 0 1
80929: PUSH
80930: FOR_TO
80931: IFFALSE 81025
// if array [ i ] [ index ] = value then
80933: LD_VAR 0 1
80937: PUSH
80938: LD_VAR 0 6
80942: ARRAY
80943: PUSH
80944: LD_VAR 0 2
80948: ARRAY
80949: PUSH
80950: LD_VAR 0 3
80954: EQUAL
80955: IFFALSE 81023
// begin if indexColumn then
80957: LD_VAR 0 4
80961: IFFALSE 80997
// result := Join ( result , array [ i ] [ indexColumn ] ) else
80963: LD_ADDR_VAR 0 5
80967: PUSH
80968: LD_VAR 0 5
80972: PPUSH
80973: LD_VAR 0 1
80977: PUSH
80978: LD_VAR 0 6
80982: ARRAY
80983: PUSH
80984: LD_VAR 0 4
80988: ARRAY
80989: PPUSH
80990: CALL 76365 0 2
80994: ST_TO_ADDR
80995: GO 81023
// result := Join ( result , array [ i ] ) ;
80997: LD_ADDR_VAR 0 5
81001: PUSH
81002: LD_VAR 0 5
81006: PPUSH
81007: LD_VAR 0 1
81011: PUSH
81012: LD_VAR 0 6
81016: ARRAY
81017: PPUSH
81018: CALL 76365 0 2
81022: ST_TO_ADDR
// end ;
81023: GO 80930
81025: POP
81026: POP
// end ;
81027: LD_VAR 0 5
81031: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
81032: LD_INT 0
81034: PPUSH
81035: PPUSH
81036: PPUSH
// if btype = b_depot then
81037: LD_VAR 0 2
81041: PUSH
81042: LD_INT 0
81044: EQUAL
81045: IFFALSE 81057
// begin result := true ;
81047: LD_ADDR_VAR 0 3
81051: PUSH
81052: LD_INT 1
81054: ST_TO_ADDR
// exit ;
81055: GO 81173
// end ; pom := GetBase ( depot ) ;
81057: LD_ADDR_VAR 0 4
81061: PUSH
81062: LD_VAR 0 1
81066: PPUSH
81067: CALL_OW 274
81071: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
81072: LD_ADDR_VAR 0 5
81076: PUSH
81077: LD_VAR 0 2
81081: PPUSH
81082: LD_VAR 0 1
81086: PPUSH
81087: CALL_OW 248
81091: PPUSH
81092: CALL_OW 450
81096: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
81097: LD_ADDR_VAR 0 3
81101: PUSH
81102: LD_VAR 0 4
81106: PPUSH
81107: LD_INT 1
81109: PPUSH
81110: CALL_OW 275
81114: PUSH
81115: LD_VAR 0 5
81119: PUSH
81120: LD_INT 1
81122: ARRAY
81123: GREATEREQUAL
81124: PUSH
81125: LD_VAR 0 4
81129: PPUSH
81130: LD_INT 2
81132: PPUSH
81133: CALL_OW 275
81137: PUSH
81138: LD_VAR 0 5
81142: PUSH
81143: LD_INT 2
81145: ARRAY
81146: GREATEREQUAL
81147: AND
81148: PUSH
81149: LD_VAR 0 4
81153: PPUSH
81154: LD_INT 3
81156: PPUSH
81157: CALL_OW 275
81161: PUSH
81162: LD_VAR 0 5
81166: PUSH
81167: LD_INT 3
81169: ARRAY
81170: GREATEREQUAL
81171: AND
81172: ST_TO_ADDR
// end ;
81173: LD_VAR 0 3
81177: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81178: LD_INT 0
81180: PPUSH
// if not vehicles or not parkingPoint then
81181: LD_VAR 0 1
81185: NOT
81186: PUSH
81187: LD_VAR 0 2
81191: NOT
81192: OR
81193: IFFALSE 81197
// exit ;
81195: GO 81295
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81197: LD_ADDR_VAR 0 1
81201: PUSH
81202: LD_VAR 0 1
81206: PPUSH
81207: LD_INT 50
81209: PUSH
81210: EMPTY
81211: LIST
81212: PUSH
81213: LD_INT 3
81215: PUSH
81216: LD_INT 92
81218: PUSH
81219: LD_VAR 0 2
81223: PUSH
81224: LD_INT 1
81226: ARRAY
81227: PUSH
81228: LD_VAR 0 2
81232: PUSH
81233: LD_INT 2
81235: ARRAY
81236: PUSH
81237: LD_INT 8
81239: PUSH
81240: EMPTY
81241: LIST
81242: LIST
81243: LIST
81244: LIST
81245: PUSH
81246: EMPTY
81247: LIST
81248: LIST
81249: PUSH
81250: EMPTY
81251: LIST
81252: LIST
81253: PPUSH
81254: CALL_OW 72
81258: ST_TO_ADDR
// if not vehicles then
81259: LD_VAR 0 1
81263: NOT
81264: IFFALSE 81268
// exit ;
81266: GO 81295
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81268: LD_VAR 0 1
81272: PPUSH
81273: LD_VAR 0 2
81277: PUSH
81278: LD_INT 1
81280: ARRAY
81281: PPUSH
81282: LD_VAR 0 2
81286: PUSH
81287: LD_INT 2
81289: ARRAY
81290: PPUSH
81291: CALL_OW 111
// end ;
81295: LD_VAR 0 3
81299: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81300: LD_INT 0
81302: PPUSH
81303: PPUSH
81304: PPUSH
// if not side or not area then
81305: LD_VAR 0 1
81309: NOT
81310: PUSH
81311: LD_VAR 0 2
81315: NOT
81316: OR
81317: IFFALSE 81321
// exit ;
81319: GO 81440
// tmp := AreaToList ( area , 0 ) ;
81321: LD_ADDR_VAR 0 5
81325: PUSH
81326: LD_VAR 0 2
81330: PPUSH
81331: LD_INT 0
81333: PPUSH
81334: CALL_OW 517
81338: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81339: LD_ADDR_VAR 0 4
81343: PUSH
81344: DOUBLE
81345: LD_INT 1
81347: DEC
81348: ST_TO_ADDR
81349: LD_VAR 0 5
81353: PUSH
81354: LD_INT 1
81356: ARRAY
81357: PUSH
81358: FOR_TO
81359: IFFALSE 81438
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81361: LD_VAR 0 5
81365: PUSH
81366: LD_INT 1
81368: ARRAY
81369: PUSH
81370: LD_VAR 0 4
81374: ARRAY
81375: PPUSH
81376: LD_VAR 0 5
81380: PUSH
81381: LD_INT 2
81383: ARRAY
81384: PUSH
81385: LD_VAR 0 4
81389: ARRAY
81390: PPUSH
81391: CALL_OW 351
81395: IFFALSE 81436
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81397: LD_VAR 0 5
81401: PUSH
81402: LD_INT 1
81404: ARRAY
81405: PUSH
81406: LD_VAR 0 4
81410: ARRAY
81411: PPUSH
81412: LD_VAR 0 5
81416: PUSH
81417: LD_INT 2
81419: ARRAY
81420: PUSH
81421: LD_VAR 0 4
81425: ARRAY
81426: PPUSH
81427: LD_VAR 0 1
81431: PPUSH
81432: CALL_OW 244
// end ;
81436: GO 81358
81438: POP
81439: POP
// end ; end_of_file
81440: LD_VAR 0 3
81444: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81445: LD_VAR 0 1
81449: PPUSH
81450: LD_VAR 0 2
81454: PPUSH
81455: LD_VAR 0 3
81459: PPUSH
81460: LD_VAR 0 4
81464: PPUSH
81465: LD_VAR 0 5
81469: PPUSH
81470: LD_VAR 0 6
81474: PPUSH
81475: CALL 17970 0 6
// end ;
81479: PPOPN 6
81481: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81482: LD_INT 0
81484: PPUSH
// begin if not units then
81485: LD_VAR 0 1
81489: NOT
81490: IFFALSE 81494
// exit ;
81492: GO 81494
// end ;
81494: PPOPN 7
81496: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81497: CALL 17857 0 0
// end ;
81501: PPOPN 1
81503: END
