// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 34 0 0
// PrepareArabian ;
   8: CALL 1852 0 0
// PrepareAmerican ;
  12: CALL 5389 0 0
// PrepareRussian ;
  16: CALL 2237 0 0
// if debug then
  20: LD_EXP 1
  24: IFFALSE 33
// FogOff ( 2 ) ;
  26: LD_INT 2
  28: PPUSH
  29: CALL_OW 344
// end ;
  33: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall ; function Init ; begin
  34: LD_INT 0
  36: PPUSH
// debug := true ;
  37: LD_ADDR_EXP 1
  41: PUSH
  42: LD_INT 1
  44: ST_TO_ADDR
// prefix := 03_ ;
  45: LD_ADDR_EXP 2
  49: PUSH
  50: LD_STRING 03_
  52: ST_TO_ADDR
// baseConstructed := false ;
  53: LD_ADDR_EXP 3
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// labConstructed := false ;
  61: LD_ADDR_EXP 4
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  69: LD_ADDR_EXP 5
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// russianAlert := false ;
  77: LD_ADDR_EXP 8
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// activeGrishkoAI := true ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 1
  92: ST_TO_ADDR
// allowHeikeAttack := false ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// allowToPatrol := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// omicronFall := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// startAttackOnOmicron := false ;
 117: LD_ADDR_EXP 6
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 125: LD_ADDR_EXP 7
 129: PUSH
 130: LD_INT 3
 132: PUSH
 133: LD_INT 4
 135: PUSH
 136: LD_INT 5
 138: PUSH
 139: LD_INT 6
 141: PUSH
 142: LD_INT 7
 144: PUSH
 145: LD_INT 8
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: ST_TO_ADDR
// end ; end_of_file
 156: LD_VAR 0 1
 160: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 161: LD_INT 0
 163: PPUSH
 164: PPUSH
// if exist_mode then
 165: LD_VAR 0 2
 169: IFFALSE 194
// unit := CreateCharacter ( prefix & ident ) else
 171: LD_ADDR_VAR 0 5
 175: PUSH
 176: LD_VAR 0 3
 180: PUSH
 181: LD_VAR 0 1
 185: STR
 186: PPUSH
 187: CALL_OW 34
 191: ST_TO_ADDR
 192: GO 209
// unit := NewCharacter ( ident ) ;
 194: LD_ADDR_VAR 0 5
 198: PUSH
 199: LD_VAR 0 1
 203: PPUSH
 204: CALL_OW 25
 208: ST_TO_ADDR
// result := unit ;
 209: LD_ADDR_VAR 0 4
 213: PUSH
 214: LD_VAR 0 5
 218: ST_TO_ADDR
// end ;
 219: LD_VAR 0 4
 223: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 224: LD_INT 0
 226: PPUSH
// uc_side := side ;
 227: LD_ADDR_OWVAR 20
 231: PUSH
 232: LD_VAR 0 1
 236: ST_TO_ADDR
// uc_nation := nation ;
 237: LD_ADDR_OWVAR 21
 241: PUSH
 242: LD_VAR 0 2
 246: ST_TO_ADDR
// vc_chassis := chassis ;
 247: LD_ADDR_OWVAR 37
 251: PUSH
 252: LD_VAR 0 3
 256: ST_TO_ADDR
// vc_engine := engine ;
 257: LD_ADDR_OWVAR 39
 261: PUSH
 262: LD_VAR 0 4
 266: ST_TO_ADDR
// vc_control := control ;
 267: LD_ADDR_OWVAR 38
 271: PUSH
 272: LD_VAR 0 5
 276: ST_TO_ADDR
// vc_weapon := weapon ;
 277: LD_ADDR_OWVAR 40
 281: PUSH
 282: LD_VAR 0 6
 286: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 287: LD_ADDR_OWVAR 41
 291: PUSH
 292: LD_VAR 0 7
 296: ST_TO_ADDR
// result := CreateVehicle ;
 297: LD_ADDR_VAR 0 8
 301: PUSH
 302: CALL_OW 45
 306: ST_TO_ADDR
// end ;
 307: LD_VAR 0 8
 311: RET
// export function SayX ( units , ident ) ; var i ; begin
 312: LD_INT 0
 314: PPUSH
 315: PPUSH
// result := false ;
 316: LD_ADDR_VAR 0 3
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// if not units then
 324: LD_VAR 0 1
 328: NOT
 329: IFFALSE 333
// exit ;
 331: GO 387
// for i in units do
 333: LD_ADDR_VAR 0 4
 337: PUSH
 338: LD_VAR 0 1
 342: PUSH
 343: FOR_IN
 344: IFFALSE 385
// if IsOk ( i ) then
 346: LD_VAR 0 4
 350: PPUSH
 351: CALL_OW 302
 355: IFFALSE 383
// begin Say ( i , ident ) ;
 357: LD_VAR 0 4
 361: PPUSH
 362: LD_VAR 0 2
 366: PPUSH
 367: CALL_OW 88
// result := i ;
 371: LD_ADDR_VAR 0 3
 375: PUSH
 376: LD_VAR 0 4
 380: ST_TO_ADDR
// break ;
 381: GO 385
// end ;
 383: GO 343
 385: POP
 386: POP
// end ;
 387: LD_VAR 0 3
 391: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 392: LD_INT 0
 394: PPUSH
 395: PPUSH
// InitUc ;
 396: CALL_OW 18
// InitHc ;
 400: CALL_OW 19
// uc_side := 0 ;
 404: LD_ADDR_OWVAR 20
 408: PUSH
 409: LD_INT 0
 411: ST_TO_ADDR
// uc_nation := 0 ;
 412: LD_ADDR_OWVAR 21
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// for i = 1 to amount do
 420: LD_ADDR_VAR 0 4
 424: PUSH
 425: DOUBLE
 426: LD_INT 1
 428: DEC
 429: ST_TO_ADDR
 430: LD_VAR 0 2
 434: PUSH
 435: FOR_TO
 436: IFFALSE 518
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 438: LD_ADDR_OWVAR 29
 442: PUSH
 443: LD_INT 9
 445: PPUSH
 446: LD_INT 12
 448: PPUSH
 449: CALL_OW 12
 453: PUSH
 454: LD_INT 9
 456: PPUSH
 457: LD_INT 12
 459: PPUSH
 460: CALL_OW 12
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 469: LD_ADDR_OWVAR 35
 473: PUSH
 474: LD_INT 1
 476: NEG
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 12
 485: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 486: LD_INT 0
 488: PPUSH
 489: LD_INT 12
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 499: CALL_OW 44
 503: PPUSH
 504: LD_VAR 0 1
 508: PPUSH
 509: LD_INT 0
 511: PPUSH
 512: CALL_OW 49
// end ;
 516: GO 435
 518: POP
 519: POP
// InitHc ;
 520: CALL_OW 19
// end ;
 524: LD_VAR 0 3
 528: RET
// export function PrepareNature ( forest ) ; var i ; begin
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
// SpawnApeman ( forest , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 533: LD_VAR 0 1
 537: PPUSH
 538: LD_INT 6
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: LIST
 551: PUSH
 552: LD_OWVAR 67
 556: ARRAY
 557: PPUSH
 558: CALL 392 0 2
// for i := 1 to 3 do
 562: LD_ADDR_VAR 0 3
 566: PUSH
 567: DOUBLE
 568: LD_INT 1
 570: DEC
 571: ST_TO_ADDR
 572: LD_INT 3
 574: PUSH
 575: FOR_TO
 576: IFFALSE 613
// begin hc_class := 21 ;
 578: LD_ADDR_OWVAR 28
 582: PUSH
 583: LD_INT 21
 585: ST_TO_ADDR
// hc_gallery :=  ;
 586: LD_ADDR_OWVAR 33
 590: PUSH
 591: LD_STRING 
 593: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
// end ;
 611: GO 575
 613: POP
 614: POP
// for i := 1 to 2 do
 615: LD_ADDR_VAR 0 3
 619: PUSH
 620: DOUBLE
 621: LD_INT 1
 623: DEC
 624: ST_TO_ADDR
 625: LD_INT 2
 627: PUSH
 628: FOR_TO
 629: IFFALSE 666
// begin hc_class := 18 ;
 631: LD_ADDR_OWVAR 28
 635: PUSH
 636: LD_INT 18
 638: ST_TO_ADDR
// hc_gallery :=  ;
 639: LD_ADDR_OWVAR 33
 643: PUSH
 644: LD_STRING 
 646: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 647: CALL_OW 44
 651: PPUSH
 652: LD_VAR 0 1
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL_OW 49
// end ;
 664: GO 628
 666: POP
 667: POP
// for i := 1 to 2 do
 668: LD_ADDR_VAR 0 3
 672: PUSH
 673: DOUBLE
 674: LD_INT 1
 676: DEC
 677: ST_TO_ADDR
 678: LD_INT 2
 680: PUSH
 681: FOR_TO
 682: IFFALSE 719
// begin hc_class := 13 ;
 684: LD_ADDR_OWVAR 28
 688: PUSH
 689: LD_INT 13
 691: ST_TO_ADDR
// hc_gallery :=  ;
 692: LD_ADDR_OWVAR 33
 696: PUSH
 697: LD_STRING 
 699: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 700: CALL_OW 44
 704: PPUSH
 705: LD_VAR 0 1
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 49
// end ;
 717: GO 681
 719: POP
 720: POP
// end ;
 721: LD_VAR 0 2
 725: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 726: LD_INT 0
 728: PPUSH
 729: PPUSH
 730: PPUSH
// if not observer or not unit then
 731: LD_VAR 0 1
 735: NOT
 736: PUSH
 737: LD_VAR 0 2
 741: NOT
 742: OR
 743: IFFALSE 747
// exit ;
 745: GO 795
// if not See ( GetSide ( observer ) , unit ) then
 747: LD_VAR 0 1
 751: PPUSH
 752: CALL_OW 255
 756: PPUSH
 757: LD_VAR 0 2
 761: PPUSH
 762: CALL_OW 292
 766: NOT
 767: IFFALSE 771
// exit ;
 769: GO 795
// result := GetDistUnits ( observer , unit ) < 12 ;
 771: LD_ADDR_VAR 0 3
 775: PUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_VAR 0 2
 785: PPUSH
 786: CALL_OW 296
 790: PUSH
 791: LD_INT 12
 793: LESS
 794: ST_TO_ADDR
// end ;
 795: LD_VAR 0 3
 799: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 800: LD_INT 0
 802: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 803: LD_VAR 0 2
 807: PUSH
 808: LD_INT 1
 810: ARRAY
 811: PPUSH
 812: LD_VAR 0 2
 816: PUSH
 817: LD_INT 2
 819: ARRAY
 820: PPUSH
 821: CALL_OW 488
 825: PUSH
 826: LD_VAR 0 2
 830: PUSH
 831: LD_INT 1
 833: ARRAY
 834: PPUSH
 835: LD_VAR 0 2
 839: PUSH
 840: LD_INT 2
 842: ARRAY
 843: PPUSH
 844: CALL_OW 428
 848: PUSH
 849: LD_INT 0
 851: EQUAL
 852: AND
 853: IFFALSE 887
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 855: LD_VAR 0 1
 859: PPUSH
 860: LD_VAR 0 2
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: LD_VAR 0 2
 873: PUSH
 874: LD_INT 2
 876: ARRAY
 877: PPUSH
 878: LD_VAR 0 3
 882: PPUSH
 883: CALL_OW 48
// end ;
 887: LD_VAR 0 4
 891: RET
// export function Video ( mode ) ; begin
 892: LD_INT 0
 894: PPUSH
// ingame_video = mode ;
 895: LD_ADDR_OWVAR 52
 899: PUSH
 900: LD_VAR 0 1
 904: ST_TO_ADDR
// interface_hidden = mode ;
 905: LD_ADDR_OWVAR 54
 909: PUSH
 910: LD_VAR 0 1
 914: ST_TO_ADDR
// end ;
 915: LD_VAR 0 2
 919: RET
// export function ReverseArray ( array ) ; var i ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
// if not array then
 924: LD_VAR 0 1
 928: NOT
 929: IFFALSE 933
// exit ;
 931: GO 991
// result := [ ] ;
 933: LD_ADDR_VAR 0 2
 937: PUSH
 938: EMPTY
 939: ST_TO_ADDR
// for i := 1 to array do
 940: LD_ADDR_VAR 0 3
 944: PUSH
 945: DOUBLE
 946: LD_INT 1
 948: DEC
 949: ST_TO_ADDR
 950: LD_VAR 0 1
 954: PUSH
 955: FOR_TO
 956: IFFALSE 989
// result := Insert ( result , 1 , array [ i ] ) ;
 958: LD_ADDR_VAR 0 2
 962: PUSH
 963: LD_VAR 0 2
 967: PPUSH
 968: LD_INT 1
 970: PPUSH
 971: LD_VAR 0 1
 975: PUSH
 976: LD_VAR 0 3
 980: ARRAY
 981: PPUSH
 982: CALL_OW 2
 986: ST_TO_ADDR
 987: GO 955
 989: POP
 990: POP
// end ;
 991: LD_VAR 0 2
 995: RET
// export function ComExit ( unit ) ; begin
 996: LD_INT 0
 998: PPUSH
// result := IsInUnit ( unit ) ;
 999: LD_ADDR_VAR 0 2
1003: PUSH
1004: LD_VAR 0 1
1008: PPUSH
1009: CALL_OW 310
1013: ST_TO_ADDR
// if not result then
1014: LD_VAR 0 2
1018: NOT
1019: IFFALSE 1023
// exit ;
1021: GO 1058
// if GetType ( result ) = unit_vehicle then
1023: LD_VAR 0 2
1027: PPUSH
1028: CALL_OW 247
1032: PUSH
1033: LD_INT 2
1035: EQUAL
1036: IFFALSE 1049
// ComExitVehicle ( unit ) else
1038: LD_VAR 0 1
1042: PPUSH
1043: CALL_OW 121
1047: GO 1058
// ComExitBuilding ( unit ) ;
1049: LD_VAR 0 1
1053: PPUSH
1054: CALL_OW 122
// end ;
1058: LD_VAR 0 2
1062: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1063: LD_INT 0
1065: PPUSH
1066: PPUSH
// if not side or not nation then
1067: LD_VAR 0 1
1071: NOT
1072: PUSH
1073: LD_VAR 0 2
1077: NOT
1078: OR
1079: IFFALSE 1083
// exit ;
1081: GO 1847
// case nation of nation_american :
1083: LD_VAR 0 2
1087: PUSH
1088: LD_INT 1
1090: DOUBLE
1091: EQUAL
1092: IFTRUE 1096
1094: GO 1310
1096: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1097: LD_ADDR_VAR 0 4
1101: PUSH
1102: LD_INT 35
1104: PUSH
1105: LD_INT 45
1107: PUSH
1108: LD_INT 46
1110: PUSH
1111: LD_INT 47
1113: PUSH
1114: LD_INT 82
1116: PUSH
1117: LD_INT 83
1119: PUSH
1120: LD_INT 84
1122: PUSH
1123: LD_INT 85
1125: PUSH
1126: LD_INT 86
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 2
1134: PUSH
1135: LD_INT 6
1137: PUSH
1138: LD_INT 15
1140: PUSH
1141: LD_INT 16
1143: PUSH
1144: LD_INT 7
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: LD_INT 13
1152: PUSH
1153: LD_INT 10
1155: PUSH
1156: LD_INT 14
1158: PUSH
1159: LD_INT 20
1161: PUSH
1162: LD_INT 21
1164: PUSH
1165: LD_INT 22
1167: PUSH
1168: LD_INT 25
1170: PUSH
1171: LD_INT 32
1173: PUSH
1174: LD_INT 27
1176: PUSH
1177: LD_INT 36
1179: PUSH
1180: LD_INT 69
1182: PUSH
1183: LD_INT 39
1185: PUSH
1186: LD_INT 34
1188: PUSH
1189: LD_INT 40
1191: PUSH
1192: LD_INT 48
1194: PUSH
1195: LD_INT 49
1197: PUSH
1198: LD_INT 50
1200: PUSH
1201: LD_INT 51
1203: PUSH
1204: LD_INT 52
1206: PUSH
1207: LD_INT 53
1209: PUSH
1210: LD_INT 54
1212: PUSH
1213: LD_INT 55
1215: PUSH
1216: LD_INT 56
1218: PUSH
1219: LD_INT 57
1221: PUSH
1222: LD_INT 58
1224: PUSH
1225: LD_INT 59
1227: PUSH
1228: LD_INT 60
1230: PUSH
1231: LD_INT 61
1233: PUSH
1234: LD_INT 62
1236: PUSH
1237: LD_INT 80
1239: PUSH
1240: LD_INT 82
1242: PUSH
1243: LD_INT 83
1245: PUSH
1246: LD_INT 84
1248: PUSH
1249: LD_INT 85
1251: PUSH
1252: LD_INT 86
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: ST_TO_ADDR
1308: GO 1771
1310: LD_INT 2
1312: DOUBLE
1313: EQUAL
1314: IFTRUE 1318
1316: GO 1540
1318: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1319: LD_ADDR_VAR 0 4
1323: PUSH
1324: LD_INT 35
1326: PUSH
1327: LD_INT 45
1329: PUSH
1330: LD_INT 46
1332: PUSH
1333: LD_INT 47
1335: PUSH
1336: LD_INT 82
1338: PUSH
1339: LD_INT 83
1341: PUSH
1342: LD_INT 84
1344: PUSH
1345: LD_INT 85
1347: PUSH
1348: LD_INT 87
1350: PUSH
1351: LD_INT 70
1353: PUSH
1354: LD_INT 1
1356: PUSH
1357: LD_INT 11
1359: PUSH
1360: LD_INT 3
1362: PUSH
1363: LD_INT 4
1365: PUSH
1366: LD_INT 5
1368: PUSH
1369: LD_INT 6
1371: PUSH
1372: LD_INT 15
1374: PUSH
1375: LD_INT 18
1377: PUSH
1378: LD_INT 7
1380: PUSH
1381: LD_INT 17
1383: PUSH
1384: LD_INT 8
1386: PUSH
1387: LD_INT 20
1389: PUSH
1390: LD_INT 21
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_INT 72
1398: PUSH
1399: LD_INT 26
1401: PUSH
1402: LD_INT 69
1404: PUSH
1405: LD_INT 39
1407: PUSH
1408: LD_INT 40
1410: PUSH
1411: LD_INT 41
1413: PUSH
1414: LD_INT 42
1416: PUSH
1417: LD_INT 43
1419: PUSH
1420: LD_INT 48
1422: PUSH
1423: LD_INT 49
1425: PUSH
1426: LD_INT 50
1428: PUSH
1429: LD_INT 51
1431: PUSH
1432: LD_INT 52
1434: PUSH
1435: LD_INT 53
1437: PUSH
1438: LD_INT 54
1440: PUSH
1441: LD_INT 55
1443: PUSH
1444: LD_INT 56
1446: PUSH
1447: LD_INT 60
1449: PUSH
1450: LD_INT 61
1452: PUSH
1453: LD_INT 62
1455: PUSH
1456: LD_INT 66
1458: PUSH
1459: LD_INT 67
1461: PUSH
1462: LD_INT 68
1464: PUSH
1465: LD_INT 81
1467: PUSH
1468: LD_INT 82
1470: PUSH
1471: LD_INT 83
1473: PUSH
1474: LD_INT 84
1476: PUSH
1477: LD_INT 85
1479: PUSH
1480: LD_INT 87
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: ST_TO_ADDR
1538: GO 1771
1540: LD_INT 3
1542: DOUBLE
1543: EQUAL
1544: IFTRUE 1548
1546: GO 1770
1548: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1549: LD_ADDR_VAR 0 4
1553: PUSH
1554: LD_INT 46
1556: PUSH
1557: LD_INT 47
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 82
1568: PUSH
1569: LD_INT 83
1571: PUSH
1572: LD_INT 84
1574: PUSH
1575: LD_INT 85
1577: PUSH
1578: LD_INT 86
1580: PUSH
1581: LD_INT 11
1583: PUSH
1584: LD_INT 9
1586: PUSH
1587: LD_INT 20
1589: PUSH
1590: LD_INT 19
1592: PUSH
1593: LD_INT 21
1595: PUSH
1596: LD_INT 24
1598: PUSH
1599: LD_INT 22
1601: PUSH
1602: LD_INT 25
1604: PUSH
1605: LD_INT 28
1607: PUSH
1608: LD_INT 29
1610: PUSH
1611: LD_INT 30
1613: PUSH
1614: LD_INT 31
1616: PUSH
1617: LD_INT 37
1619: PUSH
1620: LD_INT 38
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 27
1628: PUSH
1629: LD_INT 33
1631: PUSH
1632: LD_INT 69
1634: PUSH
1635: LD_INT 39
1637: PUSH
1638: LD_INT 34
1640: PUSH
1641: LD_INT 40
1643: PUSH
1644: LD_INT 71
1646: PUSH
1647: LD_INT 23
1649: PUSH
1650: LD_INT 44
1652: PUSH
1653: LD_INT 48
1655: PUSH
1656: LD_INT 49
1658: PUSH
1659: LD_INT 50
1661: PUSH
1662: LD_INT 51
1664: PUSH
1665: LD_INT 52
1667: PUSH
1668: LD_INT 53
1670: PUSH
1671: LD_INT 54
1673: PUSH
1674: LD_INT 55
1676: PUSH
1677: LD_INT 56
1679: PUSH
1680: LD_INT 57
1682: PUSH
1683: LD_INT 58
1685: PUSH
1686: LD_INT 59
1688: PUSH
1689: LD_INT 63
1691: PUSH
1692: LD_INT 64
1694: PUSH
1695: LD_INT 65
1697: PUSH
1698: LD_INT 82
1700: PUSH
1701: LD_INT 83
1703: PUSH
1704: LD_INT 84
1706: PUSH
1707: LD_INT 85
1709: PUSH
1710: LD_INT 86
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: ST_TO_ADDR
1768: GO 1771
1770: POP
// if state > - 1 and state < 3 then
1771: LD_VAR 0 3
1775: PUSH
1776: LD_INT 1
1778: NEG
1779: GREATER
1780: PUSH
1781: LD_VAR 0 3
1785: PUSH
1786: LD_INT 3
1788: LESS
1789: AND
1790: IFFALSE 1847
// for i in result do
1792: LD_ADDR_VAR 0 5
1796: PUSH
1797: LD_VAR 0 4
1801: PUSH
1802: FOR_IN
1803: IFFALSE 1845
// if GetTech ( i , side ) <> state then
1805: LD_VAR 0 5
1809: PPUSH
1810: LD_VAR 0 1
1814: PPUSH
1815: CALL_OW 321
1819: PUSH
1820: LD_VAR 0 3
1824: NONEQUAL
1825: IFFALSE 1843
// result := result diff i ;
1827: LD_ADDR_VAR 0 4
1831: PUSH
1832: LD_VAR 0 4
1836: PUSH
1837: LD_VAR 0 5
1841: DIFF
1842: ST_TO_ADDR
1843: GO 1802
1845: POP
1846: POP
// end ; end_of_file
1847: LD_VAR 0 4
1851: RET
// export Heike , Givi , Mike , Kamil , Kaia , Sophia , Markov , Omar , Ibrahim , Shariff , Kurt , Aviradze , heikeSecondSquad ; export function PrepareArabian ; var i ; begin
1852: LD_INT 0
1854: PPUSH
1855: PPUSH
// uc_side := 2 ;
1856: LD_ADDR_OWVAR 20
1860: PUSH
1861: LD_INT 2
1863: ST_TO_ADDR
// uc_nation := 2 ;
1864: LD_ADDR_OWVAR 21
1868: PUSH
1869: LD_INT 2
1871: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1872: LD_ADDR_EXP 13
1876: PUSH
1877: LD_STRING Heike
1879: PPUSH
1880: LD_EXP 1
1884: NOT
1885: PPUSH
1886: LD_EXP 2
1890: PPUSH
1891: CALL 161 0 3
1895: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1896: LD_ADDR_EXP 21
1900: PUSH
1901: LD_STRING Ibrahim
1903: PPUSH
1904: LD_EXP 1
1908: NOT
1909: PPUSH
1910: LD_EXP 2
1914: PPUSH
1915: CALL 161 0 3
1919: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1920: LD_ADDR_EXP 14
1924: PUSH
1925: LD_STRING Givi
1927: PPUSH
1928: LD_EXP 1
1932: NOT
1933: PPUSH
1934: LD_EXP 2
1938: PPUSH
1939: CALL 161 0 3
1943: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1944: LD_ADDR_EXP 16
1948: PUSH
1949: LD_STRING Kamil
1951: PPUSH
1952: LD_EXP 1
1956: NOT
1957: PPUSH
1958: LD_EXP 2
1962: PPUSH
1963: CALL 161 0 3
1967: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1968: LD_ADDR_EXP 17
1972: PUSH
1973: LD_STRING Kaia
1975: PPUSH
1976: LD_EXP 1
1980: NOT
1981: PPUSH
1982: LD_EXP 2
1986: PPUSH
1987: CALL 161 0 3
1991: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1992: LD_ADDR_EXP 18
1996: PUSH
1997: LD_STRING Sophia
1999: PPUSH
2000: LD_EXP 1
2004: NOT
2005: PPUSH
2006: LD_EXP 2
2010: PPUSH
2011: CALL 161 0 3
2015: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2016: LD_ADDR_EXP 19
2020: PUSH
2021: LD_STRING Markov
2023: PPUSH
2024: LD_EXP 1
2028: NOT
2029: PPUSH
2030: LD_EXP 2
2034: PPUSH
2035: CALL 161 0 3
2039: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2040: LD_ADDR_EXP 24
2044: PUSH
2045: LD_STRING Aviradze
2047: PPUSH
2048: LD_EXP 1
2052: NOT
2053: PPUSH
2054: LD_EXP 2
2058: PPUSH
2059: CALL 161 0 3
2063: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2064: LD_ADDR_EXP 25
2068: PUSH
2069: LD_STRING 03_others
2071: PPUSH
2072: CALL_OW 31
2076: ST_TO_ADDR
// uc_side := 5 ;
2077: LD_ADDR_OWVAR 20
2081: PUSH
2082: LD_INT 5
2084: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2085: LD_ADDR_EXP 20
2089: PUSH
2090: LD_STRING Omar
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: LD_STRING 
2098: PPUSH
2099: CALL 161 0 3
2103: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2104: LD_ADDR_EXP 23
2108: PUSH
2109: LD_STRING Kurt
2111: PPUSH
2112: LD_INT 0
2114: PPUSH
2115: LD_STRING 
2117: PPUSH
2118: CALL 161 0 3
2122: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2123: LD_ADDR_EXP 15
2127: PUSH
2128: LD_STRING Mike
2130: PPUSH
2131: LD_EXP 1
2135: NOT
2136: PPUSH
2137: LD_EXP 2
2141: PPUSH
2142: CALL 161 0 3
2146: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2147: LD_ADDR_EXP 22
2151: PUSH
2152: LD_STRING Abdul
2154: PPUSH
2155: LD_INT 0
2157: PPUSH
2158: LD_STRING 
2160: PPUSH
2161: CALL 161 0 3
2165: ST_TO_ADDR
// if Mike then
2166: LD_EXP 15
2170: IFFALSE 2193
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2172: LD_EXP 15
2176: PPUSH
2177: LD_INT 142
2179: PPUSH
2180: LD_INT 63
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2193: LD_EXP 23
2197: PPUSH
2198: LD_INT 142
2200: PPUSH
2201: LD_INT 63
2203: PPUSH
2204: LD_INT 3
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2214: LD_EXP 23
2218: PUSH
2219: LD_EXP 15
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PPUSH
2228: CALL_OW 140
// end ; end_of_file
2232: LD_VAR 0 1
2236: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2237: LD_INT 0
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
// SetBName ( kirov , kirov ) ;
2245: LD_INT 71
2247: PPUSH
2248: LD_STRING kirov
2250: PPUSH
2251: CALL_OW 500
// SetBName ( beria , beria ) ;
2255: LD_INT 106
2257: PPUSH
2258: LD_STRING beria
2260: PPUSH
2261: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2265: LD_INT 112
2267: PPUSH
2268: LD_STRING kagan
2270: PPUSH
2271: CALL_OW 500
// uc_side := 6 ;
2275: LD_ADDR_OWVAR 20
2279: PUSH
2280: LD_INT 6
2282: ST_TO_ADDR
// uc_nation := 3 ;
2283: LD_ADDR_OWVAR 21
2287: PUSH
2288: LD_INT 3
2290: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2291: LD_ADDR_VAR 0 5
2295: PUSH
2296: LD_INT 22
2298: PUSH
2299: LD_INT 6
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 30
2308: PUSH
2309: LD_INT 5
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PPUSH
2320: CALL_OW 69
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2329: LD_ADDR_VAR 0 4
2333: PUSH
2334: LD_INT 22
2336: PUSH
2337: LD_INT 6
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 30
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: PPUSH
2358: CALL_OW 69
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2367: LD_ADDR_EXP 30
2371: PUSH
2372: EMPTY
2373: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2374: LD_ADDR_EXP 31
2378: PUSH
2379: EMPTY
2380: ST_TO_ADDR
// russianPatrol := [ ] ;
2381: LD_ADDR_EXP 33
2385: PUSH
2386: EMPTY
2387: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2388: LD_ADDR_EXP 26
2392: PUSH
2393: LD_STRING Kurin
2395: PPUSH
2396: LD_INT 0
2398: PPUSH
2399: LD_STRING 
2401: PPUSH
2402: CALL 161 0 3
2406: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2407: LD_EXP 26
2411: PPUSH
2412: LD_INT 71
2414: PPUSH
2415: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2419: LD_ADDR_EXP 28
2423: PUSH
2424: LD_STRING Popov
2426: PPUSH
2427: LD_INT 0
2429: PPUSH
2430: LD_STRING 
2432: PPUSH
2433: CALL 161 0 3
2437: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2438: LD_EXP 28
2442: PPUSH
2443: LD_INT 71
2445: PPUSH
2446: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2450: LD_ADDR_EXP 27
2454: PUSH
2455: LD_STRING Grishko
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: LD_STRING 
2463: PPUSH
2464: CALL 161 0 3
2468: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2469: LD_EXP 27
2473: PPUSH
2474: LD_INT 207
2476: PPUSH
2477: LD_INT 106
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2487: LD_EXP 27
2491: PPUSH
2492: LD_INT 209
2494: PPUSH
2495: LD_INT 106
2497: PPUSH
2498: CALL_OW 118
// for i := 1 to 2 do
2502: LD_ADDR_VAR 0 2
2506: PUSH
2507: DOUBLE
2508: LD_INT 1
2510: DEC
2511: ST_TO_ADDR
2512: LD_INT 2
2514: PUSH
2515: FOR_TO
2516: IFFALSE 2571
// begin PrepareHuman ( false , 2 , 2 ) ;
2518: LD_INT 0
2520: PPUSH
2521: LD_INT 2
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: CALL_OW 380
// un := CreateHuman ;
2531: LD_ADDR_VAR 0 3
2535: PUSH
2536: CALL_OW 44
2540: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2541: LD_VAR 0 3
2545: PPUSH
2546: LD_INT 71
2548: PPUSH
2549: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2553: LD_ADDR_EXP 30
2557: PUSH
2558: LD_EXP 30
2562: PUSH
2563: LD_VAR 0 3
2567: UNION
2568: ST_TO_ADDR
// end ;
2569: GO 2515
2571: POP
2572: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
2573: LD_ADDR_VAR 0 2
2577: PUSH
2578: DOUBLE
2579: LD_INT 1
2581: DEC
2582: ST_TO_ADDR
2583: LD_INT 5
2585: PUSH
2586: LD_INT 6
2588: PUSH
2589: LD_INT 6
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_OWVAR 67
2601: ARRAY
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2678
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
2606: LD_INT 0
2608: PPUSH
2609: LD_INT 1
2611: PPUSH
2612: LD_INT 2
2614: PUSH
2615: LD_INT 3
2617: PUSH
2618: LD_INT 4
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 380
// un := CreateHuman ;
2636: LD_ADDR_VAR 0 3
2640: PUSH
2641: CALL_OW 44
2645: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2646: LD_VAR 0 3
2650: PPUSH
2651: LD_VAR 0 5
2655: PPUSH
2656: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2660: LD_ADDR_EXP 30
2664: PUSH
2665: LD_EXP 30
2669: PUSH
2670: LD_VAR 0 3
2674: UNION
2675: ST_TO_ADDR
// end ;
2676: GO 2603
2678: POP
2679: POP
// for i := 1 to 3 do
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: DOUBLE
2686: LD_INT 1
2688: DEC
2689: ST_TO_ADDR
2690: LD_INT 3
2692: PUSH
2693: FOR_TO
2694: IFFALSE 2749
// begin PrepareHuman ( false , 3 , 3 ) ;
2696: LD_INT 0
2698: PPUSH
2699: LD_INT 3
2701: PPUSH
2702: LD_INT 3
2704: PPUSH
2705: CALL_OW 380
// un := CreateHuman ;
2709: LD_ADDR_VAR 0 3
2713: PUSH
2714: CALL_OW 44
2718: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2719: LD_VAR 0 3
2723: PPUSH
2724: LD_INT 92
2726: PPUSH
2727: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2731: LD_ADDR_EXP 30
2735: PUSH
2736: LD_EXP 30
2740: PUSH
2741: LD_VAR 0 3
2745: UNION
2746: ST_TO_ADDR
// end ;
2747: GO 2693
2749: POP
2750: POP
// for i := 1 to 2 do
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: DOUBLE
2757: LD_INT 1
2759: DEC
2760: ST_TO_ADDR
2761: LD_INT 2
2763: PUSH
2764: FOR_TO
2765: IFFALSE 2820
// begin PrepareHuman ( false , 4 , 3 ) ;
2767: LD_INT 0
2769: PPUSH
2770: LD_INT 4
2772: PPUSH
2773: LD_INT 3
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_INT 83
2797: PPUSH
2798: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2802: LD_ADDR_EXP 30
2806: PUSH
2807: LD_EXP 30
2811: PUSH
2812: LD_VAR 0 3
2816: UNION
2817: ST_TO_ADDR
// end ;
2818: GO 2764
2820: POP
2821: POP
// for i := 1 to 3 do
2822: LD_ADDR_VAR 0 2
2826: PUSH
2827: DOUBLE
2828: LD_INT 1
2830: DEC
2831: ST_TO_ADDR
2832: LD_INT 3
2834: PUSH
2835: FOR_TO
2836: IFFALSE 2893
// begin PrepareHuman ( false , 1 , 2 ) ;
2838: LD_INT 0
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_INT 2
2846: PPUSH
2847: CALL_OW 380
// un := CreateHuman ;
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: CALL_OW 44
2860: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_VAR 0 4
2870: PPUSH
2871: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
2875: LD_ADDR_EXP 32
2879: PUSH
2880: LD_EXP 32
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2835
2893: POP
2894: POP
// russianCargo := [ ] ;
2895: LD_ADDR_EXP 35
2899: PUSH
2900: EMPTY
2901: ST_TO_ADDR
// for i := 1 to 2 do
2902: LD_ADDR_VAR 0 2
2906: PUSH
2907: DOUBLE
2908: LD_INT 1
2910: DEC
2911: ST_TO_ADDR
2912: LD_INT 2
2914: PUSH
2915: FOR_TO
2916: IFFALSE 3048
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2918: LD_INT 6
2920: PPUSH
2921: LD_INT 3
2923: PPUSH
2924: LD_INT 21
2926: PPUSH
2927: LD_INT 1
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 51
2935: PPUSH
2936: LD_INT 100
2938: PPUSH
2939: CALL 224 0 7
// un := CreateVehicle ;
2943: LD_ADDR_VAR 0 3
2947: PUSH
2948: CALL_OW 45
2952: ST_TO_ADDR
// russianCargo := russianCargo union un ;
2953: LD_ADDR_EXP 35
2957: PUSH
2958: LD_EXP 35
2962: PUSH
2963: LD_VAR 0 3
2967: UNION
2968: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
2969: LD_VAR 0 3
2973: PPUSH
2974: LD_INT 2
2976: PPUSH
2977: LD_INT 100
2979: PPUSH
2980: CALL_OW 290
// SetDir ( un , 4 ) ;
2984: LD_VAR 0 3
2988: PPUSH
2989: LD_INT 4
2991: PPUSH
2992: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 147
3003: PPUSH
3004: LD_INT 103
3006: PPUSH
3007: LD_INT 4
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3017: LD_INT 0
3019: PPUSH
3020: LD_INT 1
3022: PPUSH
3023: LD_OWVAR 67
3027: PPUSH
3028: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3032: CALL_OW 44
3036: PPUSH
3037: LD_VAR 0 3
3041: PPUSH
3042: CALL_OW 52
// end ;
3046: GO 2915
3048: POP
3049: POP
// uc_side := 3 ;
3050: LD_ADDR_OWVAR 20
3054: PUSH
3055: LD_INT 3
3057: ST_TO_ADDR
// for i := 1 to 2 do
3058: LD_ADDR_VAR 0 2
3062: PUSH
3063: DOUBLE
3064: LD_INT 1
3066: DEC
3067: ST_TO_ADDR
3068: LD_INT 2
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3165
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3074: LD_INT 0
3076: PPUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_OWVAR 67
3084: PUSH
3085: LD_INT 1
3087: PLUS
3088: PPUSH
3089: CALL_OW 380
// un := CreateHuman ;
3093: LD_ADDR_VAR 0 3
3097: PUSH
3098: CALL_OW 44
3102: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 3
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 30
3120: PUSH
3121: LD_INT 32
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: PUSH
3137: LD_VAR 0 2
3141: ARRAY
3142: PPUSH
3143: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3147: LD_ADDR_EXP 31
3151: PUSH
3152: LD_EXP 31
3156: PUSH
3157: LD_VAR 0 3
3161: UNION
3162: ST_TO_ADDR
// end ;
3163: GO 3071
3165: POP
3166: POP
// for i := 1 to 2 do
3167: LD_ADDR_VAR 0 2
3171: PUSH
3172: DOUBLE
3173: LD_INT 1
3175: DEC
3176: ST_TO_ADDR
3177: LD_INT 2
3179: PUSH
3180: FOR_TO
3181: IFFALSE 3272
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_OWVAR 67
3193: PUSH
3194: LD_INT 1
3196: PLUS
3197: PPUSH
3198: CALL_OW 380
// un := CreateHuman ;
3202: LD_ADDR_VAR 0 3
3206: PUSH
3207: CALL_OW 44
3211: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3212: LD_VAR 0 3
3216: PPUSH
3217: LD_INT 22
3219: PUSH
3220: LD_INT 3
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 30
3229: PUSH
3230: LD_INT 5
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: PPUSH
3241: CALL_OW 69
3245: PUSH
3246: LD_INT 1
3248: ARRAY
3249: PPUSH
3250: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3254: LD_ADDR_EXP 31
3258: PUSH
3259: LD_EXP 31
3263: PUSH
3264: LD_VAR 0 3
3268: UNION
3269: ST_TO_ADDR
// end ;
3270: GO 3180
3272: POP
3273: POP
// for i := 1 to 2 do
3274: LD_ADDR_VAR 0 2
3278: PUSH
3279: DOUBLE
3280: LD_INT 1
3282: DEC
3283: ST_TO_ADDR
3284: LD_INT 2
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3375
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3290: LD_INT 0
3292: PPUSH
3293: LD_INT 4
3295: PPUSH
3296: LD_OWVAR 67
3300: PPUSH
3301: CALL_OW 380
// un := CreateHuman ;
3305: LD_ADDR_VAR 0 3
3309: PUSH
3310: CALL_OW 44
3314: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3315: LD_VAR 0 3
3319: PPUSH
3320: LD_INT 22
3322: PUSH
3323: LD_INT 3
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PUSH
3330: LD_INT 30
3332: PUSH
3333: LD_INT 7
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PPUSH
3344: CALL_OW 69
3348: PUSH
3349: LD_INT 1
3351: ARRAY
3352: PPUSH
3353: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3357: LD_ADDR_EXP 31
3361: PUSH
3362: LD_EXP 31
3366: PUSH
3367: LD_VAR 0 3
3371: UNION
3372: ST_TO_ADDR
// end ;
3373: GO 3287
3375: POP
3376: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3377: LD_INT 0
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: LD_OWVAR 67
3387: PPUSH
3388: CALL_OW 380
// un := CreateHuman ;
3392: LD_ADDR_VAR 0 3
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3402: LD_VAR 0 3
3406: PPUSH
3407: LD_INT 106
3409: PPUSH
3410: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3414: LD_ADDR_EXP 31
3418: PUSH
3419: LD_EXP 31
3423: PUSH
3424: LD_VAR 0 3
3428: UNION
3429: ST_TO_ADDR
// for i := 1 to 3 do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 3
3442: PUSH
3443: FOR_TO
3444: IFFALSE 3571
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3446: LD_ADDR_VAR 0 6
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 30
3463: PUSH
3464: LD_INT 31
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: PUSH
3480: LD_VAR 0 2
3484: ARRAY
3485: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 1
3491: PPUSH
3492: LD_OWVAR 67
3496: PPUSH
3497: CALL_OW 380
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) - 3 * - 1 ) ;
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_VAR 0 6
3520: PPUSH
3521: CALL_OW 254
3525: PUSH
3526: LD_INT 3
3528: PUSH
3529: LD_INT 1
3531: NEG
3532: MUL
3533: MINUS
3534: PPUSH
3535: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3539: LD_VAR 0 3
3543: PPUSH
3544: LD_VAR 0 6
3548: PPUSH
3549: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3553: LD_ADDR_EXP 31
3557: PUSH
3558: LD_EXP 31
3562: PUSH
3563: LD_VAR 0 3
3567: UNION
3568: ST_TO_ADDR
// end ;
3569: GO 3443
3571: POP
3572: POP
// russianOmicronAttackers := [ ] ;
3573: LD_ADDR_EXP 34
3577: PUSH
3578: EMPTY
3579: ST_TO_ADDR
// for i := 1 to 6 do
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: DOUBLE
3586: LD_INT 1
3588: DEC
3589: ST_TO_ADDR
3590: LD_INT 6
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3818
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3596: LD_INT 3
3598: PPUSH
3599: LD_INT 3
3601: PPUSH
3602: LD_INT 21
3604: PUSH
3605: LD_INT 23
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_VAR 0 2
3616: PUSH
3617: LD_INT 2
3619: MOD
3620: PUSH
3621: LD_INT 1
3623: PLUS
3624: ARRAY
3625: PPUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_INT 43
3634: PUSH
3635: LD_INT 44
3637: PUSH
3638: LD_INT 42
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_VAR 0 2
3650: PUSH
3651: LD_INT 3
3653: MOD
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: ARRAY
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL 224 0 7
// un := CreateVehicle ;
3667: LD_ADDR_VAR 0 3
3671: PUSH
3672: CALL_OW 45
3676: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: LD_INT 0
3684: PUSH
3685: LD_INT 5
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 1
3694: PPUSH
3695: LD_INT 2
3697: PPUSH
3698: CALL_OW 12
3702: ARRAY
3703: PPUSH
3704: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3708: LD_ADDR_EXP 34
3712: PUSH
3713: LD_EXP 34
3717: PUSH
3718: LD_VAR 0 3
3722: UNION
3723: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3724: LD_VAR 0 3
3728: PPUSH
3729: LD_INT 127
3731: PPUSH
3732: LD_INT 89
3734: PPUSH
3735: LD_INT 7
3737: PPUSH
3738: LD_INT 0
3740: PPUSH
3741: CALL_OW 50
// uc_side := 3 ;
3745: LD_ADDR_OWVAR 20
3749: PUSH
3750: LD_INT 3
3752: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
3753: LD_INT 0
3755: PPUSH
3756: LD_INT 3
3758: PPUSH
3759: LD_INT 3
3761: PPUSH
3762: CALL_OW 380
// un := CreateHuman ;
3766: LD_ADDR_VAR 0 3
3770: PUSH
3771: CALL_OW 44
3775: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
3776: LD_ADDR_EXP 34
3780: PUSH
3781: LD_EXP 34
3785: PUSH
3786: LD_VAR 0 3
3790: UNION
3791: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
3792: LD_VAR 0 3
3796: PPUSH
3797: LD_EXP 34
3801: PUSH
3802: LD_EXP 34
3806: PUSH
3807: LD_INT 1
3809: MINUS
3810: ARRAY
3811: PPUSH
3812: CALL_OW 52
// end ;
3816: GO 3593
3818: POP
3819: POP
// for i := 1 to 3 do
3820: LD_ADDR_VAR 0 2
3824: PUSH
3825: DOUBLE
3826: LD_INT 1
3828: DEC
3829: ST_TO_ADDR
3830: LD_INT 3
3832: PUSH
3833: FOR_TO
3834: IFFALSE 3900
// begin PrepareHuman ( false , 1 , Difficulty ) ;
3836: LD_INT 0
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: LD_OWVAR 67
3846: PPUSH
3847: CALL_OW 380
// un := CreateHuman ;
3851: LD_ADDR_VAR 0 3
3855: PUSH
3856: CALL_OW 44
3860: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
3861: LD_ADDR_EXP 34
3865: PUSH
3866: LD_EXP 34
3870: PUSH
3871: LD_VAR 0 3
3875: UNION
3876: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
3877: LD_VAR 0 3
3881: PPUSH
3882: LD_INT 91
3884: PPUSH
3885: LD_INT 60
3887: PPUSH
3888: LD_INT 3
3890: PPUSH
3891: LD_INT 0
3893: PPUSH
3894: CALL_OW 50
// end ;
3898: GO 3833
3900: POP
3901: POP
// end ;
3902: LD_VAR 0 1
3906: RET
// every 0 0$3 do var i ;
3907: GO 3909
3909: DISABLE
3910: LD_INT 0
3912: PPUSH
// begin ComExitBuilding ( grishkoSquad ) ;
3913: LD_EXP 32
3917: PPUSH
3918: CALL_OW 122
// wait ( 3 ) ;
3922: LD_INT 3
3924: PPUSH
3925: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3929: LD_EXP 32
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: PPUSH
3938: LD_INT 22
3940: PUSH
3941: LD_INT 6
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 30
3950: PUSH
3951: LD_INT 31
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PPUSH
3962: CALL_OW 69
3966: PPUSH
3967: LD_EXP 32
3971: PUSH
3972: LD_INT 1
3974: ARRAY
3975: PPUSH
3976: CALL_OW 74
3980: PPUSH
3981: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3985: LD_EXP 32
3989: PUSH
3990: LD_INT 2
3992: ARRAY
3993: PPUSH
3994: LD_INT 211
3996: PPUSH
3997: LD_INT 107
3999: PPUSH
4000: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4004: LD_EXP 32
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: PPUSH
4013: LD_INT 209
4015: PPUSH
4016: LD_INT 106
4018: PPUSH
4019: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4023: LD_EXP 32
4027: PUSH
4028: LD_INT 3
4030: ARRAY
4031: PPUSH
4032: LD_INT 209
4034: PPUSH
4035: LD_INT 103
4037: PPUSH
4038: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4042: LD_EXP 32
4046: PUSH
4047: LD_INT 3
4049: ARRAY
4050: PPUSH
4051: LD_INT 209
4053: PPUSH
4054: LD_INT 106
4056: PPUSH
4057: CALL_OW 178
// repeat wait ( 0 0$20 ) ;
4061: LD_INT 700
4063: PPUSH
4064: CALL_OW 67
// for i := 3 downto 2 do
4068: LD_ADDR_VAR 0 1
4072: PUSH
4073: DOUBLE
4074: LD_INT 3
4076: INC
4077: ST_TO_ADDR
4078: LD_INT 2
4080: PUSH
4081: FOR_DOWNTO
4082: IFFALSE 4249
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4084: LD_EXP 32
4088: PUSH
4089: LD_VAR 0 1
4093: ARRAY
4094: PPUSH
4095: LD_INT 200
4097: PPUSH
4098: LD_INT 91
4100: PPUSH
4101: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4105: LD_EXP 32
4109: PUSH
4110: LD_VAR 0 1
4114: ARRAY
4115: PPUSH
4116: LD_INT 210
4118: PPUSH
4119: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4123: LD_EXP 32
4127: PUSH
4128: LD_VAR 0 1
4132: ARRAY
4133: PPUSH
4134: LD_INT 224
4136: PPUSH
4137: LD_INT 93
4139: PPUSH
4140: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4144: LD_EXP 32
4148: PUSH
4149: LD_VAR 0 1
4153: ARRAY
4154: PPUSH
4155: LD_INT 210
4157: PPUSH
4158: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4162: LD_EXP 32
4166: PUSH
4167: LD_VAR 0 1
4171: ARRAY
4172: PPUSH
4173: LD_INT 239
4175: PPUSH
4176: LD_INT 123
4178: PPUSH
4179: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4183: LD_EXP 32
4187: PUSH
4188: LD_VAR 0 1
4192: ARRAY
4193: PPUSH
4194: LD_INT 210
4196: PPUSH
4197: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4201: LD_EXP 32
4205: PUSH
4206: LD_VAR 0 1
4210: ARRAY
4211: PPUSH
4212: LD_INT 212
4214: PPUSH
4215: LD_INT 105
4217: PPUSH
4218: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4222: LD_EXP 32
4226: PUSH
4227: LD_VAR 0 1
4231: ARRAY
4232: PPUSH
4233: LD_INT 700
4235: PPUSH
4236: CALL_OW 202
// wait ( 0 0$30 ) ;
4240: LD_INT 1050
4242: PPUSH
4243: CALL_OW 67
// end ;
4247: GO 4081
4249: POP
4250: POP
// until not activeGrishkoAI ;
4251: LD_EXP 9
4255: NOT
4256: IFFALSE 4061
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4258: LD_EXP 32
4262: PPUSH
4263: LD_INT 221
4265: PPUSH
4266: LD_INT 110
4268: PPUSH
4269: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4273: LD_EXP 32
4277: PPUSH
4278: LD_INT 228
4280: PPUSH
4281: LD_INT 115
4283: PPUSH
4284: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4288: LD_EXP 32
4292: PPUSH
4293: CALL_OW 200
// end ;
4297: PPOPN 1
4299: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4300: LD_EXP 11
4304: IFFALSE 4865
4306: GO 4308
4308: DISABLE
4309: LD_INT 0
4311: PPUSH
4312: PPUSH
4313: PPUSH
4314: PPUSH
// begin uc_side := 6 ;
4315: LD_ADDR_OWVAR 20
4319: PUSH
4320: LD_INT 6
4322: ST_TO_ADDR
// uc_nation := 3 ;
4323: LD_ADDR_OWVAR 21
4327: PUSH
4328: LD_INT 3
4330: ST_TO_ADDR
// for i := 1 to 3 do
4331: LD_ADDR_VAR 0 2
4335: PUSH
4336: DOUBLE
4337: LD_INT 1
4339: DEC
4340: ST_TO_ADDR
4341: LD_INT 3
4343: PUSH
4344: FOR_TO
4345: IFFALSE 4454
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
4347: LD_INT 0
4349: PPUSH
4350: LD_INT 1
4352: PPUSH
4353: LD_INT 2
4355: PUSH
4356: LD_INT 3
4358: PUSH
4359: LD_INT 4
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: LD_OWVAR 67
4371: ARRAY
4372: PPUSH
4373: CALL_OW 380
// un := CreateHuman ;
4377: LD_ADDR_VAR 0 1
4381: PUSH
4382: CALL_OW 44
4386: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4387: LD_ADDR_EXP 33
4391: PUSH
4392: LD_EXP 33
4396: PUSH
4397: LD_VAR 0 1
4401: UNION
4402: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4403: LD_VAR 0 1
4407: PPUSH
4408: LD_INT 1
4410: PPUSH
4411: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4415: LD_VAR 0 1
4419: PPUSH
4420: LD_INT 11
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4430: LD_VAR 0 1
4434: PPUSH
4435: LD_INT 210
4437: PPUSH
4438: LD_INT 159
4440: PPUSH
4441: CALL_OW 111
// wait ( 0 0$2 ) ;
4445: LD_INT 70
4447: PPUSH
4448: CALL_OW 67
// end ;
4452: GO 4344
4454: POP
4455: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
4456: LD_ADDR_VAR 0 4
4460: PUSH
4461: LD_INT 172
4463: PUSH
4464: LD_INT 76
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 150
4473: PUSH
4474: LD_INT 38
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 148
4483: PUSH
4484: LD_INT 9
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: LD_INT 165
4493: PUSH
4494: LD_INT 38
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 191
4509: PUSH
4510: LD_INT 77
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: LD_INT 168
4519: PUSH
4520: LD_INT 42
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 166
4529: PUSH
4530: LD_INT 11
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: LD_INT 151
4539: PUSH
4540: LD_INT 12
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 221
4555: PUSH
4556: LD_INT 88
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: LD_INT 217
4565: PUSH
4566: LD_INT 64
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 208
4575: PUSH
4576: LD_INT 42
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4593: LD_INT 35
4595: PPUSH
4596: CALL_OW 67
// for i := 1 to patrol do
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: DOUBLE
4606: LD_INT 1
4608: DEC
4609: ST_TO_ADDR
4610: LD_VAR 0 4
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4856
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4618: LD_EXP 33
4622: PUSH
4623: LD_VAR 0 2
4627: ARRAY
4628: PPUSH
4629: CALL_OW 256
4633: PUSH
4634: LD_INT 990
4636: LESS
4637: PUSH
4638: LD_EXP 33
4642: PUSH
4643: LD_VAR 0 2
4647: ARRAY
4648: PPUSH
4649: CALL_OW 110
4653: PUSH
4654: LD_INT 1
4656: EQUAL
4657: AND
4658: IFFALSE 4678
// SetTag ( russianPatrol [ i ] , 2 ) ;
4660: LD_EXP 33
4664: PUSH
4665: LD_VAR 0 2
4669: ARRAY
4670: PPUSH
4671: LD_INT 2
4673: PPUSH
4674: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
4678: LD_EXP 33
4682: PUSH
4683: LD_VAR 0 2
4687: ARRAY
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_INT 2
4696: EQUAL
4697: IFFALSE 4754
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
4699: LD_EXP 33
4703: PUSH
4704: LD_VAR 0 2
4708: ARRAY
4709: PPUSH
4710: LD_INT 166
4712: PPUSH
4713: LD_INT 101
4715: PPUSH
4716: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
4720: LD_EXP 33
4724: PUSH
4725: LD_VAR 0 2
4729: ARRAY
4730: PPUSH
4731: LD_INT 71
4733: PPUSH
4734: CALL_OW 296
4738: PUSH
4739: LD_INT 10
4741: LESS
4742: IFFALSE 4752
// russianAlert := true ;
4744: LD_ADDR_EXP 8
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// continue ;
4752: GO 4615
// end ; if not HasTask ( russianPatrol [ i ] ) then
4754: LD_EXP 33
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: CALL_OW 314
4769: NOT
4770: IFFALSE 4854
// for j in patrol [ i ] do
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: LD_VAR 0 4
4781: PUSH
4782: LD_VAR 0 2
4786: ARRAY
4787: PUSH
4788: FOR_IN
4789: IFFALSE 4852
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
4791: LD_EXP 33
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_INT 35
4804: PPUSH
4805: LD_INT 175
4807: PPUSH
4808: CALL_OW 12
4812: PPUSH
4813: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
4817: LD_EXP 33
4821: PUSH
4822: LD_VAR 0 2
4826: ARRAY
4827: PPUSH
4828: LD_VAR 0 3
4832: PUSH
4833: LD_INT 1
4835: ARRAY
4836: PPUSH
4837: LD_VAR 0 3
4841: PUSH
4842: LD_INT 2
4844: ARRAY
4845: PPUSH
4846: CALL_OW 174
// end ;
4850: GO 4788
4852: POP
4853: POP
// end ;
4854: GO 4615
4856: POP
4857: POP
// until not russianPatrol ;
4858: LD_EXP 33
4862: NOT
4863: IFFALSE 4593
// end ;
4865: PPOPN 4
4867: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_see , 2 ] ] ) diff russianPatrol do
4868: LD_INT 2
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_INT 3
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 22
4883: PUSH
4884: LD_INT 6
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 101
4898: PUSH
4899: LD_INT 2
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 69
4914: PUSH
4915: LD_EXP 33
4919: DIFF
4920: IFFALSE 4933
4922: GO 4924
4924: DISABLE
// russianAlert := true ;
4925: LD_ADDR_EXP 8
4929: PUSH
4930: LD_INT 1
4932: ST_TO_ADDR
4933: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
4934: LD_EXP 6
4938: PUSH
4939: LD_EXP 12
4943: NOT
4944: AND
4945: IFFALSE 5386
4947: GO 4949
4949: DISABLE
4950: LD_INT 0
4952: PPUSH
4953: PPUSH
4954: PPUSH
4955: PPUSH
4956: PPUSH
// begin enable ;
4957: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_EXP 34
4967: PPUSH
4968: LD_INT 21
4970: PUSH
4971: LD_INT 2
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PPUSH
4978: CALL_OW 72
4982: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
4983: LD_ADDR_VAR 0 4
4987: PUSH
4988: LD_INT 22
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PPUSH
4998: CALL_OW 69
5002: ST_TO_ADDR
// for i in filter do
5003: LD_ADDR_VAR 0 1
5007: PUSH
5008: LD_VAR 0 2
5012: PUSH
5013: FOR_IN
5014: IFFALSE 5384
// begin tmp := IsDrivenBy ( i ) ;
5016: LD_ADDR_VAR 0 3
5020: PUSH
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 311
5030: ST_TO_ADDR
// if not tmp then
5031: LD_VAR 0 3
5035: NOT
5036: IFFALSE 5040
// continue ;
5038: GO 5013
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5040: LD_VAR 0 1
5044: PPUSH
5045: CALL_OW 261
5049: PUSH
5050: LD_INT 90
5052: GREATER
5053: PUSH
5054: LD_VAR 0 1
5058: PPUSH
5059: CALL_OW 110
5063: PUSH
5064: LD_INT 2
5066: EQUAL
5067: AND
5068: IFFALSE 5084
// SetTag ( i , 0 ) else
5070: LD_VAR 0 1
5074: PPUSH
5075: LD_INT 0
5077: PPUSH
5078: CALL_OW 109
5082: GO 5135
// if GetTag ( i ) = 2 then
5084: LD_VAR 0 1
5088: PPUSH
5089: CALL_OW 110
5093: PUSH
5094: LD_INT 2
5096: EQUAL
5097: IFFALSE 5135
// begin x := rand ( 1 , 2 ) ;
5099: LD_ADDR_VAR 0 5
5103: PUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 2
5109: PPUSH
5110: CALL_OW 12
5114: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5115: LD_VAR 0 1
5119: PPUSH
5120: LD_EXP 35
5124: PUSH
5125: LD_VAR 0 5
5129: ARRAY
5130: PPUSH
5131: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5135: LD_VAR 0 1
5139: PPUSH
5140: CALL_OW 256
5144: PUSH
5145: LD_INT 600
5147: GREATEREQUAL
5148: PUSH
5149: LD_VAR 0 1
5153: PPUSH
5154: CALL_OW 110
5158: NOT
5159: AND
5160: IFFALSE 5186
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5162: LD_VAR 0 1
5166: PPUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 74
5181: PPUSH
5182: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5186: LD_VAR 0 1
5190: PPUSH
5191: CALL_OW 256
5195: PUSH
5196: LD_INT 600
5198: LESS
5199: PUSH
5200: LD_VAR 0 1
5204: PPUSH
5205: CALL_OW 110
5209: NOT
5210: AND
5211: IFFALSE 5240
// begin SetTag ( i , 1 ) ;
5213: LD_VAR 0 1
5217: PPUSH
5218: LD_INT 1
5220: PPUSH
5221: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: LD_INT 62
5232: PPUSH
5233: LD_INT 22
5235: PPUSH
5236: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 110
5249: PUSH
5250: LD_INT 1
5252: EQUAL
5253: PUSH
5254: LD_VAR 0 1
5258: PPUSH
5259: LD_INT 62
5261: PPUSH
5262: LD_INT 22
5264: PPUSH
5265: CALL_OW 297
5269: PUSH
5270: LD_INT 6
5272: LESS
5273: AND
5274: PUSH
5275: LD_VAR 0 3
5279: AND
5280: IFFALSE 5382
// begin ComExitVehicle ( tmp ) ;
5282: LD_VAR 0 3
5286: PPUSH
5287: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5291: LD_VAR 0 3
5295: PPUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5305: LD_INT 35
5307: PPUSH
5308: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5312: LD_VAR 0 1
5316: PPUSH
5317: CALL_OW 256
5321: PUSH
5322: LD_INT 1000
5324: EQUAL
5325: IFFALSE 5305
// ComEnterUnit ( tmp , i ) ;
5327: LD_VAR 0 3
5331: PPUSH
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5341: LD_VAR 0 1
5345: PPUSH
5346: CALL_OW 261
5350: PUSH
5351: LD_INT 90
5353: LESSEQUAL
5354: IFFALSE 5370
// SetTag ( i , 2 ) else
5356: LD_VAR 0 1
5360: PPUSH
5361: LD_INT 2
5363: PPUSH
5364: CALL_OW 109
5368: GO 5382
// SetTag ( i , 0 ) ;
5370: LD_VAR 0 1
5374: PPUSH
5375: LD_INT 0
5377: PPUSH
5378: CALL_OW 109
// end ; end ;
5382: GO 5013
5384: POP
5385: POP
// end ; end_of_file
5386: PPOPN 5
5388: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
5389: LD_INT 0
5391: PPUSH
5392: PPUSH
5393: PPUSH
// SetBName ( omikron , omikron ) ;
5394: LD_INT 64
5396: PPUSH
5397: LD_STRING omikron
5399: PPUSH
5400: CALL_OW 500
// uc_side := 4 ;
5404: LD_ADDR_OWVAR 20
5408: PUSH
5409: LD_INT 4
5411: ST_TO_ADDR
// uc_nation := 1 ;
5412: LD_ADDR_OWVAR 21
5416: PUSH
5417: LD_INT 1
5419: ST_TO_ADDR
// omicronSquad := [ ] ;
5420: LD_ADDR_EXP 36
5424: PUSH
5425: EMPTY
5426: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
5427: LD_ADDR_VAR 0 2
5431: PUSH
5432: LD_INT 22
5434: PUSH
5435: LD_INT 4
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: LD_INT 2
5444: PUSH
5445: LD_INT 30
5447: PUSH
5448: LD_INT 32
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: LD_INT 30
5457: PUSH
5458: LD_INT 31
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PPUSH
5474: CALL_OW 69
5478: PUSH
5479: FOR_IN
5480: IFFALSE 5537
// begin PrepareHuman ( false , 1 , 1 ) ;
5482: LD_INT 0
5484: PPUSH
5485: LD_INT 1
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: CALL_OW 380
// un := CreateHuman ;
5495: LD_ADDR_VAR 0 3
5499: PUSH
5500: CALL_OW 44
5504: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5505: LD_ADDR_EXP 36
5509: PUSH
5510: LD_EXP 36
5514: PUSH
5515: LD_VAR 0 3
5519: UNION
5520: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 52
// end ;
5535: GO 5479
5537: POP
5538: POP
// for i := 1 to 3 do
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: DOUBLE
5545: LD_INT 1
5547: DEC
5548: ST_TO_ADDR
5549: LD_INT 3
5551: PUSH
5552: FOR_TO
5553: IFFALSE 5608
// begin PrepareHuman ( false , 2 , 2 ) ;
5555: LD_INT 0
5557: PPUSH
5558: LD_INT 2
5560: PPUSH
5561: LD_INT 2
5563: PPUSH
5564: CALL_OW 380
// un := CreateHuman ;
5568: LD_ADDR_VAR 0 3
5572: PUSH
5573: CALL_OW 44
5577: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5578: LD_ADDR_EXP 36
5582: PUSH
5583: LD_EXP 36
5587: PUSH
5588: LD_VAR 0 3
5592: UNION
5593: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
5594: LD_VAR 0 3
5598: PPUSH
5599: LD_INT 64
5601: PPUSH
5602: CALL_OW 52
// end ;
5606: GO 5552
5608: POP
5609: POP
// for i := 1 to 2 do
5610: LD_ADDR_VAR 0 2
5614: PUSH
5615: DOUBLE
5616: LD_INT 1
5618: DEC
5619: ST_TO_ADDR
5620: LD_INT 2
5622: PUSH
5623: FOR_TO
5624: IFFALSE 5763
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
5626: LD_INT 4
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: LD_INT 2
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: LD_INT 1
5640: PPUSH
5641: LD_INT 3
5643: PPUSH
5644: LD_INT 100
5646: PPUSH
5647: CALL 224 0 7
// un := CreateVehicle ;
5651: LD_ADDR_VAR 0 3
5655: PUSH
5656: CALL_OW 45
5660: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5661: LD_ADDR_EXP 36
5665: PUSH
5666: LD_EXP 36
5670: PUSH
5671: LD_VAR 0 3
5675: UNION
5676: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
5677: LD_VAR 0 3
5681: PPUSH
5682: LD_INT 28
5684: PPUSH
5685: LD_INT 37
5687: PPUSH
5688: LD_INT 6
5690: PPUSH
5691: LD_INT 0
5693: PPUSH
5694: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
5698: LD_INT 0
5700: PPUSH
5701: LD_INT 3
5703: PPUSH
5704: LD_INT 2
5706: PPUSH
5707: CALL_OW 380
// un := CreateHuman ;
5711: LD_ADDR_VAR 0 3
5715: PUSH
5716: CALL_OW 44
5720: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
5721: LD_ADDR_EXP 36
5725: PUSH
5726: LD_EXP 36
5730: PUSH
5731: LD_VAR 0 3
5735: UNION
5736: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
5737: LD_VAR 0 3
5741: PPUSH
5742: LD_EXP 36
5746: PUSH
5747: LD_EXP 36
5751: PUSH
5752: LD_INT 1
5754: MINUS
5755: ARRAY
5756: PPUSH
5757: CALL_OW 52
// end ;
5761: GO 5623
5763: POP
5764: POP
// end ;
5765: LD_VAR 0 1
5769: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
5770: LD_INT 0
5772: PPUSH
5773: PPUSH
5774: PPUSH
5775: PPUSH
// uc_side := 4 ;
5776: LD_ADDR_OWVAR 20
5780: PUSH
5781: LD_INT 4
5783: ST_TO_ADDR
// uc_nation := 1 ;
5784: LD_ADDR_OWVAR 21
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// tmp := [ ] ;
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: EMPTY
5798: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
5799: LD_INT 4
5801: PPUSH
5802: LD_INT 1
5804: PPUSH
5805: LD_INT 2
5807: PPUSH
5808: LD_INT 1
5810: PPUSH
5811: LD_INT 1
5813: PPUSH
5814: LD_INT 4
5816: PPUSH
5817: LD_INT 77
5819: PPUSH
5820: CALL 224 0 7
// un := CreateVehicle ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: CALL_OW 45
5833: ST_TO_ADDR
// tmp := tmp union un ;
5834: LD_ADDR_VAR 0 4
5838: PUSH
5839: LD_VAR 0 4
5843: PUSH
5844: LD_VAR 0 3
5848: UNION
5849: ST_TO_ADDR
// SetDir ( un , 2 ) ;
5850: LD_VAR 0 3
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
5862: LD_VAR 0 3
5866: PPUSH
5867: LD_INT 106
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: LD_INT 0
5875: PPUSH
5876: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
5880: LD_INT 0
5882: PPUSH
5883: LD_INT 3
5885: PPUSH
5886: LD_INT 2
5888: PPUSH
5889: CALL_OW 380
// un := CreateHuman ;
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: CALL_OW 44
5902: ST_TO_ADDR
// tmp := tmp union un ;
5903: LD_ADDR_VAR 0 4
5907: PUSH
5908: LD_VAR 0 4
5912: PUSH
5913: LD_VAR 0 3
5917: UNION
5918: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
5919: LD_VAR 0 3
5923: PPUSH
5924: LD_VAR 0 4
5928: PUSH
5929: LD_VAR 0 4
5933: PUSH
5934: LD_INT 1
5936: MINUS
5937: ARRAY
5938: PPUSH
5939: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
5943: LD_VAR 0 3
5947: PPUSH
5948: LD_INT 109
5950: PPUSH
5951: LD_INT 9
5953: PPUSH
5954: CALL_OW 111
// wait ( 0 0$1 ) ;
5958: LD_INT 35
5960: PPUSH
5961: CALL_OW 67
// for i := 1 to 2 do
5965: LD_ADDR_VAR 0 2
5969: PUSH
5970: DOUBLE
5971: LD_INT 1
5973: DEC
5974: ST_TO_ADDR
5975: LD_INT 2
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6043
// begin PrepareHuman ( false , 1 , 2 ) ;
5981: LD_INT 0
5983: PPUSH
5984: LD_INT 1
5986: PPUSH
5987: LD_INT 2
5989: PPUSH
5990: CALL_OW 380
// un := CreateHuman ;
5994: LD_ADDR_VAR 0 3
5998: PUSH
5999: CALL_OW 44
6003: ST_TO_ADDR
// tmp := tmp union un ;
6004: LD_ADDR_VAR 0 4
6008: PUSH
6009: LD_VAR 0 4
6013: PUSH
6014: LD_VAR 0 3
6018: UNION
6019: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6020: LD_VAR 0 3
6024: PPUSH
6025: LD_INT 105
6027: PPUSH
6028: LD_INT 2
6030: PPUSH
6031: LD_INT 2
6033: PPUSH
6034: LD_INT 0
6036: PPUSH
6037: CALL_OW 50
// end ;
6041: GO 5978
6043: POP
6044: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6045: LD_VAR 0 4
6049: PPUSH
6050: LD_INT 26
6052: PPUSH
6053: LD_INT 35
6055: PPUSH
6056: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6060: LD_INT 35
6062: PPUSH
6063: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6067: LD_VAR 0 4
6071: PPUSH
6072: LD_INT 50
6074: PUSH
6075: EMPTY
6076: LIST
6077: PPUSH
6078: CALL_OW 72
6082: NOT
6083: IFFALSE 6087
// exit ;
6085: GO 6214
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6087: LD_VAR 0 4
6091: PPUSH
6092: LD_INT 91
6094: PUSH
6095: LD_INT 64
6097: PUSH
6098: LD_INT 12
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: LIST
6105: PPUSH
6106: CALL_OW 72
6110: PUSH
6111: LD_VAR 0 4
6115: EQUAL
6116: IFFALSE 6060
// omicronSquad := omicronSquad union tmp ;
6118: LD_ADDR_EXP 36
6122: PUSH
6123: LD_EXP 36
6127: PUSH
6128: LD_VAR 0 4
6132: UNION
6133: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6134: LD_ADDR_VAR 0 2
6138: PUSH
6139: LD_VAR 0 4
6143: PPUSH
6144: LD_INT 25
6146: PUSH
6147: LD_INT 1
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PPUSH
6154: CALL_OW 72
6158: PUSH
6159: FOR_IN
6160: IFFALSE 6212
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
6162: LD_VAR 0 2
6166: PPUSH
6167: LD_INT 22
6169: PUSH
6170: LD_INT 4
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 30
6179: PUSH
6180: LD_INT 4
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: PPUSH
6196: LD_VAR 0 2
6200: PPUSH
6201: CALL_OW 74
6205: PPUSH
6206: CALL_OW 120
6210: GO 6159
6212: POP
6213: POP
// end ;
6214: LD_VAR 0 1
6218: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
6219: LD_EXP 12
6223: NOT
6224: IFFALSE 6795
6226: GO 6228
6228: DISABLE
6229: LD_INT 0
6231: PPUSH
6232: PPUSH
6233: PPUSH
6234: PPUSH
// begin enable ;
6235: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6236: LD_ADDR_VAR 0 2
6240: PUSH
6241: LD_INT 22
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 21
6253: PUSH
6254: LD_INT 3
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 3
6263: PUSH
6264: LD_INT 24
6266: PUSH
6267: LD_INT 1000
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
6288: LD_ADDR_VAR 0 3
6292: PUSH
6293: LD_EXP 36
6297: PPUSH
6298: LD_INT 25
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PPUSH
6308: CALL_OW 72
6312: ST_TO_ADDR
// if filter and tmp then
6313: LD_VAR 0 2
6317: PUSH
6318: LD_VAR 0 3
6322: AND
6323: IFFALSE 6396
// begin for i in tmp do
6325: LD_ADDR_VAR 0 1
6329: PUSH
6330: LD_VAR 0 3
6334: PUSH
6335: FOR_IN
6336: IFFALSE 6392
// if IsInUnit ( i ) then
6338: LD_VAR 0 1
6342: PPUSH
6343: CALL_OW 310
6347: IFFALSE 6360
// ComExitBuilding ( i ) else
6349: LD_VAR 0 1
6353: PPUSH
6354: CALL_OW 122
6358: GO 6390
// if not HasTask ( i ) then
6360: LD_VAR 0 1
6364: PPUSH
6365: CALL_OW 314
6369: NOT
6370: IFFALSE 6390
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6372: LD_VAR 0 1
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: CALL_OW 130
6390: GO 6335
6392: POP
6393: POP
// end else
6394: GO 6467
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
6396: LD_VAR 0 3
6400: PPUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 54
6406: PUSH
6407: EMPTY
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 72
6418: IFFALSE 6467
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
6420: LD_ADDR_VAR 0 1
6424: PUSH
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_INT 3
6432: PUSH
6433: LD_INT 54
6435: PUSH
6436: EMPTY
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PPUSH
6443: CALL_OW 72
6447: PUSH
6448: FOR_IN
6449: IFFALSE 6465
// ComEnterUnit ( i , omikron ) ;
6451: LD_VAR 0 1
6455: PPUSH
6456: LD_INT 64
6458: PPUSH
6459: CALL_OW 120
6463: GO 6448
6465: POP
6466: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
6467: LD_ADDR_VAR 0 2
6471: PUSH
6472: LD_EXP 36
6476: PPUSH
6477: LD_INT 21
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PPUSH
6487: CALL_OW 72
6491: ST_TO_ADDR
// if not filter then
6492: LD_VAR 0 2
6496: NOT
6497: IFFALSE 6501
// exit ;
6499: GO 6795
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
6501: LD_ADDR_VAR 0 4
6505: PUSH
6506: LD_INT 13
6508: PPUSH
6509: LD_INT 81
6511: PUSH
6512: LD_INT 4
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PPUSH
6519: CALL_OW 70
6523: ST_TO_ADDR
// if enemy then
6524: LD_VAR 0 4
6528: IFFALSE 6795
// begin for i in filter do
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: LD_VAR 0 2
6539: PUSH
6540: FOR_IN
6541: IFFALSE 6793
// begin tmp := IsDrivenBy ( i ) ;
6543: LD_ADDR_VAR 0 3
6547: PUSH
6548: LD_VAR 0 1
6552: PPUSH
6553: CALL_OW 311
6557: ST_TO_ADDR
// if not tmp then
6558: LD_VAR 0 3
6562: NOT
6563: IFFALSE 6567
// continue ;
6565: GO 6540
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
6567: LD_VAR 0 1
6571: PPUSH
6572: CALL_OW 256
6576: PUSH
6577: LD_INT 600
6579: GREATEREQUAL
6580: PUSH
6581: LD_VAR 0 1
6585: PPUSH
6586: CALL_OW 110
6590: PUSH
6591: LD_INT 1
6593: NONEQUAL
6594: AND
6595: IFFALSE 6621
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6597: LD_VAR 0 1
6601: PPUSH
6602: LD_VAR 0 4
6606: PPUSH
6607: LD_VAR 0 1
6611: PPUSH
6612: CALL_OW 74
6616: PPUSH
6617: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
6621: LD_VAR 0 1
6625: PPUSH
6626: CALL_OW 256
6630: PUSH
6631: LD_INT 600
6633: LESS
6634: PUSH
6635: LD_VAR 0 1
6639: PPUSH
6640: CALL_OW 110
6644: PUSH
6645: LD_INT 1
6647: NONEQUAL
6648: AND
6649: IFFALSE 6678
// begin SetTag ( i , 1 ) ;
6651: LD_VAR 0 1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
6663: LD_VAR 0 1
6667: PPUSH
6668: LD_INT 27
6670: PPUSH
6671: LD_INT 35
6673: PPUSH
6674: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
6678: LD_VAR 0 1
6682: PPUSH
6683: CALL_OW 110
6687: PUSH
6688: LD_INT 1
6690: EQUAL
6691: PUSH
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_INT 27
6699: PPUSH
6700: LD_INT 35
6702: PPUSH
6703: CALL_OW 297
6707: PUSH
6708: LD_INT 6
6710: LESS
6711: AND
6712: PUSH
6713: LD_VAR 0 3
6717: AND
6718: IFFALSE 6791
// begin ComExitVehicle ( tmp ) ;
6720: LD_VAR 0 3
6724: PPUSH
6725: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6729: LD_VAR 0 3
6733: PPUSH
6734: LD_VAR 0 1
6738: PPUSH
6739: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6743: LD_INT 35
6745: PPUSH
6746: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6750: LD_VAR 0 1
6754: PPUSH
6755: CALL_OW 256
6759: PUSH
6760: LD_INT 1000
6762: EQUAL
6763: IFFALSE 6743
// ComEnterUnit ( tmp , i ) ;
6765: LD_VAR 0 3
6769: PPUSH
6770: LD_VAR 0 1
6774: PPUSH
6775: CALL_OW 120
// SetTag ( i , 0 ) ;
6779: LD_VAR 0 1
6783: PPUSH
6784: LD_INT 0
6786: PPUSH
6787: CALL_OW 109
// end ; end ;
6791: GO 6540
6793: POP
6794: POP
// end ; end ;
6795: PPOPN 4
6797: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
6798: LD_EXP 12
6802: IFFALSE 6946
6804: GO 6806
6806: DISABLE
6807: LD_INT 0
6809: PPUSH
6810: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
6811: LD_ADDR_VAR 0 2
6815: PUSH
6816: LD_EXP 36
6820: PPUSH
6821: LD_INT 21
6823: PUSH
6824: LD_INT 1
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PUSH
6831: LD_INT 50
6833: PUSH
6834: EMPTY
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PPUSH
6841: CALL_OW 72
6845: ST_TO_ADDR
// if not tmp then
6846: LD_VAR 0 2
6850: NOT
6851: IFFALSE 6855
// exit ;
6853: GO 6946
// repeat wait ( 0 0$1 ) ;
6855: LD_INT 35
6857: PPUSH
6858: CALL_OW 67
// for i in tmp do
6862: LD_ADDR_VAR 0 1
6866: PUSH
6867: LD_VAR 0 2
6871: PUSH
6872: FOR_IN
6873: IFFALSE 6937
// begin ComExit ( i ) ;
6875: LD_VAR 0 1
6879: PPUSH
6880: CALL 996 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
6884: LD_VAR 0 1
6888: PPUSH
6889: LD_INT 14
6891: PPUSH
6892: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
6896: LD_VAR 0 1
6900: PPUSH
6901: LD_INT 14
6903: PPUSH
6904: CALL_OW 308
6908: IFFALSE 6935
// begin tmp := tmp diff i ;
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_VAR 0 2
6919: PUSH
6920: LD_VAR 0 1
6924: DIFF
6925: ST_TO_ADDR
// RemoveUnit ( i ) ;
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL_OW 64
// end ; end ;
6935: GO 6872
6937: POP
6938: POP
// until not tmp ;
6939: LD_VAR 0 2
6943: NOT
6944: IFFALSE 6855
// end ; end_of_file
6946: PPOPN 2
6948: END
// export function Action ; var i , un , veh , tmp ; begin
6949: LD_INT 0
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
// InGameOn ;
6956: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
6960: LD_INT 179
6962: PPUSH
6963: LD_INT 5
6965: PPUSH
6966: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
6970: LD_ADDR_VAR 0 4
6974: PUSH
6975: LD_INT 2
6977: PPUSH
6978: LD_INT 2
6980: PPUSH
6981: LD_INT 12
6983: PPUSH
6984: LD_INT 1
6986: PPUSH
6987: LD_INT 1
6989: PPUSH
6990: LD_INT 24
6992: PPUSH
6993: LD_INT 33
6995: PPUSH
6996: CALL 224 0 7
7000: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7001: LD_VAR 0 4
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7013: LD_VAR 0 4
7017: PPUSH
7018: LD_INT 178
7020: PPUSH
7021: LD_INT 2
7023: PPUSH
7024: LD_INT 0
7026: PPUSH
7027: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7031: LD_EXP 13
7035: PPUSH
7036: LD_VAR 0 4
7040: PPUSH
7041: CALL_OW 52
// if Kamil then
7045: LD_EXP 16
7049: IFFALSE 7084
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7051: LD_EXP 16
7055: PPUSH
7056: LD_INT 207
7058: PPUSH
7059: LD_INT 37
7061: PPUSH
7062: LD_INT 0
7064: PPUSH
7065: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7069: LD_EXP 16
7073: PPUSH
7074: LD_INT 211
7076: PPUSH
7077: LD_INT 38
7079: PPUSH
7080: CALL_OW 118
// end ; if Sophia then
7084: LD_EXP 18
7088: IFFALSE 7123
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7090: LD_EXP 18
7094: PPUSH
7095: LD_INT 209
7097: PPUSH
7098: LD_INT 40
7100: PPUSH
7101: LD_INT 0
7103: PPUSH
7104: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7108: LD_EXP 18
7112: PPUSH
7113: LD_INT 211
7115: PPUSH
7116: LD_INT 38
7118: PPUSH
7119: CALL_OW 118
// end ; if Givi then
7123: LD_EXP 14
7127: IFFALSE 7162
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7129: LD_EXP 14
7133: PPUSH
7134: LD_INT 201
7136: PPUSH
7137: LD_INT 34
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7147: LD_EXP 14
7151: PPUSH
7152: LD_INT 206
7154: PPUSH
7155: LD_INT 36
7157: PPUSH
7158: CALL_OW 118
// end ; if Markov then
7162: LD_EXP 19
7166: IFFALSE 7253
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
7168: LD_ADDR_VAR 0 4
7172: PUSH
7173: LD_INT 2
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: LD_INT 13
7181: PPUSH
7182: LD_INT 1
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_INT 25
7190: PPUSH
7191: LD_INT 80
7193: PUSH
7194: LD_INT 20
7196: PUSH
7197: LD_OWVAR 67
7201: MUL
7202: MINUS
7203: PPUSH
7204: CALL 224 0 7
7208: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 2
7216: PPUSH
7217: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 197
7228: PPUSH
7229: LD_INT 35
7231: PPUSH
7232: LD_INT 0
7234: PPUSH
7235: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
7239: LD_EXP 19
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
7253: LD_ADDR_VAR 0 5
7257: PUSH
7258: LD_EXP 17
7262: PUSH
7263: LD_EXP 25
7267: UNION
7268: ST_TO_ADDR
// for i in tmp do
7269: LD_ADDR_VAR 0 2
7273: PUSH
7274: LD_VAR 0 5
7278: PUSH
7279: FOR_IN
7280: IFFALSE 7314
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
7282: LD_VAR 0 2
7286: PPUSH
7287: LD_INT 203
7289: PPUSH
7290: LD_INT 41
7292: PPUSH
7293: LD_INT 6
7295: PPUSH
7296: LD_INT 0
7298: PPUSH
7299: CALL_OW 50
// ComHold ( i ) ;
7303: LD_VAR 0 2
7307: PPUSH
7308: CALL_OW 140
// end ;
7312: GO 7279
7314: POP
7315: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
7316: LD_INT 22
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 25
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PPUSH
7340: CALL_OW 69
7344: NOT
7345: IFFALSE 7359
// SetClass ( Heike , 2 ) ;
7347: LD_EXP 13
7351: PPUSH
7352: LD_INT 2
7354: PPUSH
7355: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
7359: LD_EXP 13
7363: PPUSH
7364: LD_INT 183
7366: PPUSH
7367: LD_INT 12
7369: PPUSH
7370: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
7374: LD_EXP 13
7378: PPUSH
7379: LD_INT 188
7381: PPUSH
7382: LD_INT 20
7384: PPUSH
7385: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
7389: LD_EXP 13
7393: PPUSH
7394: LD_INT 191
7396: PPUSH
7397: LD_INT 25
7399: PPUSH
7400: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
7404: LD_EXP 13
7408: PPUSH
7409: LD_INT 203
7411: PPUSH
7412: LD_INT 29
7414: PPUSH
7415: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
7419: LD_EXP 13
7423: PPUSH
7424: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
7428: LD_INT 35
7430: PPUSH
7431: CALL_OW 67
// until not IsInUnit ( Heike ) ;
7435: LD_EXP 13
7439: PPUSH
7440: CALL_OW 310
7444: NOT
7445: IFFALSE 7428
// CenterOnUnits ( Heike ) ;
7447: LD_EXP 13
7451: PPUSH
7452: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
7456: LD_ADDR_VAR 0 5
7460: PUSH
7461: LD_INT 22
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 21
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: PUSH
7490: LD_EXP 13
7494: PUSH
7495: LD_EXP 19
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: DIFF
7504: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
7505: LD_VAR 0 5
7509: PPUSH
7510: LD_EXP 13
7514: PPUSH
7515: CALL_OW 119
// if Givi then
7519: LD_EXP 14
7523: IFFALSE 7541
// ComTurnUnit ( Heike , Givi ) else
7525: LD_EXP 13
7529: PPUSH
7530: LD_EXP 14
7534: PPUSH
7535: CALL_OW 119
7539: GO 7559
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
7541: LD_EXP 13
7545: PPUSH
7546: LD_VAR 0 5
7550: PUSH
7551: LD_INT 1
7553: ARRAY
7554: PPUSH
7555: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
7559: LD_EXP 13
7563: PPUSH
7564: LD_STRING DH-Start-1
7566: PPUSH
7567: CALL_OW 88
// if Givi then
7571: LD_EXP 14
7575: IFFALSE 7622
// begin Say ( Givi , DG-Start-2 ) ;
7577: LD_EXP 14
7581: PPUSH
7582: LD_STRING DG-Start-2
7584: PPUSH
7585: CALL_OW 88
// if not Mike then
7589: LD_EXP 15
7593: NOT
7594: IFFALSE 7620
// begin Say ( Givi , DG-Start-b-3 ) ;
7596: LD_EXP 14
7600: PPUSH
7601: LD_STRING DG-Start-b-3
7603: PPUSH
7604: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
7608: LD_EXP 13
7612: PPUSH
7613: LD_STRING DH-Start-b-4
7615: PPUSH
7616: CALL_OW 88
// end ; end else
7620: GO 7687
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
7622: LD_EXP 25
7626: PPUSH
7627: LD_INT 26
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 72
7641: PUSH
7642: LD_INT 1
7644: ARRAY
7645: PPUSH
7646: LD_STRING DArm-Start-a-2
7648: PPUSH
7649: CALL_OW 88
7653: NOT
7654: IFFALSE 7687
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
7656: LD_EXP 25
7660: PPUSH
7661: LD_INT 26
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 72
7675: PUSH
7676: LD_INT 1
7678: ARRAY
7679: PPUSH
7680: LD_STRING DArf-Start-a-2
7682: PPUSH
7683: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
7687: LD_EXP 13
7691: PPUSH
7692: LD_INT 211
7694: PPUSH
7695: LD_INT 38
7697: PPUSH
7698: CALL_OW 118
// wait ( 0 0$1 ) ;
7702: LD_INT 35
7704: PPUSH
7705: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
7709: LD_EXP 13
7713: PPUSH
7714: LD_STRING DH-Start-3
7716: PPUSH
7717: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
7721: LD_EXP 13
7725: PPUSH
7726: LD_STRING DH-Start-4
7728: PPUSH
7729: CALL_OW 88
// InGameOff ;
7733: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
7737: LD_STRING Prepare
7739: PPUSH
7740: CALL_OW 337
// wait ( 0 0$10 ) ;
7744: LD_INT 350
7746: PPUSH
7747: CALL_OW 67
// if not Aviradze then
7751: LD_EXP 24
7755: NOT
7756: IFFALSE 7760
// exit ;
7758: GO 7952
// SetDir ( Aviradze , 4 ) ;
7760: LD_EXP 24
7764: PPUSH
7765: LD_INT 4
7767: PPUSH
7768: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
7772: LD_EXP 24
7776: PPUSH
7777: LD_INT 225
7779: PPUSH
7780: LD_INT 33
7782: PPUSH
7783: LD_INT 0
7785: PPUSH
7786: CALL_OW 48
// for i := 1 to 2 do
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: DOUBLE
7796: LD_INT 1
7798: DEC
7799: ST_TO_ADDR
7800: LD_INT 2
7802: PUSH
7803: FOR_TO
7804: IFFALSE 7935
// begin uc_side := 2 ;
7806: LD_ADDR_OWVAR 20
7810: PUSH
7811: LD_INT 2
7813: ST_TO_ADDR
// uc_nation := 0 ;
7814: LD_ADDR_OWVAR 21
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
7822: LD_INT 0
7824: PPUSH
7825: LD_INT 12
7827: PPUSH
7828: LD_INT 1
7830: PPUSH
7831: CALL_OW 380
// hc_gallery :=  ;
7835: LD_ADDR_OWVAR 33
7839: PUSH
7840: LD_STRING 
7842: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
7843: LD_ADDR_OWVAR 26
7847: PUSH
7848: LD_STRING Artudito
7850: PUSH
7851: LD_STRING Textur
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_VAR 0 2
7862: ARRAY
7863: ST_TO_ADDR
// un := CreateHuman ;
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: CALL_OW 44
7873: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
7874: LD_VAR 0 3
7878: PPUSH
7879: LD_INT 224
7881: PUSH
7882: LD_INT 226
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_VAR 0 2
7893: ARRAY
7894: PPUSH
7895: LD_INT 31
7897: PUSH
7898: LD_INT 35
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_VAR 0 2
7909: ARRAY
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
7918: LD_VAR 0 3
7922: PPUSH
7923: LD_INT 215
7925: PPUSH
7926: LD_INT 36
7928: PPUSH
7929: CALL_OW 111
// end ;
7933: GO 7803
7935: POP
7936: POP
// ComMoveXY ( Aviradze , 215 , 36 ) ;
7937: LD_EXP 24
7941: PPUSH
7942: LD_INT 215
7944: PPUSH
7945: LD_INT 36
7947: PPUSH
7948: CALL_OW 111
// end ;
7952: LD_VAR 0 1
7956: RET
// every 0 0$2 trigger baseConstructed do
7957: LD_EXP 3
7961: IFFALSE 8846
7963: GO 7965
7965: DISABLE
// begin DialogueOn ;
7966: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
7970: LD_EXP 13
7974: PPUSH
7975: LD_STRING DH-base-1
7977: PPUSH
7978: CALL_OW 88
// if Markov then
7982: LD_EXP 19
7986: IFFALSE 8038
// begin Say ( Markov , DMar-base-2 ) ;
7988: LD_EXP 19
7992: PPUSH
7993: LD_STRING DMar-base-2
7995: PPUSH
7996: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8000: LD_EXP 19
8004: PPUSH
8005: LD_STRING DMar-base-3
8007: PPUSH
8008: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8012: LD_EXP 13
8016: PPUSH
8017: LD_STRING DH-base-4
8019: PPUSH
8020: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8024: LD_EXP 19
8028: PPUSH
8029: LD_STRING DMar-base-5
8031: PPUSH
8032: CALL_OW 88
// end else
8036: GO 8115
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8038: LD_EXP 25
8042: PPUSH
8043: LD_INT 26
8045: PUSH
8046: LD_INT 1
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PPUSH
8053: CALL_OW 72
8057: PUSH
8058: LD_INT 1
8060: ARRAY
8061: PPUSH
8062: LD_STRING DArm-base-a-2
8064: PPUSH
8065: CALL_OW 88
8069: NOT
8070: IFFALSE 8103
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
8072: LD_EXP 25
8076: PPUSH
8077: LD_INT 26
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 72
8091: PUSH
8092: LD_INT 1
8094: ARRAY
8095: PPUSH
8096: LD_STRING DArf-base-a-2
8098: PPUSH
8099: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
8103: LD_EXP 13
8107: PPUSH
8108: LD_STRING DH-base-a-3
8110: PPUSH
8111: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
8115: LD_EXP 24
8119: PPUSH
8120: LD_STRING DA-base-6
8122: PPUSH
8123: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
8127: LD_EXP 24
8131: PPUSH
8132: LD_STRING DA-base-7
8134: PPUSH
8135: CALL_OW 88
// DialogueOff ;
8139: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
8143: LD_STRING Flamethrower
8145: PPUSH
8146: CALL_OW 337
// wait ( 2 2$00 ) ;
8150: LD_INT 4200
8152: PPUSH
8153: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
8157: LD_EXP 23
8161: PUSH
8162: LD_EXP 15
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PPUSH
8171: LD_INT 203
8173: PPUSH
8174: LD_INT 37
8176: PPUSH
8177: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
8181: LD_INT 22
8183: PUSH
8184: LD_INT 2
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 92
8193: PUSH
8194: LD_INT 203
8196: PUSH
8197: LD_INT 37
8199: PUSH
8200: LD_INT 10
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PPUSH
8213: CALL_OW 69
8217: NOT
8218: IFFALSE 8258
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
8220: LD_EXP 23
8224: PUSH
8225: LD_EXP 15
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PPUSH
8234: LD_EXP 13
8238: PPUSH
8239: CALL_OW 250
8243: PPUSH
8244: LD_EXP 13
8248: PPUSH
8249: CALL_OW 251
8253: PPUSH
8254: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8258: LD_INT 35
8260: PPUSH
8261: CALL_OW 67
// until See ( 2 , Kurt ) or GetDistUnits ( Kurt , Heike ) < 8 ;
8265: LD_INT 2
8267: PPUSH
8268: LD_EXP 23
8272: PPUSH
8273: CALL_OW 292
8277: PUSH
8278: LD_EXP 23
8282: PPUSH
8283: LD_EXP 13
8287: PPUSH
8288: CALL_OW 296
8292: PUSH
8293: LD_INT 8
8295: LESS
8296: OR
8297: IFFALSE 8258
// InGameOn ;
8299: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
8303: LD_EXP 23
8307: PPUSH
8308: CALL_OW 87
// if IsInUnit ( Heike ) then
8312: LD_EXP 13
8316: PPUSH
8317: CALL_OW 310
8321: IFFALSE 8332
// ComExitBuilding ( Heike ) ;
8323: LD_EXP 13
8327: PPUSH
8328: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
8332: LD_EXP 23
8336: PUSH
8337: LD_EXP 15
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PPUSH
8346: LD_EXP 13
8350: PPUSH
8351: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
8355: LD_EXP 13
8359: PPUSH
8360: LD_EXP 23
8364: PPUSH
8365: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
8369: LD_INT 22
8371: PUSH
8372: LD_INT 2
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 91
8381: PUSH
8382: LD_EXP 23
8386: PUSH
8387: LD_INT 10
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 21
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: PPUSH
8410: CALL_OW 69
8414: IFFALSE 8440
// begin Say ( Kurt , DKs-scout-1 ) ;
8416: LD_EXP 23
8420: PPUSH
8421: LD_STRING DKs-scout-1
8423: PPUSH
8424: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
8428: LD_EXP 13
8432: PPUSH
8433: LD_STRING DH-scout-2
8435: PPUSH
8436: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
8440: LD_INT 35
8442: PPUSH
8443: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
8447: LD_EXP 13
8451: PPUSH
8452: LD_EXP 23
8456: PPUSH
8457: CALL_OW 296
8461: PUSH
8462: LD_INT 6
8464: LESS
8465: IFFALSE 8440
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
8467: LD_EXP 23
8471: PUSH
8472: LD_EXP 15
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PPUSH
8481: LD_EXP 13
8485: PPUSH
8486: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
8490: LD_EXP 23
8494: PPUSH
8495: LD_STRING DKs-scout-3
8497: PPUSH
8498: CALL_OW 88
// if Kaia then
8502: LD_EXP 17
8506: IFFALSE 8689
// begin if IsInUnit ( Kaia ) then
8508: LD_EXP 17
8512: PPUSH
8513: CALL_OW 310
8517: IFFALSE 8528
// ComExitBuilding ( Kaia ) ;
8519: LD_EXP 17
8523: PPUSH
8524: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
8528: LD_EXP 17
8532: PPUSH
8533: LD_EXP 23
8537: PPUSH
8538: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
8542: LD_INT 35
8544: PPUSH
8545: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
8549: LD_EXP 17
8553: PPUSH
8554: LD_EXP 23
8558: PPUSH
8559: CALL_OW 296
8563: PUSH
8564: LD_INT 6
8566: LESS
8567: IFFALSE 8542
// ComTurnUnit ( Kaia , Kurt ) ;
8569: LD_EXP 17
8573: PPUSH
8574: LD_EXP 23
8578: PPUSH
8579: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
8583: LD_EXP 17
8587: PPUSH
8588: LD_STRING DK-scout-4
8590: PPUSH
8591: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
8595: LD_EXP 23
8599: PPUSH
8600: LD_EXP 17
8604: PPUSH
8605: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
8609: LD_EXP 23
8613: PPUSH
8614: LD_STRING DKs-scout-5
8616: PPUSH
8617: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
8621: LD_EXP 17
8625: PPUSH
8626: LD_STRING DK-scout-6
8628: PPUSH
8629: CALL_OW 88
// if Mike then
8633: LD_EXP 15
8637: IFFALSE 8689
// begin Say ( Mike , DM-scout-7 ) ;
8639: LD_EXP 15
8643: PPUSH
8644: LD_STRING DM-scout-7
8646: PPUSH
8647: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
8651: LD_EXP 17
8655: PPUSH
8656: LD_EXP 15
8660: PPUSH
8661: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
8665: LD_EXP 17
8669: PPUSH
8670: LD_STRING DK-scout-8
8672: PPUSH
8673: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
8677: LD_EXP 15
8681: PPUSH
8682: LD_STRING DM-scout-9
8684: PPUSH
8685: CALL_OW 88
// end ; end ; ShowArea ( 2 , scoutArea ) ;
8689: LD_INT 2
8691: PPUSH
8692: LD_INT 9
8694: PPUSH
8695: CALL_OW 334
// CenterOnXY ( 184 , 100 ) ;
8699: LD_INT 184
8701: PPUSH
8702: LD_INT 100
8704: PPUSH
8705: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
8709: LD_EXP 23
8713: PPUSH
8714: LD_STRING DKs-scout-10
8716: PPUSH
8717: CALL_OW 88
// wait ( 0 0$1 ) ;
8721: LD_INT 35
8723: PPUSH
8724: CALL_OW 67
// ShowArea ( 2 , hillArea ) ;
8728: LD_INT 2
8730: PPUSH
8731: LD_INT 10
8733: PPUSH
8734: CALL_OW 334
// CenterOnXY ( 144 , 65 ) ;
8738: LD_INT 144
8740: PPUSH
8741: LD_INT 65
8743: PPUSH
8744: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
8748: LD_EXP 23
8752: PPUSH
8753: LD_STRING DKs-scout-11
8755: PPUSH
8756: CALL_OW 88
// wait ( 0 0$1 ) ;
8760: LD_INT 35
8762: PPUSH
8763: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
8767: LD_EXP 23
8771: PPUSH
8772: CALL_OW 87
// if Mike and not Givi then
8776: LD_EXP 15
8780: PUSH
8781: LD_EXP 14
8785: NOT
8786: AND
8787: IFFALSE 8813
// begin Say ( Mike , DM-scout-a-1 ) ;
8789: LD_EXP 15
8793: PPUSH
8794: LD_STRING DM-scout-a-1
8796: PPUSH
8797: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
8801: LD_EXP 13
8805: PPUSH
8806: LD_STRING DH-scout-a-2
8808: PPUSH
8809: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
8813: LD_EXP 23
8817: PUSH
8818: LD_EXP 15
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PPUSH
8827: LD_INT 2
8829: PPUSH
8830: CALL_OW 235
// InGameOff ;
8834: CALL_OW 9
// allowToPatrol := true ;
8838: LD_ADDR_EXP 11
8842: PUSH
8843: LD_INT 1
8845: ST_TO_ADDR
// end ;
8846: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
8847: LD_EXP 4
8851: PUSH
8852: LD_EXP 24
8856: PPUSH
8857: CALL_OW 302
8861: AND
8862: IFFALSE 8911
8864: GO 8866
8866: DISABLE
// begin DialogueOn ;
8867: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
8871: LD_EXP 24
8875: PPUSH
8876: LD_STRING DA-lab-1
8878: PPUSH
8879: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
8883: LD_EXP 24
8887: PPUSH
8888: LD_STRING DA-lab-2
8890: PPUSH
8891: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
8895: LD_EXP 13
8899: PPUSH
8900: LD_STRING DH-lab-3
8902: PPUSH
8903: CALL_OW 88
// DialogueOff ;
8907: CALL_OW 7
// end ;
8911: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
8912: LD_INT 17
8914: PPUSH
8915: LD_INT 2
8917: PPUSH
8918: CALL_OW 321
8922: PUSH
8923: LD_INT 2
8925: EQUAL
8926: IFFALSE 9058
8928: GO 8930
8930: DISABLE
8931: LD_INT 0
8933: PPUSH
// begin DialogueOn ;
8934: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
8938: LD_EXP 24
8942: PPUSH
8943: LD_STRING DA-Cam-1
8945: PPUSH
8946: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
8950: LD_EXP 24
8954: PPUSH
8955: LD_STRING DA-Cam-2
8957: PPUSH
8958: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
8962: LD_EXP 24
8966: PPUSH
8967: LD_STRING DA-Cam-3
8969: PPUSH
8970: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
8974: LD_EXP 13
8978: PPUSH
8979: LD_STRING DH-Cam-4
8981: PPUSH
8982: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
8986: LD_EXP 17
8990: PPUSH
8991: LD_STRING DK-Cam-5
8993: PPUSH
8994: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
8998: LD_EXP 17
9002: PPUSH
9003: LD_STRING DK-Cam-6
9005: PPUSH
9006: CALL_OW 88
// DialogueOff ;
9010: CALL_OW 7
// Query ( Camera ) ;
9014: LD_STRING Camera
9016: PPUSH
9017: CALL_OW 97
// hiddenCameraAllowed := true ;
9021: LD_ADDR_EXP 5
9025: PUSH
9026: LD_INT 1
9028: ST_TO_ADDR
// for i in camAreas do
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: LD_EXP 7
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9056
// SetAreaMapShow ( i , 1 ) ;
9042: LD_VAR 0 1
9046: PPUSH
9047: LD_INT 1
9049: PPUSH
9050: CALL_OW 424
9054: GO 9039
9056: POP
9057: POP
// end ;
9058: PPOPN 1
9060: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
9061: LD_EXP 7
9065: NOT
9066: PUSH
9067: LD_EXP 5
9071: AND
9072: IFFALSE 9163
9074: GO 9076
9076: DISABLE
9077: LD_INT 0
9079: PPUSH
// begin stop_talking := true ;
9080: LD_ADDR_OWVAR 56
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
9088: LD_ADDR_VAR 0 1
9092: PUSH
9093: LD_INT 22
9095: PUSH
9096: LD_INT 2
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: LD_INT 21
9105: PUSH
9106: LD_INT 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 23
9115: PUSH
9116: LD_INT 2
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: PPUSH
9128: CALL_OW 69
9132: PUSH
9133: FOR_IN
9134: IFFALSE 9153
// AddExperience ( i , 2 , 450 ) ;
9136: LD_VAR 0 1
9140: PPUSH
9141: LD_INT 2
9143: PPUSH
9144: LD_INT 450
9146: PPUSH
9147: CALL_OW 492
9151: GO 9133
9153: POP
9154: POP
// stop_talking := false ;
9155: LD_ADDR_OWVAR 56
9159: PUSH
9160: LD_INT 0
9162: ST_TO_ADDR
// end ;
9163: PPOPN 1
9165: END
// every 0 0$2 trigger russianAlert and not allowHeikeAttack do
9166: LD_EXP 8
9170: PUSH
9171: LD_EXP 10
9175: NOT
9176: AND
9177: IFFALSE 9189
9179: GO 9181
9181: DISABLE
// YouLost ( Spotted ) ;
9182: LD_STRING Spotted
9184: PPUSH
9185: CALL_OW 104
9189: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
9190: LD_OWVAR 1
9194: PUSH
9195: LD_INT 13650
9197: PUSH
9198: LD_INT 0
9200: PPUSH
9201: LD_INT 3150
9203: PPUSH
9204: CALL_OW 12
9208: PLUS
9209: GREATEREQUAL
9210: IFFALSE 9219
9212: GO 9214
9214: DISABLE
// SmallAmericanReinforcements ;
9215: CALL 5770 0 0
9219: END
// every 0 0$1 trigger tick >= 9 9$15 do
9220: LD_OWVAR 1
9224: PUSH
9225: LD_INT 19425
9227: GREATEREQUAL
9228: IFFALSE 9293
9230: GO 9232
9232: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
9233: LD_EXP 34
9237: PPUSH
9238: LD_INT 21
9240: PUSH
9241: LD_INT 2
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 72
9252: PPUSH
9253: LD_INT 62
9255: PPUSH
9256: LD_INT 22
9258: PPUSH
9259: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
9263: LD_EXP 35
9267: PPUSH
9268: LD_INT 69
9270: PPUSH
9271: LD_INT 27
9273: PPUSH
9274: CALL_OW 111
// wait ( 1 1$00 ) ;
9278: LD_INT 2100
9280: PPUSH
9281: CALL_OW 67
// startAttackOnOmicron := true ;
9285: LD_ADDR_EXP 6
9289: PUSH
9290: LD_INT 1
9292: ST_TO_ADDR
// end ; end_of_file
9293: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
9294: LD_VAR 0 1
9298: PPUSH
9299: CALL_OW 266
9303: PUSH
9304: LD_INT 0
9306: EQUAL
9307: PUSH
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 255
9317: PUSH
9318: LD_INT 2
9320: EQUAL
9321: AND
9322: IFFALSE 9332
// baseConstructed := true ;
9324: LD_ADDR_EXP 3
9328: PUSH
9329: LD_INT 1
9331: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
9332: LD_VAR 0 1
9336: PPUSH
9337: CALL_OW 266
9341: PUSH
9342: LD_INT 6
9344: EQUAL
9345: PUSH
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 255
9355: PUSH
9356: LD_INT 2
9358: EQUAL
9359: AND
9360: IFFALSE 9370
// labConstructed := true ;
9362: LD_ADDR_EXP 4
9366: PUSH
9367: LD_INT 1
9369: ST_TO_ADDR
// end ;
9370: PPOPN 1
9372: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9373: LD_VAR 0 1
9377: PUSH
9378: LD_EXP 13
9382: EQUAL
9383: IFFALSE 9392
// YouLost ( Heike ) ;
9385: LD_STRING Heike
9387: PPUSH
9388: CALL_OW 104
// if un = omikron then
9392: LD_VAR 0 1
9396: PUSH
9397: LD_INT 64
9399: EQUAL
9400: IFFALSE 9410
// omicronFall := true ;
9402: LD_ADDR_EXP 12
9406: PUSH
9407: LD_INT 1
9409: ST_TO_ADDR
// if un in russianPatrol then
9410: LD_VAR 0 1
9414: PUSH
9415: LD_EXP 33
9419: IN
9420: IFFALSE 9438
// russianPatrol := russianPatrol diff un ;
9422: LD_ADDR_EXP 33
9426: PUSH
9427: LD_EXP 33
9431: PUSH
9432: LD_VAR 0 1
9436: DIFF
9437: ST_TO_ADDR
// end ;
9438: PPOPN 1
9440: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
9441: LD_INT 0
9443: PPUSH
9444: PPUSH
9445: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
9446: LD_VAR 0 1
9450: PUSH
9451: LD_INT 2
9453: PUSH
9454: LD_INT 22
9456: PUSH
9457: LD_INT 3
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 22
9466: PUSH
9467: LD_INT 4
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 6
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 30
9492: PUSH
9493: LD_INT 32
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PPUSH
9504: CALL_OW 69
9508: IN
9509: IFFALSE 9682
// begin sol := UnitsInside ( un ) ;
9511: LD_ADDR_VAR 0 3
9515: PUSH
9516: LD_VAR 0 1
9520: PPUSH
9521: CALL_OW 313
9525: ST_TO_ADDR
// if not sol then
9526: LD_VAR 0 3
9530: NOT
9531: IFFALSE 9535
// exit ;
9533: GO 9682
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
9535: LD_ADDR_VAR 0 4
9539: PUSH
9540: LD_INT 22
9542: PUSH
9543: LD_VAR 0 1
9547: PPUSH
9548: CALL_OW 255
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 2
9559: PUSH
9560: LD_INT 30
9562: PUSH
9563: LD_INT 4
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 30
9572: PUSH
9573: LD_INT 5
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PPUSH
9589: CALL_OW 69
9593: ST_TO_ADDR
// if not nearestBarracks then
9594: LD_VAR 0 4
9598: NOT
9599: IFFALSE 9603
// exit ;
9601: GO 9682
// for i in nearestBarracks do
9603: LD_ADDR_VAR 0 2
9607: PUSH
9608: LD_VAR 0 4
9612: PUSH
9613: FOR_IN
9614: IFFALSE 9649
// if UnitsInside ( i ) = 6 then
9616: LD_VAR 0 2
9620: PPUSH
9621: CALL_OW 313
9625: PUSH
9626: LD_INT 6
9628: EQUAL
9629: IFFALSE 9647
// nearestBarracks := nearestBarracks diff i ;
9631: LD_ADDR_VAR 0 4
9635: PUSH
9636: LD_VAR 0 4
9640: PUSH
9641: LD_VAR 0 2
9645: DIFF
9646: ST_TO_ADDR
9647: GO 9613
9649: POP
9650: POP
// if not nearestBarracks then
9651: LD_VAR 0 4
9655: NOT
9656: IFFALSE 9660
// exit ;
9658: GO 9682
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
9660: LD_VAR 0 3
9664: PUSH
9665: LD_INT 1
9667: ARRAY
9668: PPUSH
9669: LD_VAR 0 4
9673: PUSH
9674: LD_INT 1
9676: ARRAY
9677: PPUSH
9678: CALL_OW 120
// end ; end ;
9682: PPOPN 4
9684: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
9685: LD_INT 0
9687: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
9688: LD_EXP 7
9692: NOT
9693: PUSH
9694: LD_EXP 5
9698: NOT
9699: OR
9700: IFFALSE 9704
// exit ;
9702: GO 9772
// for i in camAreas do
9704: LD_ADDR_VAR 0 5
9708: PUSH
9709: LD_EXP 7
9713: PUSH
9714: FOR_IN
9715: IFFALSE 9770
// if InArea ( x , y , i ) then
9717: LD_VAR 0 3
9721: PPUSH
9722: LD_VAR 0 4
9726: PPUSH
9727: LD_VAR 0 5
9731: PPUSH
9732: CALL_OW 309
9736: IFFALSE 9768
// begin SetAreaMapShow ( i , 0 ) ;
9738: LD_VAR 0 5
9742: PPUSH
9743: LD_INT 0
9745: PPUSH
9746: CALL_OW 424
// camAreas := camAreas diff i ;
9750: LD_ADDR_EXP 7
9754: PUSH
9755: LD_EXP 7
9759: PUSH
9760: LD_VAR 0 5
9764: DIFF
9765: ST_TO_ADDR
// break ;
9766: GO 9770
// end ;
9768: GO 9714
9770: POP
9771: POP
// end ; end_of_file
9772: PPOPN 5
9774: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 200 , 160 , 120 ] [ Difficulty ] do
9775: LD_EXP 10
9779: NOT
9780: PUSH
9781: LD_INT 12
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: CALL_OW 287
9791: PUSH
9792: LD_INT 200
9794: PUSH
9795: LD_INT 160
9797: PUSH
9798: LD_INT 120
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: PUSH
9806: LD_OWVAR 67
9810: ARRAY
9811: LESS
9812: AND
9813: IFFALSE 9840
9815: GO 9817
9817: DISABLE
// begin enable ;
9818: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
9819: LD_INT 1
9821: PPUSH
9822: LD_INT 5
9824: PPUSH
9825: CALL_OW 12
9829: PPUSH
9830: LD_INT 12
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: CALL_OW 55
// end ;
9840: END
