// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 857 0 0
// PrepareArabian ;
  12: CALL 1231 0 0
// PrepareAmerican ;
  16: CALL 6760 0 0
// PrepareRussian ;
  20: CALL 2219 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8320 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: PUSH
 565: LD_VAR 0 2
 569: NOT
 570: OR
 571: IFFALSE 575
// exit ;
 573: GO 623
// if not See ( GetSide ( observer ) , unit ) then
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 255
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 292
 594: NOT
 595: IFFALSE 599
// exit ;
 597: GO 623
// result := GetDistUnits ( observer , unit ) < 12 ;
 599: LD_ADDR_VAR 0 3
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_VAR 0 2
 613: PPUSH
 614: CALL_OW 296
 618: PUSH
 619: LD_INT 12
 621: LESS
 622: ST_TO_ADDR
// end ;
 623: LD_VAR 0 3
 627: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 628: LD_INT 0
 630: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 631: LD_VAR 0 2
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: LD_VAR 0 2
 644: PUSH
 645: LD_INT 2
 647: ARRAY
 648: PPUSH
 649: CALL_OW 488
 653: PUSH
 654: LD_VAR 0 2
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: LD_VAR 0 2
 667: PUSH
 668: LD_INT 2
 670: ARRAY
 671: PPUSH
 672: CALL_OW 428
 676: PUSH
 677: LD_INT 0
 679: EQUAL
 680: AND
 681: IFFALSE 715
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 683: LD_VAR 0 1
 687: PPUSH
 688: LD_VAR 0 2
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 2
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 3
 710: PPUSH
 711: CALL_OW 48
// end ;
 715: LD_VAR 0 4
 719: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
// InitUc ;
 724: CALL_OW 18
// InitHc ;
 728: CALL_OW 19
// uc_side := 0 ;
 732: LD_ADDR_OWVAR 20
 736: PUSH
 737: LD_INT 0
 739: ST_TO_ADDR
// uc_nation := 0 ;
 740: LD_ADDR_OWVAR 21
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// for i = 1 to amount do
 748: LD_ADDR_VAR 0 4
 752: PUSH
 753: DOUBLE
 754: LD_INT 1
 756: DEC
 757: ST_TO_ADDR
 758: LD_VAR 0 2
 762: PUSH
 763: FOR_TO
 764: IFFALSE 846
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 766: LD_ADDR_OWVAR 29
 770: PUSH
 771: LD_INT 9
 773: PPUSH
 774: LD_INT 12
 776: PPUSH
 777: CALL_OW 12
 781: PUSH
 782: LD_INT 9
 784: PPUSH
 785: LD_INT 12
 787: PPUSH
 788: CALL_OW 12
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 797: LD_ADDR_OWVAR 35
 801: PUSH
 802: LD_INT 1
 804: NEG
 805: PPUSH
 806: LD_INT 1
 808: PPUSH
 809: CALL_OW 12
 813: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 814: LD_INT 0
 816: PPUSH
 817: LD_INT 12
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 827: CALL_OW 44
 831: PPUSH
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// end ;
 844: GO 763
 846: POP
 847: POP
// InitHc ;
 848: CALL_OW 19
// end ;
 852: LD_VAR 0 3
 856: RET
// export function CreateNature ; var i ; begin
 857: LD_INT 0
 859: PPUSH
 860: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 861: LD_INT 18
 863: PPUSH
 864: LD_INT 5
 866: PUSH
 867: LD_INT 4
 869: PUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL 720 0 2
// for i := 1 to 3 do
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: DOUBLE
 898: LD_INT 1
 900: DEC
 901: ST_TO_ADDR
 902: LD_INT 3
 904: PUSH
 905: FOR_TO
 906: IFFALSE 941
// begin hc_class := 21 ;
 908: LD_ADDR_OWVAR 28
 912: PUSH
 913: LD_INT 21
 915: ST_TO_ADDR
// hc_gallery :=  ;
 916: LD_ADDR_OWVAR 33
 920: PUSH
 921: LD_STRING 
 923: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 924: CALL_OW 44
 928: PPUSH
 929: LD_INT 18
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// end ;
 939: GO 905
 941: POP
 942: POP
// for i := 1 to 2 do
 943: LD_ADDR_VAR 0 2
 947: PUSH
 948: DOUBLE
 949: LD_INT 1
 951: DEC
 952: ST_TO_ADDR
 953: LD_INT 2
 955: PUSH
 956: FOR_TO
 957: IFFALSE 992
// begin hc_class := 18 ;
 959: LD_ADDR_OWVAR 28
 963: PUSH
 964: LD_INT 18
 966: ST_TO_ADDR
// hc_gallery :=  ;
 967: LD_ADDR_OWVAR 33
 971: PUSH
 972: LD_STRING 
 974: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 975: CALL_OW 44
 979: PPUSH
 980: LD_INT 18
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 49
// end ;
 990: GO 956
 992: POP
 993: POP
// for i := 1 to 2 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 2
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1043
// begin hc_class := 13 ;
1010: LD_ADDR_OWVAR 28
1014: PUSH
1015: LD_INT 13
1017: ST_TO_ADDR
// hc_gallery :=  ;
1018: LD_ADDR_OWVAR 33
1022: PUSH
1023: LD_STRING 
1025: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1026: CALL_OW 44
1030: PPUSH
1031: LD_INT 18
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end ;
1041: GO 1007
1043: POP
1044: POP
// end ;
1045: LD_VAR 0 1
1049: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1050: LD_INT 0
1052: PPUSH
1053: PPUSH
1054: PPUSH
1055: PPUSH
1056: PPUSH
// result := false ;
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// if not sideList or not enemySide then
1065: LD_VAR 0 1
1069: NOT
1070: PUSH
1071: LD_VAR 0 2
1075: NOT
1076: OR
1077: IFFALSE 1081
// exit ;
1079: GO 1226
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1081: LD_ADDR_VAR 0 7
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 69
1102: ST_TO_ADDR
// if not tmp then
1103: LD_VAR 0 7
1107: NOT
1108: IFFALSE 1112
// exit ;
1110: GO 1226
// for s in sideList do
1112: LD_ADDR_VAR 0 6
1116: PUSH
1117: LD_VAR 0 1
1121: PUSH
1122: FOR_IN
1123: IFFALSE 1224
// for i in tmp do
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_VAR 0 7
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1220
// if See ( s , i ) then
1138: LD_VAR 0 6
1142: PPUSH
1143: LD_VAR 0 5
1147: PPUSH
1148: CALL_OW 292
1152: IFFALSE 1218
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1154: LD_ADDR_VAR 0 8
1158: PUSH
1159: LD_INT 22
1161: PUSH
1162: LD_VAR 0 6
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 69
1175: PPUSH
1176: LD_VAR 0 5
1180: PPUSH
1181: CALL_OW 74
1185: ST_TO_ADDR
// if tmp2 in exceptUnits then
1186: LD_VAR 0 8
1190: PUSH
1191: LD_VAR 0 3
1195: IN
1196: IFFALSE 1202
// continue else
1198: GO 1135
1200: GO 1218
// begin result := tmp2 ;
1202: LD_ADDR_VAR 0 4
1206: PUSH
1207: LD_VAR 0 8
1211: ST_TO_ADDR
// exit ;
1212: POP
1213: POP
1214: POP
1215: POP
1216: GO 1226
// end ; end ;
1218: GO 1135
1220: POP
1221: POP
1222: GO 1122
1224: POP
1225: POP
// end ; end_of_file
1226: LD_VAR 0 4
1230: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
// if cargoRecycled then
1235: LD_EXP 25
1239: IFFALSE 1267
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1241: LD_INT 82
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1254: LD_INT 83
1256: PPUSH
1257: LD_INT 2
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 322
// end ; uc_side := 5 ;
1267: LD_ADDR_OWVAR 20
1271: PUSH
1272: LD_INT 5
1274: ST_TO_ADDR
// uc_nation := 2 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 2
1282: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1283: LD_ADDR_EXP 37
1287: PUSH
1288: LD_STRING Abdul
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: LD_STRING 
1296: PPUSH
1297: CALL 38595 0 3
1301: ST_TO_ADDR
// uc_side := 2 ;
1302: LD_ADDR_OWVAR 20
1306: PUSH
1307: LD_INT 2
1309: ST_TO_ADDR
// uc_nation := 2 ;
1310: LD_ADDR_OWVAR 21
1314: PUSH
1315: LD_INT 2
1317: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Heike
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 38595 0 3
1341: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Ibrahim
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 38595 0 3
1365: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 27
1370: PUSH
1371: LD_STRING Givi
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 38595 0 3
1389: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_STRING Kamil
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 38595 0 3
1413: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 31
1418: PUSH
1419: LD_STRING Kaia
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 38595 0 3
1437: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 32
1442: PUSH
1443: LD_STRING Sophia
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 38595 0 3
1461: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1462: LD_ADDR_EXP 33
1466: PUSH
1467: LD_STRING Markov
1469: PPUSH
1470: LD_EXP 1
1474: NOT
1475: PPUSH
1476: LD_EXP 2
1480: PPUSH
1481: CALL 38595 0 3
1485: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1486: LD_ADDR_EXP 36
1490: PUSH
1491: LD_STRING Aviradze
1493: PPUSH
1494: LD_EXP 1
1498: NOT
1499: PPUSH
1500: LD_EXP 2
1504: PPUSH
1505: CALL 38595 0 3
1509: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1510: LD_ADDR_EXP 40
1514: PUSH
1515: EMPTY
1516: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1517: LD_ADDR_EXP 38
1521: PUSH
1522: LD_STRING 03_others
1524: PPUSH
1525: CALL_OW 31
1529: ST_TO_ADDR
// uc_side := 5 ;
1530: LD_ADDR_OWVAR 20
1534: PUSH
1535: LD_INT 5
1537: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1538: LD_ADDR_EXP 35
1542: PUSH
1543: LD_STRING Kurt
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: LD_STRING 
1551: PPUSH
1552: CALL 38595 0 3
1556: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 28
1561: PUSH
1562: LD_STRING Mike
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 38595 0 3
1580: ST_TO_ADDR
// if Mike then
1581: LD_EXP 28
1585: IFFALSE 1608
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1587: LD_EXP 28
1591: PPUSH
1592: LD_INT 142
1594: PPUSH
1595: LD_INT 63
1597: PPUSH
1598: LD_INT 2
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1608: LD_EXP 35
1612: PPUSH
1613: LD_INT 142
1615: PPUSH
1616: LD_INT 63
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1629: LD_EXP 35
1633: PUSH
1634: LD_EXP 28
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 140
// end ;
1647: LD_VAR 0 1
1651: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1652: LD_INT 0
1654: PPUSH
1655: PPUSH
1656: PPUSH
1657: PPUSH
// uc_side := 5 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 5
1665: ST_TO_ADDR
// uc_nation := 2 ;
1666: LD_ADDR_OWVAR 21
1670: PUSH
1671: LD_INT 2
1673: ST_TO_ADDR
// InitHc ;
1674: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1678: LD_ADDR_EXP 34
1682: PUSH
1683: LD_STRING Omar
1685: PPUSH
1686: LD_INT 0
1688: PPUSH
1689: LD_STRING 
1691: PPUSH
1692: CALL 38595 0 3
1696: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1697: LD_EXP 34
1701: PPUSH
1702: LD_INT 284
1704: PPUSH
1705: LD_INT 163
1707: PPUSH
1708: LD_INT 0
1710: PPUSH
1711: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1715: LD_EXP 34
1719: PPUSH
1720: LD_INT 256
1722: PPUSH
1723: LD_INT 129
1725: PPUSH
1726: CALL_OW 111
// wait ( 0 0$2 ) ;
1730: LD_INT 70
1732: PPUSH
1733: CALL_OW 67
// omarSquad := [ ] ;
1737: LD_ADDR_EXP 39
1741: PUSH
1742: EMPTY
1743: ST_TO_ADDR
// for i := 1 to 5 do
1744: LD_ADDR_VAR 0 2
1748: PUSH
1749: DOUBLE
1750: LD_INT 1
1752: DEC
1753: ST_TO_ADDR
1754: LD_INT 5
1756: PUSH
1757: FOR_TO
1758: IFFALSE 1964
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1760: LD_INT 5
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 14
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 2
1783: MOD
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: ARRAY
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: LD_INT 25
1798: PUSH
1799: LD_INT 27
1801: PUSH
1802: LD_INT 26
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 3
1817: MOD
1818: PUSH
1819: LD_INT 1
1821: PLUS
1822: ARRAY
1823: PPUSH
1824: LD_INT 100
1826: PPUSH
1827: CALL 386 0 7
// veh := CreateVehicle ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: CALL_OW 45
1840: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1841: LD_VAR 0 4
1845: PPUSH
1846: LD_INT 5
1848: PPUSH
1849: CALL_OW 233
// omarSquad := omarSquad union veh ;
1853: LD_ADDR_EXP 39
1857: PUSH
1858: LD_EXP 39
1862: PUSH
1863: LD_VAR 0 4
1867: UNION
1868: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 284
1876: PPUSH
1877: LD_INT 163
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1887: LD_INT 0
1889: PPUSH
1890: LD_INT 3
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL_OW 380
// un := CreateHuman ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: CALL_OW 44
1909: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1910: LD_ADDR_EXP 39
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_VAR 0 3
1924: UNION
1925: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1926: LD_VAR 0 3
1930: PPUSH
1931: LD_VAR 0 4
1935: PPUSH
1936: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 271
1947: PPUSH
1948: LD_INT 144
1950: PPUSH
1951: CALL_OW 111
// wait ( 0 0$2 ) ;
1955: LD_INT 70
1957: PPUSH
1958: CALL_OW 67
// end ;
1962: GO 1757
1964: POP
1965: POP
// for i := 1 to 3 do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_INT 3
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2063
// begin PrepareHuman ( false , 1 , 2 ) ;
1982: LD_INT 0
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 380
// un := CreateHuman ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: CALL_OW 44
2004: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2005: LD_ADDR_EXP 39
2009: PUSH
2010: LD_EXP 39
2014: PUSH
2015: LD_VAR 0 3
2019: UNION
2020: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 284
2028: PPUSH
2029: LD_INT 163
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2039: LD_VAR 0 3
2043: PPUSH
2044: LD_INT 257
2046: PPUSH
2047: LD_INT 138
2049: PPUSH
2050: CALL_OW 111
// wait ( 0 0$1 ) ;
2054: LD_INT 35
2056: PPUSH
2057: CALL_OW 67
// end ;
2061: GO 1979
2063: POP
2064: POP
// for i := 1 to 6 do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_INT 6
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2212
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2081: LD_INT 0
2083: PPUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 4
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_VAR 0 2
2102: PUSH
2103: LD_INT 3
2105: MOD
2106: PUSH
2107: LD_INT 1
2109: PLUS
2110: ARRAY
2111: PPUSH
2112: LD_INT 3
2114: PPUSH
2115: CALL_OW 380
// un := CreateHuman ;
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: CALL_OW 44
2128: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2129: LD_ADDR_EXP 39
2133: PUSH
2134: LD_EXP 39
2138: PUSH
2139: LD_VAR 0 3
2143: UNION
2144: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 225
2152: PPUSH
2153: LD_INT 163
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 48
// if i = 1 then
2163: LD_VAR 0 2
2167: PUSH
2168: LD_INT 1
2170: EQUAL
2171: IFFALSE 2188
// SetAttr ( un , attr_speed , 12 ) ;
2173: LD_VAR 0 3
2177: PPUSH
2178: LD_INT 2
2180: PPUSH
2181: LD_INT 12
2183: PPUSH
2184: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 222
2195: PPUSH
2196: LD_INT 157
2198: PPUSH
2199: CALL_OW 111
// wait ( 0 0$1 ) ;
2203: LD_INT 35
2205: PPUSH
2206: CALL_OW 67
// end ;
2210: GO 2078
2212: POP
2213: POP
// end ; end_of_file
2214: LD_VAR 0 1
2218: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2219: LD_INT 0
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 149
2232: PPUSH
2233: LD_INT 67
2235: PPUSH
2236: CALL_OW 428
2240: PPUSH
2241: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2245: LD_ADDR_EXP 51
2249: PUSH
2250: LD_INT 111
2252: PPUSH
2253: LD_INT 89
2255: PPUSH
2256: CALL_OW 428
2260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_INT 21
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 23
2278: PUSH
2279: LD_INT 3
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 69
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2312
// SetBLevel ( i , 5 ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL_OW 241
2310: GO 2295
2312: POP
2313: POP
// SetBName ( kirov , kirov ) ;
2314: LD_INT 71
2316: PPUSH
2317: LD_STRING kirov
2319: PPUSH
2320: CALL_OW 500
// SetBName ( beria , beria ) ;
2324: LD_INT 106
2326: PPUSH
2327: LD_STRING beria
2329: PPUSH
2330: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2334: LD_INT 112
2336: PPUSH
2337: LD_STRING kagan
2339: PPUSH
2340: CALL_OW 500
// uc_side := 6 ;
2344: LD_ADDR_OWVAR 20
2348: PUSH
2349: LD_INT 6
2351: ST_TO_ADDR
// uc_nation := 3 ;
2352: LD_ADDR_OWVAR 21
2356: PUSH
2357: LD_INT 3
2359: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_INT 22
2367: PUSH
2368: LD_INT 6
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 30
2377: PUSH
2378: LD_INT 5
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: LD_INT 1
2396: ARRAY
2397: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 6
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 30
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2436: LD_ADDR_EXP 45
2440: PUSH
2441: EMPTY
2442: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2443: LD_ADDR_EXP 46
2447: PUSH
2448: EMPTY
2449: ST_TO_ADDR
// russianPatrol := [ ] ;
2450: LD_ADDR_EXP 48
2454: PUSH
2455: EMPTY
2456: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2457: LD_ADDR_EXP 41
2461: PUSH
2462: LD_STRING Kurin
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 38595 0 3
2475: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2476: LD_EXP 41
2480: PPUSH
2481: LD_INT 71
2483: PPUSH
2484: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2488: LD_ADDR_EXP 43
2492: PUSH
2493: LD_STRING Popov
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_STRING 
2501: PPUSH
2502: CALL 38595 0 3
2506: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2507: LD_EXP 43
2511: PPUSH
2512: LD_INT 71
2514: PPUSH
2515: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2519: LD_ADDR_EXP 42
2523: PUSH
2524: LD_STRING Grishko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 38595 0 3
2537: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2538: LD_EXP 42
2542: PPUSH
2543: LD_INT 207
2545: PPUSH
2546: LD_INT 106
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2556: LD_EXP 42
2560: PPUSH
2561: LD_INT 209
2563: PPUSH
2564: LD_INT 106
2566: PPUSH
2567: CALL_OW 118
// for i := 1 to 2 do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: DOUBLE
2577: LD_INT 1
2579: DEC
2580: ST_TO_ADDR
2581: LD_INT 2
2583: PUSH
2584: FOR_TO
2585: IFFALSE 2640
// begin PrepareHuman ( false , 2 , 2 ) ;
2587: LD_INT 0
2589: PPUSH
2590: LD_INT 2
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 380
// un := CreateHuman ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: CALL_OW 44
2609: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2610: LD_VAR 0 3
2614: PPUSH
2615: LD_INT 71
2617: PPUSH
2618: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2622: LD_ADDR_EXP 45
2626: PUSH
2627: LD_EXP 45
2631: PUSH
2632: LD_VAR 0 3
2636: UNION
2637: ST_TO_ADDR
// end ;
2638: GO 2584
2640: POP
2641: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: DOUBLE
2648: LD_INT 1
2650: DEC
2651: ST_TO_ADDR
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: LD_INT 6
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_OWVAR 67
2674: ARRAY
2675: PUSH
2676: FOR_TO
2677: IFFALSE 2755
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2679: LD_INT 0
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 4
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_OWVAR 67
2707: ARRAY
2708: PPUSH
2709: CALL_OW 380
// un := CreateHuman ;
2713: LD_ADDR_VAR 0 3
2717: PUSH
2718: CALL_OW 44
2722: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2723: LD_VAR 0 3
2727: PPUSH
2728: LD_VAR 0 5
2732: PPUSH
2733: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2737: LD_ADDR_EXP 45
2741: PUSH
2742: LD_EXP 45
2746: PUSH
2747: LD_VAR 0 3
2751: UNION
2752: ST_TO_ADDR
// end ;
2753: GO 2676
2755: POP
2756: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2757: LD_ADDR_VAR 0 2
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_INT 6
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 30
2774: PUSH
2775: LD_INT 32
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: PUSH
2791: FOR_IN
2792: IFFALSE 2870
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2794: LD_INT 0
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PUSH
2803: LD_INT 4
2805: PUSH
2806: LD_INT 4
2808: PUSH
2809: LD_INT 5
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: LD_OWVAR 67
2822: ARRAY
2823: PPUSH
2824: CALL_OW 380
// un := CreateHuman ;
2828: LD_ADDR_VAR 0 3
2832: PUSH
2833: CALL_OW 44
2837: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2852: LD_ADDR_EXP 45
2856: PUSH
2857: LD_EXP 45
2861: PUSH
2862: LD_VAR 0 3
2866: UNION
2867: ST_TO_ADDR
// end ;
2868: GO 2791
2870: POP
2871: POP
// for i := 1 to 3 do
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: DOUBLE
2878: LD_INT 1
2880: DEC
2881: ST_TO_ADDR
2882: LD_INT 3
2884: PUSH
2885: FOR_TO
2886: IFFALSE 2941
// begin PrepareHuman ( false , 3 , 3 ) ;
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: CALL_OW 380
// un := CreateHuman ;
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: CALL_OW 44
2910: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_INT 92
2918: PPUSH
2919: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2923: LD_ADDR_EXP 45
2927: PUSH
2928: LD_EXP 45
2932: PUSH
2933: LD_VAR 0 3
2937: UNION
2938: ST_TO_ADDR
// end ;
2939: GO 2885
2941: POP
2942: POP
// for i := 1 to 2 do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_INT 2
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3012
// begin PrepareHuman ( false , 4 , 3 ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: CALL_OW 380
// un := CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 83
2989: PPUSH
2990: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2994: LD_ADDR_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PUSH
3004: LD_VAR 0 3
3008: UNION
3009: ST_TO_ADDR
// end ;
3010: GO 2956
3012: POP
3013: POP
// for i := 1 to 5 do
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: DOUBLE
3020: LD_INT 1
3022: DEC
3023: ST_TO_ADDR
3024: LD_INT 5
3026: PUSH
3027: FOR_TO
3028: IFFALSE 3085
// begin PrepareHuman ( false , 1 , 3 ) ;
3030: LD_INT 0
3032: PPUSH
3033: LD_INT 1
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: CALL_OW 380
// un := CreateHuman ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: CALL_OW 44
3052: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3053: LD_VAR 0 3
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3067: LD_ADDR_EXP 47
3071: PUSH
3072: LD_EXP 47
3076: PUSH
3077: LD_VAR 0 3
3081: UNION
3082: ST_TO_ADDR
// end ;
3083: GO 3027
3085: POP
3086: POP
// russianCargo := [ ] ;
3087: LD_ADDR_EXP 50
3091: PUSH
3092: EMPTY
3093: ST_TO_ADDR
// for i := 1 to 2 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 2
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3240
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3110: LD_INT 6
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 21
3118: PPUSH
3119: LD_INT 1
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 51
3127: PPUSH
3128: LD_INT 100
3130: PPUSH
3131: CALL 386 0 7
// un := CreateVehicle ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 45
3144: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3145: LD_ADDR_EXP 50
3149: PUSH
3150: LD_EXP 50
3154: PUSH
3155: LD_VAR 0 3
3159: UNION
3160: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: LD_INT 100
3171: PPUSH
3172: CALL_OW 290
// SetDir ( un , 4 ) ;
3176: LD_VAR 0 3
3180: PPUSH
3181: LD_INT 4
3183: PPUSH
3184: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_INT 147
3195: PPUSH
3196: LD_INT 103
3198: PPUSH
3199: LD_INT 4
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_OWVAR 67
3219: PPUSH
3220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3224: CALL_OW 44
3228: PPUSH
3229: LD_VAR 0 3
3233: PPUSH
3234: CALL_OW 52
// end ;
3238: GO 3107
3240: POP
3241: POP
// uc_side := 3 ;
3242: LD_ADDR_OWVAR 20
3246: PUSH
3247: LD_INT 3
3249: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3250: LD_ADDR_EXP 44
3254: PUSH
3255: LD_STRING Burlak
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: LD_STRING 
3263: PPUSH
3264: CALL 38595 0 3
3268: ST_TO_ADDR
// for i := 1 to 5 do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 5
3281: PUSH
3282: FOR_TO
3283: IFFALSE 3376
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 1
3290: PPUSH
3291: LD_OWVAR 67
3295: PUSH
3296: LD_INT 1
3298: PLUS
3299: PPUSH
3300: CALL_OW 380
// un := CreateHuman ;
3304: LD_ADDR_VAR 0 3
3308: PUSH
3309: CALL_OW 44
3313: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3314: LD_VAR 0 3
3318: PPUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 3
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PPUSH
3354: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3358: LD_ADDR_EXP 46
3362: PUSH
3363: LD_EXP 46
3367: PUSH
3368: LD_VAR 0 3
3372: UNION
3373: ST_TO_ADDR
// end ;
3374: GO 3282
3376: POP
3377: POP
// for i := 1 to 2 do
3378: LD_ADDR_VAR 0 2
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_INT 2
3390: PUSH
3391: FOR_TO
3392: IFFALSE 3483
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3394: LD_INT 0
3396: PPUSH
3397: LD_INT 1
3399: PPUSH
3400: LD_OWVAR 67
3404: PUSH
3405: LD_INT 1
3407: PLUS
3408: PPUSH
3409: CALL_OW 380
// un := CreateHuman ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: CALL_OW 44
3422: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 22
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 30
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PPUSH
3452: CALL_OW 69
3456: PUSH
3457: LD_INT 1
3459: ARRAY
3460: PPUSH
3461: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3465: LD_ADDR_EXP 46
3469: PUSH
3470: LD_EXP 46
3474: PUSH
3475: LD_VAR 0 3
3479: UNION
3480: ST_TO_ADDR
// end ;
3481: GO 3391
3483: POP
3484: POP
// for i := 1 to 2 do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: DOUBLE
3491: LD_INT 1
3493: DEC
3494: ST_TO_ADDR
3495: LD_INT 2
3497: PUSH
3498: FOR_TO
3499: IFFALSE 3586
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3501: LD_INT 0
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_OWVAR 67
3511: PPUSH
3512: CALL_OW 380
// un := CreateHuman ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: CALL_OW 44
3525: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_INT 22
3533: PUSH
3534: LD_INT 3
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 7
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 69
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3568: LD_ADDR_EXP 46
3572: PUSH
3573: LD_EXP 46
3577: PUSH
3578: LD_VAR 0 3
3582: UNION
3583: ST_TO_ADDR
// end ;
3584: GO 3498
3586: POP
3587: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3588: LD_INT 0
3590: PPUSH
3591: LD_INT 2
3593: PPUSH
3594: LD_OWVAR 67
3598: PPUSH
3599: CALL_OW 380
// un := CreateHuman ;
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_INT 106
3620: PPUSH
3621: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3625: LD_ADDR_EXP 46
3629: PUSH
3630: LD_EXP 46
3634: PUSH
3635: LD_VAR 0 3
3639: UNION
3640: ST_TO_ADDR
// for i := 1 to 3 do
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 3
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3777
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 3
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 30
3674: PUSH
3675: LD_INT 31
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_VAR 0 2
3695: ARRAY
3696: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 1
3702: PPUSH
3703: LD_OWVAR 67
3707: PPUSH
3708: CALL_OW 380
// un := CreateHuman ;
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: CALL_OW 44
3721: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3722: LD_VAR 0 3
3726: PPUSH
3727: LD_VAR 0 6
3731: PPUSH
3732: CALL_OW 254
3736: PUSH
3737: LD_INT 3
3739: PLUS
3740: PPUSH
3741: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 6
3754: PPUSH
3755: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3759: LD_ADDR_EXP 46
3763: PUSH
3764: LD_EXP 46
3768: PUSH
3769: LD_VAR 0 3
3773: UNION
3774: ST_TO_ADDR
// end ;
3775: GO 3654
3777: POP
3778: POP
// if Difficulty > 1 then
3779: LD_OWVAR 67
3783: PUSH
3784: LD_INT 1
3786: GREATER
3787: IFFALSE 3862
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: LD_INT 23
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 44
3811: PPUSH
3812: LD_INT 100
3814: PPUSH
3815: CALL 386 0 7
3819: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_INT 73
3827: PPUSH
3828: LD_INT 110
3830: PPUSH
3831: LD_INT 0
3833: PPUSH
3834: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 3
3843: PPUSH
3844: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3848: CALL_OW 44
3852: PPUSH
3853: LD_VAR 0 3
3857: PPUSH
3858: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3862: LD_ADDR_EXP 49
3866: PUSH
3867: EMPTY
3868: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 6
3881: PUSH
3882: LD_INT 7
3884: PUSH
3885: LD_INT 8
3887: PUSH
3888: LD_INT 8
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: LD_OWVAR 67
3901: ARRAY
3902: PUSH
3903: FOR_TO
3904: IFFALSE 4128
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3906: LD_INT 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 23
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 2
3929: MOD
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ARRAY
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: LD_INT 43
3944: PUSH
3945: LD_INT 44
3947: PUSH
3948: LD_INT 42
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 3
3963: MOD
3964: PUSH
3965: LD_INT 1
3967: PLUS
3968: ARRAY
3969: PPUSH
3970: LD_INT 100
3972: PPUSH
3973: CALL 386 0 7
// un := CreateVehicle ;
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: CALL_OW 45
3986: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 5
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: PPUSH
4014: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4018: LD_ADDR_EXP 49
4022: PUSH
4023: LD_EXP 49
4027: PUSH
4028: LD_VAR 0 3
4032: UNION
4033: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4034: LD_VAR 0 3
4038: PPUSH
4039: LD_INT 127
4041: PPUSH
4042: LD_INT 89
4044: PPUSH
4045: LD_INT 7
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 50
// uc_side := 3 ;
4055: LD_ADDR_OWVAR 20
4059: PUSH
4060: LD_INT 3
4062: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4063: LD_INT 0
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 380
// un := CreateHuman ;
4076: LD_ADDR_VAR 0 3
4080: PUSH
4081: CALL_OW 44
4085: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4086: LD_ADDR_EXP 49
4090: PUSH
4091: LD_EXP 49
4095: PUSH
4096: LD_VAR 0 3
4100: UNION
4101: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4102: LD_VAR 0 3
4106: PPUSH
4107: LD_EXP 49
4111: PUSH
4112: LD_EXP 49
4116: PUSH
4117: LD_INT 1
4119: MINUS
4120: ARRAY
4121: PPUSH
4122: CALL_OW 52
// end ;
4126: GO 3903
4128: POP
4129: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4130: LD_ADDR_VAR 0 2
4134: PUSH
4135: DOUBLE
4136: LD_INT 1
4138: DEC
4139: ST_TO_ADDR
4140: LD_INT 3
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 6
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: LD_OWVAR 67
4162: ARRAY
4163: PUSH
4164: FOR_TO
4165: IFFALSE 4231
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4167: LD_INT 0
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: LD_OWVAR 67
4177: PPUSH
4178: CALL_OW 380
// un := CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4192: LD_ADDR_EXP 49
4196: PUSH
4197: LD_EXP 49
4201: PUSH
4202: LD_VAR 0 3
4206: UNION
4207: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: LD_INT 91
4215: PPUSH
4216: LD_INT 60
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 50
// end ;
4229: GO 4164
4231: POP
4232: POP
// end ;
4233: LD_VAR 0 1
4237: RET
// every 0 0$3 do var i ;
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
// begin for i := 1 to 4 do
4244: LD_ADDR_VAR 0 1
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 4
4256: PUSH
4257: FOR_TO
4258: IFFALSE 4277
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4260: LD_EXP 47
4264: PUSH
4265: LD_VAR 0 1
4269: ARRAY
4270: PPUSH
4271: CALL_OW 122
4275: GO 4257
4277: POP
4278: POP
// wait ( 3 ) ;
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4286: LD_EXP 47
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: LD_INT 22
4297: PUSH
4298: LD_INT 6
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_INT 31
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PPUSH
4324: LD_EXP 47
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: CALL_OW 74
4337: PPUSH
4338: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4342: LD_EXP 47
4346: PUSH
4347: LD_INT 2
4349: ARRAY
4350: PPUSH
4351: LD_INT 211
4353: PPUSH
4354: LD_INT 107
4356: PPUSH
4357: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4361: LD_EXP 47
4365: PUSH
4366: LD_INT 2
4368: ARRAY
4369: PPUSH
4370: LD_INT 209
4372: PPUSH
4373: LD_INT 106
4375: PPUSH
4376: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4380: LD_EXP 47
4384: PUSH
4385: LD_INT 3
4387: ARRAY
4388: PPUSH
4389: LD_INT 209
4391: PPUSH
4392: LD_INT 103
4394: PPUSH
4395: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4399: LD_EXP 47
4403: PUSH
4404: LD_INT 3
4406: ARRAY
4407: PPUSH
4408: LD_INT 209
4410: PPUSH
4411: LD_INT 106
4413: PPUSH
4414: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4418: LD_EXP 47
4422: PUSH
4423: LD_INT 4
4425: ARRAY
4426: PPUSH
4427: LD_INT 227
4429: PPUSH
4430: LD_INT 117
4432: PPUSH
4433: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4437: LD_EXP 47
4441: PUSH
4442: LD_INT 4
4444: ARRAY
4445: PPUSH
4446: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4450: LD_INT 700
4452: PPUSH
4453: CALL_OW 67
// for i := 3 downto 2 do
4457: LD_ADDR_VAR 0 1
4461: PUSH
4462: DOUBLE
4463: LD_INT 3
4465: INC
4466: ST_TO_ADDR
4467: LD_INT 2
4469: PUSH
4470: FOR_DOWNTO
4471: IFFALSE 4638
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4473: LD_EXP 47
4477: PUSH
4478: LD_VAR 0 1
4482: ARRAY
4483: PPUSH
4484: LD_INT 200
4486: PPUSH
4487: LD_INT 91
4489: PPUSH
4490: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4494: LD_EXP 47
4498: PUSH
4499: LD_VAR 0 1
4503: ARRAY
4504: PPUSH
4505: LD_INT 210
4507: PPUSH
4508: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4512: LD_EXP 47
4516: PUSH
4517: LD_VAR 0 1
4521: ARRAY
4522: PPUSH
4523: LD_INT 224
4525: PPUSH
4526: LD_INT 93
4528: PPUSH
4529: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4533: LD_EXP 47
4537: PUSH
4538: LD_VAR 0 1
4542: ARRAY
4543: PPUSH
4544: LD_INT 210
4546: PPUSH
4547: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4551: LD_EXP 47
4555: PUSH
4556: LD_VAR 0 1
4560: ARRAY
4561: PPUSH
4562: LD_INT 239
4564: PPUSH
4565: LD_INT 123
4567: PPUSH
4568: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4572: LD_EXP 47
4576: PUSH
4577: LD_VAR 0 1
4581: ARRAY
4582: PPUSH
4583: LD_INT 210
4585: PPUSH
4586: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4590: LD_EXP 47
4594: PUSH
4595: LD_VAR 0 1
4599: ARRAY
4600: PPUSH
4601: LD_INT 212
4603: PPUSH
4604: LD_INT 105
4606: PPUSH
4607: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4611: LD_EXP 47
4615: PUSH
4616: LD_VAR 0 1
4620: ARRAY
4621: PPUSH
4622: LD_INT 700
4624: PPUSH
4625: CALL_OW 202
// wait ( 0 0$30 ) ;
4629: LD_INT 1050
4631: PPUSH
4632: CALL_OW 67
// end ;
4636: GO 4470
4638: POP
4639: POP
// until not activeGrishkoAI ;
4640: LD_EXP 10
4644: NOT
4645: IFFALSE 4450
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 221
4654: PPUSH
4655: LD_INT 110
4657: PPUSH
4658: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4662: LD_EXP 47
4666: PPUSH
4667: LD_INT 228
4669: PPUSH
4670: LD_INT 115
4672: PPUSH
4673: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4677: LD_EXP 47
4681: PPUSH
4682: CALL_OW 200
// end ;
4686: PPOPN 1
4688: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4689: LD_EXP 12
4693: IFFALSE 5439
4695: GO 4697
4697: DISABLE
4698: LD_INT 0
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
// begin uc_side := 6 ;
4704: LD_ADDR_OWVAR 20
4708: PUSH
4709: LD_INT 6
4711: ST_TO_ADDR
// uc_nation := 3 ;
4712: LD_ADDR_OWVAR 21
4716: PUSH
4717: LD_INT 3
4719: ST_TO_ADDR
// for i := 1 to 3 do
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_INT 3
4732: PUSH
4733: FOR_TO
4734: IFFALSE 4847
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4736: LD_INT 0
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: LD_INT 2
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_OWVAR 67
4764: ARRAY
4765: PPUSH
4766: CALL_OW 380
// un := CreateHuman ;
4770: LD_ADDR_VAR 0 1
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4780: LD_ADDR_EXP 48
4784: PUSH
4785: LD_EXP 48
4789: PUSH
4790: LD_VAR 0 1
4794: UNION
4795: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4808: LD_VAR 0 1
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4823: LD_VAR 0 1
4827: PPUSH
4828: LD_INT 210
4830: PPUSH
4831: LD_INT 159
4833: PPUSH
4834: CALL_OW 111
// wait ( 0 0$2 ) ;
4838: LD_INT 70
4840: PPUSH
4841: CALL_OW 67
// end ;
4845: GO 4733
4847: POP
4848: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4849: LD_ADDR_VAR 0 4
4853: PUSH
4854: LD_INT 172
4856: PUSH
4857: LD_INT 76
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 150
4866: PUSH
4867: LD_INT 38
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 148
4876: PUSH
4877: LD_INT 9
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 165
4886: PUSH
4887: LD_INT 38
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 191
4902: PUSH
4903: LD_INT 77
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 168
4912: PUSH
4913: LD_INT 42
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 166
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 151
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 221
4948: PUSH
4949: LD_INT 88
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 217
4958: PUSH
4959: LD_INT 64
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 232
4968: PUSH
4969: LD_INT 66
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 200
4978: PUSH
4979: LD_INT 56
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4997: LD_INT 35
4999: PPUSH
5000: CALL_OW 67
// for i := russianPatrol downto 1 do
5004: LD_ADDR_VAR 0 2
5008: PUSH
5009: DOUBLE
5010: LD_EXP 48
5014: INC
5015: ST_TO_ADDR
5016: LD_INT 1
5018: PUSH
5019: FOR_DOWNTO
5020: IFFALSE 5403
// begin if IsDead ( russianPatrol [ i ] ) then
5022: LD_EXP 48
5026: PUSH
5027: LD_VAR 0 2
5031: ARRAY
5032: PPUSH
5033: CALL_OW 301
5037: IFFALSE 5041
// continue ;
5039: GO 5019
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5041: LD_EXP 48
5045: PUSH
5046: LD_VAR 0 2
5050: ARRAY
5051: PPUSH
5052: CALL_OW 256
5056: PUSH
5057: LD_INT 990
5059: LESS
5060: PUSH
5061: LD_EXP 48
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: PPUSH
5072: CALL_OW 110
5076: PUSH
5077: LD_INT 1
5079: EQUAL
5080: AND
5081: IFFALSE 5101
// SetTag ( russianPatrol [ i ] , 2 ) ;
5083: LD_EXP 48
5087: PUSH
5088: LD_VAR 0 2
5092: ARRAY
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5101: LD_EXP 48
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PPUSH
5112: CALL_OW 110
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: IFFALSE 5187
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5122: LD_EXP 48
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: LD_INT 166
5135: PPUSH
5136: LD_INT 101
5138: PPUSH
5139: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5143: LD_EXP 48
5147: PUSH
5148: LD_VAR 0 2
5152: ARRAY
5153: PPUSH
5154: LD_INT 71
5156: PPUSH
5157: CALL_OW 296
5161: PUSH
5162: LD_INT 10
5164: LESS
5165: IFFALSE 5185
// SetTag ( russianPatrol [ i ] , 3 ) ;
5167: LD_EXP 48
5171: PUSH
5172: LD_VAR 0 2
5176: ARRAY
5177: PPUSH
5178: LD_INT 3
5180: PPUSH
5181: CALL_OW 109
// continue ;
5185: GO 5019
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5187: LD_EXP 48
5191: PUSH
5192: LD_VAR 0 2
5196: ARRAY
5197: PPUSH
5198: CALL_OW 110
5202: PUSH
5203: LD_INT 3
5205: EQUAL
5206: IFFALSE 5301
// begin spottedByPatrol := true ;
5208: LD_ADDR_EXP 7
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5216: LD_EXP 48
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: PPUSH
5227: CALL_OW 250
5231: PPUSH
5232: LD_EXP 48
5236: PUSH
5237: LD_VAR 0 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 251
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_INT 6
5253: NEG
5254: PPUSH
5255: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5259: LD_EXP 48
5263: PUSH
5264: LD_VAR 0 2
5268: ARRAY
5269: PPUSH
5270: CALL_OW 87
// DialogueOn ;
5274: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5278: LD_EXP 26
5282: PPUSH
5283: LD_STRING DH-Spot-f-3
5285: PPUSH
5286: CALL_OW 88
// DialogueOff ;
5290: CALL_OW 7
// YouLost ( Spotted ) ;
5294: LD_STRING Spotted
5296: PPUSH
5297: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5301: LD_EXP 48
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PPUSH
5312: CALL_OW 314
5316: NOT
5317: IFFALSE 5401
// for j in patrol [ i ] do
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_VAR 0 4
5328: PUSH
5329: LD_VAR 0 2
5333: ARRAY
5334: PUSH
5335: FOR_IN
5336: IFFALSE 5399
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5338: LD_EXP 48
5342: PUSH
5343: LD_VAR 0 2
5347: ARRAY
5348: PPUSH
5349: LD_INT 35
5351: PPUSH
5352: LD_INT 175
5354: PPUSH
5355: CALL_OW 12
5359: PPUSH
5360: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5364: LD_EXP 48
5368: PUSH
5369: LD_VAR 0 2
5373: ARRAY
5374: PPUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 2
5391: ARRAY
5392: PPUSH
5393: CALL_OW 174
// end ;
5397: GO 5335
5399: POP
5400: POP
// end ;
5401: GO 5019
5403: POP
5404: POP
// until not russianPatrol or russianAlert ;
5405: LD_EXP 48
5409: NOT
5410: PUSH
5411: LD_EXP 9
5415: OR
5416: IFFALSE 4997
// if russianPatrol then
5418: LD_EXP 48
5422: IFFALSE 5439
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5424: LD_EXP 48
5428: PPUSH
5429: LD_INT 161
5431: PPUSH
5432: LD_INT 107
5434: PPUSH
5435: CALL_OW 114
// end ;
5439: PPOPN 4
5441: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5442: LD_EXP 6
5446: PUSH
5447: LD_EXP 13
5451: NOT
5452: AND
5453: IFFALSE 5939
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_EXP 49
5475: PPUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 72
5490: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: ST_TO_ADDR
// for i in filter do
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: FOR_IN
5522: IFFALSE 5937
// begin tmp := IsDrivenBy ( i ) ;
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 311
5538: ST_TO_ADDR
// if not tmp then
5539: LD_VAR 0 3
5543: NOT
5544: IFFALSE 5548
// continue ;
5546: GO 5521
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 261
5557: PUSH
5558: LD_INT 90
5560: GREATER
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 110
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: AND
5576: IFFALSE 5592
// SetTag ( i , 0 ) else
5578: LD_VAR 0 1
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: CALL_OW 109
5590: GO 5688
// if GetTag ( i ) = 2 then
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 110
5601: PUSH
5602: LD_INT 2
5604: EQUAL
5605: IFFALSE 5688
// begin x := rand ( 1 , 2 ) ;
5607: LD_ADDR_VAR 0 5
5611: PUSH
5612: LD_INT 1
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: CALL_OW 12
5622: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_EXP 50
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PPUSH
5639: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5643: LD_EXP 50
5647: PUSH
5648: LD_VAR 0 5
5652: ARRAY
5653: PPUSH
5654: LD_INT 2
5656: PPUSH
5657: CALL_OW 289
5661: PUSH
5662: LD_INT 20
5664: LESS
5665: IFFALSE 5688
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5667: LD_EXP 50
5671: PUSH
5672: LD_VAR 0 5
5676: ARRAY
5677: PPUSH
5678: LD_INT 2
5680: PPUSH
5681: LD_INT 100
5683: PPUSH
5684: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 256
5697: PUSH
5698: LD_INT 600
5700: GREATEREQUAL
5701: PUSH
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 110
5711: NOT
5712: AND
5713: IFFALSE 5739
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5715: LD_VAR 0 1
5719: PPUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL_OW 74
5734: PPUSH
5735: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 256
5748: PUSH
5749: LD_INT 600
5751: LESS
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 110
5762: NOT
5763: AND
5764: IFFALSE 5793
// begin SetTag ( i , 1 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5778: LD_VAR 0 1
5782: PPUSH
5783: LD_INT 62
5785: PPUSH
5786: LD_INT 22
5788: PPUSH
5789: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5793: LD_VAR 0 1
5797: PPUSH
5798: CALL_OW 110
5802: PUSH
5803: LD_INT 1
5805: EQUAL
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 62
5814: PPUSH
5815: LD_INT 22
5817: PPUSH
5818: CALL_OW 297
5822: PUSH
5823: LD_INT 6
5825: LESS
5826: AND
5827: PUSH
5828: LD_VAR 0 3
5832: AND
5833: IFFALSE 5935
// begin ComExitVehicle ( tmp ) ;
5835: LD_VAR 0 3
5839: PPUSH
5840: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5844: LD_VAR 0 3
5848: PPUSH
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5858: LD_INT 35
5860: PPUSH
5861: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 256
5874: PUSH
5875: LD_INT 1000
5877: EQUAL
5878: IFFALSE 5858
// ComEnterUnit ( tmp , i ) ;
5880: LD_VAR 0 3
5884: PPUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 261
5903: PUSH
5904: LD_INT 90
5906: LESSEQUAL
5907: IFFALSE 5923
// SetTag ( i , 2 ) else
5909: LD_VAR 0 1
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: CALL_OW 109
5921: GO 5935
// SetTag ( i , 0 ) ;
5923: LD_VAR 0 1
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 109
// end ; end ;
5935: GO 5521
5937: POP
5938: POP
// end ;
5939: PPOPN 5
5941: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5942: LD_EXP 20
5946: IFFALSE 6169
5948: GO 5950
5950: DISABLE
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5955: LD_EXP 50
5959: PPUSH
5960: LD_INT 79
5962: PPUSH
5963: LD_INT 155
5965: PPUSH
5966: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5970: LD_EXP 50
5974: PPUSH
5975: LD_INT 16
5977: PPUSH
5978: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_EXP 49
5991: PPUSH
5992: LD_INT 50
5994: PUSH
5995: EMPTY
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
// for i in tmp do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_VAR 0 2
6012: PUSH
6013: FOR_IN
6014: IFFALSE 6048
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_INT 123
6023: PPUSH
6024: LD_INT 60
6026: PPUSH
6027: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6031: LD_VAR 0 1
6035: PPUSH
6036: LD_INT 153
6038: PPUSH
6039: LD_INT 103
6041: PPUSH
6042: CALL_OW 174
// end ;
6046: GO 6013
6048: POP
6049: POP
// repeat wait ( 0 0$1 ) ;
6050: LD_INT 35
6052: PPUSH
6053: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_EXP 49
6066: PPUSH
6067: LD_INT 50
6069: PUSH
6070: EMPTY
6071: LIST
6072: PPUSH
6073: CALL_OW 72
6077: ST_TO_ADDR
// for i in tmp do
6078: LD_ADDR_VAR 0 1
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6160
// if not HasTask ( i ) then
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 314
6100: NOT
6101: IFFALSE 6158
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6103: LD_VAR 0 1
6107: PPUSH
6108: LD_INT 81
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 21
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 69
6143: PPUSH
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 74
6153: PPUSH
6154: CALL_OW 115
6158: GO 6088
6160: POP
6161: POP
6162: LD_VAR 0 2
6166: NOT
6167: IFFALSE 6050
// end ;
6169: PPOPN 2
6171: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6172: LD_INT 22
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 32
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: IFFALSE 6279
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
// begin enable ;
6208: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6209: LD_ADDR_VAR 0 1
6213: PUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 32
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: PUSH
6243: FOR_IN
6244: IFFALSE 6277
// if GetFuel ( i ) < 1 then
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL_OW 261
6255: PUSH
6256: LD_INT 1
6258: LESS
6259: IFFALSE 6275
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 311
6270: PPUSH
6271: CALL_OW 121
6275: GO 6243
6277: POP
6278: POP
// end ;
6279: PPOPN 1
6281: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6282: LD_EXP 41
6286: PPUSH
6287: CALL_OW 303
6291: PUSH
6292: LD_EXP 41
6296: PPUSH
6297: CALL_OW 301
6301: OR
6302: PUSH
6303: LD_INT 71
6305: PPUSH
6306: CALL_OW 303
6310: OR
6311: PUSH
6312: LD_INT 71
6314: PPUSH
6315: CALL_OW 301
6319: OR
6320: IFFALSE 6643
6322: GO 6324
6324: DISABLE
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PPUSH
6351: CALL_OW 72
6355: ST_TO_ADDR
// if not tmp then
6356: LD_VAR 0 2
6360: NOT
6361: IFFALSE 6365
// exit ;
6363: GO 6643
// barracks := HexInfo ( 166 , 116 ) ;
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_INT 166
6372: PPUSH
6373: LD_INT 116
6375: PPUSH
6376: CALL_OW 428
6380: ST_TO_ADDR
// for i in tmp do
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_VAR 0 2
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6405
// ComExitBuilding ( i ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 122
6403: GO 6391
6405: POP
6406: POP
// repeat wait ( 0 0$1 ) ;
6407: LD_INT 35
6409: PPUSH
6410: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6414: LD_ADDR_VAR 0 2
6418: PUSH
6419: LD_EXP 45
6423: PPUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 50
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL_OW 72
6448: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 21
6456: PPUSH
6457: LD_INT 81
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 70
6471: ST_TO_ADDR
// if enemy then
6472: LD_VAR 0 3
6476: IFFALSE 6521
// begin for i in tmp do
6478: LD_ADDR_VAR 0 1
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: FOR_IN
6489: IFFALSE 6517
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 74
6510: PPUSH
6511: CALL_OW 115
6515: GO 6488
6517: POP
6518: POP
// end else
6519: GO 6636
// begin for i in tmp do
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_VAR 0 2
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6634
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 314
6543: PUSH
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 21
6551: PPUSH
6552: CALL_OW 308
6556: NOT
6557: OR
6558: IFFALSE 6632
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 600
6572: LESS
6573: PUSH
6574: LD_VAR 0 4
6578: PPUSH
6579: CALL_OW 302
6583: AND
6584: PUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: CALL_OW 313
6594: PUSH
6595: LD_INT 6
6597: LESS
6598: AND
6599: IFFALSE 6617
// ComEnterUnit ( i , barracks ) else
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_VAR 0 4
6610: PPUSH
6611: CALL_OW 120
6615: GO 6632
// ComMoveXY ( i , 162 , 109 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 162
6624: PPUSH
6625: LD_INT 109
6627: PPUSH
6628: CALL_OW 111
6632: GO 6531
6634: POP
6635: POP
// end ; until not tmp ;
6636: LD_VAR 0 2
6640: NOT
6641: IFFALSE 6407
// end ;
6643: PPOPN 4
6645: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6646: LD_INT 106
6648: PPUSH
6649: CALL_OW 303
6653: PUSH
6654: LD_INT 106
6656: PPUSH
6657: CALL_OW 301
6661: OR
6662: IFFALSE 6757
6664: GO 6666
6666: DISABLE
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: LD_EXP 46
6680: PPUSH
6681: LD_INT 25
6683: PUSH
6684: LD_INT 1
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 72
6695: ST_TO_ADDR
// if not tmp then
6696: LD_VAR 0 2
6700: NOT
6701: IFFALSE 6705
// exit ;
6703: GO 6757
// for i in tmp do
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: LD_VAR 0 2
6714: PUSH
6715: FOR_IN
6716: IFFALSE 6755
// begin if IsInUnit ( i ) then
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 310
6727: IFFALSE 6738
// ComExitBuilding ( i ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6738: LD_VAR 0 1
6742: PPUSH
6743: LD_INT 66
6745: PPUSH
6746: LD_INT 128
6748: PPUSH
6749: CALL_OW 171
// end ;
6753: GO 6715
6755: POP
6756: POP
// end ; end_of_file
6757: PPOPN 2
6759: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6760: LD_INT 0
6762: PPUSH
6763: PPUSH
6764: PPUSH
// SetBName ( omikron , omikron ) ;
6765: LD_INT 64
6767: PPUSH
6768: LD_STRING omikron
6770: PPUSH
6771: CALL_OW 500
// uc_side := 4 ;
6775: LD_ADDR_OWVAR 20
6779: PUSH
6780: LD_INT 4
6782: ST_TO_ADDR
// uc_nation := 1 ;
6783: LD_ADDR_OWVAR 21
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// omicronSquad := [ ] ;
6791: LD_ADDR_EXP 52
6795: PUSH
6796: EMPTY
6797: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 32
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 31
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6908
// begin PrepareHuman ( false , 1 , 1 ) ;
6853: LD_INT 0
6855: PPUSH
6856: LD_INT 1
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 380
// un := CreateHuman ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: CALL_OW 44
6875: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6876: LD_ADDR_EXP 52
6880: PUSH
6881: LD_EXP 52
6885: PUSH
6886: LD_VAR 0 3
6890: UNION
6891: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6892: LD_VAR 0 3
6896: PPUSH
6897: LD_VAR 0 2
6901: PPUSH
6902: CALL_OW 52
// end ;
6906: GO 6850
6908: POP
6909: POP
// for i := 1 to 3 do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: DOUBLE
6916: LD_INT 1
6918: DEC
6919: ST_TO_ADDR
6920: LD_INT 3
6922: PUSH
6923: FOR_TO
6924: IFFALSE 6979
// begin PrepareHuman ( false , 2 , 2 ) ;
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 2
6931: PPUSH
6932: LD_INT 2
6934: PPUSH
6935: CALL_OW 380
// un := CreateHuman ;
6939: LD_ADDR_VAR 0 3
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6949: LD_ADDR_EXP 52
6953: PUSH
6954: LD_EXP 52
6958: PUSH
6959: LD_VAR 0 3
6963: UNION
6964: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_INT 64
6972: PPUSH
6973: CALL_OW 52
// end ;
6977: GO 6923
6979: POP
6980: POP
// for i := 1 to 2 do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_INT 2
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7134
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6997: LD_INT 4
6999: PPUSH
7000: LD_INT 1
7002: PPUSH
7003: LD_INT 2
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 3
7014: PPUSH
7015: LD_INT 100
7017: PPUSH
7018: CALL 386 0 7
// un := CreateVehicle ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: CALL_OW 45
7031: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7032: LD_ADDR_EXP 52
7036: PUSH
7037: LD_EXP 52
7041: PUSH
7042: LD_VAR 0 3
7046: UNION
7047: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7048: LD_VAR 0 3
7052: PPUSH
7053: LD_INT 28
7055: PPUSH
7056: LD_INT 37
7058: PPUSH
7059: LD_INT 6
7061: PPUSH
7062: LD_INT 0
7064: PPUSH
7065: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7069: LD_INT 0
7071: PPUSH
7072: LD_INT 3
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: CALL_OW 380
// un := CreateHuman ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7092: LD_ADDR_EXP 52
7096: PUSH
7097: LD_EXP 52
7101: PUSH
7102: LD_VAR 0 3
7106: UNION
7107: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7108: LD_VAR 0 3
7112: PPUSH
7113: LD_EXP 52
7117: PUSH
7118: LD_EXP 52
7122: PUSH
7123: LD_INT 1
7125: MINUS
7126: ARRAY
7127: PPUSH
7128: CALL_OW 52
// end ;
7132: GO 6994
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
// uc_side := 4 ;
7147: LD_ADDR_OWVAR 20
7151: PUSH
7152: LD_INT 4
7154: ST_TO_ADDR
// uc_nation := 1 ;
7155: LD_ADDR_OWVAR 21
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// tmp := [ ] ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: EMPTY
7169: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7170: LD_INT 4
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 1
7184: PPUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_INT 77
7190: PPUSH
7191: CALL 386 0 7
// un := CreateVehicle ;
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: CALL_OW 45
7204: ST_TO_ADDR
// tmp := tmp union un ;
7205: LD_ADDR_VAR 0 4
7209: PUSH
7210: LD_VAR 0 4
7214: PUSH
7215: LD_VAR 0 3
7219: UNION
7220: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_INT 106
7240: PPUSH
7241: LD_INT 3
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7251: LD_INT 0
7253: PPUSH
7254: LD_INT 3
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: CALL_OW 380
// un := CreateHuman ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: CALL_OW 44
7273: ST_TO_ADDR
// tmp := tmp union un ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 4
7283: PUSH
7284: LD_VAR 0 3
7288: UNION
7289: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7290: LD_VAR 0 3
7294: PPUSH
7295: LD_VAR 0 4
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_INT 1
7307: MINUS
7308: ARRAY
7309: PPUSH
7310: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7314: LD_VAR 0 3
7318: PPUSH
7319: LD_INT 109
7321: PPUSH
7322: LD_INT 9
7324: PPUSH
7325: CALL_OW 111
// wait ( 0 0$1 ) ;
7329: LD_INT 35
7331: PPUSH
7332: CALL_OW 67
// for i := 1 to 2 do
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: DOUBLE
7342: LD_INT 1
7344: DEC
7345: ST_TO_ADDR
7346: LD_INT 2
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7414
// begin PrepareHuman ( false , 1 , 2 ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: LD_INT 2
7360: PPUSH
7361: CALL_OW 380
// un := CreateHuman ;
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: CALL_OW 44
7374: ST_TO_ADDR
// tmp := tmp union un ;
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 4
7384: PUSH
7385: LD_VAR 0 3
7389: UNION
7390: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7391: LD_VAR 0 3
7395: PPUSH
7396: LD_INT 105
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: LD_INT 0
7407: PPUSH
7408: CALL_OW 50
// end ;
7412: GO 7349
7414: POP
7415: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7416: LD_VAR 0 4
7420: PPUSH
7421: LD_INT 26
7423: PPUSH
7424: LD_INT 35
7426: PPUSH
7427: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7431: LD_INT 35
7433: PPUSH
7434: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7438: LD_VAR 0 4
7442: PPUSH
7443: LD_INT 50
7445: PUSH
7446: EMPTY
7447: LIST
7448: PPUSH
7449: CALL_OW 72
7453: NOT
7454: IFFALSE 7458
// exit ;
7456: GO 7585
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_INT 91
7465: PUSH
7466: LD_INT 64
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: LD_VAR 0 4
7486: EQUAL
7487: IFFALSE 7431
// omicronSquad := omicronSquad union tmp ;
7489: LD_ADDR_EXP 52
7493: PUSH
7494: LD_EXP 52
7498: PUSH
7499: LD_VAR 0 4
7503: UNION
7504: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_INT 25
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 72
7529: PUSH
7530: FOR_IN
7531: IFFALSE 7583
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: LD_INT 22
7540: PUSH
7541: LD_INT 4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 30
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 69
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 74
7576: PPUSH
7577: CALL_OW 120
7581: GO 7530
7583: POP
7584: POP
// end ;
7585: LD_VAR 0 1
7589: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7590: LD_EXP 13
7594: NOT
7595: IFFALSE 8166
7597: GO 7599
7599: DISABLE
7600: LD_INT 0
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
// begin enable ;
7606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 4
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_EXP 52
7668: PPUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 72
7683: ST_TO_ADDR
// if filter and tmp then
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 3
7693: AND
7694: IFFALSE 7767
// begin for i in tmp do
7696: LD_ADDR_VAR 0 1
7700: PUSH
7701: LD_VAR 0 3
7705: PUSH
7706: FOR_IN
7707: IFFALSE 7763
// if IsInUnit ( i ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 310
7718: IFFALSE 7731
// ComExitBuilding ( i ) else
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 122
7729: GO 7761
// if not HasTask ( i ) then
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 314
7740: NOT
7741: IFFALSE 7761
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7743: LD_VAR 0 1
7747: PPUSH
7748: LD_VAR 0 2
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: CALL_OW 130
7761: GO 7706
7763: POP
7764: POP
// end else
7765: GO 7838
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7767: LD_VAR 0 3
7771: PPUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 54
7777: PUSH
7778: EMPTY
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 72
7789: IFFALSE 7838
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7791: LD_ADDR_VAR 0 1
7795: PUSH
7796: LD_VAR 0 3
7800: PPUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: PUSH
7819: FOR_IN
7820: IFFALSE 7836
// ComEnterUnit ( i , omikron ) ;
7822: LD_VAR 0 1
7826: PPUSH
7827: LD_INT 64
7829: PPUSH
7830: CALL_OW 120
7834: GO 7819
7836: POP
7837: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7838: LD_ADDR_VAR 0 2
7842: PUSH
7843: LD_EXP 52
7847: PPUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 2
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 72
7862: ST_TO_ADDR
// if not filter then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 8166
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_INT 13
7879: PPUSH
7880: LD_INT 81
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 70
7894: ST_TO_ADDR
// if enemy then
7895: LD_VAR 0 4
7899: IFFALSE 8166
// begin for i in filter do
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: FOR_IN
7912: IFFALSE 8164
// begin tmp := IsDrivenBy ( i ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 311
7928: ST_TO_ADDR
// if not tmp then
7929: LD_VAR 0 3
7933: NOT
7934: IFFALSE 7938
// continue ;
7936: GO 7911
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7938: LD_VAR 0 1
7942: PPUSH
7943: CALL_OW 256
7947: PUSH
7948: LD_INT 600
7950: GREATEREQUAL
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 110
7961: PUSH
7962: LD_INT 1
7964: NONEQUAL
7965: AND
7966: IFFALSE 7992
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 4
7977: PPUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 74
7987: PPUSH
7988: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 256
8001: PUSH
8002: LD_INT 600
8004: LESS
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 110
8015: PUSH
8016: LD_INT 1
8018: NONEQUAL
8019: AND
8020: IFFALSE 8049
// begin SetTag ( i , 1 ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_INT 27
8041: PPUSH
8042: LD_INT 35
8044: PPUSH
8045: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 110
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 27
8070: PPUSH
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 297
8078: PUSH
8079: LD_INT 6
8081: LESS
8082: AND
8083: PUSH
8084: LD_VAR 0 3
8088: AND
8089: IFFALSE 8162
// begin ComExitVehicle ( tmp ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8114: LD_INT 35
8116: PPUSH
8117: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 256
8130: PUSH
8131: LD_INT 1000
8133: EQUAL
8134: IFFALSE 8114
// ComEnterUnit ( tmp , i ) ;
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 120
// SetTag ( i , 0 ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 0
8157: PPUSH
8158: CALL_OW 109
// end ; end ;
8162: GO 7911
8164: POP
8165: POP
// end ; end ;
8166: PPOPN 4
8168: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8169: LD_EXP 13
8173: IFFALSE 8317
8175: GO 8177
8177: DISABLE
8178: LD_INT 0
8180: PPUSH
8181: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_EXP 52
8191: PPUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 50
8204: PUSH
8205: EMPTY
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 72
8216: ST_TO_ADDR
// if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8226
// exit ;
8224: GO 8317
// repeat wait ( 0 0$1 ) ;
8226: LD_INT 35
8228: PPUSH
8229: CALL_OW 67
// for i in tmp do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8308
// begin ComExit ( i ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: CALL 76695 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 14
8262: PPUSH
8263: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_INT 14
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8306
// begin tmp := tmp diff i ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 1
8295: DIFF
8296: ST_TO_ADDR
// RemoveUnit ( i ) ;
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 64
// end ; end ;
8306: GO 8243
8308: POP
8309: POP
// until not tmp ;
8310: LD_VAR 0 2
8314: NOT
8315: IFFALSE 8226
// end ; end_of_file
8317: PPOPN 2
8319: END
// export function Action ; var i , un , veh , tmp ; begin
8320: LD_INT 0
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
8326: PPUSH
// InGameOn ;
8327: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8331: LD_INT 179
8333: PPUSH
8334: LD_INT 5
8336: PPUSH
8337: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8341: LD_ADDR_VAR 0 4
8345: PUSH
8346: LD_INT 2
8348: PPUSH
8349: LD_INT 2
8351: PPUSH
8352: LD_INT 12
8354: PPUSH
8355: LD_INT 1
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 24
8363: PPUSH
8364: LD_INT 33
8366: PPUSH
8367: CALL 386 0 7
8371: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 2
8379: PPUSH
8380: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8384: LD_VAR 0 4
8388: PPUSH
8389: LD_INT 178
8391: PPUSH
8392: LD_INT 2
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8402: LD_EXP 26
8406: PPUSH
8407: LD_VAR 0 4
8411: PPUSH
8412: CALL_OW 52
// if Kamil then
8416: LD_EXP 30
8420: IFFALSE 8455
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8422: LD_EXP 30
8426: PPUSH
8427: LD_INT 207
8429: PPUSH
8430: LD_INT 37
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8440: LD_EXP 30
8444: PPUSH
8445: LD_INT 211
8447: PPUSH
8448: LD_INT 38
8450: PPUSH
8451: CALL_OW 118
// end ; if Sophia then
8455: LD_EXP 32
8459: IFFALSE 8494
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8461: LD_EXP 32
8465: PPUSH
8466: LD_INT 209
8468: PPUSH
8469: LD_INT 40
8471: PPUSH
8472: LD_INT 0
8474: PPUSH
8475: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8479: LD_EXP 32
8483: PPUSH
8484: LD_INT 211
8486: PPUSH
8487: LD_INT 38
8489: PPUSH
8490: CALL_OW 118
// end ; if Givi then
8494: LD_EXP 27
8498: IFFALSE 8533
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8500: LD_EXP 27
8504: PPUSH
8505: LD_INT 201
8507: PPUSH
8508: LD_INT 34
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8518: LD_EXP 27
8522: PPUSH
8523: LD_INT 206
8525: PPUSH
8526: LD_INT 36
8528: PPUSH
8529: CALL_OW 118
// end ; if Ibrahim then
8533: LD_EXP 29
8537: IFFALSE 8572
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8539: LD_EXP 29
8543: PPUSH
8544: LD_INT 202
8546: PPUSH
8547: LD_INT 39
8549: PPUSH
8550: LD_INT 0
8552: PPUSH
8553: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8557: LD_EXP 29
8561: PPUSH
8562: LD_INT 206
8564: PPUSH
8565: LD_INT 36
8567: PPUSH
8568: CALL_OW 118
// end ; if Markov then
8572: LD_EXP 33
8576: IFFALSE 8663
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_INT 2
8585: PPUSH
8586: LD_INT 2
8588: PPUSH
8589: LD_INT 13
8591: PPUSH
8592: LD_INT 1
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: LD_INT 25
8600: PPUSH
8601: LD_INT 80
8603: PUSH
8604: LD_INT 20
8606: PUSH
8607: LD_OWVAR 67
8611: MUL
8612: MINUS
8613: PPUSH
8614: CALL 386 0 7
8618: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8619: LD_VAR 0 4
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8631: LD_VAR 0 4
8635: PPUSH
8636: LD_INT 197
8638: PPUSH
8639: LD_INT 35
8641: PPUSH
8642: LD_INT 0
8644: PPUSH
8645: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8649: LD_EXP 33
8653: PPUSH
8654: LD_VAR 0 4
8658: PPUSH
8659: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: LD_EXP 31
8672: PUSH
8673: LD_EXP 38
8677: UNION
8678: ST_TO_ADDR
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 5
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8724
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 203
8699: PPUSH
8700: LD_INT 41
8702: PPUSH
8703: LD_INT 6
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 50
// ComHold ( i ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: CALL_OW 140
// end ;
8722: GO 8689
8724: POP
8725: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8726: LD_INT 22
8728: PUSH
8729: LD_INT 2
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 69
8754: NOT
8755: IFFALSE 8769
// SetClass ( Heike , 2 ) ;
8757: LD_EXP 26
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8769: LD_EXP 26
8773: PPUSH
8774: LD_INT 183
8776: PPUSH
8777: LD_INT 12
8779: PPUSH
8780: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8784: LD_EXP 26
8788: PPUSH
8789: LD_INT 188
8791: PPUSH
8792: LD_INT 20
8794: PPUSH
8795: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8799: LD_EXP 26
8803: PPUSH
8804: LD_INT 191
8806: PPUSH
8807: LD_INT 25
8809: PPUSH
8810: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8814: LD_EXP 26
8818: PPUSH
8819: LD_INT 203
8821: PPUSH
8822: LD_INT 29
8824: PPUSH
8825: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8829: LD_EXP 26
8833: PPUSH
8834: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8838: LD_INT 35
8840: PPUSH
8841: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8845: LD_EXP 26
8849: PPUSH
8850: CALL_OW 310
8854: NOT
8855: IFFALSE 8838
// CenterOnUnits ( Heike ) ;
8857: LD_EXP 26
8861: PPUSH
8862: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8866: LD_ADDR_VAR 0 5
8870: PUSH
8871: LD_INT 22
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 21
8883: PUSH
8884: LD_INT 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: PUSH
8900: LD_EXP 26
8904: PUSH
8905: LD_EXP 33
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: DIFF
8914: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8915: LD_VAR 0 5
8919: PPUSH
8920: LD_EXP 26
8924: PPUSH
8925: CALL_OW 119
// if Givi then
8929: LD_EXP 27
8933: IFFALSE 8951
// ComTurnUnit ( Heike , Givi ) else
8935: LD_EXP 26
8939: PPUSH
8940: LD_EXP 27
8944: PPUSH
8945: CALL_OW 119
8949: GO 8969
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8951: LD_EXP 26
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8969: LD_EXP 26
8973: PPUSH
8974: LD_STRING DH-Start-1
8976: PPUSH
8977: CALL_OW 88
// if Givi then
8981: LD_EXP 27
8985: IFFALSE 9032
// begin Say ( Givi , DG-Start-2 ) ;
8987: LD_EXP 27
8991: PPUSH
8992: LD_STRING DG-Start-2
8994: PPUSH
8995: CALL_OW 88
// if not Mike then
8999: LD_EXP 28
9003: NOT
9004: IFFALSE 9030
// begin Say ( Givi , DG-Start-b-3 ) ;
9006: LD_EXP 27
9010: PPUSH
9011: LD_STRING DG-Start-b-3
9013: PPUSH
9014: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9018: LD_EXP 26
9022: PPUSH
9023: LD_STRING DH-Start-b-4
9025: PPUSH
9026: CALL_OW 88
// end ; end else
9030: GO 9097
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9032: LD_EXP 38
9036: PPUSH
9037: LD_INT 26
9039: PUSH
9040: LD_INT 1
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 72
9051: PUSH
9052: LD_INT 1
9054: ARRAY
9055: PPUSH
9056: LD_STRING DArm-Start-a-2
9058: PPUSH
9059: CALL_OW 88
9063: NOT
9064: IFFALSE 9097
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9066: LD_EXP 38
9070: PPUSH
9071: LD_INT 26
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 72
9085: PUSH
9086: LD_INT 1
9088: ARRAY
9089: PPUSH
9090: LD_STRING DArf-Start-a-2
9092: PPUSH
9093: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9097: LD_EXP 26
9101: PPUSH
9102: LD_INT 211
9104: PPUSH
9105: LD_INT 38
9107: PPUSH
9108: CALL_OW 118
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9119: LD_EXP 26
9123: PPUSH
9124: LD_STRING DH-Start-3
9126: PPUSH
9127: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9131: LD_EXP 26
9135: PPUSH
9136: LD_STRING DH-Start-4
9138: PPUSH
9139: CALL_OW 88
// InGameOff ;
9143: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9147: LD_STRING Prepare
9149: PPUSH
9150: CALL_OW 337
// SaveForQuickRestart ;
9154: CALL_OW 22
// wait ( 0 0$10 ) ;
9158: LD_INT 350
9160: PPUSH
9161: CALL_OW 67
// if not Aviradze then
9165: LD_EXP 36
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9414
// SetDir ( Aviradze , 4 ) ;
9174: LD_EXP 36
9178: PPUSH
9179: LD_INT 4
9181: PPUSH
9182: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_INT 225
9193: PPUSH
9194: LD_INT 33
9196: PPUSH
9197: LD_INT 0
9199: PPUSH
9200: CALL_OW 48
// for i := 1 to 2 do
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: DOUBLE
9210: LD_INT 1
9212: DEC
9213: ST_TO_ADDR
9214: LD_INT 2
9216: PUSH
9217: FOR_TO
9218: IFFALSE 9349
// begin uc_side := 2 ;
9220: LD_ADDR_OWVAR 20
9224: PUSH
9225: LD_INT 2
9227: ST_TO_ADDR
// uc_nation := 0 ;
9228: LD_ADDR_OWVAR 21
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9236: LD_INT 0
9238: PPUSH
9239: LD_INT 12
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 380
// hc_gallery :=  ;
9249: LD_ADDR_OWVAR 33
9253: PUSH
9254: LD_STRING 
9256: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9257: LD_ADDR_OWVAR 26
9261: PUSH
9262: LD_STRING Artudito
9264: PUSH
9265: LD_STRING Textur
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_VAR 0 2
9276: ARRAY
9277: ST_TO_ADDR
// un := CreateHuman ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: CALL_OW 44
9287: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9288: LD_VAR 0 3
9292: PPUSH
9293: LD_INT 224
9295: PUSH
9296: LD_INT 226
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_VAR 0 2
9307: ARRAY
9308: PPUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 35
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_VAR 0 2
9323: ARRAY
9324: PPUSH
9325: LD_INT 0
9327: PPUSH
9328: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_INT 215
9339: PPUSH
9340: LD_INT 36
9342: PPUSH
9343: CALL_OW 111
// end ;
9347: GO 9217
9349: POP
9350: POP
// hc_name :=  ;
9351: LD_ADDR_OWVAR 26
9355: PUSH
9356: LD_STRING 
9358: ST_TO_ADDR
// InitHc ;
9359: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9363: LD_EXP 36
9367: PPUSH
9368: LD_INT 215
9370: PPUSH
9371: LD_INT 36
9373: PPUSH
9374: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9378: LD_EXP 36
9382: PPUSH
9383: LD_STRING DA-Arrive-1
9385: PPUSH
9386: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9390: LD_EXP 26
9394: PPUSH
9395: LD_STRING DH-Arrive-2
9397: PPUSH
9398: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9402: LD_EXP 36
9406: PPUSH
9407: LD_STRING DA-Arrive-3
9409: PPUSH
9410: CALL_OW 88
// end ;
9414: LD_VAR 0 1
9418: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p ;
9419: LD_EXP 3
9423: IFFALSE 10875
9425: GO 9427
9427: DISABLE
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
// begin DialogueOn ;
9434: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9438: LD_EXP 26
9442: PPUSH
9443: LD_STRING DH-base-1
9445: PPUSH
9446: CALL_OW 88
// if Markov then
9450: LD_EXP 33
9454: IFFALSE 9506
// begin Say ( Markov , DMar-base-2 ) ;
9456: LD_EXP 33
9460: PPUSH
9461: LD_STRING DMar-base-2
9463: PPUSH
9464: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9468: LD_EXP 33
9472: PPUSH
9473: LD_STRING DMar-base-3
9475: PPUSH
9476: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9480: LD_EXP 26
9484: PPUSH
9485: LD_STRING DH-base-4
9487: PPUSH
9488: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9492: LD_EXP 33
9496: PPUSH
9497: LD_STRING DMar-base-5
9499: PPUSH
9500: CALL_OW 88
// end else
9504: GO 9583
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9506: LD_EXP 38
9510: PPUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 72
9525: PUSH
9526: LD_INT 1
9528: ARRAY
9529: PPUSH
9530: LD_STRING DArm-base-a-2
9532: PPUSH
9533: CALL_OW 88
9537: NOT
9538: IFFALSE 9571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9540: LD_EXP 38
9544: PPUSH
9545: LD_INT 26
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PPUSH
9555: CALL_OW 72
9559: PUSH
9560: LD_INT 1
9562: ARRAY
9563: PPUSH
9564: LD_STRING DArf-base-a-2
9566: PPUSH
9567: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9571: LD_EXP 26
9575: PPUSH
9576: LD_STRING DH-base-a-3
9578: PPUSH
9579: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9583: LD_EXP 36
9587: PPUSH
9588: LD_STRING DA-base-6
9590: PPUSH
9591: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9595: LD_EXP 36
9599: PPUSH
9600: LD_STRING DA-base-7
9602: PPUSH
9603: CALL_OW 88
// DialogueOff ;
9607: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9611: LD_STRING Flamethrower
9613: PPUSH
9614: CALL_OW 337
// wait ( 2 2$00 ) ;
9618: LD_INT 4200
9620: PPUSH
9621: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9625: LD_EXP 35
9629: PUSH
9630: LD_EXP 28
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PPUSH
9639: LD_INT 203
9641: PPUSH
9642: LD_INT 37
9644: PPUSH
9645: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9649: LD_INT 22
9651: PUSH
9652: LD_INT 2
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 92
9661: PUSH
9662: LD_INT 203
9664: PUSH
9665: LD_INT 37
9667: PUSH
9668: LD_INT 10
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PPUSH
9681: CALL_OW 69
9685: NOT
9686: IFFALSE 9726
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9688: LD_EXP 35
9692: PUSH
9693: LD_EXP 28
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PPUSH
9702: LD_EXP 26
9706: PPUSH
9707: CALL_OW 250
9711: PPUSH
9712: LD_EXP 26
9716: PPUSH
9717: CALL_OW 251
9721: PPUSH
9722: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9726: LD_INT 35
9728: PPUSH
9729: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9733: LD_INT 2
9735: PPUSH
9736: LD_EXP 35
9740: PPUSH
9741: CALL_OW 292
9745: PUSH
9746: LD_EXP 35
9750: PPUSH
9751: LD_EXP 26
9755: PPUSH
9756: CALL_OW 296
9760: PUSH
9761: LD_INT 8
9763: LESS
9764: PUSH
9765: LD_EXP 35
9769: PPUSH
9770: LD_INT 22
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 21
9782: PUSH
9783: LD_INT 3
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 69
9798: PPUSH
9799: LD_EXP 35
9803: PPUSH
9804: CALL_OW 74
9808: PPUSH
9809: CALL_OW 296
9813: PUSH
9814: LD_INT 7
9816: LESS
9817: OR
9818: AND
9819: PUSH
9820: LD_EXP 35
9824: PPUSH
9825: LD_INT 10
9827: PPUSH
9828: CALL_OW 308
9832: NOT
9833: AND
9834: IFFALSE 9726
// InGameOn ;
9836: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9840: LD_EXP 35
9844: PPUSH
9845: CALL_OW 87
// if IsInUnit ( Heike ) then
9849: LD_EXP 26
9853: PPUSH
9854: CALL_OW 310
9858: IFFALSE 9869
// ComExitBuilding ( Heike ) ;
9860: LD_EXP 26
9864: PPUSH
9865: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9869: LD_EXP 35
9873: PUSH
9874: LD_EXP 28
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: LD_EXP 26
9887: PPUSH
9888: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9892: LD_EXP 26
9896: PPUSH
9897: LD_EXP 35
9901: PPUSH
9902: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9906: LD_INT 22
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 91
9918: PUSH
9919: LD_EXP 35
9923: PUSH
9924: LD_INT 10
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 21
9934: PUSH
9935: LD_INT 3
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 69
9951: IFFALSE 9977
// begin Say ( Kurt , DKs-scout-1 ) ;
9953: LD_EXP 35
9957: PPUSH
9958: LD_STRING DKs-scout-1
9960: PPUSH
9961: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9965: LD_EXP 26
9969: PPUSH
9970: LD_STRING DH-scout-2
9972: PPUSH
9973: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9977: LD_EXP 26
9981: PPUSH
9982: CALL_OW 85
// if IsInUnit ( Heike ) then
9986: LD_EXP 26
9990: PPUSH
9991: CALL_OW 310
9995: IFFALSE 10006
// ComExit ( Heike ) ;
9997: LD_EXP 26
10001: PPUSH
10002: CALL 76695 0 1
// repeat wait ( 0 0$1 ) ;
10006: LD_INT 35
10008: PPUSH
10009: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10013: LD_EXP 26
10017: PPUSH
10018: LD_EXP 35
10022: PPUSH
10023: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10027: LD_EXP 26
10031: PPUSH
10032: LD_EXP 35
10036: PPUSH
10037: CALL_OW 296
10041: PUSH
10042: LD_INT 6
10044: LESS
10045: IFFALSE 10006
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10047: LD_EXP 35
10051: PUSH
10052: LD_EXP 28
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PPUSH
10061: LD_EXP 26
10065: PPUSH
10066: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10070: LD_EXP 35
10074: PPUSH
10075: LD_STRING DKs-scout-3
10077: PPUSH
10078: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10082: LD_EXP 31
10086: PUSH
10087: LD_EXP 31
10091: PPUSH
10092: LD_EXP 35
10096: PPUSH
10097: CALL_OW 296
10101: PUSH
10102: LD_INT 15
10104: LESS
10105: AND
10106: IFFALSE 10329
// begin p := 1 ;
10108: LD_ADDR_VAR 0 4
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10116: LD_EXP 31
10120: PPUSH
10121: CALL_OW 310
10125: IFFALSE 10136
// ComExit ( Kaia ) ;
10127: LD_EXP 31
10131: PPUSH
10132: CALL 76695 0 1
// wait ( 0 0$1 ) ;
10136: LD_INT 35
10138: PPUSH
10139: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10143: LD_EXP 31
10147: PPUSH
10148: LD_EXP 35
10152: PPUSH
10153: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10157: LD_INT 35
10159: PPUSH
10160: CALL_OW 67
// p := Inc ( p ) ;
10164: LD_ADDR_VAR 0 4
10168: PUSH
10169: LD_VAR 0 4
10173: PPUSH
10174: CALL 77658 0 1
10178: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10179: LD_EXP 31
10183: PPUSH
10184: LD_EXP 35
10188: PPUSH
10189: CALL_OW 296
10193: PUSH
10194: LD_INT 6
10196: LESS
10197: PUSH
10198: LD_VAR 0 4
10202: PUSH
10203: LD_INT 12
10205: GREATER
10206: OR
10207: IFFALSE 10157
// ComTurnUnit ( Kaia , Kurt ) ;
10209: LD_EXP 31
10213: PPUSH
10214: LD_EXP 35
10218: PPUSH
10219: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10223: LD_EXP 31
10227: PPUSH
10228: LD_STRING DK-scout-4
10230: PPUSH
10231: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10235: LD_EXP 35
10239: PPUSH
10240: LD_EXP 31
10244: PPUSH
10245: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10249: LD_EXP 35
10253: PPUSH
10254: LD_STRING DKs-scout-5
10256: PPUSH
10257: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10261: LD_EXP 31
10265: PPUSH
10266: LD_STRING DK-scout-6
10268: PPUSH
10269: CALL_OW 88
// if Mike then
10273: LD_EXP 28
10277: IFFALSE 10329
// begin Say ( Mike , DM-scout-7 ) ;
10279: LD_EXP 28
10283: PPUSH
10284: LD_STRING DM-scout-7
10286: PPUSH
10287: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10291: LD_EXP 31
10295: PPUSH
10296: LD_EXP 28
10300: PPUSH
10301: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10305: LD_EXP 31
10309: PPUSH
10310: LD_STRING DK-scout-8
10312: PPUSH
10313: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10317: LD_EXP 28
10321: PPUSH
10322: LD_STRING DM-scout-9
10324: PPUSH
10325: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10329: LD_INT 184
10331: PPUSH
10332: LD_INT 100
10334: PPUSH
10335: LD_INT 2
10337: PPUSH
10338: LD_INT 12
10340: NEG
10341: PPUSH
10342: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10346: LD_INT 184
10348: PPUSH
10349: LD_INT 100
10351: PPUSH
10352: LD_INT 2
10354: PPUSH
10355: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10359: LD_INT 184
10361: PPUSH
10362: LD_INT 100
10364: PPUSH
10365: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10369: LD_EXP 35
10373: PPUSH
10374: LD_STRING DKs-scout-10
10376: PPUSH
10377: CALL_OW 88
// wait ( 0 0$1 ) ;
10381: LD_INT 35
10383: PPUSH
10384: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10388: LD_INT 144
10390: PPUSH
10391: LD_INT 65
10393: PPUSH
10394: LD_INT 2
10396: PPUSH
10397: LD_INT 12
10399: NEG
10400: PPUSH
10401: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10405: LD_INT 144
10407: PPUSH
10408: LD_INT 65
10410: PPUSH
10411: LD_INT 2
10413: PPUSH
10414: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10418: LD_INT 144
10420: PPUSH
10421: LD_INT 65
10423: PPUSH
10424: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10428: LD_EXP 35
10432: PPUSH
10433: LD_STRING DKs-scout-11
10435: PPUSH
10436: CALL_OW 88
// wait ( 0 0$1 ) ;
10440: LD_INT 35
10442: PPUSH
10443: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10447: LD_EXP 35
10451: PPUSH
10452: CALL_OW 87
// if Mike and not Givi then
10456: LD_EXP 28
10460: PUSH
10461: LD_EXP 27
10465: NOT
10466: AND
10467: IFFALSE 10493
// begin Say ( Mike , DM-scout-a-1 ) ;
10469: LD_EXP 28
10473: PPUSH
10474: LD_STRING DM-scout-a-1
10476: PPUSH
10477: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10481: LD_EXP 26
10485: PPUSH
10486: LD_STRING DH-scout-a-2
10488: PPUSH
10489: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10493: LD_EXP 35
10497: PUSH
10498: LD_EXP 28
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: LD_INT 2
10509: PPUSH
10510: CALL_OW 235
// InGameOff ;
10514: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10518: LD_STRING Hill
10520: PPUSH
10521: CALL_OW 337
// Hint ( BunkerHill ) ;
10525: LD_STRING BunkerHill
10527: PPUSH
10528: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10532: LD_INT 22
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10542: LD_INT 20
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 424
// allowToPatrol := true ;
10552: LD_ADDR_EXP 12
10556: PUSH
10557: LD_INT 1
10559: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10560: LD_INT 3150
10562: PPUSH
10563: CALL_OW 67
// InitHc ;
10567: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10571: LD_ADDR_VAR 0 1
10575: PUSH
10576: DOUBLE
10577: LD_INT 1
10579: DEC
10580: ST_TO_ADDR
10581: LD_INT 3
10583: PUSH
10584: LD_INT 3
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: LD_OWVAR 67
10603: ARRAY
10604: PUSH
10605: FOR_TO
10606: IFFALSE 10873
// begin uc_side := 2 ;
10608: LD_ADDR_OWVAR 20
10612: PUSH
10613: LD_INT 2
10615: ST_TO_ADDR
// uc_nation := 2 ;
10616: LD_ADDR_OWVAR 21
10620: PUSH
10621: LD_INT 2
10623: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10624: LD_INT 0
10626: PPUSH
10627: LD_INT 1
10629: PUSH
10630: LD_INT 3
10632: PUSH
10633: LD_INT 1
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_VAR 0 1
10645: PUSH
10646: LD_INT 3
10648: MOD
10649: PUSH
10650: LD_INT 1
10652: PLUS
10653: ARRAY
10654: PPUSH
10655: LD_INT 3
10657: PUSH
10658: LD_INT 2
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: LD_OWVAR 67
10677: ARRAY
10678: PPUSH
10679: CALL_OW 380
// un := CreateHuman ;
10683: LD_ADDR_VAR 0 2
10687: PUSH
10688: CALL_OW 44
10692: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10693: LD_ADDR_EXP 38
10697: PUSH
10698: LD_EXP 38
10702: PUSH
10703: LD_VAR 0 2
10707: UNION
10708: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10709: LD_INT 2
10711: PPUSH
10712: LD_INT 2
10714: PPUSH
10715: LD_INT 13
10717: PPUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_VAR 0 1
10732: PUSH
10733: LD_INT 2
10735: MOD
10736: PUSH
10737: LD_INT 1
10739: PLUS
10740: ARRAY
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: LD_INT 27
10747: PUSH
10748: LD_INT 25
10750: PUSH
10751: LD_INT 27
10753: PUSH
10754: LD_INT 23
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: PUSH
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 0
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 12
10782: PLUS
10783: ARRAY
10784: PPUSH
10785: LD_INT 77
10787: PPUSH
10788: CALL 386 0 7
// veh := CreateVehicle ;
10792: LD_ADDR_VAR 0 3
10796: PUSH
10797: CALL_OW 45
10801: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_INT 2
10809: PPUSH
10810: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10814: LD_VAR 0 3
10818: PPUSH
10819: LD_INT 178
10821: PPUSH
10822: LD_INT 2
10824: PPUSH
10825: LD_INT 2
10827: PPUSH
10828: LD_INT 0
10830: PPUSH
10831: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10835: LD_VAR 0 2
10839: PPUSH
10840: LD_VAR 0 3
10844: PPUSH
10845: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10849: LD_VAR 0 2
10853: PPUSH
10854: LD_INT 183
10856: PPUSH
10857: LD_INT 11
10859: PPUSH
10860: CALL_OW 111
// wait ( 0 0$2 ) ;
10864: LD_INT 70
10866: PPUSH
10867: CALL_OW 67
// end ;
10871: GO 10605
10873: POP
10874: POP
// end ;
10875: PPOPN 4
10877: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10878: LD_EXP 4
10882: PUSH
10883: LD_EXP 36
10887: PPUSH
10888: CALL_OW 302
10892: AND
10893: IFFALSE 10942
10895: GO 10897
10897: DISABLE
// begin DialogueOn ;
10898: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10902: LD_EXP 36
10906: PPUSH
10907: LD_STRING DA-lab-1
10909: PPUSH
10910: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10914: LD_EXP 36
10918: PPUSH
10919: LD_STRING DA-lab-2
10921: PPUSH
10922: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10926: LD_EXP 26
10930: PPUSH
10931: LD_STRING DH-lab-3
10933: PPUSH
10934: CALL_OW 88
// DialogueOff ;
10938: CALL_OW 7
// end ;
10942: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10943: LD_INT 17
10945: PPUSH
10946: LD_INT 2
10948: PPUSH
10949: CALL_OW 321
10953: PUSH
10954: LD_INT 2
10956: EQUAL
10957: IFFALSE 11089
10959: GO 10961
10961: DISABLE
10962: LD_INT 0
10964: PPUSH
// begin DialogueOn ;
10965: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10969: LD_EXP 36
10973: PPUSH
10974: LD_STRING DA-Cam-1
10976: PPUSH
10977: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10981: LD_EXP 36
10985: PPUSH
10986: LD_STRING DA-Cam-2
10988: PPUSH
10989: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10993: LD_EXP 36
10997: PPUSH
10998: LD_STRING DA-Cam-3
11000: PPUSH
11001: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11005: LD_EXP 26
11009: PPUSH
11010: LD_STRING DH-Cam-4
11012: PPUSH
11013: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11017: LD_EXP 31
11021: PPUSH
11022: LD_STRING DK-Cam-5
11024: PPUSH
11025: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11029: LD_EXP 31
11033: PPUSH
11034: LD_STRING DK-Cam-6
11036: PPUSH
11037: CALL_OW 88
// DialogueOff ;
11041: CALL_OW 7
// Query ( Camera ) ;
11045: LD_STRING Camera
11047: PPUSH
11048: CALL_OW 97
// hiddenCameraAllowed := true ;
11052: LD_ADDR_EXP 5
11056: PUSH
11057: LD_INT 1
11059: ST_TO_ADDR
// for i in camAreas do
11060: LD_ADDR_VAR 0 1
11064: PUSH
11065: LD_EXP 8
11069: PUSH
11070: FOR_IN
11071: IFFALSE 11087
// SetAreaMapShow ( i , 1 ) ;
11073: LD_VAR 0 1
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 424
11085: GO 11070
11087: POP
11088: POP
// end ;
11089: PPOPN 1
11091: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11092: LD_EXP 8
11096: NOT
11097: PUSH
11098: LD_EXP 5
11102: AND
11103: IFFALSE 11201
11105: GO 11107
11107: DISABLE
11108: LD_INT 0
11110: PPUSH
// begin stop_talking := true ;
11111: LD_ADDR_OWVAR 56
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11119: LD_ADDR_VAR 0 1
11123: PUSH
11124: LD_INT 22
11126: PUSH
11127: LD_INT 2
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 21
11136: PUSH
11137: LD_INT 1
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 23
11146: PUSH
11147: LD_INT 2
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: LIST
11158: PPUSH
11159: CALL_OW 69
11163: PUSH
11164: FOR_IN
11165: IFFALSE 11184
// AddExperience ( i , 2 , 450 ) ;
11167: LD_VAR 0 1
11171: PPUSH
11172: LD_INT 2
11174: PPUSH
11175: LD_INT 450
11177: PPUSH
11178: CALL_OW 492
11182: GO 11164
11184: POP
11185: POP
// stop_talking := false ;
11186: LD_ADDR_OWVAR 56
11190: PUSH
11191: LD_INT 0
11193: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11194: LD_STRING ACH_CAMERA
11196: PPUSH
11197: CALL_OW 543
// end ;
11201: PPOPN 1
11203: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11204: LD_EXP 9
11208: PUSH
11209: LD_EXP 11
11213: NOT
11214: AND
11215: IFFALSE 11274
11217: GO 11219
11219: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11220: LD_EXP 9
11224: PPUSH
11225: CALL_OW 250
11229: PPUSH
11230: LD_EXP 9
11234: PPUSH
11235: CALL_OW 251
11239: PPUSH
11240: LD_INT 2
11242: PPUSH
11243: LD_INT 6
11245: NEG
11246: PPUSH
11247: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11251: LD_EXP 9
11255: PPUSH
11256: CALL_OW 87
// wait ( 0 0$1 ) ;
11260: LD_INT 35
11262: PPUSH
11263: CALL_OW 67
// YouLost ( Spotted ) ;
11267: LD_STRING Spotted
11269: PPUSH
11270: CALL_OW 104
// end ;
11274: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11275: LD_INT 3
11277: PUSH
11278: LD_INT 6
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: LD_INT 2
11287: PPUSH
11288: LD_EXP 48
11292: PPUSH
11293: CALL 1050 0 3
11297: IFFALSE 11330
11299: GO 11301
11301: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11302: LD_ADDR_EXP 9
11306: PUSH
11307: LD_INT 3
11309: PUSH
11310: LD_INT 6
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PPUSH
11317: LD_INT 2
11319: PPUSH
11320: LD_EXP 48
11324: PPUSH
11325: CALL 1050 0 3
11329: ST_TO_ADDR
11330: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11331: LD_INT 22
11333: PUSH
11334: LD_INT 6
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 30
11343: PUSH
11344: LD_INT 32
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: LD_INT 3
11353: PUSH
11354: LD_INT 24
11356: PUSH
11357: LD_INT 1000
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: LIST
11372: PPUSH
11373: CALL_OW 69
11377: IFFALSE 11438
11379: GO 11381
11381: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11382: LD_ADDR_EXP 9
11386: PUSH
11387: LD_INT 22
11389: PUSH
11390: LD_INT 6
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 32
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 3
11409: PUSH
11410: LD_INT 24
11412: PUSH
11413: LD_INT 1000
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: PPUSH
11429: CALL_OW 69
11433: PUSH
11434: LD_INT 1
11436: ARRAY
11437: ST_TO_ADDR
11438: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11439: LD_EXP 9
11443: PUSH
11444: LD_INT 21
11446: PPUSH
11447: LD_INT 21
11449: PUSH
11450: LD_INT 3
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 3
11459: PUSH
11460: LD_INT 24
11462: PUSH
11463: LD_INT 1000
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PPUSH
11478: CALL_OW 70
11482: AND
11483: IFFALSE 11722
11485: GO 11487
11487: DISABLE
11488: LD_INT 0
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11494: LD_ADDR_VAR 0 4
11498: PUSH
11499: LD_EXP 43
11503: PUSH
11504: LD_EXP 45
11508: PUSH
11509: LD_EXP 46
11513: UNION
11514: PPUSH
11515: LD_INT 3
11517: PUSH
11518: LD_INT 25
11520: PUSH
11521: LD_INT 1
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PPUSH
11532: CALL_OW 72
11536: UNION
11537: ST_TO_ADDR
// for i in noncombat do
11538: LD_ADDR_VAR 0 1
11542: PUSH
11543: LD_VAR 0 4
11547: PUSH
11548: FOR_IN
11549: IFFALSE 11645
// begin if IsInUnit ( i ) then
11551: LD_VAR 0 1
11555: PPUSH
11556: CALL_OW 310
11560: IFFALSE 11571
// ComExitBuilding ( i ) ;
11562: LD_VAR 0 1
11566: PPUSH
11567: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11571: LD_VAR 0 1
11575: PPUSH
11576: LD_INT 114
11578: PPUSH
11579: LD_INT 97
11581: PPUSH
11582: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_INT 99
11593: PPUSH
11594: LD_INT 128
11596: PPUSH
11597: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11601: LD_VAR 0 1
11605: PPUSH
11606: LD_INT 91
11608: PPUSH
11609: LD_INT 145
11611: PPUSH
11612: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11616: LD_VAR 0 1
11620: PPUSH
11621: LD_INT 82
11623: PPUSH
11624: LD_INT 153
11626: PPUSH
11627: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11631: LD_VAR 0 1
11635: PPUSH
11636: LD_INT 16
11638: PPUSH
11639: CALL_OW 173
// end ;
11643: GO 11548
11645: POP
11646: POP
// if not allowHeikeAttack then
11647: LD_EXP 11
11651: NOT
11652: IFFALSE 11656
// exit ;
11654: GO 11722
// wait ( 0 0$05 ) ;
11656: LD_INT 175
11658: PPUSH
11659: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11663: LD_EXP 41
11667: PPUSH
11668: LD_STRING D9a-Kur-1
11670: PPUSH
11671: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11675: LD_EXP 44
11679: PPUSH
11680: LD_STRING D9a-Bur-1
11682: PPUSH
11683: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11687: LD_EXP 41
11691: PPUSH
11692: LD_STRING D9a-Kur-2
11694: PPUSH
11695: CALL_OW 94
// omicronFall := true ;
11699: LD_ADDR_EXP 13
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11707: LD_INT 105
11709: PPUSH
11710: CALL_OW 67
// retreatFromOmicron := true ;
11714: LD_ADDR_EXP 20
11718: PUSH
11719: LD_INT 1
11721: ST_TO_ADDR
// end ;
11722: PPOPN 4
11724: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11725: LD_INT 16
11727: PPUSH
11728: LD_INT 3
11730: PUSH
11731: LD_INT 22
11733: PUSH
11734: LD_INT 2
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 23
11747: PUSH
11748: LD_INT 3
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PPUSH
11759: CALL_OW 70
11763: IFFALSE 11846
11765: GO 11767
11767: DISABLE
11768: LD_INT 0
11770: PPUSH
// begin enable ;
11771: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 16
11779: PPUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 22
11785: PUSH
11786: LD_INT 2
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 23
11799: PUSH
11800: LD_INT 3
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 70
11815: PUSH
11816: FOR_IN
11817: IFFALSE 11844
// begin escapeCounter := escapeCounter + 1 ;
11819: LD_ADDR_EXP 19
11823: PUSH
11824: LD_EXP 19
11828: PUSH
11829: LD_INT 1
11831: PLUS
11832: ST_TO_ADDR
// RemoveUnit ( i ) ;
11833: LD_VAR 0 1
11837: PPUSH
11838: CALL_OW 64
// end ;
11842: GO 11816
11844: POP
11845: POP
// end ;
11846: PPOPN 1
11848: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11849: LD_OWVAR 1
11853: PUSH
11854: LD_INT 13650
11856: PUSH
11857: LD_INT 0
11859: PPUSH
11860: LD_INT 3150
11862: PPUSH
11863: CALL_OW 12
11867: PLUS
11868: GREATEREQUAL
11869: IFFALSE 11878
11871: GO 11873
11873: DISABLE
// SmallAmericanReinforcements ;
11874: CALL 7141 0 0
11878: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11879: LD_OWVAR 1
11883: PUSH
11884: LD_INT 31500
11886: PUSH
11887: LD_INT 29400
11889: PUSH
11890: LD_INT 27300
11892: PUSH
11893: LD_INT 25200
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: PUSH
11902: LD_OWVAR 67
11906: ARRAY
11907: GREATEREQUAL
11908: IFFALSE 11973
11910: GO 11912
11912: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11913: LD_EXP 49
11917: PPUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 2
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 72
11932: PPUSH
11933: LD_INT 62
11935: PPUSH
11936: LD_INT 22
11938: PPUSH
11939: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11943: LD_EXP 50
11947: PPUSH
11948: LD_INT 69
11950: PPUSH
11951: LD_INT 27
11953: PPUSH
11954: CALL_OW 111
// wait ( 1 1$00 ) ;
11958: LD_INT 2100
11960: PPUSH
11961: CALL_OW 67
// startAttackOnOmicron := true ;
11965: LD_ADDR_EXP 6
11969: PUSH
11970: LD_INT 1
11972: ST_TO_ADDR
// end ;
11973: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11974: LD_EXP 22
11978: PUSH
11979: LD_INT 0
11981: EQUAL
11982: IFFALSE 14032
11984: GO 11986
11986: DISABLE
11987: LD_INT 0
11989: PPUSH
11990: PPUSH
11991: PPUSH
11992: PPUSH
11993: PPUSH
11994: PPUSH
11995: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11996: LD_INT 5
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: CALL_OW 343
// PrepareOmarForces ;
12006: CALL 1652 0 0
// wait ( 0 0$03 ) ;
12010: LD_INT 105
12012: PPUSH
12013: CALL_OW 67
// allowHeikeAttack := true ;
12017: LD_ADDR_EXP 11
12021: PUSH
12022: LD_INT 1
12024: ST_TO_ADDR
// activeGrishkoAI := false ;
12025: LD_ADDR_EXP 10
12029: PUSH
12030: LD_INT 0
12032: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12033: LD_INT 20
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: CALL_OW 424
// if not hillBase then
12043: LD_EXP 15
12047: NOT
12048: IFFALSE 12057
// ChangeMissionObjectives ( HillDone ) ;
12050: LD_STRING HillDone
12052: PPUSH
12053: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12057: LD_EXP 34
12061: PPUSH
12062: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12066: LD_ADDR_VAR 0 1
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: LD_INT 2
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 21
12083: PUSH
12084: LD_INT 1
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PPUSH
12095: CALL_OW 69
12099: PUSH
12100: FOR_IN
12101: IFFALSE 12125
// if HasTask ( i ) then
12103: LD_VAR 0 1
12107: PPUSH
12108: CALL_OW 314
12112: IFFALSE 12123
// ComHold ( i ) ;
12114: LD_VAR 0 1
12118: PPUSH
12119: CALL_OW 140
12123: GO 12100
12125: POP
12126: POP
// DialogueOn ;
12127: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12131: LD_EXP 34
12135: PPUSH
12136: LD_STRING DO-assault-1
12138: PPUSH
12139: CALL_OW 94
// DialogueOff ;
12143: CALL_OW 7
// game_speed := 4 ;
12147: LD_ADDR_OWVAR 65
12151: PUSH
12152: LD_INT 4
12154: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12155: LD_ADDR_VAR 0 1
12159: PUSH
12160: LD_EXP 47
12164: PPUSH
12165: LD_INT 3
12167: PUSH
12168: LD_INT 54
12170: PUSH
12171: EMPTY
12172: LIST
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PPUSH
12178: CALL_OW 72
12182: PUSH
12183: FOR_IN
12184: IFFALSE 12203
// ComMoveXY ( i , 226 , 114 ) ;
12186: LD_VAR 0 1
12190: PPUSH
12191: LD_INT 226
12193: PPUSH
12194: LD_INT 114
12196: PPUSH
12197: CALL_OW 111
12201: GO 12183
12203: POP
12204: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12205: LD_EXP 42
12209: PPUSH
12210: LD_INT 22
12212: PUSH
12213: LD_INT 6
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 30
12222: PUSH
12223: LD_INT 4
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 69
12238: PPUSH
12239: LD_EXP 42
12243: PPUSH
12244: CALL_OW 74
12248: PPUSH
12249: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12253: LD_STRING Attack
12255: PPUSH
12256: CALL_OW 337
// music_class := music_combat ;
12260: LD_ADDR_OWVAR 72
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// music_nat := 4 ;
12268: LD_ADDR_OWVAR 71
12272: PUSH
12273: LD_INT 4
12275: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12276: LD_INT 5
12278: PPUSH
12279: LD_EXP 42
12283: PPUSH
12284: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12288: LD_INT 6
12290: PPUSH
12291: LD_EXP 39
12295: PPUSH
12296: LD_INT 25
12298: PUSH
12299: LD_INT 1
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PPUSH
12306: CALL_OW 72
12310: PUSH
12311: LD_INT 4
12313: ARRAY
12314: PPUSH
12315: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12319: LD_ADDR_VAR 0 1
12323: PUSH
12324: LD_EXP 39
12328: PPUSH
12329: LD_INT 3
12331: PUSH
12332: LD_INT 25
12334: PUSH
12335: LD_INT 4
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PPUSH
12346: CALL_OW 72
12350: PUSH
12351: FOR_IN
12352: IFFALSE 12371
// ComAgressiveMove ( i , 221 , 110 ) ;
12354: LD_VAR 0 1
12358: PPUSH
12359: LD_INT 221
12361: PPUSH
12362: LD_INT 110
12364: PPUSH
12365: CALL_OW 114
12369: GO 12351
12371: POP
12372: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12373: LD_EXP 39
12377: PPUSH
12378: LD_INT 25
12380: PUSH
12381: LD_INT 4
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 72
12392: PPUSH
12393: LD_INT 214
12395: PPUSH
12396: LD_INT 124
12398: PPUSH
12399: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12403: LD_EXP 39
12407: PPUSH
12408: LD_INT 25
12410: PUSH
12411: LD_INT 1
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PPUSH
12418: CALL_OW 72
12422: PUSH
12423: LD_INT 4
12425: ARRAY
12426: PPUSH
12427: LD_INT 214
12429: PPUSH
12430: LD_INT 114
12432: PPUSH
12433: LD_INT 0
12435: PPUSH
12436: CALL_OW 132
// if IsOk ( Grishko ) then
12440: LD_EXP 42
12444: PPUSH
12445: CALL_OW 302
12449: IFFALSE 12475
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12451: LD_EXP 42
12455: PPUSH
12456: LD_STRING D9-Gri-1
12458: PPUSH
12459: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12463: LD_EXP 41
12467: PPUSH
12468: LD_STRING D9-Kur-1
12470: PPUSH
12471: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12475: LD_INT 35
12477: PPUSH
12478: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12482: LD_EXP 34
12486: PPUSH
12487: LD_INT 233
12489: PPUSH
12490: LD_INT 130
12492: PPUSH
12493: CALL_OW 114
// if IsOk ( Grishko ) then
12497: LD_EXP 42
12501: PPUSH
12502: CALL_OW 302
12506: IFFALSE 12532
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12508: LD_EXP 42
12512: PPUSH
12513: LD_STRING D9-Gri-2
12515: PPUSH
12516: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12520: LD_EXP 41
12524: PPUSH
12525: LD_STRING D9-Kur-2
12527: PPUSH
12528: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12532: LD_EXP 42
12536: PPUSH
12537: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12541: LD_EXP 42
12545: PPUSH
12546: LD_INT 211
12548: PPUSH
12549: LD_INT 104
12551: PPUSH
12552: CALL_OW 171
// AddComHold ( Grishko ) ;
12556: LD_EXP 42
12560: PPUSH
12561: CALL_OW 200
// repeat wait ( 3 ) ;
12565: LD_INT 3
12567: PPUSH
12568: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12572: LD_EXP 42
12576: PPUSH
12577: CALL_OW 310
12581: NOT
12582: IFFALSE 12565
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12584: LD_EXP 39
12588: PPUSH
12589: LD_INT 34
12591: PUSH
12592: LD_INT 26
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: PPUSH
12604: LD_EXP 42
12608: PPUSH
12609: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12613: LD_EXP 39
12617: PPUSH
12618: LD_INT 34
12620: PUSH
12621: LD_INT 26
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PPUSH
12628: CALL_OW 72
12632: PPUSH
12633: LD_INT 215
12635: PPUSH
12636: LD_INT 106
12638: PPUSH
12639: CALL_OW 174
// repeat wait ( 3 ) ;
12643: LD_INT 3
12645: PPUSH
12646: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12650: LD_EXP 42
12654: PPUSH
12655: CALL_OW 256
12659: PUSH
12660: LD_INT 1000
12662: LESS
12663: IFFALSE 12643
// NormalAttack ( 5 , Grishko ) ;
12665: LD_INT 5
12667: PPUSH
12668: LD_EXP 42
12672: PPUSH
12673: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12677: LD_INT 6
12679: PPUSH
12680: LD_EXP 39
12684: PPUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 1
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PPUSH
12695: CALL_OW 72
12699: PUSH
12700: LD_INT 4
12702: ARRAY
12703: PPUSH
12704: CALL_OW 472
// if IsOk ( Grishko ) then
12708: LD_EXP 42
12712: PPUSH
12713: CALL_OW 302
12717: IFFALSE 12743
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12719: LD_EXP 42
12723: PPUSH
12724: LD_STRING D9-Gri-3
12726: PPUSH
12727: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12731: LD_EXP 41
12735: PPUSH
12736: LD_STRING D9-Kur-3
12738: PPUSH
12739: CALL_OW 94
// end ; music_class := music_auto ;
12743: LD_ADDR_OWVAR 72
12747: PUSH
12748: LD_INT 0
12750: ST_TO_ADDR
// music_nat := music_auto ;
12751: LD_ADDR_OWVAR 71
12755: PUSH
12756: LD_INT 0
12758: ST_TO_ADDR
// for i in omarSquad do
12759: LD_ADDR_VAR 0 1
12763: PUSH
12764: LD_EXP 39
12768: PUSH
12769: FOR_IN
12770: IFFALSE 12912
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12772: LD_VAR 0 1
12776: PPUSH
12777: CALL_OW 247
12781: PUSH
12782: LD_INT 2
12784: EQUAL
12785: PUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 256
12795: PUSH
12796: LD_INT 1000
12798: LESS
12799: AND
12800: IFFALSE 12866
// begin driver := IsDrivenBy ( i ) ;
12802: LD_ADDR_VAR 0 2
12806: PUSH
12807: LD_VAR 0 1
12811: PPUSH
12812: CALL_OW 311
12816: ST_TO_ADDR
// veh := i ;
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: LD_VAR 0 1
12826: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12827: LD_VAR 0 2
12831: PPUSH
12832: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12836: LD_VAR 0 2
12840: PPUSH
12841: LD_VAR 0 3
12845: PPUSH
12846: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12850: LD_VAR 0 2
12854: PPUSH
12855: LD_VAR 0 3
12859: PPUSH
12860: CALL_OW 180
// end else
12864: GO 12910
// if GetLives ( i ) < 500 then
12866: LD_VAR 0 1
12870: PPUSH
12871: CALL_OW 256
12875: PUSH
12876: LD_INT 500
12878: LESS
12879: IFFALSE 12910
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12881: LD_EXP 39
12885: PPUSH
12886: LD_INT 25
12888: PUSH
12889: LD_INT 4
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PPUSH
12896: CALL_OW 72
12900: PPUSH
12901: LD_VAR 0 1
12905: PPUSH
12906: CALL_OW 188
// end ; end ;
12910: GO 12769
12912: POP
12913: POP
// repeat wait ( 0 0$1 ) ;
12914: LD_INT 35
12916: PPUSH
12917: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12921: LD_EXP 39
12925: PPUSH
12926: LD_INT 3
12928: PUSH
12929: LD_INT 24
12931: PUSH
12932: LD_INT 1000
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 21
12945: PUSH
12946: LD_INT 2
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PPUSH
12957: CALL_OW 72
12961: NOT
12962: PUSH
12963: LD_EXP 39
12967: PPUSH
12968: LD_INT 3
12970: PUSH
12971: LD_INT 24
12973: PUSH
12974: LD_INT 250
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 72
12989: NOT
12990: AND
12991: IFFALSE 12914
// wait ( 0 0$2 ) ;
12993: LD_INT 70
12995: PPUSH
12996: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13000: LD_ADDR_VAR 0 5
13004: PUSH
13005: LD_EXP 39
13009: PPUSH
13010: LD_INT 58
13012: PUSH
13013: EMPTY
13014: LIST
13015: PUSH
13016: LD_INT 21
13018: PUSH
13019: LD_INT 2
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 72
13034: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13035: LD_ADDR_VAR 0 6
13039: PUSH
13040: LD_EXP 39
13044: PPUSH
13045: LD_INT 25
13047: PUSH
13048: LD_INT 3
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 3
13057: PUSH
13058: LD_INT 55
13060: PUSH
13061: EMPTY
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 72
13076: ST_TO_ADDR
// for i := 1 to tmp do
13077: LD_ADDR_VAR 0 1
13081: PUSH
13082: DOUBLE
13083: LD_INT 1
13085: DEC
13086: ST_TO_ADDR
13087: LD_VAR 0 5
13091: PUSH
13092: FOR_TO
13093: IFFALSE 13123
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13095: LD_VAR 0 6
13099: PUSH
13100: LD_VAR 0 1
13104: ARRAY
13105: PPUSH
13106: LD_VAR 0 5
13110: PUSH
13111: LD_VAR 0 1
13115: ARRAY
13116: PPUSH
13117: CALL_OW 120
13121: GO 13092
13123: POP
13124: POP
// wait ( 0 0$5 ) ;
13125: LD_INT 175
13127: PPUSH
13128: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13132: LD_EXP 39
13136: PPUSH
13137: LD_INT 199
13139: PPUSH
13140: LD_INT 141
13142: PPUSH
13143: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13147: LD_EXP 34
13151: PPUSH
13152: LD_INT 190
13154: PPUSH
13155: LD_INT 143
13157: PPUSH
13158: CALL_OW 114
// AddComHold ( Omar ) ;
13162: LD_EXP 34
13166: PPUSH
13167: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13171: LD_EXP 39
13175: PPUSH
13176: LD_INT 2
13178: PUSH
13179: LD_INT 25
13181: PUSH
13182: LD_INT 1
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 4
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: PPUSH
13204: CALL_OW 72
13208: PPUSH
13209: LD_INT 161
13211: PPUSH
13212: LD_INT 130
13214: PPUSH
13215: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13219: LD_EXP 39
13223: PPUSH
13224: LD_INT 25
13226: PUSH
13227: LD_INT 1
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PPUSH
13234: CALL_OW 72
13238: PPUSH
13239: LD_INT 163
13241: PPUSH
13242: LD_INT 122
13244: PPUSH
13245: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13249: LD_EXP 39
13253: PPUSH
13254: LD_INT 25
13256: PUSH
13257: LD_INT 1
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 72
13268: PUSH
13269: LD_INT 4
13271: ARRAY
13272: PPUSH
13273: LD_INT 165
13275: PPUSH
13276: LD_INT 118
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13286: LD_EXP 39
13290: PPUSH
13291: LD_INT 25
13293: PUSH
13294: LD_INT 1
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 72
13305: PUSH
13306: LD_INT 4
13308: ARRAY
13309: PPUSH
13310: LD_INT 159
13312: PPUSH
13313: LD_INT 116
13315: PPUSH
13316: LD_INT 0
13318: PPUSH
13319: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13323: LD_EXP 39
13327: PPUSH
13328: LD_INT 21
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PPUSH
13338: CALL_OW 72
13342: PPUSH
13343: LD_INT 169
13345: PPUSH
13346: LD_INT 114
13348: PPUSH
13349: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13353: LD_INT 35
13355: PPUSH
13356: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13360: LD_ADDR_VAR 0 5
13364: PUSH
13365: LD_EXP 39
13369: PPUSH
13370: LD_INT 25
13372: PUSH
13373: LD_INT 1
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PPUSH
13380: CALL_OW 72
13384: ST_TO_ADDR
// for i in tmp do
13385: LD_ADDR_VAR 0 1
13389: PUSH
13390: LD_VAR 0 5
13394: PUSH
13395: FOR_IN
13396: IFFALSE 13493
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13398: LD_VAR 0 1
13402: PPUSH
13403: CALL_OW 256
13407: PUSH
13408: LD_INT 600
13410: LESS
13411: PUSH
13412: LD_VAR 0 1
13416: PPUSH
13417: LD_INT 161
13419: PPUSH
13420: LD_INT 130
13422: PPUSH
13423: CALL_OW 297
13427: PUSH
13428: LD_INT 6
13430: GREATER
13431: AND
13432: IFFALSE 13449
// ComMoveXY ( i , 161 , 130 ) ;
13434: LD_VAR 0 1
13438: PPUSH
13439: LD_INT 161
13441: PPUSH
13442: LD_INT 130
13444: PPUSH
13445: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13449: LD_VAR 0 1
13453: PPUSH
13454: CALL_OW 256
13458: PUSH
13459: LD_INT 1000
13461: EQUAL
13462: PUSH
13463: LD_VAR 0 1
13467: PPUSH
13468: CALL_OW 314
13472: NOT
13473: AND
13474: IFFALSE 13491
// ComAgressiveMove ( i , 160 , 109 ) ;
13476: LD_VAR 0 1
13480: PPUSH
13481: LD_INT 160
13483: PPUSH
13484: LD_INT 109
13486: PPUSH
13487: CALL_OW 114
// end ;
13491: GO 13395
13493: POP
13494: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13495: LD_ADDR_VAR 0 5
13499: PUSH
13500: LD_EXP 39
13504: PPUSH
13505: LD_INT 21
13507: PUSH
13508: LD_INT 2
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 72
13519: ST_TO_ADDR
// for i in tmp do
13520: LD_ADDR_VAR 0 1
13524: PUSH
13525: LD_VAR 0 5
13529: PUSH
13530: FOR_IN
13531: IFFALSE 13797
// begin tmp2 := IsDrivenBy ( i ) ;
13533: LD_ADDR_VAR 0 6
13537: PUSH
13538: LD_VAR 0 1
13542: PPUSH
13543: CALL_OW 311
13547: ST_TO_ADDR
// if not tmp2 then
13548: LD_VAR 0 6
13552: NOT
13553: IFFALSE 13557
// continue ;
13555: GO 13530
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13557: LD_VAR 0 1
13561: PPUSH
13562: CALL_OW 256
13566: PUSH
13567: LD_INT 600
13569: GREATEREQUAL
13570: PUSH
13571: LD_VAR 0 1
13575: PPUSH
13576: CALL_OW 110
13580: PUSH
13581: LD_INT 1
13583: EQUAL
13584: AND
13585: IFFALSE 13599
// SetTag ( i , 0 ) ;
13587: LD_VAR 0 1
13591: PPUSH
13592: LD_INT 0
13594: PPUSH
13595: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13599: LD_VAR 0 1
13603: PPUSH
13604: CALL_OW 256
13608: PUSH
13609: LD_INT 600
13611: GREATEREQUAL
13612: PUSH
13613: LD_VAR 0 1
13617: PPUSH
13618: CALL_OW 110
13622: NOT
13623: AND
13624: IFFALSE 13650
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13626: LD_VAR 0 1
13630: PPUSH
13631: LD_VAR 0 7
13635: PPUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 74
13645: PPUSH
13646: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13650: LD_VAR 0 1
13654: PPUSH
13655: CALL_OW 256
13659: PUSH
13660: LD_INT 600
13662: LESS
13663: PUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: CALL_OW 110
13673: NOT
13674: AND
13675: IFFALSE 13704
// begin SetTag ( i , 1 ) ;
13677: LD_VAR 0 1
13681: PPUSH
13682: LD_INT 1
13684: PPUSH
13685: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13689: LD_VAR 0 1
13693: PPUSH
13694: LD_INT 202
13696: PPUSH
13697: LD_INT 150
13699: PPUSH
13700: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13704: LD_VAR 0 1
13708: PPUSH
13709: CALL_OW 110
13713: PUSH
13714: LD_INT 1
13716: EQUAL
13717: PUSH
13718: LD_VAR 0 1
13722: PPUSH
13723: LD_INT 202
13725: PPUSH
13726: LD_INT 150
13728: PPUSH
13729: CALL_OW 297
13733: PUSH
13734: LD_INT 6
13736: LESS
13737: AND
13738: PUSH
13739: LD_VAR 0 6
13743: AND
13744: IFFALSE 13795
// begin ComExitVehicle ( tmp2 ) ;
13746: LD_VAR 0 6
13750: PPUSH
13751: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13755: LD_VAR 0 6
13759: PPUSH
13760: LD_VAR 0 1
13764: PPUSH
13765: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13769: LD_VAR 0 6
13773: PPUSH
13774: LD_INT 700
13776: PPUSH
13777: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13781: LD_VAR 0 6
13785: PPUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 180
// end ; end ;
13795: GO 13530
13797: POP
13798: POP
// until kirovDestroyed ;
13799: LD_EXP 16
13803: IFFALSE 13353
// repeat wait ( 0 0$1 ) ;
13805: LD_INT 35
13807: PPUSH
13808: CALL_OW 67
// for i in omarSquad union Omar do
13812: LD_ADDR_VAR 0 1
13816: PUSH
13817: LD_EXP 39
13821: PUSH
13822: LD_EXP 34
13826: UNION
13827: PUSH
13828: FOR_IN
13829: IFFALSE 13999
// if IsInArea ( i , southRoadArea ) then
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_INT 15
13838: PPUSH
13839: CALL_OW 308
13843: IFFALSE 13856
// RemoveUnit ( i ) else
13845: LD_VAR 0 1
13849: PPUSH
13850: CALL_OW 64
13854: GO 13997
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13856: LD_VAR 0 1
13860: PPUSH
13861: CALL_OW 257
13865: PUSH
13866: LD_INT 3
13868: EQUAL
13869: PUSH
13870: LD_VAR 0 1
13874: PPUSH
13875: CALL_OW 310
13879: NOT
13880: AND
13881: PUSH
13882: LD_INT 22
13884: PUSH
13885: LD_INT 5
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 24
13894: PUSH
13895: LD_INT 251
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 58
13914: PUSH
13915: EMPTY
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PPUSH
13924: CALL_OW 69
13928: AND
13929: IFFALSE 13982
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13931: LD_VAR 0 1
13935: PPUSH
13936: LD_INT 22
13938: PUSH
13939: LD_INT 5
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 21
13948: PUSH
13949: LD_INT 2
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 58
13958: PUSH
13959: EMPTY
13960: LIST
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 69
13971: PUSH
13972: LD_INT 1
13974: ARRAY
13975: PPUSH
13976: CALL_OW 120
13980: GO 13997
// ComMoveXY ( i , 208 , 162 ) ;
13982: LD_VAR 0 1
13986: PPUSH
13987: LD_INT 208
13989: PPUSH
13990: LD_INT 162
13992: PPUSH
13993: CALL_OW 111
// end ;
13997: GO 13828
13999: POP
14000: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14001: LD_INT 22
14003: PUSH
14004: LD_INT 5
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 1
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: NOT
14030: IFFALSE 13805
// end ;
14032: PPOPN 7
14034: END
// every 0 0$1 trigger IsDead ( kirov ) do
14035: LD_INT 71
14037: PPUSH
14038: CALL_OW 301
14042: IFFALSE 14059
14044: GO 14046
14046: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14047: LD_EXP 26
14051: PPUSH
14052: LD_STRING DH-1-Kirov
14054: PPUSH
14055: CALL_OW 88
14059: END
// every 0 0$1 trigger See ( 2 , beria ) do
14060: LD_INT 2
14062: PPUSH
14063: LD_INT 106
14065: PPUSH
14066: CALL_OW 292
14070: IFFALSE 14087
14072: GO 14074
14074: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14075: LD_EXP 26
14079: PPUSH
14080: LD_STRING DH-1-Beria
14082: PPUSH
14083: CALL_OW 88
14087: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14088: LD_INT 2
14090: PPUSH
14091: LD_INT 112
14093: PPUSH
14094: CALL_OW 292
14098: IFFALSE 14365
14100: GO 14102
14102: DISABLE
// begin DialogueOn ;
14103: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14107: LD_INT 112
14109: PPUSH
14110: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14114: LD_EXP 26
14118: PPUSH
14119: LD_STRING DH-1-Kagan
14121: PPUSH
14122: CALL_OW 88
// if Kamil then
14126: LD_EXP 30
14130: IFFALSE 14168
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14132: LD_EXP 30
14136: PPUSH
14137: LD_STRING DKam-Kagan-2
14139: PPUSH
14140: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14144: LD_EXP 27
14148: PPUSH
14149: LD_STRING DG-Kagan-3
14151: PPUSH
14152: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14156: LD_EXP 27
14160: PPUSH
14161: LD_STRING DG-Kagan-4
14163: PPUSH
14164: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14168: LD_STRING KaganBase
14170: PPUSH
14171: CALL_OW 97
14175: PUSH
14176: LD_INT 1
14178: DOUBLE
14179: EQUAL
14180: IFTRUE 14184
14182: GO 14279
14184: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14185: LD_EXP 26
14189: PPUSH
14190: LD_STRING DH-Kagan-5
14192: PPUSH
14193: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14197: LD_EXP 26
14201: PPUSH
14202: LD_STRING DH-Kagan-6
14204: PPUSH
14205: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14209: LD_EXP 37
14213: PPUSH
14214: LD_STRING DShar-Kagan-7
14216: PPUSH
14217: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14221: LD_EXP 26
14225: PPUSH
14226: LD_STRING DH-Kagan-8
14228: PPUSH
14229: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14233: LD_EXP 26
14237: PPUSH
14238: LD_STRING DH-Kagan-9
14240: PPUSH
14241: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14245: LD_EXP 37
14249: PPUSH
14250: LD_STRING DShar-Kagan-10
14252: PPUSH
14253: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14257: LD_EXP 26
14261: PPUSH
14262: LD_STRING DH-Kagan-11
14264: PPUSH
14265: CALL_OW 88
// kaganCaptured := true ;
14269: LD_ADDR_EXP 24
14273: PUSH
14274: LD_INT 1
14276: ST_TO_ADDR
// end ; 2 :
14277: GO 14361
14279: LD_INT 2
14281: DOUBLE
14282: EQUAL
14283: IFTRUE 14287
14285: GO 14360
14287: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14288: LD_INT 22
14290: PUSH
14291: LD_INT 8
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PPUSH
14298: CALL_OW 69
14302: PUSH
14303: LD_EXP 36
14307: AND
14308: IFFALSE 14322
// Say ( Heike , DH-Kagan-a-5 ) ;
14310: LD_EXP 26
14314: PPUSH
14315: LD_STRING DH-Kagan-a-5
14317: PPUSH
14318: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14322: LD_EXP 26
14326: PPUSH
14327: LD_STRING DH-Kagan-a-6
14329: PPUSH
14330: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14334: LD_EXP 26
14338: PPUSH
14339: LD_STRING DH-Kagan-a-7
14341: PPUSH
14342: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14346: LD_EXP 27
14350: PPUSH
14351: LD_STRING DG-Kagan-a-8
14353: PPUSH
14354: CALL_OW 88
// end ; end ;
14358: GO 14361
14360: POP
// DialogueOff ;
14361: CALL_OW 7
// end ;
14365: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14366: LD_EXP 18
14370: PUSH
14371: LD_INT 112
14373: PPUSH
14374: CALL_OW 255
14378: PUSH
14379: LD_INT 2
14381: EQUAL
14382: OR
14383: IFFALSE 14395
14385: GO 14387
14387: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14388: LD_STRING KaganDone
14390: PPUSH
14391: CALL_OW 337
14395: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14396: LD_EXP 6
14400: PUSH
14401: LD_EXP 49
14405: PPUSH
14406: LD_INT 95
14408: PUSH
14409: LD_INT 19
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 72
14420: AND
14421: IFFALSE 14498
14423: GO 14425
14425: DISABLE
// begin DialogueOn ;
14426: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14430: LD_INT 63
14432: PPUSH
14433: LD_INT 32
14435: PPUSH
14436: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14440: LD_INT 63
14442: PPUSH
14443: LD_INT 32
14445: PPUSH
14446: LD_INT 2
14448: PPUSH
14449: LD_INT 12
14451: NEG
14452: PPUSH
14453: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14457: LD_EXP 26
14461: PPUSH
14462: LD_STRING DH-Omicron-1
14464: PPUSH
14465: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14469: LD_EXP 28
14473: PPUSH
14474: LD_STRING DM-Omicron-2
14476: PPUSH
14477: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14481: LD_INT 63
14483: PPUSH
14484: LD_INT 32
14486: PPUSH
14487: LD_INT 2
14489: PPUSH
14490: CALL_OW 331
// DialogueOff ;
14494: CALL_OW 7
// end ;
14498: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14499: LD_INT 2
14501: PPUSH
14502: LD_EXP 51
14506: PPUSH
14507: CALL_OW 292
14511: PUSH
14512: LD_EXP 51
14516: PPUSH
14517: CALL_OW 255
14521: PUSH
14522: LD_INT 2
14524: EQUAL
14525: OR
14526: PUSH
14527: LD_INT 106
14529: PPUSH
14530: CALL_OW 255
14534: PUSH
14535: LD_INT 2
14537: EQUAL
14538: OR
14539: PUSH
14540: LD_EXP 51
14544: PPUSH
14545: CALL_OW 302
14549: AND
14550: PUSH
14551: LD_EXP 26
14555: PPUSH
14556: CALL_OW 302
14560: AND
14561: PUSH
14562: LD_EXP 36
14566: PPUSH
14567: CALL_OW 302
14571: AND
14572: IFFALSE 15311
14574: GO 14576
14576: DISABLE
14577: LD_INT 0
14579: PPUSH
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
// begin DialogueOn ;
14584: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14588: LD_INT 111
14590: PPUSH
14591: LD_INT 90
14593: PPUSH
14594: LD_INT 2
14596: PPUSH
14597: LD_INT 6
14599: NEG
14600: PPUSH
14601: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14605: LD_INT 111
14607: PPUSH
14608: LD_INT 90
14610: PPUSH
14611: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14615: LD_EXP 36
14619: PPUSH
14620: LD_STRING DA-Cap-1
14622: PPUSH
14623: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14627: LD_EXP 26
14631: PPUSH
14632: LD_STRING DH-Cap-2
14634: PPUSH
14635: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14639: LD_INT 111
14641: PPUSH
14642: LD_INT 90
14644: PPUSH
14645: LD_INT 2
14647: PPUSH
14648: CALL_OW 331
// DialogueOff ;
14652: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14656: LD_INT 35
14658: PPUSH
14659: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14663: LD_EXP 17
14667: PUSH
14668: LD_INT 106
14670: PPUSH
14671: CALL_OW 255
14675: PUSH
14676: LD_INT 2
14678: EQUAL
14679: OR
14680: PUSH
14681: LD_EXP 51
14685: PPUSH
14686: CALL_OW 255
14690: PUSH
14691: LD_INT 2
14693: EQUAL
14694: OR
14695: PUSH
14696: LD_EXP 51
14700: PPUSH
14701: CALL_OW 302
14705: AND
14706: PUSH
14707: LD_EXP 36
14711: PPUSH
14712: CALL_OW 302
14716: AND
14717: PUSH
14718: LD_INT 2
14720: PPUSH
14721: CALL_OW 463
14725: NOT
14726: AND
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 21
14740: PUSH
14741: LD_INT 1
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 92
14750: PUSH
14751: LD_INT 110
14753: PUSH
14754: LD_INT 95
14756: PUSH
14757: LD_INT 12
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 69
14775: NOT
14776: AND
14777: PUSH
14778: LD_INT 22
14780: PUSH
14781: LD_INT 3
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 30
14790: PUSH
14791: LD_INT 5
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 92
14800: PUSH
14801: LD_INT 110
14803: PUSH
14804: LD_INT 95
14806: PUSH
14807: LD_INT 12
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: NOT
14826: AND
14827: IFFALSE 14656
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14829: LD_ADDR_VAR 0 2
14833: PUSH
14834: LD_EXP 38
14838: PUSH
14839: LD_EXP 29
14843: PUSH
14844: LD_EXP 30
14848: PUSH
14849: LD_EXP 32
14853: PUSH
14854: LD_EXP 31
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: UNION
14865: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14866: LD_ADDR_VAR 0 2
14870: PUSH
14871: LD_VAR 0 2
14875: PPUSH
14876: LD_INT 50
14878: PUSH
14879: EMPTY
14880: LIST
14881: PPUSH
14882: CALL_OW 72
14886: ST_TO_ADDR
// if tmp < 2 then
14887: LD_VAR 0 2
14891: PUSH
14892: LD_INT 2
14894: LESS
14895: IFFALSE 14907
// q := 2 else
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: LD_INT 2
14904: ST_TO_ADDR
14905: GO 14920
// q := Query ( LabCap ) ;
14907: LD_ADDR_VAR 0 4
14911: PUSH
14912: LD_STRING LabCap
14914: PPUSH
14915: CALL_OW 97
14919: ST_TO_ADDR
// case q of 1 :
14920: LD_VAR 0 4
14924: PUSH
14925: LD_INT 1
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14933
14931: GO 15275
14933: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14934: LD_INT 2
14936: PPUSH
14937: LD_EXP 51
14941: PPUSH
14942: CALL_OW 471
// labCaptured := true ;
14946: LD_ADDR_EXP 21
14950: PUSH
14951: LD_INT 1
14953: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14954: LD_EXP 26
14958: PPUSH
14959: LD_STRING DH-Cap-a-1
14961: PPUSH
14962: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14966: LD_EXP 36
14970: PPUSH
14971: LD_STRING DA-Cap-a-2
14973: PPUSH
14974: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
14978: LD_ADDR_VAR 0 5
14982: PUSH
14983: LD_EXP 36
14987: PUSH
14988: LD_INT -3
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT -2
14997: PUSH
14998: LD_INT -4
15000: PUSH
15001: LD_EXP 26
15005: PUSH
15006: LD_EXP 27
15010: PUSH
15011: LD_EXP 35
15015: PUSH
15016: LD_EXP 33
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: ADD
15029: PUSH
15030: LD_INT -3
15032: PUSH
15033: EMPTY
15034: LIST
15035: ADD
15036: PUSH
15037: LD_VAR 0 2
15041: ADD
15042: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15043: LD_ADDR_VAR 0 3
15047: PUSH
15048: LD_STRING Select two characters to go with Aviradze
15050: PPUSH
15051: LD_INT 2
15053: PPUSH
15054: LD_INT 2
15056: PPUSH
15057: LD_VAR 0 5
15061: PPUSH
15062: EMPTY
15063: PPUSH
15064: CALL_OW 42
15068: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15069: LD_EXP 51
15073: PPUSH
15074: LD_INT 8
15076: PPUSH
15077: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15081: LD_EXP 36
15085: PPUSH
15086: LD_INT 8
15088: PPUSH
15089: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15093: LD_ADDR_EXP 40
15097: PUSH
15098: LD_EXP 36
15102: PUSH
15103: EMPTY
15104: LIST
15105: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15106: LD_EXP 36
15110: PPUSH
15111: CALL_OW 310
15115: IFFALSE 15126
// ComExit ( Aviradze ) ;
15117: LD_EXP 36
15121: PPUSH
15122: CALL 76695 0 1
// wait ( 3 ) ;
15126: LD_INT 3
15128: PPUSH
15129: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15133: LD_EXP 36
15137: PPUSH
15138: LD_EXP 51
15142: PPUSH
15143: CALL_OW 120
// for i := 1 to 2 do
15147: LD_ADDR_VAR 0 1
15151: PUSH
15152: DOUBLE
15153: LD_INT 1
15155: DEC
15156: ST_TO_ADDR
15157: LD_INT 2
15159: PUSH
15160: FOR_TO
15161: IFFALSE 15264
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15163: LD_ADDR_EXP 40
15167: PUSH
15168: LD_EXP 40
15172: PUSH
15173: LD_VAR 0 3
15177: PUSH
15178: LD_VAR 0 1
15182: ARRAY
15183: UNION
15184: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15185: LD_VAR 0 3
15189: PUSH
15190: LD_VAR 0 1
15194: ARRAY
15195: PPUSH
15196: LD_INT 8
15198: PPUSH
15199: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15203: LD_VAR 0 3
15207: PUSH
15208: LD_VAR 0 1
15212: ARRAY
15213: PPUSH
15214: CALL_OW 310
15218: IFFALSE 15235
// ComExit ( tmp2 [ i ] ) ;
15220: LD_VAR 0 3
15224: PUSH
15225: LD_VAR 0 1
15229: ARRAY
15230: PPUSH
15231: CALL 76695 0 1
// wait ( 3 ) ;
15235: LD_INT 3
15237: PPUSH
15238: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15242: LD_VAR 0 3
15246: PUSH
15247: LD_VAR 0 1
15251: ARRAY
15252: PPUSH
15253: LD_EXP 51
15257: PPUSH
15258: CALL_OW 120
// end ;
15262: GO 15160
15264: POP
15265: POP
// SetAchievement ( ACH_LAB ) ;
15266: LD_STRING ACH_LAB
15268: PPUSH
15269: CALL_OW 543
// end ; 2 :
15273: GO 15311
15275: LD_INT 2
15277: DOUBLE
15278: EQUAL
15279: IFTRUE 15283
15281: GO 15310
15283: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15284: LD_EXP 26
15288: PPUSH
15289: LD_STRING DH-Cap-b-1
15291: PPUSH
15292: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15296: LD_EXP 36
15300: PPUSH
15301: LD_STRING DA-Cap-b-2
15303: PPUSH
15304: CALL_OW 88
// end ; end ;
15308: GO 15311
15310: POP
// end ;
15311: PPOPN 5
15313: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15314: LD_INT 10
15316: PPUSH
15317: LD_INT 22
15319: PUSH
15320: LD_INT 2
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 30
15329: PUSH
15330: LD_INT 31
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 70
15345: PUSH
15346: LD_INT 2
15348: GREATEREQUAL
15349: IFFALSE 15361
15351: GO 15353
15353: DISABLE
// SetAchievement ( ACH_KING ) ;
15354: LD_STRING ACH_KING
15356: PPUSH
15357: CALL_OW 543
15361: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15362: LD_EXP 11
15366: NOT
15367: PUSH
15368: LD_INT 10
15370: PPUSH
15371: LD_INT 22
15373: PUSH
15374: LD_INT 2
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 2
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: LD_INT 31
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 4
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PPUSH
15413: CALL_OW 70
15417: AND
15418: IFFALSE 15448
15420: GO 15422
15422: DISABLE
// begin hillBase := true ;
15423: LD_ADDR_EXP 15
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15431: LD_STRING HillDone
15433: PPUSH
15434: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15438: LD_INT 22
15440: PPUSH
15441: LD_INT 0
15443: PPUSH
15444: CALL_OW 424
// end ;
15448: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15449: LD_EXP 31
15453: PUSH
15454: LD_EXP 31
15458: PPUSH
15459: CALL_OW 256
15463: PUSH
15464: LD_INT 3
15466: LESS
15467: AND
15468: IFFALSE 15514
15470: GO 15472
15472: DISABLE
// begin DialogueOn ;
15473: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15477: LD_EXP 31
15481: PPUSH
15482: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15486: LD_EXP 31
15490: PPUSH
15491: LD_STRING DK-Kkilled-1
15493: PPUSH
15494: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15498: LD_EXP 26
15502: PPUSH
15503: LD_STRING DH-Kkilled-2
15505: PPUSH
15506: CALL_OW 88
// DialogueOff ;
15510: CALL_OW 7
// end ;
15514: END
// every 0 0$1 trigger kaiaKilledByRussian do
15515: LD_EXP 23
15519: IFFALSE 15536
15521: GO 15523
15523: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15524: LD_EXP 26
15528: PPUSH
15529: LD_STRING DH-Kkilled-3
15531: PPUSH
15532: CALL_OW 88
15536: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15537: LD_EXP 16
15541: PUSH
15542: LD_INT 106
15544: PPUSH
15545: CALL_OW 255
15549: PUSH
15550: LD_INT 2
15552: EQUAL
15553: PUSH
15554: LD_EXP 17
15558: OR
15559: AND
15560: PUSH
15561: LD_EXP 18
15565: PUSH
15566: LD_EXP 24
15570: PUSH
15571: LD_INT 112
15573: PPUSH
15574: CALL_OW 255
15578: PUSH
15579: LD_INT 2
15581: EQUAL
15582: AND
15583: OR
15584: AND
15585: IFFALSE 16825
15587: GO 15589
15589: DISABLE
15590: LD_INT 0
15592: PPUSH
15593: PPUSH
15594: PPUSH
15595: PPUSH
15596: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15597: LD_STRING GoToWest
15599: PPUSH
15600: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15604: LD_INT 17
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15614: LD_INT 35
15616: PPUSH
15617: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15621: LD_ADDR_VAR 0 2
15625: PUSH
15626: LD_INT 17
15628: PPUSH
15629: LD_INT 22
15631: PUSH
15632: LD_INT 2
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 2
15641: PUSH
15642: LD_INT 21
15644: PUSH
15645: LD_INT 1
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 2
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 3
15664: PUSH
15665: LD_INT 58
15667: PUSH
15668: EMPTY
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 70
15692: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15693: LD_ADDR_VAR 0 3
15697: PUSH
15698: LD_INT 22
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 3
15710: PUSH
15711: LD_INT 55
15713: PUSH
15714: EMPTY
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 2
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 3
15746: PUSH
15747: LD_INT 58
15749: PUSH
15750: EMPTY
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: LIST
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: PPUSH
15771: CALL_OW 69
15775: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15776: LD_VAR 0 2
15780: PUSH
15781: LD_INT 0
15783: PLUS
15784: PUSH
15785: LD_VAR 0 3
15789: PUSH
15790: LD_INT 0
15792: PLUS
15793: EQUAL
15794: IFFALSE 15614
// SaveCharacters ( Heike , 04_1_Heike ) ;
15796: LD_EXP 26
15800: PPUSH
15801: LD_STRING 04_1_Heike
15803: PPUSH
15804: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15808: LD_EXP 36
15812: PUSH
15813: LD_EXP 36
15817: PUSH
15818: LD_EXP 40
15822: IN
15823: NOT
15824: AND
15825: IFFALSE 15841
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15827: LD_EXP 36
15831: PPUSH
15832: LD_STRING 04_1_Aviradze
15834: PPUSH
15835: CALL_OW 38
15839: GO 15859
// if Aviradze then
15841: LD_EXP 36
15845: IFFALSE 15859
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15847: LD_EXP 36
15851: PPUSH
15852: LD_STRING 04_1_Aviradze_L
15854: PPUSH
15855: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15859: LD_EXP 29
15863: PUSH
15864: LD_EXP 29
15868: PUSH
15869: LD_EXP 40
15873: IN
15874: NOT
15875: AND
15876: IFFALSE 15892
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15878: LD_EXP 29
15882: PPUSH
15883: LD_STRING 04_1_Ibrahim
15885: PPUSH
15886: CALL_OW 38
15890: GO 15910
// if Ibrahim then
15892: LD_EXP 29
15896: IFFALSE 15910
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15898: LD_EXP 29
15902: PPUSH
15903: LD_STRING 04_1_Ibrahim_L
15905: PPUSH
15906: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15910: LD_EXP 30
15914: PUSH
15915: LD_EXP 30
15919: PUSH
15920: LD_EXP 40
15924: IN
15925: NOT
15926: AND
15927: IFFALSE 15943
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15929: LD_EXP 30
15933: PPUSH
15934: LD_STRING 04_1_Kamil
15936: PPUSH
15937: CALL_OW 38
15941: GO 15961
// if Kamil then
15943: LD_EXP 30
15947: IFFALSE 15961
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15949: LD_EXP 30
15953: PPUSH
15954: LD_STRING 04_1_Kamil_L
15956: PPUSH
15957: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15961: LD_EXP 32
15965: PUSH
15966: LD_EXP 32
15970: PUSH
15971: LD_EXP 40
15975: IN
15976: NOT
15977: AND
15978: IFFALSE 15994
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15980: LD_EXP 32
15984: PPUSH
15985: LD_STRING 04_1_Sophia
15987: PPUSH
15988: CALL_OW 38
15992: GO 16012
// if Sophia then
15994: LD_EXP 32
15998: IFFALSE 16012
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16000: LD_EXP 32
16004: PPUSH
16005: LD_STRING 04_1_Sophia_L
16007: PPUSH
16008: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16012: LD_EXP 31
16016: PUSH
16017: LD_EXP 31
16021: PUSH
16022: LD_EXP 40
16026: IN
16027: NOT
16028: AND
16029: IFFALSE 16045
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16031: LD_EXP 31
16035: PPUSH
16036: LD_STRING 04_1_Kaia
16038: PPUSH
16039: CALL_OW 38
16043: GO 16063
// if Kaia then
16045: LD_EXP 31
16049: IFFALSE 16063
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16051: LD_EXP 31
16055: PPUSH
16056: LD_STRING 04_1_Kaia_L
16058: PPUSH
16059: CALL_OW 38
// if Givi then
16063: LD_EXP 27
16067: IFFALSE 16081
// SaveCharacters ( Givi , 04_1_Givi ) ;
16069: LD_EXP 27
16073: PPUSH
16074: LD_STRING 04_1_Givi
16076: PPUSH
16077: CALL_OW 38
// if Mike then
16081: LD_EXP 28
16085: IFFALSE 16099
// SaveCharacters ( Mike , 04_1_Mike ) ;
16087: LD_EXP 28
16091: PPUSH
16092: LD_STRING 04_1_Mike
16094: PPUSH
16095: CALL_OW 38
// if Markov then
16099: LD_EXP 33
16103: IFFALSE 16117
// SaveCharacters ( Markov , 04_1_Markov ) ;
16105: LD_EXP 33
16109: PPUSH
16110: LD_STRING 04_1_Markov
16112: PPUSH
16113: CALL_OW 38
// if Kurt then
16117: LD_EXP 35
16121: IFFALSE 16142
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16123: LD_EXP 35
16127: PPUSH
16128: LD_STRING 04_1_Kurt
16130: PPUSH
16131: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16135: LD_STRING enableBioCharacter(BIO_KURT)
16137: PPUSH
16138: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16142: LD_EXP 38
16146: PUSH
16147: LD_EXP 40
16151: DIFF
16152: IFFALSE 16172
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16154: LD_EXP 38
16158: PUSH
16159: LD_EXP 40
16163: DIFF
16164: PPUSH
16165: LD_STRING 04_1_others
16167: PPUSH
16168: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16172: LD_EXP 40
16176: PUSH
16177: LD_EXP 38
16181: AND
16182: IFFALSE 16267
// begin tmp := [ ] ;
16184: LD_ADDR_VAR 0 2
16188: PUSH
16189: EMPTY
16190: ST_TO_ADDR
// for i in heikeSecondSquad do
16191: LD_ADDR_VAR 0 1
16195: PUSH
16196: LD_EXP 38
16200: PUSH
16201: FOR_IN
16202: IFFALSE 16247
// if i in aviradzeSquad then
16204: LD_VAR 0 1
16208: PUSH
16209: LD_EXP 40
16213: IN
16214: IFFALSE 16245
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16216: LD_ADDR_VAR 0 2
16220: PUSH
16221: LD_VAR 0 2
16225: PPUSH
16226: LD_VAR 0 2
16230: PUSH
16231: LD_INT 1
16233: PLUS
16234: PPUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 1
16244: ST_TO_ADDR
16245: GO 16201
16247: POP
16248: POP
// if tmp then
16249: LD_VAR 0 2
16253: IFFALSE 16267
// SaveCharacters ( tmp , 04_1_others_L ) ;
16255: LD_VAR 0 2
16259: PPUSH
16260: LD_STRING 04_1_others_L
16262: PPUSH
16263: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16267: LD_ADDR_VAR 0 2
16271: PUSH
16272: LD_INT 22
16274: PUSH
16275: LD_INT 2
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 23
16284: PUSH
16285: LD_INT 0
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PPUSH
16296: CALL_OW 69
16300: ST_TO_ADDR
// if tmp then
16301: LD_VAR 0 2
16305: IFFALSE 16319
// SaveCharacters ( tmp , 04_1_apes ) ;
16307: LD_VAR 0 2
16311: PPUSH
16312: LD_STRING 04_1_apes
16314: PPUSH
16315: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_INT 17
16326: PPUSH
16327: LD_INT 21
16329: PUSH
16330: LD_INT 2
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL_OW 70
16341: ST_TO_ADDR
// if tmp then
16342: LD_VAR 0 2
16346: IFFALSE 16690
// begin tmp2 := [ ] ;
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: EMPTY
16354: ST_TO_ADDR
// for i in tmp do
16355: LD_ADDR_VAR 0 1
16359: PUSH
16360: LD_VAR 0 2
16364: PUSH
16365: FOR_IN
16366: IFFALSE 16676
// begin driver := IsDrivenBy ( i ) ;
16368: LD_ADDR_VAR 0 5
16372: PUSH
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 311
16382: ST_TO_ADDR
// if not driver then
16383: LD_VAR 0 5
16387: NOT
16388: IFFALSE 16392
// continue ;
16390: GO 16365
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16392: LD_VAR 0 1
16396: PPUSH
16397: CALL_OW 264
16401: PUSH
16402: LD_INT 32
16404: PUSH
16405: LD_INT 12
16407: PUSH
16408: LD_INT 51
16410: PUSH
16411: LD_INT 89
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: IN
16420: IFFALSE 16568
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16422: LD_ADDR_VAR 0 4
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_INT 1
16434: PPUSH
16435: CALL_OW 289
16439: PUSH
16440: LD_VAR 0 1
16444: PPUSH
16445: LD_INT 2
16447: PPUSH
16448: CALL_OW 289
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16457: LD_ADDR_VAR 0 3
16461: PUSH
16462: LD_VAR 0 3
16466: PPUSH
16467: LD_VAR 0 3
16471: PUSH
16472: LD_INT 1
16474: PLUS
16475: PPUSH
16476: LD_VAR 0 1
16480: PPUSH
16481: CALL_OW 265
16485: PUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 262
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 263
16505: PUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 264
16515: PUSH
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 248
16525: PUSH
16526: LD_VAR 0 1
16530: PPUSH
16531: CALL_OW 256
16535: PUSH
16536: LD_VAR 0 4
16540: PUSH
16541: LD_VAR 0 5
16545: PPUSH
16546: CALL_OW 257
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: PPUSH
16561: CALL_OW 1
16565: ST_TO_ADDR
// end else
16566: GO 16674
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16568: LD_ADDR_VAR 0 3
16572: PUSH
16573: LD_VAR 0 3
16577: PPUSH
16578: LD_VAR 0 3
16582: PUSH
16583: LD_INT 1
16585: PLUS
16586: PPUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 265
16596: PUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 262
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 263
16616: PUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 264
16626: PUSH
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 248
16636: PUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 256
16646: PUSH
16647: EMPTY
16648: PUSH
16649: LD_VAR 0 5
16653: PPUSH
16654: CALL_OW 257
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PPUSH
16669: CALL_OW 1
16673: ST_TO_ADDR
// end ;
16674: GO 16365
16676: POP
16677: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16678: LD_VAR 0 3
16682: PPUSH
16683: LD_STRING 04_1_Vehicles
16685: PPUSH
16686: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16690: LD_EXP 21
16694: PPUSH
16695: LD_STRING 04_1_RuLabCaptured
16697: PPUSH
16698: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16702: LD_EXP 19
16706: PPUSH
16707: LD_STRING 04_1_EscapeCounter
16709: PPUSH
16710: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16714: LD_EXP 15
16718: PPUSH
16719: LD_STRING 04_1_BaseHill
16721: PPUSH
16722: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16726: LD_OWVAR 1
16730: PPUSH
16731: LD_STRING 04_1_Time
16733: PPUSH
16734: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16738: LD_EXP 14
16742: PPUSH
16743: LD_STRING 04_1_DeadCounter
16745: PPUSH
16746: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16750: LD_EXP 24
16754: PUSH
16755: LD_INT 112
16757: PPUSH
16758: CALL_OW 255
16762: MUL
16763: PUSH
16764: LD_INT 2
16766: EQUAL
16767: PPUSH
16768: LD_STRING 04_1_KaganCaptured
16770: PPUSH
16771: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16775: LD_INT 22
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 34
16787: PUSH
16788: LD_INT 26
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: PUSH
16804: LD_INT 0
16806: PLUS
16807: PPUSH
16808: LD_STRING 04_1_Flamethrower
16810: PPUSH
16811: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16815: LD_INT 1
16817: PPUSH
16818: LD_STRING __x1\04_cont2
16820: PPUSH
16821: CALL_OW 340
// end ; end_of_file
16825: PPOPN 5
16827: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 266
16837: PUSH
16838: LD_INT 0
16840: EQUAL
16841: PUSH
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 255
16851: PUSH
16852: LD_INT 2
16854: EQUAL
16855: AND
16856: IFFALSE 16866
// baseConstructed := true ;
16858: LD_ADDR_EXP 3
16862: PUSH
16863: LD_INT 1
16865: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16866: LD_VAR 0 1
16870: PPUSH
16871: CALL_OW 266
16875: PUSH
16876: LD_INT 6
16878: EQUAL
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: CALL_OW 255
16889: PUSH
16890: LD_INT 2
16892: EQUAL
16893: AND
16894: IFFALSE 16904
// labConstructed := true ;
16896: LD_ADDR_EXP 4
16900: PUSH
16901: LD_INT 1
16903: ST_TO_ADDR
// end ;
16904: PPOPN 1
16906: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL 33701 0 1
// if un = Heike then
16916: LD_VAR 0 1
16920: PUSH
16921: LD_EXP 26
16925: EQUAL
16926: IFFALSE 16935
// YouLost ( Heike ) ;
16928: LD_STRING Heike
16930: PPUSH
16931: CALL_OW 104
// if un = Omar then
16935: LD_VAR 0 1
16939: PUSH
16940: LD_EXP 34
16944: EQUAL
16945: IFFALSE 16954
// YouLost ( Omar ) ;
16947: LD_STRING Omar
16949: PPUSH
16950: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16954: LD_VAR 0 1
16958: PUSH
16959: LD_INT 22
16961: PUSH
16962: LD_INT 2
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 23
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 21
16981: PUSH
16982: LD_INT 1
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: PPUSH
16994: CALL_OW 69
16998: IN
16999: IFFALSE 17015
// loseCounter := loseCounter + 1 ;
17001: LD_ADDR_EXP 14
17005: PUSH
17006: LD_EXP 14
17010: PUSH
17011: LD_INT 1
17013: PLUS
17014: ST_TO_ADDR
// if un = omikron then
17015: LD_VAR 0 1
17019: PUSH
17020: LD_INT 64
17022: EQUAL
17023: IFFALSE 17033
// omicronFall := true ;
17025: LD_ADDR_EXP 13
17029: PUSH
17030: LD_INT 1
17032: ST_TO_ADDR
// if un = kirov then
17033: LD_VAR 0 1
17037: PUSH
17038: LD_INT 71
17040: EQUAL
17041: IFFALSE 17058
// begin ChangeMissionObjectives ( KirovDone ) ;
17043: LD_STRING KirovDone
17045: PPUSH
17046: CALL_OW 337
// kirovDestroyed := true ;
17050: LD_ADDR_EXP 16
17054: PUSH
17055: LD_INT 1
17057: ST_TO_ADDR
// end ; if un = beria then
17058: LD_VAR 0 1
17062: PUSH
17063: LD_INT 106
17065: EQUAL
17066: IFFALSE 17083
// begin ChangeMissionObjectives ( BeriaDone ) ;
17068: LD_STRING BeriaDone
17070: PPUSH
17071: CALL_OW 337
// beriaDestroyed := true ;
17075: LD_ADDR_EXP 17
17079: PUSH
17080: LD_INT 1
17082: ST_TO_ADDR
// end ; if un = kagan then
17083: LD_VAR 0 1
17087: PUSH
17088: LD_INT 112
17090: EQUAL
17091: IFFALSE 17101
// kaganDestroyed := true ;
17093: LD_ADDR_EXP 18
17097: PUSH
17098: LD_INT 1
17100: ST_TO_ADDR
// if un in russianPatrol then
17101: LD_VAR 0 1
17105: PUSH
17106: LD_EXP 48
17110: IN
17111: IFFALSE 17129
// russianPatrol := russianPatrol diff un ;
17113: LD_ADDR_EXP 48
17117: PUSH
17118: LD_EXP 48
17122: PUSH
17123: LD_VAR 0 1
17127: DIFF
17128: ST_TO_ADDR
// if un in russianOmicronAttackers then
17129: LD_VAR 0 1
17133: PUSH
17134: LD_EXP 49
17138: IN
17139: IFFALSE 17157
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17141: LD_ADDR_EXP 49
17145: PUSH
17146: LD_EXP 49
17150: PUSH
17151: LD_VAR 0 1
17155: DIFF
17156: ST_TO_ADDR
// end ;
17157: PPOPN 1
17159: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17160: LD_INT 0
17162: PPUSH
17163: PPUSH
17164: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17165: LD_VAR 0 1
17169: PUSH
17170: LD_INT 2
17172: PUSH
17173: LD_INT 22
17175: PUSH
17176: LD_INT 3
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 22
17185: PUSH
17186: LD_INT 4
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 22
17195: PUSH
17196: LD_INT 6
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 30
17211: PUSH
17212: LD_INT 32
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PPUSH
17223: CALL_OW 69
17227: IN
17228: IFFALSE 17401
// begin sol := UnitsInside ( un ) ;
17230: LD_ADDR_VAR 0 3
17234: PUSH
17235: LD_VAR 0 1
17239: PPUSH
17240: CALL_OW 313
17244: ST_TO_ADDR
// if not sol then
17245: LD_VAR 0 3
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17401
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17254: LD_ADDR_VAR 0 4
17258: PUSH
17259: LD_INT 22
17261: PUSH
17262: LD_VAR 0 1
17266: PPUSH
17267: CALL_OW 255
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 30
17281: PUSH
17282: LD_INT 4
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 30
17291: PUSH
17292: LD_INT 5
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PPUSH
17308: CALL_OW 69
17312: ST_TO_ADDR
// if not nearestBarracks then
17313: LD_VAR 0 4
17317: NOT
17318: IFFALSE 17322
// exit ;
17320: GO 17401
// for i in nearestBarracks do
17322: LD_ADDR_VAR 0 2
17326: PUSH
17327: LD_VAR 0 4
17331: PUSH
17332: FOR_IN
17333: IFFALSE 17368
// if UnitsInside ( i ) = 6 then
17335: LD_VAR 0 2
17339: PPUSH
17340: CALL_OW 313
17344: PUSH
17345: LD_INT 6
17347: EQUAL
17348: IFFALSE 17366
// nearestBarracks := nearestBarracks diff i ;
17350: LD_ADDR_VAR 0 4
17354: PUSH
17355: LD_VAR 0 4
17359: PUSH
17360: LD_VAR 0 2
17364: DIFF
17365: ST_TO_ADDR
17366: GO 17332
17368: POP
17369: POP
// if not nearestBarracks then
17370: LD_VAR 0 4
17374: NOT
17375: IFFALSE 17379
// exit ;
17377: GO 17401
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17379: LD_VAR 0 3
17383: PUSH
17384: LD_INT 1
17386: ARRAY
17387: PPUSH
17388: LD_VAR 0 4
17392: PUSH
17393: LD_INT 1
17395: ARRAY
17396: PPUSH
17397: CALL_OW 120
// end ; end ;
17401: PPOPN 4
17403: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17404: LD_INT 0
17406: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17407: LD_EXP 8
17411: NOT
17412: PUSH
17413: LD_EXP 5
17417: NOT
17418: OR
17419: IFFALSE 17423
// exit ;
17421: GO 17491
// for i in camAreas do
17423: LD_ADDR_VAR 0 5
17427: PUSH
17428: LD_EXP 8
17432: PUSH
17433: FOR_IN
17434: IFFALSE 17489
// if InArea ( x , y , i ) then
17436: LD_VAR 0 3
17440: PPUSH
17441: LD_VAR 0 4
17445: PPUSH
17446: LD_VAR 0 5
17450: PPUSH
17451: CALL_OW 309
17455: IFFALSE 17487
// begin SetAreaMapShow ( i , 0 ) ;
17457: LD_VAR 0 5
17461: PPUSH
17462: LD_INT 0
17464: PPUSH
17465: CALL_OW 424
// camAreas := camAreas diff i ;
17469: LD_ADDR_EXP 8
17473: PUSH
17474: LD_EXP 8
17478: PUSH
17479: LD_VAR 0 5
17483: DIFF
17484: ST_TO_ADDR
// break ;
17485: GO 17489
// end ;
17487: GO 17433
17489: POP
17490: POP
// end ;
17491: PPOPN 5
17493: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17494: LD_VAR 0 1
17498: PUSH
17499: LD_INT 2
17501: EQUAL
17502: PUSH
17503: LD_VAR 0 2
17507: PUSH
17508: LD_INT 5
17510: PUSH
17511: LD_INT 8
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: IN
17518: AND
17519: IFFALSE 17528
// YouLost ( Ally ) ;
17521: LD_STRING Ally
17523: PPUSH
17524: CALL_OW 104
// end ;
17528: PPOPN 2
17530: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17531: LD_VAR 0 1
17535: PUSH
17536: LD_EXP 31
17540: EQUAL
17541: PUSH
17542: LD_VAR 0 2
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: LD_INT 6
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: IN
17557: AND
17558: IFFALSE 17589
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17560: LD_ADDR_EXP 23
17564: PUSH
17565: LD_VAR 0 1
17569: PPUSH
17570: CALL_OW 250
17574: PUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 251
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: ST_TO_ADDR
// end ;
17589: PPOPN 3
17591: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_VAR 0 2
17601: PPUSH
17602: CALL 33821 0 2
// end ; end_of_file
17606: PPOPN 2
17608: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17609: LD_EXP 11
17613: NOT
17614: PUSH
17615: LD_INT 12
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 287
17625: PUSH
17626: LD_INT 20
17628: PUSH
17629: LD_INT 16
17631: PUSH
17632: LD_INT 12
17634: PUSH
17635: LD_INT 10
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: PUSH
17644: LD_OWVAR 67
17648: ARRAY
17649: LESS
17650: AND
17651: IFFALSE 17678
17653: GO 17655
17655: DISABLE
// begin enable ;
17656: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17657: LD_INT 1
17659: PPUSH
17660: LD_INT 5
17662: PPUSH
17663: CALL_OW 12
17667: PPUSH
17668: LD_INT 12
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 55
// end ; end_of_file
17678: END
// every 0 0$1 trigger omarCountdown do
17679: LD_EXP 22
17683: IFFALSE 17735
17685: GO 17687
17687: DISABLE
// begin enable ;
17688: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17689: LD_ADDR_OWVAR 47
17693: PUSH
17694: LD_STRING #X104-1
17696: PUSH
17697: LD_EXP 22
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17706: LD_ADDR_EXP 22
17710: PUSH
17711: LD_EXP 22
17715: PUSH
17716: LD_INT 35
17718: MINUS
17719: ST_TO_ADDR
// if not omarCountdown then
17720: LD_EXP 22
17724: NOT
17725: IFFALSE 17735
// display_strings :=  ;
17727: LD_ADDR_OWVAR 47
17731: PUSH
17732: LD_STRING 
17734: ST_TO_ADDR
// end ; end_of_file
17735: END
// export globalGameSaveCounter ; every 0 0$1 do
17736: GO 17738
17738: DISABLE
// begin enable ;
17739: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17740: LD_STRING updateTimer(
17742: PUSH
17743: LD_OWVAR 1
17747: STR
17748: PUSH
17749: LD_STRING );
17751: STR
17752: PPUSH
17753: CALL_OW 559
// end ;
17757: END
// every 0 0$1 do
17758: GO 17760
17760: DISABLE
// begin globalGameSaveCounter := 0 ;
17761: LD_ADDR_EXP 53
17765: PUSH
17766: LD_INT 0
17768: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17769: LD_STRING setGameSaveCounter(0)
17771: PPUSH
17772: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17776: LD_STRING initStreamRollete();
17778: PPUSH
17779: CALL_OW 559
// InitStreamMode ;
17783: CALL 19109 0 0
// DefineStreamItems ( false ) ;
17787: LD_INT 0
17789: PPUSH
17790: CALL 19573 0 1
// end ;
17794: END
// export function SOS_MapStart ( ) ; begin
17795: LD_INT 0
17797: PPUSH
// if streamModeActive then
17798: LD_EXP 54
17802: IFFALSE 17811
// DefineStreamItems ( true ) ;
17804: LD_INT 1
17806: PPUSH
17807: CALL 19573 0 1
// UpdateLuaVariables ( ) ;
17811: CALL 17828 0 0
// UpdateFactoryWaypoints ( ) ;
17815: CALL 32442 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17819: CALL 32699 0 0
// end ;
17823: LD_VAR 0 1
17827: RET
// function UpdateLuaVariables ( ) ; begin
17828: LD_INT 0
17830: PPUSH
// if globalGameSaveCounter then
17831: LD_EXP 53
17835: IFFALSE 17869
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17837: LD_ADDR_EXP 53
17841: PUSH
17842: LD_EXP 53
17846: PPUSH
17847: CALL 77658 0 1
17851: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17852: LD_STRING setGameSaveCounter(
17854: PUSH
17855: LD_EXP 53
17859: STR
17860: PUSH
17861: LD_STRING )
17863: STR
17864: PPUSH
17865: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17869: LD_STRING setGameDifficulty(
17871: PUSH
17872: LD_OWVAR 67
17876: STR
17877: PUSH
17878: LD_STRING )
17880: STR
17881: PPUSH
17882: CALL_OW 559
// end ;
17886: LD_VAR 0 1
17890: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17891: LD_INT 0
17893: PPUSH
// if p2 = stream_mode then
17894: LD_VAR 0 2
17898: PUSH
17899: LD_INT 100
17901: EQUAL
17902: IFFALSE 18905
// begin if not StreamModeActive then
17904: LD_EXP 54
17908: NOT
17909: IFFALSE 17919
// StreamModeActive := true ;
17911: LD_ADDR_EXP 54
17915: PUSH
17916: LD_INT 1
17918: ST_TO_ADDR
// if p3 = 0 then
17919: LD_VAR 0 3
17923: PUSH
17924: LD_INT 0
17926: EQUAL
17927: IFFALSE 17933
// InitStreamMode ;
17929: CALL 19109 0 0
// if p3 = 1 then
17933: LD_VAR 0 3
17937: PUSH
17938: LD_INT 1
17940: EQUAL
17941: IFFALSE 17951
// sRocket := true ;
17943: LD_ADDR_EXP 59
17947: PUSH
17948: LD_INT 1
17950: ST_TO_ADDR
// if p3 = 2 then
17951: LD_VAR 0 3
17955: PUSH
17956: LD_INT 2
17958: EQUAL
17959: IFFALSE 17969
// sSpeed := true ;
17961: LD_ADDR_EXP 58
17965: PUSH
17966: LD_INT 1
17968: ST_TO_ADDR
// if p3 = 3 then
17969: LD_VAR 0 3
17973: PUSH
17974: LD_INT 3
17976: EQUAL
17977: IFFALSE 17987
// sEngine := true ;
17979: LD_ADDR_EXP 60
17983: PUSH
17984: LD_INT 1
17986: ST_TO_ADDR
// if p3 = 4 then
17987: LD_VAR 0 3
17991: PUSH
17992: LD_INT 4
17994: EQUAL
17995: IFFALSE 18005
// sSpec := true ;
17997: LD_ADDR_EXP 57
18001: PUSH
18002: LD_INT 1
18004: ST_TO_ADDR
// if p3 = 5 then
18005: LD_VAR 0 3
18009: PUSH
18010: LD_INT 5
18012: EQUAL
18013: IFFALSE 18023
// sLevel := true ;
18015: LD_ADDR_EXP 61
18019: PUSH
18020: LD_INT 1
18022: ST_TO_ADDR
// if p3 = 6 then
18023: LD_VAR 0 3
18027: PUSH
18028: LD_INT 6
18030: EQUAL
18031: IFFALSE 18041
// sArmoury := true ;
18033: LD_ADDR_EXP 62
18037: PUSH
18038: LD_INT 1
18040: ST_TO_ADDR
// if p3 = 7 then
18041: LD_VAR 0 3
18045: PUSH
18046: LD_INT 7
18048: EQUAL
18049: IFFALSE 18059
// sRadar := true ;
18051: LD_ADDR_EXP 63
18055: PUSH
18056: LD_INT 1
18058: ST_TO_ADDR
// if p3 = 8 then
18059: LD_VAR 0 3
18063: PUSH
18064: LD_INT 8
18066: EQUAL
18067: IFFALSE 18077
// sBunker := true ;
18069: LD_ADDR_EXP 64
18073: PUSH
18074: LD_INT 1
18076: ST_TO_ADDR
// if p3 = 9 then
18077: LD_VAR 0 3
18081: PUSH
18082: LD_INT 9
18084: EQUAL
18085: IFFALSE 18095
// sHack := true ;
18087: LD_ADDR_EXP 65
18091: PUSH
18092: LD_INT 1
18094: ST_TO_ADDR
// if p3 = 10 then
18095: LD_VAR 0 3
18099: PUSH
18100: LD_INT 10
18102: EQUAL
18103: IFFALSE 18113
// sFire := true ;
18105: LD_ADDR_EXP 66
18109: PUSH
18110: LD_INT 1
18112: ST_TO_ADDR
// if p3 = 11 then
18113: LD_VAR 0 3
18117: PUSH
18118: LD_INT 11
18120: EQUAL
18121: IFFALSE 18131
// sRefresh := true ;
18123: LD_ADDR_EXP 67
18127: PUSH
18128: LD_INT 1
18130: ST_TO_ADDR
// if p3 = 12 then
18131: LD_VAR 0 3
18135: PUSH
18136: LD_INT 12
18138: EQUAL
18139: IFFALSE 18149
// sExp := true ;
18141: LD_ADDR_EXP 68
18145: PUSH
18146: LD_INT 1
18148: ST_TO_ADDR
// if p3 = 13 then
18149: LD_VAR 0 3
18153: PUSH
18154: LD_INT 13
18156: EQUAL
18157: IFFALSE 18167
// sDepot := true ;
18159: LD_ADDR_EXP 69
18163: PUSH
18164: LD_INT 1
18166: ST_TO_ADDR
// if p3 = 14 then
18167: LD_VAR 0 3
18171: PUSH
18172: LD_INT 14
18174: EQUAL
18175: IFFALSE 18185
// sFlag := true ;
18177: LD_ADDR_EXP 70
18181: PUSH
18182: LD_INT 1
18184: ST_TO_ADDR
// if p3 = 15 then
18185: LD_VAR 0 3
18189: PUSH
18190: LD_INT 15
18192: EQUAL
18193: IFFALSE 18203
// sKamikadze := true ;
18195: LD_ADDR_EXP 78
18199: PUSH
18200: LD_INT 1
18202: ST_TO_ADDR
// if p3 = 16 then
18203: LD_VAR 0 3
18207: PUSH
18208: LD_INT 16
18210: EQUAL
18211: IFFALSE 18221
// sTroll := true ;
18213: LD_ADDR_EXP 79
18217: PUSH
18218: LD_INT 1
18220: ST_TO_ADDR
// if p3 = 17 then
18221: LD_VAR 0 3
18225: PUSH
18226: LD_INT 17
18228: EQUAL
18229: IFFALSE 18239
// sSlow := true ;
18231: LD_ADDR_EXP 80
18235: PUSH
18236: LD_INT 1
18238: ST_TO_ADDR
// if p3 = 18 then
18239: LD_VAR 0 3
18243: PUSH
18244: LD_INT 18
18246: EQUAL
18247: IFFALSE 18257
// sLack := true ;
18249: LD_ADDR_EXP 81
18253: PUSH
18254: LD_INT 1
18256: ST_TO_ADDR
// if p3 = 19 then
18257: LD_VAR 0 3
18261: PUSH
18262: LD_INT 19
18264: EQUAL
18265: IFFALSE 18275
// sTank := true ;
18267: LD_ADDR_EXP 83
18271: PUSH
18272: LD_INT 1
18274: ST_TO_ADDR
// if p3 = 20 then
18275: LD_VAR 0 3
18279: PUSH
18280: LD_INT 20
18282: EQUAL
18283: IFFALSE 18293
// sRemote := true ;
18285: LD_ADDR_EXP 84
18289: PUSH
18290: LD_INT 1
18292: ST_TO_ADDR
// if p3 = 21 then
18293: LD_VAR 0 3
18297: PUSH
18298: LD_INT 21
18300: EQUAL
18301: IFFALSE 18311
// sPowell := true ;
18303: LD_ADDR_EXP 85
18307: PUSH
18308: LD_INT 1
18310: ST_TO_ADDR
// if p3 = 22 then
18311: LD_VAR 0 3
18315: PUSH
18316: LD_INT 22
18318: EQUAL
18319: IFFALSE 18329
// sTeleport := true ;
18321: LD_ADDR_EXP 88
18325: PUSH
18326: LD_INT 1
18328: ST_TO_ADDR
// if p3 = 23 then
18329: LD_VAR 0 3
18333: PUSH
18334: LD_INT 23
18336: EQUAL
18337: IFFALSE 18347
// sOilTower := true ;
18339: LD_ADDR_EXP 90
18343: PUSH
18344: LD_INT 1
18346: ST_TO_ADDR
// if p3 = 24 then
18347: LD_VAR 0 3
18351: PUSH
18352: LD_INT 24
18354: EQUAL
18355: IFFALSE 18365
// sShovel := true ;
18357: LD_ADDR_EXP 91
18361: PUSH
18362: LD_INT 1
18364: ST_TO_ADDR
// if p3 = 25 then
18365: LD_VAR 0 3
18369: PUSH
18370: LD_INT 25
18372: EQUAL
18373: IFFALSE 18383
// sSheik := true ;
18375: LD_ADDR_EXP 92
18379: PUSH
18380: LD_INT 1
18382: ST_TO_ADDR
// if p3 = 26 then
18383: LD_VAR 0 3
18387: PUSH
18388: LD_INT 26
18390: EQUAL
18391: IFFALSE 18401
// sEarthquake := true ;
18393: LD_ADDR_EXP 94
18397: PUSH
18398: LD_INT 1
18400: ST_TO_ADDR
// if p3 = 27 then
18401: LD_VAR 0 3
18405: PUSH
18406: LD_INT 27
18408: EQUAL
18409: IFFALSE 18419
// sAI := true ;
18411: LD_ADDR_EXP 95
18415: PUSH
18416: LD_INT 1
18418: ST_TO_ADDR
// if p3 = 28 then
18419: LD_VAR 0 3
18423: PUSH
18424: LD_INT 28
18426: EQUAL
18427: IFFALSE 18437
// sCargo := true ;
18429: LD_ADDR_EXP 98
18433: PUSH
18434: LD_INT 1
18436: ST_TO_ADDR
// if p3 = 29 then
18437: LD_VAR 0 3
18441: PUSH
18442: LD_INT 29
18444: EQUAL
18445: IFFALSE 18455
// sDLaser := true ;
18447: LD_ADDR_EXP 99
18451: PUSH
18452: LD_INT 1
18454: ST_TO_ADDR
// if p3 = 30 then
18455: LD_VAR 0 3
18459: PUSH
18460: LD_INT 30
18462: EQUAL
18463: IFFALSE 18473
// sExchange := true ;
18465: LD_ADDR_EXP 100
18469: PUSH
18470: LD_INT 1
18472: ST_TO_ADDR
// if p3 = 31 then
18473: LD_VAR 0 3
18477: PUSH
18478: LD_INT 31
18480: EQUAL
18481: IFFALSE 18491
// sFac := true ;
18483: LD_ADDR_EXP 101
18487: PUSH
18488: LD_INT 1
18490: ST_TO_ADDR
// if p3 = 32 then
18491: LD_VAR 0 3
18495: PUSH
18496: LD_INT 32
18498: EQUAL
18499: IFFALSE 18509
// sPower := true ;
18501: LD_ADDR_EXP 102
18505: PUSH
18506: LD_INT 1
18508: ST_TO_ADDR
// if p3 = 33 then
18509: LD_VAR 0 3
18513: PUSH
18514: LD_INT 33
18516: EQUAL
18517: IFFALSE 18527
// sRandom := true ;
18519: LD_ADDR_EXP 103
18523: PUSH
18524: LD_INT 1
18526: ST_TO_ADDR
// if p3 = 34 then
18527: LD_VAR 0 3
18531: PUSH
18532: LD_INT 34
18534: EQUAL
18535: IFFALSE 18545
// sShield := true ;
18537: LD_ADDR_EXP 104
18541: PUSH
18542: LD_INT 1
18544: ST_TO_ADDR
// if p3 = 35 then
18545: LD_VAR 0 3
18549: PUSH
18550: LD_INT 35
18552: EQUAL
18553: IFFALSE 18563
// sTime := true ;
18555: LD_ADDR_EXP 105
18559: PUSH
18560: LD_INT 1
18562: ST_TO_ADDR
// if p3 = 36 then
18563: LD_VAR 0 3
18567: PUSH
18568: LD_INT 36
18570: EQUAL
18571: IFFALSE 18581
// sTools := true ;
18573: LD_ADDR_EXP 106
18577: PUSH
18578: LD_INT 1
18580: ST_TO_ADDR
// if p3 = 101 then
18581: LD_VAR 0 3
18585: PUSH
18586: LD_INT 101
18588: EQUAL
18589: IFFALSE 18599
// sSold := true ;
18591: LD_ADDR_EXP 71
18595: PUSH
18596: LD_INT 1
18598: ST_TO_ADDR
// if p3 = 102 then
18599: LD_VAR 0 3
18603: PUSH
18604: LD_INT 102
18606: EQUAL
18607: IFFALSE 18617
// sDiff := true ;
18609: LD_ADDR_EXP 72
18613: PUSH
18614: LD_INT 1
18616: ST_TO_ADDR
// if p3 = 103 then
18617: LD_VAR 0 3
18621: PUSH
18622: LD_INT 103
18624: EQUAL
18625: IFFALSE 18635
// sFog := true ;
18627: LD_ADDR_EXP 75
18631: PUSH
18632: LD_INT 1
18634: ST_TO_ADDR
// if p3 = 104 then
18635: LD_VAR 0 3
18639: PUSH
18640: LD_INT 104
18642: EQUAL
18643: IFFALSE 18653
// sReset := true ;
18645: LD_ADDR_EXP 76
18649: PUSH
18650: LD_INT 1
18652: ST_TO_ADDR
// if p3 = 105 then
18653: LD_VAR 0 3
18657: PUSH
18658: LD_INT 105
18660: EQUAL
18661: IFFALSE 18671
// sSun := true ;
18663: LD_ADDR_EXP 77
18667: PUSH
18668: LD_INT 1
18670: ST_TO_ADDR
// if p3 = 106 then
18671: LD_VAR 0 3
18675: PUSH
18676: LD_INT 106
18678: EQUAL
18679: IFFALSE 18689
// sTiger := true ;
18681: LD_ADDR_EXP 73
18685: PUSH
18686: LD_INT 1
18688: ST_TO_ADDR
// if p3 = 107 then
18689: LD_VAR 0 3
18693: PUSH
18694: LD_INT 107
18696: EQUAL
18697: IFFALSE 18707
// sBomb := true ;
18699: LD_ADDR_EXP 74
18703: PUSH
18704: LD_INT 1
18706: ST_TO_ADDR
// if p3 = 108 then
18707: LD_VAR 0 3
18711: PUSH
18712: LD_INT 108
18714: EQUAL
18715: IFFALSE 18725
// sWound := true ;
18717: LD_ADDR_EXP 82
18721: PUSH
18722: LD_INT 1
18724: ST_TO_ADDR
// if p3 = 109 then
18725: LD_VAR 0 3
18729: PUSH
18730: LD_INT 109
18732: EQUAL
18733: IFFALSE 18743
// sBetray := true ;
18735: LD_ADDR_EXP 86
18739: PUSH
18740: LD_INT 1
18742: ST_TO_ADDR
// if p3 = 110 then
18743: LD_VAR 0 3
18747: PUSH
18748: LD_INT 110
18750: EQUAL
18751: IFFALSE 18761
// sContamin := true ;
18753: LD_ADDR_EXP 87
18757: PUSH
18758: LD_INT 1
18760: ST_TO_ADDR
// if p3 = 111 then
18761: LD_VAR 0 3
18765: PUSH
18766: LD_INT 111
18768: EQUAL
18769: IFFALSE 18779
// sOil := true ;
18771: LD_ADDR_EXP 89
18775: PUSH
18776: LD_INT 1
18778: ST_TO_ADDR
// if p3 = 112 then
18779: LD_VAR 0 3
18783: PUSH
18784: LD_INT 112
18786: EQUAL
18787: IFFALSE 18797
// sStu := true ;
18789: LD_ADDR_EXP 93
18793: PUSH
18794: LD_INT 1
18796: ST_TO_ADDR
// if p3 = 113 then
18797: LD_VAR 0 3
18801: PUSH
18802: LD_INT 113
18804: EQUAL
18805: IFFALSE 18815
// sBazooka := true ;
18807: LD_ADDR_EXP 96
18811: PUSH
18812: LD_INT 1
18814: ST_TO_ADDR
// if p3 = 114 then
18815: LD_VAR 0 3
18819: PUSH
18820: LD_INT 114
18822: EQUAL
18823: IFFALSE 18833
// sMortar := true ;
18825: LD_ADDR_EXP 97
18829: PUSH
18830: LD_INT 1
18832: ST_TO_ADDR
// if p3 = 115 then
18833: LD_VAR 0 3
18837: PUSH
18838: LD_INT 115
18840: EQUAL
18841: IFFALSE 18851
// sRanger := true ;
18843: LD_ADDR_EXP 107
18847: PUSH
18848: LD_INT 1
18850: ST_TO_ADDR
// if p3 = 116 then
18851: LD_VAR 0 3
18855: PUSH
18856: LD_INT 116
18858: EQUAL
18859: IFFALSE 18869
// sComputer := true ;
18861: LD_ADDR_EXP 108
18865: PUSH
18866: LD_INT 1
18868: ST_TO_ADDR
// if p3 = 117 then
18869: LD_VAR 0 3
18873: PUSH
18874: LD_INT 117
18876: EQUAL
18877: IFFALSE 18887
// s30 := true ;
18879: LD_ADDR_EXP 109
18883: PUSH
18884: LD_INT 1
18886: ST_TO_ADDR
// if p3 = 118 then
18887: LD_VAR 0 3
18891: PUSH
18892: LD_INT 118
18894: EQUAL
18895: IFFALSE 18905
// s60 := true ;
18897: LD_ADDR_EXP 110
18901: PUSH
18902: LD_INT 1
18904: ST_TO_ADDR
// end ; if p2 = hack_mode then
18905: LD_VAR 0 2
18909: PUSH
18910: LD_INT 101
18912: EQUAL
18913: IFFALSE 19041
// begin case p3 of 1 :
18915: LD_VAR 0 3
18919: PUSH
18920: LD_INT 1
18922: DOUBLE
18923: EQUAL
18924: IFTRUE 18928
18926: GO 18935
18928: POP
// hHackUnlimitedResources ; 2 :
18929: CALL 31188 0 0
18933: GO 19041
18935: LD_INT 2
18937: DOUBLE
18938: EQUAL
18939: IFTRUE 18943
18941: GO 18950
18943: POP
// hHackSetLevel10 ; 3 :
18944: CALL 31321 0 0
18948: GO 19041
18950: LD_INT 3
18952: DOUBLE
18953: EQUAL
18954: IFTRUE 18958
18956: GO 18965
18958: POP
// hHackSetLevel10YourUnits ; 4 :
18959: CALL 31406 0 0
18963: GO 19041
18965: LD_INT 4
18967: DOUBLE
18968: EQUAL
18969: IFTRUE 18973
18971: GO 18980
18973: POP
// hHackInvincible ; 5 :
18974: CALL 31854 0 0
18978: GO 19041
18980: LD_INT 5
18982: DOUBLE
18983: EQUAL
18984: IFTRUE 18988
18986: GO 18995
18988: POP
// hHackInvisible ; 6 :
18989: CALL 31965 0 0
18993: GO 19041
18995: LD_INT 6
18997: DOUBLE
18998: EQUAL
18999: IFTRUE 19003
19001: GO 19010
19003: POP
// hHackChangeYourSide ; 7 :
19004: CALL 32022 0 0
19008: GO 19041
19010: LD_INT 7
19012: DOUBLE
19013: EQUAL
19014: IFTRUE 19018
19016: GO 19025
19018: POP
// hHackChangeUnitSide ; 8 :
19019: CALL 32064 0 0
19023: GO 19041
19025: LD_INT 8
19027: DOUBLE
19028: EQUAL
19029: IFTRUE 19033
19031: GO 19040
19033: POP
// hHackFog ; end ;
19034: CALL 32165 0 0
19038: GO 19041
19040: POP
// end ; if p2 = game_save_mode then
19041: LD_VAR 0 2
19045: PUSH
19046: LD_INT 102
19048: EQUAL
19049: IFFALSE 19104
// begin if p3 = 1 then
19051: LD_VAR 0 3
19055: PUSH
19056: LD_INT 1
19058: EQUAL
19059: IFFALSE 19071
// globalGameSaveCounter := p4 ;
19061: LD_ADDR_EXP 53
19065: PUSH
19066: LD_VAR 0 4
19070: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19071: LD_VAR 0 3
19075: PUSH
19076: LD_INT 2
19078: EQUAL
19079: PUSH
19080: LD_EXP 53
19084: AND
19085: IFFALSE 19104
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19087: LD_STRING setGameSaveCounter(
19089: PUSH
19090: LD_EXP 53
19094: STR
19095: PUSH
19096: LD_STRING )
19098: STR
19099: PPUSH
19100: CALL_OW 559
// end ; end ;
19104: LD_VAR 0 7
19108: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19109: LD_INT 0
19111: PPUSH
// streamModeActive := false ;
19112: LD_ADDR_EXP 54
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
// normalCounter := 36 ;
19120: LD_ADDR_EXP 55
19124: PUSH
19125: LD_INT 36
19127: ST_TO_ADDR
// hardcoreCounter := 18 ;
19128: LD_ADDR_EXP 56
19132: PUSH
19133: LD_INT 18
19135: ST_TO_ADDR
// sRocket := false ;
19136: LD_ADDR_EXP 59
19140: PUSH
19141: LD_INT 0
19143: ST_TO_ADDR
// sSpeed := false ;
19144: LD_ADDR_EXP 58
19148: PUSH
19149: LD_INT 0
19151: ST_TO_ADDR
// sEngine := false ;
19152: LD_ADDR_EXP 60
19156: PUSH
19157: LD_INT 0
19159: ST_TO_ADDR
// sSpec := false ;
19160: LD_ADDR_EXP 57
19164: PUSH
19165: LD_INT 0
19167: ST_TO_ADDR
// sLevel := false ;
19168: LD_ADDR_EXP 61
19172: PUSH
19173: LD_INT 0
19175: ST_TO_ADDR
// sArmoury := false ;
19176: LD_ADDR_EXP 62
19180: PUSH
19181: LD_INT 0
19183: ST_TO_ADDR
// sRadar := false ;
19184: LD_ADDR_EXP 63
19188: PUSH
19189: LD_INT 0
19191: ST_TO_ADDR
// sBunker := false ;
19192: LD_ADDR_EXP 64
19196: PUSH
19197: LD_INT 0
19199: ST_TO_ADDR
// sHack := false ;
19200: LD_ADDR_EXP 65
19204: PUSH
19205: LD_INT 0
19207: ST_TO_ADDR
// sFire := false ;
19208: LD_ADDR_EXP 66
19212: PUSH
19213: LD_INT 0
19215: ST_TO_ADDR
// sRefresh := false ;
19216: LD_ADDR_EXP 67
19220: PUSH
19221: LD_INT 0
19223: ST_TO_ADDR
// sExp := false ;
19224: LD_ADDR_EXP 68
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// sDepot := false ;
19232: LD_ADDR_EXP 69
19236: PUSH
19237: LD_INT 0
19239: ST_TO_ADDR
// sFlag := false ;
19240: LD_ADDR_EXP 70
19244: PUSH
19245: LD_INT 0
19247: ST_TO_ADDR
// sKamikadze := false ;
19248: LD_ADDR_EXP 78
19252: PUSH
19253: LD_INT 0
19255: ST_TO_ADDR
// sTroll := false ;
19256: LD_ADDR_EXP 79
19260: PUSH
19261: LD_INT 0
19263: ST_TO_ADDR
// sSlow := false ;
19264: LD_ADDR_EXP 80
19268: PUSH
19269: LD_INT 0
19271: ST_TO_ADDR
// sLack := false ;
19272: LD_ADDR_EXP 81
19276: PUSH
19277: LD_INT 0
19279: ST_TO_ADDR
// sTank := false ;
19280: LD_ADDR_EXP 83
19284: PUSH
19285: LD_INT 0
19287: ST_TO_ADDR
// sRemote := false ;
19288: LD_ADDR_EXP 84
19292: PUSH
19293: LD_INT 0
19295: ST_TO_ADDR
// sPowell := false ;
19296: LD_ADDR_EXP 85
19300: PUSH
19301: LD_INT 0
19303: ST_TO_ADDR
// sTeleport := false ;
19304: LD_ADDR_EXP 88
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// sOilTower := false ;
19312: LD_ADDR_EXP 90
19316: PUSH
19317: LD_INT 0
19319: ST_TO_ADDR
// sShovel := false ;
19320: LD_ADDR_EXP 91
19324: PUSH
19325: LD_INT 0
19327: ST_TO_ADDR
// sSheik := false ;
19328: LD_ADDR_EXP 92
19332: PUSH
19333: LD_INT 0
19335: ST_TO_ADDR
// sEarthquake := false ;
19336: LD_ADDR_EXP 94
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// sAI := false ;
19344: LD_ADDR_EXP 95
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// sCargo := false ;
19352: LD_ADDR_EXP 98
19356: PUSH
19357: LD_INT 0
19359: ST_TO_ADDR
// sDLaser := false ;
19360: LD_ADDR_EXP 99
19364: PUSH
19365: LD_INT 0
19367: ST_TO_ADDR
// sExchange := false ;
19368: LD_ADDR_EXP 100
19372: PUSH
19373: LD_INT 0
19375: ST_TO_ADDR
// sFac := false ;
19376: LD_ADDR_EXP 101
19380: PUSH
19381: LD_INT 0
19383: ST_TO_ADDR
// sPower := false ;
19384: LD_ADDR_EXP 102
19388: PUSH
19389: LD_INT 0
19391: ST_TO_ADDR
// sRandom := false ;
19392: LD_ADDR_EXP 103
19396: PUSH
19397: LD_INT 0
19399: ST_TO_ADDR
// sShield := false ;
19400: LD_ADDR_EXP 104
19404: PUSH
19405: LD_INT 0
19407: ST_TO_ADDR
// sTime := false ;
19408: LD_ADDR_EXP 105
19412: PUSH
19413: LD_INT 0
19415: ST_TO_ADDR
// sTools := false ;
19416: LD_ADDR_EXP 106
19420: PUSH
19421: LD_INT 0
19423: ST_TO_ADDR
// sSold := false ;
19424: LD_ADDR_EXP 71
19428: PUSH
19429: LD_INT 0
19431: ST_TO_ADDR
// sDiff := false ;
19432: LD_ADDR_EXP 72
19436: PUSH
19437: LD_INT 0
19439: ST_TO_ADDR
// sFog := false ;
19440: LD_ADDR_EXP 75
19444: PUSH
19445: LD_INT 0
19447: ST_TO_ADDR
// sReset := false ;
19448: LD_ADDR_EXP 76
19452: PUSH
19453: LD_INT 0
19455: ST_TO_ADDR
// sSun := false ;
19456: LD_ADDR_EXP 77
19460: PUSH
19461: LD_INT 0
19463: ST_TO_ADDR
// sTiger := false ;
19464: LD_ADDR_EXP 73
19468: PUSH
19469: LD_INT 0
19471: ST_TO_ADDR
// sBomb := false ;
19472: LD_ADDR_EXP 74
19476: PUSH
19477: LD_INT 0
19479: ST_TO_ADDR
// sWound := false ;
19480: LD_ADDR_EXP 82
19484: PUSH
19485: LD_INT 0
19487: ST_TO_ADDR
// sBetray := false ;
19488: LD_ADDR_EXP 86
19492: PUSH
19493: LD_INT 0
19495: ST_TO_ADDR
// sContamin := false ;
19496: LD_ADDR_EXP 87
19500: PUSH
19501: LD_INT 0
19503: ST_TO_ADDR
// sOil := false ;
19504: LD_ADDR_EXP 89
19508: PUSH
19509: LD_INT 0
19511: ST_TO_ADDR
// sStu := false ;
19512: LD_ADDR_EXP 93
19516: PUSH
19517: LD_INT 0
19519: ST_TO_ADDR
// sBazooka := false ;
19520: LD_ADDR_EXP 96
19524: PUSH
19525: LD_INT 0
19527: ST_TO_ADDR
// sMortar := false ;
19528: LD_ADDR_EXP 97
19532: PUSH
19533: LD_INT 0
19535: ST_TO_ADDR
// sRanger := false ;
19536: LD_ADDR_EXP 107
19540: PUSH
19541: LD_INT 0
19543: ST_TO_ADDR
// sComputer := false ;
19544: LD_ADDR_EXP 108
19548: PUSH
19549: LD_INT 0
19551: ST_TO_ADDR
// s30 := false ;
19552: LD_ADDR_EXP 109
19556: PUSH
19557: LD_INT 0
19559: ST_TO_ADDR
// s60 := false ;
19560: LD_ADDR_EXP 110
19564: PUSH
19565: LD_INT 0
19567: ST_TO_ADDR
// end ;
19568: LD_VAR 0 1
19572: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19573: LD_INT 0
19575: PPUSH
19576: PPUSH
19577: PPUSH
19578: PPUSH
19579: PPUSH
19580: PPUSH
19581: PPUSH
// result := [ ] ;
19582: LD_ADDR_VAR 0 2
19586: PUSH
19587: EMPTY
19588: ST_TO_ADDR
// if campaign_id = 1 then
19589: LD_OWVAR 69
19593: PUSH
19594: LD_INT 1
19596: EQUAL
19597: IFFALSE 22763
// begin case mission_number of 1 :
19599: LD_OWVAR 70
19603: PUSH
19604: LD_INT 1
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19688
19612: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 4
19623: PUSH
19624: LD_INT 11
19626: PUSH
19627: LD_INT 12
19629: PUSH
19630: LD_INT 15
19632: PUSH
19633: LD_INT 16
19635: PUSH
19636: LD_INT 22
19638: PUSH
19639: LD_INT 23
19641: PUSH
19642: LD_INT 26
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 101
19658: PUSH
19659: LD_INT 102
19661: PUSH
19662: LD_INT 106
19664: PUSH
19665: LD_INT 116
19667: PUSH
19668: LD_INT 117
19670: PUSH
19671: LD_INT 118
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: ST_TO_ADDR
19686: GO 22761
19688: LD_INT 2
19690: DOUBLE
19691: EQUAL
19692: IFTRUE 19696
19694: GO 19780
19696: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19697: LD_ADDR_VAR 0 2
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: LD_INT 4
19707: PUSH
19708: LD_INT 11
19710: PUSH
19711: LD_INT 12
19713: PUSH
19714: LD_INT 15
19716: PUSH
19717: LD_INT 16
19719: PUSH
19720: LD_INT 22
19722: PUSH
19723: LD_INT 23
19725: PUSH
19726: LD_INT 26
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 101
19742: PUSH
19743: LD_INT 102
19745: PUSH
19746: LD_INT 105
19748: PUSH
19749: LD_INT 106
19751: PUSH
19752: LD_INT 108
19754: PUSH
19755: LD_INT 116
19757: PUSH
19758: LD_INT 117
19760: PUSH
19761: LD_INT 118
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: ST_TO_ADDR
19778: GO 22761
19780: LD_INT 3
19782: DOUBLE
19783: EQUAL
19784: IFTRUE 19788
19786: GO 19876
19788: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19789: LD_ADDR_VAR 0 2
19793: PUSH
19794: LD_INT 2
19796: PUSH
19797: LD_INT 4
19799: PUSH
19800: LD_INT 5
19802: PUSH
19803: LD_INT 11
19805: PUSH
19806: LD_INT 12
19808: PUSH
19809: LD_INT 15
19811: PUSH
19812: LD_INT 16
19814: PUSH
19815: LD_INT 22
19817: PUSH
19818: LD_INT 26
19820: PUSH
19821: LD_INT 36
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 101
19838: PUSH
19839: LD_INT 102
19841: PUSH
19842: LD_INT 105
19844: PUSH
19845: LD_INT 106
19847: PUSH
19848: LD_INT 108
19850: PUSH
19851: LD_INT 116
19853: PUSH
19854: LD_INT 117
19856: PUSH
19857: LD_INT 118
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: ST_TO_ADDR
19874: GO 22761
19876: LD_INT 4
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19980
19884: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19885: LD_ADDR_VAR 0 2
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: LD_INT 4
19895: PUSH
19896: LD_INT 5
19898: PUSH
19899: LD_INT 8
19901: PUSH
19902: LD_INT 11
19904: PUSH
19905: LD_INT 12
19907: PUSH
19908: LD_INT 15
19910: PUSH
19911: LD_INT 16
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_INT 23
19919: PUSH
19920: LD_INT 26
19922: PUSH
19923: LD_INT 36
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 101
19942: PUSH
19943: LD_INT 102
19945: PUSH
19946: LD_INT 105
19948: PUSH
19949: LD_INT 106
19951: PUSH
19952: LD_INT 108
19954: PUSH
19955: LD_INT 116
19957: PUSH
19958: LD_INT 117
19960: PUSH
19961: LD_INT 118
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: ST_TO_ADDR
19978: GO 22761
19980: LD_INT 5
19982: DOUBLE
19983: EQUAL
19984: IFTRUE 19988
19986: GO 20100
19988: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19989: LD_ADDR_VAR 0 2
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: LD_INT 4
19999: PUSH
20000: LD_INT 5
20002: PUSH
20003: LD_INT 6
20005: PUSH
20006: LD_INT 8
20008: PUSH
20009: LD_INT 11
20011: PUSH
20012: LD_INT 12
20014: PUSH
20015: LD_INT 15
20017: PUSH
20018: LD_INT 16
20020: PUSH
20021: LD_INT 22
20023: PUSH
20024: LD_INT 23
20026: PUSH
20027: LD_INT 25
20029: PUSH
20030: LD_INT 26
20032: PUSH
20033: LD_INT 36
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 101
20054: PUSH
20055: LD_INT 102
20057: PUSH
20058: LD_INT 105
20060: PUSH
20061: LD_INT 106
20063: PUSH
20064: LD_INT 108
20066: PUSH
20067: LD_INT 109
20069: PUSH
20070: LD_INT 112
20072: PUSH
20073: LD_INT 116
20075: PUSH
20076: LD_INT 117
20078: PUSH
20079: LD_INT 118
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: ST_TO_ADDR
20098: GO 22761
20100: LD_INT 6
20102: DOUBLE
20103: EQUAL
20104: IFTRUE 20108
20106: GO 20240
20108: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20109: LD_ADDR_VAR 0 2
20113: PUSH
20114: LD_INT 2
20116: PUSH
20117: LD_INT 4
20119: PUSH
20120: LD_INT 5
20122: PUSH
20123: LD_INT 6
20125: PUSH
20126: LD_INT 8
20128: PUSH
20129: LD_INT 11
20131: PUSH
20132: LD_INT 12
20134: PUSH
20135: LD_INT 15
20137: PUSH
20138: LD_INT 16
20140: PUSH
20141: LD_INT 20
20143: PUSH
20144: LD_INT 21
20146: PUSH
20147: LD_INT 22
20149: PUSH
20150: LD_INT 23
20152: PUSH
20153: LD_INT 25
20155: PUSH
20156: LD_INT 26
20158: PUSH
20159: LD_INT 30
20161: PUSH
20162: LD_INT 31
20164: PUSH
20165: LD_INT 32
20167: PUSH
20168: LD_INT 36
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 101
20194: PUSH
20195: LD_INT 102
20197: PUSH
20198: LD_INT 105
20200: PUSH
20201: LD_INT 106
20203: PUSH
20204: LD_INT 108
20206: PUSH
20207: LD_INT 109
20209: PUSH
20210: LD_INT 112
20212: PUSH
20213: LD_INT 116
20215: PUSH
20216: LD_INT 117
20218: PUSH
20219: LD_INT 118
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: ST_TO_ADDR
20238: GO 22761
20240: LD_INT 7
20242: DOUBLE
20243: EQUAL
20244: IFTRUE 20248
20246: GO 20360
20248: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20249: LD_ADDR_VAR 0 2
20253: PUSH
20254: LD_INT 2
20256: PUSH
20257: LD_INT 4
20259: PUSH
20260: LD_INT 5
20262: PUSH
20263: LD_INT 7
20265: PUSH
20266: LD_INT 11
20268: PUSH
20269: LD_INT 12
20271: PUSH
20272: LD_INT 15
20274: PUSH
20275: LD_INT 16
20277: PUSH
20278: LD_INT 20
20280: PUSH
20281: LD_INT 21
20283: PUSH
20284: LD_INT 22
20286: PUSH
20287: LD_INT 23
20289: PUSH
20290: LD_INT 25
20292: PUSH
20293: LD_INT 26
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 101
20314: PUSH
20315: LD_INT 102
20317: PUSH
20318: LD_INT 103
20320: PUSH
20321: LD_INT 105
20323: PUSH
20324: LD_INT 106
20326: PUSH
20327: LD_INT 108
20329: PUSH
20330: LD_INT 112
20332: PUSH
20333: LD_INT 116
20335: PUSH
20336: LD_INT 117
20338: PUSH
20339: LD_INT 118
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: ST_TO_ADDR
20358: GO 22761
20360: LD_INT 8
20362: DOUBLE
20363: EQUAL
20364: IFTRUE 20368
20366: GO 20508
20368: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20369: LD_ADDR_VAR 0 2
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 4
20379: PUSH
20380: LD_INT 5
20382: PUSH
20383: LD_INT 6
20385: PUSH
20386: LD_INT 7
20388: PUSH
20389: LD_INT 8
20391: PUSH
20392: LD_INT 11
20394: PUSH
20395: LD_INT 12
20397: PUSH
20398: LD_INT 15
20400: PUSH
20401: LD_INT 16
20403: PUSH
20404: LD_INT 20
20406: PUSH
20407: LD_INT 21
20409: PUSH
20410: LD_INT 22
20412: PUSH
20413: LD_INT 23
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 26
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 31
20427: PUSH
20428: LD_INT 32
20430: PUSH
20431: LD_INT 36
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 101
20458: PUSH
20459: LD_INT 102
20461: PUSH
20462: LD_INT 103
20464: PUSH
20465: LD_INT 105
20467: PUSH
20468: LD_INT 106
20470: PUSH
20471: LD_INT 108
20473: PUSH
20474: LD_INT 109
20476: PUSH
20477: LD_INT 112
20479: PUSH
20480: LD_INT 116
20482: PUSH
20483: LD_INT 117
20485: PUSH
20486: LD_INT 118
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: ST_TO_ADDR
20506: GO 22761
20508: LD_INT 9
20510: DOUBLE
20511: EQUAL
20512: IFTRUE 20516
20514: GO 20664
20516: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20517: LD_ADDR_VAR 0 2
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: LD_INT 4
20527: PUSH
20528: LD_INT 5
20530: PUSH
20531: LD_INT 6
20533: PUSH
20534: LD_INT 7
20536: PUSH
20537: LD_INT 8
20539: PUSH
20540: LD_INT 11
20542: PUSH
20543: LD_INT 12
20545: PUSH
20546: LD_INT 15
20548: PUSH
20549: LD_INT 16
20551: PUSH
20552: LD_INT 20
20554: PUSH
20555: LD_INT 21
20557: PUSH
20558: LD_INT 22
20560: PUSH
20561: LD_INT 23
20563: PUSH
20564: LD_INT 25
20566: PUSH
20567: LD_INT 26
20569: PUSH
20570: LD_INT 28
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 31
20578: PUSH
20579: LD_INT 32
20581: PUSH
20582: LD_INT 36
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 101
20610: PUSH
20611: LD_INT 102
20613: PUSH
20614: LD_INT 103
20616: PUSH
20617: LD_INT 105
20619: PUSH
20620: LD_INT 106
20622: PUSH
20623: LD_INT 108
20625: PUSH
20626: LD_INT 109
20628: PUSH
20629: LD_INT 112
20631: PUSH
20632: LD_INT 114
20634: PUSH
20635: LD_INT 116
20637: PUSH
20638: LD_INT 117
20640: PUSH
20641: LD_INT 118
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: ST_TO_ADDR
20662: GO 22761
20664: LD_INT 10
20666: DOUBLE
20667: EQUAL
20668: IFTRUE 20672
20670: GO 20868
20672: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20673: LD_ADDR_VAR 0 2
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: LD_INT 4
20683: PUSH
20684: LD_INT 5
20686: PUSH
20687: LD_INT 6
20689: PUSH
20690: LD_INT 7
20692: PUSH
20693: LD_INT 8
20695: PUSH
20696: LD_INT 9
20698: PUSH
20699: LD_INT 10
20701: PUSH
20702: LD_INT 11
20704: PUSH
20705: LD_INT 12
20707: PUSH
20708: LD_INT 13
20710: PUSH
20711: LD_INT 14
20713: PUSH
20714: LD_INT 15
20716: PUSH
20717: LD_INT 16
20719: PUSH
20720: LD_INT 17
20722: PUSH
20723: LD_INT 18
20725: PUSH
20726: LD_INT 19
20728: PUSH
20729: LD_INT 20
20731: PUSH
20732: LD_INT 21
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_INT 23
20740: PUSH
20741: LD_INT 24
20743: PUSH
20744: LD_INT 25
20746: PUSH
20747: LD_INT 26
20749: PUSH
20750: LD_INT 28
20752: PUSH
20753: LD_INT 30
20755: PUSH
20756: LD_INT 31
20758: PUSH
20759: LD_INT 32
20761: PUSH
20762: LD_INT 36
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 101
20798: PUSH
20799: LD_INT 102
20801: PUSH
20802: LD_INT 103
20804: PUSH
20805: LD_INT 104
20807: PUSH
20808: LD_INT 105
20810: PUSH
20811: LD_INT 106
20813: PUSH
20814: LD_INT 107
20816: PUSH
20817: LD_INT 108
20819: PUSH
20820: LD_INT 109
20822: PUSH
20823: LD_INT 110
20825: PUSH
20826: LD_INT 111
20828: PUSH
20829: LD_INT 112
20831: PUSH
20832: LD_INT 114
20834: PUSH
20835: LD_INT 116
20837: PUSH
20838: LD_INT 117
20840: PUSH
20841: LD_INT 118
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: ST_TO_ADDR
20866: GO 22761
20868: LD_INT 11
20870: DOUBLE
20871: EQUAL
20872: IFTRUE 20876
20874: GO 21080
20876: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20877: LD_ADDR_VAR 0 2
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: LD_INT 3
20887: PUSH
20888: LD_INT 4
20890: PUSH
20891: LD_INT 5
20893: PUSH
20894: LD_INT 6
20896: PUSH
20897: LD_INT 7
20899: PUSH
20900: LD_INT 8
20902: PUSH
20903: LD_INT 9
20905: PUSH
20906: LD_INT 10
20908: PUSH
20909: LD_INT 11
20911: PUSH
20912: LD_INT 12
20914: PUSH
20915: LD_INT 13
20917: PUSH
20918: LD_INT 14
20920: PUSH
20921: LD_INT 15
20923: PUSH
20924: LD_INT 16
20926: PUSH
20927: LD_INT 17
20929: PUSH
20930: LD_INT 18
20932: PUSH
20933: LD_INT 19
20935: PUSH
20936: LD_INT 20
20938: PUSH
20939: LD_INT 21
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_INT 23
20947: PUSH
20948: LD_INT 24
20950: PUSH
20951: LD_INT 25
20953: PUSH
20954: LD_INT 26
20956: PUSH
20957: LD_INT 28
20959: PUSH
20960: LD_INT 30
20962: PUSH
20963: LD_INT 31
20965: PUSH
20966: LD_INT 32
20968: PUSH
20969: LD_INT 34
20971: PUSH
20972: LD_INT 36
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 101
21010: PUSH
21011: LD_INT 102
21013: PUSH
21014: LD_INT 103
21016: PUSH
21017: LD_INT 104
21019: PUSH
21020: LD_INT 105
21022: PUSH
21023: LD_INT 106
21025: PUSH
21026: LD_INT 107
21028: PUSH
21029: LD_INT 108
21031: PUSH
21032: LD_INT 109
21034: PUSH
21035: LD_INT 110
21037: PUSH
21038: LD_INT 111
21040: PUSH
21041: LD_INT 112
21043: PUSH
21044: LD_INT 114
21046: PUSH
21047: LD_INT 116
21049: PUSH
21050: LD_INT 117
21052: PUSH
21053: LD_INT 118
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: ST_TO_ADDR
21078: GO 22761
21080: LD_INT 12
21082: DOUBLE
21083: EQUAL
21084: IFTRUE 21088
21086: GO 21308
21088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21089: LD_ADDR_VAR 0 2
21093: PUSH
21094: LD_INT 1
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: LD_INT 5
21108: PUSH
21109: LD_INT 6
21111: PUSH
21112: LD_INT 7
21114: PUSH
21115: LD_INT 8
21117: PUSH
21118: LD_INT 9
21120: PUSH
21121: LD_INT 10
21123: PUSH
21124: LD_INT 11
21126: PUSH
21127: LD_INT 12
21129: PUSH
21130: LD_INT 13
21132: PUSH
21133: LD_INT 14
21135: PUSH
21136: LD_INT 15
21138: PUSH
21139: LD_INT 16
21141: PUSH
21142: LD_INT 17
21144: PUSH
21145: LD_INT 18
21147: PUSH
21148: LD_INT 19
21150: PUSH
21151: LD_INT 20
21153: PUSH
21154: LD_INT 21
21156: PUSH
21157: LD_INT 22
21159: PUSH
21160: LD_INT 23
21162: PUSH
21163: LD_INT 24
21165: PUSH
21166: LD_INT 25
21168: PUSH
21169: LD_INT 26
21171: PUSH
21172: LD_INT 27
21174: PUSH
21175: LD_INT 28
21177: PUSH
21178: LD_INT 30
21180: PUSH
21181: LD_INT 31
21183: PUSH
21184: LD_INT 32
21186: PUSH
21187: LD_INT 33
21189: PUSH
21190: LD_INT 34
21192: PUSH
21193: LD_INT 36
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 101
21234: PUSH
21235: LD_INT 102
21237: PUSH
21238: LD_INT 103
21240: PUSH
21241: LD_INT 104
21243: PUSH
21244: LD_INT 105
21246: PUSH
21247: LD_INT 106
21249: PUSH
21250: LD_INT 107
21252: PUSH
21253: LD_INT 108
21255: PUSH
21256: LD_INT 109
21258: PUSH
21259: LD_INT 110
21261: PUSH
21262: LD_INT 111
21264: PUSH
21265: LD_INT 112
21267: PUSH
21268: LD_INT 113
21270: PUSH
21271: LD_INT 114
21273: PUSH
21274: LD_INT 116
21276: PUSH
21277: LD_INT 117
21279: PUSH
21280: LD_INT 118
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: ST_TO_ADDR
21306: GO 22761
21308: LD_INT 13
21310: DOUBLE
21311: EQUAL
21312: IFTRUE 21316
21314: GO 21524
21316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21317: LD_ADDR_VAR 0 2
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 3
21330: PUSH
21331: LD_INT 4
21333: PUSH
21334: LD_INT 5
21336: PUSH
21337: LD_INT 8
21339: PUSH
21340: LD_INT 9
21342: PUSH
21343: LD_INT 10
21345: PUSH
21346: LD_INT 11
21348: PUSH
21349: LD_INT 12
21351: PUSH
21352: LD_INT 14
21354: PUSH
21355: LD_INT 15
21357: PUSH
21358: LD_INT 16
21360: PUSH
21361: LD_INT 17
21363: PUSH
21364: LD_INT 18
21366: PUSH
21367: LD_INT 19
21369: PUSH
21370: LD_INT 20
21372: PUSH
21373: LD_INT 21
21375: PUSH
21376: LD_INT 22
21378: PUSH
21379: LD_INT 23
21381: PUSH
21382: LD_INT 24
21384: PUSH
21385: LD_INT 25
21387: PUSH
21388: LD_INT 26
21390: PUSH
21391: LD_INT 27
21393: PUSH
21394: LD_INT 28
21396: PUSH
21397: LD_INT 30
21399: PUSH
21400: LD_INT 31
21402: PUSH
21403: LD_INT 32
21405: PUSH
21406: LD_INT 33
21408: PUSH
21409: LD_INT 34
21411: PUSH
21412: LD_INT 36
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 101
21450: PUSH
21451: LD_INT 102
21453: PUSH
21454: LD_INT 103
21456: PUSH
21457: LD_INT 104
21459: PUSH
21460: LD_INT 105
21462: PUSH
21463: LD_INT 106
21465: PUSH
21466: LD_INT 107
21468: PUSH
21469: LD_INT 108
21471: PUSH
21472: LD_INT 109
21474: PUSH
21475: LD_INT 110
21477: PUSH
21478: LD_INT 111
21480: PUSH
21481: LD_INT 112
21483: PUSH
21484: LD_INT 113
21486: PUSH
21487: LD_INT 114
21489: PUSH
21490: LD_INT 116
21492: PUSH
21493: LD_INT 117
21495: PUSH
21496: LD_INT 118
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: ST_TO_ADDR
21522: GO 22761
21524: LD_INT 14
21526: DOUBLE
21527: EQUAL
21528: IFTRUE 21532
21530: GO 21756
21532: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21533: LD_ADDR_VAR 0 2
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 2
21543: PUSH
21544: LD_INT 3
21546: PUSH
21547: LD_INT 4
21549: PUSH
21550: LD_INT 5
21552: PUSH
21553: LD_INT 6
21555: PUSH
21556: LD_INT 7
21558: PUSH
21559: LD_INT 8
21561: PUSH
21562: LD_INT 9
21564: PUSH
21565: LD_INT 10
21567: PUSH
21568: LD_INT 11
21570: PUSH
21571: LD_INT 12
21573: PUSH
21574: LD_INT 13
21576: PUSH
21577: LD_INT 14
21579: PUSH
21580: LD_INT 15
21582: PUSH
21583: LD_INT 16
21585: PUSH
21586: LD_INT 17
21588: PUSH
21589: LD_INT 18
21591: PUSH
21592: LD_INT 19
21594: PUSH
21595: LD_INT 20
21597: PUSH
21598: LD_INT 21
21600: PUSH
21601: LD_INT 22
21603: PUSH
21604: LD_INT 23
21606: PUSH
21607: LD_INT 24
21609: PUSH
21610: LD_INT 25
21612: PUSH
21613: LD_INT 26
21615: PUSH
21616: LD_INT 27
21618: PUSH
21619: LD_INT 28
21621: PUSH
21622: LD_INT 29
21624: PUSH
21625: LD_INT 30
21627: PUSH
21628: LD_INT 31
21630: PUSH
21631: LD_INT 32
21633: PUSH
21634: LD_INT 33
21636: PUSH
21637: LD_INT 34
21639: PUSH
21640: LD_INT 36
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 101
21682: PUSH
21683: LD_INT 102
21685: PUSH
21686: LD_INT 103
21688: PUSH
21689: LD_INT 104
21691: PUSH
21692: LD_INT 105
21694: PUSH
21695: LD_INT 106
21697: PUSH
21698: LD_INT 107
21700: PUSH
21701: LD_INT 108
21703: PUSH
21704: LD_INT 109
21706: PUSH
21707: LD_INT 110
21709: PUSH
21710: LD_INT 111
21712: PUSH
21713: LD_INT 112
21715: PUSH
21716: LD_INT 113
21718: PUSH
21719: LD_INT 114
21721: PUSH
21722: LD_INT 116
21724: PUSH
21725: LD_INT 117
21727: PUSH
21728: LD_INT 118
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: ST_TO_ADDR
21754: GO 22761
21756: LD_INT 15
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 21988
21764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21765: LD_ADDR_VAR 0 2
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: LD_INT 3
21778: PUSH
21779: LD_INT 4
21781: PUSH
21782: LD_INT 5
21784: PUSH
21785: LD_INT 6
21787: PUSH
21788: LD_INT 7
21790: PUSH
21791: LD_INT 8
21793: PUSH
21794: LD_INT 9
21796: PUSH
21797: LD_INT 10
21799: PUSH
21800: LD_INT 11
21802: PUSH
21803: LD_INT 12
21805: PUSH
21806: LD_INT 13
21808: PUSH
21809: LD_INT 14
21811: PUSH
21812: LD_INT 15
21814: PUSH
21815: LD_INT 16
21817: PUSH
21818: LD_INT 17
21820: PUSH
21821: LD_INT 18
21823: PUSH
21824: LD_INT 19
21826: PUSH
21827: LD_INT 20
21829: PUSH
21830: LD_INT 21
21832: PUSH
21833: LD_INT 22
21835: PUSH
21836: LD_INT 23
21838: PUSH
21839: LD_INT 24
21841: PUSH
21842: LD_INT 25
21844: PUSH
21845: LD_INT 26
21847: PUSH
21848: LD_INT 27
21850: PUSH
21851: LD_INT 28
21853: PUSH
21854: LD_INT 29
21856: PUSH
21857: LD_INT 30
21859: PUSH
21860: LD_INT 31
21862: PUSH
21863: LD_INT 32
21865: PUSH
21866: LD_INT 33
21868: PUSH
21869: LD_INT 34
21871: PUSH
21872: LD_INT 36
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 101
21914: PUSH
21915: LD_INT 102
21917: PUSH
21918: LD_INT 103
21920: PUSH
21921: LD_INT 104
21923: PUSH
21924: LD_INT 105
21926: PUSH
21927: LD_INT 106
21929: PUSH
21930: LD_INT 107
21932: PUSH
21933: LD_INT 108
21935: PUSH
21936: LD_INT 109
21938: PUSH
21939: LD_INT 110
21941: PUSH
21942: LD_INT 111
21944: PUSH
21945: LD_INT 112
21947: PUSH
21948: LD_INT 113
21950: PUSH
21951: LD_INT 114
21953: PUSH
21954: LD_INT 116
21956: PUSH
21957: LD_INT 117
21959: PUSH
21960: LD_INT 118
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: ST_TO_ADDR
21986: GO 22761
21988: LD_INT 16
21990: DOUBLE
21991: EQUAL
21992: IFTRUE 21996
21994: GO 22132
21996: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21997: LD_ADDR_VAR 0 2
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: LD_INT 4
22007: PUSH
22008: LD_INT 5
22010: PUSH
22011: LD_INT 7
22013: PUSH
22014: LD_INT 11
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: LD_INT 15
22022: PUSH
22023: LD_INT 16
22025: PUSH
22026: LD_INT 20
22028: PUSH
22029: LD_INT 21
22031: PUSH
22032: LD_INT 22
22034: PUSH
22035: LD_INT 23
22037: PUSH
22038: LD_INT 25
22040: PUSH
22041: LD_INT 26
22043: PUSH
22044: LD_INT 30
22046: PUSH
22047: LD_INT 31
22049: PUSH
22050: LD_INT 32
22052: PUSH
22053: LD_INT 33
22055: PUSH
22056: LD_INT 34
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 101
22082: PUSH
22083: LD_INT 102
22085: PUSH
22086: LD_INT 103
22088: PUSH
22089: LD_INT 106
22091: PUSH
22092: LD_INT 108
22094: PUSH
22095: LD_INT 112
22097: PUSH
22098: LD_INT 113
22100: PUSH
22101: LD_INT 114
22103: PUSH
22104: LD_INT 116
22106: PUSH
22107: LD_INT 117
22109: PUSH
22110: LD_INT 118
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: ST_TO_ADDR
22130: GO 22761
22132: LD_INT 17
22134: DOUBLE
22135: EQUAL
22136: IFTRUE 22140
22138: GO 22364
22140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22141: LD_ADDR_VAR 0 2
22145: PUSH
22146: LD_INT 1
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: LD_INT 4
22157: PUSH
22158: LD_INT 5
22160: PUSH
22161: LD_INT 6
22163: PUSH
22164: LD_INT 7
22166: PUSH
22167: LD_INT 8
22169: PUSH
22170: LD_INT 9
22172: PUSH
22173: LD_INT 10
22175: PUSH
22176: LD_INT 11
22178: PUSH
22179: LD_INT 12
22181: PUSH
22182: LD_INT 13
22184: PUSH
22185: LD_INT 14
22187: PUSH
22188: LD_INT 15
22190: PUSH
22191: LD_INT 16
22193: PUSH
22194: LD_INT 17
22196: PUSH
22197: LD_INT 18
22199: PUSH
22200: LD_INT 19
22202: PUSH
22203: LD_INT 20
22205: PUSH
22206: LD_INT 21
22208: PUSH
22209: LD_INT 22
22211: PUSH
22212: LD_INT 23
22214: PUSH
22215: LD_INT 24
22217: PUSH
22218: LD_INT 25
22220: PUSH
22221: LD_INT 26
22223: PUSH
22224: LD_INT 27
22226: PUSH
22227: LD_INT 28
22229: PUSH
22230: LD_INT 29
22232: PUSH
22233: LD_INT 30
22235: PUSH
22236: LD_INT 31
22238: PUSH
22239: LD_INT 32
22241: PUSH
22242: LD_INT 33
22244: PUSH
22245: LD_INT 34
22247: PUSH
22248: LD_INT 36
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 101
22290: PUSH
22291: LD_INT 102
22293: PUSH
22294: LD_INT 103
22296: PUSH
22297: LD_INT 104
22299: PUSH
22300: LD_INT 105
22302: PUSH
22303: LD_INT 106
22305: PUSH
22306: LD_INT 107
22308: PUSH
22309: LD_INT 108
22311: PUSH
22312: LD_INT 109
22314: PUSH
22315: LD_INT 110
22317: PUSH
22318: LD_INT 111
22320: PUSH
22321: LD_INT 112
22323: PUSH
22324: LD_INT 113
22326: PUSH
22327: LD_INT 114
22329: PUSH
22330: LD_INT 116
22332: PUSH
22333: LD_INT 117
22335: PUSH
22336: LD_INT 118
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: ST_TO_ADDR
22362: GO 22761
22364: LD_INT 18
22366: DOUBLE
22367: EQUAL
22368: IFTRUE 22372
22370: GO 22520
22372: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22373: LD_ADDR_VAR 0 2
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 4
22383: PUSH
22384: LD_INT 5
22386: PUSH
22387: LD_INT 7
22389: PUSH
22390: LD_INT 11
22392: PUSH
22393: LD_INT 12
22395: PUSH
22396: LD_INT 15
22398: PUSH
22399: LD_INT 16
22401: PUSH
22402: LD_INT 20
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 22
22410: PUSH
22411: LD_INT 23
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 26
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: LD_INT 31
22425: PUSH
22426: LD_INT 32
22428: PUSH
22429: LD_INT 33
22431: PUSH
22432: LD_INT 34
22434: PUSH
22435: LD_INT 35
22437: PUSH
22438: LD_INT 36
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 101
22466: PUSH
22467: LD_INT 102
22469: PUSH
22470: LD_INT 103
22472: PUSH
22473: LD_INT 106
22475: PUSH
22476: LD_INT 108
22478: PUSH
22479: LD_INT 112
22481: PUSH
22482: LD_INT 113
22484: PUSH
22485: LD_INT 114
22487: PUSH
22488: LD_INT 115
22490: PUSH
22491: LD_INT 116
22493: PUSH
22494: LD_INT 117
22496: PUSH
22497: LD_INT 118
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: ST_TO_ADDR
22518: GO 22761
22520: LD_INT 19
22522: DOUBLE
22523: EQUAL
22524: IFTRUE 22528
22526: GO 22760
22528: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22529: LD_ADDR_VAR 0 2
22533: PUSH
22534: LD_INT 1
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: LD_INT 3
22542: PUSH
22543: LD_INT 4
22545: PUSH
22546: LD_INT 5
22548: PUSH
22549: LD_INT 6
22551: PUSH
22552: LD_INT 7
22554: PUSH
22555: LD_INT 8
22557: PUSH
22558: LD_INT 9
22560: PUSH
22561: LD_INT 10
22563: PUSH
22564: LD_INT 11
22566: PUSH
22567: LD_INT 12
22569: PUSH
22570: LD_INT 13
22572: PUSH
22573: LD_INT 14
22575: PUSH
22576: LD_INT 15
22578: PUSH
22579: LD_INT 16
22581: PUSH
22582: LD_INT 17
22584: PUSH
22585: LD_INT 18
22587: PUSH
22588: LD_INT 19
22590: PUSH
22591: LD_INT 20
22593: PUSH
22594: LD_INT 21
22596: PUSH
22597: LD_INT 22
22599: PUSH
22600: LD_INT 23
22602: PUSH
22603: LD_INT 24
22605: PUSH
22606: LD_INT 25
22608: PUSH
22609: LD_INT 26
22611: PUSH
22612: LD_INT 27
22614: PUSH
22615: LD_INT 28
22617: PUSH
22618: LD_INT 29
22620: PUSH
22621: LD_INT 30
22623: PUSH
22624: LD_INT 31
22626: PUSH
22627: LD_INT 32
22629: PUSH
22630: LD_INT 33
22632: PUSH
22633: LD_INT 34
22635: PUSH
22636: LD_INT 35
22638: PUSH
22639: LD_INT 36
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 101
22682: PUSH
22683: LD_INT 102
22685: PUSH
22686: LD_INT 103
22688: PUSH
22689: LD_INT 104
22691: PUSH
22692: LD_INT 105
22694: PUSH
22695: LD_INT 106
22697: PUSH
22698: LD_INT 107
22700: PUSH
22701: LD_INT 108
22703: PUSH
22704: LD_INT 109
22706: PUSH
22707: LD_INT 110
22709: PUSH
22710: LD_INT 111
22712: PUSH
22713: LD_INT 112
22715: PUSH
22716: LD_INT 113
22718: PUSH
22719: LD_INT 114
22721: PUSH
22722: LD_INT 115
22724: PUSH
22725: LD_INT 116
22727: PUSH
22728: LD_INT 117
22730: PUSH
22731: LD_INT 118
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: ST_TO_ADDR
22758: GO 22761
22760: POP
// end else
22761: GO 22992
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22763: LD_ADDR_VAR 0 2
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: LD_INT 3
22776: PUSH
22777: LD_INT 4
22779: PUSH
22780: LD_INT 5
22782: PUSH
22783: LD_INT 6
22785: PUSH
22786: LD_INT 7
22788: PUSH
22789: LD_INT 8
22791: PUSH
22792: LD_INT 9
22794: PUSH
22795: LD_INT 10
22797: PUSH
22798: LD_INT 11
22800: PUSH
22801: LD_INT 12
22803: PUSH
22804: LD_INT 13
22806: PUSH
22807: LD_INT 14
22809: PUSH
22810: LD_INT 15
22812: PUSH
22813: LD_INT 16
22815: PUSH
22816: LD_INT 17
22818: PUSH
22819: LD_INT 18
22821: PUSH
22822: LD_INT 19
22824: PUSH
22825: LD_INT 20
22827: PUSH
22828: LD_INT 21
22830: PUSH
22831: LD_INT 22
22833: PUSH
22834: LD_INT 23
22836: PUSH
22837: LD_INT 24
22839: PUSH
22840: LD_INT 25
22842: PUSH
22843: LD_INT 26
22845: PUSH
22846: LD_INT 27
22848: PUSH
22849: LD_INT 28
22851: PUSH
22852: LD_INT 29
22854: PUSH
22855: LD_INT 30
22857: PUSH
22858: LD_INT 31
22860: PUSH
22861: LD_INT 32
22863: PUSH
22864: LD_INT 33
22866: PUSH
22867: LD_INT 34
22869: PUSH
22870: LD_INT 35
22872: PUSH
22873: LD_INT 36
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 101
22916: PUSH
22917: LD_INT 102
22919: PUSH
22920: LD_INT 103
22922: PUSH
22923: LD_INT 104
22925: PUSH
22926: LD_INT 105
22928: PUSH
22929: LD_INT 106
22931: PUSH
22932: LD_INT 107
22934: PUSH
22935: LD_INT 108
22937: PUSH
22938: LD_INT 109
22940: PUSH
22941: LD_INT 110
22943: PUSH
22944: LD_INT 111
22946: PUSH
22947: LD_INT 112
22949: PUSH
22950: LD_INT 113
22952: PUSH
22953: LD_INT 114
22955: PUSH
22956: LD_INT 115
22958: PUSH
22959: LD_INT 116
22961: PUSH
22962: LD_INT 117
22964: PUSH
22965: LD_INT 118
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: ST_TO_ADDR
// if result then
22992: LD_VAR 0 2
22996: IFFALSE 23782
// begin normal :=  ;
22998: LD_ADDR_VAR 0 5
23002: PUSH
23003: LD_STRING 
23005: ST_TO_ADDR
// hardcore :=  ;
23006: LD_ADDR_VAR 0 6
23010: PUSH
23011: LD_STRING 
23013: ST_TO_ADDR
// active :=  ;
23014: LD_ADDR_VAR 0 7
23018: PUSH
23019: LD_STRING 
23021: ST_TO_ADDR
// for i = 1 to normalCounter do
23022: LD_ADDR_VAR 0 8
23026: PUSH
23027: DOUBLE
23028: LD_INT 1
23030: DEC
23031: ST_TO_ADDR
23032: LD_EXP 55
23036: PUSH
23037: FOR_TO
23038: IFFALSE 23139
// begin tmp := 0 ;
23040: LD_ADDR_VAR 0 3
23044: PUSH
23045: LD_STRING 0
23047: ST_TO_ADDR
// if result [ 1 ] then
23048: LD_VAR 0 2
23052: PUSH
23053: LD_INT 1
23055: ARRAY
23056: IFFALSE 23121
// if result [ 1 ] [ 1 ] = i then
23058: LD_VAR 0 2
23062: PUSH
23063: LD_INT 1
23065: ARRAY
23066: PUSH
23067: LD_INT 1
23069: ARRAY
23070: PUSH
23071: LD_VAR 0 8
23075: EQUAL
23076: IFFALSE 23121
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23078: LD_ADDR_VAR 0 2
23082: PUSH
23083: LD_VAR 0 2
23087: PPUSH
23088: LD_INT 1
23090: PPUSH
23091: LD_VAR 0 2
23095: PUSH
23096: LD_INT 1
23098: ARRAY
23099: PPUSH
23100: LD_INT 1
23102: PPUSH
23103: CALL_OW 3
23107: PPUSH
23108: CALL_OW 1
23112: ST_TO_ADDR
// tmp := 1 ;
23113: LD_ADDR_VAR 0 3
23117: PUSH
23118: LD_STRING 1
23120: ST_TO_ADDR
// end ; normal := normal & tmp ;
23121: LD_ADDR_VAR 0 5
23125: PUSH
23126: LD_VAR 0 5
23130: PUSH
23131: LD_VAR 0 3
23135: STR
23136: ST_TO_ADDR
// end ;
23137: GO 23037
23139: POP
23140: POP
// for i = 1 to hardcoreCounter do
23141: LD_ADDR_VAR 0 8
23145: PUSH
23146: DOUBLE
23147: LD_INT 1
23149: DEC
23150: ST_TO_ADDR
23151: LD_EXP 56
23155: PUSH
23156: FOR_TO
23157: IFFALSE 23262
// begin tmp := 0 ;
23159: LD_ADDR_VAR 0 3
23163: PUSH
23164: LD_STRING 0
23166: ST_TO_ADDR
// if result [ 2 ] then
23167: LD_VAR 0 2
23171: PUSH
23172: LD_INT 2
23174: ARRAY
23175: IFFALSE 23244
// if result [ 2 ] [ 1 ] = 100 + i then
23177: LD_VAR 0 2
23181: PUSH
23182: LD_INT 2
23184: ARRAY
23185: PUSH
23186: LD_INT 1
23188: ARRAY
23189: PUSH
23190: LD_INT 100
23192: PUSH
23193: LD_VAR 0 8
23197: PLUS
23198: EQUAL
23199: IFFALSE 23244
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23201: LD_ADDR_VAR 0 2
23205: PUSH
23206: LD_VAR 0 2
23210: PPUSH
23211: LD_INT 2
23213: PPUSH
23214: LD_VAR 0 2
23218: PUSH
23219: LD_INT 2
23221: ARRAY
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: CALL_OW 3
23230: PPUSH
23231: CALL_OW 1
23235: ST_TO_ADDR
// tmp := 1 ;
23236: LD_ADDR_VAR 0 3
23240: PUSH
23241: LD_STRING 1
23243: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23244: LD_ADDR_VAR 0 6
23248: PUSH
23249: LD_VAR 0 6
23253: PUSH
23254: LD_VAR 0 3
23258: STR
23259: ST_TO_ADDR
// end ;
23260: GO 23156
23262: POP
23263: POP
// if isGameLoad then
23264: LD_VAR 0 1
23268: IFFALSE 23743
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23270: LD_ADDR_VAR 0 4
23274: PUSH
23275: LD_EXP 59
23279: PUSH
23280: LD_EXP 58
23284: PUSH
23285: LD_EXP 60
23289: PUSH
23290: LD_EXP 57
23294: PUSH
23295: LD_EXP 61
23299: PUSH
23300: LD_EXP 62
23304: PUSH
23305: LD_EXP 63
23309: PUSH
23310: LD_EXP 64
23314: PUSH
23315: LD_EXP 65
23319: PUSH
23320: LD_EXP 66
23324: PUSH
23325: LD_EXP 67
23329: PUSH
23330: LD_EXP 68
23334: PUSH
23335: LD_EXP 69
23339: PUSH
23340: LD_EXP 70
23344: PUSH
23345: LD_EXP 78
23349: PUSH
23350: LD_EXP 79
23354: PUSH
23355: LD_EXP 80
23359: PUSH
23360: LD_EXP 81
23364: PUSH
23365: LD_EXP 83
23369: PUSH
23370: LD_EXP 84
23374: PUSH
23375: LD_EXP 85
23379: PUSH
23380: LD_EXP 88
23384: PUSH
23385: LD_EXP 90
23389: PUSH
23390: LD_EXP 91
23394: PUSH
23395: LD_EXP 92
23399: PUSH
23400: LD_EXP 94
23404: PUSH
23405: LD_EXP 95
23409: PUSH
23410: LD_EXP 98
23414: PUSH
23415: LD_EXP 99
23419: PUSH
23420: LD_EXP 100
23424: PUSH
23425: LD_EXP 101
23429: PUSH
23430: LD_EXP 102
23434: PUSH
23435: LD_EXP 103
23439: PUSH
23440: LD_EXP 104
23444: PUSH
23445: LD_EXP 105
23449: PUSH
23450: LD_EXP 106
23454: PUSH
23455: LD_EXP 71
23459: PUSH
23460: LD_EXP 72
23464: PUSH
23465: LD_EXP 75
23469: PUSH
23470: LD_EXP 76
23474: PUSH
23475: LD_EXP 77
23479: PUSH
23480: LD_EXP 73
23484: PUSH
23485: LD_EXP 74
23489: PUSH
23490: LD_EXP 82
23494: PUSH
23495: LD_EXP 86
23499: PUSH
23500: LD_EXP 87
23504: PUSH
23505: LD_EXP 89
23509: PUSH
23510: LD_EXP 93
23514: PUSH
23515: LD_EXP 96
23519: PUSH
23520: LD_EXP 97
23524: PUSH
23525: LD_EXP 107
23529: PUSH
23530: LD_EXP 108
23534: PUSH
23535: LD_EXP 109
23539: PUSH
23540: LD_EXP 110
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: ST_TO_ADDR
// tmp :=  ;
23601: LD_ADDR_VAR 0 3
23605: PUSH
23606: LD_STRING 
23608: ST_TO_ADDR
// for i = 1 to normalCounter do
23609: LD_ADDR_VAR 0 8
23613: PUSH
23614: DOUBLE
23615: LD_INT 1
23617: DEC
23618: ST_TO_ADDR
23619: LD_EXP 55
23623: PUSH
23624: FOR_TO
23625: IFFALSE 23661
// begin if flags [ i ] then
23627: LD_VAR 0 4
23631: PUSH
23632: LD_VAR 0 8
23636: ARRAY
23637: IFFALSE 23659
// tmp := tmp & i & ; ;
23639: LD_ADDR_VAR 0 3
23643: PUSH
23644: LD_VAR 0 3
23648: PUSH
23649: LD_VAR 0 8
23653: STR
23654: PUSH
23655: LD_STRING ;
23657: STR
23658: ST_TO_ADDR
// end ;
23659: GO 23624
23661: POP
23662: POP
// for i = 1 to hardcoreCounter do
23663: LD_ADDR_VAR 0 8
23667: PUSH
23668: DOUBLE
23669: LD_INT 1
23671: DEC
23672: ST_TO_ADDR
23673: LD_EXP 56
23677: PUSH
23678: FOR_TO
23679: IFFALSE 23725
// begin if flags [ normalCounter + i ] then
23681: LD_VAR 0 4
23685: PUSH
23686: LD_EXP 55
23690: PUSH
23691: LD_VAR 0 8
23695: PLUS
23696: ARRAY
23697: IFFALSE 23723
// tmp := tmp & ( 100 + i ) & ; ;
23699: LD_ADDR_VAR 0 3
23703: PUSH
23704: LD_VAR 0 3
23708: PUSH
23709: LD_INT 100
23711: PUSH
23712: LD_VAR 0 8
23716: PLUS
23717: STR
23718: PUSH
23719: LD_STRING ;
23721: STR
23722: ST_TO_ADDR
// end ;
23723: GO 23678
23725: POP
23726: POP
// if tmp then
23727: LD_VAR 0 3
23731: IFFALSE 23743
// active := tmp ;
23733: LD_ADDR_VAR 0 7
23737: PUSH
23738: LD_VAR 0 3
23742: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23743: LD_STRING getStreamItemsFromMission("
23745: PUSH
23746: LD_VAR 0 5
23750: STR
23751: PUSH
23752: LD_STRING ","
23754: STR
23755: PUSH
23756: LD_VAR 0 6
23760: STR
23761: PUSH
23762: LD_STRING ","
23764: STR
23765: PUSH
23766: LD_VAR 0 7
23770: STR
23771: PUSH
23772: LD_STRING ")
23774: STR
23775: PPUSH
23776: CALL_OW 559
// end else
23780: GO 23789
// ToLua ( getStreamItemsFromMission("","","") ) ;
23782: LD_STRING getStreamItemsFromMission("","","")
23784: PPUSH
23785: CALL_OW 559
// end ;
23789: LD_VAR 0 2
23793: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23794: LD_EXP 54
23798: PUSH
23799: LD_EXP 59
23803: AND
23804: IFFALSE 23928
23806: GO 23808
23808: DISABLE
23809: LD_INT 0
23811: PPUSH
23812: PPUSH
// begin enable ;
23813: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23814: LD_ADDR_VAR 0 2
23818: PUSH
23819: LD_INT 22
23821: PUSH
23822: LD_OWVAR 2
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 2
23833: PUSH
23834: LD_INT 34
23836: PUSH
23837: LD_INT 7
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 34
23846: PUSH
23847: LD_INT 45
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 34
23856: PUSH
23857: LD_INT 28
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 34
23866: PUSH
23867: LD_INT 47
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PPUSH
23885: CALL_OW 69
23889: ST_TO_ADDR
// if not tmp then
23890: LD_VAR 0 2
23894: NOT
23895: IFFALSE 23899
// exit ;
23897: GO 23928
// for i in tmp do
23899: LD_ADDR_VAR 0 1
23903: PUSH
23904: LD_VAR 0 2
23908: PUSH
23909: FOR_IN
23910: IFFALSE 23926
// begin SetLives ( i , 0 ) ;
23912: LD_VAR 0 1
23916: PPUSH
23917: LD_INT 0
23919: PPUSH
23920: CALL_OW 234
// end ;
23924: GO 23909
23926: POP
23927: POP
// end ;
23928: PPOPN 2
23930: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23931: LD_EXP 54
23935: PUSH
23936: LD_EXP 60
23940: AND
23941: IFFALSE 24025
23943: GO 23945
23945: DISABLE
23946: LD_INT 0
23948: PPUSH
23949: PPUSH
// begin enable ;
23950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23951: LD_ADDR_VAR 0 2
23955: PUSH
23956: LD_INT 22
23958: PUSH
23959: LD_OWVAR 2
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 32
23970: PUSH
23971: LD_INT 3
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PPUSH
23982: CALL_OW 69
23986: ST_TO_ADDR
// if not tmp then
23987: LD_VAR 0 2
23991: NOT
23992: IFFALSE 23996
// exit ;
23994: GO 24025
// for i in tmp do
23996: LD_ADDR_VAR 0 1
24000: PUSH
24001: LD_VAR 0 2
24005: PUSH
24006: FOR_IN
24007: IFFALSE 24023
// begin SetLives ( i , 0 ) ;
24009: LD_VAR 0 1
24013: PPUSH
24014: LD_INT 0
24016: PPUSH
24017: CALL_OW 234
// end ;
24021: GO 24006
24023: POP
24024: POP
// end ;
24025: PPOPN 2
24027: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24028: LD_EXP 54
24032: PUSH
24033: LD_EXP 57
24037: AND
24038: IFFALSE 24131
24040: GO 24042
24042: DISABLE
24043: LD_INT 0
24045: PPUSH
// begin enable ;
24046: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24047: LD_ADDR_VAR 0 1
24051: PUSH
24052: LD_INT 22
24054: PUSH
24055: LD_OWVAR 2
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 2
24066: PUSH
24067: LD_INT 25
24069: PUSH
24070: LD_INT 5
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 25
24079: PUSH
24080: LD_INT 9
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 25
24089: PUSH
24090: LD_INT 8
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PPUSH
24107: CALL_OW 69
24111: PUSH
24112: FOR_IN
24113: IFFALSE 24129
// begin SetClass ( i , 1 ) ;
24115: LD_VAR 0 1
24119: PPUSH
24120: LD_INT 1
24122: PPUSH
24123: CALL_OW 336
// end ;
24127: GO 24112
24129: POP
24130: POP
// end ;
24131: PPOPN 1
24133: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24134: LD_EXP 54
24138: PUSH
24139: LD_EXP 58
24143: AND
24144: PUSH
24145: LD_OWVAR 65
24149: PUSH
24150: LD_INT 7
24152: LESS
24153: AND
24154: IFFALSE 24168
24156: GO 24158
24158: DISABLE
// begin enable ;
24159: ENABLE
// game_speed := 7 ;
24160: LD_ADDR_OWVAR 65
24164: PUSH
24165: LD_INT 7
24167: ST_TO_ADDR
// end ;
24168: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24169: LD_EXP 54
24173: PUSH
24174: LD_EXP 61
24178: AND
24179: IFFALSE 24381
24181: GO 24183
24183: DISABLE
24184: LD_INT 0
24186: PPUSH
24187: PPUSH
24188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24189: LD_ADDR_VAR 0 3
24193: PUSH
24194: LD_INT 81
24196: PUSH
24197: LD_OWVAR 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 21
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 69
24224: ST_TO_ADDR
// if not tmp then
24225: LD_VAR 0 3
24229: NOT
24230: IFFALSE 24234
// exit ;
24232: GO 24381
// if tmp > 5 then
24234: LD_VAR 0 3
24238: PUSH
24239: LD_INT 5
24241: GREATER
24242: IFFALSE 24254
// k := 5 else
24244: LD_ADDR_VAR 0 2
24248: PUSH
24249: LD_INT 5
24251: ST_TO_ADDR
24252: GO 24264
// k := tmp ;
24254: LD_ADDR_VAR 0 2
24258: PUSH
24259: LD_VAR 0 3
24263: ST_TO_ADDR
// for i := 1 to k do
24264: LD_ADDR_VAR 0 1
24268: PUSH
24269: DOUBLE
24270: LD_INT 1
24272: DEC
24273: ST_TO_ADDR
24274: LD_VAR 0 2
24278: PUSH
24279: FOR_TO
24280: IFFALSE 24379
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24282: LD_VAR 0 3
24286: PUSH
24287: LD_VAR 0 1
24291: ARRAY
24292: PPUSH
24293: LD_VAR 0 1
24297: PUSH
24298: LD_INT 4
24300: MOD
24301: PUSH
24302: LD_INT 1
24304: PLUS
24305: PPUSH
24306: CALL_OW 259
24310: PUSH
24311: LD_INT 10
24313: LESS
24314: IFFALSE 24377
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24316: LD_VAR 0 3
24320: PUSH
24321: LD_VAR 0 1
24325: ARRAY
24326: PPUSH
24327: LD_VAR 0 1
24331: PUSH
24332: LD_INT 4
24334: MOD
24335: PUSH
24336: LD_INT 1
24338: PLUS
24339: PPUSH
24340: LD_VAR 0 3
24344: PUSH
24345: LD_VAR 0 1
24349: ARRAY
24350: PPUSH
24351: LD_VAR 0 1
24355: PUSH
24356: LD_INT 4
24358: MOD
24359: PUSH
24360: LD_INT 1
24362: PLUS
24363: PPUSH
24364: CALL_OW 259
24368: PUSH
24369: LD_INT 1
24371: PLUS
24372: PPUSH
24373: CALL_OW 237
24377: GO 24279
24379: POP
24380: POP
// end ;
24381: PPOPN 3
24383: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24384: LD_EXP 54
24388: PUSH
24389: LD_EXP 62
24393: AND
24394: IFFALSE 24414
24396: GO 24398
24398: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24399: LD_INT 4
24401: PPUSH
24402: LD_OWVAR 2
24406: PPUSH
24407: LD_INT 0
24409: PPUSH
24410: CALL_OW 324
24414: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24415: LD_EXP 54
24419: PUSH
24420: LD_EXP 91
24424: AND
24425: IFFALSE 24445
24427: GO 24429
24429: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24430: LD_INT 19
24432: PPUSH
24433: LD_OWVAR 2
24437: PPUSH
24438: LD_INT 0
24440: PPUSH
24441: CALL_OW 324
24445: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24446: LD_EXP 54
24450: PUSH
24451: LD_EXP 63
24455: AND
24456: IFFALSE 24558
24458: GO 24460
24460: DISABLE
24461: LD_INT 0
24463: PPUSH
24464: PPUSH
// begin enable ;
24465: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24466: LD_ADDR_VAR 0 2
24470: PUSH
24471: LD_INT 22
24473: PUSH
24474: LD_OWVAR 2
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 34
24488: PUSH
24489: LD_INT 11
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 34
24498: PUSH
24499: LD_INT 30
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PPUSH
24515: CALL_OW 69
24519: ST_TO_ADDR
// if not tmp then
24520: LD_VAR 0 2
24524: NOT
24525: IFFALSE 24529
// exit ;
24527: GO 24558
// for i in tmp do
24529: LD_ADDR_VAR 0 1
24533: PUSH
24534: LD_VAR 0 2
24538: PUSH
24539: FOR_IN
24540: IFFALSE 24556
// begin SetLives ( i , 0 ) ;
24542: LD_VAR 0 1
24546: PPUSH
24547: LD_INT 0
24549: PPUSH
24550: CALL_OW 234
// end ;
24554: GO 24539
24556: POP
24557: POP
// end ;
24558: PPOPN 2
24560: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24561: LD_EXP 54
24565: PUSH
24566: LD_EXP 64
24570: AND
24571: IFFALSE 24591
24573: GO 24575
24575: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24576: LD_INT 32
24578: PPUSH
24579: LD_OWVAR 2
24583: PPUSH
24584: LD_INT 0
24586: PPUSH
24587: CALL_OW 324
24591: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24592: LD_EXP 54
24596: PUSH
24597: LD_EXP 65
24601: AND
24602: IFFALSE 24783
24604: GO 24606
24606: DISABLE
24607: LD_INT 0
24609: PPUSH
24610: PPUSH
24611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24612: LD_ADDR_VAR 0 2
24616: PUSH
24617: LD_INT 22
24619: PUSH
24620: LD_OWVAR 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 33
24631: PUSH
24632: LD_INT 3
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PPUSH
24643: CALL_OW 69
24647: ST_TO_ADDR
// if not tmp then
24648: LD_VAR 0 2
24652: NOT
24653: IFFALSE 24657
// exit ;
24655: GO 24783
// side := 0 ;
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: LD_INT 0
24664: ST_TO_ADDR
// for i := 1 to 8 do
24665: LD_ADDR_VAR 0 1
24669: PUSH
24670: DOUBLE
24671: LD_INT 1
24673: DEC
24674: ST_TO_ADDR
24675: LD_INT 8
24677: PUSH
24678: FOR_TO
24679: IFFALSE 24727
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24681: LD_OWVAR 2
24685: PUSH
24686: LD_VAR 0 1
24690: NONEQUAL
24691: PUSH
24692: LD_OWVAR 2
24696: PPUSH
24697: LD_VAR 0 1
24701: PPUSH
24702: CALL_OW 81
24706: PUSH
24707: LD_INT 2
24709: EQUAL
24710: AND
24711: IFFALSE 24725
// begin side := i ;
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_VAR 0 1
24722: ST_TO_ADDR
// break ;
24723: GO 24727
// end ;
24725: GO 24678
24727: POP
24728: POP
// if not side then
24729: LD_VAR 0 3
24733: NOT
24734: IFFALSE 24738
// exit ;
24736: GO 24783
// for i := 1 to tmp do
24738: LD_ADDR_VAR 0 1
24742: PUSH
24743: DOUBLE
24744: LD_INT 1
24746: DEC
24747: ST_TO_ADDR
24748: LD_VAR 0 2
24752: PUSH
24753: FOR_TO
24754: IFFALSE 24781
// if Prob ( 60 ) then
24756: LD_INT 60
24758: PPUSH
24759: CALL_OW 13
24763: IFFALSE 24779
// SetSide ( i , side ) ;
24765: LD_VAR 0 1
24769: PPUSH
24770: LD_VAR 0 3
24774: PPUSH
24775: CALL_OW 235
24779: GO 24753
24781: POP
24782: POP
// end ;
24783: PPOPN 3
24785: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24786: LD_EXP 54
24790: PUSH
24791: LD_EXP 67
24795: AND
24796: IFFALSE 24915
24798: GO 24800
24800: DISABLE
24801: LD_INT 0
24803: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24804: LD_ADDR_VAR 0 1
24808: PUSH
24809: LD_INT 22
24811: PUSH
24812: LD_OWVAR 2
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 21
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 3
24833: PUSH
24834: LD_INT 23
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: PPUSH
24853: CALL_OW 69
24857: PUSH
24858: FOR_IN
24859: IFFALSE 24913
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24861: LD_VAR 0 1
24865: PPUSH
24866: CALL_OW 257
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: LD_INT 4
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: IN
24889: IFFALSE 24911
// SetClass ( un , rand ( 1 , 4 ) ) ;
24891: LD_VAR 0 1
24895: PPUSH
24896: LD_INT 1
24898: PPUSH
24899: LD_INT 4
24901: PPUSH
24902: CALL_OW 12
24906: PPUSH
24907: CALL_OW 336
24911: GO 24858
24913: POP
24914: POP
// end ;
24915: PPOPN 1
24917: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24918: LD_EXP 54
24922: PUSH
24923: LD_EXP 66
24927: AND
24928: IFFALSE 25007
24930: GO 24932
24932: DISABLE
24933: LD_INT 0
24935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24936: LD_ADDR_VAR 0 1
24940: PUSH
24941: LD_INT 22
24943: PUSH
24944: LD_OWVAR 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 21
24955: PUSH
24956: LD_INT 3
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PPUSH
24967: CALL_OW 69
24971: ST_TO_ADDR
// if not tmp then
24972: LD_VAR 0 1
24976: NOT
24977: IFFALSE 24981
// exit ;
24979: GO 25007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24981: LD_VAR 0 1
24985: PUSH
24986: LD_INT 1
24988: PPUSH
24989: LD_VAR 0 1
24993: PPUSH
24994: CALL_OW 12
24998: ARRAY
24999: PPUSH
25000: LD_INT 100
25002: PPUSH
25003: CALL_OW 234
// end ;
25007: PPOPN 1
25009: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25010: LD_EXP 54
25014: PUSH
25015: LD_EXP 68
25019: AND
25020: IFFALSE 25118
25022: GO 25024
25024: DISABLE
25025: LD_INT 0
25027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25028: LD_ADDR_VAR 0 1
25032: PUSH
25033: LD_INT 22
25035: PUSH
25036: LD_OWVAR 2
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 21
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PPUSH
25059: CALL_OW 69
25063: ST_TO_ADDR
// if not tmp then
25064: LD_VAR 0 1
25068: NOT
25069: IFFALSE 25073
// exit ;
25071: GO 25118
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25073: LD_VAR 0 1
25077: PUSH
25078: LD_INT 1
25080: PPUSH
25081: LD_VAR 0 1
25085: PPUSH
25086: CALL_OW 12
25090: ARRAY
25091: PPUSH
25092: LD_INT 1
25094: PPUSH
25095: LD_INT 4
25097: PPUSH
25098: CALL_OW 12
25102: PPUSH
25103: LD_INT 3000
25105: PPUSH
25106: LD_INT 9000
25108: PPUSH
25109: CALL_OW 12
25113: PPUSH
25114: CALL_OW 492
// end ;
25118: PPOPN 1
25120: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25121: LD_EXP 54
25125: PUSH
25126: LD_EXP 69
25130: AND
25131: IFFALSE 25151
25133: GO 25135
25135: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25136: LD_INT 1
25138: PPUSH
25139: LD_OWVAR 2
25143: PPUSH
25144: LD_INT 0
25146: PPUSH
25147: CALL_OW 324
25151: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25152: LD_EXP 54
25156: PUSH
25157: LD_EXP 70
25161: AND
25162: IFFALSE 25245
25164: GO 25166
25166: DISABLE
25167: LD_INT 0
25169: PPUSH
25170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25171: LD_ADDR_VAR 0 2
25175: PUSH
25176: LD_INT 22
25178: PUSH
25179: LD_OWVAR 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 21
25190: PUSH
25191: LD_INT 3
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: ST_TO_ADDR
// if not tmp then
25207: LD_VAR 0 2
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 25245
// for i in tmp do
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_VAR 0 2
25225: PUSH
25226: FOR_IN
25227: IFFALSE 25243
// SetBLevel ( i , 10 ) ;
25229: LD_VAR 0 1
25233: PPUSH
25234: LD_INT 10
25236: PPUSH
25237: CALL_OW 241
25241: GO 25226
25243: POP
25244: POP
// end ;
25245: PPOPN 2
25247: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25248: LD_EXP 54
25252: PUSH
25253: LD_EXP 71
25257: AND
25258: IFFALSE 25369
25260: GO 25262
25262: DISABLE
25263: LD_INT 0
25265: PPUSH
25266: PPUSH
25267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25268: LD_ADDR_VAR 0 3
25272: PUSH
25273: LD_INT 22
25275: PUSH
25276: LD_OWVAR 2
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 25
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PPUSH
25299: CALL_OW 69
25303: ST_TO_ADDR
// if not tmp then
25304: LD_VAR 0 3
25308: NOT
25309: IFFALSE 25313
// exit ;
25311: GO 25369
// un := tmp [ rand ( 1 , tmp ) ] ;
25313: LD_ADDR_VAR 0 2
25317: PUSH
25318: LD_VAR 0 3
25322: PUSH
25323: LD_INT 1
25325: PPUSH
25326: LD_VAR 0 3
25330: PPUSH
25331: CALL_OW 12
25335: ARRAY
25336: ST_TO_ADDR
// if Crawls ( un ) then
25337: LD_VAR 0 2
25341: PPUSH
25342: CALL_OW 318
25346: IFFALSE 25357
// ComWalk ( un ) ;
25348: LD_VAR 0 2
25352: PPUSH
25353: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25357: LD_VAR 0 2
25361: PPUSH
25362: LD_INT 5
25364: PPUSH
25365: CALL_OW 336
// end ;
25369: PPOPN 3
25371: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25372: LD_EXP 54
25376: PUSH
25377: LD_EXP 72
25381: AND
25382: PUSH
25383: LD_OWVAR 67
25387: PUSH
25388: LD_INT 4
25390: LESS
25391: AND
25392: IFFALSE 25411
25394: GO 25396
25396: DISABLE
// begin Difficulty := Difficulty + 1 ;
25397: LD_ADDR_OWVAR 67
25401: PUSH
25402: LD_OWVAR 67
25406: PUSH
25407: LD_INT 1
25409: PLUS
25410: ST_TO_ADDR
// end ;
25411: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25412: LD_EXP 54
25416: PUSH
25417: LD_EXP 73
25421: AND
25422: IFFALSE 25525
25424: GO 25426
25426: DISABLE
25427: LD_INT 0
25429: PPUSH
// begin for i := 1 to 5 do
25430: LD_ADDR_VAR 0 1
25434: PUSH
25435: DOUBLE
25436: LD_INT 1
25438: DEC
25439: ST_TO_ADDR
25440: LD_INT 5
25442: PUSH
25443: FOR_TO
25444: IFFALSE 25523
// begin uc_nation := nation_nature ;
25446: LD_ADDR_OWVAR 21
25450: PUSH
25451: LD_INT 0
25453: ST_TO_ADDR
// uc_side := 0 ;
25454: LD_ADDR_OWVAR 20
25458: PUSH
25459: LD_INT 0
25461: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25462: LD_ADDR_OWVAR 29
25466: PUSH
25467: LD_INT 12
25469: PUSH
25470: LD_INT 12
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: ST_TO_ADDR
// hc_agressivity := 20 ;
25477: LD_ADDR_OWVAR 35
25481: PUSH
25482: LD_INT 20
25484: ST_TO_ADDR
// hc_class := class_tiger ;
25485: LD_ADDR_OWVAR 28
25489: PUSH
25490: LD_INT 14
25492: ST_TO_ADDR
// hc_gallery :=  ;
25493: LD_ADDR_OWVAR 33
25497: PUSH
25498: LD_STRING 
25500: ST_TO_ADDR
// hc_name :=  ;
25501: LD_ADDR_OWVAR 26
25505: PUSH
25506: LD_STRING 
25508: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25509: CALL_OW 44
25513: PPUSH
25514: LD_INT 0
25516: PPUSH
25517: CALL_OW 51
// end ;
25521: GO 25443
25523: POP
25524: POP
// end ;
25525: PPOPN 1
25527: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25528: LD_EXP 54
25532: PUSH
25533: LD_EXP 74
25537: AND
25538: IFFALSE 25547
25540: GO 25542
25542: DISABLE
// StreamSibBomb ;
25543: CALL 25548 0 0
25547: END
// export function StreamSibBomb ; var i , x , y ; begin
25548: LD_INT 0
25550: PPUSH
25551: PPUSH
25552: PPUSH
25553: PPUSH
// result := false ;
25554: LD_ADDR_VAR 0 1
25558: PUSH
25559: LD_INT 0
25561: ST_TO_ADDR
// for i := 1 to 16 do
25562: LD_ADDR_VAR 0 2
25566: PUSH
25567: DOUBLE
25568: LD_INT 1
25570: DEC
25571: ST_TO_ADDR
25572: LD_INT 16
25574: PUSH
25575: FOR_TO
25576: IFFALSE 25775
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25578: LD_ADDR_VAR 0 3
25582: PUSH
25583: LD_INT 10
25585: PUSH
25586: LD_INT 20
25588: PUSH
25589: LD_INT 30
25591: PUSH
25592: LD_INT 40
25594: PUSH
25595: LD_INT 50
25597: PUSH
25598: LD_INT 60
25600: PUSH
25601: LD_INT 70
25603: PUSH
25604: LD_INT 80
25606: PUSH
25607: LD_INT 90
25609: PUSH
25610: LD_INT 100
25612: PUSH
25613: LD_INT 110
25615: PUSH
25616: LD_INT 120
25618: PUSH
25619: LD_INT 130
25621: PUSH
25622: LD_INT 140
25624: PUSH
25625: LD_INT 150
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: PPUSH
25648: LD_INT 15
25650: PPUSH
25651: CALL_OW 12
25655: ARRAY
25656: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25657: LD_ADDR_VAR 0 4
25661: PUSH
25662: LD_INT 10
25664: PUSH
25665: LD_INT 20
25667: PUSH
25668: LD_INT 30
25670: PUSH
25671: LD_INT 40
25673: PUSH
25674: LD_INT 50
25676: PUSH
25677: LD_INT 60
25679: PUSH
25680: LD_INT 70
25682: PUSH
25683: LD_INT 80
25685: PUSH
25686: LD_INT 90
25688: PUSH
25689: LD_INT 100
25691: PUSH
25692: LD_INT 110
25694: PUSH
25695: LD_INT 120
25697: PUSH
25698: LD_INT 130
25700: PUSH
25701: LD_INT 140
25703: PUSH
25704: LD_INT 150
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: PPUSH
25727: LD_INT 15
25729: PPUSH
25730: CALL_OW 12
25734: ARRAY
25735: ST_TO_ADDR
// if ValidHex ( x , y ) then
25736: LD_VAR 0 3
25740: PPUSH
25741: LD_VAR 0 4
25745: PPUSH
25746: CALL_OW 488
25750: IFFALSE 25773
// begin result := [ x , y ] ;
25752: LD_ADDR_VAR 0 1
25756: PUSH
25757: LD_VAR 0 3
25761: PUSH
25762: LD_VAR 0 4
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: ST_TO_ADDR
// break ;
25771: GO 25775
// end ; end ;
25773: GO 25575
25775: POP
25776: POP
// if result then
25777: LD_VAR 0 1
25781: IFFALSE 25841
// begin ToLua ( playSibBomb() ) ;
25783: LD_STRING playSibBomb()
25785: PPUSH
25786: CALL_OW 559
// wait ( 0 0$14 ) ;
25790: LD_INT 490
25792: PPUSH
25793: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25797: LD_VAR 0 1
25801: PUSH
25802: LD_INT 1
25804: ARRAY
25805: PPUSH
25806: LD_VAR 0 1
25810: PUSH
25811: LD_INT 2
25813: ARRAY
25814: PPUSH
25815: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25819: LD_VAR 0 1
25823: PUSH
25824: LD_INT 1
25826: ARRAY
25827: PPUSH
25828: LD_VAR 0 1
25832: PUSH
25833: LD_INT 2
25835: ARRAY
25836: PPUSH
25837: CALL_OW 429
// end ; end ;
25841: LD_VAR 0 1
25845: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25846: LD_EXP 54
25850: PUSH
25851: LD_EXP 76
25855: AND
25856: IFFALSE 25868
25858: GO 25860
25860: DISABLE
// YouLost (  ) ;
25861: LD_STRING 
25863: PPUSH
25864: CALL_OW 104
25868: END
// every 0 0$1 trigger StreamModeActive and sFog do
25869: LD_EXP 54
25873: PUSH
25874: LD_EXP 75
25878: AND
25879: IFFALSE 25893
25881: GO 25883
25883: DISABLE
// FogOff ( your_side ) ;
25884: LD_OWVAR 2
25888: PPUSH
25889: CALL_OW 344
25893: END
// every 0 0$1 trigger StreamModeActive and sSun do
25894: LD_EXP 54
25898: PUSH
25899: LD_EXP 77
25903: AND
25904: IFFALSE 25932
25906: GO 25908
25908: DISABLE
// begin solar_recharge_percent := 0 ;
25909: LD_ADDR_OWVAR 79
25913: PUSH
25914: LD_INT 0
25916: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25917: LD_INT 10500
25919: PPUSH
25920: CALL_OW 67
// solar_recharge_percent := 100 ;
25924: LD_ADDR_OWVAR 79
25928: PUSH
25929: LD_INT 100
25931: ST_TO_ADDR
// end ;
25932: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25933: LD_EXP 54
25937: PUSH
25938: LD_EXP 78
25942: AND
25943: IFFALSE 26182
25945: GO 25947
25947: DISABLE
25948: LD_INT 0
25950: PPUSH
25951: PPUSH
25952: PPUSH
// begin tmp := [ ] ;
25953: LD_ADDR_VAR 0 3
25957: PUSH
25958: EMPTY
25959: ST_TO_ADDR
// for i := 1 to 6 do
25960: LD_ADDR_VAR 0 1
25964: PUSH
25965: DOUBLE
25966: LD_INT 1
25968: DEC
25969: ST_TO_ADDR
25970: LD_INT 6
25972: PUSH
25973: FOR_TO
25974: IFFALSE 26079
// begin uc_nation := nation_nature ;
25976: LD_ADDR_OWVAR 21
25980: PUSH
25981: LD_INT 0
25983: ST_TO_ADDR
// uc_side := 0 ;
25984: LD_ADDR_OWVAR 20
25988: PUSH
25989: LD_INT 0
25991: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25992: LD_ADDR_OWVAR 29
25996: PUSH
25997: LD_INT 12
25999: PUSH
26000: LD_INT 12
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: ST_TO_ADDR
// hc_agressivity := 20 ;
26007: LD_ADDR_OWVAR 35
26011: PUSH
26012: LD_INT 20
26014: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26015: LD_ADDR_OWVAR 28
26019: PUSH
26020: LD_INT 17
26022: ST_TO_ADDR
// hc_gallery :=  ;
26023: LD_ADDR_OWVAR 33
26027: PUSH
26028: LD_STRING 
26030: ST_TO_ADDR
// hc_name :=  ;
26031: LD_ADDR_OWVAR 26
26035: PUSH
26036: LD_STRING 
26038: ST_TO_ADDR
// un := CreateHuman ;
26039: LD_ADDR_VAR 0 2
26043: PUSH
26044: CALL_OW 44
26048: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26049: LD_VAR 0 2
26053: PPUSH
26054: LD_INT 1
26056: PPUSH
26057: CALL_OW 51
// tmp := tmp ^ un ;
26061: LD_ADDR_VAR 0 3
26065: PUSH
26066: LD_VAR 0 3
26070: PUSH
26071: LD_VAR 0 2
26075: ADD
26076: ST_TO_ADDR
// end ;
26077: GO 25973
26079: POP
26080: POP
// repeat wait ( 0 0$1 ) ;
26081: LD_INT 35
26083: PPUSH
26084: CALL_OW 67
// for un in tmp do
26088: LD_ADDR_VAR 0 2
26092: PUSH
26093: LD_VAR 0 3
26097: PUSH
26098: FOR_IN
26099: IFFALSE 26173
// begin if IsDead ( un ) then
26101: LD_VAR 0 2
26105: PPUSH
26106: CALL_OW 301
26110: IFFALSE 26130
// begin tmp := tmp diff un ;
26112: LD_ADDR_VAR 0 3
26116: PUSH
26117: LD_VAR 0 3
26121: PUSH
26122: LD_VAR 0 2
26126: DIFF
26127: ST_TO_ADDR
// continue ;
26128: GO 26098
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26130: LD_VAR 0 2
26134: PPUSH
26135: LD_INT 3
26137: PUSH
26138: LD_INT 22
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PPUSH
26152: CALL_OW 69
26156: PPUSH
26157: LD_VAR 0 2
26161: PPUSH
26162: CALL_OW 74
26166: PPUSH
26167: CALL_OW 115
// end ;
26171: GO 26098
26173: POP
26174: POP
// until not tmp ;
26175: LD_VAR 0 3
26179: NOT
26180: IFFALSE 26081
// end ;
26182: PPOPN 3
26184: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26185: LD_EXP 54
26189: PUSH
26190: LD_EXP 79
26194: AND
26195: IFFALSE 26249
26197: GO 26199
26199: DISABLE
// begin ToLua ( displayTroll(); ) ;
26200: LD_STRING displayTroll();
26202: PPUSH
26203: CALL_OW 559
// wait ( 3 3$00 ) ;
26207: LD_INT 6300
26209: PPUSH
26210: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26214: LD_STRING hideTroll();
26216: PPUSH
26217: CALL_OW 559
// wait ( 1 1$00 ) ;
26221: LD_INT 2100
26223: PPUSH
26224: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26228: LD_STRING displayTroll();
26230: PPUSH
26231: CALL_OW 559
// wait ( 1 1$00 ) ;
26235: LD_INT 2100
26237: PPUSH
26238: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26242: LD_STRING hideTroll();
26244: PPUSH
26245: CALL_OW 559
// end ;
26249: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26250: LD_EXP 54
26254: PUSH
26255: LD_EXP 80
26259: AND
26260: IFFALSE 26323
26262: GO 26264
26264: DISABLE
26265: LD_INT 0
26267: PPUSH
// begin p := 0 ;
26268: LD_ADDR_VAR 0 1
26272: PUSH
26273: LD_INT 0
26275: ST_TO_ADDR
// repeat game_speed := 1 ;
26276: LD_ADDR_OWVAR 65
26280: PUSH
26281: LD_INT 1
26283: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26284: LD_INT 35
26286: PPUSH
26287: CALL_OW 67
// p := p + 1 ;
26291: LD_ADDR_VAR 0 1
26295: PUSH
26296: LD_VAR 0 1
26300: PUSH
26301: LD_INT 1
26303: PLUS
26304: ST_TO_ADDR
// until p >= 60 ;
26305: LD_VAR 0 1
26309: PUSH
26310: LD_INT 60
26312: GREATEREQUAL
26313: IFFALSE 26276
// game_speed := 4 ;
26315: LD_ADDR_OWVAR 65
26319: PUSH
26320: LD_INT 4
26322: ST_TO_ADDR
// end ;
26323: PPOPN 1
26325: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26326: LD_EXP 54
26330: PUSH
26331: LD_EXP 81
26335: AND
26336: IFFALSE 26482
26338: GO 26340
26340: DISABLE
26341: LD_INT 0
26343: PPUSH
26344: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26345: LD_ADDR_VAR 0 1
26349: PUSH
26350: LD_INT 22
26352: PUSH
26353: LD_OWVAR 2
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: LD_INT 30
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 30
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 69
26398: ST_TO_ADDR
// if not depot then
26399: LD_VAR 0 1
26403: NOT
26404: IFFALSE 26408
// exit ;
26406: GO 26482
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26408: LD_ADDR_VAR 0 2
26412: PUSH
26413: LD_VAR 0 1
26417: PUSH
26418: LD_INT 1
26420: PPUSH
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL_OW 12
26430: ARRAY
26431: PPUSH
26432: CALL_OW 274
26436: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26437: LD_VAR 0 2
26441: PPUSH
26442: LD_INT 1
26444: PPUSH
26445: LD_INT 0
26447: PPUSH
26448: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26452: LD_VAR 0 2
26456: PPUSH
26457: LD_INT 2
26459: PPUSH
26460: LD_INT 0
26462: PPUSH
26463: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26467: LD_VAR 0 2
26471: PPUSH
26472: LD_INT 3
26474: PPUSH
26475: LD_INT 0
26477: PPUSH
26478: CALL_OW 277
// end ;
26482: PPOPN 2
26484: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26485: LD_EXP 54
26489: PUSH
26490: LD_EXP 82
26494: AND
26495: IFFALSE 26592
26497: GO 26499
26499: DISABLE
26500: LD_INT 0
26502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26503: LD_ADDR_VAR 0 1
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: LD_OWVAR 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 21
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 3
26532: PUSH
26533: LD_INT 23
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: PPUSH
26552: CALL_OW 69
26556: ST_TO_ADDR
// if not tmp then
26557: LD_VAR 0 1
26561: NOT
26562: IFFALSE 26566
// exit ;
26564: GO 26592
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26566: LD_VAR 0 1
26570: PUSH
26571: LD_INT 1
26573: PPUSH
26574: LD_VAR 0 1
26578: PPUSH
26579: CALL_OW 12
26583: ARRAY
26584: PPUSH
26585: LD_INT 200
26587: PPUSH
26588: CALL_OW 234
// end ;
26592: PPOPN 1
26594: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26595: LD_EXP 54
26599: PUSH
26600: LD_EXP 83
26604: AND
26605: IFFALSE 26684
26607: GO 26609
26609: DISABLE
26610: LD_INT 0
26612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26613: LD_ADDR_VAR 0 1
26617: PUSH
26618: LD_INT 22
26620: PUSH
26621: LD_OWVAR 2
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 21
26632: PUSH
26633: LD_INT 2
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PPUSH
26644: CALL_OW 69
26648: ST_TO_ADDR
// if not tmp then
26649: LD_VAR 0 1
26653: NOT
26654: IFFALSE 26658
// exit ;
26656: GO 26684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26658: LD_VAR 0 1
26662: PUSH
26663: LD_INT 1
26665: PPUSH
26666: LD_VAR 0 1
26670: PPUSH
26671: CALL_OW 12
26675: ARRAY
26676: PPUSH
26677: LD_INT 60
26679: PPUSH
26680: CALL_OW 234
// end ;
26684: PPOPN 1
26686: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26687: LD_EXP 54
26691: PUSH
26692: LD_EXP 84
26696: AND
26697: IFFALSE 26796
26699: GO 26701
26701: DISABLE
26702: LD_INT 0
26704: PPUSH
26705: PPUSH
// begin enable ;
26706: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26707: LD_ADDR_VAR 0 1
26711: PUSH
26712: LD_INT 22
26714: PUSH
26715: LD_OWVAR 2
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 61
26726: PUSH
26727: EMPTY
26728: LIST
26729: PUSH
26730: LD_INT 33
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: PPUSH
26745: CALL_OW 69
26749: ST_TO_ADDR
// if not tmp then
26750: LD_VAR 0 1
26754: NOT
26755: IFFALSE 26759
// exit ;
26757: GO 26796
// for i in tmp do
26759: LD_ADDR_VAR 0 2
26763: PUSH
26764: LD_VAR 0 1
26768: PUSH
26769: FOR_IN
26770: IFFALSE 26794
// if IsControledBy ( i ) then
26772: LD_VAR 0 2
26776: PPUSH
26777: CALL_OW 312
26781: IFFALSE 26792
// ComUnlink ( i ) ;
26783: LD_VAR 0 2
26787: PPUSH
26788: CALL_OW 136
26792: GO 26769
26794: POP
26795: POP
// end ;
26796: PPOPN 2
26798: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26799: LD_EXP 54
26803: PUSH
26804: LD_EXP 85
26808: AND
26809: IFFALSE 26949
26811: GO 26813
26813: DISABLE
26814: LD_INT 0
26816: PPUSH
26817: PPUSH
// begin ToLua ( displayPowell(); ) ;
26818: LD_STRING displayPowell();
26820: PPUSH
26821: CALL_OW 559
// uc_side := 0 ;
26825: LD_ADDR_OWVAR 20
26829: PUSH
26830: LD_INT 0
26832: ST_TO_ADDR
// uc_nation := 2 ;
26833: LD_ADDR_OWVAR 21
26837: PUSH
26838: LD_INT 2
26840: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26841: LD_ADDR_OWVAR 37
26845: PUSH
26846: LD_INT 14
26848: ST_TO_ADDR
// vc_engine := engine_siberite ;
26849: LD_ADDR_OWVAR 39
26853: PUSH
26854: LD_INT 3
26856: ST_TO_ADDR
// vc_control := control_apeman ;
26857: LD_ADDR_OWVAR 38
26861: PUSH
26862: LD_INT 5
26864: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26865: LD_ADDR_OWVAR 40
26869: PUSH
26870: LD_INT 29
26872: ST_TO_ADDR
// un := CreateVehicle ;
26873: LD_ADDR_VAR 0 2
26877: PUSH
26878: CALL_OW 45
26882: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26883: LD_VAR 0 2
26887: PPUSH
26888: LD_INT 1
26890: PPUSH
26891: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26895: LD_INT 35
26897: PPUSH
26898: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26902: LD_VAR 0 2
26906: PPUSH
26907: LD_INT 22
26909: PUSH
26910: LD_OWVAR 2
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PPUSH
26919: CALL_OW 69
26923: PPUSH
26924: LD_VAR 0 2
26928: PPUSH
26929: CALL_OW 74
26933: PPUSH
26934: CALL_OW 115
// until IsDead ( un ) ;
26938: LD_VAR 0 2
26942: PPUSH
26943: CALL_OW 301
26947: IFFALSE 26895
// end ;
26949: PPOPN 2
26951: END
// every 0 0$1 trigger StreamModeActive and sStu do
26952: LD_EXP 54
26956: PUSH
26957: LD_EXP 93
26961: AND
26962: IFFALSE 26978
26964: GO 26966
26966: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26967: LD_STRING displayStucuk();
26969: PPUSH
26970: CALL_OW 559
// ResetFog ;
26974: CALL_OW 335
// end ;
26978: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26979: LD_EXP 54
26983: PUSH
26984: LD_EXP 86
26988: AND
26989: IFFALSE 27130
26991: GO 26993
26993: DISABLE
26994: LD_INT 0
26996: PPUSH
26997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26998: LD_ADDR_VAR 0 2
27002: PUSH
27003: LD_INT 22
27005: PUSH
27006: LD_OWVAR 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 21
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PPUSH
27029: CALL_OW 69
27033: ST_TO_ADDR
// if not tmp then
27034: LD_VAR 0 2
27038: NOT
27039: IFFALSE 27043
// exit ;
27041: GO 27130
// un := tmp [ rand ( 1 , tmp ) ] ;
27043: LD_ADDR_VAR 0 1
27047: PUSH
27048: LD_VAR 0 2
27052: PUSH
27053: LD_INT 1
27055: PPUSH
27056: LD_VAR 0 2
27060: PPUSH
27061: CALL_OW 12
27065: ARRAY
27066: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_INT 0
27074: PPUSH
27075: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27079: LD_VAR 0 1
27083: PPUSH
27084: LD_OWVAR 3
27088: PUSH
27089: LD_VAR 0 1
27093: DIFF
27094: PPUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 74
27104: PPUSH
27105: CALL_OW 115
// wait ( 0 0$20 ) ;
27109: LD_INT 700
27111: PPUSH
27112: CALL_OW 67
// SetSide ( un , your_side ) ;
27116: LD_VAR 0 1
27120: PPUSH
27121: LD_OWVAR 2
27125: PPUSH
27126: CALL_OW 235
// end ;
27130: PPOPN 2
27132: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27133: LD_EXP 54
27137: PUSH
27138: LD_EXP 87
27142: AND
27143: IFFALSE 27249
27145: GO 27147
27147: DISABLE
27148: LD_INT 0
27150: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27151: LD_ADDR_VAR 0 1
27155: PUSH
27156: LD_INT 22
27158: PUSH
27159: LD_OWVAR 2
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: LD_INT 30
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 30
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: LIST
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PPUSH
27200: CALL_OW 69
27204: ST_TO_ADDR
// if not depot then
27205: LD_VAR 0 1
27209: NOT
27210: IFFALSE 27214
// exit ;
27212: GO 27249
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27214: LD_VAR 0 1
27218: PUSH
27219: LD_INT 1
27221: ARRAY
27222: PPUSH
27223: CALL_OW 250
27227: PPUSH
27228: LD_VAR 0 1
27232: PUSH
27233: LD_INT 1
27235: ARRAY
27236: PPUSH
27237: CALL_OW 251
27241: PPUSH
27242: LD_INT 70
27244: PPUSH
27245: CALL_OW 495
// end ;
27249: PPOPN 1
27251: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27252: LD_EXP 54
27256: PUSH
27257: LD_EXP 88
27261: AND
27262: IFFALSE 27473
27264: GO 27266
27266: DISABLE
27267: LD_INT 0
27269: PPUSH
27270: PPUSH
27271: PPUSH
27272: PPUSH
27273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27274: LD_ADDR_VAR 0 5
27278: PUSH
27279: LD_INT 22
27281: PUSH
27282: LD_OWVAR 2
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 21
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PPUSH
27305: CALL_OW 69
27309: ST_TO_ADDR
// if not tmp then
27310: LD_VAR 0 5
27314: NOT
27315: IFFALSE 27319
// exit ;
27317: GO 27473
// for i in tmp do
27319: LD_ADDR_VAR 0 1
27323: PUSH
27324: LD_VAR 0 5
27328: PUSH
27329: FOR_IN
27330: IFFALSE 27471
// begin d := rand ( 0 , 5 ) ;
27332: LD_ADDR_VAR 0 4
27336: PUSH
27337: LD_INT 0
27339: PPUSH
27340: LD_INT 5
27342: PPUSH
27343: CALL_OW 12
27347: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27348: LD_ADDR_VAR 0 2
27352: PUSH
27353: LD_VAR 0 1
27357: PPUSH
27358: CALL_OW 250
27362: PPUSH
27363: LD_VAR 0 4
27367: PPUSH
27368: LD_INT 3
27370: PPUSH
27371: LD_INT 12
27373: PPUSH
27374: CALL_OW 12
27378: PPUSH
27379: CALL_OW 272
27383: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27384: LD_ADDR_VAR 0 3
27388: PUSH
27389: LD_VAR 0 1
27393: PPUSH
27394: CALL_OW 251
27398: PPUSH
27399: LD_VAR 0 4
27403: PPUSH
27404: LD_INT 3
27406: PPUSH
27407: LD_INT 12
27409: PPUSH
27410: CALL_OW 12
27414: PPUSH
27415: CALL_OW 273
27419: ST_TO_ADDR
// if ValidHex ( x , y ) then
27420: LD_VAR 0 2
27424: PPUSH
27425: LD_VAR 0 3
27429: PPUSH
27430: CALL_OW 488
27434: IFFALSE 27469
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27436: LD_VAR 0 1
27440: PPUSH
27441: LD_VAR 0 2
27445: PPUSH
27446: LD_VAR 0 3
27450: PPUSH
27451: LD_INT 3
27453: PPUSH
27454: LD_INT 6
27456: PPUSH
27457: CALL_OW 12
27461: PPUSH
27462: LD_INT 1
27464: PPUSH
27465: CALL_OW 483
// end ;
27469: GO 27329
27471: POP
27472: POP
// end ;
27473: PPOPN 5
27475: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27476: LD_EXP 54
27480: PUSH
27481: LD_EXP 89
27485: AND
27486: IFFALSE 27580
27488: GO 27490
27490: DISABLE
27491: LD_INT 0
27493: PPUSH
27494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27495: LD_ADDR_VAR 0 2
27499: PUSH
27500: LD_INT 22
27502: PUSH
27503: LD_OWVAR 2
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 32
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 21
27524: PUSH
27525: LD_INT 2
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: PPUSH
27537: CALL_OW 69
27541: ST_TO_ADDR
// if not tmp then
27542: LD_VAR 0 2
27546: NOT
27547: IFFALSE 27551
// exit ;
27549: GO 27580
// for i in tmp do
27551: LD_ADDR_VAR 0 1
27555: PUSH
27556: LD_VAR 0 2
27560: PUSH
27561: FOR_IN
27562: IFFALSE 27578
// SetFuel ( i , 0 ) ;
27564: LD_VAR 0 1
27568: PPUSH
27569: LD_INT 0
27571: PPUSH
27572: CALL_OW 240
27576: GO 27561
27578: POP
27579: POP
// end ;
27580: PPOPN 2
27582: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27583: LD_EXP 54
27587: PUSH
27588: LD_EXP 90
27592: AND
27593: IFFALSE 27659
27595: GO 27597
27597: DISABLE
27598: LD_INT 0
27600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27601: LD_ADDR_VAR 0 1
27605: PUSH
27606: LD_INT 22
27608: PUSH
27609: LD_OWVAR 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 30
27620: PUSH
27621: LD_INT 29
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PPUSH
27632: CALL_OW 69
27636: ST_TO_ADDR
// if not tmp then
27637: LD_VAR 0 1
27641: NOT
27642: IFFALSE 27646
// exit ;
27644: GO 27659
// DestroyUnit ( tmp [ 1 ] ) ;
27646: LD_VAR 0 1
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: PPUSH
27655: CALL_OW 65
// end ;
27659: PPOPN 1
27661: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27662: LD_EXP 54
27666: PUSH
27667: LD_EXP 92
27671: AND
27672: IFFALSE 27801
27674: GO 27676
27676: DISABLE
27677: LD_INT 0
27679: PPUSH
// begin uc_side := 0 ;
27680: LD_ADDR_OWVAR 20
27684: PUSH
27685: LD_INT 0
27687: ST_TO_ADDR
// uc_nation := nation_arabian ;
27688: LD_ADDR_OWVAR 21
27692: PUSH
27693: LD_INT 2
27695: ST_TO_ADDR
// hc_gallery :=  ;
27696: LD_ADDR_OWVAR 33
27700: PUSH
27701: LD_STRING 
27703: ST_TO_ADDR
// hc_name :=  ;
27704: LD_ADDR_OWVAR 26
27708: PUSH
27709: LD_STRING 
27711: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27712: LD_INT 1
27714: PPUSH
27715: LD_INT 11
27717: PPUSH
27718: LD_INT 10
27720: PPUSH
27721: CALL_OW 380
// un := CreateHuman ;
27725: LD_ADDR_VAR 0 1
27729: PUSH
27730: CALL_OW 44
27734: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27735: LD_VAR 0 1
27739: PPUSH
27740: LD_INT 1
27742: PPUSH
27743: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27747: LD_INT 35
27749: PPUSH
27750: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27754: LD_VAR 0 1
27758: PPUSH
27759: LD_INT 22
27761: PUSH
27762: LD_OWVAR 2
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PPUSH
27771: CALL_OW 69
27775: PPUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: CALL_OW 74
27785: PPUSH
27786: CALL_OW 115
// until IsDead ( un ) ;
27790: LD_VAR 0 1
27794: PPUSH
27795: CALL_OW 301
27799: IFFALSE 27747
// end ;
27801: PPOPN 1
27803: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27804: LD_EXP 54
27808: PUSH
27809: LD_EXP 94
27813: AND
27814: IFFALSE 27826
27816: GO 27818
27818: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27819: LD_STRING earthquake(getX(game), 0, 32)
27821: PPUSH
27822: CALL_OW 559
27826: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27827: LD_EXP 54
27831: PUSH
27832: LD_EXP 95
27836: AND
27837: IFFALSE 27928
27839: GO 27841
27841: DISABLE
27842: LD_INT 0
27844: PPUSH
// begin enable ;
27845: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27846: LD_ADDR_VAR 0 1
27850: PUSH
27851: LD_INT 22
27853: PUSH
27854: LD_OWVAR 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 21
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 33
27875: PUSH
27876: LD_INT 3
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: LIST
27887: PPUSH
27888: CALL_OW 69
27892: ST_TO_ADDR
// if not tmp then
27893: LD_VAR 0 1
27897: NOT
27898: IFFALSE 27902
// exit ;
27900: GO 27928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27902: LD_VAR 0 1
27906: PUSH
27907: LD_INT 1
27909: PPUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: CALL_OW 12
27919: ARRAY
27920: PPUSH
27921: LD_INT 1
27923: PPUSH
27924: CALL_OW 234
// end ;
27928: PPOPN 1
27930: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27931: LD_EXP 54
27935: PUSH
27936: LD_EXP 96
27940: AND
27941: IFFALSE 28082
27943: GO 27945
27945: DISABLE
27946: LD_INT 0
27948: PPUSH
27949: PPUSH
27950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27951: LD_ADDR_VAR 0 3
27955: PUSH
27956: LD_INT 22
27958: PUSH
27959: LD_OWVAR 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 25
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PPUSH
27982: CALL_OW 69
27986: ST_TO_ADDR
// if not tmp then
27987: LD_VAR 0 3
27991: NOT
27992: IFFALSE 27996
// exit ;
27994: GO 28082
// un := tmp [ rand ( 1 , tmp ) ] ;
27996: LD_ADDR_VAR 0 2
28000: PUSH
28001: LD_VAR 0 3
28005: PUSH
28006: LD_INT 1
28008: PPUSH
28009: LD_VAR 0 3
28013: PPUSH
28014: CALL_OW 12
28018: ARRAY
28019: ST_TO_ADDR
// if Crawls ( un ) then
28020: LD_VAR 0 2
28024: PPUSH
28025: CALL_OW 318
28029: IFFALSE 28040
// ComWalk ( un ) ;
28031: LD_VAR 0 2
28035: PPUSH
28036: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28040: LD_VAR 0 2
28044: PPUSH
28045: LD_INT 9
28047: PPUSH
28048: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28052: LD_INT 28
28054: PPUSH
28055: LD_OWVAR 2
28059: PPUSH
28060: LD_INT 2
28062: PPUSH
28063: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28067: LD_INT 29
28069: PPUSH
28070: LD_OWVAR 2
28074: PPUSH
28075: LD_INT 2
28077: PPUSH
28078: CALL_OW 322
// end ;
28082: PPOPN 3
28084: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28085: LD_EXP 54
28089: PUSH
28090: LD_EXP 97
28094: AND
28095: IFFALSE 28206
28097: GO 28099
28099: DISABLE
28100: LD_INT 0
28102: PPUSH
28103: PPUSH
28104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28105: LD_ADDR_VAR 0 3
28109: PUSH
28110: LD_INT 22
28112: PUSH
28113: LD_OWVAR 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 25
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PPUSH
28136: CALL_OW 69
28140: ST_TO_ADDR
// if not tmp then
28141: LD_VAR 0 3
28145: NOT
28146: IFFALSE 28150
// exit ;
28148: GO 28206
// un := tmp [ rand ( 1 , tmp ) ] ;
28150: LD_ADDR_VAR 0 2
28154: PUSH
28155: LD_VAR 0 3
28159: PUSH
28160: LD_INT 1
28162: PPUSH
28163: LD_VAR 0 3
28167: PPUSH
28168: CALL_OW 12
28172: ARRAY
28173: ST_TO_ADDR
// if Crawls ( un ) then
28174: LD_VAR 0 2
28178: PPUSH
28179: CALL_OW 318
28183: IFFALSE 28194
// ComWalk ( un ) ;
28185: LD_VAR 0 2
28189: PPUSH
28190: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_INT 8
28201: PPUSH
28202: CALL_OW 336
// end ;
28206: PPOPN 3
28208: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28209: LD_EXP 54
28213: PUSH
28214: LD_EXP 98
28218: AND
28219: IFFALSE 28363
28221: GO 28223
28223: DISABLE
28224: LD_INT 0
28226: PPUSH
28227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28228: LD_ADDR_VAR 0 2
28232: PUSH
28233: LD_INT 22
28235: PUSH
28236: LD_OWVAR 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 21
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: LD_INT 34
28260: PUSH
28261: LD_INT 12
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 34
28270: PUSH
28271: LD_INT 51
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 34
28280: PUSH
28281: LD_INT 32
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: LIST
28298: PPUSH
28299: CALL_OW 69
28303: ST_TO_ADDR
// if not tmp then
28304: LD_VAR 0 2
28308: NOT
28309: IFFALSE 28313
// exit ;
28311: GO 28363
// for i in tmp do
28313: LD_ADDR_VAR 0 1
28317: PUSH
28318: LD_VAR 0 2
28322: PUSH
28323: FOR_IN
28324: IFFALSE 28361
// if GetCargo ( i , mat_artifact ) = 0 then
28326: LD_VAR 0 1
28330: PPUSH
28331: LD_INT 4
28333: PPUSH
28334: CALL_OW 289
28338: PUSH
28339: LD_INT 0
28341: EQUAL
28342: IFFALSE 28359
// SetCargo ( i , mat_siberit , 100 ) ;
28344: LD_VAR 0 1
28348: PPUSH
28349: LD_INT 3
28351: PPUSH
28352: LD_INT 100
28354: PPUSH
28355: CALL_OW 290
28359: GO 28323
28361: POP
28362: POP
// end ;
28363: PPOPN 2
28365: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28366: LD_EXP 54
28370: PUSH
28371: LD_EXP 99
28375: AND
28376: IFFALSE 28559
28378: GO 28380
28380: DISABLE
28381: LD_INT 0
28383: PPUSH
28384: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_INT 22
28392: PUSH
28393: LD_OWVAR 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PPUSH
28402: CALL_OW 69
28406: ST_TO_ADDR
// if not tmp then
28407: LD_VAR 0 2
28411: NOT
28412: IFFALSE 28416
// exit ;
28414: GO 28559
// for i := 1 to 2 do
28416: LD_ADDR_VAR 0 1
28420: PUSH
28421: DOUBLE
28422: LD_INT 1
28424: DEC
28425: ST_TO_ADDR
28426: LD_INT 2
28428: PUSH
28429: FOR_TO
28430: IFFALSE 28557
// begin uc_side := your_side ;
28432: LD_ADDR_OWVAR 20
28436: PUSH
28437: LD_OWVAR 2
28441: ST_TO_ADDR
// uc_nation := nation_american ;
28442: LD_ADDR_OWVAR 21
28446: PUSH
28447: LD_INT 1
28449: ST_TO_ADDR
// vc_chassis := us_morphling ;
28450: LD_ADDR_OWVAR 37
28454: PUSH
28455: LD_INT 5
28457: ST_TO_ADDR
// vc_engine := engine_siberite ;
28458: LD_ADDR_OWVAR 39
28462: PUSH
28463: LD_INT 3
28465: ST_TO_ADDR
// vc_control := control_computer ;
28466: LD_ADDR_OWVAR 38
28470: PUSH
28471: LD_INT 3
28473: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28474: LD_ADDR_OWVAR 40
28478: PUSH
28479: LD_INT 10
28481: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28482: LD_VAR 0 2
28486: PUSH
28487: LD_INT 1
28489: ARRAY
28490: PPUSH
28491: CALL_OW 310
28495: NOT
28496: IFFALSE 28543
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28498: CALL_OW 45
28502: PPUSH
28503: LD_VAR 0 2
28507: PUSH
28508: LD_INT 1
28510: ARRAY
28511: PPUSH
28512: CALL_OW 250
28516: PPUSH
28517: LD_VAR 0 2
28521: PUSH
28522: LD_INT 1
28524: ARRAY
28525: PPUSH
28526: CALL_OW 251
28530: PPUSH
28531: LD_INT 12
28533: PPUSH
28534: LD_INT 1
28536: PPUSH
28537: CALL_OW 50
28541: GO 28555
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28543: CALL_OW 45
28547: PPUSH
28548: LD_INT 1
28550: PPUSH
28551: CALL_OW 51
// end ;
28555: GO 28429
28557: POP
28558: POP
// end ;
28559: PPOPN 2
28561: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28562: LD_EXP 54
28566: PUSH
28567: LD_EXP 100
28571: AND
28572: IFFALSE 28794
28574: GO 28576
28576: DISABLE
28577: LD_INT 0
28579: PPUSH
28580: PPUSH
28581: PPUSH
28582: PPUSH
28583: PPUSH
28584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28585: LD_ADDR_VAR 0 6
28589: PUSH
28590: LD_INT 22
28592: PUSH
28593: LD_OWVAR 2
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 21
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: LD_INT 23
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: LIST
28633: PPUSH
28634: CALL_OW 69
28638: ST_TO_ADDR
// if not tmp then
28639: LD_VAR 0 6
28643: NOT
28644: IFFALSE 28648
// exit ;
28646: GO 28794
// s1 := rand ( 1 , 4 ) ;
28648: LD_ADDR_VAR 0 2
28652: PUSH
28653: LD_INT 1
28655: PPUSH
28656: LD_INT 4
28658: PPUSH
28659: CALL_OW 12
28663: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28664: LD_ADDR_VAR 0 4
28668: PUSH
28669: LD_VAR 0 6
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: PPUSH
28678: LD_VAR 0 2
28682: PPUSH
28683: CALL_OW 259
28687: ST_TO_ADDR
// if s1 = 1 then
28688: LD_VAR 0 2
28692: PUSH
28693: LD_INT 1
28695: EQUAL
28696: IFFALSE 28716
// s2 := rand ( 2 , 4 ) else
28698: LD_ADDR_VAR 0 3
28702: PUSH
28703: LD_INT 2
28705: PPUSH
28706: LD_INT 4
28708: PPUSH
28709: CALL_OW 12
28713: ST_TO_ADDR
28714: GO 28724
// s2 := 1 ;
28716: LD_ADDR_VAR 0 3
28720: PUSH
28721: LD_INT 1
28723: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28724: LD_ADDR_VAR 0 5
28728: PUSH
28729: LD_VAR 0 6
28733: PUSH
28734: LD_INT 1
28736: ARRAY
28737: PPUSH
28738: LD_VAR 0 3
28742: PPUSH
28743: CALL_OW 259
28747: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28748: LD_VAR 0 6
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: PPUSH
28757: LD_VAR 0 2
28761: PPUSH
28762: LD_VAR 0 5
28766: PPUSH
28767: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28771: LD_VAR 0 6
28775: PUSH
28776: LD_INT 1
28778: ARRAY
28779: PPUSH
28780: LD_VAR 0 3
28784: PPUSH
28785: LD_VAR 0 4
28789: PPUSH
28790: CALL_OW 237
// end ;
28794: PPOPN 6
28796: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28797: LD_EXP 54
28801: PUSH
28802: LD_EXP 101
28806: AND
28807: IFFALSE 28886
28809: GO 28811
28811: DISABLE
28812: LD_INT 0
28814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28815: LD_ADDR_VAR 0 1
28819: PUSH
28820: LD_INT 22
28822: PUSH
28823: LD_OWVAR 2
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 30
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PPUSH
28846: CALL_OW 69
28850: ST_TO_ADDR
// if not tmp then
28851: LD_VAR 0 1
28855: NOT
28856: IFFALSE 28860
// exit ;
28858: GO 28886
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28860: LD_VAR 0 1
28864: PUSH
28865: LD_INT 1
28867: PPUSH
28868: LD_VAR 0 1
28872: PPUSH
28873: CALL_OW 12
28877: ARRAY
28878: PPUSH
28879: LD_INT 1
28881: PPUSH
28882: CALL_OW 234
// end ;
28886: PPOPN 1
28888: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28889: LD_EXP 54
28893: PUSH
28894: LD_EXP 102
28898: AND
28899: IFFALSE 29011
28901: GO 28903
28903: DISABLE
28904: LD_INT 0
28906: PPUSH
28907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28908: LD_ADDR_VAR 0 2
28912: PUSH
28913: LD_INT 22
28915: PUSH
28916: LD_OWVAR 2
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: LD_INT 30
28930: PUSH
28931: LD_INT 27
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 30
28940: PUSH
28941: LD_INT 26
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 30
28950: PUSH
28951: LD_INT 28
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PPUSH
28968: CALL_OW 69
28972: ST_TO_ADDR
// if not tmp then
28973: LD_VAR 0 2
28977: NOT
28978: IFFALSE 28982
// exit ;
28980: GO 29011
// for i in tmp do
28982: LD_ADDR_VAR 0 1
28986: PUSH
28987: LD_VAR 0 2
28991: PUSH
28992: FOR_IN
28993: IFFALSE 29009
// SetLives ( i , 1 ) ;
28995: LD_VAR 0 1
28999: PPUSH
29000: LD_INT 1
29002: PPUSH
29003: CALL_OW 234
29007: GO 28992
29009: POP
29010: POP
// end ;
29011: PPOPN 2
29013: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29014: LD_EXP 54
29018: PUSH
29019: LD_EXP 103
29023: AND
29024: IFFALSE 29311
29026: GO 29028
29028: DISABLE
29029: LD_INT 0
29031: PPUSH
29032: PPUSH
29033: PPUSH
// begin i := rand ( 1 , 7 ) ;
29034: LD_ADDR_VAR 0 1
29038: PUSH
29039: LD_INT 1
29041: PPUSH
29042: LD_INT 7
29044: PPUSH
29045: CALL_OW 12
29049: ST_TO_ADDR
// case i of 1 :
29050: LD_VAR 0 1
29054: PUSH
29055: LD_INT 1
29057: DOUBLE
29058: EQUAL
29059: IFTRUE 29063
29061: GO 29073
29063: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29064: LD_STRING earthquake(getX(game), 0, 32)
29066: PPUSH
29067: CALL_OW 559
29071: GO 29311
29073: LD_INT 2
29075: DOUBLE
29076: EQUAL
29077: IFTRUE 29081
29079: GO 29095
29081: POP
// begin ToLua ( displayStucuk(); ) ;
29082: LD_STRING displayStucuk();
29084: PPUSH
29085: CALL_OW 559
// ResetFog ;
29089: CALL_OW 335
// end ; 3 :
29093: GO 29311
29095: LD_INT 3
29097: DOUBLE
29098: EQUAL
29099: IFTRUE 29103
29101: GO 29207
29103: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29104: LD_ADDR_VAR 0 2
29108: PUSH
29109: LD_INT 22
29111: PUSH
29112: LD_OWVAR 2
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 25
29123: PUSH
29124: LD_INT 1
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PPUSH
29135: CALL_OW 69
29139: ST_TO_ADDR
// if not tmp then
29140: LD_VAR 0 2
29144: NOT
29145: IFFALSE 29149
// exit ;
29147: GO 29311
// un := tmp [ rand ( 1 , tmp ) ] ;
29149: LD_ADDR_VAR 0 3
29153: PUSH
29154: LD_VAR 0 2
29158: PUSH
29159: LD_INT 1
29161: PPUSH
29162: LD_VAR 0 2
29166: PPUSH
29167: CALL_OW 12
29171: ARRAY
29172: ST_TO_ADDR
// if Crawls ( un ) then
29173: LD_VAR 0 3
29177: PPUSH
29178: CALL_OW 318
29182: IFFALSE 29193
// ComWalk ( un ) ;
29184: LD_VAR 0 3
29188: PPUSH
29189: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29193: LD_VAR 0 3
29197: PPUSH
29198: LD_INT 8
29200: PPUSH
29201: CALL_OW 336
// end ; 4 :
29205: GO 29311
29207: LD_INT 4
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29215
29213: GO 29289
29215: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29216: LD_ADDR_VAR 0 2
29220: PUSH
29221: LD_INT 22
29223: PUSH
29224: LD_OWVAR 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 29
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PPUSH
29247: CALL_OW 69
29251: ST_TO_ADDR
// if not tmp then
29252: LD_VAR 0 2
29256: NOT
29257: IFFALSE 29261
// exit ;
29259: GO 29311
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29261: LD_VAR 0 2
29265: PUSH
29266: LD_INT 1
29268: ARRAY
29269: PPUSH
29270: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29274: LD_VAR 0 2
29278: PUSH
29279: LD_INT 1
29281: ARRAY
29282: PPUSH
29283: CALL_OW 65
// end ; 5 .. 7 :
29287: GO 29311
29289: LD_INT 5
29291: DOUBLE
29292: GREATEREQUAL
29293: IFFALSE 29301
29295: LD_INT 7
29297: DOUBLE
29298: LESSEQUAL
29299: IFTRUE 29303
29301: GO 29310
29303: POP
// StreamSibBomb ; end ;
29304: CALL 25548 0 0
29308: GO 29311
29310: POP
// end ;
29311: PPOPN 3
29313: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29314: LD_EXP 54
29318: PUSH
29319: LD_EXP 104
29323: AND
29324: IFFALSE 29480
29326: GO 29328
29328: DISABLE
29329: LD_INT 0
29331: PPUSH
29332: PPUSH
29333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29334: LD_ADDR_VAR 0 2
29338: PUSH
29339: LD_INT 81
29341: PUSH
29342: LD_OWVAR 2
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 2
29353: PUSH
29354: LD_INT 21
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 21
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PPUSH
29383: CALL_OW 69
29387: ST_TO_ADDR
// if not tmp then
29388: LD_VAR 0 2
29392: NOT
29393: IFFALSE 29397
// exit ;
29395: GO 29480
// p := 0 ;
29397: LD_ADDR_VAR 0 3
29401: PUSH
29402: LD_INT 0
29404: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29405: LD_INT 35
29407: PPUSH
29408: CALL_OW 67
// p := p + 1 ;
29412: LD_ADDR_VAR 0 3
29416: PUSH
29417: LD_VAR 0 3
29421: PUSH
29422: LD_INT 1
29424: PLUS
29425: ST_TO_ADDR
// for i in tmp do
29426: LD_ADDR_VAR 0 1
29430: PUSH
29431: LD_VAR 0 2
29435: PUSH
29436: FOR_IN
29437: IFFALSE 29468
// if GetLives ( i ) < 1000 then
29439: LD_VAR 0 1
29443: PPUSH
29444: CALL_OW 256
29448: PUSH
29449: LD_INT 1000
29451: LESS
29452: IFFALSE 29466
// SetLives ( i , 1000 ) ;
29454: LD_VAR 0 1
29458: PPUSH
29459: LD_INT 1000
29461: PPUSH
29462: CALL_OW 234
29466: GO 29436
29468: POP
29469: POP
// until p > 20 ;
29470: LD_VAR 0 3
29474: PUSH
29475: LD_INT 20
29477: GREATER
29478: IFFALSE 29405
// end ;
29480: PPOPN 3
29482: END
// every 0 0$1 trigger StreamModeActive and sTime do
29483: LD_EXP 54
29487: PUSH
29488: LD_EXP 105
29492: AND
29493: IFFALSE 29528
29495: GO 29497
29497: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29498: LD_INT 28
29500: PPUSH
29501: LD_OWVAR 2
29505: PPUSH
29506: LD_INT 2
29508: PPUSH
29509: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29513: LD_INT 30
29515: PPUSH
29516: LD_OWVAR 2
29520: PPUSH
29521: LD_INT 2
29523: PPUSH
29524: CALL_OW 322
// end ;
29528: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29529: LD_EXP 54
29533: PUSH
29534: LD_EXP 106
29538: AND
29539: IFFALSE 29660
29541: GO 29543
29543: DISABLE
29544: LD_INT 0
29546: PPUSH
29547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29548: LD_ADDR_VAR 0 2
29552: PUSH
29553: LD_INT 22
29555: PUSH
29556: LD_OWVAR 2
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 21
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: LD_INT 23
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: PPUSH
29597: CALL_OW 69
29601: ST_TO_ADDR
// if not tmp then
29602: LD_VAR 0 2
29606: NOT
29607: IFFALSE 29611
// exit ;
29609: GO 29660
// for i in tmp do
29611: LD_ADDR_VAR 0 1
29615: PUSH
29616: LD_VAR 0 2
29620: PUSH
29621: FOR_IN
29622: IFFALSE 29658
// begin if Crawls ( i ) then
29624: LD_VAR 0 1
29628: PPUSH
29629: CALL_OW 318
29633: IFFALSE 29644
// ComWalk ( i ) ;
29635: LD_VAR 0 1
29639: PPUSH
29640: CALL_OW 138
// SetClass ( i , 2 ) ;
29644: LD_VAR 0 1
29648: PPUSH
29649: LD_INT 2
29651: PPUSH
29652: CALL_OW 336
// end ;
29656: GO 29621
29658: POP
29659: POP
// end ;
29660: PPOPN 2
29662: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29663: LD_EXP 54
29667: PUSH
29668: LD_EXP 107
29672: AND
29673: IFFALSE 29961
29675: GO 29677
29677: DISABLE
29678: LD_INT 0
29680: PPUSH
29681: PPUSH
29682: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29683: LD_OWVAR 2
29687: PPUSH
29688: LD_INT 9
29690: PPUSH
29691: LD_INT 1
29693: PPUSH
29694: LD_INT 1
29696: PPUSH
29697: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29701: LD_INT 9
29703: PPUSH
29704: LD_OWVAR 2
29708: PPUSH
29709: CALL_OW 343
// uc_side := 9 ;
29713: LD_ADDR_OWVAR 20
29717: PUSH
29718: LD_INT 9
29720: ST_TO_ADDR
// uc_nation := 2 ;
29721: LD_ADDR_OWVAR 21
29725: PUSH
29726: LD_INT 2
29728: ST_TO_ADDR
// hc_name := Dark Warrior ;
29729: LD_ADDR_OWVAR 26
29733: PUSH
29734: LD_STRING Dark Warrior
29736: ST_TO_ADDR
// hc_gallery :=  ;
29737: LD_ADDR_OWVAR 33
29741: PUSH
29742: LD_STRING 
29744: ST_TO_ADDR
// hc_noskilllimit := true ;
29745: LD_ADDR_OWVAR 76
29749: PUSH
29750: LD_INT 1
29752: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29753: LD_ADDR_OWVAR 31
29757: PUSH
29758: LD_INT 30
29760: PUSH
29761: LD_INT 30
29763: PUSH
29764: LD_INT 30
29766: PUSH
29767: LD_INT 30
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: ST_TO_ADDR
// un := CreateHuman ;
29776: LD_ADDR_VAR 0 3
29780: PUSH
29781: CALL_OW 44
29785: ST_TO_ADDR
// hc_noskilllimit := false ;
29786: LD_ADDR_OWVAR 76
29790: PUSH
29791: LD_INT 0
29793: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29794: LD_VAR 0 3
29798: PPUSH
29799: LD_INT 1
29801: PPUSH
29802: CALL_OW 51
// ToLua ( playRanger() ) ;
29806: LD_STRING playRanger()
29808: PPUSH
29809: CALL_OW 559
// p := 0 ;
29813: LD_ADDR_VAR 0 2
29817: PUSH
29818: LD_INT 0
29820: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29821: LD_INT 35
29823: PPUSH
29824: CALL_OW 67
// p := p + 1 ;
29828: LD_ADDR_VAR 0 2
29832: PUSH
29833: LD_VAR 0 2
29837: PUSH
29838: LD_INT 1
29840: PLUS
29841: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29842: LD_VAR 0 3
29846: PPUSH
29847: CALL_OW 256
29851: PUSH
29852: LD_INT 1000
29854: LESS
29855: IFFALSE 29869
// SetLives ( un , 1000 ) ;
29857: LD_VAR 0 3
29861: PPUSH
29862: LD_INT 1000
29864: PPUSH
29865: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29869: LD_VAR 0 3
29873: PPUSH
29874: LD_INT 81
29876: PUSH
29877: LD_OWVAR 2
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 91
29888: PUSH
29889: LD_VAR 0 3
29893: PUSH
29894: LD_INT 30
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PPUSH
29906: CALL_OW 69
29910: PPUSH
29911: LD_VAR 0 3
29915: PPUSH
29916: CALL_OW 74
29920: PPUSH
29921: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29925: LD_VAR 0 2
29929: PUSH
29930: LD_INT 80
29932: GREATER
29933: PUSH
29934: LD_VAR 0 3
29938: PPUSH
29939: CALL_OW 301
29943: OR
29944: IFFALSE 29821
// if un then
29946: LD_VAR 0 3
29950: IFFALSE 29961
// RemoveUnit ( un ) ;
29952: LD_VAR 0 3
29956: PPUSH
29957: CALL_OW 64
// end ;
29961: PPOPN 3
29963: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29964: LD_EXP 108
29968: IFFALSE 30084
29970: GO 29972
29972: DISABLE
29973: LD_INT 0
29975: PPUSH
29976: PPUSH
29977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29978: LD_ADDR_VAR 0 2
29982: PUSH
29983: LD_INT 81
29985: PUSH
29986: LD_OWVAR 2
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 21
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PPUSH
30009: CALL_OW 69
30013: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30014: LD_STRING playComputer()
30016: PPUSH
30017: CALL_OW 559
// if not tmp then
30021: LD_VAR 0 2
30025: NOT
30026: IFFALSE 30030
// exit ;
30028: GO 30084
// for i in tmp do
30030: LD_ADDR_VAR 0 1
30034: PUSH
30035: LD_VAR 0 2
30039: PUSH
30040: FOR_IN
30041: IFFALSE 30082
// for j := 1 to 4 do
30043: LD_ADDR_VAR 0 3
30047: PUSH
30048: DOUBLE
30049: LD_INT 1
30051: DEC
30052: ST_TO_ADDR
30053: LD_INT 4
30055: PUSH
30056: FOR_TO
30057: IFFALSE 30078
// SetSkill ( i , j , 10 ) ;
30059: LD_VAR 0 1
30063: PPUSH
30064: LD_VAR 0 3
30068: PPUSH
30069: LD_INT 10
30071: PPUSH
30072: CALL_OW 237
30076: GO 30056
30078: POP
30079: POP
30080: GO 30040
30082: POP
30083: POP
// end ;
30084: PPOPN 3
30086: END
// every 0 0$1 trigger s30 do var i , tmp ;
30087: LD_EXP 109
30091: IFFALSE 30160
30093: GO 30095
30095: DISABLE
30096: LD_INT 0
30098: PPUSH
30099: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30100: LD_ADDR_VAR 0 2
30104: PUSH
30105: LD_INT 22
30107: PUSH
30108: LD_OWVAR 2
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PPUSH
30117: CALL_OW 69
30121: ST_TO_ADDR
// if not tmp then
30122: LD_VAR 0 2
30126: NOT
30127: IFFALSE 30131
// exit ;
30129: GO 30160
// for i in tmp do
30131: LD_ADDR_VAR 0 1
30135: PUSH
30136: LD_VAR 0 2
30140: PUSH
30141: FOR_IN
30142: IFFALSE 30158
// SetLives ( i , 300 ) ;
30144: LD_VAR 0 1
30148: PPUSH
30149: LD_INT 300
30151: PPUSH
30152: CALL_OW 234
30156: GO 30141
30158: POP
30159: POP
// end ;
30160: PPOPN 2
30162: END
// every 0 0$1 trigger s60 do var i , tmp ;
30163: LD_EXP 110
30167: IFFALSE 30236
30169: GO 30171
30171: DISABLE
30172: LD_INT 0
30174: PPUSH
30175: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30176: LD_ADDR_VAR 0 2
30180: PUSH
30181: LD_INT 22
30183: PUSH
30184: LD_OWVAR 2
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PPUSH
30193: CALL_OW 69
30197: ST_TO_ADDR
// if not tmp then
30198: LD_VAR 0 2
30202: NOT
30203: IFFALSE 30207
// exit ;
30205: GO 30236
// for i in tmp do
30207: LD_ADDR_VAR 0 1
30211: PUSH
30212: LD_VAR 0 2
30216: PUSH
30217: FOR_IN
30218: IFFALSE 30234
// SetLives ( i , 600 ) ;
30220: LD_VAR 0 1
30224: PPUSH
30225: LD_INT 600
30227: PPUSH
30228: CALL_OW 234
30232: GO 30217
30234: POP
30235: POP
// end ;
30236: PPOPN 2
30238: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30239: LD_INT 0
30241: PPUSH
// case cmd of 301 :
30242: LD_VAR 0 1
30246: PUSH
30247: LD_INT 301
30249: DOUBLE
30250: EQUAL
30251: IFTRUE 30255
30253: GO 30287
30255: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30256: LD_VAR 0 6
30260: PPUSH
30261: LD_VAR 0 7
30265: PPUSH
30266: LD_VAR 0 8
30270: PPUSH
30271: LD_VAR 0 4
30275: PPUSH
30276: LD_VAR 0 5
30280: PPUSH
30281: CALL 31496 0 5
30285: GO 30408
30287: LD_INT 302
30289: DOUBLE
30290: EQUAL
30291: IFTRUE 30295
30293: GO 30332
30295: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30296: LD_VAR 0 6
30300: PPUSH
30301: LD_VAR 0 7
30305: PPUSH
30306: LD_VAR 0 8
30310: PPUSH
30311: LD_VAR 0 9
30315: PPUSH
30316: LD_VAR 0 4
30320: PPUSH
30321: LD_VAR 0 5
30325: PPUSH
30326: CALL 31587 0 6
30330: GO 30408
30332: LD_INT 303
30334: DOUBLE
30335: EQUAL
30336: IFTRUE 30340
30338: GO 30377
30340: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30341: LD_VAR 0 6
30345: PPUSH
30346: LD_VAR 0 7
30350: PPUSH
30351: LD_VAR 0 8
30355: PPUSH
30356: LD_VAR 0 9
30360: PPUSH
30361: LD_VAR 0 4
30365: PPUSH
30366: LD_VAR 0 5
30370: PPUSH
30371: CALL 30413 0 6
30375: GO 30408
30377: LD_INT 304
30379: DOUBLE
30380: EQUAL
30381: IFTRUE 30385
30383: GO 30407
30385: POP
// hHackTeleport ( unit , x , y ) ; end ;
30386: LD_VAR 0 2
30390: PPUSH
30391: LD_VAR 0 4
30395: PPUSH
30396: LD_VAR 0 5
30400: PPUSH
30401: CALL 32180 0 3
30405: GO 30408
30407: POP
// end ;
30408: LD_VAR 0 12
30412: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30413: LD_INT 0
30415: PPUSH
30416: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30417: LD_VAR 0 1
30421: PUSH
30422: LD_INT 1
30424: LESS
30425: PUSH
30426: LD_VAR 0 1
30430: PUSH
30431: LD_INT 3
30433: GREATER
30434: OR
30435: PUSH
30436: LD_VAR 0 5
30440: PPUSH
30441: LD_VAR 0 6
30445: PPUSH
30446: CALL_OW 428
30450: OR
30451: IFFALSE 30455
// exit ;
30453: GO 31183
// uc_side := your_side ;
30455: LD_ADDR_OWVAR 20
30459: PUSH
30460: LD_OWVAR 2
30464: ST_TO_ADDR
// uc_nation := nation ;
30465: LD_ADDR_OWVAR 21
30469: PUSH
30470: LD_VAR 0 1
30474: ST_TO_ADDR
// bc_level = 1 ;
30475: LD_ADDR_OWVAR 43
30479: PUSH
30480: LD_INT 1
30482: ST_TO_ADDR
// case btype of 1 :
30483: LD_VAR 0 2
30487: PUSH
30488: LD_INT 1
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30507
30496: POP
// bc_type := b_depot ; 2 :
30497: LD_ADDR_OWVAR 42
30501: PUSH
30502: LD_INT 0
30504: ST_TO_ADDR
30505: GO 31127
30507: LD_INT 2
30509: DOUBLE
30510: EQUAL
30511: IFTRUE 30515
30513: GO 30526
30515: POP
// bc_type := b_warehouse ; 3 :
30516: LD_ADDR_OWVAR 42
30520: PUSH
30521: LD_INT 1
30523: ST_TO_ADDR
30524: GO 31127
30526: LD_INT 3
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30545
30534: POP
// bc_type := b_lab ; 4 .. 9 :
30535: LD_ADDR_OWVAR 42
30539: PUSH
30540: LD_INT 6
30542: ST_TO_ADDR
30543: GO 31127
30545: LD_INT 4
30547: DOUBLE
30548: GREATEREQUAL
30549: IFFALSE 30557
30551: LD_INT 9
30553: DOUBLE
30554: LESSEQUAL
30555: IFTRUE 30559
30557: GO 30619
30559: POP
// begin bc_type := b_lab_half ;
30560: LD_ADDR_OWVAR 42
30564: PUSH
30565: LD_INT 7
30567: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30568: LD_ADDR_OWVAR 44
30572: PUSH
30573: LD_INT 10
30575: PUSH
30576: LD_INT 11
30578: PUSH
30579: LD_INT 12
30581: PUSH
30582: LD_INT 15
30584: PUSH
30585: LD_INT 14
30587: PUSH
30588: LD_INT 13
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: PUSH
30599: LD_VAR 0 2
30603: PUSH
30604: LD_INT 3
30606: MINUS
30607: ARRAY
30608: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30609: LD_ADDR_OWVAR 45
30613: PUSH
30614: LD_INT 9
30616: ST_TO_ADDR
// end ; 10 .. 13 :
30617: GO 31127
30619: LD_INT 10
30621: DOUBLE
30622: GREATEREQUAL
30623: IFFALSE 30631
30625: LD_INT 13
30627: DOUBLE
30628: LESSEQUAL
30629: IFTRUE 30633
30631: GO 30710
30633: POP
// begin bc_type := b_lab_full ;
30634: LD_ADDR_OWVAR 42
30638: PUSH
30639: LD_INT 8
30641: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30642: LD_ADDR_OWVAR 44
30646: PUSH
30647: LD_INT 10
30649: PUSH
30650: LD_INT 12
30652: PUSH
30653: LD_INT 14
30655: PUSH
30656: LD_INT 13
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: PUSH
30665: LD_VAR 0 2
30669: PUSH
30670: LD_INT 9
30672: MINUS
30673: ARRAY
30674: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30675: LD_ADDR_OWVAR 45
30679: PUSH
30680: LD_INT 11
30682: PUSH
30683: LD_INT 15
30685: PUSH
30686: LD_INT 12
30688: PUSH
30689: LD_INT 15
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: PUSH
30698: LD_VAR 0 2
30702: PUSH
30703: LD_INT 9
30705: MINUS
30706: ARRAY
30707: ST_TO_ADDR
// end ; 14 :
30708: GO 31127
30710: LD_INT 14
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30718
30716: GO 30729
30718: POP
// bc_type := b_workshop ; 15 :
30719: LD_ADDR_OWVAR 42
30723: PUSH
30724: LD_INT 2
30726: ST_TO_ADDR
30727: GO 31127
30729: LD_INT 15
30731: DOUBLE
30732: EQUAL
30733: IFTRUE 30737
30735: GO 30748
30737: POP
// bc_type := b_factory ; 16 :
30738: LD_ADDR_OWVAR 42
30742: PUSH
30743: LD_INT 3
30745: ST_TO_ADDR
30746: GO 31127
30748: LD_INT 16
30750: DOUBLE
30751: EQUAL
30752: IFTRUE 30756
30754: GO 30767
30756: POP
// bc_type := b_ext_gun ; 17 :
30757: LD_ADDR_OWVAR 42
30761: PUSH
30762: LD_INT 17
30764: ST_TO_ADDR
30765: GO 31127
30767: LD_INT 17
30769: DOUBLE
30770: EQUAL
30771: IFTRUE 30775
30773: GO 30803
30775: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30776: LD_ADDR_OWVAR 42
30780: PUSH
30781: LD_INT 19
30783: PUSH
30784: LD_INT 23
30786: PUSH
30787: LD_INT 19
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: PUSH
30795: LD_VAR 0 1
30799: ARRAY
30800: ST_TO_ADDR
30801: GO 31127
30803: LD_INT 18
30805: DOUBLE
30806: EQUAL
30807: IFTRUE 30811
30809: GO 30822
30811: POP
// bc_type := b_ext_radar ; 19 :
30812: LD_ADDR_OWVAR 42
30816: PUSH
30817: LD_INT 20
30819: ST_TO_ADDR
30820: GO 31127
30822: LD_INT 19
30824: DOUBLE
30825: EQUAL
30826: IFTRUE 30830
30828: GO 30841
30830: POP
// bc_type := b_ext_radio ; 20 :
30831: LD_ADDR_OWVAR 42
30835: PUSH
30836: LD_INT 22
30838: ST_TO_ADDR
30839: GO 31127
30841: LD_INT 20
30843: DOUBLE
30844: EQUAL
30845: IFTRUE 30849
30847: GO 30860
30849: POP
// bc_type := b_ext_siberium ; 21 :
30850: LD_ADDR_OWVAR 42
30854: PUSH
30855: LD_INT 21
30857: ST_TO_ADDR
30858: GO 31127
30860: LD_INT 21
30862: DOUBLE
30863: EQUAL
30864: IFTRUE 30868
30866: GO 30879
30868: POP
// bc_type := b_ext_computer ; 22 :
30869: LD_ADDR_OWVAR 42
30873: PUSH
30874: LD_INT 24
30876: ST_TO_ADDR
30877: GO 31127
30879: LD_INT 22
30881: DOUBLE
30882: EQUAL
30883: IFTRUE 30887
30885: GO 30898
30887: POP
// bc_type := b_ext_track ; 23 :
30888: LD_ADDR_OWVAR 42
30892: PUSH
30893: LD_INT 16
30895: ST_TO_ADDR
30896: GO 31127
30898: LD_INT 23
30900: DOUBLE
30901: EQUAL
30902: IFTRUE 30906
30904: GO 30917
30906: POP
// bc_type := b_ext_laser ; 24 :
30907: LD_ADDR_OWVAR 42
30911: PUSH
30912: LD_INT 25
30914: ST_TO_ADDR
30915: GO 31127
30917: LD_INT 24
30919: DOUBLE
30920: EQUAL
30921: IFTRUE 30925
30923: GO 30936
30925: POP
// bc_type := b_control_tower ; 25 :
30926: LD_ADDR_OWVAR 42
30930: PUSH
30931: LD_INT 36
30933: ST_TO_ADDR
30934: GO 31127
30936: LD_INT 25
30938: DOUBLE
30939: EQUAL
30940: IFTRUE 30944
30942: GO 30955
30944: POP
// bc_type := b_breastwork ; 26 :
30945: LD_ADDR_OWVAR 42
30949: PUSH
30950: LD_INT 31
30952: ST_TO_ADDR
30953: GO 31127
30955: LD_INT 26
30957: DOUBLE
30958: EQUAL
30959: IFTRUE 30963
30961: GO 30974
30963: POP
// bc_type := b_bunker ; 27 :
30964: LD_ADDR_OWVAR 42
30968: PUSH
30969: LD_INT 32
30971: ST_TO_ADDR
30972: GO 31127
30974: LD_INT 27
30976: DOUBLE
30977: EQUAL
30978: IFTRUE 30982
30980: GO 30993
30982: POP
// bc_type := b_turret ; 28 :
30983: LD_ADDR_OWVAR 42
30987: PUSH
30988: LD_INT 33
30990: ST_TO_ADDR
30991: GO 31127
30993: LD_INT 28
30995: DOUBLE
30996: EQUAL
30997: IFTRUE 31001
30999: GO 31012
31001: POP
// bc_type := b_armoury ; 29 :
31002: LD_ADDR_OWVAR 42
31006: PUSH
31007: LD_INT 4
31009: ST_TO_ADDR
31010: GO 31127
31012: LD_INT 29
31014: DOUBLE
31015: EQUAL
31016: IFTRUE 31020
31018: GO 31031
31020: POP
// bc_type := b_barracks ; 30 :
31021: LD_ADDR_OWVAR 42
31025: PUSH
31026: LD_INT 5
31028: ST_TO_ADDR
31029: GO 31127
31031: LD_INT 30
31033: DOUBLE
31034: EQUAL
31035: IFTRUE 31039
31037: GO 31050
31039: POP
// bc_type := b_solar_power ; 31 :
31040: LD_ADDR_OWVAR 42
31044: PUSH
31045: LD_INT 27
31047: ST_TO_ADDR
31048: GO 31127
31050: LD_INT 31
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31069
31058: POP
// bc_type := b_oil_power ; 32 :
31059: LD_ADDR_OWVAR 42
31063: PUSH
31064: LD_INT 26
31066: ST_TO_ADDR
31067: GO 31127
31069: LD_INT 32
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31088
31077: POP
// bc_type := b_siberite_power ; 33 :
31078: LD_ADDR_OWVAR 42
31082: PUSH
31083: LD_INT 28
31085: ST_TO_ADDR
31086: GO 31127
31088: LD_INT 33
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31107
31096: POP
// bc_type := b_oil_mine ; 34 :
31097: LD_ADDR_OWVAR 42
31101: PUSH
31102: LD_INT 29
31104: ST_TO_ADDR
31105: GO 31127
31107: LD_INT 34
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31115
31113: GO 31126
31115: POP
// bc_type := b_siberite_mine ; end ;
31116: LD_ADDR_OWVAR 42
31120: PUSH
31121: LD_INT 30
31123: ST_TO_ADDR
31124: GO 31127
31126: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31127: LD_ADDR_VAR 0 8
31131: PUSH
31132: LD_VAR 0 5
31136: PPUSH
31137: LD_VAR 0 6
31141: PPUSH
31142: LD_VAR 0 3
31146: PPUSH
31147: CALL_OW 47
31151: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31152: LD_OWVAR 42
31156: PUSH
31157: LD_INT 32
31159: PUSH
31160: LD_INT 33
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: IN
31167: IFFALSE 31183
// PlaceWeaponTurret ( b , weapon ) ;
31169: LD_VAR 0 8
31173: PPUSH
31174: LD_VAR 0 4
31178: PPUSH
31179: CALL_OW 431
// end ;
31183: LD_VAR 0 7
31187: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31188: LD_INT 0
31190: PPUSH
31191: PPUSH
31192: PPUSH
31193: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31194: LD_ADDR_VAR 0 4
31198: PUSH
31199: LD_INT 22
31201: PUSH
31202: LD_OWVAR 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: LD_INT 30
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 30
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PPUSH
31243: CALL_OW 69
31247: ST_TO_ADDR
// if not tmp then
31248: LD_VAR 0 4
31252: NOT
31253: IFFALSE 31257
// exit ;
31255: GO 31316
// for i in tmp do
31257: LD_ADDR_VAR 0 2
31261: PUSH
31262: LD_VAR 0 4
31266: PUSH
31267: FOR_IN
31268: IFFALSE 31314
// for j = 1 to 3 do
31270: LD_ADDR_VAR 0 3
31274: PUSH
31275: DOUBLE
31276: LD_INT 1
31278: DEC
31279: ST_TO_ADDR
31280: LD_INT 3
31282: PUSH
31283: FOR_TO
31284: IFFALSE 31310
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31286: LD_VAR 0 2
31290: PPUSH
31291: CALL_OW 274
31295: PPUSH
31296: LD_VAR 0 3
31300: PPUSH
31301: LD_INT 99999
31303: PPUSH
31304: CALL_OW 277
31308: GO 31283
31310: POP
31311: POP
31312: GO 31267
31314: POP
31315: POP
// end ;
31316: LD_VAR 0 1
31320: RET
// export function hHackSetLevel10 ; var i , j ; begin
31321: LD_INT 0
31323: PPUSH
31324: PPUSH
31325: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31326: LD_ADDR_VAR 0 2
31330: PUSH
31331: LD_INT 21
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PPUSH
31341: CALL_OW 69
31345: PUSH
31346: FOR_IN
31347: IFFALSE 31399
// if IsSelected ( i ) then
31349: LD_VAR 0 2
31353: PPUSH
31354: CALL_OW 306
31358: IFFALSE 31397
// begin for j := 1 to 4 do
31360: LD_ADDR_VAR 0 3
31364: PUSH
31365: DOUBLE
31366: LD_INT 1
31368: DEC
31369: ST_TO_ADDR
31370: LD_INT 4
31372: PUSH
31373: FOR_TO
31374: IFFALSE 31395
// SetSkill ( i , j , 10 ) ;
31376: LD_VAR 0 2
31380: PPUSH
31381: LD_VAR 0 3
31385: PPUSH
31386: LD_INT 10
31388: PPUSH
31389: CALL_OW 237
31393: GO 31373
31395: POP
31396: POP
// end ;
31397: GO 31346
31399: POP
31400: POP
// end ;
31401: LD_VAR 0 1
31405: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31406: LD_INT 0
31408: PPUSH
31409: PPUSH
31410: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31411: LD_ADDR_VAR 0 2
31415: PUSH
31416: LD_INT 22
31418: PUSH
31419: LD_OWVAR 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 21
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PPUSH
31442: CALL_OW 69
31446: PUSH
31447: FOR_IN
31448: IFFALSE 31489
// begin for j := 1 to 4 do
31450: LD_ADDR_VAR 0 3
31454: PUSH
31455: DOUBLE
31456: LD_INT 1
31458: DEC
31459: ST_TO_ADDR
31460: LD_INT 4
31462: PUSH
31463: FOR_TO
31464: IFFALSE 31485
// SetSkill ( i , j , 10 ) ;
31466: LD_VAR 0 2
31470: PPUSH
31471: LD_VAR 0 3
31475: PPUSH
31476: LD_INT 10
31478: PPUSH
31479: CALL_OW 237
31483: GO 31463
31485: POP
31486: POP
// end ;
31487: GO 31447
31489: POP
31490: POP
// end ;
31491: LD_VAR 0 1
31495: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31496: LD_INT 0
31498: PPUSH
// uc_side := your_side ;
31499: LD_ADDR_OWVAR 20
31503: PUSH
31504: LD_OWVAR 2
31508: ST_TO_ADDR
// uc_nation := nation ;
31509: LD_ADDR_OWVAR 21
31513: PUSH
31514: LD_VAR 0 1
31518: ST_TO_ADDR
// InitHc ;
31519: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31523: LD_INT 0
31525: PPUSH
31526: LD_VAR 0 2
31530: PPUSH
31531: LD_VAR 0 3
31535: PPUSH
31536: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31540: LD_VAR 0 4
31544: PPUSH
31545: LD_VAR 0 5
31549: PPUSH
31550: CALL_OW 428
31554: PUSH
31555: LD_INT 0
31557: EQUAL
31558: IFFALSE 31582
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31560: CALL_OW 44
31564: PPUSH
31565: LD_VAR 0 4
31569: PPUSH
31570: LD_VAR 0 5
31574: PPUSH
31575: LD_INT 1
31577: PPUSH
31578: CALL_OW 48
// end ;
31582: LD_VAR 0 6
31586: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31587: LD_INT 0
31589: PPUSH
31590: PPUSH
// uc_side := your_side ;
31591: LD_ADDR_OWVAR 20
31595: PUSH
31596: LD_OWVAR 2
31600: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31601: LD_VAR 0 1
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: LD_INT 4
31617: PUSH
31618: LD_INT 5
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: IN
31628: IFFALSE 31640
// uc_nation := nation_american else
31630: LD_ADDR_OWVAR 21
31634: PUSH
31635: LD_INT 1
31637: ST_TO_ADDR
31638: GO 31683
// if chassis in [ 11 , 12 , 13 , 14 ] then
31640: LD_VAR 0 1
31644: PUSH
31645: LD_INT 11
31647: PUSH
31648: LD_INT 12
31650: PUSH
31651: LD_INT 13
31653: PUSH
31654: LD_INT 14
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: IN
31663: IFFALSE 31675
// uc_nation := nation_arabian else
31665: LD_ADDR_OWVAR 21
31669: PUSH
31670: LD_INT 2
31672: ST_TO_ADDR
31673: GO 31683
// uc_nation := nation_russian ;
31675: LD_ADDR_OWVAR 21
31679: PUSH
31680: LD_INT 3
31682: ST_TO_ADDR
// vc_chassis := chassis ;
31683: LD_ADDR_OWVAR 37
31687: PUSH
31688: LD_VAR 0 1
31692: ST_TO_ADDR
// vc_engine := engine ;
31693: LD_ADDR_OWVAR 39
31697: PUSH
31698: LD_VAR 0 2
31702: ST_TO_ADDR
// vc_control := control ;
31703: LD_ADDR_OWVAR 38
31707: PUSH
31708: LD_VAR 0 3
31712: ST_TO_ADDR
// vc_weapon := weapon ;
31713: LD_ADDR_OWVAR 40
31717: PUSH
31718: LD_VAR 0 4
31722: ST_TO_ADDR
// un := CreateVehicle ;
31723: LD_ADDR_VAR 0 8
31727: PUSH
31728: CALL_OW 45
31732: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31733: LD_VAR 0 8
31737: PPUSH
31738: LD_INT 0
31740: PPUSH
31741: LD_INT 5
31743: PPUSH
31744: CALL_OW 12
31748: PPUSH
31749: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31753: LD_VAR 0 8
31757: PPUSH
31758: LD_VAR 0 5
31762: PPUSH
31763: LD_VAR 0 6
31767: PPUSH
31768: LD_INT 1
31770: PPUSH
31771: CALL_OW 48
// end ;
31775: LD_VAR 0 7
31779: RET
// export hInvincible ; every 1 do
31780: GO 31782
31782: DISABLE
// hInvincible := [ ] ;
31783: LD_ADDR_EXP 111
31787: PUSH
31788: EMPTY
31789: ST_TO_ADDR
31790: END
// every 10 do var i ;
31791: GO 31793
31793: DISABLE
31794: LD_INT 0
31796: PPUSH
// begin enable ;
31797: ENABLE
// if not hInvincible then
31798: LD_EXP 111
31802: NOT
31803: IFFALSE 31807
// exit ;
31805: GO 31851
// for i in hInvincible do
31807: LD_ADDR_VAR 0 1
31811: PUSH
31812: LD_EXP 111
31816: PUSH
31817: FOR_IN
31818: IFFALSE 31849
// if GetLives ( i ) < 1000 then
31820: LD_VAR 0 1
31824: PPUSH
31825: CALL_OW 256
31829: PUSH
31830: LD_INT 1000
31832: LESS
31833: IFFALSE 31847
// SetLives ( i , 1000 ) ;
31835: LD_VAR 0 1
31839: PPUSH
31840: LD_INT 1000
31842: PPUSH
31843: CALL_OW 234
31847: GO 31817
31849: POP
31850: POP
// end ;
31851: PPOPN 1
31853: END
// export function hHackInvincible ; var i ; begin
31854: LD_INT 0
31856: PPUSH
31857: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31858: LD_ADDR_VAR 0 2
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: LD_INT 21
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 21
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: LIST
31890: PPUSH
31891: CALL_OW 69
31895: PUSH
31896: FOR_IN
31897: IFFALSE 31958
// if IsSelected ( i ) then
31899: LD_VAR 0 2
31903: PPUSH
31904: CALL_OW 306
31908: IFFALSE 31956
// begin if i in hInvincible then
31910: LD_VAR 0 2
31914: PUSH
31915: LD_EXP 111
31919: IN
31920: IFFALSE 31940
// hInvincible := hInvincible diff i else
31922: LD_ADDR_EXP 111
31926: PUSH
31927: LD_EXP 111
31931: PUSH
31932: LD_VAR 0 2
31936: DIFF
31937: ST_TO_ADDR
31938: GO 31956
// hInvincible := hInvincible union i ;
31940: LD_ADDR_EXP 111
31944: PUSH
31945: LD_EXP 111
31949: PUSH
31950: LD_VAR 0 2
31954: UNION
31955: ST_TO_ADDR
// end ;
31956: GO 31896
31958: POP
31959: POP
// end ;
31960: LD_VAR 0 1
31964: RET
// export function hHackInvisible ; var i , j ; begin
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
31969: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31970: LD_ADDR_VAR 0 2
31974: PUSH
31975: LD_INT 21
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PPUSH
31985: CALL_OW 69
31989: PUSH
31990: FOR_IN
31991: IFFALSE 32015
// if IsSelected ( i ) then
31993: LD_VAR 0 2
31997: PPUSH
31998: CALL_OW 306
32002: IFFALSE 32013
// ComForceInvisible ( i ) ;
32004: LD_VAR 0 2
32008: PPUSH
32009: CALL_OW 496
32013: GO 31990
32015: POP
32016: POP
// end ;
32017: LD_VAR 0 1
32021: RET
// export function hHackChangeYourSide ; begin
32022: LD_INT 0
32024: PPUSH
// if your_side = 8 then
32025: LD_OWVAR 2
32029: PUSH
32030: LD_INT 8
32032: EQUAL
32033: IFFALSE 32045
// your_side := 0 else
32035: LD_ADDR_OWVAR 2
32039: PUSH
32040: LD_INT 0
32042: ST_TO_ADDR
32043: GO 32059
// your_side := your_side + 1 ;
32045: LD_ADDR_OWVAR 2
32049: PUSH
32050: LD_OWVAR 2
32054: PUSH
32055: LD_INT 1
32057: PLUS
32058: ST_TO_ADDR
// end ;
32059: LD_VAR 0 1
32063: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32064: LD_INT 0
32066: PPUSH
32067: PPUSH
32068: PPUSH
// for i in all_units do
32069: LD_ADDR_VAR 0 2
32073: PUSH
32074: LD_OWVAR 3
32078: PUSH
32079: FOR_IN
32080: IFFALSE 32158
// if IsSelected ( i ) then
32082: LD_VAR 0 2
32086: PPUSH
32087: CALL_OW 306
32091: IFFALSE 32156
// begin j := GetSide ( i ) ;
32093: LD_ADDR_VAR 0 3
32097: PUSH
32098: LD_VAR 0 2
32102: PPUSH
32103: CALL_OW 255
32107: ST_TO_ADDR
// if j = 8 then
32108: LD_VAR 0 3
32112: PUSH
32113: LD_INT 8
32115: EQUAL
32116: IFFALSE 32128
// j := 0 else
32118: LD_ADDR_VAR 0 3
32122: PUSH
32123: LD_INT 0
32125: ST_TO_ADDR
32126: GO 32142
// j := j + 1 ;
32128: LD_ADDR_VAR 0 3
32132: PUSH
32133: LD_VAR 0 3
32137: PUSH
32138: LD_INT 1
32140: PLUS
32141: ST_TO_ADDR
// SetSide ( i , j ) ;
32142: LD_VAR 0 2
32146: PPUSH
32147: LD_VAR 0 3
32151: PPUSH
32152: CALL_OW 235
// end ;
32156: GO 32079
32158: POP
32159: POP
// end ;
32160: LD_VAR 0 1
32164: RET
// export function hHackFog ; begin
32165: LD_INT 0
32167: PPUSH
// FogOff ( true ) ;
32168: LD_INT 1
32170: PPUSH
32171: CALL_OW 344
// end ;
32175: LD_VAR 0 1
32179: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32180: LD_INT 0
32182: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32183: LD_VAR 0 1
32187: PPUSH
32188: LD_VAR 0 2
32192: PPUSH
32193: LD_VAR 0 3
32197: PPUSH
32198: LD_INT 1
32200: PPUSH
32201: LD_INT 1
32203: PPUSH
32204: CALL_OW 483
// CenterOnXY ( x , y ) ;
32208: LD_VAR 0 2
32212: PPUSH
32213: LD_VAR 0 3
32217: PPUSH
32218: CALL_OW 84
// end ;
32222: LD_VAR 0 4
32226: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32227: LD_INT 0
32229: PPUSH
32230: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32231: LD_VAR 0 1
32235: NOT
32236: PUSH
32237: LD_VAR 0 2
32241: PPUSH
32242: LD_VAR 0 3
32246: PPUSH
32247: CALL_OW 488
32251: NOT
32252: OR
32253: PUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 266
32263: PUSH
32264: LD_INT 3
32266: NONEQUAL
32267: PUSH
32268: LD_VAR 0 1
32272: PPUSH
32273: CALL_OW 247
32277: PUSH
32278: LD_INT 1
32280: EQUAL
32281: NOT
32282: AND
32283: OR
32284: IFFALSE 32288
// exit ;
32286: GO 32437
// if GetType ( factory ) = unit_human then
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 247
32297: PUSH
32298: LD_INT 1
32300: EQUAL
32301: IFFALSE 32318
// factory := IsInUnit ( factory ) ;
32303: LD_ADDR_VAR 0 1
32307: PUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: CALL_OW 310
32317: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32318: LD_VAR 0 1
32322: PPUSH
32323: CALL_OW 266
32327: PUSH
32328: LD_INT 3
32330: NONEQUAL
32331: IFFALSE 32335
// exit ;
32333: GO 32437
// if HexInfo ( x , y ) = factory then
32335: LD_VAR 0 2
32339: PPUSH
32340: LD_VAR 0 3
32344: PPUSH
32345: CALL_OW 428
32349: PUSH
32350: LD_VAR 0 1
32354: EQUAL
32355: IFFALSE 32382
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32357: LD_ADDR_EXP 112
32361: PUSH
32362: LD_EXP 112
32366: PPUSH
32367: LD_VAR 0 1
32371: PPUSH
32372: LD_INT 0
32374: PPUSH
32375: CALL_OW 1
32379: ST_TO_ADDR
32380: GO 32433
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32382: LD_ADDR_EXP 112
32386: PUSH
32387: LD_EXP 112
32391: PPUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: LD_VAR 0 1
32401: PPUSH
32402: CALL_OW 255
32406: PUSH
32407: LD_VAR 0 1
32411: PUSH
32412: LD_VAR 0 2
32416: PUSH
32417: LD_VAR 0 3
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: PPUSH
32428: CALL_OW 1
32432: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32433: CALL 32442 0 0
// end ;
32437: LD_VAR 0 4
32441: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32442: LD_INT 0
32444: PPUSH
32445: PPUSH
32446: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32447: LD_STRING resetFactoryWaypoint();
32449: PPUSH
32450: CALL_OW 559
// if factoryWaypoints then
32454: LD_EXP 112
32458: IFFALSE 32584
// begin list := PrepareArray ( factoryWaypoints ) ;
32460: LD_ADDR_VAR 0 3
32464: PUSH
32465: LD_EXP 112
32469: PPUSH
32470: CALL 80055 0 1
32474: ST_TO_ADDR
// for i := 1 to list do
32475: LD_ADDR_VAR 0 2
32479: PUSH
32480: DOUBLE
32481: LD_INT 1
32483: DEC
32484: ST_TO_ADDR
32485: LD_VAR 0 3
32489: PUSH
32490: FOR_TO
32491: IFFALSE 32582
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32493: LD_STRING setFactoryWaypointXY(
32495: PUSH
32496: LD_VAR 0 3
32500: PUSH
32501: LD_VAR 0 2
32505: ARRAY
32506: PUSH
32507: LD_INT 1
32509: ARRAY
32510: STR
32511: PUSH
32512: LD_STRING ,
32514: STR
32515: PUSH
32516: LD_VAR 0 3
32520: PUSH
32521: LD_VAR 0 2
32525: ARRAY
32526: PUSH
32527: LD_INT 2
32529: ARRAY
32530: STR
32531: PUSH
32532: LD_STRING ,
32534: STR
32535: PUSH
32536: LD_VAR 0 3
32540: PUSH
32541: LD_VAR 0 2
32545: ARRAY
32546: PUSH
32547: LD_INT 3
32549: ARRAY
32550: STR
32551: PUSH
32552: LD_STRING ,
32554: STR
32555: PUSH
32556: LD_VAR 0 3
32560: PUSH
32561: LD_VAR 0 2
32565: ARRAY
32566: PUSH
32567: LD_INT 4
32569: ARRAY
32570: STR
32571: PUSH
32572: LD_STRING )
32574: STR
32575: PPUSH
32576: CALL_OW 559
32580: GO 32490
32582: POP
32583: POP
// end ; end ;
32584: LD_VAR 0 1
32588: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32589: LD_INT 0
32591: PPUSH
// if HexInfo ( x , y ) = warehouse then
32592: LD_VAR 0 2
32596: PPUSH
32597: LD_VAR 0 3
32601: PPUSH
32602: CALL_OW 428
32606: PUSH
32607: LD_VAR 0 1
32611: EQUAL
32612: IFFALSE 32639
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32614: LD_ADDR_EXP 113
32618: PUSH
32619: LD_EXP 113
32623: PPUSH
32624: LD_VAR 0 1
32628: PPUSH
32629: LD_INT 0
32631: PPUSH
32632: CALL_OW 1
32636: ST_TO_ADDR
32637: GO 32690
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32639: LD_ADDR_EXP 113
32643: PUSH
32644: LD_EXP 113
32648: PPUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: LD_VAR 0 1
32658: PPUSH
32659: CALL_OW 255
32663: PUSH
32664: LD_VAR 0 1
32668: PUSH
32669: LD_VAR 0 2
32673: PUSH
32674: LD_VAR 0 3
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: PPUSH
32685: CALL_OW 1
32689: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32690: CALL 32699 0 0
// end ;
32694: LD_VAR 0 4
32698: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32699: LD_INT 0
32701: PPUSH
32702: PPUSH
32703: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32704: LD_STRING resetWarehouseGatheringPoints();
32706: PPUSH
32707: CALL_OW 559
// if warehouseGatheringPoints then
32711: LD_EXP 113
32715: IFFALSE 32841
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32717: LD_ADDR_VAR 0 3
32721: PUSH
32722: LD_EXP 113
32726: PPUSH
32727: CALL 80055 0 1
32731: ST_TO_ADDR
// for i := 1 to list do
32732: LD_ADDR_VAR 0 2
32736: PUSH
32737: DOUBLE
32738: LD_INT 1
32740: DEC
32741: ST_TO_ADDR
32742: LD_VAR 0 3
32746: PUSH
32747: FOR_TO
32748: IFFALSE 32839
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32750: LD_STRING setWarehouseGatheringPointXY(
32752: PUSH
32753: LD_VAR 0 3
32757: PUSH
32758: LD_VAR 0 2
32762: ARRAY
32763: PUSH
32764: LD_INT 1
32766: ARRAY
32767: STR
32768: PUSH
32769: LD_STRING ,
32771: STR
32772: PUSH
32773: LD_VAR 0 3
32777: PUSH
32778: LD_VAR 0 2
32782: ARRAY
32783: PUSH
32784: LD_INT 2
32786: ARRAY
32787: STR
32788: PUSH
32789: LD_STRING ,
32791: STR
32792: PUSH
32793: LD_VAR 0 3
32797: PUSH
32798: LD_VAR 0 2
32802: ARRAY
32803: PUSH
32804: LD_INT 3
32806: ARRAY
32807: STR
32808: PUSH
32809: LD_STRING ,
32811: STR
32812: PUSH
32813: LD_VAR 0 3
32817: PUSH
32818: LD_VAR 0 2
32822: ARRAY
32823: PUSH
32824: LD_INT 4
32826: ARRAY
32827: STR
32828: PUSH
32829: LD_STRING )
32831: STR
32832: PPUSH
32833: CALL_OW 559
32837: GO 32747
32839: POP
32840: POP
// end ; end ;
32841: LD_VAR 0 1
32845: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32846: LD_EXP 113
32850: IFFALSE 33535
32852: GO 32854
32854: DISABLE
32855: LD_INT 0
32857: PPUSH
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
32864: PPUSH
32865: PPUSH
// begin enable ;
32866: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32867: LD_ADDR_VAR 0 3
32871: PUSH
32872: LD_EXP 113
32876: PPUSH
32877: CALL 80055 0 1
32881: ST_TO_ADDR
// if not list then
32882: LD_VAR 0 3
32886: NOT
32887: IFFALSE 32891
// exit ;
32889: GO 33535
// for i := 1 to list do
32891: LD_ADDR_VAR 0 1
32895: PUSH
32896: DOUBLE
32897: LD_INT 1
32899: DEC
32900: ST_TO_ADDR
32901: LD_VAR 0 3
32905: PUSH
32906: FOR_TO
32907: IFFALSE 33533
// begin depot := list [ i ] [ 2 ] ;
32909: LD_ADDR_VAR 0 8
32913: PUSH
32914: LD_VAR 0 3
32918: PUSH
32919: LD_VAR 0 1
32923: ARRAY
32924: PUSH
32925: LD_INT 2
32927: ARRAY
32928: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32929: LD_ADDR_VAR 0 5
32933: PUSH
32934: LD_VAR 0 3
32938: PUSH
32939: LD_VAR 0 1
32943: ARRAY
32944: PUSH
32945: LD_INT 1
32947: ARRAY
32948: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32949: LD_VAR 0 8
32953: PPUSH
32954: CALL_OW 301
32958: PUSH
32959: LD_VAR 0 5
32963: PUSH
32964: LD_VAR 0 8
32968: PPUSH
32969: CALL_OW 255
32973: NONEQUAL
32974: OR
32975: IFFALSE 33004
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32977: LD_ADDR_EXP 113
32981: PUSH
32982: LD_EXP 113
32986: PPUSH
32987: LD_VAR 0 8
32991: PPUSH
32992: LD_INT 0
32994: PPUSH
32995: CALL_OW 1
32999: ST_TO_ADDR
// exit ;
33000: POP
33001: POP
33002: GO 33535
// end ; x := list [ i ] [ 3 ] ;
33004: LD_ADDR_VAR 0 6
33008: PUSH
33009: LD_VAR 0 3
33013: PUSH
33014: LD_VAR 0 1
33018: ARRAY
33019: PUSH
33020: LD_INT 3
33022: ARRAY
33023: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33024: LD_ADDR_VAR 0 7
33028: PUSH
33029: LD_VAR 0 3
33033: PUSH
33034: LD_VAR 0 1
33038: ARRAY
33039: PUSH
33040: LD_INT 4
33042: ARRAY
33043: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33044: LD_ADDR_VAR 0 9
33048: PUSH
33049: LD_VAR 0 6
33053: PPUSH
33054: LD_VAR 0 7
33058: PPUSH
33059: LD_INT 16
33061: PPUSH
33062: CALL 78643 0 3
33066: ST_TO_ADDR
// if not cratesNearbyPoint then
33067: LD_VAR 0 9
33071: NOT
33072: IFFALSE 33078
// exit ;
33074: POP
33075: POP
33076: GO 33535
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33078: LD_ADDR_VAR 0 4
33082: PUSH
33083: LD_INT 22
33085: PUSH
33086: LD_VAR 0 5
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: LD_INT 60
33100: PUSH
33101: EMPTY
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 91
33110: PUSH
33111: LD_VAR 0 8
33115: PUSH
33116: LD_INT 6
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 25
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 25
33139: PUSH
33140: LD_INT 16
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: PPUSH
33158: CALL_OW 69
33162: PUSH
33163: LD_VAR 0 8
33167: PPUSH
33168: CALL_OW 313
33172: PPUSH
33173: LD_INT 3
33175: PUSH
33176: LD_INT 60
33178: PUSH
33179: EMPTY
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: LD_INT 25
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 25
33201: PUSH
33202: LD_INT 16
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PPUSH
33218: CALL_OW 72
33222: UNION
33223: ST_TO_ADDR
// if tmp then
33224: LD_VAR 0 4
33228: IFFALSE 33308
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33230: LD_ADDR_VAR 0 4
33234: PUSH
33235: LD_VAR 0 4
33239: PPUSH
33240: LD_INT 3
33242: PPUSH
33243: CALL 76612 0 2
33247: ST_TO_ADDR
// for j in tmp do
33248: LD_ADDR_VAR 0 2
33252: PUSH
33253: LD_VAR 0 4
33257: PUSH
33258: FOR_IN
33259: IFFALSE 33302
// begin if IsInUnit ( j ) then
33261: LD_VAR 0 2
33265: PPUSH
33266: CALL_OW 310
33270: IFFALSE 33281
// ComExit ( j ) ;
33272: LD_VAR 0 2
33276: PPUSH
33277: CALL 76695 0 1
// AddComCollect ( j , x , y ) ;
33281: LD_VAR 0 2
33285: PPUSH
33286: LD_VAR 0 6
33290: PPUSH
33291: LD_VAR 0 7
33295: PPUSH
33296: CALL_OW 177
// end ;
33300: GO 33258
33302: POP
33303: POP
// exit ;
33304: POP
33305: POP
33306: GO 33535
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33308: LD_ADDR_VAR 0 4
33312: PUSH
33313: LD_INT 22
33315: PUSH
33316: LD_VAR 0 5
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 91
33327: PUSH
33328: LD_VAR 0 8
33332: PUSH
33333: LD_INT 8
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 34
33346: PUSH
33347: LD_INT 12
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 34
33356: PUSH
33357: LD_INT 51
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 34
33366: PUSH
33367: LD_INT 32
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 34
33376: PUSH
33377: LD_INT 89
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: PPUSH
33396: CALL_OW 69
33400: ST_TO_ADDR
// if tmp then
33401: LD_VAR 0 4
33405: IFFALSE 33531
// begin for j in tmp do
33407: LD_ADDR_VAR 0 2
33411: PUSH
33412: LD_VAR 0 4
33416: PUSH
33417: FOR_IN
33418: IFFALSE 33529
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33420: LD_VAR 0 2
33424: PPUSH
33425: CALL_OW 262
33429: PUSH
33430: LD_INT 3
33432: EQUAL
33433: PUSH
33434: LD_VAR 0 2
33438: PPUSH
33439: CALL_OW 261
33443: PUSH
33444: LD_INT 20
33446: GREATER
33447: OR
33448: PUSH
33449: LD_VAR 0 2
33453: PPUSH
33454: CALL_OW 314
33458: NOT
33459: AND
33460: PUSH
33461: LD_VAR 0 2
33465: PPUSH
33466: CALL_OW 263
33470: PUSH
33471: LD_INT 1
33473: NONEQUAL
33474: PUSH
33475: LD_VAR 0 2
33479: PPUSH
33480: CALL_OW 311
33484: OR
33485: AND
33486: IFFALSE 33527
// begin ComCollect ( j , x , y ) ;
33488: LD_VAR 0 2
33492: PPUSH
33493: LD_VAR 0 6
33497: PPUSH
33498: LD_VAR 0 7
33502: PPUSH
33503: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33507: LD_VAR 0 2
33511: PPUSH
33512: LD_VAR 0 8
33516: PPUSH
33517: CALL_OW 172
// exit ;
33521: POP
33522: POP
33523: POP
33524: POP
33525: GO 33535
// end ;
33527: GO 33417
33529: POP
33530: POP
// end ; end ;
33531: GO 32906
33533: POP
33534: POP
// end ; end_of_file
33535: PPOPN 9
33537: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33538: LD_VAR 0 1
33542: PUSH
33543: LD_INT 200
33545: DOUBLE
33546: GREATEREQUAL
33547: IFFALSE 33555
33549: LD_INT 299
33551: DOUBLE
33552: LESSEQUAL
33553: IFTRUE 33557
33555: GO 33589
33557: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33558: LD_VAR 0 1
33562: PPUSH
33563: LD_VAR 0 2
33567: PPUSH
33568: LD_VAR 0 3
33572: PPUSH
33573: LD_VAR 0 4
33577: PPUSH
33578: LD_VAR 0 5
33582: PPUSH
33583: CALL 34077 0 5
33587: GO 33666
33589: LD_INT 300
33591: DOUBLE
33592: GREATEREQUAL
33593: IFFALSE 33601
33595: LD_INT 399
33597: DOUBLE
33598: LESSEQUAL
33599: IFTRUE 33603
33601: GO 33665
33603: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33604: LD_VAR 0 1
33608: PPUSH
33609: LD_VAR 0 2
33613: PPUSH
33614: LD_VAR 0 3
33618: PPUSH
33619: LD_VAR 0 4
33623: PPUSH
33624: LD_VAR 0 5
33628: PPUSH
33629: LD_VAR 0 6
33633: PPUSH
33634: LD_VAR 0 7
33638: PPUSH
33639: LD_VAR 0 8
33643: PPUSH
33644: LD_VAR 0 9
33648: PPUSH
33649: LD_VAR 0 10
33653: PPUSH
33654: LD_VAR 0 11
33658: PPUSH
33659: CALL 30239 0 11
33663: GO 33666
33665: POP
// end ;
33666: PPOPN 11
33668: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33669: LD_VAR 0 1
33673: PPUSH
33674: LD_VAR 0 2
33678: PPUSH
33679: LD_VAR 0 3
33683: PPUSH
33684: LD_VAR 0 4
33688: PPUSH
33689: LD_VAR 0 5
33693: PPUSH
33694: CALL 33813 0 5
// end ; end_of_file
33698: PPOPN 5
33700: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33701: LD_INT 0
33703: PPUSH
33704: PPUSH
33705: PPUSH
33706: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33707: LD_VAR 0 1
33711: PPUSH
33712: CALL_OW 264
33716: PUSH
33717: LD_INT 91
33719: EQUAL
33720: IFFALSE 33792
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33722: LD_INT 68
33724: PPUSH
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL_OW 255
33734: PPUSH
33735: CALL_OW 321
33739: PUSH
33740: LD_INT 2
33742: EQUAL
33743: IFFALSE 33755
// eff := 70 else
33745: LD_ADDR_VAR 0 4
33749: PUSH
33750: LD_INT 70
33752: ST_TO_ADDR
33753: GO 33763
// eff := 30 ;
33755: LD_ADDR_VAR 0 4
33759: PUSH
33760: LD_INT 30
33762: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL_OW 250
33772: PPUSH
33773: LD_VAR 0 1
33777: PPUSH
33778: CALL_OW 251
33782: PPUSH
33783: LD_VAR 0 4
33787: PPUSH
33788: CALL_OW 495
// end ; end ;
33792: LD_VAR 0 2
33796: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33797: LD_INT 0
33799: PPUSH
// end ;
33800: LD_VAR 0 4
33804: RET
// export function SOS_Command ( cmd ) ; begin
33805: LD_INT 0
33807: PPUSH
// end ;
33808: LD_VAR 0 2
33812: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33813: LD_INT 0
33815: PPUSH
// end ;
33816: LD_VAR 0 6
33820: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
// if not vehicle or not factory then
33825: LD_VAR 0 1
33829: NOT
33830: PUSH
33831: LD_VAR 0 2
33835: NOT
33836: OR
33837: IFFALSE 33841
// exit ;
33839: GO 34072
// if factoryWaypoints >= factory then
33841: LD_EXP 112
33845: PUSH
33846: LD_VAR 0 2
33850: GREATEREQUAL
33851: IFFALSE 34072
// if factoryWaypoints [ factory ] then
33853: LD_EXP 112
33857: PUSH
33858: LD_VAR 0 2
33862: ARRAY
33863: IFFALSE 34072
// begin if GetControl ( vehicle ) = control_manual then
33865: LD_VAR 0 1
33869: PPUSH
33870: CALL_OW 263
33874: PUSH
33875: LD_INT 1
33877: EQUAL
33878: IFFALSE 33959
// begin driver := IsDrivenBy ( vehicle ) ;
33880: LD_ADDR_VAR 0 4
33884: PUSH
33885: LD_VAR 0 1
33889: PPUSH
33890: CALL_OW 311
33894: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33895: LD_VAR 0 4
33899: PPUSH
33900: LD_EXP 112
33904: PUSH
33905: LD_VAR 0 2
33909: ARRAY
33910: PUSH
33911: LD_INT 3
33913: ARRAY
33914: PPUSH
33915: LD_EXP 112
33919: PUSH
33920: LD_VAR 0 2
33924: ARRAY
33925: PUSH
33926: LD_INT 4
33928: ARRAY
33929: PPUSH
33930: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33934: LD_VAR 0 4
33938: PPUSH
33939: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33943: LD_VAR 0 4
33947: PPUSH
33948: LD_VAR 0 2
33952: PPUSH
33953: CALL_OW 180
// end else
33957: GO 34072
// if GetControl ( vehicle ) = control_remote then
33959: LD_VAR 0 1
33963: PPUSH
33964: CALL_OW 263
33968: PUSH
33969: LD_INT 2
33971: EQUAL
33972: IFFALSE 34033
// begin wait ( 0 0$2 ) ;
33974: LD_INT 70
33976: PPUSH
33977: CALL_OW 67
// if Connect ( vehicle ) then
33981: LD_VAR 0 1
33985: PPUSH
33986: CALL 46903 0 1
33990: IFFALSE 34031
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33992: LD_VAR 0 1
33996: PPUSH
33997: LD_EXP 112
34001: PUSH
34002: LD_VAR 0 2
34006: ARRAY
34007: PUSH
34008: LD_INT 3
34010: ARRAY
34011: PPUSH
34012: LD_EXP 112
34016: PUSH
34017: LD_VAR 0 2
34021: ARRAY
34022: PUSH
34023: LD_INT 4
34025: ARRAY
34026: PPUSH
34027: CALL_OW 171
// end else
34031: GO 34072
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34033: LD_VAR 0 1
34037: PPUSH
34038: LD_EXP 112
34042: PUSH
34043: LD_VAR 0 2
34047: ARRAY
34048: PUSH
34049: LD_INT 3
34051: ARRAY
34052: PPUSH
34053: LD_EXP 112
34057: PUSH
34058: LD_VAR 0 2
34062: ARRAY
34063: PUSH
34064: LD_INT 4
34066: ARRAY
34067: PPUSH
34068: CALL_OW 171
// end ; end ;
34072: LD_VAR 0 3
34076: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34077: LD_INT 0
34079: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34080: LD_VAR 0 1
34084: PUSH
34085: LD_INT 250
34087: EQUAL
34088: PUSH
34089: LD_VAR 0 2
34093: PPUSH
34094: CALL_OW 264
34098: PUSH
34099: LD_INT 81
34101: EQUAL
34102: AND
34103: IFFALSE 34124
// MinerPlaceMine ( unit , x , y ) ;
34105: LD_VAR 0 2
34109: PPUSH
34110: LD_VAR 0 4
34114: PPUSH
34115: LD_VAR 0 5
34119: PPUSH
34120: CALL 37114 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34124: LD_VAR 0 1
34128: PUSH
34129: LD_INT 251
34131: EQUAL
34132: PUSH
34133: LD_VAR 0 2
34137: PPUSH
34138: CALL_OW 264
34142: PUSH
34143: LD_INT 81
34145: EQUAL
34146: AND
34147: IFFALSE 34168
// MinerDetonateMine ( unit , x , y ) ;
34149: LD_VAR 0 2
34153: PPUSH
34154: LD_VAR 0 4
34158: PPUSH
34159: LD_VAR 0 5
34163: PPUSH
34164: CALL 37389 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34168: LD_VAR 0 1
34172: PUSH
34173: LD_INT 252
34175: EQUAL
34176: PUSH
34177: LD_VAR 0 2
34181: PPUSH
34182: CALL_OW 264
34186: PUSH
34187: LD_INT 81
34189: EQUAL
34190: AND
34191: IFFALSE 34212
// MinerCreateMinefield ( unit , x , y ) ;
34193: LD_VAR 0 2
34197: PPUSH
34198: LD_VAR 0 4
34202: PPUSH
34203: LD_VAR 0 5
34207: PPUSH
34208: CALL 37806 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34212: LD_VAR 0 1
34216: PUSH
34217: LD_INT 253
34219: EQUAL
34220: PUSH
34221: LD_VAR 0 2
34225: PPUSH
34226: CALL_OW 257
34230: PUSH
34231: LD_INT 5
34233: EQUAL
34234: AND
34235: IFFALSE 34256
// ComBinocular ( unit , x , y ) ;
34237: LD_VAR 0 2
34241: PPUSH
34242: LD_VAR 0 4
34246: PPUSH
34247: LD_VAR 0 5
34251: PPUSH
34252: CALL 38175 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34256: LD_VAR 0 1
34260: PUSH
34261: LD_INT 254
34263: EQUAL
34264: PUSH
34265: LD_VAR 0 2
34269: PPUSH
34270: CALL_OW 264
34274: PUSH
34275: LD_INT 99
34277: EQUAL
34278: AND
34279: PUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: CALL_OW 263
34289: PUSH
34290: LD_INT 3
34292: EQUAL
34293: AND
34294: IFFALSE 34310
// HackDestroyVehicle ( unit , selectedUnit ) ;
34296: LD_VAR 0 2
34300: PPUSH
34301: LD_VAR 0 3
34305: PPUSH
34306: CALL 36478 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34310: LD_VAR 0 1
34314: PUSH
34315: LD_INT 255
34317: EQUAL
34318: PUSH
34319: LD_VAR 0 2
34323: PPUSH
34324: CALL_OW 264
34328: PUSH
34329: LD_INT 14
34331: PUSH
34332: LD_INT 53
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: IN
34339: AND
34340: PUSH
34341: LD_VAR 0 4
34345: PPUSH
34346: LD_VAR 0 5
34350: PPUSH
34351: CALL_OW 488
34355: AND
34356: IFFALSE 34380
// CutTreeXYR ( unit , x , y , 12 ) ;
34358: LD_VAR 0 2
34362: PPUSH
34363: LD_VAR 0 4
34367: PPUSH
34368: LD_VAR 0 5
34372: PPUSH
34373: LD_INT 12
34375: PPUSH
34376: CALL 34475 0 4
// if cmd = 256 then
34380: LD_VAR 0 1
34384: PUSH
34385: LD_INT 256
34387: EQUAL
34388: IFFALSE 34409
// SetFactoryWaypoint ( unit , x , y ) ;
34390: LD_VAR 0 2
34394: PPUSH
34395: LD_VAR 0 4
34399: PPUSH
34400: LD_VAR 0 5
34404: PPUSH
34405: CALL 32227 0 3
// if cmd = 257 then
34409: LD_VAR 0 1
34413: PUSH
34414: LD_INT 257
34416: EQUAL
34417: IFFALSE 34438
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34419: LD_VAR 0 2
34423: PPUSH
34424: LD_VAR 0 4
34428: PPUSH
34429: LD_VAR 0 5
34433: PPUSH
34434: CALL 32589 0 3
// if cmd = 258 then
34438: LD_VAR 0 1
34442: PUSH
34443: LD_INT 258
34445: EQUAL
34446: IFFALSE 34470
// BurnTreeXYR ( unit , x , y , 8 ) ;
34448: LD_VAR 0 2
34452: PPUSH
34453: LD_VAR 0 4
34457: PPUSH
34458: LD_VAR 0 5
34462: PPUSH
34463: LD_INT 8
34465: PPUSH
34466: CALL 34869 0 4
// end ;
34470: LD_VAR 0 6
34474: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34475: LD_INT 0
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
34485: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34486: LD_VAR 0 1
34490: PPUSH
34491: CALL_OW 302
34495: NOT
34496: PUSH
34497: LD_VAR 0 2
34501: PPUSH
34502: LD_VAR 0 3
34506: PPUSH
34507: CALL_OW 488
34511: NOT
34512: OR
34513: PUSH
34514: LD_VAR 0 4
34518: NOT
34519: OR
34520: IFFALSE 34524
// exit ;
34522: GO 34864
// list := [ ] ;
34524: LD_ADDR_VAR 0 13
34528: PUSH
34529: EMPTY
34530: ST_TO_ADDR
// if x - r < 0 then
34531: LD_VAR 0 2
34535: PUSH
34536: LD_VAR 0 4
34540: MINUS
34541: PUSH
34542: LD_INT 0
34544: LESS
34545: IFFALSE 34557
// min_x := 0 else
34547: LD_ADDR_VAR 0 7
34551: PUSH
34552: LD_INT 0
34554: ST_TO_ADDR
34555: GO 34573
// min_x := x - r ;
34557: LD_ADDR_VAR 0 7
34561: PUSH
34562: LD_VAR 0 2
34566: PUSH
34567: LD_VAR 0 4
34571: MINUS
34572: ST_TO_ADDR
// if y - r < 0 then
34573: LD_VAR 0 3
34577: PUSH
34578: LD_VAR 0 4
34582: MINUS
34583: PUSH
34584: LD_INT 0
34586: LESS
34587: IFFALSE 34599
// min_y := 0 else
34589: LD_ADDR_VAR 0 8
34593: PUSH
34594: LD_INT 0
34596: ST_TO_ADDR
34597: GO 34615
// min_y := y - r ;
34599: LD_ADDR_VAR 0 8
34603: PUSH
34604: LD_VAR 0 3
34608: PUSH
34609: LD_VAR 0 4
34613: MINUS
34614: ST_TO_ADDR
// max_x := x + r ;
34615: LD_ADDR_VAR 0 9
34619: PUSH
34620: LD_VAR 0 2
34624: PUSH
34625: LD_VAR 0 4
34629: PLUS
34630: ST_TO_ADDR
// max_y := y + r ;
34631: LD_ADDR_VAR 0 10
34635: PUSH
34636: LD_VAR 0 3
34640: PUSH
34641: LD_VAR 0 4
34645: PLUS
34646: ST_TO_ADDR
// for _x = min_x to max_x do
34647: LD_ADDR_VAR 0 11
34651: PUSH
34652: DOUBLE
34653: LD_VAR 0 7
34657: DEC
34658: ST_TO_ADDR
34659: LD_VAR 0 9
34663: PUSH
34664: FOR_TO
34665: IFFALSE 34782
// for _y = min_y to max_y do
34667: LD_ADDR_VAR 0 12
34671: PUSH
34672: DOUBLE
34673: LD_VAR 0 8
34677: DEC
34678: ST_TO_ADDR
34679: LD_VAR 0 10
34683: PUSH
34684: FOR_TO
34685: IFFALSE 34778
// begin if not ValidHex ( _x , _y ) then
34687: LD_VAR 0 11
34691: PPUSH
34692: LD_VAR 0 12
34696: PPUSH
34697: CALL_OW 488
34701: NOT
34702: IFFALSE 34706
// continue ;
34704: GO 34684
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34706: LD_VAR 0 11
34710: PPUSH
34711: LD_VAR 0 12
34715: PPUSH
34716: CALL_OW 351
34720: PUSH
34721: LD_VAR 0 11
34725: PPUSH
34726: LD_VAR 0 12
34730: PPUSH
34731: CALL_OW 554
34735: AND
34736: IFFALSE 34776
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34738: LD_ADDR_VAR 0 13
34742: PUSH
34743: LD_VAR 0 13
34747: PPUSH
34748: LD_VAR 0 13
34752: PUSH
34753: LD_INT 1
34755: PLUS
34756: PPUSH
34757: LD_VAR 0 11
34761: PUSH
34762: LD_VAR 0 12
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PPUSH
34771: CALL_OW 2
34775: ST_TO_ADDR
// end ;
34776: GO 34684
34778: POP
34779: POP
34780: GO 34664
34782: POP
34783: POP
// if not list then
34784: LD_VAR 0 13
34788: NOT
34789: IFFALSE 34793
// exit ;
34791: GO 34864
// for i in list do
34793: LD_ADDR_VAR 0 6
34797: PUSH
34798: LD_VAR 0 13
34802: PUSH
34803: FOR_IN
34804: IFFALSE 34862
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34806: LD_VAR 0 1
34810: PPUSH
34811: LD_STRING M
34813: PUSH
34814: LD_VAR 0 6
34818: PUSH
34819: LD_INT 1
34821: ARRAY
34822: PUSH
34823: LD_VAR 0 6
34827: PUSH
34828: LD_INT 2
34830: ARRAY
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: PUSH
34853: EMPTY
34854: LIST
34855: PPUSH
34856: CALL_OW 447
34860: GO 34803
34862: POP
34863: POP
// end ;
34864: LD_VAR 0 5
34868: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
34869: LD_INT 0
34871: PPUSH
34872: PPUSH
34873: PPUSH
34874: PPUSH
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
34881: LD_VAR 0 1
34885: PPUSH
34886: CALL_OW 302
34890: NOT
34891: PUSH
34892: LD_VAR 0 2
34896: PPUSH
34897: LD_VAR 0 3
34901: PPUSH
34902: CALL_OW 488
34906: NOT
34907: OR
34908: PUSH
34909: LD_VAR 0 4
34913: NOT
34914: OR
34915: IFFALSE 34919
// exit ;
34917: GO 35432
// list := [ ] ;
34919: LD_ADDR_VAR 0 13
34923: PUSH
34924: EMPTY
34925: ST_TO_ADDR
// if x - r < 0 then
34926: LD_VAR 0 2
34930: PUSH
34931: LD_VAR 0 4
34935: MINUS
34936: PUSH
34937: LD_INT 0
34939: LESS
34940: IFFALSE 34952
// min_x := 0 else
34942: LD_ADDR_VAR 0 7
34946: PUSH
34947: LD_INT 0
34949: ST_TO_ADDR
34950: GO 34968
// min_x := x - r ;
34952: LD_ADDR_VAR 0 7
34956: PUSH
34957: LD_VAR 0 2
34961: PUSH
34962: LD_VAR 0 4
34966: MINUS
34967: ST_TO_ADDR
// if y - r < 0 then
34968: LD_VAR 0 3
34972: PUSH
34973: LD_VAR 0 4
34977: MINUS
34978: PUSH
34979: LD_INT 0
34981: LESS
34982: IFFALSE 34994
// min_y := 0 else
34984: LD_ADDR_VAR 0 8
34988: PUSH
34989: LD_INT 0
34991: ST_TO_ADDR
34992: GO 35010
// min_y := y - r ;
34994: LD_ADDR_VAR 0 8
34998: PUSH
34999: LD_VAR 0 3
35003: PUSH
35004: LD_VAR 0 4
35008: MINUS
35009: ST_TO_ADDR
// max_x := x + r ;
35010: LD_ADDR_VAR 0 9
35014: PUSH
35015: LD_VAR 0 2
35019: PUSH
35020: LD_VAR 0 4
35024: PLUS
35025: ST_TO_ADDR
// max_y := y + r ;
35026: LD_ADDR_VAR 0 10
35030: PUSH
35031: LD_VAR 0 3
35035: PUSH
35036: LD_VAR 0 4
35040: PLUS
35041: ST_TO_ADDR
// for _x = min_x to max_x do
35042: LD_ADDR_VAR 0 11
35046: PUSH
35047: DOUBLE
35048: LD_VAR 0 7
35052: DEC
35053: ST_TO_ADDR
35054: LD_VAR 0 9
35058: PUSH
35059: FOR_TO
35060: IFFALSE 35177
// for _y = min_y to max_y do
35062: LD_ADDR_VAR 0 12
35066: PUSH
35067: DOUBLE
35068: LD_VAR 0 8
35072: DEC
35073: ST_TO_ADDR
35074: LD_VAR 0 10
35078: PUSH
35079: FOR_TO
35080: IFFALSE 35173
// begin if not ValidHex ( _x , _y ) then
35082: LD_VAR 0 11
35086: PPUSH
35087: LD_VAR 0 12
35091: PPUSH
35092: CALL_OW 488
35096: NOT
35097: IFFALSE 35101
// continue ;
35099: GO 35079
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35101: LD_VAR 0 11
35105: PPUSH
35106: LD_VAR 0 12
35110: PPUSH
35111: CALL_OW 351
35115: PUSH
35116: LD_VAR 0 11
35120: PPUSH
35121: LD_VAR 0 12
35125: PPUSH
35126: CALL_OW 554
35130: AND
35131: IFFALSE 35171
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35133: LD_ADDR_VAR 0 13
35137: PUSH
35138: LD_VAR 0 13
35142: PPUSH
35143: LD_VAR 0 13
35147: PUSH
35148: LD_INT 1
35150: PLUS
35151: PPUSH
35152: LD_VAR 0 11
35156: PUSH
35157: LD_VAR 0 12
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 2
35170: ST_TO_ADDR
// end ;
35171: GO 35079
35173: POP
35174: POP
35175: GO 35059
35177: POP
35178: POP
// if not list then
35179: LD_VAR 0 13
35183: NOT
35184: IFFALSE 35188
// exit ;
35186: GO 35432
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35188: LD_ADDR_VAR 0 13
35192: PUSH
35193: LD_VAR 0 1
35197: PPUSH
35198: LD_VAR 0 13
35202: PPUSH
35203: LD_INT 1
35205: PPUSH
35206: LD_INT 1
35208: PPUSH
35209: CALL 44045 0 4
35213: ST_TO_ADDR
// ComStop ( flame ) ;
35214: LD_VAR 0 1
35218: PPUSH
35219: CALL_OW 141
// for i in list do
35223: LD_ADDR_VAR 0 6
35227: PUSH
35228: LD_VAR 0 13
35232: PUSH
35233: FOR_IN
35234: IFFALSE 35265
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35236: LD_VAR 0 1
35240: PPUSH
35241: LD_VAR 0 6
35245: PUSH
35246: LD_INT 1
35248: ARRAY
35249: PPUSH
35250: LD_VAR 0 6
35254: PUSH
35255: LD_INT 2
35257: ARRAY
35258: PPUSH
35259: CALL_OW 176
35263: GO 35233
35265: POP
35266: POP
// repeat wait ( 0 0$1 ) ;
35267: LD_INT 35
35269: PPUSH
35270: CALL_OW 67
// task := GetTaskList ( flame ) ;
35274: LD_ADDR_VAR 0 14
35278: PUSH
35279: LD_VAR 0 1
35283: PPUSH
35284: CALL_OW 437
35288: ST_TO_ADDR
// if not task then
35289: LD_VAR 0 14
35293: NOT
35294: IFFALSE 35298
// exit ;
35296: GO 35432
// if task [ 1 ] [ 1 ] <> | then
35298: LD_VAR 0 14
35302: PUSH
35303: LD_INT 1
35305: ARRAY
35306: PUSH
35307: LD_INT 1
35309: ARRAY
35310: PUSH
35311: LD_STRING |
35313: NONEQUAL
35314: IFFALSE 35318
// exit ;
35316: GO 35432
// _x := task [ 1 ] [ 2 ] ;
35318: LD_ADDR_VAR 0 11
35322: PUSH
35323: LD_VAR 0 14
35327: PUSH
35328: LD_INT 1
35330: ARRAY
35331: PUSH
35332: LD_INT 2
35334: ARRAY
35335: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
35336: LD_ADDR_VAR 0 12
35340: PUSH
35341: LD_VAR 0 14
35345: PUSH
35346: LD_INT 1
35348: ARRAY
35349: PUSH
35350: LD_INT 3
35352: ARRAY
35353: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
35354: LD_VAR 0 11
35358: PPUSH
35359: LD_VAR 0 12
35363: PPUSH
35364: CALL_OW 351
35368: NOT
35369: PUSH
35370: LD_VAR 0 11
35374: PPUSH
35375: LD_VAR 0 12
35379: PPUSH
35380: CALL_OW 554
35384: NOT
35385: OR
35386: IFFALSE 35420
// begin task := Delete ( task , 1 ) ;
35388: LD_ADDR_VAR 0 14
35392: PUSH
35393: LD_VAR 0 14
35397: PPUSH
35398: LD_INT 1
35400: PPUSH
35401: CALL_OW 3
35405: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
35406: LD_VAR 0 1
35410: PPUSH
35411: LD_VAR 0 14
35415: PPUSH
35416: CALL_OW 446
// end ; until not HasTask ( flame ) ;
35420: LD_VAR 0 1
35424: PPUSH
35425: CALL_OW 314
35429: NOT
35430: IFFALSE 35267
// end ;
35432: LD_VAR 0 5
35436: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35437: LD_EXP 115
35441: NOT
35442: IFFALSE 35492
35444: GO 35446
35446: DISABLE
// begin initHack := true ;
35447: LD_ADDR_EXP 115
35451: PUSH
35452: LD_INT 1
35454: ST_TO_ADDR
// hackTanks := [ ] ;
35455: LD_ADDR_EXP 116
35459: PUSH
35460: EMPTY
35461: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35462: LD_ADDR_EXP 117
35466: PUSH
35467: EMPTY
35468: ST_TO_ADDR
// hackLimit := 3 ;
35469: LD_ADDR_EXP 118
35473: PUSH
35474: LD_INT 3
35476: ST_TO_ADDR
// hackDist := 12 ;
35477: LD_ADDR_EXP 119
35481: PUSH
35482: LD_INT 12
35484: ST_TO_ADDR
// hackCounter := [ ] ;
35485: LD_ADDR_EXP 120
35489: PUSH
35490: EMPTY
35491: ST_TO_ADDR
// end ;
35492: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35493: LD_EXP 115
35497: PUSH
35498: LD_INT 34
35500: PUSH
35501: LD_INT 99
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PPUSH
35508: CALL_OW 69
35512: AND
35513: IFFALSE 35766
35515: GO 35517
35517: DISABLE
35518: LD_INT 0
35520: PPUSH
35521: PPUSH
// begin enable ;
35522: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35523: LD_ADDR_VAR 0 1
35527: PUSH
35528: LD_INT 34
35530: PUSH
35531: LD_INT 99
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PPUSH
35538: CALL_OW 69
35542: PUSH
35543: FOR_IN
35544: IFFALSE 35764
// begin if not i in hackTanks then
35546: LD_VAR 0 1
35550: PUSH
35551: LD_EXP 116
35555: IN
35556: NOT
35557: IFFALSE 35640
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35559: LD_ADDR_EXP 116
35563: PUSH
35564: LD_EXP 116
35568: PPUSH
35569: LD_EXP 116
35573: PUSH
35574: LD_INT 1
35576: PLUS
35577: PPUSH
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 1
35587: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35588: LD_ADDR_EXP 117
35592: PUSH
35593: LD_EXP 117
35597: PPUSH
35598: LD_EXP 117
35602: PUSH
35603: LD_INT 1
35605: PLUS
35606: PPUSH
35607: EMPTY
35608: PPUSH
35609: CALL_OW 1
35613: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35614: LD_ADDR_EXP 120
35618: PUSH
35619: LD_EXP 120
35623: PPUSH
35624: LD_EXP 120
35628: PUSH
35629: LD_INT 1
35631: PLUS
35632: PPUSH
35633: EMPTY
35634: PPUSH
35635: CALL_OW 1
35639: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35640: LD_VAR 0 1
35644: PPUSH
35645: CALL_OW 302
35649: NOT
35650: IFFALSE 35663
// begin HackUnlinkAll ( i ) ;
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL 35769 0 1
// continue ;
35661: GO 35543
// end ; HackCheckCapturedStatus ( i ) ;
35663: LD_VAR 0 1
35667: PPUSH
35668: CALL 36212 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35672: LD_ADDR_VAR 0 2
35676: PUSH
35677: LD_INT 81
35679: PUSH
35680: LD_VAR 0 1
35684: PPUSH
35685: CALL_OW 255
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 33
35696: PUSH
35697: LD_INT 3
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 91
35706: PUSH
35707: LD_VAR 0 1
35711: PUSH
35712: LD_EXP 119
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 50
35724: PUSH
35725: EMPTY
35726: LIST
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: PPUSH
35734: CALL_OW 69
35738: ST_TO_ADDR
// if not tmp then
35739: LD_VAR 0 2
35743: NOT
35744: IFFALSE 35748
// continue ;
35746: GO 35543
// HackLink ( i , tmp ) ;
35748: LD_VAR 0 1
35752: PPUSH
35753: LD_VAR 0 2
35757: PPUSH
35758: CALL 35905 0 2
// end ;
35762: GO 35543
35764: POP
35765: POP
// end ;
35766: PPOPN 2
35768: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35769: LD_INT 0
35771: PPUSH
35772: PPUSH
35773: PPUSH
// if not hack in hackTanks then
35774: LD_VAR 0 1
35778: PUSH
35779: LD_EXP 116
35783: IN
35784: NOT
35785: IFFALSE 35789
// exit ;
35787: GO 35900
// index := GetElementIndex ( hackTanks , hack ) ;
35789: LD_ADDR_VAR 0 4
35793: PUSH
35794: LD_EXP 116
35798: PPUSH
35799: LD_VAR 0 1
35803: PPUSH
35804: CALL 43342 0 2
35808: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35809: LD_EXP 117
35813: PUSH
35814: LD_VAR 0 4
35818: ARRAY
35819: IFFALSE 35900
// begin for i in hackTanksCaptured [ index ] do
35821: LD_ADDR_VAR 0 3
35825: PUSH
35826: LD_EXP 117
35830: PUSH
35831: LD_VAR 0 4
35835: ARRAY
35836: PUSH
35837: FOR_IN
35838: IFFALSE 35864
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35840: LD_VAR 0 3
35844: PUSH
35845: LD_INT 1
35847: ARRAY
35848: PPUSH
35849: LD_VAR 0 3
35853: PUSH
35854: LD_INT 2
35856: ARRAY
35857: PPUSH
35858: CALL_OW 235
35862: GO 35837
35864: POP
35865: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35866: LD_ADDR_EXP 117
35870: PUSH
35871: LD_EXP 117
35875: PPUSH
35876: LD_VAR 0 4
35880: PPUSH
35881: EMPTY
35882: PPUSH
35883: CALL_OW 1
35887: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35888: LD_VAR 0 1
35892: PPUSH
35893: LD_INT 0
35895: PPUSH
35896: CALL_OW 505
// end ; end ;
35900: LD_VAR 0 2
35904: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35905: LD_INT 0
35907: PPUSH
35908: PPUSH
35909: PPUSH
// if not hack in hackTanks or not vehicles then
35910: LD_VAR 0 1
35914: PUSH
35915: LD_EXP 116
35919: IN
35920: NOT
35921: PUSH
35922: LD_VAR 0 2
35926: NOT
35927: OR
35928: IFFALSE 35932
// exit ;
35930: GO 36207
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35932: LD_ADDR_VAR 0 2
35936: PUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: LD_VAR 0 2
35946: PPUSH
35947: LD_INT 1
35949: PPUSH
35950: LD_INT 1
35952: PPUSH
35953: CALL 43992 0 4
35957: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35958: LD_ADDR_VAR 0 5
35962: PUSH
35963: LD_EXP 116
35967: PPUSH
35968: LD_VAR 0 1
35972: PPUSH
35973: CALL 43342 0 2
35977: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35978: LD_EXP 117
35982: PUSH
35983: LD_VAR 0 5
35987: ARRAY
35988: PUSH
35989: LD_EXP 118
35993: LESS
35994: IFFALSE 36183
// begin for i := 1 to vehicles do
35996: LD_ADDR_VAR 0 4
36000: PUSH
36001: DOUBLE
36002: LD_INT 1
36004: DEC
36005: ST_TO_ADDR
36006: LD_VAR 0 2
36010: PUSH
36011: FOR_TO
36012: IFFALSE 36181
// begin if hackTanksCaptured [ index ] = hackLimit then
36014: LD_EXP 117
36018: PUSH
36019: LD_VAR 0 5
36023: ARRAY
36024: PUSH
36025: LD_EXP 118
36029: EQUAL
36030: IFFALSE 36034
// break ;
36032: GO 36181
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36034: LD_ADDR_EXP 120
36038: PUSH
36039: LD_EXP 120
36043: PPUSH
36044: LD_VAR 0 5
36048: PPUSH
36049: LD_EXP 120
36053: PUSH
36054: LD_VAR 0 5
36058: ARRAY
36059: PUSH
36060: LD_INT 1
36062: PLUS
36063: PPUSH
36064: CALL_OW 1
36068: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36069: LD_ADDR_EXP 117
36073: PUSH
36074: LD_EXP 117
36078: PPUSH
36079: LD_VAR 0 5
36083: PUSH
36084: LD_EXP 117
36088: PUSH
36089: LD_VAR 0 5
36093: ARRAY
36094: PUSH
36095: LD_INT 1
36097: PLUS
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PPUSH
36103: LD_VAR 0 2
36107: PUSH
36108: LD_VAR 0 4
36112: ARRAY
36113: PUSH
36114: LD_VAR 0 2
36118: PUSH
36119: LD_VAR 0 4
36123: ARRAY
36124: PPUSH
36125: CALL_OW 255
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PPUSH
36134: CALL 43557 0 3
36138: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36139: LD_VAR 0 2
36143: PUSH
36144: LD_VAR 0 4
36148: ARRAY
36149: PPUSH
36150: LD_VAR 0 1
36154: PPUSH
36155: CALL_OW 255
36159: PPUSH
36160: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36164: LD_VAR 0 2
36168: PUSH
36169: LD_VAR 0 4
36173: ARRAY
36174: PPUSH
36175: CALL_OW 141
// end ;
36179: GO 36011
36181: POP
36182: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36183: LD_VAR 0 1
36187: PPUSH
36188: LD_EXP 117
36192: PUSH
36193: LD_VAR 0 5
36197: ARRAY
36198: PUSH
36199: LD_INT 0
36201: PLUS
36202: PPUSH
36203: CALL_OW 505
// end ;
36207: LD_VAR 0 3
36211: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36212: LD_INT 0
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
// if not hack in hackTanks then
36218: LD_VAR 0 1
36222: PUSH
36223: LD_EXP 116
36227: IN
36228: NOT
36229: IFFALSE 36233
// exit ;
36231: GO 36473
// index := GetElementIndex ( hackTanks , hack ) ;
36233: LD_ADDR_VAR 0 4
36237: PUSH
36238: LD_EXP 116
36242: PPUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL 43342 0 2
36252: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: DOUBLE
36259: LD_EXP 117
36263: PUSH
36264: LD_VAR 0 4
36268: ARRAY
36269: INC
36270: ST_TO_ADDR
36271: LD_INT 1
36273: PUSH
36274: FOR_DOWNTO
36275: IFFALSE 36447
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36277: LD_ADDR_VAR 0 5
36281: PUSH
36282: LD_EXP 117
36286: PUSH
36287: LD_VAR 0 4
36291: ARRAY
36292: PUSH
36293: LD_VAR 0 3
36297: ARRAY
36298: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36299: LD_VAR 0 5
36303: PUSH
36304: LD_INT 1
36306: ARRAY
36307: PPUSH
36308: CALL_OW 302
36312: NOT
36313: PUSH
36314: LD_VAR 0 5
36318: PUSH
36319: LD_INT 1
36321: ARRAY
36322: PPUSH
36323: CALL_OW 255
36327: PUSH
36328: LD_VAR 0 1
36332: PPUSH
36333: CALL_OW 255
36337: NONEQUAL
36338: OR
36339: IFFALSE 36445
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36341: LD_VAR 0 5
36345: PUSH
36346: LD_INT 1
36348: ARRAY
36349: PPUSH
36350: CALL_OW 305
36354: PUSH
36355: LD_VAR 0 5
36359: PUSH
36360: LD_INT 1
36362: ARRAY
36363: PPUSH
36364: CALL_OW 255
36368: PUSH
36369: LD_VAR 0 1
36373: PPUSH
36374: CALL_OW 255
36378: EQUAL
36379: AND
36380: IFFALSE 36404
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36382: LD_VAR 0 5
36386: PUSH
36387: LD_INT 1
36389: ARRAY
36390: PPUSH
36391: LD_VAR 0 5
36395: PUSH
36396: LD_INT 2
36398: ARRAY
36399: PPUSH
36400: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36404: LD_ADDR_EXP 117
36408: PUSH
36409: LD_EXP 117
36413: PPUSH
36414: LD_VAR 0 4
36418: PPUSH
36419: LD_EXP 117
36423: PUSH
36424: LD_VAR 0 4
36428: ARRAY
36429: PPUSH
36430: LD_VAR 0 3
36434: PPUSH
36435: CALL_OW 3
36439: PPUSH
36440: CALL_OW 1
36444: ST_TO_ADDR
// end ; end ;
36445: GO 36274
36447: POP
36448: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36449: LD_VAR 0 1
36453: PPUSH
36454: LD_EXP 117
36458: PUSH
36459: LD_VAR 0 4
36463: ARRAY
36464: PUSH
36465: LD_INT 0
36467: PLUS
36468: PPUSH
36469: CALL_OW 505
// end ;
36473: LD_VAR 0 2
36477: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36478: LD_INT 0
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
// if not hack in hackTanks then
36484: LD_VAR 0 1
36488: PUSH
36489: LD_EXP 116
36493: IN
36494: NOT
36495: IFFALSE 36499
// exit ;
36497: GO 36584
// index := GetElementIndex ( hackTanks , hack ) ;
36499: LD_ADDR_VAR 0 5
36503: PUSH
36504: LD_EXP 116
36508: PPUSH
36509: LD_VAR 0 1
36513: PPUSH
36514: CALL 43342 0 2
36518: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36519: LD_ADDR_VAR 0 4
36523: PUSH
36524: DOUBLE
36525: LD_INT 1
36527: DEC
36528: ST_TO_ADDR
36529: LD_EXP 117
36533: PUSH
36534: LD_VAR 0 5
36538: ARRAY
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36582
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36543: LD_EXP 117
36547: PUSH
36548: LD_VAR 0 5
36552: ARRAY
36553: PUSH
36554: LD_VAR 0 4
36558: ARRAY
36559: PUSH
36560: LD_INT 1
36562: ARRAY
36563: PUSH
36564: LD_VAR 0 2
36568: EQUAL
36569: IFFALSE 36580
// KillUnit ( vehicle ) ;
36571: LD_VAR 0 2
36575: PPUSH
36576: CALL_OW 66
36580: GO 36540
36582: POP
36583: POP
// end ;
36584: LD_VAR 0 3
36588: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36589: LD_EXP 121
36593: NOT
36594: IFFALSE 36629
36596: GO 36598
36598: DISABLE
// begin initMiner := true ;
36599: LD_ADDR_EXP 121
36603: PUSH
36604: LD_INT 1
36606: ST_TO_ADDR
// minersList := [ ] ;
36607: LD_ADDR_EXP 122
36611: PUSH
36612: EMPTY
36613: ST_TO_ADDR
// minerMinesList := [ ] ;
36614: LD_ADDR_EXP 123
36618: PUSH
36619: EMPTY
36620: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36621: LD_ADDR_EXP 124
36625: PUSH
36626: LD_INT 5
36628: ST_TO_ADDR
// end ;
36629: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36630: LD_EXP 121
36634: PUSH
36635: LD_INT 34
36637: PUSH
36638: LD_INT 81
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PPUSH
36645: CALL_OW 69
36649: AND
36650: IFFALSE 37111
36652: GO 36654
36654: DISABLE
36655: LD_INT 0
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
// begin enable ;
36661: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36662: LD_ADDR_VAR 0 1
36666: PUSH
36667: LD_INT 34
36669: PUSH
36670: LD_INT 81
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PPUSH
36677: CALL_OW 69
36681: PUSH
36682: FOR_IN
36683: IFFALSE 36755
// begin if not i in minersList then
36685: LD_VAR 0 1
36689: PUSH
36690: LD_EXP 122
36694: IN
36695: NOT
36696: IFFALSE 36753
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36698: LD_ADDR_EXP 122
36702: PUSH
36703: LD_EXP 122
36707: PPUSH
36708: LD_EXP 122
36712: PUSH
36713: LD_INT 1
36715: PLUS
36716: PPUSH
36717: LD_VAR 0 1
36721: PPUSH
36722: CALL_OW 1
36726: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36727: LD_ADDR_EXP 123
36731: PUSH
36732: LD_EXP 123
36736: PPUSH
36737: LD_EXP 123
36741: PUSH
36742: LD_INT 1
36744: PLUS
36745: PPUSH
36746: EMPTY
36747: PPUSH
36748: CALL_OW 1
36752: ST_TO_ADDR
// end end ;
36753: GO 36682
36755: POP
36756: POP
// for i := minerMinesList downto 1 do
36757: LD_ADDR_VAR 0 1
36761: PUSH
36762: DOUBLE
36763: LD_EXP 123
36767: INC
36768: ST_TO_ADDR
36769: LD_INT 1
36771: PUSH
36772: FOR_DOWNTO
36773: IFFALSE 37109
// begin if IsLive ( minersList [ i ] ) then
36775: LD_EXP 122
36779: PUSH
36780: LD_VAR 0 1
36784: ARRAY
36785: PPUSH
36786: CALL_OW 300
36790: IFFALSE 36818
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36792: LD_EXP 122
36796: PUSH
36797: LD_VAR 0 1
36801: ARRAY
36802: PPUSH
36803: LD_EXP 123
36807: PUSH
36808: LD_VAR 0 1
36812: ARRAY
36813: PPUSH
36814: CALL_OW 505
// if not minerMinesList [ i ] then
36818: LD_EXP 123
36822: PUSH
36823: LD_VAR 0 1
36827: ARRAY
36828: NOT
36829: IFFALSE 36833
// continue ;
36831: GO 36772
// for j := minerMinesList [ i ] downto 1 do
36833: LD_ADDR_VAR 0 2
36837: PUSH
36838: DOUBLE
36839: LD_EXP 123
36843: PUSH
36844: LD_VAR 0 1
36848: ARRAY
36849: INC
36850: ST_TO_ADDR
36851: LD_INT 1
36853: PUSH
36854: FOR_DOWNTO
36855: IFFALSE 37105
// begin side := GetSide ( minersList [ i ] ) ;
36857: LD_ADDR_VAR 0 3
36861: PUSH
36862: LD_EXP 122
36866: PUSH
36867: LD_VAR 0 1
36871: ARRAY
36872: PPUSH
36873: CALL_OW 255
36877: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36878: LD_ADDR_VAR 0 4
36882: PUSH
36883: LD_EXP 123
36887: PUSH
36888: LD_VAR 0 1
36892: ARRAY
36893: PUSH
36894: LD_VAR 0 2
36898: ARRAY
36899: PUSH
36900: LD_INT 1
36902: ARRAY
36903: PPUSH
36904: LD_EXP 123
36908: PUSH
36909: LD_VAR 0 1
36913: ARRAY
36914: PUSH
36915: LD_VAR 0 2
36919: ARRAY
36920: PUSH
36921: LD_INT 2
36923: ARRAY
36924: PPUSH
36925: CALL_OW 428
36929: ST_TO_ADDR
// if not tmp then
36930: LD_VAR 0 4
36934: NOT
36935: IFFALSE 36939
// continue ;
36937: GO 36854
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36939: LD_VAR 0 4
36943: PUSH
36944: LD_INT 81
36946: PUSH
36947: LD_VAR 0 3
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PPUSH
36956: CALL_OW 69
36960: IN
36961: PUSH
36962: LD_EXP 123
36966: PUSH
36967: LD_VAR 0 1
36971: ARRAY
36972: PUSH
36973: LD_VAR 0 2
36977: ARRAY
36978: PUSH
36979: LD_INT 1
36981: ARRAY
36982: PPUSH
36983: LD_EXP 123
36987: PUSH
36988: LD_VAR 0 1
36992: ARRAY
36993: PUSH
36994: LD_VAR 0 2
36998: ARRAY
36999: PUSH
37000: LD_INT 2
37002: ARRAY
37003: PPUSH
37004: CALL_OW 458
37008: AND
37009: IFFALSE 37103
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37011: LD_EXP 123
37015: PUSH
37016: LD_VAR 0 1
37020: ARRAY
37021: PUSH
37022: LD_VAR 0 2
37026: ARRAY
37027: PUSH
37028: LD_INT 1
37030: ARRAY
37031: PPUSH
37032: LD_EXP 123
37036: PUSH
37037: LD_VAR 0 1
37041: ARRAY
37042: PUSH
37043: LD_VAR 0 2
37047: ARRAY
37048: PUSH
37049: LD_INT 2
37051: ARRAY
37052: PPUSH
37053: LD_VAR 0 3
37057: PPUSH
37058: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37062: LD_ADDR_EXP 123
37066: PUSH
37067: LD_EXP 123
37071: PPUSH
37072: LD_VAR 0 1
37076: PPUSH
37077: LD_EXP 123
37081: PUSH
37082: LD_VAR 0 1
37086: ARRAY
37087: PPUSH
37088: LD_VAR 0 2
37092: PPUSH
37093: CALL_OW 3
37097: PPUSH
37098: CALL_OW 1
37102: ST_TO_ADDR
// end ; end ;
37103: GO 36854
37105: POP
37106: POP
// end ;
37107: GO 36772
37109: POP
37110: POP
// end ;
37111: PPOPN 4
37113: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37114: LD_INT 0
37116: PPUSH
37117: PPUSH
// result := false ;
37118: LD_ADDR_VAR 0 4
37122: PUSH
37123: LD_INT 0
37125: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37126: LD_VAR 0 1
37130: PPUSH
37131: CALL_OW 264
37135: PUSH
37136: LD_INT 81
37138: EQUAL
37139: NOT
37140: IFFALSE 37144
// exit ;
37142: GO 37384
// index := GetElementIndex ( minersList , unit ) ;
37144: LD_ADDR_VAR 0 5
37148: PUSH
37149: LD_EXP 122
37153: PPUSH
37154: LD_VAR 0 1
37158: PPUSH
37159: CALL 43342 0 2
37163: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37164: LD_EXP 123
37168: PUSH
37169: LD_VAR 0 5
37173: ARRAY
37174: PUSH
37175: LD_EXP 124
37179: GREATEREQUAL
37180: IFFALSE 37184
// exit ;
37182: GO 37384
// ComMoveXY ( unit , x , y ) ;
37184: LD_VAR 0 1
37188: PPUSH
37189: LD_VAR 0 2
37193: PPUSH
37194: LD_VAR 0 3
37198: PPUSH
37199: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37203: LD_INT 35
37205: PPUSH
37206: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37210: LD_VAR 0 1
37214: PPUSH
37215: LD_VAR 0 2
37219: PPUSH
37220: LD_VAR 0 3
37224: PPUSH
37225: CALL 75094 0 3
37229: NOT
37230: PUSH
37231: LD_VAR 0 1
37235: PPUSH
37236: CALL_OW 314
37240: AND
37241: IFFALSE 37245
// exit ;
37243: GO 37384
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37245: LD_VAR 0 2
37249: PPUSH
37250: LD_VAR 0 3
37254: PPUSH
37255: CALL_OW 428
37259: PUSH
37260: LD_VAR 0 1
37264: EQUAL
37265: PUSH
37266: LD_VAR 0 1
37270: PPUSH
37271: CALL_OW 314
37275: NOT
37276: AND
37277: IFFALSE 37203
// PlaySoundXY ( x , y , PlantMine ) ;
37279: LD_VAR 0 2
37283: PPUSH
37284: LD_VAR 0 3
37288: PPUSH
37289: LD_STRING PlantMine
37291: PPUSH
37292: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37296: LD_VAR 0 2
37300: PPUSH
37301: LD_VAR 0 3
37305: PPUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 255
37315: PPUSH
37316: LD_INT 0
37318: PPUSH
37319: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37323: LD_ADDR_EXP 123
37327: PUSH
37328: LD_EXP 123
37332: PPUSH
37333: LD_VAR 0 5
37337: PUSH
37338: LD_EXP 123
37342: PUSH
37343: LD_VAR 0 5
37347: ARRAY
37348: PUSH
37349: LD_INT 1
37351: PLUS
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PPUSH
37357: LD_VAR 0 2
37361: PUSH
37362: LD_VAR 0 3
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PPUSH
37371: CALL 43557 0 3
37375: ST_TO_ADDR
// result := true ;
37376: LD_ADDR_VAR 0 4
37380: PUSH
37381: LD_INT 1
37383: ST_TO_ADDR
// end ;
37384: LD_VAR 0 4
37388: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37389: LD_INT 0
37391: PPUSH
37392: PPUSH
37393: PPUSH
// if not unit in minersList then
37394: LD_VAR 0 1
37398: PUSH
37399: LD_EXP 122
37403: IN
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 37801
// index := GetElementIndex ( minersList , unit ) ;
37409: LD_ADDR_VAR 0 6
37413: PUSH
37414: LD_EXP 122
37418: PPUSH
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL 43342 0 2
37428: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37429: LD_ADDR_VAR 0 5
37433: PUSH
37434: DOUBLE
37435: LD_EXP 123
37439: PUSH
37440: LD_VAR 0 6
37444: ARRAY
37445: INC
37446: ST_TO_ADDR
37447: LD_INT 1
37449: PUSH
37450: FOR_DOWNTO
37451: IFFALSE 37612
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37453: LD_EXP 123
37457: PUSH
37458: LD_VAR 0 6
37462: ARRAY
37463: PUSH
37464: LD_VAR 0 5
37468: ARRAY
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: PUSH
37474: LD_VAR 0 2
37478: EQUAL
37479: PUSH
37480: LD_EXP 123
37484: PUSH
37485: LD_VAR 0 6
37489: ARRAY
37490: PUSH
37491: LD_VAR 0 5
37495: ARRAY
37496: PUSH
37497: LD_INT 2
37499: ARRAY
37500: PUSH
37501: LD_VAR 0 3
37505: EQUAL
37506: AND
37507: IFFALSE 37610
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37509: LD_EXP 123
37513: PUSH
37514: LD_VAR 0 6
37518: ARRAY
37519: PUSH
37520: LD_VAR 0 5
37524: ARRAY
37525: PUSH
37526: LD_INT 1
37528: ARRAY
37529: PPUSH
37530: LD_EXP 123
37534: PUSH
37535: LD_VAR 0 6
37539: ARRAY
37540: PUSH
37541: LD_VAR 0 5
37545: ARRAY
37546: PUSH
37547: LD_INT 2
37549: ARRAY
37550: PPUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 255
37560: PPUSH
37561: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37565: LD_ADDR_EXP 123
37569: PUSH
37570: LD_EXP 123
37574: PPUSH
37575: LD_VAR 0 6
37579: PPUSH
37580: LD_EXP 123
37584: PUSH
37585: LD_VAR 0 6
37589: ARRAY
37590: PPUSH
37591: LD_VAR 0 5
37595: PPUSH
37596: CALL_OW 3
37600: PPUSH
37601: CALL_OW 1
37605: ST_TO_ADDR
// exit ;
37606: POP
37607: POP
37608: GO 37801
// end ; end ;
37610: GO 37450
37612: POP
37613: POP
// for i := minerMinesList [ index ] downto 1 do
37614: LD_ADDR_VAR 0 5
37618: PUSH
37619: DOUBLE
37620: LD_EXP 123
37624: PUSH
37625: LD_VAR 0 6
37629: ARRAY
37630: INC
37631: ST_TO_ADDR
37632: LD_INT 1
37634: PUSH
37635: FOR_DOWNTO
37636: IFFALSE 37799
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37638: LD_EXP 123
37642: PUSH
37643: LD_VAR 0 6
37647: ARRAY
37648: PUSH
37649: LD_VAR 0 5
37653: ARRAY
37654: PUSH
37655: LD_INT 1
37657: ARRAY
37658: PPUSH
37659: LD_EXP 123
37663: PUSH
37664: LD_VAR 0 6
37668: ARRAY
37669: PUSH
37670: LD_VAR 0 5
37674: ARRAY
37675: PUSH
37676: LD_INT 2
37678: ARRAY
37679: PPUSH
37680: LD_VAR 0 2
37684: PPUSH
37685: LD_VAR 0 3
37689: PPUSH
37690: CALL_OW 298
37694: PUSH
37695: LD_INT 6
37697: LESS
37698: IFFALSE 37797
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37700: LD_EXP 123
37704: PUSH
37705: LD_VAR 0 6
37709: ARRAY
37710: PUSH
37711: LD_VAR 0 5
37715: ARRAY
37716: PUSH
37717: LD_INT 1
37719: ARRAY
37720: PPUSH
37721: LD_EXP 123
37725: PUSH
37726: LD_VAR 0 6
37730: ARRAY
37731: PUSH
37732: LD_VAR 0 5
37736: ARRAY
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PPUSH
37742: LD_VAR 0 1
37746: PPUSH
37747: CALL_OW 255
37751: PPUSH
37752: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37756: LD_ADDR_EXP 123
37760: PUSH
37761: LD_EXP 123
37765: PPUSH
37766: LD_VAR 0 6
37770: PPUSH
37771: LD_EXP 123
37775: PUSH
37776: LD_VAR 0 6
37780: ARRAY
37781: PPUSH
37782: LD_VAR 0 5
37786: PPUSH
37787: CALL_OW 3
37791: PPUSH
37792: CALL_OW 1
37796: ST_TO_ADDR
// end ; end ;
37797: GO 37635
37799: POP
37800: POP
// end ;
37801: LD_VAR 0 4
37805: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37806: LD_INT 0
37808: PPUSH
37809: PPUSH
37810: PPUSH
37811: PPUSH
37812: PPUSH
37813: PPUSH
37814: PPUSH
37815: PPUSH
37816: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37817: LD_VAR 0 1
37821: PPUSH
37822: CALL_OW 264
37826: PUSH
37827: LD_INT 81
37829: EQUAL
37830: NOT
37831: PUSH
37832: LD_VAR 0 1
37836: PUSH
37837: LD_EXP 122
37841: IN
37842: NOT
37843: OR
37844: IFFALSE 37848
// exit ;
37846: GO 38170
// index := GetElementIndex ( minersList , unit ) ;
37848: LD_ADDR_VAR 0 6
37852: PUSH
37853: LD_EXP 122
37857: PPUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL 43342 0 2
37867: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37868: LD_ADDR_VAR 0 8
37872: PUSH
37873: LD_EXP 124
37877: PUSH
37878: LD_EXP 123
37882: PUSH
37883: LD_VAR 0 6
37887: ARRAY
37888: MINUS
37889: ST_TO_ADDR
// if not minesFreeAmount then
37890: LD_VAR 0 8
37894: NOT
37895: IFFALSE 37899
// exit ;
37897: GO 38170
// tmp := [ ] ;
37899: LD_ADDR_VAR 0 7
37903: PUSH
37904: EMPTY
37905: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37906: LD_ADDR_VAR 0 5
37910: PUSH
37911: DOUBLE
37912: LD_INT 1
37914: DEC
37915: ST_TO_ADDR
37916: LD_VAR 0 8
37920: PUSH
37921: FOR_TO
37922: IFFALSE 38117
// begin _d := rand ( 0 , 5 ) ;
37924: LD_ADDR_VAR 0 11
37928: PUSH
37929: LD_INT 0
37931: PPUSH
37932: LD_INT 5
37934: PPUSH
37935: CALL_OW 12
37939: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37940: LD_ADDR_VAR 0 12
37944: PUSH
37945: LD_INT 2
37947: PPUSH
37948: LD_INT 6
37950: PPUSH
37951: CALL_OW 12
37955: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37956: LD_ADDR_VAR 0 9
37960: PUSH
37961: LD_VAR 0 2
37965: PPUSH
37966: LD_VAR 0 11
37970: PPUSH
37971: LD_VAR 0 12
37975: PPUSH
37976: CALL_OW 272
37980: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37981: LD_ADDR_VAR 0 10
37985: PUSH
37986: LD_VAR 0 3
37990: PPUSH
37991: LD_VAR 0 11
37995: PPUSH
37996: LD_VAR 0 12
38000: PPUSH
38001: CALL_OW 273
38005: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38006: LD_VAR 0 9
38010: PPUSH
38011: LD_VAR 0 10
38015: PPUSH
38016: CALL_OW 488
38020: PUSH
38021: LD_VAR 0 9
38025: PUSH
38026: LD_VAR 0 10
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_VAR 0 7
38039: IN
38040: NOT
38041: AND
38042: PUSH
38043: LD_VAR 0 9
38047: PPUSH
38048: LD_VAR 0 10
38052: PPUSH
38053: CALL_OW 458
38057: NOT
38058: AND
38059: IFFALSE 38101
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38061: LD_ADDR_VAR 0 7
38065: PUSH
38066: LD_VAR 0 7
38070: PPUSH
38071: LD_VAR 0 7
38075: PUSH
38076: LD_INT 1
38078: PLUS
38079: PPUSH
38080: LD_VAR 0 9
38084: PUSH
38085: LD_VAR 0 10
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PPUSH
38094: CALL_OW 1
38098: ST_TO_ADDR
38099: GO 38115
// i := i - 1 ;
38101: LD_ADDR_VAR 0 5
38105: PUSH
38106: LD_VAR 0 5
38110: PUSH
38111: LD_INT 1
38113: MINUS
38114: ST_TO_ADDR
// end ;
38115: GO 37921
38117: POP
38118: POP
// for i in tmp do
38119: LD_ADDR_VAR 0 5
38123: PUSH
38124: LD_VAR 0 7
38128: PUSH
38129: FOR_IN
38130: IFFALSE 38168
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38132: LD_VAR 0 1
38136: PPUSH
38137: LD_VAR 0 5
38141: PUSH
38142: LD_INT 1
38144: ARRAY
38145: PPUSH
38146: LD_VAR 0 5
38150: PUSH
38151: LD_INT 2
38153: ARRAY
38154: PPUSH
38155: CALL 37114 0 3
38159: NOT
38160: IFFALSE 38166
// exit ;
38162: POP
38163: POP
38164: GO 38170
38166: GO 38129
38168: POP
38169: POP
// end ;
38170: LD_VAR 0 4
38174: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38175: LD_INT 0
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
38181: PPUSH
38182: PPUSH
38183: PPUSH
// if not GetClass ( unit ) = class_sniper then
38184: LD_VAR 0 1
38188: PPUSH
38189: CALL_OW 257
38193: PUSH
38194: LD_INT 5
38196: EQUAL
38197: NOT
38198: IFFALSE 38202
// exit ;
38200: GO 38590
// dist := 8 ;
38202: LD_ADDR_VAR 0 5
38206: PUSH
38207: LD_INT 8
38209: ST_TO_ADDR
// viewRange := 12 ;
38210: LD_ADDR_VAR 0 7
38214: PUSH
38215: LD_INT 12
38217: ST_TO_ADDR
// side := GetSide ( unit ) ;
38218: LD_ADDR_VAR 0 6
38222: PUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: CALL_OW 255
38232: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38233: LD_INT 61
38235: PPUSH
38236: LD_VAR 0 6
38240: PPUSH
38241: CALL_OW 321
38245: PUSH
38246: LD_INT 2
38248: EQUAL
38249: IFFALSE 38259
// viewRange := 16 ;
38251: LD_ADDR_VAR 0 7
38255: PUSH
38256: LD_INT 16
38258: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38259: LD_VAR 0 1
38263: PPUSH
38264: LD_VAR 0 2
38268: PPUSH
38269: LD_VAR 0 3
38273: PPUSH
38274: CALL_OW 297
38278: PUSH
38279: LD_VAR 0 5
38283: GREATER
38284: IFFALSE 38363
// begin ComMoveXY ( unit , x , y ) ;
38286: LD_VAR 0 1
38290: PPUSH
38291: LD_VAR 0 2
38295: PPUSH
38296: LD_VAR 0 3
38300: PPUSH
38301: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38305: LD_INT 35
38307: PPUSH
38308: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38312: LD_VAR 0 1
38316: PPUSH
38317: LD_VAR 0 2
38321: PPUSH
38322: LD_VAR 0 3
38326: PPUSH
38327: CALL 75094 0 3
38331: NOT
38332: IFFALSE 38336
// exit ;
38334: GO 38590
// until GetDistUnitXY ( unit , x , y ) < dist ;
38336: LD_VAR 0 1
38340: PPUSH
38341: LD_VAR 0 2
38345: PPUSH
38346: LD_VAR 0 3
38350: PPUSH
38351: CALL_OW 297
38355: PUSH
38356: LD_VAR 0 5
38360: LESS
38361: IFFALSE 38305
// end ; ComTurnXY ( unit , x , y ) ;
38363: LD_VAR 0 1
38367: PPUSH
38368: LD_VAR 0 2
38372: PPUSH
38373: LD_VAR 0 3
38377: PPUSH
38378: CALL_OW 118
// wait ( 5 ) ;
38382: LD_INT 5
38384: PPUSH
38385: CALL_OW 67
// _d := GetDir ( unit ) ;
38389: LD_ADDR_VAR 0 10
38393: PUSH
38394: LD_VAR 0 1
38398: PPUSH
38399: CALL_OW 254
38403: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38404: LD_ADDR_VAR 0 8
38408: PUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL_OW 250
38418: PPUSH
38419: LD_VAR 0 10
38423: PPUSH
38424: LD_VAR 0 5
38428: PPUSH
38429: CALL_OW 272
38433: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38434: LD_ADDR_VAR 0 9
38438: PUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 251
38448: PPUSH
38449: LD_VAR 0 10
38453: PPUSH
38454: LD_VAR 0 5
38458: PPUSH
38459: CALL_OW 273
38463: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38464: LD_VAR 0 8
38468: PPUSH
38469: LD_VAR 0 9
38473: PPUSH
38474: CALL_OW 488
38478: NOT
38479: IFFALSE 38483
// exit ;
38481: GO 38590
// ComAnimCustom ( unit , 1 ) ;
38483: LD_VAR 0 1
38487: PPUSH
38488: LD_INT 1
38490: PPUSH
38491: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38495: LD_VAR 0 8
38499: PPUSH
38500: LD_VAR 0 9
38504: PPUSH
38505: LD_VAR 0 6
38509: PPUSH
38510: LD_VAR 0 7
38514: PPUSH
38515: CALL_OW 330
// repeat wait ( 1 ) ;
38519: LD_INT 1
38521: PPUSH
38522: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38526: LD_VAR 0 1
38530: PPUSH
38531: CALL_OW 316
38535: PUSH
38536: LD_VAR 0 1
38540: PPUSH
38541: CALL_OW 314
38545: OR
38546: PUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL_OW 302
38556: NOT
38557: OR
38558: PUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: CALL_OW 301
38568: OR
38569: IFFALSE 38519
// RemoveSeeing ( _x , _y , side ) ;
38571: LD_VAR 0 8
38575: PPUSH
38576: LD_VAR 0 9
38580: PPUSH
38581: LD_VAR 0 6
38585: PPUSH
38586: CALL_OW 331
// end ; end_of_file
38590: LD_VAR 0 4
38594: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38595: LD_INT 0
38597: PPUSH
38598: PPUSH
// if exist_mode then
38599: LD_VAR 0 2
38603: IFFALSE 38628
// unit := CreateCharacter ( prefix & ident ) else
38605: LD_ADDR_VAR 0 5
38609: PUSH
38610: LD_VAR 0 3
38614: PUSH
38615: LD_VAR 0 1
38619: STR
38620: PPUSH
38621: CALL_OW 34
38625: ST_TO_ADDR
38626: GO 38643
// unit := NewCharacter ( ident ) ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 25
38642: ST_TO_ADDR
// result := unit ;
38643: LD_ADDR_VAR 0 4
38647: PUSH
38648: LD_VAR 0 5
38652: ST_TO_ADDR
// end ;
38653: LD_VAR 0 4
38657: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38658: LD_INT 0
38660: PPUSH
38661: PPUSH
// if not side or not nation then
38662: LD_VAR 0 1
38666: NOT
38667: PUSH
38668: LD_VAR 0 2
38672: NOT
38673: OR
38674: IFFALSE 38678
// exit ;
38676: GO 39446
// case nation of nation_american :
38678: LD_VAR 0 2
38682: PUSH
38683: LD_INT 1
38685: DOUBLE
38686: EQUAL
38687: IFTRUE 38691
38689: GO 38905
38691: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38692: LD_ADDR_VAR 0 4
38696: PUSH
38697: LD_INT 35
38699: PUSH
38700: LD_INT 45
38702: PUSH
38703: LD_INT 46
38705: PUSH
38706: LD_INT 47
38708: PUSH
38709: LD_INT 82
38711: PUSH
38712: LD_INT 83
38714: PUSH
38715: LD_INT 84
38717: PUSH
38718: LD_INT 85
38720: PUSH
38721: LD_INT 86
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: LD_INT 6
38732: PUSH
38733: LD_INT 15
38735: PUSH
38736: LD_INT 16
38738: PUSH
38739: LD_INT 7
38741: PUSH
38742: LD_INT 12
38744: PUSH
38745: LD_INT 13
38747: PUSH
38748: LD_INT 10
38750: PUSH
38751: LD_INT 14
38753: PUSH
38754: LD_INT 20
38756: PUSH
38757: LD_INT 21
38759: PUSH
38760: LD_INT 22
38762: PUSH
38763: LD_INT 25
38765: PUSH
38766: LD_INT 32
38768: PUSH
38769: LD_INT 27
38771: PUSH
38772: LD_INT 36
38774: PUSH
38775: LD_INT 69
38777: PUSH
38778: LD_INT 39
38780: PUSH
38781: LD_INT 34
38783: PUSH
38784: LD_INT 40
38786: PUSH
38787: LD_INT 48
38789: PUSH
38790: LD_INT 49
38792: PUSH
38793: LD_INT 50
38795: PUSH
38796: LD_INT 51
38798: PUSH
38799: LD_INT 52
38801: PUSH
38802: LD_INT 53
38804: PUSH
38805: LD_INT 54
38807: PUSH
38808: LD_INT 55
38810: PUSH
38811: LD_INT 56
38813: PUSH
38814: LD_INT 57
38816: PUSH
38817: LD_INT 58
38819: PUSH
38820: LD_INT 59
38822: PUSH
38823: LD_INT 60
38825: PUSH
38826: LD_INT 61
38828: PUSH
38829: LD_INT 62
38831: PUSH
38832: LD_INT 80
38834: PUSH
38835: LD_INT 82
38837: PUSH
38838: LD_INT 83
38840: PUSH
38841: LD_INT 84
38843: PUSH
38844: LD_INT 85
38846: PUSH
38847: LD_INT 86
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: ST_TO_ADDR
38903: GO 39370
38905: LD_INT 2
38907: DOUBLE
38908: EQUAL
38909: IFTRUE 38913
38911: GO 39139
38913: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38914: LD_ADDR_VAR 0 4
38918: PUSH
38919: LD_INT 35
38921: PUSH
38922: LD_INT 45
38924: PUSH
38925: LD_INT 46
38927: PUSH
38928: LD_INT 47
38930: PUSH
38931: LD_INT 82
38933: PUSH
38934: LD_INT 83
38936: PUSH
38937: LD_INT 84
38939: PUSH
38940: LD_INT 85
38942: PUSH
38943: LD_INT 87
38945: PUSH
38946: LD_INT 70
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 11
38954: PUSH
38955: LD_INT 3
38957: PUSH
38958: LD_INT 4
38960: PUSH
38961: LD_INT 5
38963: PUSH
38964: LD_INT 6
38966: PUSH
38967: LD_INT 15
38969: PUSH
38970: LD_INT 18
38972: PUSH
38973: LD_INT 7
38975: PUSH
38976: LD_INT 17
38978: PUSH
38979: LD_INT 8
38981: PUSH
38982: LD_INT 20
38984: PUSH
38985: LD_INT 21
38987: PUSH
38988: LD_INT 22
38990: PUSH
38991: LD_INT 72
38993: PUSH
38994: LD_INT 26
38996: PUSH
38997: LD_INT 69
38999: PUSH
39000: LD_INT 39
39002: PUSH
39003: LD_INT 40
39005: PUSH
39006: LD_INT 41
39008: PUSH
39009: LD_INT 42
39011: PUSH
39012: LD_INT 43
39014: PUSH
39015: LD_INT 48
39017: PUSH
39018: LD_INT 49
39020: PUSH
39021: LD_INT 50
39023: PUSH
39024: LD_INT 51
39026: PUSH
39027: LD_INT 52
39029: PUSH
39030: LD_INT 53
39032: PUSH
39033: LD_INT 54
39035: PUSH
39036: LD_INT 55
39038: PUSH
39039: LD_INT 56
39041: PUSH
39042: LD_INT 60
39044: PUSH
39045: LD_INT 61
39047: PUSH
39048: LD_INT 62
39050: PUSH
39051: LD_INT 66
39053: PUSH
39054: LD_INT 67
39056: PUSH
39057: LD_INT 68
39059: PUSH
39060: LD_INT 81
39062: PUSH
39063: LD_INT 82
39065: PUSH
39066: LD_INT 83
39068: PUSH
39069: LD_INT 84
39071: PUSH
39072: LD_INT 85
39074: PUSH
39075: LD_INT 87
39077: PUSH
39078: LD_INT 88
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: ST_TO_ADDR
39137: GO 39370
39139: LD_INT 3
39141: DOUBLE
39142: EQUAL
39143: IFTRUE 39147
39145: GO 39369
39147: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39148: LD_ADDR_VAR 0 4
39152: PUSH
39153: LD_INT 46
39155: PUSH
39156: LD_INT 47
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 82
39167: PUSH
39168: LD_INT 83
39170: PUSH
39171: LD_INT 84
39173: PUSH
39174: LD_INT 85
39176: PUSH
39177: LD_INT 86
39179: PUSH
39180: LD_INT 11
39182: PUSH
39183: LD_INT 9
39185: PUSH
39186: LD_INT 20
39188: PUSH
39189: LD_INT 19
39191: PUSH
39192: LD_INT 21
39194: PUSH
39195: LD_INT 24
39197: PUSH
39198: LD_INT 22
39200: PUSH
39201: LD_INT 25
39203: PUSH
39204: LD_INT 28
39206: PUSH
39207: LD_INT 29
39209: PUSH
39210: LD_INT 30
39212: PUSH
39213: LD_INT 31
39215: PUSH
39216: LD_INT 37
39218: PUSH
39219: LD_INT 38
39221: PUSH
39222: LD_INT 32
39224: PUSH
39225: LD_INT 27
39227: PUSH
39228: LD_INT 33
39230: PUSH
39231: LD_INT 69
39233: PUSH
39234: LD_INT 39
39236: PUSH
39237: LD_INT 34
39239: PUSH
39240: LD_INT 40
39242: PUSH
39243: LD_INT 71
39245: PUSH
39246: LD_INT 23
39248: PUSH
39249: LD_INT 44
39251: PUSH
39252: LD_INT 48
39254: PUSH
39255: LD_INT 49
39257: PUSH
39258: LD_INT 50
39260: PUSH
39261: LD_INT 51
39263: PUSH
39264: LD_INT 52
39266: PUSH
39267: LD_INT 53
39269: PUSH
39270: LD_INT 54
39272: PUSH
39273: LD_INT 55
39275: PUSH
39276: LD_INT 56
39278: PUSH
39279: LD_INT 57
39281: PUSH
39282: LD_INT 58
39284: PUSH
39285: LD_INT 59
39287: PUSH
39288: LD_INT 63
39290: PUSH
39291: LD_INT 64
39293: PUSH
39294: LD_INT 65
39296: PUSH
39297: LD_INT 82
39299: PUSH
39300: LD_INT 83
39302: PUSH
39303: LD_INT 84
39305: PUSH
39306: LD_INT 85
39308: PUSH
39309: LD_INT 86
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: ST_TO_ADDR
39367: GO 39370
39369: POP
// if state > - 1 and state < 3 then
39370: LD_VAR 0 3
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: GREATER
39379: PUSH
39380: LD_VAR 0 3
39384: PUSH
39385: LD_INT 3
39387: LESS
39388: AND
39389: IFFALSE 39446
// for i in result do
39391: LD_ADDR_VAR 0 5
39395: PUSH
39396: LD_VAR 0 4
39400: PUSH
39401: FOR_IN
39402: IFFALSE 39444
// if GetTech ( i , side ) <> state then
39404: LD_VAR 0 5
39408: PPUSH
39409: LD_VAR 0 1
39413: PPUSH
39414: CALL_OW 321
39418: PUSH
39419: LD_VAR 0 3
39423: NONEQUAL
39424: IFFALSE 39442
// result := result diff i ;
39426: LD_ADDR_VAR 0 4
39430: PUSH
39431: LD_VAR 0 4
39435: PUSH
39436: LD_VAR 0 5
39440: DIFF
39441: ST_TO_ADDR
39442: GO 39401
39444: POP
39445: POP
// end ;
39446: LD_VAR 0 4
39450: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39451: LD_INT 0
39453: PPUSH
39454: PPUSH
39455: PPUSH
// result := true ;
39456: LD_ADDR_VAR 0 3
39460: PUSH
39461: LD_INT 1
39463: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39464: LD_ADDR_VAR 0 5
39468: PUSH
39469: LD_VAR 0 2
39473: PPUSH
39474: CALL_OW 480
39478: ST_TO_ADDR
// if not tmp then
39479: LD_VAR 0 5
39483: NOT
39484: IFFALSE 39488
// exit ;
39486: GO 39537
// for i in tmp do
39488: LD_ADDR_VAR 0 4
39492: PUSH
39493: LD_VAR 0 5
39497: PUSH
39498: FOR_IN
39499: IFFALSE 39535
// if GetTech ( i , side ) <> state_researched then
39501: LD_VAR 0 4
39505: PPUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL_OW 321
39515: PUSH
39516: LD_INT 2
39518: NONEQUAL
39519: IFFALSE 39533
// begin result := false ;
39521: LD_ADDR_VAR 0 3
39525: PUSH
39526: LD_INT 0
39528: ST_TO_ADDR
// exit ;
39529: POP
39530: POP
39531: GO 39537
// end ;
39533: GO 39498
39535: POP
39536: POP
// end ;
39537: LD_VAR 0 3
39541: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39557: LD_VAR 0 1
39561: NOT
39562: PUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 257
39572: PUSH
39573: LD_INT 9
39575: NONEQUAL
39576: OR
39577: IFFALSE 39581
// exit ;
39579: GO 40154
// side := GetSide ( unit ) ;
39581: LD_ADDR_VAR 0 9
39585: PUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: CALL_OW 255
39595: ST_TO_ADDR
// tech_space := tech_spacanom ;
39596: LD_ADDR_VAR 0 12
39600: PUSH
39601: LD_INT 29
39603: ST_TO_ADDR
// tech_time := tech_taurad ;
39604: LD_ADDR_VAR 0 13
39608: PUSH
39609: LD_INT 28
39611: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39612: LD_ADDR_VAR 0 11
39616: PUSH
39617: LD_VAR 0 1
39621: PPUSH
39622: CALL_OW 310
39626: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39627: LD_VAR 0 11
39631: PPUSH
39632: CALL_OW 247
39636: PUSH
39637: LD_INT 2
39639: EQUAL
39640: IFFALSE 39644
// exit ;
39642: GO 40154
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39644: LD_ADDR_VAR 0 8
39648: PUSH
39649: LD_INT 81
39651: PUSH
39652: LD_VAR 0 9
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 3
39663: PUSH
39664: LD_INT 21
39666: PUSH
39667: LD_INT 3
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL_OW 69
39686: ST_TO_ADDR
// if not tmp then
39687: LD_VAR 0 8
39691: NOT
39692: IFFALSE 39696
// exit ;
39694: GO 40154
// if in_unit then
39696: LD_VAR 0 11
39700: IFFALSE 39724
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39702: LD_ADDR_VAR 0 10
39706: PUSH
39707: LD_VAR 0 8
39711: PPUSH
39712: LD_VAR 0 11
39716: PPUSH
39717: CALL_OW 74
39721: ST_TO_ADDR
39722: GO 39744
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39724: LD_ADDR_VAR 0 10
39728: PUSH
39729: LD_VAR 0 8
39733: PPUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 74
39743: ST_TO_ADDR
// if not enemy then
39744: LD_VAR 0 10
39748: NOT
39749: IFFALSE 39753
// exit ;
39751: GO 40154
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39753: LD_VAR 0 11
39757: PUSH
39758: LD_VAR 0 11
39762: PPUSH
39763: LD_VAR 0 10
39767: PPUSH
39768: CALL_OW 296
39772: PUSH
39773: LD_INT 13
39775: GREATER
39776: AND
39777: PUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: LD_VAR 0 10
39787: PPUSH
39788: CALL_OW 296
39792: PUSH
39793: LD_INT 12
39795: GREATER
39796: OR
39797: IFFALSE 39801
// exit ;
39799: GO 40154
// missile := [ 1 ] ;
39801: LD_ADDR_VAR 0 14
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39812: LD_VAR 0 9
39816: PPUSH
39817: LD_VAR 0 12
39821: PPUSH
39822: CALL_OW 325
39826: IFFALSE 39855
// missile := Replace ( missile , missile + 1 , 2 ) ;
39828: LD_ADDR_VAR 0 14
39832: PUSH
39833: LD_VAR 0 14
39837: PPUSH
39838: LD_VAR 0 14
39842: PUSH
39843: LD_INT 1
39845: PLUS
39846: PPUSH
39847: LD_INT 2
39849: PPUSH
39850: CALL_OW 1
39854: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39855: LD_VAR 0 9
39859: PPUSH
39860: LD_VAR 0 13
39864: PPUSH
39865: CALL_OW 325
39869: PUSH
39870: LD_VAR 0 10
39874: PPUSH
39875: CALL_OW 255
39879: PPUSH
39880: LD_VAR 0 13
39884: PPUSH
39885: CALL_OW 325
39889: NOT
39890: AND
39891: IFFALSE 39920
// missile := Replace ( missile , missile + 1 , 3 ) ;
39893: LD_ADDR_VAR 0 14
39897: PUSH
39898: LD_VAR 0 14
39902: PPUSH
39903: LD_VAR 0 14
39907: PUSH
39908: LD_INT 1
39910: PLUS
39911: PPUSH
39912: LD_INT 3
39914: PPUSH
39915: CALL_OW 1
39919: ST_TO_ADDR
// if missile < 2 then
39920: LD_VAR 0 14
39924: PUSH
39925: LD_INT 2
39927: LESS
39928: IFFALSE 39932
// exit ;
39930: GO 40154
// x := GetX ( enemy ) ;
39932: LD_ADDR_VAR 0 4
39936: PUSH
39937: LD_VAR 0 10
39941: PPUSH
39942: CALL_OW 250
39946: ST_TO_ADDR
// y := GetY ( enemy ) ;
39947: LD_ADDR_VAR 0 5
39951: PUSH
39952: LD_VAR 0 10
39956: PPUSH
39957: CALL_OW 251
39961: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39962: LD_ADDR_VAR 0 6
39966: PUSH
39967: LD_VAR 0 4
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PPUSH
39976: LD_INT 1
39978: PPUSH
39979: CALL_OW 12
39983: PLUS
39984: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39985: LD_ADDR_VAR 0 7
39989: PUSH
39990: LD_VAR 0 5
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PPUSH
39999: LD_INT 1
40001: PPUSH
40002: CALL_OW 12
40006: PLUS
40007: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40008: LD_VAR 0 6
40012: PPUSH
40013: LD_VAR 0 7
40017: PPUSH
40018: CALL_OW 488
40022: NOT
40023: IFFALSE 40045
// begin _x := x ;
40025: LD_ADDR_VAR 0 6
40029: PUSH
40030: LD_VAR 0 4
40034: ST_TO_ADDR
// _y := y ;
40035: LD_ADDR_VAR 0 7
40039: PUSH
40040: LD_VAR 0 5
40044: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40045: LD_ADDR_VAR 0 3
40049: PUSH
40050: LD_INT 1
40052: PPUSH
40053: LD_VAR 0 14
40057: PPUSH
40058: CALL_OW 12
40062: ST_TO_ADDR
// case i of 1 :
40063: LD_VAR 0 3
40067: PUSH
40068: LD_INT 1
40070: DOUBLE
40071: EQUAL
40072: IFTRUE 40076
40074: GO 40093
40076: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40077: LD_VAR 0 1
40081: PPUSH
40082: LD_VAR 0 10
40086: PPUSH
40087: CALL_OW 115
40091: GO 40154
40093: LD_INT 2
40095: DOUBLE
40096: EQUAL
40097: IFTRUE 40101
40099: GO 40123
40101: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40102: LD_VAR 0 1
40106: PPUSH
40107: LD_VAR 0 6
40111: PPUSH
40112: LD_VAR 0 7
40116: PPUSH
40117: CALL_OW 153
40121: GO 40154
40123: LD_INT 3
40125: DOUBLE
40126: EQUAL
40127: IFTRUE 40131
40129: GO 40153
40131: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40132: LD_VAR 0 1
40136: PPUSH
40137: LD_VAR 0 6
40141: PPUSH
40142: LD_VAR 0 7
40146: PPUSH
40147: CALL_OW 154
40151: GO 40154
40153: POP
// end ;
40154: LD_VAR 0 2
40158: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40159: LD_INT 0
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
// if not unit or not building then
40167: LD_VAR 0 1
40171: NOT
40172: PUSH
40173: LD_VAR 0 2
40177: NOT
40178: OR
40179: IFFALSE 40183
// exit ;
40181: GO 40341
// x := GetX ( building ) ;
40183: LD_ADDR_VAR 0 5
40187: PUSH
40188: LD_VAR 0 2
40192: PPUSH
40193: CALL_OW 250
40197: ST_TO_ADDR
// y := GetY ( building ) ;
40198: LD_ADDR_VAR 0 6
40202: PUSH
40203: LD_VAR 0 2
40207: PPUSH
40208: CALL_OW 251
40212: ST_TO_ADDR
// for i = 0 to 5 do
40213: LD_ADDR_VAR 0 4
40217: PUSH
40218: DOUBLE
40219: LD_INT 0
40221: DEC
40222: ST_TO_ADDR
40223: LD_INT 5
40225: PUSH
40226: FOR_TO
40227: IFFALSE 40339
// begin _x := ShiftX ( x , i , 3 ) ;
40229: LD_ADDR_VAR 0 7
40233: PUSH
40234: LD_VAR 0 5
40238: PPUSH
40239: LD_VAR 0 4
40243: PPUSH
40244: LD_INT 3
40246: PPUSH
40247: CALL_OW 272
40251: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40252: LD_ADDR_VAR 0 8
40256: PUSH
40257: LD_VAR 0 6
40261: PPUSH
40262: LD_VAR 0 4
40266: PPUSH
40267: LD_INT 3
40269: PPUSH
40270: CALL_OW 273
40274: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40275: LD_VAR 0 7
40279: PPUSH
40280: LD_VAR 0 8
40284: PPUSH
40285: CALL_OW 488
40289: NOT
40290: IFFALSE 40294
// continue ;
40292: GO 40226
// if HexInfo ( _x , _y ) = 0 then
40294: LD_VAR 0 7
40298: PPUSH
40299: LD_VAR 0 8
40303: PPUSH
40304: CALL_OW 428
40308: PUSH
40309: LD_INT 0
40311: EQUAL
40312: IFFALSE 40337
// begin ComMoveXY ( unit , _x , _y ) ;
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_VAR 0 7
40323: PPUSH
40324: LD_VAR 0 8
40328: PPUSH
40329: CALL_OW 111
// exit ;
40333: POP
40334: POP
40335: GO 40341
// end ; end ;
40337: GO 40226
40339: POP
40340: POP
// end ;
40341: LD_VAR 0 3
40345: RET
// export function ScanBase ( side , base_area ) ; begin
40346: LD_INT 0
40348: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40349: LD_ADDR_VAR 0 3
40353: PUSH
40354: LD_VAR 0 2
40358: PPUSH
40359: LD_INT 81
40361: PUSH
40362: LD_VAR 0 1
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PPUSH
40371: CALL_OW 70
40375: ST_TO_ADDR
// end ;
40376: LD_VAR 0 3
40380: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40381: LD_INT 0
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
// result := false ;
40387: LD_ADDR_VAR 0 2
40391: PUSH
40392: LD_INT 0
40394: ST_TO_ADDR
// side := GetSide ( unit ) ;
40395: LD_ADDR_VAR 0 3
40399: PUSH
40400: LD_VAR 0 1
40404: PPUSH
40405: CALL_OW 255
40409: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40410: LD_ADDR_VAR 0 4
40414: PUSH
40415: LD_VAR 0 1
40419: PPUSH
40420: CALL_OW 248
40424: ST_TO_ADDR
// case nat of 1 :
40425: LD_VAR 0 4
40429: PUSH
40430: LD_INT 1
40432: DOUBLE
40433: EQUAL
40434: IFTRUE 40438
40436: GO 40449
40438: POP
// tech := tech_lassight ; 2 :
40439: LD_ADDR_VAR 0 5
40443: PUSH
40444: LD_INT 12
40446: ST_TO_ADDR
40447: GO 40488
40449: LD_INT 2
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40468
40457: POP
// tech := tech_mortar ; 3 :
40458: LD_ADDR_VAR 0 5
40462: PUSH
40463: LD_INT 41
40465: ST_TO_ADDR
40466: GO 40488
40468: LD_INT 3
40470: DOUBLE
40471: EQUAL
40472: IFTRUE 40476
40474: GO 40487
40476: POP
// tech := tech_bazooka ; end ;
40477: LD_ADDR_VAR 0 5
40481: PUSH
40482: LD_INT 44
40484: ST_TO_ADDR
40485: GO 40488
40487: POP
// if Researched ( side , tech ) then
40488: LD_VAR 0 3
40492: PPUSH
40493: LD_VAR 0 5
40497: PPUSH
40498: CALL_OW 325
40502: IFFALSE 40529
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40504: LD_ADDR_VAR 0 2
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: LD_INT 8
40514: PUSH
40515: LD_INT 9
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: PUSH
40523: LD_VAR 0 4
40527: ARRAY
40528: ST_TO_ADDR
// end ;
40529: LD_VAR 0 2
40533: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40534: LD_INT 0
40536: PPUSH
40537: PPUSH
40538: PPUSH
// if not mines then
40539: LD_VAR 0 2
40543: NOT
40544: IFFALSE 40548
// exit ;
40546: GO 40692
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40548: LD_ADDR_VAR 0 5
40552: PUSH
40553: LD_INT 81
40555: PUSH
40556: LD_VAR 0 1
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 3
40567: PUSH
40568: LD_INT 21
40570: PUSH
40571: LD_INT 3
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PPUSH
40586: CALL_OW 69
40590: ST_TO_ADDR
// for i in mines do
40591: LD_ADDR_VAR 0 4
40595: PUSH
40596: LD_VAR 0 2
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40690
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40604: LD_VAR 0 4
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: PPUSH
40613: LD_VAR 0 4
40617: PUSH
40618: LD_INT 2
40620: ARRAY
40621: PPUSH
40622: CALL_OW 458
40626: NOT
40627: IFFALSE 40631
// continue ;
40629: GO 40601
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40631: LD_VAR 0 4
40635: PUSH
40636: LD_INT 1
40638: ARRAY
40639: PPUSH
40640: LD_VAR 0 4
40644: PUSH
40645: LD_INT 2
40647: ARRAY
40648: PPUSH
40649: CALL_OW 428
40653: PUSH
40654: LD_VAR 0 5
40658: IN
40659: IFFALSE 40688
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40661: LD_VAR 0 4
40665: PUSH
40666: LD_INT 1
40668: ARRAY
40669: PPUSH
40670: LD_VAR 0 4
40674: PUSH
40675: LD_INT 2
40677: ARRAY
40678: PPUSH
40679: LD_VAR 0 1
40683: PPUSH
40684: CALL_OW 456
// end ;
40688: GO 40601
40690: POP
40691: POP
// end ;
40692: LD_VAR 0 3
40696: RET
// export function Count ( array ) ; begin
40697: LD_INT 0
40699: PPUSH
// result := array + 0 ;
40700: LD_ADDR_VAR 0 2
40704: PUSH
40705: LD_VAR 0 1
40709: PUSH
40710: LD_INT 0
40712: PLUS
40713: ST_TO_ADDR
// end ;
40714: LD_VAR 0 2
40718: RET
// export function IsEmpty ( building ) ; begin
40719: LD_INT 0
40721: PPUSH
// if not building then
40722: LD_VAR 0 1
40726: NOT
40727: IFFALSE 40731
// exit ;
40729: GO 40774
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40731: LD_ADDR_VAR 0 2
40735: PUSH
40736: LD_VAR 0 1
40740: PUSH
40741: LD_INT 22
40743: PUSH
40744: LD_VAR 0 1
40748: PPUSH
40749: CALL_OW 255
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 58
40760: PUSH
40761: EMPTY
40762: LIST
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PPUSH
40768: CALL_OW 69
40772: IN
40773: ST_TO_ADDR
// end ;
40774: LD_VAR 0 2
40778: RET
// export function IsNotFull ( building ) ; var places ; begin
40779: LD_INT 0
40781: PPUSH
40782: PPUSH
// if not building then
40783: LD_VAR 0 1
40787: NOT
40788: IFFALSE 40792
// exit ;
40790: GO 40820
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40792: LD_ADDR_VAR 0 2
40796: PUSH
40797: LD_VAR 0 1
40801: PPUSH
40802: LD_INT 3
40804: PUSH
40805: LD_INT 62
40807: PUSH
40808: EMPTY
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PPUSH
40815: CALL_OW 72
40819: ST_TO_ADDR
// end ;
40820: LD_VAR 0 2
40824: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40825: LD_INT 0
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
// tmp := [ ] ;
40831: LD_ADDR_VAR 0 3
40835: PUSH
40836: EMPTY
40837: ST_TO_ADDR
// list := [ ] ;
40838: LD_ADDR_VAR 0 5
40842: PUSH
40843: EMPTY
40844: ST_TO_ADDR
// for i = 16 to 25 do
40845: LD_ADDR_VAR 0 4
40849: PUSH
40850: DOUBLE
40851: LD_INT 16
40853: DEC
40854: ST_TO_ADDR
40855: LD_INT 25
40857: PUSH
40858: FOR_TO
40859: IFFALSE 40932
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40861: LD_ADDR_VAR 0 3
40865: PUSH
40866: LD_VAR 0 3
40870: PUSH
40871: LD_INT 22
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 255
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 91
40890: PUSH
40891: LD_VAR 0 1
40895: PUSH
40896: LD_INT 6
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 30
40906: PUSH
40907: LD_VAR 0 4
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: LIST
40920: PUSH
40921: EMPTY
40922: LIST
40923: PPUSH
40924: CALL_OW 69
40928: ADD
40929: ST_TO_ADDR
40930: GO 40858
40932: POP
40933: POP
// for i = 1 to tmp do
40934: LD_ADDR_VAR 0 4
40938: PUSH
40939: DOUBLE
40940: LD_INT 1
40942: DEC
40943: ST_TO_ADDR
40944: LD_VAR 0 3
40948: PUSH
40949: FOR_TO
40950: IFFALSE 41038
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40952: LD_ADDR_VAR 0 5
40956: PUSH
40957: LD_VAR 0 5
40961: PUSH
40962: LD_VAR 0 3
40966: PUSH
40967: LD_VAR 0 4
40971: ARRAY
40972: PPUSH
40973: CALL_OW 266
40977: PUSH
40978: LD_VAR 0 3
40982: PUSH
40983: LD_VAR 0 4
40987: ARRAY
40988: PPUSH
40989: CALL_OW 250
40993: PUSH
40994: LD_VAR 0 3
40998: PUSH
40999: LD_VAR 0 4
41003: ARRAY
41004: PPUSH
41005: CALL_OW 251
41009: PUSH
41010: LD_VAR 0 3
41014: PUSH
41015: LD_VAR 0 4
41019: ARRAY
41020: PPUSH
41021: CALL_OW 254
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: ADD
41035: ST_TO_ADDR
41036: GO 40949
41038: POP
41039: POP
// result := list ;
41040: LD_ADDR_VAR 0 2
41044: PUSH
41045: LD_VAR 0 5
41049: ST_TO_ADDR
// end ;
41050: LD_VAR 0 2
41054: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41055: LD_INT 0
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
// if not factory then
41064: LD_VAR 0 1
41068: NOT
41069: IFFALSE 41073
// exit ;
41071: GO 41666
// if control = control_apeman then
41073: LD_VAR 0 4
41077: PUSH
41078: LD_INT 5
41080: EQUAL
41081: IFFALSE 41190
// begin tmp := UnitsInside ( factory ) ;
41083: LD_ADDR_VAR 0 8
41087: PUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: CALL_OW 313
41097: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41098: LD_VAR 0 8
41102: PPUSH
41103: LD_INT 25
41105: PUSH
41106: LD_INT 12
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PPUSH
41113: CALL_OW 72
41117: NOT
41118: IFFALSE 41128
// control := control_manual ;
41120: LD_ADDR_VAR 0 4
41124: PUSH
41125: LD_INT 1
41127: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41128: LD_ADDR_VAR 0 8
41132: PUSH
41133: LD_VAR 0 1
41137: PPUSH
41138: CALL 40825 0 1
41142: ST_TO_ADDR
// if tmp then
41143: LD_VAR 0 8
41147: IFFALSE 41190
// begin for i in tmp do
41149: LD_ADDR_VAR 0 7
41153: PUSH
41154: LD_VAR 0 8
41158: PUSH
41159: FOR_IN
41160: IFFALSE 41188
// if i [ 1 ] = b_ext_radio then
41162: LD_VAR 0 7
41166: PUSH
41167: LD_INT 1
41169: ARRAY
41170: PUSH
41171: LD_INT 22
41173: EQUAL
41174: IFFALSE 41186
// begin control := control_remote ;
41176: LD_ADDR_VAR 0 4
41180: PUSH
41181: LD_INT 2
41183: ST_TO_ADDR
// break ;
41184: GO 41188
// end ;
41186: GO 41159
41188: POP
41189: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41190: LD_VAR 0 1
41194: PPUSH
41195: LD_VAR 0 2
41199: PPUSH
41200: LD_VAR 0 3
41204: PPUSH
41205: LD_VAR 0 4
41209: PPUSH
41210: LD_VAR 0 5
41214: PPUSH
41215: CALL_OW 448
41219: IFFALSE 41254
// begin result := [ chassis , engine , control , weapon ] ;
41221: LD_ADDR_VAR 0 6
41225: PUSH
41226: LD_VAR 0 2
41230: PUSH
41231: LD_VAR 0 3
41235: PUSH
41236: LD_VAR 0 4
41240: PUSH
41241: LD_VAR 0 5
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// exit ;
41252: GO 41666
// end ; _chassis := AvailableChassisList ( factory ) ;
41254: LD_ADDR_VAR 0 9
41258: PUSH
41259: LD_VAR 0 1
41263: PPUSH
41264: CALL_OW 475
41268: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41269: LD_ADDR_VAR 0 11
41273: PUSH
41274: LD_VAR 0 1
41278: PPUSH
41279: CALL_OW 476
41283: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41284: LD_ADDR_VAR 0 12
41288: PUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 477
41298: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41299: LD_ADDR_VAR 0 10
41303: PUSH
41304: LD_VAR 0 1
41308: PPUSH
41309: CALL_OW 478
41313: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41314: LD_VAR 0 9
41318: NOT
41319: PUSH
41320: LD_VAR 0 11
41324: NOT
41325: OR
41326: PUSH
41327: LD_VAR 0 12
41331: NOT
41332: OR
41333: PUSH
41334: LD_VAR 0 10
41338: NOT
41339: OR
41340: IFFALSE 41375
// begin result := [ chassis , engine , control , weapon ] ;
41342: LD_ADDR_VAR 0 6
41346: PUSH
41347: LD_VAR 0 2
41351: PUSH
41352: LD_VAR 0 3
41356: PUSH
41357: LD_VAR 0 4
41361: PUSH
41362: LD_VAR 0 5
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: ST_TO_ADDR
// exit ;
41373: GO 41666
// end ; if not chassis in _chassis then
41375: LD_VAR 0 2
41379: PUSH
41380: LD_VAR 0 9
41384: IN
41385: NOT
41386: IFFALSE 41412
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41388: LD_ADDR_VAR 0 2
41392: PUSH
41393: LD_VAR 0 9
41397: PUSH
41398: LD_INT 1
41400: PPUSH
41401: LD_VAR 0 9
41405: PPUSH
41406: CALL_OW 12
41410: ARRAY
41411: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41412: LD_VAR 0 2
41416: PPUSH
41417: LD_VAR 0 3
41421: PPUSH
41422: CALL 41671 0 2
41426: NOT
41427: IFFALSE 41486
// repeat engine := _engine [ 1 ] ;
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_VAR 0 11
41438: PUSH
41439: LD_INT 1
41441: ARRAY
41442: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41443: LD_ADDR_VAR 0 11
41447: PUSH
41448: LD_VAR 0 11
41452: PPUSH
41453: LD_INT 1
41455: PPUSH
41456: CALL_OW 3
41460: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41461: LD_VAR 0 2
41465: PPUSH
41466: LD_VAR 0 3
41470: PPUSH
41471: CALL 41671 0 2
41475: PUSH
41476: LD_VAR 0 11
41480: PUSH
41481: EMPTY
41482: EQUAL
41483: OR
41484: IFFALSE 41429
// if not control in _control then
41486: LD_VAR 0 4
41490: PUSH
41491: LD_VAR 0 12
41495: IN
41496: NOT
41497: IFFALSE 41523
// control := _control [ rand ( 1 , _control ) ] ;
41499: LD_ADDR_VAR 0 4
41503: PUSH
41504: LD_VAR 0 12
41508: PUSH
41509: LD_INT 1
41511: PPUSH
41512: LD_VAR 0 12
41516: PPUSH
41517: CALL_OW 12
41521: ARRAY
41522: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41523: LD_VAR 0 2
41527: PPUSH
41528: LD_VAR 0 5
41532: PPUSH
41533: CALL 41891 0 2
41537: NOT
41538: IFFALSE 41597
// repeat weapon := _weapon [ 1 ] ;
41540: LD_ADDR_VAR 0 5
41544: PUSH
41545: LD_VAR 0 10
41549: PUSH
41550: LD_INT 1
41552: ARRAY
41553: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41554: LD_ADDR_VAR 0 10
41558: PUSH
41559: LD_VAR 0 10
41563: PPUSH
41564: LD_INT 1
41566: PPUSH
41567: CALL_OW 3
41571: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41572: LD_VAR 0 2
41576: PPUSH
41577: LD_VAR 0 5
41581: PPUSH
41582: CALL 41891 0 2
41586: PUSH
41587: LD_VAR 0 10
41591: PUSH
41592: EMPTY
41593: EQUAL
41594: OR
41595: IFFALSE 41540
// result := [ ] ;
41597: LD_ADDR_VAR 0 6
41601: PUSH
41602: EMPTY
41603: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41604: LD_VAR 0 1
41608: PPUSH
41609: LD_VAR 0 2
41613: PPUSH
41614: LD_VAR 0 3
41618: PPUSH
41619: LD_VAR 0 4
41623: PPUSH
41624: LD_VAR 0 5
41628: PPUSH
41629: CALL_OW 448
41633: IFFALSE 41666
// result := [ chassis , engine , control , weapon ] ;
41635: LD_ADDR_VAR 0 6
41639: PUSH
41640: LD_VAR 0 2
41644: PUSH
41645: LD_VAR 0 3
41649: PUSH
41650: LD_VAR 0 4
41654: PUSH
41655: LD_VAR 0 5
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: ST_TO_ADDR
// end ;
41666: LD_VAR 0 6
41670: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41671: LD_INT 0
41673: PPUSH
// if not chassis or not engine then
41674: LD_VAR 0 1
41678: NOT
41679: PUSH
41680: LD_VAR 0 2
41684: NOT
41685: OR
41686: IFFALSE 41690
// exit ;
41688: GO 41886
// case engine of engine_solar :
41690: LD_VAR 0 2
41694: PUSH
41695: LD_INT 2
41697: DOUBLE
41698: EQUAL
41699: IFTRUE 41703
41701: GO 41741
41703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41704: LD_ADDR_VAR 0 3
41708: PUSH
41709: LD_INT 11
41711: PUSH
41712: LD_INT 12
41714: PUSH
41715: LD_INT 13
41717: PUSH
41718: LD_INT 14
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
41739: GO 41870
41741: LD_INT 1
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41811
41749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41750: LD_ADDR_VAR 0 3
41754: PUSH
41755: LD_INT 11
41757: PUSH
41758: LD_INT 12
41760: PUSH
41761: LD_INT 13
41763: PUSH
41764: LD_INT 14
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 3
41775: PUSH
41776: LD_INT 4
41778: PUSH
41779: LD_INT 5
41781: PUSH
41782: LD_INT 21
41784: PUSH
41785: LD_INT 23
41787: PUSH
41788: LD_INT 22
41790: PUSH
41791: LD_INT 24
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: ST_TO_ADDR
41809: GO 41870
41811: LD_INT 3
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41819
41817: GO 41869
41819: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41820: LD_ADDR_VAR 0 3
41824: PUSH
41825: LD_INT 13
41827: PUSH
41828: LD_INT 14
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: LD_INT 4
41839: PUSH
41840: LD_INT 5
41842: PUSH
41843: LD_INT 21
41845: PUSH
41846: LD_INT 22
41848: PUSH
41849: LD_INT 23
41851: PUSH
41852: LD_INT 24
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: ST_TO_ADDR
41867: GO 41870
41869: POP
// result := ( chassis in result ) ;
41870: LD_ADDR_VAR 0 3
41874: PUSH
41875: LD_VAR 0 1
41879: PUSH
41880: LD_VAR 0 3
41884: IN
41885: ST_TO_ADDR
// end ;
41886: LD_VAR 0 3
41890: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41891: LD_INT 0
41893: PPUSH
// if not chassis or not weapon then
41894: LD_VAR 0 1
41898: NOT
41899: PUSH
41900: LD_VAR 0 2
41904: NOT
41905: OR
41906: IFFALSE 41910
// exit ;
41908: GO 42970
// case weapon of us_machine_gun :
41910: LD_VAR 0 2
41914: PUSH
41915: LD_INT 2
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41923
41921: GO 41953
41923: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: LD_INT 4
41940: PUSH
41941: LD_INT 5
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
41951: GO 42954
41953: LD_INT 3
41955: DOUBLE
41956: EQUAL
41957: IFTRUE 41961
41959: GO 41991
41961: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: LD_INT 3
41975: PUSH
41976: LD_INT 4
41978: PUSH
41979: LD_INT 5
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: ST_TO_ADDR
41989: GO 42954
41991: LD_INT 11
41993: DOUBLE
41994: EQUAL
41995: IFTRUE 41999
41997: GO 42029
41999: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42000: LD_ADDR_VAR 0 3
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 3
42013: PUSH
42014: LD_INT 4
42016: PUSH
42017: LD_INT 5
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: ST_TO_ADDR
42027: GO 42954
42029: LD_INT 4
42031: DOUBLE
42032: EQUAL
42033: IFTRUE 42037
42035: GO 42063
42037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42038: LD_ADDR_VAR 0 3
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: LD_INT 4
42051: PUSH
42052: LD_INT 5
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: ST_TO_ADDR
42061: GO 42954
42063: LD_INT 5
42065: DOUBLE
42066: EQUAL
42067: IFTRUE 42071
42069: GO 42097
42071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42072: LD_ADDR_VAR 0 3
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 4
42085: PUSH
42086: LD_INT 5
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: ST_TO_ADDR
42095: GO 42954
42097: LD_INT 9
42099: DOUBLE
42100: EQUAL
42101: IFTRUE 42105
42103: GO 42131
42105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42106: LD_ADDR_VAR 0 3
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 4
42119: PUSH
42120: LD_INT 5
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: ST_TO_ADDR
42129: GO 42954
42131: LD_INT 7
42133: DOUBLE
42134: EQUAL
42135: IFTRUE 42139
42137: GO 42165
42139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: LD_INT 4
42153: PUSH
42154: LD_INT 5
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: ST_TO_ADDR
42163: GO 42954
42165: LD_INT 12
42167: DOUBLE
42168: EQUAL
42169: IFTRUE 42173
42171: GO 42199
42173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42174: LD_ADDR_VAR 0 3
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: LD_INT 4
42187: PUSH
42188: LD_INT 5
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: ST_TO_ADDR
42197: GO 42954
42199: LD_INT 13
42201: DOUBLE
42202: EQUAL
42203: IFTRUE 42207
42205: GO 42233
42207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42208: LD_ADDR_VAR 0 3
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: LD_INT 3
42218: PUSH
42219: LD_INT 4
42221: PUSH
42222: LD_INT 5
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: ST_TO_ADDR
42231: GO 42954
42233: LD_INT 14
42235: DOUBLE
42236: EQUAL
42237: IFTRUE 42241
42239: GO 42259
42241: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42242: LD_ADDR_VAR 0 3
42246: PUSH
42247: LD_INT 4
42249: PUSH
42250: LD_INT 5
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: ST_TO_ADDR
42257: GO 42954
42259: LD_INT 6
42261: DOUBLE
42262: EQUAL
42263: IFTRUE 42267
42265: GO 42285
42267: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42268: LD_ADDR_VAR 0 3
42272: PUSH
42273: LD_INT 4
42275: PUSH
42276: LD_INT 5
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: ST_TO_ADDR
42283: GO 42954
42285: LD_INT 10
42287: DOUBLE
42288: EQUAL
42289: IFTRUE 42293
42291: GO 42311
42293: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42294: LD_ADDR_VAR 0 3
42298: PUSH
42299: LD_INT 4
42301: PUSH
42302: LD_INT 5
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: ST_TO_ADDR
42309: GO 42954
42311: LD_INT 22
42313: DOUBLE
42314: EQUAL
42315: IFTRUE 42319
42317: GO 42345
42319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42320: LD_ADDR_VAR 0 3
42324: PUSH
42325: LD_INT 11
42327: PUSH
42328: LD_INT 12
42330: PUSH
42331: LD_INT 13
42333: PUSH
42334: LD_INT 14
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: ST_TO_ADDR
42343: GO 42954
42345: LD_INT 23
42347: DOUBLE
42348: EQUAL
42349: IFTRUE 42353
42351: GO 42379
42353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42354: LD_ADDR_VAR 0 3
42358: PUSH
42359: LD_INT 11
42361: PUSH
42362: LD_INT 12
42364: PUSH
42365: LD_INT 13
42367: PUSH
42368: LD_INT 14
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: ST_TO_ADDR
42377: GO 42954
42379: LD_INT 24
42381: DOUBLE
42382: EQUAL
42383: IFTRUE 42387
42385: GO 42413
42387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: LD_INT 11
42395: PUSH
42396: LD_INT 12
42398: PUSH
42399: LD_INT 13
42401: PUSH
42402: LD_INT 14
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
42411: GO 42954
42413: LD_INT 30
42415: DOUBLE
42416: EQUAL
42417: IFTRUE 42421
42419: GO 42447
42421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42422: LD_ADDR_VAR 0 3
42426: PUSH
42427: LD_INT 11
42429: PUSH
42430: LD_INT 12
42432: PUSH
42433: LD_INT 13
42435: PUSH
42436: LD_INT 14
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
42445: GO 42954
42447: LD_INT 25
42449: DOUBLE
42450: EQUAL
42451: IFTRUE 42455
42453: GO 42473
42455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42456: LD_ADDR_VAR 0 3
42460: PUSH
42461: LD_INT 13
42463: PUSH
42464: LD_INT 14
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: ST_TO_ADDR
42471: GO 42954
42473: LD_INT 27
42475: DOUBLE
42476: EQUAL
42477: IFTRUE 42481
42479: GO 42499
42481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42482: LD_ADDR_VAR 0 3
42486: PUSH
42487: LD_INT 13
42489: PUSH
42490: LD_INT 14
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: ST_TO_ADDR
42497: GO 42954
42499: LD_INT 92
42501: DOUBLE
42502: EQUAL
42503: IFTRUE 42507
42505: GO 42533
42507: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42508: LD_ADDR_VAR 0 3
42512: PUSH
42513: LD_INT 11
42515: PUSH
42516: LD_INT 12
42518: PUSH
42519: LD_INT 13
42521: PUSH
42522: LD_INT 14
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: ST_TO_ADDR
42531: GO 42954
42533: LD_INT 28
42535: DOUBLE
42536: EQUAL
42537: IFTRUE 42541
42539: GO 42559
42541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42542: LD_ADDR_VAR 0 3
42546: PUSH
42547: LD_INT 13
42549: PUSH
42550: LD_INT 14
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: ST_TO_ADDR
42557: GO 42954
42559: LD_INT 29
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42567
42565: GO 42585
42567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42568: LD_ADDR_VAR 0 3
42572: PUSH
42573: LD_INT 13
42575: PUSH
42576: LD_INT 14
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: ST_TO_ADDR
42583: GO 42954
42585: LD_INT 31
42587: DOUBLE
42588: EQUAL
42589: IFTRUE 42593
42591: GO 42611
42593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42594: LD_ADDR_VAR 0 3
42598: PUSH
42599: LD_INT 13
42601: PUSH
42602: LD_INT 14
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: ST_TO_ADDR
42609: GO 42954
42611: LD_INT 26
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42619
42617: GO 42637
42619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42620: LD_ADDR_VAR 0 3
42624: PUSH
42625: LD_INT 13
42627: PUSH
42628: LD_INT 14
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: ST_TO_ADDR
42635: GO 42954
42637: LD_INT 42
42639: DOUBLE
42640: EQUAL
42641: IFTRUE 42645
42643: GO 42671
42645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42646: LD_ADDR_VAR 0 3
42650: PUSH
42651: LD_INT 21
42653: PUSH
42654: LD_INT 22
42656: PUSH
42657: LD_INT 23
42659: PUSH
42660: LD_INT 24
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: ST_TO_ADDR
42669: GO 42954
42671: LD_INT 43
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42679
42677: GO 42705
42679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_INT 21
42687: PUSH
42688: LD_INT 22
42690: PUSH
42691: LD_INT 23
42693: PUSH
42694: LD_INT 24
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
42703: GO 42954
42705: LD_INT 44
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42713
42711: GO 42739
42713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42714: LD_ADDR_VAR 0 3
42718: PUSH
42719: LD_INT 21
42721: PUSH
42722: LD_INT 22
42724: PUSH
42725: LD_INT 23
42727: PUSH
42728: LD_INT 24
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: ST_TO_ADDR
42737: GO 42954
42739: LD_INT 45
42741: DOUBLE
42742: EQUAL
42743: IFTRUE 42747
42745: GO 42773
42747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42748: LD_ADDR_VAR 0 3
42752: PUSH
42753: LD_INT 21
42755: PUSH
42756: LD_INT 22
42758: PUSH
42759: LD_INT 23
42761: PUSH
42762: LD_INT 24
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: ST_TO_ADDR
42771: GO 42954
42773: LD_INT 49
42775: DOUBLE
42776: EQUAL
42777: IFTRUE 42781
42779: GO 42807
42781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42782: LD_ADDR_VAR 0 3
42786: PUSH
42787: LD_INT 21
42789: PUSH
42790: LD_INT 22
42792: PUSH
42793: LD_INT 23
42795: PUSH
42796: LD_INT 24
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: ST_TO_ADDR
42805: GO 42954
42807: LD_INT 51
42809: DOUBLE
42810: EQUAL
42811: IFTRUE 42815
42813: GO 42841
42815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42816: LD_ADDR_VAR 0 3
42820: PUSH
42821: LD_INT 21
42823: PUSH
42824: LD_INT 22
42826: PUSH
42827: LD_INT 23
42829: PUSH
42830: LD_INT 24
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: ST_TO_ADDR
42839: GO 42954
42841: LD_INT 52
42843: DOUBLE
42844: EQUAL
42845: IFTRUE 42849
42847: GO 42875
42849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_INT 21
42857: PUSH
42858: LD_INT 22
42860: PUSH
42861: LD_INT 23
42863: PUSH
42864: LD_INT 24
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: ST_TO_ADDR
42873: GO 42954
42875: LD_INT 53
42877: DOUBLE
42878: EQUAL
42879: IFTRUE 42883
42881: GO 42901
42883: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42884: LD_ADDR_VAR 0 3
42888: PUSH
42889: LD_INT 23
42891: PUSH
42892: LD_INT 24
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: ST_TO_ADDR
42899: GO 42954
42901: LD_INT 46
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42909
42907: GO 42927
42909: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42910: LD_ADDR_VAR 0 3
42914: PUSH
42915: LD_INT 23
42917: PUSH
42918: LD_INT 24
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: ST_TO_ADDR
42925: GO 42954
42927: LD_INT 47
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42935
42933: GO 42953
42935: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42936: LD_ADDR_VAR 0 3
42940: PUSH
42941: LD_INT 23
42943: PUSH
42944: LD_INT 24
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: ST_TO_ADDR
42951: GO 42954
42953: POP
// result := ( chassis in result ) ;
42954: LD_ADDR_VAR 0 3
42958: PUSH
42959: LD_VAR 0 1
42963: PUSH
42964: LD_VAR 0 3
42968: IN
42969: ST_TO_ADDR
// end ;
42970: LD_VAR 0 3
42974: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42975: LD_INT 0
42977: PPUSH
42978: PPUSH
42979: PPUSH
42980: PPUSH
42981: PPUSH
42982: PPUSH
42983: PPUSH
// result := array ;
42984: LD_ADDR_VAR 0 5
42988: PUSH
42989: LD_VAR 0 1
42993: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42994: LD_VAR 0 1
42998: NOT
42999: PUSH
43000: LD_VAR 0 2
43004: NOT
43005: OR
43006: PUSH
43007: LD_VAR 0 3
43011: NOT
43012: OR
43013: PUSH
43014: LD_VAR 0 2
43018: PUSH
43019: LD_VAR 0 1
43023: GREATER
43024: OR
43025: PUSH
43026: LD_VAR 0 3
43030: PUSH
43031: LD_VAR 0 1
43035: GREATER
43036: OR
43037: IFFALSE 43041
// exit ;
43039: GO 43337
// if direction then
43041: LD_VAR 0 4
43045: IFFALSE 43109
// begin d := 1 ;
43047: LD_ADDR_VAR 0 9
43051: PUSH
43052: LD_INT 1
43054: ST_TO_ADDR
// if i_from > i_to then
43055: LD_VAR 0 2
43059: PUSH
43060: LD_VAR 0 3
43064: GREATER
43065: IFFALSE 43091
// length := ( array - i_from ) + i_to else
43067: LD_ADDR_VAR 0 11
43071: PUSH
43072: LD_VAR 0 1
43076: PUSH
43077: LD_VAR 0 2
43081: MINUS
43082: PUSH
43083: LD_VAR 0 3
43087: PLUS
43088: ST_TO_ADDR
43089: GO 43107
// length := i_to - i_from ;
43091: LD_ADDR_VAR 0 11
43095: PUSH
43096: LD_VAR 0 3
43100: PUSH
43101: LD_VAR 0 2
43105: MINUS
43106: ST_TO_ADDR
// end else
43107: GO 43170
// begin d := - 1 ;
43109: LD_ADDR_VAR 0 9
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: ST_TO_ADDR
// if i_from > i_to then
43118: LD_VAR 0 2
43122: PUSH
43123: LD_VAR 0 3
43127: GREATER
43128: IFFALSE 43148
// length := i_from - i_to else
43130: LD_ADDR_VAR 0 11
43134: PUSH
43135: LD_VAR 0 2
43139: PUSH
43140: LD_VAR 0 3
43144: MINUS
43145: ST_TO_ADDR
43146: GO 43170
// length := ( array - i_to ) + i_from ;
43148: LD_ADDR_VAR 0 11
43152: PUSH
43153: LD_VAR 0 1
43157: PUSH
43158: LD_VAR 0 3
43162: MINUS
43163: PUSH
43164: LD_VAR 0 2
43168: PLUS
43169: ST_TO_ADDR
// end ; if not length then
43170: LD_VAR 0 11
43174: NOT
43175: IFFALSE 43179
// exit ;
43177: GO 43337
// tmp := array ;
43179: LD_ADDR_VAR 0 10
43183: PUSH
43184: LD_VAR 0 1
43188: ST_TO_ADDR
// for i = 1 to length do
43189: LD_ADDR_VAR 0 6
43193: PUSH
43194: DOUBLE
43195: LD_INT 1
43197: DEC
43198: ST_TO_ADDR
43199: LD_VAR 0 11
43203: PUSH
43204: FOR_TO
43205: IFFALSE 43325
// begin for j = 1 to array do
43207: LD_ADDR_VAR 0 7
43211: PUSH
43212: DOUBLE
43213: LD_INT 1
43215: DEC
43216: ST_TO_ADDR
43217: LD_VAR 0 1
43221: PUSH
43222: FOR_TO
43223: IFFALSE 43311
// begin k := j + d ;
43225: LD_ADDR_VAR 0 8
43229: PUSH
43230: LD_VAR 0 7
43234: PUSH
43235: LD_VAR 0 9
43239: PLUS
43240: ST_TO_ADDR
// if k > array then
43241: LD_VAR 0 8
43245: PUSH
43246: LD_VAR 0 1
43250: GREATER
43251: IFFALSE 43261
// k := 1 ;
43253: LD_ADDR_VAR 0 8
43257: PUSH
43258: LD_INT 1
43260: ST_TO_ADDR
// if not k then
43261: LD_VAR 0 8
43265: NOT
43266: IFFALSE 43278
// k := array ;
43268: LD_ADDR_VAR 0 8
43272: PUSH
43273: LD_VAR 0 1
43277: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43278: LD_ADDR_VAR 0 10
43282: PUSH
43283: LD_VAR 0 10
43287: PPUSH
43288: LD_VAR 0 8
43292: PPUSH
43293: LD_VAR 0 1
43297: PUSH
43298: LD_VAR 0 7
43302: ARRAY
43303: PPUSH
43304: CALL_OW 1
43308: ST_TO_ADDR
// end ;
43309: GO 43222
43311: POP
43312: POP
// array := tmp ;
43313: LD_ADDR_VAR 0 1
43317: PUSH
43318: LD_VAR 0 10
43322: ST_TO_ADDR
// end ;
43323: GO 43204
43325: POP
43326: POP
// result := array ;
43327: LD_ADDR_VAR 0 5
43331: PUSH
43332: LD_VAR 0 1
43336: ST_TO_ADDR
// end ;
43337: LD_VAR 0 5
43341: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43342: LD_INT 0
43344: PPUSH
43345: PPUSH
// result := 0 ;
43346: LD_ADDR_VAR 0 3
43350: PUSH
43351: LD_INT 0
43353: ST_TO_ADDR
// if not array or not value in array then
43354: LD_VAR 0 1
43358: NOT
43359: PUSH
43360: LD_VAR 0 2
43364: PUSH
43365: LD_VAR 0 1
43369: IN
43370: NOT
43371: OR
43372: IFFALSE 43376
// exit ;
43374: GO 43430
// for i = 1 to array do
43376: LD_ADDR_VAR 0 4
43380: PUSH
43381: DOUBLE
43382: LD_INT 1
43384: DEC
43385: ST_TO_ADDR
43386: LD_VAR 0 1
43390: PUSH
43391: FOR_TO
43392: IFFALSE 43428
// if value = array [ i ] then
43394: LD_VAR 0 2
43398: PUSH
43399: LD_VAR 0 1
43403: PUSH
43404: LD_VAR 0 4
43408: ARRAY
43409: EQUAL
43410: IFFALSE 43426
// begin result := i ;
43412: LD_ADDR_VAR 0 3
43416: PUSH
43417: LD_VAR 0 4
43421: ST_TO_ADDR
// exit ;
43422: POP
43423: POP
43424: GO 43430
// end ;
43426: GO 43391
43428: POP
43429: POP
// end ;
43430: LD_VAR 0 3
43434: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43435: LD_INT 0
43437: PPUSH
// vc_chassis := chassis ;
43438: LD_ADDR_OWVAR 37
43442: PUSH
43443: LD_VAR 0 1
43447: ST_TO_ADDR
// vc_engine := engine ;
43448: LD_ADDR_OWVAR 39
43452: PUSH
43453: LD_VAR 0 2
43457: ST_TO_ADDR
// vc_control := control ;
43458: LD_ADDR_OWVAR 38
43462: PUSH
43463: LD_VAR 0 3
43467: ST_TO_ADDR
// vc_weapon := weapon ;
43468: LD_ADDR_OWVAR 40
43472: PUSH
43473: LD_VAR 0 4
43477: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43478: LD_ADDR_OWVAR 41
43482: PUSH
43483: LD_VAR 0 5
43487: ST_TO_ADDR
// end ;
43488: LD_VAR 0 6
43492: RET
// export function WantPlant ( unit ) ; var task ; begin
43493: LD_INT 0
43495: PPUSH
43496: PPUSH
// result := false ;
43497: LD_ADDR_VAR 0 2
43501: PUSH
43502: LD_INT 0
43504: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43505: LD_ADDR_VAR 0 3
43509: PUSH
43510: LD_VAR 0 1
43514: PPUSH
43515: CALL_OW 437
43519: ST_TO_ADDR
// if task then
43520: LD_VAR 0 3
43524: IFFALSE 43552
// if task [ 1 ] [ 1 ] = p then
43526: LD_VAR 0 3
43530: PUSH
43531: LD_INT 1
43533: ARRAY
43534: PUSH
43535: LD_INT 1
43537: ARRAY
43538: PUSH
43539: LD_STRING p
43541: EQUAL
43542: IFFALSE 43552
// result := true ;
43544: LD_ADDR_VAR 0 2
43548: PUSH
43549: LD_INT 1
43551: ST_TO_ADDR
// end ;
43552: LD_VAR 0 2
43556: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43557: LD_INT 0
43559: PPUSH
43560: PPUSH
43561: PPUSH
43562: PPUSH
// if pos < 1 then
43563: LD_VAR 0 2
43567: PUSH
43568: LD_INT 1
43570: LESS
43571: IFFALSE 43575
// exit ;
43573: GO 43878
// if pos = 1 then
43575: LD_VAR 0 2
43579: PUSH
43580: LD_INT 1
43582: EQUAL
43583: IFFALSE 43616
// result := Replace ( arr , pos [ 1 ] , value ) else
43585: LD_ADDR_VAR 0 4
43589: PUSH
43590: LD_VAR 0 1
43594: PPUSH
43595: LD_VAR 0 2
43599: PUSH
43600: LD_INT 1
43602: ARRAY
43603: PPUSH
43604: LD_VAR 0 3
43608: PPUSH
43609: CALL_OW 1
43613: ST_TO_ADDR
43614: GO 43878
// begin tmp := arr ;
43616: LD_ADDR_VAR 0 6
43620: PUSH
43621: LD_VAR 0 1
43625: ST_TO_ADDR
// s_arr := [ tmp ] ;
43626: LD_ADDR_VAR 0 7
43630: PUSH
43631: LD_VAR 0 6
43635: PUSH
43636: EMPTY
43637: LIST
43638: ST_TO_ADDR
// for i = 1 to pos - 1 do
43639: LD_ADDR_VAR 0 5
43643: PUSH
43644: DOUBLE
43645: LD_INT 1
43647: DEC
43648: ST_TO_ADDR
43649: LD_VAR 0 2
43653: PUSH
43654: LD_INT 1
43656: MINUS
43657: PUSH
43658: FOR_TO
43659: IFFALSE 43704
// begin tmp := tmp [ pos [ i ] ] ;
43661: LD_ADDR_VAR 0 6
43665: PUSH
43666: LD_VAR 0 6
43670: PUSH
43671: LD_VAR 0 2
43675: PUSH
43676: LD_VAR 0 5
43680: ARRAY
43681: ARRAY
43682: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43683: LD_ADDR_VAR 0 7
43687: PUSH
43688: LD_VAR 0 7
43692: PUSH
43693: LD_VAR 0 6
43697: PUSH
43698: EMPTY
43699: LIST
43700: ADD
43701: ST_TO_ADDR
// end ;
43702: GO 43658
43704: POP
43705: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43706: LD_ADDR_VAR 0 6
43710: PUSH
43711: LD_VAR 0 6
43715: PPUSH
43716: LD_VAR 0 2
43720: PUSH
43721: LD_VAR 0 2
43725: ARRAY
43726: PPUSH
43727: LD_VAR 0 3
43731: PPUSH
43732: CALL_OW 1
43736: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43737: LD_ADDR_VAR 0 7
43741: PUSH
43742: LD_VAR 0 7
43746: PPUSH
43747: LD_VAR 0 7
43751: PPUSH
43752: LD_VAR 0 6
43756: PPUSH
43757: CALL_OW 1
43761: ST_TO_ADDR
// for i = s_arr downto 2 do
43762: LD_ADDR_VAR 0 5
43766: PUSH
43767: DOUBLE
43768: LD_VAR 0 7
43772: INC
43773: ST_TO_ADDR
43774: LD_INT 2
43776: PUSH
43777: FOR_DOWNTO
43778: IFFALSE 43862
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43780: LD_ADDR_VAR 0 6
43784: PUSH
43785: LD_VAR 0 7
43789: PUSH
43790: LD_VAR 0 5
43794: PUSH
43795: LD_INT 1
43797: MINUS
43798: ARRAY
43799: PPUSH
43800: LD_VAR 0 2
43804: PUSH
43805: LD_VAR 0 5
43809: PUSH
43810: LD_INT 1
43812: MINUS
43813: ARRAY
43814: PPUSH
43815: LD_VAR 0 7
43819: PUSH
43820: LD_VAR 0 5
43824: ARRAY
43825: PPUSH
43826: CALL_OW 1
43830: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43831: LD_ADDR_VAR 0 7
43835: PUSH
43836: LD_VAR 0 7
43840: PPUSH
43841: LD_VAR 0 5
43845: PUSH
43846: LD_INT 1
43848: MINUS
43849: PPUSH
43850: LD_VAR 0 6
43854: PPUSH
43855: CALL_OW 1
43859: ST_TO_ADDR
// end ;
43860: GO 43777
43862: POP
43863: POP
// result := s_arr [ 1 ] ;
43864: LD_ADDR_VAR 0 4
43868: PUSH
43869: LD_VAR 0 7
43873: PUSH
43874: LD_INT 1
43876: ARRAY
43877: ST_TO_ADDR
// end ; end ;
43878: LD_VAR 0 4
43882: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43883: LD_INT 0
43885: PPUSH
43886: PPUSH
// if not list then
43887: LD_VAR 0 1
43891: NOT
43892: IFFALSE 43896
// exit ;
43894: GO 43987
// i := list [ pos1 ] ;
43896: LD_ADDR_VAR 0 5
43900: PUSH
43901: LD_VAR 0 1
43905: PUSH
43906: LD_VAR 0 2
43910: ARRAY
43911: ST_TO_ADDR
// if not i then
43912: LD_VAR 0 5
43916: NOT
43917: IFFALSE 43921
// exit ;
43919: GO 43987
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43921: LD_ADDR_VAR 0 1
43925: PUSH
43926: LD_VAR 0 1
43930: PPUSH
43931: LD_VAR 0 2
43935: PPUSH
43936: LD_VAR 0 1
43940: PUSH
43941: LD_VAR 0 3
43945: ARRAY
43946: PPUSH
43947: CALL_OW 1
43951: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43952: LD_ADDR_VAR 0 1
43956: PUSH
43957: LD_VAR 0 1
43961: PPUSH
43962: LD_VAR 0 3
43966: PPUSH
43967: LD_VAR 0 5
43971: PPUSH
43972: CALL_OW 1
43976: ST_TO_ADDR
// result := list ;
43977: LD_ADDR_VAR 0 4
43981: PUSH
43982: LD_VAR 0 1
43986: ST_TO_ADDR
// end ;
43987: LD_VAR 0 4
43991: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43992: LD_INT 0
43994: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43995: LD_ADDR_VAR 0 5
43999: PUSH
44000: LD_VAR 0 1
44004: PPUSH
44005: CALL_OW 250
44009: PPUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: CALL_OW 251
44019: PPUSH
44020: LD_VAR 0 2
44024: PPUSH
44025: LD_VAR 0 3
44029: PPUSH
44030: LD_VAR 0 4
44034: PPUSH
44035: CALL 44413 0 5
44039: ST_TO_ADDR
// end ;
44040: LD_VAR 0 5
44044: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44045: LD_INT 0
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
// if not list or not unit then
44051: LD_VAR 0 2
44055: NOT
44056: PUSH
44057: LD_VAR 0 1
44061: NOT
44062: OR
44063: IFFALSE 44067
// exit ;
44065: GO 44408
// result := [ ] ;
44067: LD_ADDR_VAR 0 5
44071: PUSH
44072: EMPTY
44073: ST_TO_ADDR
// for i in list do
44074: LD_ADDR_VAR 0 6
44078: PUSH
44079: LD_VAR 0 2
44083: PUSH
44084: FOR_IN
44085: IFFALSE 44303
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44087: LD_ADDR_VAR 0 8
44091: PUSH
44092: LD_VAR 0 1
44096: PPUSH
44097: LD_VAR 0 6
44101: PUSH
44102: LD_INT 1
44104: ARRAY
44105: PPUSH
44106: LD_VAR 0 6
44110: PUSH
44111: LD_INT 2
44113: ARRAY
44114: PPUSH
44115: CALL_OW 297
44119: ST_TO_ADDR
// if not Count ( result ) then
44120: LD_VAR 0 5
44124: PPUSH
44125: CALL 40697 0 1
44129: NOT
44130: IFFALSE 44163
// begin result := Join ( result , [ i , tmp ] ) ;
44132: LD_ADDR_VAR 0 5
44136: PUSH
44137: LD_VAR 0 5
44141: PPUSH
44142: LD_VAR 0 6
44146: PUSH
44147: LD_VAR 0 8
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PPUSH
44156: CALL 76297 0 2
44160: ST_TO_ADDR
// continue ;
44161: GO 44084
// end ; if result [ result ] [ 2 ] <= tmp then
44163: LD_VAR 0 5
44167: PUSH
44168: LD_VAR 0 5
44172: ARRAY
44173: PUSH
44174: LD_INT 2
44176: ARRAY
44177: PUSH
44178: LD_VAR 0 8
44182: LESSEQUAL
44183: IFFALSE 44216
// result := Join ( result , [ i , tmp ] ) else
44185: LD_ADDR_VAR 0 5
44189: PUSH
44190: LD_VAR 0 5
44194: PPUSH
44195: LD_VAR 0 6
44199: PUSH
44200: LD_VAR 0 8
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PPUSH
44209: CALL 76297 0 2
44213: ST_TO_ADDR
44214: GO 44301
// begin for j := 1 to Count ( result ) do
44216: LD_ADDR_VAR 0 7
44220: PUSH
44221: DOUBLE
44222: LD_INT 1
44224: DEC
44225: ST_TO_ADDR
44226: LD_VAR 0 5
44230: PPUSH
44231: CALL 40697 0 1
44235: PUSH
44236: FOR_TO
44237: IFFALSE 44299
// begin if tmp < result [ j ] [ 2 ] then
44239: LD_VAR 0 8
44243: PUSH
44244: LD_VAR 0 5
44248: PUSH
44249: LD_VAR 0 7
44253: ARRAY
44254: PUSH
44255: LD_INT 2
44257: ARRAY
44258: LESS
44259: IFFALSE 44297
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44261: LD_ADDR_VAR 0 5
44265: PUSH
44266: LD_VAR 0 5
44270: PPUSH
44271: LD_VAR 0 7
44275: PPUSH
44276: LD_VAR 0 6
44280: PUSH
44281: LD_VAR 0 8
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PPUSH
44290: CALL_OW 2
44294: ST_TO_ADDR
// break ;
44295: GO 44299
// end ; end ;
44297: GO 44236
44299: POP
44300: POP
// end ; end ;
44301: GO 44084
44303: POP
44304: POP
// if result and not asc then
44305: LD_VAR 0 5
44309: PUSH
44310: LD_VAR 0 3
44314: NOT
44315: AND
44316: IFFALSE 44333
// result := ReverseArray ( result ) ;
44318: LD_ADDR_VAR 0 5
44322: PUSH
44323: LD_VAR 0 5
44327: PPUSH
44328: CALL 71573 0 1
44332: ST_TO_ADDR
// tmp := [ ] ;
44333: LD_ADDR_VAR 0 8
44337: PUSH
44338: EMPTY
44339: ST_TO_ADDR
// if mode then
44340: LD_VAR 0 4
44344: IFFALSE 44408
// begin for i := 1 to result do
44346: LD_ADDR_VAR 0 6
44350: PUSH
44351: DOUBLE
44352: LD_INT 1
44354: DEC
44355: ST_TO_ADDR
44356: LD_VAR 0 5
44360: PUSH
44361: FOR_TO
44362: IFFALSE 44396
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44364: LD_ADDR_VAR 0 8
44368: PUSH
44369: LD_VAR 0 8
44373: PPUSH
44374: LD_VAR 0 5
44378: PUSH
44379: LD_VAR 0 6
44383: ARRAY
44384: PUSH
44385: LD_INT 1
44387: ARRAY
44388: PPUSH
44389: CALL 76297 0 2
44393: ST_TO_ADDR
44394: GO 44361
44396: POP
44397: POP
// result := tmp ;
44398: LD_ADDR_VAR 0 5
44402: PUSH
44403: LD_VAR 0 8
44407: ST_TO_ADDR
// end ; end ;
44408: LD_VAR 0 5
44412: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44413: LD_INT 0
44415: PPUSH
44416: PPUSH
44417: PPUSH
44418: PPUSH
// if not list then
44419: LD_VAR 0 3
44423: NOT
44424: IFFALSE 44428
// exit ;
44426: GO 44816
// result := [ ] ;
44428: LD_ADDR_VAR 0 6
44432: PUSH
44433: EMPTY
44434: ST_TO_ADDR
// for i in list do
44435: LD_ADDR_VAR 0 7
44439: PUSH
44440: LD_VAR 0 3
44444: PUSH
44445: FOR_IN
44446: IFFALSE 44648
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44448: LD_ADDR_VAR 0 9
44452: PUSH
44453: LD_VAR 0 7
44457: PPUSH
44458: LD_VAR 0 1
44462: PPUSH
44463: LD_VAR 0 2
44467: PPUSH
44468: CALL_OW 297
44472: ST_TO_ADDR
// if not result then
44473: LD_VAR 0 6
44477: NOT
44478: IFFALSE 44504
// result := [ [ i , tmp ] ] else
44480: LD_ADDR_VAR 0 6
44484: PUSH
44485: LD_VAR 0 7
44489: PUSH
44490: LD_VAR 0 9
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: ST_TO_ADDR
44502: GO 44646
// begin if result [ result ] [ 2 ] < tmp then
44504: LD_VAR 0 6
44508: PUSH
44509: LD_VAR 0 6
44513: ARRAY
44514: PUSH
44515: LD_INT 2
44517: ARRAY
44518: PUSH
44519: LD_VAR 0 9
44523: LESS
44524: IFFALSE 44566
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44526: LD_ADDR_VAR 0 6
44530: PUSH
44531: LD_VAR 0 6
44535: PPUSH
44536: LD_VAR 0 6
44540: PUSH
44541: LD_INT 1
44543: PLUS
44544: PPUSH
44545: LD_VAR 0 7
44549: PUSH
44550: LD_VAR 0 9
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PPUSH
44559: CALL_OW 2
44563: ST_TO_ADDR
44564: GO 44646
// for j = 1 to result do
44566: LD_ADDR_VAR 0 8
44570: PUSH
44571: DOUBLE
44572: LD_INT 1
44574: DEC
44575: ST_TO_ADDR
44576: LD_VAR 0 6
44580: PUSH
44581: FOR_TO
44582: IFFALSE 44644
// begin if tmp < result [ j ] [ 2 ] then
44584: LD_VAR 0 9
44588: PUSH
44589: LD_VAR 0 6
44593: PUSH
44594: LD_VAR 0 8
44598: ARRAY
44599: PUSH
44600: LD_INT 2
44602: ARRAY
44603: LESS
44604: IFFALSE 44642
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44606: LD_ADDR_VAR 0 6
44610: PUSH
44611: LD_VAR 0 6
44615: PPUSH
44616: LD_VAR 0 8
44620: PPUSH
44621: LD_VAR 0 7
44625: PUSH
44626: LD_VAR 0 9
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PPUSH
44635: CALL_OW 2
44639: ST_TO_ADDR
// break ;
44640: GO 44644
// end ; end ;
44642: GO 44581
44644: POP
44645: POP
// end ; end ;
44646: GO 44445
44648: POP
44649: POP
// if result and not asc then
44650: LD_VAR 0 6
44654: PUSH
44655: LD_VAR 0 4
44659: NOT
44660: AND
44661: IFFALSE 44736
// begin tmp := result ;
44663: LD_ADDR_VAR 0 9
44667: PUSH
44668: LD_VAR 0 6
44672: ST_TO_ADDR
// for i = tmp downto 1 do
44673: LD_ADDR_VAR 0 7
44677: PUSH
44678: DOUBLE
44679: LD_VAR 0 9
44683: INC
44684: ST_TO_ADDR
44685: LD_INT 1
44687: PUSH
44688: FOR_DOWNTO
44689: IFFALSE 44734
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44691: LD_ADDR_VAR 0 6
44695: PUSH
44696: LD_VAR 0 6
44700: PPUSH
44701: LD_VAR 0 9
44705: PUSH
44706: LD_VAR 0 7
44710: MINUS
44711: PUSH
44712: LD_INT 1
44714: PLUS
44715: PPUSH
44716: LD_VAR 0 9
44720: PUSH
44721: LD_VAR 0 7
44725: ARRAY
44726: PPUSH
44727: CALL_OW 1
44731: ST_TO_ADDR
44732: GO 44688
44734: POP
44735: POP
// end ; tmp := [ ] ;
44736: LD_ADDR_VAR 0 9
44740: PUSH
44741: EMPTY
44742: ST_TO_ADDR
// if mode then
44743: LD_VAR 0 5
44747: IFFALSE 44816
// begin for i = 1 to result do
44749: LD_ADDR_VAR 0 7
44753: PUSH
44754: DOUBLE
44755: LD_INT 1
44757: DEC
44758: ST_TO_ADDR
44759: LD_VAR 0 6
44763: PUSH
44764: FOR_TO
44765: IFFALSE 44804
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44767: LD_ADDR_VAR 0 9
44771: PUSH
44772: LD_VAR 0 9
44776: PPUSH
44777: LD_VAR 0 7
44781: PPUSH
44782: LD_VAR 0 6
44786: PUSH
44787: LD_VAR 0 7
44791: ARRAY
44792: PUSH
44793: LD_INT 1
44795: ARRAY
44796: PPUSH
44797: CALL_OW 1
44801: ST_TO_ADDR
44802: GO 44764
44804: POP
44805: POP
// result := tmp ;
44806: LD_ADDR_VAR 0 6
44810: PUSH
44811: LD_VAR 0 9
44815: ST_TO_ADDR
// end ; end ;
44816: LD_VAR 0 6
44820: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44821: LD_INT 0
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44829: LD_ADDR_VAR 0 5
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// if not x or not y then
44851: LD_VAR 0 2
44855: NOT
44856: PUSH
44857: LD_VAR 0 3
44861: NOT
44862: OR
44863: IFFALSE 44867
// exit ;
44865: GO 46517
// if not range then
44867: LD_VAR 0 4
44871: NOT
44872: IFFALSE 44882
// range := 10 ;
44874: LD_ADDR_VAR 0 4
44878: PUSH
44879: LD_INT 10
44881: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44882: LD_ADDR_VAR 0 8
44886: PUSH
44887: LD_INT 81
44889: PUSH
44890: LD_VAR 0 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 92
44901: PUSH
44902: LD_VAR 0 2
44906: PUSH
44907: LD_VAR 0 3
44911: PUSH
44912: LD_VAR 0 4
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 3
44925: PUSH
44926: LD_INT 21
44928: PUSH
44929: LD_INT 3
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: PPUSH
44945: CALL_OW 69
44949: ST_TO_ADDR
// if not tmp then
44950: LD_VAR 0 8
44954: NOT
44955: IFFALSE 44959
// exit ;
44957: GO 46517
// for i in tmp do
44959: LD_ADDR_VAR 0 6
44963: PUSH
44964: LD_VAR 0 8
44968: PUSH
44969: FOR_IN
44970: IFFALSE 46492
// begin points := [ 0 , 0 , 0 ] ;
44972: LD_ADDR_VAR 0 9
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: ST_TO_ADDR
// bpoints := 1 ;
44991: LD_ADDR_VAR 0 10
44995: PUSH
44996: LD_INT 1
44998: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44999: LD_VAR 0 6
45003: PPUSH
45004: CALL_OW 247
45008: PUSH
45009: LD_INT 1
45011: DOUBLE
45012: EQUAL
45013: IFTRUE 45017
45015: GO 45595
45017: POP
// begin if GetClass ( i ) = 1 then
45018: LD_VAR 0 6
45022: PPUSH
45023: CALL_OW 257
45027: PUSH
45028: LD_INT 1
45030: EQUAL
45031: IFFALSE 45052
// points := [ 10 , 5 , 3 ] ;
45033: LD_ADDR_VAR 0 9
45037: PUSH
45038: LD_INT 10
45040: PUSH
45041: LD_INT 5
45043: PUSH
45044: LD_INT 3
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45052: LD_VAR 0 6
45056: PPUSH
45057: CALL_OW 257
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: LD_INT 3
45067: PUSH
45068: LD_INT 4
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: IN
45076: IFFALSE 45097
// points := [ 3 , 2 , 1 ] ;
45078: LD_ADDR_VAR 0 9
45082: PUSH
45083: LD_INT 3
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45097: LD_VAR 0 6
45101: PPUSH
45102: CALL_OW 257
45106: PUSH
45107: LD_INT 5
45109: EQUAL
45110: IFFALSE 45131
// points := [ 130 , 5 , 2 ] ;
45112: LD_ADDR_VAR 0 9
45116: PUSH
45117: LD_INT 130
45119: PUSH
45120: LD_INT 5
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45131: LD_VAR 0 6
45135: PPUSH
45136: CALL_OW 257
45140: PUSH
45141: LD_INT 8
45143: EQUAL
45144: IFFALSE 45165
// points := [ 35 , 35 , 30 ] ;
45146: LD_ADDR_VAR 0 9
45150: PUSH
45151: LD_INT 35
45153: PUSH
45154: LD_INT 35
45156: PUSH
45157: LD_INT 30
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45165: LD_VAR 0 6
45169: PPUSH
45170: CALL_OW 257
45174: PUSH
45175: LD_INT 9
45177: EQUAL
45178: IFFALSE 45199
// points := [ 20 , 55 , 40 ] ;
45180: LD_ADDR_VAR 0 9
45184: PUSH
45185: LD_INT 20
45187: PUSH
45188: LD_INT 55
45190: PUSH
45191: LD_INT 40
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45199: LD_VAR 0 6
45203: PPUSH
45204: CALL_OW 257
45208: PUSH
45209: LD_INT 12
45211: PUSH
45212: LD_INT 16
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: IN
45219: IFFALSE 45240
// points := [ 5 , 3 , 2 ] ;
45221: LD_ADDR_VAR 0 9
45225: PUSH
45226: LD_INT 5
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45240: LD_VAR 0 6
45244: PPUSH
45245: CALL_OW 257
45249: PUSH
45250: LD_INT 17
45252: EQUAL
45253: IFFALSE 45274
// points := [ 100 , 50 , 75 ] ;
45255: LD_ADDR_VAR 0 9
45259: PUSH
45260: LD_INT 100
45262: PUSH
45263: LD_INT 50
45265: PUSH
45266: LD_INT 75
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: LIST
45273: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45274: LD_VAR 0 6
45278: PPUSH
45279: CALL_OW 257
45283: PUSH
45284: LD_INT 15
45286: EQUAL
45287: IFFALSE 45308
// points := [ 10 , 5 , 3 ] ;
45289: LD_ADDR_VAR 0 9
45293: PUSH
45294: LD_INT 10
45296: PUSH
45297: LD_INT 5
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45308: LD_VAR 0 6
45312: PPUSH
45313: CALL_OW 257
45317: PUSH
45318: LD_INT 14
45320: EQUAL
45321: IFFALSE 45342
// points := [ 10 , 0 , 0 ] ;
45323: LD_ADDR_VAR 0 9
45327: PUSH
45328: LD_INT 10
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45342: LD_VAR 0 6
45346: PPUSH
45347: CALL_OW 257
45351: PUSH
45352: LD_INT 11
45354: EQUAL
45355: IFFALSE 45376
// points := [ 30 , 10 , 5 ] ;
45357: LD_ADDR_VAR 0 9
45361: PUSH
45362: LD_INT 30
45364: PUSH
45365: LD_INT 10
45367: PUSH
45368: LD_INT 5
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: LIST
45375: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45376: LD_VAR 0 1
45380: PPUSH
45381: LD_INT 5
45383: PPUSH
45384: CALL_OW 321
45388: PUSH
45389: LD_INT 2
45391: EQUAL
45392: IFFALSE 45409
// bpoints := bpoints * 1.8 ;
45394: LD_ADDR_VAR 0 10
45398: PUSH
45399: LD_VAR 0 10
45403: PUSH
45404: LD_REAL  1.80000000000000E+0000
45407: MUL
45408: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45409: LD_VAR 0 6
45413: PPUSH
45414: CALL_OW 257
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 3
45427: PUSH
45428: LD_INT 4
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: IN
45437: PUSH
45438: LD_VAR 0 1
45442: PPUSH
45443: LD_INT 51
45445: PPUSH
45446: CALL_OW 321
45450: PUSH
45451: LD_INT 2
45453: EQUAL
45454: AND
45455: IFFALSE 45472
// bpoints := bpoints * 1.2 ;
45457: LD_ADDR_VAR 0 10
45461: PUSH
45462: LD_VAR 0 10
45466: PUSH
45467: LD_REAL  1.20000000000000E+0000
45470: MUL
45471: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45472: LD_VAR 0 6
45476: PPUSH
45477: CALL_OW 257
45481: PUSH
45482: LD_INT 5
45484: PUSH
45485: LD_INT 7
45487: PUSH
45488: LD_INT 9
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: IN
45496: PUSH
45497: LD_VAR 0 1
45501: PPUSH
45502: LD_INT 52
45504: PPUSH
45505: CALL_OW 321
45509: PUSH
45510: LD_INT 2
45512: EQUAL
45513: AND
45514: IFFALSE 45531
// bpoints := bpoints * 1.5 ;
45516: LD_ADDR_VAR 0 10
45520: PUSH
45521: LD_VAR 0 10
45525: PUSH
45526: LD_REAL  1.50000000000000E+0000
45529: MUL
45530: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45531: LD_VAR 0 1
45535: PPUSH
45536: LD_INT 66
45538: PPUSH
45539: CALL_OW 321
45543: PUSH
45544: LD_INT 2
45546: EQUAL
45547: IFFALSE 45564
// bpoints := bpoints * 1.1 ;
45549: LD_ADDR_VAR 0 10
45553: PUSH
45554: LD_VAR 0 10
45558: PUSH
45559: LD_REAL  1.10000000000000E+0000
45562: MUL
45563: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45564: LD_ADDR_VAR 0 10
45568: PUSH
45569: LD_VAR 0 10
45573: PUSH
45574: LD_VAR 0 6
45578: PPUSH
45579: LD_INT 1
45581: PPUSH
45582: CALL_OW 259
45586: PUSH
45587: LD_REAL  1.15000000000000E+0000
45590: MUL
45591: MUL
45592: ST_TO_ADDR
// end ; unit_vehicle :
45593: GO 46421
45595: LD_INT 2
45597: DOUBLE
45598: EQUAL
45599: IFTRUE 45603
45601: GO 46409
45603: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45604: LD_VAR 0 6
45608: PPUSH
45609: CALL_OW 264
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: LD_INT 42
45619: PUSH
45620: LD_INT 24
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: IN
45628: IFFALSE 45649
// points := [ 25 , 5 , 3 ] ;
45630: LD_ADDR_VAR 0 9
45634: PUSH
45635: LD_INT 25
45637: PUSH
45638: LD_INT 5
45640: PUSH
45641: LD_INT 3
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45649: LD_VAR 0 6
45653: PPUSH
45654: CALL_OW 264
45658: PUSH
45659: LD_INT 4
45661: PUSH
45662: LD_INT 43
45664: PUSH
45665: LD_INT 25
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: IN
45673: IFFALSE 45694
// points := [ 40 , 15 , 5 ] ;
45675: LD_ADDR_VAR 0 9
45679: PUSH
45680: LD_INT 40
45682: PUSH
45683: LD_INT 15
45685: PUSH
45686: LD_INT 5
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45694: LD_VAR 0 6
45698: PPUSH
45699: CALL_OW 264
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 23
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: IN
45714: IFFALSE 45735
// points := [ 7 , 25 , 8 ] ;
45716: LD_ADDR_VAR 0 9
45720: PUSH
45721: LD_INT 7
45723: PUSH
45724: LD_INT 25
45726: PUSH
45727: LD_INT 8
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45735: LD_VAR 0 6
45739: PPUSH
45740: CALL_OW 264
45744: PUSH
45745: LD_INT 5
45747: PUSH
45748: LD_INT 27
45750: PUSH
45751: LD_INT 44
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: IN
45759: IFFALSE 45780
// points := [ 14 , 50 , 16 ] ;
45761: LD_ADDR_VAR 0 9
45765: PUSH
45766: LD_INT 14
45768: PUSH
45769: LD_INT 50
45771: PUSH
45772: LD_INT 16
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45780: LD_VAR 0 6
45784: PPUSH
45785: CALL_OW 264
45789: PUSH
45790: LD_INT 6
45792: PUSH
45793: LD_INT 46
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: IN
45800: IFFALSE 45821
// points := [ 32 , 120 , 70 ] ;
45802: LD_ADDR_VAR 0 9
45806: PUSH
45807: LD_INT 32
45809: PUSH
45810: LD_INT 120
45812: PUSH
45813: LD_INT 70
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: LIST
45820: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45821: LD_VAR 0 6
45825: PPUSH
45826: CALL_OW 264
45830: PUSH
45831: LD_INT 7
45833: PUSH
45834: LD_INT 28
45836: PUSH
45837: LD_INT 45
45839: PUSH
45840: LD_INT 92
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: IN
45849: IFFALSE 45870
// points := [ 35 , 20 , 45 ] ;
45851: LD_ADDR_VAR 0 9
45855: PUSH
45856: LD_INT 35
45858: PUSH
45859: LD_INT 20
45861: PUSH
45862: LD_INT 45
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45870: LD_VAR 0 6
45874: PPUSH
45875: CALL_OW 264
45879: PUSH
45880: LD_INT 47
45882: PUSH
45883: EMPTY
45884: LIST
45885: IN
45886: IFFALSE 45907
// points := [ 67 , 45 , 75 ] ;
45888: LD_ADDR_VAR 0 9
45892: PUSH
45893: LD_INT 67
45895: PUSH
45896: LD_INT 45
45898: PUSH
45899: LD_INT 75
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45907: LD_VAR 0 6
45911: PPUSH
45912: CALL_OW 264
45916: PUSH
45917: LD_INT 26
45919: PUSH
45920: EMPTY
45921: LIST
45922: IN
45923: IFFALSE 45944
// points := [ 120 , 30 , 80 ] ;
45925: LD_ADDR_VAR 0 9
45929: PUSH
45930: LD_INT 120
45932: PUSH
45933: LD_INT 30
45935: PUSH
45936: LD_INT 80
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45944: LD_VAR 0 6
45948: PPUSH
45949: CALL_OW 264
45953: PUSH
45954: LD_INT 22
45956: PUSH
45957: EMPTY
45958: LIST
45959: IN
45960: IFFALSE 45981
// points := [ 40 , 1 , 1 ] ;
45962: LD_ADDR_VAR 0 9
45966: PUSH
45967: LD_INT 40
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45981: LD_VAR 0 6
45985: PPUSH
45986: CALL_OW 264
45990: PUSH
45991: LD_INT 29
45993: PUSH
45994: EMPTY
45995: LIST
45996: IN
45997: IFFALSE 46018
// points := [ 70 , 200 , 400 ] ;
45999: LD_ADDR_VAR 0 9
46003: PUSH
46004: LD_INT 70
46006: PUSH
46007: LD_INT 200
46009: PUSH
46010: LD_INT 400
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46018: LD_VAR 0 6
46022: PPUSH
46023: CALL_OW 264
46027: PUSH
46028: LD_INT 14
46030: PUSH
46031: LD_INT 53
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: IN
46038: IFFALSE 46059
// points := [ 40 , 10 , 20 ] ;
46040: LD_ADDR_VAR 0 9
46044: PUSH
46045: LD_INT 40
46047: PUSH
46048: LD_INT 10
46050: PUSH
46051: LD_INT 20
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46059: LD_VAR 0 6
46063: PPUSH
46064: CALL_OW 264
46068: PUSH
46069: LD_INT 9
46071: PUSH
46072: EMPTY
46073: LIST
46074: IN
46075: IFFALSE 46096
// points := [ 5 , 70 , 20 ] ;
46077: LD_ADDR_VAR 0 9
46081: PUSH
46082: LD_INT 5
46084: PUSH
46085: LD_INT 70
46087: PUSH
46088: LD_INT 20
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46096: LD_VAR 0 6
46100: PPUSH
46101: CALL_OW 264
46105: PUSH
46106: LD_INT 10
46108: PUSH
46109: EMPTY
46110: LIST
46111: IN
46112: IFFALSE 46133
// points := [ 35 , 110 , 70 ] ;
46114: LD_ADDR_VAR 0 9
46118: PUSH
46119: LD_INT 35
46121: PUSH
46122: LD_INT 110
46124: PUSH
46125: LD_INT 70
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: LIST
46132: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46133: LD_VAR 0 6
46137: PPUSH
46138: CALL_OW 265
46142: PUSH
46143: LD_INT 25
46145: EQUAL
46146: IFFALSE 46167
// points := [ 80 , 65 , 100 ] ;
46148: LD_ADDR_VAR 0 9
46152: PUSH
46153: LD_INT 80
46155: PUSH
46156: LD_INT 65
46158: PUSH
46159: LD_INT 100
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46167: LD_VAR 0 6
46171: PPUSH
46172: CALL_OW 263
46176: PUSH
46177: LD_INT 1
46179: EQUAL
46180: IFFALSE 46215
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46182: LD_ADDR_VAR 0 10
46186: PUSH
46187: LD_VAR 0 10
46191: PUSH
46192: LD_VAR 0 6
46196: PPUSH
46197: CALL_OW 311
46201: PPUSH
46202: LD_INT 3
46204: PPUSH
46205: CALL_OW 259
46209: PUSH
46210: LD_INT 4
46212: MUL
46213: MUL
46214: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46215: LD_VAR 0 6
46219: PPUSH
46220: CALL_OW 263
46224: PUSH
46225: LD_INT 2
46227: EQUAL
46228: IFFALSE 46279
// begin j := IsControledBy ( i ) ;
46230: LD_ADDR_VAR 0 7
46234: PUSH
46235: LD_VAR 0 6
46239: PPUSH
46240: CALL_OW 312
46244: ST_TO_ADDR
// if j then
46245: LD_VAR 0 7
46249: IFFALSE 46279
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46251: LD_ADDR_VAR 0 10
46255: PUSH
46256: LD_VAR 0 10
46260: PUSH
46261: LD_VAR 0 7
46265: PPUSH
46266: LD_INT 3
46268: PPUSH
46269: CALL_OW 259
46273: PUSH
46274: LD_INT 3
46276: MUL
46277: MUL
46278: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46279: LD_VAR 0 6
46283: PPUSH
46284: CALL_OW 264
46288: PUSH
46289: LD_INT 5
46291: PUSH
46292: LD_INT 6
46294: PUSH
46295: LD_INT 46
46297: PUSH
46298: LD_INT 44
46300: PUSH
46301: LD_INT 47
46303: PUSH
46304: LD_INT 45
46306: PUSH
46307: LD_INT 28
46309: PUSH
46310: LD_INT 7
46312: PUSH
46313: LD_INT 27
46315: PUSH
46316: LD_INT 29
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: IN
46331: PUSH
46332: LD_VAR 0 1
46336: PPUSH
46337: LD_INT 52
46339: PPUSH
46340: CALL_OW 321
46344: PUSH
46345: LD_INT 2
46347: EQUAL
46348: AND
46349: IFFALSE 46366
// bpoints := bpoints * 1.2 ;
46351: LD_ADDR_VAR 0 10
46355: PUSH
46356: LD_VAR 0 10
46360: PUSH
46361: LD_REAL  1.20000000000000E+0000
46364: MUL
46365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46366: LD_VAR 0 6
46370: PPUSH
46371: CALL_OW 264
46375: PUSH
46376: LD_INT 6
46378: PUSH
46379: LD_INT 46
46381: PUSH
46382: LD_INT 47
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: LIST
46389: IN
46390: IFFALSE 46407
// bpoints := bpoints * 1.2 ;
46392: LD_ADDR_VAR 0 10
46396: PUSH
46397: LD_VAR 0 10
46401: PUSH
46402: LD_REAL  1.20000000000000E+0000
46405: MUL
46406: ST_TO_ADDR
// end ; unit_building :
46407: GO 46421
46409: LD_INT 3
46411: DOUBLE
46412: EQUAL
46413: IFTRUE 46417
46415: GO 46420
46417: POP
// ; end ;
46418: GO 46421
46420: POP
// for j = 1 to 3 do
46421: LD_ADDR_VAR 0 7
46425: PUSH
46426: DOUBLE
46427: LD_INT 1
46429: DEC
46430: ST_TO_ADDR
46431: LD_INT 3
46433: PUSH
46434: FOR_TO
46435: IFFALSE 46488
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46437: LD_ADDR_VAR 0 5
46441: PUSH
46442: LD_VAR 0 5
46446: PPUSH
46447: LD_VAR 0 7
46451: PPUSH
46452: LD_VAR 0 5
46456: PUSH
46457: LD_VAR 0 7
46461: ARRAY
46462: PUSH
46463: LD_VAR 0 9
46467: PUSH
46468: LD_VAR 0 7
46472: ARRAY
46473: PUSH
46474: LD_VAR 0 10
46478: MUL
46479: PLUS
46480: PPUSH
46481: CALL_OW 1
46485: ST_TO_ADDR
46486: GO 46434
46488: POP
46489: POP
// end ;
46490: GO 44969
46492: POP
46493: POP
// result := Replace ( result , 4 , tmp ) ;
46494: LD_ADDR_VAR 0 5
46498: PUSH
46499: LD_VAR 0 5
46503: PPUSH
46504: LD_INT 4
46506: PPUSH
46507: LD_VAR 0 8
46511: PPUSH
46512: CALL_OW 1
46516: ST_TO_ADDR
// end ;
46517: LD_VAR 0 5
46521: RET
// export function DangerAtRange ( unit , range ) ; begin
46522: LD_INT 0
46524: PPUSH
// if not unit then
46525: LD_VAR 0 1
46529: NOT
46530: IFFALSE 46534
// exit ;
46532: GO 46579
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46534: LD_ADDR_VAR 0 3
46538: PUSH
46539: LD_VAR 0 1
46543: PPUSH
46544: CALL_OW 255
46548: PPUSH
46549: LD_VAR 0 1
46553: PPUSH
46554: CALL_OW 250
46558: PPUSH
46559: LD_VAR 0 1
46563: PPUSH
46564: CALL_OW 251
46568: PPUSH
46569: LD_VAR 0 2
46573: PPUSH
46574: CALL 44821 0 4
46578: ST_TO_ADDR
// end ;
46579: LD_VAR 0 3
46583: RET
// export function DangerInArea ( side , area ) ; begin
46584: LD_INT 0
46586: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46587: LD_ADDR_VAR 0 3
46591: PUSH
46592: LD_VAR 0 2
46596: PPUSH
46597: LD_INT 81
46599: PUSH
46600: LD_VAR 0 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PPUSH
46609: CALL_OW 70
46613: ST_TO_ADDR
// end ;
46614: LD_VAR 0 3
46618: RET
// export function IsExtension ( b ) ; begin
46619: LD_INT 0
46621: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46622: LD_ADDR_VAR 0 2
46626: PUSH
46627: LD_VAR 0 1
46631: PUSH
46632: LD_INT 23
46634: PUSH
46635: LD_INT 20
46637: PUSH
46638: LD_INT 22
46640: PUSH
46641: LD_INT 17
46643: PUSH
46644: LD_INT 24
46646: PUSH
46647: LD_INT 21
46649: PUSH
46650: LD_INT 19
46652: PUSH
46653: LD_INT 16
46655: PUSH
46656: LD_INT 25
46658: PUSH
46659: LD_INT 18
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: IN
46674: ST_TO_ADDR
// end ;
46675: LD_VAR 0 2
46679: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46680: LD_INT 0
46682: PPUSH
46683: PPUSH
46684: PPUSH
// result := [ ] ;
46685: LD_ADDR_VAR 0 4
46689: PUSH
46690: EMPTY
46691: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46692: LD_ADDR_VAR 0 5
46696: PUSH
46697: LD_VAR 0 2
46701: PPUSH
46702: LD_INT 21
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PPUSH
46712: CALL_OW 70
46716: ST_TO_ADDR
// if not tmp then
46717: LD_VAR 0 5
46721: NOT
46722: IFFALSE 46726
// exit ;
46724: GO 46790
// if checkLink then
46726: LD_VAR 0 3
46730: IFFALSE 46780
// begin for i in tmp do
46732: LD_ADDR_VAR 0 6
46736: PUSH
46737: LD_VAR 0 5
46741: PUSH
46742: FOR_IN
46743: IFFALSE 46778
// if GetBase ( i ) <> base then
46745: LD_VAR 0 6
46749: PPUSH
46750: CALL_OW 274
46754: PUSH
46755: LD_VAR 0 1
46759: NONEQUAL
46760: IFFALSE 46776
// ComLinkToBase ( base , i ) ;
46762: LD_VAR 0 1
46766: PPUSH
46767: LD_VAR 0 6
46771: PPUSH
46772: CALL_OW 169
46776: GO 46742
46778: POP
46779: POP
// end ; result := tmp ;
46780: LD_ADDR_VAR 0 4
46784: PUSH
46785: LD_VAR 0 5
46789: ST_TO_ADDR
// end ;
46790: LD_VAR 0 4
46794: RET
// export function ComComplete ( units , b ) ; var i ; begin
46795: LD_INT 0
46797: PPUSH
46798: PPUSH
// if not units then
46799: LD_VAR 0 1
46803: NOT
46804: IFFALSE 46808
// exit ;
46806: GO 46898
// for i in units do
46808: LD_ADDR_VAR 0 4
46812: PUSH
46813: LD_VAR 0 1
46817: PUSH
46818: FOR_IN
46819: IFFALSE 46896
// if BuildingStatus ( b ) = bs_build then
46821: LD_VAR 0 2
46825: PPUSH
46826: CALL_OW 461
46830: PUSH
46831: LD_INT 1
46833: EQUAL
46834: IFFALSE 46894
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46836: LD_VAR 0 4
46840: PPUSH
46841: LD_STRING h
46843: PUSH
46844: LD_VAR 0 2
46848: PPUSH
46849: CALL_OW 250
46853: PUSH
46854: LD_VAR 0 2
46858: PPUSH
46859: CALL_OW 251
46863: PUSH
46864: LD_VAR 0 2
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: PPUSH
46890: CALL_OW 446
46894: GO 46818
46896: POP
46897: POP
// end ;
46898: LD_VAR 0 3
46902: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46903: LD_INT 0
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46911: LD_VAR 0 1
46915: NOT
46916: PUSH
46917: LD_VAR 0 1
46921: PPUSH
46922: CALL_OW 263
46926: PUSH
46927: LD_INT 2
46929: NONEQUAL
46930: OR
46931: IFFALSE 46935
// exit ;
46933: GO 47251
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46935: LD_ADDR_VAR 0 6
46939: PUSH
46940: LD_INT 22
46942: PUSH
46943: LD_VAR 0 1
46947: PPUSH
46948: CALL_OW 255
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 30
46962: PUSH
46963: LD_INT 36
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 34
46972: PUSH
46973: LD_INT 31
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PPUSH
46989: CALL_OW 69
46993: ST_TO_ADDR
// if not tmp then
46994: LD_VAR 0 6
46998: NOT
46999: IFFALSE 47003
// exit ;
47001: GO 47251
// result := [ ] ;
47003: LD_ADDR_VAR 0 2
47007: PUSH
47008: EMPTY
47009: ST_TO_ADDR
// for i in tmp do
47010: LD_ADDR_VAR 0 3
47014: PUSH
47015: LD_VAR 0 6
47019: PUSH
47020: FOR_IN
47021: IFFALSE 47092
// begin t := UnitsInside ( i ) ;
47023: LD_ADDR_VAR 0 4
47027: PUSH
47028: LD_VAR 0 3
47032: PPUSH
47033: CALL_OW 313
47037: ST_TO_ADDR
// if t then
47038: LD_VAR 0 4
47042: IFFALSE 47090
// for j in t do
47044: LD_ADDR_VAR 0 7
47048: PUSH
47049: LD_VAR 0 4
47053: PUSH
47054: FOR_IN
47055: IFFALSE 47088
// result := Replace ( result , result + 1 , j ) ;
47057: LD_ADDR_VAR 0 2
47061: PUSH
47062: LD_VAR 0 2
47066: PPUSH
47067: LD_VAR 0 2
47071: PUSH
47072: LD_INT 1
47074: PLUS
47075: PPUSH
47076: LD_VAR 0 7
47080: PPUSH
47081: CALL_OW 1
47085: ST_TO_ADDR
47086: GO 47054
47088: POP
47089: POP
// end ;
47090: GO 47020
47092: POP
47093: POP
// if not result then
47094: LD_VAR 0 2
47098: NOT
47099: IFFALSE 47103
// exit ;
47101: GO 47251
// mech := result [ 1 ] ;
47103: LD_ADDR_VAR 0 5
47107: PUSH
47108: LD_VAR 0 2
47112: PUSH
47113: LD_INT 1
47115: ARRAY
47116: ST_TO_ADDR
// if result > 1 then
47117: LD_VAR 0 2
47121: PUSH
47122: LD_INT 1
47124: GREATER
47125: IFFALSE 47237
// begin for i = 2 to result do
47127: LD_ADDR_VAR 0 3
47131: PUSH
47132: DOUBLE
47133: LD_INT 2
47135: DEC
47136: ST_TO_ADDR
47137: LD_VAR 0 2
47141: PUSH
47142: FOR_TO
47143: IFFALSE 47235
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47145: LD_ADDR_VAR 0 4
47149: PUSH
47150: LD_VAR 0 2
47154: PUSH
47155: LD_VAR 0 3
47159: ARRAY
47160: PPUSH
47161: LD_INT 3
47163: PPUSH
47164: CALL_OW 259
47168: PUSH
47169: LD_VAR 0 2
47173: PUSH
47174: LD_VAR 0 3
47178: ARRAY
47179: PPUSH
47180: CALL_OW 432
47184: MINUS
47185: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47186: LD_VAR 0 4
47190: PUSH
47191: LD_VAR 0 5
47195: PPUSH
47196: LD_INT 3
47198: PPUSH
47199: CALL_OW 259
47203: PUSH
47204: LD_VAR 0 5
47208: PPUSH
47209: CALL_OW 432
47213: MINUS
47214: GREATEREQUAL
47215: IFFALSE 47233
// mech := result [ i ] ;
47217: LD_ADDR_VAR 0 5
47221: PUSH
47222: LD_VAR 0 2
47226: PUSH
47227: LD_VAR 0 3
47231: ARRAY
47232: ST_TO_ADDR
// end ;
47233: GO 47142
47235: POP
47236: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47237: LD_VAR 0 1
47241: PPUSH
47242: LD_VAR 0 5
47246: PPUSH
47247: CALL_OW 135
// end ;
47251: LD_VAR 0 2
47255: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47256: LD_INT 0
47258: PPUSH
47259: PPUSH
47260: PPUSH
47261: PPUSH
47262: PPUSH
47263: PPUSH
47264: PPUSH
47265: PPUSH
47266: PPUSH
47267: PPUSH
47268: PPUSH
47269: PPUSH
47270: PPUSH
// result := [ ] ;
47271: LD_ADDR_VAR 0 7
47275: PUSH
47276: EMPTY
47277: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47278: LD_VAR 0 1
47282: PPUSH
47283: CALL_OW 266
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: IN
47298: NOT
47299: IFFALSE 47303
// exit ;
47301: GO 48937
// if name then
47303: LD_VAR 0 3
47307: IFFALSE 47323
// SetBName ( base_dep , name ) ;
47309: LD_VAR 0 1
47313: PPUSH
47314: LD_VAR 0 3
47318: PPUSH
47319: CALL_OW 500
// base := GetBase ( base_dep ) ;
47323: LD_ADDR_VAR 0 15
47327: PUSH
47328: LD_VAR 0 1
47332: PPUSH
47333: CALL_OW 274
47337: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47338: LD_ADDR_VAR 0 16
47342: PUSH
47343: LD_VAR 0 1
47347: PPUSH
47348: CALL_OW 255
47352: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47353: LD_ADDR_VAR 0 17
47357: PUSH
47358: LD_VAR 0 1
47362: PPUSH
47363: CALL_OW 248
47367: ST_TO_ADDR
// if sources then
47368: LD_VAR 0 5
47372: IFFALSE 47419
// for i = 1 to 3 do
47374: LD_ADDR_VAR 0 8
47378: PUSH
47379: DOUBLE
47380: LD_INT 1
47382: DEC
47383: ST_TO_ADDR
47384: LD_INT 3
47386: PUSH
47387: FOR_TO
47388: IFFALSE 47417
// AddResourceType ( base , i , sources [ i ] ) ;
47390: LD_VAR 0 15
47394: PPUSH
47395: LD_VAR 0 8
47399: PPUSH
47400: LD_VAR 0 5
47404: PUSH
47405: LD_VAR 0 8
47409: ARRAY
47410: PPUSH
47411: CALL_OW 276
47415: GO 47387
47417: POP
47418: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47419: LD_ADDR_VAR 0 18
47423: PUSH
47424: LD_VAR 0 15
47428: PPUSH
47429: LD_VAR 0 2
47433: PPUSH
47434: LD_INT 1
47436: PPUSH
47437: CALL 46680 0 3
47441: ST_TO_ADDR
// InitHc ;
47442: CALL_OW 19
// InitUc ;
47446: CALL_OW 18
// uc_side := side ;
47450: LD_ADDR_OWVAR 20
47454: PUSH
47455: LD_VAR 0 16
47459: ST_TO_ADDR
// uc_nation := nation ;
47460: LD_ADDR_OWVAR 21
47464: PUSH
47465: LD_VAR 0 17
47469: ST_TO_ADDR
// if buildings then
47470: LD_VAR 0 18
47474: IFFALSE 48796
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47476: LD_ADDR_VAR 0 19
47480: PUSH
47481: LD_VAR 0 18
47485: PPUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 30
47491: PUSH
47492: LD_INT 29
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 30
47501: PUSH
47502: LD_INT 30
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: PPUSH
47514: CALL_OW 72
47518: ST_TO_ADDR
// if tmp then
47519: LD_VAR 0 19
47523: IFFALSE 47571
// for i in tmp do
47525: LD_ADDR_VAR 0 8
47529: PUSH
47530: LD_VAR 0 19
47534: PUSH
47535: FOR_IN
47536: IFFALSE 47569
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47538: LD_VAR 0 8
47542: PPUSH
47543: CALL_OW 250
47547: PPUSH
47548: LD_VAR 0 8
47552: PPUSH
47553: CALL_OW 251
47557: PPUSH
47558: LD_VAR 0 16
47562: PPUSH
47563: CALL_OW 441
47567: GO 47535
47569: POP
47570: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47571: LD_VAR 0 18
47575: PPUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 30
47581: PUSH
47582: LD_INT 32
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 30
47591: PUSH
47592: LD_INT 33
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: PPUSH
47604: CALL_OW 72
47608: IFFALSE 47696
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47610: LD_ADDR_VAR 0 8
47614: PUSH
47615: LD_VAR 0 18
47619: PPUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 30
47625: PUSH
47626: LD_INT 32
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 30
47635: PUSH
47636: LD_INT 33
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: PPUSH
47648: CALL_OW 72
47652: PUSH
47653: FOR_IN
47654: IFFALSE 47694
// begin if not GetBWeapon ( i ) then
47656: LD_VAR 0 8
47660: PPUSH
47661: CALL_OW 269
47665: NOT
47666: IFFALSE 47692
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47668: LD_VAR 0 8
47672: PPUSH
47673: LD_VAR 0 8
47677: PPUSH
47678: LD_VAR 0 2
47682: PPUSH
47683: CALL 48942 0 2
47687: PPUSH
47688: CALL_OW 431
// end ;
47692: GO 47653
47694: POP
47695: POP
// end ; for i = 1 to personel do
47696: LD_ADDR_VAR 0 8
47700: PUSH
47701: DOUBLE
47702: LD_INT 1
47704: DEC
47705: ST_TO_ADDR
47706: LD_VAR 0 6
47710: PUSH
47711: FOR_TO
47712: IFFALSE 48776
// begin if i > 4 then
47714: LD_VAR 0 8
47718: PUSH
47719: LD_INT 4
47721: GREATER
47722: IFFALSE 47726
// break ;
47724: GO 48776
// case i of 1 :
47726: LD_VAR 0 8
47730: PUSH
47731: LD_INT 1
47733: DOUBLE
47734: EQUAL
47735: IFTRUE 47739
47737: GO 47819
47739: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47740: LD_ADDR_VAR 0 12
47744: PUSH
47745: LD_VAR 0 18
47749: PPUSH
47750: LD_INT 22
47752: PUSH
47753: LD_VAR 0 16
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 58
47764: PUSH
47765: EMPTY
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 30
47773: PUSH
47774: LD_INT 32
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 30
47783: PUSH
47784: LD_INT 4
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 30
47793: PUSH
47794: LD_INT 5
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: PPUSH
47812: CALL_OW 72
47816: ST_TO_ADDR
47817: GO 48041
47819: LD_INT 2
47821: DOUBLE
47822: EQUAL
47823: IFTRUE 47827
47825: GO 47889
47827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47828: LD_ADDR_VAR 0 12
47832: PUSH
47833: LD_VAR 0 18
47837: PPUSH
47838: LD_INT 22
47840: PUSH
47841: LD_VAR 0 16
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: LD_INT 30
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 30
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PPUSH
47882: CALL_OW 72
47886: ST_TO_ADDR
47887: GO 48041
47889: LD_INT 3
47891: DOUBLE
47892: EQUAL
47893: IFTRUE 47897
47895: GO 47959
47897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47898: LD_ADDR_VAR 0 12
47902: PUSH
47903: LD_VAR 0 18
47907: PPUSH
47908: LD_INT 22
47910: PUSH
47911: LD_VAR 0 16
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 30
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 30
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PPUSH
47952: CALL_OW 72
47956: ST_TO_ADDR
47957: GO 48041
47959: LD_INT 4
47961: DOUBLE
47962: EQUAL
47963: IFTRUE 47967
47965: GO 48040
47967: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47968: LD_ADDR_VAR 0 12
47972: PUSH
47973: LD_VAR 0 18
47977: PPUSH
47978: LD_INT 22
47980: PUSH
47981: LD_VAR 0 16
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 30
47995: PUSH
47996: LD_INT 6
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 30
48005: PUSH
48006: LD_INT 7
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 30
48015: PUSH
48016: LD_INT 8
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PPUSH
48033: CALL_OW 72
48037: ST_TO_ADDR
48038: GO 48041
48040: POP
// if i = 1 then
48041: LD_VAR 0 8
48045: PUSH
48046: LD_INT 1
48048: EQUAL
48049: IFFALSE 48160
// begin tmp := [ ] ;
48051: LD_ADDR_VAR 0 19
48055: PUSH
48056: EMPTY
48057: ST_TO_ADDR
// for j in f do
48058: LD_ADDR_VAR 0 9
48062: PUSH
48063: LD_VAR 0 12
48067: PUSH
48068: FOR_IN
48069: IFFALSE 48142
// if GetBType ( j ) = b_bunker then
48071: LD_VAR 0 9
48075: PPUSH
48076: CALL_OW 266
48080: PUSH
48081: LD_INT 32
48083: EQUAL
48084: IFFALSE 48111
// tmp := Insert ( tmp , 1 , j ) else
48086: LD_ADDR_VAR 0 19
48090: PUSH
48091: LD_VAR 0 19
48095: PPUSH
48096: LD_INT 1
48098: PPUSH
48099: LD_VAR 0 9
48103: PPUSH
48104: CALL_OW 2
48108: ST_TO_ADDR
48109: GO 48140
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48111: LD_ADDR_VAR 0 19
48115: PUSH
48116: LD_VAR 0 19
48120: PPUSH
48121: LD_VAR 0 19
48125: PUSH
48126: LD_INT 1
48128: PLUS
48129: PPUSH
48130: LD_VAR 0 9
48134: PPUSH
48135: CALL_OW 2
48139: ST_TO_ADDR
48140: GO 48068
48142: POP
48143: POP
// if tmp then
48144: LD_VAR 0 19
48148: IFFALSE 48160
// f := tmp ;
48150: LD_ADDR_VAR 0 12
48154: PUSH
48155: LD_VAR 0 19
48159: ST_TO_ADDR
// end ; x := personel [ i ] ;
48160: LD_ADDR_VAR 0 13
48164: PUSH
48165: LD_VAR 0 6
48169: PUSH
48170: LD_VAR 0 8
48174: ARRAY
48175: ST_TO_ADDR
// if x = - 1 then
48176: LD_VAR 0 13
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: EQUAL
48185: IFFALSE 48394
// begin for j in f do
48187: LD_ADDR_VAR 0 9
48191: PUSH
48192: LD_VAR 0 12
48196: PUSH
48197: FOR_IN
48198: IFFALSE 48390
// repeat InitHc ;
48200: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48204: LD_VAR 0 9
48208: PPUSH
48209: CALL_OW 266
48213: PUSH
48214: LD_INT 5
48216: EQUAL
48217: IFFALSE 48287
// begin if UnitsInside ( j ) < 3 then
48219: LD_VAR 0 9
48223: PPUSH
48224: CALL_OW 313
48228: PUSH
48229: LD_INT 3
48231: LESS
48232: IFFALSE 48268
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48234: LD_INT 0
48236: PPUSH
48237: LD_INT 5
48239: PUSH
48240: LD_INT 8
48242: PUSH
48243: LD_INT 9
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: PUSH
48251: LD_VAR 0 17
48255: ARRAY
48256: PPUSH
48257: LD_VAR 0 4
48261: PPUSH
48262: CALL_OW 380
48266: GO 48285
// PrepareHuman ( false , i , skill ) ;
48268: LD_INT 0
48270: PPUSH
48271: LD_VAR 0 8
48275: PPUSH
48276: LD_VAR 0 4
48280: PPUSH
48281: CALL_OW 380
// end else
48285: GO 48304
// PrepareHuman ( false , i , skill ) ;
48287: LD_INT 0
48289: PPUSH
48290: LD_VAR 0 8
48294: PPUSH
48295: LD_VAR 0 4
48299: PPUSH
48300: CALL_OW 380
// un := CreateHuman ;
48304: LD_ADDR_VAR 0 14
48308: PUSH
48309: CALL_OW 44
48313: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48314: LD_ADDR_VAR 0 7
48318: PUSH
48319: LD_VAR 0 7
48323: PPUSH
48324: LD_INT 1
48326: PPUSH
48327: LD_VAR 0 14
48331: PPUSH
48332: CALL_OW 2
48336: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48337: LD_VAR 0 14
48341: PPUSH
48342: LD_VAR 0 9
48346: PPUSH
48347: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48351: LD_VAR 0 9
48355: PPUSH
48356: CALL_OW 313
48360: PUSH
48361: LD_INT 6
48363: EQUAL
48364: PUSH
48365: LD_VAR 0 9
48369: PPUSH
48370: CALL_OW 266
48374: PUSH
48375: LD_INT 32
48377: PUSH
48378: LD_INT 31
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: IN
48385: OR
48386: IFFALSE 48200
48388: GO 48197
48390: POP
48391: POP
// end else
48392: GO 48774
// for j = 1 to x do
48394: LD_ADDR_VAR 0 9
48398: PUSH
48399: DOUBLE
48400: LD_INT 1
48402: DEC
48403: ST_TO_ADDR
48404: LD_VAR 0 13
48408: PUSH
48409: FOR_TO
48410: IFFALSE 48772
// begin InitHc ;
48412: CALL_OW 19
// if not f then
48416: LD_VAR 0 12
48420: NOT
48421: IFFALSE 48510
// begin PrepareHuman ( false , i , skill ) ;
48423: LD_INT 0
48425: PPUSH
48426: LD_VAR 0 8
48430: PPUSH
48431: LD_VAR 0 4
48435: PPUSH
48436: CALL_OW 380
// un := CreateHuman ;
48440: LD_ADDR_VAR 0 14
48444: PUSH
48445: CALL_OW 44
48449: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48450: LD_ADDR_VAR 0 7
48454: PUSH
48455: LD_VAR 0 7
48459: PPUSH
48460: LD_INT 1
48462: PPUSH
48463: LD_VAR 0 14
48467: PPUSH
48468: CALL_OW 2
48472: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48473: LD_VAR 0 14
48477: PPUSH
48478: LD_VAR 0 1
48482: PPUSH
48483: CALL_OW 250
48487: PPUSH
48488: LD_VAR 0 1
48492: PPUSH
48493: CALL_OW 251
48497: PPUSH
48498: LD_INT 10
48500: PPUSH
48501: LD_INT 0
48503: PPUSH
48504: CALL_OW 50
// continue ;
48508: GO 48409
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48510: LD_VAR 0 12
48514: PUSH
48515: LD_INT 1
48517: ARRAY
48518: PPUSH
48519: CALL_OW 313
48523: PUSH
48524: LD_VAR 0 12
48528: PUSH
48529: LD_INT 1
48531: ARRAY
48532: PPUSH
48533: CALL_OW 266
48537: PUSH
48538: LD_INT 32
48540: PUSH
48541: LD_INT 31
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: IN
48548: AND
48549: PUSH
48550: LD_VAR 0 12
48554: PUSH
48555: LD_INT 1
48557: ARRAY
48558: PPUSH
48559: CALL_OW 313
48563: PUSH
48564: LD_INT 6
48566: EQUAL
48567: OR
48568: IFFALSE 48588
// f := Delete ( f , 1 ) ;
48570: LD_ADDR_VAR 0 12
48574: PUSH
48575: LD_VAR 0 12
48579: PPUSH
48580: LD_INT 1
48582: PPUSH
48583: CALL_OW 3
48587: ST_TO_ADDR
// if not f then
48588: LD_VAR 0 12
48592: NOT
48593: IFFALSE 48611
// begin x := x + 2 ;
48595: LD_ADDR_VAR 0 13
48599: PUSH
48600: LD_VAR 0 13
48604: PUSH
48605: LD_INT 2
48607: PLUS
48608: ST_TO_ADDR
// continue ;
48609: GO 48409
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48611: LD_VAR 0 12
48615: PUSH
48616: LD_INT 1
48618: ARRAY
48619: PPUSH
48620: CALL_OW 266
48624: PUSH
48625: LD_INT 5
48627: EQUAL
48628: IFFALSE 48702
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48630: LD_VAR 0 12
48634: PUSH
48635: LD_INT 1
48637: ARRAY
48638: PPUSH
48639: CALL_OW 313
48643: PUSH
48644: LD_INT 3
48646: LESS
48647: IFFALSE 48683
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48649: LD_INT 0
48651: PPUSH
48652: LD_INT 5
48654: PUSH
48655: LD_INT 8
48657: PUSH
48658: LD_INT 9
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: PUSH
48666: LD_VAR 0 17
48670: ARRAY
48671: PPUSH
48672: LD_VAR 0 4
48676: PPUSH
48677: CALL_OW 380
48681: GO 48700
// PrepareHuman ( false , i , skill ) ;
48683: LD_INT 0
48685: PPUSH
48686: LD_VAR 0 8
48690: PPUSH
48691: LD_VAR 0 4
48695: PPUSH
48696: CALL_OW 380
// end else
48700: GO 48719
// PrepareHuman ( false , i , skill ) ;
48702: LD_INT 0
48704: PPUSH
48705: LD_VAR 0 8
48709: PPUSH
48710: LD_VAR 0 4
48714: PPUSH
48715: CALL_OW 380
// un := CreateHuman ;
48719: LD_ADDR_VAR 0 14
48723: PUSH
48724: CALL_OW 44
48728: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48729: LD_ADDR_VAR 0 7
48733: PUSH
48734: LD_VAR 0 7
48738: PPUSH
48739: LD_INT 1
48741: PPUSH
48742: LD_VAR 0 14
48746: PPUSH
48747: CALL_OW 2
48751: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48752: LD_VAR 0 14
48756: PPUSH
48757: LD_VAR 0 12
48761: PUSH
48762: LD_INT 1
48764: ARRAY
48765: PPUSH
48766: CALL_OW 52
// end ;
48770: GO 48409
48772: POP
48773: POP
// end ;
48774: GO 47711
48776: POP
48777: POP
// result := result ^ buildings ;
48778: LD_ADDR_VAR 0 7
48782: PUSH
48783: LD_VAR 0 7
48787: PUSH
48788: LD_VAR 0 18
48792: ADD
48793: ST_TO_ADDR
// end else
48794: GO 48937
// begin for i = 1 to personel do
48796: LD_ADDR_VAR 0 8
48800: PUSH
48801: DOUBLE
48802: LD_INT 1
48804: DEC
48805: ST_TO_ADDR
48806: LD_VAR 0 6
48810: PUSH
48811: FOR_TO
48812: IFFALSE 48935
// begin if i > 4 then
48814: LD_VAR 0 8
48818: PUSH
48819: LD_INT 4
48821: GREATER
48822: IFFALSE 48826
// break ;
48824: GO 48935
// x := personel [ i ] ;
48826: LD_ADDR_VAR 0 13
48830: PUSH
48831: LD_VAR 0 6
48835: PUSH
48836: LD_VAR 0 8
48840: ARRAY
48841: ST_TO_ADDR
// if x = - 1 then
48842: LD_VAR 0 13
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: EQUAL
48851: IFFALSE 48855
// continue ;
48853: GO 48811
// PrepareHuman ( false , i , skill ) ;
48855: LD_INT 0
48857: PPUSH
48858: LD_VAR 0 8
48862: PPUSH
48863: LD_VAR 0 4
48867: PPUSH
48868: CALL_OW 380
// un := CreateHuman ;
48872: LD_ADDR_VAR 0 14
48876: PUSH
48877: CALL_OW 44
48881: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48882: LD_VAR 0 14
48886: PPUSH
48887: LD_VAR 0 1
48891: PPUSH
48892: CALL_OW 250
48896: PPUSH
48897: LD_VAR 0 1
48901: PPUSH
48902: CALL_OW 251
48906: PPUSH
48907: LD_INT 10
48909: PPUSH
48910: LD_INT 0
48912: PPUSH
48913: CALL_OW 50
// result := result ^ un ;
48917: LD_ADDR_VAR 0 7
48921: PUSH
48922: LD_VAR 0 7
48926: PUSH
48927: LD_VAR 0 14
48931: ADD
48932: ST_TO_ADDR
// end ;
48933: GO 48811
48935: POP
48936: POP
// end ; end ;
48937: LD_VAR 0 7
48941: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48942: LD_INT 0
48944: PPUSH
48945: PPUSH
48946: PPUSH
48947: PPUSH
48948: PPUSH
48949: PPUSH
48950: PPUSH
48951: PPUSH
48952: PPUSH
48953: PPUSH
48954: PPUSH
48955: PPUSH
48956: PPUSH
48957: PPUSH
48958: PPUSH
48959: PPUSH
// result := false ;
48960: LD_ADDR_VAR 0 3
48964: PUSH
48965: LD_INT 0
48967: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48968: LD_VAR 0 1
48972: NOT
48973: PUSH
48974: LD_VAR 0 1
48978: PPUSH
48979: CALL_OW 266
48983: PUSH
48984: LD_INT 32
48986: PUSH
48987: LD_INT 33
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: IN
48994: NOT
48995: OR
48996: IFFALSE 49000
// exit ;
48998: GO 50109
// nat := GetNation ( tower ) ;
49000: LD_ADDR_VAR 0 12
49004: PUSH
49005: LD_VAR 0 1
49009: PPUSH
49010: CALL_OW 248
49014: ST_TO_ADDR
// side := GetSide ( tower ) ;
49015: LD_ADDR_VAR 0 16
49019: PUSH
49020: LD_VAR 0 1
49024: PPUSH
49025: CALL_OW 255
49029: ST_TO_ADDR
// x := GetX ( tower ) ;
49030: LD_ADDR_VAR 0 10
49034: PUSH
49035: LD_VAR 0 1
49039: PPUSH
49040: CALL_OW 250
49044: ST_TO_ADDR
// y := GetY ( tower ) ;
49045: LD_ADDR_VAR 0 11
49049: PUSH
49050: LD_VAR 0 1
49054: PPUSH
49055: CALL_OW 251
49059: ST_TO_ADDR
// if not x or not y then
49060: LD_VAR 0 10
49064: NOT
49065: PUSH
49066: LD_VAR 0 11
49070: NOT
49071: OR
49072: IFFALSE 49076
// exit ;
49074: GO 50109
// weapon := 0 ;
49076: LD_ADDR_VAR 0 18
49080: PUSH
49081: LD_INT 0
49083: ST_TO_ADDR
// fac_list := [ ] ;
49084: LD_ADDR_VAR 0 17
49088: PUSH
49089: EMPTY
49090: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49091: LD_ADDR_VAR 0 6
49095: PUSH
49096: LD_VAR 0 1
49100: PPUSH
49101: CALL_OW 274
49105: PPUSH
49106: LD_VAR 0 2
49110: PPUSH
49111: LD_INT 0
49113: PPUSH
49114: CALL 46680 0 3
49118: PPUSH
49119: LD_INT 30
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PPUSH
49129: CALL_OW 72
49133: ST_TO_ADDR
// if not factories then
49134: LD_VAR 0 6
49138: NOT
49139: IFFALSE 49143
// exit ;
49141: GO 50109
// for i in factories do
49143: LD_ADDR_VAR 0 8
49147: PUSH
49148: LD_VAR 0 6
49152: PUSH
49153: FOR_IN
49154: IFFALSE 49179
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49156: LD_ADDR_VAR 0 17
49160: PUSH
49161: LD_VAR 0 17
49165: PUSH
49166: LD_VAR 0 8
49170: PPUSH
49171: CALL_OW 478
49175: UNION
49176: ST_TO_ADDR
49177: GO 49153
49179: POP
49180: POP
// if not fac_list then
49181: LD_VAR 0 17
49185: NOT
49186: IFFALSE 49190
// exit ;
49188: GO 50109
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49190: LD_ADDR_VAR 0 5
49194: PUSH
49195: LD_INT 4
49197: PUSH
49198: LD_INT 5
49200: PUSH
49201: LD_INT 9
49203: PUSH
49204: LD_INT 10
49206: PUSH
49207: LD_INT 6
49209: PUSH
49210: LD_INT 7
49212: PUSH
49213: LD_INT 11
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 27
49227: PUSH
49228: LD_INT 28
49230: PUSH
49231: LD_INT 26
49233: PUSH
49234: LD_INT 30
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 43
49245: PUSH
49246: LD_INT 44
49248: PUSH
49249: LD_INT 46
49251: PUSH
49252: LD_INT 45
49254: PUSH
49255: LD_INT 47
49257: PUSH
49258: LD_INT 49
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: PUSH
49274: LD_VAR 0 12
49278: ARRAY
49279: ST_TO_ADDR
// list := list isect fac_list ;
49280: LD_ADDR_VAR 0 5
49284: PUSH
49285: LD_VAR 0 5
49289: PUSH
49290: LD_VAR 0 17
49294: ISECT
49295: ST_TO_ADDR
// if not list then
49296: LD_VAR 0 5
49300: NOT
49301: IFFALSE 49305
// exit ;
49303: GO 50109
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49305: LD_VAR 0 12
49309: PUSH
49310: LD_INT 3
49312: EQUAL
49313: PUSH
49314: LD_INT 49
49316: PUSH
49317: LD_VAR 0 5
49321: IN
49322: AND
49323: PUSH
49324: LD_INT 31
49326: PPUSH
49327: LD_VAR 0 16
49331: PPUSH
49332: CALL_OW 321
49336: PUSH
49337: LD_INT 2
49339: EQUAL
49340: AND
49341: IFFALSE 49401
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49343: LD_INT 22
49345: PUSH
49346: LD_VAR 0 16
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 35
49357: PUSH
49358: LD_INT 49
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 91
49367: PUSH
49368: LD_VAR 0 1
49372: PUSH
49373: LD_INT 10
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: PPUSH
49386: CALL_OW 69
49390: NOT
49391: IFFALSE 49401
// weapon := ru_time_lapser ;
49393: LD_ADDR_VAR 0 18
49397: PUSH
49398: LD_INT 49
49400: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49401: LD_VAR 0 12
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: IN
49416: PUSH
49417: LD_INT 11
49419: PUSH
49420: LD_VAR 0 5
49424: IN
49425: PUSH
49426: LD_INT 30
49428: PUSH
49429: LD_VAR 0 5
49433: IN
49434: OR
49435: AND
49436: PUSH
49437: LD_INT 6
49439: PPUSH
49440: LD_VAR 0 16
49444: PPUSH
49445: CALL_OW 321
49449: PUSH
49450: LD_INT 2
49452: EQUAL
49453: AND
49454: IFFALSE 49619
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49456: LD_INT 22
49458: PUSH
49459: LD_VAR 0 16
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: LD_INT 35
49473: PUSH
49474: LD_INT 11
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 35
49483: PUSH
49484: LD_INT 30
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 91
49498: PUSH
49499: LD_VAR 0 1
49503: PUSH
49504: LD_INT 18
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: PPUSH
49517: CALL_OW 69
49521: NOT
49522: PUSH
49523: LD_INT 22
49525: PUSH
49526: LD_VAR 0 16
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 30
49540: PUSH
49541: LD_INT 32
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 30
49550: PUSH
49551: LD_INT 33
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 91
49565: PUSH
49566: LD_VAR 0 1
49570: PUSH
49571: LD_INT 12
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: LIST
49583: PUSH
49584: EMPTY
49585: LIST
49586: PPUSH
49587: CALL_OW 69
49591: PUSH
49592: LD_INT 2
49594: GREATER
49595: AND
49596: IFFALSE 49619
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49598: LD_ADDR_VAR 0 18
49602: PUSH
49603: LD_INT 11
49605: PUSH
49606: LD_INT 30
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_VAR 0 12
49617: ARRAY
49618: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49619: LD_VAR 0 18
49623: NOT
49624: PUSH
49625: LD_INT 40
49627: PPUSH
49628: LD_VAR 0 16
49632: PPUSH
49633: CALL_OW 321
49637: PUSH
49638: LD_INT 2
49640: EQUAL
49641: AND
49642: PUSH
49643: LD_INT 7
49645: PUSH
49646: LD_VAR 0 5
49650: IN
49651: PUSH
49652: LD_INT 28
49654: PUSH
49655: LD_VAR 0 5
49659: IN
49660: OR
49661: PUSH
49662: LD_INT 45
49664: PUSH
49665: LD_VAR 0 5
49669: IN
49670: OR
49671: AND
49672: IFFALSE 49926
// begin hex := GetHexInfo ( x , y ) ;
49674: LD_ADDR_VAR 0 4
49678: PUSH
49679: LD_VAR 0 10
49683: PPUSH
49684: LD_VAR 0 11
49688: PPUSH
49689: CALL_OW 546
49693: ST_TO_ADDR
// if hex [ 1 ] then
49694: LD_VAR 0 4
49698: PUSH
49699: LD_INT 1
49701: ARRAY
49702: IFFALSE 49706
// exit ;
49704: GO 50109
// height := hex [ 2 ] ;
49706: LD_ADDR_VAR 0 15
49710: PUSH
49711: LD_VAR 0 4
49715: PUSH
49716: LD_INT 2
49718: ARRAY
49719: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49720: LD_ADDR_VAR 0 14
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: LD_INT 5
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// for i in tmp do
49743: LD_ADDR_VAR 0 8
49747: PUSH
49748: LD_VAR 0 14
49752: PUSH
49753: FOR_IN
49754: IFFALSE 49924
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49756: LD_ADDR_VAR 0 9
49760: PUSH
49761: LD_VAR 0 10
49765: PPUSH
49766: LD_VAR 0 8
49770: PPUSH
49771: LD_INT 5
49773: PPUSH
49774: CALL_OW 272
49778: PUSH
49779: LD_VAR 0 11
49783: PPUSH
49784: LD_VAR 0 8
49788: PPUSH
49789: LD_INT 5
49791: PPUSH
49792: CALL_OW 273
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49801: LD_VAR 0 9
49805: PUSH
49806: LD_INT 1
49808: ARRAY
49809: PPUSH
49810: LD_VAR 0 9
49814: PUSH
49815: LD_INT 2
49817: ARRAY
49818: PPUSH
49819: CALL_OW 488
49823: IFFALSE 49922
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49825: LD_ADDR_VAR 0 4
49829: PUSH
49830: LD_VAR 0 9
49834: PUSH
49835: LD_INT 1
49837: ARRAY
49838: PPUSH
49839: LD_VAR 0 9
49843: PUSH
49844: LD_INT 2
49846: ARRAY
49847: PPUSH
49848: CALL_OW 546
49852: ST_TO_ADDR
// if hex [ 1 ] then
49853: LD_VAR 0 4
49857: PUSH
49858: LD_INT 1
49860: ARRAY
49861: IFFALSE 49865
// continue ;
49863: GO 49753
// h := hex [ 2 ] ;
49865: LD_ADDR_VAR 0 13
49869: PUSH
49870: LD_VAR 0 4
49874: PUSH
49875: LD_INT 2
49877: ARRAY
49878: ST_TO_ADDR
// if h + 7 < height then
49879: LD_VAR 0 13
49883: PUSH
49884: LD_INT 7
49886: PLUS
49887: PUSH
49888: LD_VAR 0 15
49892: LESS
49893: IFFALSE 49922
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49895: LD_ADDR_VAR 0 18
49899: PUSH
49900: LD_INT 7
49902: PUSH
49903: LD_INT 28
49905: PUSH
49906: LD_INT 45
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: LIST
49913: PUSH
49914: LD_VAR 0 12
49918: ARRAY
49919: ST_TO_ADDR
// break ;
49920: GO 49924
// end ; end ; end ;
49922: GO 49753
49924: POP
49925: POP
// end ; if not weapon then
49926: LD_VAR 0 18
49930: NOT
49931: IFFALSE 49991
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49933: LD_ADDR_VAR 0 5
49937: PUSH
49938: LD_VAR 0 5
49942: PUSH
49943: LD_INT 11
49945: PUSH
49946: LD_INT 30
49948: PUSH
49949: LD_INT 49
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: DIFF
49957: ST_TO_ADDR
// if not list then
49958: LD_VAR 0 5
49962: NOT
49963: IFFALSE 49967
// exit ;
49965: GO 50109
// weapon := list [ rand ( 1 , list ) ] ;
49967: LD_ADDR_VAR 0 18
49971: PUSH
49972: LD_VAR 0 5
49976: PUSH
49977: LD_INT 1
49979: PPUSH
49980: LD_VAR 0 5
49984: PPUSH
49985: CALL_OW 12
49989: ARRAY
49990: ST_TO_ADDR
// end ; if weapon then
49991: LD_VAR 0 18
49995: IFFALSE 50109
// begin tmp := CostOfWeapon ( weapon ) ;
49997: LD_ADDR_VAR 0 14
50001: PUSH
50002: LD_VAR 0 18
50006: PPUSH
50007: CALL_OW 451
50011: ST_TO_ADDR
// j := GetBase ( tower ) ;
50012: LD_ADDR_VAR 0 9
50016: PUSH
50017: LD_VAR 0 1
50021: PPUSH
50022: CALL_OW 274
50026: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50027: LD_VAR 0 9
50031: PPUSH
50032: LD_INT 1
50034: PPUSH
50035: CALL_OW 275
50039: PUSH
50040: LD_VAR 0 14
50044: PUSH
50045: LD_INT 1
50047: ARRAY
50048: GREATEREQUAL
50049: PUSH
50050: LD_VAR 0 9
50054: PPUSH
50055: LD_INT 2
50057: PPUSH
50058: CALL_OW 275
50062: PUSH
50063: LD_VAR 0 14
50067: PUSH
50068: LD_INT 2
50070: ARRAY
50071: GREATEREQUAL
50072: AND
50073: PUSH
50074: LD_VAR 0 9
50078: PPUSH
50079: LD_INT 3
50081: PPUSH
50082: CALL_OW 275
50086: PUSH
50087: LD_VAR 0 14
50091: PUSH
50092: LD_INT 3
50094: ARRAY
50095: GREATEREQUAL
50096: AND
50097: IFFALSE 50109
// result := weapon ;
50099: LD_ADDR_VAR 0 3
50103: PUSH
50104: LD_VAR 0 18
50108: ST_TO_ADDR
// end ; end ;
50109: LD_VAR 0 3
50113: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50114: LD_INT 0
50116: PPUSH
50117: PPUSH
// result := true ;
50118: LD_ADDR_VAR 0 3
50122: PUSH
50123: LD_INT 1
50125: ST_TO_ADDR
// if array1 = array2 then
50126: LD_VAR 0 1
50130: PUSH
50131: LD_VAR 0 2
50135: EQUAL
50136: IFFALSE 50196
// begin for i = 1 to array1 do
50138: LD_ADDR_VAR 0 4
50142: PUSH
50143: DOUBLE
50144: LD_INT 1
50146: DEC
50147: ST_TO_ADDR
50148: LD_VAR 0 1
50152: PUSH
50153: FOR_TO
50154: IFFALSE 50192
// if array1 [ i ] <> array2 [ i ] then
50156: LD_VAR 0 1
50160: PUSH
50161: LD_VAR 0 4
50165: ARRAY
50166: PUSH
50167: LD_VAR 0 2
50171: PUSH
50172: LD_VAR 0 4
50176: ARRAY
50177: NONEQUAL
50178: IFFALSE 50190
// begin result := false ;
50180: LD_ADDR_VAR 0 3
50184: PUSH
50185: LD_INT 0
50187: ST_TO_ADDR
// break ;
50188: GO 50192
// end ;
50190: GO 50153
50192: POP
50193: POP
// end else
50194: GO 50204
// result := false ;
50196: LD_ADDR_VAR 0 3
50200: PUSH
50201: LD_INT 0
50203: ST_TO_ADDR
// end ;
50204: LD_VAR 0 3
50208: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50209: LD_INT 0
50211: PPUSH
50212: PPUSH
// if not array1 or not array2 then
50213: LD_VAR 0 1
50217: NOT
50218: PUSH
50219: LD_VAR 0 2
50223: NOT
50224: OR
50225: IFFALSE 50229
// exit ;
50227: GO 50293
// result := true ;
50229: LD_ADDR_VAR 0 3
50233: PUSH
50234: LD_INT 1
50236: ST_TO_ADDR
// for i = 1 to array1 do
50237: LD_ADDR_VAR 0 4
50241: PUSH
50242: DOUBLE
50243: LD_INT 1
50245: DEC
50246: ST_TO_ADDR
50247: LD_VAR 0 1
50251: PUSH
50252: FOR_TO
50253: IFFALSE 50291
// if array1 [ i ] <> array2 [ i ] then
50255: LD_VAR 0 1
50259: PUSH
50260: LD_VAR 0 4
50264: ARRAY
50265: PUSH
50266: LD_VAR 0 2
50270: PUSH
50271: LD_VAR 0 4
50275: ARRAY
50276: NONEQUAL
50277: IFFALSE 50289
// begin result := false ;
50279: LD_ADDR_VAR 0 3
50283: PUSH
50284: LD_INT 0
50286: ST_TO_ADDR
// break ;
50287: GO 50291
// end ;
50289: GO 50252
50291: POP
50292: POP
// end ;
50293: LD_VAR 0 3
50297: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50298: LD_INT 0
50300: PPUSH
50301: PPUSH
50302: PPUSH
// pom := GetBase ( fac ) ;
50303: LD_ADDR_VAR 0 5
50307: PUSH
50308: LD_VAR 0 1
50312: PPUSH
50313: CALL_OW 274
50317: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50318: LD_ADDR_VAR 0 4
50322: PUSH
50323: LD_VAR 0 2
50327: PUSH
50328: LD_INT 1
50330: ARRAY
50331: PPUSH
50332: LD_VAR 0 2
50336: PUSH
50337: LD_INT 2
50339: ARRAY
50340: PPUSH
50341: LD_VAR 0 2
50345: PUSH
50346: LD_INT 3
50348: ARRAY
50349: PPUSH
50350: LD_VAR 0 2
50354: PUSH
50355: LD_INT 4
50357: ARRAY
50358: PPUSH
50359: CALL_OW 449
50363: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50364: LD_ADDR_VAR 0 3
50368: PUSH
50369: LD_VAR 0 5
50373: PPUSH
50374: LD_INT 1
50376: PPUSH
50377: CALL_OW 275
50381: PUSH
50382: LD_VAR 0 4
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: GREATEREQUAL
50391: PUSH
50392: LD_VAR 0 5
50396: PPUSH
50397: LD_INT 2
50399: PPUSH
50400: CALL_OW 275
50404: PUSH
50405: LD_VAR 0 4
50409: PUSH
50410: LD_INT 2
50412: ARRAY
50413: GREATEREQUAL
50414: AND
50415: PUSH
50416: LD_VAR 0 5
50420: PPUSH
50421: LD_INT 3
50423: PPUSH
50424: CALL_OW 275
50428: PUSH
50429: LD_VAR 0 4
50433: PUSH
50434: LD_INT 3
50436: ARRAY
50437: GREATEREQUAL
50438: AND
50439: ST_TO_ADDR
// end ;
50440: LD_VAR 0 3
50444: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50445: LD_INT 0
50447: PPUSH
50448: PPUSH
50449: PPUSH
50450: PPUSH
// pom := GetBase ( building ) ;
50451: LD_ADDR_VAR 0 3
50455: PUSH
50456: LD_VAR 0 1
50460: PPUSH
50461: CALL_OW 274
50465: ST_TO_ADDR
// if not pom then
50466: LD_VAR 0 3
50470: NOT
50471: IFFALSE 50475
// exit ;
50473: GO 50645
// btype := GetBType ( building ) ;
50475: LD_ADDR_VAR 0 5
50479: PUSH
50480: LD_VAR 0 1
50484: PPUSH
50485: CALL_OW 266
50489: ST_TO_ADDR
// if btype = b_armoury then
50490: LD_VAR 0 5
50494: PUSH
50495: LD_INT 4
50497: EQUAL
50498: IFFALSE 50508
// btype := b_barracks ;
50500: LD_ADDR_VAR 0 5
50504: PUSH
50505: LD_INT 5
50507: ST_TO_ADDR
// if btype = b_depot then
50508: LD_VAR 0 5
50512: PUSH
50513: LD_INT 0
50515: EQUAL
50516: IFFALSE 50526
// btype := b_warehouse ;
50518: LD_ADDR_VAR 0 5
50522: PUSH
50523: LD_INT 1
50525: ST_TO_ADDR
// if btype = b_workshop then
50526: LD_VAR 0 5
50530: PUSH
50531: LD_INT 2
50533: EQUAL
50534: IFFALSE 50544
// btype := b_factory ;
50536: LD_ADDR_VAR 0 5
50540: PUSH
50541: LD_INT 3
50543: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50544: LD_ADDR_VAR 0 4
50548: PUSH
50549: LD_VAR 0 5
50553: PPUSH
50554: LD_VAR 0 1
50558: PPUSH
50559: CALL_OW 248
50563: PPUSH
50564: CALL_OW 450
50568: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50569: LD_ADDR_VAR 0 2
50573: PUSH
50574: LD_VAR 0 3
50578: PPUSH
50579: LD_INT 1
50581: PPUSH
50582: CALL_OW 275
50586: PUSH
50587: LD_VAR 0 4
50591: PUSH
50592: LD_INT 1
50594: ARRAY
50595: GREATEREQUAL
50596: PUSH
50597: LD_VAR 0 3
50601: PPUSH
50602: LD_INT 2
50604: PPUSH
50605: CALL_OW 275
50609: PUSH
50610: LD_VAR 0 4
50614: PUSH
50615: LD_INT 2
50617: ARRAY
50618: GREATEREQUAL
50619: AND
50620: PUSH
50621: LD_VAR 0 3
50625: PPUSH
50626: LD_INT 3
50628: PPUSH
50629: CALL_OW 275
50633: PUSH
50634: LD_VAR 0 4
50638: PUSH
50639: LD_INT 3
50641: ARRAY
50642: GREATEREQUAL
50643: AND
50644: ST_TO_ADDR
// end ;
50645: LD_VAR 0 2
50649: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50650: LD_INT 0
50652: PPUSH
50653: PPUSH
50654: PPUSH
// pom := GetBase ( building ) ;
50655: LD_ADDR_VAR 0 4
50659: PUSH
50660: LD_VAR 0 1
50664: PPUSH
50665: CALL_OW 274
50669: ST_TO_ADDR
// if not pom then
50670: LD_VAR 0 4
50674: NOT
50675: IFFALSE 50679
// exit ;
50677: GO 50780
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50679: LD_ADDR_VAR 0 5
50683: PUSH
50684: LD_VAR 0 2
50688: PPUSH
50689: LD_VAR 0 1
50693: PPUSH
50694: CALL_OW 248
50698: PPUSH
50699: CALL_OW 450
50703: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50704: LD_ADDR_VAR 0 3
50708: PUSH
50709: LD_VAR 0 4
50713: PPUSH
50714: LD_INT 1
50716: PPUSH
50717: CALL_OW 275
50721: PUSH
50722: LD_VAR 0 5
50726: PUSH
50727: LD_INT 1
50729: ARRAY
50730: GREATEREQUAL
50731: PUSH
50732: LD_VAR 0 4
50736: PPUSH
50737: LD_INT 2
50739: PPUSH
50740: CALL_OW 275
50744: PUSH
50745: LD_VAR 0 5
50749: PUSH
50750: LD_INT 2
50752: ARRAY
50753: GREATEREQUAL
50754: AND
50755: PUSH
50756: LD_VAR 0 4
50760: PPUSH
50761: LD_INT 3
50763: PPUSH
50764: CALL_OW 275
50768: PUSH
50769: LD_VAR 0 5
50773: PUSH
50774: LD_INT 3
50776: ARRAY
50777: GREATEREQUAL
50778: AND
50779: ST_TO_ADDR
// end ;
50780: LD_VAR 0 3
50784: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50785: LD_INT 0
50787: PPUSH
50788: PPUSH
50789: PPUSH
50790: PPUSH
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
50795: PPUSH
50796: PPUSH
50797: PPUSH
// result := false ;
50798: LD_ADDR_VAR 0 8
50802: PUSH
50803: LD_INT 0
50805: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50806: LD_VAR 0 5
50810: NOT
50811: PUSH
50812: LD_VAR 0 1
50816: NOT
50817: OR
50818: PUSH
50819: LD_VAR 0 2
50823: NOT
50824: OR
50825: PUSH
50826: LD_VAR 0 3
50830: NOT
50831: OR
50832: IFFALSE 50836
// exit ;
50834: GO 51650
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50836: LD_ADDR_VAR 0 14
50840: PUSH
50841: LD_VAR 0 1
50845: PPUSH
50846: LD_VAR 0 2
50850: PPUSH
50851: LD_VAR 0 3
50855: PPUSH
50856: LD_VAR 0 4
50860: PPUSH
50861: LD_VAR 0 5
50865: PUSH
50866: LD_INT 1
50868: ARRAY
50869: PPUSH
50870: CALL_OW 248
50874: PPUSH
50875: LD_INT 0
50877: PPUSH
50878: CALL 52903 0 6
50882: ST_TO_ADDR
// if not hexes then
50883: LD_VAR 0 14
50887: NOT
50888: IFFALSE 50892
// exit ;
50890: GO 51650
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50892: LD_ADDR_VAR 0 17
50896: PUSH
50897: LD_VAR 0 5
50901: PPUSH
50902: LD_INT 22
50904: PUSH
50905: LD_VAR 0 13
50909: PPUSH
50910: CALL_OW 255
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 30
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 30
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PPUSH
50951: CALL_OW 72
50955: ST_TO_ADDR
// for i = 1 to hexes do
50956: LD_ADDR_VAR 0 9
50960: PUSH
50961: DOUBLE
50962: LD_INT 1
50964: DEC
50965: ST_TO_ADDR
50966: LD_VAR 0 14
50970: PUSH
50971: FOR_TO
50972: IFFALSE 51648
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50974: LD_ADDR_VAR 0 13
50978: PUSH
50979: LD_VAR 0 14
50983: PUSH
50984: LD_VAR 0 9
50988: ARRAY
50989: PUSH
50990: LD_INT 1
50992: ARRAY
50993: PPUSH
50994: LD_VAR 0 14
50998: PUSH
50999: LD_VAR 0 9
51003: ARRAY
51004: PUSH
51005: LD_INT 2
51007: ARRAY
51008: PPUSH
51009: CALL_OW 428
51013: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51014: LD_VAR 0 14
51018: PUSH
51019: LD_VAR 0 9
51023: ARRAY
51024: PUSH
51025: LD_INT 1
51027: ARRAY
51028: PPUSH
51029: LD_VAR 0 14
51033: PUSH
51034: LD_VAR 0 9
51038: ARRAY
51039: PUSH
51040: LD_INT 2
51042: ARRAY
51043: PPUSH
51044: CALL_OW 351
51048: PUSH
51049: LD_VAR 0 14
51053: PUSH
51054: LD_VAR 0 9
51058: ARRAY
51059: PUSH
51060: LD_INT 1
51062: ARRAY
51063: PPUSH
51064: LD_VAR 0 14
51068: PUSH
51069: LD_VAR 0 9
51073: ARRAY
51074: PUSH
51075: LD_INT 2
51077: ARRAY
51078: PPUSH
51079: CALL_OW 488
51083: NOT
51084: OR
51085: PUSH
51086: LD_VAR 0 13
51090: PPUSH
51091: CALL_OW 247
51095: PUSH
51096: LD_INT 3
51098: EQUAL
51099: OR
51100: IFFALSE 51106
// exit ;
51102: POP
51103: POP
51104: GO 51650
// if not tmp then
51106: LD_VAR 0 13
51110: NOT
51111: IFFALSE 51115
// continue ;
51113: GO 50971
// result := true ;
51115: LD_ADDR_VAR 0 8
51119: PUSH
51120: LD_INT 1
51122: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51123: LD_VAR 0 6
51127: PUSH
51128: LD_VAR 0 13
51132: PPUSH
51133: CALL_OW 247
51137: PUSH
51138: LD_INT 2
51140: EQUAL
51141: AND
51142: PUSH
51143: LD_VAR 0 13
51147: PPUSH
51148: CALL_OW 263
51152: PUSH
51153: LD_INT 1
51155: EQUAL
51156: AND
51157: IFFALSE 51321
// begin if IsDrivenBy ( tmp ) then
51159: LD_VAR 0 13
51163: PPUSH
51164: CALL_OW 311
51168: IFFALSE 51172
// continue ;
51170: GO 50971
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51172: LD_VAR 0 6
51176: PPUSH
51177: LD_INT 3
51179: PUSH
51180: LD_INT 60
51182: PUSH
51183: EMPTY
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 3
51192: PUSH
51193: LD_INT 55
51195: PUSH
51196: EMPTY
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PPUSH
51207: CALL_OW 72
51211: IFFALSE 51319
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51213: LD_ADDR_VAR 0 18
51217: PUSH
51218: LD_VAR 0 6
51222: PPUSH
51223: LD_INT 3
51225: PUSH
51226: LD_INT 60
51228: PUSH
51229: EMPTY
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 3
51238: PUSH
51239: LD_INT 55
51241: PUSH
51242: EMPTY
51243: LIST
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PPUSH
51253: CALL_OW 72
51257: PUSH
51258: LD_INT 1
51260: ARRAY
51261: ST_TO_ADDR
// if IsInUnit ( driver ) then
51262: LD_VAR 0 18
51266: PPUSH
51267: CALL_OW 310
51271: IFFALSE 51282
// ComExit ( driver ) ;
51273: LD_VAR 0 18
51277: PPUSH
51278: CALL 76695 0 1
// AddComEnterUnit ( driver , tmp ) ;
51282: LD_VAR 0 18
51286: PPUSH
51287: LD_VAR 0 13
51291: PPUSH
51292: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51296: LD_VAR 0 18
51300: PPUSH
51301: LD_VAR 0 7
51305: PPUSH
51306: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51310: LD_VAR 0 18
51314: PPUSH
51315: CALL_OW 181
// end ; continue ;
51319: GO 50971
// end ; if not cleaners or not tmp in cleaners then
51321: LD_VAR 0 6
51325: NOT
51326: PUSH
51327: LD_VAR 0 13
51331: PUSH
51332: LD_VAR 0 6
51336: IN
51337: NOT
51338: OR
51339: IFFALSE 51646
// begin if dep then
51341: LD_VAR 0 17
51345: IFFALSE 51481
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51347: LD_ADDR_VAR 0 16
51351: PUSH
51352: LD_VAR 0 17
51356: PUSH
51357: LD_INT 1
51359: ARRAY
51360: PPUSH
51361: CALL_OW 250
51365: PPUSH
51366: LD_VAR 0 17
51370: PUSH
51371: LD_INT 1
51373: ARRAY
51374: PPUSH
51375: CALL_OW 254
51379: PPUSH
51380: LD_INT 5
51382: PPUSH
51383: CALL_OW 272
51387: PUSH
51388: LD_VAR 0 17
51392: PUSH
51393: LD_INT 1
51395: ARRAY
51396: PPUSH
51397: CALL_OW 251
51401: PPUSH
51402: LD_VAR 0 17
51406: PUSH
51407: LD_INT 1
51409: ARRAY
51410: PPUSH
51411: CALL_OW 254
51415: PPUSH
51416: LD_INT 5
51418: PPUSH
51419: CALL_OW 273
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51428: LD_VAR 0 16
51432: PUSH
51433: LD_INT 1
51435: ARRAY
51436: PPUSH
51437: LD_VAR 0 16
51441: PUSH
51442: LD_INT 2
51444: ARRAY
51445: PPUSH
51446: CALL_OW 488
51450: IFFALSE 51481
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51452: LD_VAR 0 13
51456: PPUSH
51457: LD_VAR 0 16
51461: PUSH
51462: LD_INT 1
51464: ARRAY
51465: PPUSH
51466: LD_VAR 0 16
51470: PUSH
51471: LD_INT 2
51473: ARRAY
51474: PPUSH
51475: CALL_OW 111
// continue ;
51479: GO 50971
// end ; end ; r := GetDir ( tmp ) ;
51481: LD_ADDR_VAR 0 15
51485: PUSH
51486: LD_VAR 0 13
51490: PPUSH
51491: CALL_OW 254
51495: ST_TO_ADDR
// if r = 5 then
51496: LD_VAR 0 15
51500: PUSH
51501: LD_INT 5
51503: EQUAL
51504: IFFALSE 51514
// r := 0 ;
51506: LD_ADDR_VAR 0 15
51510: PUSH
51511: LD_INT 0
51513: ST_TO_ADDR
// for j = r to 5 do
51514: LD_ADDR_VAR 0 10
51518: PUSH
51519: DOUBLE
51520: LD_VAR 0 15
51524: DEC
51525: ST_TO_ADDR
51526: LD_INT 5
51528: PUSH
51529: FOR_TO
51530: IFFALSE 51644
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51532: LD_ADDR_VAR 0 11
51536: PUSH
51537: LD_VAR 0 13
51541: PPUSH
51542: CALL_OW 250
51546: PPUSH
51547: LD_VAR 0 10
51551: PPUSH
51552: LD_INT 2
51554: PPUSH
51555: CALL_OW 272
51559: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51560: LD_ADDR_VAR 0 12
51564: PUSH
51565: LD_VAR 0 13
51569: PPUSH
51570: CALL_OW 251
51574: PPUSH
51575: LD_VAR 0 10
51579: PPUSH
51580: LD_INT 2
51582: PPUSH
51583: CALL_OW 273
51587: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51588: LD_VAR 0 11
51592: PPUSH
51593: LD_VAR 0 12
51597: PPUSH
51598: CALL_OW 488
51602: PUSH
51603: LD_VAR 0 11
51607: PPUSH
51608: LD_VAR 0 12
51612: PPUSH
51613: CALL_OW 428
51617: NOT
51618: AND
51619: IFFALSE 51642
// begin ComMoveXY ( tmp , _x , _y ) ;
51621: LD_VAR 0 13
51625: PPUSH
51626: LD_VAR 0 11
51630: PPUSH
51631: LD_VAR 0 12
51635: PPUSH
51636: CALL_OW 111
// break ;
51640: GO 51644
// end ; end ;
51642: GO 51529
51644: POP
51645: POP
// end ; end ;
51646: GO 50971
51648: POP
51649: POP
// end ;
51650: LD_VAR 0 8
51654: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51655: LD_INT 0
51657: PPUSH
// result := true ;
51658: LD_ADDR_VAR 0 3
51662: PUSH
51663: LD_INT 1
51665: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51666: LD_VAR 0 2
51670: PUSH
51671: LD_INT 24
51673: DOUBLE
51674: EQUAL
51675: IFTRUE 51685
51677: LD_INT 33
51679: DOUBLE
51680: EQUAL
51681: IFTRUE 51685
51683: GO 51710
51685: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51686: LD_ADDR_VAR 0 3
51690: PUSH
51691: LD_INT 32
51693: PPUSH
51694: LD_VAR 0 1
51698: PPUSH
51699: CALL_OW 321
51703: PUSH
51704: LD_INT 2
51706: EQUAL
51707: ST_TO_ADDR
51708: GO 52026
51710: LD_INT 20
51712: DOUBLE
51713: EQUAL
51714: IFTRUE 51718
51716: GO 51743
51718: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51719: LD_ADDR_VAR 0 3
51723: PUSH
51724: LD_INT 6
51726: PPUSH
51727: LD_VAR 0 1
51731: PPUSH
51732: CALL_OW 321
51736: PUSH
51737: LD_INT 2
51739: EQUAL
51740: ST_TO_ADDR
51741: GO 52026
51743: LD_INT 22
51745: DOUBLE
51746: EQUAL
51747: IFTRUE 51757
51749: LD_INT 36
51751: DOUBLE
51752: EQUAL
51753: IFTRUE 51757
51755: GO 51782
51757: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51758: LD_ADDR_VAR 0 3
51762: PUSH
51763: LD_INT 15
51765: PPUSH
51766: LD_VAR 0 1
51770: PPUSH
51771: CALL_OW 321
51775: PUSH
51776: LD_INT 2
51778: EQUAL
51779: ST_TO_ADDR
51780: GO 52026
51782: LD_INT 30
51784: DOUBLE
51785: EQUAL
51786: IFTRUE 51790
51788: GO 51815
51790: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51791: LD_ADDR_VAR 0 3
51795: PUSH
51796: LD_INT 20
51798: PPUSH
51799: LD_VAR 0 1
51803: PPUSH
51804: CALL_OW 321
51808: PUSH
51809: LD_INT 2
51811: EQUAL
51812: ST_TO_ADDR
51813: GO 52026
51815: LD_INT 28
51817: DOUBLE
51818: EQUAL
51819: IFTRUE 51829
51821: LD_INT 21
51823: DOUBLE
51824: EQUAL
51825: IFTRUE 51829
51827: GO 51854
51829: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51830: LD_ADDR_VAR 0 3
51834: PUSH
51835: LD_INT 21
51837: PPUSH
51838: LD_VAR 0 1
51842: PPUSH
51843: CALL_OW 321
51847: PUSH
51848: LD_INT 2
51850: EQUAL
51851: ST_TO_ADDR
51852: GO 52026
51854: LD_INT 16
51856: DOUBLE
51857: EQUAL
51858: IFTRUE 51862
51860: GO 51887
51862: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51863: LD_ADDR_VAR 0 3
51867: PUSH
51868: LD_INT 84
51870: PPUSH
51871: LD_VAR 0 1
51875: PPUSH
51876: CALL_OW 321
51880: PUSH
51881: LD_INT 2
51883: EQUAL
51884: ST_TO_ADDR
51885: GO 52026
51887: LD_INT 19
51889: DOUBLE
51890: EQUAL
51891: IFTRUE 51901
51893: LD_INT 23
51895: DOUBLE
51896: EQUAL
51897: IFTRUE 51901
51899: GO 51926
51901: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51902: LD_ADDR_VAR 0 3
51906: PUSH
51907: LD_INT 83
51909: PPUSH
51910: LD_VAR 0 1
51914: PPUSH
51915: CALL_OW 321
51919: PUSH
51920: LD_INT 2
51922: EQUAL
51923: ST_TO_ADDR
51924: GO 52026
51926: LD_INT 17
51928: DOUBLE
51929: EQUAL
51930: IFTRUE 51934
51932: GO 51959
51934: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51935: LD_ADDR_VAR 0 3
51939: PUSH
51940: LD_INT 39
51942: PPUSH
51943: LD_VAR 0 1
51947: PPUSH
51948: CALL_OW 321
51952: PUSH
51953: LD_INT 2
51955: EQUAL
51956: ST_TO_ADDR
51957: GO 52026
51959: LD_INT 18
51961: DOUBLE
51962: EQUAL
51963: IFTRUE 51967
51965: GO 51992
51967: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51968: LD_ADDR_VAR 0 3
51972: PUSH
51973: LD_INT 40
51975: PPUSH
51976: LD_VAR 0 1
51980: PPUSH
51981: CALL_OW 321
51985: PUSH
51986: LD_INT 2
51988: EQUAL
51989: ST_TO_ADDR
51990: GO 52026
51992: LD_INT 27
51994: DOUBLE
51995: EQUAL
51996: IFTRUE 52000
51998: GO 52025
52000: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52001: LD_ADDR_VAR 0 3
52005: PUSH
52006: LD_INT 35
52008: PPUSH
52009: LD_VAR 0 1
52013: PPUSH
52014: CALL_OW 321
52018: PUSH
52019: LD_INT 2
52021: EQUAL
52022: ST_TO_ADDR
52023: GO 52026
52025: POP
// end ;
52026: LD_VAR 0 3
52030: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52031: LD_INT 0
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
// result := false ;
52044: LD_ADDR_VAR 0 6
52048: PUSH
52049: LD_INT 0
52051: ST_TO_ADDR
// if btype = b_depot then
52052: LD_VAR 0 2
52056: PUSH
52057: LD_INT 0
52059: EQUAL
52060: IFFALSE 52072
// begin result := true ;
52062: LD_ADDR_VAR 0 6
52066: PUSH
52067: LD_INT 1
52069: ST_TO_ADDR
// exit ;
52070: GO 52898
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52072: LD_VAR 0 1
52076: NOT
52077: PUSH
52078: LD_VAR 0 1
52082: PPUSH
52083: CALL_OW 266
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: IN
52098: NOT
52099: OR
52100: PUSH
52101: LD_VAR 0 2
52105: NOT
52106: OR
52107: PUSH
52108: LD_VAR 0 5
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: LD_INT 4
52127: PUSH
52128: LD_INT 5
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: IN
52139: NOT
52140: OR
52141: PUSH
52142: LD_VAR 0 3
52146: PPUSH
52147: LD_VAR 0 4
52151: PPUSH
52152: CALL_OW 488
52156: NOT
52157: OR
52158: IFFALSE 52162
// exit ;
52160: GO 52898
// side := GetSide ( depot ) ;
52162: LD_ADDR_VAR 0 9
52166: PUSH
52167: LD_VAR 0 1
52171: PPUSH
52172: CALL_OW 255
52176: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52177: LD_VAR 0 9
52181: PPUSH
52182: LD_VAR 0 2
52186: PPUSH
52187: CALL 51655 0 2
52191: NOT
52192: IFFALSE 52196
// exit ;
52194: GO 52898
// pom := GetBase ( depot ) ;
52196: LD_ADDR_VAR 0 10
52200: PUSH
52201: LD_VAR 0 1
52205: PPUSH
52206: CALL_OW 274
52210: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52211: LD_ADDR_VAR 0 11
52215: PUSH
52216: LD_VAR 0 2
52220: PPUSH
52221: LD_VAR 0 1
52225: PPUSH
52226: CALL_OW 248
52230: PPUSH
52231: CALL_OW 450
52235: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52236: LD_VAR 0 10
52240: PPUSH
52241: LD_INT 1
52243: PPUSH
52244: CALL_OW 275
52248: PUSH
52249: LD_VAR 0 11
52253: PUSH
52254: LD_INT 1
52256: ARRAY
52257: GREATEREQUAL
52258: PUSH
52259: LD_VAR 0 10
52263: PPUSH
52264: LD_INT 2
52266: PPUSH
52267: CALL_OW 275
52271: PUSH
52272: LD_VAR 0 11
52276: PUSH
52277: LD_INT 2
52279: ARRAY
52280: GREATEREQUAL
52281: AND
52282: PUSH
52283: LD_VAR 0 10
52287: PPUSH
52288: LD_INT 3
52290: PPUSH
52291: CALL_OW 275
52295: PUSH
52296: LD_VAR 0 11
52300: PUSH
52301: LD_INT 3
52303: ARRAY
52304: GREATEREQUAL
52305: AND
52306: NOT
52307: IFFALSE 52311
// exit ;
52309: GO 52898
// if GetBType ( depot ) = b_depot then
52311: LD_VAR 0 1
52315: PPUSH
52316: CALL_OW 266
52320: PUSH
52321: LD_INT 0
52323: EQUAL
52324: IFFALSE 52336
// dist := 28 else
52326: LD_ADDR_VAR 0 14
52330: PUSH
52331: LD_INT 28
52333: ST_TO_ADDR
52334: GO 52344
// dist := 36 ;
52336: LD_ADDR_VAR 0 14
52340: PUSH
52341: LD_INT 36
52343: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52344: LD_VAR 0 1
52348: PPUSH
52349: LD_VAR 0 3
52353: PPUSH
52354: LD_VAR 0 4
52358: PPUSH
52359: CALL_OW 297
52363: PUSH
52364: LD_VAR 0 14
52368: GREATER
52369: IFFALSE 52373
// exit ;
52371: GO 52898
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52373: LD_ADDR_VAR 0 12
52377: PUSH
52378: LD_VAR 0 2
52382: PPUSH
52383: LD_VAR 0 3
52387: PPUSH
52388: LD_VAR 0 4
52392: PPUSH
52393: LD_VAR 0 5
52397: PPUSH
52398: LD_VAR 0 1
52402: PPUSH
52403: CALL_OW 248
52407: PPUSH
52408: LD_INT 0
52410: PPUSH
52411: CALL 52903 0 6
52415: ST_TO_ADDR
// if not hexes then
52416: LD_VAR 0 12
52420: NOT
52421: IFFALSE 52425
// exit ;
52423: GO 52898
// hex := GetHexInfo ( x , y ) ;
52425: LD_ADDR_VAR 0 15
52429: PUSH
52430: LD_VAR 0 3
52434: PPUSH
52435: LD_VAR 0 4
52439: PPUSH
52440: CALL_OW 546
52444: ST_TO_ADDR
// if hex [ 1 ] then
52445: LD_VAR 0 15
52449: PUSH
52450: LD_INT 1
52452: ARRAY
52453: IFFALSE 52457
// exit ;
52455: GO 52898
// height := hex [ 2 ] ;
52457: LD_ADDR_VAR 0 13
52461: PUSH
52462: LD_VAR 0 15
52466: PUSH
52467: LD_INT 2
52469: ARRAY
52470: ST_TO_ADDR
// for i = 1 to hexes do
52471: LD_ADDR_VAR 0 7
52475: PUSH
52476: DOUBLE
52477: LD_INT 1
52479: DEC
52480: ST_TO_ADDR
52481: LD_VAR 0 12
52485: PUSH
52486: FOR_TO
52487: IFFALSE 52817
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52489: LD_VAR 0 12
52493: PUSH
52494: LD_VAR 0 7
52498: ARRAY
52499: PUSH
52500: LD_INT 1
52502: ARRAY
52503: PPUSH
52504: LD_VAR 0 12
52508: PUSH
52509: LD_VAR 0 7
52513: ARRAY
52514: PUSH
52515: LD_INT 2
52517: ARRAY
52518: PPUSH
52519: CALL_OW 488
52523: NOT
52524: PUSH
52525: LD_VAR 0 12
52529: PUSH
52530: LD_VAR 0 7
52534: ARRAY
52535: PUSH
52536: LD_INT 1
52538: ARRAY
52539: PPUSH
52540: LD_VAR 0 12
52544: PUSH
52545: LD_VAR 0 7
52549: ARRAY
52550: PUSH
52551: LD_INT 2
52553: ARRAY
52554: PPUSH
52555: CALL_OW 428
52559: PUSH
52560: LD_INT 0
52562: GREATER
52563: OR
52564: PUSH
52565: LD_VAR 0 12
52569: PUSH
52570: LD_VAR 0 7
52574: ARRAY
52575: PUSH
52576: LD_INT 1
52578: ARRAY
52579: PPUSH
52580: LD_VAR 0 12
52584: PUSH
52585: LD_VAR 0 7
52589: ARRAY
52590: PUSH
52591: LD_INT 2
52593: ARRAY
52594: PPUSH
52595: CALL_OW 351
52599: OR
52600: IFFALSE 52606
// exit ;
52602: POP
52603: POP
52604: GO 52898
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52606: LD_ADDR_VAR 0 8
52610: PUSH
52611: LD_VAR 0 12
52615: PUSH
52616: LD_VAR 0 7
52620: ARRAY
52621: PUSH
52622: LD_INT 1
52624: ARRAY
52625: PPUSH
52626: LD_VAR 0 12
52630: PUSH
52631: LD_VAR 0 7
52635: ARRAY
52636: PUSH
52637: LD_INT 2
52639: ARRAY
52640: PPUSH
52641: CALL_OW 546
52645: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52646: LD_VAR 0 8
52650: PUSH
52651: LD_INT 1
52653: ARRAY
52654: PUSH
52655: LD_VAR 0 8
52659: PUSH
52660: LD_INT 2
52662: ARRAY
52663: PUSH
52664: LD_VAR 0 13
52668: PUSH
52669: LD_INT 2
52671: PLUS
52672: GREATER
52673: OR
52674: PUSH
52675: LD_VAR 0 8
52679: PUSH
52680: LD_INT 2
52682: ARRAY
52683: PUSH
52684: LD_VAR 0 13
52688: PUSH
52689: LD_INT 2
52691: MINUS
52692: LESS
52693: OR
52694: PUSH
52695: LD_VAR 0 8
52699: PUSH
52700: LD_INT 3
52702: ARRAY
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 8
52709: PUSH
52710: LD_INT 9
52712: PUSH
52713: LD_INT 10
52715: PUSH
52716: LD_INT 11
52718: PUSH
52719: LD_INT 12
52721: PUSH
52722: LD_INT 13
52724: PUSH
52725: LD_INT 16
52727: PUSH
52728: LD_INT 17
52730: PUSH
52731: LD_INT 18
52733: PUSH
52734: LD_INT 19
52736: PUSH
52737: LD_INT 20
52739: PUSH
52740: LD_INT 21
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: IN
52758: NOT
52759: OR
52760: PUSH
52761: LD_VAR 0 8
52765: PUSH
52766: LD_INT 5
52768: ARRAY
52769: NOT
52770: OR
52771: PUSH
52772: LD_VAR 0 8
52776: PUSH
52777: LD_INT 6
52779: ARRAY
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 7
52789: PUSH
52790: LD_INT 9
52792: PUSH
52793: LD_INT 10
52795: PUSH
52796: LD_INT 11
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: IN
52807: NOT
52808: OR
52809: IFFALSE 52815
// exit ;
52811: POP
52812: POP
52813: GO 52898
// end ;
52815: GO 52486
52817: POP
52818: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52819: LD_VAR 0 9
52823: PPUSH
52824: LD_VAR 0 3
52828: PPUSH
52829: LD_VAR 0 4
52833: PPUSH
52834: LD_INT 20
52836: PPUSH
52837: CALL 44821 0 4
52841: PUSH
52842: LD_INT 4
52844: ARRAY
52845: IFFALSE 52849
// exit ;
52847: GO 52898
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52849: LD_VAR 0 2
52853: PUSH
52854: LD_INT 29
52856: PUSH
52857: LD_INT 30
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: IN
52864: PUSH
52865: LD_VAR 0 3
52869: PPUSH
52870: LD_VAR 0 4
52874: PPUSH
52875: LD_VAR 0 9
52879: PPUSH
52880: CALL_OW 440
52884: NOT
52885: AND
52886: IFFALSE 52890
// exit ;
52888: GO 52898
// result := true ;
52890: LD_ADDR_VAR 0 6
52894: PUSH
52895: LD_INT 1
52897: ST_TO_ADDR
// end ;
52898: LD_VAR 0 6
52902: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52903: LD_INT 0
52905: PPUSH
52906: PPUSH
52907: PPUSH
52908: PPUSH
52909: PPUSH
52910: PPUSH
52911: PPUSH
52912: PPUSH
52913: PPUSH
52914: PPUSH
52915: PPUSH
52916: PPUSH
52917: PPUSH
52918: PPUSH
52919: PPUSH
52920: PPUSH
52921: PPUSH
52922: PPUSH
52923: PPUSH
52924: PPUSH
52925: PPUSH
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
52930: PPUSH
52931: PPUSH
52932: PPUSH
52933: PPUSH
52934: PPUSH
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
// result = [ ] ;
52963: LD_ADDR_VAR 0 7
52967: PUSH
52968: EMPTY
52969: ST_TO_ADDR
// temp_list = [ ] ;
52970: LD_ADDR_VAR 0 9
52974: PUSH
52975: EMPTY
52976: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52977: LD_VAR 0 4
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: LD_INT 3
52993: PUSH
52994: LD_INT 4
52996: PUSH
52997: LD_INT 5
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: IN
53008: NOT
53009: PUSH
53010: LD_VAR 0 1
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: IN
53025: PUSH
53026: LD_VAR 0 5
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: LIST
53044: IN
53045: NOT
53046: AND
53047: OR
53048: IFFALSE 53052
// exit ;
53050: GO 71443
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53052: LD_VAR 0 1
53056: PUSH
53057: LD_INT 6
53059: PUSH
53060: LD_INT 7
53062: PUSH
53063: LD_INT 8
53065: PUSH
53066: LD_INT 13
53068: PUSH
53069: LD_INT 12
53071: PUSH
53072: LD_INT 15
53074: PUSH
53075: LD_INT 11
53077: PUSH
53078: LD_INT 14
53080: PUSH
53081: LD_INT 10
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: IN
53095: IFFALSE 53105
// btype = b_lab ;
53097: LD_ADDR_VAR 0 1
53101: PUSH
53102: LD_INT 6
53104: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53105: LD_VAR 0 6
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: LIST
53123: IN
53124: NOT
53125: PUSH
53126: LD_VAR 0 1
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 3
53142: PUSH
53143: LD_INT 6
53145: PUSH
53146: LD_INT 36
53148: PUSH
53149: LD_INT 4
53151: PUSH
53152: LD_INT 5
53154: PUSH
53155: LD_INT 31
53157: PUSH
53158: LD_INT 32
53160: PUSH
53161: LD_INT 33
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: IN
53177: NOT
53178: PUSH
53179: LD_VAR 0 6
53183: PUSH
53184: LD_INT 1
53186: EQUAL
53187: AND
53188: OR
53189: PUSH
53190: LD_VAR 0 1
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: IN
53205: NOT
53206: PUSH
53207: LD_VAR 0 6
53211: PUSH
53212: LD_INT 2
53214: EQUAL
53215: AND
53216: OR
53217: IFFALSE 53227
// mode = 0 ;
53219: LD_ADDR_VAR 0 6
53223: PUSH
53224: LD_INT 0
53226: ST_TO_ADDR
// case mode of 0 :
53227: LD_VAR 0 6
53231: PUSH
53232: LD_INT 0
53234: DOUBLE
53235: EQUAL
53236: IFTRUE 53240
53238: GO 64693
53240: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53241: LD_ADDR_VAR 0 11
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53434: LD_ADDR_VAR 0 12
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53630: LD_ADDR_VAR 0 13
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 3
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 3
53789: NEG
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53829: LD_ADDR_VAR 0 14
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 3
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54025: LD_ADDR_VAR 0 15
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54218: LD_ADDR_VAR 0 16
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 3
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: LD_INT 3
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 3
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54411: LD_ADDR_VAR 0 17
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54641: LD_ADDR_VAR 0 18
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54871: LD_ADDR_VAR 0 19
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55101: LD_ADDR_VAR 0 20
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55331: LD_ADDR_VAR 0 21
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 0
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 2
55507: NEG
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55561: LD_ADDR_VAR 0 22
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55791: LD_ADDR_VAR 0 23
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: NEG
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 3
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56071: LD_ADDR_VAR 0 24
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 1
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56347: LD_ADDR_VAR 0 25
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: LD_INT 3
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56621: LD_ADDR_VAR 0 26
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56897: LD_ADDR_VAR 0 27
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57177: LD_ADDR_VAR 0 28
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 0
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 2
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: NEG
57389: PUSH
57390: LD_INT 3
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 3
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 3
57424: NEG
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57459: LD_ADDR_VAR 0 29
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: LD_INT 1
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57738: LD_ADDR_VAR 0 30
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 3
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 3
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58016: LD_ADDR_VAR 0 31
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 2
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 3
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 3
58259: NEG
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58294: LD_ADDR_VAR 0 32
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58572: LD_ADDR_VAR 0 33
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: LD_INT 2
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58851: LD_ADDR_VAR 0 34
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: LD_INT 1
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: LD_INT 1
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 3
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 3
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59131: LD_ADDR_VAR 0 35
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59243: LD_ADDR_VAR 0 36
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: LD_INT 2
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59355: LD_ADDR_VAR 0 37
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59467: LD_ADDR_VAR 0 38
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59579: LD_ADDR_VAR 0 39
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59691: LD_ADDR_VAR 0 40
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59803: LD_ADDR_VAR 0 41
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 3
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: LD_INT 2
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 3
60046: PUSH
60047: LD_INT 3
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 3
60112: NEG
60113: PUSH
60114: LD_INT 3
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60153: LD_ADDR_VAR 0 42
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 1
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 2
60278: PUSH
60279: LD_INT 2
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: LD_INT 2
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: LD_INT 3
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 3
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: NEG
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60503: LD_ADDR_VAR 0 43
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: LD_INT 2
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: NEG
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: LD_INT 3
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 2
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 3
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: LD_INT 3
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 3
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60851: LD_ADDR_VAR 0 44
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: LD_INT 3
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: LD_INT 0
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 3
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 3
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 3
61094: PUSH
61095: LD_INT 3
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: NEG
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: NEG
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61201: LD_ADDR_VAR 0 45
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 1
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 2
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 2
61391: NEG
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: LD_INT 2
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: LD_INT 2
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 3
61510: NEG
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61551: LD_ADDR_VAR 0 46
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 1
61632: NEG
61633: PUSH
61634: LD_INT 2
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 3
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 3
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 3
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 3
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 3
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61899: LD_ADDR_VAR 0 47
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 1
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 1
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62050: LD_ADDR_VAR 0 48
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 2
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62197: LD_ADDR_VAR 0 49
62201: PUSH
62202: LD_INT 0
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62341: LD_ADDR_VAR 0 50
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 1
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 1
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62485: LD_ADDR_VAR 0 51
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 0
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 1
62543: NEG
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62632: LD_ADDR_VAR 0 52
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 2
62736: NEG
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62783: LD_ADDR_VAR 0 53
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: LD_INT 2
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 2
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63013: LD_ADDR_VAR 0 54
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 2
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 2
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63243: LD_ADDR_VAR 0 55
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: NEG
63325: PUSH
63326: LD_INT 2
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 2
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 2
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 2
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: NEG
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 2
63442: NEG
63443: PUSH
63444: LD_INT 2
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63473: LD_ADDR_VAR 0 56
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 2
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 2
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: LD_INT 2
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: LD_INT 1
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 2
63672: NEG
63673: PUSH
63674: LD_INT 2
63676: NEG
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63703: LD_ADDR_VAR 0 57
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: LD_INT 1
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: NEG
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: NEG
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 2
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: LD_INT 2
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 2
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 2
63879: NEG
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 2
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: LD_INT 2
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63933: LD_ADDR_VAR 0 58
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: LD_INT 1
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: LD_INT 2
64018: NEG
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 2
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 2
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: NEG
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: NEG
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64163: LD_ADDR_VAR 0 59
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 1
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64251: LD_ADDR_VAR 0 60
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 0
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: LD_INT 1
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: LD_INT 1
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64339: LD_ADDR_VAR 0 61
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 0
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64427: LD_ADDR_VAR 0 62
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 0
64444: PUSH
64445: LD_INT 1
64447: NEG
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: LD_INT 1
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64515: LD_ADDR_VAR 0 63
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 1
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64603: LD_ADDR_VAR 0 64
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 0
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: ST_TO_ADDR
// end ; 1 :
64691: GO 70588
64693: LD_INT 1
64695: DOUBLE
64696: EQUAL
64697: IFTRUE 64701
64699: GO 67324
64701: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64702: LD_ADDR_VAR 0 11
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: LD_INT 3
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 3
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: LD_INT 2
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64746: LD_ADDR_VAR 0 12
64750: PUSH
64751: LD_INT 2
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 3
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 3
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64787: LD_ADDR_VAR 0 13
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: PUSH
64805: LD_INT 3
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64827: LD_ADDR_VAR 0 14
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: LD_INT 3
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64868: LD_ADDR_VAR 0 15
64872: PUSH
64873: LD_INT 2
64875: NEG
64876: PUSH
64877: LD_INT 1
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: NEG
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64912: LD_ADDR_VAR 0 16
64916: PUSH
64917: LD_INT 2
64919: NEG
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 3
64931: NEG
64932: PUSH
64933: LD_INT 2
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 3
64943: NEG
64944: PUSH
64945: LD_INT 3
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: LIST
64957: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64958: LD_ADDR_VAR 0 17
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: LD_INT 3
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: LD_INT 3
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: LD_INT 2
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65002: LD_ADDR_VAR 0 18
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 3
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 3
65030: PUSH
65031: LD_INT 1
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: LIST
65042: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65043: LD_ADDR_VAR 0 19
65047: PUSH
65048: LD_INT 3
65050: PUSH
65051: LD_INT 2
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 2
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65083: LD_ADDR_VAR 0 20
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: LD_INT 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65124: LD_ADDR_VAR 0 21
65128: PUSH
65129: LD_INT 2
65131: NEG
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 3
65142: NEG
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 3
65153: NEG
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65168: LD_ADDR_VAR 0 22
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 3
65187: NEG
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 3
65199: NEG
65200: PUSH
65201: LD_INT 3
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65214: LD_ADDR_VAR 0 23
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: LD_INT 4
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: LD_INT 3
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: LIST
65257: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65258: LD_ADDR_VAR 0 24
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 3
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 4
65286: PUSH
65287: LD_INT 1
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: LIST
65298: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65299: LD_ADDR_VAR 0 25
65303: PUSH
65304: LD_INT 3
65306: PUSH
65307: LD_INT 3
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 4
65316: PUSH
65317: LD_INT 3
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 3
65326: PUSH
65327: LD_INT 4
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65339: LD_ADDR_VAR 0 26
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 3
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: LD_INT 4
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: NEG
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: LIST
65379: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65380: LD_ADDR_VAR 0 27
65384: PUSH
65385: LD_INT 3
65387: NEG
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 3
65398: NEG
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 4
65409: NEG
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65424: LD_ADDR_VAR 0 28
65428: PUSH
65429: LD_INT 3
65431: NEG
65432: PUSH
65433: LD_INT 3
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 3
65443: NEG
65444: PUSH
65445: LD_INT 4
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 4
65455: NEG
65456: PUSH
65457: LD_INT 3
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65470: LD_ADDR_VAR 0 29
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 0
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: LD_INT 2
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: LD_INT 4
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 0
65523: PUSH
65524: LD_INT 4
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: LD_INT 3
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: LD_INT 5
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: LD_INT 5
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: LD_INT 4
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: LD_INT 6
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: LD_INT 6
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: LD_INT 5
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65625: LD_ADDR_VAR 0 30
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 4
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 4
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 4
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 5
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 5
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 5
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 6
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 6
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65768: LD_ADDR_VAR 0 31
65772: PUSH
65773: LD_INT 3
65775: PUSH
65776: LD_INT 2
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 3
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 2
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 4
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 4
65815: PUSH
65816: LD_INT 4
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: LD_INT 4
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 5
65835: PUSH
65836: LD_INT 4
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 5
65845: PUSH
65846: LD_INT 5
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: LD_INT 5
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 6
65865: PUSH
65866: LD_INT 5
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 6
65875: PUSH
65876: LD_INT 6
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 5
65885: PUSH
65886: LD_INT 6
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65907: LD_ADDR_VAR 0 32
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: LD_INT 3
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: LD_INT 2
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: PUSH
65946: LD_INT 4
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 4
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: LD_INT 5
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 5
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 4
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: PUSH
66008: LD_INT 6
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 6
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: PUSH
66029: LD_INT 5
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66050: LD_ADDR_VAR 0 33
66054: PUSH
66055: LD_INT 2
66057: NEG
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 3
66079: NEG
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 3
66091: NEG
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 4
66102: NEG
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 4
66113: NEG
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 4
66125: NEG
66126: PUSH
66127: LD_INT 1
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 5
66136: NEG
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 5
66147: NEG
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 5
66159: NEG
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 6
66170: NEG
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 6
66181: NEG
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66205: LD_ADDR_VAR 0 34
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: LD_INT 3
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 3
66224: NEG
66225: PUSH
66226: LD_INT 2
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 3
66236: NEG
66237: PUSH
66238: LD_INT 3
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 3
66248: NEG
66249: PUSH
66250: LD_INT 4
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 4
66260: NEG
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 4
66272: NEG
66273: PUSH
66274: LD_INT 4
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 4
66284: NEG
66285: PUSH
66286: LD_INT 5
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 5
66296: NEG
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 5
66308: NEG
66309: PUSH
66310: LD_INT 5
66312: NEG
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 5
66320: NEG
66321: PUSH
66322: LD_INT 6
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 6
66332: NEG
66333: PUSH
66334: LD_INT 5
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 6
66344: NEG
66345: PUSH
66346: LD_INT 6
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66368: LD_ADDR_VAR 0 41
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: LD_INT 3
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: LD_INT 2
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66412: LD_ADDR_VAR 0 42
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: LD_INT 0
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 2
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 3
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66453: LD_ADDR_VAR 0 43
66457: PUSH
66458: LD_INT 2
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 3
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 2
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66493: LD_ADDR_VAR 0 44
66497: PUSH
66498: LD_INT 0
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66534: LD_ADDR_VAR 0 45
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 2
66552: NEG
66553: PUSH
66554: LD_INT 1
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 3
66563: NEG
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66578: LD_ADDR_VAR 0 46
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: LD_INT 2
66589: NEG
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 2
66597: NEG
66598: PUSH
66599: LD_INT 3
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 3
66609: NEG
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66624: LD_ADDR_VAR 0 47
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: NEG
66644: PUSH
66645: LD_INT 3
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66657: LD_ADDR_VAR 0 48
66661: PUSH
66662: LD_INT 1
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66688: LD_ADDR_VAR 0 49
66692: PUSH
66693: LD_INT 3
66695: PUSH
66696: LD_INT 1
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 3
66705: PUSH
66706: LD_INT 2
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66717: LD_ADDR_VAR 0 50
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: LD_INT 3
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: LD_INT 3
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66746: LD_ADDR_VAR 0 51
66750: PUSH
66751: LD_INT 1
66753: NEG
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 2
66764: NEG
66765: PUSH
66766: LD_INT 1
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66777: LD_ADDR_VAR 0 52
66781: PUSH
66782: LD_INT 3
66784: NEG
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66810: LD_ADDR_VAR 0 53
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: LD_INT 3
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: LIST
66853: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66854: LD_ADDR_VAR 0 54
66858: PUSH
66859: LD_INT 2
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 3
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 3
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: LIST
66894: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66895: LD_ADDR_VAR 0 55
66899: PUSH
66900: LD_INT 3
66902: PUSH
66903: LD_INT 2
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: PUSH
66913: LD_INT 3
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66935: LD_ADDR_VAR 0 56
66939: PUSH
66940: LD_INT 1
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 1
66962: NEG
66963: PUSH
66964: LD_INT 2
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: LIST
66975: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66976: LD_ADDR_VAR 0 57
66980: PUSH
66981: LD_INT 2
66983: NEG
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 3
66994: NEG
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 3
67005: NEG
67006: PUSH
67007: LD_INT 1
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67020: LD_ADDR_VAR 0 58
67024: PUSH
67025: LD_INT 2
67027: NEG
67028: PUSH
67029: LD_INT 3
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 3
67039: NEG
67040: PUSH
67041: LD_INT 2
67043: NEG
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 3
67051: NEG
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: LIST
67065: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67066: LD_ADDR_VAR 0 59
67070: PUSH
67071: LD_INT 1
67073: NEG
67074: PUSH
67075: LD_INT 2
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: LD_INT 1
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67110: LD_ADDR_VAR 0 60
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 2
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: LIST
67150: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67151: LD_ADDR_VAR 0 61
67155: PUSH
67156: LD_INT 2
67158: PUSH
67159: LD_INT 1
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 2
67168: PUSH
67169: LD_INT 2
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: PUSH
67179: LD_INT 2
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67191: LD_ADDR_VAR 0 62
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: LD_INT 2
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: LD_INT 2
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: NEG
67219: PUSH
67220: LD_INT 1
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67232: LD_ADDR_VAR 0 63
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: LD_INT 1
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 2
67250: NEG
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: NEG
67262: PUSH
67263: LD_INT 1
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: LIST
67275: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67276: LD_ADDR_VAR 0 64
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: LD_INT 2
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 2
67295: NEG
67296: PUSH
67297: LD_INT 1
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 2
67307: NEG
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: LIST
67321: ST_TO_ADDR
// end ; 2 :
67322: GO 70588
67324: LD_INT 2
67326: DOUBLE
67327: EQUAL
67328: IFTRUE 67332
67330: GO 70587
67332: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67333: LD_ADDR_VAR 0 29
67337: PUSH
67338: LD_INT 4
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 4
67350: PUSH
67351: LD_INT 1
67353: NEG
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 5
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 5
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 4
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 3
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 5
67423: PUSH
67424: LD_INT 2
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: LD_INT 2
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 4
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 4
67463: PUSH
67464: LD_INT 4
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: LD_INT 4
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 2
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 2
67493: PUSH
67494: LD_INT 2
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 4
67503: PUSH
67504: LD_INT 2
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 2
67513: PUSH
67514: LD_INT 4
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: LD_INT 4
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: LD_INT 3
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: LD_INT 4
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: LD_INT 5
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 5
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: LD_INT 4
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: LD_INT 3
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: LD_INT 5
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: LD_INT 3
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: NEG
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 2
67639: NEG
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 2
67650: NEG
67651: PUSH
67652: LD_INT 1
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 3
67661: NEG
67662: PUSH
67663: LD_INT 1
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 4
67672: NEG
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 4
67683: NEG
67684: PUSH
67685: LD_INT 1
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 4
67695: NEG
67696: PUSH
67697: LD_INT 2
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 2
67707: NEG
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 4
67718: NEG
67719: PUSH
67720: LD_INT 4
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 4
67730: NEG
67731: PUSH
67732: LD_INT 5
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 3
67742: NEG
67743: PUSH
67744: LD_INT 4
67746: NEG
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 3
67754: NEG
67755: PUSH
67756: LD_INT 3
67758: NEG
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 4
67766: NEG
67767: PUSH
67768: LD_INT 3
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 5
67778: NEG
67779: PUSH
67780: LD_INT 4
67782: NEG
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 5
67790: NEG
67791: PUSH
67792: LD_INT 5
67794: NEG
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 3
67802: NEG
67803: PUSH
67804: LD_INT 5
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 5
67814: NEG
67815: PUSH
67816: LD_INT 3
67818: NEG
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67871: LD_ADDR_VAR 0 30
67875: PUSH
67876: LD_INT 4
67878: PUSH
67879: LD_INT 4
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 4
67888: PUSH
67889: LD_INT 3
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 5
67898: PUSH
67899: LD_INT 4
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 5
67908: PUSH
67909: LD_INT 5
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 4
67918: PUSH
67919: LD_INT 5
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: LD_INT 4
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 3
67938: PUSH
67939: LD_INT 3
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 5
67948: PUSH
67949: LD_INT 3
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 3
67958: PUSH
67959: LD_INT 5
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: LD_INT 3
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 0
67978: PUSH
67979: LD_INT 2
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 1
67988: PUSH
67989: LD_INT 3
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 1
67998: PUSH
67999: LD_INT 4
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: LD_INT 4
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 1
68018: NEG
68019: PUSH
68020: LD_INT 3
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: LD_INT 2
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 2
68040: PUSH
68041: LD_INT 4
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 2
68050: NEG
68051: PUSH
68052: LD_INT 2
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 4
68061: NEG
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 4
68072: NEG
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 3
68084: NEG
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: LD_INT 1
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 4
68106: NEG
68107: PUSH
68108: LD_INT 1
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 5
68117: NEG
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 5
68128: NEG
68129: PUSH
68130: LD_INT 1
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 5
68140: NEG
68141: PUSH
68142: LD_INT 2
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 3
68152: NEG
68153: PUSH
68154: LD_INT 2
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 3
68163: NEG
68164: PUSH
68165: LD_INT 3
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 3
68175: NEG
68176: PUSH
68177: LD_INT 4
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 2
68187: NEG
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 2
68199: NEG
68200: PUSH
68201: LD_INT 2
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 3
68211: NEG
68212: PUSH
68213: LD_INT 2
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 4
68223: NEG
68224: PUSH
68225: LD_INT 3
68227: NEG
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 4
68235: NEG
68236: PUSH
68237: LD_INT 4
68239: NEG
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 2
68247: NEG
68248: PUSH
68249: LD_INT 4
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 4
68259: NEG
68260: PUSH
68261: LD_INT 2
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: LD_INT 4
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 5
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: LD_INT 4
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 0
68315: PUSH
68316: LD_INT 3
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: LD_INT 4
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 1
68338: NEG
68339: PUSH
68340: LD_INT 5
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 2
68350: PUSH
68351: LD_INT 3
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 2
68361: NEG
68362: PUSH
68363: LD_INT 5
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68418: LD_ADDR_VAR 0 31
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 4
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 0
68435: PUSH
68436: LD_INT 3
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: PUSH
68446: LD_INT 4
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 1
68455: PUSH
68456: LD_INT 5
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 0
68465: PUSH
68466: LD_INT 5
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 1
68475: NEG
68476: PUSH
68477: LD_INT 4
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: PUSH
68488: LD_INT 3
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 2
68497: PUSH
68498: LD_INT 5
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 2
68507: NEG
68508: PUSH
68509: LD_INT 3
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: LD_INT 0
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 3
68529: NEG
68530: PUSH
68531: LD_INT 1
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 2
68541: NEG
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 2
68552: NEG
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 3
68563: NEG
68564: PUSH
68565: LD_INT 1
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 4
68574: NEG
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 4
68585: NEG
68586: PUSH
68587: LD_INT 1
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 4
68597: NEG
68598: PUSH
68599: LD_INT 2
68601: NEG
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 2
68609: NEG
68610: PUSH
68611: LD_INT 2
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 4
68620: NEG
68621: PUSH
68622: LD_INT 4
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 4
68632: NEG
68633: PUSH
68634: LD_INT 5
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 3
68644: NEG
68645: PUSH
68646: LD_INT 4
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 3
68656: NEG
68657: PUSH
68658: LD_INT 3
68660: NEG
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 4
68668: NEG
68669: PUSH
68670: LD_INT 3
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 5
68680: NEG
68681: PUSH
68682: LD_INT 4
68684: NEG
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 5
68692: NEG
68693: PUSH
68694: LD_INT 5
68696: NEG
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 3
68704: NEG
68705: PUSH
68706: LD_INT 5
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 5
68716: NEG
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: LD_INT 3
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: LD_INT 4
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 1
68750: PUSH
68751: LD_INT 3
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 1
68761: PUSH
68762: LD_INT 2
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: LD_INT 2
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 1
68783: NEG
68784: PUSH
68785: LD_INT 3
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 1
68795: NEG
68796: PUSH
68797: LD_INT 4
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 2
68807: PUSH
68808: LD_INT 2
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 2
68818: NEG
68819: PUSH
68820: LD_INT 4
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 4
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 4
68840: PUSH
68841: LD_INT 1
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 5
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 5
68861: PUSH
68862: LD_INT 1
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 4
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 3
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 3
68891: PUSH
68892: LD_INT 1
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 3
68902: PUSH
68903: LD_INT 2
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 5
68913: PUSH
68914: LD_INT 2
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68968: LD_ADDR_VAR 0 32
68972: PUSH
68973: LD_INT 4
68975: NEG
68976: PUSH
68977: LD_INT 0
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 4
68986: NEG
68987: PUSH
68988: LD_INT 1
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 3
68998: NEG
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 3
69009: NEG
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 4
69020: NEG
69021: PUSH
69022: LD_INT 1
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 5
69031: NEG
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 5
69042: NEG
69043: PUSH
69044: LD_INT 1
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 5
69054: NEG
69055: PUSH
69056: LD_INT 2
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 3
69066: NEG
69067: PUSH
69068: LD_INT 2
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 3
69077: NEG
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 3
69089: NEG
69090: PUSH
69091: LD_INT 4
69093: NEG
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: LD_INT 3
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 2
69113: NEG
69114: PUSH
69115: LD_INT 2
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 3
69125: NEG
69126: PUSH
69127: LD_INT 2
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 4
69137: NEG
69138: PUSH
69139: LD_INT 3
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 4
69149: NEG
69150: PUSH
69151: LD_INT 4
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 2
69161: NEG
69162: PUSH
69163: LD_INT 4
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 4
69173: NEG
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 0
69185: PUSH
69186: LD_INT 4
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 0
69196: PUSH
69197: LD_INT 5
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 1
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: LD_INT 3
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: LD_INT 3
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 1
69240: NEG
69241: PUSH
69242: LD_INT 4
69244: NEG
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: NEG
69253: PUSH
69254: LD_INT 5
69256: NEG
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 2
69264: PUSH
69265: LD_INT 3
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 2
69275: NEG
69276: PUSH
69277: LD_INT 5
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 3
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 3
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 4
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 4
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 3
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 2
69348: PUSH
69349: LD_INT 1
69351: NEG
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 2
69359: PUSH
69360: LD_INT 2
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 4
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: LD_INT 4
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 4
69390: PUSH
69391: LD_INT 3
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 5
69400: PUSH
69401: LD_INT 4
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 5
69410: PUSH
69411: LD_INT 5
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 4
69420: PUSH
69421: LD_INT 5
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 3
69430: PUSH
69431: LD_INT 4
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 3
69440: PUSH
69441: LD_INT 3
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 5
69450: PUSH
69451: LD_INT 3
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 3
69460: PUSH
69461: LD_INT 5
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69515: LD_ADDR_VAR 0 33
69519: PUSH
69520: LD_INT 4
69522: NEG
69523: PUSH
69524: LD_INT 4
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 4
69534: NEG
69535: PUSH
69536: LD_INT 5
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 3
69546: NEG
69547: PUSH
69548: LD_INT 4
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 3
69558: NEG
69559: PUSH
69560: LD_INT 3
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 4
69570: NEG
69571: PUSH
69572: LD_INT 3
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 5
69582: NEG
69583: PUSH
69584: LD_INT 4
69586: NEG
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 5
69594: NEG
69595: PUSH
69596: LD_INT 5
69598: NEG
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 3
69606: NEG
69607: PUSH
69608: LD_INT 5
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 5
69618: NEG
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 0
69630: PUSH
69631: LD_INT 3
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: LD_INT 4
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: PUSH
69653: LD_INT 3
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 1
69663: PUSH
69664: LD_INT 2
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: LD_INT 2
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 1
69685: NEG
69686: PUSH
69687: LD_INT 3
69689: NEG
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 1
69697: NEG
69698: PUSH
69699: LD_INT 4
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: LD_INT 2
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 2
69720: NEG
69721: PUSH
69722: LD_INT 4
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 4
69742: PUSH
69743: LD_INT 1
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 5
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 5
69763: PUSH
69764: LD_INT 1
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 4
69773: PUSH
69774: LD_INT 1
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 3
69783: PUSH
69784: LD_INT 0
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 3
69793: PUSH
69794: LD_INT 1
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 3
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 5
69815: PUSH
69816: LD_INT 2
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: LD_INT 3
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: LD_INT 2
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 4
69845: PUSH
69846: LD_INT 3
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 4
69855: PUSH
69856: LD_INT 4
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: LD_INT 4
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: PUSH
69876: LD_INT 3
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 2
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 4
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: LD_INT 4
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 0
69915: PUSH
69916: LD_INT 4
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: LD_INT 3
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: LD_INT 4
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 1
69945: PUSH
69946: LD_INT 5
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: LD_INT 5
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: PUSH
69967: LD_INT 4
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 1
69976: NEG
69977: PUSH
69978: LD_INT 3
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 2
69987: PUSH
69988: LD_INT 5
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 2
69997: NEG
69998: PUSH
69999: LD_INT 3
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70053: LD_ADDR_VAR 0 34
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: LD_INT 4
70063: NEG
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: LD_INT 5
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 1
70082: PUSH
70083: LD_INT 4
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 1
70093: PUSH
70094: LD_INT 3
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: LD_INT 3
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 1
70115: NEG
70116: PUSH
70117: LD_INT 4
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: PUSH
70129: LD_INT 5
70131: NEG
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 2
70139: PUSH
70140: LD_INT 3
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 2
70150: NEG
70151: PUSH
70152: LD_INT 5
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 3
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 3
70172: PUSH
70173: LD_INT 1
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 4
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 4
70193: PUSH
70194: LD_INT 1
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 3
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 2
70213: PUSH
70214: LD_INT 0
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 2
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 2
70234: PUSH
70235: LD_INT 2
70237: NEG
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 4
70245: PUSH
70246: LD_INT 2
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 4
70255: PUSH
70256: LD_INT 4
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 4
70265: PUSH
70266: LD_INT 3
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 5
70275: PUSH
70276: LD_INT 4
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 5
70285: PUSH
70286: LD_INT 5
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 4
70295: PUSH
70296: LD_INT 5
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 3
70305: PUSH
70306: LD_INT 4
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 3
70315: PUSH
70316: LD_INT 3
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 5
70325: PUSH
70326: LD_INT 3
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 3
70335: PUSH
70336: LD_INT 5
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 0
70345: PUSH
70346: LD_INT 3
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: LD_INT 2
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: LD_INT 3
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 1
70375: PUSH
70376: LD_INT 4
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: LD_INT 4
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 1
70395: NEG
70396: PUSH
70397: LD_INT 3
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 1
70406: NEG
70407: PUSH
70408: LD_INT 2
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 2
70417: PUSH
70418: LD_INT 4
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 2
70427: NEG
70428: PUSH
70429: LD_INT 2
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 4
70438: NEG
70439: PUSH
70440: LD_INT 0
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 4
70449: NEG
70450: PUSH
70451: LD_INT 1
70453: NEG
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 3
70461: NEG
70462: PUSH
70463: LD_INT 0
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 3
70472: NEG
70473: PUSH
70474: LD_INT 1
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 4
70483: NEG
70484: PUSH
70485: LD_INT 1
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 5
70494: NEG
70495: PUSH
70496: LD_INT 0
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 5
70505: NEG
70506: PUSH
70507: LD_INT 1
70509: NEG
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 5
70517: NEG
70518: PUSH
70519: LD_INT 2
70521: NEG
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: NEG
70530: PUSH
70531: LD_INT 2
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: ST_TO_ADDR
// end ; end ;
70585: GO 70588
70587: POP
// case btype of b_depot , b_warehouse :
70588: LD_VAR 0 1
70592: PUSH
70593: LD_INT 0
70595: DOUBLE
70596: EQUAL
70597: IFTRUE 70607
70599: LD_INT 1
70601: DOUBLE
70602: EQUAL
70603: IFTRUE 70607
70605: GO 70808
70607: POP
// case nation of nation_american :
70608: LD_VAR 0 5
70612: PUSH
70613: LD_INT 1
70615: DOUBLE
70616: EQUAL
70617: IFTRUE 70621
70619: GO 70677
70621: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70622: LD_ADDR_VAR 0 9
70626: PUSH
70627: LD_VAR 0 11
70631: PUSH
70632: LD_VAR 0 12
70636: PUSH
70637: LD_VAR 0 13
70641: PUSH
70642: LD_VAR 0 14
70646: PUSH
70647: LD_VAR 0 15
70651: PUSH
70652: LD_VAR 0 16
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: PUSH
70665: LD_VAR 0 4
70669: PUSH
70670: LD_INT 1
70672: PLUS
70673: ARRAY
70674: ST_TO_ADDR
70675: GO 70806
70677: LD_INT 2
70679: DOUBLE
70680: EQUAL
70681: IFTRUE 70685
70683: GO 70741
70685: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70686: LD_ADDR_VAR 0 9
70690: PUSH
70691: LD_VAR 0 17
70695: PUSH
70696: LD_VAR 0 18
70700: PUSH
70701: LD_VAR 0 19
70705: PUSH
70706: LD_VAR 0 20
70710: PUSH
70711: LD_VAR 0 21
70715: PUSH
70716: LD_VAR 0 22
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: PUSH
70729: LD_VAR 0 4
70733: PUSH
70734: LD_INT 1
70736: PLUS
70737: ARRAY
70738: ST_TO_ADDR
70739: GO 70806
70741: LD_INT 3
70743: DOUBLE
70744: EQUAL
70745: IFTRUE 70749
70747: GO 70805
70749: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70750: LD_ADDR_VAR 0 9
70754: PUSH
70755: LD_VAR 0 23
70759: PUSH
70760: LD_VAR 0 24
70764: PUSH
70765: LD_VAR 0 25
70769: PUSH
70770: LD_VAR 0 26
70774: PUSH
70775: LD_VAR 0 27
70779: PUSH
70780: LD_VAR 0 28
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: PUSH
70793: LD_VAR 0 4
70797: PUSH
70798: LD_INT 1
70800: PLUS
70801: ARRAY
70802: ST_TO_ADDR
70803: GO 70806
70805: POP
70806: GO 71361
70808: LD_INT 2
70810: DOUBLE
70811: EQUAL
70812: IFTRUE 70822
70814: LD_INT 3
70816: DOUBLE
70817: EQUAL
70818: IFTRUE 70822
70820: GO 70878
70822: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70823: LD_ADDR_VAR 0 9
70827: PUSH
70828: LD_VAR 0 29
70832: PUSH
70833: LD_VAR 0 30
70837: PUSH
70838: LD_VAR 0 31
70842: PUSH
70843: LD_VAR 0 32
70847: PUSH
70848: LD_VAR 0 33
70852: PUSH
70853: LD_VAR 0 34
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: PUSH
70866: LD_VAR 0 4
70870: PUSH
70871: LD_INT 1
70873: PLUS
70874: ARRAY
70875: ST_TO_ADDR
70876: GO 71361
70878: LD_INT 16
70880: DOUBLE
70881: EQUAL
70882: IFTRUE 70940
70884: LD_INT 17
70886: DOUBLE
70887: EQUAL
70888: IFTRUE 70940
70890: LD_INT 18
70892: DOUBLE
70893: EQUAL
70894: IFTRUE 70940
70896: LD_INT 19
70898: DOUBLE
70899: EQUAL
70900: IFTRUE 70940
70902: LD_INT 22
70904: DOUBLE
70905: EQUAL
70906: IFTRUE 70940
70908: LD_INT 20
70910: DOUBLE
70911: EQUAL
70912: IFTRUE 70940
70914: LD_INT 21
70916: DOUBLE
70917: EQUAL
70918: IFTRUE 70940
70920: LD_INT 23
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70940
70926: LD_INT 24
70928: DOUBLE
70929: EQUAL
70930: IFTRUE 70940
70932: LD_INT 25
70934: DOUBLE
70935: EQUAL
70936: IFTRUE 70940
70938: GO 70996
70940: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70941: LD_ADDR_VAR 0 9
70945: PUSH
70946: LD_VAR 0 35
70950: PUSH
70951: LD_VAR 0 36
70955: PUSH
70956: LD_VAR 0 37
70960: PUSH
70961: LD_VAR 0 38
70965: PUSH
70966: LD_VAR 0 39
70970: PUSH
70971: LD_VAR 0 40
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: PUSH
70984: LD_VAR 0 4
70988: PUSH
70989: LD_INT 1
70991: PLUS
70992: ARRAY
70993: ST_TO_ADDR
70994: GO 71361
70996: LD_INT 6
70998: DOUBLE
70999: EQUAL
71000: IFTRUE 71052
71002: LD_INT 7
71004: DOUBLE
71005: EQUAL
71006: IFTRUE 71052
71008: LD_INT 8
71010: DOUBLE
71011: EQUAL
71012: IFTRUE 71052
71014: LD_INT 13
71016: DOUBLE
71017: EQUAL
71018: IFTRUE 71052
71020: LD_INT 12
71022: DOUBLE
71023: EQUAL
71024: IFTRUE 71052
71026: LD_INT 15
71028: DOUBLE
71029: EQUAL
71030: IFTRUE 71052
71032: LD_INT 11
71034: DOUBLE
71035: EQUAL
71036: IFTRUE 71052
71038: LD_INT 14
71040: DOUBLE
71041: EQUAL
71042: IFTRUE 71052
71044: LD_INT 10
71046: DOUBLE
71047: EQUAL
71048: IFTRUE 71052
71050: GO 71108
71052: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71053: LD_ADDR_VAR 0 9
71057: PUSH
71058: LD_VAR 0 41
71062: PUSH
71063: LD_VAR 0 42
71067: PUSH
71068: LD_VAR 0 43
71072: PUSH
71073: LD_VAR 0 44
71077: PUSH
71078: LD_VAR 0 45
71082: PUSH
71083: LD_VAR 0 46
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: PUSH
71096: LD_VAR 0 4
71100: PUSH
71101: LD_INT 1
71103: PLUS
71104: ARRAY
71105: ST_TO_ADDR
71106: GO 71361
71108: LD_INT 36
71110: DOUBLE
71111: EQUAL
71112: IFTRUE 71116
71114: GO 71172
71116: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71117: LD_ADDR_VAR 0 9
71121: PUSH
71122: LD_VAR 0 47
71126: PUSH
71127: LD_VAR 0 48
71131: PUSH
71132: LD_VAR 0 49
71136: PUSH
71137: LD_VAR 0 50
71141: PUSH
71142: LD_VAR 0 51
71146: PUSH
71147: LD_VAR 0 52
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: PUSH
71160: LD_VAR 0 4
71164: PUSH
71165: LD_INT 1
71167: PLUS
71168: ARRAY
71169: ST_TO_ADDR
71170: GO 71361
71172: LD_INT 4
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71198
71178: LD_INT 5
71180: DOUBLE
71181: EQUAL
71182: IFTRUE 71198
71184: LD_INT 34
71186: DOUBLE
71187: EQUAL
71188: IFTRUE 71198
71190: LD_INT 37
71192: DOUBLE
71193: EQUAL
71194: IFTRUE 71198
71196: GO 71254
71198: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71199: LD_ADDR_VAR 0 9
71203: PUSH
71204: LD_VAR 0 53
71208: PUSH
71209: LD_VAR 0 54
71213: PUSH
71214: LD_VAR 0 55
71218: PUSH
71219: LD_VAR 0 56
71223: PUSH
71224: LD_VAR 0 57
71228: PUSH
71229: LD_VAR 0 58
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: PUSH
71242: LD_VAR 0 4
71246: PUSH
71247: LD_INT 1
71249: PLUS
71250: ARRAY
71251: ST_TO_ADDR
71252: GO 71361
71254: LD_INT 31
71256: DOUBLE
71257: EQUAL
71258: IFTRUE 71304
71260: LD_INT 32
71262: DOUBLE
71263: EQUAL
71264: IFTRUE 71304
71266: LD_INT 33
71268: DOUBLE
71269: EQUAL
71270: IFTRUE 71304
71272: LD_INT 27
71274: DOUBLE
71275: EQUAL
71276: IFTRUE 71304
71278: LD_INT 26
71280: DOUBLE
71281: EQUAL
71282: IFTRUE 71304
71284: LD_INT 28
71286: DOUBLE
71287: EQUAL
71288: IFTRUE 71304
71290: LD_INT 29
71292: DOUBLE
71293: EQUAL
71294: IFTRUE 71304
71296: LD_INT 30
71298: DOUBLE
71299: EQUAL
71300: IFTRUE 71304
71302: GO 71360
71304: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71305: LD_ADDR_VAR 0 9
71309: PUSH
71310: LD_VAR 0 59
71314: PUSH
71315: LD_VAR 0 60
71319: PUSH
71320: LD_VAR 0 61
71324: PUSH
71325: LD_VAR 0 62
71329: PUSH
71330: LD_VAR 0 63
71334: PUSH
71335: LD_VAR 0 64
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: PUSH
71348: LD_VAR 0 4
71352: PUSH
71353: LD_INT 1
71355: PLUS
71356: ARRAY
71357: ST_TO_ADDR
71358: GO 71361
71360: POP
// temp_list2 = [ ] ;
71361: LD_ADDR_VAR 0 10
71365: PUSH
71366: EMPTY
71367: ST_TO_ADDR
// for i in temp_list do
71368: LD_ADDR_VAR 0 8
71372: PUSH
71373: LD_VAR 0 9
71377: PUSH
71378: FOR_IN
71379: IFFALSE 71431
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71381: LD_ADDR_VAR 0 10
71385: PUSH
71386: LD_VAR 0 10
71390: PUSH
71391: LD_VAR 0 8
71395: PUSH
71396: LD_INT 1
71398: ARRAY
71399: PUSH
71400: LD_VAR 0 2
71404: PLUS
71405: PUSH
71406: LD_VAR 0 8
71410: PUSH
71411: LD_INT 2
71413: ARRAY
71414: PUSH
71415: LD_VAR 0 3
71419: PLUS
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: EMPTY
71426: LIST
71427: ADD
71428: ST_TO_ADDR
71429: GO 71378
71431: POP
71432: POP
// result = temp_list2 ;
71433: LD_ADDR_VAR 0 7
71437: PUSH
71438: LD_VAR 0 10
71442: ST_TO_ADDR
// end ;
71443: LD_VAR 0 7
71447: RET
// export function EnemyInRange ( unit , dist ) ; begin
71448: LD_INT 0
71450: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71451: LD_ADDR_VAR 0 3
71455: PUSH
71456: LD_VAR 0 1
71460: PPUSH
71461: CALL_OW 255
71465: PPUSH
71466: LD_VAR 0 1
71470: PPUSH
71471: CALL_OW 250
71475: PPUSH
71476: LD_VAR 0 1
71480: PPUSH
71481: CALL_OW 251
71485: PPUSH
71486: LD_VAR 0 2
71490: PPUSH
71491: CALL 44821 0 4
71495: PUSH
71496: LD_INT 4
71498: ARRAY
71499: ST_TO_ADDR
// end ;
71500: LD_VAR 0 3
71504: RET
// export function PlayerSeeMe ( unit ) ; begin
71505: LD_INT 0
71507: PPUSH
// result := See ( your_side , unit ) ;
71508: LD_ADDR_VAR 0 2
71512: PUSH
71513: LD_OWVAR 2
71517: PPUSH
71518: LD_VAR 0 1
71522: PPUSH
71523: CALL_OW 292
71527: ST_TO_ADDR
// end ;
71528: LD_VAR 0 2
71532: RET
// export function ReverseDir ( unit ) ; begin
71533: LD_INT 0
71535: PPUSH
// if not unit then
71536: LD_VAR 0 1
71540: NOT
71541: IFFALSE 71545
// exit ;
71543: GO 71568
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71545: LD_ADDR_VAR 0 2
71549: PUSH
71550: LD_VAR 0 1
71554: PPUSH
71555: CALL_OW 254
71559: PUSH
71560: LD_INT 3
71562: PLUS
71563: PUSH
71564: LD_INT 6
71566: MOD
71567: ST_TO_ADDR
// end ;
71568: LD_VAR 0 2
71572: RET
// export function ReverseArray ( array ) ; var i ; begin
71573: LD_INT 0
71575: PPUSH
71576: PPUSH
// if not array then
71577: LD_VAR 0 1
71581: NOT
71582: IFFALSE 71586
// exit ;
71584: GO 71641
// result := [ ] ;
71586: LD_ADDR_VAR 0 2
71590: PUSH
71591: EMPTY
71592: ST_TO_ADDR
// for i := array downto 1 do
71593: LD_ADDR_VAR 0 3
71597: PUSH
71598: DOUBLE
71599: LD_VAR 0 1
71603: INC
71604: ST_TO_ADDR
71605: LD_INT 1
71607: PUSH
71608: FOR_DOWNTO
71609: IFFALSE 71639
// result := Join ( result , array [ i ] ) ;
71611: LD_ADDR_VAR 0 2
71615: PUSH
71616: LD_VAR 0 2
71620: PPUSH
71621: LD_VAR 0 1
71625: PUSH
71626: LD_VAR 0 3
71630: ARRAY
71631: PPUSH
71632: CALL 76297 0 2
71636: ST_TO_ADDR
71637: GO 71608
71639: POP
71640: POP
// end ;
71641: LD_VAR 0 2
71645: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71646: LD_INT 0
71648: PPUSH
71649: PPUSH
71650: PPUSH
71651: PPUSH
71652: PPUSH
71653: PPUSH
// if not unit or not hexes then
71654: LD_VAR 0 1
71658: NOT
71659: PUSH
71660: LD_VAR 0 2
71664: NOT
71665: OR
71666: IFFALSE 71670
// exit ;
71668: GO 71793
// dist := 9999 ;
71670: LD_ADDR_VAR 0 5
71674: PUSH
71675: LD_INT 9999
71677: ST_TO_ADDR
// for i = 1 to hexes do
71678: LD_ADDR_VAR 0 4
71682: PUSH
71683: DOUBLE
71684: LD_INT 1
71686: DEC
71687: ST_TO_ADDR
71688: LD_VAR 0 2
71692: PUSH
71693: FOR_TO
71694: IFFALSE 71781
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71696: LD_ADDR_VAR 0 6
71700: PUSH
71701: LD_VAR 0 1
71705: PPUSH
71706: LD_VAR 0 2
71710: PUSH
71711: LD_VAR 0 4
71715: ARRAY
71716: PUSH
71717: LD_INT 1
71719: ARRAY
71720: PPUSH
71721: LD_VAR 0 2
71725: PUSH
71726: LD_VAR 0 4
71730: ARRAY
71731: PUSH
71732: LD_INT 2
71734: ARRAY
71735: PPUSH
71736: CALL_OW 297
71740: ST_TO_ADDR
// if tdist < dist then
71741: LD_VAR 0 6
71745: PUSH
71746: LD_VAR 0 5
71750: LESS
71751: IFFALSE 71779
// begin hex := hexes [ i ] ;
71753: LD_ADDR_VAR 0 8
71757: PUSH
71758: LD_VAR 0 2
71762: PUSH
71763: LD_VAR 0 4
71767: ARRAY
71768: ST_TO_ADDR
// dist := tdist ;
71769: LD_ADDR_VAR 0 5
71773: PUSH
71774: LD_VAR 0 6
71778: ST_TO_ADDR
// end ; end ;
71779: GO 71693
71781: POP
71782: POP
// result := hex ;
71783: LD_ADDR_VAR 0 3
71787: PUSH
71788: LD_VAR 0 8
71792: ST_TO_ADDR
// end ;
71793: LD_VAR 0 3
71797: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71798: LD_INT 0
71800: PPUSH
71801: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71802: LD_VAR 0 1
71806: NOT
71807: PUSH
71808: LD_VAR 0 1
71812: PUSH
71813: LD_INT 21
71815: PUSH
71816: LD_INT 2
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 23
71825: PUSH
71826: LD_INT 2
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PPUSH
71837: CALL_OW 69
71841: IN
71842: NOT
71843: OR
71844: IFFALSE 71848
// exit ;
71846: GO 71895
// for i = 1 to 3 do
71848: LD_ADDR_VAR 0 3
71852: PUSH
71853: DOUBLE
71854: LD_INT 1
71856: DEC
71857: ST_TO_ADDR
71858: LD_INT 3
71860: PUSH
71861: FOR_TO
71862: IFFALSE 71893
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71864: LD_VAR 0 1
71868: PPUSH
71869: CALL_OW 250
71873: PPUSH
71874: LD_VAR 0 1
71878: PPUSH
71879: CALL_OW 251
71883: PPUSH
71884: LD_INT 1
71886: PPUSH
71887: CALL_OW 453
71891: GO 71861
71893: POP
71894: POP
// end ;
71895: LD_VAR 0 2
71899: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71900: LD_INT 0
71902: PPUSH
71903: PPUSH
71904: PPUSH
71905: PPUSH
71906: PPUSH
71907: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71908: LD_VAR 0 1
71912: NOT
71913: PUSH
71914: LD_VAR 0 2
71918: NOT
71919: OR
71920: PUSH
71921: LD_VAR 0 1
71925: PPUSH
71926: CALL_OW 314
71930: OR
71931: IFFALSE 71935
// exit ;
71933: GO 72402
// if GetLives ( i ) < 250 then
71935: LD_VAR 0 4
71939: PPUSH
71940: CALL_OW 256
71944: PUSH
71945: LD_INT 250
71947: LESS
71948: IFFALSE 71961
// begin ComAutodestruct ( i ) ;
71950: LD_VAR 0 4
71954: PPUSH
71955: CALL 71798 0 1
// exit ;
71959: GO 72402
// end ; x := GetX ( enemy_unit ) ;
71961: LD_ADDR_VAR 0 7
71965: PUSH
71966: LD_VAR 0 2
71970: PPUSH
71971: CALL_OW 250
71975: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71976: LD_ADDR_VAR 0 8
71980: PUSH
71981: LD_VAR 0 2
71985: PPUSH
71986: CALL_OW 251
71990: ST_TO_ADDR
// if not x or not y then
71991: LD_VAR 0 7
71995: NOT
71996: PUSH
71997: LD_VAR 0 8
72001: NOT
72002: OR
72003: IFFALSE 72007
// exit ;
72005: GO 72402
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72007: LD_ADDR_VAR 0 6
72011: PUSH
72012: LD_VAR 0 7
72016: PPUSH
72017: LD_INT 0
72019: PPUSH
72020: LD_INT 4
72022: PPUSH
72023: CALL_OW 272
72027: PUSH
72028: LD_VAR 0 8
72032: PPUSH
72033: LD_INT 0
72035: PPUSH
72036: LD_INT 4
72038: PPUSH
72039: CALL_OW 273
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_VAR 0 7
72052: PPUSH
72053: LD_INT 1
72055: PPUSH
72056: LD_INT 4
72058: PPUSH
72059: CALL_OW 272
72063: PUSH
72064: LD_VAR 0 8
72068: PPUSH
72069: LD_INT 1
72071: PPUSH
72072: LD_INT 4
72074: PPUSH
72075: CALL_OW 273
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_VAR 0 7
72088: PPUSH
72089: LD_INT 2
72091: PPUSH
72092: LD_INT 4
72094: PPUSH
72095: CALL_OW 272
72099: PUSH
72100: LD_VAR 0 8
72104: PPUSH
72105: LD_INT 2
72107: PPUSH
72108: LD_INT 4
72110: PPUSH
72111: CALL_OW 273
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_VAR 0 7
72124: PPUSH
72125: LD_INT 3
72127: PPUSH
72128: LD_INT 4
72130: PPUSH
72131: CALL_OW 272
72135: PUSH
72136: LD_VAR 0 8
72140: PPUSH
72141: LD_INT 3
72143: PPUSH
72144: LD_INT 4
72146: PPUSH
72147: CALL_OW 273
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_VAR 0 7
72160: PPUSH
72161: LD_INT 4
72163: PPUSH
72164: LD_INT 4
72166: PPUSH
72167: CALL_OW 272
72171: PUSH
72172: LD_VAR 0 8
72176: PPUSH
72177: LD_INT 4
72179: PPUSH
72180: LD_INT 4
72182: PPUSH
72183: CALL_OW 273
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_VAR 0 7
72196: PPUSH
72197: LD_INT 5
72199: PPUSH
72200: LD_INT 4
72202: PPUSH
72203: CALL_OW 272
72207: PUSH
72208: LD_VAR 0 8
72212: PPUSH
72213: LD_INT 5
72215: PPUSH
72216: LD_INT 4
72218: PPUSH
72219: CALL_OW 273
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: ST_TO_ADDR
// for i = tmp downto 1 do
72236: LD_ADDR_VAR 0 4
72240: PUSH
72241: DOUBLE
72242: LD_VAR 0 6
72246: INC
72247: ST_TO_ADDR
72248: LD_INT 1
72250: PUSH
72251: FOR_DOWNTO
72252: IFFALSE 72353
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72254: LD_VAR 0 6
72258: PUSH
72259: LD_VAR 0 4
72263: ARRAY
72264: PUSH
72265: LD_INT 1
72267: ARRAY
72268: PPUSH
72269: LD_VAR 0 6
72273: PUSH
72274: LD_VAR 0 4
72278: ARRAY
72279: PUSH
72280: LD_INT 2
72282: ARRAY
72283: PPUSH
72284: CALL_OW 488
72288: NOT
72289: PUSH
72290: LD_VAR 0 6
72294: PUSH
72295: LD_VAR 0 4
72299: ARRAY
72300: PUSH
72301: LD_INT 1
72303: ARRAY
72304: PPUSH
72305: LD_VAR 0 6
72309: PUSH
72310: LD_VAR 0 4
72314: ARRAY
72315: PUSH
72316: LD_INT 2
72318: ARRAY
72319: PPUSH
72320: CALL_OW 428
72324: PUSH
72325: LD_INT 0
72327: NONEQUAL
72328: OR
72329: IFFALSE 72351
// tmp := Delete ( tmp , i ) ;
72331: LD_ADDR_VAR 0 6
72335: PUSH
72336: LD_VAR 0 6
72340: PPUSH
72341: LD_VAR 0 4
72345: PPUSH
72346: CALL_OW 3
72350: ST_TO_ADDR
72351: GO 72251
72353: POP
72354: POP
// j := GetClosestHex ( unit , tmp ) ;
72355: LD_ADDR_VAR 0 5
72359: PUSH
72360: LD_VAR 0 1
72364: PPUSH
72365: LD_VAR 0 6
72369: PPUSH
72370: CALL 71646 0 2
72374: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72375: LD_VAR 0 1
72379: PPUSH
72380: LD_VAR 0 5
72384: PUSH
72385: LD_INT 1
72387: ARRAY
72388: PPUSH
72389: LD_VAR 0 5
72393: PUSH
72394: LD_INT 2
72396: ARRAY
72397: PPUSH
72398: CALL_OW 111
// end ;
72402: LD_VAR 0 3
72406: RET
// export function PrepareApemanSoldier ( ) ; begin
72407: LD_INT 0
72409: PPUSH
// uc_nation := 0 ;
72410: LD_ADDR_OWVAR 21
72414: PUSH
72415: LD_INT 0
72417: ST_TO_ADDR
// hc_sex := sex_male ;
72418: LD_ADDR_OWVAR 27
72422: PUSH
72423: LD_INT 1
72425: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72426: LD_ADDR_OWVAR 28
72430: PUSH
72431: LD_INT 15
72433: ST_TO_ADDR
// hc_gallery :=  ;
72434: LD_ADDR_OWVAR 33
72438: PUSH
72439: LD_STRING 
72441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72442: LD_ADDR_OWVAR 31
72446: PUSH
72447: LD_INT 0
72449: PPUSH
72450: LD_INT 3
72452: PPUSH
72453: CALL_OW 12
72457: PUSH
72458: LD_INT 0
72460: PPUSH
72461: LD_INT 3
72463: PPUSH
72464: CALL_OW 12
72468: PUSH
72469: LD_INT 0
72471: PUSH
72472: LD_INT 0
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: ST_TO_ADDR
// end ;
72481: LD_VAR 0 1
72485: RET
// export function PrepareApemanEngineer ( ) ; begin
72486: LD_INT 0
72488: PPUSH
// uc_nation := 0 ;
72489: LD_ADDR_OWVAR 21
72493: PUSH
72494: LD_INT 0
72496: ST_TO_ADDR
// hc_sex := sex_male ;
72497: LD_ADDR_OWVAR 27
72501: PUSH
72502: LD_INT 1
72504: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72505: LD_ADDR_OWVAR 28
72509: PUSH
72510: LD_INT 16
72512: ST_TO_ADDR
// hc_gallery :=  ;
72513: LD_ADDR_OWVAR 33
72517: PUSH
72518: LD_STRING 
72520: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72521: LD_ADDR_OWVAR 31
72525: PUSH
72526: LD_INT 0
72528: PPUSH
72529: LD_INT 3
72531: PPUSH
72532: CALL_OW 12
72536: PUSH
72537: LD_INT 0
72539: PPUSH
72540: LD_INT 3
72542: PPUSH
72543: CALL_OW 12
72547: PUSH
72548: LD_INT 0
72550: PUSH
72551: LD_INT 0
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: ST_TO_ADDR
// end ;
72560: LD_VAR 0 1
72564: RET
// export function PrepareApeman ( agressivity ) ; begin
72565: LD_INT 0
72567: PPUSH
// uc_side := 0 ;
72568: LD_ADDR_OWVAR 20
72572: PUSH
72573: LD_INT 0
72575: ST_TO_ADDR
// uc_nation := 0 ;
72576: LD_ADDR_OWVAR 21
72580: PUSH
72581: LD_INT 0
72583: ST_TO_ADDR
// hc_sex := sex_male ;
72584: LD_ADDR_OWVAR 27
72588: PUSH
72589: LD_INT 1
72591: ST_TO_ADDR
// hc_class := class_apeman ;
72592: LD_ADDR_OWVAR 28
72596: PUSH
72597: LD_INT 12
72599: ST_TO_ADDR
// hc_gallery :=  ;
72600: LD_ADDR_OWVAR 33
72604: PUSH
72605: LD_STRING 
72607: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72608: LD_ADDR_OWVAR 35
72612: PUSH
72613: LD_VAR 0 1
72617: NEG
72618: PPUSH
72619: LD_VAR 0 1
72623: PPUSH
72624: CALL_OW 12
72628: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72629: LD_ADDR_OWVAR 31
72633: PUSH
72634: LD_INT 0
72636: PPUSH
72637: LD_INT 3
72639: PPUSH
72640: CALL_OW 12
72644: PUSH
72645: LD_INT 0
72647: PPUSH
72648: LD_INT 3
72650: PPUSH
72651: CALL_OW 12
72655: PUSH
72656: LD_INT 0
72658: PUSH
72659: LD_INT 0
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: ST_TO_ADDR
// end ;
72668: LD_VAR 0 2
72672: RET
// export function PrepareTiger ( agressivity ) ; begin
72673: LD_INT 0
72675: PPUSH
// uc_side := 0 ;
72676: LD_ADDR_OWVAR 20
72680: PUSH
72681: LD_INT 0
72683: ST_TO_ADDR
// uc_nation := 0 ;
72684: LD_ADDR_OWVAR 21
72688: PUSH
72689: LD_INT 0
72691: ST_TO_ADDR
// hc_class := class_tiger ;
72692: LD_ADDR_OWVAR 28
72696: PUSH
72697: LD_INT 14
72699: ST_TO_ADDR
// hc_gallery :=  ;
72700: LD_ADDR_OWVAR 33
72704: PUSH
72705: LD_STRING 
72707: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72708: LD_ADDR_OWVAR 35
72712: PUSH
72713: LD_VAR 0 1
72717: NEG
72718: PPUSH
72719: LD_VAR 0 1
72723: PPUSH
72724: CALL_OW 12
72728: ST_TO_ADDR
// end ;
72729: LD_VAR 0 2
72733: RET
// export function PrepareEnchidna ( ) ; begin
72734: LD_INT 0
72736: PPUSH
// uc_side := 0 ;
72737: LD_ADDR_OWVAR 20
72741: PUSH
72742: LD_INT 0
72744: ST_TO_ADDR
// uc_nation := 0 ;
72745: LD_ADDR_OWVAR 21
72749: PUSH
72750: LD_INT 0
72752: ST_TO_ADDR
// hc_class := class_baggie ;
72753: LD_ADDR_OWVAR 28
72757: PUSH
72758: LD_INT 13
72760: ST_TO_ADDR
// hc_gallery :=  ;
72761: LD_ADDR_OWVAR 33
72765: PUSH
72766: LD_STRING 
72768: ST_TO_ADDR
// end ;
72769: LD_VAR 0 1
72773: RET
// export function PrepareFrog ( ) ; begin
72774: LD_INT 0
72776: PPUSH
// uc_side := 0 ;
72777: LD_ADDR_OWVAR 20
72781: PUSH
72782: LD_INT 0
72784: ST_TO_ADDR
// uc_nation := 0 ;
72785: LD_ADDR_OWVAR 21
72789: PUSH
72790: LD_INT 0
72792: ST_TO_ADDR
// hc_class := class_frog ;
72793: LD_ADDR_OWVAR 28
72797: PUSH
72798: LD_INT 19
72800: ST_TO_ADDR
// hc_gallery :=  ;
72801: LD_ADDR_OWVAR 33
72805: PUSH
72806: LD_STRING 
72808: ST_TO_ADDR
// end ;
72809: LD_VAR 0 1
72813: RET
// export function PrepareFish ( ) ; begin
72814: LD_INT 0
72816: PPUSH
// uc_side := 0 ;
72817: LD_ADDR_OWVAR 20
72821: PUSH
72822: LD_INT 0
72824: ST_TO_ADDR
// uc_nation := 0 ;
72825: LD_ADDR_OWVAR 21
72829: PUSH
72830: LD_INT 0
72832: ST_TO_ADDR
// hc_class := class_fish ;
72833: LD_ADDR_OWVAR 28
72837: PUSH
72838: LD_INT 20
72840: ST_TO_ADDR
// hc_gallery :=  ;
72841: LD_ADDR_OWVAR 33
72845: PUSH
72846: LD_STRING 
72848: ST_TO_ADDR
// end ;
72849: LD_VAR 0 1
72853: RET
// export function PrepareBird ( ) ; begin
72854: LD_INT 0
72856: PPUSH
// uc_side := 0 ;
72857: LD_ADDR_OWVAR 20
72861: PUSH
72862: LD_INT 0
72864: ST_TO_ADDR
// uc_nation := 0 ;
72865: LD_ADDR_OWVAR 21
72869: PUSH
72870: LD_INT 0
72872: ST_TO_ADDR
// hc_class := class_phororhacos ;
72873: LD_ADDR_OWVAR 28
72877: PUSH
72878: LD_INT 18
72880: ST_TO_ADDR
// hc_gallery :=  ;
72881: LD_ADDR_OWVAR 33
72885: PUSH
72886: LD_STRING 
72888: ST_TO_ADDR
// end ;
72889: LD_VAR 0 1
72893: RET
// export function PrepareHorse ( ) ; begin
72894: LD_INT 0
72896: PPUSH
// uc_side := 0 ;
72897: LD_ADDR_OWVAR 20
72901: PUSH
72902: LD_INT 0
72904: ST_TO_ADDR
// uc_nation := 0 ;
72905: LD_ADDR_OWVAR 21
72909: PUSH
72910: LD_INT 0
72912: ST_TO_ADDR
// hc_class := class_horse ;
72913: LD_ADDR_OWVAR 28
72917: PUSH
72918: LD_INT 21
72920: ST_TO_ADDR
// hc_gallery :=  ;
72921: LD_ADDR_OWVAR 33
72925: PUSH
72926: LD_STRING 
72928: ST_TO_ADDR
// end ;
72929: LD_VAR 0 1
72933: RET
// export function PrepareMastodont ( ) ; begin
72934: LD_INT 0
72936: PPUSH
// uc_side := 0 ;
72937: LD_ADDR_OWVAR 20
72941: PUSH
72942: LD_INT 0
72944: ST_TO_ADDR
// uc_nation := 0 ;
72945: LD_ADDR_OWVAR 21
72949: PUSH
72950: LD_INT 0
72952: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72953: LD_ADDR_OWVAR 37
72957: PUSH
72958: LD_INT 31
72960: ST_TO_ADDR
// vc_control := control_rider ;
72961: LD_ADDR_OWVAR 38
72965: PUSH
72966: LD_INT 4
72968: ST_TO_ADDR
// end ;
72969: LD_VAR 0 1
72973: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72974: LD_INT 0
72976: PPUSH
72977: PPUSH
72978: PPUSH
// uc_side = 0 ;
72979: LD_ADDR_OWVAR 20
72983: PUSH
72984: LD_INT 0
72986: ST_TO_ADDR
// uc_nation = 0 ;
72987: LD_ADDR_OWVAR 21
72991: PUSH
72992: LD_INT 0
72994: ST_TO_ADDR
// InitHc_All ( ) ;
72995: CALL_OW 584
// InitVc ;
72999: CALL_OW 20
// if mastodonts then
73003: LD_VAR 0 6
73007: IFFALSE 73074
// for i = 1 to mastodonts do
73009: LD_ADDR_VAR 0 11
73013: PUSH
73014: DOUBLE
73015: LD_INT 1
73017: DEC
73018: ST_TO_ADDR
73019: LD_VAR 0 6
73023: PUSH
73024: FOR_TO
73025: IFFALSE 73072
// begin vc_chassis := 31 ;
73027: LD_ADDR_OWVAR 37
73031: PUSH
73032: LD_INT 31
73034: ST_TO_ADDR
// vc_control := control_rider ;
73035: LD_ADDR_OWVAR 38
73039: PUSH
73040: LD_INT 4
73042: ST_TO_ADDR
// animal := CreateVehicle ;
73043: LD_ADDR_VAR 0 12
73047: PUSH
73048: CALL_OW 45
73052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73053: LD_VAR 0 12
73057: PPUSH
73058: LD_VAR 0 8
73062: PPUSH
73063: LD_INT 0
73065: PPUSH
73066: CALL 75202 0 3
// end ;
73070: GO 73024
73072: POP
73073: POP
// if horses then
73074: LD_VAR 0 5
73078: IFFALSE 73145
// for i = 1 to horses do
73080: LD_ADDR_VAR 0 11
73084: PUSH
73085: DOUBLE
73086: LD_INT 1
73088: DEC
73089: ST_TO_ADDR
73090: LD_VAR 0 5
73094: PUSH
73095: FOR_TO
73096: IFFALSE 73143
// begin hc_class := 21 ;
73098: LD_ADDR_OWVAR 28
73102: PUSH
73103: LD_INT 21
73105: ST_TO_ADDR
// hc_gallery :=  ;
73106: LD_ADDR_OWVAR 33
73110: PUSH
73111: LD_STRING 
73113: ST_TO_ADDR
// animal := CreateHuman ;
73114: LD_ADDR_VAR 0 12
73118: PUSH
73119: CALL_OW 44
73123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73124: LD_VAR 0 12
73128: PPUSH
73129: LD_VAR 0 8
73133: PPUSH
73134: LD_INT 0
73136: PPUSH
73137: CALL 75202 0 3
// end ;
73141: GO 73095
73143: POP
73144: POP
// if birds then
73145: LD_VAR 0 1
73149: IFFALSE 73216
// for i = 1 to birds do
73151: LD_ADDR_VAR 0 11
73155: PUSH
73156: DOUBLE
73157: LD_INT 1
73159: DEC
73160: ST_TO_ADDR
73161: LD_VAR 0 1
73165: PUSH
73166: FOR_TO
73167: IFFALSE 73214
// begin hc_class := 18 ;
73169: LD_ADDR_OWVAR 28
73173: PUSH
73174: LD_INT 18
73176: ST_TO_ADDR
// hc_gallery =  ;
73177: LD_ADDR_OWVAR 33
73181: PUSH
73182: LD_STRING 
73184: ST_TO_ADDR
// animal := CreateHuman ;
73185: LD_ADDR_VAR 0 12
73189: PUSH
73190: CALL_OW 44
73194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73195: LD_VAR 0 12
73199: PPUSH
73200: LD_VAR 0 8
73204: PPUSH
73205: LD_INT 0
73207: PPUSH
73208: CALL 75202 0 3
// end ;
73212: GO 73166
73214: POP
73215: POP
// if tigers then
73216: LD_VAR 0 2
73220: IFFALSE 73304
// for i = 1 to tigers do
73222: LD_ADDR_VAR 0 11
73226: PUSH
73227: DOUBLE
73228: LD_INT 1
73230: DEC
73231: ST_TO_ADDR
73232: LD_VAR 0 2
73236: PUSH
73237: FOR_TO
73238: IFFALSE 73302
// begin hc_class = class_tiger ;
73240: LD_ADDR_OWVAR 28
73244: PUSH
73245: LD_INT 14
73247: ST_TO_ADDR
// hc_gallery =  ;
73248: LD_ADDR_OWVAR 33
73252: PUSH
73253: LD_STRING 
73255: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73256: LD_ADDR_OWVAR 35
73260: PUSH
73261: LD_INT 7
73263: NEG
73264: PPUSH
73265: LD_INT 7
73267: PPUSH
73268: CALL_OW 12
73272: ST_TO_ADDR
// animal := CreateHuman ;
73273: LD_ADDR_VAR 0 12
73277: PUSH
73278: CALL_OW 44
73282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73283: LD_VAR 0 12
73287: PPUSH
73288: LD_VAR 0 8
73292: PPUSH
73293: LD_INT 0
73295: PPUSH
73296: CALL 75202 0 3
// end ;
73300: GO 73237
73302: POP
73303: POP
// if apemans then
73304: LD_VAR 0 3
73308: IFFALSE 73431
// for i = 1 to apemans do
73310: LD_ADDR_VAR 0 11
73314: PUSH
73315: DOUBLE
73316: LD_INT 1
73318: DEC
73319: ST_TO_ADDR
73320: LD_VAR 0 3
73324: PUSH
73325: FOR_TO
73326: IFFALSE 73429
// begin hc_class = class_apeman ;
73328: LD_ADDR_OWVAR 28
73332: PUSH
73333: LD_INT 12
73335: ST_TO_ADDR
// hc_gallery =  ;
73336: LD_ADDR_OWVAR 33
73340: PUSH
73341: LD_STRING 
73343: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73344: LD_ADDR_OWVAR 35
73348: PUSH
73349: LD_INT 2
73351: NEG
73352: PPUSH
73353: LD_INT 2
73355: PPUSH
73356: CALL_OW 12
73360: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73361: LD_ADDR_OWVAR 31
73365: PUSH
73366: LD_INT 1
73368: PPUSH
73369: LD_INT 3
73371: PPUSH
73372: CALL_OW 12
73376: PUSH
73377: LD_INT 1
73379: PPUSH
73380: LD_INT 3
73382: PPUSH
73383: CALL_OW 12
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: LD_INT 0
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: LIST
73398: LIST
73399: ST_TO_ADDR
// animal := CreateHuman ;
73400: LD_ADDR_VAR 0 12
73404: PUSH
73405: CALL_OW 44
73409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73410: LD_VAR 0 12
73414: PPUSH
73415: LD_VAR 0 8
73419: PPUSH
73420: LD_INT 0
73422: PPUSH
73423: CALL 75202 0 3
// end ;
73427: GO 73325
73429: POP
73430: POP
// if enchidnas then
73431: LD_VAR 0 4
73435: IFFALSE 73502
// for i = 1 to enchidnas do
73437: LD_ADDR_VAR 0 11
73441: PUSH
73442: DOUBLE
73443: LD_INT 1
73445: DEC
73446: ST_TO_ADDR
73447: LD_VAR 0 4
73451: PUSH
73452: FOR_TO
73453: IFFALSE 73500
// begin hc_class = 13 ;
73455: LD_ADDR_OWVAR 28
73459: PUSH
73460: LD_INT 13
73462: ST_TO_ADDR
// hc_gallery =  ;
73463: LD_ADDR_OWVAR 33
73467: PUSH
73468: LD_STRING 
73470: ST_TO_ADDR
// animal := CreateHuman ;
73471: LD_ADDR_VAR 0 12
73475: PUSH
73476: CALL_OW 44
73480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73481: LD_VAR 0 12
73485: PPUSH
73486: LD_VAR 0 8
73490: PPUSH
73491: LD_INT 0
73493: PPUSH
73494: CALL 75202 0 3
// end ;
73498: GO 73452
73500: POP
73501: POP
// if fishes then
73502: LD_VAR 0 7
73506: IFFALSE 73573
// for i = 1 to fishes do
73508: LD_ADDR_VAR 0 11
73512: PUSH
73513: DOUBLE
73514: LD_INT 1
73516: DEC
73517: ST_TO_ADDR
73518: LD_VAR 0 7
73522: PUSH
73523: FOR_TO
73524: IFFALSE 73571
// begin hc_class = 20 ;
73526: LD_ADDR_OWVAR 28
73530: PUSH
73531: LD_INT 20
73533: ST_TO_ADDR
// hc_gallery =  ;
73534: LD_ADDR_OWVAR 33
73538: PUSH
73539: LD_STRING 
73541: ST_TO_ADDR
// animal := CreateHuman ;
73542: LD_ADDR_VAR 0 12
73546: PUSH
73547: CALL_OW 44
73551: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73552: LD_VAR 0 12
73556: PPUSH
73557: LD_VAR 0 9
73561: PPUSH
73562: LD_INT 0
73564: PPUSH
73565: CALL 75202 0 3
// end ;
73569: GO 73523
73571: POP
73572: POP
// end ;
73573: LD_VAR 0 10
73577: RET
// export function WantHeal ( sci , unit ) ; begin
73578: LD_INT 0
73580: PPUSH
// if GetTaskList ( sci ) > 0 then
73581: LD_VAR 0 1
73585: PPUSH
73586: CALL_OW 437
73590: PUSH
73591: LD_INT 0
73593: GREATER
73594: IFFALSE 73664
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73596: LD_VAR 0 1
73600: PPUSH
73601: CALL_OW 437
73605: PUSH
73606: LD_INT 1
73608: ARRAY
73609: PUSH
73610: LD_INT 1
73612: ARRAY
73613: PUSH
73614: LD_STRING l
73616: EQUAL
73617: PUSH
73618: LD_VAR 0 1
73622: PPUSH
73623: CALL_OW 437
73627: PUSH
73628: LD_INT 1
73630: ARRAY
73631: PUSH
73632: LD_INT 4
73634: ARRAY
73635: PUSH
73636: LD_VAR 0 2
73640: EQUAL
73641: AND
73642: IFFALSE 73654
// result := true else
73644: LD_ADDR_VAR 0 3
73648: PUSH
73649: LD_INT 1
73651: ST_TO_ADDR
73652: GO 73662
// result := false ;
73654: LD_ADDR_VAR 0 3
73658: PUSH
73659: LD_INT 0
73661: ST_TO_ADDR
// end else
73662: GO 73672
// result := false ;
73664: LD_ADDR_VAR 0 3
73668: PUSH
73669: LD_INT 0
73671: ST_TO_ADDR
// end ;
73672: LD_VAR 0 3
73676: RET
// export function HealTarget ( sci ) ; begin
73677: LD_INT 0
73679: PPUSH
// if not sci then
73680: LD_VAR 0 1
73684: NOT
73685: IFFALSE 73689
// exit ;
73687: GO 73754
// result := 0 ;
73689: LD_ADDR_VAR 0 2
73693: PUSH
73694: LD_INT 0
73696: ST_TO_ADDR
// if GetTaskList ( sci ) then
73697: LD_VAR 0 1
73701: PPUSH
73702: CALL_OW 437
73706: IFFALSE 73754
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73708: LD_VAR 0 1
73712: PPUSH
73713: CALL_OW 437
73717: PUSH
73718: LD_INT 1
73720: ARRAY
73721: PUSH
73722: LD_INT 1
73724: ARRAY
73725: PUSH
73726: LD_STRING l
73728: EQUAL
73729: IFFALSE 73754
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73731: LD_ADDR_VAR 0 2
73735: PUSH
73736: LD_VAR 0 1
73740: PPUSH
73741: CALL_OW 437
73745: PUSH
73746: LD_INT 1
73748: ARRAY
73749: PUSH
73750: LD_INT 4
73752: ARRAY
73753: ST_TO_ADDR
// end ;
73754: LD_VAR 0 2
73758: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73759: LD_INT 0
73761: PPUSH
73762: PPUSH
73763: PPUSH
73764: PPUSH
// if not base_units then
73765: LD_VAR 0 1
73769: NOT
73770: IFFALSE 73774
// exit ;
73772: GO 73861
// result := false ;
73774: LD_ADDR_VAR 0 2
73778: PUSH
73779: LD_INT 0
73781: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73782: LD_ADDR_VAR 0 5
73786: PUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: LD_INT 21
73794: PUSH
73795: LD_INT 3
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PPUSH
73802: CALL_OW 72
73806: ST_TO_ADDR
// if not tmp then
73807: LD_VAR 0 5
73811: NOT
73812: IFFALSE 73816
// exit ;
73814: GO 73861
// for i in tmp do
73816: LD_ADDR_VAR 0 3
73820: PUSH
73821: LD_VAR 0 5
73825: PUSH
73826: FOR_IN
73827: IFFALSE 73859
// begin result := EnemyInRange ( i , 22 ) ;
73829: LD_ADDR_VAR 0 2
73833: PUSH
73834: LD_VAR 0 3
73838: PPUSH
73839: LD_INT 22
73841: PPUSH
73842: CALL 71448 0 2
73846: ST_TO_ADDR
// if result then
73847: LD_VAR 0 2
73851: IFFALSE 73857
// exit ;
73853: POP
73854: POP
73855: GO 73861
// end ;
73857: GO 73826
73859: POP
73860: POP
// end ;
73861: LD_VAR 0 2
73865: RET
// export function FilterByTag ( units , tag ) ; begin
73866: LD_INT 0
73868: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73869: LD_ADDR_VAR 0 3
73873: PUSH
73874: LD_VAR 0 1
73878: PPUSH
73879: LD_INT 120
73881: PUSH
73882: LD_VAR 0 2
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PPUSH
73891: CALL_OW 72
73895: ST_TO_ADDR
// end ;
73896: LD_VAR 0 3
73900: RET
// export function IsDriver ( un ) ; begin
73901: LD_INT 0
73903: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73904: LD_ADDR_VAR 0 2
73908: PUSH
73909: LD_VAR 0 1
73913: PUSH
73914: LD_INT 55
73916: PUSH
73917: EMPTY
73918: LIST
73919: PPUSH
73920: CALL_OW 69
73924: IN
73925: ST_TO_ADDR
// end ;
73926: LD_VAR 0 2
73930: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73931: LD_INT 0
73933: PPUSH
73934: PPUSH
// list := [ ] ;
73935: LD_ADDR_VAR 0 5
73939: PUSH
73940: EMPTY
73941: ST_TO_ADDR
// case d of 0 :
73942: LD_VAR 0 3
73946: PUSH
73947: LD_INT 0
73949: DOUBLE
73950: EQUAL
73951: IFTRUE 73955
73953: GO 74088
73955: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73956: LD_ADDR_VAR 0 5
73960: PUSH
73961: LD_VAR 0 1
73965: PUSH
73966: LD_INT 4
73968: MINUS
73969: PUSH
73970: LD_VAR 0 2
73974: PUSH
73975: LD_INT 4
73977: MINUS
73978: PUSH
73979: LD_INT 2
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: LIST
73986: PUSH
73987: LD_VAR 0 1
73991: PUSH
73992: LD_INT 3
73994: MINUS
73995: PUSH
73996: LD_VAR 0 2
74000: PUSH
74001: LD_INT 1
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: LIST
74008: PUSH
74009: LD_VAR 0 1
74013: PUSH
74014: LD_INT 4
74016: PLUS
74017: PUSH
74018: LD_VAR 0 2
74022: PUSH
74023: LD_INT 4
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: LIST
74030: PUSH
74031: LD_VAR 0 1
74035: PUSH
74036: LD_INT 3
74038: PLUS
74039: PUSH
74040: LD_VAR 0 2
74044: PUSH
74045: LD_INT 3
74047: PLUS
74048: PUSH
74049: LD_INT 5
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: LIST
74056: PUSH
74057: LD_VAR 0 1
74061: PUSH
74062: LD_VAR 0 2
74066: PUSH
74067: LD_INT 4
74069: PLUS
74070: PUSH
74071: LD_INT 0
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: ST_TO_ADDR
// end ; 1 :
74086: GO 74786
74088: LD_INT 1
74090: DOUBLE
74091: EQUAL
74092: IFTRUE 74096
74094: GO 74229
74096: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74097: LD_ADDR_VAR 0 5
74101: PUSH
74102: LD_VAR 0 1
74106: PUSH
74107: LD_VAR 0 2
74111: PUSH
74112: LD_INT 4
74114: MINUS
74115: PUSH
74116: LD_INT 3
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: LIST
74123: PUSH
74124: LD_VAR 0 1
74128: PUSH
74129: LD_INT 3
74131: MINUS
74132: PUSH
74133: LD_VAR 0 2
74137: PUSH
74138: LD_INT 3
74140: MINUS
74141: PUSH
74142: LD_INT 2
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: LIST
74149: PUSH
74150: LD_VAR 0 1
74154: PUSH
74155: LD_INT 4
74157: MINUS
74158: PUSH
74159: LD_VAR 0 2
74163: PUSH
74164: LD_INT 1
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: LIST
74171: PUSH
74172: LD_VAR 0 1
74176: PUSH
74177: LD_VAR 0 2
74181: PUSH
74182: LD_INT 3
74184: PLUS
74185: PUSH
74186: LD_INT 0
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: LIST
74193: PUSH
74194: LD_VAR 0 1
74198: PUSH
74199: LD_INT 4
74201: PLUS
74202: PUSH
74203: LD_VAR 0 2
74207: PUSH
74208: LD_INT 4
74210: PLUS
74211: PUSH
74212: LD_INT 5
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: LIST
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: ST_TO_ADDR
// end ; 2 :
74227: GO 74786
74229: LD_INT 2
74231: DOUBLE
74232: EQUAL
74233: IFTRUE 74237
74235: GO 74366
74237: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74238: LD_ADDR_VAR 0 5
74242: PUSH
74243: LD_VAR 0 1
74247: PUSH
74248: LD_VAR 0 2
74252: PUSH
74253: LD_INT 3
74255: MINUS
74256: PUSH
74257: LD_INT 3
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: LIST
74264: PUSH
74265: LD_VAR 0 1
74269: PUSH
74270: LD_INT 4
74272: PLUS
74273: PUSH
74274: LD_VAR 0 2
74278: PUSH
74279: LD_INT 4
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: LIST
74286: PUSH
74287: LD_VAR 0 1
74291: PUSH
74292: LD_VAR 0 2
74296: PUSH
74297: LD_INT 4
74299: PLUS
74300: PUSH
74301: LD_INT 0
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: LIST
74308: PUSH
74309: LD_VAR 0 1
74313: PUSH
74314: LD_INT 3
74316: MINUS
74317: PUSH
74318: LD_VAR 0 2
74322: PUSH
74323: LD_INT 1
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: PUSH
74331: LD_VAR 0 1
74335: PUSH
74336: LD_INT 4
74338: MINUS
74339: PUSH
74340: LD_VAR 0 2
74344: PUSH
74345: LD_INT 4
74347: MINUS
74348: PUSH
74349: LD_INT 2
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: ST_TO_ADDR
// end ; 3 :
74364: GO 74786
74366: LD_INT 3
74368: DOUBLE
74369: EQUAL
74370: IFTRUE 74374
74372: GO 74507
74374: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74375: LD_ADDR_VAR 0 5
74379: PUSH
74380: LD_VAR 0 1
74384: PUSH
74385: LD_INT 3
74387: PLUS
74388: PUSH
74389: LD_VAR 0 2
74393: PUSH
74394: LD_INT 4
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: LIST
74401: PUSH
74402: LD_VAR 0 1
74406: PUSH
74407: LD_INT 4
74409: PLUS
74410: PUSH
74411: LD_VAR 0 2
74415: PUSH
74416: LD_INT 4
74418: PLUS
74419: PUSH
74420: LD_INT 5
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: LIST
74427: PUSH
74428: LD_VAR 0 1
74432: PUSH
74433: LD_INT 4
74435: MINUS
74436: PUSH
74437: LD_VAR 0 2
74441: PUSH
74442: LD_INT 1
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: LIST
74449: PUSH
74450: LD_VAR 0 1
74454: PUSH
74455: LD_VAR 0 2
74459: PUSH
74460: LD_INT 4
74462: MINUS
74463: PUSH
74464: LD_INT 3
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: LIST
74471: PUSH
74472: LD_VAR 0 1
74476: PUSH
74477: LD_INT 3
74479: MINUS
74480: PUSH
74481: LD_VAR 0 2
74485: PUSH
74486: LD_INT 3
74488: MINUS
74489: PUSH
74490: LD_INT 2
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: LIST
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: ST_TO_ADDR
// end ; 4 :
74505: GO 74786
74507: LD_INT 4
74509: DOUBLE
74510: EQUAL
74511: IFTRUE 74515
74513: GO 74648
74515: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74516: LD_ADDR_VAR 0 5
74520: PUSH
74521: LD_VAR 0 1
74525: PUSH
74526: LD_VAR 0 2
74530: PUSH
74531: LD_INT 4
74533: PLUS
74534: PUSH
74535: LD_INT 0
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: LIST
74542: PUSH
74543: LD_VAR 0 1
74547: PUSH
74548: LD_INT 3
74550: PLUS
74551: PUSH
74552: LD_VAR 0 2
74556: PUSH
74557: LD_INT 3
74559: PLUS
74560: PUSH
74561: LD_INT 5
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: PUSH
74569: LD_VAR 0 1
74573: PUSH
74574: LD_INT 4
74576: PLUS
74577: PUSH
74578: LD_VAR 0 2
74582: PUSH
74583: LD_INT 4
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: LIST
74590: PUSH
74591: LD_VAR 0 1
74595: PUSH
74596: LD_VAR 0 2
74600: PUSH
74601: LD_INT 3
74603: MINUS
74604: PUSH
74605: LD_INT 3
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: LIST
74612: PUSH
74613: LD_VAR 0 1
74617: PUSH
74618: LD_INT 4
74620: MINUS
74621: PUSH
74622: LD_VAR 0 2
74626: PUSH
74627: LD_INT 4
74629: MINUS
74630: PUSH
74631: LD_INT 2
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: LIST
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: LIST
74643: LIST
74644: LIST
74645: ST_TO_ADDR
// end ; 5 :
74646: GO 74786
74648: LD_INT 5
74650: DOUBLE
74651: EQUAL
74652: IFTRUE 74656
74654: GO 74785
74656: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74657: LD_ADDR_VAR 0 5
74661: PUSH
74662: LD_VAR 0 1
74666: PUSH
74667: LD_INT 4
74669: MINUS
74670: PUSH
74671: LD_VAR 0 2
74675: PUSH
74676: LD_INT 1
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: LIST
74683: PUSH
74684: LD_VAR 0 1
74688: PUSH
74689: LD_VAR 0 2
74693: PUSH
74694: LD_INT 4
74696: MINUS
74697: PUSH
74698: LD_INT 3
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: LIST
74705: PUSH
74706: LD_VAR 0 1
74710: PUSH
74711: LD_INT 4
74713: PLUS
74714: PUSH
74715: LD_VAR 0 2
74719: PUSH
74720: LD_INT 4
74722: PLUS
74723: PUSH
74724: LD_INT 5
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: LIST
74731: PUSH
74732: LD_VAR 0 1
74736: PUSH
74737: LD_INT 3
74739: PLUS
74740: PUSH
74741: LD_VAR 0 2
74745: PUSH
74746: LD_INT 4
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: LIST
74753: PUSH
74754: LD_VAR 0 1
74758: PUSH
74759: LD_VAR 0 2
74763: PUSH
74764: LD_INT 3
74766: PLUS
74767: PUSH
74768: LD_INT 0
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: LIST
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: LIST
74780: LIST
74781: LIST
74782: ST_TO_ADDR
// end ; end ;
74783: GO 74786
74785: POP
// result := list ;
74786: LD_ADDR_VAR 0 4
74790: PUSH
74791: LD_VAR 0 5
74795: ST_TO_ADDR
// end ;
74796: LD_VAR 0 4
74800: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74801: LD_INT 0
74803: PPUSH
74804: PPUSH
74805: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74806: LD_VAR 0 1
74810: NOT
74811: PUSH
74812: LD_VAR 0 2
74816: PUSH
74817: LD_INT 1
74819: PUSH
74820: LD_INT 2
74822: PUSH
74823: LD_INT 3
74825: PUSH
74826: LD_INT 4
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: IN
74835: NOT
74836: OR
74837: IFFALSE 74841
// exit ;
74839: GO 74924
// tmp := [ ] ;
74841: LD_ADDR_VAR 0 5
74845: PUSH
74846: EMPTY
74847: ST_TO_ADDR
// for i in units do
74848: LD_ADDR_VAR 0 4
74852: PUSH
74853: LD_VAR 0 1
74857: PUSH
74858: FOR_IN
74859: IFFALSE 74893
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74861: LD_ADDR_VAR 0 5
74865: PUSH
74866: LD_VAR 0 5
74870: PPUSH
74871: LD_VAR 0 4
74875: PPUSH
74876: LD_VAR 0 2
74880: PPUSH
74881: CALL_OW 259
74885: PPUSH
74886: CALL 76297 0 2
74890: ST_TO_ADDR
74891: GO 74858
74893: POP
74894: POP
// if not tmp then
74895: LD_VAR 0 5
74899: NOT
74900: IFFALSE 74904
// exit ;
74902: GO 74924
// result := SortListByListDesc ( units , tmp ) ;
74904: LD_ADDR_VAR 0 3
74908: PUSH
74909: LD_VAR 0 1
74913: PPUSH
74914: LD_VAR 0 5
74918: PPUSH
74919: CALL_OW 77
74923: ST_TO_ADDR
// end ;
74924: LD_VAR 0 3
74928: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74929: LD_INT 0
74931: PPUSH
74932: PPUSH
74933: PPUSH
// result := false ;
74934: LD_ADDR_VAR 0 3
74938: PUSH
74939: LD_INT 0
74941: ST_TO_ADDR
// if not building then
74942: LD_VAR 0 2
74946: NOT
74947: IFFALSE 74951
// exit ;
74949: GO 75089
// x := GetX ( building ) ;
74951: LD_ADDR_VAR 0 4
74955: PUSH
74956: LD_VAR 0 2
74960: PPUSH
74961: CALL_OW 250
74965: ST_TO_ADDR
// y := GetY ( building ) ;
74966: LD_ADDR_VAR 0 5
74970: PUSH
74971: LD_VAR 0 2
74975: PPUSH
74976: CALL_OW 251
74980: ST_TO_ADDR
// if not x or not y then
74981: LD_VAR 0 4
74985: NOT
74986: PUSH
74987: LD_VAR 0 5
74991: NOT
74992: OR
74993: IFFALSE 74997
// exit ;
74995: GO 75089
// if GetTaskList ( unit ) then
74997: LD_VAR 0 1
75001: PPUSH
75002: CALL_OW 437
75006: IFFALSE 75089
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75008: LD_STRING e
75010: PUSH
75011: LD_VAR 0 1
75015: PPUSH
75016: CALL_OW 437
75020: PUSH
75021: LD_INT 1
75023: ARRAY
75024: PUSH
75025: LD_INT 1
75027: ARRAY
75028: EQUAL
75029: PUSH
75030: LD_VAR 0 4
75034: PUSH
75035: LD_VAR 0 1
75039: PPUSH
75040: CALL_OW 437
75044: PUSH
75045: LD_INT 1
75047: ARRAY
75048: PUSH
75049: LD_INT 2
75051: ARRAY
75052: EQUAL
75053: AND
75054: PUSH
75055: LD_VAR 0 5
75059: PUSH
75060: LD_VAR 0 1
75064: PPUSH
75065: CALL_OW 437
75069: PUSH
75070: LD_INT 1
75072: ARRAY
75073: PUSH
75074: LD_INT 3
75076: ARRAY
75077: EQUAL
75078: AND
75079: IFFALSE 75089
// result := true end ;
75081: LD_ADDR_VAR 0 3
75085: PUSH
75086: LD_INT 1
75088: ST_TO_ADDR
// end ;
75089: LD_VAR 0 3
75093: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75094: LD_INT 0
75096: PPUSH
// result := false ;
75097: LD_ADDR_VAR 0 4
75101: PUSH
75102: LD_INT 0
75104: ST_TO_ADDR
// if GetTaskList ( unit ) then
75105: LD_VAR 0 1
75109: PPUSH
75110: CALL_OW 437
75114: IFFALSE 75197
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75116: LD_STRING M
75118: PUSH
75119: LD_VAR 0 1
75123: PPUSH
75124: CALL_OW 437
75128: PUSH
75129: LD_INT 1
75131: ARRAY
75132: PUSH
75133: LD_INT 1
75135: ARRAY
75136: EQUAL
75137: PUSH
75138: LD_VAR 0 2
75142: PUSH
75143: LD_VAR 0 1
75147: PPUSH
75148: CALL_OW 437
75152: PUSH
75153: LD_INT 1
75155: ARRAY
75156: PUSH
75157: LD_INT 2
75159: ARRAY
75160: EQUAL
75161: AND
75162: PUSH
75163: LD_VAR 0 3
75167: PUSH
75168: LD_VAR 0 1
75172: PPUSH
75173: CALL_OW 437
75177: PUSH
75178: LD_INT 1
75180: ARRAY
75181: PUSH
75182: LD_INT 3
75184: ARRAY
75185: EQUAL
75186: AND
75187: IFFALSE 75197
// result := true ;
75189: LD_ADDR_VAR 0 4
75193: PUSH
75194: LD_INT 1
75196: ST_TO_ADDR
// end ; end ;
75197: LD_VAR 0 4
75201: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75202: LD_INT 0
75204: PPUSH
75205: PPUSH
75206: PPUSH
75207: PPUSH
// if not unit or not area then
75208: LD_VAR 0 1
75212: NOT
75213: PUSH
75214: LD_VAR 0 2
75218: NOT
75219: OR
75220: IFFALSE 75224
// exit ;
75222: GO 75400
// tmp := AreaToList ( area , i ) ;
75224: LD_ADDR_VAR 0 6
75228: PUSH
75229: LD_VAR 0 2
75233: PPUSH
75234: LD_VAR 0 5
75238: PPUSH
75239: CALL_OW 517
75243: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75244: LD_ADDR_VAR 0 5
75248: PUSH
75249: DOUBLE
75250: LD_INT 1
75252: DEC
75253: ST_TO_ADDR
75254: LD_VAR 0 6
75258: PUSH
75259: LD_INT 1
75261: ARRAY
75262: PUSH
75263: FOR_TO
75264: IFFALSE 75398
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75266: LD_ADDR_VAR 0 7
75270: PUSH
75271: LD_VAR 0 6
75275: PUSH
75276: LD_INT 1
75278: ARRAY
75279: PUSH
75280: LD_VAR 0 5
75284: ARRAY
75285: PUSH
75286: LD_VAR 0 6
75290: PUSH
75291: LD_INT 2
75293: ARRAY
75294: PUSH
75295: LD_VAR 0 5
75299: ARRAY
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75305: LD_INT 92
75307: PUSH
75308: LD_VAR 0 7
75312: PUSH
75313: LD_INT 1
75315: ARRAY
75316: PUSH
75317: LD_VAR 0 7
75321: PUSH
75322: LD_INT 2
75324: ARRAY
75325: PUSH
75326: LD_INT 2
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: PPUSH
75335: CALL_OW 69
75339: PUSH
75340: LD_INT 0
75342: EQUAL
75343: IFFALSE 75396
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75345: LD_VAR 0 1
75349: PPUSH
75350: LD_VAR 0 7
75354: PUSH
75355: LD_INT 1
75357: ARRAY
75358: PPUSH
75359: LD_VAR 0 7
75363: PUSH
75364: LD_INT 2
75366: ARRAY
75367: PPUSH
75368: LD_VAR 0 3
75372: PPUSH
75373: CALL_OW 48
// result := IsPlaced ( unit ) ;
75377: LD_ADDR_VAR 0 4
75381: PUSH
75382: LD_VAR 0 1
75386: PPUSH
75387: CALL_OW 305
75391: ST_TO_ADDR
// exit ;
75392: POP
75393: POP
75394: GO 75400
// end ; end ;
75396: GO 75263
75398: POP
75399: POP
// end ;
75400: LD_VAR 0 4
75404: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75405: LD_INT 0
75407: PPUSH
75408: PPUSH
75409: PPUSH
// if not side or side > 8 then
75410: LD_VAR 0 1
75414: NOT
75415: PUSH
75416: LD_VAR 0 1
75420: PUSH
75421: LD_INT 8
75423: GREATER
75424: OR
75425: IFFALSE 75429
// exit ;
75427: GO 75616
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75429: LD_ADDR_VAR 0 4
75433: PUSH
75434: LD_INT 22
75436: PUSH
75437: LD_VAR 0 1
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 21
75448: PUSH
75449: LD_INT 3
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PPUSH
75460: CALL_OW 69
75464: ST_TO_ADDR
// if not tmp then
75465: LD_VAR 0 4
75469: NOT
75470: IFFALSE 75474
// exit ;
75472: GO 75616
// enable_addtolog := true ;
75474: LD_ADDR_OWVAR 81
75478: PUSH
75479: LD_INT 1
75481: ST_TO_ADDR
// AddToLog ( [ ) ;
75482: LD_STRING [
75484: PPUSH
75485: CALL_OW 561
// for i in tmp do
75489: LD_ADDR_VAR 0 3
75493: PUSH
75494: LD_VAR 0 4
75498: PUSH
75499: FOR_IN
75500: IFFALSE 75607
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75502: LD_STRING [
75504: PUSH
75505: LD_VAR 0 3
75509: PPUSH
75510: CALL_OW 266
75514: STR
75515: PUSH
75516: LD_STRING , 
75518: STR
75519: PUSH
75520: LD_VAR 0 3
75524: PPUSH
75525: CALL_OW 250
75529: STR
75530: PUSH
75531: LD_STRING , 
75533: STR
75534: PUSH
75535: LD_VAR 0 3
75539: PPUSH
75540: CALL_OW 251
75544: STR
75545: PUSH
75546: LD_STRING , 
75548: STR
75549: PUSH
75550: LD_VAR 0 3
75554: PPUSH
75555: CALL_OW 254
75559: STR
75560: PUSH
75561: LD_STRING , 
75563: STR
75564: PUSH
75565: LD_VAR 0 3
75569: PPUSH
75570: LD_INT 1
75572: PPUSH
75573: CALL_OW 268
75577: STR
75578: PUSH
75579: LD_STRING , 
75581: STR
75582: PUSH
75583: LD_VAR 0 3
75587: PPUSH
75588: LD_INT 2
75590: PPUSH
75591: CALL_OW 268
75595: STR
75596: PUSH
75597: LD_STRING ],
75599: STR
75600: PPUSH
75601: CALL_OW 561
// end ;
75605: GO 75499
75607: POP
75608: POP
// AddToLog ( ]; ) ;
75609: LD_STRING ];
75611: PPUSH
75612: CALL_OW 561
// end ;
75616: LD_VAR 0 2
75620: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75621: LD_INT 0
75623: PPUSH
75624: PPUSH
75625: PPUSH
75626: PPUSH
75627: PPUSH
// if not area or not rate or not max then
75628: LD_VAR 0 1
75632: NOT
75633: PUSH
75634: LD_VAR 0 2
75638: NOT
75639: OR
75640: PUSH
75641: LD_VAR 0 4
75645: NOT
75646: OR
75647: IFFALSE 75651
// exit ;
75649: GO 75840
// while 1 do
75651: LD_INT 1
75653: IFFALSE 75840
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75655: LD_ADDR_VAR 0 9
75659: PUSH
75660: LD_VAR 0 1
75664: PPUSH
75665: LD_INT 1
75667: PPUSH
75668: CALL_OW 287
75672: PUSH
75673: LD_INT 10
75675: MUL
75676: ST_TO_ADDR
// r := rate / 10 ;
75677: LD_ADDR_VAR 0 7
75681: PUSH
75682: LD_VAR 0 2
75686: PUSH
75687: LD_INT 10
75689: DIVREAL
75690: ST_TO_ADDR
// time := 1 1$00 ;
75691: LD_ADDR_VAR 0 8
75695: PUSH
75696: LD_INT 2100
75698: ST_TO_ADDR
// if amount < min then
75699: LD_VAR 0 9
75703: PUSH
75704: LD_VAR 0 3
75708: LESS
75709: IFFALSE 75727
// r := r * 2 else
75711: LD_ADDR_VAR 0 7
75715: PUSH
75716: LD_VAR 0 7
75720: PUSH
75721: LD_INT 2
75723: MUL
75724: ST_TO_ADDR
75725: GO 75753
// if amount > max then
75727: LD_VAR 0 9
75731: PUSH
75732: LD_VAR 0 4
75736: GREATER
75737: IFFALSE 75753
// r := r / 2 ;
75739: LD_ADDR_VAR 0 7
75743: PUSH
75744: LD_VAR 0 7
75748: PUSH
75749: LD_INT 2
75751: DIVREAL
75752: ST_TO_ADDR
// time := time / r ;
75753: LD_ADDR_VAR 0 8
75757: PUSH
75758: LD_VAR 0 8
75762: PUSH
75763: LD_VAR 0 7
75767: DIVREAL
75768: ST_TO_ADDR
// if time < 0 then
75769: LD_VAR 0 8
75773: PUSH
75774: LD_INT 0
75776: LESS
75777: IFFALSE 75794
// time := time * - 1 ;
75779: LD_ADDR_VAR 0 8
75783: PUSH
75784: LD_VAR 0 8
75788: PUSH
75789: LD_INT 1
75791: NEG
75792: MUL
75793: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75794: LD_VAR 0 8
75798: PUSH
75799: LD_INT 35
75801: PPUSH
75802: LD_INT 875
75804: PPUSH
75805: CALL_OW 12
75809: PLUS
75810: PPUSH
75811: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75815: LD_INT 1
75817: PPUSH
75818: LD_INT 5
75820: PPUSH
75821: CALL_OW 12
75825: PPUSH
75826: LD_VAR 0 1
75830: PPUSH
75831: LD_INT 1
75833: PPUSH
75834: CALL_OW 55
// end ;
75838: GO 75651
// end ;
75840: LD_VAR 0 5
75844: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75845: LD_INT 0
75847: PPUSH
75848: PPUSH
75849: PPUSH
75850: PPUSH
75851: PPUSH
75852: PPUSH
75853: PPUSH
75854: PPUSH
// if not turrets or not factories then
75855: LD_VAR 0 1
75859: NOT
75860: PUSH
75861: LD_VAR 0 2
75865: NOT
75866: OR
75867: IFFALSE 75871
// exit ;
75869: GO 76178
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75871: LD_ADDR_VAR 0 10
75875: PUSH
75876: LD_INT 5
75878: PUSH
75879: LD_INT 6
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: LD_INT 2
75888: PUSH
75889: LD_INT 4
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PUSH
75896: LD_INT 3
75898: PUSH
75899: LD_INT 5
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: PUSH
75906: EMPTY
75907: LIST
75908: LIST
75909: LIST
75910: PUSH
75911: LD_INT 24
75913: PUSH
75914: LD_INT 25
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: LD_INT 23
75923: PUSH
75924: LD_INT 27
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 42
75937: PUSH
75938: LD_INT 43
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 44
75947: PUSH
75948: LD_INT 46
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: LD_INT 45
75957: PUSH
75958: LD_INT 47
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: LIST
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: LIST
75974: ST_TO_ADDR
// result := [ ] ;
75975: LD_ADDR_VAR 0 3
75979: PUSH
75980: EMPTY
75981: ST_TO_ADDR
// for i in turrets do
75982: LD_ADDR_VAR 0 4
75986: PUSH
75987: LD_VAR 0 1
75991: PUSH
75992: FOR_IN
75993: IFFALSE 76176
// begin nat := GetNation ( i ) ;
75995: LD_ADDR_VAR 0 7
75999: PUSH
76000: LD_VAR 0 4
76004: PPUSH
76005: CALL_OW 248
76009: ST_TO_ADDR
// weapon := 0 ;
76010: LD_ADDR_VAR 0 8
76014: PUSH
76015: LD_INT 0
76017: ST_TO_ADDR
// if not nat then
76018: LD_VAR 0 7
76022: NOT
76023: IFFALSE 76027
// continue ;
76025: GO 75992
// for j in list [ nat ] do
76027: LD_ADDR_VAR 0 5
76031: PUSH
76032: LD_VAR 0 10
76036: PUSH
76037: LD_VAR 0 7
76041: ARRAY
76042: PUSH
76043: FOR_IN
76044: IFFALSE 76085
// if GetBWeapon ( i ) = j [ 1 ] then
76046: LD_VAR 0 4
76050: PPUSH
76051: CALL_OW 269
76055: PUSH
76056: LD_VAR 0 5
76060: PUSH
76061: LD_INT 1
76063: ARRAY
76064: EQUAL
76065: IFFALSE 76083
// begin weapon := j [ 2 ] ;
76067: LD_ADDR_VAR 0 8
76071: PUSH
76072: LD_VAR 0 5
76076: PUSH
76077: LD_INT 2
76079: ARRAY
76080: ST_TO_ADDR
// break ;
76081: GO 76085
// end ;
76083: GO 76043
76085: POP
76086: POP
// if not weapon then
76087: LD_VAR 0 8
76091: NOT
76092: IFFALSE 76096
// continue ;
76094: GO 75992
// for k in factories do
76096: LD_ADDR_VAR 0 6
76100: PUSH
76101: LD_VAR 0 2
76105: PUSH
76106: FOR_IN
76107: IFFALSE 76172
// begin weapons := AvailableWeaponList ( k ) ;
76109: LD_ADDR_VAR 0 9
76113: PUSH
76114: LD_VAR 0 6
76118: PPUSH
76119: CALL_OW 478
76123: ST_TO_ADDR
// if not weapons then
76124: LD_VAR 0 9
76128: NOT
76129: IFFALSE 76133
// continue ;
76131: GO 76106
// if weapon in weapons then
76133: LD_VAR 0 8
76137: PUSH
76138: LD_VAR 0 9
76142: IN
76143: IFFALSE 76170
// begin result := [ i , weapon ] ;
76145: LD_ADDR_VAR 0 3
76149: PUSH
76150: LD_VAR 0 4
76154: PUSH
76155: LD_VAR 0 8
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: ST_TO_ADDR
// exit ;
76164: POP
76165: POP
76166: POP
76167: POP
76168: GO 76178
// end ; end ;
76170: GO 76106
76172: POP
76173: POP
// end ;
76174: GO 75992
76176: POP
76177: POP
// end ;
76178: LD_VAR 0 3
76182: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76183: LD_INT 0
76185: PPUSH
// if not side or side > 8 then
76186: LD_VAR 0 3
76190: NOT
76191: PUSH
76192: LD_VAR 0 3
76196: PUSH
76197: LD_INT 8
76199: GREATER
76200: OR
76201: IFFALSE 76205
// exit ;
76203: GO 76264
// if not range then
76205: LD_VAR 0 4
76209: NOT
76210: IFFALSE 76221
// range := - 12 ;
76212: LD_ADDR_VAR 0 4
76216: PUSH
76217: LD_INT 12
76219: NEG
76220: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76221: LD_VAR 0 1
76225: PPUSH
76226: LD_VAR 0 2
76230: PPUSH
76231: LD_VAR 0 3
76235: PPUSH
76236: LD_VAR 0 4
76240: PPUSH
76241: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76245: LD_VAR 0 1
76249: PPUSH
76250: LD_VAR 0 2
76254: PPUSH
76255: LD_VAR 0 3
76259: PPUSH
76260: CALL_OW 331
// end ;
76264: LD_VAR 0 5
76268: RET
// export function Video ( mode ) ; begin
76269: LD_INT 0
76271: PPUSH
// ingame_video = mode ;
76272: LD_ADDR_OWVAR 52
76276: PUSH
76277: LD_VAR 0 1
76281: ST_TO_ADDR
// interface_hidden = mode ;
76282: LD_ADDR_OWVAR 54
76286: PUSH
76287: LD_VAR 0 1
76291: ST_TO_ADDR
// end ;
76292: LD_VAR 0 2
76296: RET
// export function Join ( array , element ) ; begin
76297: LD_INT 0
76299: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76300: LD_ADDR_VAR 0 3
76304: PUSH
76305: LD_VAR 0 1
76309: PPUSH
76310: LD_VAR 0 1
76314: PUSH
76315: LD_INT 1
76317: PLUS
76318: PPUSH
76319: LD_VAR 0 2
76323: PPUSH
76324: CALL_OW 1
76328: ST_TO_ADDR
// end ;
76329: LD_VAR 0 3
76333: RET
// export function JoinUnion ( array , element ) ; begin
76334: LD_INT 0
76336: PPUSH
// result := array union element ;
76337: LD_ADDR_VAR 0 3
76341: PUSH
76342: LD_VAR 0 1
76346: PUSH
76347: LD_VAR 0 2
76351: UNION
76352: ST_TO_ADDR
// end ;
76353: LD_VAR 0 3
76357: RET
// export function GetBehemoths ( side ) ; begin
76358: LD_INT 0
76360: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76361: LD_ADDR_VAR 0 2
76365: PUSH
76366: LD_INT 22
76368: PUSH
76369: LD_VAR 0 1
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: PUSH
76378: LD_INT 31
76380: PUSH
76381: LD_INT 25
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PPUSH
76392: CALL_OW 69
76396: ST_TO_ADDR
// end ;
76397: LD_VAR 0 2
76401: RET
// export function Shuffle ( array ) ; var i , index ; begin
76402: LD_INT 0
76404: PPUSH
76405: PPUSH
76406: PPUSH
// result := [ ] ;
76407: LD_ADDR_VAR 0 2
76411: PUSH
76412: EMPTY
76413: ST_TO_ADDR
// if not array then
76414: LD_VAR 0 1
76418: NOT
76419: IFFALSE 76423
// exit ;
76421: GO 76522
// Randomize ;
76423: CALL_OW 10
// for i = array downto 1 do
76427: LD_ADDR_VAR 0 3
76431: PUSH
76432: DOUBLE
76433: LD_VAR 0 1
76437: INC
76438: ST_TO_ADDR
76439: LD_INT 1
76441: PUSH
76442: FOR_DOWNTO
76443: IFFALSE 76520
// begin index := rand ( 1 , array ) ;
76445: LD_ADDR_VAR 0 4
76449: PUSH
76450: LD_INT 1
76452: PPUSH
76453: LD_VAR 0 1
76457: PPUSH
76458: CALL_OW 12
76462: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76463: LD_ADDR_VAR 0 2
76467: PUSH
76468: LD_VAR 0 2
76472: PPUSH
76473: LD_VAR 0 2
76477: PUSH
76478: LD_INT 1
76480: PLUS
76481: PPUSH
76482: LD_VAR 0 1
76486: PUSH
76487: LD_VAR 0 4
76491: ARRAY
76492: PPUSH
76493: CALL_OW 2
76497: ST_TO_ADDR
// array := Delete ( array , index ) ;
76498: LD_ADDR_VAR 0 1
76502: PUSH
76503: LD_VAR 0 1
76507: PPUSH
76508: LD_VAR 0 4
76512: PPUSH
76513: CALL_OW 3
76517: ST_TO_ADDR
// end ;
76518: GO 76442
76520: POP
76521: POP
// end ;
76522: LD_VAR 0 2
76526: RET
// export function GetBaseMaterials ( base ) ; begin
76527: LD_INT 0
76529: PPUSH
// result := [ 0 , 0 , 0 ] ;
76530: LD_ADDR_VAR 0 2
76534: PUSH
76535: LD_INT 0
76537: PUSH
76538: LD_INT 0
76540: PUSH
76541: LD_INT 0
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: LIST
76548: ST_TO_ADDR
// if not base then
76549: LD_VAR 0 1
76553: NOT
76554: IFFALSE 76558
// exit ;
76556: GO 76607
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76558: LD_ADDR_VAR 0 2
76562: PUSH
76563: LD_VAR 0 1
76567: PPUSH
76568: LD_INT 1
76570: PPUSH
76571: CALL_OW 275
76575: PUSH
76576: LD_VAR 0 1
76580: PPUSH
76581: LD_INT 2
76583: PPUSH
76584: CALL_OW 275
76588: PUSH
76589: LD_VAR 0 1
76593: PPUSH
76594: LD_INT 3
76596: PPUSH
76597: CALL_OW 275
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: LIST
76606: ST_TO_ADDR
// end ;
76607: LD_VAR 0 2
76611: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76612: LD_INT 0
76614: PPUSH
76615: PPUSH
// result := array ;
76616: LD_ADDR_VAR 0 3
76620: PUSH
76621: LD_VAR 0 1
76625: ST_TO_ADDR
// if size >= result then
76626: LD_VAR 0 2
76630: PUSH
76631: LD_VAR 0 3
76635: GREATEREQUAL
76636: IFFALSE 76640
// exit ;
76638: GO 76690
// if size then
76640: LD_VAR 0 2
76644: IFFALSE 76690
// for i := array downto size do
76646: LD_ADDR_VAR 0 4
76650: PUSH
76651: DOUBLE
76652: LD_VAR 0 1
76656: INC
76657: ST_TO_ADDR
76658: LD_VAR 0 2
76662: PUSH
76663: FOR_DOWNTO
76664: IFFALSE 76688
// result := Delete ( result , result ) ;
76666: LD_ADDR_VAR 0 3
76670: PUSH
76671: LD_VAR 0 3
76675: PPUSH
76676: LD_VAR 0 3
76680: PPUSH
76681: CALL_OW 3
76685: ST_TO_ADDR
76686: GO 76663
76688: POP
76689: POP
// end ;
76690: LD_VAR 0 3
76694: RET
// export function ComExit ( unit ) ; var tmp ; begin
76695: LD_INT 0
76697: PPUSH
76698: PPUSH
// if not IsInUnit ( unit ) then
76699: LD_VAR 0 1
76703: PPUSH
76704: CALL_OW 310
76708: NOT
76709: IFFALSE 76713
// exit ;
76711: GO 76773
// tmp := IsInUnit ( unit ) ;
76713: LD_ADDR_VAR 0 3
76717: PUSH
76718: LD_VAR 0 1
76722: PPUSH
76723: CALL_OW 310
76727: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76728: LD_VAR 0 3
76732: PPUSH
76733: CALL_OW 247
76737: PUSH
76738: LD_INT 2
76740: EQUAL
76741: IFFALSE 76754
// ComExitVehicle ( unit ) else
76743: LD_VAR 0 1
76747: PPUSH
76748: CALL_OW 121
76752: GO 76763
// ComExitBuilding ( unit ) ;
76754: LD_VAR 0 1
76758: PPUSH
76759: CALL_OW 122
// result := tmp ;
76763: LD_ADDR_VAR 0 2
76767: PUSH
76768: LD_VAR 0 3
76772: ST_TO_ADDR
// end ;
76773: LD_VAR 0 2
76777: RET
// export function ComExitAll ( units ) ; var i ; begin
76778: LD_INT 0
76780: PPUSH
76781: PPUSH
// if not units then
76782: LD_VAR 0 1
76786: NOT
76787: IFFALSE 76791
// exit ;
76789: GO 76817
// for i in units do
76791: LD_ADDR_VAR 0 3
76795: PUSH
76796: LD_VAR 0 1
76800: PUSH
76801: FOR_IN
76802: IFFALSE 76815
// ComExit ( i ) ;
76804: LD_VAR 0 3
76808: PPUSH
76809: CALL 76695 0 1
76813: GO 76801
76815: POP
76816: POP
// end ;
76817: LD_VAR 0 2
76821: RET
// export function ResetHc ; begin
76822: LD_INT 0
76824: PPUSH
// InitHc ;
76825: CALL_OW 19
// hc_importance := 0 ;
76829: LD_ADDR_OWVAR 32
76833: PUSH
76834: LD_INT 0
76836: ST_TO_ADDR
// end ;
76837: LD_VAR 0 1
76841: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76842: LD_INT 0
76844: PPUSH
76845: PPUSH
76846: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76847: LD_ADDR_VAR 0 6
76851: PUSH
76852: LD_VAR 0 1
76856: PUSH
76857: LD_VAR 0 3
76861: PLUS
76862: PUSH
76863: LD_INT 2
76865: DIV
76866: ST_TO_ADDR
// if _x < 0 then
76867: LD_VAR 0 6
76871: PUSH
76872: LD_INT 0
76874: LESS
76875: IFFALSE 76892
// _x := _x * - 1 ;
76877: LD_ADDR_VAR 0 6
76881: PUSH
76882: LD_VAR 0 6
76886: PUSH
76887: LD_INT 1
76889: NEG
76890: MUL
76891: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76892: LD_ADDR_VAR 0 7
76896: PUSH
76897: LD_VAR 0 2
76901: PUSH
76902: LD_VAR 0 4
76906: PLUS
76907: PUSH
76908: LD_INT 2
76910: DIV
76911: ST_TO_ADDR
// if _y < 0 then
76912: LD_VAR 0 7
76916: PUSH
76917: LD_INT 0
76919: LESS
76920: IFFALSE 76937
// _y := _y * - 1 ;
76922: LD_ADDR_VAR 0 7
76926: PUSH
76927: LD_VAR 0 7
76931: PUSH
76932: LD_INT 1
76934: NEG
76935: MUL
76936: ST_TO_ADDR
// result := [ _x , _y ] ;
76937: LD_ADDR_VAR 0 5
76941: PUSH
76942: LD_VAR 0 6
76946: PUSH
76947: LD_VAR 0 7
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: ST_TO_ADDR
// end ;
76956: LD_VAR 0 5
76960: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76961: LD_INT 0
76963: PPUSH
76964: PPUSH
76965: PPUSH
76966: PPUSH
// task := GetTaskList ( unit ) ;
76967: LD_ADDR_VAR 0 7
76971: PUSH
76972: LD_VAR 0 1
76976: PPUSH
76977: CALL_OW 437
76981: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76982: LD_VAR 0 7
76986: NOT
76987: PUSH
76988: LD_VAR 0 1
76992: PPUSH
76993: LD_VAR 0 2
76997: PPUSH
76998: CALL_OW 308
77002: NOT
77003: AND
77004: IFFALSE 77008
// exit ;
77006: GO 77126
// if IsInArea ( unit , area ) then
77008: LD_VAR 0 1
77012: PPUSH
77013: LD_VAR 0 2
77017: PPUSH
77018: CALL_OW 308
77022: IFFALSE 77040
// begin ComMoveToArea ( unit , goAway ) ;
77024: LD_VAR 0 1
77028: PPUSH
77029: LD_VAR 0 3
77033: PPUSH
77034: CALL_OW 113
// exit ;
77038: GO 77126
// end ; if task [ 1 ] [ 1 ] <> M then
77040: LD_VAR 0 7
77044: PUSH
77045: LD_INT 1
77047: ARRAY
77048: PUSH
77049: LD_INT 1
77051: ARRAY
77052: PUSH
77053: LD_STRING M
77055: NONEQUAL
77056: IFFALSE 77060
// exit ;
77058: GO 77126
// x := task [ 1 ] [ 2 ] ;
77060: LD_ADDR_VAR 0 5
77064: PUSH
77065: LD_VAR 0 7
77069: PUSH
77070: LD_INT 1
77072: ARRAY
77073: PUSH
77074: LD_INT 2
77076: ARRAY
77077: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77078: LD_ADDR_VAR 0 6
77082: PUSH
77083: LD_VAR 0 7
77087: PUSH
77088: LD_INT 1
77090: ARRAY
77091: PUSH
77092: LD_INT 3
77094: ARRAY
77095: ST_TO_ADDR
// if InArea ( x , y , area ) then
77096: LD_VAR 0 5
77100: PPUSH
77101: LD_VAR 0 6
77105: PPUSH
77106: LD_VAR 0 2
77110: PPUSH
77111: CALL_OW 309
77115: IFFALSE 77126
// ComStop ( unit ) ;
77117: LD_VAR 0 1
77121: PPUSH
77122: CALL_OW 141
// end ;
77126: LD_VAR 0 4
77130: RET
// export function Abs ( value ) ; begin
77131: LD_INT 0
77133: PPUSH
// result := value ;
77134: LD_ADDR_VAR 0 2
77138: PUSH
77139: LD_VAR 0 1
77143: ST_TO_ADDR
// if value < 0 then
77144: LD_VAR 0 1
77148: PUSH
77149: LD_INT 0
77151: LESS
77152: IFFALSE 77169
// result := value * - 1 ;
77154: LD_ADDR_VAR 0 2
77158: PUSH
77159: LD_VAR 0 1
77163: PUSH
77164: LD_INT 1
77166: NEG
77167: MUL
77168: ST_TO_ADDR
// end ;
77169: LD_VAR 0 2
77173: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77174: LD_INT 0
77176: PPUSH
77177: PPUSH
77178: PPUSH
77179: PPUSH
77180: PPUSH
77181: PPUSH
77182: PPUSH
77183: PPUSH
// if not unit or not building then
77184: LD_VAR 0 1
77188: NOT
77189: PUSH
77190: LD_VAR 0 2
77194: NOT
77195: OR
77196: IFFALSE 77200
// exit ;
77198: GO 77426
// x := GetX ( building ) ;
77200: LD_ADDR_VAR 0 4
77204: PUSH
77205: LD_VAR 0 2
77209: PPUSH
77210: CALL_OW 250
77214: ST_TO_ADDR
// y := GetY ( building ) ;
77215: LD_ADDR_VAR 0 6
77219: PUSH
77220: LD_VAR 0 2
77224: PPUSH
77225: CALL_OW 251
77229: ST_TO_ADDR
// d := GetDir ( building ) ;
77230: LD_ADDR_VAR 0 8
77234: PUSH
77235: LD_VAR 0 2
77239: PPUSH
77240: CALL_OW 254
77244: ST_TO_ADDR
// r := 4 ;
77245: LD_ADDR_VAR 0 9
77249: PUSH
77250: LD_INT 4
77252: ST_TO_ADDR
// for i := 1 to 5 do
77253: LD_ADDR_VAR 0 10
77257: PUSH
77258: DOUBLE
77259: LD_INT 1
77261: DEC
77262: ST_TO_ADDR
77263: LD_INT 5
77265: PUSH
77266: FOR_TO
77267: IFFALSE 77424
// begin _x := ShiftX ( x , d , r + i ) ;
77269: LD_ADDR_VAR 0 5
77273: PUSH
77274: LD_VAR 0 4
77278: PPUSH
77279: LD_VAR 0 8
77283: PPUSH
77284: LD_VAR 0 9
77288: PUSH
77289: LD_VAR 0 10
77293: PLUS
77294: PPUSH
77295: CALL_OW 272
77299: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77300: LD_ADDR_VAR 0 7
77304: PUSH
77305: LD_VAR 0 6
77309: PPUSH
77310: LD_VAR 0 8
77314: PPUSH
77315: LD_VAR 0 9
77319: PUSH
77320: LD_VAR 0 10
77324: PLUS
77325: PPUSH
77326: CALL_OW 273
77330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77331: LD_VAR 0 5
77335: PPUSH
77336: LD_VAR 0 7
77340: PPUSH
77341: CALL_OW 488
77345: PUSH
77346: LD_VAR 0 5
77350: PPUSH
77351: LD_VAR 0 7
77355: PPUSH
77356: CALL_OW 428
77360: PPUSH
77361: CALL_OW 247
77365: PUSH
77366: LD_INT 3
77368: PUSH
77369: LD_INT 2
77371: PUSH
77372: EMPTY
77373: LIST
77374: LIST
77375: IN
77376: NOT
77377: AND
77378: IFFALSE 77422
// begin ComMoveXY ( unit , _x , _y ) ;
77380: LD_VAR 0 1
77384: PPUSH
77385: LD_VAR 0 5
77389: PPUSH
77390: LD_VAR 0 7
77394: PPUSH
77395: CALL_OW 111
// result := [ _x , _y ] ;
77399: LD_ADDR_VAR 0 3
77403: PUSH
77404: LD_VAR 0 5
77408: PUSH
77409: LD_VAR 0 7
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: ST_TO_ADDR
// exit ;
77418: POP
77419: POP
77420: GO 77426
// end ; end ;
77422: GO 77266
77424: POP
77425: POP
// end ;
77426: LD_VAR 0 3
77430: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77431: LD_INT 0
77433: PPUSH
77434: PPUSH
77435: PPUSH
// result := 0 ;
77436: LD_ADDR_VAR 0 3
77440: PUSH
77441: LD_INT 0
77443: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77444: LD_VAR 0 1
77448: PUSH
77449: LD_INT 0
77451: LESS
77452: PUSH
77453: LD_VAR 0 1
77457: PUSH
77458: LD_INT 8
77460: GREATER
77461: OR
77462: PUSH
77463: LD_VAR 0 2
77467: PUSH
77468: LD_INT 0
77470: LESS
77471: OR
77472: PUSH
77473: LD_VAR 0 2
77477: PUSH
77478: LD_INT 8
77480: GREATER
77481: OR
77482: IFFALSE 77486
// exit ;
77484: GO 77561
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77486: LD_ADDR_VAR 0 4
77490: PUSH
77491: LD_INT 22
77493: PUSH
77494: LD_VAR 0 2
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PPUSH
77503: CALL_OW 69
77507: PUSH
77508: FOR_IN
77509: IFFALSE 77559
// begin un := UnitShoot ( i ) ;
77511: LD_ADDR_VAR 0 5
77515: PUSH
77516: LD_VAR 0 4
77520: PPUSH
77521: CALL_OW 504
77525: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77526: LD_VAR 0 5
77530: PPUSH
77531: CALL_OW 255
77535: PUSH
77536: LD_VAR 0 1
77540: EQUAL
77541: IFFALSE 77557
// begin result := un ;
77543: LD_ADDR_VAR 0 3
77547: PUSH
77548: LD_VAR 0 5
77552: ST_TO_ADDR
// exit ;
77553: POP
77554: POP
77555: GO 77561
// end ; end ;
77557: GO 77508
77559: POP
77560: POP
// end ;
77561: LD_VAR 0 3
77565: RET
// export function GetCargoBay ( units ) ; begin
77566: LD_INT 0
77568: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77569: LD_ADDR_VAR 0 2
77573: PUSH
77574: LD_VAR 0 1
77578: PPUSH
77579: LD_INT 2
77581: PUSH
77582: LD_INT 34
77584: PUSH
77585: LD_INT 12
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: PUSH
77592: LD_INT 34
77594: PUSH
77595: LD_INT 51
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: LD_INT 34
77604: PUSH
77605: LD_INT 32
77607: PUSH
77608: EMPTY
77609: LIST
77610: LIST
77611: PUSH
77612: LD_INT 34
77614: PUSH
77615: LD_INT 89
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: LIST
77626: LIST
77627: LIST
77628: PPUSH
77629: CALL_OW 72
77633: ST_TO_ADDR
// end ;
77634: LD_VAR 0 2
77638: RET
// export function Negate ( value ) ; begin
77639: LD_INT 0
77641: PPUSH
// result := not value ;
77642: LD_ADDR_VAR 0 2
77646: PUSH
77647: LD_VAR 0 1
77651: NOT
77652: ST_TO_ADDR
// end ;
77653: LD_VAR 0 2
77657: RET
// export function Inc ( value ) ; begin
77658: LD_INT 0
77660: PPUSH
// result := value + 1 ;
77661: LD_ADDR_VAR 0 2
77665: PUSH
77666: LD_VAR 0 1
77670: PUSH
77671: LD_INT 1
77673: PLUS
77674: ST_TO_ADDR
// end ;
77675: LD_VAR 0 2
77679: RET
// export function Dec ( value ) ; begin
77680: LD_INT 0
77682: PPUSH
// result := value - 1 ;
77683: LD_ADDR_VAR 0 2
77687: PUSH
77688: LD_VAR 0 1
77692: PUSH
77693: LD_INT 1
77695: MINUS
77696: ST_TO_ADDR
// end ;
77697: LD_VAR 0 2
77701: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77702: LD_INT 0
77704: PPUSH
77705: PPUSH
77706: PPUSH
77707: PPUSH
77708: PPUSH
77709: PPUSH
77710: PPUSH
77711: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77712: LD_VAR 0 1
77716: PPUSH
77717: LD_VAR 0 2
77721: PPUSH
77722: CALL_OW 488
77726: NOT
77727: PUSH
77728: LD_VAR 0 3
77732: PPUSH
77733: LD_VAR 0 4
77737: PPUSH
77738: CALL_OW 488
77742: NOT
77743: OR
77744: IFFALSE 77757
// begin result := - 1 ;
77746: LD_ADDR_VAR 0 5
77750: PUSH
77751: LD_INT 1
77753: NEG
77754: ST_TO_ADDR
// exit ;
77755: GO 77992
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77757: LD_ADDR_VAR 0 12
77761: PUSH
77762: LD_VAR 0 1
77766: PPUSH
77767: LD_VAR 0 2
77771: PPUSH
77772: LD_VAR 0 3
77776: PPUSH
77777: LD_VAR 0 4
77781: PPUSH
77782: CALL 76842 0 4
77786: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77787: LD_ADDR_VAR 0 11
77791: PUSH
77792: LD_VAR 0 1
77796: PPUSH
77797: LD_VAR 0 2
77801: PPUSH
77802: LD_VAR 0 12
77806: PUSH
77807: LD_INT 1
77809: ARRAY
77810: PPUSH
77811: LD_VAR 0 12
77815: PUSH
77816: LD_INT 2
77818: ARRAY
77819: PPUSH
77820: CALL_OW 298
77824: ST_TO_ADDR
// distance := 9999 ;
77825: LD_ADDR_VAR 0 10
77829: PUSH
77830: LD_INT 9999
77832: ST_TO_ADDR
// for i := 0 to 5 do
77833: LD_ADDR_VAR 0 6
77837: PUSH
77838: DOUBLE
77839: LD_INT 0
77841: DEC
77842: ST_TO_ADDR
77843: LD_INT 5
77845: PUSH
77846: FOR_TO
77847: IFFALSE 77990
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77849: LD_ADDR_VAR 0 7
77853: PUSH
77854: LD_VAR 0 1
77858: PPUSH
77859: LD_VAR 0 6
77863: PPUSH
77864: LD_VAR 0 11
77868: PPUSH
77869: CALL_OW 272
77873: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77874: LD_ADDR_VAR 0 8
77878: PUSH
77879: LD_VAR 0 2
77883: PPUSH
77884: LD_VAR 0 6
77888: PPUSH
77889: LD_VAR 0 11
77893: PPUSH
77894: CALL_OW 273
77898: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77899: LD_VAR 0 7
77903: PPUSH
77904: LD_VAR 0 8
77908: PPUSH
77909: CALL_OW 488
77913: NOT
77914: IFFALSE 77918
// continue ;
77916: GO 77846
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77918: LD_ADDR_VAR 0 9
77922: PUSH
77923: LD_VAR 0 12
77927: PUSH
77928: LD_INT 1
77930: ARRAY
77931: PPUSH
77932: LD_VAR 0 12
77936: PUSH
77937: LD_INT 2
77939: ARRAY
77940: PPUSH
77941: LD_VAR 0 7
77945: PPUSH
77946: LD_VAR 0 8
77950: PPUSH
77951: CALL_OW 298
77955: ST_TO_ADDR
// if tmp < distance then
77956: LD_VAR 0 9
77960: PUSH
77961: LD_VAR 0 10
77965: LESS
77966: IFFALSE 77988
// begin result := i ;
77968: LD_ADDR_VAR 0 5
77972: PUSH
77973: LD_VAR 0 6
77977: ST_TO_ADDR
// distance := tmp ;
77978: LD_ADDR_VAR 0 10
77982: PUSH
77983: LD_VAR 0 9
77987: ST_TO_ADDR
// end ; end ;
77988: GO 77846
77990: POP
77991: POP
// end ;
77992: LD_VAR 0 5
77996: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77997: LD_INT 0
77999: PPUSH
78000: PPUSH
// if not driver or not IsInUnit ( driver ) then
78001: LD_VAR 0 1
78005: NOT
78006: PUSH
78007: LD_VAR 0 1
78011: PPUSH
78012: CALL_OW 310
78016: NOT
78017: OR
78018: IFFALSE 78022
// exit ;
78020: GO 78112
// vehicle := IsInUnit ( driver ) ;
78022: LD_ADDR_VAR 0 3
78026: PUSH
78027: LD_VAR 0 1
78031: PPUSH
78032: CALL_OW 310
78036: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78037: LD_VAR 0 1
78041: PPUSH
78042: LD_STRING \
78044: PUSH
78045: LD_INT 0
78047: PUSH
78048: LD_INT 0
78050: PUSH
78051: LD_INT 0
78053: PUSH
78054: LD_INT 0
78056: PUSH
78057: LD_INT 0
78059: PUSH
78060: LD_INT 0
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: LIST
78070: LIST
78071: PUSH
78072: LD_STRING E
78074: PUSH
78075: LD_INT 0
78077: PUSH
78078: LD_INT 0
78080: PUSH
78081: LD_VAR 0 3
78085: PUSH
78086: LD_INT 0
78088: PUSH
78089: LD_INT 0
78091: PUSH
78092: LD_INT 0
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: LIST
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PPUSH
78108: CALL_OW 446
// end ;
78112: LD_VAR 0 2
78116: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78117: LD_INT 0
78119: PPUSH
78120: PPUSH
// if not driver or not IsInUnit ( driver ) then
78121: LD_VAR 0 1
78125: NOT
78126: PUSH
78127: LD_VAR 0 1
78131: PPUSH
78132: CALL_OW 310
78136: NOT
78137: OR
78138: IFFALSE 78142
// exit ;
78140: GO 78232
// vehicle := IsInUnit ( driver ) ;
78142: LD_ADDR_VAR 0 3
78146: PUSH
78147: LD_VAR 0 1
78151: PPUSH
78152: CALL_OW 310
78156: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78157: LD_VAR 0 1
78161: PPUSH
78162: LD_STRING \
78164: PUSH
78165: LD_INT 0
78167: PUSH
78168: LD_INT 0
78170: PUSH
78171: LD_INT 0
78173: PUSH
78174: LD_INT 0
78176: PUSH
78177: LD_INT 0
78179: PUSH
78180: LD_INT 0
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: PUSH
78192: LD_STRING E
78194: PUSH
78195: LD_INT 0
78197: PUSH
78198: LD_INT 0
78200: PUSH
78201: LD_VAR 0 3
78205: PUSH
78206: LD_INT 0
78208: PUSH
78209: LD_INT 0
78211: PUSH
78212: LD_INT 0
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: LIST
78222: LIST
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PPUSH
78228: CALL_OW 447
// end ;
78232: LD_VAR 0 2
78236: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78237: LD_INT 0
78239: PPUSH
78240: PPUSH
78241: PPUSH
// tmp := [ ] ;
78242: LD_ADDR_VAR 0 5
78246: PUSH
78247: EMPTY
78248: ST_TO_ADDR
// for i in units do
78249: LD_ADDR_VAR 0 4
78253: PUSH
78254: LD_VAR 0 1
78258: PUSH
78259: FOR_IN
78260: IFFALSE 78298
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78262: LD_ADDR_VAR 0 5
78266: PUSH
78267: LD_VAR 0 5
78271: PPUSH
78272: LD_VAR 0 5
78276: PUSH
78277: LD_INT 1
78279: PLUS
78280: PPUSH
78281: LD_VAR 0 4
78285: PPUSH
78286: CALL_OW 256
78290: PPUSH
78291: CALL_OW 2
78295: ST_TO_ADDR
78296: GO 78259
78298: POP
78299: POP
// if not tmp then
78300: LD_VAR 0 5
78304: NOT
78305: IFFALSE 78309
// exit ;
78307: GO 78357
// if asc then
78309: LD_VAR 0 2
78313: IFFALSE 78337
// result := SortListByListAsc ( units , tmp ) else
78315: LD_ADDR_VAR 0 3
78319: PUSH
78320: LD_VAR 0 1
78324: PPUSH
78325: LD_VAR 0 5
78329: PPUSH
78330: CALL_OW 76
78334: ST_TO_ADDR
78335: GO 78357
// result := SortListByListDesc ( units , tmp ) ;
78337: LD_ADDR_VAR 0 3
78341: PUSH
78342: LD_VAR 0 1
78346: PPUSH
78347: LD_VAR 0 5
78351: PPUSH
78352: CALL_OW 77
78356: ST_TO_ADDR
// end ;
78357: LD_VAR 0 3
78361: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78362: LD_INT 0
78364: PPUSH
78365: PPUSH
// task := GetTaskList ( mech ) ;
78366: LD_ADDR_VAR 0 4
78370: PUSH
78371: LD_VAR 0 1
78375: PPUSH
78376: CALL_OW 437
78380: ST_TO_ADDR
// if not task then
78381: LD_VAR 0 4
78385: NOT
78386: IFFALSE 78390
// exit ;
78388: GO 78432
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78390: LD_ADDR_VAR 0 3
78394: PUSH
78395: LD_VAR 0 4
78399: PUSH
78400: LD_INT 1
78402: ARRAY
78403: PUSH
78404: LD_INT 1
78406: ARRAY
78407: PUSH
78408: LD_STRING r
78410: EQUAL
78411: PUSH
78412: LD_VAR 0 4
78416: PUSH
78417: LD_INT 1
78419: ARRAY
78420: PUSH
78421: LD_INT 4
78423: ARRAY
78424: PUSH
78425: LD_VAR 0 2
78429: EQUAL
78430: AND
78431: ST_TO_ADDR
// end ;
78432: LD_VAR 0 3
78436: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78437: LD_INT 0
78439: PPUSH
// SetDir ( unit , d ) ;
78440: LD_VAR 0 1
78444: PPUSH
78445: LD_VAR 0 4
78449: PPUSH
78450: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78454: LD_VAR 0 1
78458: PPUSH
78459: LD_VAR 0 2
78463: PPUSH
78464: LD_VAR 0 3
78468: PPUSH
78469: LD_VAR 0 5
78473: PPUSH
78474: CALL_OW 48
// end ;
78478: LD_VAR 0 6
78482: RET
// export function ToNaturalNumber ( number ) ; begin
78483: LD_INT 0
78485: PPUSH
// result := number div 1 ;
78486: LD_ADDR_VAR 0 2
78490: PUSH
78491: LD_VAR 0 1
78495: PUSH
78496: LD_INT 1
78498: DIV
78499: ST_TO_ADDR
// if number < 0 then
78500: LD_VAR 0 1
78504: PUSH
78505: LD_INT 0
78507: LESS
78508: IFFALSE 78518
// result := 0 ;
78510: LD_ADDR_VAR 0 2
78514: PUSH
78515: LD_INT 0
78517: ST_TO_ADDR
// end ;
78518: LD_VAR 0 2
78522: RET
// export function SortByClass ( units , class ) ; var un ; begin
78523: LD_INT 0
78525: PPUSH
78526: PPUSH
// if not units or not class then
78527: LD_VAR 0 1
78531: NOT
78532: PUSH
78533: LD_VAR 0 2
78537: NOT
78538: OR
78539: IFFALSE 78543
// exit ;
78541: GO 78638
// result := [ ] ;
78543: LD_ADDR_VAR 0 3
78547: PUSH
78548: EMPTY
78549: ST_TO_ADDR
// for un in units do
78550: LD_ADDR_VAR 0 4
78554: PUSH
78555: LD_VAR 0 1
78559: PUSH
78560: FOR_IN
78561: IFFALSE 78636
// if GetClass ( un ) = class then
78563: LD_VAR 0 4
78567: PPUSH
78568: CALL_OW 257
78572: PUSH
78573: LD_VAR 0 2
78577: EQUAL
78578: IFFALSE 78605
// result := Insert ( result , 1 , un ) else
78580: LD_ADDR_VAR 0 3
78584: PUSH
78585: LD_VAR 0 3
78589: PPUSH
78590: LD_INT 1
78592: PPUSH
78593: LD_VAR 0 4
78597: PPUSH
78598: CALL_OW 2
78602: ST_TO_ADDR
78603: GO 78634
// result := Replace ( result , result + 1 , un ) ;
78605: LD_ADDR_VAR 0 3
78609: PUSH
78610: LD_VAR 0 3
78614: PPUSH
78615: LD_VAR 0 3
78619: PUSH
78620: LD_INT 1
78622: PLUS
78623: PPUSH
78624: LD_VAR 0 4
78628: PPUSH
78629: CALL_OW 1
78633: ST_TO_ADDR
78634: GO 78560
78636: POP
78637: POP
// end ;
78638: LD_VAR 0 3
78642: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78643: LD_INT 0
78645: PPUSH
78646: PPUSH
78647: PPUSH
78648: PPUSH
78649: PPUSH
78650: PPUSH
78651: PPUSH
// result := [ ] ;
78652: LD_ADDR_VAR 0 4
78656: PUSH
78657: EMPTY
78658: ST_TO_ADDR
// if x - r < 0 then
78659: LD_VAR 0 1
78663: PUSH
78664: LD_VAR 0 3
78668: MINUS
78669: PUSH
78670: LD_INT 0
78672: LESS
78673: IFFALSE 78685
// min_x := 0 else
78675: LD_ADDR_VAR 0 8
78679: PUSH
78680: LD_INT 0
78682: ST_TO_ADDR
78683: GO 78701
// min_x := x - r ;
78685: LD_ADDR_VAR 0 8
78689: PUSH
78690: LD_VAR 0 1
78694: PUSH
78695: LD_VAR 0 3
78699: MINUS
78700: ST_TO_ADDR
// if y - r < 0 then
78701: LD_VAR 0 2
78705: PUSH
78706: LD_VAR 0 3
78710: MINUS
78711: PUSH
78712: LD_INT 0
78714: LESS
78715: IFFALSE 78727
// min_y := 0 else
78717: LD_ADDR_VAR 0 7
78721: PUSH
78722: LD_INT 0
78724: ST_TO_ADDR
78725: GO 78743
// min_y := y - r ;
78727: LD_ADDR_VAR 0 7
78731: PUSH
78732: LD_VAR 0 2
78736: PUSH
78737: LD_VAR 0 3
78741: MINUS
78742: ST_TO_ADDR
// max_x := x + r ;
78743: LD_ADDR_VAR 0 9
78747: PUSH
78748: LD_VAR 0 1
78752: PUSH
78753: LD_VAR 0 3
78757: PLUS
78758: ST_TO_ADDR
// max_y := y + r ;
78759: LD_ADDR_VAR 0 10
78763: PUSH
78764: LD_VAR 0 2
78768: PUSH
78769: LD_VAR 0 3
78773: PLUS
78774: ST_TO_ADDR
// for _x = min_x to max_x do
78775: LD_ADDR_VAR 0 5
78779: PUSH
78780: DOUBLE
78781: LD_VAR 0 8
78785: DEC
78786: ST_TO_ADDR
78787: LD_VAR 0 9
78791: PUSH
78792: FOR_TO
78793: IFFALSE 78894
// for _y = min_y to max_y do
78795: LD_ADDR_VAR 0 6
78799: PUSH
78800: DOUBLE
78801: LD_VAR 0 7
78805: DEC
78806: ST_TO_ADDR
78807: LD_VAR 0 10
78811: PUSH
78812: FOR_TO
78813: IFFALSE 78890
// begin if not ValidHex ( _x , _y ) then
78815: LD_VAR 0 5
78819: PPUSH
78820: LD_VAR 0 6
78824: PPUSH
78825: CALL_OW 488
78829: NOT
78830: IFFALSE 78834
// continue ;
78832: GO 78812
// if GetResourceTypeXY ( _x , _y ) then
78834: LD_VAR 0 5
78838: PPUSH
78839: LD_VAR 0 6
78843: PPUSH
78844: CALL_OW 283
78848: IFFALSE 78888
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78850: LD_ADDR_VAR 0 4
78854: PUSH
78855: LD_VAR 0 4
78859: PPUSH
78860: LD_VAR 0 4
78864: PUSH
78865: LD_INT 1
78867: PLUS
78868: PPUSH
78869: LD_VAR 0 5
78873: PUSH
78874: LD_VAR 0 6
78878: PUSH
78879: EMPTY
78880: LIST
78881: LIST
78882: PPUSH
78883: CALL_OW 1
78887: ST_TO_ADDR
// end ;
78888: GO 78812
78890: POP
78891: POP
78892: GO 78792
78894: POP
78895: POP
// end ;
78896: LD_VAR 0 4
78900: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78901: LD_INT 0
78903: PPUSH
78904: PPUSH
78905: PPUSH
78906: PPUSH
78907: PPUSH
78908: PPUSH
78909: PPUSH
78910: PPUSH
// if not units then
78911: LD_VAR 0 1
78915: NOT
78916: IFFALSE 78920
// exit ;
78918: GO 79444
// result := UnitFilter ( units , [ f_ok ] ) ;
78920: LD_ADDR_VAR 0 3
78924: PUSH
78925: LD_VAR 0 1
78929: PPUSH
78930: LD_INT 50
78932: PUSH
78933: EMPTY
78934: LIST
78935: PPUSH
78936: CALL_OW 72
78940: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78941: LD_ADDR_VAR 0 8
78945: PUSH
78946: LD_VAR 0 1
78950: PUSH
78951: LD_INT 1
78953: ARRAY
78954: PPUSH
78955: CALL_OW 255
78959: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78960: LD_ADDR_VAR 0 10
78964: PUSH
78965: LD_INT 29
78967: PUSH
78968: LD_INT 91
78970: PUSH
78971: LD_INT 49
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: LIST
78978: ST_TO_ADDR
// if not result then
78979: LD_VAR 0 3
78983: NOT
78984: IFFALSE 78988
// exit ;
78986: GO 79444
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78988: LD_ADDR_VAR 0 5
78992: PUSH
78993: LD_INT 81
78995: PUSH
78996: LD_VAR 0 8
79000: PUSH
79001: EMPTY
79002: LIST
79003: LIST
79004: PPUSH
79005: CALL_OW 69
79009: ST_TO_ADDR
// for i in result do
79010: LD_ADDR_VAR 0 4
79014: PUSH
79015: LD_VAR 0 3
79019: PUSH
79020: FOR_IN
79021: IFFALSE 79442
// begin tag := GetTag ( i ) + 1 ;
79023: LD_ADDR_VAR 0 9
79027: PUSH
79028: LD_VAR 0 4
79032: PPUSH
79033: CALL_OW 110
79037: PUSH
79038: LD_INT 1
79040: PLUS
79041: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79042: LD_ADDR_VAR 0 7
79046: PUSH
79047: LD_VAR 0 4
79051: PPUSH
79052: CALL_OW 250
79056: PPUSH
79057: LD_VAR 0 4
79061: PPUSH
79062: CALL_OW 251
79066: PPUSH
79067: LD_INT 6
79069: PPUSH
79070: CALL 78643 0 3
79074: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79075: LD_VAR 0 4
79079: PPUSH
79080: CALL_OW 247
79084: PUSH
79085: LD_INT 2
79087: EQUAL
79088: PUSH
79089: LD_VAR 0 7
79093: AND
79094: PUSH
79095: LD_VAR 0 4
79099: PPUSH
79100: CALL_OW 264
79104: PUSH
79105: LD_VAR 0 10
79109: IN
79110: NOT
79111: AND
79112: IFFALSE 79151
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79114: LD_VAR 0 4
79118: PPUSH
79119: LD_VAR 0 7
79123: PUSH
79124: LD_INT 1
79126: ARRAY
79127: PUSH
79128: LD_INT 1
79130: ARRAY
79131: PPUSH
79132: LD_VAR 0 7
79136: PUSH
79137: LD_INT 1
79139: ARRAY
79140: PUSH
79141: LD_INT 2
79143: ARRAY
79144: PPUSH
79145: CALL_OW 116
79149: GO 79440
// if path > tag then
79151: LD_VAR 0 2
79155: PUSH
79156: LD_VAR 0 9
79160: GREATER
79161: IFFALSE 79369
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79163: LD_ADDR_VAR 0 6
79167: PUSH
79168: LD_VAR 0 5
79172: PPUSH
79173: LD_INT 91
79175: PUSH
79176: LD_VAR 0 4
79180: PUSH
79181: LD_INT 8
79183: PUSH
79184: EMPTY
79185: LIST
79186: LIST
79187: LIST
79188: PPUSH
79189: CALL_OW 72
79193: ST_TO_ADDR
// if nearEnemy then
79194: LD_VAR 0 6
79198: IFFALSE 79267
// begin if GetWeapon ( i ) = ru_time_lapser then
79200: LD_VAR 0 4
79204: PPUSH
79205: CALL_OW 264
79209: PUSH
79210: LD_INT 49
79212: EQUAL
79213: IFFALSE 79241
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79215: LD_VAR 0 4
79219: PPUSH
79220: LD_VAR 0 6
79224: PPUSH
79225: LD_VAR 0 4
79229: PPUSH
79230: CALL_OW 74
79234: PPUSH
79235: CALL_OW 112
79239: GO 79265
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79241: LD_VAR 0 4
79245: PPUSH
79246: LD_VAR 0 6
79250: PPUSH
79251: LD_VAR 0 4
79255: PPUSH
79256: CALL_OW 74
79260: PPUSH
79261: CALL 80369 0 2
// end else
79265: GO 79367
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79267: LD_VAR 0 4
79271: PPUSH
79272: LD_VAR 0 2
79276: PUSH
79277: LD_VAR 0 9
79281: ARRAY
79282: PUSH
79283: LD_INT 1
79285: ARRAY
79286: PPUSH
79287: LD_VAR 0 2
79291: PUSH
79292: LD_VAR 0 9
79296: ARRAY
79297: PUSH
79298: LD_INT 2
79300: ARRAY
79301: PPUSH
79302: CALL_OW 297
79306: PUSH
79307: LD_INT 6
79309: GREATER
79310: IFFALSE 79353
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79312: LD_VAR 0 4
79316: PPUSH
79317: LD_VAR 0 2
79321: PUSH
79322: LD_VAR 0 9
79326: ARRAY
79327: PUSH
79328: LD_INT 1
79330: ARRAY
79331: PPUSH
79332: LD_VAR 0 2
79336: PUSH
79337: LD_VAR 0 9
79341: ARRAY
79342: PUSH
79343: LD_INT 2
79345: ARRAY
79346: PPUSH
79347: CALL_OW 114
79351: GO 79367
// SetTag ( i , tag ) ;
79353: LD_VAR 0 4
79357: PPUSH
79358: LD_VAR 0 9
79362: PPUSH
79363: CALL_OW 109
// end else
79367: GO 79440
// if enemy then
79369: LD_VAR 0 5
79373: IFFALSE 79440
// begin if GetWeapon ( i ) = ru_time_lapser then
79375: LD_VAR 0 4
79379: PPUSH
79380: CALL_OW 264
79384: PUSH
79385: LD_INT 49
79387: EQUAL
79388: IFFALSE 79416
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79390: LD_VAR 0 4
79394: PPUSH
79395: LD_VAR 0 5
79399: PPUSH
79400: LD_VAR 0 4
79404: PPUSH
79405: CALL_OW 74
79409: PPUSH
79410: CALL_OW 112
79414: GO 79440
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79416: LD_VAR 0 4
79420: PPUSH
79421: LD_VAR 0 5
79425: PPUSH
79426: LD_VAR 0 4
79430: PPUSH
79431: CALL_OW 74
79435: PPUSH
79436: CALL 80369 0 2
// end ; end ;
79440: GO 79020
79442: POP
79443: POP
// end ;
79444: LD_VAR 0 3
79448: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79449: LD_INT 0
79451: PPUSH
79452: PPUSH
79453: PPUSH
// if not unit or IsInUnit ( unit ) then
79454: LD_VAR 0 1
79458: NOT
79459: PUSH
79460: LD_VAR 0 1
79464: PPUSH
79465: CALL_OW 310
79469: OR
79470: IFFALSE 79474
// exit ;
79472: GO 79565
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79474: LD_ADDR_VAR 0 4
79478: PUSH
79479: LD_VAR 0 1
79483: PPUSH
79484: CALL_OW 250
79488: PPUSH
79489: LD_VAR 0 2
79493: PPUSH
79494: LD_INT 1
79496: PPUSH
79497: CALL_OW 272
79501: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79502: LD_ADDR_VAR 0 5
79506: PUSH
79507: LD_VAR 0 1
79511: PPUSH
79512: CALL_OW 251
79516: PPUSH
79517: LD_VAR 0 2
79521: PPUSH
79522: LD_INT 1
79524: PPUSH
79525: CALL_OW 273
79529: ST_TO_ADDR
// if ValidHex ( x , y ) then
79530: LD_VAR 0 4
79534: PPUSH
79535: LD_VAR 0 5
79539: PPUSH
79540: CALL_OW 488
79544: IFFALSE 79565
// ComTurnXY ( unit , x , y ) ;
79546: LD_VAR 0 1
79550: PPUSH
79551: LD_VAR 0 4
79555: PPUSH
79556: LD_VAR 0 5
79560: PPUSH
79561: CALL_OW 118
// end ;
79565: LD_VAR 0 3
79569: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79570: LD_INT 0
79572: PPUSH
79573: PPUSH
// result := false ;
79574: LD_ADDR_VAR 0 3
79578: PUSH
79579: LD_INT 0
79581: ST_TO_ADDR
// if not units then
79582: LD_VAR 0 2
79586: NOT
79587: IFFALSE 79591
// exit ;
79589: GO 79636
// for i in units do
79591: LD_ADDR_VAR 0 4
79595: PUSH
79596: LD_VAR 0 2
79600: PUSH
79601: FOR_IN
79602: IFFALSE 79634
// if See ( side , i ) then
79604: LD_VAR 0 1
79608: PPUSH
79609: LD_VAR 0 4
79613: PPUSH
79614: CALL_OW 292
79618: IFFALSE 79632
// begin result := true ;
79620: LD_ADDR_VAR 0 3
79624: PUSH
79625: LD_INT 1
79627: ST_TO_ADDR
// exit ;
79628: POP
79629: POP
79630: GO 79636
// end ;
79632: GO 79601
79634: POP
79635: POP
// end ;
79636: LD_VAR 0 3
79640: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79641: LD_INT 0
79643: PPUSH
79644: PPUSH
79645: PPUSH
79646: PPUSH
// if not unit or not points then
79647: LD_VAR 0 1
79651: NOT
79652: PUSH
79653: LD_VAR 0 2
79657: NOT
79658: OR
79659: IFFALSE 79663
// exit ;
79661: GO 79753
// dist := 99999 ;
79663: LD_ADDR_VAR 0 5
79667: PUSH
79668: LD_INT 99999
79670: ST_TO_ADDR
// for i in points do
79671: LD_ADDR_VAR 0 4
79675: PUSH
79676: LD_VAR 0 2
79680: PUSH
79681: FOR_IN
79682: IFFALSE 79751
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79684: LD_ADDR_VAR 0 6
79688: PUSH
79689: LD_VAR 0 1
79693: PPUSH
79694: LD_VAR 0 4
79698: PUSH
79699: LD_INT 1
79701: ARRAY
79702: PPUSH
79703: LD_VAR 0 4
79707: PUSH
79708: LD_INT 2
79710: ARRAY
79711: PPUSH
79712: CALL_OW 297
79716: ST_TO_ADDR
// if tmpDist < dist then
79717: LD_VAR 0 6
79721: PUSH
79722: LD_VAR 0 5
79726: LESS
79727: IFFALSE 79749
// begin result := i ;
79729: LD_ADDR_VAR 0 3
79733: PUSH
79734: LD_VAR 0 4
79738: ST_TO_ADDR
// dist := tmpDist ;
79739: LD_ADDR_VAR 0 5
79743: PUSH
79744: LD_VAR 0 6
79748: ST_TO_ADDR
// end ; end ;
79749: GO 79681
79751: POP
79752: POP
// end ;
79753: LD_VAR 0 3
79757: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79758: LD_INT 0
79760: PPUSH
// uc_side := side ;
79761: LD_ADDR_OWVAR 20
79765: PUSH
79766: LD_VAR 0 1
79770: ST_TO_ADDR
// uc_nation := 3 ;
79771: LD_ADDR_OWVAR 21
79775: PUSH
79776: LD_INT 3
79778: ST_TO_ADDR
// vc_chassis := 25 ;
79779: LD_ADDR_OWVAR 37
79783: PUSH
79784: LD_INT 25
79786: ST_TO_ADDR
// vc_engine := engine_siberite ;
79787: LD_ADDR_OWVAR 39
79791: PUSH
79792: LD_INT 3
79794: ST_TO_ADDR
// vc_control := control_computer ;
79795: LD_ADDR_OWVAR 38
79799: PUSH
79800: LD_INT 3
79802: ST_TO_ADDR
// vc_weapon := 59 ;
79803: LD_ADDR_OWVAR 40
79807: PUSH
79808: LD_INT 59
79810: ST_TO_ADDR
// result := CreateVehicle ;
79811: LD_ADDR_VAR 0 5
79815: PUSH
79816: CALL_OW 45
79820: ST_TO_ADDR
// SetDir ( result , d ) ;
79821: LD_VAR 0 5
79825: PPUSH
79826: LD_VAR 0 4
79830: PPUSH
79831: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79835: LD_VAR 0 5
79839: PPUSH
79840: LD_VAR 0 2
79844: PPUSH
79845: LD_VAR 0 3
79849: PPUSH
79850: LD_INT 0
79852: PPUSH
79853: CALL_OW 48
// end ;
79857: LD_VAR 0 5
79861: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79862: LD_INT 0
79864: PPUSH
79865: PPUSH
79866: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79867: LD_ADDR_VAR 0 2
79871: PUSH
79872: LD_INT 0
79874: PUSH
79875: LD_INT 0
79877: PUSH
79878: LD_INT 0
79880: PUSH
79881: LD_INT 0
79883: PUSH
79884: EMPTY
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79890: LD_VAR 0 1
79894: NOT
79895: PUSH
79896: LD_VAR 0 1
79900: PPUSH
79901: CALL_OW 264
79905: PUSH
79906: LD_INT 12
79908: PUSH
79909: LD_INT 51
79911: PUSH
79912: LD_INT 32
79914: PUSH
79915: LD_INT 89
79917: PUSH
79918: EMPTY
79919: LIST
79920: LIST
79921: LIST
79922: LIST
79923: IN
79924: NOT
79925: OR
79926: IFFALSE 79930
// exit ;
79928: GO 80028
// for i := 1 to 3 do
79930: LD_ADDR_VAR 0 3
79934: PUSH
79935: DOUBLE
79936: LD_INT 1
79938: DEC
79939: ST_TO_ADDR
79940: LD_INT 3
79942: PUSH
79943: FOR_TO
79944: IFFALSE 80026
// begin tmp := GetCargo ( cargo , i ) ;
79946: LD_ADDR_VAR 0 4
79950: PUSH
79951: LD_VAR 0 1
79955: PPUSH
79956: LD_VAR 0 3
79960: PPUSH
79961: CALL_OW 289
79965: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79966: LD_ADDR_VAR 0 2
79970: PUSH
79971: LD_VAR 0 2
79975: PPUSH
79976: LD_VAR 0 3
79980: PPUSH
79981: LD_VAR 0 4
79985: PPUSH
79986: CALL_OW 1
79990: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79991: LD_ADDR_VAR 0 2
79995: PUSH
79996: LD_VAR 0 2
80000: PPUSH
80001: LD_INT 4
80003: PPUSH
80004: LD_VAR 0 2
80008: PUSH
80009: LD_INT 4
80011: ARRAY
80012: PUSH
80013: LD_VAR 0 4
80017: PLUS
80018: PPUSH
80019: CALL_OW 1
80023: ST_TO_ADDR
// end ;
80024: GO 79943
80026: POP
80027: POP
// end ;
80028: LD_VAR 0 2
80032: RET
// export function Length ( array ) ; begin
80033: LD_INT 0
80035: PPUSH
// result := array + 0 ;
80036: LD_ADDR_VAR 0 2
80040: PUSH
80041: LD_VAR 0 1
80045: PUSH
80046: LD_INT 0
80048: PLUS
80049: ST_TO_ADDR
// end ;
80050: LD_VAR 0 2
80054: RET
// export function PrepareArray ( array ) ; begin
80055: LD_INT 0
80057: PPUSH
// result := array diff 0 ;
80058: LD_ADDR_VAR 0 2
80062: PUSH
80063: LD_VAR 0 1
80067: PUSH
80068: LD_INT 0
80070: DIFF
80071: ST_TO_ADDR
// if not result [ 1 ] then
80072: LD_VAR 0 2
80076: PUSH
80077: LD_INT 1
80079: ARRAY
80080: NOT
80081: IFFALSE 80101
// result := Delete ( result , 1 ) ;
80083: LD_ADDR_VAR 0 2
80087: PUSH
80088: LD_VAR 0 2
80092: PPUSH
80093: LD_INT 1
80095: PPUSH
80096: CALL_OW 3
80100: ST_TO_ADDR
// end ;
80101: LD_VAR 0 2
80105: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80106: LD_INT 0
80108: PPUSH
80109: PPUSH
80110: PPUSH
80111: PPUSH
// sibRocketRange := 25 ;
80112: LD_ADDR_VAR 0 6
80116: PUSH
80117: LD_INT 25
80119: ST_TO_ADDR
// result := false ;
80120: LD_ADDR_VAR 0 4
80124: PUSH
80125: LD_INT 0
80127: ST_TO_ADDR
// for i := 0 to 5 do
80128: LD_ADDR_VAR 0 5
80132: PUSH
80133: DOUBLE
80134: LD_INT 0
80136: DEC
80137: ST_TO_ADDR
80138: LD_INT 5
80140: PUSH
80141: FOR_TO
80142: IFFALSE 80209
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80144: LD_VAR 0 1
80148: PPUSH
80149: LD_VAR 0 5
80153: PPUSH
80154: LD_VAR 0 6
80158: PPUSH
80159: CALL_OW 272
80163: PPUSH
80164: LD_VAR 0 2
80168: PPUSH
80169: LD_VAR 0 5
80173: PPUSH
80174: LD_VAR 0 6
80178: PPUSH
80179: CALL_OW 273
80183: PPUSH
80184: LD_VAR 0 3
80188: PPUSH
80189: CALL_OW 309
80193: IFFALSE 80207
// begin result := true ;
80195: LD_ADDR_VAR 0 4
80199: PUSH
80200: LD_INT 1
80202: ST_TO_ADDR
// exit ;
80203: POP
80204: POP
80205: GO 80211
// end ;
80207: GO 80141
80209: POP
80210: POP
// end ;
80211: LD_VAR 0 4
80215: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80216: LD_INT 0
80218: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80219: LD_VAR 0 1
80223: PPUSH
80224: LD_VAR 0 2
80228: PPUSH
80229: LD_INT 0
80231: PPUSH
80232: LD_INT 0
80234: PPUSH
80235: LD_INT 1
80237: PPUSH
80238: LD_INT 0
80240: PPUSH
80241: CALL_OW 587
// end ;
80245: LD_VAR 0 3
80249: RET
// export function CenterOnNow ( unit ) ; begin
80250: LD_INT 0
80252: PPUSH
// result := IsInUnit ( unit ) ;
80253: LD_ADDR_VAR 0 2
80257: PUSH
80258: LD_VAR 0 1
80262: PPUSH
80263: CALL_OW 310
80267: ST_TO_ADDR
// if not result then
80268: LD_VAR 0 2
80272: NOT
80273: IFFALSE 80285
// result := unit ;
80275: LD_ADDR_VAR 0 2
80279: PUSH
80280: LD_VAR 0 1
80284: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80285: LD_VAR 0 1
80289: PPUSH
80290: CALL_OW 87
// end ;
80294: LD_VAR 0 2
80298: RET
// export function ComMoveHex ( unit , hex ) ; begin
80299: LD_INT 0
80301: PPUSH
// if not hex then
80302: LD_VAR 0 2
80306: NOT
80307: IFFALSE 80311
// exit ;
80309: GO 80364
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80311: LD_VAR 0 2
80315: PUSH
80316: LD_INT 1
80318: ARRAY
80319: PPUSH
80320: LD_VAR 0 2
80324: PUSH
80325: LD_INT 2
80327: ARRAY
80328: PPUSH
80329: CALL_OW 428
80333: IFFALSE 80337
// exit ;
80335: GO 80364
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80337: LD_VAR 0 1
80341: PPUSH
80342: LD_VAR 0 2
80346: PUSH
80347: LD_INT 1
80349: ARRAY
80350: PPUSH
80351: LD_VAR 0 2
80355: PUSH
80356: LD_INT 2
80358: ARRAY
80359: PPUSH
80360: CALL_OW 111
// end ;
80364: LD_VAR 0 3
80368: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80369: LD_INT 0
80371: PPUSH
80372: PPUSH
80373: PPUSH
// if not unit or not enemy then
80374: LD_VAR 0 1
80378: NOT
80379: PUSH
80380: LD_VAR 0 2
80384: NOT
80385: OR
80386: IFFALSE 80390
// exit ;
80388: GO 80514
// x := GetX ( enemy ) ;
80390: LD_ADDR_VAR 0 4
80394: PUSH
80395: LD_VAR 0 2
80399: PPUSH
80400: CALL_OW 250
80404: ST_TO_ADDR
// y := GetY ( enemy ) ;
80405: LD_ADDR_VAR 0 5
80409: PUSH
80410: LD_VAR 0 2
80414: PPUSH
80415: CALL_OW 251
80419: ST_TO_ADDR
// if ValidHex ( x , y ) then
80420: LD_VAR 0 4
80424: PPUSH
80425: LD_VAR 0 5
80429: PPUSH
80430: CALL_OW 488
80434: IFFALSE 80514
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
80436: LD_VAR 0 2
80440: PPUSH
80441: CALL_OW 247
80445: PUSH
80446: LD_INT 3
80448: PUSH
80449: LD_INT 2
80451: PUSH
80452: EMPTY
80453: LIST
80454: LIST
80455: IN
80456: PUSH
80457: LD_VAR 0 1
80461: PPUSH
80462: CALL_OW 255
80466: PPUSH
80467: LD_VAR 0 2
80471: PPUSH
80472: CALL_OW 292
80476: AND
80477: IFFALSE 80495
// ComAttackUnit ( unit , enemy ) else
80479: LD_VAR 0 1
80483: PPUSH
80484: LD_VAR 0 2
80488: PPUSH
80489: CALL_OW 115
80493: GO 80514
// ComAgressiveMove ( unit , x , y ) ;
80495: LD_VAR 0 1
80499: PPUSH
80500: LD_VAR 0 4
80504: PPUSH
80505: LD_VAR 0 5
80509: PPUSH
80510: CALL_OW 114
// end ;
80514: LD_VAR 0 3
80518: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80519: LD_INT 0
80521: PPUSH
80522: PPUSH
80523: PPUSH
// list := AreaToList ( area , 0 ) ;
80524: LD_ADDR_VAR 0 5
80528: PUSH
80529: LD_VAR 0 1
80533: PPUSH
80534: LD_INT 0
80536: PPUSH
80537: CALL_OW 517
80541: ST_TO_ADDR
// if not list then
80542: LD_VAR 0 5
80546: NOT
80547: IFFALSE 80551
// exit ;
80549: GO 80681
// if all then
80551: LD_VAR 0 2
80555: IFFALSE 80643
// begin for i := 1 to list [ 1 ] do
80557: LD_ADDR_VAR 0 4
80561: PUSH
80562: DOUBLE
80563: LD_INT 1
80565: DEC
80566: ST_TO_ADDR
80567: LD_VAR 0 5
80571: PUSH
80572: LD_INT 1
80574: ARRAY
80575: PUSH
80576: FOR_TO
80577: IFFALSE 80639
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80579: LD_ADDR_VAR 0 3
80583: PUSH
80584: LD_VAR 0 3
80588: PPUSH
80589: LD_VAR 0 3
80593: PUSH
80594: LD_INT 1
80596: PLUS
80597: PPUSH
80598: LD_VAR 0 5
80602: PUSH
80603: LD_INT 1
80605: ARRAY
80606: PUSH
80607: LD_VAR 0 4
80611: ARRAY
80612: PUSH
80613: LD_VAR 0 5
80617: PUSH
80618: LD_INT 2
80620: ARRAY
80621: PUSH
80622: LD_VAR 0 4
80626: ARRAY
80627: PUSH
80628: EMPTY
80629: LIST
80630: LIST
80631: PPUSH
80632: CALL_OW 1
80636: ST_TO_ADDR
80637: GO 80576
80639: POP
80640: POP
// exit ;
80641: GO 80681
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80643: LD_ADDR_VAR 0 3
80647: PUSH
80648: LD_VAR 0 5
80652: PUSH
80653: LD_INT 1
80655: ARRAY
80656: PUSH
80657: LD_INT 1
80659: ARRAY
80660: PUSH
80661: LD_VAR 0 5
80665: PUSH
80666: LD_INT 2
80668: ARRAY
80669: PUSH
80670: LD_INT 1
80672: ARRAY
80673: PUSH
80674: EMPTY
80675: LIST
80676: LIST
80677: PUSH
80678: EMPTY
80679: LIST
80680: ST_TO_ADDR
// end ;
80681: LD_VAR 0 3
80685: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80686: LD_INT 0
80688: PPUSH
80689: PPUSH
// list := AreaToList ( area , 0 ) ;
80690: LD_ADDR_VAR 0 4
80694: PUSH
80695: LD_VAR 0 1
80699: PPUSH
80700: LD_INT 0
80702: PPUSH
80703: CALL_OW 517
80707: ST_TO_ADDR
// if not list then
80708: LD_VAR 0 4
80712: NOT
80713: IFFALSE 80717
// exit ;
80715: GO 80758
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80717: LD_ADDR_VAR 0 3
80721: PUSH
80722: LD_VAR 0 4
80726: PUSH
80727: LD_INT 1
80729: ARRAY
80730: PUSH
80731: LD_INT 1
80733: ARRAY
80734: PUSH
80735: LD_VAR 0 4
80739: PUSH
80740: LD_INT 2
80742: ARRAY
80743: PUSH
80744: LD_INT 1
80746: ARRAY
80747: PUSH
80748: LD_VAR 0 2
80752: PUSH
80753: EMPTY
80754: LIST
80755: LIST
80756: LIST
80757: ST_TO_ADDR
// end ;
80758: LD_VAR 0 3
80762: RET
// export function First ( array ) ; begin
80763: LD_INT 0
80765: PPUSH
// if not array then
80766: LD_VAR 0 1
80770: NOT
80771: IFFALSE 80775
// exit ;
80773: GO 80789
// result := array [ 1 ] ;
80775: LD_ADDR_VAR 0 2
80779: PUSH
80780: LD_VAR 0 1
80784: PUSH
80785: LD_INT 1
80787: ARRAY
80788: ST_TO_ADDR
// end ;
80789: LD_VAR 0 2
80793: RET
// export function Last ( array ) ; begin
80794: LD_INT 0
80796: PPUSH
// if not array then
80797: LD_VAR 0 1
80801: NOT
80802: IFFALSE 80806
// exit ;
80804: GO 80822
// result := array [ array ] ;
80806: LD_ADDR_VAR 0 2
80810: PUSH
80811: LD_VAR 0 1
80815: PUSH
80816: LD_VAR 0 1
80820: ARRAY
80821: ST_TO_ADDR
// end ; end_of_file
80822: LD_VAR 0 2
80826: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80827: LD_VAR 0 1
80831: PPUSH
80832: LD_VAR 0 2
80836: PPUSH
80837: LD_VAR 0 3
80841: PPUSH
80842: LD_VAR 0 4
80846: PPUSH
80847: LD_VAR 0 5
80851: PPUSH
80852: LD_VAR 0 6
80856: PPUSH
80857: CALL 17891 0 6
// end ;
80861: PPOPN 6
80863: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80864: LD_INT 0
80866: PPUSH
// begin if not units then
80867: LD_VAR 0 1
80871: NOT
80872: IFFALSE 80876
// exit ;
80874: GO 80876
// end ;
80876: PPOPN 7
80878: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80879: CALL 17795 0 0
// end ;
80883: PPOPN 1
80885: END
