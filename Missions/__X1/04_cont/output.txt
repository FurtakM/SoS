// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6234 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7794 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 , 22 22$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: LD_INT 46200
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 37134 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 37134 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 37134 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 37134 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 37134 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 37134 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 37134 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 37134 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 37134 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 37134 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 37134 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 37134 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 37134 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 37134 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 37134 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 37134 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ; end_of_file
6231: PPOPN 1
6233: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
// SetBName ( omikron , omikron ) ;
6239: LD_INT 64
6241: PPUSH
6242: LD_STRING omikron
6244: PPUSH
6245: CALL_OW 500
// uc_side := 4 ;
6249: LD_ADDR_OWVAR 20
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// uc_nation := 1 ;
6257: LD_ADDR_OWVAR 21
6261: PUSH
6262: LD_INT 1
6264: ST_TO_ADDR
// omicronSquad := [ ] ;
6265: LD_ADDR_EXP 51
6269: PUSH
6270: EMPTY
6271: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 30
6292: PUSH
6293: LD_INT 32
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 30
6302: PUSH
6303: LD_INT 31
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6382
// begin PrepareHuman ( false , 1 , 1 ) ;
6327: LD_INT 0
6329: PPUSH
6330: LD_INT 1
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 380
// un := CreateHuman ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: CALL_OW 44
6349: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6350: LD_ADDR_EXP 51
6354: PUSH
6355: LD_EXP 51
6359: PUSH
6360: LD_VAR 0 3
6364: UNION
6365: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: GO 6324
6382: POP
6383: POP
// for i := 1 to 3 do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6453
// begin PrepareHuman ( false , 2 , 2 ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 2
6405: PPUSH
6406: LD_INT 2
6408: PPUSH
6409: CALL_OW 380
// un := CreateHuman ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: CALL_OW 44
6422: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6423: LD_ADDR_EXP 51
6427: PUSH
6428: LD_EXP 51
6432: PUSH
6433: LD_VAR 0 3
6437: UNION
6438: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 64
6446: PPUSH
6447: CALL_OW 52
// end ;
6451: GO 6397
6453: POP
6454: POP
// for i := 1 to 2 do
6455: LD_ADDR_VAR 0 2
6459: PUSH
6460: DOUBLE
6461: LD_INT 1
6463: DEC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_TO
6469: IFFALSE 6608
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6471: LD_INT 4
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: LD_INT 2
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 100
6491: PPUSH
6492: CALL 370 0 7
// un := CreateVehicle ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: CALL_OW 45
6505: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6506: LD_ADDR_EXP 51
6510: PUSH
6511: LD_EXP 51
6515: PUSH
6516: LD_VAR 0 3
6520: UNION
6521: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6522: LD_VAR 0 3
6526: PPUSH
6527: LD_INT 28
6529: PPUSH
6530: LD_INT 37
6532: PPUSH
6533: LD_INT 6
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6543: LD_INT 0
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: CALL_OW 380
// un := CreateHuman ;
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: CALL_OW 44
6565: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6566: LD_ADDR_EXP 51
6570: PUSH
6571: LD_EXP 51
6575: PUSH
6576: LD_VAR 0 3
6580: UNION
6581: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_EXP 51
6591: PUSH
6592: LD_EXP 51
6596: PUSH
6597: LD_INT 1
6599: MINUS
6600: ARRAY
6601: PPUSH
6602: CALL_OW 52
// end ;
6606: GO 6468
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 1
6614: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
// uc_side := 4 ;
6621: LD_ADDR_OWVAR 20
6625: PUSH
6626: LD_INT 4
6628: ST_TO_ADDR
// uc_nation := 1 ;
6629: LD_ADDR_OWVAR 21
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// tmp := [ ] ;
6637: LD_ADDR_VAR 0 4
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6644: LD_INT 4
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: LD_INT 2
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 4
6661: PPUSH
6662: LD_INT 77
6664: PPUSH
6665: CALL 370 0 7
// un := CreateVehicle ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: CALL_OW 45
6678: ST_TO_ADDR
// tmp := tmp union un ;
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: LD_VAR 0 4
6688: PUSH
6689: LD_VAR 0 3
6693: UNION
6694: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6707: LD_VAR 0 3
6711: PPUSH
6712: LD_INT 106
6714: PPUSH
6715: LD_INT 3
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 2
6733: PPUSH
6734: CALL_OW 380
// un := CreateHuman ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: CALL_OW 44
6747: ST_TO_ADDR
// tmp := tmp union un ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_VAR 0 3
6762: UNION
6763: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: ARRAY
6783: PPUSH
6784: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 109
6795: PPUSH
6796: LD_INT 9
6798: PPUSH
6799: CALL_OW 111
// wait ( 0 0$1 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// for i := 1 to 2 do
6810: LD_ADDR_VAR 0 2
6814: PUSH
6815: DOUBLE
6816: LD_INT 1
6818: DEC
6819: ST_TO_ADDR
6820: LD_INT 2
6822: PUSH
6823: FOR_TO
6824: IFFALSE 6888
// begin PrepareHuman ( false , 1 , 2 ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: CALL_OW 380
// un := CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// tmp := tmp union un ;
6849: LD_ADDR_VAR 0 4
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 3
6863: UNION
6864: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_INT 105
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 50
// end ;
6886: GO 6823
6888: POP
6889: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6890: LD_VAR 0 4
6894: PPUSH
6895: LD_INT 26
6897: PPUSH
6898: LD_INT 35
6900: PPUSH
6901: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6905: LD_INT 35
6907: PPUSH
6908: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6912: LD_VAR 0 4
6916: PPUSH
6917: LD_INT 50
6919: PUSH
6920: EMPTY
6921: LIST
6922: PPUSH
6923: CALL_OW 72
6927: NOT
6928: IFFALSE 6932
// exit ;
6930: GO 7059
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 64
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 72
6955: PUSH
6956: LD_VAR 0 4
6960: EQUAL
6961: IFFALSE 6905
// omicronSquad := omicronSquad union tmp ;
6963: LD_ADDR_EXP 51
6967: PUSH
6968: LD_EXP 51
6972: PUSH
6973: LD_VAR 0 4
6977: UNION
6978: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: LD_VAR 0 4
6988: PPUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: PUSH
7004: FOR_IN
7005: IFFALSE 7057
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 74
7050: PPUSH
7051: CALL_OW 120
7055: GO 7004
7057: POP
7058: POP
// end ;
7059: LD_VAR 0 1
7063: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7064: LD_EXP 13
7068: NOT
7069: IFFALSE 7640
7071: GO 7073
7073: DISABLE
7074: LD_INT 0
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// begin enable ;
7080: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 22
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: LD_INT 1000
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_EXP 51
7142: PPUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 72
7157: ST_TO_ADDR
// if filter and tmp then
7158: LD_VAR 0 2
7162: PUSH
7163: LD_VAR 0 3
7167: AND
7168: IFFALSE 7241
// begin for i in tmp do
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: FOR_IN
7181: IFFALSE 7237
// if IsInUnit ( i ) then
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 310
7192: IFFALSE 7205
// ComExitBuilding ( i ) else
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
7203: GO 7235
// if not HasTask ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 314
7214: NOT
7215: IFFALSE 7235
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: CALL_OW 130
7235: GO 7180
7237: POP
7238: POP
// end else
7239: GO 7312
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 54
7251: PUSH
7252: EMPTY
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 72
7263: IFFALSE 7312
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7265: LD_ADDR_VAR 0 1
7269: PUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 54
7280: PUSH
7281: EMPTY
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 72
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7310
// ComEnterUnit ( i , omikron ) ;
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_INT 64
7303: PPUSH
7304: CALL_OW 120
7308: GO 7293
7310: POP
7311: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_EXP 51
7321: PPUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 72
7336: ST_TO_ADDR
// if not filter then
7337: LD_VAR 0 2
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7640
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 13
7353: PPUSH
7354: LD_INT 81
7356: PUSH
7357: LD_INT 4
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 70
7368: ST_TO_ADDR
// if enemy then
7369: LD_VAR 0 4
7373: IFFALSE 7640
// begin for i in filter do
7375: LD_ADDR_VAR 0 1
7379: PUSH
7380: LD_VAR 0 2
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7638
// begin tmp := IsDrivenBy ( i ) ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 311
7402: ST_TO_ADDR
// if not tmp then
7403: LD_VAR 0 3
7407: NOT
7408: IFFALSE 7412
// continue ;
7410: GO 7385
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 256
7421: PUSH
7422: LD_INT 600
7424: GREATEREQUAL
7425: PUSH
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 110
7435: PUSH
7436: LD_INT 1
7438: NONEQUAL
7439: AND
7440: IFFALSE 7466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7442: LD_VAR 0 1
7446: PPUSH
7447: LD_VAR 0 4
7451: PPUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 74
7461: PPUSH
7462: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 256
7475: PUSH
7476: LD_INT 600
7478: LESS
7479: PUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 110
7489: PUSH
7490: LD_INT 1
7492: NONEQUAL
7493: AND
7494: IFFALSE 7523
// begin SetTag ( i , 1 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 1
7503: PPUSH
7504: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_INT 27
7515: PPUSH
7516: LD_INT 35
7518: PPUSH
7519: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7523: LD_VAR 0 1
7527: PPUSH
7528: CALL_OW 110
7532: PUSH
7533: LD_INT 1
7535: EQUAL
7536: PUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 27
7544: PPUSH
7545: LD_INT 35
7547: PPUSH
7548: CALL_OW 297
7552: PUSH
7553: LD_INT 6
7555: LESS
7556: AND
7557: PUSH
7558: LD_VAR 0 3
7562: AND
7563: IFFALSE 7636
// begin ComExitVehicle ( tmp ) ;
7565: LD_VAR 0 3
7569: PPUSH
7570: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7574: LD_VAR 0 3
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7588: LD_INT 35
7590: PPUSH
7591: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 256
7604: PUSH
7605: LD_INT 1000
7607: EQUAL
7608: IFFALSE 7588
// ComEnterUnit ( tmp , i ) ;
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 120
// SetTag ( i , 0 ) ;
7624: LD_VAR 0 1
7628: PPUSH
7629: LD_INT 0
7631: PPUSH
7632: CALL_OW 109
// end ; end ;
7636: GO 7385
7638: POP
7639: POP
// end ; end ;
7640: PPOPN 4
7642: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7643: LD_EXP 13
7647: IFFALSE 7791
7649: GO 7651
7651: DISABLE
7652: LD_INT 0
7654: PPUSH
7655: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: LD_EXP 51
7665: PPUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 50
7678: PUSH
7679: EMPTY
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 2
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7791
// repeat wait ( 0 0$1 ) ;
7700: LD_INT 35
7702: PPUSH
7703: CALL_OW 67
// for i in tmp do
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 2
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7782
// begin ComExit ( i ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL 74908 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7729: LD_VAR 0 1
7733: PPUSH
7734: LD_INT 14
7736: PPUSH
7737: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 14
7748: PPUSH
7749: CALL_OW 308
7753: IFFALSE 7780
// begin tmp := tmp diff i ;
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_VAR 0 2
7764: PUSH
7765: LD_VAR 0 1
7769: DIFF
7770: ST_TO_ADDR
// RemoveUnit ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 64
// end ; end ;
7780: GO 7717
7782: POP
7783: POP
// until not tmp ;
7784: LD_VAR 0 2
7788: NOT
7789: IFFALSE 7700
// end ; end_of_file
7791: PPOPN 2
7793: END
// export function Action ; var i , un , veh , tmp ; begin
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
// InGameOn ;
7801: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7805: LD_INT 179
7807: PPUSH
7808: LD_INT 5
7810: PPUSH
7811: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 2
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: LD_INT 12
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 24
7837: PPUSH
7838: LD_INT 33
7840: PPUSH
7841: CALL 370 0 7
7845: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7858: LD_VAR 0 4
7862: PPUSH
7863: LD_INT 178
7865: PPUSH
7866: LD_INT 2
7868: PPUSH
7869: LD_INT 0
7871: PPUSH
7872: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7876: LD_EXP 25
7880: PPUSH
7881: LD_VAR 0 4
7885: PPUSH
7886: CALL_OW 52
// if Kamil then
7890: LD_EXP 29
7894: IFFALSE 7929
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7896: LD_EXP 29
7900: PPUSH
7901: LD_INT 207
7903: PPUSH
7904: LD_INT 37
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7914: LD_EXP 29
7918: PPUSH
7919: LD_INT 211
7921: PPUSH
7922: LD_INT 38
7924: PPUSH
7925: CALL_OW 118
// end ; if Sophia then
7929: LD_EXP 31
7933: IFFALSE 7968
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7935: LD_EXP 31
7939: PPUSH
7940: LD_INT 209
7942: PPUSH
7943: LD_INT 40
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7953: LD_EXP 31
7957: PPUSH
7958: LD_INT 211
7960: PPUSH
7961: LD_INT 38
7963: PPUSH
7964: CALL_OW 118
// end ; if Givi then
7968: LD_EXP 26
7972: IFFALSE 8007
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7974: LD_EXP 26
7978: PPUSH
7979: LD_INT 201
7981: PPUSH
7982: LD_INT 34
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7992: LD_EXP 26
7996: PPUSH
7997: LD_INT 206
7999: PPUSH
8000: LD_INT 36
8002: PPUSH
8003: CALL_OW 118
// end ; if Ibrahim then
8007: LD_EXP 28
8011: IFFALSE 8046
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8013: LD_EXP 28
8017: PPUSH
8018: LD_INT 202
8020: PPUSH
8021: LD_INT 39
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8031: LD_EXP 28
8035: PPUSH
8036: LD_INT 206
8038: PPUSH
8039: LD_INT 36
8041: PPUSH
8042: CALL_OW 118
// end ; if Markov then
8046: LD_EXP 32
8050: IFFALSE 8137
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: LD_INT 13
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 25
8074: PPUSH
8075: LD_INT 80
8077: PUSH
8078: LD_INT 20
8080: PUSH
8081: LD_OWVAR 67
8085: MUL
8086: MINUS
8087: PPUSH
8088: CALL 370 0 7
8092: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_INT 197
8112: PPUSH
8113: LD_INT 35
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8123: LD_EXP 32
8127: PPUSH
8128: LD_VAR 0 4
8132: PPUSH
8133: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8137: LD_ADDR_VAR 0 5
8141: PUSH
8142: LD_EXP 30
8146: PUSH
8147: LD_EXP 37
8151: UNION
8152: ST_TO_ADDR
// for i in tmp do
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8198
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 203
8173: PPUSH
8174: LD_INT 41
8176: PPUSH
8177: LD_INT 6
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 50
// ComHold ( i ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: CALL_OW 140
// end ;
8196: GO 8163
8198: POP
8199: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8200: LD_INT 22
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 69
8228: NOT
8229: IFFALSE 8243
// SetClass ( Heike , 2 ) ;
8231: LD_EXP 25
8235: PPUSH
8236: LD_INT 2
8238: PPUSH
8239: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8243: LD_EXP 25
8247: PPUSH
8248: LD_INT 183
8250: PPUSH
8251: LD_INT 12
8253: PPUSH
8254: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8258: LD_EXP 25
8262: PPUSH
8263: LD_INT 188
8265: PPUSH
8266: LD_INT 20
8268: PPUSH
8269: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8273: LD_EXP 25
8277: PPUSH
8278: LD_INT 191
8280: PPUSH
8281: LD_INT 25
8283: PPUSH
8284: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8288: LD_EXP 25
8292: PPUSH
8293: LD_INT 203
8295: PPUSH
8296: LD_INT 29
8298: PPUSH
8299: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8303: LD_EXP 25
8307: PPUSH
8308: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8319: LD_EXP 25
8323: PPUSH
8324: CALL_OW 310
8328: NOT
8329: IFFALSE 8312
// CenterOnUnits ( Heike ) ;
8331: LD_EXP 25
8335: PPUSH
8336: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PUSH
8374: LD_EXP 25
8378: PUSH
8379: LD_EXP 32
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: DIFF
8388: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8389: LD_VAR 0 5
8393: PPUSH
8394: LD_EXP 25
8398: PPUSH
8399: CALL_OW 119
// if Givi then
8403: LD_EXP 26
8407: IFFALSE 8425
// ComTurnUnit ( Heike , Givi ) else
8409: LD_EXP 25
8413: PPUSH
8414: LD_EXP 26
8418: PPUSH
8419: CALL_OW 119
8423: GO 8443
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8425: LD_EXP 25
8429: PPUSH
8430: LD_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8443: LD_EXP 25
8447: PPUSH
8448: LD_STRING DH-Start-1
8450: PPUSH
8451: CALL_OW 88
// if Givi then
8455: LD_EXP 26
8459: IFFALSE 8506
// begin Say ( Givi , DG-Start-2 ) ;
8461: LD_EXP 26
8465: PPUSH
8466: LD_STRING DG-Start-2
8468: PPUSH
8469: CALL_OW 88
// if not Mike then
8473: LD_EXP 27
8477: NOT
8478: IFFALSE 8504
// begin Say ( Givi , DG-Start-b-3 ) ;
8480: LD_EXP 26
8484: PPUSH
8485: LD_STRING DG-Start-b-3
8487: PPUSH
8488: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8492: LD_EXP 25
8496: PPUSH
8497: LD_STRING DH-Start-b-4
8499: PPUSH
8500: CALL_OW 88
// end ; end else
8504: GO 8571
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8506: LD_EXP 37
8510: PPUSH
8511: LD_INT 26
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_STRING DArm-Start-a-2
8532: PPUSH
8533: CALL_OW 88
8537: NOT
8538: IFFALSE 8571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8540: LD_EXP 37
8544: PPUSH
8545: LD_INT 26
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 72
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: LD_STRING DArf-Start-a-2
8566: PPUSH
8567: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8571: LD_EXP 25
8575: PPUSH
8576: LD_INT 211
8578: PPUSH
8579: LD_INT 38
8581: PPUSH
8582: CALL_OW 118
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8593: LD_EXP 25
8597: PPUSH
8598: LD_STRING DH-Start-3
8600: PPUSH
8601: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8605: LD_EXP 25
8609: PPUSH
8610: LD_STRING DH-Start-4
8612: PPUSH
8613: CALL_OW 88
// InGameOff ;
8617: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8621: LD_STRING Prepare
8623: PPUSH
8624: CALL_OW 337
// SaveForQuickRestart ;
8628: CALL_OW 22
// wait ( 0 0$10 ) ;
8632: LD_INT 350
8634: PPUSH
8635: CALL_OW 67
// if not Aviradze then
8639: LD_EXP 35
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8888
// SetDir ( Aviradze , 4 ) ;
8648: LD_EXP 35
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8660: LD_EXP 35
8664: PPUSH
8665: LD_INT 225
8667: PPUSH
8668: LD_INT 33
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 48
// for i := 1 to 2 do
8678: LD_ADDR_VAR 0 2
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_INT 2
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8823
// begin uc_side := 2 ;
8694: LD_ADDR_OWVAR 20
8698: PUSH
8699: LD_INT 2
8701: ST_TO_ADDR
// uc_nation := 0 ;
8702: LD_ADDR_OWVAR 21
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8710: LD_INT 0
8712: PPUSH
8713: LD_INT 12
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 380
// hc_gallery :=  ;
8723: LD_ADDR_OWVAR 33
8727: PUSH
8728: LD_STRING 
8730: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8731: LD_ADDR_OWVAR 26
8735: PUSH
8736: LD_STRING Artudito
8738: PUSH
8739: LD_STRING Textur
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_VAR 0 2
8750: ARRAY
8751: ST_TO_ADDR
// un := CreateHuman ;
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: CALL_OW 44
8761: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8762: LD_VAR 0 3
8766: PPUSH
8767: LD_INT 224
8769: PUSH
8770: LD_INT 226
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_VAR 0 2
8781: ARRAY
8782: PPUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_VAR 0 2
8797: ARRAY
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 215
8813: PPUSH
8814: LD_INT 36
8816: PPUSH
8817: CALL_OW 111
// end ;
8821: GO 8691
8823: POP
8824: POP
// hc_name :=  ;
8825: LD_ADDR_OWVAR 26
8829: PUSH
8830: LD_STRING 
8832: ST_TO_ADDR
// InitHc ;
8833: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8837: LD_EXP 35
8841: PPUSH
8842: LD_INT 215
8844: PPUSH
8845: LD_INT 36
8847: PPUSH
8848: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8852: LD_EXP 35
8856: PPUSH
8857: LD_STRING DA-Arrive-1
8859: PPUSH
8860: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8864: LD_EXP 25
8868: PPUSH
8869: LD_STRING DH-Arrive-2
8871: PPUSH
8872: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8876: LD_EXP 35
8880: PPUSH
8881: LD_STRING DA-Arrive-3
8883: PPUSH
8884: CALL_OW 88
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8893: LD_EXP 3
8897: IFFALSE 10305
8899: GO 8901
8901: DISABLE
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
// begin DialogueOn ;
8907: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8911: LD_EXP 25
8915: PPUSH
8916: LD_STRING DH-base-1
8918: PPUSH
8919: CALL_OW 88
// if Markov then
8923: LD_EXP 32
8927: IFFALSE 8979
// begin Say ( Markov , DMar-base-2 ) ;
8929: LD_EXP 32
8933: PPUSH
8934: LD_STRING DMar-base-2
8936: PPUSH
8937: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8941: LD_EXP 32
8945: PPUSH
8946: LD_STRING DMar-base-3
8948: PPUSH
8949: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8953: LD_EXP 25
8957: PPUSH
8958: LD_STRING DH-base-4
8960: PPUSH
8961: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8965: LD_EXP 32
8969: PPUSH
8970: LD_STRING DMar-base-5
8972: PPUSH
8973: CALL_OW 88
// end else
8977: GO 9056
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8979: LD_EXP 37
8983: PPUSH
8984: LD_INT 26
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 72
8998: PUSH
8999: LD_INT 1
9001: ARRAY
9002: PPUSH
9003: LD_STRING DArm-base-a-2
9005: PPUSH
9006: CALL_OW 88
9010: NOT
9011: IFFALSE 9044
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9013: LD_EXP 37
9017: PPUSH
9018: LD_INT 26
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 72
9032: PUSH
9033: LD_INT 1
9035: ARRAY
9036: PPUSH
9037: LD_STRING DArf-base-a-2
9039: PPUSH
9040: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9044: LD_EXP 25
9048: PPUSH
9049: LD_STRING DH-base-a-3
9051: PPUSH
9052: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9056: LD_EXP 35
9060: PPUSH
9061: LD_STRING DA-base-6
9063: PPUSH
9064: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9068: LD_EXP 35
9072: PPUSH
9073: LD_STRING DA-base-7
9075: PPUSH
9076: CALL_OW 88
// DialogueOff ;
9080: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9084: LD_STRING Flamethrower
9086: PPUSH
9087: CALL_OW 337
// wait ( 2 2$00 ) ;
9091: LD_INT 4200
9093: PPUSH
9094: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9098: LD_EXP 34
9102: PUSH
9103: LD_EXP 27
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: LD_INT 203
9114: PPUSH
9115: LD_INT 37
9117: PPUSH
9118: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9122: LD_INT 22
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 92
9134: PUSH
9135: LD_INT 203
9137: PUSH
9138: LD_INT 37
9140: PUSH
9141: LD_INT 10
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: NOT
9159: IFFALSE 9199
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9161: LD_EXP 34
9165: PUSH
9166: LD_EXP 27
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: LD_EXP 25
9179: PPUSH
9180: CALL_OW 250
9184: PPUSH
9185: LD_EXP 25
9189: PPUSH
9190: CALL_OW 251
9194: PPUSH
9195: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9206: LD_INT 2
9208: PPUSH
9209: LD_EXP 34
9213: PPUSH
9214: CALL_OW 292
9218: PUSH
9219: LD_EXP 34
9223: PPUSH
9224: LD_EXP 25
9228: PPUSH
9229: CALL_OW 296
9233: PUSH
9234: LD_INT 8
9236: LESS
9237: PUSH
9238: LD_EXP 34
9242: PPUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 21
9255: PUSH
9256: LD_INT 3
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 69
9271: PPUSH
9272: LD_EXP 34
9276: PPUSH
9277: CALL_OW 74
9281: PPUSH
9282: CALL_OW 296
9286: PUSH
9287: LD_INT 7
9289: LESS
9290: OR
9291: AND
9292: PUSH
9293: LD_EXP 34
9297: PPUSH
9298: LD_INT 10
9300: PPUSH
9301: CALL_OW 308
9305: NOT
9306: AND
9307: IFFALSE 9199
// InGameOn ;
9309: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9313: LD_EXP 34
9317: PPUSH
9318: CALL_OW 87
// if IsInUnit ( Heike ) then
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( Heike ) ;
9333: LD_EXP 25
9337: PPUSH
9338: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9342: LD_EXP 34
9346: PUSH
9347: LD_EXP 27
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: LD_EXP 25
9360: PPUSH
9361: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9365: LD_EXP 25
9369: PPUSH
9370: LD_EXP 34
9374: PPUSH
9375: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9379: LD_INT 22
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 91
9391: PUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 21
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: IFFALSE 9450
// begin Say ( Kurt , DKs-scout-1 ) ;
9426: LD_EXP 34
9430: PPUSH
9431: LD_STRING DKs-scout-1
9433: PPUSH
9434: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9438: LD_EXP 25
9442: PPUSH
9443: LD_STRING DH-scout-2
9445: PPUSH
9446: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9450: LD_EXP 25
9454: PPUSH
9455: CALL_OW 85
// if IsInUnit ( Heike ) then
9459: LD_EXP 25
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExit ( Heike ) ;
9470: LD_EXP 25
9474: PPUSH
9475: CALL 74908 0 1
// repeat wait ( 0 0$1 ) ;
9479: LD_INT 35
9481: PPUSH
9482: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9486: LD_EXP 25
9490: PPUSH
9491: LD_EXP 34
9495: PPUSH
9496: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9500: LD_EXP 25
9504: PPUSH
9505: LD_EXP 34
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 6
9517: LESS
9518: IFFALSE 9479
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9520: LD_EXP 34
9524: PUSH
9525: LD_EXP 27
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: LD_EXP 25
9538: PPUSH
9539: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9543: LD_EXP 34
9547: PPUSH
9548: LD_STRING DKs-scout-3
9550: PPUSH
9551: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9555: LD_EXP 30
9559: PUSH
9560: LD_EXP 30
9564: PPUSH
9565: LD_EXP 34
9569: PPUSH
9570: CALL_OW 296
9574: PUSH
9575: LD_INT 15
9577: LESS
9578: AND
9579: IFFALSE 9769
// begin if IsInUnit ( Kaia ) then
9581: LD_EXP 30
9585: PPUSH
9586: CALL_OW 310
9590: IFFALSE 9601
// ComExitBuilding ( Kaia ) ;
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 122
// wait ( 0 0$1 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 34
9617: PPUSH
9618: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9622: LD_INT 35
9624: PPUSH
9625: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9629: LD_EXP 30
9633: PPUSH
9634: LD_EXP 34
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 6
9646: LESS
9647: IFFALSE 9622
// ComTurnUnit ( Kaia , Kurt ) ;
9649: LD_EXP 30
9653: PPUSH
9654: LD_EXP 34
9658: PPUSH
9659: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9663: LD_EXP 30
9667: PPUSH
9668: LD_STRING DK-scout-4
9670: PPUSH
9671: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9675: LD_EXP 34
9679: PPUSH
9680: LD_EXP 30
9684: PPUSH
9685: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9689: LD_EXP 34
9693: PPUSH
9694: LD_STRING DKs-scout-5
9696: PPUSH
9697: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9701: LD_EXP 30
9705: PPUSH
9706: LD_STRING DK-scout-6
9708: PPUSH
9709: CALL_OW 88
// if Mike then
9713: LD_EXP 27
9717: IFFALSE 9769
// begin Say ( Mike , DM-scout-7 ) ;
9719: LD_EXP 27
9723: PPUSH
9724: LD_STRING DM-scout-7
9726: PPUSH
9727: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9731: LD_EXP 30
9735: PPUSH
9736: LD_EXP 27
9740: PPUSH
9741: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9745: LD_EXP 30
9749: PPUSH
9750: LD_STRING DK-scout-8
9752: PPUSH
9753: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9757: LD_EXP 27
9761: PPUSH
9762: LD_STRING DM-scout-9
9764: PPUSH
9765: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9769: LD_INT 184
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: LD_INT 2
9777: PPUSH
9778: LD_INT 12
9780: NEG
9781: PPUSH
9782: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9786: LD_INT 184
9788: PPUSH
9789: LD_INT 100
9791: PPUSH
9792: LD_INT 2
9794: PPUSH
9795: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9799: LD_INT 184
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DKs-scout-10
9816: PPUSH
9817: CALL_OW 88
// wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9828: LD_INT 144
9830: PPUSH
9831: LD_INT 65
9833: PPUSH
9834: LD_INT 2
9836: PPUSH
9837: LD_INT 12
9839: NEG
9840: PPUSH
9841: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9845: LD_INT 144
9847: PPUSH
9848: LD_INT 65
9850: PPUSH
9851: LD_INT 2
9853: PPUSH
9854: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9858: LD_INT 144
9860: PPUSH
9861: LD_INT 65
9863: PPUSH
9864: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9868: LD_EXP 34
9872: PPUSH
9873: LD_STRING DKs-scout-11
9875: PPUSH
9876: CALL_OW 88
// wait ( 0 0$1 ) ;
9880: LD_INT 35
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9887: LD_EXP 34
9891: PPUSH
9892: CALL_OW 87
// if Mike and not Givi then
9896: LD_EXP 27
9900: PUSH
9901: LD_EXP 26
9905: NOT
9906: AND
9907: IFFALSE 9933
// begin Say ( Mike , DM-scout-a-1 ) ;
9909: LD_EXP 27
9913: PPUSH
9914: LD_STRING DM-scout-a-1
9916: PPUSH
9917: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9921: LD_EXP 25
9925: PPUSH
9926: LD_STRING DH-scout-a-2
9928: PPUSH
9929: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9933: LD_EXP 34
9937: PUSH
9938: LD_EXP 27
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: LD_INT 2
9949: PPUSH
9950: CALL_OW 235
// InGameOff ;
9954: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9958: LD_STRING Hill
9960: PPUSH
9961: CALL_OW 337
// Hint ( BunkerHill ) ;
9965: LD_STRING BunkerHill
9967: PPUSH
9968: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
9972: LD_INT 20
9974: PPUSH
9975: LD_INT 1
9977: PPUSH
9978: CALL_OW 424
// allowToPatrol := true ;
9982: LD_ADDR_EXP 12
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9990: LD_INT 3150
9992: PPUSH
9993: CALL_OW 67
// InitHc ;
9997: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10001: LD_ADDR_VAR 0 1
10005: PUSH
10006: DOUBLE
10007: LD_INT 1
10009: DEC
10010: ST_TO_ADDR
10011: LD_INT 3
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: LD_INT 2
10019: PUSH
10020: LD_INT 2
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: PUSH
10029: LD_OWVAR 67
10033: ARRAY
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10303
// begin uc_side := 2 ;
10038: LD_ADDR_OWVAR 20
10042: PUSH
10043: LD_INT 2
10045: ST_TO_ADDR
// uc_nation := 2 ;
10046: LD_ADDR_OWVAR 21
10050: PUSH
10051: LD_INT 2
10053: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10054: LD_INT 0
10056: PPUSH
10057: LD_INT 1
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: LD_INT 1
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_VAR 0 1
10075: PUSH
10076: LD_INT 3
10078: MOD
10079: PUSH
10080: LD_INT 1
10082: PLUS
10083: ARRAY
10084: PPUSH
10085: LD_INT 3
10087: PUSH
10088: LD_INT 2
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 2
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: PUSH
10103: LD_OWVAR 67
10107: ARRAY
10108: PPUSH
10109: CALL_OW 380
// un := CreateHuman ;
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: CALL_OW 44
10122: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10123: LD_ADDR_EXP 37
10127: PUSH
10128: LD_EXP 37
10132: PUSH
10133: LD_VAR 0 2
10137: UNION
10138: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10139: LD_INT 2
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: LD_INT 13
10147: PPUSH
10148: LD_INT 2
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_VAR 0 1
10162: PUSH
10163: LD_INT 2
10165: MOD
10166: PUSH
10167: LD_INT 1
10169: PLUS
10170: ARRAY
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: LD_INT 27
10177: PUSH
10178: LD_INT 25
10180: PUSH
10181: LD_INT 27
10183: PUSH
10184: LD_INT 23
10186: PUSH
10187: LD_INT 23
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: PUSH
10197: LD_OWVAR 67
10201: PUSH
10202: LD_INT 0
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 12
10212: PLUS
10213: ARRAY
10214: PPUSH
10215: LD_INT 77
10217: PPUSH
10218: CALL 370 0 7
// veh := CreateVehicle ;
10222: LD_ADDR_VAR 0 3
10226: PUSH
10227: CALL_OW 45
10231: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 2
10239: PPUSH
10240: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10244: LD_VAR 0 3
10248: PPUSH
10249: LD_INT 178
10251: PPUSH
10252: LD_INT 2
10254: PPUSH
10255: LD_INT 2
10257: PPUSH
10258: LD_INT 0
10260: PPUSH
10261: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_VAR 0 3
10274: PPUSH
10275: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_INT 183
10286: PPUSH
10287: LD_INT 11
10289: PPUSH
10290: CALL_OW 111
// wait ( 0 0$2 ) ;
10294: LD_INT 70
10296: PPUSH
10297: CALL_OW 67
// end ;
10301: GO 10035
10303: POP
10304: POP
// end ;
10305: PPOPN 3
10307: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10308: LD_EXP 4
10312: PUSH
10313: LD_EXP 35
10317: PPUSH
10318: CALL_OW 302
10322: AND
10323: IFFALSE 10372
10325: GO 10327
10327: DISABLE
// begin DialogueOn ;
10328: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10332: LD_EXP 35
10336: PPUSH
10337: LD_STRING DA-lab-1
10339: PPUSH
10340: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10344: LD_EXP 35
10348: PPUSH
10349: LD_STRING DA-lab-2
10351: PPUSH
10352: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10356: LD_EXP 25
10360: PPUSH
10361: LD_STRING DH-lab-3
10363: PPUSH
10364: CALL_OW 88
// DialogueOff ;
10368: CALL_OW 7
// end ;
10372: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10373: LD_INT 17
10375: PPUSH
10376: LD_INT 2
10378: PPUSH
10379: CALL_OW 321
10383: PUSH
10384: LD_INT 2
10386: EQUAL
10387: IFFALSE 10519
10389: GO 10391
10391: DISABLE
10392: LD_INT 0
10394: PPUSH
// begin DialogueOn ;
10395: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10399: LD_EXP 35
10403: PPUSH
10404: LD_STRING DA-Cam-1
10406: PPUSH
10407: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10411: LD_EXP 35
10415: PPUSH
10416: LD_STRING DA-Cam-2
10418: PPUSH
10419: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10423: LD_EXP 35
10427: PPUSH
10428: LD_STRING DA-Cam-3
10430: PPUSH
10431: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10435: LD_EXP 25
10439: PPUSH
10440: LD_STRING DH-Cam-4
10442: PPUSH
10443: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10447: LD_EXP 30
10451: PPUSH
10452: LD_STRING DK-Cam-5
10454: PPUSH
10455: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10459: LD_EXP 30
10463: PPUSH
10464: LD_STRING DK-Cam-6
10466: PPUSH
10467: CALL_OW 88
// DialogueOff ;
10471: CALL_OW 7
// Query ( Camera ) ;
10475: LD_STRING Camera
10477: PPUSH
10478: CALL_OW 97
// hiddenCameraAllowed := true ;
10482: LD_ADDR_EXP 5
10486: PUSH
10487: LD_INT 1
10489: ST_TO_ADDR
// for i in camAreas do
10490: LD_ADDR_VAR 0 1
10494: PUSH
10495: LD_EXP 8
10499: PUSH
10500: FOR_IN
10501: IFFALSE 10517
// SetAreaMapShow ( i , 1 ) ;
10503: LD_VAR 0 1
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: CALL_OW 424
10515: GO 10500
10517: POP
10518: POP
// end ;
10519: PPOPN 1
10521: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10522: LD_EXP 8
10526: NOT
10527: PUSH
10528: LD_EXP 5
10532: AND
10533: IFFALSE 10631
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
// begin stop_talking := true ;
10541: LD_ADDR_OWVAR 56
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10549: LD_ADDR_VAR 0 1
10553: PUSH
10554: LD_INT 22
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 21
10566: PUSH
10567: LD_INT 1
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 23
10576: PUSH
10577: LD_INT 2
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: PUSH
10594: FOR_IN
10595: IFFALSE 10614
// AddExperience ( i , 2 , 450 ) ;
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_INT 2
10604: PPUSH
10605: LD_INT 450
10607: PPUSH
10608: CALL_OW 492
10612: GO 10594
10614: POP
10615: POP
// stop_talking := false ;
10616: LD_ADDR_OWVAR 56
10620: PUSH
10621: LD_INT 0
10623: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10624: LD_STRING ACH_CAMERA
10626: PPUSH
10627: CALL_OW 543
// end ;
10631: PPOPN 1
10633: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10634: LD_EXP 9
10638: PUSH
10639: LD_EXP 11
10643: NOT
10644: AND
10645: IFFALSE 10704
10647: GO 10649
10649: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10650: LD_EXP 9
10654: PPUSH
10655: CALL_OW 250
10659: PPUSH
10660: LD_EXP 9
10664: PPUSH
10665: CALL_OW 251
10669: PPUSH
10670: LD_INT 2
10672: PPUSH
10673: LD_INT 6
10675: NEG
10676: PPUSH
10677: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10681: LD_EXP 9
10685: PPUSH
10686: CALL_OW 87
// wait ( 0 0$1 ) ;
10690: LD_INT 35
10692: PPUSH
10693: CALL_OW 67
// YouLost ( Spotted ) ;
10697: LD_STRING Spotted
10699: PPUSH
10700: CALL_OW 104
// end ;
10704: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10705: LD_INT 3
10707: PUSH
10708: LD_INT 6
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PPUSH
10715: LD_INT 2
10717: PPUSH
10718: LD_EXP 47
10722: PPUSH
10723: CALL 1034 0 3
10727: IFFALSE 10760
10729: GO 10731
10731: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10732: LD_ADDR_EXP 9
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 6
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: LD_INT 2
10749: PPUSH
10750: LD_EXP 47
10754: PPUSH
10755: CALL 1034 0 3
10759: ST_TO_ADDR
10760: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10761: LD_INT 22
10763: PUSH
10764: LD_INT 6
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 30
10773: PUSH
10774: LD_INT 32
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: LD_INT 24
10786: PUSH
10787: LD_INT 1000
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: PPUSH
10803: CALL_OW 69
10807: IFFALSE 10868
10809: GO 10811
10811: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10812: LD_ADDR_EXP 9
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_INT 6
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 30
10829: PUSH
10830: LD_INT 32
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 3
10839: PUSH
10840: LD_INT 24
10842: PUSH
10843: LD_INT 1000
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: PPUSH
10859: CALL_OW 69
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: ST_TO_ADDR
10868: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
10869: LD_EXP 9
10873: PUSH
10874: LD_INT 21
10876: PPUSH
10877: LD_INT 21
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 3
10889: PUSH
10890: LD_INT 24
10892: PUSH
10893: LD_INT 1000
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PPUSH
10908: CALL_OW 70
10912: AND
10913: IFFALSE 11152
10915: GO 10917
10917: DISABLE
10918: LD_INT 0
10920: PPUSH
10921: PPUSH
10922: PPUSH
10923: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10924: LD_ADDR_VAR 0 4
10928: PUSH
10929: LD_EXP 42
10933: PUSH
10934: LD_EXP 44
10938: PUSH
10939: LD_EXP 45
10943: UNION
10944: PPUSH
10945: LD_INT 3
10947: PUSH
10948: LD_INT 25
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 72
10966: UNION
10967: ST_TO_ADDR
// for i in noncombat do
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_VAR 0 4
10977: PUSH
10978: FOR_IN
10979: IFFALSE 11075
// begin if IsInUnit ( i ) then
10981: LD_VAR 0 1
10985: PPUSH
10986: CALL_OW 310
10990: IFFALSE 11001
// ComExitBuilding ( i ) ;
10992: LD_VAR 0 1
10996: PPUSH
10997: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11001: LD_VAR 0 1
11005: PPUSH
11006: LD_INT 114
11008: PPUSH
11009: LD_INT 97
11011: PPUSH
11012: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11016: LD_VAR 0 1
11020: PPUSH
11021: LD_INT 99
11023: PPUSH
11024: LD_INT 128
11026: PPUSH
11027: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11031: LD_VAR 0 1
11035: PPUSH
11036: LD_INT 91
11038: PPUSH
11039: LD_INT 145
11041: PPUSH
11042: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11046: LD_VAR 0 1
11050: PPUSH
11051: LD_INT 82
11053: PPUSH
11054: LD_INT 153
11056: PPUSH
11057: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11061: LD_VAR 0 1
11065: PPUSH
11066: LD_INT 16
11068: PPUSH
11069: CALL_OW 173
// end ;
11073: GO 10978
11075: POP
11076: POP
// if not allowHeikeAttack then
11077: LD_EXP 11
11081: NOT
11082: IFFALSE 11086
// exit ;
11084: GO 11152
// wait ( 0 0$05 ) ;
11086: LD_INT 175
11088: PPUSH
11089: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11093: LD_EXP 40
11097: PPUSH
11098: LD_STRING D9a-Kur-1
11100: PPUSH
11101: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11105: LD_EXP 43
11109: PPUSH
11110: LD_STRING D9a-Bur-1
11112: PPUSH
11113: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11117: LD_EXP 40
11121: PPUSH
11122: LD_STRING D9a-Kur-2
11124: PPUSH
11125: CALL_OW 94
// omicronFall := true ;
11129: LD_ADDR_EXP 13
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11137: LD_INT 105
11139: PPUSH
11140: CALL_OW 67
// retreatFromOmicron := true ;
11144: LD_ADDR_EXP 20
11148: PUSH
11149: LD_INT 1
11151: ST_TO_ADDR
// end ;
11152: PPOPN 4
11154: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11155: LD_INT 16
11157: PPUSH
11158: LD_INT 3
11160: PUSH
11161: LD_INT 22
11163: PUSH
11164: LD_INT 2
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 23
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 70
11193: IFFALSE 11276
11195: GO 11197
11197: DISABLE
11198: LD_INT 0
11200: PPUSH
// begin enable ;
11201: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11202: LD_ADDR_VAR 0 1
11206: PUSH
11207: LD_INT 16
11209: PPUSH
11210: LD_INT 3
11212: PUSH
11213: LD_INT 22
11215: PUSH
11216: LD_INT 2
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 23
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PPUSH
11241: CALL_OW 70
11245: PUSH
11246: FOR_IN
11247: IFFALSE 11274
// begin escapeCounter := escapeCounter + 1 ;
11249: LD_ADDR_EXP 19
11253: PUSH
11254: LD_EXP 19
11258: PUSH
11259: LD_INT 1
11261: PLUS
11262: ST_TO_ADDR
// RemoveUnit ( i ) ;
11263: LD_VAR 0 1
11267: PPUSH
11268: CALL_OW 64
// end ;
11272: GO 11246
11274: POP
11275: POP
// end ;
11276: PPOPN 1
11278: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11279: LD_OWVAR 1
11283: PUSH
11284: LD_INT 13650
11286: PUSH
11287: LD_INT 0
11289: PPUSH
11290: LD_INT 3150
11292: PPUSH
11293: CALL_OW 12
11297: PLUS
11298: GREATEREQUAL
11299: IFFALSE 11308
11301: GO 11303
11303: DISABLE
// SmallAmericanReinforcements ;
11304: CALL 6615 0 0
11308: END
// every 0 0$1 trigger tick >= 9 9$15 do
11309: LD_OWVAR 1
11313: PUSH
11314: LD_INT 19425
11316: GREATEREQUAL
11317: IFFALSE 11382
11319: GO 11321
11321: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11322: LD_EXP 48
11326: PPUSH
11327: LD_INT 21
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 72
11341: PPUSH
11342: LD_INT 62
11344: PPUSH
11345: LD_INT 22
11347: PPUSH
11348: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11352: LD_EXP 49
11356: PPUSH
11357: LD_INT 69
11359: PPUSH
11360: LD_INT 27
11362: PPUSH
11363: CALL_OW 111
// wait ( 1 1$00 ) ;
11367: LD_INT 2100
11369: PPUSH
11370: CALL_OW 67
// startAttackOnOmicron := true ;
11374: LD_ADDR_EXP 6
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// end ;
11382: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11383: LD_EXP 22
11387: PUSH
11388: LD_INT 0
11390: EQUAL
11391: IFFALSE 13408
11393: GO 11395
11395: DISABLE
11396: LD_INT 0
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11405: LD_INT 5
11407: PPUSH
11408: LD_INT 2
11410: PPUSH
11411: CALL_OW 343
// PrepareOmarForces ;
11415: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11419: LD_INT 105
11421: PPUSH
11422: CALL_OW 67
// allowHeikeAttack := true ;
11426: LD_ADDR_EXP 11
11430: PUSH
11431: LD_INT 1
11433: ST_TO_ADDR
// activeGrishkoAI := false ;
11434: LD_ADDR_EXP 10
11438: PUSH
11439: LD_INT 0
11441: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11442: LD_INT 20
11444: PPUSH
11445: LD_INT 0
11447: PPUSH
11448: CALL_OW 424
// if not hillBase then
11452: LD_EXP 15
11456: NOT
11457: IFFALSE 11466
// ChangeMissionObjectives ( HillDone ) ;
11459: LD_STRING HillDone
11461: PPUSH
11462: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11466: LD_EXP 33
11470: PPUSH
11471: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_INT 22
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 21
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 69
11508: PUSH
11509: FOR_IN
11510: IFFALSE 11534
// if HasTask ( i ) then
11512: LD_VAR 0 1
11516: PPUSH
11517: CALL_OW 314
11521: IFFALSE 11532
// ComHold ( i ) ;
11523: LD_VAR 0 1
11527: PPUSH
11528: CALL_OW 140
11532: GO 11509
11534: POP
11535: POP
// DialogueOn ;
11536: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11540: LD_EXP 33
11544: PPUSH
11545: LD_STRING DO-assault-1
11547: PPUSH
11548: CALL_OW 94
// DialogueOff ;
11552: CALL_OW 7
// game_speed := 4 ;
11556: LD_ADDR_OWVAR 65
11560: PUSH
11561: LD_INT 4
11563: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11564: LD_ADDR_VAR 0 1
11568: PUSH
11569: LD_EXP 46
11573: PPUSH
11574: LD_INT 3
11576: PUSH
11577: LD_INT 54
11579: PUSH
11580: EMPTY
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 72
11591: PUSH
11592: FOR_IN
11593: IFFALSE 11612
// ComMoveXY ( i , 226 , 114 ) ;
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_INT 226
11602: PPUSH
11603: LD_INT 114
11605: PPUSH
11606: CALL_OW 111
11610: GO 11592
11612: POP
11613: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11614: LD_EXP 41
11618: PPUSH
11619: LD_INT 22
11621: PUSH
11622: LD_INT 6
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 30
11631: PUSH
11632: LD_INT 4
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PPUSH
11648: LD_EXP 41
11652: PPUSH
11653: CALL_OW 74
11657: PPUSH
11658: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11662: LD_STRING Attack
11664: PPUSH
11665: CALL_OW 337
// music_class := music_combat ;
11669: LD_ADDR_OWVAR 72
11673: PUSH
11674: LD_INT 1
11676: ST_TO_ADDR
// music_nat := 4 ;
11677: LD_ADDR_OWVAR 71
11681: PUSH
11682: LD_INT 4
11684: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11685: LD_INT 5
11687: PPUSH
11688: LD_EXP 41
11692: PPUSH
11693: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11697: LD_INT 6
11699: PPUSH
11700: LD_EXP 38
11704: PPUSH
11705: LD_INT 25
11707: PUSH
11708: LD_INT 1
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PPUSH
11715: CALL_OW 72
11719: PUSH
11720: LD_INT 4
11722: ARRAY
11723: PPUSH
11724: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11728: LD_ADDR_VAR 0 1
11732: PUSH
11733: LD_EXP 38
11737: PPUSH
11738: LD_INT 3
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 4
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PPUSH
11755: CALL_OW 72
11759: PUSH
11760: FOR_IN
11761: IFFALSE 11780
// ComAgressiveMove ( i , 221 , 110 ) ;
11763: LD_VAR 0 1
11767: PPUSH
11768: LD_INT 221
11770: PPUSH
11771: LD_INT 110
11773: PPUSH
11774: CALL_OW 114
11778: GO 11760
11780: POP
11781: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11782: LD_EXP 38
11786: PPUSH
11787: LD_INT 25
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 72
11801: PPUSH
11802: LD_INT 214
11804: PPUSH
11805: LD_INT 124
11807: PPUSH
11808: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11812: LD_EXP 38
11816: PPUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PPUSH
11827: CALL_OW 72
11831: PUSH
11832: LD_INT 4
11834: ARRAY
11835: PPUSH
11836: LD_INT 214
11838: PPUSH
11839: LD_INT 114
11841: PPUSH
11842: LD_INT 0
11844: PPUSH
11845: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11849: LD_EXP 41
11853: PPUSH
11854: LD_STRING D9-Gri-1
11856: PPUSH
11857: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11861: LD_EXP 40
11865: PPUSH
11866: LD_STRING D9-Kur-1
11868: PPUSH
11869: CALL_OW 94
// wait ( 0 0$1 ) ;
11873: LD_INT 35
11875: PPUSH
11876: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11880: LD_EXP 33
11884: PPUSH
11885: LD_INT 233
11887: PPUSH
11888: LD_INT 130
11890: PPUSH
11891: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11895: LD_EXP 41
11899: PPUSH
11900: LD_STRING D9-Gri-2
11902: PPUSH
11903: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11907: LD_EXP 40
11911: PPUSH
11912: LD_STRING D9-Kur-2
11914: PPUSH
11915: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11919: LD_EXP 41
11923: PPUSH
11924: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11928: LD_EXP 41
11932: PPUSH
11933: LD_INT 211
11935: PPUSH
11936: LD_INT 104
11938: PPUSH
11939: CALL_OW 171
// AddComHold ( Grishko ) ;
11943: LD_EXP 41
11947: PPUSH
11948: CALL_OW 200
// repeat wait ( 3 ) ;
11952: LD_INT 3
11954: PPUSH
11955: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11959: LD_EXP 41
11963: PPUSH
11964: CALL_OW 310
11968: NOT
11969: IFFALSE 11952
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11971: LD_EXP 38
11975: PPUSH
11976: LD_INT 34
11978: PUSH
11979: LD_INT 26
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL_OW 72
11990: PPUSH
11991: LD_EXP 41
11995: PPUSH
11996: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12000: LD_EXP 38
12004: PPUSH
12005: LD_INT 34
12007: PUSH
12008: LD_INT 26
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PPUSH
12015: CALL_OW 72
12019: PPUSH
12020: LD_INT 215
12022: PPUSH
12023: LD_INT 106
12025: PPUSH
12026: CALL_OW 174
// repeat wait ( 3 ) ;
12030: LD_INT 3
12032: PPUSH
12033: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12037: LD_EXP 41
12041: PPUSH
12042: CALL_OW 256
12046: PUSH
12047: LD_INT 1000
12049: LESS
12050: IFFALSE 12030
// NormalAttack ( 5 , Grishko ) ;
12052: LD_INT 5
12054: PPUSH
12055: LD_EXP 41
12059: PPUSH
12060: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12064: LD_INT 6
12066: PPUSH
12067: LD_EXP 38
12071: PPUSH
12072: LD_INT 25
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: PUSH
12087: LD_INT 4
12089: ARRAY
12090: PPUSH
12091: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12095: LD_EXP 41
12099: PPUSH
12100: LD_STRING D9-Gri-3
12102: PPUSH
12103: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12107: LD_EXP 40
12111: PPUSH
12112: LD_STRING D9-Kur-3
12114: PPUSH
12115: CALL_OW 94
// music_class := music_auto ;
12119: LD_ADDR_OWVAR 72
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// music_nat := music_auto ;
12127: LD_ADDR_OWVAR 71
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// for i in omarSquad do
12135: LD_ADDR_VAR 0 1
12139: PUSH
12140: LD_EXP 38
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12288
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12148: LD_VAR 0 1
12152: PPUSH
12153: CALL_OW 247
12157: PUSH
12158: LD_INT 2
12160: EQUAL
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 256
12171: PUSH
12172: LD_INT 1000
12174: LESS
12175: AND
12176: IFFALSE 12242
// begin driver := IsDrivenBy ( i ) ;
12178: LD_ADDR_VAR 0 2
12182: PUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL_OW 311
12192: ST_TO_ADDR
// veh := i ;
12193: LD_ADDR_VAR 0 3
12197: PUSH
12198: LD_VAR 0 1
12202: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12203: LD_VAR 0 2
12207: PPUSH
12208: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12212: LD_VAR 0 2
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12226: LD_VAR 0 2
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: CALL_OW 180
// end else
12240: GO 12286
// if GetLives ( i ) < 500 then
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL_OW 256
12251: PUSH
12252: LD_INT 500
12254: LESS
12255: IFFALSE 12286
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12257: LD_EXP 38
12261: PPUSH
12262: LD_INT 25
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 72
12276: PPUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: CALL_OW 188
// end ; end ;
12286: GO 12145
12288: POP
12289: POP
// repeat wait ( 0 0$1 ) ;
12290: LD_INT 35
12292: PPUSH
12293: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12297: LD_EXP 38
12301: PPUSH
12302: LD_INT 3
12304: PUSH
12305: LD_INT 24
12307: PUSH
12308: LD_INT 1000
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 21
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 72
12337: NOT
12338: PUSH
12339: LD_EXP 38
12343: PPUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 24
12349: PUSH
12350: LD_INT 250
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: NOT
12366: AND
12367: IFFALSE 12290
// wait ( 0 0$2 ) ;
12369: LD_INT 70
12371: PPUSH
12372: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12376: LD_ADDR_VAR 0 5
12380: PUSH
12381: LD_EXP 38
12385: PPUSH
12386: LD_INT 58
12388: PUSH
12389: EMPTY
12390: LIST
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 2
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PPUSH
12406: CALL_OW 72
12410: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12411: LD_ADDR_VAR 0 6
12415: PUSH
12416: LD_EXP 38
12420: PPUSH
12421: LD_INT 25
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: LD_INT 55
12436: PUSH
12437: EMPTY
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PPUSH
12448: CALL_OW 72
12452: ST_TO_ADDR
// for i := 1 to tmp do
12453: LD_ADDR_VAR 0 1
12457: PUSH
12458: DOUBLE
12459: LD_INT 1
12461: DEC
12462: ST_TO_ADDR
12463: LD_VAR 0 5
12467: PUSH
12468: FOR_TO
12469: IFFALSE 12499
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12471: LD_VAR 0 6
12475: PUSH
12476: LD_VAR 0 1
12480: ARRAY
12481: PPUSH
12482: LD_VAR 0 5
12486: PUSH
12487: LD_VAR 0 1
12491: ARRAY
12492: PPUSH
12493: CALL_OW 120
12497: GO 12468
12499: POP
12500: POP
// wait ( 0 0$5 ) ;
12501: LD_INT 175
12503: PPUSH
12504: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12508: LD_EXP 38
12512: PPUSH
12513: LD_INT 199
12515: PPUSH
12516: LD_INT 141
12518: PPUSH
12519: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12523: LD_EXP 33
12527: PPUSH
12528: LD_INT 190
12530: PPUSH
12531: LD_INT 143
12533: PPUSH
12534: CALL_OW 114
// AddComHold ( Omar ) ;
12538: LD_EXP 33
12542: PPUSH
12543: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12547: LD_EXP 38
12551: PPUSH
12552: LD_INT 2
12554: PUSH
12555: LD_INT 25
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 25
12567: PUSH
12568: LD_INT 4
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: PPUSH
12580: CALL_OW 72
12584: PPUSH
12585: LD_INT 161
12587: PPUSH
12588: LD_INT 130
12590: PPUSH
12591: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12595: LD_EXP 38
12599: PPUSH
12600: LD_INT 25
12602: PUSH
12603: LD_INT 1
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 72
12614: PPUSH
12615: LD_INT 163
12617: PPUSH
12618: LD_INT 122
12620: PPUSH
12621: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12625: LD_EXP 38
12629: PPUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 72
12644: PUSH
12645: LD_INT 4
12647: ARRAY
12648: PPUSH
12649: LD_INT 165
12651: PPUSH
12652: LD_INT 118
12654: PPUSH
12655: LD_INT 0
12657: PPUSH
12658: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12662: LD_EXP 38
12666: PPUSH
12667: LD_INT 25
12669: PUSH
12670: LD_INT 1
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: CALL_OW 72
12681: PUSH
12682: LD_INT 4
12684: ARRAY
12685: PPUSH
12686: LD_INT 159
12688: PPUSH
12689: LD_INT 116
12691: PPUSH
12692: LD_INT 0
12694: PPUSH
12695: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12699: LD_EXP 38
12703: PPUSH
12704: LD_INT 21
12706: PUSH
12707: LD_INT 2
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 72
12718: PPUSH
12719: LD_INT 169
12721: PPUSH
12722: LD_INT 114
12724: PPUSH
12725: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12729: LD_INT 35
12731: PPUSH
12732: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12736: LD_ADDR_VAR 0 5
12740: PUSH
12741: LD_EXP 38
12745: PPUSH
12746: LD_INT 25
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PPUSH
12756: CALL_OW 72
12760: ST_TO_ADDR
// for i in tmp do
12761: LD_ADDR_VAR 0 1
12765: PUSH
12766: LD_VAR 0 5
12770: PUSH
12771: FOR_IN
12772: IFFALSE 12869
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 256
12783: PUSH
12784: LD_INT 600
12786: LESS
12787: PUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: LD_INT 161
12795: PPUSH
12796: LD_INT 130
12798: PPUSH
12799: CALL_OW 297
12803: PUSH
12804: LD_INT 6
12806: GREATER
12807: AND
12808: IFFALSE 12825
// ComMoveXY ( i , 161 , 130 ) ;
12810: LD_VAR 0 1
12814: PPUSH
12815: LD_INT 161
12817: PPUSH
12818: LD_INT 130
12820: PPUSH
12821: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 256
12834: PUSH
12835: LD_INT 1000
12837: EQUAL
12838: PUSH
12839: LD_VAR 0 1
12843: PPUSH
12844: CALL_OW 314
12848: NOT
12849: AND
12850: IFFALSE 12867
// ComAgressiveMove ( i , 160 , 109 ) ;
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_INT 160
12859: PPUSH
12860: LD_INT 109
12862: PPUSH
12863: CALL_OW 114
// end ;
12867: GO 12771
12869: POP
12870: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12871: LD_ADDR_VAR 0 5
12875: PUSH
12876: LD_EXP 38
12880: PPUSH
12881: LD_INT 21
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 72
12895: ST_TO_ADDR
// for i in tmp do
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: LD_VAR 0 5
12905: PUSH
12906: FOR_IN
12907: IFFALSE 13173
// begin tmp2 := IsDrivenBy ( i ) ;
12909: LD_ADDR_VAR 0 6
12913: PUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 311
12923: ST_TO_ADDR
// if not tmp2 then
12924: LD_VAR 0 6
12928: NOT
12929: IFFALSE 12933
// continue ;
12931: GO 12906
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12933: LD_VAR 0 1
12937: PPUSH
12938: CALL_OW 256
12942: PUSH
12943: LD_INT 600
12945: GREATEREQUAL
12946: PUSH
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 110
12956: PUSH
12957: LD_INT 1
12959: EQUAL
12960: AND
12961: IFFALSE 12975
// SetTag ( i , 0 ) ;
12963: LD_VAR 0 1
12967: PPUSH
12968: LD_INT 0
12970: PPUSH
12971: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 256
12984: PUSH
12985: LD_INT 600
12987: GREATEREQUAL
12988: PUSH
12989: LD_VAR 0 1
12993: PPUSH
12994: CALL_OW 110
12998: NOT
12999: AND
13000: IFFALSE 13026
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13002: LD_VAR 0 1
13006: PPUSH
13007: LD_VAR 0 7
13011: PPUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 74
13021: PPUSH
13022: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 256
13035: PUSH
13036: LD_INT 600
13038: LESS
13039: PUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: CALL_OW 110
13049: NOT
13050: AND
13051: IFFALSE 13080
// begin SetTag ( i , 1 ) ;
13053: LD_VAR 0 1
13057: PPUSH
13058: LD_INT 1
13060: PPUSH
13061: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_INT 202
13072: PPUSH
13073: LD_INT 150
13075: PPUSH
13076: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 110
13089: PUSH
13090: LD_INT 1
13092: EQUAL
13093: PUSH
13094: LD_VAR 0 1
13098: PPUSH
13099: LD_INT 202
13101: PPUSH
13102: LD_INT 150
13104: PPUSH
13105: CALL_OW 297
13109: PUSH
13110: LD_INT 6
13112: LESS
13113: AND
13114: PUSH
13115: LD_VAR 0 6
13119: AND
13120: IFFALSE 13171
// begin ComExitVehicle ( tmp2 ) ;
13122: LD_VAR 0 6
13126: PPUSH
13127: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13131: LD_VAR 0 6
13135: PPUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13145: LD_VAR 0 6
13149: PPUSH
13150: LD_INT 700
13152: PPUSH
13153: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13157: LD_VAR 0 6
13161: PPUSH
13162: LD_VAR 0 1
13166: PPUSH
13167: CALL_OW 180
// end ; end ;
13171: GO 12906
13173: POP
13174: POP
// until kirovDestroyed ;
13175: LD_EXP 16
13179: IFFALSE 12729
// repeat wait ( 0 0$1 ) ;
13181: LD_INT 35
13183: PPUSH
13184: CALL_OW 67
// for i in omarSquad union Omar do
13188: LD_ADDR_VAR 0 1
13192: PUSH
13193: LD_EXP 38
13197: PUSH
13198: LD_EXP 33
13202: UNION
13203: PUSH
13204: FOR_IN
13205: IFFALSE 13375
// if IsInArea ( i , southRoadArea ) then
13207: LD_VAR 0 1
13211: PPUSH
13212: LD_INT 15
13214: PPUSH
13215: CALL_OW 308
13219: IFFALSE 13232
// RemoveUnit ( i ) else
13221: LD_VAR 0 1
13225: PPUSH
13226: CALL_OW 64
13230: GO 13373
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13232: LD_VAR 0 1
13236: PPUSH
13237: CALL_OW 257
13241: PUSH
13242: LD_INT 3
13244: EQUAL
13245: PUSH
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 310
13255: NOT
13256: AND
13257: PUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 5
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 251
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 21
13280: PUSH
13281: LD_INT 2
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 58
13290: PUSH
13291: EMPTY
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PPUSH
13300: CALL_OW 69
13304: AND
13305: IFFALSE 13358
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13307: LD_VAR 0 1
13311: PPUSH
13312: LD_INT 22
13314: PUSH
13315: LD_INT 5
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 21
13324: PUSH
13325: LD_INT 2
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 58
13334: PUSH
13335: EMPTY
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: PPUSH
13343: CALL_OW 69
13347: PUSH
13348: LD_INT 1
13350: ARRAY
13351: PPUSH
13352: CALL_OW 120
13356: GO 13373
// ComMoveXY ( i , 208 , 162 ) ;
13358: LD_VAR 0 1
13362: PPUSH
13363: LD_INT 208
13365: PPUSH
13366: LD_INT 162
13368: PPUSH
13369: CALL_OW 111
// end ;
13373: GO 13204
13375: POP
13376: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13377: LD_INT 22
13379: PUSH
13380: LD_INT 5
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 21
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PPUSH
13401: CALL_OW 69
13405: NOT
13406: IFFALSE 13181
// end ;
13408: PPOPN 7
13410: END
// every 0 0$1 trigger IsDead ( kirov ) do
13411: LD_INT 71
13413: PPUSH
13414: CALL_OW 301
13418: IFFALSE 13435
13420: GO 13422
13422: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13423: LD_EXP 25
13427: PPUSH
13428: LD_STRING DH-1-Kirov
13430: PPUSH
13431: CALL_OW 88
13435: END
// every 0 0$1 trigger See ( 2 , beria ) do
13436: LD_INT 2
13438: PPUSH
13439: LD_INT 106
13441: PPUSH
13442: CALL_OW 292
13446: IFFALSE 13463
13448: GO 13450
13450: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13451: LD_EXP 25
13455: PPUSH
13456: LD_STRING DH-1-Beria
13458: PPUSH
13459: CALL_OW 88
13463: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13464: LD_INT 2
13466: PPUSH
13467: LD_INT 112
13469: PPUSH
13470: CALL_OW 292
13474: IFFALSE 13741
13476: GO 13478
13478: DISABLE
// begin DialogueOn ;
13479: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13483: LD_INT 112
13485: PPUSH
13486: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13490: LD_EXP 25
13494: PPUSH
13495: LD_STRING DH-1-Kagan
13497: PPUSH
13498: CALL_OW 88
// if Kamil then
13502: LD_EXP 29
13506: IFFALSE 13544
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13508: LD_EXP 29
13512: PPUSH
13513: LD_STRING DKam-Kagan-2
13515: PPUSH
13516: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13520: LD_EXP 26
13524: PPUSH
13525: LD_STRING DG-Kagan-3
13527: PPUSH
13528: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13532: LD_EXP 26
13536: PPUSH
13537: LD_STRING DG-Kagan-4
13539: PPUSH
13540: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13544: LD_STRING KaganBase
13546: PPUSH
13547: CALL_OW 97
13551: PUSH
13552: LD_INT 1
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13655
13560: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13561: LD_EXP 25
13565: PPUSH
13566: LD_STRING DH-Kagan-5
13568: PPUSH
13569: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13573: LD_EXP 25
13577: PPUSH
13578: LD_STRING DH-Kagan-6
13580: PPUSH
13581: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13585: LD_EXP 36
13589: PPUSH
13590: LD_STRING DShar-Kagan-7
13592: PPUSH
13593: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13597: LD_EXP 25
13601: PPUSH
13602: LD_STRING DH-Kagan-8
13604: PPUSH
13605: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13609: LD_EXP 25
13613: PPUSH
13614: LD_STRING DH-Kagan-9
13616: PPUSH
13617: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13621: LD_EXP 36
13625: PPUSH
13626: LD_STRING DShar-Kagan-10
13628: PPUSH
13629: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13633: LD_EXP 25
13637: PPUSH
13638: LD_STRING DH-Kagan-11
13640: PPUSH
13641: CALL_OW 88
// kaganCaptured := true ;
13645: LD_ADDR_EXP 24
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// end ; 2 :
13653: GO 13737
13655: LD_INT 2
13657: DOUBLE
13658: EQUAL
13659: IFTRUE 13663
13661: GO 13736
13663: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13664: LD_INT 22
13666: PUSH
13667: LD_INT 8
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: PUSH
13679: LD_EXP 35
13683: AND
13684: IFFALSE 13698
// Say ( Heike , DH-Kagan-a-5 ) ;
13686: LD_EXP 25
13690: PPUSH
13691: LD_STRING DH-Kagan-a-5
13693: PPUSH
13694: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13698: LD_EXP 25
13702: PPUSH
13703: LD_STRING DH-Kagan-a-6
13705: PPUSH
13706: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13710: LD_EXP 25
13714: PPUSH
13715: LD_STRING DH-Kagan-a-7
13717: PPUSH
13718: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13722: LD_EXP 26
13726: PPUSH
13727: LD_STRING DG-Kagan-a-8
13729: PPUSH
13730: CALL_OW 88
// end ; end ;
13734: GO 13737
13736: POP
// DialogueOff ;
13737: CALL_OW 7
// end ;
13741: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13742: LD_EXP 18
13746: PUSH
13747: LD_INT 112
13749: PPUSH
13750: CALL_OW 255
13754: PUSH
13755: LD_INT 2
13757: EQUAL
13758: OR
13759: IFFALSE 13771
13761: GO 13763
13763: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13764: LD_STRING KaganDone
13766: PPUSH
13767: CALL_OW 337
13771: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13772: LD_EXP 6
13776: PUSH
13777: LD_EXP 48
13781: PPUSH
13782: LD_INT 95
13784: PUSH
13785: LD_INT 19
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: AND
13797: IFFALSE 13874
13799: GO 13801
13801: DISABLE
// begin DialogueOn ;
13802: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13806: LD_INT 63
13808: PPUSH
13809: LD_INT 32
13811: PPUSH
13812: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13816: LD_INT 63
13818: PPUSH
13819: LD_INT 32
13821: PPUSH
13822: LD_INT 2
13824: PPUSH
13825: LD_INT 12
13827: NEG
13828: PPUSH
13829: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13833: LD_EXP 25
13837: PPUSH
13838: LD_STRING DH-Omicron-1
13840: PPUSH
13841: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13845: LD_EXP 27
13849: PPUSH
13850: LD_STRING DM-Omicron-2
13852: PPUSH
13853: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13857: LD_INT 63
13859: PPUSH
13860: LD_INT 32
13862: PPUSH
13863: LD_INT 2
13865: PPUSH
13866: CALL_OW 331
// DialogueOff ;
13870: CALL_OW 7
// end ;
13874: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13875: LD_INT 2
13877: PPUSH
13878: LD_EXP 50
13882: PPUSH
13883: CALL_OW 292
13887: PUSH
13888: LD_EXP 50
13892: PPUSH
13893: CALL_OW 255
13897: PUSH
13898: LD_INT 2
13900: EQUAL
13901: OR
13902: PUSH
13903: LD_INT 106
13905: PPUSH
13906: CALL_OW 255
13910: PUSH
13911: LD_INT 2
13913: EQUAL
13914: OR
13915: PUSH
13916: LD_EXP 50
13920: PPUSH
13921: CALL_OW 302
13925: AND
13926: PUSH
13927: LD_EXP 25
13931: PPUSH
13932: CALL_OW 302
13936: AND
13937: PUSH
13938: LD_EXP 35
13942: PPUSH
13943: CALL_OW 302
13947: AND
13948: IFFALSE 14669
13950: GO 13952
13952: DISABLE
13953: LD_INT 0
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
// begin DialogueOn ;
13960: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13964: LD_INT 111
13966: PPUSH
13967: LD_INT 90
13969: PPUSH
13970: LD_INT 2
13972: PPUSH
13973: LD_INT 6
13975: NEG
13976: PPUSH
13977: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13981: LD_INT 111
13983: PPUSH
13984: LD_INT 90
13986: PPUSH
13987: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13991: LD_EXP 35
13995: PPUSH
13996: LD_STRING DA-Cap-1
13998: PPUSH
13999: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14003: LD_EXP 25
14007: PPUSH
14008: LD_STRING DH-Cap-2
14010: PPUSH
14011: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14015: LD_INT 111
14017: PPUSH
14018: LD_INT 90
14020: PPUSH
14021: LD_INT 2
14023: PPUSH
14024: CALL_OW 331
// DialogueOff ;
14028: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14032: LD_INT 35
14034: PPUSH
14035: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14039: LD_EXP 17
14043: PUSH
14044: LD_INT 106
14046: PPUSH
14047: CALL_OW 255
14051: PUSH
14052: LD_INT 2
14054: EQUAL
14055: OR
14056: PUSH
14057: LD_EXP 50
14061: PPUSH
14062: CALL_OW 255
14066: PUSH
14067: LD_INT 2
14069: EQUAL
14070: OR
14071: PUSH
14072: LD_EXP 50
14076: PPUSH
14077: CALL_OW 302
14081: AND
14082: PUSH
14083: LD_EXP 35
14087: PPUSH
14088: CALL_OW 302
14092: AND
14093: PUSH
14094: LD_INT 2
14096: PPUSH
14097: CALL_OW 463
14101: NOT
14102: AND
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_INT 3
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 92
14126: PUSH
14127: LD_INT 110
14129: PUSH
14130: LD_INT 95
14132: PUSH
14133: LD_INT 12
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: NOT
14152: AND
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 30
14166: PUSH
14167: LD_INT 5
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 92
14176: PUSH
14177: LD_INT 110
14179: PUSH
14180: LD_INT 95
14182: PUSH
14183: LD_INT 12
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PPUSH
14197: CALL_OW 69
14201: NOT
14202: AND
14203: IFFALSE 14032
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14205: LD_ADDR_VAR 0 2
14209: PUSH
14210: LD_EXP 37
14214: PUSH
14215: LD_EXP 28
14219: PUSH
14220: LD_EXP 29
14224: PUSH
14225: LD_EXP 31
14229: PUSH
14230: LD_EXP 30
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: UNION
14241: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: LD_VAR 0 2
14251: PPUSH
14252: LD_INT 50
14254: PUSH
14255: EMPTY
14256: LIST
14257: PPUSH
14258: CALL_OW 72
14262: ST_TO_ADDR
// if tmp < 2 then
14263: LD_VAR 0 2
14267: PUSH
14268: LD_INT 2
14270: LESS
14271: IFFALSE 14283
// q := 2 else
14273: LD_ADDR_VAR 0 4
14277: PUSH
14278: LD_INT 2
14280: ST_TO_ADDR
14281: GO 14296
// q := Query ( LabCap ) ;
14283: LD_ADDR_VAR 0 4
14287: PUSH
14288: LD_STRING LabCap
14290: PPUSH
14291: CALL_OW 97
14295: ST_TO_ADDR
// case q of 1 :
14296: LD_VAR 0 4
14300: PUSH
14301: LD_INT 1
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14633
14309: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14310: LD_INT 2
14312: PPUSH
14313: LD_EXP 50
14317: PPUSH
14318: CALL_OW 471
// labCaptured := true ;
14322: LD_ADDR_EXP 21
14326: PUSH
14327: LD_INT 1
14329: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14330: LD_EXP 25
14334: PPUSH
14335: LD_STRING DH-Cap-a-1
14337: PPUSH
14338: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14342: LD_EXP 35
14346: PPUSH
14347: LD_STRING DA-Cap-a-2
14349: PPUSH
14350: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14354: LD_ADDR_VAR 0 5
14358: PUSH
14359: LD_EXP 35
14363: PUSH
14364: LD_INT -3
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT -2
14373: PUSH
14374: LD_INT -4
14376: PUSH
14377: LD_EXP 25
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: ADD
14387: PUSH
14388: LD_INT -3
14390: PUSH
14391: EMPTY
14392: LIST
14393: ADD
14394: PUSH
14395: LD_VAR 0 2
14399: ADD
14400: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14401: LD_ADDR_VAR 0 3
14405: PUSH
14406: LD_STRING Select two characters to go with Aviradze
14408: PPUSH
14409: LD_INT 2
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: LD_VAR 0 5
14419: PPUSH
14420: EMPTY
14421: PPUSH
14422: CALL_OW 42
14426: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14427: LD_EXP 50
14431: PPUSH
14432: LD_INT 8
14434: PPUSH
14435: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14439: LD_EXP 35
14443: PPUSH
14444: LD_INT 8
14446: PPUSH
14447: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14451: LD_ADDR_EXP 39
14455: PUSH
14456: LD_EXP 35
14460: PUSH
14461: EMPTY
14462: LIST
14463: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14464: LD_EXP 35
14468: PPUSH
14469: CALL_OW 310
14473: IFFALSE 14484
// ComExit ( Aviradze ) ;
14475: LD_EXP 35
14479: PPUSH
14480: CALL 74908 0 1
// wait ( 3 ) ;
14484: LD_INT 3
14486: PPUSH
14487: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14491: LD_EXP 35
14495: PPUSH
14496: LD_EXP 50
14500: PPUSH
14501: CALL_OW 120
// for i := 1 to 2 do
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: DOUBLE
14511: LD_INT 1
14513: DEC
14514: ST_TO_ADDR
14515: LD_INT 2
14517: PUSH
14518: FOR_TO
14519: IFFALSE 14622
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14521: LD_ADDR_EXP 39
14525: PUSH
14526: LD_EXP 39
14530: PUSH
14531: LD_VAR 0 3
14535: PUSH
14536: LD_VAR 0 1
14540: ARRAY
14541: UNION
14542: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14543: LD_VAR 0 3
14547: PUSH
14548: LD_VAR 0 1
14552: ARRAY
14553: PPUSH
14554: LD_INT 8
14556: PPUSH
14557: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14561: LD_VAR 0 3
14565: PUSH
14566: LD_VAR 0 1
14570: ARRAY
14571: PPUSH
14572: CALL_OW 310
14576: IFFALSE 14593
// ComExit ( tmp2 [ i ] ) ;
14578: LD_VAR 0 3
14582: PUSH
14583: LD_VAR 0 1
14587: ARRAY
14588: PPUSH
14589: CALL 74908 0 1
// wait ( 3 ) ;
14593: LD_INT 3
14595: PPUSH
14596: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14600: LD_VAR 0 3
14604: PUSH
14605: LD_VAR 0 1
14609: ARRAY
14610: PPUSH
14611: LD_EXP 50
14615: PPUSH
14616: CALL_OW 120
// end ;
14620: GO 14518
14622: POP
14623: POP
// SetAchievement ( ACH_LAB ) ;
14624: LD_STRING ACH_LAB
14626: PPUSH
14627: CALL_OW 543
// end ; 2 :
14631: GO 14669
14633: LD_INT 2
14635: DOUBLE
14636: EQUAL
14637: IFTRUE 14641
14639: GO 14668
14641: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14642: LD_EXP 25
14646: PPUSH
14647: LD_STRING DH-Cap-b-1
14649: PPUSH
14650: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14654: LD_EXP 35
14658: PPUSH
14659: LD_STRING DA-Cap-b-2
14661: PPUSH
14662: CALL_OW 88
// end ; end ;
14666: GO 14669
14668: POP
// end ;
14669: PPOPN 5
14671: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14672: LD_INT 10
14674: PPUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 30
14687: PUSH
14688: LD_INT 31
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 70
14703: PUSH
14704: LD_INT 2
14706: GREATEREQUAL
14707: IFFALSE 14719
14709: GO 14711
14711: DISABLE
// SetAchievement ( ACH_KING ) ;
14712: LD_STRING ACH_KING
14714: PPUSH
14715: CALL_OW 543
14719: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14720: LD_EXP 11
14724: NOT
14725: PUSH
14726: LD_INT 10
14728: PPUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: LD_INT 30
14744: PUSH
14745: LD_INT 31
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 30
14754: PUSH
14755: LD_INT 4
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 70
14775: AND
14776: IFFALSE 14796
14778: GO 14780
14780: DISABLE
// begin hillBase := true ;
14781: LD_ADDR_EXP 15
14785: PUSH
14786: LD_INT 1
14788: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14789: LD_STRING HillDone
14791: PPUSH
14792: CALL_OW 337
// end ;
14796: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14797: LD_EXP 30
14801: PUSH
14802: LD_EXP 30
14806: PPUSH
14807: CALL_OW 256
14811: PUSH
14812: LD_INT 3
14814: LESS
14815: AND
14816: IFFALSE 14862
14818: GO 14820
14820: DISABLE
// begin DialogueOn ;
14821: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14825: LD_EXP 30
14829: PPUSH
14830: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14834: LD_EXP 30
14838: PPUSH
14839: LD_STRING DK-Kkilled-1
14841: PPUSH
14842: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14846: LD_EXP 25
14850: PPUSH
14851: LD_STRING DH-Kkilled-2
14853: PPUSH
14854: CALL_OW 88
// DialogueOff ;
14858: CALL_OW 7
// end ;
14862: END
// every 0 0$1 trigger kaiaKilledByRussian do
14863: LD_EXP 23
14867: IFFALSE 14884
14869: GO 14871
14871: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14872: LD_EXP 25
14876: PPUSH
14877: LD_STRING DH-Kkilled-3
14879: PPUSH
14880: CALL_OW 88
14884: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14885: LD_EXP 16
14889: PUSH
14890: LD_INT 106
14892: PPUSH
14893: CALL_OW 255
14897: PUSH
14898: LD_INT 2
14900: EQUAL
14901: PUSH
14902: LD_EXP 17
14906: OR
14907: AND
14908: PUSH
14909: LD_EXP 18
14913: PUSH
14914: LD_EXP 24
14918: PUSH
14919: LD_INT 112
14921: PPUSH
14922: CALL_OW 255
14926: PUSH
14927: LD_INT 2
14929: EQUAL
14930: AND
14931: OR
14932: AND
14933: IFFALSE 16122
14935: GO 14937
14937: DISABLE
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14944: LD_STRING GoToWest
14946: PPUSH
14947: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14951: LD_INT 17
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14961: LD_INT 35
14963: PPUSH
14964: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14968: LD_ADDR_VAR 0 2
14972: PUSH
14973: LD_INT 17
14975: PPUSH
14976: LD_INT 22
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 21
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 3
15011: PUSH
15012: LD_INT 58
15014: PUSH
15015: EMPTY
15016: LIST
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 70
15039: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: LD_INT 22
15047: PUSH
15048: LD_INT 2
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 3
15057: PUSH
15058: LD_INT 55
15060: PUSH
15061: EMPTY
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 2
15070: PUSH
15071: LD_INT 21
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 58
15096: PUSH
15097: EMPTY
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 0
15130: PLUS
15131: PUSH
15132: LD_VAR 0 3
15136: PUSH
15137: LD_INT 0
15139: PLUS
15140: EQUAL
15141: IFFALSE 14961
// SaveCharacters ( Heike , 04_1_Heike ) ;
15143: LD_EXP 25
15147: PPUSH
15148: LD_STRING 04_1_Heike
15150: PPUSH
15151: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15155: LD_EXP 35
15159: PUSH
15160: LD_EXP 35
15164: PUSH
15165: LD_EXP 39
15169: IN
15170: NOT
15171: AND
15172: IFFALSE 15188
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15174: LD_EXP 35
15178: PPUSH
15179: LD_STRING 04_1_Aviradze
15181: PPUSH
15182: CALL_OW 38
15186: GO 15206
// if Aviradze then
15188: LD_EXP 35
15192: IFFALSE 15206
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15194: LD_EXP 35
15198: PPUSH
15199: LD_STRING 04_1_Aviradze_L
15201: PPUSH
15202: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15206: LD_EXP 28
15210: PUSH
15211: LD_EXP 28
15215: PUSH
15216: LD_EXP 39
15220: IN
15221: NOT
15222: AND
15223: IFFALSE 15239
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15225: LD_EXP 28
15229: PPUSH
15230: LD_STRING 04_1_Ibrahim
15232: PPUSH
15233: CALL_OW 38
15237: GO 15257
// if Ibrahim then
15239: LD_EXP 28
15243: IFFALSE 15257
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15245: LD_EXP 28
15249: PPUSH
15250: LD_STRING 04_1_Ibrahim_L
15252: PPUSH
15253: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15257: LD_EXP 29
15261: PUSH
15262: LD_EXP 29
15266: PUSH
15267: LD_EXP 39
15271: IN
15272: NOT
15273: AND
15274: IFFALSE 15290
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15276: LD_EXP 29
15280: PPUSH
15281: LD_STRING 04_1_Kamil
15283: PPUSH
15284: CALL_OW 38
15288: GO 15308
// if Kamil then
15290: LD_EXP 29
15294: IFFALSE 15308
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15296: LD_EXP 29
15300: PPUSH
15301: LD_STRING 04_1_Kamil_L
15303: PPUSH
15304: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15308: LD_EXP 31
15312: PUSH
15313: LD_EXP 31
15317: PUSH
15318: LD_EXP 39
15322: IN
15323: NOT
15324: AND
15325: IFFALSE 15341
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15327: LD_EXP 31
15331: PPUSH
15332: LD_STRING 04_1_Sophia
15334: PPUSH
15335: CALL_OW 38
15339: GO 15359
// if Sophia then
15341: LD_EXP 31
15345: IFFALSE 15359
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15347: LD_EXP 31
15351: PPUSH
15352: LD_STRING 04_1_Sophia_L
15354: PPUSH
15355: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15359: LD_EXP 30
15363: PUSH
15364: LD_EXP 30
15368: PUSH
15369: LD_EXP 39
15373: IN
15374: NOT
15375: AND
15376: IFFALSE 15392
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15378: LD_EXP 30
15382: PPUSH
15383: LD_STRING 04_1_Kaia
15385: PPUSH
15386: CALL_OW 38
15390: GO 15410
// if Kaia then
15392: LD_EXP 30
15396: IFFALSE 15410
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15398: LD_EXP 30
15402: PPUSH
15403: LD_STRING 04_1_Kaia_L
15405: PPUSH
15406: CALL_OW 38
// if Givi then
15410: LD_EXP 26
15414: IFFALSE 15428
// SaveCharacters ( Givi , 04_1_Givi ) ;
15416: LD_EXP 26
15420: PPUSH
15421: LD_STRING 04_1_Givi
15423: PPUSH
15424: CALL_OW 38
// if Mike then
15428: LD_EXP 27
15432: IFFALSE 15446
// SaveCharacters ( Mike , 04_1_Mike ) ;
15434: LD_EXP 27
15438: PPUSH
15439: LD_STRING 04_1_Mike
15441: PPUSH
15442: CALL_OW 38
// if Markov then
15446: LD_EXP 32
15450: IFFALSE 15464
// SaveCharacters ( Markov , 04_1_Markov ) ;
15452: LD_EXP 32
15456: PPUSH
15457: LD_STRING 04_1_Markov
15459: PPUSH
15460: CALL_OW 38
// if Kurt then
15464: LD_EXP 34
15468: IFFALSE 15489
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15470: LD_EXP 34
15474: PPUSH
15475: LD_STRING 04_1_Kurt
15477: PPUSH
15478: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15482: LD_STRING enableBioCharacter(BIO_KURT)
15484: PPUSH
15485: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15489: LD_EXP 37
15493: PUSH
15494: LD_EXP 39
15498: DIFF
15499: IFFALSE 15519
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15501: LD_EXP 37
15505: PUSH
15506: LD_EXP 39
15510: DIFF
15511: PPUSH
15512: LD_STRING 04_1_others
15514: PPUSH
15515: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15519: LD_EXP 39
15523: PUSH
15524: LD_EXP 37
15528: AND
15529: IFFALSE 15614
// begin tmp := [ ] ;
15531: LD_ADDR_VAR 0 2
15535: PUSH
15536: EMPTY
15537: ST_TO_ADDR
// for i in heikeSecondSquad do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: LD_EXP 37
15547: PUSH
15548: FOR_IN
15549: IFFALSE 15594
// if i in aviradzeSquad then
15551: LD_VAR 0 1
15555: PUSH
15556: LD_EXP 39
15560: IN
15561: IFFALSE 15592
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15563: LD_ADDR_VAR 0 2
15567: PUSH
15568: LD_VAR 0 2
15572: PPUSH
15573: LD_VAR 0 2
15577: PUSH
15578: LD_INT 1
15580: PLUS
15581: PPUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 1
15591: ST_TO_ADDR
15592: GO 15548
15594: POP
15595: POP
// if tmp then
15596: LD_VAR 0 2
15600: IFFALSE 15614
// SaveCharacters ( tmp , 04_1_others_L ) ;
15602: LD_VAR 0 2
15606: PPUSH
15607: LD_STRING 04_1_others_L
15609: PPUSH
15610: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15614: LD_ADDR_VAR 0 2
15618: PUSH
15619: LD_INT 22
15621: PUSH
15622: LD_INT 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 23
15631: PUSH
15632: LD_INT 0
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PPUSH
15643: CALL_OW 69
15647: ST_TO_ADDR
// if tmp then
15648: LD_VAR 0 2
15652: IFFALSE 15666
// SaveCharacters ( tmp , 04_1_apes ) ;
15654: LD_VAR 0 2
15658: PPUSH
15659: LD_STRING 04_1_apes
15661: PPUSH
15662: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_INT 17
15673: PPUSH
15674: LD_INT 21
15676: PUSH
15677: LD_INT 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 70
15688: ST_TO_ADDR
// if tmp then
15689: LD_VAR 0 2
15693: IFFALSE 15987
// begin tmp2 := [ ] ;
15695: LD_ADDR_VAR 0 3
15699: PUSH
15700: EMPTY
15701: ST_TO_ADDR
// for i in tmp do
15702: LD_ADDR_VAR 0 1
15706: PUSH
15707: LD_VAR 0 2
15711: PUSH
15712: FOR_IN
15713: IFFALSE 15973
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 264
15724: PUSH
15725: LD_INT 32
15727: PUSH
15728: LD_INT 12
15730: PUSH
15731: LD_INT 51
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: IN
15739: IFFALSE 15876
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15741: LD_ADDR_VAR 0 4
15745: PUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 289
15758: PUSH
15759: LD_VAR 0 1
15763: PPUSH
15764: LD_INT 2
15766: PPUSH
15767: CALL_OW 289
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_VAR 0 3
15785: PPUSH
15786: LD_VAR 0 3
15790: PUSH
15791: LD_INT 1
15793: PLUS
15794: PPUSH
15795: LD_VAR 0 1
15799: PPUSH
15800: CALL_OW 265
15804: PUSH
15805: LD_VAR 0 1
15809: PPUSH
15810: CALL_OW 262
15814: PUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 263
15824: PUSH
15825: LD_VAR 0 1
15829: PPUSH
15830: CALL_OW 264
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 248
15844: PUSH
15845: LD_VAR 0 1
15849: PPUSH
15850: CALL_OW 256
15854: PUSH
15855: LD_VAR 0 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: PPUSH
15869: CALL_OW 1
15873: ST_TO_ADDR
// end else
15874: GO 15971
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15876: LD_ADDR_VAR 0 3
15880: PUSH
15881: LD_VAR 0 3
15885: PPUSH
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 1
15893: PLUS
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 265
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 262
15914: PUSH
15915: LD_VAR 0 1
15919: PPUSH
15920: CALL_OW 263
15924: PUSH
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 264
15934: PUSH
15935: LD_VAR 0 1
15939: PPUSH
15940: CALL_OW 248
15944: PUSH
15945: LD_VAR 0 1
15949: PPUSH
15950: CALL_OW 256
15954: PUSH
15955: EMPTY
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: PPUSH
15966: CALL_OW 1
15970: ST_TO_ADDR
15971: GO 15712
15973: POP
15974: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15975: LD_VAR 0 3
15979: PPUSH
15980: LD_STRING 04_1_Vehicles
15982: PPUSH
15983: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15987: LD_EXP 21
15991: PPUSH
15992: LD_STRING 04_1_RuLabCaptured
15994: PPUSH
15995: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15999: LD_EXP 19
16003: PPUSH
16004: LD_STRING 04_1_EscapeCounter
16006: PPUSH
16007: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16011: LD_EXP 15
16015: PPUSH
16016: LD_STRING 04_1_BaseHill
16018: PPUSH
16019: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16023: LD_OWVAR 1
16027: PPUSH
16028: LD_STRING 04_1_Time
16030: PPUSH
16031: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16035: LD_EXP 14
16039: PPUSH
16040: LD_STRING 04_1_DeadCounter
16042: PPUSH
16043: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16047: LD_EXP 24
16051: PUSH
16052: LD_INT 112
16054: PPUSH
16055: CALL_OW 255
16059: MUL
16060: PUSH
16061: LD_INT 2
16063: EQUAL
16064: PPUSH
16065: LD_STRING 04_1_KaganCaptured
16067: PPUSH
16068: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16072: LD_INT 22
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 34
16084: PUSH
16085: LD_INT 26
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 69
16100: PUSH
16101: LD_INT 0
16103: PLUS
16104: PPUSH
16105: LD_STRING 04_1_Flamethrower
16107: PPUSH
16108: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16112: LD_INT 1
16114: PPUSH
16115: LD_STRING __x1\04_cont2
16117: PPUSH
16118: CALL_OW 340
// end ; end_of_file
16122: PPOPN 4
16124: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16125: LD_VAR 0 1
16129: PPUSH
16130: CALL_OW 266
16134: PUSH
16135: LD_INT 0
16137: EQUAL
16138: PUSH
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 255
16148: PUSH
16149: LD_INT 2
16151: EQUAL
16152: AND
16153: IFFALSE 16163
// baseConstructed := true ;
16155: LD_ADDR_EXP 3
16159: PUSH
16160: LD_INT 1
16162: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16163: LD_VAR 0 1
16167: PPUSH
16168: CALL_OW 266
16172: PUSH
16173: LD_INT 6
16175: EQUAL
16176: PUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 255
16186: PUSH
16187: LD_INT 2
16189: EQUAL
16190: AND
16191: IFFALSE 16201
// labConstructed := true ;
16193: LD_ADDR_EXP 4
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// end ;
16201: PPOPN 1
16203: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16204: LD_VAR 0 1
16208: PPUSH
16209: CALL 32845 0 1
// if un = Heike then
16213: LD_VAR 0 1
16217: PUSH
16218: LD_EXP 25
16222: EQUAL
16223: IFFALSE 16232
// YouLost ( Heike ) ;
16225: LD_STRING Heike
16227: PPUSH
16228: CALL_OW 104
// if un = Omar then
16232: LD_VAR 0 1
16236: PUSH
16237: LD_EXP 33
16241: EQUAL
16242: IFFALSE 16251
// YouLost ( Omar ) ;
16244: LD_STRING Omar
16246: PPUSH
16247: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16251: LD_VAR 0 1
16255: PUSH
16256: LD_INT 22
16258: PUSH
16259: LD_INT 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 23
16268: PUSH
16269: LD_INT 2
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: IN
16296: IFFALSE 16312
// loseCounter := loseCounter + 1 ;
16298: LD_ADDR_EXP 14
16302: PUSH
16303: LD_EXP 14
16307: PUSH
16308: LD_INT 1
16310: PLUS
16311: ST_TO_ADDR
// if un = omikron then
16312: LD_VAR 0 1
16316: PUSH
16317: LD_INT 64
16319: EQUAL
16320: IFFALSE 16330
// omicronFall := true ;
16322: LD_ADDR_EXP 13
16326: PUSH
16327: LD_INT 1
16329: ST_TO_ADDR
// if un = kirov then
16330: LD_VAR 0 1
16334: PUSH
16335: LD_INT 71
16337: EQUAL
16338: IFFALSE 16355
// begin ChangeMissionObjectives ( KirovDone ) ;
16340: LD_STRING KirovDone
16342: PPUSH
16343: CALL_OW 337
// kirovDestroyed := true ;
16347: LD_ADDR_EXP 16
16351: PUSH
16352: LD_INT 1
16354: ST_TO_ADDR
// end ; if un = beria then
16355: LD_VAR 0 1
16359: PUSH
16360: LD_INT 106
16362: EQUAL
16363: IFFALSE 16380
// begin ChangeMissionObjectives ( BeriaDone ) ;
16365: LD_STRING BeriaDone
16367: PPUSH
16368: CALL_OW 337
// beriaDestroyed := true ;
16372: LD_ADDR_EXP 17
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// end ; if un = kagan then
16380: LD_VAR 0 1
16384: PUSH
16385: LD_INT 112
16387: EQUAL
16388: IFFALSE 16398
// kaganDestroyed := true ;
16390: LD_ADDR_EXP 18
16394: PUSH
16395: LD_INT 1
16397: ST_TO_ADDR
// if un in russianPatrol then
16398: LD_VAR 0 1
16402: PUSH
16403: LD_EXP 47
16407: IN
16408: IFFALSE 16426
// russianPatrol := russianPatrol diff un ;
16410: LD_ADDR_EXP 47
16414: PUSH
16415: LD_EXP 47
16419: PUSH
16420: LD_VAR 0 1
16424: DIFF
16425: ST_TO_ADDR
// if un in russianOmicronAttackers then
16426: LD_VAR 0 1
16430: PUSH
16431: LD_EXP 48
16435: IN
16436: IFFALSE 16454
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16438: LD_ADDR_EXP 48
16442: PUSH
16443: LD_EXP 48
16447: PUSH
16448: LD_VAR 0 1
16452: DIFF
16453: ST_TO_ADDR
// end ;
16454: PPOPN 1
16456: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16457: LD_INT 0
16459: PPUSH
16460: PPUSH
16461: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16462: LD_VAR 0 1
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 22
16472: PUSH
16473: LD_INT 3
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: LD_INT 4
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_INT 6
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 30
16508: PUSH
16509: LD_INT 32
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: IN
16525: IFFALSE 16698
// begin sol := UnitsInside ( un ) ;
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 313
16541: ST_TO_ADDR
// if not sol then
16542: LD_VAR 0 3
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16698
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16551: LD_ADDR_VAR 0 4
16555: PUSH
16556: LD_INT 22
16558: PUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 255
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: LD_INT 30
16578: PUSH
16579: LD_INT 4
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 30
16588: PUSH
16589: LD_INT 5
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: ST_TO_ADDR
// if not nearestBarracks then
16610: LD_VAR 0 4
16614: NOT
16615: IFFALSE 16619
// exit ;
16617: GO 16698
// for i in nearestBarracks do
16619: LD_ADDR_VAR 0 2
16623: PUSH
16624: LD_VAR 0 4
16628: PUSH
16629: FOR_IN
16630: IFFALSE 16665
// if UnitsInside ( i ) = 6 then
16632: LD_VAR 0 2
16636: PPUSH
16637: CALL_OW 313
16641: PUSH
16642: LD_INT 6
16644: EQUAL
16645: IFFALSE 16663
// nearestBarracks := nearestBarracks diff i ;
16647: LD_ADDR_VAR 0 4
16651: PUSH
16652: LD_VAR 0 4
16656: PUSH
16657: LD_VAR 0 2
16661: DIFF
16662: ST_TO_ADDR
16663: GO 16629
16665: POP
16666: POP
// if not nearestBarracks then
16667: LD_VAR 0 4
16671: NOT
16672: IFFALSE 16676
// exit ;
16674: GO 16698
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16676: LD_VAR 0 3
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: LD_VAR 0 4
16689: PUSH
16690: LD_INT 1
16692: ARRAY
16693: PPUSH
16694: CALL_OW 120
// end ; end ;
16698: PPOPN 4
16700: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16701: LD_INT 0
16703: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16704: LD_EXP 8
16708: NOT
16709: PUSH
16710: LD_EXP 5
16714: NOT
16715: OR
16716: IFFALSE 16720
// exit ;
16718: GO 16788
// for i in camAreas do
16720: LD_ADDR_VAR 0 5
16724: PUSH
16725: LD_EXP 8
16729: PUSH
16730: FOR_IN
16731: IFFALSE 16786
// if InArea ( x , y , i ) then
16733: LD_VAR 0 3
16737: PPUSH
16738: LD_VAR 0 4
16742: PPUSH
16743: LD_VAR 0 5
16747: PPUSH
16748: CALL_OW 309
16752: IFFALSE 16784
// begin SetAreaMapShow ( i , 0 ) ;
16754: LD_VAR 0 5
16758: PPUSH
16759: LD_INT 0
16761: PPUSH
16762: CALL_OW 424
// camAreas := camAreas diff i ;
16766: LD_ADDR_EXP 8
16770: PUSH
16771: LD_EXP 8
16775: PUSH
16776: LD_VAR 0 5
16780: DIFF
16781: ST_TO_ADDR
// break ;
16782: GO 16786
// end ;
16784: GO 16730
16786: POP
16787: POP
// end ;
16788: PPOPN 5
16790: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16791: LD_VAR 0 1
16795: PUSH
16796: LD_INT 2
16798: EQUAL
16799: PUSH
16800: LD_VAR 0 2
16804: PUSH
16805: LD_INT 5
16807: PUSH
16808: LD_INT 8
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: IN
16815: AND
16816: IFFALSE 16825
// YouLost ( Ally ) ;
16818: LD_STRING Ally
16820: PPUSH
16821: CALL_OW 104
// end ;
16825: PPOPN 2
16827: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16828: LD_VAR 0 1
16832: PUSH
16833: LD_EXP 30
16837: EQUAL
16838: PUSH
16839: LD_VAR 0 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 6
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: IN
16854: AND
16855: IFFALSE 16886
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16857: LD_ADDR_EXP 23
16861: PUSH
16862: LD_VAR 0 1
16866: PPUSH
16867: CALL_OW 250
16871: PUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: CALL_OW 251
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: ST_TO_ADDR
// end ;
16886: PPOPN 3
16888: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16889: LD_VAR 0 1
16893: PPUSH
16894: LD_VAR 0 2
16898: PPUSH
16899: CALL 32965 0 2
// end ; end_of_file
16903: PPOPN 2
16905: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
16906: LD_EXP 11
16910: NOT
16911: PUSH
16912: LD_INT 12
16914: PPUSH
16915: LD_INT 1
16917: PPUSH
16918: CALL_OW 287
16922: PUSH
16923: LD_INT 20
16925: PUSH
16926: LD_INT 16
16928: PUSH
16929: LD_INT 12
16931: PUSH
16932: LD_INT 10
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_OWVAR 67
16945: ARRAY
16946: LESS
16947: AND
16948: IFFALSE 16975
16950: GO 16952
16952: DISABLE
// begin enable ;
16953: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16954: LD_INT 1
16956: PPUSH
16957: LD_INT 5
16959: PPUSH
16960: CALL_OW 12
16964: PPUSH
16965: LD_INT 12
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 55
// end ; end_of_file
16975: END
// every 0 0$1 trigger omarCountdown do
16976: LD_EXP 22
16980: IFFALSE 17032
16982: GO 16984
16984: DISABLE
// begin enable ;
16985: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16986: LD_ADDR_OWVAR 47
16990: PUSH
16991: LD_STRING #X104-1
16993: PUSH
16994: LD_EXP 22
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17003: LD_ADDR_EXP 22
17007: PUSH
17008: LD_EXP 22
17012: PUSH
17013: LD_INT 35
17015: MINUS
17016: ST_TO_ADDR
// if not omarCountdown then
17017: LD_EXP 22
17021: NOT
17022: IFFALSE 17032
// display_strings :=  ;
17024: LD_ADDR_OWVAR 47
17028: PUSH
17029: LD_STRING 
17031: ST_TO_ADDR
// end ; end_of_file
17032: END
// every 0 0$1 do
17033: GO 17035
17035: DISABLE
// begin enable ;
17036: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17037: LD_STRING updateTimer(
17039: PUSH
17040: LD_OWVAR 1
17044: STR
17045: PUSH
17046: LD_STRING );
17048: STR
17049: PPUSH
17050: CALL_OW 559
// end ;
17054: END
// export function SOS_MapStart ( ) ; begin
17055: LD_INT 0
17057: PPUSH
// if streamModeActive then
17058: LD_EXP 52
17062: IFFALSE 17071
// DefineStreamItems ( true ) ;
17064: LD_INT 1
17066: PPUSH
17067: CALL 18725 0 1
// UpdateFactoryWaypoints ( ) ;
17071: CALL 31586 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17075: CALL 31843 0 0
// end ;
17079: LD_VAR 0 1
17083: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17084: LD_INT 0
17086: PPUSH
// if p2 = 100 then
17087: LD_VAR 0 2
17091: PUSH
17092: LD_INT 100
17094: EQUAL
17095: IFFALSE 18098
// begin if not StreamModeActive then
17097: LD_EXP 52
17101: NOT
17102: IFFALSE 17112
// StreamModeActive := true ;
17104: LD_ADDR_EXP 52
17108: PUSH
17109: LD_INT 1
17111: ST_TO_ADDR
// if p3 = 0 then
17112: LD_VAR 0 3
17116: PUSH
17117: LD_INT 0
17119: EQUAL
17120: IFFALSE 17126
// InitStreamMode ;
17122: CALL 18261 0 0
// if p3 = 1 then
17126: LD_VAR 0 3
17130: PUSH
17131: LD_INT 1
17133: EQUAL
17134: IFFALSE 17144
// sRocket := true ;
17136: LD_ADDR_EXP 57
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// if p3 = 2 then
17144: LD_VAR 0 3
17148: PUSH
17149: LD_INT 2
17151: EQUAL
17152: IFFALSE 17162
// sSpeed := true ;
17154: LD_ADDR_EXP 56
17158: PUSH
17159: LD_INT 1
17161: ST_TO_ADDR
// if p3 = 3 then
17162: LD_VAR 0 3
17166: PUSH
17167: LD_INT 3
17169: EQUAL
17170: IFFALSE 17180
// sEngine := true ;
17172: LD_ADDR_EXP 58
17176: PUSH
17177: LD_INT 1
17179: ST_TO_ADDR
// if p3 = 4 then
17180: LD_VAR 0 3
17184: PUSH
17185: LD_INT 4
17187: EQUAL
17188: IFFALSE 17198
// sSpec := true ;
17190: LD_ADDR_EXP 55
17194: PUSH
17195: LD_INT 1
17197: ST_TO_ADDR
// if p3 = 5 then
17198: LD_VAR 0 3
17202: PUSH
17203: LD_INT 5
17205: EQUAL
17206: IFFALSE 17216
// sLevel := true ;
17208: LD_ADDR_EXP 59
17212: PUSH
17213: LD_INT 1
17215: ST_TO_ADDR
// if p3 = 6 then
17216: LD_VAR 0 3
17220: PUSH
17221: LD_INT 6
17223: EQUAL
17224: IFFALSE 17234
// sArmoury := true ;
17226: LD_ADDR_EXP 60
17230: PUSH
17231: LD_INT 1
17233: ST_TO_ADDR
// if p3 = 7 then
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 7
17241: EQUAL
17242: IFFALSE 17252
// sRadar := true ;
17244: LD_ADDR_EXP 61
17248: PUSH
17249: LD_INT 1
17251: ST_TO_ADDR
// if p3 = 8 then
17252: LD_VAR 0 3
17256: PUSH
17257: LD_INT 8
17259: EQUAL
17260: IFFALSE 17270
// sBunker := true ;
17262: LD_ADDR_EXP 62
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
// if p3 = 9 then
17270: LD_VAR 0 3
17274: PUSH
17275: LD_INT 9
17277: EQUAL
17278: IFFALSE 17288
// sHack := true ;
17280: LD_ADDR_EXP 63
17284: PUSH
17285: LD_INT 1
17287: ST_TO_ADDR
// if p3 = 10 then
17288: LD_VAR 0 3
17292: PUSH
17293: LD_INT 10
17295: EQUAL
17296: IFFALSE 17306
// sFire := true ;
17298: LD_ADDR_EXP 64
17302: PUSH
17303: LD_INT 1
17305: ST_TO_ADDR
// if p3 = 11 then
17306: LD_VAR 0 3
17310: PUSH
17311: LD_INT 11
17313: EQUAL
17314: IFFALSE 17324
// sRefresh := true ;
17316: LD_ADDR_EXP 65
17320: PUSH
17321: LD_INT 1
17323: ST_TO_ADDR
// if p3 = 12 then
17324: LD_VAR 0 3
17328: PUSH
17329: LD_INT 12
17331: EQUAL
17332: IFFALSE 17342
// sExp := true ;
17334: LD_ADDR_EXP 66
17338: PUSH
17339: LD_INT 1
17341: ST_TO_ADDR
// if p3 = 13 then
17342: LD_VAR 0 3
17346: PUSH
17347: LD_INT 13
17349: EQUAL
17350: IFFALSE 17360
// sDepot := true ;
17352: LD_ADDR_EXP 67
17356: PUSH
17357: LD_INT 1
17359: ST_TO_ADDR
// if p3 = 14 then
17360: LD_VAR 0 3
17364: PUSH
17365: LD_INT 14
17367: EQUAL
17368: IFFALSE 17378
// sFlag := true ;
17370: LD_ADDR_EXP 68
17374: PUSH
17375: LD_INT 1
17377: ST_TO_ADDR
// if p3 = 15 then
17378: LD_VAR 0 3
17382: PUSH
17383: LD_INT 15
17385: EQUAL
17386: IFFALSE 17396
// sKamikadze := true ;
17388: LD_ADDR_EXP 76
17392: PUSH
17393: LD_INT 1
17395: ST_TO_ADDR
// if p3 = 16 then
17396: LD_VAR 0 3
17400: PUSH
17401: LD_INT 16
17403: EQUAL
17404: IFFALSE 17414
// sTroll := true ;
17406: LD_ADDR_EXP 77
17410: PUSH
17411: LD_INT 1
17413: ST_TO_ADDR
// if p3 = 17 then
17414: LD_VAR 0 3
17418: PUSH
17419: LD_INT 17
17421: EQUAL
17422: IFFALSE 17432
// sSlow := true ;
17424: LD_ADDR_EXP 78
17428: PUSH
17429: LD_INT 1
17431: ST_TO_ADDR
// if p3 = 18 then
17432: LD_VAR 0 3
17436: PUSH
17437: LD_INT 18
17439: EQUAL
17440: IFFALSE 17450
// sLack := true ;
17442: LD_ADDR_EXP 79
17446: PUSH
17447: LD_INT 1
17449: ST_TO_ADDR
// if p3 = 19 then
17450: LD_VAR 0 3
17454: PUSH
17455: LD_INT 19
17457: EQUAL
17458: IFFALSE 17468
// sTank := true ;
17460: LD_ADDR_EXP 81
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
// if p3 = 20 then
17468: LD_VAR 0 3
17472: PUSH
17473: LD_INT 20
17475: EQUAL
17476: IFFALSE 17486
// sRemote := true ;
17478: LD_ADDR_EXP 82
17482: PUSH
17483: LD_INT 1
17485: ST_TO_ADDR
// if p3 = 21 then
17486: LD_VAR 0 3
17490: PUSH
17491: LD_INT 21
17493: EQUAL
17494: IFFALSE 17504
// sPowell := true ;
17496: LD_ADDR_EXP 83
17500: PUSH
17501: LD_INT 1
17503: ST_TO_ADDR
// if p3 = 22 then
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 22
17511: EQUAL
17512: IFFALSE 17522
// sTeleport := true ;
17514: LD_ADDR_EXP 86
17518: PUSH
17519: LD_INT 1
17521: ST_TO_ADDR
// if p3 = 23 then
17522: LD_VAR 0 3
17526: PUSH
17527: LD_INT 23
17529: EQUAL
17530: IFFALSE 17540
// sOilTower := true ;
17532: LD_ADDR_EXP 88
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
// if p3 = 24 then
17540: LD_VAR 0 3
17544: PUSH
17545: LD_INT 24
17547: EQUAL
17548: IFFALSE 17558
// sShovel := true ;
17550: LD_ADDR_EXP 89
17554: PUSH
17555: LD_INT 1
17557: ST_TO_ADDR
// if p3 = 25 then
17558: LD_VAR 0 3
17562: PUSH
17563: LD_INT 25
17565: EQUAL
17566: IFFALSE 17576
// sSheik := true ;
17568: LD_ADDR_EXP 90
17572: PUSH
17573: LD_INT 1
17575: ST_TO_ADDR
// if p3 = 26 then
17576: LD_VAR 0 3
17580: PUSH
17581: LD_INT 26
17583: EQUAL
17584: IFFALSE 17594
// sEarthquake := true ;
17586: LD_ADDR_EXP 92
17590: PUSH
17591: LD_INT 1
17593: ST_TO_ADDR
// if p3 = 27 then
17594: LD_VAR 0 3
17598: PUSH
17599: LD_INT 27
17601: EQUAL
17602: IFFALSE 17612
// sAI := true ;
17604: LD_ADDR_EXP 93
17608: PUSH
17609: LD_INT 1
17611: ST_TO_ADDR
// if p3 = 28 then
17612: LD_VAR 0 3
17616: PUSH
17617: LD_INT 28
17619: EQUAL
17620: IFFALSE 17630
// sCargo := true ;
17622: LD_ADDR_EXP 96
17626: PUSH
17627: LD_INT 1
17629: ST_TO_ADDR
// if p3 = 29 then
17630: LD_VAR 0 3
17634: PUSH
17635: LD_INT 29
17637: EQUAL
17638: IFFALSE 17648
// sDLaser := true ;
17640: LD_ADDR_EXP 97
17644: PUSH
17645: LD_INT 1
17647: ST_TO_ADDR
// if p3 = 30 then
17648: LD_VAR 0 3
17652: PUSH
17653: LD_INT 30
17655: EQUAL
17656: IFFALSE 17666
// sExchange := true ;
17658: LD_ADDR_EXP 98
17662: PUSH
17663: LD_INT 1
17665: ST_TO_ADDR
// if p3 = 31 then
17666: LD_VAR 0 3
17670: PUSH
17671: LD_INT 31
17673: EQUAL
17674: IFFALSE 17684
// sFac := true ;
17676: LD_ADDR_EXP 99
17680: PUSH
17681: LD_INT 1
17683: ST_TO_ADDR
// if p3 = 32 then
17684: LD_VAR 0 3
17688: PUSH
17689: LD_INT 32
17691: EQUAL
17692: IFFALSE 17702
// sPower := true ;
17694: LD_ADDR_EXP 100
17698: PUSH
17699: LD_INT 1
17701: ST_TO_ADDR
// if p3 = 33 then
17702: LD_VAR 0 3
17706: PUSH
17707: LD_INT 33
17709: EQUAL
17710: IFFALSE 17720
// sRandom := true ;
17712: LD_ADDR_EXP 101
17716: PUSH
17717: LD_INT 1
17719: ST_TO_ADDR
// if p3 = 34 then
17720: LD_VAR 0 3
17724: PUSH
17725: LD_INT 34
17727: EQUAL
17728: IFFALSE 17738
// sShield := true ;
17730: LD_ADDR_EXP 102
17734: PUSH
17735: LD_INT 1
17737: ST_TO_ADDR
// if p3 = 35 then
17738: LD_VAR 0 3
17742: PUSH
17743: LD_INT 35
17745: EQUAL
17746: IFFALSE 17756
// sTime := true ;
17748: LD_ADDR_EXP 103
17752: PUSH
17753: LD_INT 1
17755: ST_TO_ADDR
// if p3 = 36 then
17756: LD_VAR 0 3
17760: PUSH
17761: LD_INT 36
17763: EQUAL
17764: IFFALSE 17774
// sTools := true ;
17766: LD_ADDR_EXP 104
17770: PUSH
17771: LD_INT 1
17773: ST_TO_ADDR
// if p3 = 101 then
17774: LD_VAR 0 3
17778: PUSH
17779: LD_INT 101
17781: EQUAL
17782: IFFALSE 17792
// sSold := true ;
17784: LD_ADDR_EXP 69
17788: PUSH
17789: LD_INT 1
17791: ST_TO_ADDR
// if p3 = 102 then
17792: LD_VAR 0 3
17796: PUSH
17797: LD_INT 102
17799: EQUAL
17800: IFFALSE 17810
// sDiff := true ;
17802: LD_ADDR_EXP 70
17806: PUSH
17807: LD_INT 1
17809: ST_TO_ADDR
// if p3 = 103 then
17810: LD_VAR 0 3
17814: PUSH
17815: LD_INT 103
17817: EQUAL
17818: IFFALSE 17828
// sFog := true ;
17820: LD_ADDR_EXP 73
17824: PUSH
17825: LD_INT 1
17827: ST_TO_ADDR
// if p3 = 104 then
17828: LD_VAR 0 3
17832: PUSH
17833: LD_INT 104
17835: EQUAL
17836: IFFALSE 17846
// sReset := true ;
17838: LD_ADDR_EXP 74
17842: PUSH
17843: LD_INT 1
17845: ST_TO_ADDR
// if p3 = 105 then
17846: LD_VAR 0 3
17850: PUSH
17851: LD_INT 105
17853: EQUAL
17854: IFFALSE 17864
// sSun := true ;
17856: LD_ADDR_EXP 75
17860: PUSH
17861: LD_INT 1
17863: ST_TO_ADDR
// if p3 = 106 then
17864: LD_VAR 0 3
17868: PUSH
17869: LD_INT 106
17871: EQUAL
17872: IFFALSE 17882
// sTiger := true ;
17874: LD_ADDR_EXP 71
17878: PUSH
17879: LD_INT 1
17881: ST_TO_ADDR
// if p3 = 107 then
17882: LD_VAR 0 3
17886: PUSH
17887: LD_INT 107
17889: EQUAL
17890: IFFALSE 17900
// sBomb := true ;
17892: LD_ADDR_EXP 72
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// if p3 = 108 then
17900: LD_VAR 0 3
17904: PUSH
17905: LD_INT 108
17907: EQUAL
17908: IFFALSE 17918
// sWound := true ;
17910: LD_ADDR_EXP 80
17914: PUSH
17915: LD_INT 1
17917: ST_TO_ADDR
// if p3 = 109 then
17918: LD_VAR 0 3
17922: PUSH
17923: LD_INT 109
17925: EQUAL
17926: IFFALSE 17936
// sBetray := true ;
17928: LD_ADDR_EXP 84
17932: PUSH
17933: LD_INT 1
17935: ST_TO_ADDR
// if p3 = 110 then
17936: LD_VAR 0 3
17940: PUSH
17941: LD_INT 110
17943: EQUAL
17944: IFFALSE 17954
// sContamin := true ;
17946: LD_ADDR_EXP 85
17950: PUSH
17951: LD_INT 1
17953: ST_TO_ADDR
// if p3 = 111 then
17954: LD_VAR 0 3
17958: PUSH
17959: LD_INT 111
17961: EQUAL
17962: IFFALSE 17972
// sOil := true ;
17964: LD_ADDR_EXP 87
17968: PUSH
17969: LD_INT 1
17971: ST_TO_ADDR
// if p3 = 112 then
17972: LD_VAR 0 3
17976: PUSH
17977: LD_INT 112
17979: EQUAL
17980: IFFALSE 17990
// sStu := true ;
17982: LD_ADDR_EXP 91
17986: PUSH
17987: LD_INT 1
17989: ST_TO_ADDR
// if p3 = 113 then
17990: LD_VAR 0 3
17994: PUSH
17995: LD_INT 113
17997: EQUAL
17998: IFFALSE 18008
// sBazooka := true ;
18000: LD_ADDR_EXP 94
18004: PUSH
18005: LD_INT 1
18007: ST_TO_ADDR
// if p3 = 114 then
18008: LD_VAR 0 3
18012: PUSH
18013: LD_INT 114
18015: EQUAL
18016: IFFALSE 18026
// sMortar := true ;
18018: LD_ADDR_EXP 95
18022: PUSH
18023: LD_INT 1
18025: ST_TO_ADDR
// if p3 = 115 then
18026: LD_VAR 0 3
18030: PUSH
18031: LD_INT 115
18033: EQUAL
18034: IFFALSE 18044
// sRanger := true ;
18036: LD_ADDR_EXP 105
18040: PUSH
18041: LD_INT 1
18043: ST_TO_ADDR
// if p3 = 116 then
18044: LD_VAR 0 3
18048: PUSH
18049: LD_INT 116
18051: EQUAL
18052: IFFALSE 18062
// sComputer := true ;
18054: LD_ADDR_EXP 106
18058: PUSH
18059: LD_INT 1
18061: ST_TO_ADDR
// if p3 = 117 then
18062: LD_VAR 0 3
18066: PUSH
18067: LD_INT 117
18069: EQUAL
18070: IFFALSE 18080
// s30 := true ;
18072: LD_ADDR_EXP 107
18076: PUSH
18077: LD_INT 1
18079: ST_TO_ADDR
// if p3 = 118 then
18080: LD_VAR 0 3
18084: PUSH
18085: LD_INT 118
18087: EQUAL
18088: IFFALSE 18098
// s60 := true ;
18090: LD_ADDR_EXP 108
18094: PUSH
18095: LD_INT 1
18097: ST_TO_ADDR
// end ; if p2 = 101 then
18098: LD_VAR 0 2
18102: PUSH
18103: LD_INT 101
18105: EQUAL
18106: IFFALSE 18234
// begin case p3 of 1 :
18108: LD_VAR 0 3
18112: PUSH
18113: LD_INT 1
18115: DOUBLE
18116: EQUAL
18117: IFTRUE 18121
18119: GO 18128
18121: POP
// hHackUnlimitedResources ; 2 :
18122: CALL 30332 0 0
18126: GO 18234
18128: LD_INT 2
18130: DOUBLE
18131: EQUAL
18132: IFTRUE 18136
18134: GO 18143
18136: POP
// hHackSetLevel10 ; 3 :
18137: CALL 30465 0 0
18141: GO 18234
18143: LD_INT 3
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18158
18151: POP
// hHackSetLevel10YourUnits ; 4 :
18152: CALL 30550 0 0
18156: GO 18234
18158: LD_INT 4
18160: DOUBLE
18161: EQUAL
18162: IFTRUE 18166
18164: GO 18173
18166: POP
// hHackInvincible ; 5 :
18167: CALL 30998 0 0
18171: GO 18234
18173: LD_INT 5
18175: DOUBLE
18176: EQUAL
18177: IFTRUE 18181
18179: GO 18188
18181: POP
// hHackInvisible ; 6 :
18182: CALL 31109 0 0
18186: GO 18234
18188: LD_INT 6
18190: DOUBLE
18191: EQUAL
18192: IFTRUE 18196
18194: GO 18203
18196: POP
// hHackChangeYourSide ; 7 :
18197: CALL 31166 0 0
18201: GO 18234
18203: LD_INT 7
18205: DOUBLE
18206: EQUAL
18207: IFTRUE 18211
18209: GO 18218
18211: POP
// hHackChangeUnitSide ; 8 :
18212: CALL 31208 0 0
18216: GO 18234
18218: LD_INT 8
18220: DOUBLE
18221: EQUAL
18222: IFTRUE 18226
18224: GO 18233
18226: POP
// hHackFog ; end ;
18227: CALL 31309 0 0
18231: GO 18234
18233: POP
// end ; end ;
18234: LD_VAR 0 7
18238: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18239: GO 18241
18241: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18242: LD_STRING initStreamRollete();
18244: PPUSH
18245: CALL_OW 559
// InitStreamMode ;
18249: CALL 18261 0 0
// DefineStreamItems ( false ) ;
18253: LD_INT 0
18255: PPUSH
18256: CALL 18725 0 1
// end ;
18260: END
// function InitStreamMode ; begin
18261: LD_INT 0
18263: PPUSH
// streamModeActive := false ;
18264: LD_ADDR_EXP 52
18268: PUSH
18269: LD_INT 0
18271: ST_TO_ADDR
// normalCounter := 36 ;
18272: LD_ADDR_EXP 53
18276: PUSH
18277: LD_INT 36
18279: ST_TO_ADDR
// hardcoreCounter := 18 ;
18280: LD_ADDR_EXP 54
18284: PUSH
18285: LD_INT 18
18287: ST_TO_ADDR
// sRocket := false ;
18288: LD_ADDR_EXP 57
18292: PUSH
18293: LD_INT 0
18295: ST_TO_ADDR
// sSpeed := false ;
18296: LD_ADDR_EXP 56
18300: PUSH
18301: LD_INT 0
18303: ST_TO_ADDR
// sEngine := false ;
18304: LD_ADDR_EXP 58
18308: PUSH
18309: LD_INT 0
18311: ST_TO_ADDR
// sSpec := false ;
18312: LD_ADDR_EXP 55
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// sLevel := false ;
18320: LD_ADDR_EXP 59
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// sArmoury := false ;
18328: LD_ADDR_EXP 60
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// sRadar := false ;
18336: LD_ADDR_EXP 61
18340: PUSH
18341: LD_INT 0
18343: ST_TO_ADDR
// sBunker := false ;
18344: LD_ADDR_EXP 62
18348: PUSH
18349: LD_INT 0
18351: ST_TO_ADDR
// sHack := false ;
18352: LD_ADDR_EXP 63
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// sFire := false ;
18360: LD_ADDR_EXP 64
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// sRefresh := false ;
18368: LD_ADDR_EXP 65
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// sExp := false ;
18376: LD_ADDR_EXP 66
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// sDepot := false ;
18384: LD_ADDR_EXP 67
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// sFlag := false ;
18392: LD_ADDR_EXP 68
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// sKamikadze := false ;
18400: LD_ADDR_EXP 76
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// sTroll := false ;
18408: LD_ADDR_EXP 77
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// sSlow := false ;
18416: LD_ADDR_EXP 78
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// sLack := false ;
18424: LD_ADDR_EXP 79
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// sTank := false ;
18432: LD_ADDR_EXP 81
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// sRemote := false ;
18440: LD_ADDR_EXP 82
18444: PUSH
18445: LD_INT 0
18447: ST_TO_ADDR
// sPowell := false ;
18448: LD_ADDR_EXP 83
18452: PUSH
18453: LD_INT 0
18455: ST_TO_ADDR
// sTeleport := false ;
18456: LD_ADDR_EXP 86
18460: PUSH
18461: LD_INT 0
18463: ST_TO_ADDR
// sOilTower := false ;
18464: LD_ADDR_EXP 88
18468: PUSH
18469: LD_INT 0
18471: ST_TO_ADDR
// sShovel := false ;
18472: LD_ADDR_EXP 89
18476: PUSH
18477: LD_INT 0
18479: ST_TO_ADDR
// sSheik := false ;
18480: LD_ADDR_EXP 90
18484: PUSH
18485: LD_INT 0
18487: ST_TO_ADDR
// sEarthquake := false ;
18488: LD_ADDR_EXP 92
18492: PUSH
18493: LD_INT 0
18495: ST_TO_ADDR
// sAI := false ;
18496: LD_ADDR_EXP 93
18500: PUSH
18501: LD_INT 0
18503: ST_TO_ADDR
// sCargo := false ;
18504: LD_ADDR_EXP 96
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// sDLaser := false ;
18512: LD_ADDR_EXP 97
18516: PUSH
18517: LD_INT 0
18519: ST_TO_ADDR
// sExchange := false ;
18520: LD_ADDR_EXP 98
18524: PUSH
18525: LD_INT 0
18527: ST_TO_ADDR
// sFac := false ;
18528: LD_ADDR_EXP 99
18532: PUSH
18533: LD_INT 0
18535: ST_TO_ADDR
// sPower := false ;
18536: LD_ADDR_EXP 100
18540: PUSH
18541: LD_INT 0
18543: ST_TO_ADDR
// sRandom := false ;
18544: LD_ADDR_EXP 101
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// sShield := false ;
18552: LD_ADDR_EXP 102
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// sTime := false ;
18560: LD_ADDR_EXP 103
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// sTools := false ;
18568: LD_ADDR_EXP 104
18572: PUSH
18573: LD_INT 0
18575: ST_TO_ADDR
// sSold := false ;
18576: LD_ADDR_EXP 69
18580: PUSH
18581: LD_INT 0
18583: ST_TO_ADDR
// sDiff := false ;
18584: LD_ADDR_EXP 70
18588: PUSH
18589: LD_INT 0
18591: ST_TO_ADDR
// sFog := false ;
18592: LD_ADDR_EXP 73
18596: PUSH
18597: LD_INT 0
18599: ST_TO_ADDR
// sReset := false ;
18600: LD_ADDR_EXP 74
18604: PUSH
18605: LD_INT 0
18607: ST_TO_ADDR
// sSun := false ;
18608: LD_ADDR_EXP 75
18612: PUSH
18613: LD_INT 0
18615: ST_TO_ADDR
// sTiger := false ;
18616: LD_ADDR_EXP 71
18620: PUSH
18621: LD_INT 0
18623: ST_TO_ADDR
// sBomb := false ;
18624: LD_ADDR_EXP 72
18628: PUSH
18629: LD_INT 0
18631: ST_TO_ADDR
// sWound := false ;
18632: LD_ADDR_EXP 80
18636: PUSH
18637: LD_INT 0
18639: ST_TO_ADDR
// sBetray := false ;
18640: LD_ADDR_EXP 84
18644: PUSH
18645: LD_INT 0
18647: ST_TO_ADDR
// sContamin := false ;
18648: LD_ADDR_EXP 85
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// sOil := false ;
18656: LD_ADDR_EXP 87
18660: PUSH
18661: LD_INT 0
18663: ST_TO_ADDR
// sStu := false ;
18664: LD_ADDR_EXP 91
18668: PUSH
18669: LD_INT 0
18671: ST_TO_ADDR
// sBazooka := false ;
18672: LD_ADDR_EXP 94
18676: PUSH
18677: LD_INT 0
18679: ST_TO_ADDR
// sMortar := false ;
18680: LD_ADDR_EXP 95
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// sRanger := false ;
18688: LD_ADDR_EXP 105
18692: PUSH
18693: LD_INT 0
18695: ST_TO_ADDR
// sComputer := false ;
18696: LD_ADDR_EXP 106
18700: PUSH
18701: LD_INT 0
18703: ST_TO_ADDR
// s30 := false ;
18704: LD_ADDR_EXP 107
18708: PUSH
18709: LD_INT 0
18711: ST_TO_ADDR
// s60 := false ;
18712: LD_ADDR_EXP 108
18716: PUSH
18717: LD_INT 0
18719: ST_TO_ADDR
// end ;
18720: LD_VAR 0 1
18724: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18725: LD_INT 0
18727: PPUSH
18728: PPUSH
18729: PPUSH
18730: PPUSH
18731: PPUSH
18732: PPUSH
18733: PPUSH
// result := [ ] ;
18734: LD_ADDR_VAR 0 2
18738: PUSH
18739: EMPTY
18740: ST_TO_ADDR
// if campaign_id = 1 then
18741: LD_OWVAR 69
18745: PUSH
18746: LD_INT 1
18748: EQUAL
18749: IFFALSE 21915
// begin case mission_number of 1 :
18751: LD_OWVAR 70
18755: PUSH
18756: LD_INT 1
18758: DOUBLE
18759: EQUAL
18760: IFTRUE 18764
18762: GO 18840
18764: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 4
18775: PUSH
18776: LD_INT 11
18778: PUSH
18779: LD_INT 12
18781: PUSH
18782: LD_INT 15
18784: PUSH
18785: LD_INT 16
18787: PUSH
18788: LD_INT 22
18790: PUSH
18791: LD_INT 23
18793: PUSH
18794: LD_INT 26
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 101
18810: PUSH
18811: LD_INT 102
18813: PUSH
18814: LD_INT 106
18816: PUSH
18817: LD_INT 116
18819: PUSH
18820: LD_INT 117
18822: PUSH
18823: LD_INT 118
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: ST_TO_ADDR
18838: GO 21913
18840: LD_INT 2
18842: DOUBLE
18843: EQUAL
18844: IFTRUE 18848
18846: GO 18932
18848: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18849: LD_ADDR_VAR 0 2
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: LD_INT 4
18859: PUSH
18860: LD_INT 11
18862: PUSH
18863: LD_INT 12
18865: PUSH
18866: LD_INT 15
18868: PUSH
18869: LD_INT 16
18871: PUSH
18872: LD_INT 22
18874: PUSH
18875: LD_INT 23
18877: PUSH
18878: LD_INT 26
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 101
18894: PUSH
18895: LD_INT 102
18897: PUSH
18898: LD_INT 105
18900: PUSH
18901: LD_INT 106
18903: PUSH
18904: LD_INT 108
18906: PUSH
18907: LD_INT 116
18909: PUSH
18910: LD_INT 117
18912: PUSH
18913: LD_INT 118
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: ST_TO_ADDR
18930: GO 21913
18932: LD_INT 3
18934: DOUBLE
18935: EQUAL
18936: IFTRUE 18940
18938: GO 19028
18940: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18941: LD_ADDR_VAR 0 2
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: LD_INT 4
18951: PUSH
18952: LD_INT 5
18954: PUSH
18955: LD_INT 11
18957: PUSH
18958: LD_INT 12
18960: PUSH
18961: LD_INT 15
18963: PUSH
18964: LD_INT 16
18966: PUSH
18967: LD_INT 22
18969: PUSH
18970: LD_INT 26
18972: PUSH
18973: LD_INT 36
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 101
18990: PUSH
18991: LD_INT 102
18993: PUSH
18994: LD_INT 105
18996: PUSH
18997: LD_INT 106
18999: PUSH
19000: LD_INT 108
19002: PUSH
19003: LD_INT 116
19005: PUSH
19006: LD_INT 117
19008: PUSH
19009: LD_INT 118
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: ST_TO_ADDR
19026: GO 21913
19028: LD_INT 4
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19132
19036: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_INT 2
19044: PUSH
19045: LD_INT 4
19047: PUSH
19048: LD_INT 5
19050: PUSH
19051: LD_INT 8
19053: PUSH
19054: LD_INT 11
19056: PUSH
19057: LD_INT 12
19059: PUSH
19060: LD_INT 15
19062: PUSH
19063: LD_INT 16
19065: PUSH
19066: LD_INT 22
19068: PUSH
19069: LD_INT 23
19071: PUSH
19072: LD_INT 26
19074: PUSH
19075: LD_INT 36
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 101
19094: PUSH
19095: LD_INT 102
19097: PUSH
19098: LD_INT 105
19100: PUSH
19101: LD_INT 106
19103: PUSH
19104: LD_INT 108
19106: PUSH
19107: LD_INT 116
19109: PUSH
19110: LD_INT 117
19112: PUSH
19113: LD_INT 118
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: ST_TO_ADDR
19130: GO 21913
19132: LD_INT 5
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19252
19140: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19141: LD_ADDR_VAR 0 2
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: LD_INT 4
19151: PUSH
19152: LD_INT 5
19154: PUSH
19155: LD_INT 6
19157: PUSH
19158: LD_INT 8
19160: PUSH
19161: LD_INT 11
19163: PUSH
19164: LD_INT 12
19166: PUSH
19167: LD_INT 15
19169: PUSH
19170: LD_INT 16
19172: PUSH
19173: LD_INT 22
19175: PUSH
19176: LD_INT 23
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 26
19184: PUSH
19185: LD_INT 36
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 101
19206: PUSH
19207: LD_INT 102
19209: PUSH
19210: LD_INT 105
19212: PUSH
19213: LD_INT 106
19215: PUSH
19216: LD_INT 108
19218: PUSH
19219: LD_INT 109
19221: PUSH
19222: LD_INT 112
19224: PUSH
19225: LD_INT 116
19227: PUSH
19228: LD_INT 117
19230: PUSH
19231: LD_INT 118
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: ST_TO_ADDR
19250: GO 21913
19252: LD_INT 6
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19392
19260: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: LD_INT 4
19271: PUSH
19272: LD_INT 5
19274: PUSH
19275: LD_INT 6
19277: PUSH
19278: LD_INT 8
19280: PUSH
19281: LD_INT 11
19283: PUSH
19284: LD_INT 12
19286: PUSH
19287: LD_INT 15
19289: PUSH
19290: LD_INT 16
19292: PUSH
19293: LD_INT 20
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 22
19301: PUSH
19302: LD_INT 23
19304: PUSH
19305: LD_INT 25
19307: PUSH
19308: LD_INT 26
19310: PUSH
19311: LD_INT 30
19313: PUSH
19314: LD_INT 31
19316: PUSH
19317: LD_INT 32
19319: PUSH
19320: LD_INT 36
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 101
19346: PUSH
19347: LD_INT 102
19349: PUSH
19350: LD_INT 105
19352: PUSH
19353: LD_INT 106
19355: PUSH
19356: LD_INT 108
19358: PUSH
19359: LD_INT 109
19361: PUSH
19362: LD_INT 112
19364: PUSH
19365: LD_INT 116
19367: PUSH
19368: LD_INT 117
19370: PUSH
19371: LD_INT 118
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 21913
19392: LD_INT 7
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19512
19400: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19401: LD_ADDR_VAR 0 2
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 4
19411: PUSH
19412: LD_INT 5
19414: PUSH
19415: LD_INT 7
19417: PUSH
19418: LD_INT 11
19420: PUSH
19421: LD_INT 12
19423: PUSH
19424: LD_INT 15
19426: PUSH
19427: LD_INT 16
19429: PUSH
19430: LD_INT 20
19432: PUSH
19433: LD_INT 21
19435: PUSH
19436: LD_INT 22
19438: PUSH
19439: LD_INT 23
19441: PUSH
19442: LD_INT 25
19444: PUSH
19445: LD_INT 26
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 101
19466: PUSH
19467: LD_INT 102
19469: PUSH
19470: LD_INT 103
19472: PUSH
19473: LD_INT 105
19475: PUSH
19476: LD_INT 106
19478: PUSH
19479: LD_INT 108
19481: PUSH
19482: LD_INT 112
19484: PUSH
19485: LD_INT 116
19487: PUSH
19488: LD_INT 117
19490: PUSH
19491: LD_INT 118
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: ST_TO_ADDR
19510: GO 21913
19512: LD_INT 8
19514: DOUBLE
19515: EQUAL
19516: IFTRUE 19520
19518: GO 19660
19520: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19521: LD_ADDR_VAR 0 2
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: LD_INT 4
19531: PUSH
19532: LD_INT 5
19534: PUSH
19535: LD_INT 6
19537: PUSH
19538: LD_INT 7
19540: PUSH
19541: LD_INT 8
19543: PUSH
19544: LD_INT 11
19546: PUSH
19547: LD_INT 12
19549: PUSH
19550: LD_INT 15
19552: PUSH
19553: LD_INT 16
19555: PUSH
19556: LD_INT 20
19558: PUSH
19559: LD_INT 21
19561: PUSH
19562: LD_INT 22
19564: PUSH
19565: LD_INT 23
19567: PUSH
19568: LD_INT 25
19570: PUSH
19571: LD_INT 26
19573: PUSH
19574: LD_INT 30
19576: PUSH
19577: LD_INT 31
19579: PUSH
19580: LD_INT 32
19582: PUSH
19583: LD_INT 36
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 101
19610: PUSH
19611: LD_INT 102
19613: PUSH
19614: LD_INT 103
19616: PUSH
19617: LD_INT 105
19619: PUSH
19620: LD_INT 106
19622: PUSH
19623: LD_INT 108
19625: PUSH
19626: LD_INT 109
19628: PUSH
19629: LD_INT 112
19631: PUSH
19632: LD_INT 116
19634: PUSH
19635: LD_INT 117
19637: PUSH
19638: LD_INT 118
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: ST_TO_ADDR
19658: GO 21913
19660: LD_INT 9
19662: DOUBLE
19663: EQUAL
19664: IFTRUE 19668
19666: GO 19816
19668: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19669: LD_ADDR_VAR 0 2
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: LD_INT 4
19679: PUSH
19680: LD_INT 5
19682: PUSH
19683: LD_INT 6
19685: PUSH
19686: LD_INT 7
19688: PUSH
19689: LD_INT 8
19691: PUSH
19692: LD_INT 11
19694: PUSH
19695: LD_INT 12
19697: PUSH
19698: LD_INT 15
19700: PUSH
19701: LD_INT 16
19703: PUSH
19704: LD_INT 20
19706: PUSH
19707: LD_INT 21
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_INT 23
19715: PUSH
19716: LD_INT 25
19718: PUSH
19719: LD_INT 26
19721: PUSH
19722: LD_INT 28
19724: PUSH
19725: LD_INT 30
19727: PUSH
19728: LD_INT 31
19730: PUSH
19731: LD_INT 32
19733: PUSH
19734: LD_INT 36
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 101
19762: PUSH
19763: LD_INT 102
19765: PUSH
19766: LD_INT 103
19768: PUSH
19769: LD_INT 105
19771: PUSH
19772: LD_INT 106
19774: PUSH
19775: LD_INT 108
19777: PUSH
19778: LD_INT 109
19780: PUSH
19781: LD_INT 112
19783: PUSH
19784: LD_INT 114
19786: PUSH
19787: LD_INT 116
19789: PUSH
19790: LD_INT 117
19792: PUSH
19793: LD_INT 118
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 21913
19816: LD_INT 10
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 20020
19824: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19825: LD_ADDR_VAR 0 2
19829: PUSH
19830: LD_INT 2
19832: PUSH
19833: LD_INT 4
19835: PUSH
19836: LD_INT 5
19838: PUSH
19839: LD_INT 6
19841: PUSH
19842: LD_INT 7
19844: PUSH
19845: LD_INT 8
19847: PUSH
19848: LD_INT 9
19850: PUSH
19851: LD_INT 10
19853: PUSH
19854: LD_INT 11
19856: PUSH
19857: LD_INT 12
19859: PUSH
19860: LD_INT 13
19862: PUSH
19863: LD_INT 14
19865: PUSH
19866: LD_INT 15
19868: PUSH
19869: LD_INT 16
19871: PUSH
19872: LD_INT 17
19874: PUSH
19875: LD_INT 18
19877: PUSH
19878: LD_INT 19
19880: PUSH
19881: LD_INT 20
19883: PUSH
19884: LD_INT 21
19886: PUSH
19887: LD_INT 22
19889: PUSH
19890: LD_INT 23
19892: PUSH
19893: LD_INT 24
19895: PUSH
19896: LD_INT 25
19898: PUSH
19899: LD_INT 26
19901: PUSH
19902: LD_INT 28
19904: PUSH
19905: LD_INT 30
19907: PUSH
19908: LD_INT 31
19910: PUSH
19911: LD_INT 32
19913: PUSH
19914: LD_INT 36
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 101
19950: PUSH
19951: LD_INT 102
19953: PUSH
19954: LD_INT 103
19956: PUSH
19957: LD_INT 104
19959: PUSH
19960: LD_INT 105
19962: PUSH
19963: LD_INT 106
19965: PUSH
19966: LD_INT 107
19968: PUSH
19969: LD_INT 108
19971: PUSH
19972: LD_INT 109
19974: PUSH
19975: LD_INT 110
19977: PUSH
19978: LD_INT 111
19980: PUSH
19981: LD_INT 112
19983: PUSH
19984: LD_INT 114
19986: PUSH
19987: LD_INT 116
19989: PUSH
19990: LD_INT 117
19992: PUSH
19993: LD_INT 118
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: ST_TO_ADDR
20018: GO 21913
20020: LD_INT 11
20022: DOUBLE
20023: EQUAL
20024: IFTRUE 20028
20026: GO 20232
20028: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: LD_INT 2
20036: PUSH
20037: LD_INT 3
20039: PUSH
20040: LD_INT 4
20042: PUSH
20043: LD_INT 5
20045: PUSH
20046: LD_INT 6
20048: PUSH
20049: LD_INT 7
20051: PUSH
20052: LD_INT 8
20054: PUSH
20055: LD_INT 9
20057: PUSH
20058: LD_INT 10
20060: PUSH
20061: LD_INT 11
20063: PUSH
20064: LD_INT 12
20066: PUSH
20067: LD_INT 13
20069: PUSH
20070: LD_INT 14
20072: PUSH
20073: LD_INT 15
20075: PUSH
20076: LD_INT 16
20078: PUSH
20079: LD_INT 17
20081: PUSH
20082: LD_INT 18
20084: PUSH
20085: LD_INT 19
20087: PUSH
20088: LD_INT 20
20090: PUSH
20091: LD_INT 21
20093: PUSH
20094: LD_INT 22
20096: PUSH
20097: LD_INT 23
20099: PUSH
20100: LD_INT 24
20102: PUSH
20103: LD_INT 25
20105: PUSH
20106: LD_INT 26
20108: PUSH
20109: LD_INT 28
20111: PUSH
20112: LD_INT 30
20114: PUSH
20115: LD_INT 31
20117: PUSH
20118: LD_INT 32
20120: PUSH
20121: LD_INT 34
20123: PUSH
20124: LD_INT 36
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 101
20162: PUSH
20163: LD_INT 102
20165: PUSH
20166: LD_INT 103
20168: PUSH
20169: LD_INT 104
20171: PUSH
20172: LD_INT 105
20174: PUSH
20175: LD_INT 106
20177: PUSH
20178: LD_INT 107
20180: PUSH
20181: LD_INT 108
20183: PUSH
20184: LD_INT 109
20186: PUSH
20187: LD_INT 110
20189: PUSH
20190: LD_INT 111
20192: PUSH
20193: LD_INT 112
20195: PUSH
20196: LD_INT 114
20198: PUSH
20199: LD_INT 116
20201: PUSH
20202: LD_INT 117
20204: PUSH
20205: LD_INT 118
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: ST_TO_ADDR
20230: GO 21913
20232: LD_INT 12
20234: DOUBLE
20235: EQUAL
20236: IFTRUE 20240
20238: GO 20460
20240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: LD_INT 1
20248: PUSH
20249: LD_INT 2
20251: PUSH
20252: LD_INT 3
20254: PUSH
20255: LD_INT 4
20257: PUSH
20258: LD_INT 5
20260: PUSH
20261: LD_INT 6
20263: PUSH
20264: LD_INT 7
20266: PUSH
20267: LD_INT 8
20269: PUSH
20270: LD_INT 9
20272: PUSH
20273: LD_INT 10
20275: PUSH
20276: LD_INT 11
20278: PUSH
20279: LD_INT 12
20281: PUSH
20282: LD_INT 13
20284: PUSH
20285: LD_INT 14
20287: PUSH
20288: LD_INT 15
20290: PUSH
20291: LD_INT 16
20293: PUSH
20294: LD_INT 17
20296: PUSH
20297: LD_INT 18
20299: PUSH
20300: LD_INT 19
20302: PUSH
20303: LD_INT 20
20305: PUSH
20306: LD_INT 21
20308: PUSH
20309: LD_INT 22
20311: PUSH
20312: LD_INT 23
20314: PUSH
20315: LD_INT 24
20317: PUSH
20318: LD_INT 25
20320: PUSH
20321: LD_INT 26
20323: PUSH
20324: LD_INT 27
20326: PUSH
20327: LD_INT 28
20329: PUSH
20330: LD_INT 30
20332: PUSH
20333: LD_INT 31
20335: PUSH
20336: LD_INT 32
20338: PUSH
20339: LD_INT 33
20341: PUSH
20342: LD_INT 34
20344: PUSH
20345: LD_INT 36
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 101
20386: PUSH
20387: LD_INT 102
20389: PUSH
20390: LD_INT 103
20392: PUSH
20393: LD_INT 104
20395: PUSH
20396: LD_INT 105
20398: PUSH
20399: LD_INT 106
20401: PUSH
20402: LD_INT 107
20404: PUSH
20405: LD_INT 108
20407: PUSH
20408: LD_INT 109
20410: PUSH
20411: LD_INT 110
20413: PUSH
20414: LD_INT 111
20416: PUSH
20417: LD_INT 112
20419: PUSH
20420: LD_INT 113
20422: PUSH
20423: LD_INT 114
20425: PUSH
20426: LD_INT 116
20428: PUSH
20429: LD_INT 117
20431: PUSH
20432: LD_INT 118
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: ST_TO_ADDR
20458: GO 21913
20460: LD_INT 13
20462: DOUBLE
20463: EQUAL
20464: IFTRUE 20468
20466: GO 20676
20468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20469: LD_ADDR_VAR 0 2
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 3
20482: PUSH
20483: LD_INT 4
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: LD_INT 8
20491: PUSH
20492: LD_INT 9
20494: PUSH
20495: LD_INT 10
20497: PUSH
20498: LD_INT 11
20500: PUSH
20501: LD_INT 12
20503: PUSH
20504: LD_INT 14
20506: PUSH
20507: LD_INT 15
20509: PUSH
20510: LD_INT 16
20512: PUSH
20513: LD_INT 17
20515: PUSH
20516: LD_INT 18
20518: PUSH
20519: LD_INT 19
20521: PUSH
20522: LD_INT 20
20524: PUSH
20525: LD_INT 21
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_INT 23
20533: PUSH
20534: LD_INT 24
20536: PUSH
20537: LD_INT 25
20539: PUSH
20540: LD_INT 26
20542: PUSH
20543: LD_INT 27
20545: PUSH
20546: LD_INT 28
20548: PUSH
20549: LD_INT 30
20551: PUSH
20552: LD_INT 31
20554: PUSH
20555: LD_INT 32
20557: PUSH
20558: LD_INT 33
20560: PUSH
20561: LD_INT 34
20563: PUSH
20564: LD_INT 36
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 101
20602: PUSH
20603: LD_INT 102
20605: PUSH
20606: LD_INT 103
20608: PUSH
20609: LD_INT 104
20611: PUSH
20612: LD_INT 105
20614: PUSH
20615: LD_INT 106
20617: PUSH
20618: LD_INT 107
20620: PUSH
20621: LD_INT 108
20623: PUSH
20624: LD_INT 109
20626: PUSH
20627: LD_INT 110
20629: PUSH
20630: LD_INT 111
20632: PUSH
20633: LD_INT 112
20635: PUSH
20636: LD_INT 113
20638: PUSH
20639: LD_INT 114
20641: PUSH
20642: LD_INT 116
20644: PUSH
20645: LD_INT 117
20647: PUSH
20648: LD_INT 118
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: ST_TO_ADDR
20674: GO 21913
20676: LD_INT 14
20678: DOUBLE
20679: EQUAL
20680: IFTRUE 20684
20682: GO 20908
20684: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20685: LD_ADDR_VAR 0 2
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 3
20698: PUSH
20699: LD_INT 4
20701: PUSH
20702: LD_INT 5
20704: PUSH
20705: LD_INT 6
20707: PUSH
20708: LD_INT 7
20710: PUSH
20711: LD_INT 8
20713: PUSH
20714: LD_INT 9
20716: PUSH
20717: LD_INT 10
20719: PUSH
20720: LD_INT 11
20722: PUSH
20723: LD_INT 12
20725: PUSH
20726: LD_INT 13
20728: PUSH
20729: LD_INT 14
20731: PUSH
20732: LD_INT 15
20734: PUSH
20735: LD_INT 16
20737: PUSH
20738: LD_INT 17
20740: PUSH
20741: LD_INT 18
20743: PUSH
20744: LD_INT 19
20746: PUSH
20747: LD_INT 20
20749: PUSH
20750: LD_INT 21
20752: PUSH
20753: LD_INT 22
20755: PUSH
20756: LD_INT 23
20758: PUSH
20759: LD_INT 24
20761: PUSH
20762: LD_INT 25
20764: PUSH
20765: LD_INT 26
20767: PUSH
20768: LD_INT 27
20770: PUSH
20771: LD_INT 28
20773: PUSH
20774: LD_INT 29
20776: PUSH
20777: LD_INT 30
20779: PUSH
20780: LD_INT 31
20782: PUSH
20783: LD_INT 32
20785: PUSH
20786: LD_INT 33
20788: PUSH
20789: LD_INT 34
20791: PUSH
20792: LD_INT 36
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 101
20834: PUSH
20835: LD_INT 102
20837: PUSH
20838: LD_INT 103
20840: PUSH
20841: LD_INT 104
20843: PUSH
20844: LD_INT 105
20846: PUSH
20847: LD_INT 106
20849: PUSH
20850: LD_INT 107
20852: PUSH
20853: LD_INT 108
20855: PUSH
20856: LD_INT 109
20858: PUSH
20859: LD_INT 110
20861: PUSH
20862: LD_INT 111
20864: PUSH
20865: LD_INT 112
20867: PUSH
20868: LD_INT 113
20870: PUSH
20871: LD_INT 114
20873: PUSH
20874: LD_INT 116
20876: PUSH
20877: LD_INT 117
20879: PUSH
20880: LD_INT 118
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: ST_TO_ADDR
20906: GO 21913
20908: LD_INT 15
20910: DOUBLE
20911: EQUAL
20912: IFTRUE 20916
20914: GO 21140
20916: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20917: LD_ADDR_VAR 0 2
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: LD_INT 3
20930: PUSH
20931: LD_INT 4
20933: PUSH
20934: LD_INT 5
20936: PUSH
20937: LD_INT 6
20939: PUSH
20940: LD_INT 7
20942: PUSH
20943: LD_INT 8
20945: PUSH
20946: LD_INT 9
20948: PUSH
20949: LD_INT 10
20951: PUSH
20952: LD_INT 11
20954: PUSH
20955: LD_INT 12
20957: PUSH
20958: LD_INT 13
20960: PUSH
20961: LD_INT 14
20963: PUSH
20964: LD_INT 15
20966: PUSH
20967: LD_INT 16
20969: PUSH
20970: LD_INT 17
20972: PUSH
20973: LD_INT 18
20975: PUSH
20976: LD_INT 19
20978: PUSH
20979: LD_INT 20
20981: PUSH
20982: LD_INT 21
20984: PUSH
20985: LD_INT 22
20987: PUSH
20988: LD_INT 23
20990: PUSH
20991: LD_INT 24
20993: PUSH
20994: LD_INT 25
20996: PUSH
20997: LD_INT 26
20999: PUSH
21000: LD_INT 27
21002: PUSH
21003: LD_INT 28
21005: PUSH
21006: LD_INT 29
21008: PUSH
21009: LD_INT 30
21011: PUSH
21012: LD_INT 31
21014: PUSH
21015: LD_INT 32
21017: PUSH
21018: LD_INT 33
21020: PUSH
21021: LD_INT 34
21023: PUSH
21024: LD_INT 36
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 101
21066: PUSH
21067: LD_INT 102
21069: PUSH
21070: LD_INT 103
21072: PUSH
21073: LD_INT 104
21075: PUSH
21076: LD_INT 105
21078: PUSH
21079: LD_INT 106
21081: PUSH
21082: LD_INT 107
21084: PUSH
21085: LD_INT 108
21087: PUSH
21088: LD_INT 109
21090: PUSH
21091: LD_INT 110
21093: PUSH
21094: LD_INT 111
21096: PUSH
21097: LD_INT 112
21099: PUSH
21100: LD_INT 113
21102: PUSH
21103: LD_INT 114
21105: PUSH
21106: LD_INT 116
21108: PUSH
21109: LD_INT 117
21111: PUSH
21112: LD_INT 118
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: ST_TO_ADDR
21138: GO 21913
21140: LD_INT 16
21142: DOUBLE
21143: EQUAL
21144: IFTRUE 21148
21146: GO 21284
21148: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21149: LD_ADDR_VAR 0 2
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: LD_INT 4
21159: PUSH
21160: LD_INT 5
21162: PUSH
21163: LD_INT 7
21165: PUSH
21166: LD_INT 11
21168: PUSH
21169: LD_INT 12
21171: PUSH
21172: LD_INT 15
21174: PUSH
21175: LD_INT 16
21177: PUSH
21178: LD_INT 20
21180: PUSH
21181: LD_INT 21
21183: PUSH
21184: LD_INT 22
21186: PUSH
21187: LD_INT 23
21189: PUSH
21190: LD_INT 25
21192: PUSH
21193: LD_INT 26
21195: PUSH
21196: LD_INT 30
21198: PUSH
21199: LD_INT 31
21201: PUSH
21202: LD_INT 32
21204: PUSH
21205: LD_INT 33
21207: PUSH
21208: LD_INT 34
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 101
21234: PUSH
21235: LD_INT 102
21237: PUSH
21238: LD_INT 103
21240: PUSH
21241: LD_INT 106
21243: PUSH
21244: LD_INT 108
21246: PUSH
21247: LD_INT 112
21249: PUSH
21250: LD_INT 113
21252: PUSH
21253: LD_INT 114
21255: PUSH
21256: LD_INT 116
21258: PUSH
21259: LD_INT 117
21261: PUSH
21262: LD_INT 118
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: ST_TO_ADDR
21282: GO 21913
21284: LD_INT 17
21286: DOUBLE
21287: EQUAL
21288: IFTRUE 21292
21290: GO 21516
21292: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21293: LD_ADDR_VAR 0 2
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: LD_INT 2
21303: PUSH
21304: LD_INT 3
21306: PUSH
21307: LD_INT 4
21309: PUSH
21310: LD_INT 5
21312: PUSH
21313: LD_INT 6
21315: PUSH
21316: LD_INT 7
21318: PUSH
21319: LD_INT 8
21321: PUSH
21322: LD_INT 9
21324: PUSH
21325: LD_INT 10
21327: PUSH
21328: LD_INT 11
21330: PUSH
21331: LD_INT 12
21333: PUSH
21334: LD_INT 13
21336: PUSH
21337: LD_INT 14
21339: PUSH
21340: LD_INT 15
21342: PUSH
21343: LD_INT 16
21345: PUSH
21346: LD_INT 17
21348: PUSH
21349: LD_INT 18
21351: PUSH
21352: LD_INT 19
21354: PUSH
21355: LD_INT 20
21357: PUSH
21358: LD_INT 21
21360: PUSH
21361: LD_INT 22
21363: PUSH
21364: LD_INT 23
21366: PUSH
21367: LD_INT 24
21369: PUSH
21370: LD_INT 25
21372: PUSH
21373: LD_INT 26
21375: PUSH
21376: LD_INT 27
21378: PUSH
21379: LD_INT 28
21381: PUSH
21382: LD_INT 29
21384: PUSH
21385: LD_INT 30
21387: PUSH
21388: LD_INT 31
21390: PUSH
21391: LD_INT 32
21393: PUSH
21394: LD_INT 33
21396: PUSH
21397: LD_INT 34
21399: PUSH
21400: LD_INT 36
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 101
21442: PUSH
21443: LD_INT 102
21445: PUSH
21446: LD_INT 103
21448: PUSH
21449: LD_INT 104
21451: PUSH
21452: LD_INT 105
21454: PUSH
21455: LD_INT 106
21457: PUSH
21458: LD_INT 107
21460: PUSH
21461: LD_INT 108
21463: PUSH
21464: LD_INT 109
21466: PUSH
21467: LD_INT 110
21469: PUSH
21470: LD_INT 111
21472: PUSH
21473: LD_INT 112
21475: PUSH
21476: LD_INT 113
21478: PUSH
21479: LD_INT 114
21481: PUSH
21482: LD_INT 116
21484: PUSH
21485: LD_INT 117
21487: PUSH
21488: LD_INT 118
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: ST_TO_ADDR
21514: GO 21913
21516: LD_INT 18
21518: DOUBLE
21519: EQUAL
21520: IFTRUE 21524
21522: GO 21672
21524: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21525: LD_ADDR_VAR 0 2
21529: PUSH
21530: LD_INT 2
21532: PUSH
21533: LD_INT 4
21535: PUSH
21536: LD_INT 5
21538: PUSH
21539: LD_INT 7
21541: PUSH
21542: LD_INT 11
21544: PUSH
21545: LD_INT 12
21547: PUSH
21548: LD_INT 15
21550: PUSH
21551: LD_INT 16
21553: PUSH
21554: LD_INT 20
21556: PUSH
21557: LD_INT 21
21559: PUSH
21560: LD_INT 22
21562: PUSH
21563: LD_INT 23
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 26
21571: PUSH
21572: LD_INT 30
21574: PUSH
21575: LD_INT 31
21577: PUSH
21578: LD_INT 32
21580: PUSH
21581: LD_INT 33
21583: PUSH
21584: LD_INT 34
21586: PUSH
21587: LD_INT 35
21589: PUSH
21590: LD_INT 36
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 101
21618: PUSH
21619: LD_INT 102
21621: PUSH
21622: LD_INT 103
21624: PUSH
21625: LD_INT 106
21627: PUSH
21628: LD_INT 108
21630: PUSH
21631: LD_INT 112
21633: PUSH
21634: LD_INT 113
21636: PUSH
21637: LD_INT 114
21639: PUSH
21640: LD_INT 115
21642: PUSH
21643: LD_INT 116
21645: PUSH
21646: LD_INT 117
21648: PUSH
21649: LD_INT 118
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: ST_TO_ADDR
21670: GO 21913
21672: LD_INT 19
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21912
21680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21681: LD_ADDR_VAR 0 2
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: LD_INT 4
21697: PUSH
21698: LD_INT 5
21700: PUSH
21701: LD_INT 6
21703: PUSH
21704: LD_INT 7
21706: PUSH
21707: LD_INT 8
21709: PUSH
21710: LD_INT 9
21712: PUSH
21713: LD_INT 10
21715: PUSH
21716: LD_INT 11
21718: PUSH
21719: LD_INT 12
21721: PUSH
21722: LD_INT 13
21724: PUSH
21725: LD_INT 14
21727: PUSH
21728: LD_INT 15
21730: PUSH
21731: LD_INT 16
21733: PUSH
21734: LD_INT 17
21736: PUSH
21737: LD_INT 18
21739: PUSH
21740: LD_INT 19
21742: PUSH
21743: LD_INT 20
21745: PUSH
21746: LD_INT 21
21748: PUSH
21749: LD_INT 22
21751: PUSH
21752: LD_INT 23
21754: PUSH
21755: LD_INT 24
21757: PUSH
21758: LD_INT 25
21760: PUSH
21761: LD_INT 26
21763: PUSH
21764: LD_INT 27
21766: PUSH
21767: LD_INT 28
21769: PUSH
21770: LD_INT 29
21772: PUSH
21773: LD_INT 30
21775: PUSH
21776: LD_INT 31
21778: PUSH
21779: LD_INT 32
21781: PUSH
21782: LD_INT 33
21784: PUSH
21785: LD_INT 34
21787: PUSH
21788: LD_INT 35
21790: PUSH
21791: LD_INT 36
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 101
21834: PUSH
21835: LD_INT 102
21837: PUSH
21838: LD_INT 103
21840: PUSH
21841: LD_INT 104
21843: PUSH
21844: LD_INT 105
21846: PUSH
21847: LD_INT 106
21849: PUSH
21850: LD_INT 107
21852: PUSH
21853: LD_INT 108
21855: PUSH
21856: LD_INT 109
21858: PUSH
21859: LD_INT 110
21861: PUSH
21862: LD_INT 111
21864: PUSH
21865: LD_INT 112
21867: PUSH
21868: LD_INT 113
21870: PUSH
21871: LD_INT 114
21873: PUSH
21874: LD_INT 115
21876: PUSH
21877: LD_INT 116
21879: PUSH
21880: LD_INT 117
21882: PUSH
21883: LD_INT 118
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: ST_TO_ADDR
21910: GO 21913
21912: POP
// end else
21913: GO 22144
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 1
21922: PUSH
21923: LD_INT 2
21925: PUSH
21926: LD_INT 3
21928: PUSH
21929: LD_INT 4
21931: PUSH
21932: LD_INT 5
21934: PUSH
21935: LD_INT 6
21937: PUSH
21938: LD_INT 7
21940: PUSH
21941: LD_INT 8
21943: PUSH
21944: LD_INT 9
21946: PUSH
21947: LD_INT 10
21949: PUSH
21950: LD_INT 11
21952: PUSH
21953: LD_INT 12
21955: PUSH
21956: LD_INT 13
21958: PUSH
21959: LD_INT 14
21961: PUSH
21962: LD_INT 15
21964: PUSH
21965: LD_INT 16
21967: PUSH
21968: LD_INT 17
21970: PUSH
21971: LD_INT 18
21973: PUSH
21974: LD_INT 19
21976: PUSH
21977: LD_INT 20
21979: PUSH
21980: LD_INT 21
21982: PUSH
21983: LD_INT 22
21985: PUSH
21986: LD_INT 23
21988: PUSH
21989: LD_INT 24
21991: PUSH
21992: LD_INT 25
21994: PUSH
21995: LD_INT 26
21997: PUSH
21998: LD_INT 27
22000: PUSH
22001: LD_INT 28
22003: PUSH
22004: LD_INT 29
22006: PUSH
22007: LD_INT 30
22009: PUSH
22010: LD_INT 31
22012: PUSH
22013: LD_INT 32
22015: PUSH
22016: LD_INT 33
22018: PUSH
22019: LD_INT 34
22021: PUSH
22022: LD_INT 35
22024: PUSH
22025: LD_INT 36
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 101
22068: PUSH
22069: LD_INT 102
22071: PUSH
22072: LD_INT 103
22074: PUSH
22075: LD_INT 104
22077: PUSH
22078: LD_INT 105
22080: PUSH
22081: LD_INT 106
22083: PUSH
22084: LD_INT 107
22086: PUSH
22087: LD_INT 108
22089: PUSH
22090: LD_INT 109
22092: PUSH
22093: LD_INT 110
22095: PUSH
22096: LD_INT 111
22098: PUSH
22099: LD_INT 112
22101: PUSH
22102: LD_INT 113
22104: PUSH
22105: LD_INT 114
22107: PUSH
22108: LD_INT 115
22110: PUSH
22111: LD_INT 116
22113: PUSH
22114: LD_INT 117
22116: PUSH
22117: LD_INT 118
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: ST_TO_ADDR
// if result then
22144: LD_VAR 0 2
22148: IFFALSE 22934
// begin normal :=  ;
22150: LD_ADDR_VAR 0 5
22154: PUSH
22155: LD_STRING 
22157: ST_TO_ADDR
// hardcore :=  ;
22158: LD_ADDR_VAR 0 6
22162: PUSH
22163: LD_STRING 
22165: ST_TO_ADDR
// active :=  ;
22166: LD_ADDR_VAR 0 7
22170: PUSH
22171: LD_STRING 
22173: ST_TO_ADDR
// for i = 1 to normalCounter do
22174: LD_ADDR_VAR 0 8
22178: PUSH
22179: DOUBLE
22180: LD_INT 1
22182: DEC
22183: ST_TO_ADDR
22184: LD_EXP 53
22188: PUSH
22189: FOR_TO
22190: IFFALSE 22291
// begin tmp := 0 ;
22192: LD_ADDR_VAR 0 3
22196: PUSH
22197: LD_STRING 0
22199: ST_TO_ADDR
// if result [ 1 ] then
22200: LD_VAR 0 2
22204: PUSH
22205: LD_INT 1
22207: ARRAY
22208: IFFALSE 22273
// if result [ 1 ] [ 1 ] = i then
22210: LD_VAR 0 2
22214: PUSH
22215: LD_INT 1
22217: ARRAY
22218: PUSH
22219: LD_INT 1
22221: ARRAY
22222: PUSH
22223: LD_VAR 0 8
22227: EQUAL
22228: IFFALSE 22273
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22230: LD_ADDR_VAR 0 2
22234: PUSH
22235: LD_VAR 0 2
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: LD_VAR 0 2
22247: PUSH
22248: LD_INT 1
22250: ARRAY
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 3
22259: PPUSH
22260: CALL_OW 1
22264: ST_TO_ADDR
// tmp := 1 ;
22265: LD_ADDR_VAR 0 3
22269: PUSH
22270: LD_STRING 1
22272: ST_TO_ADDR
// end ; normal := normal & tmp ;
22273: LD_ADDR_VAR 0 5
22277: PUSH
22278: LD_VAR 0 5
22282: PUSH
22283: LD_VAR 0 3
22287: STR
22288: ST_TO_ADDR
// end ;
22289: GO 22189
22291: POP
22292: POP
// for i = 1 to hardcoreCounter do
22293: LD_ADDR_VAR 0 8
22297: PUSH
22298: DOUBLE
22299: LD_INT 1
22301: DEC
22302: ST_TO_ADDR
22303: LD_EXP 54
22307: PUSH
22308: FOR_TO
22309: IFFALSE 22414
// begin tmp := 0 ;
22311: LD_ADDR_VAR 0 3
22315: PUSH
22316: LD_STRING 0
22318: ST_TO_ADDR
// if result [ 2 ] then
22319: LD_VAR 0 2
22323: PUSH
22324: LD_INT 2
22326: ARRAY
22327: IFFALSE 22396
// if result [ 2 ] [ 1 ] = 100 + i then
22329: LD_VAR 0 2
22333: PUSH
22334: LD_INT 2
22336: ARRAY
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: PUSH
22342: LD_INT 100
22344: PUSH
22345: LD_VAR 0 8
22349: PLUS
22350: EQUAL
22351: IFFALSE 22396
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_VAR 0 2
22362: PPUSH
22363: LD_INT 2
22365: PPUSH
22366: LD_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: ARRAY
22374: PPUSH
22375: LD_INT 1
22377: PPUSH
22378: CALL_OW 3
22382: PPUSH
22383: CALL_OW 1
22387: ST_TO_ADDR
// tmp := 1 ;
22388: LD_ADDR_VAR 0 3
22392: PUSH
22393: LD_STRING 1
22395: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22396: LD_ADDR_VAR 0 6
22400: PUSH
22401: LD_VAR 0 6
22405: PUSH
22406: LD_VAR 0 3
22410: STR
22411: ST_TO_ADDR
// end ;
22412: GO 22308
22414: POP
22415: POP
// if isGameLoad then
22416: LD_VAR 0 1
22420: IFFALSE 22895
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22422: LD_ADDR_VAR 0 4
22426: PUSH
22427: LD_EXP 57
22431: PUSH
22432: LD_EXP 56
22436: PUSH
22437: LD_EXP 58
22441: PUSH
22442: LD_EXP 55
22446: PUSH
22447: LD_EXP 59
22451: PUSH
22452: LD_EXP 60
22456: PUSH
22457: LD_EXP 61
22461: PUSH
22462: LD_EXP 62
22466: PUSH
22467: LD_EXP 63
22471: PUSH
22472: LD_EXP 64
22476: PUSH
22477: LD_EXP 65
22481: PUSH
22482: LD_EXP 66
22486: PUSH
22487: LD_EXP 67
22491: PUSH
22492: LD_EXP 68
22496: PUSH
22497: LD_EXP 76
22501: PUSH
22502: LD_EXP 77
22506: PUSH
22507: LD_EXP 78
22511: PUSH
22512: LD_EXP 79
22516: PUSH
22517: LD_EXP 81
22521: PUSH
22522: LD_EXP 82
22526: PUSH
22527: LD_EXP 83
22531: PUSH
22532: LD_EXP 86
22536: PUSH
22537: LD_EXP 88
22541: PUSH
22542: LD_EXP 89
22546: PUSH
22547: LD_EXP 90
22551: PUSH
22552: LD_EXP 92
22556: PUSH
22557: LD_EXP 93
22561: PUSH
22562: LD_EXP 96
22566: PUSH
22567: LD_EXP 97
22571: PUSH
22572: LD_EXP 98
22576: PUSH
22577: LD_EXP 99
22581: PUSH
22582: LD_EXP 100
22586: PUSH
22587: LD_EXP 101
22591: PUSH
22592: LD_EXP 102
22596: PUSH
22597: LD_EXP 103
22601: PUSH
22602: LD_EXP 104
22606: PUSH
22607: LD_EXP 69
22611: PUSH
22612: LD_EXP 70
22616: PUSH
22617: LD_EXP 73
22621: PUSH
22622: LD_EXP 74
22626: PUSH
22627: LD_EXP 75
22631: PUSH
22632: LD_EXP 71
22636: PUSH
22637: LD_EXP 72
22641: PUSH
22642: LD_EXP 80
22646: PUSH
22647: LD_EXP 84
22651: PUSH
22652: LD_EXP 85
22656: PUSH
22657: LD_EXP 87
22661: PUSH
22662: LD_EXP 91
22666: PUSH
22667: LD_EXP 94
22671: PUSH
22672: LD_EXP 95
22676: PUSH
22677: LD_EXP 105
22681: PUSH
22682: LD_EXP 106
22686: PUSH
22687: LD_EXP 107
22691: PUSH
22692: LD_EXP 108
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: ST_TO_ADDR
// tmp :=  ;
22753: LD_ADDR_VAR 0 3
22757: PUSH
22758: LD_STRING 
22760: ST_TO_ADDR
// for i = 1 to normalCounter do
22761: LD_ADDR_VAR 0 8
22765: PUSH
22766: DOUBLE
22767: LD_INT 1
22769: DEC
22770: ST_TO_ADDR
22771: LD_EXP 53
22775: PUSH
22776: FOR_TO
22777: IFFALSE 22813
// begin if flags [ i ] then
22779: LD_VAR 0 4
22783: PUSH
22784: LD_VAR 0 8
22788: ARRAY
22789: IFFALSE 22811
// tmp := tmp & i & ; ;
22791: LD_ADDR_VAR 0 3
22795: PUSH
22796: LD_VAR 0 3
22800: PUSH
22801: LD_VAR 0 8
22805: STR
22806: PUSH
22807: LD_STRING ;
22809: STR
22810: ST_TO_ADDR
// end ;
22811: GO 22776
22813: POP
22814: POP
// for i = 1 to hardcoreCounter do
22815: LD_ADDR_VAR 0 8
22819: PUSH
22820: DOUBLE
22821: LD_INT 1
22823: DEC
22824: ST_TO_ADDR
22825: LD_EXP 54
22829: PUSH
22830: FOR_TO
22831: IFFALSE 22877
// begin if flags [ normalCounter + i ] then
22833: LD_VAR 0 4
22837: PUSH
22838: LD_EXP 53
22842: PUSH
22843: LD_VAR 0 8
22847: PLUS
22848: ARRAY
22849: IFFALSE 22875
// tmp := tmp & ( 100 + i ) & ; ;
22851: LD_ADDR_VAR 0 3
22855: PUSH
22856: LD_VAR 0 3
22860: PUSH
22861: LD_INT 100
22863: PUSH
22864: LD_VAR 0 8
22868: PLUS
22869: STR
22870: PUSH
22871: LD_STRING ;
22873: STR
22874: ST_TO_ADDR
// end ;
22875: GO 22830
22877: POP
22878: POP
// if tmp then
22879: LD_VAR 0 3
22883: IFFALSE 22895
// active := tmp ;
22885: LD_ADDR_VAR 0 7
22889: PUSH
22890: LD_VAR 0 3
22894: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
22895: LD_STRING getStreamItemsFromMission("
22897: PUSH
22898: LD_VAR 0 5
22902: STR
22903: PUSH
22904: LD_STRING ","
22906: STR
22907: PUSH
22908: LD_VAR 0 6
22912: STR
22913: PUSH
22914: LD_STRING ","
22916: STR
22917: PUSH
22918: LD_VAR 0 7
22922: STR
22923: PUSH
22924: LD_STRING ")
22926: STR
22927: PPUSH
22928: CALL_OW 559
// end else
22932: GO 22941
// ToLua ( getStreamItemsFromMission("","","") ) ;
22934: LD_STRING getStreamItemsFromMission("","","")
22936: PPUSH
22937: CALL_OW 559
// end ;
22941: LD_VAR 0 2
22945: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22946: LD_EXP 52
22950: PUSH
22951: LD_EXP 57
22955: AND
22956: IFFALSE 23080
22958: GO 22960
22960: DISABLE
22961: LD_INT 0
22963: PPUSH
22964: PPUSH
// begin enable ;
22965: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22966: LD_ADDR_VAR 0 2
22970: PUSH
22971: LD_INT 22
22973: PUSH
22974: LD_OWVAR 2
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: LD_INT 34
22988: PUSH
22989: LD_INT 7
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 34
22998: PUSH
22999: LD_INT 45
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 34
23008: PUSH
23009: LD_INT 28
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 34
23018: PUSH
23019: LD_INT 47
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PPUSH
23037: CALL_OW 69
23041: ST_TO_ADDR
// if not tmp then
23042: LD_VAR 0 2
23046: NOT
23047: IFFALSE 23051
// exit ;
23049: GO 23080
// for i in tmp do
23051: LD_ADDR_VAR 0 1
23055: PUSH
23056: LD_VAR 0 2
23060: PUSH
23061: FOR_IN
23062: IFFALSE 23078
// begin SetLives ( i , 0 ) ;
23064: LD_VAR 0 1
23068: PPUSH
23069: LD_INT 0
23071: PPUSH
23072: CALL_OW 234
// end ;
23076: GO 23061
23078: POP
23079: POP
// end ;
23080: PPOPN 2
23082: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23083: LD_EXP 52
23087: PUSH
23088: LD_EXP 58
23092: AND
23093: IFFALSE 23177
23095: GO 23097
23097: DISABLE
23098: LD_INT 0
23100: PPUSH
23101: PPUSH
// begin enable ;
23102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23103: LD_ADDR_VAR 0 2
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_OWVAR 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 32
23122: PUSH
23123: LD_INT 3
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PPUSH
23134: CALL_OW 69
23138: ST_TO_ADDR
// if not tmp then
23139: LD_VAR 0 2
23143: NOT
23144: IFFALSE 23148
// exit ;
23146: GO 23177
// for i in tmp do
23148: LD_ADDR_VAR 0 1
23152: PUSH
23153: LD_VAR 0 2
23157: PUSH
23158: FOR_IN
23159: IFFALSE 23175
// begin SetLives ( i , 0 ) ;
23161: LD_VAR 0 1
23165: PPUSH
23166: LD_INT 0
23168: PPUSH
23169: CALL_OW 234
// end ;
23173: GO 23158
23175: POP
23176: POP
// end ;
23177: PPOPN 2
23179: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23180: LD_EXP 52
23184: PUSH
23185: LD_EXP 55
23189: AND
23190: IFFALSE 23283
23192: GO 23194
23194: DISABLE
23195: LD_INT 0
23197: PPUSH
// begin enable ;
23198: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23199: LD_ADDR_VAR 0 1
23203: PUSH
23204: LD_INT 22
23206: PUSH
23207: LD_OWVAR 2
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: LD_INT 25
23221: PUSH
23222: LD_INT 5
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 25
23231: PUSH
23232: LD_INT 9
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 25
23241: PUSH
23242: LD_INT 8
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PPUSH
23259: CALL_OW 69
23263: PUSH
23264: FOR_IN
23265: IFFALSE 23281
// begin SetClass ( i , 1 ) ;
23267: LD_VAR 0 1
23271: PPUSH
23272: LD_INT 1
23274: PPUSH
23275: CALL_OW 336
// end ;
23279: GO 23264
23281: POP
23282: POP
// end ;
23283: PPOPN 1
23285: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23286: LD_EXP 52
23290: PUSH
23291: LD_EXP 56
23295: AND
23296: PUSH
23297: LD_OWVAR 65
23301: PUSH
23302: LD_INT 7
23304: LESS
23305: AND
23306: IFFALSE 23320
23308: GO 23310
23310: DISABLE
// begin enable ;
23311: ENABLE
// game_speed := 7 ;
23312: LD_ADDR_OWVAR 65
23316: PUSH
23317: LD_INT 7
23319: ST_TO_ADDR
// end ;
23320: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23321: LD_EXP 52
23325: PUSH
23326: LD_EXP 59
23330: AND
23331: IFFALSE 23533
23333: GO 23335
23335: DISABLE
23336: LD_INT 0
23338: PPUSH
23339: PPUSH
23340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23341: LD_ADDR_VAR 0 3
23345: PUSH
23346: LD_INT 81
23348: PUSH
23349: LD_OWVAR 2
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 21
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PPUSH
23372: CALL_OW 69
23376: ST_TO_ADDR
// if not tmp then
23377: LD_VAR 0 3
23381: NOT
23382: IFFALSE 23386
// exit ;
23384: GO 23533
// if tmp > 5 then
23386: LD_VAR 0 3
23390: PUSH
23391: LD_INT 5
23393: GREATER
23394: IFFALSE 23406
// k := 5 else
23396: LD_ADDR_VAR 0 2
23400: PUSH
23401: LD_INT 5
23403: ST_TO_ADDR
23404: GO 23416
// k := tmp ;
23406: LD_ADDR_VAR 0 2
23410: PUSH
23411: LD_VAR 0 3
23415: ST_TO_ADDR
// for i := 1 to k do
23416: LD_ADDR_VAR 0 1
23420: PUSH
23421: DOUBLE
23422: LD_INT 1
23424: DEC
23425: ST_TO_ADDR
23426: LD_VAR 0 2
23430: PUSH
23431: FOR_TO
23432: IFFALSE 23531
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23434: LD_VAR 0 3
23438: PUSH
23439: LD_VAR 0 1
23443: ARRAY
23444: PPUSH
23445: LD_VAR 0 1
23449: PUSH
23450: LD_INT 4
23452: MOD
23453: PUSH
23454: LD_INT 1
23456: PLUS
23457: PPUSH
23458: CALL_OW 259
23462: PUSH
23463: LD_INT 10
23465: LESS
23466: IFFALSE 23529
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23468: LD_VAR 0 3
23472: PUSH
23473: LD_VAR 0 1
23477: ARRAY
23478: PPUSH
23479: LD_VAR 0 1
23483: PUSH
23484: LD_INT 4
23486: MOD
23487: PUSH
23488: LD_INT 1
23490: PLUS
23491: PPUSH
23492: LD_VAR 0 3
23496: PUSH
23497: LD_VAR 0 1
23501: ARRAY
23502: PPUSH
23503: LD_VAR 0 1
23507: PUSH
23508: LD_INT 4
23510: MOD
23511: PUSH
23512: LD_INT 1
23514: PLUS
23515: PPUSH
23516: CALL_OW 259
23520: PUSH
23521: LD_INT 1
23523: PLUS
23524: PPUSH
23525: CALL_OW 237
23529: GO 23431
23531: POP
23532: POP
// end ;
23533: PPOPN 3
23535: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23536: LD_EXP 52
23540: PUSH
23541: LD_EXP 60
23545: AND
23546: IFFALSE 23566
23548: GO 23550
23550: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23551: LD_INT 4
23553: PPUSH
23554: LD_OWVAR 2
23558: PPUSH
23559: LD_INT 0
23561: PPUSH
23562: CALL_OW 324
23566: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23567: LD_EXP 52
23571: PUSH
23572: LD_EXP 89
23576: AND
23577: IFFALSE 23597
23579: GO 23581
23581: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23582: LD_INT 19
23584: PPUSH
23585: LD_OWVAR 2
23589: PPUSH
23590: LD_INT 0
23592: PPUSH
23593: CALL_OW 324
23597: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23598: LD_EXP 52
23602: PUSH
23603: LD_EXP 61
23607: AND
23608: IFFALSE 23710
23610: GO 23612
23612: DISABLE
23613: LD_INT 0
23615: PPUSH
23616: PPUSH
// begin enable ;
23617: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23618: LD_ADDR_VAR 0 2
23622: PUSH
23623: LD_INT 22
23625: PUSH
23626: LD_OWVAR 2
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: LD_INT 34
23640: PUSH
23641: LD_INT 11
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 34
23650: PUSH
23651: LD_INT 30
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PPUSH
23667: CALL_OW 69
23671: ST_TO_ADDR
// if not tmp then
23672: LD_VAR 0 2
23676: NOT
23677: IFFALSE 23681
// exit ;
23679: GO 23710
// for i in tmp do
23681: LD_ADDR_VAR 0 1
23685: PUSH
23686: LD_VAR 0 2
23690: PUSH
23691: FOR_IN
23692: IFFALSE 23708
// begin SetLives ( i , 0 ) ;
23694: LD_VAR 0 1
23698: PPUSH
23699: LD_INT 0
23701: PPUSH
23702: CALL_OW 234
// end ;
23706: GO 23691
23708: POP
23709: POP
// end ;
23710: PPOPN 2
23712: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23713: LD_EXP 52
23717: PUSH
23718: LD_EXP 62
23722: AND
23723: IFFALSE 23743
23725: GO 23727
23727: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23728: LD_INT 32
23730: PPUSH
23731: LD_OWVAR 2
23735: PPUSH
23736: LD_INT 0
23738: PPUSH
23739: CALL_OW 324
23743: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23744: LD_EXP 52
23748: PUSH
23749: LD_EXP 63
23753: AND
23754: IFFALSE 23935
23756: GO 23758
23758: DISABLE
23759: LD_INT 0
23761: PPUSH
23762: PPUSH
23763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23764: LD_ADDR_VAR 0 2
23768: PUSH
23769: LD_INT 22
23771: PUSH
23772: LD_OWVAR 2
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 33
23783: PUSH
23784: LD_INT 3
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PPUSH
23795: CALL_OW 69
23799: ST_TO_ADDR
// if not tmp then
23800: LD_VAR 0 2
23804: NOT
23805: IFFALSE 23809
// exit ;
23807: GO 23935
// side := 0 ;
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 0
23816: ST_TO_ADDR
// for i := 1 to 8 do
23817: LD_ADDR_VAR 0 1
23821: PUSH
23822: DOUBLE
23823: LD_INT 1
23825: DEC
23826: ST_TO_ADDR
23827: LD_INT 8
23829: PUSH
23830: FOR_TO
23831: IFFALSE 23879
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23833: LD_OWVAR 2
23837: PUSH
23838: LD_VAR 0 1
23842: NONEQUAL
23843: PUSH
23844: LD_OWVAR 2
23848: PPUSH
23849: LD_VAR 0 1
23853: PPUSH
23854: CALL_OW 81
23858: PUSH
23859: LD_INT 2
23861: EQUAL
23862: AND
23863: IFFALSE 23877
// begin side := i ;
23865: LD_ADDR_VAR 0 3
23869: PUSH
23870: LD_VAR 0 1
23874: ST_TO_ADDR
// break ;
23875: GO 23879
// end ;
23877: GO 23830
23879: POP
23880: POP
// if not side then
23881: LD_VAR 0 3
23885: NOT
23886: IFFALSE 23890
// exit ;
23888: GO 23935
// for i := 1 to tmp do
23890: LD_ADDR_VAR 0 1
23894: PUSH
23895: DOUBLE
23896: LD_INT 1
23898: DEC
23899: ST_TO_ADDR
23900: LD_VAR 0 2
23904: PUSH
23905: FOR_TO
23906: IFFALSE 23933
// if Prob ( 60 ) then
23908: LD_INT 60
23910: PPUSH
23911: CALL_OW 13
23915: IFFALSE 23931
// SetSide ( i , side ) ;
23917: LD_VAR 0 1
23921: PPUSH
23922: LD_VAR 0 3
23926: PPUSH
23927: CALL_OW 235
23931: GO 23905
23933: POP
23934: POP
// end ;
23935: PPOPN 3
23937: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23938: LD_EXP 52
23942: PUSH
23943: LD_EXP 65
23947: AND
23948: IFFALSE 24067
23950: GO 23952
23952: DISABLE
23953: LD_INT 0
23955: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23956: LD_ADDR_VAR 0 1
23960: PUSH
23961: LD_INT 22
23963: PUSH
23964: LD_OWVAR 2
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 21
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 3
23985: PUSH
23986: LD_INT 23
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: PPUSH
24005: CALL_OW 69
24009: PUSH
24010: FOR_IN
24011: IFFALSE 24065
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24013: LD_VAR 0 1
24017: PPUSH
24018: CALL_OW 257
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: LD_INT 3
24031: PUSH
24032: LD_INT 4
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: IN
24041: IFFALSE 24063
// SetClass ( un , rand ( 1 , 4 ) ) ;
24043: LD_VAR 0 1
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: LD_INT 4
24053: PPUSH
24054: CALL_OW 12
24058: PPUSH
24059: CALL_OW 336
24063: GO 24010
24065: POP
24066: POP
// end ;
24067: PPOPN 1
24069: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24070: LD_EXP 52
24074: PUSH
24075: LD_EXP 64
24079: AND
24080: IFFALSE 24159
24082: GO 24084
24084: DISABLE
24085: LD_INT 0
24087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24088: LD_ADDR_VAR 0 1
24092: PUSH
24093: LD_INT 22
24095: PUSH
24096: LD_OWVAR 2
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 21
24107: PUSH
24108: LD_INT 3
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PPUSH
24119: CALL_OW 69
24123: ST_TO_ADDR
// if not tmp then
24124: LD_VAR 0 1
24128: NOT
24129: IFFALSE 24133
// exit ;
24131: GO 24159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24133: LD_VAR 0 1
24137: PUSH
24138: LD_INT 1
24140: PPUSH
24141: LD_VAR 0 1
24145: PPUSH
24146: CALL_OW 12
24150: ARRAY
24151: PPUSH
24152: LD_INT 100
24154: PPUSH
24155: CALL_OW 234
// end ;
24159: PPOPN 1
24161: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24162: LD_EXP 52
24166: PUSH
24167: LD_EXP 66
24171: AND
24172: IFFALSE 24270
24174: GO 24176
24176: DISABLE
24177: LD_INT 0
24179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24180: LD_ADDR_VAR 0 1
24184: PUSH
24185: LD_INT 22
24187: PUSH
24188: LD_OWVAR 2
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 21
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PPUSH
24211: CALL_OW 69
24215: ST_TO_ADDR
// if not tmp then
24216: LD_VAR 0 1
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24270
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24225: LD_VAR 0 1
24229: PUSH
24230: LD_INT 1
24232: PPUSH
24233: LD_VAR 0 1
24237: PPUSH
24238: CALL_OW 12
24242: ARRAY
24243: PPUSH
24244: LD_INT 1
24246: PPUSH
24247: LD_INT 4
24249: PPUSH
24250: CALL_OW 12
24254: PPUSH
24255: LD_INT 3000
24257: PPUSH
24258: LD_INT 9000
24260: PPUSH
24261: CALL_OW 12
24265: PPUSH
24266: CALL_OW 492
// end ;
24270: PPOPN 1
24272: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24273: LD_EXP 52
24277: PUSH
24278: LD_EXP 67
24282: AND
24283: IFFALSE 24303
24285: GO 24287
24287: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24288: LD_INT 1
24290: PPUSH
24291: LD_OWVAR 2
24295: PPUSH
24296: LD_INT 0
24298: PPUSH
24299: CALL_OW 324
24303: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24304: LD_EXP 52
24308: PUSH
24309: LD_EXP 68
24313: AND
24314: IFFALSE 24397
24316: GO 24318
24318: DISABLE
24319: LD_INT 0
24321: PPUSH
24322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24323: LD_ADDR_VAR 0 2
24327: PUSH
24328: LD_INT 22
24330: PUSH
24331: LD_OWVAR 2
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 21
24342: PUSH
24343: LD_INT 3
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PPUSH
24354: CALL_OW 69
24358: ST_TO_ADDR
// if not tmp then
24359: LD_VAR 0 2
24363: NOT
24364: IFFALSE 24368
// exit ;
24366: GO 24397
// for i in tmp do
24368: LD_ADDR_VAR 0 1
24372: PUSH
24373: LD_VAR 0 2
24377: PUSH
24378: FOR_IN
24379: IFFALSE 24395
// SetBLevel ( i , 10 ) ;
24381: LD_VAR 0 1
24385: PPUSH
24386: LD_INT 10
24388: PPUSH
24389: CALL_OW 241
24393: GO 24378
24395: POP
24396: POP
// end ;
24397: PPOPN 2
24399: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24400: LD_EXP 52
24404: PUSH
24405: LD_EXP 69
24409: AND
24410: IFFALSE 24521
24412: GO 24414
24414: DISABLE
24415: LD_INT 0
24417: PPUSH
24418: PPUSH
24419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24420: LD_ADDR_VAR 0 3
24424: PUSH
24425: LD_INT 22
24427: PUSH
24428: LD_OWVAR 2
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 25
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PPUSH
24451: CALL_OW 69
24455: ST_TO_ADDR
// if not tmp then
24456: LD_VAR 0 3
24460: NOT
24461: IFFALSE 24465
// exit ;
24463: GO 24521
// un := tmp [ rand ( 1 , tmp ) ] ;
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: LD_VAR 0 3
24474: PUSH
24475: LD_INT 1
24477: PPUSH
24478: LD_VAR 0 3
24482: PPUSH
24483: CALL_OW 12
24487: ARRAY
24488: ST_TO_ADDR
// if Crawls ( un ) then
24489: LD_VAR 0 2
24493: PPUSH
24494: CALL_OW 318
24498: IFFALSE 24509
// ComWalk ( un ) ;
24500: LD_VAR 0 2
24504: PPUSH
24505: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24509: LD_VAR 0 2
24513: PPUSH
24514: LD_INT 5
24516: PPUSH
24517: CALL_OW 336
// end ;
24521: PPOPN 3
24523: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24524: LD_EXP 52
24528: PUSH
24529: LD_EXP 70
24533: AND
24534: PUSH
24535: LD_OWVAR 67
24539: PUSH
24540: LD_INT 4
24542: LESS
24543: AND
24544: IFFALSE 24563
24546: GO 24548
24548: DISABLE
// begin Difficulty := Difficulty + 1 ;
24549: LD_ADDR_OWVAR 67
24553: PUSH
24554: LD_OWVAR 67
24558: PUSH
24559: LD_INT 1
24561: PLUS
24562: ST_TO_ADDR
// end ;
24563: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24564: LD_EXP 52
24568: PUSH
24569: LD_EXP 71
24573: AND
24574: IFFALSE 24677
24576: GO 24578
24578: DISABLE
24579: LD_INT 0
24581: PPUSH
// begin for i := 1 to 5 do
24582: LD_ADDR_VAR 0 1
24586: PUSH
24587: DOUBLE
24588: LD_INT 1
24590: DEC
24591: ST_TO_ADDR
24592: LD_INT 5
24594: PUSH
24595: FOR_TO
24596: IFFALSE 24675
// begin uc_nation := nation_nature ;
24598: LD_ADDR_OWVAR 21
24602: PUSH
24603: LD_INT 0
24605: ST_TO_ADDR
// uc_side := 0 ;
24606: LD_ADDR_OWVAR 20
24610: PUSH
24611: LD_INT 0
24613: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24614: LD_ADDR_OWVAR 29
24618: PUSH
24619: LD_INT 12
24621: PUSH
24622: LD_INT 12
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: ST_TO_ADDR
// hc_agressivity := 20 ;
24629: LD_ADDR_OWVAR 35
24633: PUSH
24634: LD_INT 20
24636: ST_TO_ADDR
// hc_class := class_tiger ;
24637: LD_ADDR_OWVAR 28
24641: PUSH
24642: LD_INT 14
24644: ST_TO_ADDR
// hc_gallery :=  ;
24645: LD_ADDR_OWVAR 33
24649: PUSH
24650: LD_STRING 
24652: ST_TO_ADDR
// hc_name :=  ;
24653: LD_ADDR_OWVAR 26
24657: PUSH
24658: LD_STRING 
24660: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24661: CALL_OW 44
24665: PPUSH
24666: LD_INT 0
24668: PPUSH
24669: CALL_OW 51
// end ;
24673: GO 24595
24675: POP
24676: POP
// end ;
24677: PPOPN 1
24679: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24680: LD_EXP 52
24684: PUSH
24685: LD_EXP 72
24689: AND
24690: IFFALSE 24699
24692: GO 24694
24694: DISABLE
// StreamSibBomb ;
24695: CALL 24700 0 0
24699: END
// export function StreamSibBomb ; var i , x , y ; begin
24700: LD_INT 0
24702: PPUSH
24703: PPUSH
24704: PPUSH
24705: PPUSH
// result := false ;
24706: LD_ADDR_VAR 0 1
24710: PUSH
24711: LD_INT 0
24713: ST_TO_ADDR
// for i := 1 to 16 do
24714: LD_ADDR_VAR 0 2
24718: PUSH
24719: DOUBLE
24720: LD_INT 1
24722: DEC
24723: ST_TO_ADDR
24724: LD_INT 16
24726: PUSH
24727: FOR_TO
24728: IFFALSE 24927
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_INT 10
24737: PUSH
24738: LD_INT 20
24740: PUSH
24741: LD_INT 30
24743: PUSH
24744: LD_INT 40
24746: PUSH
24747: LD_INT 50
24749: PUSH
24750: LD_INT 60
24752: PUSH
24753: LD_INT 70
24755: PUSH
24756: LD_INT 80
24758: PUSH
24759: LD_INT 90
24761: PUSH
24762: LD_INT 100
24764: PUSH
24765: LD_INT 110
24767: PUSH
24768: LD_INT 120
24770: PUSH
24771: LD_INT 130
24773: PUSH
24774: LD_INT 140
24776: PUSH
24777: LD_INT 150
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PPUSH
24800: LD_INT 15
24802: PPUSH
24803: CALL_OW 12
24807: ARRAY
24808: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24809: LD_ADDR_VAR 0 4
24813: PUSH
24814: LD_INT 10
24816: PUSH
24817: LD_INT 20
24819: PUSH
24820: LD_INT 30
24822: PUSH
24823: LD_INT 40
24825: PUSH
24826: LD_INT 50
24828: PUSH
24829: LD_INT 60
24831: PUSH
24832: LD_INT 70
24834: PUSH
24835: LD_INT 80
24837: PUSH
24838: LD_INT 90
24840: PUSH
24841: LD_INT 100
24843: PUSH
24844: LD_INT 110
24846: PUSH
24847: LD_INT 120
24849: PUSH
24850: LD_INT 130
24852: PUSH
24853: LD_INT 140
24855: PUSH
24856: LD_INT 150
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PPUSH
24879: LD_INT 15
24881: PPUSH
24882: CALL_OW 12
24886: ARRAY
24887: ST_TO_ADDR
// if ValidHex ( x , y ) then
24888: LD_VAR 0 3
24892: PPUSH
24893: LD_VAR 0 4
24897: PPUSH
24898: CALL_OW 488
24902: IFFALSE 24925
// begin result := [ x , y ] ;
24904: LD_ADDR_VAR 0 1
24908: PUSH
24909: LD_VAR 0 3
24913: PUSH
24914: LD_VAR 0 4
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: ST_TO_ADDR
// break ;
24923: GO 24927
// end ; end ;
24925: GO 24727
24927: POP
24928: POP
// if result then
24929: LD_VAR 0 1
24933: IFFALSE 24993
// begin ToLua ( playSibBomb() ) ;
24935: LD_STRING playSibBomb()
24937: PPUSH
24938: CALL_OW 559
// wait ( 0 0$14 ) ;
24942: LD_INT 490
24944: PPUSH
24945: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24949: LD_VAR 0 1
24953: PUSH
24954: LD_INT 1
24956: ARRAY
24957: PPUSH
24958: LD_VAR 0 1
24962: PUSH
24963: LD_INT 2
24965: ARRAY
24966: PPUSH
24967: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24971: LD_VAR 0 1
24975: PUSH
24976: LD_INT 1
24978: ARRAY
24979: PPUSH
24980: LD_VAR 0 1
24984: PUSH
24985: LD_INT 2
24987: ARRAY
24988: PPUSH
24989: CALL_OW 429
// end ; end ;
24993: LD_VAR 0 1
24997: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24998: LD_EXP 52
25002: PUSH
25003: LD_EXP 74
25007: AND
25008: IFFALSE 25020
25010: GO 25012
25012: DISABLE
// YouLost (  ) ;
25013: LD_STRING 
25015: PPUSH
25016: CALL_OW 104
25020: END
// every 0 0$1 trigger StreamModeActive and sFog do
25021: LD_EXP 52
25025: PUSH
25026: LD_EXP 73
25030: AND
25031: IFFALSE 25045
25033: GO 25035
25035: DISABLE
// FogOff ( your_side ) ;
25036: LD_OWVAR 2
25040: PPUSH
25041: CALL_OW 344
25045: END
// every 0 0$1 trigger StreamModeActive and sSun do
25046: LD_EXP 52
25050: PUSH
25051: LD_EXP 75
25055: AND
25056: IFFALSE 25084
25058: GO 25060
25060: DISABLE
// begin solar_recharge_percent := 0 ;
25061: LD_ADDR_OWVAR 79
25065: PUSH
25066: LD_INT 0
25068: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25069: LD_INT 10500
25071: PPUSH
25072: CALL_OW 67
// solar_recharge_percent := 100 ;
25076: LD_ADDR_OWVAR 79
25080: PUSH
25081: LD_INT 100
25083: ST_TO_ADDR
// end ;
25084: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25085: LD_EXP 52
25089: PUSH
25090: LD_EXP 76
25094: AND
25095: IFFALSE 25334
25097: GO 25099
25099: DISABLE
25100: LD_INT 0
25102: PPUSH
25103: PPUSH
25104: PPUSH
// begin tmp := [ ] ;
25105: LD_ADDR_VAR 0 3
25109: PUSH
25110: EMPTY
25111: ST_TO_ADDR
// for i := 1 to 6 do
25112: LD_ADDR_VAR 0 1
25116: PUSH
25117: DOUBLE
25118: LD_INT 1
25120: DEC
25121: ST_TO_ADDR
25122: LD_INT 6
25124: PUSH
25125: FOR_TO
25126: IFFALSE 25231
// begin uc_nation := nation_nature ;
25128: LD_ADDR_OWVAR 21
25132: PUSH
25133: LD_INT 0
25135: ST_TO_ADDR
// uc_side := 0 ;
25136: LD_ADDR_OWVAR 20
25140: PUSH
25141: LD_INT 0
25143: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25144: LD_ADDR_OWVAR 29
25148: PUSH
25149: LD_INT 12
25151: PUSH
25152: LD_INT 12
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: ST_TO_ADDR
// hc_agressivity := 20 ;
25159: LD_ADDR_OWVAR 35
25163: PUSH
25164: LD_INT 20
25166: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25167: LD_ADDR_OWVAR 28
25171: PUSH
25172: LD_INT 17
25174: ST_TO_ADDR
// hc_gallery :=  ;
25175: LD_ADDR_OWVAR 33
25179: PUSH
25180: LD_STRING 
25182: ST_TO_ADDR
// hc_name :=  ;
25183: LD_ADDR_OWVAR 26
25187: PUSH
25188: LD_STRING 
25190: ST_TO_ADDR
// un := CreateHuman ;
25191: LD_ADDR_VAR 0 2
25195: PUSH
25196: CALL_OW 44
25200: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25201: LD_VAR 0 2
25205: PPUSH
25206: LD_INT 1
25208: PPUSH
25209: CALL_OW 51
// tmp := tmp ^ un ;
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: LD_VAR 0 3
25222: PUSH
25223: LD_VAR 0 2
25227: ADD
25228: ST_TO_ADDR
// end ;
25229: GO 25125
25231: POP
25232: POP
// repeat wait ( 0 0$1 ) ;
25233: LD_INT 35
25235: PPUSH
25236: CALL_OW 67
// for un in tmp do
25240: LD_ADDR_VAR 0 2
25244: PUSH
25245: LD_VAR 0 3
25249: PUSH
25250: FOR_IN
25251: IFFALSE 25325
// begin if IsDead ( un ) then
25253: LD_VAR 0 2
25257: PPUSH
25258: CALL_OW 301
25262: IFFALSE 25282
// begin tmp := tmp diff un ;
25264: LD_ADDR_VAR 0 3
25268: PUSH
25269: LD_VAR 0 3
25273: PUSH
25274: LD_VAR 0 2
25278: DIFF
25279: ST_TO_ADDR
// continue ;
25280: GO 25250
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25282: LD_VAR 0 2
25286: PPUSH
25287: LD_INT 3
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PPUSH
25304: CALL_OW 69
25308: PPUSH
25309: LD_VAR 0 2
25313: PPUSH
25314: CALL_OW 74
25318: PPUSH
25319: CALL_OW 115
// end ;
25323: GO 25250
25325: POP
25326: POP
// until not tmp ;
25327: LD_VAR 0 3
25331: NOT
25332: IFFALSE 25233
// end ;
25334: PPOPN 3
25336: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25337: LD_EXP 52
25341: PUSH
25342: LD_EXP 77
25346: AND
25347: IFFALSE 25401
25349: GO 25351
25351: DISABLE
// begin ToLua ( displayTroll(); ) ;
25352: LD_STRING displayTroll();
25354: PPUSH
25355: CALL_OW 559
// wait ( 3 3$00 ) ;
25359: LD_INT 6300
25361: PPUSH
25362: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25366: LD_STRING hideTroll();
25368: PPUSH
25369: CALL_OW 559
// wait ( 1 1$00 ) ;
25373: LD_INT 2100
25375: PPUSH
25376: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25380: LD_STRING displayTroll();
25382: PPUSH
25383: CALL_OW 559
// wait ( 1 1$00 ) ;
25387: LD_INT 2100
25389: PPUSH
25390: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25394: LD_STRING hideTroll();
25396: PPUSH
25397: CALL_OW 559
// end ;
25401: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25402: LD_EXP 52
25406: PUSH
25407: LD_EXP 78
25411: AND
25412: IFFALSE 25475
25414: GO 25416
25416: DISABLE
25417: LD_INT 0
25419: PPUSH
// begin p := 0 ;
25420: LD_ADDR_VAR 0 1
25424: PUSH
25425: LD_INT 0
25427: ST_TO_ADDR
// repeat game_speed := 1 ;
25428: LD_ADDR_OWVAR 65
25432: PUSH
25433: LD_INT 1
25435: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25436: LD_INT 35
25438: PPUSH
25439: CALL_OW 67
// p := p + 1 ;
25443: LD_ADDR_VAR 0 1
25447: PUSH
25448: LD_VAR 0 1
25452: PUSH
25453: LD_INT 1
25455: PLUS
25456: ST_TO_ADDR
// until p >= 60 ;
25457: LD_VAR 0 1
25461: PUSH
25462: LD_INT 60
25464: GREATEREQUAL
25465: IFFALSE 25428
// game_speed := 4 ;
25467: LD_ADDR_OWVAR 65
25471: PUSH
25472: LD_INT 4
25474: ST_TO_ADDR
// end ;
25475: PPOPN 1
25477: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25478: LD_EXP 52
25482: PUSH
25483: LD_EXP 79
25487: AND
25488: IFFALSE 25634
25490: GO 25492
25492: DISABLE
25493: LD_INT 0
25495: PPUSH
25496: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25497: LD_ADDR_VAR 0 1
25501: PUSH
25502: LD_INT 22
25504: PUSH
25505: LD_OWVAR 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 2
25516: PUSH
25517: LD_INT 30
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 30
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PPUSH
25546: CALL_OW 69
25550: ST_TO_ADDR
// if not depot then
25551: LD_VAR 0 1
25555: NOT
25556: IFFALSE 25560
// exit ;
25558: GO 25634
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25560: LD_ADDR_VAR 0 2
25564: PUSH
25565: LD_VAR 0 1
25569: PUSH
25570: LD_INT 1
25572: PPUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 12
25582: ARRAY
25583: PPUSH
25584: CALL_OW 274
25588: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25589: LD_VAR 0 2
25593: PPUSH
25594: LD_INT 1
25596: PPUSH
25597: LD_INT 0
25599: PPUSH
25600: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25604: LD_VAR 0 2
25608: PPUSH
25609: LD_INT 2
25611: PPUSH
25612: LD_INT 0
25614: PPUSH
25615: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25619: LD_VAR 0 2
25623: PPUSH
25624: LD_INT 3
25626: PPUSH
25627: LD_INT 0
25629: PPUSH
25630: CALL_OW 277
// end ;
25634: PPOPN 2
25636: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25637: LD_EXP 52
25641: PUSH
25642: LD_EXP 80
25646: AND
25647: IFFALSE 25744
25649: GO 25651
25651: DISABLE
25652: LD_INT 0
25654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_INT 22
25662: PUSH
25663: LD_OWVAR 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 21
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: LD_INT 23
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: PPUSH
25704: CALL_OW 69
25708: ST_TO_ADDR
// if not tmp then
25709: LD_VAR 0 1
25713: NOT
25714: IFFALSE 25718
// exit ;
25716: GO 25744
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25718: LD_VAR 0 1
25722: PUSH
25723: LD_INT 1
25725: PPUSH
25726: LD_VAR 0 1
25730: PPUSH
25731: CALL_OW 12
25735: ARRAY
25736: PPUSH
25737: LD_INT 200
25739: PPUSH
25740: CALL_OW 234
// end ;
25744: PPOPN 1
25746: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25747: LD_EXP 52
25751: PUSH
25752: LD_EXP 81
25756: AND
25757: IFFALSE 25836
25759: GO 25761
25761: DISABLE
25762: LD_INT 0
25764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25765: LD_ADDR_VAR 0 1
25769: PUSH
25770: LD_INT 22
25772: PUSH
25773: LD_OWVAR 2
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 21
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PPUSH
25796: CALL_OW 69
25800: ST_TO_ADDR
// if not tmp then
25801: LD_VAR 0 1
25805: NOT
25806: IFFALSE 25810
// exit ;
25808: GO 25836
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25810: LD_VAR 0 1
25814: PUSH
25815: LD_INT 1
25817: PPUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL_OW 12
25827: ARRAY
25828: PPUSH
25829: LD_INT 60
25831: PPUSH
25832: CALL_OW 234
// end ;
25836: PPOPN 1
25838: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25839: LD_EXP 52
25843: PUSH
25844: LD_EXP 82
25848: AND
25849: IFFALSE 25948
25851: GO 25853
25853: DISABLE
25854: LD_INT 0
25856: PPUSH
25857: PPUSH
// begin enable ;
25858: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25859: LD_ADDR_VAR 0 1
25863: PUSH
25864: LD_INT 22
25866: PUSH
25867: LD_OWVAR 2
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 61
25878: PUSH
25879: EMPTY
25880: LIST
25881: PUSH
25882: LD_INT 33
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: PPUSH
25897: CALL_OW 69
25901: ST_TO_ADDR
// if not tmp then
25902: LD_VAR 0 1
25906: NOT
25907: IFFALSE 25911
// exit ;
25909: GO 25948
// for i in tmp do
25911: LD_ADDR_VAR 0 2
25915: PUSH
25916: LD_VAR 0 1
25920: PUSH
25921: FOR_IN
25922: IFFALSE 25946
// if IsControledBy ( i ) then
25924: LD_VAR 0 2
25928: PPUSH
25929: CALL_OW 312
25933: IFFALSE 25944
// ComUnlink ( i ) ;
25935: LD_VAR 0 2
25939: PPUSH
25940: CALL_OW 136
25944: GO 25921
25946: POP
25947: POP
// end ;
25948: PPOPN 2
25950: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25951: LD_EXP 52
25955: PUSH
25956: LD_EXP 83
25960: AND
25961: IFFALSE 26101
25963: GO 25965
25965: DISABLE
25966: LD_INT 0
25968: PPUSH
25969: PPUSH
// begin ToLua ( displayPowell(); ) ;
25970: LD_STRING displayPowell();
25972: PPUSH
25973: CALL_OW 559
// uc_side := 0 ;
25977: LD_ADDR_OWVAR 20
25981: PUSH
25982: LD_INT 0
25984: ST_TO_ADDR
// uc_nation := 2 ;
25985: LD_ADDR_OWVAR 21
25989: PUSH
25990: LD_INT 2
25992: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25993: LD_ADDR_OWVAR 37
25997: PUSH
25998: LD_INT 14
26000: ST_TO_ADDR
// vc_engine := engine_siberite ;
26001: LD_ADDR_OWVAR 39
26005: PUSH
26006: LD_INT 3
26008: ST_TO_ADDR
// vc_control := control_apeman ;
26009: LD_ADDR_OWVAR 38
26013: PUSH
26014: LD_INT 5
26016: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26017: LD_ADDR_OWVAR 40
26021: PUSH
26022: LD_INT 29
26024: ST_TO_ADDR
// un := CreateVehicle ;
26025: LD_ADDR_VAR 0 2
26029: PUSH
26030: CALL_OW 45
26034: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26035: LD_VAR 0 2
26039: PPUSH
26040: LD_INT 1
26042: PPUSH
26043: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26047: LD_INT 35
26049: PPUSH
26050: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26054: LD_VAR 0 2
26058: PPUSH
26059: LD_INT 22
26061: PUSH
26062: LD_OWVAR 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PPUSH
26071: CALL_OW 69
26075: PPUSH
26076: LD_VAR 0 2
26080: PPUSH
26081: CALL_OW 74
26085: PPUSH
26086: CALL_OW 115
// until IsDead ( un ) ;
26090: LD_VAR 0 2
26094: PPUSH
26095: CALL_OW 301
26099: IFFALSE 26047
// end ;
26101: PPOPN 2
26103: END
// every 0 0$1 trigger StreamModeActive and sStu do
26104: LD_EXP 52
26108: PUSH
26109: LD_EXP 91
26113: AND
26114: IFFALSE 26130
26116: GO 26118
26118: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26119: LD_STRING displayStucuk();
26121: PPUSH
26122: CALL_OW 559
// ResetFog ;
26126: CALL_OW 335
// end ;
26130: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26131: LD_EXP 52
26135: PUSH
26136: LD_EXP 84
26140: AND
26141: IFFALSE 26282
26143: GO 26145
26145: DISABLE
26146: LD_INT 0
26148: PPUSH
26149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26150: LD_ADDR_VAR 0 2
26154: PUSH
26155: LD_INT 22
26157: PUSH
26158: LD_OWVAR 2
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 21
26169: PUSH
26170: LD_INT 1
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PPUSH
26181: CALL_OW 69
26185: ST_TO_ADDR
// if not tmp then
26186: LD_VAR 0 2
26190: NOT
26191: IFFALSE 26195
// exit ;
26193: GO 26282
// un := tmp [ rand ( 1 , tmp ) ] ;
26195: LD_ADDR_VAR 0 1
26199: PUSH
26200: LD_VAR 0 2
26204: PUSH
26205: LD_INT 1
26207: PPUSH
26208: LD_VAR 0 2
26212: PPUSH
26213: CALL_OW 12
26217: ARRAY
26218: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26219: LD_VAR 0 1
26223: PPUSH
26224: LD_INT 0
26226: PPUSH
26227: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26231: LD_VAR 0 1
26235: PPUSH
26236: LD_OWVAR 3
26240: PUSH
26241: LD_VAR 0 1
26245: DIFF
26246: PPUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 74
26256: PPUSH
26257: CALL_OW 115
// wait ( 0 0$20 ) ;
26261: LD_INT 700
26263: PPUSH
26264: CALL_OW 67
// SetSide ( un , your_side ) ;
26268: LD_VAR 0 1
26272: PPUSH
26273: LD_OWVAR 2
26277: PPUSH
26278: CALL_OW 235
// end ;
26282: PPOPN 2
26284: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26285: LD_EXP 52
26289: PUSH
26290: LD_EXP 85
26294: AND
26295: IFFALSE 26401
26297: GO 26299
26299: DISABLE
26300: LD_INT 0
26302: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26303: LD_ADDR_VAR 0 1
26307: PUSH
26308: LD_INT 22
26310: PUSH
26311: LD_OWVAR 2
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: LD_INT 30
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 30
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PPUSH
26352: CALL_OW 69
26356: ST_TO_ADDR
// if not depot then
26357: LD_VAR 0 1
26361: NOT
26362: IFFALSE 26366
// exit ;
26364: GO 26401
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26366: LD_VAR 0 1
26370: PUSH
26371: LD_INT 1
26373: ARRAY
26374: PPUSH
26375: CALL_OW 250
26379: PPUSH
26380: LD_VAR 0 1
26384: PUSH
26385: LD_INT 1
26387: ARRAY
26388: PPUSH
26389: CALL_OW 251
26393: PPUSH
26394: LD_INT 70
26396: PPUSH
26397: CALL_OW 495
// end ;
26401: PPOPN 1
26403: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26404: LD_EXP 52
26408: PUSH
26409: LD_EXP 86
26413: AND
26414: IFFALSE 26625
26416: GO 26418
26418: DISABLE
26419: LD_INT 0
26421: PPUSH
26422: PPUSH
26423: PPUSH
26424: PPUSH
26425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26426: LD_ADDR_VAR 0 5
26430: PUSH
26431: LD_INT 22
26433: PUSH
26434: LD_OWVAR 2
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 21
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PPUSH
26457: CALL_OW 69
26461: ST_TO_ADDR
// if not tmp then
26462: LD_VAR 0 5
26466: NOT
26467: IFFALSE 26471
// exit ;
26469: GO 26625
// for i in tmp do
26471: LD_ADDR_VAR 0 1
26475: PUSH
26476: LD_VAR 0 5
26480: PUSH
26481: FOR_IN
26482: IFFALSE 26623
// begin d := rand ( 0 , 5 ) ;
26484: LD_ADDR_VAR 0 4
26488: PUSH
26489: LD_INT 0
26491: PPUSH
26492: LD_INT 5
26494: PPUSH
26495: CALL_OW 12
26499: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26500: LD_ADDR_VAR 0 2
26504: PUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 250
26514: PPUSH
26515: LD_VAR 0 4
26519: PPUSH
26520: LD_INT 3
26522: PPUSH
26523: LD_INT 12
26525: PPUSH
26526: CALL_OW 12
26530: PPUSH
26531: CALL_OW 272
26535: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_VAR 0 1
26545: PPUSH
26546: CALL_OW 251
26550: PPUSH
26551: LD_VAR 0 4
26555: PPUSH
26556: LD_INT 3
26558: PPUSH
26559: LD_INT 12
26561: PPUSH
26562: CALL_OW 12
26566: PPUSH
26567: CALL_OW 273
26571: ST_TO_ADDR
// if ValidHex ( x , y ) then
26572: LD_VAR 0 2
26576: PPUSH
26577: LD_VAR 0 3
26581: PPUSH
26582: CALL_OW 488
26586: IFFALSE 26621
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26588: LD_VAR 0 1
26592: PPUSH
26593: LD_VAR 0 2
26597: PPUSH
26598: LD_VAR 0 3
26602: PPUSH
26603: LD_INT 3
26605: PPUSH
26606: LD_INT 6
26608: PPUSH
26609: CALL_OW 12
26613: PPUSH
26614: LD_INT 1
26616: PPUSH
26617: CALL_OW 483
// end ;
26621: GO 26481
26623: POP
26624: POP
// end ;
26625: PPOPN 5
26627: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26628: LD_EXP 52
26632: PUSH
26633: LD_EXP 87
26637: AND
26638: IFFALSE 26732
26640: GO 26642
26642: DISABLE
26643: LD_INT 0
26645: PPUSH
26646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26647: LD_ADDR_VAR 0 2
26651: PUSH
26652: LD_INT 22
26654: PUSH
26655: LD_OWVAR 2
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 32
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 21
26676: PUSH
26677: LD_INT 2
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: PPUSH
26689: CALL_OW 69
26693: ST_TO_ADDR
// if not tmp then
26694: LD_VAR 0 2
26698: NOT
26699: IFFALSE 26703
// exit ;
26701: GO 26732
// for i in tmp do
26703: LD_ADDR_VAR 0 1
26707: PUSH
26708: LD_VAR 0 2
26712: PUSH
26713: FOR_IN
26714: IFFALSE 26730
// SetFuel ( i , 0 ) ;
26716: LD_VAR 0 1
26720: PPUSH
26721: LD_INT 0
26723: PPUSH
26724: CALL_OW 240
26728: GO 26713
26730: POP
26731: POP
// end ;
26732: PPOPN 2
26734: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26735: LD_EXP 52
26739: PUSH
26740: LD_EXP 88
26744: AND
26745: IFFALSE 26811
26747: GO 26749
26749: DISABLE
26750: LD_INT 0
26752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26753: LD_ADDR_VAR 0 1
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_OWVAR 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 30
26772: PUSH
26773: LD_INT 29
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PPUSH
26784: CALL_OW 69
26788: ST_TO_ADDR
// if not tmp then
26789: LD_VAR 0 1
26793: NOT
26794: IFFALSE 26798
// exit ;
26796: GO 26811
// DestroyUnit ( tmp [ 1 ] ) ;
26798: LD_VAR 0 1
26802: PUSH
26803: LD_INT 1
26805: ARRAY
26806: PPUSH
26807: CALL_OW 65
// end ;
26811: PPOPN 1
26813: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26814: LD_EXP 52
26818: PUSH
26819: LD_EXP 90
26823: AND
26824: IFFALSE 26953
26826: GO 26828
26828: DISABLE
26829: LD_INT 0
26831: PPUSH
// begin uc_side := 0 ;
26832: LD_ADDR_OWVAR 20
26836: PUSH
26837: LD_INT 0
26839: ST_TO_ADDR
// uc_nation := nation_arabian ;
26840: LD_ADDR_OWVAR 21
26844: PUSH
26845: LD_INT 2
26847: ST_TO_ADDR
// hc_gallery :=  ;
26848: LD_ADDR_OWVAR 33
26852: PUSH
26853: LD_STRING 
26855: ST_TO_ADDR
// hc_name :=  ;
26856: LD_ADDR_OWVAR 26
26860: PUSH
26861: LD_STRING 
26863: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26864: LD_INT 1
26866: PPUSH
26867: LD_INT 11
26869: PPUSH
26870: LD_INT 10
26872: PPUSH
26873: CALL_OW 380
// un := CreateHuman ;
26877: LD_ADDR_VAR 0 1
26881: PUSH
26882: CALL_OW 44
26886: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26887: LD_VAR 0 1
26891: PPUSH
26892: LD_INT 1
26894: PPUSH
26895: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26899: LD_INT 35
26901: PPUSH
26902: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26906: LD_VAR 0 1
26910: PPUSH
26911: LD_INT 22
26913: PUSH
26914: LD_OWVAR 2
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PPUSH
26923: CALL_OW 69
26927: PPUSH
26928: LD_VAR 0 1
26932: PPUSH
26933: CALL_OW 74
26937: PPUSH
26938: CALL_OW 115
// until IsDead ( un ) ;
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL_OW 301
26951: IFFALSE 26899
// end ;
26953: PPOPN 1
26955: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26956: LD_EXP 52
26960: PUSH
26961: LD_EXP 92
26965: AND
26966: IFFALSE 26978
26968: GO 26970
26970: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26971: LD_STRING earthquake(getX(game), 0, 32)
26973: PPUSH
26974: CALL_OW 559
26978: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26979: LD_EXP 52
26983: PUSH
26984: LD_EXP 93
26988: AND
26989: IFFALSE 27080
26991: GO 26993
26993: DISABLE
26994: LD_INT 0
26996: PPUSH
// begin enable ;
26997: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26998: LD_ADDR_VAR 0 1
27002: PUSH
27003: LD_INT 22
27005: PUSH
27006: LD_OWVAR 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 21
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 33
27027: PUSH
27028: LD_INT 3
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: PPUSH
27040: CALL_OW 69
27044: ST_TO_ADDR
// if not tmp then
27045: LD_VAR 0 1
27049: NOT
27050: IFFALSE 27054
// exit ;
27052: GO 27080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27054: LD_VAR 0 1
27058: PUSH
27059: LD_INT 1
27061: PPUSH
27062: LD_VAR 0 1
27066: PPUSH
27067: CALL_OW 12
27071: ARRAY
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: CALL_OW 234
// end ;
27080: PPOPN 1
27082: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27083: LD_EXP 52
27087: PUSH
27088: LD_EXP 94
27092: AND
27093: IFFALSE 27234
27095: GO 27097
27097: DISABLE
27098: LD_INT 0
27100: PPUSH
27101: PPUSH
27102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27103: LD_ADDR_VAR 0 3
27107: PUSH
27108: LD_INT 22
27110: PUSH
27111: LD_OWVAR 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 25
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PPUSH
27134: CALL_OW 69
27138: ST_TO_ADDR
// if not tmp then
27139: LD_VAR 0 3
27143: NOT
27144: IFFALSE 27148
// exit ;
27146: GO 27234
// un := tmp [ rand ( 1 , tmp ) ] ;
27148: LD_ADDR_VAR 0 2
27152: PUSH
27153: LD_VAR 0 3
27157: PUSH
27158: LD_INT 1
27160: PPUSH
27161: LD_VAR 0 3
27165: PPUSH
27166: CALL_OW 12
27170: ARRAY
27171: ST_TO_ADDR
// if Crawls ( un ) then
27172: LD_VAR 0 2
27176: PPUSH
27177: CALL_OW 318
27181: IFFALSE 27192
// ComWalk ( un ) ;
27183: LD_VAR 0 2
27187: PPUSH
27188: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27192: LD_VAR 0 2
27196: PPUSH
27197: LD_INT 9
27199: PPUSH
27200: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27204: LD_INT 28
27206: PPUSH
27207: LD_OWVAR 2
27211: PPUSH
27212: LD_INT 2
27214: PPUSH
27215: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27219: LD_INT 29
27221: PPUSH
27222: LD_OWVAR 2
27226: PPUSH
27227: LD_INT 2
27229: PPUSH
27230: CALL_OW 322
// end ;
27234: PPOPN 3
27236: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27237: LD_EXP 52
27241: PUSH
27242: LD_EXP 95
27246: AND
27247: IFFALSE 27358
27249: GO 27251
27251: DISABLE
27252: LD_INT 0
27254: PPUSH
27255: PPUSH
27256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27257: LD_ADDR_VAR 0 3
27261: PUSH
27262: LD_INT 22
27264: PUSH
27265: LD_OWVAR 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 25
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: ST_TO_ADDR
// if not tmp then
27293: LD_VAR 0 3
27297: NOT
27298: IFFALSE 27302
// exit ;
27300: GO 27358
// un := tmp [ rand ( 1 , tmp ) ] ;
27302: LD_ADDR_VAR 0 2
27306: PUSH
27307: LD_VAR 0 3
27311: PUSH
27312: LD_INT 1
27314: PPUSH
27315: LD_VAR 0 3
27319: PPUSH
27320: CALL_OW 12
27324: ARRAY
27325: ST_TO_ADDR
// if Crawls ( un ) then
27326: LD_VAR 0 2
27330: PPUSH
27331: CALL_OW 318
27335: IFFALSE 27346
// ComWalk ( un ) ;
27337: LD_VAR 0 2
27341: PPUSH
27342: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27346: LD_VAR 0 2
27350: PPUSH
27351: LD_INT 8
27353: PPUSH
27354: CALL_OW 336
// end ;
27358: PPOPN 3
27360: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27361: LD_EXP 52
27365: PUSH
27366: LD_EXP 96
27370: AND
27371: IFFALSE 27515
27373: GO 27375
27375: DISABLE
27376: LD_INT 0
27378: PPUSH
27379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27380: LD_ADDR_VAR 0 2
27384: PUSH
27385: LD_INT 22
27387: PUSH
27388: LD_OWVAR 2
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 21
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: PUSH
27410: LD_INT 34
27412: PUSH
27413: LD_INT 12
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 34
27422: PUSH
27423: LD_INT 51
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 34
27432: PUSH
27433: LD_INT 32
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: ST_TO_ADDR
// if not tmp then
27456: LD_VAR 0 2
27460: NOT
27461: IFFALSE 27465
// exit ;
27463: GO 27515
// for i in tmp do
27465: LD_ADDR_VAR 0 1
27469: PUSH
27470: LD_VAR 0 2
27474: PUSH
27475: FOR_IN
27476: IFFALSE 27513
// if GetCargo ( i , mat_artifact ) = 0 then
27478: LD_VAR 0 1
27482: PPUSH
27483: LD_INT 4
27485: PPUSH
27486: CALL_OW 289
27490: PUSH
27491: LD_INT 0
27493: EQUAL
27494: IFFALSE 27511
// SetCargo ( i , mat_siberit , 100 ) ;
27496: LD_VAR 0 1
27500: PPUSH
27501: LD_INT 3
27503: PPUSH
27504: LD_INT 100
27506: PPUSH
27507: CALL_OW 290
27511: GO 27475
27513: POP
27514: POP
// end ;
27515: PPOPN 2
27517: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27518: LD_EXP 52
27522: PUSH
27523: LD_EXP 97
27527: AND
27528: IFFALSE 27711
27530: GO 27532
27532: DISABLE
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27537: LD_ADDR_VAR 0 2
27541: PUSH
27542: LD_INT 22
27544: PUSH
27545: LD_OWVAR 2
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PPUSH
27554: CALL_OW 69
27558: ST_TO_ADDR
// if not tmp then
27559: LD_VAR 0 2
27563: NOT
27564: IFFALSE 27568
// exit ;
27566: GO 27711
// for i := 1 to 2 do
27568: LD_ADDR_VAR 0 1
27572: PUSH
27573: DOUBLE
27574: LD_INT 1
27576: DEC
27577: ST_TO_ADDR
27578: LD_INT 2
27580: PUSH
27581: FOR_TO
27582: IFFALSE 27709
// begin uc_side := your_side ;
27584: LD_ADDR_OWVAR 20
27588: PUSH
27589: LD_OWVAR 2
27593: ST_TO_ADDR
// uc_nation := nation_american ;
27594: LD_ADDR_OWVAR 21
27598: PUSH
27599: LD_INT 1
27601: ST_TO_ADDR
// vc_chassis := us_morphling ;
27602: LD_ADDR_OWVAR 37
27606: PUSH
27607: LD_INT 5
27609: ST_TO_ADDR
// vc_engine := engine_siberite ;
27610: LD_ADDR_OWVAR 39
27614: PUSH
27615: LD_INT 3
27617: ST_TO_ADDR
// vc_control := control_computer ;
27618: LD_ADDR_OWVAR 38
27622: PUSH
27623: LD_INT 3
27625: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27626: LD_ADDR_OWVAR 40
27630: PUSH
27631: LD_INT 10
27633: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27634: LD_VAR 0 2
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: PPUSH
27643: CALL_OW 310
27647: NOT
27648: IFFALSE 27695
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27650: CALL_OW 45
27654: PPUSH
27655: LD_VAR 0 2
27659: PUSH
27660: LD_INT 1
27662: ARRAY
27663: PPUSH
27664: CALL_OW 250
27668: PPUSH
27669: LD_VAR 0 2
27673: PUSH
27674: LD_INT 1
27676: ARRAY
27677: PPUSH
27678: CALL_OW 251
27682: PPUSH
27683: LD_INT 12
27685: PPUSH
27686: LD_INT 1
27688: PPUSH
27689: CALL_OW 50
27693: GO 27707
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27695: CALL_OW 45
27699: PPUSH
27700: LD_INT 1
27702: PPUSH
27703: CALL_OW 51
// end ;
27707: GO 27581
27709: POP
27710: POP
// end ;
27711: PPOPN 2
27713: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27714: LD_EXP 52
27718: PUSH
27719: LD_EXP 98
27723: AND
27724: IFFALSE 27946
27726: GO 27728
27728: DISABLE
27729: LD_INT 0
27731: PPUSH
27732: PPUSH
27733: PPUSH
27734: PPUSH
27735: PPUSH
27736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27737: LD_ADDR_VAR 0 6
27741: PUSH
27742: LD_INT 22
27744: PUSH
27745: LD_OWVAR 2
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 21
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: LD_INT 23
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: PPUSH
27786: CALL_OW 69
27790: ST_TO_ADDR
// if not tmp then
27791: LD_VAR 0 6
27795: NOT
27796: IFFALSE 27800
// exit ;
27798: GO 27946
// s1 := rand ( 1 , 4 ) ;
27800: LD_ADDR_VAR 0 2
27804: PUSH
27805: LD_INT 1
27807: PPUSH
27808: LD_INT 4
27810: PPUSH
27811: CALL_OW 12
27815: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27816: LD_ADDR_VAR 0 4
27820: PUSH
27821: LD_VAR 0 6
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: PPUSH
27830: LD_VAR 0 2
27834: PPUSH
27835: CALL_OW 259
27839: ST_TO_ADDR
// if s1 = 1 then
27840: LD_VAR 0 2
27844: PUSH
27845: LD_INT 1
27847: EQUAL
27848: IFFALSE 27868
// s2 := rand ( 2 , 4 ) else
27850: LD_ADDR_VAR 0 3
27854: PUSH
27855: LD_INT 2
27857: PPUSH
27858: LD_INT 4
27860: PPUSH
27861: CALL_OW 12
27865: ST_TO_ADDR
27866: GO 27876
// s2 := 1 ;
27868: LD_ADDR_VAR 0 3
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27876: LD_ADDR_VAR 0 5
27880: PUSH
27881: LD_VAR 0 6
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: CALL_OW 259
27899: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27900: LD_VAR 0 6
27904: PUSH
27905: LD_INT 1
27907: ARRAY
27908: PPUSH
27909: LD_VAR 0 2
27913: PPUSH
27914: LD_VAR 0 5
27918: PPUSH
27919: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27923: LD_VAR 0 6
27927: PUSH
27928: LD_INT 1
27930: ARRAY
27931: PPUSH
27932: LD_VAR 0 3
27936: PPUSH
27937: LD_VAR 0 4
27941: PPUSH
27942: CALL_OW 237
// end ;
27946: PPOPN 6
27948: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27949: LD_EXP 52
27953: PUSH
27954: LD_EXP 99
27958: AND
27959: IFFALSE 28038
27961: GO 27963
27963: DISABLE
27964: LD_INT 0
27966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27967: LD_ADDR_VAR 0 1
27971: PUSH
27972: LD_INT 22
27974: PUSH
27975: LD_OWVAR 2
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 30
27986: PUSH
27987: LD_INT 3
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PPUSH
27998: CALL_OW 69
28002: ST_TO_ADDR
// if not tmp then
28003: LD_VAR 0 1
28007: NOT
28008: IFFALSE 28012
// exit ;
28010: GO 28038
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28012: LD_VAR 0 1
28016: PUSH
28017: LD_INT 1
28019: PPUSH
28020: LD_VAR 0 1
28024: PPUSH
28025: CALL_OW 12
28029: ARRAY
28030: PPUSH
28031: LD_INT 1
28033: PPUSH
28034: CALL_OW 234
// end ;
28038: PPOPN 1
28040: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28041: LD_EXP 52
28045: PUSH
28046: LD_EXP 100
28050: AND
28051: IFFALSE 28163
28053: GO 28055
28055: DISABLE
28056: LD_INT 0
28058: PPUSH
28059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28060: LD_ADDR_VAR 0 2
28064: PUSH
28065: LD_INT 22
28067: PUSH
28068: LD_OWVAR 2
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: LD_INT 30
28082: PUSH
28083: LD_INT 27
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 30
28092: PUSH
28093: LD_INT 26
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 30
28102: PUSH
28103: LD_INT 28
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PPUSH
28120: CALL_OW 69
28124: ST_TO_ADDR
// if not tmp then
28125: LD_VAR 0 2
28129: NOT
28130: IFFALSE 28134
// exit ;
28132: GO 28163
// for i in tmp do
28134: LD_ADDR_VAR 0 1
28138: PUSH
28139: LD_VAR 0 2
28143: PUSH
28144: FOR_IN
28145: IFFALSE 28161
// SetLives ( i , 1 ) ;
28147: LD_VAR 0 1
28151: PPUSH
28152: LD_INT 1
28154: PPUSH
28155: CALL_OW 234
28159: GO 28144
28161: POP
28162: POP
// end ;
28163: PPOPN 2
28165: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28166: LD_EXP 52
28170: PUSH
28171: LD_EXP 101
28175: AND
28176: IFFALSE 28463
28178: GO 28180
28180: DISABLE
28181: LD_INT 0
28183: PPUSH
28184: PPUSH
28185: PPUSH
// begin i := rand ( 1 , 7 ) ;
28186: LD_ADDR_VAR 0 1
28190: PUSH
28191: LD_INT 1
28193: PPUSH
28194: LD_INT 7
28196: PPUSH
28197: CALL_OW 12
28201: ST_TO_ADDR
// case i of 1 :
28202: LD_VAR 0 1
28206: PUSH
28207: LD_INT 1
28209: DOUBLE
28210: EQUAL
28211: IFTRUE 28215
28213: GO 28225
28215: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28216: LD_STRING earthquake(getX(game), 0, 32)
28218: PPUSH
28219: CALL_OW 559
28223: GO 28463
28225: LD_INT 2
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28247
28233: POP
// begin ToLua ( displayStucuk(); ) ;
28234: LD_STRING displayStucuk();
28236: PPUSH
28237: CALL_OW 559
// ResetFog ;
28241: CALL_OW 335
// end ; 3 :
28245: GO 28463
28247: LD_INT 3
28249: DOUBLE
28250: EQUAL
28251: IFTRUE 28255
28253: GO 28359
28255: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28256: LD_ADDR_VAR 0 2
28260: PUSH
28261: LD_INT 22
28263: PUSH
28264: LD_OWVAR 2
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 25
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PPUSH
28287: CALL_OW 69
28291: ST_TO_ADDR
// if not tmp then
28292: LD_VAR 0 2
28296: NOT
28297: IFFALSE 28301
// exit ;
28299: GO 28463
// un := tmp [ rand ( 1 , tmp ) ] ;
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: LD_VAR 0 2
28310: PUSH
28311: LD_INT 1
28313: PPUSH
28314: LD_VAR 0 2
28318: PPUSH
28319: CALL_OW 12
28323: ARRAY
28324: ST_TO_ADDR
// if Crawls ( un ) then
28325: LD_VAR 0 3
28329: PPUSH
28330: CALL_OW 318
28334: IFFALSE 28345
// ComWalk ( un ) ;
28336: LD_VAR 0 3
28340: PPUSH
28341: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28345: LD_VAR 0 3
28349: PPUSH
28350: LD_INT 8
28352: PPUSH
28353: CALL_OW 336
// end ; 4 :
28357: GO 28463
28359: LD_INT 4
28361: DOUBLE
28362: EQUAL
28363: IFTRUE 28367
28365: GO 28441
28367: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28368: LD_ADDR_VAR 0 2
28372: PUSH
28373: LD_INT 22
28375: PUSH
28376: LD_OWVAR 2
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 30
28387: PUSH
28388: LD_INT 29
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PPUSH
28399: CALL_OW 69
28403: ST_TO_ADDR
// if not tmp then
28404: LD_VAR 0 2
28408: NOT
28409: IFFALSE 28413
// exit ;
28411: GO 28463
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28413: LD_VAR 0 2
28417: PUSH
28418: LD_INT 1
28420: ARRAY
28421: PPUSH
28422: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28426: LD_VAR 0 2
28430: PUSH
28431: LD_INT 1
28433: ARRAY
28434: PPUSH
28435: CALL_OW 65
// end ; 5 .. 7 :
28439: GO 28463
28441: LD_INT 5
28443: DOUBLE
28444: GREATEREQUAL
28445: IFFALSE 28453
28447: LD_INT 7
28449: DOUBLE
28450: LESSEQUAL
28451: IFTRUE 28455
28453: GO 28462
28455: POP
// StreamSibBomb ; end ;
28456: CALL 24700 0 0
28460: GO 28463
28462: POP
// end ;
28463: PPOPN 3
28465: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28466: LD_EXP 52
28470: PUSH
28471: LD_EXP 102
28475: AND
28476: IFFALSE 28632
28478: GO 28480
28480: DISABLE
28481: LD_INT 0
28483: PPUSH
28484: PPUSH
28485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: LD_INT 81
28493: PUSH
28494: LD_OWVAR 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 21
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 21
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: ST_TO_ADDR
// if not tmp then
28540: LD_VAR 0 2
28544: NOT
28545: IFFALSE 28549
// exit ;
28547: GO 28632
// p := 0 ;
28549: LD_ADDR_VAR 0 3
28553: PUSH
28554: LD_INT 0
28556: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28557: LD_INT 35
28559: PPUSH
28560: CALL_OW 67
// p := p + 1 ;
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_VAR 0 3
28573: PUSH
28574: LD_INT 1
28576: PLUS
28577: ST_TO_ADDR
// for i in tmp do
28578: LD_ADDR_VAR 0 1
28582: PUSH
28583: LD_VAR 0 2
28587: PUSH
28588: FOR_IN
28589: IFFALSE 28620
// if GetLives ( i ) < 1000 then
28591: LD_VAR 0 1
28595: PPUSH
28596: CALL_OW 256
28600: PUSH
28601: LD_INT 1000
28603: LESS
28604: IFFALSE 28618
// SetLives ( i , 1000 ) ;
28606: LD_VAR 0 1
28610: PPUSH
28611: LD_INT 1000
28613: PPUSH
28614: CALL_OW 234
28618: GO 28588
28620: POP
28621: POP
// until p > 20 ;
28622: LD_VAR 0 3
28626: PUSH
28627: LD_INT 20
28629: GREATER
28630: IFFALSE 28557
// end ;
28632: PPOPN 3
28634: END
// every 0 0$1 trigger StreamModeActive and sTime do
28635: LD_EXP 52
28639: PUSH
28640: LD_EXP 103
28644: AND
28645: IFFALSE 28680
28647: GO 28649
28649: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28650: LD_INT 28
28652: PPUSH
28653: LD_OWVAR 2
28657: PPUSH
28658: LD_INT 2
28660: PPUSH
28661: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28665: LD_INT 30
28667: PPUSH
28668: LD_OWVAR 2
28672: PPUSH
28673: LD_INT 2
28675: PPUSH
28676: CALL_OW 322
// end ;
28680: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28681: LD_EXP 52
28685: PUSH
28686: LD_EXP 104
28690: AND
28691: IFFALSE 28812
28693: GO 28695
28695: DISABLE
28696: LD_INT 0
28698: PPUSH
28699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28700: LD_ADDR_VAR 0 2
28704: PUSH
28705: LD_INT 22
28707: PUSH
28708: LD_OWVAR 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 21
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 3
28729: PUSH
28730: LD_INT 23
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: PPUSH
28749: CALL_OW 69
28753: ST_TO_ADDR
// if not tmp then
28754: LD_VAR 0 2
28758: NOT
28759: IFFALSE 28763
// exit ;
28761: GO 28812
// for i in tmp do
28763: LD_ADDR_VAR 0 1
28767: PUSH
28768: LD_VAR 0 2
28772: PUSH
28773: FOR_IN
28774: IFFALSE 28810
// begin if Crawls ( i ) then
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 318
28785: IFFALSE 28796
// ComWalk ( i ) ;
28787: LD_VAR 0 1
28791: PPUSH
28792: CALL_OW 138
// SetClass ( i , 2 ) ;
28796: LD_VAR 0 1
28800: PPUSH
28801: LD_INT 2
28803: PPUSH
28804: CALL_OW 336
// end ;
28808: GO 28773
28810: POP
28811: POP
// end ;
28812: PPOPN 2
28814: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28815: LD_EXP 52
28819: PUSH
28820: LD_EXP 105
28824: AND
28825: IFFALSE 29113
28827: GO 28829
28829: DISABLE
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
28834: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28835: LD_OWVAR 2
28839: PPUSH
28840: LD_INT 9
28842: PPUSH
28843: LD_INT 1
28845: PPUSH
28846: LD_INT 1
28848: PPUSH
28849: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28853: LD_INT 9
28855: PPUSH
28856: LD_OWVAR 2
28860: PPUSH
28861: CALL_OW 343
// uc_side := 9 ;
28865: LD_ADDR_OWVAR 20
28869: PUSH
28870: LD_INT 9
28872: ST_TO_ADDR
// uc_nation := 2 ;
28873: LD_ADDR_OWVAR 21
28877: PUSH
28878: LD_INT 2
28880: ST_TO_ADDR
// hc_name := Dark Warrior ;
28881: LD_ADDR_OWVAR 26
28885: PUSH
28886: LD_STRING Dark Warrior
28888: ST_TO_ADDR
// hc_gallery :=  ;
28889: LD_ADDR_OWVAR 33
28893: PUSH
28894: LD_STRING 
28896: ST_TO_ADDR
// hc_noskilllimit := true ;
28897: LD_ADDR_OWVAR 76
28901: PUSH
28902: LD_INT 1
28904: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28905: LD_ADDR_OWVAR 31
28909: PUSH
28910: LD_INT 30
28912: PUSH
28913: LD_INT 30
28915: PUSH
28916: LD_INT 30
28918: PUSH
28919: LD_INT 30
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: ST_TO_ADDR
// un := CreateHuman ;
28928: LD_ADDR_VAR 0 3
28932: PUSH
28933: CALL_OW 44
28937: ST_TO_ADDR
// hc_noskilllimit := false ;
28938: LD_ADDR_OWVAR 76
28942: PUSH
28943: LD_INT 0
28945: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28946: LD_VAR 0 3
28950: PPUSH
28951: LD_INT 1
28953: PPUSH
28954: CALL_OW 51
// ToLua ( playRanger() ) ;
28958: LD_STRING playRanger()
28960: PPUSH
28961: CALL_OW 559
// p := 0 ;
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_INT 0
28972: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28973: LD_INT 35
28975: PPUSH
28976: CALL_OW 67
// p := p + 1 ;
28980: LD_ADDR_VAR 0 2
28984: PUSH
28985: LD_VAR 0 2
28989: PUSH
28990: LD_INT 1
28992: PLUS
28993: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL_OW 256
29003: PUSH
29004: LD_INT 1000
29006: LESS
29007: IFFALSE 29021
// SetLives ( un , 1000 ) ;
29009: LD_VAR 0 3
29013: PPUSH
29014: LD_INT 1000
29016: PPUSH
29017: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29021: LD_VAR 0 3
29025: PPUSH
29026: LD_INT 81
29028: PUSH
29029: LD_OWVAR 2
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 91
29040: PUSH
29041: LD_VAR 0 3
29045: PUSH
29046: LD_INT 30
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PPUSH
29058: CALL_OW 69
29062: PPUSH
29063: LD_VAR 0 3
29067: PPUSH
29068: CALL_OW 74
29072: PPUSH
29073: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29077: LD_VAR 0 2
29081: PUSH
29082: LD_INT 80
29084: GREATER
29085: PUSH
29086: LD_VAR 0 3
29090: PPUSH
29091: CALL_OW 301
29095: OR
29096: IFFALSE 28973
// if un then
29098: LD_VAR 0 3
29102: IFFALSE 29113
// RemoveUnit ( un ) ;
29104: LD_VAR 0 3
29108: PPUSH
29109: CALL_OW 64
// end ;
29113: PPOPN 3
29115: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29116: LD_EXP 106
29120: IFFALSE 29236
29122: GO 29124
29124: DISABLE
29125: LD_INT 0
29127: PPUSH
29128: PPUSH
29129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29130: LD_ADDR_VAR 0 2
29134: PUSH
29135: LD_INT 81
29137: PUSH
29138: LD_OWVAR 2
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 21
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PPUSH
29161: CALL_OW 69
29165: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29166: LD_STRING playComputer()
29168: PPUSH
29169: CALL_OW 559
// if not tmp then
29173: LD_VAR 0 2
29177: NOT
29178: IFFALSE 29182
// exit ;
29180: GO 29236
// for i in tmp do
29182: LD_ADDR_VAR 0 1
29186: PUSH
29187: LD_VAR 0 2
29191: PUSH
29192: FOR_IN
29193: IFFALSE 29234
// for j := 1 to 4 do
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: DOUBLE
29201: LD_INT 1
29203: DEC
29204: ST_TO_ADDR
29205: LD_INT 4
29207: PUSH
29208: FOR_TO
29209: IFFALSE 29230
// SetSkill ( i , j , 10 ) ;
29211: LD_VAR 0 1
29215: PPUSH
29216: LD_VAR 0 3
29220: PPUSH
29221: LD_INT 10
29223: PPUSH
29224: CALL_OW 237
29228: GO 29208
29230: POP
29231: POP
29232: GO 29192
29234: POP
29235: POP
// end ;
29236: PPOPN 3
29238: END
// every 0 0$1 trigger s30 do var i , tmp ;
29239: LD_EXP 107
29243: IFFALSE 29312
29245: GO 29247
29247: DISABLE
29248: LD_INT 0
29250: PPUSH
29251: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29252: LD_ADDR_VAR 0 2
29256: PUSH
29257: LD_INT 22
29259: PUSH
29260: LD_OWVAR 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: CALL_OW 69
29273: ST_TO_ADDR
// if not tmp then
29274: LD_VAR 0 2
29278: NOT
29279: IFFALSE 29283
// exit ;
29281: GO 29312
// for i in tmp do
29283: LD_ADDR_VAR 0 1
29287: PUSH
29288: LD_VAR 0 2
29292: PUSH
29293: FOR_IN
29294: IFFALSE 29310
// SetLives ( i , 300 ) ;
29296: LD_VAR 0 1
29300: PPUSH
29301: LD_INT 300
29303: PPUSH
29304: CALL_OW 234
29308: GO 29293
29310: POP
29311: POP
// end ;
29312: PPOPN 2
29314: END
// every 0 0$1 trigger s60 do var i , tmp ;
29315: LD_EXP 108
29319: IFFALSE 29388
29321: GO 29323
29323: DISABLE
29324: LD_INT 0
29326: PPUSH
29327: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29328: LD_ADDR_VAR 0 2
29332: PUSH
29333: LD_INT 22
29335: PUSH
29336: LD_OWVAR 2
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PPUSH
29345: CALL_OW 69
29349: ST_TO_ADDR
// if not tmp then
29350: LD_VAR 0 2
29354: NOT
29355: IFFALSE 29359
// exit ;
29357: GO 29388
// for i in tmp do
29359: LD_ADDR_VAR 0 1
29363: PUSH
29364: LD_VAR 0 2
29368: PUSH
29369: FOR_IN
29370: IFFALSE 29386
// SetLives ( i , 600 ) ;
29372: LD_VAR 0 1
29376: PPUSH
29377: LD_INT 600
29379: PPUSH
29380: CALL_OW 234
29384: GO 29369
29386: POP
29387: POP
// end ;
29388: PPOPN 2
29390: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29391: LD_INT 0
29393: PPUSH
// case cmd of 301 :
29394: LD_VAR 0 1
29398: PUSH
29399: LD_INT 301
29401: DOUBLE
29402: EQUAL
29403: IFTRUE 29407
29405: GO 29439
29407: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29408: LD_VAR 0 6
29412: PPUSH
29413: LD_VAR 0 7
29417: PPUSH
29418: LD_VAR 0 8
29422: PPUSH
29423: LD_VAR 0 4
29427: PPUSH
29428: LD_VAR 0 5
29432: PPUSH
29433: CALL 30640 0 5
29437: GO 29560
29439: LD_INT 302
29441: DOUBLE
29442: EQUAL
29443: IFTRUE 29447
29445: GO 29484
29447: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29448: LD_VAR 0 6
29452: PPUSH
29453: LD_VAR 0 7
29457: PPUSH
29458: LD_VAR 0 8
29462: PPUSH
29463: LD_VAR 0 9
29467: PPUSH
29468: LD_VAR 0 4
29472: PPUSH
29473: LD_VAR 0 5
29477: PPUSH
29478: CALL 30731 0 6
29482: GO 29560
29484: LD_INT 303
29486: DOUBLE
29487: EQUAL
29488: IFTRUE 29492
29490: GO 29529
29492: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29493: LD_VAR 0 6
29497: PPUSH
29498: LD_VAR 0 7
29502: PPUSH
29503: LD_VAR 0 8
29507: PPUSH
29508: LD_VAR 0 9
29512: PPUSH
29513: LD_VAR 0 4
29517: PPUSH
29518: LD_VAR 0 5
29522: PPUSH
29523: CALL 29565 0 6
29527: GO 29560
29529: LD_INT 304
29531: DOUBLE
29532: EQUAL
29533: IFTRUE 29537
29535: GO 29559
29537: POP
// hHackTeleport ( unit , x , y ) ; end ;
29538: LD_VAR 0 2
29542: PPUSH
29543: LD_VAR 0 4
29547: PPUSH
29548: LD_VAR 0 5
29552: PPUSH
29553: CALL 31324 0 3
29557: GO 29560
29559: POP
// end ;
29560: LD_VAR 0 12
29564: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29565: LD_INT 0
29567: PPUSH
29568: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29569: LD_VAR 0 1
29573: PUSH
29574: LD_INT 1
29576: LESS
29577: PUSH
29578: LD_VAR 0 1
29582: PUSH
29583: LD_INT 3
29585: GREATER
29586: OR
29587: PUSH
29588: LD_VAR 0 5
29592: PPUSH
29593: LD_VAR 0 6
29597: PPUSH
29598: CALL_OW 428
29602: OR
29603: IFFALSE 29607
// exit ;
29605: GO 30327
// uc_side := your_side ;
29607: LD_ADDR_OWVAR 20
29611: PUSH
29612: LD_OWVAR 2
29616: ST_TO_ADDR
// uc_nation := nation ;
29617: LD_ADDR_OWVAR 21
29621: PUSH
29622: LD_VAR 0 1
29626: ST_TO_ADDR
// bc_level = 1 ;
29627: LD_ADDR_OWVAR 43
29631: PUSH
29632: LD_INT 1
29634: ST_TO_ADDR
// case btype of 1 :
29635: LD_VAR 0 2
29639: PUSH
29640: LD_INT 1
29642: DOUBLE
29643: EQUAL
29644: IFTRUE 29648
29646: GO 29659
29648: POP
// bc_type := b_depot ; 2 :
29649: LD_ADDR_OWVAR 42
29653: PUSH
29654: LD_INT 0
29656: ST_TO_ADDR
29657: GO 30271
29659: LD_INT 2
29661: DOUBLE
29662: EQUAL
29663: IFTRUE 29667
29665: GO 29678
29667: POP
// bc_type := b_warehouse ; 3 :
29668: LD_ADDR_OWVAR 42
29672: PUSH
29673: LD_INT 1
29675: ST_TO_ADDR
29676: GO 30271
29678: LD_INT 3
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 29697
29686: POP
// bc_type := b_lab ; 4 .. 9 :
29687: LD_ADDR_OWVAR 42
29691: PUSH
29692: LD_INT 6
29694: ST_TO_ADDR
29695: GO 30271
29697: LD_INT 4
29699: DOUBLE
29700: GREATEREQUAL
29701: IFFALSE 29709
29703: LD_INT 9
29705: DOUBLE
29706: LESSEQUAL
29707: IFTRUE 29711
29709: GO 29763
29711: POP
// begin bc_type := b_lab_half ;
29712: LD_ADDR_OWVAR 42
29716: PUSH
29717: LD_INT 7
29719: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29720: LD_ADDR_OWVAR 44
29724: PUSH
29725: LD_INT 10
29727: PUSH
29728: LD_INT 11
29730: PUSH
29731: LD_INT 12
29733: PUSH
29734: LD_INT 15
29736: PUSH
29737: LD_INT 14
29739: PUSH
29740: LD_INT 13
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: PUSH
29751: LD_VAR 0 2
29755: PUSH
29756: LD_INT 3
29758: MINUS
29759: ARRAY
29760: ST_TO_ADDR
// end ; 10 .. 13 :
29761: GO 30271
29763: LD_INT 10
29765: DOUBLE
29766: GREATEREQUAL
29767: IFFALSE 29775
29769: LD_INT 13
29771: DOUBLE
29772: LESSEQUAL
29773: IFTRUE 29777
29775: GO 29854
29777: POP
// begin bc_type := b_lab_full ;
29778: LD_ADDR_OWVAR 42
29782: PUSH
29783: LD_INT 8
29785: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29786: LD_ADDR_OWVAR 44
29790: PUSH
29791: LD_INT 10
29793: PUSH
29794: LD_INT 12
29796: PUSH
29797: LD_INT 14
29799: PUSH
29800: LD_INT 13
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: PUSH
29809: LD_VAR 0 2
29813: PUSH
29814: LD_INT 9
29816: MINUS
29817: ARRAY
29818: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29819: LD_ADDR_OWVAR 45
29823: PUSH
29824: LD_INT 11
29826: PUSH
29827: LD_INT 15
29829: PUSH
29830: LD_INT 12
29832: PUSH
29833: LD_INT 15
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: PUSH
29842: LD_VAR 0 2
29846: PUSH
29847: LD_INT 9
29849: MINUS
29850: ARRAY
29851: ST_TO_ADDR
// end ; 14 :
29852: GO 30271
29854: LD_INT 14
29856: DOUBLE
29857: EQUAL
29858: IFTRUE 29862
29860: GO 29873
29862: POP
// bc_type := b_workshop ; 15 :
29863: LD_ADDR_OWVAR 42
29867: PUSH
29868: LD_INT 2
29870: ST_TO_ADDR
29871: GO 30271
29873: LD_INT 15
29875: DOUBLE
29876: EQUAL
29877: IFTRUE 29881
29879: GO 29892
29881: POP
// bc_type := b_factory ; 16 :
29882: LD_ADDR_OWVAR 42
29886: PUSH
29887: LD_INT 3
29889: ST_TO_ADDR
29890: GO 30271
29892: LD_INT 16
29894: DOUBLE
29895: EQUAL
29896: IFTRUE 29900
29898: GO 29911
29900: POP
// bc_type := b_ext_gun ; 17 :
29901: LD_ADDR_OWVAR 42
29905: PUSH
29906: LD_INT 17
29908: ST_TO_ADDR
29909: GO 30271
29911: LD_INT 17
29913: DOUBLE
29914: EQUAL
29915: IFTRUE 29919
29917: GO 29947
29919: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29920: LD_ADDR_OWVAR 42
29924: PUSH
29925: LD_INT 19
29927: PUSH
29928: LD_INT 23
29930: PUSH
29931: LD_INT 19
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: PUSH
29939: LD_VAR 0 1
29943: ARRAY
29944: ST_TO_ADDR
29945: GO 30271
29947: LD_INT 18
29949: DOUBLE
29950: EQUAL
29951: IFTRUE 29955
29953: GO 29966
29955: POP
// bc_type := b_ext_radar ; 19 :
29956: LD_ADDR_OWVAR 42
29960: PUSH
29961: LD_INT 20
29963: ST_TO_ADDR
29964: GO 30271
29966: LD_INT 19
29968: DOUBLE
29969: EQUAL
29970: IFTRUE 29974
29972: GO 29985
29974: POP
// bc_type := b_ext_radio ; 20 :
29975: LD_ADDR_OWVAR 42
29979: PUSH
29980: LD_INT 22
29982: ST_TO_ADDR
29983: GO 30271
29985: LD_INT 20
29987: DOUBLE
29988: EQUAL
29989: IFTRUE 29993
29991: GO 30004
29993: POP
// bc_type := b_ext_siberium ; 21 :
29994: LD_ADDR_OWVAR 42
29998: PUSH
29999: LD_INT 21
30001: ST_TO_ADDR
30002: GO 30271
30004: LD_INT 21
30006: DOUBLE
30007: EQUAL
30008: IFTRUE 30012
30010: GO 30023
30012: POP
// bc_type := b_ext_computer ; 22 :
30013: LD_ADDR_OWVAR 42
30017: PUSH
30018: LD_INT 24
30020: ST_TO_ADDR
30021: GO 30271
30023: LD_INT 22
30025: DOUBLE
30026: EQUAL
30027: IFTRUE 30031
30029: GO 30042
30031: POP
// bc_type := b_ext_track ; 23 :
30032: LD_ADDR_OWVAR 42
30036: PUSH
30037: LD_INT 16
30039: ST_TO_ADDR
30040: GO 30271
30042: LD_INT 23
30044: DOUBLE
30045: EQUAL
30046: IFTRUE 30050
30048: GO 30061
30050: POP
// bc_type := b_ext_laser ; 24 :
30051: LD_ADDR_OWVAR 42
30055: PUSH
30056: LD_INT 25
30058: ST_TO_ADDR
30059: GO 30271
30061: LD_INT 24
30063: DOUBLE
30064: EQUAL
30065: IFTRUE 30069
30067: GO 30080
30069: POP
// bc_type := b_control_tower ; 25 :
30070: LD_ADDR_OWVAR 42
30074: PUSH
30075: LD_INT 36
30077: ST_TO_ADDR
30078: GO 30271
30080: LD_INT 25
30082: DOUBLE
30083: EQUAL
30084: IFTRUE 30088
30086: GO 30099
30088: POP
// bc_type := b_breastwork ; 26 :
30089: LD_ADDR_OWVAR 42
30093: PUSH
30094: LD_INT 31
30096: ST_TO_ADDR
30097: GO 30271
30099: LD_INT 26
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30118
30107: POP
// bc_type := b_bunker ; 27 :
30108: LD_ADDR_OWVAR 42
30112: PUSH
30113: LD_INT 32
30115: ST_TO_ADDR
30116: GO 30271
30118: LD_INT 27
30120: DOUBLE
30121: EQUAL
30122: IFTRUE 30126
30124: GO 30137
30126: POP
// bc_type := b_turret ; 28 :
30127: LD_ADDR_OWVAR 42
30131: PUSH
30132: LD_INT 33
30134: ST_TO_ADDR
30135: GO 30271
30137: LD_INT 28
30139: DOUBLE
30140: EQUAL
30141: IFTRUE 30145
30143: GO 30156
30145: POP
// bc_type := b_armoury ; 29 :
30146: LD_ADDR_OWVAR 42
30150: PUSH
30151: LD_INT 4
30153: ST_TO_ADDR
30154: GO 30271
30156: LD_INT 29
30158: DOUBLE
30159: EQUAL
30160: IFTRUE 30164
30162: GO 30175
30164: POP
// bc_type := b_barracks ; 30 :
30165: LD_ADDR_OWVAR 42
30169: PUSH
30170: LD_INT 5
30172: ST_TO_ADDR
30173: GO 30271
30175: LD_INT 30
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30194
30183: POP
// bc_type := b_solar_power ; 31 :
30184: LD_ADDR_OWVAR 42
30188: PUSH
30189: LD_INT 27
30191: ST_TO_ADDR
30192: GO 30271
30194: LD_INT 31
30196: DOUBLE
30197: EQUAL
30198: IFTRUE 30202
30200: GO 30213
30202: POP
// bc_type := b_oil_power ; 32 :
30203: LD_ADDR_OWVAR 42
30207: PUSH
30208: LD_INT 26
30210: ST_TO_ADDR
30211: GO 30271
30213: LD_INT 32
30215: DOUBLE
30216: EQUAL
30217: IFTRUE 30221
30219: GO 30232
30221: POP
// bc_type := b_siberite_power ; 33 :
30222: LD_ADDR_OWVAR 42
30226: PUSH
30227: LD_INT 28
30229: ST_TO_ADDR
30230: GO 30271
30232: LD_INT 33
30234: DOUBLE
30235: EQUAL
30236: IFTRUE 30240
30238: GO 30251
30240: POP
// bc_type := b_oil_mine ; 34 :
30241: LD_ADDR_OWVAR 42
30245: PUSH
30246: LD_INT 29
30248: ST_TO_ADDR
30249: GO 30271
30251: LD_INT 34
30253: DOUBLE
30254: EQUAL
30255: IFTRUE 30259
30257: GO 30270
30259: POP
// bc_type := b_siberite_mine ; end ;
30260: LD_ADDR_OWVAR 42
30264: PUSH
30265: LD_INT 30
30267: ST_TO_ADDR
30268: GO 30271
30270: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30271: LD_ADDR_VAR 0 8
30275: PUSH
30276: LD_VAR 0 5
30280: PPUSH
30281: LD_VAR 0 6
30285: PPUSH
30286: LD_VAR 0 3
30290: PPUSH
30291: CALL_OW 47
30295: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30296: LD_OWVAR 42
30300: PUSH
30301: LD_INT 32
30303: PUSH
30304: LD_INT 33
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: IN
30311: IFFALSE 30327
// PlaceWeaponTurret ( b , weapon ) ;
30313: LD_VAR 0 8
30317: PPUSH
30318: LD_VAR 0 4
30322: PPUSH
30323: CALL_OW 431
// end ;
30327: LD_VAR 0 7
30331: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30332: LD_INT 0
30334: PPUSH
30335: PPUSH
30336: PPUSH
30337: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30338: LD_ADDR_VAR 0 4
30342: PUSH
30343: LD_INT 22
30345: PUSH
30346: LD_OWVAR 2
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 30
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL_OW 69
30391: ST_TO_ADDR
// if not tmp then
30392: LD_VAR 0 4
30396: NOT
30397: IFFALSE 30401
// exit ;
30399: GO 30460
// for i in tmp do
30401: LD_ADDR_VAR 0 2
30405: PUSH
30406: LD_VAR 0 4
30410: PUSH
30411: FOR_IN
30412: IFFALSE 30458
// for j = 1 to 3 do
30414: LD_ADDR_VAR 0 3
30418: PUSH
30419: DOUBLE
30420: LD_INT 1
30422: DEC
30423: ST_TO_ADDR
30424: LD_INT 3
30426: PUSH
30427: FOR_TO
30428: IFFALSE 30454
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30430: LD_VAR 0 2
30434: PPUSH
30435: CALL_OW 274
30439: PPUSH
30440: LD_VAR 0 3
30444: PPUSH
30445: LD_INT 99999
30447: PPUSH
30448: CALL_OW 277
30452: GO 30427
30454: POP
30455: POP
30456: GO 30411
30458: POP
30459: POP
// end ;
30460: LD_VAR 0 1
30464: RET
// export function hHackSetLevel10 ; var i , j ; begin
30465: LD_INT 0
30467: PPUSH
30468: PPUSH
30469: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30470: LD_ADDR_VAR 0 2
30474: PUSH
30475: LD_INT 21
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PPUSH
30485: CALL_OW 69
30489: PUSH
30490: FOR_IN
30491: IFFALSE 30543
// if IsSelected ( i ) then
30493: LD_VAR 0 2
30497: PPUSH
30498: CALL_OW 306
30502: IFFALSE 30541
// begin for j := 1 to 4 do
30504: LD_ADDR_VAR 0 3
30508: PUSH
30509: DOUBLE
30510: LD_INT 1
30512: DEC
30513: ST_TO_ADDR
30514: LD_INT 4
30516: PUSH
30517: FOR_TO
30518: IFFALSE 30539
// SetSkill ( i , j , 10 ) ;
30520: LD_VAR 0 2
30524: PPUSH
30525: LD_VAR 0 3
30529: PPUSH
30530: LD_INT 10
30532: PPUSH
30533: CALL_OW 237
30537: GO 30517
30539: POP
30540: POP
// end ;
30541: GO 30490
30543: POP
30544: POP
// end ;
30545: LD_VAR 0 1
30549: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30550: LD_INT 0
30552: PPUSH
30553: PPUSH
30554: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30555: LD_ADDR_VAR 0 2
30559: PUSH
30560: LD_INT 22
30562: PUSH
30563: LD_OWVAR 2
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 21
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: PUSH
30591: FOR_IN
30592: IFFALSE 30633
// begin for j := 1 to 4 do
30594: LD_ADDR_VAR 0 3
30598: PUSH
30599: DOUBLE
30600: LD_INT 1
30602: DEC
30603: ST_TO_ADDR
30604: LD_INT 4
30606: PUSH
30607: FOR_TO
30608: IFFALSE 30629
// SetSkill ( i , j , 10 ) ;
30610: LD_VAR 0 2
30614: PPUSH
30615: LD_VAR 0 3
30619: PPUSH
30620: LD_INT 10
30622: PPUSH
30623: CALL_OW 237
30627: GO 30607
30629: POP
30630: POP
// end ;
30631: GO 30591
30633: POP
30634: POP
// end ;
30635: LD_VAR 0 1
30639: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30640: LD_INT 0
30642: PPUSH
// uc_side := your_side ;
30643: LD_ADDR_OWVAR 20
30647: PUSH
30648: LD_OWVAR 2
30652: ST_TO_ADDR
// uc_nation := nation ;
30653: LD_ADDR_OWVAR 21
30657: PUSH
30658: LD_VAR 0 1
30662: ST_TO_ADDR
// InitHc ;
30663: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30667: LD_INT 0
30669: PPUSH
30670: LD_VAR 0 2
30674: PPUSH
30675: LD_VAR 0 3
30679: PPUSH
30680: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30684: LD_VAR 0 4
30688: PPUSH
30689: LD_VAR 0 5
30693: PPUSH
30694: CALL_OW 428
30698: PUSH
30699: LD_INT 0
30701: EQUAL
30702: IFFALSE 30726
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30704: CALL_OW 44
30708: PPUSH
30709: LD_VAR 0 4
30713: PPUSH
30714: LD_VAR 0 5
30718: PPUSH
30719: LD_INT 1
30721: PPUSH
30722: CALL_OW 48
// end ;
30726: LD_VAR 0 6
30730: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30731: LD_INT 0
30733: PPUSH
30734: PPUSH
// uc_side := your_side ;
30735: LD_ADDR_OWVAR 20
30739: PUSH
30740: LD_OWVAR 2
30744: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30745: LD_VAR 0 1
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 2
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: LD_INT 4
30761: PUSH
30762: LD_INT 5
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: IN
30772: IFFALSE 30784
// uc_nation := nation_american else
30774: LD_ADDR_OWVAR 21
30778: PUSH
30779: LD_INT 1
30781: ST_TO_ADDR
30782: GO 30827
// if chassis in [ 11 , 12 , 13 , 14 ] then
30784: LD_VAR 0 1
30788: PUSH
30789: LD_INT 11
30791: PUSH
30792: LD_INT 12
30794: PUSH
30795: LD_INT 13
30797: PUSH
30798: LD_INT 14
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: IN
30807: IFFALSE 30819
// uc_nation := nation_arabian else
30809: LD_ADDR_OWVAR 21
30813: PUSH
30814: LD_INT 2
30816: ST_TO_ADDR
30817: GO 30827
// uc_nation := nation_russian ;
30819: LD_ADDR_OWVAR 21
30823: PUSH
30824: LD_INT 3
30826: ST_TO_ADDR
// vc_chassis := chassis ;
30827: LD_ADDR_OWVAR 37
30831: PUSH
30832: LD_VAR 0 1
30836: ST_TO_ADDR
// vc_engine := engine ;
30837: LD_ADDR_OWVAR 39
30841: PUSH
30842: LD_VAR 0 2
30846: ST_TO_ADDR
// vc_control := control ;
30847: LD_ADDR_OWVAR 38
30851: PUSH
30852: LD_VAR 0 3
30856: ST_TO_ADDR
// vc_weapon := weapon ;
30857: LD_ADDR_OWVAR 40
30861: PUSH
30862: LD_VAR 0 4
30866: ST_TO_ADDR
// un := CreateVehicle ;
30867: LD_ADDR_VAR 0 8
30871: PUSH
30872: CALL_OW 45
30876: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30877: LD_VAR 0 8
30881: PPUSH
30882: LD_INT 0
30884: PPUSH
30885: LD_INT 5
30887: PPUSH
30888: CALL_OW 12
30892: PPUSH
30893: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30897: LD_VAR 0 8
30901: PPUSH
30902: LD_VAR 0 5
30906: PPUSH
30907: LD_VAR 0 6
30911: PPUSH
30912: LD_INT 1
30914: PPUSH
30915: CALL_OW 48
// end ;
30919: LD_VAR 0 7
30923: RET
// export hInvincible ; every 1 do
30924: GO 30926
30926: DISABLE
// hInvincible := [ ] ;
30927: LD_ADDR_EXP 109
30931: PUSH
30932: EMPTY
30933: ST_TO_ADDR
30934: END
// every 10 do var i ;
30935: GO 30937
30937: DISABLE
30938: LD_INT 0
30940: PPUSH
// begin enable ;
30941: ENABLE
// if not hInvincible then
30942: LD_EXP 109
30946: NOT
30947: IFFALSE 30951
// exit ;
30949: GO 30995
// for i in hInvincible do
30951: LD_ADDR_VAR 0 1
30955: PUSH
30956: LD_EXP 109
30960: PUSH
30961: FOR_IN
30962: IFFALSE 30993
// if GetLives ( i ) < 1000 then
30964: LD_VAR 0 1
30968: PPUSH
30969: CALL_OW 256
30973: PUSH
30974: LD_INT 1000
30976: LESS
30977: IFFALSE 30991
// SetLives ( i , 1000 ) ;
30979: LD_VAR 0 1
30983: PPUSH
30984: LD_INT 1000
30986: PPUSH
30987: CALL_OW 234
30991: GO 30961
30993: POP
30994: POP
// end ;
30995: PPOPN 1
30997: END
// export function hHackInvincible ; var i ; begin
30998: LD_INT 0
31000: PPUSH
31001: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31002: LD_ADDR_VAR 0 2
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: LD_INT 21
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 21
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: PPUSH
31035: CALL_OW 69
31039: PUSH
31040: FOR_IN
31041: IFFALSE 31102
// if IsSelected ( i ) then
31043: LD_VAR 0 2
31047: PPUSH
31048: CALL_OW 306
31052: IFFALSE 31100
// begin if i in hInvincible then
31054: LD_VAR 0 2
31058: PUSH
31059: LD_EXP 109
31063: IN
31064: IFFALSE 31084
// hInvincible := hInvincible diff i else
31066: LD_ADDR_EXP 109
31070: PUSH
31071: LD_EXP 109
31075: PUSH
31076: LD_VAR 0 2
31080: DIFF
31081: ST_TO_ADDR
31082: GO 31100
// hInvincible := hInvincible union i ;
31084: LD_ADDR_EXP 109
31088: PUSH
31089: LD_EXP 109
31093: PUSH
31094: LD_VAR 0 2
31098: UNION
31099: ST_TO_ADDR
// end ;
31100: GO 31040
31102: POP
31103: POP
// end ;
31104: LD_VAR 0 1
31108: RET
// export function hHackInvisible ; var i , j ; begin
31109: LD_INT 0
31111: PPUSH
31112: PPUSH
31113: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31114: LD_ADDR_VAR 0 2
31118: PUSH
31119: LD_INT 21
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PPUSH
31129: CALL_OW 69
31133: PUSH
31134: FOR_IN
31135: IFFALSE 31159
// if IsSelected ( i ) then
31137: LD_VAR 0 2
31141: PPUSH
31142: CALL_OW 306
31146: IFFALSE 31157
// ComForceInvisible ( i ) ;
31148: LD_VAR 0 2
31152: PPUSH
31153: CALL_OW 496
31157: GO 31134
31159: POP
31160: POP
// end ;
31161: LD_VAR 0 1
31165: RET
// export function hHackChangeYourSide ; begin
31166: LD_INT 0
31168: PPUSH
// if your_side = 8 then
31169: LD_OWVAR 2
31173: PUSH
31174: LD_INT 8
31176: EQUAL
31177: IFFALSE 31189
// your_side := 0 else
31179: LD_ADDR_OWVAR 2
31183: PUSH
31184: LD_INT 0
31186: ST_TO_ADDR
31187: GO 31203
// your_side := your_side + 1 ;
31189: LD_ADDR_OWVAR 2
31193: PUSH
31194: LD_OWVAR 2
31198: PUSH
31199: LD_INT 1
31201: PLUS
31202: ST_TO_ADDR
// end ;
31203: LD_VAR 0 1
31207: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31208: LD_INT 0
31210: PPUSH
31211: PPUSH
31212: PPUSH
// for i in all_units do
31213: LD_ADDR_VAR 0 2
31217: PUSH
31218: LD_OWVAR 3
31222: PUSH
31223: FOR_IN
31224: IFFALSE 31302
// if IsSelected ( i ) then
31226: LD_VAR 0 2
31230: PPUSH
31231: CALL_OW 306
31235: IFFALSE 31300
// begin j := GetSide ( i ) ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 2
31246: PPUSH
31247: CALL_OW 255
31251: ST_TO_ADDR
// if j = 8 then
31252: LD_VAR 0 3
31256: PUSH
31257: LD_INT 8
31259: EQUAL
31260: IFFALSE 31272
// j := 0 else
31262: LD_ADDR_VAR 0 3
31266: PUSH
31267: LD_INT 0
31269: ST_TO_ADDR
31270: GO 31286
// j := j + 1 ;
31272: LD_ADDR_VAR 0 3
31276: PUSH
31277: LD_VAR 0 3
31281: PUSH
31282: LD_INT 1
31284: PLUS
31285: ST_TO_ADDR
// SetSide ( i , j ) ;
31286: LD_VAR 0 2
31290: PPUSH
31291: LD_VAR 0 3
31295: PPUSH
31296: CALL_OW 235
// end ;
31300: GO 31223
31302: POP
31303: POP
// end ;
31304: LD_VAR 0 1
31308: RET
// export function hHackFog ; begin
31309: LD_INT 0
31311: PPUSH
// FogOff ( true ) ;
31312: LD_INT 1
31314: PPUSH
31315: CALL_OW 344
// end ;
31319: LD_VAR 0 1
31323: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31324: LD_INT 0
31326: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31327: LD_VAR 0 1
31331: PPUSH
31332: LD_VAR 0 2
31336: PPUSH
31337: LD_VAR 0 3
31341: PPUSH
31342: LD_INT 1
31344: PPUSH
31345: LD_INT 1
31347: PPUSH
31348: CALL_OW 483
// CenterOnXY ( x , y ) ;
31352: LD_VAR 0 2
31356: PPUSH
31357: LD_VAR 0 3
31361: PPUSH
31362: CALL_OW 84
// end ;
31366: LD_VAR 0 4
31370: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31371: LD_INT 0
31373: PPUSH
31374: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31375: LD_VAR 0 1
31379: NOT
31380: PUSH
31381: LD_VAR 0 2
31385: PPUSH
31386: LD_VAR 0 3
31390: PPUSH
31391: CALL_OW 488
31395: NOT
31396: OR
31397: PUSH
31398: LD_VAR 0 1
31402: PPUSH
31403: CALL_OW 266
31407: PUSH
31408: LD_INT 3
31410: NONEQUAL
31411: PUSH
31412: LD_VAR 0 1
31416: PPUSH
31417: CALL_OW 247
31421: PUSH
31422: LD_INT 1
31424: EQUAL
31425: NOT
31426: AND
31427: OR
31428: IFFALSE 31432
// exit ;
31430: GO 31581
// if GetType ( factory ) = unit_human then
31432: LD_VAR 0 1
31436: PPUSH
31437: CALL_OW 247
31441: PUSH
31442: LD_INT 1
31444: EQUAL
31445: IFFALSE 31462
// factory := IsInUnit ( factory ) ;
31447: LD_ADDR_VAR 0 1
31451: PUSH
31452: LD_VAR 0 1
31456: PPUSH
31457: CALL_OW 310
31461: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31462: LD_VAR 0 1
31466: PPUSH
31467: CALL_OW 266
31471: PUSH
31472: LD_INT 3
31474: NONEQUAL
31475: IFFALSE 31479
// exit ;
31477: GO 31581
// if HexInfo ( x , y ) = factory then
31479: LD_VAR 0 2
31483: PPUSH
31484: LD_VAR 0 3
31488: PPUSH
31489: CALL_OW 428
31493: PUSH
31494: LD_VAR 0 1
31498: EQUAL
31499: IFFALSE 31526
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
31501: LD_ADDR_EXP 110
31505: PUSH
31506: LD_EXP 110
31510: PPUSH
31511: LD_VAR 0 1
31515: PPUSH
31516: LD_INT 0
31518: PPUSH
31519: CALL_OW 1
31523: ST_TO_ADDR
31524: GO 31577
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
31526: LD_ADDR_EXP 110
31530: PUSH
31531: LD_EXP 110
31535: PPUSH
31536: LD_VAR 0 1
31540: PPUSH
31541: LD_VAR 0 1
31545: PPUSH
31546: CALL_OW 255
31550: PUSH
31551: LD_VAR 0 1
31555: PUSH
31556: LD_VAR 0 2
31560: PUSH
31561: LD_VAR 0 3
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: PPUSH
31572: CALL_OW 1
31576: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31577: CALL 31586 0 0
// end ;
31581: LD_VAR 0 4
31585: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31586: LD_INT 0
31588: PPUSH
31589: PPUSH
31590: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31591: LD_STRING resetFactoryWaypoint();
31593: PPUSH
31594: CALL_OW 559
// if factoryWaypoints then
31598: LD_EXP 110
31602: IFFALSE 31728
// begin list := PrepareArray ( factoryWaypoints ) ;
31604: LD_ADDR_VAR 0 3
31608: PUSH
31609: LD_EXP 110
31613: PPUSH
31614: CALL 78268 0 1
31618: ST_TO_ADDR
// for i := 1 to list do
31619: LD_ADDR_VAR 0 2
31623: PUSH
31624: DOUBLE
31625: LD_INT 1
31627: DEC
31628: ST_TO_ADDR
31629: LD_VAR 0 3
31633: PUSH
31634: FOR_TO
31635: IFFALSE 31726
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31637: LD_STRING setFactoryWaypointXY(
31639: PUSH
31640: LD_VAR 0 3
31644: PUSH
31645: LD_VAR 0 2
31649: ARRAY
31650: PUSH
31651: LD_INT 1
31653: ARRAY
31654: STR
31655: PUSH
31656: LD_STRING ,
31658: STR
31659: PUSH
31660: LD_VAR 0 3
31664: PUSH
31665: LD_VAR 0 2
31669: ARRAY
31670: PUSH
31671: LD_INT 2
31673: ARRAY
31674: STR
31675: PUSH
31676: LD_STRING ,
31678: STR
31679: PUSH
31680: LD_VAR 0 3
31684: PUSH
31685: LD_VAR 0 2
31689: ARRAY
31690: PUSH
31691: LD_INT 3
31693: ARRAY
31694: STR
31695: PUSH
31696: LD_STRING ,
31698: STR
31699: PUSH
31700: LD_VAR 0 3
31704: PUSH
31705: LD_VAR 0 2
31709: ARRAY
31710: PUSH
31711: LD_INT 4
31713: ARRAY
31714: STR
31715: PUSH
31716: LD_STRING )
31718: STR
31719: PPUSH
31720: CALL_OW 559
31724: GO 31634
31726: POP
31727: POP
// end ; end ;
31728: LD_VAR 0 1
31732: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
31733: LD_INT 0
31735: PPUSH
// if HexInfo ( x , y ) = warehouse then
31736: LD_VAR 0 2
31740: PPUSH
31741: LD_VAR 0 3
31745: PPUSH
31746: CALL_OW 428
31750: PUSH
31751: LD_VAR 0 1
31755: EQUAL
31756: IFFALSE 31783
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
31758: LD_ADDR_EXP 111
31762: PUSH
31763: LD_EXP 111
31767: PPUSH
31768: LD_VAR 0 1
31772: PPUSH
31773: LD_INT 0
31775: PPUSH
31776: CALL_OW 1
31780: ST_TO_ADDR
31781: GO 31834
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
31783: LD_ADDR_EXP 111
31787: PUSH
31788: LD_EXP 111
31792: PPUSH
31793: LD_VAR 0 1
31797: PPUSH
31798: LD_VAR 0 1
31802: PPUSH
31803: CALL_OW 255
31807: PUSH
31808: LD_VAR 0 1
31812: PUSH
31813: LD_VAR 0 2
31817: PUSH
31818: LD_VAR 0 3
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: PPUSH
31829: CALL_OW 1
31833: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31834: CALL 31843 0 0
// end ;
31838: LD_VAR 0 4
31842: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31843: LD_INT 0
31845: PPUSH
31846: PPUSH
31847: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31848: LD_STRING resetWarehouseGatheringPoints();
31850: PPUSH
31851: CALL_OW 559
// if warehouseGatheringPoints then
31855: LD_EXP 111
31859: IFFALSE 31985
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31861: LD_ADDR_VAR 0 3
31865: PUSH
31866: LD_EXP 111
31870: PPUSH
31871: CALL 78268 0 1
31875: ST_TO_ADDR
// for i := 1 to list do
31876: LD_ADDR_VAR 0 2
31880: PUSH
31881: DOUBLE
31882: LD_INT 1
31884: DEC
31885: ST_TO_ADDR
31886: LD_VAR 0 3
31890: PUSH
31891: FOR_TO
31892: IFFALSE 31983
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31894: LD_STRING setWarehouseGatheringPointXY(
31896: PUSH
31897: LD_VAR 0 3
31901: PUSH
31902: LD_VAR 0 2
31906: ARRAY
31907: PUSH
31908: LD_INT 1
31910: ARRAY
31911: STR
31912: PUSH
31913: LD_STRING ,
31915: STR
31916: PUSH
31917: LD_VAR 0 3
31921: PUSH
31922: LD_VAR 0 2
31926: ARRAY
31927: PUSH
31928: LD_INT 2
31930: ARRAY
31931: STR
31932: PUSH
31933: LD_STRING ,
31935: STR
31936: PUSH
31937: LD_VAR 0 3
31941: PUSH
31942: LD_VAR 0 2
31946: ARRAY
31947: PUSH
31948: LD_INT 3
31950: ARRAY
31951: STR
31952: PUSH
31953: LD_STRING ,
31955: STR
31956: PUSH
31957: LD_VAR 0 3
31961: PUSH
31962: LD_VAR 0 2
31966: ARRAY
31967: PUSH
31968: LD_INT 4
31970: ARRAY
31971: STR
31972: PUSH
31973: LD_STRING )
31975: STR
31976: PPUSH
31977: CALL_OW 559
31981: GO 31891
31983: POP
31984: POP
// end ; end ;
31985: LD_VAR 0 1
31989: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31990: LD_EXP 111
31994: IFFALSE 32679
31996: GO 31998
31998: DISABLE
31999: LD_INT 0
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
32008: PPUSH
32009: PPUSH
// begin enable ;
32010: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32011: LD_ADDR_VAR 0 3
32015: PUSH
32016: LD_EXP 111
32020: PPUSH
32021: CALL 78268 0 1
32025: ST_TO_ADDR
// if not list then
32026: LD_VAR 0 3
32030: NOT
32031: IFFALSE 32035
// exit ;
32033: GO 32679
// for i := 1 to list do
32035: LD_ADDR_VAR 0 1
32039: PUSH
32040: DOUBLE
32041: LD_INT 1
32043: DEC
32044: ST_TO_ADDR
32045: LD_VAR 0 3
32049: PUSH
32050: FOR_TO
32051: IFFALSE 32677
// begin depot := list [ i ] [ 2 ] ;
32053: LD_ADDR_VAR 0 8
32057: PUSH
32058: LD_VAR 0 3
32062: PUSH
32063: LD_VAR 0 1
32067: ARRAY
32068: PUSH
32069: LD_INT 2
32071: ARRAY
32072: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32073: LD_ADDR_VAR 0 5
32077: PUSH
32078: LD_VAR 0 3
32082: PUSH
32083: LD_VAR 0 1
32087: ARRAY
32088: PUSH
32089: LD_INT 1
32091: ARRAY
32092: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32093: LD_VAR 0 8
32097: PPUSH
32098: CALL_OW 301
32102: PUSH
32103: LD_VAR 0 5
32107: PUSH
32108: LD_VAR 0 8
32112: PPUSH
32113: CALL_OW 255
32117: NONEQUAL
32118: OR
32119: IFFALSE 32148
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32121: LD_ADDR_EXP 111
32125: PUSH
32126: LD_EXP 111
32130: PPUSH
32131: LD_VAR 0 8
32135: PPUSH
32136: LD_INT 0
32138: PPUSH
32139: CALL_OW 1
32143: ST_TO_ADDR
// exit ;
32144: POP
32145: POP
32146: GO 32679
// end ; x := list [ i ] [ 3 ] ;
32148: LD_ADDR_VAR 0 6
32152: PUSH
32153: LD_VAR 0 3
32157: PUSH
32158: LD_VAR 0 1
32162: ARRAY
32163: PUSH
32164: LD_INT 3
32166: ARRAY
32167: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32168: LD_ADDR_VAR 0 7
32172: PUSH
32173: LD_VAR 0 3
32177: PUSH
32178: LD_VAR 0 1
32182: ARRAY
32183: PUSH
32184: LD_INT 4
32186: ARRAY
32187: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32188: LD_ADDR_VAR 0 9
32192: PUSH
32193: LD_VAR 0 6
32197: PPUSH
32198: LD_VAR 0 7
32202: PPUSH
32203: LD_INT 16
32205: PPUSH
32206: CALL 76856 0 3
32210: ST_TO_ADDR
// if not cratesNearbyPoint then
32211: LD_VAR 0 9
32215: NOT
32216: IFFALSE 32222
// exit ;
32218: POP
32219: POP
32220: GO 32679
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32222: LD_ADDR_VAR 0 4
32226: PUSH
32227: LD_INT 22
32229: PUSH
32230: LD_VAR 0 5
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: LD_INT 60
32244: PUSH
32245: EMPTY
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 91
32254: PUSH
32255: LD_VAR 0 8
32259: PUSH
32260: LD_INT 6
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: LD_INT 25
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 25
32283: PUSH
32284: LD_INT 16
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: PPUSH
32302: CALL_OW 69
32306: PUSH
32307: LD_VAR 0 8
32311: PPUSH
32312: CALL_OW 313
32316: PPUSH
32317: LD_INT 3
32319: PUSH
32320: LD_INT 60
32322: PUSH
32323: EMPTY
32324: LIST
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: LD_INT 25
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 25
32345: PUSH
32346: LD_INT 16
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PPUSH
32362: CALL_OW 72
32366: UNION
32367: ST_TO_ADDR
// if tmp then
32368: LD_VAR 0 4
32372: IFFALSE 32452
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32374: LD_ADDR_VAR 0 4
32378: PUSH
32379: LD_VAR 0 4
32383: PPUSH
32384: LD_INT 3
32386: PPUSH
32387: CALL 74825 0 2
32391: ST_TO_ADDR
// for j in tmp do
32392: LD_ADDR_VAR 0 2
32396: PUSH
32397: LD_VAR 0 4
32401: PUSH
32402: FOR_IN
32403: IFFALSE 32446
// begin if IsInUnit ( j ) then
32405: LD_VAR 0 2
32409: PPUSH
32410: CALL_OW 310
32414: IFFALSE 32425
// ComExit ( j ) ;
32416: LD_VAR 0 2
32420: PPUSH
32421: CALL 74908 0 1
// AddComCollect ( j , x , y ) ;
32425: LD_VAR 0 2
32429: PPUSH
32430: LD_VAR 0 6
32434: PPUSH
32435: LD_VAR 0 7
32439: PPUSH
32440: CALL_OW 177
// end ;
32444: GO 32402
32446: POP
32447: POP
// exit ;
32448: POP
32449: POP
32450: GO 32679
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32452: LD_ADDR_VAR 0 4
32456: PUSH
32457: LD_INT 22
32459: PUSH
32460: LD_VAR 0 5
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 91
32471: PUSH
32472: LD_VAR 0 8
32476: PUSH
32477: LD_INT 8
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 34
32490: PUSH
32491: LD_INT 12
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 34
32500: PUSH
32501: LD_INT 51
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 34
32510: PUSH
32511: LD_INT 32
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 34
32520: PUSH
32521: LD_INT 89
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: LIST
32539: PPUSH
32540: CALL_OW 69
32544: ST_TO_ADDR
// if tmp then
32545: LD_VAR 0 4
32549: IFFALSE 32675
// begin for j in tmp do
32551: LD_ADDR_VAR 0 2
32555: PUSH
32556: LD_VAR 0 4
32560: PUSH
32561: FOR_IN
32562: IFFALSE 32673
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32564: LD_VAR 0 2
32568: PPUSH
32569: CALL_OW 262
32573: PUSH
32574: LD_INT 3
32576: EQUAL
32577: PUSH
32578: LD_VAR 0 2
32582: PPUSH
32583: CALL_OW 261
32587: PUSH
32588: LD_INT 20
32590: GREATER
32591: OR
32592: PUSH
32593: LD_VAR 0 2
32597: PPUSH
32598: CALL_OW 314
32602: NOT
32603: AND
32604: PUSH
32605: LD_VAR 0 2
32609: PPUSH
32610: CALL_OW 263
32614: PUSH
32615: LD_INT 1
32617: NONEQUAL
32618: PUSH
32619: LD_VAR 0 2
32623: PPUSH
32624: CALL_OW 311
32628: OR
32629: AND
32630: IFFALSE 32671
// begin ComCollect ( j , x , y ) ;
32632: LD_VAR 0 2
32636: PPUSH
32637: LD_VAR 0 6
32641: PPUSH
32642: LD_VAR 0 7
32646: PPUSH
32647: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
32651: LD_VAR 0 2
32655: PPUSH
32656: LD_VAR 0 8
32660: PPUSH
32661: CALL_OW 172
// exit ;
32665: POP
32666: POP
32667: POP
32668: POP
32669: GO 32679
// end ;
32671: GO 32561
32673: POP
32674: POP
// end ; end ;
32675: GO 32050
32677: POP
32678: POP
// end ; end_of_file
32679: PPOPN 9
32681: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32682: LD_VAR 0 1
32686: PUSH
32687: LD_INT 200
32689: DOUBLE
32690: GREATEREQUAL
32691: IFFALSE 32699
32693: LD_INT 299
32695: DOUBLE
32696: LESSEQUAL
32697: IFTRUE 32701
32699: GO 32733
32701: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32702: LD_VAR 0 1
32706: PPUSH
32707: LD_VAR 0 2
32711: PPUSH
32712: LD_VAR 0 3
32716: PPUSH
32717: LD_VAR 0 4
32721: PPUSH
32722: LD_VAR 0 5
32726: PPUSH
32727: CALL 33221 0 5
32731: GO 32810
32733: LD_INT 300
32735: DOUBLE
32736: GREATEREQUAL
32737: IFFALSE 32745
32739: LD_INT 399
32741: DOUBLE
32742: LESSEQUAL
32743: IFTRUE 32747
32745: GO 32809
32747: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
32748: LD_VAR 0 1
32752: PPUSH
32753: LD_VAR 0 2
32757: PPUSH
32758: LD_VAR 0 3
32762: PPUSH
32763: LD_VAR 0 4
32767: PPUSH
32768: LD_VAR 0 5
32772: PPUSH
32773: LD_VAR 0 6
32777: PPUSH
32778: LD_VAR 0 7
32782: PPUSH
32783: LD_VAR 0 8
32787: PPUSH
32788: LD_VAR 0 9
32792: PPUSH
32793: LD_VAR 0 10
32797: PPUSH
32798: LD_VAR 0 11
32802: PPUSH
32803: CALL 29391 0 11
32807: GO 32810
32809: POP
// end ;
32810: PPOPN 11
32812: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
32813: LD_VAR 0 1
32817: PPUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: LD_VAR 0 3
32827: PPUSH
32828: LD_VAR 0 4
32832: PPUSH
32833: LD_VAR 0 5
32837: PPUSH
32838: CALL 32957 0 5
// end ; end_of_file
32842: PPOPN 5
32844: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32845: LD_INT 0
32847: PPUSH
32848: PPUSH
32849: PPUSH
32850: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32851: LD_VAR 0 1
32855: PPUSH
32856: CALL_OW 264
32860: PUSH
32861: LD_INT 91
32863: EQUAL
32864: IFFALSE 32936
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32866: LD_INT 68
32868: PPUSH
32869: LD_VAR 0 1
32873: PPUSH
32874: CALL_OW 255
32878: PPUSH
32879: CALL_OW 321
32883: PUSH
32884: LD_INT 2
32886: EQUAL
32887: IFFALSE 32899
// eff := 70 else
32889: LD_ADDR_VAR 0 4
32893: PUSH
32894: LD_INT 70
32896: ST_TO_ADDR
32897: GO 32907
// eff := 30 ;
32899: LD_ADDR_VAR 0 4
32903: PUSH
32904: LD_INT 30
32906: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32907: LD_VAR 0 1
32911: PPUSH
32912: CALL_OW 250
32916: PPUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 251
32926: PPUSH
32927: LD_VAR 0 4
32931: PPUSH
32932: CALL_OW 495
// end ; end ;
32936: LD_VAR 0 2
32940: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32941: LD_INT 0
32943: PPUSH
// end ;
32944: LD_VAR 0 4
32948: RET
// export function SOS_Command ( cmd ) ; begin
32949: LD_INT 0
32951: PPUSH
// end ;
32952: LD_VAR 0 2
32956: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32957: LD_INT 0
32959: PPUSH
// end ;
32960: LD_VAR 0 6
32964: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32965: LD_INT 0
32967: PPUSH
32968: PPUSH
// if not vehicle or not factory then
32969: LD_VAR 0 1
32973: NOT
32974: PUSH
32975: LD_VAR 0 2
32979: NOT
32980: OR
32981: IFFALSE 32985
// exit ;
32983: GO 33216
// if factoryWaypoints >= factory then
32985: LD_EXP 110
32989: PUSH
32990: LD_VAR 0 2
32994: GREATEREQUAL
32995: IFFALSE 33216
// if factoryWaypoints [ factory ] then
32997: LD_EXP 110
33001: PUSH
33002: LD_VAR 0 2
33006: ARRAY
33007: IFFALSE 33216
// begin if GetControl ( vehicle ) = control_manual then
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 263
33018: PUSH
33019: LD_INT 1
33021: EQUAL
33022: IFFALSE 33103
// begin driver := IsDrivenBy ( vehicle ) ;
33024: LD_ADDR_VAR 0 4
33028: PUSH
33029: LD_VAR 0 1
33033: PPUSH
33034: CALL_OW 311
33038: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33039: LD_VAR 0 4
33043: PPUSH
33044: LD_EXP 110
33048: PUSH
33049: LD_VAR 0 2
33053: ARRAY
33054: PUSH
33055: LD_INT 3
33057: ARRAY
33058: PPUSH
33059: LD_EXP 110
33063: PUSH
33064: LD_VAR 0 2
33068: ARRAY
33069: PUSH
33070: LD_INT 4
33072: ARRAY
33073: PPUSH
33074: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33078: LD_VAR 0 4
33082: PPUSH
33083: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33087: LD_VAR 0 4
33091: PPUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: CALL_OW 180
// end else
33101: GO 33216
// if GetControl ( vehicle ) = control_remote then
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 263
33112: PUSH
33113: LD_INT 2
33115: EQUAL
33116: IFFALSE 33177
// begin wait ( 0 0$2 ) ;
33118: LD_INT 70
33120: PPUSH
33121: CALL_OW 67
// if Connect ( vehicle ) then
33125: LD_VAR 0 1
33129: PPUSH
33130: CALL 45240 0 1
33134: IFFALSE 33175
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33136: LD_VAR 0 1
33140: PPUSH
33141: LD_EXP 110
33145: PUSH
33146: LD_VAR 0 2
33150: ARRAY
33151: PUSH
33152: LD_INT 3
33154: ARRAY
33155: PPUSH
33156: LD_EXP 110
33160: PUSH
33161: LD_VAR 0 2
33165: ARRAY
33166: PUSH
33167: LD_INT 4
33169: ARRAY
33170: PPUSH
33171: CALL_OW 171
// end else
33175: GO 33216
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33177: LD_VAR 0 1
33181: PPUSH
33182: LD_EXP 110
33186: PUSH
33187: LD_VAR 0 2
33191: ARRAY
33192: PUSH
33193: LD_INT 3
33195: ARRAY
33196: PPUSH
33197: LD_EXP 110
33201: PUSH
33202: LD_VAR 0 2
33206: ARRAY
33207: PUSH
33208: LD_INT 4
33210: ARRAY
33211: PPUSH
33212: CALL_OW 171
// end ; end ;
33216: LD_VAR 0 3
33220: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33221: LD_INT 0
33223: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33224: LD_VAR 0 1
33228: PUSH
33229: LD_INT 250
33231: EQUAL
33232: PUSH
33233: LD_VAR 0 2
33237: PPUSH
33238: CALL_OW 264
33242: PUSH
33243: LD_INT 81
33245: EQUAL
33246: AND
33247: IFFALSE 33268
// MinerPlaceMine ( unit , x , y ) ;
33249: LD_VAR 0 2
33253: PPUSH
33254: LD_VAR 0 4
33258: PPUSH
33259: LD_VAR 0 5
33263: PPUSH
33264: CALL 35653 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33268: LD_VAR 0 1
33272: PUSH
33273: LD_INT 251
33275: EQUAL
33276: PUSH
33277: LD_VAR 0 2
33281: PPUSH
33282: CALL_OW 264
33286: PUSH
33287: LD_INT 81
33289: EQUAL
33290: AND
33291: IFFALSE 33312
// MinerDetonateMine ( unit , x , y ) ;
33293: LD_VAR 0 2
33297: PPUSH
33298: LD_VAR 0 4
33302: PPUSH
33303: LD_VAR 0 5
33307: PPUSH
33308: CALL 35928 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33312: LD_VAR 0 1
33316: PUSH
33317: LD_INT 252
33319: EQUAL
33320: PUSH
33321: LD_VAR 0 2
33325: PPUSH
33326: CALL_OW 264
33330: PUSH
33331: LD_INT 81
33333: EQUAL
33334: AND
33335: IFFALSE 33356
// MinerCreateMinefield ( unit , x , y ) ;
33337: LD_VAR 0 2
33341: PPUSH
33342: LD_VAR 0 4
33346: PPUSH
33347: LD_VAR 0 5
33351: PPUSH
33352: CALL 36345 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33356: LD_VAR 0 1
33360: PUSH
33361: LD_INT 253
33363: EQUAL
33364: PUSH
33365: LD_VAR 0 2
33369: PPUSH
33370: CALL_OW 257
33374: PUSH
33375: LD_INT 5
33377: EQUAL
33378: AND
33379: IFFALSE 33400
// ComBinocular ( unit , x , y ) ;
33381: LD_VAR 0 2
33385: PPUSH
33386: LD_VAR 0 4
33390: PPUSH
33391: LD_VAR 0 5
33395: PPUSH
33396: CALL 36714 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33400: LD_VAR 0 1
33404: PUSH
33405: LD_INT 254
33407: EQUAL
33408: PUSH
33409: LD_VAR 0 2
33413: PPUSH
33414: CALL_OW 264
33418: PUSH
33419: LD_INT 99
33421: EQUAL
33422: AND
33423: PUSH
33424: LD_VAR 0 3
33428: PPUSH
33429: CALL_OW 263
33433: PUSH
33434: LD_INT 3
33436: EQUAL
33437: AND
33438: IFFALSE 33454
// HackDestroyVehicle ( unit , selectedUnit ) ;
33440: LD_VAR 0 2
33444: PPUSH
33445: LD_VAR 0 3
33449: PPUSH
33450: CALL 35017 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33454: LD_VAR 0 1
33458: PUSH
33459: LD_INT 255
33461: EQUAL
33462: PUSH
33463: LD_VAR 0 2
33467: PPUSH
33468: CALL_OW 264
33472: PUSH
33473: LD_INT 14
33475: PUSH
33476: LD_INT 53
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: IN
33483: AND
33484: PUSH
33485: LD_VAR 0 4
33489: PPUSH
33490: LD_VAR 0 5
33494: PPUSH
33495: CALL_OW 488
33499: AND
33500: IFFALSE 33524
// CutTreeXYR ( unit , x , y , 12 ) ;
33502: LD_VAR 0 2
33506: PPUSH
33507: LD_VAR 0 4
33511: PPUSH
33512: LD_VAR 0 5
33516: PPUSH
33517: LD_INT 12
33519: PPUSH
33520: CALL 33587 0 4
// if cmd = 256 then
33524: LD_VAR 0 1
33528: PUSH
33529: LD_INT 256
33531: EQUAL
33532: IFFALSE 33553
// SetFactoryWaypoint ( unit , x , y ) ;
33534: LD_VAR 0 2
33538: PPUSH
33539: LD_VAR 0 4
33543: PPUSH
33544: LD_VAR 0 5
33548: PPUSH
33549: CALL 31371 0 3
// if cmd = 257 then
33553: LD_VAR 0 1
33557: PUSH
33558: LD_INT 257
33560: EQUAL
33561: IFFALSE 33582
// SetWarehouseGatheringPoint ( unit , x , y ) ;
33563: LD_VAR 0 2
33567: PPUSH
33568: LD_VAR 0 4
33572: PPUSH
33573: LD_VAR 0 5
33577: PPUSH
33578: CALL 31733 0 3
// end ;
33582: LD_VAR 0 6
33586: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33587: LD_INT 0
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33598: LD_VAR 0 1
33602: NOT
33603: PUSH
33604: LD_VAR 0 2
33608: PPUSH
33609: LD_VAR 0 3
33613: PPUSH
33614: CALL_OW 488
33618: NOT
33619: OR
33620: PUSH
33621: LD_VAR 0 4
33625: NOT
33626: OR
33627: IFFALSE 33631
// exit ;
33629: GO 33971
// list := [ ] ;
33631: LD_ADDR_VAR 0 13
33635: PUSH
33636: EMPTY
33637: ST_TO_ADDR
// if x - r < 0 then
33638: LD_VAR 0 2
33642: PUSH
33643: LD_VAR 0 4
33647: MINUS
33648: PUSH
33649: LD_INT 0
33651: LESS
33652: IFFALSE 33664
// min_x := 0 else
33654: LD_ADDR_VAR 0 7
33658: PUSH
33659: LD_INT 0
33661: ST_TO_ADDR
33662: GO 33680
// min_x := x - r ;
33664: LD_ADDR_VAR 0 7
33668: PUSH
33669: LD_VAR 0 2
33673: PUSH
33674: LD_VAR 0 4
33678: MINUS
33679: ST_TO_ADDR
// if y - r < 0 then
33680: LD_VAR 0 3
33684: PUSH
33685: LD_VAR 0 4
33689: MINUS
33690: PUSH
33691: LD_INT 0
33693: LESS
33694: IFFALSE 33706
// min_y := 0 else
33696: LD_ADDR_VAR 0 8
33700: PUSH
33701: LD_INT 0
33703: ST_TO_ADDR
33704: GO 33722
// min_y := y - r ;
33706: LD_ADDR_VAR 0 8
33710: PUSH
33711: LD_VAR 0 3
33715: PUSH
33716: LD_VAR 0 4
33720: MINUS
33721: ST_TO_ADDR
// max_x := x + r ;
33722: LD_ADDR_VAR 0 9
33726: PUSH
33727: LD_VAR 0 2
33731: PUSH
33732: LD_VAR 0 4
33736: PLUS
33737: ST_TO_ADDR
// max_y := y + r ;
33738: LD_ADDR_VAR 0 10
33742: PUSH
33743: LD_VAR 0 3
33747: PUSH
33748: LD_VAR 0 4
33752: PLUS
33753: ST_TO_ADDR
// for _x = min_x to max_x do
33754: LD_ADDR_VAR 0 11
33758: PUSH
33759: DOUBLE
33760: LD_VAR 0 7
33764: DEC
33765: ST_TO_ADDR
33766: LD_VAR 0 9
33770: PUSH
33771: FOR_TO
33772: IFFALSE 33889
// for _y = min_y to max_y do
33774: LD_ADDR_VAR 0 12
33778: PUSH
33779: DOUBLE
33780: LD_VAR 0 8
33784: DEC
33785: ST_TO_ADDR
33786: LD_VAR 0 10
33790: PUSH
33791: FOR_TO
33792: IFFALSE 33885
// begin if not ValidHex ( _x , _y ) then
33794: LD_VAR 0 11
33798: PPUSH
33799: LD_VAR 0 12
33803: PPUSH
33804: CALL_OW 488
33808: NOT
33809: IFFALSE 33813
// continue ;
33811: GO 33791
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33813: LD_VAR 0 11
33817: PPUSH
33818: LD_VAR 0 12
33822: PPUSH
33823: CALL_OW 351
33827: PUSH
33828: LD_VAR 0 11
33832: PPUSH
33833: LD_VAR 0 12
33837: PPUSH
33838: CALL_OW 554
33842: AND
33843: IFFALSE 33883
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33845: LD_ADDR_VAR 0 13
33849: PUSH
33850: LD_VAR 0 13
33854: PPUSH
33855: LD_VAR 0 13
33859: PUSH
33860: LD_INT 1
33862: PLUS
33863: PPUSH
33864: LD_VAR 0 11
33868: PUSH
33869: LD_VAR 0 12
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PPUSH
33878: CALL_OW 2
33882: ST_TO_ADDR
// end ;
33883: GO 33791
33885: POP
33886: POP
33887: GO 33771
33889: POP
33890: POP
// if not list then
33891: LD_VAR 0 13
33895: NOT
33896: IFFALSE 33900
// exit ;
33898: GO 33971
// for i in list do
33900: LD_ADDR_VAR 0 6
33904: PUSH
33905: LD_VAR 0 13
33909: PUSH
33910: FOR_IN
33911: IFFALSE 33969
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33913: LD_VAR 0 1
33917: PPUSH
33918: LD_STRING M
33920: PUSH
33921: LD_VAR 0 6
33925: PUSH
33926: LD_INT 1
33928: ARRAY
33929: PUSH
33930: LD_VAR 0 6
33934: PUSH
33935: LD_INT 2
33937: ARRAY
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: PUSH
33960: EMPTY
33961: LIST
33962: PPUSH
33963: CALL_OW 447
33967: GO 33910
33969: POP
33970: POP
// end ;
33971: LD_VAR 0 5
33975: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33976: LD_EXP 113
33980: NOT
33981: IFFALSE 34031
33983: GO 33985
33985: DISABLE
// begin initHack := true ;
33986: LD_ADDR_EXP 113
33990: PUSH
33991: LD_INT 1
33993: ST_TO_ADDR
// hackTanks := [ ] ;
33994: LD_ADDR_EXP 114
33998: PUSH
33999: EMPTY
34000: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34001: LD_ADDR_EXP 115
34005: PUSH
34006: EMPTY
34007: ST_TO_ADDR
// hackLimit := 3 ;
34008: LD_ADDR_EXP 116
34012: PUSH
34013: LD_INT 3
34015: ST_TO_ADDR
// hackDist := 12 ;
34016: LD_ADDR_EXP 117
34020: PUSH
34021: LD_INT 12
34023: ST_TO_ADDR
// hackCounter := [ ] ;
34024: LD_ADDR_EXP 118
34028: PUSH
34029: EMPTY
34030: ST_TO_ADDR
// end ;
34031: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34032: LD_EXP 113
34036: PUSH
34037: LD_INT 34
34039: PUSH
34040: LD_INT 99
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PPUSH
34047: CALL_OW 69
34051: AND
34052: IFFALSE 34305
34054: GO 34056
34056: DISABLE
34057: LD_INT 0
34059: PPUSH
34060: PPUSH
// begin enable ;
34061: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34062: LD_ADDR_VAR 0 1
34066: PUSH
34067: LD_INT 34
34069: PUSH
34070: LD_INT 99
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PPUSH
34077: CALL_OW 69
34081: PUSH
34082: FOR_IN
34083: IFFALSE 34303
// begin if not i in hackTanks then
34085: LD_VAR 0 1
34089: PUSH
34090: LD_EXP 114
34094: IN
34095: NOT
34096: IFFALSE 34179
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34098: LD_ADDR_EXP 114
34102: PUSH
34103: LD_EXP 114
34107: PPUSH
34108: LD_EXP 114
34112: PUSH
34113: LD_INT 1
34115: PLUS
34116: PPUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: CALL_OW 1
34126: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34127: LD_ADDR_EXP 115
34131: PUSH
34132: LD_EXP 115
34136: PPUSH
34137: LD_EXP 115
34141: PUSH
34142: LD_INT 1
34144: PLUS
34145: PPUSH
34146: EMPTY
34147: PPUSH
34148: CALL_OW 1
34152: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34153: LD_ADDR_EXP 118
34157: PUSH
34158: LD_EXP 118
34162: PPUSH
34163: LD_EXP 118
34167: PUSH
34168: LD_INT 1
34170: PLUS
34171: PPUSH
34172: EMPTY
34173: PPUSH
34174: CALL_OW 1
34178: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 302
34188: NOT
34189: IFFALSE 34202
// begin HackUnlinkAll ( i ) ;
34191: LD_VAR 0 1
34195: PPUSH
34196: CALL 34308 0 1
// continue ;
34200: GO 34082
// end ; HackCheckCapturedStatus ( i ) ;
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL 34751 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34211: LD_ADDR_VAR 0 2
34215: PUSH
34216: LD_INT 81
34218: PUSH
34219: LD_VAR 0 1
34223: PPUSH
34224: CALL_OW 255
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 33
34235: PUSH
34236: LD_INT 3
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 91
34245: PUSH
34246: LD_VAR 0 1
34250: PUSH
34251: LD_EXP 117
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 50
34263: PUSH
34264: EMPTY
34265: LIST
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: PPUSH
34273: CALL_OW 69
34277: ST_TO_ADDR
// if not tmp then
34278: LD_VAR 0 2
34282: NOT
34283: IFFALSE 34287
// continue ;
34285: GO 34082
// HackLink ( i , tmp ) ;
34287: LD_VAR 0 1
34291: PPUSH
34292: LD_VAR 0 2
34296: PPUSH
34297: CALL 34444 0 2
// end ;
34301: GO 34082
34303: POP
34304: POP
// end ;
34305: PPOPN 2
34307: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34308: LD_INT 0
34310: PPUSH
34311: PPUSH
34312: PPUSH
// if not hack in hackTanks then
34313: LD_VAR 0 1
34317: PUSH
34318: LD_EXP 114
34322: IN
34323: NOT
34324: IFFALSE 34328
// exit ;
34326: GO 34439
// index := GetElementIndex ( hackTanks , hack ) ;
34328: LD_ADDR_VAR 0 4
34332: PUSH
34333: LD_EXP 114
34337: PPUSH
34338: LD_VAR 0 1
34342: PPUSH
34343: CALL 42056 0 2
34347: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34348: LD_EXP 115
34352: PUSH
34353: LD_VAR 0 4
34357: ARRAY
34358: IFFALSE 34439
// begin for i in hackTanksCaptured [ index ] do
34360: LD_ADDR_VAR 0 3
34364: PUSH
34365: LD_EXP 115
34369: PUSH
34370: LD_VAR 0 4
34374: ARRAY
34375: PUSH
34376: FOR_IN
34377: IFFALSE 34403
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34379: LD_VAR 0 3
34383: PUSH
34384: LD_INT 1
34386: ARRAY
34387: PPUSH
34388: LD_VAR 0 3
34392: PUSH
34393: LD_INT 2
34395: ARRAY
34396: PPUSH
34397: CALL_OW 235
34401: GO 34376
34403: POP
34404: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34405: LD_ADDR_EXP 115
34409: PUSH
34410: LD_EXP 115
34414: PPUSH
34415: LD_VAR 0 4
34419: PPUSH
34420: EMPTY
34421: PPUSH
34422: CALL_OW 1
34426: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34427: LD_VAR 0 1
34431: PPUSH
34432: LD_INT 0
34434: PPUSH
34435: CALL_OW 505
// end ; end ;
34439: LD_VAR 0 2
34443: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34444: LD_INT 0
34446: PPUSH
34447: PPUSH
34448: PPUSH
// if not hack in hackTanks or not vehicles then
34449: LD_VAR 0 1
34453: PUSH
34454: LD_EXP 114
34458: IN
34459: NOT
34460: PUSH
34461: LD_VAR 0 2
34465: NOT
34466: OR
34467: IFFALSE 34471
// exit ;
34469: GO 34746
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34471: LD_ADDR_VAR 0 2
34475: PUSH
34476: LD_VAR 0 1
34480: PPUSH
34481: LD_VAR 0 2
34485: PPUSH
34486: LD_INT 1
34488: PPUSH
34489: LD_INT 1
34491: PPUSH
34492: CALL 42706 0 4
34496: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34497: LD_ADDR_VAR 0 5
34501: PUSH
34502: LD_EXP 114
34506: PPUSH
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL 42056 0 2
34516: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34517: LD_EXP 115
34521: PUSH
34522: LD_VAR 0 5
34526: ARRAY
34527: PUSH
34528: LD_EXP 116
34532: LESS
34533: IFFALSE 34722
// begin for i := 1 to vehicles do
34535: LD_ADDR_VAR 0 4
34539: PUSH
34540: DOUBLE
34541: LD_INT 1
34543: DEC
34544: ST_TO_ADDR
34545: LD_VAR 0 2
34549: PUSH
34550: FOR_TO
34551: IFFALSE 34720
// begin if hackTanksCaptured [ index ] = hackLimit then
34553: LD_EXP 115
34557: PUSH
34558: LD_VAR 0 5
34562: ARRAY
34563: PUSH
34564: LD_EXP 116
34568: EQUAL
34569: IFFALSE 34573
// break ;
34571: GO 34720
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34573: LD_ADDR_EXP 118
34577: PUSH
34578: LD_EXP 118
34582: PPUSH
34583: LD_VAR 0 5
34587: PPUSH
34588: LD_EXP 118
34592: PUSH
34593: LD_VAR 0 5
34597: ARRAY
34598: PUSH
34599: LD_INT 1
34601: PLUS
34602: PPUSH
34603: CALL_OW 1
34607: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34608: LD_ADDR_EXP 115
34612: PUSH
34613: LD_EXP 115
34617: PPUSH
34618: LD_VAR 0 5
34622: PUSH
34623: LD_EXP 115
34627: PUSH
34628: LD_VAR 0 5
34632: ARRAY
34633: PUSH
34634: LD_INT 1
34636: PLUS
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PPUSH
34642: LD_VAR 0 2
34646: PUSH
34647: LD_VAR 0 4
34651: ARRAY
34652: PUSH
34653: LD_VAR 0 2
34657: PUSH
34658: LD_VAR 0 4
34662: ARRAY
34663: PPUSH
34664: CALL_OW 255
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PPUSH
34673: CALL 42271 0 3
34677: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34678: LD_VAR 0 2
34682: PUSH
34683: LD_VAR 0 4
34687: ARRAY
34688: PPUSH
34689: LD_VAR 0 1
34693: PPUSH
34694: CALL_OW 255
34698: PPUSH
34699: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34703: LD_VAR 0 2
34707: PUSH
34708: LD_VAR 0 4
34712: ARRAY
34713: PPUSH
34714: CALL_OW 141
// end ;
34718: GO 34550
34720: POP
34721: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34722: LD_VAR 0 1
34726: PPUSH
34727: LD_EXP 115
34731: PUSH
34732: LD_VAR 0 5
34736: ARRAY
34737: PUSH
34738: LD_INT 0
34740: PLUS
34741: PPUSH
34742: CALL_OW 505
// end ;
34746: LD_VAR 0 3
34750: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34751: LD_INT 0
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
// if not hack in hackTanks then
34757: LD_VAR 0 1
34761: PUSH
34762: LD_EXP 114
34766: IN
34767: NOT
34768: IFFALSE 34772
// exit ;
34770: GO 35012
// index := GetElementIndex ( hackTanks , hack ) ;
34772: LD_ADDR_VAR 0 4
34776: PUSH
34777: LD_EXP 114
34781: PPUSH
34782: LD_VAR 0 1
34786: PPUSH
34787: CALL 42056 0 2
34791: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34792: LD_ADDR_VAR 0 3
34796: PUSH
34797: DOUBLE
34798: LD_EXP 115
34802: PUSH
34803: LD_VAR 0 4
34807: ARRAY
34808: INC
34809: ST_TO_ADDR
34810: LD_INT 1
34812: PUSH
34813: FOR_DOWNTO
34814: IFFALSE 34986
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34816: LD_ADDR_VAR 0 5
34820: PUSH
34821: LD_EXP 115
34825: PUSH
34826: LD_VAR 0 4
34830: ARRAY
34831: PUSH
34832: LD_VAR 0 3
34836: ARRAY
34837: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34838: LD_VAR 0 5
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: PPUSH
34847: CALL_OW 302
34851: NOT
34852: PUSH
34853: LD_VAR 0 5
34857: PUSH
34858: LD_INT 1
34860: ARRAY
34861: PPUSH
34862: CALL_OW 255
34866: PUSH
34867: LD_VAR 0 1
34871: PPUSH
34872: CALL_OW 255
34876: NONEQUAL
34877: OR
34878: IFFALSE 34984
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34880: LD_VAR 0 5
34884: PUSH
34885: LD_INT 1
34887: ARRAY
34888: PPUSH
34889: CALL_OW 305
34893: PUSH
34894: LD_VAR 0 5
34898: PUSH
34899: LD_INT 1
34901: ARRAY
34902: PPUSH
34903: CALL_OW 255
34907: PUSH
34908: LD_VAR 0 1
34912: PPUSH
34913: CALL_OW 255
34917: EQUAL
34918: AND
34919: IFFALSE 34943
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34921: LD_VAR 0 5
34925: PUSH
34926: LD_INT 1
34928: ARRAY
34929: PPUSH
34930: LD_VAR 0 5
34934: PUSH
34935: LD_INT 2
34937: ARRAY
34938: PPUSH
34939: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34943: LD_ADDR_EXP 115
34947: PUSH
34948: LD_EXP 115
34952: PPUSH
34953: LD_VAR 0 4
34957: PPUSH
34958: LD_EXP 115
34962: PUSH
34963: LD_VAR 0 4
34967: ARRAY
34968: PPUSH
34969: LD_VAR 0 3
34973: PPUSH
34974: CALL_OW 3
34978: PPUSH
34979: CALL_OW 1
34983: ST_TO_ADDR
// end ; end ;
34984: GO 34813
34986: POP
34987: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34988: LD_VAR 0 1
34992: PPUSH
34993: LD_EXP 115
34997: PUSH
34998: LD_VAR 0 4
35002: ARRAY
35003: PUSH
35004: LD_INT 0
35006: PLUS
35007: PPUSH
35008: CALL_OW 505
// end ;
35012: LD_VAR 0 2
35016: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35017: LD_INT 0
35019: PPUSH
35020: PPUSH
35021: PPUSH
35022: PPUSH
// if not hack in hackTanks then
35023: LD_VAR 0 1
35027: PUSH
35028: LD_EXP 114
35032: IN
35033: NOT
35034: IFFALSE 35038
// exit ;
35036: GO 35123
// index := GetElementIndex ( hackTanks , hack ) ;
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: LD_EXP 114
35047: PPUSH
35048: LD_VAR 0 1
35052: PPUSH
35053: CALL 42056 0 2
35057: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35058: LD_ADDR_VAR 0 4
35062: PUSH
35063: DOUBLE
35064: LD_INT 1
35066: DEC
35067: ST_TO_ADDR
35068: LD_EXP 115
35072: PUSH
35073: LD_VAR 0 5
35077: ARRAY
35078: PUSH
35079: FOR_TO
35080: IFFALSE 35121
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35082: LD_EXP 115
35086: PUSH
35087: LD_VAR 0 5
35091: ARRAY
35092: PUSH
35093: LD_VAR 0 4
35097: ARRAY
35098: PUSH
35099: LD_INT 1
35101: ARRAY
35102: PUSH
35103: LD_VAR 0 2
35107: EQUAL
35108: IFFALSE 35119
// KillUnit ( vehicle ) ;
35110: LD_VAR 0 2
35114: PPUSH
35115: CALL_OW 66
35119: GO 35079
35121: POP
35122: POP
// end ;
35123: LD_VAR 0 3
35127: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35128: LD_EXP 119
35132: NOT
35133: IFFALSE 35168
35135: GO 35137
35137: DISABLE
// begin initMiner := true ;
35138: LD_ADDR_EXP 119
35142: PUSH
35143: LD_INT 1
35145: ST_TO_ADDR
// minersList := [ ] ;
35146: LD_ADDR_EXP 120
35150: PUSH
35151: EMPTY
35152: ST_TO_ADDR
// minerMinesList := [ ] ;
35153: LD_ADDR_EXP 121
35157: PUSH
35158: EMPTY
35159: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35160: LD_ADDR_EXP 122
35164: PUSH
35165: LD_INT 5
35167: ST_TO_ADDR
// end ;
35168: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35169: LD_EXP 119
35173: PUSH
35174: LD_INT 34
35176: PUSH
35177: LD_INT 81
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PPUSH
35184: CALL_OW 69
35188: AND
35189: IFFALSE 35650
35191: GO 35193
35193: DISABLE
35194: LD_INT 0
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
// begin enable ;
35200: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35201: LD_ADDR_VAR 0 1
35205: PUSH
35206: LD_INT 34
35208: PUSH
35209: LD_INT 81
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PPUSH
35216: CALL_OW 69
35220: PUSH
35221: FOR_IN
35222: IFFALSE 35294
// begin if not i in minersList then
35224: LD_VAR 0 1
35228: PUSH
35229: LD_EXP 120
35233: IN
35234: NOT
35235: IFFALSE 35292
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35237: LD_ADDR_EXP 120
35241: PUSH
35242: LD_EXP 120
35246: PPUSH
35247: LD_EXP 120
35251: PUSH
35252: LD_INT 1
35254: PLUS
35255: PPUSH
35256: LD_VAR 0 1
35260: PPUSH
35261: CALL_OW 1
35265: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35266: LD_ADDR_EXP 121
35270: PUSH
35271: LD_EXP 121
35275: PPUSH
35276: LD_EXP 121
35280: PUSH
35281: LD_INT 1
35283: PLUS
35284: PPUSH
35285: EMPTY
35286: PPUSH
35287: CALL_OW 1
35291: ST_TO_ADDR
// end end ;
35292: GO 35221
35294: POP
35295: POP
// for i := minerMinesList downto 1 do
35296: LD_ADDR_VAR 0 1
35300: PUSH
35301: DOUBLE
35302: LD_EXP 121
35306: INC
35307: ST_TO_ADDR
35308: LD_INT 1
35310: PUSH
35311: FOR_DOWNTO
35312: IFFALSE 35648
// begin if IsLive ( minersList [ i ] ) then
35314: LD_EXP 120
35318: PUSH
35319: LD_VAR 0 1
35323: ARRAY
35324: PPUSH
35325: CALL_OW 300
35329: IFFALSE 35357
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35331: LD_EXP 120
35335: PUSH
35336: LD_VAR 0 1
35340: ARRAY
35341: PPUSH
35342: LD_EXP 121
35346: PUSH
35347: LD_VAR 0 1
35351: ARRAY
35352: PPUSH
35353: CALL_OW 505
// if not minerMinesList [ i ] then
35357: LD_EXP 121
35361: PUSH
35362: LD_VAR 0 1
35366: ARRAY
35367: NOT
35368: IFFALSE 35372
// continue ;
35370: GO 35311
// for j := minerMinesList [ i ] downto 1 do
35372: LD_ADDR_VAR 0 2
35376: PUSH
35377: DOUBLE
35378: LD_EXP 121
35382: PUSH
35383: LD_VAR 0 1
35387: ARRAY
35388: INC
35389: ST_TO_ADDR
35390: LD_INT 1
35392: PUSH
35393: FOR_DOWNTO
35394: IFFALSE 35644
// begin side := GetSide ( minersList [ i ] ) ;
35396: LD_ADDR_VAR 0 3
35400: PUSH
35401: LD_EXP 120
35405: PUSH
35406: LD_VAR 0 1
35410: ARRAY
35411: PPUSH
35412: CALL_OW 255
35416: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35417: LD_ADDR_VAR 0 4
35421: PUSH
35422: LD_EXP 121
35426: PUSH
35427: LD_VAR 0 1
35431: ARRAY
35432: PUSH
35433: LD_VAR 0 2
35437: ARRAY
35438: PUSH
35439: LD_INT 1
35441: ARRAY
35442: PPUSH
35443: LD_EXP 121
35447: PUSH
35448: LD_VAR 0 1
35452: ARRAY
35453: PUSH
35454: LD_VAR 0 2
35458: ARRAY
35459: PUSH
35460: LD_INT 2
35462: ARRAY
35463: PPUSH
35464: CALL_OW 428
35468: ST_TO_ADDR
// if not tmp then
35469: LD_VAR 0 4
35473: NOT
35474: IFFALSE 35478
// continue ;
35476: GO 35393
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35478: LD_VAR 0 4
35482: PUSH
35483: LD_INT 81
35485: PUSH
35486: LD_VAR 0 3
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PPUSH
35495: CALL_OW 69
35499: IN
35500: PUSH
35501: LD_EXP 121
35505: PUSH
35506: LD_VAR 0 1
35510: ARRAY
35511: PUSH
35512: LD_VAR 0 2
35516: ARRAY
35517: PUSH
35518: LD_INT 1
35520: ARRAY
35521: PPUSH
35522: LD_EXP 121
35526: PUSH
35527: LD_VAR 0 1
35531: ARRAY
35532: PUSH
35533: LD_VAR 0 2
35537: ARRAY
35538: PUSH
35539: LD_INT 2
35541: ARRAY
35542: PPUSH
35543: CALL_OW 458
35547: AND
35548: IFFALSE 35642
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35550: LD_EXP 121
35554: PUSH
35555: LD_VAR 0 1
35559: ARRAY
35560: PUSH
35561: LD_VAR 0 2
35565: ARRAY
35566: PUSH
35567: LD_INT 1
35569: ARRAY
35570: PPUSH
35571: LD_EXP 121
35575: PUSH
35576: LD_VAR 0 1
35580: ARRAY
35581: PUSH
35582: LD_VAR 0 2
35586: ARRAY
35587: PUSH
35588: LD_INT 2
35590: ARRAY
35591: PPUSH
35592: LD_VAR 0 3
35596: PPUSH
35597: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35601: LD_ADDR_EXP 121
35605: PUSH
35606: LD_EXP 121
35610: PPUSH
35611: LD_VAR 0 1
35615: PPUSH
35616: LD_EXP 121
35620: PUSH
35621: LD_VAR 0 1
35625: ARRAY
35626: PPUSH
35627: LD_VAR 0 2
35631: PPUSH
35632: CALL_OW 3
35636: PPUSH
35637: CALL_OW 1
35641: ST_TO_ADDR
// end ; end ;
35642: GO 35393
35644: POP
35645: POP
// end ;
35646: GO 35311
35648: POP
35649: POP
// end ;
35650: PPOPN 4
35652: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35653: LD_INT 0
35655: PPUSH
35656: PPUSH
// result := false ;
35657: LD_ADDR_VAR 0 4
35661: PUSH
35662: LD_INT 0
35664: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35665: LD_VAR 0 1
35669: PPUSH
35670: CALL_OW 264
35674: PUSH
35675: LD_INT 81
35677: EQUAL
35678: NOT
35679: IFFALSE 35683
// exit ;
35681: GO 35923
// index := GetElementIndex ( minersList , unit ) ;
35683: LD_ADDR_VAR 0 5
35687: PUSH
35688: LD_EXP 120
35692: PPUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL 42056 0 2
35702: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35703: LD_EXP 121
35707: PUSH
35708: LD_VAR 0 5
35712: ARRAY
35713: PUSH
35714: LD_EXP 122
35718: GREATEREQUAL
35719: IFFALSE 35723
// exit ;
35721: GO 35923
// ComMoveXY ( unit , x , y ) ;
35723: LD_VAR 0 1
35727: PPUSH
35728: LD_VAR 0 2
35732: PPUSH
35733: LD_VAR 0 3
35737: PPUSH
35738: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35742: LD_INT 35
35744: PPUSH
35745: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35749: LD_VAR 0 1
35753: PPUSH
35754: LD_VAR 0 2
35758: PPUSH
35759: LD_VAR 0 3
35763: PPUSH
35764: CALL 73319 0 3
35768: NOT
35769: PUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 314
35779: AND
35780: IFFALSE 35784
// exit ;
35782: GO 35923
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35784: LD_VAR 0 2
35788: PPUSH
35789: LD_VAR 0 3
35793: PPUSH
35794: CALL_OW 428
35798: PUSH
35799: LD_VAR 0 1
35803: EQUAL
35804: PUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: CALL_OW 314
35814: NOT
35815: AND
35816: IFFALSE 35742
// PlaySoundXY ( x , y , PlantMine ) ;
35818: LD_VAR 0 2
35822: PPUSH
35823: LD_VAR 0 3
35827: PPUSH
35828: LD_STRING PlantMine
35830: PPUSH
35831: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35835: LD_VAR 0 2
35839: PPUSH
35840: LD_VAR 0 3
35844: PPUSH
35845: LD_VAR 0 1
35849: PPUSH
35850: CALL_OW 255
35854: PPUSH
35855: LD_INT 0
35857: PPUSH
35858: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35862: LD_ADDR_EXP 121
35866: PUSH
35867: LD_EXP 121
35871: PPUSH
35872: LD_VAR 0 5
35876: PUSH
35877: LD_EXP 121
35881: PUSH
35882: LD_VAR 0 5
35886: ARRAY
35887: PUSH
35888: LD_INT 1
35890: PLUS
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PPUSH
35896: LD_VAR 0 2
35900: PUSH
35901: LD_VAR 0 3
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PPUSH
35910: CALL 42271 0 3
35914: ST_TO_ADDR
// result := true ;
35915: LD_ADDR_VAR 0 4
35919: PUSH
35920: LD_INT 1
35922: ST_TO_ADDR
// end ;
35923: LD_VAR 0 4
35927: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35928: LD_INT 0
35930: PPUSH
35931: PPUSH
35932: PPUSH
// if not unit in minersList then
35933: LD_VAR 0 1
35937: PUSH
35938: LD_EXP 120
35942: IN
35943: NOT
35944: IFFALSE 35948
// exit ;
35946: GO 36340
// index := GetElementIndex ( minersList , unit ) ;
35948: LD_ADDR_VAR 0 6
35952: PUSH
35953: LD_EXP 120
35957: PPUSH
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL 42056 0 2
35967: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35968: LD_ADDR_VAR 0 5
35972: PUSH
35973: DOUBLE
35974: LD_EXP 121
35978: PUSH
35979: LD_VAR 0 6
35983: ARRAY
35984: INC
35985: ST_TO_ADDR
35986: LD_INT 1
35988: PUSH
35989: FOR_DOWNTO
35990: IFFALSE 36151
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35992: LD_EXP 121
35996: PUSH
35997: LD_VAR 0 6
36001: ARRAY
36002: PUSH
36003: LD_VAR 0 5
36007: ARRAY
36008: PUSH
36009: LD_INT 1
36011: ARRAY
36012: PUSH
36013: LD_VAR 0 2
36017: EQUAL
36018: PUSH
36019: LD_EXP 121
36023: PUSH
36024: LD_VAR 0 6
36028: ARRAY
36029: PUSH
36030: LD_VAR 0 5
36034: ARRAY
36035: PUSH
36036: LD_INT 2
36038: ARRAY
36039: PUSH
36040: LD_VAR 0 3
36044: EQUAL
36045: AND
36046: IFFALSE 36149
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36048: LD_EXP 121
36052: PUSH
36053: LD_VAR 0 6
36057: ARRAY
36058: PUSH
36059: LD_VAR 0 5
36063: ARRAY
36064: PUSH
36065: LD_INT 1
36067: ARRAY
36068: PPUSH
36069: LD_EXP 121
36073: PUSH
36074: LD_VAR 0 6
36078: ARRAY
36079: PUSH
36080: LD_VAR 0 5
36084: ARRAY
36085: PUSH
36086: LD_INT 2
36088: ARRAY
36089: PPUSH
36090: LD_VAR 0 1
36094: PPUSH
36095: CALL_OW 255
36099: PPUSH
36100: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36104: LD_ADDR_EXP 121
36108: PUSH
36109: LD_EXP 121
36113: PPUSH
36114: LD_VAR 0 6
36118: PPUSH
36119: LD_EXP 121
36123: PUSH
36124: LD_VAR 0 6
36128: ARRAY
36129: PPUSH
36130: LD_VAR 0 5
36134: PPUSH
36135: CALL_OW 3
36139: PPUSH
36140: CALL_OW 1
36144: ST_TO_ADDR
// exit ;
36145: POP
36146: POP
36147: GO 36340
// end ; end ;
36149: GO 35989
36151: POP
36152: POP
// for i := minerMinesList [ index ] downto 1 do
36153: LD_ADDR_VAR 0 5
36157: PUSH
36158: DOUBLE
36159: LD_EXP 121
36163: PUSH
36164: LD_VAR 0 6
36168: ARRAY
36169: INC
36170: ST_TO_ADDR
36171: LD_INT 1
36173: PUSH
36174: FOR_DOWNTO
36175: IFFALSE 36338
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36177: LD_EXP 121
36181: PUSH
36182: LD_VAR 0 6
36186: ARRAY
36187: PUSH
36188: LD_VAR 0 5
36192: ARRAY
36193: PUSH
36194: LD_INT 1
36196: ARRAY
36197: PPUSH
36198: LD_EXP 121
36202: PUSH
36203: LD_VAR 0 6
36207: ARRAY
36208: PUSH
36209: LD_VAR 0 5
36213: ARRAY
36214: PUSH
36215: LD_INT 2
36217: ARRAY
36218: PPUSH
36219: LD_VAR 0 2
36223: PPUSH
36224: LD_VAR 0 3
36228: PPUSH
36229: CALL_OW 298
36233: PUSH
36234: LD_INT 6
36236: LESS
36237: IFFALSE 36336
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36239: LD_EXP 121
36243: PUSH
36244: LD_VAR 0 6
36248: ARRAY
36249: PUSH
36250: LD_VAR 0 5
36254: ARRAY
36255: PUSH
36256: LD_INT 1
36258: ARRAY
36259: PPUSH
36260: LD_EXP 121
36264: PUSH
36265: LD_VAR 0 6
36269: ARRAY
36270: PUSH
36271: LD_VAR 0 5
36275: ARRAY
36276: PUSH
36277: LD_INT 2
36279: ARRAY
36280: PPUSH
36281: LD_VAR 0 1
36285: PPUSH
36286: CALL_OW 255
36290: PPUSH
36291: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36295: LD_ADDR_EXP 121
36299: PUSH
36300: LD_EXP 121
36304: PPUSH
36305: LD_VAR 0 6
36309: PPUSH
36310: LD_EXP 121
36314: PUSH
36315: LD_VAR 0 6
36319: ARRAY
36320: PPUSH
36321: LD_VAR 0 5
36325: PPUSH
36326: CALL_OW 3
36330: PPUSH
36331: CALL_OW 1
36335: ST_TO_ADDR
// end ; end ;
36336: GO 36174
36338: POP
36339: POP
// end ;
36340: LD_VAR 0 4
36344: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36345: LD_INT 0
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 264
36365: PUSH
36366: LD_INT 81
36368: EQUAL
36369: NOT
36370: PUSH
36371: LD_VAR 0 1
36375: PUSH
36376: LD_EXP 120
36380: IN
36381: NOT
36382: OR
36383: IFFALSE 36387
// exit ;
36385: GO 36709
// index := GetElementIndex ( minersList , unit ) ;
36387: LD_ADDR_VAR 0 6
36391: PUSH
36392: LD_EXP 120
36396: PPUSH
36397: LD_VAR 0 1
36401: PPUSH
36402: CALL 42056 0 2
36406: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36407: LD_ADDR_VAR 0 8
36411: PUSH
36412: LD_EXP 122
36416: PUSH
36417: LD_EXP 121
36421: PUSH
36422: LD_VAR 0 6
36426: ARRAY
36427: MINUS
36428: ST_TO_ADDR
// if not minesFreeAmount then
36429: LD_VAR 0 8
36433: NOT
36434: IFFALSE 36438
// exit ;
36436: GO 36709
// tmp := [ ] ;
36438: LD_ADDR_VAR 0 7
36442: PUSH
36443: EMPTY
36444: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36445: LD_ADDR_VAR 0 5
36449: PUSH
36450: DOUBLE
36451: LD_INT 1
36453: DEC
36454: ST_TO_ADDR
36455: LD_VAR 0 8
36459: PUSH
36460: FOR_TO
36461: IFFALSE 36656
// begin _d := rand ( 0 , 5 ) ;
36463: LD_ADDR_VAR 0 11
36467: PUSH
36468: LD_INT 0
36470: PPUSH
36471: LD_INT 5
36473: PPUSH
36474: CALL_OW 12
36478: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36479: LD_ADDR_VAR 0 12
36483: PUSH
36484: LD_INT 2
36486: PPUSH
36487: LD_INT 6
36489: PPUSH
36490: CALL_OW 12
36494: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36495: LD_ADDR_VAR 0 9
36499: PUSH
36500: LD_VAR 0 2
36504: PPUSH
36505: LD_VAR 0 11
36509: PPUSH
36510: LD_VAR 0 12
36514: PPUSH
36515: CALL_OW 272
36519: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36520: LD_ADDR_VAR 0 10
36524: PUSH
36525: LD_VAR 0 3
36529: PPUSH
36530: LD_VAR 0 11
36534: PPUSH
36535: LD_VAR 0 12
36539: PPUSH
36540: CALL_OW 273
36544: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36545: LD_VAR 0 9
36549: PPUSH
36550: LD_VAR 0 10
36554: PPUSH
36555: CALL_OW 488
36559: PUSH
36560: LD_VAR 0 9
36564: PUSH
36565: LD_VAR 0 10
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_VAR 0 7
36578: IN
36579: NOT
36580: AND
36581: PUSH
36582: LD_VAR 0 9
36586: PPUSH
36587: LD_VAR 0 10
36591: PPUSH
36592: CALL_OW 458
36596: NOT
36597: AND
36598: IFFALSE 36640
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36600: LD_ADDR_VAR 0 7
36604: PUSH
36605: LD_VAR 0 7
36609: PPUSH
36610: LD_VAR 0 7
36614: PUSH
36615: LD_INT 1
36617: PLUS
36618: PPUSH
36619: LD_VAR 0 9
36623: PUSH
36624: LD_VAR 0 10
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PPUSH
36633: CALL_OW 1
36637: ST_TO_ADDR
36638: GO 36654
// i := i - 1 ;
36640: LD_ADDR_VAR 0 5
36644: PUSH
36645: LD_VAR 0 5
36649: PUSH
36650: LD_INT 1
36652: MINUS
36653: ST_TO_ADDR
// end ;
36654: GO 36460
36656: POP
36657: POP
// for i in tmp do
36658: LD_ADDR_VAR 0 5
36662: PUSH
36663: LD_VAR 0 7
36667: PUSH
36668: FOR_IN
36669: IFFALSE 36707
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36671: LD_VAR 0 1
36675: PPUSH
36676: LD_VAR 0 5
36680: PUSH
36681: LD_INT 1
36683: ARRAY
36684: PPUSH
36685: LD_VAR 0 5
36689: PUSH
36690: LD_INT 2
36692: ARRAY
36693: PPUSH
36694: CALL 35653 0 3
36698: NOT
36699: IFFALSE 36705
// exit ;
36701: POP
36702: POP
36703: GO 36709
36705: GO 36668
36707: POP
36708: POP
// end ;
36709: LD_VAR 0 4
36713: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36714: LD_INT 0
36716: PPUSH
36717: PPUSH
36718: PPUSH
36719: PPUSH
36720: PPUSH
36721: PPUSH
36722: PPUSH
// if not GetClass ( unit ) = class_sniper then
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 257
36732: PUSH
36733: LD_INT 5
36735: EQUAL
36736: NOT
36737: IFFALSE 36741
// exit ;
36739: GO 37129
// dist := 8 ;
36741: LD_ADDR_VAR 0 5
36745: PUSH
36746: LD_INT 8
36748: ST_TO_ADDR
// viewRange := 12 ;
36749: LD_ADDR_VAR 0 7
36753: PUSH
36754: LD_INT 12
36756: ST_TO_ADDR
// side := GetSide ( unit ) ;
36757: LD_ADDR_VAR 0 6
36761: PUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL_OW 255
36771: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36772: LD_INT 61
36774: PPUSH
36775: LD_VAR 0 6
36779: PPUSH
36780: CALL_OW 321
36784: PUSH
36785: LD_INT 2
36787: EQUAL
36788: IFFALSE 36798
// viewRange := 16 ;
36790: LD_ADDR_VAR 0 7
36794: PUSH
36795: LD_INT 16
36797: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36798: LD_VAR 0 1
36802: PPUSH
36803: LD_VAR 0 2
36807: PPUSH
36808: LD_VAR 0 3
36812: PPUSH
36813: CALL_OW 297
36817: PUSH
36818: LD_VAR 0 5
36822: GREATER
36823: IFFALSE 36902
// begin ComMoveXY ( unit , x , y ) ;
36825: LD_VAR 0 1
36829: PPUSH
36830: LD_VAR 0 2
36834: PPUSH
36835: LD_VAR 0 3
36839: PPUSH
36840: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36844: LD_INT 35
36846: PPUSH
36847: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36851: LD_VAR 0 1
36855: PPUSH
36856: LD_VAR 0 2
36860: PPUSH
36861: LD_VAR 0 3
36865: PPUSH
36866: CALL 73319 0 3
36870: NOT
36871: IFFALSE 36875
// exit ;
36873: GO 37129
// until GetDistUnitXY ( unit , x , y ) < dist ;
36875: LD_VAR 0 1
36879: PPUSH
36880: LD_VAR 0 2
36884: PPUSH
36885: LD_VAR 0 3
36889: PPUSH
36890: CALL_OW 297
36894: PUSH
36895: LD_VAR 0 5
36899: LESS
36900: IFFALSE 36844
// end ; ComTurnXY ( unit , x , y ) ;
36902: LD_VAR 0 1
36906: PPUSH
36907: LD_VAR 0 2
36911: PPUSH
36912: LD_VAR 0 3
36916: PPUSH
36917: CALL_OW 118
// wait ( 5 ) ;
36921: LD_INT 5
36923: PPUSH
36924: CALL_OW 67
// _d := GetDir ( unit ) ;
36928: LD_ADDR_VAR 0 10
36932: PUSH
36933: LD_VAR 0 1
36937: PPUSH
36938: CALL_OW 254
36942: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36943: LD_ADDR_VAR 0 8
36947: PUSH
36948: LD_VAR 0 1
36952: PPUSH
36953: CALL_OW 250
36957: PPUSH
36958: LD_VAR 0 10
36962: PPUSH
36963: LD_VAR 0 5
36967: PPUSH
36968: CALL_OW 272
36972: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36973: LD_ADDR_VAR 0 9
36977: PUSH
36978: LD_VAR 0 1
36982: PPUSH
36983: CALL_OW 251
36987: PPUSH
36988: LD_VAR 0 10
36992: PPUSH
36993: LD_VAR 0 5
36997: PPUSH
36998: CALL_OW 273
37002: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37003: LD_VAR 0 8
37007: PPUSH
37008: LD_VAR 0 9
37012: PPUSH
37013: CALL_OW 488
37017: NOT
37018: IFFALSE 37022
// exit ;
37020: GO 37129
// ComAnimCustom ( unit , 1 ) ;
37022: LD_VAR 0 1
37026: PPUSH
37027: LD_INT 1
37029: PPUSH
37030: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37034: LD_VAR 0 8
37038: PPUSH
37039: LD_VAR 0 9
37043: PPUSH
37044: LD_VAR 0 6
37048: PPUSH
37049: LD_VAR 0 7
37053: PPUSH
37054: CALL_OW 330
// repeat wait ( 1 ) ;
37058: LD_INT 1
37060: PPUSH
37061: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37065: LD_VAR 0 1
37069: PPUSH
37070: CALL_OW 316
37074: PUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: CALL_OW 314
37084: OR
37085: PUSH
37086: LD_VAR 0 1
37090: PPUSH
37091: CALL_OW 302
37095: NOT
37096: OR
37097: PUSH
37098: LD_VAR 0 1
37102: PPUSH
37103: CALL_OW 301
37107: OR
37108: IFFALSE 37058
// RemoveSeeing ( _x , _y , side ) ;
37110: LD_VAR 0 8
37114: PPUSH
37115: LD_VAR 0 9
37119: PPUSH
37120: LD_VAR 0 6
37124: PPUSH
37125: CALL_OW 331
// end ; end_of_file
37129: LD_VAR 0 4
37133: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37134: LD_INT 0
37136: PPUSH
37137: PPUSH
// if exist_mode then
37138: LD_VAR 0 2
37142: IFFALSE 37167
// unit := CreateCharacter ( prefix & ident ) else
37144: LD_ADDR_VAR 0 5
37148: PUSH
37149: LD_VAR 0 3
37153: PUSH
37154: LD_VAR 0 1
37158: STR
37159: PPUSH
37160: CALL_OW 34
37164: ST_TO_ADDR
37165: GO 37182
// unit := NewCharacter ( ident ) ;
37167: LD_ADDR_VAR 0 5
37171: PUSH
37172: LD_VAR 0 1
37176: PPUSH
37177: CALL_OW 25
37181: ST_TO_ADDR
// result := unit ;
37182: LD_ADDR_VAR 0 4
37186: PUSH
37187: LD_VAR 0 5
37191: ST_TO_ADDR
// end ;
37192: LD_VAR 0 4
37196: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37197: LD_INT 0
37199: PPUSH
37200: PPUSH
// if not side or not nation then
37201: LD_VAR 0 1
37205: NOT
37206: PUSH
37207: LD_VAR 0 2
37211: NOT
37212: OR
37213: IFFALSE 37217
// exit ;
37215: GO 37985
// case nation of nation_american :
37217: LD_VAR 0 2
37221: PUSH
37222: LD_INT 1
37224: DOUBLE
37225: EQUAL
37226: IFTRUE 37230
37228: GO 37444
37230: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: LD_INT 35
37238: PUSH
37239: LD_INT 45
37241: PUSH
37242: LD_INT 46
37244: PUSH
37245: LD_INT 47
37247: PUSH
37248: LD_INT 82
37250: PUSH
37251: LD_INT 83
37253: PUSH
37254: LD_INT 84
37256: PUSH
37257: LD_INT 85
37259: PUSH
37260: LD_INT 86
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: LD_INT 6
37271: PUSH
37272: LD_INT 15
37274: PUSH
37275: LD_INT 16
37277: PUSH
37278: LD_INT 7
37280: PUSH
37281: LD_INT 12
37283: PUSH
37284: LD_INT 13
37286: PUSH
37287: LD_INT 10
37289: PUSH
37290: LD_INT 14
37292: PUSH
37293: LD_INT 20
37295: PUSH
37296: LD_INT 21
37298: PUSH
37299: LD_INT 22
37301: PUSH
37302: LD_INT 25
37304: PUSH
37305: LD_INT 32
37307: PUSH
37308: LD_INT 27
37310: PUSH
37311: LD_INT 36
37313: PUSH
37314: LD_INT 69
37316: PUSH
37317: LD_INT 39
37319: PUSH
37320: LD_INT 34
37322: PUSH
37323: LD_INT 40
37325: PUSH
37326: LD_INT 48
37328: PUSH
37329: LD_INT 49
37331: PUSH
37332: LD_INT 50
37334: PUSH
37335: LD_INT 51
37337: PUSH
37338: LD_INT 52
37340: PUSH
37341: LD_INT 53
37343: PUSH
37344: LD_INT 54
37346: PUSH
37347: LD_INT 55
37349: PUSH
37350: LD_INT 56
37352: PUSH
37353: LD_INT 57
37355: PUSH
37356: LD_INT 58
37358: PUSH
37359: LD_INT 59
37361: PUSH
37362: LD_INT 60
37364: PUSH
37365: LD_INT 61
37367: PUSH
37368: LD_INT 62
37370: PUSH
37371: LD_INT 80
37373: PUSH
37374: LD_INT 82
37376: PUSH
37377: LD_INT 83
37379: PUSH
37380: LD_INT 84
37382: PUSH
37383: LD_INT 85
37385: PUSH
37386: LD_INT 86
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: ST_TO_ADDR
37442: GO 37909
37444: LD_INT 2
37446: DOUBLE
37447: EQUAL
37448: IFTRUE 37452
37450: GO 37678
37452: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37453: LD_ADDR_VAR 0 4
37457: PUSH
37458: LD_INT 35
37460: PUSH
37461: LD_INT 45
37463: PUSH
37464: LD_INT 46
37466: PUSH
37467: LD_INT 47
37469: PUSH
37470: LD_INT 82
37472: PUSH
37473: LD_INT 83
37475: PUSH
37476: LD_INT 84
37478: PUSH
37479: LD_INT 85
37481: PUSH
37482: LD_INT 87
37484: PUSH
37485: LD_INT 70
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: LD_INT 11
37493: PUSH
37494: LD_INT 3
37496: PUSH
37497: LD_INT 4
37499: PUSH
37500: LD_INT 5
37502: PUSH
37503: LD_INT 6
37505: PUSH
37506: LD_INT 15
37508: PUSH
37509: LD_INT 18
37511: PUSH
37512: LD_INT 7
37514: PUSH
37515: LD_INT 17
37517: PUSH
37518: LD_INT 8
37520: PUSH
37521: LD_INT 20
37523: PUSH
37524: LD_INT 21
37526: PUSH
37527: LD_INT 22
37529: PUSH
37530: LD_INT 72
37532: PUSH
37533: LD_INT 26
37535: PUSH
37536: LD_INT 69
37538: PUSH
37539: LD_INT 39
37541: PUSH
37542: LD_INT 40
37544: PUSH
37545: LD_INT 41
37547: PUSH
37548: LD_INT 42
37550: PUSH
37551: LD_INT 43
37553: PUSH
37554: LD_INT 48
37556: PUSH
37557: LD_INT 49
37559: PUSH
37560: LD_INT 50
37562: PUSH
37563: LD_INT 51
37565: PUSH
37566: LD_INT 52
37568: PUSH
37569: LD_INT 53
37571: PUSH
37572: LD_INT 54
37574: PUSH
37575: LD_INT 55
37577: PUSH
37578: LD_INT 56
37580: PUSH
37581: LD_INT 60
37583: PUSH
37584: LD_INT 61
37586: PUSH
37587: LD_INT 62
37589: PUSH
37590: LD_INT 66
37592: PUSH
37593: LD_INT 67
37595: PUSH
37596: LD_INT 68
37598: PUSH
37599: LD_INT 81
37601: PUSH
37602: LD_INT 82
37604: PUSH
37605: LD_INT 83
37607: PUSH
37608: LD_INT 84
37610: PUSH
37611: LD_INT 85
37613: PUSH
37614: LD_INT 87
37616: PUSH
37617: LD_INT 88
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
37676: GO 37909
37678: LD_INT 3
37680: DOUBLE
37681: EQUAL
37682: IFTRUE 37686
37684: GO 37908
37686: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37687: LD_ADDR_VAR 0 4
37691: PUSH
37692: LD_INT 46
37694: PUSH
37695: LD_INT 47
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 82
37706: PUSH
37707: LD_INT 83
37709: PUSH
37710: LD_INT 84
37712: PUSH
37713: LD_INT 85
37715: PUSH
37716: LD_INT 86
37718: PUSH
37719: LD_INT 11
37721: PUSH
37722: LD_INT 9
37724: PUSH
37725: LD_INT 20
37727: PUSH
37728: LD_INT 19
37730: PUSH
37731: LD_INT 21
37733: PUSH
37734: LD_INT 24
37736: PUSH
37737: LD_INT 22
37739: PUSH
37740: LD_INT 25
37742: PUSH
37743: LD_INT 28
37745: PUSH
37746: LD_INT 29
37748: PUSH
37749: LD_INT 30
37751: PUSH
37752: LD_INT 31
37754: PUSH
37755: LD_INT 37
37757: PUSH
37758: LD_INT 38
37760: PUSH
37761: LD_INT 32
37763: PUSH
37764: LD_INT 27
37766: PUSH
37767: LD_INT 33
37769: PUSH
37770: LD_INT 69
37772: PUSH
37773: LD_INT 39
37775: PUSH
37776: LD_INT 34
37778: PUSH
37779: LD_INT 40
37781: PUSH
37782: LD_INT 71
37784: PUSH
37785: LD_INT 23
37787: PUSH
37788: LD_INT 44
37790: PUSH
37791: LD_INT 48
37793: PUSH
37794: LD_INT 49
37796: PUSH
37797: LD_INT 50
37799: PUSH
37800: LD_INT 51
37802: PUSH
37803: LD_INT 52
37805: PUSH
37806: LD_INT 53
37808: PUSH
37809: LD_INT 54
37811: PUSH
37812: LD_INT 55
37814: PUSH
37815: LD_INT 56
37817: PUSH
37818: LD_INT 57
37820: PUSH
37821: LD_INT 58
37823: PUSH
37824: LD_INT 59
37826: PUSH
37827: LD_INT 63
37829: PUSH
37830: LD_INT 64
37832: PUSH
37833: LD_INT 65
37835: PUSH
37836: LD_INT 82
37838: PUSH
37839: LD_INT 83
37841: PUSH
37842: LD_INT 84
37844: PUSH
37845: LD_INT 85
37847: PUSH
37848: LD_INT 86
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: ST_TO_ADDR
37906: GO 37909
37908: POP
// if state > - 1 and state < 3 then
37909: LD_VAR 0 3
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: GREATER
37918: PUSH
37919: LD_VAR 0 3
37923: PUSH
37924: LD_INT 3
37926: LESS
37927: AND
37928: IFFALSE 37985
// for i in result do
37930: LD_ADDR_VAR 0 5
37934: PUSH
37935: LD_VAR 0 4
37939: PUSH
37940: FOR_IN
37941: IFFALSE 37983
// if GetTech ( i , side ) <> state then
37943: LD_VAR 0 5
37947: PPUSH
37948: LD_VAR 0 1
37952: PPUSH
37953: CALL_OW 321
37957: PUSH
37958: LD_VAR 0 3
37962: NONEQUAL
37963: IFFALSE 37981
// result := result diff i ;
37965: LD_ADDR_VAR 0 4
37969: PUSH
37970: LD_VAR 0 4
37974: PUSH
37975: LD_VAR 0 5
37979: DIFF
37980: ST_TO_ADDR
37981: GO 37940
37983: POP
37984: POP
// end ;
37985: LD_VAR 0 4
37989: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37990: LD_INT 0
37992: PPUSH
37993: PPUSH
37994: PPUSH
// result := true ;
37995: LD_ADDR_VAR 0 3
37999: PUSH
38000: LD_INT 1
38002: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38003: LD_ADDR_VAR 0 5
38007: PUSH
38008: LD_VAR 0 2
38012: PPUSH
38013: CALL_OW 480
38017: ST_TO_ADDR
// if not tmp then
38018: LD_VAR 0 5
38022: NOT
38023: IFFALSE 38027
// exit ;
38025: GO 38076
// for i in tmp do
38027: LD_ADDR_VAR 0 4
38031: PUSH
38032: LD_VAR 0 5
38036: PUSH
38037: FOR_IN
38038: IFFALSE 38074
// if GetTech ( i , side ) <> state_researched then
38040: LD_VAR 0 4
38044: PPUSH
38045: LD_VAR 0 1
38049: PPUSH
38050: CALL_OW 321
38054: PUSH
38055: LD_INT 2
38057: NONEQUAL
38058: IFFALSE 38072
// begin result := false ;
38060: LD_ADDR_VAR 0 3
38064: PUSH
38065: LD_INT 0
38067: ST_TO_ADDR
// exit ;
38068: POP
38069: POP
38070: GO 38076
// end ;
38072: GO 38037
38074: POP
38075: POP
// end ;
38076: LD_VAR 0 3
38080: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38081: LD_INT 0
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
38092: PPUSH
38093: PPUSH
38094: PPUSH
38095: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38096: LD_VAR 0 1
38100: NOT
38101: PUSH
38102: LD_VAR 0 1
38106: PPUSH
38107: CALL_OW 257
38111: PUSH
38112: LD_INT 9
38114: NONEQUAL
38115: OR
38116: IFFALSE 38120
// exit ;
38118: GO 38693
// side := GetSide ( unit ) ;
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_VAR 0 1
38129: PPUSH
38130: CALL_OW 255
38134: ST_TO_ADDR
// tech_space := tech_spacanom ;
38135: LD_ADDR_VAR 0 12
38139: PUSH
38140: LD_INT 29
38142: ST_TO_ADDR
// tech_time := tech_taurad ;
38143: LD_ADDR_VAR 0 13
38147: PUSH
38148: LD_INT 28
38150: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38151: LD_ADDR_VAR 0 11
38155: PUSH
38156: LD_VAR 0 1
38160: PPUSH
38161: CALL_OW 310
38165: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38166: LD_VAR 0 11
38170: PPUSH
38171: CALL_OW 247
38175: PUSH
38176: LD_INT 2
38178: EQUAL
38179: IFFALSE 38183
// exit ;
38181: GO 38693
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38183: LD_ADDR_VAR 0 8
38187: PUSH
38188: LD_INT 81
38190: PUSH
38191: LD_VAR 0 9
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 3
38202: PUSH
38203: LD_INT 21
38205: PUSH
38206: LD_INT 3
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PPUSH
38221: CALL_OW 69
38225: ST_TO_ADDR
// if not tmp then
38226: LD_VAR 0 8
38230: NOT
38231: IFFALSE 38235
// exit ;
38233: GO 38693
// if in_unit then
38235: LD_VAR 0 11
38239: IFFALSE 38263
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38241: LD_ADDR_VAR 0 10
38245: PUSH
38246: LD_VAR 0 8
38250: PPUSH
38251: LD_VAR 0 11
38255: PPUSH
38256: CALL_OW 74
38260: ST_TO_ADDR
38261: GO 38283
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38263: LD_ADDR_VAR 0 10
38267: PUSH
38268: LD_VAR 0 8
38272: PPUSH
38273: LD_VAR 0 1
38277: PPUSH
38278: CALL_OW 74
38282: ST_TO_ADDR
// if not enemy then
38283: LD_VAR 0 10
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 38693
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38292: LD_VAR 0 11
38296: PUSH
38297: LD_VAR 0 11
38301: PPUSH
38302: LD_VAR 0 10
38306: PPUSH
38307: CALL_OW 296
38311: PUSH
38312: LD_INT 13
38314: GREATER
38315: AND
38316: PUSH
38317: LD_VAR 0 1
38321: PPUSH
38322: LD_VAR 0 10
38326: PPUSH
38327: CALL_OW 296
38331: PUSH
38332: LD_INT 12
38334: GREATER
38335: OR
38336: IFFALSE 38340
// exit ;
38338: GO 38693
// missile := [ 1 ] ;
38340: LD_ADDR_VAR 0 14
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38351: LD_VAR 0 9
38355: PPUSH
38356: LD_VAR 0 12
38360: PPUSH
38361: CALL_OW 325
38365: IFFALSE 38394
// missile := Replace ( missile , missile + 1 , 2 ) ;
38367: LD_ADDR_VAR 0 14
38371: PUSH
38372: LD_VAR 0 14
38376: PPUSH
38377: LD_VAR 0 14
38381: PUSH
38382: LD_INT 1
38384: PLUS
38385: PPUSH
38386: LD_INT 2
38388: PPUSH
38389: CALL_OW 1
38393: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38394: LD_VAR 0 9
38398: PPUSH
38399: LD_VAR 0 13
38403: PPUSH
38404: CALL_OW 325
38408: PUSH
38409: LD_VAR 0 10
38413: PPUSH
38414: CALL_OW 255
38418: PPUSH
38419: LD_VAR 0 13
38423: PPUSH
38424: CALL_OW 325
38428: NOT
38429: AND
38430: IFFALSE 38459
// missile := Replace ( missile , missile + 1 , 3 ) ;
38432: LD_ADDR_VAR 0 14
38436: PUSH
38437: LD_VAR 0 14
38441: PPUSH
38442: LD_VAR 0 14
38446: PUSH
38447: LD_INT 1
38449: PLUS
38450: PPUSH
38451: LD_INT 3
38453: PPUSH
38454: CALL_OW 1
38458: ST_TO_ADDR
// if missile < 2 then
38459: LD_VAR 0 14
38463: PUSH
38464: LD_INT 2
38466: LESS
38467: IFFALSE 38471
// exit ;
38469: GO 38693
// x := GetX ( enemy ) ;
38471: LD_ADDR_VAR 0 4
38475: PUSH
38476: LD_VAR 0 10
38480: PPUSH
38481: CALL_OW 250
38485: ST_TO_ADDR
// y := GetY ( enemy ) ;
38486: LD_ADDR_VAR 0 5
38490: PUSH
38491: LD_VAR 0 10
38495: PPUSH
38496: CALL_OW 251
38500: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38501: LD_ADDR_VAR 0 6
38505: PUSH
38506: LD_VAR 0 4
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PPUSH
38515: LD_INT 1
38517: PPUSH
38518: CALL_OW 12
38522: PLUS
38523: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38524: LD_ADDR_VAR 0 7
38528: PUSH
38529: LD_VAR 0 5
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PPUSH
38538: LD_INT 1
38540: PPUSH
38541: CALL_OW 12
38545: PLUS
38546: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38547: LD_VAR 0 6
38551: PPUSH
38552: LD_VAR 0 7
38556: PPUSH
38557: CALL_OW 488
38561: NOT
38562: IFFALSE 38584
// begin _x := x ;
38564: LD_ADDR_VAR 0 6
38568: PUSH
38569: LD_VAR 0 4
38573: ST_TO_ADDR
// _y := y ;
38574: LD_ADDR_VAR 0 7
38578: PUSH
38579: LD_VAR 0 5
38583: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: LD_INT 1
38591: PPUSH
38592: LD_VAR 0 14
38596: PPUSH
38597: CALL_OW 12
38601: ST_TO_ADDR
// case i of 1 :
38602: LD_VAR 0 3
38606: PUSH
38607: LD_INT 1
38609: DOUBLE
38610: EQUAL
38611: IFTRUE 38615
38613: GO 38632
38615: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38616: LD_VAR 0 1
38620: PPUSH
38621: LD_VAR 0 10
38625: PPUSH
38626: CALL_OW 115
38630: GO 38693
38632: LD_INT 2
38634: DOUBLE
38635: EQUAL
38636: IFTRUE 38640
38638: GO 38662
38640: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38641: LD_VAR 0 1
38645: PPUSH
38646: LD_VAR 0 6
38650: PPUSH
38651: LD_VAR 0 7
38655: PPUSH
38656: CALL_OW 153
38660: GO 38693
38662: LD_INT 3
38664: DOUBLE
38665: EQUAL
38666: IFTRUE 38670
38668: GO 38692
38670: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38671: LD_VAR 0 1
38675: PPUSH
38676: LD_VAR 0 6
38680: PPUSH
38681: LD_VAR 0 7
38685: PPUSH
38686: CALL_OW 154
38690: GO 38693
38692: POP
// end ;
38693: LD_VAR 0 2
38697: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38698: LD_INT 0
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
// if not unit or not building then
38706: LD_VAR 0 1
38710: NOT
38711: PUSH
38712: LD_VAR 0 2
38716: NOT
38717: OR
38718: IFFALSE 38722
// exit ;
38720: GO 38880
// x := GetX ( building ) ;
38722: LD_ADDR_VAR 0 5
38726: PUSH
38727: LD_VAR 0 2
38731: PPUSH
38732: CALL_OW 250
38736: ST_TO_ADDR
// y := GetY ( building ) ;
38737: LD_ADDR_VAR 0 6
38741: PUSH
38742: LD_VAR 0 2
38746: PPUSH
38747: CALL_OW 251
38751: ST_TO_ADDR
// for i = 0 to 5 do
38752: LD_ADDR_VAR 0 4
38756: PUSH
38757: DOUBLE
38758: LD_INT 0
38760: DEC
38761: ST_TO_ADDR
38762: LD_INT 5
38764: PUSH
38765: FOR_TO
38766: IFFALSE 38878
// begin _x := ShiftX ( x , i , 3 ) ;
38768: LD_ADDR_VAR 0 7
38772: PUSH
38773: LD_VAR 0 5
38777: PPUSH
38778: LD_VAR 0 4
38782: PPUSH
38783: LD_INT 3
38785: PPUSH
38786: CALL_OW 272
38790: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38791: LD_ADDR_VAR 0 8
38795: PUSH
38796: LD_VAR 0 6
38800: PPUSH
38801: LD_VAR 0 4
38805: PPUSH
38806: LD_INT 3
38808: PPUSH
38809: CALL_OW 273
38813: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38814: LD_VAR 0 7
38818: PPUSH
38819: LD_VAR 0 8
38823: PPUSH
38824: CALL_OW 488
38828: NOT
38829: IFFALSE 38833
// continue ;
38831: GO 38765
// if HexInfo ( _x , _y ) = 0 then
38833: LD_VAR 0 7
38837: PPUSH
38838: LD_VAR 0 8
38842: PPUSH
38843: CALL_OW 428
38847: PUSH
38848: LD_INT 0
38850: EQUAL
38851: IFFALSE 38876
// begin ComMoveXY ( unit , _x , _y ) ;
38853: LD_VAR 0 1
38857: PPUSH
38858: LD_VAR 0 7
38862: PPUSH
38863: LD_VAR 0 8
38867: PPUSH
38868: CALL_OW 111
// exit ;
38872: POP
38873: POP
38874: GO 38880
// end ; end ;
38876: GO 38765
38878: POP
38879: POP
// end ;
38880: LD_VAR 0 3
38884: RET
// export function ScanBase ( side , base_area ) ; begin
38885: LD_INT 0
38887: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38888: LD_ADDR_VAR 0 3
38892: PUSH
38893: LD_VAR 0 2
38897: PPUSH
38898: LD_INT 81
38900: PUSH
38901: LD_VAR 0 1
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PPUSH
38910: CALL_OW 70
38914: ST_TO_ADDR
// end ;
38915: LD_VAR 0 3
38919: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38920: LD_INT 0
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
// result := false ;
38926: LD_ADDR_VAR 0 2
38930: PUSH
38931: LD_INT 0
38933: ST_TO_ADDR
// side := GetSide ( unit ) ;
38934: LD_ADDR_VAR 0 3
38938: PUSH
38939: LD_VAR 0 1
38943: PPUSH
38944: CALL_OW 255
38948: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38949: LD_ADDR_VAR 0 4
38953: PUSH
38954: LD_VAR 0 1
38958: PPUSH
38959: CALL_OW 248
38963: ST_TO_ADDR
// case nat of 1 :
38964: LD_VAR 0 4
38968: PUSH
38969: LD_INT 1
38971: DOUBLE
38972: EQUAL
38973: IFTRUE 38977
38975: GO 38988
38977: POP
// tech := tech_lassight ; 2 :
38978: LD_ADDR_VAR 0 5
38982: PUSH
38983: LD_INT 12
38985: ST_TO_ADDR
38986: GO 39027
38988: LD_INT 2
38990: DOUBLE
38991: EQUAL
38992: IFTRUE 38996
38994: GO 39007
38996: POP
// tech := tech_mortar ; 3 :
38997: LD_ADDR_VAR 0 5
39001: PUSH
39002: LD_INT 41
39004: ST_TO_ADDR
39005: GO 39027
39007: LD_INT 3
39009: DOUBLE
39010: EQUAL
39011: IFTRUE 39015
39013: GO 39026
39015: POP
// tech := tech_bazooka ; end ;
39016: LD_ADDR_VAR 0 5
39020: PUSH
39021: LD_INT 44
39023: ST_TO_ADDR
39024: GO 39027
39026: POP
// if Researched ( side , tech ) then
39027: LD_VAR 0 3
39031: PPUSH
39032: LD_VAR 0 5
39036: PPUSH
39037: CALL_OW 325
39041: IFFALSE 39068
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39043: LD_ADDR_VAR 0 2
39047: PUSH
39048: LD_INT 5
39050: PUSH
39051: LD_INT 8
39053: PUSH
39054: LD_INT 9
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: PUSH
39062: LD_VAR 0 4
39066: ARRAY
39067: ST_TO_ADDR
// end ;
39068: LD_VAR 0 2
39072: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39073: LD_INT 0
39075: PPUSH
39076: PPUSH
39077: PPUSH
// if not mines then
39078: LD_VAR 0 2
39082: NOT
39083: IFFALSE 39087
// exit ;
39085: GO 39231
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39087: LD_ADDR_VAR 0 5
39091: PUSH
39092: LD_INT 81
39094: PUSH
39095: LD_VAR 0 1
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 21
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PPUSH
39125: CALL_OW 69
39129: ST_TO_ADDR
// for i in mines do
39130: LD_ADDR_VAR 0 4
39134: PUSH
39135: LD_VAR 0 2
39139: PUSH
39140: FOR_IN
39141: IFFALSE 39229
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39143: LD_VAR 0 4
39147: PUSH
39148: LD_INT 1
39150: ARRAY
39151: PPUSH
39152: LD_VAR 0 4
39156: PUSH
39157: LD_INT 2
39159: ARRAY
39160: PPUSH
39161: CALL_OW 458
39165: NOT
39166: IFFALSE 39170
// continue ;
39168: GO 39140
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39170: LD_VAR 0 4
39174: PUSH
39175: LD_INT 1
39177: ARRAY
39178: PPUSH
39179: LD_VAR 0 4
39183: PUSH
39184: LD_INT 2
39186: ARRAY
39187: PPUSH
39188: CALL_OW 428
39192: PUSH
39193: LD_VAR 0 5
39197: IN
39198: IFFALSE 39227
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39200: LD_VAR 0 4
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: LD_VAR 0 4
39213: PUSH
39214: LD_INT 2
39216: ARRAY
39217: PPUSH
39218: LD_VAR 0 1
39222: PPUSH
39223: CALL_OW 456
// end ;
39227: GO 39140
39229: POP
39230: POP
// end ;
39231: LD_VAR 0 3
39235: RET
// export function Count ( array ) ; var i ; begin
39236: LD_INT 0
39238: PPUSH
39239: PPUSH
// result := 0 ;
39240: LD_ADDR_VAR 0 2
39244: PUSH
39245: LD_INT 0
39247: ST_TO_ADDR
// for i in array do
39248: LD_ADDR_VAR 0 3
39252: PUSH
39253: LD_VAR 0 1
39257: PUSH
39258: FOR_IN
39259: IFFALSE 39283
// if i then
39261: LD_VAR 0 3
39265: IFFALSE 39281
// result := result + 1 ;
39267: LD_ADDR_VAR 0 2
39271: PUSH
39272: LD_VAR 0 2
39276: PUSH
39277: LD_INT 1
39279: PLUS
39280: ST_TO_ADDR
39281: GO 39258
39283: POP
39284: POP
// end ;
39285: LD_VAR 0 2
39289: RET
// export function IsEmpty ( building ) ; begin
39290: LD_INT 0
39292: PPUSH
// if not building then
39293: LD_VAR 0 1
39297: NOT
39298: IFFALSE 39302
// exit ;
39300: GO 39345
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39302: LD_ADDR_VAR 0 2
39306: PUSH
39307: LD_VAR 0 1
39311: PUSH
39312: LD_INT 22
39314: PUSH
39315: LD_VAR 0 1
39319: PPUSH
39320: CALL_OW 255
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 58
39331: PUSH
39332: EMPTY
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PPUSH
39339: CALL_OW 69
39343: IN
39344: ST_TO_ADDR
// end ;
39345: LD_VAR 0 2
39349: RET
// export function IsNotFull ( building ) ; var places ; begin
39350: LD_INT 0
39352: PPUSH
39353: PPUSH
// if not building then
39354: LD_VAR 0 1
39358: NOT
39359: IFFALSE 39363
// exit ;
39361: GO 39534
// result := false ;
39363: LD_ADDR_VAR 0 2
39367: PUSH
39368: LD_INT 0
39370: ST_TO_ADDR
// places := 0 ;
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_INT 0
39378: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
39379: LD_VAR 0 1
39383: PPUSH
39384: CALL_OW 266
39388: PUSH
39389: LD_INT 0
39391: DOUBLE
39392: EQUAL
39393: IFTRUE 39451
39395: LD_INT 1
39397: DOUBLE
39398: EQUAL
39399: IFTRUE 39451
39401: LD_INT 6
39403: DOUBLE
39404: EQUAL
39405: IFTRUE 39451
39407: LD_INT 7
39409: DOUBLE
39410: EQUAL
39411: IFTRUE 39451
39413: LD_INT 8
39415: DOUBLE
39416: EQUAL
39417: IFTRUE 39451
39419: LD_INT 4
39421: DOUBLE
39422: EQUAL
39423: IFTRUE 39451
39425: LD_INT 5
39427: DOUBLE
39428: EQUAL
39429: IFTRUE 39451
39431: LD_INT 2
39433: DOUBLE
39434: EQUAL
39435: IFTRUE 39451
39437: LD_INT 3
39439: DOUBLE
39440: EQUAL
39441: IFTRUE 39451
39443: LD_INT 35
39445: DOUBLE
39446: EQUAL
39447: IFTRUE 39451
39449: GO 39462
39451: POP
// places := 6 ; b_bunker , b_breastwork :
39452: LD_ADDR_VAR 0 3
39456: PUSH
39457: LD_INT 6
39459: ST_TO_ADDR
39460: GO 39507
39462: LD_INT 32
39464: DOUBLE
39465: EQUAL
39466: IFTRUE 39476
39468: LD_INT 31
39470: DOUBLE
39471: EQUAL
39472: IFTRUE 39476
39474: GO 39487
39476: POP
// places := 1 ; b_control_tower :
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_INT 1
39484: ST_TO_ADDR
39485: GO 39507
39487: LD_INT 36
39489: DOUBLE
39490: EQUAL
39491: IFTRUE 39495
39493: GO 39506
39495: POP
// places := 3 ; end ;
39496: LD_ADDR_VAR 0 3
39500: PUSH
39501: LD_INT 3
39503: ST_TO_ADDR
39504: GO 39507
39506: POP
// if places then
39507: LD_VAR 0 3
39511: IFFALSE 39534
// result := UnitsInside ( building ) < places ;
39513: LD_ADDR_VAR 0 2
39517: PUSH
39518: LD_VAR 0 1
39522: PPUSH
39523: CALL_OW 313
39527: PUSH
39528: LD_VAR 0 3
39532: LESS
39533: ST_TO_ADDR
// end ;
39534: LD_VAR 0 2
39538: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39539: LD_INT 0
39541: PPUSH
39542: PPUSH
39543: PPUSH
39544: PPUSH
// tmp := [ ] ;
39545: LD_ADDR_VAR 0 3
39549: PUSH
39550: EMPTY
39551: ST_TO_ADDR
// list := [ ] ;
39552: LD_ADDR_VAR 0 5
39556: PUSH
39557: EMPTY
39558: ST_TO_ADDR
// for i = 16 to 25 do
39559: LD_ADDR_VAR 0 4
39563: PUSH
39564: DOUBLE
39565: LD_INT 16
39567: DEC
39568: ST_TO_ADDR
39569: LD_INT 25
39571: PUSH
39572: FOR_TO
39573: IFFALSE 39646
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39575: LD_ADDR_VAR 0 3
39579: PUSH
39580: LD_VAR 0 3
39584: PUSH
39585: LD_INT 22
39587: PUSH
39588: LD_VAR 0 1
39592: PPUSH
39593: CALL_OW 255
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 91
39604: PUSH
39605: LD_VAR 0 1
39609: PUSH
39610: LD_INT 6
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 30
39620: PUSH
39621: LD_VAR 0 4
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: PPUSH
39638: CALL_OW 69
39642: ADD
39643: ST_TO_ADDR
39644: GO 39572
39646: POP
39647: POP
// for i = 1 to tmp do
39648: LD_ADDR_VAR 0 4
39652: PUSH
39653: DOUBLE
39654: LD_INT 1
39656: DEC
39657: ST_TO_ADDR
39658: LD_VAR 0 3
39662: PUSH
39663: FOR_TO
39664: IFFALSE 39752
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39666: LD_ADDR_VAR 0 5
39670: PUSH
39671: LD_VAR 0 5
39675: PUSH
39676: LD_VAR 0 3
39680: PUSH
39681: LD_VAR 0 4
39685: ARRAY
39686: PPUSH
39687: CALL_OW 266
39691: PUSH
39692: LD_VAR 0 3
39696: PUSH
39697: LD_VAR 0 4
39701: ARRAY
39702: PPUSH
39703: CALL_OW 250
39707: PUSH
39708: LD_VAR 0 3
39712: PUSH
39713: LD_VAR 0 4
39717: ARRAY
39718: PPUSH
39719: CALL_OW 251
39723: PUSH
39724: LD_VAR 0 3
39728: PUSH
39729: LD_VAR 0 4
39733: ARRAY
39734: PPUSH
39735: CALL_OW 254
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: PUSH
39746: EMPTY
39747: LIST
39748: ADD
39749: ST_TO_ADDR
39750: GO 39663
39752: POP
39753: POP
// result := list ;
39754: LD_ADDR_VAR 0 2
39758: PUSH
39759: LD_VAR 0 5
39763: ST_TO_ADDR
// end ;
39764: LD_VAR 0 2
39768: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39769: LD_INT 0
39771: PPUSH
39772: PPUSH
39773: PPUSH
39774: PPUSH
39775: PPUSH
39776: PPUSH
39777: PPUSH
// if not factory then
39778: LD_VAR 0 1
39782: NOT
39783: IFFALSE 39787
// exit ;
39785: GO 40380
// if control = control_apeman then
39787: LD_VAR 0 4
39791: PUSH
39792: LD_INT 5
39794: EQUAL
39795: IFFALSE 39904
// begin tmp := UnitsInside ( factory ) ;
39797: LD_ADDR_VAR 0 8
39801: PUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 313
39811: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39812: LD_VAR 0 8
39816: PPUSH
39817: LD_INT 25
39819: PUSH
39820: LD_INT 12
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PPUSH
39827: CALL_OW 72
39831: NOT
39832: IFFALSE 39842
// control := control_manual ;
39834: LD_ADDR_VAR 0 4
39838: PUSH
39839: LD_INT 1
39841: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39842: LD_ADDR_VAR 0 8
39846: PUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL 39539 0 1
39856: ST_TO_ADDR
// if tmp then
39857: LD_VAR 0 8
39861: IFFALSE 39904
// begin for i in tmp do
39863: LD_ADDR_VAR 0 7
39867: PUSH
39868: LD_VAR 0 8
39872: PUSH
39873: FOR_IN
39874: IFFALSE 39902
// if i [ 1 ] = b_ext_radio then
39876: LD_VAR 0 7
39880: PUSH
39881: LD_INT 1
39883: ARRAY
39884: PUSH
39885: LD_INT 22
39887: EQUAL
39888: IFFALSE 39900
// begin control := control_remote ;
39890: LD_ADDR_VAR 0 4
39894: PUSH
39895: LD_INT 2
39897: ST_TO_ADDR
// break ;
39898: GO 39902
// end ;
39900: GO 39873
39902: POP
39903: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39904: LD_VAR 0 1
39908: PPUSH
39909: LD_VAR 0 2
39913: PPUSH
39914: LD_VAR 0 3
39918: PPUSH
39919: LD_VAR 0 4
39923: PPUSH
39924: LD_VAR 0 5
39928: PPUSH
39929: CALL_OW 448
39933: IFFALSE 39968
// begin result := [ chassis , engine , control , weapon ] ;
39935: LD_ADDR_VAR 0 6
39939: PUSH
39940: LD_VAR 0 2
39944: PUSH
39945: LD_VAR 0 3
39949: PUSH
39950: LD_VAR 0 4
39954: PUSH
39955: LD_VAR 0 5
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: ST_TO_ADDR
// exit ;
39966: GO 40380
// end ; _chassis := AvailableChassisList ( factory ) ;
39968: LD_ADDR_VAR 0 9
39972: PUSH
39973: LD_VAR 0 1
39977: PPUSH
39978: CALL_OW 475
39982: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39983: LD_ADDR_VAR 0 11
39987: PUSH
39988: LD_VAR 0 1
39992: PPUSH
39993: CALL_OW 476
39997: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39998: LD_ADDR_VAR 0 12
40002: PUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 477
40012: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40013: LD_ADDR_VAR 0 10
40017: PUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 478
40027: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40028: LD_VAR 0 9
40032: NOT
40033: PUSH
40034: LD_VAR 0 11
40038: NOT
40039: OR
40040: PUSH
40041: LD_VAR 0 12
40045: NOT
40046: OR
40047: PUSH
40048: LD_VAR 0 10
40052: NOT
40053: OR
40054: IFFALSE 40089
// begin result := [ chassis , engine , control , weapon ] ;
40056: LD_ADDR_VAR 0 6
40060: PUSH
40061: LD_VAR 0 2
40065: PUSH
40066: LD_VAR 0 3
40070: PUSH
40071: LD_VAR 0 4
40075: PUSH
40076: LD_VAR 0 5
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: ST_TO_ADDR
// exit ;
40087: GO 40380
// end ; if not chassis in _chassis then
40089: LD_VAR 0 2
40093: PUSH
40094: LD_VAR 0 9
40098: IN
40099: NOT
40100: IFFALSE 40126
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40102: LD_ADDR_VAR 0 2
40106: PUSH
40107: LD_VAR 0 9
40111: PUSH
40112: LD_INT 1
40114: PPUSH
40115: LD_VAR 0 9
40119: PPUSH
40120: CALL_OW 12
40124: ARRAY
40125: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40126: LD_VAR 0 2
40130: PPUSH
40131: LD_VAR 0 3
40135: PPUSH
40136: CALL 40385 0 2
40140: NOT
40141: IFFALSE 40200
// repeat engine := _engine [ 1 ] ;
40143: LD_ADDR_VAR 0 3
40147: PUSH
40148: LD_VAR 0 11
40152: PUSH
40153: LD_INT 1
40155: ARRAY
40156: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40157: LD_ADDR_VAR 0 11
40161: PUSH
40162: LD_VAR 0 11
40166: PPUSH
40167: LD_INT 1
40169: PPUSH
40170: CALL_OW 3
40174: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40175: LD_VAR 0 2
40179: PPUSH
40180: LD_VAR 0 3
40184: PPUSH
40185: CALL 40385 0 2
40189: PUSH
40190: LD_VAR 0 11
40194: PUSH
40195: EMPTY
40196: EQUAL
40197: OR
40198: IFFALSE 40143
// if not control in _control then
40200: LD_VAR 0 4
40204: PUSH
40205: LD_VAR 0 12
40209: IN
40210: NOT
40211: IFFALSE 40237
// control := _control [ rand ( 1 , _control ) ] ;
40213: LD_ADDR_VAR 0 4
40217: PUSH
40218: LD_VAR 0 12
40222: PUSH
40223: LD_INT 1
40225: PPUSH
40226: LD_VAR 0 12
40230: PPUSH
40231: CALL_OW 12
40235: ARRAY
40236: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40237: LD_VAR 0 2
40241: PPUSH
40242: LD_VAR 0 5
40246: PPUSH
40247: CALL 40605 0 2
40251: NOT
40252: IFFALSE 40311
// repeat weapon := _weapon [ 1 ] ;
40254: LD_ADDR_VAR 0 5
40258: PUSH
40259: LD_VAR 0 10
40263: PUSH
40264: LD_INT 1
40266: ARRAY
40267: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40268: LD_ADDR_VAR 0 10
40272: PUSH
40273: LD_VAR 0 10
40277: PPUSH
40278: LD_INT 1
40280: PPUSH
40281: CALL_OW 3
40285: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40286: LD_VAR 0 2
40290: PPUSH
40291: LD_VAR 0 5
40295: PPUSH
40296: CALL 40605 0 2
40300: PUSH
40301: LD_VAR 0 10
40305: PUSH
40306: EMPTY
40307: EQUAL
40308: OR
40309: IFFALSE 40254
// result := [ ] ;
40311: LD_ADDR_VAR 0 6
40315: PUSH
40316: EMPTY
40317: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40318: LD_VAR 0 1
40322: PPUSH
40323: LD_VAR 0 2
40327: PPUSH
40328: LD_VAR 0 3
40332: PPUSH
40333: LD_VAR 0 4
40337: PPUSH
40338: LD_VAR 0 5
40342: PPUSH
40343: CALL_OW 448
40347: IFFALSE 40380
// result := [ chassis , engine , control , weapon ] ;
40349: LD_ADDR_VAR 0 6
40353: PUSH
40354: LD_VAR 0 2
40358: PUSH
40359: LD_VAR 0 3
40363: PUSH
40364: LD_VAR 0 4
40368: PUSH
40369: LD_VAR 0 5
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// end ;
40380: LD_VAR 0 6
40384: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40385: LD_INT 0
40387: PPUSH
// if not chassis or not engine then
40388: LD_VAR 0 1
40392: NOT
40393: PUSH
40394: LD_VAR 0 2
40398: NOT
40399: OR
40400: IFFALSE 40404
// exit ;
40402: GO 40600
// case engine of engine_solar :
40404: LD_VAR 0 2
40408: PUSH
40409: LD_INT 2
40411: DOUBLE
40412: EQUAL
40413: IFTRUE 40417
40415: GO 40455
40417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40418: LD_ADDR_VAR 0 3
40422: PUSH
40423: LD_INT 11
40425: PUSH
40426: LD_INT 12
40428: PUSH
40429: LD_INT 13
40431: PUSH
40432: LD_INT 14
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: LD_INT 3
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: ST_TO_ADDR
40453: GO 40584
40455: LD_INT 1
40457: DOUBLE
40458: EQUAL
40459: IFTRUE 40463
40461: GO 40525
40463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: LD_INT 11
40471: PUSH
40472: LD_INT 12
40474: PUSH
40475: LD_INT 13
40477: PUSH
40478: LD_INT 14
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: LD_INT 3
40489: PUSH
40490: LD_INT 4
40492: PUSH
40493: LD_INT 5
40495: PUSH
40496: LD_INT 21
40498: PUSH
40499: LD_INT 23
40501: PUSH
40502: LD_INT 22
40504: PUSH
40505: LD_INT 24
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
40523: GO 40584
40525: LD_INT 3
40527: DOUBLE
40528: EQUAL
40529: IFTRUE 40533
40531: GO 40583
40533: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_INT 13
40541: PUSH
40542: LD_INT 14
40544: PUSH
40545: LD_INT 2
40547: PUSH
40548: LD_INT 3
40550: PUSH
40551: LD_INT 4
40553: PUSH
40554: LD_INT 5
40556: PUSH
40557: LD_INT 21
40559: PUSH
40560: LD_INT 22
40562: PUSH
40563: LD_INT 23
40565: PUSH
40566: LD_INT 24
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
40581: GO 40584
40583: POP
// result := ( chassis in result ) ;
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: LD_VAR 0 1
40593: PUSH
40594: LD_VAR 0 3
40598: IN
40599: ST_TO_ADDR
// end ;
40600: LD_VAR 0 3
40604: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40605: LD_INT 0
40607: PPUSH
// if not chassis or not weapon then
40608: LD_VAR 0 1
40612: NOT
40613: PUSH
40614: LD_VAR 0 2
40618: NOT
40619: OR
40620: IFFALSE 40624
// exit ;
40622: GO 41684
// case weapon of us_machine_gun :
40624: LD_VAR 0 2
40628: PUSH
40629: LD_INT 2
40631: DOUBLE
40632: EQUAL
40633: IFTRUE 40637
40635: GO 40667
40637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40638: LD_ADDR_VAR 0 3
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: LD_INT 4
40654: PUSH
40655: LD_INT 5
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: ST_TO_ADDR
40665: GO 41668
40667: LD_INT 3
40669: DOUBLE
40670: EQUAL
40671: IFTRUE 40675
40673: GO 40705
40675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40676: LD_ADDR_VAR 0 3
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: LD_INT 4
40692: PUSH
40693: LD_INT 5
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: ST_TO_ADDR
40703: GO 41668
40705: LD_INT 11
40707: DOUBLE
40708: EQUAL
40709: IFTRUE 40713
40711: GO 40743
40713: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 3
40727: PUSH
40728: LD_INT 4
40730: PUSH
40731: LD_INT 5
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: ST_TO_ADDR
40741: GO 41668
40743: LD_INT 4
40745: DOUBLE
40746: EQUAL
40747: IFTRUE 40751
40749: GO 40777
40751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40752: LD_ADDR_VAR 0 3
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 3
40762: PUSH
40763: LD_INT 4
40765: PUSH
40766: LD_INT 5
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: ST_TO_ADDR
40775: GO 41668
40777: LD_INT 5
40779: DOUBLE
40780: EQUAL
40781: IFTRUE 40785
40783: GO 40811
40785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40786: LD_ADDR_VAR 0 3
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: LD_INT 3
40796: PUSH
40797: LD_INT 4
40799: PUSH
40800: LD_INT 5
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: ST_TO_ADDR
40809: GO 41668
40811: LD_INT 9
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40819
40817: GO 40845
40819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 3
40830: PUSH
40831: LD_INT 4
40833: PUSH
40834: LD_INT 5
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
40843: GO 41668
40845: LD_INT 7
40847: DOUBLE
40848: EQUAL
40849: IFTRUE 40853
40851: GO 40879
40853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40854: LD_ADDR_VAR 0 3
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 3
40864: PUSH
40865: LD_INT 4
40867: PUSH
40868: LD_INT 5
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
40877: GO 41668
40879: LD_INT 12
40881: DOUBLE
40882: EQUAL
40883: IFTRUE 40887
40885: GO 40913
40887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40888: LD_ADDR_VAR 0 3
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: LD_INT 4
40901: PUSH
40902: LD_INT 5
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: ST_TO_ADDR
40911: GO 41668
40913: LD_INT 13
40915: DOUBLE
40916: EQUAL
40917: IFTRUE 40921
40919: GO 40947
40921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40922: LD_ADDR_VAR 0 3
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: LD_INT 3
40932: PUSH
40933: LD_INT 4
40935: PUSH
40936: LD_INT 5
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: ST_TO_ADDR
40945: GO 41668
40947: LD_INT 14
40949: DOUBLE
40950: EQUAL
40951: IFTRUE 40955
40953: GO 40973
40955: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40956: LD_ADDR_VAR 0 3
40960: PUSH
40961: LD_INT 4
40963: PUSH
40964: LD_INT 5
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: ST_TO_ADDR
40971: GO 41668
40973: LD_INT 6
40975: DOUBLE
40976: EQUAL
40977: IFTRUE 40981
40979: GO 40999
40981: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40982: LD_ADDR_VAR 0 3
40986: PUSH
40987: LD_INT 4
40989: PUSH
40990: LD_INT 5
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: ST_TO_ADDR
40997: GO 41668
40999: LD_INT 10
41001: DOUBLE
41002: EQUAL
41003: IFTRUE 41007
41005: GO 41025
41007: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41008: LD_ADDR_VAR 0 3
41012: PUSH
41013: LD_INT 4
41015: PUSH
41016: LD_INT 5
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: ST_TO_ADDR
41023: GO 41668
41025: LD_INT 22
41027: DOUBLE
41028: EQUAL
41029: IFTRUE 41033
41031: GO 41059
41033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41034: LD_ADDR_VAR 0 3
41038: PUSH
41039: LD_INT 11
41041: PUSH
41042: LD_INT 12
41044: PUSH
41045: LD_INT 13
41047: PUSH
41048: LD_INT 14
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: ST_TO_ADDR
41057: GO 41668
41059: LD_INT 23
41061: DOUBLE
41062: EQUAL
41063: IFTRUE 41067
41065: GO 41093
41067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41068: LD_ADDR_VAR 0 3
41072: PUSH
41073: LD_INT 11
41075: PUSH
41076: LD_INT 12
41078: PUSH
41079: LD_INT 13
41081: PUSH
41082: LD_INT 14
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: ST_TO_ADDR
41091: GO 41668
41093: LD_INT 24
41095: DOUBLE
41096: EQUAL
41097: IFTRUE 41101
41099: GO 41127
41101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41102: LD_ADDR_VAR 0 3
41106: PUSH
41107: LD_INT 11
41109: PUSH
41110: LD_INT 12
41112: PUSH
41113: LD_INT 13
41115: PUSH
41116: LD_INT 14
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: ST_TO_ADDR
41125: GO 41668
41127: LD_INT 30
41129: DOUBLE
41130: EQUAL
41131: IFTRUE 41135
41133: GO 41161
41135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41136: LD_ADDR_VAR 0 3
41140: PUSH
41141: LD_INT 11
41143: PUSH
41144: LD_INT 12
41146: PUSH
41147: LD_INT 13
41149: PUSH
41150: LD_INT 14
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: ST_TO_ADDR
41159: GO 41668
41161: LD_INT 25
41163: DOUBLE
41164: EQUAL
41165: IFTRUE 41169
41167: GO 41187
41169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41170: LD_ADDR_VAR 0 3
41174: PUSH
41175: LD_INT 13
41177: PUSH
41178: LD_INT 14
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: ST_TO_ADDR
41185: GO 41668
41187: LD_INT 27
41189: DOUBLE
41190: EQUAL
41191: IFTRUE 41195
41193: GO 41213
41195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41196: LD_ADDR_VAR 0 3
41200: PUSH
41201: LD_INT 13
41203: PUSH
41204: LD_INT 14
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: ST_TO_ADDR
41211: GO 41668
41213: LD_INT 92
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41221
41219: GO 41247
41221: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 11
41229: PUSH
41230: LD_INT 12
41232: PUSH
41233: LD_INT 13
41235: PUSH
41236: LD_INT 14
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
41245: GO 41668
41247: LD_INT 28
41249: DOUBLE
41250: EQUAL
41251: IFTRUE 41255
41253: GO 41273
41255: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41256: LD_ADDR_VAR 0 3
41260: PUSH
41261: LD_INT 13
41263: PUSH
41264: LD_INT 14
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: ST_TO_ADDR
41271: GO 41668
41273: LD_INT 29
41275: DOUBLE
41276: EQUAL
41277: IFTRUE 41281
41279: GO 41299
41281: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_INT 13
41289: PUSH
41290: LD_INT 14
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: ST_TO_ADDR
41297: GO 41668
41299: LD_INT 31
41301: DOUBLE
41302: EQUAL
41303: IFTRUE 41307
41305: GO 41325
41307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41308: LD_ADDR_VAR 0 3
41312: PUSH
41313: LD_INT 13
41315: PUSH
41316: LD_INT 14
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: ST_TO_ADDR
41323: GO 41668
41325: LD_INT 26
41327: DOUBLE
41328: EQUAL
41329: IFTRUE 41333
41331: GO 41351
41333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41334: LD_ADDR_VAR 0 3
41338: PUSH
41339: LD_INT 13
41341: PUSH
41342: LD_INT 14
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: ST_TO_ADDR
41349: GO 41668
41351: LD_INT 42
41353: DOUBLE
41354: EQUAL
41355: IFTRUE 41359
41357: GO 41385
41359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41360: LD_ADDR_VAR 0 3
41364: PUSH
41365: LD_INT 21
41367: PUSH
41368: LD_INT 22
41370: PUSH
41371: LD_INT 23
41373: PUSH
41374: LD_INT 24
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: ST_TO_ADDR
41383: GO 41668
41385: LD_INT 43
41387: DOUBLE
41388: EQUAL
41389: IFTRUE 41393
41391: GO 41419
41393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41394: LD_ADDR_VAR 0 3
41398: PUSH
41399: LD_INT 21
41401: PUSH
41402: LD_INT 22
41404: PUSH
41405: LD_INT 23
41407: PUSH
41408: LD_INT 24
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: ST_TO_ADDR
41417: GO 41668
41419: LD_INT 44
41421: DOUBLE
41422: EQUAL
41423: IFTRUE 41427
41425: GO 41453
41427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41428: LD_ADDR_VAR 0 3
41432: PUSH
41433: LD_INT 21
41435: PUSH
41436: LD_INT 22
41438: PUSH
41439: LD_INT 23
41441: PUSH
41442: LD_INT 24
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: ST_TO_ADDR
41451: GO 41668
41453: LD_INT 45
41455: DOUBLE
41456: EQUAL
41457: IFTRUE 41461
41459: GO 41487
41461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41462: LD_ADDR_VAR 0 3
41466: PUSH
41467: LD_INT 21
41469: PUSH
41470: LD_INT 22
41472: PUSH
41473: LD_INT 23
41475: PUSH
41476: LD_INT 24
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
41485: GO 41668
41487: LD_INT 49
41489: DOUBLE
41490: EQUAL
41491: IFTRUE 41495
41493: GO 41521
41495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41496: LD_ADDR_VAR 0 3
41500: PUSH
41501: LD_INT 21
41503: PUSH
41504: LD_INT 22
41506: PUSH
41507: LD_INT 23
41509: PUSH
41510: LD_INT 24
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: ST_TO_ADDR
41519: GO 41668
41521: LD_INT 51
41523: DOUBLE
41524: EQUAL
41525: IFTRUE 41529
41527: GO 41555
41529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41530: LD_ADDR_VAR 0 3
41534: PUSH
41535: LD_INT 21
41537: PUSH
41538: LD_INT 22
41540: PUSH
41541: LD_INT 23
41543: PUSH
41544: LD_INT 24
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: ST_TO_ADDR
41553: GO 41668
41555: LD_INT 52
41557: DOUBLE
41558: EQUAL
41559: IFTRUE 41563
41561: GO 41589
41563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: LD_INT 21
41571: PUSH
41572: LD_INT 22
41574: PUSH
41575: LD_INT 23
41577: PUSH
41578: LD_INT 24
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: ST_TO_ADDR
41587: GO 41668
41589: LD_INT 53
41591: DOUBLE
41592: EQUAL
41593: IFTRUE 41597
41595: GO 41615
41597: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41598: LD_ADDR_VAR 0 3
41602: PUSH
41603: LD_INT 23
41605: PUSH
41606: LD_INT 24
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: ST_TO_ADDR
41613: GO 41668
41615: LD_INT 46
41617: DOUBLE
41618: EQUAL
41619: IFTRUE 41623
41621: GO 41641
41623: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41624: LD_ADDR_VAR 0 3
41628: PUSH
41629: LD_INT 23
41631: PUSH
41632: LD_INT 24
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: ST_TO_ADDR
41639: GO 41668
41641: LD_INT 47
41643: DOUBLE
41644: EQUAL
41645: IFTRUE 41649
41647: GO 41667
41649: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41650: LD_ADDR_VAR 0 3
41654: PUSH
41655: LD_INT 23
41657: PUSH
41658: LD_INT 24
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: ST_TO_ADDR
41665: GO 41668
41667: POP
// result := ( chassis in result ) ;
41668: LD_ADDR_VAR 0 3
41672: PUSH
41673: LD_VAR 0 1
41677: PUSH
41678: LD_VAR 0 3
41682: IN
41683: ST_TO_ADDR
// end ;
41684: LD_VAR 0 3
41688: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41689: LD_INT 0
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
// result := array ;
41698: LD_ADDR_VAR 0 5
41702: PUSH
41703: LD_VAR 0 1
41707: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41708: LD_VAR 0 1
41712: NOT
41713: PUSH
41714: LD_VAR 0 2
41718: NOT
41719: OR
41720: PUSH
41721: LD_VAR 0 3
41725: NOT
41726: OR
41727: PUSH
41728: LD_VAR 0 2
41732: PUSH
41733: LD_VAR 0 1
41737: GREATER
41738: OR
41739: PUSH
41740: LD_VAR 0 3
41744: PUSH
41745: LD_VAR 0 1
41749: GREATER
41750: OR
41751: IFFALSE 41755
// exit ;
41753: GO 42051
// if direction then
41755: LD_VAR 0 4
41759: IFFALSE 41823
// begin d := 1 ;
41761: LD_ADDR_VAR 0 9
41765: PUSH
41766: LD_INT 1
41768: ST_TO_ADDR
// if i_from > i_to then
41769: LD_VAR 0 2
41773: PUSH
41774: LD_VAR 0 3
41778: GREATER
41779: IFFALSE 41805
// length := ( array - i_from ) + i_to else
41781: LD_ADDR_VAR 0 11
41785: PUSH
41786: LD_VAR 0 1
41790: PUSH
41791: LD_VAR 0 2
41795: MINUS
41796: PUSH
41797: LD_VAR 0 3
41801: PLUS
41802: ST_TO_ADDR
41803: GO 41821
// length := i_to - i_from ;
41805: LD_ADDR_VAR 0 11
41809: PUSH
41810: LD_VAR 0 3
41814: PUSH
41815: LD_VAR 0 2
41819: MINUS
41820: ST_TO_ADDR
// end else
41821: GO 41884
// begin d := - 1 ;
41823: LD_ADDR_VAR 0 9
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: ST_TO_ADDR
// if i_from > i_to then
41832: LD_VAR 0 2
41836: PUSH
41837: LD_VAR 0 3
41841: GREATER
41842: IFFALSE 41862
// length := i_from - i_to else
41844: LD_ADDR_VAR 0 11
41848: PUSH
41849: LD_VAR 0 2
41853: PUSH
41854: LD_VAR 0 3
41858: MINUS
41859: ST_TO_ADDR
41860: GO 41884
// length := ( array - i_to ) + i_from ;
41862: LD_ADDR_VAR 0 11
41866: PUSH
41867: LD_VAR 0 1
41871: PUSH
41872: LD_VAR 0 3
41876: MINUS
41877: PUSH
41878: LD_VAR 0 2
41882: PLUS
41883: ST_TO_ADDR
// end ; if not length then
41884: LD_VAR 0 11
41888: NOT
41889: IFFALSE 41893
// exit ;
41891: GO 42051
// tmp := array ;
41893: LD_ADDR_VAR 0 10
41897: PUSH
41898: LD_VAR 0 1
41902: ST_TO_ADDR
// for i = 1 to length do
41903: LD_ADDR_VAR 0 6
41907: PUSH
41908: DOUBLE
41909: LD_INT 1
41911: DEC
41912: ST_TO_ADDR
41913: LD_VAR 0 11
41917: PUSH
41918: FOR_TO
41919: IFFALSE 42039
// begin for j = 1 to array do
41921: LD_ADDR_VAR 0 7
41925: PUSH
41926: DOUBLE
41927: LD_INT 1
41929: DEC
41930: ST_TO_ADDR
41931: LD_VAR 0 1
41935: PUSH
41936: FOR_TO
41937: IFFALSE 42025
// begin k := j + d ;
41939: LD_ADDR_VAR 0 8
41943: PUSH
41944: LD_VAR 0 7
41948: PUSH
41949: LD_VAR 0 9
41953: PLUS
41954: ST_TO_ADDR
// if k > array then
41955: LD_VAR 0 8
41959: PUSH
41960: LD_VAR 0 1
41964: GREATER
41965: IFFALSE 41975
// k := 1 ;
41967: LD_ADDR_VAR 0 8
41971: PUSH
41972: LD_INT 1
41974: ST_TO_ADDR
// if not k then
41975: LD_VAR 0 8
41979: NOT
41980: IFFALSE 41992
// k := array ;
41982: LD_ADDR_VAR 0 8
41986: PUSH
41987: LD_VAR 0 1
41991: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41992: LD_ADDR_VAR 0 10
41996: PUSH
41997: LD_VAR 0 10
42001: PPUSH
42002: LD_VAR 0 8
42006: PPUSH
42007: LD_VAR 0 1
42011: PUSH
42012: LD_VAR 0 7
42016: ARRAY
42017: PPUSH
42018: CALL_OW 1
42022: ST_TO_ADDR
// end ;
42023: GO 41936
42025: POP
42026: POP
// array := tmp ;
42027: LD_ADDR_VAR 0 1
42031: PUSH
42032: LD_VAR 0 10
42036: ST_TO_ADDR
// end ;
42037: GO 41918
42039: POP
42040: POP
// result := array ;
42041: LD_ADDR_VAR 0 5
42045: PUSH
42046: LD_VAR 0 1
42050: ST_TO_ADDR
// end ;
42051: LD_VAR 0 5
42055: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42056: LD_INT 0
42058: PPUSH
42059: PPUSH
// result := 0 ;
42060: LD_ADDR_VAR 0 3
42064: PUSH
42065: LD_INT 0
42067: ST_TO_ADDR
// if not array or not value in array then
42068: LD_VAR 0 1
42072: NOT
42073: PUSH
42074: LD_VAR 0 2
42078: PUSH
42079: LD_VAR 0 1
42083: IN
42084: NOT
42085: OR
42086: IFFALSE 42090
// exit ;
42088: GO 42144
// for i = 1 to array do
42090: LD_ADDR_VAR 0 4
42094: PUSH
42095: DOUBLE
42096: LD_INT 1
42098: DEC
42099: ST_TO_ADDR
42100: LD_VAR 0 1
42104: PUSH
42105: FOR_TO
42106: IFFALSE 42142
// if value = array [ i ] then
42108: LD_VAR 0 2
42112: PUSH
42113: LD_VAR 0 1
42117: PUSH
42118: LD_VAR 0 4
42122: ARRAY
42123: EQUAL
42124: IFFALSE 42140
// begin result := i ;
42126: LD_ADDR_VAR 0 3
42130: PUSH
42131: LD_VAR 0 4
42135: ST_TO_ADDR
// exit ;
42136: POP
42137: POP
42138: GO 42144
// end ;
42140: GO 42105
42142: POP
42143: POP
// end ;
42144: LD_VAR 0 3
42148: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42149: LD_INT 0
42151: PPUSH
// vc_chassis := chassis ;
42152: LD_ADDR_OWVAR 37
42156: PUSH
42157: LD_VAR 0 1
42161: ST_TO_ADDR
// vc_engine := engine ;
42162: LD_ADDR_OWVAR 39
42166: PUSH
42167: LD_VAR 0 2
42171: ST_TO_ADDR
// vc_control := control ;
42172: LD_ADDR_OWVAR 38
42176: PUSH
42177: LD_VAR 0 3
42181: ST_TO_ADDR
// vc_weapon := weapon ;
42182: LD_ADDR_OWVAR 40
42186: PUSH
42187: LD_VAR 0 4
42191: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42192: LD_ADDR_OWVAR 41
42196: PUSH
42197: LD_VAR 0 5
42201: ST_TO_ADDR
// end ;
42202: LD_VAR 0 6
42206: RET
// export function WantPlant ( unit ) ; var task ; begin
42207: LD_INT 0
42209: PPUSH
42210: PPUSH
// result := false ;
42211: LD_ADDR_VAR 0 2
42215: PUSH
42216: LD_INT 0
42218: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_VAR 0 1
42228: PPUSH
42229: CALL_OW 437
42233: ST_TO_ADDR
// if task then
42234: LD_VAR 0 3
42238: IFFALSE 42266
// if task [ 1 ] [ 1 ] = p then
42240: LD_VAR 0 3
42244: PUSH
42245: LD_INT 1
42247: ARRAY
42248: PUSH
42249: LD_INT 1
42251: ARRAY
42252: PUSH
42253: LD_STRING p
42255: EQUAL
42256: IFFALSE 42266
// result := true ;
42258: LD_ADDR_VAR 0 2
42262: PUSH
42263: LD_INT 1
42265: ST_TO_ADDR
// end ;
42266: LD_VAR 0 2
42270: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42271: LD_INT 0
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
// if pos < 1 then
42277: LD_VAR 0 2
42281: PUSH
42282: LD_INT 1
42284: LESS
42285: IFFALSE 42289
// exit ;
42287: GO 42592
// if pos = 1 then
42289: LD_VAR 0 2
42293: PUSH
42294: LD_INT 1
42296: EQUAL
42297: IFFALSE 42330
// result := Replace ( arr , pos [ 1 ] , value ) else
42299: LD_ADDR_VAR 0 4
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: LD_VAR 0 2
42313: PUSH
42314: LD_INT 1
42316: ARRAY
42317: PPUSH
42318: LD_VAR 0 3
42322: PPUSH
42323: CALL_OW 1
42327: ST_TO_ADDR
42328: GO 42592
// begin tmp := arr ;
42330: LD_ADDR_VAR 0 6
42334: PUSH
42335: LD_VAR 0 1
42339: ST_TO_ADDR
// s_arr := [ tmp ] ;
42340: LD_ADDR_VAR 0 7
42344: PUSH
42345: LD_VAR 0 6
42349: PUSH
42350: EMPTY
42351: LIST
42352: ST_TO_ADDR
// for i = 1 to pos - 1 do
42353: LD_ADDR_VAR 0 5
42357: PUSH
42358: DOUBLE
42359: LD_INT 1
42361: DEC
42362: ST_TO_ADDR
42363: LD_VAR 0 2
42367: PUSH
42368: LD_INT 1
42370: MINUS
42371: PUSH
42372: FOR_TO
42373: IFFALSE 42418
// begin tmp := tmp [ pos [ i ] ] ;
42375: LD_ADDR_VAR 0 6
42379: PUSH
42380: LD_VAR 0 6
42384: PUSH
42385: LD_VAR 0 2
42389: PUSH
42390: LD_VAR 0 5
42394: ARRAY
42395: ARRAY
42396: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42397: LD_ADDR_VAR 0 7
42401: PUSH
42402: LD_VAR 0 7
42406: PUSH
42407: LD_VAR 0 6
42411: PUSH
42412: EMPTY
42413: LIST
42414: ADD
42415: ST_TO_ADDR
// end ;
42416: GO 42372
42418: POP
42419: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42420: LD_ADDR_VAR 0 6
42424: PUSH
42425: LD_VAR 0 6
42429: PPUSH
42430: LD_VAR 0 2
42434: PUSH
42435: LD_VAR 0 2
42439: ARRAY
42440: PPUSH
42441: LD_VAR 0 3
42445: PPUSH
42446: CALL_OW 1
42450: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42451: LD_ADDR_VAR 0 7
42455: PUSH
42456: LD_VAR 0 7
42460: PPUSH
42461: LD_VAR 0 7
42465: PPUSH
42466: LD_VAR 0 6
42470: PPUSH
42471: CALL_OW 1
42475: ST_TO_ADDR
// for i = s_arr downto 2 do
42476: LD_ADDR_VAR 0 5
42480: PUSH
42481: DOUBLE
42482: LD_VAR 0 7
42486: INC
42487: ST_TO_ADDR
42488: LD_INT 2
42490: PUSH
42491: FOR_DOWNTO
42492: IFFALSE 42576
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42494: LD_ADDR_VAR 0 6
42498: PUSH
42499: LD_VAR 0 7
42503: PUSH
42504: LD_VAR 0 5
42508: PUSH
42509: LD_INT 1
42511: MINUS
42512: ARRAY
42513: PPUSH
42514: LD_VAR 0 2
42518: PUSH
42519: LD_VAR 0 5
42523: PUSH
42524: LD_INT 1
42526: MINUS
42527: ARRAY
42528: PPUSH
42529: LD_VAR 0 7
42533: PUSH
42534: LD_VAR 0 5
42538: ARRAY
42539: PPUSH
42540: CALL_OW 1
42544: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42545: LD_ADDR_VAR 0 7
42549: PUSH
42550: LD_VAR 0 7
42554: PPUSH
42555: LD_VAR 0 5
42559: PUSH
42560: LD_INT 1
42562: MINUS
42563: PPUSH
42564: LD_VAR 0 6
42568: PPUSH
42569: CALL_OW 1
42573: ST_TO_ADDR
// end ;
42574: GO 42491
42576: POP
42577: POP
// result := s_arr [ 1 ] ;
42578: LD_ADDR_VAR 0 4
42582: PUSH
42583: LD_VAR 0 7
42587: PUSH
42588: LD_INT 1
42590: ARRAY
42591: ST_TO_ADDR
// end ; end ;
42592: LD_VAR 0 4
42596: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42597: LD_INT 0
42599: PPUSH
42600: PPUSH
// if not list then
42601: LD_VAR 0 1
42605: NOT
42606: IFFALSE 42610
// exit ;
42608: GO 42701
// i := list [ pos1 ] ;
42610: LD_ADDR_VAR 0 5
42614: PUSH
42615: LD_VAR 0 1
42619: PUSH
42620: LD_VAR 0 2
42624: ARRAY
42625: ST_TO_ADDR
// if not i then
42626: LD_VAR 0 5
42630: NOT
42631: IFFALSE 42635
// exit ;
42633: GO 42701
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42635: LD_ADDR_VAR 0 1
42639: PUSH
42640: LD_VAR 0 1
42644: PPUSH
42645: LD_VAR 0 2
42649: PPUSH
42650: LD_VAR 0 1
42654: PUSH
42655: LD_VAR 0 3
42659: ARRAY
42660: PPUSH
42661: CALL_OW 1
42665: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42666: LD_ADDR_VAR 0 1
42670: PUSH
42671: LD_VAR 0 1
42675: PPUSH
42676: LD_VAR 0 3
42680: PPUSH
42681: LD_VAR 0 5
42685: PPUSH
42686: CALL_OW 1
42690: ST_TO_ADDR
// result := list ;
42691: LD_ADDR_VAR 0 4
42695: PUSH
42696: LD_VAR 0 1
42700: ST_TO_ADDR
// end ;
42701: LD_VAR 0 4
42705: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42706: LD_INT 0
42708: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42709: LD_ADDR_VAR 0 5
42713: PUSH
42714: LD_VAR 0 1
42718: PPUSH
42719: CALL_OW 250
42723: PPUSH
42724: LD_VAR 0 1
42728: PPUSH
42729: CALL_OW 251
42733: PPUSH
42734: LD_VAR 0 2
42738: PPUSH
42739: LD_VAR 0 3
42743: PPUSH
42744: LD_VAR 0 4
42748: PPUSH
42749: CALL 42759 0 5
42753: ST_TO_ADDR
// end ;
42754: LD_VAR 0 5
42758: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42759: LD_INT 0
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
// if not list then
42765: LD_VAR 0 3
42769: NOT
42770: IFFALSE 42774
// exit ;
42772: GO 43162
// result := [ ] ;
42774: LD_ADDR_VAR 0 6
42778: PUSH
42779: EMPTY
42780: ST_TO_ADDR
// for i in list do
42781: LD_ADDR_VAR 0 7
42785: PUSH
42786: LD_VAR 0 3
42790: PUSH
42791: FOR_IN
42792: IFFALSE 42994
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42794: LD_ADDR_VAR 0 9
42798: PUSH
42799: LD_VAR 0 7
42803: PPUSH
42804: LD_VAR 0 1
42808: PPUSH
42809: LD_VAR 0 2
42813: PPUSH
42814: CALL_OW 297
42818: ST_TO_ADDR
// if not result then
42819: LD_VAR 0 6
42823: NOT
42824: IFFALSE 42850
// result := [ [ i , tmp ] ] else
42826: LD_ADDR_VAR 0 6
42830: PUSH
42831: LD_VAR 0 7
42835: PUSH
42836: LD_VAR 0 9
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: EMPTY
42846: LIST
42847: ST_TO_ADDR
42848: GO 42992
// begin if result [ result ] [ 2 ] < tmp then
42850: LD_VAR 0 6
42854: PUSH
42855: LD_VAR 0 6
42859: ARRAY
42860: PUSH
42861: LD_INT 2
42863: ARRAY
42864: PUSH
42865: LD_VAR 0 9
42869: LESS
42870: IFFALSE 42912
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42872: LD_ADDR_VAR 0 6
42876: PUSH
42877: LD_VAR 0 6
42881: PPUSH
42882: LD_VAR 0 6
42886: PUSH
42887: LD_INT 1
42889: PLUS
42890: PPUSH
42891: LD_VAR 0 7
42895: PUSH
42896: LD_VAR 0 9
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PPUSH
42905: CALL_OW 2
42909: ST_TO_ADDR
42910: GO 42992
// for j = 1 to result do
42912: LD_ADDR_VAR 0 8
42916: PUSH
42917: DOUBLE
42918: LD_INT 1
42920: DEC
42921: ST_TO_ADDR
42922: LD_VAR 0 6
42926: PUSH
42927: FOR_TO
42928: IFFALSE 42990
// begin if tmp < result [ j ] [ 2 ] then
42930: LD_VAR 0 9
42934: PUSH
42935: LD_VAR 0 6
42939: PUSH
42940: LD_VAR 0 8
42944: ARRAY
42945: PUSH
42946: LD_INT 2
42948: ARRAY
42949: LESS
42950: IFFALSE 42988
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42952: LD_ADDR_VAR 0 6
42956: PUSH
42957: LD_VAR 0 6
42961: PPUSH
42962: LD_VAR 0 8
42966: PPUSH
42967: LD_VAR 0 7
42971: PUSH
42972: LD_VAR 0 9
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PPUSH
42981: CALL_OW 2
42985: ST_TO_ADDR
// break ;
42986: GO 42990
// end ; end ;
42988: GO 42927
42990: POP
42991: POP
// end ; end ;
42992: GO 42791
42994: POP
42995: POP
// if result and not asc then
42996: LD_VAR 0 6
43000: PUSH
43001: LD_VAR 0 4
43005: NOT
43006: AND
43007: IFFALSE 43082
// begin tmp := result ;
43009: LD_ADDR_VAR 0 9
43013: PUSH
43014: LD_VAR 0 6
43018: ST_TO_ADDR
// for i = tmp downto 1 do
43019: LD_ADDR_VAR 0 7
43023: PUSH
43024: DOUBLE
43025: LD_VAR 0 9
43029: INC
43030: ST_TO_ADDR
43031: LD_INT 1
43033: PUSH
43034: FOR_DOWNTO
43035: IFFALSE 43080
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43037: LD_ADDR_VAR 0 6
43041: PUSH
43042: LD_VAR 0 6
43046: PPUSH
43047: LD_VAR 0 9
43051: PUSH
43052: LD_VAR 0 7
43056: MINUS
43057: PUSH
43058: LD_INT 1
43060: PLUS
43061: PPUSH
43062: LD_VAR 0 9
43066: PUSH
43067: LD_VAR 0 7
43071: ARRAY
43072: PPUSH
43073: CALL_OW 1
43077: ST_TO_ADDR
43078: GO 43034
43080: POP
43081: POP
// end ; tmp := [ ] ;
43082: LD_ADDR_VAR 0 9
43086: PUSH
43087: EMPTY
43088: ST_TO_ADDR
// if mode then
43089: LD_VAR 0 5
43093: IFFALSE 43162
// begin for i = 1 to result do
43095: LD_ADDR_VAR 0 7
43099: PUSH
43100: DOUBLE
43101: LD_INT 1
43103: DEC
43104: ST_TO_ADDR
43105: LD_VAR 0 6
43109: PUSH
43110: FOR_TO
43111: IFFALSE 43150
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43113: LD_ADDR_VAR 0 9
43117: PUSH
43118: LD_VAR 0 9
43122: PPUSH
43123: LD_VAR 0 7
43127: PPUSH
43128: LD_VAR 0 6
43132: PUSH
43133: LD_VAR 0 7
43137: ARRAY
43138: PUSH
43139: LD_INT 1
43141: ARRAY
43142: PPUSH
43143: CALL_OW 1
43147: ST_TO_ADDR
43148: GO 43110
43150: POP
43151: POP
// result := tmp ;
43152: LD_ADDR_VAR 0 6
43156: PUSH
43157: LD_VAR 0 9
43161: ST_TO_ADDR
// end ; end ;
43162: LD_VAR 0 6
43166: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43167: LD_INT 0
43169: PPUSH
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43175: LD_ADDR_VAR 0 5
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// if not x or not y then
43197: LD_VAR 0 2
43201: NOT
43202: PUSH
43203: LD_VAR 0 3
43207: NOT
43208: OR
43209: IFFALSE 43213
// exit ;
43211: GO 44863
// if not range then
43213: LD_VAR 0 4
43217: NOT
43218: IFFALSE 43228
// range := 10 ;
43220: LD_ADDR_VAR 0 4
43224: PUSH
43225: LD_INT 10
43227: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43228: LD_ADDR_VAR 0 8
43232: PUSH
43233: LD_INT 81
43235: PUSH
43236: LD_VAR 0 1
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 92
43247: PUSH
43248: LD_VAR 0 2
43252: PUSH
43253: LD_VAR 0 3
43257: PUSH
43258: LD_VAR 0 4
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: PUSH
43272: LD_INT 21
43274: PUSH
43275: LD_INT 3
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: PPUSH
43291: CALL_OW 69
43295: ST_TO_ADDR
// if not tmp then
43296: LD_VAR 0 8
43300: NOT
43301: IFFALSE 43305
// exit ;
43303: GO 44863
// for i in tmp do
43305: LD_ADDR_VAR 0 6
43309: PUSH
43310: LD_VAR 0 8
43314: PUSH
43315: FOR_IN
43316: IFFALSE 44838
// begin points := [ 0 , 0 , 0 ] ;
43318: LD_ADDR_VAR 0 9
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// bpoints := 1 ;
43337: LD_ADDR_VAR 0 10
43341: PUSH
43342: LD_INT 1
43344: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43345: LD_VAR 0 6
43349: PPUSH
43350: CALL_OW 247
43354: PUSH
43355: LD_INT 1
43357: DOUBLE
43358: EQUAL
43359: IFTRUE 43363
43361: GO 43941
43363: POP
// begin if GetClass ( i ) = 1 then
43364: LD_VAR 0 6
43368: PPUSH
43369: CALL_OW 257
43373: PUSH
43374: LD_INT 1
43376: EQUAL
43377: IFFALSE 43398
// points := [ 10 , 5 , 3 ] ;
43379: LD_ADDR_VAR 0 9
43383: PUSH
43384: LD_INT 10
43386: PUSH
43387: LD_INT 5
43389: PUSH
43390: LD_INT 3
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43398: LD_VAR 0 6
43402: PPUSH
43403: CALL_OW 257
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: LD_INT 4
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: IN
43422: IFFALSE 43443
// points := [ 3 , 2 , 1 ] ;
43424: LD_ADDR_VAR 0 9
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: LIST
43442: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43443: LD_VAR 0 6
43447: PPUSH
43448: CALL_OW 257
43452: PUSH
43453: LD_INT 5
43455: EQUAL
43456: IFFALSE 43477
// points := [ 130 , 5 , 2 ] ;
43458: LD_ADDR_VAR 0 9
43462: PUSH
43463: LD_INT 130
43465: PUSH
43466: LD_INT 5
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43477: LD_VAR 0 6
43481: PPUSH
43482: CALL_OW 257
43486: PUSH
43487: LD_INT 8
43489: EQUAL
43490: IFFALSE 43511
// points := [ 35 , 35 , 30 ] ;
43492: LD_ADDR_VAR 0 9
43496: PUSH
43497: LD_INT 35
43499: PUSH
43500: LD_INT 35
43502: PUSH
43503: LD_INT 30
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43511: LD_VAR 0 6
43515: PPUSH
43516: CALL_OW 257
43520: PUSH
43521: LD_INT 9
43523: EQUAL
43524: IFFALSE 43545
// points := [ 20 , 55 , 40 ] ;
43526: LD_ADDR_VAR 0 9
43530: PUSH
43531: LD_INT 20
43533: PUSH
43534: LD_INT 55
43536: PUSH
43537: LD_INT 40
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43545: LD_VAR 0 6
43549: PPUSH
43550: CALL_OW 257
43554: PUSH
43555: LD_INT 12
43557: PUSH
43558: LD_INT 16
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: IN
43565: IFFALSE 43586
// points := [ 5 , 3 , 2 ] ;
43567: LD_ADDR_VAR 0 9
43571: PUSH
43572: LD_INT 5
43574: PUSH
43575: LD_INT 3
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43586: LD_VAR 0 6
43590: PPUSH
43591: CALL_OW 257
43595: PUSH
43596: LD_INT 17
43598: EQUAL
43599: IFFALSE 43620
// points := [ 100 , 50 , 75 ] ;
43601: LD_ADDR_VAR 0 9
43605: PUSH
43606: LD_INT 100
43608: PUSH
43609: LD_INT 50
43611: PUSH
43612: LD_INT 75
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: LIST
43619: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43620: LD_VAR 0 6
43624: PPUSH
43625: CALL_OW 257
43629: PUSH
43630: LD_INT 15
43632: EQUAL
43633: IFFALSE 43654
// points := [ 10 , 5 , 3 ] ;
43635: LD_ADDR_VAR 0 9
43639: PUSH
43640: LD_INT 10
43642: PUSH
43643: LD_INT 5
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43654: LD_VAR 0 6
43658: PPUSH
43659: CALL_OW 257
43663: PUSH
43664: LD_INT 14
43666: EQUAL
43667: IFFALSE 43688
// points := [ 10 , 0 , 0 ] ;
43669: LD_ADDR_VAR 0 9
43673: PUSH
43674: LD_INT 10
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43688: LD_VAR 0 6
43692: PPUSH
43693: CALL_OW 257
43697: PUSH
43698: LD_INT 11
43700: EQUAL
43701: IFFALSE 43722
// points := [ 30 , 10 , 5 ] ;
43703: LD_ADDR_VAR 0 9
43707: PUSH
43708: LD_INT 30
43710: PUSH
43711: LD_INT 10
43713: PUSH
43714: LD_INT 5
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43722: LD_VAR 0 1
43726: PPUSH
43727: LD_INT 5
43729: PPUSH
43730: CALL_OW 321
43734: PUSH
43735: LD_INT 2
43737: EQUAL
43738: IFFALSE 43755
// bpoints := bpoints * 1.8 ;
43740: LD_ADDR_VAR 0 10
43744: PUSH
43745: LD_VAR 0 10
43749: PUSH
43750: LD_REAL  1.80000000000000E+0000
43753: MUL
43754: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43755: LD_VAR 0 6
43759: PPUSH
43760: CALL_OW 257
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 4
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: IN
43783: PUSH
43784: LD_VAR 0 1
43788: PPUSH
43789: LD_INT 51
43791: PPUSH
43792: CALL_OW 321
43796: PUSH
43797: LD_INT 2
43799: EQUAL
43800: AND
43801: IFFALSE 43818
// bpoints := bpoints * 1.2 ;
43803: LD_ADDR_VAR 0 10
43807: PUSH
43808: LD_VAR 0 10
43812: PUSH
43813: LD_REAL  1.20000000000000E+0000
43816: MUL
43817: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43818: LD_VAR 0 6
43822: PPUSH
43823: CALL_OW 257
43827: PUSH
43828: LD_INT 5
43830: PUSH
43831: LD_INT 7
43833: PUSH
43834: LD_INT 9
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: IN
43842: PUSH
43843: LD_VAR 0 1
43847: PPUSH
43848: LD_INT 52
43850: PPUSH
43851: CALL_OW 321
43855: PUSH
43856: LD_INT 2
43858: EQUAL
43859: AND
43860: IFFALSE 43877
// bpoints := bpoints * 1.5 ;
43862: LD_ADDR_VAR 0 10
43866: PUSH
43867: LD_VAR 0 10
43871: PUSH
43872: LD_REAL  1.50000000000000E+0000
43875: MUL
43876: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43877: LD_VAR 0 1
43881: PPUSH
43882: LD_INT 66
43884: PPUSH
43885: CALL_OW 321
43889: PUSH
43890: LD_INT 2
43892: EQUAL
43893: IFFALSE 43910
// bpoints := bpoints * 1.1 ;
43895: LD_ADDR_VAR 0 10
43899: PUSH
43900: LD_VAR 0 10
43904: PUSH
43905: LD_REAL  1.10000000000000E+0000
43908: MUL
43909: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43910: LD_ADDR_VAR 0 10
43914: PUSH
43915: LD_VAR 0 10
43919: PUSH
43920: LD_VAR 0 6
43924: PPUSH
43925: LD_INT 1
43927: PPUSH
43928: CALL_OW 259
43932: PUSH
43933: LD_REAL  1.15000000000000E+0000
43936: MUL
43937: MUL
43938: ST_TO_ADDR
// end ; unit_vehicle :
43939: GO 44767
43941: LD_INT 2
43943: DOUBLE
43944: EQUAL
43945: IFTRUE 43949
43947: GO 44755
43949: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43950: LD_VAR 0 6
43954: PPUSH
43955: CALL_OW 264
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 42
43965: PUSH
43966: LD_INT 24
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: IN
43974: IFFALSE 43995
// points := [ 25 , 5 , 3 ] ;
43976: LD_ADDR_VAR 0 9
43980: PUSH
43981: LD_INT 25
43983: PUSH
43984: LD_INT 5
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43995: LD_VAR 0 6
43999: PPUSH
44000: CALL_OW 264
44004: PUSH
44005: LD_INT 4
44007: PUSH
44008: LD_INT 43
44010: PUSH
44011: LD_INT 25
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: IN
44019: IFFALSE 44040
// points := [ 40 , 15 , 5 ] ;
44021: LD_ADDR_VAR 0 9
44025: PUSH
44026: LD_INT 40
44028: PUSH
44029: LD_INT 15
44031: PUSH
44032: LD_INT 5
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: LIST
44039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44040: LD_VAR 0 6
44044: PPUSH
44045: CALL_OW 264
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: LD_INT 23
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: IN
44060: IFFALSE 44081
// points := [ 7 , 25 , 8 ] ;
44062: LD_ADDR_VAR 0 9
44066: PUSH
44067: LD_INT 7
44069: PUSH
44070: LD_INT 25
44072: PUSH
44073: LD_INT 8
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44081: LD_VAR 0 6
44085: PPUSH
44086: CALL_OW 264
44090: PUSH
44091: LD_INT 5
44093: PUSH
44094: LD_INT 27
44096: PUSH
44097: LD_INT 44
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: IN
44105: IFFALSE 44126
// points := [ 14 , 50 , 16 ] ;
44107: LD_ADDR_VAR 0 9
44111: PUSH
44112: LD_INT 14
44114: PUSH
44115: LD_INT 50
44117: PUSH
44118: LD_INT 16
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44126: LD_VAR 0 6
44130: PPUSH
44131: CALL_OW 264
44135: PUSH
44136: LD_INT 6
44138: PUSH
44139: LD_INT 46
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: IN
44146: IFFALSE 44167
// points := [ 32 , 120 , 70 ] ;
44148: LD_ADDR_VAR 0 9
44152: PUSH
44153: LD_INT 32
44155: PUSH
44156: LD_INT 120
44158: PUSH
44159: LD_INT 70
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44167: LD_VAR 0 6
44171: PPUSH
44172: CALL_OW 264
44176: PUSH
44177: LD_INT 7
44179: PUSH
44180: LD_INT 28
44182: PUSH
44183: LD_INT 45
44185: PUSH
44186: LD_INT 92
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: IN
44195: IFFALSE 44216
// points := [ 35 , 20 , 45 ] ;
44197: LD_ADDR_VAR 0 9
44201: PUSH
44202: LD_INT 35
44204: PUSH
44205: LD_INT 20
44207: PUSH
44208: LD_INT 45
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: LIST
44215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44216: LD_VAR 0 6
44220: PPUSH
44221: CALL_OW 264
44225: PUSH
44226: LD_INT 47
44228: PUSH
44229: EMPTY
44230: LIST
44231: IN
44232: IFFALSE 44253
// points := [ 67 , 45 , 75 ] ;
44234: LD_ADDR_VAR 0 9
44238: PUSH
44239: LD_INT 67
44241: PUSH
44242: LD_INT 45
44244: PUSH
44245: LD_INT 75
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44253: LD_VAR 0 6
44257: PPUSH
44258: CALL_OW 264
44262: PUSH
44263: LD_INT 26
44265: PUSH
44266: EMPTY
44267: LIST
44268: IN
44269: IFFALSE 44290
// points := [ 120 , 30 , 80 ] ;
44271: LD_ADDR_VAR 0 9
44275: PUSH
44276: LD_INT 120
44278: PUSH
44279: LD_INT 30
44281: PUSH
44282: LD_INT 80
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: LIST
44289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44290: LD_VAR 0 6
44294: PPUSH
44295: CALL_OW 264
44299: PUSH
44300: LD_INT 22
44302: PUSH
44303: EMPTY
44304: LIST
44305: IN
44306: IFFALSE 44327
// points := [ 40 , 1 , 1 ] ;
44308: LD_ADDR_VAR 0 9
44312: PUSH
44313: LD_INT 40
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44327: LD_VAR 0 6
44331: PPUSH
44332: CALL_OW 264
44336: PUSH
44337: LD_INT 29
44339: PUSH
44340: EMPTY
44341: LIST
44342: IN
44343: IFFALSE 44364
// points := [ 70 , 200 , 400 ] ;
44345: LD_ADDR_VAR 0 9
44349: PUSH
44350: LD_INT 70
44352: PUSH
44353: LD_INT 200
44355: PUSH
44356: LD_INT 400
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44364: LD_VAR 0 6
44368: PPUSH
44369: CALL_OW 264
44373: PUSH
44374: LD_INT 14
44376: PUSH
44377: LD_INT 53
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: IN
44384: IFFALSE 44405
// points := [ 40 , 10 , 20 ] ;
44386: LD_ADDR_VAR 0 9
44390: PUSH
44391: LD_INT 40
44393: PUSH
44394: LD_INT 10
44396: PUSH
44397: LD_INT 20
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: LIST
44404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44405: LD_VAR 0 6
44409: PPUSH
44410: CALL_OW 264
44414: PUSH
44415: LD_INT 9
44417: PUSH
44418: EMPTY
44419: LIST
44420: IN
44421: IFFALSE 44442
// points := [ 5 , 70 , 20 ] ;
44423: LD_ADDR_VAR 0 9
44427: PUSH
44428: LD_INT 5
44430: PUSH
44431: LD_INT 70
44433: PUSH
44434: LD_INT 20
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44442: LD_VAR 0 6
44446: PPUSH
44447: CALL_OW 264
44451: PUSH
44452: LD_INT 10
44454: PUSH
44455: EMPTY
44456: LIST
44457: IN
44458: IFFALSE 44479
// points := [ 35 , 110 , 70 ] ;
44460: LD_ADDR_VAR 0 9
44464: PUSH
44465: LD_INT 35
44467: PUSH
44468: LD_INT 110
44470: PUSH
44471: LD_INT 70
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44479: LD_VAR 0 6
44483: PPUSH
44484: CALL_OW 265
44488: PUSH
44489: LD_INT 25
44491: EQUAL
44492: IFFALSE 44513
// points := [ 80 , 65 , 100 ] ;
44494: LD_ADDR_VAR 0 9
44498: PUSH
44499: LD_INT 80
44501: PUSH
44502: LD_INT 65
44504: PUSH
44505: LD_INT 100
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44513: LD_VAR 0 6
44517: PPUSH
44518: CALL_OW 263
44522: PUSH
44523: LD_INT 1
44525: EQUAL
44526: IFFALSE 44561
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44528: LD_ADDR_VAR 0 10
44532: PUSH
44533: LD_VAR 0 10
44537: PUSH
44538: LD_VAR 0 6
44542: PPUSH
44543: CALL_OW 311
44547: PPUSH
44548: LD_INT 3
44550: PPUSH
44551: CALL_OW 259
44555: PUSH
44556: LD_INT 4
44558: MUL
44559: MUL
44560: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44561: LD_VAR 0 6
44565: PPUSH
44566: CALL_OW 263
44570: PUSH
44571: LD_INT 2
44573: EQUAL
44574: IFFALSE 44625
// begin j := IsControledBy ( i ) ;
44576: LD_ADDR_VAR 0 7
44580: PUSH
44581: LD_VAR 0 6
44585: PPUSH
44586: CALL_OW 312
44590: ST_TO_ADDR
// if j then
44591: LD_VAR 0 7
44595: IFFALSE 44625
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44597: LD_ADDR_VAR 0 10
44601: PUSH
44602: LD_VAR 0 10
44606: PUSH
44607: LD_VAR 0 7
44611: PPUSH
44612: LD_INT 3
44614: PPUSH
44615: CALL_OW 259
44619: PUSH
44620: LD_INT 3
44622: MUL
44623: MUL
44624: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44625: LD_VAR 0 6
44629: PPUSH
44630: CALL_OW 264
44634: PUSH
44635: LD_INT 5
44637: PUSH
44638: LD_INT 6
44640: PUSH
44641: LD_INT 46
44643: PUSH
44644: LD_INT 44
44646: PUSH
44647: LD_INT 47
44649: PUSH
44650: LD_INT 45
44652: PUSH
44653: LD_INT 28
44655: PUSH
44656: LD_INT 7
44658: PUSH
44659: LD_INT 27
44661: PUSH
44662: LD_INT 29
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: IN
44677: PUSH
44678: LD_VAR 0 1
44682: PPUSH
44683: LD_INT 52
44685: PPUSH
44686: CALL_OW 321
44690: PUSH
44691: LD_INT 2
44693: EQUAL
44694: AND
44695: IFFALSE 44712
// bpoints := bpoints * 1.2 ;
44697: LD_ADDR_VAR 0 10
44701: PUSH
44702: LD_VAR 0 10
44706: PUSH
44707: LD_REAL  1.20000000000000E+0000
44710: MUL
44711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44712: LD_VAR 0 6
44716: PPUSH
44717: CALL_OW 264
44721: PUSH
44722: LD_INT 6
44724: PUSH
44725: LD_INT 46
44727: PUSH
44728: LD_INT 47
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: IN
44736: IFFALSE 44753
// bpoints := bpoints * 1.2 ;
44738: LD_ADDR_VAR 0 10
44742: PUSH
44743: LD_VAR 0 10
44747: PUSH
44748: LD_REAL  1.20000000000000E+0000
44751: MUL
44752: ST_TO_ADDR
// end ; unit_building :
44753: GO 44767
44755: LD_INT 3
44757: DOUBLE
44758: EQUAL
44759: IFTRUE 44763
44761: GO 44766
44763: POP
// ; end ;
44764: GO 44767
44766: POP
// for j = 1 to 3 do
44767: LD_ADDR_VAR 0 7
44771: PUSH
44772: DOUBLE
44773: LD_INT 1
44775: DEC
44776: ST_TO_ADDR
44777: LD_INT 3
44779: PUSH
44780: FOR_TO
44781: IFFALSE 44834
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44783: LD_ADDR_VAR 0 5
44787: PUSH
44788: LD_VAR 0 5
44792: PPUSH
44793: LD_VAR 0 7
44797: PPUSH
44798: LD_VAR 0 5
44802: PUSH
44803: LD_VAR 0 7
44807: ARRAY
44808: PUSH
44809: LD_VAR 0 9
44813: PUSH
44814: LD_VAR 0 7
44818: ARRAY
44819: PUSH
44820: LD_VAR 0 10
44824: MUL
44825: PLUS
44826: PPUSH
44827: CALL_OW 1
44831: ST_TO_ADDR
44832: GO 44780
44834: POP
44835: POP
// end ;
44836: GO 43315
44838: POP
44839: POP
// result := Replace ( result , 4 , tmp ) ;
44840: LD_ADDR_VAR 0 5
44844: PUSH
44845: LD_VAR 0 5
44849: PPUSH
44850: LD_INT 4
44852: PPUSH
44853: LD_VAR 0 8
44857: PPUSH
44858: CALL_OW 1
44862: ST_TO_ADDR
// end ;
44863: LD_VAR 0 5
44867: RET
// export function DangerAtRange ( unit , range ) ; begin
44868: LD_INT 0
44870: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44871: LD_ADDR_VAR 0 3
44875: PUSH
44876: LD_VAR 0 1
44880: PPUSH
44881: CALL_OW 255
44885: PPUSH
44886: LD_VAR 0 1
44890: PPUSH
44891: CALL_OW 250
44895: PPUSH
44896: LD_VAR 0 1
44900: PPUSH
44901: CALL_OW 251
44905: PPUSH
44906: LD_VAR 0 2
44910: PPUSH
44911: CALL 43167 0 4
44915: ST_TO_ADDR
// end ;
44916: LD_VAR 0 3
44920: RET
// export function DangerInArea ( side , area ) ; begin
44921: LD_INT 0
44923: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44924: LD_ADDR_VAR 0 3
44928: PUSH
44929: LD_VAR 0 2
44933: PPUSH
44934: LD_INT 81
44936: PUSH
44937: LD_VAR 0 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PPUSH
44946: CALL_OW 70
44950: ST_TO_ADDR
// end ;
44951: LD_VAR 0 3
44955: RET
// export function IsExtension ( b ) ; begin
44956: LD_INT 0
44958: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44959: LD_ADDR_VAR 0 2
44963: PUSH
44964: LD_VAR 0 1
44968: PUSH
44969: LD_INT 23
44971: PUSH
44972: LD_INT 20
44974: PUSH
44975: LD_INT 22
44977: PUSH
44978: LD_INT 17
44980: PUSH
44981: LD_INT 24
44983: PUSH
44984: LD_INT 21
44986: PUSH
44987: LD_INT 19
44989: PUSH
44990: LD_INT 16
44992: PUSH
44993: LD_INT 25
44995: PUSH
44996: LD_INT 18
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: IN
45011: ST_TO_ADDR
// end ;
45012: LD_VAR 0 2
45016: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45017: LD_INT 0
45019: PPUSH
45020: PPUSH
45021: PPUSH
// result := [ ] ;
45022: LD_ADDR_VAR 0 4
45026: PUSH
45027: EMPTY
45028: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45029: LD_ADDR_VAR 0 5
45033: PUSH
45034: LD_VAR 0 2
45038: PPUSH
45039: LD_INT 21
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PPUSH
45049: CALL_OW 70
45053: ST_TO_ADDR
// if not tmp then
45054: LD_VAR 0 5
45058: NOT
45059: IFFALSE 45063
// exit ;
45061: GO 45127
// if checkLink then
45063: LD_VAR 0 3
45067: IFFALSE 45117
// begin for i in tmp do
45069: LD_ADDR_VAR 0 6
45073: PUSH
45074: LD_VAR 0 5
45078: PUSH
45079: FOR_IN
45080: IFFALSE 45115
// if GetBase ( i ) <> base then
45082: LD_VAR 0 6
45086: PPUSH
45087: CALL_OW 274
45091: PUSH
45092: LD_VAR 0 1
45096: NONEQUAL
45097: IFFALSE 45113
// ComLinkToBase ( base , i ) ;
45099: LD_VAR 0 1
45103: PPUSH
45104: LD_VAR 0 6
45108: PPUSH
45109: CALL_OW 169
45113: GO 45079
45115: POP
45116: POP
// end ; result := tmp ;
45117: LD_ADDR_VAR 0 4
45121: PUSH
45122: LD_VAR 0 5
45126: ST_TO_ADDR
// end ;
45127: LD_VAR 0 4
45131: RET
// export function ComComplete ( units , b ) ; var i ; begin
45132: LD_INT 0
45134: PPUSH
45135: PPUSH
// if not units then
45136: LD_VAR 0 1
45140: NOT
45141: IFFALSE 45145
// exit ;
45143: GO 45235
// for i in units do
45145: LD_ADDR_VAR 0 4
45149: PUSH
45150: LD_VAR 0 1
45154: PUSH
45155: FOR_IN
45156: IFFALSE 45233
// if BuildingStatus ( b ) = bs_build then
45158: LD_VAR 0 2
45162: PPUSH
45163: CALL_OW 461
45167: PUSH
45168: LD_INT 1
45170: EQUAL
45171: IFFALSE 45231
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45173: LD_VAR 0 4
45177: PPUSH
45178: LD_STRING h
45180: PUSH
45181: LD_VAR 0 2
45185: PPUSH
45186: CALL_OW 250
45190: PUSH
45191: LD_VAR 0 2
45195: PPUSH
45196: CALL_OW 251
45200: PUSH
45201: LD_VAR 0 2
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: PPUSH
45227: CALL_OW 446
45231: GO 45155
45233: POP
45234: POP
// end ;
45235: LD_VAR 0 3
45239: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45240: LD_INT 0
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45248: LD_VAR 0 1
45252: NOT
45253: PUSH
45254: LD_VAR 0 1
45258: PPUSH
45259: CALL_OW 263
45263: PUSH
45264: LD_INT 2
45266: NONEQUAL
45267: OR
45268: IFFALSE 45272
// exit ;
45270: GO 45588
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45272: LD_ADDR_VAR 0 6
45276: PUSH
45277: LD_INT 22
45279: PUSH
45280: LD_VAR 0 1
45284: PPUSH
45285: CALL_OW 255
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 30
45299: PUSH
45300: LD_INT 36
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 34
45309: PUSH
45310: LD_INT 31
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PPUSH
45326: CALL_OW 69
45330: ST_TO_ADDR
// if not tmp then
45331: LD_VAR 0 6
45335: NOT
45336: IFFALSE 45340
// exit ;
45338: GO 45588
// result := [ ] ;
45340: LD_ADDR_VAR 0 2
45344: PUSH
45345: EMPTY
45346: ST_TO_ADDR
// for i in tmp do
45347: LD_ADDR_VAR 0 3
45351: PUSH
45352: LD_VAR 0 6
45356: PUSH
45357: FOR_IN
45358: IFFALSE 45429
// begin t := UnitsInside ( i ) ;
45360: LD_ADDR_VAR 0 4
45364: PUSH
45365: LD_VAR 0 3
45369: PPUSH
45370: CALL_OW 313
45374: ST_TO_ADDR
// if t then
45375: LD_VAR 0 4
45379: IFFALSE 45427
// for j in t do
45381: LD_ADDR_VAR 0 7
45385: PUSH
45386: LD_VAR 0 4
45390: PUSH
45391: FOR_IN
45392: IFFALSE 45425
// result := Replace ( result , result + 1 , j ) ;
45394: LD_ADDR_VAR 0 2
45398: PUSH
45399: LD_VAR 0 2
45403: PPUSH
45404: LD_VAR 0 2
45408: PUSH
45409: LD_INT 1
45411: PLUS
45412: PPUSH
45413: LD_VAR 0 7
45417: PPUSH
45418: CALL_OW 1
45422: ST_TO_ADDR
45423: GO 45391
45425: POP
45426: POP
// end ;
45427: GO 45357
45429: POP
45430: POP
// if not result then
45431: LD_VAR 0 2
45435: NOT
45436: IFFALSE 45440
// exit ;
45438: GO 45588
// mech := result [ 1 ] ;
45440: LD_ADDR_VAR 0 5
45444: PUSH
45445: LD_VAR 0 2
45449: PUSH
45450: LD_INT 1
45452: ARRAY
45453: ST_TO_ADDR
// if result > 1 then
45454: LD_VAR 0 2
45458: PUSH
45459: LD_INT 1
45461: GREATER
45462: IFFALSE 45574
// begin for i = 2 to result do
45464: LD_ADDR_VAR 0 3
45468: PUSH
45469: DOUBLE
45470: LD_INT 2
45472: DEC
45473: ST_TO_ADDR
45474: LD_VAR 0 2
45478: PUSH
45479: FOR_TO
45480: IFFALSE 45572
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45482: LD_ADDR_VAR 0 4
45486: PUSH
45487: LD_VAR 0 2
45491: PUSH
45492: LD_VAR 0 3
45496: ARRAY
45497: PPUSH
45498: LD_INT 3
45500: PPUSH
45501: CALL_OW 259
45505: PUSH
45506: LD_VAR 0 2
45510: PUSH
45511: LD_VAR 0 3
45515: ARRAY
45516: PPUSH
45517: CALL_OW 432
45521: MINUS
45522: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45523: LD_VAR 0 4
45527: PUSH
45528: LD_VAR 0 5
45532: PPUSH
45533: LD_INT 3
45535: PPUSH
45536: CALL_OW 259
45540: PUSH
45541: LD_VAR 0 5
45545: PPUSH
45546: CALL_OW 432
45550: MINUS
45551: GREATEREQUAL
45552: IFFALSE 45570
// mech := result [ i ] ;
45554: LD_ADDR_VAR 0 5
45558: PUSH
45559: LD_VAR 0 2
45563: PUSH
45564: LD_VAR 0 3
45568: ARRAY
45569: ST_TO_ADDR
// end ;
45570: GO 45479
45572: POP
45573: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45574: LD_VAR 0 1
45578: PPUSH
45579: LD_VAR 0 5
45583: PPUSH
45584: CALL_OW 135
// end ;
45588: LD_VAR 0 2
45592: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45593: LD_INT 0
45595: PPUSH
45596: PPUSH
45597: PPUSH
45598: PPUSH
45599: PPUSH
45600: PPUSH
45601: PPUSH
45602: PPUSH
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
// result := [ ] ;
45608: LD_ADDR_VAR 0 7
45612: PUSH
45613: EMPTY
45614: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45615: LD_VAR 0 1
45619: PPUSH
45620: CALL_OW 266
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: IN
45635: NOT
45636: IFFALSE 45640
// exit ;
45638: GO 47274
// if name then
45640: LD_VAR 0 3
45644: IFFALSE 45660
// SetBName ( base_dep , name ) ;
45646: LD_VAR 0 1
45650: PPUSH
45651: LD_VAR 0 3
45655: PPUSH
45656: CALL_OW 500
// base := GetBase ( base_dep ) ;
45660: LD_ADDR_VAR 0 15
45664: PUSH
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL_OW 274
45674: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45675: LD_ADDR_VAR 0 16
45679: PUSH
45680: LD_VAR 0 1
45684: PPUSH
45685: CALL_OW 255
45689: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45690: LD_ADDR_VAR 0 17
45694: PUSH
45695: LD_VAR 0 1
45699: PPUSH
45700: CALL_OW 248
45704: ST_TO_ADDR
// if sources then
45705: LD_VAR 0 5
45709: IFFALSE 45756
// for i = 1 to 3 do
45711: LD_ADDR_VAR 0 8
45715: PUSH
45716: DOUBLE
45717: LD_INT 1
45719: DEC
45720: ST_TO_ADDR
45721: LD_INT 3
45723: PUSH
45724: FOR_TO
45725: IFFALSE 45754
// AddResourceType ( base , i , sources [ i ] ) ;
45727: LD_VAR 0 15
45731: PPUSH
45732: LD_VAR 0 8
45736: PPUSH
45737: LD_VAR 0 5
45741: PUSH
45742: LD_VAR 0 8
45746: ARRAY
45747: PPUSH
45748: CALL_OW 276
45752: GO 45724
45754: POP
45755: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45756: LD_ADDR_VAR 0 18
45760: PUSH
45761: LD_VAR 0 15
45765: PPUSH
45766: LD_VAR 0 2
45770: PPUSH
45771: LD_INT 1
45773: PPUSH
45774: CALL 45017 0 3
45778: ST_TO_ADDR
// InitHc ;
45779: CALL_OW 19
// InitUc ;
45783: CALL_OW 18
// uc_side := side ;
45787: LD_ADDR_OWVAR 20
45791: PUSH
45792: LD_VAR 0 16
45796: ST_TO_ADDR
// uc_nation := nation ;
45797: LD_ADDR_OWVAR 21
45801: PUSH
45802: LD_VAR 0 17
45806: ST_TO_ADDR
// if buildings then
45807: LD_VAR 0 18
45811: IFFALSE 47133
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45813: LD_ADDR_VAR 0 19
45817: PUSH
45818: LD_VAR 0 18
45822: PPUSH
45823: LD_INT 2
45825: PUSH
45826: LD_INT 30
45828: PUSH
45829: LD_INT 29
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 30
45838: PUSH
45839: LD_INT 30
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: LIST
45850: PPUSH
45851: CALL_OW 72
45855: ST_TO_ADDR
// if tmp then
45856: LD_VAR 0 19
45860: IFFALSE 45908
// for i in tmp do
45862: LD_ADDR_VAR 0 8
45866: PUSH
45867: LD_VAR 0 19
45871: PUSH
45872: FOR_IN
45873: IFFALSE 45906
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45875: LD_VAR 0 8
45879: PPUSH
45880: CALL_OW 250
45884: PPUSH
45885: LD_VAR 0 8
45889: PPUSH
45890: CALL_OW 251
45894: PPUSH
45895: LD_VAR 0 16
45899: PPUSH
45900: CALL_OW 441
45904: GO 45872
45906: POP
45907: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45908: LD_VAR 0 18
45912: PPUSH
45913: LD_INT 2
45915: PUSH
45916: LD_INT 30
45918: PUSH
45919: LD_INT 32
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 30
45928: PUSH
45929: LD_INT 33
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: LIST
45940: PPUSH
45941: CALL_OW 72
45945: IFFALSE 46033
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45947: LD_ADDR_VAR 0 8
45951: PUSH
45952: LD_VAR 0 18
45956: PPUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 30
45962: PUSH
45963: LD_INT 32
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 30
45972: PUSH
45973: LD_INT 33
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: LIST
45984: PPUSH
45985: CALL_OW 72
45989: PUSH
45990: FOR_IN
45991: IFFALSE 46031
// begin if not GetBWeapon ( i ) then
45993: LD_VAR 0 8
45997: PPUSH
45998: CALL_OW 269
46002: NOT
46003: IFFALSE 46029
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46005: LD_VAR 0 8
46009: PPUSH
46010: LD_VAR 0 8
46014: PPUSH
46015: LD_VAR 0 2
46019: PPUSH
46020: CALL 47279 0 2
46024: PPUSH
46025: CALL_OW 431
// end ;
46029: GO 45990
46031: POP
46032: POP
// end ; for i = 1 to personel do
46033: LD_ADDR_VAR 0 8
46037: PUSH
46038: DOUBLE
46039: LD_INT 1
46041: DEC
46042: ST_TO_ADDR
46043: LD_VAR 0 6
46047: PUSH
46048: FOR_TO
46049: IFFALSE 47113
// begin if i > 4 then
46051: LD_VAR 0 8
46055: PUSH
46056: LD_INT 4
46058: GREATER
46059: IFFALSE 46063
// break ;
46061: GO 47113
// case i of 1 :
46063: LD_VAR 0 8
46067: PUSH
46068: LD_INT 1
46070: DOUBLE
46071: EQUAL
46072: IFTRUE 46076
46074: GO 46156
46076: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46077: LD_ADDR_VAR 0 12
46081: PUSH
46082: LD_VAR 0 18
46086: PPUSH
46087: LD_INT 22
46089: PUSH
46090: LD_VAR 0 16
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 58
46101: PUSH
46102: EMPTY
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 30
46110: PUSH
46111: LD_INT 32
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 30
46120: PUSH
46121: LD_INT 4
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 30
46130: PUSH
46131: LD_INT 5
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: PPUSH
46149: CALL_OW 72
46153: ST_TO_ADDR
46154: GO 46378
46156: LD_INT 2
46158: DOUBLE
46159: EQUAL
46160: IFTRUE 46164
46162: GO 46226
46164: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46165: LD_ADDR_VAR 0 12
46169: PUSH
46170: LD_VAR 0 18
46174: PPUSH
46175: LD_INT 22
46177: PUSH
46178: LD_VAR 0 16
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 30
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 30
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: LIST
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PPUSH
46219: CALL_OW 72
46223: ST_TO_ADDR
46224: GO 46378
46226: LD_INT 3
46228: DOUBLE
46229: EQUAL
46230: IFTRUE 46234
46232: GO 46296
46234: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46235: LD_ADDR_VAR 0 12
46239: PUSH
46240: LD_VAR 0 18
46244: PPUSH
46245: LD_INT 22
46247: PUSH
46248: LD_VAR 0 16
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 30
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 30
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PPUSH
46289: CALL_OW 72
46293: ST_TO_ADDR
46294: GO 46378
46296: LD_INT 4
46298: DOUBLE
46299: EQUAL
46300: IFTRUE 46304
46302: GO 46377
46304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46305: LD_ADDR_VAR 0 12
46309: PUSH
46310: LD_VAR 0 18
46314: PPUSH
46315: LD_INT 22
46317: PUSH
46318: LD_VAR 0 16
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 30
46332: PUSH
46333: LD_INT 6
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 30
46342: PUSH
46343: LD_INT 7
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 30
46352: PUSH
46353: LD_INT 8
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PPUSH
46370: CALL_OW 72
46374: ST_TO_ADDR
46375: GO 46378
46377: POP
// if i = 1 then
46378: LD_VAR 0 8
46382: PUSH
46383: LD_INT 1
46385: EQUAL
46386: IFFALSE 46497
// begin tmp := [ ] ;
46388: LD_ADDR_VAR 0 19
46392: PUSH
46393: EMPTY
46394: ST_TO_ADDR
// for j in f do
46395: LD_ADDR_VAR 0 9
46399: PUSH
46400: LD_VAR 0 12
46404: PUSH
46405: FOR_IN
46406: IFFALSE 46479
// if GetBType ( j ) = b_bunker then
46408: LD_VAR 0 9
46412: PPUSH
46413: CALL_OW 266
46417: PUSH
46418: LD_INT 32
46420: EQUAL
46421: IFFALSE 46448
// tmp := Insert ( tmp , 1 , j ) else
46423: LD_ADDR_VAR 0 19
46427: PUSH
46428: LD_VAR 0 19
46432: PPUSH
46433: LD_INT 1
46435: PPUSH
46436: LD_VAR 0 9
46440: PPUSH
46441: CALL_OW 2
46445: ST_TO_ADDR
46446: GO 46477
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46448: LD_ADDR_VAR 0 19
46452: PUSH
46453: LD_VAR 0 19
46457: PPUSH
46458: LD_VAR 0 19
46462: PUSH
46463: LD_INT 1
46465: PLUS
46466: PPUSH
46467: LD_VAR 0 9
46471: PPUSH
46472: CALL_OW 2
46476: ST_TO_ADDR
46477: GO 46405
46479: POP
46480: POP
// if tmp then
46481: LD_VAR 0 19
46485: IFFALSE 46497
// f := tmp ;
46487: LD_ADDR_VAR 0 12
46491: PUSH
46492: LD_VAR 0 19
46496: ST_TO_ADDR
// end ; x := personel [ i ] ;
46497: LD_ADDR_VAR 0 13
46501: PUSH
46502: LD_VAR 0 6
46506: PUSH
46507: LD_VAR 0 8
46511: ARRAY
46512: ST_TO_ADDR
// if x = - 1 then
46513: LD_VAR 0 13
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: EQUAL
46522: IFFALSE 46731
// begin for j in f do
46524: LD_ADDR_VAR 0 9
46528: PUSH
46529: LD_VAR 0 12
46533: PUSH
46534: FOR_IN
46535: IFFALSE 46727
// repeat InitHc ;
46537: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46541: LD_VAR 0 9
46545: PPUSH
46546: CALL_OW 266
46550: PUSH
46551: LD_INT 5
46553: EQUAL
46554: IFFALSE 46624
// begin if UnitsInside ( j ) < 3 then
46556: LD_VAR 0 9
46560: PPUSH
46561: CALL_OW 313
46565: PUSH
46566: LD_INT 3
46568: LESS
46569: IFFALSE 46605
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46571: LD_INT 0
46573: PPUSH
46574: LD_INT 5
46576: PUSH
46577: LD_INT 8
46579: PUSH
46580: LD_INT 9
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: PUSH
46588: LD_VAR 0 17
46592: ARRAY
46593: PPUSH
46594: LD_VAR 0 4
46598: PPUSH
46599: CALL_OW 380
46603: GO 46622
// PrepareHuman ( false , i , skill ) ;
46605: LD_INT 0
46607: PPUSH
46608: LD_VAR 0 8
46612: PPUSH
46613: LD_VAR 0 4
46617: PPUSH
46618: CALL_OW 380
// end else
46622: GO 46641
// PrepareHuman ( false , i , skill ) ;
46624: LD_INT 0
46626: PPUSH
46627: LD_VAR 0 8
46631: PPUSH
46632: LD_VAR 0 4
46636: PPUSH
46637: CALL_OW 380
// un := CreateHuman ;
46641: LD_ADDR_VAR 0 14
46645: PUSH
46646: CALL_OW 44
46650: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46651: LD_ADDR_VAR 0 7
46655: PUSH
46656: LD_VAR 0 7
46660: PPUSH
46661: LD_INT 1
46663: PPUSH
46664: LD_VAR 0 14
46668: PPUSH
46669: CALL_OW 2
46673: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46674: LD_VAR 0 14
46678: PPUSH
46679: LD_VAR 0 9
46683: PPUSH
46684: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46688: LD_VAR 0 9
46692: PPUSH
46693: CALL_OW 313
46697: PUSH
46698: LD_INT 6
46700: EQUAL
46701: PUSH
46702: LD_VAR 0 9
46706: PPUSH
46707: CALL_OW 266
46711: PUSH
46712: LD_INT 32
46714: PUSH
46715: LD_INT 31
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: IN
46722: OR
46723: IFFALSE 46537
46725: GO 46534
46727: POP
46728: POP
// end else
46729: GO 47111
// for j = 1 to x do
46731: LD_ADDR_VAR 0 9
46735: PUSH
46736: DOUBLE
46737: LD_INT 1
46739: DEC
46740: ST_TO_ADDR
46741: LD_VAR 0 13
46745: PUSH
46746: FOR_TO
46747: IFFALSE 47109
// begin InitHc ;
46749: CALL_OW 19
// if not f then
46753: LD_VAR 0 12
46757: NOT
46758: IFFALSE 46847
// begin PrepareHuman ( false , i , skill ) ;
46760: LD_INT 0
46762: PPUSH
46763: LD_VAR 0 8
46767: PPUSH
46768: LD_VAR 0 4
46772: PPUSH
46773: CALL_OW 380
// un := CreateHuman ;
46777: LD_ADDR_VAR 0 14
46781: PUSH
46782: CALL_OW 44
46786: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46787: LD_ADDR_VAR 0 7
46791: PUSH
46792: LD_VAR 0 7
46796: PPUSH
46797: LD_INT 1
46799: PPUSH
46800: LD_VAR 0 14
46804: PPUSH
46805: CALL_OW 2
46809: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46810: LD_VAR 0 14
46814: PPUSH
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 250
46824: PPUSH
46825: LD_VAR 0 1
46829: PPUSH
46830: CALL_OW 251
46834: PPUSH
46835: LD_INT 10
46837: PPUSH
46838: LD_INT 0
46840: PPUSH
46841: CALL_OW 50
// continue ;
46845: GO 46746
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46847: LD_VAR 0 12
46851: PUSH
46852: LD_INT 1
46854: ARRAY
46855: PPUSH
46856: CALL_OW 313
46860: PUSH
46861: LD_VAR 0 12
46865: PUSH
46866: LD_INT 1
46868: ARRAY
46869: PPUSH
46870: CALL_OW 266
46874: PUSH
46875: LD_INT 32
46877: PUSH
46878: LD_INT 31
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: IN
46885: AND
46886: PUSH
46887: LD_VAR 0 12
46891: PUSH
46892: LD_INT 1
46894: ARRAY
46895: PPUSH
46896: CALL_OW 313
46900: PUSH
46901: LD_INT 6
46903: EQUAL
46904: OR
46905: IFFALSE 46925
// f := Delete ( f , 1 ) ;
46907: LD_ADDR_VAR 0 12
46911: PUSH
46912: LD_VAR 0 12
46916: PPUSH
46917: LD_INT 1
46919: PPUSH
46920: CALL_OW 3
46924: ST_TO_ADDR
// if not f then
46925: LD_VAR 0 12
46929: NOT
46930: IFFALSE 46948
// begin x := x + 2 ;
46932: LD_ADDR_VAR 0 13
46936: PUSH
46937: LD_VAR 0 13
46941: PUSH
46942: LD_INT 2
46944: PLUS
46945: ST_TO_ADDR
// continue ;
46946: GO 46746
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46948: LD_VAR 0 12
46952: PUSH
46953: LD_INT 1
46955: ARRAY
46956: PPUSH
46957: CALL_OW 266
46961: PUSH
46962: LD_INT 5
46964: EQUAL
46965: IFFALSE 47039
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46967: LD_VAR 0 12
46971: PUSH
46972: LD_INT 1
46974: ARRAY
46975: PPUSH
46976: CALL_OW 313
46980: PUSH
46981: LD_INT 3
46983: LESS
46984: IFFALSE 47020
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46986: LD_INT 0
46988: PPUSH
46989: LD_INT 5
46991: PUSH
46992: LD_INT 8
46994: PUSH
46995: LD_INT 9
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: PUSH
47003: LD_VAR 0 17
47007: ARRAY
47008: PPUSH
47009: LD_VAR 0 4
47013: PPUSH
47014: CALL_OW 380
47018: GO 47037
// PrepareHuman ( false , i , skill ) ;
47020: LD_INT 0
47022: PPUSH
47023: LD_VAR 0 8
47027: PPUSH
47028: LD_VAR 0 4
47032: PPUSH
47033: CALL_OW 380
// end else
47037: GO 47056
// PrepareHuman ( false , i , skill ) ;
47039: LD_INT 0
47041: PPUSH
47042: LD_VAR 0 8
47046: PPUSH
47047: LD_VAR 0 4
47051: PPUSH
47052: CALL_OW 380
// un := CreateHuman ;
47056: LD_ADDR_VAR 0 14
47060: PUSH
47061: CALL_OW 44
47065: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47066: LD_ADDR_VAR 0 7
47070: PUSH
47071: LD_VAR 0 7
47075: PPUSH
47076: LD_INT 1
47078: PPUSH
47079: LD_VAR 0 14
47083: PPUSH
47084: CALL_OW 2
47088: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47089: LD_VAR 0 14
47093: PPUSH
47094: LD_VAR 0 12
47098: PUSH
47099: LD_INT 1
47101: ARRAY
47102: PPUSH
47103: CALL_OW 52
// end ;
47107: GO 46746
47109: POP
47110: POP
// end ;
47111: GO 46048
47113: POP
47114: POP
// result := result ^ buildings ;
47115: LD_ADDR_VAR 0 7
47119: PUSH
47120: LD_VAR 0 7
47124: PUSH
47125: LD_VAR 0 18
47129: ADD
47130: ST_TO_ADDR
// end else
47131: GO 47274
// begin for i = 1 to personel do
47133: LD_ADDR_VAR 0 8
47137: PUSH
47138: DOUBLE
47139: LD_INT 1
47141: DEC
47142: ST_TO_ADDR
47143: LD_VAR 0 6
47147: PUSH
47148: FOR_TO
47149: IFFALSE 47272
// begin if i > 4 then
47151: LD_VAR 0 8
47155: PUSH
47156: LD_INT 4
47158: GREATER
47159: IFFALSE 47163
// break ;
47161: GO 47272
// x := personel [ i ] ;
47163: LD_ADDR_VAR 0 13
47167: PUSH
47168: LD_VAR 0 6
47172: PUSH
47173: LD_VAR 0 8
47177: ARRAY
47178: ST_TO_ADDR
// if x = - 1 then
47179: LD_VAR 0 13
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: EQUAL
47188: IFFALSE 47192
// continue ;
47190: GO 47148
// PrepareHuman ( false , i , skill ) ;
47192: LD_INT 0
47194: PPUSH
47195: LD_VAR 0 8
47199: PPUSH
47200: LD_VAR 0 4
47204: PPUSH
47205: CALL_OW 380
// un := CreateHuman ;
47209: LD_ADDR_VAR 0 14
47213: PUSH
47214: CALL_OW 44
47218: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47219: LD_VAR 0 14
47223: PPUSH
47224: LD_VAR 0 1
47228: PPUSH
47229: CALL_OW 250
47233: PPUSH
47234: LD_VAR 0 1
47238: PPUSH
47239: CALL_OW 251
47243: PPUSH
47244: LD_INT 10
47246: PPUSH
47247: LD_INT 0
47249: PPUSH
47250: CALL_OW 50
// result := result ^ un ;
47254: LD_ADDR_VAR 0 7
47258: PUSH
47259: LD_VAR 0 7
47263: PUSH
47264: LD_VAR 0 14
47268: ADD
47269: ST_TO_ADDR
// end ;
47270: GO 47148
47272: POP
47273: POP
// end ; end ;
47274: LD_VAR 0 7
47278: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47279: LD_INT 0
47281: PPUSH
47282: PPUSH
47283: PPUSH
47284: PPUSH
47285: PPUSH
47286: PPUSH
47287: PPUSH
47288: PPUSH
47289: PPUSH
47290: PPUSH
47291: PPUSH
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
// result := false ;
47297: LD_ADDR_VAR 0 3
47301: PUSH
47302: LD_INT 0
47304: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47305: LD_VAR 0 1
47309: NOT
47310: PUSH
47311: LD_VAR 0 1
47315: PPUSH
47316: CALL_OW 266
47320: PUSH
47321: LD_INT 32
47323: PUSH
47324: LD_INT 33
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: IN
47331: NOT
47332: OR
47333: IFFALSE 47337
// exit ;
47335: GO 48446
// nat := GetNation ( tower ) ;
47337: LD_ADDR_VAR 0 12
47341: PUSH
47342: LD_VAR 0 1
47346: PPUSH
47347: CALL_OW 248
47351: ST_TO_ADDR
// side := GetSide ( tower ) ;
47352: LD_ADDR_VAR 0 16
47356: PUSH
47357: LD_VAR 0 1
47361: PPUSH
47362: CALL_OW 255
47366: ST_TO_ADDR
// x := GetX ( tower ) ;
47367: LD_ADDR_VAR 0 10
47371: PUSH
47372: LD_VAR 0 1
47376: PPUSH
47377: CALL_OW 250
47381: ST_TO_ADDR
// y := GetY ( tower ) ;
47382: LD_ADDR_VAR 0 11
47386: PUSH
47387: LD_VAR 0 1
47391: PPUSH
47392: CALL_OW 251
47396: ST_TO_ADDR
// if not x or not y then
47397: LD_VAR 0 10
47401: NOT
47402: PUSH
47403: LD_VAR 0 11
47407: NOT
47408: OR
47409: IFFALSE 47413
// exit ;
47411: GO 48446
// weapon := 0 ;
47413: LD_ADDR_VAR 0 18
47417: PUSH
47418: LD_INT 0
47420: ST_TO_ADDR
// fac_list := [ ] ;
47421: LD_ADDR_VAR 0 17
47425: PUSH
47426: EMPTY
47427: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47428: LD_ADDR_VAR 0 6
47432: PUSH
47433: LD_VAR 0 1
47437: PPUSH
47438: CALL_OW 274
47442: PPUSH
47443: LD_VAR 0 2
47447: PPUSH
47448: LD_INT 0
47450: PPUSH
47451: CALL 45017 0 3
47455: PPUSH
47456: LD_INT 30
47458: PUSH
47459: LD_INT 3
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PPUSH
47466: CALL_OW 72
47470: ST_TO_ADDR
// if not factories then
47471: LD_VAR 0 6
47475: NOT
47476: IFFALSE 47480
// exit ;
47478: GO 48446
// for i in factories do
47480: LD_ADDR_VAR 0 8
47484: PUSH
47485: LD_VAR 0 6
47489: PUSH
47490: FOR_IN
47491: IFFALSE 47516
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47493: LD_ADDR_VAR 0 17
47497: PUSH
47498: LD_VAR 0 17
47502: PUSH
47503: LD_VAR 0 8
47507: PPUSH
47508: CALL_OW 478
47512: UNION
47513: ST_TO_ADDR
47514: GO 47490
47516: POP
47517: POP
// if not fac_list then
47518: LD_VAR 0 17
47522: NOT
47523: IFFALSE 47527
// exit ;
47525: GO 48446
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47527: LD_ADDR_VAR 0 5
47531: PUSH
47532: LD_INT 4
47534: PUSH
47535: LD_INT 5
47537: PUSH
47538: LD_INT 9
47540: PUSH
47541: LD_INT 10
47543: PUSH
47544: LD_INT 6
47546: PUSH
47547: LD_INT 7
47549: PUSH
47550: LD_INT 11
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 27
47564: PUSH
47565: LD_INT 28
47567: PUSH
47568: LD_INT 26
47570: PUSH
47571: LD_INT 30
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 43
47582: PUSH
47583: LD_INT 44
47585: PUSH
47586: LD_INT 46
47588: PUSH
47589: LD_INT 45
47591: PUSH
47592: LD_INT 47
47594: PUSH
47595: LD_INT 49
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: PUSH
47611: LD_VAR 0 12
47615: ARRAY
47616: ST_TO_ADDR
// list := list isect fac_list ;
47617: LD_ADDR_VAR 0 5
47621: PUSH
47622: LD_VAR 0 5
47626: PUSH
47627: LD_VAR 0 17
47631: ISECT
47632: ST_TO_ADDR
// if not list then
47633: LD_VAR 0 5
47637: NOT
47638: IFFALSE 47642
// exit ;
47640: GO 48446
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47642: LD_VAR 0 12
47646: PUSH
47647: LD_INT 3
47649: EQUAL
47650: PUSH
47651: LD_INT 49
47653: PUSH
47654: LD_VAR 0 5
47658: IN
47659: AND
47660: PUSH
47661: LD_INT 31
47663: PPUSH
47664: LD_VAR 0 16
47668: PPUSH
47669: CALL_OW 321
47673: PUSH
47674: LD_INT 2
47676: EQUAL
47677: AND
47678: IFFALSE 47738
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47680: LD_INT 22
47682: PUSH
47683: LD_VAR 0 16
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 35
47694: PUSH
47695: LD_INT 49
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 91
47704: PUSH
47705: LD_VAR 0 1
47709: PUSH
47710: LD_INT 10
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: PPUSH
47723: CALL_OW 69
47727: NOT
47728: IFFALSE 47738
// weapon := ru_time_lapser ;
47730: LD_ADDR_VAR 0 18
47734: PUSH
47735: LD_INT 49
47737: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47738: LD_VAR 0 12
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: IN
47753: PUSH
47754: LD_INT 11
47756: PUSH
47757: LD_VAR 0 5
47761: IN
47762: PUSH
47763: LD_INT 30
47765: PUSH
47766: LD_VAR 0 5
47770: IN
47771: OR
47772: AND
47773: PUSH
47774: LD_INT 6
47776: PPUSH
47777: LD_VAR 0 16
47781: PPUSH
47782: CALL_OW 321
47786: PUSH
47787: LD_INT 2
47789: EQUAL
47790: AND
47791: IFFALSE 47956
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47793: LD_INT 22
47795: PUSH
47796: LD_VAR 0 16
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: LD_INT 35
47810: PUSH
47811: LD_INT 11
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 35
47820: PUSH
47821: LD_INT 30
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 91
47835: PUSH
47836: LD_VAR 0 1
47840: PUSH
47841: LD_INT 18
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: PPUSH
47854: CALL_OW 69
47858: NOT
47859: PUSH
47860: LD_INT 22
47862: PUSH
47863: LD_VAR 0 16
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 30
47877: PUSH
47878: LD_INT 32
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 30
47887: PUSH
47888: LD_INT 33
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 91
47902: PUSH
47903: LD_VAR 0 1
47907: PUSH
47908: LD_INT 12
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: PPUSH
47924: CALL_OW 69
47928: PUSH
47929: LD_INT 2
47931: GREATER
47932: AND
47933: IFFALSE 47956
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47935: LD_ADDR_VAR 0 18
47939: PUSH
47940: LD_INT 11
47942: PUSH
47943: LD_INT 30
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_VAR 0 12
47954: ARRAY
47955: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47956: LD_VAR 0 18
47960: NOT
47961: PUSH
47962: LD_INT 40
47964: PPUSH
47965: LD_VAR 0 16
47969: PPUSH
47970: CALL_OW 321
47974: PUSH
47975: LD_INT 2
47977: EQUAL
47978: AND
47979: PUSH
47980: LD_INT 7
47982: PUSH
47983: LD_VAR 0 5
47987: IN
47988: PUSH
47989: LD_INT 28
47991: PUSH
47992: LD_VAR 0 5
47996: IN
47997: OR
47998: PUSH
47999: LD_INT 45
48001: PUSH
48002: LD_VAR 0 5
48006: IN
48007: OR
48008: AND
48009: IFFALSE 48263
// begin hex := GetHexInfo ( x , y ) ;
48011: LD_ADDR_VAR 0 4
48015: PUSH
48016: LD_VAR 0 10
48020: PPUSH
48021: LD_VAR 0 11
48025: PPUSH
48026: CALL_OW 546
48030: ST_TO_ADDR
// if hex [ 1 ] then
48031: LD_VAR 0 4
48035: PUSH
48036: LD_INT 1
48038: ARRAY
48039: IFFALSE 48043
// exit ;
48041: GO 48446
// height := hex [ 2 ] ;
48043: LD_ADDR_VAR 0 15
48047: PUSH
48048: LD_VAR 0 4
48052: PUSH
48053: LD_INT 2
48055: ARRAY
48056: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48057: LD_ADDR_VAR 0 14
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: LD_INT 3
48070: PUSH
48071: LD_INT 5
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: ST_TO_ADDR
// for i in tmp do
48080: LD_ADDR_VAR 0 8
48084: PUSH
48085: LD_VAR 0 14
48089: PUSH
48090: FOR_IN
48091: IFFALSE 48261
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48093: LD_ADDR_VAR 0 9
48097: PUSH
48098: LD_VAR 0 10
48102: PPUSH
48103: LD_VAR 0 8
48107: PPUSH
48108: LD_INT 5
48110: PPUSH
48111: CALL_OW 272
48115: PUSH
48116: LD_VAR 0 11
48120: PPUSH
48121: LD_VAR 0 8
48125: PPUSH
48126: LD_INT 5
48128: PPUSH
48129: CALL_OW 273
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48138: LD_VAR 0 9
48142: PUSH
48143: LD_INT 1
48145: ARRAY
48146: PPUSH
48147: LD_VAR 0 9
48151: PUSH
48152: LD_INT 2
48154: ARRAY
48155: PPUSH
48156: CALL_OW 488
48160: IFFALSE 48259
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48162: LD_ADDR_VAR 0 4
48166: PUSH
48167: LD_VAR 0 9
48171: PUSH
48172: LD_INT 1
48174: ARRAY
48175: PPUSH
48176: LD_VAR 0 9
48180: PUSH
48181: LD_INT 2
48183: ARRAY
48184: PPUSH
48185: CALL_OW 546
48189: ST_TO_ADDR
// if hex [ 1 ] then
48190: LD_VAR 0 4
48194: PUSH
48195: LD_INT 1
48197: ARRAY
48198: IFFALSE 48202
// continue ;
48200: GO 48090
// h := hex [ 2 ] ;
48202: LD_ADDR_VAR 0 13
48206: PUSH
48207: LD_VAR 0 4
48211: PUSH
48212: LD_INT 2
48214: ARRAY
48215: ST_TO_ADDR
// if h + 7 < height then
48216: LD_VAR 0 13
48220: PUSH
48221: LD_INT 7
48223: PLUS
48224: PUSH
48225: LD_VAR 0 15
48229: LESS
48230: IFFALSE 48259
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48232: LD_ADDR_VAR 0 18
48236: PUSH
48237: LD_INT 7
48239: PUSH
48240: LD_INT 28
48242: PUSH
48243: LD_INT 45
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: LIST
48250: PUSH
48251: LD_VAR 0 12
48255: ARRAY
48256: ST_TO_ADDR
// break ;
48257: GO 48261
// end ; end ; end ;
48259: GO 48090
48261: POP
48262: POP
// end ; if not weapon then
48263: LD_VAR 0 18
48267: NOT
48268: IFFALSE 48328
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48270: LD_ADDR_VAR 0 5
48274: PUSH
48275: LD_VAR 0 5
48279: PUSH
48280: LD_INT 11
48282: PUSH
48283: LD_INT 30
48285: PUSH
48286: LD_INT 49
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: DIFF
48294: ST_TO_ADDR
// if not list then
48295: LD_VAR 0 5
48299: NOT
48300: IFFALSE 48304
// exit ;
48302: GO 48446
// weapon := list [ rand ( 1 , list ) ] ;
48304: LD_ADDR_VAR 0 18
48308: PUSH
48309: LD_VAR 0 5
48313: PUSH
48314: LD_INT 1
48316: PPUSH
48317: LD_VAR 0 5
48321: PPUSH
48322: CALL_OW 12
48326: ARRAY
48327: ST_TO_ADDR
// end ; if weapon then
48328: LD_VAR 0 18
48332: IFFALSE 48446
// begin tmp := CostOfWeapon ( weapon ) ;
48334: LD_ADDR_VAR 0 14
48338: PUSH
48339: LD_VAR 0 18
48343: PPUSH
48344: CALL_OW 451
48348: ST_TO_ADDR
// j := GetBase ( tower ) ;
48349: LD_ADDR_VAR 0 9
48353: PUSH
48354: LD_VAR 0 1
48358: PPUSH
48359: CALL_OW 274
48363: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48364: LD_VAR 0 9
48368: PPUSH
48369: LD_INT 1
48371: PPUSH
48372: CALL_OW 275
48376: PUSH
48377: LD_VAR 0 14
48381: PUSH
48382: LD_INT 1
48384: ARRAY
48385: GREATEREQUAL
48386: PUSH
48387: LD_VAR 0 9
48391: PPUSH
48392: LD_INT 2
48394: PPUSH
48395: CALL_OW 275
48399: PUSH
48400: LD_VAR 0 14
48404: PUSH
48405: LD_INT 2
48407: ARRAY
48408: GREATEREQUAL
48409: AND
48410: PUSH
48411: LD_VAR 0 9
48415: PPUSH
48416: LD_INT 3
48418: PPUSH
48419: CALL_OW 275
48423: PUSH
48424: LD_VAR 0 14
48428: PUSH
48429: LD_INT 3
48431: ARRAY
48432: GREATEREQUAL
48433: AND
48434: IFFALSE 48446
// result := weapon ;
48436: LD_ADDR_VAR 0 3
48440: PUSH
48441: LD_VAR 0 18
48445: ST_TO_ADDR
// end ; end ;
48446: LD_VAR 0 3
48450: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48451: LD_INT 0
48453: PPUSH
48454: PPUSH
// result := true ;
48455: LD_ADDR_VAR 0 3
48459: PUSH
48460: LD_INT 1
48462: ST_TO_ADDR
// if array1 = array2 then
48463: LD_VAR 0 1
48467: PUSH
48468: LD_VAR 0 2
48472: EQUAL
48473: IFFALSE 48533
// begin for i = 1 to array1 do
48475: LD_ADDR_VAR 0 4
48479: PUSH
48480: DOUBLE
48481: LD_INT 1
48483: DEC
48484: ST_TO_ADDR
48485: LD_VAR 0 1
48489: PUSH
48490: FOR_TO
48491: IFFALSE 48529
// if array1 [ i ] <> array2 [ i ] then
48493: LD_VAR 0 1
48497: PUSH
48498: LD_VAR 0 4
48502: ARRAY
48503: PUSH
48504: LD_VAR 0 2
48508: PUSH
48509: LD_VAR 0 4
48513: ARRAY
48514: NONEQUAL
48515: IFFALSE 48527
// begin result := false ;
48517: LD_ADDR_VAR 0 3
48521: PUSH
48522: LD_INT 0
48524: ST_TO_ADDR
// break ;
48525: GO 48529
// end ;
48527: GO 48490
48529: POP
48530: POP
// end else
48531: GO 48541
// result := false ;
48533: LD_ADDR_VAR 0 3
48537: PUSH
48538: LD_INT 0
48540: ST_TO_ADDR
// end ;
48541: LD_VAR 0 3
48545: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48546: LD_INT 0
48548: PPUSH
48549: PPUSH
// if not array1 or not array2 then
48550: LD_VAR 0 1
48554: NOT
48555: PUSH
48556: LD_VAR 0 2
48560: NOT
48561: OR
48562: IFFALSE 48566
// exit ;
48564: GO 48630
// result := true ;
48566: LD_ADDR_VAR 0 3
48570: PUSH
48571: LD_INT 1
48573: ST_TO_ADDR
// for i = 1 to array1 do
48574: LD_ADDR_VAR 0 4
48578: PUSH
48579: DOUBLE
48580: LD_INT 1
48582: DEC
48583: ST_TO_ADDR
48584: LD_VAR 0 1
48588: PUSH
48589: FOR_TO
48590: IFFALSE 48628
// if array1 [ i ] <> array2 [ i ] then
48592: LD_VAR 0 1
48596: PUSH
48597: LD_VAR 0 4
48601: ARRAY
48602: PUSH
48603: LD_VAR 0 2
48607: PUSH
48608: LD_VAR 0 4
48612: ARRAY
48613: NONEQUAL
48614: IFFALSE 48626
// begin result := false ;
48616: LD_ADDR_VAR 0 3
48620: PUSH
48621: LD_INT 0
48623: ST_TO_ADDR
// break ;
48624: GO 48628
// end ;
48626: GO 48589
48628: POP
48629: POP
// end ;
48630: LD_VAR 0 3
48634: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48635: LD_INT 0
48637: PPUSH
48638: PPUSH
48639: PPUSH
// pom := GetBase ( fac ) ;
48640: LD_ADDR_VAR 0 5
48644: PUSH
48645: LD_VAR 0 1
48649: PPUSH
48650: CALL_OW 274
48654: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48655: LD_ADDR_VAR 0 4
48659: PUSH
48660: LD_VAR 0 2
48664: PUSH
48665: LD_INT 1
48667: ARRAY
48668: PPUSH
48669: LD_VAR 0 2
48673: PUSH
48674: LD_INT 2
48676: ARRAY
48677: PPUSH
48678: LD_VAR 0 2
48682: PUSH
48683: LD_INT 3
48685: ARRAY
48686: PPUSH
48687: LD_VAR 0 2
48691: PUSH
48692: LD_INT 4
48694: ARRAY
48695: PPUSH
48696: CALL_OW 449
48700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48701: LD_ADDR_VAR 0 3
48705: PUSH
48706: LD_VAR 0 5
48710: PPUSH
48711: LD_INT 1
48713: PPUSH
48714: CALL_OW 275
48718: PUSH
48719: LD_VAR 0 4
48723: PUSH
48724: LD_INT 1
48726: ARRAY
48727: GREATEREQUAL
48728: PUSH
48729: LD_VAR 0 5
48733: PPUSH
48734: LD_INT 2
48736: PPUSH
48737: CALL_OW 275
48741: PUSH
48742: LD_VAR 0 4
48746: PUSH
48747: LD_INT 2
48749: ARRAY
48750: GREATEREQUAL
48751: AND
48752: PUSH
48753: LD_VAR 0 5
48757: PPUSH
48758: LD_INT 3
48760: PPUSH
48761: CALL_OW 275
48765: PUSH
48766: LD_VAR 0 4
48770: PUSH
48771: LD_INT 3
48773: ARRAY
48774: GREATEREQUAL
48775: AND
48776: ST_TO_ADDR
// end ;
48777: LD_VAR 0 3
48781: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48782: LD_INT 0
48784: PPUSH
48785: PPUSH
48786: PPUSH
48787: PPUSH
// pom := GetBase ( building ) ;
48788: LD_ADDR_VAR 0 3
48792: PUSH
48793: LD_VAR 0 1
48797: PPUSH
48798: CALL_OW 274
48802: ST_TO_ADDR
// if not pom then
48803: LD_VAR 0 3
48807: NOT
48808: IFFALSE 48812
// exit ;
48810: GO 48982
// btype := GetBType ( building ) ;
48812: LD_ADDR_VAR 0 5
48816: PUSH
48817: LD_VAR 0 1
48821: PPUSH
48822: CALL_OW 266
48826: ST_TO_ADDR
// if btype = b_armoury then
48827: LD_VAR 0 5
48831: PUSH
48832: LD_INT 4
48834: EQUAL
48835: IFFALSE 48845
// btype := b_barracks ;
48837: LD_ADDR_VAR 0 5
48841: PUSH
48842: LD_INT 5
48844: ST_TO_ADDR
// if btype = b_depot then
48845: LD_VAR 0 5
48849: PUSH
48850: LD_INT 0
48852: EQUAL
48853: IFFALSE 48863
// btype := b_warehouse ;
48855: LD_ADDR_VAR 0 5
48859: PUSH
48860: LD_INT 1
48862: ST_TO_ADDR
// if btype = b_workshop then
48863: LD_VAR 0 5
48867: PUSH
48868: LD_INT 2
48870: EQUAL
48871: IFFALSE 48881
// btype := b_factory ;
48873: LD_ADDR_VAR 0 5
48877: PUSH
48878: LD_INT 3
48880: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48881: LD_ADDR_VAR 0 4
48885: PUSH
48886: LD_VAR 0 5
48890: PPUSH
48891: LD_VAR 0 1
48895: PPUSH
48896: CALL_OW 248
48900: PPUSH
48901: CALL_OW 450
48905: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48906: LD_ADDR_VAR 0 2
48910: PUSH
48911: LD_VAR 0 3
48915: PPUSH
48916: LD_INT 1
48918: PPUSH
48919: CALL_OW 275
48923: PUSH
48924: LD_VAR 0 4
48928: PUSH
48929: LD_INT 1
48931: ARRAY
48932: GREATEREQUAL
48933: PUSH
48934: LD_VAR 0 3
48938: PPUSH
48939: LD_INT 2
48941: PPUSH
48942: CALL_OW 275
48946: PUSH
48947: LD_VAR 0 4
48951: PUSH
48952: LD_INT 2
48954: ARRAY
48955: GREATEREQUAL
48956: AND
48957: PUSH
48958: LD_VAR 0 3
48962: PPUSH
48963: LD_INT 3
48965: PPUSH
48966: CALL_OW 275
48970: PUSH
48971: LD_VAR 0 4
48975: PUSH
48976: LD_INT 3
48978: ARRAY
48979: GREATEREQUAL
48980: AND
48981: ST_TO_ADDR
// end ;
48982: LD_VAR 0 2
48986: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48987: LD_INT 0
48989: PPUSH
48990: PPUSH
48991: PPUSH
// pom := GetBase ( building ) ;
48992: LD_ADDR_VAR 0 4
48996: PUSH
48997: LD_VAR 0 1
49001: PPUSH
49002: CALL_OW 274
49006: ST_TO_ADDR
// if not pom then
49007: LD_VAR 0 4
49011: NOT
49012: IFFALSE 49016
// exit ;
49014: GO 49117
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49016: LD_ADDR_VAR 0 5
49020: PUSH
49021: LD_VAR 0 2
49025: PPUSH
49026: LD_VAR 0 1
49030: PPUSH
49031: CALL_OW 248
49035: PPUSH
49036: CALL_OW 450
49040: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49041: LD_ADDR_VAR 0 3
49045: PUSH
49046: LD_VAR 0 4
49050: PPUSH
49051: LD_INT 1
49053: PPUSH
49054: CALL_OW 275
49058: PUSH
49059: LD_VAR 0 5
49063: PUSH
49064: LD_INT 1
49066: ARRAY
49067: GREATEREQUAL
49068: PUSH
49069: LD_VAR 0 4
49073: PPUSH
49074: LD_INT 2
49076: PPUSH
49077: CALL_OW 275
49081: PUSH
49082: LD_VAR 0 5
49086: PUSH
49087: LD_INT 2
49089: ARRAY
49090: GREATEREQUAL
49091: AND
49092: PUSH
49093: LD_VAR 0 4
49097: PPUSH
49098: LD_INT 3
49100: PPUSH
49101: CALL_OW 275
49105: PUSH
49106: LD_VAR 0 5
49110: PUSH
49111: LD_INT 3
49113: ARRAY
49114: GREATEREQUAL
49115: AND
49116: ST_TO_ADDR
// end ;
49117: LD_VAR 0 3
49121: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49122: LD_INT 0
49124: PPUSH
49125: PPUSH
49126: PPUSH
49127: PPUSH
49128: PPUSH
49129: PPUSH
49130: PPUSH
49131: PPUSH
49132: PPUSH
49133: PPUSH
49134: PPUSH
// result := false ;
49135: LD_ADDR_VAR 0 8
49139: PUSH
49140: LD_INT 0
49142: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49143: LD_VAR 0 5
49147: NOT
49148: PUSH
49149: LD_VAR 0 1
49153: NOT
49154: OR
49155: PUSH
49156: LD_VAR 0 2
49160: NOT
49161: OR
49162: PUSH
49163: LD_VAR 0 3
49167: NOT
49168: OR
49169: IFFALSE 49173
// exit ;
49171: GO 49987
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49173: LD_ADDR_VAR 0 14
49177: PUSH
49178: LD_VAR 0 1
49182: PPUSH
49183: LD_VAR 0 2
49187: PPUSH
49188: LD_VAR 0 3
49192: PPUSH
49193: LD_VAR 0 4
49197: PPUSH
49198: LD_VAR 0 5
49202: PUSH
49203: LD_INT 1
49205: ARRAY
49206: PPUSH
49207: CALL_OW 248
49211: PPUSH
49212: LD_INT 0
49214: PPUSH
49215: CALL 51220 0 6
49219: ST_TO_ADDR
// if not hexes then
49220: LD_VAR 0 14
49224: NOT
49225: IFFALSE 49229
// exit ;
49227: GO 49987
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49229: LD_ADDR_VAR 0 17
49233: PUSH
49234: LD_VAR 0 5
49238: PPUSH
49239: LD_INT 22
49241: PUSH
49242: LD_VAR 0 13
49246: PPUSH
49247: CALL_OW 255
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 30
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 30
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PPUSH
49288: CALL_OW 72
49292: ST_TO_ADDR
// for i = 1 to hexes do
49293: LD_ADDR_VAR 0 9
49297: PUSH
49298: DOUBLE
49299: LD_INT 1
49301: DEC
49302: ST_TO_ADDR
49303: LD_VAR 0 14
49307: PUSH
49308: FOR_TO
49309: IFFALSE 49985
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49311: LD_ADDR_VAR 0 13
49315: PUSH
49316: LD_VAR 0 14
49320: PUSH
49321: LD_VAR 0 9
49325: ARRAY
49326: PUSH
49327: LD_INT 1
49329: ARRAY
49330: PPUSH
49331: LD_VAR 0 14
49335: PUSH
49336: LD_VAR 0 9
49340: ARRAY
49341: PUSH
49342: LD_INT 2
49344: ARRAY
49345: PPUSH
49346: CALL_OW 428
49350: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49351: LD_VAR 0 14
49355: PUSH
49356: LD_VAR 0 9
49360: ARRAY
49361: PUSH
49362: LD_INT 1
49364: ARRAY
49365: PPUSH
49366: LD_VAR 0 14
49370: PUSH
49371: LD_VAR 0 9
49375: ARRAY
49376: PUSH
49377: LD_INT 2
49379: ARRAY
49380: PPUSH
49381: CALL_OW 351
49385: PUSH
49386: LD_VAR 0 14
49390: PUSH
49391: LD_VAR 0 9
49395: ARRAY
49396: PUSH
49397: LD_INT 1
49399: ARRAY
49400: PPUSH
49401: LD_VAR 0 14
49405: PUSH
49406: LD_VAR 0 9
49410: ARRAY
49411: PUSH
49412: LD_INT 2
49414: ARRAY
49415: PPUSH
49416: CALL_OW 488
49420: NOT
49421: OR
49422: PUSH
49423: LD_VAR 0 13
49427: PPUSH
49428: CALL_OW 247
49432: PUSH
49433: LD_INT 3
49435: EQUAL
49436: OR
49437: IFFALSE 49443
// exit ;
49439: POP
49440: POP
49441: GO 49987
// if not tmp then
49443: LD_VAR 0 13
49447: NOT
49448: IFFALSE 49452
// continue ;
49450: GO 49308
// result := true ;
49452: LD_ADDR_VAR 0 8
49456: PUSH
49457: LD_INT 1
49459: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49460: LD_VAR 0 6
49464: PUSH
49465: LD_VAR 0 13
49469: PPUSH
49470: CALL_OW 247
49474: PUSH
49475: LD_INT 2
49477: EQUAL
49478: AND
49479: PUSH
49480: LD_VAR 0 13
49484: PPUSH
49485: CALL_OW 263
49489: PUSH
49490: LD_INT 1
49492: EQUAL
49493: AND
49494: IFFALSE 49658
// begin if IsDrivenBy ( tmp ) then
49496: LD_VAR 0 13
49500: PPUSH
49501: CALL_OW 311
49505: IFFALSE 49509
// continue ;
49507: GO 49308
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49509: LD_VAR 0 6
49513: PPUSH
49514: LD_INT 3
49516: PUSH
49517: LD_INT 60
49519: PUSH
49520: EMPTY
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: PUSH
49530: LD_INT 55
49532: PUSH
49533: EMPTY
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PPUSH
49544: CALL_OW 72
49548: IFFALSE 49656
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49550: LD_ADDR_VAR 0 18
49554: PUSH
49555: LD_VAR 0 6
49559: PPUSH
49560: LD_INT 3
49562: PUSH
49563: LD_INT 60
49565: PUSH
49566: EMPTY
49567: LIST
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: LD_INT 55
49578: PUSH
49579: EMPTY
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PPUSH
49590: CALL_OW 72
49594: PUSH
49595: LD_INT 1
49597: ARRAY
49598: ST_TO_ADDR
// if IsInUnit ( driver ) then
49599: LD_VAR 0 18
49603: PPUSH
49604: CALL_OW 310
49608: IFFALSE 49619
// ComExit ( driver ) ;
49610: LD_VAR 0 18
49614: PPUSH
49615: CALL 74908 0 1
// AddComEnterUnit ( driver , tmp ) ;
49619: LD_VAR 0 18
49623: PPUSH
49624: LD_VAR 0 13
49628: PPUSH
49629: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49633: LD_VAR 0 18
49637: PPUSH
49638: LD_VAR 0 7
49642: PPUSH
49643: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49647: LD_VAR 0 18
49651: PPUSH
49652: CALL_OW 181
// end ; continue ;
49656: GO 49308
// end ; if not cleaners or not tmp in cleaners then
49658: LD_VAR 0 6
49662: NOT
49663: PUSH
49664: LD_VAR 0 13
49668: PUSH
49669: LD_VAR 0 6
49673: IN
49674: NOT
49675: OR
49676: IFFALSE 49983
// begin if dep then
49678: LD_VAR 0 17
49682: IFFALSE 49818
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49684: LD_ADDR_VAR 0 16
49688: PUSH
49689: LD_VAR 0 17
49693: PUSH
49694: LD_INT 1
49696: ARRAY
49697: PPUSH
49698: CALL_OW 250
49702: PPUSH
49703: LD_VAR 0 17
49707: PUSH
49708: LD_INT 1
49710: ARRAY
49711: PPUSH
49712: CALL_OW 254
49716: PPUSH
49717: LD_INT 5
49719: PPUSH
49720: CALL_OW 272
49724: PUSH
49725: LD_VAR 0 17
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: PPUSH
49734: CALL_OW 251
49738: PPUSH
49739: LD_VAR 0 17
49743: PUSH
49744: LD_INT 1
49746: ARRAY
49747: PPUSH
49748: CALL_OW 254
49752: PPUSH
49753: LD_INT 5
49755: PPUSH
49756: CALL_OW 273
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49765: LD_VAR 0 16
49769: PUSH
49770: LD_INT 1
49772: ARRAY
49773: PPUSH
49774: LD_VAR 0 16
49778: PUSH
49779: LD_INT 2
49781: ARRAY
49782: PPUSH
49783: CALL_OW 488
49787: IFFALSE 49818
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49789: LD_VAR 0 13
49793: PPUSH
49794: LD_VAR 0 16
49798: PUSH
49799: LD_INT 1
49801: ARRAY
49802: PPUSH
49803: LD_VAR 0 16
49807: PUSH
49808: LD_INT 2
49810: ARRAY
49811: PPUSH
49812: CALL_OW 111
// continue ;
49816: GO 49308
// end ; end ; r := GetDir ( tmp ) ;
49818: LD_ADDR_VAR 0 15
49822: PUSH
49823: LD_VAR 0 13
49827: PPUSH
49828: CALL_OW 254
49832: ST_TO_ADDR
// if r = 5 then
49833: LD_VAR 0 15
49837: PUSH
49838: LD_INT 5
49840: EQUAL
49841: IFFALSE 49851
// r := 0 ;
49843: LD_ADDR_VAR 0 15
49847: PUSH
49848: LD_INT 0
49850: ST_TO_ADDR
// for j = r to 5 do
49851: LD_ADDR_VAR 0 10
49855: PUSH
49856: DOUBLE
49857: LD_VAR 0 15
49861: DEC
49862: ST_TO_ADDR
49863: LD_INT 5
49865: PUSH
49866: FOR_TO
49867: IFFALSE 49981
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49869: LD_ADDR_VAR 0 11
49873: PUSH
49874: LD_VAR 0 13
49878: PPUSH
49879: CALL_OW 250
49883: PPUSH
49884: LD_VAR 0 10
49888: PPUSH
49889: LD_INT 2
49891: PPUSH
49892: CALL_OW 272
49896: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49897: LD_ADDR_VAR 0 12
49901: PUSH
49902: LD_VAR 0 13
49906: PPUSH
49907: CALL_OW 251
49911: PPUSH
49912: LD_VAR 0 10
49916: PPUSH
49917: LD_INT 2
49919: PPUSH
49920: CALL_OW 273
49924: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49925: LD_VAR 0 11
49929: PPUSH
49930: LD_VAR 0 12
49934: PPUSH
49935: CALL_OW 488
49939: PUSH
49940: LD_VAR 0 11
49944: PPUSH
49945: LD_VAR 0 12
49949: PPUSH
49950: CALL_OW 428
49954: NOT
49955: AND
49956: IFFALSE 49979
// begin ComMoveXY ( tmp , _x , _y ) ;
49958: LD_VAR 0 13
49962: PPUSH
49963: LD_VAR 0 11
49967: PPUSH
49968: LD_VAR 0 12
49972: PPUSH
49973: CALL_OW 111
// break ;
49977: GO 49981
// end ; end ;
49979: GO 49866
49981: POP
49982: POP
// end ; end ;
49983: GO 49308
49985: POP
49986: POP
// end ;
49987: LD_VAR 0 8
49991: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49992: LD_INT 0
49994: PPUSH
// result := true ;
49995: LD_ADDR_VAR 0 3
49999: PUSH
50000: LD_INT 1
50002: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50003: LD_VAR 0 2
50007: PUSH
50008: LD_INT 24
50010: DOUBLE
50011: EQUAL
50012: IFTRUE 50022
50014: LD_INT 33
50016: DOUBLE
50017: EQUAL
50018: IFTRUE 50022
50020: GO 50047
50022: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50023: LD_ADDR_VAR 0 3
50027: PUSH
50028: LD_INT 32
50030: PPUSH
50031: LD_VAR 0 1
50035: PPUSH
50036: CALL_OW 321
50040: PUSH
50041: LD_INT 2
50043: EQUAL
50044: ST_TO_ADDR
50045: GO 50363
50047: LD_INT 20
50049: DOUBLE
50050: EQUAL
50051: IFTRUE 50055
50053: GO 50080
50055: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50056: LD_ADDR_VAR 0 3
50060: PUSH
50061: LD_INT 6
50063: PPUSH
50064: LD_VAR 0 1
50068: PPUSH
50069: CALL_OW 321
50073: PUSH
50074: LD_INT 2
50076: EQUAL
50077: ST_TO_ADDR
50078: GO 50363
50080: LD_INT 22
50082: DOUBLE
50083: EQUAL
50084: IFTRUE 50094
50086: LD_INT 36
50088: DOUBLE
50089: EQUAL
50090: IFTRUE 50094
50092: GO 50119
50094: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50095: LD_ADDR_VAR 0 3
50099: PUSH
50100: LD_INT 15
50102: PPUSH
50103: LD_VAR 0 1
50107: PPUSH
50108: CALL_OW 321
50112: PUSH
50113: LD_INT 2
50115: EQUAL
50116: ST_TO_ADDR
50117: GO 50363
50119: LD_INT 30
50121: DOUBLE
50122: EQUAL
50123: IFTRUE 50127
50125: GO 50152
50127: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50128: LD_ADDR_VAR 0 3
50132: PUSH
50133: LD_INT 20
50135: PPUSH
50136: LD_VAR 0 1
50140: PPUSH
50141: CALL_OW 321
50145: PUSH
50146: LD_INT 2
50148: EQUAL
50149: ST_TO_ADDR
50150: GO 50363
50152: LD_INT 28
50154: DOUBLE
50155: EQUAL
50156: IFTRUE 50166
50158: LD_INT 21
50160: DOUBLE
50161: EQUAL
50162: IFTRUE 50166
50164: GO 50191
50166: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50167: LD_ADDR_VAR 0 3
50171: PUSH
50172: LD_INT 21
50174: PPUSH
50175: LD_VAR 0 1
50179: PPUSH
50180: CALL_OW 321
50184: PUSH
50185: LD_INT 2
50187: EQUAL
50188: ST_TO_ADDR
50189: GO 50363
50191: LD_INT 16
50193: DOUBLE
50194: EQUAL
50195: IFTRUE 50199
50197: GO 50224
50199: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50200: LD_ADDR_VAR 0 3
50204: PUSH
50205: LD_INT 84
50207: PPUSH
50208: LD_VAR 0 1
50212: PPUSH
50213: CALL_OW 321
50217: PUSH
50218: LD_INT 2
50220: EQUAL
50221: ST_TO_ADDR
50222: GO 50363
50224: LD_INT 19
50226: DOUBLE
50227: EQUAL
50228: IFTRUE 50238
50230: LD_INT 23
50232: DOUBLE
50233: EQUAL
50234: IFTRUE 50238
50236: GO 50263
50238: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50239: LD_ADDR_VAR 0 3
50243: PUSH
50244: LD_INT 83
50246: PPUSH
50247: LD_VAR 0 1
50251: PPUSH
50252: CALL_OW 321
50256: PUSH
50257: LD_INT 2
50259: EQUAL
50260: ST_TO_ADDR
50261: GO 50363
50263: LD_INT 17
50265: DOUBLE
50266: EQUAL
50267: IFTRUE 50271
50269: GO 50296
50271: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50272: LD_ADDR_VAR 0 3
50276: PUSH
50277: LD_INT 39
50279: PPUSH
50280: LD_VAR 0 1
50284: PPUSH
50285: CALL_OW 321
50289: PUSH
50290: LD_INT 2
50292: EQUAL
50293: ST_TO_ADDR
50294: GO 50363
50296: LD_INT 18
50298: DOUBLE
50299: EQUAL
50300: IFTRUE 50304
50302: GO 50329
50304: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50305: LD_ADDR_VAR 0 3
50309: PUSH
50310: LD_INT 40
50312: PPUSH
50313: LD_VAR 0 1
50317: PPUSH
50318: CALL_OW 321
50322: PUSH
50323: LD_INT 2
50325: EQUAL
50326: ST_TO_ADDR
50327: GO 50363
50329: LD_INT 27
50331: DOUBLE
50332: EQUAL
50333: IFTRUE 50337
50335: GO 50362
50337: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50338: LD_ADDR_VAR 0 3
50342: PUSH
50343: LD_INT 35
50345: PPUSH
50346: LD_VAR 0 1
50350: PPUSH
50351: CALL_OW 321
50355: PUSH
50356: LD_INT 2
50358: EQUAL
50359: ST_TO_ADDR
50360: GO 50363
50362: POP
// end ;
50363: LD_VAR 0 3
50367: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50368: LD_INT 0
50370: PPUSH
50371: PPUSH
50372: PPUSH
50373: PPUSH
50374: PPUSH
50375: PPUSH
50376: PPUSH
50377: PPUSH
50378: PPUSH
50379: PPUSH
50380: PPUSH
// result := false ;
50381: LD_ADDR_VAR 0 6
50385: PUSH
50386: LD_INT 0
50388: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50389: LD_VAR 0 1
50393: NOT
50394: PUSH
50395: LD_VAR 0 1
50399: PPUSH
50400: CALL_OW 266
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: IN
50415: NOT
50416: OR
50417: PUSH
50418: LD_VAR 0 2
50422: NOT
50423: OR
50424: PUSH
50425: LD_VAR 0 5
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: LD_INT 4
50444: PUSH
50445: LD_INT 5
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: IN
50456: NOT
50457: OR
50458: PUSH
50459: LD_VAR 0 3
50463: PPUSH
50464: LD_VAR 0 4
50468: PPUSH
50469: CALL_OW 488
50473: NOT
50474: OR
50475: IFFALSE 50479
// exit ;
50477: GO 51215
// side := GetSide ( depot ) ;
50479: LD_ADDR_VAR 0 9
50483: PUSH
50484: LD_VAR 0 1
50488: PPUSH
50489: CALL_OW 255
50493: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50494: LD_VAR 0 9
50498: PPUSH
50499: LD_VAR 0 2
50503: PPUSH
50504: CALL 49992 0 2
50508: NOT
50509: IFFALSE 50513
// exit ;
50511: GO 51215
// pom := GetBase ( depot ) ;
50513: LD_ADDR_VAR 0 10
50517: PUSH
50518: LD_VAR 0 1
50522: PPUSH
50523: CALL_OW 274
50527: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50528: LD_ADDR_VAR 0 11
50532: PUSH
50533: LD_VAR 0 2
50537: PPUSH
50538: LD_VAR 0 1
50542: PPUSH
50543: CALL_OW 248
50547: PPUSH
50548: CALL_OW 450
50552: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50553: LD_VAR 0 10
50557: PPUSH
50558: LD_INT 1
50560: PPUSH
50561: CALL_OW 275
50565: PUSH
50566: LD_VAR 0 11
50570: PUSH
50571: LD_INT 1
50573: ARRAY
50574: GREATEREQUAL
50575: PUSH
50576: LD_VAR 0 10
50580: PPUSH
50581: LD_INT 2
50583: PPUSH
50584: CALL_OW 275
50588: PUSH
50589: LD_VAR 0 11
50593: PUSH
50594: LD_INT 2
50596: ARRAY
50597: GREATEREQUAL
50598: AND
50599: PUSH
50600: LD_VAR 0 10
50604: PPUSH
50605: LD_INT 3
50607: PPUSH
50608: CALL_OW 275
50612: PUSH
50613: LD_VAR 0 11
50617: PUSH
50618: LD_INT 3
50620: ARRAY
50621: GREATEREQUAL
50622: AND
50623: NOT
50624: IFFALSE 50628
// exit ;
50626: GO 51215
// if GetBType ( depot ) = b_depot then
50628: LD_VAR 0 1
50632: PPUSH
50633: CALL_OW 266
50637: PUSH
50638: LD_INT 0
50640: EQUAL
50641: IFFALSE 50653
// dist := 28 else
50643: LD_ADDR_VAR 0 14
50647: PUSH
50648: LD_INT 28
50650: ST_TO_ADDR
50651: GO 50661
// dist := 36 ;
50653: LD_ADDR_VAR 0 14
50657: PUSH
50658: LD_INT 36
50660: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50661: LD_VAR 0 1
50665: PPUSH
50666: LD_VAR 0 3
50670: PPUSH
50671: LD_VAR 0 4
50675: PPUSH
50676: CALL_OW 297
50680: PUSH
50681: LD_VAR 0 14
50685: GREATER
50686: IFFALSE 50690
// exit ;
50688: GO 51215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50690: LD_ADDR_VAR 0 12
50694: PUSH
50695: LD_VAR 0 2
50699: PPUSH
50700: LD_VAR 0 3
50704: PPUSH
50705: LD_VAR 0 4
50709: PPUSH
50710: LD_VAR 0 5
50714: PPUSH
50715: LD_VAR 0 1
50719: PPUSH
50720: CALL_OW 248
50724: PPUSH
50725: LD_INT 0
50727: PPUSH
50728: CALL 51220 0 6
50732: ST_TO_ADDR
// if not hexes then
50733: LD_VAR 0 12
50737: NOT
50738: IFFALSE 50742
// exit ;
50740: GO 51215
// hex := GetHexInfo ( x , y ) ;
50742: LD_ADDR_VAR 0 15
50746: PUSH
50747: LD_VAR 0 3
50751: PPUSH
50752: LD_VAR 0 4
50756: PPUSH
50757: CALL_OW 546
50761: ST_TO_ADDR
// if hex [ 1 ] then
50762: LD_VAR 0 15
50766: PUSH
50767: LD_INT 1
50769: ARRAY
50770: IFFALSE 50774
// exit ;
50772: GO 51215
// height := hex [ 2 ] ;
50774: LD_ADDR_VAR 0 13
50778: PUSH
50779: LD_VAR 0 15
50783: PUSH
50784: LD_INT 2
50786: ARRAY
50787: ST_TO_ADDR
// for i = 1 to hexes do
50788: LD_ADDR_VAR 0 7
50792: PUSH
50793: DOUBLE
50794: LD_INT 1
50796: DEC
50797: ST_TO_ADDR
50798: LD_VAR 0 12
50802: PUSH
50803: FOR_TO
50804: IFFALSE 51134
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50806: LD_VAR 0 12
50810: PUSH
50811: LD_VAR 0 7
50815: ARRAY
50816: PUSH
50817: LD_INT 1
50819: ARRAY
50820: PPUSH
50821: LD_VAR 0 12
50825: PUSH
50826: LD_VAR 0 7
50830: ARRAY
50831: PUSH
50832: LD_INT 2
50834: ARRAY
50835: PPUSH
50836: CALL_OW 488
50840: NOT
50841: PUSH
50842: LD_VAR 0 12
50846: PUSH
50847: LD_VAR 0 7
50851: ARRAY
50852: PUSH
50853: LD_INT 1
50855: ARRAY
50856: PPUSH
50857: LD_VAR 0 12
50861: PUSH
50862: LD_VAR 0 7
50866: ARRAY
50867: PUSH
50868: LD_INT 2
50870: ARRAY
50871: PPUSH
50872: CALL_OW 428
50876: PUSH
50877: LD_INT 0
50879: GREATER
50880: OR
50881: PUSH
50882: LD_VAR 0 12
50886: PUSH
50887: LD_VAR 0 7
50891: ARRAY
50892: PUSH
50893: LD_INT 1
50895: ARRAY
50896: PPUSH
50897: LD_VAR 0 12
50901: PUSH
50902: LD_VAR 0 7
50906: ARRAY
50907: PUSH
50908: LD_INT 2
50910: ARRAY
50911: PPUSH
50912: CALL_OW 351
50916: OR
50917: IFFALSE 50923
// exit ;
50919: POP
50920: POP
50921: GO 51215
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50923: LD_ADDR_VAR 0 8
50927: PUSH
50928: LD_VAR 0 12
50932: PUSH
50933: LD_VAR 0 7
50937: ARRAY
50938: PUSH
50939: LD_INT 1
50941: ARRAY
50942: PPUSH
50943: LD_VAR 0 12
50947: PUSH
50948: LD_VAR 0 7
50952: ARRAY
50953: PUSH
50954: LD_INT 2
50956: ARRAY
50957: PPUSH
50958: CALL_OW 546
50962: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50963: LD_VAR 0 8
50967: PUSH
50968: LD_INT 1
50970: ARRAY
50971: PUSH
50972: LD_VAR 0 8
50976: PUSH
50977: LD_INT 2
50979: ARRAY
50980: PUSH
50981: LD_VAR 0 13
50985: PUSH
50986: LD_INT 2
50988: PLUS
50989: GREATER
50990: OR
50991: PUSH
50992: LD_VAR 0 8
50996: PUSH
50997: LD_INT 2
50999: ARRAY
51000: PUSH
51001: LD_VAR 0 13
51005: PUSH
51006: LD_INT 2
51008: MINUS
51009: LESS
51010: OR
51011: PUSH
51012: LD_VAR 0 8
51016: PUSH
51017: LD_INT 3
51019: ARRAY
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 8
51026: PUSH
51027: LD_INT 9
51029: PUSH
51030: LD_INT 10
51032: PUSH
51033: LD_INT 11
51035: PUSH
51036: LD_INT 12
51038: PUSH
51039: LD_INT 13
51041: PUSH
51042: LD_INT 16
51044: PUSH
51045: LD_INT 17
51047: PUSH
51048: LD_INT 18
51050: PUSH
51051: LD_INT 19
51053: PUSH
51054: LD_INT 20
51056: PUSH
51057: LD_INT 21
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: IN
51075: NOT
51076: OR
51077: PUSH
51078: LD_VAR 0 8
51082: PUSH
51083: LD_INT 5
51085: ARRAY
51086: NOT
51087: OR
51088: PUSH
51089: LD_VAR 0 8
51093: PUSH
51094: LD_INT 6
51096: ARRAY
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: LD_INT 7
51106: PUSH
51107: LD_INT 9
51109: PUSH
51110: LD_INT 10
51112: PUSH
51113: LD_INT 11
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: IN
51124: NOT
51125: OR
51126: IFFALSE 51132
// exit ;
51128: POP
51129: POP
51130: GO 51215
// end ;
51132: GO 50803
51134: POP
51135: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51136: LD_VAR 0 9
51140: PPUSH
51141: LD_VAR 0 3
51145: PPUSH
51146: LD_VAR 0 4
51150: PPUSH
51151: LD_INT 20
51153: PPUSH
51154: CALL 43167 0 4
51158: PUSH
51159: LD_INT 4
51161: ARRAY
51162: IFFALSE 51166
// exit ;
51164: GO 51215
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51166: LD_VAR 0 2
51170: PUSH
51171: LD_INT 29
51173: PUSH
51174: LD_INT 30
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: IN
51181: PUSH
51182: LD_VAR 0 3
51186: PPUSH
51187: LD_VAR 0 4
51191: PPUSH
51192: LD_VAR 0 9
51196: PPUSH
51197: CALL_OW 440
51201: NOT
51202: AND
51203: IFFALSE 51207
// exit ;
51205: GO 51215
// result := true ;
51207: LD_ADDR_VAR 0 6
51211: PUSH
51212: LD_INT 1
51214: ST_TO_ADDR
// end ;
51215: LD_VAR 0 6
51219: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51220: LD_INT 0
51222: PPUSH
51223: PPUSH
51224: PPUSH
51225: PPUSH
51226: PPUSH
51227: PPUSH
51228: PPUSH
51229: PPUSH
51230: PPUSH
51231: PPUSH
51232: PPUSH
51233: PPUSH
51234: PPUSH
51235: PPUSH
51236: PPUSH
51237: PPUSH
51238: PPUSH
51239: PPUSH
51240: PPUSH
51241: PPUSH
51242: PPUSH
51243: PPUSH
51244: PPUSH
51245: PPUSH
51246: PPUSH
51247: PPUSH
51248: PPUSH
51249: PPUSH
51250: PPUSH
51251: PPUSH
51252: PPUSH
51253: PPUSH
51254: PPUSH
51255: PPUSH
51256: PPUSH
51257: PPUSH
51258: PPUSH
51259: PPUSH
51260: PPUSH
51261: PPUSH
51262: PPUSH
51263: PPUSH
51264: PPUSH
51265: PPUSH
51266: PPUSH
51267: PPUSH
51268: PPUSH
51269: PPUSH
51270: PPUSH
51271: PPUSH
51272: PPUSH
51273: PPUSH
51274: PPUSH
51275: PPUSH
51276: PPUSH
51277: PPUSH
51278: PPUSH
51279: PPUSH
// result = [ ] ;
51280: LD_ADDR_VAR 0 7
51284: PUSH
51285: EMPTY
51286: ST_TO_ADDR
// temp_list = [ ] ;
51287: LD_ADDR_VAR 0 9
51291: PUSH
51292: EMPTY
51293: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51294: LD_VAR 0 4
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: LD_INT 4
51313: PUSH
51314: LD_INT 5
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: IN
51325: NOT
51326: PUSH
51327: LD_VAR 0 1
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: IN
51342: PUSH
51343: LD_VAR 0 5
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: IN
51362: NOT
51363: AND
51364: OR
51365: IFFALSE 51369
// exit ;
51367: GO 69760
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51369: LD_VAR 0 1
51373: PUSH
51374: LD_INT 6
51376: PUSH
51377: LD_INT 7
51379: PUSH
51380: LD_INT 8
51382: PUSH
51383: LD_INT 13
51385: PUSH
51386: LD_INT 12
51388: PUSH
51389: LD_INT 15
51391: PUSH
51392: LD_INT 11
51394: PUSH
51395: LD_INT 14
51397: PUSH
51398: LD_INT 10
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: IN
51412: IFFALSE 51422
// btype = b_lab ;
51414: LD_ADDR_VAR 0 1
51418: PUSH
51419: LD_INT 6
51421: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51422: LD_VAR 0 6
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: IN
51441: NOT
51442: PUSH
51443: LD_VAR 0 1
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: LD_INT 3
51459: PUSH
51460: LD_INT 6
51462: PUSH
51463: LD_INT 36
51465: PUSH
51466: LD_INT 4
51468: PUSH
51469: LD_INT 5
51471: PUSH
51472: LD_INT 31
51474: PUSH
51475: LD_INT 32
51477: PUSH
51478: LD_INT 33
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: IN
51494: NOT
51495: PUSH
51496: LD_VAR 0 6
51500: PUSH
51501: LD_INT 1
51503: EQUAL
51504: AND
51505: OR
51506: PUSH
51507: LD_VAR 0 1
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 3
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: IN
51522: NOT
51523: PUSH
51524: LD_VAR 0 6
51528: PUSH
51529: LD_INT 2
51531: EQUAL
51532: AND
51533: OR
51534: IFFALSE 51544
// mode = 0 ;
51536: LD_ADDR_VAR 0 6
51540: PUSH
51541: LD_INT 0
51543: ST_TO_ADDR
// case mode of 0 :
51544: LD_VAR 0 6
51548: PUSH
51549: LD_INT 0
51551: DOUBLE
51552: EQUAL
51553: IFTRUE 51557
51555: GO 63010
51557: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51558: LD_ADDR_VAR 0 11
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51751: LD_ADDR_VAR 0 12
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 3
51908: NEG
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51947: LD_ADDR_VAR 0 13
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: NEG
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52146: LD_ADDR_VAR 0 14
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 2
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52342: LD_ADDR_VAR 0 15
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52535: LD_ADDR_VAR 0 16
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52728: LD_ADDR_VAR 0 17
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52958: LD_ADDR_VAR 0 18
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53188: LD_ADDR_VAR 0 19
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53418: LD_ADDR_VAR 0 20
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53648: LD_ADDR_VAR 0 21
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 2
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 2
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53878: LD_ADDR_VAR 0 22
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 2
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: NEG
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54108: LD_ADDR_VAR 0 23
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 3
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 3
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54388: LD_ADDR_VAR 0 24
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54664: LD_ADDR_VAR 0 25
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 3
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54938: LD_ADDR_VAR 0 26
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55214: LD_ADDR_VAR 0 27
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: LD_INT 1
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55494: LD_ADDR_VAR 0 28
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: LD_INT 3
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 3
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 3
55741: NEG
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55776: LD_ADDR_VAR 0 29
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 2
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 3
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 3
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 3
56020: NEG
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56055: LD_ADDR_VAR 0 30
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 3
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 3
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56333: LD_ADDR_VAR 0 31
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 1
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: LD_INT 3
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56611: LD_ADDR_VAR 0 32
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: LD_INT 3
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56889: LD_ADDR_VAR 0 33
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: NEG
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 3
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57168: LD_ADDR_VAR 0 34
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 3
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: LD_INT 2
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 3
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57448: LD_ADDR_VAR 0 35
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57560: LD_ADDR_VAR 0 36
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: NEG
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57672: LD_ADDR_VAR 0 37
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57784: LD_ADDR_VAR 0 38
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57896: LD_ADDR_VAR 0 39
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58008: LD_ADDR_VAR 0 40
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58120: LD_ADDR_VAR 0 41
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 1
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: LD_INT 3
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 3
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: NEG
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58470: LD_ADDR_VAR 0 42
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 3
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 3
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 3
58767: NEG
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58820: LD_ADDR_VAR 0 43
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 2
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 3
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: NEG
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59168: LD_ADDR_VAR 0 44
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: LD_INT 3
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: LD_INT 3
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: LD_INT 3
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: NEG
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: NEG
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 3
59477: NEG
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59518: LD_ADDR_VAR 0 45
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 2
59643: PUSH
59644: LD_INT 2
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: NEG
59709: PUSH
59710: LD_INT 3
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: LD_INT 3
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 3
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 3
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 3
59827: NEG
59828: PUSH
59829: LD_INT 3
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59868: LD_ADDR_VAR 0 46
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: NEG
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 3
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 3
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 3
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 3
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 2
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 2
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: NEG
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60216: LD_ADDR_VAR 0 47
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60367: LD_ADDR_VAR 0 48
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 1
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60514: LD_ADDR_VAR 0 49
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 2
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60658: LD_ADDR_VAR 0 50
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 2
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 2
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60802: LD_ADDR_VAR 0 51
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60949: LD_ADDR_VAR 0 52
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: NEG
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61100: LD_ADDR_VAR 0 53
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61330: LD_ADDR_VAR 0 54
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: LD_INT 1
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: LD_INT 2
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61560: LD_ADDR_VAR 0 55
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 2
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 2
61759: NEG
61760: PUSH
61761: LD_INT 2
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61790: LD_ADDR_VAR 0 56
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: NEG
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: NEG
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62020: LD_ADDR_VAR 0 57
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 1
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: LD_INT 2
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62250: LD_ADDR_VAR 0 58
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62480: LD_ADDR_VAR 0 59
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: LD_INT 0
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: LD_INT 1
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62568: LD_ADDR_VAR 0 60
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 0
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62656: LD_ADDR_VAR 0 61
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62744: LD_ADDR_VAR 0 62
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: LD_INT 1
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: LD_INT 1
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62832: LD_ADDR_VAR 0 63
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62920: LD_ADDR_VAR 0 64
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 1
62978: NEG
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: ST_TO_ADDR
// end ; 1 :
63008: GO 68905
63010: LD_INT 1
63012: DOUBLE
63013: EQUAL
63014: IFTRUE 63018
63016: GO 65641
63018: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63019: LD_ADDR_VAR 0 11
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: PUSH
63028: LD_INT 3
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 3
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 2
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: LIST
63062: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63063: LD_ADDR_VAR 0 12
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 3
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 3
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: LIST
63103: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63104: LD_ADDR_VAR 0 13
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: LD_INT 2
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: LD_INT 3
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 2
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63144: LD_ADDR_VAR 0 14
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: LD_INT 3
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 3
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: LIST
63184: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63185: LD_ADDR_VAR 0 15
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 3
63203: NEG
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: LIST
63228: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63229: LD_ADDR_VAR 0 16
63233: PUSH
63234: LD_INT 2
63236: NEG
63237: PUSH
63238: LD_INT 3
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 3
63248: NEG
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 3
63260: NEG
63261: PUSH
63262: LD_INT 3
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: LIST
63274: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63275: LD_ADDR_VAR 0 17
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: LD_INT 3
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: LD_INT 3
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: LD_INT 2
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63319: LD_ADDR_VAR 0 18
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 3
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 3
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: LIST
63359: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63360: LD_ADDR_VAR 0 19
63364: PUSH
63365: LD_INT 3
63367: PUSH
63368: LD_INT 2
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 3
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: PUSH
63388: LD_INT 3
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: LIST
63399: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63400: LD_ADDR_VAR 0 20
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 3
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 3
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: LIST
63440: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63441: LD_ADDR_VAR 0 21
63445: PUSH
63446: LD_INT 2
63448: NEG
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 3
63459: NEG
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 3
63470: NEG
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: LIST
63484: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63485: LD_ADDR_VAR 0 22
63489: PUSH
63490: LD_INT 2
63492: NEG
63493: PUSH
63494: LD_INT 3
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 3
63504: NEG
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 3
63516: NEG
63517: PUSH
63518: LD_INT 3
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: LIST
63530: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63531: LD_ADDR_VAR 0 23
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: LD_INT 3
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: LD_INT 4
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: LD_INT 3
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: LIST
63574: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63575: LD_ADDR_VAR 0 24
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63616: LD_ADDR_VAR 0 25
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: LD_INT 3
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 4
63633: PUSH
63634: LD_INT 3
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 3
63643: PUSH
63644: LD_INT 4
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63656: LD_ADDR_VAR 0 26
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 4
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 3
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63697: LD_ADDR_VAR 0 27
63701: PUSH
63702: LD_INT 3
63704: NEG
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 3
63715: NEG
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 4
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: LIST
63740: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63741: LD_ADDR_VAR 0 28
63745: PUSH
63746: LD_INT 3
63748: NEG
63749: PUSH
63750: LD_INT 3
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: LD_INT 4
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 4
63772: NEG
63773: PUSH
63774: LD_INT 3
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63787: LD_ADDR_VAR 0 29
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 3
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 4
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: LD_INT 4
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: LD_INT 3
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 5
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 5
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: LD_INT 4
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: LD_INT 6
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 6
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 5
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63942: LD_ADDR_VAR 0 30
63946: PUSH
63947: LD_INT 2
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 3
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 3
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 3
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 4
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 4
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 4
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 5
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 5
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 5
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 6
64053: PUSH
64054: LD_INT 0
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 6
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64085: LD_ADDR_VAR 0 31
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 3
64102: PUSH
64103: LD_INT 3
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 2
64112: PUSH
64113: LD_INT 3
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 4
64122: PUSH
64123: LD_INT 3
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 4
64132: PUSH
64133: LD_INT 4
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: LD_INT 4
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 5
64152: PUSH
64153: LD_INT 4
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 5
64162: PUSH
64163: LD_INT 5
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 4
64172: PUSH
64173: LD_INT 5
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 6
64182: PUSH
64183: LD_INT 5
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 6
64192: PUSH
64193: LD_INT 6
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 5
64202: PUSH
64203: LD_INT 6
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64224: LD_ADDR_VAR 0 32
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: LD_INT 4
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 4
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: LD_INT 3
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: LD_INT 5
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: LD_INT 5
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 1
64313: NEG
64314: PUSH
64315: LD_INT 4
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 6
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 6
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 5
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64367: LD_ADDR_VAR 0 33
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 3
64385: NEG
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 3
64396: NEG
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: NEG
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 4
64419: NEG
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 4
64430: NEG
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 4
64442: NEG
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 5
64453: NEG
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 5
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 5
64476: NEG
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 6
64487: NEG
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 6
64498: NEG
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64522: LD_ADDR_VAR 0 34
64526: PUSH
64527: LD_INT 2
64529: NEG
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 3
64541: NEG
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 3
64553: NEG
64554: PUSH
64555: LD_INT 3
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 3
64565: NEG
64566: PUSH
64567: LD_INT 4
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 4
64577: NEG
64578: PUSH
64579: LD_INT 3
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 4
64589: NEG
64590: PUSH
64591: LD_INT 4
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 4
64601: NEG
64602: PUSH
64603: LD_INT 5
64605: NEG
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 5
64613: NEG
64614: PUSH
64615: LD_INT 4
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 5
64625: NEG
64626: PUSH
64627: LD_INT 5
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 5
64637: NEG
64638: PUSH
64639: LD_INT 6
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 6
64649: NEG
64650: PUSH
64651: LD_INT 5
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 6
64661: NEG
64662: PUSH
64663: LD_INT 6
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64685: LD_ADDR_VAR 0 41
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: LD_INT 2
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: LIST
64728: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64729: LD_ADDR_VAR 0 42
64733: PUSH
64734: LD_INT 2
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 3
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64770: LD_ADDR_VAR 0 43
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: LD_INT 2
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 3
64787: PUSH
64788: LD_INT 2
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 2
64797: PUSH
64798: LD_INT 3
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64810: LD_ADDR_VAR 0 44
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: LIST
64850: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64851: LD_ADDR_VAR 0 45
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: NEG
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: LIST
64894: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64895: LD_ADDR_VAR 0 46
64899: PUSH
64900: LD_INT 2
64902: NEG
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 2
64914: NEG
64915: PUSH
64916: LD_INT 3
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 3
64926: NEG
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: LIST
64940: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64941: LD_ADDR_VAR 0 47
64945: PUSH
64946: LD_INT 2
64948: NEG
64949: PUSH
64950: LD_INT 3
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: LD_INT 3
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64974: LD_ADDR_VAR 0 48
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: LD_INT 2
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65005: LD_ADDR_VAR 0 49
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65034: LD_ADDR_VAR 0 50
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65063: LD_ADDR_VAR 0 51
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: LD_INT 2
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65094: LD_ADDR_VAR 0 52
65098: PUSH
65099: LD_INT 3
65101: NEG
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 3
65113: NEG
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65127: LD_ADDR_VAR 0 53
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 3
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: LD_INT 2
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: LIST
65170: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65171: LD_ADDR_VAR 0 54
65175: PUSH
65176: LD_INT 2
65178: PUSH
65179: LD_INT 1
65181: NEG
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 3
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: LD_INT 1
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65212: LD_ADDR_VAR 0 55
65216: PUSH
65217: LD_INT 3
65219: PUSH
65220: LD_INT 2
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: LD_INT 3
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 2
65239: PUSH
65240: LD_INT 3
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: LIST
65251: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65252: LD_ADDR_VAR 0 56
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 2
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65293: LD_ADDR_VAR 0 57
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 3
65311: NEG
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65337: LD_ADDR_VAR 0 58
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: LD_INT 3
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 3
65356: NEG
65357: PUSH
65358: LD_INT 2
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: LD_INT 3
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65383: LD_ADDR_VAR 0 59
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65427: LD_ADDR_VAR 0 60
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65468: LD_ADDR_VAR 0 61
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 2
65485: PUSH
65486: LD_INT 2
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65508: LD_ADDR_VAR 0 62
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: LD_INT 2
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65549: LD_ADDR_VAR 0 63
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 2
65567: NEG
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 2
65578: NEG
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65593: LD_ADDR_VAR 0 64
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 2
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 2
65612: NEG
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 2
65624: NEG
65625: PUSH
65626: LD_INT 2
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// end ; 2 :
65639: GO 68905
65641: LD_INT 2
65643: DOUBLE
65644: EQUAL
65645: IFTRUE 65649
65647: GO 68904
65649: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65650: LD_ADDR_VAR 0 29
65654: PUSH
65655: LD_INT 4
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 4
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 5
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 5
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 4
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 3
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: LD_INT 2
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 5
65740: PUSH
65741: LD_INT 2
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 3
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 3
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 4
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 4
65780: PUSH
65781: LD_INT 4
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: LD_INT 4
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 2
65810: PUSH
65811: LD_INT 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 4
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 2
65830: PUSH
65831: LD_INT 4
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: LD_INT 4
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 3
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 1
65860: PUSH
65861: LD_INT 4
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: PUSH
65871: LD_INT 5
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: LD_INT 5
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: LD_INT 3
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 2
65912: PUSH
65913: LD_INT 5
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: LD_INT 3
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 3
65933: NEG
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 3
65944: NEG
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 2
65956: NEG
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 2
65967: NEG
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 4
65989: NEG
65990: PUSH
65991: LD_INT 0
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 4
66012: NEG
66013: PUSH
66014: LD_INT 2
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 2
66024: NEG
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 4
66035: NEG
66036: PUSH
66037: LD_INT 4
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 4
66047: NEG
66048: PUSH
66049: LD_INT 5
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: NEG
66060: PUSH
66061: LD_INT 4
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 3
66071: NEG
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 4
66083: NEG
66084: PUSH
66085: LD_INT 3
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 5
66095: NEG
66096: PUSH
66097: LD_INT 4
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 5
66107: NEG
66108: PUSH
66109: LD_INT 5
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 3
66119: NEG
66120: PUSH
66121: LD_INT 5
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 5
66131: NEG
66132: PUSH
66133: LD_INT 3
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66188: LD_ADDR_VAR 0 30
66192: PUSH
66193: LD_INT 4
66195: PUSH
66196: LD_INT 4
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 4
66205: PUSH
66206: LD_INT 3
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 5
66215: PUSH
66216: LD_INT 4
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 5
66225: PUSH
66226: LD_INT 5
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 4
66235: PUSH
66236: LD_INT 5
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: PUSH
66246: LD_INT 4
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 3
66255: PUSH
66256: LD_INT 3
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 5
66265: PUSH
66266: LD_INT 3
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 3
66275: PUSH
66276: LD_INT 5
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: LD_INT 2
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: LD_INT 3
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 1
66315: PUSH
66316: LD_INT 4
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: LD_INT 4
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 1
66335: NEG
66336: PUSH
66337: LD_INT 3
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: LD_INT 2
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: LD_INT 4
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: LD_INT 2
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 4
66378: NEG
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 4
66389: NEG
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 3
66401: NEG
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 3
66412: NEG
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 4
66423: NEG
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 5
66434: NEG
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 5
66445: NEG
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 5
66457: NEG
66458: PUSH
66459: LD_INT 2
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 3
66469: NEG
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 3
66480: NEG
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: NEG
66493: PUSH
66494: LD_INT 4
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 2
66504: NEG
66505: PUSH
66506: LD_INT 3
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 2
66516: NEG
66517: PUSH
66518: LD_INT 2
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 3
66528: NEG
66529: PUSH
66530: LD_INT 2
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 4
66540: NEG
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 4
66552: NEG
66553: PUSH
66554: LD_INT 4
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: LD_INT 4
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 4
66576: NEG
66577: PUSH
66578: LD_INT 2
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 4
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: LD_INT 5
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: LD_INT 4
66613: NEG
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: LD_INT 3
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: NEG
66644: PUSH
66645: LD_INT 4
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 5
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 2
66667: PUSH
66668: LD_INT 3
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: LD_INT 5
66682: NEG
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66735: LD_ADDR_VAR 0 31
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: LD_INT 4
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: LD_INT 3
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: LD_INT 4
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: LD_INT 5
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: LD_INT 5
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: LD_INT 4
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: LD_INT 3
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 2
66814: PUSH
66815: LD_INT 5
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: LD_INT 3
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 3
66835: NEG
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 3
66846: NEG
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 2
66858: NEG
66859: PUSH
66860: LD_INT 0
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 2
66869: NEG
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 3
66880: NEG
66881: PUSH
66882: LD_INT 1
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 4
66891: NEG
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 4
66914: NEG
66915: PUSH
66916: LD_INT 2
66918: NEG
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 4
66937: NEG
66938: PUSH
66939: LD_INT 4
66941: NEG
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 4
66949: NEG
66950: PUSH
66951: LD_INT 5
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 3
66961: NEG
66962: PUSH
66963: LD_INT 4
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 3
66973: NEG
66974: PUSH
66975: LD_INT 3
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 4
66985: NEG
66986: PUSH
66987: LD_INT 3
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 5
66997: NEG
66998: PUSH
66999: LD_INT 4
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 5
67009: NEG
67010: PUSH
67011: LD_INT 5
67013: NEG
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: LD_INT 5
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 5
67033: NEG
67034: PUSH
67035: LD_INT 3
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: LD_INT 3
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: LD_INT 4
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 1
67067: PUSH
67068: LD_INT 3
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 2
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 0
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: LD_INT 3
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: LD_INT 4
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 2
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 2
67135: NEG
67136: PUSH
67137: LD_INT 4
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 4
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 4
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 5
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 5
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 4
67188: PUSH
67189: LD_INT 1
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 3
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 3
67208: PUSH
67209: LD_INT 1
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 3
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 5
67230: PUSH
67231: LD_INT 2
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67285: LD_ADDR_VAR 0 32
67289: PUSH
67290: LD_INT 4
67292: NEG
67293: PUSH
67294: LD_INT 0
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 4
67303: NEG
67304: PUSH
67305: LD_INT 1
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 3
67315: NEG
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 3
67326: NEG
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 4
67337: NEG
67338: PUSH
67339: LD_INT 1
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 5
67348: NEG
67349: PUSH
67350: LD_INT 0
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 5
67359: NEG
67360: PUSH
67361: LD_INT 1
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 5
67371: NEG
67372: PUSH
67373: LD_INT 2
67375: NEG
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: LD_INT 3
67383: NEG
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 3
67406: NEG
67407: PUSH
67408: LD_INT 4
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 2
67418: NEG
67419: PUSH
67420: LD_INT 3
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 2
67430: NEG
67431: PUSH
67432: LD_INT 2
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 3
67442: NEG
67443: PUSH
67444: LD_INT 2
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 4
67454: NEG
67455: PUSH
67456: LD_INT 3
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 4
67466: NEG
67467: PUSH
67468: LD_INT 4
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: NEG
67479: PUSH
67480: LD_INT 4
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 4
67490: NEG
67491: PUSH
67492: LD_INT 2
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 0
67502: PUSH
67503: LD_INT 4
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: LD_INT 5
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 4
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 3
67538: NEG
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: LD_INT 3
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 1
67557: NEG
67558: PUSH
67559: LD_INT 4
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: LD_INT 5
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: LD_INT 3
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: NEG
67593: PUSH
67594: LD_INT 5
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: LD_INT 1
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 4
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 3
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 2
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: LD_INT 1
67668: NEG
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 2
67676: PUSH
67677: LD_INT 2
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 4
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 4
67697: PUSH
67698: LD_INT 4
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 4
67707: PUSH
67708: LD_INT 3
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 5
67717: PUSH
67718: LD_INT 4
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 5
67727: PUSH
67728: LD_INT 5
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 4
67737: PUSH
67738: LD_INT 5
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 3
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 5
67767: PUSH
67768: LD_INT 3
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: LD_INT 5
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67832: LD_ADDR_VAR 0 33
67836: PUSH
67837: LD_INT 4
67839: NEG
67840: PUSH
67841: LD_INT 4
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 4
67851: NEG
67852: PUSH
67853: LD_INT 5
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 3
67863: NEG
67864: PUSH
67865: LD_INT 4
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 3
67875: NEG
67876: PUSH
67877: LD_INT 3
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 4
67887: NEG
67888: PUSH
67889: LD_INT 3
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 5
67899: NEG
67900: PUSH
67901: LD_INT 4
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 5
67911: NEG
67912: PUSH
67913: LD_INT 5
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 3
67923: NEG
67924: PUSH
67925: LD_INT 5
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 5
67935: NEG
67936: PUSH
67937: LD_INT 3
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: LD_INT 3
67950: NEG
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: LD_INT 4
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 1
67969: PUSH
67970: LD_INT 3
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: LD_INT 2
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 2
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 1
68014: NEG
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 2
68026: PUSH
68027: LD_INT 2
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 2
68037: NEG
68038: PUSH
68039: LD_INT 4
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 4
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 4
68059: PUSH
68060: LD_INT 1
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 5
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 5
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 4
68090: PUSH
68091: LD_INT 1
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 3
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: LD_INT 1
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: LD_INT 2
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 5
68132: PUSH
68133: LD_INT 2
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 3
68142: PUSH
68143: LD_INT 3
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 3
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 4
68162: PUSH
68163: LD_INT 3
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 4
68172: PUSH
68173: LD_INT 4
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: LD_INT 4
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 2
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 2
68202: PUSH
68203: LD_INT 2
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 4
68212: PUSH
68213: LD_INT 2
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 2
68222: PUSH
68223: LD_INT 4
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_INT 4
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: LD_INT 3
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 1
68252: PUSH
68253: LD_INT 4
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 1
68262: PUSH
68263: LD_INT 5
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: LD_INT 5
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: LD_INT 4
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 1
68293: NEG
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 2
68304: PUSH
68305: LD_INT 5
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 2
68314: NEG
68315: PUSH
68316: LD_INT 3
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68370: LD_ADDR_VAR 0 34
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: LD_INT 4
68380: NEG
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: LD_INT 5
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: LD_INT 3
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: LD_INT 3
68424: NEG
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: PUSH
68434: LD_INT 4
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 1
68444: NEG
68445: PUSH
68446: LD_INT 5
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 2
68467: NEG
68468: PUSH
68469: LD_INT 5
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 3
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: LD_INT 0
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 4
68510: PUSH
68511: LD_INT 1
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: LD_INT 1
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 2
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 2
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: EMPTY
68546: LIST
68547: LIST
68548: PUSH
68549: LD_INT 2
68551: PUSH
68552: LD_INT 2
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 4
68562: PUSH
68563: LD_INT 2
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 4
68572: PUSH
68573: LD_INT 4
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: LD_INT 3
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 5
68592: PUSH
68593: LD_INT 4
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 5
68602: PUSH
68603: LD_INT 5
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 4
68612: PUSH
68613: LD_INT 5
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 3
68622: PUSH
68623: LD_INT 4
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 3
68632: PUSH
68633: LD_INT 3
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 5
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 3
68652: PUSH
68653: LD_INT 5
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 3
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: LD_INT 2
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 1
68682: PUSH
68683: LD_INT 3
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 1
68692: PUSH
68693: LD_INT 4
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 0
68702: PUSH
68703: LD_INT 4
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 1
68712: NEG
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 1
68723: NEG
68724: PUSH
68725: LD_INT 2
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 2
68734: PUSH
68735: LD_INT 4
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 2
68744: NEG
68745: PUSH
68746: LD_INT 2
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 4
68755: NEG
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 4
68766: NEG
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 3
68778: NEG
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 3
68789: NEG
68790: PUSH
68791: LD_INT 1
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 4
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 5
68811: NEG
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 5
68822: NEG
68823: PUSH
68824: LD_INT 1
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 5
68834: NEG
68835: PUSH
68836: LD_INT 2
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 3
68846: NEG
68847: PUSH
68848: LD_INT 2
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: ST_TO_ADDR
// end ; end ;
68902: GO 68905
68904: POP
// case btype of b_depot , b_warehouse :
68905: LD_VAR 0 1
68909: PUSH
68910: LD_INT 0
68912: DOUBLE
68913: EQUAL
68914: IFTRUE 68924
68916: LD_INT 1
68918: DOUBLE
68919: EQUAL
68920: IFTRUE 68924
68922: GO 69125
68924: POP
// case nation of nation_american :
68925: LD_VAR 0 5
68929: PUSH
68930: LD_INT 1
68932: DOUBLE
68933: EQUAL
68934: IFTRUE 68938
68936: GO 68994
68938: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68939: LD_ADDR_VAR 0 9
68943: PUSH
68944: LD_VAR 0 11
68948: PUSH
68949: LD_VAR 0 12
68953: PUSH
68954: LD_VAR 0 13
68958: PUSH
68959: LD_VAR 0 14
68963: PUSH
68964: LD_VAR 0 15
68968: PUSH
68969: LD_VAR 0 16
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: PUSH
68982: LD_VAR 0 4
68986: PUSH
68987: LD_INT 1
68989: PLUS
68990: ARRAY
68991: ST_TO_ADDR
68992: GO 69123
68994: LD_INT 2
68996: DOUBLE
68997: EQUAL
68998: IFTRUE 69002
69000: GO 69058
69002: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69003: LD_ADDR_VAR 0 9
69007: PUSH
69008: LD_VAR 0 17
69012: PUSH
69013: LD_VAR 0 18
69017: PUSH
69018: LD_VAR 0 19
69022: PUSH
69023: LD_VAR 0 20
69027: PUSH
69028: LD_VAR 0 21
69032: PUSH
69033: LD_VAR 0 22
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: PUSH
69046: LD_VAR 0 4
69050: PUSH
69051: LD_INT 1
69053: PLUS
69054: ARRAY
69055: ST_TO_ADDR
69056: GO 69123
69058: LD_INT 3
69060: DOUBLE
69061: EQUAL
69062: IFTRUE 69066
69064: GO 69122
69066: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69067: LD_ADDR_VAR 0 9
69071: PUSH
69072: LD_VAR 0 23
69076: PUSH
69077: LD_VAR 0 24
69081: PUSH
69082: LD_VAR 0 25
69086: PUSH
69087: LD_VAR 0 26
69091: PUSH
69092: LD_VAR 0 27
69096: PUSH
69097: LD_VAR 0 28
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: PUSH
69110: LD_VAR 0 4
69114: PUSH
69115: LD_INT 1
69117: PLUS
69118: ARRAY
69119: ST_TO_ADDR
69120: GO 69123
69122: POP
69123: GO 69678
69125: LD_INT 2
69127: DOUBLE
69128: EQUAL
69129: IFTRUE 69139
69131: LD_INT 3
69133: DOUBLE
69134: EQUAL
69135: IFTRUE 69139
69137: GO 69195
69139: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69140: LD_ADDR_VAR 0 9
69144: PUSH
69145: LD_VAR 0 29
69149: PUSH
69150: LD_VAR 0 30
69154: PUSH
69155: LD_VAR 0 31
69159: PUSH
69160: LD_VAR 0 32
69164: PUSH
69165: LD_VAR 0 33
69169: PUSH
69170: LD_VAR 0 34
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: PUSH
69183: LD_VAR 0 4
69187: PUSH
69188: LD_INT 1
69190: PLUS
69191: ARRAY
69192: ST_TO_ADDR
69193: GO 69678
69195: LD_INT 16
69197: DOUBLE
69198: EQUAL
69199: IFTRUE 69257
69201: LD_INT 17
69203: DOUBLE
69204: EQUAL
69205: IFTRUE 69257
69207: LD_INT 18
69209: DOUBLE
69210: EQUAL
69211: IFTRUE 69257
69213: LD_INT 19
69215: DOUBLE
69216: EQUAL
69217: IFTRUE 69257
69219: LD_INT 22
69221: DOUBLE
69222: EQUAL
69223: IFTRUE 69257
69225: LD_INT 20
69227: DOUBLE
69228: EQUAL
69229: IFTRUE 69257
69231: LD_INT 21
69233: DOUBLE
69234: EQUAL
69235: IFTRUE 69257
69237: LD_INT 23
69239: DOUBLE
69240: EQUAL
69241: IFTRUE 69257
69243: LD_INT 24
69245: DOUBLE
69246: EQUAL
69247: IFTRUE 69257
69249: LD_INT 25
69251: DOUBLE
69252: EQUAL
69253: IFTRUE 69257
69255: GO 69313
69257: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69258: LD_ADDR_VAR 0 9
69262: PUSH
69263: LD_VAR 0 35
69267: PUSH
69268: LD_VAR 0 36
69272: PUSH
69273: LD_VAR 0 37
69277: PUSH
69278: LD_VAR 0 38
69282: PUSH
69283: LD_VAR 0 39
69287: PUSH
69288: LD_VAR 0 40
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: PUSH
69301: LD_VAR 0 4
69305: PUSH
69306: LD_INT 1
69308: PLUS
69309: ARRAY
69310: ST_TO_ADDR
69311: GO 69678
69313: LD_INT 6
69315: DOUBLE
69316: EQUAL
69317: IFTRUE 69369
69319: LD_INT 7
69321: DOUBLE
69322: EQUAL
69323: IFTRUE 69369
69325: LD_INT 8
69327: DOUBLE
69328: EQUAL
69329: IFTRUE 69369
69331: LD_INT 13
69333: DOUBLE
69334: EQUAL
69335: IFTRUE 69369
69337: LD_INT 12
69339: DOUBLE
69340: EQUAL
69341: IFTRUE 69369
69343: LD_INT 15
69345: DOUBLE
69346: EQUAL
69347: IFTRUE 69369
69349: LD_INT 11
69351: DOUBLE
69352: EQUAL
69353: IFTRUE 69369
69355: LD_INT 14
69357: DOUBLE
69358: EQUAL
69359: IFTRUE 69369
69361: LD_INT 10
69363: DOUBLE
69364: EQUAL
69365: IFTRUE 69369
69367: GO 69425
69369: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69370: LD_ADDR_VAR 0 9
69374: PUSH
69375: LD_VAR 0 41
69379: PUSH
69380: LD_VAR 0 42
69384: PUSH
69385: LD_VAR 0 43
69389: PUSH
69390: LD_VAR 0 44
69394: PUSH
69395: LD_VAR 0 45
69399: PUSH
69400: LD_VAR 0 46
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: PUSH
69413: LD_VAR 0 4
69417: PUSH
69418: LD_INT 1
69420: PLUS
69421: ARRAY
69422: ST_TO_ADDR
69423: GO 69678
69425: LD_INT 36
69427: DOUBLE
69428: EQUAL
69429: IFTRUE 69433
69431: GO 69489
69433: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69434: LD_ADDR_VAR 0 9
69438: PUSH
69439: LD_VAR 0 47
69443: PUSH
69444: LD_VAR 0 48
69448: PUSH
69449: LD_VAR 0 49
69453: PUSH
69454: LD_VAR 0 50
69458: PUSH
69459: LD_VAR 0 51
69463: PUSH
69464: LD_VAR 0 52
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: PUSH
69477: LD_VAR 0 4
69481: PUSH
69482: LD_INT 1
69484: PLUS
69485: ARRAY
69486: ST_TO_ADDR
69487: GO 69678
69489: LD_INT 4
69491: DOUBLE
69492: EQUAL
69493: IFTRUE 69515
69495: LD_INT 5
69497: DOUBLE
69498: EQUAL
69499: IFTRUE 69515
69501: LD_INT 34
69503: DOUBLE
69504: EQUAL
69505: IFTRUE 69515
69507: LD_INT 37
69509: DOUBLE
69510: EQUAL
69511: IFTRUE 69515
69513: GO 69571
69515: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69516: LD_ADDR_VAR 0 9
69520: PUSH
69521: LD_VAR 0 53
69525: PUSH
69526: LD_VAR 0 54
69530: PUSH
69531: LD_VAR 0 55
69535: PUSH
69536: LD_VAR 0 56
69540: PUSH
69541: LD_VAR 0 57
69545: PUSH
69546: LD_VAR 0 58
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: PUSH
69559: LD_VAR 0 4
69563: PUSH
69564: LD_INT 1
69566: PLUS
69567: ARRAY
69568: ST_TO_ADDR
69569: GO 69678
69571: LD_INT 31
69573: DOUBLE
69574: EQUAL
69575: IFTRUE 69621
69577: LD_INT 32
69579: DOUBLE
69580: EQUAL
69581: IFTRUE 69621
69583: LD_INT 33
69585: DOUBLE
69586: EQUAL
69587: IFTRUE 69621
69589: LD_INT 27
69591: DOUBLE
69592: EQUAL
69593: IFTRUE 69621
69595: LD_INT 26
69597: DOUBLE
69598: EQUAL
69599: IFTRUE 69621
69601: LD_INT 28
69603: DOUBLE
69604: EQUAL
69605: IFTRUE 69621
69607: LD_INT 29
69609: DOUBLE
69610: EQUAL
69611: IFTRUE 69621
69613: LD_INT 30
69615: DOUBLE
69616: EQUAL
69617: IFTRUE 69621
69619: GO 69677
69621: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69622: LD_ADDR_VAR 0 9
69626: PUSH
69627: LD_VAR 0 59
69631: PUSH
69632: LD_VAR 0 60
69636: PUSH
69637: LD_VAR 0 61
69641: PUSH
69642: LD_VAR 0 62
69646: PUSH
69647: LD_VAR 0 63
69651: PUSH
69652: LD_VAR 0 64
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: PUSH
69665: LD_VAR 0 4
69669: PUSH
69670: LD_INT 1
69672: PLUS
69673: ARRAY
69674: ST_TO_ADDR
69675: GO 69678
69677: POP
// temp_list2 = [ ] ;
69678: LD_ADDR_VAR 0 10
69682: PUSH
69683: EMPTY
69684: ST_TO_ADDR
// for i in temp_list do
69685: LD_ADDR_VAR 0 8
69689: PUSH
69690: LD_VAR 0 9
69694: PUSH
69695: FOR_IN
69696: IFFALSE 69748
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69698: LD_ADDR_VAR 0 10
69702: PUSH
69703: LD_VAR 0 10
69707: PUSH
69708: LD_VAR 0 8
69712: PUSH
69713: LD_INT 1
69715: ARRAY
69716: PUSH
69717: LD_VAR 0 2
69721: PLUS
69722: PUSH
69723: LD_VAR 0 8
69727: PUSH
69728: LD_INT 2
69730: ARRAY
69731: PUSH
69732: LD_VAR 0 3
69736: PLUS
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: EMPTY
69743: LIST
69744: ADD
69745: ST_TO_ADDR
69746: GO 69695
69748: POP
69749: POP
// result = temp_list2 ;
69750: LD_ADDR_VAR 0 7
69754: PUSH
69755: LD_VAR 0 10
69759: ST_TO_ADDR
// end ;
69760: LD_VAR 0 7
69764: RET
// export function EnemyInRange ( unit , dist ) ; begin
69765: LD_INT 0
69767: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69768: LD_ADDR_VAR 0 3
69772: PUSH
69773: LD_VAR 0 1
69777: PPUSH
69778: CALL_OW 255
69782: PPUSH
69783: LD_VAR 0 1
69787: PPUSH
69788: CALL_OW 250
69792: PPUSH
69793: LD_VAR 0 1
69797: PPUSH
69798: CALL_OW 251
69802: PPUSH
69803: LD_VAR 0 2
69807: PPUSH
69808: CALL 43167 0 4
69812: PUSH
69813: LD_INT 4
69815: ARRAY
69816: ST_TO_ADDR
// end ;
69817: LD_VAR 0 3
69821: RET
// export function PlayerSeeMe ( unit ) ; begin
69822: LD_INT 0
69824: PPUSH
// result := See ( your_side , unit ) ;
69825: LD_ADDR_VAR 0 2
69829: PUSH
69830: LD_OWVAR 2
69834: PPUSH
69835: LD_VAR 0 1
69839: PPUSH
69840: CALL_OW 292
69844: ST_TO_ADDR
// end ;
69845: LD_VAR 0 2
69849: RET
// export function ReverseDir ( unit ) ; begin
69850: LD_INT 0
69852: PPUSH
// if not unit then
69853: LD_VAR 0 1
69857: NOT
69858: IFFALSE 69862
// exit ;
69860: GO 69885
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69862: LD_ADDR_VAR 0 2
69866: PUSH
69867: LD_VAR 0 1
69871: PPUSH
69872: CALL_OW 254
69876: PUSH
69877: LD_INT 3
69879: PLUS
69880: PUSH
69881: LD_INT 6
69883: MOD
69884: ST_TO_ADDR
// end ;
69885: LD_VAR 0 2
69889: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69890: LD_INT 0
69892: PPUSH
69893: PPUSH
69894: PPUSH
69895: PPUSH
69896: PPUSH
69897: PPUSH
// if not unit or not hexes then
69898: LD_VAR 0 1
69902: NOT
69903: PUSH
69904: LD_VAR 0 2
69908: NOT
69909: OR
69910: IFFALSE 69914
// exit ;
69912: GO 70037
// dist := 9999 ;
69914: LD_ADDR_VAR 0 5
69918: PUSH
69919: LD_INT 9999
69921: ST_TO_ADDR
// for i = 1 to hexes do
69922: LD_ADDR_VAR 0 4
69926: PUSH
69927: DOUBLE
69928: LD_INT 1
69930: DEC
69931: ST_TO_ADDR
69932: LD_VAR 0 2
69936: PUSH
69937: FOR_TO
69938: IFFALSE 70025
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69940: LD_ADDR_VAR 0 6
69944: PUSH
69945: LD_VAR 0 1
69949: PPUSH
69950: LD_VAR 0 2
69954: PUSH
69955: LD_VAR 0 4
69959: ARRAY
69960: PUSH
69961: LD_INT 1
69963: ARRAY
69964: PPUSH
69965: LD_VAR 0 2
69969: PUSH
69970: LD_VAR 0 4
69974: ARRAY
69975: PUSH
69976: LD_INT 2
69978: ARRAY
69979: PPUSH
69980: CALL_OW 297
69984: ST_TO_ADDR
// if tdist < dist then
69985: LD_VAR 0 6
69989: PUSH
69990: LD_VAR 0 5
69994: LESS
69995: IFFALSE 70023
// begin hex := hexes [ i ] ;
69997: LD_ADDR_VAR 0 8
70001: PUSH
70002: LD_VAR 0 2
70006: PUSH
70007: LD_VAR 0 4
70011: ARRAY
70012: ST_TO_ADDR
// dist := tdist ;
70013: LD_ADDR_VAR 0 5
70017: PUSH
70018: LD_VAR 0 6
70022: ST_TO_ADDR
// end ; end ;
70023: GO 69937
70025: POP
70026: POP
// result := hex ;
70027: LD_ADDR_VAR 0 3
70031: PUSH
70032: LD_VAR 0 8
70036: ST_TO_ADDR
// end ;
70037: LD_VAR 0 3
70041: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70042: LD_INT 0
70044: PPUSH
70045: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70046: LD_VAR 0 1
70050: NOT
70051: PUSH
70052: LD_VAR 0 1
70056: PUSH
70057: LD_INT 21
70059: PUSH
70060: LD_INT 2
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 23
70069: PUSH
70070: LD_INT 2
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PPUSH
70081: CALL_OW 69
70085: IN
70086: NOT
70087: OR
70088: IFFALSE 70092
// exit ;
70090: GO 70139
// for i = 1 to 3 do
70092: LD_ADDR_VAR 0 3
70096: PUSH
70097: DOUBLE
70098: LD_INT 1
70100: DEC
70101: ST_TO_ADDR
70102: LD_INT 3
70104: PUSH
70105: FOR_TO
70106: IFFALSE 70137
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70108: LD_VAR 0 1
70112: PPUSH
70113: CALL_OW 250
70117: PPUSH
70118: LD_VAR 0 1
70122: PPUSH
70123: CALL_OW 251
70127: PPUSH
70128: LD_INT 1
70130: PPUSH
70131: CALL_OW 453
70135: GO 70105
70137: POP
70138: POP
// end ;
70139: LD_VAR 0 2
70143: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70144: LD_INT 0
70146: PPUSH
70147: PPUSH
70148: PPUSH
70149: PPUSH
70150: PPUSH
70151: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70152: LD_VAR 0 1
70156: NOT
70157: PUSH
70158: LD_VAR 0 2
70162: NOT
70163: OR
70164: PUSH
70165: LD_VAR 0 1
70169: PPUSH
70170: CALL_OW 314
70174: OR
70175: IFFALSE 70179
// exit ;
70177: GO 70620
// x := GetX ( enemy_unit ) ;
70179: LD_ADDR_VAR 0 7
70183: PUSH
70184: LD_VAR 0 2
70188: PPUSH
70189: CALL_OW 250
70193: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70194: LD_ADDR_VAR 0 8
70198: PUSH
70199: LD_VAR 0 2
70203: PPUSH
70204: CALL_OW 251
70208: ST_TO_ADDR
// if not x or not y then
70209: LD_VAR 0 7
70213: NOT
70214: PUSH
70215: LD_VAR 0 8
70219: NOT
70220: OR
70221: IFFALSE 70225
// exit ;
70223: GO 70620
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70225: LD_ADDR_VAR 0 6
70229: PUSH
70230: LD_VAR 0 7
70234: PPUSH
70235: LD_INT 0
70237: PPUSH
70238: LD_INT 4
70240: PPUSH
70241: CALL_OW 272
70245: PUSH
70246: LD_VAR 0 8
70250: PPUSH
70251: LD_INT 0
70253: PPUSH
70254: LD_INT 4
70256: PPUSH
70257: CALL_OW 273
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_VAR 0 7
70270: PPUSH
70271: LD_INT 1
70273: PPUSH
70274: LD_INT 4
70276: PPUSH
70277: CALL_OW 272
70281: PUSH
70282: LD_VAR 0 8
70286: PPUSH
70287: LD_INT 1
70289: PPUSH
70290: LD_INT 4
70292: PPUSH
70293: CALL_OW 273
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_VAR 0 7
70306: PPUSH
70307: LD_INT 2
70309: PPUSH
70310: LD_INT 4
70312: PPUSH
70313: CALL_OW 272
70317: PUSH
70318: LD_VAR 0 8
70322: PPUSH
70323: LD_INT 2
70325: PPUSH
70326: LD_INT 4
70328: PPUSH
70329: CALL_OW 273
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_VAR 0 7
70342: PPUSH
70343: LD_INT 3
70345: PPUSH
70346: LD_INT 4
70348: PPUSH
70349: CALL_OW 272
70353: PUSH
70354: LD_VAR 0 8
70358: PPUSH
70359: LD_INT 3
70361: PPUSH
70362: LD_INT 4
70364: PPUSH
70365: CALL_OW 273
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_VAR 0 7
70378: PPUSH
70379: LD_INT 4
70381: PPUSH
70382: LD_INT 4
70384: PPUSH
70385: CALL_OW 272
70389: PUSH
70390: LD_VAR 0 8
70394: PPUSH
70395: LD_INT 4
70397: PPUSH
70398: LD_INT 4
70400: PPUSH
70401: CALL_OW 273
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_VAR 0 7
70414: PPUSH
70415: LD_INT 5
70417: PPUSH
70418: LD_INT 4
70420: PPUSH
70421: CALL_OW 272
70425: PUSH
70426: LD_VAR 0 8
70430: PPUSH
70431: LD_INT 5
70433: PPUSH
70434: LD_INT 4
70436: PPUSH
70437: CALL_OW 273
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: ST_TO_ADDR
// for i = tmp downto 1 do
70454: LD_ADDR_VAR 0 4
70458: PUSH
70459: DOUBLE
70460: LD_VAR 0 6
70464: INC
70465: ST_TO_ADDR
70466: LD_INT 1
70468: PUSH
70469: FOR_DOWNTO
70470: IFFALSE 70571
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70472: LD_VAR 0 6
70476: PUSH
70477: LD_VAR 0 4
70481: ARRAY
70482: PUSH
70483: LD_INT 1
70485: ARRAY
70486: PPUSH
70487: LD_VAR 0 6
70491: PUSH
70492: LD_VAR 0 4
70496: ARRAY
70497: PUSH
70498: LD_INT 2
70500: ARRAY
70501: PPUSH
70502: CALL_OW 488
70506: NOT
70507: PUSH
70508: LD_VAR 0 6
70512: PUSH
70513: LD_VAR 0 4
70517: ARRAY
70518: PUSH
70519: LD_INT 1
70521: ARRAY
70522: PPUSH
70523: LD_VAR 0 6
70527: PUSH
70528: LD_VAR 0 4
70532: ARRAY
70533: PUSH
70534: LD_INT 2
70536: ARRAY
70537: PPUSH
70538: CALL_OW 428
70542: PUSH
70543: LD_INT 0
70545: NONEQUAL
70546: OR
70547: IFFALSE 70569
// tmp := Delete ( tmp , i ) ;
70549: LD_ADDR_VAR 0 6
70553: PUSH
70554: LD_VAR 0 6
70558: PPUSH
70559: LD_VAR 0 4
70563: PPUSH
70564: CALL_OW 3
70568: ST_TO_ADDR
70569: GO 70469
70571: POP
70572: POP
// j := GetClosestHex ( unit , tmp ) ;
70573: LD_ADDR_VAR 0 5
70577: PUSH
70578: LD_VAR 0 1
70582: PPUSH
70583: LD_VAR 0 6
70587: PPUSH
70588: CALL 69890 0 2
70592: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70593: LD_VAR 0 1
70597: PPUSH
70598: LD_VAR 0 5
70602: PUSH
70603: LD_INT 1
70605: ARRAY
70606: PPUSH
70607: LD_VAR 0 5
70611: PUSH
70612: LD_INT 2
70614: ARRAY
70615: PPUSH
70616: CALL_OW 111
// end ;
70620: LD_VAR 0 3
70624: RET
// export function PrepareApemanSoldier ( ) ; begin
70625: LD_INT 0
70627: PPUSH
// uc_nation := 0 ;
70628: LD_ADDR_OWVAR 21
70632: PUSH
70633: LD_INT 0
70635: ST_TO_ADDR
// hc_sex := sex_male ;
70636: LD_ADDR_OWVAR 27
70640: PUSH
70641: LD_INT 1
70643: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70644: LD_ADDR_OWVAR 28
70648: PUSH
70649: LD_INT 15
70651: ST_TO_ADDR
// hc_gallery :=  ;
70652: LD_ADDR_OWVAR 33
70656: PUSH
70657: LD_STRING 
70659: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70660: LD_ADDR_OWVAR 31
70664: PUSH
70665: LD_INT 0
70667: PPUSH
70668: LD_INT 3
70670: PPUSH
70671: CALL_OW 12
70675: PUSH
70676: LD_INT 0
70678: PPUSH
70679: LD_INT 3
70681: PPUSH
70682: CALL_OW 12
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: ST_TO_ADDR
// end ;
70699: LD_VAR 0 1
70703: RET
// export function PrepareApemanEngineer ( ) ; begin
70704: LD_INT 0
70706: PPUSH
// uc_nation := 0 ;
70707: LD_ADDR_OWVAR 21
70711: PUSH
70712: LD_INT 0
70714: ST_TO_ADDR
// hc_sex := sex_male ;
70715: LD_ADDR_OWVAR 27
70719: PUSH
70720: LD_INT 1
70722: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70723: LD_ADDR_OWVAR 28
70727: PUSH
70728: LD_INT 16
70730: ST_TO_ADDR
// hc_gallery :=  ;
70731: LD_ADDR_OWVAR 33
70735: PUSH
70736: LD_STRING 
70738: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70739: LD_ADDR_OWVAR 31
70743: PUSH
70744: LD_INT 0
70746: PPUSH
70747: LD_INT 3
70749: PPUSH
70750: CALL_OW 12
70754: PUSH
70755: LD_INT 0
70757: PPUSH
70758: LD_INT 3
70760: PPUSH
70761: CALL_OW 12
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: LD_INT 0
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: ST_TO_ADDR
// end ;
70778: LD_VAR 0 1
70782: RET
// export function PrepareApeman ( agressivity ) ; begin
70783: LD_INT 0
70785: PPUSH
// uc_side := 0 ;
70786: LD_ADDR_OWVAR 20
70790: PUSH
70791: LD_INT 0
70793: ST_TO_ADDR
// uc_nation := 0 ;
70794: LD_ADDR_OWVAR 21
70798: PUSH
70799: LD_INT 0
70801: ST_TO_ADDR
// hc_sex := sex_male ;
70802: LD_ADDR_OWVAR 27
70806: PUSH
70807: LD_INT 1
70809: ST_TO_ADDR
// hc_class := class_apeman ;
70810: LD_ADDR_OWVAR 28
70814: PUSH
70815: LD_INT 12
70817: ST_TO_ADDR
// hc_gallery :=  ;
70818: LD_ADDR_OWVAR 33
70822: PUSH
70823: LD_STRING 
70825: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70826: LD_ADDR_OWVAR 35
70830: PUSH
70831: LD_VAR 0 1
70835: NEG
70836: PPUSH
70837: LD_VAR 0 1
70841: PPUSH
70842: CALL_OW 12
70846: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70847: LD_ADDR_OWVAR 31
70851: PUSH
70852: LD_INT 0
70854: PPUSH
70855: LD_INT 3
70857: PPUSH
70858: CALL_OW 12
70862: PUSH
70863: LD_INT 0
70865: PPUSH
70866: LD_INT 3
70868: PPUSH
70869: CALL_OW 12
70873: PUSH
70874: LD_INT 0
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: ST_TO_ADDR
// end ;
70886: LD_VAR 0 2
70890: RET
// export function PrepareTiger ( agressivity ) ; begin
70891: LD_INT 0
70893: PPUSH
// uc_side := 0 ;
70894: LD_ADDR_OWVAR 20
70898: PUSH
70899: LD_INT 0
70901: ST_TO_ADDR
// uc_nation := 0 ;
70902: LD_ADDR_OWVAR 21
70906: PUSH
70907: LD_INT 0
70909: ST_TO_ADDR
// hc_class := class_tiger ;
70910: LD_ADDR_OWVAR 28
70914: PUSH
70915: LD_INT 14
70917: ST_TO_ADDR
// hc_gallery :=  ;
70918: LD_ADDR_OWVAR 33
70922: PUSH
70923: LD_STRING 
70925: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70926: LD_ADDR_OWVAR 35
70930: PUSH
70931: LD_VAR 0 1
70935: NEG
70936: PPUSH
70937: LD_VAR 0 1
70941: PPUSH
70942: CALL_OW 12
70946: ST_TO_ADDR
// end ;
70947: LD_VAR 0 2
70951: RET
// export function PrepareEnchidna ( ) ; begin
70952: LD_INT 0
70954: PPUSH
// uc_side := 0 ;
70955: LD_ADDR_OWVAR 20
70959: PUSH
70960: LD_INT 0
70962: ST_TO_ADDR
// uc_nation := 0 ;
70963: LD_ADDR_OWVAR 21
70967: PUSH
70968: LD_INT 0
70970: ST_TO_ADDR
// hc_class := class_baggie ;
70971: LD_ADDR_OWVAR 28
70975: PUSH
70976: LD_INT 13
70978: ST_TO_ADDR
// hc_gallery :=  ;
70979: LD_ADDR_OWVAR 33
70983: PUSH
70984: LD_STRING 
70986: ST_TO_ADDR
// end ;
70987: LD_VAR 0 1
70991: RET
// export function PrepareFrog ( ) ; begin
70992: LD_INT 0
70994: PPUSH
// uc_side := 0 ;
70995: LD_ADDR_OWVAR 20
70999: PUSH
71000: LD_INT 0
71002: ST_TO_ADDR
// uc_nation := 0 ;
71003: LD_ADDR_OWVAR 21
71007: PUSH
71008: LD_INT 0
71010: ST_TO_ADDR
// hc_class := class_frog ;
71011: LD_ADDR_OWVAR 28
71015: PUSH
71016: LD_INT 19
71018: ST_TO_ADDR
// hc_gallery :=  ;
71019: LD_ADDR_OWVAR 33
71023: PUSH
71024: LD_STRING 
71026: ST_TO_ADDR
// end ;
71027: LD_VAR 0 1
71031: RET
// export function PrepareFish ( ) ; begin
71032: LD_INT 0
71034: PPUSH
// uc_side := 0 ;
71035: LD_ADDR_OWVAR 20
71039: PUSH
71040: LD_INT 0
71042: ST_TO_ADDR
// uc_nation := 0 ;
71043: LD_ADDR_OWVAR 21
71047: PUSH
71048: LD_INT 0
71050: ST_TO_ADDR
// hc_class := class_fish ;
71051: LD_ADDR_OWVAR 28
71055: PUSH
71056: LD_INT 20
71058: ST_TO_ADDR
// hc_gallery :=  ;
71059: LD_ADDR_OWVAR 33
71063: PUSH
71064: LD_STRING 
71066: ST_TO_ADDR
// end ;
71067: LD_VAR 0 1
71071: RET
// export function PrepareBird ( ) ; begin
71072: LD_INT 0
71074: PPUSH
// uc_side := 0 ;
71075: LD_ADDR_OWVAR 20
71079: PUSH
71080: LD_INT 0
71082: ST_TO_ADDR
// uc_nation := 0 ;
71083: LD_ADDR_OWVAR 21
71087: PUSH
71088: LD_INT 0
71090: ST_TO_ADDR
// hc_class := class_phororhacos ;
71091: LD_ADDR_OWVAR 28
71095: PUSH
71096: LD_INT 18
71098: ST_TO_ADDR
// hc_gallery :=  ;
71099: LD_ADDR_OWVAR 33
71103: PUSH
71104: LD_STRING 
71106: ST_TO_ADDR
// end ;
71107: LD_VAR 0 1
71111: RET
// export function PrepareHorse ( ) ; begin
71112: LD_INT 0
71114: PPUSH
// uc_side := 0 ;
71115: LD_ADDR_OWVAR 20
71119: PUSH
71120: LD_INT 0
71122: ST_TO_ADDR
// uc_nation := 0 ;
71123: LD_ADDR_OWVAR 21
71127: PUSH
71128: LD_INT 0
71130: ST_TO_ADDR
// hc_class := class_horse ;
71131: LD_ADDR_OWVAR 28
71135: PUSH
71136: LD_INT 21
71138: ST_TO_ADDR
// hc_gallery :=  ;
71139: LD_ADDR_OWVAR 33
71143: PUSH
71144: LD_STRING 
71146: ST_TO_ADDR
// end ;
71147: LD_VAR 0 1
71151: RET
// export function PrepareMastodont ( ) ; begin
71152: LD_INT 0
71154: PPUSH
// uc_side := 0 ;
71155: LD_ADDR_OWVAR 20
71159: PUSH
71160: LD_INT 0
71162: ST_TO_ADDR
// uc_nation := 0 ;
71163: LD_ADDR_OWVAR 21
71167: PUSH
71168: LD_INT 0
71170: ST_TO_ADDR
// vc_chassis := class_mastodont ;
71171: LD_ADDR_OWVAR 37
71175: PUSH
71176: LD_INT 31
71178: ST_TO_ADDR
// vc_control := control_rider ;
71179: LD_ADDR_OWVAR 38
71183: PUSH
71184: LD_INT 4
71186: ST_TO_ADDR
// end ;
71187: LD_VAR 0 1
71191: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71192: LD_INT 0
71194: PPUSH
71195: PPUSH
71196: PPUSH
// uc_side = 0 ;
71197: LD_ADDR_OWVAR 20
71201: PUSH
71202: LD_INT 0
71204: ST_TO_ADDR
// uc_nation = 0 ;
71205: LD_ADDR_OWVAR 21
71209: PUSH
71210: LD_INT 0
71212: ST_TO_ADDR
// InitHc_All ( ) ;
71213: CALL_OW 584
// InitVc ;
71217: CALL_OW 20
// if mastodonts then
71221: LD_VAR 0 6
71225: IFFALSE 71292
// for i = 1 to mastodonts do
71227: LD_ADDR_VAR 0 11
71231: PUSH
71232: DOUBLE
71233: LD_INT 1
71235: DEC
71236: ST_TO_ADDR
71237: LD_VAR 0 6
71241: PUSH
71242: FOR_TO
71243: IFFALSE 71290
// begin vc_chassis := 31 ;
71245: LD_ADDR_OWVAR 37
71249: PUSH
71250: LD_INT 31
71252: ST_TO_ADDR
// vc_control := control_rider ;
71253: LD_ADDR_OWVAR 38
71257: PUSH
71258: LD_INT 4
71260: ST_TO_ADDR
// animal := CreateVehicle ;
71261: LD_ADDR_VAR 0 12
71265: PUSH
71266: CALL_OW 45
71270: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71271: LD_VAR 0 12
71275: PPUSH
71276: LD_VAR 0 8
71280: PPUSH
71281: LD_INT 0
71283: PPUSH
71284: CALL 73427 0 3
// end ;
71288: GO 71242
71290: POP
71291: POP
// if horses then
71292: LD_VAR 0 5
71296: IFFALSE 71363
// for i = 1 to horses do
71298: LD_ADDR_VAR 0 11
71302: PUSH
71303: DOUBLE
71304: LD_INT 1
71306: DEC
71307: ST_TO_ADDR
71308: LD_VAR 0 5
71312: PUSH
71313: FOR_TO
71314: IFFALSE 71361
// begin hc_class := 21 ;
71316: LD_ADDR_OWVAR 28
71320: PUSH
71321: LD_INT 21
71323: ST_TO_ADDR
// hc_gallery :=  ;
71324: LD_ADDR_OWVAR 33
71328: PUSH
71329: LD_STRING 
71331: ST_TO_ADDR
// animal := CreateHuman ;
71332: LD_ADDR_VAR 0 12
71336: PUSH
71337: CALL_OW 44
71341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71342: LD_VAR 0 12
71346: PPUSH
71347: LD_VAR 0 8
71351: PPUSH
71352: LD_INT 0
71354: PPUSH
71355: CALL 73427 0 3
// end ;
71359: GO 71313
71361: POP
71362: POP
// if birds then
71363: LD_VAR 0 1
71367: IFFALSE 71434
// for i = 1 to birds do
71369: LD_ADDR_VAR 0 11
71373: PUSH
71374: DOUBLE
71375: LD_INT 1
71377: DEC
71378: ST_TO_ADDR
71379: LD_VAR 0 1
71383: PUSH
71384: FOR_TO
71385: IFFALSE 71432
// begin hc_class = 18 ;
71387: LD_ADDR_OWVAR 28
71391: PUSH
71392: LD_INT 18
71394: ST_TO_ADDR
// hc_gallery =  ;
71395: LD_ADDR_OWVAR 33
71399: PUSH
71400: LD_STRING 
71402: ST_TO_ADDR
// animal := CreateHuman ;
71403: LD_ADDR_VAR 0 12
71407: PUSH
71408: CALL_OW 44
71412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71413: LD_VAR 0 12
71417: PPUSH
71418: LD_VAR 0 8
71422: PPUSH
71423: LD_INT 0
71425: PPUSH
71426: CALL 73427 0 3
// end ;
71430: GO 71384
71432: POP
71433: POP
// if tigers then
71434: LD_VAR 0 2
71438: IFFALSE 71522
// for i = 1 to tigers do
71440: LD_ADDR_VAR 0 11
71444: PUSH
71445: DOUBLE
71446: LD_INT 1
71448: DEC
71449: ST_TO_ADDR
71450: LD_VAR 0 2
71454: PUSH
71455: FOR_TO
71456: IFFALSE 71520
// begin hc_class = class_tiger ;
71458: LD_ADDR_OWVAR 28
71462: PUSH
71463: LD_INT 14
71465: ST_TO_ADDR
// hc_gallery =  ;
71466: LD_ADDR_OWVAR 33
71470: PUSH
71471: LD_STRING 
71473: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71474: LD_ADDR_OWVAR 35
71478: PUSH
71479: LD_INT 7
71481: NEG
71482: PPUSH
71483: LD_INT 7
71485: PPUSH
71486: CALL_OW 12
71490: ST_TO_ADDR
// animal := CreateHuman ;
71491: LD_ADDR_VAR 0 12
71495: PUSH
71496: CALL_OW 44
71500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71501: LD_VAR 0 12
71505: PPUSH
71506: LD_VAR 0 8
71510: PPUSH
71511: LD_INT 0
71513: PPUSH
71514: CALL 73427 0 3
// end ;
71518: GO 71455
71520: POP
71521: POP
// if apemans then
71522: LD_VAR 0 3
71526: IFFALSE 71649
// for i = 1 to apemans do
71528: LD_ADDR_VAR 0 11
71532: PUSH
71533: DOUBLE
71534: LD_INT 1
71536: DEC
71537: ST_TO_ADDR
71538: LD_VAR 0 3
71542: PUSH
71543: FOR_TO
71544: IFFALSE 71647
// begin hc_class = class_apeman ;
71546: LD_ADDR_OWVAR 28
71550: PUSH
71551: LD_INT 12
71553: ST_TO_ADDR
// hc_gallery =  ;
71554: LD_ADDR_OWVAR 33
71558: PUSH
71559: LD_STRING 
71561: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71562: LD_ADDR_OWVAR 35
71566: PUSH
71567: LD_INT 2
71569: NEG
71570: PPUSH
71571: LD_INT 2
71573: PPUSH
71574: CALL_OW 12
71578: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71579: LD_ADDR_OWVAR 31
71583: PUSH
71584: LD_INT 1
71586: PPUSH
71587: LD_INT 3
71589: PPUSH
71590: CALL_OW 12
71594: PUSH
71595: LD_INT 1
71597: PPUSH
71598: LD_INT 3
71600: PPUSH
71601: CALL_OW 12
71605: PUSH
71606: LD_INT 0
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: ST_TO_ADDR
// animal := CreateHuman ;
71618: LD_ADDR_VAR 0 12
71622: PUSH
71623: CALL_OW 44
71627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71628: LD_VAR 0 12
71632: PPUSH
71633: LD_VAR 0 8
71637: PPUSH
71638: LD_INT 0
71640: PPUSH
71641: CALL 73427 0 3
// end ;
71645: GO 71543
71647: POP
71648: POP
// if enchidnas then
71649: LD_VAR 0 4
71653: IFFALSE 71720
// for i = 1 to enchidnas do
71655: LD_ADDR_VAR 0 11
71659: PUSH
71660: DOUBLE
71661: LD_INT 1
71663: DEC
71664: ST_TO_ADDR
71665: LD_VAR 0 4
71669: PUSH
71670: FOR_TO
71671: IFFALSE 71718
// begin hc_class = 13 ;
71673: LD_ADDR_OWVAR 28
71677: PUSH
71678: LD_INT 13
71680: ST_TO_ADDR
// hc_gallery =  ;
71681: LD_ADDR_OWVAR 33
71685: PUSH
71686: LD_STRING 
71688: ST_TO_ADDR
// animal := CreateHuman ;
71689: LD_ADDR_VAR 0 12
71693: PUSH
71694: CALL_OW 44
71698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71699: LD_VAR 0 12
71703: PPUSH
71704: LD_VAR 0 8
71708: PPUSH
71709: LD_INT 0
71711: PPUSH
71712: CALL 73427 0 3
// end ;
71716: GO 71670
71718: POP
71719: POP
// if fishes then
71720: LD_VAR 0 7
71724: IFFALSE 71791
// for i = 1 to fishes do
71726: LD_ADDR_VAR 0 11
71730: PUSH
71731: DOUBLE
71732: LD_INT 1
71734: DEC
71735: ST_TO_ADDR
71736: LD_VAR 0 7
71740: PUSH
71741: FOR_TO
71742: IFFALSE 71789
// begin hc_class = 20 ;
71744: LD_ADDR_OWVAR 28
71748: PUSH
71749: LD_INT 20
71751: ST_TO_ADDR
// hc_gallery =  ;
71752: LD_ADDR_OWVAR 33
71756: PUSH
71757: LD_STRING 
71759: ST_TO_ADDR
// animal := CreateHuman ;
71760: LD_ADDR_VAR 0 12
71764: PUSH
71765: CALL_OW 44
71769: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71770: LD_VAR 0 12
71774: PPUSH
71775: LD_VAR 0 9
71779: PPUSH
71780: LD_INT 0
71782: PPUSH
71783: CALL 73427 0 3
// end ;
71787: GO 71741
71789: POP
71790: POP
// end ;
71791: LD_VAR 0 10
71795: RET
// export function WantHeal ( sci , unit ) ; begin
71796: LD_INT 0
71798: PPUSH
// if GetTaskList ( sci ) > 0 then
71799: LD_VAR 0 1
71803: PPUSH
71804: CALL_OW 437
71808: PUSH
71809: LD_INT 0
71811: GREATER
71812: IFFALSE 71882
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71814: LD_VAR 0 1
71818: PPUSH
71819: CALL_OW 437
71823: PUSH
71824: LD_INT 1
71826: ARRAY
71827: PUSH
71828: LD_INT 1
71830: ARRAY
71831: PUSH
71832: LD_STRING l
71834: EQUAL
71835: PUSH
71836: LD_VAR 0 1
71840: PPUSH
71841: CALL_OW 437
71845: PUSH
71846: LD_INT 1
71848: ARRAY
71849: PUSH
71850: LD_INT 4
71852: ARRAY
71853: PUSH
71854: LD_VAR 0 2
71858: EQUAL
71859: AND
71860: IFFALSE 71872
// result := true else
71862: LD_ADDR_VAR 0 3
71866: PUSH
71867: LD_INT 1
71869: ST_TO_ADDR
71870: GO 71880
// result := false ;
71872: LD_ADDR_VAR 0 3
71876: PUSH
71877: LD_INT 0
71879: ST_TO_ADDR
// end else
71880: GO 71890
// result := false ;
71882: LD_ADDR_VAR 0 3
71886: PUSH
71887: LD_INT 0
71889: ST_TO_ADDR
// end ;
71890: LD_VAR 0 3
71894: RET
// export function HealTarget ( sci ) ; begin
71895: LD_INT 0
71897: PPUSH
// if not sci then
71898: LD_VAR 0 1
71902: NOT
71903: IFFALSE 71907
// exit ;
71905: GO 71972
// result := 0 ;
71907: LD_ADDR_VAR 0 2
71911: PUSH
71912: LD_INT 0
71914: ST_TO_ADDR
// if GetTaskList ( sci ) then
71915: LD_VAR 0 1
71919: PPUSH
71920: CALL_OW 437
71924: IFFALSE 71972
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71926: LD_VAR 0 1
71930: PPUSH
71931: CALL_OW 437
71935: PUSH
71936: LD_INT 1
71938: ARRAY
71939: PUSH
71940: LD_INT 1
71942: ARRAY
71943: PUSH
71944: LD_STRING l
71946: EQUAL
71947: IFFALSE 71972
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71949: LD_ADDR_VAR 0 2
71953: PUSH
71954: LD_VAR 0 1
71958: PPUSH
71959: CALL_OW 437
71963: PUSH
71964: LD_INT 1
71966: ARRAY
71967: PUSH
71968: LD_INT 4
71970: ARRAY
71971: ST_TO_ADDR
// end ;
71972: LD_VAR 0 2
71976: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71977: LD_INT 0
71979: PPUSH
71980: PPUSH
71981: PPUSH
71982: PPUSH
// if not base_units then
71983: LD_VAR 0 1
71987: NOT
71988: IFFALSE 71992
// exit ;
71990: GO 72079
// result := false ;
71992: LD_ADDR_VAR 0 2
71996: PUSH
71997: LD_INT 0
71999: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72000: LD_ADDR_VAR 0 5
72004: PUSH
72005: LD_VAR 0 1
72009: PPUSH
72010: LD_INT 21
72012: PUSH
72013: LD_INT 3
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PPUSH
72020: CALL_OW 72
72024: ST_TO_ADDR
// if not tmp then
72025: LD_VAR 0 5
72029: NOT
72030: IFFALSE 72034
// exit ;
72032: GO 72079
// for i in tmp do
72034: LD_ADDR_VAR 0 3
72038: PUSH
72039: LD_VAR 0 5
72043: PUSH
72044: FOR_IN
72045: IFFALSE 72077
// begin result := EnemyInRange ( i , 22 ) ;
72047: LD_ADDR_VAR 0 2
72051: PUSH
72052: LD_VAR 0 3
72056: PPUSH
72057: LD_INT 22
72059: PPUSH
72060: CALL 69765 0 2
72064: ST_TO_ADDR
// if result then
72065: LD_VAR 0 2
72069: IFFALSE 72075
// exit ;
72071: POP
72072: POP
72073: GO 72079
// end ;
72075: GO 72044
72077: POP
72078: POP
// end ;
72079: LD_VAR 0 2
72083: RET
// export function FilterByTag ( units , tag ) ; begin
72084: LD_INT 0
72086: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72087: LD_ADDR_VAR 0 3
72091: PUSH
72092: LD_VAR 0 1
72096: PPUSH
72097: LD_INT 120
72099: PUSH
72100: LD_VAR 0 2
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PPUSH
72109: CALL_OW 72
72113: ST_TO_ADDR
// end ;
72114: LD_VAR 0 3
72118: RET
// export function IsDriver ( un ) ; begin
72119: LD_INT 0
72121: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72122: LD_ADDR_VAR 0 2
72126: PUSH
72127: LD_VAR 0 1
72131: PUSH
72132: LD_INT 55
72134: PUSH
72135: EMPTY
72136: LIST
72137: PPUSH
72138: CALL_OW 69
72142: IN
72143: ST_TO_ADDR
// end ;
72144: LD_VAR 0 2
72148: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72149: LD_INT 0
72151: PPUSH
72152: PPUSH
// list := [ ] ;
72153: LD_ADDR_VAR 0 5
72157: PUSH
72158: EMPTY
72159: ST_TO_ADDR
// case d of 0 :
72160: LD_VAR 0 3
72164: PUSH
72165: LD_INT 0
72167: DOUBLE
72168: EQUAL
72169: IFTRUE 72173
72171: GO 72306
72173: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72174: LD_ADDR_VAR 0 5
72178: PUSH
72179: LD_VAR 0 1
72183: PUSH
72184: LD_INT 4
72186: MINUS
72187: PUSH
72188: LD_VAR 0 2
72192: PUSH
72193: LD_INT 4
72195: MINUS
72196: PUSH
72197: LD_INT 2
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: LIST
72204: PUSH
72205: LD_VAR 0 1
72209: PUSH
72210: LD_INT 3
72212: MINUS
72213: PUSH
72214: LD_VAR 0 2
72218: PUSH
72219: LD_INT 1
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: LIST
72226: PUSH
72227: LD_VAR 0 1
72231: PUSH
72232: LD_INT 4
72234: PLUS
72235: PUSH
72236: LD_VAR 0 2
72240: PUSH
72241: LD_INT 4
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: PUSH
72249: LD_VAR 0 1
72253: PUSH
72254: LD_INT 3
72256: PLUS
72257: PUSH
72258: LD_VAR 0 2
72262: PUSH
72263: LD_INT 3
72265: PLUS
72266: PUSH
72267: LD_INT 5
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: PUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_VAR 0 2
72284: PUSH
72285: LD_INT 4
72287: PLUS
72288: PUSH
72289: LD_INT 0
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: LIST
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: ST_TO_ADDR
// end ; 1 :
72304: GO 73004
72306: LD_INT 1
72308: DOUBLE
72309: EQUAL
72310: IFTRUE 72314
72312: GO 72447
72314: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72315: LD_ADDR_VAR 0 5
72319: PUSH
72320: LD_VAR 0 1
72324: PUSH
72325: LD_VAR 0 2
72329: PUSH
72330: LD_INT 4
72332: MINUS
72333: PUSH
72334: LD_INT 3
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: LIST
72341: PUSH
72342: LD_VAR 0 1
72346: PUSH
72347: LD_INT 3
72349: MINUS
72350: PUSH
72351: LD_VAR 0 2
72355: PUSH
72356: LD_INT 3
72358: MINUS
72359: PUSH
72360: LD_INT 2
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: LIST
72367: PUSH
72368: LD_VAR 0 1
72372: PUSH
72373: LD_INT 4
72375: MINUS
72376: PUSH
72377: LD_VAR 0 2
72381: PUSH
72382: LD_INT 1
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: PUSH
72390: LD_VAR 0 1
72394: PUSH
72395: LD_VAR 0 2
72399: PUSH
72400: LD_INT 3
72402: PLUS
72403: PUSH
72404: LD_INT 0
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: LIST
72411: PUSH
72412: LD_VAR 0 1
72416: PUSH
72417: LD_INT 4
72419: PLUS
72420: PUSH
72421: LD_VAR 0 2
72425: PUSH
72426: LD_INT 4
72428: PLUS
72429: PUSH
72430: LD_INT 5
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: LIST
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: ST_TO_ADDR
// end ; 2 :
72445: GO 73004
72447: LD_INT 2
72449: DOUBLE
72450: EQUAL
72451: IFTRUE 72455
72453: GO 72584
72455: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72456: LD_ADDR_VAR 0 5
72460: PUSH
72461: LD_VAR 0 1
72465: PUSH
72466: LD_VAR 0 2
72470: PUSH
72471: LD_INT 3
72473: MINUS
72474: PUSH
72475: LD_INT 3
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: PUSH
72483: LD_VAR 0 1
72487: PUSH
72488: LD_INT 4
72490: PLUS
72491: PUSH
72492: LD_VAR 0 2
72496: PUSH
72497: LD_INT 4
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: LIST
72504: PUSH
72505: LD_VAR 0 1
72509: PUSH
72510: LD_VAR 0 2
72514: PUSH
72515: LD_INT 4
72517: PLUS
72518: PUSH
72519: LD_INT 0
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: LIST
72526: PUSH
72527: LD_VAR 0 1
72531: PUSH
72532: LD_INT 3
72534: MINUS
72535: PUSH
72536: LD_VAR 0 2
72540: PUSH
72541: LD_INT 1
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: LIST
72548: PUSH
72549: LD_VAR 0 1
72553: PUSH
72554: LD_INT 4
72556: MINUS
72557: PUSH
72558: LD_VAR 0 2
72562: PUSH
72563: LD_INT 4
72565: MINUS
72566: PUSH
72567: LD_INT 2
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: ST_TO_ADDR
// end ; 3 :
72582: GO 73004
72584: LD_INT 3
72586: DOUBLE
72587: EQUAL
72588: IFTRUE 72592
72590: GO 72725
72592: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72593: LD_ADDR_VAR 0 5
72597: PUSH
72598: LD_VAR 0 1
72602: PUSH
72603: LD_INT 3
72605: PLUS
72606: PUSH
72607: LD_VAR 0 2
72611: PUSH
72612: LD_INT 4
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: LIST
72619: PUSH
72620: LD_VAR 0 1
72624: PUSH
72625: LD_INT 4
72627: PLUS
72628: PUSH
72629: LD_VAR 0 2
72633: PUSH
72634: LD_INT 4
72636: PLUS
72637: PUSH
72638: LD_INT 5
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: PUSH
72646: LD_VAR 0 1
72650: PUSH
72651: LD_INT 4
72653: MINUS
72654: PUSH
72655: LD_VAR 0 2
72659: PUSH
72660: LD_INT 1
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: PUSH
72668: LD_VAR 0 1
72672: PUSH
72673: LD_VAR 0 2
72677: PUSH
72678: LD_INT 4
72680: MINUS
72681: PUSH
72682: LD_INT 3
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: LIST
72689: PUSH
72690: LD_VAR 0 1
72694: PUSH
72695: LD_INT 3
72697: MINUS
72698: PUSH
72699: LD_VAR 0 2
72703: PUSH
72704: LD_INT 3
72706: MINUS
72707: PUSH
72708: LD_INT 2
72710: PUSH
72711: EMPTY
72712: LIST
72713: LIST
72714: LIST
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: ST_TO_ADDR
// end ; 4 :
72723: GO 73004
72725: LD_INT 4
72727: DOUBLE
72728: EQUAL
72729: IFTRUE 72733
72731: GO 72866
72733: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72734: LD_ADDR_VAR 0 5
72738: PUSH
72739: LD_VAR 0 1
72743: PUSH
72744: LD_VAR 0 2
72748: PUSH
72749: LD_INT 4
72751: PLUS
72752: PUSH
72753: LD_INT 0
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: LIST
72760: PUSH
72761: LD_VAR 0 1
72765: PUSH
72766: LD_INT 3
72768: PLUS
72769: PUSH
72770: LD_VAR 0 2
72774: PUSH
72775: LD_INT 3
72777: PLUS
72778: PUSH
72779: LD_INT 5
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: LIST
72786: PUSH
72787: LD_VAR 0 1
72791: PUSH
72792: LD_INT 4
72794: PLUS
72795: PUSH
72796: LD_VAR 0 2
72800: PUSH
72801: LD_INT 4
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: LIST
72808: PUSH
72809: LD_VAR 0 1
72813: PUSH
72814: LD_VAR 0 2
72818: PUSH
72819: LD_INT 3
72821: MINUS
72822: PUSH
72823: LD_INT 3
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: LIST
72830: PUSH
72831: LD_VAR 0 1
72835: PUSH
72836: LD_INT 4
72838: MINUS
72839: PUSH
72840: LD_VAR 0 2
72844: PUSH
72845: LD_INT 4
72847: MINUS
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: LIST
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: ST_TO_ADDR
// end ; 5 :
72864: GO 73004
72866: LD_INT 5
72868: DOUBLE
72869: EQUAL
72870: IFTRUE 72874
72872: GO 73003
72874: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72875: LD_ADDR_VAR 0 5
72879: PUSH
72880: LD_VAR 0 1
72884: PUSH
72885: LD_INT 4
72887: MINUS
72888: PUSH
72889: LD_VAR 0 2
72893: PUSH
72894: LD_INT 1
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: LIST
72901: PUSH
72902: LD_VAR 0 1
72906: PUSH
72907: LD_VAR 0 2
72911: PUSH
72912: LD_INT 4
72914: MINUS
72915: PUSH
72916: LD_INT 3
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: LIST
72923: PUSH
72924: LD_VAR 0 1
72928: PUSH
72929: LD_INT 4
72931: PLUS
72932: PUSH
72933: LD_VAR 0 2
72937: PUSH
72938: LD_INT 4
72940: PLUS
72941: PUSH
72942: LD_INT 5
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: LIST
72949: PUSH
72950: LD_VAR 0 1
72954: PUSH
72955: LD_INT 3
72957: PLUS
72958: PUSH
72959: LD_VAR 0 2
72963: PUSH
72964: LD_INT 4
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: LIST
72971: PUSH
72972: LD_VAR 0 1
72976: PUSH
72977: LD_VAR 0 2
72981: PUSH
72982: LD_INT 3
72984: PLUS
72985: PUSH
72986: LD_INT 0
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: LIST
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: ST_TO_ADDR
// end ; end ;
73001: GO 73004
73003: POP
// result := list ;
73004: LD_ADDR_VAR 0 4
73008: PUSH
73009: LD_VAR 0 5
73013: ST_TO_ADDR
// end ;
73014: LD_VAR 0 4
73018: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73019: LD_INT 0
73021: PPUSH
73022: PPUSH
73023: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73024: LD_VAR 0 1
73028: NOT
73029: PUSH
73030: LD_VAR 0 2
73034: PUSH
73035: LD_INT 1
73037: PUSH
73038: LD_INT 2
73040: PUSH
73041: LD_INT 3
73043: PUSH
73044: LD_INT 4
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: LIST
73051: LIST
73052: IN
73053: NOT
73054: OR
73055: IFFALSE 73059
// exit ;
73057: GO 73151
// tmp := [ ] ;
73059: LD_ADDR_VAR 0 5
73063: PUSH
73064: EMPTY
73065: ST_TO_ADDR
// for i in units do
73066: LD_ADDR_VAR 0 4
73070: PUSH
73071: LD_VAR 0 1
73075: PUSH
73076: FOR_IN
73077: IFFALSE 73120
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73079: LD_ADDR_VAR 0 5
73083: PUSH
73084: LD_VAR 0 5
73088: PPUSH
73089: LD_VAR 0 5
73093: PUSH
73094: LD_INT 1
73096: PLUS
73097: PPUSH
73098: LD_VAR 0 4
73102: PPUSH
73103: LD_VAR 0 2
73107: PPUSH
73108: CALL_OW 259
73112: PPUSH
73113: CALL_OW 2
73117: ST_TO_ADDR
73118: GO 73076
73120: POP
73121: POP
// if not tmp then
73122: LD_VAR 0 5
73126: NOT
73127: IFFALSE 73131
// exit ;
73129: GO 73151
// result := SortListByListDesc ( units , tmp ) ;
73131: LD_ADDR_VAR 0 3
73135: PUSH
73136: LD_VAR 0 1
73140: PPUSH
73141: LD_VAR 0 5
73145: PPUSH
73146: CALL_OW 77
73150: ST_TO_ADDR
// end ;
73151: LD_VAR 0 3
73155: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73156: LD_INT 0
73158: PPUSH
73159: PPUSH
73160: PPUSH
// result := false ;
73161: LD_ADDR_VAR 0 3
73165: PUSH
73166: LD_INT 0
73168: ST_TO_ADDR
// x := GetX ( building ) ;
73169: LD_ADDR_VAR 0 4
73173: PUSH
73174: LD_VAR 0 2
73178: PPUSH
73179: CALL_OW 250
73183: ST_TO_ADDR
// y := GetY ( building ) ;
73184: LD_ADDR_VAR 0 5
73188: PUSH
73189: LD_VAR 0 2
73193: PPUSH
73194: CALL_OW 251
73198: ST_TO_ADDR
// if not building or not x or not y then
73199: LD_VAR 0 2
73203: NOT
73204: PUSH
73205: LD_VAR 0 4
73209: NOT
73210: OR
73211: PUSH
73212: LD_VAR 0 5
73216: NOT
73217: OR
73218: IFFALSE 73222
// exit ;
73220: GO 73314
// if GetTaskList ( unit ) then
73222: LD_VAR 0 1
73226: PPUSH
73227: CALL_OW 437
73231: IFFALSE 73314
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73233: LD_STRING e
73235: PUSH
73236: LD_VAR 0 1
73240: PPUSH
73241: CALL_OW 437
73245: PUSH
73246: LD_INT 1
73248: ARRAY
73249: PUSH
73250: LD_INT 1
73252: ARRAY
73253: EQUAL
73254: PUSH
73255: LD_VAR 0 4
73259: PUSH
73260: LD_VAR 0 1
73264: PPUSH
73265: CALL_OW 437
73269: PUSH
73270: LD_INT 1
73272: ARRAY
73273: PUSH
73274: LD_INT 2
73276: ARRAY
73277: EQUAL
73278: AND
73279: PUSH
73280: LD_VAR 0 5
73284: PUSH
73285: LD_VAR 0 1
73289: PPUSH
73290: CALL_OW 437
73294: PUSH
73295: LD_INT 1
73297: ARRAY
73298: PUSH
73299: LD_INT 3
73301: ARRAY
73302: EQUAL
73303: AND
73304: IFFALSE 73314
// result := true end ;
73306: LD_ADDR_VAR 0 3
73310: PUSH
73311: LD_INT 1
73313: ST_TO_ADDR
// end ;
73314: LD_VAR 0 3
73318: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73319: LD_INT 0
73321: PPUSH
// result := false ;
73322: LD_ADDR_VAR 0 4
73326: PUSH
73327: LD_INT 0
73329: ST_TO_ADDR
// if GetTaskList ( unit ) then
73330: LD_VAR 0 1
73334: PPUSH
73335: CALL_OW 437
73339: IFFALSE 73422
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73341: LD_STRING M
73343: PUSH
73344: LD_VAR 0 1
73348: PPUSH
73349: CALL_OW 437
73353: PUSH
73354: LD_INT 1
73356: ARRAY
73357: PUSH
73358: LD_INT 1
73360: ARRAY
73361: EQUAL
73362: PUSH
73363: LD_VAR 0 2
73367: PUSH
73368: LD_VAR 0 1
73372: PPUSH
73373: CALL_OW 437
73377: PUSH
73378: LD_INT 1
73380: ARRAY
73381: PUSH
73382: LD_INT 2
73384: ARRAY
73385: EQUAL
73386: AND
73387: PUSH
73388: LD_VAR 0 3
73392: PUSH
73393: LD_VAR 0 1
73397: PPUSH
73398: CALL_OW 437
73402: PUSH
73403: LD_INT 1
73405: ARRAY
73406: PUSH
73407: LD_INT 3
73409: ARRAY
73410: EQUAL
73411: AND
73412: IFFALSE 73422
// result := true ;
73414: LD_ADDR_VAR 0 4
73418: PUSH
73419: LD_INT 1
73421: ST_TO_ADDR
// end ; end ;
73422: LD_VAR 0 4
73426: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73427: LD_INT 0
73429: PPUSH
73430: PPUSH
73431: PPUSH
73432: PPUSH
// if not unit or not area then
73433: LD_VAR 0 1
73437: NOT
73438: PUSH
73439: LD_VAR 0 2
73443: NOT
73444: OR
73445: IFFALSE 73449
// exit ;
73447: GO 73613
// tmp := AreaToList ( area , i ) ;
73449: LD_ADDR_VAR 0 6
73453: PUSH
73454: LD_VAR 0 2
73458: PPUSH
73459: LD_VAR 0 5
73463: PPUSH
73464: CALL_OW 517
73468: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73469: LD_ADDR_VAR 0 5
73473: PUSH
73474: DOUBLE
73475: LD_INT 1
73477: DEC
73478: ST_TO_ADDR
73479: LD_VAR 0 6
73483: PUSH
73484: LD_INT 1
73486: ARRAY
73487: PUSH
73488: FOR_TO
73489: IFFALSE 73611
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73491: LD_ADDR_VAR 0 7
73495: PUSH
73496: LD_VAR 0 6
73500: PUSH
73501: LD_INT 1
73503: ARRAY
73504: PUSH
73505: LD_VAR 0 5
73509: ARRAY
73510: PUSH
73511: LD_VAR 0 6
73515: PUSH
73516: LD_INT 2
73518: ARRAY
73519: PUSH
73520: LD_VAR 0 5
73524: ARRAY
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73530: LD_VAR 0 7
73534: PUSH
73535: LD_INT 1
73537: ARRAY
73538: PPUSH
73539: LD_VAR 0 7
73543: PUSH
73544: LD_INT 2
73546: ARRAY
73547: PPUSH
73548: CALL_OW 428
73552: PUSH
73553: LD_INT 0
73555: EQUAL
73556: IFFALSE 73609
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73558: LD_VAR 0 1
73562: PPUSH
73563: LD_VAR 0 7
73567: PUSH
73568: LD_INT 1
73570: ARRAY
73571: PPUSH
73572: LD_VAR 0 7
73576: PUSH
73577: LD_INT 2
73579: ARRAY
73580: PPUSH
73581: LD_VAR 0 3
73585: PPUSH
73586: CALL_OW 48
// result := IsPlaced ( unit ) ;
73590: LD_ADDR_VAR 0 4
73594: PUSH
73595: LD_VAR 0 1
73599: PPUSH
73600: CALL_OW 305
73604: ST_TO_ADDR
// exit ;
73605: POP
73606: POP
73607: GO 73613
// end ; end ;
73609: GO 73488
73611: POP
73612: POP
// end ;
73613: LD_VAR 0 4
73617: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73618: LD_INT 0
73620: PPUSH
73621: PPUSH
73622: PPUSH
// if not side or side > 8 then
73623: LD_VAR 0 1
73627: NOT
73628: PUSH
73629: LD_VAR 0 1
73633: PUSH
73634: LD_INT 8
73636: GREATER
73637: OR
73638: IFFALSE 73642
// exit ;
73640: GO 73829
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73642: LD_ADDR_VAR 0 4
73646: PUSH
73647: LD_INT 22
73649: PUSH
73650: LD_VAR 0 1
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 21
73661: PUSH
73662: LD_INT 3
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: PPUSH
73673: CALL_OW 69
73677: ST_TO_ADDR
// if not tmp then
73678: LD_VAR 0 4
73682: NOT
73683: IFFALSE 73687
// exit ;
73685: GO 73829
// enable_addtolog := true ;
73687: LD_ADDR_OWVAR 81
73691: PUSH
73692: LD_INT 1
73694: ST_TO_ADDR
// AddToLog ( [ ) ;
73695: LD_STRING [
73697: PPUSH
73698: CALL_OW 561
// for i in tmp do
73702: LD_ADDR_VAR 0 3
73706: PUSH
73707: LD_VAR 0 4
73711: PUSH
73712: FOR_IN
73713: IFFALSE 73820
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73715: LD_STRING [
73717: PUSH
73718: LD_VAR 0 3
73722: PPUSH
73723: CALL_OW 266
73727: STR
73728: PUSH
73729: LD_STRING , 
73731: STR
73732: PUSH
73733: LD_VAR 0 3
73737: PPUSH
73738: CALL_OW 250
73742: STR
73743: PUSH
73744: LD_STRING , 
73746: STR
73747: PUSH
73748: LD_VAR 0 3
73752: PPUSH
73753: CALL_OW 251
73757: STR
73758: PUSH
73759: LD_STRING , 
73761: STR
73762: PUSH
73763: LD_VAR 0 3
73767: PPUSH
73768: CALL_OW 254
73772: STR
73773: PUSH
73774: LD_STRING , 
73776: STR
73777: PUSH
73778: LD_VAR 0 3
73782: PPUSH
73783: LD_INT 1
73785: PPUSH
73786: CALL_OW 268
73790: STR
73791: PUSH
73792: LD_STRING , 
73794: STR
73795: PUSH
73796: LD_VAR 0 3
73800: PPUSH
73801: LD_INT 2
73803: PPUSH
73804: CALL_OW 268
73808: STR
73809: PUSH
73810: LD_STRING ],
73812: STR
73813: PPUSH
73814: CALL_OW 561
// end ;
73818: GO 73712
73820: POP
73821: POP
// AddToLog ( ]; ) ;
73822: LD_STRING ];
73824: PPUSH
73825: CALL_OW 561
// end ;
73829: LD_VAR 0 2
73833: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73834: LD_INT 0
73836: PPUSH
73837: PPUSH
73838: PPUSH
73839: PPUSH
73840: PPUSH
// if not area or not rate or not max then
73841: LD_VAR 0 1
73845: NOT
73846: PUSH
73847: LD_VAR 0 2
73851: NOT
73852: OR
73853: PUSH
73854: LD_VAR 0 4
73858: NOT
73859: OR
73860: IFFALSE 73864
// exit ;
73862: GO 74053
// while 1 do
73864: LD_INT 1
73866: IFFALSE 74053
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73868: LD_ADDR_VAR 0 9
73872: PUSH
73873: LD_VAR 0 1
73877: PPUSH
73878: LD_INT 1
73880: PPUSH
73881: CALL_OW 287
73885: PUSH
73886: LD_INT 10
73888: MUL
73889: ST_TO_ADDR
// r := rate / 10 ;
73890: LD_ADDR_VAR 0 7
73894: PUSH
73895: LD_VAR 0 2
73899: PUSH
73900: LD_INT 10
73902: DIVREAL
73903: ST_TO_ADDR
// time := 1 1$00 ;
73904: LD_ADDR_VAR 0 8
73908: PUSH
73909: LD_INT 2100
73911: ST_TO_ADDR
// if amount < min then
73912: LD_VAR 0 9
73916: PUSH
73917: LD_VAR 0 3
73921: LESS
73922: IFFALSE 73940
// r := r * 2 else
73924: LD_ADDR_VAR 0 7
73928: PUSH
73929: LD_VAR 0 7
73933: PUSH
73934: LD_INT 2
73936: MUL
73937: ST_TO_ADDR
73938: GO 73966
// if amount > max then
73940: LD_VAR 0 9
73944: PUSH
73945: LD_VAR 0 4
73949: GREATER
73950: IFFALSE 73966
// r := r / 2 ;
73952: LD_ADDR_VAR 0 7
73956: PUSH
73957: LD_VAR 0 7
73961: PUSH
73962: LD_INT 2
73964: DIVREAL
73965: ST_TO_ADDR
// time := time / r ;
73966: LD_ADDR_VAR 0 8
73970: PUSH
73971: LD_VAR 0 8
73975: PUSH
73976: LD_VAR 0 7
73980: DIVREAL
73981: ST_TO_ADDR
// if time < 0 then
73982: LD_VAR 0 8
73986: PUSH
73987: LD_INT 0
73989: LESS
73990: IFFALSE 74007
// time := time * - 1 ;
73992: LD_ADDR_VAR 0 8
73996: PUSH
73997: LD_VAR 0 8
74001: PUSH
74002: LD_INT 1
74004: NEG
74005: MUL
74006: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74007: LD_VAR 0 8
74011: PUSH
74012: LD_INT 35
74014: PPUSH
74015: LD_INT 875
74017: PPUSH
74018: CALL_OW 12
74022: PLUS
74023: PPUSH
74024: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74028: LD_INT 1
74030: PPUSH
74031: LD_INT 5
74033: PPUSH
74034: CALL_OW 12
74038: PPUSH
74039: LD_VAR 0 1
74043: PPUSH
74044: LD_INT 1
74046: PPUSH
74047: CALL_OW 55
// end ;
74051: GO 73864
// end ;
74053: LD_VAR 0 5
74057: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74058: LD_INT 0
74060: PPUSH
74061: PPUSH
74062: PPUSH
74063: PPUSH
74064: PPUSH
74065: PPUSH
74066: PPUSH
74067: PPUSH
// if not turrets or not factories then
74068: LD_VAR 0 1
74072: NOT
74073: PUSH
74074: LD_VAR 0 2
74078: NOT
74079: OR
74080: IFFALSE 74084
// exit ;
74082: GO 74391
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74084: LD_ADDR_VAR 0 10
74088: PUSH
74089: LD_INT 5
74091: PUSH
74092: LD_INT 6
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: LD_INT 2
74101: PUSH
74102: LD_INT 4
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: LD_INT 3
74111: PUSH
74112: LD_INT 5
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 24
74126: PUSH
74127: LD_INT 25
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 23
74136: PUSH
74137: LD_INT 27
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 42
74150: PUSH
74151: LD_INT 43
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 44
74160: PUSH
74161: LD_INT 46
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 45
74170: PUSH
74171: LD_INT 47
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: LIST
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: LIST
74187: ST_TO_ADDR
// result := [ ] ;
74188: LD_ADDR_VAR 0 3
74192: PUSH
74193: EMPTY
74194: ST_TO_ADDR
// for i in turrets do
74195: LD_ADDR_VAR 0 4
74199: PUSH
74200: LD_VAR 0 1
74204: PUSH
74205: FOR_IN
74206: IFFALSE 74389
// begin nat := GetNation ( i ) ;
74208: LD_ADDR_VAR 0 7
74212: PUSH
74213: LD_VAR 0 4
74217: PPUSH
74218: CALL_OW 248
74222: ST_TO_ADDR
// weapon := 0 ;
74223: LD_ADDR_VAR 0 8
74227: PUSH
74228: LD_INT 0
74230: ST_TO_ADDR
// if not nat then
74231: LD_VAR 0 7
74235: NOT
74236: IFFALSE 74240
// continue ;
74238: GO 74205
// for j in list [ nat ] do
74240: LD_ADDR_VAR 0 5
74244: PUSH
74245: LD_VAR 0 10
74249: PUSH
74250: LD_VAR 0 7
74254: ARRAY
74255: PUSH
74256: FOR_IN
74257: IFFALSE 74298
// if GetBWeapon ( i ) = j [ 1 ] then
74259: LD_VAR 0 4
74263: PPUSH
74264: CALL_OW 269
74268: PUSH
74269: LD_VAR 0 5
74273: PUSH
74274: LD_INT 1
74276: ARRAY
74277: EQUAL
74278: IFFALSE 74296
// begin weapon := j [ 2 ] ;
74280: LD_ADDR_VAR 0 8
74284: PUSH
74285: LD_VAR 0 5
74289: PUSH
74290: LD_INT 2
74292: ARRAY
74293: ST_TO_ADDR
// break ;
74294: GO 74298
// end ;
74296: GO 74256
74298: POP
74299: POP
// if not weapon then
74300: LD_VAR 0 8
74304: NOT
74305: IFFALSE 74309
// continue ;
74307: GO 74205
// for k in factories do
74309: LD_ADDR_VAR 0 6
74313: PUSH
74314: LD_VAR 0 2
74318: PUSH
74319: FOR_IN
74320: IFFALSE 74385
// begin weapons := AvailableWeaponList ( k ) ;
74322: LD_ADDR_VAR 0 9
74326: PUSH
74327: LD_VAR 0 6
74331: PPUSH
74332: CALL_OW 478
74336: ST_TO_ADDR
// if not weapons then
74337: LD_VAR 0 9
74341: NOT
74342: IFFALSE 74346
// continue ;
74344: GO 74319
// if weapon in weapons then
74346: LD_VAR 0 8
74350: PUSH
74351: LD_VAR 0 9
74355: IN
74356: IFFALSE 74383
// begin result := [ i , weapon ] ;
74358: LD_ADDR_VAR 0 3
74362: PUSH
74363: LD_VAR 0 4
74367: PUSH
74368: LD_VAR 0 8
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: ST_TO_ADDR
// exit ;
74377: POP
74378: POP
74379: POP
74380: POP
74381: GO 74391
// end ; end ;
74383: GO 74319
74385: POP
74386: POP
// end ;
74387: GO 74205
74389: POP
74390: POP
// end ;
74391: LD_VAR 0 3
74395: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74396: LD_INT 0
74398: PPUSH
// if not side or side > 8 then
74399: LD_VAR 0 3
74403: NOT
74404: PUSH
74405: LD_VAR 0 3
74409: PUSH
74410: LD_INT 8
74412: GREATER
74413: OR
74414: IFFALSE 74418
// exit ;
74416: GO 74477
// if not range then
74418: LD_VAR 0 4
74422: NOT
74423: IFFALSE 74434
// range := - 12 ;
74425: LD_ADDR_VAR 0 4
74429: PUSH
74430: LD_INT 12
74432: NEG
74433: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74434: LD_VAR 0 1
74438: PPUSH
74439: LD_VAR 0 2
74443: PPUSH
74444: LD_VAR 0 3
74448: PPUSH
74449: LD_VAR 0 4
74453: PPUSH
74454: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74458: LD_VAR 0 1
74462: PPUSH
74463: LD_VAR 0 2
74467: PPUSH
74468: LD_VAR 0 3
74472: PPUSH
74473: CALL_OW 331
// end ;
74477: LD_VAR 0 5
74481: RET
// export function Video ( mode ) ; begin
74482: LD_INT 0
74484: PPUSH
// ingame_video = mode ;
74485: LD_ADDR_OWVAR 52
74489: PUSH
74490: LD_VAR 0 1
74494: ST_TO_ADDR
// interface_hidden = mode ;
74495: LD_ADDR_OWVAR 54
74499: PUSH
74500: LD_VAR 0 1
74504: ST_TO_ADDR
// end ;
74505: LD_VAR 0 2
74509: RET
// export function Join ( array , element ) ; begin
74510: LD_INT 0
74512: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74513: LD_ADDR_VAR 0 3
74517: PUSH
74518: LD_VAR 0 1
74522: PPUSH
74523: LD_VAR 0 1
74527: PUSH
74528: LD_INT 1
74530: PLUS
74531: PPUSH
74532: LD_VAR 0 2
74536: PPUSH
74537: CALL_OW 1
74541: ST_TO_ADDR
// end ;
74542: LD_VAR 0 3
74546: RET
// export function JoinUnion ( array , element ) ; begin
74547: LD_INT 0
74549: PPUSH
// result := array union element ;
74550: LD_ADDR_VAR 0 3
74554: PUSH
74555: LD_VAR 0 1
74559: PUSH
74560: LD_VAR 0 2
74564: UNION
74565: ST_TO_ADDR
// end ;
74566: LD_VAR 0 3
74570: RET
// export function GetBehemoths ( side ) ; begin
74571: LD_INT 0
74573: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74574: LD_ADDR_VAR 0 2
74578: PUSH
74579: LD_INT 22
74581: PUSH
74582: LD_VAR 0 1
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 31
74593: PUSH
74594: LD_INT 25
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PPUSH
74605: CALL_OW 69
74609: ST_TO_ADDR
// end ;
74610: LD_VAR 0 2
74614: RET
// export function Shuffle ( array ) ; var i , index ; begin
74615: LD_INT 0
74617: PPUSH
74618: PPUSH
74619: PPUSH
// result := [ ] ;
74620: LD_ADDR_VAR 0 2
74624: PUSH
74625: EMPTY
74626: ST_TO_ADDR
// if not array then
74627: LD_VAR 0 1
74631: NOT
74632: IFFALSE 74636
// exit ;
74634: GO 74735
// Randomize ;
74636: CALL_OW 10
// for i = array downto 1 do
74640: LD_ADDR_VAR 0 3
74644: PUSH
74645: DOUBLE
74646: LD_VAR 0 1
74650: INC
74651: ST_TO_ADDR
74652: LD_INT 1
74654: PUSH
74655: FOR_DOWNTO
74656: IFFALSE 74733
// begin index := rand ( 1 , array ) ;
74658: LD_ADDR_VAR 0 4
74662: PUSH
74663: LD_INT 1
74665: PPUSH
74666: LD_VAR 0 1
74670: PPUSH
74671: CALL_OW 12
74675: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74676: LD_ADDR_VAR 0 2
74680: PUSH
74681: LD_VAR 0 2
74685: PPUSH
74686: LD_VAR 0 2
74690: PUSH
74691: LD_INT 1
74693: PLUS
74694: PPUSH
74695: LD_VAR 0 1
74699: PUSH
74700: LD_VAR 0 4
74704: ARRAY
74705: PPUSH
74706: CALL_OW 2
74710: ST_TO_ADDR
// array := Delete ( array , index ) ;
74711: LD_ADDR_VAR 0 1
74715: PUSH
74716: LD_VAR 0 1
74720: PPUSH
74721: LD_VAR 0 4
74725: PPUSH
74726: CALL_OW 3
74730: ST_TO_ADDR
// end ;
74731: GO 74655
74733: POP
74734: POP
// end ;
74735: LD_VAR 0 2
74739: RET
// export function GetBaseMaterials ( base ) ; begin
74740: LD_INT 0
74742: PPUSH
// result := [ 0 , 0 , 0 ] ;
74743: LD_ADDR_VAR 0 2
74747: PUSH
74748: LD_INT 0
74750: PUSH
74751: LD_INT 0
74753: PUSH
74754: LD_INT 0
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: LIST
74761: ST_TO_ADDR
// if not base then
74762: LD_VAR 0 1
74766: NOT
74767: IFFALSE 74771
// exit ;
74769: GO 74820
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74771: LD_ADDR_VAR 0 2
74775: PUSH
74776: LD_VAR 0 1
74780: PPUSH
74781: LD_INT 1
74783: PPUSH
74784: CALL_OW 275
74788: PUSH
74789: LD_VAR 0 1
74793: PPUSH
74794: LD_INT 2
74796: PPUSH
74797: CALL_OW 275
74801: PUSH
74802: LD_VAR 0 1
74806: PPUSH
74807: LD_INT 3
74809: PPUSH
74810: CALL_OW 275
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: LIST
74819: ST_TO_ADDR
// end ;
74820: LD_VAR 0 2
74824: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74825: LD_INT 0
74827: PPUSH
74828: PPUSH
// result := array ;
74829: LD_ADDR_VAR 0 3
74833: PUSH
74834: LD_VAR 0 1
74838: ST_TO_ADDR
// if size >= result then
74839: LD_VAR 0 2
74843: PUSH
74844: LD_VAR 0 3
74848: GREATEREQUAL
74849: IFFALSE 74853
// exit ;
74851: GO 74903
// if size then
74853: LD_VAR 0 2
74857: IFFALSE 74903
// for i := array downto size do
74859: LD_ADDR_VAR 0 4
74863: PUSH
74864: DOUBLE
74865: LD_VAR 0 1
74869: INC
74870: ST_TO_ADDR
74871: LD_VAR 0 2
74875: PUSH
74876: FOR_DOWNTO
74877: IFFALSE 74901
// result := Delete ( result , result ) ;
74879: LD_ADDR_VAR 0 3
74883: PUSH
74884: LD_VAR 0 3
74888: PPUSH
74889: LD_VAR 0 3
74893: PPUSH
74894: CALL_OW 3
74898: ST_TO_ADDR
74899: GO 74876
74901: POP
74902: POP
// end ;
74903: LD_VAR 0 3
74907: RET
// export function ComExit ( unit ) ; var tmp ; begin
74908: LD_INT 0
74910: PPUSH
74911: PPUSH
// if not IsInUnit ( unit ) then
74912: LD_VAR 0 1
74916: PPUSH
74917: CALL_OW 310
74921: NOT
74922: IFFALSE 74926
// exit ;
74924: GO 74986
// tmp := IsInUnit ( unit ) ;
74926: LD_ADDR_VAR 0 3
74930: PUSH
74931: LD_VAR 0 1
74935: PPUSH
74936: CALL_OW 310
74940: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74941: LD_VAR 0 3
74945: PPUSH
74946: CALL_OW 247
74950: PUSH
74951: LD_INT 2
74953: EQUAL
74954: IFFALSE 74967
// ComExitVehicle ( unit ) else
74956: LD_VAR 0 1
74960: PPUSH
74961: CALL_OW 121
74965: GO 74976
// ComExitBuilding ( unit ) ;
74967: LD_VAR 0 1
74971: PPUSH
74972: CALL_OW 122
// result := tmp ;
74976: LD_ADDR_VAR 0 2
74980: PUSH
74981: LD_VAR 0 3
74985: ST_TO_ADDR
// end ;
74986: LD_VAR 0 2
74990: RET
// export function ComExitAll ( units ) ; var i ; begin
74991: LD_INT 0
74993: PPUSH
74994: PPUSH
// if not units then
74995: LD_VAR 0 1
74999: NOT
75000: IFFALSE 75004
// exit ;
75002: GO 75030
// for i in units do
75004: LD_ADDR_VAR 0 3
75008: PUSH
75009: LD_VAR 0 1
75013: PUSH
75014: FOR_IN
75015: IFFALSE 75028
// ComExit ( i ) ;
75017: LD_VAR 0 3
75021: PPUSH
75022: CALL 74908 0 1
75026: GO 75014
75028: POP
75029: POP
// end ;
75030: LD_VAR 0 2
75034: RET
// export function ResetHc ; begin
75035: LD_INT 0
75037: PPUSH
// InitHc ;
75038: CALL_OW 19
// hc_importance := 0 ;
75042: LD_ADDR_OWVAR 32
75046: PUSH
75047: LD_INT 0
75049: ST_TO_ADDR
// end ;
75050: LD_VAR 0 1
75054: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75055: LD_INT 0
75057: PPUSH
75058: PPUSH
75059: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75060: LD_ADDR_VAR 0 6
75064: PUSH
75065: LD_VAR 0 1
75069: PUSH
75070: LD_VAR 0 3
75074: PLUS
75075: PUSH
75076: LD_INT 2
75078: DIV
75079: ST_TO_ADDR
// if _x < 0 then
75080: LD_VAR 0 6
75084: PUSH
75085: LD_INT 0
75087: LESS
75088: IFFALSE 75105
// _x := _x * - 1 ;
75090: LD_ADDR_VAR 0 6
75094: PUSH
75095: LD_VAR 0 6
75099: PUSH
75100: LD_INT 1
75102: NEG
75103: MUL
75104: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75105: LD_ADDR_VAR 0 7
75109: PUSH
75110: LD_VAR 0 2
75114: PUSH
75115: LD_VAR 0 4
75119: PLUS
75120: PUSH
75121: LD_INT 2
75123: DIV
75124: ST_TO_ADDR
// if _y < 0 then
75125: LD_VAR 0 7
75129: PUSH
75130: LD_INT 0
75132: LESS
75133: IFFALSE 75150
// _y := _y * - 1 ;
75135: LD_ADDR_VAR 0 7
75139: PUSH
75140: LD_VAR 0 7
75144: PUSH
75145: LD_INT 1
75147: NEG
75148: MUL
75149: ST_TO_ADDR
// result := [ _x , _y ] ;
75150: LD_ADDR_VAR 0 5
75154: PUSH
75155: LD_VAR 0 6
75159: PUSH
75160: LD_VAR 0 7
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: ST_TO_ADDR
// end ;
75169: LD_VAR 0 5
75173: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75174: LD_INT 0
75176: PPUSH
75177: PPUSH
75178: PPUSH
75179: PPUSH
// task := GetTaskList ( unit ) ;
75180: LD_ADDR_VAR 0 7
75184: PUSH
75185: LD_VAR 0 1
75189: PPUSH
75190: CALL_OW 437
75194: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75195: LD_VAR 0 7
75199: NOT
75200: PUSH
75201: LD_VAR 0 1
75205: PPUSH
75206: LD_VAR 0 2
75210: PPUSH
75211: CALL_OW 308
75215: NOT
75216: AND
75217: IFFALSE 75221
// exit ;
75219: GO 75339
// if IsInArea ( unit , area ) then
75221: LD_VAR 0 1
75225: PPUSH
75226: LD_VAR 0 2
75230: PPUSH
75231: CALL_OW 308
75235: IFFALSE 75253
// begin ComMoveToArea ( unit , goAway ) ;
75237: LD_VAR 0 1
75241: PPUSH
75242: LD_VAR 0 3
75246: PPUSH
75247: CALL_OW 113
// exit ;
75251: GO 75339
// end ; if task [ 1 ] [ 1 ] <> M then
75253: LD_VAR 0 7
75257: PUSH
75258: LD_INT 1
75260: ARRAY
75261: PUSH
75262: LD_INT 1
75264: ARRAY
75265: PUSH
75266: LD_STRING M
75268: NONEQUAL
75269: IFFALSE 75273
// exit ;
75271: GO 75339
// x := task [ 1 ] [ 2 ] ;
75273: LD_ADDR_VAR 0 5
75277: PUSH
75278: LD_VAR 0 7
75282: PUSH
75283: LD_INT 1
75285: ARRAY
75286: PUSH
75287: LD_INT 2
75289: ARRAY
75290: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75291: LD_ADDR_VAR 0 6
75295: PUSH
75296: LD_VAR 0 7
75300: PUSH
75301: LD_INT 1
75303: ARRAY
75304: PUSH
75305: LD_INT 3
75307: ARRAY
75308: ST_TO_ADDR
// if InArea ( x , y , area ) then
75309: LD_VAR 0 5
75313: PPUSH
75314: LD_VAR 0 6
75318: PPUSH
75319: LD_VAR 0 2
75323: PPUSH
75324: CALL_OW 309
75328: IFFALSE 75339
// ComStop ( unit ) ;
75330: LD_VAR 0 1
75334: PPUSH
75335: CALL_OW 141
// end ;
75339: LD_VAR 0 4
75343: RET
// export function Abs ( value ) ; begin
75344: LD_INT 0
75346: PPUSH
// result := value ;
75347: LD_ADDR_VAR 0 2
75351: PUSH
75352: LD_VAR 0 1
75356: ST_TO_ADDR
// if value < 0 then
75357: LD_VAR 0 1
75361: PUSH
75362: LD_INT 0
75364: LESS
75365: IFFALSE 75382
// result := value * - 1 ;
75367: LD_ADDR_VAR 0 2
75371: PUSH
75372: LD_VAR 0 1
75376: PUSH
75377: LD_INT 1
75379: NEG
75380: MUL
75381: ST_TO_ADDR
// end ;
75382: LD_VAR 0 2
75386: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75387: LD_INT 0
75389: PPUSH
75390: PPUSH
75391: PPUSH
75392: PPUSH
75393: PPUSH
75394: PPUSH
75395: PPUSH
75396: PPUSH
// if not unit or not building then
75397: LD_VAR 0 1
75401: NOT
75402: PUSH
75403: LD_VAR 0 2
75407: NOT
75408: OR
75409: IFFALSE 75413
// exit ;
75411: GO 75639
// x := GetX ( building ) ;
75413: LD_ADDR_VAR 0 4
75417: PUSH
75418: LD_VAR 0 2
75422: PPUSH
75423: CALL_OW 250
75427: ST_TO_ADDR
// y := GetY ( building ) ;
75428: LD_ADDR_VAR 0 6
75432: PUSH
75433: LD_VAR 0 2
75437: PPUSH
75438: CALL_OW 251
75442: ST_TO_ADDR
// d := GetDir ( building ) ;
75443: LD_ADDR_VAR 0 8
75447: PUSH
75448: LD_VAR 0 2
75452: PPUSH
75453: CALL_OW 254
75457: ST_TO_ADDR
// r := 4 ;
75458: LD_ADDR_VAR 0 9
75462: PUSH
75463: LD_INT 4
75465: ST_TO_ADDR
// for i := 1 to 5 do
75466: LD_ADDR_VAR 0 10
75470: PUSH
75471: DOUBLE
75472: LD_INT 1
75474: DEC
75475: ST_TO_ADDR
75476: LD_INT 5
75478: PUSH
75479: FOR_TO
75480: IFFALSE 75637
// begin _x := ShiftX ( x , d , r + i ) ;
75482: LD_ADDR_VAR 0 5
75486: PUSH
75487: LD_VAR 0 4
75491: PPUSH
75492: LD_VAR 0 8
75496: PPUSH
75497: LD_VAR 0 9
75501: PUSH
75502: LD_VAR 0 10
75506: PLUS
75507: PPUSH
75508: CALL_OW 272
75512: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75513: LD_ADDR_VAR 0 7
75517: PUSH
75518: LD_VAR 0 6
75522: PPUSH
75523: LD_VAR 0 8
75527: PPUSH
75528: LD_VAR 0 9
75532: PUSH
75533: LD_VAR 0 10
75537: PLUS
75538: PPUSH
75539: CALL_OW 273
75543: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75544: LD_VAR 0 5
75548: PPUSH
75549: LD_VAR 0 7
75553: PPUSH
75554: CALL_OW 488
75558: PUSH
75559: LD_VAR 0 5
75563: PPUSH
75564: LD_VAR 0 7
75568: PPUSH
75569: CALL_OW 428
75573: PPUSH
75574: CALL_OW 247
75578: PUSH
75579: LD_INT 3
75581: PUSH
75582: LD_INT 2
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: IN
75589: NOT
75590: AND
75591: IFFALSE 75635
// begin ComMoveXY ( unit , _x , _y ) ;
75593: LD_VAR 0 1
75597: PPUSH
75598: LD_VAR 0 5
75602: PPUSH
75603: LD_VAR 0 7
75607: PPUSH
75608: CALL_OW 111
// result := [ _x , _y ] ;
75612: LD_ADDR_VAR 0 3
75616: PUSH
75617: LD_VAR 0 5
75621: PUSH
75622: LD_VAR 0 7
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: ST_TO_ADDR
// exit ;
75631: POP
75632: POP
75633: GO 75639
// end ; end ;
75635: GO 75479
75637: POP
75638: POP
// end ;
75639: LD_VAR 0 3
75643: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75644: LD_INT 0
75646: PPUSH
75647: PPUSH
75648: PPUSH
// result := 0 ;
75649: LD_ADDR_VAR 0 3
75653: PUSH
75654: LD_INT 0
75656: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75657: LD_VAR 0 1
75661: PUSH
75662: LD_INT 0
75664: LESS
75665: PUSH
75666: LD_VAR 0 1
75670: PUSH
75671: LD_INT 8
75673: GREATER
75674: OR
75675: PUSH
75676: LD_VAR 0 2
75680: PUSH
75681: LD_INT 0
75683: LESS
75684: OR
75685: PUSH
75686: LD_VAR 0 2
75690: PUSH
75691: LD_INT 8
75693: GREATER
75694: OR
75695: IFFALSE 75699
// exit ;
75697: GO 75774
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75699: LD_ADDR_VAR 0 4
75703: PUSH
75704: LD_INT 22
75706: PUSH
75707: LD_VAR 0 2
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: PPUSH
75716: CALL_OW 69
75720: PUSH
75721: FOR_IN
75722: IFFALSE 75772
// begin un := UnitShoot ( i ) ;
75724: LD_ADDR_VAR 0 5
75728: PUSH
75729: LD_VAR 0 4
75733: PPUSH
75734: CALL_OW 504
75738: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75739: LD_VAR 0 5
75743: PPUSH
75744: CALL_OW 255
75748: PUSH
75749: LD_VAR 0 1
75753: EQUAL
75754: IFFALSE 75770
// begin result := un ;
75756: LD_ADDR_VAR 0 3
75760: PUSH
75761: LD_VAR 0 5
75765: ST_TO_ADDR
// exit ;
75766: POP
75767: POP
75768: GO 75774
// end ; end ;
75770: GO 75721
75772: POP
75773: POP
// end ;
75774: LD_VAR 0 3
75778: RET
// export function GetCargoBay ( units ) ; begin
75779: LD_INT 0
75781: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75782: LD_ADDR_VAR 0 2
75786: PUSH
75787: LD_VAR 0 1
75791: PPUSH
75792: LD_INT 2
75794: PUSH
75795: LD_INT 34
75797: PUSH
75798: LD_INT 12
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: PUSH
75805: LD_INT 34
75807: PUSH
75808: LD_INT 51
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 34
75817: PUSH
75818: LD_INT 32
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 34
75827: PUSH
75828: LD_INT 89
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: PPUSH
75842: CALL_OW 72
75846: ST_TO_ADDR
// end ;
75847: LD_VAR 0 2
75851: RET
// export function Negate ( value ) ; begin
75852: LD_INT 0
75854: PPUSH
// result := not value ;
75855: LD_ADDR_VAR 0 2
75859: PUSH
75860: LD_VAR 0 1
75864: NOT
75865: ST_TO_ADDR
// end ;
75866: LD_VAR 0 2
75870: RET
// export function Inc ( value ) ; begin
75871: LD_INT 0
75873: PPUSH
// result := value + 1 ;
75874: LD_ADDR_VAR 0 2
75878: PUSH
75879: LD_VAR 0 1
75883: PUSH
75884: LD_INT 1
75886: PLUS
75887: ST_TO_ADDR
// end ;
75888: LD_VAR 0 2
75892: RET
// export function Dec ( value ) ; begin
75893: LD_INT 0
75895: PPUSH
// result := value - 1 ;
75896: LD_ADDR_VAR 0 2
75900: PUSH
75901: LD_VAR 0 1
75905: PUSH
75906: LD_INT 1
75908: MINUS
75909: ST_TO_ADDR
// end ;
75910: LD_VAR 0 2
75914: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75915: LD_INT 0
75917: PPUSH
75918: PPUSH
75919: PPUSH
75920: PPUSH
75921: PPUSH
75922: PPUSH
75923: PPUSH
75924: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75925: LD_VAR 0 1
75929: PPUSH
75930: LD_VAR 0 2
75934: PPUSH
75935: CALL_OW 488
75939: NOT
75940: PUSH
75941: LD_VAR 0 3
75945: PPUSH
75946: LD_VAR 0 4
75950: PPUSH
75951: CALL_OW 488
75955: NOT
75956: OR
75957: IFFALSE 75970
// begin result := - 1 ;
75959: LD_ADDR_VAR 0 5
75963: PUSH
75964: LD_INT 1
75966: NEG
75967: ST_TO_ADDR
// exit ;
75968: GO 76205
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75970: LD_ADDR_VAR 0 12
75974: PUSH
75975: LD_VAR 0 1
75979: PPUSH
75980: LD_VAR 0 2
75984: PPUSH
75985: LD_VAR 0 3
75989: PPUSH
75990: LD_VAR 0 4
75994: PPUSH
75995: CALL 75055 0 4
75999: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76000: LD_ADDR_VAR 0 11
76004: PUSH
76005: LD_VAR 0 1
76009: PPUSH
76010: LD_VAR 0 2
76014: PPUSH
76015: LD_VAR 0 12
76019: PUSH
76020: LD_INT 1
76022: ARRAY
76023: PPUSH
76024: LD_VAR 0 12
76028: PUSH
76029: LD_INT 2
76031: ARRAY
76032: PPUSH
76033: CALL_OW 298
76037: ST_TO_ADDR
// distance := 9999 ;
76038: LD_ADDR_VAR 0 10
76042: PUSH
76043: LD_INT 9999
76045: ST_TO_ADDR
// for i := 0 to 5 do
76046: LD_ADDR_VAR 0 6
76050: PUSH
76051: DOUBLE
76052: LD_INT 0
76054: DEC
76055: ST_TO_ADDR
76056: LD_INT 5
76058: PUSH
76059: FOR_TO
76060: IFFALSE 76203
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76062: LD_ADDR_VAR 0 7
76066: PUSH
76067: LD_VAR 0 1
76071: PPUSH
76072: LD_VAR 0 6
76076: PPUSH
76077: LD_VAR 0 11
76081: PPUSH
76082: CALL_OW 272
76086: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76087: LD_ADDR_VAR 0 8
76091: PUSH
76092: LD_VAR 0 2
76096: PPUSH
76097: LD_VAR 0 6
76101: PPUSH
76102: LD_VAR 0 11
76106: PPUSH
76107: CALL_OW 273
76111: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76112: LD_VAR 0 7
76116: PPUSH
76117: LD_VAR 0 8
76121: PPUSH
76122: CALL_OW 488
76126: NOT
76127: IFFALSE 76131
// continue ;
76129: GO 76059
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76131: LD_ADDR_VAR 0 9
76135: PUSH
76136: LD_VAR 0 12
76140: PUSH
76141: LD_INT 1
76143: ARRAY
76144: PPUSH
76145: LD_VAR 0 12
76149: PUSH
76150: LD_INT 2
76152: ARRAY
76153: PPUSH
76154: LD_VAR 0 7
76158: PPUSH
76159: LD_VAR 0 8
76163: PPUSH
76164: CALL_OW 298
76168: ST_TO_ADDR
// if tmp < distance then
76169: LD_VAR 0 9
76173: PUSH
76174: LD_VAR 0 10
76178: LESS
76179: IFFALSE 76201
// begin result := i ;
76181: LD_ADDR_VAR 0 5
76185: PUSH
76186: LD_VAR 0 6
76190: ST_TO_ADDR
// distance := tmp ;
76191: LD_ADDR_VAR 0 10
76195: PUSH
76196: LD_VAR 0 9
76200: ST_TO_ADDR
// end ; end ;
76201: GO 76059
76203: POP
76204: POP
// end ;
76205: LD_VAR 0 5
76209: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76210: LD_INT 0
76212: PPUSH
76213: PPUSH
// if not driver or not IsInUnit ( driver ) then
76214: LD_VAR 0 1
76218: NOT
76219: PUSH
76220: LD_VAR 0 1
76224: PPUSH
76225: CALL_OW 310
76229: NOT
76230: OR
76231: IFFALSE 76235
// exit ;
76233: GO 76325
// vehicle := IsInUnit ( driver ) ;
76235: LD_ADDR_VAR 0 3
76239: PUSH
76240: LD_VAR 0 1
76244: PPUSH
76245: CALL_OW 310
76249: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76250: LD_VAR 0 1
76254: PPUSH
76255: LD_STRING \
76257: PUSH
76258: LD_INT 0
76260: PUSH
76261: LD_INT 0
76263: PUSH
76264: LD_INT 0
76266: PUSH
76267: LD_INT 0
76269: PUSH
76270: LD_INT 0
76272: PUSH
76273: LD_INT 0
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: PUSH
76285: LD_STRING E
76287: PUSH
76288: LD_INT 0
76290: PUSH
76291: LD_INT 0
76293: PUSH
76294: LD_VAR 0 3
76298: PUSH
76299: LD_INT 0
76301: PUSH
76302: LD_INT 0
76304: PUSH
76305: LD_INT 0
76307: PUSH
76308: EMPTY
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: PUSH
76317: EMPTY
76318: LIST
76319: LIST
76320: PPUSH
76321: CALL_OW 446
// end ;
76325: LD_VAR 0 2
76329: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76330: LD_INT 0
76332: PPUSH
76333: PPUSH
// if not driver or not IsInUnit ( driver ) then
76334: LD_VAR 0 1
76338: NOT
76339: PUSH
76340: LD_VAR 0 1
76344: PPUSH
76345: CALL_OW 310
76349: NOT
76350: OR
76351: IFFALSE 76355
// exit ;
76353: GO 76445
// vehicle := IsInUnit ( driver ) ;
76355: LD_ADDR_VAR 0 3
76359: PUSH
76360: LD_VAR 0 1
76364: PPUSH
76365: CALL_OW 310
76369: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76370: LD_VAR 0 1
76374: PPUSH
76375: LD_STRING \
76377: PUSH
76378: LD_INT 0
76380: PUSH
76381: LD_INT 0
76383: PUSH
76384: LD_INT 0
76386: PUSH
76387: LD_INT 0
76389: PUSH
76390: LD_INT 0
76392: PUSH
76393: LD_INT 0
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: PUSH
76405: LD_STRING E
76407: PUSH
76408: LD_INT 0
76410: PUSH
76411: LD_INT 0
76413: PUSH
76414: LD_VAR 0 3
76418: PUSH
76419: LD_INT 0
76421: PUSH
76422: LD_INT 0
76424: PUSH
76425: LD_INT 0
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PPUSH
76441: CALL_OW 447
// end ;
76445: LD_VAR 0 2
76449: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76450: LD_INT 0
76452: PPUSH
76453: PPUSH
76454: PPUSH
// tmp := [ ] ;
76455: LD_ADDR_VAR 0 5
76459: PUSH
76460: EMPTY
76461: ST_TO_ADDR
// for i in units do
76462: LD_ADDR_VAR 0 4
76466: PUSH
76467: LD_VAR 0 1
76471: PUSH
76472: FOR_IN
76473: IFFALSE 76511
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76475: LD_ADDR_VAR 0 5
76479: PUSH
76480: LD_VAR 0 5
76484: PPUSH
76485: LD_VAR 0 5
76489: PUSH
76490: LD_INT 1
76492: PLUS
76493: PPUSH
76494: LD_VAR 0 4
76498: PPUSH
76499: CALL_OW 256
76503: PPUSH
76504: CALL_OW 2
76508: ST_TO_ADDR
76509: GO 76472
76511: POP
76512: POP
// if not tmp then
76513: LD_VAR 0 5
76517: NOT
76518: IFFALSE 76522
// exit ;
76520: GO 76570
// if asc then
76522: LD_VAR 0 2
76526: IFFALSE 76550
// result := SortListByListAsc ( units , tmp ) else
76528: LD_ADDR_VAR 0 3
76532: PUSH
76533: LD_VAR 0 1
76537: PPUSH
76538: LD_VAR 0 5
76542: PPUSH
76543: CALL_OW 76
76547: ST_TO_ADDR
76548: GO 76570
// result := SortListByListDesc ( units , tmp ) ;
76550: LD_ADDR_VAR 0 3
76554: PUSH
76555: LD_VAR 0 1
76559: PPUSH
76560: LD_VAR 0 5
76564: PPUSH
76565: CALL_OW 77
76569: ST_TO_ADDR
// end ;
76570: LD_VAR 0 3
76574: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76575: LD_INT 0
76577: PPUSH
76578: PPUSH
// task := GetTaskList ( mech ) ;
76579: LD_ADDR_VAR 0 4
76583: PUSH
76584: LD_VAR 0 1
76588: PPUSH
76589: CALL_OW 437
76593: ST_TO_ADDR
// if not task then
76594: LD_VAR 0 4
76598: NOT
76599: IFFALSE 76603
// exit ;
76601: GO 76645
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76603: LD_ADDR_VAR 0 3
76607: PUSH
76608: LD_VAR 0 4
76612: PUSH
76613: LD_INT 1
76615: ARRAY
76616: PUSH
76617: LD_INT 1
76619: ARRAY
76620: PUSH
76621: LD_STRING r
76623: EQUAL
76624: PUSH
76625: LD_VAR 0 4
76629: PUSH
76630: LD_INT 1
76632: ARRAY
76633: PUSH
76634: LD_INT 4
76636: ARRAY
76637: PUSH
76638: LD_VAR 0 2
76642: EQUAL
76643: AND
76644: ST_TO_ADDR
// end ;
76645: LD_VAR 0 3
76649: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76650: LD_INT 0
76652: PPUSH
// SetDir ( unit , d ) ;
76653: LD_VAR 0 1
76657: PPUSH
76658: LD_VAR 0 4
76662: PPUSH
76663: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76667: LD_VAR 0 1
76671: PPUSH
76672: LD_VAR 0 2
76676: PPUSH
76677: LD_VAR 0 3
76681: PPUSH
76682: LD_VAR 0 5
76686: PPUSH
76687: CALL_OW 48
// end ;
76691: LD_VAR 0 6
76695: RET
// export function ToNaturalNumber ( number ) ; begin
76696: LD_INT 0
76698: PPUSH
// result := number div 1 ;
76699: LD_ADDR_VAR 0 2
76703: PUSH
76704: LD_VAR 0 1
76708: PUSH
76709: LD_INT 1
76711: DIV
76712: ST_TO_ADDR
// if number < 0 then
76713: LD_VAR 0 1
76717: PUSH
76718: LD_INT 0
76720: LESS
76721: IFFALSE 76731
// result := 0 ;
76723: LD_ADDR_VAR 0 2
76727: PUSH
76728: LD_INT 0
76730: ST_TO_ADDR
// end ;
76731: LD_VAR 0 2
76735: RET
// export function SortByClass ( units , class ) ; var un ; begin
76736: LD_INT 0
76738: PPUSH
76739: PPUSH
// if not units or not class then
76740: LD_VAR 0 1
76744: NOT
76745: PUSH
76746: LD_VAR 0 2
76750: NOT
76751: OR
76752: IFFALSE 76756
// exit ;
76754: GO 76851
// result := [ ] ;
76756: LD_ADDR_VAR 0 3
76760: PUSH
76761: EMPTY
76762: ST_TO_ADDR
// for un in units do
76763: LD_ADDR_VAR 0 4
76767: PUSH
76768: LD_VAR 0 1
76772: PUSH
76773: FOR_IN
76774: IFFALSE 76849
// if GetClass ( un ) = class then
76776: LD_VAR 0 4
76780: PPUSH
76781: CALL_OW 257
76785: PUSH
76786: LD_VAR 0 2
76790: EQUAL
76791: IFFALSE 76818
// result := Insert ( result , 1 , un ) else
76793: LD_ADDR_VAR 0 3
76797: PUSH
76798: LD_VAR 0 3
76802: PPUSH
76803: LD_INT 1
76805: PPUSH
76806: LD_VAR 0 4
76810: PPUSH
76811: CALL_OW 2
76815: ST_TO_ADDR
76816: GO 76847
// result := Replace ( result , result + 1 , un ) ;
76818: LD_ADDR_VAR 0 3
76822: PUSH
76823: LD_VAR 0 3
76827: PPUSH
76828: LD_VAR 0 3
76832: PUSH
76833: LD_INT 1
76835: PLUS
76836: PPUSH
76837: LD_VAR 0 4
76841: PPUSH
76842: CALL_OW 1
76846: ST_TO_ADDR
76847: GO 76773
76849: POP
76850: POP
// end ;
76851: LD_VAR 0 3
76855: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76856: LD_INT 0
76858: PPUSH
76859: PPUSH
76860: PPUSH
76861: PPUSH
76862: PPUSH
76863: PPUSH
76864: PPUSH
// result := [ ] ;
76865: LD_ADDR_VAR 0 4
76869: PUSH
76870: EMPTY
76871: ST_TO_ADDR
// if x - r < 0 then
76872: LD_VAR 0 1
76876: PUSH
76877: LD_VAR 0 3
76881: MINUS
76882: PUSH
76883: LD_INT 0
76885: LESS
76886: IFFALSE 76898
// min_x := 0 else
76888: LD_ADDR_VAR 0 8
76892: PUSH
76893: LD_INT 0
76895: ST_TO_ADDR
76896: GO 76914
// min_x := x - r ;
76898: LD_ADDR_VAR 0 8
76902: PUSH
76903: LD_VAR 0 1
76907: PUSH
76908: LD_VAR 0 3
76912: MINUS
76913: ST_TO_ADDR
// if y - r < 0 then
76914: LD_VAR 0 2
76918: PUSH
76919: LD_VAR 0 3
76923: MINUS
76924: PUSH
76925: LD_INT 0
76927: LESS
76928: IFFALSE 76940
// min_y := 0 else
76930: LD_ADDR_VAR 0 7
76934: PUSH
76935: LD_INT 0
76937: ST_TO_ADDR
76938: GO 76956
// min_y := y - r ;
76940: LD_ADDR_VAR 0 7
76944: PUSH
76945: LD_VAR 0 2
76949: PUSH
76950: LD_VAR 0 3
76954: MINUS
76955: ST_TO_ADDR
// max_x := x + r ;
76956: LD_ADDR_VAR 0 9
76960: PUSH
76961: LD_VAR 0 1
76965: PUSH
76966: LD_VAR 0 3
76970: PLUS
76971: ST_TO_ADDR
// max_y := y + r ;
76972: LD_ADDR_VAR 0 10
76976: PUSH
76977: LD_VAR 0 2
76981: PUSH
76982: LD_VAR 0 3
76986: PLUS
76987: ST_TO_ADDR
// for _x = min_x to max_x do
76988: LD_ADDR_VAR 0 5
76992: PUSH
76993: DOUBLE
76994: LD_VAR 0 8
76998: DEC
76999: ST_TO_ADDR
77000: LD_VAR 0 9
77004: PUSH
77005: FOR_TO
77006: IFFALSE 77107
// for _y = min_y to max_y do
77008: LD_ADDR_VAR 0 6
77012: PUSH
77013: DOUBLE
77014: LD_VAR 0 7
77018: DEC
77019: ST_TO_ADDR
77020: LD_VAR 0 10
77024: PUSH
77025: FOR_TO
77026: IFFALSE 77103
// begin if not ValidHex ( _x , _y ) then
77028: LD_VAR 0 5
77032: PPUSH
77033: LD_VAR 0 6
77037: PPUSH
77038: CALL_OW 488
77042: NOT
77043: IFFALSE 77047
// continue ;
77045: GO 77025
// if GetResourceTypeXY ( _x , _y ) then
77047: LD_VAR 0 5
77051: PPUSH
77052: LD_VAR 0 6
77056: PPUSH
77057: CALL_OW 283
77061: IFFALSE 77101
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77063: LD_ADDR_VAR 0 4
77067: PUSH
77068: LD_VAR 0 4
77072: PPUSH
77073: LD_VAR 0 4
77077: PUSH
77078: LD_INT 1
77080: PLUS
77081: PPUSH
77082: LD_VAR 0 5
77086: PUSH
77087: LD_VAR 0 6
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: PPUSH
77096: CALL_OW 1
77100: ST_TO_ADDR
// end ;
77101: GO 77025
77103: POP
77104: POP
77105: GO 77005
77107: POP
77108: POP
// end ;
77109: LD_VAR 0 4
77113: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77114: LD_INT 0
77116: PPUSH
77117: PPUSH
77118: PPUSH
77119: PPUSH
77120: PPUSH
77121: PPUSH
77122: PPUSH
77123: PPUSH
// if not units then
77124: LD_VAR 0 1
77128: NOT
77129: IFFALSE 77133
// exit ;
77131: GO 77657
// result := UnitFilter ( units , [ f_ok ] ) ;
77133: LD_ADDR_VAR 0 3
77137: PUSH
77138: LD_VAR 0 1
77142: PPUSH
77143: LD_INT 50
77145: PUSH
77146: EMPTY
77147: LIST
77148: PPUSH
77149: CALL_OW 72
77153: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77154: LD_ADDR_VAR 0 8
77158: PUSH
77159: LD_VAR 0 1
77163: PUSH
77164: LD_INT 1
77166: ARRAY
77167: PPUSH
77168: CALL_OW 255
77172: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77173: LD_ADDR_VAR 0 10
77177: PUSH
77178: LD_INT 29
77180: PUSH
77181: LD_INT 91
77183: PUSH
77184: LD_INT 49
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: LIST
77191: ST_TO_ADDR
// if not result then
77192: LD_VAR 0 3
77196: NOT
77197: IFFALSE 77201
// exit ;
77199: GO 77657
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77201: LD_ADDR_VAR 0 5
77205: PUSH
77206: LD_INT 81
77208: PUSH
77209: LD_VAR 0 8
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: PPUSH
77218: CALL_OW 69
77222: ST_TO_ADDR
// for i in result do
77223: LD_ADDR_VAR 0 4
77227: PUSH
77228: LD_VAR 0 3
77232: PUSH
77233: FOR_IN
77234: IFFALSE 77655
// begin tag := GetTag ( i ) + 1 ;
77236: LD_ADDR_VAR 0 9
77240: PUSH
77241: LD_VAR 0 4
77245: PPUSH
77246: CALL_OW 110
77250: PUSH
77251: LD_INT 1
77253: PLUS
77254: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77255: LD_ADDR_VAR 0 7
77259: PUSH
77260: LD_VAR 0 4
77264: PPUSH
77265: CALL_OW 250
77269: PPUSH
77270: LD_VAR 0 4
77274: PPUSH
77275: CALL_OW 251
77279: PPUSH
77280: LD_INT 6
77282: PPUSH
77283: CALL 76856 0 3
77287: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77288: LD_VAR 0 4
77292: PPUSH
77293: CALL_OW 247
77297: PUSH
77298: LD_INT 2
77300: EQUAL
77301: PUSH
77302: LD_VAR 0 7
77306: AND
77307: PUSH
77308: LD_VAR 0 4
77312: PPUSH
77313: CALL_OW 264
77317: PUSH
77318: LD_VAR 0 10
77322: IN
77323: NOT
77324: AND
77325: IFFALSE 77364
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77327: LD_VAR 0 4
77331: PPUSH
77332: LD_VAR 0 7
77336: PUSH
77337: LD_INT 1
77339: ARRAY
77340: PUSH
77341: LD_INT 1
77343: ARRAY
77344: PPUSH
77345: LD_VAR 0 7
77349: PUSH
77350: LD_INT 1
77352: ARRAY
77353: PUSH
77354: LD_INT 2
77356: ARRAY
77357: PPUSH
77358: CALL_OW 116
77362: GO 77653
// if path > tag then
77364: LD_VAR 0 2
77368: PUSH
77369: LD_VAR 0 9
77373: GREATER
77374: IFFALSE 77582
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
77376: LD_ADDR_VAR 0 6
77380: PUSH
77381: LD_VAR 0 5
77385: PPUSH
77386: LD_INT 91
77388: PUSH
77389: LD_VAR 0 4
77393: PUSH
77394: LD_INT 8
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: LIST
77401: PPUSH
77402: CALL_OW 72
77406: ST_TO_ADDR
// if nearEnemy then
77407: LD_VAR 0 6
77411: IFFALSE 77480
// begin if GetWeapon ( i ) = ru_time_lapser then
77413: LD_VAR 0 4
77417: PPUSH
77418: CALL_OW 264
77422: PUSH
77423: LD_INT 49
77425: EQUAL
77426: IFFALSE 77454
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77428: LD_VAR 0 4
77432: PPUSH
77433: LD_VAR 0 6
77437: PPUSH
77438: LD_VAR 0 4
77442: PPUSH
77443: CALL_OW 74
77447: PPUSH
77448: CALL_OW 112
77452: GO 77478
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77454: LD_VAR 0 4
77458: PPUSH
77459: LD_VAR 0 6
77463: PPUSH
77464: LD_VAR 0 4
77468: PPUSH
77469: CALL_OW 74
77473: PPUSH
77474: CALL_OW 115
// end else
77478: GO 77580
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77480: LD_VAR 0 4
77484: PPUSH
77485: LD_VAR 0 2
77489: PUSH
77490: LD_VAR 0 9
77494: ARRAY
77495: PUSH
77496: LD_INT 1
77498: ARRAY
77499: PPUSH
77500: LD_VAR 0 2
77504: PUSH
77505: LD_VAR 0 9
77509: ARRAY
77510: PUSH
77511: LD_INT 2
77513: ARRAY
77514: PPUSH
77515: CALL_OW 297
77519: PUSH
77520: LD_INT 6
77522: GREATER
77523: IFFALSE 77566
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77525: LD_VAR 0 4
77529: PPUSH
77530: LD_VAR 0 2
77534: PUSH
77535: LD_VAR 0 9
77539: ARRAY
77540: PUSH
77541: LD_INT 1
77543: ARRAY
77544: PPUSH
77545: LD_VAR 0 2
77549: PUSH
77550: LD_VAR 0 9
77554: ARRAY
77555: PUSH
77556: LD_INT 2
77558: ARRAY
77559: PPUSH
77560: CALL_OW 114
77564: GO 77580
// SetTag ( i , tag ) ;
77566: LD_VAR 0 4
77570: PPUSH
77571: LD_VAR 0 9
77575: PPUSH
77576: CALL_OW 109
// end else
77580: GO 77653
// if enemy then
77582: LD_VAR 0 5
77586: IFFALSE 77653
// begin if GetWeapon ( i ) = ru_time_lapser then
77588: LD_VAR 0 4
77592: PPUSH
77593: CALL_OW 264
77597: PUSH
77598: LD_INT 49
77600: EQUAL
77601: IFFALSE 77629
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77603: LD_VAR 0 4
77607: PPUSH
77608: LD_VAR 0 5
77612: PPUSH
77613: LD_VAR 0 4
77617: PPUSH
77618: CALL_OW 74
77622: PPUSH
77623: CALL_OW 112
77627: GO 77653
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77629: LD_VAR 0 4
77633: PPUSH
77634: LD_VAR 0 5
77638: PPUSH
77639: LD_VAR 0 4
77643: PPUSH
77644: CALL_OW 74
77648: PPUSH
77649: CALL_OW 115
// end ; end ;
77653: GO 77233
77655: POP
77656: POP
// end ;
77657: LD_VAR 0 3
77661: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77662: LD_INT 0
77664: PPUSH
77665: PPUSH
77666: PPUSH
// if not unit or IsInUnit ( unit ) then
77667: LD_VAR 0 1
77671: NOT
77672: PUSH
77673: LD_VAR 0 1
77677: PPUSH
77678: CALL_OW 310
77682: OR
77683: IFFALSE 77687
// exit ;
77685: GO 77778
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77687: LD_ADDR_VAR 0 4
77691: PUSH
77692: LD_VAR 0 1
77696: PPUSH
77697: CALL_OW 250
77701: PPUSH
77702: LD_VAR 0 2
77706: PPUSH
77707: LD_INT 1
77709: PPUSH
77710: CALL_OW 272
77714: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77715: LD_ADDR_VAR 0 5
77719: PUSH
77720: LD_VAR 0 1
77724: PPUSH
77725: CALL_OW 251
77729: PPUSH
77730: LD_VAR 0 2
77734: PPUSH
77735: LD_INT 1
77737: PPUSH
77738: CALL_OW 273
77742: ST_TO_ADDR
// if ValidHex ( x , y ) then
77743: LD_VAR 0 4
77747: PPUSH
77748: LD_VAR 0 5
77752: PPUSH
77753: CALL_OW 488
77757: IFFALSE 77778
// ComTurnXY ( unit , x , y ) ;
77759: LD_VAR 0 1
77763: PPUSH
77764: LD_VAR 0 4
77768: PPUSH
77769: LD_VAR 0 5
77773: PPUSH
77774: CALL_OW 118
// end ;
77778: LD_VAR 0 3
77782: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77783: LD_INT 0
77785: PPUSH
77786: PPUSH
// result := false ;
77787: LD_ADDR_VAR 0 3
77791: PUSH
77792: LD_INT 0
77794: ST_TO_ADDR
// if not units then
77795: LD_VAR 0 2
77799: NOT
77800: IFFALSE 77804
// exit ;
77802: GO 77849
// for i in units do
77804: LD_ADDR_VAR 0 4
77808: PUSH
77809: LD_VAR 0 2
77813: PUSH
77814: FOR_IN
77815: IFFALSE 77847
// if See ( side , i ) then
77817: LD_VAR 0 1
77821: PPUSH
77822: LD_VAR 0 4
77826: PPUSH
77827: CALL_OW 292
77831: IFFALSE 77845
// begin result := true ;
77833: LD_ADDR_VAR 0 3
77837: PUSH
77838: LD_INT 1
77840: ST_TO_ADDR
// exit ;
77841: POP
77842: POP
77843: GO 77849
// end ;
77845: GO 77814
77847: POP
77848: POP
// end ;
77849: LD_VAR 0 3
77853: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77854: LD_INT 0
77856: PPUSH
77857: PPUSH
77858: PPUSH
77859: PPUSH
// if not unit or not points then
77860: LD_VAR 0 1
77864: NOT
77865: PUSH
77866: LD_VAR 0 2
77870: NOT
77871: OR
77872: IFFALSE 77876
// exit ;
77874: GO 77966
// dist := 99999 ;
77876: LD_ADDR_VAR 0 5
77880: PUSH
77881: LD_INT 99999
77883: ST_TO_ADDR
// for i in points do
77884: LD_ADDR_VAR 0 4
77888: PUSH
77889: LD_VAR 0 2
77893: PUSH
77894: FOR_IN
77895: IFFALSE 77964
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77897: LD_ADDR_VAR 0 6
77901: PUSH
77902: LD_VAR 0 1
77906: PPUSH
77907: LD_VAR 0 4
77911: PUSH
77912: LD_INT 1
77914: ARRAY
77915: PPUSH
77916: LD_VAR 0 4
77920: PUSH
77921: LD_INT 2
77923: ARRAY
77924: PPUSH
77925: CALL_OW 297
77929: ST_TO_ADDR
// if tmpDist < dist then
77930: LD_VAR 0 6
77934: PUSH
77935: LD_VAR 0 5
77939: LESS
77940: IFFALSE 77962
// begin result := i ;
77942: LD_ADDR_VAR 0 3
77946: PUSH
77947: LD_VAR 0 4
77951: ST_TO_ADDR
// dist := tmpDist ;
77952: LD_ADDR_VAR 0 5
77956: PUSH
77957: LD_VAR 0 6
77961: ST_TO_ADDR
// end ; end ;
77962: GO 77894
77964: POP
77965: POP
// end ;
77966: LD_VAR 0 3
77970: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77971: LD_INT 0
77973: PPUSH
// uc_side := side ;
77974: LD_ADDR_OWVAR 20
77978: PUSH
77979: LD_VAR 0 1
77983: ST_TO_ADDR
// uc_nation := 3 ;
77984: LD_ADDR_OWVAR 21
77988: PUSH
77989: LD_INT 3
77991: ST_TO_ADDR
// vc_chassis := 25 ;
77992: LD_ADDR_OWVAR 37
77996: PUSH
77997: LD_INT 25
77999: ST_TO_ADDR
// vc_engine := engine_siberite ;
78000: LD_ADDR_OWVAR 39
78004: PUSH
78005: LD_INT 3
78007: ST_TO_ADDR
// vc_control := control_computer ;
78008: LD_ADDR_OWVAR 38
78012: PUSH
78013: LD_INT 3
78015: ST_TO_ADDR
// vc_weapon := 59 ;
78016: LD_ADDR_OWVAR 40
78020: PUSH
78021: LD_INT 59
78023: ST_TO_ADDR
// result := CreateVehicle ;
78024: LD_ADDR_VAR 0 5
78028: PUSH
78029: CALL_OW 45
78033: ST_TO_ADDR
// SetDir ( result , d ) ;
78034: LD_VAR 0 5
78038: PPUSH
78039: LD_VAR 0 4
78043: PPUSH
78044: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78048: LD_VAR 0 5
78052: PPUSH
78053: LD_VAR 0 2
78057: PPUSH
78058: LD_VAR 0 3
78062: PPUSH
78063: LD_INT 0
78065: PPUSH
78066: CALL_OW 48
// end ;
78070: LD_VAR 0 5
78074: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78075: LD_INT 0
78077: PPUSH
78078: PPUSH
78079: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78080: LD_ADDR_VAR 0 2
78084: PUSH
78085: LD_INT 0
78087: PUSH
78088: LD_INT 0
78090: PUSH
78091: LD_INT 0
78093: PUSH
78094: LD_INT 0
78096: PUSH
78097: EMPTY
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78103: LD_VAR 0 1
78107: NOT
78108: PUSH
78109: LD_VAR 0 1
78113: PPUSH
78114: CALL_OW 264
78118: PUSH
78119: LD_INT 12
78121: PUSH
78122: LD_INT 51
78124: PUSH
78125: LD_INT 32
78127: PUSH
78128: LD_INT 89
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: IN
78137: NOT
78138: OR
78139: IFFALSE 78143
// exit ;
78141: GO 78241
// for i := 1 to 3 do
78143: LD_ADDR_VAR 0 3
78147: PUSH
78148: DOUBLE
78149: LD_INT 1
78151: DEC
78152: ST_TO_ADDR
78153: LD_INT 3
78155: PUSH
78156: FOR_TO
78157: IFFALSE 78239
// begin tmp := GetCargo ( cargo , i ) ;
78159: LD_ADDR_VAR 0 4
78163: PUSH
78164: LD_VAR 0 1
78168: PPUSH
78169: LD_VAR 0 3
78173: PPUSH
78174: CALL_OW 289
78178: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78179: LD_ADDR_VAR 0 2
78183: PUSH
78184: LD_VAR 0 2
78188: PPUSH
78189: LD_VAR 0 3
78193: PPUSH
78194: LD_VAR 0 4
78198: PPUSH
78199: CALL_OW 1
78203: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78204: LD_ADDR_VAR 0 2
78208: PUSH
78209: LD_VAR 0 2
78213: PPUSH
78214: LD_INT 4
78216: PPUSH
78217: LD_VAR 0 2
78221: PUSH
78222: LD_INT 4
78224: ARRAY
78225: PUSH
78226: LD_VAR 0 4
78230: PLUS
78231: PPUSH
78232: CALL_OW 1
78236: ST_TO_ADDR
// end ;
78237: GO 78156
78239: POP
78240: POP
// end ;
78241: LD_VAR 0 2
78245: RET
// export function Length ( array ) ; begin
78246: LD_INT 0
78248: PPUSH
// result := array + 0 ;
78249: LD_ADDR_VAR 0 2
78253: PUSH
78254: LD_VAR 0 1
78258: PUSH
78259: LD_INT 0
78261: PLUS
78262: ST_TO_ADDR
// end ;
78263: LD_VAR 0 2
78267: RET
// export function PrepareArray ( array ) ; begin
78268: LD_INT 0
78270: PPUSH
// result := array diff 0 ;
78271: LD_ADDR_VAR 0 2
78275: PUSH
78276: LD_VAR 0 1
78280: PUSH
78281: LD_INT 0
78283: DIFF
78284: ST_TO_ADDR
// if not result [ 1 ] then
78285: LD_VAR 0 2
78289: PUSH
78290: LD_INT 1
78292: ARRAY
78293: NOT
78294: IFFALSE 78314
// result := Delete ( result , 1 ) ;
78296: LD_ADDR_VAR 0 2
78300: PUSH
78301: LD_VAR 0 2
78305: PPUSH
78306: LD_INT 1
78308: PPUSH
78309: CALL_OW 3
78313: ST_TO_ADDR
// end ; end_of_file
78314: LD_VAR 0 2
78318: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78319: LD_VAR 0 1
78323: PPUSH
78324: LD_VAR 0 2
78328: PPUSH
78329: LD_VAR 0 3
78333: PPUSH
78334: LD_VAR 0 4
78338: PPUSH
78339: LD_VAR 0 5
78343: PPUSH
78344: LD_VAR 0 6
78348: PPUSH
78349: CALL 17084 0 6
// end ;
78353: PPOPN 6
78355: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78356: LD_INT 0
78358: PPUSH
// begin if not units then
78359: LD_VAR 0 1
78363: NOT
78364: IFFALSE 78368
// exit ;
78366: GO 78368
// end ;
78368: PPOPN 7
78370: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78371: CALL 17055 0 0
// end ;
78375: PPOPN 1
78377: END
