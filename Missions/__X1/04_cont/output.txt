// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1776 0 0
// PrepareArabian ;
  12: CALL 2141 0 0
// PrepareAmerican ;
  16: CALL 6748 0 0
// PrepareRussian ;
  20: CALL 3097 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 8308 0 0
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 20
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 22
 177: PUSH
 178: LD_INT 52500
 180: PUSH
 181: LD_INT 50400
 183: PUSH
 184: LD_INT 48300
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 21
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// hillBase := false ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 230: LD_ADDR_EXP 8
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 4
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 7
 249: PUSH
 250: LD_INT 8
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 261: LD_ADDR_EXP 23
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// kaganCaptured := false ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 282: LD_INT 0
 284: PPUSH
 285: PPUSH
// if exist_mode then
 286: LD_VAR 0 2
 290: IFFALSE 315
// unit := CreateCharacter ( prefix & ident ) else
 292: LD_ADDR_VAR 0 5
 296: PUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_VAR 0 1
 306: STR
 307: PPUSH
 308: CALL_OW 34
 312: ST_TO_ADDR
 313: GO 330
// unit := NewCharacter ( ident ) ;
 315: LD_ADDR_VAR 0 5
 319: PUSH
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 25
 329: ST_TO_ADDR
// result := unit ;
 330: LD_ADDR_VAR 0 4
 334: PUSH
 335: LD_VAR 0 5
 339: ST_TO_ADDR
// end ;
 340: LD_VAR 0 4
 344: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 345: LD_INT 0
 347: PPUSH
// uc_side := side ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_VAR 0 1
 357: ST_TO_ADDR
// uc_nation := nation ;
 358: LD_ADDR_OWVAR 21
 362: PUSH
 363: LD_VAR 0 2
 367: ST_TO_ADDR
// vc_chassis := chassis ;
 368: LD_ADDR_OWVAR 37
 372: PUSH
 373: LD_VAR 0 3
 377: ST_TO_ADDR
// vc_engine := engine ;
 378: LD_ADDR_OWVAR 39
 382: PUSH
 383: LD_VAR 0 4
 387: ST_TO_ADDR
// vc_control := control ;
 388: LD_ADDR_OWVAR 38
 392: PUSH
 393: LD_VAR 0 5
 397: ST_TO_ADDR
// vc_weapon := weapon ;
 398: LD_ADDR_OWVAR 40
 402: PUSH
 403: LD_VAR 0 6
 407: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 408: LD_ADDR_OWVAR 41
 412: PUSH
 413: LD_VAR 0 7
 417: ST_TO_ADDR
// result := CreateVehicle ;
 418: LD_ADDR_VAR 0 8
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// end ;
 428: LD_VAR 0 8
 432: RET
// export function SayX ( units , ident ) ; var i ; begin
 433: LD_INT 0
 435: PPUSH
 436: PPUSH
// result := false ;
 437: LD_ADDR_VAR 0 3
 441: PUSH
 442: LD_INT 0
 444: ST_TO_ADDR
// if not units then
 445: LD_VAR 0 1
 449: NOT
 450: IFFALSE 454
// exit ;
 452: GO 508
// for i in units do
 454: LD_ADDR_VAR 0 4
 458: PUSH
 459: LD_VAR 0 1
 463: PUSH
 464: FOR_IN
 465: IFFALSE 506
// if IsOk ( i ) then
 467: LD_VAR 0 4
 471: PPUSH
 472: CALL_OW 302
 476: IFFALSE 504
// begin Say ( i , ident ) ;
 478: LD_VAR 0 4
 482: PPUSH
 483: LD_VAR 0 2
 487: PPUSH
 488: CALL_OW 88
// result := i ;
 492: LD_ADDR_VAR 0 3
 496: PUSH
 497: LD_VAR 0 4
 501: ST_TO_ADDR
// break ;
 502: GO 506
// end ;
 504: GO 464
 506: POP
 507: POP
// end ;
 508: LD_VAR 0 3
 512: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
 517: PPUSH
// if not observer or not unit then
 518: LD_VAR 0 1
 522: NOT
 523: PUSH
 524: LD_VAR 0 2
 528: NOT
 529: OR
 530: IFFALSE 534
// exit ;
 532: GO 582
// if not See ( GetSide ( observer ) , unit ) then
 534: LD_VAR 0 1
 538: PPUSH
 539: CALL_OW 255
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: CALL_OW 292
 553: NOT
 554: IFFALSE 558
// exit ;
 556: GO 582
// result := GetDistUnits ( observer , unit ) < 12 ;
 558: LD_ADDR_VAR 0 3
 562: PUSH
 563: LD_VAR 0 1
 567: PPUSH
 568: LD_VAR 0 2
 572: PPUSH
 573: CALL_OW 296
 577: PUSH
 578: LD_INT 12
 580: LESS
 581: ST_TO_ADDR
// end ;
 582: LD_VAR 0 3
 586: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 587: LD_INT 0
 589: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 590: LD_VAR 0 2
 594: PUSH
 595: LD_INT 1
 597: ARRAY
 598: PPUSH
 599: LD_VAR 0 2
 603: PUSH
 604: LD_INT 2
 606: ARRAY
 607: PPUSH
 608: CALL_OW 488
 612: PUSH
 613: LD_VAR 0 2
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: CALL_OW 428
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: AND
 640: IFFALSE 674
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 642: LD_VAR 0 1
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: PPUSH
 656: LD_VAR 0 2
 660: PUSH
 661: LD_INT 2
 663: ARRAY
 664: PPUSH
 665: LD_VAR 0 3
 669: PPUSH
 670: CALL_OW 48
// end ;
 674: LD_VAR 0 4
 678: RET
// export function Video ( mode ) ; begin
 679: LD_INT 0
 681: PPUSH
// ingame_video = mode ;
 682: LD_ADDR_OWVAR 52
 686: PUSH
 687: LD_VAR 0 1
 691: ST_TO_ADDR
// interface_hidden = mode ;
 692: LD_ADDR_OWVAR 54
 696: PUSH
 697: LD_VAR 0 1
 701: ST_TO_ADDR
// end ;
 702: LD_VAR 0 2
 706: RET
// export function ReverseArray ( array ) ; var i ; begin
 707: LD_INT 0
 709: PPUSH
 710: PPUSH
// if not array then
 711: LD_VAR 0 1
 715: NOT
 716: IFFALSE 720
// exit ;
 718: GO 778
// result := [ ] ;
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// for i := 1 to array do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_VAR 0 1
 741: PUSH
 742: FOR_TO
 743: IFFALSE 776
// result := Insert ( result , 1 , array [ i ] ) ;
 745: LD_ADDR_VAR 0 2
 749: PUSH
 750: LD_VAR 0 2
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_VAR 0 1
 762: PUSH
 763: LD_VAR 0 3
 767: ARRAY
 768: PPUSH
 769: CALL_OW 2
 773: ST_TO_ADDR
 774: GO 742
 776: POP
 777: POP
// end ;
 778: LD_VAR 0 2
 782: RET
// export function ComExit ( unit ) ; begin
 783: LD_INT 0
 785: PPUSH
// result := IsInUnit ( unit ) ;
 786: LD_ADDR_VAR 0 2
 790: PUSH
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 310
 800: ST_TO_ADDR
// if not result then
 801: LD_VAR 0 2
 805: NOT
 806: IFFALSE 810
// exit ;
 808: GO 845
// if GetType ( result ) = unit_vehicle then
 810: LD_VAR 0 2
 814: PPUSH
 815: CALL_OW 247
 819: PUSH
 820: LD_INT 2
 822: EQUAL
 823: IFFALSE 836
// ComExitVehicle ( unit ) else
 825: LD_VAR 0 1
 829: PPUSH
 830: CALL_OW 121
 834: GO 845
// ComExitBuilding ( unit ) ;
 836: LD_VAR 0 1
 840: PPUSH
 841: CALL_OW 122
// end ;
 845: LD_VAR 0 2
 849: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
// if not side or not nation then
 854: LD_VAR 0 1
 858: NOT
 859: PUSH
 860: LD_VAR 0 2
 864: NOT
 865: OR
 866: IFFALSE 870
// exit ;
 868: GO 1634
// case nation of nation_american :
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: DOUBLE
 878: EQUAL
 879: IFTRUE 883
 881: GO 1097
 883: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: LD_INT 35
 891: PUSH
 892: LD_INT 45
 894: PUSH
 895: LD_INT 46
 897: PUSH
 898: LD_INT 47
 900: PUSH
 901: LD_INT 82
 903: PUSH
 904: LD_INT 83
 906: PUSH
 907: LD_INT 84
 909: PUSH
 910: LD_INT 85
 912: PUSH
 913: LD_INT 86
 915: PUSH
 916: LD_INT 1
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: LD_INT 15
 927: PUSH
 928: LD_INT 16
 930: PUSH
 931: LD_INT 7
 933: PUSH
 934: LD_INT 12
 936: PUSH
 937: LD_INT 13
 939: PUSH
 940: LD_INT 10
 942: PUSH
 943: LD_INT 14
 945: PUSH
 946: LD_INT 20
 948: PUSH
 949: LD_INT 21
 951: PUSH
 952: LD_INT 22
 954: PUSH
 955: LD_INT 25
 957: PUSH
 958: LD_INT 32
 960: PUSH
 961: LD_INT 27
 963: PUSH
 964: LD_INT 36
 966: PUSH
 967: LD_INT 69
 969: PUSH
 970: LD_INT 39
 972: PUSH
 973: LD_INT 34
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 48
 981: PUSH
 982: LD_INT 49
 984: PUSH
 985: LD_INT 50
 987: PUSH
 988: LD_INT 51
 990: PUSH
 991: LD_INT 52
 993: PUSH
 994: LD_INT 53
 996: PUSH
 997: LD_INT 54
 999: PUSH
1000: LD_INT 55
1002: PUSH
1003: LD_INT 56
1005: PUSH
1006: LD_INT 57
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: LD_INT 59
1014: PUSH
1015: LD_INT 60
1017: PUSH
1018: LD_INT 61
1020: PUSH
1021: LD_INT 62
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 82
1029: PUSH
1030: LD_INT 83
1032: PUSH
1033: LD_INT 84
1035: PUSH
1036: LD_INT 85
1038: PUSH
1039: LD_INT 86
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: ST_TO_ADDR
1095: GO 1558
1097: LD_INT 2
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1327
1105: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1106: LD_ADDR_VAR 0 4
1110: PUSH
1111: LD_INT 35
1113: PUSH
1114: LD_INT 45
1116: PUSH
1117: LD_INT 46
1119: PUSH
1120: LD_INT 47
1122: PUSH
1123: LD_INT 82
1125: PUSH
1126: LD_INT 83
1128: PUSH
1129: LD_INT 84
1131: PUSH
1132: LD_INT 85
1134: PUSH
1135: LD_INT 87
1137: PUSH
1138: LD_INT 70
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 11
1146: PUSH
1147: LD_INT 3
1149: PUSH
1150: LD_INT 4
1152: PUSH
1153: LD_INT 5
1155: PUSH
1156: LD_INT 6
1158: PUSH
1159: LD_INT 15
1161: PUSH
1162: LD_INT 18
1164: PUSH
1165: LD_INT 7
1167: PUSH
1168: LD_INT 17
1170: PUSH
1171: LD_INT 8
1173: PUSH
1174: LD_INT 20
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 22
1182: PUSH
1183: LD_INT 72
1185: PUSH
1186: LD_INT 26
1188: PUSH
1189: LD_INT 69
1191: PUSH
1192: LD_INT 39
1194: PUSH
1195: LD_INT 40
1197: PUSH
1198: LD_INT 41
1200: PUSH
1201: LD_INT 42
1203: PUSH
1204: LD_INT 43
1206: PUSH
1207: LD_INT 48
1209: PUSH
1210: LD_INT 49
1212: PUSH
1213: LD_INT 50
1215: PUSH
1216: LD_INT 51
1218: PUSH
1219: LD_INT 52
1221: PUSH
1222: LD_INT 53
1224: PUSH
1225: LD_INT 54
1227: PUSH
1228: LD_INT 55
1230: PUSH
1231: LD_INT 56
1233: PUSH
1234: LD_INT 60
1236: PUSH
1237: LD_INT 61
1239: PUSH
1240: LD_INT 62
1242: PUSH
1243: LD_INT 66
1245: PUSH
1246: LD_INT 67
1248: PUSH
1249: LD_INT 68
1251: PUSH
1252: LD_INT 81
1254: PUSH
1255: LD_INT 82
1257: PUSH
1258: LD_INT 83
1260: PUSH
1261: LD_INT 84
1263: PUSH
1264: LD_INT 85
1266: PUSH
1267: LD_INT 87
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
1325: GO 1558
1327: LD_INT 3
1329: DOUBLE
1330: EQUAL
1331: IFTRUE 1335
1333: GO 1557
1335: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1336: LD_ADDR_VAR 0 4
1340: PUSH
1341: LD_INT 46
1343: PUSH
1344: LD_INT 47
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: LD_INT 82
1355: PUSH
1356: LD_INT 83
1358: PUSH
1359: LD_INT 84
1361: PUSH
1362: LD_INT 85
1364: PUSH
1365: LD_INT 86
1367: PUSH
1368: LD_INT 11
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 20
1376: PUSH
1377: LD_INT 19
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 24
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 25
1391: PUSH
1392: LD_INT 28
1394: PUSH
1395: LD_INT 29
1397: PUSH
1398: LD_INT 30
1400: PUSH
1401: LD_INT 31
1403: PUSH
1404: LD_INT 37
1406: PUSH
1407: LD_INT 38
1409: PUSH
1410: LD_INT 32
1412: PUSH
1413: LD_INT 27
1415: PUSH
1416: LD_INT 33
1418: PUSH
1419: LD_INT 69
1421: PUSH
1422: LD_INT 39
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 40
1430: PUSH
1431: LD_INT 71
1433: PUSH
1434: LD_INT 23
1436: PUSH
1437: LD_INT 44
1439: PUSH
1440: LD_INT 48
1442: PUSH
1443: LD_INT 49
1445: PUSH
1446: LD_INT 50
1448: PUSH
1449: LD_INT 51
1451: PUSH
1452: LD_INT 52
1454: PUSH
1455: LD_INT 53
1457: PUSH
1458: LD_INT 54
1460: PUSH
1461: LD_INT 55
1463: PUSH
1464: LD_INT 56
1466: PUSH
1467: LD_INT 57
1469: PUSH
1470: LD_INT 58
1472: PUSH
1473: LD_INT 59
1475: PUSH
1476: LD_INT 63
1478: PUSH
1479: LD_INT 64
1481: PUSH
1482: LD_INT 65
1484: PUSH
1485: LD_INT 82
1487: PUSH
1488: LD_INT 83
1490: PUSH
1491: LD_INT 84
1493: PUSH
1494: LD_INT 85
1496: PUSH
1497: LD_INT 86
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: ST_TO_ADDR
1555: GO 1558
1557: POP
// if state > - 1 and state < 3 then
1558: LD_VAR 0 3
1562: PUSH
1563: LD_INT 1
1565: NEG
1566: GREATER
1567: PUSH
1568: LD_VAR 0 3
1572: PUSH
1573: LD_INT 3
1575: LESS
1576: AND
1577: IFFALSE 1634
// for i in result do
1579: LD_ADDR_VAR 0 5
1583: PUSH
1584: LD_VAR 0 4
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1632
// if GetTech ( i , side ) <> state then
1592: LD_VAR 0 5
1596: PPUSH
1597: LD_VAR 0 1
1601: PPUSH
1602: CALL_OW 321
1606: PUSH
1607: LD_VAR 0 3
1611: NONEQUAL
1612: IFFALSE 1630
// result := result diff i ;
1614: LD_ADDR_VAR 0 4
1618: PUSH
1619: LD_VAR 0 4
1623: PUSH
1624: LD_VAR 0 5
1628: DIFF
1629: ST_TO_ADDR
1630: GO 1589
1632: POP
1633: POP
// end ;
1634: LD_VAR 0 4
1638: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1639: LD_INT 0
1641: PPUSH
1642: PPUSH
// InitUc ;
1643: CALL_OW 18
// InitHc ;
1647: CALL_OW 19
// uc_side := 0 ;
1651: LD_ADDR_OWVAR 20
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// uc_nation := 0 ;
1659: LD_ADDR_OWVAR 21
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// for i = 1 to amount do
1667: LD_ADDR_VAR 0 4
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_VAR 0 2
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1765
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1685: LD_ADDR_OWVAR 29
1689: PUSH
1690: LD_INT 9
1692: PPUSH
1693: LD_INT 12
1695: PPUSH
1696: CALL_OW 12
1700: PUSH
1701: LD_INT 9
1703: PPUSH
1704: LD_INT 12
1706: PPUSH
1707: CALL_OW 12
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1716: LD_ADDR_OWVAR 35
1720: PUSH
1721: LD_INT 1
1723: NEG
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL_OW 12
1732: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1733: LD_INT 0
1735: PPUSH
1736: LD_INT 12
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1746: CALL_OW 44
1750: PPUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// end ;
1763: GO 1682
1765: POP
1766: POP
// InitHc ;
1767: CALL_OW 19
// end ;
1771: LD_VAR 0 3
1775: RET
// export function PrepareNature ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1780: LD_INT 18
1782: PPUSH
1783: LD_INT 5
1785: PUSH
1786: LD_INT 4
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_OWVAR 67
1801: ARRAY
1802: PPUSH
1803: CALL 1639 0 2
// for i := 1 to 3 do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 3
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1856
// begin hc_class := 21 ;
1823: LD_ADDR_OWVAR 28
1827: PUSH
1828: LD_INT 21
1830: ST_TO_ADDR
// hc_gallery :=  ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING 
1838: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1839: CALL_OW 44
1843: PPUSH
1844: LD_INT 18
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 49
// end ;
1854: GO 1820
1856: POP
1857: POP
// for i := 1 to 2 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 1
1866: DEC
1867: ST_TO_ADDR
1868: LD_INT 2
1870: PUSH
1871: FOR_TO
1872: IFFALSE 1907
// begin hc_class := 18 ;
1874: LD_ADDR_OWVAR 28
1878: PUSH
1879: LD_INT 18
1881: ST_TO_ADDR
// hc_gallery :=  ;
1882: LD_ADDR_OWVAR 33
1886: PUSH
1887: LD_STRING 
1889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1890: CALL_OW 44
1894: PPUSH
1895: LD_INT 18
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// end ;
1905: GO 1871
1907: POP
1908: POP
// for i := 1 to 2 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 2
1921: PUSH
1922: FOR_TO
1923: IFFALSE 1958
// begin hc_class := 13 ;
1925: LD_ADDR_OWVAR 28
1929: PUSH
1930: LD_INT 13
1932: ST_TO_ADDR
// hc_gallery :=  ;
1933: LD_ADDR_OWVAR 33
1937: PUSH
1938: LD_STRING 
1940: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1941: CALL_OW 44
1945: PPUSH
1946: LD_INT 18
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 49
// end ;
1956: GO 1922
1958: POP
1959: POP
// end ;
1960: LD_VAR 0 1
1964: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp ; begin
1965: LD_INT 0
1967: PPUSH
1968: PPUSH
1969: PPUSH
1970: PPUSH
// result := false ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: LD_INT 0
1978: ST_TO_ADDR
// if not sideList or not enemySide then
1979: LD_VAR 0 1
1983: NOT
1984: PUSH
1985: LD_VAR 0 2
1989: NOT
1990: OR
1991: IFFALSE 1995
// exit ;
1993: GO 2136
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1995: LD_ADDR_VAR 0 7
1999: PUSH
2000: LD_INT 22
2002: PUSH
2003: LD_VAR 0 2
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: ST_TO_ADDR
// if not tmp then
2017: LD_VAR 0 7
2021: NOT
2022: IFFALSE 2026
// exit ;
2024: GO 2136
// for s in sideList do
2026: LD_ADDR_VAR 0 6
2030: PUSH
2031: LD_VAR 0 1
2035: PUSH
2036: FOR_IN
2037: IFFALSE 2134
// for i in tmp do
2039: LD_ADDR_VAR 0 5
2043: PUSH
2044: LD_VAR 0 7
2048: PUSH
2049: FOR_IN
2050: IFFALSE 2130
// if See ( s , i ) then
2052: LD_VAR 0 6
2056: PPUSH
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 292
2066: IFFALSE 2128
// begin result := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2068: LD_ADDR_VAR 0 4
2072: PUSH
2073: LD_INT 22
2075: PUSH
2076: LD_VAR 0 6
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: PPUSH
2090: LD_VAR 0 5
2094: PPUSH
2095: CALL_OW 74
2099: ST_TO_ADDR
// if exceptUnits then
2100: LD_VAR 0 3
2104: IFFALSE 2128
// if result in exceptUnits then
2106: LD_VAR 0 4
2110: PUSH
2111: LD_VAR 0 3
2115: IN
2116: IFFALSE 2122
// continue else
2118: GO 2049
2120: GO 2128
// exit ;
2122: POP
2123: POP
2124: POP
2125: POP
2126: GO 2136
// end ;
2128: GO 2049
2130: POP
2131: POP
2132: GO 2036
2134: POP
2135: POP
// end ; end_of_file
2136: LD_VAR 0 4
2140: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2141: LD_INT 0
2143: PPUSH
2144: PPUSH
// uc_side := 5 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 5
2152: ST_TO_ADDR
// uc_nation := 2 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 2
2160: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2161: LD_ADDR_EXP 36
2165: PUSH
2166: LD_STRING Abdul
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: LD_STRING 
2174: PPUSH
2175: CALL 282 0 3
2179: ST_TO_ADDR
// uc_side := 2 ;
2180: LD_ADDR_OWVAR 20
2184: PUSH
2185: LD_INT 2
2187: ST_TO_ADDR
// uc_nation := 2 ;
2188: LD_ADDR_OWVAR 21
2192: PUSH
2193: LD_INT 2
2195: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2196: LD_ADDR_EXP 25
2200: PUSH
2201: LD_STRING Heike
2203: PPUSH
2204: LD_EXP 1
2208: NOT
2209: PPUSH
2210: LD_EXP 2
2214: PPUSH
2215: CALL 282 0 3
2219: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2220: LD_ADDR_EXP 28
2224: PUSH
2225: LD_STRING Ibrahim
2227: PPUSH
2228: LD_EXP 1
2232: NOT
2233: PPUSH
2234: LD_EXP 2
2238: PPUSH
2239: CALL 282 0 3
2243: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2244: LD_ADDR_EXP 26
2248: PUSH
2249: LD_STRING Givi
2251: PPUSH
2252: LD_EXP 1
2256: NOT
2257: PPUSH
2258: LD_EXP 2
2262: PPUSH
2263: CALL 282 0 3
2267: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2268: LD_ADDR_EXP 29
2272: PUSH
2273: LD_STRING Kamil
2275: PPUSH
2276: LD_EXP 1
2280: NOT
2281: PPUSH
2282: LD_EXP 2
2286: PPUSH
2287: CALL 282 0 3
2291: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2292: LD_ADDR_EXP 30
2296: PUSH
2297: LD_STRING Kaia
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_EXP 2
2310: PPUSH
2311: CALL 282 0 3
2315: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2316: LD_ADDR_EXP 31
2320: PUSH
2321: LD_STRING Sophia
2323: PPUSH
2324: LD_EXP 1
2328: NOT
2329: PPUSH
2330: LD_EXP 2
2334: PPUSH
2335: CALL 282 0 3
2339: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2340: LD_ADDR_EXP 32
2344: PUSH
2345: LD_STRING Markov
2347: PPUSH
2348: LD_EXP 1
2352: NOT
2353: PPUSH
2354: LD_EXP 2
2358: PPUSH
2359: CALL 282 0 3
2363: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2364: LD_ADDR_EXP 35
2368: PUSH
2369: LD_STRING Aviradze
2371: PPUSH
2372: LD_EXP 1
2376: NOT
2377: PPUSH
2378: LD_EXP 2
2382: PPUSH
2383: CALL 282 0 3
2387: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2388: LD_ADDR_EXP 39
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2395: LD_ADDR_EXP 37
2399: PUSH
2400: LD_STRING 03_others
2402: PPUSH
2403: CALL_OW 31
2407: ST_TO_ADDR
// uc_side := 5 ;
2408: LD_ADDR_OWVAR 20
2412: PUSH
2413: LD_INT 5
2415: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2416: LD_ADDR_EXP 34
2420: PUSH
2421: LD_STRING Kurt
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: LD_STRING 
2429: PPUSH
2430: CALL 282 0 3
2434: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2435: LD_ADDR_EXP 27
2439: PUSH
2440: LD_STRING Mike
2442: PPUSH
2443: LD_EXP 1
2447: NOT
2448: PPUSH
2449: LD_EXP 2
2453: PPUSH
2454: CALL 282 0 3
2458: ST_TO_ADDR
// if Mike then
2459: LD_EXP 27
2463: IFFALSE 2486
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2465: LD_EXP 27
2469: PPUSH
2470: LD_INT 142
2472: PPUSH
2473: LD_INT 63
2475: PPUSH
2476: LD_INT 2
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2486: LD_EXP 34
2490: PPUSH
2491: LD_INT 142
2493: PPUSH
2494: LD_INT 63
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2507: LD_EXP 34
2511: PUSH
2512: LD_EXP 27
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PPUSH
2521: CALL_OW 140
// end ;
2525: LD_VAR 0 1
2529: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2530: LD_INT 0
2532: PPUSH
2533: PPUSH
2534: PPUSH
2535: PPUSH
// uc_side := 5 ;
2536: LD_ADDR_OWVAR 20
2540: PUSH
2541: LD_INT 5
2543: ST_TO_ADDR
// uc_nation := 2 ;
2544: LD_ADDR_OWVAR 21
2548: PUSH
2549: LD_INT 2
2551: ST_TO_ADDR
// InitHc ;
2552: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2556: LD_ADDR_EXP 33
2560: PUSH
2561: LD_STRING Omar
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: LD_STRING 
2569: PPUSH
2570: CALL 282 0 3
2574: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2575: LD_EXP 33
2579: PPUSH
2580: LD_INT 284
2582: PPUSH
2583: LD_INT 163
2585: PPUSH
2586: LD_INT 0
2588: PPUSH
2589: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2593: LD_EXP 33
2597: PPUSH
2598: LD_INT 256
2600: PPUSH
2601: LD_INT 129
2603: PPUSH
2604: CALL_OW 111
// wait ( 0 0$2 ) ;
2608: LD_INT 70
2610: PPUSH
2611: CALL_OW 67
// omarSquad := [ ] ;
2615: LD_ADDR_EXP 38
2619: PUSH
2620: EMPTY
2621: ST_TO_ADDR
// for i := 1 to 5 do
2622: LD_ADDR_VAR 0 2
2626: PUSH
2627: DOUBLE
2628: LD_INT 1
2630: DEC
2631: ST_TO_ADDR
2632: LD_INT 5
2634: PUSH
2635: FOR_TO
2636: IFFALSE 2842
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2638: LD_INT 5
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 13
2646: PUSH
2647: LD_INT 14
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_VAR 0 2
2658: PUSH
2659: LD_INT 2
2661: MOD
2662: PUSH
2663: LD_INT 1
2665: PLUS
2666: ARRAY
2667: PPUSH
2668: LD_INT 1
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: LD_INT 25
2676: PUSH
2677: LD_INT 27
2679: PUSH
2680: LD_INT 26
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PUSH
2688: LD_VAR 0 2
2692: PUSH
2693: LD_INT 3
2695: MOD
2696: PUSH
2697: LD_INT 1
2699: PLUS
2700: ARRAY
2701: PPUSH
2702: LD_INT 100
2704: PPUSH
2705: CALL 345 0 7
// veh := CreateVehicle ;
2709: LD_ADDR_VAR 0 4
2713: PUSH
2714: CALL_OW 45
2718: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2719: LD_VAR 0 4
2723: PPUSH
2724: LD_INT 5
2726: PPUSH
2727: CALL_OW 233
// omarSquad := omarSquad union veh ;
2731: LD_ADDR_EXP 38
2735: PUSH
2736: LD_EXP 38
2740: PUSH
2741: LD_VAR 0 4
2745: UNION
2746: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2747: LD_VAR 0 4
2751: PPUSH
2752: LD_INT 284
2754: PPUSH
2755: LD_INT 163
2757: PPUSH
2758: LD_INT 0
2760: PPUSH
2761: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2765: LD_INT 0
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: LD_INT 3
2773: PPUSH
2774: CALL_OW 380
// un := CreateHuman ;
2778: LD_ADDR_VAR 0 3
2782: PUSH
2783: CALL_OW 44
2787: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2788: LD_ADDR_EXP 38
2792: PUSH
2793: LD_EXP 38
2797: PUSH
2798: LD_VAR 0 3
2802: UNION
2803: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2804: LD_VAR 0 3
2808: PPUSH
2809: LD_VAR 0 4
2813: PPUSH
2814: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2818: LD_VAR 0 3
2822: PPUSH
2823: LD_INT 271
2825: PPUSH
2826: LD_INT 144
2828: PPUSH
2829: CALL_OW 111
// wait ( 0 0$2 ) ;
2833: LD_INT 70
2835: PPUSH
2836: CALL_OW 67
// end ;
2840: GO 2635
2842: POP
2843: POP
// for i := 1 to 3 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 1
2852: DEC
2853: ST_TO_ADDR
2854: LD_INT 3
2856: PUSH
2857: FOR_TO
2858: IFFALSE 2941
// begin PrepareHuman ( false , 1 , 3 ) ;
2860: LD_INT 0
2862: PPUSH
2863: LD_INT 1
2865: PPUSH
2866: LD_INT 3
2868: PPUSH
2869: CALL_OW 380
// un := CreateHuman ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 44
2882: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2883: LD_ADDR_EXP 38
2887: PUSH
2888: LD_EXP 38
2892: PUSH
2893: LD_VAR 0 3
2897: UNION
2898: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2899: LD_VAR 0 3
2903: PPUSH
2904: LD_INT 284
2906: PPUSH
2907: LD_INT 163
2909: PPUSH
2910: LD_INT 0
2912: PPUSH
2913: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 257
2924: PPUSH
2925: LD_INT 138
2927: PPUSH
2928: CALL_OW 111
// wait ( 0 0$1 ) ;
2932: LD_INT 35
2934: PPUSH
2935: CALL_OW 67
// end ;
2939: GO 2857
2941: POP
2942: POP
// for i := 1 to 6 do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_INT 6
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3090
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 1
2964: PUSH
2965: LD_INT 1
2967: PUSH
2968: LD_INT 4
2970: PUSH
2971: EMPTY
2972: LIST
2973: LIST
2974: LIST
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 3
2983: MOD
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: LD_INT 3
2992: PPUSH
2993: CALL_OW 380
// un := CreateHuman ;
2997: LD_ADDR_VAR 0 3
3001: PUSH
3002: CALL_OW 44
3006: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3007: LD_ADDR_EXP 38
3011: PUSH
3012: LD_EXP 38
3016: PUSH
3017: LD_VAR 0 3
3021: UNION
3022: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3023: LD_VAR 0 3
3027: PPUSH
3028: LD_INT 225
3030: PPUSH
3031: LD_INT 163
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// if i = 1 then
3041: LD_VAR 0 2
3045: PUSH
3046: LD_INT 1
3048: EQUAL
3049: IFFALSE 3066
// SetAttr ( un , attr_speed , 12 ) ;
3051: LD_VAR 0 3
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: LD_INT 12
3061: PPUSH
3062: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3066: LD_VAR 0 3
3070: PPUSH
3071: LD_INT 222
3073: PPUSH
3074: LD_INT 157
3076: PPUSH
3077: CALL_OW 111
// wait ( 0 0$1 ) ;
3081: LD_INT 35
3083: PPUSH
3084: CALL_OW 67
// end ;
3088: GO 2956
3090: POP
3091: POP
// end ; end_of_file
3092: LD_VAR 0 1
3096: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
3101: PPUSH
3102: PPUSH
3103: PPUSH
3104: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
3105: LD_ADDR_EXP 50
3109: PUSH
3110: LD_INT 22
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 30
3122: PUSH
3123: LD_INT 7
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 69
3138: PUSH
3139: LD_INT 1
3141: ARRAY
3142: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3143: LD_ADDR_VAR 0 2
3147: PUSH
3148: LD_INT 21
3150: PUSH
3151: LD_INT 3
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 23
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PPUSH
3172: CALL_OW 69
3176: PUSH
3177: FOR_IN
3178: IFFALSE 3194
// SetBLevel ( i , 5 ) ;
3180: LD_VAR 0 2
3184: PPUSH
3185: LD_INT 5
3187: PPUSH
3188: CALL_OW 241
3192: GO 3177
3194: POP
3195: POP
// SetBName ( kirov , kirov ) ;
3196: LD_INT 71
3198: PPUSH
3199: LD_STRING kirov
3201: PPUSH
3202: CALL_OW 500
// SetBName ( beria , beria ) ;
3206: LD_INT 106
3208: PPUSH
3209: LD_STRING beria
3211: PPUSH
3212: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3216: LD_INT 112
3218: PPUSH
3219: LD_STRING kagan
3221: PPUSH
3222: CALL_OW 500
// uc_side := 6 ;
3226: LD_ADDR_OWVAR 20
3230: PUSH
3231: LD_INT 6
3233: ST_TO_ADDR
// uc_nation := 3 ;
3234: LD_ADDR_OWVAR 21
3238: PUSH
3239: LD_INT 3
3241: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3242: LD_ADDR_VAR 0 5
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 6
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 5
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3280: LD_ADDR_VAR 0 4
3284: PUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 6
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: LD_INT 30
3297: PUSH
3298: LD_INT 4
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PPUSH
3309: CALL_OW 69
3313: PUSH
3314: LD_INT 1
3316: ARRAY
3317: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3318: LD_ADDR_EXP 44
3322: PUSH
3323: EMPTY
3324: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3325: LD_ADDR_EXP 45
3329: PUSH
3330: EMPTY
3331: ST_TO_ADDR
// russianPatrol := [ ] ;
3332: LD_ADDR_EXP 47
3336: PUSH
3337: EMPTY
3338: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3339: LD_ADDR_EXP 40
3343: PUSH
3344: LD_STRING Kurin
3346: PPUSH
3347: LD_INT 0
3349: PPUSH
3350: LD_STRING 
3352: PPUSH
3353: CALL 282 0 3
3357: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3358: LD_EXP 40
3362: PPUSH
3363: LD_INT 71
3365: PPUSH
3366: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3370: LD_ADDR_EXP 42
3374: PUSH
3375: LD_STRING Popov
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: LD_STRING 
3383: PPUSH
3384: CALL 282 0 3
3388: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3389: LD_EXP 42
3393: PPUSH
3394: LD_INT 71
3396: PPUSH
3397: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3401: LD_ADDR_EXP 41
3405: PUSH
3406: LD_STRING Grishko
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: LD_STRING 
3414: PPUSH
3415: CALL 282 0 3
3419: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3420: LD_EXP 41
3424: PPUSH
3425: LD_INT 207
3427: PPUSH
3428: LD_INT 106
3430: PPUSH
3431: LD_INT 0
3433: PPUSH
3434: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3438: LD_EXP 41
3442: PPUSH
3443: LD_INT 209
3445: PPUSH
3446: LD_INT 106
3448: PPUSH
3449: CALL_OW 118
// for i := 1 to 2 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3522
// begin PrepareHuman ( false , 2 , 2 ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 2
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: CALL_OW 380
// un := CreateHuman ;
3482: LD_ADDR_VAR 0 3
3486: PUSH
3487: CALL_OW 44
3491: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3492: LD_VAR 0 3
3496: PPUSH
3497: LD_INT 71
3499: PPUSH
3500: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3504: LD_ADDR_EXP 44
3508: PUSH
3509: LD_EXP 44
3513: PUSH
3514: LD_VAR 0 3
3518: UNION
3519: ST_TO_ADDR
// end ;
3520: GO 3466
3522: POP
3523: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: DOUBLE
3530: LD_INT 1
3532: DEC
3533: ST_TO_ADDR
3534: LD_INT 5
3536: PUSH
3537: LD_INT 6
3539: PUSH
3540: LD_INT 6
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_OWVAR 67
3552: ARRAY
3553: PUSH
3554: FOR_TO
3555: IFFALSE 3629
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3557: LD_INT 0
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
3563: LD_INT 2
3565: PUSH
3566: LD_INT 3
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_OWVAR 67
3581: ARRAY
3582: PPUSH
3583: CALL_OW 380
// un := CreateHuman ;
3587: LD_ADDR_VAR 0 3
3591: PUSH
3592: CALL_OW 44
3596: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3597: LD_VAR 0 3
3601: PPUSH
3602: LD_VAR 0 5
3606: PPUSH
3607: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3611: LD_ADDR_EXP 44
3615: PUSH
3616: LD_EXP 44
3620: PUSH
3621: LD_VAR 0 3
3625: UNION
3626: ST_TO_ADDR
// end ;
3627: GO 3554
3629: POP
3630: POP
// for i := 1 to 3 do
3631: LD_ADDR_VAR 0 2
3635: PUSH
3636: DOUBLE
3637: LD_INT 1
3639: DEC
3640: ST_TO_ADDR
3641: LD_INT 3
3643: PUSH
3644: FOR_TO
3645: IFFALSE 3700
// begin PrepareHuman ( false , 3 , 3 ) ;
3647: LD_INT 0
3649: PPUSH
3650: LD_INT 3
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: CALL_OW 380
// un := CreateHuman ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: CALL_OW 44
3669: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_INT 92
3677: PPUSH
3678: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3682: LD_ADDR_EXP 44
3686: PUSH
3687: LD_EXP 44
3691: PUSH
3692: LD_VAR 0 3
3696: UNION
3697: ST_TO_ADDR
// end ;
3698: GO 3644
3700: POP
3701: POP
// for i := 1 to 2 do
3702: LD_ADDR_VAR 0 2
3706: PUSH
3707: DOUBLE
3708: LD_INT 1
3710: DEC
3711: ST_TO_ADDR
3712: LD_INT 2
3714: PUSH
3715: FOR_TO
3716: IFFALSE 3771
// begin PrepareHuman ( false , 4 , 3 ) ;
3718: LD_INT 0
3720: PPUSH
3721: LD_INT 4
3723: PPUSH
3724: LD_INT 3
3726: PPUSH
3727: CALL_OW 380
// un := CreateHuman ;
3731: LD_ADDR_VAR 0 3
3735: PUSH
3736: CALL_OW 44
3740: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3741: LD_VAR 0 3
3745: PPUSH
3746: LD_INT 83
3748: PPUSH
3749: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3753: LD_ADDR_EXP 44
3757: PUSH
3758: LD_EXP 44
3762: PUSH
3763: LD_VAR 0 3
3767: UNION
3768: ST_TO_ADDR
// end ;
3769: GO 3715
3771: POP
3772: POP
// for i := 1 to 5 do
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_INT 5
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3844
// begin PrepareHuman ( false , 1 , 3 ) ;
3789: LD_INT 0
3791: PPUSH
3792: LD_INT 1
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 380
// un := CreateHuman ;
3802: LD_ADDR_VAR 0 3
3806: PUSH
3807: CALL_OW 44
3811: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3812: LD_VAR 0 3
3816: PPUSH
3817: LD_VAR 0 4
3821: PPUSH
3822: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3826: LD_ADDR_EXP 46
3830: PUSH
3831: LD_EXP 46
3835: PUSH
3836: LD_VAR 0 3
3840: UNION
3841: ST_TO_ADDR
// end ;
3842: GO 3786
3844: POP
3845: POP
// russianCargo := [ ] ;
3846: LD_ADDR_EXP 49
3850: PUSH
3851: EMPTY
3852: ST_TO_ADDR
// for i := 1 to 2 do
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: DOUBLE
3859: LD_INT 1
3861: DEC
3862: ST_TO_ADDR
3863: LD_INT 2
3865: PUSH
3866: FOR_TO
3867: IFFALSE 3999
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3869: LD_INT 6
3871: PPUSH
3872: LD_INT 3
3874: PPUSH
3875: LD_INT 21
3877: PPUSH
3878: LD_INT 1
3880: PPUSH
3881: LD_INT 1
3883: PPUSH
3884: LD_INT 51
3886: PPUSH
3887: LD_INT 100
3889: PPUSH
3890: CALL 345 0 7
// un := CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3904: LD_ADDR_EXP 49
3908: PUSH
3909: LD_EXP 49
3913: PUSH
3914: LD_VAR 0 3
3918: UNION
3919: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_INT 2
3927: PPUSH
3928: LD_INT 100
3930: PPUSH
3931: CALL_OW 290
// SetDir ( un , 4 ) ;
3935: LD_VAR 0 3
3939: PPUSH
3940: LD_INT 4
3942: PPUSH
3943: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3947: LD_VAR 0 3
3951: PPUSH
3952: LD_INT 147
3954: PPUSH
3955: LD_INT 103
3957: PPUSH
3958: LD_INT 4
3960: PPUSH
3961: LD_INT 0
3963: PPUSH
3964: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 1
3973: PPUSH
3974: LD_OWVAR 67
3978: PPUSH
3979: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3983: CALL_OW 44
3987: PPUSH
3988: LD_VAR 0 3
3992: PPUSH
3993: CALL_OW 52
// end ;
3997: GO 3866
3999: POP
4000: POP
// uc_side := 3 ;
4001: LD_ADDR_OWVAR 20
4005: PUSH
4006: LD_INT 3
4008: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4009: LD_ADDR_EXP 43
4013: PUSH
4014: LD_STRING Burlak
4016: PPUSH
4017: LD_INT 0
4019: PPUSH
4020: LD_STRING 
4022: PPUSH
4023: CALL 282 0 3
4027: ST_TO_ADDR
// for i := 1 to 2 do
4028: LD_ADDR_VAR 0 2
4032: PUSH
4033: DOUBLE
4034: LD_INT 1
4036: DEC
4037: ST_TO_ADDR
4038: LD_INT 2
4040: PUSH
4041: FOR_TO
4042: IFFALSE 4135
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4044: LD_INT 0
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: LD_OWVAR 67
4054: PUSH
4055: LD_INT 1
4057: PLUS
4058: PPUSH
4059: CALL_OW 380
// un := CreateHuman ;
4063: LD_ADDR_VAR 0 3
4067: PUSH
4068: CALL_OW 44
4072: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_INT 22
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 32
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_VAR 0 2
4111: ARRAY
4112: PPUSH
4113: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4117: LD_ADDR_EXP 45
4121: PUSH
4122: LD_EXP 45
4126: PUSH
4127: LD_VAR 0 3
4131: UNION
4132: ST_TO_ADDR
// end ;
4133: GO 4041
4135: POP
4136: POP
// for i := 1 to 2 do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: DOUBLE
4143: LD_INT 1
4145: DEC
4146: ST_TO_ADDR
4147: LD_INT 2
4149: PUSH
4150: FOR_TO
4151: IFFALSE 4242
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4153: LD_INT 0
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: LD_OWVAR 67
4163: PUSH
4164: LD_INT 1
4166: PLUS
4167: PPUSH
4168: CALL_OW 380
// un := CreateHuman ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: CALL_OW 44
4181: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4182: LD_VAR 0 3
4186: PPUSH
4187: LD_INT 22
4189: PUSH
4190: LD_INT 3
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: LD_INT 30
4199: PUSH
4200: LD_INT 5
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PPUSH
4211: CALL_OW 69
4215: PUSH
4216: LD_INT 1
4218: ARRAY
4219: PPUSH
4220: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4224: LD_ADDR_EXP 45
4228: PUSH
4229: LD_EXP 45
4233: PUSH
4234: LD_VAR 0 3
4238: UNION
4239: ST_TO_ADDR
// end ;
4240: GO 4150
4242: POP
4243: POP
// for i := 1 to 2 do
4244: LD_ADDR_VAR 0 2
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 2
4256: PUSH
4257: FOR_TO
4258: IFFALSE 4345
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4260: LD_INT 0
4262: PPUSH
4263: LD_INT 4
4265: PPUSH
4266: LD_OWVAR 67
4270: PPUSH
4271: CALL_OW 380
// un := CreateHuman ;
4275: LD_ADDR_VAR 0 3
4279: PUSH
4280: CALL_OW 44
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 22
4292: PUSH
4293: LD_INT 3
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 30
4302: PUSH
4303: LD_INT 7
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 69
4318: PUSH
4319: LD_INT 1
4321: ARRAY
4322: PPUSH
4323: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4327: LD_ADDR_EXP 45
4331: PUSH
4332: LD_EXP 45
4336: PUSH
4337: LD_VAR 0 3
4341: UNION
4342: ST_TO_ADDR
// end ;
4343: GO 4257
4345: POP
4346: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4347: LD_INT 0
4349: PPUSH
4350: LD_INT 2
4352: PPUSH
4353: LD_OWVAR 67
4357: PPUSH
4358: CALL_OW 380
// un := CreateHuman ;
4362: LD_ADDR_VAR 0 3
4366: PUSH
4367: CALL_OW 44
4371: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4372: LD_VAR 0 3
4376: PPUSH
4377: LD_INT 106
4379: PPUSH
4380: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4384: LD_ADDR_EXP 45
4388: PUSH
4389: LD_EXP 45
4393: PUSH
4394: LD_VAR 0 3
4398: UNION
4399: ST_TO_ADDR
// for i := 1 to 3 do
4400: LD_ADDR_VAR 0 2
4404: PUSH
4405: DOUBLE
4406: LD_INT 1
4408: DEC
4409: ST_TO_ADDR
4410: LD_INT 3
4412: PUSH
4413: FOR_TO
4414: IFFALSE 4536
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4416: LD_ADDR_VAR 0 6
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_VAR 0 2
4454: ARRAY
4455: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4456: LD_INT 0
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: LD_OWVAR 67
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4481: LD_VAR 0 3
4485: PPUSH
4486: LD_VAR 0 6
4490: PPUSH
4491: CALL_OW 254
4495: PUSH
4496: LD_INT 3
4498: PLUS
4499: PPUSH
4500: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4504: LD_VAR 0 3
4508: PPUSH
4509: LD_VAR 0 6
4513: PPUSH
4514: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4518: LD_ADDR_EXP 45
4522: PUSH
4523: LD_EXP 45
4527: PUSH
4528: LD_VAR 0 3
4532: UNION
4533: ST_TO_ADDR
// end ;
4534: GO 4413
4536: POP
4537: POP
// russianOmicronAttackers := [ ] ;
4538: LD_ADDR_EXP 48
4542: PUSH
4543: EMPTY
4544: ST_TO_ADDR
// for i := 1 to 6 do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 6
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4783
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4561: LD_INT 3
4563: PPUSH
4564: LD_INT 3
4566: PPUSH
4567: LD_INT 21
4569: PUSH
4570: LD_INT 23
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 2
4584: MOD
4585: PUSH
4586: LD_INT 1
4588: PLUS
4589: ARRAY
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: LD_INT 43
4599: PUSH
4600: LD_INT 44
4602: PUSH
4603: LD_INT 42
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: LD_VAR 0 2
4615: PUSH
4616: LD_INT 3
4618: MOD
4619: PUSH
4620: LD_INT 1
4622: PLUS
4623: ARRAY
4624: PPUSH
4625: LD_INT 100
4627: PPUSH
4628: CALL 345 0 7
// un := CreateVehicle ;
4632: LD_ADDR_VAR 0 3
4636: PUSH
4637: CALL_OW 45
4641: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: LD_INT 0
4649: PUSH
4650: LD_INT 5
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 1
4659: PPUSH
4660: LD_INT 2
4662: PPUSH
4663: CALL_OW 12
4667: ARRAY
4668: PPUSH
4669: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4673: LD_ADDR_EXP 48
4677: PUSH
4678: LD_EXP 48
4682: PUSH
4683: LD_VAR 0 3
4687: UNION
4688: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4689: LD_VAR 0 3
4693: PPUSH
4694: LD_INT 127
4696: PPUSH
4697: LD_INT 89
4699: PPUSH
4700: LD_INT 7
4702: PPUSH
4703: LD_INT 0
4705: PPUSH
4706: CALL_OW 50
// uc_side := 3 ;
4710: LD_ADDR_OWVAR 20
4714: PUSH
4715: LD_INT 3
4717: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 3
4723: PPUSH
4724: LD_INT 3
4726: PPUSH
4727: CALL_OW 380
// un := CreateHuman ;
4731: LD_ADDR_VAR 0 3
4735: PUSH
4736: CALL_OW 44
4740: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4741: LD_ADDR_EXP 48
4745: PUSH
4746: LD_EXP 48
4750: PUSH
4751: LD_VAR 0 3
4755: UNION
4756: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_EXP 48
4766: PUSH
4767: LD_EXP 48
4771: PUSH
4772: LD_INT 1
4774: MINUS
4775: ARRAY
4776: PPUSH
4777: CALL_OW 52
// end ;
4781: GO 4558
4783: POP
4784: POP
// for i := 1 to 3 do
4785: LD_ADDR_VAR 0 2
4789: PUSH
4790: DOUBLE
4791: LD_INT 1
4793: DEC
4794: ST_TO_ADDR
4795: LD_INT 3
4797: PUSH
4798: FOR_TO
4799: IFFALSE 4865
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4801: LD_INT 0
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: LD_OWVAR 67
4811: PPUSH
4812: CALL_OW 380
// un := CreateHuman ;
4816: LD_ADDR_VAR 0 3
4820: PUSH
4821: CALL_OW 44
4825: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4826: LD_ADDR_EXP 48
4830: PUSH
4831: LD_EXP 48
4835: PUSH
4836: LD_VAR 0 3
4840: UNION
4841: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 91
4849: PPUSH
4850: LD_INT 60
4852: PPUSH
4853: LD_INT 3
4855: PPUSH
4856: LD_INT 0
4858: PPUSH
4859: CALL_OW 50
// end ;
4863: GO 4798
4865: POP
4866: POP
// end ;
4867: LD_VAR 0 1
4871: RET
// every 0 0$3 do var i ;
4872: GO 4874
4874: DISABLE
4875: LD_INT 0
4877: PPUSH
// begin for i := 1 to 4 do
4878: LD_ADDR_VAR 0 1
4882: PUSH
4883: DOUBLE
4884: LD_INT 1
4886: DEC
4887: ST_TO_ADDR
4888: LD_INT 4
4890: PUSH
4891: FOR_TO
4892: IFFALSE 4911
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4894: LD_EXP 46
4898: PUSH
4899: LD_VAR 0 1
4903: ARRAY
4904: PPUSH
4905: CALL_OW 122
4909: GO 4891
4911: POP
4912: POP
// wait ( 3 ) ;
4913: LD_INT 3
4915: PPUSH
4916: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4920: LD_EXP 46
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: LD_INT 22
4931: PUSH
4932: LD_INT 6
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 31
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 69
4957: PPUSH
4958: LD_EXP 46
4962: PUSH
4963: LD_INT 1
4965: ARRAY
4966: PPUSH
4967: CALL_OW 74
4971: PPUSH
4972: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4976: LD_EXP 46
4980: PUSH
4981: LD_INT 2
4983: ARRAY
4984: PPUSH
4985: LD_INT 211
4987: PPUSH
4988: LD_INT 107
4990: PPUSH
4991: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4995: LD_EXP 46
4999: PUSH
5000: LD_INT 2
5002: ARRAY
5003: PPUSH
5004: LD_INT 209
5006: PPUSH
5007: LD_INT 106
5009: PPUSH
5010: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5014: LD_EXP 46
5018: PUSH
5019: LD_INT 3
5021: ARRAY
5022: PPUSH
5023: LD_INT 209
5025: PPUSH
5026: LD_INT 103
5028: PPUSH
5029: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5033: LD_EXP 46
5037: PUSH
5038: LD_INT 3
5040: ARRAY
5041: PPUSH
5042: LD_INT 209
5044: PPUSH
5045: LD_INT 106
5047: PPUSH
5048: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5052: LD_EXP 46
5056: PUSH
5057: LD_INT 4
5059: ARRAY
5060: PPUSH
5061: LD_INT 227
5063: PPUSH
5064: LD_INT 117
5066: PPUSH
5067: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5071: LD_EXP 46
5075: PUSH
5076: LD_INT 4
5078: ARRAY
5079: PPUSH
5080: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5084: LD_INT 700
5086: PPUSH
5087: CALL_OW 67
// for i := 3 downto 2 do
5091: LD_ADDR_VAR 0 1
5095: PUSH
5096: DOUBLE
5097: LD_INT 3
5099: INC
5100: ST_TO_ADDR
5101: LD_INT 2
5103: PUSH
5104: FOR_DOWNTO
5105: IFFALSE 5272
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5107: LD_EXP 46
5111: PUSH
5112: LD_VAR 0 1
5116: ARRAY
5117: PPUSH
5118: LD_INT 200
5120: PPUSH
5121: LD_INT 91
5123: PPUSH
5124: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5128: LD_EXP 46
5132: PUSH
5133: LD_VAR 0 1
5137: ARRAY
5138: PPUSH
5139: LD_INT 210
5141: PPUSH
5142: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5146: LD_EXP 46
5150: PUSH
5151: LD_VAR 0 1
5155: ARRAY
5156: PPUSH
5157: LD_INT 224
5159: PPUSH
5160: LD_INT 93
5162: PPUSH
5163: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5167: LD_EXP 46
5171: PUSH
5172: LD_VAR 0 1
5176: ARRAY
5177: PPUSH
5178: LD_INT 210
5180: PPUSH
5181: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5185: LD_EXP 46
5189: PUSH
5190: LD_VAR 0 1
5194: ARRAY
5195: PPUSH
5196: LD_INT 239
5198: PPUSH
5199: LD_INT 123
5201: PPUSH
5202: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5206: LD_EXP 46
5210: PUSH
5211: LD_VAR 0 1
5215: ARRAY
5216: PPUSH
5217: LD_INT 210
5219: PPUSH
5220: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5224: LD_EXP 46
5228: PUSH
5229: LD_VAR 0 1
5233: ARRAY
5234: PPUSH
5235: LD_INT 212
5237: PPUSH
5238: LD_INT 105
5240: PPUSH
5241: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5245: LD_EXP 46
5249: PUSH
5250: LD_VAR 0 1
5254: ARRAY
5255: PPUSH
5256: LD_INT 700
5258: PPUSH
5259: CALL_OW 202
// wait ( 0 0$30 ) ;
5263: LD_INT 1050
5265: PPUSH
5266: CALL_OW 67
// end ;
5270: GO 5104
5272: POP
5273: POP
// until not activeGrishkoAI ;
5274: LD_EXP 10
5278: NOT
5279: IFFALSE 5084
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5281: LD_EXP 46
5285: PPUSH
5286: LD_INT 221
5288: PPUSH
5289: LD_INT 110
5291: PPUSH
5292: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5296: LD_EXP 46
5300: PPUSH
5301: LD_INT 228
5303: PPUSH
5304: LD_INT 115
5306: PPUSH
5307: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5311: LD_EXP 46
5315: PPUSH
5316: CALL_OW 200
// end ;
5320: PPOPN 1
5322: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5323: LD_EXP 12
5327: IFFALSE 5926
5329: GO 5331
5331: DISABLE
5332: LD_INT 0
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
// begin uc_side := 6 ;
5338: LD_ADDR_OWVAR 20
5342: PUSH
5343: LD_INT 6
5345: ST_TO_ADDR
// uc_nation := 3 ;
5346: LD_ADDR_OWVAR 21
5350: PUSH
5351: LD_INT 3
5353: ST_TO_ADDR
// for i := 1 to 3 do
5354: LD_ADDR_VAR 0 2
5358: PUSH
5359: DOUBLE
5360: LD_INT 1
5362: DEC
5363: ST_TO_ADDR
5364: LD_INT 3
5366: PUSH
5367: FOR_TO
5368: IFFALSE 5477
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5370: LD_INT 0
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_INT 2
5378: PUSH
5379: LD_INT 3
5381: PUSH
5382: LD_INT 4
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: PUSH
5390: LD_OWVAR 67
5394: ARRAY
5395: PPUSH
5396: CALL_OW 380
// un := CreateHuman ;
5400: LD_ADDR_VAR 0 1
5404: PUSH
5405: CALL_OW 44
5409: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5410: LD_ADDR_EXP 47
5414: PUSH
5415: LD_EXP 47
5419: PUSH
5420: LD_VAR 0 1
5424: UNION
5425: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5426: LD_VAR 0 1
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5438: LD_VAR 0 1
5442: PPUSH
5443: LD_INT 11
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5453: LD_VAR 0 1
5457: PPUSH
5458: LD_INT 210
5460: PPUSH
5461: LD_INT 159
5463: PPUSH
5464: CALL_OW 111
// wait ( 0 0$2 ) ;
5468: LD_INT 70
5470: PPUSH
5471: CALL_OW 67
// end ;
5475: GO 5367
5477: POP
5478: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: LD_INT 172
5486: PUSH
5487: LD_INT 76
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 150
5496: PUSH
5497: LD_INT 38
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 148
5506: PUSH
5507: LD_INT 9
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 165
5516: PUSH
5517: LD_INT 38
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 191
5532: PUSH
5533: LD_INT 77
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: LD_INT 168
5542: PUSH
5543: LD_INT 42
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PUSH
5550: LD_INT 166
5552: PUSH
5553: LD_INT 11
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 151
5562: PUSH
5563: LD_INT 12
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 221
5578: PUSH
5579: LD_INT 88
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 217
5588: PUSH
5589: LD_INT 64
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: LD_INT 232
5598: PUSH
5599: LD_INT 66
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 200
5608: PUSH
5609: LD_INT 56
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5627: LD_INT 35
5629: PPUSH
5630: CALL_OW 67
// for i := 1 to patrol do
5634: LD_ADDR_VAR 0 2
5638: PUSH
5639: DOUBLE
5640: LD_INT 1
5642: DEC
5643: ST_TO_ADDR
5644: LD_VAR 0 4
5648: PUSH
5649: FOR_TO
5650: IFFALSE 5890
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5652: LD_EXP 47
5656: PUSH
5657: LD_VAR 0 2
5661: ARRAY
5662: PPUSH
5663: CALL_OW 256
5667: PUSH
5668: LD_INT 990
5670: LESS
5671: PUSH
5672: LD_EXP 47
5676: PUSH
5677: LD_VAR 0 2
5681: ARRAY
5682: PPUSH
5683: CALL_OW 110
5687: PUSH
5688: LD_INT 1
5690: EQUAL
5691: AND
5692: IFFALSE 5712
// SetTag ( russianPatrol [ i ] , 2 ) ;
5694: LD_EXP 47
5698: PUSH
5699: LD_VAR 0 2
5703: ARRAY
5704: PPUSH
5705: LD_INT 2
5707: PPUSH
5708: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5712: LD_EXP 47
5716: PUSH
5717: LD_VAR 0 2
5721: ARRAY
5722: PPUSH
5723: CALL_OW 110
5727: PUSH
5728: LD_INT 2
5730: EQUAL
5731: IFFALSE 5788
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5733: LD_EXP 47
5737: PUSH
5738: LD_VAR 0 2
5742: ARRAY
5743: PPUSH
5744: LD_INT 166
5746: PPUSH
5747: LD_INT 101
5749: PPUSH
5750: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5754: LD_EXP 47
5758: PUSH
5759: LD_VAR 0 2
5763: ARRAY
5764: PPUSH
5765: LD_INT 71
5767: PPUSH
5768: CALL_OW 296
5772: PUSH
5773: LD_INT 10
5775: LESS
5776: IFFALSE 5786
// begin spottedByPatrol := true ;
5778: LD_ADDR_EXP 7
5782: PUSH
5783: LD_INT 1
5785: ST_TO_ADDR
// end ; continue ;
5786: GO 5649
// end ; if not HasTask ( russianPatrol [ i ] ) then
5788: LD_EXP 47
5792: PUSH
5793: LD_VAR 0 2
5797: ARRAY
5798: PPUSH
5799: CALL_OW 314
5803: NOT
5804: IFFALSE 5888
// for j in patrol [ i ] do
5806: LD_ADDR_VAR 0 3
5810: PUSH
5811: LD_VAR 0 4
5815: PUSH
5816: LD_VAR 0 2
5820: ARRAY
5821: PUSH
5822: FOR_IN
5823: IFFALSE 5886
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5825: LD_EXP 47
5829: PUSH
5830: LD_VAR 0 2
5834: ARRAY
5835: PPUSH
5836: LD_INT 35
5838: PPUSH
5839: LD_INT 175
5841: PPUSH
5842: CALL_OW 12
5846: PPUSH
5847: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5851: LD_EXP 47
5855: PUSH
5856: LD_VAR 0 2
5860: ARRAY
5861: PPUSH
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: PPUSH
5871: LD_VAR 0 3
5875: PUSH
5876: LD_INT 2
5878: ARRAY
5879: PPUSH
5880: CALL_OW 174
// end ;
5884: GO 5822
5886: POP
5887: POP
// end ;
5888: GO 5649
5890: POP
5891: POP
// until not russianPatrol or russianAlert ;
5892: LD_EXP 47
5896: NOT
5897: PUSH
5898: LD_EXP 9
5902: OR
5903: IFFALSE 5627
// if russianPatrol then
5905: LD_EXP 47
5909: IFFALSE 5926
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5911: LD_EXP 47
5915: PPUSH
5916: LD_INT 161
5918: PPUSH
5919: LD_INT 107
5921: PPUSH
5922: CALL_OW 114
// end ;
5926: PPOPN 4
5928: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5929: LD_EXP 6
5933: PUSH
5934: LD_EXP 13
5938: NOT
5939: AND
5940: IFFALSE 6426
5942: GO 5944
5944: DISABLE
5945: LD_INT 0
5947: PPUSH
5948: PPUSH
5949: PPUSH
5950: PPUSH
5951: PPUSH
// begin enable ;
5952: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5953: LD_ADDR_VAR 0 2
5957: PUSH
5958: LD_EXP 48
5962: PPUSH
5963: LD_INT 21
5965: PUSH
5966: LD_INT 2
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PPUSH
5973: CALL_OW 72
5977: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5978: LD_ADDR_VAR 0 4
5982: PUSH
5983: LD_INT 22
5985: PUSH
5986: LD_INT 4
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PPUSH
5993: CALL_OW 69
5997: ST_TO_ADDR
// for i in filter do
5998: LD_ADDR_VAR 0 1
6002: PUSH
6003: LD_VAR 0 2
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6424
// begin tmp := IsDrivenBy ( i ) ;
6011: LD_ADDR_VAR 0 3
6015: PUSH
6016: LD_VAR 0 1
6020: PPUSH
6021: CALL_OW 311
6025: ST_TO_ADDR
// if not tmp then
6026: LD_VAR 0 3
6030: NOT
6031: IFFALSE 6035
// continue ;
6033: GO 6008
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6035: LD_VAR 0 1
6039: PPUSH
6040: CALL_OW 261
6044: PUSH
6045: LD_INT 90
6047: GREATER
6048: PUSH
6049: LD_VAR 0 1
6053: PPUSH
6054: CALL_OW 110
6058: PUSH
6059: LD_INT 2
6061: EQUAL
6062: AND
6063: IFFALSE 6079
// SetTag ( i , 0 ) else
6065: LD_VAR 0 1
6069: PPUSH
6070: LD_INT 0
6072: PPUSH
6073: CALL_OW 109
6077: GO 6175
// if GetTag ( i ) = 2 then
6079: LD_VAR 0 1
6083: PPUSH
6084: CALL_OW 110
6088: PUSH
6089: LD_INT 2
6091: EQUAL
6092: IFFALSE 6175
// begin x := rand ( 1 , 2 ) ;
6094: LD_ADDR_VAR 0 5
6098: PUSH
6099: LD_INT 1
6101: PPUSH
6102: LD_INT 2
6104: PPUSH
6105: CALL_OW 12
6109: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6110: LD_VAR 0 1
6114: PPUSH
6115: LD_EXP 49
6119: PUSH
6120: LD_VAR 0 5
6124: ARRAY
6125: PPUSH
6126: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
6130: LD_EXP 49
6134: PUSH
6135: LD_VAR 0 5
6139: ARRAY
6140: PPUSH
6141: LD_INT 2
6143: PPUSH
6144: CALL_OW 289
6148: PUSH
6149: LD_INT 20
6151: LESS
6152: IFFALSE 6175
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
6154: LD_EXP 49
6158: PUSH
6159: LD_VAR 0 5
6163: ARRAY
6164: PPUSH
6165: LD_INT 2
6167: PPUSH
6168: LD_INT 100
6170: PPUSH
6171: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 256
6184: PUSH
6185: LD_INT 600
6187: GREATEREQUAL
6188: PUSH
6189: LD_VAR 0 1
6193: PPUSH
6194: CALL_OW 110
6198: NOT
6199: AND
6200: IFFALSE 6226
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6202: LD_VAR 0 1
6206: PPUSH
6207: LD_VAR 0 4
6211: PPUSH
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 74
6221: PPUSH
6222: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6226: LD_VAR 0 1
6230: PPUSH
6231: CALL_OW 256
6235: PUSH
6236: LD_INT 600
6238: LESS
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 110
6249: NOT
6250: AND
6251: IFFALSE 6280
// begin SetTag ( i , 1 ) ;
6253: LD_VAR 0 1
6257: PPUSH
6258: LD_INT 1
6260: PPUSH
6261: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 62
6272: PPUSH
6273: LD_INT 22
6275: PPUSH
6276: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 110
6289: PUSH
6290: LD_INT 1
6292: EQUAL
6293: PUSH
6294: LD_VAR 0 1
6298: PPUSH
6299: LD_INT 62
6301: PPUSH
6302: LD_INT 22
6304: PPUSH
6305: CALL_OW 297
6309: PUSH
6310: LD_INT 6
6312: LESS
6313: AND
6314: PUSH
6315: LD_VAR 0 3
6319: AND
6320: IFFALSE 6422
// begin ComExitVehicle ( tmp ) ;
6322: LD_VAR 0 3
6326: PPUSH
6327: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6331: LD_VAR 0 3
6335: PPUSH
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6345: LD_INT 35
6347: PPUSH
6348: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6352: LD_VAR 0 1
6356: PPUSH
6357: CALL_OW 256
6361: PUSH
6362: LD_INT 1000
6364: EQUAL
6365: IFFALSE 6345
// ComEnterUnit ( tmp , i ) ;
6367: LD_VAR 0 3
6371: PPUSH
6372: LD_VAR 0 1
6376: PPUSH
6377: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6381: LD_VAR 0 1
6385: PPUSH
6386: CALL_OW 261
6390: PUSH
6391: LD_INT 90
6393: LESSEQUAL
6394: IFFALSE 6410
// SetTag ( i , 2 ) else
6396: LD_VAR 0 1
6400: PPUSH
6401: LD_INT 2
6403: PPUSH
6404: CALL_OW 109
6408: GO 6422
// SetTag ( i , 0 ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_INT 0
6417: PPUSH
6418: CALL_OW 109
// end ; end ;
6422: GO 6008
6424: POP
6425: POP
// end ;
6426: PPOPN 5
6428: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6429: LD_EXP 20
6433: IFFALSE 6635
6435: GO 6437
6437: DISABLE
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6442: LD_EXP 49
6446: PPUSH
6447: LD_INT 79
6449: PPUSH
6450: LD_INT 155
6452: PPUSH
6453: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6457: LD_EXP 49
6461: PPUSH
6462: LD_INT 16
6464: PPUSH
6465: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: LD_EXP 48
6478: PPUSH
6479: LD_INT 50
6481: PUSH
6482: EMPTY
6483: LIST
6484: PPUSH
6485: CALL_OW 72
6489: ST_TO_ADDR
// for i in tmp do
6490: LD_ADDR_VAR 0 1
6494: PUSH
6495: LD_VAR 0 2
6499: PUSH
6500: FOR_IN
6501: IFFALSE 6535
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6503: LD_VAR 0 1
6507: PPUSH
6508: LD_INT 123
6510: PPUSH
6511: LD_INT 60
6513: PPUSH
6514: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6518: LD_VAR 0 1
6522: PPUSH
6523: LD_INT 153
6525: PPUSH
6526: LD_INT 103
6528: PPUSH
6529: CALL_OW 174
// end ;
6533: GO 6500
6535: POP
6536: POP
// repeat wait ( 0 0$1 ) ;
6537: LD_INT 35
6539: PPUSH
6540: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6544: LD_ADDR_VAR 0 2
6548: PUSH
6549: LD_EXP 48
6553: PPUSH
6554: LD_INT 50
6556: PUSH
6557: EMPTY
6558: LIST
6559: PPUSH
6560: CALL_OW 72
6564: ST_TO_ADDR
// for i in tmp do
6565: LD_ADDR_VAR 0 1
6569: PUSH
6570: LD_VAR 0 2
6574: PUSH
6575: FOR_IN
6576: IFFALSE 6626
// if not HasTask ( i ) then
6578: LD_VAR 0 1
6582: PPUSH
6583: CALL_OW 314
6587: NOT
6588: IFFALSE 6624
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6590: LD_VAR 0 1
6594: PPUSH
6595: LD_INT 81
6597: PUSH
6598: LD_INT 3
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PPUSH
6605: CALL_OW 69
6609: PPUSH
6610: LD_VAR 0 1
6614: PPUSH
6615: CALL_OW 74
6619: PPUSH
6620: CALL_OW 115
6624: GO 6575
6626: POP
6627: POP
6628: LD_VAR 0 2
6632: NOT
6633: IFFALSE 6537
// end ;
6635: PPOPN 2
6637: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6638: LD_INT 22
6640: PUSH
6641: LD_INT 3
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 32
6650: PUSH
6651: LD_INT 1
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: IFFALSE 6745
6668: GO 6670
6670: DISABLE
6671: LD_INT 0
6673: PPUSH
// begin enable ;
6674: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6675: LD_ADDR_VAR 0 1
6679: PUSH
6680: LD_INT 22
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 32
6692: PUSH
6693: LD_INT 1
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: PUSH
6709: FOR_IN
6710: IFFALSE 6743
// if GetFuel ( i ) < 1 then
6712: LD_VAR 0 1
6716: PPUSH
6717: CALL_OW 261
6721: PUSH
6722: LD_INT 1
6724: LESS
6725: IFFALSE 6741
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 311
6736: PPUSH
6737: CALL_OW 121
6741: GO 6709
6743: POP
6744: POP
// end ; end_of_file
6745: PPOPN 1
6747: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
6752: PPUSH
// SetBName ( omikron , omikron ) ;
6753: LD_INT 64
6755: PPUSH
6756: LD_STRING omikron
6758: PPUSH
6759: CALL_OW 500
// uc_side := 4 ;
6763: LD_ADDR_OWVAR 20
6767: PUSH
6768: LD_INT 4
6770: ST_TO_ADDR
// uc_nation := 1 ;
6771: LD_ADDR_OWVAR 21
6775: PUSH
6776: LD_INT 1
6778: ST_TO_ADDR
// omicronSquad := [ ] ;
6779: LD_ADDR_EXP 51
6783: PUSH
6784: EMPTY
6785: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6786: LD_ADDR_VAR 0 2
6790: PUSH
6791: LD_INT 22
6793: PUSH
6794: LD_INT 4
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 2
6803: PUSH
6804: LD_INT 30
6806: PUSH
6807: LD_INT 32
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 30
6816: PUSH
6817: LD_INT 31
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PUSH
6838: FOR_IN
6839: IFFALSE 6896
// begin PrepareHuman ( false , 1 , 1 ) ;
6841: LD_INT 0
6843: PPUSH
6844: LD_INT 1
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: CALL_OW 380
// un := CreateHuman ;
6854: LD_ADDR_VAR 0 3
6858: PUSH
6859: CALL_OW 44
6863: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6864: LD_ADDR_EXP 51
6868: PUSH
6869: LD_EXP 51
6873: PUSH
6874: LD_VAR 0 3
6878: UNION
6879: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6880: LD_VAR 0 3
6884: PPUSH
6885: LD_VAR 0 2
6889: PPUSH
6890: CALL_OW 52
// end ;
6894: GO 6838
6896: POP
6897: POP
// for i := 1 to 3 do
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: DOUBLE
6904: LD_INT 1
6906: DEC
6907: ST_TO_ADDR
6908: LD_INT 3
6910: PUSH
6911: FOR_TO
6912: IFFALSE 6967
// begin PrepareHuman ( false , 2 , 2 ) ;
6914: LD_INT 0
6916: PPUSH
6917: LD_INT 2
6919: PPUSH
6920: LD_INT 2
6922: PPUSH
6923: CALL_OW 380
// un := CreateHuman ;
6927: LD_ADDR_VAR 0 3
6931: PUSH
6932: CALL_OW 44
6936: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6937: LD_ADDR_EXP 51
6941: PUSH
6942: LD_EXP 51
6946: PUSH
6947: LD_VAR 0 3
6951: UNION
6952: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6953: LD_VAR 0 3
6957: PPUSH
6958: LD_INT 64
6960: PPUSH
6961: CALL_OW 52
// end ;
6965: GO 6911
6967: POP
6968: POP
// for i := 1 to 2 do
6969: LD_ADDR_VAR 0 2
6973: PUSH
6974: DOUBLE
6975: LD_INT 1
6977: DEC
6978: ST_TO_ADDR
6979: LD_INT 2
6981: PUSH
6982: FOR_TO
6983: IFFALSE 7122
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6985: LD_INT 4
6987: PPUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: LD_INT 2
6996: PPUSH
6997: LD_INT 1
6999: PPUSH
7000: LD_INT 3
7002: PPUSH
7003: LD_INT 100
7005: PPUSH
7006: CALL 345 0 7
// un := CreateVehicle ;
7010: LD_ADDR_VAR 0 3
7014: PUSH
7015: CALL_OW 45
7019: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7020: LD_ADDR_EXP 51
7024: PUSH
7025: LD_EXP 51
7029: PUSH
7030: LD_VAR 0 3
7034: UNION
7035: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7036: LD_VAR 0 3
7040: PPUSH
7041: LD_INT 28
7043: PPUSH
7044: LD_INT 37
7046: PPUSH
7047: LD_INT 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7057: LD_INT 0
7059: PPUSH
7060: LD_INT 3
7062: PPUSH
7063: LD_INT 2
7065: PPUSH
7066: CALL_OW 380
// un := CreateHuman ;
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: CALL_OW 44
7079: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7080: LD_ADDR_EXP 51
7084: PUSH
7085: LD_EXP 51
7089: PUSH
7090: LD_VAR 0 3
7094: UNION
7095: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7096: LD_VAR 0 3
7100: PPUSH
7101: LD_EXP 51
7105: PUSH
7106: LD_EXP 51
7110: PUSH
7111: LD_INT 1
7113: MINUS
7114: ARRAY
7115: PPUSH
7116: CALL_OW 52
// end ;
7120: GO 6982
7122: POP
7123: POP
// end ;
7124: LD_VAR 0 1
7128: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
// uc_side := 4 ;
7135: LD_ADDR_OWVAR 20
7139: PUSH
7140: LD_INT 4
7142: ST_TO_ADDR
// uc_nation := 1 ;
7143: LD_ADDR_OWVAR 21
7147: PUSH
7148: LD_INT 1
7150: ST_TO_ADDR
// tmp := [ ] ;
7151: LD_ADDR_VAR 0 4
7155: PUSH
7156: EMPTY
7157: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7158: LD_INT 4
7160: PPUSH
7161: LD_INT 1
7163: PPUSH
7164: LD_INT 2
7166: PPUSH
7167: LD_INT 1
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: LD_INT 4
7175: PPUSH
7176: LD_INT 77
7178: PPUSH
7179: CALL 345 0 7
// un := CreateVehicle ;
7183: LD_ADDR_VAR 0 3
7187: PUSH
7188: CALL_OW 45
7192: ST_TO_ADDR
// tmp := tmp union un ;
7193: LD_ADDR_VAR 0 4
7197: PUSH
7198: LD_VAR 0 4
7202: PUSH
7203: LD_VAR 0 3
7207: UNION
7208: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7209: LD_VAR 0 3
7213: PPUSH
7214: LD_INT 2
7216: PPUSH
7217: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 106
7228: PPUSH
7229: LD_INT 3
7231: PPUSH
7232: LD_INT 0
7234: PPUSH
7235: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7239: LD_INT 0
7241: PPUSH
7242: LD_INT 3
7244: PPUSH
7245: LD_INT 2
7247: PPUSH
7248: CALL_OW 380
// un := CreateHuman ;
7252: LD_ADDR_VAR 0 3
7256: PUSH
7257: CALL_OW 44
7261: ST_TO_ADDR
// tmp := tmp union un ;
7262: LD_ADDR_VAR 0 4
7266: PUSH
7267: LD_VAR 0 4
7271: PUSH
7272: LD_VAR 0 3
7276: UNION
7277: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7278: LD_VAR 0 3
7282: PPUSH
7283: LD_VAR 0 4
7287: PUSH
7288: LD_VAR 0 4
7292: PUSH
7293: LD_INT 1
7295: MINUS
7296: ARRAY
7297: PPUSH
7298: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7302: LD_VAR 0 3
7306: PPUSH
7307: LD_INT 109
7309: PPUSH
7310: LD_INT 9
7312: PPUSH
7313: CALL_OW 111
// wait ( 0 0$1 ) ;
7317: LD_INT 35
7319: PPUSH
7320: CALL_OW 67
// for i := 1 to 2 do
7324: LD_ADDR_VAR 0 2
7328: PUSH
7329: DOUBLE
7330: LD_INT 1
7332: DEC
7333: ST_TO_ADDR
7334: LD_INT 2
7336: PUSH
7337: FOR_TO
7338: IFFALSE 7402
// begin PrepareHuman ( false , 1 , 2 ) ;
7340: LD_INT 0
7342: PPUSH
7343: LD_INT 1
7345: PPUSH
7346: LD_INT 2
7348: PPUSH
7349: CALL_OW 380
// un := CreateHuman ;
7353: LD_ADDR_VAR 0 3
7357: PUSH
7358: CALL_OW 44
7362: ST_TO_ADDR
// tmp := tmp union un ;
7363: LD_ADDR_VAR 0 4
7367: PUSH
7368: LD_VAR 0 4
7372: PUSH
7373: LD_VAR 0 3
7377: UNION
7378: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7379: LD_VAR 0 3
7383: PPUSH
7384: LD_INT 105
7386: PPUSH
7387: LD_INT 2
7389: PPUSH
7390: LD_INT 2
7392: PPUSH
7393: LD_INT 0
7395: PPUSH
7396: CALL_OW 50
// end ;
7400: GO 7337
7402: POP
7403: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7404: LD_VAR 0 4
7408: PPUSH
7409: LD_INT 26
7411: PPUSH
7412: LD_INT 35
7414: PPUSH
7415: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7419: LD_INT 35
7421: PPUSH
7422: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7426: LD_VAR 0 4
7430: PPUSH
7431: LD_INT 50
7433: PUSH
7434: EMPTY
7435: LIST
7436: PPUSH
7437: CALL_OW 72
7441: NOT
7442: IFFALSE 7446
// exit ;
7444: GO 7573
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7446: LD_VAR 0 4
7450: PPUSH
7451: LD_INT 91
7453: PUSH
7454: LD_INT 64
7456: PUSH
7457: LD_INT 12
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 72
7469: PUSH
7470: LD_VAR 0 4
7474: EQUAL
7475: IFFALSE 7419
// omicronSquad := omicronSquad union tmp ;
7477: LD_ADDR_EXP 51
7481: PUSH
7482: LD_EXP 51
7486: PUSH
7487: LD_VAR 0 4
7491: UNION
7492: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7493: LD_ADDR_VAR 0 2
7497: PUSH
7498: LD_VAR 0 4
7502: PPUSH
7503: LD_INT 25
7505: PUSH
7506: LD_INT 1
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 72
7517: PUSH
7518: FOR_IN
7519: IFFALSE 7571
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7521: LD_VAR 0 2
7525: PPUSH
7526: LD_INT 22
7528: PUSH
7529: LD_INT 4
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: LD_INT 30
7538: PUSH
7539: LD_INT 4
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PPUSH
7550: CALL_OW 69
7554: PPUSH
7555: LD_VAR 0 2
7559: PPUSH
7560: CALL_OW 74
7564: PPUSH
7565: CALL_OW 120
7569: GO 7518
7571: POP
7572: POP
// end ;
7573: LD_VAR 0 1
7577: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7578: LD_EXP 13
7582: NOT
7583: IFFALSE 8154
7585: GO 7587
7587: DISABLE
7588: LD_INT 0
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
// begin enable ;
7594: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 4
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 21
7612: PUSH
7613: LD_INT 3
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: LD_INT 24
7625: PUSH
7626: LD_INT 1000
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 69
7646: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_EXP 51
7656: PPUSH
7657: LD_INT 25
7659: PUSH
7660: LD_INT 2
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PPUSH
7667: CALL_OW 72
7671: ST_TO_ADDR
// if filter and tmp then
7672: LD_VAR 0 2
7676: PUSH
7677: LD_VAR 0 3
7681: AND
7682: IFFALSE 7755
// begin for i in tmp do
7684: LD_ADDR_VAR 0 1
7688: PUSH
7689: LD_VAR 0 3
7693: PUSH
7694: FOR_IN
7695: IFFALSE 7751
// if IsInUnit ( i ) then
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 310
7706: IFFALSE 7719
// ComExitBuilding ( i ) else
7708: LD_VAR 0 1
7712: PPUSH
7713: CALL_OW 122
7717: GO 7749
// if not HasTask ( i ) then
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 314
7728: NOT
7729: IFFALSE 7749
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7731: LD_VAR 0 1
7735: PPUSH
7736: LD_VAR 0 2
7740: PUSH
7741: LD_INT 1
7743: ARRAY
7744: PPUSH
7745: CALL_OW 130
7749: GO 7694
7751: POP
7752: POP
// end else
7753: GO 7826
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7755: LD_VAR 0 3
7759: PPUSH
7760: LD_INT 3
7762: PUSH
7763: LD_INT 54
7765: PUSH
7766: EMPTY
7767: LIST
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PPUSH
7773: CALL_OW 72
7777: IFFALSE 7826
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7779: LD_ADDR_VAR 0 1
7783: PUSH
7784: LD_VAR 0 3
7788: PPUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 54
7794: PUSH
7795: EMPTY
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 72
7806: PUSH
7807: FOR_IN
7808: IFFALSE 7824
// ComEnterUnit ( i , omikron ) ;
7810: LD_VAR 0 1
7814: PPUSH
7815: LD_INT 64
7817: PPUSH
7818: CALL_OW 120
7822: GO 7807
7824: POP
7825: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7826: LD_ADDR_VAR 0 2
7830: PUSH
7831: LD_EXP 51
7835: PPUSH
7836: LD_INT 21
7838: PUSH
7839: LD_INT 2
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PPUSH
7846: CALL_OW 72
7850: ST_TO_ADDR
// if not filter then
7851: LD_VAR 0 2
7855: NOT
7856: IFFALSE 7860
// exit ;
7858: GO 8154
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7860: LD_ADDR_VAR 0 4
7864: PUSH
7865: LD_INT 13
7867: PPUSH
7868: LD_INT 81
7870: PUSH
7871: LD_INT 4
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 70
7882: ST_TO_ADDR
// if enemy then
7883: LD_VAR 0 4
7887: IFFALSE 8154
// begin for i in filter do
7889: LD_ADDR_VAR 0 1
7893: PUSH
7894: LD_VAR 0 2
7898: PUSH
7899: FOR_IN
7900: IFFALSE 8152
// begin tmp := IsDrivenBy ( i ) ;
7902: LD_ADDR_VAR 0 3
7906: PUSH
7907: LD_VAR 0 1
7911: PPUSH
7912: CALL_OW 311
7916: ST_TO_ADDR
// if not tmp then
7917: LD_VAR 0 3
7921: NOT
7922: IFFALSE 7926
// continue ;
7924: GO 7899
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 256
7935: PUSH
7936: LD_INT 600
7938: GREATEREQUAL
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 110
7949: PUSH
7950: LD_INT 1
7952: NONEQUAL
7953: AND
7954: IFFALSE 7980
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7956: LD_VAR 0 1
7960: PPUSH
7961: LD_VAR 0 4
7965: PPUSH
7966: LD_VAR 0 1
7970: PPUSH
7971: CALL_OW 74
7975: PPUSH
7976: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 256
7989: PUSH
7990: LD_INT 600
7992: LESS
7993: PUSH
7994: LD_VAR 0 1
7998: PPUSH
7999: CALL_OW 110
8003: PUSH
8004: LD_INT 1
8006: NONEQUAL
8007: AND
8008: IFFALSE 8037
// begin SetTag ( i , 1 ) ;
8010: LD_VAR 0 1
8014: PPUSH
8015: LD_INT 1
8017: PPUSH
8018: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 27
8029: PPUSH
8030: LD_INT 35
8032: PPUSH
8033: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8037: LD_VAR 0 1
8041: PPUSH
8042: CALL_OW 110
8046: PUSH
8047: LD_INT 1
8049: EQUAL
8050: PUSH
8051: LD_VAR 0 1
8055: PPUSH
8056: LD_INT 27
8058: PPUSH
8059: LD_INT 35
8061: PPUSH
8062: CALL_OW 297
8066: PUSH
8067: LD_INT 6
8069: LESS
8070: AND
8071: PUSH
8072: LD_VAR 0 3
8076: AND
8077: IFFALSE 8150
// begin ComExitVehicle ( tmp ) ;
8079: LD_VAR 0 3
8083: PPUSH
8084: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8102: LD_INT 35
8104: PPUSH
8105: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 256
8118: PUSH
8119: LD_INT 1000
8121: EQUAL
8122: IFFALSE 8102
// ComEnterUnit ( tmp , i ) ;
8124: LD_VAR 0 3
8128: PPUSH
8129: LD_VAR 0 1
8133: PPUSH
8134: CALL_OW 120
// SetTag ( i , 0 ) ;
8138: LD_VAR 0 1
8142: PPUSH
8143: LD_INT 0
8145: PPUSH
8146: CALL_OW 109
// end ; end ;
8150: GO 7899
8152: POP
8153: POP
// end ; end ;
8154: PPOPN 4
8156: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8157: LD_EXP 13
8161: IFFALSE 8305
8163: GO 8165
8165: DISABLE
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8170: LD_ADDR_VAR 0 2
8174: PUSH
8175: LD_EXP 51
8179: PPUSH
8180: LD_INT 21
8182: PUSH
8183: LD_INT 1
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 72
8204: ST_TO_ADDR
// if not tmp then
8205: LD_VAR 0 2
8209: NOT
8210: IFFALSE 8214
// exit ;
8212: GO 8305
// repeat wait ( 0 0$1 ) ;
8214: LD_INT 35
8216: PPUSH
8217: CALL_OW 67
// for i in tmp do
8221: LD_ADDR_VAR 0 1
8225: PUSH
8226: LD_VAR 0 2
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8296
// begin ComExit ( i ) ;
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 783 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8243: LD_VAR 0 1
8247: PPUSH
8248: LD_INT 14
8250: PPUSH
8251: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 14
8262: PPUSH
8263: CALL_OW 308
8267: IFFALSE 8294
// begin tmp := tmp diff i ;
8269: LD_ADDR_VAR 0 2
8273: PUSH
8274: LD_VAR 0 2
8278: PUSH
8279: LD_VAR 0 1
8283: DIFF
8284: ST_TO_ADDR
// RemoveUnit ( i ) ;
8285: LD_VAR 0 1
8289: PPUSH
8290: CALL_OW 64
// end ; end ;
8294: GO 8231
8296: POP
8297: POP
// until not tmp ;
8298: LD_VAR 0 2
8302: NOT
8303: IFFALSE 8214
// end ; end_of_file
8305: PPOPN 2
8307: END
// export function Action ; var i , un , veh , tmp ; begin
8308: LD_INT 0
8310: PPUSH
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// InGameOn ;
8315: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8319: LD_INT 179
8321: PPUSH
8322: LD_INT 5
8324: PPUSH
8325: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8329: LD_ADDR_VAR 0 4
8333: PUSH
8334: LD_INT 2
8336: PPUSH
8337: LD_INT 2
8339: PPUSH
8340: LD_INT 12
8342: PPUSH
8343: LD_INT 1
8345: PPUSH
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 24
8351: PPUSH
8352: LD_INT 33
8354: PPUSH
8355: CALL 345 0 7
8359: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8360: LD_VAR 0 4
8364: PPUSH
8365: LD_INT 2
8367: PPUSH
8368: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 178
8379: PPUSH
8380: LD_INT 2
8382: PPUSH
8383: LD_INT 0
8385: PPUSH
8386: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8390: LD_EXP 25
8394: PPUSH
8395: LD_VAR 0 4
8399: PPUSH
8400: CALL_OW 52
// if Kamil then
8404: LD_EXP 29
8408: IFFALSE 8443
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8410: LD_EXP 29
8414: PPUSH
8415: LD_INT 207
8417: PPUSH
8418: LD_INT 37
8420: PPUSH
8421: LD_INT 0
8423: PPUSH
8424: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8428: LD_EXP 29
8432: PPUSH
8433: LD_INT 211
8435: PPUSH
8436: LD_INT 38
8438: PPUSH
8439: CALL_OW 118
// end ; if Sophia then
8443: LD_EXP 31
8447: IFFALSE 8482
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8449: LD_EXP 31
8453: PPUSH
8454: LD_INT 209
8456: PPUSH
8457: LD_INT 40
8459: PPUSH
8460: LD_INT 0
8462: PPUSH
8463: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8467: LD_EXP 31
8471: PPUSH
8472: LD_INT 211
8474: PPUSH
8475: LD_INT 38
8477: PPUSH
8478: CALL_OW 118
// end ; if Givi then
8482: LD_EXP 26
8486: IFFALSE 8521
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8488: LD_EXP 26
8492: PPUSH
8493: LD_INT 201
8495: PPUSH
8496: LD_INT 34
8498: PPUSH
8499: LD_INT 0
8501: PPUSH
8502: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8506: LD_EXP 26
8510: PPUSH
8511: LD_INT 206
8513: PPUSH
8514: LD_INT 36
8516: PPUSH
8517: CALL_OW 118
// end ; if Ibrahim then
8521: LD_EXP 28
8525: IFFALSE 8560
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8527: LD_EXP 28
8531: PPUSH
8532: LD_INT 202
8534: PPUSH
8535: LD_INT 39
8537: PPUSH
8538: LD_INT 0
8540: PPUSH
8541: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8545: LD_EXP 28
8549: PPUSH
8550: LD_INT 206
8552: PPUSH
8553: LD_INT 36
8555: PPUSH
8556: CALL_OW 118
// end ; if Markov then
8560: LD_EXP 32
8564: IFFALSE 8651
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8566: LD_ADDR_VAR 0 4
8570: PUSH
8571: LD_INT 2
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: LD_INT 13
8579: PPUSH
8580: LD_INT 1
8582: PPUSH
8583: LD_INT 1
8585: PPUSH
8586: LD_INT 25
8588: PPUSH
8589: LD_INT 80
8591: PUSH
8592: LD_INT 20
8594: PUSH
8595: LD_OWVAR 67
8599: MUL
8600: MINUS
8601: PPUSH
8602: CALL 345 0 7
8606: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8607: LD_VAR 0 4
8611: PPUSH
8612: LD_INT 2
8614: PPUSH
8615: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8619: LD_VAR 0 4
8623: PPUSH
8624: LD_INT 197
8626: PPUSH
8627: LD_INT 35
8629: PPUSH
8630: LD_INT 0
8632: PPUSH
8633: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8637: LD_EXP 32
8641: PPUSH
8642: LD_VAR 0 4
8646: PPUSH
8647: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8651: LD_ADDR_VAR 0 5
8655: PUSH
8656: LD_EXP 30
8660: PUSH
8661: LD_EXP 37
8665: UNION
8666: ST_TO_ADDR
// for i in tmp do
8667: LD_ADDR_VAR 0 2
8671: PUSH
8672: LD_VAR 0 5
8676: PUSH
8677: FOR_IN
8678: IFFALSE 8712
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8680: LD_VAR 0 2
8684: PPUSH
8685: LD_INT 203
8687: PPUSH
8688: LD_INT 41
8690: PPUSH
8691: LD_INT 6
8693: PPUSH
8694: LD_INT 0
8696: PPUSH
8697: CALL_OW 50
// ComHold ( i ) ;
8701: LD_VAR 0 2
8705: PPUSH
8706: CALL_OW 140
// end ;
8710: GO 8677
8712: POP
8713: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8714: LD_INT 22
8716: PUSH
8717: LD_INT 2
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 25
8726: PUSH
8727: LD_INT 2
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PPUSH
8738: CALL_OW 69
8742: NOT
8743: IFFALSE 8757
// SetClass ( Heike , 2 ) ;
8745: LD_EXP 25
8749: PPUSH
8750: LD_INT 2
8752: PPUSH
8753: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8757: LD_EXP 25
8761: PPUSH
8762: LD_INT 183
8764: PPUSH
8765: LD_INT 12
8767: PPUSH
8768: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8772: LD_EXP 25
8776: PPUSH
8777: LD_INT 188
8779: PPUSH
8780: LD_INT 20
8782: PPUSH
8783: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8787: LD_EXP 25
8791: PPUSH
8792: LD_INT 191
8794: PPUSH
8795: LD_INT 25
8797: PPUSH
8798: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8802: LD_EXP 25
8806: PPUSH
8807: LD_INT 203
8809: PPUSH
8810: LD_INT 29
8812: PPUSH
8813: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8817: LD_EXP 25
8821: PPUSH
8822: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8826: LD_INT 35
8828: PPUSH
8829: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8833: LD_EXP 25
8837: PPUSH
8838: CALL_OW 310
8842: NOT
8843: IFFALSE 8826
// CenterOnUnits ( Heike ) ;
8845: LD_EXP 25
8849: PPUSH
8850: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8854: LD_ADDR_VAR 0 5
8858: PUSH
8859: LD_INT 22
8861: PUSH
8862: LD_INT 2
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: LD_INT 21
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 69
8887: PUSH
8888: LD_EXP 25
8892: PUSH
8893: LD_EXP 32
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: DIFF
8902: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8903: LD_VAR 0 5
8907: PPUSH
8908: LD_EXP 25
8912: PPUSH
8913: CALL_OW 119
// if Givi then
8917: LD_EXP 26
8921: IFFALSE 8939
// ComTurnUnit ( Heike , Givi ) else
8923: LD_EXP 25
8927: PPUSH
8928: LD_EXP 26
8932: PPUSH
8933: CALL_OW 119
8937: GO 8957
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8939: LD_EXP 25
8943: PPUSH
8944: LD_VAR 0 5
8948: PUSH
8949: LD_INT 1
8951: ARRAY
8952: PPUSH
8953: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8957: LD_EXP 25
8961: PPUSH
8962: LD_STRING DH-Start-1
8964: PPUSH
8965: CALL_OW 88
// if Givi then
8969: LD_EXP 26
8973: IFFALSE 9020
// begin Say ( Givi , DG-Start-2 ) ;
8975: LD_EXP 26
8979: PPUSH
8980: LD_STRING DG-Start-2
8982: PPUSH
8983: CALL_OW 88
// if not Mike then
8987: LD_EXP 27
8991: NOT
8992: IFFALSE 9018
// begin Say ( Givi , DG-Start-b-3 ) ;
8994: LD_EXP 26
8998: PPUSH
8999: LD_STRING DG-Start-b-3
9001: PPUSH
9002: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9006: LD_EXP 25
9010: PPUSH
9011: LD_STRING DH-Start-b-4
9013: PPUSH
9014: CALL_OW 88
// end ; end else
9018: GO 9085
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9020: LD_EXP 37
9024: PPUSH
9025: LD_INT 26
9027: PUSH
9028: LD_INT 1
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PPUSH
9035: CALL_OW 72
9039: PUSH
9040: LD_INT 1
9042: ARRAY
9043: PPUSH
9044: LD_STRING DArm-Start-a-2
9046: PPUSH
9047: CALL_OW 88
9051: NOT
9052: IFFALSE 9085
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9054: LD_EXP 37
9058: PPUSH
9059: LD_INT 26
9061: PUSH
9062: LD_INT 2
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PPUSH
9069: CALL_OW 72
9073: PUSH
9074: LD_INT 1
9076: ARRAY
9077: PPUSH
9078: LD_STRING DArf-Start-a-2
9080: PPUSH
9081: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9085: LD_EXP 25
9089: PPUSH
9090: LD_INT 211
9092: PPUSH
9093: LD_INT 38
9095: PPUSH
9096: CALL_OW 118
// wait ( 0 0$1 ) ;
9100: LD_INT 35
9102: PPUSH
9103: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9107: LD_EXP 25
9111: PPUSH
9112: LD_STRING DH-Start-3
9114: PPUSH
9115: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9119: LD_EXP 25
9123: PPUSH
9124: LD_STRING DH-Start-4
9126: PPUSH
9127: CALL_OW 88
// InGameOff ;
9131: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9135: LD_STRING Prepare
9137: PPUSH
9138: CALL_OW 337
// SaveForQuickRestart ;
9142: CALL_OW 22
// wait ( 0 0$30 ) ;
9146: LD_INT 1050
9148: PPUSH
9149: CALL_OW 67
// if not Aviradze then
9153: LD_EXP 35
9157: NOT
9158: IFFALSE 9162
// exit ;
9160: GO 9366
// SetDir ( Aviradze , 4 ) ;
9162: LD_EXP 35
9166: PPUSH
9167: LD_INT 4
9169: PPUSH
9170: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9174: LD_EXP 35
9178: PPUSH
9179: LD_INT 225
9181: PPUSH
9182: LD_INT 33
9184: PPUSH
9185: LD_INT 0
9187: PPUSH
9188: CALL_OW 48
// for i := 1 to 2 do
9192: LD_ADDR_VAR 0 2
9196: PUSH
9197: DOUBLE
9198: LD_INT 1
9200: DEC
9201: ST_TO_ADDR
9202: LD_INT 2
9204: PUSH
9205: FOR_TO
9206: IFFALSE 9337
// begin uc_side := 2 ;
9208: LD_ADDR_OWVAR 20
9212: PUSH
9213: LD_INT 2
9215: ST_TO_ADDR
// uc_nation := 0 ;
9216: LD_ADDR_OWVAR 21
9220: PUSH
9221: LD_INT 0
9223: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9224: LD_INT 0
9226: PPUSH
9227: LD_INT 12
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: CALL_OW 380
// hc_gallery :=  ;
9237: LD_ADDR_OWVAR 33
9241: PUSH
9242: LD_STRING 
9244: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9245: LD_ADDR_OWVAR 26
9249: PUSH
9250: LD_STRING Artudito
9252: PUSH
9253: LD_STRING Textur
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_VAR 0 2
9264: ARRAY
9265: ST_TO_ADDR
// un := CreateHuman ;
9266: LD_ADDR_VAR 0 3
9270: PUSH
9271: CALL_OW 44
9275: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9276: LD_VAR 0 3
9280: PPUSH
9281: LD_INT 224
9283: PUSH
9284: LD_INT 226
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_VAR 0 2
9295: ARRAY
9296: PPUSH
9297: LD_INT 31
9299: PUSH
9300: LD_INT 35
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_VAR 0 2
9311: ARRAY
9312: PPUSH
9313: LD_INT 0
9315: PPUSH
9316: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9320: LD_VAR 0 3
9324: PPUSH
9325: LD_INT 215
9327: PPUSH
9328: LD_INT 36
9330: PPUSH
9331: CALL_OW 111
// end ;
9335: GO 9205
9337: POP
9338: POP
// hc_name :=  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// InitHc ;
9347: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9351: LD_EXP 35
9355: PPUSH
9356: LD_INT 215
9358: PPUSH
9359: LD_INT 36
9361: PPUSH
9362: CALL_OW 111
// end ;
9366: LD_VAR 0 1
9370: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9371: LD_EXP 3
9375: IFFALSE 10684
9377: GO 9379
9379: DISABLE
9380: LD_INT 0
9382: PPUSH
9383: PPUSH
9384: PPUSH
// begin DialogueOn ;
9385: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9389: LD_EXP 25
9393: PPUSH
9394: LD_STRING DH-base-1
9396: PPUSH
9397: CALL_OW 88
// if Markov then
9401: LD_EXP 32
9405: IFFALSE 9457
// begin Say ( Markov , DMar-base-2 ) ;
9407: LD_EXP 32
9411: PPUSH
9412: LD_STRING DMar-base-2
9414: PPUSH
9415: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9419: LD_EXP 32
9423: PPUSH
9424: LD_STRING DMar-base-3
9426: PPUSH
9427: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9431: LD_EXP 25
9435: PPUSH
9436: LD_STRING DH-base-4
9438: PPUSH
9439: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9443: LD_EXP 32
9447: PPUSH
9448: LD_STRING DMar-base-5
9450: PPUSH
9451: CALL_OW 88
// end else
9455: GO 9534
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9457: LD_EXP 37
9461: PPUSH
9462: LD_INT 26
9464: PUSH
9465: LD_INT 1
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 72
9476: PUSH
9477: LD_INT 1
9479: ARRAY
9480: PPUSH
9481: LD_STRING DArm-base-a-2
9483: PPUSH
9484: CALL_OW 88
9488: NOT
9489: IFFALSE 9522
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9491: LD_EXP 37
9495: PPUSH
9496: LD_INT 26
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 72
9510: PUSH
9511: LD_INT 1
9513: ARRAY
9514: PPUSH
9515: LD_STRING DArf-base-a-2
9517: PPUSH
9518: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9522: LD_EXP 25
9526: PPUSH
9527: LD_STRING DH-base-a-3
9529: PPUSH
9530: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9534: LD_EXP 35
9538: PPUSH
9539: LD_STRING DA-base-6
9541: PPUSH
9542: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9546: LD_EXP 35
9550: PPUSH
9551: LD_STRING DA-base-7
9553: PPUSH
9554: CALL_OW 88
// DialogueOff ;
9558: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9562: LD_STRING Flamethrower
9564: PPUSH
9565: CALL_OW 337
// wait ( 2 2$00 ) ;
9569: LD_INT 4200
9571: PPUSH
9572: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9576: LD_EXP 34
9580: PUSH
9581: LD_EXP 27
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: LD_INT 203
9592: PPUSH
9593: LD_INT 37
9595: PPUSH
9596: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9600: LD_INT 22
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 92
9612: PUSH
9613: LD_INT 203
9615: PUSH
9616: LD_INT 37
9618: PUSH
9619: LD_INT 10
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PPUSH
9632: CALL_OW 69
9636: NOT
9637: IFFALSE 9677
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9639: LD_EXP 34
9643: PUSH
9644: LD_EXP 27
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: LD_EXP 25
9657: PPUSH
9658: CALL_OW 250
9662: PPUSH
9663: LD_EXP 25
9667: PPUSH
9668: CALL_OW 251
9672: PPUSH
9673: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9677: LD_INT 35
9679: PPUSH
9680: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9684: LD_INT 2
9686: PPUSH
9687: LD_EXP 34
9691: PPUSH
9692: CALL_OW 292
9696: PUSH
9697: LD_EXP 34
9701: PPUSH
9702: LD_EXP 25
9706: PPUSH
9707: CALL_OW 296
9711: PUSH
9712: LD_INT 8
9714: LESS
9715: PUSH
9716: LD_EXP 34
9720: PPUSH
9721: LD_INT 22
9723: PUSH
9724: LD_INT 2
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 3
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PPUSH
9745: CALL_OW 69
9749: PPUSH
9750: LD_EXP 34
9754: PPUSH
9755: CALL_OW 74
9759: PPUSH
9760: CALL_OW 296
9764: PUSH
9765: LD_INT 7
9767: LESS
9768: OR
9769: AND
9770: PUSH
9771: LD_EXP 34
9775: PPUSH
9776: LD_INT 10
9778: PPUSH
9779: CALL_OW 308
9783: NOT
9784: AND
9785: IFFALSE 9677
// InGameOn ;
9787: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9791: LD_EXP 34
9795: PPUSH
9796: CALL_OW 87
// if IsInUnit ( Heike ) then
9800: LD_EXP 25
9804: PPUSH
9805: CALL_OW 310
9809: IFFALSE 9820
// ComExitBuilding ( Heike ) ;
9811: LD_EXP 25
9815: PPUSH
9816: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9820: LD_EXP 34
9824: PUSH
9825: LD_EXP 27
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PPUSH
9834: LD_EXP 25
9838: PPUSH
9839: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9843: LD_EXP 25
9847: PPUSH
9848: LD_EXP 34
9852: PPUSH
9853: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9857: LD_INT 22
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 91
9869: PUSH
9870: LD_EXP 34
9874: PUSH
9875: LD_INT 10
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 21
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 69
9902: IFFALSE 9928
// begin Say ( Kurt , DKs-scout-1 ) ;
9904: LD_EXP 34
9908: PPUSH
9909: LD_STRING DKs-scout-1
9911: PPUSH
9912: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9916: LD_EXP 25
9920: PPUSH
9921: LD_STRING DH-scout-2
9923: PPUSH
9924: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9928: LD_INT 35
9930: PPUSH
9931: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9935: LD_EXP 25
9939: PPUSH
9940: LD_EXP 34
9944: PPUSH
9945: CALL_OW 296
9949: PUSH
9950: LD_INT 6
9952: LESS
9953: IFFALSE 9928
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9955: LD_EXP 34
9959: PUSH
9960: LD_EXP 27
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PPUSH
9969: LD_EXP 25
9973: PPUSH
9974: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9978: LD_EXP 34
9982: PPUSH
9983: LD_STRING DKs-scout-3
9985: PPUSH
9986: CALL_OW 88
// if Kaia then
9990: LD_EXP 30
9994: IFFALSE 10177
// begin if IsInUnit ( Kaia ) then
9996: LD_EXP 30
10000: PPUSH
10001: CALL_OW 310
10005: IFFALSE 10016
// ComExitBuilding ( Kaia ) ;
10007: LD_EXP 30
10011: PPUSH
10012: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
10016: LD_EXP 30
10020: PPUSH
10021: LD_EXP 34
10025: PPUSH
10026: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
10030: LD_INT 35
10032: PPUSH
10033: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10037: LD_EXP 30
10041: PPUSH
10042: LD_EXP 34
10046: PPUSH
10047: CALL_OW 296
10051: PUSH
10052: LD_INT 6
10054: LESS
10055: IFFALSE 10030
// ComTurnUnit ( Kaia , Kurt ) ;
10057: LD_EXP 30
10061: PPUSH
10062: LD_EXP 34
10066: PPUSH
10067: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10071: LD_EXP 30
10075: PPUSH
10076: LD_STRING DK-scout-4
10078: PPUSH
10079: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10083: LD_EXP 34
10087: PPUSH
10088: LD_EXP 30
10092: PPUSH
10093: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10097: LD_EXP 34
10101: PPUSH
10102: LD_STRING DKs-scout-5
10104: PPUSH
10105: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10109: LD_EXP 30
10113: PPUSH
10114: LD_STRING DK-scout-6
10116: PPUSH
10117: CALL_OW 88
// if Mike then
10121: LD_EXP 27
10125: IFFALSE 10177
// begin Say ( Mike , DM-scout-7 ) ;
10127: LD_EXP 27
10131: PPUSH
10132: LD_STRING DM-scout-7
10134: PPUSH
10135: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10139: LD_EXP 30
10143: PPUSH
10144: LD_EXP 27
10148: PPUSH
10149: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10153: LD_EXP 30
10157: PPUSH
10158: LD_STRING DK-scout-8
10160: PPUSH
10161: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10165: LD_EXP 27
10169: PPUSH
10170: LD_STRING DM-scout-9
10172: PPUSH
10173: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10177: LD_INT 184
10179: PPUSH
10180: LD_INT 100
10182: PPUSH
10183: LD_INT 2
10185: PPUSH
10186: LD_INT 12
10188: NEG
10189: PPUSH
10190: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10194: LD_INT 184
10196: PPUSH
10197: LD_INT 100
10199: PPUSH
10200: LD_INT 2
10202: PPUSH
10203: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10207: LD_INT 184
10209: PPUSH
10210: LD_INT 100
10212: PPUSH
10213: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10217: LD_EXP 34
10221: PPUSH
10222: LD_STRING DKs-scout-10
10224: PPUSH
10225: CALL_OW 88
// wait ( 0 0$1 ) ;
10229: LD_INT 35
10231: PPUSH
10232: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10236: LD_INT 144
10238: PPUSH
10239: LD_INT 65
10241: PPUSH
10242: LD_INT 2
10244: PPUSH
10245: LD_INT 12
10247: NEG
10248: PPUSH
10249: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10253: LD_INT 144
10255: PPUSH
10256: LD_INT 65
10258: PPUSH
10259: LD_INT 2
10261: PPUSH
10262: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10266: LD_INT 144
10268: PPUSH
10269: LD_INT 65
10271: PPUSH
10272: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10276: LD_EXP 34
10280: PPUSH
10281: LD_STRING DKs-scout-11
10283: PPUSH
10284: CALL_OW 88
// wait ( 0 0$1 ) ;
10288: LD_INT 35
10290: PPUSH
10291: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10295: LD_EXP 34
10299: PPUSH
10300: CALL_OW 87
// if Mike and not Givi then
10304: LD_EXP 27
10308: PUSH
10309: LD_EXP 26
10313: NOT
10314: AND
10315: IFFALSE 10341
// begin Say ( Mike , DM-scout-a-1 ) ;
10317: LD_EXP 27
10321: PPUSH
10322: LD_STRING DM-scout-a-1
10324: PPUSH
10325: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10329: LD_EXP 25
10333: PPUSH
10334: LD_STRING DH-scout-a-2
10336: PPUSH
10337: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10341: LD_EXP 34
10345: PUSH
10346: LD_EXP 27
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PPUSH
10355: LD_INT 2
10357: PPUSH
10358: CALL_OW 235
// InGameOff ;
10362: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10366: LD_STRING Hill
10368: PPUSH
10369: CALL_OW 337
// allowToPatrol := true ;
10373: LD_ADDR_EXP 12
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10381: LD_INT 3150
10383: PPUSH
10384: CALL_OW 67
// InitHc ;
10388: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10392: LD_ADDR_VAR 0 1
10396: PUSH
10397: DOUBLE
10398: LD_INT 1
10400: DEC
10401: ST_TO_ADDR
10402: LD_INT 3
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: LD_INT 2
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: PUSH
10416: LD_OWVAR 67
10420: ARRAY
10421: PUSH
10422: FOR_TO
10423: IFFALSE 10682
// begin uc_side := 2 ;
10425: LD_ADDR_OWVAR 20
10429: PUSH
10430: LD_INT 2
10432: ST_TO_ADDR
// uc_nation := 2 ;
10433: LD_ADDR_OWVAR 21
10437: PUSH
10438: LD_INT 2
10440: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10441: LD_INT 0
10443: PPUSH
10444: LD_INT 1
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: LD_INT 1
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: PUSH
10458: LD_VAR 0 1
10462: PUSH
10463: LD_INT 3
10465: MOD
10466: PUSH
10467: LD_INT 1
10469: PLUS
10470: ARRAY
10471: PPUSH
10472: LD_INT 3
10474: PUSH
10475: LD_INT 2
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: LIST
10485: PUSH
10486: LD_OWVAR 67
10490: ARRAY
10491: PPUSH
10492: CALL_OW 380
// un := CreateHuman ;
10496: LD_ADDR_VAR 0 2
10500: PUSH
10501: CALL_OW 44
10505: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10506: LD_ADDR_EXP 37
10510: PUSH
10511: LD_EXP 37
10515: PUSH
10516: LD_VAR 0 2
10520: UNION
10521: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10522: LD_INT 2
10524: PPUSH
10525: LD_INT 2
10527: PPUSH
10528: LD_INT 13
10530: PPUSH
10531: LD_INT 2
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: LD_VAR 0 1
10545: PUSH
10546: LD_INT 2
10548: MOD
10549: PUSH
10550: LD_INT 1
10552: PLUS
10553: ARRAY
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: LD_INT 27
10560: PUSH
10561: LD_INT 25
10563: PUSH
10564: LD_INT 27
10566: PUSH
10567: LD_INT 23
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: PUSH
10576: LD_OWVAR 67
10580: PUSH
10581: LD_INT 0
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: CALL_OW 12
10591: PLUS
10592: ARRAY
10593: PPUSH
10594: LD_INT 77
10596: PPUSH
10597: CALL 345 0 7
// veh := CreateVehicle ;
10601: LD_ADDR_VAR 0 3
10605: PUSH
10606: CALL_OW 45
10610: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10611: LD_VAR 0 3
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 178
10630: PPUSH
10631: LD_INT 2
10633: PPUSH
10634: LD_INT 2
10636: PPUSH
10637: LD_INT 0
10639: PPUSH
10640: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10644: LD_VAR 0 2
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10658: LD_VAR 0 2
10662: PPUSH
10663: LD_INT 183
10665: PPUSH
10666: LD_INT 11
10668: PPUSH
10669: CALL_OW 111
// wait ( 0 0$2 ) ;
10673: LD_INT 70
10675: PPUSH
10676: CALL_OW 67
// end ;
10680: GO 10422
10682: POP
10683: POP
// end ;
10684: PPOPN 3
10686: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10687: LD_EXP 4
10691: PUSH
10692: LD_EXP 35
10696: PPUSH
10697: CALL_OW 302
10701: AND
10702: IFFALSE 10751
10704: GO 10706
10706: DISABLE
// begin DialogueOn ;
10707: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10711: LD_EXP 35
10715: PPUSH
10716: LD_STRING DA-lab-1
10718: PPUSH
10719: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10723: LD_EXP 35
10727: PPUSH
10728: LD_STRING DA-lab-2
10730: PPUSH
10731: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10735: LD_EXP 25
10739: PPUSH
10740: LD_STRING DH-lab-3
10742: PPUSH
10743: CALL_OW 88
// DialogueOff ;
10747: CALL_OW 7
// end ;
10751: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10752: LD_INT 17
10754: PPUSH
10755: LD_INT 2
10757: PPUSH
10758: CALL_OW 321
10762: PUSH
10763: LD_INT 2
10765: EQUAL
10766: IFFALSE 10898
10768: GO 10770
10770: DISABLE
10771: LD_INT 0
10773: PPUSH
// begin DialogueOn ;
10774: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10778: LD_EXP 35
10782: PPUSH
10783: LD_STRING DA-Cam-1
10785: PPUSH
10786: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10790: LD_EXP 35
10794: PPUSH
10795: LD_STRING DA-Cam-2
10797: PPUSH
10798: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10802: LD_EXP 35
10806: PPUSH
10807: LD_STRING DA-Cam-3
10809: PPUSH
10810: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10814: LD_EXP 25
10818: PPUSH
10819: LD_STRING DH-Cam-4
10821: PPUSH
10822: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10826: LD_EXP 30
10830: PPUSH
10831: LD_STRING DK-Cam-5
10833: PPUSH
10834: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10838: LD_EXP 30
10842: PPUSH
10843: LD_STRING DK-Cam-6
10845: PPUSH
10846: CALL_OW 88
// DialogueOff ;
10850: CALL_OW 7
// Query ( Camera ) ;
10854: LD_STRING Camera
10856: PPUSH
10857: CALL_OW 97
// hiddenCameraAllowed := true ;
10861: LD_ADDR_EXP 5
10865: PUSH
10866: LD_INT 1
10868: ST_TO_ADDR
// for i in camAreas do
10869: LD_ADDR_VAR 0 1
10873: PUSH
10874: LD_EXP 8
10878: PUSH
10879: FOR_IN
10880: IFFALSE 10896
// SetAreaMapShow ( i , 1 ) ;
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 424
10894: GO 10879
10896: POP
10897: POP
// end ;
10898: PPOPN 1
10900: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10901: LD_EXP 8
10905: NOT
10906: PUSH
10907: LD_EXP 5
10911: AND
10912: IFFALSE 11010
10914: GO 10916
10916: DISABLE
10917: LD_INT 0
10919: PPUSH
// begin stop_talking := true ;
10920: LD_ADDR_OWVAR 56
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: LD_INT 22
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 21
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 23
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: PPUSH
10968: CALL_OW 69
10972: PUSH
10973: FOR_IN
10974: IFFALSE 10993
// AddExperience ( i , 2 , 450 ) ;
10976: LD_VAR 0 1
10980: PPUSH
10981: LD_INT 2
10983: PPUSH
10984: LD_INT 450
10986: PPUSH
10987: CALL_OW 492
10991: GO 10973
10993: POP
10994: POP
// stop_talking := false ;
10995: LD_ADDR_OWVAR 56
10999: PUSH
11000: LD_INT 0
11002: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11003: LD_STRING ACH_CAMERA
11005: PPUSH
11006: CALL_OW 543
// end ;
11010: PPOPN 1
11012: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11013: LD_EXP 9
11017: PUSH
11018: LD_EXP 11
11022: NOT
11023: AND
11024: IFFALSE 11117
11026: GO 11028
11028: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert [ 1 ] ) , GetY ( russianAlert [ 1 ] ) , 2 , - 6 ) ;
11029: LD_EXP 9
11033: PUSH
11034: LD_INT 1
11036: ARRAY
11037: PPUSH
11038: CALL_OW 250
11042: PPUSH
11043: LD_EXP 9
11047: PUSH
11048: LD_INT 1
11050: ARRAY
11051: PPUSH
11052: CALL_OW 251
11056: PPUSH
11057: LD_INT 2
11059: PPUSH
11060: LD_INT 6
11062: NEG
11063: PPUSH
11064: CALL_OW 330
// CenterNowOnUnits ( russianAlert [ 1 ] ) ;
11068: LD_EXP 9
11072: PUSH
11073: LD_INT 1
11075: ARRAY
11076: PPUSH
11077: CALL_OW 87
// DialogueOn ;
11081: CALL_OW 6
// if spottedByPatrol then
11085: LD_EXP 7
11089: IFFALSE 11103
// Say ( Heike , DH-Spot-f-3 ) ;
11091: LD_EXP 25
11095: PPUSH
11096: LD_STRING DH-Spot-f-3
11098: PPUSH
11099: CALL_OW 88
// dwait ( 0 0$2 ) ;
11103: LD_INT 70
11105: PPUSH
11106: CALL_OW 68
// YouLost ( Spotted ) ;
11110: LD_STRING Spotted
11112: PPUSH
11113: CALL_OW 104
// end ;
11117: END
// every 0 0$3 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11118: LD_INT 3
11120: PUSH
11121: LD_INT 6
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PPUSH
11128: LD_INT 2
11130: PPUSH
11131: LD_EXP 47
11135: PPUSH
11136: CALL 1965 0 3
11140: IFFALSE 11177
11142: GO 11144
11144: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) [ 1 ] ;
11145: LD_ADDR_EXP 9
11149: PUSH
11150: LD_INT 3
11152: PUSH
11153: LD_INT 6
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PPUSH
11160: LD_INT 2
11162: PPUSH
11163: LD_EXP 47
11167: PPUSH
11168: CALL 1965 0 3
11172: PUSH
11173: LD_INT 1
11175: ARRAY
11176: ST_TO_ADDR
11177: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11178: LD_EXP 9
11182: IFFALSE 11479
11184: GO 11186
11186: DISABLE
11187: LD_INT 0
11189: PPUSH
11190: PPUSH
11191: PPUSH
11192: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
11193: LD_ADDR_VAR 0 2
11197: PUSH
11198: LD_EXP 44
11202: PPUSH
11203: LD_INT 25
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 54
11215: PUSH
11216: EMPTY
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 72
11227: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
11228: LD_ADDR_VAR 0 3
11232: PUSH
11233: LD_INT 22
11235: PUSH
11236: LD_INT 6
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 30
11245: PUSH
11246: LD_INT 32
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 69
11261: ST_TO_ADDR
// for i := 1 to tmp do
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: DOUBLE
11268: LD_INT 1
11270: DEC
11271: ST_TO_ADDR
11272: LD_VAR 0 2
11276: PUSH
11277: FOR_TO
11278: IFFALSE 11323
// begin ComExitBuilding ( tmp [ i ] ) ;
11280: LD_VAR 0 2
11284: PUSH
11285: LD_VAR 0 1
11289: ARRAY
11290: PPUSH
11291: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11295: LD_VAR 0 2
11299: PUSH
11300: LD_VAR 0 1
11304: ARRAY
11305: PPUSH
11306: LD_VAR 0 3
11310: PUSH
11311: LD_VAR 0 1
11315: ARRAY
11316: PPUSH
11317: CALL_OW 180
// end ;
11321: GO 11277
11323: POP
11324: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11325: LD_ADDR_VAR 0 4
11329: PUSH
11330: LD_EXP 42
11334: PUSH
11335: LD_EXP 44
11339: PUSH
11340: LD_EXP 45
11344: UNION
11345: PPUSH
11346: LD_INT 3
11348: PUSH
11349: LD_INT 25
11351: PUSH
11352: LD_INT 1
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 72
11367: UNION
11368: ST_TO_ADDR
// for i in noncombat do
11369: LD_ADDR_VAR 0 1
11373: PUSH
11374: LD_VAR 0 4
11378: PUSH
11379: FOR_IN
11380: IFFALSE 11416
// begin if IsInUnit ( i ) then
11382: LD_VAR 0 1
11386: PPUSH
11387: CALL_OW 310
11391: IFFALSE 11402
// ComExitBuilding ( i ) ;
11393: LD_VAR 0 1
11397: PPUSH
11398: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_INT 16
11409: PPUSH
11410: CALL_OW 173
// end ;
11414: GO 11379
11416: POP
11417: POP
// if not allowHeikeAttack then
11418: LD_EXP 11
11422: NOT
11423: IFFALSE 11427
// exit ;
11425: GO 11479
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11427: LD_EXP 40
11431: PPUSH
11432: LD_STRING D9a-Kur-1
11434: PPUSH
11435: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11439: LD_EXP 43
11443: PPUSH
11444: LD_STRING D9a-Bur-1
11446: PPUSH
11447: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11451: LD_EXP 40
11455: PPUSH
11456: LD_STRING D9a-Kur-2
11458: PPUSH
11459: CALL_OW 94
// omicronFall := true ;
11463: LD_ADDR_EXP 13
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// retreatFromOmicron := true ;
11471: LD_ADDR_EXP 20
11475: PUSH
11476: LD_INT 1
11478: ST_TO_ADDR
// end ;
11479: PPOPN 4
11481: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11482: LD_INT 16
11484: PPUSH
11485: LD_INT 3
11487: PUSH
11488: LD_INT 22
11490: PUSH
11491: LD_INT 2
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 23
11504: PUSH
11505: LD_INT 3
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PPUSH
11516: CALL_OW 70
11520: IFFALSE 11603
11522: GO 11524
11524: DISABLE
11525: LD_INT 0
11527: PPUSH
// begin enable ;
11528: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11529: LD_ADDR_VAR 0 1
11533: PUSH
11534: LD_INT 16
11536: PPUSH
11537: LD_INT 3
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 23
11556: PUSH
11557: LD_INT 3
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PPUSH
11568: CALL_OW 70
11572: PUSH
11573: FOR_IN
11574: IFFALSE 11601
// begin escapeCounter := escapeCounter + 1 ;
11576: LD_ADDR_EXP 19
11580: PUSH
11581: LD_EXP 19
11585: PUSH
11586: LD_INT 1
11588: PLUS
11589: ST_TO_ADDR
// RemoveUnit ( i ) ;
11590: LD_VAR 0 1
11594: PPUSH
11595: CALL_OW 64
// end ;
11599: GO 11573
11601: POP
11602: POP
// end ;
11603: PPOPN 1
11605: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11606: LD_OWVAR 1
11610: PUSH
11611: LD_INT 13650
11613: PUSH
11614: LD_INT 0
11616: PPUSH
11617: LD_INT 3150
11619: PPUSH
11620: CALL_OW 12
11624: PLUS
11625: GREATEREQUAL
11626: IFFALSE 11635
11628: GO 11630
11630: DISABLE
// SmallAmericanReinforcements ;
11631: CALL 7129 0 0
11635: END
// every 0 0$1 trigger tick >= 9 9$15 do
11636: LD_OWVAR 1
11640: PUSH
11641: LD_INT 19425
11643: GREATEREQUAL
11644: IFFALSE 11709
11646: GO 11648
11648: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11649: LD_EXP 48
11653: PPUSH
11654: LD_INT 21
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 72
11668: PPUSH
11669: LD_INT 62
11671: PPUSH
11672: LD_INT 22
11674: PPUSH
11675: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11679: LD_EXP 49
11683: PPUSH
11684: LD_INT 69
11686: PPUSH
11687: LD_INT 27
11689: PPUSH
11690: CALL_OW 111
// wait ( 1 1$00 ) ;
11694: LD_INT 2100
11696: PPUSH
11697: CALL_OW 67
// startAttackOnOmicron := true ;
11701: LD_ADDR_EXP 6
11705: PUSH
11706: LD_INT 1
11708: ST_TO_ADDR
// end ;
11709: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11710: LD_EXP 22
11714: PUSH
11715: LD_INT 0
11717: EQUAL
11718: IFFALSE 13591
11720: GO 11722
11722: DISABLE
11723: LD_INT 0
11725: PPUSH
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11732: LD_INT 5
11734: PPUSH
11735: LD_INT 2
11737: PPUSH
11738: CALL_OW 343
// PrepareOmarForces ;
11742: CALL 2530 0 0
// wait ( 0 0$03 ) ;
11746: LD_INT 105
11748: PPUSH
11749: CALL_OW 67
// allowHeikeAttack := true ;
11753: LD_ADDR_EXP 11
11757: PUSH
11758: LD_INT 1
11760: ST_TO_ADDR
// activeGrishkoAI := false ;
11761: LD_ADDR_EXP 10
11765: PUSH
11766: LD_INT 0
11768: ST_TO_ADDR
// if not hillBase then
11769: LD_EXP 15
11773: NOT
11774: IFFALSE 11783
// ChangeMissionObjectives ( HillDone ) ;
11776: LD_STRING HillDone
11778: PPUSH
11779: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11783: LD_EXP 33
11787: PPUSH
11788: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11792: LD_ADDR_VAR 0 1
11796: PUSH
11797: LD_INT 22
11799: PUSH
11800: LD_INT 2
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 21
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 69
11825: PUSH
11826: FOR_IN
11827: IFFALSE 11851
// if HasTask ( i ) then
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL_OW 314
11838: IFFALSE 11849
// ComHold ( i ) ;
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL_OW 140
11849: GO 11826
11851: POP
11852: POP
// DialogueOn ;
11853: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11857: LD_EXP 33
11861: PPUSH
11862: LD_STRING DO-assault-1
11864: PPUSH
11865: CALL_OW 94
// DialogueOff ;
11869: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11873: LD_ADDR_VAR 0 1
11877: PUSH
11878: LD_EXP 46
11882: PPUSH
11883: LD_INT 3
11885: PUSH
11886: LD_INT 54
11888: PUSH
11889: EMPTY
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 72
11900: PUSH
11901: FOR_IN
11902: IFFALSE 11921
// ComMoveXY ( i , 226 , 114 ) ;
11904: LD_VAR 0 1
11908: PPUSH
11909: LD_INT 226
11911: PPUSH
11912: LD_INT 114
11914: PPUSH
11915: CALL_OW 111
11919: GO 11901
11921: POP
11922: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11923: LD_EXP 41
11927: PPUSH
11928: LD_INT 22
11930: PUSH
11931: LD_INT 6
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 30
11940: PUSH
11941: LD_INT 4
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 69
11956: PPUSH
11957: LD_EXP 41
11961: PPUSH
11962: CALL_OW 74
11966: PPUSH
11967: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11971: LD_STRING Attack
11973: PPUSH
11974: CALL_OW 337
// music_class := music_combat ;
11978: LD_ADDR_OWVAR 72
11982: PUSH
11983: LD_INT 1
11985: ST_TO_ADDR
// music_nat := 4 ;
11986: LD_ADDR_OWVAR 71
11990: PUSH
11991: LD_INT 4
11993: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11994: LD_INT 5
11996: PPUSH
11997: LD_EXP 41
12001: PPUSH
12002: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12006: LD_INT 6
12008: PPUSH
12009: LD_EXP 38
12013: PPUSH
12014: LD_INT 25
12016: PUSH
12017: LD_INT 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: PUSH
12029: LD_INT 4
12031: ARRAY
12032: PPUSH
12033: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_EXP 38
12046: PPUSH
12047: LD_INT 3
12049: PUSH
12050: LD_INT 25
12052: PUSH
12053: LD_INT 4
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PPUSH
12064: CALL_OW 72
12068: PUSH
12069: FOR_IN
12070: IFFALSE 12089
// ComAgressiveMove ( i , 221 , 110 ) ;
12072: LD_VAR 0 1
12076: PPUSH
12077: LD_INT 221
12079: PPUSH
12080: LD_INT 110
12082: PPUSH
12083: CALL_OW 114
12087: GO 12069
12089: POP
12090: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12091: LD_EXP 38
12095: PPUSH
12096: LD_INT 25
12098: PUSH
12099: LD_INT 4
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PPUSH
12106: CALL_OW 72
12110: PPUSH
12111: LD_INT 214
12113: PPUSH
12114: LD_INT 124
12116: PPUSH
12117: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12121: LD_EXP 38
12125: PPUSH
12126: LD_INT 25
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PPUSH
12136: CALL_OW 72
12140: PUSH
12141: LD_INT 4
12143: ARRAY
12144: PPUSH
12145: LD_INT 214
12147: PPUSH
12148: LD_INT 114
12150: PPUSH
12151: LD_INT 0
12153: PPUSH
12154: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12158: LD_EXP 41
12162: PPUSH
12163: LD_STRING D9-Gri-1
12165: PPUSH
12166: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12170: LD_EXP 40
12174: PPUSH
12175: LD_STRING D9-Kur-1
12177: PPUSH
12178: CALL_OW 94
// wait ( 0 0$1 ) ;
12182: LD_INT 35
12184: PPUSH
12185: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12189: LD_EXP 33
12193: PPUSH
12194: LD_INT 233
12196: PPUSH
12197: LD_INT 130
12199: PPUSH
12200: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12204: LD_EXP 41
12208: PPUSH
12209: LD_STRING D9-Gri-2
12211: PPUSH
12212: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12216: LD_EXP 40
12220: PPUSH
12221: LD_STRING D9-Kur-2
12223: PPUSH
12224: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12228: LD_EXP 41
12232: PPUSH
12233: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12237: LD_EXP 41
12241: PPUSH
12242: LD_INT 211
12244: PPUSH
12245: LD_INT 104
12247: PPUSH
12248: CALL_OW 171
// AddComHold ( Grishko ) ;
12252: LD_EXP 41
12256: PPUSH
12257: CALL_OW 200
// repeat wait ( 3 ) ;
12261: LD_INT 3
12263: PPUSH
12264: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12268: LD_EXP 41
12272: PPUSH
12273: CALL_OW 310
12277: NOT
12278: IFFALSE 12261
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12280: LD_EXP 38
12284: PPUSH
12285: LD_INT 34
12287: PUSH
12288: LD_INT 26
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 72
12299: PPUSH
12300: LD_EXP 41
12304: PPUSH
12305: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12309: LD_EXP 38
12313: PPUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 26
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PPUSH
12324: CALL_OW 72
12328: PPUSH
12329: LD_INT 215
12331: PPUSH
12332: LD_INT 106
12334: PPUSH
12335: CALL_OW 174
// repeat wait ( 3 ) ;
12339: LD_INT 3
12341: PPUSH
12342: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12346: LD_EXP 41
12350: PPUSH
12351: CALL_OW 256
12355: PUSH
12356: LD_INT 1000
12358: LESS
12359: IFFALSE 12339
// NormalAttack ( 5 , Grishko ) ;
12361: LD_INT 5
12363: PPUSH
12364: LD_EXP 41
12368: PPUSH
12369: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12373: LD_INT 6
12375: PPUSH
12376: LD_EXP 38
12380: PPUSH
12381: LD_INT 25
12383: PUSH
12384: LD_INT 1
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL_OW 72
12395: PUSH
12396: LD_INT 4
12398: ARRAY
12399: PPUSH
12400: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12404: LD_EXP 41
12408: PPUSH
12409: LD_STRING D9-Gri-3
12411: PPUSH
12412: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12416: LD_EXP 40
12420: PPUSH
12421: LD_STRING D9-Kur-3
12423: PPUSH
12424: CALL_OW 94
// music_class := music_auto ;
12428: LD_ADDR_OWVAR 72
12432: PUSH
12433: LD_INT 0
12435: ST_TO_ADDR
// music_nat := music_auto ;
12436: LD_ADDR_OWVAR 71
12440: PUSH
12441: LD_INT 0
12443: ST_TO_ADDR
// for i in omarSquad do
12444: LD_ADDR_VAR 0 1
12448: PUSH
12449: LD_EXP 38
12453: PUSH
12454: FOR_IN
12455: IFFALSE 12597
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12457: LD_VAR 0 1
12461: PPUSH
12462: CALL_OW 247
12466: PUSH
12467: LD_INT 2
12469: EQUAL
12470: PUSH
12471: LD_VAR 0 1
12475: PPUSH
12476: CALL_OW 256
12480: PUSH
12481: LD_INT 1000
12483: LESS
12484: AND
12485: IFFALSE 12551
// begin driver := IsDrivenBy ( i ) ;
12487: LD_ADDR_VAR 0 2
12491: PUSH
12492: LD_VAR 0 1
12496: PPUSH
12497: CALL_OW 311
12501: ST_TO_ADDR
// veh := i ;
12502: LD_ADDR_VAR 0 3
12506: PUSH
12507: LD_VAR 0 1
12511: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12512: LD_VAR 0 2
12516: PPUSH
12517: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_VAR 0 3
12530: PPUSH
12531: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12535: LD_VAR 0 2
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: CALL_OW 180
// end else
12549: GO 12595
// if GetLives ( i ) < 500 then
12551: LD_VAR 0 1
12555: PPUSH
12556: CALL_OW 256
12560: PUSH
12561: LD_INT 500
12563: LESS
12564: IFFALSE 12595
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12566: LD_EXP 38
12570: PPUSH
12571: LD_INT 25
12573: PUSH
12574: LD_INT 4
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 72
12585: PPUSH
12586: LD_VAR 0 1
12590: PPUSH
12591: CALL_OW 188
// end ; end ;
12595: GO 12454
12597: POP
12598: POP
// repeat wait ( 0 0$1 ) ;
12599: LD_INT 35
12601: PPUSH
12602: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12606: LD_EXP 38
12610: PPUSH
12611: LD_INT 3
12613: PUSH
12614: LD_INT 24
12616: PUSH
12617: LD_INT 1000
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 21
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PPUSH
12642: CALL_OW 72
12646: NOT
12647: PUSH
12648: LD_EXP 38
12652: PPUSH
12653: LD_INT 3
12655: PUSH
12656: LD_INT 24
12658: PUSH
12659: LD_INT 250
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PPUSH
12670: CALL_OW 72
12674: NOT
12675: AND
12676: IFFALSE 12599
// wait ( 0 0$2 ) ;
12678: LD_INT 70
12680: PPUSH
12681: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12685: LD_ADDR_VAR 0 5
12689: PUSH
12690: LD_EXP 38
12694: PPUSH
12695: LD_INT 58
12697: PUSH
12698: EMPTY
12699: LIST
12700: PUSH
12701: LD_INT 21
12703: PUSH
12704: LD_INT 2
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 72
12719: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12720: LD_ADDR_VAR 0 6
12724: PUSH
12725: LD_EXP 38
12729: PPUSH
12730: LD_INT 25
12732: PUSH
12733: LD_INT 3
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 3
12742: PUSH
12743: LD_INT 55
12745: PUSH
12746: EMPTY
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 72
12761: ST_TO_ADDR
// for i := 1 to tmp do
12762: LD_ADDR_VAR 0 1
12766: PUSH
12767: DOUBLE
12768: LD_INT 1
12770: DEC
12771: ST_TO_ADDR
12772: LD_VAR 0 5
12776: PUSH
12777: FOR_TO
12778: IFFALSE 12808
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12780: LD_VAR 0 6
12784: PUSH
12785: LD_VAR 0 1
12789: ARRAY
12790: PPUSH
12791: LD_VAR 0 5
12795: PUSH
12796: LD_VAR 0 1
12800: ARRAY
12801: PPUSH
12802: CALL_OW 120
12806: GO 12777
12808: POP
12809: POP
// wait ( 0 0$5 ) ;
12810: LD_INT 175
12812: PPUSH
12813: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12817: LD_EXP 38
12821: PPUSH
12822: LD_INT 199
12824: PPUSH
12825: LD_INT 141
12827: PPUSH
12828: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12832: LD_EXP 33
12836: PPUSH
12837: LD_INT 190
12839: PPUSH
12840: LD_INT 143
12842: PPUSH
12843: CALL_OW 111
// AddComHold ( Omar ) ;
12847: LD_EXP 33
12851: PPUSH
12852: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12856: LD_EXP 38
12860: PPUSH
12861: LD_INT 2
12863: PUSH
12864: LD_INT 25
12866: PUSH
12867: LD_INT 1
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 4
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: PPUSH
12889: CALL_OW 72
12893: PPUSH
12894: LD_INT 161
12896: PPUSH
12897: LD_INT 130
12899: PPUSH
12900: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12904: LD_EXP 38
12908: PPUSH
12909: LD_INT 25
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: CALL_OW 72
12923: PPUSH
12924: LD_INT 163
12926: PPUSH
12927: LD_INT 122
12929: PPUSH
12930: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12934: LD_EXP 38
12938: PPUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 72
12953: PUSH
12954: LD_INT 4
12956: ARRAY
12957: PPUSH
12958: LD_INT 165
12960: PPUSH
12961: LD_INT 118
12963: PPUSH
12964: LD_INT 0
12966: PPUSH
12967: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12971: LD_EXP 38
12975: PPUSH
12976: LD_INT 25
12978: PUSH
12979: LD_INT 1
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 72
12990: PUSH
12991: LD_INT 4
12993: ARRAY
12994: PPUSH
12995: LD_INT 159
12997: PPUSH
12998: LD_INT 116
13000: PPUSH
13001: LD_INT 0
13003: PPUSH
13004: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13008: LD_EXP 38
13012: PPUSH
13013: LD_INT 21
13015: PUSH
13016: LD_INT 2
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PPUSH
13023: CALL_OW 72
13027: PPUSH
13028: LD_INT 169
13030: PPUSH
13031: LD_INT 114
13033: PPUSH
13034: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13038: LD_INT 35
13040: PPUSH
13041: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13045: LD_ADDR_VAR 0 5
13049: PUSH
13050: LD_EXP 38
13054: PPUSH
13055: LD_INT 25
13057: PUSH
13058: LD_INT 1
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 72
13069: ST_TO_ADDR
// for i in tmp do
13070: LD_ADDR_VAR 0 1
13074: PUSH
13075: LD_VAR 0 5
13079: PUSH
13080: FOR_IN
13081: IFFALSE 13178
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13083: LD_VAR 0 1
13087: PPUSH
13088: CALL_OW 256
13092: PUSH
13093: LD_INT 600
13095: LESS
13096: PUSH
13097: LD_VAR 0 1
13101: PPUSH
13102: LD_INT 161
13104: PPUSH
13105: LD_INT 130
13107: PPUSH
13108: CALL_OW 297
13112: PUSH
13113: LD_INT 6
13115: GREATER
13116: AND
13117: IFFALSE 13134
// ComMoveXY ( i , 161 , 130 ) ;
13119: LD_VAR 0 1
13123: PPUSH
13124: LD_INT 161
13126: PPUSH
13127: LD_INT 130
13129: PPUSH
13130: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 256
13143: PUSH
13144: LD_INT 1000
13146: EQUAL
13147: PUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 314
13157: NOT
13158: AND
13159: IFFALSE 13176
// ComAgressiveMove ( i , 160 , 109 ) ;
13161: LD_VAR 0 1
13165: PPUSH
13166: LD_INT 160
13168: PPUSH
13169: LD_INT 109
13171: PPUSH
13172: CALL_OW 114
// end ;
13176: GO 13080
13178: POP
13179: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13180: LD_ADDR_VAR 0 5
13184: PUSH
13185: LD_EXP 38
13189: PPUSH
13190: LD_INT 21
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 72
13204: ST_TO_ADDR
// for i in tmp do
13205: LD_ADDR_VAR 0 1
13209: PUSH
13210: LD_VAR 0 5
13214: PUSH
13215: FOR_IN
13216: IFFALSE 13482
// begin tmp2 := IsDrivenBy ( i ) ;
13218: LD_ADDR_VAR 0 6
13222: PUSH
13223: LD_VAR 0 1
13227: PPUSH
13228: CALL_OW 311
13232: ST_TO_ADDR
// if not tmp2 then
13233: LD_VAR 0 6
13237: NOT
13238: IFFALSE 13242
// continue ;
13240: GO 13215
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13242: LD_VAR 0 1
13246: PPUSH
13247: CALL_OW 256
13251: PUSH
13252: LD_INT 600
13254: GREATEREQUAL
13255: PUSH
13256: LD_VAR 0 1
13260: PPUSH
13261: CALL_OW 110
13265: PUSH
13266: LD_INT 1
13268: EQUAL
13269: AND
13270: IFFALSE 13284
// SetTag ( i , 0 ) ;
13272: LD_VAR 0 1
13276: PPUSH
13277: LD_INT 0
13279: PPUSH
13280: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 256
13293: PUSH
13294: LD_INT 600
13296: GREATEREQUAL
13297: PUSH
13298: LD_VAR 0 1
13302: PPUSH
13303: CALL_OW 110
13307: NOT
13308: AND
13309: IFFALSE 13335
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13311: LD_VAR 0 1
13315: PPUSH
13316: LD_VAR 0 7
13320: PPUSH
13321: LD_VAR 0 1
13325: PPUSH
13326: CALL_OW 74
13330: PPUSH
13331: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13335: LD_VAR 0 1
13339: PPUSH
13340: CALL_OW 256
13344: PUSH
13345: LD_INT 600
13347: LESS
13348: PUSH
13349: LD_VAR 0 1
13353: PPUSH
13354: CALL_OW 110
13358: NOT
13359: AND
13360: IFFALSE 13389
// begin SetTag ( i , 1 ) ;
13362: LD_VAR 0 1
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13374: LD_VAR 0 1
13378: PPUSH
13379: LD_INT 202
13381: PPUSH
13382: LD_INT 150
13384: PPUSH
13385: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13389: LD_VAR 0 1
13393: PPUSH
13394: CALL_OW 110
13398: PUSH
13399: LD_INT 1
13401: EQUAL
13402: PUSH
13403: LD_VAR 0 1
13407: PPUSH
13408: LD_INT 202
13410: PPUSH
13411: LD_INT 150
13413: PPUSH
13414: CALL_OW 297
13418: PUSH
13419: LD_INT 6
13421: LESS
13422: AND
13423: PUSH
13424: LD_VAR 0 6
13428: AND
13429: IFFALSE 13480
// begin ComExitVehicle ( tmp2 ) ;
13431: LD_VAR 0 6
13435: PPUSH
13436: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13440: LD_VAR 0 6
13444: PPUSH
13445: LD_VAR 0 1
13449: PPUSH
13450: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13454: LD_VAR 0 6
13458: PPUSH
13459: LD_INT 700
13461: PPUSH
13462: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13466: LD_VAR 0 6
13470: PPUSH
13471: LD_VAR 0 1
13475: PPUSH
13476: CALL_OW 180
// end ; end ;
13480: GO 13215
13482: POP
13483: POP
// until kirovDestroyed ;
13484: LD_EXP 16
13488: IFFALSE 13038
// repeat wait ( 0 0$1 ) ;
13490: LD_INT 35
13492: PPUSH
13493: CALL_OW 67
// for i in omarSquad union Omar do
13497: LD_ADDR_VAR 0 1
13501: PUSH
13502: LD_EXP 38
13506: PUSH
13507: LD_EXP 33
13511: UNION
13512: PUSH
13513: FOR_IN
13514: IFFALSE 13558
// if IsInArea ( i , southRoadArea ) then
13516: LD_VAR 0 1
13520: PPUSH
13521: LD_INT 15
13523: PPUSH
13524: CALL_OW 308
13528: IFFALSE 13541
// RemoveUnit ( i ) else
13530: LD_VAR 0 1
13534: PPUSH
13535: CALL_OW 64
13539: GO 13556
// ComMoveXY ( i , 208 , 162 ) ;
13541: LD_VAR 0 1
13545: PPUSH
13546: LD_INT 208
13548: PPUSH
13549: LD_INT 162
13551: PPUSH
13552: CALL_OW 111
13556: GO 13513
13558: POP
13559: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13560: LD_INT 22
13562: PUSH
13563: LD_INT 5
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 21
13572: PUSH
13573: LD_INT 1
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL_OW 69
13588: NOT
13589: IFFALSE 13490
// end ;
13591: PPOPN 7
13593: END
// every 0 0$1 trigger IsDead ( kirov ) do
13594: LD_INT 71
13596: PPUSH
13597: CALL_OW 301
13601: IFFALSE 13618
13603: GO 13605
13605: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13606: LD_EXP 25
13610: PPUSH
13611: LD_STRING DH-1-Kirov
13613: PPUSH
13614: CALL_OW 88
13618: END
// every 0 0$1 trigger See ( 2 , beria ) do
13619: LD_INT 2
13621: PPUSH
13622: LD_INT 106
13624: PPUSH
13625: CALL_OW 292
13629: IFFALSE 13646
13631: GO 13633
13633: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13634: LD_EXP 25
13638: PPUSH
13639: LD_STRING DH-1-Beria
13641: PPUSH
13642: CALL_OW 88
13646: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13647: LD_INT 2
13649: PPUSH
13650: LD_INT 112
13652: PPUSH
13653: CALL_OW 292
13657: IFFALSE 13902
13659: GO 13661
13661: DISABLE
// begin DialogueOn ;
13662: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13666: LD_INT 112
13668: PPUSH
13669: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13673: LD_EXP 25
13677: PPUSH
13678: LD_STRING DH-1-Kagan
13680: PPUSH
13681: CALL_OW 88
// if Kamil then
13685: LD_EXP 29
13689: IFFALSE 13727
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13691: LD_EXP 29
13695: PPUSH
13696: LD_STRING DKam-Kagan-2
13698: PPUSH
13699: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13703: LD_EXP 26
13707: PPUSH
13708: LD_STRING DG-Kagan-3
13710: PPUSH
13711: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13715: LD_EXP 26
13719: PPUSH
13720: LD_STRING DG-Kagan-4
13722: PPUSH
13723: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13727: LD_STRING KaganBase
13729: PPUSH
13730: CALL_OW 97
13734: PUSH
13735: LD_INT 1
13737: DOUBLE
13738: EQUAL
13739: IFTRUE 13743
13741: GO 13838
13743: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13744: LD_EXP 25
13748: PPUSH
13749: LD_STRING DH-Kagan-5
13751: PPUSH
13752: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13756: LD_EXP 25
13760: PPUSH
13761: LD_STRING DH-Kagan-6
13763: PPUSH
13764: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13768: LD_EXP 36
13772: PPUSH
13773: LD_STRING DShar-Kagan-7
13775: PPUSH
13776: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13780: LD_EXP 25
13784: PPUSH
13785: LD_STRING DH-Kagan-8
13787: PPUSH
13788: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13792: LD_EXP 25
13796: PPUSH
13797: LD_STRING DH-Kagan-9
13799: PPUSH
13800: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13804: LD_EXP 36
13808: PPUSH
13809: LD_STRING DShar-Kagan-10
13811: PPUSH
13812: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13816: LD_EXP 25
13820: PPUSH
13821: LD_STRING DH-Kagan-11
13823: PPUSH
13824: CALL_OW 88
// kaganCaptured := true ;
13828: LD_ADDR_EXP 24
13832: PUSH
13833: LD_INT 1
13835: ST_TO_ADDR
// end ; 2 :
13836: GO 13898
13838: LD_INT 2
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13897
13846: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
13847: LD_EXP 25
13851: PPUSH
13852: LD_STRING DH-Kagan-a-5
13854: PPUSH
13855: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13859: LD_EXP 25
13863: PPUSH
13864: LD_STRING DH-Kagan-a-6
13866: PPUSH
13867: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13871: LD_EXP 25
13875: PPUSH
13876: LD_STRING DH-Kagan-a-7
13878: PPUSH
13879: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13883: LD_EXP 26
13887: PPUSH
13888: LD_STRING DG-Kagan-a-8
13890: PPUSH
13891: CALL_OW 88
// end ; end ;
13895: GO 13898
13897: POP
// DialogueOff ;
13898: CALL_OW 7
// end ;
13902: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13903: LD_EXP 6
13907: PUSH
13908: LD_EXP 48
13912: PPUSH
13913: LD_INT 95
13915: PUSH
13916: LD_INT 19
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PPUSH
13923: CALL_OW 72
13927: AND
13928: IFFALSE 14005
13930: GO 13932
13932: DISABLE
// begin DialogueOn ;
13933: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13937: LD_INT 63
13939: PPUSH
13940: LD_INT 32
13942: PPUSH
13943: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13947: LD_INT 63
13949: PPUSH
13950: LD_INT 32
13952: PPUSH
13953: LD_INT 2
13955: PPUSH
13956: LD_INT 12
13958: NEG
13959: PPUSH
13960: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13964: LD_EXP 25
13968: PPUSH
13969: LD_STRING DH-Omicron-1
13971: PPUSH
13972: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13976: LD_EXP 27
13980: PPUSH
13981: LD_STRING DM-Omicron-2
13983: PPUSH
13984: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13988: LD_INT 63
13990: PPUSH
13991: LD_INT 32
13993: PPUSH
13994: LD_INT 2
13996: PPUSH
13997: CALL_OW 331
// DialogueOff ;
14001: CALL_OW 7
// end ;
14005: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , tmp2 , q , settings ;
14006: LD_INT 2
14008: PPUSH
14009: LD_EXP 50
14013: PPUSH
14014: CALL_OW 292
14018: PUSH
14019: LD_EXP 50
14023: PPUSH
14024: CALL_OW 302
14028: AND
14029: PUSH
14030: LD_EXP 25
14034: PPUSH
14035: CALL_OW 302
14039: AND
14040: PUSH
14041: LD_EXP 35
14045: PPUSH
14046: CALL_OW 302
14050: AND
14051: PUSH
14052: LD_INT 2
14054: PPUSH
14055: CALL_OW 463
14059: NOT
14060: AND
14061: IFFALSE 14624
14063: GO 14065
14065: DISABLE
14066: LD_INT 0
14068: PPUSH
14069: PPUSH
14070: PPUSH
14071: PPUSH
14072: PPUSH
// begin DialogueOn ;
14073: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14077: LD_INT 111
14079: PPUSH
14080: LD_INT 90
14082: PPUSH
14083: LD_INT 2
14085: PPUSH
14086: LD_INT 6
14088: NEG
14089: PPUSH
14090: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14094: LD_INT 111
14096: PPUSH
14097: LD_INT 90
14099: PPUSH
14100: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14104: LD_EXP 35
14108: PPUSH
14109: LD_STRING DA-Cap-1
14111: PPUSH
14112: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14116: LD_EXP 25
14120: PPUSH
14121: LD_STRING DH-Cap-2
14123: PPUSH
14124: CALL_OW 88
// DialogueOff ;
14128: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14132: LD_INT 35
14134: PPUSH
14135: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
14139: LD_EXP 17
14143: PUSH
14144: LD_EXP 50
14148: PPUSH
14149: CALL_OW 302
14153: AND
14154: PUSH
14155: LD_EXP 35
14159: PPUSH
14160: CALL_OW 302
14164: AND
14165: IFFALSE 14132
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14167: LD_ADDR_VAR 0 2
14171: PUSH
14172: LD_EXP 37
14176: PUSH
14177: LD_EXP 28
14181: PUSH
14182: LD_EXP 29
14186: PUSH
14187: LD_EXP 31
14191: PUSH
14192: LD_EXP 30
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: UNION
14203: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14204: LD_ADDR_VAR 0 2
14208: PUSH
14209: LD_VAR 0 2
14213: PPUSH
14214: LD_INT 50
14216: PUSH
14217: EMPTY
14218: LIST
14219: PPUSH
14220: CALL_OW 72
14224: ST_TO_ADDR
// if tmp < 2 then
14225: LD_VAR 0 2
14229: PUSH
14230: LD_INT 2
14232: LESS
14233: IFFALSE 14245
// q := 2 else
14235: LD_ADDR_VAR 0 4
14239: PUSH
14240: LD_INT 2
14242: ST_TO_ADDR
14243: GO 14258
// q := Query ( LabCap ) ;
14245: LD_ADDR_VAR 0 4
14249: PUSH
14250: LD_STRING LabCap
14252: PPUSH
14253: CALL_OW 97
14257: ST_TO_ADDR
// case q of 1 :
14258: LD_VAR 0 4
14262: PUSH
14263: LD_INT 1
14265: DOUBLE
14266: EQUAL
14267: IFTRUE 14271
14269: GO 14588
14271: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14272: LD_INT 2
14274: PPUSH
14275: LD_EXP 50
14279: PPUSH
14280: CALL_OW 471
// labCaptured := true ;
14284: LD_ADDR_EXP 21
14288: PUSH
14289: LD_INT 1
14291: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14292: LD_EXP 25
14296: PPUSH
14297: LD_STRING DH-Cap-a-1
14299: PPUSH
14300: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14304: LD_EXP 35
14308: PPUSH
14309: LD_STRING DA-Cap-a-2
14311: PPUSH
14312: CALL_OW 88
// settings := [ Heike , sel_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ;
14316: LD_ADDR_VAR 0 5
14320: PUSH
14321: LD_EXP 25
14325: PUSH
14326: LD_INT -3
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_VAR 0 2
14337: ADD
14338: PUSH
14339: LD_INT -2
14341: PUSH
14342: LD_INT -4
14344: PUSH
14345: LD_EXP 35
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: LIST
14354: ADD
14355: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14356: LD_ADDR_VAR 0 3
14360: PUSH
14361: LD_STRING Select two characters to go with Aviradze
14363: PPUSH
14364: LD_INT 2
14366: PPUSH
14367: LD_INT 2
14369: PPUSH
14370: LD_VAR 0 5
14374: PPUSH
14375: EMPTY
14376: PPUSH
14377: CALL_OW 42
14381: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14382: LD_EXP 50
14386: PPUSH
14387: LD_INT 8
14389: PPUSH
14390: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14394: LD_EXP 35
14398: PPUSH
14399: LD_INT 8
14401: PPUSH
14402: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14406: LD_ADDR_EXP 39
14410: PUSH
14411: LD_EXP 35
14415: PUSH
14416: EMPTY
14417: LIST
14418: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14419: LD_EXP 35
14423: PPUSH
14424: CALL_OW 310
14428: IFFALSE 14439
// ComExit ( Aviradze ) ;
14430: LD_EXP 35
14434: PPUSH
14435: CALL 783 0 1
// wait ( 3 ) ;
14439: LD_INT 3
14441: PPUSH
14442: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14446: LD_EXP 35
14450: PPUSH
14451: LD_EXP 50
14455: PPUSH
14456: CALL_OW 120
// for i := 1 to 2 do
14460: LD_ADDR_VAR 0 1
14464: PUSH
14465: DOUBLE
14466: LD_INT 1
14468: DEC
14469: ST_TO_ADDR
14470: LD_INT 2
14472: PUSH
14473: FOR_TO
14474: IFFALSE 14577
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14476: LD_ADDR_EXP 39
14480: PUSH
14481: LD_EXP 39
14485: PUSH
14486: LD_VAR 0 3
14490: PUSH
14491: LD_VAR 0 1
14495: ARRAY
14496: UNION
14497: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14498: LD_VAR 0 3
14502: PUSH
14503: LD_VAR 0 1
14507: ARRAY
14508: PPUSH
14509: LD_INT 8
14511: PPUSH
14512: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14516: LD_VAR 0 3
14520: PUSH
14521: LD_VAR 0 1
14525: ARRAY
14526: PPUSH
14527: CALL_OW 310
14531: IFFALSE 14548
// ComExit ( tmp2 [ i ] ) ;
14533: LD_VAR 0 3
14537: PUSH
14538: LD_VAR 0 1
14542: ARRAY
14543: PPUSH
14544: CALL 783 0 1
// wait ( 3 ) ;
14548: LD_INT 3
14550: PPUSH
14551: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14555: LD_VAR 0 3
14559: PUSH
14560: LD_VAR 0 1
14564: ARRAY
14565: PPUSH
14566: LD_EXP 50
14570: PPUSH
14571: CALL_OW 120
// end ;
14575: GO 14473
14577: POP
14578: POP
// SetAchievement ( ACH_LAB ) ;
14579: LD_STRING ACH_LAB
14581: PPUSH
14582: CALL_OW 543
// end ; 2 :
14586: GO 14624
14588: LD_INT 2
14590: DOUBLE
14591: EQUAL
14592: IFTRUE 14596
14594: GO 14623
14596: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14597: LD_EXP 25
14601: PPUSH
14602: LD_STRING DH-Cap-b-1
14604: PPUSH
14605: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14609: LD_EXP 35
14613: PPUSH
14614: LD_STRING DA-Cap-b-2
14616: PPUSH
14617: CALL_OW 88
// end ; end ;
14621: GO 14624
14623: POP
// end ;
14624: PPOPN 5
14626: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14627: LD_INT 10
14629: PPUSH
14630: LD_INT 22
14632: PUSH
14633: LD_INT 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 30
14642: PUSH
14643: LD_INT 31
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PPUSH
14654: CALL_OW 70
14658: PUSH
14659: LD_INT 2
14661: GREATEREQUAL
14662: IFFALSE 14674
14664: GO 14666
14666: DISABLE
// SetAchievement ( ACH_KING ) ;
14667: LD_STRING ACH_KING
14669: PPUSH
14670: CALL_OW 543
14674: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14675: LD_EXP 11
14679: NOT
14680: PUSH
14681: LD_INT 10
14683: PPUSH
14684: LD_INT 22
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 2
14696: PUSH
14697: LD_INT 30
14699: PUSH
14700: LD_INT 31
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 30
14709: PUSH
14710: LD_INT 4
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 70
14730: AND
14731: IFFALSE 14751
14733: GO 14735
14735: DISABLE
// begin hillBase := true ;
14736: LD_ADDR_EXP 15
14740: PUSH
14741: LD_INT 1
14743: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14744: LD_STRING HillDone
14746: PPUSH
14747: CALL_OW 337
// end ;
14751: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14752: LD_EXP 30
14756: PUSH
14757: LD_EXP 30
14761: PPUSH
14762: CALL_OW 256
14766: PUSH
14767: LD_INT 3
14769: LESS
14770: AND
14771: IFFALSE 14817
14773: GO 14775
14775: DISABLE
// begin DialogueOn ;
14776: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14780: LD_EXP 30
14784: PPUSH
14785: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14789: LD_EXP 30
14793: PPUSH
14794: LD_STRING DK-Kkilled-1
14796: PPUSH
14797: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14801: LD_EXP 25
14805: PPUSH
14806: LD_STRING DH-Kkilled-2
14808: PPUSH
14809: CALL_OW 88
// DialogueOff ;
14813: CALL_OW 7
// end ;
14817: END
// every 0 0$1 trigger kaiaKilledByRussian do
14818: LD_EXP 23
14822: IFFALSE 14839
14824: GO 14826
14826: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14827: LD_EXP 25
14831: PPUSH
14832: LD_STRING DH-Kkilled-3
14834: PPUSH
14835: CALL_OW 88
14839: END
// every 0 0$1 trigger ( kirovDestroyed and beriaDestroyed and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14840: LD_EXP 16
14844: PUSH
14845: LD_EXP 17
14849: AND
14850: PUSH
14851: LD_EXP 18
14855: PUSH
14856: LD_EXP 24
14860: PUSH
14861: LD_INT 112
14863: PPUSH
14864: CALL_OW 255
14868: PUSH
14869: LD_INT 2
14871: EQUAL
14872: AND
14873: OR
14874: AND
14875: IFFALSE 16057
14877: GO 14879
14879: DISABLE
14880: LD_INT 0
14882: PPUSH
14883: PPUSH
14884: PPUSH
14885: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14886: LD_STRING GoToWest
14888: PPUSH
14889: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14893: LD_INT 17
14895: PPUSH
14896: LD_INT 1
14898: PPUSH
14899: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14903: LD_INT 35
14905: PPUSH
14906: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14910: LD_ADDR_VAR 0 2
14914: PUSH
14915: LD_INT 17
14917: PPUSH
14918: LD_INT 22
14920: PUSH
14921: LD_INT 2
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: LD_INT 2
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 1
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 21
14943: PUSH
14944: LD_INT 2
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 3
14953: PUSH
14954: LD_INT 58
14956: PUSH
14957: EMPTY
14958: LIST
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 70
14981: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_INT 2
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 3
14999: PUSH
15000: LD_INT 55
15002: PUSH
15003: EMPTY
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 2
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 21
15025: PUSH
15026: LD_INT 2
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 3
15035: PUSH
15036: LD_INT 58
15038: PUSH
15039: EMPTY
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 69
15064: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15065: LD_VAR 0 2
15069: PUSH
15070: LD_INT 0
15072: PLUS
15073: PUSH
15074: LD_VAR 0 3
15078: PUSH
15079: LD_INT 0
15081: PLUS
15082: EQUAL
15083: IFFALSE 14903
// SaveCharacters ( Heike , 04_1_Heike ) ;
15085: LD_EXP 25
15089: PPUSH
15090: LD_STRING 04_1_Heike
15092: PPUSH
15093: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15097: LD_EXP 35
15101: PUSH
15102: LD_EXP 35
15106: PUSH
15107: LD_EXP 39
15111: IN
15112: NOT
15113: AND
15114: IFFALSE 15130
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15116: LD_EXP 35
15120: PPUSH
15121: LD_STRING 04_1_Aviradze
15123: PPUSH
15124: CALL_OW 38
15128: GO 15148
// if Aviradze then
15130: LD_EXP 35
15134: IFFALSE 15148
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15136: LD_EXP 35
15140: PPUSH
15141: LD_STRING 04_1_Aviradze_L
15143: PPUSH
15144: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15148: LD_EXP 28
15152: PUSH
15153: LD_EXP 28
15157: PUSH
15158: LD_EXP 39
15162: IN
15163: NOT
15164: AND
15165: IFFALSE 15181
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15167: LD_EXP 28
15171: PPUSH
15172: LD_STRING 04_1_Ibrahim
15174: PPUSH
15175: CALL_OW 38
15179: GO 15199
// if Ibrahim then
15181: LD_EXP 28
15185: IFFALSE 15199
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15187: LD_EXP 28
15191: PPUSH
15192: LD_STRING 04_1_Ibrahim_L
15194: PPUSH
15195: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15199: LD_EXP 29
15203: PUSH
15204: LD_EXP 29
15208: PUSH
15209: LD_EXP 39
15213: IN
15214: NOT
15215: AND
15216: IFFALSE 15232
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15218: LD_EXP 29
15222: PPUSH
15223: LD_STRING 04_1_Kamil
15225: PPUSH
15226: CALL_OW 38
15230: GO 15250
// if Kamil then
15232: LD_EXP 29
15236: IFFALSE 15250
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15238: LD_EXP 29
15242: PPUSH
15243: LD_STRING 04_1_Kamil_L
15245: PPUSH
15246: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15250: LD_EXP 31
15254: PUSH
15255: LD_EXP 31
15259: PUSH
15260: LD_EXP 39
15264: IN
15265: NOT
15266: AND
15267: IFFALSE 15283
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15269: LD_EXP 31
15273: PPUSH
15274: LD_STRING 04_1_Sophia
15276: PPUSH
15277: CALL_OW 38
15281: GO 15301
// if Sophia then
15283: LD_EXP 31
15287: IFFALSE 15301
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15289: LD_EXP 31
15293: PPUSH
15294: LD_STRING 04_1_Sophia_L
15296: PPUSH
15297: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15301: LD_EXP 30
15305: PUSH
15306: LD_EXP 30
15310: PUSH
15311: LD_EXP 39
15315: IN
15316: NOT
15317: AND
15318: IFFALSE 15334
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15320: LD_EXP 30
15324: PPUSH
15325: LD_STRING 04_1_Kaia
15327: PPUSH
15328: CALL_OW 38
15332: GO 15352
// if Kaia then
15334: LD_EXP 30
15338: IFFALSE 15352
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15340: LD_EXP 30
15344: PPUSH
15345: LD_STRING 04_1_Kaia_L
15347: PPUSH
15348: CALL_OW 38
// if Givi then
15352: LD_EXP 26
15356: IFFALSE 15370
// SaveCharacters ( Givi , 04_1_Givi ) ;
15358: LD_EXP 26
15362: PPUSH
15363: LD_STRING 04_1_Givi
15365: PPUSH
15366: CALL_OW 38
// if Mike then
15370: LD_EXP 27
15374: IFFALSE 15388
// SaveCharacters ( Mike , 04_1_Mike ) ;
15376: LD_EXP 27
15380: PPUSH
15381: LD_STRING 04_1_Mike
15383: PPUSH
15384: CALL_OW 38
// if Markov then
15388: LD_EXP 32
15392: IFFALSE 15406
// SaveCharacters ( Markov , 04_1_Markov ) ;
15394: LD_EXP 32
15398: PPUSH
15399: LD_STRING 04_1_Markov
15401: PPUSH
15402: CALL_OW 38
// if Kurt then
15406: LD_EXP 34
15410: IFFALSE 15424
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15412: LD_EXP 34
15416: PPUSH
15417: LD_STRING 04_1_Kurt
15419: PPUSH
15420: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15424: LD_EXP 37
15428: PUSH
15429: LD_EXP 39
15433: DIFF
15434: IFFALSE 15454
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15436: LD_EXP 37
15440: PUSH
15441: LD_EXP 39
15445: DIFF
15446: PPUSH
15447: LD_STRING 04_1_others
15449: PPUSH
15450: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15454: LD_EXP 39
15458: PUSH
15459: LD_EXP 37
15463: AND
15464: IFFALSE 15549
// begin tmp := [ ] ;
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: EMPTY
15472: ST_TO_ADDR
// for i in heikeSecondSquad do
15473: LD_ADDR_VAR 0 1
15477: PUSH
15478: LD_EXP 37
15482: PUSH
15483: FOR_IN
15484: IFFALSE 15529
// if i in aviradzeSquad then
15486: LD_VAR 0 1
15490: PUSH
15491: LD_EXP 39
15495: IN
15496: IFFALSE 15527
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15498: LD_ADDR_VAR 0 2
15502: PUSH
15503: LD_VAR 0 2
15507: PPUSH
15508: LD_VAR 0 2
15512: PUSH
15513: LD_INT 1
15515: PLUS
15516: PPUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 1
15526: ST_TO_ADDR
15527: GO 15483
15529: POP
15530: POP
// if tmp then
15531: LD_VAR 0 2
15535: IFFALSE 15549
// SaveCharacters ( tmp , 04_1_others_L ) ;
15537: LD_VAR 0 2
15541: PPUSH
15542: LD_STRING 04_1_others_L
15544: PPUSH
15545: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15549: LD_ADDR_VAR 0 2
15553: PUSH
15554: LD_INT 22
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 23
15566: PUSH
15567: LD_INT 0
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: ST_TO_ADDR
// if tmp then
15583: LD_VAR 0 2
15587: IFFALSE 15601
// SaveCharacters ( tmp , 04_1_apes ) ;
15589: LD_VAR 0 2
15593: PPUSH
15594: LD_STRING 04_1_apes
15596: PPUSH
15597: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 17
15608: PPUSH
15609: LD_INT 21
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PPUSH
15619: CALL_OW 70
15623: ST_TO_ADDR
// if tmp then
15624: LD_VAR 0 2
15628: IFFALSE 15922
// begin tmp2 := [ ] ;
15630: LD_ADDR_VAR 0 3
15634: PUSH
15635: EMPTY
15636: ST_TO_ADDR
// for i in tmp do
15637: LD_ADDR_VAR 0 1
15641: PUSH
15642: LD_VAR 0 2
15646: PUSH
15647: FOR_IN
15648: IFFALSE 15908
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 264
15659: PUSH
15660: LD_INT 32
15662: PUSH
15663: LD_INT 12
15665: PUSH
15666: LD_INT 51
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: LIST
15673: IN
15674: IFFALSE 15811
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15676: LD_ADDR_VAR 0 4
15680: PUSH
15681: LD_VAR 0 1
15685: PPUSH
15686: LD_INT 1
15688: PPUSH
15689: CALL_OW 289
15693: PUSH
15694: LD_VAR 0 1
15698: PPUSH
15699: LD_INT 2
15701: PPUSH
15702: CALL_OW 289
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15711: LD_ADDR_VAR 0 3
15715: PUSH
15716: LD_VAR 0 3
15720: PPUSH
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 1
15728: PLUS
15729: PPUSH
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 265
15739: PUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 262
15749: PUSH
15750: LD_VAR 0 1
15754: PPUSH
15755: CALL_OW 263
15759: PUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 264
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 248
15779: PUSH
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 256
15789: PUSH
15790: LD_VAR 0 4
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 1
15808: ST_TO_ADDR
// end else
15809: GO 15906
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15811: LD_ADDR_VAR 0 3
15815: PUSH
15816: LD_VAR 0 3
15820: PPUSH
15821: LD_VAR 0 3
15825: PUSH
15826: LD_INT 1
15828: PLUS
15829: PPUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 265
15839: PUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 262
15849: PUSH
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL_OW 263
15859: PUSH
15860: LD_VAR 0 1
15864: PPUSH
15865: CALL_OW 264
15869: PUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 248
15879: PUSH
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL_OW 256
15889: PUSH
15890: EMPTY
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: PPUSH
15901: CALL_OW 1
15905: ST_TO_ADDR
15906: GO 15647
15908: POP
15909: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15910: LD_VAR 0 3
15914: PPUSH
15915: LD_STRING 04_1_Vehicles
15917: PPUSH
15918: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15922: LD_EXP 21
15926: PPUSH
15927: LD_STRING 04_1_RuLabCaptured
15929: PPUSH
15930: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15934: LD_EXP 19
15938: PPUSH
15939: LD_STRING 04_1_EscapeCounter
15941: PPUSH
15942: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15946: LD_EXP 15
15950: PPUSH
15951: LD_STRING 04_1_BaseHill
15953: PPUSH
15954: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15958: LD_OWVAR 1
15962: PPUSH
15963: LD_STRING 04_1_Time
15965: PPUSH
15966: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15970: LD_EXP 14
15974: PPUSH
15975: LD_STRING 04_1_DeadCounter
15977: PPUSH
15978: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15982: LD_EXP 24
15986: PUSH
15987: LD_INT 112
15989: PPUSH
15990: CALL_OW 255
15994: MUL
15995: PUSH
15996: LD_INT 2
15998: EQUAL
15999: PPUSH
16000: LD_STRING 04_1_KaganCaptured
16002: PPUSH
16003: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16007: LD_INT 22
16009: PUSH
16010: LD_INT 2
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 34
16019: PUSH
16020: LD_INT 26
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 69
16035: PUSH
16036: LD_INT 0
16038: PLUS
16039: PPUSH
16040: LD_STRING 04_1_Flamethrower
16042: PPUSH
16043: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16047: LD_INT 1
16049: PPUSH
16050: LD_STRING __x1\04_cont2
16052: PPUSH
16053: CALL_OW 340
// end ; end_of_file
16057: PPOPN 4
16059: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16060: LD_VAR 0 1
16064: PPUSH
16065: CALL_OW 266
16069: PUSH
16070: LD_INT 0
16072: EQUAL
16073: PUSH
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL_OW 255
16083: PUSH
16084: LD_INT 2
16086: EQUAL
16087: AND
16088: IFFALSE 16098
// baseConstructed := true ;
16090: LD_ADDR_EXP 3
16094: PUSH
16095: LD_INT 1
16097: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 266
16107: PUSH
16108: LD_INT 6
16110: EQUAL
16111: PUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: CALL_OW 255
16121: PUSH
16122: LD_INT 2
16124: EQUAL
16125: AND
16126: IFFALSE 16136
// labConstructed := true ;
16128: LD_ADDR_EXP 4
16132: PUSH
16133: LD_INT 1
16135: ST_TO_ADDR
// end ;
16136: PPOPN 1
16138: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16139: LD_VAR 0 1
16143: PUSH
16144: LD_EXP 25
16148: EQUAL
16149: IFFALSE 16158
// YouLost ( Heike ) ;
16151: LD_STRING Heike
16153: PPUSH
16154: CALL_OW 104
// if un = Omar then
16158: LD_VAR 0 1
16162: PUSH
16163: LD_EXP 33
16167: EQUAL
16168: IFFALSE 16177
// YouLost ( Omar ) ;
16170: LD_STRING Omar
16172: PPUSH
16173: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16177: LD_VAR 0 1
16181: PUSH
16182: LD_INT 22
16184: PUSH
16185: LD_INT 2
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 23
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 21
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 69
16221: IN
16222: IFFALSE 16238
// loseCounter := loseCounter + 1 ;
16224: LD_ADDR_EXP 14
16228: PUSH
16229: LD_EXP 14
16233: PUSH
16234: LD_INT 1
16236: PLUS
16237: ST_TO_ADDR
// if un = omikron then
16238: LD_VAR 0 1
16242: PUSH
16243: LD_INT 64
16245: EQUAL
16246: IFFALSE 16256
// omicronFall := true ;
16248: LD_ADDR_EXP 13
16252: PUSH
16253: LD_INT 1
16255: ST_TO_ADDR
// if un = kirov then
16256: LD_VAR 0 1
16260: PUSH
16261: LD_INT 71
16263: EQUAL
16264: IFFALSE 16281
// begin ChangeMissionObjectives ( KirovDone ) ;
16266: LD_STRING KirovDone
16268: PPUSH
16269: CALL_OW 337
// kirovDestroyed := true ;
16273: LD_ADDR_EXP 16
16277: PUSH
16278: LD_INT 1
16280: ST_TO_ADDR
// end ; if un = beria then
16281: LD_VAR 0 1
16285: PUSH
16286: LD_INT 106
16288: EQUAL
16289: IFFALSE 16306
// begin ChangeMissionObjectives ( BeriaDone ) ;
16291: LD_STRING BeriaDone
16293: PPUSH
16294: CALL_OW 337
// beriaDestroyed := true ;
16298: LD_ADDR_EXP 17
16302: PUSH
16303: LD_INT 1
16305: ST_TO_ADDR
// end ; if un = kagan then
16306: LD_VAR 0 1
16310: PUSH
16311: LD_INT 112
16313: EQUAL
16314: IFFALSE 16331
// begin ChangeMissionObjectives ( KaganDone ) ;
16316: LD_STRING KaganDone
16318: PPUSH
16319: CALL_OW 337
// kaganDestroyed := true ;
16323: LD_ADDR_EXP 18
16327: PUSH
16328: LD_INT 1
16330: ST_TO_ADDR
// end ; if un in russianPatrol then
16331: LD_VAR 0 1
16335: PUSH
16336: LD_EXP 47
16340: IN
16341: IFFALSE 16382
// begin if GetTag ( un ) = 2 then
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 110
16352: PUSH
16353: LD_INT 2
16355: EQUAL
16356: IFFALSE 16366
// spottedByPatrol := false ;
16358: LD_ADDR_EXP 7
16362: PUSH
16363: LD_INT 0
16365: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
16366: LD_ADDR_EXP 47
16370: PUSH
16371: LD_EXP 47
16375: PUSH
16376: LD_VAR 0 1
16380: DIFF
16381: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
16382: LD_VAR 0 1
16386: PUSH
16387: LD_EXP 48
16391: IN
16392: IFFALSE 16410
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16394: LD_ADDR_EXP 48
16398: PUSH
16399: LD_EXP 48
16403: PUSH
16404: LD_VAR 0 1
16408: DIFF
16409: ST_TO_ADDR
// end ;
16410: PPOPN 1
16412: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16418: LD_VAR 0 1
16422: PUSH
16423: LD_INT 2
16425: PUSH
16426: LD_INT 22
16428: PUSH
16429: LD_INT 3
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_INT 4
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 22
16448: PUSH
16449: LD_INT 6
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 30
16464: PUSH
16465: LD_INT 32
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PPUSH
16476: CALL_OW 69
16480: IN
16481: IFFALSE 16654
// begin sol := UnitsInside ( un ) ;
16483: LD_ADDR_VAR 0 3
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: CALL_OW 313
16497: ST_TO_ADDR
// if not sol then
16498: LD_VAR 0 3
16502: NOT
16503: IFFALSE 16507
// exit ;
16505: GO 16654
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16507: LD_ADDR_VAR 0 4
16511: PUSH
16512: LD_INT 22
16514: PUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 255
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 2
16531: PUSH
16532: LD_INT 30
16534: PUSH
16535: LD_INT 4
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 30
16544: PUSH
16545: LD_INT 5
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PPUSH
16561: CALL_OW 69
16565: ST_TO_ADDR
// if not nearestBarracks then
16566: LD_VAR 0 4
16570: NOT
16571: IFFALSE 16575
// exit ;
16573: GO 16654
// for i in nearestBarracks do
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_VAR 0 4
16584: PUSH
16585: FOR_IN
16586: IFFALSE 16621
// if UnitsInside ( i ) = 6 then
16588: LD_VAR 0 2
16592: PPUSH
16593: CALL_OW 313
16597: PUSH
16598: LD_INT 6
16600: EQUAL
16601: IFFALSE 16619
// nearestBarracks := nearestBarracks diff i ;
16603: LD_ADDR_VAR 0 4
16607: PUSH
16608: LD_VAR 0 4
16612: PUSH
16613: LD_VAR 0 2
16617: DIFF
16618: ST_TO_ADDR
16619: GO 16585
16621: POP
16622: POP
// if not nearestBarracks then
16623: LD_VAR 0 4
16627: NOT
16628: IFFALSE 16632
// exit ;
16630: GO 16654
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16632: LD_VAR 0 3
16636: PUSH
16637: LD_INT 1
16639: ARRAY
16640: PPUSH
16641: LD_VAR 0 4
16645: PUSH
16646: LD_INT 1
16648: ARRAY
16649: PPUSH
16650: CALL_OW 120
// end ; end ;
16654: PPOPN 4
16656: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16657: LD_INT 0
16659: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16660: LD_EXP 8
16664: NOT
16665: PUSH
16666: LD_EXP 5
16670: NOT
16671: OR
16672: IFFALSE 16676
// exit ;
16674: GO 16744
// for i in camAreas do
16676: LD_ADDR_VAR 0 5
16680: PUSH
16681: LD_EXP 8
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16742
// if InArea ( x , y , i ) then
16689: LD_VAR 0 3
16693: PPUSH
16694: LD_VAR 0 4
16698: PPUSH
16699: LD_VAR 0 5
16703: PPUSH
16704: CALL_OW 309
16708: IFFALSE 16740
// begin SetAreaMapShow ( i , 0 ) ;
16710: LD_VAR 0 5
16714: PPUSH
16715: LD_INT 0
16717: PPUSH
16718: CALL_OW 424
// camAreas := camAreas diff i ;
16722: LD_ADDR_EXP 8
16726: PUSH
16727: LD_EXP 8
16731: PUSH
16732: LD_VAR 0 5
16736: DIFF
16737: ST_TO_ADDR
// break ;
16738: GO 16742
// end ;
16740: GO 16686
16742: POP
16743: POP
// end ;
16744: PPOPN 5
16746: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16747: LD_VAR 0 1
16751: PUSH
16752: LD_INT 2
16754: EQUAL
16755: PUSH
16756: LD_VAR 0 2
16760: PUSH
16761: LD_INT 5
16763: PUSH
16764: LD_INT 8
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: IN
16771: AND
16772: IFFALSE 16781
// YouLost ( Ally ) ;
16774: LD_STRING Ally
16776: PPUSH
16777: CALL_OW 104
// end ;
16781: PPOPN 2
16783: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16784: LD_VAR 0 1
16788: PUSH
16789: LD_EXP 30
16793: EQUAL
16794: PUSH
16795: LD_VAR 0 2
16799: PUSH
16800: LD_INT 3
16802: PUSH
16803: LD_INT 6
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: IN
16810: AND
16811: IFFALSE 16842
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16813: LD_ADDR_EXP 23
16817: PUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 250
16827: PUSH
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 251
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: ST_TO_ADDR
// end ; end_of_file
16842: PPOPN 3
16844: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16845: LD_EXP 11
16849: NOT
16850: PUSH
16851: LD_INT 12
16853: PPUSH
16854: LD_INT 1
16856: PPUSH
16857: CALL_OW 287
16861: PUSH
16862: LD_INT 20
16864: PUSH
16865: LD_INT 16
16867: PUSH
16868: LD_INT 12
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: LD_OWVAR 67
16880: ARRAY
16881: LESS
16882: AND
16883: IFFALSE 16910
16885: GO 16887
16887: DISABLE
// begin enable ;
16888: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16889: LD_INT 1
16891: PPUSH
16892: LD_INT 5
16894: PPUSH
16895: CALL_OW 12
16899: PPUSH
16900: LD_INT 12
16902: PPUSH
16903: LD_INT 1
16905: PPUSH
16906: CALL_OW 55
// end ; end_of_file
16910: END
