// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 857 0 0
// PrepareArabian ;
  12: CALL 1231 0 0
// PrepareAmerican ;
  16: CALL 6760 0 0
// PrepareRussian ;
  20: CALL 2219 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8320 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: PUSH
 565: LD_VAR 0 2
 569: NOT
 570: OR
 571: IFFALSE 575
// exit ;
 573: GO 623
// if not See ( GetSide ( observer ) , unit ) then
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 255
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 292
 594: NOT
 595: IFFALSE 599
// exit ;
 597: GO 623
// result := GetDistUnits ( observer , unit ) < 12 ;
 599: LD_ADDR_VAR 0 3
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_VAR 0 2
 613: PPUSH
 614: CALL_OW 296
 618: PUSH
 619: LD_INT 12
 621: LESS
 622: ST_TO_ADDR
// end ;
 623: LD_VAR 0 3
 627: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 628: LD_INT 0
 630: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 631: LD_VAR 0 2
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: LD_VAR 0 2
 644: PUSH
 645: LD_INT 2
 647: ARRAY
 648: PPUSH
 649: CALL_OW 488
 653: PUSH
 654: LD_VAR 0 2
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: LD_VAR 0 2
 667: PUSH
 668: LD_INT 2
 670: ARRAY
 671: PPUSH
 672: CALL_OW 428
 676: PUSH
 677: LD_INT 0
 679: EQUAL
 680: AND
 681: IFFALSE 715
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 683: LD_VAR 0 1
 687: PPUSH
 688: LD_VAR 0 2
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 2
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 3
 710: PPUSH
 711: CALL_OW 48
// end ;
 715: LD_VAR 0 4
 719: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
// InitUc ;
 724: CALL_OW 18
// InitHc ;
 728: CALL_OW 19
// uc_side := 0 ;
 732: LD_ADDR_OWVAR 20
 736: PUSH
 737: LD_INT 0
 739: ST_TO_ADDR
// uc_nation := 0 ;
 740: LD_ADDR_OWVAR 21
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// for i = 1 to amount do
 748: LD_ADDR_VAR 0 4
 752: PUSH
 753: DOUBLE
 754: LD_INT 1
 756: DEC
 757: ST_TO_ADDR
 758: LD_VAR 0 2
 762: PUSH
 763: FOR_TO
 764: IFFALSE 846
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 766: LD_ADDR_OWVAR 29
 770: PUSH
 771: LD_INT 9
 773: PPUSH
 774: LD_INT 12
 776: PPUSH
 777: CALL_OW 12
 781: PUSH
 782: LD_INT 9
 784: PPUSH
 785: LD_INT 12
 787: PPUSH
 788: CALL_OW 12
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 797: LD_ADDR_OWVAR 35
 801: PUSH
 802: LD_INT 1
 804: NEG
 805: PPUSH
 806: LD_INT 1
 808: PPUSH
 809: CALL_OW 12
 813: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 814: LD_INT 0
 816: PPUSH
 817: LD_INT 12
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 827: CALL_OW 44
 831: PPUSH
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// end ;
 844: GO 763
 846: POP
 847: POP
// InitHc ;
 848: CALL_OW 19
// end ;
 852: LD_VAR 0 3
 856: RET
// export function CreateNature ; var i ; begin
 857: LD_INT 0
 859: PPUSH
 860: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 861: LD_INT 18
 863: PPUSH
 864: LD_INT 5
 866: PUSH
 867: LD_INT 4
 869: PUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL 720 0 2
// for i := 1 to 3 do
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: DOUBLE
 898: LD_INT 1
 900: DEC
 901: ST_TO_ADDR
 902: LD_INT 3
 904: PUSH
 905: FOR_TO
 906: IFFALSE 941
// begin hc_class := 21 ;
 908: LD_ADDR_OWVAR 28
 912: PUSH
 913: LD_INT 21
 915: ST_TO_ADDR
// hc_gallery :=  ;
 916: LD_ADDR_OWVAR 33
 920: PUSH
 921: LD_STRING 
 923: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 924: CALL_OW 44
 928: PPUSH
 929: LD_INT 18
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// end ;
 939: GO 905
 941: POP
 942: POP
// for i := 1 to 2 do
 943: LD_ADDR_VAR 0 2
 947: PUSH
 948: DOUBLE
 949: LD_INT 1
 951: DEC
 952: ST_TO_ADDR
 953: LD_INT 2
 955: PUSH
 956: FOR_TO
 957: IFFALSE 992
// begin hc_class := 18 ;
 959: LD_ADDR_OWVAR 28
 963: PUSH
 964: LD_INT 18
 966: ST_TO_ADDR
// hc_gallery :=  ;
 967: LD_ADDR_OWVAR 33
 971: PUSH
 972: LD_STRING 
 974: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 975: CALL_OW 44
 979: PPUSH
 980: LD_INT 18
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 49
// end ;
 990: GO 956
 992: POP
 993: POP
// for i := 1 to 2 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 2
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1043
// begin hc_class := 13 ;
1010: LD_ADDR_OWVAR 28
1014: PUSH
1015: LD_INT 13
1017: ST_TO_ADDR
// hc_gallery :=  ;
1018: LD_ADDR_OWVAR 33
1022: PUSH
1023: LD_STRING 
1025: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1026: CALL_OW 44
1030: PPUSH
1031: LD_INT 18
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end ;
1041: GO 1007
1043: POP
1044: POP
// end ;
1045: LD_VAR 0 1
1049: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1050: LD_INT 0
1052: PPUSH
1053: PPUSH
1054: PPUSH
1055: PPUSH
1056: PPUSH
// result := false ;
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// if not sideList or not enemySide then
1065: LD_VAR 0 1
1069: NOT
1070: PUSH
1071: LD_VAR 0 2
1075: NOT
1076: OR
1077: IFFALSE 1081
// exit ;
1079: GO 1226
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1081: LD_ADDR_VAR 0 7
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 69
1102: ST_TO_ADDR
// if not tmp then
1103: LD_VAR 0 7
1107: NOT
1108: IFFALSE 1112
// exit ;
1110: GO 1226
// for s in sideList do
1112: LD_ADDR_VAR 0 6
1116: PUSH
1117: LD_VAR 0 1
1121: PUSH
1122: FOR_IN
1123: IFFALSE 1224
// for i in tmp do
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_VAR 0 7
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1220
// if See ( s , i ) then
1138: LD_VAR 0 6
1142: PPUSH
1143: LD_VAR 0 5
1147: PPUSH
1148: CALL_OW 292
1152: IFFALSE 1218
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1154: LD_ADDR_VAR 0 8
1158: PUSH
1159: LD_INT 22
1161: PUSH
1162: LD_VAR 0 6
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 69
1175: PPUSH
1176: LD_VAR 0 5
1180: PPUSH
1181: CALL_OW 74
1185: ST_TO_ADDR
// if tmp2 in exceptUnits then
1186: LD_VAR 0 8
1190: PUSH
1191: LD_VAR 0 3
1195: IN
1196: IFFALSE 1202
// continue else
1198: GO 1135
1200: GO 1218
// begin result := tmp2 ;
1202: LD_ADDR_VAR 0 4
1206: PUSH
1207: LD_VAR 0 8
1211: ST_TO_ADDR
// exit ;
1212: POP
1213: POP
1214: POP
1215: POP
1216: GO 1226
// end ; end ;
1218: GO 1135
1220: POP
1221: POP
1222: GO 1122
1224: POP
1225: POP
// end ; end_of_file
1226: LD_VAR 0 4
1230: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
// if cargoRecycled then
1235: LD_EXP 25
1239: IFFALSE 1267
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1241: LD_INT 82
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1254: LD_INT 83
1256: PPUSH
1257: LD_INT 2
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 322
// end ; uc_side := 5 ;
1267: LD_ADDR_OWVAR 20
1271: PUSH
1272: LD_INT 5
1274: ST_TO_ADDR
// uc_nation := 2 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 2
1282: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1283: LD_ADDR_EXP 37
1287: PUSH
1288: LD_STRING Abdul
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: LD_STRING 
1296: PPUSH
1297: CALL 38409 0 3
1301: ST_TO_ADDR
// uc_side := 2 ;
1302: LD_ADDR_OWVAR 20
1306: PUSH
1307: LD_INT 2
1309: ST_TO_ADDR
// uc_nation := 2 ;
1310: LD_ADDR_OWVAR 21
1314: PUSH
1315: LD_INT 2
1317: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Heike
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 38409 0 3
1341: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Ibrahim
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 38409 0 3
1365: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 27
1370: PUSH
1371: LD_STRING Givi
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 38409 0 3
1389: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_STRING Kamil
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 38409 0 3
1413: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 31
1418: PUSH
1419: LD_STRING Kaia
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 38409 0 3
1437: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 32
1442: PUSH
1443: LD_STRING Sophia
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 38409 0 3
1461: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1462: LD_ADDR_EXP 33
1466: PUSH
1467: LD_STRING Markov
1469: PPUSH
1470: LD_EXP 1
1474: NOT
1475: PPUSH
1476: LD_EXP 2
1480: PPUSH
1481: CALL 38409 0 3
1485: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1486: LD_ADDR_EXP 36
1490: PUSH
1491: LD_STRING Aviradze
1493: PPUSH
1494: LD_EXP 1
1498: NOT
1499: PPUSH
1500: LD_EXP 2
1504: PPUSH
1505: CALL 38409 0 3
1509: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1510: LD_ADDR_EXP 40
1514: PUSH
1515: EMPTY
1516: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1517: LD_ADDR_EXP 38
1521: PUSH
1522: LD_STRING 03_others
1524: PPUSH
1525: CALL_OW 31
1529: ST_TO_ADDR
// uc_side := 5 ;
1530: LD_ADDR_OWVAR 20
1534: PUSH
1535: LD_INT 5
1537: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1538: LD_ADDR_EXP 35
1542: PUSH
1543: LD_STRING Kurt
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: LD_STRING 
1551: PPUSH
1552: CALL 38409 0 3
1556: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 28
1561: PUSH
1562: LD_STRING Mike
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 38409 0 3
1580: ST_TO_ADDR
// if Mike then
1581: LD_EXP 28
1585: IFFALSE 1608
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1587: LD_EXP 28
1591: PPUSH
1592: LD_INT 142
1594: PPUSH
1595: LD_INT 63
1597: PPUSH
1598: LD_INT 2
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1608: LD_EXP 35
1612: PPUSH
1613: LD_INT 142
1615: PPUSH
1616: LD_INT 63
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1629: LD_EXP 35
1633: PUSH
1634: LD_EXP 28
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 140
// end ;
1647: LD_VAR 0 1
1651: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1652: LD_INT 0
1654: PPUSH
1655: PPUSH
1656: PPUSH
1657: PPUSH
// uc_side := 5 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 5
1665: ST_TO_ADDR
// uc_nation := 2 ;
1666: LD_ADDR_OWVAR 21
1670: PUSH
1671: LD_INT 2
1673: ST_TO_ADDR
// InitHc ;
1674: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1678: LD_ADDR_EXP 34
1682: PUSH
1683: LD_STRING Omar
1685: PPUSH
1686: LD_INT 0
1688: PPUSH
1689: LD_STRING 
1691: PPUSH
1692: CALL 38409 0 3
1696: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1697: LD_EXP 34
1701: PPUSH
1702: LD_INT 284
1704: PPUSH
1705: LD_INT 163
1707: PPUSH
1708: LD_INT 0
1710: PPUSH
1711: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1715: LD_EXP 34
1719: PPUSH
1720: LD_INT 256
1722: PPUSH
1723: LD_INT 129
1725: PPUSH
1726: CALL_OW 111
// wait ( 0 0$2 ) ;
1730: LD_INT 70
1732: PPUSH
1733: CALL_OW 67
// omarSquad := [ ] ;
1737: LD_ADDR_EXP 39
1741: PUSH
1742: EMPTY
1743: ST_TO_ADDR
// for i := 1 to 5 do
1744: LD_ADDR_VAR 0 2
1748: PUSH
1749: DOUBLE
1750: LD_INT 1
1752: DEC
1753: ST_TO_ADDR
1754: LD_INT 5
1756: PUSH
1757: FOR_TO
1758: IFFALSE 1964
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1760: LD_INT 5
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 14
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 2
1783: MOD
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: ARRAY
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: LD_INT 25
1798: PUSH
1799: LD_INT 27
1801: PUSH
1802: LD_INT 26
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 3
1817: MOD
1818: PUSH
1819: LD_INT 1
1821: PLUS
1822: ARRAY
1823: PPUSH
1824: LD_INT 100
1826: PPUSH
1827: CALL 386 0 7
// veh := CreateVehicle ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: CALL_OW 45
1840: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1841: LD_VAR 0 4
1845: PPUSH
1846: LD_INT 5
1848: PPUSH
1849: CALL_OW 233
// omarSquad := omarSquad union veh ;
1853: LD_ADDR_EXP 39
1857: PUSH
1858: LD_EXP 39
1862: PUSH
1863: LD_VAR 0 4
1867: UNION
1868: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 284
1876: PPUSH
1877: LD_INT 163
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1887: LD_INT 0
1889: PPUSH
1890: LD_INT 3
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL_OW 380
// un := CreateHuman ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: CALL_OW 44
1909: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1910: LD_ADDR_EXP 39
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_VAR 0 3
1924: UNION
1925: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1926: LD_VAR 0 3
1930: PPUSH
1931: LD_VAR 0 4
1935: PPUSH
1936: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 271
1947: PPUSH
1948: LD_INT 144
1950: PPUSH
1951: CALL_OW 111
// wait ( 0 0$2 ) ;
1955: LD_INT 70
1957: PPUSH
1958: CALL_OW 67
// end ;
1962: GO 1757
1964: POP
1965: POP
// for i := 1 to 3 do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_INT 3
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2063
// begin PrepareHuman ( false , 1 , 2 ) ;
1982: LD_INT 0
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 380
// un := CreateHuman ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: CALL_OW 44
2004: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2005: LD_ADDR_EXP 39
2009: PUSH
2010: LD_EXP 39
2014: PUSH
2015: LD_VAR 0 3
2019: UNION
2020: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 284
2028: PPUSH
2029: LD_INT 163
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2039: LD_VAR 0 3
2043: PPUSH
2044: LD_INT 257
2046: PPUSH
2047: LD_INT 138
2049: PPUSH
2050: CALL_OW 111
// wait ( 0 0$1 ) ;
2054: LD_INT 35
2056: PPUSH
2057: CALL_OW 67
// end ;
2061: GO 1979
2063: POP
2064: POP
// for i := 1 to 6 do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_INT 6
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2212
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2081: LD_INT 0
2083: PPUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 4
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_VAR 0 2
2102: PUSH
2103: LD_INT 3
2105: MOD
2106: PUSH
2107: LD_INT 1
2109: PLUS
2110: ARRAY
2111: PPUSH
2112: LD_INT 3
2114: PPUSH
2115: CALL_OW 380
// un := CreateHuman ;
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: CALL_OW 44
2128: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2129: LD_ADDR_EXP 39
2133: PUSH
2134: LD_EXP 39
2138: PUSH
2139: LD_VAR 0 3
2143: UNION
2144: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 225
2152: PPUSH
2153: LD_INT 163
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 48
// if i = 1 then
2163: LD_VAR 0 2
2167: PUSH
2168: LD_INT 1
2170: EQUAL
2171: IFFALSE 2188
// SetAttr ( un , attr_speed , 12 ) ;
2173: LD_VAR 0 3
2177: PPUSH
2178: LD_INT 2
2180: PPUSH
2181: LD_INT 12
2183: PPUSH
2184: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 222
2195: PPUSH
2196: LD_INT 157
2198: PPUSH
2199: CALL_OW 111
// wait ( 0 0$1 ) ;
2203: LD_INT 35
2205: PPUSH
2206: CALL_OW 67
// end ;
2210: GO 2078
2212: POP
2213: POP
// end ; end_of_file
2214: LD_VAR 0 1
2218: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2219: LD_INT 0
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 149
2232: PPUSH
2233: LD_INT 67
2235: PPUSH
2236: CALL_OW 428
2240: PPUSH
2241: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2245: LD_ADDR_EXP 51
2249: PUSH
2250: LD_INT 111
2252: PPUSH
2253: LD_INT 89
2255: PPUSH
2256: CALL_OW 428
2260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_INT 21
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 23
2278: PUSH
2279: LD_INT 3
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 69
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2312
// SetBLevel ( i , 5 ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL_OW 241
2310: GO 2295
2312: POP
2313: POP
// SetBName ( kirov , kirov ) ;
2314: LD_INT 71
2316: PPUSH
2317: LD_STRING kirov
2319: PPUSH
2320: CALL_OW 500
// SetBName ( beria , beria ) ;
2324: LD_INT 106
2326: PPUSH
2327: LD_STRING beria
2329: PPUSH
2330: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2334: LD_INT 112
2336: PPUSH
2337: LD_STRING kagan
2339: PPUSH
2340: CALL_OW 500
// uc_side := 6 ;
2344: LD_ADDR_OWVAR 20
2348: PUSH
2349: LD_INT 6
2351: ST_TO_ADDR
// uc_nation := 3 ;
2352: LD_ADDR_OWVAR 21
2356: PUSH
2357: LD_INT 3
2359: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_INT 22
2367: PUSH
2368: LD_INT 6
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 30
2377: PUSH
2378: LD_INT 5
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: LD_INT 1
2396: ARRAY
2397: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 6
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 30
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2436: LD_ADDR_EXP 45
2440: PUSH
2441: EMPTY
2442: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2443: LD_ADDR_EXP 46
2447: PUSH
2448: EMPTY
2449: ST_TO_ADDR
// russianPatrol := [ ] ;
2450: LD_ADDR_EXP 48
2454: PUSH
2455: EMPTY
2456: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2457: LD_ADDR_EXP 41
2461: PUSH
2462: LD_STRING Kurin
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 38409 0 3
2475: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2476: LD_EXP 41
2480: PPUSH
2481: LD_INT 71
2483: PPUSH
2484: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2488: LD_ADDR_EXP 43
2492: PUSH
2493: LD_STRING Popov
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_STRING 
2501: PPUSH
2502: CALL 38409 0 3
2506: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2507: LD_EXP 43
2511: PPUSH
2512: LD_INT 71
2514: PPUSH
2515: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2519: LD_ADDR_EXP 42
2523: PUSH
2524: LD_STRING Grishko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 38409 0 3
2537: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2538: LD_EXP 42
2542: PPUSH
2543: LD_INT 207
2545: PPUSH
2546: LD_INT 106
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2556: LD_EXP 42
2560: PPUSH
2561: LD_INT 209
2563: PPUSH
2564: LD_INT 106
2566: PPUSH
2567: CALL_OW 118
// for i := 1 to 2 do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: DOUBLE
2577: LD_INT 1
2579: DEC
2580: ST_TO_ADDR
2581: LD_INT 2
2583: PUSH
2584: FOR_TO
2585: IFFALSE 2640
// begin PrepareHuman ( false , 2 , 2 ) ;
2587: LD_INT 0
2589: PPUSH
2590: LD_INT 2
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 380
// un := CreateHuman ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: CALL_OW 44
2609: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2610: LD_VAR 0 3
2614: PPUSH
2615: LD_INT 71
2617: PPUSH
2618: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2622: LD_ADDR_EXP 45
2626: PUSH
2627: LD_EXP 45
2631: PUSH
2632: LD_VAR 0 3
2636: UNION
2637: ST_TO_ADDR
// end ;
2638: GO 2584
2640: POP
2641: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: DOUBLE
2648: LD_INT 1
2650: DEC
2651: ST_TO_ADDR
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: LD_INT 6
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_OWVAR 67
2674: ARRAY
2675: PUSH
2676: FOR_TO
2677: IFFALSE 2755
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2679: LD_INT 0
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 4
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_OWVAR 67
2707: ARRAY
2708: PPUSH
2709: CALL_OW 380
// un := CreateHuman ;
2713: LD_ADDR_VAR 0 3
2717: PUSH
2718: CALL_OW 44
2722: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2723: LD_VAR 0 3
2727: PPUSH
2728: LD_VAR 0 5
2732: PPUSH
2733: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2737: LD_ADDR_EXP 45
2741: PUSH
2742: LD_EXP 45
2746: PUSH
2747: LD_VAR 0 3
2751: UNION
2752: ST_TO_ADDR
// end ;
2753: GO 2676
2755: POP
2756: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2757: LD_ADDR_VAR 0 2
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_INT 6
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 30
2774: PUSH
2775: LD_INT 32
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: PUSH
2791: FOR_IN
2792: IFFALSE 2870
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2794: LD_INT 0
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PUSH
2803: LD_INT 4
2805: PUSH
2806: LD_INT 4
2808: PUSH
2809: LD_INT 5
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: LD_OWVAR 67
2822: ARRAY
2823: PPUSH
2824: CALL_OW 380
// un := CreateHuman ;
2828: LD_ADDR_VAR 0 3
2832: PUSH
2833: CALL_OW 44
2837: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2852: LD_ADDR_EXP 45
2856: PUSH
2857: LD_EXP 45
2861: PUSH
2862: LD_VAR 0 3
2866: UNION
2867: ST_TO_ADDR
// end ;
2868: GO 2791
2870: POP
2871: POP
// for i := 1 to 3 do
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: DOUBLE
2878: LD_INT 1
2880: DEC
2881: ST_TO_ADDR
2882: LD_INT 3
2884: PUSH
2885: FOR_TO
2886: IFFALSE 2941
// begin PrepareHuman ( false , 3 , 3 ) ;
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: CALL_OW 380
// un := CreateHuman ;
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: CALL_OW 44
2910: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_INT 92
2918: PPUSH
2919: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2923: LD_ADDR_EXP 45
2927: PUSH
2928: LD_EXP 45
2932: PUSH
2933: LD_VAR 0 3
2937: UNION
2938: ST_TO_ADDR
// end ;
2939: GO 2885
2941: POP
2942: POP
// for i := 1 to 2 do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_INT 2
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3012
// begin PrepareHuman ( false , 4 , 3 ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: CALL_OW 380
// un := CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 83
2989: PPUSH
2990: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2994: LD_ADDR_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PUSH
3004: LD_VAR 0 3
3008: UNION
3009: ST_TO_ADDR
// end ;
3010: GO 2956
3012: POP
3013: POP
// for i := 1 to 5 do
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: DOUBLE
3020: LD_INT 1
3022: DEC
3023: ST_TO_ADDR
3024: LD_INT 5
3026: PUSH
3027: FOR_TO
3028: IFFALSE 3085
// begin PrepareHuman ( false , 1 , 3 ) ;
3030: LD_INT 0
3032: PPUSH
3033: LD_INT 1
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: CALL_OW 380
// un := CreateHuman ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: CALL_OW 44
3052: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3053: LD_VAR 0 3
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3067: LD_ADDR_EXP 47
3071: PUSH
3072: LD_EXP 47
3076: PUSH
3077: LD_VAR 0 3
3081: UNION
3082: ST_TO_ADDR
// end ;
3083: GO 3027
3085: POP
3086: POP
// russianCargo := [ ] ;
3087: LD_ADDR_EXP 50
3091: PUSH
3092: EMPTY
3093: ST_TO_ADDR
// for i := 1 to 2 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 2
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3240
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3110: LD_INT 6
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 21
3118: PPUSH
3119: LD_INT 1
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 51
3127: PPUSH
3128: LD_INT 100
3130: PPUSH
3131: CALL 386 0 7
// un := CreateVehicle ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 45
3144: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3145: LD_ADDR_EXP 50
3149: PUSH
3150: LD_EXP 50
3154: PUSH
3155: LD_VAR 0 3
3159: UNION
3160: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: LD_INT 100
3171: PPUSH
3172: CALL_OW 290
// SetDir ( un , 4 ) ;
3176: LD_VAR 0 3
3180: PPUSH
3181: LD_INT 4
3183: PPUSH
3184: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_INT 147
3195: PPUSH
3196: LD_INT 103
3198: PPUSH
3199: LD_INT 4
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_OWVAR 67
3219: PPUSH
3220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3224: CALL_OW 44
3228: PPUSH
3229: LD_VAR 0 3
3233: PPUSH
3234: CALL_OW 52
// end ;
3238: GO 3107
3240: POP
3241: POP
// uc_side := 3 ;
3242: LD_ADDR_OWVAR 20
3246: PUSH
3247: LD_INT 3
3249: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3250: LD_ADDR_EXP 44
3254: PUSH
3255: LD_STRING Burlak
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: LD_STRING 
3263: PPUSH
3264: CALL 38409 0 3
3268: ST_TO_ADDR
// for i := 1 to 5 do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 5
3281: PUSH
3282: FOR_TO
3283: IFFALSE 3376
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 1
3290: PPUSH
3291: LD_OWVAR 67
3295: PUSH
3296: LD_INT 1
3298: PLUS
3299: PPUSH
3300: CALL_OW 380
// un := CreateHuman ;
3304: LD_ADDR_VAR 0 3
3308: PUSH
3309: CALL_OW 44
3313: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3314: LD_VAR 0 3
3318: PPUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 3
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PPUSH
3354: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3358: LD_ADDR_EXP 46
3362: PUSH
3363: LD_EXP 46
3367: PUSH
3368: LD_VAR 0 3
3372: UNION
3373: ST_TO_ADDR
// end ;
3374: GO 3282
3376: POP
3377: POP
// for i := 1 to 2 do
3378: LD_ADDR_VAR 0 2
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_INT 2
3390: PUSH
3391: FOR_TO
3392: IFFALSE 3483
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3394: LD_INT 0
3396: PPUSH
3397: LD_INT 1
3399: PPUSH
3400: LD_OWVAR 67
3404: PUSH
3405: LD_INT 1
3407: PLUS
3408: PPUSH
3409: CALL_OW 380
// un := CreateHuman ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: CALL_OW 44
3422: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 22
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 30
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PPUSH
3452: CALL_OW 69
3456: PUSH
3457: LD_INT 1
3459: ARRAY
3460: PPUSH
3461: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3465: LD_ADDR_EXP 46
3469: PUSH
3470: LD_EXP 46
3474: PUSH
3475: LD_VAR 0 3
3479: UNION
3480: ST_TO_ADDR
// end ;
3481: GO 3391
3483: POP
3484: POP
// for i := 1 to 2 do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: DOUBLE
3491: LD_INT 1
3493: DEC
3494: ST_TO_ADDR
3495: LD_INT 2
3497: PUSH
3498: FOR_TO
3499: IFFALSE 3586
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3501: LD_INT 0
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_OWVAR 67
3511: PPUSH
3512: CALL_OW 380
// un := CreateHuman ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: CALL_OW 44
3525: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_INT 22
3533: PUSH
3534: LD_INT 3
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 7
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 69
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3568: LD_ADDR_EXP 46
3572: PUSH
3573: LD_EXP 46
3577: PUSH
3578: LD_VAR 0 3
3582: UNION
3583: ST_TO_ADDR
// end ;
3584: GO 3498
3586: POP
3587: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3588: LD_INT 0
3590: PPUSH
3591: LD_INT 2
3593: PPUSH
3594: LD_OWVAR 67
3598: PPUSH
3599: CALL_OW 380
// un := CreateHuman ;
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_INT 106
3620: PPUSH
3621: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3625: LD_ADDR_EXP 46
3629: PUSH
3630: LD_EXP 46
3634: PUSH
3635: LD_VAR 0 3
3639: UNION
3640: ST_TO_ADDR
// for i := 1 to 3 do
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 3
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3777
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 3
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 30
3674: PUSH
3675: LD_INT 31
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_VAR 0 2
3695: ARRAY
3696: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 1
3702: PPUSH
3703: LD_OWVAR 67
3707: PPUSH
3708: CALL_OW 380
// un := CreateHuman ;
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: CALL_OW 44
3721: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3722: LD_VAR 0 3
3726: PPUSH
3727: LD_VAR 0 6
3731: PPUSH
3732: CALL_OW 254
3736: PUSH
3737: LD_INT 3
3739: PLUS
3740: PPUSH
3741: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 6
3754: PPUSH
3755: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3759: LD_ADDR_EXP 46
3763: PUSH
3764: LD_EXP 46
3768: PUSH
3769: LD_VAR 0 3
3773: UNION
3774: ST_TO_ADDR
// end ;
3775: GO 3654
3777: POP
3778: POP
// if Difficulty > 1 then
3779: LD_OWVAR 67
3783: PUSH
3784: LD_INT 1
3786: GREATER
3787: IFFALSE 3862
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: LD_INT 23
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 44
3811: PPUSH
3812: LD_INT 100
3814: PPUSH
3815: CALL 386 0 7
3819: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_INT 73
3827: PPUSH
3828: LD_INT 110
3830: PPUSH
3831: LD_INT 0
3833: PPUSH
3834: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 3
3843: PPUSH
3844: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3848: CALL_OW 44
3852: PPUSH
3853: LD_VAR 0 3
3857: PPUSH
3858: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3862: LD_ADDR_EXP 49
3866: PUSH
3867: EMPTY
3868: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 6
3881: PUSH
3882: LD_INT 7
3884: PUSH
3885: LD_INT 8
3887: PUSH
3888: LD_INT 8
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: LD_OWVAR 67
3901: ARRAY
3902: PUSH
3903: FOR_TO
3904: IFFALSE 4128
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3906: LD_INT 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 23
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 2
3929: MOD
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ARRAY
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: LD_INT 43
3944: PUSH
3945: LD_INT 44
3947: PUSH
3948: LD_INT 42
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 3
3963: MOD
3964: PUSH
3965: LD_INT 1
3967: PLUS
3968: ARRAY
3969: PPUSH
3970: LD_INT 100
3972: PPUSH
3973: CALL 386 0 7
// un := CreateVehicle ;
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: CALL_OW 45
3986: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 5
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: PPUSH
4014: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4018: LD_ADDR_EXP 49
4022: PUSH
4023: LD_EXP 49
4027: PUSH
4028: LD_VAR 0 3
4032: UNION
4033: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4034: LD_VAR 0 3
4038: PPUSH
4039: LD_INT 127
4041: PPUSH
4042: LD_INT 89
4044: PPUSH
4045: LD_INT 7
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 50
// uc_side := 3 ;
4055: LD_ADDR_OWVAR 20
4059: PUSH
4060: LD_INT 3
4062: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4063: LD_INT 0
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 380
// un := CreateHuman ;
4076: LD_ADDR_VAR 0 3
4080: PUSH
4081: CALL_OW 44
4085: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4086: LD_ADDR_EXP 49
4090: PUSH
4091: LD_EXP 49
4095: PUSH
4096: LD_VAR 0 3
4100: UNION
4101: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4102: LD_VAR 0 3
4106: PPUSH
4107: LD_EXP 49
4111: PUSH
4112: LD_EXP 49
4116: PUSH
4117: LD_INT 1
4119: MINUS
4120: ARRAY
4121: PPUSH
4122: CALL_OW 52
// end ;
4126: GO 3903
4128: POP
4129: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4130: LD_ADDR_VAR 0 2
4134: PUSH
4135: DOUBLE
4136: LD_INT 1
4138: DEC
4139: ST_TO_ADDR
4140: LD_INT 3
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 6
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: LD_OWVAR 67
4162: ARRAY
4163: PUSH
4164: FOR_TO
4165: IFFALSE 4231
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4167: LD_INT 0
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: LD_OWVAR 67
4177: PPUSH
4178: CALL_OW 380
// un := CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4192: LD_ADDR_EXP 49
4196: PUSH
4197: LD_EXP 49
4201: PUSH
4202: LD_VAR 0 3
4206: UNION
4207: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: LD_INT 91
4215: PPUSH
4216: LD_INT 60
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 50
// end ;
4229: GO 4164
4231: POP
4232: POP
// end ;
4233: LD_VAR 0 1
4237: RET
// every 0 0$3 do var i ;
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
// begin for i := 1 to 4 do
4244: LD_ADDR_VAR 0 1
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 4
4256: PUSH
4257: FOR_TO
4258: IFFALSE 4277
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4260: LD_EXP 47
4264: PUSH
4265: LD_VAR 0 1
4269: ARRAY
4270: PPUSH
4271: CALL_OW 122
4275: GO 4257
4277: POP
4278: POP
// wait ( 3 ) ;
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4286: LD_EXP 47
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: LD_INT 22
4297: PUSH
4298: LD_INT 6
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_INT 31
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PPUSH
4324: LD_EXP 47
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: CALL_OW 74
4337: PPUSH
4338: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4342: LD_EXP 47
4346: PUSH
4347: LD_INT 2
4349: ARRAY
4350: PPUSH
4351: LD_INT 211
4353: PPUSH
4354: LD_INT 107
4356: PPUSH
4357: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4361: LD_EXP 47
4365: PUSH
4366: LD_INT 2
4368: ARRAY
4369: PPUSH
4370: LD_INT 209
4372: PPUSH
4373: LD_INT 106
4375: PPUSH
4376: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4380: LD_EXP 47
4384: PUSH
4385: LD_INT 3
4387: ARRAY
4388: PPUSH
4389: LD_INT 209
4391: PPUSH
4392: LD_INT 103
4394: PPUSH
4395: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4399: LD_EXP 47
4403: PUSH
4404: LD_INT 3
4406: ARRAY
4407: PPUSH
4408: LD_INT 209
4410: PPUSH
4411: LD_INT 106
4413: PPUSH
4414: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4418: LD_EXP 47
4422: PUSH
4423: LD_INT 4
4425: ARRAY
4426: PPUSH
4427: LD_INT 227
4429: PPUSH
4430: LD_INT 117
4432: PPUSH
4433: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4437: LD_EXP 47
4441: PUSH
4442: LD_INT 4
4444: ARRAY
4445: PPUSH
4446: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4450: LD_INT 700
4452: PPUSH
4453: CALL_OW 67
// for i := 3 downto 2 do
4457: LD_ADDR_VAR 0 1
4461: PUSH
4462: DOUBLE
4463: LD_INT 3
4465: INC
4466: ST_TO_ADDR
4467: LD_INT 2
4469: PUSH
4470: FOR_DOWNTO
4471: IFFALSE 4638
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4473: LD_EXP 47
4477: PUSH
4478: LD_VAR 0 1
4482: ARRAY
4483: PPUSH
4484: LD_INT 200
4486: PPUSH
4487: LD_INT 91
4489: PPUSH
4490: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4494: LD_EXP 47
4498: PUSH
4499: LD_VAR 0 1
4503: ARRAY
4504: PPUSH
4505: LD_INT 210
4507: PPUSH
4508: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4512: LD_EXP 47
4516: PUSH
4517: LD_VAR 0 1
4521: ARRAY
4522: PPUSH
4523: LD_INT 224
4525: PPUSH
4526: LD_INT 93
4528: PPUSH
4529: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4533: LD_EXP 47
4537: PUSH
4538: LD_VAR 0 1
4542: ARRAY
4543: PPUSH
4544: LD_INT 210
4546: PPUSH
4547: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4551: LD_EXP 47
4555: PUSH
4556: LD_VAR 0 1
4560: ARRAY
4561: PPUSH
4562: LD_INT 239
4564: PPUSH
4565: LD_INT 123
4567: PPUSH
4568: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4572: LD_EXP 47
4576: PUSH
4577: LD_VAR 0 1
4581: ARRAY
4582: PPUSH
4583: LD_INT 210
4585: PPUSH
4586: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4590: LD_EXP 47
4594: PUSH
4595: LD_VAR 0 1
4599: ARRAY
4600: PPUSH
4601: LD_INT 212
4603: PPUSH
4604: LD_INT 105
4606: PPUSH
4607: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4611: LD_EXP 47
4615: PUSH
4616: LD_VAR 0 1
4620: ARRAY
4621: PPUSH
4622: LD_INT 700
4624: PPUSH
4625: CALL_OW 202
// wait ( 0 0$30 ) ;
4629: LD_INT 1050
4631: PPUSH
4632: CALL_OW 67
// end ;
4636: GO 4470
4638: POP
4639: POP
// until not activeGrishkoAI ;
4640: LD_EXP 10
4644: NOT
4645: IFFALSE 4450
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 221
4654: PPUSH
4655: LD_INT 110
4657: PPUSH
4658: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4662: LD_EXP 47
4666: PPUSH
4667: LD_INT 228
4669: PPUSH
4670: LD_INT 115
4672: PPUSH
4673: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4677: LD_EXP 47
4681: PPUSH
4682: CALL_OW 200
// end ;
4686: PPOPN 1
4688: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4689: LD_EXP 12
4693: IFFALSE 5439
4695: GO 4697
4697: DISABLE
4698: LD_INT 0
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
// begin uc_side := 6 ;
4704: LD_ADDR_OWVAR 20
4708: PUSH
4709: LD_INT 6
4711: ST_TO_ADDR
// uc_nation := 3 ;
4712: LD_ADDR_OWVAR 21
4716: PUSH
4717: LD_INT 3
4719: ST_TO_ADDR
// for i := 1 to 3 do
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_INT 3
4732: PUSH
4733: FOR_TO
4734: IFFALSE 4847
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4736: LD_INT 0
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: LD_INT 2
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_OWVAR 67
4764: ARRAY
4765: PPUSH
4766: CALL_OW 380
// un := CreateHuman ;
4770: LD_ADDR_VAR 0 1
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4780: LD_ADDR_EXP 48
4784: PUSH
4785: LD_EXP 48
4789: PUSH
4790: LD_VAR 0 1
4794: UNION
4795: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4808: LD_VAR 0 1
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4823: LD_VAR 0 1
4827: PPUSH
4828: LD_INT 210
4830: PPUSH
4831: LD_INT 159
4833: PPUSH
4834: CALL_OW 111
// wait ( 0 0$2 ) ;
4838: LD_INT 70
4840: PPUSH
4841: CALL_OW 67
// end ;
4845: GO 4733
4847: POP
4848: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4849: LD_ADDR_VAR 0 4
4853: PUSH
4854: LD_INT 172
4856: PUSH
4857: LD_INT 76
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 150
4866: PUSH
4867: LD_INT 38
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 148
4876: PUSH
4877: LD_INT 9
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 165
4886: PUSH
4887: LD_INT 38
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 191
4902: PUSH
4903: LD_INT 77
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 168
4912: PUSH
4913: LD_INT 42
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 166
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 151
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 221
4948: PUSH
4949: LD_INT 88
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 217
4958: PUSH
4959: LD_INT 64
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 232
4968: PUSH
4969: LD_INT 66
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 200
4978: PUSH
4979: LD_INT 56
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4997: LD_INT 35
4999: PPUSH
5000: CALL_OW 67
// for i := russianPatrol downto 1 do
5004: LD_ADDR_VAR 0 2
5008: PUSH
5009: DOUBLE
5010: LD_EXP 48
5014: INC
5015: ST_TO_ADDR
5016: LD_INT 1
5018: PUSH
5019: FOR_DOWNTO
5020: IFFALSE 5403
// begin if IsDead ( russianPatrol [ i ] ) then
5022: LD_EXP 48
5026: PUSH
5027: LD_VAR 0 2
5031: ARRAY
5032: PPUSH
5033: CALL_OW 301
5037: IFFALSE 5041
// continue ;
5039: GO 5019
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5041: LD_EXP 48
5045: PUSH
5046: LD_VAR 0 2
5050: ARRAY
5051: PPUSH
5052: CALL_OW 256
5056: PUSH
5057: LD_INT 990
5059: LESS
5060: PUSH
5061: LD_EXP 48
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: PPUSH
5072: CALL_OW 110
5076: PUSH
5077: LD_INT 1
5079: EQUAL
5080: AND
5081: IFFALSE 5101
// SetTag ( russianPatrol [ i ] , 2 ) ;
5083: LD_EXP 48
5087: PUSH
5088: LD_VAR 0 2
5092: ARRAY
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5101: LD_EXP 48
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PPUSH
5112: CALL_OW 110
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: IFFALSE 5187
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5122: LD_EXP 48
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: LD_INT 166
5135: PPUSH
5136: LD_INT 101
5138: PPUSH
5139: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5143: LD_EXP 48
5147: PUSH
5148: LD_VAR 0 2
5152: ARRAY
5153: PPUSH
5154: LD_INT 71
5156: PPUSH
5157: CALL_OW 296
5161: PUSH
5162: LD_INT 10
5164: LESS
5165: IFFALSE 5185
// SetTag ( russianPatrol [ i ] , 3 ) ;
5167: LD_EXP 48
5171: PUSH
5172: LD_VAR 0 2
5176: ARRAY
5177: PPUSH
5178: LD_INT 3
5180: PPUSH
5181: CALL_OW 109
// continue ;
5185: GO 5019
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5187: LD_EXP 48
5191: PUSH
5192: LD_VAR 0 2
5196: ARRAY
5197: PPUSH
5198: CALL_OW 110
5202: PUSH
5203: LD_INT 3
5205: EQUAL
5206: IFFALSE 5301
// begin spottedByPatrol := true ;
5208: LD_ADDR_EXP 7
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5216: LD_EXP 48
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: PPUSH
5227: CALL_OW 250
5231: PPUSH
5232: LD_EXP 48
5236: PUSH
5237: LD_VAR 0 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 251
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_INT 6
5253: NEG
5254: PPUSH
5255: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5259: LD_EXP 48
5263: PUSH
5264: LD_VAR 0 2
5268: ARRAY
5269: PPUSH
5270: CALL_OW 87
// DialogueOn ;
5274: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5278: LD_EXP 26
5282: PPUSH
5283: LD_STRING DH-Spot-f-3
5285: PPUSH
5286: CALL_OW 88
// DialogueOff ;
5290: CALL_OW 7
// YouLost ( Spotted ) ;
5294: LD_STRING Spotted
5296: PPUSH
5297: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5301: LD_EXP 48
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PPUSH
5312: CALL_OW 314
5316: NOT
5317: IFFALSE 5401
// for j in patrol [ i ] do
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_VAR 0 4
5328: PUSH
5329: LD_VAR 0 2
5333: ARRAY
5334: PUSH
5335: FOR_IN
5336: IFFALSE 5399
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5338: LD_EXP 48
5342: PUSH
5343: LD_VAR 0 2
5347: ARRAY
5348: PPUSH
5349: LD_INT 35
5351: PPUSH
5352: LD_INT 175
5354: PPUSH
5355: CALL_OW 12
5359: PPUSH
5360: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5364: LD_EXP 48
5368: PUSH
5369: LD_VAR 0 2
5373: ARRAY
5374: PPUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 2
5391: ARRAY
5392: PPUSH
5393: CALL_OW 174
// end ;
5397: GO 5335
5399: POP
5400: POP
// end ;
5401: GO 5019
5403: POP
5404: POP
// until not russianPatrol or russianAlert ;
5405: LD_EXP 48
5409: NOT
5410: PUSH
5411: LD_EXP 9
5415: OR
5416: IFFALSE 4997
// if russianPatrol then
5418: LD_EXP 48
5422: IFFALSE 5439
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5424: LD_EXP 48
5428: PPUSH
5429: LD_INT 161
5431: PPUSH
5432: LD_INT 107
5434: PPUSH
5435: CALL_OW 114
// end ;
5439: PPOPN 4
5441: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5442: LD_EXP 6
5446: PUSH
5447: LD_EXP 13
5451: NOT
5452: AND
5453: IFFALSE 5939
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_EXP 49
5475: PPUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 72
5490: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: ST_TO_ADDR
// for i in filter do
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: FOR_IN
5522: IFFALSE 5937
// begin tmp := IsDrivenBy ( i ) ;
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 311
5538: ST_TO_ADDR
// if not tmp then
5539: LD_VAR 0 3
5543: NOT
5544: IFFALSE 5548
// continue ;
5546: GO 5521
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 261
5557: PUSH
5558: LD_INT 90
5560: GREATER
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 110
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: AND
5576: IFFALSE 5592
// SetTag ( i , 0 ) else
5578: LD_VAR 0 1
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: CALL_OW 109
5590: GO 5688
// if GetTag ( i ) = 2 then
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 110
5601: PUSH
5602: LD_INT 2
5604: EQUAL
5605: IFFALSE 5688
// begin x := rand ( 1 , 2 ) ;
5607: LD_ADDR_VAR 0 5
5611: PUSH
5612: LD_INT 1
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: CALL_OW 12
5622: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_EXP 50
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PPUSH
5639: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5643: LD_EXP 50
5647: PUSH
5648: LD_VAR 0 5
5652: ARRAY
5653: PPUSH
5654: LD_INT 2
5656: PPUSH
5657: CALL_OW 289
5661: PUSH
5662: LD_INT 20
5664: LESS
5665: IFFALSE 5688
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5667: LD_EXP 50
5671: PUSH
5672: LD_VAR 0 5
5676: ARRAY
5677: PPUSH
5678: LD_INT 2
5680: PPUSH
5681: LD_INT 100
5683: PPUSH
5684: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 256
5697: PUSH
5698: LD_INT 600
5700: GREATEREQUAL
5701: PUSH
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 110
5711: NOT
5712: AND
5713: IFFALSE 5739
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5715: LD_VAR 0 1
5719: PPUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL_OW 74
5734: PPUSH
5735: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 256
5748: PUSH
5749: LD_INT 600
5751: LESS
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 110
5762: NOT
5763: AND
5764: IFFALSE 5793
// begin SetTag ( i , 1 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5778: LD_VAR 0 1
5782: PPUSH
5783: LD_INT 62
5785: PPUSH
5786: LD_INT 22
5788: PPUSH
5789: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5793: LD_VAR 0 1
5797: PPUSH
5798: CALL_OW 110
5802: PUSH
5803: LD_INT 1
5805: EQUAL
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 62
5814: PPUSH
5815: LD_INT 22
5817: PPUSH
5818: CALL_OW 297
5822: PUSH
5823: LD_INT 6
5825: LESS
5826: AND
5827: PUSH
5828: LD_VAR 0 3
5832: AND
5833: IFFALSE 5935
// begin ComExitVehicle ( tmp ) ;
5835: LD_VAR 0 3
5839: PPUSH
5840: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5844: LD_VAR 0 3
5848: PPUSH
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5858: LD_INT 35
5860: PPUSH
5861: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 256
5874: PUSH
5875: LD_INT 1000
5877: EQUAL
5878: IFFALSE 5858
// ComEnterUnit ( tmp , i ) ;
5880: LD_VAR 0 3
5884: PPUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 261
5903: PUSH
5904: LD_INT 90
5906: LESSEQUAL
5907: IFFALSE 5923
// SetTag ( i , 2 ) else
5909: LD_VAR 0 1
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: CALL_OW 109
5921: GO 5935
// SetTag ( i , 0 ) ;
5923: LD_VAR 0 1
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 109
// end ; end ;
5935: GO 5521
5937: POP
5938: POP
// end ;
5939: PPOPN 5
5941: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5942: LD_EXP 20
5946: IFFALSE 6169
5948: GO 5950
5950: DISABLE
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5955: LD_EXP 50
5959: PPUSH
5960: LD_INT 79
5962: PPUSH
5963: LD_INT 155
5965: PPUSH
5966: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5970: LD_EXP 50
5974: PPUSH
5975: LD_INT 16
5977: PPUSH
5978: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_EXP 49
5991: PPUSH
5992: LD_INT 50
5994: PUSH
5995: EMPTY
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
// for i in tmp do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_VAR 0 2
6012: PUSH
6013: FOR_IN
6014: IFFALSE 6048
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_INT 123
6023: PPUSH
6024: LD_INT 60
6026: PPUSH
6027: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6031: LD_VAR 0 1
6035: PPUSH
6036: LD_INT 153
6038: PPUSH
6039: LD_INT 103
6041: PPUSH
6042: CALL_OW 174
// end ;
6046: GO 6013
6048: POP
6049: POP
// repeat wait ( 0 0$1 ) ;
6050: LD_INT 35
6052: PPUSH
6053: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_EXP 49
6066: PPUSH
6067: LD_INT 50
6069: PUSH
6070: EMPTY
6071: LIST
6072: PPUSH
6073: CALL_OW 72
6077: ST_TO_ADDR
// for i in tmp do
6078: LD_ADDR_VAR 0 1
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6160
// if not HasTask ( i ) then
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 314
6100: NOT
6101: IFFALSE 6158
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6103: LD_VAR 0 1
6107: PPUSH
6108: LD_INT 81
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 21
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 69
6143: PPUSH
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 74
6153: PPUSH
6154: CALL_OW 115
6158: GO 6088
6160: POP
6161: POP
6162: LD_VAR 0 2
6166: NOT
6167: IFFALSE 6050
// end ;
6169: PPOPN 2
6171: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6172: LD_INT 22
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 32
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: IFFALSE 6279
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
// begin enable ;
6208: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6209: LD_ADDR_VAR 0 1
6213: PUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 32
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: PUSH
6243: FOR_IN
6244: IFFALSE 6277
// if GetFuel ( i ) < 1 then
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL_OW 261
6255: PUSH
6256: LD_INT 1
6258: LESS
6259: IFFALSE 6275
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 311
6270: PPUSH
6271: CALL_OW 121
6275: GO 6243
6277: POP
6278: POP
// end ;
6279: PPOPN 1
6281: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6282: LD_EXP 41
6286: PPUSH
6287: CALL_OW 303
6291: PUSH
6292: LD_EXP 41
6296: PPUSH
6297: CALL_OW 301
6301: OR
6302: PUSH
6303: LD_INT 71
6305: PPUSH
6306: CALL_OW 303
6310: OR
6311: PUSH
6312: LD_INT 71
6314: PPUSH
6315: CALL_OW 301
6319: OR
6320: IFFALSE 6643
6322: GO 6324
6324: DISABLE
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PPUSH
6351: CALL_OW 72
6355: ST_TO_ADDR
// if not tmp then
6356: LD_VAR 0 2
6360: NOT
6361: IFFALSE 6365
// exit ;
6363: GO 6643
// barracks := HexInfo ( 166 , 116 ) ;
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_INT 166
6372: PPUSH
6373: LD_INT 116
6375: PPUSH
6376: CALL_OW 428
6380: ST_TO_ADDR
// for i in tmp do
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_VAR 0 2
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6405
// ComExitBuilding ( i ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 122
6403: GO 6391
6405: POP
6406: POP
// repeat wait ( 0 0$1 ) ;
6407: LD_INT 35
6409: PPUSH
6410: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6414: LD_ADDR_VAR 0 2
6418: PUSH
6419: LD_EXP 45
6423: PPUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 50
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL_OW 72
6448: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 21
6456: PPUSH
6457: LD_INT 81
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 70
6471: ST_TO_ADDR
// if enemy then
6472: LD_VAR 0 3
6476: IFFALSE 6521
// begin for i in tmp do
6478: LD_ADDR_VAR 0 1
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: FOR_IN
6489: IFFALSE 6517
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 74
6510: PPUSH
6511: CALL_OW 115
6515: GO 6488
6517: POP
6518: POP
// end else
6519: GO 6636
// begin for i in tmp do
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_VAR 0 2
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6634
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 314
6543: PUSH
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 21
6551: PPUSH
6552: CALL_OW 308
6556: NOT
6557: OR
6558: IFFALSE 6632
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 600
6572: LESS
6573: PUSH
6574: LD_VAR 0 4
6578: PPUSH
6579: CALL_OW 302
6583: AND
6584: PUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: CALL_OW 313
6594: PUSH
6595: LD_INT 6
6597: LESS
6598: AND
6599: IFFALSE 6617
// ComEnterUnit ( i , barracks ) else
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_VAR 0 4
6610: PPUSH
6611: CALL_OW 120
6615: GO 6632
// ComMoveXY ( i , 162 , 109 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 162
6624: PPUSH
6625: LD_INT 109
6627: PPUSH
6628: CALL_OW 111
6632: GO 6531
6634: POP
6635: POP
// end ; until not tmp ;
6636: LD_VAR 0 2
6640: NOT
6641: IFFALSE 6407
// end ;
6643: PPOPN 4
6645: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6646: LD_INT 106
6648: PPUSH
6649: CALL_OW 303
6653: PUSH
6654: LD_INT 106
6656: PPUSH
6657: CALL_OW 301
6661: OR
6662: IFFALSE 6757
6664: GO 6666
6666: DISABLE
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: LD_EXP 46
6680: PPUSH
6681: LD_INT 25
6683: PUSH
6684: LD_INT 1
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 72
6695: ST_TO_ADDR
// if not tmp then
6696: LD_VAR 0 2
6700: NOT
6701: IFFALSE 6705
// exit ;
6703: GO 6757
// for i in tmp do
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: LD_VAR 0 2
6714: PUSH
6715: FOR_IN
6716: IFFALSE 6755
// begin if IsInUnit ( i ) then
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 310
6727: IFFALSE 6738
// ComExitBuilding ( i ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6738: LD_VAR 0 1
6742: PPUSH
6743: LD_INT 66
6745: PPUSH
6746: LD_INT 128
6748: PPUSH
6749: CALL_OW 171
// end ;
6753: GO 6715
6755: POP
6756: POP
// end ; end_of_file
6757: PPOPN 2
6759: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6760: LD_INT 0
6762: PPUSH
6763: PPUSH
6764: PPUSH
// SetBName ( omikron , omikron ) ;
6765: LD_INT 64
6767: PPUSH
6768: LD_STRING omikron
6770: PPUSH
6771: CALL_OW 500
// uc_side := 4 ;
6775: LD_ADDR_OWVAR 20
6779: PUSH
6780: LD_INT 4
6782: ST_TO_ADDR
// uc_nation := 1 ;
6783: LD_ADDR_OWVAR 21
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// omicronSquad := [ ] ;
6791: LD_ADDR_EXP 52
6795: PUSH
6796: EMPTY
6797: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 32
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 31
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6908
// begin PrepareHuman ( false , 1 , 1 ) ;
6853: LD_INT 0
6855: PPUSH
6856: LD_INT 1
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 380
// un := CreateHuman ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: CALL_OW 44
6875: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6876: LD_ADDR_EXP 52
6880: PUSH
6881: LD_EXP 52
6885: PUSH
6886: LD_VAR 0 3
6890: UNION
6891: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6892: LD_VAR 0 3
6896: PPUSH
6897: LD_VAR 0 2
6901: PPUSH
6902: CALL_OW 52
// end ;
6906: GO 6850
6908: POP
6909: POP
// for i := 1 to 3 do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: DOUBLE
6916: LD_INT 1
6918: DEC
6919: ST_TO_ADDR
6920: LD_INT 3
6922: PUSH
6923: FOR_TO
6924: IFFALSE 6979
// begin PrepareHuman ( false , 2 , 2 ) ;
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 2
6931: PPUSH
6932: LD_INT 2
6934: PPUSH
6935: CALL_OW 380
// un := CreateHuman ;
6939: LD_ADDR_VAR 0 3
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6949: LD_ADDR_EXP 52
6953: PUSH
6954: LD_EXP 52
6958: PUSH
6959: LD_VAR 0 3
6963: UNION
6964: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_INT 64
6972: PPUSH
6973: CALL_OW 52
// end ;
6977: GO 6923
6979: POP
6980: POP
// for i := 1 to 2 do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_INT 2
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7134
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6997: LD_INT 4
6999: PPUSH
7000: LD_INT 1
7002: PPUSH
7003: LD_INT 2
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 3
7014: PPUSH
7015: LD_INT 100
7017: PPUSH
7018: CALL 386 0 7
// un := CreateVehicle ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: CALL_OW 45
7031: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7032: LD_ADDR_EXP 52
7036: PUSH
7037: LD_EXP 52
7041: PUSH
7042: LD_VAR 0 3
7046: UNION
7047: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7048: LD_VAR 0 3
7052: PPUSH
7053: LD_INT 28
7055: PPUSH
7056: LD_INT 37
7058: PPUSH
7059: LD_INT 6
7061: PPUSH
7062: LD_INT 0
7064: PPUSH
7065: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7069: LD_INT 0
7071: PPUSH
7072: LD_INT 3
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: CALL_OW 380
// un := CreateHuman ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7092: LD_ADDR_EXP 52
7096: PUSH
7097: LD_EXP 52
7101: PUSH
7102: LD_VAR 0 3
7106: UNION
7107: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7108: LD_VAR 0 3
7112: PPUSH
7113: LD_EXP 52
7117: PUSH
7118: LD_EXP 52
7122: PUSH
7123: LD_INT 1
7125: MINUS
7126: ARRAY
7127: PPUSH
7128: CALL_OW 52
// end ;
7132: GO 6994
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
// uc_side := 4 ;
7147: LD_ADDR_OWVAR 20
7151: PUSH
7152: LD_INT 4
7154: ST_TO_ADDR
// uc_nation := 1 ;
7155: LD_ADDR_OWVAR 21
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// tmp := [ ] ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: EMPTY
7169: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7170: LD_INT 4
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 1
7184: PPUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_INT 77
7190: PPUSH
7191: CALL 386 0 7
// un := CreateVehicle ;
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: CALL_OW 45
7204: ST_TO_ADDR
// tmp := tmp union un ;
7205: LD_ADDR_VAR 0 4
7209: PUSH
7210: LD_VAR 0 4
7214: PUSH
7215: LD_VAR 0 3
7219: UNION
7220: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_INT 106
7240: PPUSH
7241: LD_INT 3
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7251: LD_INT 0
7253: PPUSH
7254: LD_INT 3
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: CALL_OW 380
// un := CreateHuman ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: CALL_OW 44
7273: ST_TO_ADDR
// tmp := tmp union un ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 4
7283: PUSH
7284: LD_VAR 0 3
7288: UNION
7289: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7290: LD_VAR 0 3
7294: PPUSH
7295: LD_VAR 0 4
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_INT 1
7307: MINUS
7308: ARRAY
7309: PPUSH
7310: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7314: LD_VAR 0 3
7318: PPUSH
7319: LD_INT 109
7321: PPUSH
7322: LD_INT 9
7324: PPUSH
7325: CALL_OW 111
// wait ( 0 0$1 ) ;
7329: LD_INT 35
7331: PPUSH
7332: CALL_OW 67
// for i := 1 to 2 do
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: DOUBLE
7342: LD_INT 1
7344: DEC
7345: ST_TO_ADDR
7346: LD_INT 2
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7414
// begin PrepareHuman ( false , 1 , 2 ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: LD_INT 2
7360: PPUSH
7361: CALL_OW 380
// un := CreateHuman ;
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: CALL_OW 44
7374: ST_TO_ADDR
// tmp := tmp union un ;
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 4
7384: PUSH
7385: LD_VAR 0 3
7389: UNION
7390: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7391: LD_VAR 0 3
7395: PPUSH
7396: LD_INT 105
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: LD_INT 0
7407: PPUSH
7408: CALL_OW 50
// end ;
7412: GO 7349
7414: POP
7415: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7416: LD_VAR 0 4
7420: PPUSH
7421: LD_INT 26
7423: PPUSH
7424: LD_INT 35
7426: PPUSH
7427: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7431: LD_INT 35
7433: PPUSH
7434: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7438: LD_VAR 0 4
7442: PPUSH
7443: LD_INT 50
7445: PUSH
7446: EMPTY
7447: LIST
7448: PPUSH
7449: CALL_OW 72
7453: NOT
7454: IFFALSE 7458
// exit ;
7456: GO 7585
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_INT 91
7465: PUSH
7466: LD_INT 64
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: LD_VAR 0 4
7486: EQUAL
7487: IFFALSE 7431
// omicronSquad := omicronSquad union tmp ;
7489: LD_ADDR_EXP 52
7493: PUSH
7494: LD_EXP 52
7498: PUSH
7499: LD_VAR 0 4
7503: UNION
7504: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_INT 25
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 72
7529: PUSH
7530: FOR_IN
7531: IFFALSE 7583
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: LD_INT 22
7540: PUSH
7541: LD_INT 4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 30
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 69
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 74
7576: PPUSH
7577: CALL_OW 120
7581: GO 7530
7583: POP
7584: POP
// end ;
7585: LD_VAR 0 1
7589: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7590: LD_EXP 13
7594: NOT
7595: IFFALSE 8166
7597: GO 7599
7599: DISABLE
7600: LD_INT 0
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
// begin enable ;
7606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 4
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_EXP 52
7668: PPUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 72
7683: ST_TO_ADDR
// if filter and tmp then
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 3
7693: AND
7694: IFFALSE 7767
// begin for i in tmp do
7696: LD_ADDR_VAR 0 1
7700: PUSH
7701: LD_VAR 0 3
7705: PUSH
7706: FOR_IN
7707: IFFALSE 7763
// if IsInUnit ( i ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 310
7718: IFFALSE 7731
// ComExitBuilding ( i ) else
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 122
7729: GO 7761
// if not HasTask ( i ) then
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 314
7740: NOT
7741: IFFALSE 7761
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7743: LD_VAR 0 1
7747: PPUSH
7748: LD_VAR 0 2
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: CALL_OW 130
7761: GO 7706
7763: POP
7764: POP
// end else
7765: GO 7838
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7767: LD_VAR 0 3
7771: PPUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 54
7777: PUSH
7778: EMPTY
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 72
7789: IFFALSE 7838
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7791: LD_ADDR_VAR 0 1
7795: PUSH
7796: LD_VAR 0 3
7800: PPUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: PUSH
7819: FOR_IN
7820: IFFALSE 7836
// ComEnterUnit ( i , omikron ) ;
7822: LD_VAR 0 1
7826: PPUSH
7827: LD_INT 64
7829: PPUSH
7830: CALL_OW 120
7834: GO 7819
7836: POP
7837: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7838: LD_ADDR_VAR 0 2
7842: PUSH
7843: LD_EXP 52
7847: PPUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 2
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 72
7862: ST_TO_ADDR
// if not filter then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 8166
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_INT 13
7879: PPUSH
7880: LD_INT 81
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 70
7894: ST_TO_ADDR
// if enemy then
7895: LD_VAR 0 4
7899: IFFALSE 8166
// begin for i in filter do
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: FOR_IN
7912: IFFALSE 8164
// begin tmp := IsDrivenBy ( i ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 311
7928: ST_TO_ADDR
// if not tmp then
7929: LD_VAR 0 3
7933: NOT
7934: IFFALSE 7938
// continue ;
7936: GO 7911
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7938: LD_VAR 0 1
7942: PPUSH
7943: CALL_OW 256
7947: PUSH
7948: LD_INT 600
7950: GREATEREQUAL
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 110
7961: PUSH
7962: LD_INT 1
7964: NONEQUAL
7965: AND
7966: IFFALSE 7992
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 4
7977: PPUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 74
7987: PPUSH
7988: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 256
8001: PUSH
8002: LD_INT 600
8004: LESS
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 110
8015: PUSH
8016: LD_INT 1
8018: NONEQUAL
8019: AND
8020: IFFALSE 8049
// begin SetTag ( i , 1 ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_INT 27
8041: PPUSH
8042: LD_INT 35
8044: PPUSH
8045: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 110
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 27
8070: PPUSH
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 297
8078: PUSH
8079: LD_INT 6
8081: LESS
8082: AND
8083: PUSH
8084: LD_VAR 0 3
8088: AND
8089: IFFALSE 8162
// begin ComExitVehicle ( tmp ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8114: LD_INT 35
8116: PPUSH
8117: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 256
8130: PUSH
8131: LD_INT 1000
8133: EQUAL
8134: IFFALSE 8114
// ComEnterUnit ( tmp , i ) ;
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 120
// SetTag ( i , 0 ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 0
8157: PPUSH
8158: CALL_OW 109
// end ; end ;
8162: GO 7911
8164: POP
8165: POP
// end ; end ;
8166: PPOPN 4
8168: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8169: LD_EXP 13
8173: IFFALSE 8317
8175: GO 8177
8177: DISABLE
8178: LD_INT 0
8180: PPUSH
8181: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_EXP 52
8191: PPUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 50
8204: PUSH
8205: EMPTY
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 72
8216: ST_TO_ADDR
// if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8226
// exit ;
8224: GO 8317
// repeat wait ( 0 0$1 ) ;
8226: LD_INT 35
8228: PPUSH
8229: CALL_OW 67
// for i in tmp do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8308
// begin ComExit ( i ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: CALL 76509 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 14
8262: PPUSH
8263: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_INT 14
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8306
// begin tmp := tmp diff i ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 1
8295: DIFF
8296: ST_TO_ADDR
// RemoveUnit ( i ) ;
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 64
// end ; end ;
8306: GO 8243
8308: POP
8309: POP
// until not tmp ;
8310: LD_VAR 0 2
8314: NOT
8315: IFFALSE 8226
// end ; end_of_file
8317: PPOPN 2
8319: END
// export function Action ; var i , un , veh , tmp ; begin
8320: LD_INT 0
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
8326: PPUSH
// InGameOn ;
8327: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8331: LD_INT 179
8333: PPUSH
8334: LD_INT 5
8336: PPUSH
8337: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8341: LD_ADDR_VAR 0 4
8345: PUSH
8346: LD_INT 2
8348: PPUSH
8349: LD_INT 2
8351: PPUSH
8352: LD_INT 12
8354: PPUSH
8355: LD_INT 1
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 24
8363: PPUSH
8364: LD_INT 33
8366: PPUSH
8367: CALL 386 0 7
8371: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 2
8379: PPUSH
8380: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8384: LD_VAR 0 4
8388: PPUSH
8389: LD_INT 178
8391: PPUSH
8392: LD_INT 2
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8402: LD_EXP 26
8406: PPUSH
8407: LD_VAR 0 4
8411: PPUSH
8412: CALL_OW 52
// if Kamil then
8416: LD_EXP 30
8420: IFFALSE 8455
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8422: LD_EXP 30
8426: PPUSH
8427: LD_INT 207
8429: PPUSH
8430: LD_INT 37
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8440: LD_EXP 30
8444: PPUSH
8445: LD_INT 211
8447: PPUSH
8448: LD_INT 38
8450: PPUSH
8451: CALL_OW 118
// end ; if Sophia then
8455: LD_EXP 32
8459: IFFALSE 8494
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8461: LD_EXP 32
8465: PPUSH
8466: LD_INT 209
8468: PPUSH
8469: LD_INT 40
8471: PPUSH
8472: LD_INT 0
8474: PPUSH
8475: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8479: LD_EXP 32
8483: PPUSH
8484: LD_INT 211
8486: PPUSH
8487: LD_INT 38
8489: PPUSH
8490: CALL_OW 118
// end ; if Givi then
8494: LD_EXP 27
8498: IFFALSE 8533
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8500: LD_EXP 27
8504: PPUSH
8505: LD_INT 201
8507: PPUSH
8508: LD_INT 34
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8518: LD_EXP 27
8522: PPUSH
8523: LD_INT 206
8525: PPUSH
8526: LD_INT 36
8528: PPUSH
8529: CALL_OW 118
// end ; if Ibrahim then
8533: LD_EXP 29
8537: IFFALSE 8572
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8539: LD_EXP 29
8543: PPUSH
8544: LD_INT 202
8546: PPUSH
8547: LD_INT 39
8549: PPUSH
8550: LD_INT 0
8552: PPUSH
8553: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8557: LD_EXP 29
8561: PPUSH
8562: LD_INT 206
8564: PPUSH
8565: LD_INT 36
8567: PPUSH
8568: CALL_OW 118
// end ; if Markov then
8572: LD_EXP 33
8576: IFFALSE 8663
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_INT 2
8585: PPUSH
8586: LD_INT 2
8588: PPUSH
8589: LD_INT 13
8591: PPUSH
8592: LD_INT 1
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: LD_INT 25
8600: PPUSH
8601: LD_INT 80
8603: PUSH
8604: LD_INT 20
8606: PUSH
8607: LD_OWVAR 67
8611: MUL
8612: MINUS
8613: PPUSH
8614: CALL 386 0 7
8618: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8619: LD_VAR 0 4
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8631: LD_VAR 0 4
8635: PPUSH
8636: LD_INT 197
8638: PPUSH
8639: LD_INT 35
8641: PPUSH
8642: LD_INT 0
8644: PPUSH
8645: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8649: LD_EXP 33
8653: PPUSH
8654: LD_VAR 0 4
8658: PPUSH
8659: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: LD_EXP 31
8672: PUSH
8673: LD_EXP 38
8677: UNION
8678: ST_TO_ADDR
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 5
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8724
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 203
8699: PPUSH
8700: LD_INT 41
8702: PPUSH
8703: LD_INT 6
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 50
// ComHold ( i ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: CALL_OW 140
// end ;
8722: GO 8689
8724: POP
8725: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8726: LD_INT 22
8728: PUSH
8729: LD_INT 2
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 69
8754: NOT
8755: IFFALSE 8769
// SetClass ( Heike , 2 ) ;
8757: LD_EXP 26
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8769: LD_EXP 26
8773: PPUSH
8774: LD_INT 183
8776: PPUSH
8777: LD_INT 12
8779: PPUSH
8780: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8784: LD_EXP 26
8788: PPUSH
8789: LD_INT 188
8791: PPUSH
8792: LD_INT 20
8794: PPUSH
8795: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8799: LD_EXP 26
8803: PPUSH
8804: LD_INT 191
8806: PPUSH
8807: LD_INT 25
8809: PPUSH
8810: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8814: LD_EXP 26
8818: PPUSH
8819: LD_INT 203
8821: PPUSH
8822: LD_INT 29
8824: PPUSH
8825: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8829: LD_EXP 26
8833: PPUSH
8834: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8838: LD_INT 35
8840: PPUSH
8841: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8845: LD_EXP 26
8849: PPUSH
8850: CALL_OW 310
8854: NOT
8855: IFFALSE 8838
// CenterOnUnits ( Heike ) ;
8857: LD_EXP 26
8861: PPUSH
8862: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8866: LD_ADDR_VAR 0 5
8870: PUSH
8871: LD_INT 22
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 21
8883: PUSH
8884: LD_INT 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: PUSH
8900: LD_EXP 26
8904: PUSH
8905: LD_EXP 33
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: DIFF
8914: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8915: LD_VAR 0 5
8919: PPUSH
8920: LD_EXP 26
8924: PPUSH
8925: CALL_OW 119
// if Givi then
8929: LD_EXP 27
8933: IFFALSE 8951
// ComTurnUnit ( Heike , Givi ) else
8935: LD_EXP 26
8939: PPUSH
8940: LD_EXP 27
8944: PPUSH
8945: CALL_OW 119
8949: GO 8969
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8951: LD_EXP 26
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8969: LD_EXP 26
8973: PPUSH
8974: LD_STRING DH-Start-1
8976: PPUSH
8977: CALL_OW 88
// if Givi then
8981: LD_EXP 27
8985: IFFALSE 9032
// begin Say ( Givi , DG-Start-2 ) ;
8987: LD_EXP 27
8991: PPUSH
8992: LD_STRING DG-Start-2
8994: PPUSH
8995: CALL_OW 88
// if not Mike then
8999: LD_EXP 28
9003: NOT
9004: IFFALSE 9030
// begin Say ( Givi , DG-Start-b-3 ) ;
9006: LD_EXP 27
9010: PPUSH
9011: LD_STRING DG-Start-b-3
9013: PPUSH
9014: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9018: LD_EXP 26
9022: PPUSH
9023: LD_STRING DH-Start-b-4
9025: PPUSH
9026: CALL_OW 88
// end ; end else
9030: GO 9097
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9032: LD_EXP 38
9036: PPUSH
9037: LD_INT 26
9039: PUSH
9040: LD_INT 1
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 72
9051: PUSH
9052: LD_INT 1
9054: ARRAY
9055: PPUSH
9056: LD_STRING DArm-Start-a-2
9058: PPUSH
9059: CALL_OW 88
9063: NOT
9064: IFFALSE 9097
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9066: LD_EXP 38
9070: PPUSH
9071: LD_INT 26
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 72
9085: PUSH
9086: LD_INT 1
9088: ARRAY
9089: PPUSH
9090: LD_STRING DArf-Start-a-2
9092: PPUSH
9093: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9097: LD_EXP 26
9101: PPUSH
9102: LD_INT 211
9104: PPUSH
9105: LD_INT 38
9107: PPUSH
9108: CALL_OW 118
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9119: LD_EXP 26
9123: PPUSH
9124: LD_STRING DH-Start-3
9126: PPUSH
9127: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9131: LD_EXP 26
9135: PPUSH
9136: LD_STRING DH-Start-4
9138: PPUSH
9139: CALL_OW 88
// InGameOff ;
9143: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9147: LD_STRING Prepare
9149: PPUSH
9150: CALL_OW 337
// SaveForQuickRestart ;
9154: CALL_OW 22
// wait ( 0 0$10 ) ;
9158: LD_INT 350
9160: PPUSH
9161: CALL_OW 67
// if not Aviradze then
9165: LD_EXP 36
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9414
// SetDir ( Aviradze , 4 ) ;
9174: LD_EXP 36
9178: PPUSH
9179: LD_INT 4
9181: PPUSH
9182: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_INT 225
9193: PPUSH
9194: LD_INT 33
9196: PPUSH
9197: LD_INT 0
9199: PPUSH
9200: CALL_OW 48
// for i := 1 to 2 do
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: DOUBLE
9210: LD_INT 1
9212: DEC
9213: ST_TO_ADDR
9214: LD_INT 2
9216: PUSH
9217: FOR_TO
9218: IFFALSE 9349
// begin uc_side := 2 ;
9220: LD_ADDR_OWVAR 20
9224: PUSH
9225: LD_INT 2
9227: ST_TO_ADDR
// uc_nation := 0 ;
9228: LD_ADDR_OWVAR 21
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9236: LD_INT 0
9238: PPUSH
9239: LD_INT 12
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 380
// hc_gallery :=  ;
9249: LD_ADDR_OWVAR 33
9253: PUSH
9254: LD_STRING 
9256: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9257: LD_ADDR_OWVAR 26
9261: PUSH
9262: LD_STRING Artudito
9264: PUSH
9265: LD_STRING Textur
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_VAR 0 2
9276: ARRAY
9277: ST_TO_ADDR
// un := CreateHuman ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: CALL_OW 44
9287: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9288: LD_VAR 0 3
9292: PPUSH
9293: LD_INT 224
9295: PUSH
9296: LD_INT 226
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_VAR 0 2
9307: ARRAY
9308: PPUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 35
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_VAR 0 2
9323: ARRAY
9324: PPUSH
9325: LD_INT 0
9327: PPUSH
9328: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_INT 215
9339: PPUSH
9340: LD_INT 36
9342: PPUSH
9343: CALL_OW 111
// end ;
9347: GO 9217
9349: POP
9350: POP
// hc_name :=  ;
9351: LD_ADDR_OWVAR 26
9355: PUSH
9356: LD_STRING 
9358: ST_TO_ADDR
// InitHc ;
9359: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9363: LD_EXP 36
9367: PPUSH
9368: LD_INT 215
9370: PPUSH
9371: LD_INT 36
9373: PPUSH
9374: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9378: LD_EXP 36
9382: PPUSH
9383: LD_STRING DA-Arrive-1
9385: PPUSH
9386: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9390: LD_EXP 26
9394: PPUSH
9395: LD_STRING DH-Arrive-2
9397: PPUSH
9398: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9402: LD_EXP 36
9406: PPUSH
9407: LD_STRING DA-Arrive-3
9409: PPUSH
9410: CALL_OW 88
// end ;
9414: LD_VAR 0 1
9418: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p ;
9419: LD_EXP 3
9423: IFFALSE 10865
9425: GO 9427
9427: DISABLE
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
// begin DialogueOn ;
9434: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9438: LD_EXP 26
9442: PPUSH
9443: LD_STRING DH-base-1
9445: PPUSH
9446: CALL_OW 88
// if Markov then
9450: LD_EXP 33
9454: IFFALSE 9506
// begin Say ( Markov , DMar-base-2 ) ;
9456: LD_EXP 33
9460: PPUSH
9461: LD_STRING DMar-base-2
9463: PPUSH
9464: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9468: LD_EXP 33
9472: PPUSH
9473: LD_STRING DMar-base-3
9475: PPUSH
9476: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9480: LD_EXP 26
9484: PPUSH
9485: LD_STRING DH-base-4
9487: PPUSH
9488: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9492: LD_EXP 33
9496: PPUSH
9497: LD_STRING DMar-base-5
9499: PPUSH
9500: CALL_OW 88
// end else
9504: GO 9583
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9506: LD_EXP 38
9510: PPUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PPUSH
9521: CALL_OW 72
9525: PUSH
9526: LD_INT 1
9528: ARRAY
9529: PPUSH
9530: LD_STRING DArm-base-a-2
9532: PPUSH
9533: CALL_OW 88
9537: NOT
9538: IFFALSE 9571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9540: LD_EXP 38
9544: PPUSH
9545: LD_INT 26
9547: PUSH
9548: LD_INT 2
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PPUSH
9555: CALL_OW 72
9559: PUSH
9560: LD_INT 1
9562: ARRAY
9563: PPUSH
9564: LD_STRING DArf-base-a-2
9566: PPUSH
9567: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9571: LD_EXP 26
9575: PPUSH
9576: LD_STRING DH-base-a-3
9578: PPUSH
9579: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9583: LD_EXP 36
9587: PPUSH
9588: LD_STRING DA-base-6
9590: PPUSH
9591: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9595: LD_EXP 36
9599: PPUSH
9600: LD_STRING DA-base-7
9602: PPUSH
9603: CALL_OW 88
// DialogueOff ;
9607: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9611: LD_STRING Flamethrower
9613: PPUSH
9614: CALL_OW 337
// wait ( 2 2$00 ) ;
9618: LD_INT 4200
9620: PPUSH
9621: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9625: LD_EXP 35
9629: PUSH
9630: LD_EXP 28
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PPUSH
9639: LD_INT 203
9641: PPUSH
9642: LD_INT 37
9644: PPUSH
9645: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9649: LD_INT 22
9651: PUSH
9652: LD_INT 2
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: LD_INT 92
9661: PUSH
9662: LD_INT 203
9664: PUSH
9665: LD_INT 37
9667: PUSH
9668: LD_INT 10
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PPUSH
9681: CALL_OW 69
9685: NOT
9686: IFFALSE 9726
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9688: LD_EXP 35
9692: PUSH
9693: LD_EXP 28
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PPUSH
9702: LD_EXP 26
9706: PPUSH
9707: CALL_OW 250
9711: PPUSH
9712: LD_EXP 26
9716: PPUSH
9717: CALL_OW 251
9721: PPUSH
9722: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9726: LD_INT 35
9728: PPUSH
9729: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9733: LD_INT 2
9735: PPUSH
9736: LD_EXP 35
9740: PPUSH
9741: CALL_OW 292
9745: PUSH
9746: LD_EXP 35
9750: PPUSH
9751: LD_EXP 26
9755: PPUSH
9756: CALL_OW 296
9760: PUSH
9761: LD_INT 8
9763: LESS
9764: PUSH
9765: LD_EXP 35
9769: PPUSH
9770: LD_INT 22
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 21
9782: PUSH
9783: LD_INT 3
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 69
9798: PPUSH
9799: LD_EXP 35
9803: PPUSH
9804: CALL_OW 74
9808: PPUSH
9809: CALL_OW 296
9813: PUSH
9814: LD_INT 7
9816: LESS
9817: OR
9818: AND
9819: PUSH
9820: LD_EXP 35
9824: PPUSH
9825: LD_INT 10
9827: PPUSH
9828: CALL_OW 308
9832: NOT
9833: AND
9834: IFFALSE 9726
// InGameOn ;
9836: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9840: LD_EXP 35
9844: PPUSH
9845: CALL_OW 87
// if IsInUnit ( Heike ) then
9849: LD_EXP 26
9853: PPUSH
9854: CALL_OW 310
9858: IFFALSE 9869
// ComExitBuilding ( Heike ) ;
9860: LD_EXP 26
9864: PPUSH
9865: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9869: LD_EXP 35
9873: PUSH
9874: LD_EXP 28
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: LD_EXP 26
9887: PPUSH
9888: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9892: LD_EXP 26
9896: PPUSH
9897: LD_EXP 35
9901: PPUSH
9902: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9906: LD_INT 22
9908: PUSH
9909: LD_INT 2
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 91
9918: PUSH
9919: LD_EXP 35
9923: PUSH
9924: LD_INT 10
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 21
9934: PUSH
9935: LD_INT 3
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: PPUSH
9947: CALL_OW 69
9951: IFFALSE 9977
// begin Say ( Kurt , DKs-scout-1 ) ;
9953: LD_EXP 35
9957: PPUSH
9958: LD_STRING DKs-scout-1
9960: PPUSH
9961: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9965: LD_EXP 26
9969: PPUSH
9970: LD_STRING DH-scout-2
9972: PPUSH
9973: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9977: LD_EXP 26
9981: PPUSH
9982: CALL_OW 85
// if IsInUnit ( Heike ) then
9986: LD_EXP 26
9990: PPUSH
9991: CALL_OW 310
9995: IFFALSE 10006
// ComExit ( Heike ) ;
9997: LD_EXP 26
10001: PPUSH
10002: CALL 76509 0 1
// repeat wait ( 0 0$1 ) ;
10006: LD_INT 35
10008: PPUSH
10009: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10013: LD_EXP 26
10017: PPUSH
10018: LD_EXP 35
10022: PPUSH
10023: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10027: LD_EXP 26
10031: PPUSH
10032: LD_EXP 35
10036: PPUSH
10037: CALL_OW 296
10041: PUSH
10042: LD_INT 6
10044: LESS
10045: IFFALSE 10006
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10047: LD_EXP 35
10051: PUSH
10052: LD_EXP 28
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PPUSH
10061: LD_EXP 26
10065: PPUSH
10066: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10070: LD_EXP 35
10074: PPUSH
10075: LD_STRING DKs-scout-3
10077: PPUSH
10078: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10082: LD_EXP 31
10086: PUSH
10087: LD_EXP 31
10091: PPUSH
10092: LD_EXP 35
10096: PPUSH
10097: CALL_OW 296
10101: PUSH
10102: LD_INT 15
10104: LESS
10105: AND
10106: IFFALSE 10329
// begin p := 1 ;
10108: LD_ADDR_VAR 0 4
10112: PUSH
10113: LD_INT 1
10115: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10116: LD_EXP 31
10120: PPUSH
10121: CALL_OW 310
10125: IFFALSE 10136
// ComExit ( Kaia ) ;
10127: LD_EXP 31
10131: PPUSH
10132: CALL 76509 0 1
// wait ( 0 0$1 ) ;
10136: LD_INT 35
10138: PPUSH
10139: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10143: LD_EXP 31
10147: PPUSH
10148: LD_EXP 35
10152: PPUSH
10153: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10157: LD_INT 35
10159: PPUSH
10160: CALL_OW 67
// p := Inc ( p ) ;
10164: LD_ADDR_VAR 0 4
10168: PUSH
10169: LD_VAR 0 4
10173: PPUSH
10174: CALL 77472 0 1
10178: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10179: LD_EXP 31
10183: PPUSH
10184: LD_EXP 35
10188: PPUSH
10189: CALL_OW 296
10193: PUSH
10194: LD_INT 6
10196: LESS
10197: PUSH
10198: LD_VAR 0 4
10202: PUSH
10203: LD_INT 12
10205: GREATER
10206: OR
10207: IFFALSE 10157
// ComTurnUnit ( Kaia , Kurt ) ;
10209: LD_EXP 31
10213: PPUSH
10214: LD_EXP 35
10218: PPUSH
10219: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10223: LD_EXP 31
10227: PPUSH
10228: LD_STRING DK-scout-4
10230: PPUSH
10231: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10235: LD_EXP 35
10239: PPUSH
10240: LD_EXP 31
10244: PPUSH
10245: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10249: LD_EXP 35
10253: PPUSH
10254: LD_STRING DKs-scout-5
10256: PPUSH
10257: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10261: LD_EXP 31
10265: PPUSH
10266: LD_STRING DK-scout-6
10268: PPUSH
10269: CALL_OW 88
// if Mike then
10273: LD_EXP 28
10277: IFFALSE 10329
// begin Say ( Mike , DM-scout-7 ) ;
10279: LD_EXP 28
10283: PPUSH
10284: LD_STRING DM-scout-7
10286: PPUSH
10287: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10291: LD_EXP 31
10295: PPUSH
10296: LD_EXP 28
10300: PPUSH
10301: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10305: LD_EXP 31
10309: PPUSH
10310: LD_STRING DK-scout-8
10312: PPUSH
10313: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10317: LD_EXP 28
10321: PPUSH
10322: LD_STRING DM-scout-9
10324: PPUSH
10325: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10329: LD_INT 184
10331: PPUSH
10332: LD_INT 100
10334: PPUSH
10335: LD_INT 2
10337: PPUSH
10338: LD_INT 12
10340: NEG
10341: PPUSH
10342: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10346: LD_INT 184
10348: PPUSH
10349: LD_INT 100
10351: PPUSH
10352: LD_INT 2
10354: PPUSH
10355: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10359: LD_INT 184
10361: PPUSH
10362: LD_INT 100
10364: PPUSH
10365: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10369: LD_EXP 35
10373: PPUSH
10374: LD_STRING DKs-scout-10
10376: PPUSH
10377: CALL_OW 88
// wait ( 0 0$1 ) ;
10381: LD_INT 35
10383: PPUSH
10384: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10388: LD_INT 144
10390: PPUSH
10391: LD_INT 65
10393: PPUSH
10394: LD_INT 2
10396: PPUSH
10397: LD_INT 12
10399: NEG
10400: PPUSH
10401: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10405: LD_INT 144
10407: PPUSH
10408: LD_INT 65
10410: PPUSH
10411: LD_INT 2
10413: PPUSH
10414: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10418: LD_INT 144
10420: PPUSH
10421: LD_INT 65
10423: PPUSH
10424: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10428: LD_EXP 35
10432: PPUSH
10433: LD_STRING DKs-scout-11
10435: PPUSH
10436: CALL_OW 88
// wait ( 0 0$1 ) ;
10440: LD_INT 35
10442: PPUSH
10443: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10447: LD_EXP 35
10451: PPUSH
10452: CALL_OW 87
// if Mike and not Givi then
10456: LD_EXP 28
10460: PUSH
10461: LD_EXP 27
10465: NOT
10466: AND
10467: IFFALSE 10493
// begin Say ( Mike , DM-scout-a-1 ) ;
10469: LD_EXP 28
10473: PPUSH
10474: LD_STRING DM-scout-a-1
10476: PPUSH
10477: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10481: LD_EXP 26
10485: PPUSH
10486: LD_STRING DH-scout-a-2
10488: PPUSH
10489: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10493: LD_EXP 35
10497: PUSH
10498: LD_EXP 28
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: LD_INT 2
10509: PPUSH
10510: CALL_OW 235
// InGameOff ;
10514: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10518: LD_STRING Hill
10520: PPUSH
10521: CALL_OW 337
// Hint ( BunkerHill ) ;
10525: LD_STRING BunkerHill
10527: PPUSH
10528: CALL_OW 339
// SetAreaMapShow ( dontGoArea , 1 ) ;
10532: LD_INT 20
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 424
// allowToPatrol := true ;
10542: LD_ADDR_EXP 12
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10550: LD_INT 3150
10552: PPUSH
10553: CALL_OW 67
// InitHc ;
10557: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10561: LD_ADDR_VAR 0 1
10565: PUSH
10566: DOUBLE
10567: LD_INT 1
10569: DEC
10570: ST_TO_ADDR
10571: LD_INT 3
10573: PUSH
10574: LD_INT 3
10576: PUSH
10577: LD_INT 2
10579: PUSH
10580: LD_INT 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: LD_OWVAR 67
10593: ARRAY
10594: PUSH
10595: FOR_TO
10596: IFFALSE 10863
// begin uc_side := 2 ;
10598: LD_ADDR_OWVAR 20
10602: PUSH
10603: LD_INT 2
10605: ST_TO_ADDR
// uc_nation := 2 ;
10606: LD_ADDR_OWVAR 21
10610: PUSH
10611: LD_INT 2
10613: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10614: LD_INT 0
10616: PPUSH
10617: LD_INT 1
10619: PUSH
10620: LD_INT 3
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: PUSH
10631: LD_VAR 0 1
10635: PUSH
10636: LD_INT 3
10638: MOD
10639: PUSH
10640: LD_INT 1
10642: PLUS
10643: ARRAY
10644: PPUSH
10645: LD_INT 3
10647: PUSH
10648: LD_INT 2
10650: PUSH
10651: LD_INT 2
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: PUSH
10663: LD_OWVAR 67
10667: ARRAY
10668: PPUSH
10669: CALL_OW 380
// un := CreateHuman ;
10673: LD_ADDR_VAR 0 2
10677: PUSH
10678: CALL_OW 44
10682: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10683: LD_ADDR_EXP 38
10687: PUSH
10688: LD_EXP 38
10692: PUSH
10693: LD_VAR 0 2
10697: UNION
10698: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10699: LD_INT 2
10701: PPUSH
10702: LD_INT 2
10704: PPUSH
10705: LD_INT 13
10707: PPUSH
10708: LD_INT 2
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_VAR 0 1
10722: PUSH
10723: LD_INT 2
10725: MOD
10726: PUSH
10727: LD_INT 1
10729: PLUS
10730: ARRAY
10731: PPUSH
10732: LD_INT 1
10734: PPUSH
10735: LD_INT 27
10737: PUSH
10738: LD_INT 25
10740: PUSH
10741: LD_INT 27
10743: PUSH
10744: LD_INT 23
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: PUSH
10757: LD_OWVAR 67
10761: PUSH
10762: LD_INT 0
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 12
10772: PLUS
10773: ARRAY
10774: PPUSH
10775: LD_INT 77
10777: PPUSH
10778: CALL 386 0 7
// veh := CreateVehicle ;
10782: LD_ADDR_VAR 0 3
10786: PUSH
10787: CALL_OW 45
10791: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10792: LD_VAR 0 3
10796: PPUSH
10797: LD_INT 2
10799: PPUSH
10800: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10804: LD_VAR 0 3
10808: PPUSH
10809: LD_INT 178
10811: PPUSH
10812: LD_INT 2
10814: PPUSH
10815: LD_INT 2
10817: PPUSH
10818: LD_INT 0
10820: PPUSH
10821: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10825: LD_VAR 0 2
10829: PPUSH
10830: LD_VAR 0 3
10834: PPUSH
10835: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 183
10846: PPUSH
10847: LD_INT 11
10849: PPUSH
10850: CALL_OW 111
// wait ( 0 0$2 ) ;
10854: LD_INT 70
10856: PPUSH
10857: CALL_OW 67
// end ;
10861: GO 10595
10863: POP
10864: POP
// end ;
10865: PPOPN 4
10867: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10868: LD_EXP 4
10872: PUSH
10873: LD_EXP 36
10877: PPUSH
10878: CALL_OW 302
10882: AND
10883: IFFALSE 10932
10885: GO 10887
10887: DISABLE
// begin DialogueOn ;
10888: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10892: LD_EXP 36
10896: PPUSH
10897: LD_STRING DA-lab-1
10899: PPUSH
10900: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10904: LD_EXP 36
10908: PPUSH
10909: LD_STRING DA-lab-2
10911: PPUSH
10912: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10916: LD_EXP 26
10920: PPUSH
10921: LD_STRING DH-lab-3
10923: PPUSH
10924: CALL_OW 88
// DialogueOff ;
10928: CALL_OW 7
// end ;
10932: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10933: LD_INT 17
10935: PPUSH
10936: LD_INT 2
10938: PPUSH
10939: CALL_OW 321
10943: PUSH
10944: LD_INT 2
10946: EQUAL
10947: IFFALSE 11079
10949: GO 10951
10951: DISABLE
10952: LD_INT 0
10954: PPUSH
// begin DialogueOn ;
10955: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10959: LD_EXP 36
10963: PPUSH
10964: LD_STRING DA-Cam-1
10966: PPUSH
10967: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10971: LD_EXP 36
10975: PPUSH
10976: LD_STRING DA-Cam-2
10978: PPUSH
10979: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10983: LD_EXP 36
10987: PPUSH
10988: LD_STRING DA-Cam-3
10990: PPUSH
10991: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10995: LD_EXP 26
10999: PPUSH
11000: LD_STRING DH-Cam-4
11002: PPUSH
11003: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11007: LD_EXP 31
11011: PPUSH
11012: LD_STRING DK-Cam-5
11014: PPUSH
11015: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11019: LD_EXP 31
11023: PPUSH
11024: LD_STRING DK-Cam-6
11026: PPUSH
11027: CALL_OW 88
// DialogueOff ;
11031: CALL_OW 7
// Query ( Camera ) ;
11035: LD_STRING Camera
11037: PPUSH
11038: CALL_OW 97
// hiddenCameraAllowed := true ;
11042: LD_ADDR_EXP 5
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// for i in camAreas do
11050: LD_ADDR_VAR 0 1
11054: PUSH
11055: LD_EXP 8
11059: PUSH
11060: FOR_IN
11061: IFFALSE 11077
// SetAreaMapShow ( i , 1 ) ;
11063: LD_VAR 0 1
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 424
11075: GO 11060
11077: POP
11078: POP
// end ;
11079: PPOPN 1
11081: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11082: LD_EXP 8
11086: NOT
11087: PUSH
11088: LD_EXP 5
11092: AND
11093: IFFALSE 11191
11095: GO 11097
11097: DISABLE
11098: LD_INT 0
11100: PPUSH
// begin stop_talking := true ;
11101: LD_ADDR_OWVAR 56
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11109: LD_ADDR_VAR 0 1
11113: PUSH
11114: LD_INT 22
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 21
11126: PUSH
11127: LD_INT 1
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 23
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 69
11153: PUSH
11154: FOR_IN
11155: IFFALSE 11174
// AddExperience ( i , 2 , 450 ) ;
11157: LD_VAR 0 1
11161: PPUSH
11162: LD_INT 2
11164: PPUSH
11165: LD_INT 450
11167: PPUSH
11168: CALL_OW 492
11172: GO 11154
11174: POP
11175: POP
// stop_talking := false ;
11176: LD_ADDR_OWVAR 56
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11184: LD_STRING ACH_CAMERA
11186: PPUSH
11187: CALL_OW 543
// end ;
11191: PPOPN 1
11193: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11194: LD_EXP 9
11198: PUSH
11199: LD_EXP 11
11203: NOT
11204: AND
11205: IFFALSE 11264
11207: GO 11209
11209: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11210: LD_EXP 9
11214: PPUSH
11215: CALL_OW 250
11219: PPUSH
11220: LD_EXP 9
11224: PPUSH
11225: CALL_OW 251
11229: PPUSH
11230: LD_INT 2
11232: PPUSH
11233: LD_INT 6
11235: NEG
11236: PPUSH
11237: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11241: LD_EXP 9
11245: PPUSH
11246: CALL_OW 87
// wait ( 0 0$1 ) ;
11250: LD_INT 35
11252: PPUSH
11253: CALL_OW 67
// YouLost ( Spotted ) ;
11257: LD_STRING Spotted
11259: PPUSH
11260: CALL_OW 104
// end ;
11264: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11265: LD_INT 3
11267: PUSH
11268: LD_INT 6
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PPUSH
11275: LD_INT 2
11277: PPUSH
11278: LD_EXP 48
11282: PPUSH
11283: CALL 1050 0 3
11287: IFFALSE 11320
11289: GO 11291
11291: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11292: LD_ADDR_EXP 9
11296: PUSH
11297: LD_INT 3
11299: PUSH
11300: LD_INT 6
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PPUSH
11307: LD_INT 2
11309: PPUSH
11310: LD_EXP 48
11314: PPUSH
11315: CALL 1050 0 3
11319: ST_TO_ADDR
11320: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11321: LD_INT 22
11323: PUSH
11324: LD_INT 6
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 30
11333: PUSH
11334: LD_INT 32
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 3
11343: PUSH
11344: LD_INT 24
11346: PUSH
11347: LD_INT 1000
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: IFFALSE 11428
11369: GO 11371
11371: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11372: LD_ADDR_EXP 9
11376: PUSH
11377: LD_INT 22
11379: PUSH
11380: LD_INT 6
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 3
11399: PUSH
11400: LD_INT 24
11402: PUSH
11403: LD_INT 1000
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: PUSH
11424: LD_INT 1
11426: ARRAY
11427: ST_TO_ADDR
11428: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11429: LD_EXP 9
11433: PUSH
11434: LD_INT 21
11436: PPUSH
11437: LD_INT 21
11439: PUSH
11440: LD_INT 3
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 3
11449: PUSH
11450: LD_INT 24
11452: PUSH
11453: LD_INT 1000
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PPUSH
11468: CALL_OW 70
11472: AND
11473: IFFALSE 11712
11475: GO 11477
11477: DISABLE
11478: LD_INT 0
11480: PPUSH
11481: PPUSH
11482: PPUSH
11483: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11484: LD_ADDR_VAR 0 4
11488: PUSH
11489: LD_EXP 43
11493: PUSH
11494: LD_EXP 45
11498: PUSH
11499: LD_EXP 46
11503: UNION
11504: PPUSH
11505: LD_INT 3
11507: PUSH
11508: LD_INT 25
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PPUSH
11522: CALL_OW 72
11526: UNION
11527: ST_TO_ADDR
// for i in noncombat do
11528: LD_ADDR_VAR 0 1
11532: PUSH
11533: LD_VAR 0 4
11537: PUSH
11538: FOR_IN
11539: IFFALSE 11635
// begin if IsInUnit ( i ) then
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 310
11550: IFFALSE 11561
// ComExitBuilding ( i ) ;
11552: LD_VAR 0 1
11556: PPUSH
11557: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11561: LD_VAR 0 1
11565: PPUSH
11566: LD_INT 114
11568: PPUSH
11569: LD_INT 97
11571: PPUSH
11572: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11576: LD_VAR 0 1
11580: PPUSH
11581: LD_INT 99
11583: PPUSH
11584: LD_INT 128
11586: PPUSH
11587: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11591: LD_VAR 0 1
11595: PPUSH
11596: LD_INT 91
11598: PPUSH
11599: LD_INT 145
11601: PPUSH
11602: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11606: LD_VAR 0 1
11610: PPUSH
11611: LD_INT 82
11613: PPUSH
11614: LD_INT 153
11616: PPUSH
11617: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11621: LD_VAR 0 1
11625: PPUSH
11626: LD_INT 16
11628: PPUSH
11629: CALL_OW 173
// end ;
11633: GO 11538
11635: POP
11636: POP
// if not allowHeikeAttack then
11637: LD_EXP 11
11641: NOT
11642: IFFALSE 11646
// exit ;
11644: GO 11712
// wait ( 0 0$05 ) ;
11646: LD_INT 175
11648: PPUSH
11649: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11653: LD_EXP 41
11657: PPUSH
11658: LD_STRING D9a-Kur-1
11660: PPUSH
11661: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11665: LD_EXP 44
11669: PPUSH
11670: LD_STRING D9a-Bur-1
11672: PPUSH
11673: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11677: LD_EXP 41
11681: PPUSH
11682: LD_STRING D9a-Kur-2
11684: PPUSH
11685: CALL_OW 94
// omicronFall := true ;
11689: LD_ADDR_EXP 13
11693: PUSH
11694: LD_INT 1
11696: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11697: LD_INT 105
11699: PPUSH
11700: CALL_OW 67
// retreatFromOmicron := true ;
11704: LD_ADDR_EXP 20
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// end ;
11712: PPOPN 4
11714: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11715: LD_INT 16
11717: PPUSH
11718: LD_INT 3
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: LD_INT 2
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 23
11737: PUSH
11738: LD_INT 3
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 70
11753: IFFALSE 11836
11755: GO 11757
11757: DISABLE
11758: LD_INT 0
11760: PPUSH
// begin enable ;
11761: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11762: LD_ADDR_VAR 0 1
11766: PUSH
11767: LD_INT 16
11769: PPUSH
11770: LD_INT 3
11772: PUSH
11773: LD_INT 22
11775: PUSH
11776: LD_INT 2
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 23
11789: PUSH
11790: LD_INT 3
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PPUSH
11801: CALL_OW 70
11805: PUSH
11806: FOR_IN
11807: IFFALSE 11834
// begin escapeCounter := escapeCounter + 1 ;
11809: LD_ADDR_EXP 19
11813: PUSH
11814: LD_EXP 19
11818: PUSH
11819: LD_INT 1
11821: PLUS
11822: ST_TO_ADDR
// RemoveUnit ( i ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: CALL_OW 64
// end ;
11832: GO 11806
11834: POP
11835: POP
// end ;
11836: PPOPN 1
11838: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11839: LD_OWVAR 1
11843: PUSH
11844: LD_INT 13650
11846: PUSH
11847: LD_INT 0
11849: PPUSH
11850: LD_INT 3150
11852: PPUSH
11853: CALL_OW 12
11857: PLUS
11858: GREATEREQUAL
11859: IFFALSE 11868
11861: GO 11863
11863: DISABLE
// SmallAmericanReinforcements ;
11864: CALL 7141 0 0
11868: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11869: LD_OWVAR 1
11873: PUSH
11874: LD_INT 31500
11876: PUSH
11877: LD_INT 29400
11879: PUSH
11880: LD_INT 27300
11882: PUSH
11883: LD_INT 25200
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: LD_OWVAR 67
11896: ARRAY
11897: GREATEREQUAL
11898: IFFALSE 11963
11900: GO 11902
11902: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11903: LD_EXP 49
11907: PPUSH
11908: LD_INT 21
11910: PUSH
11911: LD_INT 2
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PPUSH
11918: CALL_OW 72
11922: PPUSH
11923: LD_INT 62
11925: PPUSH
11926: LD_INT 22
11928: PPUSH
11929: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11933: LD_EXP 50
11937: PPUSH
11938: LD_INT 69
11940: PPUSH
11941: LD_INT 27
11943: PPUSH
11944: CALL_OW 111
// wait ( 1 1$00 ) ;
11948: LD_INT 2100
11950: PPUSH
11951: CALL_OW 67
// startAttackOnOmicron := true ;
11955: LD_ADDR_EXP 6
11959: PUSH
11960: LD_INT 1
11962: ST_TO_ADDR
// end ;
11963: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11964: LD_EXP 22
11968: PUSH
11969: LD_INT 0
11971: EQUAL
11972: IFFALSE 14022
11974: GO 11976
11976: DISABLE
11977: LD_INT 0
11979: PPUSH
11980: PPUSH
11981: PPUSH
11982: PPUSH
11983: PPUSH
11984: PPUSH
11985: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11986: LD_INT 5
11988: PPUSH
11989: LD_INT 2
11991: PPUSH
11992: CALL_OW 343
// PrepareOmarForces ;
11996: CALL 1652 0 0
// wait ( 0 0$03 ) ;
12000: LD_INT 105
12002: PPUSH
12003: CALL_OW 67
// allowHeikeAttack := true ;
12007: LD_ADDR_EXP 11
12011: PUSH
12012: LD_INT 1
12014: ST_TO_ADDR
// activeGrishkoAI := false ;
12015: LD_ADDR_EXP 10
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12023: LD_INT 20
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL_OW 424
// if not hillBase then
12033: LD_EXP 15
12037: NOT
12038: IFFALSE 12047
// ChangeMissionObjectives ( HillDone ) ;
12040: LD_STRING HillDone
12042: PPUSH
12043: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12047: LD_EXP 34
12051: PPUSH
12052: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12056: LD_ADDR_VAR 0 1
12060: PUSH
12061: LD_INT 22
12063: PUSH
12064: LD_INT 2
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 21
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: PUSH
12090: FOR_IN
12091: IFFALSE 12115
// if HasTask ( i ) then
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 314
12102: IFFALSE 12113
// ComHold ( i ) ;
12104: LD_VAR 0 1
12108: PPUSH
12109: CALL_OW 140
12113: GO 12090
12115: POP
12116: POP
// DialogueOn ;
12117: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12121: LD_EXP 34
12125: PPUSH
12126: LD_STRING DO-assault-1
12128: PPUSH
12129: CALL_OW 94
// DialogueOff ;
12133: CALL_OW 7
// game_speed := 4 ;
12137: LD_ADDR_OWVAR 65
12141: PUSH
12142: LD_INT 4
12144: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12145: LD_ADDR_VAR 0 1
12149: PUSH
12150: LD_EXP 47
12154: PPUSH
12155: LD_INT 3
12157: PUSH
12158: LD_INT 54
12160: PUSH
12161: EMPTY
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 72
12172: PUSH
12173: FOR_IN
12174: IFFALSE 12193
// ComMoveXY ( i , 226 , 114 ) ;
12176: LD_VAR 0 1
12180: PPUSH
12181: LD_INT 226
12183: PPUSH
12184: LD_INT 114
12186: PPUSH
12187: CALL_OW 111
12191: GO 12173
12193: POP
12194: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12195: LD_EXP 42
12199: PPUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 6
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 30
12212: PUSH
12213: LD_INT 4
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PPUSH
12224: CALL_OW 69
12228: PPUSH
12229: LD_EXP 42
12233: PPUSH
12234: CALL_OW 74
12238: PPUSH
12239: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12243: LD_STRING Attack
12245: PPUSH
12246: CALL_OW 337
// music_class := music_combat ;
12250: LD_ADDR_OWVAR 72
12254: PUSH
12255: LD_INT 1
12257: ST_TO_ADDR
// music_nat := 4 ;
12258: LD_ADDR_OWVAR 71
12262: PUSH
12263: LD_INT 4
12265: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12266: LD_INT 5
12268: PPUSH
12269: LD_EXP 42
12273: PPUSH
12274: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12278: LD_INT 6
12280: PPUSH
12281: LD_EXP 39
12285: PPUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 1
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 72
12300: PUSH
12301: LD_INT 4
12303: ARRAY
12304: PPUSH
12305: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12309: LD_ADDR_VAR 0 1
12313: PUSH
12314: LD_EXP 39
12318: PPUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 25
12324: PUSH
12325: LD_INT 4
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PPUSH
12336: CALL_OW 72
12340: PUSH
12341: FOR_IN
12342: IFFALSE 12361
// ComAgressiveMove ( i , 221 , 110 ) ;
12344: LD_VAR 0 1
12348: PPUSH
12349: LD_INT 221
12351: PPUSH
12352: LD_INT 110
12354: PPUSH
12355: CALL_OW 114
12359: GO 12341
12361: POP
12362: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12363: LD_EXP 39
12367: PPUSH
12368: LD_INT 25
12370: PUSH
12371: LD_INT 4
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 72
12382: PPUSH
12383: LD_INT 214
12385: PPUSH
12386: LD_INT 124
12388: PPUSH
12389: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12393: LD_EXP 39
12397: PPUSH
12398: LD_INT 25
12400: PUSH
12401: LD_INT 1
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL_OW 72
12412: PUSH
12413: LD_INT 4
12415: ARRAY
12416: PPUSH
12417: LD_INT 214
12419: PPUSH
12420: LD_INT 114
12422: PPUSH
12423: LD_INT 0
12425: PPUSH
12426: CALL_OW 132
// if IsOk ( Grishko ) then
12430: LD_EXP 42
12434: PPUSH
12435: CALL_OW 302
12439: IFFALSE 12465
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12441: LD_EXP 42
12445: PPUSH
12446: LD_STRING D9-Gri-1
12448: PPUSH
12449: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12453: LD_EXP 41
12457: PPUSH
12458: LD_STRING D9-Kur-1
12460: PPUSH
12461: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12465: LD_INT 35
12467: PPUSH
12468: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12472: LD_EXP 34
12476: PPUSH
12477: LD_INT 233
12479: PPUSH
12480: LD_INT 130
12482: PPUSH
12483: CALL_OW 114
// if IsOk ( Grishko ) then
12487: LD_EXP 42
12491: PPUSH
12492: CALL_OW 302
12496: IFFALSE 12522
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12498: LD_EXP 42
12502: PPUSH
12503: LD_STRING D9-Gri-2
12505: PPUSH
12506: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12510: LD_EXP 41
12514: PPUSH
12515: LD_STRING D9-Kur-2
12517: PPUSH
12518: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12522: LD_EXP 42
12526: PPUSH
12527: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12531: LD_EXP 42
12535: PPUSH
12536: LD_INT 211
12538: PPUSH
12539: LD_INT 104
12541: PPUSH
12542: CALL_OW 171
// AddComHold ( Grishko ) ;
12546: LD_EXP 42
12550: PPUSH
12551: CALL_OW 200
// repeat wait ( 3 ) ;
12555: LD_INT 3
12557: PPUSH
12558: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12562: LD_EXP 42
12566: PPUSH
12567: CALL_OW 310
12571: NOT
12572: IFFALSE 12555
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12574: LD_EXP 39
12578: PPUSH
12579: LD_INT 34
12581: PUSH
12582: LD_INT 26
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PPUSH
12589: CALL_OW 72
12593: PPUSH
12594: LD_EXP 42
12598: PPUSH
12599: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12603: LD_EXP 39
12607: PPUSH
12608: LD_INT 34
12610: PUSH
12611: LD_INT 26
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PPUSH
12618: CALL_OW 72
12622: PPUSH
12623: LD_INT 215
12625: PPUSH
12626: LD_INT 106
12628: PPUSH
12629: CALL_OW 174
// repeat wait ( 3 ) ;
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12640: LD_EXP 42
12644: PPUSH
12645: CALL_OW 256
12649: PUSH
12650: LD_INT 1000
12652: LESS
12653: IFFALSE 12633
// NormalAttack ( 5 , Grishko ) ;
12655: LD_INT 5
12657: PPUSH
12658: LD_EXP 42
12662: PPUSH
12663: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12667: LD_INT 6
12669: PPUSH
12670: LD_EXP 39
12674: PPUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PPUSH
12685: CALL_OW 72
12689: PUSH
12690: LD_INT 4
12692: ARRAY
12693: PPUSH
12694: CALL_OW 472
// if IsOk ( Grishko ) then
12698: LD_EXP 42
12702: PPUSH
12703: CALL_OW 302
12707: IFFALSE 12733
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12709: LD_EXP 42
12713: PPUSH
12714: LD_STRING D9-Gri-3
12716: PPUSH
12717: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12721: LD_EXP 41
12725: PPUSH
12726: LD_STRING D9-Kur-3
12728: PPUSH
12729: CALL_OW 94
// end ; music_class := music_auto ;
12733: LD_ADDR_OWVAR 72
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// music_nat := music_auto ;
12741: LD_ADDR_OWVAR 71
12745: PUSH
12746: LD_INT 0
12748: ST_TO_ADDR
// for i in omarSquad do
12749: LD_ADDR_VAR 0 1
12753: PUSH
12754: LD_EXP 39
12758: PUSH
12759: FOR_IN
12760: IFFALSE 12902
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12762: LD_VAR 0 1
12766: PPUSH
12767: CALL_OW 247
12771: PUSH
12772: LD_INT 2
12774: EQUAL
12775: PUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 256
12785: PUSH
12786: LD_INT 1000
12788: LESS
12789: AND
12790: IFFALSE 12856
// begin driver := IsDrivenBy ( i ) ;
12792: LD_ADDR_VAR 0 2
12796: PUSH
12797: LD_VAR 0 1
12801: PPUSH
12802: CALL_OW 311
12806: ST_TO_ADDR
// veh := i ;
12807: LD_ADDR_VAR 0 3
12811: PUSH
12812: LD_VAR 0 1
12816: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12817: LD_VAR 0 2
12821: PPUSH
12822: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12826: LD_VAR 0 2
12830: PPUSH
12831: LD_VAR 0 3
12835: PPUSH
12836: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12840: LD_VAR 0 2
12844: PPUSH
12845: LD_VAR 0 3
12849: PPUSH
12850: CALL_OW 180
// end else
12854: GO 12900
// if GetLives ( i ) < 500 then
12856: LD_VAR 0 1
12860: PPUSH
12861: CALL_OW 256
12865: PUSH
12866: LD_INT 500
12868: LESS
12869: IFFALSE 12900
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12871: LD_EXP 39
12875: PPUSH
12876: LD_INT 25
12878: PUSH
12879: LD_INT 4
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PPUSH
12886: CALL_OW 72
12890: PPUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 188
// end ; end ;
12900: GO 12759
12902: POP
12903: POP
// repeat wait ( 0 0$1 ) ;
12904: LD_INT 35
12906: PPUSH
12907: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12911: LD_EXP 39
12915: PPUSH
12916: LD_INT 3
12918: PUSH
12919: LD_INT 24
12921: PUSH
12922: LD_INT 1000
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 21
12935: PUSH
12936: LD_INT 2
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 72
12951: NOT
12952: PUSH
12953: LD_EXP 39
12957: PPUSH
12958: LD_INT 3
12960: PUSH
12961: LD_INT 24
12963: PUSH
12964: LD_INT 250
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 72
12979: NOT
12980: AND
12981: IFFALSE 12904
// wait ( 0 0$2 ) ;
12983: LD_INT 70
12985: PPUSH
12986: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12990: LD_ADDR_VAR 0 5
12994: PUSH
12995: LD_EXP 39
12999: PPUSH
13000: LD_INT 58
13002: PUSH
13003: EMPTY
13004: LIST
13005: PUSH
13006: LD_INT 21
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 72
13024: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13025: LD_ADDR_VAR 0 6
13029: PUSH
13030: LD_EXP 39
13034: PPUSH
13035: LD_INT 25
13037: PUSH
13038: LD_INT 3
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 3
13047: PUSH
13048: LD_INT 55
13050: PUSH
13051: EMPTY
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PPUSH
13062: CALL_OW 72
13066: ST_TO_ADDR
// for i := 1 to tmp do
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: DOUBLE
13073: LD_INT 1
13075: DEC
13076: ST_TO_ADDR
13077: LD_VAR 0 5
13081: PUSH
13082: FOR_TO
13083: IFFALSE 13113
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13085: LD_VAR 0 6
13089: PUSH
13090: LD_VAR 0 1
13094: ARRAY
13095: PPUSH
13096: LD_VAR 0 5
13100: PUSH
13101: LD_VAR 0 1
13105: ARRAY
13106: PPUSH
13107: CALL_OW 120
13111: GO 13082
13113: POP
13114: POP
// wait ( 0 0$5 ) ;
13115: LD_INT 175
13117: PPUSH
13118: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13122: LD_EXP 39
13126: PPUSH
13127: LD_INT 199
13129: PPUSH
13130: LD_INT 141
13132: PPUSH
13133: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13137: LD_EXP 34
13141: PPUSH
13142: LD_INT 190
13144: PPUSH
13145: LD_INT 143
13147: PPUSH
13148: CALL_OW 114
// AddComHold ( Omar ) ;
13152: LD_EXP 34
13156: PPUSH
13157: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13161: LD_EXP 39
13165: PPUSH
13166: LD_INT 2
13168: PUSH
13169: LD_INT 25
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 25
13181: PUSH
13182: LD_INT 4
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 72
13198: PPUSH
13199: LD_INT 161
13201: PPUSH
13202: LD_INT 130
13204: PPUSH
13205: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13209: LD_EXP 39
13213: PPUSH
13214: LD_INT 25
13216: PUSH
13217: LD_INT 1
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 72
13228: PPUSH
13229: LD_INT 163
13231: PPUSH
13232: LD_INT 122
13234: PPUSH
13235: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13239: LD_EXP 39
13243: PPUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 1
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 72
13258: PUSH
13259: LD_INT 4
13261: ARRAY
13262: PPUSH
13263: LD_INT 165
13265: PPUSH
13266: LD_INT 118
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13276: LD_EXP 39
13280: PPUSH
13281: LD_INT 25
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL_OW 72
13295: PUSH
13296: LD_INT 4
13298: ARRAY
13299: PPUSH
13300: LD_INT 159
13302: PPUSH
13303: LD_INT 116
13305: PPUSH
13306: LD_INT 0
13308: PPUSH
13309: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13313: LD_EXP 39
13317: PPUSH
13318: LD_INT 21
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PPUSH
13328: CALL_OW 72
13332: PPUSH
13333: LD_INT 169
13335: PPUSH
13336: LD_INT 114
13338: PPUSH
13339: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13343: LD_INT 35
13345: PPUSH
13346: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13350: LD_ADDR_VAR 0 5
13354: PUSH
13355: LD_EXP 39
13359: PPUSH
13360: LD_INT 25
13362: PUSH
13363: LD_INT 1
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PPUSH
13370: CALL_OW 72
13374: ST_TO_ADDR
// for i in tmp do
13375: LD_ADDR_VAR 0 1
13379: PUSH
13380: LD_VAR 0 5
13384: PUSH
13385: FOR_IN
13386: IFFALSE 13483
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 256
13397: PUSH
13398: LD_INT 600
13400: LESS
13401: PUSH
13402: LD_VAR 0 1
13406: PPUSH
13407: LD_INT 161
13409: PPUSH
13410: LD_INT 130
13412: PPUSH
13413: CALL_OW 297
13417: PUSH
13418: LD_INT 6
13420: GREATER
13421: AND
13422: IFFALSE 13439
// ComMoveXY ( i , 161 , 130 ) ;
13424: LD_VAR 0 1
13428: PPUSH
13429: LD_INT 161
13431: PPUSH
13432: LD_INT 130
13434: PPUSH
13435: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13439: LD_VAR 0 1
13443: PPUSH
13444: CALL_OW 256
13448: PUSH
13449: LD_INT 1000
13451: EQUAL
13452: PUSH
13453: LD_VAR 0 1
13457: PPUSH
13458: CALL_OW 314
13462: NOT
13463: AND
13464: IFFALSE 13481
// ComAgressiveMove ( i , 160 , 109 ) ;
13466: LD_VAR 0 1
13470: PPUSH
13471: LD_INT 160
13473: PPUSH
13474: LD_INT 109
13476: PPUSH
13477: CALL_OW 114
// end ;
13481: GO 13385
13483: POP
13484: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13485: LD_ADDR_VAR 0 5
13489: PUSH
13490: LD_EXP 39
13494: PPUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 72
13509: ST_TO_ADDR
// for i in tmp do
13510: LD_ADDR_VAR 0 1
13514: PUSH
13515: LD_VAR 0 5
13519: PUSH
13520: FOR_IN
13521: IFFALSE 13787
// begin tmp2 := IsDrivenBy ( i ) ;
13523: LD_ADDR_VAR 0 6
13527: PUSH
13528: LD_VAR 0 1
13532: PPUSH
13533: CALL_OW 311
13537: ST_TO_ADDR
// if not tmp2 then
13538: LD_VAR 0 6
13542: NOT
13543: IFFALSE 13547
// continue ;
13545: GO 13520
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13547: LD_VAR 0 1
13551: PPUSH
13552: CALL_OW 256
13556: PUSH
13557: LD_INT 600
13559: GREATEREQUAL
13560: PUSH
13561: LD_VAR 0 1
13565: PPUSH
13566: CALL_OW 110
13570: PUSH
13571: LD_INT 1
13573: EQUAL
13574: AND
13575: IFFALSE 13589
// SetTag ( i , 0 ) ;
13577: LD_VAR 0 1
13581: PPUSH
13582: LD_INT 0
13584: PPUSH
13585: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13589: LD_VAR 0 1
13593: PPUSH
13594: CALL_OW 256
13598: PUSH
13599: LD_INT 600
13601: GREATEREQUAL
13602: PUSH
13603: LD_VAR 0 1
13607: PPUSH
13608: CALL_OW 110
13612: NOT
13613: AND
13614: IFFALSE 13640
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13616: LD_VAR 0 1
13620: PPUSH
13621: LD_VAR 0 7
13625: PPUSH
13626: LD_VAR 0 1
13630: PPUSH
13631: CALL_OW 74
13635: PPUSH
13636: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL_OW 256
13649: PUSH
13650: LD_INT 600
13652: LESS
13653: PUSH
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 110
13663: NOT
13664: AND
13665: IFFALSE 13694
// begin SetTag ( i , 1 ) ;
13667: LD_VAR 0 1
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13679: LD_VAR 0 1
13683: PPUSH
13684: LD_INT 202
13686: PPUSH
13687: LD_INT 150
13689: PPUSH
13690: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13694: LD_VAR 0 1
13698: PPUSH
13699: CALL_OW 110
13703: PUSH
13704: LD_INT 1
13706: EQUAL
13707: PUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: LD_INT 202
13715: PPUSH
13716: LD_INT 150
13718: PPUSH
13719: CALL_OW 297
13723: PUSH
13724: LD_INT 6
13726: LESS
13727: AND
13728: PUSH
13729: LD_VAR 0 6
13733: AND
13734: IFFALSE 13785
// begin ComExitVehicle ( tmp2 ) ;
13736: LD_VAR 0 6
13740: PPUSH
13741: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13745: LD_VAR 0 6
13749: PPUSH
13750: LD_VAR 0 1
13754: PPUSH
13755: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13759: LD_VAR 0 6
13763: PPUSH
13764: LD_INT 700
13766: PPUSH
13767: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13771: LD_VAR 0 6
13775: PPUSH
13776: LD_VAR 0 1
13780: PPUSH
13781: CALL_OW 180
// end ; end ;
13785: GO 13520
13787: POP
13788: POP
// until kirovDestroyed ;
13789: LD_EXP 16
13793: IFFALSE 13343
// repeat wait ( 0 0$1 ) ;
13795: LD_INT 35
13797: PPUSH
13798: CALL_OW 67
// for i in omarSquad union Omar do
13802: LD_ADDR_VAR 0 1
13806: PUSH
13807: LD_EXP 39
13811: PUSH
13812: LD_EXP 34
13816: UNION
13817: PUSH
13818: FOR_IN
13819: IFFALSE 13989
// if IsInArea ( i , southRoadArea ) then
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 15
13828: PPUSH
13829: CALL_OW 308
13833: IFFALSE 13846
// RemoveUnit ( i ) else
13835: LD_VAR 0 1
13839: PPUSH
13840: CALL_OW 64
13844: GO 13987
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13846: LD_VAR 0 1
13850: PPUSH
13851: CALL_OW 257
13855: PUSH
13856: LD_INT 3
13858: EQUAL
13859: PUSH
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 310
13869: NOT
13870: AND
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 5
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 24
13884: PUSH
13885: LD_INT 251
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 21
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 58
13904: PUSH
13905: EMPTY
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: AND
13919: IFFALSE 13972
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13921: LD_VAR 0 1
13925: PPUSH
13926: LD_INT 22
13928: PUSH
13929: LD_INT 5
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 21
13938: PUSH
13939: LD_INT 2
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 58
13948: PUSH
13949: EMPTY
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: PPUSH
13957: CALL_OW 69
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: PPUSH
13966: CALL_OW 120
13970: GO 13987
// ComMoveXY ( i , 208 , 162 ) ;
13972: LD_VAR 0 1
13976: PPUSH
13977: LD_INT 208
13979: PPUSH
13980: LD_INT 162
13982: PPUSH
13983: CALL_OW 111
// end ;
13987: GO 13818
13989: POP
13990: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13991: LD_INT 22
13993: PUSH
13994: LD_INT 5
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 21
14003: PUSH
14004: LD_INT 1
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 69
14019: NOT
14020: IFFALSE 13795
// end ;
14022: PPOPN 7
14024: END
// every 0 0$1 trigger IsDead ( kirov ) do
14025: LD_INT 71
14027: PPUSH
14028: CALL_OW 301
14032: IFFALSE 14049
14034: GO 14036
14036: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14037: LD_EXP 26
14041: PPUSH
14042: LD_STRING DH-1-Kirov
14044: PPUSH
14045: CALL_OW 88
14049: END
// every 0 0$1 trigger See ( 2 , beria ) do
14050: LD_INT 2
14052: PPUSH
14053: LD_INT 106
14055: PPUSH
14056: CALL_OW 292
14060: IFFALSE 14077
14062: GO 14064
14064: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14065: LD_EXP 26
14069: PPUSH
14070: LD_STRING DH-1-Beria
14072: PPUSH
14073: CALL_OW 88
14077: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14078: LD_INT 2
14080: PPUSH
14081: LD_INT 112
14083: PPUSH
14084: CALL_OW 292
14088: IFFALSE 14355
14090: GO 14092
14092: DISABLE
// begin DialogueOn ;
14093: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14097: LD_INT 112
14099: PPUSH
14100: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14104: LD_EXP 26
14108: PPUSH
14109: LD_STRING DH-1-Kagan
14111: PPUSH
14112: CALL_OW 88
// if Kamil then
14116: LD_EXP 30
14120: IFFALSE 14158
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14122: LD_EXP 30
14126: PPUSH
14127: LD_STRING DKam-Kagan-2
14129: PPUSH
14130: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14134: LD_EXP 27
14138: PPUSH
14139: LD_STRING DG-Kagan-3
14141: PPUSH
14142: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14146: LD_EXP 27
14150: PPUSH
14151: LD_STRING DG-Kagan-4
14153: PPUSH
14154: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14158: LD_STRING KaganBase
14160: PPUSH
14161: CALL_OW 97
14165: PUSH
14166: LD_INT 1
14168: DOUBLE
14169: EQUAL
14170: IFTRUE 14174
14172: GO 14269
14174: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14175: LD_EXP 26
14179: PPUSH
14180: LD_STRING DH-Kagan-5
14182: PPUSH
14183: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14187: LD_EXP 26
14191: PPUSH
14192: LD_STRING DH-Kagan-6
14194: PPUSH
14195: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14199: LD_EXP 37
14203: PPUSH
14204: LD_STRING DShar-Kagan-7
14206: PPUSH
14207: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14211: LD_EXP 26
14215: PPUSH
14216: LD_STRING DH-Kagan-8
14218: PPUSH
14219: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14223: LD_EXP 26
14227: PPUSH
14228: LD_STRING DH-Kagan-9
14230: PPUSH
14231: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14235: LD_EXP 37
14239: PPUSH
14240: LD_STRING DShar-Kagan-10
14242: PPUSH
14243: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14247: LD_EXP 26
14251: PPUSH
14252: LD_STRING DH-Kagan-11
14254: PPUSH
14255: CALL_OW 88
// kaganCaptured := true ;
14259: LD_ADDR_EXP 24
14263: PUSH
14264: LD_INT 1
14266: ST_TO_ADDR
// end ; 2 :
14267: GO 14351
14269: LD_INT 2
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14350
14277: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14278: LD_INT 22
14280: PUSH
14281: LD_INT 8
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PPUSH
14288: CALL_OW 69
14292: PUSH
14293: LD_EXP 36
14297: AND
14298: IFFALSE 14312
// Say ( Heike , DH-Kagan-a-5 ) ;
14300: LD_EXP 26
14304: PPUSH
14305: LD_STRING DH-Kagan-a-5
14307: PPUSH
14308: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14312: LD_EXP 26
14316: PPUSH
14317: LD_STRING DH-Kagan-a-6
14319: PPUSH
14320: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14324: LD_EXP 26
14328: PPUSH
14329: LD_STRING DH-Kagan-a-7
14331: PPUSH
14332: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14336: LD_EXP 27
14340: PPUSH
14341: LD_STRING DG-Kagan-a-8
14343: PPUSH
14344: CALL_OW 88
// end ; end ;
14348: GO 14351
14350: POP
// DialogueOff ;
14351: CALL_OW 7
// end ;
14355: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14356: LD_EXP 18
14360: PUSH
14361: LD_INT 112
14363: PPUSH
14364: CALL_OW 255
14368: PUSH
14369: LD_INT 2
14371: EQUAL
14372: OR
14373: IFFALSE 14385
14375: GO 14377
14377: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14378: LD_STRING KaganDone
14380: PPUSH
14381: CALL_OW 337
14385: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14386: LD_EXP 6
14390: PUSH
14391: LD_EXP 49
14395: PPUSH
14396: LD_INT 95
14398: PUSH
14399: LD_INT 19
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PPUSH
14406: CALL_OW 72
14410: AND
14411: IFFALSE 14488
14413: GO 14415
14415: DISABLE
// begin DialogueOn ;
14416: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14420: LD_INT 63
14422: PPUSH
14423: LD_INT 32
14425: PPUSH
14426: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14430: LD_INT 63
14432: PPUSH
14433: LD_INT 32
14435: PPUSH
14436: LD_INT 2
14438: PPUSH
14439: LD_INT 12
14441: NEG
14442: PPUSH
14443: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14447: LD_EXP 26
14451: PPUSH
14452: LD_STRING DH-Omicron-1
14454: PPUSH
14455: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14459: LD_EXP 28
14463: PPUSH
14464: LD_STRING DM-Omicron-2
14466: PPUSH
14467: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14471: LD_INT 63
14473: PPUSH
14474: LD_INT 32
14476: PPUSH
14477: LD_INT 2
14479: PPUSH
14480: CALL_OW 331
// DialogueOff ;
14484: CALL_OW 7
// end ;
14488: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14489: LD_INT 2
14491: PPUSH
14492: LD_EXP 51
14496: PPUSH
14497: CALL_OW 292
14501: PUSH
14502: LD_EXP 51
14506: PPUSH
14507: CALL_OW 255
14511: PUSH
14512: LD_INT 2
14514: EQUAL
14515: OR
14516: PUSH
14517: LD_INT 106
14519: PPUSH
14520: CALL_OW 255
14524: PUSH
14525: LD_INT 2
14527: EQUAL
14528: OR
14529: PUSH
14530: LD_EXP 51
14534: PPUSH
14535: CALL_OW 302
14539: AND
14540: PUSH
14541: LD_EXP 26
14545: PPUSH
14546: CALL_OW 302
14550: AND
14551: PUSH
14552: LD_EXP 36
14556: PPUSH
14557: CALL_OW 302
14561: AND
14562: IFFALSE 15301
14564: GO 14566
14566: DISABLE
14567: LD_INT 0
14569: PPUSH
14570: PPUSH
14571: PPUSH
14572: PPUSH
14573: PPUSH
// begin DialogueOn ;
14574: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14578: LD_INT 111
14580: PPUSH
14581: LD_INT 90
14583: PPUSH
14584: LD_INT 2
14586: PPUSH
14587: LD_INT 6
14589: NEG
14590: PPUSH
14591: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14595: LD_INT 111
14597: PPUSH
14598: LD_INT 90
14600: PPUSH
14601: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14605: LD_EXP 36
14609: PPUSH
14610: LD_STRING DA-Cap-1
14612: PPUSH
14613: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14617: LD_EXP 26
14621: PPUSH
14622: LD_STRING DH-Cap-2
14624: PPUSH
14625: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14629: LD_INT 111
14631: PPUSH
14632: LD_INT 90
14634: PPUSH
14635: LD_INT 2
14637: PPUSH
14638: CALL_OW 331
// DialogueOff ;
14642: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14646: LD_INT 35
14648: PPUSH
14649: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14653: LD_EXP 17
14657: PUSH
14658: LD_INT 106
14660: PPUSH
14661: CALL_OW 255
14665: PUSH
14666: LD_INT 2
14668: EQUAL
14669: OR
14670: PUSH
14671: LD_EXP 51
14675: PPUSH
14676: CALL_OW 255
14680: PUSH
14681: LD_INT 2
14683: EQUAL
14684: OR
14685: PUSH
14686: LD_EXP 51
14690: PPUSH
14691: CALL_OW 302
14695: AND
14696: PUSH
14697: LD_EXP 36
14701: PPUSH
14702: CALL_OW 302
14706: AND
14707: PUSH
14708: LD_INT 2
14710: PPUSH
14711: CALL_OW 463
14715: NOT
14716: AND
14717: PUSH
14718: LD_INT 22
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 1
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 92
14740: PUSH
14741: LD_INT 110
14743: PUSH
14744: LD_INT 95
14746: PUSH
14747: LD_INT 12
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: PPUSH
14761: CALL_OW 69
14765: NOT
14766: AND
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_INT 3
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: LD_INT 5
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 92
14790: PUSH
14791: LD_INT 110
14793: PUSH
14794: LD_INT 95
14796: PUSH
14797: LD_INT 12
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: NOT
14816: AND
14817: IFFALSE 14646
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_EXP 38
14828: PUSH
14829: LD_EXP 29
14833: PUSH
14834: LD_EXP 30
14838: PUSH
14839: LD_EXP 32
14843: PUSH
14844: LD_EXP 31
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: UNION
14855: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_VAR 0 2
14865: PPUSH
14866: LD_INT 50
14868: PUSH
14869: EMPTY
14870: LIST
14871: PPUSH
14872: CALL_OW 72
14876: ST_TO_ADDR
// if tmp < 2 then
14877: LD_VAR 0 2
14881: PUSH
14882: LD_INT 2
14884: LESS
14885: IFFALSE 14897
// q := 2 else
14887: LD_ADDR_VAR 0 4
14891: PUSH
14892: LD_INT 2
14894: ST_TO_ADDR
14895: GO 14910
// q := Query ( LabCap ) ;
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: LD_STRING LabCap
14904: PPUSH
14905: CALL_OW 97
14909: ST_TO_ADDR
// case q of 1 :
14910: LD_VAR 0 4
14914: PUSH
14915: LD_INT 1
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 15265
14923: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14924: LD_INT 2
14926: PPUSH
14927: LD_EXP 51
14931: PPUSH
14932: CALL_OW 471
// labCaptured := true ;
14936: LD_ADDR_EXP 21
14940: PUSH
14941: LD_INT 1
14943: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14944: LD_EXP 26
14948: PPUSH
14949: LD_STRING DH-Cap-a-1
14951: PPUSH
14952: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14956: LD_EXP 36
14960: PPUSH
14961: LD_STRING DA-Cap-a-2
14963: PPUSH
14964: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
14968: LD_ADDR_VAR 0 5
14972: PUSH
14973: LD_EXP 36
14977: PUSH
14978: LD_INT -3
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT -2
14987: PUSH
14988: LD_INT -4
14990: PUSH
14991: LD_EXP 26
14995: PUSH
14996: LD_EXP 27
15000: PUSH
15001: LD_EXP 35
15005: PUSH
15006: LD_EXP 33
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: ADD
15019: PUSH
15020: LD_INT -3
15022: PUSH
15023: EMPTY
15024: LIST
15025: ADD
15026: PUSH
15027: LD_VAR 0 2
15031: ADD
15032: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15033: LD_ADDR_VAR 0 3
15037: PUSH
15038: LD_STRING Select two characters to go with Aviradze
15040: PPUSH
15041: LD_INT 2
15043: PPUSH
15044: LD_INT 2
15046: PPUSH
15047: LD_VAR 0 5
15051: PPUSH
15052: EMPTY
15053: PPUSH
15054: CALL_OW 42
15058: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15059: LD_EXP 51
15063: PPUSH
15064: LD_INT 8
15066: PPUSH
15067: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15071: LD_EXP 36
15075: PPUSH
15076: LD_INT 8
15078: PPUSH
15079: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15083: LD_ADDR_EXP 40
15087: PUSH
15088: LD_EXP 36
15092: PUSH
15093: EMPTY
15094: LIST
15095: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15096: LD_EXP 36
15100: PPUSH
15101: CALL_OW 310
15105: IFFALSE 15116
// ComExit ( Aviradze ) ;
15107: LD_EXP 36
15111: PPUSH
15112: CALL 76509 0 1
// wait ( 3 ) ;
15116: LD_INT 3
15118: PPUSH
15119: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15123: LD_EXP 36
15127: PPUSH
15128: LD_EXP 51
15132: PPUSH
15133: CALL_OW 120
// for i := 1 to 2 do
15137: LD_ADDR_VAR 0 1
15141: PUSH
15142: DOUBLE
15143: LD_INT 1
15145: DEC
15146: ST_TO_ADDR
15147: LD_INT 2
15149: PUSH
15150: FOR_TO
15151: IFFALSE 15254
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15153: LD_ADDR_EXP 40
15157: PUSH
15158: LD_EXP 40
15162: PUSH
15163: LD_VAR 0 3
15167: PUSH
15168: LD_VAR 0 1
15172: ARRAY
15173: UNION
15174: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15175: LD_VAR 0 3
15179: PUSH
15180: LD_VAR 0 1
15184: ARRAY
15185: PPUSH
15186: LD_INT 8
15188: PPUSH
15189: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15193: LD_VAR 0 3
15197: PUSH
15198: LD_VAR 0 1
15202: ARRAY
15203: PPUSH
15204: CALL_OW 310
15208: IFFALSE 15225
// ComExit ( tmp2 [ i ] ) ;
15210: LD_VAR 0 3
15214: PUSH
15215: LD_VAR 0 1
15219: ARRAY
15220: PPUSH
15221: CALL 76509 0 1
// wait ( 3 ) ;
15225: LD_INT 3
15227: PPUSH
15228: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15232: LD_VAR 0 3
15236: PUSH
15237: LD_VAR 0 1
15241: ARRAY
15242: PPUSH
15243: LD_EXP 51
15247: PPUSH
15248: CALL_OW 120
// end ;
15252: GO 15150
15254: POP
15255: POP
// SetAchievement ( ACH_LAB ) ;
15256: LD_STRING ACH_LAB
15258: PPUSH
15259: CALL_OW 543
// end ; 2 :
15263: GO 15301
15265: LD_INT 2
15267: DOUBLE
15268: EQUAL
15269: IFTRUE 15273
15271: GO 15300
15273: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15274: LD_EXP 26
15278: PPUSH
15279: LD_STRING DH-Cap-b-1
15281: PPUSH
15282: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15286: LD_EXP 36
15290: PPUSH
15291: LD_STRING DA-Cap-b-2
15293: PPUSH
15294: CALL_OW 88
// end ; end ;
15298: GO 15301
15300: POP
// end ;
15301: PPOPN 5
15303: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15304: LD_INT 10
15306: PPUSH
15307: LD_INT 22
15309: PUSH
15310: LD_INT 2
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 30
15319: PUSH
15320: LD_INT 31
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PPUSH
15331: CALL_OW 70
15335: PUSH
15336: LD_INT 2
15338: GREATEREQUAL
15339: IFFALSE 15351
15341: GO 15343
15343: DISABLE
// SetAchievement ( ACH_KING ) ;
15344: LD_STRING ACH_KING
15346: PPUSH
15347: CALL_OW 543
15351: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15352: LD_EXP 11
15356: NOT
15357: PUSH
15358: LD_INT 10
15360: PPUSH
15361: LD_INT 22
15363: PUSH
15364: LD_INT 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 30
15376: PUSH
15377: LD_INT 31
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 30
15386: PUSH
15387: LD_INT 4
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PPUSH
15403: CALL_OW 70
15407: AND
15408: IFFALSE 15428
15410: GO 15412
15412: DISABLE
// begin hillBase := true ;
15413: LD_ADDR_EXP 15
15417: PUSH
15418: LD_INT 1
15420: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15421: LD_STRING HillDone
15423: PPUSH
15424: CALL_OW 337
// end ;
15428: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15429: LD_EXP 31
15433: PUSH
15434: LD_EXP 31
15438: PPUSH
15439: CALL_OW 256
15443: PUSH
15444: LD_INT 3
15446: LESS
15447: AND
15448: IFFALSE 15494
15450: GO 15452
15452: DISABLE
// begin DialogueOn ;
15453: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15457: LD_EXP 31
15461: PPUSH
15462: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15466: LD_EXP 31
15470: PPUSH
15471: LD_STRING DK-Kkilled-1
15473: PPUSH
15474: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15478: LD_EXP 26
15482: PPUSH
15483: LD_STRING DH-Kkilled-2
15485: PPUSH
15486: CALL_OW 88
// DialogueOff ;
15490: CALL_OW 7
// end ;
15494: END
// every 0 0$1 trigger kaiaKilledByRussian do
15495: LD_EXP 23
15499: IFFALSE 15516
15501: GO 15503
15503: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15504: LD_EXP 26
15508: PPUSH
15509: LD_STRING DH-Kkilled-3
15511: PPUSH
15512: CALL_OW 88
15516: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15517: LD_EXP 16
15521: PUSH
15522: LD_INT 106
15524: PPUSH
15525: CALL_OW 255
15529: PUSH
15530: LD_INT 2
15532: EQUAL
15533: PUSH
15534: LD_EXP 17
15538: OR
15539: AND
15540: PUSH
15541: LD_EXP 18
15545: PUSH
15546: LD_EXP 24
15550: PUSH
15551: LD_INT 112
15553: PPUSH
15554: CALL_OW 255
15558: PUSH
15559: LD_INT 2
15561: EQUAL
15562: AND
15563: OR
15564: AND
15565: IFFALSE 16805
15567: GO 15569
15569: DISABLE
15570: LD_INT 0
15572: PPUSH
15573: PPUSH
15574: PPUSH
15575: PPUSH
15576: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15577: LD_STRING GoToWest
15579: PPUSH
15580: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15584: LD_INT 17
15586: PPUSH
15587: LD_INT 1
15589: PPUSH
15590: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15594: LD_INT 35
15596: PPUSH
15597: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 17
15608: PPUSH
15609: LD_INT 22
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 21
15634: PUSH
15635: LD_INT 2
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: LD_INT 58
15647: PUSH
15648: EMPTY
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 70
15672: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15673: LD_ADDR_VAR 0 3
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_INT 2
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 3
15690: PUSH
15691: LD_INT 55
15693: PUSH
15694: EMPTY
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 21
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 58
15729: PUSH
15730: EMPTY
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: LIST
15750: PPUSH
15751: CALL_OW 69
15755: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15756: LD_VAR 0 2
15760: PUSH
15761: LD_INT 0
15763: PLUS
15764: PUSH
15765: LD_VAR 0 3
15769: PUSH
15770: LD_INT 0
15772: PLUS
15773: EQUAL
15774: IFFALSE 15594
// SaveCharacters ( Heike , 04_1_Heike ) ;
15776: LD_EXP 26
15780: PPUSH
15781: LD_STRING 04_1_Heike
15783: PPUSH
15784: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15788: LD_EXP 36
15792: PUSH
15793: LD_EXP 36
15797: PUSH
15798: LD_EXP 40
15802: IN
15803: NOT
15804: AND
15805: IFFALSE 15821
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15807: LD_EXP 36
15811: PPUSH
15812: LD_STRING 04_1_Aviradze
15814: PPUSH
15815: CALL_OW 38
15819: GO 15839
// if Aviradze then
15821: LD_EXP 36
15825: IFFALSE 15839
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15827: LD_EXP 36
15831: PPUSH
15832: LD_STRING 04_1_Aviradze_L
15834: PPUSH
15835: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15839: LD_EXP 29
15843: PUSH
15844: LD_EXP 29
15848: PUSH
15849: LD_EXP 40
15853: IN
15854: NOT
15855: AND
15856: IFFALSE 15872
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15858: LD_EXP 29
15862: PPUSH
15863: LD_STRING 04_1_Ibrahim
15865: PPUSH
15866: CALL_OW 38
15870: GO 15890
// if Ibrahim then
15872: LD_EXP 29
15876: IFFALSE 15890
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15878: LD_EXP 29
15882: PPUSH
15883: LD_STRING 04_1_Ibrahim_L
15885: PPUSH
15886: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15890: LD_EXP 30
15894: PUSH
15895: LD_EXP 30
15899: PUSH
15900: LD_EXP 40
15904: IN
15905: NOT
15906: AND
15907: IFFALSE 15923
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15909: LD_EXP 30
15913: PPUSH
15914: LD_STRING 04_1_Kamil
15916: PPUSH
15917: CALL_OW 38
15921: GO 15941
// if Kamil then
15923: LD_EXP 30
15927: IFFALSE 15941
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15929: LD_EXP 30
15933: PPUSH
15934: LD_STRING 04_1_Kamil_L
15936: PPUSH
15937: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15941: LD_EXP 32
15945: PUSH
15946: LD_EXP 32
15950: PUSH
15951: LD_EXP 40
15955: IN
15956: NOT
15957: AND
15958: IFFALSE 15974
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15960: LD_EXP 32
15964: PPUSH
15965: LD_STRING 04_1_Sophia
15967: PPUSH
15968: CALL_OW 38
15972: GO 15992
// if Sophia then
15974: LD_EXP 32
15978: IFFALSE 15992
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15980: LD_EXP 32
15984: PPUSH
15985: LD_STRING 04_1_Sophia_L
15987: PPUSH
15988: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15992: LD_EXP 31
15996: PUSH
15997: LD_EXP 31
16001: PUSH
16002: LD_EXP 40
16006: IN
16007: NOT
16008: AND
16009: IFFALSE 16025
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16011: LD_EXP 31
16015: PPUSH
16016: LD_STRING 04_1_Kaia
16018: PPUSH
16019: CALL_OW 38
16023: GO 16043
// if Kaia then
16025: LD_EXP 31
16029: IFFALSE 16043
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16031: LD_EXP 31
16035: PPUSH
16036: LD_STRING 04_1_Kaia_L
16038: PPUSH
16039: CALL_OW 38
// if Givi then
16043: LD_EXP 27
16047: IFFALSE 16061
// SaveCharacters ( Givi , 04_1_Givi ) ;
16049: LD_EXP 27
16053: PPUSH
16054: LD_STRING 04_1_Givi
16056: PPUSH
16057: CALL_OW 38
// if Mike then
16061: LD_EXP 28
16065: IFFALSE 16079
// SaveCharacters ( Mike , 04_1_Mike ) ;
16067: LD_EXP 28
16071: PPUSH
16072: LD_STRING 04_1_Mike
16074: PPUSH
16075: CALL_OW 38
// if Markov then
16079: LD_EXP 33
16083: IFFALSE 16097
// SaveCharacters ( Markov , 04_1_Markov ) ;
16085: LD_EXP 33
16089: PPUSH
16090: LD_STRING 04_1_Markov
16092: PPUSH
16093: CALL_OW 38
// if Kurt then
16097: LD_EXP 35
16101: IFFALSE 16122
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16103: LD_EXP 35
16107: PPUSH
16108: LD_STRING 04_1_Kurt
16110: PPUSH
16111: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16115: LD_STRING enableBioCharacter(BIO_KURT)
16117: PPUSH
16118: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16122: LD_EXP 38
16126: PUSH
16127: LD_EXP 40
16131: DIFF
16132: IFFALSE 16152
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16134: LD_EXP 38
16138: PUSH
16139: LD_EXP 40
16143: DIFF
16144: PPUSH
16145: LD_STRING 04_1_others
16147: PPUSH
16148: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16152: LD_EXP 40
16156: PUSH
16157: LD_EXP 38
16161: AND
16162: IFFALSE 16247
// begin tmp := [ ] ;
16164: LD_ADDR_VAR 0 2
16168: PUSH
16169: EMPTY
16170: ST_TO_ADDR
// for i in heikeSecondSquad do
16171: LD_ADDR_VAR 0 1
16175: PUSH
16176: LD_EXP 38
16180: PUSH
16181: FOR_IN
16182: IFFALSE 16227
// if i in aviradzeSquad then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_EXP 40
16193: IN
16194: IFFALSE 16225
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: LD_VAR 0 2
16205: PPUSH
16206: LD_VAR 0 2
16210: PUSH
16211: LD_INT 1
16213: PLUS
16214: PPUSH
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 1
16224: ST_TO_ADDR
16225: GO 16181
16227: POP
16228: POP
// if tmp then
16229: LD_VAR 0 2
16233: IFFALSE 16247
// SaveCharacters ( tmp , 04_1_others_L ) ;
16235: LD_VAR 0 2
16239: PPUSH
16240: LD_STRING 04_1_others_L
16242: PPUSH
16243: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16247: LD_ADDR_VAR 0 2
16251: PUSH
16252: LD_INT 22
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 23
16264: PUSH
16265: LD_INT 0
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PPUSH
16276: CALL_OW 69
16280: ST_TO_ADDR
// if tmp then
16281: LD_VAR 0 2
16285: IFFALSE 16299
// SaveCharacters ( tmp , 04_1_apes ) ;
16287: LD_VAR 0 2
16291: PPUSH
16292: LD_STRING 04_1_apes
16294: PPUSH
16295: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_INT 17
16306: PPUSH
16307: LD_INT 21
16309: PUSH
16310: LD_INT 2
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 70
16321: ST_TO_ADDR
// if tmp then
16322: LD_VAR 0 2
16326: IFFALSE 16670
// begin tmp2 := [ ] ;
16328: LD_ADDR_VAR 0 3
16332: PUSH
16333: EMPTY
16334: ST_TO_ADDR
// for i in tmp do
16335: LD_ADDR_VAR 0 1
16339: PUSH
16340: LD_VAR 0 2
16344: PUSH
16345: FOR_IN
16346: IFFALSE 16656
// begin driver := IsDrivenBy ( i ) ;
16348: LD_ADDR_VAR 0 5
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 311
16362: ST_TO_ADDR
// if not driver then
16363: LD_VAR 0 5
16367: NOT
16368: IFFALSE 16372
// continue ;
16370: GO 16345
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 264
16381: PUSH
16382: LD_INT 32
16384: PUSH
16385: LD_INT 12
16387: PUSH
16388: LD_INT 51
16390: PUSH
16391: LD_INT 89
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: IN
16400: IFFALSE 16548
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16402: LD_ADDR_VAR 0 4
16406: PUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 289
16419: PUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_INT 2
16427: PPUSH
16428: CALL_OW 289
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16437: LD_ADDR_VAR 0 3
16441: PUSH
16442: LD_VAR 0 3
16446: PPUSH
16447: LD_VAR 0 3
16451: PUSH
16452: LD_INT 1
16454: PLUS
16455: PPUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 265
16465: PUSH
16466: LD_VAR 0 1
16470: PPUSH
16471: CALL_OW 262
16475: PUSH
16476: LD_VAR 0 1
16480: PPUSH
16481: CALL_OW 263
16485: PUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 264
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 248
16505: PUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 256
16515: PUSH
16516: LD_VAR 0 4
16520: PUSH
16521: LD_VAR 0 5
16525: PPUSH
16526: CALL_OW 257
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PPUSH
16541: CALL_OW 1
16545: ST_TO_ADDR
// end else
16546: GO 16654
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16548: LD_ADDR_VAR 0 3
16552: PUSH
16553: LD_VAR 0 3
16557: PPUSH
16558: LD_VAR 0 3
16562: PUSH
16563: LD_INT 1
16565: PLUS
16566: PPUSH
16567: LD_VAR 0 1
16571: PPUSH
16572: CALL_OW 265
16576: PUSH
16577: LD_VAR 0 1
16581: PPUSH
16582: CALL_OW 262
16586: PUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 263
16596: PUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 264
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 248
16616: PUSH
16617: LD_VAR 0 1
16621: PPUSH
16622: CALL_OW 256
16626: PUSH
16627: EMPTY
16628: PUSH
16629: LD_VAR 0 5
16633: PPUSH
16634: CALL_OW 257
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: PPUSH
16649: CALL_OW 1
16653: ST_TO_ADDR
// end ;
16654: GO 16345
16656: POP
16657: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16658: LD_VAR 0 3
16662: PPUSH
16663: LD_STRING 04_1_Vehicles
16665: PPUSH
16666: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16670: LD_EXP 21
16674: PPUSH
16675: LD_STRING 04_1_RuLabCaptured
16677: PPUSH
16678: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16682: LD_EXP 19
16686: PPUSH
16687: LD_STRING 04_1_EscapeCounter
16689: PPUSH
16690: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16694: LD_EXP 15
16698: PPUSH
16699: LD_STRING 04_1_BaseHill
16701: PPUSH
16702: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16706: LD_OWVAR 1
16710: PPUSH
16711: LD_STRING 04_1_Time
16713: PPUSH
16714: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16718: LD_EXP 14
16722: PPUSH
16723: LD_STRING 04_1_DeadCounter
16725: PPUSH
16726: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16730: LD_EXP 24
16734: PUSH
16735: LD_INT 112
16737: PPUSH
16738: CALL_OW 255
16742: MUL
16743: PUSH
16744: LD_INT 2
16746: EQUAL
16747: PPUSH
16748: LD_STRING 04_1_KaganCaptured
16750: PPUSH
16751: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16755: LD_INT 22
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 34
16767: PUSH
16768: LD_INT 26
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PPUSH
16779: CALL_OW 69
16783: PUSH
16784: LD_INT 0
16786: PLUS
16787: PPUSH
16788: LD_STRING 04_1_Flamethrower
16790: PPUSH
16791: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16795: LD_INT 1
16797: PPUSH
16798: LD_STRING __x1\04_cont2
16800: PPUSH
16801: CALL_OW 340
// end ; end_of_file
16805: PPOPN 5
16807: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 266
16817: PUSH
16818: LD_INT 0
16820: EQUAL
16821: PUSH
16822: LD_VAR 0 1
16826: PPUSH
16827: CALL_OW 255
16831: PUSH
16832: LD_INT 2
16834: EQUAL
16835: AND
16836: IFFALSE 16846
// baseConstructed := true ;
16838: LD_ADDR_EXP 3
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL_OW 266
16855: PUSH
16856: LD_INT 6
16858: EQUAL
16859: PUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: PUSH
16870: LD_INT 2
16872: EQUAL
16873: AND
16874: IFFALSE 16884
// labConstructed := true ;
16876: LD_ADDR_EXP 4
16880: PUSH
16881: LD_INT 1
16883: ST_TO_ADDR
// end ;
16884: PPOPN 1
16886: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL 33681 0 1
// if un = Heike then
16896: LD_VAR 0 1
16900: PUSH
16901: LD_EXP 26
16905: EQUAL
16906: IFFALSE 16915
// YouLost ( Heike ) ;
16908: LD_STRING Heike
16910: PPUSH
16911: CALL_OW 104
// if un = Omar then
16915: LD_VAR 0 1
16919: PUSH
16920: LD_EXP 34
16924: EQUAL
16925: IFFALSE 16934
// YouLost ( Omar ) ;
16927: LD_STRING Omar
16929: PPUSH
16930: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16934: LD_VAR 0 1
16938: PUSH
16939: LD_INT 22
16941: PUSH
16942: LD_INT 2
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 23
16951: PUSH
16952: LD_INT 2
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 21
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: PPUSH
16974: CALL_OW 69
16978: IN
16979: IFFALSE 16995
// loseCounter := loseCounter + 1 ;
16981: LD_ADDR_EXP 14
16985: PUSH
16986: LD_EXP 14
16990: PUSH
16991: LD_INT 1
16993: PLUS
16994: ST_TO_ADDR
// if un = omikron then
16995: LD_VAR 0 1
16999: PUSH
17000: LD_INT 64
17002: EQUAL
17003: IFFALSE 17013
// omicronFall := true ;
17005: LD_ADDR_EXP 13
17009: PUSH
17010: LD_INT 1
17012: ST_TO_ADDR
// if un = kirov then
17013: LD_VAR 0 1
17017: PUSH
17018: LD_INT 71
17020: EQUAL
17021: IFFALSE 17038
// begin ChangeMissionObjectives ( KirovDone ) ;
17023: LD_STRING KirovDone
17025: PPUSH
17026: CALL_OW 337
// kirovDestroyed := true ;
17030: LD_ADDR_EXP 16
17034: PUSH
17035: LD_INT 1
17037: ST_TO_ADDR
// end ; if un = beria then
17038: LD_VAR 0 1
17042: PUSH
17043: LD_INT 106
17045: EQUAL
17046: IFFALSE 17063
// begin ChangeMissionObjectives ( BeriaDone ) ;
17048: LD_STRING BeriaDone
17050: PPUSH
17051: CALL_OW 337
// beriaDestroyed := true ;
17055: LD_ADDR_EXP 17
17059: PUSH
17060: LD_INT 1
17062: ST_TO_ADDR
// end ; if un = kagan then
17063: LD_VAR 0 1
17067: PUSH
17068: LD_INT 112
17070: EQUAL
17071: IFFALSE 17081
// kaganDestroyed := true ;
17073: LD_ADDR_EXP 18
17077: PUSH
17078: LD_INT 1
17080: ST_TO_ADDR
// if un in russianPatrol then
17081: LD_VAR 0 1
17085: PUSH
17086: LD_EXP 48
17090: IN
17091: IFFALSE 17109
// russianPatrol := russianPatrol diff un ;
17093: LD_ADDR_EXP 48
17097: PUSH
17098: LD_EXP 48
17102: PUSH
17103: LD_VAR 0 1
17107: DIFF
17108: ST_TO_ADDR
// if un in russianOmicronAttackers then
17109: LD_VAR 0 1
17113: PUSH
17114: LD_EXP 49
17118: IN
17119: IFFALSE 17137
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17121: LD_ADDR_EXP 49
17125: PUSH
17126: LD_EXP 49
17130: PUSH
17131: LD_VAR 0 1
17135: DIFF
17136: ST_TO_ADDR
// end ;
17137: PPOPN 1
17139: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
17144: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_INT 2
17152: PUSH
17153: LD_INT 22
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_INT 4
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 22
17175: PUSH
17176: LD_INT 6
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 30
17191: PUSH
17192: LD_INT 32
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: IN
17208: IFFALSE 17381
// begin sol := UnitsInside ( un ) ;
17210: LD_ADDR_VAR 0 3
17214: PUSH
17215: LD_VAR 0 1
17219: PPUSH
17220: CALL_OW 313
17224: ST_TO_ADDR
// if not sol then
17225: LD_VAR 0 3
17229: NOT
17230: IFFALSE 17234
// exit ;
17232: GO 17381
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17234: LD_ADDR_VAR 0 4
17238: PUSH
17239: LD_INT 22
17241: PUSH
17242: LD_VAR 0 1
17246: PPUSH
17247: CALL_OW 255
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 2
17258: PUSH
17259: LD_INT 30
17261: PUSH
17262: LD_INT 4
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 30
17271: PUSH
17272: LD_INT 5
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL_OW 69
17292: ST_TO_ADDR
// if not nearestBarracks then
17293: LD_VAR 0 4
17297: NOT
17298: IFFALSE 17302
// exit ;
17300: GO 17381
// for i in nearestBarracks do
17302: LD_ADDR_VAR 0 2
17306: PUSH
17307: LD_VAR 0 4
17311: PUSH
17312: FOR_IN
17313: IFFALSE 17348
// if UnitsInside ( i ) = 6 then
17315: LD_VAR 0 2
17319: PPUSH
17320: CALL_OW 313
17324: PUSH
17325: LD_INT 6
17327: EQUAL
17328: IFFALSE 17346
// nearestBarracks := nearestBarracks diff i ;
17330: LD_ADDR_VAR 0 4
17334: PUSH
17335: LD_VAR 0 4
17339: PUSH
17340: LD_VAR 0 2
17344: DIFF
17345: ST_TO_ADDR
17346: GO 17312
17348: POP
17349: POP
// if not nearestBarracks then
17350: LD_VAR 0 4
17354: NOT
17355: IFFALSE 17359
// exit ;
17357: GO 17381
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17359: LD_VAR 0 3
17363: PUSH
17364: LD_INT 1
17366: ARRAY
17367: PPUSH
17368: LD_VAR 0 4
17372: PUSH
17373: LD_INT 1
17375: ARRAY
17376: PPUSH
17377: CALL_OW 120
// end ; end ;
17381: PPOPN 4
17383: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17384: LD_INT 0
17386: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17387: LD_EXP 8
17391: NOT
17392: PUSH
17393: LD_EXP 5
17397: NOT
17398: OR
17399: IFFALSE 17403
// exit ;
17401: GO 17471
// for i in camAreas do
17403: LD_ADDR_VAR 0 5
17407: PUSH
17408: LD_EXP 8
17412: PUSH
17413: FOR_IN
17414: IFFALSE 17469
// if InArea ( x , y , i ) then
17416: LD_VAR 0 3
17420: PPUSH
17421: LD_VAR 0 4
17425: PPUSH
17426: LD_VAR 0 5
17430: PPUSH
17431: CALL_OW 309
17435: IFFALSE 17467
// begin SetAreaMapShow ( i , 0 ) ;
17437: LD_VAR 0 5
17441: PPUSH
17442: LD_INT 0
17444: PPUSH
17445: CALL_OW 424
// camAreas := camAreas diff i ;
17449: LD_ADDR_EXP 8
17453: PUSH
17454: LD_EXP 8
17458: PUSH
17459: LD_VAR 0 5
17463: DIFF
17464: ST_TO_ADDR
// break ;
17465: GO 17469
// end ;
17467: GO 17413
17469: POP
17470: POP
// end ;
17471: PPOPN 5
17473: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17474: LD_VAR 0 1
17478: PUSH
17479: LD_INT 2
17481: EQUAL
17482: PUSH
17483: LD_VAR 0 2
17487: PUSH
17488: LD_INT 5
17490: PUSH
17491: LD_INT 8
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: IN
17498: AND
17499: IFFALSE 17508
// YouLost ( Ally ) ;
17501: LD_STRING Ally
17503: PPUSH
17504: CALL_OW 104
// end ;
17508: PPOPN 2
17510: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17511: LD_VAR 0 1
17515: PUSH
17516: LD_EXP 31
17520: EQUAL
17521: PUSH
17522: LD_VAR 0 2
17526: PUSH
17527: LD_INT 3
17529: PUSH
17530: LD_INT 6
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: IN
17537: AND
17538: IFFALSE 17569
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17540: LD_ADDR_EXP 23
17544: PUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 250
17554: PUSH
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL_OW 251
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: ST_TO_ADDR
// end ;
17569: PPOPN 3
17571: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17572: LD_VAR 0 1
17576: PPUSH
17577: LD_VAR 0 2
17581: PPUSH
17582: CALL 33801 0 2
// end ; end_of_file
17586: PPOPN 2
17588: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17589: LD_EXP 11
17593: NOT
17594: PUSH
17595: LD_INT 12
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 287
17605: PUSH
17606: LD_INT 20
17608: PUSH
17609: LD_INT 16
17611: PUSH
17612: LD_INT 12
17614: PUSH
17615: LD_INT 10
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: PUSH
17624: LD_OWVAR 67
17628: ARRAY
17629: LESS
17630: AND
17631: IFFALSE 17658
17633: GO 17635
17635: DISABLE
// begin enable ;
17636: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17637: LD_INT 1
17639: PPUSH
17640: LD_INT 5
17642: PPUSH
17643: CALL_OW 12
17647: PPUSH
17648: LD_INT 12
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: CALL_OW 55
// end ; end_of_file
17658: END
// every 0 0$1 trigger omarCountdown do
17659: LD_EXP 22
17663: IFFALSE 17715
17665: GO 17667
17667: DISABLE
// begin enable ;
17668: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17669: LD_ADDR_OWVAR 47
17673: PUSH
17674: LD_STRING #X104-1
17676: PUSH
17677: LD_EXP 22
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17686: LD_ADDR_EXP 22
17690: PUSH
17691: LD_EXP 22
17695: PUSH
17696: LD_INT 35
17698: MINUS
17699: ST_TO_ADDR
// if not omarCountdown then
17700: LD_EXP 22
17704: NOT
17705: IFFALSE 17715
// display_strings :=  ;
17707: LD_ADDR_OWVAR 47
17711: PUSH
17712: LD_STRING 
17714: ST_TO_ADDR
// end ; end_of_file
17715: END
// export globalGameSaveCounter ; every 0 0$1 do
17716: GO 17718
17718: DISABLE
// begin enable ;
17719: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17720: LD_STRING updateTimer(
17722: PUSH
17723: LD_OWVAR 1
17727: STR
17728: PUSH
17729: LD_STRING );
17731: STR
17732: PPUSH
17733: CALL_OW 559
// end ;
17737: END
// every 0 0$1 do
17738: GO 17740
17740: DISABLE
// begin globalGameSaveCounter := 0 ;
17741: LD_ADDR_EXP 53
17745: PUSH
17746: LD_INT 0
17748: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17749: LD_STRING setGameSaveCounter(0)
17751: PPUSH
17752: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17756: LD_STRING initStreamRollete();
17758: PPUSH
17759: CALL_OW 559
// InitStreamMode ;
17763: CALL 19089 0 0
// DefineStreamItems ( false ) ;
17767: LD_INT 0
17769: PPUSH
17770: CALL 19553 0 1
// end ;
17774: END
// export function SOS_MapStart ( ) ; begin
17775: LD_INT 0
17777: PPUSH
// if streamModeActive then
17778: LD_EXP 54
17782: IFFALSE 17791
// DefineStreamItems ( true ) ;
17784: LD_INT 1
17786: PPUSH
17787: CALL 19553 0 1
// UpdateLuaVariables ( ) ;
17791: CALL 17808 0 0
// UpdateFactoryWaypoints ( ) ;
17795: CALL 32422 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17799: CALL 32679 0 0
// end ;
17803: LD_VAR 0 1
17807: RET
// function UpdateLuaVariables ( ) ; begin
17808: LD_INT 0
17810: PPUSH
// if globalGameSaveCounter then
17811: LD_EXP 53
17815: IFFALSE 17849
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17817: LD_ADDR_EXP 53
17821: PUSH
17822: LD_EXP 53
17826: PPUSH
17827: CALL 77472 0 1
17831: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17832: LD_STRING setGameSaveCounter(
17834: PUSH
17835: LD_EXP 53
17839: STR
17840: PUSH
17841: LD_STRING )
17843: STR
17844: PPUSH
17845: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17849: LD_STRING setGameDifficulty(
17851: PUSH
17852: LD_OWVAR 67
17856: STR
17857: PUSH
17858: LD_STRING )
17860: STR
17861: PPUSH
17862: CALL_OW 559
// end ;
17866: LD_VAR 0 1
17870: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17871: LD_INT 0
17873: PPUSH
// if p2 = stream_mode then
17874: LD_VAR 0 2
17878: PUSH
17879: LD_INT 100
17881: EQUAL
17882: IFFALSE 18885
// begin if not StreamModeActive then
17884: LD_EXP 54
17888: NOT
17889: IFFALSE 17899
// StreamModeActive := true ;
17891: LD_ADDR_EXP 54
17895: PUSH
17896: LD_INT 1
17898: ST_TO_ADDR
// if p3 = 0 then
17899: LD_VAR 0 3
17903: PUSH
17904: LD_INT 0
17906: EQUAL
17907: IFFALSE 17913
// InitStreamMode ;
17909: CALL 19089 0 0
// if p3 = 1 then
17913: LD_VAR 0 3
17917: PUSH
17918: LD_INT 1
17920: EQUAL
17921: IFFALSE 17931
// sRocket := true ;
17923: LD_ADDR_EXP 59
17927: PUSH
17928: LD_INT 1
17930: ST_TO_ADDR
// if p3 = 2 then
17931: LD_VAR 0 3
17935: PUSH
17936: LD_INT 2
17938: EQUAL
17939: IFFALSE 17949
// sSpeed := true ;
17941: LD_ADDR_EXP 58
17945: PUSH
17946: LD_INT 1
17948: ST_TO_ADDR
// if p3 = 3 then
17949: LD_VAR 0 3
17953: PUSH
17954: LD_INT 3
17956: EQUAL
17957: IFFALSE 17967
// sEngine := true ;
17959: LD_ADDR_EXP 60
17963: PUSH
17964: LD_INT 1
17966: ST_TO_ADDR
// if p3 = 4 then
17967: LD_VAR 0 3
17971: PUSH
17972: LD_INT 4
17974: EQUAL
17975: IFFALSE 17985
// sSpec := true ;
17977: LD_ADDR_EXP 57
17981: PUSH
17982: LD_INT 1
17984: ST_TO_ADDR
// if p3 = 5 then
17985: LD_VAR 0 3
17989: PUSH
17990: LD_INT 5
17992: EQUAL
17993: IFFALSE 18003
// sLevel := true ;
17995: LD_ADDR_EXP 61
17999: PUSH
18000: LD_INT 1
18002: ST_TO_ADDR
// if p3 = 6 then
18003: LD_VAR 0 3
18007: PUSH
18008: LD_INT 6
18010: EQUAL
18011: IFFALSE 18021
// sArmoury := true ;
18013: LD_ADDR_EXP 62
18017: PUSH
18018: LD_INT 1
18020: ST_TO_ADDR
// if p3 = 7 then
18021: LD_VAR 0 3
18025: PUSH
18026: LD_INT 7
18028: EQUAL
18029: IFFALSE 18039
// sRadar := true ;
18031: LD_ADDR_EXP 63
18035: PUSH
18036: LD_INT 1
18038: ST_TO_ADDR
// if p3 = 8 then
18039: LD_VAR 0 3
18043: PUSH
18044: LD_INT 8
18046: EQUAL
18047: IFFALSE 18057
// sBunker := true ;
18049: LD_ADDR_EXP 64
18053: PUSH
18054: LD_INT 1
18056: ST_TO_ADDR
// if p3 = 9 then
18057: LD_VAR 0 3
18061: PUSH
18062: LD_INT 9
18064: EQUAL
18065: IFFALSE 18075
// sHack := true ;
18067: LD_ADDR_EXP 65
18071: PUSH
18072: LD_INT 1
18074: ST_TO_ADDR
// if p3 = 10 then
18075: LD_VAR 0 3
18079: PUSH
18080: LD_INT 10
18082: EQUAL
18083: IFFALSE 18093
// sFire := true ;
18085: LD_ADDR_EXP 66
18089: PUSH
18090: LD_INT 1
18092: ST_TO_ADDR
// if p3 = 11 then
18093: LD_VAR 0 3
18097: PUSH
18098: LD_INT 11
18100: EQUAL
18101: IFFALSE 18111
// sRefresh := true ;
18103: LD_ADDR_EXP 67
18107: PUSH
18108: LD_INT 1
18110: ST_TO_ADDR
// if p3 = 12 then
18111: LD_VAR 0 3
18115: PUSH
18116: LD_INT 12
18118: EQUAL
18119: IFFALSE 18129
// sExp := true ;
18121: LD_ADDR_EXP 68
18125: PUSH
18126: LD_INT 1
18128: ST_TO_ADDR
// if p3 = 13 then
18129: LD_VAR 0 3
18133: PUSH
18134: LD_INT 13
18136: EQUAL
18137: IFFALSE 18147
// sDepot := true ;
18139: LD_ADDR_EXP 69
18143: PUSH
18144: LD_INT 1
18146: ST_TO_ADDR
// if p3 = 14 then
18147: LD_VAR 0 3
18151: PUSH
18152: LD_INT 14
18154: EQUAL
18155: IFFALSE 18165
// sFlag := true ;
18157: LD_ADDR_EXP 70
18161: PUSH
18162: LD_INT 1
18164: ST_TO_ADDR
// if p3 = 15 then
18165: LD_VAR 0 3
18169: PUSH
18170: LD_INT 15
18172: EQUAL
18173: IFFALSE 18183
// sKamikadze := true ;
18175: LD_ADDR_EXP 78
18179: PUSH
18180: LD_INT 1
18182: ST_TO_ADDR
// if p3 = 16 then
18183: LD_VAR 0 3
18187: PUSH
18188: LD_INT 16
18190: EQUAL
18191: IFFALSE 18201
// sTroll := true ;
18193: LD_ADDR_EXP 79
18197: PUSH
18198: LD_INT 1
18200: ST_TO_ADDR
// if p3 = 17 then
18201: LD_VAR 0 3
18205: PUSH
18206: LD_INT 17
18208: EQUAL
18209: IFFALSE 18219
// sSlow := true ;
18211: LD_ADDR_EXP 80
18215: PUSH
18216: LD_INT 1
18218: ST_TO_ADDR
// if p3 = 18 then
18219: LD_VAR 0 3
18223: PUSH
18224: LD_INT 18
18226: EQUAL
18227: IFFALSE 18237
// sLack := true ;
18229: LD_ADDR_EXP 81
18233: PUSH
18234: LD_INT 1
18236: ST_TO_ADDR
// if p3 = 19 then
18237: LD_VAR 0 3
18241: PUSH
18242: LD_INT 19
18244: EQUAL
18245: IFFALSE 18255
// sTank := true ;
18247: LD_ADDR_EXP 83
18251: PUSH
18252: LD_INT 1
18254: ST_TO_ADDR
// if p3 = 20 then
18255: LD_VAR 0 3
18259: PUSH
18260: LD_INT 20
18262: EQUAL
18263: IFFALSE 18273
// sRemote := true ;
18265: LD_ADDR_EXP 84
18269: PUSH
18270: LD_INT 1
18272: ST_TO_ADDR
// if p3 = 21 then
18273: LD_VAR 0 3
18277: PUSH
18278: LD_INT 21
18280: EQUAL
18281: IFFALSE 18291
// sPowell := true ;
18283: LD_ADDR_EXP 85
18287: PUSH
18288: LD_INT 1
18290: ST_TO_ADDR
// if p3 = 22 then
18291: LD_VAR 0 3
18295: PUSH
18296: LD_INT 22
18298: EQUAL
18299: IFFALSE 18309
// sTeleport := true ;
18301: LD_ADDR_EXP 88
18305: PUSH
18306: LD_INT 1
18308: ST_TO_ADDR
// if p3 = 23 then
18309: LD_VAR 0 3
18313: PUSH
18314: LD_INT 23
18316: EQUAL
18317: IFFALSE 18327
// sOilTower := true ;
18319: LD_ADDR_EXP 90
18323: PUSH
18324: LD_INT 1
18326: ST_TO_ADDR
// if p3 = 24 then
18327: LD_VAR 0 3
18331: PUSH
18332: LD_INT 24
18334: EQUAL
18335: IFFALSE 18345
// sShovel := true ;
18337: LD_ADDR_EXP 91
18341: PUSH
18342: LD_INT 1
18344: ST_TO_ADDR
// if p3 = 25 then
18345: LD_VAR 0 3
18349: PUSH
18350: LD_INT 25
18352: EQUAL
18353: IFFALSE 18363
// sSheik := true ;
18355: LD_ADDR_EXP 92
18359: PUSH
18360: LD_INT 1
18362: ST_TO_ADDR
// if p3 = 26 then
18363: LD_VAR 0 3
18367: PUSH
18368: LD_INT 26
18370: EQUAL
18371: IFFALSE 18381
// sEarthquake := true ;
18373: LD_ADDR_EXP 94
18377: PUSH
18378: LD_INT 1
18380: ST_TO_ADDR
// if p3 = 27 then
18381: LD_VAR 0 3
18385: PUSH
18386: LD_INT 27
18388: EQUAL
18389: IFFALSE 18399
// sAI := true ;
18391: LD_ADDR_EXP 95
18395: PUSH
18396: LD_INT 1
18398: ST_TO_ADDR
// if p3 = 28 then
18399: LD_VAR 0 3
18403: PUSH
18404: LD_INT 28
18406: EQUAL
18407: IFFALSE 18417
// sCargo := true ;
18409: LD_ADDR_EXP 98
18413: PUSH
18414: LD_INT 1
18416: ST_TO_ADDR
// if p3 = 29 then
18417: LD_VAR 0 3
18421: PUSH
18422: LD_INT 29
18424: EQUAL
18425: IFFALSE 18435
// sDLaser := true ;
18427: LD_ADDR_EXP 99
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// if p3 = 30 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_INT 30
18442: EQUAL
18443: IFFALSE 18453
// sExchange := true ;
18445: LD_ADDR_EXP 100
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if p3 = 31 then
18453: LD_VAR 0 3
18457: PUSH
18458: LD_INT 31
18460: EQUAL
18461: IFFALSE 18471
// sFac := true ;
18463: LD_ADDR_EXP 101
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// if p3 = 32 then
18471: LD_VAR 0 3
18475: PUSH
18476: LD_INT 32
18478: EQUAL
18479: IFFALSE 18489
// sPower := true ;
18481: LD_ADDR_EXP 102
18485: PUSH
18486: LD_INT 1
18488: ST_TO_ADDR
// if p3 = 33 then
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 33
18496: EQUAL
18497: IFFALSE 18507
// sRandom := true ;
18499: LD_ADDR_EXP 103
18503: PUSH
18504: LD_INT 1
18506: ST_TO_ADDR
// if p3 = 34 then
18507: LD_VAR 0 3
18511: PUSH
18512: LD_INT 34
18514: EQUAL
18515: IFFALSE 18525
// sShield := true ;
18517: LD_ADDR_EXP 104
18521: PUSH
18522: LD_INT 1
18524: ST_TO_ADDR
// if p3 = 35 then
18525: LD_VAR 0 3
18529: PUSH
18530: LD_INT 35
18532: EQUAL
18533: IFFALSE 18543
// sTime := true ;
18535: LD_ADDR_EXP 105
18539: PUSH
18540: LD_INT 1
18542: ST_TO_ADDR
// if p3 = 36 then
18543: LD_VAR 0 3
18547: PUSH
18548: LD_INT 36
18550: EQUAL
18551: IFFALSE 18561
// sTools := true ;
18553: LD_ADDR_EXP 106
18557: PUSH
18558: LD_INT 1
18560: ST_TO_ADDR
// if p3 = 101 then
18561: LD_VAR 0 3
18565: PUSH
18566: LD_INT 101
18568: EQUAL
18569: IFFALSE 18579
// sSold := true ;
18571: LD_ADDR_EXP 71
18575: PUSH
18576: LD_INT 1
18578: ST_TO_ADDR
// if p3 = 102 then
18579: LD_VAR 0 3
18583: PUSH
18584: LD_INT 102
18586: EQUAL
18587: IFFALSE 18597
// sDiff := true ;
18589: LD_ADDR_EXP 72
18593: PUSH
18594: LD_INT 1
18596: ST_TO_ADDR
// if p3 = 103 then
18597: LD_VAR 0 3
18601: PUSH
18602: LD_INT 103
18604: EQUAL
18605: IFFALSE 18615
// sFog := true ;
18607: LD_ADDR_EXP 75
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// if p3 = 104 then
18615: LD_VAR 0 3
18619: PUSH
18620: LD_INT 104
18622: EQUAL
18623: IFFALSE 18633
// sReset := true ;
18625: LD_ADDR_EXP 76
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if p3 = 105 then
18633: LD_VAR 0 3
18637: PUSH
18638: LD_INT 105
18640: EQUAL
18641: IFFALSE 18651
// sSun := true ;
18643: LD_ADDR_EXP 77
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// if p3 = 106 then
18651: LD_VAR 0 3
18655: PUSH
18656: LD_INT 106
18658: EQUAL
18659: IFFALSE 18669
// sTiger := true ;
18661: LD_ADDR_EXP 73
18665: PUSH
18666: LD_INT 1
18668: ST_TO_ADDR
// if p3 = 107 then
18669: LD_VAR 0 3
18673: PUSH
18674: LD_INT 107
18676: EQUAL
18677: IFFALSE 18687
// sBomb := true ;
18679: LD_ADDR_EXP 74
18683: PUSH
18684: LD_INT 1
18686: ST_TO_ADDR
// if p3 = 108 then
18687: LD_VAR 0 3
18691: PUSH
18692: LD_INT 108
18694: EQUAL
18695: IFFALSE 18705
// sWound := true ;
18697: LD_ADDR_EXP 82
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// if p3 = 109 then
18705: LD_VAR 0 3
18709: PUSH
18710: LD_INT 109
18712: EQUAL
18713: IFFALSE 18723
// sBetray := true ;
18715: LD_ADDR_EXP 86
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
// if p3 = 110 then
18723: LD_VAR 0 3
18727: PUSH
18728: LD_INT 110
18730: EQUAL
18731: IFFALSE 18741
// sContamin := true ;
18733: LD_ADDR_EXP 87
18737: PUSH
18738: LD_INT 1
18740: ST_TO_ADDR
// if p3 = 111 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 111
18748: EQUAL
18749: IFFALSE 18759
// sOil := true ;
18751: LD_ADDR_EXP 89
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// if p3 = 112 then
18759: LD_VAR 0 3
18763: PUSH
18764: LD_INT 112
18766: EQUAL
18767: IFFALSE 18777
// sStu := true ;
18769: LD_ADDR_EXP 93
18773: PUSH
18774: LD_INT 1
18776: ST_TO_ADDR
// if p3 = 113 then
18777: LD_VAR 0 3
18781: PUSH
18782: LD_INT 113
18784: EQUAL
18785: IFFALSE 18795
// sBazooka := true ;
18787: LD_ADDR_EXP 96
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// if p3 = 114 then
18795: LD_VAR 0 3
18799: PUSH
18800: LD_INT 114
18802: EQUAL
18803: IFFALSE 18813
// sMortar := true ;
18805: LD_ADDR_EXP 97
18809: PUSH
18810: LD_INT 1
18812: ST_TO_ADDR
// if p3 = 115 then
18813: LD_VAR 0 3
18817: PUSH
18818: LD_INT 115
18820: EQUAL
18821: IFFALSE 18831
// sRanger := true ;
18823: LD_ADDR_EXP 107
18827: PUSH
18828: LD_INT 1
18830: ST_TO_ADDR
// if p3 = 116 then
18831: LD_VAR 0 3
18835: PUSH
18836: LD_INT 116
18838: EQUAL
18839: IFFALSE 18849
// sComputer := true ;
18841: LD_ADDR_EXP 108
18845: PUSH
18846: LD_INT 1
18848: ST_TO_ADDR
// if p3 = 117 then
18849: LD_VAR 0 3
18853: PUSH
18854: LD_INT 117
18856: EQUAL
18857: IFFALSE 18867
// s30 := true ;
18859: LD_ADDR_EXP 109
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// if p3 = 118 then
18867: LD_VAR 0 3
18871: PUSH
18872: LD_INT 118
18874: EQUAL
18875: IFFALSE 18885
// s60 := true ;
18877: LD_ADDR_EXP 110
18881: PUSH
18882: LD_INT 1
18884: ST_TO_ADDR
// end ; if p2 = hack_mode then
18885: LD_VAR 0 2
18889: PUSH
18890: LD_INT 101
18892: EQUAL
18893: IFFALSE 19021
// begin case p3 of 1 :
18895: LD_VAR 0 3
18899: PUSH
18900: LD_INT 1
18902: DOUBLE
18903: EQUAL
18904: IFTRUE 18908
18906: GO 18915
18908: POP
// hHackUnlimitedResources ; 2 :
18909: CALL 31168 0 0
18913: GO 19021
18915: LD_INT 2
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18930
18923: POP
// hHackSetLevel10 ; 3 :
18924: CALL 31301 0 0
18928: GO 19021
18930: LD_INT 3
18932: DOUBLE
18933: EQUAL
18934: IFTRUE 18938
18936: GO 18945
18938: POP
// hHackSetLevel10YourUnits ; 4 :
18939: CALL 31386 0 0
18943: GO 19021
18945: LD_INT 4
18947: DOUBLE
18948: EQUAL
18949: IFTRUE 18953
18951: GO 18960
18953: POP
// hHackInvincible ; 5 :
18954: CALL 31834 0 0
18958: GO 19021
18960: LD_INT 5
18962: DOUBLE
18963: EQUAL
18964: IFTRUE 18968
18966: GO 18975
18968: POP
// hHackInvisible ; 6 :
18969: CALL 31945 0 0
18973: GO 19021
18975: LD_INT 6
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 18990
18983: POP
// hHackChangeYourSide ; 7 :
18984: CALL 32002 0 0
18988: GO 19021
18990: LD_INT 7
18992: DOUBLE
18993: EQUAL
18994: IFTRUE 18998
18996: GO 19005
18998: POP
// hHackChangeUnitSide ; 8 :
18999: CALL 32044 0 0
19003: GO 19021
19005: LD_INT 8
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19020
19013: POP
// hHackFog ; end ;
19014: CALL 32145 0 0
19018: GO 19021
19020: POP
// end ; if p2 = game_save_mode then
19021: LD_VAR 0 2
19025: PUSH
19026: LD_INT 102
19028: EQUAL
19029: IFFALSE 19084
// begin if p3 = 1 then
19031: LD_VAR 0 3
19035: PUSH
19036: LD_INT 1
19038: EQUAL
19039: IFFALSE 19051
// globalGameSaveCounter := p4 ;
19041: LD_ADDR_EXP 53
19045: PUSH
19046: LD_VAR 0 4
19050: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19051: LD_VAR 0 3
19055: PUSH
19056: LD_INT 2
19058: EQUAL
19059: PUSH
19060: LD_EXP 53
19064: AND
19065: IFFALSE 19084
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19067: LD_STRING setGameSaveCounter(
19069: PUSH
19070: LD_EXP 53
19074: STR
19075: PUSH
19076: LD_STRING )
19078: STR
19079: PPUSH
19080: CALL_OW 559
// end ; end ;
19084: LD_VAR 0 7
19088: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19089: LD_INT 0
19091: PPUSH
// streamModeActive := false ;
19092: LD_ADDR_EXP 54
19096: PUSH
19097: LD_INT 0
19099: ST_TO_ADDR
// normalCounter := 36 ;
19100: LD_ADDR_EXP 55
19104: PUSH
19105: LD_INT 36
19107: ST_TO_ADDR
// hardcoreCounter := 18 ;
19108: LD_ADDR_EXP 56
19112: PUSH
19113: LD_INT 18
19115: ST_TO_ADDR
// sRocket := false ;
19116: LD_ADDR_EXP 59
19120: PUSH
19121: LD_INT 0
19123: ST_TO_ADDR
// sSpeed := false ;
19124: LD_ADDR_EXP 58
19128: PUSH
19129: LD_INT 0
19131: ST_TO_ADDR
// sEngine := false ;
19132: LD_ADDR_EXP 60
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// sSpec := false ;
19140: LD_ADDR_EXP 57
19144: PUSH
19145: LD_INT 0
19147: ST_TO_ADDR
// sLevel := false ;
19148: LD_ADDR_EXP 61
19152: PUSH
19153: LD_INT 0
19155: ST_TO_ADDR
// sArmoury := false ;
19156: LD_ADDR_EXP 62
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
// sRadar := false ;
19164: LD_ADDR_EXP 63
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// sBunker := false ;
19172: LD_ADDR_EXP 64
19176: PUSH
19177: LD_INT 0
19179: ST_TO_ADDR
// sHack := false ;
19180: LD_ADDR_EXP 65
19184: PUSH
19185: LD_INT 0
19187: ST_TO_ADDR
// sFire := false ;
19188: LD_ADDR_EXP 66
19192: PUSH
19193: LD_INT 0
19195: ST_TO_ADDR
// sRefresh := false ;
19196: LD_ADDR_EXP 67
19200: PUSH
19201: LD_INT 0
19203: ST_TO_ADDR
// sExp := false ;
19204: LD_ADDR_EXP 68
19208: PUSH
19209: LD_INT 0
19211: ST_TO_ADDR
// sDepot := false ;
19212: LD_ADDR_EXP 69
19216: PUSH
19217: LD_INT 0
19219: ST_TO_ADDR
// sFlag := false ;
19220: LD_ADDR_EXP 70
19224: PUSH
19225: LD_INT 0
19227: ST_TO_ADDR
// sKamikadze := false ;
19228: LD_ADDR_EXP 78
19232: PUSH
19233: LD_INT 0
19235: ST_TO_ADDR
// sTroll := false ;
19236: LD_ADDR_EXP 79
19240: PUSH
19241: LD_INT 0
19243: ST_TO_ADDR
// sSlow := false ;
19244: LD_ADDR_EXP 80
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// sLack := false ;
19252: LD_ADDR_EXP 81
19256: PUSH
19257: LD_INT 0
19259: ST_TO_ADDR
// sTank := false ;
19260: LD_ADDR_EXP 83
19264: PUSH
19265: LD_INT 0
19267: ST_TO_ADDR
// sRemote := false ;
19268: LD_ADDR_EXP 84
19272: PUSH
19273: LD_INT 0
19275: ST_TO_ADDR
// sPowell := false ;
19276: LD_ADDR_EXP 85
19280: PUSH
19281: LD_INT 0
19283: ST_TO_ADDR
// sTeleport := false ;
19284: LD_ADDR_EXP 88
19288: PUSH
19289: LD_INT 0
19291: ST_TO_ADDR
// sOilTower := false ;
19292: LD_ADDR_EXP 90
19296: PUSH
19297: LD_INT 0
19299: ST_TO_ADDR
// sShovel := false ;
19300: LD_ADDR_EXP 91
19304: PUSH
19305: LD_INT 0
19307: ST_TO_ADDR
// sSheik := false ;
19308: LD_ADDR_EXP 92
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// sEarthquake := false ;
19316: LD_ADDR_EXP 94
19320: PUSH
19321: LD_INT 0
19323: ST_TO_ADDR
// sAI := false ;
19324: LD_ADDR_EXP 95
19328: PUSH
19329: LD_INT 0
19331: ST_TO_ADDR
// sCargo := false ;
19332: LD_ADDR_EXP 98
19336: PUSH
19337: LD_INT 0
19339: ST_TO_ADDR
// sDLaser := false ;
19340: LD_ADDR_EXP 99
19344: PUSH
19345: LD_INT 0
19347: ST_TO_ADDR
// sExchange := false ;
19348: LD_ADDR_EXP 100
19352: PUSH
19353: LD_INT 0
19355: ST_TO_ADDR
// sFac := false ;
19356: LD_ADDR_EXP 101
19360: PUSH
19361: LD_INT 0
19363: ST_TO_ADDR
// sPower := false ;
19364: LD_ADDR_EXP 102
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// sRandom := false ;
19372: LD_ADDR_EXP 103
19376: PUSH
19377: LD_INT 0
19379: ST_TO_ADDR
// sShield := false ;
19380: LD_ADDR_EXP 104
19384: PUSH
19385: LD_INT 0
19387: ST_TO_ADDR
// sTime := false ;
19388: LD_ADDR_EXP 105
19392: PUSH
19393: LD_INT 0
19395: ST_TO_ADDR
// sTools := false ;
19396: LD_ADDR_EXP 106
19400: PUSH
19401: LD_INT 0
19403: ST_TO_ADDR
// sSold := false ;
19404: LD_ADDR_EXP 71
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
// sDiff := false ;
19412: LD_ADDR_EXP 72
19416: PUSH
19417: LD_INT 0
19419: ST_TO_ADDR
// sFog := false ;
19420: LD_ADDR_EXP 75
19424: PUSH
19425: LD_INT 0
19427: ST_TO_ADDR
// sReset := false ;
19428: LD_ADDR_EXP 76
19432: PUSH
19433: LD_INT 0
19435: ST_TO_ADDR
// sSun := false ;
19436: LD_ADDR_EXP 77
19440: PUSH
19441: LD_INT 0
19443: ST_TO_ADDR
// sTiger := false ;
19444: LD_ADDR_EXP 73
19448: PUSH
19449: LD_INT 0
19451: ST_TO_ADDR
// sBomb := false ;
19452: LD_ADDR_EXP 74
19456: PUSH
19457: LD_INT 0
19459: ST_TO_ADDR
// sWound := false ;
19460: LD_ADDR_EXP 82
19464: PUSH
19465: LD_INT 0
19467: ST_TO_ADDR
// sBetray := false ;
19468: LD_ADDR_EXP 86
19472: PUSH
19473: LD_INT 0
19475: ST_TO_ADDR
// sContamin := false ;
19476: LD_ADDR_EXP 87
19480: PUSH
19481: LD_INT 0
19483: ST_TO_ADDR
// sOil := false ;
19484: LD_ADDR_EXP 89
19488: PUSH
19489: LD_INT 0
19491: ST_TO_ADDR
// sStu := false ;
19492: LD_ADDR_EXP 93
19496: PUSH
19497: LD_INT 0
19499: ST_TO_ADDR
// sBazooka := false ;
19500: LD_ADDR_EXP 96
19504: PUSH
19505: LD_INT 0
19507: ST_TO_ADDR
// sMortar := false ;
19508: LD_ADDR_EXP 97
19512: PUSH
19513: LD_INT 0
19515: ST_TO_ADDR
// sRanger := false ;
19516: LD_ADDR_EXP 107
19520: PUSH
19521: LD_INT 0
19523: ST_TO_ADDR
// sComputer := false ;
19524: LD_ADDR_EXP 108
19528: PUSH
19529: LD_INT 0
19531: ST_TO_ADDR
// s30 := false ;
19532: LD_ADDR_EXP 109
19536: PUSH
19537: LD_INT 0
19539: ST_TO_ADDR
// s60 := false ;
19540: LD_ADDR_EXP 110
19544: PUSH
19545: LD_INT 0
19547: ST_TO_ADDR
// end ;
19548: LD_VAR 0 1
19552: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19553: LD_INT 0
19555: PPUSH
19556: PPUSH
19557: PPUSH
19558: PPUSH
19559: PPUSH
19560: PPUSH
19561: PPUSH
// result := [ ] ;
19562: LD_ADDR_VAR 0 2
19566: PUSH
19567: EMPTY
19568: ST_TO_ADDR
// if campaign_id = 1 then
19569: LD_OWVAR 69
19573: PUSH
19574: LD_INT 1
19576: EQUAL
19577: IFFALSE 22743
// begin case mission_number of 1 :
19579: LD_OWVAR 70
19583: PUSH
19584: LD_INT 1
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19668
19592: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: LD_INT 11
19606: PUSH
19607: LD_INT 12
19609: PUSH
19610: LD_INT 15
19612: PUSH
19613: LD_INT 16
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_INT 23
19621: PUSH
19622: LD_INT 26
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 101
19638: PUSH
19639: LD_INT 102
19641: PUSH
19642: LD_INT 106
19644: PUSH
19645: LD_INT 116
19647: PUSH
19648: LD_INT 117
19650: PUSH
19651: LD_INT 118
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: ST_TO_ADDR
19666: GO 22741
19668: LD_INT 2
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19760
19676: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19677: LD_ADDR_VAR 0 2
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: LD_INT 4
19687: PUSH
19688: LD_INT 11
19690: PUSH
19691: LD_INT 12
19693: PUSH
19694: LD_INT 15
19696: PUSH
19697: LD_INT 16
19699: PUSH
19700: LD_INT 22
19702: PUSH
19703: LD_INT 23
19705: PUSH
19706: LD_INT 26
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 101
19722: PUSH
19723: LD_INT 102
19725: PUSH
19726: LD_INT 105
19728: PUSH
19729: LD_INT 106
19731: PUSH
19732: LD_INT 108
19734: PUSH
19735: LD_INT 116
19737: PUSH
19738: LD_INT 117
19740: PUSH
19741: LD_INT 118
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: ST_TO_ADDR
19758: GO 22741
19760: LD_INT 3
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19856
19768: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19769: LD_ADDR_VAR 0 2
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: LD_INT 4
19779: PUSH
19780: LD_INT 5
19782: PUSH
19783: LD_INT 11
19785: PUSH
19786: LD_INT 12
19788: PUSH
19789: LD_INT 15
19791: PUSH
19792: LD_INT 16
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_INT 26
19800: PUSH
19801: LD_INT 36
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 101
19818: PUSH
19819: LD_INT 102
19821: PUSH
19822: LD_INT 105
19824: PUSH
19825: LD_INT 106
19827: PUSH
19828: LD_INT 108
19830: PUSH
19831: LD_INT 116
19833: PUSH
19834: LD_INT 117
19836: PUSH
19837: LD_INT 118
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: ST_TO_ADDR
19854: GO 22741
19856: LD_INT 4
19858: DOUBLE
19859: EQUAL
19860: IFTRUE 19864
19862: GO 19960
19864: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19865: LD_ADDR_VAR 0 2
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 4
19875: PUSH
19876: LD_INT 5
19878: PUSH
19879: LD_INT 8
19881: PUSH
19882: LD_INT 11
19884: PUSH
19885: LD_INT 12
19887: PUSH
19888: LD_INT 15
19890: PUSH
19891: LD_INT 16
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_INT 23
19899: PUSH
19900: LD_INT 26
19902: PUSH
19903: LD_INT 36
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 101
19922: PUSH
19923: LD_INT 102
19925: PUSH
19926: LD_INT 105
19928: PUSH
19929: LD_INT 106
19931: PUSH
19932: LD_INT 108
19934: PUSH
19935: LD_INT 116
19937: PUSH
19938: LD_INT 117
19940: PUSH
19941: LD_INT 118
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: ST_TO_ADDR
19958: GO 22741
19960: LD_INT 5
19962: DOUBLE
19963: EQUAL
19964: IFTRUE 19968
19966: GO 20080
19968: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19969: LD_ADDR_VAR 0 2
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: LD_INT 4
19979: PUSH
19980: LD_INT 5
19982: PUSH
19983: LD_INT 6
19985: PUSH
19986: LD_INT 8
19988: PUSH
19989: LD_INT 11
19991: PUSH
19992: LD_INT 12
19994: PUSH
19995: LD_INT 15
19997: PUSH
19998: LD_INT 16
20000: PUSH
20001: LD_INT 22
20003: PUSH
20004: LD_INT 23
20006: PUSH
20007: LD_INT 25
20009: PUSH
20010: LD_INT 26
20012: PUSH
20013: LD_INT 36
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 101
20034: PUSH
20035: LD_INT 102
20037: PUSH
20038: LD_INT 105
20040: PUSH
20041: LD_INT 106
20043: PUSH
20044: LD_INT 108
20046: PUSH
20047: LD_INT 109
20049: PUSH
20050: LD_INT 112
20052: PUSH
20053: LD_INT 116
20055: PUSH
20056: LD_INT 117
20058: PUSH
20059: LD_INT 118
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: ST_TO_ADDR
20078: GO 22741
20080: LD_INT 6
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20220
20088: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20089: LD_ADDR_VAR 0 2
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: LD_INT 4
20099: PUSH
20100: LD_INT 5
20102: PUSH
20103: LD_INT 6
20105: PUSH
20106: LD_INT 8
20108: PUSH
20109: LD_INT 11
20111: PUSH
20112: LD_INT 12
20114: PUSH
20115: LD_INT 15
20117: PUSH
20118: LD_INT 16
20120: PUSH
20121: LD_INT 20
20123: PUSH
20124: LD_INT 21
20126: PUSH
20127: LD_INT 22
20129: PUSH
20130: LD_INT 23
20132: PUSH
20133: LD_INT 25
20135: PUSH
20136: LD_INT 26
20138: PUSH
20139: LD_INT 30
20141: PUSH
20142: LD_INT 31
20144: PUSH
20145: LD_INT 32
20147: PUSH
20148: LD_INT 36
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 101
20174: PUSH
20175: LD_INT 102
20177: PUSH
20178: LD_INT 105
20180: PUSH
20181: LD_INT 106
20183: PUSH
20184: LD_INT 108
20186: PUSH
20187: LD_INT 109
20189: PUSH
20190: LD_INT 112
20192: PUSH
20193: LD_INT 116
20195: PUSH
20196: LD_INT 117
20198: PUSH
20199: LD_INT 118
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: ST_TO_ADDR
20218: GO 22741
20220: LD_INT 7
20222: DOUBLE
20223: EQUAL
20224: IFTRUE 20228
20226: GO 20340
20228: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20229: LD_ADDR_VAR 0 2
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: LD_INT 4
20239: PUSH
20240: LD_INT 5
20242: PUSH
20243: LD_INT 7
20245: PUSH
20246: LD_INT 11
20248: PUSH
20249: LD_INT 12
20251: PUSH
20252: LD_INT 15
20254: PUSH
20255: LD_INT 16
20257: PUSH
20258: LD_INT 20
20260: PUSH
20261: LD_INT 21
20263: PUSH
20264: LD_INT 22
20266: PUSH
20267: LD_INT 23
20269: PUSH
20270: LD_INT 25
20272: PUSH
20273: LD_INT 26
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 101
20294: PUSH
20295: LD_INT 102
20297: PUSH
20298: LD_INT 103
20300: PUSH
20301: LD_INT 105
20303: PUSH
20304: LD_INT 106
20306: PUSH
20307: LD_INT 108
20309: PUSH
20310: LD_INT 112
20312: PUSH
20313: LD_INT 116
20315: PUSH
20316: LD_INT 117
20318: PUSH
20319: LD_INT 118
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: ST_TO_ADDR
20338: GO 22741
20340: LD_INT 8
20342: DOUBLE
20343: EQUAL
20344: IFTRUE 20348
20346: GO 20488
20348: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: LD_INT 4
20359: PUSH
20360: LD_INT 5
20362: PUSH
20363: LD_INT 6
20365: PUSH
20366: LD_INT 7
20368: PUSH
20369: LD_INT 8
20371: PUSH
20372: LD_INT 11
20374: PUSH
20375: LD_INT 12
20377: PUSH
20378: LD_INT 15
20380: PUSH
20381: LD_INT 16
20383: PUSH
20384: LD_INT 20
20386: PUSH
20387: LD_INT 21
20389: PUSH
20390: LD_INT 22
20392: PUSH
20393: LD_INT 23
20395: PUSH
20396: LD_INT 25
20398: PUSH
20399: LD_INT 26
20401: PUSH
20402: LD_INT 30
20404: PUSH
20405: LD_INT 31
20407: PUSH
20408: LD_INT 32
20410: PUSH
20411: LD_INT 36
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 101
20438: PUSH
20439: LD_INT 102
20441: PUSH
20442: LD_INT 103
20444: PUSH
20445: LD_INT 105
20447: PUSH
20448: LD_INT 106
20450: PUSH
20451: LD_INT 108
20453: PUSH
20454: LD_INT 109
20456: PUSH
20457: LD_INT 112
20459: PUSH
20460: LD_INT 116
20462: PUSH
20463: LD_INT 117
20465: PUSH
20466: LD_INT 118
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: ST_TO_ADDR
20486: GO 22741
20488: LD_INT 9
20490: DOUBLE
20491: EQUAL
20492: IFTRUE 20496
20494: GO 20644
20496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20497: LD_ADDR_VAR 0 2
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 4
20507: PUSH
20508: LD_INT 5
20510: PUSH
20511: LD_INT 6
20513: PUSH
20514: LD_INT 7
20516: PUSH
20517: LD_INT 8
20519: PUSH
20520: LD_INT 11
20522: PUSH
20523: LD_INT 12
20525: PUSH
20526: LD_INT 15
20528: PUSH
20529: LD_INT 16
20531: PUSH
20532: LD_INT 20
20534: PUSH
20535: LD_INT 21
20537: PUSH
20538: LD_INT 22
20540: PUSH
20541: LD_INT 23
20543: PUSH
20544: LD_INT 25
20546: PUSH
20547: LD_INT 26
20549: PUSH
20550: LD_INT 28
20552: PUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 31
20558: PUSH
20559: LD_INT 32
20561: PUSH
20562: LD_INT 36
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 101
20590: PUSH
20591: LD_INT 102
20593: PUSH
20594: LD_INT 103
20596: PUSH
20597: LD_INT 105
20599: PUSH
20600: LD_INT 106
20602: PUSH
20603: LD_INT 108
20605: PUSH
20606: LD_INT 109
20608: PUSH
20609: LD_INT 112
20611: PUSH
20612: LD_INT 114
20614: PUSH
20615: LD_INT 116
20617: PUSH
20618: LD_INT 117
20620: PUSH
20621: LD_INT 118
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: ST_TO_ADDR
20642: GO 22741
20644: LD_INT 10
20646: DOUBLE
20647: EQUAL
20648: IFTRUE 20652
20650: GO 20848
20652: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20653: LD_ADDR_VAR 0 2
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 4
20663: PUSH
20664: LD_INT 5
20666: PUSH
20667: LD_INT 6
20669: PUSH
20670: LD_INT 7
20672: PUSH
20673: LD_INT 8
20675: PUSH
20676: LD_INT 9
20678: PUSH
20679: LD_INT 10
20681: PUSH
20682: LD_INT 11
20684: PUSH
20685: LD_INT 12
20687: PUSH
20688: LD_INT 13
20690: PUSH
20691: LD_INT 14
20693: PUSH
20694: LD_INT 15
20696: PUSH
20697: LD_INT 16
20699: PUSH
20700: LD_INT 17
20702: PUSH
20703: LD_INT 18
20705: PUSH
20706: LD_INT 19
20708: PUSH
20709: LD_INT 20
20711: PUSH
20712: LD_INT 21
20714: PUSH
20715: LD_INT 22
20717: PUSH
20718: LD_INT 23
20720: PUSH
20721: LD_INT 24
20723: PUSH
20724: LD_INT 25
20726: PUSH
20727: LD_INT 26
20729: PUSH
20730: LD_INT 28
20732: PUSH
20733: LD_INT 30
20735: PUSH
20736: LD_INT 31
20738: PUSH
20739: LD_INT 32
20741: PUSH
20742: LD_INT 36
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 101
20778: PUSH
20779: LD_INT 102
20781: PUSH
20782: LD_INT 103
20784: PUSH
20785: LD_INT 104
20787: PUSH
20788: LD_INT 105
20790: PUSH
20791: LD_INT 106
20793: PUSH
20794: LD_INT 107
20796: PUSH
20797: LD_INT 108
20799: PUSH
20800: LD_INT 109
20802: PUSH
20803: LD_INT 110
20805: PUSH
20806: LD_INT 111
20808: PUSH
20809: LD_INT 112
20811: PUSH
20812: LD_INT 114
20814: PUSH
20815: LD_INT 116
20817: PUSH
20818: LD_INT 117
20820: PUSH
20821: LD_INT 118
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: ST_TO_ADDR
20846: GO 22741
20848: LD_INT 11
20850: DOUBLE
20851: EQUAL
20852: IFTRUE 20856
20854: GO 21060
20856: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20857: LD_ADDR_VAR 0 2
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 3
20867: PUSH
20868: LD_INT 4
20870: PUSH
20871: LD_INT 5
20873: PUSH
20874: LD_INT 6
20876: PUSH
20877: LD_INT 7
20879: PUSH
20880: LD_INT 8
20882: PUSH
20883: LD_INT 9
20885: PUSH
20886: LD_INT 10
20888: PUSH
20889: LD_INT 11
20891: PUSH
20892: LD_INT 12
20894: PUSH
20895: LD_INT 13
20897: PUSH
20898: LD_INT 14
20900: PUSH
20901: LD_INT 15
20903: PUSH
20904: LD_INT 16
20906: PUSH
20907: LD_INT 17
20909: PUSH
20910: LD_INT 18
20912: PUSH
20913: LD_INT 19
20915: PUSH
20916: LD_INT 20
20918: PUSH
20919: LD_INT 21
20921: PUSH
20922: LD_INT 22
20924: PUSH
20925: LD_INT 23
20927: PUSH
20928: LD_INT 24
20930: PUSH
20931: LD_INT 25
20933: PUSH
20934: LD_INT 26
20936: PUSH
20937: LD_INT 28
20939: PUSH
20940: LD_INT 30
20942: PUSH
20943: LD_INT 31
20945: PUSH
20946: LD_INT 32
20948: PUSH
20949: LD_INT 34
20951: PUSH
20952: LD_INT 36
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 101
20990: PUSH
20991: LD_INT 102
20993: PUSH
20994: LD_INT 103
20996: PUSH
20997: LD_INT 104
20999: PUSH
21000: LD_INT 105
21002: PUSH
21003: LD_INT 106
21005: PUSH
21006: LD_INT 107
21008: PUSH
21009: LD_INT 108
21011: PUSH
21012: LD_INT 109
21014: PUSH
21015: LD_INT 110
21017: PUSH
21018: LD_INT 111
21020: PUSH
21021: LD_INT 112
21023: PUSH
21024: LD_INT 114
21026: PUSH
21027: LD_INT 116
21029: PUSH
21030: LD_INT 117
21032: PUSH
21033: LD_INT 118
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: ST_TO_ADDR
21058: GO 22741
21060: LD_INT 12
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21068
21066: GO 21288
21068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21069: LD_ADDR_VAR 0 2
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: LD_INT 3
21082: PUSH
21083: LD_INT 4
21085: PUSH
21086: LD_INT 5
21088: PUSH
21089: LD_INT 6
21091: PUSH
21092: LD_INT 7
21094: PUSH
21095: LD_INT 8
21097: PUSH
21098: LD_INT 9
21100: PUSH
21101: LD_INT 10
21103: PUSH
21104: LD_INT 11
21106: PUSH
21107: LD_INT 12
21109: PUSH
21110: LD_INT 13
21112: PUSH
21113: LD_INT 14
21115: PUSH
21116: LD_INT 15
21118: PUSH
21119: LD_INT 16
21121: PUSH
21122: LD_INT 17
21124: PUSH
21125: LD_INT 18
21127: PUSH
21128: LD_INT 19
21130: PUSH
21131: LD_INT 20
21133: PUSH
21134: LD_INT 21
21136: PUSH
21137: LD_INT 22
21139: PUSH
21140: LD_INT 23
21142: PUSH
21143: LD_INT 24
21145: PUSH
21146: LD_INT 25
21148: PUSH
21149: LD_INT 26
21151: PUSH
21152: LD_INT 27
21154: PUSH
21155: LD_INT 28
21157: PUSH
21158: LD_INT 30
21160: PUSH
21161: LD_INT 31
21163: PUSH
21164: LD_INT 32
21166: PUSH
21167: LD_INT 33
21169: PUSH
21170: LD_INT 34
21172: PUSH
21173: LD_INT 36
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 101
21214: PUSH
21215: LD_INT 102
21217: PUSH
21218: LD_INT 103
21220: PUSH
21221: LD_INT 104
21223: PUSH
21224: LD_INT 105
21226: PUSH
21227: LD_INT 106
21229: PUSH
21230: LD_INT 107
21232: PUSH
21233: LD_INT 108
21235: PUSH
21236: LD_INT 109
21238: PUSH
21239: LD_INT 110
21241: PUSH
21242: LD_INT 111
21244: PUSH
21245: LD_INT 112
21247: PUSH
21248: LD_INT 113
21250: PUSH
21251: LD_INT 114
21253: PUSH
21254: LD_INT 116
21256: PUSH
21257: LD_INT 117
21259: PUSH
21260: LD_INT 118
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: ST_TO_ADDR
21286: GO 22741
21288: LD_INT 13
21290: DOUBLE
21291: EQUAL
21292: IFTRUE 21296
21294: GO 21504
21296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21297: LD_ADDR_VAR 0 2
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: LD_INT 4
21313: PUSH
21314: LD_INT 5
21316: PUSH
21317: LD_INT 8
21319: PUSH
21320: LD_INT 9
21322: PUSH
21323: LD_INT 10
21325: PUSH
21326: LD_INT 11
21328: PUSH
21329: LD_INT 12
21331: PUSH
21332: LD_INT 14
21334: PUSH
21335: LD_INT 15
21337: PUSH
21338: LD_INT 16
21340: PUSH
21341: LD_INT 17
21343: PUSH
21344: LD_INT 18
21346: PUSH
21347: LD_INT 19
21349: PUSH
21350: LD_INT 20
21352: PUSH
21353: LD_INT 21
21355: PUSH
21356: LD_INT 22
21358: PUSH
21359: LD_INT 23
21361: PUSH
21362: LD_INT 24
21364: PUSH
21365: LD_INT 25
21367: PUSH
21368: LD_INT 26
21370: PUSH
21371: LD_INT 27
21373: PUSH
21374: LD_INT 28
21376: PUSH
21377: LD_INT 30
21379: PUSH
21380: LD_INT 31
21382: PUSH
21383: LD_INT 32
21385: PUSH
21386: LD_INT 33
21388: PUSH
21389: LD_INT 34
21391: PUSH
21392: LD_INT 36
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 101
21430: PUSH
21431: LD_INT 102
21433: PUSH
21434: LD_INT 103
21436: PUSH
21437: LD_INT 104
21439: PUSH
21440: LD_INT 105
21442: PUSH
21443: LD_INT 106
21445: PUSH
21446: LD_INT 107
21448: PUSH
21449: LD_INT 108
21451: PUSH
21452: LD_INT 109
21454: PUSH
21455: LD_INT 110
21457: PUSH
21458: LD_INT 111
21460: PUSH
21461: LD_INT 112
21463: PUSH
21464: LD_INT 113
21466: PUSH
21467: LD_INT 114
21469: PUSH
21470: LD_INT 116
21472: PUSH
21473: LD_INT 117
21475: PUSH
21476: LD_INT 118
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: ST_TO_ADDR
21502: GO 22741
21504: LD_INT 14
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21736
21512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21513: LD_ADDR_VAR 0 2
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 3
21526: PUSH
21527: LD_INT 4
21529: PUSH
21530: LD_INT 5
21532: PUSH
21533: LD_INT 6
21535: PUSH
21536: LD_INT 7
21538: PUSH
21539: LD_INT 8
21541: PUSH
21542: LD_INT 9
21544: PUSH
21545: LD_INT 10
21547: PUSH
21548: LD_INT 11
21550: PUSH
21551: LD_INT 12
21553: PUSH
21554: LD_INT 13
21556: PUSH
21557: LD_INT 14
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 16
21565: PUSH
21566: LD_INT 17
21568: PUSH
21569: LD_INT 18
21571: PUSH
21572: LD_INT 19
21574: PUSH
21575: LD_INT 20
21577: PUSH
21578: LD_INT 21
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_INT 23
21586: PUSH
21587: LD_INT 24
21589: PUSH
21590: LD_INT 25
21592: PUSH
21593: LD_INT 26
21595: PUSH
21596: LD_INT 27
21598: PUSH
21599: LD_INT 28
21601: PUSH
21602: LD_INT 29
21604: PUSH
21605: LD_INT 30
21607: PUSH
21608: LD_INT 31
21610: PUSH
21611: LD_INT 32
21613: PUSH
21614: LD_INT 33
21616: PUSH
21617: LD_INT 34
21619: PUSH
21620: LD_INT 36
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 101
21662: PUSH
21663: LD_INT 102
21665: PUSH
21666: LD_INT 103
21668: PUSH
21669: LD_INT 104
21671: PUSH
21672: LD_INT 105
21674: PUSH
21675: LD_INT 106
21677: PUSH
21678: LD_INT 107
21680: PUSH
21681: LD_INT 108
21683: PUSH
21684: LD_INT 109
21686: PUSH
21687: LD_INT 110
21689: PUSH
21690: LD_INT 111
21692: PUSH
21693: LD_INT 112
21695: PUSH
21696: LD_INT 113
21698: PUSH
21699: LD_INT 114
21701: PUSH
21702: LD_INT 116
21704: PUSH
21705: LD_INT 117
21707: PUSH
21708: LD_INT 118
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: ST_TO_ADDR
21734: GO 22741
21736: LD_INT 15
21738: DOUBLE
21739: EQUAL
21740: IFTRUE 21744
21742: GO 21968
21744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21745: LD_ADDR_VAR 0 2
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 3
21758: PUSH
21759: LD_INT 4
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: LD_INT 7
21770: PUSH
21771: LD_INT 8
21773: PUSH
21774: LD_INT 9
21776: PUSH
21777: LD_INT 10
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 13
21788: PUSH
21789: LD_INT 14
21791: PUSH
21792: LD_INT 15
21794: PUSH
21795: LD_INT 16
21797: PUSH
21798: LD_INT 17
21800: PUSH
21801: LD_INT 18
21803: PUSH
21804: LD_INT 19
21806: PUSH
21807: LD_INT 20
21809: PUSH
21810: LD_INT 21
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_INT 23
21818: PUSH
21819: LD_INT 24
21821: PUSH
21822: LD_INT 25
21824: PUSH
21825: LD_INT 26
21827: PUSH
21828: LD_INT 27
21830: PUSH
21831: LD_INT 28
21833: PUSH
21834: LD_INT 29
21836: PUSH
21837: LD_INT 30
21839: PUSH
21840: LD_INT 31
21842: PUSH
21843: LD_INT 32
21845: PUSH
21846: LD_INT 33
21848: PUSH
21849: LD_INT 34
21851: PUSH
21852: LD_INT 36
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 101
21894: PUSH
21895: LD_INT 102
21897: PUSH
21898: LD_INT 103
21900: PUSH
21901: LD_INT 104
21903: PUSH
21904: LD_INT 105
21906: PUSH
21907: LD_INT 106
21909: PUSH
21910: LD_INT 107
21912: PUSH
21913: LD_INT 108
21915: PUSH
21916: LD_INT 109
21918: PUSH
21919: LD_INT 110
21921: PUSH
21922: LD_INT 111
21924: PUSH
21925: LD_INT 112
21927: PUSH
21928: LD_INT 113
21930: PUSH
21931: LD_INT 114
21933: PUSH
21934: LD_INT 116
21936: PUSH
21937: LD_INT 117
21939: PUSH
21940: LD_INT 118
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: ST_TO_ADDR
21966: GO 22741
21968: LD_INT 16
21970: DOUBLE
21971: EQUAL
21972: IFTRUE 21976
21974: GO 22112
21976: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21977: LD_ADDR_VAR 0 2
21981: PUSH
21982: LD_INT 2
21984: PUSH
21985: LD_INT 4
21987: PUSH
21988: LD_INT 5
21990: PUSH
21991: LD_INT 7
21993: PUSH
21994: LD_INT 11
21996: PUSH
21997: LD_INT 12
21999: PUSH
22000: LD_INT 15
22002: PUSH
22003: LD_INT 16
22005: PUSH
22006: LD_INT 20
22008: PUSH
22009: LD_INT 21
22011: PUSH
22012: LD_INT 22
22014: PUSH
22015: LD_INT 23
22017: PUSH
22018: LD_INT 25
22020: PUSH
22021: LD_INT 26
22023: PUSH
22024: LD_INT 30
22026: PUSH
22027: LD_INT 31
22029: PUSH
22030: LD_INT 32
22032: PUSH
22033: LD_INT 33
22035: PUSH
22036: LD_INT 34
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 101
22062: PUSH
22063: LD_INT 102
22065: PUSH
22066: LD_INT 103
22068: PUSH
22069: LD_INT 106
22071: PUSH
22072: LD_INT 108
22074: PUSH
22075: LD_INT 112
22077: PUSH
22078: LD_INT 113
22080: PUSH
22081: LD_INT 114
22083: PUSH
22084: LD_INT 116
22086: PUSH
22087: LD_INT 117
22089: PUSH
22090: LD_INT 118
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: ST_TO_ADDR
22110: GO 22741
22112: LD_INT 17
22114: DOUBLE
22115: EQUAL
22116: IFTRUE 22120
22118: GO 22344
22120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22121: LD_ADDR_VAR 0 2
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: LD_INT 4
22137: PUSH
22138: LD_INT 5
22140: PUSH
22141: LD_INT 6
22143: PUSH
22144: LD_INT 7
22146: PUSH
22147: LD_INT 8
22149: PUSH
22150: LD_INT 9
22152: PUSH
22153: LD_INT 10
22155: PUSH
22156: LD_INT 11
22158: PUSH
22159: LD_INT 12
22161: PUSH
22162: LD_INT 13
22164: PUSH
22165: LD_INT 14
22167: PUSH
22168: LD_INT 15
22170: PUSH
22171: LD_INT 16
22173: PUSH
22174: LD_INT 17
22176: PUSH
22177: LD_INT 18
22179: PUSH
22180: LD_INT 19
22182: PUSH
22183: LD_INT 20
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 22
22191: PUSH
22192: LD_INT 23
22194: PUSH
22195: LD_INT 24
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 26
22203: PUSH
22204: LD_INT 27
22206: PUSH
22207: LD_INT 28
22209: PUSH
22210: LD_INT 29
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 31
22218: PUSH
22219: LD_INT 32
22221: PUSH
22222: LD_INT 33
22224: PUSH
22225: LD_INT 34
22227: PUSH
22228: LD_INT 36
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 101
22270: PUSH
22271: LD_INT 102
22273: PUSH
22274: LD_INT 103
22276: PUSH
22277: LD_INT 104
22279: PUSH
22280: LD_INT 105
22282: PUSH
22283: LD_INT 106
22285: PUSH
22286: LD_INT 107
22288: PUSH
22289: LD_INT 108
22291: PUSH
22292: LD_INT 109
22294: PUSH
22295: LD_INT 110
22297: PUSH
22298: LD_INT 111
22300: PUSH
22301: LD_INT 112
22303: PUSH
22304: LD_INT 113
22306: PUSH
22307: LD_INT 114
22309: PUSH
22310: LD_INT 116
22312: PUSH
22313: LD_INT 117
22315: PUSH
22316: LD_INT 118
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: ST_TO_ADDR
22342: GO 22741
22344: LD_INT 18
22346: DOUBLE
22347: EQUAL
22348: IFTRUE 22352
22350: GO 22500
22352: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 4
22363: PUSH
22364: LD_INT 5
22366: PUSH
22367: LD_INT 7
22369: PUSH
22370: LD_INT 11
22372: PUSH
22373: LD_INT 12
22375: PUSH
22376: LD_INT 15
22378: PUSH
22379: LD_INT 16
22381: PUSH
22382: LD_INT 20
22384: PUSH
22385: LD_INT 21
22387: PUSH
22388: LD_INT 22
22390: PUSH
22391: LD_INT 23
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 30
22402: PUSH
22403: LD_INT 31
22405: PUSH
22406: LD_INT 32
22408: PUSH
22409: LD_INT 33
22411: PUSH
22412: LD_INT 34
22414: PUSH
22415: LD_INT 35
22417: PUSH
22418: LD_INT 36
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 101
22446: PUSH
22447: LD_INT 102
22449: PUSH
22450: LD_INT 103
22452: PUSH
22453: LD_INT 106
22455: PUSH
22456: LD_INT 108
22458: PUSH
22459: LD_INT 112
22461: PUSH
22462: LD_INT 113
22464: PUSH
22465: LD_INT 114
22467: PUSH
22468: LD_INT 115
22470: PUSH
22471: LD_INT 116
22473: PUSH
22474: LD_INT 117
22476: PUSH
22477: LD_INT 118
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: ST_TO_ADDR
22498: GO 22741
22500: LD_INT 19
22502: DOUBLE
22503: EQUAL
22504: IFTRUE 22508
22506: GO 22740
22508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22509: LD_ADDR_VAR 0 2
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: LD_INT 2
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: LD_INT 4
22525: PUSH
22526: LD_INT 5
22528: PUSH
22529: LD_INT 6
22531: PUSH
22532: LD_INT 7
22534: PUSH
22535: LD_INT 8
22537: PUSH
22538: LD_INT 9
22540: PUSH
22541: LD_INT 10
22543: PUSH
22544: LD_INT 11
22546: PUSH
22547: LD_INT 12
22549: PUSH
22550: LD_INT 13
22552: PUSH
22553: LD_INT 14
22555: PUSH
22556: LD_INT 15
22558: PUSH
22559: LD_INT 16
22561: PUSH
22562: LD_INT 17
22564: PUSH
22565: LD_INT 18
22567: PUSH
22568: LD_INT 19
22570: PUSH
22571: LD_INT 20
22573: PUSH
22574: LD_INT 21
22576: PUSH
22577: LD_INT 22
22579: PUSH
22580: LD_INT 23
22582: PUSH
22583: LD_INT 24
22585: PUSH
22586: LD_INT 25
22588: PUSH
22589: LD_INT 26
22591: PUSH
22592: LD_INT 27
22594: PUSH
22595: LD_INT 28
22597: PUSH
22598: LD_INT 29
22600: PUSH
22601: LD_INT 30
22603: PUSH
22604: LD_INT 31
22606: PUSH
22607: LD_INT 32
22609: PUSH
22610: LD_INT 33
22612: PUSH
22613: LD_INT 34
22615: PUSH
22616: LD_INT 35
22618: PUSH
22619: LD_INT 36
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 101
22662: PUSH
22663: LD_INT 102
22665: PUSH
22666: LD_INT 103
22668: PUSH
22669: LD_INT 104
22671: PUSH
22672: LD_INT 105
22674: PUSH
22675: LD_INT 106
22677: PUSH
22678: LD_INT 107
22680: PUSH
22681: LD_INT 108
22683: PUSH
22684: LD_INT 109
22686: PUSH
22687: LD_INT 110
22689: PUSH
22690: LD_INT 111
22692: PUSH
22693: LD_INT 112
22695: PUSH
22696: LD_INT 113
22698: PUSH
22699: LD_INT 114
22701: PUSH
22702: LD_INT 115
22704: PUSH
22705: LD_INT 116
22707: PUSH
22708: LD_INT 117
22710: PUSH
22711: LD_INT 118
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: ST_TO_ADDR
22738: GO 22741
22740: POP
// end else
22741: GO 22972
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22743: LD_ADDR_VAR 0 2
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: LD_INT 3
22756: PUSH
22757: LD_INT 4
22759: PUSH
22760: LD_INT 5
22762: PUSH
22763: LD_INT 6
22765: PUSH
22766: LD_INT 7
22768: PUSH
22769: LD_INT 8
22771: PUSH
22772: LD_INT 9
22774: PUSH
22775: LD_INT 10
22777: PUSH
22778: LD_INT 11
22780: PUSH
22781: LD_INT 12
22783: PUSH
22784: LD_INT 13
22786: PUSH
22787: LD_INT 14
22789: PUSH
22790: LD_INT 15
22792: PUSH
22793: LD_INT 16
22795: PUSH
22796: LD_INT 17
22798: PUSH
22799: LD_INT 18
22801: PUSH
22802: LD_INT 19
22804: PUSH
22805: LD_INT 20
22807: PUSH
22808: LD_INT 21
22810: PUSH
22811: LD_INT 22
22813: PUSH
22814: LD_INT 23
22816: PUSH
22817: LD_INT 24
22819: PUSH
22820: LD_INT 25
22822: PUSH
22823: LD_INT 26
22825: PUSH
22826: LD_INT 27
22828: PUSH
22829: LD_INT 28
22831: PUSH
22832: LD_INT 29
22834: PUSH
22835: LD_INT 30
22837: PUSH
22838: LD_INT 31
22840: PUSH
22841: LD_INT 32
22843: PUSH
22844: LD_INT 33
22846: PUSH
22847: LD_INT 34
22849: PUSH
22850: LD_INT 35
22852: PUSH
22853: LD_INT 36
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 101
22896: PUSH
22897: LD_INT 102
22899: PUSH
22900: LD_INT 103
22902: PUSH
22903: LD_INT 104
22905: PUSH
22906: LD_INT 105
22908: PUSH
22909: LD_INT 106
22911: PUSH
22912: LD_INT 107
22914: PUSH
22915: LD_INT 108
22917: PUSH
22918: LD_INT 109
22920: PUSH
22921: LD_INT 110
22923: PUSH
22924: LD_INT 111
22926: PUSH
22927: LD_INT 112
22929: PUSH
22930: LD_INT 113
22932: PUSH
22933: LD_INT 114
22935: PUSH
22936: LD_INT 115
22938: PUSH
22939: LD_INT 116
22941: PUSH
22942: LD_INT 117
22944: PUSH
22945: LD_INT 118
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: ST_TO_ADDR
// if result then
22972: LD_VAR 0 2
22976: IFFALSE 23762
// begin normal :=  ;
22978: LD_ADDR_VAR 0 5
22982: PUSH
22983: LD_STRING 
22985: ST_TO_ADDR
// hardcore :=  ;
22986: LD_ADDR_VAR 0 6
22990: PUSH
22991: LD_STRING 
22993: ST_TO_ADDR
// active :=  ;
22994: LD_ADDR_VAR 0 7
22998: PUSH
22999: LD_STRING 
23001: ST_TO_ADDR
// for i = 1 to normalCounter do
23002: LD_ADDR_VAR 0 8
23006: PUSH
23007: DOUBLE
23008: LD_INT 1
23010: DEC
23011: ST_TO_ADDR
23012: LD_EXP 55
23016: PUSH
23017: FOR_TO
23018: IFFALSE 23119
// begin tmp := 0 ;
23020: LD_ADDR_VAR 0 3
23024: PUSH
23025: LD_STRING 0
23027: ST_TO_ADDR
// if result [ 1 ] then
23028: LD_VAR 0 2
23032: PUSH
23033: LD_INT 1
23035: ARRAY
23036: IFFALSE 23101
// if result [ 1 ] [ 1 ] = i then
23038: LD_VAR 0 2
23042: PUSH
23043: LD_INT 1
23045: ARRAY
23046: PUSH
23047: LD_INT 1
23049: ARRAY
23050: PUSH
23051: LD_VAR 0 8
23055: EQUAL
23056: IFFALSE 23101
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23058: LD_ADDR_VAR 0 2
23062: PUSH
23063: LD_VAR 0 2
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: LD_VAR 0 2
23075: PUSH
23076: LD_INT 1
23078: ARRAY
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: CALL_OW 3
23087: PPUSH
23088: CALL_OW 1
23092: ST_TO_ADDR
// tmp := 1 ;
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_STRING 1
23100: ST_TO_ADDR
// end ; normal := normal & tmp ;
23101: LD_ADDR_VAR 0 5
23105: PUSH
23106: LD_VAR 0 5
23110: PUSH
23111: LD_VAR 0 3
23115: STR
23116: ST_TO_ADDR
// end ;
23117: GO 23017
23119: POP
23120: POP
// for i = 1 to hardcoreCounter do
23121: LD_ADDR_VAR 0 8
23125: PUSH
23126: DOUBLE
23127: LD_INT 1
23129: DEC
23130: ST_TO_ADDR
23131: LD_EXP 56
23135: PUSH
23136: FOR_TO
23137: IFFALSE 23242
// begin tmp := 0 ;
23139: LD_ADDR_VAR 0 3
23143: PUSH
23144: LD_STRING 0
23146: ST_TO_ADDR
// if result [ 2 ] then
23147: LD_VAR 0 2
23151: PUSH
23152: LD_INT 2
23154: ARRAY
23155: IFFALSE 23224
// if result [ 2 ] [ 1 ] = 100 + i then
23157: LD_VAR 0 2
23161: PUSH
23162: LD_INT 2
23164: ARRAY
23165: PUSH
23166: LD_INT 1
23168: ARRAY
23169: PUSH
23170: LD_INT 100
23172: PUSH
23173: LD_VAR 0 8
23177: PLUS
23178: EQUAL
23179: IFFALSE 23224
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23181: LD_ADDR_VAR 0 2
23185: PUSH
23186: LD_VAR 0 2
23190: PPUSH
23191: LD_INT 2
23193: PPUSH
23194: LD_VAR 0 2
23198: PUSH
23199: LD_INT 2
23201: ARRAY
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: CALL_OW 3
23210: PPUSH
23211: CALL_OW 1
23215: ST_TO_ADDR
// tmp := 1 ;
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_STRING 1
23223: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23224: LD_ADDR_VAR 0 6
23228: PUSH
23229: LD_VAR 0 6
23233: PUSH
23234: LD_VAR 0 3
23238: STR
23239: ST_TO_ADDR
// end ;
23240: GO 23136
23242: POP
23243: POP
// if isGameLoad then
23244: LD_VAR 0 1
23248: IFFALSE 23723
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23250: LD_ADDR_VAR 0 4
23254: PUSH
23255: LD_EXP 59
23259: PUSH
23260: LD_EXP 58
23264: PUSH
23265: LD_EXP 60
23269: PUSH
23270: LD_EXP 57
23274: PUSH
23275: LD_EXP 61
23279: PUSH
23280: LD_EXP 62
23284: PUSH
23285: LD_EXP 63
23289: PUSH
23290: LD_EXP 64
23294: PUSH
23295: LD_EXP 65
23299: PUSH
23300: LD_EXP 66
23304: PUSH
23305: LD_EXP 67
23309: PUSH
23310: LD_EXP 68
23314: PUSH
23315: LD_EXP 69
23319: PUSH
23320: LD_EXP 70
23324: PUSH
23325: LD_EXP 78
23329: PUSH
23330: LD_EXP 79
23334: PUSH
23335: LD_EXP 80
23339: PUSH
23340: LD_EXP 81
23344: PUSH
23345: LD_EXP 83
23349: PUSH
23350: LD_EXP 84
23354: PUSH
23355: LD_EXP 85
23359: PUSH
23360: LD_EXP 88
23364: PUSH
23365: LD_EXP 90
23369: PUSH
23370: LD_EXP 91
23374: PUSH
23375: LD_EXP 92
23379: PUSH
23380: LD_EXP 94
23384: PUSH
23385: LD_EXP 95
23389: PUSH
23390: LD_EXP 98
23394: PUSH
23395: LD_EXP 99
23399: PUSH
23400: LD_EXP 100
23404: PUSH
23405: LD_EXP 101
23409: PUSH
23410: LD_EXP 102
23414: PUSH
23415: LD_EXP 103
23419: PUSH
23420: LD_EXP 104
23424: PUSH
23425: LD_EXP 105
23429: PUSH
23430: LD_EXP 106
23434: PUSH
23435: LD_EXP 71
23439: PUSH
23440: LD_EXP 72
23444: PUSH
23445: LD_EXP 75
23449: PUSH
23450: LD_EXP 76
23454: PUSH
23455: LD_EXP 77
23459: PUSH
23460: LD_EXP 73
23464: PUSH
23465: LD_EXP 74
23469: PUSH
23470: LD_EXP 82
23474: PUSH
23475: LD_EXP 86
23479: PUSH
23480: LD_EXP 87
23484: PUSH
23485: LD_EXP 89
23489: PUSH
23490: LD_EXP 93
23494: PUSH
23495: LD_EXP 96
23499: PUSH
23500: LD_EXP 97
23504: PUSH
23505: LD_EXP 107
23509: PUSH
23510: LD_EXP 108
23514: PUSH
23515: LD_EXP 109
23519: PUSH
23520: LD_EXP 110
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: ST_TO_ADDR
// tmp :=  ;
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: LD_STRING 
23588: ST_TO_ADDR
// for i = 1 to normalCounter do
23589: LD_ADDR_VAR 0 8
23593: PUSH
23594: DOUBLE
23595: LD_INT 1
23597: DEC
23598: ST_TO_ADDR
23599: LD_EXP 55
23603: PUSH
23604: FOR_TO
23605: IFFALSE 23641
// begin if flags [ i ] then
23607: LD_VAR 0 4
23611: PUSH
23612: LD_VAR 0 8
23616: ARRAY
23617: IFFALSE 23639
// tmp := tmp & i & ; ;
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_VAR 0 3
23628: PUSH
23629: LD_VAR 0 8
23633: STR
23634: PUSH
23635: LD_STRING ;
23637: STR
23638: ST_TO_ADDR
// end ;
23639: GO 23604
23641: POP
23642: POP
// for i = 1 to hardcoreCounter do
23643: LD_ADDR_VAR 0 8
23647: PUSH
23648: DOUBLE
23649: LD_INT 1
23651: DEC
23652: ST_TO_ADDR
23653: LD_EXP 56
23657: PUSH
23658: FOR_TO
23659: IFFALSE 23705
// begin if flags [ normalCounter + i ] then
23661: LD_VAR 0 4
23665: PUSH
23666: LD_EXP 55
23670: PUSH
23671: LD_VAR 0 8
23675: PLUS
23676: ARRAY
23677: IFFALSE 23703
// tmp := tmp & ( 100 + i ) & ; ;
23679: LD_ADDR_VAR 0 3
23683: PUSH
23684: LD_VAR 0 3
23688: PUSH
23689: LD_INT 100
23691: PUSH
23692: LD_VAR 0 8
23696: PLUS
23697: STR
23698: PUSH
23699: LD_STRING ;
23701: STR
23702: ST_TO_ADDR
// end ;
23703: GO 23658
23705: POP
23706: POP
// if tmp then
23707: LD_VAR 0 3
23711: IFFALSE 23723
// active := tmp ;
23713: LD_ADDR_VAR 0 7
23717: PUSH
23718: LD_VAR 0 3
23722: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23723: LD_STRING getStreamItemsFromMission("
23725: PUSH
23726: LD_VAR 0 5
23730: STR
23731: PUSH
23732: LD_STRING ","
23734: STR
23735: PUSH
23736: LD_VAR 0 6
23740: STR
23741: PUSH
23742: LD_STRING ","
23744: STR
23745: PUSH
23746: LD_VAR 0 7
23750: STR
23751: PUSH
23752: LD_STRING ")
23754: STR
23755: PPUSH
23756: CALL_OW 559
// end else
23760: GO 23769
// ToLua ( getStreamItemsFromMission("","","") ) ;
23762: LD_STRING getStreamItemsFromMission("","","")
23764: PPUSH
23765: CALL_OW 559
// end ;
23769: LD_VAR 0 2
23773: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23774: LD_EXP 54
23778: PUSH
23779: LD_EXP 59
23783: AND
23784: IFFALSE 23908
23786: GO 23788
23788: DISABLE
23789: LD_INT 0
23791: PPUSH
23792: PPUSH
// begin enable ;
23793: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_INT 22
23801: PUSH
23802: LD_OWVAR 2
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: LD_INT 34
23816: PUSH
23817: LD_INT 7
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 34
23826: PUSH
23827: LD_INT 45
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 34
23836: PUSH
23837: LD_INT 28
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 34
23846: PUSH
23847: LD_INT 47
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PPUSH
23865: CALL_OW 69
23869: ST_TO_ADDR
// if not tmp then
23870: LD_VAR 0 2
23874: NOT
23875: IFFALSE 23879
// exit ;
23877: GO 23908
// for i in tmp do
23879: LD_ADDR_VAR 0 1
23883: PUSH
23884: LD_VAR 0 2
23888: PUSH
23889: FOR_IN
23890: IFFALSE 23906
// begin SetLives ( i , 0 ) ;
23892: LD_VAR 0 1
23896: PPUSH
23897: LD_INT 0
23899: PPUSH
23900: CALL_OW 234
// end ;
23904: GO 23889
23906: POP
23907: POP
// end ;
23908: PPOPN 2
23910: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23911: LD_EXP 54
23915: PUSH
23916: LD_EXP 60
23920: AND
23921: IFFALSE 24005
23923: GO 23925
23925: DISABLE
23926: LD_INT 0
23928: PPUSH
23929: PPUSH
// begin enable ;
23930: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23931: LD_ADDR_VAR 0 2
23935: PUSH
23936: LD_INT 22
23938: PUSH
23939: LD_OWVAR 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 32
23950: PUSH
23951: LD_INT 3
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PPUSH
23962: CALL_OW 69
23966: ST_TO_ADDR
// if not tmp then
23967: LD_VAR 0 2
23971: NOT
23972: IFFALSE 23976
// exit ;
23974: GO 24005
// for i in tmp do
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_VAR 0 2
23985: PUSH
23986: FOR_IN
23987: IFFALSE 24003
// begin SetLives ( i , 0 ) ;
23989: LD_VAR 0 1
23993: PPUSH
23994: LD_INT 0
23996: PPUSH
23997: CALL_OW 234
// end ;
24001: GO 23986
24003: POP
24004: POP
// end ;
24005: PPOPN 2
24007: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24008: LD_EXP 54
24012: PUSH
24013: LD_EXP 57
24017: AND
24018: IFFALSE 24111
24020: GO 24022
24022: DISABLE
24023: LD_INT 0
24025: PPUSH
// begin enable ;
24026: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24027: LD_ADDR_VAR 0 1
24031: PUSH
24032: LD_INT 22
24034: PUSH
24035: LD_OWVAR 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 2
24046: PUSH
24047: LD_INT 25
24049: PUSH
24050: LD_INT 5
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 25
24059: PUSH
24060: LD_INT 9
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 25
24069: PUSH
24070: LD_INT 8
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PPUSH
24087: CALL_OW 69
24091: PUSH
24092: FOR_IN
24093: IFFALSE 24109
// begin SetClass ( i , 1 ) ;
24095: LD_VAR 0 1
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL_OW 336
// end ;
24107: GO 24092
24109: POP
24110: POP
// end ;
24111: PPOPN 1
24113: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24114: LD_EXP 54
24118: PUSH
24119: LD_EXP 58
24123: AND
24124: PUSH
24125: LD_OWVAR 65
24129: PUSH
24130: LD_INT 7
24132: LESS
24133: AND
24134: IFFALSE 24148
24136: GO 24138
24138: DISABLE
// begin enable ;
24139: ENABLE
// game_speed := 7 ;
24140: LD_ADDR_OWVAR 65
24144: PUSH
24145: LD_INT 7
24147: ST_TO_ADDR
// end ;
24148: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24149: LD_EXP 54
24153: PUSH
24154: LD_EXP 61
24158: AND
24159: IFFALSE 24361
24161: GO 24163
24163: DISABLE
24164: LD_INT 0
24166: PPUSH
24167: PPUSH
24168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24169: LD_ADDR_VAR 0 3
24173: PUSH
24174: LD_INT 81
24176: PUSH
24177: LD_OWVAR 2
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 21
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PPUSH
24200: CALL_OW 69
24204: ST_TO_ADDR
// if not tmp then
24205: LD_VAR 0 3
24209: NOT
24210: IFFALSE 24214
// exit ;
24212: GO 24361
// if tmp > 5 then
24214: LD_VAR 0 3
24218: PUSH
24219: LD_INT 5
24221: GREATER
24222: IFFALSE 24234
// k := 5 else
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: LD_INT 5
24231: ST_TO_ADDR
24232: GO 24244
// k := tmp ;
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_VAR 0 3
24243: ST_TO_ADDR
// for i := 1 to k do
24244: LD_ADDR_VAR 0 1
24248: PUSH
24249: DOUBLE
24250: LD_INT 1
24252: DEC
24253: ST_TO_ADDR
24254: LD_VAR 0 2
24258: PUSH
24259: FOR_TO
24260: IFFALSE 24359
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24262: LD_VAR 0 3
24266: PUSH
24267: LD_VAR 0 1
24271: ARRAY
24272: PPUSH
24273: LD_VAR 0 1
24277: PUSH
24278: LD_INT 4
24280: MOD
24281: PUSH
24282: LD_INT 1
24284: PLUS
24285: PPUSH
24286: CALL_OW 259
24290: PUSH
24291: LD_INT 10
24293: LESS
24294: IFFALSE 24357
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24296: LD_VAR 0 3
24300: PUSH
24301: LD_VAR 0 1
24305: ARRAY
24306: PPUSH
24307: LD_VAR 0 1
24311: PUSH
24312: LD_INT 4
24314: MOD
24315: PUSH
24316: LD_INT 1
24318: PLUS
24319: PPUSH
24320: LD_VAR 0 3
24324: PUSH
24325: LD_VAR 0 1
24329: ARRAY
24330: PPUSH
24331: LD_VAR 0 1
24335: PUSH
24336: LD_INT 4
24338: MOD
24339: PUSH
24340: LD_INT 1
24342: PLUS
24343: PPUSH
24344: CALL_OW 259
24348: PUSH
24349: LD_INT 1
24351: PLUS
24352: PPUSH
24353: CALL_OW 237
24357: GO 24259
24359: POP
24360: POP
// end ;
24361: PPOPN 3
24363: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24364: LD_EXP 54
24368: PUSH
24369: LD_EXP 62
24373: AND
24374: IFFALSE 24394
24376: GO 24378
24378: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24379: LD_INT 4
24381: PPUSH
24382: LD_OWVAR 2
24386: PPUSH
24387: LD_INT 0
24389: PPUSH
24390: CALL_OW 324
24394: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24395: LD_EXP 54
24399: PUSH
24400: LD_EXP 91
24404: AND
24405: IFFALSE 24425
24407: GO 24409
24409: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24410: LD_INT 19
24412: PPUSH
24413: LD_OWVAR 2
24417: PPUSH
24418: LD_INT 0
24420: PPUSH
24421: CALL_OW 324
24425: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24426: LD_EXP 54
24430: PUSH
24431: LD_EXP 63
24435: AND
24436: IFFALSE 24538
24438: GO 24440
24440: DISABLE
24441: LD_INT 0
24443: PPUSH
24444: PPUSH
// begin enable ;
24445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24446: LD_ADDR_VAR 0 2
24450: PUSH
24451: LD_INT 22
24453: PUSH
24454: LD_OWVAR 2
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 34
24468: PUSH
24469: LD_INT 11
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 34
24478: PUSH
24479: LD_INT 30
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: ST_TO_ADDR
// if not tmp then
24500: LD_VAR 0 2
24504: NOT
24505: IFFALSE 24509
// exit ;
24507: GO 24538
// for i in tmp do
24509: LD_ADDR_VAR 0 1
24513: PUSH
24514: LD_VAR 0 2
24518: PUSH
24519: FOR_IN
24520: IFFALSE 24536
// begin SetLives ( i , 0 ) ;
24522: LD_VAR 0 1
24526: PPUSH
24527: LD_INT 0
24529: PPUSH
24530: CALL_OW 234
// end ;
24534: GO 24519
24536: POP
24537: POP
// end ;
24538: PPOPN 2
24540: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24541: LD_EXP 54
24545: PUSH
24546: LD_EXP 64
24550: AND
24551: IFFALSE 24571
24553: GO 24555
24555: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24556: LD_INT 32
24558: PPUSH
24559: LD_OWVAR 2
24563: PPUSH
24564: LD_INT 0
24566: PPUSH
24567: CALL_OW 324
24571: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24572: LD_EXP 54
24576: PUSH
24577: LD_EXP 65
24581: AND
24582: IFFALSE 24763
24584: GO 24586
24586: DISABLE
24587: LD_INT 0
24589: PPUSH
24590: PPUSH
24591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24592: LD_ADDR_VAR 0 2
24596: PUSH
24597: LD_INT 22
24599: PUSH
24600: LD_OWVAR 2
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 33
24611: PUSH
24612: LD_INT 3
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PPUSH
24623: CALL_OW 69
24627: ST_TO_ADDR
// if not tmp then
24628: LD_VAR 0 2
24632: NOT
24633: IFFALSE 24637
// exit ;
24635: GO 24763
// side := 0 ;
24637: LD_ADDR_VAR 0 3
24641: PUSH
24642: LD_INT 0
24644: ST_TO_ADDR
// for i := 1 to 8 do
24645: LD_ADDR_VAR 0 1
24649: PUSH
24650: DOUBLE
24651: LD_INT 1
24653: DEC
24654: ST_TO_ADDR
24655: LD_INT 8
24657: PUSH
24658: FOR_TO
24659: IFFALSE 24707
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24661: LD_OWVAR 2
24665: PUSH
24666: LD_VAR 0 1
24670: NONEQUAL
24671: PUSH
24672: LD_OWVAR 2
24676: PPUSH
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 81
24686: PUSH
24687: LD_INT 2
24689: EQUAL
24690: AND
24691: IFFALSE 24705
// begin side := i ;
24693: LD_ADDR_VAR 0 3
24697: PUSH
24698: LD_VAR 0 1
24702: ST_TO_ADDR
// break ;
24703: GO 24707
// end ;
24705: GO 24658
24707: POP
24708: POP
// if not side then
24709: LD_VAR 0 3
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24763
// for i := 1 to tmp do
24718: LD_ADDR_VAR 0 1
24722: PUSH
24723: DOUBLE
24724: LD_INT 1
24726: DEC
24727: ST_TO_ADDR
24728: LD_VAR 0 2
24732: PUSH
24733: FOR_TO
24734: IFFALSE 24761
// if Prob ( 60 ) then
24736: LD_INT 60
24738: PPUSH
24739: CALL_OW 13
24743: IFFALSE 24759
// SetSide ( i , side ) ;
24745: LD_VAR 0 1
24749: PPUSH
24750: LD_VAR 0 3
24754: PPUSH
24755: CALL_OW 235
24759: GO 24733
24761: POP
24762: POP
// end ;
24763: PPOPN 3
24765: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24766: LD_EXP 54
24770: PUSH
24771: LD_EXP 67
24775: AND
24776: IFFALSE 24895
24778: GO 24780
24780: DISABLE
24781: LD_INT 0
24783: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24784: LD_ADDR_VAR 0 1
24788: PUSH
24789: LD_INT 22
24791: PUSH
24792: LD_OWVAR 2
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 3
24813: PUSH
24814: LD_INT 23
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: PPUSH
24833: CALL_OW 69
24837: PUSH
24838: FOR_IN
24839: IFFALSE 24893
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24841: LD_VAR 0 1
24845: PPUSH
24846: CALL_OW 257
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: LD_INT 3
24859: PUSH
24860: LD_INT 4
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: IN
24869: IFFALSE 24891
// SetClass ( un , rand ( 1 , 4 ) ) ;
24871: LD_VAR 0 1
24875: PPUSH
24876: LD_INT 1
24878: PPUSH
24879: LD_INT 4
24881: PPUSH
24882: CALL_OW 12
24886: PPUSH
24887: CALL_OW 336
24891: GO 24838
24893: POP
24894: POP
// end ;
24895: PPOPN 1
24897: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24898: LD_EXP 54
24902: PUSH
24903: LD_EXP 66
24907: AND
24908: IFFALSE 24987
24910: GO 24912
24912: DISABLE
24913: LD_INT 0
24915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24916: LD_ADDR_VAR 0 1
24920: PUSH
24921: LD_INT 22
24923: PUSH
24924: LD_OWVAR 2
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 21
24935: PUSH
24936: LD_INT 3
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 69
24951: ST_TO_ADDR
// if not tmp then
24952: LD_VAR 0 1
24956: NOT
24957: IFFALSE 24961
// exit ;
24959: GO 24987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24961: LD_VAR 0 1
24965: PUSH
24966: LD_INT 1
24968: PPUSH
24969: LD_VAR 0 1
24973: PPUSH
24974: CALL_OW 12
24978: ARRAY
24979: PPUSH
24980: LD_INT 100
24982: PPUSH
24983: CALL_OW 234
// end ;
24987: PPOPN 1
24989: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24990: LD_EXP 54
24994: PUSH
24995: LD_EXP 68
24999: AND
25000: IFFALSE 25098
25002: GO 25004
25004: DISABLE
25005: LD_INT 0
25007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25008: LD_ADDR_VAR 0 1
25012: PUSH
25013: LD_INT 22
25015: PUSH
25016: LD_OWVAR 2
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 21
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PPUSH
25039: CALL_OW 69
25043: ST_TO_ADDR
// if not tmp then
25044: LD_VAR 0 1
25048: NOT
25049: IFFALSE 25053
// exit ;
25051: GO 25098
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25053: LD_VAR 0 1
25057: PUSH
25058: LD_INT 1
25060: PPUSH
25061: LD_VAR 0 1
25065: PPUSH
25066: CALL_OW 12
25070: ARRAY
25071: PPUSH
25072: LD_INT 1
25074: PPUSH
25075: LD_INT 4
25077: PPUSH
25078: CALL_OW 12
25082: PPUSH
25083: LD_INT 3000
25085: PPUSH
25086: LD_INT 9000
25088: PPUSH
25089: CALL_OW 12
25093: PPUSH
25094: CALL_OW 492
// end ;
25098: PPOPN 1
25100: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25101: LD_EXP 54
25105: PUSH
25106: LD_EXP 69
25110: AND
25111: IFFALSE 25131
25113: GO 25115
25115: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25116: LD_INT 1
25118: PPUSH
25119: LD_OWVAR 2
25123: PPUSH
25124: LD_INT 0
25126: PPUSH
25127: CALL_OW 324
25131: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25132: LD_EXP 54
25136: PUSH
25137: LD_EXP 70
25141: AND
25142: IFFALSE 25225
25144: GO 25146
25146: DISABLE
25147: LD_INT 0
25149: PPUSH
25150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25151: LD_ADDR_VAR 0 2
25155: PUSH
25156: LD_INT 22
25158: PUSH
25159: LD_OWVAR 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 21
25170: PUSH
25171: LD_INT 3
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PPUSH
25182: CALL_OW 69
25186: ST_TO_ADDR
// if not tmp then
25187: LD_VAR 0 2
25191: NOT
25192: IFFALSE 25196
// exit ;
25194: GO 25225
// for i in tmp do
25196: LD_ADDR_VAR 0 1
25200: PUSH
25201: LD_VAR 0 2
25205: PUSH
25206: FOR_IN
25207: IFFALSE 25223
// SetBLevel ( i , 10 ) ;
25209: LD_VAR 0 1
25213: PPUSH
25214: LD_INT 10
25216: PPUSH
25217: CALL_OW 241
25221: GO 25206
25223: POP
25224: POP
// end ;
25225: PPOPN 2
25227: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25228: LD_EXP 54
25232: PUSH
25233: LD_EXP 71
25237: AND
25238: IFFALSE 25349
25240: GO 25242
25242: DISABLE
25243: LD_INT 0
25245: PPUSH
25246: PPUSH
25247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25248: LD_ADDR_VAR 0 3
25252: PUSH
25253: LD_INT 22
25255: PUSH
25256: LD_OWVAR 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 25
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PPUSH
25279: CALL_OW 69
25283: ST_TO_ADDR
// if not tmp then
25284: LD_VAR 0 3
25288: NOT
25289: IFFALSE 25293
// exit ;
25291: GO 25349
// un := tmp [ rand ( 1 , tmp ) ] ;
25293: LD_ADDR_VAR 0 2
25297: PUSH
25298: LD_VAR 0 3
25302: PUSH
25303: LD_INT 1
25305: PPUSH
25306: LD_VAR 0 3
25310: PPUSH
25311: CALL_OW 12
25315: ARRAY
25316: ST_TO_ADDR
// if Crawls ( un ) then
25317: LD_VAR 0 2
25321: PPUSH
25322: CALL_OW 318
25326: IFFALSE 25337
// ComWalk ( un ) ;
25328: LD_VAR 0 2
25332: PPUSH
25333: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25337: LD_VAR 0 2
25341: PPUSH
25342: LD_INT 5
25344: PPUSH
25345: CALL_OW 336
// end ;
25349: PPOPN 3
25351: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25352: LD_EXP 54
25356: PUSH
25357: LD_EXP 72
25361: AND
25362: PUSH
25363: LD_OWVAR 67
25367: PUSH
25368: LD_INT 4
25370: LESS
25371: AND
25372: IFFALSE 25391
25374: GO 25376
25376: DISABLE
// begin Difficulty := Difficulty + 1 ;
25377: LD_ADDR_OWVAR 67
25381: PUSH
25382: LD_OWVAR 67
25386: PUSH
25387: LD_INT 1
25389: PLUS
25390: ST_TO_ADDR
// end ;
25391: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25392: LD_EXP 54
25396: PUSH
25397: LD_EXP 73
25401: AND
25402: IFFALSE 25505
25404: GO 25406
25406: DISABLE
25407: LD_INT 0
25409: PPUSH
// begin for i := 1 to 5 do
25410: LD_ADDR_VAR 0 1
25414: PUSH
25415: DOUBLE
25416: LD_INT 1
25418: DEC
25419: ST_TO_ADDR
25420: LD_INT 5
25422: PUSH
25423: FOR_TO
25424: IFFALSE 25503
// begin uc_nation := nation_nature ;
25426: LD_ADDR_OWVAR 21
25430: PUSH
25431: LD_INT 0
25433: ST_TO_ADDR
// uc_side := 0 ;
25434: LD_ADDR_OWVAR 20
25438: PUSH
25439: LD_INT 0
25441: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25442: LD_ADDR_OWVAR 29
25446: PUSH
25447: LD_INT 12
25449: PUSH
25450: LD_INT 12
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: ST_TO_ADDR
// hc_agressivity := 20 ;
25457: LD_ADDR_OWVAR 35
25461: PUSH
25462: LD_INT 20
25464: ST_TO_ADDR
// hc_class := class_tiger ;
25465: LD_ADDR_OWVAR 28
25469: PUSH
25470: LD_INT 14
25472: ST_TO_ADDR
// hc_gallery :=  ;
25473: LD_ADDR_OWVAR 33
25477: PUSH
25478: LD_STRING 
25480: ST_TO_ADDR
// hc_name :=  ;
25481: LD_ADDR_OWVAR 26
25485: PUSH
25486: LD_STRING 
25488: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25489: CALL_OW 44
25493: PPUSH
25494: LD_INT 0
25496: PPUSH
25497: CALL_OW 51
// end ;
25501: GO 25423
25503: POP
25504: POP
// end ;
25505: PPOPN 1
25507: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25508: LD_EXP 54
25512: PUSH
25513: LD_EXP 74
25517: AND
25518: IFFALSE 25527
25520: GO 25522
25522: DISABLE
// StreamSibBomb ;
25523: CALL 25528 0 0
25527: END
// export function StreamSibBomb ; var i , x , y ; begin
25528: LD_INT 0
25530: PPUSH
25531: PPUSH
25532: PPUSH
25533: PPUSH
// result := false ;
25534: LD_ADDR_VAR 0 1
25538: PUSH
25539: LD_INT 0
25541: ST_TO_ADDR
// for i := 1 to 16 do
25542: LD_ADDR_VAR 0 2
25546: PUSH
25547: DOUBLE
25548: LD_INT 1
25550: DEC
25551: ST_TO_ADDR
25552: LD_INT 16
25554: PUSH
25555: FOR_TO
25556: IFFALSE 25755
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25558: LD_ADDR_VAR 0 3
25562: PUSH
25563: LD_INT 10
25565: PUSH
25566: LD_INT 20
25568: PUSH
25569: LD_INT 30
25571: PUSH
25572: LD_INT 40
25574: PUSH
25575: LD_INT 50
25577: PUSH
25578: LD_INT 60
25580: PUSH
25581: LD_INT 70
25583: PUSH
25584: LD_INT 80
25586: PUSH
25587: LD_INT 90
25589: PUSH
25590: LD_INT 100
25592: PUSH
25593: LD_INT 110
25595: PUSH
25596: LD_INT 120
25598: PUSH
25599: LD_INT 130
25601: PUSH
25602: LD_INT 140
25604: PUSH
25605: LD_INT 150
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: PPUSH
25628: LD_INT 15
25630: PPUSH
25631: CALL_OW 12
25635: ARRAY
25636: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25637: LD_ADDR_VAR 0 4
25641: PUSH
25642: LD_INT 10
25644: PUSH
25645: LD_INT 20
25647: PUSH
25648: LD_INT 30
25650: PUSH
25651: LD_INT 40
25653: PUSH
25654: LD_INT 50
25656: PUSH
25657: LD_INT 60
25659: PUSH
25660: LD_INT 70
25662: PUSH
25663: LD_INT 80
25665: PUSH
25666: LD_INT 90
25668: PUSH
25669: LD_INT 100
25671: PUSH
25672: LD_INT 110
25674: PUSH
25675: LD_INT 120
25677: PUSH
25678: LD_INT 130
25680: PUSH
25681: LD_INT 140
25683: PUSH
25684: LD_INT 150
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PPUSH
25707: LD_INT 15
25709: PPUSH
25710: CALL_OW 12
25714: ARRAY
25715: ST_TO_ADDR
// if ValidHex ( x , y ) then
25716: LD_VAR 0 3
25720: PPUSH
25721: LD_VAR 0 4
25725: PPUSH
25726: CALL_OW 488
25730: IFFALSE 25753
// begin result := [ x , y ] ;
25732: LD_ADDR_VAR 0 1
25736: PUSH
25737: LD_VAR 0 3
25741: PUSH
25742: LD_VAR 0 4
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: ST_TO_ADDR
// break ;
25751: GO 25755
// end ; end ;
25753: GO 25555
25755: POP
25756: POP
// if result then
25757: LD_VAR 0 1
25761: IFFALSE 25821
// begin ToLua ( playSibBomb() ) ;
25763: LD_STRING playSibBomb()
25765: PPUSH
25766: CALL_OW 559
// wait ( 0 0$14 ) ;
25770: LD_INT 490
25772: PPUSH
25773: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25777: LD_VAR 0 1
25781: PUSH
25782: LD_INT 1
25784: ARRAY
25785: PPUSH
25786: LD_VAR 0 1
25790: PUSH
25791: LD_INT 2
25793: ARRAY
25794: PPUSH
25795: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25799: LD_VAR 0 1
25803: PUSH
25804: LD_INT 1
25806: ARRAY
25807: PPUSH
25808: LD_VAR 0 1
25812: PUSH
25813: LD_INT 2
25815: ARRAY
25816: PPUSH
25817: CALL_OW 429
// end ; end ;
25821: LD_VAR 0 1
25825: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25826: LD_EXP 54
25830: PUSH
25831: LD_EXP 76
25835: AND
25836: IFFALSE 25848
25838: GO 25840
25840: DISABLE
// YouLost (  ) ;
25841: LD_STRING 
25843: PPUSH
25844: CALL_OW 104
25848: END
// every 0 0$1 trigger StreamModeActive and sFog do
25849: LD_EXP 54
25853: PUSH
25854: LD_EXP 75
25858: AND
25859: IFFALSE 25873
25861: GO 25863
25863: DISABLE
// FogOff ( your_side ) ;
25864: LD_OWVAR 2
25868: PPUSH
25869: CALL_OW 344
25873: END
// every 0 0$1 trigger StreamModeActive and sSun do
25874: LD_EXP 54
25878: PUSH
25879: LD_EXP 77
25883: AND
25884: IFFALSE 25912
25886: GO 25888
25888: DISABLE
// begin solar_recharge_percent := 0 ;
25889: LD_ADDR_OWVAR 79
25893: PUSH
25894: LD_INT 0
25896: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25897: LD_INT 10500
25899: PPUSH
25900: CALL_OW 67
// solar_recharge_percent := 100 ;
25904: LD_ADDR_OWVAR 79
25908: PUSH
25909: LD_INT 100
25911: ST_TO_ADDR
// end ;
25912: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25913: LD_EXP 54
25917: PUSH
25918: LD_EXP 78
25922: AND
25923: IFFALSE 26162
25925: GO 25927
25927: DISABLE
25928: LD_INT 0
25930: PPUSH
25931: PPUSH
25932: PPUSH
// begin tmp := [ ] ;
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: EMPTY
25939: ST_TO_ADDR
// for i := 1 to 6 do
25940: LD_ADDR_VAR 0 1
25944: PUSH
25945: DOUBLE
25946: LD_INT 1
25948: DEC
25949: ST_TO_ADDR
25950: LD_INT 6
25952: PUSH
25953: FOR_TO
25954: IFFALSE 26059
// begin uc_nation := nation_nature ;
25956: LD_ADDR_OWVAR 21
25960: PUSH
25961: LD_INT 0
25963: ST_TO_ADDR
// uc_side := 0 ;
25964: LD_ADDR_OWVAR 20
25968: PUSH
25969: LD_INT 0
25971: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25972: LD_ADDR_OWVAR 29
25976: PUSH
25977: LD_INT 12
25979: PUSH
25980: LD_INT 12
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: ST_TO_ADDR
// hc_agressivity := 20 ;
25987: LD_ADDR_OWVAR 35
25991: PUSH
25992: LD_INT 20
25994: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25995: LD_ADDR_OWVAR 28
25999: PUSH
26000: LD_INT 17
26002: ST_TO_ADDR
// hc_gallery :=  ;
26003: LD_ADDR_OWVAR 33
26007: PUSH
26008: LD_STRING 
26010: ST_TO_ADDR
// hc_name :=  ;
26011: LD_ADDR_OWVAR 26
26015: PUSH
26016: LD_STRING 
26018: ST_TO_ADDR
// un := CreateHuman ;
26019: LD_ADDR_VAR 0 2
26023: PUSH
26024: CALL_OW 44
26028: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26029: LD_VAR 0 2
26033: PPUSH
26034: LD_INT 1
26036: PPUSH
26037: CALL_OW 51
// tmp := tmp ^ un ;
26041: LD_ADDR_VAR 0 3
26045: PUSH
26046: LD_VAR 0 3
26050: PUSH
26051: LD_VAR 0 2
26055: ADD
26056: ST_TO_ADDR
// end ;
26057: GO 25953
26059: POP
26060: POP
// repeat wait ( 0 0$1 ) ;
26061: LD_INT 35
26063: PPUSH
26064: CALL_OW 67
// for un in tmp do
26068: LD_ADDR_VAR 0 2
26072: PUSH
26073: LD_VAR 0 3
26077: PUSH
26078: FOR_IN
26079: IFFALSE 26153
// begin if IsDead ( un ) then
26081: LD_VAR 0 2
26085: PPUSH
26086: CALL_OW 301
26090: IFFALSE 26110
// begin tmp := tmp diff un ;
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_VAR 0 3
26101: PUSH
26102: LD_VAR 0 2
26106: DIFF
26107: ST_TO_ADDR
// continue ;
26108: GO 26078
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26110: LD_VAR 0 2
26114: PPUSH
26115: LD_INT 3
26117: PUSH
26118: LD_INT 22
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PPUSH
26132: CALL_OW 69
26136: PPUSH
26137: LD_VAR 0 2
26141: PPUSH
26142: CALL_OW 74
26146: PPUSH
26147: CALL_OW 115
// end ;
26151: GO 26078
26153: POP
26154: POP
// until not tmp ;
26155: LD_VAR 0 3
26159: NOT
26160: IFFALSE 26061
// end ;
26162: PPOPN 3
26164: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26165: LD_EXP 54
26169: PUSH
26170: LD_EXP 79
26174: AND
26175: IFFALSE 26229
26177: GO 26179
26179: DISABLE
// begin ToLua ( displayTroll(); ) ;
26180: LD_STRING displayTroll();
26182: PPUSH
26183: CALL_OW 559
// wait ( 3 3$00 ) ;
26187: LD_INT 6300
26189: PPUSH
26190: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26194: LD_STRING hideTroll();
26196: PPUSH
26197: CALL_OW 559
// wait ( 1 1$00 ) ;
26201: LD_INT 2100
26203: PPUSH
26204: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26208: LD_STRING displayTroll();
26210: PPUSH
26211: CALL_OW 559
// wait ( 1 1$00 ) ;
26215: LD_INT 2100
26217: PPUSH
26218: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26222: LD_STRING hideTroll();
26224: PPUSH
26225: CALL_OW 559
// end ;
26229: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26230: LD_EXP 54
26234: PUSH
26235: LD_EXP 80
26239: AND
26240: IFFALSE 26303
26242: GO 26244
26244: DISABLE
26245: LD_INT 0
26247: PPUSH
// begin p := 0 ;
26248: LD_ADDR_VAR 0 1
26252: PUSH
26253: LD_INT 0
26255: ST_TO_ADDR
// repeat game_speed := 1 ;
26256: LD_ADDR_OWVAR 65
26260: PUSH
26261: LD_INT 1
26263: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26264: LD_INT 35
26266: PPUSH
26267: CALL_OW 67
// p := p + 1 ;
26271: LD_ADDR_VAR 0 1
26275: PUSH
26276: LD_VAR 0 1
26280: PUSH
26281: LD_INT 1
26283: PLUS
26284: ST_TO_ADDR
// until p >= 60 ;
26285: LD_VAR 0 1
26289: PUSH
26290: LD_INT 60
26292: GREATEREQUAL
26293: IFFALSE 26256
// game_speed := 4 ;
26295: LD_ADDR_OWVAR 65
26299: PUSH
26300: LD_INT 4
26302: ST_TO_ADDR
// end ;
26303: PPOPN 1
26305: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26306: LD_EXP 54
26310: PUSH
26311: LD_EXP 81
26315: AND
26316: IFFALSE 26462
26318: GO 26320
26320: DISABLE
26321: LD_INT 0
26323: PPUSH
26324: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26325: LD_ADDR_VAR 0 1
26329: PUSH
26330: LD_INT 22
26332: PUSH
26333: LD_OWVAR 2
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: LD_INT 30
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 30
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PPUSH
26374: CALL_OW 69
26378: ST_TO_ADDR
// if not depot then
26379: LD_VAR 0 1
26383: NOT
26384: IFFALSE 26388
// exit ;
26386: GO 26462
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26388: LD_ADDR_VAR 0 2
26392: PUSH
26393: LD_VAR 0 1
26397: PUSH
26398: LD_INT 1
26400: PPUSH
26401: LD_VAR 0 1
26405: PPUSH
26406: CALL_OW 12
26410: ARRAY
26411: PPUSH
26412: CALL_OW 274
26416: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26417: LD_VAR 0 2
26421: PPUSH
26422: LD_INT 1
26424: PPUSH
26425: LD_INT 0
26427: PPUSH
26428: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26432: LD_VAR 0 2
26436: PPUSH
26437: LD_INT 2
26439: PPUSH
26440: LD_INT 0
26442: PPUSH
26443: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26447: LD_VAR 0 2
26451: PPUSH
26452: LD_INT 3
26454: PPUSH
26455: LD_INT 0
26457: PPUSH
26458: CALL_OW 277
// end ;
26462: PPOPN 2
26464: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26465: LD_EXP 54
26469: PUSH
26470: LD_EXP 82
26474: AND
26475: IFFALSE 26572
26477: GO 26479
26479: DISABLE
26480: LD_INT 0
26482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26483: LD_ADDR_VAR 0 1
26487: PUSH
26488: LD_INT 22
26490: PUSH
26491: LD_OWVAR 2
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 21
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: LD_INT 23
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: PPUSH
26532: CALL_OW 69
26536: ST_TO_ADDR
// if not tmp then
26537: LD_VAR 0 1
26541: NOT
26542: IFFALSE 26546
// exit ;
26544: GO 26572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26546: LD_VAR 0 1
26550: PUSH
26551: LD_INT 1
26553: PPUSH
26554: LD_VAR 0 1
26558: PPUSH
26559: CALL_OW 12
26563: ARRAY
26564: PPUSH
26565: LD_INT 200
26567: PPUSH
26568: CALL_OW 234
// end ;
26572: PPOPN 1
26574: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26575: LD_EXP 54
26579: PUSH
26580: LD_EXP 83
26584: AND
26585: IFFALSE 26664
26587: GO 26589
26589: DISABLE
26590: LD_INT 0
26592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26593: LD_ADDR_VAR 0 1
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_OWVAR 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 21
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: ST_TO_ADDR
// if not tmp then
26629: LD_VAR 0 1
26633: NOT
26634: IFFALSE 26638
// exit ;
26636: GO 26664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26638: LD_VAR 0 1
26642: PUSH
26643: LD_INT 1
26645: PPUSH
26646: LD_VAR 0 1
26650: PPUSH
26651: CALL_OW 12
26655: ARRAY
26656: PPUSH
26657: LD_INT 60
26659: PPUSH
26660: CALL_OW 234
// end ;
26664: PPOPN 1
26666: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26667: LD_EXP 54
26671: PUSH
26672: LD_EXP 84
26676: AND
26677: IFFALSE 26776
26679: GO 26681
26681: DISABLE
26682: LD_INT 0
26684: PPUSH
26685: PPUSH
// begin enable ;
26686: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26687: LD_ADDR_VAR 0 1
26691: PUSH
26692: LD_INT 22
26694: PUSH
26695: LD_OWVAR 2
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 61
26706: PUSH
26707: EMPTY
26708: LIST
26709: PUSH
26710: LD_INT 33
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: PPUSH
26725: CALL_OW 69
26729: ST_TO_ADDR
// if not tmp then
26730: LD_VAR 0 1
26734: NOT
26735: IFFALSE 26739
// exit ;
26737: GO 26776
// for i in tmp do
26739: LD_ADDR_VAR 0 2
26743: PUSH
26744: LD_VAR 0 1
26748: PUSH
26749: FOR_IN
26750: IFFALSE 26774
// if IsControledBy ( i ) then
26752: LD_VAR 0 2
26756: PPUSH
26757: CALL_OW 312
26761: IFFALSE 26772
// ComUnlink ( i ) ;
26763: LD_VAR 0 2
26767: PPUSH
26768: CALL_OW 136
26772: GO 26749
26774: POP
26775: POP
// end ;
26776: PPOPN 2
26778: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26779: LD_EXP 54
26783: PUSH
26784: LD_EXP 85
26788: AND
26789: IFFALSE 26929
26791: GO 26793
26793: DISABLE
26794: LD_INT 0
26796: PPUSH
26797: PPUSH
// begin ToLua ( displayPowell(); ) ;
26798: LD_STRING displayPowell();
26800: PPUSH
26801: CALL_OW 559
// uc_side := 0 ;
26805: LD_ADDR_OWVAR 20
26809: PUSH
26810: LD_INT 0
26812: ST_TO_ADDR
// uc_nation := 2 ;
26813: LD_ADDR_OWVAR 21
26817: PUSH
26818: LD_INT 2
26820: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26821: LD_ADDR_OWVAR 37
26825: PUSH
26826: LD_INT 14
26828: ST_TO_ADDR
// vc_engine := engine_siberite ;
26829: LD_ADDR_OWVAR 39
26833: PUSH
26834: LD_INT 3
26836: ST_TO_ADDR
// vc_control := control_apeman ;
26837: LD_ADDR_OWVAR 38
26841: PUSH
26842: LD_INT 5
26844: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26845: LD_ADDR_OWVAR 40
26849: PUSH
26850: LD_INT 29
26852: ST_TO_ADDR
// un := CreateVehicle ;
26853: LD_ADDR_VAR 0 2
26857: PUSH
26858: CALL_OW 45
26862: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26863: LD_VAR 0 2
26867: PPUSH
26868: LD_INT 1
26870: PPUSH
26871: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26875: LD_INT 35
26877: PPUSH
26878: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26882: LD_VAR 0 2
26886: PPUSH
26887: LD_INT 22
26889: PUSH
26890: LD_OWVAR 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PPUSH
26899: CALL_OW 69
26903: PPUSH
26904: LD_VAR 0 2
26908: PPUSH
26909: CALL_OW 74
26913: PPUSH
26914: CALL_OW 115
// until IsDead ( un ) ;
26918: LD_VAR 0 2
26922: PPUSH
26923: CALL_OW 301
26927: IFFALSE 26875
// end ;
26929: PPOPN 2
26931: END
// every 0 0$1 trigger StreamModeActive and sStu do
26932: LD_EXP 54
26936: PUSH
26937: LD_EXP 93
26941: AND
26942: IFFALSE 26958
26944: GO 26946
26946: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26947: LD_STRING displayStucuk();
26949: PPUSH
26950: CALL_OW 559
// ResetFog ;
26954: CALL_OW 335
// end ;
26958: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26959: LD_EXP 54
26963: PUSH
26964: LD_EXP 86
26968: AND
26969: IFFALSE 27110
26971: GO 26973
26973: DISABLE
26974: LD_INT 0
26976: PPUSH
26977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_INT 22
26985: PUSH
26986: LD_OWVAR 2
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 21
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PPUSH
27009: CALL_OW 69
27013: ST_TO_ADDR
// if not tmp then
27014: LD_VAR 0 2
27018: NOT
27019: IFFALSE 27023
// exit ;
27021: GO 27110
// un := tmp [ rand ( 1 , tmp ) ] ;
27023: LD_ADDR_VAR 0 1
27027: PUSH
27028: LD_VAR 0 2
27032: PUSH
27033: LD_INT 1
27035: PPUSH
27036: LD_VAR 0 2
27040: PPUSH
27041: CALL_OW 12
27045: ARRAY
27046: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27047: LD_VAR 0 1
27051: PPUSH
27052: LD_INT 0
27054: PPUSH
27055: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27059: LD_VAR 0 1
27063: PPUSH
27064: LD_OWVAR 3
27068: PUSH
27069: LD_VAR 0 1
27073: DIFF
27074: PPUSH
27075: LD_VAR 0 1
27079: PPUSH
27080: CALL_OW 74
27084: PPUSH
27085: CALL_OW 115
// wait ( 0 0$20 ) ;
27089: LD_INT 700
27091: PPUSH
27092: CALL_OW 67
// SetSide ( un , your_side ) ;
27096: LD_VAR 0 1
27100: PPUSH
27101: LD_OWVAR 2
27105: PPUSH
27106: CALL_OW 235
// end ;
27110: PPOPN 2
27112: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27113: LD_EXP 54
27117: PUSH
27118: LD_EXP 87
27122: AND
27123: IFFALSE 27229
27125: GO 27127
27127: DISABLE
27128: LD_INT 0
27130: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27131: LD_ADDR_VAR 0 1
27135: PUSH
27136: LD_INT 22
27138: PUSH
27139: LD_OWVAR 2
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 30
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 30
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PPUSH
27180: CALL_OW 69
27184: ST_TO_ADDR
// if not depot then
27185: LD_VAR 0 1
27189: NOT
27190: IFFALSE 27194
// exit ;
27192: GO 27229
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27194: LD_VAR 0 1
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: PPUSH
27203: CALL_OW 250
27207: PPUSH
27208: LD_VAR 0 1
27212: PUSH
27213: LD_INT 1
27215: ARRAY
27216: PPUSH
27217: CALL_OW 251
27221: PPUSH
27222: LD_INT 70
27224: PPUSH
27225: CALL_OW 495
// end ;
27229: PPOPN 1
27231: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27232: LD_EXP 54
27236: PUSH
27237: LD_EXP 88
27241: AND
27242: IFFALSE 27453
27244: GO 27246
27246: DISABLE
27247: LD_INT 0
27249: PPUSH
27250: PPUSH
27251: PPUSH
27252: PPUSH
27253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27254: LD_ADDR_VAR 0 5
27258: PUSH
27259: LD_INT 22
27261: PUSH
27262: LD_OWVAR 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 21
27273: PUSH
27274: LD_INT 1
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PPUSH
27285: CALL_OW 69
27289: ST_TO_ADDR
// if not tmp then
27290: LD_VAR 0 5
27294: NOT
27295: IFFALSE 27299
// exit ;
27297: GO 27453
// for i in tmp do
27299: LD_ADDR_VAR 0 1
27303: PUSH
27304: LD_VAR 0 5
27308: PUSH
27309: FOR_IN
27310: IFFALSE 27451
// begin d := rand ( 0 , 5 ) ;
27312: LD_ADDR_VAR 0 4
27316: PUSH
27317: LD_INT 0
27319: PPUSH
27320: LD_INT 5
27322: PPUSH
27323: CALL_OW 12
27327: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27328: LD_ADDR_VAR 0 2
27332: PUSH
27333: LD_VAR 0 1
27337: PPUSH
27338: CALL_OW 250
27342: PPUSH
27343: LD_VAR 0 4
27347: PPUSH
27348: LD_INT 3
27350: PPUSH
27351: LD_INT 12
27353: PPUSH
27354: CALL_OW 12
27358: PPUSH
27359: CALL_OW 272
27363: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27364: LD_ADDR_VAR 0 3
27368: PUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL_OW 251
27378: PPUSH
27379: LD_VAR 0 4
27383: PPUSH
27384: LD_INT 3
27386: PPUSH
27387: LD_INT 12
27389: PPUSH
27390: CALL_OW 12
27394: PPUSH
27395: CALL_OW 273
27399: ST_TO_ADDR
// if ValidHex ( x , y ) then
27400: LD_VAR 0 2
27404: PPUSH
27405: LD_VAR 0 3
27409: PPUSH
27410: CALL_OW 488
27414: IFFALSE 27449
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27416: LD_VAR 0 1
27420: PPUSH
27421: LD_VAR 0 2
27425: PPUSH
27426: LD_VAR 0 3
27430: PPUSH
27431: LD_INT 3
27433: PPUSH
27434: LD_INT 6
27436: PPUSH
27437: CALL_OW 12
27441: PPUSH
27442: LD_INT 1
27444: PPUSH
27445: CALL_OW 483
// end ;
27449: GO 27309
27451: POP
27452: POP
// end ;
27453: PPOPN 5
27455: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27456: LD_EXP 54
27460: PUSH
27461: LD_EXP 89
27465: AND
27466: IFFALSE 27560
27468: GO 27470
27470: DISABLE
27471: LD_INT 0
27473: PPUSH
27474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27475: LD_ADDR_VAR 0 2
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_OWVAR 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 32
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 21
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: LIST
27516: PPUSH
27517: CALL_OW 69
27521: ST_TO_ADDR
// if not tmp then
27522: LD_VAR 0 2
27526: NOT
27527: IFFALSE 27531
// exit ;
27529: GO 27560
// for i in tmp do
27531: LD_ADDR_VAR 0 1
27535: PUSH
27536: LD_VAR 0 2
27540: PUSH
27541: FOR_IN
27542: IFFALSE 27558
// SetFuel ( i , 0 ) ;
27544: LD_VAR 0 1
27548: PPUSH
27549: LD_INT 0
27551: PPUSH
27552: CALL_OW 240
27556: GO 27541
27558: POP
27559: POP
// end ;
27560: PPOPN 2
27562: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27563: LD_EXP 54
27567: PUSH
27568: LD_EXP 90
27572: AND
27573: IFFALSE 27639
27575: GO 27577
27577: DISABLE
27578: LD_INT 0
27580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27581: LD_ADDR_VAR 0 1
27585: PUSH
27586: LD_INT 22
27588: PUSH
27589: LD_OWVAR 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 30
27600: PUSH
27601: LD_INT 29
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PPUSH
27612: CALL_OW 69
27616: ST_TO_ADDR
// if not tmp then
27617: LD_VAR 0 1
27621: NOT
27622: IFFALSE 27626
// exit ;
27624: GO 27639
// DestroyUnit ( tmp [ 1 ] ) ;
27626: LD_VAR 0 1
27630: PUSH
27631: LD_INT 1
27633: ARRAY
27634: PPUSH
27635: CALL_OW 65
// end ;
27639: PPOPN 1
27641: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27642: LD_EXP 54
27646: PUSH
27647: LD_EXP 92
27651: AND
27652: IFFALSE 27781
27654: GO 27656
27656: DISABLE
27657: LD_INT 0
27659: PPUSH
// begin uc_side := 0 ;
27660: LD_ADDR_OWVAR 20
27664: PUSH
27665: LD_INT 0
27667: ST_TO_ADDR
// uc_nation := nation_arabian ;
27668: LD_ADDR_OWVAR 21
27672: PUSH
27673: LD_INT 2
27675: ST_TO_ADDR
// hc_gallery :=  ;
27676: LD_ADDR_OWVAR 33
27680: PUSH
27681: LD_STRING 
27683: ST_TO_ADDR
// hc_name :=  ;
27684: LD_ADDR_OWVAR 26
27688: PUSH
27689: LD_STRING 
27691: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27692: LD_INT 1
27694: PPUSH
27695: LD_INT 11
27697: PPUSH
27698: LD_INT 10
27700: PPUSH
27701: CALL_OW 380
// un := CreateHuman ;
27705: LD_ADDR_VAR 0 1
27709: PUSH
27710: CALL_OW 44
27714: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27715: LD_VAR 0 1
27719: PPUSH
27720: LD_INT 1
27722: PPUSH
27723: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27727: LD_INT 35
27729: PPUSH
27730: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27734: LD_VAR 0 1
27738: PPUSH
27739: LD_INT 22
27741: PUSH
27742: LD_OWVAR 2
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PPUSH
27751: CALL_OW 69
27755: PPUSH
27756: LD_VAR 0 1
27760: PPUSH
27761: CALL_OW 74
27765: PPUSH
27766: CALL_OW 115
// until IsDead ( un ) ;
27770: LD_VAR 0 1
27774: PPUSH
27775: CALL_OW 301
27779: IFFALSE 27727
// end ;
27781: PPOPN 1
27783: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27784: LD_EXP 54
27788: PUSH
27789: LD_EXP 94
27793: AND
27794: IFFALSE 27806
27796: GO 27798
27798: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27799: LD_STRING earthquake(getX(game), 0, 32)
27801: PPUSH
27802: CALL_OW 559
27806: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27807: LD_EXP 54
27811: PUSH
27812: LD_EXP 95
27816: AND
27817: IFFALSE 27908
27819: GO 27821
27821: DISABLE
27822: LD_INT 0
27824: PPUSH
// begin enable ;
27825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27826: LD_ADDR_VAR 0 1
27830: PUSH
27831: LD_INT 22
27833: PUSH
27834: LD_OWVAR 2
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 21
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 33
27855: PUSH
27856: LD_INT 3
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: PPUSH
27868: CALL_OW 69
27872: ST_TO_ADDR
// if not tmp then
27873: LD_VAR 0 1
27877: NOT
27878: IFFALSE 27882
// exit ;
27880: GO 27908
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27882: LD_VAR 0 1
27886: PUSH
27887: LD_INT 1
27889: PPUSH
27890: LD_VAR 0 1
27894: PPUSH
27895: CALL_OW 12
27899: ARRAY
27900: PPUSH
27901: LD_INT 1
27903: PPUSH
27904: CALL_OW 234
// end ;
27908: PPOPN 1
27910: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27911: LD_EXP 54
27915: PUSH
27916: LD_EXP 96
27920: AND
27921: IFFALSE 28062
27923: GO 27925
27925: DISABLE
27926: LD_INT 0
27928: PPUSH
27929: PPUSH
27930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27931: LD_ADDR_VAR 0 3
27935: PUSH
27936: LD_INT 22
27938: PUSH
27939: LD_OWVAR 2
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 25
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PPUSH
27962: CALL_OW 69
27966: ST_TO_ADDR
// if not tmp then
27967: LD_VAR 0 3
27971: NOT
27972: IFFALSE 27976
// exit ;
27974: GO 28062
// un := tmp [ rand ( 1 , tmp ) ] ;
27976: LD_ADDR_VAR 0 2
27980: PUSH
27981: LD_VAR 0 3
27985: PUSH
27986: LD_INT 1
27988: PPUSH
27989: LD_VAR 0 3
27993: PPUSH
27994: CALL_OW 12
27998: ARRAY
27999: ST_TO_ADDR
// if Crawls ( un ) then
28000: LD_VAR 0 2
28004: PPUSH
28005: CALL_OW 318
28009: IFFALSE 28020
// ComWalk ( un ) ;
28011: LD_VAR 0 2
28015: PPUSH
28016: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28020: LD_VAR 0 2
28024: PPUSH
28025: LD_INT 9
28027: PPUSH
28028: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28032: LD_INT 28
28034: PPUSH
28035: LD_OWVAR 2
28039: PPUSH
28040: LD_INT 2
28042: PPUSH
28043: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28047: LD_INT 29
28049: PPUSH
28050: LD_OWVAR 2
28054: PPUSH
28055: LD_INT 2
28057: PPUSH
28058: CALL_OW 322
// end ;
28062: PPOPN 3
28064: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28065: LD_EXP 54
28069: PUSH
28070: LD_EXP 97
28074: AND
28075: IFFALSE 28186
28077: GO 28079
28079: DISABLE
28080: LD_INT 0
28082: PPUSH
28083: PPUSH
28084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_OWVAR 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 25
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 69
28120: ST_TO_ADDR
// if not tmp then
28121: LD_VAR 0 3
28125: NOT
28126: IFFALSE 28130
// exit ;
28128: GO 28186
// un := tmp [ rand ( 1 , tmp ) ] ;
28130: LD_ADDR_VAR 0 2
28134: PUSH
28135: LD_VAR 0 3
28139: PUSH
28140: LD_INT 1
28142: PPUSH
28143: LD_VAR 0 3
28147: PPUSH
28148: CALL_OW 12
28152: ARRAY
28153: ST_TO_ADDR
// if Crawls ( un ) then
28154: LD_VAR 0 2
28158: PPUSH
28159: CALL_OW 318
28163: IFFALSE 28174
// ComWalk ( un ) ;
28165: LD_VAR 0 2
28169: PPUSH
28170: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28174: LD_VAR 0 2
28178: PPUSH
28179: LD_INT 8
28181: PPUSH
28182: CALL_OW 336
// end ;
28186: PPOPN 3
28188: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28189: LD_EXP 54
28193: PUSH
28194: LD_EXP 98
28198: AND
28199: IFFALSE 28343
28201: GO 28203
28203: DISABLE
28204: LD_INT 0
28206: PPUSH
28207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28208: LD_ADDR_VAR 0 2
28212: PUSH
28213: LD_INT 22
28215: PUSH
28216: LD_OWVAR 2
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 21
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: PUSH
28238: LD_INT 34
28240: PUSH
28241: LD_INT 12
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 34
28250: PUSH
28251: LD_INT 51
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 34
28260: PUSH
28261: LD_INT 32
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: PPUSH
28279: CALL_OW 69
28283: ST_TO_ADDR
// if not tmp then
28284: LD_VAR 0 2
28288: NOT
28289: IFFALSE 28293
// exit ;
28291: GO 28343
// for i in tmp do
28293: LD_ADDR_VAR 0 1
28297: PUSH
28298: LD_VAR 0 2
28302: PUSH
28303: FOR_IN
28304: IFFALSE 28341
// if GetCargo ( i , mat_artifact ) = 0 then
28306: LD_VAR 0 1
28310: PPUSH
28311: LD_INT 4
28313: PPUSH
28314: CALL_OW 289
28318: PUSH
28319: LD_INT 0
28321: EQUAL
28322: IFFALSE 28339
// SetCargo ( i , mat_siberit , 100 ) ;
28324: LD_VAR 0 1
28328: PPUSH
28329: LD_INT 3
28331: PPUSH
28332: LD_INT 100
28334: PPUSH
28335: CALL_OW 290
28339: GO 28303
28341: POP
28342: POP
// end ;
28343: PPOPN 2
28345: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28346: LD_EXP 54
28350: PUSH
28351: LD_EXP 99
28355: AND
28356: IFFALSE 28539
28358: GO 28360
28360: DISABLE
28361: LD_INT 0
28363: PPUSH
28364: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28365: LD_ADDR_VAR 0 2
28369: PUSH
28370: LD_INT 22
28372: PUSH
28373: LD_OWVAR 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PPUSH
28382: CALL_OW 69
28386: ST_TO_ADDR
// if not tmp then
28387: LD_VAR 0 2
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28539
// for i := 1 to 2 do
28396: LD_ADDR_VAR 0 1
28400: PUSH
28401: DOUBLE
28402: LD_INT 1
28404: DEC
28405: ST_TO_ADDR
28406: LD_INT 2
28408: PUSH
28409: FOR_TO
28410: IFFALSE 28537
// begin uc_side := your_side ;
28412: LD_ADDR_OWVAR 20
28416: PUSH
28417: LD_OWVAR 2
28421: ST_TO_ADDR
// uc_nation := nation_american ;
28422: LD_ADDR_OWVAR 21
28426: PUSH
28427: LD_INT 1
28429: ST_TO_ADDR
// vc_chassis := us_morphling ;
28430: LD_ADDR_OWVAR 37
28434: PUSH
28435: LD_INT 5
28437: ST_TO_ADDR
// vc_engine := engine_siberite ;
28438: LD_ADDR_OWVAR 39
28442: PUSH
28443: LD_INT 3
28445: ST_TO_ADDR
// vc_control := control_computer ;
28446: LD_ADDR_OWVAR 38
28450: PUSH
28451: LD_INT 3
28453: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28454: LD_ADDR_OWVAR 40
28458: PUSH
28459: LD_INT 10
28461: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28462: LD_VAR 0 2
28466: PUSH
28467: LD_INT 1
28469: ARRAY
28470: PPUSH
28471: CALL_OW 310
28475: NOT
28476: IFFALSE 28523
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28478: CALL_OW 45
28482: PPUSH
28483: LD_VAR 0 2
28487: PUSH
28488: LD_INT 1
28490: ARRAY
28491: PPUSH
28492: CALL_OW 250
28496: PPUSH
28497: LD_VAR 0 2
28501: PUSH
28502: LD_INT 1
28504: ARRAY
28505: PPUSH
28506: CALL_OW 251
28510: PPUSH
28511: LD_INT 12
28513: PPUSH
28514: LD_INT 1
28516: PPUSH
28517: CALL_OW 50
28521: GO 28535
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28523: CALL_OW 45
28527: PPUSH
28528: LD_INT 1
28530: PPUSH
28531: CALL_OW 51
// end ;
28535: GO 28409
28537: POP
28538: POP
// end ;
28539: PPOPN 2
28541: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28542: LD_EXP 54
28546: PUSH
28547: LD_EXP 100
28551: AND
28552: IFFALSE 28774
28554: GO 28556
28556: DISABLE
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28565: LD_ADDR_VAR 0 6
28569: PUSH
28570: LD_INT 22
28572: PUSH
28573: LD_OWVAR 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 21
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 3
28594: PUSH
28595: LD_INT 23
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: LIST
28613: PPUSH
28614: CALL_OW 69
28618: ST_TO_ADDR
// if not tmp then
28619: LD_VAR 0 6
28623: NOT
28624: IFFALSE 28628
// exit ;
28626: GO 28774
// s1 := rand ( 1 , 4 ) ;
28628: LD_ADDR_VAR 0 2
28632: PUSH
28633: LD_INT 1
28635: PPUSH
28636: LD_INT 4
28638: PPUSH
28639: CALL_OW 12
28643: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28644: LD_ADDR_VAR 0 4
28648: PUSH
28649: LD_VAR 0 6
28653: PUSH
28654: LD_INT 1
28656: ARRAY
28657: PPUSH
28658: LD_VAR 0 2
28662: PPUSH
28663: CALL_OW 259
28667: ST_TO_ADDR
// if s1 = 1 then
28668: LD_VAR 0 2
28672: PUSH
28673: LD_INT 1
28675: EQUAL
28676: IFFALSE 28696
// s2 := rand ( 2 , 4 ) else
28678: LD_ADDR_VAR 0 3
28682: PUSH
28683: LD_INT 2
28685: PPUSH
28686: LD_INT 4
28688: PPUSH
28689: CALL_OW 12
28693: ST_TO_ADDR
28694: GO 28704
// s2 := 1 ;
28696: LD_ADDR_VAR 0 3
28700: PUSH
28701: LD_INT 1
28703: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28704: LD_ADDR_VAR 0 5
28708: PUSH
28709: LD_VAR 0 6
28713: PUSH
28714: LD_INT 1
28716: ARRAY
28717: PPUSH
28718: LD_VAR 0 3
28722: PPUSH
28723: CALL_OW 259
28727: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28728: LD_VAR 0 6
28732: PUSH
28733: LD_INT 1
28735: ARRAY
28736: PPUSH
28737: LD_VAR 0 2
28741: PPUSH
28742: LD_VAR 0 5
28746: PPUSH
28747: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28751: LD_VAR 0 6
28755: PUSH
28756: LD_INT 1
28758: ARRAY
28759: PPUSH
28760: LD_VAR 0 3
28764: PPUSH
28765: LD_VAR 0 4
28769: PPUSH
28770: CALL_OW 237
// end ;
28774: PPOPN 6
28776: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28777: LD_EXP 54
28781: PUSH
28782: LD_EXP 101
28786: AND
28787: IFFALSE 28866
28789: GO 28791
28791: DISABLE
28792: LD_INT 0
28794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28795: LD_ADDR_VAR 0 1
28799: PUSH
28800: LD_INT 22
28802: PUSH
28803: LD_OWVAR 2
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 30
28814: PUSH
28815: LD_INT 3
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PPUSH
28826: CALL_OW 69
28830: ST_TO_ADDR
// if not tmp then
28831: LD_VAR 0 1
28835: NOT
28836: IFFALSE 28840
// exit ;
28838: GO 28866
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28840: LD_VAR 0 1
28844: PUSH
28845: LD_INT 1
28847: PPUSH
28848: LD_VAR 0 1
28852: PPUSH
28853: CALL_OW 12
28857: ARRAY
28858: PPUSH
28859: LD_INT 1
28861: PPUSH
28862: CALL_OW 234
// end ;
28866: PPOPN 1
28868: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28869: LD_EXP 54
28873: PUSH
28874: LD_EXP 102
28878: AND
28879: IFFALSE 28991
28881: GO 28883
28883: DISABLE
28884: LD_INT 0
28886: PPUSH
28887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28888: LD_ADDR_VAR 0 2
28892: PUSH
28893: LD_INT 22
28895: PUSH
28896: LD_OWVAR 2
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 30
28910: PUSH
28911: LD_INT 27
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 30
28920: PUSH
28921: LD_INT 26
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 30
28930: PUSH
28931: LD_INT 28
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PPUSH
28948: CALL_OW 69
28952: ST_TO_ADDR
// if not tmp then
28953: LD_VAR 0 2
28957: NOT
28958: IFFALSE 28962
// exit ;
28960: GO 28991
// for i in tmp do
28962: LD_ADDR_VAR 0 1
28966: PUSH
28967: LD_VAR 0 2
28971: PUSH
28972: FOR_IN
28973: IFFALSE 28989
// SetLives ( i , 1 ) ;
28975: LD_VAR 0 1
28979: PPUSH
28980: LD_INT 1
28982: PPUSH
28983: CALL_OW 234
28987: GO 28972
28989: POP
28990: POP
// end ;
28991: PPOPN 2
28993: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28994: LD_EXP 54
28998: PUSH
28999: LD_EXP 103
29003: AND
29004: IFFALSE 29291
29006: GO 29008
29008: DISABLE
29009: LD_INT 0
29011: PPUSH
29012: PPUSH
29013: PPUSH
// begin i := rand ( 1 , 7 ) ;
29014: LD_ADDR_VAR 0 1
29018: PUSH
29019: LD_INT 1
29021: PPUSH
29022: LD_INT 7
29024: PPUSH
29025: CALL_OW 12
29029: ST_TO_ADDR
// case i of 1 :
29030: LD_VAR 0 1
29034: PUSH
29035: LD_INT 1
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 29053
29043: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29044: LD_STRING earthquake(getX(game), 0, 32)
29046: PPUSH
29047: CALL_OW 559
29051: GO 29291
29053: LD_INT 2
29055: DOUBLE
29056: EQUAL
29057: IFTRUE 29061
29059: GO 29075
29061: POP
// begin ToLua ( displayStucuk(); ) ;
29062: LD_STRING displayStucuk();
29064: PPUSH
29065: CALL_OW 559
// ResetFog ;
29069: CALL_OW 335
// end ; 3 :
29073: GO 29291
29075: LD_INT 3
29077: DOUBLE
29078: EQUAL
29079: IFTRUE 29083
29081: GO 29187
29083: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29084: LD_ADDR_VAR 0 2
29088: PUSH
29089: LD_INT 22
29091: PUSH
29092: LD_OWVAR 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 25
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PPUSH
29115: CALL_OW 69
29119: ST_TO_ADDR
// if not tmp then
29120: LD_VAR 0 2
29124: NOT
29125: IFFALSE 29129
// exit ;
29127: GO 29291
// un := tmp [ rand ( 1 , tmp ) ] ;
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_VAR 0 2
29138: PUSH
29139: LD_INT 1
29141: PPUSH
29142: LD_VAR 0 2
29146: PPUSH
29147: CALL_OW 12
29151: ARRAY
29152: ST_TO_ADDR
// if Crawls ( un ) then
29153: LD_VAR 0 3
29157: PPUSH
29158: CALL_OW 318
29162: IFFALSE 29173
// ComWalk ( un ) ;
29164: LD_VAR 0 3
29168: PPUSH
29169: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29173: LD_VAR 0 3
29177: PPUSH
29178: LD_INT 8
29180: PPUSH
29181: CALL_OW 336
// end ; 4 :
29185: GO 29291
29187: LD_INT 4
29189: DOUBLE
29190: EQUAL
29191: IFTRUE 29195
29193: GO 29269
29195: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29196: LD_ADDR_VAR 0 2
29200: PUSH
29201: LD_INT 22
29203: PUSH
29204: LD_OWVAR 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 30
29215: PUSH
29216: LD_INT 29
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PPUSH
29227: CALL_OW 69
29231: ST_TO_ADDR
// if not tmp then
29232: LD_VAR 0 2
29236: NOT
29237: IFFALSE 29241
// exit ;
29239: GO 29291
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29241: LD_VAR 0 2
29245: PUSH
29246: LD_INT 1
29248: ARRAY
29249: PPUSH
29250: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29254: LD_VAR 0 2
29258: PUSH
29259: LD_INT 1
29261: ARRAY
29262: PPUSH
29263: CALL_OW 65
// end ; 5 .. 7 :
29267: GO 29291
29269: LD_INT 5
29271: DOUBLE
29272: GREATEREQUAL
29273: IFFALSE 29281
29275: LD_INT 7
29277: DOUBLE
29278: LESSEQUAL
29279: IFTRUE 29283
29281: GO 29290
29283: POP
// StreamSibBomb ; end ;
29284: CALL 25528 0 0
29288: GO 29291
29290: POP
// end ;
29291: PPOPN 3
29293: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29294: LD_EXP 54
29298: PUSH
29299: LD_EXP 104
29303: AND
29304: IFFALSE 29460
29306: GO 29308
29308: DISABLE
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
29313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29314: LD_ADDR_VAR 0 2
29318: PUSH
29319: LD_INT 81
29321: PUSH
29322: LD_OWVAR 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: LD_INT 21
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 21
29346: PUSH
29347: LD_INT 2
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: LIST
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 69
29367: ST_TO_ADDR
// if not tmp then
29368: LD_VAR 0 2
29372: NOT
29373: IFFALSE 29377
// exit ;
29375: GO 29460
// p := 0 ;
29377: LD_ADDR_VAR 0 3
29381: PUSH
29382: LD_INT 0
29384: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29385: LD_INT 35
29387: PPUSH
29388: CALL_OW 67
// p := p + 1 ;
29392: LD_ADDR_VAR 0 3
29396: PUSH
29397: LD_VAR 0 3
29401: PUSH
29402: LD_INT 1
29404: PLUS
29405: ST_TO_ADDR
// for i in tmp do
29406: LD_ADDR_VAR 0 1
29410: PUSH
29411: LD_VAR 0 2
29415: PUSH
29416: FOR_IN
29417: IFFALSE 29448
// if GetLives ( i ) < 1000 then
29419: LD_VAR 0 1
29423: PPUSH
29424: CALL_OW 256
29428: PUSH
29429: LD_INT 1000
29431: LESS
29432: IFFALSE 29446
// SetLives ( i , 1000 ) ;
29434: LD_VAR 0 1
29438: PPUSH
29439: LD_INT 1000
29441: PPUSH
29442: CALL_OW 234
29446: GO 29416
29448: POP
29449: POP
// until p > 20 ;
29450: LD_VAR 0 3
29454: PUSH
29455: LD_INT 20
29457: GREATER
29458: IFFALSE 29385
// end ;
29460: PPOPN 3
29462: END
// every 0 0$1 trigger StreamModeActive and sTime do
29463: LD_EXP 54
29467: PUSH
29468: LD_EXP 105
29472: AND
29473: IFFALSE 29508
29475: GO 29477
29477: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29478: LD_INT 28
29480: PPUSH
29481: LD_OWVAR 2
29485: PPUSH
29486: LD_INT 2
29488: PPUSH
29489: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29493: LD_INT 30
29495: PPUSH
29496: LD_OWVAR 2
29500: PPUSH
29501: LD_INT 2
29503: PPUSH
29504: CALL_OW 322
// end ;
29508: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29509: LD_EXP 54
29513: PUSH
29514: LD_EXP 106
29518: AND
29519: IFFALSE 29640
29521: GO 29523
29523: DISABLE
29524: LD_INT 0
29526: PPUSH
29527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29528: LD_ADDR_VAR 0 2
29532: PUSH
29533: LD_INT 22
29535: PUSH
29536: LD_OWVAR 2
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 21
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: LD_INT 23
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: PPUSH
29577: CALL_OW 69
29581: ST_TO_ADDR
// if not tmp then
29582: LD_VAR 0 2
29586: NOT
29587: IFFALSE 29591
// exit ;
29589: GO 29640
// for i in tmp do
29591: LD_ADDR_VAR 0 1
29595: PUSH
29596: LD_VAR 0 2
29600: PUSH
29601: FOR_IN
29602: IFFALSE 29638
// begin if Crawls ( i ) then
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 318
29613: IFFALSE 29624
// ComWalk ( i ) ;
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 138
// SetClass ( i , 2 ) ;
29624: LD_VAR 0 1
29628: PPUSH
29629: LD_INT 2
29631: PPUSH
29632: CALL_OW 336
// end ;
29636: GO 29601
29638: POP
29639: POP
// end ;
29640: PPOPN 2
29642: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29643: LD_EXP 54
29647: PUSH
29648: LD_EXP 107
29652: AND
29653: IFFALSE 29941
29655: GO 29657
29657: DISABLE
29658: LD_INT 0
29660: PPUSH
29661: PPUSH
29662: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29663: LD_OWVAR 2
29667: PPUSH
29668: LD_INT 9
29670: PPUSH
29671: LD_INT 1
29673: PPUSH
29674: LD_INT 1
29676: PPUSH
29677: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29681: LD_INT 9
29683: PPUSH
29684: LD_OWVAR 2
29688: PPUSH
29689: CALL_OW 343
// uc_side := 9 ;
29693: LD_ADDR_OWVAR 20
29697: PUSH
29698: LD_INT 9
29700: ST_TO_ADDR
// uc_nation := 2 ;
29701: LD_ADDR_OWVAR 21
29705: PUSH
29706: LD_INT 2
29708: ST_TO_ADDR
// hc_name := Dark Warrior ;
29709: LD_ADDR_OWVAR 26
29713: PUSH
29714: LD_STRING Dark Warrior
29716: ST_TO_ADDR
// hc_gallery :=  ;
29717: LD_ADDR_OWVAR 33
29721: PUSH
29722: LD_STRING 
29724: ST_TO_ADDR
// hc_noskilllimit := true ;
29725: LD_ADDR_OWVAR 76
29729: PUSH
29730: LD_INT 1
29732: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29733: LD_ADDR_OWVAR 31
29737: PUSH
29738: LD_INT 30
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: LD_INT 30
29746: PUSH
29747: LD_INT 30
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: ST_TO_ADDR
// un := CreateHuman ;
29756: LD_ADDR_VAR 0 3
29760: PUSH
29761: CALL_OW 44
29765: ST_TO_ADDR
// hc_noskilllimit := false ;
29766: LD_ADDR_OWVAR 76
29770: PUSH
29771: LD_INT 0
29773: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29774: LD_VAR 0 3
29778: PPUSH
29779: LD_INT 1
29781: PPUSH
29782: CALL_OW 51
// ToLua ( playRanger() ) ;
29786: LD_STRING playRanger()
29788: PPUSH
29789: CALL_OW 559
// p := 0 ;
29793: LD_ADDR_VAR 0 2
29797: PUSH
29798: LD_INT 0
29800: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29801: LD_INT 35
29803: PPUSH
29804: CALL_OW 67
// p := p + 1 ;
29808: LD_ADDR_VAR 0 2
29812: PUSH
29813: LD_VAR 0 2
29817: PUSH
29818: LD_INT 1
29820: PLUS
29821: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29822: LD_VAR 0 3
29826: PPUSH
29827: CALL_OW 256
29831: PUSH
29832: LD_INT 1000
29834: LESS
29835: IFFALSE 29849
// SetLives ( un , 1000 ) ;
29837: LD_VAR 0 3
29841: PPUSH
29842: LD_INT 1000
29844: PPUSH
29845: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29849: LD_VAR 0 3
29853: PPUSH
29854: LD_INT 81
29856: PUSH
29857: LD_OWVAR 2
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 91
29868: PUSH
29869: LD_VAR 0 3
29873: PUSH
29874: LD_INT 30
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PPUSH
29886: CALL_OW 69
29890: PPUSH
29891: LD_VAR 0 3
29895: PPUSH
29896: CALL_OW 74
29900: PPUSH
29901: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29905: LD_VAR 0 2
29909: PUSH
29910: LD_INT 80
29912: GREATER
29913: PUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: CALL_OW 301
29923: OR
29924: IFFALSE 29801
// if un then
29926: LD_VAR 0 3
29930: IFFALSE 29941
// RemoveUnit ( un ) ;
29932: LD_VAR 0 3
29936: PPUSH
29937: CALL_OW 64
// end ;
29941: PPOPN 3
29943: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29944: LD_EXP 108
29948: IFFALSE 30064
29950: GO 29952
29952: DISABLE
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29958: LD_ADDR_VAR 0 2
29962: PUSH
29963: LD_INT 81
29965: PUSH
29966: LD_OWVAR 2
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 21
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PPUSH
29989: CALL_OW 69
29993: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29994: LD_STRING playComputer()
29996: PPUSH
29997: CALL_OW 559
// if not tmp then
30001: LD_VAR 0 2
30005: NOT
30006: IFFALSE 30010
// exit ;
30008: GO 30064
// for i in tmp do
30010: LD_ADDR_VAR 0 1
30014: PUSH
30015: LD_VAR 0 2
30019: PUSH
30020: FOR_IN
30021: IFFALSE 30062
// for j := 1 to 4 do
30023: LD_ADDR_VAR 0 3
30027: PUSH
30028: DOUBLE
30029: LD_INT 1
30031: DEC
30032: ST_TO_ADDR
30033: LD_INT 4
30035: PUSH
30036: FOR_TO
30037: IFFALSE 30058
// SetSkill ( i , j , 10 ) ;
30039: LD_VAR 0 1
30043: PPUSH
30044: LD_VAR 0 3
30048: PPUSH
30049: LD_INT 10
30051: PPUSH
30052: CALL_OW 237
30056: GO 30036
30058: POP
30059: POP
30060: GO 30020
30062: POP
30063: POP
// end ;
30064: PPOPN 3
30066: END
// every 0 0$1 trigger s30 do var i , tmp ;
30067: LD_EXP 109
30071: IFFALSE 30140
30073: GO 30075
30075: DISABLE
30076: LD_INT 0
30078: PPUSH
30079: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30080: LD_ADDR_VAR 0 2
30084: PUSH
30085: LD_INT 22
30087: PUSH
30088: LD_OWVAR 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PPUSH
30097: CALL_OW 69
30101: ST_TO_ADDR
// if not tmp then
30102: LD_VAR 0 2
30106: NOT
30107: IFFALSE 30111
// exit ;
30109: GO 30140
// for i in tmp do
30111: LD_ADDR_VAR 0 1
30115: PUSH
30116: LD_VAR 0 2
30120: PUSH
30121: FOR_IN
30122: IFFALSE 30138
// SetLives ( i , 300 ) ;
30124: LD_VAR 0 1
30128: PPUSH
30129: LD_INT 300
30131: PPUSH
30132: CALL_OW 234
30136: GO 30121
30138: POP
30139: POP
// end ;
30140: PPOPN 2
30142: END
// every 0 0$1 trigger s60 do var i , tmp ;
30143: LD_EXP 110
30147: IFFALSE 30216
30149: GO 30151
30151: DISABLE
30152: LD_INT 0
30154: PPUSH
30155: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30156: LD_ADDR_VAR 0 2
30160: PUSH
30161: LD_INT 22
30163: PUSH
30164: LD_OWVAR 2
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PPUSH
30173: CALL_OW 69
30177: ST_TO_ADDR
// if not tmp then
30178: LD_VAR 0 2
30182: NOT
30183: IFFALSE 30187
// exit ;
30185: GO 30216
// for i in tmp do
30187: LD_ADDR_VAR 0 1
30191: PUSH
30192: LD_VAR 0 2
30196: PUSH
30197: FOR_IN
30198: IFFALSE 30214
// SetLives ( i , 600 ) ;
30200: LD_VAR 0 1
30204: PPUSH
30205: LD_INT 600
30207: PPUSH
30208: CALL_OW 234
30212: GO 30197
30214: POP
30215: POP
// end ;
30216: PPOPN 2
30218: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30219: LD_INT 0
30221: PPUSH
// case cmd of 301 :
30222: LD_VAR 0 1
30226: PUSH
30227: LD_INT 301
30229: DOUBLE
30230: EQUAL
30231: IFTRUE 30235
30233: GO 30267
30235: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30236: LD_VAR 0 6
30240: PPUSH
30241: LD_VAR 0 7
30245: PPUSH
30246: LD_VAR 0 8
30250: PPUSH
30251: LD_VAR 0 4
30255: PPUSH
30256: LD_VAR 0 5
30260: PPUSH
30261: CALL 31476 0 5
30265: GO 30388
30267: LD_INT 302
30269: DOUBLE
30270: EQUAL
30271: IFTRUE 30275
30273: GO 30312
30275: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30276: LD_VAR 0 6
30280: PPUSH
30281: LD_VAR 0 7
30285: PPUSH
30286: LD_VAR 0 8
30290: PPUSH
30291: LD_VAR 0 9
30295: PPUSH
30296: LD_VAR 0 4
30300: PPUSH
30301: LD_VAR 0 5
30305: PPUSH
30306: CALL 31567 0 6
30310: GO 30388
30312: LD_INT 303
30314: DOUBLE
30315: EQUAL
30316: IFTRUE 30320
30318: GO 30357
30320: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30321: LD_VAR 0 6
30325: PPUSH
30326: LD_VAR 0 7
30330: PPUSH
30331: LD_VAR 0 8
30335: PPUSH
30336: LD_VAR 0 9
30340: PPUSH
30341: LD_VAR 0 4
30345: PPUSH
30346: LD_VAR 0 5
30350: PPUSH
30351: CALL 30393 0 6
30355: GO 30388
30357: LD_INT 304
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30387
30365: POP
// hHackTeleport ( unit , x , y ) ; end ;
30366: LD_VAR 0 2
30370: PPUSH
30371: LD_VAR 0 4
30375: PPUSH
30376: LD_VAR 0 5
30380: PPUSH
30381: CALL 32160 0 3
30385: GO 30388
30387: POP
// end ;
30388: LD_VAR 0 12
30392: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30397: LD_VAR 0 1
30401: PUSH
30402: LD_INT 1
30404: LESS
30405: PUSH
30406: LD_VAR 0 1
30410: PUSH
30411: LD_INT 3
30413: GREATER
30414: OR
30415: PUSH
30416: LD_VAR 0 5
30420: PPUSH
30421: LD_VAR 0 6
30425: PPUSH
30426: CALL_OW 428
30430: OR
30431: IFFALSE 30435
// exit ;
30433: GO 31163
// uc_side := your_side ;
30435: LD_ADDR_OWVAR 20
30439: PUSH
30440: LD_OWVAR 2
30444: ST_TO_ADDR
// uc_nation := nation ;
30445: LD_ADDR_OWVAR 21
30449: PUSH
30450: LD_VAR 0 1
30454: ST_TO_ADDR
// bc_level = 1 ;
30455: LD_ADDR_OWVAR 43
30459: PUSH
30460: LD_INT 1
30462: ST_TO_ADDR
// case btype of 1 :
30463: LD_VAR 0 2
30467: PUSH
30468: LD_INT 1
30470: DOUBLE
30471: EQUAL
30472: IFTRUE 30476
30474: GO 30487
30476: POP
// bc_type := b_depot ; 2 :
30477: LD_ADDR_OWVAR 42
30481: PUSH
30482: LD_INT 0
30484: ST_TO_ADDR
30485: GO 31107
30487: LD_INT 2
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30506
30495: POP
// bc_type := b_warehouse ; 3 :
30496: LD_ADDR_OWVAR 42
30500: PUSH
30501: LD_INT 1
30503: ST_TO_ADDR
30504: GO 31107
30506: LD_INT 3
30508: DOUBLE
30509: EQUAL
30510: IFTRUE 30514
30512: GO 30525
30514: POP
// bc_type := b_lab ; 4 .. 9 :
30515: LD_ADDR_OWVAR 42
30519: PUSH
30520: LD_INT 6
30522: ST_TO_ADDR
30523: GO 31107
30525: LD_INT 4
30527: DOUBLE
30528: GREATEREQUAL
30529: IFFALSE 30537
30531: LD_INT 9
30533: DOUBLE
30534: LESSEQUAL
30535: IFTRUE 30539
30537: GO 30599
30539: POP
// begin bc_type := b_lab_half ;
30540: LD_ADDR_OWVAR 42
30544: PUSH
30545: LD_INT 7
30547: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30548: LD_ADDR_OWVAR 44
30552: PUSH
30553: LD_INT 10
30555: PUSH
30556: LD_INT 11
30558: PUSH
30559: LD_INT 12
30561: PUSH
30562: LD_INT 15
30564: PUSH
30565: LD_INT 14
30567: PUSH
30568: LD_INT 13
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: PUSH
30579: LD_VAR 0 2
30583: PUSH
30584: LD_INT 3
30586: MINUS
30587: ARRAY
30588: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30589: LD_ADDR_OWVAR 45
30593: PUSH
30594: LD_INT 9
30596: ST_TO_ADDR
// end ; 10 .. 13 :
30597: GO 31107
30599: LD_INT 10
30601: DOUBLE
30602: GREATEREQUAL
30603: IFFALSE 30611
30605: LD_INT 13
30607: DOUBLE
30608: LESSEQUAL
30609: IFTRUE 30613
30611: GO 30690
30613: POP
// begin bc_type := b_lab_full ;
30614: LD_ADDR_OWVAR 42
30618: PUSH
30619: LD_INT 8
30621: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30622: LD_ADDR_OWVAR 44
30626: PUSH
30627: LD_INT 10
30629: PUSH
30630: LD_INT 12
30632: PUSH
30633: LD_INT 14
30635: PUSH
30636: LD_INT 13
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: PUSH
30645: LD_VAR 0 2
30649: PUSH
30650: LD_INT 9
30652: MINUS
30653: ARRAY
30654: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30655: LD_ADDR_OWVAR 45
30659: PUSH
30660: LD_INT 11
30662: PUSH
30663: LD_INT 15
30665: PUSH
30666: LD_INT 12
30668: PUSH
30669: LD_INT 15
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_INT 9
30685: MINUS
30686: ARRAY
30687: ST_TO_ADDR
// end ; 14 :
30688: GO 31107
30690: LD_INT 14
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30709
30698: POP
// bc_type := b_workshop ; 15 :
30699: LD_ADDR_OWVAR 42
30703: PUSH
30704: LD_INT 2
30706: ST_TO_ADDR
30707: GO 31107
30709: LD_INT 15
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30728
30717: POP
// bc_type := b_factory ; 16 :
30718: LD_ADDR_OWVAR 42
30722: PUSH
30723: LD_INT 3
30725: ST_TO_ADDR
30726: GO 31107
30728: LD_INT 16
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30747
30736: POP
// bc_type := b_ext_gun ; 17 :
30737: LD_ADDR_OWVAR 42
30741: PUSH
30742: LD_INT 17
30744: ST_TO_ADDR
30745: GO 31107
30747: LD_INT 17
30749: DOUBLE
30750: EQUAL
30751: IFTRUE 30755
30753: GO 30783
30755: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30756: LD_ADDR_OWVAR 42
30760: PUSH
30761: LD_INT 19
30763: PUSH
30764: LD_INT 23
30766: PUSH
30767: LD_INT 19
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: PUSH
30775: LD_VAR 0 1
30779: ARRAY
30780: ST_TO_ADDR
30781: GO 31107
30783: LD_INT 18
30785: DOUBLE
30786: EQUAL
30787: IFTRUE 30791
30789: GO 30802
30791: POP
// bc_type := b_ext_radar ; 19 :
30792: LD_ADDR_OWVAR 42
30796: PUSH
30797: LD_INT 20
30799: ST_TO_ADDR
30800: GO 31107
30802: LD_INT 19
30804: DOUBLE
30805: EQUAL
30806: IFTRUE 30810
30808: GO 30821
30810: POP
// bc_type := b_ext_radio ; 20 :
30811: LD_ADDR_OWVAR 42
30815: PUSH
30816: LD_INT 22
30818: ST_TO_ADDR
30819: GO 31107
30821: LD_INT 20
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30840
30829: POP
// bc_type := b_ext_siberium ; 21 :
30830: LD_ADDR_OWVAR 42
30834: PUSH
30835: LD_INT 21
30837: ST_TO_ADDR
30838: GO 31107
30840: LD_INT 21
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30859
30848: POP
// bc_type := b_ext_computer ; 22 :
30849: LD_ADDR_OWVAR 42
30853: PUSH
30854: LD_INT 24
30856: ST_TO_ADDR
30857: GO 31107
30859: LD_INT 22
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30878
30867: POP
// bc_type := b_ext_track ; 23 :
30868: LD_ADDR_OWVAR 42
30872: PUSH
30873: LD_INT 16
30875: ST_TO_ADDR
30876: GO 31107
30878: LD_INT 23
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 30897
30886: POP
// bc_type := b_ext_laser ; 24 :
30887: LD_ADDR_OWVAR 42
30891: PUSH
30892: LD_INT 25
30894: ST_TO_ADDR
30895: GO 31107
30897: LD_INT 24
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30905
30903: GO 30916
30905: POP
// bc_type := b_control_tower ; 25 :
30906: LD_ADDR_OWVAR 42
30910: PUSH
30911: LD_INT 36
30913: ST_TO_ADDR
30914: GO 31107
30916: LD_INT 25
30918: DOUBLE
30919: EQUAL
30920: IFTRUE 30924
30922: GO 30935
30924: POP
// bc_type := b_breastwork ; 26 :
30925: LD_ADDR_OWVAR 42
30929: PUSH
30930: LD_INT 31
30932: ST_TO_ADDR
30933: GO 31107
30935: LD_INT 26
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30954
30943: POP
// bc_type := b_bunker ; 27 :
30944: LD_ADDR_OWVAR 42
30948: PUSH
30949: LD_INT 32
30951: ST_TO_ADDR
30952: GO 31107
30954: LD_INT 27
30956: DOUBLE
30957: EQUAL
30958: IFTRUE 30962
30960: GO 30973
30962: POP
// bc_type := b_turret ; 28 :
30963: LD_ADDR_OWVAR 42
30967: PUSH
30968: LD_INT 33
30970: ST_TO_ADDR
30971: GO 31107
30973: LD_INT 28
30975: DOUBLE
30976: EQUAL
30977: IFTRUE 30981
30979: GO 30992
30981: POP
// bc_type := b_armoury ; 29 :
30982: LD_ADDR_OWVAR 42
30986: PUSH
30987: LD_INT 4
30989: ST_TO_ADDR
30990: GO 31107
30992: LD_INT 29
30994: DOUBLE
30995: EQUAL
30996: IFTRUE 31000
30998: GO 31011
31000: POP
// bc_type := b_barracks ; 30 :
31001: LD_ADDR_OWVAR 42
31005: PUSH
31006: LD_INT 5
31008: ST_TO_ADDR
31009: GO 31107
31011: LD_INT 30
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31030
31019: POP
// bc_type := b_solar_power ; 31 :
31020: LD_ADDR_OWVAR 42
31024: PUSH
31025: LD_INT 27
31027: ST_TO_ADDR
31028: GO 31107
31030: LD_INT 31
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31049
31038: POP
// bc_type := b_oil_power ; 32 :
31039: LD_ADDR_OWVAR 42
31043: PUSH
31044: LD_INT 26
31046: ST_TO_ADDR
31047: GO 31107
31049: LD_INT 32
31051: DOUBLE
31052: EQUAL
31053: IFTRUE 31057
31055: GO 31068
31057: POP
// bc_type := b_siberite_power ; 33 :
31058: LD_ADDR_OWVAR 42
31062: PUSH
31063: LD_INT 28
31065: ST_TO_ADDR
31066: GO 31107
31068: LD_INT 33
31070: DOUBLE
31071: EQUAL
31072: IFTRUE 31076
31074: GO 31087
31076: POP
// bc_type := b_oil_mine ; 34 :
31077: LD_ADDR_OWVAR 42
31081: PUSH
31082: LD_INT 29
31084: ST_TO_ADDR
31085: GO 31107
31087: LD_INT 34
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31106
31095: POP
// bc_type := b_siberite_mine ; end ;
31096: LD_ADDR_OWVAR 42
31100: PUSH
31101: LD_INT 30
31103: ST_TO_ADDR
31104: GO 31107
31106: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31107: LD_ADDR_VAR 0 8
31111: PUSH
31112: LD_VAR 0 5
31116: PPUSH
31117: LD_VAR 0 6
31121: PPUSH
31122: LD_VAR 0 3
31126: PPUSH
31127: CALL_OW 47
31131: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31132: LD_OWVAR 42
31136: PUSH
31137: LD_INT 32
31139: PUSH
31140: LD_INT 33
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: IN
31147: IFFALSE 31163
// PlaceWeaponTurret ( b , weapon ) ;
31149: LD_VAR 0 8
31153: PPUSH
31154: LD_VAR 0 4
31158: PPUSH
31159: CALL_OW 431
// end ;
31163: LD_VAR 0 7
31167: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31168: LD_INT 0
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31174: LD_ADDR_VAR 0 4
31178: PUSH
31179: LD_INT 22
31181: PUSH
31182: LD_OWVAR 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: LD_INT 30
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 30
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PPUSH
31223: CALL_OW 69
31227: ST_TO_ADDR
// if not tmp then
31228: LD_VAR 0 4
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31296
// for i in tmp do
31237: LD_ADDR_VAR 0 2
31241: PUSH
31242: LD_VAR 0 4
31246: PUSH
31247: FOR_IN
31248: IFFALSE 31294
// for j = 1 to 3 do
31250: LD_ADDR_VAR 0 3
31254: PUSH
31255: DOUBLE
31256: LD_INT 1
31258: DEC
31259: ST_TO_ADDR
31260: LD_INT 3
31262: PUSH
31263: FOR_TO
31264: IFFALSE 31290
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31266: LD_VAR 0 2
31270: PPUSH
31271: CALL_OW 274
31275: PPUSH
31276: LD_VAR 0 3
31280: PPUSH
31281: LD_INT 99999
31283: PPUSH
31284: CALL_OW 277
31288: GO 31263
31290: POP
31291: POP
31292: GO 31247
31294: POP
31295: POP
// end ;
31296: LD_VAR 0 1
31300: RET
// export function hHackSetLevel10 ; var i , j ; begin
31301: LD_INT 0
31303: PPUSH
31304: PPUSH
31305: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31306: LD_ADDR_VAR 0 2
31310: PUSH
31311: LD_INT 21
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 69
31325: PUSH
31326: FOR_IN
31327: IFFALSE 31379
// if IsSelected ( i ) then
31329: LD_VAR 0 2
31333: PPUSH
31334: CALL_OW 306
31338: IFFALSE 31377
// begin for j := 1 to 4 do
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: DOUBLE
31346: LD_INT 1
31348: DEC
31349: ST_TO_ADDR
31350: LD_INT 4
31352: PUSH
31353: FOR_TO
31354: IFFALSE 31375
// SetSkill ( i , j , 10 ) ;
31356: LD_VAR 0 2
31360: PPUSH
31361: LD_VAR 0 3
31365: PPUSH
31366: LD_INT 10
31368: PPUSH
31369: CALL_OW 237
31373: GO 31353
31375: POP
31376: POP
// end ;
31377: GO 31326
31379: POP
31380: POP
// end ;
31381: LD_VAR 0 1
31385: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31386: LD_INT 0
31388: PPUSH
31389: PPUSH
31390: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31391: LD_ADDR_VAR 0 2
31395: PUSH
31396: LD_INT 22
31398: PUSH
31399: LD_OWVAR 2
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 21
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: PUSH
31427: FOR_IN
31428: IFFALSE 31469
// begin for j := 1 to 4 do
31430: LD_ADDR_VAR 0 3
31434: PUSH
31435: DOUBLE
31436: LD_INT 1
31438: DEC
31439: ST_TO_ADDR
31440: LD_INT 4
31442: PUSH
31443: FOR_TO
31444: IFFALSE 31465
// SetSkill ( i , j , 10 ) ;
31446: LD_VAR 0 2
31450: PPUSH
31451: LD_VAR 0 3
31455: PPUSH
31456: LD_INT 10
31458: PPUSH
31459: CALL_OW 237
31463: GO 31443
31465: POP
31466: POP
// end ;
31467: GO 31427
31469: POP
31470: POP
// end ;
31471: LD_VAR 0 1
31475: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31476: LD_INT 0
31478: PPUSH
// uc_side := your_side ;
31479: LD_ADDR_OWVAR 20
31483: PUSH
31484: LD_OWVAR 2
31488: ST_TO_ADDR
// uc_nation := nation ;
31489: LD_ADDR_OWVAR 21
31493: PUSH
31494: LD_VAR 0 1
31498: ST_TO_ADDR
// InitHc ;
31499: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31503: LD_INT 0
31505: PPUSH
31506: LD_VAR 0 2
31510: PPUSH
31511: LD_VAR 0 3
31515: PPUSH
31516: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31520: LD_VAR 0 4
31524: PPUSH
31525: LD_VAR 0 5
31529: PPUSH
31530: CALL_OW 428
31534: PUSH
31535: LD_INT 0
31537: EQUAL
31538: IFFALSE 31562
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31540: CALL_OW 44
31544: PPUSH
31545: LD_VAR 0 4
31549: PPUSH
31550: LD_VAR 0 5
31554: PPUSH
31555: LD_INT 1
31557: PPUSH
31558: CALL_OW 48
// end ;
31562: LD_VAR 0 6
31566: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31567: LD_INT 0
31569: PPUSH
31570: PPUSH
// uc_side := your_side ;
31571: LD_ADDR_OWVAR 20
31575: PUSH
31576: LD_OWVAR 2
31580: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31581: LD_VAR 0 1
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: LD_INT 3
31594: PUSH
31595: LD_INT 4
31597: PUSH
31598: LD_INT 5
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: IN
31608: IFFALSE 31620
// uc_nation := nation_american else
31610: LD_ADDR_OWVAR 21
31614: PUSH
31615: LD_INT 1
31617: ST_TO_ADDR
31618: GO 31663
// if chassis in [ 11 , 12 , 13 , 14 ] then
31620: LD_VAR 0 1
31624: PUSH
31625: LD_INT 11
31627: PUSH
31628: LD_INT 12
31630: PUSH
31631: LD_INT 13
31633: PUSH
31634: LD_INT 14
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: IN
31643: IFFALSE 31655
// uc_nation := nation_arabian else
31645: LD_ADDR_OWVAR 21
31649: PUSH
31650: LD_INT 2
31652: ST_TO_ADDR
31653: GO 31663
// uc_nation := nation_russian ;
31655: LD_ADDR_OWVAR 21
31659: PUSH
31660: LD_INT 3
31662: ST_TO_ADDR
// vc_chassis := chassis ;
31663: LD_ADDR_OWVAR 37
31667: PUSH
31668: LD_VAR 0 1
31672: ST_TO_ADDR
// vc_engine := engine ;
31673: LD_ADDR_OWVAR 39
31677: PUSH
31678: LD_VAR 0 2
31682: ST_TO_ADDR
// vc_control := control ;
31683: LD_ADDR_OWVAR 38
31687: PUSH
31688: LD_VAR 0 3
31692: ST_TO_ADDR
// vc_weapon := weapon ;
31693: LD_ADDR_OWVAR 40
31697: PUSH
31698: LD_VAR 0 4
31702: ST_TO_ADDR
// un := CreateVehicle ;
31703: LD_ADDR_VAR 0 8
31707: PUSH
31708: CALL_OW 45
31712: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31713: LD_VAR 0 8
31717: PPUSH
31718: LD_INT 0
31720: PPUSH
31721: LD_INT 5
31723: PPUSH
31724: CALL_OW 12
31728: PPUSH
31729: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31733: LD_VAR 0 8
31737: PPUSH
31738: LD_VAR 0 5
31742: PPUSH
31743: LD_VAR 0 6
31747: PPUSH
31748: LD_INT 1
31750: PPUSH
31751: CALL_OW 48
// end ;
31755: LD_VAR 0 7
31759: RET
// export hInvincible ; every 1 do
31760: GO 31762
31762: DISABLE
// hInvincible := [ ] ;
31763: LD_ADDR_EXP 111
31767: PUSH
31768: EMPTY
31769: ST_TO_ADDR
31770: END
// every 10 do var i ;
31771: GO 31773
31773: DISABLE
31774: LD_INT 0
31776: PPUSH
// begin enable ;
31777: ENABLE
// if not hInvincible then
31778: LD_EXP 111
31782: NOT
31783: IFFALSE 31787
// exit ;
31785: GO 31831
// for i in hInvincible do
31787: LD_ADDR_VAR 0 1
31791: PUSH
31792: LD_EXP 111
31796: PUSH
31797: FOR_IN
31798: IFFALSE 31829
// if GetLives ( i ) < 1000 then
31800: LD_VAR 0 1
31804: PPUSH
31805: CALL_OW 256
31809: PUSH
31810: LD_INT 1000
31812: LESS
31813: IFFALSE 31827
// SetLives ( i , 1000 ) ;
31815: LD_VAR 0 1
31819: PPUSH
31820: LD_INT 1000
31822: PPUSH
31823: CALL_OW 234
31827: GO 31797
31829: POP
31830: POP
// end ;
31831: PPOPN 1
31833: END
// export function hHackInvincible ; var i ; begin
31834: LD_INT 0
31836: PPUSH
31837: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31838: LD_ADDR_VAR 0 2
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 21
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 21
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: PPUSH
31871: CALL_OW 69
31875: PUSH
31876: FOR_IN
31877: IFFALSE 31938
// if IsSelected ( i ) then
31879: LD_VAR 0 2
31883: PPUSH
31884: CALL_OW 306
31888: IFFALSE 31936
// begin if i in hInvincible then
31890: LD_VAR 0 2
31894: PUSH
31895: LD_EXP 111
31899: IN
31900: IFFALSE 31920
// hInvincible := hInvincible diff i else
31902: LD_ADDR_EXP 111
31906: PUSH
31907: LD_EXP 111
31911: PUSH
31912: LD_VAR 0 2
31916: DIFF
31917: ST_TO_ADDR
31918: GO 31936
// hInvincible := hInvincible union i ;
31920: LD_ADDR_EXP 111
31924: PUSH
31925: LD_EXP 111
31929: PUSH
31930: LD_VAR 0 2
31934: UNION
31935: ST_TO_ADDR
// end ;
31936: GO 31876
31938: POP
31939: POP
// end ;
31940: LD_VAR 0 1
31944: RET
// export function hHackInvisible ; var i , j ; begin
31945: LD_INT 0
31947: PPUSH
31948: PPUSH
31949: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31950: LD_ADDR_VAR 0 2
31954: PUSH
31955: LD_INT 21
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PPUSH
31965: CALL_OW 69
31969: PUSH
31970: FOR_IN
31971: IFFALSE 31995
// if IsSelected ( i ) then
31973: LD_VAR 0 2
31977: PPUSH
31978: CALL_OW 306
31982: IFFALSE 31993
// ComForceInvisible ( i ) ;
31984: LD_VAR 0 2
31988: PPUSH
31989: CALL_OW 496
31993: GO 31970
31995: POP
31996: POP
// end ;
31997: LD_VAR 0 1
32001: RET
// export function hHackChangeYourSide ; begin
32002: LD_INT 0
32004: PPUSH
// if your_side = 8 then
32005: LD_OWVAR 2
32009: PUSH
32010: LD_INT 8
32012: EQUAL
32013: IFFALSE 32025
// your_side := 0 else
32015: LD_ADDR_OWVAR 2
32019: PUSH
32020: LD_INT 0
32022: ST_TO_ADDR
32023: GO 32039
// your_side := your_side + 1 ;
32025: LD_ADDR_OWVAR 2
32029: PUSH
32030: LD_OWVAR 2
32034: PUSH
32035: LD_INT 1
32037: PLUS
32038: ST_TO_ADDR
// end ;
32039: LD_VAR 0 1
32043: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
32048: PPUSH
// for i in all_units do
32049: LD_ADDR_VAR 0 2
32053: PUSH
32054: LD_OWVAR 3
32058: PUSH
32059: FOR_IN
32060: IFFALSE 32138
// if IsSelected ( i ) then
32062: LD_VAR 0 2
32066: PPUSH
32067: CALL_OW 306
32071: IFFALSE 32136
// begin j := GetSide ( i ) ;
32073: LD_ADDR_VAR 0 3
32077: PUSH
32078: LD_VAR 0 2
32082: PPUSH
32083: CALL_OW 255
32087: ST_TO_ADDR
// if j = 8 then
32088: LD_VAR 0 3
32092: PUSH
32093: LD_INT 8
32095: EQUAL
32096: IFFALSE 32108
// j := 0 else
32098: LD_ADDR_VAR 0 3
32102: PUSH
32103: LD_INT 0
32105: ST_TO_ADDR
32106: GO 32122
// j := j + 1 ;
32108: LD_ADDR_VAR 0 3
32112: PUSH
32113: LD_VAR 0 3
32117: PUSH
32118: LD_INT 1
32120: PLUS
32121: ST_TO_ADDR
// SetSide ( i , j ) ;
32122: LD_VAR 0 2
32126: PPUSH
32127: LD_VAR 0 3
32131: PPUSH
32132: CALL_OW 235
// end ;
32136: GO 32059
32138: POP
32139: POP
// end ;
32140: LD_VAR 0 1
32144: RET
// export function hHackFog ; begin
32145: LD_INT 0
32147: PPUSH
// FogOff ( true ) ;
32148: LD_INT 1
32150: PPUSH
32151: CALL_OW 344
// end ;
32155: LD_VAR 0 1
32159: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32160: LD_INT 0
32162: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32163: LD_VAR 0 1
32167: PPUSH
32168: LD_VAR 0 2
32172: PPUSH
32173: LD_VAR 0 3
32177: PPUSH
32178: LD_INT 1
32180: PPUSH
32181: LD_INT 1
32183: PPUSH
32184: CALL_OW 483
// CenterOnXY ( x , y ) ;
32188: LD_VAR 0 2
32192: PPUSH
32193: LD_VAR 0 3
32197: PPUSH
32198: CALL_OW 84
// end ;
32202: LD_VAR 0 4
32206: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32211: LD_VAR 0 1
32215: NOT
32216: PUSH
32217: LD_VAR 0 2
32221: PPUSH
32222: LD_VAR 0 3
32226: PPUSH
32227: CALL_OW 488
32231: NOT
32232: OR
32233: PUSH
32234: LD_VAR 0 1
32238: PPUSH
32239: CALL_OW 266
32243: PUSH
32244: LD_INT 3
32246: NONEQUAL
32247: PUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 247
32257: PUSH
32258: LD_INT 1
32260: EQUAL
32261: NOT
32262: AND
32263: OR
32264: IFFALSE 32268
// exit ;
32266: GO 32417
// if GetType ( factory ) = unit_human then
32268: LD_VAR 0 1
32272: PPUSH
32273: CALL_OW 247
32277: PUSH
32278: LD_INT 1
32280: EQUAL
32281: IFFALSE 32298
// factory := IsInUnit ( factory ) ;
32283: LD_ADDR_VAR 0 1
32287: PUSH
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 310
32297: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32298: LD_VAR 0 1
32302: PPUSH
32303: CALL_OW 266
32307: PUSH
32308: LD_INT 3
32310: NONEQUAL
32311: IFFALSE 32315
// exit ;
32313: GO 32417
// if HexInfo ( x , y ) = factory then
32315: LD_VAR 0 2
32319: PPUSH
32320: LD_VAR 0 3
32324: PPUSH
32325: CALL_OW 428
32329: PUSH
32330: LD_VAR 0 1
32334: EQUAL
32335: IFFALSE 32362
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32337: LD_ADDR_EXP 112
32341: PUSH
32342: LD_EXP 112
32346: PPUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: LD_INT 0
32354: PPUSH
32355: CALL_OW 1
32359: ST_TO_ADDR
32360: GO 32413
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32362: LD_ADDR_EXP 112
32366: PUSH
32367: LD_EXP 112
32371: PPUSH
32372: LD_VAR 0 1
32376: PPUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: CALL_OW 255
32386: PUSH
32387: LD_VAR 0 1
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: LD_VAR 0 3
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: PPUSH
32408: CALL_OW 1
32412: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32413: CALL 32422 0 0
// end ;
32417: LD_VAR 0 4
32421: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32422: LD_INT 0
32424: PPUSH
32425: PPUSH
32426: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32427: LD_STRING resetFactoryWaypoint();
32429: PPUSH
32430: CALL_OW 559
// if factoryWaypoints then
32434: LD_EXP 112
32438: IFFALSE 32564
// begin list := PrepareArray ( factoryWaypoints ) ;
32440: LD_ADDR_VAR 0 3
32444: PUSH
32445: LD_EXP 112
32449: PPUSH
32450: CALL 79869 0 1
32454: ST_TO_ADDR
// for i := 1 to list do
32455: LD_ADDR_VAR 0 2
32459: PUSH
32460: DOUBLE
32461: LD_INT 1
32463: DEC
32464: ST_TO_ADDR
32465: LD_VAR 0 3
32469: PUSH
32470: FOR_TO
32471: IFFALSE 32562
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32473: LD_STRING setFactoryWaypointXY(
32475: PUSH
32476: LD_VAR 0 3
32480: PUSH
32481: LD_VAR 0 2
32485: ARRAY
32486: PUSH
32487: LD_INT 1
32489: ARRAY
32490: STR
32491: PUSH
32492: LD_STRING ,
32494: STR
32495: PUSH
32496: LD_VAR 0 3
32500: PUSH
32501: LD_VAR 0 2
32505: ARRAY
32506: PUSH
32507: LD_INT 2
32509: ARRAY
32510: STR
32511: PUSH
32512: LD_STRING ,
32514: STR
32515: PUSH
32516: LD_VAR 0 3
32520: PUSH
32521: LD_VAR 0 2
32525: ARRAY
32526: PUSH
32527: LD_INT 3
32529: ARRAY
32530: STR
32531: PUSH
32532: LD_STRING ,
32534: STR
32535: PUSH
32536: LD_VAR 0 3
32540: PUSH
32541: LD_VAR 0 2
32545: ARRAY
32546: PUSH
32547: LD_INT 4
32549: ARRAY
32550: STR
32551: PUSH
32552: LD_STRING )
32554: STR
32555: PPUSH
32556: CALL_OW 559
32560: GO 32470
32562: POP
32563: POP
// end ; end ;
32564: LD_VAR 0 1
32568: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32569: LD_INT 0
32571: PPUSH
// if HexInfo ( x , y ) = warehouse then
32572: LD_VAR 0 2
32576: PPUSH
32577: LD_VAR 0 3
32581: PPUSH
32582: CALL_OW 428
32586: PUSH
32587: LD_VAR 0 1
32591: EQUAL
32592: IFFALSE 32619
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32594: LD_ADDR_EXP 113
32598: PUSH
32599: LD_EXP 113
32603: PPUSH
32604: LD_VAR 0 1
32608: PPUSH
32609: LD_INT 0
32611: PPUSH
32612: CALL_OW 1
32616: ST_TO_ADDR
32617: GO 32670
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32619: LD_ADDR_EXP 113
32623: PUSH
32624: LD_EXP 113
32628: PPUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: LD_VAR 0 1
32638: PPUSH
32639: CALL_OW 255
32643: PUSH
32644: LD_VAR 0 1
32648: PUSH
32649: LD_VAR 0 2
32653: PUSH
32654: LD_VAR 0 3
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: PPUSH
32665: CALL_OW 1
32669: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32670: CALL 32679 0 0
// end ;
32674: LD_VAR 0 4
32678: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32679: LD_INT 0
32681: PPUSH
32682: PPUSH
32683: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32684: LD_STRING resetWarehouseGatheringPoints();
32686: PPUSH
32687: CALL_OW 559
// if warehouseGatheringPoints then
32691: LD_EXP 113
32695: IFFALSE 32821
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32697: LD_ADDR_VAR 0 3
32701: PUSH
32702: LD_EXP 113
32706: PPUSH
32707: CALL 79869 0 1
32711: ST_TO_ADDR
// for i := 1 to list do
32712: LD_ADDR_VAR 0 2
32716: PUSH
32717: DOUBLE
32718: LD_INT 1
32720: DEC
32721: ST_TO_ADDR
32722: LD_VAR 0 3
32726: PUSH
32727: FOR_TO
32728: IFFALSE 32819
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32730: LD_STRING setWarehouseGatheringPointXY(
32732: PUSH
32733: LD_VAR 0 3
32737: PUSH
32738: LD_VAR 0 2
32742: ARRAY
32743: PUSH
32744: LD_INT 1
32746: ARRAY
32747: STR
32748: PUSH
32749: LD_STRING ,
32751: STR
32752: PUSH
32753: LD_VAR 0 3
32757: PUSH
32758: LD_VAR 0 2
32762: ARRAY
32763: PUSH
32764: LD_INT 2
32766: ARRAY
32767: STR
32768: PUSH
32769: LD_STRING ,
32771: STR
32772: PUSH
32773: LD_VAR 0 3
32777: PUSH
32778: LD_VAR 0 2
32782: ARRAY
32783: PUSH
32784: LD_INT 3
32786: ARRAY
32787: STR
32788: PUSH
32789: LD_STRING ,
32791: STR
32792: PUSH
32793: LD_VAR 0 3
32797: PUSH
32798: LD_VAR 0 2
32802: ARRAY
32803: PUSH
32804: LD_INT 4
32806: ARRAY
32807: STR
32808: PUSH
32809: LD_STRING )
32811: STR
32812: PPUSH
32813: CALL_OW 559
32817: GO 32727
32819: POP
32820: POP
// end ; end ;
32821: LD_VAR 0 1
32825: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32826: LD_EXP 113
32830: IFFALSE 33515
32832: GO 32834
32834: DISABLE
32835: LD_INT 0
32837: PPUSH
32838: PPUSH
32839: PPUSH
32840: PPUSH
32841: PPUSH
32842: PPUSH
32843: PPUSH
32844: PPUSH
32845: PPUSH
// begin enable ;
32846: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32847: LD_ADDR_VAR 0 3
32851: PUSH
32852: LD_EXP 113
32856: PPUSH
32857: CALL 79869 0 1
32861: ST_TO_ADDR
// if not list then
32862: LD_VAR 0 3
32866: NOT
32867: IFFALSE 32871
// exit ;
32869: GO 33515
// for i := 1 to list do
32871: LD_ADDR_VAR 0 1
32875: PUSH
32876: DOUBLE
32877: LD_INT 1
32879: DEC
32880: ST_TO_ADDR
32881: LD_VAR 0 3
32885: PUSH
32886: FOR_TO
32887: IFFALSE 33513
// begin depot := list [ i ] [ 2 ] ;
32889: LD_ADDR_VAR 0 8
32893: PUSH
32894: LD_VAR 0 3
32898: PUSH
32899: LD_VAR 0 1
32903: ARRAY
32904: PUSH
32905: LD_INT 2
32907: ARRAY
32908: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32909: LD_ADDR_VAR 0 5
32913: PUSH
32914: LD_VAR 0 3
32918: PUSH
32919: LD_VAR 0 1
32923: ARRAY
32924: PUSH
32925: LD_INT 1
32927: ARRAY
32928: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32929: LD_VAR 0 8
32933: PPUSH
32934: CALL_OW 301
32938: PUSH
32939: LD_VAR 0 5
32943: PUSH
32944: LD_VAR 0 8
32948: PPUSH
32949: CALL_OW 255
32953: NONEQUAL
32954: OR
32955: IFFALSE 32984
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32957: LD_ADDR_EXP 113
32961: PUSH
32962: LD_EXP 113
32966: PPUSH
32967: LD_VAR 0 8
32971: PPUSH
32972: LD_INT 0
32974: PPUSH
32975: CALL_OW 1
32979: ST_TO_ADDR
// exit ;
32980: POP
32981: POP
32982: GO 33515
// end ; x := list [ i ] [ 3 ] ;
32984: LD_ADDR_VAR 0 6
32988: PUSH
32989: LD_VAR 0 3
32993: PUSH
32994: LD_VAR 0 1
32998: ARRAY
32999: PUSH
33000: LD_INT 3
33002: ARRAY
33003: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33004: LD_ADDR_VAR 0 7
33008: PUSH
33009: LD_VAR 0 3
33013: PUSH
33014: LD_VAR 0 1
33018: ARRAY
33019: PUSH
33020: LD_INT 4
33022: ARRAY
33023: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33024: LD_ADDR_VAR 0 9
33028: PUSH
33029: LD_VAR 0 6
33033: PPUSH
33034: LD_VAR 0 7
33038: PPUSH
33039: LD_INT 16
33041: PPUSH
33042: CALL 78457 0 3
33046: ST_TO_ADDR
// if not cratesNearbyPoint then
33047: LD_VAR 0 9
33051: NOT
33052: IFFALSE 33058
// exit ;
33054: POP
33055: POP
33056: GO 33515
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33058: LD_ADDR_VAR 0 4
33062: PUSH
33063: LD_INT 22
33065: PUSH
33066: LD_VAR 0 5
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 60
33080: PUSH
33081: EMPTY
33082: LIST
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 91
33090: PUSH
33091: LD_VAR 0 8
33095: PUSH
33096: LD_INT 6
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: LD_INT 25
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 25
33119: PUSH
33120: LD_INT 16
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: LIST
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: PPUSH
33138: CALL_OW 69
33142: PUSH
33143: LD_VAR 0 8
33147: PPUSH
33148: CALL_OW 313
33152: PPUSH
33153: LD_INT 3
33155: PUSH
33156: LD_INT 60
33158: PUSH
33159: EMPTY
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 25
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 25
33181: PUSH
33182: LD_INT 16
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PPUSH
33198: CALL_OW 72
33202: UNION
33203: ST_TO_ADDR
// if tmp then
33204: LD_VAR 0 4
33208: IFFALSE 33288
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33210: LD_ADDR_VAR 0 4
33214: PUSH
33215: LD_VAR 0 4
33219: PPUSH
33220: LD_INT 3
33222: PPUSH
33223: CALL 76426 0 2
33227: ST_TO_ADDR
// for j in tmp do
33228: LD_ADDR_VAR 0 2
33232: PUSH
33233: LD_VAR 0 4
33237: PUSH
33238: FOR_IN
33239: IFFALSE 33282
// begin if IsInUnit ( j ) then
33241: LD_VAR 0 2
33245: PPUSH
33246: CALL_OW 310
33250: IFFALSE 33261
// ComExit ( j ) ;
33252: LD_VAR 0 2
33256: PPUSH
33257: CALL 76509 0 1
// AddComCollect ( j , x , y ) ;
33261: LD_VAR 0 2
33265: PPUSH
33266: LD_VAR 0 6
33270: PPUSH
33271: LD_VAR 0 7
33275: PPUSH
33276: CALL_OW 177
// end ;
33280: GO 33238
33282: POP
33283: POP
// exit ;
33284: POP
33285: POP
33286: GO 33515
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33288: LD_ADDR_VAR 0 4
33292: PUSH
33293: LD_INT 22
33295: PUSH
33296: LD_VAR 0 5
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 91
33307: PUSH
33308: LD_VAR 0 8
33312: PUSH
33313: LD_INT 8
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: LD_INT 34
33326: PUSH
33327: LD_INT 12
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 34
33336: PUSH
33337: LD_INT 51
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 34
33346: PUSH
33347: LD_INT 32
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 34
33356: PUSH
33357: LD_INT 89
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: PPUSH
33376: CALL_OW 69
33380: ST_TO_ADDR
// if tmp then
33381: LD_VAR 0 4
33385: IFFALSE 33511
// begin for j in tmp do
33387: LD_ADDR_VAR 0 2
33391: PUSH
33392: LD_VAR 0 4
33396: PUSH
33397: FOR_IN
33398: IFFALSE 33509
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33400: LD_VAR 0 2
33404: PPUSH
33405: CALL_OW 262
33409: PUSH
33410: LD_INT 3
33412: EQUAL
33413: PUSH
33414: LD_VAR 0 2
33418: PPUSH
33419: CALL_OW 261
33423: PUSH
33424: LD_INT 20
33426: GREATER
33427: OR
33428: PUSH
33429: LD_VAR 0 2
33433: PPUSH
33434: CALL_OW 314
33438: NOT
33439: AND
33440: PUSH
33441: LD_VAR 0 2
33445: PPUSH
33446: CALL_OW 263
33450: PUSH
33451: LD_INT 1
33453: NONEQUAL
33454: PUSH
33455: LD_VAR 0 2
33459: PPUSH
33460: CALL_OW 311
33464: OR
33465: AND
33466: IFFALSE 33507
// begin ComCollect ( j , x , y ) ;
33468: LD_VAR 0 2
33472: PPUSH
33473: LD_VAR 0 6
33477: PPUSH
33478: LD_VAR 0 7
33482: PPUSH
33483: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33487: LD_VAR 0 2
33491: PPUSH
33492: LD_VAR 0 8
33496: PPUSH
33497: CALL_OW 172
// exit ;
33501: POP
33502: POP
33503: POP
33504: POP
33505: GO 33515
// end ;
33507: GO 33397
33509: POP
33510: POP
// end ; end ;
33511: GO 32886
33513: POP
33514: POP
// end ; end_of_file
33515: PPOPN 9
33517: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33518: LD_VAR 0 1
33522: PUSH
33523: LD_INT 200
33525: DOUBLE
33526: GREATEREQUAL
33527: IFFALSE 33535
33529: LD_INT 299
33531: DOUBLE
33532: LESSEQUAL
33533: IFTRUE 33537
33535: GO 33569
33537: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33538: LD_VAR 0 1
33542: PPUSH
33543: LD_VAR 0 2
33547: PPUSH
33548: LD_VAR 0 3
33552: PPUSH
33553: LD_VAR 0 4
33557: PPUSH
33558: LD_VAR 0 5
33562: PPUSH
33563: CALL 34057 0 5
33567: GO 33646
33569: LD_INT 300
33571: DOUBLE
33572: GREATEREQUAL
33573: IFFALSE 33581
33575: LD_INT 399
33577: DOUBLE
33578: LESSEQUAL
33579: IFTRUE 33583
33581: GO 33645
33583: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33584: LD_VAR 0 1
33588: PPUSH
33589: LD_VAR 0 2
33593: PPUSH
33594: LD_VAR 0 3
33598: PPUSH
33599: LD_VAR 0 4
33603: PPUSH
33604: LD_VAR 0 5
33608: PPUSH
33609: LD_VAR 0 6
33613: PPUSH
33614: LD_VAR 0 7
33618: PPUSH
33619: LD_VAR 0 8
33623: PPUSH
33624: LD_VAR 0 9
33628: PPUSH
33629: LD_VAR 0 10
33633: PPUSH
33634: LD_VAR 0 11
33638: PPUSH
33639: CALL 30219 0 11
33643: GO 33646
33645: POP
// end ;
33646: PPOPN 11
33648: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33649: LD_VAR 0 1
33653: PPUSH
33654: LD_VAR 0 2
33658: PPUSH
33659: LD_VAR 0 3
33663: PPUSH
33664: LD_VAR 0 4
33668: PPUSH
33669: LD_VAR 0 5
33673: PPUSH
33674: CALL 33793 0 5
// end ; end_of_file
33678: PPOPN 5
33680: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33681: LD_INT 0
33683: PPUSH
33684: PPUSH
33685: PPUSH
33686: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33687: LD_VAR 0 1
33691: PPUSH
33692: CALL_OW 264
33696: PUSH
33697: LD_INT 91
33699: EQUAL
33700: IFFALSE 33772
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33702: LD_INT 68
33704: PPUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 255
33714: PPUSH
33715: CALL_OW 321
33719: PUSH
33720: LD_INT 2
33722: EQUAL
33723: IFFALSE 33735
// eff := 70 else
33725: LD_ADDR_VAR 0 4
33729: PUSH
33730: LD_INT 70
33732: ST_TO_ADDR
33733: GO 33743
// eff := 30 ;
33735: LD_ADDR_VAR 0 4
33739: PUSH
33740: LD_INT 30
33742: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33743: LD_VAR 0 1
33747: PPUSH
33748: CALL_OW 250
33752: PPUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 251
33762: PPUSH
33763: LD_VAR 0 4
33767: PPUSH
33768: CALL_OW 495
// end ; end ;
33772: LD_VAR 0 2
33776: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33777: LD_INT 0
33779: PPUSH
// end ;
33780: LD_VAR 0 4
33784: RET
// export function SOS_Command ( cmd ) ; begin
33785: LD_INT 0
33787: PPUSH
// end ;
33788: LD_VAR 0 2
33792: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33793: LD_INT 0
33795: PPUSH
// end ;
33796: LD_VAR 0 6
33800: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33801: LD_INT 0
33803: PPUSH
33804: PPUSH
// if not vehicle or not factory then
33805: LD_VAR 0 1
33809: NOT
33810: PUSH
33811: LD_VAR 0 2
33815: NOT
33816: OR
33817: IFFALSE 33821
// exit ;
33819: GO 34052
// if factoryWaypoints >= factory then
33821: LD_EXP 112
33825: PUSH
33826: LD_VAR 0 2
33830: GREATEREQUAL
33831: IFFALSE 34052
// if factoryWaypoints [ factory ] then
33833: LD_EXP 112
33837: PUSH
33838: LD_VAR 0 2
33842: ARRAY
33843: IFFALSE 34052
// begin if GetControl ( vehicle ) = control_manual then
33845: LD_VAR 0 1
33849: PPUSH
33850: CALL_OW 263
33854: PUSH
33855: LD_INT 1
33857: EQUAL
33858: IFFALSE 33939
// begin driver := IsDrivenBy ( vehicle ) ;
33860: LD_ADDR_VAR 0 4
33864: PUSH
33865: LD_VAR 0 1
33869: PPUSH
33870: CALL_OW 311
33874: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33875: LD_VAR 0 4
33879: PPUSH
33880: LD_EXP 112
33884: PUSH
33885: LD_VAR 0 2
33889: ARRAY
33890: PUSH
33891: LD_INT 3
33893: ARRAY
33894: PPUSH
33895: LD_EXP 112
33899: PUSH
33900: LD_VAR 0 2
33904: ARRAY
33905: PUSH
33906: LD_INT 4
33908: ARRAY
33909: PPUSH
33910: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33914: LD_VAR 0 4
33918: PPUSH
33919: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33923: LD_VAR 0 4
33927: PPUSH
33928: LD_VAR 0 2
33932: PPUSH
33933: CALL_OW 180
// end else
33937: GO 34052
// if GetControl ( vehicle ) = control_remote then
33939: LD_VAR 0 1
33943: PPUSH
33944: CALL_OW 263
33948: PUSH
33949: LD_INT 2
33951: EQUAL
33952: IFFALSE 34013
// begin wait ( 0 0$2 ) ;
33954: LD_INT 70
33956: PPUSH
33957: CALL_OW 67
// if Connect ( vehicle ) then
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL 46717 0 1
33970: IFFALSE 34011
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33972: LD_VAR 0 1
33976: PPUSH
33977: LD_EXP 112
33981: PUSH
33982: LD_VAR 0 2
33986: ARRAY
33987: PUSH
33988: LD_INT 3
33990: ARRAY
33991: PPUSH
33992: LD_EXP 112
33996: PUSH
33997: LD_VAR 0 2
34001: ARRAY
34002: PUSH
34003: LD_INT 4
34005: ARRAY
34006: PPUSH
34007: CALL_OW 171
// end else
34011: GO 34052
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34013: LD_VAR 0 1
34017: PPUSH
34018: LD_EXP 112
34022: PUSH
34023: LD_VAR 0 2
34027: ARRAY
34028: PUSH
34029: LD_INT 3
34031: ARRAY
34032: PPUSH
34033: LD_EXP 112
34037: PUSH
34038: LD_VAR 0 2
34042: ARRAY
34043: PUSH
34044: LD_INT 4
34046: ARRAY
34047: PPUSH
34048: CALL_OW 171
// end ; end ;
34052: LD_VAR 0 3
34056: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34057: LD_INT 0
34059: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34060: LD_VAR 0 1
34064: PUSH
34065: LD_INT 250
34067: EQUAL
34068: PUSH
34069: LD_VAR 0 2
34073: PPUSH
34074: CALL_OW 264
34078: PUSH
34079: LD_INT 81
34081: EQUAL
34082: AND
34083: IFFALSE 34104
// MinerPlaceMine ( unit , x , y ) ;
34085: LD_VAR 0 2
34089: PPUSH
34090: LD_VAR 0 4
34094: PPUSH
34095: LD_VAR 0 5
34099: PPUSH
34100: CALL 36928 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34104: LD_VAR 0 1
34108: PUSH
34109: LD_INT 251
34111: EQUAL
34112: PUSH
34113: LD_VAR 0 2
34117: PPUSH
34118: CALL_OW 264
34122: PUSH
34123: LD_INT 81
34125: EQUAL
34126: AND
34127: IFFALSE 34148
// MinerDetonateMine ( unit , x , y ) ;
34129: LD_VAR 0 2
34133: PPUSH
34134: LD_VAR 0 4
34138: PPUSH
34139: LD_VAR 0 5
34143: PPUSH
34144: CALL 37203 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34148: LD_VAR 0 1
34152: PUSH
34153: LD_INT 252
34155: EQUAL
34156: PUSH
34157: LD_VAR 0 2
34161: PPUSH
34162: CALL_OW 264
34166: PUSH
34167: LD_INT 81
34169: EQUAL
34170: AND
34171: IFFALSE 34192
// MinerCreateMinefield ( unit , x , y ) ;
34173: LD_VAR 0 2
34177: PPUSH
34178: LD_VAR 0 4
34182: PPUSH
34183: LD_VAR 0 5
34187: PPUSH
34188: CALL 37620 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34192: LD_VAR 0 1
34196: PUSH
34197: LD_INT 253
34199: EQUAL
34200: PUSH
34201: LD_VAR 0 2
34205: PPUSH
34206: CALL_OW 257
34210: PUSH
34211: LD_INT 5
34213: EQUAL
34214: AND
34215: IFFALSE 34236
// ComBinocular ( unit , x , y ) ;
34217: LD_VAR 0 2
34221: PPUSH
34222: LD_VAR 0 4
34226: PPUSH
34227: LD_VAR 0 5
34231: PPUSH
34232: CALL 37989 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34236: LD_VAR 0 1
34240: PUSH
34241: LD_INT 254
34243: EQUAL
34244: PUSH
34245: LD_VAR 0 2
34249: PPUSH
34250: CALL_OW 264
34254: PUSH
34255: LD_INT 99
34257: EQUAL
34258: AND
34259: PUSH
34260: LD_VAR 0 3
34264: PPUSH
34265: CALL_OW 263
34269: PUSH
34270: LD_INT 3
34272: EQUAL
34273: AND
34274: IFFALSE 34290
// HackDestroyVehicle ( unit , selectedUnit ) ;
34276: LD_VAR 0 2
34280: PPUSH
34281: LD_VAR 0 3
34285: PPUSH
34286: CALL 36292 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34290: LD_VAR 0 1
34294: PUSH
34295: LD_INT 255
34297: EQUAL
34298: PUSH
34299: LD_VAR 0 2
34303: PPUSH
34304: CALL_OW 264
34308: PUSH
34309: LD_INT 14
34311: PUSH
34312: LD_INT 53
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: IN
34319: AND
34320: PUSH
34321: LD_VAR 0 4
34325: PPUSH
34326: LD_VAR 0 5
34330: PPUSH
34331: CALL_OW 488
34335: AND
34336: IFFALSE 34360
// CutTreeXYR ( unit , x , y , 12 ) ;
34338: LD_VAR 0 2
34342: PPUSH
34343: LD_VAR 0 4
34347: PPUSH
34348: LD_VAR 0 5
34352: PPUSH
34353: LD_INT 12
34355: PPUSH
34356: CALL 34455 0 4
// if cmd = 256 then
34360: LD_VAR 0 1
34364: PUSH
34365: LD_INT 256
34367: EQUAL
34368: IFFALSE 34389
// SetFactoryWaypoint ( unit , x , y ) ;
34370: LD_VAR 0 2
34374: PPUSH
34375: LD_VAR 0 4
34379: PPUSH
34380: LD_VAR 0 5
34384: PPUSH
34385: CALL 32207 0 3
// if cmd = 257 then
34389: LD_VAR 0 1
34393: PUSH
34394: LD_INT 257
34396: EQUAL
34397: IFFALSE 34418
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34399: LD_VAR 0 2
34403: PPUSH
34404: LD_VAR 0 4
34408: PPUSH
34409: LD_VAR 0 5
34413: PPUSH
34414: CALL 32569 0 3
// if cmd = 258 then
34418: LD_VAR 0 1
34422: PUSH
34423: LD_INT 258
34425: EQUAL
34426: IFFALSE 34450
// BurnTreeXYR ( unit , x , y , 8 ) ;
34428: LD_VAR 0 2
34432: PPUSH
34433: LD_VAR 0 4
34437: PPUSH
34438: LD_VAR 0 5
34442: PPUSH
34443: LD_INT 8
34445: PPUSH
34446: CALL 34849 0 4
// end ;
34450: LD_VAR 0 6
34454: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34455: LD_INT 0
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
34465: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34466: LD_VAR 0 1
34470: PPUSH
34471: CALL_OW 302
34475: NOT
34476: PUSH
34477: LD_VAR 0 2
34481: PPUSH
34482: LD_VAR 0 3
34486: PPUSH
34487: CALL_OW 488
34491: NOT
34492: OR
34493: PUSH
34494: LD_VAR 0 4
34498: NOT
34499: OR
34500: IFFALSE 34504
// exit ;
34502: GO 34844
// list := [ ] ;
34504: LD_ADDR_VAR 0 13
34508: PUSH
34509: EMPTY
34510: ST_TO_ADDR
// if x - r < 0 then
34511: LD_VAR 0 2
34515: PUSH
34516: LD_VAR 0 4
34520: MINUS
34521: PUSH
34522: LD_INT 0
34524: LESS
34525: IFFALSE 34537
// min_x := 0 else
34527: LD_ADDR_VAR 0 7
34531: PUSH
34532: LD_INT 0
34534: ST_TO_ADDR
34535: GO 34553
// min_x := x - r ;
34537: LD_ADDR_VAR 0 7
34541: PUSH
34542: LD_VAR 0 2
34546: PUSH
34547: LD_VAR 0 4
34551: MINUS
34552: ST_TO_ADDR
// if y - r < 0 then
34553: LD_VAR 0 3
34557: PUSH
34558: LD_VAR 0 4
34562: MINUS
34563: PUSH
34564: LD_INT 0
34566: LESS
34567: IFFALSE 34579
// min_y := 0 else
34569: LD_ADDR_VAR 0 8
34573: PUSH
34574: LD_INT 0
34576: ST_TO_ADDR
34577: GO 34595
// min_y := y - r ;
34579: LD_ADDR_VAR 0 8
34583: PUSH
34584: LD_VAR 0 3
34588: PUSH
34589: LD_VAR 0 4
34593: MINUS
34594: ST_TO_ADDR
// max_x := x + r ;
34595: LD_ADDR_VAR 0 9
34599: PUSH
34600: LD_VAR 0 2
34604: PUSH
34605: LD_VAR 0 4
34609: PLUS
34610: ST_TO_ADDR
// max_y := y + r ;
34611: LD_ADDR_VAR 0 10
34615: PUSH
34616: LD_VAR 0 3
34620: PUSH
34621: LD_VAR 0 4
34625: PLUS
34626: ST_TO_ADDR
// for _x = min_x to max_x do
34627: LD_ADDR_VAR 0 11
34631: PUSH
34632: DOUBLE
34633: LD_VAR 0 7
34637: DEC
34638: ST_TO_ADDR
34639: LD_VAR 0 9
34643: PUSH
34644: FOR_TO
34645: IFFALSE 34762
// for _y = min_y to max_y do
34647: LD_ADDR_VAR 0 12
34651: PUSH
34652: DOUBLE
34653: LD_VAR 0 8
34657: DEC
34658: ST_TO_ADDR
34659: LD_VAR 0 10
34663: PUSH
34664: FOR_TO
34665: IFFALSE 34758
// begin if not ValidHex ( _x , _y ) then
34667: LD_VAR 0 11
34671: PPUSH
34672: LD_VAR 0 12
34676: PPUSH
34677: CALL_OW 488
34681: NOT
34682: IFFALSE 34686
// continue ;
34684: GO 34664
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34686: LD_VAR 0 11
34690: PPUSH
34691: LD_VAR 0 12
34695: PPUSH
34696: CALL_OW 351
34700: PUSH
34701: LD_VAR 0 11
34705: PPUSH
34706: LD_VAR 0 12
34710: PPUSH
34711: CALL_OW 554
34715: AND
34716: IFFALSE 34756
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34718: LD_ADDR_VAR 0 13
34722: PUSH
34723: LD_VAR 0 13
34727: PPUSH
34728: LD_VAR 0 13
34732: PUSH
34733: LD_INT 1
34735: PLUS
34736: PPUSH
34737: LD_VAR 0 11
34741: PUSH
34742: LD_VAR 0 12
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PPUSH
34751: CALL_OW 2
34755: ST_TO_ADDR
// end ;
34756: GO 34664
34758: POP
34759: POP
34760: GO 34644
34762: POP
34763: POP
// if not list then
34764: LD_VAR 0 13
34768: NOT
34769: IFFALSE 34773
// exit ;
34771: GO 34844
// for i in list do
34773: LD_ADDR_VAR 0 6
34777: PUSH
34778: LD_VAR 0 13
34782: PUSH
34783: FOR_IN
34784: IFFALSE 34842
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34786: LD_VAR 0 1
34790: PPUSH
34791: LD_STRING M
34793: PUSH
34794: LD_VAR 0 6
34798: PUSH
34799: LD_INT 1
34801: ARRAY
34802: PUSH
34803: LD_VAR 0 6
34807: PUSH
34808: LD_INT 2
34810: ARRAY
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: PUSH
34833: EMPTY
34834: LIST
34835: PPUSH
34836: CALL_OW 447
34840: GO 34783
34842: POP
34843: POP
// end ;
34844: LD_VAR 0 5
34848: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34849: LD_INT 0
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
34855: PPUSH
34856: PPUSH
34857: PPUSH
34858: PPUSH
34859: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
34860: LD_VAR 0 1
34864: PPUSH
34865: CALL_OW 302
34869: NOT
34870: PUSH
34871: LD_VAR 0 2
34875: PPUSH
34876: LD_VAR 0 3
34880: PPUSH
34881: CALL_OW 488
34885: NOT
34886: OR
34887: PUSH
34888: LD_VAR 0 4
34892: NOT
34893: OR
34894: IFFALSE 34898
// exit ;
34896: GO 35246
// list := [ ] ;
34898: LD_ADDR_VAR 0 13
34902: PUSH
34903: EMPTY
34904: ST_TO_ADDR
// if x - r < 0 then
34905: LD_VAR 0 2
34909: PUSH
34910: LD_VAR 0 4
34914: MINUS
34915: PUSH
34916: LD_INT 0
34918: LESS
34919: IFFALSE 34931
// min_x := 0 else
34921: LD_ADDR_VAR 0 7
34925: PUSH
34926: LD_INT 0
34928: ST_TO_ADDR
34929: GO 34947
// min_x := x - r ;
34931: LD_ADDR_VAR 0 7
34935: PUSH
34936: LD_VAR 0 2
34940: PUSH
34941: LD_VAR 0 4
34945: MINUS
34946: ST_TO_ADDR
// if y - r < 0 then
34947: LD_VAR 0 3
34951: PUSH
34952: LD_VAR 0 4
34956: MINUS
34957: PUSH
34958: LD_INT 0
34960: LESS
34961: IFFALSE 34973
// min_y := 0 else
34963: LD_ADDR_VAR 0 8
34967: PUSH
34968: LD_INT 0
34970: ST_TO_ADDR
34971: GO 34989
// min_y := y - r ;
34973: LD_ADDR_VAR 0 8
34977: PUSH
34978: LD_VAR 0 3
34982: PUSH
34983: LD_VAR 0 4
34987: MINUS
34988: ST_TO_ADDR
// max_x := x + r ;
34989: LD_ADDR_VAR 0 9
34993: PUSH
34994: LD_VAR 0 2
34998: PUSH
34999: LD_VAR 0 4
35003: PLUS
35004: ST_TO_ADDR
// max_y := y + r ;
35005: LD_ADDR_VAR 0 10
35009: PUSH
35010: LD_VAR 0 3
35014: PUSH
35015: LD_VAR 0 4
35019: PLUS
35020: ST_TO_ADDR
// for _x = min_x to max_x do
35021: LD_ADDR_VAR 0 11
35025: PUSH
35026: DOUBLE
35027: LD_VAR 0 7
35031: DEC
35032: ST_TO_ADDR
35033: LD_VAR 0 9
35037: PUSH
35038: FOR_TO
35039: IFFALSE 35156
// for _y = min_y to max_y do
35041: LD_ADDR_VAR 0 12
35045: PUSH
35046: DOUBLE
35047: LD_VAR 0 8
35051: DEC
35052: ST_TO_ADDR
35053: LD_VAR 0 10
35057: PUSH
35058: FOR_TO
35059: IFFALSE 35152
// begin if not ValidHex ( _x , _y ) then
35061: LD_VAR 0 11
35065: PPUSH
35066: LD_VAR 0 12
35070: PPUSH
35071: CALL_OW 488
35075: NOT
35076: IFFALSE 35080
// continue ;
35078: GO 35058
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35080: LD_VAR 0 11
35084: PPUSH
35085: LD_VAR 0 12
35089: PPUSH
35090: CALL_OW 351
35094: PUSH
35095: LD_VAR 0 11
35099: PPUSH
35100: LD_VAR 0 12
35104: PPUSH
35105: CALL_OW 554
35109: AND
35110: IFFALSE 35150
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35112: LD_ADDR_VAR 0 13
35116: PUSH
35117: LD_VAR 0 13
35121: PPUSH
35122: LD_VAR 0 13
35126: PUSH
35127: LD_INT 1
35129: PLUS
35130: PPUSH
35131: LD_VAR 0 11
35135: PUSH
35136: LD_VAR 0 12
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PPUSH
35145: CALL_OW 2
35149: ST_TO_ADDR
// end ;
35150: GO 35058
35152: POP
35153: POP
35154: GO 35038
35156: POP
35157: POP
// if not list then
35158: LD_VAR 0 13
35162: NOT
35163: IFFALSE 35167
// exit ;
35165: GO 35246
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35167: LD_ADDR_VAR 0 13
35171: PUSH
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_VAR 0 13
35181: PPUSH
35182: LD_INT 1
35184: PPUSH
35185: LD_INT 1
35187: PPUSH
35188: CALL 43859 0 4
35192: ST_TO_ADDR
// ComStop ( flame ) ;
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL_OW 141
// for i in list do
35202: LD_ADDR_VAR 0 6
35206: PUSH
35207: LD_VAR 0 13
35211: PUSH
35212: FOR_IN
35213: IFFALSE 35244
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35215: LD_VAR 0 1
35219: PPUSH
35220: LD_VAR 0 6
35224: PUSH
35225: LD_INT 1
35227: ARRAY
35228: PPUSH
35229: LD_VAR 0 6
35233: PUSH
35234: LD_INT 2
35236: ARRAY
35237: PPUSH
35238: CALL_OW 176
35242: GO 35212
35244: POP
35245: POP
// end ;
35246: LD_VAR 0 5
35250: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35251: LD_EXP 115
35255: NOT
35256: IFFALSE 35306
35258: GO 35260
35260: DISABLE
// begin initHack := true ;
35261: LD_ADDR_EXP 115
35265: PUSH
35266: LD_INT 1
35268: ST_TO_ADDR
// hackTanks := [ ] ;
35269: LD_ADDR_EXP 116
35273: PUSH
35274: EMPTY
35275: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35276: LD_ADDR_EXP 117
35280: PUSH
35281: EMPTY
35282: ST_TO_ADDR
// hackLimit := 3 ;
35283: LD_ADDR_EXP 118
35287: PUSH
35288: LD_INT 3
35290: ST_TO_ADDR
// hackDist := 12 ;
35291: LD_ADDR_EXP 119
35295: PUSH
35296: LD_INT 12
35298: ST_TO_ADDR
// hackCounter := [ ] ;
35299: LD_ADDR_EXP 120
35303: PUSH
35304: EMPTY
35305: ST_TO_ADDR
// end ;
35306: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35307: LD_EXP 115
35311: PUSH
35312: LD_INT 34
35314: PUSH
35315: LD_INT 99
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PPUSH
35322: CALL_OW 69
35326: AND
35327: IFFALSE 35580
35329: GO 35331
35331: DISABLE
35332: LD_INT 0
35334: PPUSH
35335: PPUSH
// begin enable ;
35336: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35337: LD_ADDR_VAR 0 1
35341: PUSH
35342: LD_INT 34
35344: PUSH
35345: LD_INT 99
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PPUSH
35352: CALL_OW 69
35356: PUSH
35357: FOR_IN
35358: IFFALSE 35578
// begin if not i in hackTanks then
35360: LD_VAR 0 1
35364: PUSH
35365: LD_EXP 116
35369: IN
35370: NOT
35371: IFFALSE 35454
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35373: LD_ADDR_EXP 116
35377: PUSH
35378: LD_EXP 116
35382: PPUSH
35383: LD_EXP 116
35387: PUSH
35388: LD_INT 1
35390: PLUS
35391: PPUSH
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL_OW 1
35401: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35402: LD_ADDR_EXP 117
35406: PUSH
35407: LD_EXP 117
35411: PPUSH
35412: LD_EXP 117
35416: PUSH
35417: LD_INT 1
35419: PLUS
35420: PPUSH
35421: EMPTY
35422: PPUSH
35423: CALL_OW 1
35427: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35428: LD_ADDR_EXP 120
35432: PUSH
35433: LD_EXP 120
35437: PPUSH
35438: LD_EXP 120
35442: PUSH
35443: LD_INT 1
35445: PLUS
35446: PPUSH
35447: EMPTY
35448: PPUSH
35449: CALL_OW 1
35453: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35454: LD_VAR 0 1
35458: PPUSH
35459: CALL_OW 302
35463: NOT
35464: IFFALSE 35477
// begin HackUnlinkAll ( i ) ;
35466: LD_VAR 0 1
35470: PPUSH
35471: CALL 35583 0 1
// continue ;
35475: GO 35357
// end ; HackCheckCapturedStatus ( i ) ;
35477: LD_VAR 0 1
35481: PPUSH
35482: CALL 36026 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35486: LD_ADDR_VAR 0 2
35490: PUSH
35491: LD_INT 81
35493: PUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: CALL_OW 255
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 33
35510: PUSH
35511: LD_INT 3
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 91
35520: PUSH
35521: LD_VAR 0 1
35525: PUSH
35526: LD_EXP 119
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 50
35538: PUSH
35539: EMPTY
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: PPUSH
35548: CALL_OW 69
35552: ST_TO_ADDR
// if not tmp then
35553: LD_VAR 0 2
35557: NOT
35558: IFFALSE 35562
// continue ;
35560: GO 35357
// HackLink ( i , tmp ) ;
35562: LD_VAR 0 1
35566: PPUSH
35567: LD_VAR 0 2
35571: PPUSH
35572: CALL 35719 0 2
// end ;
35576: GO 35357
35578: POP
35579: POP
// end ;
35580: PPOPN 2
35582: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35583: LD_INT 0
35585: PPUSH
35586: PPUSH
35587: PPUSH
// if not hack in hackTanks then
35588: LD_VAR 0 1
35592: PUSH
35593: LD_EXP 116
35597: IN
35598: NOT
35599: IFFALSE 35603
// exit ;
35601: GO 35714
// index := GetElementIndex ( hackTanks , hack ) ;
35603: LD_ADDR_VAR 0 4
35607: PUSH
35608: LD_EXP 116
35612: PPUSH
35613: LD_VAR 0 1
35617: PPUSH
35618: CALL 43156 0 2
35622: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35623: LD_EXP 117
35627: PUSH
35628: LD_VAR 0 4
35632: ARRAY
35633: IFFALSE 35714
// begin for i in hackTanksCaptured [ index ] do
35635: LD_ADDR_VAR 0 3
35639: PUSH
35640: LD_EXP 117
35644: PUSH
35645: LD_VAR 0 4
35649: ARRAY
35650: PUSH
35651: FOR_IN
35652: IFFALSE 35678
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35654: LD_VAR 0 3
35658: PUSH
35659: LD_INT 1
35661: ARRAY
35662: PPUSH
35663: LD_VAR 0 3
35667: PUSH
35668: LD_INT 2
35670: ARRAY
35671: PPUSH
35672: CALL_OW 235
35676: GO 35651
35678: POP
35679: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35680: LD_ADDR_EXP 117
35684: PUSH
35685: LD_EXP 117
35689: PPUSH
35690: LD_VAR 0 4
35694: PPUSH
35695: EMPTY
35696: PPUSH
35697: CALL_OW 1
35701: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35702: LD_VAR 0 1
35706: PPUSH
35707: LD_INT 0
35709: PPUSH
35710: CALL_OW 505
// end ; end ;
35714: LD_VAR 0 2
35718: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35719: LD_INT 0
35721: PPUSH
35722: PPUSH
35723: PPUSH
// if not hack in hackTanks or not vehicles then
35724: LD_VAR 0 1
35728: PUSH
35729: LD_EXP 116
35733: IN
35734: NOT
35735: PUSH
35736: LD_VAR 0 2
35740: NOT
35741: OR
35742: IFFALSE 35746
// exit ;
35744: GO 36021
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35746: LD_ADDR_VAR 0 2
35750: PUSH
35751: LD_VAR 0 1
35755: PPUSH
35756: LD_VAR 0 2
35760: PPUSH
35761: LD_INT 1
35763: PPUSH
35764: LD_INT 1
35766: PPUSH
35767: CALL 43806 0 4
35771: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35772: LD_ADDR_VAR 0 5
35776: PUSH
35777: LD_EXP 116
35781: PPUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL 43156 0 2
35791: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35792: LD_EXP 117
35796: PUSH
35797: LD_VAR 0 5
35801: ARRAY
35802: PUSH
35803: LD_EXP 118
35807: LESS
35808: IFFALSE 35997
// begin for i := 1 to vehicles do
35810: LD_ADDR_VAR 0 4
35814: PUSH
35815: DOUBLE
35816: LD_INT 1
35818: DEC
35819: ST_TO_ADDR
35820: LD_VAR 0 2
35824: PUSH
35825: FOR_TO
35826: IFFALSE 35995
// begin if hackTanksCaptured [ index ] = hackLimit then
35828: LD_EXP 117
35832: PUSH
35833: LD_VAR 0 5
35837: ARRAY
35838: PUSH
35839: LD_EXP 118
35843: EQUAL
35844: IFFALSE 35848
// break ;
35846: GO 35995
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35848: LD_ADDR_EXP 120
35852: PUSH
35853: LD_EXP 120
35857: PPUSH
35858: LD_VAR 0 5
35862: PPUSH
35863: LD_EXP 120
35867: PUSH
35868: LD_VAR 0 5
35872: ARRAY
35873: PUSH
35874: LD_INT 1
35876: PLUS
35877: PPUSH
35878: CALL_OW 1
35882: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35883: LD_ADDR_EXP 117
35887: PUSH
35888: LD_EXP 117
35892: PPUSH
35893: LD_VAR 0 5
35897: PUSH
35898: LD_EXP 117
35902: PUSH
35903: LD_VAR 0 5
35907: ARRAY
35908: PUSH
35909: LD_INT 1
35911: PLUS
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PPUSH
35917: LD_VAR 0 2
35921: PUSH
35922: LD_VAR 0 4
35926: ARRAY
35927: PUSH
35928: LD_VAR 0 2
35932: PUSH
35933: LD_VAR 0 4
35937: ARRAY
35938: PPUSH
35939: CALL_OW 255
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PPUSH
35948: CALL 43371 0 3
35952: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35953: LD_VAR 0 2
35957: PUSH
35958: LD_VAR 0 4
35962: ARRAY
35963: PPUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: CALL_OW 255
35973: PPUSH
35974: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35978: LD_VAR 0 2
35982: PUSH
35983: LD_VAR 0 4
35987: ARRAY
35988: PPUSH
35989: CALL_OW 141
// end ;
35993: GO 35825
35995: POP
35996: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35997: LD_VAR 0 1
36001: PPUSH
36002: LD_EXP 117
36006: PUSH
36007: LD_VAR 0 5
36011: ARRAY
36012: PUSH
36013: LD_INT 0
36015: PLUS
36016: PPUSH
36017: CALL_OW 505
// end ;
36021: LD_VAR 0 3
36025: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36026: LD_INT 0
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
// if not hack in hackTanks then
36032: LD_VAR 0 1
36036: PUSH
36037: LD_EXP 116
36041: IN
36042: NOT
36043: IFFALSE 36047
// exit ;
36045: GO 36287
// index := GetElementIndex ( hackTanks , hack ) ;
36047: LD_ADDR_VAR 0 4
36051: PUSH
36052: LD_EXP 116
36056: PPUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL 43156 0 2
36066: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36067: LD_ADDR_VAR 0 3
36071: PUSH
36072: DOUBLE
36073: LD_EXP 117
36077: PUSH
36078: LD_VAR 0 4
36082: ARRAY
36083: INC
36084: ST_TO_ADDR
36085: LD_INT 1
36087: PUSH
36088: FOR_DOWNTO
36089: IFFALSE 36261
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36091: LD_ADDR_VAR 0 5
36095: PUSH
36096: LD_EXP 117
36100: PUSH
36101: LD_VAR 0 4
36105: ARRAY
36106: PUSH
36107: LD_VAR 0 3
36111: ARRAY
36112: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36113: LD_VAR 0 5
36117: PUSH
36118: LD_INT 1
36120: ARRAY
36121: PPUSH
36122: CALL_OW 302
36126: NOT
36127: PUSH
36128: LD_VAR 0 5
36132: PUSH
36133: LD_INT 1
36135: ARRAY
36136: PPUSH
36137: CALL_OW 255
36141: PUSH
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 255
36151: NONEQUAL
36152: OR
36153: IFFALSE 36259
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36155: LD_VAR 0 5
36159: PUSH
36160: LD_INT 1
36162: ARRAY
36163: PPUSH
36164: CALL_OW 305
36168: PUSH
36169: LD_VAR 0 5
36173: PUSH
36174: LD_INT 1
36176: ARRAY
36177: PPUSH
36178: CALL_OW 255
36182: PUSH
36183: LD_VAR 0 1
36187: PPUSH
36188: CALL_OW 255
36192: EQUAL
36193: AND
36194: IFFALSE 36218
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36196: LD_VAR 0 5
36200: PUSH
36201: LD_INT 1
36203: ARRAY
36204: PPUSH
36205: LD_VAR 0 5
36209: PUSH
36210: LD_INT 2
36212: ARRAY
36213: PPUSH
36214: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36218: LD_ADDR_EXP 117
36222: PUSH
36223: LD_EXP 117
36227: PPUSH
36228: LD_VAR 0 4
36232: PPUSH
36233: LD_EXP 117
36237: PUSH
36238: LD_VAR 0 4
36242: ARRAY
36243: PPUSH
36244: LD_VAR 0 3
36248: PPUSH
36249: CALL_OW 3
36253: PPUSH
36254: CALL_OW 1
36258: ST_TO_ADDR
// end ; end ;
36259: GO 36088
36261: POP
36262: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36263: LD_VAR 0 1
36267: PPUSH
36268: LD_EXP 117
36272: PUSH
36273: LD_VAR 0 4
36277: ARRAY
36278: PUSH
36279: LD_INT 0
36281: PLUS
36282: PPUSH
36283: CALL_OW 505
// end ;
36287: LD_VAR 0 2
36291: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36292: LD_INT 0
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
// if not hack in hackTanks then
36298: LD_VAR 0 1
36302: PUSH
36303: LD_EXP 116
36307: IN
36308: NOT
36309: IFFALSE 36313
// exit ;
36311: GO 36398
// index := GetElementIndex ( hackTanks , hack ) ;
36313: LD_ADDR_VAR 0 5
36317: PUSH
36318: LD_EXP 116
36322: PPUSH
36323: LD_VAR 0 1
36327: PPUSH
36328: CALL 43156 0 2
36332: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36333: LD_ADDR_VAR 0 4
36337: PUSH
36338: DOUBLE
36339: LD_INT 1
36341: DEC
36342: ST_TO_ADDR
36343: LD_EXP 117
36347: PUSH
36348: LD_VAR 0 5
36352: ARRAY
36353: PUSH
36354: FOR_TO
36355: IFFALSE 36396
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36357: LD_EXP 117
36361: PUSH
36362: LD_VAR 0 5
36366: ARRAY
36367: PUSH
36368: LD_VAR 0 4
36372: ARRAY
36373: PUSH
36374: LD_INT 1
36376: ARRAY
36377: PUSH
36378: LD_VAR 0 2
36382: EQUAL
36383: IFFALSE 36394
// KillUnit ( vehicle ) ;
36385: LD_VAR 0 2
36389: PPUSH
36390: CALL_OW 66
36394: GO 36354
36396: POP
36397: POP
// end ;
36398: LD_VAR 0 3
36402: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36403: LD_EXP 121
36407: NOT
36408: IFFALSE 36443
36410: GO 36412
36412: DISABLE
// begin initMiner := true ;
36413: LD_ADDR_EXP 121
36417: PUSH
36418: LD_INT 1
36420: ST_TO_ADDR
// minersList := [ ] ;
36421: LD_ADDR_EXP 122
36425: PUSH
36426: EMPTY
36427: ST_TO_ADDR
// minerMinesList := [ ] ;
36428: LD_ADDR_EXP 123
36432: PUSH
36433: EMPTY
36434: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36435: LD_ADDR_EXP 124
36439: PUSH
36440: LD_INT 5
36442: ST_TO_ADDR
// end ;
36443: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36444: LD_EXP 121
36448: PUSH
36449: LD_INT 34
36451: PUSH
36452: LD_INT 81
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PPUSH
36459: CALL_OW 69
36463: AND
36464: IFFALSE 36925
36466: GO 36468
36468: DISABLE
36469: LD_INT 0
36471: PPUSH
36472: PPUSH
36473: PPUSH
36474: PPUSH
// begin enable ;
36475: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36476: LD_ADDR_VAR 0 1
36480: PUSH
36481: LD_INT 34
36483: PUSH
36484: LD_INT 81
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PPUSH
36491: CALL_OW 69
36495: PUSH
36496: FOR_IN
36497: IFFALSE 36569
// begin if not i in minersList then
36499: LD_VAR 0 1
36503: PUSH
36504: LD_EXP 122
36508: IN
36509: NOT
36510: IFFALSE 36567
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36512: LD_ADDR_EXP 122
36516: PUSH
36517: LD_EXP 122
36521: PPUSH
36522: LD_EXP 122
36526: PUSH
36527: LD_INT 1
36529: PLUS
36530: PPUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 1
36540: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36541: LD_ADDR_EXP 123
36545: PUSH
36546: LD_EXP 123
36550: PPUSH
36551: LD_EXP 123
36555: PUSH
36556: LD_INT 1
36558: PLUS
36559: PPUSH
36560: EMPTY
36561: PPUSH
36562: CALL_OW 1
36566: ST_TO_ADDR
// end end ;
36567: GO 36496
36569: POP
36570: POP
// for i := minerMinesList downto 1 do
36571: LD_ADDR_VAR 0 1
36575: PUSH
36576: DOUBLE
36577: LD_EXP 123
36581: INC
36582: ST_TO_ADDR
36583: LD_INT 1
36585: PUSH
36586: FOR_DOWNTO
36587: IFFALSE 36923
// begin if IsLive ( minersList [ i ] ) then
36589: LD_EXP 122
36593: PUSH
36594: LD_VAR 0 1
36598: ARRAY
36599: PPUSH
36600: CALL_OW 300
36604: IFFALSE 36632
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36606: LD_EXP 122
36610: PUSH
36611: LD_VAR 0 1
36615: ARRAY
36616: PPUSH
36617: LD_EXP 123
36621: PUSH
36622: LD_VAR 0 1
36626: ARRAY
36627: PPUSH
36628: CALL_OW 505
// if not minerMinesList [ i ] then
36632: LD_EXP 123
36636: PUSH
36637: LD_VAR 0 1
36641: ARRAY
36642: NOT
36643: IFFALSE 36647
// continue ;
36645: GO 36586
// for j := minerMinesList [ i ] downto 1 do
36647: LD_ADDR_VAR 0 2
36651: PUSH
36652: DOUBLE
36653: LD_EXP 123
36657: PUSH
36658: LD_VAR 0 1
36662: ARRAY
36663: INC
36664: ST_TO_ADDR
36665: LD_INT 1
36667: PUSH
36668: FOR_DOWNTO
36669: IFFALSE 36919
// begin side := GetSide ( minersList [ i ] ) ;
36671: LD_ADDR_VAR 0 3
36675: PUSH
36676: LD_EXP 122
36680: PUSH
36681: LD_VAR 0 1
36685: ARRAY
36686: PPUSH
36687: CALL_OW 255
36691: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36692: LD_ADDR_VAR 0 4
36696: PUSH
36697: LD_EXP 123
36701: PUSH
36702: LD_VAR 0 1
36706: ARRAY
36707: PUSH
36708: LD_VAR 0 2
36712: ARRAY
36713: PUSH
36714: LD_INT 1
36716: ARRAY
36717: PPUSH
36718: LD_EXP 123
36722: PUSH
36723: LD_VAR 0 1
36727: ARRAY
36728: PUSH
36729: LD_VAR 0 2
36733: ARRAY
36734: PUSH
36735: LD_INT 2
36737: ARRAY
36738: PPUSH
36739: CALL_OW 428
36743: ST_TO_ADDR
// if not tmp then
36744: LD_VAR 0 4
36748: NOT
36749: IFFALSE 36753
// continue ;
36751: GO 36668
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36753: LD_VAR 0 4
36757: PUSH
36758: LD_INT 81
36760: PUSH
36761: LD_VAR 0 3
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PPUSH
36770: CALL_OW 69
36774: IN
36775: PUSH
36776: LD_EXP 123
36780: PUSH
36781: LD_VAR 0 1
36785: ARRAY
36786: PUSH
36787: LD_VAR 0 2
36791: ARRAY
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: LD_EXP 123
36801: PUSH
36802: LD_VAR 0 1
36806: ARRAY
36807: PUSH
36808: LD_VAR 0 2
36812: ARRAY
36813: PUSH
36814: LD_INT 2
36816: ARRAY
36817: PPUSH
36818: CALL_OW 458
36822: AND
36823: IFFALSE 36917
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36825: LD_EXP 123
36829: PUSH
36830: LD_VAR 0 1
36834: ARRAY
36835: PUSH
36836: LD_VAR 0 2
36840: ARRAY
36841: PUSH
36842: LD_INT 1
36844: ARRAY
36845: PPUSH
36846: LD_EXP 123
36850: PUSH
36851: LD_VAR 0 1
36855: ARRAY
36856: PUSH
36857: LD_VAR 0 2
36861: ARRAY
36862: PUSH
36863: LD_INT 2
36865: ARRAY
36866: PPUSH
36867: LD_VAR 0 3
36871: PPUSH
36872: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36876: LD_ADDR_EXP 123
36880: PUSH
36881: LD_EXP 123
36885: PPUSH
36886: LD_VAR 0 1
36890: PPUSH
36891: LD_EXP 123
36895: PUSH
36896: LD_VAR 0 1
36900: ARRAY
36901: PPUSH
36902: LD_VAR 0 2
36906: PPUSH
36907: CALL_OW 3
36911: PPUSH
36912: CALL_OW 1
36916: ST_TO_ADDR
// end ; end ;
36917: GO 36668
36919: POP
36920: POP
// end ;
36921: GO 36586
36923: POP
36924: POP
// end ;
36925: PPOPN 4
36927: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36928: LD_INT 0
36930: PPUSH
36931: PPUSH
// result := false ;
36932: LD_ADDR_VAR 0 4
36936: PUSH
36937: LD_INT 0
36939: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 264
36949: PUSH
36950: LD_INT 81
36952: EQUAL
36953: NOT
36954: IFFALSE 36958
// exit ;
36956: GO 37198
// index := GetElementIndex ( minersList , unit ) ;
36958: LD_ADDR_VAR 0 5
36962: PUSH
36963: LD_EXP 122
36967: PPUSH
36968: LD_VAR 0 1
36972: PPUSH
36973: CALL 43156 0 2
36977: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36978: LD_EXP 123
36982: PUSH
36983: LD_VAR 0 5
36987: ARRAY
36988: PUSH
36989: LD_EXP 124
36993: GREATEREQUAL
36994: IFFALSE 36998
// exit ;
36996: GO 37198
// ComMoveXY ( unit , x , y ) ;
36998: LD_VAR 0 1
37002: PPUSH
37003: LD_VAR 0 2
37007: PPUSH
37008: LD_VAR 0 3
37012: PPUSH
37013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37017: LD_INT 35
37019: PPUSH
37020: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37024: LD_VAR 0 1
37028: PPUSH
37029: LD_VAR 0 2
37033: PPUSH
37034: LD_VAR 0 3
37038: PPUSH
37039: CALL 74908 0 3
37043: NOT
37044: PUSH
37045: LD_VAR 0 1
37049: PPUSH
37050: CALL_OW 314
37054: AND
37055: IFFALSE 37059
// exit ;
37057: GO 37198
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37059: LD_VAR 0 2
37063: PPUSH
37064: LD_VAR 0 3
37068: PPUSH
37069: CALL_OW 428
37073: PUSH
37074: LD_VAR 0 1
37078: EQUAL
37079: PUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 314
37089: NOT
37090: AND
37091: IFFALSE 37017
// PlaySoundXY ( x , y , PlantMine ) ;
37093: LD_VAR 0 2
37097: PPUSH
37098: LD_VAR 0 3
37102: PPUSH
37103: LD_STRING PlantMine
37105: PPUSH
37106: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37110: LD_VAR 0 2
37114: PPUSH
37115: LD_VAR 0 3
37119: PPUSH
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL_OW 255
37129: PPUSH
37130: LD_INT 0
37132: PPUSH
37133: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37137: LD_ADDR_EXP 123
37141: PUSH
37142: LD_EXP 123
37146: PPUSH
37147: LD_VAR 0 5
37151: PUSH
37152: LD_EXP 123
37156: PUSH
37157: LD_VAR 0 5
37161: ARRAY
37162: PUSH
37163: LD_INT 1
37165: PLUS
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PPUSH
37171: LD_VAR 0 2
37175: PUSH
37176: LD_VAR 0 3
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PPUSH
37185: CALL 43371 0 3
37189: ST_TO_ADDR
// result := true ;
37190: LD_ADDR_VAR 0 4
37194: PUSH
37195: LD_INT 1
37197: ST_TO_ADDR
// end ;
37198: LD_VAR 0 4
37202: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37203: LD_INT 0
37205: PPUSH
37206: PPUSH
37207: PPUSH
// if not unit in minersList then
37208: LD_VAR 0 1
37212: PUSH
37213: LD_EXP 122
37217: IN
37218: NOT
37219: IFFALSE 37223
// exit ;
37221: GO 37615
// index := GetElementIndex ( minersList , unit ) ;
37223: LD_ADDR_VAR 0 6
37227: PUSH
37228: LD_EXP 122
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL 43156 0 2
37242: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37243: LD_ADDR_VAR 0 5
37247: PUSH
37248: DOUBLE
37249: LD_EXP 123
37253: PUSH
37254: LD_VAR 0 6
37258: ARRAY
37259: INC
37260: ST_TO_ADDR
37261: LD_INT 1
37263: PUSH
37264: FOR_DOWNTO
37265: IFFALSE 37426
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37267: LD_EXP 123
37271: PUSH
37272: LD_VAR 0 6
37276: ARRAY
37277: PUSH
37278: LD_VAR 0 5
37282: ARRAY
37283: PUSH
37284: LD_INT 1
37286: ARRAY
37287: PUSH
37288: LD_VAR 0 2
37292: EQUAL
37293: PUSH
37294: LD_EXP 123
37298: PUSH
37299: LD_VAR 0 6
37303: ARRAY
37304: PUSH
37305: LD_VAR 0 5
37309: ARRAY
37310: PUSH
37311: LD_INT 2
37313: ARRAY
37314: PUSH
37315: LD_VAR 0 3
37319: EQUAL
37320: AND
37321: IFFALSE 37424
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37323: LD_EXP 123
37327: PUSH
37328: LD_VAR 0 6
37332: ARRAY
37333: PUSH
37334: LD_VAR 0 5
37338: ARRAY
37339: PUSH
37340: LD_INT 1
37342: ARRAY
37343: PPUSH
37344: LD_EXP 123
37348: PUSH
37349: LD_VAR 0 6
37353: ARRAY
37354: PUSH
37355: LD_VAR 0 5
37359: ARRAY
37360: PUSH
37361: LD_INT 2
37363: ARRAY
37364: PPUSH
37365: LD_VAR 0 1
37369: PPUSH
37370: CALL_OW 255
37374: PPUSH
37375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37379: LD_ADDR_EXP 123
37383: PUSH
37384: LD_EXP 123
37388: PPUSH
37389: LD_VAR 0 6
37393: PPUSH
37394: LD_EXP 123
37398: PUSH
37399: LD_VAR 0 6
37403: ARRAY
37404: PPUSH
37405: LD_VAR 0 5
37409: PPUSH
37410: CALL_OW 3
37414: PPUSH
37415: CALL_OW 1
37419: ST_TO_ADDR
// exit ;
37420: POP
37421: POP
37422: GO 37615
// end ; end ;
37424: GO 37264
37426: POP
37427: POP
// for i := minerMinesList [ index ] downto 1 do
37428: LD_ADDR_VAR 0 5
37432: PUSH
37433: DOUBLE
37434: LD_EXP 123
37438: PUSH
37439: LD_VAR 0 6
37443: ARRAY
37444: INC
37445: ST_TO_ADDR
37446: LD_INT 1
37448: PUSH
37449: FOR_DOWNTO
37450: IFFALSE 37613
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37452: LD_EXP 123
37456: PUSH
37457: LD_VAR 0 6
37461: ARRAY
37462: PUSH
37463: LD_VAR 0 5
37467: ARRAY
37468: PUSH
37469: LD_INT 1
37471: ARRAY
37472: PPUSH
37473: LD_EXP 123
37477: PUSH
37478: LD_VAR 0 6
37482: ARRAY
37483: PUSH
37484: LD_VAR 0 5
37488: ARRAY
37489: PUSH
37490: LD_INT 2
37492: ARRAY
37493: PPUSH
37494: LD_VAR 0 2
37498: PPUSH
37499: LD_VAR 0 3
37503: PPUSH
37504: CALL_OW 298
37508: PUSH
37509: LD_INT 6
37511: LESS
37512: IFFALSE 37611
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37514: LD_EXP 123
37518: PUSH
37519: LD_VAR 0 6
37523: ARRAY
37524: PUSH
37525: LD_VAR 0 5
37529: ARRAY
37530: PUSH
37531: LD_INT 1
37533: ARRAY
37534: PPUSH
37535: LD_EXP 123
37539: PUSH
37540: LD_VAR 0 6
37544: ARRAY
37545: PUSH
37546: LD_VAR 0 5
37550: ARRAY
37551: PUSH
37552: LD_INT 2
37554: ARRAY
37555: PPUSH
37556: LD_VAR 0 1
37560: PPUSH
37561: CALL_OW 255
37565: PPUSH
37566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37570: LD_ADDR_EXP 123
37574: PUSH
37575: LD_EXP 123
37579: PPUSH
37580: LD_VAR 0 6
37584: PPUSH
37585: LD_EXP 123
37589: PUSH
37590: LD_VAR 0 6
37594: ARRAY
37595: PPUSH
37596: LD_VAR 0 5
37600: PPUSH
37601: CALL_OW 3
37605: PPUSH
37606: CALL_OW 1
37610: ST_TO_ADDR
// end ; end ;
37611: GO 37449
37613: POP
37614: POP
// end ;
37615: LD_VAR 0 4
37619: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37620: LD_INT 0
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
37630: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 264
37640: PUSH
37641: LD_INT 81
37643: EQUAL
37644: NOT
37645: PUSH
37646: LD_VAR 0 1
37650: PUSH
37651: LD_EXP 122
37655: IN
37656: NOT
37657: OR
37658: IFFALSE 37662
// exit ;
37660: GO 37984
// index := GetElementIndex ( minersList , unit ) ;
37662: LD_ADDR_VAR 0 6
37666: PUSH
37667: LD_EXP 122
37671: PPUSH
37672: LD_VAR 0 1
37676: PPUSH
37677: CALL 43156 0 2
37681: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37682: LD_ADDR_VAR 0 8
37686: PUSH
37687: LD_EXP 124
37691: PUSH
37692: LD_EXP 123
37696: PUSH
37697: LD_VAR 0 6
37701: ARRAY
37702: MINUS
37703: ST_TO_ADDR
// if not minesFreeAmount then
37704: LD_VAR 0 8
37708: NOT
37709: IFFALSE 37713
// exit ;
37711: GO 37984
// tmp := [ ] ;
37713: LD_ADDR_VAR 0 7
37717: PUSH
37718: EMPTY
37719: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37720: LD_ADDR_VAR 0 5
37724: PUSH
37725: DOUBLE
37726: LD_INT 1
37728: DEC
37729: ST_TO_ADDR
37730: LD_VAR 0 8
37734: PUSH
37735: FOR_TO
37736: IFFALSE 37931
// begin _d := rand ( 0 , 5 ) ;
37738: LD_ADDR_VAR 0 11
37742: PUSH
37743: LD_INT 0
37745: PPUSH
37746: LD_INT 5
37748: PPUSH
37749: CALL_OW 12
37753: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37754: LD_ADDR_VAR 0 12
37758: PUSH
37759: LD_INT 2
37761: PPUSH
37762: LD_INT 6
37764: PPUSH
37765: CALL_OW 12
37769: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37770: LD_ADDR_VAR 0 9
37774: PUSH
37775: LD_VAR 0 2
37779: PPUSH
37780: LD_VAR 0 11
37784: PPUSH
37785: LD_VAR 0 12
37789: PPUSH
37790: CALL_OW 272
37794: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37795: LD_ADDR_VAR 0 10
37799: PUSH
37800: LD_VAR 0 3
37804: PPUSH
37805: LD_VAR 0 11
37809: PPUSH
37810: LD_VAR 0 12
37814: PPUSH
37815: CALL_OW 273
37819: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37820: LD_VAR 0 9
37824: PPUSH
37825: LD_VAR 0 10
37829: PPUSH
37830: CALL_OW 488
37834: PUSH
37835: LD_VAR 0 9
37839: PUSH
37840: LD_VAR 0 10
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_VAR 0 7
37853: IN
37854: NOT
37855: AND
37856: PUSH
37857: LD_VAR 0 9
37861: PPUSH
37862: LD_VAR 0 10
37866: PPUSH
37867: CALL_OW 458
37871: NOT
37872: AND
37873: IFFALSE 37915
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37875: LD_ADDR_VAR 0 7
37879: PUSH
37880: LD_VAR 0 7
37884: PPUSH
37885: LD_VAR 0 7
37889: PUSH
37890: LD_INT 1
37892: PLUS
37893: PPUSH
37894: LD_VAR 0 9
37898: PUSH
37899: LD_VAR 0 10
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PPUSH
37908: CALL_OW 1
37912: ST_TO_ADDR
37913: GO 37929
// i := i - 1 ;
37915: LD_ADDR_VAR 0 5
37919: PUSH
37920: LD_VAR 0 5
37924: PUSH
37925: LD_INT 1
37927: MINUS
37928: ST_TO_ADDR
// end ;
37929: GO 37735
37931: POP
37932: POP
// for i in tmp do
37933: LD_ADDR_VAR 0 5
37937: PUSH
37938: LD_VAR 0 7
37942: PUSH
37943: FOR_IN
37944: IFFALSE 37982
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37946: LD_VAR 0 1
37950: PPUSH
37951: LD_VAR 0 5
37955: PUSH
37956: LD_INT 1
37958: ARRAY
37959: PPUSH
37960: LD_VAR 0 5
37964: PUSH
37965: LD_INT 2
37967: ARRAY
37968: PPUSH
37969: CALL 36928 0 3
37973: NOT
37974: IFFALSE 37980
// exit ;
37976: POP
37977: POP
37978: GO 37984
37980: GO 37943
37982: POP
37983: POP
// end ;
37984: LD_VAR 0 4
37988: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37989: LD_INT 0
37991: PPUSH
37992: PPUSH
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
37997: PPUSH
// if not GetClass ( unit ) = class_sniper then
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 257
38007: PUSH
38008: LD_INT 5
38010: EQUAL
38011: NOT
38012: IFFALSE 38016
// exit ;
38014: GO 38404
// dist := 8 ;
38016: LD_ADDR_VAR 0 5
38020: PUSH
38021: LD_INT 8
38023: ST_TO_ADDR
// viewRange := 12 ;
38024: LD_ADDR_VAR 0 7
38028: PUSH
38029: LD_INT 12
38031: ST_TO_ADDR
// side := GetSide ( unit ) ;
38032: LD_ADDR_VAR 0 6
38036: PUSH
38037: LD_VAR 0 1
38041: PPUSH
38042: CALL_OW 255
38046: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38047: LD_INT 61
38049: PPUSH
38050: LD_VAR 0 6
38054: PPUSH
38055: CALL_OW 321
38059: PUSH
38060: LD_INT 2
38062: EQUAL
38063: IFFALSE 38073
// viewRange := 16 ;
38065: LD_ADDR_VAR 0 7
38069: PUSH
38070: LD_INT 16
38072: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38073: LD_VAR 0 1
38077: PPUSH
38078: LD_VAR 0 2
38082: PPUSH
38083: LD_VAR 0 3
38087: PPUSH
38088: CALL_OW 297
38092: PUSH
38093: LD_VAR 0 5
38097: GREATER
38098: IFFALSE 38177
// begin ComMoveXY ( unit , x , y ) ;
38100: LD_VAR 0 1
38104: PPUSH
38105: LD_VAR 0 2
38109: PPUSH
38110: LD_VAR 0 3
38114: PPUSH
38115: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38119: LD_INT 35
38121: PPUSH
38122: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38126: LD_VAR 0 1
38130: PPUSH
38131: LD_VAR 0 2
38135: PPUSH
38136: LD_VAR 0 3
38140: PPUSH
38141: CALL 74908 0 3
38145: NOT
38146: IFFALSE 38150
// exit ;
38148: GO 38404
// until GetDistUnitXY ( unit , x , y ) < dist ;
38150: LD_VAR 0 1
38154: PPUSH
38155: LD_VAR 0 2
38159: PPUSH
38160: LD_VAR 0 3
38164: PPUSH
38165: CALL_OW 297
38169: PUSH
38170: LD_VAR 0 5
38174: LESS
38175: IFFALSE 38119
// end ; ComTurnXY ( unit , x , y ) ;
38177: LD_VAR 0 1
38181: PPUSH
38182: LD_VAR 0 2
38186: PPUSH
38187: LD_VAR 0 3
38191: PPUSH
38192: CALL_OW 118
// wait ( 5 ) ;
38196: LD_INT 5
38198: PPUSH
38199: CALL_OW 67
// _d := GetDir ( unit ) ;
38203: LD_ADDR_VAR 0 10
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 254
38217: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38218: LD_ADDR_VAR 0 8
38222: PUSH
38223: LD_VAR 0 1
38227: PPUSH
38228: CALL_OW 250
38232: PPUSH
38233: LD_VAR 0 10
38237: PPUSH
38238: LD_VAR 0 5
38242: PPUSH
38243: CALL_OW 272
38247: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38248: LD_ADDR_VAR 0 9
38252: PUSH
38253: LD_VAR 0 1
38257: PPUSH
38258: CALL_OW 251
38262: PPUSH
38263: LD_VAR 0 10
38267: PPUSH
38268: LD_VAR 0 5
38272: PPUSH
38273: CALL_OW 273
38277: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38278: LD_VAR 0 8
38282: PPUSH
38283: LD_VAR 0 9
38287: PPUSH
38288: CALL_OW 488
38292: NOT
38293: IFFALSE 38297
// exit ;
38295: GO 38404
// ComAnimCustom ( unit , 1 ) ;
38297: LD_VAR 0 1
38301: PPUSH
38302: LD_INT 1
38304: PPUSH
38305: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38309: LD_VAR 0 8
38313: PPUSH
38314: LD_VAR 0 9
38318: PPUSH
38319: LD_VAR 0 6
38323: PPUSH
38324: LD_VAR 0 7
38328: PPUSH
38329: CALL_OW 330
// repeat wait ( 1 ) ;
38333: LD_INT 1
38335: PPUSH
38336: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 316
38349: PUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: CALL_OW 314
38359: OR
38360: PUSH
38361: LD_VAR 0 1
38365: PPUSH
38366: CALL_OW 302
38370: NOT
38371: OR
38372: PUSH
38373: LD_VAR 0 1
38377: PPUSH
38378: CALL_OW 301
38382: OR
38383: IFFALSE 38333
// RemoveSeeing ( _x , _y , side ) ;
38385: LD_VAR 0 8
38389: PPUSH
38390: LD_VAR 0 9
38394: PPUSH
38395: LD_VAR 0 6
38399: PPUSH
38400: CALL_OW 331
// end ; end_of_file
38404: LD_VAR 0 4
38408: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38409: LD_INT 0
38411: PPUSH
38412: PPUSH
// if exist_mode then
38413: LD_VAR 0 2
38417: IFFALSE 38442
// unit := CreateCharacter ( prefix & ident ) else
38419: LD_ADDR_VAR 0 5
38423: PUSH
38424: LD_VAR 0 3
38428: PUSH
38429: LD_VAR 0 1
38433: STR
38434: PPUSH
38435: CALL_OW 34
38439: ST_TO_ADDR
38440: GO 38457
// unit := NewCharacter ( ident ) ;
38442: LD_ADDR_VAR 0 5
38446: PUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 25
38456: ST_TO_ADDR
// result := unit ;
38457: LD_ADDR_VAR 0 4
38461: PUSH
38462: LD_VAR 0 5
38466: ST_TO_ADDR
// end ;
38467: LD_VAR 0 4
38471: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38472: LD_INT 0
38474: PPUSH
38475: PPUSH
// if not side or not nation then
38476: LD_VAR 0 1
38480: NOT
38481: PUSH
38482: LD_VAR 0 2
38486: NOT
38487: OR
38488: IFFALSE 38492
// exit ;
38490: GO 39260
// case nation of nation_american :
38492: LD_VAR 0 2
38496: PUSH
38497: LD_INT 1
38499: DOUBLE
38500: EQUAL
38501: IFTRUE 38505
38503: GO 38719
38505: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38506: LD_ADDR_VAR 0 4
38510: PUSH
38511: LD_INT 35
38513: PUSH
38514: LD_INT 45
38516: PUSH
38517: LD_INT 46
38519: PUSH
38520: LD_INT 47
38522: PUSH
38523: LD_INT 82
38525: PUSH
38526: LD_INT 83
38528: PUSH
38529: LD_INT 84
38531: PUSH
38532: LD_INT 85
38534: PUSH
38535: LD_INT 86
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: LD_INT 6
38546: PUSH
38547: LD_INT 15
38549: PUSH
38550: LD_INT 16
38552: PUSH
38553: LD_INT 7
38555: PUSH
38556: LD_INT 12
38558: PUSH
38559: LD_INT 13
38561: PUSH
38562: LD_INT 10
38564: PUSH
38565: LD_INT 14
38567: PUSH
38568: LD_INT 20
38570: PUSH
38571: LD_INT 21
38573: PUSH
38574: LD_INT 22
38576: PUSH
38577: LD_INT 25
38579: PUSH
38580: LD_INT 32
38582: PUSH
38583: LD_INT 27
38585: PUSH
38586: LD_INT 36
38588: PUSH
38589: LD_INT 69
38591: PUSH
38592: LD_INT 39
38594: PUSH
38595: LD_INT 34
38597: PUSH
38598: LD_INT 40
38600: PUSH
38601: LD_INT 48
38603: PUSH
38604: LD_INT 49
38606: PUSH
38607: LD_INT 50
38609: PUSH
38610: LD_INT 51
38612: PUSH
38613: LD_INT 52
38615: PUSH
38616: LD_INT 53
38618: PUSH
38619: LD_INT 54
38621: PUSH
38622: LD_INT 55
38624: PUSH
38625: LD_INT 56
38627: PUSH
38628: LD_INT 57
38630: PUSH
38631: LD_INT 58
38633: PUSH
38634: LD_INT 59
38636: PUSH
38637: LD_INT 60
38639: PUSH
38640: LD_INT 61
38642: PUSH
38643: LD_INT 62
38645: PUSH
38646: LD_INT 80
38648: PUSH
38649: LD_INT 82
38651: PUSH
38652: LD_INT 83
38654: PUSH
38655: LD_INT 84
38657: PUSH
38658: LD_INT 85
38660: PUSH
38661: LD_INT 86
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: ST_TO_ADDR
38717: GO 39184
38719: LD_INT 2
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38953
38727: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38728: LD_ADDR_VAR 0 4
38732: PUSH
38733: LD_INT 35
38735: PUSH
38736: LD_INT 45
38738: PUSH
38739: LD_INT 46
38741: PUSH
38742: LD_INT 47
38744: PUSH
38745: LD_INT 82
38747: PUSH
38748: LD_INT 83
38750: PUSH
38751: LD_INT 84
38753: PUSH
38754: LD_INT 85
38756: PUSH
38757: LD_INT 87
38759: PUSH
38760: LD_INT 70
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 11
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: LD_INT 4
38774: PUSH
38775: LD_INT 5
38777: PUSH
38778: LD_INT 6
38780: PUSH
38781: LD_INT 15
38783: PUSH
38784: LD_INT 18
38786: PUSH
38787: LD_INT 7
38789: PUSH
38790: LD_INT 17
38792: PUSH
38793: LD_INT 8
38795: PUSH
38796: LD_INT 20
38798: PUSH
38799: LD_INT 21
38801: PUSH
38802: LD_INT 22
38804: PUSH
38805: LD_INT 72
38807: PUSH
38808: LD_INT 26
38810: PUSH
38811: LD_INT 69
38813: PUSH
38814: LD_INT 39
38816: PUSH
38817: LD_INT 40
38819: PUSH
38820: LD_INT 41
38822: PUSH
38823: LD_INT 42
38825: PUSH
38826: LD_INT 43
38828: PUSH
38829: LD_INT 48
38831: PUSH
38832: LD_INT 49
38834: PUSH
38835: LD_INT 50
38837: PUSH
38838: LD_INT 51
38840: PUSH
38841: LD_INT 52
38843: PUSH
38844: LD_INT 53
38846: PUSH
38847: LD_INT 54
38849: PUSH
38850: LD_INT 55
38852: PUSH
38853: LD_INT 56
38855: PUSH
38856: LD_INT 60
38858: PUSH
38859: LD_INT 61
38861: PUSH
38862: LD_INT 62
38864: PUSH
38865: LD_INT 66
38867: PUSH
38868: LD_INT 67
38870: PUSH
38871: LD_INT 68
38873: PUSH
38874: LD_INT 81
38876: PUSH
38877: LD_INT 82
38879: PUSH
38880: LD_INT 83
38882: PUSH
38883: LD_INT 84
38885: PUSH
38886: LD_INT 85
38888: PUSH
38889: LD_INT 87
38891: PUSH
38892: LD_INT 88
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: ST_TO_ADDR
38951: GO 39184
38953: LD_INT 3
38955: DOUBLE
38956: EQUAL
38957: IFTRUE 38961
38959: GO 39183
38961: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38962: LD_ADDR_VAR 0 4
38966: PUSH
38967: LD_INT 46
38969: PUSH
38970: LD_INT 47
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: LD_INT 82
38981: PUSH
38982: LD_INT 83
38984: PUSH
38985: LD_INT 84
38987: PUSH
38988: LD_INT 85
38990: PUSH
38991: LD_INT 86
38993: PUSH
38994: LD_INT 11
38996: PUSH
38997: LD_INT 9
38999: PUSH
39000: LD_INT 20
39002: PUSH
39003: LD_INT 19
39005: PUSH
39006: LD_INT 21
39008: PUSH
39009: LD_INT 24
39011: PUSH
39012: LD_INT 22
39014: PUSH
39015: LD_INT 25
39017: PUSH
39018: LD_INT 28
39020: PUSH
39021: LD_INT 29
39023: PUSH
39024: LD_INT 30
39026: PUSH
39027: LD_INT 31
39029: PUSH
39030: LD_INT 37
39032: PUSH
39033: LD_INT 38
39035: PUSH
39036: LD_INT 32
39038: PUSH
39039: LD_INT 27
39041: PUSH
39042: LD_INT 33
39044: PUSH
39045: LD_INT 69
39047: PUSH
39048: LD_INT 39
39050: PUSH
39051: LD_INT 34
39053: PUSH
39054: LD_INT 40
39056: PUSH
39057: LD_INT 71
39059: PUSH
39060: LD_INT 23
39062: PUSH
39063: LD_INT 44
39065: PUSH
39066: LD_INT 48
39068: PUSH
39069: LD_INT 49
39071: PUSH
39072: LD_INT 50
39074: PUSH
39075: LD_INT 51
39077: PUSH
39078: LD_INT 52
39080: PUSH
39081: LD_INT 53
39083: PUSH
39084: LD_INT 54
39086: PUSH
39087: LD_INT 55
39089: PUSH
39090: LD_INT 56
39092: PUSH
39093: LD_INT 57
39095: PUSH
39096: LD_INT 58
39098: PUSH
39099: LD_INT 59
39101: PUSH
39102: LD_INT 63
39104: PUSH
39105: LD_INT 64
39107: PUSH
39108: LD_INT 65
39110: PUSH
39111: LD_INT 82
39113: PUSH
39114: LD_INT 83
39116: PUSH
39117: LD_INT 84
39119: PUSH
39120: LD_INT 85
39122: PUSH
39123: LD_INT 86
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: ST_TO_ADDR
39181: GO 39184
39183: POP
// if state > - 1 and state < 3 then
39184: LD_VAR 0 3
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: GREATER
39193: PUSH
39194: LD_VAR 0 3
39198: PUSH
39199: LD_INT 3
39201: LESS
39202: AND
39203: IFFALSE 39260
// for i in result do
39205: LD_ADDR_VAR 0 5
39209: PUSH
39210: LD_VAR 0 4
39214: PUSH
39215: FOR_IN
39216: IFFALSE 39258
// if GetTech ( i , side ) <> state then
39218: LD_VAR 0 5
39222: PPUSH
39223: LD_VAR 0 1
39227: PPUSH
39228: CALL_OW 321
39232: PUSH
39233: LD_VAR 0 3
39237: NONEQUAL
39238: IFFALSE 39256
// result := result diff i ;
39240: LD_ADDR_VAR 0 4
39244: PUSH
39245: LD_VAR 0 4
39249: PUSH
39250: LD_VAR 0 5
39254: DIFF
39255: ST_TO_ADDR
39256: GO 39215
39258: POP
39259: POP
// end ;
39260: LD_VAR 0 4
39264: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39265: LD_INT 0
39267: PPUSH
39268: PPUSH
39269: PPUSH
// result := true ;
39270: LD_ADDR_VAR 0 3
39274: PUSH
39275: LD_INT 1
39277: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39278: LD_ADDR_VAR 0 5
39282: PUSH
39283: LD_VAR 0 2
39287: PPUSH
39288: CALL_OW 480
39292: ST_TO_ADDR
// if not tmp then
39293: LD_VAR 0 5
39297: NOT
39298: IFFALSE 39302
// exit ;
39300: GO 39351
// for i in tmp do
39302: LD_ADDR_VAR 0 4
39306: PUSH
39307: LD_VAR 0 5
39311: PUSH
39312: FOR_IN
39313: IFFALSE 39349
// if GetTech ( i , side ) <> state_researched then
39315: LD_VAR 0 4
39319: PPUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: CALL_OW 321
39329: PUSH
39330: LD_INT 2
39332: NONEQUAL
39333: IFFALSE 39347
// begin result := false ;
39335: LD_ADDR_VAR 0 3
39339: PUSH
39340: LD_INT 0
39342: ST_TO_ADDR
// exit ;
39343: POP
39344: POP
39345: GO 39351
// end ;
39347: GO 39312
39349: POP
39350: POP
// end ;
39351: LD_VAR 0 3
39355: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39356: LD_INT 0
39358: PPUSH
39359: PPUSH
39360: PPUSH
39361: PPUSH
39362: PPUSH
39363: PPUSH
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
39369: PPUSH
39370: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39371: LD_VAR 0 1
39375: NOT
39376: PUSH
39377: LD_VAR 0 1
39381: PPUSH
39382: CALL_OW 257
39386: PUSH
39387: LD_INT 9
39389: NONEQUAL
39390: OR
39391: IFFALSE 39395
// exit ;
39393: GO 39968
// side := GetSide ( unit ) ;
39395: LD_ADDR_VAR 0 9
39399: PUSH
39400: LD_VAR 0 1
39404: PPUSH
39405: CALL_OW 255
39409: ST_TO_ADDR
// tech_space := tech_spacanom ;
39410: LD_ADDR_VAR 0 12
39414: PUSH
39415: LD_INT 29
39417: ST_TO_ADDR
// tech_time := tech_taurad ;
39418: LD_ADDR_VAR 0 13
39422: PUSH
39423: LD_INT 28
39425: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39426: LD_ADDR_VAR 0 11
39430: PUSH
39431: LD_VAR 0 1
39435: PPUSH
39436: CALL_OW 310
39440: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39441: LD_VAR 0 11
39445: PPUSH
39446: CALL_OW 247
39450: PUSH
39451: LD_INT 2
39453: EQUAL
39454: IFFALSE 39458
// exit ;
39456: GO 39968
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39458: LD_ADDR_VAR 0 8
39462: PUSH
39463: LD_INT 81
39465: PUSH
39466: LD_VAR 0 9
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 21
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PPUSH
39496: CALL_OW 69
39500: ST_TO_ADDR
// if not tmp then
39501: LD_VAR 0 8
39505: NOT
39506: IFFALSE 39510
// exit ;
39508: GO 39968
// if in_unit then
39510: LD_VAR 0 11
39514: IFFALSE 39538
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39516: LD_ADDR_VAR 0 10
39520: PUSH
39521: LD_VAR 0 8
39525: PPUSH
39526: LD_VAR 0 11
39530: PPUSH
39531: CALL_OW 74
39535: ST_TO_ADDR
39536: GO 39558
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39538: LD_ADDR_VAR 0 10
39542: PUSH
39543: LD_VAR 0 8
39547: PPUSH
39548: LD_VAR 0 1
39552: PPUSH
39553: CALL_OW 74
39557: ST_TO_ADDR
// if not enemy then
39558: LD_VAR 0 10
39562: NOT
39563: IFFALSE 39567
// exit ;
39565: GO 39968
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39567: LD_VAR 0 11
39571: PUSH
39572: LD_VAR 0 11
39576: PPUSH
39577: LD_VAR 0 10
39581: PPUSH
39582: CALL_OW 296
39586: PUSH
39587: LD_INT 13
39589: GREATER
39590: AND
39591: PUSH
39592: LD_VAR 0 1
39596: PPUSH
39597: LD_VAR 0 10
39601: PPUSH
39602: CALL_OW 296
39606: PUSH
39607: LD_INT 12
39609: GREATER
39610: OR
39611: IFFALSE 39615
// exit ;
39613: GO 39968
// missile := [ 1 ] ;
39615: LD_ADDR_VAR 0 14
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39626: LD_VAR 0 9
39630: PPUSH
39631: LD_VAR 0 12
39635: PPUSH
39636: CALL_OW 325
39640: IFFALSE 39669
// missile := Replace ( missile , missile + 1 , 2 ) ;
39642: LD_ADDR_VAR 0 14
39646: PUSH
39647: LD_VAR 0 14
39651: PPUSH
39652: LD_VAR 0 14
39656: PUSH
39657: LD_INT 1
39659: PLUS
39660: PPUSH
39661: LD_INT 2
39663: PPUSH
39664: CALL_OW 1
39668: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39669: LD_VAR 0 9
39673: PPUSH
39674: LD_VAR 0 13
39678: PPUSH
39679: CALL_OW 325
39683: PUSH
39684: LD_VAR 0 10
39688: PPUSH
39689: CALL_OW 255
39693: PPUSH
39694: LD_VAR 0 13
39698: PPUSH
39699: CALL_OW 325
39703: NOT
39704: AND
39705: IFFALSE 39734
// missile := Replace ( missile , missile + 1 , 3 ) ;
39707: LD_ADDR_VAR 0 14
39711: PUSH
39712: LD_VAR 0 14
39716: PPUSH
39717: LD_VAR 0 14
39721: PUSH
39722: LD_INT 1
39724: PLUS
39725: PPUSH
39726: LD_INT 3
39728: PPUSH
39729: CALL_OW 1
39733: ST_TO_ADDR
// if missile < 2 then
39734: LD_VAR 0 14
39738: PUSH
39739: LD_INT 2
39741: LESS
39742: IFFALSE 39746
// exit ;
39744: GO 39968
// x := GetX ( enemy ) ;
39746: LD_ADDR_VAR 0 4
39750: PUSH
39751: LD_VAR 0 10
39755: PPUSH
39756: CALL_OW 250
39760: ST_TO_ADDR
// y := GetY ( enemy ) ;
39761: LD_ADDR_VAR 0 5
39765: PUSH
39766: LD_VAR 0 10
39770: PPUSH
39771: CALL_OW 251
39775: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39776: LD_ADDR_VAR 0 6
39780: PUSH
39781: LD_VAR 0 4
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PPUSH
39790: LD_INT 1
39792: PPUSH
39793: CALL_OW 12
39797: PLUS
39798: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39799: LD_ADDR_VAR 0 7
39803: PUSH
39804: LD_VAR 0 5
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PPUSH
39813: LD_INT 1
39815: PPUSH
39816: CALL_OW 12
39820: PLUS
39821: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39822: LD_VAR 0 6
39826: PPUSH
39827: LD_VAR 0 7
39831: PPUSH
39832: CALL_OW 488
39836: NOT
39837: IFFALSE 39859
// begin _x := x ;
39839: LD_ADDR_VAR 0 6
39843: PUSH
39844: LD_VAR 0 4
39848: ST_TO_ADDR
// _y := y ;
39849: LD_ADDR_VAR 0 7
39853: PUSH
39854: LD_VAR 0 5
39858: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39859: LD_ADDR_VAR 0 3
39863: PUSH
39864: LD_INT 1
39866: PPUSH
39867: LD_VAR 0 14
39871: PPUSH
39872: CALL_OW 12
39876: ST_TO_ADDR
// case i of 1 :
39877: LD_VAR 0 3
39881: PUSH
39882: LD_INT 1
39884: DOUBLE
39885: EQUAL
39886: IFTRUE 39890
39888: GO 39907
39890: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39891: LD_VAR 0 1
39895: PPUSH
39896: LD_VAR 0 10
39900: PPUSH
39901: CALL_OW 115
39905: GO 39968
39907: LD_INT 2
39909: DOUBLE
39910: EQUAL
39911: IFTRUE 39915
39913: GO 39937
39915: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39916: LD_VAR 0 1
39920: PPUSH
39921: LD_VAR 0 6
39925: PPUSH
39926: LD_VAR 0 7
39930: PPUSH
39931: CALL_OW 153
39935: GO 39968
39937: LD_INT 3
39939: DOUBLE
39940: EQUAL
39941: IFTRUE 39945
39943: GO 39967
39945: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39946: LD_VAR 0 1
39950: PPUSH
39951: LD_VAR 0 6
39955: PPUSH
39956: LD_VAR 0 7
39960: PPUSH
39961: CALL_OW 154
39965: GO 39968
39967: POP
// end ;
39968: LD_VAR 0 2
39972: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39973: LD_INT 0
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
// if not unit or not building then
39981: LD_VAR 0 1
39985: NOT
39986: PUSH
39987: LD_VAR 0 2
39991: NOT
39992: OR
39993: IFFALSE 39997
// exit ;
39995: GO 40155
// x := GetX ( building ) ;
39997: LD_ADDR_VAR 0 5
40001: PUSH
40002: LD_VAR 0 2
40006: PPUSH
40007: CALL_OW 250
40011: ST_TO_ADDR
// y := GetY ( building ) ;
40012: LD_ADDR_VAR 0 6
40016: PUSH
40017: LD_VAR 0 2
40021: PPUSH
40022: CALL_OW 251
40026: ST_TO_ADDR
// for i = 0 to 5 do
40027: LD_ADDR_VAR 0 4
40031: PUSH
40032: DOUBLE
40033: LD_INT 0
40035: DEC
40036: ST_TO_ADDR
40037: LD_INT 5
40039: PUSH
40040: FOR_TO
40041: IFFALSE 40153
// begin _x := ShiftX ( x , i , 3 ) ;
40043: LD_ADDR_VAR 0 7
40047: PUSH
40048: LD_VAR 0 5
40052: PPUSH
40053: LD_VAR 0 4
40057: PPUSH
40058: LD_INT 3
40060: PPUSH
40061: CALL_OW 272
40065: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40066: LD_ADDR_VAR 0 8
40070: PUSH
40071: LD_VAR 0 6
40075: PPUSH
40076: LD_VAR 0 4
40080: PPUSH
40081: LD_INT 3
40083: PPUSH
40084: CALL_OW 273
40088: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40089: LD_VAR 0 7
40093: PPUSH
40094: LD_VAR 0 8
40098: PPUSH
40099: CALL_OW 488
40103: NOT
40104: IFFALSE 40108
// continue ;
40106: GO 40040
// if HexInfo ( _x , _y ) = 0 then
40108: LD_VAR 0 7
40112: PPUSH
40113: LD_VAR 0 8
40117: PPUSH
40118: CALL_OW 428
40122: PUSH
40123: LD_INT 0
40125: EQUAL
40126: IFFALSE 40151
// begin ComMoveXY ( unit , _x , _y ) ;
40128: LD_VAR 0 1
40132: PPUSH
40133: LD_VAR 0 7
40137: PPUSH
40138: LD_VAR 0 8
40142: PPUSH
40143: CALL_OW 111
// exit ;
40147: POP
40148: POP
40149: GO 40155
// end ; end ;
40151: GO 40040
40153: POP
40154: POP
// end ;
40155: LD_VAR 0 3
40159: RET
// export function ScanBase ( side , base_area ) ; begin
40160: LD_INT 0
40162: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40163: LD_ADDR_VAR 0 3
40167: PUSH
40168: LD_VAR 0 2
40172: PPUSH
40173: LD_INT 81
40175: PUSH
40176: LD_VAR 0 1
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PPUSH
40185: CALL_OW 70
40189: ST_TO_ADDR
// end ;
40190: LD_VAR 0 3
40194: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40195: LD_INT 0
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
// result := false ;
40201: LD_ADDR_VAR 0 2
40205: PUSH
40206: LD_INT 0
40208: ST_TO_ADDR
// side := GetSide ( unit ) ;
40209: LD_ADDR_VAR 0 3
40213: PUSH
40214: LD_VAR 0 1
40218: PPUSH
40219: CALL_OW 255
40223: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40224: LD_ADDR_VAR 0 4
40228: PUSH
40229: LD_VAR 0 1
40233: PPUSH
40234: CALL_OW 248
40238: ST_TO_ADDR
// case nat of 1 :
40239: LD_VAR 0 4
40243: PUSH
40244: LD_INT 1
40246: DOUBLE
40247: EQUAL
40248: IFTRUE 40252
40250: GO 40263
40252: POP
// tech := tech_lassight ; 2 :
40253: LD_ADDR_VAR 0 5
40257: PUSH
40258: LD_INT 12
40260: ST_TO_ADDR
40261: GO 40302
40263: LD_INT 2
40265: DOUBLE
40266: EQUAL
40267: IFTRUE 40271
40269: GO 40282
40271: POP
// tech := tech_mortar ; 3 :
40272: LD_ADDR_VAR 0 5
40276: PUSH
40277: LD_INT 41
40279: ST_TO_ADDR
40280: GO 40302
40282: LD_INT 3
40284: DOUBLE
40285: EQUAL
40286: IFTRUE 40290
40288: GO 40301
40290: POP
// tech := tech_bazooka ; end ;
40291: LD_ADDR_VAR 0 5
40295: PUSH
40296: LD_INT 44
40298: ST_TO_ADDR
40299: GO 40302
40301: POP
// if Researched ( side , tech ) then
40302: LD_VAR 0 3
40306: PPUSH
40307: LD_VAR 0 5
40311: PPUSH
40312: CALL_OW 325
40316: IFFALSE 40343
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40318: LD_ADDR_VAR 0 2
40322: PUSH
40323: LD_INT 5
40325: PUSH
40326: LD_INT 8
40328: PUSH
40329: LD_INT 9
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: LIST
40336: PUSH
40337: LD_VAR 0 4
40341: ARRAY
40342: ST_TO_ADDR
// end ;
40343: LD_VAR 0 2
40347: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40348: LD_INT 0
40350: PPUSH
40351: PPUSH
40352: PPUSH
// if not mines then
40353: LD_VAR 0 2
40357: NOT
40358: IFFALSE 40362
// exit ;
40360: GO 40506
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40362: LD_ADDR_VAR 0 5
40366: PUSH
40367: LD_INT 81
40369: PUSH
40370: LD_VAR 0 1
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: LD_INT 21
40384: PUSH
40385: LD_INT 3
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PPUSH
40400: CALL_OW 69
40404: ST_TO_ADDR
// for i in mines do
40405: LD_ADDR_VAR 0 4
40409: PUSH
40410: LD_VAR 0 2
40414: PUSH
40415: FOR_IN
40416: IFFALSE 40504
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40418: LD_VAR 0 4
40422: PUSH
40423: LD_INT 1
40425: ARRAY
40426: PPUSH
40427: LD_VAR 0 4
40431: PUSH
40432: LD_INT 2
40434: ARRAY
40435: PPUSH
40436: CALL_OW 458
40440: NOT
40441: IFFALSE 40445
// continue ;
40443: GO 40415
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40445: LD_VAR 0 4
40449: PUSH
40450: LD_INT 1
40452: ARRAY
40453: PPUSH
40454: LD_VAR 0 4
40458: PUSH
40459: LD_INT 2
40461: ARRAY
40462: PPUSH
40463: CALL_OW 428
40467: PUSH
40468: LD_VAR 0 5
40472: IN
40473: IFFALSE 40502
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40475: LD_VAR 0 4
40479: PUSH
40480: LD_INT 1
40482: ARRAY
40483: PPUSH
40484: LD_VAR 0 4
40488: PUSH
40489: LD_INT 2
40491: ARRAY
40492: PPUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 456
// end ;
40502: GO 40415
40504: POP
40505: POP
// end ;
40506: LD_VAR 0 3
40510: RET
// export function Count ( array ) ; begin
40511: LD_INT 0
40513: PPUSH
// result := array + 0 ;
40514: LD_ADDR_VAR 0 2
40518: PUSH
40519: LD_VAR 0 1
40523: PUSH
40524: LD_INT 0
40526: PLUS
40527: ST_TO_ADDR
// end ;
40528: LD_VAR 0 2
40532: RET
// export function IsEmpty ( building ) ; begin
40533: LD_INT 0
40535: PPUSH
// if not building then
40536: LD_VAR 0 1
40540: NOT
40541: IFFALSE 40545
// exit ;
40543: GO 40588
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40545: LD_ADDR_VAR 0 2
40549: PUSH
40550: LD_VAR 0 1
40554: PUSH
40555: LD_INT 22
40557: PUSH
40558: LD_VAR 0 1
40562: PPUSH
40563: CALL_OW 255
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 58
40574: PUSH
40575: EMPTY
40576: LIST
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PPUSH
40582: CALL_OW 69
40586: IN
40587: ST_TO_ADDR
// end ;
40588: LD_VAR 0 2
40592: RET
// export function IsNotFull ( building ) ; var places ; begin
40593: LD_INT 0
40595: PPUSH
40596: PPUSH
// if not building then
40597: LD_VAR 0 1
40601: NOT
40602: IFFALSE 40606
// exit ;
40604: GO 40634
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40606: LD_ADDR_VAR 0 2
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: LD_INT 3
40618: PUSH
40619: LD_INT 62
40621: PUSH
40622: EMPTY
40623: LIST
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PPUSH
40629: CALL_OW 72
40633: ST_TO_ADDR
// end ;
40634: LD_VAR 0 2
40638: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40639: LD_INT 0
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
// tmp := [ ] ;
40645: LD_ADDR_VAR 0 3
40649: PUSH
40650: EMPTY
40651: ST_TO_ADDR
// list := [ ] ;
40652: LD_ADDR_VAR 0 5
40656: PUSH
40657: EMPTY
40658: ST_TO_ADDR
// for i = 16 to 25 do
40659: LD_ADDR_VAR 0 4
40663: PUSH
40664: DOUBLE
40665: LD_INT 16
40667: DEC
40668: ST_TO_ADDR
40669: LD_INT 25
40671: PUSH
40672: FOR_TO
40673: IFFALSE 40746
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40675: LD_ADDR_VAR 0 3
40679: PUSH
40680: LD_VAR 0 3
40684: PUSH
40685: LD_INT 22
40687: PUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 255
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 91
40704: PUSH
40705: LD_VAR 0 1
40709: PUSH
40710: LD_INT 6
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 30
40720: PUSH
40721: LD_VAR 0 4
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: LIST
40734: PUSH
40735: EMPTY
40736: LIST
40737: PPUSH
40738: CALL_OW 69
40742: ADD
40743: ST_TO_ADDR
40744: GO 40672
40746: POP
40747: POP
// for i = 1 to tmp do
40748: LD_ADDR_VAR 0 4
40752: PUSH
40753: DOUBLE
40754: LD_INT 1
40756: DEC
40757: ST_TO_ADDR
40758: LD_VAR 0 3
40762: PUSH
40763: FOR_TO
40764: IFFALSE 40852
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40766: LD_ADDR_VAR 0 5
40770: PUSH
40771: LD_VAR 0 5
40775: PUSH
40776: LD_VAR 0 3
40780: PUSH
40781: LD_VAR 0 4
40785: ARRAY
40786: PPUSH
40787: CALL_OW 266
40791: PUSH
40792: LD_VAR 0 3
40796: PUSH
40797: LD_VAR 0 4
40801: ARRAY
40802: PPUSH
40803: CALL_OW 250
40807: PUSH
40808: LD_VAR 0 3
40812: PUSH
40813: LD_VAR 0 4
40817: ARRAY
40818: PPUSH
40819: CALL_OW 251
40823: PUSH
40824: LD_VAR 0 3
40828: PUSH
40829: LD_VAR 0 4
40833: ARRAY
40834: PPUSH
40835: CALL_OW 254
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: PUSH
40846: EMPTY
40847: LIST
40848: ADD
40849: ST_TO_ADDR
40850: GO 40763
40852: POP
40853: POP
// result := list ;
40854: LD_ADDR_VAR 0 2
40858: PUSH
40859: LD_VAR 0 5
40863: ST_TO_ADDR
// end ;
40864: LD_VAR 0 2
40868: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40869: LD_INT 0
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
// if not factory then
40878: LD_VAR 0 1
40882: NOT
40883: IFFALSE 40887
// exit ;
40885: GO 41480
// if control = control_apeman then
40887: LD_VAR 0 4
40891: PUSH
40892: LD_INT 5
40894: EQUAL
40895: IFFALSE 41004
// begin tmp := UnitsInside ( factory ) ;
40897: LD_ADDR_VAR 0 8
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 313
40911: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40912: LD_VAR 0 8
40916: PPUSH
40917: LD_INT 25
40919: PUSH
40920: LD_INT 12
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PPUSH
40927: CALL_OW 72
40931: NOT
40932: IFFALSE 40942
// control := control_manual ;
40934: LD_ADDR_VAR 0 4
40938: PUSH
40939: LD_INT 1
40941: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40942: LD_ADDR_VAR 0 8
40946: PUSH
40947: LD_VAR 0 1
40951: PPUSH
40952: CALL 40639 0 1
40956: ST_TO_ADDR
// if tmp then
40957: LD_VAR 0 8
40961: IFFALSE 41004
// begin for i in tmp do
40963: LD_ADDR_VAR 0 7
40967: PUSH
40968: LD_VAR 0 8
40972: PUSH
40973: FOR_IN
40974: IFFALSE 41002
// if i [ 1 ] = b_ext_radio then
40976: LD_VAR 0 7
40980: PUSH
40981: LD_INT 1
40983: ARRAY
40984: PUSH
40985: LD_INT 22
40987: EQUAL
40988: IFFALSE 41000
// begin control := control_remote ;
40990: LD_ADDR_VAR 0 4
40994: PUSH
40995: LD_INT 2
40997: ST_TO_ADDR
// break ;
40998: GO 41002
// end ;
41000: GO 40973
41002: POP
41003: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41004: LD_VAR 0 1
41008: PPUSH
41009: LD_VAR 0 2
41013: PPUSH
41014: LD_VAR 0 3
41018: PPUSH
41019: LD_VAR 0 4
41023: PPUSH
41024: LD_VAR 0 5
41028: PPUSH
41029: CALL_OW 448
41033: IFFALSE 41068
// begin result := [ chassis , engine , control , weapon ] ;
41035: LD_ADDR_VAR 0 6
41039: PUSH
41040: LD_VAR 0 2
41044: PUSH
41045: LD_VAR 0 3
41049: PUSH
41050: LD_VAR 0 4
41054: PUSH
41055: LD_VAR 0 5
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: ST_TO_ADDR
// exit ;
41066: GO 41480
// end ; _chassis := AvailableChassisList ( factory ) ;
41068: LD_ADDR_VAR 0 9
41072: PUSH
41073: LD_VAR 0 1
41077: PPUSH
41078: CALL_OW 475
41082: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41083: LD_ADDR_VAR 0 11
41087: PUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: CALL_OW 476
41097: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41098: LD_ADDR_VAR 0 12
41102: PUSH
41103: LD_VAR 0 1
41107: PPUSH
41108: CALL_OW 477
41112: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41113: LD_ADDR_VAR 0 10
41117: PUSH
41118: LD_VAR 0 1
41122: PPUSH
41123: CALL_OW 478
41127: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41128: LD_VAR 0 9
41132: NOT
41133: PUSH
41134: LD_VAR 0 11
41138: NOT
41139: OR
41140: PUSH
41141: LD_VAR 0 12
41145: NOT
41146: OR
41147: PUSH
41148: LD_VAR 0 10
41152: NOT
41153: OR
41154: IFFALSE 41189
// begin result := [ chassis , engine , control , weapon ] ;
41156: LD_ADDR_VAR 0 6
41160: PUSH
41161: LD_VAR 0 2
41165: PUSH
41166: LD_VAR 0 3
41170: PUSH
41171: LD_VAR 0 4
41175: PUSH
41176: LD_VAR 0 5
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// exit ;
41187: GO 41480
// end ; if not chassis in _chassis then
41189: LD_VAR 0 2
41193: PUSH
41194: LD_VAR 0 9
41198: IN
41199: NOT
41200: IFFALSE 41226
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41202: LD_ADDR_VAR 0 2
41206: PUSH
41207: LD_VAR 0 9
41211: PUSH
41212: LD_INT 1
41214: PPUSH
41215: LD_VAR 0 9
41219: PPUSH
41220: CALL_OW 12
41224: ARRAY
41225: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41226: LD_VAR 0 2
41230: PPUSH
41231: LD_VAR 0 3
41235: PPUSH
41236: CALL 41485 0 2
41240: NOT
41241: IFFALSE 41300
// repeat engine := _engine [ 1 ] ;
41243: LD_ADDR_VAR 0 3
41247: PUSH
41248: LD_VAR 0 11
41252: PUSH
41253: LD_INT 1
41255: ARRAY
41256: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41257: LD_ADDR_VAR 0 11
41261: PUSH
41262: LD_VAR 0 11
41266: PPUSH
41267: LD_INT 1
41269: PPUSH
41270: CALL_OW 3
41274: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41275: LD_VAR 0 2
41279: PPUSH
41280: LD_VAR 0 3
41284: PPUSH
41285: CALL 41485 0 2
41289: PUSH
41290: LD_VAR 0 11
41294: PUSH
41295: EMPTY
41296: EQUAL
41297: OR
41298: IFFALSE 41243
// if not control in _control then
41300: LD_VAR 0 4
41304: PUSH
41305: LD_VAR 0 12
41309: IN
41310: NOT
41311: IFFALSE 41337
// control := _control [ rand ( 1 , _control ) ] ;
41313: LD_ADDR_VAR 0 4
41317: PUSH
41318: LD_VAR 0 12
41322: PUSH
41323: LD_INT 1
41325: PPUSH
41326: LD_VAR 0 12
41330: PPUSH
41331: CALL_OW 12
41335: ARRAY
41336: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41337: LD_VAR 0 2
41341: PPUSH
41342: LD_VAR 0 5
41346: PPUSH
41347: CALL 41705 0 2
41351: NOT
41352: IFFALSE 41411
// repeat weapon := _weapon [ 1 ] ;
41354: LD_ADDR_VAR 0 5
41358: PUSH
41359: LD_VAR 0 10
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41368: LD_ADDR_VAR 0 10
41372: PUSH
41373: LD_VAR 0 10
41377: PPUSH
41378: LD_INT 1
41380: PPUSH
41381: CALL_OW 3
41385: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41386: LD_VAR 0 2
41390: PPUSH
41391: LD_VAR 0 5
41395: PPUSH
41396: CALL 41705 0 2
41400: PUSH
41401: LD_VAR 0 10
41405: PUSH
41406: EMPTY
41407: EQUAL
41408: OR
41409: IFFALSE 41354
// result := [ ] ;
41411: LD_ADDR_VAR 0 6
41415: PUSH
41416: EMPTY
41417: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41418: LD_VAR 0 1
41422: PPUSH
41423: LD_VAR 0 2
41427: PPUSH
41428: LD_VAR 0 3
41432: PPUSH
41433: LD_VAR 0 4
41437: PPUSH
41438: LD_VAR 0 5
41442: PPUSH
41443: CALL_OW 448
41447: IFFALSE 41480
// result := [ chassis , engine , control , weapon ] ;
41449: LD_ADDR_VAR 0 6
41453: PUSH
41454: LD_VAR 0 2
41458: PUSH
41459: LD_VAR 0 3
41463: PUSH
41464: LD_VAR 0 4
41468: PUSH
41469: LD_VAR 0 5
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: ST_TO_ADDR
// end ;
41480: LD_VAR 0 6
41484: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41485: LD_INT 0
41487: PPUSH
// if not chassis or not engine then
41488: LD_VAR 0 1
41492: NOT
41493: PUSH
41494: LD_VAR 0 2
41498: NOT
41499: OR
41500: IFFALSE 41504
// exit ;
41502: GO 41700
// case engine of engine_solar :
41504: LD_VAR 0 2
41508: PUSH
41509: LD_INT 2
41511: DOUBLE
41512: EQUAL
41513: IFTRUE 41517
41515: GO 41555
41517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41518: LD_ADDR_VAR 0 3
41522: PUSH
41523: LD_INT 11
41525: PUSH
41526: LD_INT 12
41528: PUSH
41529: LD_INT 13
41531: PUSH
41532: LD_INT 14
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: ST_TO_ADDR
41553: GO 41684
41555: LD_INT 1
41557: DOUBLE
41558: EQUAL
41559: IFTRUE 41563
41561: GO 41625
41563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41564: LD_ADDR_VAR 0 3
41568: PUSH
41569: LD_INT 11
41571: PUSH
41572: LD_INT 12
41574: PUSH
41575: LD_INT 13
41577: PUSH
41578: LD_INT 14
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 3
41589: PUSH
41590: LD_INT 4
41592: PUSH
41593: LD_INT 5
41595: PUSH
41596: LD_INT 21
41598: PUSH
41599: LD_INT 23
41601: PUSH
41602: LD_INT 22
41604: PUSH
41605: LD_INT 24
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: ST_TO_ADDR
41623: GO 41684
41625: LD_INT 3
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41633
41631: GO 41683
41633: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_INT 13
41641: PUSH
41642: LD_INT 14
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 3
41650: PUSH
41651: LD_INT 4
41653: PUSH
41654: LD_INT 5
41656: PUSH
41657: LD_INT 21
41659: PUSH
41660: LD_INT 22
41662: PUSH
41663: LD_INT 23
41665: PUSH
41666: LD_INT 24
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: ST_TO_ADDR
41681: GO 41684
41683: POP
// result := ( chassis in result ) ;
41684: LD_ADDR_VAR 0 3
41688: PUSH
41689: LD_VAR 0 1
41693: PUSH
41694: LD_VAR 0 3
41698: IN
41699: ST_TO_ADDR
// end ;
41700: LD_VAR 0 3
41704: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41705: LD_INT 0
41707: PPUSH
// if not chassis or not weapon then
41708: LD_VAR 0 1
41712: NOT
41713: PUSH
41714: LD_VAR 0 2
41718: NOT
41719: OR
41720: IFFALSE 41724
// exit ;
41722: GO 42784
// case weapon of us_machine_gun :
41724: LD_VAR 0 2
41728: PUSH
41729: LD_INT 2
41731: DOUBLE
41732: EQUAL
41733: IFTRUE 41737
41735: GO 41767
41737: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41738: LD_ADDR_VAR 0 3
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: LD_INT 4
41754: PUSH
41755: LD_INT 5
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: ST_TO_ADDR
41765: GO 42768
41767: LD_INT 3
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41775
41773: GO 41805
41775: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41776: LD_ADDR_VAR 0 3
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: LD_INT 3
41789: PUSH
41790: LD_INT 4
41792: PUSH
41793: LD_INT 5
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: ST_TO_ADDR
41803: GO 42768
41805: LD_INT 11
41807: DOUBLE
41808: EQUAL
41809: IFTRUE 41813
41811: GO 41843
41813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41814: LD_ADDR_VAR 0 3
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: LD_INT 4
41830: PUSH
41831: LD_INT 5
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
41841: GO 42768
41843: LD_INT 4
41845: DOUBLE
41846: EQUAL
41847: IFTRUE 41851
41849: GO 41877
41851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 4
41865: PUSH
41866: LD_INT 5
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
41875: GO 42768
41877: LD_INT 5
41879: DOUBLE
41880: EQUAL
41881: IFTRUE 41885
41883: GO 41911
41885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41886: LD_ADDR_VAR 0 3
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: LD_INT 3
41896: PUSH
41897: LD_INT 4
41899: PUSH
41900: LD_INT 5
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: ST_TO_ADDR
41909: GO 42768
41911: LD_INT 9
41913: DOUBLE
41914: EQUAL
41915: IFTRUE 41919
41917: GO 41945
41919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41920: LD_ADDR_VAR 0 3
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: LD_INT 4
41933: PUSH
41934: LD_INT 5
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
41943: GO 42768
41945: LD_INT 7
41947: DOUBLE
41948: EQUAL
41949: IFTRUE 41953
41951: GO 41979
41953: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41954: LD_ADDR_VAR 0 3
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: LD_INT 3
41964: PUSH
41965: LD_INT 4
41967: PUSH
41968: LD_INT 5
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: ST_TO_ADDR
41977: GO 42768
41979: LD_INT 12
41981: DOUBLE
41982: EQUAL
41983: IFTRUE 41987
41985: GO 42013
41987: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41988: LD_ADDR_VAR 0 3
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: LD_INT 4
42001: PUSH
42002: LD_INT 5
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: ST_TO_ADDR
42011: GO 42768
42013: LD_INT 13
42015: DOUBLE
42016: EQUAL
42017: IFTRUE 42021
42019: GO 42047
42021: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42022: LD_ADDR_VAR 0 3
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 4
42035: PUSH
42036: LD_INT 5
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: ST_TO_ADDR
42045: GO 42768
42047: LD_INT 14
42049: DOUBLE
42050: EQUAL
42051: IFTRUE 42055
42053: GO 42073
42055: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42056: LD_ADDR_VAR 0 3
42060: PUSH
42061: LD_INT 4
42063: PUSH
42064: LD_INT 5
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: ST_TO_ADDR
42071: GO 42768
42073: LD_INT 6
42075: DOUBLE
42076: EQUAL
42077: IFTRUE 42081
42079: GO 42099
42081: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42082: LD_ADDR_VAR 0 3
42086: PUSH
42087: LD_INT 4
42089: PUSH
42090: LD_INT 5
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: ST_TO_ADDR
42097: GO 42768
42099: LD_INT 10
42101: DOUBLE
42102: EQUAL
42103: IFTRUE 42107
42105: GO 42125
42107: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42108: LD_ADDR_VAR 0 3
42112: PUSH
42113: LD_INT 4
42115: PUSH
42116: LD_INT 5
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: ST_TO_ADDR
42123: GO 42768
42125: LD_INT 22
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42159
42133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_INT 11
42141: PUSH
42142: LD_INT 12
42144: PUSH
42145: LD_INT 13
42147: PUSH
42148: LD_INT 14
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: ST_TO_ADDR
42157: GO 42768
42159: LD_INT 23
42161: DOUBLE
42162: EQUAL
42163: IFTRUE 42167
42165: GO 42193
42167: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42168: LD_ADDR_VAR 0 3
42172: PUSH
42173: LD_INT 11
42175: PUSH
42176: LD_INT 12
42178: PUSH
42179: LD_INT 13
42181: PUSH
42182: LD_INT 14
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
42191: GO 42768
42193: LD_INT 24
42195: DOUBLE
42196: EQUAL
42197: IFTRUE 42201
42199: GO 42227
42201: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42202: LD_ADDR_VAR 0 3
42206: PUSH
42207: LD_INT 11
42209: PUSH
42210: LD_INT 12
42212: PUSH
42213: LD_INT 13
42215: PUSH
42216: LD_INT 14
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: ST_TO_ADDR
42225: GO 42768
42227: LD_INT 30
42229: DOUBLE
42230: EQUAL
42231: IFTRUE 42235
42233: GO 42261
42235: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42236: LD_ADDR_VAR 0 3
42240: PUSH
42241: LD_INT 11
42243: PUSH
42244: LD_INT 12
42246: PUSH
42247: LD_INT 13
42249: PUSH
42250: LD_INT 14
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: ST_TO_ADDR
42259: GO 42768
42261: LD_INT 25
42263: DOUBLE
42264: EQUAL
42265: IFTRUE 42269
42267: GO 42287
42269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_INT 13
42277: PUSH
42278: LD_INT 14
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: ST_TO_ADDR
42285: GO 42768
42287: LD_INT 27
42289: DOUBLE
42290: EQUAL
42291: IFTRUE 42295
42293: GO 42313
42295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42296: LD_ADDR_VAR 0 3
42300: PUSH
42301: LD_INT 13
42303: PUSH
42304: LD_INT 14
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: ST_TO_ADDR
42311: GO 42768
42313: LD_INT 92
42315: DOUBLE
42316: EQUAL
42317: IFTRUE 42321
42319: GO 42347
42321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42322: LD_ADDR_VAR 0 3
42326: PUSH
42327: LD_INT 11
42329: PUSH
42330: LD_INT 12
42332: PUSH
42333: LD_INT 13
42335: PUSH
42336: LD_INT 14
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: ST_TO_ADDR
42345: GO 42768
42347: LD_INT 28
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42355
42353: GO 42373
42355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42356: LD_ADDR_VAR 0 3
42360: PUSH
42361: LD_INT 13
42363: PUSH
42364: LD_INT 14
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: ST_TO_ADDR
42371: GO 42768
42373: LD_INT 29
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42399
42381: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_INT 13
42389: PUSH
42390: LD_INT 14
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 42768
42399: LD_INT 31
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42425
42407: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 13
42415: PUSH
42416: LD_INT 14
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: ST_TO_ADDR
42423: GO 42768
42425: LD_INT 26
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42433
42431: GO 42451
42433: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 13
42441: PUSH
42442: LD_INT 14
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: ST_TO_ADDR
42449: GO 42768
42451: LD_INT 42
42453: DOUBLE
42454: EQUAL
42455: IFTRUE 42459
42457: GO 42485
42459: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_INT 21
42467: PUSH
42468: LD_INT 22
42470: PUSH
42471: LD_INT 23
42473: PUSH
42474: LD_INT 24
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: ST_TO_ADDR
42483: GO 42768
42485: LD_INT 43
42487: DOUBLE
42488: EQUAL
42489: IFTRUE 42493
42491: GO 42519
42493: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42494: LD_ADDR_VAR 0 3
42498: PUSH
42499: LD_INT 21
42501: PUSH
42502: LD_INT 22
42504: PUSH
42505: LD_INT 23
42507: PUSH
42508: LD_INT 24
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: ST_TO_ADDR
42517: GO 42768
42519: LD_INT 44
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42527
42525: GO 42553
42527: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42528: LD_ADDR_VAR 0 3
42532: PUSH
42533: LD_INT 21
42535: PUSH
42536: LD_INT 22
42538: PUSH
42539: LD_INT 23
42541: PUSH
42542: LD_INT 24
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: ST_TO_ADDR
42551: GO 42768
42553: LD_INT 45
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42561
42559: GO 42587
42561: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42562: LD_ADDR_VAR 0 3
42566: PUSH
42567: LD_INT 21
42569: PUSH
42570: LD_INT 22
42572: PUSH
42573: LD_INT 23
42575: PUSH
42576: LD_INT 24
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
42585: GO 42768
42587: LD_INT 49
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42595
42593: GO 42621
42595: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42596: LD_ADDR_VAR 0 3
42600: PUSH
42601: LD_INT 21
42603: PUSH
42604: LD_INT 22
42606: PUSH
42607: LD_INT 23
42609: PUSH
42610: LD_INT 24
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: ST_TO_ADDR
42619: GO 42768
42621: LD_INT 51
42623: DOUBLE
42624: EQUAL
42625: IFTRUE 42629
42627: GO 42655
42629: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42630: LD_ADDR_VAR 0 3
42634: PUSH
42635: LD_INT 21
42637: PUSH
42638: LD_INT 22
42640: PUSH
42641: LD_INT 23
42643: PUSH
42644: LD_INT 24
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: ST_TO_ADDR
42653: GO 42768
42655: LD_INT 52
42657: DOUBLE
42658: EQUAL
42659: IFTRUE 42663
42661: GO 42689
42663: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42664: LD_ADDR_VAR 0 3
42668: PUSH
42669: LD_INT 21
42671: PUSH
42672: LD_INT 22
42674: PUSH
42675: LD_INT 23
42677: PUSH
42678: LD_INT 24
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: ST_TO_ADDR
42687: GO 42768
42689: LD_INT 53
42691: DOUBLE
42692: EQUAL
42693: IFTRUE 42697
42695: GO 42715
42697: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42698: LD_ADDR_VAR 0 3
42702: PUSH
42703: LD_INT 23
42705: PUSH
42706: LD_INT 24
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: ST_TO_ADDR
42713: GO 42768
42715: LD_INT 46
42717: DOUBLE
42718: EQUAL
42719: IFTRUE 42723
42721: GO 42741
42723: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42724: LD_ADDR_VAR 0 3
42728: PUSH
42729: LD_INT 23
42731: PUSH
42732: LD_INT 24
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: ST_TO_ADDR
42739: GO 42768
42741: LD_INT 47
42743: DOUBLE
42744: EQUAL
42745: IFTRUE 42749
42747: GO 42767
42749: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42750: LD_ADDR_VAR 0 3
42754: PUSH
42755: LD_INT 23
42757: PUSH
42758: LD_INT 24
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: ST_TO_ADDR
42765: GO 42768
42767: POP
// result := ( chassis in result ) ;
42768: LD_ADDR_VAR 0 3
42772: PUSH
42773: LD_VAR 0 1
42777: PUSH
42778: LD_VAR 0 3
42782: IN
42783: ST_TO_ADDR
// end ;
42784: LD_VAR 0 3
42788: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42789: LD_INT 0
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
42796: PPUSH
42797: PPUSH
// result := array ;
42798: LD_ADDR_VAR 0 5
42802: PUSH
42803: LD_VAR 0 1
42807: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42808: LD_VAR 0 1
42812: NOT
42813: PUSH
42814: LD_VAR 0 2
42818: NOT
42819: OR
42820: PUSH
42821: LD_VAR 0 3
42825: NOT
42826: OR
42827: PUSH
42828: LD_VAR 0 2
42832: PUSH
42833: LD_VAR 0 1
42837: GREATER
42838: OR
42839: PUSH
42840: LD_VAR 0 3
42844: PUSH
42845: LD_VAR 0 1
42849: GREATER
42850: OR
42851: IFFALSE 42855
// exit ;
42853: GO 43151
// if direction then
42855: LD_VAR 0 4
42859: IFFALSE 42923
// begin d := 1 ;
42861: LD_ADDR_VAR 0 9
42865: PUSH
42866: LD_INT 1
42868: ST_TO_ADDR
// if i_from > i_to then
42869: LD_VAR 0 2
42873: PUSH
42874: LD_VAR 0 3
42878: GREATER
42879: IFFALSE 42905
// length := ( array - i_from ) + i_to else
42881: LD_ADDR_VAR 0 11
42885: PUSH
42886: LD_VAR 0 1
42890: PUSH
42891: LD_VAR 0 2
42895: MINUS
42896: PUSH
42897: LD_VAR 0 3
42901: PLUS
42902: ST_TO_ADDR
42903: GO 42921
// length := i_to - i_from ;
42905: LD_ADDR_VAR 0 11
42909: PUSH
42910: LD_VAR 0 3
42914: PUSH
42915: LD_VAR 0 2
42919: MINUS
42920: ST_TO_ADDR
// end else
42921: GO 42984
// begin d := - 1 ;
42923: LD_ADDR_VAR 0 9
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: ST_TO_ADDR
// if i_from > i_to then
42932: LD_VAR 0 2
42936: PUSH
42937: LD_VAR 0 3
42941: GREATER
42942: IFFALSE 42962
// length := i_from - i_to else
42944: LD_ADDR_VAR 0 11
42948: PUSH
42949: LD_VAR 0 2
42953: PUSH
42954: LD_VAR 0 3
42958: MINUS
42959: ST_TO_ADDR
42960: GO 42984
// length := ( array - i_to ) + i_from ;
42962: LD_ADDR_VAR 0 11
42966: PUSH
42967: LD_VAR 0 1
42971: PUSH
42972: LD_VAR 0 3
42976: MINUS
42977: PUSH
42978: LD_VAR 0 2
42982: PLUS
42983: ST_TO_ADDR
// end ; if not length then
42984: LD_VAR 0 11
42988: NOT
42989: IFFALSE 42993
// exit ;
42991: GO 43151
// tmp := array ;
42993: LD_ADDR_VAR 0 10
42997: PUSH
42998: LD_VAR 0 1
43002: ST_TO_ADDR
// for i = 1 to length do
43003: LD_ADDR_VAR 0 6
43007: PUSH
43008: DOUBLE
43009: LD_INT 1
43011: DEC
43012: ST_TO_ADDR
43013: LD_VAR 0 11
43017: PUSH
43018: FOR_TO
43019: IFFALSE 43139
// begin for j = 1 to array do
43021: LD_ADDR_VAR 0 7
43025: PUSH
43026: DOUBLE
43027: LD_INT 1
43029: DEC
43030: ST_TO_ADDR
43031: LD_VAR 0 1
43035: PUSH
43036: FOR_TO
43037: IFFALSE 43125
// begin k := j + d ;
43039: LD_ADDR_VAR 0 8
43043: PUSH
43044: LD_VAR 0 7
43048: PUSH
43049: LD_VAR 0 9
43053: PLUS
43054: ST_TO_ADDR
// if k > array then
43055: LD_VAR 0 8
43059: PUSH
43060: LD_VAR 0 1
43064: GREATER
43065: IFFALSE 43075
// k := 1 ;
43067: LD_ADDR_VAR 0 8
43071: PUSH
43072: LD_INT 1
43074: ST_TO_ADDR
// if not k then
43075: LD_VAR 0 8
43079: NOT
43080: IFFALSE 43092
// k := array ;
43082: LD_ADDR_VAR 0 8
43086: PUSH
43087: LD_VAR 0 1
43091: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43092: LD_ADDR_VAR 0 10
43096: PUSH
43097: LD_VAR 0 10
43101: PPUSH
43102: LD_VAR 0 8
43106: PPUSH
43107: LD_VAR 0 1
43111: PUSH
43112: LD_VAR 0 7
43116: ARRAY
43117: PPUSH
43118: CALL_OW 1
43122: ST_TO_ADDR
// end ;
43123: GO 43036
43125: POP
43126: POP
// array := tmp ;
43127: LD_ADDR_VAR 0 1
43131: PUSH
43132: LD_VAR 0 10
43136: ST_TO_ADDR
// end ;
43137: GO 43018
43139: POP
43140: POP
// result := array ;
43141: LD_ADDR_VAR 0 5
43145: PUSH
43146: LD_VAR 0 1
43150: ST_TO_ADDR
// end ;
43151: LD_VAR 0 5
43155: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43156: LD_INT 0
43158: PPUSH
43159: PPUSH
// result := 0 ;
43160: LD_ADDR_VAR 0 3
43164: PUSH
43165: LD_INT 0
43167: ST_TO_ADDR
// if not array or not value in array then
43168: LD_VAR 0 1
43172: NOT
43173: PUSH
43174: LD_VAR 0 2
43178: PUSH
43179: LD_VAR 0 1
43183: IN
43184: NOT
43185: OR
43186: IFFALSE 43190
// exit ;
43188: GO 43244
// for i = 1 to array do
43190: LD_ADDR_VAR 0 4
43194: PUSH
43195: DOUBLE
43196: LD_INT 1
43198: DEC
43199: ST_TO_ADDR
43200: LD_VAR 0 1
43204: PUSH
43205: FOR_TO
43206: IFFALSE 43242
// if value = array [ i ] then
43208: LD_VAR 0 2
43212: PUSH
43213: LD_VAR 0 1
43217: PUSH
43218: LD_VAR 0 4
43222: ARRAY
43223: EQUAL
43224: IFFALSE 43240
// begin result := i ;
43226: LD_ADDR_VAR 0 3
43230: PUSH
43231: LD_VAR 0 4
43235: ST_TO_ADDR
// exit ;
43236: POP
43237: POP
43238: GO 43244
// end ;
43240: GO 43205
43242: POP
43243: POP
// end ;
43244: LD_VAR 0 3
43248: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43249: LD_INT 0
43251: PPUSH
// vc_chassis := chassis ;
43252: LD_ADDR_OWVAR 37
43256: PUSH
43257: LD_VAR 0 1
43261: ST_TO_ADDR
// vc_engine := engine ;
43262: LD_ADDR_OWVAR 39
43266: PUSH
43267: LD_VAR 0 2
43271: ST_TO_ADDR
// vc_control := control ;
43272: LD_ADDR_OWVAR 38
43276: PUSH
43277: LD_VAR 0 3
43281: ST_TO_ADDR
// vc_weapon := weapon ;
43282: LD_ADDR_OWVAR 40
43286: PUSH
43287: LD_VAR 0 4
43291: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43292: LD_ADDR_OWVAR 41
43296: PUSH
43297: LD_VAR 0 5
43301: ST_TO_ADDR
// end ;
43302: LD_VAR 0 6
43306: RET
// export function WantPlant ( unit ) ; var task ; begin
43307: LD_INT 0
43309: PPUSH
43310: PPUSH
// result := false ;
43311: LD_ADDR_VAR 0 2
43315: PUSH
43316: LD_INT 0
43318: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43319: LD_ADDR_VAR 0 3
43323: PUSH
43324: LD_VAR 0 1
43328: PPUSH
43329: CALL_OW 437
43333: ST_TO_ADDR
// if task then
43334: LD_VAR 0 3
43338: IFFALSE 43366
// if task [ 1 ] [ 1 ] = p then
43340: LD_VAR 0 3
43344: PUSH
43345: LD_INT 1
43347: ARRAY
43348: PUSH
43349: LD_INT 1
43351: ARRAY
43352: PUSH
43353: LD_STRING p
43355: EQUAL
43356: IFFALSE 43366
// result := true ;
43358: LD_ADDR_VAR 0 2
43362: PUSH
43363: LD_INT 1
43365: ST_TO_ADDR
// end ;
43366: LD_VAR 0 2
43370: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43371: LD_INT 0
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
// if pos < 1 then
43377: LD_VAR 0 2
43381: PUSH
43382: LD_INT 1
43384: LESS
43385: IFFALSE 43389
// exit ;
43387: GO 43692
// if pos = 1 then
43389: LD_VAR 0 2
43393: PUSH
43394: LD_INT 1
43396: EQUAL
43397: IFFALSE 43430
// result := Replace ( arr , pos [ 1 ] , value ) else
43399: LD_ADDR_VAR 0 4
43403: PUSH
43404: LD_VAR 0 1
43408: PPUSH
43409: LD_VAR 0 2
43413: PUSH
43414: LD_INT 1
43416: ARRAY
43417: PPUSH
43418: LD_VAR 0 3
43422: PPUSH
43423: CALL_OW 1
43427: ST_TO_ADDR
43428: GO 43692
// begin tmp := arr ;
43430: LD_ADDR_VAR 0 6
43434: PUSH
43435: LD_VAR 0 1
43439: ST_TO_ADDR
// s_arr := [ tmp ] ;
43440: LD_ADDR_VAR 0 7
43444: PUSH
43445: LD_VAR 0 6
43449: PUSH
43450: EMPTY
43451: LIST
43452: ST_TO_ADDR
// for i = 1 to pos - 1 do
43453: LD_ADDR_VAR 0 5
43457: PUSH
43458: DOUBLE
43459: LD_INT 1
43461: DEC
43462: ST_TO_ADDR
43463: LD_VAR 0 2
43467: PUSH
43468: LD_INT 1
43470: MINUS
43471: PUSH
43472: FOR_TO
43473: IFFALSE 43518
// begin tmp := tmp [ pos [ i ] ] ;
43475: LD_ADDR_VAR 0 6
43479: PUSH
43480: LD_VAR 0 6
43484: PUSH
43485: LD_VAR 0 2
43489: PUSH
43490: LD_VAR 0 5
43494: ARRAY
43495: ARRAY
43496: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43497: LD_ADDR_VAR 0 7
43501: PUSH
43502: LD_VAR 0 7
43506: PUSH
43507: LD_VAR 0 6
43511: PUSH
43512: EMPTY
43513: LIST
43514: ADD
43515: ST_TO_ADDR
// end ;
43516: GO 43472
43518: POP
43519: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43520: LD_ADDR_VAR 0 6
43524: PUSH
43525: LD_VAR 0 6
43529: PPUSH
43530: LD_VAR 0 2
43534: PUSH
43535: LD_VAR 0 2
43539: ARRAY
43540: PPUSH
43541: LD_VAR 0 3
43545: PPUSH
43546: CALL_OW 1
43550: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43551: LD_ADDR_VAR 0 7
43555: PUSH
43556: LD_VAR 0 7
43560: PPUSH
43561: LD_VAR 0 7
43565: PPUSH
43566: LD_VAR 0 6
43570: PPUSH
43571: CALL_OW 1
43575: ST_TO_ADDR
// for i = s_arr downto 2 do
43576: LD_ADDR_VAR 0 5
43580: PUSH
43581: DOUBLE
43582: LD_VAR 0 7
43586: INC
43587: ST_TO_ADDR
43588: LD_INT 2
43590: PUSH
43591: FOR_DOWNTO
43592: IFFALSE 43676
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43594: LD_ADDR_VAR 0 6
43598: PUSH
43599: LD_VAR 0 7
43603: PUSH
43604: LD_VAR 0 5
43608: PUSH
43609: LD_INT 1
43611: MINUS
43612: ARRAY
43613: PPUSH
43614: LD_VAR 0 2
43618: PUSH
43619: LD_VAR 0 5
43623: PUSH
43624: LD_INT 1
43626: MINUS
43627: ARRAY
43628: PPUSH
43629: LD_VAR 0 7
43633: PUSH
43634: LD_VAR 0 5
43638: ARRAY
43639: PPUSH
43640: CALL_OW 1
43644: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43645: LD_ADDR_VAR 0 7
43649: PUSH
43650: LD_VAR 0 7
43654: PPUSH
43655: LD_VAR 0 5
43659: PUSH
43660: LD_INT 1
43662: MINUS
43663: PPUSH
43664: LD_VAR 0 6
43668: PPUSH
43669: CALL_OW 1
43673: ST_TO_ADDR
// end ;
43674: GO 43591
43676: POP
43677: POP
// result := s_arr [ 1 ] ;
43678: LD_ADDR_VAR 0 4
43682: PUSH
43683: LD_VAR 0 7
43687: PUSH
43688: LD_INT 1
43690: ARRAY
43691: ST_TO_ADDR
// end ; end ;
43692: LD_VAR 0 4
43696: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43697: LD_INT 0
43699: PPUSH
43700: PPUSH
// if not list then
43701: LD_VAR 0 1
43705: NOT
43706: IFFALSE 43710
// exit ;
43708: GO 43801
// i := list [ pos1 ] ;
43710: LD_ADDR_VAR 0 5
43714: PUSH
43715: LD_VAR 0 1
43719: PUSH
43720: LD_VAR 0 2
43724: ARRAY
43725: ST_TO_ADDR
// if not i then
43726: LD_VAR 0 5
43730: NOT
43731: IFFALSE 43735
// exit ;
43733: GO 43801
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43735: LD_ADDR_VAR 0 1
43739: PUSH
43740: LD_VAR 0 1
43744: PPUSH
43745: LD_VAR 0 2
43749: PPUSH
43750: LD_VAR 0 1
43754: PUSH
43755: LD_VAR 0 3
43759: ARRAY
43760: PPUSH
43761: CALL_OW 1
43765: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43766: LD_ADDR_VAR 0 1
43770: PUSH
43771: LD_VAR 0 1
43775: PPUSH
43776: LD_VAR 0 3
43780: PPUSH
43781: LD_VAR 0 5
43785: PPUSH
43786: CALL_OW 1
43790: ST_TO_ADDR
// result := list ;
43791: LD_ADDR_VAR 0 4
43795: PUSH
43796: LD_VAR 0 1
43800: ST_TO_ADDR
// end ;
43801: LD_VAR 0 4
43805: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43806: LD_INT 0
43808: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43809: LD_ADDR_VAR 0 5
43813: PUSH
43814: LD_VAR 0 1
43818: PPUSH
43819: CALL_OW 250
43823: PPUSH
43824: LD_VAR 0 1
43828: PPUSH
43829: CALL_OW 251
43833: PPUSH
43834: LD_VAR 0 2
43838: PPUSH
43839: LD_VAR 0 3
43843: PPUSH
43844: LD_VAR 0 4
43848: PPUSH
43849: CALL 44227 0 5
43853: ST_TO_ADDR
// end ;
43854: LD_VAR 0 5
43858: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43859: LD_INT 0
43861: PPUSH
43862: PPUSH
43863: PPUSH
43864: PPUSH
// if not list or not unit then
43865: LD_VAR 0 2
43869: NOT
43870: PUSH
43871: LD_VAR 0 1
43875: NOT
43876: OR
43877: IFFALSE 43881
// exit ;
43879: GO 44222
// result := [ ] ;
43881: LD_ADDR_VAR 0 5
43885: PUSH
43886: EMPTY
43887: ST_TO_ADDR
// for i in list do
43888: LD_ADDR_VAR 0 6
43892: PUSH
43893: LD_VAR 0 2
43897: PUSH
43898: FOR_IN
43899: IFFALSE 44117
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43901: LD_ADDR_VAR 0 8
43905: PUSH
43906: LD_VAR 0 1
43910: PPUSH
43911: LD_VAR 0 6
43915: PUSH
43916: LD_INT 1
43918: ARRAY
43919: PPUSH
43920: LD_VAR 0 6
43924: PUSH
43925: LD_INT 2
43927: ARRAY
43928: PPUSH
43929: CALL_OW 297
43933: ST_TO_ADDR
// if not Count ( result ) then
43934: LD_VAR 0 5
43938: PPUSH
43939: CALL 40511 0 1
43943: NOT
43944: IFFALSE 43977
// begin result := Join ( result , [ i , tmp ] ) ;
43946: LD_ADDR_VAR 0 5
43950: PUSH
43951: LD_VAR 0 5
43955: PPUSH
43956: LD_VAR 0 6
43960: PUSH
43961: LD_VAR 0 8
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PPUSH
43970: CALL 76111 0 2
43974: ST_TO_ADDR
// continue ;
43975: GO 43898
// end ; if result [ result ] [ 2 ] <= tmp then
43977: LD_VAR 0 5
43981: PUSH
43982: LD_VAR 0 5
43986: ARRAY
43987: PUSH
43988: LD_INT 2
43990: ARRAY
43991: PUSH
43992: LD_VAR 0 8
43996: LESSEQUAL
43997: IFFALSE 44030
// result := Join ( result , [ i , tmp ] ) else
43999: LD_ADDR_VAR 0 5
44003: PUSH
44004: LD_VAR 0 5
44008: PPUSH
44009: LD_VAR 0 6
44013: PUSH
44014: LD_VAR 0 8
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PPUSH
44023: CALL 76111 0 2
44027: ST_TO_ADDR
44028: GO 44115
// begin for j := 1 to Count ( result ) do
44030: LD_ADDR_VAR 0 7
44034: PUSH
44035: DOUBLE
44036: LD_INT 1
44038: DEC
44039: ST_TO_ADDR
44040: LD_VAR 0 5
44044: PPUSH
44045: CALL 40511 0 1
44049: PUSH
44050: FOR_TO
44051: IFFALSE 44113
// begin if tmp < result [ j ] [ 2 ] then
44053: LD_VAR 0 8
44057: PUSH
44058: LD_VAR 0 5
44062: PUSH
44063: LD_VAR 0 7
44067: ARRAY
44068: PUSH
44069: LD_INT 2
44071: ARRAY
44072: LESS
44073: IFFALSE 44111
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44075: LD_ADDR_VAR 0 5
44079: PUSH
44080: LD_VAR 0 5
44084: PPUSH
44085: LD_VAR 0 7
44089: PPUSH
44090: LD_VAR 0 6
44094: PUSH
44095: LD_VAR 0 8
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PPUSH
44104: CALL_OW 2
44108: ST_TO_ADDR
// break ;
44109: GO 44113
// end ; end ;
44111: GO 44050
44113: POP
44114: POP
// end ; end ;
44115: GO 43898
44117: POP
44118: POP
// if result and not asc then
44119: LD_VAR 0 5
44123: PUSH
44124: LD_VAR 0 3
44128: NOT
44129: AND
44130: IFFALSE 44147
// result := ReverseArray ( result ) ;
44132: LD_ADDR_VAR 0 5
44136: PUSH
44137: LD_VAR 0 5
44141: PPUSH
44142: CALL 71387 0 1
44146: ST_TO_ADDR
// tmp := [ ] ;
44147: LD_ADDR_VAR 0 8
44151: PUSH
44152: EMPTY
44153: ST_TO_ADDR
// if mode then
44154: LD_VAR 0 4
44158: IFFALSE 44222
// begin for i := 1 to result do
44160: LD_ADDR_VAR 0 6
44164: PUSH
44165: DOUBLE
44166: LD_INT 1
44168: DEC
44169: ST_TO_ADDR
44170: LD_VAR 0 5
44174: PUSH
44175: FOR_TO
44176: IFFALSE 44210
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44178: LD_ADDR_VAR 0 8
44182: PUSH
44183: LD_VAR 0 8
44187: PPUSH
44188: LD_VAR 0 5
44192: PUSH
44193: LD_VAR 0 6
44197: ARRAY
44198: PUSH
44199: LD_INT 1
44201: ARRAY
44202: PPUSH
44203: CALL 76111 0 2
44207: ST_TO_ADDR
44208: GO 44175
44210: POP
44211: POP
// result := tmp ;
44212: LD_ADDR_VAR 0 5
44216: PUSH
44217: LD_VAR 0 8
44221: ST_TO_ADDR
// end ; end ;
44222: LD_VAR 0 5
44226: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44227: LD_INT 0
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
// if not list then
44233: LD_VAR 0 3
44237: NOT
44238: IFFALSE 44242
// exit ;
44240: GO 44630
// result := [ ] ;
44242: LD_ADDR_VAR 0 6
44246: PUSH
44247: EMPTY
44248: ST_TO_ADDR
// for i in list do
44249: LD_ADDR_VAR 0 7
44253: PUSH
44254: LD_VAR 0 3
44258: PUSH
44259: FOR_IN
44260: IFFALSE 44462
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44262: LD_ADDR_VAR 0 9
44266: PUSH
44267: LD_VAR 0 7
44271: PPUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: LD_VAR 0 2
44281: PPUSH
44282: CALL_OW 297
44286: ST_TO_ADDR
// if not result then
44287: LD_VAR 0 6
44291: NOT
44292: IFFALSE 44318
// result := [ [ i , tmp ] ] else
44294: LD_ADDR_VAR 0 6
44298: PUSH
44299: LD_VAR 0 7
44303: PUSH
44304: LD_VAR 0 9
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: ST_TO_ADDR
44316: GO 44460
// begin if result [ result ] [ 2 ] < tmp then
44318: LD_VAR 0 6
44322: PUSH
44323: LD_VAR 0 6
44327: ARRAY
44328: PUSH
44329: LD_INT 2
44331: ARRAY
44332: PUSH
44333: LD_VAR 0 9
44337: LESS
44338: IFFALSE 44380
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44340: LD_ADDR_VAR 0 6
44344: PUSH
44345: LD_VAR 0 6
44349: PPUSH
44350: LD_VAR 0 6
44354: PUSH
44355: LD_INT 1
44357: PLUS
44358: PPUSH
44359: LD_VAR 0 7
44363: PUSH
44364: LD_VAR 0 9
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PPUSH
44373: CALL_OW 2
44377: ST_TO_ADDR
44378: GO 44460
// for j = 1 to result do
44380: LD_ADDR_VAR 0 8
44384: PUSH
44385: DOUBLE
44386: LD_INT 1
44388: DEC
44389: ST_TO_ADDR
44390: LD_VAR 0 6
44394: PUSH
44395: FOR_TO
44396: IFFALSE 44458
// begin if tmp < result [ j ] [ 2 ] then
44398: LD_VAR 0 9
44402: PUSH
44403: LD_VAR 0 6
44407: PUSH
44408: LD_VAR 0 8
44412: ARRAY
44413: PUSH
44414: LD_INT 2
44416: ARRAY
44417: LESS
44418: IFFALSE 44456
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44420: LD_ADDR_VAR 0 6
44424: PUSH
44425: LD_VAR 0 6
44429: PPUSH
44430: LD_VAR 0 8
44434: PPUSH
44435: LD_VAR 0 7
44439: PUSH
44440: LD_VAR 0 9
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PPUSH
44449: CALL_OW 2
44453: ST_TO_ADDR
// break ;
44454: GO 44458
// end ; end ;
44456: GO 44395
44458: POP
44459: POP
// end ; end ;
44460: GO 44259
44462: POP
44463: POP
// if result and not asc then
44464: LD_VAR 0 6
44468: PUSH
44469: LD_VAR 0 4
44473: NOT
44474: AND
44475: IFFALSE 44550
// begin tmp := result ;
44477: LD_ADDR_VAR 0 9
44481: PUSH
44482: LD_VAR 0 6
44486: ST_TO_ADDR
// for i = tmp downto 1 do
44487: LD_ADDR_VAR 0 7
44491: PUSH
44492: DOUBLE
44493: LD_VAR 0 9
44497: INC
44498: ST_TO_ADDR
44499: LD_INT 1
44501: PUSH
44502: FOR_DOWNTO
44503: IFFALSE 44548
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44505: LD_ADDR_VAR 0 6
44509: PUSH
44510: LD_VAR 0 6
44514: PPUSH
44515: LD_VAR 0 9
44519: PUSH
44520: LD_VAR 0 7
44524: MINUS
44525: PUSH
44526: LD_INT 1
44528: PLUS
44529: PPUSH
44530: LD_VAR 0 9
44534: PUSH
44535: LD_VAR 0 7
44539: ARRAY
44540: PPUSH
44541: CALL_OW 1
44545: ST_TO_ADDR
44546: GO 44502
44548: POP
44549: POP
// end ; tmp := [ ] ;
44550: LD_ADDR_VAR 0 9
44554: PUSH
44555: EMPTY
44556: ST_TO_ADDR
// if mode then
44557: LD_VAR 0 5
44561: IFFALSE 44630
// begin for i = 1 to result do
44563: LD_ADDR_VAR 0 7
44567: PUSH
44568: DOUBLE
44569: LD_INT 1
44571: DEC
44572: ST_TO_ADDR
44573: LD_VAR 0 6
44577: PUSH
44578: FOR_TO
44579: IFFALSE 44618
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44581: LD_ADDR_VAR 0 9
44585: PUSH
44586: LD_VAR 0 9
44590: PPUSH
44591: LD_VAR 0 7
44595: PPUSH
44596: LD_VAR 0 6
44600: PUSH
44601: LD_VAR 0 7
44605: ARRAY
44606: PUSH
44607: LD_INT 1
44609: ARRAY
44610: PPUSH
44611: CALL_OW 1
44615: ST_TO_ADDR
44616: GO 44578
44618: POP
44619: POP
// result := tmp ;
44620: LD_ADDR_VAR 0 6
44624: PUSH
44625: LD_VAR 0 9
44629: ST_TO_ADDR
// end ; end ;
44630: LD_VAR 0 6
44634: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44635: LD_INT 0
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
44642: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44643: LD_ADDR_VAR 0 5
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: ST_TO_ADDR
// if not x or not y then
44665: LD_VAR 0 2
44669: NOT
44670: PUSH
44671: LD_VAR 0 3
44675: NOT
44676: OR
44677: IFFALSE 44681
// exit ;
44679: GO 46331
// if not range then
44681: LD_VAR 0 4
44685: NOT
44686: IFFALSE 44696
// range := 10 ;
44688: LD_ADDR_VAR 0 4
44692: PUSH
44693: LD_INT 10
44695: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44696: LD_ADDR_VAR 0 8
44700: PUSH
44701: LD_INT 81
44703: PUSH
44704: LD_VAR 0 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 92
44715: PUSH
44716: LD_VAR 0 2
44720: PUSH
44721: LD_VAR 0 3
44725: PUSH
44726: LD_VAR 0 4
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 21
44742: PUSH
44743: LD_INT 3
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: LIST
44758: PPUSH
44759: CALL_OW 69
44763: ST_TO_ADDR
// if not tmp then
44764: LD_VAR 0 8
44768: NOT
44769: IFFALSE 44773
// exit ;
44771: GO 46331
// for i in tmp do
44773: LD_ADDR_VAR 0 6
44777: PUSH
44778: LD_VAR 0 8
44782: PUSH
44783: FOR_IN
44784: IFFALSE 46306
// begin points := [ 0 , 0 , 0 ] ;
44786: LD_ADDR_VAR 0 9
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// bpoints := 1 ;
44805: LD_ADDR_VAR 0 10
44809: PUSH
44810: LD_INT 1
44812: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44813: LD_VAR 0 6
44817: PPUSH
44818: CALL_OW 247
44822: PUSH
44823: LD_INT 1
44825: DOUBLE
44826: EQUAL
44827: IFTRUE 44831
44829: GO 45409
44831: POP
// begin if GetClass ( i ) = 1 then
44832: LD_VAR 0 6
44836: PPUSH
44837: CALL_OW 257
44841: PUSH
44842: LD_INT 1
44844: EQUAL
44845: IFFALSE 44866
// points := [ 10 , 5 , 3 ] ;
44847: LD_ADDR_VAR 0 9
44851: PUSH
44852: LD_INT 10
44854: PUSH
44855: LD_INT 5
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44866: LD_VAR 0 6
44870: PPUSH
44871: CALL_OW 257
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 4
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: IN
44890: IFFALSE 44911
// points := [ 3 , 2 , 1 ] ;
44892: LD_ADDR_VAR 0 9
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: LD_INT 2
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44911: LD_VAR 0 6
44915: PPUSH
44916: CALL_OW 257
44920: PUSH
44921: LD_INT 5
44923: EQUAL
44924: IFFALSE 44945
// points := [ 130 , 5 , 2 ] ;
44926: LD_ADDR_VAR 0 9
44930: PUSH
44931: LD_INT 130
44933: PUSH
44934: LD_INT 5
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44945: LD_VAR 0 6
44949: PPUSH
44950: CALL_OW 257
44954: PUSH
44955: LD_INT 8
44957: EQUAL
44958: IFFALSE 44979
// points := [ 35 , 35 , 30 ] ;
44960: LD_ADDR_VAR 0 9
44964: PUSH
44965: LD_INT 35
44967: PUSH
44968: LD_INT 35
44970: PUSH
44971: LD_INT 30
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: LIST
44978: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44979: LD_VAR 0 6
44983: PPUSH
44984: CALL_OW 257
44988: PUSH
44989: LD_INT 9
44991: EQUAL
44992: IFFALSE 45013
// points := [ 20 , 55 , 40 ] ;
44994: LD_ADDR_VAR 0 9
44998: PUSH
44999: LD_INT 20
45001: PUSH
45002: LD_INT 55
45004: PUSH
45005: LD_INT 40
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45013: LD_VAR 0 6
45017: PPUSH
45018: CALL_OW 257
45022: PUSH
45023: LD_INT 12
45025: PUSH
45026: LD_INT 16
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: IN
45033: IFFALSE 45054
// points := [ 5 , 3 , 2 ] ;
45035: LD_ADDR_VAR 0 9
45039: PUSH
45040: LD_INT 5
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: LD_INT 2
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45054: LD_VAR 0 6
45058: PPUSH
45059: CALL_OW 257
45063: PUSH
45064: LD_INT 17
45066: EQUAL
45067: IFFALSE 45088
// points := [ 100 , 50 , 75 ] ;
45069: LD_ADDR_VAR 0 9
45073: PUSH
45074: LD_INT 100
45076: PUSH
45077: LD_INT 50
45079: PUSH
45080: LD_INT 75
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45088: LD_VAR 0 6
45092: PPUSH
45093: CALL_OW 257
45097: PUSH
45098: LD_INT 15
45100: EQUAL
45101: IFFALSE 45122
// points := [ 10 , 5 , 3 ] ;
45103: LD_ADDR_VAR 0 9
45107: PUSH
45108: LD_INT 10
45110: PUSH
45111: LD_INT 5
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45122: LD_VAR 0 6
45126: PPUSH
45127: CALL_OW 257
45131: PUSH
45132: LD_INT 14
45134: EQUAL
45135: IFFALSE 45156
// points := [ 10 , 0 , 0 ] ;
45137: LD_ADDR_VAR 0 9
45141: PUSH
45142: LD_INT 10
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45156: LD_VAR 0 6
45160: PPUSH
45161: CALL_OW 257
45165: PUSH
45166: LD_INT 11
45168: EQUAL
45169: IFFALSE 45190
// points := [ 30 , 10 , 5 ] ;
45171: LD_ADDR_VAR 0 9
45175: PUSH
45176: LD_INT 30
45178: PUSH
45179: LD_INT 10
45181: PUSH
45182: LD_INT 5
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: LIST
45189: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45190: LD_VAR 0 1
45194: PPUSH
45195: LD_INT 5
45197: PPUSH
45198: CALL_OW 321
45202: PUSH
45203: LD_INT 2
45205: EQUAL
45206: IFFALSE 45223
// bpoints := bpoints * 1.8 ;
45208: LD_ADDR_VAR 0 10
45212: PUSH
45213: LD_VAR 0 10
45217: PUSH
45218: LD_REAL  1.80000000000000E+0000
45221: MUL
45222: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45223: LD_VAR 0 6
45227: PPUSH
45228: CALL_OW 257
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 3
45241: PUSH
45242: LD_INT 4
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: IN
45251: PUSH
45252: LD_VAR 0 1
45256: PPUSH
45257: LD_INT 51
45259: PPUSH
45260: CALL_OW 321
45264: PUSH
45265: LD_INT 2
45267: EQUAL
45268: AND
45269: IFFALSE 45286
// bpoints := bpoints * 1.2 ;
45271: LD_ADDR_VAR 0 10
45275: PUSH
45276: LD_VAR 0 10
45280: PUSH
45281: LD_REAL  1.20000000000000E+0000
45284: MUL
45285: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45286: LD_VAR 0 6
45290: PPUSH
45291: CALL_OW 257
45295: PUSH
45296: LD_INT 5
45298: PUSH
45299: LD_INT 7
45301: PUSH
45302: LD_INT 9
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: LIST
45309: IN
45310: PUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: LD_INT 52
45318: PPUSH
45319: CALL_OW 321
45323: PUSH
45324: LD_INT 2
45326: EQUAL
45327: AND
45328: IFFALSE 45345
// bpoints := bpoints * 1.5 ;
45330: LD_ADDR_VAR 0 10
45334: PUSH
45335: LD_VAR 0 10
45339: PUSH
45340: LD_REAL  1.50000000000000E+0000
45343: MUL
45344: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45345: LD_VAR 0 1
45349: PPUSH
45350: LD_INT 66
45352: PPUSH
45353: CALL_OW 321
45357: PUSH
45358: LD_INT 2
45360: EQUAL
45361: IFFALSE 45378
// bpoints := bpoints * 1.1 ;
45363: LD_ADDR_VAR 0 10
45367: PUSH
45368: LD_VAR 0 10
45372: PUSH
45373: LD_REAL  1.10000000000000E+0000
45376: MUL
45377: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45378: LD_ADDR_VAR 0 10
45382: PUSH
45383: LD_VAR 0 10
45387: PUSH
45388: LD_VAR 0 6
45392: PPUSH
45393: LD_INT 1
45395: PPUSH
45396: CALL_OW 259
45400: PUSH
45401: LD_REAL  1.15000000000000E+0000
45404: MUL
45405: MUL
45406: ST_TO_ADDR
// end ; unit_vehicle :
45407: GO 46235
45409: LD_INT 2
45411: DOUBLE
45412: EQUAL
45413: IFTRUE 45417
45415: GO 46223
45417: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45418: LD_VAR 0 6
45422: PPUSH
45423: CALL_OW 264
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: LD_INT 42
45433: PUSH
45434: LD_INT 24
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: IN
45442: IFFALSE 45463
// points := [ 25 , 5 , 3 ] ;
45444: LD_ADDR_VAR 0 9
45448: PUSH
45449: LD_INT 25
45451: PUSH
45452: LD_INT 5
45454: PUSH
45455: LD_INT 3
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45463: LD_VAR 0 6
45467: PPUSH
45468: CALL_OW 264
45472: PUSH
45473: LD_INT 4
45475: PUSH
45476: LD_INT 43
45478: PUSH
45479: LD_INT 25
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: IN
45487: IFFALSE 45508
// points := [ 40 , 15 , 5 ] ;
45489: LD_ADDR_VAR 0 9
45493: PUSH
45494: LD_INT 40
45496: PUSH
45497: LD_INT 15
45499: PUSH
45500: LD_INT 5
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45508: LD_VAR 0 6
45512: PPUSH
45513: CALL_OW 264
45517: PUSH
45518: LD_INT 3
45520: PUSH
45521: LD_INT 23
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: IN
45528: IFFALSE 45549
// points := [ 7 , 25 , 8 ] ;
45530: LD_ADDR_VAR 0 9
45534: PUSH
45535: LD_INT 7
45537: PUSH
45538: LD_INT 25
45540: PUSH
45541: LD_INT 8
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45549: LD_VAR 0 6
45553: PPUSH
45554: CALL_OW 264
45558: PUSH
45559: LD_INT 5
45561: PUSH
45562: LD_INT 27
45564: PUSH
45565: LD_INT 44
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: IN
45573: IFFALSE 45594
// points := [ 14 , 50 , 16 ] ;
45575: LD_ADDR_VAR 0 9
45579: PUSH
45580: LD_INT 14
45582: PUSH
45583: LD_INT 50
45585: PUSH
45586: LD_INT 16
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45594: LD_VAR 0 6
45598: PPUSH
45599: CALL_OW 264
45603: PUSH
45604: LD_INT 6
45606: PUSH
45607: LD_INT 46
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: IN
45614: IFFALSE 45635
// points := [ 32 , 120 , 70 ] ;
45616: LD_ADDR_VAR 0 9
45620: PUSH
45621: LD_INT 32
45623: PUSH
45624: LD_INT 120
45626: PUSH
45627: LD_INT 70
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45635: LD_VAR 0 6
45639: PPUSH
45640: CALL_OW 264
45644: PUSH
45645: LD_INT 7
45647: PUSH
45648: LD_INT 28
45650: PUSH
45651: LD_INT 45
45653: PUSH
45654: LD_INT 92
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: IN
45663: IFFALSE 45684
// points := [ 35 , 20 , 45 ] ;
45665: LD_ADDR_VAR 0 9
45669: PUSH
45670: LD_INT 35
45672: PUSH
45673: LD_INT 20
45675: PUSH
45676: LD_INT 45
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45684: LD_VAR 0 6
45688: PPUSH
45689: CALL_OW 264
45693: PUSH
45694: LD_INT 47
45696: PUSH
45697: EMPTY
45698: LIST
45699: IN
45700: IFFALSE 45721
// points := [ 67 , 45 , 75 ] ;
45702: LD_ADDR_VAR 0 9
45706: PUSH
45707: LD_INT 67
45709: PUSH
45710: LD_INT 45
45712: PUSH
45713: LD_INT 75
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45721: LD_VAR 0 6
45725: PPUSH
45726: CALL_OW 264
45730: PUSH
45731: LD_INT 26
45733: PUSH
45734: EMPTY
45735: LIST
45736: IN
45737: IFFALSE 45758
// points := [ 120 , 30 , 80 ] ;
45739: LD_ADDR_VAR 0 9
45743: PUSH
45744: LD_INT 120
45746: PUSH
45747: LD_INT 30
45749: PUSH
45750: LD_INT 80
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: LIST
45757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45758: LD_VAR 0 6
45762: PPUSH
45763: CALL_OW 264
45767: PUSH
45768: LD_INT 22
45770: PUSH
45771: EMPTY
45772: LIST
45773: IN
45774: IFFALSE 45795
// points := [ 40 , 1 , 1 ] ;
45776: LD_ADDR_VAR 0 9
45780: PUSH
45781: LD_INT 40
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45795: LD_VAR 0 6
45799: PPUSH
45800: CALL_OW 264
45804: PUSH
45805: LD_INT 29
45807: PUSH
45808: EMPTY
45809: LIST
45810: IN
45811: IFFALSE 45832
// points := [ 70 , 200 , 400 ] ;
45813: LD_ADDR_VAR 0 9
45817: PUSH
45818: LD_INT 70
45820: PUSH
45821: LD_INT 200
45823: PUSH
45824: LD_INT 400
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45832: LD_VAR 0 6
45836: PPUSH
45837: CALL_OW 264
45841: PUSH
45842: LD_INT 14
45844: PUSH
45845: LD_INT 53
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: IN
45852: IFFALSE 45873
// points := [ 40 , 10 , 20 ] ;
45854: LD_ADDR_VAR 0 9
45858: PUSH
45859: LD_INT 40
45861: PUSH
45862: LD_INT 10
45864: PUSH
45865: LD_INT 20
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45873: LD_VAR 0 6
45877: PPUSH
45878: CALL_OW 264
45882: PUSH
45883: LD_INT 9
45885: PUSH
45886: EMPTY
45887: LIST
45888: IN
45889: IFFALSE 45910
// points := [ 5 , 70 , 20 ] ;
45891: LD_ADDR_VAR 0 9
45895: PUSH
45896: LD_INT 5
45898: PUSH
45899: LD_INT 70
45901: PUSH
45902: LD_INT 20
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45910: LD_VAR 0 6
45914: PPUSH
45915: CALL_OW 264
45919: PUSH
45920: LD_INT 10
45922: PUSH
45923: EMPTY
45924: LIST
45925: IN
45926: IFFALSE 45947
// points := [ 35 , 110 , 70 ] ;
45928: LD_ADDR_VAR 0 9
45932: PUSH
45933: LD_INT 35
45935: PUSH
45936: LD_INT 110
45938: PUSH
45939: LD_INT 70
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45947: LD_VAR 0 6
45951: PPUSH
45952: CALL_OW 265
45956: PUSH
45957: LD_INT 25
45959: EQUAL
45960: IFFALSE 45981
// points := [ 80 , 65 , 100 ] ;
45962: LD_ADDR_VAR 0 9
45966: PUSH
45967: LD_INT 80
45969: PUSH
45970: LD_INT 65
45972: PUSH
45973: LD_INT 100
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45981: LD_VAR 0 6
45985: PPUSH
45986: CALL_OW 263
45990: PUSH
45991: LD_INT 1
45993: EQUAL
45994: IFFALSE 46029
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45996: LD_ADDR_VAR 0 10
46000: PUSH
46001: LD_VAR 0 10
46005: PUSH
46006: LD_VAR 0 6
46010: PPUSH
46011: CALL_OW 311
46015: PPUSH
46016: LD_INT 3
46018: PPUSH
46019: CALL_OW 259
46023: PUSH
46024: LD_INT 4
46026: MUL
46027: MUL
46028: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46029: LD_VAR 0 6
46033: PPUSH
46034: CALL_OW 263
46038: PUSH
46039: LD_INT 2
46041: EQUAL
46042: IFFALSE 46093
// begin j := IsControledBy ( i ) ;
46044: LD_ADDR_VAR 0 7
46048: PUSH
46049: LD_VAR 0 6
46053: PPUSH
46054: CALL_OW 312
46058: ST_TO_ADDR
// if j then
46059: LD_VAR 0 7
46063: IFFALSE 46093
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46065: LD_ADDR_VAR 0 10
46069: PUSH
46070: LD_VAR 0 10
46074: PUSH
46075: LD_VAR 0 7
46079: PPUSH
46080: LD_INT 3
46082: PPUSH
46083: CALL_OW 259
46087: PUSH
46088: LD_INT 3
46090: MUL
46091: MUL
46092: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46093: LD_VAR 0 6
46097: PPUSH
46098: CALL_OW 264
46102: PUSH
46103: LD_INT 5
46105: PUSH
46106: LD_INT 6
46108: PUSH
46109: LD_INT 46
46111: PUSH
46112: LD_INT 44
46114: PUSH
46115: LD_INT 47
46117: PUSH
46118: LD_INT 45
46120: PUSH
46121: LD_INT 28
46123: PUSH
46124: LD_INT 7
46126: PUSH
46127: LD_INT 27
46129: PUSH
46130: LD_INT 29
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: IN
46145: PUSH
46146: LD_VAR 0 1
46150: PPUSH
46151: LD_INT 52
46153: PPUSH
46154: CALL_OW 321
46158: PUSH
46159: LD_INT 2
46161: EQUAL
46162: AND
46163: IFFALSE 46180
// bpoints := bpoints * 1.2 ;
46165: LD_ADDR_VAR 0 10
46169: PUSH
46170: LD_VAR 0 10
46174: PUSH
46175: LD_REAL  1.20000000000000E+0000
46178: MUL
46179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46180: LD_VAR 0 6
46184: PPUSH
46185: CALL_OW 264
46189: PUSH
46190: LD_INT 6
46192: PUSH
46193: LD_INT 46
46195: PUSH
46196: LD_INT 47
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: IN
46204: IFFALSE 46221
// bpoints := bpoints * 1.2 ;
46206: LD_ADDR_VAR 0 10
46210: PUSH
46211: LD_VAR 0 10
46215: PUSH
46216: LD_REAL  1.20000000000000E+0000
46219: MUL
46220: ST_TO_ADDR
// end ; unit_building :
46221: GO 46235
46223: LD_INT 3
46225: DOUBLE
46226: EQUAL
46227: IFTRUE 46231
46229: GO 46234
46231: POP
// ; end ;
46232: GO 46235
46234: POP
// for j = 1 to 3 do
46235: LD_ADDR_VAR 0 7
46239: PUSH
46240: DOUBLE
46241: LD_INT 1
46243: DEC
46244: ST_TO_ADDR
46245: LD_INT 3
46247: PUSH
46248: FOR_TO
46249: IFFALSE 46302
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46251: LD_ADDR_VAR 0 5
46255: PUSH
46256: LD_VAR 0 5
46260: PPUSH
46261: LD_VAR 0 7
46265: PPUSH
46266: LD_VAR 0 5
46270: PUSH
46271: LD_VAR 0 7
46275: ARRAY
46276: PUSH
46277: LD_VAR 0 9
46281: PUSH
46282: LD_VAR 0 7
46286: ARRAY
46287: PUSH
46288: LD_VAR 0 10
46292: MUL
46293: PLUS
46294: PPUSH
46295: CALL_OW 1
46299: ST_TO_ADDR
46300: GO 46248
46302: POP
46303: POP
// end ;
46304: GO 44783
46306: POP
46307: POP
// result := Replace ( result , 4 , tmp ) ;
46308: LD_ADDR_VAR 0 5
46312: PUSH
46313: LD_VAR 0 5
46317: PPUSH
46318: LD_INT 4
46320: PPUSH
46321: LD_VAR 0 8
46325: PPUSH
46326: CALL_OW 1
46330: ST_TO_ADDR
// end ;
46331: LD_VAR 0 5
46335: RET
// export function DangerAtRange ( unit , range ) ; begin
46336: LD_INT 0
46338: PPUSH
// if not unit then
46339: LD_VAR 0 1
46343: NOT
46344: IFFALSE 46348
// exit ;
46346: GO 46393
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46348: LD_ADDR_VAR 0 3
46352: PUSH
46353: LD_VAR 0 1
46357: PPUSH
46358: CALL_OW 255
46362: PPUSH
46363: LD_VAR 0 1
46367: PPUSH
46368: CALL_OW 250
46372: PPUSH
46373: LD_VAR 0 1
46377: PPUSH
46378: CALL_OW 251
46382: PPUSH
46383: LD_VAR 0 2
46387: PPUSH
46388: CALL 44635 0 4
46392: ST_TO_ADDR
// end ;
46393: LD_VAR 0 3
46397: RET
// export function DangerInArea ( side , area ) ; begin
46398: LD_INT 0
46400: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46401: LD_ADDR_VAR 0 3
46405: PUSH
46406: LD_VAR 0 2
46410: PPUSH
46411: LD_INT 81
46413: PUSH
46414: LD_VAR 0 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PPUSH
46423: CALL_OW 70
46427: ST_TO_ADDR
// end ;
46428: LD_VAR 0 3
46432: RET
// export function IsExtension ( b ) ; begin
46433: LD_INT 0
46435: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46436: LD_ADDR_VAR 0 2
46440: PUSH
46441: LD_VAR 0 1
46445: PUSH
46446: LD_INT 23
46448: PUSH
46449: LD_INT 20
46451: PUSH
46452: LD_INT 22
46454: PUSH
46455: LD_INT 17
46457: PUSH
46458: LD_INT 24
46460: PUSH
46461: LD_INT 21
46463: PUSH
46464: LD_INT 19
46466: PUSH
46467: LD_INT 16
46469: PUSH
46470: LD_INT 25
46472: PUSH
46473: LD_INT 18
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: IN
46488: ST_TO_ADDR
// end ;
46489: LD_VAR 0 2
46493: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46494: LD_INT 0
46496: PPUSH
46497: PPUSH
46498: PPUSH
// result := [ ] ;
46499: LD_ADDR_VAR 0 4
46503: PUSH
46504: EMPTY
46505: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46506: LD_ADDR_VAR 0 5
46510: PUSH
46511: LD_VAR 0 2
46515: PPUSH
46516: LD_INT 21
46518: PUSH
46519: LD_INT 3
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PPUSH
46526: CALL_OW 70
46530: ST_TO_ADDR
// if not tmp then
46531: LD_VAR 0 5
46535: NOT
46536: IFFALSE 46540
// exit ;
46538: GO 46604
// if checkLink then
46540: LD_VAR 0 3
46544: IFFALSE 46594
// begin for i in tmp do
46546: LD_ADDR_VAR 0 6
46550: PUSH
46551: LD_VAR 0 5
46555: PUSH
46556: FOR_IN
46557: IFFALSE 46592
// if GetBase ( i ) <> base then
46559: LD_VAR 0 6
46563: PPUSH
46564: CALL_OW 274
46568: PUSH
46569: LD_VAR 0 1
46573: NONEQUAL
46574: IFFALSE 46590
// ComLinkToBase ( base , i ) ;
46576: LD_VAR 0 1
46580: PPUSH
46581: LD_VAR 0 6
46585: PPUSH
46586: CALL_OW 169
46590: GO 46556
46592: POP
46593: POP
// end ; result := tmp ;
46594: LD_ADDR_VAR 0 4
46598: PUSH
46599: LD_VAR 0 5
46603: ST_TO_ADDR
// end ;
46604: LD_VAR 0 4
46608: RET
// export function ComComplete ( units , b ) ; var i ; begin
46609: LD_INT 0
46611: PPUSH
46612: PPUSH
// if not units then
46613: LD_VAR 0 1
46617: NOT
46618: IFFALSE 46622
// exit ;
46620: GO 46712
// for i in units do
46622: LD_ADDR_VAR 0 4
46626: PUSH
46627: LD_VAR 0 1
46631: PUSH
46632: FOR_IN
46633: IFFALSE 46710
// if BuildingStatus ( b ) = bs_build then
46635: LD_VAR 0 2
46639: PPUSH
46640: CALL_OW 461
46644: PUSH
46645: LD_INT 1
46647: EQUAL
46648: IFFALSE 46708
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46650: LD_VAR 0 4
46654: PPUSH
46655: LD_STRING h
46657: PUSH
46658: LD_VAR 0 2
46662: PPUSH
46663: CALL_OW 250
46667: PUSH
46668: LD_VAR 0 2
46672: PPUSH
46673: CALL_OW 251
46677: PUSH
46678: LD_VAR 0 2
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: PUSH
46701: EMPTY
46702: LIST
46703: PPUSH
46704: CALL_OW 446
46708: GO 46632
46710: POP
46711: POP
// end ;
46712: LD_VAR 0 3
46716: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46717: LD_INT 0
46719: PPUSH
46720: PPUSH
46721: PPUSH
46722: PPUSH
46723: PPUSH
46724: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46725: LD_VAR 0 1
46729: NOT
46730: PUSH
46731: LD_VAR 0 1
46735: PPUSH
46736: CALL_OW 263
46740: PUSH
46741: LD_INT 2
46743: NONEQUAL
46744: OR
46745: IFFALSE 46749
// exit ;
46747: GO 47065
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46749: LD_ADDR_VAR 0 6
46753: PUSH
46754: LD_INT 22
46756: PUSH
46757: LD_VAR 0 1
46761: PPUSH
46762: CALL_OW 255
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 30
46776: PUSH
46777: LD_INT 36
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 34
46786: PUSH
46787: LD_INT 31
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: LIST
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PPUSH
46803: CALL_OW 69
46807: ST_TO_ADDR
// if not tmp then
46808: LD_VAR 0 6
46812: NOT
46813: IFFALSE 46817
// exit ;
46815: GO 47065
// result := [ ] ;
46817: LD_ADDR_VAR 0 2
46821: PUSH
46822: EMPTY
46823: ST_TO_ADDR
// for i in tmp do
46824: LD_ADDR_VAR 0 3
46828: PUSH
46829: LD_VAR 0 6
46833: PUSH
46834: FOR_IN
46835: IFFALSE 46906
// begin t := UnitsInside ( i ) ;
46837: LD_ADDR_VAR 0 4
46841: PUSH
46842: LD_VAR 0 3
46846: PPUSH
46847: CALL_OW 313
46851: ST_TO_ADDR
// if t then
46852: LD_VAR 0 4
46856: IFFALSE 46904
// for j in t do
46858: LD_ADDR_VAR 0 7
46862: PUSH
46863: LD_VAR 0 4
46867: PUSH
46868: FOR_IN
46869: IFFALSE 46902
// result := Replace ( result , result + 1 , j ) ;
46871: LD_ADDR_VAR 0 2
46875: PUSH
46876: LD_VAR 0 2
46880: PPUSH
46881: LD_VAR 0 2
46885: PUSH
46886: LD_INT 1
46888: PLUS
46889: PPUSH
46890: LD_VAR 0 7
46894: PPUSH
46895: CALL_OW 1
46899: ST_TO_ADDR
46900: GO 46868
46902: POP
46903: POP
// end ;
46904: GO 46834
46906: POP
46907: POP
// if not result then
46908: LD_VAR 0 2
46912: NOT
46913: IFFALSE 46917
// exit ;
46915: GO 47065
// mech := result [ 1 ] ;
46917: LD_ADDR_VAR 0 5
46921: PUSH
46922: LD_VAR 0 2
46926: PUSH
46927: LD_INT 1
46929: ARRAY
46930: ST_TO_ADDR
// if result > 1 then
46931: LD_VAR 0 2
46935: PUSH
46936: LD_INT 1
46938: GREATER
46939: IFFALSE 47051
// begin for i = 2 to result do
46941: LD_ADDR_VAR 0 3
46945: PUSH
46946: DOUBLE
46947: LD_INT 2
46949: DEC
46950: ST_TO_ADDR
46951: LD_VAR 0 2
46955: PUSH
46956: FOR_TO
46957: IFFALSE 47049
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46959: LD_ADDR_VAR 0 4
46963: PUSH
46964: LD_VAR 0 2
46968: PUSH
46969: LD_VAR 0 3
46973: ARRAY
46974: PPUSH
46975: LD_INT 3
46977: PPUSH
46978: CALL_OW 259
46982: PUSH
46983: LD_VAR 0 2
46987: PUSH
46988: LD_VAR 0 3
46992: ARRAY
46993: PPUSH
46994: CALL_OW 432
46998: MINUS
46999: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47000: LD_VAR 0 4
47004: PUSH
47005: LD_VAR 0 5
47009: PPUSH
47010: LD_INT 3
47012: PPUSH
47013: CALL_OW 259
47017: PUSH
47018: LD_VAR 0 5
47022: PPUSH
47023: CALL_OW 432
47027: MINUS
47028: GREATEREQUAL
47029: IFFALSE 47047
// mech := result [ i ] ;
47031: LD_ADDR_VAR 0 5
47035: PUSH
47036: LD_VAR 0 2
47040: PUSH
47041: LD_VAR 0 3
47045: ARRAY
47046: ST_TO_ADDR
// end ;
47047: GO 46956
47049: POP
47050: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47051: LD_VAR 0 1
47055: PPUSH
47056: LD_VAR 0 5
47060: PPUSH
47061: CALL_OW 135
// end ;
47065: LD_VAR 0 2
47069: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47070: LD_INT 0
47072: PPUSH
47073: PPUSH
47074: PPUSH
47075: PPUSH
47076: PPUSH
47077: PPUSH
47078: PPUSH
47079: PPUSH
47080: PPUSH
47081: PPUSH
47082: PPUSH
47083: PPUSH
47084: PPUSH
// result := [ ] ;
47085: LD_ADDR_VAR 0 7
47089: PUSH
47090: EMPTY
47091: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47092: LD_VAR 0 1
47096: PPUSH
47097: CALL_OW 266
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: IN
47112: NOT
47113: IFFALSE 47117
// exit ;
47115: GO 48751
// if name then
47117: LD_VAR 0 3
47121: IFFALSE 47137
// SetBName ( base_dep , name ) ;
47123: LD_VAR 0 1
47127: PPUSH
47128: LD_VAR 0 3
47132: PPUSH
47133: CALL_OW 500
// base := GetBase ( base_dep ) ;
47137: LD_ADDR_VAR 0 15
47141: PUSH
47142: LD_VAR 0 1
47146: PPUSH
47147: CALL_OW 274
47151: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47152: LD_ADDR_VAR 0 16
47156: PUSH
47157: LD_VAR 0 1
47161: PPUSH
47162: CALL_OW 255
47166: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47167: LD_ADDR_VAR 0 17
47171: PUSH
47172: LD_VAR 0 1
47176: PPUSH
47177: CALL_OW 248
47181: ST_TO_ADDR
// if sources then
47182: LD_VAR 0 5
47186: IFFALSE 47233
// for i = 1 to 3 do
47188: LD_ADDR_VAR 0 8
47192: PUSH
47193: DOUBLE
47194: LD_INT 1
47196: DEC
47197: ST_TO_ADDR
47198: LD_INT 3
47200: PUSH
47201: FOR_TO
47202: IFFALSE 47231
// AddResourceType ( base , i , sources [ i ] ) ;
47204: LD_VAR 0 15
47208: PPUSH
47209: LD_VAR 0 8
47213: PPUSH
47214: LD_VAR 0 5
47218: PUSH
47219: LD_VAR 0 8
47223: ARRAY
47224: PPUSH
47225: CALL_OW 276
47229: GO 47201
47231: POP
47232: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47233: LD_ADDR_VAR 0 18
47237: PUSH
47238: LD_VAR 0 15
47242: PPUSH
47243: LD_VAR 0 2
47247: PPUSH
47248: LD_INT 1
47250: PPUSH
47251: CALL 46494 0 3
47255: ST_TO_ADDR
// InitHc ;
47256: CALL_OW 19
// InitUc ;
47260: CALL_OW 18
// uc_side := side ;
47264: LD_ADDR_OWVAR 20
47268: PUSH
47269: LD_VAR 0 16
47273: ST_TO_ADDR
// uc_nation := nation ;
47274: LD_ADDR_OWVAR 21
47278: PUSH
47279: LD_VAR 0 17
47283: ST_TO_ADDR
// if buildings then
47284: LD_VAR 0 18
47288: IFFALSE 48610
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47290: LD_ADDR_VAR 0 19
47294: PUSH
47295: LD_VAR 0 18
47299: PPUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 30
47305: PUSH
47306: LD_INT 29
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 30
47315: PUSH
47316: LD_INT 30
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: PPUSH
47328: CALL_OW 72
47332: ST_TO_ADDR
// if tmp then
47333: LD_VAR 0 19
47337: IFFALSE 47385
// for i in tmp do
47339: LD_ADDR_VAR 0 8
47343: PUSH
47344: LD_VAR 0 19
47348: PUSH
47349: FOR_IN
47350: IFFALSE 47383
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47352: LD_VAR 0 8
47356: PPUSH
47357: CALL_OW 250
47361: PPUSH
47362: LD_VAR 0 8
47366: PPUSH
47367: CALL_OW 251
47371: PPUSH
47372: LD_VAR 0 16
47376: PPUSH
47377: CALL_OW 441
47381: GO 47349
47383: POP
47384: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47385: LD_VAR 0 18
47389: PPUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 30
47395: PUSH
47396: LD_INT 32
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 30
47405: PUSH
47406: LD_INT 33
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: LIST
47417: PPUSH
47418: CALL_OW 72
47422: IFFALSE 47510
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47424: LD_ADDR_VAR 0 8
47428: PUSH
47429: LD_VAR 0 18
47433: PPUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 30
47439: PUSH
47440: LD_INT 32
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 30
47449: PUSH
47450: LD_INT 33
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: LIST
47461: PPUSH
47462: CALL_OW 72
47466: PUSH
47467: FOR_IN
47468: IFFALSE 47508
// begin if not GetBWeapon ( i ) then
47470: LD_VAR 0 8
47474: PPUSH
47475: CALL_OW 269
47479: NOT
47480: IFFALSE 47506
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47482: LD_VAR 0 8
47486: PPUSH
47487: LD_VAR 0 8
47491: PPUSH
47492: LD_VAR 0 2
47496: PPUSH
47497: CALL 48756 0 2
47501: PPUSH
47502: CALL_OW 431
// end ;
47506: GO 47467
47508: POP
47509: POP
// end ; for i = 1 to personel do
47510: LD_ADDR_VAR 0 8
47514: PUSH
47515: DOUBLE
47516: LD_INT 1
47518: DEC
47519: ST_TO_ADDR
47520: LD_VAR 0 6
47524: PUSH
47525: FOR_TO
47526: IFFALSE 48590
// begin if i > 4 then
47528: LD_VAR 0 8
47532: PUSH
47533: LD_INT 4
47535: GREATER
47536: IFFALSE 47540
// break ;
47538: GO 48590
// case i of 1 :
47540: LD_VAR 0 8
47544: PUSH
47545: LD_INT 1
47547: DOUBLE
47548: EQUAL
47549: IFTRUE 47553
47551: GO 47633
47553: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47554: LD_ADDR_VAR 0 12
47558: PUSH
47559: LD_VAR 0 18
47563: PPUSH
47564: LD_INT 22
47566: PUSH
47567: LD_VAR 0 16
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 58
47578: PUSH
47579: EMPTY
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 30
47587: PUSH
47588: LD_INT 32
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 30
47597: PUSH
47598: LD_INT 4
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 30
47607: PUSH
47608: LD_INT 5
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: PPUSH
47626: CALL_OW 72
47630: ST_TO_ADDR
47631: GO 47855
47633: LD_INT 2
47635: DOUBLE
47636: EQUAL
47637: IFTRUE 47641
47639: GO 47703
47641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47642: LD_ADDR_VAR 0 12
47646: PUSH
47647: LD_VAR 0 18
47651: PPUSH
47652: LD_INT 22
47654: PUSH
47655: LD_VAR 0 16
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 30
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 30
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: LIST
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PPUSH
47696: CALL_OW 72
47700: ST_TO_ADDR
47701: GO 47855
47703: LD_INT 3
47705: DOUBLE
47706: EQUAL
47707: IFTRUE 47711
47709: GO 47773
47711: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47712: LD_ADDR_VAR 0 12
47716: PUSH
47717: LD_VAR 0 18
47721: PPUSH
47722: LD_INT 22
47724: PUSH
47725: LD_VAR 0 16
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 30
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 30
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PPUSH
47766: CALL_OW 72
47770: ST_TO_ADDR
47771: GO 47855
47773: LD_INT 4
47775: DOUBLE
47776: EQUAL
47777: IFTRUE 47781
47779: GO 47854
47781: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47782: LD_ADDR_VAR 0 12
47786: PUSH
47787: LD_VAR 0 18
47791: PPUSH
47792: LD_INT 22
47794: PUSH
47795: LD_VAR 0 16
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 30
47809: PUSH
47810: LD_INT 6
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 30
47819: PUSH
47820: LD_INT 7
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 30
47829: PUSH
47830: LD_INT 8
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PPUSH
47847: CALL_OW 72
47851: ST_TO_ADDR
47852: GO 47855
47854: POP
// if i = 1 then
47855: LD_VAR 0 8
47859: PUSH
47860: LD_INT 1
47862: EQUAL
47863: IFFALSE 47974
// begin tmp := [ ] ;
47865: LD_ADDR_VAR 0 19
47869: PUSH
47870: EMPTY
47871: ST_TO_ADDR
// for j in f do
47872: LD_ADDR_VAR 0 9
47876: PUSH
47877: LD_VAR 0 12
47881: PUSH
47882: FOR_IN
47883: IFFALSE 47956
// if GetBType ( j ) = b_bunker then
47885: LD_VAR 0 9
47889: PPUSH
47890: CALL_OW 266
47894: PUSH
47895: LD_INT 32
47897: EQUAL
47898: IFFALSE 47925
// tmp := Insert ( tmp , 1 , j ) else
47900: LD_ADDR_VAR 0 19
47904: PUSH
47905: LD_VAR 0 19
47909: PPUSH
47910: LD_INT 1
47912: PPUSH
47913: LD_VAR 0 9
47917: PPUSH
47918: CALL_OW 2
47922: ST_TO_ADDR
47923: GO 47954
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47925: LD_ADDR_VAR 0 19
47929: PUSH
47930: LD_VAR 0 19
47934: PPUSH
47935: LD_VAR 0 19
47939: PUSH
47940: LD_INT 1
47942: PLUS
47943: PPUSH
47944: LD_VAR 0 9
47948: PPUSH
47949: CALL_OW 2
47953: ST_TO_ADDR
47954: GO 47882
47956: POP
47957: POP
// if tmp then
47958: LD_VAR 0 19
47962: IFFALSE 47974
// f := tmp ;
47964: LD_ADDR_VAR 0 12
47968: PUSH
47969: LD_VAR 0 19
47973: ST_TO_ADDR
// end ; x := personel [ i ] ;
47974: LD_ADDR_VAR 0 13
47978: PUSH
47979: LD_VAR 0 6
47983: PUSH
47984: LD_VAR 0 8
47988: ARRAY
47989: ST_TO_ADDR
// if x = - 1 then
47990: LD_VAR 0 13
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: EQUAL
47999: IFFALSE 48208
// begin for j in f do
48001: LD_ADDR_VAR 0 9
48005: PUSH
48006: LD_VAR 0 12
48010: PUSH
48011: FOR_IN
48012: IFFALSE 48204
// repeat InitHc ;
48014: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48018: LD_VAR 0 9
48022: PPUSH
48023: CALL_OW 266
48027: PUSH
48028: LD_INT 5
48030: EQUAL
48031: IFFALSE 48101
// begin if UnitsInside ( j ) < 3 then
48033: LD_VAR 0 9
48037: PPUSH
48038: CALL_OW 313
48042: PUSH
48043: LD_INT 3
48045: LESS
48046: IFFALSE 48082
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48048: LD_INT 0
48050: PPUSH
48051: LD_INT 5
48053: PUSH
48054: LD_INT 8
48056: PUSH
48057: LD_INT 9
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: LIST
48064: PUSH
48065: LD_VAR 0 17
48069: ARRAY
48070: PPUSH
48071: LD_VAR 0 4
48075: PPUSH
48076: CALL_OW 380
48080: GO 48099
// PrepareHuman ( false , i , skill ) ;
48082: LD_INT 0
48084: PPUSH
48085: LD_VAR 0 8
48089: PPUSH
48090: LD_VAR 0 4
48094: PPUSH
48095: CALL_OW 380
// end else
48099: GO 48118
// PrepareHuman ( false , i , skill ) ;
48101: LD_INT 0
48103: PPUSH
48104: LD_VAR 0 8
48108: PPUSH
48109: LD_VAR 0 4
48113: PPUSH
48114: CALL_OW 380
// un := CreateHuman ;
48118: LD_ADDR_VAR 0 14
48122: PUSH
48123: CALL_OW 44
48127: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48128: LD_ADDR_VAR 0 7
48132: PUSH
48133: LD_VAR 0 7
48137: PPUSH
48138: LD_INT 1
48140: PPUSH
48141: LD_VAR 0 14
48145: PPUSH
48146: CALL_OW 2
48150: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48151: LD_VAR 0 14
48155: PPUSH
48156: LD_VAR 0 9
48160: PPUSH
48161: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48165: LD_VAR 0 9
48169: PPUSH
48170: CALL_OW 313
48174: PUSH
48175: LD_INT 6
48177: EQUAL
48178: PUSH
48179: LD_VAR 0 9
48183: PPUSH
48184: CALL_OW 266
48188: PUSH
48189: LD_INT 32
48191: PUSH
48192: LD_INT 31
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: IN
48199: OR
48200: IFFALSE 48014
48202: GO 48011
48204: POP
48205: POP
// end else
48206: GO 48588
// for j = 1 to x do
48208: LD_ADDR_VAR 0 9
48212: PUSH
48213: DOUBLE
48214: LD_INT 1
48216: DEC
48217: ST_TO_ADDR
48218: LD_VAR 0 13
48222: PUSH
48223: FOR_TO
48224: IFFALSE 48586
// begin InitHc ;
48226: CALL_OW 19
// if not f then
48230: LD_VAR 0 12
48234: NOT
48235: IFFALSE 48324
// begin PrepareHuman ( false , i , skill ) ;
48237: LD_INT 0
48239: PPUSH
48240: LD_VAR 0 8
48244: PPUSH
48245: LD_VAR 0 4
48249: PPUSH
48250: CALL_OW 380
// un := CreateHuman ;
48254: LD_ADDR_VAR 0 14
48258: PUSH
48259: CALL_OW 44
48263: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48264: LD_ADDR_VAR 0 7
48268: PUSH
48269: LD_VAR 0 7
48273: PPUSH
48274: LD_INT 1
48276: PPUSH
48277: LD_VAR 0 14
48281: PPUSH
48282: CALL_OW 2
48286: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48287: LD_VAR 0 14
48291: PPUSH
48292: LD_VAR 0 1
48296: PPUSH
48297: CALL_OW 250
48301: PPUSH
48302: LD_VAR 0 1
48306: PPUSH
48307: CALL_OW 251
48311: PPUSH
48312: LD_INT 10
48314: PPUSH
48315: LD_INT 0
48317: PPUSH
48318: CALL_OW 50
// continue ;
48322: GO 48223
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48324: LD_VAR 0 12
48328: PUSH
48329: LD_INT 1
48331: ARRAY
48332: PPUSH
48333: CALL_OW 313
48337: PUSH
48338: LD_VAR 0 12
48342: PUSH
48343: LD_INT 1
48345: ARRAY
48346: PPUSH
48347: CALL_OW 266
48351: PUSH
48352: LD_INT 32
48354: PUSH
48355: LD_INT 31
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: IN
48362: AND
48363: PUSH
48364: LD_VAR 0 12
48368: PUSH
48369: LD_INT 1
48371: ARRAY
48372: PPUSH
48373: CALL_OW 313
48377: PUSH
48378: LD_INT 6
48380: EQUAL
48381: OR
48382: IFFALSE 48402
// f := Delete ( f , 1 ) ;
48384: LD_ADDR_VAR 0 12
48388: PUSH
48389: LD_VAR 0 12
48393: PPUSH
48394: LD_INT 1
48396: PPUSH
48397: CALL_OW 3
48401: ST_TO_ADDR
// if not f then
48402: LD_VAR 0 12
48406: NOT
48407: IFFALSE 48425
// begin x := x + 2 ;
48409: LD_ADDR_VAR 0 13
48413: PUSH
48414: LD_VAR 0 13
48418: PUSH
48419: LD_INT 2
48421: PLUS
48422: ST_TO_ADDR
// continue ;
48423: GO 48223
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48425: LD_VAR 0 12
48429: PUSH
48430: LD_INT 1
48432: ARRAY
48433: PPUSH
48434: CALL_OW 266
48438: PUSH
48439: LD_INT 5
48441: EQUAL
48442: IFFALSE 48516
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48444: LD_VAR 0 12
48448: PUSH
48449: LD_INT 1
48451: ARRAY
48452: PPUSH
48453: CALL_OW 313
48457: PUSH
48458: LD_INT 3
48460: LESS
48461: IFFALSE 48497
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48463: LD_INT 0
48465: PPUSH
48466: LD_INT 5
48468: PUSH
48469: LD_INT 8
48471: PUSH
48472: LD_INT 9
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: PUSH
48480: LD_VAR 0 17
48484: ARRAY
48485: PPUSH
48486: LD_VAR 0 4
48490: PPUSH
48491: CALL_OW 380
48495: GO 48514
// PrepareHuman ( false , i , skill ) ;
48497: LD_INT 0
48499: PPUSH
48500: LD_VAR 0 8
48504: PPUSH
48505: LD_VAR 0 4
48509: PPUSH
48510: CALL_OW 380
// end else
48514: GO 48533
// PrepareHuman ( false , i , skill ) ;
48516: LD_INT 0
48518: PPUSH
48519: LD_VAR 0 8
48523: PPUSH
48524: LD_VAR 0 4
48528: PPUSH
48529: CALL_OW 380
// un := CreateHuman ;
48533: LD_ADDR_VAR 0 14
48537: PUSH
48538: CALL_OW 44
48542: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48543: LD_ADDR_VAR 0 7
48547: PUSH
48548: LD_VAR 0 7
48552: PPUSH
48553: LD_INT 1
48555: PPUSH
48556: LD_VAR 0 14
48560: PPUSH
48561: CALL_OW 2
48565: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48566: LD_VAR 0 14
48570: PPUSH
48571: LD_VAR 0 12
48575: PUSH
48576: LD_INT 1
48578: ARRAY
48579: PPUSH
48580: CALL_OW 52
// end ;
48584: GO 48223
48586: POP
48587: POP
// end ;
48588: GO 47525
48590: POP
48591: POP
// result := result ^ buildings ;
48592: LD_ADDR_VAR 0 7
48596: PUSH
48597: LD_VAR 0 7
48601: PUSH
48602: LD_VAR 0 18
48606: ADD
48607: ST_TO_ADDR
// end else
48608: GO 48751
// begin for i = 1 to personel do
48610: LD_ADDR_VAR 0 8
48614: PUSH
48615: DOUBLE
48616: LD_INT 1
48618: DEC
48619: ST_TO_ADDR
48620: LD_VAR 0 6
48624: PUSH
48625: FOR_TO
48626: IFFALSE 48749
// begin if i > 4 then
48628: LD_VAR 0 8
48632: PUSH
48633: LD_INT 4
48635: GREATER
48636: IFFALSE 48640
// break ;
48638: GO 48749
// x := personel [ i ] ;
48640: LD_ADDR_VAR 0 13
48644: PUSH
48645: LD_VAR 0 6
48649: PUSH
48650: LD_VAR 0 8
48654: ARRAY
48655: ST_TO_ADDR
// if x = - 1 then
48656: LD_VAR 0 13
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: EQUAL
48665: IFFALSE 48669
// continue ;
48667: GO 48625
// PrepareHuman ( false , i , skill ) ;
48669: LD_INT 0
48671: PPUSH
48672: LD_VAR 0 8
48676: PPUSH
48677: LD_VAR 0 4
48681: PPUSH
48682: CALL_OW 380
// un := CreateHuman ;
48686: LD_ADDR_VAR 0 14
48690: PUSH
48691: CALL_OW 44
48695: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48696: LD_VAR 0 14
48700: PPUSH
48701: LD_VAR 0 1
48705: PPUSH
48706: CALL_OW 250
48710: PPUSH
48711: LD_VAR 0 1
48715: PPUSH
48716: CALL_OW 251
48720: PPUSH
48721: LD_INT 10
48723: PPUSH
48724: LD_INT 0
48726: PPUSH
48727: CALL_OW 50
// result := result ^ un ;
48731: LD_ADDR_VAR 0 7
48735: PUSH
48736: LD_VAR 0 7
48740: PUSH
48741: LD_VAR 0 14
48745: ADD
48746: ST_TO_ADDR
// end ;
48747: GO 48625
48749: POP
48750: POP
// end ; end ;
48751: LD_VAR 0 7
48755: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48756: LD_INT 0
48758: PPUSH
48759: PPUSH
48760: PPUSH
48761: PPUSH
48762: PPUSH
48763: PPUSH
48764: PPUSH
48765: PPUSH
48766: PPUSH
48767: PPUSH
48768: PPUSH
48769: PPUSH
48770: PPUSH
48771: PPUSH
48772: PPUSH
48773: PPUSH
// result := false ;
48774: LD_ADDR_VAR 0 3
48778: PUSH
48779: LD_INT 0
48781: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48782: LD_VAR 0 1
48786: NOT
48787: PUSH
48788: LD_VAR 0 1
48792: PPUSH
48793: CALL_OW 266
48797: PUSH
48798: LD_INT 32
48800: PUSH
48801: LD_INT 33
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: IN
48808: NOT
48809: OR
48810: IFFALSE 48814
// exit ;
48812: GO 49923
// nat := GetNation ( tower ) ;
48814: LD_ADDR_VAR 0 12
48818: PUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: CALL_OW 248
48828: ST_TO_ADDR
// side := GetSide ( tower ) ;
48829: LD_ADDR_VAR 0 16
48833: PUSH
48834: LD_VAR 0 1
48838: PPUSH
48839: CALL_OW 255
48843: ST_TO_ADDR
// x := GetX ( tower ) ;
48844: LD_ADDR_VAR 0 10
48848: PUSH
48849: LD_VAR 0 1
48853: PPUSH
48854: CALL_OW 250
48858: ST_TO_ADDR
// y := GetY ( tower ) ;
48859: LD_ADDR_VAR 0 11
48863: PUSH
48864: LD_VAR 0 1
48868: PPUSH
48869: CALL_OW 251
48873: ST_TO_ADDR
// if not x or not y then
48874: LD_VAR 0 10
48878: NOT
48879: PUSH
48880: LD_VAR 0 11
48884: NOT
48885: OR
48886: IFFALSE 48890
// exit ;
48888: GO 49923
// weapon := 0 ;
48890: LD_ADDR_VAR 0 18
48894: PUSH
48895: LD_INT 0
48897: ST_TO_ADDR
// fac_list := [ ] ;
48898: LD_ADDR_VAR 0 17
48902: PUSH
48903: EMPTY
48904: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48905: LD_ADDR_VAR 0 6
48909: PUSH
48910: LD_VAR 0 1
48914: PPUSH
48915: CALL_OW 274
48919: PPUSH
48920: LD_VAR 0 2
48924: PPUSH
48925: LD_INT 0
48927: PPUSH
48928: CALL 46494 0 3
48932: PPUSH
48933: LD_INT 30
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PPUSH
48943: CALL_OW 72
48947: ST_TO_ADDR
// if not factories then
48948: LD_VAR 0 6
48952: NOT
48953: IFFALSE 48957
// exit ;
48955: GO 49923
// for i in factories do
48957: LD_ADDR_VAR 0 8
48961: PUSH
48962: LD_VAR 0 6
48966: PUSH
48967: FOR_IN
48968: IFFALSE 48993
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48970: LD_ADDR_VAR 0 17
48974: PUSH
48975: LD_VAR 0 17
48979: PUSH
48980: LD_VAR 0 8
48984: PPUSH
48985: CALL_OW 478
48989: UNION
48990: ST_TO_ADDR
48991: GO 48967
48993: POP
48994: POP
// if not fac_list then
48995: LD_VAR 0 17
48999: NOT
49000: IFFALSE 49004
// exit ;
49002: GO 49923
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49004: LD_ADDR_VAR 0 5
49008: PUSH
49009: LD_INT 4
49011: PUSH
49012: LD_INT 5
49014: PUSH
49015: LD_INT 9
49017: PUSH
49018: LD_INT 10
49020: PUSH
49021: LD_INT 6
49023: PUSH
49024: LD_INT 7
49026: PUSH
49027: LD_INT 11
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 27
49041: PUSH
49042: LD_INT 28
49044: PUSH
49045: LD_INT 26
49047: PUSH
49048: LD_INT 30
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 43
49059: PUSH
49060: LD_INT 44
49062: PUSH
49063: LD_INT 46
49065: PUSH
49066: LD_INT 45
49068: PUSH
49069: LD_INT 47
49071: PUSH
49072: LD_INT 49
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: PUSH
49088: LD_VAR 0 12
49092: ARRAY
49093: ST_TO_ADDR
// list := list isect fac_list ;
49094: LD_ADDR_VAR 0 5
49098: PUSH
49099: LD_VAR 0 5
49103: PUSH
49104: LD_VAR 0 17
49108: ISECT
49109: ST_TO_ADDR
// if not list then
49110: LD_VAR 0 5
49114: NOT
49115: IFFALSE 49119
// exit ;
49117: GO 49923
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49119: LD_VAR 0 12
49123: PUSH
49124: LD_INT 3
49126: EQUAL
49127: PUSH
49128: LD_INT 49
49130: PUSH
49131: LD_VAR 0 5
49135: IN
49136: AND
49137: PUSH
49138: LD_INT 31
49140: PPUSH
49141: LD_VAR 0 16
49145: PPUSH
49146: CALL_OW 321
49150: PUSH
49151: LD_INT 2
49153: EQUAL
49154: AND
49155: IFFALSE 49215
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49157: LD_INT 22
49159: PUSH
49160: LD_VAR 0 16
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 35
49171: PUSH
49172: LD_INT 49
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 91
49181: PUSH
49182: LD_VAR 0 1
49186: PUSH
49187: LD_INT 10
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: LIST
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: PPUSH
49200: CALL_OW 69
49204: NOT
49205: IFFALSE 49215
// weapon := ru_time_lapser ;
49207: LD_ADDR_VAR 0 18
49211: PUSH
49212: LD_INT 49
49214: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49215: LD_VAR 0 12
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: IN
49230: PUSH
49231: LD_INT 11
49233: PUSH
49234: LD_VAR 0 5
49238: IN
49239: PUSH
49240: LD_INT 30
49242: PUSH
49243: LD_VAR 0 5
49247: IN
49248: OR
49249: AND
49250: PUSH
49251: LD_INT 6
49253: PPUSH
49254: LD_VAR 0 16
49258: PPUSH
49259: CALL_OW 321
49263: PUSH
49264: LD_INT 2
49266: EQUAL
49267: AND
49268: IFFALSE 49433
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49270: LD_INT 22
49272: PUSH
49273: LD_VAR 0 16
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 35
49287: PUSH
49288: LD_INT 11
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 35
49297: PUSH
49298: LD_INT 30
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 91
49312: PUSH
49313: LD_VAR 0 1
49317: PUSH
49318: LD_INT 18
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: LIST
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: PPUSH
49331: CALL_OW 69
49335: NOT
49336: PUSH
49337: LD_INT 22
49339: PUSH
49340: LD_VAR 0 16
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 30
49354: PUSH
49355: LD_INT 32
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 30
49364: PUSH
49365: LD_INT 33
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 91
49379: PUSH
49380: LD_VAR 0 1
49384: PUSH
49385: LD_INT 12
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: PPUSH
49401: CALL_OW 69
49405: PUSH
49406: LD_INT 2
49408: GREATER
49409: AND
49410: IFFALSE 49433
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49412: LD_ADDR_VAR 0 18
49416: PUSH
49417: LD_INT 11
49419: PUSH
49420: LD_INT 30
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_VAR 0 12
49431: ARRAY
49432: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49433: LD_VAR 0 18
49437: NOT
49438: PUSH
49439: LD_INT 40
49441: PPUSH
49442: LD_VAR 0 16
49446: PPUSH
49447: CALL_OW 321
49451: PUSH
49452: LD_INT 2
49454: EQUAL
49455: AND
49456: PUSH
49457: LD_INT 7
49459: PUSH
49460: LD_VAR 0 5
49464: IN
49465: PUSH
49466: LD_INT 28
49468: PUSH
49469: LD_VAR 0 5
49473: IN
49474: OR
49475: PUSH
49476: LD_INT 45
49478: PUSH
49479: LD_VAR 0 5
49483: IN
49484: OR
49485: AND
49486: IFFALSE 49740
// begin hex := GetHexInfo ( x , y ) ;
49488: LD_ADDR_VAR 0 4
49492: PUSH
49493: LD_VAR 0 10
49497: PPUSH
49498: LD_VAR 0 11
49502: PPUSH
49503: CALL_OW 546
49507: ST_TO_ADDR
// if hex [ 1 ] then
49508: LD_VAR 0 4
49512: PUSH
49513: LD_INT 1
49515: ARRAY
49516: IFFALSE 49520
// exit ;
49518: GO 49923
// height := hex [ 2 ] ;
49520: LD_ADDR_VAR 0 15
49524: PUSH
49525: LD_VAR 0 4
49529: PUSH
49530: LD_INT 2
49532: ARRAY
49533: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49534: LD_ADDR_VAR 0 14
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: LD_INT 5
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// for i in tmp do
49557: LD_ADDR_VAR 0 8
49561: PUSH
49562: LD_VAR 0 14
49566: PUSH
49567: FOR_IN
49568: IFFALSE 49738
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49570: LD_ADDR_VAR 0 9
49574: PUSH
49575: LD_VAR 0 10
49579: PPUSH
49580: LD_VAR 0 8
49584: PPUSH
49585: LD_INT 5
49587: PPUSH
49588: CALL_OW 272
49592: PUSH
49593: LD_VAR 0 11
49597: PPUSH
49598: LD_VAR 0 8
49602: PPUSH
49603: LD_INT 5
49605: PPUSH
49606: CALL_OW 273
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49615: LD_VAR 0 9
49619: PUSH
49620: LD_INT 1
49622: ARRAY
49623: PPUSH
49624: LD_VAR 0 9
49628: PUSH
49629: LD_INT 2
49631: ARRAY
49632: PPUSH
49633: CALL_OW 488
49637: IFFALSE 49736
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49639: LD_ADDR_VAR 0 4
49643: PUSH
49644: LD_VAR 0 9
49648: PUSH
49649: LD_INT 1
49651: ARRAY
49652: PPUSH
49653: LD_VAR 0 9
49657: PUSH
49658: LD_INT 2
49660: ARRAY
49661: PPUSH
49662: CALL_OW 546
49666: ST_TO_ADDR
// if hex [ 1 ] then
49667: LD_VAR 0 4
49671: PUSH
49672: LD_INT 1
49674: ARRAY
49675: IFFALSE 49679
// continue ;
49677: GO 49567
// h := hex [ 2 ] ;
49679: LD_ADDR_VAR 0 13
49683: PUSH
49684: LD_VAR 0 4
49688: PUSH
49689: LD_INT 2
49691: ARRAY
49692: ST_TO_ADDR
// if h + 7 < height then
49693: LD_VAR 0 13
49697: PUSH
49698: LD_INT 7
49700: PLUS
49701: PUSH
49702: LD_VAR 0 15
49706: LESS
49707: IFFALSE 49736
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49709: LD_ADDR_VAR 0 18
49713: PUSH
49714: LD_INT 7
49716: PUSH
49717: LD_INT 28
49719: PUSH
49720: LD_INT 45
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: PUSH
49728: LD_VAR 0 12
49732: ARRAY
49733: ST_TO_ADDR
// break ;
49734: GO 49738
// end ; end ; end ;
49736: GO 49567
49738: POP
49739: POP
// end ; if not weapon then
49740: LD_VAR 0 18
49744: NOT
49745: IFFALSE 49805
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49747: LD_ADDR_VAR 0 5
49751: PUSH
49752: LD_VAR 0 5
49756: PUSH
49757: LD_INT 11
49759: PUSH
49760: LD_INT 30
49762: PUSH
49763: LD_INT 49
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: DIFF
49771: ST_TO_ADDR
// if not list then
49772: LD_VAR 0 5
49776: NOT
49777: IFFALSE 49781
// exit ;
49779: GO 49923
// weapon := list [ rand ( 1 , list ) ] ;
49781: LD_ADDR_VAR 0 18
49785: PUSH
49786: LD_VAR 0 5
49790: PUSH
49791: LD_INT 1
49793: PPUSH
49794: LD_VAR 0 5
49798: PPUSH
49799: CALL_OW 12
49803: ARRAY
49804: ST_TO_ADDR
// end ; if weapon then
49805: LD_VAR 0 18
49809: IFFALSE 49923
// begin tmp := CostOfWeapon ( weapon ) ;
49811: LD_ADDR_VAR 0 14
49815: PUSH
49816: LD_VAR 0 18
49820: PPUSH
49821: CALL_OW 451
49825: ST_TO_ADDR
// j := GetBase ( tower ) ;
49826: LD_ADDR_VAR 0 9
49830: PUSH
49831: LD_VAR 0 1
49835: PPUSH
49836: CALL_OW 274
49840: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49841: LD_VAR 0 9
49845: PPUSH
49846: LD_INT 1
49848: PPUSH
49849: CALL_OW 275
49853: PUSH
49854: LD_VAR 0 14
49858: PUSH
49859: LD_INT 1
49861: ARRAY
49862: GREATEREQUAL
49863: PUSH
49864: LD_VAR 0 9
49868: PPUSH
49869: LD_INT 2
49871: PPUSH
49872: CALL_OW 275
49876: PUSH
49877: LD_VAR 0 14
49881: PUSH
49882: LD_INT 2
49884: ARRAY
49885: GREATEREQUAL
49886: AND
49887: PUSH
49888: LD_VAR 0 9
49892: PPUSH
49893: LD_INT 3
49895: PPUSH
49896: CALL_OW 275
49900: PUSH
49901: LD_VAR 0 14
49905: PUSH
49906: LD_INT 3
49908: ARRAY
49909: GREATEREQUAL
49910: AND
49911: IFFALSE 49923
// result := weapon ;
49913: LD_ADDR_VAR 0 3
49917: PUSH
49918: LD_VAR 0 18
49922: ST_TO_ADDR
// end ; end ;
49923: LD_VAR 0 3
49927: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49928: LD_INT 0
49930: PPUSH
49931: PPUSH
// result := true ;
49932: LD_ADDR_VAR 0 3
49936: PUSH
49937: LD_INT 1
49939: ST_TO_ADDR
// if array1 = array2 then
49940: LD_VAR 0 1
49944: PUSH
49945: LD_VAR 0 2
49949: EQUAL
49950: IFFALSE 50010
// begin for i = 1 to array1 do
49952: LD_ADDR_VAR 0 4
49956: PUSH
49957: DOUBLE
49958: LD_INT 1
49960: DEC
49961: ST_TO_ADDR
49962: LD_VAR 0 1
49966: PUSH
49967: FOR_TO
49968: IFFALSE 50006
// if array1 [ i ] <> array2 [ i ] then
49970: LD_VAR 0 1
49974: PUSH
49975: LD_VAR 0 4
49979: ARRAY
49980: PUSH
49981: LD_VAR 0 2
49985: PUSH
49986: LD_VAR 0 4
49990: ARRAY
49991: NONEQUAL
49992: IFFALSE 50004
// begin result := false ;
49994: LD_ADDR_VAR 0 3
49998: PUSH
49999: LD_INT 0
50001: ST_TO_ADDR
// break ;
50002: GO 50006
// end ;
50004: GO 49967
50006: POP
50007: POP
// end else
50008: GO 50018
// result := false ;
50010: LD_ADDR_VAR 0 3
50014: PUSH
50015: LD_INT 0
50017: ST_TO_ADDR
// end ;
50018: LD_VAR 0 3
50022: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50023: LD_INT 0
50025: PPUSH
50026: PPUSH
// if not array1 or not array2 then
50027: LD_VAR 0 1
50031: NOT
50032: PUSH
50033: LD_VAR 0 2
50037: NOT
50038: OR
50039: IFFALSE 50043
// exit ;
50041: GO 50107
// result := true ;
50043: LD_ADDR_VAR 0 3
50047: PUSH
50048: LD_INT 1
50050: ST_TO_ADDR
// for i = 1 to array1 do
50051: LD_ADDR_VAR 0 4
50055: PUSH
50056: DOUBLE
50057: LD_INT 1
50059: DEC
50060: ST_TO_ADDR
50061: LD_VAR 0 1
50065: PUSH
50066: FOR_TO
50067: IFFALSE 50105
// if array1 [ i ] <> array2 [ i ] then
50069: LD_VAR 0 1
50073: PUSH
50074: LD_VAR 0 4
50078: ARRAY
50079: PUSH
50080: LD_VAR 0 2
50084: PUSH
50085: LD_VAR 0 4
50089: ARRAY
50090: NONEQUAL
50091: IFFALSE 50103
// begin result := false ;
50093: LD_ADDR_VAR 0 3
50097: PUSH
50098: LD_INT 0
50100: ST_TO_ADDR
// break ;
50101: GO 50105
// end ;
50103: GO 50066
50105: POP
50106: POP
// end ;
50107: LD_VAR 0 3
50111: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50112: LD_INT 0
50114: PPUSH
50115: PPUSH
50116: PPUSH
// pom := GetBase ( fac ) ;
50117: LD_ADDR_VAR 0 5
50121: PUSH
50122: LD_VAR 0 1
50126: PPUSH
50127: CALL_OW 274
50131: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50132: LD_ADDR_VAR 0 4
50136: PUSH
50137: LD_VAR 0 2
50141: PUSH
50142: LD_INT 1
50144: ARRAY
50145: PPUSH
50146: LD_VAR 0 2
50150: PUSH
50151: LD_INT 2
50153: ARRAY
50154: PPUSH
50155: LD_VAR 0 2
50159: PUSH
50160: LD_INT 3
50162: ARRAY
50163: PPUSH
50164: LD_VAR 0 2
50168: PUSH
50169: LD_INT 4
50171: ARRAY
50172: PPUSH
50173: CALL_OW 449
50177: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50178: LD_ADDR_VAR 0 3
50182: PUSH
50183: LD_VAR 0 5
50187: PPUSH
50188: LD_INT 1
50190: PPUSH
50191: CALL_OW 275
50195: PUSH
50196: LD_VAR 0 4
50200: PUSH
50201: LD_INT 1
50203: ARRAY
50204: GREATEREQUAL
50205: PUSH
50206: LD_VAR 0 5
50210: PPUSH
50211: LD_INT 2
50213: PPUSH
50214: CALL_OW 275
50218: PUSH
50219: LD_VAR 0 4
50223: PUSH
50224: LD_INT 2
50226: ARRAY
50227: GREATEREQUAL
50228: AND
50229: PUSH
50230: LD_VAR 0 5
50234: PPUSH
50235: LD_INT 3
50237: PPUSH
50238: CALL_OW 275
50242: PUSH
50243: LD_VAR 0 4
50247: PUSH
50248: LD_INT 3
50250: ARRAY
50251: GREATEREQUAL
50252: AND
50253: ST_TO_ADDR
// end ;
50254: LD_VAR 0 3
50258: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50259: LD_INT 0
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
// pom := GetBase ( building ) ;
50265: LD_ADDR_VAR 0 3
50269: PUSH
50270: LD_VAR 0 1
50274: PPUSH
50275: CALL_OW 274
50279: ST_TO_ADDR
// if not pom then
50280: LD_VAR 0 3
50284: NOT
50285: IFFALSE 50289
// exit ;
50287: GO 50459
// btype := GetBType ( building ) ;
50289: LD_ADDR_VAR 0 5
50293: PUSH
50294: LD_VAR 0 1
50298: PPUSH
50299: CALL_OW 266
50303: ST_TO_ADDR
// if btype = b_armoury then
50304: LD_VAR 0 5
50308: PUSH
50309: LD_INT 4
50311: EQUAL
50312: IFFALSE 50322
// btype := b_barracks ;
50314: LD_ADDR_VAR 0 5
50318: PUSH
50319: LD_INT 5
50321: ST_TO_ADDR
// if btype = b_depot then
50322: LD_VAR 0 5
50326: PUSH
50327: LD_INT 0
50329: EQUAL
50330: IFFALSE 50340
// btype := b_warehouse ;
50332: LD_ADDR_VAR 0 5
50336: PUSH
50337: LD_INT 1
50339: ST_TO_ADDR
// if btype = b_workshop then
50340: LD_VAR 0 5
50344: PUSH
50345: LD_INT 2
50347: EQUAL
50348: IFFALSE 50358
// btype := b_factory ;
50350: LD_ADDR_VAR 0 5
50354: PUSH
50355: LD_INT 3
50357: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50358: LD_ADDR_VAR 0 4
50362: PUSH
50363: LD_VAR 0 5
50367: PPUSH
50368: LD_VAR 0 1
50372: PPUSH
50373: CALL_OW 248
50377: PPUSH
50378: CALL_OW 450
50382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50383: LD_ADDR_VAR 0 2
50387: PUSH
50388: LD_VAR 0 3
50392: PPUSH
50393: LD_INT 1
50395: PPUSH
50396: CALL_OW 275
50400: PUSH
50401: LD_VAR 0 4
50405: PUSH
50406: LD_INT 1
50408: ARRAY
50409: GREATEREQUAL
50410: PUSH
50411: LD_VAR 0 3
50415: PPUSH
50416: LD_INT 2
50418: PPUSH
50419: CALL_OW 275
50423: PUSH
50424: LD_VAR 0 4
50428: PUSH
50429: LD_INT 2
50431: ARRAY
50432: GREATEREQUAL
50433: AND
50434: PUSH
50435: LD_VAR 0 3
50439: PPUSH
50440: LD_INT 3
50442: PPUSH
50443: CALL_OW 275
50447: PUSH
50448: LD_VAR 0 4
50452: PUSH
50453: LD_INT 3
50455: ARRAY
50456: GREATEREQUAL
50457: AND
50458: ST_TO_ADDR
// end ;
50459: LD_VAR 0 2
50463: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50464: LD_INT 0
50466: PPUSH
50467: PPUSH
50468: PPUSH
// pom := GetBase ( building ) ;
50469: LD_ADDR_VAR 0 4
50473: PUSH
50474: LD_VAR 0 1
50478: PPUSH
50479: CALL_OW 274
50483: ST_TO_ADDR
// if not pom then
50484: LD_VAR 0 4
50488: NOT
50489: IFFALSE 50493
// exit ;
50491: GO 50594
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50493: LD_ADDR_VAR 0 5
50497: PUSH
50498: LD_VAR 0 2
50502: PPUSH
50503: LD_VAR 0 1
50507: PPUSH
50508: CALL_OW 248
50512: PPUSH
50513: CALL_OW 450
50517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50518: LD_ADDR_VAR 0 3
50522: PUSH
50523: LD_VAR 0 4
50527: PPUSH
50528: LD_INT 1
50530: PPUSH
50531: CALL_OW 275
50535: PUSH
50536: LD_VAR 0 5
50540: PUSH
50541: LD_INT 1
50543: ARRAY
50544: GREATEREQUAL
50545: PUSH
50546: LD_VAR 0 4
50550: PPUSH
50551: LD_INT 2
50553: PPUSH
50554: CALL_OW 275
50558: PUSH
50559: LD_VAR 0 5
50563: PUSH
50564: LD_INT 2
50566: ARRAY
50567: GREATEREQUAL
50568: AND
50569: PUSH
50570: LD_VAR 0 4
50574: PPUSH
50575: LD_INT 3
50577: PPUSH
50578: CALL_OW 275
50582: PUSH
50583: LD_VAR 0 5
50587: PUSH
50588: LD_INT 3
50590: ARRAY
50591: GREATEREQUAL
50592: AND
50593: ST_TO_ADDR
// end ;
50594: LD_VAR 0 3
50598: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50599: LD_INT 0
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
50606: PPUSH
50607: PPUSH
50608: PPUSH
50609: PPUSH
50610: PPUSH
50611: PPUSH
// result := false ;
50612: LD_ADDR_VAR 0 8
50616: PUSH
50617: LD_INT 0
50619: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50620: LD_VAR 0 5
50624: NOT
50625: PUSH
50626: LD_VAR 0 1
50630: NOT
50631: OR
50632: PUSH
50633: LD_VAR 0 2
50637: NOT
50638: OR
50639: PUSH
50640: LD_VAR 0 3
50644: NOT
50645: OR
50646: IFFALSE 50650
// exit ;
50648: GO 51464
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50650: LD_ADDR_VAR 0 14
50654: PUSH
50655: LD_VAR 0 1
50659: PPUSH
50660: LD_VAR 0 2
50664: PPUSH
50665: LD_VAR 0 3
50669: PPUSH
50670: LD_VAR 0 4
50674: PPUSH
50675: LD_VAR 0 5
50679: PUSH
50680: LD_INT 1
50682: ARRAY
50683: PPUSH
50684: CALL_OW 248
50688: PPUSH
50689: LD_INT 0
50691: PPUSH
50692: CALL 52717 0 6
50696: ST_TO_ADDR
// if not hexes then
50697: LD_VAR 0 14
50701: NOT
50702: IFFALSE 50706
// exit ;
50704: GO 51464
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50706: LD_ADDR_VAR 0 17
50710: PUSH
50711: LD_VAR 0 5
50715: PPUSH
50716: LD_INT 22
50718: PUSH
50719: LD_VAR 0 13
50723: PPUSH
50724: CALL_OW 255
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 30
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 30
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PPUSH
50765: CALL_OW 72
50769: ST_TO_ADDR
// for i = 1 to hexes do
50770: LD_ADDR_VAR 0 9
50774: PUSH
50775: DOUBLE
50776: LD_INT 1
50778: DEC
50779: ST_TO_ADDR
50780: LD_VAR 0 14
50784: PUSH
50785: FOR_TO
50786: IFFALSE 51462
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50788: LD_ADDR_VAR 0 13
50792: PUSH
50793: LD_VAR 0 14
50797: PUSH
50798: LD_VAR 0 9
50802: ARRAY
50803: PUSH
50804: LD_INT 1
50806: ARRAY
50807: PPUSH
50808: LD_VAR 0 14
50812: PUSH
50813: LD_VAR 0 9
50817: ARRAY
50818: PUSH
50819: LD_INT 2
50821: ARRAY
50822: PPUSH
50823: CALL_OW 428
50827: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50828: LD_VAR 0 14
50832: PUSH
50833: LD_VAR 0 9
50837: ARRAY
50838: PUSH
50839: LD_INT 1
50841: ARRAY
50842: PPUSH
50843: LD_VAR 0 14
50847: PUSH
50848: LD_VAR 0 9
50852: ARRAY
50853: PUSH
50854: LD_INT 2
50856: ARRAY
50857: PPUSH
50858: CALL_OW 351
50862: PUSH
50863: LD_VAR 0 14
50867: PUSH
50868: LD_VAR 0 9
50872: ARRAY
50873: PUSH
50874: LD_INT 1
50876: ARRAY
50877: PPUSH
50878: LD_VAR 0 14
50882: PUSH
50883: LD_VAR 0 9
50887: ARRAY
50888: PUSH
50889: LD_INT 2
50891: ARRAY
50892: PPUSH
50893: CALL_OW 488
50897: NOT
50898: OR
50899: PUSH
50900: LD_VAR 0 13
50904: PPUSH
50905: CALL_OW 247
50909: PUSH
50910: LD_INT 3
50912: EQUAL
50913: OR
50914: IFFALSE 50920
// exit ;
50916: POP
50917: POP
50918: GO 51464
// if not tmp then
50920: LD_VAR 0 13
50924: NOT
50925: IFFALSE 50929
// continue ;
50927: GO 50785
// result := true ;
50929: LD_ADDR_VAR 0 8
50933: PUSH
50934: LD_INT 1
50936: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50937: LD_VAR 0 6
50941: PUSH
50942: LD_VAR 0 13
50946: PPUSH
50947: CALL_OW 247
50951: PUSH
50952: LD_INT 2
50954: EQUAL
50955: AND
50956: PUSH
50957: LD_VAR 0 13
50961: PPUSH
50962: CALL_OW 263
50966: PUSH
50967: LD_INT 1
50969: EQUAL
50970: AND
50971: IFFALSE 51135
// begin if IsDrivenBy ( tmp ) then
50973: LD_VAR 0 13
50977: PPUSH
50978: CALL_OW 311
50982: IFFALSE 50986
// continue ;
50984: GO 50785
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50986: LD_VAR 0 6
50990: PPUSH
50991: LD_INT 3
50993: PUSH
50994: LD_INT 60
50996: PUSH
50997: EMPTY
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: LD_INT 55
51009: PUSH
51010: EMPTY
51011: LIST
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PPUSH
51021: CALL_OW 72
51025: IFFALSE 51133
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51027: LD_ADDR_VAR 0 18
51031: PUSH
51032: LD_VAR 0 6
51036: PPUSH
51037: LD_INT 3
51039: PUSH
51040: LD_INT 60
51042: PUSH
51043: EMPTY
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: LD_INT 55
51055: PUSH
51056: EMPTY
51057: LIST
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PPUSH
51067: CALL_OW 72
51071: PUSH
51072: LD_INT 1
51074: ARRAY
51075: ST_TO_ADDR
// if IsInUnit ( driver ) then
51076: LD_VAR 0 18
51080: PPUSH
51081: CALL_OW 310
51085: IFFALSE 51096
// ComExit ( driver ) ;
51087: LD_VAR 0 18
51091: PPUSH
51092: CALL 76509 0 1
// AddComEnterUnit ( driver , tmp ) ;
51096: LD_VAR 0 18
51100: PPUSH
51101: LD_VAR 0 13
51105: PPUSH
51106: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51110: LD_VAR 0 18
51114: PPUSH
51115: LD_VAR 0 7
51119: PPUSH
51120: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51124: LD_VAR 0 18
51128: PPUSH
51129: CALL_OW 181
// end ; continue ;
51133: GO 50785
// end ; if not cleaners or not tmp in cleaners then
51135: LD_VAR 0 6
51139: NOT
51140: PUSH
51141: LD_VAR 0 13
51145: PUSH
51146: LD_VAR 0 6
51150: IN
51151: NOT
51152: OR
51153: IFFALSE 51460
// begin if dep then
51155: LD_VAR 0 17
51159: IFFALSE 51295
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51161: LD_ADDR_VAR 0 16
51165: PUSH
51166: LD_VAR 0 17
51170: PUSH
51171: LD_INT 1
51173: ARRAY
51174: PPUSH
51175: CALL_OW 250
51179: PPUSH
51180: LD_VAR 0 17
51184: PUSH
51185: LD_INT 1
51187: ARRAY
51188: PPUSH
51189: CALL_OW 254
51193: PPUSH
51194: LD_INT 5
51196: PPUSH
51197: CALL_OW 272
51201: PUSH
51202: LD_VAR 0 17
51206: PUSH
51207: LD_INT 1
51209: ARRAY
51210: PPUSH
51211: CALL_OW 251
51215: PPUSH
51216: LD_VAR 0 17
51220: PUSH
51221: LD_INT 1
51223: ARRAY
51224: PPUSH
51225: CALL_OW 254
51229: PPUSH
51230: LD_INT 5
51232: PPUSH
51233: CALL_OW 273
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51242: LD_VAR 0 16
51246: PUSH
51247: LD_INT 1
51249: ARRAY
51250: PPUSH
51251: LD_VAR 0 16
51255: PUSH
51256: LD_INT 2
51258: ARRAY
51259: PPUSH
51260: CALL_OW 488
51264: IFFALSE 51295
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51266: LD_VAR 0 13
51270: PPUSH
51271: LD_VAR 0 16
51275: PUSH
51276: LD_INT 1
51278: ARRAY
51279: PPUSH
51280: LD_VAR 0 16
51284: PUSH
51285: LD_INT 2
51287: ARRAY
51288: PPUSH
51289: CALL_OW 111
// continue ;
51293: GO 50785
// end ; end ; r := GetDir ( tmp ) ;
51295: LD_ADDR_VAR 0 15
51299: PUSH
51300: LD_VAR 0 13
51304: PPUSH
51305: CALL_OW 254
51309: ST_TO_ADDR
// if r = 5 then
51310: LD_VAR 0 15
51314: PUSH
51315: LD_INT 5
51317: EQUAL
51318: IFFALSE 51328
// r := 0 ;
51320: LD_ADDR_VAR 0 15
51324: PUSH
51325: LD_INT 0
51327: ST_TO_ADDR
// for j = r to 5 do
51328: LD_ADDR_VAR 0 10
51332: PUSH
51333: DOUBLE
51334: LD_VAR 0 15
51338: DEC
51339: ST_TO_ADDR
51340: LD_INT 5
51342: PUSH
51343: FOR_TO
51344: IFFALSE 51458
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51346: LD_ADDR_VAR 0 11
51350: PUSH
51351: LD_VAR 0 13
51355: PPUSH
51356: CALL_OW 250
51360: PPUSH
51361: LD_VAR 0 10
51365: PPUSH
51366: LD_INT 2
51368: PPUSH
51369: CALL_OW 272
51373: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51374: LD_ADDR_VAR 0 12
51378: PUSH
51379: LD_VAR 0 13
51383: PPUSH
51384: CALL_OW 251
51388: PPUSH
51389: LD_VAR 0 10
51393: PPUSH
51394: LD_INT 2
51396: PPUSH
51397: CALL_OW 273
51401: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51402: LD_VAR 0 11
51406: PPUSH
51407: LD_VAR 0 12
51411: PPUSH
51412: CALL_OW 488
51416: PUSH
51417: LD_VAR 0 11
51421: PPUSH
51422: LD_VAR 0 12
51426: PPUSH
51427: CALL_OW 428
51431: NOT
51432: AND
51433: IFFALSE 51456
// begin ComMoveXY ( tmp , _x , _y ) ;
51435: LD_VAR 0 13
51439: PPUSH
51440: LD_VAR 0 11
51444: PPUSH
51445: LD_VAR 0 12
51449: PPUSH
51450: CALL_OW 111
// break ;
51454: GO 51458
// end ; end ;
51456: GO 51343
51458: POP
51459: POP
// end ; end ;
51460: GO 50785
51462: POP
51463: POP
// end ;
51464: LD_VAR 0 8
51468: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51469: LD_INT 0
51471: PPUSH
// result := true ;
51472: LD_ADDR_VAR 0 3
51476: PUSH
51477: LD_INT 1
51479: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51480: LD_VAR 0 2
51484: PUSH
51485: LD_INT 24
51487: DOUBLE
51488: EQUAL
51489: IFTRUE 51499
51491: LD_INT 33
51493: DOUBLE
51494: EQUAL
51495: IFTRUE 51499
51497: GO 51524
51499: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51500: LD_ADDR_VAR 0 3
51504: PUSH
51505: LD_INT 32
51507: PPUSH
51508: LD_VAR 0 1
51512: PPUSH
51513: CALL_OW 321
51517: PUSH
51518: LD_INT 2
51520: EQUAL
51521: ST_TO_ADDR
51522: GO 51840
51524: LD_INT 20
51526: DOUBLE
51527: EQUAL
51528: IFTRUE 51532
51530: GO 51557
51532: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51533: LD_ADDR_VAR 0 3
51537: PUSH
51538: LD_INT 6
51540: PPUSH
51541: LD_VAR 0 1
51545: PPUSH
51546: CALL_OW 321
51550: PUSH
51551: LD_INT 2
51553: EQUAL
51554: ST_TO_ADDR
51555: GO 51840
51557: LD_INT 22
51559: DOUBLE
51560: EQUAL
51561: IFTRUE 51571
51563: LD_INT 36
51565: DOUBLE
51566: EQUAL
51567: IFTRUE 51571
51569: GO 51596
51571: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51572: LD_ADDR_VAR 0 3
51576: PUSH
51577: LD_INT 15
51579: PPUSH
51580: LD_VAR 0 1
51584: PPUSH
51585: CALL_OW 321
51589: PUSH
51590: LD_INT 2
51592: EQUAL
51593: ST_TO_ADDR
51594: GO 51840
51596: LD_INT 30
51598: DOUBLE
51599: EQUAL
51600: IFTRUE 51604
51602: GO 51629
51604: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51605: LD_ADDR_VAR 0 3
51609: PUSH
51610: LD_INT 20
51612: PPUSH
51613: LD_VAR 0 1
51617: PPUSH
51618: CALL_OW 321
51622: PUSH
51623: LD_INT 2
51625: EQUAL
51626: ST_TO_ADDR
51627: GO 51840
51629: LD_INT 28
51631: DOUBLE
51632: EQUAL
51633: IFTRUE 51643
51635: LD_INT 21
51637: DOUBLE
51638: EQUAL
51639: IFTRUE 51643
51641: GO 51668
51643: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_INT 21
51651: PPUSH
51652: LD_VAR 0 1
51656: PPUSH
51657: CALL_OW 321
51661: PUSH
51662: LD_INT 2
51664: EQUAL
51665: ST_TO_ADDR
51666: GO 51840
51668: LD_INT 16
51670: DOUBLE
51671: EQUAL
51672: IFTRUE 51676
51674: GO 51701
51676: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51677: LD_ADDR_VAR 0 3
51681: PUSH
51682: LD_INT 84
51684: PPUSH
51685: LD_VAR 0 1
51689: PPUSH
51690: CALL_OW 321
51694: PUSH
51695: LD_INT 2
51697: EQUAL
51698: ST_TO_ADDR
51699: GO 51840
51701: LD_INT 19
51703: DOUBLE
51704: EQUAL
51705: IFTRUE 51715
51707: LD_INT 23
51709: DOUBLE
51710: EQUAL
51711: IFTRUE 51715
51713: GO 51740
51715: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51716: LD_ADDR_VAR 0 3
51720: PUSH
51721: LD_INT 83
51723: PPUSH
51724: LD_VAR 0 1
51728: PPUSH
51729: CALL_OW 321
51733: PUSH
51734: LD_INT 2
51736: EQUAL
51737: ST_TO_ADDR
51738: GO 51840
51740: LD_INT 17
51742: DOUBLE
51743: EQUAL
51744: IFTRUE 51748
51746: GO 51773
51748: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51749: LD_ADDR_VAR 0 3
51753: PUSH
51754: LD_INT 39
51756: PPUSH
51757: LD_VAR 0 1
51761: PPUSH
51762: CALL_OW 321
51766: PUSH
51767: LD_INT 2
51769: EQUAL
51770: ST_TO_ADDR
51771: GO 51840
51773: LD_INT 18
51775: DOUBLE
51776: EQUAL
51777: IFTRUE 51781
51779: GO 51806
51781: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51782: LD_ADDR_VAR 0 3
51786: PUSH
51787: LD_INT 40
51789: PPUSH
51790: LD_VAR 0 1
51794: PPUSH
51795: CALL_OW 321
51799: PUSH
51800: LD_INT 2
51802: EQUAL
51803: ST_TO_ADDR
51804: GO 51840
51806: LD_INT 27
51808: DOUBLE
51809: EQUAL
51810: IFTRUE 51814
51812: GO 51839
51814: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51815: LD_ADDR_VAR 0 3
51819: PUSH
51820: LD_INT 35
51822: PPUSH
51823: LD_VAR 0 1
51827: PPUSH
51828: CALL_OW 321
51832: PUSH
51833: LD_INT 2
51835: EQUAL
51836: ST_TO_ADDR
51837: GO 51840
51839: POP
// end ;
51840: LD_VAR 0 3
51844: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51845: LD_INT 0
51847: PPUSH
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
51857: PPUSH
// result := false ;
51858: LD_ADDR_VAR 0 6
51862: PUSH
51863: LD_INT 0
51865: ST_TO_ADDR
// if btype = b_depot then
51866: LD_VAR 0 2
51870: PUSH
51871: LD_INT 0
51873: EQUAL
51874: IFFALSE 51886
// begin result := true ;
51876: LD_ADDR_VAR 0 6
51880: PUSH
51881: LD_INT 1
51883: ST_TO_ADDR
// exit ;
51884: GO 52712
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51886: LD_VAR 0 1
51890: NOT
51891: PUSH
51892: LD_VAR 0 1
51896: PPUSH
51897: CALL_OW 266
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: IN
51912: NOT
51913: OR
51914: PUSH
51915: LD_VAR 0 2
51919: NOT
51920: OR
51921: PUSH
51922: LD_VAR 0 5
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: LD_INT 4
51941: PUSH
51942: LD_INT 5
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: IN
51953: NOT
51954: OR
51955: PUSH
51956: LD_VAR 0 3
51960: PPUSH
51961: LD_VAR 0 4
51965: PPUSH
51966: CALL_OW 488
51970: NOT
51971: OR
51972: IFFALSE 51976
// exit ;
51974: GO 52712
// side := GetSide ( depot ) ;
51976: LD_ADDR_VAR 0 9
51980: PUSH
51981: LD_VAR 0 1
51985: PPUSH
51986: CALL_OW 255
51990: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51991: LD_VAR 0 9
51995: PPUSH
51996: LD_VAR 0 2
52000: PPUSH
52001: CALL 51469 0 2
52005: NOT
52006: IFFALSE 52010
// exit ;
52008: GO 52712
// pom := GetBase ( depot ) ;
52010: LD_ADDR_VAR 0 10
52014: PUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 274
52024: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52025: LD_ADDR_VAR 0 11
52029: PUSH
52030: LD_VAR 0 2
52034: PPUSH
52035: LD_VAR 0 1
52039: PPUSH
52040: CALL_OW 248
52044: PPUSH
52045: CALL_OW 450
52049: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52050: LD_VAR 0 10
52054: PPUSH
52055: LD_INT 1
52057: PPUSH
52058: CALL_OW 275
52062: PUSH
52063: LD_VAR 0 11
52067: PUSH
52068: LD_INT 1
52070: ARRAY
52071: GREATEREQUAL
52072: PUSH
52073: LD_VAR 0 10
52077: PPUSH
52078: LD_INT 2
52080: PPUSH
52081: CALL_OW 275
52085: PUSH
52086: LD_VAR 0 11
52090: PUSH
52091: LD_INT 2
52093: ARRAY
52094: GREATEREQUAL
52095: AND
52096: PUSH
52097: LD_VAR 0 10
52101: PPUSH
52102: LD_INT 3
52104: PPUSH
52105: CALL_OW 275
52109: PUSH
52110: LD_VAR 0 11
52114: PUSH
52115: LD_INT 3
52117: ARRAY
52118: GREATEREQUAL
52119: AND
52120: NOT
52121: IFFALSE 52125
// exit ;
52123: GO 52712
// if GetBType ( depot ) = b_depot then
52125: LD_VAR 0 1
52129: PPUSH
52130: CALL_OW 266
52134: PUSH
52135: LD_INT 0
52137: EQUAL
52138: IFFALSE 52150
// dist := 28 else
52140: LD_ADDR_VAR 0 14
52144: PUSH
52145: LD_INT 28
52147: ST_TO_ADDR
52148: GO 52158
// dist := 36 ;
52150: LD_ADDR_VAR 0 14
52154: PUSH
52155: LD_INT 36
52157: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52158: LD_VAR 0 1
52162: PPUSH
52163: LD_VAR 0 3
52167: PPUSH
52168: LD_VAR 0 4
52172: PPUSH
52173: CALL_OW 297
52177: PUSH
52178: LD_VAR 0 14
52182: GREATER
52183: IFFALSE 52187
// exit ;
52185: GO 52712
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52187: LD_ADDR_VAR 0 12
52191: PUSH
52192: LD_VAR 0 2
52196: PPUSH
52197: LD_VAR 0 3
52201: PPUSH
52202: LD_VAR 0 4
52206: PPUSH
52207: LD_VAR 0 5
52211: PPUSH
52212: LD_VAR 0 1
52216: PPUSH
52217: CALL_OW 248
52221: PPUSH
52222: LD_INT 0
52224: PPUSH
52225: CALL 52717 0 6
52229: ST_TO_ADDR
// if not hexes then
52230: LD_VAR 0 12
52234: NOT
52235: IFFALSE 52239
// exit ;
52237: GO 52712
// hex := GetHexInfo ( x , y ) ;
52239: LD_ADDR_VAR 0 15
52243: PUSH
52244: LD_VAR 0 3
52248: PPUSH
52249: LD_VAR 0 4
52253: PPUSH
52254: CALL_OW 546
52258: ST_TO_ADDR
// if hex [ 1 ] then
52259: LD_VAR 0 15
52263: PUSH
52264: LD_INT 1
52266: ARRAY
52267: IFFALSE 52271
// exit ;
52269: GO 52712
// height := hex [ 2 ] ;
52271: LD_ADDR_VAR 0 13
52275: PUSH
52276: LD_VAR 0 15
52280: PUSH
52281: LD_INT 2
52283: ARRAY
52284: ST_TO_ADDR
// for i = 1 to hexes do
52285: LD_ADDR_VAR 0 7
52289: PUSH
52290: DOUBLE
52291: LD_INT 1
52293: DEC
52294: ST_TO_ADDR
52295: LD_VAR 0 12
52299: PUSH
52300: FOR_TO
52301: IFFALSE 52631
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52303: LD_VAR 0 12
52307: PUSH
52308: LD_VAR 0 7
52312: ARRAY
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: PPUSH
52318: LD_VAR 0 12
52322: PUSH
52323: LD_VAR 0 7
52327: ARRAY
52328: PUSH
52329: LD_INT 2
52331: ARRAY
52332: PPUSH
52333: CALL_OW 488
52337: NOT
52338: PUSH
52339: LD_VAR 0 12
52343: PUSH
52344: LD_VAR 0 7
52348: ARRAY
52349: PUSH
52350: LD_INT 1
52352: ARRAY
52353: PPUSH
52354: LD_VAR 0 12
52358: PUSH
52359: LD_VAR 0 7
52363: ARRAY
52364: PUSH
52365: LD_INT 2
52367: ARRAY
52368: PPUSH
52369: CALL_OW 428
52373: PUSH
52374: LD_INT 0
52376: GREATER
52377: OR
52378: PUSH
52379: LD_VAR 0 12
52383: PUSH
52384: LD_VAR 0 7
52388: ARRAY
52389: PUSH
52390: LD_INT 1
52392: ARRAY
52393: PPUSH
52394: LD_VAR 0 12
52398: PUSH
52399: LD_VAR 0 7
52403: ARRAY
52404: PUSH
52405: LD_INT 2
52407: ARRAY
52408: PPUSH
52409: CALL_OW 351
52413: OR
52414: IFFALSE 52420
// exit ;
52416: POP
52417: POP
52418: GO 52712
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52420: LD_ADDR_VAR 0 8
52424: PUSH
52425: LD_VAR 0 12
52429: PUSH
52430: LD_VAR 0 7
52434: ARRAY
52435: PUSH
52436: LD_INT 1
52438: ARRAY
52439: PPUSH
52440: LD_VAR 0 12
52444: PUSH
52445: LD_VAR 0 7
52449: ARRAY
52450: PUSH
52451: LD_INT 2
52453: ARRAY
52454: PPUSH
52455: CALL_OW 546
52459: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52460: LD_VAR 0 8
52464: PUSH
52465: LD_INT 1
52467: ARRAY
52468: PUSH
52469: LD_VAR 0 8
52473: PUSH
52474: LD_INT 2
52476: ARRAY
52477: PUSH
52478: LD_VAR 0 13
52482: PUSH
52483: LD_INT 2
52485: PLUS
52486: GREATER
52487: OR
52488: PUSH
52489: LD_VAR 0 8
52493: PUSH
52494: LD_INT 2
52496: ARRAY
52497: PUSH
52498: LD_VAR 0 13
52502: PUSH
52503: LD_INT 2
52505: MINUS
52506: LESS
52507: OR
52508: PUSH
52509: LD_VAR 0 8
52513: PUSH
52514: LD_INT 3
52516: ARRAY
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 8
52523: PUSH
52524: LD_INT 9
52526: PUSH
52527: LD_INT 10
52529: PUSH
52530: LD_INT 11
52532: PUSH
52533: LD_INT 12
52535: PUSH
52536: LD_INT 13
52538: PUSH
52539: LD_INT 16
52541: PUSH
52542: LD_INT 17
52544: PUSH
52545: LD_INT 18
52547: PUSH
52548: LD_INT 19
52550: PUSH
52551: LD_INT 20
52553: PUSH
52554: LD_INT 21
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: IN
52572: NOT
52573: OR
52574: PUSH
52575: LD_VAR 0 8
52579: PUSH
52580: LD_INT 5
52582: ARRAY
52583: NOT
52584: OR
52585: PUSH
52586: LD_VAR 0 8
52590: PUSH
52591: LD_INT 6
52593: ARRAY
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: LD_INT 7
52603: PUSH
52604: LD_INT 9
52606: PUSH
52607: LD_INT 10
52609: PUSH
52610: LD_INT 11
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: IN
52621: NOT
52622: OR
52623: IFFALSE 52629
// exit ;
52625: POP
52626: POP
52627: GO 52712
// end ;
52629: GO 52300
52631: POP
52632: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52633: LD_VAR 0 9
52637: PPUSH
52638: LD_VAR 0 3
52642: PPUSH
52643: LD_VAR 0 4
52647: PPUSH
52648: LD_INT 20
52650: PPUSH
52651: CALL 44635 0 4
52655: PUSH
52656: LD_INT 4
52658: ARRAY
52659: IFFALSE 52663
// exit ;
52661: GO 52712
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52663: LD_VAR 0 2
52667: PUSH
52668: LD_INT 29
52670: PUSH
52671: LD_INT 30
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: IN
52678: PUSH
52679: LD_VAR 0 3
52683: PPUSH
52684: LD_VAR 0 4
52688: PPUSH
52689: LD_VAR 0 9
52693: PPUSH
52694: CALL_OW 440
52698: NOT
52699: AND
52700: IFFALSE 52704
// exit ;
52702: GO 52712
// result := true ;
52704: LD_ADDR_VAR 0 6
52708: PUSH
52709: LD_INT 1
52711: ST_TO_ADDR
// end ;
52712: LD_VAR 0 6
52716: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52717: LD_INT 0
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
52725: PPUSH
52726: PPUSH
52727: PPUSH
52728: PPUSH
52729: PPUSH
52730: PPUSH
52731: PPUSH
52732: PPUSH
52733: PPUSH
52734: PPUSH
52735: PPUSH
52736: PPUSH
52737: PPUSH
52738: PPUSH
52739: PPUSH
52740: PPUSH
52741: PPUSH
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
52761: PPUSH
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
// result = [ ] ;
52777: LD_ADDR_VAR 0 7
52781: PUSH
52782: EMPTY
52783: ST_TO_ADDR
// temp_list = [ ] ;
52784: LD_ADDR_VAR 0 9
52788: PUSH
52789: EMPTY
52790: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52791: LD_VAR 0 4
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 4
52810: PUSH
52811: LD_INT 5
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: IN
52822: NOT
52823: PUSH
52824: LD_VAR 0 1
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: IN
52839: PUSH
52840: LD_VAR 0 5
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 3
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: IN
52859: NOT
52860: AND
52861: OR
52862: IFFALSE 52866
// exit ;
52864: GO 71257
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52866: LD_VAR 0 1
52870: PUSH
52871: LD_INT 6
52873: PUSH
52874: LD_INT 7
52876: PUSH
52877: LD_INT 8
52879: PUSH
52880: LD_INT 13
52882: PUSH
52883: LD_INT 12
52885: PUSH
52886: LD_INT 15
52888: PUSH
52889: LD_INT 11
52891: PUSH
52892: LD_INT 14
52894: PUSH
52895: LD_INT 10
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: IN
52909: IFFALSE 52919
// btype = b_lab ;
52911: LD_ADDR_VAR 0 1
52915: PUSH
52916: LD_INT 6
52918: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52919: LD_VAR 0 6
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: IN
52938: NOT
52939: PUSH
52940: LD_VAR 0 1
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: LD_INT 6
52959: PUSH
52960: LD_INT 36
52962: PUSH
52963: LD_INT 4
52965: PUSH
52966: LD_INT 5
52968: PUSH
52969: LD_INT 31
52971: PUSH
52972: LD_INT 32
52974: PUSH
52975: LD_INT 33
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: IN
52991: NOT
52992: PUSH
52993: LD_VAR 0 6
52997: PUSH
52998: LD_INT 1
53000: EQUAL
53001: AND
53002: OR
53003: PUSH
53004: LD_VAR 0 1
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: LD_INT 3
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: IN
53019: NOT
53020: PUSH
53021: LD_VAR 0 6
53025: PUSH
53026: LD_INT 2
53028: EQUAL
53029: AND
53030: OR
53031: IFFALSE 53041
// mode = 0 ;
53033: LD_ADDR_VAR 0 6
53037: PUSH
53038: LD_INT 0
53040: ST_TO_ADDR
// case mode of 0 :
53041: LD_VAR 0 6
53045: PUSH
53046: LD_INT 0
53048: DOUBLE
53049: EQUAL
53050: IFTRUE 53054
53052: GO 64507
53054: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53055: LD_ADDR_VAR 0 11
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: LD_INT 3
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53248: LD_ADDR_VAR 0 12
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53444: LD_ADDR_VAR 0 13
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 3
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 3
53603: NEG
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53643: LD_ADDR_VAR 0 14
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 3
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53839: LD_ADDR_VAR 0 15
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54032: LD_ADDR_VAR 0 16
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 2
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 3
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: LD_INT 3
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54225: LD_ADDR_VAR 0 17
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54455: LD_ADDR_VAR 0 18
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 2
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54685: LD_ADDR_VAR 0 19
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54915: LD_ADDR_VAR 0 20
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55145: LD_ADDR_VAR 0 21
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55375: LD_ADDR_VAR 0 22
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55605: LD_ADDR_VAR 0 23
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 2
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 3
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 3
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55885: LD_ADDR_VAR 0 24
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56161: LD_ADDR_VAR 0 25
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56435: LD_ADDR_VAR 0 26
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: NEG
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: PUSH
56647: LD_INT 3
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 3
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56711: LD_ADDR_VAR 0 27
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56991: LD_ADDR_VAR 0 28
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: LD_INT 3
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 3
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: NEG
57239: PUSH
57240: LD_INT 2
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57273: LD_ADDR_VAR 0 29
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57552: LD_ADDR_VAR 0 30
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: LD_INT 3
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57830: LD_ADDR_VAR 0 31
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 2
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: NEG
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: LD_INT 3
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 3
58073: NEG
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58108: LD_ADDR_VAR 0 32
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58386: LD_ADDR_VAR 0 33
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 1
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 0
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 3
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 3
58630: NEG
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58665: LD_ADDR_VAR 0 34
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 2
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58945: LD_ADDR_VAR 0 35
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59057: LD_ADDR_VAR 0 36
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59169: LD_ADDR_VAR 0 37
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59281: LD_ADDR_VAR 0 38
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59393: LD_ADDR_VAR 0 39
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59505: LD_ADDR_VAR 0 40
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59617: LD_ADDR_VAR 0 41
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 1
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 1
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: LD_INT 3
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 3
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 3
59926: NEG
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59967: LD_ADDR_VAR 0 42
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 2
60157: NEG
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 3
60276: NEG
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60317: LD_ADDR_VAR 0 43
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 1
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 3
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 2
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 3
60613: NEG
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 3
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60665: LD_ADDR_VAR 0 44
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: NEG
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 3
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 3
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 3
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: NEG
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61015: LD_ADDR_VAR 0 45
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: LD_INT 1
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 2
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: LD_INT 3
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 3
61261: PUSH
61262: LD_INT 3
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 2
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 3
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: NEG
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 3
61312: NEG
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: LD_INT 3
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61365: LD_ADDR_VAR 0 46
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: LD_INT 1
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 2
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 3
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 2
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 2
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: NEG
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: LD_INT 1
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61713: LD_ADDR_VAR 0 47
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 2
61840: NEG
61841: PUSH
61842: LD_INT 2
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61864: LD_ADDR_VAR 0 48
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: LD_INT 0
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 2
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62011: LD_ADDR_VAR 0 49
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: PUSH
62040: LD_INT 0
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62155: LD_ADDR_VAR 0 50
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 2
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62299: LD_ADDR_VAR 0 51
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 0
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62446: LD_ADDR_VAR 0 52
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: LD_INT 2
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: LD_INT 2
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62597: LD_ADDR_VAR 0 53
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 1
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 2
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 2
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62827: LD_ADDR_VAR 0 54
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: LD_INT 0
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: LD_INT 1
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: LD_INT 2
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63057: LD_ADDR_VAR 0 55
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 1
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 2
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 2
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: LD_INT 0
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: LD_INT 2
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63287: LD_ADDR_VAR 0 56
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 1
63345: NEG
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: NEG
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: LD_INT 2
63490: NEG
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63517: LD_ADDR_VAR 0 57
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: LD_INT 2
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: LD_INT 2
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 2
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 2
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: NEG
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63747: LD_ADDR_VAR 0 58
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 0
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: LD_INT 1
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 0
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: LD_INT 2
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 2
63923: NEG
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: NEG
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63977: LD_ADDR_VAR 0 59
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64065: LD_ADDR_VAR 0 60
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: NEG
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64153: LD_ADDR_VAR 0 61
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64241: LD_ADDR_VAR 0 62
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64329: LD_ADDR_VAR 0 63
64333: PUSH
64334: LD_INT 0
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64417: LD_ADDR_VAR 0 64
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: ST_TO_ADDR
// end ; 1 :
64505: GO 70402
64507: LD_INT 1
64509: DOUBLE
64510: EQUAL
64511: IFTRUE 64515
64513: GO 67138
64515: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64516: LD_ADDR_VAR 0 11
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 3
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 3
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64560: LD_ADDR_VAR 0 12
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64601: LD_ADDR_VAR 0 13
64605: PUSH
64606: LD_INT 3
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 3
64618: PUSH
64619: LD_INT 3
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: LD_INT 3
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64641: LD_ADDR_VAR 0 14
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64682: LD_ADDR_VAR 0 15
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 3
64700: NEG
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: LIST
64725: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64726: LD_ADDR_VAR 0 16
64730: PUSH
64731: LD_INT 2
64733: NEG
64734: PUSH
64735: LD_INT 3
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 3
64745: NEG
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 3
64757: NEG
64758: PUSH
64759: LD_INT 3
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: LIST
64771: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64772: LD_ADDR_VAR 0 17
64776: PUSH
64777: LD_INT 1
64779: NEG
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 3
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64816: LD_ADDR_VAR 0 18
64820: PUSH
64821: LD_INT 2
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64857: LD_ADDR_VAR 0 19
64861: PUSH
64862: LD_INT 3
64864: PUSH
64865: LD_INT 2
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 3
64874: PUSH
64875: LD_INT 3
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 2
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64897: LD_ADDR_VAR 0 20
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: LD_INT 3
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: LD_INT 3
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 2
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: LIST
64937: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64938: LD_ADDR_VAR 0 21
64942: PUSH
64943: LD_INT 2
64945: NEG
64946: PUSH
64947: LD_INT 1
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 3
64956: NEG
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 3
64967: NEG
64968: PUSH
64969: LD_INT 1
64971: NEG
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64982: LD_ADDR_VAR 0 22
64986: PUSH
64987: LD_INT 2
64989: NEG
64990: PUSH
64991: LD_INT 3
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 3
65013: NEG
65014: PUSH
65015: LD_INT 3
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65028: LD_ADDR_VAR 0 23
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: LD_INT 4
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: LD_INT 3
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65072: LD_ADDR_VAR 0 24
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 4
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65113: LD_ADDR_VAR 0 25
65117: PUSH
65118: LD_INT 3
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 4
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 3
65140: PUSH
65141: LD_INT 4
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65153: LD_ADDR_VAR 0 26
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: LD_INT 3
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: LD_INT 4
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: LIST
65193: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65194: LD_ADDR_VAR 0 27
65198: PUSH
65199: LD_INT 3
65201: NEG
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 3
65212: NEG
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 4
65223: NEG
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65238: LD_ADDR_VAR 0 28
65242: PUSH
65243: LD_INT 3
65245: NEG
65246: PUSH
65247: LD_INT 3
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: LD_INT 4
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 4
65269: NEG
65270: PUSH
65271: LD_INT 3
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65284: LD_ADDR_VAR 0 29
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: LD_INT 3
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: LD_INT 4
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 4
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: LD_INT 3
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 5
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: LD_INT 5
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: LD_INT 4
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: LD_INT 6
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: LD_INT 6
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 5
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65439: LD_ADDR_VAR 0 30
65443: PUSH
65444: LD_INT 2
65446: PUSH
65447: LD_INT 1
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 3
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 4
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 4
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 4
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 5
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 5
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 5
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 6
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 6
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65582: LD_ADDR_VAR 0 31
65586: PUSH
65587: LD_INT 3
65589: PUSH
65590: LD_INT 2
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 3
65599: PUSH
65600: LD_INT 3
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 2
65609: PUSH
65610: LD_INT 3
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 4
65619: PUSH
65620: LD_INT 3
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 4
65629: PUSH
65630: LD_INT 4
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 3
65639: PUSH
65640: LD_INT 4
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 5
65649: PUSH
65650: LD_INT 4
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 5
65659: PUSH
65660: LD_INT 5
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 4
65669: PUSH
65670: LD_INT 5
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 6
65679: PUSH
65680: LD_INT 5
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 6
65689: PUSH
65690: LD_INT 6
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 5
65699: PUSH
65700: LD_INT 6
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65721: LD_ADDR_VAR 0 32
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 3
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: LD_INT 4
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: LD_INT 4
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 1
65790: PUSH
65791: LD_INT 5
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 5
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: LD_INT 4
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: LD_INT 6
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: LD_INT 6
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 5
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65864: LD_ADDR_VAR 0 33
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 3
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 3
65905: NEG
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 4
65916: NEG
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 4
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 4
65939: NEG
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 5
65950: NEG
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 5
65961: NEG
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 5
65973: NEG
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 6
65984: NEG
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 6
65995: NEG
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66019: LD_ADDR_VAR 0 34
66023: PUSH
66024: LD_INT 2
66026: NEG
66027: PUSH
66028: LD_INT 3
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: LD_INT 2
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 3
66050: NEG
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 3
66062: NEG
66063: PUSH
66064: LD_INT 4
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 4
66074: NEG
66075: PUSH
66076: LD_INT 3
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 4
66086: NEG
66087: PUSH
66088: LD_INT 4
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 4
66098: NEG
66099: PUSH
66100: LD_INT 5
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 5
66110: NEG
66111: PUSH
66112: LD_INT 4
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 5
66122: NEG
66123: PUSH
66124: LD_INT 5
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 5
66134: NEG
66135: PUSH
66136: LD_INT 6
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 6
66146: NEG
66147: PUSH
66148: LD_INT 5
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 6
66158: NEG
66159: PUSH
66160: LD_INT 6
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66182: LD_ADDR_VAR 0 41
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: LD_INT 2
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: LD_INT 3
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: LD_INT 2
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66226: LD_ADDR_VAR 0 42
66230: PUSH
66231: LD_INT 2
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 2
66243: PUSH
66244: LD_INT 1
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: PUSH
66255: LD_INT 1
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66267: LD_ADDR_VAR 0 43
66271: PUSH
66272: LD_INT 2
66274: PUSH
66275: LD_INT 2
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 3
66284: PUSH
66285: LD_INT 2
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 2
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: LIST
66306: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66307: LD_ADDR_VAR 0 44
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 2
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: PUSH
66325: LD_INT 3
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: LD_INT 2
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: LIST
66347: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66348: LD_ADDR_VAR 0 45
66352: PUSH
66353: LD_INT 2
66355: NEG
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 3
66377: NEG
66378: PUSH
66379: LD_INT 1
66381: NEG
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: LIST
66391: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66392: LD_ADDR_VAR 0 46
66396: PUSH
66397: LD_INT 2
66399: NEG
66400: PUSH
66401: LD_INT 2
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 2
66411: NEG
66412: PUSH
66413: LD_INT 3
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 3
66423: NEG
66424: PUSH
66425: LD_INT 2
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66438: LD_ADDR_VAR 0 47
66442: PUSH
66443: LD_INT 2
66445: NEG
66446: PUSH
66447: LD_INT 3
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66471: LD_ADDR_VAR 0 48
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 2
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66502: LD_ADDR_VAR 0 49
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 3
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66531: LD_ADDR_VAR 0 50
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: LD_INT 3
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 3
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66560: LD_ADDR_VAR 0 51
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: LD_INT 2
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 2
66578: NEG
66579: PUSH
66580: LD_INT 1
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66591: LD_ADDR_VAR 0 52
66595: PUSH
66596: LD_INT 3
66598: NEG
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 3
66610: NEG
66611: PUSH
66612: LD_INT 2
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66624: LD_ADDR_VAR 0 53
66628: PUSH
66629: LD_INT 1
66631: NEG
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: LD_INT 3
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: LD_INT 2
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66668: LD_ADDR_VAR 0 54
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: LIST
66708: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66709: LD_ADDR_VAR 0 55
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 3
66726: PUSH
66727: LD_INT 3
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 2
66736: PUSH
66737: LD_INT 3
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: LIST
66748: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66749: LD_ADDR_VAR 0 56
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: LD_INT 3
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: LD_INT 2
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66790: LD_ADDR_VAR 0 57
66794: PUSH
66795: LD_INT 2
66797: NEG
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 3
66808: NEG
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 3
66819: NEG
66820: PUSH
66821: LD_INT 1
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66834: LD_ADDR_VAR 0 58
66838: PUSH
66839: LD_INT 2
66841: NEG
66842: PUSH
66843: LD_INT 3
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 3
66853: NEG
66854: PUSH
66855: LD_INT 2
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 3
66865: NEG
66866: PUSH
66867: LD_INT 3
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: LIST
66879: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66880: LD_ADDR_VAR 0 59
66884: PUSH
66885: LD_INT 1
66887: NEG
66888: PUSH
66889: LD_INT 2
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 1
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66924: LD_ADDR_VAR 0 60
66928: PUSH
66929: LD_INT 1
66931: PUSH
66932: LD_INT 1
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: LD_INT 1
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: LIST
66964: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66965: LD_ADDR_VAR 0 61
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: LD_INT 1
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 2
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: LD_INT 2
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: LIST
67004: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67005: LD_ADDR_VAR 0 62
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: LD_INT 2
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 0
67022: PUSH
67023: LD_INT 2
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: LIST
67045: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67046: LD_ADDR_VAR 0 63
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: LD_INT 1
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 2
67075: NEG
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: LIST
67089: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67090: LD_ADDR_VAR 0 64
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: LD_INT 2
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 2
67121: NEG
67122: PUSH
67123: LD_INT 2
67125: NEG
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: LIST
67135: ST_TO_ADDR
// end ; 2 :
67136: GO 70402
67138: LD_INT 2
67140: DOUBLE
67141: EQUAL
67142: IFTRUE 67146
67144: GO 70401
67146: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67147: LD_ADDR_VAR 0 29
67151: PUSH
67152: LD_INT 4
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 4
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 5
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 5
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 4
67195: PUSH
67196: LD_INT 1
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 3
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: LD_INT 1
67218: NEG
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 3
67226: PUSH
67227: LD_INT 2
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 5
67237: PUSH
67238: LD_INT 2
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 3
67247: PUSH
67248: LD_INT 3
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 3
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 4
67267: PUSH
67268: LD_INT 3
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 4
67277: PUSH
67278: LD_INT 4
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: LD_INT 4
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 2
67297: PUSH
67298: LD_INT 3
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 2
67307: PUSH
67308: LD_INT 2
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 4
67317: PUSH
67318: LD_INT 2
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 2
67327: PUSH
67328: LD_INT 4
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 4
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: LD_INT 3
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: LD_INT 4
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 1
67367: PUSH
67368: LD_INT 5
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: LD_INT 5
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: LD_INT 4
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 1
67398: NEG
67399: PUSH
67400: LD_INT 3
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 2
67409: PUSH
67410: LD_INT 5
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 2
67419: NEG
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: NEG
67431: PUSH
67432: LD_INT 0
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: LD_INT 1
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 4
67486: NEG
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 4
67497: NEG
67498: PUSH
67499: LD_INT 1
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 4
67509: NEG
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 2
67521: NEG
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 4
67532: NEG
67533: PUSH
67534: LD_INT 4
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 4
67544: NEG
67545: PUSH
67546: LD_INT 5
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 3
67556: NEG
67557: PUSH
67558: LD_INT 4
67560: NEG
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 3
67568: NEG
67569: PUSH
67570: LD_INT 3
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 4
67580: NEG
67581: PUSH
67582: LD_INT 3
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 5
67592: NEG
67593: PUSH
67594: LD_INT 4
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 5
67604: NEG
67605: PUSH
67606: LD_INT 5
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: NEG
67617: PUSH
67618: LD_INT 5
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 5
67628: NEG
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67685: LD_ADDR_VAR 0 30
67689: PUSH
67690: LD_INT 4
67692: PUSH
67693: LD_INT 4
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 4
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 5
67712: PUSH
67713: LD_INT 4
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 5
67722: PUSH
67723: LD_INT 5
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 4
67732: PUSH
67733: LD_INT 5
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 3
67742: PUSH
67743: LD_INT 4
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 3
67752: PUSH
67753: LD_INT 3
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 5
67762: PUSH
67763: LD_INT 3
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 3
67772: PUSH
67773: LD_INT 5
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 0
67792: PUSH
67793: LD_INT 2
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 1
67802: PUSH
67803: LD_INT 3
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 1
67812: PUSH
67813: LD_INT 4
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: LD_INT 4
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 1
67832: NEG
67833: PUSH
67834: LD_INT 3
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: LD_INT 2
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 2
67854: PUSH
67855: LD_INT 4
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 2
67864: NEG
67865: PUSH
67866: LD_INT 2
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 4
67875: NEG
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 4
67886: NEG
67887: PUSH
67888: LD_INT 1
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: NEG
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 4
67920: NEG
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 5
67931: NEG
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 5
67942: NEG
67943: PUSH
67944: LD_INT 1
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 5
67954: NEG
67955: PUSH
67956: LD_INT 2
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 3
67966: NEG
67967: PUSH
67968: LD_INT 2
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: LD_INT 3
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: LD_INT 4
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: NEG
68002: PUSH
68003: LD_INT 3
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 2
68013: NEG
68014: PUSH
68015: LD_INT 2
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 3
68025: NEG
68026: PUSH
68027: LD_INT 2
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 4
68037: NEG
68038: PUSH
68039: LD_INT 3
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 4
68049: NEG
68050: PUSH
68051: LD_INT 4
68053: NEG
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: LD_INT 4
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 4
68073: NEG
68074: PUSH
68075: LD_INT 2
68077: NEG
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: LD_INT 4
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 0
68096: PUSH
68097: LD_INT 5
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 1
68107: PUSH
68108: LD_INT 4
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: LD_INT 3
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: LD_INT 3
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: LD_INT 4
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 1
68152: NEG
68153: PUSH
68154: LD_INT 5
68156: NEG
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: LD_INT 3
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 2
68175: NEG
68176: PUSH
68177: LD_INT 5
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68232: LD_ADDR_VAR 0 31
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: LD_INT 4
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 1
68259: PUSH
68260: LD_INT 4
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: LD_INT 5
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 0
68279: PUSH
68280: LD_INT 5
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 1
68289: NEG
68290: PUSH
68291: LD_INT 4
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 1
68300: NEG
68301: PUSH
68302: LD_INT 3
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 2
68311: PUSH
68312: LD_INT 5
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 2
68321: NEG
68322: PUSH
68323: LD_INT 3
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 3
68332: NEG
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 3
68343: NEG
68344: PUSH
68345: LD_INT 1
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 2
68355: NEG
68356: PUSH
68357: LD_INT 0
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: LD_INT 1
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 3
68377: NEG
68378: PUSH
68379: LD_INT 1
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 4
68388: NEG
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 4
68399: NEG
68400: PUSH
68401: LD_INT 1
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 4
68411: NEG
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 2
68423: NEG
68424: PUSH
68425: LD_INT 2
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 4
68434: NEG
68435: PUSH
68436: LD_INT 4
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 4
68446: NEG
68447: PUSH
68448: LD_INT 5
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 3
68458: NEG
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 3
68470: NEG
68471: PUSH
68472: LD_INT 3
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 4
68482: NEG
68483: PUSH
68484: LD_INT 3
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 5
68494: NEG
68495: PUSH
68496: LD_INT 4
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 5
68506: NEG
68507: PUSH
68508: LD_INT 5
68510: NEG
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: LD_INT 5
68522: NEG
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 5
68530: NEG
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: LD_INT 3
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: LD_INT 4
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 1
68564: PUSH
68565: LD_INT 3
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: LD_INT 2
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: LD_INT 2
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 1
68597: NEG
68598: PUSH
68599: LD_INT 3
68601: NEG
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: PUSH
68611: LD_INT 4
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: LD_INT 2
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 2
68632: NEG
68633: PUSH
68634: LD_INT 4
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 4
68644: PUSH
68645: LD_INT 0
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 4
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 5
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 5
68675: PUSH
68676: LD_INT 1
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 4
68685: PUSH
68686: LD_INT 1
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 3
68695: PUSH
68696: LD_INT 0
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 3
68705: PUSH
68706: LD_INT 1
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 5
68727: PUSH
68728: LD_INT 2
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68782: LD_ADDR_VAR 0 32
68786: PUSH
68787: LD_INT 4
68789: NEG
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 4
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 3
68812: NEG
68813: PUSH
68814: LD_INT 0
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 3
68823: NEG
68824: PUSH
68825: LD_INT 1
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 4
68834: NEG
68835: PUSH
68836: LD_INT 1
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 5
68845: NEG
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 5
68856: NEG
68857: PUSH
68858: LD_INT 1
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 5
68868: NEG
68869: PUSH
68870: LD_INT 2
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 3
68880: NEG
68881: PUSH
68882: LD_INT 2
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 3
68891: NEG
68892: PUSH
68893: LD_INT 3
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: LD_INT 4
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 2
68915: NEG
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 2
68927: NEG
68928: PUSH
68929: LD_INT 2
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 3
68939: NEG
68940: PUSH
68941: LD_INT 2
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 4
68951: NEG
68952: PUSH
68953: LD_INT 3
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: LD_INT 4
68963: NEG
68964: PUSH
68965: LD_INT 4
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 2
68975: NEG
68976: PUSH
68977: LD_INT 4
68979: NEG
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 4
68987: NEG
68988: PUSH
68989: LD_INT 2
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 4
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: LD_INT 5
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 1
69021: PUSH
69022: LD_INT 4
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: LD_INT 3
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 0
69043: PUSH
69044: LD_INT 3
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 1
69054: NEG
69055: PUSH
69056: LD_INT 4
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 1
69066: NEG
69067: PUSH
69068: LD_INT 5
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 2
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 2
69089: NEG
69090: PUSH
69091: LD_INT 5
69093: NEG
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 3
69101: PUSH
69102: LD_INT 0
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 3
69111: PUSH
69112: LD_INT 1
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 4
69122: PUSH
69123: LD_INT 0
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 4
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 3
69142: PUSH
69143: LD_INT 1
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 2
69152: PUSH
69153: LD_INT 0
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 2
69162: PUSH
69163: LD_INT 1
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 2
69173: PUSH
69174: LD_INT 2
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 4
69184: PUSH
69185: LD_INT 2
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 4
69194: PUSH
69195: LD_INT 4
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 4
69204: PUSH
69205: LD_INT 3
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 5
69214: PUSH
69215: LD_INT 4
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 5
69224: PUSH
69225: LD_INT 5
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 4
69234: PUSH
69235: LD_INT 5
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: PUSH
69245: LD_INT 4
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 3
69254: PUSH
69255: LD_INT 3
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 5
69264: PUSH
69265: LD_INT 3
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 3
69274: PUSH
69275: LD_INT 5
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69329: LD_ADDR_VAR 0 33
69333: PUSH
69334: LD_INT 4
69336: NEG
69337: PUSH
69338: LD_INT 4
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: NEG
69349: PUSH
69350: LD_INT 5
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 3
69360: NEG
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 3
69372: NEG
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 4
69384: NEG
69385: PUSH
69386: LD_INT 3
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 5
69396: NEG
69397: PUSH
69398: LD_INT 4
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 5
69408: NEG
69409: PUSH
69410: LD_INT 5
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: LD_INT 5
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 5
69432: NEG
69433: PUSH
69434: LD_INT 3
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: LD_INT 3
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: LD_INT 4
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: PUSH
69467: LD_INT 3
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: LD_INT 2
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 3
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: NEG
69512: PUSH
69513: LD_INT 4
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: LD_INT 2
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 2
69534: NEG
69535: PUSH
69536: LD_INT 4
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 4
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 4
69556: PUSH
69557: LD_INT 1
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 5
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 5
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 4
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 3
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 3
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 3
69618: PUSH
69619: LD_INT 2
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 5
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 3
69639: PUSH
69640: LD_INT 3
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 3
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 4
69659: PUSH
69660: LD_INT 3
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 4
69669: PUSH
69670: LD_INT 4
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 3
69679: PUSH
69680: LD_INT 4
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 2
69689: PUSH
69690: LD_INT 3
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 2
69699: PUSH
69700: LD_INT 2
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 4
69709: PUSH
69710: LD_INT 2
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 2
69719: PUSH
69720: LD_INT 4
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 3
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: PUSH
69750: LD_INT 4
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 1
69759: PUSH
69760: LD_INT 5
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: LD_INT 5
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: NEG
69780: PUSH
69781: LD_INT 4
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 1
69790: NEG
69791: PUSH
69792: LD_INT 3
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 2
69801: PUSH
69802: LD_INT 5
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 2
69811: NEG
69812: PUSH
69813: LD_INT 3
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69867: LD_ADDR_VAR 0 34
69871: PUSH
69872: LD_INT 0
69874: PUSH
69875: LD_INT 4
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: LD_INT 5
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 1
69896: PUSH
69897: LD_INT 4
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 1
69907: PUSH
69908: LD_INT 3
69910: NEG
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 0
69918: PUSH
69919: LD_INT 3
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 1
69929: NEG
69930: PUSH
69931: LD_INT 4
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 1
69941: NEG
69942: PUSH
69943: LD_INT 5
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 2
69953: PUSH
69954: LD_INT 3
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 2
69964: NEG
69965: PUSH
69966: LD_INT 5
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 3
69976: PUSH
69977: LD_INT 0
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 3
69986: PUSH
69987: LD_INT 1
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 4
70007: PUSH
70008: LD_INT 1
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 3
70017: PUSH
70018: LD_INT 1
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 2
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: PUSH
70038: LD_INT 1
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 2
70048: PUSH
70049: LD_INT 2
70051: NEG
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 4
70059: PUSH
70060: LD_INT 2
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 4
70069: PUSH
70070: LD_INT 4
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 4
70079: PUSH
70080: LD_INT 3
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 5
70089: PUSH
70090: LD_INT 4
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 5
70099: PUSH
70100: LD_INT 5
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 4
70109: PUSH
70110: LD_INT 5
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 3
70119: PUSH
70120: LD_INT 4
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 3
70129: PUSH
70130: LD_INT 3
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 5
70139: PUSH
70140: LD_INT 3
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: LD_INT 5
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 3
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: LD_INT 2
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 1
70179: PUSH
70180: LD_INT 3
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 1
70189: PUSH
70190: LD_INT 4
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 4
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 1
70209: NEG
70210: PUSH
70211: LD_INT 3
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: PUSH
70222: LD_INT 2
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 2
70231: PUSH
70232: LD_INT 4
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 2
70241: NEG
70242: PUSH
70243: LD_INT 2
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 4
70252: NEG
70253: PUSH
70254: LD_INT 0
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 4
70263: NEG
70264: PUSH
70265: LD_INT 1
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 3
70275: NEG
70276: PUSH
70277: LD_INT 0
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 3
70286: NEG
70287: PUSH
70288: LD_INT 1
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 4
70297: NEG
70298: PUSH
70299: LD_INT 1
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 5
70308: NEG
70309: PUSH
70310: LD_INT 0
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 5
70319: NEG
70320: PUSH
70321: LD_INT 1
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 5
70331: NEG
70332: PUSH
70333: LD_INT 2
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 3
70343: NEG
70344: PUSH
70345: LD_INT 2
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: ST_TO_ADDR
// end ; end ;
70399: GO 70402
70401: POP
// case btype of b_depot , b_warehouse :
70402: LD_VAR 0 1
70406: PUSH
70407: LD_INT 0
70409: DOUBLE
70410: EQUAL
70411: IFTRUE 70421
70413: LD_INT 1
70415: DOUBLE
70416: EQUAL
70417: IFTRUE 70421
70419: GO 70622
70421: POP
// case nation of nation_american :
70422: LD_VAR 0 5
70426: PUSH
70427: LD_INT 1
70429: DOUBLE
70430: EQUAL
70431: IFTRUE 70435
70433: GO 70491
70435: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70436: LD_ADDR_VAR 0 9
70440: PUSH
70441: LD_VAR 0 11
70445: PUSH
70446: LD_VAR 0 12
70450: PUSH
70451: LD_VAR 0 13
70455: PUSH
70456: LD_VAR 0 14
70460: PUSH
70461: LD_VAR 0 15
70465: PUSH
70466: LD_VAR 0 16
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: PUSH
70479: LD_VAR 0 4
70483: PUSH
70484: LD_INT 1
70486: PLUS
70487: ARRAY
70488: ST_TO_ADDR
70489: GO 70620
70491: LD_INT 2
70493: DOUBLE
70494: EQUAL
70495: IFTRUE 70499
70497: GO 70555
70499: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70500: LD_ADDR_VAR 0 9
70504: PUSH
70505: LD_VAR 0 17
70509: PUSH
70510: LD_VAR 0 18
70514: PUSH
70515: LD_VAR 0 19
70519: PUSH
70520: LD_VAR 0 20
70524: PUSH
70525: LD_VAR 0 21
70529: PUSH
70530: LD_VAR 0 22
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: PUSH
70543: LD_VAR 0 4
70547: PUSH
70548: LD_INT 1
70550: PLUS
70551: ARRAY
70552: ST_TO_ADDR
70553: GO 70620
70555: LD_INT 3
70557: DOUBLE
70558: EQUAL
70559: IFTRUE 70563
70561: GO 70619
70563: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70564: LD_ADDR_VAR 0 9
70568: PUSH
70569: LD_VAR 0 23
70573: PUSH
70574: LD_VAR 0 24
70578: PUSH
70579: LD_VAR 0 25
70583: PUSH
70584: LD_VAR 0 26
70588: PUSH
70589: LD_VAR 0 27
70593: PUSH
70594: LD_VAR 0 28
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: PUSH
70607: LD_VAR 0 4
70611: PUSH
70612: LD_INT 1
70614: PLUS
70615: ARRAY
70616: ST_TO_ADDR
70617: GO 70620
70619: POP
70620: GO 71175
70622: LD_INT 2
70624: DOUBLE
70625: EQUAL
70626: IFTRUE 70636
70628: LD_INT 3
70630: DOUBLE
70631: EQUAL
70632: IFTRUE 70636
70634: GO 70692
70636: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70637: LD_ADDR_VAR 0 9
70641: PUSH
70642: LD_VAR 0 29
70646: PUSH
70647: LD_VAR 0 30
70651: PUSH
70652: LD_VAR 0 31
70656: PUSH
70657: LD_VAR 0 32
70661: PUSH
70662: LD_VAR 0 33
70666: PUSH
70667: LD_VAR 0 34
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: PUSH
70680: LD_VAR 0 4
70684: PUSH
70685: LD_INT 1
70687: PLUS
70688: ARRAY
70689: ST_TO_ADDR
70690: GO 71175
70692: LD_INT 16
70694: DOUBLE
70695: EQUAL
70696: IFTRUE 70754
70698: LD_INT 17
70700: DOUBLE
70701: EQUAL
70702: IFTRUE 70754
70704: LD_INT 18
70706: DOUBLE
70707: EQUAL
70708: IFTRUE 70754
70710: LD_INT 19
70712: DOUBLE
70713: EQUAL
70714: IFTRUE 70754
70716: LD_INT 22
70718: DOUBLE
70719: EQUAL
70720: IFTRUE 70754
70722: LD_INT 20
70724: DOUBLE
70725: EQUAL
70726: IFTRUE 70754
70728: LD_INT 21
70730: DOUBLE
70731: EQUAL
70732: IFTRUE 70754
70734: LD_INT 23
70736: DOUBLE
70737: EQUAL
70738: IFTRUE 70754
70740: LD_INT 24
70742: DOUBLE
70743: EQUAL
70744: IFTRUE 70754
70746: LD_INT 25
70748: DOUBLE
70749: EQUAL
70750: IFTRUE 70754
70752: GO 70810
70754: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70755: LD_ADDR_VAR 0 9
70759: PUSH
70760: LD_VAR 0 35
70764: PUSH
70765: LD_VAR 0 36
70769: PUSH
70770: LD_VAR 0 37
70774: PUSH
70775: LD_VAR 0 38
70779: PUSH
70780: LD_VAR 0 39
70784: PUSH
70785: LD_VAR 0 40
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: PUSH
70798: LD_VAR 0 4
70802: PUSH
70803: LD_INT 1
70805: PLUS
70806: ARRAY
70807: ST_TO_ADDR
70808: GO 71175
70810: LD_INT 6
70812: DOUBLE
70813: EQUAL
70814: IFTRUE 70866
70816: LD_INT 7
70818: DOUBLE
70819: EQUAL
70820: IFTRUE 70866
70822: LD_INT 8
70824: DOUBLE
70825: EQUAL
70826: IFTRUE 70866
70828: LD_INT 13
70830: DOUBLE
70831: EQUAL
70832: IFTRUE 70866
70834: LD_INT 12
70836: DOUBLE
70837: EQUAL
70838: IFTRUE 70866
70840: LD_INT 15
70842: DOUBLE
70843: EQUAL
70844: IFTRUE 70866
70846: LD_INT 11
70848: DOUBLE
70849: EQUAL
70850: IFTRUE 70866
70852: LD_INT 14
70854: DOUBLE
70855: EQUAL
70856: IFTRUE 70866
70858: LD_INT 10
70860: DOUBLE
70861: EQUAL
70862: IFTRUE 70866
70864: GO 70922
70866: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70867: LD_ADDR_VAR 0 9
70871: PUSH
70872: LD_VAR 0 41
70876: PUSH
70877: LD_VAR 0 42
70881: PUSH
70882: LD_VAR 0 43
70886: PUSH
70887: LD_VAR 0 44
70891: PUSH
70892: LD_VAR 0 45
70896: PUSH
70897: LD_VAR 0 46
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: PUSH
70910: LD_VAR 0 4
70914: PUSH
70915: LD_INT 1
70917: PLUS
70918: ARRAY
70919: ST_TO_ADDR
70920: GO 71175
70922: LD_INT 36
70924: DOUBLE
70925: EQUAL
70926: IFTRUE 70930
70928: GO 70986
70930: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70931: LD_ADDR_VAR 0 9
70935: PUSH
70936: LD_VAR 0 47
70940: PUSH
70941: LD_VAR 0 48
70945: PUSH
70946: LD_VAR 0 49
70950: PUSH
70951: LD_VAR 0 50
70955: PUSH
70956: LD_VAR 0 51
70960: PUSH
70961: LD_VAR 0 52
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: PUSH
70974: LD_VAR 0 4
70978: PUSH
70979: LD_INT 1
70981: PLUS
70982: ARRAY
70983: ST_TO_ADDR
70984: GO 71175
70986: LD_INT 4
70988: DOUBLE
70989: EQUAL
70990: IFTRUE 71012
70992: LD_INT 5
70994: DOUBLE
70995: EQUAL
70996: IFTRUE 71012
70998: LD_INT 34
71000: DOUBLE
71001: EQUAL
71002: IFTRUE 71012
71004: LD_INT 37
71006: DOUBLE
71007: EQUAL
71008: IFTRUE 71012
71010: GO 71068
71012: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71013: LD_ADDR_VAR 0 9
71017: PUSH
71018: LD_VAR 0 53
71022: PUSH
71023: LD_VAR 0 54
71027: PUSH
71028: LD_VAR 0 55
71032: PUSH
71033: LD_VAR 0 56
71037: PUSH
71038: LD_VAR 0 57
71042: PUSH
71043: LD_VAR 0 58
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: PUSH
71056: LD_VAR 0 4
71060: PUSH
71061: LD_INT 1
71063: PLUS
71064: ARRAY
71065: ST_TO_ADDR
71066: GO 71175
71068: LD_INT 31
71070: DOUBLE
71071: EQUAL
71072: IFTRUE 71118
71074: LD_INT 32
71076: DOUBLE
71077: EQUAL
71078: IFTRUE 71118
71080: LD_INT 33
71082: DOUBLE
71083: EQUAL
71084: IFTRUE 71118
71086: LD_INT 27
71088: DOUBLE
71089: EQUAL
71090: IFTRUE 71118
71092: LD_INT 26
71094: DOUBLE
71095: EQUAL
71096: IFTRUE 71118
71098: LD_INT 28
71100: DOUBLE
71101: EQUAL
71102: IFTRUE 71118
71104: LD_INT 29
71106: DOUBLE
71107: EQUAL
71108: IFTRUE 71118
71110: LD_INT 30
71112: DOUBLE
71113: EQUAL
71114: IFTRUE 71118
71116: GO 71174
71118: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71119: LD_ADDR_VAR 0 9
71123: PUSH
71124: LD_VAR 0 59
71128: PUSH
71129: LD_VAR 0 60
71133: PUSH
71134: LD_VAR 0 61
71138: PUSH
71139: LD_VAR 0 62
71143: PUSH
71144: LD_VAR 0 63
71148: PUSH
71149: LD_VAR 0 64
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: PUSH
71162: LD_VAR 0 4
71166: PUSH
71167: LD_INT 1
71169: PLUS
71170: ARRAY
71171: ST_TO_ADDR
71172: GO 71175
71174: POP
// temp_list2 = [ ] ;
71175: LD_ADDR_VAR 0 10
71179: PUSH
71180: EMPTY
71181: ST_TO_ADDR
// for i in temp_list do
71182: LD_ADDR_VAR 0 8
71186: PUSH
71187: LD_VAR 0 9
71191: PUSH
71192: FOR_IN
71193: IFFALSE 71245
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71195: LD_ADDR_VAR 0 10
71199: PUSH
71200: LD_VAR 0 10
71204: PUSH
71205: LD_VAR 0 8
71209: PUSH
71210: LD_INT 1
71212: ARRAY
71213: PUSH
71214: LD_VAR 0 2
71218: PLUS
71219: PUSH
71220: LD_VAR 0 8
71224: PUSH
71225: LD_INT 2
71227: ARRAY
71228: PUSH
71229: LD_VAR 0 3
71233: PLUS
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: EMPTY
71240: LIST
71241: ADD
71242: ST_TO_ADDR
71243: GO 71192
71245: POP
71246: POP
// result = temp_list2 ;
71247: LD_ADDR_VAR 0 7
71251: PUSH
71252: LD_VAR 0 10
71256: ST_TO_ADDR
// end ;
71257: LD_VAR 0 7
71261: RET
// export function EnemyInRange ( unit , dist ) ; begin
71262: LD_INT 0
71264: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71265: LD_ADDR_VAR 0 3
71269: PUSH
71270: LD_VAR 0 1
71274: PPUSH
71275: CALL_OW 255
71279: PPUSH
71280: LD_VAR 0 1
71284: PPUSH
71285: CALL_OW 250
71289: PPUSH
71290: LD_VAR 0 1
71294: PPUSH
71295: CALL_OW 251
71299: PPUSH
71300: LD_VAR 0 2
71304: PPUSH
71305: CALL 44635 0 4
71309: PUSH
71310: LD_INT 4
71312: ARRAY
71313: ST_TO_ADDR
// end ;
71314: LD_VAR 0 3
71318: RET
// export function PlayerSeeMe ( unit ) ; begin
71319: LD_INT 0
71321: PPUSH
// result := See ( your_side , unit ) ;
71322: LD_ADDR_VAR 0 2
71326: PUSH
71327: LD_OWVAR 2
71331: PPUSH
71332: LD_VAR 0 1
71336: PPUSH
71337: CALL_OW 292
71341: ST_TO_ADDR
// end ;
71342: LD_VAR 0 2
71346: RET
// export function ReverseDir ( unit ) ; begin
71347: LD_INT 0
71349: PPUSH
// if not unit then
71350: LD_VAR 0 1
71354: NOT
71355: IFFALSE 71359
// exit ;
71357: GO 71382
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71359: LD_ADDR_VAR 0 2
71363: PUSH
71364: LD_VAR 0 1
71368: PPUSH
71369: CALL_OW 254
71373: PUSH
71374: LD_INT 3
71376: PLUS
71377: PUSH
71378: LD_INT 6
71380: MOD
71381: ST_TO_ADDR
// end ;
71382: LD_VAR 0 2
71386: RET
// export function ReverseArray ( array ) ; var i ; begin
71387: LD_INT 0
71389: PPUSH
71390: PPUSH
// if not array then
71391: LD_VAR 0 1
71395: NOT
71396: IFFALSE 71400
// exit ;
71398: GO 71455
// result := [ ] ;
71400: LD_ADDR_VAR 0 2
71404: PUSH
71405: EMPTY
71406: ST_TO_ADDR
// for i := array downto 1 do
71407: LD_ADDR_VAR 0 3
71411: PUSH
71412: DOUBLE
71413: LD_VAR 0 1
71417: INC
71418: ST_TO_ADDR
71419: LD_INT 1
71421: PUSH
71422: FOR_DOWNTO
71423: IFFALSE 71453
// result := Join ( result , array [ i ] ) ;
71425: LD_ADDR_VAR 0 2
71429: PUSH
71430: LD_VAR 0 2
71434: PPUSH
71435: LD_VAR 0 1
71439: PUSH
71440: LD_VAR 0 3
71444: ARRAY
71445: PPUSH
71446: CALL 76111 0 2
71450: ST_TO_ADDR
71451: GO 71422
71453: POP
71454: POP
// end ;
71455: LD_VAR 0 2
71459: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71460: LD_INT 0
71462: PPUSH
71463: PPUSH
71464: PPUSH
71465: PPUSH
71466: PPUSH
71467: PPUSH
// if not unit or not hexes then
71468: LD_VAR 0 1
71472: NOT
71473: PUSH
71474: LD_VAR 0 2
71478: NOT
71479: OR
71480: IFFALSE 71484
// exit ;
71482: GO 71607
// dist := 9999 ;
71484: LD_ADDR_VAR 0 5
71488: PUSH
71489: LD_INT 9999
71491: ST_TO_ADDR
// for i = 1 to hexes do
71492: LD_ADDR_VAR 0 4
71496: PUSH
71497: DOUBLE
71498: LD_INT 1
71500: DEC
71501: ST_TO_ADDR
71502: LD_VAR 0 2
71506: PUSH
71507: FOR_TO
71508: IFFALSE 71595
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71510: LD_ADDR_VAR 0 6
71514: PUSH
71515: LD_VAR 0 1
71519: PPUSH
71520: LD_VAR 0 2
71524: PUSH
71525: LD_VAR 0 4
71529: ARRAY
71530: PUSH
71531: LD_INT 1
71533: ARRAY
71534: PPUSH
71535: LD_VAR 0 2
71539: PUSH
71540: LD_VAR 0 4
71544: ARRAY
71545: PUSH
71546: LD_INT 2
71548: ARRAY
71549: PPUSH
71550: CALL_OW 297
71554: ST_TO_ADDR
// if tdist < dist then
71555: LD_VAR 0 6
71559: PUSH
71560: LD_VAR 0 5
71564: LESS
71565: IFFALSE 71593
// begin hex := hexes [ i ] ;
71567: LD_ADDR_VAR 0 8
71571: PUSH
71572: LD_VAR 0 2
71576: PUSH
71577: LD_VAR 0 4
71581: ARRAY
71582: ST_TO_ADDR
// dist := tdist ;
71583: LD_ADDR_VAR 0 5
71587: PUSH
71588: LD_VAR 0 6
71592: ST_TO_ADDR
// end ; end ;
71593: GO 71507
71595: POP
71596: POP
// result := hex ;
71597: LD_ADDR_VAR 0 3
71601: PUSH
71602: LD_VAR 0 8
71606: ST_TO_ADDR
// end ;
71607: LD_VAR 0 3
71611: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71612: LD_INT 0
71614: PPUSH
71615: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71616: LD_VAR 0 1
71620: NOT
71621: PUSH
71622: LD_VAR 0 1
71626: PUSH
71627: LD_INT 21
71629: PUSH
71630: LD_INT 2
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 23
71639: PUSH
71640: LD_INT 2
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PPUSH
71651: CALL_OW 69
71655: IN
71656: NOT
71657: OR
71658: IFFALSE 71662
// exit ;
71660: GO 71709
// for i = 1 to 3 do
71662: LD_ADDR_VAR 0 3
71666: PUSH
71667: DOUBLE
71668: LD_INT 1
71670: DEC
71671: ST_TO_ADDR
71672: LD_INT 3
71674: PUSH
71675: FOR_TO
71676: IFFALSE 71707
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71678: LD_VAR 0 1
71682: PPUSH
71683: CALL_OW 250
71687: PPUSH
71688: LD_VAR 0 1
71692: PPUSH
71693: CALL_OW 251
71697: PPUSH
71698: LD_INT 1
71700: PPUSH
71701: CALL_OW 453
71705: GO 71675
71707: POP
71708: POP
// end ;
71709: LD_VAR 0 2
71713: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71714: LD_INT 0
71716: PPUSH
71717: PPUSH
71718: PPUSH
71719: PPUSH
71720: PPUSH
71721: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71722: LD_VAR 0 1
71726: NOT
71727: PUSH
71728: LD_VAR 0 2
71732: NOT
71733: OR
71734: PUSH
71735: LD_VAR 0 1
71739: PPUSH
71740: CALL_OW 314
71744: OR
71745: IFFALSE 71749
// exit ;
71747: GO 72216
// if GetLives ( i ) < 250 then
71749: LD_VAR 0 4
71753: PPUSH
71754: CALL_OW 256
71758: PUSH
71759: LD_INT 250
71761: LESS
71762: IFFALSE 71775
// begin ComAutodestruct ( i ) ;
71764: LD_VAR 0 4
71768: PPUSH
71769: CALL 71612 0 1
// exit ;
71773: GO 72216
// end ; x := GetX ( enemy_unit ) ;
71775: LD_ADDR_VAR 0 7
71779: PUSH
71780: LD_VAR 0 2
71784: PPUSH
71785: CALL_OW 250
71789: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71790: LD_ADDR_VAR 0 8
71794: PUSH
71795: LD_VAR 0 2
71799: PPUSH
71800: CALL_OW 251
71804: ST_TO_ADDR
// if not x or not y then
71805: LD_VAR 0 7
71809: NOT
71810: PUSH
71811: LD_VAR 0 8
71815: NOT
71816: OR
71817: IFFALSE 71821
// exit ;
71819: GO 72216
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71821: LD_ADDR_VAR 0 6
71825: PUSH
71826: LD_VAR 0 7
71830: PPUSH
71831: LD_INT 0
71833: PPUSH
71834: LD_INT 4
71836: PPUSH
71837: CALL_OW 272
71841: PUSH
71842: LD_VAR 0 8
71846: PPUSH
71847: LD_INT 0
71849: PPUSH
71850: LD_INT 4
71852: PPUSH
71853: CALL_OW 273
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_VAR 0 7
71866: PPUSH
71867: LD_INT 1
71869: PPUSH
71870: LD_INT 4
71872: PPUSH
71873: CALL_OW 272
71877: PUSH
71878: LD_VAR 0 8
71882: PPUSH
71883: LD_INT 1
71885: PPUSH
71886: LD_INT 4
71888: PPUSH
71889: CALL_OW 273
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_VAR 0 7
71902: PPUSH
71903: LD_INT 2
71905: PPUSH
71906: LD_INT 4
71908: PPUSH
71909: CALL_OW 272
71913: PUSH
71914: LD_VAR 0 8
71918: PPUSH
71919: LD_INT 2
71921: PPUSH
71922: LD_INT 4
71924: PPUSH
71925: CALL_OW 273
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_VAR 0 7
71938: PPUSH
71939: LD_INT 3
71941: PPUSH
71942: LD_INT 4
71944: PPUSH
71945: CALL_OW 272
71949: PUSH
71950: LD_VAR 0 8
71954: PPUSH
71955: LD_INT 3
71957: PPUSH
71958: LD_INT 4
71960: PPUSH
71961: CALL_OW 273
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_VAR 0 7
71974: PPUSH
71975: LD_INT 4
71977: PPUSH
71978: LD_INT 4
71980: PPUSH
71981: CALL_OW 272
71985: PUSH
71986: LD_VAR 0 8
71990: PPUSH
71991: LD_INT 4
71993: PPUSH
71994: LD_INT 4
71996: PPUSH
71997: CALL_OW 273
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_VAR 0 7
72010: PPUSH
72011: LD_INT 5
72013: PPUSH
72014: LD_INT 4
72016: PPUSH
72017: CALL_OW 272
72021: PUSH
72022: LD_VAR 0 8
72026: PPUSH
72027: LD_INT 5
72029: PPUSH
72030: LD_INT 4
72032: PPUSH
72033: CALL_OW 273
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: ST_TO_ADDR
// for i = tmp downto 1 do
72050: LD_ADDR_VAR 0 4
72054: PUSH
72055: DOUBLE
72056: LD_VAR 0 6
72060: INC
72061: ST_TO_ADDR
72062: LD_INT 1
72064: PUSH
72065: FOR_DOWNTO
72066: IFFALSE 72167
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72068: LD_VAR 0 6
72072: PUSH
72073: LD_VAR 0 4
72077: ARRAY
72078: PUSH
72079: LD_INT 1
72081: ARRAY
72082: PPUSH
72083: LD_VAR 0 6
72087: PUSH
72088: LD_VAR 0 4
72092: ARRAY
72093: PUSH
72094: LD_INT 2
72096: ARRAY
72097: PPUSH
72098: CALL_OW 488
72102: NOT
72103: PUSH
72104: LD_VAR 0 6
72108: PUSH
72109: LD_VAR 0 4
72113: ARRAY
72114: PUSH
72115: LD_INT 1
72117: ARRAY
72118: PPUSH
72119: LD_VAR 0 6
72123: PUSH
72124: LD_VAR 0 4
72128: ARRAY
72129: PUSH
72130: LD_INT 2
72132: ARRAY
72133: PPUSH
72134: CALL_OW 428
72138: PUSH
72139: LD_INT 0
72141: NONEQUAL
72142: OR
72143: IFFALSE 72165
// tmp := Delete ( tmp , i ) ;
72145: LD_ADDR_VAR 0 6
72149: PUSH
72150: LD_VAR 0 6
72154: PPUSH
72155: LD_VAR 0 4
72159: PPUSH
72160: CALL_OW 3
72164: ST_TO_ADDR
72165: GO 72065
72167: POP
72168: POP
// j := GetClosestHex ( unit , tmp ) ;
72169: LD_ADDR_VAR 0 5
72173: PUSH
72174: LD_VAR 0 1
72178: PPUSH
72179: LD_VAR 0 6
72183: PPUSH
72184: CALL 71460 0 2
72188: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72189: LD_VAR 0 1
72193: PPUSH
72194: LD_VAR 0 5
72198: PUSH
72199: LD_INT 1
72201: ARRAY
72202: PPUSH
72203: LD_VAR 0 5
72207: PUSH
72208: LD_INT 2
72210: ARRAY
72211: PPUSH
72212: CALL_OW 111
// end ;
72216: LD_VAR 0 3
72220: RET
// export function PrepareApemanSoldier ( ) ; begin
72221: LD_INT 0
72223: PPUSH
// uc_nation := 0 ;
72224: LD_ADDR_OWVAR 21
72228: PUSH
72229: LD_INT 0
72231: ST_TO_ADDR
// hc_sex := sex_male ;
72232: LD_ADDR_OWVAR 27
72236: PUSH
72237: LD_INT 1
72239: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72240: LD_ADDR_OWVAR 28
72244: PUSH
72245: LD_INT 15
72247: ST_TO_ADDR
// hc_gallery :=  ;
72248: LD_ADDR_OWVAR 33
72252: PUSH
72253: LD_STRING 
72255: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72256: LD_ADDR_OWVAR 31
72260: PUSH
72261: LD_INT 0
72263: PPUSH
72264: LD_INT 3
72266: PPUSH
72267: CALL_OW 12
72271: PUSH
72272: LD_INT 0
72274: PPUSH
72275: LD_INT 3
72277: PPUSH
72278: CALL_OW 12
72282: PUSH
72283: LD_INT 0
72285: PUSH
72286: LD_INT 0
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: ST_TO_ADDR
// end ;
72295: LD_VAR 0 1
72299: RET
// export function PrepareApemanEngineer ( ) ; begin
72300: LD_INT 0
72302: PPUSH
// uc_nation := 0 ;
72303: LD_ADDR_OWVAR 21
72307: PUSH
72308: LD_INT 0
72310: ST_TO_ADDR
// hc_sex := sex_male ;
72311: LD_ADDR_OWVAR 27
72315: PUSH
72316: LD_INT 1
72318: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72319: LD_ADDR_OWVAR 28
72323: PUSH
72324: LD_INT 16
72326: ST_TO_ADDR
// hc_gallery :=  ;
72327: LD_ADDR_OWVAR 33
72331: PUSH
72332: LD_STRING 
72334: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72335: LD_ADDR_OWVAR 31
72339: PUSH
72340: LD_INT 0
72342: PPUSH
72343: LD_INT 3
72345: PPUSH
72346: CALL_OW 12
72350: PUSH
72351: LD_INT 0
72353: PPUSH
72354: LD_INT 3
72356: PPUSH
72357: CALL_OW 12
72361: PUSH
72362: LD_INT 0
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: ST_TO_ADDR
// end ;
72374: LD_VAR 0 1
72378: RET
// export function PrepareApeman ( agressivity ) ; begin
72379: LD_INT 0
72381: PPUSH
// uc_side := 0 ;
72382: LD_ADDR_OWVAR 20
72386: PUSH
72387: LD_INT 0
72389: ST_TO_ADDR
// uc_nation := 0 ;
72390: LD_ADDR_OWVAR 21
72394: PUSH
72395: LD_INT 0
72397: ST_TO_ADDR
// hc_sex := sex_male ;
72398: LD_ADDR_OWVAR 27
72402: PUSH
72403: LD_INT 1
72405: ST_TO_ADDR
// hc_class := class_apeman ;
72406: LD_ADDR_OWVAR 28
72410: PUSH
72411: LD_INT 12
72413: ST_TO_ADDR
// hc_gallery :=  ;
72414: LD_ADDR_OWVAR 33
72418: PUSH
72419: LD_STRING 
72421: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72422: LD_ADDR_OWVAR 35
72426: PUSH
72427: LD_VAR 0 1
72431: NEG
72432: PPUSH
72433: LD_VAR 0 1
72437: PPUSH
72438: CALL_OW 12
72442: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72443: LD_ADDR_OWVAR 31
72447: PUSH
72448: LD_INT 0
72450: PPUSH
72451: LD_INT 3
72453: PPUSH
72454: CALL_OW 12
72458: PUSH
72459: LD_INT 0
72461: PPUSH
72462: LD_INT 3
72464: PPUSH
72465: CALL_OW 12
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 2
72486: RET
// export function PrepareTiger ( agressivity ) ; begin
72487: LD_INT 0
72489: PPUSH
// uc_side := 0 ;
72490: LD_ADDR_OWVAR 20
72494: PUSH
72495: LD_INT 0
72497: ST_TO_ADDR
// uc_nation := 0 ;
72498: LD_ADDR_OWVAR 21
72502: PUSH
72503: LD_INT 0
72505: ST_TO_ADDR
// hc_class := class_tiger ;
72506: LD_ADDR_OWVAR 28
72510: PUSH
72511: LD_INT 14
72513: ST_TO_ADDR
// hc_gallery :=  ;
72514: LD_ADDR_OWVAR 33
72518: PUSH
72519: LD_STRING 
72521: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72522: LD_ADDR_OWVAR 35
72526: PUSH
72527: LD_VAR 0 1
72531: NEG
72532: PPUSH
72533: LD_VAR 0 1
72537: PPUSH
72538: CALL_OW 12
72542: ST_TO_ADDR
// end ;
72543: LD_VAR 0 2
72547: RET
// export function PrepareEnchidna ( ) ; begin
72548: LD_INT 0
72550: PPUSH
// uc_side := 0 ;
72551: LD_ADDR_OWVAR 20
72555: PUSH
72556: LD_INT 0
72558: ST_TO_ADDR
// uc_nation := 0 ;
72559: LD_ADDR_OWVAR 21
72563: PUSH
72564: LD_INT 0
72566: ST_TO_ADDR
// hc_class := class_baggie ;
72567: LD_ADDR_OWVAR 28
72571: PUSH
72572: LD_INT 13
72574: ST_TO_ADDR
// hc_gallery :=  ;
72575: LD_ADDR_OWVAR 33
72579: PUSH
72580: LD_STRING 
72582: ST_TO_ADDR
// end ;
72583: LD_VAR 0 1
72587: RET
// export function PrepareFrog ( ) ; begin
72588: LD_INT 0
72590: PPUSH
// uc_side := 0 ;
72591: LD_ADDR_OWVAR 20
72595: PUSH
72596: LD_INT 0
72598: ST_TO_ADDR
// uc_nation := 0 ;
72599: LD_ADDR_OWVAR 21
72603: PUSH
72604: LD_INT 0
72606: ST_TO_ADDR
// hc_class := class_frog ;
72607: LD_ADDR_OWVAR 28
72611: PUSH
72612: LD_INT 19
72614: ST_TO_ADDR
// hc_gallery :=  ;
72615: LD_ADDR_OWVAR 33
72619: PUSH
72620: LD_STRING 
72622: ST_TO_ADDR
// end ;
72623: LD_VAR 0 1
72627: RET
// export function PrepareFish ( ) ; begin
72628: LD_INT 0
72630: PPUSH
// uc_side := 0 ;
72631: LD_ADDR_OWVAR 20
72635: PUSH
72636: LD_INT 0
72638: ST_TO_ADDR
// uc_nation := 0 ;
72639: LD_ADDR_OWVAR 21
72643: PUSH
72644: LD_INT 0
72646: ST_TO_ADDR
// hc_class := class_fish ;
72647: LD_ADDR_OWVAR 28
72651: PUSH
72652: LD_INT 20
72654: ST_TO_ADDR
// hc_gallery :=  ;
72655: LD_ADDR_OWVAR 33
72659: PUSH
72660: LD_STRING 
72662: ST_TO_ADDR
// end ;
72663: LD_VAR 0 1
72667: RET
// export function PrepareBird ( ) ; begin
72668: LD_INT 0
72670: PPUSH
// uc_side := 0 ;
72671: LD_ADDR_OWVAR 20
72675: PUSH
72676: LD_INT 0
72678: ST_TO_ADDR
// uc_nation := 0 ;
72679: LD_ADDR_OWVAR 21
72683: PUSH
72684: LD_INT 0
72686: ST_TO_ADDR
// hc_class := class_phororhacos ;
72687: LD_ADDR_OWVAR 28
72691: PUSH
72692: LD_INT 18
72694: ST_TO_ADDR
// hc_gallery :=  ;
72695: LD_ADDR_OWVAR 33
72699: PUSH
72700: LD_STRING 
72702: ST_TO_ADDR
// end ;
72703: LD_VAR 0 1
72707: RET
// export function PrepareHorse ( ) ; begin
72708: LD_INT 0
72710: PPUSH
// uc_side := 0 ;
72711: LD_ADDR_OWVAR 20
72715: PUSH
72716: LD_INT 0
72718: ST_TO_ADDR
// uc_nation := 0 ;
72719: LD_ADDR_OWVAR 21
72723: PUSH
72724: LD_INT 0
72726: ST_TO_ADDR
// hc_class := class_horse ;
72727: LD_ADDR_OWVAR 28
72731: PUSH
72732: LD_INT 21
72734: ST_TO_ADDR
// hc_gallery :=  ;
72735: LD_ADDR_OWVAR 33
72739: PUSH
72740: LD_STRING 
72742: ST_TO_ADDR
// end ;
72743: LD_VAR 0 1
72747: RET
// export function PrepareMastodont ( ) ; begin
72748: LD_INT 0
72750: PPUSH
// uc_side := 0 ;
72751: LD_ADDR_OWVAR 20
72755: PUSH
72756: LD_INT 0
72758: ST_TO_ADDR
// uc_nation := 0 ;
72759: LD_ADDR_OWVAR 21
72763: PUSH
72764: LD_INT 0
72766: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72767: LD_ADDR_OWVAR 37
72771: PUSH
72772: LD_INT 31
72774: ST_TO_ADDR
// vc_control := control_rider ;
72775: LD_ADDR_OWVAR 38
72779: PUSH
72780: LD_INT 4
72782: ST_TO_ADDR
// end ;
72783: LD_VAR 0 1
72787: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72788: LD_INT 0
72790: PPUSH
72791: PPUSH
72792: PPUSH
// uc_side = 0 ;
72793: LD_ADDR_OWVAR 20
72797: PUSH
72798: LD_INT 0
72800: ST_TO_ADDR
// uc_nation = 0 ;
72801: LD_ADDR_OWVAR 21
72805: PUSH
72806: LD_INT 0
72808: ST_TO_ADDR
// InitHc_All ( ) ;
72809: CALL_OW 584
// InitVc ;
72813: CALL_OW 20
// if mastodonts then
72817: LD_VAR 0 6
72821: IFFALSE 72888
// for i = 1 to mastodonts do
72823: LD_ADDR_VAR 0 11
72827: PUSH
72828: DOUBLE
72829: LD_INT 1
72831: DEC
72832: ST_TO_ADDR
72833: LD_VAR 0 6
72837: PUSH
72838: FOR_TO
72839: IFFALSE 72886
// begin vc_chassis := 31 ;
72841: LD_ADDR_OWVAR 37
72845: PUSH
72846: LD_INT 31
72848: ST_TO_ADDR
// vc_control := control_rider ;
72849: LD_ADDR_OWVAR 38
72853: PUSH
72854: LD_INT 4
72856: ST_TO_ADDR
// animal := CreateVehicle ;
72857: LD_ADDR_VAR 0 12
72861: PUSH
72862: CALL_OW 45
72866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72867: LD_VAR 0 12
72871: PPUSH
72872: LD_VAR 0 8
72876: PPUSH
72877: LD_INT 0
72879: PPUSH
72880: CALL 75016 0 3
// end ;
72884: GO 72838
72886: POP
72887: POP
// if horses then
72888: LD_VAR 0 5
72892: IFFALSE 72959
// for i = 1 to horses do
72894: LD_ADDR_VAR 0 11
72898: PUSH
72899: DOUBLE
72900: LD_INT 1
72902: DEC
72903: ST_TO_ADDR
72904: LD_VAR 0 5
72908: PUSH
72909: FOR_TO
72910: IFFALSE 72957
// begin hc_class := 21 ;
72912: LD_ADDR_OWVAR 28
72916: PUSH
72917: LD_INT 21
72919: ST_TO_ADDR
// hc_gallery :=  ;
72920: LD_ADDR_OWVAR 33
72924: PUSH
72925: LD_STRING 
72927: ST_TO_ADDR
// animal := CreateHuman ;
72928: LD_ADDR_VAR 0 12
72932: PUSH
72933: CALL_OW 44
72937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72938: LD_VAR 0 12
72942: PPUSH
72943: LD_VAR 0 8
72947: PPUSH
72948: LD_INT 0
72950: PPUSH
72951: CALL 75016 0 3
// end ;
72955: GO 72909
72957: POP
72958: POP
// if birds then
72959: LD_VAR 0 1
72963: IFFALSE 73030
// for i = 1 to birds do
72965: LD_ADDR_VAR 0 11
72969: PUSH
72970: DOUBLE
72971: LD_INT 1
72973: DEC
72974: ST_TO_ADDR
72975: LD_VAR 0 1
72979: PUSH
72980: FOR_TO
72981: IFFALSE 73028
// begin hc_class := 18 ;
72983: LD_ADDR_OWVAR 28
72987: PUSH
72988: LD_INT 18
72990: ST_TO_ADDR
// hc_gallery =  ;
72991: LD_ADDR_OWVAR 33
72995: PUSH
72996: LD_STRING 
72998: ST_TO_ADDR
// animal := CreateHuman ;
72999: LD_ADDR_VAR 0 12
73003: PUSH
73004: CALL_OW 44
73008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73009: LD_VAR 0 12
73013: PPUSH
73014: LD_VAR 0 8
73018: PPUSH
73019: LD_INT 0
73021: PPUSH
73022: CALL 75016 0 3
// end ;
73026: GO 72980
73028: POP
73029: POP
// if tigers then
73030: LD_VAR 0 2
73034: IFFALSE 73118
// for i = 1 to tigers do
73036: LD_ADDR_VAR 0 11
73040: PUSH
73041: DOUBLE
73042: LD_INT 1
73044: DEC
73045: ST_TO_ADDR
73046: LD_VAR 0 2
73050: PUSH
73051: FOR_TO
73052: IFFALSE 73116
// begin hc_class = class_tiger ;
73054: LD_ADDR_OWVAR 28
73058: PUSH
73059: LD_INT 14
73061: ST_TO_ADDR
// hc_gallery =  ;
73062: LD_ADDR_OWVAR 33
73066: PUSH
73067: LD_STRING 
73069: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73070: LD_ADDR_OWVAR 35
73074: PUSH
73075: LD_INT 7
73077: NEG
73078: PPUSH
73079: LD_INT 7
73081: PPUSH
73082: CALL_OW 12
73086: ST_TO_ADDR
// animal := CreateHuman ;
73087: LD_ADDR_VAR 0 12
73091: PUSH
73092: CALL_OW 44
73096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73097: LD_VAR 0 12
73101: PPUSH
73102: LD_VAR 0 8
73106: PPUSH
73107: LD_INT 0
73109: PPUSH
73110: CALL 75016 0 3
// end ;
73114: GO 73051
73116: POP
73117: POP
// if apemans then
73118: LD_VAR 0 3
73122: IFFALSE 73245
// for i = 1 to apemans do
73124: LD_ADDR_VAR 0 11
73128: PUSH
73129: DOUBLE
73130: LD_INT 1
73132: DEC
73133: ST_TO_ADDR
73134: LD_VAR 0 3
73138: PUSH
73139: FOR_TO
73140: IFFALSE 73243
// begin hc_class = class_apeman ;
73142: LD_ADDR_OWVAR 28
73146: PUSH
73147: LD_INT 12
73149: ST_TO_ADDR
// hc_gallery =  ;
73150: LD_ADDR_OWVAR 33
73154: PUSH
73155: LD_STRING 
73157: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73158: LD_ADDR_OWVAR 35
73162: PUSH
73163: LD_INT 2
73165: NEG
73166: PPUSH
73167: LD_INT 2
73169: PPUSH
73170: CALL_OW 12
73174: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73175: LD_ADDR_OWVAR 31
73179: PUSH
73180: LD_INT 1
73182: PPUSH
73183: LD_INT 3
73185: PPUSH
73186: CALL_OW 12
73190: PUSH
73191: LD_INT 1
73193: PPUSH
73194: LD_INT 3
73196: PPUSH
73197: CALL_OW 12
73201: PUSH
73202: LD_INT 0
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: ST_TO_ADDR
// animal := CreateHuman ;
73214: LD_ADDR_VAR 0 12
73218: PUSH
73219: CALL_OW 44
73223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73224: LD_VAR 0 12
73228: PPUSH
73229: LD_VAR 0 8
73233: PPUSH
73234: LD_INT 0
73236: PPUSH
73237: CALL 75016 0 3
// end ;
73241: GO 73139
73243: POP
73244: POP
// if enchidnas then
73245: LD_VAR 0 4
73249: IFFALSE 73316
// for i = 1 to enchidnas do
73251: LD_ADDR_VAR 0 11
73255: PUSH
73256: DOUBLE
73257: LD_INT 1
73259: DEC
73260: ST_TO_ADDR
73261: LD_VAR 0 4
73265: PUSH
73266: FOR_TO
73267: IFFALSE 73314
// begin hc_class = 13 ;
73269: LD_ADDR_OWVAR 28
73273: PUSH
73274: LD_INT 13
73276: ST_TO_ADDR
// hc_gallery =  ;
73277: LD_ADDR_OWVAR 33
73281: PUSH
73282: LD_STRING 
73284: ST_TO_ADDR
// animal := CreateHuman ;
73285: LD_ADDR_VAR 0 12
73289: PUSH
73290: CALL_OW 44
73294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73295: LD_VAR 0 12
73299: PPUSH
73300: LD_VAR 0 8
73304: PPUSH
73305: LD_INT 0
73307: PPUSH
73308: CALL 75016 0 3
// end ;
73312: GO 73266
73314: POP
73315: POP
// if fishes then
73316: LD_VAR 0 7
73320: IFFALSE 73387
// for i = 1 to fishes do
73322: LD_ADDR_VAR 0 11
73326: PUSH
73327: DOUBLE
73328: LD_INT 1
73330: DEC
73331: ST_TO_ADDR
73332: LD_VAR 0 7
73336: PUSH
73337: FOR_TO
73338: IFFALSE 73385
// begin hc_class = 20 ;
73340: LD_ADDR_OWVAR 28
73344: PUSH
73345: LD_INT 20
73347: ST_TO_ADDR
// hc_gallery =  ;
73348: LD_ADDR_OWVAR 33
73352: PUSH
73353: LD_STRING 
73355: ST_TO_ADDR
// animal := CreateHuman ;
73356: LD_ADDR_VAR 0 12
73360: PUSH
73361: CALL_OW 44
73365: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73366: LD_VAR 0 12
73370: PPUSH
73371: LD_VAR 0 9
73375: PPUSH
73376: LD_INT 0
73378: PPUSH
73379: CALL 75016 0 3
// end ;
73383: GO 73337
73385: POP
73386: POP
// end ;
73387: LD_VAR 0 10
73391: RET
// export function WantHeal ( sci , unit ) ; begin
73392: LD_INT 0
73394: PPUSH
// if GetTaskList ( sci ) > 0 then
73395: LD_VAR 0 1
73399: PPUSH
73400: CALL_OW 437
73404: PUSH
73405: LD_INT 0
73407: GREATER
73408: IFFALSE 73478
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73410: LD_VAR 0 1
73414: PPUSH
73415: CALL_OW 437
73419: PUSH
73420: LD_INT 1
73422: ARRAY
73423: PUSH
73424: LD_INT 1
73426: ARRAY
73427: PUSH
73428: LD_STRING l
73430: EQUAL
73431: PUSH
73432: LD_VAR 0 1
73436: PPUSH
73437: CALL_OW 437
73441: PUSH
73442: LD_INT 1
73444: ARRAY
73445: PUSH
73446: LD_INT 4
73448: ARRAY
73449: PUSH
73450: LD_VAR 0 2
73454: EQUAL
73455: AND
73456: IFFALSE 73468
// result := true else
73458: LD_ADDR_VAR 0 3
73462: PUSH
73463: LD_INT 1
73465: ST_TO_ADDR
73466: GO 73476
// result := false ;
73468: LD_ADDR_VAR 0 3
73472: PUSH
73473: LD_INT 0
73475: ST_TO_ADDR
// end else
73476: GO 73486
// result := false ;
73478: LD_ADDR_VAR 0 3
73482: PUSH
73483: LD_INT 0
73485: ST_TO_ADDR
// end ;
73486: LD_VAR 0 3
73490: RET
// export function HealTarget ( sci ) ; begin
73491: LD_INT 0
73493: PPUSH
// if not sci then
73494: LD_VAR 0 1
73498: NOT
73499: IFFALSE 73503
// exit ;
73501: GO 73568
// result := 0 ;
73503: LD_ADDR_VAR 0 2
73507: PUSH
73508: LD_INT 0
73510: ST_TO_ADDR
// if GetTaskList ( sci ) then
73511: LD_VAR 0 1
73515: PPUSH
73516: CALL_OW 437
73520: IFFALSE 73568
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73522: LD_VAR 0 1
73526: PPUSH
73527: CALL_OW 437
73531: PUSH
73532: LD_INT 1
73534: ARRAY
73535: PUSH
73536: LD_INT 1
73538: ARRAY
73539: PUSH
73540: LD_STRING l
73542: EQUAL
73543: IFFALSE 73568
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73545: LD_ADDR_VAR 0 2
73549: PUSH
73550: LD_VAR 0 1
73554: PPUSH
73555: CALL_OW 437
73559: PUSH
73560: LD_INT 1
73562: ARRAY
73563: PUSH
73564: LD_INT 4
73566: ARRAY
73567: ST_TO_ADDR
// end ;
73568: LD_VAR 0 2
73572: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73573: LD_INT 0
73575: PPUSH
73576: PPUSH
73577: PPUSH
73578: PPUSH
// if not base_units then
73579: LD_VAR 0 1
73583: NOT
73584: IFFALSE 73588
// exit ;
73586: GO 73675
// result := false ;
73588: LD_ADDR_VAR 0 2
73592: PUSH
73593: LD_INT 0
73595: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73596: LD_ADDR_VAR 0 5
73600: PUSH
73601: LD_VAR 0 1
73605: PPUSH
73606: LD_INT 21
73608: PUSH
73609: LD_INT 3
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PPUSH
73616: CALL_OW 72
73620: ST_TO_ADDR
// if not tmp then
73621: LD_VAR 0 5
73625: NOT
73626: IFFALSE 73630
// exit ;
73628: GO 73675
// for i in tmp do
73630: LD_ADDR_VAR 0 3
73634: PUSH
73635: LD_VAR 0 5
73639: PUSH
73640: FOR_IN
73641: IFFALSE 73673
// begin result := EnemyInRange ( i , 22 ) ;
73643: LD_ADDR_VAR 0 2
73647: PUSH
73648: LD_VAR 0 3
73652: PPUSH
73653: LD_INT 22
73655: PPUSH
73656: CALL 71262 0 2
73660: ST_TO_ADDR
// if result then
73661: LD_VAR 0 2
73665: IFFALSE 73671
// exit ;
73667: POP
73668: POP
73669: GO 73675
// end ;
73671: GO 73640
73673: POP
73674: POP
// end ;
73675: LD_VAR 0 2
73679: RET
// export function FilterByTag ( units , tag ) ; begin
73680: LD_INT 0
73682: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73683: LD_ADDR_VAR 0 3
73687: PUSH
73688: LD_VAR 0 1
73692: PPUSH
73693: LD_INT 120
73695: PUSH
73696: LD_VAR 0 2
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PPUSH
73705: CALL_OW 72
73709: ST_TO_ADDR
// end ;
73710: LD_VAR 0 3
73714: RET
// export function IsDriver ( un ) ; begin
73715: LD_INT 0
73717: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73718: LD_ADDR_VAR 0 2
73722: PUSH
73723: LD_VAR 0 1
73727: PUSH
73728: LD_INT 55
73730: PUSH
73731: EMPTY
73732: LIST
73733: PPUSH
73734: CALL_OW 69
73738: IN
73739: ST_TO_ADDR
// end ;
73740: LD_VAR 0 2
73744: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73745: LD_INT 0
73747: PPUSH
73748: PPUSH
// list := [ ] ;
73749: LD_ADDR_VAR 0 5
73753: PUSH
73754: EMPTY
73755: ST_TO_ADDR
// case d of 0 :
73756: LD_VAR 0 3
73760: PUSH
73761: LD_INT 0
73763: DOUBLE
73764: EQUAL
73765: IFTRUE 73769
73767: GO 73902
73769: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73770: LD_ADDR_VAR 0 5
73774: PUSH
73775: LD_VAR 0 1
73779: PUSH
73780: LD_INT 4
73782: MINUS
73783: PUSH
73784: LD_VAR 0 2
73788: PUSH
73789: LD_INT 4
73791: MINUS
73792: PUSH
73793: LD_INT 2
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: LIST
73800: PUSH
73801: LD_VAR 0 1
73805: PUSH
73806: LD_INT 3
73808: MINUS
73809: PUSH
73810: LD_VAR 0 2
73814: PUSH
73815: LD_INT 1
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: LIST
73822: PUSH
73823: LD_VAR 0 1
73827: PUSH
73828: LD_INT 4
73830: PLUS
73831: PUSH
73832: LD_VAR 0 2
73836: PUSH
73837: LD_INT 4
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: LIST
73844: PUSH
73845: LD_VAR 0 1
73849: PUSH
73850: LD_INT 3
73852: PLUS
73853: PUSH
73854: LD_VAR 0 2
73858: PUSH
73859: LD_INT 3
73861: PLUS
73862: PUSH
73863: LD_INT 5
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: LIST
73870: PUSH
73871: LD_VAR 0 1
73875: PUSH
73876: LD_VAR 0 2
73880: PUSH
73881: LD_INT 4
73883: PLUS
73884: PUSH
73885: LD_INT 0
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: LIST
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: ST_TO_ADDR
// end ; 1 :
73900: GO 74600
73902: LD_INT 1
73904: DOUBLE
73905: EQUAL
73906: IFTRUE 73910
73908: GO 74043
73910: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73911: LD_ADDR_VAR 0 5
73915: PUSH
73916: LD_VAR 0 1
73920: PUSH
73921: LD_VAR 0 2
73925: PUSH
73926: LD_INT 4
73928: MINUS
73929: PUSH
73930: LD_INT 3
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: LIST
73937: PUSH
73938: LD_VAR 0 1
73942: PUSH
73943: LD_INT 3
73945: MINUS
73946: PUSH
73947: LD_VAR 0 2
73951: PUSH
73952: LD_INT 3
73954: MINUS
73955: PUSH
73956: LD_INT 2
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: LIST
73963: PUSH
73964: LD_VAR 0 1
73968: PUSH
73969: LD_INT 4
73971: MINUS
73972: PUSH
73973: LD_VAR 0 2
73977: PUSH
73978: LD_INT 1
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: LIST
73985: PUSH
73986: LD_VAR 0 1
73990: PUSH
73991: LD_VAR 0 2
73995: PUSH
73996: LD_INT 3
73998: PLUS
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: LIST
74007: PUSH
74008: LD_VAR 0 1
74012: PUSH
74013: LD_INT 4
74015: PLUS
74016: PUSH
74017: LD_VAR 0 2
74021: PUSH
74022: LD_INT 4
74024: PLUS
74025: PUSH
74026: LD_INT 5
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: LIST
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: ST_TO_ADDR
// end ; 2 :
74041: GO 74600
74043: LD_INT 2
74045: DOUBLE
74046: EQUAL
74047: IFTRUE 74051
74049: GO 74180
74051: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74052: LD_ADDR_VAR 0 5
74056: PUSH
74057: LD_VAR 0 1
74061: PUSH
74062: LD_VAR 0 2
74066: PUSH
74067: LD_INT 3
74069: MINUS
74070: PUSH
74071: LD_INT 3
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: PUSH
74079: LD_VAR 0 1
74083: PUSH
74084: LD_INT 4
74086: PLUS
74087: PUSH
74088: LD_VAR 0 2
74092: PUSH
74093: LD_INT 4
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: LIST
74100: PUSH
74101: LD_VAR 0 1
74105: PUSH
74106: LD_VAR 0 2
74110: PUSH
74111: LD_INT 4
74113: PLUS
74114: PUSH
74115: LD_INT 0
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: LIST
74122: PUSH
74123: LD_VAR 0 1
74127: PUSH
74128: LD_INT 3
74130: MINUS
74131: PUSH
74132: LD_VAR 0 2
74136: PUSH
74137: LD_INT 1
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: LIST
74144: PUSH
74145: LD_VAR 0 1
74149: PUSH
74150: LD_INT 4
74152: MINUS
74153: PUSH
74154: LD_VAR 0 2
74158: PUSH
74159: LD_INT 4
74161: MINUS
74162: PUSH
74163: LD_INT 2
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: LIST
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: ST_TO_ADDR
// end ; 3 :
74178: GO 74600
74180: LD_INT 3
74182: DOUBLE
74183: EQUAL
74184: IFTRUE 74188
74186: GO 74321
74188: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74189: LD_ADDR_VAR 0 5
74193: PUSH
74194: LD_VAR 0 1
74198: PUSH
74199: LD_INT 3
74201: PLUS
74202: PUSH
74203: LD_VAR 0 2
74207: PUSH
74208: LD_INT 4
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: LIST
74215: PUSH
74216: LD_VAR 0 1
74220: PUSH
74221: LD_INT 4
74223: PLUS
74224: PUSH
74225: LD_VAR 0 2
74229: PUSH
74230: LD_INT 4
74232: PLUS
74233: PUSH
74234: LD_INT 5
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: LIST
74241: PUSH
74242: LD_VAR 0 1
74246: PUSH
74247: LD_INT 4
74249: MINUS
74250: PUSH
74251: LD_VAR 0 2
74255: PUSH
74256: LD_INT 1
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: LIST
74263: PUSH
74264: LD_VAR 0 1
74268: PUSH
74269: LD_VAR 0 2
74273: PUSH
74274: LD_INT 4
74276: MINUS
74277: PUSH
74278: LD_INT 3
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: LIST
74285: PUSH
74286: LD_VAR 0 1
74290: PUSH
74291: LD_INT 3
74293: MINUS
74294: PUSH
74295: LD_VAR 0 2
74299: PUSH
74300: LD_INT 3
74302: MINUS
74303: PUSH
74304: LD_INT 2
74306: PUSH
74307: EMPTY
74308: LIST
74309: LIST
74310: LIST
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: ST_TO_ADDR
// end ; 4 :
74319: GO 74600
74321: LD_INT 4
74323: DOUBLE
74324: EQUAL
74325: IFTRUE 74329
74327: GO 74462
74329: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74330: LD_ADDR_VAR 0 5
74334: PUSH
74335: LD_VAR 0 1
74339: PUSH
74340: LD_VAR 0 2
74344: PUSH
74345: LD_INT 4
74347: PLUS
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: PUSH
74357: LD_VAR 0 1
74361: PUSH
74362: LD_INT 3
74364: PLUS
74365: PUSH
74366: LD_VAR 0 2
74370: PUSH
74371: LD_INT 3
74373: PLUS
74374: PUSH
74375: LD_INT 5
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: LIST
74382: PUSH
74383: LD_VAR 0 1
74387: PUSH
74388: LD_INT 4
74390: PLUS
74391: PUSH
74392: LD_VAR 0 2
74396: PUSH
74397: LD_INT 4
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: LIST
74404: PUSH
74405: LD_VAR 0 1
74409: PUSH
74410: LD_VAR 0 2
74414: PUSH
74415: LD_INT 3
74417: MINUS
74418: PUSH
74419: LD_INT 3
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: LIST
74426: PUSH
74427: LD_VAR 0 1
74431: PUSH
74432: LD_INT 4
74434: MINUS
74435: PUSH
74436: LD_VAR 0 2
74440: PUSH
74441: LD_INT 4
74443: MINUS
74444: PUSH
74445: LD_INT 2
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: LIST
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: LIST
74457: LIST
74458: LIST
74459: ST_TO_ADDR
// end ; 5 :
74460: GO 74600
74462: LD_INT 5
74464: DOUBLE
74465: EQUAL
74466: IFTRUE 74470
74468: GO 74599
74470: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74471: LD_ADDR_VAR 0 5
74475: PUSH
74476: LD_VAR 0 1
74480: PUSH
74481: LD_INT 4
74483: MINUS
74484: PUSH
74485: LD_VAR 0 2
74489: PUSH
74490: LD_INT 1
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: LIST
74497: PUSH
74498: LD_VAR 0 1
74502: PUSH
74503: LD_VAR 0 2
74507: PUSH
74508: LD_INT 4
74510: MINUS
74511: PUSH
74512: LD_INT 3
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: LIST
74519: PUSH
74520: LD_VAR 0 1
74524: PUSH
74525: LD_INT 4
74527: PLUS
74528: PUSH
74529: LD_VAR 0 2
74533: PUSH
74534: LD_INT 4
74536: PLUS
74537: PUSH
74538: LD_INT 5
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: LIST
74545: PUSH
74546: LD_VAR 0 1
74550: PUSH
74551: LD_INT 3
74553: PLUS
74554: PUSH
74555: LD_VAR 0 2
74559: PUSH
74560: LD_INT 4
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: LIST
74567: PUSH
74568: LD_VAR 0 1
74572: PUSH
74573: LD_VAR 0 2
74577: PUSH
74578: LD_INT 3
74580: PLUS
74581: PUSH
74582: LD_INT 0
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: LIST
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: LIST
74594: LIST
74595: LIST
74596: ST_TO_ADDR
// end ; end ;
74597: GO 74600
74599: POP
// result := list ;
74600: LD_ADDR_VAR 0 4
74604: PUSH
74605: LD_VAR 0 5
74609: ST_TO_ADDR
// end ;
74610: LD_VAR 0 4
74614: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74615: LD_INT 0
74617: PPUSH
74618: PPUSH
74619: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74620: LD_VAR 0 1
74624: NOT
74625: PUSH
74626: LD_VAR 0 2
74630: PUSH
74631: LD_INT 1
74633: PUSH
74634: LD_INT 2
74636: PUSH
74637: LD_INT 3
74639: PUSH
74640: LD_INT 4
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: LIST
74647: LIST
74648: IN
74649: NOT
74650: OR
74651: IFFALSE 74655
// exit ;
74653: GO 74738
// tmp := [ ] ;
74655: LD_ADDR_VAR 0 5
74659: PUSH
74660: EMPTY
74661: ST_TO_ADDR
// for i in units do
74662: LD_ADDR_VAR 0 4
74666: PUSH
74667: LD_VAR 0 1
74671: PUSH
74672: FOR_IN
74673: IFFALSE 74707
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74675: LD_ADDR_VAR 0 5
74679: PUSH
74680: LD_VAR 0 5
74684: PPUSH
74685: LD_VAR 0 4
74689: PPUSH
74690: LD_VAR 0 2
74694: PPUSH
74695: CALL_OW 259
74699: PPUSH
74700: CALL 76111 0 2
74704: ST_TO_ADDR
74705: GO 74672
74707: POP
74708: POP
// if not tmp then
74709: LD_VAR 0 5
74713: NOT
74714: IFFALSE 74718
// exit ;
74716: GO 74738
// result := SortListByListDesc ( units , tmp ) ;
74718: LD_ADDR_VAR 0 3
74722: PUSH
74723: LD_VAR 0 1
74727: PPUSH
74728: LD_VAR 0 5
74732: PPUSH
74733: CALL_OW 77
74737: ST_TO_ADDR
// end ;
74738: LD_VAR 0 3
74742: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74743: LD_INT 0
74745: PPUSH
74746: PPUSH
74747: PPUSH
// result := false ;
74748: LD_ADDR_VAR 0 3
74752: PUSH
74753: LD_INT 0
74755: ST_TO_ADDR
// if not building then
74756: LD_VAR 0 2
74760: NOT
74761: IFFALSE 74765
// exit ;
74763: GO 74903
// x := GetX ( building ) ;
74765: LD_ADDR_VAR 0 4
74769: PUSH
74770: LD_VAR 0 2
74774: PPUSH
74775: CALL_OW 250
74779: ST_TO_ADDR
// y := GetY ( building ) ;
74780: LD_ADDR_VAR 0 5
74784: PUSH
74785: LD_VAR 0 2
74789: PPUSH
74790: CALL_OW 251
74794: ST_TO_ADDR
// if not x or not y then
74795: LD_VAR 0 4
74799: NOT
74800: PUSH
74801: LD_VAR 0 5
74805: NOT
74806: OR
74807: IFFALSE 74811
// exit ;
74809: GO 74903
// if GetTaskList ( unit ) then
74811: LD_VAR 0 1
74815: PPUSH
74816: CALL_OW 437
74820: IFFALSE 74903
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74822: LD_STRING e
74824: PUSH
74825: LD_VAR 0 1
74829: PPUSH
74830: CALL_OW 437
74834: PUSH
74835: LD_INT 1
74837: ARRAY
74838: PUSH
74839: LD_INT 1
74841: ARRAY
74842: EQUAL
74843: PUSH
74844: LD_VAR 0 4
74848: PUSH
74849: LD_VAR 0 1
74853: PPUSH
74854: CALL_OW 437
74858: PUSH
74859: LD_INT 1
74861: ARRAY
74862: PUSH
74863: LD_INT 2
74865: ARRAY
74866: EQUAL
74867: AND
74868: PUSH
74869: LD_VAR 0 5
74873: PUSH
74874: LD_VAR 0 1
74878: PPUSH
74879: CALL_OW 437
74883: PUSH
74884: LD_INT 1
74886: ARRAY
74887: PUSH
74888: LD_INT 3
74890: ARRAY
74891: EQUAL
74892: AND
74893: IFFALSE 74903
// result := true end ;
74895: LD_ADDR_VAR 0 3
74899: PUSH
74900: LD_INT 1
74902: ST_TO_ADDR
// end ;
74903: LD_VAR 0 3
74907: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74908: LD_INT 0
74910: PPUSH
// result := false ;
74911: LD_ADDR_VAR 0 4
74915: PUSH
74916: LD_INT 0
74918: ST_TO_ADDR
// if GetTaskList ( unit ) then
74919: LD_VAR 0 1
74923: PPUSH
74924: CALL_OW 437
74928: IFFALSE 75011
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74930: LD_STRING M
74932: PUSH
74933: LD_VAR 0 1
74937: PPUSH
74938: CALL_OW 437
74942: PUSH
74943: LD_INT 1
74945: ARRAY
74946: PUSH
74947: LD_INT 1
74949: ARRAY
74950: EQUAL
74951: PUSH
74952: LD_VAR 0 2
74956: PUSH
74957: LD_VAR 0 1
74961: PPUSH
74962: CALL_OW 437
74966: PUSH
74967: LD_INT 1
74969: ARRAY
74970: PUSH
74971: LD_INT 2
74973: ARRAY
74974: EQUAL
74975: AND
74976: PUSH
74977: LD_VAR 0 3
74981: PUSH
74982: LD_VAR 0 1
74986: PPUSH
74987: CALL_OW 437
74991: PUSH
74992: LD_INT 1
74994: ARRAY
74995: PUSH
74996: LD_INT 3
74998: ARRAY
74999: EQUAL
75000: AND
75001: IFFALSE 75011
// result := true ;
75003: LD_ADDR_VAR 0 4
75007: PUSH
75008: LD_INT 1
75010: ST_TO_ADDR
// end ; end ;
75011: LD_VAR 0 4
75015: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75016: LD_INT 0
75018: PPUSH
75019: PPUSH
75020: PPUSH
75021: PPUSH
// if not unit or not area then
75022: LD_VAR 0 1
75026: NOT
75027: PUSH
75028: LD_VAR 0 2
75032: NOT
75033: OR
75034: IFFALSE 75038
// exit ;
75036: GO 75214
// tmp := AreaToList ( area , i ) ;
75038: LD_ADDR_VAR 0 6
75042: PUSH
75043: LD_VAR 0 2
75047: PPUSH
75048: LD_VAR 0 5
75052: PPUSH
75053: CALL_OW 517
75057: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75058: LD_ADDR_VAR 0 5
75062: PUSH
75063: DOUBLE
75064: LD_INT 1
75066: DEC
75067: ST_TO_ADDR
75068: LD_VAR 0 6
75072: PUSH
75073: LD_INT 1
75075: ARRAY
75076: PUSH
75077: FOR_TO
75078: IFFALSE 75212
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75080: LD_ADDR_VAR 0 7
75084: PUSH
75085: LD_VAR 0 6
75089: PUSH
75090: LD_INT 1
75092: ARRAY
75093: PUSH
75094: LD_VAR 0 5
75098: ARRAY
75099: PUSH
75100: LD_VAR 0 6
75104: PUSH
75105: LD_INT 2
75107: ARRAY
75108: PUSH
75109: LD_VAR 0 5
75113: ARRAY
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75119: LD_INT 92
75121: PUSH
75122: LD_VAR 0 7
75126: PUSH
75127: LD_INT 1
75129: ARRAY
75130: PUSH
75131: LD_VAR 0 7
75135: PUSH
75136: LD_INT 2
75138: ARRAY
75139: PUSH
75140: LD_INT 2
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: PPUSH
75149: CALL_OW 69
75153: PUSH
75154: LD_INT 0
75156: EQUAL
75157: IFFALSE 75210
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75159: LD_VAR 0 1
75163: PPUSH
75164: LD_VAR 0 7
75168: PUSH
75169: LD_INT 1
75171: ARRAY
75172: PPUSH
75173: LD_VAR 0 7
75177: PUSH
75178: LD_INT 2
75180: ARRAY
75181: PPUSH
75182: LD_VAR 0 3
75186: PPUSH
75187: CALL_OW 48
// result := IsPlaced ( unit ) ;
75191: LD_ADDR_VAR 0 4
75195: PUSH
75196: LD_VAR 0 1
75200: PPUSH
75201: CALL_OW 305
75205: ST_TO_ADDR
// exit ;
75206: POP
75207: POP
75208: GO 75214
// end ; end ;
75210: GO 75077
75212: POP
75213: POP
// end ;
75214: LD_VAR 0 4
75218: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75219: LD_INT 0
75221: PPUSH
75222: PPUSH
75223: PPUSH
// if not side or side > 8 then
75224: LD_VAR 0 1
75228: NOT
75229: PUSH
75230: LD_VAR 0 1
75234: PUSH
75235: LD_INT 8
75237: GREATER
75238: OR
75239: IFFALSE 75243
// exit ;
75241: GO 75430
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75243: LD_ADDR_VAR 0 4
75247: PUSH
75248: LD_INT 22
75250: PUSH
75251: LD_VAR 0 1
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 21
75262: PUSH
75263: LD_INT 3
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PPUSH
75274: CALL_OW 69
75278: ST_TO_ADDR
// if not tmp then
75279: LD_VAR 0 4
75283: NOT
75284: IFFALSE 75288
// exit ;
75286: GO 75430
// enable_addtolog := true ;
75288: LD_ADDR_OWVAR 81
75292: PUSH
75293: LD_INT 1
75295: ST_TO_ADDR
// AddToLog ( [ ) ;
75296: LD_STRING [
75298: PPUSH
75299: CALL_OW 561
// for i in tmp do
75303: LD_ADDR_VAR 0 3
75307: PUSH
75308: LD_VAR 0 4
75312: PUSH
75313: FOR_IN
75314: IFFALSE 75421
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75316: LD_STRING [
75318: PUSH
75319: LD_VAR 0 3
75323: PPUSH
75324: CALL_OW 266
75328: STR
75329: PUSH
75330: LD_STRING , 
75332: STR
75333: PUSH
75334: LD_VAR 0 3
75338: PPUSH
75339: CALL_OW 250
75343: STR
75344: PUSH
75345: LD_STRING , 
75347: STR
75348: PUSH
75349: LD_VAR 0 3
75353: PPUSH
75354: CALL_OW 251
75358: STR
75359: PUSH
75360: LD_STRING , 
75362: STR
75363: PUSH
75364: LD_VAR 0 3
75368: PPUSH
75369: CALL_OW 254
75373: STR
75374: PUSH
75375: LD_STRING , 
75377: STR
75378: PUSH
75379: LD_VAR 0 3
75383: PPUSH
75384: LD_INT 1
75386: PPUSH
75387: CALL_OW 268
75391: STR
75392: PUSH
75393: LD_STRING , 
75395: STR
75396: PUSH
75397: LD_VAR 0 3
75401: PPUSH
75402: LD_INT 2
75404: PPUSH
75405: CALL_OW 268
75409: STR
75410: PUSH
75411: LD_STRING ],
75413: STR
75414: PPUSH
75415: CALL_OW 561
// end ;
75419: GO 75313
75421: POP
75422: POP
// AddToLog ( ]; ) ;
75423: LD_STRING ];
75425: PPUSH
75426: CALL_OW 561
// end ;
75430: LD_VAR 0 2
75434: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75435: LD_INT 0
75437: PPUSH
75438: PPUSH
75439: PPUSH
75440: PPUSH
75441: PPUSH
// if not area or not rate or not max then
75442: LD_VAR 0 1
75446: NOT
75447: PUSH
75448: LD_VAR 0 2
75452: NOT
75453: OR
75454: PUSH
75455: LD_VAR 0 4
75459: NOT
75460: OR
75461: IFFALSE 75465
// exit ;
75463: GO 75654
// while 1 do
75465: LD_INT 1
75467: IFFALSE 75654
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75469: LD_ADDR_VAR 0 9
75473: PUSH
75474: LD_VAR 0 1
75478: PPUSH
75479: LD_INT 1
75481: PPUSH
75482: CALL_OW 287
75486: PUSH
75487: LD_INT 10
75489: MUL
75490: ST_TO_ADDR
// r := rate / 10 ;
75491: LD_ADDR_VAR 0 7
75495: PUSH
75496: LD_VAR 0 2
75500: PUSH
75501: LD_INT 10
75503: DIVREAL
75504: ST_TO_ADDR
// time := 1 1$00 ;
75505: LD_ADDR_VAR 0 8
75509: PUSH
75510: LD_INT 2100
75512: ST_TO_ADDR
// if amount < min then
75513: LD_VAR 0 9
75517: PUSH
75518: LD_VAR 0 3
75522: LESS
75523: IFFALSE 75541
// r := r * 2 else
75525: LD_ADDR_VAR 0 7
75529: PUSH
75530: LD_VAR 0 7
75534: PUSH
75535: LD_INT 2
75537: MUL
75538: ST_TO_ADDR
75539: GO 75567
// if amount > max then
75541: LD_VAR 0 9
75545: PUSH
75546: LD_VAR 0 4
75550: GREATER
75551: IFFALSE 75567
// r := r / 2 ;
75553: LD_ADDR_VAR 0 7
75557: PUSH
75558: LD_VAR 0 7
75562: PUSH
75563: LD_INT 2
75565: DIVREAL
75566: ST_TO_ADDR
// time := time / r ;
75567: LD_ADDR_VAR 0 8
75571: PUSH
75572: LD_VAR 0 8
75576: PUSH
75577: LD_VAR 0 7
75581: DIVREAL
75582: ST_TO_ADDR
// if time < 0 then
75583: LD_VAR 0 8
75587: PUSH
75588: LD_INT 0
75590: LESS
75591: IFFALSE 75608
// time := time * - 1 ;
75593: LD_ADDR_VAR 0 8
75597: PUSH
75598: LD_VAR 0 8
75602: PUSH
75603: LD_INT 1
75605: NEG
75606: MUL
75607: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75608: LD_VAR 0 8
75612: PUSH
75613: LD_INT 35
75615: PPUSH
75616: LD_INT 875
75618: PPUSH
75619: CALL_OW 12
75623: PLUS
75624: PPUSH
75625: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75629: LD_INT 1
75631: PPUSH
75632: LD_INT 5
75634: PPUSH
75635: CALL_OW 12
75639: PPUSH
75640: LD_VAR 0 1
75644: PPUSH
75645: LD_INT 1
75647: PPUSH
75648: CALL_OW 55
// end ;
75652: GO 75465
// end ;
75654: LD_VAR 0 5
75658: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75659: LD_INT 0
75661: PPUSH
75662: PPUSH
75663: PPUSH
75664: PPUSH
75665: PPUSH
75666: PPUSH
75667: PPUSH
75668: PPUSH
// if not turrets or not factories then
75669: LD_VAR 0 1
75673: NOT
75674: PUSH
75675: LD_VAR 0 2
75679: NOT
75680: OR
75681: IFFALSE 75685
// exit ;
75683: GO 75992
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75685: LD_ADDR_VAR 0 10
75689: PUSH
75690: LD_INT 5
75692: PUSH
75693: LD_INT 6
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 2
75702: PUSH
75703: LD_INT 4
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: PUSH
75710: LD_INT 3
75712: PUSH
75713: LD_INT 5
75715: PUSH
75716: EMPTY
75717: LIST
75718: LIST
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: LIST
75724: PUSH
75725: LD_INT 24
75727: PUSH
75728: LD_INT 25
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PUSH
75735: LD_INT 23
75737: PUSH
75738: LD_INT 27
75740: PUSH
75741: EMPTY
75742: LIST
75743: LIST
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 42
75751: PUSH
75752: LD_INT 43
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 44
75761: PUSH
75762: LD_INT 46
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: PUSH
75769: LD_INT 45
75771: PUSH
75772: LD_INT 47
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: LIST
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: LIST
75788: ST_TO_ADDR
// result := [ ] ;
75789: LD_ADDR_VAR 0 3
75793: PUSH
75794: EMPTY
75795: ST_TO_ADDR
// for i in turrets do
75796: LD_ADDR_VAR 0 4
75800: PUSH
75801: LD_VAR 0 1
75805: PUSH
75806: FOR_IN
75807: IFFALSE 75990
// begin nat := GetNation ( i ) ;
75809: LD_ADDR_VAR 0 7
75813: PUSH
75814: LD_VAR 0 4
75818: PPUSH
75819: CALL_OW 248
75823: ST_TO_ADDR
// weapon := 0 ;
75824: LD_ADDR_VAR 0 8
75828: PUSH
75829: LD_INT 0
75831: ST_TO_ADDR
// if not nat then
75832: LD_VAR 0 7
75836: NOT
75837: IFFALSE 75841
// continue ;
75839: GO 75806
// for j in list [ nat ] do
75841: LD_ADDR_VAR 0 5
75845: PUSH
75846: LD_VAR 0 10
75850: PUSH
75851: LD_VAR 0 7
75855: ARRAY
75856: PUSH
75857: FOR_IN
75858: IFFALSE 75899
// if GetBWeapon ( i ) = j [ 1 ] then
75860: LD_VAR 0 4
75864: PPUSH
75865: CALL_OW 269
75869: PUSH
75870: LD_VAR 0 5
75874: PUSH
75875: LD_INT 1
75877: ARRAY
75878: EQUAL
75879: IFFALSE 75897
// begin weapon := j [ 2 ] ;
75881: LD_ADDR_VAR 0 8
75885: PUSH
75886: LD_VAR 0 5
75890: PUSH
75891: LD_INT 2
75893: ARRAY
75894: ST_TO_ADDR
// break ;
75895: GO 75899
// end ;
75897: GO 75857
75899: POP
75900: POP
// if not weapon then
75901: LD_VAR 0 8
75905: NOT
75906: IFFALSE 75910
// continue ;
75908: GO 75806
// for k in factories do
75910: LD_ADDR_VAR 0 6
75914: PUSH
75915: LD_VAR 0 2
75919: PUSH
75920: FOR_IN
75921: IFFALSE 75986
// begin weapons := AvailableWeaponList ( k ) ;
75923: LD_ADDR_VAR 0 9
75927: PUSH
75928: LD_VAR 0 6
75932: PPUSH
75933: CALL_OW 478
75937: ST_TO_ADDR
// if not weapons then
75938: LD_VAR 0 9
75942: NOT
75943: IFFALSE 75947
// continue ;
75945: GO 75920
// if weapon in weapons then
75947: LD_VAR 0 8
75951: PUSH
75952: LD_VAR 0 9
75956: IN
75957: IFFALSE 75984
// begin result := [ i , weapon ] ;
75959: LD_ADDR_VAR 0 3
75963: PUSH
75964: LD_VAR 0 4
75968: PUSH
75969: LD_VAR 0 8
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: ST_TO_ADDR
// exit ;
75978: POP
75979: POP
75980: POP
75981: POP
75982: GO 75992
// end ; end ;
75984: GO 75920
75986: POP
75987: POP
// end ;
75988: GO 75806
75990: POP
75991: POP
// end ;
75992: LD_VAR 0 3
75996: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75997: LD_INT 0
75999: PPUSH
// if not side or side > 8 then
76000: LD_VAR 0 3
76004: NOT
76005: PUSH
76006: LD_VAR 0 3
76010: PUSH
76011: LD_INT 8
76013: GREATER
76014: OR
76015: IFFALSE 76019
// exit ;
76017: GO 76078
// if not range then
76019: LD_VAR 0 4
76023: NOT
76024: IFFALSE 76035
// range := - 12 ;
76026: LD_ADDR_VAR 0 4
76030: PUSH
76031: LD_INT 12
76033: NEG
76034: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76035: LD_VAR 0 1
76039: PPUSH
76040: LD_VAR 0 2
76044: PPUSH
76045: LD_VAR 0 3
76049: PPUSH
76050: LD_VAR 0 4
76054: PPUSH
76055: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76059: LD_VAR 0 1
76063: PPUSH
76064: LD_VAR 0 2
76068: PPUSH
76069: LD_VAR 0 3
76073: PPUSH
76074: CALL_OW 331
// end ;
76078: LD_VAR 0 5
76082: RET
// export function Video ( mode ) ; begin
76083: LD_INT 0
76085: PPUSH
// ingame_video = mode ;
76086: LD_ADDR_OWVAR 52
76090: PUSH
76091: LD_VAR 0 1
76095: ST_TO_ADDR
// interface_hidden = mode ;
76096: LD_ADDR_OWVAR 54
76100: PUSH
76101: LD_VAR 0 1
76105: ST_TO_ADDR
// end ;
76106: LD_VAR 0 2
76110: RET
// export function Join ( array , element ) ; begin
76111: LD_INT 0
76113: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76114: LD_ADDR_VAR 0 3
76118: PUSH
76119: LD_VAR 0 1
76123: PPUSH
76124: LD_VAR 0 1
76128: PUSH
76129: LD_INT 1
76131: PLUS
76132: PPUSH
76133: LD_VAR 0 2
76137: PPUSH
76138: CALL_OW 1
76142: ST_TO_ADDR
// end ;
76143: LD_VAR 0 3
76147: RET
// export function JoinUnion ( array , element ) ; begin
76148: LD_INT 0
76150: PPUSH
// result := array union element ;
76151: LD_ADDR_VAR 0 3
76155: PUSH
76156: LD_VAR 0 1
76160: PUSH
76161: LD_VAR 0 2
76165: UNION
76166: ST_TO_ADDR
// end ;
76167: LD_VAR 0 3
76171: RET
// export function GetBehemoths ( side ) ; begin
76172: LD_INT 0
76174: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76175: LD_ADDR_VAR 0 2
76179: PUSH
76180: LD_INT 22
76182: PUSH
76183: LD_VAR 0 1
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: LD_INT 31
76194: PUSH
76195: LD_INT 25
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: PPUSH
76206: CALL_OW 69
76210: ST_TO_ADDR
// end ;
76211: LD_VAR 0 2
76215: RET
// export function Shuffle ( array ) ; var i , index ; begin
76216: LD_INT 0
76218: PPUSH
76219: PPUSH
76220: PPUSH
// result := [ ] ;
76221: LD_ADDR_VAR 0 2
76225: PUSH
76226: EMPTY
76227: ST_TO_ADDR
// if not array then
76228: LD_VAR 0 1
76232: NOT
76233: IFFALSE 76237
// exit ;
76235: GO 76336
// Randomize ;
76237: CALL_OW 10
// for i = array downto 1 do
76241: LD_ADDR_VAR 0 3
76245: PUSH
76246: DOUBLE
76247: LD_VAR 0 1
76251: INC
76252: ST_TO_ADDR
76253: LD_INT 1
76255: PUSH
76256: FOR_DOWNTO
76257: IFFALSE 76334
// begin index := rand ( 1 , array ) ;
76259: LD_ADDR_VAR 0 4
76263: PUSH
76264: LD_INT 1
76266: PPUSH
76267: LD_VAR 0 1
76271: PPUSH
76272: CALL_OW 12
76276: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76277: LD_ADDR_VAR 0 2
76281: PUSH
76282: LD_VAR 0 2
76286: PPUSH
76287: LD_VAR 0 2
76291: PUSH
76292: LD_INT 1
76294: PLUS
76295: PPUSH
76296: LD_VAR 0 1
76300: PUSH
76301: LD_VAR 0 4
76305: ARRAY
76306: PPUSH
76307: CALL_OW 2
76311: ST_TO_ADDR
// array := Delete ( array , index ) ;
76312: LD_ADDR_VAR 0 1
76316: PUSH
76317: LD_VAR 0 1
76321: PPUSH
76322: LD_VAR 0 4
76326: PPUSH
76327: CALL_OW 3
76331: ST_TO_ADDR
// end ;
76332: GO 76256
76334: POP
76335: POP
// end ;
76336: LD_VAR 0 2
76340: RET
// export function GetBaseMaterials ( base ) ; begin
76341: LD_INT 0
76343: PPUSH
// result := [ 0 , 0 , 0 ] ;
76344: LD_ADDR_VAR 0 2
76348: PUSH
76349: LD_INT 0
76351: PUSH
76352: LD_INT 0
76354: PUSH
76355: LD_INT 0
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: LIST
76362: ST_TO_ADDR
// if not base then
76363: LD_VAR 0 1
76367: NOT
76368: IFFALSE 76372
// exit ;
76370: GO 76421
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76372: LD_ADDR_VAR 0 2
76376: PUSH
76377: LD_VAR 0 1
76381: PPUSH
76382: LD_INT 1
76384: PPUSH
76385: CALL_OW 275
76389: PUSH
76390: LD_VAR 0 1
76394: PPUSH
76395: LD_INT 2
76397: PPUSH
76398: CALL_OW 275
76402: PUSH
76403: LD_VAR 0 1
76407: PPUSH
76408: LD_INT 3
76410: PPUSH
76411: CALL_OW 275
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: LIST
76420: ST_TO_ADDR
// end ;
76421: LD_VAR 0 2
76425: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76426: LD_INT 0
76428: PPUSH
76429: PPUSH
// result := array ;
76430: LD_ADDR_VAR 0 3
76434: PUSH
76435: LD_VAR 0 1
76439: ST_TO_ADDR
// if size >= result then
76440: LD_VAR 0 2
76444: PUSH
76445: LD_VAR 0 3
76449: GREATEREQUAL
76450: IFFALSE 76454
// exit ;
76452: GO 76504
// if size then
76454: LD_VAR 0 2
76458: IFFALSE 76504
// for i := array downto size do
76460: LD_ADDR_VAR 0 4
76464: PUSH
76465: DOUBLE
76466: LD_VAR 0 1
76470: INC
76471: ST_TO_ADDR
76472: LD_VAR 0 2
76476: PUSH
76477: FOR_DOWNTO
76478: IFFALSE 76502
// result := Delete ( result , result ) ;
76480: LD_ADDR_VAR 0 3
76484: PUSH
76485: LD_VAR 0 3
76489: PPUSH
76490: LD_VAR 0 3
76494: PPUSH
76495: CALL_OW 3
76499: ST_TO_ADDR
76500: GO 76477
76502: POP
76503: POP
// end ;
76504: LD_VAR 0 3
76508: RET
// export function ComExit ( unit ) ; var tmp ; begin
76509: LD_INT 0
76511: PPUSH
76512: PPUSH
// if not IsInUnit ( unit ) then
76513: LD_VAR 0 1
76517: PPUSH
76518: CALL_OW 310
76522: NOT
76523: IFFALSE 76527
// exit ;
76525: GO 76587
// tmp := IsInUnit ( unit ) ;
76527: LD_ADDR_VAR 0 3
76531: PUSH
76532: LD_VAR 0 1
76536: PPUSH
76537: CALL_OW 310
76541: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76542: LD_VAR 0 3
76546: PPUSH
76547: CALL_OW 247
76551: PUSH
76552: LD_INT 2
76554: EQUAL
76555: IFFALSE 76568
// ComExitVehicle ( unit ) else
76557: LD_VAR 0 1
76561: PPUSH
76562: CALL_OW 121
76566: GO 76577
// ComExitBuilding ( unit ) ;
76568: LD_VAR 0 1
76572: PPUSH
76573: CALL_OW 122
// result := tmp ;
76577: LD_ADDR_VAR 0 2
76581: PUSH
76582: LD_VAR 0 3
76586: ST_TO_ADDR
// end ;
76587: LD_VAR 0 2
76591: RET
// export function ComExitAll ( units ) ; var i ; begin
76592: LD_INT 0
76594: PPUSH
76595: PPUSH
// if not units then
76596: LD_VAR 0 1
76600: NOT
76601: IFFALSE 76605
// exit ;
76603: GO 76631
// for i in units do
76605: LD_ADDR_VAR 0 3
76609: PUSH
76610: LD_VAR 0 1
76614: PUSH
76615: FOR_IN
76616: IFFALSE 76629
// ComExit ( i ) ;
76618: LD_VAR 0 3
76622: PPUSH
76623: CALL 76509 0 1
76627: GO 76615
76629: POP
76630: POP
// end ;
76631: LD_VAR 0 2
76635: RET
// export function ResetHc ; begin
76636: LD_INT 0
76638: PPUSH
// InitHc ;
76639: CALL_OW 19
// hc_importance := 0 ;
76643: LD_ADDR_OWVAR 32
76647: PUSH
76648: LD_INT 0
76650: ST_TO_ADDR
// end ;
76651: LD_VAR 0 1
76655: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76656: LD_INT 0
76658: PPUSH
76659: PPUSH
76660: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76661: LD_ADDR_VAR 0 6
76665: PUSH
76666: LD_VAR 0 1
76670: PUSH
76671: LD_VAR 0 3
76675: PLUS
76676: PUSH
76677: LD_INT 2
76679: DIV
76680: ST_TO_ADDR
// if _x < 0 then
76681: LD_VAR 0 6
76685: PUSH
76686: LD_INT 0
76688: LESS
76689: IFFALSE 76706
// _x := _x * - 1 ;
76691: LD_ADDR_VAR 0 6
76695: PUSH
76696: LD_VAR 0 6
76700: PUSH
76701: LD_INT 1
76703: NEG
76704: MUL
76705: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76706: LD_ADDR_VAR 0 7
76710: PUSH
76711: LD_VAR 0 2
76715: PUSH
76716: LD_VAR 0 4
76720: PLUS
76721: PUSH
76722: LD_INT 2
76724: DIV
76725: ST_TO_ADDR
// if _y < 0 then
76726: LD_VAR 0 7
76730: PUSH
76731: LD_INT 0
76733: LESS
76734: IFFALSE 76751
// _y := _y * - 1 ;
76736: LD_ADDR_VAR 0 7
76740: PUSH
76741: LD_VAR 0 7
76745: PUSH
76746: LD_INT 1
76748: NEG
76749: MUL
76750: ST_TO_ADDR
// result := [ _x , _y ] ;
76751: LD_ADDR_VAR 0 5
76755: PUSH
76756: LD_VAR 0 6
76760: PUSH
76761: LD_VAR 0 7
76765: PUSH
76766: EMPTY
76767: LIST
76768: LIST
76769: ST_TO_ADDR
// end ;
76770: LD_VAR 0 5
76774: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76775: LD_INT 0
76777: PPUSH
76778: PPUSH
76779: PPUSH
76780: PPUSH
// task := GetTaskList ( unit ) ;
76781: LD_ADDR_VAR 0 7
76785: PUSH
76786: LD_VAR 0 1
76790: PPUSH
76791: CALL_OW 437
76795: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76796: LD_VAR 0 7
76800: NOT
76801: PUSH
76802: LD_VAR 0 1
76806: PPUSH
76807: LD_VAR 0 2
76811: PPUSH
76812: CALL_OW 308
76816: NOT
76817: AND
76818: IFFALSE 76822
// exit ;
76820: GO 76940
// if IsInArea ( unit , area ) then
76822: LD_VAR 0 1
76826: PPUSH
76827: LD_VAR 0 2
76831: PPUSH
76832: CALL_OW 308
76836: IFFALSE 76854
// begin ComMoveToArea ( unit , goAway ) ;
76838: LD_VAR 0 1
76842: PPUSH
76843: LD_VAR 0 3
76847: PPUSH
76848: CALL_OW 113
// exit ;
76852: GO 76940
// end ; if task [ 1 ] [ 1 ] <> M then
76854: LD_VAR 0 7
76858: PUSH
76859: LD_INT 1
76861: ARRAY
76862: PUSH
76863: LD_INT 1
76865: ARRAY
76866: PUSH
76867: LD_STRING M
76869: NONEQUAL
76870: IFFALSE 76874
// exit ;
76872: GO 76940
// x := task [ 1 ] [ 2 ] ;
76874: LD_ADDR_VAR 0 5
76878: PUSH
76879: LD_VAR 0 7
76883: PUSH
76884: LD_INT 1
76886: ARRAY
76887: PUSH
76888: LD_INT 2
76890: ARRAY
76891: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76892: LD_ADDR_VAR 0 6
76896: PUSH
76897: LD_VAR 0 7
76901: PUSH
76902: LD_INT 1
76904: ARRAY
76905: PUSH
76906: LD_INT 3
76908: ARRAY
76909: ST_TO_ADDR
// if InArea ( x , y , area ) then
76910: LD_VAR 0 5
76914: PPUSH
76915: LD_VAR 0 6
76919: PPUSH
76920: LD_VAR 0 2
76924: PPUSH
76925: CALL_OW 309
76929: IFFALSE 76940
// ComStop ( unit ) ;
76931: LD_VAR 0 1
76935: PPUSH
76936: CALL_OW 141
// end ;
76940: LD_VAR 0 4
76944: RET
// export function Abs ( value ) ; begin
76945: LD_INT 0
76947: PPUSH
// result := value ;
76948: LD_ADDR_VAR 0 2
76952: PUSH
76953: LD_VAR 0 1
76957: ST_TO_ADDR
// if value < 0 then
76958: LD_VAR 0 1
76962: PUSH
76963: LD_INT 0
76965: LESS
76966: IFFALSE 76983
// result := value * - 1 ;
76968: LD_ADDR_VAR 0 2
76972: PUSH
76973: LD_VAR 0 1
76977: PUSH
76978: LD_INT 1
76980: NEG
76981: MUL
76982: ST_TO_ADDR
// end ;
76983: LD_VAR 0 2
76987: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76988: LD_INT 0
76990: PPUSH
76991: PPUSH
76992: PPUSH
76993: PPUSH
76994: PPUSH
76995: PPUSH
76996: PPUSH
76997: PPUSH
// if not unit or not building then
76998: LD_VAR 0 1
77002: NOT
77003: PUSH
77004: LD_VAR 0 2
77008: NOT
77009: OR
77010: IFFALSE 77014
// exit ;
77012: GO 77240
// x := GetX ( building ) ;
77014: LD_ADDR_VAR 0 4
77018: PUSH
77019: LD_VAR 0 2
77023: PPUSH
77024: CALL_OW 250
77028: ST_TO_ADDR
// y := GetY ( building ) ;
77029: LD_ADDR_VAR 0 6
77033: PUSH
77034: LD_VAR 0 2
77038: PPUSH
77039: CALL_OW 251
77043: ST_TO_ADDR
// d := GetDir ( building ) ;
77044: LD_ADDR_VAR 0 8
77048: PUSH
77049: LD_VAR 0 2
77053: PPUSH
77054: CALL_OW 254
77058: ST_TO_ADDR
// r := 4 ;
77059: LD_ADDR_VAR 0 9
77063: PUSH
77064: LD_INT 4
77066: ST_TO_ADDR
// for i := 1 to 5 do
77067: LD_ADDR_VAR 0 10
77071: PUSH
77072: DOUBLE
77073: LD_INT 1
77075: DEC
77076: ST_TO_ADDR
77077: LD_INT 5
77079: PUSH
77080: FOR_TO
77081: IFFALSE 77238
// begin _x := ShiftX ( x , d , r + i ) ;
77083: LD_ADDR_VAR 0 5
77087: PUSH
77088: LD_VAR 0 4
77092: PPUSH
77093: LD_VAR 0 8
77097: PPUSH
77098: LD_VAR 0 9
77102: PUSH
77103: LD_VAR 0 10
77107: PLUS
77108: PPUSH
77109: CALL_OW 272
77113: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77114: LD_ADDR_VAR 0 7
77118: PUSH
77119: LD_VAR 0 6
77123: PPUSH
77124: LD_VAR 0 8
77128: PPUSH
77129: LD_VAR 0 9
77133: PUSH
77134: LD_VAR 0 10
77138: PLUS
77139: PPUSH
77140: CALL_OW 273
77144: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77145: LD_VAR 0 5
77149: PPUSH
77150: LD_VAR 0 7
77154: PPUSH
77155: CALL_OW 488
77159: PUSH
77160: LD_VAR 0 5
77164: PPUSH
77165: LD_VAR 0 7
77169: PPUSH
77170: CALL_OW 428
77174: PPUSH
77175: CALL_OW 247
77179: PUSH
77180: LD_INT 3
77182: PUSH
77183: LD_INT 2
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: IN
77190: NOT
77191: AND
77192: IFFALSE 77236
// begin ComMoveXY ( unit , _x , _y ) ;
77194: LD_VAR 0 1
77198: PPUSH
77199: LD_VAR 0 5
77203: PPUSH
77204: LD_VAR 0 7
77208: PPUSH
77209: CALL_OW 111
// result := [ _x , _y ] ;
77213: LD_ADDR_VAR 0 3
77217: PUSH
77218: LD_VAR 0 5
77222: PUSH
77223: LD_VAR 0 7
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: ST_TO_ADDR
// exit ;
77232: POP
77233: POP
77234: GO 77240
// end ; end ;
77236: GO 77080
77238: POP
77239: POP
// end ;
77240: LD_VAR 0 3
77244: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77245: LD_INT 0
77247: PPUSH
77248: PPUSH
77249: PPUSH
// result := 0 ;
77250: LD_ADDR_VAR 0 3
77254: PUSH
77255: LD_INT 0
77257: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77258: LD_VAR 0 1
77262: PUSH
77263: LD_INT 0
77265: LESS
77266: PUSH
77267: LD_VAR 0 1
77271: PUSH
77272: LD_INT 8
77274: GREATER
77275: OR
77276: PUSH
77277: LD_VAR 0 2
77281: PUSH
77282: LD_INT 0
77284: LESS
77285: OR
77286: PUSH
77287: LD_VAR 0 2
77291: PUSH
77292: LD_INT 8
77294: GREATER
77295: OR
77296: IFFALSE 77300
// exit ;
77298: GO 77375
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77300: LD_ADDR_VAR 0 4
77304: PUSH
77305: LD_INT 22
77307: PUSH
77308: LD_VAR 0 2
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PPUSH
77317: CALL_OW 69
77321: PUSH
77322: FOR_IN
77323: IFFALSE 77373
// begin un := UnitShoot ( i ) ;
77325: LD_ADDR_VAR 0 5
77329: PUSH
77330: LD_VAR 0 4
77334: PPUSH
77335: CALL_OW 504
77339: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77340: LD_VAR 0 5
77344: PPUSH
77345: CALL_OW 255
77349: PUSH
77350: LD_VAR 0 1
77354: EQUAL
77355: IFFALSE 77371
// begin result := un ;
77357: LD_ADDR_VAR 0 3
77361: PUSH
77362: LD_VAR 0 5
77366: ST_TO_ADDR
// exit ;
77367: POP
77368: POP
77369: GO 77375
// end ; end ;
77371: GO 77322
77373: POP
77374: POP
// end ;
77375: LD_VAR 0 3
77379: RET
// export function GetCargoBay ( units ) ; begin
77380: LD_INT 0
77382: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77383: LD_ADDR_VAR 0 2
77387: PUSH
77388: LD_VAR 0 1
77392: PPUSH
77393: LD_INT 2
77395: PUSH
77396: LD_INT 34
77398: PUSH
77399: LD_INT 12
77401: PUSH
77402: EMPTY
77403: LIST
77404: LIST
77405: PUSH
77406: LD_INT 34
77408: PUSH
77409: LD_INT 51
77411: PUSH
77412: EMPTY
77413: LIST
77414: LIST
77415: PUSH
77416: LD_INT 34
77418: PUSH
77419: LD_INT 32
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PUSH
77426: LD_INT 34
77428: PUSH
77429: LD_INT 89
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: PUSH
77436: EMPTY
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: PPUSH
77443: CALL_OW 72
77447: ST_TO_ADDR
// end ;
77448: LD_VAR 0 2
77452: RET
// export function Negate ( value ) ; begin
77453: LD_INT 0
77455: PPUSH
// result := not value ;
77456: LD_ADDR_VAR 0 2
77460: PUSH
77461: LD_VAR 0 1
77465: NOT
77466: ST_TO_ADDR
// end ;
77467: LD_VAR 0 2
77471: RET
// export function Inc ( value ) ; begin
77472: LD_INT 0
77474: PPUSH
// result := value + 1 ;
77475: LD_ADDR_VAR 0 2
77479: PUSH
77480: LD_VAR 0 1
77484: PUSH
77485: LD_INT 1
77487: PLUS
77488: ST_TO_ADDR
// end ;
77489: LD_VAR 0 2
77493: RET
// export function Dec ( value ) ; begin
77494: LD_INT 0
77496: PPUSH
// result := value - 1 ;
77497: LD_ADDR_VAR 0 2
77501: PUSH
77502: LD_VAR 0 1
77506: PUSH
77507: LD_INT 1
77509: MINUS
77510: ST_TO_ADDR
// end ;
77511: LD_VAR 0 2
77515: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77516: LD_INT 0
77518: PPUSH
77519: PPUSH
77520: PPUSH
77521: PPUSH
77522: PPUSH
77523: PPUSH
77524: PPUSH
77525: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77526: LD_VAR 0 1
77530: PPUSH
77531: LD_VAR 0 2
77535: PPUSH
77536: CALL_OW 488
77540: NOT
77541: PUSH
77542: LD_VAR 0 3
77546: PPUSH
77547: LD_VAR 0 4
77551: PPUSH
77552: CALL_OW 488
77556: NOT
77557: OR
77558: IFFALSE 77571
// begin result := - 1 ;
77560: LD_ADDR_VAR 0 5
77564: PUSH
77565: LD_INT 1
77567: NEG
77568: ST_TO_ADDR
// exit ;
77569: GO 77806
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77571: LD_ADDR_VAR 0 12
77575: PUSH
77576: LD_VAR 0 1
77580: PPUSH
77581: LD_VAR 0 2
77585: PPUSH
77586: LD_VAR 0 3
77590: PPUSH
77591: LD_VAR 0 4
77595: PPUSH
77596: CALL 76656 0 4
77600: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77601: LD_ADDR_VAR 0 11
77605: PUSH
77606: LD_VAR 0 1
77610: PPUSH
77611: LD_VAR 0 2
77615: PPUSH
77616: LD_VAR 0 12
77620: PUSH
77621: LD_INT 1
77623: ARRAY
77624: PPUSH
77625: LD_VAR 0 12
77629: PUSH
77630: LD_INT 2
77632: ARRAY
77633: PPUSH
77634: CALL_OW 298
77638: ST_TO_ADDR
// distance := 9999 ;
77639: LD_ADDR_VAR 0 10
77643: PUSH
77644: LD_INT 9999
77646: ST_TO_ADDR
// for i := 0 to 5 do
77647: LD_ADDR_VAR 0 6
77651: PUSH
77652: DOUBLE
77653: LD_INT 0
77655: DEC
77656: ST_TO_ADDR
77657: LD_INT 5
77659: PUSH
77660: FOR_TO
77661: IFFALSE 77804
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77663: LD_ADDR_VAR 0 7
77667: PUSH
77668: LD_VAR 0 1
77672: PPUSH
77673: LD_VAR 0 6
77677: PPUSH
77678: LD_VAR 0 11
77682: PPUSH
77683: CALL_OW 272
77687: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77688: LD_ADDR_VAR 0 8
77692: PUSH
77693: LD_VAR 0 2
77697: PPUSH
77698: LD_VAR 0 6
77702: PPUSH
77703: LD_VAR 0 11
77707: PPUSH
77708: CALL_OW 273
77712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77713: LD_VAR 0 7
77717: PPUSH
77718: LD_VAR 0 8
77722: PPUSH
77723: CALL_OW 488
77727: NOT
77728: IFFALSE 77732
// continue ;
77730: GO 77660
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77732: LD_ADDR_VAR 0 9
77736: PUSH
77737: LD_VAR 0 12
77741: PUSH
77742: LD_INT 1
77744: ARRAY
77745: PPUSH
77746: LD_VAR 0 12
77750: PUSH
77751: LD_INT 2
77753: ARRAY
77754: PPUSH
77755: LD_VAR 0 7
77759: PPUSH
77760: LD_VAR 0 8
77764: PPUSH
77765: CALL_OW 298
77769: ST_TO_ADDR
// if tmp < distance then
77770: LD_VAR 0 9
77774: PUSH
77775: LD_VAR 0 10
77779: LESS
77780: IFFALSE 77802
// begin result := i ;
77782: LD_ADDR_VAR 0 5
77786: PUSH
77787: LD_VAR 0 6
77791: ST_TO_ADDR
// distance := tmp ;
77792: LD_ADDR_VAR 0 10
77796: PUSH
77797: LD_VAR 0 9
77801: ST_TO_ADDR
// end ; end ;
77802: GO 77660
77804: POP
77805: POP
// end ;
77806: LD_VAR 0 5
77810: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77811: LD_INT 0
77813: PPUSH
77814: PPUSH
// if not driver or not IsInUnit ( driver ) then
77815: LD_VAR 0 1
77819: NOT
77820: PUSH
77821: LD_VAR 0 1
77825: PPUSH
77826: CALL_OW 310
77830: NOT
77831: OR
77832: IFFALSE 77836
// exit ;
77834: GO 77926
// vehicle := IsInUnit ( driver ) ;
77836: LD_ADDR_VAR 0 3
77840: PUSH
77841: LD_VAR 0 1
77845: PPUSH
77846: CALL_OW 310
77850: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77851: LD_VAR 0 1
77855: PPUSH
77856: LD_STRING \
77858: PUSH
77859: LD_INT 0
77861: PUSH
77862: LD_INT 0
77864: PUSH
77865: LD_INT 0
77867: PUSH
77868: LD_INT 0
77870: PUSH
77871: LD_INT 0
77873: PUSH
77874: LD_INT 0
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: PUSH
77886: LD_STRING E
77888: PUSH
77889: LD_INT 0
77891: PUSH
77892: LD_INT 0
77894: PUSH
77895: LD_VAR 0 3
77899: PUSH
77900: LD_INT 0
77902: PUSH
77903: LD_INT 0
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: LIST
77913: LIST
77914: LIST
77915: LIST
77916: LIST
77917: PUSH
77918: EMPTY
77919: LIST
77920: LIST
77921: PPUSH
77922: CALL_OW 446
// end ;
77926: LD_VAR 0 2
77930: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77931: LD_INT 0
77933: PPUSH
77934: PPUSH
// if not driver or not IsInUnit ( driver ) then
77935: LD_VAR 0 1
77939: NOT
77940: PUSH
77941: LD_VAR 0 1
77945: PPUSH
77946: CALL_OW 310
77950: NOT
77951: OR
77952: IFFALSE 77956
// exit ;
77954: GO 78046
// vehicle := IsInUnit ( driver ) ;
77956: LD_ADDR_VAR 0 3
77960: PUSH
77961: LD_VAR 0 1
77965: PPUSH
77966: CALL_OW 310
77970: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77971: LD_VAR 0 1
77975: PPUSH
77976: LD_STRING \
77978: PUSH
77979: LD_INT 0
77981: PUSH
77982: LD_INT 0
77984: PUSH
77985: LD_INT 0
77987: PUSH
77988: LD_INT 0
77990: PUSH
77991: LD_INT 0
77993: PUSH
77994: LD_INT 0
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: LIST
78001: LIST
78002: LIST
78003: LIST
78004: LIST
78005: PUSH
78006: LD_STRING E
78008: PUSH
78009: LD_INT 0
78011: PUSH
78012: LD_INT 0
78014: PUSH
78015: LD_VAR 0 3
78019: PUSH
78020: LD_INT 0
78022: PUSH
78023: LD_INT 0
78025: PUSH
78026: LD_INT 0
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PPUSH
78042: CALL_OW 447
// end ;
78046: LD_VAR 0 2
78050: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78051: LD_INT 0
78053: PPUSH
78054: PPUSH
78055: PPUSH
// tmp := [ ] ;
78056: LD_ADDR_VAR 0 5
78060: PUSH
78061: EMPTY
78062: ST_TO_ADDR
// for i in units do
78063: LD_ADDR_VAR 0 4
78067: PUSH
78068: LD_VAR 0 1
78072: PUSH
78073: FOR_IN
78074: IFFALSE 78112
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78076: LD_ADDR_VAR 0 5
78080: PUSH
78081: LD_VAR 0 5
78085: PPUSH
78086: LD_VAR 0 5
78090: PUSH
78091: LD_INT 1
78093: PLUS
78094: PPUSH
78095: LD_VAR 0 4
78099: PPUSH
78100: CALL_OW 256
78104: PPUSH
78105: CALL_OW 2
78109: ST_TO_ADDR
78110: GO 78073
78112: POP
78113: POP
// if not tmp then
78114: LD_VAR 0 5
78118: NOT
78119: IFFALSE 78123
// exit ;
78121: GO 78171
// if asc then
78123: LD_VAR 0 2
78127: IFFALSE 78151
// result := SortListByListAsc ( units , tmp ) else
78129: LD_ADDR_VAR 0 3
78133: PUSH
78134: LD_VAR 0 1
78138: PPUSH
78139: LD_VAR 0 5
78143: PPUSH
78144: CALL_OW 76
78148: ST_TO_ADDR
78149: GO 78171
// result := SortListByListDesc ( units , tmp ) ;
78151: LD_ADDR_VAR 0 3
78155: PUSH
78156: LD_VAR 0 1
78160: PPUSH
78161: LD_VAR 0 5
78165: PPUSH
78166: CALL_OW 77
78170: ST_TO_ADDR
// end ;
78171: LD_VAR 0 3
78175: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78176: LD_INT 0
78178: PPUSH
78179: PPUSH
// task := GetTaskList ( mech ) ;
78180: LD_ADDR_VAR 0 4
78184: PUSH
78185: LD_VAR 0 1
78189: PPUSH
78190: CALL_OW 437
78194: ST_TO_ADDR
// if not task then
78195: LD_VAR 0 4
78199: NOT
78200: IFFALSE 78204
// exit ;
78202: GO 78246
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78204: LD_ADDR_VAR 0 3
78208: PUSH
78209: LD_VAR 0 4
78213: PUSH
78214: LD_INT 1
78216: ARRAY
78217: PUSH
78218: LD_INT 1
78220: ARRAY
78221: PUSH
78222: LD_STRING r
78224: EQUAL
78225: PUSH
78226: LD_VAR 0 4
78230: PUSH
78231: LD_INT 1
78233: ARRAY
78234: PUSH
78235: LD_INT 4
78237: ARRAY
78238: PUSH
78239: LD_VAR 0 2
78243: EQUAL
78244: AND
78245: ST_TO_ADDR
// end ;
78246: LD_VAR 0 3
78250: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78251: LD_INT 0
78253: PPUSH
// SetDir ( unit , d ) ;
78254: LD_VAR 0 1
78258: PPUSH
78259: LD_VAR 0 4
78263: PPUSH
78264: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78268: LD_VAR 0 1
78272: PPUSH
78273: LD_VAR 0 2
78277: PPUSH
78278: LD_VAR 0 3
78282: PPUSH
78283: LD_VAR 0 5
78287: PPUSH
78288: CALL_OW 48
// end ;
78292: LD_VAR 0 6
78296: RET
// export function ToNaturalNumber ( number ) ; begin
78297: LD_INT 0
78299: PPUSH
// result := number div 1 ;
78300: LD_ADDR_VAR 0 2
78304: PUSH
78305: LD_VAR 0 1
78309: PUSH
78310: LD_INT 1
78312: DIV
78313: ST_TO_ADDR
// if number < 0 then
78314: LD_VAR 0 1
78318: PUSH
78319: LD_INT 0
78321: LESS
78322: IFFALSE 78332
// result := 0 ;
78324: LD_ADDR_VAR 0 2
78328: PUSH
78329: LD_INT 0
78331: ST_TO_ADDR
// end ;
78332: LD_VAR 0 2
78336: RET
// export function SortByClass ( units , class ) ; var un ; begin
78337: LD_INT 0
78339: PPUSH
78340: PPUSH
// if not units or not class then
78341: LD_VAR 0 1
78345: NOT
78346: PUSH
78347: LD_VAR 0 2
78351: NOT
78352: OR
78353: IFFALSE 78357
// exit ;
78355: GO 78452
// result := [ ] ;
78357: LD_ADDR_VAR 0 3
78361: PUSH
78362: EMPTY
78363: ST_TO_ADDR
// for un in units do
78364: LD_ADDR_VAR 0 4
78368: PUSH
78369: LD_VAR 0 1
78373: PUSH
78374: FOR_IN
78375: IFFALSE 78450
// if GetClass ( un ) = class then
78377: LD_VAR 0 4
78381: PPUSH
78382: CALL_OW 257
78386: PUSH
78387: LD_VAR 0 2
78391: EQUAL
78392: IFFALSE 78419
// result := Insert ( result , 1 , un ) else
78394: LD_ADDR_VAR 0 3
78398: PUSH
78399: LD_VAR 0 3
78403: PPUSH
78404: LD_INT 1
78406: PPUSH
78407: LD_VAR 0 4
78411: PPUSH
78412: CALL_OW 2
78416: ST_TO_ADDR
78417: GO 78448
// result := Replace ( result , result + 1 , un ) ;
78419: LD_ADDR_VAR 0 3
78423: PUSH
78424: LD_VAR 0 3
78428: PPUSH
78429: LD_VAR 0 3
78433: PUSH
78434: LD_INT 1
78436: PLUS
78437: PPUSH
78438: LD_VAR 0 4
78442: PPUSH
78443: CALL_OW 1
78447: ST_TO_ADDR
78448: GO 78374
78450: POP
78451: POP
// end ;
78452: LD_VAR 0 3
78456: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78457: LD_INT 0
78459: PPUSH
78460: PPUSH
78461: PPUSH
78462: PPUSH
78463: PPUSH
78464: PPUSH
78465: PPUSH
// result := [ ] ;
78466: LD_ADDR_VAR 0 4
78470: PUSH
78471: EMPTY
78472: ST_TO_ADDR
// if x - r < 0 then
78473: LD_VAR 0 1
78477: PUSH
78478: LD_VAR 0 3
78482: MINUS
78483: PUSH
78484: LD_INT 0
78486: LESS
78487: IFFALSE 78499
// min_x := 0 else
78489: LD_ADDR_VAR 0 8
78493: PUSH
78494: LD_INT 0
78496: ST_TO_ADDR
78497: GO 78515
// min_x := x - r ;
78499: LD_ADDR_VAR 0 8
78503: PUSH
78504: LD_VAR 0 1
78508: PUSH
78509: LD_VAR 0 3
78513: MINUS
78514: ST_TO_ADDR
// if y - r < 0 then
78515: LD_VAR 0 2
78519: PUSH
78520: LD_VAR 0 3
78524: MINUS
78525: PUSH
78526: LD_INT 0
78528: LESS
78529: IFFALSE 78541
// min_y := 0 else
78531: LD_ADDR_VAR 0 7
78535: PUSH
78536: LD_INT 0
78538: ST_TO_ADDR
78539: GO 78557
// min_y := y - r ;
78541: LD_ADDR_VAR 0 7
78545: PUSH
78546: LD_VAR 0 2
78550: PUSH
78551: LD_VAR 0 3
78555: MINUS
78556: ST_TO_ADDR
// max_x := x + r ;
78557: LD_ADDR_VAR 0 9
78561: PUSH
78562: LD_VAR 0 1
78566: PUSH
78567: LD_VAR 0 3
78571: PLUS
78572: ST_TO_ADDR
// max_y := y + r ;
78573: LD_ADDR_VAR 0 10
78577: PUSH
78578: LD_VAR 0 2
78582: PUSH
78583: LD_VAR 0 3
78587: PLUS
78588: ST_TO_ADDR
// for _x = min_x to max_x do
78589: LD_ADDR_VAR 0 5
78593: PUSH
78594: DOUBLE
78595: LD_VAR 0 8
78599: DEC
78600: ST_TO_ADDR
78601: LD_VAR 0 9
78605: PUSH
78606: FOR_TO
78607: IFFALSE 78708
// for _y = min_y to max_y do
78609: LD_ADDR_VAR 0 6
78613: PUSH
78614: DOUBLE
78615: LD_VAR 0 7
78619: DEC
78620: ST_TO_ADDR
78621: LD_VAR 0 10
78625: PUSH
78626: FOR_TO
78627: IFFALSE 78704
// begin if not ValidHex ( _x , _y ) then
78629: LD_VAR 0 5
78633: PPUSH
78634: LD_VAR 0 6
78638: PPUSH
78639: CALL_OW 488
78643: NOT
78644: IFFALSE 78648
// continue ;
78646: GO 78626
// if GetResourceTypeXY ( _x , _y ) then
78648: LD_VAR 0 5
78652: PPUSH
78653: LD_VAR 0 6
78657: PPUSH
78658: CALL_OW 283
78662: IFFALSE 78702
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78664: LD_ADDR_VAR 0 4
78668: PUSH
78669: LD_VAR 0 4
78673: PPUSH
78674: LD_VAR 0 4
78678: PUSH
78679: LD_INT 1
78681: PLUS
78682: PPUSH
78683: LD_VAR 0 5
78687: PUSH
78688: LD_VAR 0 6
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PPUSH
78697: CALL_OW 1
78701: ST_TO_ADDR
// end ;
78702: GO 78626
78704: POP
78705: POP
78706: GO 78606
78708: POP
78709: POP
// end ;
78710: LD_VAR 0 4
78714: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78715: LD_INT 0
78717: PPUSH
78718: PPUSH
78719: PPUSH
78720: PPUSH
78721: PPUSH
78722: PPUSH
78723: PPUSH
78724: PPUSH
// if not units then
78725: LD_VAR 0 1
78729: NOT
78730: IFFALSE 78734
// exit ;
78732: GO 79258
// result := UnitFilter ( units , [ f_ok ] ) ;
78734: LD_ADDR_VAR 0 3
78738: PUSH
78739: LD_VAR 0 1
78743: PPUSH
78744: LD_INT 50
78746: PUSH
78747: EMPTY
78748: LIST
78749: PPUSH
78750: CALL_OW 72
78754: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78755: LD_ADDR_VAR 0 8
78759: PUSH
78760: LD_VAR 0 1
78764: PUSH
78765: LD_INT 1
78767: ARRAY
78768: PPUSH
78769: CALL_OW 255
78773: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78774: LD_ADDR_VAR 0 10
78778: PUSH
78779: LD_INT 29
78781: PUSH
78782: LD_INT 91
78784: PUSH
78785: LD_INT 49
78787: PUSH
78788: EMPTY
78789: LIST
78790: LIST
78791: LIST
78792: ST_TO_ADDR
// if not result then
78793: LD_VAR 0 3
78797: NOT
78798: IFFALSE 78802
// exit ;
78800: GO 79258
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78802: LD_ADDR_VAR 0 5
78806: PUSH
78807: LD_INT 81
78809: PUSH
78810: LD_VAR 0 8
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PPUSH
78819: CALL_OW 69
78823: ST_TO_ADDR
// for i in result do
78824: LD_ADDR_VAR 0 4
78828: PUSH
78829: LD_VAR 0 3
78833: PUSH
78834: FOR_IN
78835: IFFALSE 79256
// begin tag := GetTag ( i ) + 1 ;
78837: LD_ADDR_VAR 0 9
78841: PUSH
78842: LD_VAR 0 4
78846: PPUSH
78847: CALL_OW 110
78851: PUSH
78852: LD_INT 1
78854: PLUS
78855: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78856: LD_ADDR_VAR 0 7
78860: PUSH
78861: LD_VAR 0 4
78865: PPUSH
78866: CALL_OW 250
78870: PPUSH
78871: LD_VAR 0 4
78875: PPUSH
78876: CALL_OW 251
78880: PPUSH
78881: LD_INT 6
78883: PPUSH
78884: CALL 78457 0 3
78888: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78889: LD_VAR 0 4
78893: PPUSH
78894: CALL_OW 247
78898: PUSH
78899: LD_INT 2
78901: EQUAL
78902: PUSH
78903: LD_VAR 0 7
78907: AND
78908: PUSH
78909: LD_VAR 0 4
78913: PPUSH
78914: CALL_OW 264
78918: PUSH
78919: LD_VAR 0 10
78923: IN
78924: NOT
78925: AND
78926: IFFALSE 78965
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78928: LD_VAR 0 4
78932: PPUSH
78933: LD_VAR 0 7
78937: PUSH
78938: LD_INT 1
78940: ARRAY
78941: PUSH
78942: LD_INT 1
78944: ARRAY
78945: PPUSH
78946: LD_VAR 0 7
78950: PUSH
78951: LD_INT 1
78953: ARRAY
78954: PUSH
78955: LD_INT 2
78957: ARRAY
78958: PPUSH
78959: CALL_OW 116
78963: GO 79254
// if path > tag then
78965: LD_VAR 0 2
78969: PUSH
78970: LD_VAR 0 9
78974: GREATER
78975: IFFALSE 79183
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78977: LD_ADDR_VAR 0 6
78981: PUSH
78982: LD_VAR 0 5
78986: PPUSH
78987: LD_INT 91
78989: PUSH
78990: LD_VAR 0 4
78994: PUSH
78995: LD_INT 8
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: LIST
79002: PPUSH
79003: CALL_OW 72
79007: ST_TO_ADDR
// if nearEnemy then
79008: LD_VAR 0 6
79012: IFFALSE 79081
// begin if GetWeapon ( i ) = ru_time_lapser then
79014: LD_VAR 0 4
79018: PPUSH
79019: CALL_OW 264
79023: PUSH
79024: LD_INT 49
79026: EQUAL
79027: IFFALSE 79055
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79029: LD_VAR 0 4
79033: PPUSH
79034: LD_VAR 0 6
79038: PPUSH
79039: LD_VAR 0 4
79043: PPUSH
79044: CALL_OW 74
79048: PPUSH
79049: CALL_OW 112
79053: GO 79079
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79055: LD_VAR 0 4
79059: PPUSH
79060: LD_VAR 0 6
79064: PPUSH
79065: LD_VAR 0 4
79069: PPUSH
79070: CALL_OW 74
79074: PPUSH
79075: CALL 80183 0 2
// end else
79079: GO 79181
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79081: LD_VAR 0 4
79085: PPUSH
79086: LD_VAR 0 2
79090: PUSH
79091: LD_VAR 0 9
79095: ARRAY
79096: PUSH
79097: LD_INT 1
79099: ARRAY
79100: PPUSH
79101: LD_VAR 0 2
79105: PUSH
79106: LD_VAR 0 9
79110: ARRAY
79111: PUSH
79112: LD_INT 2
79114: ARRAY
79115: PPUSH
79116: CALL_OW 297
79120: PUSH
79121: LD_INT 6
79123: GREATER
79124: IFFALSE 79167
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79126: LD_VAR 0 4
79130: PPUSH
79131: LD_VAR 0 2
79135: PUSH
79136: LD_VAR 0 9
79140: ARRAY
79141: PUSH
79142: LD_INT 1
79144: ARRAY
79145: PPUSH
79146: LD_VAR 0 2
79150: PUSH
79151: LD_VAR 0 9
79155: ARRAY
79156: PUSH
79157: LD_INT 2
79159: ARRAY
79160: PPUSH
79161: CALL_OW 114
79165: GO 79181
// SetTag ( i , tag ) ;
79167: LD_VAR 0 4
79171: PPUSH
79172: LD_VAR 0 9
79176: PPUSH
79177: CALL_OW 109
// end else
79181: GO 79254
// if enemy then
79183: LD_VAR 0 5
79187: IFFALSE 79254
// begin if GetWeapon ( i ) = ru_time_lapser then
79189: LD_VAR 0 4
79193: PPUSH
79194: CALL_OW 264
79198: PUSH
79199: LD_INT 49
79201: EQUAL
79202: IFFALSE 79230
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79204: LD_VAR 0 4
79208: PPUSH
79209: LD_VAR 0 5
79213: PPUSH
79214: LD_VAR 0 4
79218: PPUSH
79219: CALL_OW 74
79223: PPUSH
79224: CALL_OW 112
79228: GO 79254
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79230: LD_VAR 0 4
79234: PPUSH
79235: LD_VAR 0 5
79239: PPUSH
79240: LD_VAR 0 4
79244: PPUSH
79245: CALL_OW 74
79249: PPUSH
79250: CALL 80183 0 2
// end ; end ;
79254: GO 78834
79256: POP
79257: POP
// end ;
79258: LD_VAR 0 3
79262: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79263: LD_INT 0
79265: PPUSH
79266: PPUSH
79267: PPUSH
// if not unit or IsInUnit ( unit ) then
79268: LD_VAR 0 1
79272: NOT
79273: PUSH
79274: LD_VAR 0 1
79278: PPUSH
79279: CALL_OW 310
79283: OR
79284: IFFALSE 79288
// exit ;
79286: GO 79379
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79288: LD_ADDR_VAR 0 4
79292: PUSH
79293: LD_VAR 0 1
79297: PPUSH
79298: CALL_OW 250
79302: PPUSH
79303: LD_VAR 0 2
79307: PPUSH
79308: LD_INT 1
79310: PPUSH
79311: CALL_OW 272
79315: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79316: LD_ADDR_VAR 0 5
79320: PUSH
79321: LD_VAR 0 1
79325: PPUSH
79326: CALL_OW 251
79330: PPUSH
79331: LD_VAR 0 2
79335: PPUSH
79336: LD_INT 1
79338: PPUSH
79339: CALL_OW 273
79343: ST_TO_ADDR
// if ValidHex ( x , y ) then
79344: LD_VAR 0 4
79348: PPUSH
79349: LD_VAR 0 5
79353: PPUSH
79354: CALL_OW 488
79358: IFFALSE 79379
// ComTurnXY ( unit , x , y ) ;
79360: LD_VAR 0 1
79364: PPUSH
79365: LD_VAR 0 4
79369: PPUSH
79370: LD_VAR 0 5
79374: PPUSH
79375: CALL_OW 118
// end ;
79379: LD_VAR 0 3
79383: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79384: LD_INT 0
79386: PPUSH
79387: PPUSH
// result := false ;
79388: LD_ADDR_VAR 0 3
79392: PUSH
79393: LD_INT 0
79395: ST_TO_ADDR
// if not units then
79396: LD_VAR 0 2
79400: NOT
79401: IFFALSE 79405
// exit ;
79403: GO 79450
// for i in units do
79405: LD_ADDR_VAR 0 4
79409: PUSH
79410: LD_VAR 0 2
79414: PUSH
79415: FOR_IN
79416: IFFALSE 79448
// if See ( side , i ) then
79418: LD_VAR 0 1
79422: PPUSH
79423: LD_VAR 0 4
79427: PPUSH
79428: CALL_OW 292
79432: IFFALSE 79446
// begin result := true ;
79434: LD_ADDR_VAR 0 3
79438: PUSH
79439: LD_INT 1
79441: ST_TO_ADDR
// exit ;
79442: POP
79443: POP
79444: GO 79450
// end ;
79446: GO 79415
79448: POP
79449: POP
// end ;
79450: LD_VAR 0 3
79454: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79455: LD_INT 0
79457: PPUSH
79458: PPUSH
79459: PPUSH
79460: PPUSH
// if not unit or not points then
79461: LD_VAR 0 1
79465: NOT
79466: PUSH
79467: LD_VAR 0 2
79471: NOT
79472: OR
79473: IFFALSE 79477
// exit ;
79475: GO 79567
// dist := 99999 ;
79477: LD_ADDR_VAR 0 5
79481: PUSH
79482: LD_INT 99999
79484: ST_TO_ADDR
// for i in points do
79485: LD_ADDR_VAR 0 4
79489: PUSH
79490: LD_VAR 0 2
79494: PUSH
79495: FOR_IN
79496: IFFALSE 79565
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79498: LD_ADDR_VAR 0 6
79502: PUSH
79503: LD_VAR 0 1
79507: PPUSH
79508: LD_VAR 0 4
79512: PUSH
79513: LD_INT 1
79515: ARRAY
79516: PPUSH
79517: LD_VAR 0 4
79521: PUSH
79522: LD_INT 2
79524: ARRAY
79525: PPUSH
79526: CALL_OW 297
79530: ST_TO_ADDR
// if tmpDist < dist then
79531: LD_VAR 0 6
79535: PUSH
79536: LD_VAR 0 5
79540: LESS
79541: IFFALSE 79563
// begin result := i ;
79543: LD_ADDR_VAR 0 3
79547: PUSH
79548: LD_VAR 0 4
79552: ST_TO_ADDR
// dist := tmpDist ;
79553: LD_ADDR_VAR 0 5
79557: PUSH
79558: LD_VAR 0 6
79562: ST_TO_ADDR
// end ; end ;
79563: GO 79495
79565: POP
79566: POP
// end ;
79567: LD_VAR 0 3
79571: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79572: LD_INT 0
79574: PPUSH
// uc_side := side ;
79575: LD_ADDR_OWVAR 20
79579: PUSH
79580: LD_VAR 0 1
79584: ST_TO_ADDR
// uc_nation := 3 ;
79585: LD_ADDR_OWVAR 21
79589: PUSH
79590: LD_INT 3
79592: ST_TO_ADDR
// vc_chassis := 25 ;
79593: LD_ADDR_OWVAR 37
79597: PUSH
79598: LD_INT 25
79600: ST_TO_ADDR
// vc_engine := engine_siberite ;
79601: LD_ADDR_OWVAR 39
79605: PUSH
79606: LD_INT 3
79608: ST_TO_ADDR
// vc_control := control_computer ;
79609: LD_ADDR_OWVAR 38
79613: PUSH
79614: LD_INT 3
79616: ST_TO_ADDR
// vc_weapon := 59 ;
79617: LD_ADDR_OWVAR 40
79621: PUSH
79622: LD_INT 59
79624: ST_TO_ADDR
// result := CreateVehicle ;
79625: LD_ADDR_VAR 0 5
79629: PUSH
79630: CALL_OW 45
79634: ST_TO_ADDR
// SetDir ( result , d ) ;
79635: LD_VAR 0 5
79639: PPUSH
79640: LD_VAR 0 4
79644: PPUSH
79645: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79649: LD_VAR 0 5
79653: PPUSH
79654: LD_VAR 0 2
79658: PPUSH
79659: LD_VAR 0 3
79663: PPUSH
79664: LD_INT 0
79666: PPUSH
79667: CALL_OW 48
// end ;
79671: LD_VAR 0 5
79675: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79676: LD_INT 0
79678: PPUSH
79679: PPUSH
79680: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79681: LD_ADDR_VAR 0 2
79685: PUSH
79686: LD_INT 0
79688: PUSH
79689: LD_INT 0
79691: PUSH
79692: LD_INT 0
79694: PUSH
79695: LD_INT 0
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79704: LD_VAR 0 1
79708: NOT
79709: PUSH
79710: LD_VAR 0 1
79714: PPUSH
79715: CALL_OW 264
79719: PUSH
79720: LD_INT 12
79722: PUSH
79723: LD_INT 51
79725: PUSH
79726: LD_INT 32
79728: PUSH
79729: LD_INT 89
79731: PUSH
79732: EMPTY
79733: LIST
79734: LIST
79735: LIST
79736: LIST
79737: IN
79738: NOT
79739: OR
79740: IFFALSE 79744
// exit ;
79742: GO 79842
// for i := 1 to 3 do
79744: LD_ADDR_VAR 0 3
79748: PUSH
79749: DOUBLE
79750: LD_INT 1
79752: DEC
79753: ST_TO_ADDR
79754: LD_INT 3
79756: PUSH
79757: FOR_TO
79758: IFFALSE 79840
// begin tmp := GetCargo ( cargo , i ) ;
79760: LD_ADDR_VAR 0 4
79764: PUSH
79765: LD_VAR 0 1
79769: PPUSH
79770: LD_VAR 0 3
79774: PPUSH
79775: CALL_OW 289
79779: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79780: LD_ADDR_VAR 0 2
79784: PUSH
79785: LD_VAR 0 2
79789: PPUSH
79790: LD_VAR 0 3
79794: PPUSH
79795: LD_VAR 0 4
79799: PPUSH
79800: CALL_OW 1
79804: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79805: LD_ADDR_VAR 0 2
79809: PUSH
79810: LD_VAR 0 2
79814: PPUSH
79815: LD_INT 4
79817: PPUSH
79818: LD_VAR 0 2
79822: PUSH
79823: LD_INT 4
79825: ARRAY
79826: PUSH
79827: LD_VAR 0 4
79831: PLUS
79832: PPUSH
79833: CALL_OW 1
79837: ST_TO_ADDR
// end ;
79838: GO 79757
79840: POP
79841: POP
// end ;
79842: LD_VAR 0 2
79846: RET
// export function Length ( array ) ; begin
79847: LD_INT 0
79849: PPUSH
// result := array + 0 ;
79850: LD_ADDR_VAR 0 2
79854: PUSH
79855: LD_VAR 0 1
79859: PUSH
79860: LD_INT 0
79862: PLUS
79863: ST_TO_ADDR
// end ;
79864: LD_VAR 0 2
79868: RET
// export function PrepareArray ( array ) ; begin
79869: LD_INT 0
79871: PPUSH
// result := array diff 0 ;
79872: LD_ADDR_VAR 0 2
79876: PUSH
79877: LD_VAR 0 1
79881: PUSH
79882: LD_INT 0
79884: DIFF
79885: ST_TO_ADDR
// if not result [ 1 ] then
79886: LD_VAR 0 2
79890: PUSH
79891: LD_INT 1
79893: ARRAY
79894: NOT
79895: IFFALSE 79915
// result := Delete ( result , 1 ) ;
79897: LD_ADDR_VAR 0 2
79901: PUSH
79902: LD_VAR 0 2
79906: PPUSH
79907: LD_INT 1
79909: PPUSH
79910: CALL_OW 3
79914: ST_TO_ADDR
// end ;
79915: LD_VAR 0 2
79919: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79920: LD_INT 0
79922: PPUSH
79923: PPUSH
79924: PPUSH
79925: PPUSH
// sibRocketRange := 25 ;
79926: LD_ADDR_VAR 0 6
79930: PUSH
79931: LD_INT 25
79933: ST_TO_ADDR
// result := false ;
79934: LD_ADDR_VAR 0 4
79938: PUSH
79939: LD_INT 0
79941: ST_TO_ADDR
// for i := 0 to 5 do
79942: LD_ADDR_VAR 0 5
79946: PUSH
79947: DOUBLE
79948: LD_INT 0
79950: DEC
79951: ST_TO_ADDR
79952: LD_INT 5
79954: PUSH
79955: FOR_TO
79956: IFFALSE 80023
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79958: LD_VAR 0 1
79962: PPUSH
79963: LD_VAR 0 5
79967: PPUSH
79968: LD_VAR 0 6
79972: PPUSH
79973: CALL_OW 272
79977: PPUSH
79978: LD_VAR 0 2
79982: PPUSH
79983: LD_VAR 0 5
79987: PPUSH
79988: LD_VAR 0 6
79992: PPUSH
79993: CALL_OW 273
79997: PPUSH
79998: LD_VAR 0 3
80002: PPUSH
80003: CALL_OW 309
80007: IFFALSE 80021
// begin result := true ;
80009: LD_ADDR_VAR 0 4
80013: PUSH
80014: LD_INT 1
80016: ST_TO_ADDR
// exit ;
80017: POP
80018: POP
80019: GO 80025
// end ;
80021: GO 79955
80023: POP
80024: POP
// end ;
80025: LD_VAR 0 4
80029: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80030: LD_INT 0
80032: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80033: LD_VAR 0 1
80037: PPUSH
80038: LD_VAR 0 2
80042: PPUSH
80043: LD_INT 0
80045: PPUSH
80046: LD_INT 0
80048: PPUSH
80049: LD_INT 1
80051: PPUSH
80052: LD_INT 0
80054: PPUSH
80055: CALL_OW 587
// end ;
80059: LD_VAR 0 3
80063: RET
// export function CenterOnNow ( unit ) ; begin
80064: LD_INT 0
80066: PPUSH
// result := IsInUnit ( unit ) ;
80067: LD_ADDR_VAR 0 2
80071: PUSH
80072: LD_VAR 0 1
80076: PPUSH
80077: CALL_OW 310
80081: ST_TO_ADDR
// if not result then
80082: LD_VAR 0 2
80086: NOT
80087: IFFALSE 80099
// result := unit ;
80089: LD_ADDR_VAR 0 2
80093: PUSH
80094: LD_VAR 0 1
80098: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80099: LD_VAR 0 1
80103: PPUSH
80104: CALL_OW 87
// end ;
80108: LD_VAR 0 2
80112: RET
// export function ComMoveHex ( unit , hex ) ; begin
80113: LD_INT 0
80115: PPUSH
// if not hex then
80116: LD_VAR 0 2
80120: NOT
80121: IFFALSE 80125
// exit ;
80123: GO 80178
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80125: LD_VAR 0 2
80129: PUSH
80130: LD_INT 1
80132: ARRAY
80133: PPUSH
80134: LD_VAR 0 2
80138: PUSH
80139: LD_INT 2
80141: ARRAY
80142: PPUSH
80143: CALL_OW 428
80147: IFFALSE 80151
// exit ;
80149: GO 80178
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80151: LD_VAR 0 1
80155: PPUSH
80156: LD_VAR 0 2
80160: PUSH
80161: LD_INT 1
80163: ARRAY
80164: PPUSH
80165: LD_VAR 0 2
80169: PUSH
80170: LD_INT 2
80172: ARRAY
80173: PPUSH
80174: CALL_OW 111
// end ;
80178: LD_VAR 0 3
80182: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80183: LD_INT 0
80185: PPUSH
80186: PPUSH
80187: PPUSH
// if not unit or not enemy then
80188: LD_VAR 0 1
80192: NOT
80193: PUSH
80194: LD_VAR 0 2
80198: NOT
80199: OR
80200: IFFALSE 80204
// exit ;
80202: GO 80328
// x := GetX ( enemy ) ;
80204: LD_ADDR_VAR 0 4
80208: PUSH
80209: LD_VAR 0 2
80213: PPUSH
80214: CALL_OW 250
80218: ST_TO_ADDR
// y := GetY ( enemy ) ;
80219: LD_ADDR_VAR 0 5
80223: PUSH
80224: LD_VAR 0 2
80228: PPUSH
80229: CALL_OW 251
80233: ST_TO_ADDR
// if ValidHex ( x , y ) then
80234: LD_VAR 0 4
80238: PPUSH
80239: LD_VAR 0 5
80243: PPUSH
80244: CALL_OW 488
80248: IFFALSE 80328
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
80250: LD_VAR 0 2
80254: PPUSH
80255: CALL_OW 247
80259: PUSH
80260: LD_INT 3
80262: PUSH
80263: LD_INT 2
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: IN
80270: PUSH
80271: LD_VAR 0 1
80275: PPUSH
80276: CALL_OW 255
80280: PPUSH
80281: LD_VAR 0 2
80285: PPUSH
80286: CALL_OW 292
80290: AND
80291: IFFALSE 80309
// ComAttackUnit ( unit , enemy ) else
80293: LD_VAR 0 1
80297: PPUSH
80298: LD_VAR 0 2
80302: PPUSH
80303: CALL_OW 115
80307: GO 80328
// ComAgressiveMove ( unit , x , y ) ;
80309: LD_VAR 0 1
80313: PPUSH
80314: LD_VAR 0 4
80318: PPUSH
80319: LD_VAR 0 5
80323: PPUSH
80324: CALL_OW 114
// end ; end_of_file
80328: LD_VAR 0 3
80332: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80333: LD_VAR 0 1
80337: PPUSH
80338: LD_VAR 0 2
80342: PPUSH
80343: LD_VAR 0 3
80347: PPUSH
80348: LD_VAR 0 4
80352: PPUSH
80353: LD_VAR 0 5
80357: PPUSH
80358: LD_VAR 0 6
80362: PPUSH
80363: CALL 17871 0 6
// end ;
80367: PPOPN 6
80369: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80370: LD_INT 0
80372: PPUSH
// begin if not units then
80373: LD_VAR 0 1
80377: NOT
80378: IFFALSE 80382
// exit ;
80380: GO 80382
// end ;
80382: PPOPN 7
80384: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80385: CALL 17775 0 0
// end ;
80389: PPOPN 1
80391: END
