// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 861 0 0
// PrepareArabian ;
  12: CALL 1237 0 0
// PrepareAmerican ;
  16: CALL 6796 0 0
// PrepareRussian ;
  20: CALL 2225 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8366 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: IFTRUE 573
 566: PUSH
 567: LD_VAR 0 2
 571: NOT
 572: OR
 573: IFFALSE 577
// exit ;
 575: GO 625
// if not See ( GetSide ( observer ) , unit ) then
 577: LD_VAR 0 1
 581: PPUSH
 582: CALL_OW 255
 586: PPUSH
 587: LD_VAR 0 2
 591: PPUSH
 592: CALL_OW 292
 596: NOT
 597: IFFALSE 601
// exit ;
 599: GO 625
// result := GetDistUnits ( observer , unit ) < 12 ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: LD_VAR 0 1
 610: PPUSH
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 296
 620: PUSH
 621: LD_INT 12
 623: LESS
 624: ST_TO_ADDR
// end ;
 625: LD_VAR 0 3
 629: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 630: LD_INT 0
 632: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 633: LD_VAR 0 2
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: PPUSH
 642: LD_VAR 0 2
 646: PUSH
 647: LD_INT 2
 649: ARRAY
 650: PPUSH
 651: CALL_OW 488
 655: IFFALSE 685
 657: PUSH
 658: LD_VAR 0 2
 662: PUSH
 663: LD_INT 1
 665: ARRAY
 666: PPUSH
 667: LD_VAR 0 2
 671: PUSH
 672: LD_INT 2
 674: ARRAY
 675: PPUSH
 676: CALL_OW 428
 680: PUSH
 681: LD_INT 0
 683: EQUAL
 684: AND
 685: IFFALSE 719
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 687: LD_VAR 0 1
 691: PPUSH
 692: LD_VAR 0 2
 696: PUSH
 697: LD_INT 1
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 2
 705: PUSH
 706: LD_INT 2
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 3
 714: PPUSH
 715: CALL_OW 48
// end ;
 719: LD_VAR 0 4
 723: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
// InitUc ;
 728: CALL_OW 18
// InitHc ;
 732: CALL_OW 19
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i = 1 to amount do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_VAR 0 2
 766: PUSH
 767: FOR_TO
 768: IFFALSE 850
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 770: LD_ADDR_OWVAR 29
 774: PUSH
 775: LD_INT 9
 777: PPUSH
 778: LD_INT 12
 780: PPUSH
 781: CALL_OW 12
 785: PUSH
 786: LD_INT 9
 788: PPUSH
 789: LD_INT 12
 791: PPUSH
 792: CALL_OW 12
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 801: LD_ADDR_OWVAR 35
 805: PUSH
 806: LD_INT 1
 808: NEG
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL_OW 12
 817: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 818: LD_INT 0
 820: PPUSH
 821: LD_INT 12
 823: PPUSH
 824: LD_INT 1
 826: PPUSH
 827: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 831: CALL_OW 44
 835: PPUSH
 836: LD_VAR 0 1
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// end ;
 848: GO 767
 850: POP
 851: POP
// InitHc ;
 852: CALL_OW 19
// end ;
 856: LD_VAR 0 3
 860: RET
// export function CreateNature ; var i ; begin
 861: LD_INT 0
 863: PPUSH
 864: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 865: LD_INT 18
 867: PPUSH
 868: LD_INT 5
 870: PUSH
 871: LD_INT 4
 873: PUSH
 874: LD_INT 3
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_OWVAR 67
 890: ARRAY
 891: PPUSH
 892: CALL 724 0 2
// for i := 1 to 3 do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_INT 3
 908: PUSH
 909: FOR_TO
 910: IFFALSE 945
// begin hc_class := 21 ;
 912: LD_ADDR_OWVAR 28
 916: PUSH
 917: LD_INT 21
 919: ST_TO_ADDR
// hc_gallery :=  ;
 920: LD_ADDR_OWVAR 33
 924: PUSH
 925: LD_STRING 
 927: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 928: CALL_OW 44
 932: PPUSH
 933: LD_INT 18
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ;
 943: GO 909
 945: POP
 946: POP
// for i := 1 to 2 do
 947: LD_ADDR_VAR 0 2
 951: PUSH
 952: DOUBLE
 953: LD_INT 1
 955: DEC
 956: ST_TO_ADDR
 957: LD_INT 2
 959: PUSH
 960: FOR_TO
 961: IFFALSE 996
// begin hc_class := 18 ;
 963: LD_ADDR_OWVAR 28
 967: PUSH
 968: LD_INT 18
 970: ST_TO_ADDR
// hc_gallery :=  ;
 971: LD_ADDR_OWVAR 33
 975: PUSH
 976: LD_STRING 
 978: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 979: CALL_OW 44
 983: PPUSH
 984: LD_INT 18
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: GO 960
 996: POP
 997: POP
// for i := 1 to 2 do
 998: LD_ADDR_VAR 0 2
1002: PUSH
1003: DOUBLE
1004: LD_INT 1
1006: DEC
1007: ST_TO_ADDR
1008: LD_INT 2
1010: PUSH
1011: FOR_TO
1012: IFFALSE 1047
// begin hc_class := 13 ;
1014: LD_ADDR_OWVAR 28
1018: PUSH
1019: LD_INT 13
1021: ST_TO_ADDR
// hc_gallery :=  ;
1022: LD_ADDR_OWVAR 33
1026: PUSH
1027: LD_STRING 
1029: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1030: CALL_OW 44
1034: PPUSH
1035: LD_INT 18
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end ;
1045: GO 1011
1047: POP
1048: POP
// end ;
1049: LD_VAR 0 1
1053: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1054: LD_INT 0
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
1060: PPUSH
// result := false ;
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: LD_INT 0
1068: ST_TO_ADDR
// if not sideList or not enemySide then
1069: LD_VAR 0 1
1073: NOT
1074: IFTRUE 1083
1076: PUSH
1077: LD_VAR 0 2
1081: NOT
1082: OR
1083: IFFALSE 1087
// exit ;
1085: GO 1232
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1087: LD_ADDR_VAR 0 7
1091: PUSH
1092: LD_INT 22
1094: PUSH
1095: LD_VAR 0 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PPUSH
1104: CALL_OW 69
1108: ST_TO_ADDR
// if not tmp then
1109: LD_VAR 0 7
1113: NOT
1114: IFFALSE 1118
// exit ;
1116: GO 1232
// for s in sideList do
1118: LD_ADDR_VAR 0 6
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: FOR_IN
1129: IFFALSE 1230
// for i in tmp do
1131: LD_ADDR_VAR 0 5
1135: PUSH
1136: LD_VAR 0 7
1140: PUSH
1141: FOR_IN
1142: IFFALSE 1226
// if See ( s , i ) then
1144: LD_VAR 0 6
1148: PPUSH
1149: LD_VAR 0 5
1153: PPUSH
1154: CALL_OW 292
1158: IFFALSE 1224
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1160: LD_ADDR_VAR 0 8
1164: PUSH
1165: LD_INT 22
1167: PUSH
1168: LD_VAR 0 6
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PPUSH
1177: CALL_OW 69
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL_OW 74
1191: ST_TO_ADDR
// if tmp2 in exceptUnits then
1192: LD_VAR 0 8
1196: PUSH
1197: LD_VAR 0 3
1201: IN
1202: IFFALSE 1208
// continue else
1204: GO 1141
1206: GO 1224
// begin result := tmp2 ;
1208: LD_ADDR_VAR 0 4
1212: PUSH
1213: LD_VAR 0 8
1217: ST_TO_ADDR
// exit ;
1218: POP
1219: POP
1220: POP
1221: POP
1222: GO 1232
// end ; end ;
1224: GO 1141
1226: POP
1227: POP
1228: GO 1128
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 4
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
// if cargoRecycled then
1241: LD_EXP 25
1245: IFFALSE 1273
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1247: LD_INT 82
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1260: LD_INT 83
1262: PPUSH
1263: LD_INT 2
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: CALL_OW 322
// end ; uc_side := 5 ;
1273: LD_ADDR_OWVAR 20
1277: PUSH
1278: LD_INT 5
1280: ST_TO_ADDR
// uc_nation := 2 ;
1281: LD_ADDR_OWVAR 21
1285: PUSH
1286: LD_INT 2
1288: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1289: LD_ADDR_EXP 37
1293: PUSH
1294: LD_STRING Abdul
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: LD_STRING 
1302: PPUSH
1303: CALL 39648 0 3
1307: ST_TO_ADDR
// uc_side := 2 ;
1308: LD_ADDR_OWVAR 20
1312: PUSH
1313: LD_INT 2
1315: ST_TO_ADDR
// uc_nation := 2 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 2
1323: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 26
1328: PUSH
1329: LD_STRING Heike
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 39648 0 3
1347: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 29
1352: PUSH
1353: LD_STRING Ibrahim
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 39648 0 3
1371: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 27
1376: PUSH
1377: LD_STRING Givi
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 39648 0 3
1395: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 30
1400: PUSH
1401: LD_STRING Kamil
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 39648 0 3
1419: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 31
1424: PUSH
1425: LD_STRING Kaia
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 39648 0 3
1443: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 32
1448: PUSH
1449: LD_STRING Sophia
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 39648 0 3
1467: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 33
1472: PUSH
1473: LD_STRING Markov
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 39648 0 3
1491: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 36
1496: PUSH
1497: LD_STRING Aviradze
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 39648 0 3
1515: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1516: LD_ADDR_EXP 40
1520: PUSH
1521: EMPTY
1522: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1523: LD_ADDR_EXP 38
1527: PUSH
1528: LD_STRING 03_others
1530: PPUSH
1531: CALL_OW 31
1535: ST_TO_ADDR
// uc_side := 5 ;
1536: LD_ADDR_OWVAR 20
1540: PUSH
1541: LD_INT 5
1543: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1544: LD_ADDR_EXP 35
1548: PUSH
1549: LD_STRING Kurt
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: LD_STRING 
1557: PPUSH
1558: CALL 39648 0 3
1562: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1563: LD_ADDR_EXP 28
1567: PUSH
1568: LD_STRING Mike
1570: PPUSH
1571: LD_EXP 1
1575: NOT
1576: PPUSH
1577: LD_EXP 2
1581: PPUSH
1582: CALL 39648 0 3
1586: ST_TO_ADDR
// if Mike then
1587: LD_EXP 28
1591: IFFALSE 1614
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1593: LD_EXP 28
1597: PPUSH
1598: LD_INT 142
1600: PPUSH
1601: LD_INT 63
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1614: LD_EXP 35
1618: PPUSH
1619: LD_INT 142
1621: PPUSH
1622: LD_INT 63
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1635: LD_EXP 35
1639: PUSH
1640: LD_EXP 28
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 140
// end ;
1653: LD_VAR 0 1
1657: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
// uc_side := 5 ;
1664: LD_ADDR_OWVAR 20
1668: PUSH
1669: LD_INT 5
1671: ST_TO_ADDR
// uc_nation := 2 ;
1672: LD_ADDR_OWVAR 21
1676: PUSH
1677: LD_INT 2
1679: ST_TO_ADDR
// InitHc ;
1680: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1684: LD_ADDR_EXP 34
1688: PUSH
1689: LD_STRING Omar
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: LD_STRING 
1697: PPUSH
1698: CALL 39648 0 3
1702: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1703: LD_EXP 34
1707: PPUSH
1708: LD_INT 284
1710: PPUSH
1711: LD_INT 163
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1721: LD_EXP 34
1725: PPUSH
1726: LD_INT 256
1728: PPUSH
1729: LD_INT 129
1731: PPUSH
1732: CALL_OW 111
// wait ( 0 0$2 ) ;
1736: LD_INT 70
1738: PPUSH
1739: CALL_OW 67
// omarSquad := [ ] ;
1743: LD_ADDR_EXP 39
1747: PUSH
1748: EMPTY
1749: ST_TO_ADDR
// for i := 1 to 5 do
1750: LD_ADDR_VAR 0 2
1754: PUSH
1755: DOUBLE
1756: LD_INT 1
1758: DEC
1759: ST_TO_ADDR
1760: LD_INT 5
1762: PUSH
1763: FOR_TO
1764: IFFALSE 1970
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1766: LD_INT 5
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: LD_VAR 0 2
1786: PUSH
1787: LD_INT 2
1789: MOD
1790: PUSH
1791: LD_INT 1
1793: PLUS
1794: ARRAY
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 25
1804: PUSH
1805: LD_INT 27
1807: PUSH
1808: LD_INT 26
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: LD_VAR 0 2
1820: PUSH
1821: LD_INT 3
1823: MOD
1824: PUSH
1825: LD_INT 1
1827: PLUS
1828: ARRAY
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 386 0 7
// veh := CreateVehicle ;
1837: LD_ADDR_VAR 0 4
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// omarSquad := omarSquad union veh ;
1859: LD_ADDR_EXP 39
1863: PUSH
1864: LD_EXP 39
1868: PUSH
1869: LD_VAR 0 4
1873: UNION
1874: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1875: LD_VAR 0 4
1879: PPUSH
1880: LD_INT 284
1882: PPUSH
1883: LD_INT 163
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_INT 3
1898: PPUSH
1899: LD_INT 2
1901: PPUSH
1902: CALL_OW 380
// un := CreateHuman ;
1906: LD_ADDR_VAR 0 3
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1916: LD_ADDR_EXP 39
1920: PUSH
1921: LD_EXP 39
1925: PUSH
1926: LD_VAR 0 3
1930: UNION
1931: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1932: LD_VAR 0 3
1936: PPUSH
1937: LD_VAR 0 4
1941: PPUSH
1942: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1946: LD_VAR 0 3
1950: PPUSH
1951: LD_INT 271
1953: PPUSH
1954: LD_INT 144
1956: PPUSH
1957: CALL_OW 111
// wait ( 0 0$2 ) ;
1961: LD_INT 70
1963: PPUSH
1964: CALL_OW 67
// end ;
1968: GO 1763
1970: POP
1971: POP
// for i := 1 to 3 do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_INT 3
1984: PUSH
1985: FOR_TO
1986: IFFALSE 2069
// begin PrepareHuman ( false , 1 , 2 ) ;
1988: LD_INT 0
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 2
1996: PPUSH
1997: CALL_OW 380
// un := CreateHuman ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: CALL_OW 44
2010: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2011: LD_ADDR_EXP 39
2015: PUSH
2016: LD_EXP 39
2020: PUSH
2021: LD_VAR 0 3
2025: UNION
2026: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_INT 284
2034: PPUSH
2035: LD_INT 163
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 257
2052: PPUSH
2053: LD_INT 138
2055: PPUSH
2056: CALL_OW 111
// wait ( 0 0$1 ) ;
2060: LD_INT 35
2062: PPUSH
2063: CALL_OW 67
// end ;
2067: GO 1985
2069: POP
2070: POP
// for i := 1 to 6 do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: DOUBLE
2077: LD_INT 1
2079: DEC
2080: ST_TO_ADDR
2081: LD_INT 6
2083: PUSH
2084: FOR_TO
2085: IFFALSE 2218
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2087: LD_INT 0
2089: PPUSH
2090: LD_INT 1
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_INT 3
2111: MOD
2112: PUSH
2113: LD_INT 1
2115: PLUS
2116: ARRAY
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: CALL_OW 380
// un := CreateHuman ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: CALL_OW 44
2134: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2135: LD_ADDR_EXP 39
2139: PUSH
2140: LD_EXP 39
2144: PUSH
2145: LD_VAR 0 3
2149: UNION
2150: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2151: LD_VAR 0 3
2155: PPUSH
2156: LD_INT 225
2158: PPUSH
2159: LD_INT 163
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// if i = 1 then
2169: LD_VAR 0 2
2173: PUSH
2174: LD_INT 1
2176: EQUAL
2177: IFFALSE 2194
// SetAttr ( un , attr_speed , 12 ) ;
2179: LD_VAR 0 3
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: LD_INT 12
2189: PPUSH
2190: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2194: LD_VAR 0 3
2198: PPUSH
2199: LD_INT 222
2201: PPUSH
2202: LD_INT 157
2204: PPUSH
2205: CALL_OW 111
// wait ( 0 0$1 ) ;
2209: LD_INT 35
2211: PPUSH
2212: CALL_OW 67
// end ;
2216: GO 2084
2218: POP
2219: POP
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 149
2238: PPUSH
2239: LD_INT 67
2241: PPUSH
2242: CALL_OW 428
2246: PPUSH
2247: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2251: LD_ADDR_EXP 51
2255: PUSH
2256: LD_INT 111
2258: PPUSH
2259: LD_INT 89
2261: PPUSH
2262: CALL_OW 428
2266: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: LD_INT 21
2274: PUSH
2275: LD_INT 3
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 23
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: FOR_IN
2302: IFFALSE 2318
// SetBLevel ( i , 5 ) ;
2304: LD_VAR 0 2
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 241
2316: GO 2301
2318: POP
2319: POP
// SetBName ( kirov , kirov ) ;
2320: LD_INT 71
2322: PPUSH
2323: LD_STRING kirov
2325: PPUSH
2326: CALL_OW 500
// SetBName ( beria , beria ) ;
2330: LD_INT 106
2332: PPUSH
2333: LD_STRING beria
2335: PPUSH
2336: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2340: LD_INT 112
2342: PPUSH
2343: LD_STRING kagan
2345: PPUSH
2346: CALL_OW 500
// uc_side := 6 ;
2350: LD_ADDR_OWVAR 20
2354: PUSH
2355: LD_INT 6
2357: ST_TO_ADDR
// uc_nation := 3 ;
2358: LD_ADDR_OWVAR 21
2362: PUSH
2363: LD_INT 3
2365: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2366: LD_ADDR_VAR 0 5
2370: PUSH
2371: LD_INT 22
2373: PUSH
2374: LD_INT 6
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 30
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PPUSH
2395: CALL_OW 69
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: LD_INT 22
2411: PUSH
2412: LD_INT 6
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PPUSH
2433: CALL_OW 69
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2442: LD_ADDR_EXP 45
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2449: LD_ADDR_EXP 46
2453: PUSH
2454: EMPTY
2455: ST_TO_ADDR
// russianPatrol := [ ] ;
2456: LD_ADDR_EXP 48
2460: PUSH
2461: EMPTY
2462: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Kurin
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 39648 0 3
2481: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 71
2489: PPUSH
2490: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2494: LD_ADDR_EXP 43
2498: PUSH
2499: LD_STRING Popov
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: LD_STRING 
2507: PPUSH
2508: CALL 39648 0 3
2512: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2513: LD_EXP 43
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2525: LD_ADDR_EXP 42
2529: PUSH
2530: LD_STRING Grishko
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 39648 0 3
2543: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2544: LD_EXP 42
2548: PPUSH
2549: LD_INT 207
2551: PPUSH
2552: LD_INT 106
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2562: LD_EXP 42
2566: PPUSH
2567: LD_INT 209
2569: PPUSH
2570: LD_INT 106
2572: PPUSH
2573: CALL_OW 118
// for i := 1 to 2 do
2577: LD_ADDR_VAR 0 2
2581: PUSH
2582: DOUBLE
2583: LD_INT 1
2585: DEC
2586: ST_TO_ADDR
2587: LD_INT 2
2589: PUSH
2590: FOR_TO
2591: IFFALSE 2646
// begin PrepareHuman ( false , 2 , 2 ) ;
2593: LD_INT 0
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 380
// un := CreateHuman ;
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: CALL_OW 44
2615: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 71
2623: PPUSH
2624: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2628: LD_ADDR_EXP 45
2632: PUSH
2633: LD_EXP 45
2637: PUSH
2638: LD_VAR 0 3
2642: UNION
2643: ST_TO_ADDR
// end ;
2644: GO 2590
2646: POP
2647: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2648: LD_ADDR_VAR 0 2
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 5
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: LD_INT 6
2666: PUSH
2667: LD_INT 6
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: PUSH
2676: LD_OWVAR 67
2680: ARRAY
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2761
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: LD_INT 2
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: LD_INT 4
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PPUSH
2715: CALL_OW 380
// un := CreateHuman ;
2719: LD_ADDR_VAR 0 3
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2729: LD_VAR 0 3
2733: PPUSH
2734: LD_VAR 0 5
2738: PPUSH
2739: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2743: LD_ADDR_EXP 45
2747: PUSH
2748: LD_EXP 45
2752: PUSH
2753: LD_VAR 0 3
2757: UNION
2758: ST_TO_ADDR
// end ;
2759: GO 2682
2761: POP
2762: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2763: LD_ADDR_VAR 0 2
2767: PUSH
2768: LD_INT 22
2770: PUSH
2771: LD_INT 6
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 30
2780: PUSH
2781: LD_INT 32
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: FOR_IN
2798: IFFALSE 2876
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 4
2811: PUSH
2812: LD_INT 4
2814: PUSH
2815: LD_INT 5
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: LD_OWVAR 67
2828: ARRAY
2829: PPUSH
2830: CALL_OW 380
// un := CreateHuman ;
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: CALL_OW 44
2843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2844: LD_VAR 0 3
2848: PPUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2858: LD_ADDR_EXP 45
2862: PUSH
2863: LD_EXP 45
2867: PUSH
2868: LD_VAR 0 3
2872: UNION
2873: ST_TO_ADDR
// end ;
2874: GO 2797
2876: POP
2877: POP
// for i := 1 to 3 do
2878: LD_ADDR_VAR 0 2
2882: PUSH
2883: DOUBLE
2884: LD_INT 1
2886: DEC
2887: ST_TO_ADDR
2888: LD_INT 3
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2947
// begin PrepareHuman ( false , 3 , 3 ) ;
2894: LD_INT 0
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: LD_INT 3
2902: PPUSH
2903: CALL_OW 380
// un := CreateHuman ;
2907: LD_ADDR_VAR 0 3
2911: PUSH
2912: CALL_OW 44
2916: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 92
2924: PPUSH
2925: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2929: LD_ADDR_EXP 45
2933: PUSH
2934: LD_EXP 45
2938: PUSH
2939: LD_VAR 0 3
2943: UNION
2944: ST_TO_ADDR
// end ;
2945: GO 2891
2947: POP
2948: POP
// for i := 1 to 2 do
2949: LD_ADDR_VAR 0 2
2953: PUSH
2954: DOUBLE
2955: LD_INT 1
2957: DEC
2958: ST_TO_ADDR
2959: LD_INT 2
2961: PUSH
2962: FOR_TO
2963: IFFALSE 3018
// begin PrepareHuman ( false , 4 , 3 ) ;
2965: LD_INT 0
2967: PPUSH
2968: LD_INT 4
2970: PPUSH
2971: LD_INT 3
2973: PPUSH
2974: CALL_OW 380
// un := CreateHuman ;
2978: LD_ADDR_VAR 0 3
2982: PUSH
2983: CALL_OW 44
2987: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 83
2995: PPUSH
2996: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3000: LD_ADDR_EXP 45
3004: PUSH
3005: LD_EXP 45
3009: PUSH
3010: LD_VAR 0 3
3014: UNION
3015: ST_TO_ADDR
// end ;
3016: GO 2962
3018: POP
3019: POP
// for i := 1 to 5 do
3020: LD_ADDR_VAR 0 2
3024: PUSH
3025: DOUBLE
3026: LD_INT 1
3028: DEC
3029: ST_TO_ADDR
3030: LD_INT 5
3032: PUSH
3033: FOR_TO
3034: IFFALSE 3091
// begin PrepareHuman ( false , 1 , 3 ) ;
3036: LD_INT 0
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3059: LD_VAR 0 3
3063: PPUSH
3064: LD_VAR 0 4
3068: PPUSH
3069: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3073: LD_ADDR_EXP 47
3077: PUSH
3078: LD_EXP 47
3082: PUSH
3083: LD_VAR 0 3
3087: UNION
3088: ST_TO_ADDR
// end ;
3089: GO 3033
3091: POP
3092: POP
// russianCargo := [ ] ;
3093: LD_ADDR_EXP 50
3097: PUSH
3098: EMPTY
3099: ST_TO_ADDR
// for i := 1 to 2 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: DOUBLE
3106: LD_INT 1
3108: DEC
3109: ST_TO_ADDR
3110: LD_INT 2
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3246
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3116: LD_INT 6
3118: PPUSH
3119: LD_INT 3
3121: PPUSH
3122: LD_INT 21
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 51
3133: PPUSH
3134: LD_INT 100
3136: PPUSH
3137: CALL 386 0 7
// un := CreateVehicle ;
3141: LD_ADDR_VAR 0 3
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3151: LD_ADDR_EXP 50
3155: PUSH
3156: LD_EXP 50
3160: PUSH
3161: LD_VAR 0 3
3165: UNION
3166: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 2
3174: PPUSH
3175: LD_INT 100
3177: PPUSH
3178: CALL_OW 290
// SetDir ( un , 4 ) ;
3182: LD_VAR 0 3
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3194: LD_VAR 0 3
3198: PPUSH
3199: LD_INT 147
3201: PPUSH
3202: LD_INT 103
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 0
3210: PPUSH
3211: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3215: LD_INT 0
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_OWVAR 67
3225: PPUSH
3226: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3230: CALL_OW 44
3234: PPUSH
3235: LD_VAR 0 3
3239: PPUSH
3240: CALL_OW 52
// end ;
3244: GO 3113
3246: POP
3247: POP
// uc_side := 3 ;
3248: LD_ADDR_OWVAR 20
3252: PUSH
3253: LD_INT 3
3255: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3256: LD_ADDR_EXP 44
3260: PUSH
3261: LD_STRING Burlak
3263: PPUSH
3264: LD_INT 0
3266: PPUSH
3267: LD_STRING 
3269: PPUSH
3270: CALL 39648 0 3
3274: ST_TO_ADDR
// for i := 1 to 5 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3382
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3291: LD_INT 0
3293: PPUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_OWVAR 67
3301: PUSH
3302: LD_INT 1
3304: PLUS
3305: PPUSH
3306: CALL_OW 380
// un := CreateHuman ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: CALL_OW 44
3319: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3320: LD_VAR 0 3
3324: PPUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 32
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3364: LD_ADDR_EXP 46
3368: PUSH
3369: LD_EXP 46
3373: PUSH
3374: LD_VAR 0 3
3378: UNION
3379: ST_TO_ADDR
// end ;
3380: GO 3288
3382: POP
3383: POP
// for i := 1 to 2 do
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 2
3396: PUSH
3397: FOR_TO
3398: IFFALSE 3489
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_OWVAR 67
3410: PUSH
3411: LD_INT 1
3413: PLUS
3414: PPUSH
3415: CALL_OW 380
// un := CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: LD_INT 22
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 30
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: CALL_OW 69
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3471: LD_ADDR_EXP 46
3475: PUSH
3476: LD_EXP 46
3480: PUSH
3481: LD_VAR 0 3
3485: UNION
3486: ST_TO_ADDR
// end ;
3487: GO 3397
3489: POP
3490: POP
// for i := 1 to 2 do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 2
3503: PUSH
3504: FOR_TO
3505: IFFALSE 3592
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3507: LD_INT 0
3509: PPUSH
3510: LD_INT 4
3512: PPUSH
3513: LD_OWVAR 67
3517: PPUSH
3518: CALL_OW 380
// un := CreateHuman ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: CALL_OW 44
3531: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 22
3539: PUSH
3540: LD_INT 3
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3574: LD_ADDR_EXP 46
3578: PUSH
3579: LD_EXP 46
3583: PUSH
3584: LD_VAR 0 3
3588: UNION
3589: ST_TO_ADDR
// end ;
3590: GO 3504
3592: POP
3593: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3594: LD_INT 0
3596: PPUSH
3597: LD_INT 2
3599: PPUSH
3600: LD_OWVAR 67
3604: PPUSH
3605: CALL_OW 380
// un := CreateHuman ;
3609: LD_ADDR_VAR 0 3
3613: PUSH
3614: CALL_OW 44
3618: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3619: LD_VAR 0 3
3623: PPUSH
3624: LD_INT 106
3626: PPUSH
3627: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3631: LD_ADDR_EXP 46
3635: PUSH
3636: LD_EXP 46
3640: PUSH
3641: LD_VAR 0 3
3645: UNION
3646: ST_TO_ADDR
// for i := 1 to 3 do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 3
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3783
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3663: LD_ADDR_VAR 0 6
3667: PUSH
3668: LD_INT 22
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 31
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3703: LD_INT 0
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_OWVAR 67
3713: PPUSH
3714: CALL_OW 380
// un := CreateHuman ;
3718: LD_ADDR_VAR 0 3
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3728: LD_VAR 0 3
3732: PPUSH
3733: LD_VAR 0 6
3737: PPUSH
3738: CALL_OW 254
3742: PUSH
3743: LD_INT 3
3745: PLUS
3746: PPUSH
3747: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: LD_VAR 0 6
3760: PPUSH
3761: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3765: LD_ADDR_EXP 46
3769: PUSH
3770: LD_EXP 46
3774: PUSH
3775: LD_VAR 0 3
3779: UNION
3780: ST_TO_ADDR
// end ;
3781: GO 3660
3783: POP
3784: POP
// if Difficulty > 1 then
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: GREATER
3793: IFFALSE 3868
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3795: LD_ADDR_VAR 0 3
3799: PUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 3
3805: PPUSH
3806: LD_INT 23
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_INT 44
3817: PPUSH
3818: LD_INT 100
3820: PPUSH
3821: CALL 386 0 7
3825: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3826: LD_VAR 0 3
3830: PPUSH
3831: LD_INT 73
3833: PPUSH
3834: LD_INT 110
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3844: LD_INT 0
3846: PPUSH
3847: LD_INT 3
3849: PPUSH
3850: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3854: CALL_OW 44
3858: PPUSH
3859: LD_VAR 0 3
3863: PPUSH
3864: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3868: LD_ADDR_EXP 49
3872: PUSH
3873: EMPTY
3874: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3875: LD_ADDR_VAR 0 2
3879: PUSH
3880: DOUBLE
3881: LD_INT 1
3883: DEC
3884: ST_TO_ADDR
3885: LD_INT 6
3887: PUSH
3888: LD_INT 7
3890: PUSH
3891: LD_INT 8
3893: PUSH
3894: LD_INT 8
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: PUSH
3903: LD_OWVAR 67
3907: ARRAY
3908: PUSH
3909: FOR_TO
3910: IFFALSE 4134
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 3
3917: PPUSH
3918: LD_INT 21
3920: PUSH
3921: LD_INT 23
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 2
3935: MOD
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: ARRAY
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 43
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 42
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PUSH
3962: LD_VAR 0 2
3966: PUSH
3967: LD_INT 3
3969: MOD
3970: PUSH
3971: LD_INT 1
3973: PLUS
3974: ARRAY
3975: PPUSH
3976: LD_INT 100
3978: PPUSH
3979: CALL 386 0 7
// un := CreateVehicle ;
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: CALL_OW 45
3992: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3993: LD_VAR 0 3
3997: PPUSH
3998: LD_INT 0
4000: PUSH
4001: LD_INT 5
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 1
4010: PPUSH
4011: LD_INT 2
4013: PPUSH
4014: CALL_OW 12
4018: ARRAY
4019: PPUSH
4020: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4024: LD_ADDR_EXP 49
4028: PUSH
4029: LD_EXP 49
4033: PUSH
4034: LD_VAR 0 3
4038: UNION
4039: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 127
4047: PPUSH
4048: LD_INT 89
4050: PPUSH
4051: LD_INT 7
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 50
// uc_side := 3 ;
4061: LD_ADDR_OWVAR 20
4065: PUSH
4066: LD_INT 3
4068: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4069: LD_INT 0
4071: PPUSH
4072: LD_INT 3
4074: PPUSH
4075: LD_INT 3
4077: PPUSH
4078: CALL_OW 380
// un := CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4092: LD_ADDR_EXP 49
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_VAR 0 3
4106: UNION
4107: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_EXP 49
4117: PUSH
4118: LD_EXP 49
4122: PUSH
4123: LD_INT 1
4125: MINUS
4126: ARRAY
4127: PPUSH
4128: CALL_OW 52
// end ;
4132: GO 3909
4134: POP
4135: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_INT 1
4144: DEC
4145: ST_TO_ADDR
4146: LD_INT 3
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: LD_INT 5
4154: PUSH
4155: LD_INT 6
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4237
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_OWVAR 67
4183: PPUSH
4184: CALL_OW 380
// un := CreateHuman ;
4188: LD_ADDR_VAR 0 3
4192: PUSH
4193: CALL_OW 44
4197: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4198: LD_ADDR_EXP 49
4202: PUSH
4203: LD_EXP 49
4207: PUSH
4208: LD_VAR 0 3
4212: UNION
4213: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 91
4221: PPUSH
4222: LD_INT 60
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 50
// end ;
4235: GO 4170
4237: POP
4238: POP
// end ;
4239: LD_VAR 0 1
4243: RET
// every 0 0$3 do var i ;
4244: GO 4246
4246: DISABLE
4247: LD_INT 0
4249: PPUSH
// begin for i := 1 to 4 do
4250: LD_ADDR_VAR 0 1
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 4
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4283
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4266: LD_EXP 47
4270: PUSH
4271: LD_VAR 0 1
4275: ARRAY
4276: PPUSH
4277: CALL_OW 122
4281: GO 4263
4283: POP
4284: POP
// wait ( 3 ) ;
4285: LD_INT 3
4287: PPUSH
4288: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4292: LD_EXP 47
4296: PUSH
4297: LD_INT 1
4299: ARRAY
4300: PPUSH
4301: LD_INT 22
4303: PUSH
4304: LD_INT 6
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 30
4313: PUSH
4314: LD_INT 31
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 69
4329: PPUSH
4330: LD_EXP 47
4334: PUSH
4335: LD_INT 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 74
4343: PPUSH
4344: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4348: LD_EXP 47
4352: PUSH
4353: LD_INT 2
4355: ARRAY
4356: PPUSH
4357: LD_INT 211
4359: PPUSH
4360: LD_INT 107
4362: PPUSH
4363: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4367: LD_EXP 47
4371: PUSH
4372: LD_INT 2
4374: ARRAY
4375: PPUSH
4376: LD_INT 209
4378: PPUSH
4379: LD_INT 106
4381: PPUSH
4382: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4386: LD_EXP 47
4390: PUSH
4391: LD_INT 3
4393: ARRAY
4394: PPUSH
4395: LD_INT 209
4397: PPUSH
4398: LD_INT 103
4400: PPUSH
4401: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4405: LD_EXP 47
4409: PUSH
4410: LD_INT 3
4412: ARRAY
4413: PPUSH
4414: LD_INT 209
4416: PPUSH
4417: LD_INT 106
4419: PPUSH
4420: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4424: LD_EXP 47
4428: PUSH
4429: LD_INT 4
4431: ARRAY
4432: PPUSH
4433: LD_INT 227
4435: PPUSH
4436: LD_INT 117
4438: PPUSH
4439: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4443: LD_EXP 47
4447: PUSH
4448: LD_INT 4
4450: ARRAY
4451: PPUSH
4452: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4456: LD_INT 700
4458: PPUSH
4459: CALL_OW 67
// for i := 3 downto 2 do
4463: LD_ADDR_VAR 0 1
4467: PUSH
4468: DOUBLE
4469: LD_INT 3
4471: INC
4472: ST_TO_ADDR
4473: LD_INT 2
4475: PUSH
4476: FOR_DOWNTO
4477: IFFALSE 4644
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4479: LD_EXP 47
4483: PUSH
4484: LD_VAR 0 1
4488: ARRAY
4489: PPUSH
4490: LD_INT 200
4492: PPUSH
4493: LD_INT 91
4495: PPUSH
4496: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4500: LD_EXP 47
4504: PUSH
4505: LD_VAR 0 1
4509: ARRAY
4510: PPUSH
4511: LD_INT 210
4513: PPUSH
4514: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_VAR 0 1
4527: ARRAY
4528: PPUSH
4529: LD_INT 224
4531: PPUSH
4532: LD_INT 93
4534: PPUSH
4535: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4539: LD_EXP 47
4543: PUSH
4544: LD_VAR 0 1
4548: ARRAY
4549: PPUSH
4550: LD_INT 210
4552: PPUSH
4553: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4557: LD_EXP 47
4561: PUSH
4562: LD_VAR 0 1
4566: ARRAY
4567: PPUSH
4568: LD_INT 239
4570: PPUSH
4571: LD_INT 123
4573: PPUSH
4574: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4578: LD_EXP 47
4582: PUSH
4583: LD_VAR 0 1
4587: ARRAY
4588: PPUSH
4589: LD_INT 210
4591: PPUSH
4592: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4596: LD_EXP 47
4600: PUSH
4601: LD_VAR 0 1
4605: ARRAY
4606: PPUSH
4607: LD_INT 212
4609: PPUSH
4610: LD_INT 105
4612: PPUSH
4613: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4617: LD_EXP 47
4621: PUSH
4622: LD_VAR 0 1
4626: ARRAY
4627: PPUSH
4628: LD_INT 700
4630: PPUSH
4631: CALL_OW 202
// wait ( 0 0$30 ) ;
4635: LD_INT 1050
4637: PPUSH
4638: CALL_OW 67
// end ;
4642: GO 4476
4644: POP
4645: POP
// until not activeGrishkoAI ;
4646: LD_EXP 10
4650: NOT
4651: IFFALSE 4456
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_INT 221
4660: PPUSH
4661: LD_INT 110
4663: PPUSH
4664: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4668: LD_EXP 47
4672: PPUSH
4673: LD_INT 228
4675: PPUSH
4676: LD_INT 115
4678: PPUSH
4679: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4683: LD_EXP 47
4687: PPUSH
4688: CALL_OW 200
// end ;
4692: PPOPN 1
4694: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4695: LD_EXP 12
4699: IFFALSE 5449
4701: GO 4703
4703: DISABLE
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
// begin uc_side := 6 ;
4710: LD_ADDR_OWVAR 20
4714: PUSH
4715: LD_INT 6
4717: ST_TO_ADDR
// uc_nation := 3 ;
4718: LD_ADDR_OWVAR 21
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// for i := 1 to 3 do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: DOUBLE
4732: LD_INT 1
4734: DEC
4735: ST_TO_ADDR
4736: LD_INT 3
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4853
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4742: LD_INT 0
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: LD_INT 4
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 1
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4786: LD_ADDR_EXP 48
4790: PUSH
4791: LD_EXP 48
4795: PUSH
4796: LD_VAR 0 1
4800: UNION
4801: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4814: LD_VAR 0 1
4818: PPUSH
4819: LD_INT 11
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4829: LD_VAR 0 1
4833: PPUSH
4834: LD_INT 210
4836: PPUSH
4837: LD_INT 159
4839: PPUSH
4840: CALL_OW 111
// wait ( 0 0$2 ) ;
4844: LD_INT 70
4846: PPUSH
4847: CALL_OW 67
// end ;
4851: GO 4739
4853: POP
4854: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4855: LD_ADDR_VAR 0 4
4859: PUSH
4860: LD_INT 172
4862: PUSH
4863: LD_INT 76
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 150
4872: PUSH
4873: LD_INT 38
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 148
4882: PUSH
4883: LD_INT 9
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 165
4892: PUSH
4893: LD_INT 38
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 191
4908: PUSH
4909: LD_INT 77
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 168
4918: PUSH
4919: LD_INT 42
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 166
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 151
4938: PUSH
4939: LD_INT 12
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 221
4954: PUSH
4955: LD_INT 88
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 217
4964: PUSH
4965: LD_INT 64
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 232
4974: PUSH
4975: LD_INT 66
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 200
4984: PUSH
4985: LD_INT 56
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// for i := russianPatrol downto 1 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_EXP 48
5020: INC
5021: ST_TO_ADDR
5022: LD_INT 1
5024: PUSH
5025: FOR_DOWNTO
5026: IFFALSE 5411
// begin if IsDead ( russianPatrol [ i ] ) then
5028: LD_EXP 48
5032: PUSH
5033: LD_VAR 0 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 301
5043: IFFALSE 5047
// continue ;
5045: GO 5025
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5047: LD_EXP 48
5051: PUSH
5052: LD_VAR 0 2
5056: ARRAY
5057: PPUSH
5058: CALL_OW 256
5062: PUSH
5063: LD_INT 990
5065: LESS
5066: IFFALSE 5089
5068: PUSH
5069: LD_EXP 48
5073: PUSH
5074: LD_VAR 0 2
5078: ARRAY
5079: PPUSH
5080: CALL_OW 110
5084: PUSH
5085: LD_INT 1
5087: EQUAL
5088: AND
5089: IFFALSE 5109
// SetTag ( russianPatrol [ i ] , 2 ) ;
5091: LD_EXP 48
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: PPUSH
5102: LD_INT 2
5104: PPUSH
5105: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5109: LD_EXP 48
5113: PUSH
5114: LD_VAR 0 2
5118: ARRAY
5119: PPUSH
5120: CALL_OW 110
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: IFFALSE 5195
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5130: LD_EXP 48
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_INT 166
5143: PPUSH
5144: LD_INT 101
5146: PPUSH
5147: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5151: LD_EXP 48
5155: PUSH
5156: LD_VAR 0 2
5160: ARRAY
5161: PPUSH
5162: LD_INT 71
5164: PPUSH
5165: CALL_OW 296
5169: PUSH
5170: LD_INT 10
5172: LESS
5173: IFFALSE 5193
// SetTag ( russianPatrol [ i ] , 3 ) ;
5175: LD_EXP 48
5179: PUSH
5180: LD_VAR 0 2
5184: ARRAY
5185: PPUSH
5186: LD_INT 3
5188: PPUSH
5189: CALL_OW 109
// continue ;
5193: GO 5025
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5195: LD_EXP 48
5199: PUSH
5200: LD_VAR 0 2
5204: ARRAY
5205: PPUSH
5206: CALL_OW 110
5210: PUSH
5211: LD_INT 3
5213: EQUAL
5214: IFFALSE 5309
// begin spottedByPatrol := true ;
5216: LD_ADDR_EXP 7
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5224: LD_EXP 48
5228: PUSH
5229: LD_VAR 0 2
5233: ARRAY
5234: PPUSH
5235: CALL_OW 250
5239: PPUSH
5240: LD_EXP 48
5244: PUSH
5245: LD_VAR 0 2
5249: ARRAY
5250: PPUSH
5251: CALL_OW 251
5255: PPUSH
5256: LD_INT 2
5258: PPUSH
5259: LD_INT 6
5261: NEG
5262: PPUSH
5263: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5267: LD_EXP 48
5271: PUSH
5272: LD_VAR 0 2
5276: ARRAY
5277: PPUSH
5278: CALL_OW 87
// DialogueOn ;
5282: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5286: LD_EXP 26
5290: PPUSH
5291: LD_STRING DH-Spot-f-3
5293: PPUSH
5294: CALL_OW 88
// DialogueOff ;
5298: CALL_OW 7
// YouLost ( Spotted ) ;
5302: LD_STRING Spotted
5304: PPUSH
5305: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5309: LD_EXP 48
5313: PUSH
5314: LD_VAR 0 2
5318: ARRAY
5319: PPUSH
5320: CALL_OW 314
5324: NOT
5325: IFFALSE 5409
// for j in patrol [ i ] do
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_VAR 0 4
5336: PUSH
5337: LD_VAR 0 2
5341: ARRAY
5342: PUSH
5343: FOR_IN
5344: IFFALSE 5407
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5346: LD_EXP 48
5350: PUSH
5351: LD_VAR 0 2
5355: ARRAY
5356: PPUSH
5357: LD_INT 35
5359: PPUSH
5360: LD_INT 175
5362: PPUSH
5363: CALL_OW 12
5367: PPUSH
5368: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5372: LD_EXP 48
5376: PUSH
5377: LD_VAR 0 2
5381: ARRAY
5382: PPUSH
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 1
5390: ARRAY
5391: PPUSH
5392: LD_VAR 0 3
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 174
// end ;
5405: GO 5343
5407: POP
5408: POP
// end ;
5409: GO 5025
5411: POP
5412: POP
// until not russianPatrol or russianAlert ;
5413: LD_EXP 48
5417: NOT
5418: IFTRUE 5426
5420: PUSH
5421: LD_EXP 9
5425: OR
5426: IFFALSE 5003
// if russianPatrol then
5428: LD_EXP 48
5432: IFFALSE 5449
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5434: LD_EXP 48
5438: PPUSH
5439: LD_INT 161
5441: PPUSH
5442: LD_INT 107
5444: PPUSH
5445: CALL_OW 114
// end ;
5449: PPOPN 4
5451: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5452: LD_EXP 6
5456: IFFALSE 5465
5458: PUSH
5459: LD_EXP 13
5463: NOT
5464: AND
5465: IFFALSE 5961
5467: GO 5469
5469: DISABLE
5470: LD_INT 0
5472: PPUSH
5473: PPUSH
5474: PPUSH
5475: PPUSH
5476: PPUSH
// begin enable ;
5477: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_EXP 49
5487: PPUSH
5488: LD_INT 21
5490: PUSH
5491: LD_INT 2
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 72
5502: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_INT 22
5510: PUSH
5511: LD_INT 4
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PPUSH
5518: CALL_OW 69
5522: ST_TO_ADDR
// for i in filter do
5523: LD_ADDR_VAR 0 1
5527: PUSH
5528: LD_VAR 0 2
5532: PUSH
5533: FOR_IN
5534: IFFALSE 5959
// begin tmp := IsDrivenBy ( i ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 311
5550: ST_TO_ADDR
// if not tmp then
5551: LD_VAR 0 3
5555: NOT
5556: IFFALSE 5560
// continue ;
5558: GO 5533
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5560: LD_VAR 0 1
5564: PPUSH
5565: CALL_OW 261
5569: PUSH
5570: LD_INT 90
5572: GREATER
5573: IFFALSE 5590
5575: PUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 110
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: AND
5590: IFFALSE 5606
// SetTag ( i , 0 ) else
5592: LD_VAR 0 1
5596: PPUSH
5597: LD_INT 0
5599: PPUSH
5600: CALL_OW 109
5604: GO 5702
// if GetTag ( i ) = 2 then
5606: LD_VAR 0 1
5610: PPUSH
5611: CALL_OW 110
5615: PUSH
5616: LD_INT 2
5618: EQUAL
5619: IFFALSE 5702
// begin x := rand ( 1 , 2 ) ;
5621: LD_ADDR_VAR 0 5
5625: PUSH
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 2
5631: PPUSH
5632: CALL_OW 12
5636: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5637: LD_VAR 0 1
5641: PPUSH
5642: LD_EXP 50
5646: PUSH
5647: LD_VAR 0 5
5651: ARRAY
5652: PPUSH
5653: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5657: LD_EXP 50
5661: PUSH
5662: LD_VAR 0 5
5666: ARRAY
5667: PPUSH
5668: LD_INT 2
5670: PPUSH
5671: CALL_OW 289
5675: PUSH
5676: LD_INT 20
5678: LESS
5679: IFFALSE 5702
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5681: LD_EXP 50
5685: PUSH
5686: LD_VAR 0 5
5690: ARRAY
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: LD_INT 100
5697: PPUSH
5698: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 256
5711: PUSH
5712: LD_INT 600
5714: GREATEREQUAL
5715: IFFALSE 5729
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 110
5727: NOT
5728: AND
5729: IFFALSE 5755
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 4
5740: PPUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 74
5750: PPUSH
5751: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 256
5764: PUSH
5765: LD_INT 600
5767: LESS
5768: IFFALSE 5782
5770: PUSH
5771: LD_VAR 0 1
5775: PPUSH
5776: CALL_OW 110
5780: NOT
5781: AND
5782: IFFALSE 5811
// begin SetTag ( i , 1 ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5796: LD_VAR 0 1
5800: PPUSH
5801: LD_INT 62
5803: PPUSH
5804: LD_INT 22
5806: PPUSH
5807: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5811: LD_VAR 0 1
5815: PPUSH
5816: CALL_OW 110
5820: PUSH
5821: LD_INT 1
5823: EQUAL
5824: IFFALSE 5847
5826: PUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: LD_INT 62
5834: PPUSH
5835: LD_INT 22
5837: PPUSH
5838: CALL_OW 297
5842: PUSH
5843: LD_INT 6
5845: LESS
5846: AND
5847: IFFALSE 5855
5849: PUSH
5850: LD_VAR 0 3
5854: AND
5855: IFFALSE 5957
// begin ComExitVehicle ( tmp ) ;
5857: LD_VAR 0 3
5861: PPUSH
5862: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5866: LD_VAR 0 3
5870: PPUSH
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5880: LD_INT 35
5882: PPUSH
5883: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 256
5896: PUSH
5897: LD_INT 1000
5899: EQUAL
5900: IFFALSE 5880
// ComEnterUnit ( tmp , i ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 261
5925: PUSH
5926: LD_INT 90
5928: LESSEQUAL
5929: IFFALSE 5945
// SetTag ( i , 2 ) else
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: CALL_OW 109
5943: GO 5957
// SetTag ( i , 0 ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_INT 0
5952: PPUSH
5953: CALL_OW 109
// end ; end ;
5957: GO 5533
5959: POP
5960: POP
// end ;
5961: PPOPN 5
5963: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5964: LD_EXP 20
5968: IFFALSE 6191
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5977: LD_EXP 50
5981: PPUSH
5982: LD_INT 79
5984: PPUSH
5985: LD_INT 155
5987: PPUSH
5988: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5992: LD_EXP 50
5996: PPUSH
5997: LD_INT 16
5999: PPUSH
6000: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_EXP 49
6013: PPUSH
6014: LD_INT 50
6016: PUSH
6017: EMPTY
6018: LIST
6019: PPUSH
6020: CALL_OW 72
6024: ST_TO_ADDR
// for i in tmp do
6025: LD_ADDR_VAR 0 1
6029: PUSH
6030: LD_VAR 0 2
6034: PUSH
6035: FOR_IN
6036: IFFALSE 6070
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6038: LD_VAR 0 1
6042: PPUSH
6043: LD_INT 123
6045: PPUSH
6046: LD_INT 60
6048: PPUSH
6049: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6053: LD_VAR 0 1
6057: PPUSH
6058: LD_INT 153
6060: PPUSH
6061: LD_INT 103
6063: PPUSH
6064: CALL_OW 174
// end ;
6068: GO 6035
6070: POP
6071: POP
// repeat wait ( 0 0$1 ) ;
6072: LD_INT 35
6074: PPUSH
6075: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6079: LD_ADDR_VAR 0 2
6083: PUSH
6084: LD_EXP 49
6088: PPUSH
6089: LD_INT 50
6091: PUSH
6092: EMPTY
6093: LIST
6094: PPUSH
6095: CALL_OW 72
6099: ST_TO_ADDR
// for i in tmp do
6100: LD_ADDR_VAR 0 1
6104: PUSH
6105: LD_VAR 0 2
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6182
// if not HasTask ( i ) then
6113: LD_VAR 0 1
6117: PPUSH
6118: CALL_OW 314
6122: NOT
6123: IFFALSE 6180
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6125: LD_VAR 0 1
6129: PPUSH
6130: LD_INT 81
6132: PUSH
6133: LD_INT 3
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 3
6142: PUSH
6143: LD_INT 21
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: PPUSH
6166: LD_VAR 0 1
6170: PPUSH
6171: CALL_OW 74
6175: PPUSH
6176: CALL_OW 115
6180: GO 6110
6182: POP
6183: POP
6184: LD_VAR 0 2
6188: NOT
6189: IFFALSE 6072
// end ;
6191: PPOPN 2
6193: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6194: LD_INT 22
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 32
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: IFFALSE 6301
6224: GO 6226
6226: DISABLE
6227: LD_INT 0
6229: PPUSH
// begin enable ;
6230: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6231: LD_ADDR_VAR 0 1
6235: PUSH
6236: LD_INT 22
6238: PUSH
6239: LD_INT 3
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 32
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 69
6264: PUSH
6265: FOR_IN
6266: IFFALSE 6299
// if GetFuel ( i ) < 1 then
6268: LD_VAR 0 1
6272: PPUSH
6273: CALL_OW 261
6277: PUSH
6278: LD_INT 1
6280: LESS
6281: IFFALSE 6297
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 311
6292: PPUSH
6293: CALL_OW 121
6297: GO 6265
6299: POP
6300: POP
// end ;
6301: PPOPN 1
6303: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6304: LD_EXP 41
6308: PPUSH
6309: CALL_OW 303
6313: IFTRUE 6326
6315: PUSH
6316: LD_EXP 41
6320: PPUSH
6321: CALL_OW 301
6325: OR
6326: IFTRUE 6337
6328: PUSH
6329: LD_INT 71
6331: PPUSH
6332: CALL_OW 303
6336: OR
6337: IFTRUE 6348
6339: PUSH
6340: LD_INT 71
6342: PPUSH
6343: CALL_OW 301
6347: OR
6348: IFFALSE 6677
6350: GO 6352
6352: DISABLE
6353: LD_INT 0
6355: PPUSH
6356: PPUSH
6357: PPUSH
6358: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_EXP 45
6368: PPUSH
6369: LD_INT 25
6371: PUSH
6372: LD_INT 1
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 72
6383: ST_TO_ADDR
// if not tmp then
6384: LD_VAR 0 2
6388: NOT
6389: IFFALSE 6393
// exit ;
6391: GO 6677
// barracks := HexInfo ( 166 , 116 ) ;
6393: LD_ADDR_VAR 0 4
6397: PUSH
6398: LD_INT 166
6400: PPUSH
6401: LD_INT 116
6403: PPUSH
6404: CALL_OW 428
6408: ST_TO_ADDR
// for i in tmp do
6409: LD_ADDR_VAR 0 1
6413: PUSH
6414: LD_VAR 0 2
6418: PUSH
6419: FOR_IN
6420: IFFALSE 6433
// ComExitBuilding ( i ) ;
6422: LD_VAR 0 1
6426: PPUSH
6427: CALL_OW 122
6431: GO 6419
6433: POP
6434: POP
// repeat wait ( 0 0$1 ) ;
6435: LD_INT 35
6437: PPUSH
6438: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6442: LD_ADDR_VAR 0 2
6446: PUSH
6447: LD_EXP 45
6451: PPUSH
6452: LD_INT 25
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 50
6464: PUSH
6465: EMPTY
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PPUSH
6472: CALL_OW 72
6476: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6477: LD_ADDR_VAR 0 3
6481: PUSH
6482: LD_INT 21
6484: PPUSH
6485: LD_INT 81
6487: PUSH
6488: LD_INT 6
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 70
6499: ST_TO_ADDR
// if enemy then
6500: LD_VAR 0 3
6504: IFFALSE 6549
// begin for i in tmp do
6506: LD_ADDR_VAR 0 1
6510: PUSH
6511: LD_VAR 0 2
6515: PUSH
6516: FOR_IN
6517: IFFALSE 6545
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6519: LD_VAR 0 1
6523: PPUSH
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_VAR 0 1
6533: PPUSH
6534: CALL_OW 74
6538: PPUSH
6539: CALL_OW 115
6543: GO 6516
6545: POP
6546: POP
// end else
6547: GO 6670
// begin for i in tmp do
6549: LD_ADDR_VAR 0 1
6553: PUSH
6554: LD_VAR 0 2
6558: PUSH
6559: FOR_IN
6560: IFFALSE 6668
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6562: LD_VAR 0 1
6566: PPUSH
6567: CALL_OW 314
6571: IFTRUE 6588
6573: PUSH
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 21
6581: PPUSH
6582: CALL_OW 308
6586: NOT
6587: OR
6588: IFFALSE 6666
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6590: LD_VAR 0 1
6594: PPUSH
6595: CALL_OW 256
6599: PUSH
6600: LD_INT 600
6602: LESS
6603: IFFALSE 6616
6605: PUSH
6606: LD_VAR 0 4
6610: PPUSH
6611: CALL_OW 302
6615: AND
6616: IFFALSE 6633
6618: PUSH
6619: LD_VAR 0 4
6623: PPUSH
6624: CALL_OW 313
6628: PUSH
6629: LD_INT 6
6631: LESS
6632: AND
6633: IFFALSE 6651
// ComEnterUnit ( i , barracks ) else
6635: LD_VAR 0 1
6639: PPUSH
6640: LD_VAR 0 4
6644: PPUSH
6645: CALL_OW 120
6649: GO 6666
// ComMoveXY ( i , 162 , 109 ) ;
6651: LD_VAR 0 1
6655: PPUSH
6656: LD_INT 162
6658: PPUSH
6659: LD_INT 109
6661: PPUSH
6662: CALL_OW 111
6666: GO 6559
6668: POP
6669: POP
// end ; until not tmp ;
6670: LD_VAR 0 2
6674: NOT
6675: IFFALSE 6435
// end ;
6677: PPOPN 4
6679: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6680: LD_INT 106
6682: PPUSH
6683: CALL_OW 303
6687: IFTRUE 6698
6689: PUSH
6690: LD_INT 106
6692: PPUSH
6693: CALL_OW 301
6697: OR
6698: IFFALSE 6793
6700: GO 6702
6702: DISABLE
6703: LD_INT 0
6705: PPUSH
6706: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6707: LD_ADDR_VAR 0 2
6711: PUSH
6712: LD_EXP 46
6716: PPUSH
6717: LD_INT 25
6719: PUSH
6720: LD_INT 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PPUSH
6727: CALL_OW 72
6731: ST_TO_ADDR
// if not tmp then
6732: LD_VAR 0 2
6736: NOT
6737: IFFALSE 6741
// exit ;
6739: GO 6793
// for i in tmp do
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: FOR_IN
6752: IFFALSE 6791
// begin if IsInUnit ( i ) then
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 310
6763: IFFALSE 6774
// ComExitBuilding ( i ) ;
6765: LD_VAR 0 1
6769: PPUSH
6770: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6774: LD_VAR 0 1
6778: PPUSH
6779: LD_INT 66
6781: PPUSH
6782: LD_INT 128
6784: PPUSH
6785: CALL_OW 171
// end ;
6789: GO 6751
6791: POP
6792: POP
// end ; end_of_file
6793: PPOPN 2
6795: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6796: LD_INT 0
6798: PPUSH
6799: PPUSH
6800: PPUSH
// SetBName ( omikron , omikron ) ;
6801: LD_INT 64
6803: PPUSH
6804: LD_STRING omikron
6806: PPUSH
6807: CALL_OW 500
// uc_side := 4 ;
6811: LD_ADDR_OWVAR 20
6815: PUSH
6816: LD_INT 4
6818: ST_TO_ADDR
// uc_nation := 1 ;
6819: LD_ADDR_OWVAR 21
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// omicronSquad := [ ] ;
6827: LD_ADDR_EXP 52
6831: PUSH
6832: EMPTY
6833: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6834: LD_ADDR_VAR 0 2
6838: PUSH
6839: LD_INT 22
6841: PUSH
6842: LD_INT 4
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 2
6851: PUSH
6852: LD_INT 30
6854: PUSH
6855: LD_INT 32
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 30
6864: PUSH
6865: LD_INT 31
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PUSH
6886: FOR_IN
6887: IFFALSE 6944
// begin PrepareHuman ( false , 1 , 1 ) ;
6889: LD_INT 0
6891: PPUSH
6892: LD_INT 1
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: CALL_OW 380
// un := CreateHuman ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: CALL_OW 44
6911: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6912: LD_ADDR_EXP 52
6916: PUSH
6917: LD_EXP 52
6921: PUSH
6922: LD_VAR 0 3
6926: UNION
6927: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6928: LD_VAR 0 3
6932: PPUSH
6933: LD_VAR 0 2
6937: PPUSH
6938: CALL_OW 52
// end ;
6942: GO 6886
6944: POP
6945: POP
// for i := 1 to 3 do
6946: LD_ADDR_VAR 0 2
6950: PUSH
6951: DOUBLE
6952: LD_INT 1
6954: DEC
6955: ST_TO_ADDR
6956: LD_INT 3
6958: PUSH
6959: FOR_TO
6960: IFFALSE 7015
// begin PrepareHuman ( false , 2 , 2 ) ;
6962: LD_INT 0
6964: PPUSH
6965: LD_INT 2
6967: PPUSH
6968: LD_INT 2
6970: PPUSH
6971: CALL_OW 380
// un := CreateHuman ;
6975: LD_ADDR_VAR 0 3
6979: PUSH
6980: CALL_OW 44
6984: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6985: LD_ADDR_EXP 52
6989: PUSH
6990: LD_EXP 52
6994: PUSH
6995: LD_VAR 0 3
6999: UNION
7000: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7001: LD_VAR 0 3
7005: PPUSH
7006: LD_INT 64
7008: PPUSH
7009: CALL_OW 52
// end ;
7013: GO 6959
7015: POP
7016: POP
// for i := 1 to 2 do
7017: LD_ADDR_VAR 0 2
7021: PUSH
7022: DOUBLE
7023: LD_INT 1
7025: DEC
7026: ST_TO_ADDR
7027: LD_INT 2
7029: PUSH
7030: FOR_TO
7031: IFFALSE 7170
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7033: LD_INT 4
7035: PPUSH
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 2
7041: PPUSH
7042: LD_INT 2
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 3
7050: PPUSH
7051: LD_INT 100
7053: PPUSH
7054: CALL 386 0 7
// un := CreateVehicle ;
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: CALL_OW 45
7067: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7068: LD_ADDR_EXP 52
7072: PUSH
7073: LD_EXP 52
7077: PUSH
7078: LD_VAR 0 3
7082: UNION
7083: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7084: LD_VAR 0 3
7088: PPUSH
7089: LD_INT 28
7091: PPUSH
7092: LD_INT 37
7094: PPUSH
7095: LD_INT 6
7097: PPUSH
7098: LD_INT 0
7100: PPUSH
7101: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7105: LD_INT 0
7107: PPUSH
7108: LD_INT 3
7110: PPUSH
7111: LD_INT 2
7113: PPUSH
7114: CALL_OW 380
// un := CreateHuman ;
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7128: LD_ADDR_EXP 52
7132: PUSH
7133: LD_EXP 52
7137: PUSH
7138: LD_VAR 0 3
7142: UNION
7143: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7144: LD_VAR 0 3
7148: PPUSH
7149: LD_EXP 52
7153: PUSH
7154: LD_EXP 52
7158: PUSH
7159: LD_INT 1
7161: MINUS
7162: ARRAY
7163: PPUSH
7164: CALL_OW 52
// end ;
7168: GO 7030
7170: POP
7171: POP
// end ;
7172: LD_VAR 0 1
7176: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7177: LD_INT 0
7179: PPUSH
7180: PPUSH
7181: PPUSH
7182: PPUSH
// uc_side := 4 ;
7183: LD_ADDR_OWVAR 20
7187: PUSH
7188: LD_INT 4
7190: ST_TO_ADDR
// uc_nation := 1 ;
7191: LD_ADDR_OWVAR 21
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// tmp := [ ] ;
7199: LD_ADDR_VAR 0 4
7203: PUSH
7204: EMPTY
7205: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7206: LD_INT 4
7208: PPUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_INT 2
7214: PPUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: LD_INT 4
7223: PPUSH
7224: LD_INT 77
7226: PPUSH
7227: CALL 386 0 7
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// tmp := tmp union un ;
7241: LD_ADDR_VAR 0 4
7245: PUSH
7246: LD_VAR 0 4
7250: PUSH
7251: LD_VAR 0 3
7255: UNION
7256: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7257: LD_VAR 0 3
7261: PPUSH
7262: LD_INT 2
7264: PPUSH
7265: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7269: LD_VAR 0 3
7273: PPUSH
7274: LD_INT 106
7276: PPUSH
7277: LD_INT 3
7279: PPUSH
7280: LD_INT 0
7282: PPUSH
7283: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7287: LD_INT 0
7289: PPUSH
7290: LD_INT 3
7292: PPUSH
7293: LD_INT 2
7295: PPUSH
7296: CALL_OW 380
// un := CreateHuman ;
7300: LD_ADDR_VAR 0 3
7304: PUSH
7305: CALL_OW 44
7309: ST_TO_ADDR
// tmp := tmp union un ;
7310: LD_ADDR_VAR 0 4
7314: PUSH
7315: LD_VAR 0 4
7319: PUSH
7320: LD_VAR 0 3
7324: UNION
7325: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7326: LD_VAR 0 3
7330: PPUSH
7331: LD_VAR 0 4
7335: PUSH
7336: LD_VAR 0 4
7340: PUSH
7341: LD_INT 1
7343: MINUS
7344: ARRAY
7345: PPUSH
7346: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7350: LD_VAR 0 3
7354: PPUSH
7355: LD_INT 109
7357: PPUSH
7358: LD_INT 9
7360: PPUSH
7361: CALL_OW 111
// wait ( 0 0$1 ) ;
7365: LD_INT 35
7367: PPUSH
7368: CALL_OW 67
// for i := 1 to 2 do
7372: LD_ADDR_VAR 0 2
7376: PUSH
7377: DOUBLE
7378: LD_INT 1
7380: DEC
7381: ST_TO_ADDR
7382: LD_INT 2
7384: PUSH
7385: FOR_TO
7386: IFFALSE 7450
// begin PrepareHuman ( false , 1 , 2 ) ;
7388: LD_INT 0
7390: PPUSH
7391: LD_INT 1
7393: PPUSH
7394: LD_INT 2
7396: PPUSH
7397: CALL_OW 380
// un := CreateHuman ;
7401: LD_ADDR_VAR 0 3
7405: PUSH
7406: CALL_OW 44
7410: ST_TO_ADDR
// tmp := tmp union un ;
7411: LD_ADDR_VAR 0 4
7415: PUSH
7416: LD_VAR 0 4
7420: PUSH
7421: LD_VAR 0 3
7425: UNION
7426: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_INT 105
7434: PPUSH
7435: LD_INT 2
7437: PPUSH
7438: LD_INT 2
7440: PPUSH
7441: LD_INT 0
7443: PPUSH
7444: CALL_OW 50
// end ;
7448: GO 7385
7450: POP
7451: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7452: LD_VAR 0 4
7456: PPUSH
7457: LD_INT 26
7459: PPUSH
7460: LD_INT 35
7462: PPUSH
7463: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7467: LD_INT 35
7469: PPUSH
7470: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7474: LD_VAR 0 4
7478: PPUSH
7479: LD_INT 50
7481: PUSH
7482: EMPTY
7483: LIST
7484: PPUSH
7485: CALL_OW 72
7489: NOT
7490: IFFALSE 7494
// exit ;
7492: GO 7621
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7494: LD_VAR 0 4
7498: PPUSH
7499: LD_INT 91
7501: PUSH
7502: LD_INT 64
7504: PUSH
7505: LD_INT 12
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 72
7517: PUSH
7518: LD_VAR 0 4
7522: EQUAL
7523: IFFALSE 7467
// omicronSquad := omicronSquad union tmp ;
7525: LD_ADDR_EXP 52
7529: PUSH
7530: LD_EXP 52
7534: PUSH
7535: LD_VAR 0 4
7539: UNION
7540: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_VAR 0 4
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: PUSH
7566: FOR_IN
7567: IFFALSE 7619
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7569: LD_VAR 0 2
7573: PPUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 30
7586: PUSH
7587: LD_INT 4
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_VAR 0 2
7607: PPUSH
7608: CALL_OW 74
7612: PPUSH
7613: CALL_OW 120
7617: GO 7566
7619: POP
7620: POP
// end ;
7621: LD_VAR 0 1
7625: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7626: LD_EXP 13
7630: NOT
7631: IFFALSE 8212
7633: GO 7635
7635: DISABLE
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
7640: PPUSH
7641: PPUSH
// begin enable ;
7642: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7643: LD_ADDR_VAR 0 2
7647: PUSH
7648: LD_INT 22
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 21
7660: PUSH
7661: LD_INT 3
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: LD_INT 24
7673: PUSH
7674: LD_INT 1000
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7695: LD_ADDR_VAR 0 3
7699: PUSH
7700: LD_EXP 52
7704: PPUSH
7705: LD_INT 25
7707: PUSH
7708: LD_INT 2
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: PPUSH
7715: CALL_OW 72
7719: ST_TO_ADDR
// if filter and tmp then
7720: LD_VAR 0 2
7724: IFFALSE 7732
7726: PUSH
7727: LD_VAR 0 3
7731: AND
7732: IFFALSE 7805
// begin for i in tmp do
7734: LD_ADDR_VAR 0 1
7738: PUSH
7739: LD_VAR 0 3
7743: PUSH
7744: FOR_IN
7745: IFFALSE 7801
// if IsInUnit ( i ) then
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 310
7756: IFFALSE 7769
// ComExitBuilding ( i ) else
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 122
7767: GO 7799
// if not HasTask ( i ) then
7769: LD_VAR 0 1
7773: PPUSH
7774: CALL_OW 314
7778: NOT
7779: IFFALSE 7799
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7781: LD_VAR 0 1
7785: PPUSH
7786: LD_VAR 0 2
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PPUSH
7795: CALL_OW 130
7799: GO 7744
7801: POP
7802: POP
// end else
7803: GO 7876
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7805: LD_VAR 0 3
7809: PPUSH
7810: LD_INT 3
7812: PUSH
7813: LD_INT 54
7815: PUSH
7816: EMPTY
7817: LIST
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 72
7827: IFFALSE 7876
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7829: LD_ADDR_VAR 0 1
7833: PUSH
7834: LD_VAR 0 3
7838: PPUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 54
7844: PUSH
7845: EMPTY
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 72
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7874
// ComEnterUnit ( i , omikron ) ;
7860: LD_VAR 0 1
7864: PPUSH
7865: LD_INT 64
7867: PPUSH
7868: CALL_OW 120
7872: GO 7857
7874: POP
7875: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7876: LD_ADDR_VAR 0 2
7880: PUSH
7881: LD_EXP 52
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: ST_TO_ADDR
// if not filter then
7901: LD_VAR 0 2
7905: NOT
7906: IFFALSE 7910
// exit ;
7908: GO 8212
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7910: LD_ADDR_VAR 0 4
7914: PUSH
7915: LD_INT 13
7917: PPUSH
7918: LD_INT 81
7920: PUSH
7921: LD_INT 4
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 70
7932: ST_TO_ADDR
// if enemy then
7933: LD_VAR 0 4
7937: IFFALSE 8212
// begin for i in filter do
7939: LD_ADDR_VAR 0 1
7943: PUSH
7944: LD_VAR 0 2
7948: PUSH
7949: FOR_IN
7950: IFFALSE 8210
// begin tmp := IsDrivenBy ( i ) ;
7952: LD_ADDR_VAR 0 3
7956: PUSH
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL_OW 311
7966: ST_TO_ADDR
// if not tmp then
7967: LD_VAR 0 3
7971: NOT
7972: IFFALSE 7976
// continue ;
7974: GO 7949
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7976: LD_VAR 0 1
7980: PPUSH
7981: CALL_OW 256
7985: PUSH
7986: LD_INT 600
7988: GREATEREQUAL
7989: IFFALSE 8006
7991: PUSH
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 110
8001: PUSH
8002: LD_INT 1
8004: NONEQUAL
8005: AND
8006: IFFALSE 8032
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 4
8017: PPUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 74
8027: PPUSH
8028: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8032: LD_VAR 0 1
8036: PPUSH
8037: CALL_OW 256
8041: PUSH
8042: LD_INT 600
8044: LESS
8045: IFFALSE 8062
8047: PUSH
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 110
8057: PUSH
8058: LD_INT 1
8060: NONEQUAL
8061: AND
8062: IFFALSE 8091
// begin SetTag ( i , 1 ) ;
8064: LD_VAR 0 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8076: LD_VAR 0 1
8080: PPUSH
8081: LD_INT 27
8083: PPUSH
8084: LD_INT 35
8086: PPUSH
8087: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 110
8100: PUSH
8101: LD_INT 1
8103: EQUAL
8104: IFFALSE 8127
8106: PUSH
8107: LD_VAR 0 1
8111: PPUSH
8112: LD_INT 27
8114: PPUSH
8115: LD_INT 35
8117: PPUSH
8118: CALL_OW 297
8122: PUSH
8123: LD_INT 6
8125: LESS
8126: AND
8127: IFFALSE 8135
8129: PUSH
8130: LD_VAR 0 3
8134: AND
8135: IFFALSE 8208
// begin ComExitVehicle ( tmp ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8160: LD_INT 35
8162: PPUSH
8163: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 256
8176: PUSH
8177: LD_INT 1000
8179: EQUAL
8180: IFFALSE 8160
// ComEnterUnit ( tmp , i ) ;
8182: LD_VAR 0 3
8186: PPUSH
8187: LD_VAR 0 1
8191: PPUSH
8192: CALL_OW 120
// SetTag ( i , 0 ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: LD_INT 0
8203: PPUSH
8204: CALL_OW 109
// end ; end ;
8208: GO 7949
8210: POP
8211: POP
// end ; end ;
8212: PPOPN 4
8214: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8215: LD_EXP 13
8219: IFFALSE 8363
8221: GO 8223
8223: DISABLE
8224: LD_INT 0
8226: PPUSH
8227: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8228: LD_ADDR_VAR 0 2
8232: PUSH
8233: LD_EXP 52
8237: PPUSH
8238: LD_INT 21
8240: PUSH
8241: LD_INT 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 50
8250: PUSH
8251: EMPTY
8252: LIST
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PPUSH
8258: CALL_OW 72
8262: ST_TO_ADDR
// if not tmp then
8263: LD_VAR 0 2
8267: NOT
8268: IFFALSE 8272
// exit ;
8270: GO 8363
// repeat wait ( 0 0$1 ) ;
8272: LD_INT 35
8274: PPUSH
8275: CALL_OW 67
// for i in tmp do
8279: LD_ADDR_VAR 0 1
8283: PUSH
8284: LD_VAR 0 2
8288: PUSH
8289: FOR_IN
8290: IFFALSE 8354
// begin ComExit ( i ) ;
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL 78178 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8301: LD_VAR 0 1
8305: PPUSH
8306: LD_INT 14
8308: PPUSH
8309: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_INT 14
8320: PPUSH
8321: CALL_OW 308
8325: IFFALSE 8352
// begin tmp := tmp diff i ;
8327: LD_ADDR_VAR 0 2
8331: PUSH
8332: LD_VAR 0 2
8336: PUSH
8337: LD_VAR 0 1
8341: DIFF
8342: ST_TO_ADDR
// RemoveUnit ( i ) ;
8343: LD_VAR 0 1
8347: PPUSH
8348: CALL_OW 64
// end ; end ;
8352: GO 8289
8354: POP
8355: POP
// until not tmp ;
8356: LD_VAR 0 2
8360: NOT
8361: IFFALSE 8272
// end ; end_of_file
8363: PPOPN 2
8365: END
// export function Action ; var i , un , veh , tmp ; begin
8366: LD_INT 0
8368: PPUSH
8369: PPUSH
8370: PPUSH
8371: PPUSH
8372: PPUSH
// InGameOn ;
8373: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8377: LD_INT 179
8379: PPUSH
8380: LD_INT 5
8382: PPUSH
8383: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8387: LD_ADDR_VAR 0 4
8391: PUSH
8392: LD_INT 2
8394: PPUSH
8395: LD_INT 2
8397: PPUSH
8398: LD_INT 12
8400: PPUSH
8401: LD_INT 1
8403: PPUSH
8404: LD_INT 1
8406: PPUSH
8407: LD_INT 24
8409: PPUSH
8410: LD_INT 33
8412: PPUSH
8413: CALL 386 0 7
8417: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8418: LD_VAR 0 4
8422: PPUSH
8423: LD_INT 2
8425: PPUSH
8426: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8430: LD_VAR 0 4
8434: PPUSH
8435: LD_INT 178
8437: PPUSH
8438: LD_INT 2
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8448: LD_EXP 26
8452: PPUSH
8453: LD_VAR 0 4
8457: PPUSH
8458: CALL_OW 52
// if Kamil then
8462: LD_EXP 30
8466: IFFALSE 8501
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8468: LD_EXP 30
8472: PPUSH
8473: LD_INT 207
8475: PPUSH
8476: LD_INT 37
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8486: LD_EXP 30
8490: PPUSH
8491: LD_INT 211
8493: PPUSH
8494: LD_INT 38
8496: PPUSH
8497: CALL_OW 118
// end ; if Sophia then
8501: LD_EXP 32
8505: IFFALSE 8540
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8507: LD_EXP 32
8511: PPUSH
8512: LD_INT 209
8514: PPUSH
8515: LD_INT 40
8517: PPUSH
8518: LD_INT 0
8520: PPUSH
8521: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8525: LD_EXP 32
8529: PPUSH
8530: LD_INT 211
8532: PPUSH
8533: LD_INT 38
8535: PPUSH
8536: CALL_OW 118
// end ; if Givi then
8540: LD_EXP 27
8544: IFFALSE 8579
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8546: LD_EXP 27
8550: PPUSH
8551: LD_INT 201
8553: PPUSH
8554: LD_INT 34
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8564: LD_EXP 27
8568: PPUSH
8569: LD_INT 206
8571: PPUSH
8572: LD_INT 36
8574: PPUSH
8575: CALL_OW 118
// end ; if Ibrahim then
8579: LD_EXP 29
8583: IFFALSE 8618
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8585: LD_EXP 29
8589: PPUSH
8590: LD_INT 202
8592: PPUSH
8593: LD_INT 39
8595: PPUSH
8596: LD_INT 0
8598: PPUSH
8599: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8603: LD_EXP 29
8607: PPUSH
8608: LD_INT 206
8610: PPUSH
8611: LD_INT 36
8613: PPUSH
8614: CALL_OW 118
// end ; if Markov then
8618: LD_EXP 33
8622: IFFALSE 8709
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8624: LD_ADDR_VAR 0 4
8628: PUSH
8629: LD_INT 2
8631: PPUSH
8632: LD_INT 2
8634: PPUSH
8635: LD_INT 13
8637: PPUSH
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: LD_INT 25
8646: PPUSH
8647: LD_INT 80
8649: PUSH
8650: LD_INT 20
8652: PUSH
8653: LD_OWVAR 67
8657: MUL
8658: MINUS
8659: PPUSH
8660: CALL 386 0 7
8664: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8665: LD_VAR 0 4
8669: PPUSH
8670: LD_INT 2
8672: PPUSH
8673: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8677: LD_VAR 0 4
8681: PPUSH
8682: LD_INT 197
8684: PPUSH
8685: LD_INT 35
8687: PPUSH
8688: LD_INT 0
8690: PPUSH
8691: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8695: LD_EXP 33
8699: PPUSH
8700: LD_VAR 0 4
8704: PPUSH
8705: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8709: LD_ADDR_VAR 0 5
8713: PUSH
8714: LD_EXP 31
8718: PUSH
8719: LD_EXP 38
8723: UNION
8724: ST_TO_ADDR
// for i in tmp do
8725: LD_ADDR_VAR 0 2
8729: PUSH
8730: LD_VAR 0 5
8734: PUSH
8735: FOR_IN
8736: IFFALSE 8770
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8738: LD_VAR 0 2
8742: PPUSH
8743: LD_INT 203
8745: PPUSH
8746: LD_INT 41
8748: PPUSH
8749: LD_INT 6
8751: PPUSH
8752: LD_INT 0
8754: PPUSH
8755: CALL_OW 50
// ComHold ( i ) ;
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 140
// end ;
8768: GO 8735
8770: POP
8771: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8772: LD_INT 22
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 25
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PPUSH
8796: CALL_OW 69
8800: NOT
8801: IFFALSE 8815
// SetClass ( Heike , 2 ) ;
8803: LD_EXP 26
8807: PPUSH
8808: LD_INT 2
8810: PPUSH
8811: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8815: LD_EXP 26
8819: PPUSH
8820: LD_INT 183
8822: PPUSH
8823: LD_INT 12
8825: PPUSH
8826: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8830: LD_EXP 26
8834: PPUSH
8835: LD_INT 188
8837: PPUSH
8838: LD_INT 20
8840: PPUSH
8841: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8845: LD_EXP 26
8849: PPUSH
8850: LD_INT 191
8852: PPUSH
8853: LD_INT 25
8855: PPUSH
8856: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8860: LD_EXP 26
8864: PPUSH
8865: LD_INT 203
8867: PPUSH
8868: LD_INT 29
8870: PPUSH
8871: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8875: LD_EXP 26
8879: PPUSH
8880: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8884: LD_INT 35
8886: PPUSH
8887: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8891: LD_EXP 26
8895: PPUSH
8896: CALL_OW 310
8900: NOT
8901: IFFALSE 8884
// CenterOnUnits ( Heike ) ;
8903: LD_EXP 26
8907: PPUSH
8908: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8912: LD_ADDR_VAR 0 5
8916: PUSH
8917: LD_INT 22
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 21
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_EXP 26
8950: PUSH
8951: LD_EXP 33
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: DIFF
8960: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8961: LD_VAR 0 5
8965: PPUSH
8966: LD_EXP 26
8970: PPUSH
8971: CALL_OW 119
// if Givi then
8975: LD_EXP 27
8979: IFFALSE 8997
// ComTurnUnit ( Heike , Givi ) else
8981: LD_EXP 26
8985: PPUSH
8986: LD_EXP 27
8990: PPUSH
8991: CALL_OW 119
8995: GO 9015
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8997: LD_EXP 26
9001: PPUSH
9002: LD_VAR 0 5
9006: PUSH
9007: LD_INT 1
9009: ARRAY
9010: PPUSH
9011: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9015: LD_EXP 26
9019: PPUSH
9020: LD_STRING DH-Start-1
9022: PPUSH
9023: CALL_OW 88
// if Givi then
9027: LD_EXP 27
9031: IFFALSE 9078
// begin Say ( Givi , DG-Start-2 ) ;
9033: LD_EXP 27
9037: PPUSH
9038: LD_STRING DG-Start-2
9040: PPUSH
9041: CALL_OW 88
// if not Mike then
9045: LD_EXP 28
9049: NOT
9050: IFFALSE 9076
// begin Say ( Givi , DG-Start-b-3 ) ;
9052: LD_EXP 27
9056: PPUSH
9057: LD_STRING DG-Start-b-3
9059: PPUSH
9060: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9064: LD_EXP 26
9068: PPUSH
9069: LD_STRING DH-Start-b-4
9071: PPUSH
9072: CALL_OW 88
// end ; end else
9076: GO 9143
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9078: LD_EXP 38
9082: PPUSH
9083: LD_INT 26
9085: PUSH
9086: LD_INT 1
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 72
9097: PUSH
9098: LD_INT 1
9100: ARRAY
9101: PPUSH
9102: LD_STRING DArm-Start-a-2
9104: PPUSH
9105: CALL_OW 88
9109: NOT
9110: IFFALSE 9143
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9112: LD_EXP 38
9116: PPUSH
9117: LD_INT 26
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 72
9131: PUSH
9132: LD_INT 1
9134: ARRAY
9135: PPUSH
9136: LD_STRING DArf-Start-a-2
9138: PPUSH
9139: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9143: LD_EXP 26
9147: PPUSH
9148: LD_INT 211
9150: PPUSH
9151: LD_INT 38
9153: PPUSH
9154: CALL_OW 118
// wait ( 0 0$1 ) ;
9158: LD_INT 35
9160: PPUSH
9161: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9165: LD_EXP 26
9169: PPUSH
9170: LD_STRING DH-Start-3
9172: PPUSH
9173: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9177: LD_EXP 26
9181: PPUSH
9182: LD_STRING DH-Start-4
9184: PPUSH
9185: CALL_OW 88
// InGameOff ;
9189: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9193: LD_STRING Prepare
9195: PPUSH
9196: CALL_OW 337
// SaveForQuickRestart ;
9200: CALL_OW 22
// wait ( 0 0$10 ) ;
9204: LD_INT 350
9206: PPUSH
9207: CALL_OW 67
// if not Aviradze then
9211: LD_EXP 36
9215: NOT
9216: IFFALSE 9220
// exit ;
9218: GO 9460
// SetDir ( Aviradze , 4 ) ;
9220: LD_EXP 36
9224: PPUSH
9225: LD_INT 4
9227: PPUSH
9228: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9232: LD_EXP 36
9236: PPUSH
9237: LD_INT 225
9239: PPUSH
9240: LD_INT 33
9242: PPUSH
9243: LD_INT 0
9245: PPUSH
9246: CALL_OW 48
// for i := 1 to 2 do
9250: LD_ADDR_VAR 0 2
9254: PUSH
9255: DOUBLE
9256: LD_INT 1
9258: DEC
9259: ST_TO_ADDR
9260: LD_INT 2
9262: PUSH
9263: FOR_TO
9264: IFFALSE 9395
// begin uc_side := 2 ;
9266: LD_ADDR_OWVAR 20
9270: PUSH
9271: LD_INT 2
9273: ST_TO_ADDR
// uc_nation := 0 ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9282: LD_INT 0
9284: PPUSH
9285: LD_INT 12
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: CALL_OW 380
// hc_gallery :=  ;
9295: LD_ADDR_OWVAR 33
9299: PUSH
9300: LD_STRING 
9302: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING Artudito
9310: PUSH
9311: LD_STRING Textur
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: LD_VAR 0 2
9322: ARRAY
9323: ST_TO_ADDR
// un := CreateHuman ;
9324: LD_ADDR_VAR 0 3
9328: PUSH
9329: CALL_OW 44
9333: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9334: LD_VAR 0 3
9338: PPUSH
9339: LD_INT 224
9341: PUSH
9342: LD_INT 226
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_VAR 0 2
9353: ARRAY
9354: PPUSH
9355: LD_INT 31
9357: PUSH
9358: LD_INT 35
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: LD_VAR 0 2
9369: ARRAY
9370: PPUSH
9371: LD_INT 0
9373: PPUSH
9374: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9378: LD_VAR 0 3
9382: PPUSH
9383: LD_INT 215
9385: PPUSH
9386: LD_INT 36
9388: PPUSH
9389: CALL_OW 111
// end ;
9393: GO 9263
9395: POP
9396: POP
// hc_name :=  ;
9397: LD_ADDR_OWVAR 26
9401: PUSH
9402: LD_STRING 
9404: ST_TO_ADDR
// InitHc ;
9405: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9409: LD_EXP 36
9413: PPUSH
9414: LD_INT 215
9416: PPUSH
9417: LD_INT 36
9419: PPUSH
9420: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9424: LD_EXP 36
9428: PPUSH
9429: LD_STRING DA-Arrive-1
9431: PPUSH
9432: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9436: LD_EXP 26
9440: PPUSH
9441: LD_STRING DH-Arrive-2
9443: PPUSH
9444: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9448: LD_EXP 36
9452: PPUSH
9453: LD_STRING DA-Arrive-3
9455: PPUSH
9456: CALL_OW 88
// end ;
9460: LD_VAR 0 1
9464: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p , sex ;
9465: LD_EXP 3
9469: IFFALSE 11021
9471: GO 9473
9473: DISABLE
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
9478: PPUSH
9479: PPUSH
9480: PPUSH
// begin DialogueOn ;
9481: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9485: LD_EXP 26
9489: PPUSH
9490: LD_STRING DH-base-1
9492: PPUSH
9493: CALL_OW 88
// if Markov then
9497: LD_EXP 33
9501: IFFALSE 9553
// begin Say ( Markov , DMar-base-2 ) ;
9503: LD_EXP 33
9507: PPUSH
9508: LD_STRING DMar-base-2
9510: PPUSH
9511: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9515: LD_EXP 33
9519: PPUSH
9520: LD_STRING DMar-base-3
9522: PPUSH
9523: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9527: LD_EXP 26
9531: PPUSH
9532: LD_STRING DH-base-4
9534: PPUSH
9535: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9539: LD_EXP 33
9543: PPUSH
9544: LD_STRING DMar-base-5
9546: PPUSH
9547: CALL_OW 88
// end else
9551: GO 9630
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9553: LD_EXP 38
9557: PPUSH
9558: LD_INT 26
9560: PUSH
9561: LD_INT 1
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 72
9572: PUSH
9573: LD_INT 1
9575: ARRAY
9576: PPUSH
9577: LD_STRING DArm-base-a-2
9579: PPUSH
9580: CALL_OW 88
9584: NOT
9585: IFFALSE 9618
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9587: LD_EXP 38
9591: PPUSH
9592: LD_INT 26
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PPUSH
9602: CALL_OW 72
9606: PUSH
9607: LD_INT 1
9609: ARRAY
9610: PPUSH
9611: LD_STRING DArf-base-a-2
9613: PPUSH
9614: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9618: LD_EXP 26
9622: PPUSH
9623: LD_STRING DH-base-a-3
9625: PPUSH
9626: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9630: LD_EXP 36
9634: PPUSH
9635: LD_STRING DA-base-6
9637: PPUSH
9638: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9642: LD_EXP 36
9646: PPUSH
9647: LD_STRING DA-base-7
9649: PPUSH
9650: CALL_OW 88
// DialogueOff ;
9654: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9658: LD_STRING Flamethrower
9660: PPUSH
9661: CALL_OW 337
// wait ( 2 2$00 ) ;
9665: LD_INT 4200
9667: PPUSH
9668: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9672: LD_EXP 35
9676: PUSH
9677: LD_EXP 28
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PPUSH
9686: LD_INT 203
9688: PPUSH
9689: LD_INT 37
9691: PPUSH
9692: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9696: LD_INT 22
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 92
9708: PUSH
9709: LD_INT 203
9711: PUSH
9712: LD_INT 37
9714: PUSH
9715: LD_INT 10
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: NOT
9733: IFFALSE 9773
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9735: LD_EXP 35
9739: PUSH
9740: LD_EXP 28
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PPUSH
9749: LD_EXP 26
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 26
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9773: LD_INT 35
9775: PPUSH
9776: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9780: LD_INT 2
9782: PPUSH
9783: LD_EXP 35
9787: PPUSH
9788: CALL_OW 292
9792: IFFALSE 9870
9794: PUSH
9795: LD_EXP 35
9799: PPUSH
9800: LD_EXP 26
9804: PPUSH
9805: CALL_OW 296
9809: PUSH
9810: LD_INT 8
9812: LESS
9813: IFTRUE 9869
9815: PUSH
9816: LD_EXP 35
9820: PPUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 3
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 69
9849: PPUSH
9850: LD_EXP 35
9854: PPUSH
9855: CALL_OW 74
9859: PPUSH
9860: CALL_OW 296
9864: PUSH
9865: LD_INT 7
9867: LESS
9868: OR
9869: AND
9870: IFFALSE 9887
9872: PUSH
9873: LD_EXP 35
9877: PPUSH
9878: LD_INT 10
9880: PPUSH
9881: CALL_OW 308
9885: NOT
9886: AND
9887: IFFALSE 9773
// InGameOn ;
9889: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9893: LD_EXP 35
9897: PPUSH
9898: CALL_OW 87
// if IsInUnit ( Heike ) then
9902: LD_EXP 26
9906: PPUSH
9907: CALL_OW 310
9911: IFFALSE 9929
// begin ComExit ( Heike ) ;
9913: LD_EXP 26
9917: PPUSH
9918: CALL 78178 0 1
// wait ( 0 0$1 ) ;
9922: LD_INT 35
9924: PPUSH
9925: CALL_OW 67
// end ; ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9929: LD_EXP 35
9933: PUSH
9934: LD_EXP 28
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: LD_EXP 26
9947: PPUSH
9948: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9952: LD_EXP 26
9956: PPUSH
9957: LD_EXP 35
9961: PPUSH
9962: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9966: LD_INT 22
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 91
9978: PUSH
9979: LD_EXP 35
9983: PUSH
9984: LD_INT 10
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 3
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: IFFALSE 10037
// begin Say ( Kurt , DKs-scout-1 ) ;
10013: LD_EXP 35
10017: PPUSH
10018: LD_STRING DKs-scout-1
10020: PPUSH
10021: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10025: LD_EXP 26
10029: PPUSH
10030: LD_STRING DH-scout-2
10032: PPUSH
10033: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10037: LD_EXP 26
10041: PPUSH
10042: CALL_OW 85
// repeat wait ( 0 0$1 ) ;
10046: LD_INT 35
10048: PPUSH
10049: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10053: LD_EXP 26
10057: PPUSH
10058: LD_EXP 35
10062: PPUSH
10063: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10067: LD_EXP 26
10071: PPUSH
10072: LD_EXP 35
10076: PPUSH
10077: CALL_OW 296
10081: PUSH
10082: LD_INT 6
10084: LESS
10085: IFFALSE 10046
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10087: LD_EXP 35
10091: PUSH
10092: LD_EXP 28
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PPUSH
10101: LD_EXP 26
10105: PPUSH
10106: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10110: LD_EXP 35
10114: PPUSH
10115: LD_STRING DKs-scout-3
10117: PPUSH
10118: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10122: LD_EXP 31
10126: IFFALSE 10148
10128: PUSH
10129: LD_EXP 31
10133: PPUSH
10134: LD_EXP 35
10138: PPUSH
10139: CALL_OW 296
10143: PUSH
10144: LD_INT 15
10146: LESS
10147: AND
10148: IFFALSE 10373
// begin p := 1 ;
10150: LD_ADDR_VAR 0 4
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10158: LD_EXP 31
10162: PPUSH
10163: CALL_OW 310
10167: IFFALSE 10178
// ComExit ( Kaia ) ;
10169: LD_EXP 31
10173: PPUSH
10174: CALL 78178 0 1
// wait ( 0 0$1 ) ;
10178: LD_INT 35
10180: PPUSH
10181: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10185: LD_EXP 31
10189: PPUSH
10190: LD_EXP 35
10194: PPUSH
10195: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10199: LD_INT 35
10201: PPUSH
10202: CALL_OW 67
// p := Inc ( p ) ;
10206: LD_ADDR_VAR 0 4
10210: PUSH
10211: LD_VAR 0 4
10215: PPUSH
10216: CALL 79153 0 1
10220: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10221: LD_EXP 31
10225: PPUSH
10226: LD_EXP 35
10230: PPUSH
10231: CALL_OW 296
10235: PUSH
10236: LD_INT 6
10238: LESS
10239: IFTRUE 10251
10241: PUSH
10242: LD_VAR 0 4
10246: PUSH
10247: LD_INT 12
10249: GREATER
10250: OR
10251: IFFALSE 10199
// ComTurnUnit ( Kaia , Kurt ) ;
10253: LD_EXP 31
10257: PPUSH
10258: LD_EXP 35
10262: PPUSH
10263: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10267: LD_EXP 31
10271: PPUSH
10272: LD_STRING DK-scout-4
10274: PPUSH
10275: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_EXP 31
10288: PPUSH
10289: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10293: LD_EXP 35
10297: PPUSH
10298: LD_STRING DKs-scout-5
10300: PPUSH
10301: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10305: LD_EXP 31
10309: PPUSH
10310: LD_STRING DK-scout-6
10312: PPUSH
10313: CALL_OW 88
// if Mike then
10317: LD_EXP 28
10321: IFFALSE 10373
// begin Say ( Mike , DM-scout-7 ) ;
10323: LD_EXP 28
10327: PPUSH
10328: LD_STRING DM-scout-7
10330: PPUSH
10331: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_EXP 28
10344: PPUSH
10345: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10349: LD_EXP 31
10353: PPUSH
10354: LD_STRING DK-scout-8
10356: PPUSH
10357: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10361: LD_EXP 28
10365: PPUSH
10366: LD_STRING DM-scout-9
10368: PPUSH
10369: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10373: LD_INT 184
10375: PPUSH
10376: LD_INT 100
10378: PPUSH
10379: LD_INT 2
10381: PPUSH
10382: LD_INT 12
10384: NEG
10385: PPUSH
10386: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10390: LD_INT 184
10392: PPUSH
10393: LD_INT 100
10395: PPUSH
10396: LD_INT 2
10398: PPUSH
10399: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10403: LD_INT 184
10405: PPUSH
10406: LD_INT 100
10408: PPUSH
10409: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10413: LD_EXP 35
10417: PPUSH
10418: LD_STRING DKs-scout-10
10420: PPUSH
10421: CALL_OW 88
// wait ( 0 0$1 ) ;
10425: LD_INT 35
10427: PPUSH
10428: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10432: LD_INT 144
10434: PPUSH
10435: LD_INT 65
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: LD_INT 12
10443: NEG
10444: PPUSH
10445: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10449: LD_INT 144
10451: PPUSH
10452: LD_INT 65
10454: PPUSH
10455: LD_INT 2
10457: PPUSH
10458: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10462: LD_INT 144
10464: PPUSH
10465: LD_INT 65
10467: PPUSH
10468: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10472: LD_EXP 35
10476: PPUSH
10477: LD_STRING DKs-scout-11
10479: PPUSH
10480: CALL_OW 88
// Say ( Kurt , DKs-scout-12 ) ;
10484: LD_EXP 35
10488: PPUSH
10489: LD_STRING DKs-scout-12
10491: PPUSH
10492: CALL_OW 88
// wait ( 0 0$1 ) ;
10496: LD_INT 35
10498: PPUSH
10499: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10503: LD_EXP 35
10507: PPUSH
10508: CALL_OW 87
// if Mike and not Givi then
10512: LD_EXP 28
10516: IFFALSE 10525
10518: PUSH
10519: LD_EXP 27
10523: NOT
10524: AND
10525: IFFALSE 10551
// begin Say ( Mike , DM-scout-a-1 ) ;
10527: LD_EXP 28
10531: PPUSH
10532: LD_STRING DM-scout-a-1
10534: PPUSH
10535: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10539: LD_EXP 26
10543: PPUSH
10544: LD_STRING DH-scout-a-2
10546: PPUSH
10547: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10551: LD_EXP 35
10555: PUSH
10556: LD_EXP 28
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PPUSH
10565: LD_INT 2
10567: PPUSH
10568: CALL_OW 235
// ComStop ( [ Kurt , Mike ] ) ;
10572: LD_EXP 35
10576: PUSH
10577: LD_EXP 28
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PPUSH
10586: CALL_OW 141
// InGameOff ;
10590: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10594: LD_STRING Hill
10596: PPUSH
10597: CALL_OW 337
// Hint ( BunkerHill ) ;
10601: LD_STRING BunkerHill
10603: PPUSH
10604: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10608: LD_INT 22
10610: PPUSH
10611: LD_INT 1
10613: PPUSH
10614: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10618: LD_INT 20
10620: PPUSH
10621: LD_INT 1
10623: PPUSH
10624: CALL_OW 424
// allowToPatrol := true ;
10628: LD_ADDR_EXP 12
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10636: LD_INT 3150
10638: PPUSH
10639: CALL_OW 67
// InitHc ;
10643: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10647: LD_ADDR_VAR 0 1
10651: PUSH
10652: DOUBLE
10653: LD_INT 1
10655: DEC
10656: ST_TO_ADDR
10657: LD_INT 3
10659: PUSH
10660: LD_INT 3
10662: PUSH
10663: LD_INT 2
10665: PUSH
10666: LD_INT 2
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: LD_OWVAR 67
10679: ARRAY
10680: PUSH
10681: FOR_TO
10682: IFFALSE 11019
// begin uc_side := 2 ;
10684: LD_ADDR_OWVAR 20
10688: PUSH
10689: LD_INT 2
10691: ST_TO_ADDR
// uc_nation := 2 ;
10692: LD_ADDR_OWVAR 21
10696: PUSH
10697: LD_INT 2
10699: ST_TO_ADDR
// if i = 1 then
10700: LD_VAR 0 1
10704: PUSH
10705: LD_INT 1
10707: EQUAL
10708: IFFALSE 10720
// sex := sex_male else
10710: LD_ADDR_VAR 0 5
10714: PUSH
10715: LD_INT 1
10717: ST_TO_ADDR
10718: GO 10728
// sex := false ;
10720: LD_ADDR_VAR 0 5
10724: PUSH
10725: LD_INT 0
10727: ST_TO_ADDR
// PrepareHuman ( sex , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10728: LD_VAR 0 5
10732: PPUSH
10733: LD_INT 1
10735: PUSH
10736: LD_INT 3
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: LD_VAR 0 1
10751: PUSH
10752: LD_INT 3
10754: MOD
10755: PUSH
10756: LD_INT 1
10758: PLUS
10759: ARRAY
10760: PPUSH
10761: LD_INT 3
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: LD_OWVAR 67
10783: ARRAY
10784: PPUSH
10785: CALL_OW 380
// un := CreateHuman ;
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: CALL_OW 44
10798: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10799: LD_ADDR_EXP 38
10803: PUSH
10804: LD_EXP 38
10808: PUSH
10809: LD_VAR 0 2
10813: UNION
10814: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10815: LD_INT 2
10817: PPUSH
10818: LD_INT 2
10820: PPUSH
10821: LD_INT 13
10823: PPUSH
10824: LD_INT 2
10826: PUSH
10827: LD_INT 1
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: LD_INT 2
10841: MOD
10842: PUSH
10843: LD_INT 1
10845: PLUS
10846: ARRAY
10847: PPUSH
10848: LD_INT 1
10850: PPUSH
10851: LD_INT 27
10853: PUSH
10854: LD_INT 25
10856: PUSH
10857: LD_INT 27
10859: PUSH
10860: LD_INT 23
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_OWVAR 67
10877: PUSH
10878: LD_INT 0
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: CALL_OW 12
10888: PLUS
10889: ARRAY
10890: PPUSH
10891: LD_INT 77
10893: PPUSH
10894: CALL 386 0 7
// veh := CreateVehicle ;
10898: LD_ADDR_VAR 0 3
10902: PUSH
10903: CALL_OW 45
10907: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10908: LD_VAR 0 3
10912: PPUSH
10913: LD_INT 2
10915: PPUSH
10916: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
10920: LD_INT 35
10922: PPUSH
10923: CALL_OW 67
// until PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10927: LD_VAR 0 3
10931: PPUSH
10932: LD_INT 178
10934: PPUSH
10935: LD_INT 2
10937: PPUSH
10938: LD_INT 2
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 50
10948: IFFALSE 10920
// PlaceHumanInUnit ( un , veh ) ;
10950: LD_VAR 0 2
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10964: LD_VAR 0 2
10968: PPUSH
10969: LD_INT 183
10971: PPUSH
10972: LD_INT 11
10974: PPUSH
10975: CALL_OW 111
// if i = 1 then
10979: LD_VAR 0 1
10983: PUSH
10984: LD_INT 1
10986: EQUAL
10987: IFFALSE 11010
// begin CenterOnUnits ( un ) ;
10989: LD_VAR 0 2
10993: PPUSH
10994: CALL_OW 85
// Say ( un , DArSol-Arrival-1 ) ;
10998: LD_VAR 0 2
11002: PPUSH
11003: LD_STRING DArSol-Arrival-1
11005: PPUSH
11006: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
11010: LD_INT 70
11012: PPUSH
11013: CALL_OW 67
// end ;
11017: GO 10681
11019: POP
11020: POP
// end ;
11021: PPOPN 5
11023: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11024: LD_EXP 4
11028: IFFALSE 11041
11030: PUSH
11031: LD_EXP 36
11035: PPUSH
11036: CALL_OW 302
11040: AND
11041: IFFALSE 11090
11043: GO 11045
11045: DISABLE
// begin DialogueOn ;
11046: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11050: LD_EXP 36
11054: PPUSH
11055: LD_STRING DA-lab-1
11057: PPUSH
11058: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11062: LD_EXP 36
11066: PPUSH
11067: LD_STRING DA-lab-2
11069: PPUSH
11070: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11074: LD_EXP 26
11078: PPUSH
11079: LD_STRING DH-lab-3
11081: PPUSH
11082: CALL_OW 88
// DialogueOff ;
11086: CALL_OW 7
// end ;
11090: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11091: LD_INT 17
11093: PPUSH
11094: LD_INT 2
11096: PPUSH
11097: CALL_OW 321
11101: PUSH
11102: LD_INT 2
11104: EQUAL
11105: IFFALSE 11237
11107: GO 11109
11109: DISABLE
11110: LD_INT 0
11112: PPUSH
// begin DialogueOn ;
11113: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11117: LD_EXP 36
11121: PPUSH
11122: LD_STRING DA-Cam-1
11124: PPUSH
11125: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11129: LD_EXP 36
11133: PPUSH
11134: LD_STRING DA-Cam-2
11136: PPUSH
11137: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11141: LD_EXP 36
11145: PPUSH
11146: LD_STRING DA-Cam-3
11148: PPUSH
11149: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11153: LD_EXP 26
11157: PPUSH
11158: LD_STRING DH-Cam-4
11160: PPUSH
11161: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11165: LD_EXP 31
11169: PPUSH
11170: LD_STRING DK-Cam-5
11172: PPUSH
11173: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11177: LD_EXP 31
11181: PPUSH
11182: LD_STRING DK-Cam-6
11184: PPUSH
11185: CALL_OW 88
// DialogueOff ;
11189: CALL_OW 7
// Query ( Camera ) ;
11193: LD_STRING Camera
11195: PPUSH
11196: CALL_OW 97
// hiddenCameraAllowed := true ;
11200: LD_ADDR_EXP 5
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// for i in camAreas do
11208: LD_ADDR_VAR 0 1
11212: PUSH
11213: LD_EXP 8
11217: PUSH
11218: FOR_IN
11219: IFFALSE 11235
// SetAreaMapShow ( i , 1 ) ;
11221: LD_VAR 0 1
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 424
11233: GO 11218
11235: POP
11236: POP
// end ;
11237: PPOPN 1
11239: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11240: LD_EXP 8
11244: NOT
11245: IFFALSE 11253
11247: PUSH
11248: LD_EXP 5
11252: AND
11253: IFFALSE 11351
11255: GO 11257
11257: DISABLE
11258: LD_INT 0
11260: PPUSH
// begin stop_talking := true ;
11261: LD_ADDR_OWVAR 56
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_INT 22
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 21
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 23
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: PPUSH
11309: CALL_OW 69
11313: PUSH
11314: FOR_IN
11315: IFFALSE 11334
// AddExperience ( i , 2 , 450 ) ;
11317: LD_VAR 0 1
11321: PPUSH
11322: LD_INT 2
11324: PPUSH
11325: LD_INT 450
11327: PPUSH
11328: CALL_OW 492
11332: GO 11314
11334: POP
11335: POP
// stop_talking := false ;
11336: LD_ADDR_OWVAR 56
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11344: LD_STRING ACH_CAMERA
11346: PPUSH
11347: CALL_OW 543
// end ;
11351: PPOPN 1
11353: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11354: LD_EXP 9
11358: IFFALSE 11367
11360: PUSH
11361: LD_EXP 11
11365: NOT
11366: AND
11367: IFFALSE 11426
11369: GO 11371
11371: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11372: LD_EXP 9
11376: PPUSH
11377: CALL_OW 250
11381: PPUSH
11382: LD_EXP 9
11386: PPUSH
11387: CALL_OW 251
11391: PPUSH
11392: LD_INT 2
11394: PPUSH
11395: LD_INT 6
11397: NEG
11398: PPUSH
11399: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11403: LD_EXP 9
11407: PPUSH
11408: CALL_OW 87
// wait ( 0 0$1 ) ;
11412: LD_INT 35
11414: PPUSH
11415: CALL_OW 67
// YouLost ( Spotted ) ;
11419: LD_STRING Spotted
11421: PPUSH
11422: CALL_OW 104
// end ;
11426: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11427: LD_INT 3
11429: PUSH
11430: LD_INT 6
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PPUSH
11437: LD_INT 2
11439: PPUSH
11440: LD_EXP 48
11444: PPUSH
11445: CALL 1054 0 3
11449: IFFALSE 11482
11451: GO 11453
11453: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11454: LD_ADDR_EXP 9
11458: PUSH
11459: LD_INT 3
11461: PUSH
11462: LD_INT 6
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PPUSH
11469: LD_INT 2
11471: PPUSH
11472: LD_EXP 48
11476: PPUSH
11477: CALL 1054 0 3
11481: ST_TO_ADDR
11482: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11483: LD_INT 22
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 32
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 3
11505: PUSH
11506: LD_INT 24
11508: PUSH
11509: LD_INT 1000
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 69
11529: IFFALSE 11590
11531: GO 11533
11533: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11534: LD_ADDR_EXP 9
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_INT 6
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 30
11551: PUSH
11552: LD_INT 32
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 3
11561: PUSH
11562: LD_INT 24
11564: PUSH
11565: LD_INT 1000
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 69
11585: PUSH
11586: LD_INT 1
11588: ARRAY
11589: ST_TO_ADDR
11590: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11591: LD_EXP 9
11595: IFFALSE 11637
11597: PUSH
11598: LD_INT 21
11600: PPUSH
11601: LD_INT 21
11603: PUSH
11604: LD_INT 3
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 24
11616: PUSH
11617: LD_INT 1000
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PPUSH
11632: CALL_OW 70
11636: AND
11637: IFFALSE 11876
11639: GO 11641
11641: DISABLE
11642: LD_INT 0
11644: PPUSH
11645: PPUSH
11646: PPUSH
11647: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11648: LD_ADDR_VAR 0 4
11652: PUSH
11653: LD_EXP 43
11657: PUSH
11658: LD_EXP 45
11662: PUSH
11663: LD_EXP 46
11667: UNION
11668: PPUSH
11669: LD_INT 3
11671: PUSH
11672: LD_INT 25
11674: PUSH
11675: LD_INT 1
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 72
11690: UNION
11691: ST_TO_ADDR
// for i in noncombat do
11692: LD_ADDR_VAR 0 1
11696: PUSH
11697: LD_VAR 0 4
11701: PUSH
11702: FOR_IN
11703: IFFALSE 11799
// begin if IsInUnit ( i ) then
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 310
11714: IFFALSE 11725
// ComExitBuilding ( i ) ;
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11725: LD_VAR 0 1
11729: PPUSH
11730: LD_INT 114
11732: PPUSH
11733: LD_INT 97
11735: PPUSH
11736: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11740: LD_VAR 0 1
11744: PPUSH
11745: LD_INT 99
11747: PPUSH
11748: LD_INT 128
11750: PPUSH
11751: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11755: LD_VAR 0 1
11759: PPUSH
11760: LD_INT 91
11762: PPUSH
11763: LD_INT 145
11765: PPUSH
11766: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11770: LD_VAR 0 1
11774: PPUSH
11775: LD_INT 82
11777: PPUSH
11778: LD_INT 153
11780: PPUSH
11781: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11785: LD_VAR 0 1
11789: PPUSH
11790: LD_INT 16
11792: PPUSH
11793: CALL_OW 173
// end ;
11797: GO 11702
11799: POP
11800: POP
// if not allowHeikeAttack then
11801: LD_EXP 11
11805: NOT
11806: IFFALSE 11810
// exit ;
11808: GO 11876
// wait ( 0 0$05 ) ;
11810: LD_INT 175
11812: PPUSH
11813: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11817: LD_EXP 41
11821: PPUSH
11822: LD_STRING D9a-Kur-1
11824: PPUSH
11825: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11829: LD_EXP 44
11833: PPUSH
11834: LD_STRING D9a-Bur-1
11836: PPUSH
11837: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11841: LD_EXP 41
11845: PPUSH
11846: LD_STRING D9a-Kur-2
11848: PPUSH
11849: CALL_OW 94
// omicronFall := true ;
11853: LD_ADDR_EXP 13
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11861: LD_INT 105
11863: PPUSH
11864: CALL_OW 67
// retreatFromOmicron := true ;
11868: LD_ADDR_EXP 20
11872: PUSH
11873: LD_INT 1
11875: ST_TO_ADDR
// end ;
11876: PPOPN 4
11878: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11879: LD_INT 16
11881: PPUSH
11882: LD_INT 3
11884: PUSH
11885: LD_INT 22
11887: PUSH
11888: LD_INT 2
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 23
11901: PUSH
11902: LD_INT 3
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 70
11917: IFFALSE 12000
11919: GO 11921
11921: DISABLE
11922: LD_INT 0
11924: PPUSH
// begin enable ;
11925: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: LD_INT 16
11933: PPUSH
11934: LD_INT 3
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 23
11953: PUSH
11954: LD_INT 3
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PPUSH
11965: CALL_OW 70
11969: PUSH
11970: FOR_IN
11971: IFFALSE 11998
// begin escapeCounter := escapeCounter + 1 ;
11973: LD_ADDR_EXP 19
11977: PUSH
11978: LD_EXP 19
11982: PUSH
11983: LD_INT 1
11985: PLUS
11986: ST_TO_ADDR
// RemoveUnit ( i ) ;
11987: LD_VAR 0 1
11991: PPUSH
11992: CALL_OW 64
// end ;
11996: GO 11970
11998: POP
11999: POP
// end ;
12000: PPOPN 1
12002: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12003: LD_OWVAR 1
12007: PUSH
12008: LD_INT 13650
12010: PUSH
12011: LD_INT 0
12013: PPUSH
12014: LD_INT 3150
12016: PPUSH
12017: CALL_OW 12
12021: PLUS
12022: GREATEREQUAL
12023: IFFALSE 12032
12025: GO 12027
12027: DISABLE
// SmallAmericanReinforcements ;
12028: CALL 7177 0 0
12032: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
12033: LD_OWVAR 1
12037: PUSH
12038: LD_INT 31500
12040: PUSH
12041: LD_INT 29400
12043: PUSH
12044: LD_INT 27300
12046: PUSH
12047: LD_INT 25200
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: PUSH
12056: LD_OWVAR 67
12060: ARRAY
12061: GREATEREQUAL
12062: IFFALSE 12127
12064: GO 12066
12066: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_INT 21
12074: PUSH
12075: LD_INT 2
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: PPUSH
12087: LD_INT 62
12089: PPUSH
12090: LD_INT 22
12092: PPUSH
12093: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12097: LD_EXP 50
12101: PPUSH
12102: LD_INT 69
12104: PPUSH
12105: LD_INT 27
12107: PPUSH
12108: CALL_OW 111
// wait ( 1 1$00 ) ;
12112: LD_INT 2100
12114: PPUSH
12115: CALL_OW 67
// startAttackOnOmicron := true ;
12119: LD_ADDR_EXP 6
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// end ;
12127: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12128: LD_EXP 22
12132: PUSH
12133: LD_INT 0
12135: EQUAL
12136: IFFALSE 14208
12138: GO 12140
12140: DISABLE
12141: LD_INT 0
12143: PPUSH
12144: PPUSH
12145: PPUSH
12146: PPUSH
12147: PPUSH
12148: PPUSH
12149: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12150: LD_INT 5
12152: PPUSH
12153: LD_INT 2
12155: PPUSH
12156: CALL_OW 343
// PrepareOmarForces ;
12160: CALL 1658 0 0
// wait ( 0 0$03 ) ;
12164: LD_INT 105
12166: PPUSH
12167: CALL_OW 67
// allowHeikeAttack := true ;
12171: LD_ADDR_EXP 11
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// activeGrishkoAI := false ;
12179: LD_ADDR_EXP 10
12183: PUSH
12184: LD_INT 0
12186: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12187: LD_INT 20
12189: PPUSH
12190: LD_INT 0
12192: PPUSH
12193: CALL_OW 424
// if not hillBase then
12197: LD_EXP 15
12201: NOT
12202: IFFALSE 12211
// ChangeMissionObjectives ( HillDone ) ;
12204: LD_STRING HillDone
12206: PPUSH
12207: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12211: LD_EXP 34
12215: PPUSH
12216: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12220: LD_ADDR_VAR 0 1
12224: PUSH
12225: LD_INT 22
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 21
12237: PUSH
12238: LD_INT 1
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: PUSH
12254: FOR_IN
12255: IFFALSE 12279
// if HasTask ( i ) then
12257: LD_VAR 0 1
12261: PPUSH
12262: CALL_OW 314
12266: IFFALSE 12277
// ComHold ( i ) ;
12268: LD_VAR 0 1
12272: PPUSH
12273: CALL_OW 140
12277: GO 12254
12279: POP
12280: POP
// DialogueOn ;
12281: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12285: LD_EXP 34
12289: PPUSH
12290: LD_STRING DO-assault-1
12292: PPUSH
12293: CALL_OW 94
// DialogueOff ;
12297: CALL_OW 7
// game_speed := 4 ;
12301: LD_ADDR_OWVAR 65
12305: PUSH
12306: LD_INT 4
12308: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12309: LD_ADDR_VAR 0 1
12313: PUSH
12314: LD_EXP 47
12318: PPUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 54
12324: PUSH
12325: EMPTY
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 72
12336: PUSH
12337: FOR_IN
12338: IFFALSE 12357
// ComMoveXY ( i , 226 , 114 ) ;
12340: LD_VAR 0 1
12344: PPUSH
12345: LD_INT 226
12347: PPUSH
12348: LD_INT 114
12350: PPUSH
12351: CALL_OW 111
12355: GO 12337
12357: POP
12358: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12359: LD_EXP 42
12363: PPUSH
12364: LD_INT 22
12366: PUSH
12367: LD_INT 6
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 30
12376: PUSH
12377: LD_INT 4
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: PPUSH
12393: LD_EXP 42
12397: PPUSH
12398: CALL_OW 74
12402: PPUSH
12403: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12407: LD_STRING Attack
12409: PPUSH
12410: CALL_OW 337
// music_class := music_combat ;
12414: LD_ADDR_OWVAR 72
12418: PUSH
12419: LD_INT 1
12421: ST_TO_ADDR
// music_nat := 4 ;
12422: LD_ADDR_OWVAR 71
12426: PUSH
12427: LD_INT 4
12429: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12430: LD_INT 5
12432: PPUSH
12433: LD_EXP 42
12437: PPUSH
12438: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12442: LD_INT 6
12444: PPUSH
12445: LD_EXP 39
12449: PPUSH
12450: LD_INT 25
12452: PUSH
12453: LD_INT 1
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PPUSH
12460: CALL_OW 72
12464: PUSH
12465: LD_INT 4
12467: ARRAY
12468: PPUSH
12469: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12473: LD_ADDR_VAR 0 1
12477: PUSH
12478: LD_EXP 39
12482: PPUSH
12483: LD_INT 3
12485: PUSH
12486: LD_INT 25
12488: PUSH
12489: LD_INT 4
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 72
12504: PUSH
12505: FOR_IN
12506: IFFALSE 12525
// ComAgressiveMove ( i , 221 , 110 ) ;
12508: LD_VAR 0 1
12512: PPUSH
12513: LD_INT 221
12515: PPUSH
12516: LD_INT 110
12518: PPUSH
12519: CALL_OW 114
12523: GO 12505
12525: POP
12526: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12527: LD_EXP 39
12531: PPUSH
12532: LD_INT 25
12534: PUSH
12535: LD_INT 4
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 72
12546: PPUSH
12547: LD_INT 214
12549: PPUSH
12550: LD_INT 124
12552: PPUSH
12553: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12557: LD_EXP 39
12561: PPUSH
12562: LD_INT 25
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 72
12576: PUSH
12577: LD_INT 4
12579: ARRAY
12580: PPUSH
12581: LD_INT 214
12583: PPUSH
12584: LD_INT 114
12586: PPUSH
12587: LD_INT 0
12589: PPUSH
12590: CALL_OW 132
// if IsOk ( Grishko ) then
12594: LD_EXP 42
12598: PPUSH
12599: CALL_OW 302
12603: IFFALSE 12629
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12605: LD_EXP 42
12609: PPUSH
12610: LD_STRING D9-Gri-1
12612: PPUSH
12613: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12617: LD_EXP 41
12621: PPUSH
12622: LD_STRING D9-Kur-1
12624: PPUSH
12625: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12629: LD_INT 35
12631: PPUSH
12632: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12636: LD_EXP 34
12640: PPUSH
12641: LD_INT 233
12643: PPUSH
12644: LD_INT 130
12646: PPUSH
12647: CALL_OW 114
// if IsOk ( Grishko ) then
12651: LD_EXP 42
12655: PPUSH
12656: CALL_OW 302
12660: IFFALSE 12686
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12662: LD_EXP 42
12666: PPUSH
12667: LD_STRING D9-Gri-2
12669: PPUSH
12670: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12674: LD_EXP 41
12678: PPUSH
12679: LD_STRING D9-Kur-2
12681: PPUSH
12682: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12686: LD_EXP 42
12690: PPUSH
12691: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12695: LD_EXP 42
12699: PPUSH
12700: LD_INT 211
12702: PPUSH
12703: LD_INT 104
12705: PPUSH
12706: CALL_OW 171
// AddComHold ( Grishko ) ;
12710: LD_EXP 42
12714: PPUSH
12715: CALL_OW 200
// repeat wait ( 3 ) ;
12719: LD_INT 3
12721: PPUSH
12722: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12726: LD_EXP 42
12730: PPUSH
12731: CALL_OW 310
12735: NOT
12736: IFFALSE 12719
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12738: LD_EXP 39
12742: PPUSH
12743: LD_INT 34
12745: PUSH
12746: LD_INT 26
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 72
12757: PPUSH
12758: LD_EXP 42
12762: PPUSH
12763: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12767: LD_EXP 39
12771: PPUSH
12772: LD_INT 34
12774: PUSH
12775: LD_INT 26
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PPUSH
12782: CALL_OW 72
12786: PPUSH
12787: LD_INT 215
12789: PPUSH
12790: LD_INT 106
12792: PPUSH
12793: CALL_OW 174
// repeat wait ( 3 ) ;
12797: LD_INT 3
12799: PPUSH
12800: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12804: LD_EXP 42
12808: PPUSH
12809: CALL_OW 256
12813: PUSH
12814: LD_INT 1000
12816: LESS
12817: IFFALSE 12797
// NormalAttack ( 5 , Grishko ) ;
12819: LD_INT 5
12821: PPUSH
12822: LD_EXP 42
12826: PPUSH
12827: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12831: LD_INT 6
12833: PPUSH
12834: LD_EXP 39
12838: PPUSH
12839: LD_INT 25
12841: PUSH
12842: LD_INT 1
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PPUSH
12849: CALL_OW 72
12853: PUSH
12854: LD_INT 4
12856: ARRAY
12857: PPUSH
12858: CALL_OW 472
// if IsOk ( Grishko ) then
12862: LD_EXP 42
12866: PPUSH
12867: CALL_OW 302
12871: IFFALSE 12897
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12873: LD_EXP 42
12877: PPUSH
12878: LD_STRING D9-Gri-3
12880: PPUSH
12881: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12885: LD_EXP 41
12889: PPUSH
12890: LD_STRING D9-Kur-3
12892: PPUSH
12893: CALL_OW 94
// end ; music_class := music_auto ;
12897: LD_ADDR_OWVAR 72
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// music_nat := music_auto ;
12905: LD_ADDR_OWVAR 71
12909: PUSH
12910: LD_INT 0
12912: ST_TO_ADDR
// for i in omarSquad do
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_EXP 39
12922: PUSH
12923: FOR_IN
12924: IFFALSE 13068
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12926: LD_VAR 0 1
12930: PPUSH
12931: CALL_OW 247
12935: PUSH
12936: LD_INT 2
12938: EQUAL
12939: IFFALSE 12956
12941: PUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 256
12951: PUSH
12952: LD_INT 1000
12954: LESS
12955: AND
12956: IFFALSE 13022
// begin driver := IsDrivenBy ( i ) ;
12958: LD_ADDR_VAR 0 2
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 311
12972: ST_TO_ADDR
// veh := i ;
12973: LD_ADDR_VAR 0 3
12977: PUSH
12978: LD_VAR 0 1
12982: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12983: LD_VAR 0 2
12987: PPUSH
12988: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12992: LD_VAR 0 2
12996: PPUSH
12997: LD_VAR 0 3
13001: PPUSH
13002: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13006: LD_VAR 0 2
13010: PPUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: CALL_OW 180
// end else
13020: GO 13066
// if GetLives ( i ) < 500 then
13022: LD_VAR 0 1
13026: PPUSH
13027: CALL_OW 256
13031: PUSH
13032: LD_INT 500
13034: LESS
13035: IFFALSE 13066
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13037: LD_EXP 39
13041: PPUSH
13042: LD_INT 25
13044: PUSH
13045: LD_INT 4
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 72
13056: PPUSH
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 188
// end ; end ;
13066: GO 12923
13068: POP
13069: POP
// repeat wait ( 0 0$1 ) ;
13070: LD_INT 35
13072: PPUSH
13073: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13077: LD_EXP 39
13081: PPUSH
13082: LD_INT 3
13084: PUSH
13085: LD_INT 24
13087: PUSH
13088: LD_INT 1000
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PPUSH
13113: CALL_OW 72
13117: NOT
13118: IFFALSE 13149
13120: PUSH
13121: LD_EXP 39
13125: PPUSH
13126: LD_INT 3
13128: PUSH
13129: LD_INT 24
13131: PUSH
13132: LD_INT 250
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PPUSH
13143: CALL_OW 72
13147: NOT
13148: AND
13149: IFFALSE 13070
// wait ( 0 0$2 ) ;
13151: LD_INT 70
13153: PPUSH
13154: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13158: LD_ADDR_VAR 0 5
13162: PUSH
13163: LD_EXP 39
13167: PPUSH
13168: LD_INT 58
13170: PUSH
13171: EMPTY
13172: LIST
13173: PUSH
13174: LD_INT 21
13176: PUSH
13177: LD_INT 2
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PPUSH
13188: CALL_OW 72
13192: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13193: LD_ADDR_VAR 0 6
13197: PUSH
13198: LD_EXP 39
13202: PPUSH
13203: LD_INT 25
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 3
13215: PUSH
13216: LD_INT 55
13218: PUSH
13219: EMPTY
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 72
13234: ST_TO_ADDR
// for i := 1 to tmp do
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: DOUBLE
13241: LD_INT 1
13243: DEC
13244: ST_TO_ADDR
13245: LD_VAR 0 5
13249: PUSH
13250: FOR_TO
13251: IFFALSE 13281
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13253: LD_VAR 0 6
13257: PUSH
13258: LD_VAR 0 1
13262: ARRAY
13263: PPUSH
13264: LD_VAR 0 5
13268: PUSH
13269: LD_VAR 0 1
13273: ARRAY
13274: PPUSH
13275: CALL_OW 120
13279: GO 13250
13281: POP
13282: POP
// wait ( 0 0$5 ) ;
13283: LD_INT 175
13285: PPUSH
13286: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13290: LD_EXP 39
13294: PPUSH
13295: LD_INT 199
13297: PPUSH
13298: LD_INT 141
13300: PPUSH
13301: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13305: LD_EXP 34
13309: PPUSH
13310: LD_INT 190
13312: PPUSH
13313: LD_INT 143
13315: PPUSH
13316: CALL_OW 114
// AddComHold ( Omar ) ;
13320: LD_EXP 34
13324: PPUSH
13325: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13329: LD_EXP 39
13333: PPUSH
13334: LD_INT 2
13336: PUSH
13337: LD_INT 25
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 25
13349: PUSH
13350: LD_INT 4
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: PPUSH
13362: CALL_OW 72
13366: PPUSH
13367: LD_INT 161
13369: PPUSH
13370: LD_INT 130
13372: PPUSH
13373: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13377: LD_EXP 39
13381: PPUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 72
13396: PPUSH
13397: LD_INT 163
13399: PPUSH
13400: LD_INT 122
13402: PPUSH
13403: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13407: LD_EXP 39
13411: PPUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PPUSH
13422: CALL_OW 72
13426: PUSH
13427: LD_INT 4
13429: ARRAY
13430: PPUSH
13431: LD_INT 165
13433: PPUSH
13434: LD_INT 118
13436: PPUSH
13437: LD_INT 0
13439: PPUSH
13440: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13444: LD_EXP 39
13448: PPUSH
13449: LD_INT 25
13451: PUSH
13452: LD_INT 1
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 72
13463: PUSH
13464: LD_INT 4
13466: ARRAY
13467: PPUSH
13468: LD_INT 159
13470: PPUSH
13471: LD_INT 116
13473: PPUSH
13474: LD_INT 0
13476: PPUSH
13477: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13481: LD_EXP 39
13485: PPUSH
13486: LD_INT 21
13488: PUSH
13489: LD_INT 2
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 72
13500: PPUSH
13501: LD_INT 169
13503: PPUSH
13504: LD_INT 114
13506: PPUSH
13507: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13511: LD_INT 35
13513: PPUSH
13514: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13518: LD_ADDR_VAR 0 5
13522: PUSH
13523: LD_EXP 39
13527: PPUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 1
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PPUSH
13538: CALL_OW 72
13542: ST_TO_ADDR
// for i in tmp do
13543: LD_ADDR_VAR 0 1
13547: PUSH
13548: LD_VAR 0 5
13552: PUSH
13553: FOR_IN
13554: IFFALSE 13655
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13556: LD_VAR 0 1
13560: PPUSH
13561: CALL_OW 256
13565: PUSH
13566: LD_INT 600
13568: LESS
13569: IFFALSE 13592
13571: PUSH
13572: LD_VAR 0 1
13576: PPUSH
13577: LD_INT 161
13579: PPUSH
13580: LD_INT 130
13582: PPUSH
13583: CALL_OW 297
13587: PUSH
13588: LD_INT 6
13590: GREATER
13591: AND
13592: IFFALSE 13609
// ComMoveXY ( i , 161 , 130 ) ;
13594: LD_VAR 0 1
13598: PPUSH
13599: LD_INT 161
13601: PPUSH
13602: LD_INT 130
13604: PPUSH
13605: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13609: LD_VAR 0 1
13613: PPUSH
13614: CALL_OW 256
13618: PUSH
13619: LD_INT 1000
13621: EQUAL
13622: IFFALSE 13636
13624: PUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 314
13634: NOT
13635: AND
13636: IFFALSE 13653
// ComAgressiveMove ( i , 160 , 109 ) ;
13638: LD_VAR 0 1
13642: PPUSH
13643: LD_INT 160
13645: PPUSH
13646: LD_INT 109
13648: PPUSH
13649: CALL_OW 114
// end ;
13653: GO 13553
13655: POP
13656: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13657: LD_ADDR_VAR 0 5
13661: PUSH
13662: LD_EXP 39
13666: PPUSH
13667: LD_INT 21
13669: PUSH
13670: LD_INT 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PPUSH
13677: CALL_OW 72
13681: ST_TO_ADDR
// for i in tmp do
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_VAR 0 5
13691: PUSH
13692: FOR_IN
13693: IFFALSE 13969
// begin tmp2 := IsDrivenBy ( i ) ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 1
13704: PPUSH
13705: CALL_OW 311
13709: ST_TO_ADDR
// if not tmp2 then
13710: LD_VAR 0 6
13714: NOT
13715: IFFALSE 13719
// continue ;
13717: GO 13692
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13719: LD_VAR 0 1
13723: PPUSH
13724: CALL_OW 256
13728: PUSH
13729: LD_INT 600
13731: GREATEREQUAL
13732: IFFALSE 13749
13734: PUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 110
13744: PUSH
13745: LD_INT 1
13747: EQUAL
13748: AND
13749: IFFALSE 13763
// SetTag ( i , 0 ) ;
13751: LD_VAR 0 1
13755: PPUSH
13756: LD_INT 0
13758: PPUSH
13759: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 256
13772: PUSH
13773: LD_INT 600
13775: GREATEREQUAL
13776: IFFALSE 13790
13778: PUSH
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 110
13788: NOT
13789: AND
13790: IFFALSE 13816
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: LD_VAR 0 7
13801: PPUSH
13802: LD_VAR 0 1
13806: PPUSH
13807: CALL_OW 74
13811: PPUSH
13812: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13816: LD_VAR 0 1
13820: PPUSH
13821: CALL_OW 256
13825: PUSH
13826: LD_INT 600
13828: LESS
13829: IFFALSE 13843
13831: PUSH
13832: LD_VAR 0 1
13836: PPUSH
13837: CALL_OW 110
13841: NOT
13842: AND
13843: IFFALSE 13872
// begin SetTag ( i , 1 ) ;
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_INT 1
13852: PPUSH
13853: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_INT 202
13864: PPUSH
13865: LD_INT 150
13867: PPUSH
13868: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 110
13881: PUSH
13882: LD_INT 1
13884: EQUAL
13885: IFFALSE 13908
13887: PUSH
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_INT 202
13895: PPUSH
13896: LD_INT 150
13898: PPUSH
13899: CALL_OW 297
13903: PUSH
13904: LD_INT 6
13906: LESS
13907: AND
13908: IFFALSE 13916
13910: PUSH
13911: LD_VAR 0 6
13915: AND
13916: IFFALSE 13967
// begin ComExitVehicle ( tmp2 ) ;
13918: LD_VAR 0 6
13922: PPUSH
13923: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13927: LD_VAR 0 6
13931: PPUSH
13932: LD_VAR 0 1
13936: PPUSH
13937: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13941: LD_VAR 0 6
13945: PPUSH
13946: LD_INT 700
13948: PPUSH
13949: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13953: LD_VAR 0 6
13957: PPUSH
13958: LD_VAR 0 1
13962: PPUSH
13963: CALL_OW 180
// end ; end ;
13967: GO 13692
13969: POP
13970: POP
// until kirovDestroyed ;
13971: LD_EXP 16
13975: IFFALSE 13511
// repeat wait ( 0 0$1 ) ;
13977: LD_INT 35
13979: PPUSH
13980: CALL_OW 67
// for i in omarSquad union Omar do
13984: LD_ADDR_VAR 0 1
13988: PUSH
13989: LD_EXP 39
13993: PUSH
13994: LD_EXP 34
13998: UNION
13999: PUSH
14000: FOR_IN
14001: IFFALSE 14175
// if IsInArea ( i , southRoadArea ) then
14003: LD_VAR 0 1
14007: PPUSH
14008: LD_INT 15
14010: PPUSH
14011: CALL_OW 308
14015: IFFALSE 14028
// RemoveUnit ( i ) else
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 64
14026: GO 14173
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 257
14037: PUSH
14038: LD_INT 3
14040: EQUAL
14041: IFFALSE 14055
14043: PUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 310
14053: NOT
14054: AND
14055: IFFALSE 14105
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_INT 5
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 24
14070: PUSH
14071: LD_INT 251
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 2
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 58
14090: PUSH
14091: EMPTY
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 69
14104: AND
14105: IFFALSE 14158
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14107: LD_VAR 0 1
14111: PPUSH
14112: LD_INT 22
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 21
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 58
14134: PUSH
14135: EMPTY
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: PUSH
14148: LD_INT 1
14150: ARRAY
14151: PPUSH
14152: CALL_OW 120
14156: GO 14173
// ComMoveXY ( i , 208 , 162 ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_INT 208
14165: PPUSH
14166: LD_INT 162
14168: PPUSH
14169: CALL_OW 111
// end ;
14173: GO 14000
14175: POP
14176: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14177: LD_INT 22
14179: PUSH
14180: LD_INT 5
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 21
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: NOT
14206: IFFALSE 13977
// end ;
14208: PPOPN 7
14210: END
// every 0 0$1 trigger IsDead ( kirov ) do
14211: LD_INT 71
14213: PPUSH
14214: CALL_OW 301
14218: IFFALSE 14235
14220: GO 14222
14222: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14223: LD_EXP 26
14227: PPUSH
14228: LD_STRING DH-1-Kirov
14230: PPUSH
14231: CALL_OW 88
14235: END
// every 0 0$1 trigger See ( 2 , beria ) do
14236: LD_INT 2
14238: PPUSH
14239: LD_INT 106
14241: PPUSH
14242: CALL_OW 292
14246: IFFALSE 14263
14248: GO 14250
14250: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14251: LD_EXP 26
14255: PPUSH
14256: LD_STRING DH-1-Beria
14258: PPUSH
14259: CALL_OW 88
14263: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14264: LD_INT 2
14266: PPUSH
14267: LD_INT 112
14269: PPUSH
14270: CALL_OW 292
14274: IFFALSE 14543
14276: GO 14278
14278: DISABLE
// begin DialogueOn ;
14279: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14283: LD_INT 112
14285: PPUSH
14286: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14290: LD_EXP 26
14294: PPUSH
14295: LD_STRING DH-1-Kagan
14297: PPUSH
14298: CALL_OW 88
// if Kamil then
14302: LD_EXP 30
14306: IFFALSE 14344
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14308: LD_EXP 30
14312: PPUSH
14313: LD_STRING DKam-Kagan-2
14315: PPUSH
14316: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14320: LD_EXP 27
14324: PPUSH
14325: LD_STRING DG-Kagan-3
14327: PPUSH
14328: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14332: LD_EXP 27
14336: PPUSH
14337: LD_STRING DG-Kagan-4
14339: PPUSH
14340: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14344: LD_STRING KaganBase
14346: PPUSH
14347: CALL_OW 97
14351: PUSH
14352: LD_INT 1
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14455
14360: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14361: LD_EXP 26
14365: PPUSH
14366: LD_STRING DH-Kagan-5
14368: PPUSH
14369: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14373: LD_EXP 26
14377: PPUSH
14378: LD_STRING DH-Kagan-6
14380: PPUSH
14381: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14385: LD_EXP 37
14389: PPUSH
14390: LD_STRING DShar-Kagan-7
14392: PPUSH
14393: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14397: LD_EXP 26
14401: PPUSH
14402: LD_STRING DH-Kagan-8
14404: PPUSH
14405: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14409: LD_EXP 26
14413: PPUSH
14414: LD_STRING DH-Kagan-9
14416: PPUSH
14417: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14421: LD_EXP 37
14425: PPUSH
14426: LD_STRING DShar-Kagan-10
14428: PPUSH
14429: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14433: LD_EXP 26
14437: PPUSH
14438: LD_STRING DH-Kagan-11
14440: PPUSH
14441: CALL_OW 88
// kaganCaptured := true ;
14445: LD_ADDR_EXP 24
14449: PUSH
14450: LD_INT 1
14452: ST_TO_ADDR
// end ; 2 :
14453: GO 14539
14455: LD_INT 2
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14538
14463: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14464: LD_INT 22
14466: PUSH
14467: LD_INT 8
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PPUSH
14474: CALL_OW 69
14478: IFFALSE 14486
14480: PUSH
14481: LD_EXP 36
14485: AND
14486: IFFALSE 14500
// Say ( Heike , DH-Kagan-a-5 ) ;
14488: LD_EXP 26
14492: PPUSH
14493: LD_STRING DH-Kagan-a-5
14495: PPUSH
14496: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14500: LD_EXP 26
14504: PPUSH
14505: LD_STRING DH-Kagan-a-6
14507: PPUSH
14508: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14512: LD_EXP 26
14516: PPUSH
14517: LD_STRING DH-Kagan-a-7
14519: PPUSH
14520: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14524: LD_EXP 27
14528: PPUSH
14529: LD_STRING DG-Kagan-a-8
14531: PPUSH
14532: CALL_OW 88
// end ; end ;
14536: GO 14539
14538: POP
// DialogueOff ;
14539: CALL_OW 7
// end ;
14543: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14544: LD_EXP 18
14548: IFTRUE 14563
14550: PUSH
14551: LD_INT 112
14553: PPUSH
14554: CALL_OW 255
14558: PUSH
14559: LD_INT 2
14561: EQUAL
14562: OR
14563: IFFALSE 14575
14565: GO 14567
14567: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14568: LD_STRING KaganDone
14570: PPUSH
14571: CALL_OW 337
14575: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14576: LD_EXP 6
14580: IFFALSE 14603
14582: PUSH
14583: LD_EXP 49
14587: PPUSH
14588: LD_INT 95
14590: PUSH
14591: LD_INT 19
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PPUSH
14598: CALL_OW 72
14602: AND
14603: IFFALSE 14680
14605: GO 14607
14607: DISABLE
// begin DialogueOn ;
14608: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14612: LD_INT 63
14614: PPUSH
14615: LD_INT 32
14617: PPUSH
14618: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14622: LD_INT 63
14624: PPUSH
14625: LD_INT 32
14627: PPUSH
14628: LD_INT 2
14630: PPUSH
14631: LD_INT 12
14633: NEG
14634: PPUSH
14635: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14639: LD_EXP 26
14643: PPUSH
14644: LD_STRING DH-Omicron-1
14646: PPUSH
14647: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14651: LD_EXP 28
14655: PPUSH
14656: LD_STRING DM-Omicron-2
14658: PPUSH
14659: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14663: LD_INT 63
14665: PPUSH
14666: LD_INT 32
14668: PPUSH
14669: LD_INT 2
14671: PPUSH
14672: CALL_OW 331
// DialogueOff ;
14676: CALL_OW 7
// end ;
14680: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14681: LD_INT 2
14683: PPUSH
14684: LD_EXP 51
14688: PPUSH
14689: CALL_OW 292
14693: IFTRUE 14710
14695: PUSH
14696: LD_EXP 51
14700: PPUSH
14701: CALL_OW 255
14705: PUSH
14706: LD_INT 2
14708: EQUAL
14709: OR
14710: IFTRUE 14725
14712: PUSH
14713: LD_INT 106
14715: PPUSH
14716: CALL_OW 255
14720: PUSH
14721: LD_INT 2
14723: EQUAL
14724: OR
14725: IFFALSE 14738
14727: PUSH
14728: LD_EXP 51
14732: PPUSH
14733: CALL_OW 302
14737: AND
14738: IFFALSE 14751
14740: PUSH
14741: LD_EXP 26
14745: PPUSH
14746: CALL_OW 302
14750: AND
14751: IFFALSE 14764
14753: PUSH
14754: LD_EXP 36
14758: PPUSH
14759: CALL_OW 302
14763: AND
14764: IFFALSE 15517
14766: GO 14768
14768: DISABLE
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
// begin DialogueOn ;
14776: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14780: LD_INT 111
14782: PPUSH
14783: LD_INT 90
14785: PPUSH
14786: LD_INT 2
14788: PPUSH
14789: LD_INT 6
14791: NEG
14792: PPUSH
14793: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14797: LD_INT 111
14799: PPUSH
14800: LD_INT 90
14802: PPUSH
14803: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14807: LD_EXP 36
14811: PPUSH
14812: LD_STRING DA-Cap-1
14814: PPUSH
14815: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14819: LD_EXP 26
14823: PPUSH
14824: LD_STRING DH-Cap-2
14826: PPUSH
14827: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14831: LD_INT 111
14833: PPUSH
14834: LD_INT 90
14836: PPUSH
14837: LD_INT 2
14839: PPUSH
14840: CALL_OW 331
// DialogueOff ;
14844: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14848: LD_INT 35
14850: PPUSH
14851: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14855: LD_EXP 17
14859: IFTRUE 14874
14861: PUSH
14862: LD_INT 106
14864: PPUSH
14865: CALL_OW 255
14869: PUSH
14870: LD_INT 2
14872: EQUAL
14873: OR
14874: IFTRUE 14891
14876: PUSH
14877: LD_EXP 51
14881: PPUSH
14882: CALL_OW 255
14886: PUSH
14887: LD_INT 2
14889: EQUAL
14890: OR
14891: IFFALSE 14904
14893: PUSH
14894: LD_EXP 51
14898: PPUSH
14899: CALL_OW 302
14903: AND
14904: IFFALSE 14917
14906: PUSH
14907: LD_EXP 36
14911: PPUSH
14912: CALL_OW 302
14916: AND
14917: IFFALSE 14929
14919: PUSH
14920: LD_INT 2
14922: PPUSH
14923: CALL_OW 463
14927: NOT
14928: AND
14929: IFFALSE 14981
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_INT 3
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 21
14944: PUSH
14945: LD_INT 1
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 92
14954: PUSH
14955: LD_INT 110
14957: PUSH
14958: LD_INT 95
14960: PUSH
14961: LD_INT 12
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: PPUSH
14975: CALL_OW 69
14979: NOT
14980: AND
14981: IFFALSE 15033
14983: PUSH
14984: LD_INT 22
14986: PUSH
14987: LD_INT 3
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 30
14996: PUSH
14997: LD_INT 5
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 92
15006: PUSH
15007: LD_INT 110
15009: PUSH
15010: LD_INT 95
15012: PUSH
15013: LD_INT 12
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: NOT
15032: AND
15033: IFFALSE 14848
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_EXP 38
15044: PUSH
15045: LD_EXP 29
15049: PUSH
15050: LD_EXP 30
15054: PUSH
15055: LD_EXP 32
15059: PUSH
15060: LD_EXP 31
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: UNION
15071: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: LD_VAR 0 2
15081: PPUSH
15082: LD_INT 50
15084: PUSH
15085: EMPTY
15086: LIST
15087: PPUSH
15088: CALL_OW 72
15092: ST_TO_ADDR
// if tmp < 2 then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 2
15100: LESS
15101: IFFALSE 15113
// q := 2 else
15103: LD_ADDR_VAR 0 4
15107: PUSH
15108: LD_INT 2
15110: ST_TO_ADDR
15111: GO 15126
// q := Query ( LabCap ) ;
15113: LD_ADDR_VAR 0 4
15117: PUSH
15118: LD_STRING LabCap
15120: PPUSH
15121: CALL_OW 97
15125: ST_TO_ADDR
// case q of 1 :
15126: LD_VAR 0 4
15130: PUSH
15131: LD_INT 1
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15139
15137: GO 15481
15139: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15140: LD_INT 2
15142: PPUSH
15143: LD_EXP 51
15147: PPUSH
15148: CALL_OW 471
// labCaptured := true ;
15152: LD_ADDR_EXP 21
15156: PUSH
15157: LD_INT 1
15159: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15160: LD_EXP 26
15164: PPUSH
15165: LD_STRING DH-Cap-a-1
15167: PPUSH
15168: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15172: LD_EXP 36
15176: PPUSH
15177: LD_STRING DA-Cap-a-2
15179: PPUSH
15180: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
15184: LD_ADDR_VAR 0 5
15188: PUSH
15189: LD_EXP 36
15193: PUSH
15194: LD_INT -3
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT -2
15203: PUSH
15204: LD_INT -4
15206: PUSH
15207: LD_EXP 26
15211: PUSH
15212: LD_EXP 27
15216: PUSH
15217: LD_EXP 35
15221: PUSH
15222: LD_EXP 33
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: ADD
15235: PUSH
15236: LD_INT -3
15238: PUSH
15239: EMPTY
15240: LIST
15241: ADD
15242: PUSH
15243: LD_VAR 0 2
15247: ADD
15248: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15249: LD_ADDR_VAR 0 3
15253: PUSH
15254: LD_STRING Select two characters to go with Aviradze
15256: PPUSH
15257: LD_INT 2
15259: PPUSH
15260: LD_INT 2
15262: PPUSH
15263: LD_VAR 0 5
15267: PPUSH
15268: EMPTY
15269: PPUSH
15270: CALL_OW 42
15274: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15275: LD_EXP 51
15279: PPUSH
15280: LD_INT 8
15282: PPUSH
15283: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15287: LD_EXP 36
15291: PPUSH
15292: LD_INT 8
15294: PPUSH
15295: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15299: LD_ADDR_EXP 40
15303: PUSH
15304: LD_EXP 36
15308: PUSH
15309: EMPTY
15310: LIST
15311: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15312: LD_EXP 36
15316: PPUSH
15317: CALL_OW 310
15321: IFFALSE 15332
// ComExit ( Aviradze ) ;
15323: LD_EXP 36
15327: PPUSH
15328: CALL 78178 0 1
// wait ( 3 ) ;
15332: LD_INT 3
15334: PPUSH
15335: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15339: LD_EXP 36
15343: PPUSH
15344: LD_EXP 51
15348: PPUSH
15349: CALL_OW 120
// for i := 1 to 2 do
15353: LD_ADDR_VAR 0 1
15357: PUSH
15358: DOUBLE
15359: LD_INT 1
15361: DEC
15362: ST_TO_ADDR
15363: LD_INT 2
15365: PUSH
15366: FOR_TO
15367: IFFALSE 15470
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15369: LD_ADDR_EXP 40
15373: PUSH
15374: LD_EXP 40
15378: PUSH
15379: LD_VAR 0 3
15383: PUSH
15384: LD_VAR 0 1
15388: ARRAY
15389: UNION
15390: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15391: LD_VAR 0 3
15395: PUSH
15396: LD_VAR 0 1
15400: ARRAY
15401: PPUSH
15402: LD_INT 8
15404: PPUSH
15405: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15409: LD_VAR 0 3
15413: PUSH
15414: LD_VAR 0 1
15418: ARRAY
15419: PPUSH
15420: CALL_OW 310
15424: IFFALSE 15441
// ComExit ( tmp2 [ i ] ) ;
15426: LD_VAR 0 3
15430: PUSH
15431: LD_VAR 0 1
15435: ARRAY
15436: PPUSH
15437: CALL 78178 0 1
// wait ( 3 ) ;
15441: LD_INT 3
15443: PPUSH
15444: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15448: LD_VAR 0 3
15452: PUSH
15453: LD_VAR 0 1
15457: ARRAY
15458: PPUSH
15459: LD_EXP 51
15463: PPUSH
15464: CALL_OW 120
// end ;
15468: GO 15366
15470: POP
15471: POP
// SetAchievement ( ACH_LAB ) ;
15472: LD_STRING ACH_LAB
15474: PPUSH
15475: CALL_OW 543
// end ; 2 :
15479: GO 15517
15481: LD_INT 2
15483: DOUBLE
15484: EQUAL
15485: IFTRUE 15489
15487: GO 15516
15489: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15490: LD_EXP 26
15494: PPUSH
15495: LD_STRING DH-Cap-b-1
15497: PPUSH
15498: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15502: LD_EXP 36
15506: PPUSH
15507: LD_STRING DA-Cap-b-2
15509: PPUSH
15510: CALL_OW 88
// end ; end ;
15514: GO 15517
15516: POP
// end ;
15517: PPOPN 5
15519: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15520: LD_INT 10
15522: PPUSH
15523: LD_INT 22
15525: PUSH
15526: LD_INT 2
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 30
15535: PUSH
15536: LD_INT 31
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 70
15551: PUSH
15552: LD_INT 2
15554: GREATEREQUAL
15555: IFFALSE 15567
15557: GO 15559
15559: DISABLE
// SetAchievement ( ACH_KING ) ;
15560: LD_STRING ACH_KING
15562: PPUSH
15563: CALL_OW 543
15567: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15568: LD_EXP 11
15572: NOT
15573: IFFALSE 15626
15575: PUSH
15576: LD_INT 10
15578: PPUSH
15579: LD_INT 22
15581: PUSH
15582: LD_INT 2
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 2
15591: PUSH
15592: LD_INT 30
15594: PUSH
15595: LD_INT 31
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 30
15604: PUSH
15605: LD_INT 4
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 70
15625: AND
15626: IFFALSE 15656
15628: GO 15630
15630: DISABLE
// begin hillBase := true ;
15631: LD_ADDR_EXP 15
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15639: LD_STRING HillDone
15641: PPUSH
15642: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15646: LD_INT 22
15648: PPUSH
15649: LD_INT 0
15651: PPUSH
15652: CALL_OW 424
// end ;
15656: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15657: LD_EXP 31
15661: IFFALSE 15678
15663: PUSH
15664: LD_EXP 31
15668: PPUSH
15669: CALL_OW 256
15673: PUSH
15674: LD_INT 3
15676: LESS
15677: AND
15678: IFFALSE 15724
15680: GO 15682
15682: DISABLE
// begin DialogueOn ;
15683: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15687: LD_EXP 31
15691: PPUSH
15692: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15696: LD_EXP 31
15700: PPUSH
15701: LD_STRING DK-Kkilled-1
15703: PPUSH
15704: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15708: LD_EXP 26
15712: PPUSH
15713: LD_STRING DH-Kkilled-2
15715: PPUSH
15716: CALL_OW 88
// DialogueOff ;
15720: CALL_OW 7
// end ;
15724: END
// every 0 0$1 trigger kaiaKilledByRussian do
15725: LD_EXP 23
15729: IFFALSE 15746
15731: GO 15733
15733: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15734: LD_EXP 26
15738: PPUSH
15739: LD_STRING DH-Kkilled-3
15741: PPUSH
15742: CALL_OW 88
15746: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15747: LD_EXP 16
15751: IFFALSE 15774
15753: PUSH
15754: LD_INT 106
15756: PPUSH
15757: CALL_OW 255
15761: PUSH
15762: LD_INT 2
15764: EQUAL
15765: IFTRUE 15773
15767: PUSH
15768: LD_EXP 17
15772: OR
15773: AND
15774: IFFALSE 15805
15776: PUSH
15777: LD_EXP 18
15781: IFTRUE 15804
15783: PUSH
15784: LD_EXP 24
15788: IFFALSE 15803
15790: PUSH
15791: LD_INT 112
15793: PPUSH
15794: CALL_OW 255
15798: PUSH
15799: LD_INT 2
15801: EQUAL
15802: AND
15803: OR
15804: AND
15805: IFFALSE 17057
15807: GO 15809
15809: DISABLE
15810: LD_INT 0
15812: PPUSH
15813: PPUSH
15814: PPUSH
15815: PPUSH
15816: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15817: LD_STRING GoToWest
15819: PPUSH
15820: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15824: LD_INT 17
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15834: LD_INT 35
15836: PPUSH
15837: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: LD_INT 17
15848: PPUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 2
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 2
15861: PUSH
15862: LD_INT 21
15864: PUSH
15865: LD_INT 1
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 21
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 3
15884: PUSH
15885: LD_INT 58
15887: PUSH
15888: EMPTY
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 70
15912: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15913: LD_ADDR_VAR 0 3
15917: PUSH
15918: LD_INT 22
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 3
15930: PUSH
15931: LD_INT 55
15933: PUSH
15934: EMPTY
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 2
15943: PUSH
15944: LD_INT 21
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 21
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 58
15969: PUSH
15970: EMPTY
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15996: LD_VAR 0 2
16000: PUSH
16001: LD_INT 0
16003: PLUS
16004: PUSH
16005: LD_VAR 0 3
16009: PUSH
16010: LD_INT 0
16012: PLUS
16013: EQUAL
16014: IFFALSE 15834
// SaveCharacters ( Heike , 04_1_Heike ) ;
16016: LD_EXP 26
16020: PPUSH
16021: LD_STRING 04_1_Heike
16023: PPUSH
16024: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
16028: LD_EXP 36
16032: IFFALSE 16047
16034: PUSH
16035: LD_EXP 36
16039: PUSH
16040: LD_EXP 40
16044: IN
16045: NOT
16046: AND
16047: IFFALSE 16063
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
16049: LD_EXP 36
16053: PPUSH
16054: LD_STRING 04_1_Aviradze
16056: PPUSH
16057: CALL_OW 38
16061: GO 16081
// if Aviradze then
16063: LD_EXP 36
16067: IFFALSE 16081
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
16069: LD_EXP 36
16073: PPUSH
16074: LD_STRING 04_1_Aviradze_L
16076: PPUSH
16077: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
16081: LD_EXP 29
16085: IFFALSE 16100
16087: PUSH
16088: LD_EXP 29
16092: PUSH
16093: LD_EXP 40
16097: IN
16098: NOT
16099: AND
16100: IFFALSE 16116
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
16102: LD_EXP 29
16106: PPUSH
16107: LD_STRING 04_1_Ibrahim
16109: PPUSH
16110: CALL_OW 38
16114: GO 16134
// if Ibrahim then
16116: LD_EXP 29
16120: IFFALSE 16134
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
16122: LD_EXP 29
16126: PPUSH
16127: LD_STRING 04_1_Ibrahim_L
16129: PPUSH
16130: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
16134: LD_EXP 30
16138: IFFALSE 16153
16140: PUSH
16141: LD_EXP 30
16145: PUSH
16146: LD_EXP 40
16150: IN
16151: NOT
16152: AND
16153: IFFALSE 16169
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16155: LD_EXP 30
16159: PPUSH
16160: LD_STRING 04_1_Kamil
16162: PPUSH
16163: CALL_OW 38
16167: GO 16187
// if Kamil then
16169: LD_EXP 30
16173: IFFALSE 16187
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16175: LD_EXP 30
16179: PPUSH
16180: LD_STRING 04_1_Kamil_L
16182: PPUSH
16183: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16187: LD_EXP 32
16191: IFFALSE 16206
16193: PUSH
16194: LD_EXP 32
16198: PUSH
16199: LD_EXP 40
16203: IN
16204: NOT
16205: AND
16206: IFFALSE 16222
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16208: LD_EXP 32
16212: PPUSH
16213: LD_STRING 04_1_Sophia
16215: PPUSH
16216: CALL_OW 38
16220: GO 16240
// if Sophia then
16222: LD_EXP 32
16226: IFFALSE 16240
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16228: LD_EXP 32
16232: PPUSH
16233: LD_STRING 04_1_Sophia_L
16235: PPUSH
16236: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16240: LD_EXP 31
16244: IFFALSE 16259
16246: PUSH
16247: LD_EXP 31
16251: PUSH
16252: LD_EXP 40
16256: IN
16257: NOT
16258: AND
16259: IFFALSE 16275
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16261: LD_EXP 31
16265: PPUSH
16266: LD_STRING 04_1_Kaia
16268: PPUSH
16269: CALL_OW 38
16273: GO 16293
// if Kaia then
16275: LD_EXP 31
16279: IFFALSE 16293
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16281: LD_EXP 31
16285: PPUSH
16286: LD_STRING 04_1_Kaia_L
16288: PPUSH
16289: CALL_OW 38
// if Givi then
16293: LD_EXP 27
16297: IFFALSE 16311
// SaveCharacters ( Givi , 04_1_Givi ) ;
16299: LD_EXP 27
16303: PPUSH
16304: LD_STRING 04_1_Givi
16306: PPUSH
16307: CALL_OW 38
// if Mike then
16311: LD_EXP 28
16315: IFFALSE 16329
// SaveCharacters ( Mike , 04_1_Mike ) ;
16317: LD_EXP 28
16321: PPUSH
16322: LD_STRING 04_1_Mike
16324: PPUSH
16325: CALL_OW 38
// if Markov then
16329: LD_EXP 33
16333: IFFALSE 16347
// SaveCharacters ( Markov , 04_1_Markov ) ;
16335: LD_EXP 33
16339: PPUSH
16340: LD_STRING 04_1_Markov
16342: PPUSH
16343: CALL_OW 38
// if Kurt then
16347: LD_EXP 35
16351: IFFALSE 16372
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16353: LD_EXP 35
16357: PPUSH
16358: LD_STRING 04_1_Kurt
16360: PPUSH
16361: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16365: LD_STRING enableBioCharacter(BIO_KURT)
16367: PPUSH
16368: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16372: LD_EXP 38
16376: PUSH
16377: LD_EXP 40
16381: DIFF
16382: IFFALSE 16402
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16384: LD_EXP 38
16388: PUSH
16389: LD_EXP 40
16393: DIFF
16394: PPUSH
16395: LD_STRING 04_1_others
16397: PPUSH
16398: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16402: LD_EXP 40
16406: IFFALSE 16414
16408: PUSH
16409: LD_EXP 38
16413: AND
16414: IFFALSE 16499
// begin tmp := [ ] ;
16416: LD_ADDR_VAR 0 2
16420: PUSH
16421: EMPTY
16422: ST_TO_ADDR
// for i in heikeSecondSquad do
16423: LD_ADDR_VAR 0 1
16427: PUSH
16428: LD_EXP 38
16432: PUSH
16433: FOR_IN
16434: IFFALSE 16479
// if i in aviradzeSquad then
16436: LD_VAR 0 1
16440: PUSH
16441: LD_EXP 40
16445: IN
16446: IFFALSE 16477
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16448: LD_ADDR_VAR 0 2
16452: PUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_VAR 0 2
16462: PUSH
16463: LD_INT 1
16465: PLUS
16466: PPUSH
16467: LD_VAR 0 1
16471: PPUSH
16472: CALL_OW 1
16476: ST_TO_ADDR
16477: GO 16433
16479: POP
16480: POP
// if tmp then
16481: LD_VAR 0 2
16485: IFFALSE 16499
// SaveCharacters ( tmp , 04_1_others_L ) ;
16487: LD_VAR 0 2
16491: PPUSH
16492: LD_STRING 04_1_others_L
16494: PPUSH
16495: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16499: LD_ADDR_VAR 0 2
16503: PUSH
16504: LD_INT 22
16506: PUSH
16507: LD_INT 2
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 23
16516: PUSH
16517: LD_INT 0
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: ST_TO_ADDR
// if tmp then
16533: LD_VAR 0 2
16537: IFFALSE 16551
// SaveCharacters ( tmp , 04_1_apes ) ;
16539: LD_VAR 0 2
16543: PPUSH
16544: LD_STRING 04_1_apes
16546: PPUSH
16547: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: LD_INT 17
16558: PPUSH
16559: LD_INT 21
16561: PUSH
16562: LD_INT 2
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 70
16573: ST_TO_ADDR
// if tmp then
16574: LD_VAR 0 2
16578: IFFALSE 16922
// begin tmp2 := [ ] ;
16580: LD_ADDR_VAR 0 3
16584: PUSH
16585: EMPTY
16586: ST_TO_ADDR
// for i in tmp do
16587: LD_ADDR_VAR 0 1
16591: PUSH
16592: LD_VAR 0 2
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16908
// begin driver := IsDrivenBy ( i ) ;
16600: LD_ADDR_VAR 0 5
16604: PUSH
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 311
16614: ST_TO_ADDR
// if not driver then
16615: LD_VAR 0 5
16619: NOT
16620: IFFALSE 16624
// continue ;
16622: GO 16597
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 264
16633: PUSH
16634: LD_INT 32
16636: PUSH
16637: LD_INT 12
16639: PUSH
16640: LD_INT 51
16642: PUSH
16643: LD_INT 89
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: IN
16652: IFFALSE 16800
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16654: LD_ADDR_VAR 0 4
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: LD_INT 1
16666: PPUSH
16667: CALL_OW 289
16671: PUSH
16672: LD_VAR 0 1
16676: PPUSH
16677: LD_INT 2
16679: PPUSH
16680: CALL_OW 289
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16689: LD_ADDR_VAR 0 3
16693: PUSH
16694: LD_VAR 0 3
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 1
16706: PLUS
16707: PPUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 265
16717: PUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 262
16727: PUSH
16728: LD_VAR 0 1
16732: PPUSH
16733: CALL_OW 263
16737: PUSH
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 264
16747: PUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 248
16757: PUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 256
16767: PUSH
16768: LD_VAR 0 4
16772: PUSH
16773: LD_VAR 0 5
16777: PPUSH
16778: CALL_OW 257
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: PPUSH
16793: CALL_OW 1
16797: ST_TO_ADDR
// end else
16798: GO 16906
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16800: LD_ADDR_VAR 0 3
16804: PUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: LD_VAR 0 3
16814: PUSH
16815: LD_INT 1
16817: PLUS
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 265
16828: PUSH
16829: LD_VAR 0 1
16833: PPUSH
16834: CALL_OW 262
16838: PUSH
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL_OW 263
16848: PUSH
16849: LD_VAR 0 1
16853: PPUSH
16854: CALL_OW 264
16858: PUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 248
16868: PUSH
16869: LD_VAR 0 1
16873: PPUSH
16874: CALL_OW 256
16878: PUSH
16879: EMPTY
16880: PUSH
16881: LD_VAR 0 5
16885: PPUSH
16886: CALL_OW 257
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 1
16905: ST_TO_ADDR
// end ;
16906: GO 16597
16908: POP
16909: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_STRING 04_1_Vehicles
16917: PPUSH
16918: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16922: LD_EXP 21
16926: PPUSH
16927: LD_STRING 04_1_RuLabCaptured
16929: PPUSH
16930: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16934: LD_EXP 19
16938: PPUSH
16939: LD_STRING 04_1_EscapeCounter
16941: PPUSH
16942: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16946: LD_EXP 15
16950: PPUSH
16951: LD_STRING 04_1_BaseHill
16953: PPUSH
16954: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16958: LD_OWVAR 1
16962: PPUSH
16963: LD_STRING 04_1_Time
16965: PPUSH
16966: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16970: LD_EXP 14
16974: PPUSH
16975: LD_STRING 04_1_DeadCounter
16977: PPUSH
16978: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16982: LD_EXP 24
16986: PUSH
16987: LD_INT 112
16989: PPUSH
16990: CALL_OW 255
16994: MUL
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: PPUSH
17000: LD_STRING 04_1_KaganCaptured
17002: PPUSH
17003: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
17007: LD_INT 22
17009: PUSH
17010: LD_INT 2
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 34
17019: PUSH
17020: LD_INT 26
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PPUSH
17031: CALL_OW 69
17035: PUSH
17036: LD_INT 0
17038: PLUS
17039: PPUSH
17040: LD_STRING 04_1_Flamethrower
17042: PPUSH
17043: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
17047: LD_INT 1
17049: PPUSH
17050: LD_STRING __x1\04_cont2
17052: PPUSH
17053: CALL_OW 340
// end ; end_of_file
17057: PPOPN 5
17059: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 266
17069: PUSH
17070: LD_INT 0
17072: EQUAL
17073: IFFALSE 17090
17075: PUSH
17076: LD_VAR 0 1
17080: PPUSH
17081: CALL_OW 255
17085: PUSH
17086: LD_INT 2
17088: EQUAL
17089: AND
17090: IFFALSE 17100
// baseConstructed := true ;
17092: LD_ADDR_EXP 3
17096: PUSH
17097: LD_INT 1
17099: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 266
17109: PUSH
17110: LD_INT 6
17112: EQUAL
17113: IFFALSE 17130
17115: PUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 255
17125: PUSH
17126: LD_INT 2
17128: EQUAL
17129: AND
17130: IFFALSE 17140
// labConstructed := true ;
17132: LD_ADDR_EXP 4
17136: PUSH
17137: LD_INT 1
17139: ST_TO_ADDR
// end ;
17140: PPOPN 1
17142: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
17143: LD_VAR 0 1
17147: PPUSH
17148: CALL 34222 0 1
// if un = Heike then
17152: LD_VAR 0 1
17156: PUSH
17157: LD_EXP 26
17161: EQUAL
17162: IFFALSE 17171
// YouLost ( Heike ) ;
17164: LD_STRING Heike
17166: PPUSH
17167: CALL_OW 104
// if un = Omar then
17171: LD_VAR 0 1
17175: PUSH
17176: LD_EXP 34
17180: EQUAL
17181: IFFALSE 17190
// YouLost ( Omar ) ;
17183: LD_STRING Omar
17185: PPUSH
17186: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17190: LD_VAR 0 1
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 23
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 21
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: PPUSH
17230: CALL_OW 69
17234: IN
17235: IFFALSE 17251
// loseCounter := loseCounter + 1 ;
17237: LD_ADDR_EXP 14
17241: PUSH
17242: LD_EXP 14
17246: PUSH
17247: LD_INT 1
17249: PLUS
17250: ST_TO_ADDR
// if un = omikron then
17251: LD_VAR 0 1
17255: PUSH
17256: LD_INT 64
17258: EQUAL
17259: IFFALSE 17269
// omicronFall := true ;
17261: LD_ADDR_EXP 13
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// if un = kirov then
17269: LD_VAR 0 1
17273: PUSH
17274: LD_INT 71
17276: EQUAL
17277: IFFALSE 17294
// begin ChangeMissionObjectives ( KirovDone ) ;
17279: LD_STRING KirovDone
17281: PPUSH
17282: CALL_OW 337
// kirovDestroyed := true ;
17286: LD_ADDR_EXP 16
17290: PUSH
17291: LD_INT 1
17293: ST_TO_ADDR
// end ; if un = beria then
17294: LD_VAR 0 1
17298: PUSH
17299: LD_INT 106
17301: EQUAL
17302: IFFALSE 17319
// begin ChangeMissionObjectives ( BeriaDone ) ;
17304: LD_STRING BeriaDone
17306: PPUSH
17307: CALL_OW 337
// beriaDestroyed := true ;
17311: LD_ADDR_EXP 17
17315: PUSH
17316: LD_INT 1
17318: ST_TO_ADDR
// end ; if un = kagan then
17319: LD_VAR 0 1
17323: PUSH
17324: LD_INT 112
17326: EQUAL
17327: IFFALSE 17337
// kaganDestroyed := true ;
17329: LD_ADDR_EXP 18
17333: PUSH
17334: LD_INT 1
17336: ST_TO_ADDR
// if un in russianPatrol then
17337: LD_VAR 0 1
17341: PUSH
17342: LD_EXP 48
17346: IN
17347: IFFALSE 17365
// russianPatrol := russianPatrol diff un ;
17349: LD_ADDR_EXP 48
17353: PUSH
17354: LD_EXP 48
17358: PUSH
17359: LD_VAR 0 1
17363: DIFF
17364: ST_TO_ADDR
// if un in russianOmicronAttackers then
17365: LD_VAR 0 1
17369: PUSH
17370: LD_EXP 49
17374: IN
17375: IFFALSE 17393
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17377: LD_ADDR_EXP 49
17381: PUSH
17382: LD_EXP 49
17386: PUSH
17387: LD_VAR 0 1
17391: DIFF
17392: ST_TO_ADDR
// end ;
17393: PPOPN 1
17395: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17396: LD_INT 0
17398: PPUSH
17399: PPUSH
17400: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17401: LD_VAR 0 1
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: LD_INT 22
17411: PUSH
17412: LD_INT 3
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 22
17421: PUSH
17422: LD_INT 4
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_INT 6
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 30
17447: PUSH
17448: LD_INT 32
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PPUSH
17459: CALL_OW 69
17463: IN
17464: IFFALSE 17637
// begin sol := UnitsInside ( un ) ;
17466: LD_ADDR_VAR 0 3
17470: PUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 313
17480: ST_TO_ADDR
// if not sol then
17481: LD_VAR 0 3
17485: NOT
17486: IFFALSE 17490
// exit ;
17488: GO 17637
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17490: LD_ADDR_VAR 0 4
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_VAR 0 1
17502: PPUSH
17503: CALL_OW 255
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: LD_INT 4
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 30
17527: PUSH
17528: LD_INT 5
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 69
17548: ST_TO_ADDR
// if not nearestBarracks then
17549: LD_VAR 0 4
17553: NOT
17554: IFFALSE 17558
// exit ;
17556: GO 17637
// for i in nearestBarracks do
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_VAR 0 4
17567: PUSH
17568: FOR_IN
17569: IFFALSE 17604
// if UnitsInside ( i ) = 6 then
17571: LD_VAR 0 2
17575: PPUSH
17576: CALL_OW 313
17580: PUSH
17581: LD_INT 6
17583: EQUAL
17584: IFFALSE 17602
// nearestBarracks := nearestBarracks diff i ;
17586: LD_ADDR_VAR 0 4
17590: PUSH
17591: LD_VAR 0 4
17595: PUSH
17596: LD_VAR 0 2
17600: DIFF
17601: ST_TO_ADDR
17602: GO 17568
17604: POP
17605: POP
// if not nearestBarracks then
17606: LD_VAR 0 4
17610: NOT
17611: IFFALSE 17615
// exit ;
17613: GO 17637
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17615: LD_VAR 0 3
17619: PUSH
17620: LD_INT 1
17622: ARRAY
17623: PPUSH
17624: LD_VAR 0 4
17628: PUSH
17629: LD_INT 1
17631: ARRAY
17632: PPUSH
17633: CALL_OW 120
// end ; end ;
17637: PPOPN 4
17639: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17640: LD_INT 0
17642: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17643: LD_EXP 8
17647: NOT
17648: IFTRUE 17657
17650: PUSH
17651: LD_EXP 5
17655: NOT
17656: OR
17657: IFFALSE 17661
// exit ;
17659: GO 17729
// for i in camAreas do
17661: LD_ADDR_VAR 0 5
17665: PUSH
17666: LD_EXP 8
17670: PUSH
17671: FOR_IN
17672: IFFALSE 17727
// if InArea ( x , y , i ) then
17674: LD_VAR 0 3
17678: PPUSH
17679: LD_VAR 0 4
17683: PPUSH
17684: LD_VAR 0 5
17688: PPUSH
17689: CALL_OW 309
17693: IFFALSE 17725
// begin SetAreaMapShow ( i , 0 ) ;
17695: LD_VAR 0 5
17699: PPUSH
17700: LD_INT 0
17702: PPUSH
17703: CALL_OW 424
// camAreas := camAreas diff i ;
17707: LD_ADDR_EXP 8
17711: PUSH
17712: LD_EXP 8
17716: PUSH
17717: LD_VAR 0 5
17721: DIFF
17722: ST_TO_ADDR
// break ;
17723: GO 17727
// end ;
17725: GO 17671
17727: POP
17728: POP
// end ;
17729: PPOPN 5
17731: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17732: LD_VAR 0 1
17736: PUSH
17737: LD_INT 2
17739: EQUAL
17740: IFFALSE 17759
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: LD_INT 5
17750: PUSH
17751: LD_INT 8
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: IN
17758: AND
17759: IFFALSE 17768
// YouLost ( Ally ) ;
17761: LD_STRING Ally
17763: PPUSH
17764: CALL_OW 104
// end ;
17768: PPOPN 2
17770: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17771: LD_VAR 0 1
17775: PUSH
17776: LD_EXP 31
17780: EQUAL
17781: IFFALSE 17800
17783: PUSH
17784: LD_VAR 0 2
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: LD_INT 6
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: IN
17799: AND
17800: IFFALSE 17831
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17802: LD_ADDR_EXP 23
17806: PUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 250
17816: PUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 251
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: ST_TO_ADDR
// end ;
17831: PPOPN 3
17833: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17834: LD_VAR 0 1
17838: PPUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: CALL 34280 0 2
// end ; end_of_file
17848: PPOPN 2
17850: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17851: LD_EXP 11
17855: NOT
17856: IFFALSE 17895
17858: PUSH
17859: LD_INT 12
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 287
17869: PUSH
17870: LD_INT 20
17872: PUSH
17873: LD_INT 16
17875: PUSH
17876: LD_INT 12
17878: PUSH
17879: LD_INT 10
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: PUSH
17888: LD_OWVAR 67
17892: ARRAY
17893: LESS
17894: AND
17895: IFFALSE 17922
17897: GO 17899
17899: DISABLE
// begin enable ;
17900: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17901: LD_INT 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 12
17911: PPUSH
17912: LD_INT 12
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: CALL_OW 55
// end ; end_of_file
17922: END
// every 0 0$1 trigger omarCountdown do
17923: LD_EXP 22
17927: IFFALSE 17979
17929: GO 17931
17931: DISABLE
// begin enable ;
17932: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17933: LD_ADDR_OWVAR 47
17937: PUSH
17938: LD_STRING #X104-1
17940: PUSH
17941: LD_EXP 22
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17950: LD_ADDR_EXP 22
17954: PUSH
17955: LD_EXP 22
17959: PUSH
17960: LD_INT 35
17962: MINUS
17963: ST_TO_ADDR
// if not omarCountdown then
17964: LD_EXP 22
17968: NOT
17969: IFFALSE 17979
// display_strings :=  ;
17971: LD_ADDR_OWVAR 47
17975: PUSH
17976: LD_STRING 
17978: ST_TO_ADDR
// end ; end_of_file
17979: END
// export globalGameSaveCounter ; every 0 0$1 do
17980: GO 17982
17982: DISABLE
// begin enable ;
17983: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17984: LD_STRING updateTimer(
17986: PUSH
17987: LD_OWVAR 1
17991: STR
17992: PUSH
17993: LD_STRING );
17995: STR
17996: PPUSH
17997: CALL_OW 559
// end ;
18001: END
// every 0 0$1 do
18002: GO 18004
18004: DISABLE
// begin globalGameSaveCounter := 0 ;
18005: LD_ADDR_EXP 53
18009: PUSH
18010: LD_INT 0
18012: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18013: LD_STRING setGameSaveCounter(0)
18015: PPUSH
18016: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18020: LD_STRING initStreamRollete();
18022: PPUSH
18023: CALL_OW 559
// InitStreamMode ;
18027: CALL 19372 0 0
// DefineStreamItems ( false ) ;
18031: LD_INT 0
18033: PPUSH
18034: CALL 19836 0 1
// end ;
18038: END
// export function SOS_MapStart ( ) ; begin
18039: LD_INT 0
18041: PPUSH
// if streamModeActive then
18042: LD_EXP 54
18046: IFFALSE 18055
// DefineStreamItems ( true ) ;
18048: LD_INT 1
18050: PPUSH
18051: CALL 19836 0 1
// UpdateLuaVariables ( ) ;
18055: CALL 18072 0 0
// UpdateFactoryWaypoints ( ) ;
18059: CALL 32958 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18063: CALL 33210 0 0
// end ;
18067: LD_VAR 0 1
18071: RET
// function UpdateLuaVariables ( ) ; begin
18072: LD_INT 0
18074: PPUSH
// if globalGameSaveCounter then
18075: LD_EXP 53
18079: IFFALSE 18113
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18081: LD_ADDR_EXP 53
18085: PUSH
18086: LD_EXP 53
18090: PPUSH
18091: CALL 79153 0 1
18095: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18096: LD_STRING setGameSaveCounter(
18098: PUSH
18099: LD_EXP 53
18103: STR
18104: PUSH
18105: LD_STRING )
18107: STR
18108: PPUSH
18109: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18113: LD_STRING setGameDifficulty(
18115: PUSH
18116: LD_OWVAR 67
18120: STR
18121: PUSH
18122: LD_STRING )
18124: STR
18125: PPUSH
18126: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
18130: LD_STRING displayDifficulty(
18132: PUSH
18133: LD_OWVAR 67
18137: STR
18138: PUSH
18139: LD_STRING )
18141: STR
18142: PPUSH
18143: CALL_OW 559
// end ;
18147: LD_VAR 0 1
18151: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18152: LD_INT 0
18154: PPUSH
// if p2 = stream_mode then
18155: LD_VAR 0 2
18159: PUSH
18160: LD_INT 100
18162: EQUAL
18163: IFFALSE 19166
// begin if not StreamModeActive then
18165: LD_EXP 54
18169: NOT
18170: IFFALSE 18180
// StreamModeActive := true ;
18172: LD_ADDR_EXP 54
18176: PUSH
18177: LD_INT 1
18179: ST_TO_ADDR
// if p3 = 0 then
18180: LD_VAR 0 3
18184: PUSH
18185: LD_INT 0
18187: EQUAL
18188: IFFALSE 18194
// InitStreamMode ;
18190: CALL 19372 0 0
// if p3 = 1 then
18194: LD_VAR 0 3
18198: PUSH
18199: LD_INT 1
18201: EQUAL
18202: IFFALSE 18212
// sRocket := true ;
18204: LD_ADDR_EXP 59
18208: PUSH
18209: LD_INT 1
18211: ST_TO_ADDR
// if p3 = 2 then
18212: LD_VAR 0 3
18216: PUSH
18217: LD_INT 2
18219: EQUAL
18220: IFFALSE 18230
// sSpeed := true ;
18222: LD_ADDR_EXP 58
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// if p3 = 3 then
18230: LD_VAR 0 3
18234: PUSH
18235: LD_INT 3
18237: EQUAL
18238: IFFALSE 18248
// sEngine := true ;
18240: LD_ADDR_EXP 60
18244: PUSH
18245: LD_INT 1
18247: ST_TO_ADDR
// if p3 = 4 then
18248: LD_VAR 0 3
18252: PUSH
18253: LD_INT 4
18255: EQUAL
18256: IFFALSE 18266
// sSpec := true ;
18258: LD_ADDR_EXP 57
18262: PUSH
18263: LD_INT 1
18265: ST_TO_ADDR
// if p3 = 5 then
18266: LD_VAR 0 3
18270: PUSH
18271: LD_INT 5
18273: EQUAL
18274: IFFALSE 18284
// sLevel := true ;
18276: LD_ADDR_EXP 61
18280: PUSH
18281: LD_INT 1
18283: ST_TO_ADDR
// if p3 = 6 then
18284: LD_VAR 0 3
18288: PUSH
18289: LD_INT 6
18291: EQUAL
18292: IFFALSE 18302
// sArmoury := true ;
18294: LD_ADDR_EXP 62
18298: PUSH
18299: LD_INT 1
18301: ST_TO_ADDR
// if p3 = 7 then
18302: LD_VAR 0 3
18306: PUSH
18307: LD_INT 7
18309: EQUAL
18310: IFFALSE 18320
// sRadar := true ;
18312: LD_ADDR_EXP 63
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// if p3 = 8 then
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 8
18327: EQUAL
18328: IFFALSE 18338
// sBunker := true ;
18330: LD_ADDR_EXP 64
18334: PUSH
18335: LD_INT 1
18337: ST_TO_ADDR
// if p3 = 9 then
18338: LD_VAR 0 3
18342: PUSH
18343: LD_INT 9
18345: EQUAL
18346: IFFALSE 18356
// sHack := true ;
18348: LD_ADDR_EXP 65
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// if p3 = 10 then
18356: LD_VAR 0 3
18360: PUSH
18361: LD_INT 10
18363: EQUAL
18364: IFFALSE 18374
// sFire := true ;
18366: LD_ADDR_EXP 66
18370: PUSH
18371: LD_INT 1
18373: ST_TO_ADDR
// if p3 = 11 then
18374: LD_VAR 0 3
18378: PUSH
18379: LD_INT 11
18381: EQUAL
18382: IFFALSE 18392
// sRefresh := true ;
18384: LD_ADDR_EXP 67
18388: PUSH
18389: LD_INT 1
18391: ST_TO_ADDR
// if p3 = 12 then
18392: LD_VAR 0 3
18396: PUSH
18397: LD_INT 12
18399: EQUAL
18400: IFFALSE 18410
// sExp := true ;
18402: LD_ADDR_EXP 68
18406: PUSH
18407: LD_INT 1
18409: ST_TO_ADDR
// if p3 = 13 then
18410: LD_VAR 0 3
18414: PUSH
18415: LD_INT 13
18417: EQUAL
18418: IFFALSE 18428
// sDepot := true ;
18420: LD_ADDR_EXP 69
18424: PUSH
18425: LD_INT 1
18427: ST_TO_ADDR
// if p3 = 14 then
18428: LD_VAR 0 3
18432: PUSH
18433: LD_INT 14
18435: EQUAL
18436: IFFALSE 18446
// sFlag := true ;
18438: LD_ADDR_EXP 70
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// if p3 = 15 then
18446: LD_VAR 0 3
18450: PUSH
18451: LD_INT 15
18453: EQUAL
18454: IFFALSE 18464
// sKamikadze := true ;
18456: LD_ADDR_EXP 78
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
// if p3 = 16 then
18464: LD_VAR 0 3
18468: PUSH
18469: LD_INT 16
18471: EQUAL
18472: IFFALSE 18482
// sTroll := true ;
18474: LD_ADDR_EXP 79
18478: PUSH
18479: LD_INT 1
18481: ST_TO_ADDR
// if p3 = 17 then
18482: LD_VAR 0 3
18486: PUSH
18487: LD_INT 17
18489: EQUAL
18490: IFFALSE 18500
// sSlow := true ;
18492: LD_ADDR_EXP 80
18496: PUSH
18497: LD_INT 1
18499: ST_TO_ADDR
// if p3 = 18 then
18500: LD_VAR 0 3
18504: PUSH
18505: LD_INT 18
18507: EQUAL
18508: IFFALSE 18518
// sLack := true ;
18510: LD_ADDR_EXP 81
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
// if p3 = 19 then
18518: LD_VAR 0 3
18522: PUSH
18523: LD_INT 19
18525: EQUAL
18526: IFFALSE 18536
// sTank := true ;
18528: LD_ADDR_EXP 83
18532: PUSH
18533: LD_INT 1
18535: ST_TO_ADDR
// if p3 = 20 then
18536: LD_VAR 0 3
18540: PUSH
18541: LD_INT 20
18543: EQUAL
18544: IFFALSE 18554
// sRemote := true ;
18546: LD_ADDR_EXP 84
18550: PUSH
18551: LD_INT 1
18553: ST_TO_ADDR
// if p3 = 21 then
18554: LD_VAR 0 3
18558: PUSH
18559: LD_INT 21
18561: EQUAL
18562: IFFALSE 18572
// sPowell := true ;
18564: LD_ADDR_EXP 85
18568: PUSH
18569: LD_INT 1
18571: ST_TO_ADDR
// if p3 = 22 then
18572: LD_VAR 0 3
18576: PUSH
18577: LD_INT 22
18579: EQUAL
18580: IFFALSE 18590
// sTeleport := true ;
18582: LD_ADDR_EXP 88
18586: PUSH
18587: LD_INT 1
18589: ST_TO_ADDR
// if p3 = 23 then
18590: LD_VAR 0 3
18594: PUSH
18595: LD_INT 23
18597: EQUAL
18598: IFFALSE 18608
// sOilTower := true ;
18600: LD_ADDR_EXP 90
18604: PUSH
18605: LD_INT 1
18607: ST_TO_ADDR
// if p3 = 24 then
18608: LD_VAR 0 3
18612: PUSH
18613: LD_INT 24
18615: EQUAL
18616: IFFALSE 18626
// sShovel := true ;
18618: LD_ADDR_EXP 91
18622: PUSH
18623: LD_INT 1
18625: ST_TO_ADDR
// if p3 = 25 then
18626: LD_VAR 0 3
18630: PUSH
18631: LD_INT 25
18633: EQUAL
18634: IFFALSE 18644
// sSheik := true ;
18636: LD_ADDR_EXP 92
18640: PUSH
18641: LD_INT 1
18643: ST_TO_ADDR
// if p3 = 26 then
18644: LD_VAR 0 3
18648: PUSH
18649: LD_INT 26
18651: EQUAL
18652: IFFALSE 18662
// sEarthquake := true ;
18654: LD_ADDR_EXP 94
18658: PUSH
18659: LD_INT 1
18661: ST_TO_ADDR
// if p3 = 27 then
18662: LD_VAR 0 3
18666: PUSH
18667: LD_INT 27
18669: EQUAL
18670: IFFALSE 18680
// sAI := true ;
18672: LD_ADDR_EXP 95
18676: PUSH
18677: LD_INT 1
18679: ST_TO_ADDR
// if p3 = 28 then
18680: LD_VAR 0 3
18684: PUSH
18685: LD_INT 28
18687: EQUAL
18688: IFFALSE 18698
// sCargo := true ;
18690: LD_ADDR_EXP 98
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
// if p3 = 29 then
18698: LD_VAR 0 3
18702: PUSH
18703: LD_INT 29
18705: EQUAL
18706: IFFALSE 18716
// sDLaser := true ;
18708: LD_ADDR_EXP 99
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// if p3 = 30 then
18716: LD_VAR 0 3
18720: PUSH
18721: LD_INT 30
18723: EQUAL
18724: IFFALSE 18734
// sExchange := true ;
18726: LD_ADDR_EXP 100
18730: PUSH
18731: LD_INT 1
18733: ST_TO_ADDR
// if p3 = 31 then
18734: LD_VAR 0 3
18738: PUSH
18739: LD_INT 31
18741: EQUAL
18742: IFFALSE 18752
// sFac := true ;
18744: LD_ADDR_EXP 101
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
// if p3 = 32 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 32
18759: EQUAL
18760: IFFALSE 18770
// sPower := true ;
18762: LD_ADDR_EXP 102
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// if p3 = 33 then
18770: LD_VAR 0 3
18774: PUSH
18775: LD_INT 33
18777: EQUAL
18778: IFFALSE 18788
// sRandom := true ;
18780: LD_ADDR_EXP 103
18784: PUSH
18785: LD_INT 1
18787: ST_TO_ADDR
// if p3 = 34 then
18788: LD_VAR 0 3
18792: PUSH
18793: LD_INT 34
18795: EQUAL
18796: IFFALSE 18806
// sShield := true ;
18798: LD_ADDR_EXP 104
18802: PUSH
18803: LD_INT 1
18805: ST_TO_ADDR
// if p3 = 35 then
18806: LD_VAR 0 3
18810: PUSH
18811: LD_INT 35
18813: EQUAL
18814: IFFALSE 18824
// sTime := true ;
18816: LD_ADDR_EXP 105
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// if p3 = 36 then
18824: LD_VAR 0 3
18828: PUSH
18829: LD_INT 36
18831: EQUAL
18832: IFFALSE 18842
// sTools := true ;
18834: LD_ADDR_EXP 106
18838: PUSH
18839: LD_INT 1
18841: ST_TO_ADDR
// if p3 = 101 then
18842: LD_VAR 0 3
18846: PUSH
18847: LD_INT 101
18849: EQUAL
18850: IFFALSE 18860
// sSold := true ;
18852: LD_ADDR_EXP 71
18856: PUSH
18857: LD_INT 1
18859: ST_TO_ADDR
// if p3 = 102 then
18860: LD_VAR 0 3
18864: PUSH
18865: LD_INT 102
18867: EQUAL
18868: IFFALSE 18878
// sDiff := true ;
18870: LD_ADDR_EXP 72
18874: PUSH
18875: LD_INT 1
18877: ST_TO_ADDR
// if p3 = 103 then
18878: LD_VAR 0 3
18882: PUSH
18883: LD_INT 103
18885: EQUAL
18886: IFFALSE 18896
// sFog := true ;
18888: LD_ADDR_EXP 75
18892: PUSH
18893: LD_INT 1
18895: ST_TO_ADDR
// if p3 = 104 then
18896: LD_VAR 0 3
18900: PUSH
18901: LD_INT 104
18903: EQUAL
18904: IFFALSE 18914
// sReset := true ;
18906: LD_ADDR_EXP 76
18910: PUSH
18911: LD_INT 1
18913: ST_TO_ADDR
// if p3 = 105 then
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 105
18921: EQUAL
18922: IFFALSE 18932
// sSun := true ;
18924: LD_ADDR_EXP 77
18928: PUSH
18929: LD_INT 1
18931: ST_TO_ADDR
// if p3 = 106 then
18932: LD_VAR 0 3
18936: PUSH
18937: LD_INT 106
18939: EQUAL
18940: IFFALSE 18950
// sTiger := true ;
18942: LD_ADDR_EXP 73
18946: PUSH
18947: LD_INT 1
18949: ST_TO_ADDR
// if p3 = 107 then
18950: LD_VAR 0 3
18954: PUSH
18955: LD_INT 107
18957: EQUAL
18958: IFFALSE 18968
// sBomb := true ;
18960: LD_ADDR_EXP 74
18964: PUSH
18965: LD_INT 1
18967: ST_TO_ADDR
// if p3 = 108 then
18968: LD_VAR 0 3
18972: PUSH
18973: LD_INT 108
18975: EQUAL
18976: IFFALSE 18986
// sWound := true ;
18978: LD_ADDR_EXP 82
18982: PUSH
18983: LD_INT 1
18985: ST_TO_ADDR
// if p3 = 109 then
18986: LD_VAR 0 3
18990: PUSH
18991: LD_INT 109
18993: EQUAL
18994: IFFALSE 19004
// sBetray := true ;
18996: LD_ADDR_EXP 86
19000: PUSH
19001: LD_INT 1
19003: ST_TO_ADDR
// if p3 = 110 then
19004: LD_VAR 0 3
19008: PUSH
19009: LD_INT 110
19011: EQUAL
19012: IFFALSE 19022
// sContamin := true ;
19014: LD_ADDR_EXP 87
19018: PUSH
19019: LD_INT 1
19021: ST_TO_ADDR
// if p3 = 111 then
19022: LD_VAR 0 3
19026: PUSH
19027: LD_INT 111
19029: EQUAL
19030: IFFALSE 19040
// sOil := true ;
19032: LD_ADDR_EXP 89
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
// if p3 = 112 then
19040: LD_VAR 0 3
19044: PUSH
19045: LD_INT 112
19047: EQUAL
19048: IFFALSE 19058
// sStu := true ;
19050: LD_ADDR_EXP 93
19054: PUSH
19055: LD_INT 1
19057: ST_TO_ADDR
// if p3 = 113 then
19058: LD_VAR 0 3
19062: PUSH
19063: LD_INT 113
19065: EQUAL
19066: IFFALSE 19076
// sBazooka := true ;
19068: LD_ADDR_EXP 96
19072: PUSH
19073: LD_INT 1
19075: ST_TO_ADDR
// if p3 = 114 then
19076: LD_VAR 0 3
19080: PUSH
19081: LD_INT 114
19083: EQUAL
19084: IFFALSE 19094
// sMortar := true ;
19086: LD_ADDR_EXP 97
19090: PUSH
19091: LD_INT 1
19093: ST_TO_ADDR
// if p3 = 115 then
19094: LD_VAR 0 3
19098: PUSH
19099: LD_INT 115
19101: EQUAL
19102: IFFALSE 19112
// sRanger := true ;
19104: LD_ADDR_EXP 107
19108: PUSH
19109: LD_INT 1
19111: ST_TO_ADDR
// if p3 = 116 then
19112: LD_VAR 0 3
19116: PUSH
19117: LD_INT 116
19119: EQUAL
19120: IFFALSE 19130
// sComputer := true ;
19122: LD_ADDR_EXP 108
19126: PUSH
19127: LD_INT 1
19129: ST_TO_ADDR
// if p3 = 117 then
19130: LD_VAR 0 3
19134: PUSH
19135: LD_INT 117
19137: EQUAL
19138: IFFALSE 19148
// s30 := true ;
19140: LD_ADDR_EXP 109
19144: PUSH
19145: LD_INT 1
19147: ST_TO_ADDR
// if p3 = 118 then
19148: LD_VAR 0 3
19152: PUSH
19153: LD_INT 118
19155: EQUAL
19156: IFFALSE 19166
// s60 := true ;
19158: LD_ADDR_EXP 110
19162: PUSH
19163: LD_INT 1
19165: ST_TO_ADDR
// end ; if p2 = hack_mode then
19166: LD_VAR 0 2
19170: PUSH
19171: LD_INT 101
19173: EQUAL
19174: IFFALSE 19302
// begin case p3 of 1 :
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 1
19183: DOUBLE
19184: EQUAL
19185: IFTRUE 19189
19187: GO 19196
19189: POP
// hHackUnlimitedResources ; 2 :
19190: CALL 31565 0 0
19194: GO 19302
19196: LD_INT 2
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19211
19204: POP
// hHackSetLevel10 ; 3 :
19205: CALL 31698 0 0
19209: GO 19302
19211: LD_INT 3
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19226
19219: POP
// hHackSetLevel10YourUnits ; 4 :
19220: CALL 31783 0 0
19224: GO 19302
19226: LD_INT 4
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19241
19234: POP
// hHackInvincible ; 5 :
19235: CALL 32231 0 0
19239: GO 19302
19241: LD_INT 5
19243: DOUBLE
19244: EQUAL
19245: IFTRUE 19249
19247: GO 19256
19249: POP
// hHackInvisible ; 6 :
19250: CALL 32342 0 0
19254: GO 19302
19256: LD_INT 6
19258: DOUBLE
19259: EQUAL
19260: IFTRUE 19264
19262: GO 19271
19264: POP
// hHackChangeYourSide ; 7 :
19265: CALL 32399 0 0
19269: GO 19302
19271: LD_INT 7
19273: DOUBLE
19274: EQUAL
19275: IFTRUE 19279
19277: GO 19286
19279: POP
// hHackChangeUnitSide ; 8 :
19280: CALL 32441 0 0
19284: GO 19302
19286: LD_INT 8
19288: DOUBLE
19289: EQUAL
19290: IFTRUE 19294
19292: GO 19301
19294: POP
// hHackFog ; end ;
19295: CALL 32542 0 0
19299: GO 19302
19301: POP
// end ; if p2 = game_save_mode then
19302: LD_VAR 0 2
19306: PUSH
19307: LD_INT 102
19309: EQUAL
19310: IFFALSE 19367
// begin if p3 = 1 then
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 1
19319: EQUAL
19320: IFFALSE 19332
// globalGameSaveCounter := p4 ;
19322: LD_ADDR_EXP 53
19326: PUSH
19327: LD_VAR 0 4
19331: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19332: LD_VAR 0 3
19336: PUSH
19337: LD_INT 2
19339: EQUAL
19340: IFFALSE 19348
19342: PUSH
19343: LD_EXP 53
19347: AND
19348: IFFALSE 19367
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19350: LD_STRING setGameSaveCounter(
19352: PUSH
19353: LD_EXP 53
19357: STR
19358: PUSH
19359: LD_STRING )
19361: STR
19362: PPUSH
19363: CALL_OW 559
// end ; end ;
19367: LD_VAR 0 7
19371: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19372: LD_INT 0
19374: PPUSH
// streamModeActive := false ;
19375: LD_ADDR_EXP 54
19379: PUSH
19380: LD_INT 0
19382: ST_TO_ADDR
// normalCounter := 36 ;
19383: LD_ADDR_EXP 55
19387: PUSH
19388: LD_INT 36
19390: ST_TO_ADDR
// hardcoreCounter := 18 ;
19391: LD_ADDR_EXP 56
19395: PUSH
19396: LD_INT 18
19398: ST_TO_ADDR
// sRocket := false ;
19399: LD_ADDR_EXP 59
19403: PUSH
19404: LD_INT 0
19406: ST_TO_ADDR
// sSpeed := false ;
19407: LD_ADDR_EXP 58
19411: PUSH
19412: LD_INT 0
19414: ST_TO_ADDR
// sEngine := false ;
19415: LD_ADDR_EXP 60
19419: PUSH
19420: LD_INT 0
19422: ST_TO_ADDR
// sSpec := false ;
19423: LD_ADDR_EXP 57
19427: PUSH
19428: LD_INT 0
19430: ST_TO_ADDR
// sLevel := false ;
19431: LD_ADDR_EXP 61
19435: PUSH
19436: LD_INT 0
19438: ST_TO_ADDR
// sArmoury := false ;
19439: LD_ADDR_EXP 62
19443: PUSH
19444: LD_INT 0
19446: ST_TO_ADDR
// sRadar := false ;
19447: LD_ADDR_EXP 63
19451: PUSH
19452: LD_INT 0
19454: ST_TO_ADDR
// sBunker := false ;
19455: LD_ADDR_EXP 64
19459: PUSH
19460: LD_INT 0
19462: ST_TO_ADDR
// sHack := false ;
19463: LD_ADDR_EXP 65
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// sFire := false ;
19471: LD_ADDR_EXP 66
19475: PUSH
19476: LD_INT 0
19478: ST_TO_ADDR
// sRefresh := false ;
19479: LD_ADDR_EXP 67
19483: PUSH
19484: LD_INT 0
19486: ST_TO_ADDR
// sExp := false ;
19487: LD_ADDR_EXP 68
19491: PUSH
19492: LD_INT 0
19494: ST_TO_ADDR
// sDepot := false ;
19495: LD_ADDR_EXP 69
19499: PUSH
19500: LD_INT 0
19502: ST_TO_ADDR
// sFlag := false ;
19503: LD_ADDR_EXP 70
19507: PUSH
19508: LD_INT 0
19510: ST_TO_ADDR
// sKamikadze := false ;
19511: LD_ADDR_EXP 78
19515: PUSH
19516: LD_INT 0
19518: ST_TO_ADDR
// sTroll := false ;
19519: LD_ADDR_EXP 79
19523: PUSH
19524: LD_INT 0
19526: ST_TO_ADDR
// sSlow := false ;
19527: LD_ADDR_EXP 80
19531: PUSH
19532: LD_INT 0
19534: ST_TO_ADDR
// sLack := false ;
19535: LD_ADDR_EXP 81
19539: PUSH
19540: LD_INT 0
19542: ST_TO_ADDR
// sTank := false ;
19543: LD_ADDR_EXP 83
19547: PUSH
19548: LD_INT 0
19550: ST_TO_ADDR
// sRemote := false ;
19551: LD_ADDR_EXP 84
19555: PUSH
19556: LD_INT 0
19558: ST_TO_ADDR
// sPowell := false ;
19559: LD_ADDR_EXP 85
19563: PUSH
19564: LD_INT 0
19566: ST_TO_ADDR
// sTeleport := false ;
19567: LD_ADDR_EXP 88
19571: PUSH
19572: LD_INT 0
19574: ST_TO_ADDR
// sOilTower := false ;
19575: LD_ADDR_EXP 90
19579: PUSH
19580: LD_INT 0
19582: ST_TO_ADDR
// sShovel := false ;
19583: LD_ADDR_EXP 91
19587: PUSH
19588: LD_INT 0
19590: ST_TO_ADDR
// sSheik := false ;
19591: LD_ADDR_EXP 92
19595: PUSH
19596: LD_INT 0
19598: ST_TO_ADDR
// sEarthquake := false ;
19599: LD_ADDR_EXP 94
19603: PUSH
19604: LD_INT 0
19606: ST_TO_ADDR
// sAI := false ;
19607: LD_ADDR_EXP 95
19611: PUSH
19612: LD_INT 0
19614: ST_TO_ADDR
// sCargo := false ;
19615: LD_ADDR_EXP 98
19619: PUSH
19620: LD_INT 0
19622: ST_TO_ADDR
// sDLaser := false ;
19623: LD_ADDR_EXP 99
19627: PUSH
19628: LD_INT 0
19630: ST_TO_ADDR
// sExchange := false ;
19631: LD_ADDR_EXP 100
19635: PUSH
19636: LD_INT 0
19638: ST_TO_ADDR
// sFac := false ;
19639: LD_ADDR_EXP 101
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// sPower := false ;
19647: LD_ADDR_EXP 102
19651: PUSH
19652: LD_INT 0
19654: ST_TO_ADDR
// sRandom := false ;
19655: LD_ADDR_EXP 103
19659: PUSH
19660: LD_INT 0
19662: ST_TO_ADDR
// sShield := false ;
19663: LD_ADDR_EXP 104
19667: PUSH
19668: LD_INT 0
19670: ST_TO_ADDR
// sTime := false ;
19671: LD_ADDR_EXP 105
19675: PUSH
19676: LD_INT 0
19678: ST_TO_ADDR
// sTools := false ;
19679: LD_ADDR_EXP 106
19683: PUSH
19684: LD_INT 0
19686: ST_TO_ADDR
// sSold := false ;
19687: LD_ADDR_EXP 71
19691: PUSH
19692: LD_INT 0
19694: ST_TO_ADDR
// sDiff := false ;
19695: LD_ADDR_EXP 72
19699: PUSH
19700: LD_INT 0
19702: ST_TO_ADDR
// sFog := false ;
19703: LD_ADDR_EXP 75
19707: PUSH
19708: LD_INT 0
19710: ST_TO_ADDR
// sReset := false ;
19711: LD_ADDR_EXP 76
19715: PUSH
19716: LD_INT 0
19718: ST_TO_ADDR
// sSun := false ;
19719: LD_ADDR_EXP 77
19723: PUSH
19724: LD_INT 0
19726: ST_TO_ADDR
// sTiger := false ;
19727: LD_ADDR_EXP 73
19731: PUSH
19732: LD_INT 0
19734: ST_TO_ADDR
// sBomb := false ;
19735: LD_ADDR_EXP 74
19739: PUSH
19740: LD_INT 0
19742: ST_TO_ADDR
// sWound := false ;
19743: LD_ADDR_EXP 82
19747: PUSH
19748: LD_INT 0
19750: ST_TO_ADDR
// sBetray := false ;
19751: LD_ADDR_EXP 86
19755: PUSH
19756: LD_INT 0
19758: ST_TO_ADDR
// sContamin := false ;
19759: LD_ADDR_EXP 87
19763: PUSH
19764: LD_INT 0
19766: ST_TO_ADDR
// sOil := false ;
19767: LD_ADDR_EXP 89
19771: PUSH
19772: LD_INT 0
19774: ST_TO_ADDR
// sStu := false ;
19775: LD_ADDR_EXP 93
19779: PUSH
19780: LD_INT 0
19782: ST_TO_ADDR
// sBazooka := false ;
19783: LD_ADDR_EXP 96
19787: PUSH
19788: LD_INT 0
19790: ST_TO_ADDR
// sMortar := false ;
19791: LD_ADDR_EXP 97
19795: PUSH
19796: LD_INT 0
19798: ST_TO_ADDR
// sRanger := false ;
19799: LD_ADDR_EXP 107
19803: PUSH
19804: LD_INT 0
19806: ST_TO_ADDR
// sComputer := false ;
19807: LD_ADDR_EXP 108
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// s30 := false ;
19815: LD_ADDR_EXP 109
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// s60 := false ;
19823: LD_ADDR_EXP 110
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// end ;
19831: LD_VAR 0 1
19835: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19836: LD_INT 0
19838: PPUSH
19839: PPUSH
19840: PPUSH
19841: PPUSH
19842: PPUSH
19843: PPUSH
19844: PPUSH
// result := [ ] ;
19845: LD_ADDR_VAR 0 2
19849: PUSH
19850: EMPTY
19851: ST_TO_ADDR
// if campaign_id = 1 then
19852: LD_OWVAR 69
19856: PUSH
19857: LD_INT 1
19859: EQUAL
19860: IFFALSE 23026
// begin case mission_number of 1 :
19862: LD_OWVAR 70
19866: PUSH
19867: LD_INT 1
19869: DOUBLE
19870: EQUAL
19871: IFTRUE 19875
19873: GO 19951
19875: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19876: LD_ADDR_VAR 0 2
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: LD_INT 4
19886: PUSH
19887: LD_INT 11
19889: PUSH
19890: LD_INT 12
19892: PUSH
19893: LD_INT 15
19895: PUSH
19896: LD_INT 16
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_INT 23
19904: PUSH
19905: LD_INT 26
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 101
19921: PUSH
19922: LD_INT 102
19924: PUSH
19925: LD_INT 106
19927: PUSH
19928: LD_INT 116
19930: PUSH
19931: LD_INT 117
19933: PUSH
19934: LD_INT 118
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: ST_TO_ADDR
19949: GO 23024
19951: LD_INT 2
19953: DOUBLE
19954: EQUAL
19955: IFTRUE 19959
19957: GO 20043
19959: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19960: LD_ADDR_VAR 0 2
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: LD_INT 4
19970: PUSH
19971: LD_INT 11
19973: PUSH
19974: LD_INT 12
19976: PUSH
19977: LD_INT 15
19979: PUSH
19980: LD_INT 16
19982: PUSH
19983: LD_INT 22
19985: PUSH
19986: LD_INT 23
19988: PUSH
19989: LD_INT 26
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 101
20005: PUSH
20006: LD_INT 102
20008: PUSH
20009: LD_INT 105
20011: PUSH
20012: LD_INT 106
20014: PUSH
20015: LD_INT 108
20017: PUSH
20018: LD_INT 116
20020: PUSH
20021: LD_INT 117
20023: PUSH
20024: LD_INT 118
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: ST_TO_ADDR
20041: GO 23024
20043: LD_INT 3
20045: DOUBLE
20046: EQUAL
20047: IFTRUE 20051
20049: GO 20139
20051: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20052: LD_ADDR_VAR 0 2
20056: PUSH
20057: LD_INT 2
20059: PUSH
20060: LD_INT 4
20062: PUSH
20063: LD_INT 5
20065: PUSH
20066: LD_INT 11
20068: PUSH
20069: LD_INT 12
20071: PUSH
20072: LD_INT 15
20074: PUSH
20075: LD_INT 16
20077: PUSH
20078: LD_INT 22
20080: PUSH
20081: LD_INT 26
20083: PUSH
20084: LD_INT 36
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 101
20101: PUSH
20102: LD_INT 102
20104: PUSH
20105: LD_INT 105
20107: PUSH
20108: LD_INT 106
20110: PUSH
20111: LD_INT 108
20113: PUSH
20114: LD_INT 116
20116: PUSH
20117: LD_INT 117
20119: PUSH
20120: LD_INT 118
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: ST_TO_ADDR
20137: GO 23024
20139: LD_INT 4
20141: DOUBLE
20142: EQUAL
20143: IFTRUE 20147
20145: GO 20243
20147: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20148: LD_ADDR_VAR 0 2
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 4
20158: PUSH
20159: LD_INT 5
20161: PUSH
20162: LD_INT 8
20164: PUSH
20165: LD_INT 11
20167: PUSH
20168: LD_INT 12
20170: PUSH
20171: LD_INT 15
20173: PUSH
20174: LD_INT 16
20176: PUSH
20177: LD_INT 22
20179: PUSH
20180: LD_INT 23
20182: PUSH
20183: LD_INT 26
20185: PUSH
20186: LD_INT 36
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 101
20205: PUSH
20206: LD_INT 102
20208: PUSH
20209: LD_INT 105
20211: PUSH
20212: LD_INT 106
20214: PUSH
20215: LD_INT 108
20217: PUSH
20218: LD_INT 116
20220: PUSH
20221: LD_INT 117
20223: PUSH
20224: LD_INT 118
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: ST_TO_ADDR
20241: GO 23024
20243: LD_INT 5
20245: DOUBLE
20246: EQUAL
20247: IFTRUE 20251
20249: GO 20363
20251: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20252: LD_ADDR_VAR 0 2
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: LD_INT 4
20262: PUSH
20263: LD_INT 5
20265: PUSH
20266: LD_INT 6
20268: PUSH
20269: LD_INT 8
20271: PUSH
20272: LD_INT 11
20274: PUSH
20275: LD_INT 12
20277: PUSH
20278: LD_INT 15
20280: PUSH
20281: LD_INT 16
20283: PUSH
20284: LD_INT 22
20286: PUSH
20287: LD_INT 23
20289: PUSH
20290: LD_INT 25
20292: PUSH
20293: LD_INT 26
20295: PUSH
20296: LD_INT 36
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 101
20317: PUSH
20318: LD_INT 102
20320: PUSH
20321: LD_INT 105
20323: PUSH
20324: LD_INT 106
20326: PUSH
20327: LD_INT 108
20329: PUSH
20330: LD_INT 109
20332: PUSH
20333: LD_INT 112
20335: PUSH
20336: LD_INT 116
20338: PUSH
20339: LD_INT 117
20341: PUSH
20342: LD_INT 118
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: ST_TO_ADDR
20361: GO 23024
20363: LD_INT 6
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20503
20371: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20372: LD_ADDR_VAR 0 2
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: LD_INT 4
20382: PUSH
20383: LD_INT 5
20385: PUSH
20386: LD_INT 6
20388: PUSH
20389: LD_INT 8
20391: PUSH
20392: LD_INT 11
20394: PUSH
20395: LD_INT 12
20397: PUSH
20398: LD_INT 15
20400: PUSH
20401: LD_INT 16
20403: PUSH
20404: LD_INT 20
20406: PUSH
20407: LD_INT 21
20409: PUSH
20410: LD_INT 22
20412: PUSH
20413: LD_INT 23
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 26
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 31
20427: PUSH
20428: LD_INT 32
20430: PUSH
20431: LD_INT 36
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 101
20457: PUSH
20458: LD_INT 102
20460: PUSH
20461: LD_INT 105
20463: PUSH
20464: LD_INT 106
20466: PUSH
20467: LD_INT 108
20469: PUSH
20470: LD_INT 109
20472: PUSH
20473: LD_INT 112
20475: PUSH
20476: LD_INT 116
20478: PUSH
20479: LD_INT 117
20481: PUSH
20482: LD_INT 118
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: ST_TO_ADDR
20501: GO 23024
20503: LD_INT 7
20505: DOUBLE
20506: EQUAL
20507: IFTRUE 20511
20509: GO 20623
20511: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20512: LD_ADDR_VAR 0 2
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 4
20522: PUSH
20523: LD_INT 5
20525: PUSH
20526: LD_INT 7
20528: PUSH
20529: LD_INT 11
20531: PUSH
20532: LD_INT 12
20534: PUSH
20535: LD_INT 15
20537: PUSH
20538: LD_INT 16
20540: PUSH
20541: LD_INT 20
20543: PUSH
20544: LD_INT 21
20546: PUSH
20547: LD_INT 22
20549: PUSH
20550: LD_INT 23
20552: PUSH
20553: LD_INT 25
20555: PUSH
20556: LD_INT 26
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 101
20577: PUSH
20578: LD_INT 102
20580: PUSH
20581: LD_INT 103
20583: PUSH
20584: LD_INT 105
20586: PUSH
20587: LD_INT 106
20589: PUSH
20590: LD_INT 108
20592: PUSH
20593: LD_INT 112
20595: PUSH
20596: LD_INT 116
20598: PUSH
20599: LD_INT 117
20601: PUSH
20602: LD_INT 118
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 23024
20623: LD_INT 8
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20771
20631: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20632: LD_ADDR_VAR 0 2
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 4
20642: PUSH
20643: LD_INT 5
20645: PUSH
20646: LD_INT 6
20648: PUSH
20649: LD_INT 7
20651: PUSH
20652: LD_INT 8
20654: PUSH
20655: LD_INT 11
20657: PUSH
20658: LD_INT 12
20660: PUSH
20661: LD_INT 15
20663: PUSH
20664: LD_INT 16
20666: PUSH
20667: LD_INT 20
20669: PUSH
20670: LD_INT 21
20672: PUSH
20673: LD_INT 22
20675: PUSH
20676: LD_INT 23
20678: PUSH
20679: LD_INT 25
20681: PUSH
20682: LD_INT 26
20684: PUSH
20685: LD_INT 30
20687: PUSH
20688: LD_INT 31
20690: PUSH
20691: LD_INT 32
20693: PUSH
20694: LD_INT 36
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 101
20721: PUSH
20722: LD_INT 102
20724: PUSH
20725: LD_INT 103
20727: PUSH
20728: LD_INT 105
20730: PUSH
20731: LD_INT 106
20733: PUSH
20734: LD_INT 108
20736: PUSH
20737: LD_INT 109
20739: PUSH
20740: LD_INT 112
20742: PUSH
20743: LD_INT 116
20745: PUSH
20746: LD_INT 117
20748: PUSH
20749: LD_INT 118
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: ST_TO_ADDR
20769: GO 23024
20771: LD_INT 9
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20927
20779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20780: LD_ADDR_VAR 0 2
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 4
20790: PUSH
20791: LD_INT 5
20793: PUSH
20794: LD_INT 6
20796: PUSH
20797: LD_INT 7
20799: PUSH
20800: LD_INT 8
20802: PUSH
20803: LD_INT 11
20805: PUSH
20806: LD_INT 12
20808: PUSH
20809: LD_INT 15
20811: PUSH
20812: LD_INT 16
20814: PUSH
20815: LD_INT 20
20817: PUSH
20818: LD_INT 21
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_INT 23
20826: PUSH
20827: LD_INT 25
20829: PUSH
20830: LD_INT 26
20832: PUSH
20833: LD_INT 28
20835: PUSH
20836: LD_INT 30
20838: PUSH
20839: LD_INT 31
20841: PUSH
20842: LD_INT 32
20844: PUSH
20845: LD_INT 36
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 101
20873: PUSH
20874: LD_INT 102
20876: PUSH
20877: LD_INT 103
20879: PUSH
20880: LD_INT 105
20882: PUSH
20883: LD_INT 106
20885: PUSH
20886: LD_INT 108
20888: PUSH
20889: LD_INT 109
20891: PUSH
20892: LD_INT 112
20894: PUSH
20895: LD_INT 114
20897: PUSH
20898: LD_INT 116
20900: PUSH
20901: LD_INT 117
20903: PUSH
20904: LD_INT 118
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: ST_TO_ADDR
20925: GO 23024
20927: LD_INT 10
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 21131
20935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20936: LD_ADDR_VAR 0 2
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 4
20946: PUSH
20947: LD_INT 5
20949: PUSH
20950: LD_INT 6
20952: PUSH
20953: LD_INT 7
20955: PUSH
20956: LD_INT 8
20958: PUSH
20959: LD_INT 9
20961: PUSH
20962: LD_INT 10
20964: PUSH
20965: LD_INT 11
20967: PUSH
20968: LD_INT 12
20970: PUSH
20971: LD_INT 13
20973: PUSH
20974: LD_INT 14
20976: PUSH
20977: LD_INT 15
20979: PUSH
20980: LD_INT 16
20982: PUSH
20983: LD_INT 17
20985: PUSH
20986: LD_INT 18
20988: PUSH
20989: LD_INT 19
20991: PUSH
20992: LD_INT 20
20994: PUSH
20995: LD_INT 21
20997: PUSH
20998: LD_INT 22
21000: PUSH
21001: LD_INT 23
21003: PUSH
21004: LD_INT 24
21006: PUSH
21007: LD_INT 25
21009: PUSH
21010: LD_INT 26
21012: PUSH
21013: LD_INT 28
21015: PUSH
21016: LD_INT 30
21018: PUSH
21019: LD_INT 31
21021: PUSH
21022: LD_INT 32
21024: PUSH
21025: LD_INT 36
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 101
21061: PUSH
21062: LD_INT 102
21064: PUSH
21065: LD_INT 103
21067: PUSH
21068: LD_INT 104
21070: PUSH
21071: LD_INT 105
21073: PUSH
21074: LD_INT 106
21076: PUSH
21077: LD_INT 107
21079: PUSH
21080: LD_INT 108
21082: PUSH
21083: LD_INT 109
21085: PUSH
21086: LD_INT 110
21088: PUSH
21089: LD_INT 111
21091: PUSH
21092: LD_INT 112
21094: PUSH
21095: LD_INT 114
21097: PUSH
21098: LD_INT 116
21100: PUSH
21101: LD_INT 117
21103: PUSH
21104: LD_INT 118
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: ST_TO_ADDR
21129: GO 23024
21131: LD_INT 11
21133: DOUBLE
21134: EQUAL
21135: IFTRUE 21139
21137: GO 21343
21139: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21140: LD_ADDR_VAR 0 2
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: LD_INT 4
21153: PUSH
21154: LD_INT 5
21156: PUSH
21157: LD_INT 6
21159: PUSH
21160: LD_INT 7
21162: PUSH
21163: LD_INT 8
21165: PUSH
21166: LD_INT 9
21168: PUSH
21169: LD_INT 10
21171: PUSH
21172: LD_INT 11
21174: PUSH
21175: LD_INT 12
21177: PUSH
21178: LD_INT 13
21180: PUSH
21181: LD_INT 14
21183: PUSH
21184: LD_INT 15
21186: PUSH
21187: LD_INT 16
21189: PUSH
21190: LD_INT 17
21192: PUSH
21193: LD_INT 18
21195: PUSH
21196: LD_INT 19
21198: PUSH
21199: LD_INT 20
21201: PUSH
21202: LD_INT 21
21204: PUSH
21205: LD_INT 22
21207: PUSH
21208: LD_INT 23
21210: PUSH
21211: LD_INT 24
21213: PUSH
21214: LD_INT 25
21216: PUSH
21217: LD_INT 26
21219: PUSH
21220: LD_INT 28
21222: PUSH
21223: LD_INT 30
21225: PUSH
21226: LD_INT 31
21228: PUSH
21229: LD_INT 32
21231: PUSH
21232: LD_INT 34
21234: PUSH
21235: LD_INT 36
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 101
21273: PUSH
21274: LD_INT 102
21276: PUSH
21277: LD_INT 103
21279: PUSH
21280: LD_INT 104
21282: PUSH
21283: LD_INT 105
21285: PUSH
21286: LD_INT 106
21288: PUSH
21289: LD_INT 107
21291: PUSH
21292: LD_INT 108
21294: PUSH
21295: LD_INT 109
21297: PUSH
21298: LD_INT 110
21300: PUSH
21301: LD_INT 111
21303: PUSH
21304: LD_INT 112
21306: PUSH
21307: LD_INT 114
21309: PUSH
21310: LD_INT 116
21312: PUSH
21313: LD_INT 117
21315: PUSH
21316: LD_INT 118
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: ST_TO_ADDR
21341: GO 23024
21343: LD_INT 12
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21571
21351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: LD_INT 3
21365: PUSH
21366: LD_INT 4
21368: PUSH
21369: LD_INT 5
21371: PUSH
21372: LD_INT 6
21374: PUSH
21375: LD_INT 7
21377: PUSH
21378: LD_INT 8
21380: PUSH
21381: LD_INT 9
21383: PUSH
21384: LD_INT 10
21386: PUSH
21387: LD_INT 11
21389: PUSH
21390: LD_INT 12
21392: PUSH
21393: LD_INT 13
21395: PUSH
21396: LD_INT 14
21398: PUSH
21399: LD_INT 15
21401: PUSH
21402: LD_INT 16
21404: PUSH
21405: LD_INT 17
21407: PUSH
21408: LD_INT 18
21410: PUSH
21411: LD_INT 19
21413: PUSH
21414: LD_INT 20
21416: PUSH
21417: LD_INT 21
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_INT 23
21425: PUSH
21426: LD_INT 24
21428: PUSH
21429: LD_INT 25
21431: PUSH
21432: LD_INT 26
21434: PUSH
21435: LD_INT 27
21437: PUSH
21438: LD_INT 28
21440: PUSH
21441: LD_INT 30
21443: PUSH
21444: LD_INT 31
21446: PUSH
21447: LD_INT 32
21449: PUSH
21450: LD_INT 33
21452: PUSH
21453: LD_INT 34
21455: PUSH
21456: LD_INT 36
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 101
21497: PUSH
21498: LD_INT 102
21500: PUSH
21501: LD_INT 103
21503: PUSH
21504: LD_INT 104
21506: PUSH
21507: LD_INT 105
21509: PUSH
21510: LD_INT 106
21512: PUSH
21513: LD_INT 107
21515: PUSH
21516: LD_INT 108
21518: PUSH
21519: LD_INT 109
21521: PUSH
21522: LD_INT 110
21524: PUSH
21525: LD_INT 111
21527: PUSH
21528: LD_INT 112
21530: PUSH
21531: LD_INT 113
21533: PUSH
21534: LD_INT 114
21536: PUSH
21537: LD_INT 116
21539: PUSH
21540: LD_INT 117
21542: PUSH
21543: LD_INT 118
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: ST_TO_ADDR
21569: GO 23024
21571: LD_INT 13
21573: DOUBLE
21574: EQUAL
21575: IFTRUE 21579
21577: GO 21787
21579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21580: LD_ADDR_VAR 0 2
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: LD_INT 3
21593: PUSH
21594: LD_INT 4
21596: PUSH
21597: LD_INT 5
21599: PUSH
21600: LD_INT 8
21602: PUSH
21603: LD_INT 9
21605: PUSH
21606: LD_INT 10
21608: PUSH
21609: LD_INT 11
21611: PUSH
21612: LD_INT 12
21614: PUSH
21615: LD_INT 14
21617: PUSH
21618: LD_INT 15
21620: PUSH
21621: LD_INT 16
21623: PUSH
21624: LD_INT 17
21626: PUSH
21627: LD_INT 18
21629: PUSH
21630: LD_INT 19
21632: PUSH
21633: LD_INT 20
21635: PUSH
21636: LD_INT 21
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_INT 23
21644: PUSH
21645: LD_INT 24
21647: PUSH
21648: LD_INT 25
21650: PUSH
21651: LD_INT 26
21653: PUSH
21654: LD_INT 27
21656: PUSH
21657: LD_INT 28
21659: PUSH
21660: LD_INT 30
21662: PUSH
21663: LD_INT 31
21665: PUSH
21666: LD_INT 32
21668: PUSH
21669: LD_INT 33
21671: PUSH
21672: LD_INT 34
21674: PUSH
21675: LD_INT 36
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 101
21713: PUSH
21714: LD_INT 102
21716: PUSH
21717: LD_INT 103
21719: PUSH
21720: LD_INT 104
21722: PUSH
21723: LD_INT 105
21725: PUSH
21726: LD_INT 106
21728: PUSH
21729: LD_INT 107
21731: PUSH
21732: LD_INT 108
21734: PUSH
21735: LD_INT 109
21737: PUSH
21738: LD_INT 110
21740: PUSH
21741: LD_INT 111
21743: PUSH
21744: LD_INT 112
21746: PUSH
21747: LD_INT 113
21749: PUSH
21750: LD_INT 114
21752: PUSH
21753: LD_INT 116
21755: PUSH
21756: LD_INT 117
21758: PUSH
21759: LD_INT 118
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: ST_TO_ADDR
21785: GO 23024
21787: LD_INT 14
21789: DOUBLE
21790: EQUAL
21791: IFTRUE 21795
21793: GO 22019
21795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 3
21809: PUSH
21810: LD_INT 4
21812: PUSH
21813: LD_INT 5
21815: PUSH
21816: LD_INT 6
21818: PUSH
21819: LD_INT 7
21821: PUSH
21822: LD_INT 8
21824: PUSH
21825: LD_INT 9
21827: PUSH
21828: LD_INT 10
21830: PUSH
21831: LD_INT 11
21833: PUSH
21834: LD_INT 12
21836: PUSH
21837: LD_INT 13
21839: PUSH
21840: LD_INT 14
21842: PUSH
21843: LD_INT 15
21845: PUSH
21846: LD_INT 16
21848: PUSH
21849: LD_INT 17
21851: PUSH
21852: LD_INT 18
21854: PUSH
21855: LD_INT 19
21857: PUSH
21858: LD_INT 20
21860: PUSH
21861: LD_INT 21
21863: PUSH
21864: LD_INT 22
21866: PUSH
21867: LD_INT 23
21869: PUSH
21870: LD_INT 24
21872: PUSH
21873: LD_INT 25
21875: PUSH
21876: LD_INT 26
21878: PUSH
21879: LD_INT 27
21881: PUSH
21882: LD_INT 28
21884: PUSH
21885: LD_INT 29
21887: PUSH
21888: LD_INT 30
21890: PUSH
21891: LD_INT 31
21893: PUSH
21894: LD_INT 32
21896: PUSH
21897: LD_INT 33
21899: PUSH
21900: LD_INT 34
21902: PUSH
21903: LD_INT 36
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 101
21945: PUSH
21946: LD_INT 102
21948: PUSH
21949: LD_INT 103
21951: PUSH
21952: LD_INT 104
21954: PUSH
21955: LD_INT 105
21957: PUSH
21958: LD_INT 106
21960: PUSH
21961: LD_INT 107
21963: PUSH
21964: LD_INT 108
21966: PUSH
21967: LD_INT 109
21969: PUSH
21970: LD_INT 110
21972: PUSH
21973: LD_INT 111
21975: PUSH
21976: LD_INT 112
21978: PUSH
21979: LD_INT 113
21981: PUSH
21982: LD_INT 114
21984: PUSH
21985: LD_INT 116
21987: PUSH
21988: LD_INT 117
21990: PUSH
21991: LD_INT 118
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: ST_TO_ADDR
22017: GO 23024
22019: LD_INT 15
22021: DOUBLE
22022: EQUAL
22023: IFTRUE 22027
22025: GO 22251
22027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22028: LD_ADDR_VAR 0 2
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 3
22041: PUSH
22042: LD_INT 4
22044: PUSH
22045: LD_INT 5
22047: PUSH
22048: LD_INT 6
22050: PUSH
22051: LD_INT 7
22053: PUSH
22054: LD_INT 8
22056: PUSH
22057: LD_INT 9
22059: PUSH
22060: LD_INT 10
22062: PUSH
22063: LD_INT 11
22065: PUSH
22066: LD_INT 12
22068: PUSH
22069: LD_INT 13
22071: PUSH
22072: LD_INT 14
22074: PUSH
22075: LD_INT 15
22077: PUSH
22078: LD_INT 16
22080: PUSH
22081: LD_INT 17
22083: PUSH
22084: LD_INT 18
22086: PUSH
22087: LD_INT 19
22089: PUSH
22090: LD_INT 20
22092: PUSH
22093: LD_INT 21
22095: PUSH
22096: LD_INT 22
22098: PUSH
22099: LD_INT 23
22101: PUSH
22102: LD_INT 24
22104: PUSH
22105: LD_INT 25
22107: PUSH
22108: LD_INT 26
22110: PUSH
22111: LD_INT 27
22113: PUSH
22114: LD_INT 28
22116: PUSH
22117: LD_INT 29
22119: PUSH
22120: LD_INT 30
22122: PUSH
22123: LD_INT 31
22125: PUSH
22126: LD_INT 32
22128: PUSH
22129: LD_INT 33
22131: PUSH
22132: LD_INT 34
22134: PUSH
22135: LD_INT 36
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 101
22177: PUSH
22178: LD_INT 102
22180: PUSH
22181: LD_INT 103
22183: PUSH
22184: LD_INT 104
22186: PUSH
22187: LD_INT 105
22189: PUSH
22190: LD_INT 106
22192: PUSH
22193: LD_INT 107
22195: PUSH
22196: LD_INT 108
22198: PUSH
22199: LD_INT 109
22201: PUSH
22202: LD_INT 110
22204: PUSH
22205: LD_INT 111
22207: PUSH
22208: LD_INT 112
22210: PUSH
22211: LD_INT 113
22213: PUSH
22214: LD_INT 114
22216: PUSH
22217: LD_INT 116
22219: PUSH
22220: LD_INT 117
22222: PUSH
22223: LD_INT 118
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: ST_TO_ADDR
22249: GO 23024
22251: LD_INT 16
22253: DOUBLE
22254: EQUAL
22255: IFTRUE 22259
22257: GO 22395
22259: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22260: LD_ADDR_VAR 0 2
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 4
22270: PUSH
22271: LD_INT 5
22273: PUSH
22274: LD_INT 7
22276: PUSH
22277: LD_INT 11
22279: PUSH
22280: LD_INT 12
22282: PUSH
22283: LD_INT 15
22285: PUSH
22286: LD_INT 16
22288: PUSH
22289: LD_INT 20
22291: PUSH
22292: LD_INT 21
22294: PUSH
22295: LD_INT 22
22297: PUSH
22298: LD_INT 23
22300: PUSH
22301: LD_INT 25
22303: PUSH
22304: LD_INT 26
22306: PUSH
22307: LD_INT 30
22309: PUSH
22310: LD_INT 31
22312: PUSH
22313: LD_INT 32
22315: PUSH
22316: LD_INT 33
22318: PUSH
22319: LD_INT 34
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 101
22345: PUSH
22346: LD_INT 102
22348: PUSH
22349: LD_INT 103
22351: PUSH
22352: LD_INT 106
22354: PUSH
22355: LD_INT 108
22357: PUSH
22358: LD_INT 112
22360: PUSH
22361: LD_INT 113
22363: PUSH
22364: LD_INT 114
22366: PUSH
22367: LD_INT 116
22369: PUSH
22370: LD_INT 117
22372: PUSH
22373: LD_INT 118
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: ST_TO_ADDR
22393: GO 23024
22395: LD_INT 17
22397: DOUBLE
22398: EQUAL
22399: IFTRUE 22403
22401: GO 22627
22403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 4
22420: PUSH
22421: LD_INT 5
22423: PUSH
22424: LD_INT 6
22426: PUSH
22427: LD_INT 7
22429: PUSH
22430: LD_INT 8
22432: PUSH
22433: LD_INT 9
22435: PUSH
22436: LD_INT 10
22438: PUSH
22439: LD_INT 11
22441: PUSH
22442: LD_INT 12
22444: PUSH
22445: LD_INT 13
22447: PUSH
22448: LD_INT 14
22450: PUSH
22451: LD_INT 15
22453: PUSH
22454: LD_INT 16
22456: PUSH
22457: LD_INT 17
22459: PUSH
22460: LD_INT 18
22462: PUSH
22463: LD_INT 19
22465: PUSH
22466: LD_INT 20
22468: PUSH
22469: LD_INT 21
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 24
22480: PUSH
22481: LD_INT 25
22483: PUSH
22484: LD_INT 26
22486: PUSH
22487: LD_INT 27
22489: PUSH
22490: LD_INT 28
22492: PUSH
22493: LD_INT 29
22495: PUSH
22496: LD_INT 30
22498: PUSH
22499: LD_INT 31
22501: PUSH
22502: LD_INT 32
22504: PUSH
22505: LD_INT 33
22507: PUSH
22508: LD_INT 34
22510: PUSH
22511: LD_INT 36
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 101
22553: PUSH
22554: LD_INT 102
22556: PUSH
22557: LD_INT 103
22559: PUSH
22560: LD_INT 104
22562: PUSH
22563: LD_INT 105
22565: PUSH
22566: LD_INT 106
22568: PUSH
22569: LD_INT 107
22571: PUSH
22572: LD_INT 108
22574: PUSH
22575: LD_INT 109
22577: PUSH
22578: LD_INT 110
22580: PUSH
22581: LD_INT 111
22583: PUSH
22584: LD_INT 112
22586: PUSH
22587: LD_INT 113
22589: PUSH
22590: LD_INT 114
22592: PUSH
22593: LD_INT 116
22595: PUSH
22596: LD_INT 117
22598: PUSH
22599: LD_INT 118
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: ST_TO_ADDR
22625: GO 23024
22627: LD_INT 18
22629: DOUBLE
22630: EQUAL
22631: IFTRUE 22635
22633: GO 22783
22635: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22636: LD_ADDR_VAR 0 2
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 4
22646: PUSH
22647: LD_INT 5
22649: PUSH
22650: LD_INT 7
22652: PUSH
22653: LD_INT 11
22655: PUSH
22656: LD_INT 12
22658: PUSH
22659: LD_INT 15
22661: PUSH
22662: LD_INT 16
22664: PUSH
22665: LD_INT 20
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 22
22673: PUSH
22674: LD_INT 23
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 26
22682: PUSH
22683: LD_INT 30
22685: PUSH
22686: LD_INT 31
22688: PUSH
22689: LD_INT 32
22691: PUSH
22692: LD_INT 33
22694: PUSH
22695: LD_INT 34
22697: PUSH
22698: LD_INT 35
22700: PUSH
22701: LD_INT 36
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 101
22729: PUSH
22730: LD_INT 102
22732: PUSH
22733: LD_INT 103
22735: PUSH
22736: LD_INT 106
22738: PUSH
22739: LD_INT 108
22741: PUSH
22742: LD_INT 112
22744: PUSH
22745: LD_INT 113
22747: PUSH
22748: LD_INT 114
22750: PUSH
22751: LD_INT 115
22753: PUSH
22754: LD_INT 116
22756: PUSH
22757: LD_INT 117
22759: PUSH
22760: LD_INT 118
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: ST_TO_ADDR
22781: GO 23024
22783: LD_INT 19
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 23023
22791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22792: LD_ADDR_VAR 0 2
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 2
22802: PUSH
22803: LD_INT 3
22805: PUSH
22806: LD_INT 4
22808: PUSH
22809: LD_INT 5
22811: PUSH
22812: LD_INT 6
22814: PUSH
22815: LD_INT 7
22817: PUSH
22818: LD_INT 8
22820: PUSH
22821: LD_INT 9
22823: PUSH
22824: LD_INT 10
22826: PUSH
22827: LD_INT 11
22829: PUSH
22830: LD_INT 12
22832: PUSH
22833: LD_INT 13
22835: PUSH
22836: LD_INT 14
22838: PUSH
22839: LD_INT 15
22841: PUSH
22842: LD_INT 16
22844: PUSH
22845: LD_INT 17
22847: PUSH
22848: LD_INT 18
22850: PUSH
22851: LD_INT 19
22853: PUSH
22854: LD_INT 20
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 22
22862: PUSH
22863: LD_INT 23
22865: PUSH
22866: LD_INT 24
22868: PUSH
22869: LD_INT 25
22871: PUSH
22872: LD_INT 26
22874: PUSH
22875: LD_INT 27
22877: PUSH
22878: LD_INT 28
22880: PUSH
22881: LD_INT 29
22883: PUSH
22884: LD_INT 30
22886: PUSH
22887: LD_INT 31
22889: PUSH
22890: LD_INT 32
22892: PUSH
22893: LD_INT 33
22895: PUSH
22896: LD_INT 34
22898: PUSH
22899: LD_INT 35
22901: PUSH
22902: LD_INT 36
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 101
22945: PUSH
22946: LD_INT 102
22948: PUSH
22949: LD_INT 103
22951: PUSH
22952: LD_INT 104
22954: PUSH
22955: LD_INT 105
22957: PUSH
22958: LD_INT 106
22960: PUSH
22961: LD_INT 107
22963: PUSH
22964: LD_INT 108
22966: PUSH
22967: LD_INT 109
22969: PUSH
22970: LD_INT 110
22972: PUSH
22973: LD_INT 111
22975: PUSH
22976: LD_INT 112
22978: PUSH
22979: LD_INT 113
22981: PUSH
22982: LD_INT 114
22984: PUSH
22985: LD_INT 115
22987: PUSH
22988: LD_INT 116
22990: PUSH
22991: LD_INT 117
22993: PUSH
22994: LD_INT 118
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: ST_TO_ADDR
23021: GO 23024
23023: POP
// end else
23024: GO 23255
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23026: LD_ADDR_VAR 0 2
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 3
23039: PUSH
23040: LD_INT 4
23042: PUSH
23043: LD_INT 5
23045: PUSH
23046: LD_INT 6
23048: PUSH
23049: LD_INT 7
23051: PUSH
23052: LD_INT 8
23054: PUSH
23055: LD_INT 9
23057: PUSH
23058: LD_INT 10
23060: PUSH
23061: LD_INT 11
23063: PUSH
23064: LD_INT 12
23066: PUSH
23067: LD_INT 13
23069: PUSH
23070: LD_INT 14
23072: PUSH
23073: LD_INT 15
23075: PUSH
23076: LD_INT 16
23078: PUSH
23079: LD_INT 17
23081: PUSH
23082: LD_INT 18
23084: PUSH
23085: LD_INT 19
23087: PUSH
23088: LD_INT 20
23090: PUSH
23091: LD_INT 21
23093: PUSH
23094: LD_INT 22
23096: PUSH
23097: LD_INT 23
23099: PUSH
23100: LD_INT 24
23102: PUSH
23103: LD_INT 25
23105: PUSH
23106: LD_INT 26
23108: PUSH
23109: LD_INT 27
23111: PUSH
23112: LD_INT 28
23114: PUSH
23115: LD_INT 29
23117: PUSH
23118: LD_INT 30
23120: PUSH
23121: LD_INT 31
23123: PUSH
23124: LD_INT 32
23126: PUSH
23127: LD_INT 33
23129: PUSH
23130: LD_INT 34
23132: PUSH
23133: LD_INT 35
23135: PUSH
23136: LD_INT 36
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 101
23179: PUSH
23180: LD_INT 102
23182: PUSH
23183: LD_INT 103
23185: PUSH
23186: LD_INT 104
23188: PUSH
23189: LD_INT 105
23191: PUSH
23192: LD_INT 106
23194: PUSH
23195: LD_INT 107
23197: PUSH
23198: LD_INT 108
23200: PUSH
23201: LD_INT 109
23203: PUSH
23204: LD_INT 110
23206: PUSH
23207: LD_INT 111
23209: PUSH
23210: LD_INT 112
23212: PUSH
23213: LD_INT 113
23215: PUSH
23216: LD_INT 114
23218: PUSH
23219: LD_INT 115
23221: PUSH
23222: LD_INT 116
23224: PUSH
23225: LD_INT 117
23227: PUSH
23228: LD_INT 118
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: ST_TO_ADDR
// if result then
23255: LD_VAR 0 2
23259: IFFALSE 24045
// begin normal :=  ;
23261: LD_ADDR_VAR 0 5
23265: PUSH
23266: LD_STRING 
23268: ST_TO_ADDR
// hardcore :=  ;
23269: LD_ADDR_VAR 0 6
23273: PUSH
23274: LD_STRING 
23276: ST_TO_ADDR
// active :=  ;
23277: LD_ADDR_VAR 0 7
23281: PUSH
23282: LD_STRING 
23284: ST_TO_ADDR
// for i = 1 to normalCounter do
23285: LD_ADDR_VAR 0 8
23289: PUSH
23290: DOUBLE
23291: LD_INT 1
23293: DEC
23294: ST_TO_ADDR
23295: LD_EXP 55
23299: PUSH
23300: FOR_TO
23301: IFFALSE 23402
// begin tmp := 0 ;
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_STRING 0
23310: ST_TO_ADDR
// if result [ 1 ] then
23311: LD_VAR 0 2
23315: PUSH
23316: LD_INT 1
23318: ARRAY
23319: IFFALSE 23384
// if result [ 1 ] [ 1 ] = i then
23321: LD_VAR 0 2
23325: PUSH
23326: LD_INT 1
23328: ARRAY
23329: PUSH
23330: LD_INT 1
23332: ARRAY
23333: PUSH
23334: LD_VAR 0 8
23338: EQUAL
23339: IFFALSE 23384
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23341: LD_ADDR_VAR 0 2
23345: PUSH
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_INT 1
23353: PPUSH
23354: LD_VAR 0 2
23358: PUSH
23359: LD_INT 1
23361: ARRAY
23362: PPUSH
23363: LD_INT 1
23365: PPUSH
23366: CALL_OW 3
23370: PPUSH
23371: CALL_OW 1
23375: ST_TO_ADDR
// tmp := 1 ;
23376: LD_ADDR_VAR 0 3
23380: PUSH
23381: LD_STRING 1
23383: ST_TO_ADDR
// end ; normal := normal & tmp ;
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: LD_VAR 0 5
23393: PUSH
23394: LD_VAR 0 3
23398: STR
23399: ST_TO_ADDR
// end ;
23400: GO 23300
23402: POP
23403: POP
// for i = 1 to hardcoreCounter do
23404: LD_ADDR_VAR 0 8
23408: PUSH
23409: DOUBLE
23410: LD_INT 1
23412: DEC
23413: ST_TO_ADDR
23414: LD_EXP 56
23418: PUSH
23419: FOR_TO
23420: IFFALSE 23525
// begin tmp := 0 ;
23422: LD_ADDR_VAR 0 3
23426: PUSH
23427: LD_STRING 0
23429: ST_TO_ADDR
// if result [ 2 ] then
23430: LD_VAR 0 2
23434: PUSH
23435: LD_INT 2
23437: ARRAY
23438: IFFALSE 23507
// if result [ 2 ] [ 1 ] = 100 + i then
23440: LD_VAR 0 2
23444: PUSH
23445: LD_INT 2
23447: ARRAY
23448: PUSH
23449: LD_INT 1
23451: ARRAY
23452: PUSH
23453: LD_INT 100
23455: PUSH
23456: LD_VAR 0 8
23460: PLUS
23461: EQUAL
23462: IFFALSE 23507
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23464: LD_ADDR_VAR 0 2
23468: PUSH
23469: LD_VAR 0 2
23473: PPUSH
23474: LD_INT 2
23476: PPUSH
23477: LD_VAR 0 2
23481: PUSH
23482: LD_INT 2
23484: ARRAY
23485: PPUSH
23486: LD_INT 1
23488: PPUSH
23489: CALL_OW 3
23493: PPUSH
23494: CALL_OW 1
23498: ST_TO_ADDR
// tmp := 1 ;
23499: LD_ADDR_VAR 0 3
23503: PUSH
23504: LD_STRING 1
23506: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23507: LD_ADDR_VAR 0 6
23511: PUSH
23512: LD_VAR 0 6
23516: PUSH
23517: LD_VAR 0 3
23521: STR
23522: ST_TO_ADDR
// end ;
23523: GO 23419
23525: POP
23526: POP
// if isGameLoad then
23527: LD_VAR 0 1
23531: IFFALSE 24006
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23533: LD_ADDR_VAR 0 4
23537: PUSH
23538: LD_EXP 59
23542: PUSH
23543: LD_EXP 58
23547: PUSH
23548: LD_EXP 60
23552: PUSH
23553: LD_EXP 57
23557: PUSH
23558: LD_EXP 61
23562: PUSH
23563: LD_EXP 62
23567: PUSH
23568: LD_EXP 63
23572: PUSH
23573: LD_EXP 64
23577: PUSH
23578: LD_EXP 65
23582: PUSH
23583: LD_EXP 66
23587: PUSH
23588: LD_EXP 67
23592: PUSH
23593: LD_EXP 68
23597: PUSH
23598: LD_EXP 69
23602: PUSH
23603: LD_EXP 70
23607: PUSH
23608: LD_EXP 78
23612: PUSH
23613: LD_EXP 79
23617: PUSH
23618: LD_EXP 80
23622: PUSH
23623: LD_EXP 81
23627: PUSH
23628: LD_EXP 83
23632: PUSH
23633: LD_EXP 84
23637: PUSH
23638: LD_EXP 85
23642: PUSH
23643: LD_EXP 88
23647: PUSH
23648: LD_EXP 90
23652: PUSH
23653: LD_EXP 91
23657: PUSH
23658: LD_EXP 92
23662: PUSH
23663: LD_EXP 94
23667: PUSH
23668: LD_EXP 95
23672: PUSH
23673: LD_EXP 98
23677: PUSH
23678: LD_EXP 99
23682: PUSH
23683: LD_EXP 100
23687: PUSH
23688: LD_EXP 101
23692: PUSH
23693: LD_EXP 102
23697: PUSH
23698: LD_EXP 103
23702: PUSH
23703: LD_EXP 104
23707: PUSH
23708: LD_EXP 105
23712: PUSH
23713: LD_EXP 106
23717: PUSH
23718: LD_EXP 71
23722: PUSH
23723: LD_EXP 72
23727: PUSH
23728: LD_EXP 75
23732: PUSH
23733: LD_EXP 76
23737: PUSH
23738: LD_EXP 77
23742: PUSH
23743: LD_EXP 73
23747: PUSH
23748: LD_EXP 74
23752: PUSH
23753: LD_EXP 82
23757: PUSH
23758: LD_EXP 86
23762: PUSH
23763: LD_EXP 87
23767: PUSH
23768: LD_EXP 89
23772: PUSH
23773: LD_EXP 93
23777: PUSH
23778: LD_EXP 96
23782: PUSH
23783: LD_EXP 97
23787: PUSH
23788: LD_EXP 107
23792: PUSH
23793: LD_EXP 108
23797: PUSH
23798: LD_EXP 109
23802: PUSH
23803: LD_EXP 110
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: ST_TO_ADDR
// tmp :=  ;
23864: LD_ADDR_VAR 0 3
23868: PUSH
23869: LD_STRING 
23871: ST_TO_ADDR
// for i = 1 to normalCounter do
23872: LD_ADDR_VAR 0 8
23876: PUSH
23877: DOUBLE
23878: LD_INT 1
23880: DEC
23881: ST_TO_ADDR
23882: LD_EXP 55
23886: PUSH
23887: FOR_TO
23888: IFFALSE 23924
// begin if flags [ i ] then
23890: LD_VAR 0 4
23894: PUSH
23895: LD_VAR 0 8
23899: ARRAY
23900: IFFALSE 23922
// tmp := tmp & i & ; ;
23902: LD_ADDR_VAR 0 3
23906: PUSH
23907: LD_VAR 0 3
23911: PUSH
23912: LD_VAR 0 8
23916: STR
23917: PUSH
23918: LD_STRING ;
23920: STR
23921: ST_TO_ADDR
// end ;
23922: GO 23887
23924: POP
23925: POP
// for i = 1 to hardcoreCounter do
23926: LD_ADDR_VAR 0 8
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_EXP 56
23940: PUSH
23941: FOR_TO
23942: IFFALSE 23988
// begin if flags [ normalCounter + i ] then
23944: LD_VAR 0 4
23948: PUSH
23949: LD_EXP 55
23953: PUSH
23954: LD_VAR 0 8
23958: PLUS
23959: ARRAY
23960: IFFALSE 23986
// tmp := tmp & ( 100 + i ) & ; ;
23962: LD_ADDR_VAR 0 3
23966: PUSH
23967: LD_VAR 0 3
23971: PUSH
23972: LD_INT 100
23974: PUSH
23975: LD_VAR 0 8
23979: PLUS
23980: STR
23981: PUSH
23982: LD_STRING ;
23984: STR
23985: ST_TO_ADDR
// end ;
23986: GO 23941
23988: POP
23989: POP
// if tmp then
23990: LD_VAR 0 3
23994: IFFALSE 24006
// active := tmp ;
23996: LD_ADDR_VAR 0 7
24000: PUSH
24001: LD_VAR 0 3
24005: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24006: LD_STRING getStreamItemsFromMission("
24008: PUSH
24009: LD_VAR 0 5
24013: STR
24014: PUSH
24015: LD_STRING ","
24017: STR
24018: PUSH
24019: LD_VAR 0 6
24023: STR
24024: PUSH
24025: LD_STRING ","
24027: STR
24028: PUSH
24029: LD_VAR 0 7
24033: STR
24034: PUSH
24035: LD_STRING ")
24037: STR
24038: PPUSH
24039: CALL_OW 559
// end else
24043: GO 24052
// ToLua ( getStreamItemsFromMission("","","") ) ;
24045: LD_STRING getStreamItemsFromMission("","","")
24047: PPUSH
24048: CALL_OW 559
// end ;
24052: LD_VAR 0 2
24056: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24057: LD_EXP 54
24061: IFFALSE 24069
24063: PUSH
24064: LD_EXP 59
24068: AND
24069: IFFALSE 24193
24071: GO 24073
24073: DISABLE
24074: LD_INT 0
24076: PPUSH
24077: PPUSH
// begin enable ;
24078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24079: LD_ADDR_VAR 0 2
24083: PUSH
24084: LD_INT 22
24086: PUSH
24087: LD_OWVAR 2
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: LD_INT 34
24101: PUSH
24102: LD_INT 7
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 34
24111: PUSH
24112: LD_INT 45
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 34
24121: PUSH
24122: LD_INT 28
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 34
24131: PUSH
24132: LD_INT 47
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PPUSH
24150: CALL_OW 69
24154: ST_TO_ADDR
// if not tmp then
24155: LD_VAR 0 2
24159: NOT
24160: IFFALSE 24164
// exit ;
24162: GO 24193
// for i in tmp do
24164: LD_ADDR_VAR 0 1
24168: PUSH
24169: LD_VAR 0 2
24173: PUSH
24174: FOR_IN
24175: IFFALSE 24191
// begin SetLives ( i , 0 ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_INT 0
24184: PPUSH
24185: CALL_OW 234
// end ;
24189: GO 24174
24191: POP
24192: POP
// end ;
24193: PPOPN 2
24195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24196: LD_EXP 54
24200: IFFALSE 24208
24202: PUSH
24203: LD_EXP 60
24207: AND
24208: IFFALSE 24292
24210: GO 24212
24212: DISABLE
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
// begin enable ;
24217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24218: LD_ADDR_VAR 0 2
24222: PUSH
24223: LD_INT 22
24225: PUSH
24226: LD_OWVAR 2
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 32
24237: PUSH
24238: LD_INT 3
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PPUSH
24249: CALL_OW 69
24253: ST_TO_ADDR
// if not tmp then
24254: LD_VAR 0 2
24258: NOT
24259: IFFALSE 24263
// exit ;
24261: GO 24292
// for i in tmp do
24263: LD_ADDR_VAR 0 1
24267: PUSH
24268: LD_VAR 0 2
24272: PUSH
24273: FOR_IN
24274: IFFALSE 24290
// begin SetLives ( i , 0 ) ;
24276: LD_VAR 0 1
24280: PPUSH
24281: LD_INT 0
24283: PPUSH
24284: CALL_OW 234
// end ;
24288: GO 24273
24290: POP
24291: POP
// end ;
24292: PPOPN 2
24294: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24295: LD_EXP 54
24299: IFFALSE 24307
24301: PUSH
24302: LD_EXP 57
24306: AND
24307: IFFALSE 24400
24309: GO 24311
24311: DISABLE
24312: LD_INT 0
24314: PPUSH
// begin enable ;
24315: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_OWVAR 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 25
24338: PUSH
24339: LD_INT 5
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 25
24348: PUSH
24349: LD_INT 9
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 25
24358: PUSH
24359: LD_INT 8
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PPUSH
24376: CALL_OW 69
24380: PUSH
24381: FOR_IN
24382: IFFALSE 24398
// begin SetClass ( i , 1 ) ;
24384: LD_VAR 0 1
24388: PPUSH
24389: LD_INT 1
24391: PPUSH
24392: CALL_OW 336
// end ;
24396: GO 24381
24398: POP
24399: POP
// end ;
24400: PPOPN 1
24402: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24403: LD_EXP 54
24407: IFFALSE 24415
24409: PUSH
24410: LD_EXP 58
24414: AND
24415: IFFALSE 24427
24417: PUSH
24418: LD_OWVAR 65
24422: PUSH
24423: LD_INT 7
24425: LESS
24426: AND
24427: IFFALSE 24441
24429: GO 24431
24431: DISABLE
// begin enable ;
24432: ENABLE
// game_speed := 7 ;
24433: LD_ADDR_OWVAR 65
24437: PUSH
24438: LD_INT 7
24440: ST_TO_ADDR
// end ;
24441: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24442: LD_EXP 54
24446: IFFALSE 24454
24448: PUSH
24449: LD_EXP 61
24453: AND
24454: IFFALSE 24656
24456: GO 24458
24458: DISABLE
24459: LD_INT 0
24461: PPUSH
24462: PPUSH
24463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24464: LD_ADDR_VAR 0 3
24468: PUSH
24469: LD_INT 81
24471: PUSH
24472: LD_OWVAR 2
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 21
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: ST_TO_ADDR
// if not tmp then
24500: LD_VAR 0 3
24504: NOT
24505: IFFALSE 24509
// exit ;
24507: GO 24656
// if tmp > 5 then
24509: LD_VAR 0 3
24513: PUSH
24514: LD_INT 5
24516: GREATER
24517: IFFALSE 24529
// k := 5 else
24519: LD_ADDR_VAR 0 2
24523: PUSH
24524: LD_INT 5
24526: ST_TO_ADDR
24527: GO 24539
// k := tmp ;
24529: LD_ADDR_VAR 0 2
24533: PUSH
24534: LD_VAR 0 3
24538: ST_TO_ADDR
// for i := 1 to k do
24539: LD_ADDR_VAR 0 1
24543: PUSH
24544: DOUBLE
24545: LD_INT 1
24547: DEC
24548: ST_TO_ADDR
24549: LD_VAR 0 2
24553: PUSH
24554: FOR_TO
24555: IFFALSE 24654
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24557: LD_VAR 0 3
24561: PUSH
24562: LD_VAR 0 1
24566: ARRAY
24567: PPUSH
24568: LD_VAR 0 1
24572: PUSH
24573: LD_INT 4
24575: MOD
24576: PUSH
24577: LD_INT 1
24579: PLUS
24580: PPUSH
24581: CALL_OW 259
24585: PUSH
24586: LD_INT 10
24588: LESS
24589: IFFALSE 24652
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24591: LD_VAR 0 3
24595: PUSH
24596: LD_VAR 0 1
24600: ARRAY
24601: PPUSH
24602: LD_VAR 0 1
24606: PUSH
24607: LD_INT 4
24609: MOD
24610: PUSH
24611: LD_INT 1
24613: PLUS
24614: PPUSH
24615: LD_VAR 0 3
24619: PUSH
24620: LD_VAR 0 1
24624: ARRAY
24625: PPUSH
24626: LD_VAR 0 1
24630: PUSH
24631: LD_INT 4
24633: MOD
24634: PUSH
24635: LD_INT 1
24637: PLUS
24638: PPUSH
24639: CALL_OW 259
24643: PUSH
24644: LD_INT 1
24646: PLUS
24647: PPUSH
24648: CALL_OW 237
24652: GO 24554
24654: POP
24655: POP
// end ;
24656: PPOPN 3
24658: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24659: LD_EXP 54
24663: IFFALSE 24671
24665: PUSH
24666: LD_EXP 62
24670: AND
24671: IFFALSE 24691
24673: GO 24675
24675: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24676: LD_INT 4
24678: PPUSH
24679: LD_OWVAR 2
24683: PPUSH
24684: LD_INT 0
24686: PPUSH
24687: CALL_OW 324
24691: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24692: LD_EXP 54
24696: IFFALSE 24704
24698: PUSH
24699: LD_EXP 91
24703: AND
24704: IFFALSE 24724
24706: GO 24708
24708: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24709: LD_INT 19
24711: PPUSH
24712: LD_OWVAR 2
24716: PPUSH
24717: LD_INT 0
24719: PPUSH
24720: CALL_OW 324
24724: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24725: LD_EXP 54
24729: IFFALSE 24737
24731: PUSH
24732: LD_EXP 63
24736: AND
24737: IFFALSE 24839
24739: GO 24741
24741: DISABLE
24742: LD_INT 0
24744: PPUSH
24745: PPUSH
// begin enable ;
24746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24747: LD_ADDR_VAR 0 2
24751: PUSH
24752: LD_INT 22
24754: PUSH
24755: LD_OWVAR 2
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 2
24766: PUSH
24767: LD_INT 34
24769: PUSH
24770: LD_INT 11
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 34
24779: PUSH
24780: LD_INT 30
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PPUSH
24796: CALL_OW 69
24800: ST_TO_ADDR
// if not tmp then
24801: LD_VAR 0 2
24805: NOT
24806: IFFALSE 24810
// exit ;
24808: GO 24839
// for i in tmp do
24810: LD_ADDR_VAR 0 1
24814: PUSH
24815: LD_VAR 0 2
24819: PUSH
24820: FOR_IN
24821: IFFALSE 24837
// begin SetLives ( i , 0 ) ;
24823: LD_VAR 0 1
24827: PPUSH
24828: LD_INT 0
24830: PPUSH
24831: CALL_OW 234
// end ;
24835: GO 24820
24837: POP
24838: POP
// end ;
24839: PPOPN 2
24841: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24842: LD_EXP 54
24846: IFFALSE 24854
24848: PUSH
24849: LD_EXP 64
24853: AND
24854: IFFALSE 24874
24856: GO 24858
24858: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24859: LD_INT 32
24861: PPUSH
24862: LD_OWVAR 2
24866: PPUSH
24867: LD_INT 0
24869: PPUSH
24870: CALL_OW 324
24874: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24875: LD_EXP 54
24879: IFFALSE 24887
24881: PUSH
24882: LD_EXP 65
24886: AND
24887: IFFALSE 25070
24889: GO 24891
24891: DISABLE
24892: LD_INT 0
24894: PPUSH
24895: PPUSH
24896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24897: LD_ADDR_VAR 0 2
24901: PUSH
24902: LD_INT 22
24904: PUSH
24905: LD_OWVAR 2
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 33
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PPUSH
24928: CALL_OW 69
24932: ST_TO_ADDR
// if not tmp then
24933: LD_VAR 0 2
24937: NOT
24938: IFFALSE 24942
// exit ;
24940: GO 25070
// side := 0 ;
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_INT 0
24949: ST_TO_ADDR
// for i := 1 to 8 do
24950: LD_ADDR_VAR 0 1
24954: PUSH
24955: DOUBLE
24956: LD_INT 1
24958: DEC
24959: ST_TO_ADDR
24960: LD_INT 8
24962: PUSH
24963: FOR_TO
24964: IFFALSE 25014
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24966: LD_OWVAR 2
24970: PUSH
24971: LD_VAR 0 1
24975: NONEQUAL
24976: IFFALSE 24998
24978: PUSH
24979: LD_OWVAR 2
24983: PPUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 81
24993: PUSH
24994: LD_INT 2
24996: EQUAL
24997: AND
24998: IFFALSE 25012
// begin side := i ;
25000: LD_ADDR_VAR 0 3
25004: PUSH
25005: LD_VAR 0 1
25009: ST_TO_ADDR
// break ;
25010: GO 25014
// end ;
25012: GO 24963
25014: POP
25015: POP
// if not side then
25016: LD_VAR 0 3
25020: NOT
25021: IFFALSE 25025
// exit ;
25023: GO 25070
// for i := 1 to tmp do
25025: LD_ADDR_VAR 0 1
25029: PUSH
25030: DOUBLE
25031: LD_INT 1
25033: DEC
25034: ST_TO_ADDR
25035: LD_VAR 0 2
25039: PUSH
25040: FOR_TO
25041: IFFALSE 25068
// if Prob ( 60 ) then
25043: LD_INT 60
25045: PPUSH
25046: CALL_OW 13
25050: IFFALSE 25066
// SetSide ( i , side ) ;
25052: LD_VAR 0 1
25056: PPUSH
25057: LD_VAR 0 3
25061: PPUSH
25062: CALL_OW 235
25066: GO 25040
25068: POP
25069: POP
// end ;
25070: PPOPN 3
25072: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25073: LD_EXP 54
25077: IFFALSE 25085
25079: PUSH
25080: LD_EXP 67
25084: AND
25085: IFFALSE 25204
25087: GO 25089
25089: DISABLE
25090: LD_INT 0
25092: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25093: LD_ADDR_VAR 0 1
25097: PUSH
25098: LD_INT 22
25100: PUSH
25101: LD_OWVAR 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 21
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 3
25122: PUSH
25123: LD_INT 23
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: PUSH
25147: FOR_IN
25148: IFFALSE 25202
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25150: LD_VAR 0 1
25154: PPUSH
25155: CALL_OW 257
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: LD_INT 3
25168: PUSH
25169: LD_INT 4
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: IN
25178: IFFALSE 25200
// SetClass ( un , rand ( 1 , 4 ) ) ;
25180: LD_VAR 0 1
25184: PPUSH
25185: LD_INT 1
25187: PPUSH
25188: LD_INT 4
25190: PPUSH
25191: CALL_OW 12
25195: PPUSH
25196: CALL_OW 336
25200: GO 25147
25202: POP
25203: POP
// end ;
25204: PPOPN 1
25206: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25207: LD_EXP 54
25211: IFFALSE 25219
25213: PUSH
25214: LD_EXP 66
25218: AND
25219: IFFALSE 25298
25221: GO 25223
25223: DISABLE
25224: LD_INT 0
25226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25227: LD_ADDR_VAR 0 1
25231: PUSH
25232: LD_INT 22
25234: PUSH
25235: LD_OWVAR 2
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 21
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PPUSH
25258: CALL_OW 69
25262: ST_TO_ADDR
// if not tmp then
25263: LD_VAR 0 1
25267: NOT
25268: IFFALSE 25272
// exit ;
25270: GO 25298
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25272: LD_VAR 0 1
25276: PUSH
25277: LD_INT 1
25279: PPUSH
25280: LD_VAR 0 1
25284: PPUSH
25285: CALL_OW 12
25289: ARRAY
25290: PPUSH
25291: LD_INT 100
25293: PPUSH
25294: CALL_OW 234
// end ;
25298: PPOPN 1
25300: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25301: LD_EXP 54
25305: IFFALSE 25313
25307: PUSH
25308: LD_EXP 68
25312: AND
25313: IFFALSE 25411
25315: GO 25317
25317: DISABLE
25318: LD_INT 0
25320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25321: LD_ADDR_VAR 0 1
25325: PUSH
25326: LD_INT 22
25328: PUSH
25329: LD_OWVAR 2
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 21
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PPUSH
25352: CALL_OW 69
25356: ST_TO_ADDR
// if not tmp then
25357: LD_VAR 0 1
25361: NOT
25362: IFFALSE 25366
// exit ;
25364: GO 25411
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25366: LD_VAR 0 1
25370: PUSH
25371: LD_INT 1
25373: PPUSH
25374: LD_VAR 0 1
25378: PPUSH
25379: CALL_OW 12
25383: ARRAY
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: LD_INT 4
25390: PPUSH
25391: CALL_OW 12
25395: PPUSH
25396: LD_INT 3000
25398: PPUSH
25399: LD_INT 9000
25401: PPUSH
25402: CALL_OW 12
25406: PPUSH
25407: CALL_OW 492
// end ;
25411: PPOPN 1
25413: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25414: LD_EXP 54
25418: IFFALSE 25426
25420: PUSH
25421: LD_EXP 69
25425: AND
25426: IFFALSE 25446
25428: GO 25430
25430: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25431: LD_INT 1
25433: PPUSH
25434: LD_OWVAR 2
25438: PPUSH
25439: LD_INT 0
25441: PPUSH
25442: CALL_OW 324
25446: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25447: LD_EXP 54
25451: IFFALSE 25459
25453: PUSH
25454: LD_EXP 70
25458: AND
25459: IFFALSE 25542
25461: GO 25463
25463: DISABLE
25464: LD_INT 0
25466: PPUSH
25467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25468: LD_ADDR_VAR 0 2
25472: PUSH
25473: LD_INT 22
25475: PUSH
25476: LD_OWVAR 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 21
25487: PUSH
25488: LD_INT 3
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL_OW 69
25503: ST_TO_ADDR
// if not tmp then
25504: LD_VAR 0 2
25508: NOT
25509: IFFALSE 25513
// exit ;
25511: GO 25542
// for i in tmp do
25513: LD_ADDR_VAR 0 1
25517: PUSH
25518: LD_VAR 0 2
25522: PUSH
25523: FOR_IN
25524: IFFALSE 25540
// SetBLevel ( i , 10 ) ;
25526: LD_VAR 0 1
25530: PPUSH
25531: LD_INT 10
25533: PPUSH
25534: CALL_OW 241
25538: GO 25523
25540: POP
25541: POP
// end ;
25542: PPOPN 2
25544: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25545: LD_EXP 54
25549: IFFALSE 25557
25551: PUSH
25552: LD_EXP 71
25556: AND
25557: IFFALSE 25668
25559: GO 25561
25561: DISABLE
25562: LD_INT 0
25564: PPUSH
25565: PPUSH
25566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_INT 22
25574: PUSH
25575: LD_OWVAR 2
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 25
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 69
25602: ST_TO_ADDR
// if not tmp then
25603: LD_VAR 0 3
25607: NOT
25608: IFFALSE 25612
// exit ;
25610: GO 25668
// un := tmp [ rand ( 1 , tmp ) ] ;
25612: LD_ADDR_VAR 0 2
25616: PUSH
25617: LD_VAR 0 3
25621: PUSH
25622: LD_INT 1
25624: PPUSH
25625: LD_VAR 0 3
25629: PPUSH
25630: CALL_OW 12
25634: ARRAY
25635: ST_TO_ADDR
// if Crawls ( un ) then
25636: LD_VAR 0 2
25640: PPUSH
25641: CALL_OW 318
25645: IFFALSE 25656
// ComWalk ( un ) ;
25647: LD_VAR 0 2
25651: PPUSH
25652: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_INT 5
25663: PPUSH
25664: CALL_OW 336
// end ;
25668: PPOPN 3
25670: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25671: LD_EXP 54
25675: IFFALSE 25683
25677: PUSH
25678: LD_EXP 72
25682: AND
25683: IFFALSE 25695
25685: PUSH
25686: LD_OWVAR 67
25690: PUSH
25691: LD_INT 4
25693: LESS
25694: AND
25695: IFFALSE 25714
25697: GO 25699
25699: DISABLE
// begin Difficulty := Difficulty + 1 ;
25700: LD_ADDR_OWVAR 67
25704: PUSH
25705: LD_OWVAR 67
25709: PUSH
25710: LD_INT 1
25712: PLUS
25713: ST_TO_ADDR
// end ;
25714: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25715: LD_EXP 54
25719: IFFALSE 25727
25721: PUSH
25722: LD_EXP 73
25726: AND
25727: IFFALSE 25830
25729: GO 25731
25731: DISABLE
25732: LD_INT 0
25734: PPUSH
// begin for i := 1 to 5 do
25735: LD_ADDR_VAR 0 1
25739: PUSH
25740: DOUBLE
25741: LD_INT 1
25743: DEC
25744: ST_TO_ADDR
25745: LD_INT 5
25747: PUSH
25748: FOR_TO
25749: IFFALSE 25828
// begin uc_nation := nation_nature ;
25751: LD_ADDR_OWVAR 21
25755: PUSH
25756: LD_INT 0
25758: ST_TO_ADDR
// uc_side := 0 ;
25759: LD_ADDR_OWVAR 20
25763: PUSH
25764: LD_INT 0
25766: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25767: LD_ADDR_OWVAR 29
25771: PUSH
25772: LD_INT 12
25774: PUSH
25775: LD_INT 12
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: ST_TO_ADDR
// hc_agressivity := 20 ;
25782: LD_ADDR_OWVAR 35
25786: PUSH
25787: LD_INT 20
25789: ST_TO_ADDR
// hc_class := class_tiger ;
25790: LD_ADDR_OWVAR 28
25794: PUSH
25795: LD_INT 14
25797: ST_TO_ADDR
// hc_gallery :=  ;
25798: LD_ADDR_OWVAR 33
25802: PUSH
25803: LD_STRING 
25805: ST_TO_ADDR
// hc_name :=  ;
25806: LD_ADDR_OWVAR 26
25810: PUSH
25811: LD_STRING 
25813: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25814: CALL_OW 44
25818: PPUSH
25819: LD_INT 0
25821: PPUSH
25822: CALL_OW 51
// end ;
25826: GO 25748
25828: POP
25829: POP
// end ;
25830: PPOPN 1
25832: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25833: LD_EXP 54
25837: IFFALSE 25845
25839: PUSH
25840: LD_EXP 74
25844: AND
25845: IFFALSE 25854
25847: GO 25849
25849: DISABLE
// StreamSibBomb ;
25850: CALL 25855 0 0
25854: END
// export function StreamSibBomb ; var i , x , y ; begin
25855: LD_INT 0
25857: PPUSH
25858: PPUSH
25859: PPUSH
25860: PPUSH
// result := false ;
25861: LD_ADDR_VAR 0 1
25865: PUSH
25866: LD_INT 0
25868: ST_TO_ADDR
// for i := 1 to 16 do
25869: LD_ADDR_VAR 0 2
25873: PUSH
25874: DOUBLE
25875: LD_INT 1
25877: DEC
25878: ST_TO_ADDR
25879: LD_INT 16
25881: PUSH
25882: FOR_TO
25883: IFFALSE 26082
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25885: LD_ADDR_VAR 0 3
25889: PUSH
25890: LD_INT 10
25892: PUSH
25893: LD_INT 20
25895: PUSH
25896: LD_INT 30
25898: PUSH
25899: LD_INT 40
25901: PUSH
25902: LD_INT 50
25904: PUSH
25905: LD_INT 60
25907: PUSH
25908: LD_INT 70
25910: PUSH
25911: LD_INT 80
25913: PUSH
25914: LD_INT 90
25916: PUSH
25917: LD_INT 100
25919: PUSH
25920: LD_INT 110
25922: PUSH
25923: LD_INT 120
25925: PUSH
25926: LD_INT 130
25928: PUSH
25929: LD_INT 140
25931: PUSH
25932: LD_INT 150
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PPUSH
25955: LD_INT 15
25957: PPUSH
25958: CALL_OW 12
25962: ARRAY
25963: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25964: LD_ADDR_VAR 0 4
25968: PUSH
25969: LD_INT 10
25971: PUSH
25972: LD_INT 20
25974: PUSH
25975: LD_INT 30
25977: PUSH
25978: LD_INT 40
25980: PUSH
25981: LD_INT 50
25983: PUSH
25984: LD_INT 60
25986: PUSH
25987: LD_INT 70
25989: PUSH
25990: LD_INT 80
25992: PUSH
25993: LD_INT 90
25995: PUSH
25996: LD_INT 100
25998: PUSH
25999: LD_INT 110
26001: PUSH
26002: LD_INT 120
26004: PUSH
26005: LD_INT 130
26007: PUSH
26008: LD_INT 140
26010: PUSH
26011: LD_INT 150
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PPUSH
26034: LD_INT 15
26036: PPUSH
26037: CALL_OW 12
26041: ARRAY
26042: ST_TO_ADDR
// if ValidHex ( x , y ) then
26043: LD_VAR 0 3
26047: PPUSH
26048: LD_VAR 0 4
26052: PPUSH
26053: CALL_OW 488
26057: IFFALSE 26080
// begin result := [ x , y ] ;
26059: LD_ADDR_VAR 0 1
26063: PUSH
26064: LD_VAR 0 3
26068: PUSH
26069: LD_VAR 0 4
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: ST_TO_ADDR
// break ;
26078: GO 26082
// end ; end ;
26080: GO 25882
26082: POP
26083: POP
// if result then
26084: LD_VAR 0 1
26088: IFFALSE 26148
// begin ToLua ( playSibBomb() ) ;
26090: LD_STRING playSibBomb()
26092: PPUSH
26093: CALL_OW 559
// wait ( 0 0$14 ) ;
26097: LD_INT 490
26099: PPUSH
26100: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26104: LD_VAR 0 1
26108: PUSH
26109: LD_INT 1
26111: ARRAY
26112: PPUSH
26113: LD_VAR 0 1
26117: PUSH
26118: LD_INT 2
26120: ARRAY
26121: PPUSH
26122: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26126: LD_VAR 0 1
26130: PUSH
26131: LD_INT 1
26133: ARRAY
26134: PPUSH
26135: LD_VAR 0 1
26139: PUSH
26140: LD_INT 2
26142: ARRAY
26143: PPUSH
26144: CALL_OW 429
// end ; end ;
26148: LD_VAR 0 1
26152: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26153: LD_EXP 54
26157: IFFALSE 26165
26159: PUSH
26160: LD_EXP 76
26164: AND
26165: IFFALSE 26177
26167: GO 26169
26169: DISABLE
// YouLost (  ) ;
26170: LD_STRING 
26172: PPUSH
26173: CALL_OW 104
26177: END
// every 0 0$1 trigger StreamModeActive and sFog do
26178: LD_EXP 54
26182: IFFALSE 26190
26184: PUSH
26185: LD_EXP 75
26189: AND
26190: IFFALSE 26204
26192: GO 26194
26194: DISABLE
// FogOff ( your_side ) ;
26195: LD_OWVAR 2
26199: PPUSH
26200: CALL_OW 344
26204: END
// every 0 0$1 trigger StreamModeActive and sSun do
26205: LD_EXP 54
26209: IFFALSE 26217
26211: PUSH
26212: LD_EXP 77
26216: AND
26217: IFFALSE 26245
26219: GO 26221
26221: DISABLE
// begin solar_recharge_percent := 0 ;
26222: LD_ADDR_OWVAR 79
26226: PUSH
26227: LD_INT 0
26229: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26230: LD_INT 10500
26232: PPUSH
26233: CALL_OW 67
// solar_recharge_percent := 100 ;
26237: LD_ADDR_OWVAR 79
26241: PUSH
26242: LD_INT 100
26244: ST_TO_ADDR
// end ;
26245: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26246: LD_EXP 54
26250: IFFALSE 26258
26252: PUSH
26253: LD_EXP 78
26257: AND
26258: IFFALSE 26497
26260: GO 26262
26262: DISABLE
26263: LD_INT 0
26265: PPUSH
26266: PPUSH
26267: PPUSH
// begin tmp := [ ] ;
26268: LD_ADDR_VAR 0 3
26272: PUSH
26273: EMPTY
26274: ST_TO_ADDR
// for i := 1 to 6 do
26275: LD_ADDR_VAR 0 1
26279: PUSH
26280: DOUBLE
26281: LD_INT 1
26283: DEC
26284: ST_TO_ADDR
26285: LD_INT 6
26287: PUSH
26288: FOR_TO
26289: IFFALSE 26394
// begin uc_nation := nation_nature ;
26291: LD_ADDR_OWVAR 21
26295: PUSH
26296: LD_INT 0
26298: ST_TO_ADDR
// uc_side := 0 ;
26299: LD_ADDR_OWVAR 20
26303: PUSH
26304: LD_INT 0
26306: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26307: LD_ADDR_OWVAR 29
26311: PUSH
26312: LD_INT 12
26314: PUSH
26315: LD_INT 12
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: ST_TO_ADDR
// hc_agressivity := 20 ;
26322: LD_ADDR_OWVAR 35
26326: PUSH
26327: LD_INT 20
26329: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26330: LD_ADDR_OWVAR 28
26334: PUSH
26335: LD_INT 17
26337: ST_TO_ADDR
// hc_gallery :=  ;
26338: LD_ADDR_OWVAR 33
26342: PUSH
26343: LD_STRING 
26345: ST_TO_ADDR
// hc_name :=  ;
26346: LD_ADDR_OWVAR 26
26350: PUSH
26351: LD_STRING 
26353: ST_TO_ADDR
// un := CreateHuman ;
26354: LD_ADDR_VAR 0 2
26358: PUSH
26359: CALL_OW 44
26363: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26364: LD_VAR 0 2
26368: PPUSH
26369: LD_INT 1
26371: PPUSH
26372: CALL_OW 51
// tmp := tmp ^ un ;
26376: LD_ADDR_VAR 0 3
26380: PUSH
26381: LD_VAR 0 3
26385: PUSH
26386: LD_VAR 0 2
26390: ADD
26391: ST_TO_ADDR
// end ;
26392: GO 26288
26394: POP
26395: POP
// repeat wait ( 0 0$1 ) ;
26396: LD_INT 35
26398: PPUSH
26399: CALL_OW 67
// for un in tmp do
26403: LD_ADDR_VAR 0 2
26407: PUSH
26408: LD_VAR 0 3
26412: PUSH
26413: FOR_IN
26414: IFFALSE 26488
// begin if IsDead ( un ) then
26416: LD_VAR 0 2
26420: PPUSH
26421: CALL_OW 301
26425: IFFALSE 26445
// begin tmp := tmp diff un ;
26427: LD_ADDR_VAR 0 3
26431: PUSH
26432: LD_VAR 0 3
26436: PUSH
26437: LD_VAR 0 2
26441: DIFF
26442: ST_TO_ADDR
// continue ;
26443: GO 26413
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26445: LD_VAR 0 2
26449: PPUSH
26450: LD_INT 3
26452: PUSH
26453: LD_INT 22
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PPUSH
26467: CALL_OW 69
26471: PPUSH
26472: LD_VAR 0 2
26476: PPUSH
26477: CALL_OW 74
26481: PPUSH
26482: CALL_OW 115
// end ;
26486: GO 26413
26488: POP
26489: POP
// until not tmp ;
26490: LD_VAR 0 3
26494: NOT
26495: IFFALSE 26396
// end ;
26497: PPOPN 3
26499: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26500: LD_EXP 54
26504: IFFALSE 26512
26506: PUSH
26507: LD_EXP 79
26511: AND
26512: IFFALSE 26566
26514: GO 26516
26516: DISABLE
// begin ToLua ( displayTroll(); ) ;
26517: LD_STRING displayTroll();
26519: PPUSH
26520: CALL_OW 559
// wait ( 3 3$00 ) ;
26524: LD_INT 6300
26526: PPUSH
26527: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26531: LD_STRING hideTroll();
26533: PPUSH
26534: CALL_OW 559
// wait ( 1 1$00 ) ;
26538: LD_INT 2100
26540: PPUSH
26541: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26545: LD_STRING displayTroll();
26547: PPUSH
26548: CALL_OW 559
// wait ( 1 1$00 ) ;
26552: LD_INT 2100
26554: PPUSH
26555: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26559: LD_STRING hideTroll();
26561: PPUSH
26562: CALL_OW 559
// end ;
26566: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26567: LD_EXP 54
26571: IFFALSE 26579
26573: PUSH
26574: LD_EXP 80
26578: AND
26579: IFFALSE 26642
26581: GO 26583
26583: DISABLE
26584: LD_INT 0
26586: PPUSH
// begin p := 0 ;
26587: LD_ADDR_VAR 0 1
26591: PUSH
26592: LD_INT 0
26594: ST_TO_ADDR
// repeat game_speed := 1 ;
26595: LD_ADDR_OWVAR 65
26599: PUSH
26600: LD_INT 1
26602: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26603: LD_INT 35
26605: PPUSH
26606: CALL_OW 67
// p := p + 1 ;
26610: LD_ADDR_VAR 0 1
26614: PUSH
26615: LD_VAR 0 1
26619: PUSH
26620: LD_INT 1
26622: PLUS
26623: ST_TO_ADDR
// until p >= 60 ;
26624: LD_VAR 0 1
26628: PUSH
26629: LD_INT 60
26631: GREATEREQUAL
26632: IFFALSE 26595
// game_speed := 4 ;
26634: LD_ADDR_OWVAR 65
26638: PUSH
26639: LD_INT 4
26641: ST_TO_ADDR
// end ;
26642: PPOPN 1
26644: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26645: LD_EXP 54
26649: IFFALSE 26657
26651: PUSH
26652: LD_EXP 81
26656: AND
26657: IFFALSE 26803
26659: GO 26661
26661: DISABLE
26662: LD_INT 0
26664: PPUSH
26665: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26666: LD_ADDR_VAR 0 1
26670: PUSH
26671: LD_INT 22
26673: PUSH
26674: LD_OWVAR 2
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 2
26685: PUSH
26686: LD_INT 30
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 30
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PPUSH
26715: CALL_OW 69
26719: ST_TO_ADDR
// if not depot then
26720: LD_VAR 0 1
26724: NOT
26725: IFFALSE 26729
// exit ;
26727: GO 26803
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26729: LD_ADDR_VAR 0 2
26733: PUSH
26734: LD_VAR 0 1
26738: PUSH
26739: LD_INT 1
26741: PPUSH
26742: LD_VAR 0 1
26746: PPUSH
26747: CALL_OW 12
26751: ARRAY
26752: PPUSH
26753: CALL_OW 274
26757: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26758: LD_VAR 0 2
26762: PPUSH
26763: LD_INT 1
26765: PPUSH
26766: LD_INT 0
26768: PPUSH
26769: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26773: LD_VAR 0 2
26777: PPUSH
26778: LD_INT 2
26780: PPUSH
26781: LD_INT 0
26783: PPUSH
26784: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26788: LD_VAR 0 2
26792: PPUSH
26793: LD_INT 3
26795: PPUSH
26796: LD_INT 0
26798: PPUSH
26799: CALL_OW 277
// end ;
26803: PPOPN 2
26805: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26806: LD_EXP 54
26810: IFFALSE 26818
26812: PUSH
26813: LD_EXP 82
26817: AND
26818: IFFALSE 26915
26820: GO 26822
26822: DISABLE
26823: LD_INT 0
26825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26826: LD_ADDR_VAR 0 1
26830: PUSH
26831: LD_INT 22
26833: PUSH
26834: LD_OWVAR 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 21
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 3
26855: PUSH
26856: LD_INT 23
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: PPUSH
26875: CALL_OW 69
26879: ST_TO_ADDR
// if not tmp then
26880: LD_VAR 0 1
26884: NOT
26885: IFFALSE 26889
// exit ;
26887: GO 26915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26889: LD_VAR 0 1
26893: PUSH
26894: LD_INT 1
26896: PPUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 12
26906: ARRAY
26907: PPUSH
26908: LD_INT 200
26910: PPUSH
26911: CALL_OW 234
// end ;
26915: PPOPN 1
26917: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26918: LD_EXP 54
26922: IFFALSE 26930
26924: PUSH
26925: LD_EXP 83
26929: AND
26930: IFFALSE 27009
26932: GO 26934
26934: DISABLE
26935: LD_INT 0
26937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26938: LD_ADDR_VAR 0 1
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_OWVAR 2
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PPUSH
26969: CALL_OW 69
26973: ST_TO_ADDR
// if not tmp then
26974: LD_VAR 0 1
26978: NOT
26979: IFFALSE 26983
// exit ;
26981: GO 27009
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 1
26990: PPUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL_OW 12
27000: ARRAY
27001: PPUSH
27002: LD_INT 60
27004: PPUSH
27005: CALL_OW 234
// end ;
27009: PPOPN 1
27011: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27012: LD_EXP 54
27016: IFFALSE 27024
27018: PUSH
27019: LD_EXP 84
27023: AND
27024: IFFALSE 27123
27026: GO 27028
27028: DISABLE
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
// begin enable ;
27033: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27034: LD_ADDR_VAR 0 1
27038: PUSH
27039: LD_INT 22
27041: PUSH
27042: LD_OWVAR 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 61
27053: PUSH
27054: EMPTY
27055: LIST
27056: PUSH
27057: LD_INT 33
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: PPUSH
27072: CALL_OW 69
27076: ST_TO_ADDR
// if not tmp then
27077: LD_VAR 0 1
27081: NOT
27082: IFFALSE 27086
// exit ;
27084: GO 27123
// for i in tmp do
27086: LD_ADDR_VAR 0 2
27090: PUSH
27091: LD_VAR 0 1
27095: PUSH
27096: FOR_IN
27097: IFFALSE 27121
// if IsControledBy ( i ) then
27099: LD_VAR 0 2
27103: PPUSH
27104: CALL_OW 312
27108: IFFALSE 27119
// ComUnlink ( i ) ;
27110: LD_VAR 0 2
27114: PPUSH
27115: CALL_OW 136
27119: GO 27096
27121: POP
27122: POP
// end ;
27123: PPOPN 2
27125: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27126: LD_EXP 54
27130: IFFALSE 27138
27132: PUSH
27133: LD_EXP 85
27137: AND
27138: IFFALSE 27278
27140: GO 27142
27142: DISABLE
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
// begin ToLua ( displayPowell(); ) ;
27147: LD_STRING displayPowell();
27149: PPUSH
27150: CALL_OW 559
// uc_side := 0 ;
27154: LD_ADDR_OWVAR 20
27158: PUSH
27159: LD_INT 0
27161: ST_TO_ADDR
// uc_nation := 2 ;
27162: LD_ADDR_OWVAR 21
27166: PUSH
27167: LD_INT 2
27169: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27170: LD_ADDR_OWVAR 37
27174: PUSH
27175: LD_INT 14
27177: ST_TO_ADDR
// vc_engine := engine_siberite ;
27178: LD_ADDR_OWVAR 39
27182: PUSH
27183: LD_INT 3
27185: ST_TO_ADDR
// vc_control := control_apeman ;
27186: LD_ADDR_OWVAR 38
27190: PUSH
27191: LD_INT 5
27193: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27194: LD_ADDR_OWVAR 40
27198: PUSH
27199: LD_INT 29
27201: ST_TO_ADDR
// un := CreateVehicle ;
27202: LD_ADDR_VAR 0 2
27206: PUSH
27207: CALL_OW 45
27211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27212: LD_VAR 0 2
27216: PPUSH
27217: LD_INT 1
27219: PPUSH
27220: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27224: LD_INT 35
27226: PPUSH
27227: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27231: LD_VAR 0 2
27235: PPUSH
27236: LD_INT 22
27238: PUSH
27239: LD_OWVAR 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PPUSH
27248: CALL_OW 69
27252: PPUSH
27253: LD_VAR 0 2
27257: PPUSH
27258: CALL_OW 74
27262: PPUSH
27263: CALL_OW 115
// until IsDead ( un ) ;
27267: LD_VAR 0 2
27271: PPUSH
27272: CALL_OW 301
27276: IFFALSE 27224
// end ;
27278: PPOPN 2
27280: END
// every 0 0$1 trigger StreamModeActive and sStu do
27281: LD_EXP 54
27285: IFFALSE 27293
27287: PUSH
27288: LD_EXP 93
27292: AND
27293: IFFALSE 27309
27295: GO 27297
27297: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27298: LD_STRING displayStucuk();
27300: PPUSH
27301: CALL_OW 559
// ResetFog ;
27305: CALL_OW 335
// end ;
27309: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27310: LD_EXP 54
27314: IFFALSE 27322
27316: PUSH
27317: LD_EXP 86
27321: AND
27322: IFFALSE 27463
27324: GO 27326
27326: DISABLE
27327: LD_INT 0
27329: PPUSH
27330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: LD_INT 22
27338: PUSH
27339: LD_OWVAR 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 21
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PPUSH
27362: CALL_OW 69
27366: ST_TO_ADDR
// if not tmp then
27367: LD_VAR 0 2
27371: NOT
27372: IFFALSE 27376
// exit ;
27374: GO 27463
// un := tmp [ rand ( 1 , tmp ) ] ;
27376: LD_ADDR_VAR 0 1
27380: PUSH
27381: LD_VAR 0 2
27385: PUSH
27386: LD_INT 1
27388: PPUSH
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 12
27398: ARRAY
27399: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27400: LD_VAR 0 1
27404: PPUSH
27405: LD_INT 0
27407: PPUSH
27408: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27412: LD_VAR 0 1
27416: PPUSH
27417: LD_OWVAR 3
27421: PUSH
27422: LD_VAR 0 1
27426: DIFF
27427: PPUSH
27428: LD_VAR 0 1
27432: PPUSH
27433: CALL_OW 74
27437: PPUSH
27438: CALL_OW 115
// wait ( 0 0$20 ) ;
27442: LD_INT 700
27444: PPUSH
27445: CALL_OW 67
// SetSide ( un , your_side ) ;
27449: LD_VAR 0 1
27453: PPUSH
27454: LD_OWVAR 2
27458: PPUSH
27459: CALL_OW 235
// end ;
27463: PPOPN 2
27465: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27466: LD_EXP 54
27470: IFFALSE 27478
27472: PUSH
27473: LD_EXP 87
27477: AND
27478: IFFALSE 27584
27480: GO 27482
27482: DISABLE
27483: LD_INT 0
27485: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27486: LD_ADDR_VAR 0 1
27490: PUSH
27491: LD_INT 22
27493: PUSH
27494: LD_OWVAR 2
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 30
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 30
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PPUSH
27535: CALL_OW 69
27539: ST_TO_ADDR
// if not depot then
27540: LD_VAR 0 1
27544: NOT
27545: IFFALSE 27549
// exit ;
27547: GO 27584
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27549: LD_VAR 0 1
27553: PUSH
27554: LD_INT 1
27556: ARRAY
27557: PPUSH
27558: CALL_OW 250
27562: PPUSH
27563: LD_VAR 0 1
27567: PUSH
27568: LD_INT 1
27570: ARRAY
27571: PPUSH
27572: CALL_OW 251
27576: PPUSH
27577: LD_INT 70
27579: PPUSH
27580: CALL_OW 495
// end ;
27584: PPOPN 1
27586: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27587: LD_EXP 54
27591: IFFALSE 27599
27593: PUSH
27594: LD_EXP 88
27598: AND
27599: IFFALSE 27810
27601: GO 27603
27603: DISABLE
27604: LD_INT 0
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27611: LD_ADDR_VAR 0 5
27615: PUSH
27616: LD_INT 22
27618: PUSH
27619: LD_OWVAR 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 21
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PPUSH
27642: CALL_OW 69
27646: ST_TO_ADDR
// if not tmp then
27647: LD_VAR 0 5
27651: NOT
27652: IFFALSE 27656
// exit ;
27654: GO 27810
// for i in tmp do
27656: LD_ADDR_VAR 0 1
27660: PUSH
27661: LD_VAR 0 5
27665: PUSH
27666: FOR_IN
27667: IFFALSE 27808
// begin d := rand ( 0 , 5 ) ;
27669: LD_ADDR_VAR 0 4
27673: PUSH
27674: LD_INT 0
27676: PPUSH
27677: LD_INT 5
27679: PPUSH
27680: CALL_OW 12
27684: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27685: LD_ADDR_VAR 0 2
27689: PUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 250
27699: PPUSH
27700: LD_VAR 0 4
27704: PPUSH
27705: LD_INT 3
27707: PPUSH
27708: LD_INT 12
27710: PPUSH
27711: CALL_OW 12
27715: PPUSH
27716: CALL_OW 272
27720: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27721: LD_ADDR_VAR 0 3
27725: PUSH
27726: LD_VAR 0 1
27730: PPUSH
27731: CALL_OW 251
27735: PPUSH
27736: LD_VAR 0 4
27740: PPUSH
27741: LD_INT 3
27743: PPUSH
27744: LD_INT 12
27746: PPUSH
27747: CALL_OW 12
27751: PPUSH
27752: CALL_OW 273
27756: ST_TO_ADDR
// if ValidHex ( x , y ) then
27757: LD_VAR 0 2
27761: PPUSH
27762: LD_VAR 0 3
27766: PPUSH
27767: CALL_OW 488
27771: IFFALSE 27806
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_VAR 0 2
27782: PPUSH
27783: LD_VAR 0 3
27787: PPUSH
27788: LD_INT 3
27790: PPUSH
27791: LD_INT 6
27793: PPUSH
27794: CALL_OW 12
27798: PPUSH
27799: LD_INT 1
27801: PPUSH
27802: CALL_OW 483
// end ;
27806: GO 27666
27808: POP
27809: POP
// end ;
27810: PPOPN 5
27812: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27813: LD_EXP 54
27817: IFFALSE 27825
27819: PUSH
27820: LD_EXP 89
27824: AND
27825: IFFALSE 27919
27827: GO 27829
27829: DISABLE
27830: LD_INT 0
27832: PPUSH
27833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27834: LD_ADDR_VAR 0 2
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_OWVAR 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 32
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 21
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: PPUSH
27876: CALL_OW 69
27880: ST_TO_ADDR
// if not tmp then
27881: LD_VAR 0 2
27885: NOT
27886: IFFALSE 27890
// exit ;
27888: GO 27919
// for i in tmp do
27890: LD_ADDR_VAR 0 1
27894: PUSH
27895: LD_VAR 0 2
27899: PUSH
27900: FOR_IN
27901: IFFALSE 27917
// SetFuel ( i , 0 ) ;
27903: LD_VAR 0 1
27907: PPUSH
27908: LD_INT 0
27910: PPUSH
27911: CALL_OW 240
27915: GO 27900
27917: POP
27918: POP
// end ;
27919: PPOPN 2
27921: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27922: LD_EXP 54
27926: IFFALSE 27934
27928: PUSH
27929: LD_EXP 90
27933: AND
27934: IFFALSE 28000
27936: GO 27938
27938: DISABLE
27939: LD_INT 0
27941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27942: LD_ADDR_VAR 0 1
27946: PUSH
27947: LD_INT 22
27949: PUSH
27950: LD_OWVAR 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 30
27961: PUSH
27962: LD_INT 29
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PPUSH
27973: CALL_OW 69
27977: ST_TO_ADDR
// if not tmp then
27978: LD_VAR 0 1
27982: NOT
27983: IFFALSE 27987
// exit ;
27985: GO 28000
// DestroyUnit ( tmp [ 1 ] ) ;
27987: LD_VAR 0 1
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: PPUSH
27996: CALL_OW 65
// end ;
28000: PPOPN 1
28002: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28003: LD_EXP 54
28007: IFFALSE 28015
28009: PUSH
28010: LD_EXP 92
28014: AND
28015: IFFALSE 28144
28017: GO 28019
28019: DISABLE
28020: LD_INT 0
28022: PPUSH
// begin uc_side := 0 ;
28023: LD_ADDR_OWVAR 20
28027: PUSH
28028: LD_INT 0
28030: ST_TO_ADDR
// uc_nation := nation_arabian ;
28031: LD_ADDR_OWVAR 21
28035: PUSH
28036: LD_INT 2
28038: ST_TO_ADDR
// hc_gallery :=  ;
28039: LD_ADDR_OWVAR 33
28043: PUSH
28044: LD_STRING 
28046: ST_TO_ADDR
// hc_name :=  ;
28047: LD_ADDR_OWVAR 26
28051: PUSH
28052: LD_STRING 
28054: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28055: LD_INT 1
28057: PPUSH
28058: LD_INT 11
28060: PPUSH
28061: LD_INT 10
28063: PPUSH
28064: CALL_OW 380
// un := CreateHuman ;
28068: LD_ADDR_VAR 0 1
28072: PUSH
28073: CALL_OW 44
28077: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28078: LD_VAR 0 1
28082: PPUSH
28083: LD_INT 1
28085: PPUSH
28086: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28090: LD_INT 35
28092: PPUSH
28093: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28097: LD_VAR 0 1
28101: PPUSH
28102: LD_INT 22
28104: PUSH
28105: LD_OWVAR 2
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PPUSH
28114: CALL_OW 69
28118: PPUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 74
28128: PPUSH
28129: CALL_OW 115
// until IsDead ( un ) ;
28133: LD_VAR 0 1
28137: PPUSH
28138: CALL_OW 301
28142: IFFALSE 28090
// end ;
28144: PPOPN 1
28146: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28147: LD_EXP 54
28151: IFFALSE 28159
28153: PUSH
28154: LD_EXP 94
28158: AND
28159: IFFALSE 28171
28161: GO 28163
28163: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28164: LD_STRING earthquake(getX(game), 0, 32)
28166: PPUSH
28167: CALL_OW 559
28171: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28172: LD_EXP 54
28176: IFFALSE 28184
28178: PUSH
28179: LD_EXP 95
28183: AND
28184: IFFALSE 28275
28186: GO 28188
28188: DISABLE
28189: LD_INT 0
28191: PPUSH
// begin enable ;
28192: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28193: LD_ADDR_VAR 0 1
28197: PUSH
28198: LD_INT 22
28200: PUSH
28201: LD_OWVAR 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 21
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 33
28222: PUSH
28223: LD_INT 3
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: PPUSH
28235: CALL_OW 69
28239: ST_TO_ADDR
// if not tmp then
28240: LD_VAR 0 1
28244: NOT
28245: IFFALSE 28249
// exit ;
28247: GO 28275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28249: LD_VAR 0 1
28253: PUSH
28254: LD_INT 1
28256: PPUSH
28257: LD_VAR 0 1
28261: PPUSH
28262: CALL_OW 12
28266: ARRAY
28267: PPUSH
28268: LD_INT 1
28270: PPUSH
28271: CALL_OW 234
// end ;
28275: PPOPN 1
28277: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28278: LD_EXP 54
28282: IFFALSE 28290
28284: PUSH
28285: LD_EXP 96
28289: AND
28290: IFFALSE 28431
28292: GO 28294
28294: DISABLE
28295: LD_INT 0
28297: PPUSH
28298: PPUSH
28299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 22
28307: PUSH
28308: LD_OWVAR 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 25
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 3
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28431
// un := tmp [ rand ( 1 , tmp ) ] ;
28345: LD_ADDR_VAR 0 2
28349: PUSH
28350: LD_VAR 0 3
28354: PUSH
28355: LD_INT 1
28357: PPUSH
28358: LD_VAR 0 3
28362: PPUSH
28363: CALL_OW 12
28367: ARRAY
28368: ST_TO_ADDR
// if Crawls ( un ) then
28369: LD_VAR 0 2
28373: PPUSH
28374: CALL_OW 318
28378: IFFALSE 28389
// ComWalk ( un ) ;
28380: LD_VAR 0 2
28384: PPUSH
28385: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_INT 9
28396: PPUSH
28397: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28401: LD_INT 28
28403: PPUSH
28404: LD_OWVAR 2
28408: PPUSH
28409: LD_INT 2
28411: PPUSH
28412: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28416: LD_INT 29
28418: PPUSH
28419: LD_OWVAR 2
28423: PPUSH
28424: LD_INT 2
28426: PPUSH
28427: CALL_OW 322
// end ;
28431: PPOPN 3
28433: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28434: LD_EXP 54
28438: IFFALSE 28446
28440: PUSH
28441: LD_EXP 97
28445: AND
28446: IFFALSE 28557
28448: GO 28450
28450: DISABLE
28451: LD_INT 0
28453: PPUSH
28454: PPUSH
28455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: LD_INT 22
28463: PUSH
28464: LD_OWVAR 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 25
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PPUSH
28487: CALL_OW 69
28491: ST_TO_ADDR
// if not tmp then
28492: LD_VAR 0 3
28496: NOT
28497: IFFALSE 28501
// exit ;
28499: GO 28557
// un := tmp [ rand ( 1 , tmp ) ] ;
28501: LD_ADDR_VAR 0 2
28505: PUSH
28506: LD_VAR 0 3
28510: PUSH
28511: LD_INT 1
28513: PPUSH
28514: LD_VAR 0 3
28518: PPUSH
28519: CALL_OW 12
28523: ARRAY
28524: ST_TO_ADDR
// if Crawls ( un ) then
28525: LD_VAR 0 2
28529: PPUSH
28530: CALL_OW 318
28534: IFFALSE 28545
// ComWalk ( un ) ;
28536: LD_VAR 0 2
28540: PPUSH
28541: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28545: LD_VAR 0 2
28549: PPUSH
28550: LD_INT 8
28552: PPUSH
28553: CALL_OW 336
// end ;
28557: PPOPN 3
28559: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28560: LD_EXP 54
28564: IFFALSE 28572
28566: PUSH
28567: LD_EXP 98
28571: AND
28572: IFFALSE 28716
28574: GO 28576
28576: DISABLE
28577: LD_INT 0
28579: PPUSH
28580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28581: LD_ADDR_VAR 0 2
28585: PUSH
28586: LD_INT 22
28588: PUSH
28589: LD_OWVAR 2
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 21
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 34
28613: PUSH
28614: LD_INT 12
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 34
28623: PUSH
28624: LD_INT 51
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 34
28633: PUSH
28634: LD_INT 32
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: ST_TO_ADDR
// if not tmp then
28657: LD_VAR 0 2
28661: NOT
28662: IFFALSE 28666
// exit ;
28664: GO 28716
// for i in tmp do
28666: LD_ADDR_VAR 0 1
28670: PUSH
28671: LD_VAR 0 2
28675: PUSH
28676: FOR_IN
28677: IFFALSE 28714
// if GetCargo ( i , mat_artifact ) = 0 then
28679: LD_VAR 0 1
28683: PPUSH
28684: LD_INT 4
28686: PPUSH
28687: CALL_OW 289
28691: PUSH
28692: LD_INT 0
28694: EQUAL
28695: IFFALSE 28712
// SetCargo ( i , mat_siberit , 100 ) ;
28697: LD_VAR 0 1
28701: PPUSH
28702: LD_INT 3
28704: PPUSH
28705: LD_INT 100
28707: PPUSH
28708: CALL_OW 290
28712: GO 28676
28714: POP
28715: POP
// end ;
28716: PPOPN 2
28718: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28719: LD_EXP 54
28723: IFFALSE 28731
28725: PUSH
28726: LD_EXP 99
28730: AND
28731: IFFALSE 28914
28733: GO 28735
28735: DISABLE
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28740: LD_ADDR_VAR 0 2
28744: PUSH
28745: LD_INT 22
28747: PUSH
28748: LD_OWVAR 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PPUSH
28757: CALL_OW 69
28761: ST_TO_ADDR
// if not tmp then
28762: LD_VAR 0 2
28766: NOT
28767: IFFALSE 28771
// exit ;
28769: GO 28914
// for i := 1 to 2 do
28771: LD_ADDR_VAR 0 1
28775: PUSH
28776: DOUBLE
28777: LD_INT 1
28779: DEC
28780: ST_TO_ADDR
28781: LD_INT 2
28783: PUSH
28784: FOR_TO
28785: IFFALSE 28912
// begin uc_side := your_side ;
28787: LD_ADDR_OWVAR 20
28791: PUSH
28792: LD_OWVAR 2
28796: ST_TO_ADDR
// uc_nation := nation_american ;
28797: LD_ADDR_OWVAR 21
28801: PUSH
28802: LD_INT 1
28804: ST_TO_ADDR
// vc_chassis := us_morphling ;
28805: LD_ADDR_OWVAR 37
28809: PUSH
28810: LD_INT 5
28812: ST_TO_ADDR
// vc_engine := engine_siberite ;
28813: LD_ADDR_OWVAR 39
28817: PUSH
28818: LD_INT 3
28820: ST_TO_ADDR
// vc_control := control_computer ;
28821: LD_ADDR_OWVAR 38
28825: PUSH
28826: LD_INT 3
28828: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28829: LD_ADDR_OWVAR 40
28833: PUSH
28834: LD_INT 10
28836: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28837: LD_VAR 0 2
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PPUSH
28846: CALL_OW 310
28850: NOT
28851: IFFALSE 28898
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28853: CALL_OW 45
28857: PPUSH
28858: LD_VAR 0 2
28862: PUSH
28863: LD_INT 1
28865: ARRAY
28866: PPUSH
28867: CALL_OW 250
28871: PPUSH
28872: LD_VAR 0 2
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: CALL_OW 251
28885: PPUSH
28886: LD_INT 12
28888: PPUSH
28889: LD_INT 1
28891: PPUSH
28892: CALL_OW 50
28896: GO 28910
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28898: CALL_OW 45
28902: PPUSH
28903: LD_INT 1
28905: PPUSH
28906: CALL_OW 51
// end ;
28910: GO 28784
28912: POP
28913: POP
// end ;
28914: PPOPN 2
28916: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28917: LD_EXP 54
28921: IFFALSE 28929
28923: PUSH
28924: LD_EXP 100
28928: AND
28929: IFFALSE 29151
28931: GO 28933
28933: DISABLE
28934: LD_INT 0
28936: PPUSH
28937: PPUSH
28938: PPUSH
28939: PPUSH
28940: PPUSH
28941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28942: LD_ADDR_VAR 0 6
28946: PUSH
28947: LD_INT 22
28949: PUSH
28950: LD_OWVAR 2
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 21
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: LD_INT 23
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 69
28995: ST_TO_ADDR
// if not tmp then
28996: LD_VAR 0 6
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29151
// s1 := rand ( 1 , 4 ) ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_INT 1
29012: PPUSH
29013: LD_INT 4
29015: PPUSH
29016: CALL_OW 12
29020: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29021: LD_ADDR_VAR 0 4
29025: PUSH
29026: LD_VAR 0 6
29030: PUSH
29031: LD_INT 1
29033: ARRAY
29034: PPUSH
29035: LD_VAR 0 2
29039: PPUSH
29040: CALL_OW 259
29044: ST_TO_ADDR
// if s1 = 1 then
29045: LD_VAR 0 2
29049: PUSH
29050: LD_INT 1
29052: EQUAL
29053: IFFALSE 29073
// s2 := rand ( 2 , 4 ) else
29055: LD_ADDR_VAR 0 3
29059: PUSH
29060: LD_INT 2
29062: PPUSH
29063: LD_INT 4
29065: PPUSH
29066: CALL_OW 12
29070: ST_TO_ADDR
29071: GO 29081
// s2 := 1 ;
29073: LD_ADDR_VAR 0 3
29077: PUSH
29078: LD_INT 1
29080: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29081: LD_ADDR_VAR 0 5
29085: PUSH
29086: LD_VAR 0 6
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: LD_VAR 0 3
29099: PPUSH
29100: CALL_OW 259
29104: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29105: LD_VAR 0 6
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: PPUSH
29114: LD_VAR 0 2
29118: PPUSH
29119: LD_VAR 0 5
29123: PPUSH
29124: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29128: LD_VAR 0 6
29132: PUSH
29133: LD_INT 1
29135: ARRAY
29136: PPUSH
29137: LD_VAR 0 3
29141: PPUSH
29142: LD_VAR 0 4
29146: PPUSH
29147: CALL_OW 237
// end ;
29151: PPOPN 6
29153: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29154: LD_EXP 54
29158: IFFALSE 29166
29160: PUSH
29161: LD_EXP 101
29165: AND
29166: IFFALSE 29245
29168: GO 29170
29170: DISABLE
29171: LD_INT 0
29173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29174: LD_ADDR_VAR 0 1
29178: PUSH
29179: LD_INT 22
29181: PUSH
29182: LD_OWVAR 2
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 30
29193: PUSH
29194: LD_INT 3
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 69
29209: ST_TO_ADDR
// if not tmp then
29210: LD_VAR 0 1
29214: NOT
29215: IFFALSE 29219
// exit ;
29217: GO 29245
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29219: LD_VAR 0 1
29223: PUSH
29224: LD_INT 1
29226: PPUSH
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL_OW 12
29236: ARRAY
29237: PPUSH
29238: LD_INT 1
29240: PPUSH
29241: CALL_OW 234
// end ;
29245: PPOPN 1
29247: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29248: LD_EXP 54
29252: IFFALSE 29260
29254: PUSH
29255: LD_EXP 102
29259: AND
29260: IFFALSE 29372
29262: GO 29264
29264: DISABLE
29265: LD_INT 0
29267: PPUSH
29268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29269: LD_ADDR_VAR 0 2
29273: PUSH
29274: LD_INT 22
29276: PUSH
29277: LD_OWVAR 2
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: LD_INT 30
29291: PUSH
29292: LD_INT 27
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 30
29301: PUSH
29302: LD_INT 26
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 30
29311: PUSH
29312: LD_INT 28
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PPUSH
29329: CALL_OW 69
29333: ST_TO_ADDR
// if not tmp then
29334: LD_VAR 0 2
29338: NOT
29339: IFFALSE 29343
// exit ;
29341: GO 29372
// for i in tmp do
29343: LD_ADDR_VAR 0 1
29347: PUSH
29348: LD_VAR 0 2
29352: PUSH
29353: FOR_IN
29354: IFFALSE 29370
// SetLives ( i , 1 ) ;
29356: LD_VAR 0 1
29360: PPUSH
29361: LD_INT 1
29363: PPUSH
29364: CALL_OW 234
29368: GO 29353
29370: POP
29371: POP
// end ;
29372: PPOPN 2
29374: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29375: LD_EXP 54
29379: IFFALSE 29387
29381: PUSH
29382: LD_EXP 103
29386: AND
29387: IFFALSE 29674
29389: GO 29391
29391: DISABLE
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
29396: PPUSH
// begin i := rand ( 1 , 7 ) ;
29397: LD_ADDR_VAR 0 1
29401: PUSH
29402: LD_INT 1
29404: PPUSH
29405: LD_INT 7
29407: PPUSH
29408: CALL_OW 12
29412: ST_TO_ADDR
// case i of 1 :
29413: LD_VAR 0 1
29417: PUSH
29418: LD_INT 1
29420: DOUBLE
29421: EQUAL
29422: IFTRUE 29426
29424: GO 29436
29426: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29427: LD_STRING earthquake(getX(game), 0, 32)
29429: PPUSH
29430: CALL_OW 559
29434: GO 29674
29436: LD_INT 2
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29458
29444: POP
// begin ToLua ( displayStucuk(); ) ;
29445: LD_STRING displayStucuk();
29447: PPUSH
29448: CALL_OW 559
// ResetFog ;
29452: CALL_OW 335
// end ; 3 :
29456: GO 29674
29458: LD_INT 3
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29570
29466: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29467: LD_ADDR_VAR 0 2
29471: PUSH
29472: LD_INT 22
29474: PUSH
29475: LD_OWVAR 2
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 25
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PPUSH
29498: CALL_OW 69
29502: ST_TO_ADDR
// if not tmp then
29503: LD_VAR 0 2
29507: NOT
29508: IFFALSE 29512
// exit ;
29510: GO 29674
// un := tmp [ rand ( 1 , tmp ) ] ;
29512: LD_ADDR_VAR 0 3
29516: PUSH
29517: LD_VAR 0 2
29521: PUSH
29522: LD_INT 1
29524: PPUSH
29525: LD_VAR 0 2
29529: PPUSH
29530: CALL_OW 12
29534: ARRAY
29535: ST_TO_ADDR
// if Crawls ( un ) then
29536: LD_VAR 0 3
29540: PPUSH
29541: CALL_OW 318
29545: IFFALSE 29556
// ComWalk ( un ) ;
29547: LD_VAR 0 3
29551: PPUSH
29552: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29556: LD_VAR 0 3
29560: PPUSH
29561: LD_INT 8
29563: PPUSH
29564: CALL_OW 336
// end ; 4 :
29568: GO 29674
29570: LD_INT 4
29572: DOUBLE
29573: EQUAL
29574: IFTRUE 29578
29576: GO 29652
29578: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29579: LD_ADDR_VAR 0 2
29583: PUSH
29584: LD_INT 22
29586: PUSH
29587: LD_OWVAR 2
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 30
29598: PUSH
29599: LD_INT 29
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PPUSH
29610: CALL_OW 69
29614: ST_TO_ADDR
// if not tmp then
29615: LD_VAR 0 2
29619: NOT
29620: IFFALSE 29624
// exit ;
29622: GO 29674
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29624: LD_VAR 0 2
29628: PUSH
29629: LD_INT 1
29631: ARRAY
29632: PPUSH
29633: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29637: LD_VAR 0 2
29641: PUSH
29642: LD_INT 1
29644: ARRAY
29645: PPUSH
29646: CALL_OW 65
// end ; 5 .. 7 :
29650: GO 29674
29652: LD_INT 5
29654: DOUBLE
29655: GREATEREQUAL
29656: IFFALSE 29664
29658: LD_INT 7
29660: DOUBLE
29661: LESSEQUAL
29662: IFTRUE 29666
29664: GO 29673
29666: POP
// StreamSibBomb ; end ;
29667: CALL 25855 0 0
29671: GO 29674
29673: POP
// end ;
29674: PPOPN 3
29676: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29677: LD_EXP 54
29681: IFFALSE 29689
29683: PUSH
29684: LD_EXP 104
29688: AND
29689: IFFALSE 29845
29691: GO 29693
29693: DISABLE
29694: LD_INT 0
29696: PPUSH
29697: PPUSH
29698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29699: LD_ADDR_VAR 0 2
29703: PUSH
29704: LD_INT 81
29706: PUSH
29707: LD_OWVAR 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: LD_INT 21
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 21
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PPUSH
29748: CALL_OW 69
29752: ST_TO_ADDR
// if not tmp then
29753: LD_VAR 0 2
29757: NOT
29758: IFFALSE 29762
// exit ;
29760: GO 29845
// p := 0 ;
29762: LD_ADDR_VAR 0 3
29766: PUSH
29767: LD_INT 0
29769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29770: LD_INT 35
29772: PPUSH
29773: CALL_OW 67
// p := p + 1 ;
29777: LD_ADDR_VAR 0 3
29781: PUSH
29782: LD_VAR 0 3
29786: PUSH
29787: LD_INT 1
29789: PLUS
29790: ST_TO_ADDR
// for i in tmp do
29791: LD_ADDR_VAR 0 1
29795: PUSH
29796: LD_VAR 0 2
29800: PUSH
29801: FOR_IN
29802: IFFALSE 29833
// if GetLives ( i ) < 1000 then
29804: LD_VAR 0 1
29808: PPUSH
29809: CALL_OW 256
29813: PUSH
29814: LD_INT 1000
29816: LESS
29817: IFFALSE 29831
// SetLives ( i , 1000 ) ;
29819: LD_VAR 0 1
29823: PPUSH
29824: LD_INT 1000
29826: PPUSH
29827: CALL_OW 234
29831: GO 29801
29833: POP
29834: POP
// until p > 20 ;
29835: LD_VAR 0 3
29839: PUSH
29840: LD_INT 20
29842: GREATER
29843: IFFALSE 29770
// end ;
29845: PPOPN 3
29847: END
// every 0 0$1 trigger StreamModeActive and sTime do
29848: LD_EXP 54
29852: IFFALSE 29860
29854: PUSH
29855: LD_EXP 105
29859: AND
29860: IFFALSE 29895
29862: GO 29864
29864: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29865: LD_INT 28
29867: PPUSH
29868: LD_OWVAR 2
29872: PPUSH
29873: LD_INT 2
29875: PPUSH
29876: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29880: LD_INT 30
29882: PPUSH
29883: LD_OWVAR 2
29887: PPUSH
29888: LD_INT 2
29890: PPUSH
29891: CALL_OW 322
// end ;
29895: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29896: LD_EXP 54
29900: IFFALSE 29908
29902: PUSH
29903: LD_EXP 106
29907: AND
29908: IFFALSE 30029
29910: GO 29912
29912: DISABLE
29913: LD_INT 0
29915: PPUSH
29916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29917: LD_ADDR_VAR 0 2
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_OWVAR 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: LD_INT 23
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: PPUSH
29966: CALL_OW 69
29970: ST_TO_ADDR
// if not tmp then
29971: LD_VAR 0 2
29975: NOT
29976: IFFALSE 29980
// exit ;
29978: GO 30029
// for i in tmp do
29980: LD_ADDR_VAR 0 1
29984: PUSH
29985: LD_VAR 0 2
29989: PUSH
29990: FOR_IN
29991: IFFALSE 30027
// begin if Crawls ( i ) then
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL_OW 318
30002: IFFALSE 30013
// ComWalk ( i ) ;
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 138
// SetClass ( i , 2 ) ;
30013: LD_VAR 0 1
30017: PPUSH
30018: LD_INT 2
30020: PPUSH
30021: CALL_OW 336
// end ;
30025: GO 29990
30027: POP
30028: POP
// end ;
30029: PPOPN 2
30031: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30032: LD_EXP 54
30036: IFFALSE 30044
30038: PUSH
30039: LD_EXP 107
30043: AND
30044: IFFALSE 30334
30046: GO 30048
30048: DISABLE
30049: LD_INT 0
30051: PPUSH
30052: PPUSH
30053: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30054: LD_OWVAR 2
30058: PPUSH
30059: LD_INT 9
30061: PPUSH
30062: LD_INT 1
30064: PPUSH
30065: LD_INT 1
30067: PPUSH
30068: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30072: LD_INT 9
30074: PPUSH
30075: LD_OWVAR 2
30079: PPUSH
30080: CALL_OW 343
// uc_side := 9 ;
30084: LD_ADDR_OWVAR 20
30088: PUSH
30089: LD_INT 9
30091: ST_TO_ADDR
// uc_nation := 2 ;
30092: LD_ADDR_OWVAR 21
30096: PUSH
30097: LD_INT 2
30099: ST_TO_ADDR
// hc_name := Dark Warrior ;
30100: LD_ADDR_OWVAR 26
30104: PUSH
30105: LD_STRING Dark Warrior
30107: ST_TO_ADDR
// hc_gallery :=  ;
30108: LD_ADDR_OWVAR 33
30112: PUSH
30113: LD_STRING 
30115: ST_TO_ADDR
// hc_noskilllimit := true ;
30116: LD_ADDR_OWVAR 76
30120: PUSH
30121: LD_INT 1
30123: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30124: LD_ADDR_OWVAR 31
30128: PUSH
30129: LD_INT 30
30131: PUSH
30132: LD_INT 30
30134: PUSH
30135: LD_INT 30
30137: PUSH
30138: LD_INT 30
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: ST_TO_ADDR
// un := CreateHuman ;
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: CALL_OW 44
30156: ST_TO_ADDR
// hc_noskilllimit := false ;
30157: LD_ADDR_OWVAR 76
30161: PUSH
30162: LD_INT 0
30164: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30165: LD_VAR 0 3
30169: PPUSH
30170: LD_INT 1
30172: PPUSH
30173: CALL_OW 51
// ToLua ( playRanger() ) ;
30177: LD_STRING playRanger()
30179: PPUSH
30180: CALL_OW 559
// p := 0 ;
30184: LD_ADDR_VAR 0 2
30188: PUSH
30189: LD_INT 0
30191: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30192: LD_INT 35
30194: PPUSH
30195: CALL_OW 67
// p := p + 1 ;
30199: LD_ADDR_VAR 0 2
30203: PUSH
30204: LD_VAR 0 2
30208: PUSH
30209: LD_INT 1
30211: PLUS
30212: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30213: LD_VAR 0 3
30217: PPUSH
30218: CALL_OW 256
30222: PUSH
30223: LD_INT 1000
30225: LESS
30226: IFFALSE 30240
// SetLives ( un , 1000 ) ;
30228: LD_VAR 0 3
30232: PPUSH
30233: LD_INT 1000
30235: PPUSH
30236: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30240: LD_VAR 0 3
30244: PPUSH
30245: LD_INT 81
30247: PUSH
30248: LD_OWVAR 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 91
30259: PUSH
30260: LD_VAR 0 3
30264: PUSH
30265: LD_INT 30
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PPUSH
30277: CALL_OW 69
30281: PPUSH
30282: LD_VAR 0 3
30286: PPUSH
30287: CALL_OW 74
30291: PPUSH
30292: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30296: LD_VAR 0 2
30300: PUSH
30301: LD_INT 80
30303: GREATER
30304: IFTRUE 30317
30306: PUSH
30307: LD_VAR 0 3
30311: PPUSH
30312: CALL_OW 301
30316: OR
30317: IFFALSE 30192
// if un then
30319: LD_VAR 0 3
30323: IFFALSE 30334
// RemoveUnit ( un ) ;
30325: LD_VAR 0 3
30329: PPUSH
30330: CALL_OW 64
// end ;
30334: PPOPN 3
30336: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30337: LD_EXP 108
30341: IFFALSE 30457
30343: GO 30345
30345: DISABLE
30346: LD_INT 0
30348: PPUSH
30349: PPUSH
30350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30351: LD_ADDR_VAR 0 2
30355: PUSH
30356: LD_INT 81
30358: PUSH
30359: LD_OWVAR 2
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 21
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PPUSH
30382: CALL_OW 69
30386: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30387: LD_STRING playComputer()
30389: PPUSH
30390: CALL_OW 559
// if not tmp then
30394: LD_VAR 0 2
30398: NOT
30399: IFFALSE 30403
// exit ;
30401: GO 30457
// for i in tmp do
30403: LD_ADDR_VAR 0 1
30407: PUSH
30408: LD_VAR 0 2
30412: PUSH
30413: FOR_IN
30414: IFFALSE 30455
// for j := 1 to 4 do
30416: LD_ADDR_VAR 0 3
30420: PUSH
30421: DOUBLE
30422: LD_INT 1
30424: DEC
30425: ST_TO_ADDR
30426: LD_INT 4
30428: PUSH
30429: FOR_TO
30430: IFFALSE 30451
// SetSkill ( i , j , 10 ) ;
30432: LD_VAR 0 1
30436: PPUSH
30437: LD_VAR 0 3
30441: PPUSH
30442: LD_INT 10
30444: PPUSH
30445: CALL_OW 237
30449: GO 30429
30451: POP
30452: POP
30453: GO 30413
30455: POP
30456: POP
// end ;
30457: PPOPN 3
30459: END
// every 0 0$1 trigger s30 do var i , tmp ;
30460: LD_EXP 109
30464: IFFALSE 30533
30466: GO 30468
30468: DISABLE
30469: LD_INT 0
30471: PPUSH
30472: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30473: LD_ADDR_VAR 0 2
30477: PUSH
30478: LD_INT 22
30480: PUSH
30481: LD_OWVAR 2
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PPUSH
30490: CALL_OW 69
30494: ST_TO_ADDR
// if not tmp then
30495: LD_VAR 0 2
30499: NOT
30500: IFFALSE 30504
// exit ;
30502: GO 30533
// for i in tmp do
30504: LD_ADDR_VAR 0 1
30508: PUSH
30509: LD_VAR 0 2
30513: PUSH
30514: FOR_IN
30515: IFFALSE 30531
// SetLives ( i , 300 ) ;
30517: LD_VAR 0 1
30521: PPUSH
30522: LD_INT 300
30524: PPUSH
30525: CALL_OW 234
30529: GO 30514
30531: POP
30532: POP
// end ;
30533: PPOPN 2
30535: END
// every 0 0$1 trigger s60 do var i , tmp ;
30536: LD_EXP 110
30540: IFFALSE 30609
30542: GO 30544
30544: DISABLE
30545: LD_INT 0
30547: PPUSH
30548: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30549: LD_ADDR_VAR 0 2
30553: PUSH
30554: LD_INT 22
30556: PUSH
30557: LD_OWVAR 2
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PPUSH
30566: CALL_OW 69
30570: ST_TO_ADDR
// if not tmp then
30571: LD_VAR 0 2
30575: NOT
30576: IFFALSE 30580
// exit ;
30578: GO 30609
// for i in tmp do
30580: LD_ADDR_VAR 0 1
30584: PUSH
30585: LD_VAR 0 2
30589: PUSH
30590: FOR_IN
30591: IFFALSE 30607
// SetLives ( i , 600 ) ;
30593: LD_VAR 0 1
30597: PPUSH
30598: LD_INT 600
30600: PPUSH
30601: CALL_OW 234
30605: GO 30590
30607: POP
30608: POP
// end ;
30609: PPOPN 2
30611: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30612: LD_INT 0
30614: PPUSH
// case cmd of 301 :
30615: LD_VAR 0 1
30619: PUSH
30620: LD_INT 301
30622: DOUBLE
30623: EQUAL
30624: IFTRUE 30628
30626: GO 30660
30628: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30629: LD_VAR 0 6
30633: PPUSH
30634: LD_VAR 0 7
30638: PPUSH
30639: LD_VAR 0 8
30643: PPUSH
30644: LD_VAR 0 4
30648: PPUSH
30649: LD_VAR 0 5
30653: PPUSH
30654: CALL 31873 0 5
30658: GO 30781
30660: LD_INT 302
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30705
30668: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30669: LD_VAR 0 6
30673: PPUSH
30674: LD_VAR 0 7
30678: PPUSH
30679: LD_VAR 0 8
30683: PPUSH
30684: LD_VAR 0 9
30688: PPUSH
30689: LD_VAR 0 4
30693: PPUSH
30694: LD_VAR 0 5
30698: PPUSH
30699: CALL 31964 0 6
30703: GO 30781
30705: LD_INT 303
30707: DOUBLE
30708: EQUAL
30709: IFTRUE 30713
30711: GO 30750
30713: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30714: LD_VAR 0 6
30718: PPUSH
30719: LD_VAR 0 7
30723: PPUSH
30724: LD_VAR 0 8
30728: PPUSH
30729: LD_VAR 0 9
30733: PPUSH
30734: LD_VAR 0 4
30738: PPUSH
30739: LD_VAR 0 5
30743: PPUSH
30744: CALL 30786 0 6
30748: GO 30781
30750: LD_INT 304
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30780
30758: POP
// hHackTeleport ( unit , x , y ) ; end ;
30759: LD_VAR 0 2
30763: PPUSH
30764: LD_VAR 0 4
30768: PPUSH
30769: LD_VAR 0 5
30773: PPUSH
30774: CALL 32557 0 3
30778: GO 30781
30780: POP
// end ;
30781: LD_VAR 0 12
30785: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30786: LD_INT 0
30788: PPUSH
30789: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30790: LD_VAR 0 1
30794: PUSH
30795: LD_INT 1
30797: LESS
30798: IFTRUE 30810
30800: PUSH
30801: LD_VAR 0 1
30805: PUSH
30806: LD_INT 3
30808: GREATER
30809: OR
30810: IFTRUE 30828
30812: PUSH
30813: LD_VAR 0 5
30817: PPUSH
30818: LD_VAR 0 6
30822: PPUSH
30823: CALL_OW 428
30827: OR
30828: IFFALSE 30832
// exit ;
30830: GO 31560
// uc_side := your_side ;
30832: LD_ADDR_OWVAR 20
30836: PUSH
30837: LD_OWVAR 2
30841: ST_TO_ADDR
// uc_nation := nation ;
30842: LD_ADDR_OWVAR 21
30846: PUSH
30847: LD_VAR 0 1
30851: ST_TO_ADDR
// bc_level = 1 ;
30852: LD_ADDR_OWVAR 43
30856: PUSH
30857: LD_INT 1
30859: ST_TO_ADDR
// case btype of 1 :
30860: LD_VAR 0 2
30864: PUSH
30865: LD_INT 1
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 30884
30873: POP
// bc_type := b_depot ; 2 :
30874: LD_ADDR_OWVAR 42
30878: PUSH
30879: LD_INT 0
30881: ST_TO_ADDR
30882: GO 31504
30884: LD_INT 2
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30903
30892: POP
// bc_type := b_warehouse ; 3 :
30893: LD_ADDR_OWVAR 42
30897: PUSH
30898: LD_INT 1
30900: ST_TO_ADDR
30901: GO 31504
30903: LD_INT 3
30905: DOUBLE
30906: EQUAL
30907: IFTRUE 30911
30909: GO 30922
30911: POP
// bc_type := b_lab ; 4 .. 9 :
30912: LD_ADDR_OWVAR 42
30916: PUSH
30917: LD_INT 6
30919: ST_TO_ADDR
30920: GO 31504
30922: LD_INT 4
30924: DOUBLE
30925: GREATEREQUAL
30926: IFFALSE 30934
30928: LD_INT 9
30930: DOUBLE
30931: LESSEQUAL
30932: IFTRUE 30936
30934: GO 30996
30936: POP
// begin bc_type := b_lab_half ;
30937: LD_ADDR_OWVAR 42
30941: PUSH
30942: LD_INT 7
30944: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30945: LD_ADDR_OWVAR 44
30949: PUSH
30950: LD_INT 10
30952: PUSH
30953: LD_INT 11
30955: PUSH
30956: LD_INT 12
30958: PUSH
30959: LD_INT 15
30961: PUSH
30962: LD_INT 14
30964: PUSH
30965: LD_INT 13
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: PUSH
30976: LD_VAR 0 2
30980: PUSH
30981: LD_INT 3
30983: MINUS
30984: ARRAY
30985: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30986: LD_ADDR_OWVAR 45
30990: PUSH
30991: LD_INT 9
30993: ST_TO_ADDR
// end ; 10 .. 13 :
30994: GO 31504
30996: LD_INT 10
30998: DOUBLE
30999: GREATEREQUAL
31000: IFFALSE 31008
31002: LD_INT 13
31004: DOUBLE
31005: LESSEQUAL
31006: IFTRUE 31010
31008: GO 31087
31010: POP
// begin bc_type := b_lab_full ;
31011: LD_ADDR_OWVAR 42
31015: PUSH
31016: LD_INT 8
31018: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31019: LD_ADDR_OWVAR 44
31023: PUSH
31024: LD_INT 10
31026: PUSH
31027: LD_INT 12
31029: PUSH
31030: LD_INT 14
31032: PUSH
31033: LD_INT 13
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: PUSH
31042: LD_VAR 0 2
31046: PUSH
31047: LD_INT 9
31049: MINUS
31050: ARRAY
31051: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31052: LD_ADDR_OWVAR 45
31056: PUSH
31057: LD_INT 11
31059: PUSH
31060: LD_INT 15
31062: PUSH
31063: LD_INT 12
31065: PUSH
31066: LD_INT 15
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: PUSH
31075: LD_VAR 0 2
31079: PUSH
31080: LD_INT 9
31082: MINUS
31083: ARRAY
31084: ST_TO_ADDR
// end ; 14 :
31085: GO 31504
31087: LD_INT 14
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31106
31095: POP
// bc_type := b_workshop ; 15 :
31096: LD_ADDR_OWVAR 42
31100: PUSH
31101: LD_INT 2
31103: ST_TO_ADDR
31104: GO 31504
31106: LD_INT 15
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31125
31114: POP
// bc_type := b_factory ; 16 :
31115: LD_ADDR_OWVAR 42
31119: PUSH
31120: LD_INT 3
31122: ST_TO_ADDR
31123: GO 31504
31125: LD_INT 16
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31144
31133: POP
// bc_type := b_ext_gun ; 17 :
31134: LD_ADDR_OWVAR 42
31138: PUSH
31139: LD_INT 17
31141: ST_TO_ADDR
31142: GO 31504
31144: LD_INT 17
31146: DOUBLE
31147: EQUAL
31148: IFTRUE 31152
31150: GO 31180
31152: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31153: LD_ADDR_OWVAR 42
31157: PUSH
31158: LD_INT 19
31160: PUSH
31161: LD_INT 23
31163: PUSH
31164: LD_INT 19
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: PUSH
31172: LD_VAR 0 1
31176: ARRAY
31177: ST_TO_ADDR
31178: GO 31504
31180: LD_INT 18
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31199
31188: POP
// bc_type := b_ext_radar ; 19 :
31189: LD_ADDR_OWVAR 42
31193: PUSH
31194: LD_INT 20
31196: ST_TO_ADDR
31197: GO 31504
31199: LD_INT 19
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31218
31207: POP
// bc_type := b_ext_radio ; 20 :
31208: LD_ADDR_OWVAR 42
31212: PUSH
31213: LD_INT 22
31215: ST_TO_ADDR
31216: GO 31504
31218: LD_INT 20
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31237
31226: POP
// bc_type := b_ext_siberium ; 21 :
31227: LD_ADDR_OWVAR 42
31231: PUSH
31232: LD_INT 21
31234: ST_TO_ADDR
31235: GO 31504
31237: LD_INT 21
31239: DOUBLE
31240: EQUAL
31241: IFTRUE 31245
31243: GO 31256
31245: POP
// bc_type := b_ext_computer ; 22 :
31246: LD_ADDR_OWVAR 42
31250: PUSH
31251: LD_INT 24
31253: ST_TO_ADDR
31254: GO 31504
31256: LD_INT 22
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31275
31264: POP
// bc_type := b_ext_track ; 23 :
31265: LD_ADDR_OWVAR 42
31269: PUSH
31270: LD_INT 16
31272: ST_TO_ADDR
31273: GO 31504
31275: LD_INT 23
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31294
31283: POP
// bc_type := b_ext_laser ; 24 :
31284: LD_ADDR_OWVAR 42
31288: PUSH
31289: LD_INT 25
31291: ST_TO_ADDR
31292: GO 31504
31294: LD_INT 24
31296: DOUBLE
31297: EQUAL
31298: IFTRUE 31302
31300: GO 31313
31302: POP
// bc_type := b_control_tower ; 25 :
31303: LD_ADDR_OWVAR 42
31307: PUSH
31308: LD_INT 36
31310: ST_TO_ADDR
31311: GO 31504
31313: LD_INT 25
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31332
31321: POP
// bc_type := b_breastwork ; 26 :
31322: LD_ADDR_OWVAR 42
31326: PUSH
31327: LD_INT 31
31329: ST_TO_ADDR
31330: GO 31504
31332: LD_INT 26
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31340
31338: GO 31351
31340: POP
// bc_type := b_bunker ; 27 :
31341: LD_ADDR_OWVAR 42
31345: PUSH
31346: LD_INT 32
31348: ST_TO_ADDR
31349: GO 31504
31351: LD_INT 27
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31370
31359: POP
// bc_type := b_turret ; 28 :
31360: LD_ADDR_OWVAR 42
31364: PUSH
31365: LD_INT 33
31367: ST_TO_ADDR
31368: GO 31504
31370: LD_INT 28
31372: DOUBLE
31373: EQUAL
31374: IFTRUE 31378
31376: GO 31389
31378: POP
// bc_type := b_armoury ; 29 :
31379: LD_ADDR_OWVAR 42
31383: PUSH
31384: LD_INT 4
31386: ST_TO_ADDR
31387: GO 31504
31389: LD_INT 29
31391: DOUBLE
31392: EQUAL
31393: IFTRUE 31397
31395: GO 31408
31397: POP
// bc_type := b_barracks ; 30 :
31398: LD_ADDR_OWVAR 42
31402: PUSH
31403: LD_INT 5
31405: ST_TO_ADDR
31406: GO 31504
31408: LD_INT 30
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31427
31416: POP
// bc_type := b_solar_power ; 31 :
31417: LD_ADDR_OWVAR 42
31421: PUSH
31422: LD_INT 27
31424: ST_TO_ADDR
31425: GO 31504
31427: LD_INT 31
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31446
31435: POP
// bc_type := b_oil_power ; 32 :
31436: LD_ADDR_OWVAR 42
31440: PUSH
31441: LD_INT 26
31443: ST_TO_ADDR
31444: GO 31504
31446: LD_INT 32
31448: DOUBLE
31449: EQUAL
31450: IFTRUE 31454
31452: GO 31465
31454: POP
// bc_type := b_siberite_power ; 33 :
31455: LD_ADDR_OWVAR 42
31459: PUSH
31460: LD_INT 28
31462: ST_TO_ADDR
31463: GO 31504
31465: LD_INT 33
31467: DOUBLE
31468: EQUAL
31469: IFTRUE 31473
31471: GO 31484
31473: POP
// bc_type := b_oil_mine ; 34 :
31474: LD_ADDR_OWVAR 42
31478: PUSH
31479: LD_INT 29
31481: ST_TO_ADDR
31482: GO 31504
31484: LD_INT 34
31486: DOUBLE
31487: EQUAL
31488: IFTRUE 31492
31490: GO 31503
31492: POP
// bc_type := b_siberite_mine ; end ;
31493: LD_ADDR_OWVAR 42
31497: PUSH
31498: LD_INT 30
31500: ST_TO_ADDR
31501: GO 31504
31503: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31504: LD_ADDR_VAR 0 8
31508: PUSH
31509: LD_VAR 0 5
31513: PPUSH
31514: LD_VAR 0 6
31518: PPUSH
31519: LD_VAR 0 3
31523: PPUSH
31524: CALL_OW 47
31528: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31529: LD_OWVAR 42
31533: PUSH
31534: LD_INT 32
31536: PUSH
31537: LD_INT 33
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: IN
31544: IFFALSE 31560
// PlaceWeaponTurret ( b , weapon ) ;
31546: LD_VAR 0 8
31550: PPUSH
31551: LD_VAR 0 4
31555: PPUSH
31556: CALL_OW 431
// end ;
31560: LD_VAR 0 7
31564: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31565: LD_INT 0
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31571: LD_ADDR_VAR 0 4
31575: PUSH
31576: LD_INT 22
31578: PUSH
31579: LD_OWVAR 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: LD_INT 30
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PPUSH
31620: CALL_OW 69
31624: ST_TO_ADDR
// if not tmp then
31625: LD_VAR 0 4
31629: NOT
31630: IFFALSE 31634
// exit ;
31632: GO 31693
// for i in tmp do
31634: LD_ADDR_VAR 0 2
31638: PUSH
31639: LD_VAR 0 4
31643: PUSH
31644: FOR_IN
31645: IFFALSE 31691
// for j = 1 to 3 do
31647: LD_ADDR_VAR 0 3
31651: PUSH
31652: DOUBLE
31653: LD_INT 1
31655: DEC
31656: ST_TO_ADDR
31657: LD_INT 3
31659: PUSH
31660: FOR_TO
31661: IFFALSE 31687
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31663: LD_VAR 0 2
31667: PPUSH
31668: CALL_OW 274
31672: PPUSH
31673: LD_VAR 0 3
31677: PPUSH
31678: LD_INT 99999
31680: PPUSH
31681: CALL_OW 277
31685: GO 31660
31687: POP
31688: POP
31689: GO 31644
31691: POP
31692: POP
// end ;
31693: LD_VAR 0 1
31697: RET
// export function hHackSetLevel10 ; var i , j ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31703: LD_ADDR_VAR 0 2
31707: PUSH
31708: LD_INT 21
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PPUSH
31718: CALL_OW 69
31722: PUSH
31723: FOR_IN
31724: IFFALSE 31776
// if IsSelected ( i ) then
31726: LD_VAR 0 2
31730: PPUSH
31731: CALL_OW 306
31735: IFFALSE 31774
// begin for j := 1 to 4 do
31737: LD_ADDR_VAR 0 3
31741: PUSH
31742: DOUBLE
31743: LD_INT 1
31745: DEC
31746: ST_TO_ADDR
31747: LD_INT 4
31749: PUSH
31750: FOR_TO
31751: IFFALSE 31772
// SetSkill ( i , j , 10 ) ;
31753: LD_VAR 0 2
31757: PPUSH
31758: LD_VAR 0 3
31762: PPUSH
31763: LD_INT 10
31765: PPUSH
31766: CALL_OW 237
31770: GO 31750
31772: POP
31773: POP
// end ;
31774: GO 31723
31776: POP
31777: POP
// end ;
31778: LD_VAR 0 1
31782: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31783: LD_INT 0
31785: PPUSH
31786: PPUSH
31787: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31788: LD_ADDR_VAR 0 2
31792: PUSH
31793: LD_INT 22
31795: PUSH
31796: LD_OWVAR 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 21
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PPUSH
31819: CALL_OW 69
31823: PUSH
31824: FOR_IN
31825: IFFALSE 31866
// begin for j := 1 to 4 do
31827: LD_ADDR_VAR 0 3
31831: PUSH
31832: DOUBLE
31833: LD_INT 1
31835: DEC
31836: ST_TO_ADDR
31837: LD_INT 4
31839: PUSH
31840: FOR_TO
31841: IFFALSE 31862
// SetSkill ( i , j , 10 ) ;
31843: LD_VAR 0 2
31847: PPUSH
31848: LD_VAR 0 3
31852: PPUSH
31853: LD_INT 10
31855: PPUSH
31856: CALL_OW 237
31860: GO 31840
31862: POP
31863: POP
// end ;
31864: GO 31824
31866: POP
31867: POP
// end ;
31868: LD_VAR 0 1
31872: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31873: LD_INT 0
31875: PPUSH
// uc_side := your_side ;
31876: LD_ADDR_OWVAR 20
31880: PUSH
31881: LD_OWVAR 2
31885: ST_TO_ADDR
// uc_nation := nation ;
31886: LD_ADDR_OWVAR 21
31890: PUSH
31891: LD_VAR 0 1
31895: ST_TO_ADDR
// InitHc ;
31896: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31900: LD_INT 0
31902: PPUSH
31903: LD_VAR 0 2
31907: PPUSH
31908: LD_VAR 0 3
31912: PPUSH
31913: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31917: LD_VAR 0 4
31921: PPUSH
31922: LD_VAR 0 5
31926: PPUSH
31927: CALL_OW 428
31931: PUSH
31932: LD_INT 0
31934: EQUAL
31935: IFFALSE 31959
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31937: CALL_OW 44
31941: PPUSH
31942: LD_VAR 0 4
31946: PPUSH
31947: LD_VAR 0 5
31951: PPUSH
31952: LD_INT 1
31954: PPUSH
31955: CALL_OW 48
// end ;
31959: LD_VAR 0 6
31963: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31964: LD_INT 0
31966: PPUSH
31967: PPUSH
// uc_side := your_side ;
31968: LD_ADDR_OWVAR 20
31972: PUSH
31973: LD_OWVAR 2
31977: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31978: LD_VAR 0 1
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: IN
32005: IFFALSE 32017
// uc_nation := nation_american else
32007: LD_ADDR_OWVAR 21
32011: PUSH
32012: LD_INT 1
32014: ST_TO_ADDR
32015: GO 32060
// if chassis in [ 11 , 12 , 13 , 14 ] then
32017: LD_VAR 0 1
32021: PUSH
32022: LD_INT 11
32024: PUSH
32025: LD_INT 12
32027: PUSH
32028: LD_INT 13
32030: PUSH
32031: LD_INT 14
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: IN
32040: IFFALSE 32052
// uc_nation := nation_arabian else
32042: LD_ADDR_OWVAR 21
32046: PUSH
32047: LD_INT 2
32049: ST_TO_ADDR
32050: GO 32060
// uc_nation := nation_russian ;
32052: LD_ADDR_OWVAR 21
32056: PUSH
32057: LD_INT 3
32059: ST_TO_ADDR
// vc_chassis := chassis ;
32060: LD_ADDR_OWVAR 37
32064: PUSH
32065: LD_VAR 0 1
32069: ST_TO_ADDR
// vc_engine := engine ;
32070: LD_ADDR_OWVAR 39
32074: PUSH
32075: LD_VAR 0 2
32079: ST_TO_ADDR
// vc_control := control ;
32080: LD_ADDR_OWVAR 38
32084: PUSH
32085: LD_VAR 0 3
32089: ST_TO_ADDR
// vc_weapon := weapon ;
32090: LD_ADDR_OWVAR 40
32094: PUSH
32095: LD_VAR 0 4
32099: ST_TO_ADDR
// un := CreateVehicle ;
32100: LD_ADDR_VAR 0 8
32104: PUSH
32105: CALL_OW 45
32109: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32110: LD_VAR 0 8
32114: PPUSH
32115: LD_INT 0
32117: PPUSH
32118: LD_INT 5
32120: PPUSH
32121: CALL_OW 12
32125: PPUSH
32126: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32130: LD_VAR 0 8
32134: PPUSH
32135: LD_VAR 0 5
32139: PPUSH
32140: LD_VAR 0 6
32144: PPUSH
32145: LD_INT 1
32147: PPUSH
32148: CALL_OW 48
// end ;
32152: LD_VAR 0 7
32156: RET
// export hInvincible ; every 1 do
32157: GO 32159
32159: DISABLE
// hInvincible := [ ] ;
32160: LD_ADDR_EXP 111
32164: PUSH
32165: EMPTY
32166: ST_TO_ADDR
32167: END
// every 10 do var i ;
32168: GO 32170
32170: DISABLE
32171: LD_INT 0
32173: PPUSH
// begin enable ;
32174: ENABLE
// if not hInvincible then
32175: LD_EXP 111
32179: NOT
32180: IFFALSE 32184
// exit ;
32182: GO 32228
// for i in hInvincible do
32184: LD_ADDR_VAR 0 1
32188: PUSH
32189: LD_EXP 111
32193: PUSH
32194: FOR_IN
32195: IFFALSE 32226
// if GetLives ( i ) < 1000 then
32197: LD_VAR 0 1
32201: PPUSH
32202: CALL_OW 256
32206: PUSH
32207: LD_INT 1000
32209: LESS
32210: IFFALSE 32224
// SetLives ( i , 1000 ) ;
32212: LD_VAR 0 1
32216: PPUSH
32217: LD_INT 1000
32219: PPUSH
32220: CALL_OW 234
32224: GO 32194
32226: POP
32227: POP
// end ;
32228: PPOPN 1
32230: END
// export function hHackInvincible ; var i ; begin
32231: LD_INT 0
32233: PPUSH
32234: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32235: LD_ADDR_VAR 0 2
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 21
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 21
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: PPUSH
32268: CALL_OW 69
32272: PUSH
32273: FOR_IN
32274: IFFALSE 32335
// if IsSelected ( i ) then
32276: LD_VAR 0 2
32280: PPUSH
32281: CALL_OW 306
32285: IFFALSE 32333
// begin if i in hInvincible then
32287: LD_VAR 0 2
32291: PUSH
32292: LD_EXP 111
32296: IN
32297: IFFALSE 32317
// hInvincible := hInvincible diff i else
32299: LD_ADDR_EXP 111
32303: PUSH
32304: LD_EXP 111
32308: PUSH
32309: LD_VAR 0 2
32313: DIFF
32314: ST_TO_ADDR
32315: GO 32333
// hInvincible := hInvincible union i ;
32317: LD_ADDR_EXP 111
32321: PUSH
32322: LD_EXP 111
32326: PUSH
32327: LD_VAR 0 2
32331: UNION
32332: ST_TO_ADDR
// end ;
32333: GO 32273
32335: POP
32336: POP
// end ;
32337: LD_VAR 0 1
32341: RET
// export function hHackInvisible ; var i , j ; begin
32342: LD_INT 0
32344: PPUSH
32345: PPUSH
32346: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32347: LD_ADDR_VAR 0 2
32351: PUSH
32352: LD_INT 21
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PPUSH
32362: CALL_OW 69
32366: PUSH
32367: FOR_IN
32368: IFFALSE 32392
// if IsSelected ( i ) then
32370: LD_VAR 0 2
32374: PPUSH
32375: CALL_OW 306
32379: IFFALSE 32390
// ComForceInvisible ( i ) ;
32381: LD_VAR 0 2
32385: PPUSH
32386: CALL_OW 496
32390: GO 32367
32392: POP
32393: POP
// end ;
32394: LD_VAR 0 1
32398: RET
// export function hHackChangeYourSide ; begin
32399: LD_INT 0
32401: PPUSH
// if your_side = 8 then
32402: LD_OWVAR 2
32406: PUSH
32407: LD_INT 8
32409: EQUAL
32410: IFFALSE 32422
// your_side := 0 else
32412: LD_ADDR_OWVAR 2
32416: PUSH
32417: LD_INT 0
32419: ST_TO_ADDR
32420: GO 32436
// your_side := your_side + 1 ;
32422: LD_ADDR_OWVAR 2
32426: PUSH
32427: LD_OWVAR 2
32431: PUSH
32432: LD_INT 1
32434: PLUS
32435: ST_TO_ADDR
// end ;
32436: LD_VAR 0 1
32440: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32441: LD_INT 0
32443: PPUSH
32444: PPUSH
32445: PPUSH
// for i in all_units do
32446: LD_ADDR_VAR 0 2
32450: PUSH
32451: LD_OWVAR 3
32455: PUSH
32456: FOR_IN
32457: IFFALSE 32535
// if IsSelected ( i ) then
32459: LD_VAR 0 2
32463: PPUSH
32464: CALL_OW 306
32468: IFFALSE 32533
// begin j := GetSide ( i ) ;
32470: LD_ADDR_VAR 0 3
32474: PUSH
32475: LD_VAR 0 2
32479: PPUSH
32480: CALL_OW 255
32484: ST_TO_ADDR
// if j = 8 then
32485: LD_VAR 0 3
32489: PUSH
32490: LD_INT 8
32492: EQUAL
32493: IFFALSE 32505
// j := 0 else
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_INT 0
32502: ST_TO_ADDR
32503: GO 32519
// j := j + 1 ;
32505: LD_ADDR_VAR 0 3
32509: PUSH
32510: LD_VAR 0 3
32514: PUSH
32515: LD_INT 1
32517: PLUS
32518: ST_TO_ADDR
// SetSide ( i , j ) ;
32519: LD_VAR 0 2
32523: PPUSH
32524: LD_VAR 0 3
32528: PPUSH
32529: CALL_OW 235
// end ;
32533: GO 32456
32535: POP
32536: POP
// end ;
32537: LD_VAR 0 1
32541: RET
// export function hHackFog ; begin
32542: LD_INT 0
32544: PPUSH
// FogOff ( true ) ;
32545: LD_INT 1
32547: PPUSH
32548: CALL_OW 344
// end ;
32552: LD_VAR 0 1
32556: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32557: LD_INT 0
32559: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32560: LD_VAR 0 1
32564: PPUSH
32565: LD_VAR 0 2
32569: PPUSH
32570: LD_VAR 0 3
32574: PPUSH
32575: LD_INT 1
32577: PPUSH
32578: LD_INT 1
32580: PPUSH
32581: CALL_OW 483
// CenterOnXY ( x , y ) ;
32585: LD_VAR 0 2
32589: PPUSH
32590: LD_VAR 0 3
32594: PPUSH
32595: CALL_OW 84
// end ;
32599: LD_VAR 0 4
32603: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32604: LD_INT 0
32606: PPUSH
32607: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32608: LD_VAR 0 1
32612: NOT
32613: IFTRUE 32632
32615: PUSH
32616: LD_VAR 0 2
32620: PPUSH
32621: LD_VAR 0 3
32625: PPUSH
32626: CALL_OW 488
32630: NOT
32631: OR
32632: IFTRUE 32667
32634: PUSH
32635: LD_VAR 0 1
32639: PPUSH
32640: CALL_OW 266
32644: PUSH
32645: LD_INT 3
32647: NONEQUAL
32648: IFFALSE 32666
32650: PUSH
32651: LD_VAR 0 1
32655: PPUSH
32656: CALL_OW 247
32660: PUSH
32661: LD_INT 1
32663: EQUAL
32664: NOT
32665: AND
32666: OR
32667: IFFALSE 32671
// exit ;
32669: GO 32953
// if GetType ( factory ) = unit_human then
32671: LD_VAR 0 1
32675: PPUSH
32676: CALL_OW 247
32680: PUSH
32681: LD_INT 1
32683: EQUAL
32684: IFFALSE 32701
// factory := IsInUnit ( factory ) ;
32686: LD_ADDR_VAR 0 1
32690: PUSH
32691: LD_VAR 0 1
32695: PPUSH
32696: CALL_OW 310
32700: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32701: LD_VAR 0 1
32705: PPUSH
32706: CALL_OW 266
32710: PUSH
32711: LD_INT 3
32713: NONEQUAL
32714: IFFALSE 32718
// exit ;
32716: GO 32953
// for i := 1 to Count ( factoryWaypoints ) do
32718: LD_ADDR_VAR 0 5
32722: PUSH
32723: DOUBLE
32724: LD_INT 1
32726: DEC
32727: ST_TO_ADDR
32728: LD_EXP 112
32732: PPUSH
32733: CALL 41848 0 1
32737: PUSH
32738: FOR_TO
32739: IFFALSE 32901
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 3
32750: PPUSH
32751: CALL_OW 428
32755: PUSH
32756: LD_EXP 112
32760: PUSH
32761: LD_VAR 0 5
32765: ARRAY
32766: PUSH
32767: LD_INT 2
32769: ARRAY
32770: EQUAL
32771: IFFALSE 32803
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32773: LD_ADDR_EXP 112
32777: PUSH
32778: LD_EXP 112
32782: PPUSH
32783: LD_VAR 0 5
32787: PPUSH
32788: CALL_OW 3
32792: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32793: CALL 32958 0 0
// exit ;
32797: POP
32798: POP
32799: GO 32953
// end else
32801: GO 32899
// if factory = factoryWaypoints [ i ] [ 2 ] then
32803: LD_VAR 0 1
32807: PUSH
32808: LD_EXP 112
32812: PUSH
32813: LD_VAR 0 5
32817: ARRAY
32818: PUSH
32819: LD_INT 2
32821: ARRAY
32822: EQUAL
32823: IFFALSE 32899
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32825: LD_ADDR_EXP 112
32829: PUSH
32830: LD_EXP 112
32834: PPUSH
32835: LD_VAR 0 5
32839: PPUSH
32840: CALL_OW 3
32844: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32845: LD_ADDR_EXP 112
32849: PUSH
32850: LD_EXP 112
32854: PPUSH
32855: LD_VAR 0 1
32859: PPUSH
32860: CALL_OW 255
32864: PUSH
32865: LD_VAR 0 1
32869: PUSH
32870: LD_VAR 0 2
32874: PUSH
32875: LD_VAR 0 3
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: PPUSH
32886: CALL 77780 0 2
32890: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32891: CALL 32958 0 0
// exit ;
32895: POP
32896: POP
32897: GO 32953
// end ; end ;
32899: GO 32738
32901: POP
32902: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32903: LD_ADDR_EXP 112
32907: PUSH
32908: LD_EXP 112
32912: PPUSH
32913: LD_VAR 0 1
32917: PPUSH
32918: CALL_OW 255
32922: PUSH
32923: LD_VAR 0 1
32927: PUSH
32928: LD_VAR 0 2
32932: PUSH
32933: LD_VAR 0 3
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: PPUSH
32944: CALL 77780 0 2
32948: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32949: CALL 32958 0 0
// end ;
32953: LD_VAR 0 4
32957: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32958: LD_INT 0
32960: PPUSH
32961: PPUSH
32962: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32963: LD_STRING resetFactoryWaypoint();
32965: PPUSH
32966: CALL_OW 559
// if factoryWaypoints then
32970: LD_EXP 112
32974: IFFALSE 33095
// begin list := factoryWaypoints ;
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_EXP 112
32985: ST_TO_ADDR
// for i := 1 to list do
32986: LD_ADDR_VAR 0 2
32990: PUSH
32991: DOUBLE
32992: LD_INT 1
32994: DEC
32995: ST_TO_ADDR
32996: LD_VAR 0 3
33000: PUSH
33001: FOR_TO
33002: IFFALSE 33093
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33004: LD_STRING setFactoryWaypointXY(
33006: PUSH
33007: LD_VAR 0 3
33011: PUSH
33012: LD_VAR 0 2
33016: ARRAY
33017: PUSH
33018: LD_INT 1
33020: ARRAY
33021: STR
33022: PUSH
33023: LD_STRING ,
33025: STR
33026: PUSH
33027: LD_VAR 0 3
33031: PUSH
33032: LD_VAR 0 2
33036: ARRAY
33037: PUSH
33038: LD_INT 2
33040: ARRAY
33041: STR
33042: PUSH
33043: LD_STRING ,
33045: STR
33046: PUSH
33047: LD_VAR 0 3
33051: PUSH
33052: LD_VAR 0 2
33056: ARRAY
33057: PUSH
33058: LD_INT 3
33060: ARRAY
33061: STR
33062: PUSH
33063: LD_STRING ,
33065: STR
33066: PUSH
33067: LD_VAR 0 3
33071: PUSH
33072: LD_VAR 0 2
33076: ARRAY
33077: PUSH
33078: LD_INT 4
33080: ARRAY
33081: STR
33082: PUSH
33083: LD_STRING )
33085: STR
33086: PPUSH
33087: CALL_OW 559
33091: GO 33001
33093: POP
33094: POP
// end ; end ;
33095: LD_VAR 0 1
33099: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33100: LD_INT 0
33102: PPUSH
// if HexInfo ( x , y ) = warehouse then
33103: LD_VAR 0 2
33107: PPUSH
33108: LD_VAR 0 3
33112: PPUSH
33113: CALL_OW 428
33117: PUSH
33118: LD_VAR 0 1
33122: EQUAL
33123: IFFALSE 33150
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33125: LD_ADDR_EXP 114
33129: PUSH
33130: LD_EXP 114
33134: PPUSH
33135: LD_VAR 0 1
33139: PPUSH
33140: LD_INT 0
33142: PPUSH
33143: CALL_OW 1
33147: ST_TO_ADDR
33148: GO 33201
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33150: LD_ADDR_EXP 114
33154: PUSH
33155: LD_EXP 114
33159: PPUSH
33160: LD_VAR 0 1
33164: PPUSH
33165: LD_VAR 0 1
33169: PPUSH
33170: CALL_OW 255
33174: PUSH
33175: LD_VAR 0 1
33179: PUSH
33180: LD_VAR 0 2
33184: PUSH
33185: LD_VAR 0 3
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: PPUSH
33196: CALL_OW 1
33200: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33201: CALL 33210 0 0
// end ;
33205: LD_VAR 0 4
33209: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33210: LD_INT 0
33212: PPUSH
33213: PPUSH
33214: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33215: LD_STRING resetWarehouseGatheringPoints();
33217: PPUSH
33218: CALL_OW 559
// if warehouseGatheringPoints then
33222: LD_EXP 114
33226: IFFALSE 33352
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_EXP 114
33237: PPUSH
33238: CALL 81714 0 1
33242: ST_TO_ADDR
// for i := 1 to list do
33243: LD_ADDR_VAR 0 2
33247: PUSH
33248: DOUBLE
33249: LD_INT 1
33251: DEC
33252: ST_TO_ADDR
33253: LD_VAR 0 3
33257: PUSH
33258: FOR_TO
33259: IFFALSE 33350
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33261: LD_STRING setWarehouseGatheringPointXY(
33263: PUSH
33264: LD_VAR 0 3
33268: PUSH
33269: LD_VAR 0 2
33273: ARRAY
33274: PUSH
33275: LD_INT 1
33277: ARRAY
33278: STR
33279: PUSH
33280: LD_STRING ,
33282: STR
33283: PUSH
33284: LD_VAR 0 3
33288: PUSH
33289: LD_VAR 0 2
33293: ARRAY
33294: PUSH
33295: LD_INT 2
33297: ARRAY
33298: STR
33299: PUSH
33300: LD_STRING ,
33302: STR
33303: PUSH
33304: LD_VAR 0 3
33308: PUSH
33309: LD_VAR 0 2
33313: ARRAY
33314: PUSH
33315: LD_INT 3
33317: ARRAY
33318: STR
33319: PUSH
33320: LD_STRING ,
33322: STR
33323: PUSH
33324: LD_VAR 0 3
33328: PUSH
33329: LD_VAR 0 2
33333: ARRAY
33334: PUSH
33335: LD_INT 4
33337: ARRAY
33338: STR
33339: PUSH
33340: LD_STRING )
33342: STR
33343: PPUSH
33344: CALL_OW 559
33348: GO 33258
33350: POP
33351: POP
// end ; end ;
33352: LD_VAR 0 1
33356: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33357: LD_EXP 114
33361: IFFALSE 34056
33363: GO 33365
33365: DISABLE
33366: LD_INT 0
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
// begin enable ;
33377: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_EXP 114
33387: PPUSH
33388: CALL 81714 0 1
33392: ST_TO_ADDR
// if not list then
33393: LD_VAR 0 3
33397: NOT
33398: IFFALSE 33402
// exit ;
33400: GO 34056
// for i := 1 to list do
33402: LD_ADDR_VAR 0 1
33406: PUSH
33407: DOUBLE
33408: LD_INT 1
33410: DEC
33411: ST_TO_ADDR
33412: LD_VAR 0 3
33416: PUSH
33417: FOR_TO
33418: IFFALSE 34054
// begin depot := list [ i ] [ 2 ] ;
33420: LD_ADDR_VAR 0 8
33424: PUSH
33425: LD_VAR 0 3
33429: PUSH
33430: LD_VAR 0 1
33434: ARRAY
33435: PUSH
33436: LD_INT 2
33438: ARRAY
33439: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33440: LD_ADDR_VAR 0 5
33444: PUSH
33445: LD_VAR 0 3
33449: PUSH
33450: LD_VAR 0 1
33454: ARRAY
33455: PUSH
33456: LD_INT 1
33458: ARRAY
33459: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33460: LD_VAR 0 8
33464: PPUSH
33465: CALL_OW 301
33469: IFTRUE 33488
33471: PUSH
33472: LD_VAR 0 5
33476: PUSH
33477: LD_VAR 0 8
33481: PPUSH
33482: CALL_OW 255
33486: NONEQUAL
33487: OR
33488: IFFALSE 33517
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33490: LD_ADDR_EXP 114
33494: PUSH
33495: LD_EXP 114
33499: PPUSH
33500: LD_VAR 0 8
33504: PPUSH
33505: LD_INT 0
33507: PPUSH
33508: CALL_OW 1
33512: ST_TO_ADDR
// exit ;
33513: POP
33514: POP
33515: GO 34056
// end ; x := list [ i ] [ 3 ] ;
33517: LD_ADDR_VAR 0 6
33521: PUSH
33522: LD_VAR 0 3
33526: PUSH
33527: LD_VAR 0 1
33531: ARRAY
33532: PUSH
33533: LD_INT 3
33535: ARRAY
33536: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33537: LD_ADDR_VAR 0 7
33541: PUSH
33542: LD_VAR 0 3
33546: PUSH
33547: LD_VAR 0 1
33551: ARRAY
33552: PUSH
33553: LD_INT 4
33555: ARRAY
33556: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33557: LD_ADDR_VAR 0 9
33561: PUSH
33562: LD_VAR 0 6
33566: PPUSH
33567: LD_VAR 0 7
33571: PPUSH
33572: LD_INT 16
33574: PPUSH
33575: CALL 80288 0 3
33579: ST_TO_ADDR
// if not cratesNearbyPoint then
33580: LD_VAR 0 9
33584: NOT
33585: IFFALSE 33591
// exit ;
33587: POP
33588: POP
33589: GO 34056
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33591: LD_ADDR_VAR 0 4
33595: PUSH
33596: LD_INT 22
33598: PUSH
33599: LD_VAR 0 5
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 3
33610: PUSH
33611: LD_INT 60
33613: PUSH
33614: EMPTY
33615: LIST
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 91
33623: PUSH
33624: LD_VAR 0 8
33628: PUSH
33629: LD_INT 6
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 25
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 25
33652: PUSH
33653: LD_INT 16
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: PPUSH
33671: CALL_OW 69
33675: PUSH
33676: LD_VAR 0 8
33680: PPUSH
33681: CALL_OW 313
33685: PPUSH
33686: LD_INT 3
33688: PUSH
33689: LD_INT 60
33691: PUSH
33692: EMPTY
33693: LIST
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 25
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 25
33714: PUSH
33715: LD_INT 16
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PPUSH
33731: CALL_OW 72
33735: UNION
33736: ST_TO_ADDR
// if tmp then
33737: LD_VAR 0 4
33741: IFFALSE 33821
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33743: LD_ADDR_VAR 0 4
33747: PUSH
33748: LD_VAR 0 4
33752: PPUSH
33753: LD_INT 3
33755: PPUSH
33756: CALL 78095 0 2
33760: ST_TO_ADDR
// for j in tmp do
33761: LD_ADDR_VAR 0 2
33765: PUSH
33766: LD_VAR 0 4
33770: PUSH
33771: FOR_IN
33772: IFFALSE 33815
// begin if IsInUnit ( j ) then
33774: LD_VAR 0 2
33778: PPUSH
33779: CALL_OW 310
33783: IFFALSE 33794
// ComExit ( j ) ;
33785: LD_VAR 0 2
33789: PPUSH
33790: CALL 78178 0 1
// AddComCollect ( j , x , y ) ;
33794: LD_VAR 0 2
33798: PPUSH
33799: LD_VAR 0 6
33803: PPUSH
33804: LD_VAR 0 7
33808: PPUSH
33809: CALL_OW 177
// end ;
33813: GO 33771
33815: POP
33816: POP
// exit ;
33817: POP
33818: POP
33819: GO 34056
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33821: LD_ADDR_VAR 0 4
33825: PUSH
33826: LD_INT 22
33828: PUSH
33829: LD_VAR 0 5
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 91
33840: PUSH
33841: LD_VAR 0 8
33845: PUSH
33846: LD_INT 8
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 34
33859: PUSH
33860: LD_INT 12
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 34
33869: PUSH
33870: LD_INT 51
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 34
33879: PUSH
33880: LD_INT 32
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 34
33889: PUSH
33890: LD_INT 89
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: PPUSH
33909: CALL_OW 69
33913: ST_TO_ADDR
// if tmp then
33914: LD_VAR 0 4
33918: IFFALSE 34052
// begin for j in tmp do
33920: LD_ADDR_VAR 0 2
33924: PUSH
33925: LD_VAR 0 4
33929: PUSH
33930: FOR_IN
33931: IFFALSE 34050
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33933: LD_VAR 0 2
33937: PPUSH
33938: CALL_OW 262
33942: PUSH
33943: LD_INT 3
33945: EQUAL
33946: IFTRUE 33963
33948: PUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL_OW 261
33958: PUSH
33959: LD_INT 20
33961: GREATER
33962: OR
33963: IFFALSE 33977
33965: PUSH
33966: LD_VAR 0 2
33970: PPUSH
33971: CALL_OW 314
33975: NOT
33976: AND
33977: IFFALSE 34007
33979: PUSH
33980: LD_VAR 0 2
33984: PPUSH
33985: CALL_OW 263
33989: PUSH
33990: LD_INT 1
33992: NONEQUAL
33993: IFTRUE 34006
33995: PUSH
33996: LD_VAR 0 2
34000: PPUSH
34001: CALL_OW 311
34005: OR
34006: AND
34007: IFFALSE 34048
// begin ComCollect ( j , x , y ) ;
34009: LD_VAR 0 2
34013: PPUSH
34014: LD_VAR 0 6
34018: PPUSH
34019: LD_VAR 0 7
34023: PPUSH
34024: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34028: LD_VAR 0 2
34032: PPUSH
34033: LD_VAR 0 8
34037: PPUSH
34038: CALL_OW 172
// exit ;
34042: POP
34043: POP
34044: POP
34045: POP
34046: GO 34056
// end ;
34048: GO 33930
34050: POP
34051: POP
// end ; end ;
34052: GO 33417
34054: POP
34055: POP
// end ; end_of_file
34056: PPOPN 9
34058: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34059: LD_VAR 0 1
34063: PUSH
34064: LD_INT 200
34066: DOUBLE
34067: GREATEREQUAL
34068: IFFALSE 34076
34070: LD_INT 299
34072: DOUBLE
34073: LESSEQUAL
34074: IFTRUE 34078
34076: GO 34110
34078: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34079: LD_VAR 0 1
34083: PPUSH
34084: LD_VAR 0 2
34088: PPUSH
34089: LD_VAR 0 3
34093: PPUSH
34094: LD_VAR 0 4
34098: PPUSH
34099: LD_VAR 0 5
34103: PPUSH
34104: CALL 34891 0 5
34108: GO 34187
34110: LD_INT 300
34112: DOUBLE
34113: GREATEREQUAL
34114: IFFALSE 34122
34116: LD_INT 399
34118: DOUBLE
34119: LESSEQUAL
34120: IFTRUE 34124
34122: GO 34186
34124: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34125: LD_VAR 0 1
34129: PPUSH
34130: LD_VAR 0 2
34134: PPUSH
34135: LD_VAR 0 3
34139: PPUSH
34140: LD_VAR 0 4
34144: PPUSH
34145: LD_VAR 0 5
34149: PPUSH
34150: LD_VAR 0 6
34154: PPUSH
34155: LD_VAR 0 7
34159: PPUSH
34160: LD_VAR 0 8
34164: PPUSH
34165: LD_VAR 0 9
34169: PPUSH
34170: LD_VAR 0 10
34174: PPUSH
34175: LD_VAR 0 11
34179: PPUSH
34180: CALL 30612 0 11
34184: GO 34187
34186: POP
// end ;
34187: PPOPN 11
34189: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34190: LD_VAR 0 1
34194: PPUSH
34195: LD_VAR 0 2
34199: PPUSH
34200: LD_VAR 0 3
34204: PPUSH
34205: LD_VAR 0 4
34209: PPUSH
34210: LD_VAR 0 5
34214: PPUSH
34215: CALL 34272 0 5
// end ; end_of_file
34219: PPOPN 5
34221: END
// export function SOS_UnitDestroyed ( un ) ; begin
34222: LD_INT 0
34224: PPUSH
// ComRadiation ( un ) ;
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL 35311 0 1
// end ;
34234: LD_VAR 0 2
34238: RET
// export function SOS_UnitKamikazed ( un ) ; begin
34239: LD_INT 0
34241: PPUSH
// ComRadiation ( un ) ;
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL 35311 0 1
// end ;
34251: LD_VAR 0 2
34255: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34256: LD_INT 0
34258: PPUSH
// end ;
34259: LD_VAR 0 4
34263: RET
// export function SOS_Command ( cmd ) ; begin
34264: LD_INT 0
34266: PPUSH
// end ;
34267: LD_VAR 0 2
34271: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34272: LD_INT 0
34274: PPUSH
// end ;
34275: LD_VAR 0 6
34279: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
34280: LD_INT 0
34282: PPUSH
34283: PPUSH
34284: PPUSH
34285: PPUSH
// if not vehicle or not factory then
34286: LD_VAR 0 1
34290: NOT
34291: IFTRUE 34300
34293: PUSH
34294: LD_VAR 0 2
34298: NOT
34299: OR
34300: IFFALSE 34304
// exit ;
34302: GO 34886
// if not factoryWaypoints then
34304: LD_EXP 112
34308: NOT
34309: IFFALSE 34313
// exit ;
34311: GO 34886
// for i := 1 to Count ( factoryWaypoints ) do
34313: LD_ADDR_VAR 0 4
34317: PUSH
34318: DOUBLE
34319: LD_INT 1
34321: DEC
34322: ST_TO_ADDR
34323: LD_EXP 112
34327: PPUSH
34328: CALL 41848 0 1
34332: PUSH
34333: FOR_TO
34334: IFFALSE 34884
// if factoryWaypoints [ i ] [ 2 ] = factory then
34336: LD_EXP 112
34340: PUSH
34341: LD_VAR 0 4
34345: ARRAY
34346: PUSH
34347: LD_INT 2
34349: ARRAY
34350: PUSH
34351: LD_VAR 0 2
34355: EQUAL
34356: IFFALSE 34882
// begin if GetControl ( vehicle ) = control_manual then
34358: LD_VAR 0 1
34362: PPUSH
34363: CALL_OW 263
34367: PUSH
34368: LD_INT 1
34370: EQUAL
34371: IFFALSE 34735
// begin driver := IsDrivenBy ( vehicle ) ;
34373: LD_ADDR_VAR 0 5
34377: PUSH
34378: LD_VAR 0 1
34382: PPUSH
34383: CALL_OW 311
34387: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
34388: LD_VAR 0 5
34392: PUSH
34393: LD_EXP 113
34397: IN
34398: IFTRUE 34412
34400: PUSH
34401: LD_VAR 0 1
34405: PUSH
34406: LD_EXP 113
34410: IN
34411: OR
34412: IFFALSE 34418
// exit ;
34414: POP
34415: POP
34416: GO 34886
// if not HasTask ( driver ) then
34418: LD_VAR 0 5
34422: PPUSH
34423: CALL_OW 314
34427: NOT
34428: IFFALSE 34733
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
34430: LD_ADDR_EXP 113
34434: PUSH
34435: LD_EXP 113
34439: PPUSH
34440: LD_VAR 0 5
34444: PPUSH
34445: CALL 77780 0 2
34449: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
34450: LD_ADDR_EXP 113
34454: PUSH
34455: LD_EXP 113
34459: PPUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL 77780 0 2
34469: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34470: LD_ADDR_VAR 0 6
34474: PUSH
34475: LD_EXP 112
34479: PUSH
34480: LD_VAR 0 4
34484: ARRAY
34485: PUSH
34486: LD_INT 3
34488: ARRAY
34489: PPUSH
34490: LD_EXP 112
34494: PUSH
34495: LD_VAR 0 4
34499: ARRAY
34500: PUSH
34501: LD_INT 4
34503: ARRAY
34504: PPUSH
34505: CALL_OW 428
34509: ST_TO_ADDR
// if hex then
34510: LD_VAR 0 6
34514: IFFALSE 34532
// ComMoveUnit ( driver , hex ) else
34516: LD_VAR 0 5
34520: PPUSH
34521: LD_VAR 0 6
34525: PPUSH
34526: CALL_OW 112
34530: GO 34616
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
34532: LD_VAR 0 1
34536: PPUSH
34537: LD_EXP 112
34541: PUSH
34542: LD_VAR 0 4
34546: ARRAY
34547: PUSH
34548: LD_INT 3
34550: ARRAY
34551: PPUSH
34552: LD_EXP 112
34556: PUSH
34557: LD_VAR 0 4
34561: ARRAY
34562: PUSH
34563: LD_INT 4
34565: ARRAY
34566: PPUSH
34567: CALL_OW 297
34571: PUSH
34572: LD_INT 0
34574: GREATER
34575: IFFALSE 34616
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34577: LD_VAR 0 5
34581: PPUSH
34582: LD_EXP 112
34586: PUSH
34587: LD_VAR 0 4
34591: ARRAY
34592: PUSH
34593: LD_INT 3
34595: ARRAY
34596: PPUSH
34597: LD_EXP 112
34601: PUSH
34602: LD_VAR 0 4
34606: ARRAY
34607: PUSH
34608: LD_INT 4
34610: ARRAY
34611: PPUSH
34612: CALL_OW 111
// AddComExitVehicle ( driver ) ;
34616: LD_VAR 0 5
34620: PPUSH
34621: CALL_OW 181
// if Multiplayer then
34625: LD_OWVAR 4
34629: IFFALSE 34678
// begin repeat wait ( 10 ) ;
34631: LD_INT 10
34633: PPUSH
34634: CALL_OW 67
// until not IsInUnit ( driver ) ;
34638: LD_VAR 0 5
34642: PPUSH
34643: CALL_OW 310
34647: NOT
34648: IFFALSE 34631
// if not HasTask ( driver ) then
34650: LD_VAR 0 5
34654: PPUSH
34655: CALL_OW 314
34659: NOT
34660: IFFALSE 34676
// ComEnterUnit ( driver , factory ) ;
34662: LD_VAR 0 5
34666: PPUSH
34667: LD_VAR 0 2
34671: PPUSH
34672: CALL_OW 120
// end else
34676: GO 34692
// AddComEnterUnit ( driver , factory ) ;
34678: LD_VAR 0 5
34682: PPUSH
34683: LD_VAR 0 2
34687: PPUSH
34688: CALL_OW 180
// wait ( 0 0$1 ) ;
34692: LD_INT 35
34694: PPUSH
34695: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
34699: LD_ADDR_EXP 113
34703: PUSH
34704: LD_EXP 113
34708: PUSH
34709: LD_VAR 0 5
34713: DIFF
34714: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
34715: LD_ADDR_EXP 113
34719: PUSH
34720: LD_EXP 113
34724: PUSH
34725: LD_VAR 0 1
34729: DIFF
34730: ST_TO_ADDR
// break ;
34731: GO 34884
// end ; end else
34733: GO 34882
// if GetControl ( vehicle ) = control_remote then
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 263
34744: PUSH
34745: LD_INT 2
34747: EQUAL
34748: IFFALSE 34834
// begin wait ( 0 0$2 ) ;
34750: LD_INT 70
34752: PPUSH
34753: CALL_OW 67
// repeat wait ( 10 ) ;
34757: LD_INT 10
34759: PPUSH
34760: CALL_OW 67
// Connect ( vehicle ) ;
34764: LD_VAR 0 1
34768: PPUSH
34769: CALL 48092 0 1
// until IsControledBy ( vehicle ) ;
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 312
34782: IFFALSE 34757
// wait ( 10 ) ;
34784: LD_INT 10
34786: PPUSH
34787: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34791: LD_VAR 0 1
34795: PPUSH
34796: LD_EXP 112
34800: PUSH
34801: LD_VAR 0 4
34805: ARRAY
34806: PUSH
34807: LD_INT 3
34809: ARRAY
34810: PPUSH
34811: LD_EXP 112
34815: PUSH
34816: LD_VAR 0 4
34820: ARRAY
34821: PUSH
34822: LD_INT 4
34824: ARRAY
34825: PPUSH
34826: CALL_OW 111
// break ;
34830: GO 34884
// end else
34832: GO 34882
// begin wait ( 0 0$3 ) ;
34834: LD_INT 105
34836: PPUSH
34837: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34841: LD_VAR 0 1
34845: PPUSH
34846: LD_EXP 112
34850: PUSH
34851: LD_VAR 0 4
34855: ARRAY
34856: PUSH
34857: LD_INT 3
34859: ARRAY
34860: PPUSH
34861: LD_EXP 112
34865: PUSH
34866: LD_VAR 0 4
34870: ARRAY
34871: PUSH
34872: LD_INT 4
34874: ARRAY
34875: PPUSH
34876: CALL_OW 111
// break ;
34880: GO 34884
// end ; end ;
34882: GO 34333
34884: POP
34885: POP
// end ;
34886: LD_VAR 0 3
34890: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34891: LD_INT 0
34893: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34894: LD_VAR 0 1
34898: PUSH
34899: LD_INT 250
34901: EQUAL
34902: IFFALSE 34919
34904: PUSH
34905: LD_VAR 0 2
34909: PPUSH
34910: CALL_OW 264
34914: PUSH
34915: LD_INT 81
34917: EQUAL
34918: AND
34919: IFFALSE 34940
// MinerPlaceMine ( unit , x , y ) ;
34921: LD_VAR 0 2
34925: PPUSH
34926: LD_VAR 0 4
34930: PPUSH
34931: LD_VAR 0 5
34935: PPUSH
34936: CALL 38072 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34940: LD_VAR 0 1
34944: PUSH
34945: LD_INT 251
34947: EQUAL
34948: IFFALSE 34965
34950: PUSH
34951: LD_VAR 0 2
34955: PPUSH
34956: CALL_OW 264
34960: PUSH
34961: LD_INT 81
34963: EQUAL
34964: AND
34965: IFFALSE 34986
// MinerDetonateMine ( unit , x , y ) ;
34967: LD_VAR 0 2
34971: PPUSH
34972: LD_VAR 0 4
34976: PPUSH
34977: LD_VAR 0 5
34981: PPUSH
34982: CALL 38351 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34986: LD_VAR 0 1
34990: PUSH
34991: LD_INT 252
34993: EQUAL
34994: IFFALSE 35011
34996: PUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: CALL_OW 264
35006: PUSH
35007: LD_INT 81
35009: EQUAL
35010: AND
35011: IFFALSE 35032
// MinerCreateMinefield ( unit , x , y ) ;
35013: LD_VAR 0 2
35017: PPUSH
35018: LD_VAR 0 4
35022: PPUSH
35023: LD_VAR 0 5
35027: PPUSH
35028: CALL 38770 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35032: LD_VAR 0 1
35036: PUSH
35037: LD_INT 253
35039: EQUAL
35040: IFFALSE 35057
35042: PUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: CALL_OW 257
35052: PUSH
35053: LD_INT 5
35055: EQUAL
35056: AND
35057: IFFALSE 35078
// ComBinocular ( unit , x , y ) ;
35059: LD_VAR 0 2
35063: PPUSH
35064: LD_VAR 0 4
35068: PPUSH
35069: LD_VAR 0 5
35073: PPUSH
35074: CALL 39145 0 3
// if selectedUnit then
35078: LD_VAR 0 3
35082: IFFALSE 35142
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35084: LD_VAR 0 1
35088: PUSH
35089: LD_INT 254
35091: EQUAL
35092: IFFALSE 35109
35094: PUSH
35095: LD_VAR 0 2
35099: PPUSH
35100: CALL_OW 264
35104: PUSH
35105: LD_INT 99
35107: EQUAL
35108: AND
35109: IFFALSE 35126
35111: PUSH
35112: LD_VAR 0 3
35116: PPUSH
35117: CALL_OW 263
35121: PUSH
35122: LD_INT 3
35124: EQUAL
35125: AND
35126: IFFALSE 35142
// HackDestroyVehicle ( unit , selectedUnit ) ;
35128: LD_VAR 0 2
35132: PPUSH
35133: LD_VAR 0 3
35137: PPUSH
35138: CALL 37432 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35142: LD_VAR 0 1
35146: PUSH
35147: LD_INT 255
35149: EQUAL
35150: IFFALSE 35174
35152: PUSH
35153: LD_VAR 0 2
35157: PPUSH
35158: CALL_OW 264
35162: PUSH
35163: LD_INT 14
35165: PUSH
35166: LD_INT 53
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: IN
35173: AND
35174: IFFALSE 35192
35176: PUSH
35177: LD_VAR 0 4
35181: PPUSH
35182: LD_VAR 0 5
35186: PPUSH
35187: CALL_OW 488
35191: AND
35192: IFFALSE 35216
// CutTreeXYR ( unit , x , y , 12 ) ;
35194: LD_VAR 0 2
35198: PPUSH
35199: LD_VAR 0 4
35203: PPUSH
35204: LD_VAR 0 5
35208: PPUSH
35209: LD_INT 12
35211: PPUSH
35212: CALL 35407 0 4
// if cmd = 256 then
35216: LD_VAR 0 1
35220: PUSH
35221: LD_INT 256
35223: EQUAL
35224: IFFALSE 35245
// SetFactoryWaypoint ( unit , x , y ) ;
35226: LD_VAR 0 2
35230: PPUSH
35231: LD_VAR 0 4
35235: PPUSH
35236: LD_VAR 0 5
35240: PPUSH
35241: CALL 32604 0 3
// if cmd = 257 then
35245: LD_VAR 0 1
35249: PUSH
35250: LD_INT 257
35252: EQUAL
35253: IFFALSE 35274
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35255: LD_VAR 0 2
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: LD_VAR 0 5
35269: PPUSH
35270: CALL 33100 0 3
// if cmd = 258 then
35274: LD_VAR 0 1
35278: PUSH
35279: LD_INT 258
35281: EQUAL
35282: IFFALSE 35306
// BurnTreeXYR ( unit , x , y , 8 ) ;
35284: LD_VAR 0 2
35288: PPUSH
35289: LD_VAR 0 4
35293: PPUSH
35294: LD_VAR 0 5
35298: PPUSH
35299: LD_INT 8
35301: PPUSH
35302: CALL 35807 0 4
// end ;
35306: LD_VAR 0 6
35310: RET
// export function ComRadiation ( un ) ; var eff ; begin
35311: LD_INT 0
35313: PPUSH
35314: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
35315: LD_VAR 0 1
35319: PPUSH
35320: CALL_OW 264
35324: PUSH
35325: LD_INT 91
35327: NONEQUAL
35328: IFFALSE 35332
// exit ;
35330: GO 35402
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35332: LD_INT 68
35334: PPUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: CALL_OW 255
35344: PPUSH
35345: CALL_OW 321
35349: PUSH
35350: LD_INT 2
35352: EQUAL
35353: IFFALSE 35365
// eff := 50 else
35355: LD_ADDR_VAR 0 3
35359: PUSH
35360: LD_INT 50
35362: ST_TO_ADDR
35363: GO 35373
// eff := 25 ;
35365: LD_ADDR_VAR 0 3
35369: PUSH
35370: LD_INT 25
35372: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 250
35382: PPUSH
35383: LD_VAR 0 1
35387: PPUSH
35388: CALL_OW 251
35392: PPUSH
35393: LD_VAR 0 3
35397: PPUSH
35398: CALL_OW 495
// end ;
35402: LD_VAR 0 2
35406: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35407: LD_INT 0
35409: PPUSH
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 302
35427: NOT
35428: IFTRUE 35447
35430: PUSH
35431: LD_VAR 0 2
35435: PPUSH
35436: LD_VAR 0 3
35440: PPUSH
35441: CALL_OW 488
35445: NOT
35446: OR
35447: IFTRUE 35456
35449: PUSH
35450: LD_VAR 0 4
35454: NOT
35455: OR
35456: IFFALSE 35460
// exit ;
35458: GO 35802
// list := [ ] ;
35460: LD_ADDR_VAR 0 13
35464: PUSH
35465: EMPTY
35466: ST_TO_ADDR
// if x - r < 0 then
35467: LD_VAR 0 2
35471: PUSH
35472: LD_VAR 0 4
35476: MINUS
35477: PUSH
35478: LD_INT 0
35480: LESS
35481: IFFALSE 35493
// min_x := 0 else
35483: LD_ADDR_VAR 0 7
35487: PUSH
35488: LD_INT 0
35490: ST_TO_ADDR
35491: GO 35509
// min_x := x - r ;
35493: LD_ADDR_VAR 0 7
35497: PUSH
35498: LD_VAR 0 2
35502: PUSH
35503: LD_VAR 0 4
35507: MINUS
35508: ST_TO_ADDR
// if y - r < 0 then
35509: LD_VAR 0 3
35513: PUSH
35514: LD_VAR 0 4
35518: MINUS
35519: PUSH
35520: LD_INT 0
35522: LESS
35523: IFFALSE 35535
// min_y := 0 else
35525: LD_ADDR_VAR 0 8
35529: PUSH
35530: LD_INT 0
35532: ST_TO_ADDR
35533: GO 35551
// min_y := y - r ;
35535: LD_ADDR_VAR 0 8
35539: PUSH
35540: LD_VAR 0 3
35544: PUSH
35545: LD_VAR 0 4
35549: MINUS
35550: ST_TO_ADDR
// max_x := x + r ;
35551: LD_ADDR_VAR 0 9
35555: PUSH
35556: LD_VAR 0 2
35560: PUSH
35561: LD_VAR 0 4
35565: PLUS
35566: ST_TO_ADDR
// max_y := y + r ;
35567: LD_ADDR_VAR 0 10
35571: PUSH
35572: LD_VAR 0 3
35576: PUSH
35577: LD_VAR 0 4
35581: PLUS
35582: ST_TO_ADDR
// for _x = min_x to max_x do
35583: LD_ADDR_VAR 0 11
35587: PUSH
35588: DOUBLE
35589: LD_VAR 0 7
35593: DEC
35594: ST_TO_ADDR
35595: LD_VAR 0 9
35599: PUSH
35600: FOR_TO
35601: IFFALSE 35720
// for _y = min_y to max_y do
35603: LD_ADDR_VAR 0 12
35607: PUSH
35608: DOUBLE
35609: LD_VAR 0 8
35613: DEC
35614: ST_TO_ADDR
35615: LD_VAR 0 10
35619: PUSH
35620: FOR_TO
35621: IFFALSE 35716
// begin if not ValidHex ( _x , _y ) then
35623: LD_VAR 0 11
35627: PPUSH
35628: LD_VAR 0 12
35632: PPUSH
35633: CALL_OW 488
35637: NOT
35638: IFFALSE 35642
// continue ;
35640: GO 35620
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35642: LD_VAR 0 11
35646: PPUSH
35647: LD_VAR 0 12
35651: PPUSH
35652: CALL_OW 351
35656: IFFALSE 35674
35658: PUSH
35659: LD_VAR 0 11
35663: PPUSH
35664: LD_VAR 0 12
35668: PPUSH
35669: CALL_OW 554
35673: AND
35674: IFFALSE 35714
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35676: LD_ADDR_VAR 0 13
35680: PUSH
35681: LD_VAR 0 13
35685: PPUSH
35686: LD_VAR 0 13
35690: PUSH
35691: LD_INT 1
35693: PLUS
35694: PPUSH
35695: LD_VAR 0 11
35699: PUSH
35700: LD_VAR 0 12
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PPUSH
35709: CALL_OW 2
35713: ST_TO_ADDR
// end ;
35714: GO 35620
35716: POP
35717: POP
35718: GO 35600
35720: POP
35721: POP
// if not list then
35722: LD_VAR 0 13
35726: NOT
35727: IFFALSE 35731
// exit ;
35729: GO 35802
// for i in list do
35731: LD_ADDR_VAR 0 6
35735: PUSH
35736: LD_VAR 0 13
35740: PUSH
35741: FOR_IN
35742: IFFALSE 35800
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35744: LD_VAR 0 1
35748: PPUSH
35749: LD_STRING M
35751: PUSH
35752: LD_VAR 0 6
35756: PUSH
35757: LD_INT 1
35759: ARRAY
35760: PUSH
35761: LD_VAR 0 6
35765: PUSH
35766: LD_INT 2
35768: ARRAY
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: PPUSH
35794: CALL_OW 447
35798: GO 35741
35800: POP
35801: POP
// end ;
35802: LD_VAR 0 5
35806: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
35807: LD_INT 0
35809: PPUSH
35810: PPUSH
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
35819: LD_VAR 0 1
35823: PPUSH
35824: CALL_OW 302
35828: NOT
35829: IFTRUE 35848
35831: PUSH
35832: LD_VAR 0 2
35836: PPUSH
35837: LD_VAR 0 3
35841: PPUSH
35842: CALL_OW 488
35846: NOT
35847: OR
35848: IFTRUE 35857
35850: PUSH
35851: LD_VAR 0 4
35855: NOT
35856: OR
35857: IFFALSE 35861
// exit ;
35859: GO 36378
// list := [ ] ;
35861: LD_ADDR_VAR 0 13
35865: PUSH
35866: EMPTY
35867: ST_TO_ADDR
// if x - r < 0 then
35868: LD_VAR 0 2
35872: PUSH
35873: LD_VAR 0 4
35877: MINUS
35878: PUSH
35879: LD_INT 0
35881: LESS
35882: IFFALSE 35894
// min_x := 0 else
35884: LD_ADDR_VAR 0 7
35888: PUSH
35889: LD_INT 0
35891: ST_TO_ADDR
35892: GO 35910
// min_x := x - r ;
35894: LD_ADDR_VAR 0 7
35898: PUSH
35899: LD_VAR 0 2
35903: PUSH
35904: LD_VAR 0 4
35908: MINUS
35909: ST_TO_ADDR
// if y - r < 0 then
35910: LD_VAR 0 3
35914: PUSH
35915: LD_VAR 0 4
35919: MINUS
35920: PUSH
35921: LD_INT 0
35923: LESS
35924: IFFALSE 35936
// min_y := 0 else
35926: LD_ADDR_VAR 0 8
35930: PUSH
35931: LD_INT 0
35933: ST_TO_ADDR
35934: GO 35952
// min_y := y - r ;
35936: LD_ADDR_VAR 0 8
35940: PUSH
35941: LD_VAR 0 3
35945: PUSH
35946: LD_VAR 0 4
35950: MINUS
35951: ST_TO_ADDR
// max_x := x + r ;
35952: LD_ADDR_VAR 0 9
35956: PUSH
35957: LD_VAR 0 2
35961: PUSH
35962: LD_VAR 0 4
35966: PLUS
35967: ST_TO_ADDR
// max_y := y + r ;
35968: LD_ADDR_VAR 0 10
35972: PUSH
35973: LD_VAR 0 3
35977: PUSH
35978: LD_VAR 0 4
35982: PLUS
35983: ST_TO_ADDR
// for _x = min_x to max_x do
35984: LD_ADDR_VAR 0 11
35988: PUSH
35989: DOUBLE
35990: LD_VAR 0 7
35994: DEC
35995: ST_TO_ADDR
35996: LD_VAR 0 9
36000: PUSH
36001: FOR_TO
36002: IFFALSE 36121
// for _y = min_y to max_y do
36004: LD_ADDR_VAR 0 12
36008: PUSH
36009: DOUBLE
36010: LD_VAR 0 8
36014: DEC
36015: ST_TO_ADDR
36016: LD_VAR 0 10
36020: PUSH
36021: FOR_TO
36022: IFFALSE 36117
// begin if not ValidHex ( _x , _y ) then
36024: LD_VAR 0 11
36028: PPUSH
36029: LD_VAR 0 12
36033: PPUSH
36034: CALL_OW 488
36038: NOT
36039: IFFALSE 36043
// continue ;
36041: GO 36021
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36043: LD_VAR 0 11
36047: PPUSH
36048: LD_VAR 0 12
36052: PPUSH
36053: CALL_OW 351
36057: IFFALSE 36075
36059: PUSH
36060: LD_VAR 0 11
36064: PPUSH
36065: LD_VAR 0 12
36069: PPUSH
36070: CALL_OW 554
36074: AND
36075: IFFALSE 36115
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36077: LD_ADDR_VAR 0 13
36081: PUSH
36082: LD_VAR 0 13
36086: PPUSH
36087: LD_VAR 0 13
36091: PUSH
36092: LD_INT 1
36094: PLUS
36095: PPUSH
36096: LD_VAR 0 11
36100: PUSH
36101: LD_VAR 0 12
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PPUSH
36110: CALL_OW 2
36114: ST_TO_ADDR
// end ;
36115: GO 36021
36117: POP
36118: POP
36119: GO 36001
36121: POP
36122: POP
// if not list then
36123: LD_VAR 0 13
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 36378
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36132: LD_ADDR_VAR 0 13
36136: PUSH
36137: LD_VAR 0 1
36141: PPUSH
36142: LD_VAR 0 13
36146: PPUSH
36147: LD_INT 1
36149: PPUSH
36150: LD_INT 1
36152: PPUSH
36153: CALL 45220 0 4
36157: ST_TO_ADDR
// ComStop ( flame ) ;
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 141
// for i in list do
36167: LD_ADDR_VAR 0 6
36171: PUSH
36172: LD_VAR 0 13
36176: PUSH
36177: FOR_IN
36178: IFFALSE 36209
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36180: LD_VAR 0 1
36184: PPUSH
36185: LD_VAR 0 6
36189: PUSH
36190: LD_INT 1
36192: ARRAY
36193: PPUSH
36194: LD_VAR 0 6
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: PPUSH
36203: CALL_OW 176
36207: GO 36177
36209: POP
36210: POP
// repeat wait ( 0 0$1 ) ;
36211: LD_INT 35
36213: PPUSH
36214: CALL_OW 67
// task := GetTaskList ( flame ) ;
36218: LD_ADDR_VAR 0 14
36222: PUSH
36223: LD_VAR 0 1
36227: PPUSH
36228: CALL_OW 437
36232: ST_TO_ADDR
// if not task then
36233: LD_VAR 0 14
36237: NOT
36238: IFFALSE 36242
// exit ;
36240: GO 36378
// if task [ 1 ] [ 1 ] <> | then
36242: LD_VAR 0 14
36246: PUSH
36247: LD_INT 1
36249: ARRAY
36250: PUSH
36251: LD_INT 1
36253: ARRAY
36254: PUSH
36255: LD_STRING |
36257: NONEQUAL
36258: IFFALSE 36262
// exit ;
36260: GO 36378
// _x := task [ 1 ] [ 2 ] ;
36262: LD_ADDR_VAR 0 11
36266: PUSH
36267: LD_VAR 0 14
36271: PUSH
36272: LD_INT 1
36274: ARRAY
36275: PUSH
36276: LD_INT 2
36278: ARRAY
36279: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36280: LD_ADDR_VAR 0 12
36284: PUSH
36285: LD_VAR 0 14
36289: PUSH
36290: LD_INT 1
36292: ARRAY
36293: PUSH
36294: LD_INT 3
36296: ARRAY
36297: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36298: LD_VAR 0 11
36302: PPUSH
36303: LD_VAR 0 12
36307: PPUSH
36308: CALL_OW 351
36312: NOT
36313: IFTRUE 36332
36315: PUSH
36316: LD_VAR 0 11
36320: PPUSH
36321: LD_VAR 0 12
36325: PPUSH
36326: CALL_OW 554
36330: NOT
36331: OR
36332: IFFALSE 36366
// begin task := Delete ( task , 1 ) ;
36334: LD_ADDR_VAR 0 14
36338: PUSH
36339: LD_VAR 0 14
36343: PPUSH
36344: LD_INT 1
36346: PPUSH
36347: CALL_OW 3
36351: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36352: LD_VAR 0 1
36356: PPUSH
36357: LD_VAR 0 14
36361: PPUSH
36362: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36366: LD_VAR 0 1
36370: PPUSH
36371: CALL_OW 314
36375: NOT
36376: IFFALSE 36211
// end ;
36378: LD_VAR 0 5
36382: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36383: LD_EXP 116
36387: NOT
36388: IFFALSE 36438
36390: GO 36392
36392: DISABLE
// begin initHack := true ;
36393: LD_ADDR_EXP 116
36397: PUSH
36398: LD_INT 1
36400: ST_TO_ADDR
// hackTanks := [ ] ;
36401: LD_ADDR_EXP 117
36405: PUSH
36406: EMPTY
36407: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36408: LD_ADDR_EXP 118
36412: PUSH
36413: EMPTY
36414: ST_TO_ADDR
// hackLimit := 3 ;
36415: LD_ADDR_EXP 119
36419: PUSH
36420: LD_INT 3
36422: ST_TO_ADDR
// hackDist := 12 ;
36423: LD_ADDR_EXP 120
36427: PUSH
36428: LD_INT 12
36430: ST_TO_ADDR
// hackCounter := [ ] ;
36431: LD_ADDR_EXP 121
36435: PUSH
36436: EMPTY
36437: ST_TO_ADDR
// end ;
36438: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36439: LD_EXP 116
36443: IFFALSE 36461
36445: PUSH
36446: LD_INT 34
36448: PUSH
36449: LD_INT 99
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PPUSH
36456: CALL_OW 69
36460: AND
36461: IFFALSE 36714
36463: GO 36465
36465: DISABLE
36466: LD_INT 0
36468: PPUSH
36469: PPUSH
// begin enable ;
36470: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36471: LD_ADDR_VAR 0 1
36475: PUSH
36476: LD_INT 34
36478: PUSH
36479: LD_INT 99
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PPUSH
36486: CALL_OW 69
36490: PUSH
36491: FOR_IN
36492: IFFALSE 36712
// begin if not i in hackTanks then
36494: LD_VAR 0 1
36498: PUSH
36499: LD_EXP 117
36503: IN
36504: NOT
36505: IFFALSE 36588
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36507: LD_ADDR_EXP 117
36511: PUSH
36512: LD_EXP 117
36516: PPUSH
36517: LD_EXP 117
36521: PUSH
36522: LD_INT 1
36524: PLUS
36525: PPUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 1
36535: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36536: LD_ADDR_EXP 118
36540: PUSH
36541: LD_EXP 118
36545: PPUSH
36546: LD_EXP 118
36550: PUSH
36551: LD_INT 1
36553: PLUS
36554: PPUSH
36555: EMPTY
36556: PPUSH
36557: CALL_OW 1
36561: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36562: LD_ADDR_EXP 121
36566: PUSH
36567: LD_EXP 121
36571: PPUSH
36572: LD_EXP 121
36576: PUSH
36577: LD_INT 1
36579: PLUS
36580: PPUSH
36581: EMPTY
36582: PPUSH
36583: CALL_OW 1
36587: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36588: LD_VAR 0 1
36592: PPUSH
36593: CALL_OW 302
36597: NOT
36598: IFFALSE 36611
// begin HackUnlinkAll ( i ) ;
36600: LD_VAR 0 1
36604: PPUSH
36605: CALL 36717 0 1
// continue ;
36609: GO 36491
// end ; HackCheckCapturedStatus ( i ) ;
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL 37162 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36620: LD_ADDR_VAR 0 2
36624: PUSH
36625: LD_INT 81
36627: PUSH
36628: LD_VAR 0 1
36632: PPUSH
36633: CALL_OW 255
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 33
36644: PUSH
36645: LD_INT 3
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 91
36654: PUSH
36655: LD_VAR 0 1
36659: PUSH
36660: LD_EXP 120
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 50
36672: PUSH
36673: EMPTY
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 69
36686: ST_TO_ADDR
// if not tmp then
36687: LD_VAR 0 2
36691: NOT
36692: IFFALSE 36696
// continue ;
36694: GO 36491
// HackLink ( i , tmp ) ;
36696: LD_VAR 0 1
36700: PPUSH
36701: LD_VAR 0 2
36705: PPUSH
36706: CALL 36853 0 2
// end ;
36710: GO 36491
36712: POP
36713: POP
// end ;
36714: PPOPN 2
36716: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36717: LD_INT 0
36719: PPUSH
36720: PPUSH
36721: PPUSH
// if not hack in hackTanks then
36722: LD_VAR 0 1
36726: PUSH
36727: LD_EXP 117
36731: IN
36732: NOT
36733: IFFALSE 36737
// exit ;
36735: GO 36848
// index := GetElementIndex ( hackTanks , hack ) ;
36737: LD_ADDR_VAR 0 4
36741: PUSH
36742: LD_EXP 117
36746: PPUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL 44515 0 2
36756: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36757: LD_EXP 118
36761: PUSH
36762: LD_VAR 0 4
36766: ARRAY
36767: IFFALSE 36848
// begin for i in hackTanksCaptured [ index ] do
36769: LD_ADDR_VAR 0 3
36773: PUSH
36774: LD_EXP 118
36778: PUSH
36779: LD_VAR 0 4
36783: ARRAY
36784: PUSH
36785: FOR_IN
36786: IFFALSE 36812
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36788: LD_VAR 0 3
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: LD_VAR 0 3
36801: PUSH
36802: LD_INT 2
36804: ARRAY
36805: PPUSH
36806: CALL_OW 235
36810: GO 36785
36812: POP
36813: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36814: LD_ADDR_EXP 118
36818: PUSH
36819: LD_EXP 118
36823: PPUSH
36824: LD_VAR 0 4
36828: PPUSH
36829: EMPTY
36830: PPUSH
36831: CALL_OW 1
36835: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36836: LD_VAR 0 1
36840: PPUSH
36841: LD_INT 0
36843: PPUSH
36844: CALL_OW 505
// end ; end ;
36848: LD_VAR 0 2
36852: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36853: LD_INT 0
36855: PPUSH
36856: PPUSH
36857: PPUSH
// if not hack in hackTanks or not vehicles then
36858: LD_VAR 0 1
36862: PUSH
36863: LD_EXP 117
36867: IN
36868: NOT
36869: IFTRUE 36878
36871: PUSH
36872: LD_VAR 0 2
36876: NOT
36877: OR
36878: IFFALSE 36882
// exit ;
36880: GO 37157
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36882: LD_ADDR_VAR 0 2
36886: PUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: LD_VAR 0 2
36896: PPUSH
36897: LD_INT 1
36899: PPUSH
36900: LD_INT 1
36902: PPUSH
36903: CALL 45167 0 4
36907: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36908: LD_ADDR_VAR 0 5
36912: PUSH
36913: LD_EXP 117
36917: PPUSH
36918: LD_VAR 0 1
36922: PPUSH
36923: CALL 44515 0 2
36927: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36928: LD_EXP 118
36932: PUSH
36933: LD_VAR 0 5
36937: ARRAY
36938: PUSH
36939: LD_EXP 119
36943: LESS
36944: IFFALSE 37133
// begin for i := 1 to vehicles do
36946: LD_ADDR_VAR 0 4
36950: PUSH
36951: DOUBLE
36952: LD_INT 1
36954: DEC
36955: ST_TO_ADDR
36956: LD_VAR 0 2
36960: PUSH
36961: FOR_TO
36962: IFFALSE 37131
// begin if hackTanksCaptured [ index ] = hackLimit then
36964: LD_EXP 118
36968: PUSH
36969: LD_VAR 0 5
36973: ARRAY
36974: PUSH
36975: LD_EXP 119
36979: EQUAL
36980: IFFALSE 36984
// break ;
36982: GO 37131
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36984: LD_ADDR_EXP 121
36988: PUSH
36989: LD_EXP 121
36993: PPUSH
36994: LD_VAR 0 5
36998: PPUSH
36999: LD_EXP 121
37003: PUSH
37004: LD_VAR 0 5
37008: ARRAY
37009: PUSH
37010: LD_INT 1
37012: PLUS
37013: PPUSH
37014: CALL_OW 1
37018: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37019: LD_ADDR_EXP 118
37023: PUSH
37024: LD_EXP 118
37028: PPUSH
37029: LD_VAR 0 5
37033: PUSH
37034: LD_EXP 118
37038: PUSH
37039: LD_VAR 0 5
37043: ARRAY
37044: PUSH
37045: LD_INT 1
37047: PLUS
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PPUSH
37053: LD_VAR 0 2
37057: PUSH
37058: LD_VAR 0 4
37062: ARRAY
37063: PUSH
37064: LD_VAR 0 2
37068: PUSH
37069: LD_VAR 0 4
37073: ARRAY
37074: PPUSH
37075: CALL_OW 255
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PPUSH
37084: CALL 44732 0 3
37088: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37089: LD_VAR 0 2
37093: PUSH
37094: LD_VAR 0 4
37098: ARRAY
37099: PPUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 255
37109: PPUSH
37110: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37114: LD_VAR 0 2
37118: PUSH
37119: LD_VAR 0 4
37123: ARRAY
37124: PPUSH
37125: CALL_OW 141
// end ;
37129: GO 36961
37131: POP
37132: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37133: LD_VAR 0 1
37137: PPUSH
37138: LD_EXP 118
37142: PUSH
37143: LD_VAR 0 5
37147: ARRAY
37148: PUSH
37149: LD_INT 0
37151: PLUS
37152: PPUSH
37153: CALL_OW 505
// end ;
37157: LD_VAR 0 3
37161: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37162: LD_INT 0
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
// if not hack in hackTanks then
37168: LD_VAR 0 1
37172: PUSH
37173: LD_EXP 117
37177: IN
37178: NOT
37179: IFFALSE 37183
// exit ;
37181: GO 37427
// index := GetElementIndex ( hackTanks , hack ) ;
37183: LD_ADDR_VAR 0 4
37187: PUSH
37188: LD_EXP 117
37192: PPUSH
37193: LD_VAR 0 1
37197: PPUSH
37198: CALL 44515 0 2
37202: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37203: LD_ADDR_VAR 0 3
37207: PUSH
37208: DOUBLE
37209: LD_EXP 118
37213: PUSH
37214: LD_VAR 0 4
37218: ARRAY
37219: INC
37220: ST_TO_ADDR
37221: LD_INT 1
37223: PUSH
37224: FOR_DOWNTO
37225: IFFALSE 37401
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37227: LD_ADDR_VAR 0 5
37231: PUSH
37232: LD_EXP 118
37236: PUSH
37237: LD_VAR 0 4
37241: ARRAY
37242: PUSH
37243: LD_VAR 0 3
37247: ARRAY
37248: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37249: LD_VAR 0 5
37253: PUSH
37254: LD_INT 1
37256: ARRAY
37257: PPUSH
37258: CALL_OW 302
37262: NOT
37263: IFTRUE 37291
37265: PUSH
37266: LD_VAR 0 5
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: PPUSH
37275: CALL_OW 255
37279: PUSH
37280: LD_VAR 0 1
37284: PPUSH
37285: CALL_OW 255
37289: NONEQUAL
37290: OR
37291: IFFALSE 37399
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37293: LD_VAR 0 5
37297: PUSH
37298: LD_INT 1
37300: ARRAY
37301: PPUSH
37302: CALL_OW 305
37306: IFFALSE 37334
37308: PUSH
37309: LD_VAR 0 5
37313: PUSH
37314: LD_INT 1
37316: ARRAY
37317: PPUSH
37318: CALL_OW 255
37322: PUSH
37323: LD_VAR 0 1
37327: PPUSH
37328: CALL_OW 255
37332: EQUAL
37333: AND
37334: IFFALSE 37358
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37336: LD_VAR 0 5
37340: PUSH
37341: LD_INT 1
37343: ARRAY
37344: PPUSH
37345: LD_VAR 0 5
37349: PUSH
37350: LD_INT 2
37352: ARRAY
37353: PPUSH
37354: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37358: LD_ADDR_EXP 118
37362: PUSH
37363: LD_EXP 118
37367: PPUSH
37368: LD_VAR 0 4
37372: PPUSH
37373: LD_EXP 118
37377: PUSH
37378: LD_VAR 0 4
37382: ARRAY
37383: PPUSH
37384: LD_VAR 0 3
37388: PPUSH
37389: CALL_OW 3
37393: PPUSH
37394: CALL_OW 1
37398: ST_TO_ADDR
// end ; end ;
37399: GO 37224
37401: POP
37402: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37403: LD_VAR 0 1
37407: PPUSH
37408: LD_EXP 118
37412: PUSH
37413: LD_VAR 0 4
37417: ARRAY
37418: PUSH
37419: LD_INT 0
37421: PLUS
37422: PPUSH
37423: CALL_OW 505
// end ;
37427: LD_VAR 0 2
37431: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37432: LD_INT 0
37434: PPUSH
37435: PPUSH
37436: PPUSH
37437: PPUSH
// if not hack in hackTanks then
37438: LD_VAR 0 1
37442: PUSH
37443: LD_EXP 117
37447: IN
37448: NOT
37449: IFFALSE 37453
// exit ;
37451: GO 37538
// index := GetElementIndex ( hackTanks , hack ) ;
37453: LD_ADDR_VAR 0 5
37457: PUSH
37458: LD_EXP 117
37462: PPUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL 44515 0 2
37472: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37473: LD_ADDR_VAR 0 4
37477: PUSH
37478: DOUBLE
37479: LD_INT 1
37481: DEC
37482: ST_TO_ADDR
37483: LD_EXP 118
37487: PUSH
37488: LD_VAR 0 5
37492: ARRAY
37493: PUSH
37494: FOR_TO
37495: IFFALSE 37536
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37497: LD_EXP 118
37501: PUSH
37502: LD_VAR 0 5
37506: ARRAY
37507: PUSH
37508: LD_VAR 0 4
37512: ARRAY
37513: PUSH
37514: LD_INT 1
37516: ARRAY
37517: PUSH
37518: LD_VAR 0 2
37522: EQUAL
37523: IFFALSE 37534
// KillUnit ( vehicle ) ;
37525: LD_VAR 0 2
37529: PPUSH
37530: CALL_OW 66
37534: GO 37494
37536: POP
37537: POP
// end ;
37538: LD_VAR 0 3
37542: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37543: LD_EXP 122
37547: NOT
37548: IFFALSE 37583
37550: GO 37552
37552: DISABLE
// begin initMiner := true ;
37553: LD_ADDR_EXP 122
37557: PUSH
37558: LD_INT 1
37560: ST_TO_ADDR
// minersList := [ ] ;
37561: LD_ADDR_EXP 123
37565: PUSH
37566: EMPTY
37567: ST_TO_ADDR
// minerMinesList := [ ] ;
37568: LD_ADDR_EXP 124
37572: PUSH
37573: EMPTY
37574: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37575: LD_ADDR_EXP 125
37579: PUSH
37580: LD_INT 5
37582: ST_TO_ADDR
// end ;
37583: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37584: LD_EXP 122
37588: IFFALSE 37606
37590: PUSH
37591: LD_INT 34
37593: PUSH
37594: LD_INT 81
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PPUSH
37601: CALL_OW 69
37605: AND
37606: IFFALSE 38069
37608: GO 37610
37610: DISABLE
37611: LD_INT 0
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
// begin enable ;
37617: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37618: LD_ADDR_VAR 0 1
37622: PUSH
37623: LD_INT 34
37625: PUSH
37626: LD_INT 81
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PPUSH
37633: CALL_OW 69
37637: PUSH
37638: FOR_IN
37639: IFFALSE 37711
// begin if not i in minersList then
37641: LD_VAR 0 1
37645: PUSH
37646: LD_EXP 123
37650: IN
37651: NOT
37652: IFFALSE 37709
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37654: LD_ADDR_EXP 123
37658: PUSH
37659: LD_EXP 123
37663: PPUSH
37664: LD_EXP 123
37668: PUSH
37669: LD_INT 1
37671: PLUS
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL_OW 1
37682: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37683: LD_ADDR_EXP 124
37687: PUSH
37688: LD_EXP 124
37692: PPUSH
37693: LD_EXP 124
37697: PUSH
37698: LD_INT 1
37700: PLUS
37701: PPUSH
37702: EMPTY
37703: PPUSH
37704: CALL_OW 1
37708: ST_TO_ADDR
// end end ;
37709: GO 37638
37711: POP
37712: POP
// for i := minerMinesList downto 1 do
37713: LD_ADDR_VAR 0 1
37717: PUSH
37718: DOUBLE
37719: LD_EXP 124
37723: INC
37724: ST_TO_ADDR
37725: LD_INT 1
37727: PUSH
37728: FOR_DOWNTO
37729: IFFALSE 38067
// begin if IsLive ( minersList [ i ] ) then
37731: LD_EXP 123
37735: PUSH
37736: LD_VAR 0 1
37740: ARRAY
37741: PPUSH
37742: CALL_OW 300
37746: IFFALSE 37774
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37748: LD_EXP 123
37752: PUSH
37753: LD_VAR 0 1
37757: ARRAY
37758: PPUSH
37759: LD_EXP 124
37763: PUSH
37764: LD_VAR 0 1
37768: ARRAY
37769: PPUSH
37770: CALL_OW 505
// if not minerMinesList [ i ] then
37774: LD_EXP 124
37778: PUSH
37779: LD_VAR 0 1
37783: ARRAY
37784: NOT
37785: IFFALSE 37789
// continue ;
37787: GO 37728
// for j := minerMinesList [ i ] downto 1 do
37789: LD_ADDR_VAR 0 2
37793: PUSH
37794: DOUBLE
37795: LD_EXP 124
37799: PUSH
37800: LD_VAR 0 1
37804: ARRAY
37805: INC
37806: ST_TO_ADDR
37807: LD_INT 1
37809: PUSH
37810: FOR_DOWNTO
37811: IFFALSE 38063
// begin side := GetSide ( minersList [ i ] ) ;
37813: LD_ADDR_VAR 0 3
37817: PUSH
37818: LD_EXP 123
37822: PUSH
37823: LD_VAR 0 1
37827: ARRAY
37828: PPUSH
37829: CALL_OW 255
37833: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37834: LD_ADDR_VAR 0 4
37838: PUSH
37839: LD_EXP 124
37843: PUSH
37844: LD_VAR 0 1
37848: ARRAY
37849: PUSH
37850: LD_VAR 0 2
37854: ARRAY
37855: PUSH
37856: LD_INT 1
37858: ARRAY
37859: PPUSH
37860: LD_EXP 124
37864: PUSH
37865: LD_VAR 0 1
37869: ARRAY
37870: PUSH
37871: LD_VAR 0 2
37875: ARRAY
37876: PUSH
37877: LD_INT 2
37879: ARRAY
37880: PPUSH
37881: CALL_OW 428
37885: ST_TO_ADDR
// if not tmp then
37886: LD_VAR 0 4
37890: NOT
37891: IFFALSE 37895
// continue ;
37893: GO 37810
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37895: LD_VAR 0 4
37899: PUSH
37900: LD_INT 81
37902: PUSH
37903: LD_VAR 0 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PPUSH
37912: CALL_OW 69
37916: IN
37917: IFFALSE 37967
37919: PUSH
37920: LD_EXP 124
37924: PUSH
37925: LD_VAR 0 1
37929: ARRAY
37930: PUSH
37931: LD_VAR 0 2
37935: ARRAY
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PPUSH
37941: LD_EXP 124
37945: PUSH
37946: LD_VAR 0 1
37950: ARRAY
37951: PUSH
37952: LD_VAR 0 2
37956: ARRAY
37957: PUSH
37958: LD_INT 2
37960: ARRAY
37961: PPUSH
37962: CALL_OW 458
37966: AND
37967: IFFALSE 38061
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37969: LD_EXP 124
37973: PUSH
37974: LD_VAR 0 1
37978: ARRAY
37979: PUSH
37980: LD_VAR 0 2
37984: ARRAY
37985: PUSH
37986: LD_INT 1
37988: ARRAY
37989: PPUSH
37990: LD_EXP 124
37994: PUSH
37995: LD_VAR 0 1
37999: ARRAY
38000: PUSH
38001: LD_VAR 0 2
38005: ARRAY
38006: PUSH
38007: LD_INT 2
38009: ARRAY
38010: PPUSH
38011: LD_VAR 0 3
38015: PPUSH
38016: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38020: LD_ADDR_EXP 124
38024: PUSH
38025: LD_EXP 124
38029: PPUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: LD_EXP 124
38039: PUSH
38040: LD_VAR 0 1
38044: ARRAY
38045: PPUSH
38046: LD_VAR 0 2
38050: PPUSH
38051: CALL_OW 3
38055: PPUSH
38056: CALL_OW 1
38060: ST_TO_ADDR
// end ; end ;
38061: GO 37810
38063: POP
38064: POP
// end ;
38065: GO 37728
38067: POP
38068: POP
// end ;
38069: PPOPN 4
38071: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38072: LD_INT 0
38074: PPUSH
38075: PPUSH
// result := false ;
38076: LD_ADDR_VAR 0 4
38080: PUSH
38081: LD_INT 0
38083: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38084: LD_VAR 0 1
38088: PPUSH
38089: CALL_OW 264
38093: PUSH
38094: LD_INT 81
38096: EQUAL
38097: NOT
38098: IFFALSE 38102
// exit ;
38100: GO 38346
// index := GetElementIndex ( minersList , unit ) ;
38102: LD_ADDR_VAR 0 5
38106: PUSH
38107: LD_EXP 123
38111: PPUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL 44515 0 2
38121: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38122: LD_EXP 124
38126: PUSH
38127: LD_VAR 0 5
38131: ARRAY
38132: PUSH
38133: LD_EXP 125
38137: GREATEREQUAL
38138: IFFALSE 38142
// exit ;
38140: GO 38346
// ComMoveXY ( unit , x , y ) ;
38142: LD_VAR 0 1
38146: PPUSH
38147: LD_VAR 0 2
38151: PPUSH
38152: LD_VAR 0 3
38156: PPUSH
38157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38161: LD_INT 35
38163: PPUSH
38164: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38168: LD_VAR 0 1
38172: PPUSH
38173: LD_VAR 0 2
38177: PPUSH
38178: LD_VAR 0 3
38182: PPUSH
38183: CALL 76561 0 3
38187: NOT
38188: IFFALSE 38201
38190: PUSH
38191: LD_VAR 0 1
38195: PPUSH
38196: CALL_OW 314
38200: AND
38201: IFFALSE 38205
// exit ;
38203: GO 38346
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38205: LD_VAR 0 2
38209: PPUSH
38210: LD_VAR 0 3
38214: PPUSH
38215: CALL_OW 428
38219: PUSH
38220: LD_VAR 0 1
38224: EQUAL
38225: IFFALSE 38239
38227: PUSH
38228: LD_VAR 0 1
38232: PPUSH
38233: CALL_OW 314
38237: NOT
38238: AND
38239: IFFALSE 38161
// PlaySoundXY ( x , y , PlantMine ) ;
38241: LD_VAR 0 2
38245: PPUSH
38246: LD_VAR 0 3
38250: PPUSH
38251: LD_STRING PlantMine
38253: PPUSH
38254: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38258: LD_VAR 0 2
38262: PPUSH
38263: LD_VAR 0 3
38267: PPUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 255
38277: PPUSH
38278: LD_INT 0
38280: PPUSH
38281: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38285: LD_ADDR_EXP 124
38289: PUSH
38290: LD_EXP 124
38294: PPUSH
38295: LD_VAR 0 5
38299: PUSH
38300: LD_EXP 124
38304: PUSH
38305: LD_VAR 0 5
38309: ARRAY
38310: PUSH
38311: LD_INT 1
38313: PLUS
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PPUSH
38319: LD_VAR 0 2
38323: PUSH
38324: LD_VAR 0 3
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PPUSH
38333: CALL 44732 0 3
38337: ST_TO_ADDR
// result := true ;
38338: LD_ADDR_VAR 0 4
38342: PUSH
38343: LD_INT 1
38345: ST_TO_ADDR
// end ;
38346: LD_VAR 0 4
38350: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38351: LD_INT 0
38353: PPUSH
38354: PPUSH
38355: PPUSH
// if not unit in minersList then
38356: LD_VAR 0 1
38360: PUSH
38361: LD_EXP 123
38365: IN
38366: NOT
38367: IFFALSE 38371
// exit ;
38369: GO 38765
// index := GetElementIndex ( minersList , unit ) ;
38371: LD_ADDR_VAR 0 6
38375: PUSH
38376: LD_EXP 123
38380: PPUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL 44515 0 2
38390: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38391: LD_ADDR_VAR 0 5
38395: PUSH
38396: DOUBLE
38397: LD_EXP 124
38401: PUSH
38402: LD_VAR 0 6
38406: ARRAY
38407: INC
38408: ST_TO_ADDR
38409: LD_INT 1
38411: PUSH
38412: FOR_DOWNTO
38413: IFFALSE 38576
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38415: LD_EXP 124
38419: PUSH
38420: LD_VAR 0 6
38424: ARRAY
38425: PUSH
38426: LD_VAR 0 5
38430: ARRAY
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PUSH
38436: LD_VAR 0 2
38440: EQUAL
38441: IFFALSE 38471
38443: PUSH
38444: LD_EXP 124
38448: PUSH
38449: LD_VAR 0 6
38453: ARRAY
38454: PUSH
38455: LD_VAR 0 5
38459: ARRAY
38460: PUSH
38461: LD_INT 2
38463: ARRAY
38464: PUSH
38465: LD_VAR 0 3
38469: EQUAL
38470: AND
38471: IFFALSE 38574
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38473: LD_EXP 124
38477: PUSH
38478: LD_VAR 0 6
38482: ARRAY
38483: PUSH
38484: LD_VAR 0 5
38488: ARRAY
38489: PUSH
38490: LD_INT 1
38492: ARRAY
38493: PPUSH
38494: LD_EXP 124
38498: PUSH
38499: LD_VAR 0 6
38503: ARRAY
38504: PUSH
38505: LD_VAR 0 5
38509: ARRAY
38510: PUSH
38511: LD_INT 2
38513: ARRAY
38514: PPUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 255
38524: PPUSH
38525: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38529: LD_ADDR_EXP 124
38533: PUSH
38534: LD_EXP 124
38538: PPUSH
38539: LD_VAR 0 6
38543: PPUSH
38544: LD_EXP 124
38548: PUSH
38549: LD_VAR 0 6
38553: ARRAY
38554: PPUSH
38555: LD_VAR 0 5
38559: PPUSH
38560: CALL_OW 3
38564: PPUSH
38565: CALL_OW 1
38569: ST_TO_ADDR
// exit ;
38570: POP
38571: POP
38572: GO 38765
// end ; end ;
38574: GO 38412
38576: POP
38577: POP
// for i := minerMinesList [ index ] downto 1 do
38578: LD_ADDR_VAR 0 5
38582: PUSH
38583: DOUBLE
38584: LD_EXP 124
38588: PUSH
38589: LD_VAR 0 6
38593: ARRAY
38594: INC
38595: ST_TO_ADDR
38596: LD_INT 1
38598: PUSH
38599: FOR_DOWNTO
38600: IFFALSE 38763
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38602: LD_EXP 124
38606: PUSH
38607: LD_VAR 0 6
38611: ARRAY
38612: PUSH
38613: LD_VAR 0 5
38617: ARRAY
38618: PUSH
38619: LD_INT 1
38621: ARRAY
38622: PPUSH
38623: LD_EXP 124
38627: PUSH
38628: LD_VAR 0 6
38632: ARRAY
38633: PUSH
38634: LD_VAR 0 5
38638: ARRAY
38639: PUSH
38640: LD_INT 2
38642: ARRAY
38643: PPUSH
38644: LD_VAR 0 2
38648: PPUSH
38649: LD_VAR 0 3
38653: PPUSH
38654: CALL_OW 298
38658: PUSH
38659: LD_INT 6
38661: LESS
38662: IFFALSE 38761
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38664: LD_EXP 124
38668: PUSH
38669: LD_VAR 0 6
38673: ARRAY
38674: PUSH
38675: LD_VAR 0 5
38679: ARRAY
38680: PUSH
38681: LD_INT 1
38683: ARRAY
38684: PPUSH
38685: LD_EXP 124
38689: PUSH
38690: LD_VAR 0 6
38694: ARRAY
38695: PUSH
38696: LD_VAR 0 5
38700: ARRAY
38701: PUSH
38702: LD_INT 2
38704: ARRAY
38705: PPUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 255
38715: PPUSH
38716: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38720: LD_ADDR_EXP 124
38724: PUSH
38725: LD_EXP 124
38729: PPUSH
38730: LD_VAR 0 6
38734: PPUSH
38735: LD_EXP 124
38739: PUSH
38740: LD_VAR 0 6
38744: ARRAY
38745: PPUSH
38746: LD_VAR 0 5
38750: PPUSH
38751: CALL_OW 3
38755: PPUSH
38756: CALL_OW 1
38760: ST_TO_ADDR
// end ; end ;
38761: GO 38599
38763: POP
38764: POP
// end ;
38765: LD_VAR 0 4
38769: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38770: LD_INT 0
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL_OW 264
38790: PUSH
38791: LD_INT 81
38793: EQUAL
38794: NOT
38795: IFTRUE 38810
38797: PUSH
38798: LD_VAR 0 1
38802: PUSH
38803: LD_EXP 123
38807: IN
38808: NOT
38809: OR
38810: IFFALSE 38814
// exit ;
38812: GO 39140
// index := GetElementIndex ( minersList , unit ) ;
38814: LD_ADDR_VAR 0 6
38818: PUSH
38819: LD_EXP 123
38823: PPUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL 44515 0 2
38833: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38834: LD_ADDR_VAR 0 8
38838: PUSH
38839: LD_EXP 125
38843: PUSH
38844: LD_EXP 124
38848: PUSH
38849: LD_VAR 0 6
38853: ARRAY
38854: MINUS
38855: ST_TO_ADDR
// if not minesFreeAmount then
38856: LD_VAR 0 8
38860: NOT
38861: IFFALSE 38865
// exit ;
38863: GO 39140
// tmp := [ ] ;
38865: LD_ADDR_VAR 0 7
38869: PUSH
38870: EMPTY
38871: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38872: LD_ADDR_VAR 0 5
38876: PUSH
38877: DOUBLE
38878: LD_INT 1
38880: DEC
38881: ST_TO_ADDR
38882: LD_VAR 0 8
38886: PUSH
38887: FOR_TO
38888: IFFALSE 39087
// begin _d := rand ( 0 , 5 ) ;
38890: LD_ADDR_VAR 0 11
38894: PUSH
38895: LD_INT 0
38897: PPUSH
38898: LD_INT 5
38900: PPUSH
38901: CALL_OW 12
38905: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38906: LD_ADDR_VAR 0 12
38910: PUSH
38911: LD_INT 2
38913: PPUSH
38914: LD_INT 6
38916: PPUSH
38917: CALL_OW 12
38921: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38922: LD_ADDR_VAR 0 9
38926: PUSH
38927: LD_VAR 0 2
38931: PPUSH
38932: LD_VAR 0 11
38936: PPUSH
38937: LD_VAR 0 12
38941: PPUSH
38942: CALL_OW 272
38946: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38947: LD_ADDR_VAR 0 10
38951: PUSH
38952: LD_VAR 0 3
38956: PPUSH
38957: LD_VAR 0 11
38961: PPUSH
38962: LD_VAR 0 12
38966: PPUSH
38967: CALL_OW 273
38971: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38972: LD_VAR 0 9
38976: PPUSH
38977: LD_VAR 0 10
38981: PPUSH
38982: CALL_OW 488
38986: IFFALSE 39010
38988: PUSH
38989: LD_VAR 0 9
38993: PUSH
38994: LD_VAR 0 10
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_VAR 0 7
39007: IN
39008: NOT
39009: AND
39010: IFFALSE 39029
39012: PUSH
39013: LD_VAR 0 9
39017: PPUSH
39018: LD_VAR 0 10
39022: PPUSH
39023: CALL_OW 458
39027: NOT
39028: AND
39029: IFFALSE 39071
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39031: LD_ADDR_VAR 0 7
39035: PUSH
39036: LD_VAR 0 7
39040: PPUSH
39041: LD_VAR 0 7
39045: PUSH
39046: LD_INT 1
39048: PLUS
39049: PPUSH
39050: LD_VAR 0 9
39054: PUSH
39055: LD_VAR 0 10
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PPUSH
39064: CALL_OW 1
39068: ST_TO_ADDR
39069: GO 39085
// i := i - 1 ;
39071: LD_ADDR_VAR 0 5
39075: PUSH
39076: LD_VAR 0 5
39080: PUSH
39081: LD_INT 1
39083: MINUS
39084: ST_TO_ADDR
// end ;
39085: GO 38887
39087: POP
39088: POP
// for i in tmp do
39089: LD_ADDR_VAR 0 5
39093: PUSH
39094: LD_VAR 0 7
39098: PUSH
39099: FOR_IN
39100: IFFALSE 39138
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39102: LD_VAR 0 1
39106: PPUSH
39107: LD_VAR 0 5
39111: PUSH
39112: LD_INT 1
39114: ARRAY
39115: PPUSH
39116: LD_VAR 0 5
39120: PUSH
39121: LD_INT 2
39123: ARRAY
39124: PPUSH
39125: CALL 38072 0 3
39129: NOT
39130: IFFALSE 39136
// exit ;
39132: POP
39133: POP
39134: GO 39140
39136: GO 39099
39138: POP
39139: POP
// end ;
39140: LD_VAR 0 4
39144: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
39145: LD_INT 0
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
// if GetClass ( unit ) <> class_sniper then
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 257
39165: PUSH
39166: LD_INT 5
39168: NONEQUAL
39169: IFFALSE 39173
// exit ;
39171: GO 39643
// dist := 8 ;
39173: LD_ADDR_VAR 0 5
39177: PUSH
39178: LD_INT 8
39180: ST_TO_ADDR
// viewRange := 12 ;
39181: LD_ADDR_VAR 0 8
39185: PUSH
39186: LD_INT 12
39188: ST_TO_ADDR
// side := GetSide ( unit ) ;
39189: LD_ADDR_VAR 0 6
39193: PUSH
39194: LD_VAR 0 1
39198: PPUSH
39199: CALL_OW 255
39203: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39204: LD_INT 61
39206: PPUSH
39207: LD_VAR 0 6
39211: PPUSH
39212: CALL_OW 321
39216: PUSH
39217: LD_INT 2
39219: EQUAL
39220: IFFALSE 39230
// viewRange := 16 ;
39222: LD_ADDR_VAR 0 8
39226: PUSH
39227: LD_INT 16
39229: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39230: LD_VAR 0 1
39234: PPUSH
39235: LD_VAR 0 2
39239: PPUSH
39240: LD_VAR 0 3
39244: PPUSH
39245: CALL_OW 297
39249: PUSH
39250: LD_VAR 0 5
39254: GREATER
39255: IFFALSE 39334
// begin ComMoveXY ( unit , x , y ) ;
39257: LD_VAR 0 1
39261: PPUSH
39262: LD_VAR 0 2
39266: PPUSH
39267: LD_VAR 0 3
39271: PPUSH
39272: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39276: LD_INT 35
39278: PPUSH
39279: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39283: LD_VAR 0 1
39287: PPUSH
39288: LD_VAR 0 2
39292: PPUSH
39293: LD_VAR 0 3
39297: PPUSH
39298: CALL 76561 0 3
39302: NOT
39303: IFFALSE 39307
// exit ;
39305: GO 39643
// until GetDistUnitXY ( unit , x , y ) < dist ;
39307: LD_VAR 0 1
39311: PPUSH
39312: LD_VAR 0 2
39316: PPUSH
39317: LD_VAR 0 3
39321: PPUSH
39322: CALL_OW 297
39326: PUSH
39327: LD_VAR 0 5
39331: LESS
39332: IFFALSE 39276
// end ; ComTurnXY ( unit , x , y ) ;
39334: LD_VAR 0 1
39338: PPUSH
39339: LD_VAR 0 2
39343: PPUSH
39344: LD_VAR 0 3
39348: PPUSH
39349: CALL_OW 118
// repeat if Multiplayer then
39353: LD_OWVAR 4
39357: IFFALSE 39368
// wait ( 35 ) else
39359: LD_INT 35
39361: PPUSH
39362: CALL_OW 67
39366: GO 39375
// wait ( 5 ) ;
39368: LD_INT 5
39370: PPUSH
39371: CALL_OW 67
// _d := GetDir ( unit ) ;
39375: LD_ADDR_VAR 0 11
39379: PUSH
39380: LD_VAR 0 1
39384: PPUSH
39385: CALL_OW 254
39389: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
39390: LD_ADDR_VAR 0 7
39394: PUSH
39395: LD_VAR 0 1
39399: PPUSH
39400: CALL_OW 250
39404: PPUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 251
39414: PPUSH
39415: LD_VAR 0 2
39419: PPUSH
39420: LD_VAR 0 3
39424: PPUSH
39425: CALL 79197 0 4
39429: ST_TO_ADDR
// until dir = _d ;
39430: LD_VAR 0 7
39434: PUSH
39435: LD_VAR 0 11
39439: EQUAL
39440: IFFALSE 39353
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
39442: LD_ADDR_VAR 0 9
39446: PUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 250
39456: PPUSH
39457: LD_VAR 0 7
39461: PPUSH
39462: LD_VAR 0 5
39466: PPUSH
39467: CALL_OW 272
39471: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
39472: LD_ADDR_VAR 0 10
39476: PUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 251
39486: PPUSH
39487: LD_VAR 0 7
39491: PPUSH
39492: LD_VAR 0 5
39496: PPUSH
39497: CALL_OW 273
39501: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39502: LD_VAR 0 9
39506: PPUSH
39507: LD_VAR 0 10
39511: PPUSH
39512: CALL_OW 488
39516: NOT
39517: IFFALSE 39521
// exit ;
39519: GO 39643
// ComAnimCustom ( unit , 1 ) ;
39521: LD_VAR 0 1
39525: PPUSH
39526: LD_INT 1
39528: PPUSH
39529: CALL_OW 592
// p := 0 ;
39533: LD_ADDR_VAR 0 12
39537: PUSH
39538: LD_INT 0
39540: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39541: LD_VAR 0 9
39545: PPUSH
39546: LD_VAR 0 10
39550: PPUSH
39551: LD_VAR 0 6
39555: PPUSH
39556: LD_VAR 0 8
39560: PPUSH
39561: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
39565: LD_INT 35
39567: PPUSH
39568: CALL_OW 67
// p := Inc ( p ) ;
39572: LD_ADDR_VAR 0 12
39576: PUSH
39577: LD_VAR 0 12
39581: PPUSH
39582: CALL 79153 0 1
39586: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
39587: LD_VAR 0 12
39591: PUSH
39592: LD_INT 3
39594: EQUAL
39595: IFTRUE 39609
39597: PUSH
39598: LD_VAR 0 1
39602: PPUSH
39603: CALL_OW 302
39607: NOT
39608: OR
39609: IFTRUE 39622
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 301
39621: OR
39622: IFFALSE 39565
// RemoveSeeing ( _x , _y , side ) ;
39624: LD_VAR 0 9
39628: PPUSH
39629: LD_VAR 0 10
39633: PPUSH
39634: LD_VAR 0 6
39638: PPUSH
39639: CALL_OW 331
// end ; end_of_file
39643: LD_VAR 0 4
39647: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39648: LD_INT 0
39650: PPUSH
39651: PPUSH
// if exist_mode then
39652: LD_VAR 0 2
39656: IFFALSE 39702
// begin unit := CreateCharacter ( prefix & ident ) ;
39658: LD_ADDR_VAR 0 5
39662: PUSH
39663: LD_VAR 0 3
39667: PUSH
39668: LD_VAR 0 1
39672: STR
39673: PPUSH
39674: CALL_OW 34
39678: ST_TO_ADDR
// if unit then
39679: LD_VAR 0 5
39683: IFFALSE 39700
// DeleteCharacters ( prefix & ident ) ;
39685: LD_VAR 0 3
39689: PUSH
39690: LD_VAR 0 1
39694: STR
39695: PPUSH
39696: CALL_OW 40
// end else
39700: GO 39717
// unit := NewCharacter ( ident ) ;
39702: LD_ADDR_VAR 0 5
39706: PUSH
39707: LD_VAR 0 1
39711: PPUSH
39712: CALL_OW 25
39716: ST_TO_ADDR
// result := unit ;
39717: LD_ADDR_VAR 0 4
39721: PUSH
39722: LD_VAR 0 5
39726: ST_TO_ADDR
// end ;
39727: LD_VAR 0 4
39731: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
39732: LD_INT 0
39734: PPUSH
39735: PPUSH
// if exist_mode then
39736: LD_VAR 0 2
39740: IFFALSE 39765
// unit := CreateCharacter ( prefix & ident ) else
39742: LD_ADDR_VAR 0 5
39746: PUSH
39747: LD_VAR 0 3
39751: PUSH
39752: LD_VAR 0 1
39756: STR
39757: PPUSH
39758: CALL_OW 34
39762: ST_TO_ADDR
39763: GO 39780
// unit := NewCharacter ( ident ) ;
39765: LD_ADDR_VAR 0 5
39769: PUSH
39770: LD_VAR 0 1
39774: PPUSH
39775: CALL_OW 25
39779: ST_TO_ADDR
// result := unit ;
39780: LD_ADDR_VAR 0 4
39784: PUSH
39785: LD_VAR 0 5
39789: ST_TO_ADDR
// end ;
39790: LD_VAR 0 4
39794: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39795: LD_INT 0
39797: PPUSH
39798: PPUSH
// if not side or not nation then
39799: LD_VAR 0 1
39803: NOT
39804: IFTRUE 39813
39806: PUSH
39807: LD_VAR 0 2
39811: NOT
39812: OR
39813: IFFALSE 39817
// exit ;
39815: GO 40587
// case nation of nation_american :
39817: LD_VAR 0 2
39821: PUSH
39822: LD_INT 1
39824: DOUBLE
39825: EQUAL
39826: IFTRUE 39830
39828: GO 40044
39830: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39831: LD_ADDR_VAR 0 4
39835: PUSH
39836: LD_INT 35
39838: PUSH
39839: LD_INT 45
39841: PUSH
39842: LD_INT 46
39844: PUSH
39845: LD_INT 47
39847: PUSH
39848: LD_INT 82
39850: PUSH
39851: LD_INT 83
39853: PUSH
39854: LD_INT 84
39856: PUSH
39857: LD_INT 85
39859: PUSH
39860: LD_INT 86
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 6
39871: PUSH
39872: LD_INT 15
39874: PUSH
39875: LD_INT 16
39877: PUSH
39878: LD_INT 7
39880: PUSH
39881: LD_INT 12
39883: PUSH
39884: LD_INT 13
39886: PUSH
39887: LD_INT 10
39889: PUSH
39890: LD_INT 14
39892: PUSH
39893: LD_INT 20
39895: PUSH
39896: LD_INT 21
39898: PUSH
39899: LD_INT 22
39901: PUSH
39902: LD_INT 25
39904: PUSH
39905: LD_INT 32
39907: PUSH
39908: LD_INT 27
39910: PUSH
39911: LD_INT 36
39913: PUSH
39914: LD_INT 69
39916: PUSH
39917: LD_INT 39
39919: PUSH
39920: LD_INT 34
39922: PUSH
39923: LD_INT 40
39925: PUSH
39926: LD_INT 48
39928: PUSH
39929: LD_INT 49
39931: PUSH
39932: LD_INT 50
39934: PUSH
39935: LD_INT 51
39937: PUSH
39938: LD_INT 52
39940: PUSH
39941: LD_INT 53
39943: PUSH
39944: LD_INT 54
39946: PUSH
39947: LD_INT 55
39949: PUSH
39950: LD_INT 56
39952: PUSH
39953: LD_INT 57
39955: PUSH
39956: LD_INT 58
39958: PUSH
39959: LD_INT 59
39961: PUSH
39962: LD_INT 60
39964: PUSH
39965: LD_INT 61
39967: PUSH
39968: LD_INT 62
39970: PUSH
39971: LD_INT 80
39973: PUSH
39974: LD_INT 82
39976: PUSH
39977: LD_INT 83
39979: PUSH
39980: LD_INT 84
39982: PUSH
39983: LD_INT 85
39985: PUSH
39986: LD_INT 86
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: ST_TO_ADDR
40042: GO 40509
40044: LD_INT 2
40046: DOUBLE
40047: EQUAL
40048: IFTRUE 40052
40050: GO 40278
40052: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40053: LD_ADDR_VAR 0 4
40057: PUSH
40058: LD_INT 35
40060: PUSH
40061: LD_INT 45
40063: PUSH
40064: LD_INT 46
40066: PUSH
40067: LD_INT 47
40069: PUSH
40070: LD_INT 82
40072: PUSH
40073: LD_INT 83
40075: PUSH
40076: LD_INT 84
40078: PUSH
40079: LD_INT 85
40081: PUSH
40082: LD_INT 87
40084: PUSH
40085: LD_INT 70
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: LD_INT 11
40093: PUSH
40094: LD_INT 3
40096: PUSH
40097: LD_INT 4
40099: PUSH
40100: LD_INT 5
40102: PUSH
40103: LD_INT 6
40105: PUSH
40106: LD_INT 15
40108: PUSH
40109: LD_INT 18
40111: PUSH
40112: LD_INT 7
40114: PUSH
40115: LD_INT 17
40117: PUSH
40118: LD_INT 8
40120: PUSH
40121: LD_INT 20
40123: PUSH
40124: LD_INT 21
40126: PUSH
40127: LD_INT 22
40129: PUSH
40130: LD_INT 72
40132: PUSH
40133: LD_INT 26
40135: PUSH
40136: LD_INT 69
40138: PUSH
40139: LD_INT 39
40141: PUSH
40142: LD_INT 40
40144: PUSH
40145: LD_INT 41
40147: PUSH
40148: LD_INT 42
40150: PUSH
40151: LD_INT 43
40153: PUSH
40154: LD_INT 48
40156: PUSH
40157: LD_INT 49
40159: PUSH
40160: LD_INT 50
40162: PUSH
40163: LD_INT 51
40165: PUSH
40166: LD_INT 52
40168: PUSH
40169: LD_INT 53
40171: PUSH
40172: LD_INT 54
40174: PUSH
40175: LD_INT 55
40177: PUSH
40178: LD_INT 56
40180: PUSH
40181: LD_INT 60
40183: PUSH
40184: LD_INT 61
40186: PUSH
40187: LD_INT 62
40189: PUSH
40190: LD_INT 66
40192: PUSH
40193: LD_INT 67
40195: PUSH
40196: LD_INT 68
40198: PUSH
40199: LD_INT 81
40201: PUSH
40202: LD_INT 82
40204: PUSH
40205: LD_INT 83
40207: PUSH
40208: LD_INT 84
40210: PUSH
40211: LD_INT 85
40213: PUSH
40214: LD_INT 87
40216: PUSH
40217: LD_INT 88
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: ST_TO_ADDR
40276: GO 40509
40278: LD_INT 3
40280: DOUBLE
40281: EQUAL
40282: IFTRUE 40286
40284: GO 40508
40286: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40287: LD_ADDR_VAR 0 4
40291: PUSH
40292: LD_INT 46
40294: PUSH
40295: LD_INT 47
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 82
40306: PUSH
40307: LD_INT 83
40309: PUSH
40310: LD_INT 84
40312: PUSH
40313: LD_INT 85
40315: PUSH
40316: LD_INT 86
40318: PUSH
40319: LD_INT 11
40321: PUSH
40322: LD_INT 9
40324: PUSH
40325: LD_INT 20
40327: PUSH
40328: LD_INT 19
40330: PUSH
40331: LD_INT 21
40333: PUSH
40334: LD_INT 24
40336: PUSH
40337: LD_INT 22
40339: PUSH
40340: LD_INT 25
40342: PUSH
40343: LD_INT 28
40345: PUSH
40346: LD_INT 29
40348: PUSH
40349: LD_INT 30
40351: PUSH
40352: LD_INT 31
40354: PUSH
40355: LD_INT 37
40357: PUSH
40358: LD_INT 38
40360: PUSH
40361: LD_INT 32
40363: PUSH
40364: LD_INT 27
40366: PUSH
40367: LD_INT 33
40369: PUSH
40370: LD_INT 69
40372: PUSH
40373: LD_INT 39
40375: PUSH
40376: LD_INT 34
40378: PUSH
40379: LD_INT 40
40381: PUSH
40382: LD_INT 71
40384: PUSH
40385: LD_INT 23
40387: PUSH
40388: LD_INT 44
40390: PUSH
40391: LD_INT 48
40393: PUSH
40394: LD_INT 49
40396: PUSH
40397: LD_INT 50
40399: PUSH
40400: LD_INT 51
40402: PUSH
40403: LD_INT 52
40405: PUSH
40406: LD_INT 53
40408: PUSH
40409: LD_INT 54
40411: PUSH
40412: LD_INT 55
40414: PUSH
40415: LD_INT 56
40417: PUSH
40418: LD_INT 57
40420: PUSH
40421: LD_INT 58
40423: PUSH
40424: LD_INT 59
40426: PUSH
40427: LD_INT 63
40429: PUSH
40430: LD_INT 64
40432: PUSH
40433: LD_INT 65
40435: PUSH
40436: LD_INT 82
40438: PUSH
40439: LD_INT 83
40441: PUSH
40442: LD_INT 84
40444: PUSH
40445: LD_INT 85
40447: PUSH
40448: LD_INT 86
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
40506: GO 40509
40508: POP
// if state > - 1 and state < 3 then
40509: LD_VAR 0 3
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: GREATER
40518: IFFALSE 40530
40520: PUSH
40521: LD_VAR 0 3
40525: PUSH
40526: LD_INT 3
40528: LESS
40529: AND
40530: IFFALSE 40587
// for i in result do
40532: LD_ADDR_VAR 0 5
40536: PUSH
40537: LD_VAR 0 4
40541: PUSH
40542: FOR_IN
40543: IFFALSE 40585
// if GetTech ( i , side ) <> state then
40545: LD_VAR 0 5
40549: PPUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: CALL_OW 321
40559: PUSH
40560: LD_VAR 0 3
40564: NONEQUAL
40565: IFFALSE 40583
// result := result diff i ;
40567: LD_ADDR_VAR 0 4
40571: PUSH
40572: LD_VAR 0 4
40576: PUSH
40577: LD_VAR 0 5
40581: DIFF
40582: ST_TO_ADDR
40583: GO 40542
40585: POP
40586: POP
// end ;
40587: LD_VAR 0 4
40591: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40592: LD_INT 0
40594: PPUSH
40595: PPUSH
40596: PPUSH
// result := true ;
40597: LD_ADDR_VAR 0 3
40601: PUSH
40602: LD_INT 1
40604: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40605: LD_ADDR_VAR 0 5
40609: PUSH
40610: LD_VAR 0 2
40614: PPUSH
40615: CALL_OW 480
40619: ST_TO_ADDR
// if not tmp then
40620: LD_VAR 0 5
40624: NOT
40625: IFFALSE 40629
// exit ;
40627: GO 40678
// for i in tmp do
40629: LD_ADDR_VAR 0 4
40633: PUSH
40634: LD_VAR 0 5
40638: PUSH
40639: FOR_IN
40640: IFFALSE 40676
// if GetTech ( i , side ) <> state_researched then
40642: LD_VAR 0 4
40646: PPUSH
40647: LD_VAR 0 1
40651: PPUSH
40652: CALL_OW 321
40656: PUSH
40657: LD_INT 2
40659: NONEQUAL
40660: IFFALSE 40674
// begin result := false ;
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_INT 0
40669: ST_TO_ADDR
// exit ;
40670: POP
40671: POP
40672: GO 40678
// end ;
40674: GO 40639
40676: POP
40677: POP
// end ;
40678: LD_VAR 0 3
40682: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40683: LD_INT 0
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
40689: PPUSH
40690: PPUSH
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40698: LD_VAR 0 1
40702: NOT
40703: IFTRUE 40720
40705: PUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 257
40715: PUSH
40716: LD_INT 9
40718: NONEQUAL
40719: OR
40720: IFFALSE 40724
// exit ;
40722: GO 41303
// side := GetSide ( unit ) ;
40724: LD_ADDR_VAR 0 9
40728: PUSH
40729: LD_VAR 0 1
40733: PPUSH
40734: CALL_OW 255
40738: ST_TO_ADDR
// tech_space := tech_spacanom ;
40739: LD_ADDR_VAR 0 12
40743: PUSH
40744: LD_INT 29
40746: ST_TO_ADDR
// tech_time := tech_taurad ;
40747: LD_ADDR_VAR 0 13
40751: PUSH
40752: LD_INT 28
40754: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40755: LD_ADDR_VAR 0 11
40759: PUSH
40760: LD_VAR 0 1
40764: PPUSH
40765: CALL_OW 310
40769: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40770: LD_VAR 0 11
40774: PPUSH
40775: CALL_OW 247
40779: PUSH
40780: LD_INT 2
40782: EQUAL
40783: IFFALSE 40787
// exit ;
40785: GO 41303
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40787: LD_ADDR_VAR 0 8
40791: PUSH
40792: LD_INT 81
40794: PUSH
40795: LD_VAR 0 9
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: LD_INT 21
40809: PUSH
40810: LD_INT 3
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PPUSH
40825: CALL_OW 69
40829: ST_TO_ADDR
// if not tmp then
40830: LD_VAR 0 8
40834: NOT
40835: IFFALSE 40839
// exit ;
40837: GO 41303
// if in_unit then
40839: LD_VAR 0 11
40843: IFFALSE 40867
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40845: LD_ADDR_VAR 0 10
40849: PUSH
40850: LD_VAR 0 8
40854: PPUSH
40855: LD_VAR 0 11
40859: PPUSH
40860: CALL_OW 74
40864: ST_TO_ADDR
40865: GO 40887
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40867: LD_ADDR_VAR 0 10
40871: PUSH
40872: LD_VAR 0 8
40876: PPUSH
40877: LD_VAR 0 1
40881: PPUSH
40882: CALL_OW 74
40886: ST_TO_ADDR
// if not enemy then
40887: LD_VAR 0 10
40891: NOT
40892: IFFALSE 40896
// exit ;
40894: GO 41303
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40896: LD_VAR 0 11
40900: IFFALSE 40922
40902: PUSH
40903: LD_VAR 0 11
40907: PPUSH
40908: LD_VAR 0 10
40912: PPUSH
40913: CALL_OW 296
40917: PUSH
40918: LD_INT 13
40920: GREATER
40921: AND
40922: IFTRUE 40944
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: LD_VAR 0 10
40934: PPUSH
40935: CALL_OW 296
40939: PUSH
40940: LD_INT 12
40942: GREATER
40943: OR
40944: IFFALSE 40948
// exit ;
40946: GO 41303
// missile := [ 1 ] ;
40948: LD_ADDR_VAR 0 14
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: EMPTY
40957: LIST
40958: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40959: LD_VAR 0 9
40963: PPUSH
40964: LD_VAR 0 12
40968: PPUSH
40969: CALL_OW 325
40973: IFFALSE 41002
// missile := Replace ( missile , missile + 1 , 2 ) ;
40975: LD_ADDR_VAR 0 14
40979: PUSH
40980: LD_VAR 0 14
40984: PPUSH
40985: LD_VAR 0 14
40989: PUSH
40990: LD_INT 1
40992: PLUS
40993: PPUSH
40994: LD_INT 2
40996: PPUSH
40997: CALL_OW 1
41001: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41002: LD_VAR 0 9
41006: PPUSH
41007: LD_VAR 0 13
41011: PPUSH
41012: CALL_OW 325
41016: IFFALSE 41040
41018: PUSH
41019: LD_VAR 0 10
41023: PPUSH
41024: CALL_OW 255
41028: PPUSH
41029: LD_VAR 0 13
41033: PPUSH
41034: CALL_OW 325
41038: NOT
41039: AND
41040: IFFALSE 41069
// missile := Replace ( missile , missile + 1 , 3 ) ;
41042: LD_ADDR_VAR 0 14
41046: PUSH
41047: LD_VAR 0 14
41051: PPUSH
41052: LD_VAR 0 14
41056: PUSH
41057: LD_INT 1
41059: PLUS
41060: PPUSH
41061: LD_INT 3
41063: PPUSH
41064: CALL_OW 1
41068: ST_TO_ADDR
// if missile < 2 then
41069: LD_VAR 0 14
41073: PUSH
41074: LD_INT 2
41076: LESS
41077: IFFALSE 41081
// exit ;
41079: GO 41303
// x := GetX ( enemy ) ;
41081: LD_ADDR_VAR 0 4
41085: PUSH
41086: LD_VAR 0 10
41090: PPUSH
41091: CALL_OW 250
41095: ST_TO_ADDR
// y := GetY ( enemy ) ;
41096: LD_ADDR_VAR 0 5
41100: PUSH
41101: LD_VAR 0 10
41105: PPUSH
41106: CALL_OW 251
41110: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41111: LD_ADDR_VAR 0 6
41115: PUSH
41116: LD_VAR 0 4
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PPUSH
41125: LD_INT 1
41127: PPUSH
41128: CALL_OW 12
41132: PLUS
41133: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41134: LD_ADDR_VAR 0 7
41138: PUSH
41139: LD_VAR 0 5
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PPUSH
41148: LD_INT 1
41150: PPUSH
41151: CALL_OW 12
41155: PLUS
41156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41157: LD_VAR 0 6
41161: PPUSH
41162: LD_VAR 0 7
41166: PPUSH
41167: CALL_OW 488
41171: NOT
41172: IFFALSE 41194
// begin _x := x ;
41174: LD_ADDR_VAR 0 6
41178: PUSH
41179: LD_VAR 0 4
41183: ST_TO_ADDR
// _y := y ;
41184: LD_ADDR_VAR 0 7
41188: PUSH
41189: LD_VAR 0 5
41193: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41194: LD_ADDR_VAR 0 3
41198: PUSH
41199: LD_INT 1
41201: PPUSH
41202: LD_VAR 0 14
41206: PPUSH
41207: CALL_OW 12
41211: ST_TO_ADDR
// case i of 1 :
41212: LD_VAR 0 3
41216: PUSH
41217: LD_INT 1
41219: DOUBLE
41220: EQUAL
41221: IFTRUE 41225
41223: GO 41242
41225: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41226: LD_VAR 0 1
41230: PPUSH
41231: LD_VAR 0 10
41235: PPUSH
41236: CALL_OW 115
41240: GO 41303
41242: LD_INT 2
41244: DOUBLE
41245: EQUAL
41246: IFTRUE 41250
41248: GO 41272
41250: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41251: LD_VAR 0 1
41255: PPUSH
41256: LD_VAR 0 6
41260: PPUSH
41261: LD_VAR 0 7
41265: PPUSH
41266: CALL_OW 153
41270: GO 41303
41272: LD_INT 3
41274: DOUBLE
41275: EQUAL
41276: IFTRUE 41280
41278: GO 41302
41280: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41281: LD_VAR 0 1
41285: PPUSH
41286: LD_VAR 0 6
41290: PPUSH
41291: LD_VAR 0 7
41295: PPUSH
41296: CALL_OW 154
41300: GO 41303
41302: POP
// end ;
41303: LD_VAR 0 2
41307: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41308: LD_INT 0
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
// if not unit or not building then
41316: LD_VAR 0 1
41320: NOT
41321: IFTRUE 41330
41323: PUSH
41324: LD_VAR 0 2
41328: NOT
41329: OR
41330: IFFALSE 41334
// exit ;
41332: GO 41492
// x := GetX ( building ) ;
41334: LD_ADDR_VAR 0 5
41338: PUSH
41339: LD_VAR 0 2
41343: PPUSH
41344: CALL_OW 250
41348: ST_TO_ADDR
// y := GetY ( building ) ;
41349: LD_ADDR_VAR 0 6
41353: PUSH
41354: LD_VAR 0 2
41358: PPUSH
41359: CALL_OW 251
41363: ST_TO_ADDR
// for i := 0 to 5 do
41364: LD_ADDR_VAR 0 4
41368: PUSH
41369: DOUBLE
41370: LD_INT 0
41372: DEC
41373: ST_TO_ADDR
41374: LD_INT 5
41376: PUSH
41377: FOR_TO
41378: IFFALSE 41490
// begin _x := ShiftX ( x , i , 3 ) ;
41380: LD_ADDR_VAR 0 7
41384: PUSH
41385: LD_VAR 0 5
41389: PPUSH
41390: LD_VAR 0 4
41394: PPUSH
41395: LD_INT 3
41397: PPUSH
41398: CALL_OW 272
41402: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41403: LD_ADDR_VAR 0 8
41407: PUSH
41408: LD_VAR 0 6
41412: PPUSH
41413: LD_VAR 0 4
41417: PPUSH
41418: LD_INT 3
41420: PPUSH
41421: CALL_OW 273
41425: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41426: LD_VAR 0 7
41430: PPUSH
41431: LD_VAR 0 8
41435: PPUSH
41436: CALL_OW 488
41440: NOT
41441: IFFALSE 41445
// continue ;
41443: GO 41377
// if HexInfo ( _x , _y ) = 0 then
41445: LD_VAR 0 7
41449: PPUSH
41450: LD_VAR 0 8
41454: PPUSH
41455: CALL_OW 428
41459: PUSH
41460: LD_INT 0
41462: EQUAL
41463: IFFALSE 41488
// begin ComMoveXY ( unit , _x , _y ) ;
41465: LD_VAR 0 1
41469: PPUSH
41470: LD_VAR 0 7
41474: PPUSH
41475: LD_VAR 0 8
41479: PPUSH
41480: CALL_OW 111
// exit ;
41484: POP
41485: POP
41486: GO 41492
// end ; end ;
41488: GO 41377
41490: POP
41491: POP
// end ;
41492: LD_VAR 0 3
41496: RET
// export function ScanBase ( side , base_area ) ; begin
41497: LD_INT 0
41499: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41500: LD_ADDR_VAR 0 3
41504: PUSH
41505: LD_VAR 0 2
41509: PPUSH
41510: LD_INT 81
41512: PUSH
41513: LD_VAR 0 1
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PPUSH
41522: CALL_OW 70
41526: ST_TO_ADDR
// end ;
41527: LD_VAR 0 3
41531: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41532: LD_INT 0
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
// result := false ;
41538: LD_ADDR_VAR 0 2
41542: PUSH
41543: LD_INT 0
41545: ST_TO_ADDR
// side := GetSide ( unit ) ;
41546: LD_ADDR_VAR 0 3
41550: PUSH
41551: LD_VAR 0 1
41555: PPUSH
41556: CALL_OW 255
41560: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41561: LD_ADDR_VAR 0 4
41565: PUSH
41566: LD_VAR 0 1
41570: PPUSH
41571: CALL_OW 248
41575: ST_TO_ADDR
// case nat of 1 :
41576: LD_VAR 0 4
41580: PUSH
41581: LD_INT 1
41583: DOUBLE
41584: EQUAL
41585: IFTRUE 41589
41587: GO 41600
41589: POP
// tech := tech_lassight ; 2 :
41590: LD_ADDR_VAR 0 5
41594: PUSH
41595: LD_INT 12
41597: ST_TO_ADDR
41598: GO 41639
41600: LD_INT 2
41602: DOUBLE
41603: EQUAL
41604: IFTRUE 41608
41606: GO 41619
41608: POP
// tech := tech_mortar ; 3 :
41609: LD_ADDR_VAR 0 5
41613: PUSH
41614: LD_INT 41
41616: ST_TO_ADDR
41617: GO 41639
41619: LD_INT 3
41621: DOUBLE
41622: EQUAL
41623: IFTRUE 41627
41625: GO 41638
41627: POP
// tech := tech_bazooka ; end ;
41628: LD_ADDR_VAR 0 5
41632: PUSH
41633: LD_INT 44
41635: ST_TO_ADDR
41636: GO 41639
41638: POP
// if Researched ( side , tech ) then
41639: LD_VAR 0 3
41643: PPUSH
41644: LD_VAR 0 5
41648: PPUSH
41649: CALL_OW 325
41653: IFFALSE 41680
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41655: LD_ADDR_VAR 0 2
41659: PUSH
41660: LD_INT 5
41662: PUSH
41663: LD_INT 8
41665: PUSH
41666: LD_INT 9
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: PUSH
41674: LD_VAR 0 4
41678: ARRAY
41679: ST_TO_ADDR
// end ;
41680: LD_VAR 0 2
41684: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41685: LD_INT 0
41687: PPUSH
41688: PPUSH
41689: PPUSH
// if not mines then
41690: LD_VAR 0 2
41694: NOT
41695: IFFALSE 41699
// exit ;
41697: GO 41843
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41699: LD_ADDR_VAR 0 5
41703: PUSH
41704: LD_INT 81
41706: PUSH
41707: LD_VAR 0 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: LD_INT 21
41721: PUSH
41722: LD_INT 3
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PPUSH
41737: CALL_OW 69
41741: ST_TO_ADDR
// for i in mines do
41742: LD_ADDR_VAR 0 4
41746: PUSH
41747: LD_VAR 0 2
41751: PUSH
41752: FOR_IN
41753: IFFALSE 41841
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41755: LD_VAR 0 4
41759: PUSH
41760: LD_INT 1
41762: ARRAY
41763: PPUSH
41764: LD_VAR 0 4
41768: PUSH
41769: LD_INT 2
41771: ARRAY
41772: PPUSH
41773: CALL_OW 458
41777: NOT
41778: IFFALSE 41782
// continue ;
41780: GO 41752
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41782: LD_VAR 0 4
41786: PUSH
41787: LD_INT 1
41789: ARRAY
41790: PPUSH
41791: LD_VAR 0 4
41795: PUSH
41796: LD_INT 2
41798: ARRAY
41799: PPUSH
41800: CALL_OW 428
41804: PUSH
41805: LD_VAR 0 5
41809: IN
41810: IFFALSE 41839
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41812: LD_VAR 0 4
41816: PUSH
41817: LD_INT 1
41819: ARRAY
41820: PPUSH
41821: LD_VAR 0 4
41825: PUSH
41826: LD_INT 2
41828: ARRAY
41829: PPUSH
41830: LD_VAR 0 1
41834: PPUSH
41835: CALL_OW 456
// end ;
41839: GO 41752
41841: POP
41842: POP
// end ;
41843: LD_VAR 0 3
41847: RET
// export function Count ( array ) ; begin
41848: LD_INT 0
41850: PPUSH
// result := array + 0 ;
41851: LD_ADDR_VAR 0 2
41855: PUSH
41856: LD_VAR 0 1
41860: PUSH
41861: LD_INT 0
41863: PLUS
41864: ST_TO_ADDR
// end ;
41865: LD_VAR 0 2
41869: RET
// export function IsEmpty ( building ) ; begin
41870: LD_INT 0
41872: PPUSH
// if not building then
41873: LD_VAR 0 1
41877: NOT
41878: IFFALSE 41882
// exit ;
41880: GO 41925
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41882: LD_ADDR_VAR 0 2
41886: PUSH
41887: LD_VAR 0 1
41891: PUSH
41892: LD_INT 22
41894: PUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: CALL_OW 255
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 58
41911: PUSH
41912: EMPTY
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PPUSH
41919: CALL_OW 69
41923: IN
41924: ST_TO_ADDR
// end ;
41925: LD_VAR 0 2
41929: RET
// export function IsNotFull ( building ) ; var places ; begin
41930: LD_INT 0
41932: PPUSH
41933: PPUSH
// if not building then
41934: LD_VAR 0 1
41938: NOT
41939: IFFALSE 41943
// exit ;
41941: GO 41971
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41943: LD_ADDR_VAR 0 2
41947: PUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: LD_INT 3
41955: PUSH
41956: LD_INT 62
41958: PUSH
41959: EMPTY
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PPUSH
41966: CALL_OW 72
41970: ST_TO_ADDR
// end ;
41971: LD_VAR 0 2
41975: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41976: LD_INT 0
41978: PPUSH
41979: PPUSH
41980: PPUSH
41981: PPUSH
// tmp := [ ] ;
41982: LD_ADDR_VAR 0 3
41986: PUSH
41987: EMPTY
41988: ST_TO_ADDR
// list := [ ] ;
41989: LD_ADDR_VAR 0 5
41993: PUSH
41994: EMPTY
41995: ST_TO_ADDR
// for i = 16 to 25 do
41996: LD_ADDR_VAR 0 4
42000: PUSH
42001: DOUBLE
42002: LD_INT 16
42004: DEC
42005: ST_TO_ADDR
42006: LD_INT 25
42008: PUSH
42009: FOR_TO
42010: IFFALSE 42083
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42012: LD_ADDR_VAR 0 3
42016: PUSH
42017: LD_VAR 0 3
42021: PUSH
42022: LD_INT 22
42024: PUSH
42025: LD_VAR 0 1
42029: PPUSH
42030: CALL_OW 255
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 91
42041: PUSH
42042: LD_VAR 0 1
42046: PUSH
42047: LD_INT 6
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 30
42057: PUSH
42058: LD_VAR 0 4
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: PUSH
42072: EMPTY
42073: LIST
42074: PPUSH
42075: CALL_OW 69
42079: ADD
42080: ST_TO_ADDR
42081: GO 42009
42083: POP
42084: POP
// for i = 1 to tmp do
42085: LD_ADDR_VAR 0 4
42089: PUSH
42090: DOUBLE
42091: LD_INT 1
42093: DEC
42094: ST_TO_ADDR
42095: LD_VAR 0 3
42099: PUSH
42100: FOR_TO
42101: IFFALSE 42189
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42103: LD_ADDR_VAR 0 5
42107: PUSH
42108: LD_VAR 0 5
42112: PUSH
42113: LD_VAR 0 3
42117: PUSH
42118: LD_VAR 0 4
42122: ARRAY
42123: PPUSH
42124: CALL_OW 266
42128: PUSH
42129: LD_VAR 0 3
42133: PUSH
42134: LD_VAR 0 4
42138: ARRAY
42139: PPUSH
42140: CALL_OW 250
42144: PUSH
42145: LD_VAR 0 3
42149: PUSH
42150: LD_VAR 0 4
42154: ARRAY
42155: PPUSH
42156: CALL_OW 251
42160: PUSH
42161: LD_VAR 0 3
42165: PUSH
42166: LD_VAR 0 4
42170: ARRAY
42171: PPUSH
42172: CALL_OW 254
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: PUSH
42183: EMPTY
42184: LIST
42185: ADD
42186: ST_TO_ADDR
42187: GO 42100
42189: POP
42190: POP
// result := list ;
42191: LD_ADDR_VAR 0 2
42195: PUSH
42196: LD_VAR 0 5
42200: ST_TO_ADDR
// end ;
42201: LD_VAR 0 2
42205: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42206: LD_INT 0
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
// if not factory then
42215: LD_VAR 0 1
42219: NOT
42220: IFFALSE 42224
// exit ;
42222: GO 42827
// if control = control_apeman then
42224: LD_VAR 0 4
42228: PUSH
42229: LD_INT 5
42231: EQUAL
42232: IFFALSE 42341
// begin tmp := UnitsInside ( factory ) ;
42234: LD_ADDR_VAR 0 8
42238: PUSH
42239: LD_VAR 0 1
42243: PPUSH
42244: CALL_OW 313
42248: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42249: LD_VAR 0 8
42253: PPUSH
42254: LD_INT 25
42256: PUSH
42257: LD_INT 12
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PPUSH
42264: CALL_OW 72
42268: NOT
42269: IFFALSE 42279
// control := control_manual ;
42271: LD_ADDR_VAR 0 4
42275: PUSH
42276: LD_INT 1
42278: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42279: LD_ADDR_VAR 0 8
42283: PUSH
42284: LD_VAR 0 1
42288: PPUSH
42289: CALL 41976 0 1
42293: ST_TO_ADDR
// if tmp then
42294: LD_VAR 0 8
42298: IFFALSE 42341
// begin for i in tmp do
42300: LD_ADDR_VAR 0 7
42304: PUSH
42305: LD_VAR 0 8
42309: PUSH
42310: FOR_IN
42311: IFFALSE 42339
// if i [ 1 ] = b_ext_radio then
42313: LD_VAR 0 7
42317: PUSH
42318: LD_INT 1
42320: ARRAY
42321: PUSH
42322: LD_INT 22
42324: EQUAL
42325: IFFALSE 42337
// begin control := control_remote ;
42327: LD_ADDR_VAR 0 4
42331: PUSH
42332: LD_INT 2
42334: ST_TO_ADDR
// break ;
42335: GO 42339
// end ;
42337: GO 42310
42339: POP
42340: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42341: LD_VAR 0 1
42345: PPUSH
42346: LD_VAR 0 2
42350: PPUSH
42351: LD_VAR 0 3
42355: PPUSH
42356: LD_VAR 0 4
42360: PPUSH
42361: LD_VAR 0 5
42365: PPUSH
42366: CALL_OW 448
42370: IFFALSE 42405
// begin result := [ chassis , engine , control , weapon ] ;
42372: LD_ADDR_VAR 0 6
42376: PUSH
42377: LD_VAR 0 2
42381: PUSH
42382: LD_VAR 0 3
42386: PUSH
42387: LD_VAR 0 4
42391: PUSH
42392: LD_VAR 0 5
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: ST_TO_ADDR
// exit ;
42403: GO 42827
// end ; _chassis := AvailableChassisList ( factory ) ;
42405: LD_ADDR_VAR 0 9
42409: PUSH
42410: LD_VAR 0 1
42414: PPUSH
42415: CALL_OW 475
42419: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42420: LD_ADDR_VAR 0 11
42424: PUSH
42425: LD_VAR 0 1
42429: PPUSH
42430: CALL_OW 476
42434: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42435: LD_ADDR_VAR 0 12
42439: PUSH
42440: LD_VAR 0 1
42444: PPUSH
42445: CALL_OW 477
42449: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42450: LD_ADDR_VAR 0 10
42454: PUSH
42455: LD_VAR 0 1
42459: PPUSH
42460: CALL_OW 478
42464: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42465: LD_VAR 0 9
42469: NOT
42470: IFTRUE 42479
42472: PUSH
42473: LD_VAR 0 11
42477: NOT
42478: OR
42479: IFTRUE 42488
42481: PUSH
42482: LD_VAR 0 12
42486: NOT
42487: OR
42488: IFTRUE 42497
42490: PUSH
42491: LD_VAR 0 10
42495: NOT
42496: OR
42497: IFFALSE 42532
// begin result := [ chassis , engine , control , weapon ] ;
42499: LD_ADDR_VAR 0 6
42503: PUSH
42504: LD_VAR 0 2
42508: PUSH
42509: LD_VAR 0 3
42513: PUSH
42514: LD_VAR 0 4
42518: PUSH
42519: LD_VAR 0 5
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: ST_TO_ADDR
// exit ;
42530: GO 42827
// end ; if not chassis in _chassis then
42532: LD_VAR 0 2
42536: PUSH
42537: LD_VAR 0 9
42541: IN
42542: NOT
42543: IFFALSE 42569
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42545: LD_ADDR_VAR 0 2
42549: PUSH
42550: LD_VAR 0 9
42554: PUSH
42555: LD_INT 1
42557: PPUSH
42558: LD_VAR 0 9
42562: PPUSH
42563: CALL_OW 12
42567: ARRAY
42568: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42569: LD_VAR 0 2
42573: PPUSH
42574: LD_VAR 0 3
42578: PPUSH
42579: CALL 42832 0 2
42583: NOT
42584: IFFALSE 42645
// repeat engine := _engine [ 1 ] ;
42586: LD_ADDR_VAR 0 3
42590: PUSH
42591: LD_VAR 0 11
42595: PUSH
42596: LD_INT 1
42598: ARRAY
42599: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42600: LD_ADDR_VAR 0 11
42604: PUSH
42605: LD_VAR 0 11
42609: PPUSH
42610: LD_INT 1
42612: PPUSH
42613: CALL_OW 3
42617: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42618: LD_VAR 0 2
42622: PPUSH
42623: LD_VAR 0 3
42627: PPUSH
42628: CALL 42832 0 2
42632: IFTRUE 42643
42634: PUSH
42635: LD_VAR 0 11
42639: PUSH
42640: EMPTY
42641: EQUAL
42642: OR
42643: IFFALSE 42586
// if not control in _control then
42645: LD_VAR 0 4
42649: PUSH
42650: LD_VAR 0 12
42654: IN
42655: NOT
42656: IFFALSE 42682
// control := _control [ rand ( 1 , _control ) ] ;
42658: LD_ADDR_VAR 0 4
42662: PUSH
42663: LD_VAR 0 12
42667: PUSH
42668: LD_INT 1
42670: PPUSH
42671: LD_VAR 0 12
42675: PPUSH
42676: CALL_OW 12
42680: ARRAY
42681: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42682: LD_VAR 0 2
42686: PPUSH
42687: LD_VAR 0 5
42691: PPUSH
42692: CALL 43054 0 2
42696: NOT
42697: IFFALSE 42758
// repeat weapon := _weapon [ 1 ] ;
42699: LD_ADDR_VAR 0 5
42703: PUSH
42704: LD_VAR 0 10
42708: PUSH
42709: LD_INT 1
42711: ARRAY
42712: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42713: LD_ADDR_VAR 0 10
42717: PUSH
42718: LD_VAR 0 10
42722: PPUSH
42723: LD_INT 1
42725: PPUSH
42726: CALL_OW 3
42730: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42731: LD_VAR 0 2
42735: PPUSH
42736: LD_VAR 0 5
42740: PPUSH
42741: CALL 43054 0 2
42745: IFTRUE 42756
42747: PUSH
42748: LD_VAR 0 10
42752: PUSH
42753: EMPTY
42754: EQUAL
42755: OR
42756: IFFALSE 42699
// result := [ ] ;
42758: LD_ADDR_VAR 0 6
42762: PUSH
42763: EMPTY
42764: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42765: LD_VAR 0 1
42769: PPUSH
42770: LD_VAR 0 2
42774: PPUSH
42775: LD_VAR 0 3
42779: PPUSH
42780: LD_VAR 0 4
42784: PPUSH
42785: LD_VAR 0 5
42789: PPUSH
42790: CALL_OW 448
42794: IFFALSE 42827
// result := [ chassis , engine , control , weapon ] ;
42796: LD_ADDR_VAR 0 6
42800: PUSH
42801: LD_VAR 0 2
42805: PUSH
42806: LD_VAR 0 3
42810: PUSH
42811: LD_VAR 0 4
42815: PUSH
42816: LD_VAR 0 5
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// end ;
42827: LD_VAR 0 6
42831: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42832: LD_INT 0
42834: PPUSH
// if not chassis or not engine then
42835: LD_VAR 0 1
42839: NOT
42840: IFTRUE 42849
42842: PUSH
42843: LD_VAR 0 2
42847: NOT
42848: OR
42849: IFFALSE 42853
// exit ;
42851: GO 43049
// case engine of engine_solar :
42853: LD_VAR 0 2
42857: PUSH
42858: LD_INT 2
42860: DOUBLE
42861: EQUAL
42862: IFTRUE 42866
42864: GO 42904
42866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42867: LD_ADDR_VAR 0 3
42871: PUSH
42872: LD_INT 11
42874: PUSH
42875: LD_INT 12
42877: PUSH
42878: LD_INT 13
42880: PUSH
42881: LD_INT 14
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: ST_TO_ADDR
42902: GO 43033
42904: LD_INT 1
42906: DOUBLE
42907: EQUAL
42908: IFTRUE 42912
42910: GO 42974
42912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42913: LD_ADDR_VAR 0 3
42917: PUSH
42918: LD_INT 11
42920: PUSH
42921: LD_INT 12
42923: PUSH
42924: LD_INT 13
42926: PUSH
42927: LD_INT 14
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: LD_INT 3
42938: PUSH
42939: LD_INT 4
42941: PUSH
42942: LD_INT 5
42944: PUSH
42945: LD_INT 21
42947: PUSH
42948: LD_INT 23
42950: PUSH
42951: LD_INT 22
42953: PUSH
42954: LD_INT 24
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: ST_TO_ADDR
42972: GO 43033
42974: LD_INT 3
42976: DOUBLE
42977: EQUAL
42978: IFTRUE 42982
42980: GO 43032
42982: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_INT 13
42990: PUSH
42991: LD_INT 14
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 3
42999: PUSH
43000: LD_INT 4
43002: PUSH
43003: LD_INT 5
43005: PUSH
43006: LD_INT 21
43008: PUSH
43009: LD_INT 22
43011: PUSH
43012: LD_INT 23
43014: PUSH
43015: LD_INT 24
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
43030: GO 43033
43032: POP
// result := ( chassis in result ) ;
43033: LD_ADDR_VAR 0 3
43037: PUSH
43038: LD_VAR 0 1
43042: PUSH
43043: LD_VAR 0 3
43047: IN
43048: ST_TO_ADDR
// end ;
43049: LD_VAR 0 3
43053: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43054: LD_INT 0
43056: PPUSH
// if not chassis or not weapon then
43057: LD_VAR 0 1
43061: NOT
43062: IFTRUE 43071
43064: PUSH
43065: LD_VAR 0 2
43069: NOT
43070: OR
43071: IFFALSE 43075
// exit ;
43073: GO 44135
// case weapon of us_machine_gun :
43075: LD_VAR 0 2
43079: PUSH
43080: LD_INT 2
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43118
43088: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: LD_INT 4
43105: PUSH
43106: LD_INT 5
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
43116: GO 44119
43118: LD_INT 3
43120: DOUBLE
43121: EQUAL
43122: IFTRUE 43126
43124: GO 43156
43126: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43127: LD_ADDR_VAR 0 3
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 4
43143: PUSH
43144: LD_INT 5
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
43154: GO 44119
43156: LD_INT 11
43158: DOUBLE
43159: EQUAL
43160: IFTRUE 43164
43162: GO 43194
43164: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43165: LD_ADDR_VAR 0 3
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 4
43181: PUSH
43182: LD_INT 5
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: ST_TO_ADDR
43192: GO 44119
43194: LD_INT 4
43196: DOUBLE
43197: EQUAL
43198: IFTRUE 43202
43200: GO 43228
43202: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43203: LD_ADDR_VAR 0 3
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: LD_INT 4
43216: PUSH
43217: LD_INT 5
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: ST_TO_ADDR
43226: GO 44119
43228: LD_INT 5
43230: DOUBLE
43231: EQUAL
43232: IFTRUE 43236
43234: GO 43262
43236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43237: LD_ADDR_VAR 0 3
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 3
43247: PUSH
43248: LD_INT 4
43250: PUSH
43251: LD_INT 5
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: ST_TO_ADDR
43260: GO 44119
43262: LD_INT 9
43264: DOUBLE
43265: EQUAL
43266: IFTRUE 43270
43268: GO 43296
43270: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: LD_INT 3
43281: PUSH
43282: LD_INT 4
43284: PUSH
43285: LD_INT 5
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
43294: GO 44119
43296: LD_INT 7
43298: DOUBLE
43299: EQUAL
43300: IFTRUE 43304
43302: GO 43330
43304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43305: LD_ADDR_VAR 0 3
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: LD_INT 4
43318: PUSH
43319: LD_INT 5
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: ST_TO_ADDR
43328: GO 44119
43330: LD_INT 12
43332: DOUBLE
43333: EQUAL
43334: IFTRUE 43338
43336: GO 43364
43338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43339: LD_ADDR_VAR 0 3
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: LD_INT 4
43352: PUSH
43353: LD_INT 5
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
43362: GO 44119
43364: LD_INT 13
43366: DOUBLE
43367: EQUAL
43368: IFTRUE 43372
43370: GO 43398
43372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43373: LD_ADDR_VAR 0 3
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: LD_INT 4
43386: PUSH
43387: LD_INT 5
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
43396: GO 44119
43398: LD_INT 14
43400: DOUBLE
43401: EQUAL
43402: IFTRUE 43406
43404: GO 43424
43406: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43407: LD_ADDR_VAR 0 3
43411: PUSH
43412: LD_INT 4
43414: PUSH
43415: LD_INT 5
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: ST_TO_ADDR
43422: GO 44119
43424: LD_INT 6
43426: DOUBLE
43427: EQUAL
43428: IFTRUE 43432
43430: GO 43450
43432: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43433: LD_ADDR_VAR 0 3
43437: PUSH
43438: LD_INT 4
43440: PUSH
43441: LD_INT 5
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: ST_TO_ADDR
43448: GO 44119
43450: LD_INT 10
43452: DOUBLE
43453: EQUAL
43454: IFTRUE 43458
43456: GO 43476
43458: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43459: LD_ADDR_VAR 0 3
43463: PUSH
43464: LD_INT 4
43466: PUSH
43467: LD_INT 5
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: ST_TO_ADDR
43474: GO 44119
43476: LD_INT 22
43478: DOUBLE
43479: EQUAL
43480: IFTRUE 43484
43482: GO 43510
43484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43485: LD_ADDR_VAR 0 3
43489: PUSH
43490: LD_INT 11
43492: PUSH
43493: LD_INT 12
43495: PUSH
43496: LD_INT 13
43498: PUSH
43499: LD_INT 14
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: ST_TO_ADDR
43508: GO 44119
43510: LD_INT 23
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43518
43516: GO 43544
43518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_INT 11
43526: PUSH
43527: LD_INT 12
43529: PUSH
43530: LD_INT 13
43532: PUSH
43533: LD_INT 14
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
43542: GO 44119
43544: LD_INT 24
43546: DOUBLE
43547: EQUAL
43548: IFTRUE 43552
43550: GO 43578
43552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43553: LD_ADDR_VAR 0 3
43557: PUSH
43558: LD_INT 11
43560: PUSH
43561: LD_INT 12
43563: PUSH
43564: LD_INT 13
43566: PUSH
43567: LD_INT 14
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: ST_TO_ADDR
43576: GO 44119
43578: LD_INT 30
43580: DOUBLE
43581: EQUAL
43582: IFTRUE 43586
43584: GO 43612
43586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43587: LD_ADDR_VAR 0 3
43591: PUSH
43592: LD_INT 11
43594: PUSH
43595: LD_INT 12
43597: PUSH
43598: LD_INT 13
43600: PUSH
43601: LD_INT 14
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
43610: GO 44119
43612: LD_INT 25
43614: DOUBLE
43615: EQUAL
43616: IFTRUE 43620
43618: GO 43638
43620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43621: LD_ADDR_VAR 0 3
43625: PUSH
43626: LD_INT 13
43628: PUSH
43629: LD_INT 14
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: ST_TO_ADDR
43636: GO 44119
43638: LD_INT 27
43640: DOUBLE
43641: EQUAL
43642: IFTRUE 43646
43644: GO 43664
43646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43647: LD_ADDR_VAR 0 3
43651: PUSH
43652: LD_INT 13
43654: PUSH
43655: LD_INT 14
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: ST_TO_ADDR
43662: GO 44119
43664: LD_INT 92
43666: DOUBLE
43667: EQUAL
43668: IFTRUE 43672
43670: GO 43698
43672: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43673: LD_ADDR_VAR 0 3
43677: PUSH
43678: LD_INT 11
43680: PUSH
43681: LD_INT 12
43683: PUSH
43684: LD_INT 13
43686: PUSH
43687: LD_INT 14
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
43696: GO 44119
43698: LD_INT 28
43700: DOUBLE
43701: EQUAL
43702: IFTRUE 43706
43704: GO 43724
43706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43707: LD_ADDR_VAR 0 3
43711: PUSH
43712: LD_INT 13
43714: PUSH
43715: LD_INT 14
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: ST_TO_ADDR
43722: GO 44119
43724: LD_INT 29
43726: DOUBLE
43727: EQUAL
43728: IFTRUE 43732
43730: GO 43750
43732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43733: LD_ADDR_VAR 0 3
43737: PUSH
43738: LD_INT 13
43740: PUSH
43741: LD_INT 14
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: ST_TO_ADDR
43748: GO 44119
43750: LD_INT 31
43752: DOUBLE
43753: EQUAL
43754: IFTRUE 43758
43756: GO 43776
43758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43759: LD_ADDR_VAR 0 3
43763: PUSH
43764: LD_INT 13
43766: PUSH
43767: LD_INT 14
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: ST_TO_ADDR
43774: GO 44119
43776: LD_INT 26
43778: DOUBLE
43779: EQUAL
43780: IFTRUE 43784
43782: GO 43802
43784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43785: LD_ADDR_VAR 0 3
43789: PUSH
43790: LD_INT 13
43792: PUSH
43793: LD_INT 14
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: ST_TO_ADDR
43800: GO 44119
43802: LD_INT 42
43804: DOUBLE
43805: EQUAL
43806: IFTRUE 43810
43808: GO 43836
43810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43811: LD_ADDR_VAR 0 3
43815: PUSH
43816: LD_INT 21
43818: PUSH
43819: LD_INT 22
43821: PUSH
43822: LD_INT 23
43824: PUSH
43825: LD_INT 24
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: ST_TO_ADDR
43834: GO 44119
43836: LD_INT 43
43838: DOUBLE
43839: EQUAL
43840: IFTRUE 43844
43842: GO 43870
43844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43845: LD_ADDR_VAR 0 3
43849: PUSH
43850: LD_INT 21
43852: PUSH
43853: LD_INT 22
43855: PUSH
43856: LD_INT 23
43858: PUSH
43859: LD_INT 24
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: ST_TO_ADDR
43868: GO 44119
43870: LD_INT 44
43872: DOUBLE
43873: EQUAL
43874: IFTRUE 43878
43876: GO 43904
43878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43879: LD_ADDR_VAR 0 3
43883: PUSH
43884: LD_INT 21
43886: PUSH
43887: LD_INT 22
43889: PUSH
43890: LD_INT 23
43892: PUSH
43893: LD_INT 24
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
43902: GO 44119
43904: LD_INT 45
43906: DOUBLE
43907: EQUAL
43908: IFTRUE 43912
43910: GO 43938
43912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43913: LD_ADDR_VAR 0 3
43917: PUSH
43918: LD_INT 21
43920: PUSH
43921: LD_INT 22
43923: PUSH
43924: LD_INT 23
43926: PUSH
43927: LD_INT 24
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: ST_TO_ADDR
43936: GO 44119
43938: LD_INT 49
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43946
43944: GO 43972
43946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43947: LD_ADDR_VAR 0 3
43951: PUSH
43952: LD_INT 21
43954: PUSH
43955: LD_INT 22
43957: PUSH
43958: LD_INT 23
43960: PUSH
43961: LD_INT 24
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: ST_TO_ADDR
43970: GO 44119
43972: LD_INT 51
43974: DOUBLE
43975: EQUAL
43976: IFTRUE 43980
43978: GO 44006
43980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43981: LD_ADDR_VAR 0 3
43985: PUSH
43986: LD_INT 21
43988: PUSH
43989: LD_INT 22
43991: PUSH
43992: LD_INT 23
43994: PUSH
43995: LD_INT 24
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: ST_TO_ADDR
44004: GO 44119
44006: LD_INT 52
44008: DOUBLE
44009: EQUAL
44010: IFTRUE 44014
44012: GO 44040
44014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44015: LD_ADDR_VAR 0 3
44019: PUSH
44020: LD_INT 21
44022: PUSH
44023: LD_INT 22
44025: PUSH
44026: LD_INT 23
44028: PUSH
44029: LD_INT 24
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: ST_TO_ADDR
44038: GO 44119
44040: LD_INT 53
44042: DOUBLE
44043: EQUAL
44044: IFTRUE 44048
44046: GO 44066
44048: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44049: LD_ADDR_VAR 0 3
44053: PUSH
44054: LD_INT 23
44056: PUSH
44057: LD_INT 24
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: ST_TO_ADDR
44064: GO 44119
44066: LD_INT 46
44068: DOUBLE
44069: EQUAL
44070: IFTRUE 44074
44072: GO 44092
44074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44075: LD_ADDR_VAR 0 3
44079: PUSH
44080: LD_INT 23
44082: PUSH
44083: LD_INT 24
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: ST_TO_ADDR
44090: GO 44119
44092: LD_INT 47
44094: DOUBLE
44095: EQUAL
44096: IFTRUE 44100
44098: GO 44118
44100: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44101: LD_ADDR_VAR 0 3
44105: PUSH
44106: LD_INT 23
44108: PUSH
44109: LD_INT 24
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: ST_TO_ADDR
44116: GO 44119
44118: POP
// result := ( chassis in result ) ;
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_VAR 0 1
44128: PUSH
44129: LD_VAR 0 3
44133: IN
44134: ST_TO_ADDR
// end ;
44135: LD_VAR 0 3
44139: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44140: LD_INT 0
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
// result := array ;
44149: LD_ADDR_VAR 0 5
44153: PUSH
44154: LD_VAR 0 1
44158: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44159: LD_VAR 0 1
44163: NOT
44164: IFTRUE 44173
44166: PUSH
44167: LD_VAR 0 2
44171: NOT
44172: OR
44173: IFTRUE 44182
44175: PUSH
44176: LD_VAR 0 3
44180: NOT
44181: OR
44182: IFTRUE 44196
44184: PUSH
44185: LD_VAR 0 2
44189: PUSH
44190: LD_VAR 0 1
44194: GREATER
44195: OR
44196: IFTRUE 44210
44198: PUSH
44199: LD_VAR 0 3
44203: PUSH
44204: LD_VAR 0 1
44208: GREATER
44209: OR
44210: IFFALSE 44214
// exit ;
44212: GO 44510
// if direction then
44214: LD_VAR 0 4
44218: IFFALSE 44282
// begin d := 1 ;
44220: LD_ADDR_VAR 0 9
44224: PUSH
44225: LD_INT 1
44227: ST_TO_ADDR
// if i_from > i_to then
44228: LD_VAR 0 2
44232: PUSH
44233: LD_VAR 0 3
44237: GREATER
44238: IFFALSE 44264
// length := ( array - i_from ) + i_to else
44240: LD_ADDR_VAR 0 11
44244: PUSH
44245: LD_VAR 0 1
44249: PUSH
44250: LD_VAR 0 2
44254: MINUS
44255: PUSH
44256: LD_VAR 0 3
44260: PLUS
44261: ST_TO_ADDR
44262: GO 44280
// length := i_to - i_from ;
44264: LD_ADDR_VAR 0 11
44268: PUSH
44269: LD_VAR 0 3
44273: PUSH
44274: LD_VAR 0 2
44278: MINUS
44279: ST_TO_ADDR
// end else
44280: GO 44343
// begin d := - 1 ;
44282: LD_ADDR_VAR 0 9
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: ST_TO_ADDR
// if i_from > i_to then
44291: LD_VAR 0 2
44295: PUSH
44296: LD_VAR 0 3
44300: GREATER
44301: IFFALSE 44321
// length := i_from - i_to else
44303: LD_ADDR_VAR 0 11
44307: PUSH
44308: LD_VAR 0 2
44312: PUSH
44313: LD_VAR 0 3
44317: MINUS
44318: ST_TO_ADDR
44319: GO 44343
// length := ( array - i_to ) + i_from ;
44321: LD_ADDR_VAR 0 11
44325: PUSH
44326: LD_VAR 0 1
44330: PUSH
44331: LD_VAR 0 3
44335: MINUS
44336: PUSH
44337: LD_VAR 0 2
44341: PLUS
44342: ST_TO_ADDR
// end ; if not length then
44343: LD_VAR 0 11
44347: NOT
44348: IFFALSE 44352
// exit ;
44350: GO 44510
// tmp := array ;
44352: LD_ADDR_VAR 0 10
44356: PUSH
44357: LD_VAR 0 1
44361: ST_TO_ADDR
// for i = 1 to length do
44362: LD_ADDR_VAR 0 6
44366: PUSH
44367: DOUBLE
44368: LD_INT 1
44370: DEC
44371: ST_TO_ADDR
44372: LD_VAR 0 11
44376: PUSH
44377: FOR_TO
44378: IFFALSE 44498
// begin for j = 1 to array do
44380: LD_ADDR_VAR 0 7
44384: PUSH
44385: DOUBLE
44386: LD_INT 1
44388: DEC
44389: ST_TO_ADDR
44390: LD_VAR 0 1
44394: PUSH
44395: FOR_TO
44396: IFFALSE 44484
// begin k := j + d ;
44398: LD_ADDR_VAR 0 8
44402: PUSH
44403: LD_VAR 0 7
44407: PUSH
44408: LD_VAR 0 9
44412: PLUS
44413: ST_TO_ADDR
// if k > array then
44414: LD_VAR 0 8
44418: PUSH
44419: LD_VAR 0 1
44423: GREATER
44424: IFFALSE 44434
// k := 1 ;
44426: LD_ADDR_VAR 0 8
44430: PUSH
44431: LD_INT 1
44433: ST_TO_ADDR
// if not k then
44434: LD_VAR 0 8
44438: NOT
44439: IFFALSE 44451
// k := array ;
44441: LD_ADDR_VAR 0 8
44445: PUSH
44446: LD_VAR 0 1
44450: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44451: LD_ADDR_VAR 0 10
44455: PUSH
44456: LD_VAR 0 10
44460: PPUSH
44461: LD_VAR 0 8
44465: PPUSH
44466: LD_VAR 0 1
44470: PUSH
44471: LD_VAR 0 7
44475: ARRAY
44476: PPUSH
44477: CALL_OW 1
44481: ST_TO_ADDR
// end ;
44482: GO 44395
44484: POP
44485: POP
// array := tmp ;
44486: LD_ADDR_VAR 0 1
44490: PUSH
44491: LD_VAR 0 10
44495: ST_TO_ADDR
// end ;
44496: GO 44377
44498: POP
44499: POP
// result := array ;
44500: LD_ADDR_VAR 0 5
44504: PUSH
44505: LD_VAR 0 1
44509: ST_TO_ADDR
// end ;
44510: LD_VAR 0 5
44514: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44515: LD_INT 0
44517: PPUSH
44518: PPUSH
// result := 0 ;
44519: LD_ADDR_VAR 0 3
44523: PUSH
44524: LD_INT 0
44526: ST_TO_ADDR
// if not array or not value in array then
44527: LD_VAR 0 1
44531: NOT
44532: IFTRUE 44547
44534: PUSH
44535: LD_VAR 0 2
44539: PUSH
44540: LD_VAR 0 1
44544: IN
44545: NOT
44546: OR
44547: IFFALSE 44551
// exit ;
44549: GO 44605
// for i = 1 to array do
44551: LD_ADDR_VAR 0 4
44555: PUSH
44556: DOUBLE
44557: LD_INT 1
44559: DEC
44560: ST_TO_ADDR
44561: LD_VAR 0 1
44565: PUSH
44566: FOR_TO
44567: IFFALSE 44603
// if value = array [ i ] then
44569: LD_VAR 0 2
44573: PUSH
44574: LD_VAR 0 1
44578: PUSH
44579: LD_VAR 0 4
44583: ARRAY
44584: EQUAL
44585: IFFALSE 44601
// begin result := i ;
44587: LD_ADDR_VAR 0 3
44591: PUSH
44592: LD_VAR 0 4
44596: ST_TO_ADDR
// exit ;
44597: POP
44598: POP
44599: GO 44605
// end ;
44601: GO 44566
44603: POP
44604: POP
// end ;
44605: LD_VAR 0 3
44609: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44610: LD_INT 0
44612: PPUSH
// vc_chassis := chassis ;
44613: LD_ADDR_OWVAR 37
44617: PUSH
44618: LD_VAR 0 1
44622: ST_TO_ADDR
// vc_engine := engine ;
44623: LD_ADDR_OWVAR 39
44627: PUSH
44628: LD_VAR 0 2
44632: ST_TO_ADDR
// vc_control := control ;
44633: LD_ADDR_OWVAR 38
44637: PUSH
44638: LD_VAR 0 3
44642: ST_TO_ADDR
// vc_weapon := weapon ;
44643: LD_ADDR_OWVAR 40
44647: PUSH
44648: LD_VAR 0 4
44652: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44653: LD_ADDR_OWVAR 41
44657: PUSH
44658: LD_VAR 0 5
44662: ST_TO_ADDR
// end ;
44663: LD_VAR 0 6
44667: RET
// export function WantPlant ( unit ) ; var task ; begin
44668: LD_INT 0
44670: PPUSH
44671: PPUSH
// result := false ;
44672: LD_ADDR_VAR 0 2
44676: PUSH
44677: LD_INT 0
44679: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44680: LD_ADDR_VAR 0 3
44684: PUSH
44685: LD_VAR 0 1
44689: PPUSH
44690: CALL_OW 437
44694: ST_TO_ADDR
// if task then
44695: LD_VAR 0 3
44699: IFFALSE 44727
// if task [ 1 ] [ 1 ] = p then
44701: LD_VAR 0 3
44705: PUSH
44706: LD_INT 1
44708: ARRAY
44709: PUSH
44710: LD_INT 1
44712: ARRAY
44713: PUSH
44714: LD_STRING p
44716: EQUAL
44717: IFFALSE 44727
// result := true ;
44719: LD_ADDR_VAR 0 2
44723: PUSH
44724: LD_INT 1
44726: ST_TO_ADDR
// end ;
44727: LD_VAR 0 2
44731: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44732: LD_INT 0
44734: PPUSH
44735: PPUSH
44736: PPUSH
44737: PPUSH
// if pos < 1 then
44738: LD_VAR 0 2
44742: PUSH
44743: LD_INT 1
44745: LESS
44746: IFFALSE 44750
// exit ;
44748: GO 45053
// if pos = 1 then
44750: LD_VAR 0 2
44754: PUSH
44755: LD_INT 1
44757: EQUAL
44758: IFFALSE 44791
// result := Replace ( arr , pos [ 1 ] , value ) else
44760: LD_ADDR_VAR 0 4
44764: PUSH
44765: LD_VAR 0 1
44769: PPUSH
44770: LD_VAR 0 2
44774: PUSH
44775: LD_INT 1
44777: ARRAY
44778: PPUSH
44779: LD_VAR 0 3
44783: PPUSH
44784: CALL_OW 1
44788: ST_TO_ADDR
44789: GO 45053
// begin tmp := arr ;
44791: LD_ADDR_VAR 0 6
44795: PUSH
44796: LD_VAR 0 1
44800: ST_TO_ADDR
// s_arr := [ tmp ] ;
44801: LD_ADDR_VAR 0 7
44805: PUSH
44806: LD_VAR 0 6
44810: PUSH
44811: EMPTY
44812: LIST
44813: ST_TO_ADDR
// for i = 1 to pos - 1 do
44814: LD_ADDR_VAR 0 5
44818: PUSH
44819: DOUBLE
44820: LD_INT 1
44822: DEC
44823: ST_TO_ADDR
44824: LD_VAR 0 2
44828: PUSH
44829: LD_INT 1
44831: MINUS
44832: PUSH
44833: FOR_TO
44834: IFFALSE 44879
// begin tmp := tmp [ pos [ i ] ] ;
44836: LD_ADDR_VAR 0 6
44840: PUSH
44841: LD_VAR 0 6
44845: PUSH
44846: LD_VAR 0 2
44850: PUSH
44851: LD_VAR 0 5
44855: ARRAY
44856: ARRAY
44857: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44858: LD_ADDR_VAR 0 7
44862: PUSH
44863: LD_VAR 0 7
44867: PUSH
44868: LD_VAR 0 6
44872: PUSH
44873: EMPTY
44874: LIST
44875: ADD
44876: ST_TO_ADDR
// end ;
44877: GO 44833
44879: POP
44880: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44881: LD_ADDR_VAR 0 6
44885: PUSH
44886: LD_VAR 0 6
44890: PPUSH
44891: LD_VAR 0 2
44895: PUSH
44896: LD_VAR 0 2
44900: ARRAY
44901: PPUSH
44902: LD_VAR 0 3
44906: PPUSH
44907: CALL_OW 1
44911: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44912: LD_ADDR_VAR 0 7
44916: PUSH
44917: LD_VAR 0 7
44921: PPUSH
44922: LD_VAR 0 7
44926: PPUSH
44927: LD_VAR 0 6
44931: PPUSH
44932: CALL_OW 1
44936: ST_TO_ADDR
// for i = s_arr downto 2 do
44937: LD_ADDR_VAR 0 5
44941: PUSH
44942: DOUBLE
44943: LD_VAR 0 7
44947: INC
44948: ST_TO_ADDR
44949: LD_INT 2
44951: PUSH
44952: FOR_DOWNTO
44953: IFFALSE 45037
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44955: LD_ADDR_VAR 0 6
44959: PUSH
44960: LD_VAR 0 7
44964: PUSH
44965: LD_VAR 0 5
44969: PUSH
44970: LD_INT 1
44972: MINUS
44973: ARRAY
44974: PPUSH
44975: LD_VAR 0 2
44979: PUSH
44980: LD_VAR 0 5
44984: PUSH
44985: LD_INT 1
44987: MINUS
44988: ARRAY
44989: PPUSH
44990: LD_VAR 0 7
44994: PUSH
44995: LD_VAR 0 5
44999: ARRAY
45000: PPUSH
45001: CALL_OW 1
45005: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45006: LD_ADDR_VAR 0 7
45010: PUSH
45011: LD_VAR 0 7
45015: PPUSH
45016: LD_VAR 0 5
45020: PUSH
45021: LD_INT 1
45023: MINUS
45024: PPUSH
45025: LD_VAR 0 6
45029: PPUSH
45030: CALL_OW 1
45034: ST_TO_ADDR
// end ;
45035: GO 44952
45037: POP
45038: POP
// result := s_arr [ 1 ] ;
45039: LD_ADDR_VAR 0 4
45043: PUSH
45044: LD_VAR 0 7
45048: PUSH
45049: LD_INT 1
45051: ARRAY
45052: ST_TO_ADDR
// end ; end ;
45053: LD_VAR 0 4
45057: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45058: LD_INT 0
45060: PPUSH
45061: PPUSH
// if not list then
45062: LD_VAR 0 1
45066: NOT
45067: IFFALSE 45071
// exit ;
45069: GO 45162
// i := list [ pos1 ] ;
45071: LD_ADDR_VAR 0 5
45075: PUSH
45076: LD_VAR 0 1
45080: PUSH
45081: LD_VAR 0 2
45085: ARRAY
45086: ST_TO_ADDR
// if not i then
45087: LD_VAR 0 5
45091: NOT
45092: IFFALSE 45096
// exit ;
45094: GO 45162
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45096: LD_ADDR_VAR 0 1
45100: PUSH
45101: LD_VAR 0 1
45105: PPUSH
45106: LD_VAR 0 2
45110: PPUSH
45111: LD_VAR 0 1
45115: PUSH
45116: LD_VAR 0 3
45120: ARRAY
45121: PPUSH
45122: CALL_OW 1
45126: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45127: LD_ADDR_VAR 0 1
45131: PUSH
45132: LD_VAR 0 1
45136: PPUSH
45137: LD_VAR 0 3
45141: PPUSH
45142: LD_VAR 0 5
45146: PPUSH
45147: CALL_OW 1
45151: ST_TO_ADDR
// result := list ;
45152: LD_ADDR_VAR 0 4
45156: PUSH
45157: LD_VAR 0 1
45161: ST_TO_ADDR
// end ;
45162: LD_VAR 0 4
45166: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45167: LD_INT 0
45169: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45170: LD_ADDR_VAR 0 5
45174: PUSH
45175: LD_VAR 0 1
45179: PPUSH
45180: CALL_OW 250
45184: PPUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: CALL_OW 251
45194: PPUSH
45195: LD_VAR 0 2
45199: PPUSH
45200: LD_VAR 0 3
45204: PPUSH
45205: LD_VAR 0 4
45209: PPUSH
45210: CALL 45592 0 5
45214: ST_TO_ADDR
// end ;
45215: LD_VAR 0 5
45219: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45220: LD_INT 0
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
// if not list or not unit then
45226: LD_VAR 0 2
45230: NOT
45231: IFTRUE 45240
45233: PUSH
45234: LD_VAR 0 1
45238: NOT
45239: OR
45240: IFFALSE 45244
// exit ;
45242: GO 45587
// result := [ ] ;
45244: LD_ADDR_VAR 0 5
45248: PUSH
45249: EMPTY
45250: ST_TO_ADDR
// for i in list do
45251: LD_ADDR_VAR 0 6
45255: PUSH
45256: LD_VAR 0 2
45260: PUSH
45261: FOR_IN
45262: IFFALSE 45480
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45264: LD_ADDR_VAR 0 8
45268: PUSH
45269: LD_VAR 0 1
45273: PPUSH
45274: LD_VAR 0 6
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PPUSH
45283: LD_VAR 0 6
45287: PUSH
45288: LD_INT 2
45290: ARRAY
45291: PPUSH
45292: CALL_OW 297
45296: ST_TO_ADDR
// if not Count ( result ) then
45297: LD_VAR 0 5
45301: PPUSH
45302: CALL 41848 0 1
45306: NOT
45307: IFFALSE 45340
// begin result := Join ( result , [ i , tmp ] ) ;
45309: LD_ADDR_VAR 0 5
45313: PUSH
45314: LD_VAR 0 5
45318: PPUSH
45319: LD_VAR 0 6
45323: PUSH
45324: LD_VAR 0 8
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PPUSH
45333: CALL 77780 0 2
45337: ST_TO_ADDR
// continue ;
45338: GO 45261
// end ; if result [ result ] [ 2 ] <= tmp then
45340: LD_VAR 0 5
45344: PUSH
45345: LD_VAR 0 5
45349: ARRAY
45350: PUSH
45351: LD_INT 2
45353: ARRAY
45354: PUSH
45355: LD_VAR 0 8
45359: LESSEQUAL
45360: IFFALSE 45393
// result := Join ( result , [ i , tmp ] ) else
45362: LD_ADDR_VAR 0 5
45366: PUSH
45367: LD_VAR 0 5
45371: PPUSH
45372: LD_VAR 0 6
45376: PUSH
45377: LD_VAR 0 8
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PPUSH
45386: CALL 77780 0 2
45390: ST_TO_ADDR
45391: GO 45478
// begin for j := 1 to Count ( result ) do
45393: LD_ADDR_VAR 0 7
45397: PUSH
45398: DOUBLE
45399: LD_INT 1
45401: DEC
45402: ST_TO_ADDR
45403: LD_VAR 0 5
45407: PPUSH
45408: CALL 41848 0 1
45412: PUSH
45413: FOR_TO
45414: IFFALSE 45476
// begin if tmp < result [ j ] [ 2 ] then
45416: LD_VAR 0 8
45420: PUSH
45421: LD_VAR 0 5
45425: PUSH
45426: LD_VAR 0 7
45430: ARRAY
45431: PUSH
45432: LD_INT 2
45434: ARRAY
45435: LESS
45436: IFFALSE 45474
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45438: LD_ADDR_VAR 0 5
45442: PUSH
45443: LD_VAR 0 5
45447: PPUSH
45448: LD_VAR 0 7
45452: PPUSH
45453: LD_VAR 0 6
45457: PUSH
45458: LD_VAR 0 8
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PPUSH
45467: CALL_OW 2
45471: ST_TO_ADDR
// break ;
45472: GO 45476
// end ; end ;
45474: GO 45413
45476: POP
45477: POP
// end ; end ;
45478: GO 45261
45480: POP
45481: POP
// if result and not asc then
45482: LD_VAR 0 5
45486: IFFALSE 45495
45488: PUSH
45489: LD_VAR 0 3
45493: NOT
45494: AND
45495: IFFALSE 45512
// result := ReverseArray ( result ) ;
45497: LD_ADDR_VAR 0 5
45501: PUSH
45502: LD_VAR 0 5
45506: PPUSH
45507: CALL 72870 0 1
45511: ST_TO_ADDR
// tmp := [ ] ;
45512: LD_ADDR_VAR 0 8
45516: PUSH
45517: EMPTY
45518: ST_TO_ADDR
// if mode then
45519: LD_VAR 0 4
45523: IFFALSE 45587
// begin for i := 1 to result do
45525: LD_ADDR_VAR 0 6
45529: PUSH
45530: DOUBLE
45531: LD_INT 1
45533: DEC
45534: ST_TO_ADDR
45535: LD_VAR 0 5
45539: PUSH
45540: FOR_TO
45541: IFFALSE 45575
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45543: LD_ADDR_VAR 0 8
45547: PUSH
45548: LD_VAR 0 8
45552: PPUSH
45553: LD_VAR 0 5
45557: PUSH
45558: LD_VAR 0 6
45562: ARRAY
45563: PUSH
45564: LD_INT 1
45566: ARRAY
45567: PPUSH
45568: CALL 77780 0 2
45572: ST_TO_ADDR
45573: GO 45540
45575: POP
45576: POP
// result := tmp ;
45577: LD_ADDR_VAR 0 5
45581: PUSH
45582: LD_VAR 0 8
45586: ST_TO_ADDR
// end ; end ;
45587: LD_VAR 0 5
45591: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45592: LD_INT 0
45594: PPUSH
45595: PPUSH
45596: PPUSH
45597: PPUSH
// if not list then
45598: LD_VAR 0 3
45602: NOT
45603: IFFALSE 45607
// exit ;
45605: GO 45997
// result := [ ] ;
45607: LD_ADDR_VAR 0 6
45611: PUSH
45612: EMPTY
45613: ST_TO_ADDR
// for i in list do
45614: LD_ADDR_VAR 0 7
45618: PUSH
45619: LD_VAR 0 3
45623: PUSH
45624: FOR_IN
45625: IFFALSE 45827
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45627: LD_ADDR_VAR 0 9
45631: PUSH
45632: LD_VAR 0 7
45636: PPUSH
45637: LD_VAR 0 1
45641: PPUSH
45642: LD_VAR 0 2
45646: PPUSH
45647: CALL_OW 297
45651: ST_TO_ADDR
// if not result then
45652: LD_VAR 0 6
45656: NOT
45657: IFFALSE 45683
// result := [ [ i , tmp ] ] else
45659: LD_ADDR_VAR 0 6
45663: PUSH
45664: LD_VAR 0 7
45668: PUSH
45669: LD_VAR 0 9
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: EMPTY
45679: LIST
45680: ST_TO_ADDR
45681: GO 45825
// begin if result [ result ] [ 2 ] <= tmp then
45683: LD_VAR 0 6
45687: PUSH
45688: LD_VAR 0 6
45692: ARRAY
45693: PUSH
45694: LD_INT 2
45696: ARRAY
45697: PUSH
45698: LD_VAR 0 9
45702: LESSEQUAL
45703: IFFALSE 45745
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45705: LD_ADDR_VAR 0 6
45709: PUSH
45710: LD_VAR 0 6
45714: PPUSH
45715: LD_VAR 0 6
45719: PUSH
45720: LD_INT 1
45722: PLUS
45723: PPUSH
45724: LD_VAR 0 7
45728: PUSH
45729: LD_VAR 0 9
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PPUSH
45738: CALL_OW 2
45742: ST_TO_ADDR
45743: GO 45825
// for j := 1 to result do
45745: LD_ADDR_VAR 0 8
45749: PUSH
45750: DOUBLE
45751: LD_INT 1
45753: DEC
45754: ST_TO_ADDR
45755: LD_VAR 0 6
45759: PUSH
45760: FOR_TO
45761: IFFALSE 45823
// begin if tmp < result [ j ] [ 2 ] then
45763: LD_VAR 0 9
45767: PUSH
45768: LD_VAR 0 6
45772: PUSH
45773: LD_VAR 0 8
45777: ARRAY
45778: PUSH
45779: LD_INT 2
45781: ARRAY
45782: LESS
45783: IFFALSE 45821
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45785: LD_ADDR_VAR 0 6
45789: PUSH
45790: LD_VAR 0 6
45794: PPUSH
45795: LD_VAR 0 8
45799: PPUSH
45800: LD_VAR 0 7
45804: PUSH
45805: LD_VAR 0 9
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PPUSH
45814: CALL_OW 2
45818: ST_TO_ADDR
// break ;
45819: GO 45823
// end ; end ;
45821: GO 45760
45823: POP
45824: POP
// end ; end ;
45825: GO 45624
45827: POP
45828: POP
// if result and not asc then
45829: LD_VAR 0 6
45833: IFFALSE 45842
45835: PUSH
45836: LD_VAR 0 4
45840: NOT
45841: AND
45842: IFFALSE 45917
// begin tmp := result ;
45844: LD_ADDR_VAR 0 9
45848: PUSH
45849: LD_VAR 0 6
45853: ST_TO_ADDR
// for i = tmp downto 1 do
45854: LD_ADDR_VAR 0 7
45858: PUSH
45859: DOUBLE
45860: LD_VAR 0 9
45864: INC
45865: ST_TO_ADDR
45866: LD_INT 1
45868: PUSH
45869: FOR_DOWNTO
45870: IFFALSE 45915
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45872: LD_ADDR_VAR 0 6
45876: PUSH
45877: LD_VAR 0 6
45881: PPUSH
45882: LD_VAR 0 9
45886: PUSH
45887: LD_VAR 0 7
45891: MINUS
45892: PUSH
45893: LD_INT 1
45895: PLUS
45896: PPUSH
45897: LD_VAR 0 9
45901: PUSH
45902: LD_VAR 0 7
45906: ARRAY
45907: PPUSH
45908: CALL_OW 1
45912: ST_TO_ADDR
45913: GO 45869
45915: POP
45916: POP
// end ; tmp := [ ] ;
45917: LD_ADDR_VAR 0 9
45921: PUSH
45922: EMPTY
45923: ST_TO_ADDR
// if mode then
45924: LD_VAR 0 5
45928: IFFALSE 45997
// begin for i = 1 to result do
45930: LD_ADDR_VAR 0 7
45934: PUSH
45935: DOUBLE
45936: LD_INT 1
45938: DEC
45939: ST_TO_ADDR
45940: LD_VAR 0 6
45944: PUSH
45945: FOR_TO
45946: IFFALSE 45985
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45948: LD_ADDR_VAR 0 9
45952: PUSH
45953: LD_VAR 0 9
45957: PPUSH
45958: LD_VAR 0 7
45962: PPUSH
45963: LD_VAR 0 6
45967: PUSH
45968: LD_VAR 0 7
45972: ARRAY
45973: PUSH
45974: LD_INT 1
45976: ARRAY
45977: PPUSH
45978: CALL_OW 1
45982: ST_TO_ADDR
45983: GO 45945
45985: POP
45986: POP
// result := tmp ;
45987: LD_ADDR_VAR 0 6
45991: PUSH
45992: LD_VAR 0 9
45996: ST_TO_ADDR
// end ; end ;
45997: LD_VAR 0 6
46001: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46002: LD_INT 0
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46010: LD_ADDR_VAR 0 5
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// if not x or not y then
46032: LD_VAR 0 2
46036: NOT
46037: IFTRUE 46046
46039: PUSH
46040: LD_VAR 0 3
46044: NOT
46045: OR
46046: IFFALSE 46050
// exit ;
46048: GO 47706
// if not range then
46050: LD_VAR 0 4
46054: NOT
46055: IFFALSE 46065
// range := 10 ;
46057: LD_ADDR_VAR 0 4
46061: PUSH
46062: LD_INT 10
46064: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46065: LD_ADDR_VAR 0 8
46069: PUSH
46070: LD_INT 81
46072: PUSH
46073: LD_VAR 0 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 92
46084: PUSH
46085: LD_VAR 0 2
46089: PUSH
46090: LD_VAR 0 3
46094: PUSH
46095: LD_VAR 0 4
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: LD_INT 21
46111: PUSH
46112: LD_INT 3
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: PPUSH
46128: CALL_OW 69
46132: ST_TO_ADDR
// if not tmp then
46133: LD_VAR 0 8
46137: NOT
46138: IFFALSE 46142
// exit ;
46140: GO 47706
// for i in tmp do
46142: LD_ADDR_VAR 0 6
46146: PUSH
46147: LD_VAR 0 8
46151: PUSH
46152: FOR_IN
46153: IFFALSE 47681
// begin points := [ 0 , 0 , 0 ] ;
46155: LD_ADDR_VAR 0 9
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: ST_TO_ADDR
// bpoints := 1 ;
46174: LD_ADDR_VAR 0 10
46178: PUSH
46179: LD_INT 1
46181: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46182: LD_VAR 0 6
46186: PPUSH
46187: CALL_OW 247
46191: PUSH
46192: LD_INT 1
46194: DOUBLE
46195: EQUAL
46196: IFTRUE 46200
46198: GO 46782
46200: POP
// begin if GetClass ( i ) = 1 then
46201: LD_VAR 0 6
46205: PPUSH
46206: CALL_OW 257
46210: PUSH
46211: LD_INT 1
46213: EQUAL
46214: IFFALSE 46235
// points := [ 10 , 5 , 3 ] ;
46216: LD_ADDR_VAR 0 9
46220: PUSH
46221: LD_INT 10
46223: PUSH
46224: LD_INT 5
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46235: LD_VAR 0 6
46239: PPUSH
46240: CALL_OW 257
46244: PUSH
46245: LD_INT 2
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 4
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: IN
46259: IFFALSE 46280
// points := [ 3 , 2 , 1 ] ;
46261: LD_ADDR_VAR 0 9
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46280: LD_VAR 0 6
46284: PPUSH
46285: CALL_OW 257
46289: PUSH
46290: LD_INT 5
46292: EQUAL
46293: IFFALSE 46314
// points := [ 130 , 5 , 2 ] ;
46295: LD_ADDR_VAR 0 9
46299: PUSH
46300: LD_INT 130
46302: PUSH
46303: LD_INT 5
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46314: LD_VAR 0 6
46318: PPUSH
46319: CALL_OW 257
46323: PUSH
46324: LD_INT 8
46326: EQUAL
46327: IFFALSE 46348
// points := [ 35 , 35 , 30 ] ;
46329: LD_ADDR_VAR 0 9
46333: PUSH
46334: LD_INT 35
46336: PUSH
46337: LD_INT 35
46339: PUSH
46340: LD_INT 30
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46348: LD_VAR 0 6
46352: PPUSH
46353: CALL_OW 257
46357: PUSH
46358: LD_INT 9
46360: EQUAL
46361: IFFALSE 46382
// points := [ 20 , 55 , 40 ] ;
46363: LD_ADDR_VAR 0 9
46367: PUSH
46368: LD_INT 20
46370: PUSH
46371: LD_INT 55
46373: PUSH
46374: LD_INT 40
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46382: LD_VAR 0 6
46386: PPUSH
46387: CALL_OW 257
46391: PUSH
46392: LD_INT 12
46394: PUSH
46395: LD_INT 16
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: IN
46402: IFFALSE 46423
// points := [ 5 , 3 , 2 ] ;
46404: LD_ADDR_VAR 0 9
46408: PUSH
46409: LD_INT 5
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46423: LD_VAR 0 6
46427: PPUSH
46428: CALL_OW 257
46432: PUSH
46433: LD_INT 17
46435: EQUAL
46436: IFFALSE 46457
// points := [ 100 , 50 , 75 ] ;
46438: LD_ADDR_VAR 0 9
46442: PUSH
46443: LD_INT 100
46445: PUSH
46446: LD_INT 50
46448: PUSH
46449: LD_INT 75
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46457: LD_VAR 0 6
46461: PPUSH
46462: CALL_OW 257
46466: PUSH
46467: LD_INT 15
46469: EQUAL
46470: IFFALSE 46491
// points := [ 10 , 5 , 3 ] ;
46472: LD_ADDR_VAR 0 9
46476: PUSH
46477: LD_INT 10
46479: PUSH
46480: LD_INT 5
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46491: LD_VAR 0 6
46495: PPUSH
46496: CALL_OW 257
46500: PUSH
46501: LD_INT 14
46503: EQUAL
46504: IFFALSE 46525
// points := [ 10 , 0 , 0 ] ;
46506: LD_ADDR_VAR 0 9
46510: PUSH
46511: LD_INT 10
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46525: LD_VAR 0 6
46529: PPUSH
46530: CALL_OW 257
46534: PUSH
46535: LD_INT 11
46537: EQUAL
46538: IFFALSE 46559
// points := [ 30 , 10 , 5 ] ;
46540: LD_ADDR_VAR 0 9
46544: PUSH
46545: LD_INT 30
46547: PUSH
46548: LD_INT 10
46550: PUSH
46551: LD_INT 5
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46559: LD_VAR 0 1
46563: PPUSH
46564: LD_INT 5
46566: PPUSH
46567: CALL_OW 321
46571: PUSH
46572: LD_INT 2
46574: EQUAL
46575: IFFALSE 46592
// bpoints := bpoints * 1.8 ;
46577: LD_ADDR_VAR 0 10
46581: PUSH
46582: LD_VAR 0 10
46586: PUSH
46587: LD_REAL  1.80000000000000E+0000
46590: MUL
46591: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46592: LD_VAR 0 6
46596: PPUSH
46597: CALL_OW 257
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: LD_INT 4
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: IN
46620: IFFALSE 46640
46622: PUSH
46623: LD_VAR 0 1
46627: PPUSH
46628: LD_INT 51
46630: PPUSH
46631: CALL_OW 321
46635: PUSH
46636: LD_INT 2
46638: EQUAL
46639: AND
46640: IFFALSE 46657
// bpoints := bpoints * 1.2 ;
46642: LD_ADDR_VAR 0 10
46646: PUSH
46647: LD_VAR 0 10
46651: PUSH
46652: LD_REAL  1.20000000000000E+0000
46655: MUL
46656: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46657: LD_VAR 0 6
46661: PPUSH
46662: CALL_OW 257
46666: PUSH
46667: LD_INT 5
46669: PUSH
46670: LD_INT 7
46672: PUSH
46673: LD_INT 9
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: IN
46681: IFFALSE 46701
46683: PUSH
46684: LD_VAR 0 1
46688: PPUSH
46689: LD_INT 52
46691: PPUSH
46692: CALL_OW 321
46696: PUSH
46697: LD_INT 2
46699: EQUAL
46700: AND
46701: IFFALSE 46718
// bpoints := bpoints * 1.5 ;
46703: LD_ADDR_VAR 0 10
46707: PUSH
46708: LD_VAR 0 10
46712: PUSH
46713: LD_REAL  1.50000000000000E+0000
46716: MUL
46717: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46718: LD_VAR 0 1
46722: PPUSH
46723: LD_INT 66
46725: PPUSH
46726: CALL_OW 321
46730: PUSH
46731: LD_INT 2
46733: EQUAL
46734: IFFALSE 46751
// bpoints := bpoints * 1.1 ;
46736: LD_ADDR_VAR 0 10
46740: PUSH
46741: LD_VAR 0 10
46745: PUSH
46746: LD_REAL  1.10000000000000E+0000
46749: MUL
46750: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46751: LD_ADDR_VAR 0 10
46755: PUSH
46756: LD_VAR 0 10
46760: PUSH
46761: LD_VAR 0 6
46765: PPUSH
46766: LD_INT 1
46768: PPUSH
46769: CALL_OW 259
46773: PUSH
46774: LD_REAL  1.15000000000000E+0000
46777: MUL
46778: MUL
46779: ST_TO_ADDR
// end ; unit_vehicle :
46780: GO 47610
46782: LD_INT 2
46784: DOUBLE
46785: EQUAL
46786: IFTRUE 46790
46788: GO 47598
46790: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46791: LD_VAR 0 6
46795: PPUSH
46796: CALL_OW 264
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 42
46806: PUSH
46807: LD_INT 24
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: IN
46815: IFFALSE 46836
// points := [ 25 , 5 , 3 ] ;
46817: LD_ADDR_VAR 0 9
46821: PUSH
46822: LD_INT 25
46824: PUSH
46825: LD_INT 5
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46836: LD_VAR 0 6
46840: PPUSH
46841: CALL_OW 264
46845: PUSH
46846: LD_INT 4
46848: PUSH
46849: LD_INT 43
46851: PUSH
46852: LD_INT 25
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: IN
46860: IFFALSE 46881
// points := [ 40 , 15 , 5 ] ;
46862: LD_ADDR_VAR 0 9
46866: PUSH
46867: LD_INT 40
46869: PUSH
46870: LD_INT 15
46872: PUSH
46873: LD_INT 5
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46881: LD_VAR 0 6
46885: PPUSH
46886: CALL_OW 264
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: LD_INT 23
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: IN
46901: IFFALSE 46922
// points := [ 7 , 25 , 8 ] ;
46903: LD_ADDR_VAR 0 9
46907: PUSH
46908: LD_INT 7
46910: PUSH
46911: LD_INT 25
46913: PUSH
46914: LD_INT 8
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46922: LD_VAR 0 6
46926: PPUSH
46927: CALL_OW 264
46931: PUSH
46932: LD_INT 5
46934: PUSH
46935: LD_INT 27
46937: PUSH
46938: LD_INT 44
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: IN
46946: IFFALSE 46967
// points := [ 14 , 50 , 16 ] ;
46948: LD_ADDR_VAR 0 9
46952: PUSH
46953: LD_INT 14
46955: PUSH
46956: LD_INT 50
46958: PUSH
46959: LD_INT 16
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46967: LD_VAR 0 6
46971: PPUSH
46972: CALL_OW 264
46976: PUSH
46977: LD_INT 6
46979: PUSH
46980: LD_INT 46
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: IN
46987: IFFALSE 47008
// points := [ 32 , 120 , 70 ] ;
46989: LD_ADDR_VAR 0 9
46993: PUSH
46994: LD_INT 32
46996: PUSH
46997: LD_INT 120
46999: PUSH
47000: LD_INT 70
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47008: LD_VAR 0 6
47012: PPUSH
47013: CALL_OW 264
47017: PUSH
47018: LD_INT 7
47020: PUSH
47021: LD_INT 28
47023: PUSH
47024: LD_INT 45
47026: PUSH
47027: LD_INT 92
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: IN
47036: IFFALSE 47057
// points := [ 35 , 20 , 45 ] ;
47038: LD_ADDR_VAR 0 9
47042: PUSH
47043: LD_INT 35
47045: PUSH
47046: LD_INT 20
47048: PUSH
47049: LD_INT 45
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47057: LD_VAR 0 6
47061: PPUSH
47062: CALL_OW 264
47066: PUSH
47067: LD_INT 47
47069: PUSH
47070: EMPTY
47071: LIST
47072: IN
47073: IFFALSE 47094
// points := [ 67 , 45 , 75 ] ;
47075: LD_ADDR_VAR 0 9
47079: PUSH
47080: LD_INT 67
47082: PUSH
47083: LD_INT 45
47085: PUSH
47086: LD_INT 75
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: LIST
47093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47094: LD_VAR 0 6
47098: PPUSH
47099: CALL_OW 264
47103: PUSH
47104: LD_INT 26
47106: PUSH
47107: EMPTY
47108: LIST
47109: IN
47110: IFFALSE 47131
// points := [ 120 , 30 , 80 ] ;
47112: LD_ADDR_VAR 0 9
47116: PUSH
47117: LD_INT 120
47119: PUSH
47120: LD_INT 30
47122: PUSH
47123: LD_INT 80
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47131: LD_VAR 0 6
47135: PPUSH
47136: CALL_OW 264
47140: PUSH
47141: LD_INT 22
47143: PUSH
47144: EMPTY
47145: LIST
47146: IN
47147: IFFALSE 47168
// points := [ 40 , 1 , 1 ] ;
47149: LD_ADDR_VAR 0 9
47153: PUSH
47154: LD_INT 40
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47168: LD_VAR 0 6
47172: PPUSH
47173: CALL_OW 264
47177: PUSH
47178: LD_INT 29
47180: PUSH
47181: EMPTY
47182: LIST
47183: IN
47184: IFFALSE 47205
// points := [ 70 , 200 , 400 ] ;
47186: LD_ADDR_VAR 0 9
47190: PUSH
47191: LD_INT 70
47193: PUSH
47194: LD_INT 200
47196: PUSH
47197: LD_INT 400
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47205: LD_VAR 0 6
47209: PPUSH
47210: CALL_OW 264
47214: PUSH
47215: LD_INT 14
47217: PUSH
47218: LD_INT 53
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: IN
47225: IFFALSE 47246
// points := [ 40 , 10 , 20 ] ;
47227: LD_ADDR_VAR 0 9
47231: PUSH
47232: LD_INT 40
47234: PUSH
47235: LD_INT 10
47237: PUSH
47238: LD_INT 20
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47246: LD_VAR 0 6
47250: PPUSH
47251: CALL_OW 264
47255: PUSH
47256: LD_INT 9
47258: PUSH
47259: EMPTY
47260: LIST
47261: IN
47262: IFFALSE 47283
// points := [ 5 , 70 , 20 ] ;
47264: LD_ADDR_VAR 0 9
47268: PUSH
47269: LD_INT 5
47271: PUSH
47272: LD_INT 70
47274: PUSH
47275: LD_INT 20
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47283: LD_VAR 0 6
47287: PPUSH
47288: CALL_OW 264
47292: PUSH
47293: LD_INT 10
47295: PUSH
47296: EMPTY
47297: LIST
47298: IN
47299: IFFALSE 47320
// points := [ 35 , 110 , 70 ] ;
47301: LD_ADDR_VAR 0 9
47305: PUSH
47306: LD_INT 35
47308: PUSH
47309: LD_INT 110
47311: PUSH
47312: LD_INT 70
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47320: LD_VAR 0 6
47324: PPUSH
47325: CALL_OW 265
47329: PUSH
47330: LD_INT 25
47332: EQUAL
47333: IFFALSE 47354
// points := [ 80 , 65 , 100 ] ;
47335: LD_ADDR_VAR 0 9
47339: PUSH
47340: LD_INT 80
47342: PUSH
47343: LD_INT 65
47345: PUSH
47346: LD_INT 100
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: LIST
47353: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47354: LD_VAR 0 6
47358: PPUSH
47359: CALL_OW 263
47363: PUSH
47364: LD_INT 1
47366: EQUAL
47367: IFFALSE 47402
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47369: LD_ADDR_VAR 0 10
47373: PUSH
47374: LD_VAR 0 10
47378: PUSH
47379: LD_VAR 0 6
47383: PPUSH
47384: CALL_OW 311
47388: PPUSH
47389: LD_INT 3
47391: PPUSH
47392: CALL_OW 259
47396: PUSH
47397: LD_INT 4
47399: MUL
47400: MUL
47401: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47402: LD_VAR 0 6
47406: PPUSH
47407: CALL_OW 263
47411: PUSH
47412: LD_INT 2
47414: EQUAL
47415: IFFALSE 47466
// begin j := IsControledBy ( i ) ;
47417: LD_ADDR_VAR 0 7
47421: PUSH
47422: LD_VAR 0 6
47426: PPUSH
47427: CALL_OW 312
47431: ST_TO_ADDR
// if j then
47432: LD_VAR 0 7
47436: IFFALSE 47466
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47438: LD_ADDR_VAR 0 10
47442: PUSH
47443: LD_VAR 0 10
47447: PUSH
47448: LD_VAR 0 7
47452: PPUSH
47453: LD_INT 3
47455: PPUSH
47456: CALL_OW 259
47460: PUSH
47461: LD_INT 3
47463: MUL
47464: MUL
47465: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47466: LD_VAR 0 6
47470: PPUSH
47471: CALL_OW 264
47475: PUSH
47476: LD_INT 5
47478: PUSH
47479: LD_INT 6
47481: PUSH
47482: LD_INT 46
47484: PUSH
47485: LD_INT 44
47487: PUSH
47488: LD_INT 47
47490: PUSH
47491: LD_INT 45
47493: PUSH
47494: LD_INT 28
47496: PUSH
47497: LD_INT 7
47499: PUSH
47500: LD_INT 27
47502: PUSH
47503: LD_INT 29
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: IN
47518: IFFALSE 47538
47520: PUSH
47521: LD_VAR 0 1
47525: PPUSH
47526: LD_INT 52
47528: PPUSH
47529: CALL_OW 321
47533: PUSH
47534: LD_INT 2
47536: EQUAL
47537: AND
47538: IFFALSE 47555
// bpoints := bpoints * 1.2 ;
47540: LD_ADDR_VAR 0 10
47544: PUSH
47545: LD_VAR 0 10
47549: PUSH
47550: LD_REAL  1.20000000000000E+0000
47553: MUL
47554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47555: LD_VAR 0 6
47559: PPUSH
47560: CALL_OW 264
47564: PUSH
47565: LD_INT 6
47567: PUSH
47568: LD_INT 46
47570: PUSH
47571: LD_INT 47
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: IN
47579: IFFALSE 47596
// bpoints := bpoints * 1.2 ;
47581: LD_ADDR_VAR 0 10
47585: PUSH
47586: LD_VAR 0 10
47590: PUSH
47591: LD_REAL  1.20000000000000E+0000
47594: MUL
47595: ST_TO_ADDR
// end ; unit_building :
47596: GO 47610
47598: LD_INT 3
47600: DOUBLE
47601: EQUAL
47602: IFTRUE 47606
47604: GO 47609
47606: POP
// ; end ;
47607: GO 47610
47609: POP
// for j = 1 to 3 do
47610: LD_ADDR_VAR 0 7
47614: PUSH
47615: DOUBLE
47616: LD_INT 1
47618: DEC
47619: ST_TO_ADDR
47620: LD_INT 3
47622: PUSH
47623: FOR_TO
47624: IFFALSE 47677
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47626: LD_ADDR_VAR 0 5
47630: PUSH
47631: LD_VAR 0 5
47635: PPUSH
47636: LD_VAR 0 7
47640: PPUSH
47641: LD_VAR 0 5
47645: PUSH
47646: LD_VAR 0 7
47650: ARRAY
47651: PUSH
47652: LD_VAR 0 9
47656: PUSH
47657: LD_VAR 0 7
47661: ARRAY
47662: PUSH
47663: LD_VAR 0 10
47667: MUL
47668: PLUS
47669: PPUSH
47670: CALL_OW 1
47674: ST_TO_ADDR
47675: GO 47623
47677: POP
47678: POP
// end ;
47679: GO 46152
47681: POP
47682: POP
// result := Replace ( result , 4 , tmp ) ;
47683: LD_ADDR_VAR 0 5
47687: PUSH
47688: LD_VAR 0 5
47692: PPUSH
47693: LD_INT 4
47695: PPUSH
47696: LD_VAR 0 8
47700: PPUSH
47701: CALL_OW 1
47705: ST_TO_ADDR
// end ;
47706: LD_VAR 0 5
47710: RET
// export function DangerAtRange ( unit , range ) ; begin
47711: LD_INT 0
47713: PPUSH
// if not unit then
47714: LD_VAR 0 1
47718: NOT
47719: IFFALSE 47723
// exit ;
47721: GO 47768
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47723: LD_ADDR_VAR 0 3
47727: PUSH
47728: LD_VAR 0 1
47732: PPUSH
47733: CALL_OW 255
47737: PPUSH
47738: LD_VAR 0 1
47742: PPUSH
47743: CALL_OW 250
47747: PPUSH
47748: LD_VAR 0 1
47752: PPUSH
47753: CALL_OW 251
47757: PPUSH
47758: LD_VAR 0 2
47762: PPUSH
47763: CALL 46002 0 4
47767: ST_TO_ADDR
// end ;
47768: LD_VAR 0 3
47772: RET
// export function DangerInArea ( side , area ) ; begin
47773: LD_INT 0
47775: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47776: LD_ADDR_VAR 0 3
47780: PUSH
47781: LD_VAR 0 2
47785: PPUSH
47786: LD_INT 81
47788: PUSH
47789: LD_VAR 0 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PPUSH
47798: CALL_OW 70
47802: ST_TO_ADDR
// end ;
47803: LD_VAR 0 3
47807: RET
// export function IsExtension ( b ) ; begin
47808: LD_INT 0
47810: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47811: LD_ADDR_VAR 0 2
47815: PUSH
47816: LD_VAR 0 1
47820: PUSH
47821: LD_INT 23
47823: PUSH
47824: LD_INT 20
47826: PUSH
47827: LD_INT 22
47829: PUSH
47830: LD_INT 17
47832: PUSH
47833: LD_INT 24
47835: PUSH
47836: LD_INT 21
47838: PUSH
47839: LD_INT 19
47841: PUSH
47842: LD_INT 16
47844: PUSH
47845: LD_INT 25
47847: PUSH
47848: LD_INT 18
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: IN
47863: ST_TO_ADDR
// end ;
47864: LD_VAR 0 2
47868: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47869: LD_INT 0
47871: PPUSH
47872: PPUSH
47873: PPUSH
// result := [ ] ;
47874: LD_ADDR_VAR 0 4
47878: PUSH
47879: EMPTY
47880: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47881: LD_ADDR_VAR 0 5
47885: PUSH
47886: LD_VAR 0 2
47890: PPUSH
47891: LD_INT 21
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PPUSH
47901: CALL_OW 70
47905: ST_TO_ADDR
// if not tmp then
47906: LD_VAR 0 5
47910: NOT
47911: IFFALSE 47915
// exit ;
47913: GO 47979
// if checkLink then
47915: LD_VAR 0 3
47919: IFFALSE 47969
// begin for i in tmp do
47921: LD_ADDR_VAR 0 6
47925: PUSH
47926: LD_VAR 0 5
47930: PUSH
47931: FOR_IN
47932: IFFALSE 47967
// if GetBase ( i ) <> base then
47934: LD_VAR 0 6
47938: PPUSH
47939: CALL_OW 274
47943: PUSH
47944: LD_VAR 0 1
47948: NONEQUAL
47949: IFFALSE 47965
// ComLinkToBase ( base , i ) ;
47951: LD_VAR 0 1
47955: PPUSH
47956: LD_VAR 0 6
47960: PPUSH
47961: CALL_OW 169
47965: GO 47931
47967: POP
47968: POP
// end ; result := tmp ;
47969: LD_ADDR_VAR 0 4
47973: PUSH
47974: LD_VAR 0 5
47978: ST_TO_ADDR
// end ;
47979: LD_VAR 0 4
47983: RET
// export function ComComplete ( units , b ) ; var i ; begin
47984: LD_INT 0
47986: PPUSH
47987: PPUSH
// if not units then
47988: LD_VAR 0 1
47992: NOT
47993: IFFALSE 47997
// exit ;
47995: GO 48087
// for i in units do
47997: LD_ADDR_VAR 0 4
48001: PUSH
48002: LD_VAR 0 1
48006: PUSH
48007: FOR_IN
48008: IFFALSE 48085
// if BuildingStatus ( b ) = bs_build then
48010: LD_VAR 0 2
48014: PPUSH
48015: CALL_OW 461
48019: PUSH
48020: LD_INT 1
48022: EQUAL
48023: IFFALSE 48083
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48025: LD_VAR 0 4
48029: PPUSH
48030: LD_STRING h
48032: PUSH
48033: LD_VAR 0 2
48037: PPUSH
48038: CALL_OW 250
48042: PUSH
48043: LD_VAR 0 2
48047: PPUSH
48048: CALL_OW 251
48052: PUSH
48053: LD_VAR 0 2
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: PPUSH
48079: CALL_OW 446
48083: GO 48007
48085: POP
48086: POP
// end ;
48087: LD_VAR 0 3
48091: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48092: LD_INT 0
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48100: LD_VAR 0 1
48104: NOT
48105: IFTRUE 48122
48107: PUSH
48108: LD_VAR 0 1
48112: PPUSH
48113: CALL_OW 263
48117: PUSH
48118: LD_INT 2
48120: NONEQUAL
48121: OR
48122: IFFALSE 48126
// exit ;
48124: GO 48442
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48126: LD_ADDR_VAR 0 6
48130: PUSH
48131: LD_INT 22
48133: PUSH
48134: LD_VAR 0 1
48138: PPUSH
48139: CALL_OW 255
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: LD_INT 30
48153: PUSH
48154: LD_INT 36
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 34
48163: PUSH
48164: LD_INT 31
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: LIST
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PPUSH
48180: CALL_OW 69
48184: ST_TO_ADDR
// if not tmp then
48185: LD_VAR 0 6
48189: NOT
48190: IFFALSE 48194
// exit ;
48192: GO 48442
// result := [ ] ;
48194: LD_ADDR_VAR 0 2
48198: PUSH
48199: EMPTY
48200: ST_TO_ADDR
// for i in tmp do
48201: LD_ADDR_VAR 0 3
48205: PUSH
48206: LD_VAR 0 6
48210: PUSH
48211: FOR_IN
48212: IFFALSE 48283
// begin t := UnitsInside ( i ) ;
48214: LD_ADDR_VAR 0 4
48218: PUSH
48219: LD_VAR 0 3
48223: PPUSH
48224: CALL_OW 313
48228: ST_TO_ADDR
// if t then
48229: LD_VAR 0 4
48233: IFFALSE 48281
// for j in t do
48235: LD_ADDR_VAR 0 7
48239: PUSH
48240: LD_VAR 0 4
48244: PUSH
48245: FOR_IN
48246: IFFALSE 48279
// result := Replace ( result , result + 1 , j ) ;
48248: LD_ADDR_VAR 0 2
48252: PUSH
48253: LD_VAR 0 2
48257: PPUSH
48258: LD_VAR 0 2
48262: PUSH
48263: LD_INT 1
48265: PLUS
48266: PPUSH
48267: LD_VAR 0 7
48271: PPUSH
48272: CALL_OW 1
48276: ST_TO_ADDR
48277: GO 48245
48279: POP
48280: POP
// end ;
48281: GO 48211
48283: POP
48284: POP
// if not result then
48285: LD_VAR 0 2
48289: NOT
48290: IFFALSE 48294
// exit ;
48292: GO 48442
// mech := result [ 1 ] ;
48294: LD_ADDR_VAR 0 5
48298: PUSH
48299: LD_VAR 0 2
48303: PUSH
48304: LD_INT 1
48306: ARRAY
48307: ST_TO_ADDR
// if result > 1 then
48308: LD_VAR 0 2
48312: PUSH
48313: LD_INT 1
48315: GREATER
48316: IFFALSE 48428
// begin for i = 2 to result do
48318: LD_ADDR_VAR 0 3
48322: PUSH
48323: DOUBLE
48324: LD_INT 2
48326: DEC
48327: ST_TO_ADDR
48328: LD_VAR 0 2
48332: PUSH
48333: FOR_TO
48334: IFFALSE 48426
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48336: LD_ADDR_VAR 0 4
48340: PUSH
48341: LD_VAR 0 2
48345: PUSH
48346: LD_VAR 0 3
48350: ARRAY
48351: PPUSH
48352: LD_INT 3
48354: PPUSH
48355: CALL_OW 259
48359: PUSH
48360: LD_VAR 0 2
48364: PUSH
48365: LD_VAR 0 3
48369: ARRAY
48370: PPUSH
48371: CALL_OW 432
48375: MINUS
48376: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48377: LD_VAR 0 4
48381: PUSH
48382: LD_VAR 0 5
48386: PPUSH
48387: LD_INT 3
48389: PPUSH
48390: CALL_OW 259
48394: PUSH
48395: LD_VAR 0 5
48399: PPUSH
48400: CALL_OW 432
48404: MINUS
48405: GREATEREQUAL
48406: IFFALSE 48424
// mech := result [ i ] ;
48408: LD_ADDR_VAR 0 5
48412: PUSH
48413: LD_VAR 0 2
48417: PUSH
48418: LD_VAR 0 3
48422: ARRAY
48423: ST_TO_ADDR
// end ;
48424: GO 48333
48426: POP
48427: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48428: LD_VAR 0 1
48432: PPUSH
48433: LD_VAR 0 5
48437: PPUSH
48438: CALL_OW 135
// end ;
48442: LD_VAR 0 2
48446: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48447: LD_INT 0
48449: PPUSH
48450: PPUSH
48451: PPUSH
48452: PPUSH
48453: PPUSH
48454: PPUSH
48455: PPUSH
48456: PPUSH
48457: PPUSH
48458: PPUSH
48459: PPUSH
48460: PPUSH
48461: PPUSH
// result := [ ] ;
48462: LD_ADDR_VAR 0 7
48466: PUSH
48467: EMPTY
48468: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48469: LD_VAR 0 1
48473: PPUSH
48474: CALL_OW 266
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: IN
48489: NOT
48490: IFFALSE 48494
// exit ;
48492: GO 50134
// if name then
48494: LD_VAR 0 3
48498: IFFALSE 48514
// SetBName ( base_dep , name ) ;
48500: LD_VAR 0 1
48504: PPUSH
48505: LD_VAR 0 3
48509: PPUSH
48510: CALL_OW 500
// base := GetBase ( base_dep ) ;
48514: LD_ADDR_VAR 0 15
48518: PUSH
48519: LD_VAR 0 1
48523: PPUSH
48524: CALL_OW 274
48528: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48529: LD_ADDR_VAR 0 16
48533: PUSH
48534: LD_VAR 0 1
48538: PPUSH
48539: CALL_OW 255
48543: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48544: LD_ADDR_VAR 0 17
48548: PUSH
48549: LD_VAR 0 1
48553: PPUSH
48554: CALL_OW 248
48558: ST_TO_ADDR
// if sources then
48559: LD_VAR 0 5
48563: IFFALSE 48610
// for i = 1 to 3 do
48565: LD_ADDR_VAR 0 8
48569: PUSH
48570: DOUBLE
48571: LD_INT 1
48573: DEC
48574: ST_TO_ADDR
48575: LD_INT 3
48577: PUSH
48578: FOR_TO
48579: IFFALSE 48608
// AddResourceType ( base , i , sources [ i ] ) ;
48581: LD_VAR 0 15
48585: PPUSH
48586: LD_VAR 0 8
48590: PPUSH
48591: LD_VAR 0 5
48595: PUSH
48596: LD_VAR 0 8
48600: ARRAY
48601: PPUSH
48602: CALL_OW 276
48606: GO 48578
48608: POP
48609: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48610: LD_ADDR_VAR 0 18
48614: PUSH
48615: LD_VAR 0 15
48619: PPUSH
48620: LD_VAR 0 2
48624: PPUSH
48625: LD_INT 1
48627: PPUSH
48628: CALL 47869 0 3
48632: ST_TO_ADDR
// InitHc ;
48633: CALL_OW 19
// InitUc ;
48637: CALL_OW 18
// uc_side := side ;
48641: LD_ADDR_OWVAR 20
48645: PUSH
48646: LD_VAR 0 16
48650: ST_TO_ADDR
// uc_nation := nation ;
48651: LD_ADDR_OWVAR 21
48655: PUSH
48656: LD_VAR 0 17
48660: ST_TO_ADDR
// if buildings then
48661: LD_VAR 0 18
48665: IFFALSE 49993
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48667: LD_ADDR_VAR 0 19
48671: PUSH
48672: LD_VAR 0 18
48676: PPUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 30
48682: PUSH
48683: LD_INT 29
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 30
48692: PUSH
48693: LD_INT 30
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: LIST
48704: PPUSH
48705: CALL_OW 72
48709: ST_TO_ADDR
// if tmp then
48710: LD_VAR 0 19
48714: IFFALSE 48762
// for i in tmp do
48716: LD_ADDR_VAR 0 8
48720: PUSH
48721: LD_VAR 0 19
48725: PUSH
48726: FOR_IN
48727: IFFALSE 48760
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48729: LD_VAR 0 8
48733: PPUSH
48734: CALL_OW 250
48738: PPUSH
48739: LD_VAR 0 8
48743: PPUSH
48744: CALL_OW 251
48748: PPUSH
48749: LD_VAR 0 16
48753: PPUSH
48754: CALL_OW 441
48758: GO 48726
48760: POP
48761: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48762: LD_VAR 0 18
48766: PPUSH
48767: LD_INT 2
48769: PUSH
48770: LD_INT 30
48772: PUSH
48773: LD_INT 32
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 30
48782: PUSH
48783: LD_INT 33
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: LIST
48794: PPUSH
48795: CALL_OW 72
48799: IFFALSE 48887
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48801: LD_ADDR_VAR 0 8
48805: PUSH
48806: LD_VAR 0 18
48810: PPUSH
48811: LD_INT 2
48813: PUSH
48814: LD_INT 30
48816: PUSH
48817: LD_INT 32
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 30
48826: PUSH
48827: LD_INT 33
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: LIST
48838: PPUSH
48839: CALL_OW 72
48843: PUSH
48844: FOR_IN
48845: IFFALSE 48885
// begin if not GetBWeapon ( i ) then
48847: LD_VAR 0 8
48851: PPUSH
48852: CALL_OW 269
48856: NOT
48857: IFFALSE 48883
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48859: LD_VAR 0 8
48863: PPUSH
48864: LD_VAR 0 8
48868: PPUSH
48869: LD_VAR 0 2
48873: PPUSH
48874: CALL 50139 0 2
48878: PPUSH
48879: CALL_OW 431
// end ;
48883: GO 48844
48885: POP
48886: POP
// end ; for i = 1 to personel do
48887: LD_ADDR_VAR 0 8
48891: PUSH
48892: DOUBLE
48893: LD_INT 1
48895: DEC
48896: ST_TO_ADDR
48897: LD_VAR 0 6
48901: PUSH
48902: FOR_TO
48903: IFFALSE 49973
// begin if i > 4 then
48905: LD_VAR 0 8
48909: PUSH
48910: LD_INT 4
48912: GREATER
48913: IFFALSE 48917
// break ;
48915: GO 49973
// case i of 1 :
48917: LD_VAR 0 8
48921: PUSH
48922: LD_INT 1
48924: DOUBLE
48925: EQUAL
48926: IFTRUE 48930
48928: GO 49010
48930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48931: LD_ADDR_VAR 0 12
48935: PUSH
48936: LD_VAR 0 18
48940: PPUSH
48941: LD_INT 22
48943: PUSH
48944: LD_VAR 0 16
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 58
48955: PUSH
48956: EMPTY
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 30
48964: PUSH
48965: LD_INT 32
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 30
48974: PUSH
48975: LD_INT 4
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 30
48984: PUSH
48985: LD_INT 5
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: PPUSH
49003: CALL_OW 72
49007: ST_TO_ADDR
49008: GO 49232
49010: LD_INT 2
49012: DOUBLE
49013: EQUAL
49014: IFTRUE 49018
49016: GO 49080
49018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49019: LD_ADDR_VAR 0 12
49023: PUSH
49024: LD_VAR 0 18
49028: PPUSH
49029: LD_INT 22
49031: PUSH
49032: LD_VAR 0 16
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: LD_INT 30
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 30
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PPUSH
49073: CALL_OW 72
49077: ST_TO_ADDR
49078: GO 49232
49080: LD_INT 3
49082: DOUBLE
49083: EQUAL
49084: IFTRUE 49088
49086: GO 49150
49088: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49089: LD_ADDR_VAR 0 12
49093: PUSH
49094: LD_VAR 0 18
49098: PPUSH
49099: LD_INT 22
49101: PUSH
49102: LD_VAR 0 16
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 30
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 30
49126: PUSH
49127: LD_INT 3
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PPUSH
49143: CALL_OW 72
49147: ST_TO_ADDR
49148: GO 49232
49150: LD_INT 4
49152: DOUBLE
49153: EQUAL
49154: IFTRUE 49158
49156: GO 49231
49158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49159: LD_ADDR_VAR 0 12
49163: PUSH
49164: LD_VAR 0 18
49168: PPUSH
49169: LD_INT 22
49171: PUSH
49172: LD_VAR 0 16
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: LD_INT 30
49186: PUSH
49187: LD_INT 6
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 30
49196: PUSH
49197: LD_INT 7
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 30
49206: PUSH
49207: LD_INT 8
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PPUSH
49224: CALL_OW 72
49228: ST_TO_ADDR
49229: GO 49232
49231: POP
// if i = 1 then
49232: LD_VAR 0 8
49236: PUSH
49237: LD_INT 1
49239: EQUAL
49240: IFFALSE 49351
// begin tmp := [ ] ;
49242: LD_ADDR_VAR 0 19
49246: PUSH
49247: EMPTY
49248: ST_TO_ADDR
// for j in f do
49249: LD_ADDR_VAR 0 9
49253: PUSH
49254: LD_VAR 0 12
49258: PUSH
49259: FOR_IN
49260: IFFALSE 49333
// if GetBType ( j ) = b_bunker then
49262: LD_VAR 0 9
49266: PPUSH
49267: CALL_OW 266
49271: PUSH
49272: LD_INT 32
49274: EQUAL
49275: IFFALSE 49302
// tmp := Insert ( tmp , 1 , j ) else
49277: LD_ADDR_VAR 0 19
49281: PUSH
49282: LD_VAR 0 19
49286: PPUSH
49287: LD_INT 1
49289: PPUSH
49290: LD_VAR 0 9
49294: PPUSH
49295: CALL_OW 2
49299: ST_TO_ADDR
49300: GO 49331
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49302: LD_ADDR_VAR 0 19
49306: PUSH
49307: LD_VAR 0 19
49311: PPUSH
49312: LD_VAR 0 19
49316: PUSH
49317: LD_INT 1
49319: PLUS
49320: PPUSH
49321: LD_VAR 0 9
49325: PPUSH
49326: CALL_OW 2
49330: ST_TO_ADDR
49331: GO 49259
49333: POP
49334: POP
// if tmp then
49335: LD_VAR 0 19
49339: IFFALSE 49351
// f := tmp ;
49341: LD_ADDR_VAR 0 12
49345: PUSH
49346: LD_VAR 0 19
49350: ST_TO_ADDR
// end ; x := personel [ i ] ;
49351: LD_ADDR_VAR 0 13
49355: PUSH
49356: LD_VAR 0 6
49360: PUSH
49361: LD_VAR 0 8
49365: ARRAY
49366: ST_TO_ADDR
// if x = - 1 then
49367: LD_VAR 0 13
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: EQUAL
49376: IFFALSE 49587
// begin for j in f do
49378: LD_ADDR_VAR 0 9
49382: PUSH
49383: LD_VAR 0 12
49387: PUSH
49388: FOR_IN
49389: IFFALSE 49583
// repeat InitHc ;
49391: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49395: LD_VAR 0 9
49399: PPUSH
49400: CALL_OW 266
49404: PUSH
49405: LD_INT 5
49407: EQUAL
49408: IFFALSE 49478
// begin if UnitsInside ( j ) < 3 then
49410: LD_VAR 0 9
49414: PPUSH
49415: CALL_OW 313
49419: PUSH
49420: LD_INT 3
49422: LESS
49423: IFFALSE 49459
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49425: LD_INT 0
49427: PPUSH
49428: LD_INT 5
49430: PUSH
49431: LD_INT 8
49433: PUSH
49434: LD_INT 9
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: PUSH
49442: LD_VAR 0 17
49446: ARRAY
49447: PPUSH
49448: LD_VAR 0 4
49452: PPUSH
49453: CALL_OW 380
49457: GO 49476
// PrepareHuman ( false , i , skill ) ;
49459: LD_INT 0
49461: PPUSH
49462: LD_VAR 0 8
49466: PPUSH
49467: LD_VAR 0 4
49471: PPUSH
49472: CALL_OW 380
// end else
49476: GO 49495
// PrepareHuman ( false , i , skill ) ;
49478: LD_INT 0
49480: PPUSH
49481: LD_VAR 0 8
49485: PPUSH
49486: LD_VAR 0 4
49490: PPUSH
49491: CALL_OW 380
// un := CreateHuman ;
49495: LD_ADDR_VAR 0 14
49499: PUSH
49500: CALL_OW 44
49504: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49505: LD_ADDR_VAR 0 7
49509: PUSH
49510: LD_VAR 0 7
49514: PPUSH
49515: LD_INT 1
49517: PPUSH
49518: LD_VAR 0 14
49522: PPUSH
49523: CALL_OW 2
49527: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49528: LD_VAR 0 14
49532: PPUSH
49533: LD_VAR 0 9
49537: PPUSH
49538: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49542: LD_VAR 0 9
49546: PPUSH
49547: CALL_OW 313
49551: PUSH
49552: LD_INT 6
49554: EQUAL
49555: IFTRUE 49579
49557: PUSH
49558: LD_VAR 0 9
49562: PPUSH
49563: CALL_OW 266
49567: PUSH
49568: LD_INT 32
49570: PUSH
49571: LD_INT 31
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: IN
49578: OR
49579: IFFALSE 49391
49581: GO 49388
49583: POP
49584: POP
// end else
49585: GO 49971
// for j = 1 to x do
49587: LD_ADDR_VAR 0 9
49591: PUSH
49592: DOUBLE
49593: LD_INT 1
49595: DEC
49596: ST_TO_ADDR
49597: LD_VAR 0 13
49601: PUSH
49602: FOR_TO
49603: IFFALSE 49969
// begin InitHc ;
49605: CALL_OW 19
// if not f then
49609: LD_VAR 0 12
49613: NOT
49614: IFFALSE 49703
// begin PrepareHuman ( false , i , skill ) ;
49616: LD_INT 0
49618: PPUSH
49619: LD_VAR 0 8
49623: PPUSH
49624: LD_VAR 0 4
49628: PPUSH
49629: CALL_OW 380
// un := CreateHuman ;
49633: LD_ADDR_VAR 0 14
49637: PUSH
49638: CALL_OW 44
49642: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49643: LD_ADDR_VAR 0 7
49647: PUSH
49648: LD_VAR 0 7
49652: PPUSH
49653: LD_INT 1
49655: PPUSH
49656: LD_VAR 0 14
49660: PPUSH
49661: CALL_OW 2
49665: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49666: LD_VAR 0 14
49670: PPUSH
49671: LD_VAR 0 1
49675: PPUSH
49676: CALL_OW 250
49680: PPUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 251
49690: PPUSH
49691: LD_INT 10
49693: PPUSH
49694: LD_INT 0
49696: PPUSH
49697: CALL_OW 50
// continue ;
49701: GO 49602
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49703: LD_VAR 0 12
49707: PUSH
49708: LD_INT 1
49710: ARRAY
49711: PPUSH
49712: CALL_OW 313
49716: IFFALSE 49744
49718: PUSH
49719: LD_VAR 0 12
49723: PUSH
49724: LD_INT 1
49726: ARRAY
49727: PPUSH
49728: CALL_OW 266
49732: PUSH
49733: LD_INT 32
49735: PUSH
49736: LD_INT 31
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: IN
49743: AND
49744: IFTRUE 49765
49746: PUSH
49747: LD_VAR 0 12
49751: PUSH
49752: LD_INT 1
49754: ARRAY
49755: PPUSH
49756: CALL_OW 313
49760: PUSH
49761: LD_INT 6
49763: EQUAL
49764: OR
49765: IFFALSE 49785
// f := Delete ( f , 1 ) ;
49767: LD_ADDR_VAR 0 12
49771: PUSH
49772: LD_VAR 0 12
49776: PPUSH
49777: LD_INT 1
49779: PPUSH
49780: CALL_OW 3
49784: ST_TO_ADDR
// if not f then
49785: LD_VAR 0 12
49789: NOT
49790: IFFALSE 49808
// begin x := x + 2 ;
49792: LD_ADDR_VAR 0 13
49796: PUSH
49797: LD_VAR 0 13
49801: PUSH
49802: LD_INT 2
49804: PLUS
49805: ST_TO_ADDR
// continue ;
49806: GO 49602
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49808: LD_VAR 0 12
49812: PUSH
49813: LD_INT 1
49815: ARRAY
49816: PPUSH
49817: CALL_OW 266
49821: PUSH
49822: LD_INT 5
49824: EQUAL
49825: IFFALSE 49899
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49827: LD_VAR 0 12
49831: PUSH
49832: LD_INT 1
49834: ARRAY
49835: PPUSH
49836: CALL_OW 313
49840: PUSH
49841: LD_INT 3
49843: LESS
49844: IFFALSE 49880
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49846: LD_INT 0
49848: PPUSH
49849: LD_INT 5
49851: PUSH
49852: LD_INT 8
49854: PUSH
49855: LD_INT 9
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: PUSH
49863: LD_VAR 0 17
49867: ARRAY
49868: PPUSH
49869: LD_VAR 0 4
49873: PPUSH
49874: CALL_OW 380
49878: GO 49897
// PrepareHuman ( false , i , skill ) ;
49880: LD_INT 0
49882: PPUSH
49883: LD_VAR 0 8
49887: PPUSH
49888: LD_VAR 0 4
49892: PPUSH
49893: CALL_OW 380
// end else
49897: GO 49916
// PrepareHuman ( false , i , skill ) ;
49899: LD_INT 0
49901: PPUSH
49902: LD_VAR 0 8
49906: PPUSH
49907: LD_VAR 0 4
49911: PPUSH
49912: CALL_OW 380
// un := CreateHuman ;
49916: LD_ADDR_VAR 0 14
49920: PUSH
49921: CALL_OW 44
49925: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49926: LD_ADDR_VAR 0 7
49930: PUSH
49931: LD_VAR 0 7
49935: PPUSH
49936: LD_INT 1
49938: PPUSH
49939: LD_VAR 0 14
49943: PPUSH
49944: CALL_OW 2
49948: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49949: LD_VAR 0 14
49953: PPUSH
49954: LD_VAR 0 12
49958: PUSH
49959: LD_INT 1
49961: ARRAY
49962: PPUSH
49963: CALL_OW 52
// end ;
49967: GO 49602
49969: POP
49970: POP
// end ;
49971: GO 48902
49973: POP
49974: POP
// result := result ^ buildings ;
49975: LD_ADDR_VAR 0 7
49979: PUSH
49980: LD_VAR 0 7
49984: PUSH
49985: LD_VAR 0 18
49989: ADD
49990: ST_TO_ADDR
// end else
49991: GO 50134
// begin for i = 1 to personel do
49993: LD_ADDR_VAR 0 8
49997: PUSH
49998: DOUBLE
49999: LD_INT 1
50001: DEC
50002: ST_TO_ADDR
50003: LD_VAR 0 6
50007: PUSH
50008: FOR_TO
50009: IFFALSE 50132
// begin if i > 4 then
50011: LD_VAR 0 8
50015: PUSH
50016: LD_INT 4
50018: GREATER
50019: IFFALSE 50023
// break ;
50021: GO 50132
// x := personel [ i ] ;
50023: LD_ADDR_VAR 0 13
50027: PUSH
50028: LD_VAR 0 6
50032: PUSH
50033: LD_VAR 0 8
50037: ARRAY
50038: ST_TO_ADDR
// if x = - 1 then
50039: LD_VAR 0 13
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: EQUAL
50048: IFFALSE 50052
// continue ;
50050: GO 50008
// PrepareHuman ( false , i , skill ) ;
50052: LD_INT 0
50054: PPUSH
50055: LD_VAR 0 8
50059: PPUSH
50060: LD_VAR 0 4
50064: PPUSH
50065: CALL_OW 380
// un := CreateHuman ;
50069: LD_ADDR_VAR 0 14
50073: PUSH
50074: CALL_OW 44
50078: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50079: LD_VAR 0 14
50083: PPUSH
50084: LD_VAR 0 1
50088: PPUSH
50089: CALL_OW 250
50093: PPUSH
50094: LD_VAR 0 1
50098: PPUSH
50099: CALL_OW 251
50103: PPUSH
50104: LD_INT 10
50106: PPUSH
50107: LD_INT 0
50109: PPUSH
50110: CALL_OW 50
// result := result ^ un ;
50114: LD_ADDR_VAR 0 7
50118: PUSH
50119: LD_VAR 0 7
50123: PUSH
50124: LD_VAR 0 14
50128: ADD
50129: ST_TO_ADDR
// end ;
50130: GO 50008
50132: POP
50133: POP
// end ; end ;
50134: LD_VAR 0 7
50138: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50139: LD_INT 0
50141: PPUSH
50142: PPUSH
50143: PPUSH
50144: PPUSH
50145: PPUSH
50146: PPUSH
50147: PPUSH
50148: PPUSH
50149: PPUSH
50150: PPUSH
50151: PPUSH
50152: PPUSH
50153: PPUSH
50154: PPUSH
50155: PPUSH
50156: PPUSH
// result := false ;
50157: LD_ADDR_VAR 0 3
50161: PUSH
50162: LD_INT 0
50164: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50165: LD_VAR 0 1
50169: NOT
50170: IFTRUE 50195
50172: PUSH
50173: LD_VAR 0 1
50177: PPUSH
50178: CALL_OW 266
50182: PUSH
50183: LD_INT 32
50185: PUSH
50186: LD_INT 33
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: IN
50193: NOT
50194: OR
50195: IFFALSE 50199
// exit ;
50197: GO 51334
// nat := GetNation ( tower ) ;
50199: LD_ADDR_VAR 0 12
50203: PUSH
50204: LD_VAR 0 1
50208: PPUSH
50209: CALL_OW 248
50213: ST_TO_ADDR
// side := GetSide ( tower ) ;
50214: LD_ADDR_VAR 0 16
50218: PUSH
50219: LD_VAR 0 1
50223: PPUSH
50224: CALL_OW 255
50228: ST_TO_ADDR
// x := GetX ( tower ) ;
50229: LD_ADDR_VAR 0 10
50233: PUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: CALL_OW 250
50243: ST_TO_ADDR
// y := GetY ( tower ) ;
50244: LD_ADDR_VAR 0 11
50248: PUSH
50249: LD_VAR 0 1
50253: PPUSH
50254: CALL_OW 251
50258: ST_TO_ADDR
// if not x or not y then
50259: LD_VAR 0 10
50263: NOT
50264: IFTRUE 50273
50266: PUSH
50267: LD_VAR 0 11
50271: NOT
50272: OR
50273: IFFALSE 50277
// exit ;
50275: GO 51334
// weapon := 0 ;
50277: LD_ADDR_VAR 0 18
50281: PUSH
50282: LD_INT 0
50284: ST_TO_ADDR
// fac_list := [ ] ;
50285: LD_ADDR_VAR 0 17
50289: PUSH
50290: EMPTY
50291: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50292: LD_ADDR_VAR 0 6
50296: PUSH
50297: LD_VAR 0 1
50301: PPUSH
50302: CALL_OW 274
50306: PPUSH
50307: LD_VAR 0 2
50311: PPUSH
50312: LD_INT 0
50314: PPUSH
50315: CALL 47869 0 3
50319: PPUSH
50320: LD_INT 30
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PPUSH
50330: CALL_OW 72
50334: ST_TO_ADDR
// if not factories then
50335: LD_VAR 0 6
50339: NOT
50340: IFFALSE 50344
// exit ;
50342: GO 51334
// for i in factories do
50344: LD_ADDR_VAR 0 8
50348: PUSH
50349: LD_VAR 0 6
50353: PUSH
50354: FOR_IN
50355: IFFALSE 50380
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50357: LD_ADDR_VAR 0 17
50361: PUSH
50362: LD_VAR 0 17
50366: PUSH
50367: LD_VAR 0 8
50371: PPUSH
50372: CALL_OW 478
50376: UNION
50377: ST_TO_ADDR
50378: GO 50354
50380: POP
50381: POP
// if not fac_list then
50382: LD_VAR 0 17
50386: NOT
50387: IFFALSE 50391
// exit ;
50389: GO 51334
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50391: LD_ADDR_VAR 0 5
50395: PUSH
50396: LD_INT 4
50398: PUSH
50399: LD_INT 5
50401: PUSH
50402: LD_INT 9
50404: PUSH
50405: LD_INT 10
50407: PUSH
50408: LD_INT 6
50410: PUSH
50411: LD_INT 7
50413: PUSH
50414: LD_INT 11
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 27
50428: PUSH
50429: LD_INT 28
50431: PUSH
50432: LD_INT 26
50434: PUSH
50435: LD_INT 30
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 43
50446: PUSH
50447: LD_INT 44
50449: PUSH
50450: LD_INT 46
50452: PUSH
50453: LD_INT 45
50455: PUSH
50456: LD_INT 47
50458: PUSH
50459: LD_INT 49
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: PUSH
50475: LD_VAR 0 12
50479: ARRAY
50480: ST_TO_ADDR
// list := list isect fac_list ;
50481: LD_ADDR_VAR 0 5
50485: PUSH
50486: LD_VAR 0 5
50490: PUSH
50491: LD_VAR 0 17
50495: ISECT
50496: ST_TO_ADDR
// if not list then
50497: LD_VAR 0 5
50501: NOT
50502: IFFALSE 50506
// exit ;
50504: GO 51334
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50506: LD_VAR 0 12
50510: PUSH
50511: LD_INT 3
50513: EQUAL
50514: IFFALSE 50526
50516: PUSH
50517: LD_INT 49
50519: PUSH
50520: LD_VAR 0 5
50524: IN
50525: AND
50526: IFFALSE 50546
50528: PUSH
50529: LD_INT 31
50531: PPUSH
50532: LD_VAR 0 16
50536: PPUSH
50537: CALL_OW 321
50541: PUSH
50542: LD_INT 2
50544: EQUAL
50545: AND
50546: IFFALSE 50606
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50548: LD_INT 22
50550: PUSH
50551: LD_VAR 0 16
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 35
50562: PUSH
50563: LD_INT 49
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 91
50572: PUSH
50573: LD_VAR 0 1
50577: PUSH
50578: LD_INT 10
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: LIST
50590: PPUSH
50591: CALL_OW 69
50595: NOT
50596: IFFALSE 50606
// weapon := ru_time_lapser ;
50598: LD_ADDR_VAR 0 18
50602: PUSH
50603: LD_INT 49
50605: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50606: LD_VAR 0 12
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: IN
50621: IFFALSE 50645
50623: PUSH
50624: LD_INT 11
50626: PUSH
50627: LD_VAR 0 5
50631: IN
50632: IFTRUE 50644
50634: PUSH
50635: LD_INT 30
50637: PUSH
50638: LD_VAR 0 5
50642: IN
50643: OR
50644: AND
50645: IFFALSE 50665
50647: PUSH
50648: LD_INT 6
50650: PPUSH
50651: LD_VAR 0 16
50655: PPUSH
50656: CALL_OW 321
50660: PUSH
50661: LD_INT 2
50663: EQUAL
50664: AND
50665: IFFALSE 50832
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50667: LD_INT 22
50669: PUSH
50670: LD_VAR 0 16
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 35
50684: PUSH
50685: LD_INT 11
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 35
50694: PUSH
50695: LD_INT 30
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 91
50709: PUSH
50710: LD_VAR 0 1
50714: PUSH
50715: LD_INT 18
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: PPUSH
50728: CALL_OW 69
50732: NOT
50733: IFFALSE 50809
50735: PUSH
50736: LD_INT 22
50738: PUSH
50739: LD_VAR 0 16
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 30
50753: PUSH
50754: LD_INT 32
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 30
50763: PUSH
50764: LD_INT 33
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 91
50778: PUSH
50779: LD_VAR 0 1
50783: PUSH
50784: LD_INT 12
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: PPUSH
50800: CALL_OW 69
50804: PUSH
50805: LD_INT 2
50807: GREATER
50808: AND
50809: IFFALSE 50832
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50811: LD_ADDR_VAR 0 18
50815: PUSH
50816: LD_INT 11
50818: PUSH
50819: LD_INT 30
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_VAR 0 12
50830: ARRAY
50831: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50832: LD_VAR 0 18
50836: NOT
50837: IFFALSE 50857
50839: PUSH
50840: LD_INT 40
50842: PPUSH
50843: LD_VAR 0 16
50847: PPUSH
50848: CALL_OW 321
50852: PUSH
50853: LD_INT 2
50855: EQUAL
50856: AND
50857: IFFALSE 50893
50859: PUSH
50860: LD_INT 7
50862: PUSH
50863: LD_VAR 0 5
50867: IN
50868: IFTRUE 50880
50870: PUSH
50871: LD_INT 28
50873: PUSH
50874: LD_VAR 0 5
50878: IN
50879: OR
50880: IFTRUE 50892
50882: PUSH
50883: LD_INT 45
50885: PUSH
50886: LD_VAR 0 5
50890: IN
50891: OR
50892: AND
50893: IFFALSE 51147
// begin hex := GetHexInfo ( x , y ) ;
50895: LD_ADDR_VAR 0 4
50899: PUSH
50900: LD_VAR 0 10
50904: PPUSH
50905: LD_VAR 0 11
50909: PPUSH
50910: CALL_OW 546
50914: ST_TO_ADDR
// if hex [ 1 ] then
50915: LD_VAR 0 4
50919: PUSH
50920: LD_INT 1
50922: ARRAY
50923: IFFALSE 50927
// exit ;
50925: GO 51334
// height := hex [ 2 ] ;
50927: LD_ADDR_VAR 0 15
50931: PUSH
50932: LD_VAR 0 4
50936: PUSH
50937: LD_INT 2
50939: ARRAY
50940: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50941: LD_ADDR_VAR 0 14
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: LD_INT 5
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// for i in tmp do
50964: LD_ADDR_VAR 0 8
50968: PUSH
50969: LD_VAR 0 14
50973: PUSH
50974: FOR_IN
50975: IFFALSE 51145
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50977: LD_ADDR_VAR 0 9
50981: PUSH
50982: LD_VAR 0 10
50986: PPUSH
50987: LD_VAR 0 8
50991: PPUSH
50992: LD_INT 5
50994: PPUSH
50995: CALL_OW 272
50999: PUSH
51000: LD_VAR 0 11
51004: PPUSH
51005: LD_VAR 0 8
51009: PPUSH
51010: LD_INT 5
51012: PPUSH
51013: CALL_OW 273
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51022: LD_VAR 0 9
51026: PUSH
51027: LD_INT 1
51029: ARRAY
51030: PPUSH
51031: LD_VAR 0 9
51035: PUSH
51036: LD_INT 2
51038: ARRAY
51039: PPUSH
51040: CALL_OW 488
51044: IFFALSE 51143
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51046: LD_ADDR_VAR 0 4
51050: PUSH
51051: LD_VAR 0 9
51055: PUSH
51056: LD_INT 1
51058: ARRAY
51059: PPUSH
51060: LD_VAR 0 9
51064: PUSH
51065: LD_INT 2
51067: ARRAY
51068: PPUSH
51069: CALL_OW 546
51073: ST_TO_ADDR
// if hex [ 1 ] then
51074: LD_VAR 0 4
51078: PUSH
51079: LD_INT 1
51081: ARRAY
51082: IFFALSE 51086
// continue ;
51084: GO 50974
// h := hex [ 2 ] ;
51086: LD_ADDR_VAR 0 13
51090: PUSH
51091: LD_VAR 0 4
51095: PUSH
51096: LD_INT 2
51098: ARRAY
51099: ST_TO_ADDR
// if h + 7 < height then
51100: LD_VAR 0 13
51104: PUSH
51105: LD_INT 7
51107: PLUS
51108: PUSH
51109: LD_VAR 0 15
51113: LESS
51114: IFFALSE 51143
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51116: LD_ADDR_VAR 0 18
51120: PUSH
51121: LD_INT 7
51123: PUSH
51124: LD_INT 28
51126: PUSH
51127: LD_INT 45
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: LIST
51134: PUSH
51135: LD_VAR 0 12
51139: ARRAY
51140: ST_TO_ADDR
// break ;
51141: GO 51145
// end ; end ; end ;
51143: GO 50974
51145: POP
51146: POP
// end ; if not weapon then
51147: LD_VAR 0 18
51151: NOT
51152: IFFALSE 51212
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51154: LD_ADDR_VAR 0 5
51158: PUSH
51159: LD_VAR 0 5
51163: PUSH
51164: LD_INT 11
51166: PUSH
51167: LD_INT 30
51169: PUSH
51170: LD_INT 49
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: DIFF
51178: ST_TO_ADDR
// if not list then
51179: LD_VAR 0 5
51183: NOT
51184: IFFALSE 51188
// exit ;
51186: GO 51334
// weapon := list [ rand ( 1 , list ) ] ;
51188: LD_ADDR_VAR 0 18
51192: PUSH
51193: LD_VAR 0 5
51197: PUSH
51198: LD_INT 1
51200: PPUSH
51201: LD_VAR 0 5
51205: PPUSH
51206: CALL_OW 12
51210: ARRAY
51211: ST_TO_ADDR
// end ; if weapon then
51212: LD_VAR 0 18
51216: IFFALSE 51334
// begin tmp := CostOfWeapon ( weapon ) ;
51218: LD_ADDR_VAR 0 14
51222: PUSH
51223: LD_VAR 0 18
51227: PPUSH
51228: CALL_OW 451
51232: ST_TO_ADDR
// j := GetBase ( tower ) ;
51233: LD_ADDR_VAR 0 9
51237: PUSH
51238: LD_VAR 0 1
51242: PPUSH
51243: CALL_OW 274
51247: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51248: LD_VAR 0 9
51252: PPUSH
51253: LD_INT 1
51255: PPUSH
51256: CALL_OW 275
51260: PUSH
51261: LD_VAR 0 14
51265: PUSH
51266: LD_INT 1
51268: ARRAY
51269: GREATEREQUAL
51270: IFFALSE 51296
51272: PUSH
51273: LD_VAR 0 9
51277: PPUSH
51278: LD_INT 2
51280: PPUSH
51281: CALL_OW 275
51285: PUSH
51286: LD_VAR 0 14
51290: PUSH
51291: LD_INT 2
51293: ARRAY
51294: GREATEREQUAL
51295: AND
51296: IFFALSE 51322
51298: PUSH
51299: LD_VAR 0 9
51303: PPUSH
51304: LD_INT 3
51306: PPUSH
51307: CALL_OW 275
51311: PUSH
51312: LD_VAR 0 14
51316: PUSH
51317: LD_INT 3
51319: ARRAY
51320: GREATEREQUAL
51321: AND
51322: IFFALSE 51334
// result := weapon ;
51324: LD_ADDR_VAR 0 3
51328: PUSH
51329: LD_VAR 0 18
51333: ST_TO_ADDR
// end ; end ;
51334: LD_VAR 0 3
51338: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51339: LD_INT 0
51341: PPUSH
51342: PPUSH
// result := true ;
51343: LD_ADDR_VAR 0 3
51347: PUSH
51348: LD_INT 1
51350: ST_TO_ADDR
// if array1 = array2 then
51351: LD_VAR 0 1
51355: PUSH
51356: LD_VAR 0 2
51360: EQUAL
51361: IFFALSE 51421
// begin for i = 1 to array1 do
51363: LD_ADDR_VAR 0 4
51367: PUSH
51368: DOUBLE
51369: LD_INT 1
51371: DEC
51372: ST_TO_ADDR
51373: LD_VAR 0 1
51377: PUSH
51378: FOR_TO
51379: IFFALSE 51417
// if array1 [ i ] <> array2 [ i ] then
51381: LD_VAR 0 1
51385: PUSH
51386: LD_VAR 0 4
51390: ARRAY
51391: PUSH
51392: LD_VAR 0 2
51396: PUSH
51397: LD_VAR 0 4
51401: ARRAY
51402: NONEQUAL
51403: IFFALSE 51415
// begin result := false ;
51405: LD_ADDR_VAR 0 3
51409: PUSH
51410: LD_INT 0
51412: ST_TO_ADDR
// break ;
51413: GO 51417
// end ;
51415: GO 51378
51417: POP
51418: POP
// end else
51419: GO 51429
// result := false ;
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_INT 0
51428: ST_TO_ADDR
// end ;
51429: LD_VAR 0 3
51433: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51434: LD_INT 0
51436: PPUSH
51437: PPUSH
// if not array1 or not array2 then
51438: LD_VAR 0 1
51442: NOT
51443: IFTRUE 51452
51445: PUSH
51446: LD_VAR 0 2
51450: NOT
51451: OR
51452: IFFALSE 51456
// exit ;
51454: GO 51520
// result := true ;
51456: LD_ADDR_VAR 0 3
51460: PUSH
51461: LD_INT 1
51463: ST_TO_ADDR
// for i = 1 to array1 do
51464: LD_ADDR_VAR 0 4
51468: PUSH
51469: DOUBLE
51470: LD_INT 1
51472: DEC
51473: ST_TO_ADDR
51474: LD_VAR 0 1
51478: PUSH
51479: FOR_TO
51480: IFFALSE 51518
// if array1 [ i ] <> array2 [ i ] then
51482: LD_VAR 0 1
51486: PUSH
51487: LD_VAR 0 4
51491: ARRAY
51492: PUSH
51493: LD_VAR 0 2
51497: PUSH
51498: LD_VAR 0 4
51502: ARRAY
51503: NONEQUAL
51504: IFFALSE 51516
// begin result := false ;
51506: LD_ADDR_VAR 0 3
51510: PUSH
51511: LD_INT 0
51513: ST_TO_ADDR
// break ;
51514: GO 51518
// end ;
51516: GO 51479
51518: POP
51519: POP
// end ;
51520: LD_VAR 0 3
51524: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51525: LD_INT 0
51527: PPUSH
51528: PPUSH
51529: PPUSH
// pom := GetBase ( fac ) ;
51530: LD_ADDR_VAR 0 5
51534: PUSH
51535: LD_VAR 0 1
51539: PPUSH
51540: CALL_OW 274
51544: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51545: LD_ADDR_VAR 0 4
51549: PUSH
51550: LD_VAR 0 2
51554: PUSH
51555: LD_INT 1
51557: ARRAY
51558: PPUSH
51559: LD_VAR 0 2
51563: PUSH
51564: LD_INT 2
51566: ARRAY
51567: PPUSH
51568: LD_VAR 0 2
51572: PUSH
51573: LD_INT 3
51575: ARRAY
51576: PPUSH
51577: LD_VAR 0 2
51581: PUSH
51582: LD_INT 4
51584: ARRAY
51585: PPUSH
51586: CALL_OW 449
51590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51591: LD_ADDR_VAR 0 3
51595: PUSH
51596: LD_VAR 0 5
51600: PPUSH
51601: LD_INT 1
51603: PPUSH
51604: CALL_OW 275
51608: PUSH
51609: LD_VAR 0 4
51613: PUSH
51614: LD_INT 1
51616: ARRAY
51617: GREATEREQUAL
51618: IFFALSE 51644
51620: PUSH
51621: LD_VAR 0 5
51625: PPUSH
51626: LD_INT 2
51628: PPUSH
51629: CALL_OW 275
51633: PUSH
51634: LD_VAR 0 4
51638: PUSH
51639: LD_INT 2
51641: ARRAY
51642: GREATEREQUAL
51643: AND
51644: IFFALSE 51670
51646: PUSH
51647: LD_VAR 0 5
51651: PPUSH
51652: LD_INT 3
51654: PPUSH
51655: CALL_OW 275
51659: PUSH
51660: LD_VAR 0 4
51664: PUSH
51665: LD_INT 3
51667: ARRAY
51668: GREATEREQUAL
51669: AND
51670: ST_TO_ADDR
// end ;
51671: LD_VAR 0 3
51675: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51676: LD_INT 0
51678: PPUSH
51679: PPUSH
51680: PPUSH
51681: PPUSH
// pom := GetBase ( building ) ;
51682: LD_ADDR_VAR 0 3
51686: PUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 274
51696: ST_TO_ADDR
// if not pom then
51697: LD_VAR 0 3
51701: NOT
51702: IFFALSE 51706
// exit ;
51704: GO 51880
// btype := GetBType ( building ) ;
51706: LD_ADDR_VAR 0 5
51710: PUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL_OW 266
51720: ST_TO_ADDR
// if btype = b_armoury then
51721: LD_VAR 0 5
51725: PUSH
51726: LD_INT 4
51728: EQUAL
51729: IFFALSE 51739
// btype := b_barracks ;
51731: LD_ADDR_VAR 0 5
51735: PUSH
51736: LD_INT 5
51738: ST_TO_ADDR
// if btype = b_depot then
51739: LD_VAR 0 5
51743: PUSH
51744: LD_INT 0
51746: EQUAL
51747: IFFALSE 51757
// btype := b_warehouse ;
51749: LD_ADDR_VAR 0 5
51753: PUSH
51754: LD_INT 1
51756: ST_TO_ADDR
// if btype = b_workshop then
51757: LD_VAR 0 5
51761: PUSH
51762: LD_INT 2
51764: EQUAL
51765: IFFALSE 51775
// btype := b_factory ;
51767: LD_ADDR_VAR 0 5
51771: PUSH
51772: LD_INT 3
51774: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51775: LD_ADDR_VAR 0 4
51779: PUSH
51780: LD_VAR 0 5
51784: PPUSH
51785: LD_VAR 0 1
51789: PPUSH
51790: CALL_OW 248
51794: PPUSH
51795: CALL_OW 450
51799: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51800: LD_ADDR_VAR 0 2
51804: PUSH
51805: LD_VAR 0 3
51809: PPUSH
51810: LD_INT 1
51812: PPUSH
51813: CALL_OW 275
51817: PUSH
51818: LD_VAR 0 4
51822: PUSH
51823: LD_INT 1
51825: ARRAY
51826: GREATEREQUAL
51827: IFFALSE 51853
51829: PUSH
51830: LD_VAR 0 3
51834: PPUSH
51835: LD_INT 2
51837: PPUSH
51838: CALL_OW 275
51842: PUSH
51843: LD_VAR 0 4
51847: PUSH
51848: LD_INT 2
51850: ARRAY
51851: GREATEREQUAL
51852: AND
51853: IFFALSE 51879
51855: PUSH
51856: LD_VAR 0 3
51860: PPUSH
51861: LD_INT 3
51863: PPUSH
51864: CALL_OW 275
51868: PUSH
51869: LD_VAR 0 4
51873: PUSH
51874: LD_INT 3
51876: ARRAY
51877: GREATEREQUAL
51878: AND
51879: ST_TO_ADDR
// end ;
51880: LD_VAR 0 2
51884: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51885: LD_INT 0
51887: PPUSH
51888: PPUSH
51889: PPUSH
// pom := GetBase ( building ) ;
51890: LD_ADDR_VAR 0 4
51894: PUSH
51895: LD_VAR 0 1
51899: PPUSH
51900: CALL_OW 274
51904: ST_TO_ADDR
// if not pom then
51905: LD_VAR 0 4
51909: NOT
51910: IFFALSE 51914
// exit ;
51912: GO 52019
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51914: LD_ADDR_VAR 0 5
51918: PUSH
51919: LD_VAR 0 2
51923: PPUSH
51924: LD_VAR 0 1
51928: PPUSH
51929: CALL_OW 248
51933: PPUSH
51934: CALL_OW 450
51938: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51939: LD_ADDR_VAR 0 3
51943: PUSH
51944: LD_VAR 0 4
51948: PPUSH
51949: LD_INT 1
51951: PPUSH
51952: CALL_OW 275
51956: PUSH
51957: LD_VAR 0 5
51961: PUSH
51962: LD_INT 1
51964: ARRAY
51965: GREATEREQUAL
51966: IFFALSE 51992
51968: PUSH
51969: LD_VAR 0 4
51973: PPUSH
51974: LD_INT 2
51976: PPUSH
51977: CALL_OW 275
51981: PUSH
51982: LD_VAR 0 5
51986: PUSH
51987: LD_INT 2
51989: ARRAY
51990: GREATEREQUAL
51991: AND
51992: IFFALSE 52018
51994: PUSH
51995: LD_VAR 0 4
51999: PPUSH
52000: LD_INT 3
52002: PPUSH
52003: CALL_OW 275
52007: PUSH
52008: LD_VAR 0 5
52012: PUSH
52013: LD_INT 3
52015: ARRAY
52016: GREATEREQUAL
52017: AND
52018: ST_TO_ADDR
// end ;
52019: LD_VAR 0 3
52023: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52024: LD_INT 0
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
// result := false ;
52037: LD_ADDR_VAR 0 8
52041: PUSH
52042: LD_INT 0
52044: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52045: LD_VAR 0 5
52049: NOT
52050: IFTRUE 52059
52052: PUSH
52053: LD_VAR 0 1
52057: NOT
52058: OR
52059: IFTRUE 52068
52061: PUSH
52062: LD_VAR 0 2
52066: NOT
52067: OR
52068: IFTRUE 52077
52070: PUSH
52071: LD_VAR 0 3
52075: NOT
52076: OR
52077: IFFALSE 52081
// exit ;
52079: GO 52907
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52081: LD_ADDR_VAR 0 14
52085: PUSH
52086: LD_VAR 0 1
52090: PPUSH
52091: LD_VAR 0 2
52095: PPUSH
52096: LD_VAR 0 3
52100: PPUSH
52101: LD_VAR 0 4
52105: PPUSH
52106: LD_VAR 0 5
52110: PUSH
52111: LD_INT 1
52113: ARRAY
52114: PPUSH
52115: CALL_OW 248
52119: PPUSH
52120: LD_INT 0
52122: PPUSH
52123: CALL 54188 0 6
52127: ST_TO_ADDR
// if not hexes then
52128: LD_VAR 0 14
52132: NOT
52133: IFFALSE 52137
// exit ;
52135: GO 52907
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52137: LD_ADDR_VAR 0 17
52141: PUSH
52142: LD_VAR 0 5
52146: PPUSH
52147: LD_INT 22
52149: PUSH
52150: LD_VAR 0 13
52154: PPUSH
52155: CALL_OW 255
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: LD_INT 30
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 30
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PPUSH
52196: CALL_OW 72
52200: ST_TO_ADDR
// for i = 1 to hexes do
52201: LD_ADDR_VAR 0 9
52205: PUSH
52206: DOUBLE
52207: LD_INT 1
52209: DEC
52210: ST_TO_ADDR
52211: LD_VAR 0 14
52215: PUSH
52216: FOR_TO
52217: IFFALSE 52905
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52219: LD_ADDR_VAR 0 13
52223: PUSH
52224: LD_VAR 0 14
52228: PUSH
52229: LD_VAR 0 9
52233: ARRAY
52234: PUSH
52235: LD_INT 1
52237: ARRAY
52238: PPUSH
52239: LD_VAR 0 14
52243: PUSH
52244: LD_VAR 0 9
52248: ARRAY
52249: PUSH
52250: LD_INT 2
52252: ARRAY
52253: PPUSH
52254: CALL_OW 428
52258: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52259: LD_VAR 0 14
52263: PUSH
52264: LD_VAR 0 9
52268: ARRAY
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: PPUSH
52274: LD_VAR 0 14
52278: PUSH
52279: LD_VAR 0 9
52283: ARRAY
52284: PUSH
52285: LD_INT 2
52287: ARRAY
52288: PPUSH
52289: CALL_OW 351
52293: IFTRUE 52332
52295: PUSH
52296: LD_VAR 0 14
52300: PUSH
52301: LD_VAR 0 9
52305: ARRAY
52306: PUSH
52307: LD_INT 1
52309: ARRAY
52310: PPUSH
52311: LD_VAR 0 14
52315: PUSH
52316: LD_VAR 0 9
52320: ARRAY
52321: PUSH
52322: LD_INT 2
52324: ARRAY
52325: PPUSH
52326: CALL_OW 488
52330: NOT
52331: OR
52332: IFTRUE 52349
52334: PUSH
52335: LD_VAR 0 13
52339: PPUSH
52340: CALL_OW 247
52344: PUSH
52345: LD_INT 3
52347: EQUAL
52348: OR
52349: IFFALSE 52355
// exit ;
52351: POP
52352: POP
52353: GO 52907
// if not tmp then
52355: LD_VAR 0 13
52359: NOT
52360: IFFALSE 52364
// continue ;
52362: GO 52216
// result := true ;
52364: LD_ADDR_VAR 0 8
52368: PUSH
52369: LD_INT 1
52371: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52372: LD_VAR 0 6
52376: IFFALSE 52393
52378: PUSH
52379: LD_VAR 0 13
52383: PPUSH
52384: CALL_OW 247
52388: PUSH
52389: LD_INT 2
52391: EQUAL
52392: AND
52393: IFFALSE 52410
52395: PUSH
52396: LD_VAR 0 13
52400: PPUSH
52401: CALL_OW 263
52405: PUSH
52406: LD_INT 1
52408: EQUAL
52409: AND
52410: IFFALSE 52574
// begin if IsDrivenBy ( tmp ) then
52412: LD_VAR 0 13
52416: PPUSH
52417: CALL_OW 311
52421: IFFALSE 52425
// continue ;
52423: GO 52216
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52425: LD_VAR 0 6
52429: PPUSH
52430: LD_INT 3
52432: PUSH
52433: LD_INT 60
52435: PUSH
52436: EMPTY
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 3
52445: PUSH
52446: LD_INT 55
52448: PUSH
52449: EMPTY
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PPUSH
52460: CALL_OW 72
52464: IFFALSE 52572
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52466: LD_ADDR_VAR 0 18
52470: PUSH
52471: LD_VAR 0 6
52475: PPUSH
52476: LD_INT 3
52478: PUSH
52479: LD_INT 60
52481: PUSH
52482: EMPTY
52483: LIST
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: LD_INT 55
52494: PUSH
52495: EMPTY
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PPUSH
52506: CALL_OW 72
52510: PUSH
52511: LD_INT 1
52513: ARRAY
52514: ST_TO_ADDR
// if IsInUnit ( driver ) then
52515: LD_VAR 0 18
52519: PPUSH
52520: CALL_OW 310
52524: IFFALSE 52535
// ComExit ( driver ) ;
52526: LD_VAR 0 18
52530: PPUSH
52531: CALL 78178 0 1
// AddComEnterUnit ( driver , tmp ) ;
52535: LD_VAR 0 18
52539: PPUSH
52540: LD_VAR 0 13
52544: PPUSH
52545: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52549: LD_VAR 0 18
52553: PPUSH
52554: LD_VAR 0 7
52558: PPUSH
52559: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52563: LD_VAR 0 18
52567: PPUSH
52568: CALL_OW 181
// end ; continue ;
52572: GO 52216
// end ; if not cleaners or not tmp in cleaners then
52574: LD_VAR 0 6
52578: NOT
52579: IFTRUE 52594
52581: PUSH
52582: LD_VAR 0 13
52586: PUSH
52587: LD_VAR 0 6
52591: IN
52592: NOT
52593: OR
52594: IFFALSE 52903
// begin if dep then
52596: LD_VAR 0 17
52600: IFFALSE 52736
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52602: LD_ADDR_VAR 0 16
52606: PUSH
52607: LD_VAR 0 17
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: PPUSH
52616: CALL_OW 250
52620: PPUSH
52621: LD_VAR 0 17
52625: PUSH
52626: LD_INT 1
52628: ARRAY
52629: PPUSH
52630: CALL_OW 254
52634: PPUSH
52635: LD_INT 5
52637: PPUSH
52638: CALL_OW 272
52642: PUSH
52643: LD_VAR 0 17
52647: PUSH
52648: LD_INT 1
52650: ARRAY
52651: PPUSH
52652: CALL_OW 251
52656: PPUSH
52657: LD_VAR 0 17
52661: PUSH
52662: LD_INT 1
52664: ARRAY
52665: PPUSH
52666: CALL_OW 254
52670: PPUSH
52671: LD_INT 5
52673: PPUSH
52674: CALL_OW 273
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52683: LD_VAR 0 16
52687: PUSH
52688: LD_INT 1
52690: ARRAY
52691: PPUSH
52692: LD_VAR 0 16
52696: PUSH
52697: LD_INT 2
52699: ARRAY
52700: PPUSH
52701: CALL_OW 488
52705: IFFALSE 52736
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52707: LD_VAR 0 13
52711: PPUSH
52712: LD_VAR 0 16
52716: PUSH
52717: LD_INT 1
52719: ARRAY
52720: PPUSH
52721: LD_VAR 0 16
52725: PUSH
52726: LD_INT 2
52728: ARRAY
52729: PPUSH
52730: CALL_OW 111
// continue ;
52734: GO 52216
// end ; end ; r := GetDir ( tmp ) ;
52736: LD_ADDR_VAR 0 15
52740: PUSH
52741: LD_VAR 0 13
52745: PPUSH
52746: CALL_OW 254
52750: ST_TO_ADDR
// if r = 5 then
52751: LD_VAR 0 15
52755: PUSH
52756: LD_INT 5
52758: EQUAL
52759: IFFALSE 52769
// r := 0 ;
52761: LD_ADDR_VAR 0 15
52765: PUSH
52766: LD_INT 0
52768: ST_TO_ADDR
// for j = r to 5 do
52769: LD_ADDR_VAR 0 10
52773: PUSH
52774: DOUBLE
52775: LD_VAR 0 15
52779: DEC
52780: ST_TO_ADDR
52781: LD_INT 5
52783: PUSH
52784: FOR_TO
52785: IFFALSE 52901
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52787: LD_ADDR_VAR 0 11
52791: PUSH
52792: LD_VAR 0 13
52796: PPUSH
52797: CALL_OW 250
52801: PPUSH
52802: LD_VAR 0 10
52806: PPUSH
52807: LD_INT 2
52809: PPUSH
52810: CALL_OW 272
52814: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52815: LD_ADDR_VAR 0 12
52819: PUSH
52820: LD_VAR 0 13
52824: PPUSH
52825: CALL_OW 251
52829: PPUSH
52830: LD_VAR 0 10
52834: PPUSH
52835: LD_INT 2
52837: PPUSH
52838: CALL_OW 273
52842: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52843: LD_VAR 0 11
52847: PPUSH
52848: LD_VAR 0 12
52852: PPUSH
52853: CALL_OW 488
52857: IFFALSE 52876
52859: PUSH
52860: LD_VAR 0 11
52864: PPUSH
52865: LD_VAR 0 12
52869: PPUSH
52870: CALL_OW 428
52874: NOT
52875: AND
52876: IFFALSE 52899
// begin ComMoveXY ( tmp , _x , _y ) ;
52878: LD_VAR 0 13
52882: PPUSH
52883: LD_VAR 0 11
52887: PPUSH
52888: LD_VAR 0 12
52892: PPUSH
52893: CALL_OW 111
// break ;
52897: GO 52901
// end ; end ;
52899: GO 52784
52901: POP
52902: POP
// end ; end ;
52903: GO 52216
52905: POP
52906: POP
// end ;
52907: LD_VAR 0 8
52911: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52912: LD_INT 0
52914: PPUSH
// result := true ;
52915: LD_ADDR_VAR 0 3
52919: PUSH
52920: LD_INT 1
52922: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52923: LD_VAR 0 2
52927: PUSH
52928: LD_INT 24
52930: DOUBLE
52931: EQUAL
52932: IFTRUE 52942
52934: LD_INT 33
52936: DOUBLE
52937: EQUAL
52938: IFTRUE 52942
52940: GO 52967
52942: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52943: LD_ADDR_VAR 0 3
52947: PUSH
52948: LD_INT 32
52950: PPUSH
52951: LD_VAR 0 1
52955: PPUSH
52956: CALL_OW 321
52960: PUSH
52961: LD_INT 2
52963: EQUAL
52964: ST_TO_ADDR
52965: GO 53283
52967: LD_INT 20
52969: DOUBLE
52970: EQUAL
52971: IFTRUE 52975
52973: GO 53000
52975: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52976: LD_ADDR_VAR 0 3
52980: PUSH
52981: LD_INT 6
52983: PPUSH
52984: LD_VAR 0 1
52988: PPUSH
52989: CALL_OW 321
52993: PUSH
52994: LD_INT 2
52996: EQUAL
52997: ST_TO_ADDR
52998: GO 53283
53000: LD_INT 22
53002: DOUBLE
53003: EQUAL
53004: IFTRUE 53014
53006: LD_INT 36
53008: DOUBLE
53009: EQUAL
53010: IFTRUE 53014
53012: GO 53039
53014: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_INT 15
53022: PPUSH
53023: LD_VAR 0 1
53027: PPUSH
53028: CALL_OW 321
53032: PUSH
53033: LD_INT 2
53035: EQUAL
53036: ST_TO_ADDR
53037: GO 53283
53039: LD_INT 30
53041: DOUBLE
53042: EQUAL
53043: IFTRUE 53047
53045: GO 53072
53047: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53048: LD_ADDR_VAR 0 3
53052: PUSH
53053: LD_INT 20
53055: PPUSH
53056: LD_VAR 0 1
53060: PPUSH
53061: CALL_OW 321
53065: PUSH
53066: LD_INT 2
53068: EQUAL
53069: ST_TO_ADDR
53070: GO 53283
53072: LD_INT 28
53074: DOUBLE
53075: EQUAL
53076: IFTRUE 53086
53078: LD_INT 21
53080: DOUBLE
53081: EQUAL
53082: IFTRUE 53086
53084: GO 53111
53086: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53087: LD_ADDR_VAR 0 3
53091: PUSH
53092: LD_INT 21
53094: PPUSH
53095: LD_VAR 0 1
53099: PPUSH
53100: CALL_OW 321
53104: PUSH
53105: LD_INT 2
53107: EQUAL
53108: ST_TO_ADDR
53109: GO 53283
53111: LD_INT 16
53113: DOUBLE
53114: EQUAL
53115: IFTRUE 53119
53117: GO 53144
53119: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53120: LD_ADDR_VAR 0 3
53124: PUSH
53125: LD_INT 84
53127: PPUSH
53128: LD_VAR 0 1
53132: PPUSH
53133: CALL_OW 321
53137: PUSH
53138: LD_INT 2
53140: EQUAL
53141: ST_TO_ADDR
53142: GO 53283
53144: LD_INT 19
53146: DOUBLE
53147: EQUAL
53148: IFTRUE 53158
53150: LD_INT 23
53152: DOUBLE
53153: EQUAL
53154: IFTRUE 53158
53156: GO 53183
53158: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53159: LD_ADDR_VAR 0 3
53163: PUSH
53164: LD_INT 83
53166: PPUSH
53167: LD_VAR 0 1
53171: PPUSH
53172: CALL_OW 321
53176: PUSH
53177: LD_INT 2
53179: EQUAL
53180: ST_TO_ADDR
53181: GO 53283
53183: LD_INT 17
53185: DOUBLE
53186: EQUAL
53187: IFTRUE 53191
53189: GO 53216
53191: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53192: LD_ADDR_VAR 0 3
53196: PUSH
53197: LD_INT 39
53199: PPUSH
53200: LD_VAR 0 1
53204: PPUSH
53205: CALL_OW 321
53209: PUSH
53210: LD_INT 2
53212: EQUAL
53213: ST_TO_ADDR
53214: GO 53283
53216: LD_INT 18
53218: DOUBLE
53219: EQUAL
53220: IFTRUE 53224
53222: GO 53249
53224: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53225: LD_ADDR_VAR 0 3
53229: PUSH
53230: LD_INT 40
53232: PPUSH
53233: LD_VAR 0 1
53237: PPUSH
53238: CALL_OW 321
53242: PUSH
53243: LD_INT 2
53245: EQUAL
53246: ST_TO_ADDR
53247: GO 53283
53249: LD_INT 27
53251: DOUBLE
53252: EQUAL
53253: IFTRUE 53257
53255: GO 53282
53257: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53258: LD_ADDR_VAR 0 3
53262: PUSH
53263: LD_INT 35
53265: PPUSH
53266: LD_VAR 0 1
53270: PPUSH
53271: CALL_OW 321
53275: PUSH
53276: LD_INT 2
53278: EQUAL
53279: ST_TO_ADDR
53280: GO 53283
53282: POP
// end ;
53283: LD_VAR 0 3
53287: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53288: LD_INT 0
53290: PPUSH
53291: PPUSH
53292: PPUSH
53293: PPUSH
53294: PPUSH
53295: PPUSH
53296: PPUSH
53297: PPUSH
53298: PPUSH
53299: PPUSH
53300: PPUSH
// result := false ;
53301: LD_ADDR_VAR 0 6
53305: PUSH
53306: LD_INT 0
53308: ST_TO_ADDR
// if btype = b_depot then
53309: LD_VAR 0 2
53313: PUSH
53314: LD_INT 0
53316: EQUAL
53317: IFFALSE 53329
// begin result := true ;
53319: LD_ADDR_VAR 0 6
53323: PUSH
53324: LD_INT 1
53326: ST_TO_ADDR
// exit ;
53327: GO 54183
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53329: LD_VAR 0 1
53333: NOT
53334: IFTRUE 53359
53336: PUSH
53337: LD_VAR 0 1
53341: PPUSH
53342: CALL_OW 266
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: IN
53357: NOT
53358: OR
53359: IFTRUE 53368
53361: PUSH
53362: LD_VAR 0 2
53366: NOT
53367: OR
53368: IFTRUE 53404
53370: PUSH
53371: LD_VAR 0 5
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: LD_INT 4
53390: PUSH
53391: LD_INT 5
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: IN
53402: NOT
53403: OR
53404: IFTRUE 53423
53406: PUSH
53407: LD_VAR 0 3
53411: PPUSH
53412: LD_VAR 0 4
53416: PPUSH
53417: CALL_OW 488
53421: NOT
53422: OR
53423: IFFALSE 53427
// exit ;
53425: GO 54183
// side := GetSide ( depot ) ;
53427: LD_ADDR_VAR 0 9
53431: PUSH
53432: LD_VAR 0 1
53436: PPUSH
53437: CALL_OW 255
53441: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53442: LD_VAR 0 9
53446: PPUSH
53447: LD_VAR 0 2
53451: PPUSH
53452: CALL 52912 0 2
53456: NOT
53457: IFFALSE 53461
// exit ;
53459: GO 54183
// pom := GetBase ( depot ) ;
53461: LD_ADDR_VAR 0 10
53465: PUSH
53466: LD_VAR 0 1
53470: PPUSH
53471: CALL_OW 274
53475: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53476: LD_ADDR_VAR 0 11
53480: PUSH
53481: LD_VAR 0 2
53485: PPUSH
53486: LD_VAR 0 1
53490: PPUSH
53491: CALL_OW 248
53495: PPUSH
53496: CALL_OW 450
53500: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53501: LD_VAR 0 10
53505: PPUSH
53506: LD_INT 1
53508: PPUSH
53509: CALL_OW 275
53513: PUSH
53514: LD_VAR 0 11
53518: PUSH
53519: LD_INT 1
53521: ARRAY
53522: GREATEREQUAL
53523: IFFALSE 53549
53525: PUSH
53526: LD_VAR 0 10
53530: PPUSH
53531: LD_INT 2
53533: PPUSH
53534: CALL_OW 275
53538: PUSH
53539: LD_VAR 0 11
53543: PUSH
53544: LD_INT 2
53546: ARRAY
53547: GREATEREQUAL
53548: AND
53549: IFFALSE 53575
53551: PUSH
53552: LD_VAR 0 10
53556: PPUSH
53557: LD_INT 3
53559: PPUSH
53560: CALL_OW 275
53564: PUSH
53565: LD_VAR 0 11
53569: PUSH
53570: LD_INT 3
53572: ARRAY
53573: GREATEREQUAL
53574: AND
53575: NOT
53576: IFFALSE 53580
// exit ;
53578: GO 54183
// if GetBType ( depot ) = b_depot then
53580: LD_VAR 0 1
53584: PPUSH
53585: CALL_OW 266
53589: PUSH
53590: LD_INT 0
53592: EQUAL
53593: IFFALSE 53605
// dist := 28 else
53595: LD_ADDR_VAR 0 14
53599: PUSH
53600: LD_INT 28
53602: ST_TO_ADDR
53603: GO 53613
// dist := 36 ;
53605: LD_ADDR_VAR 0 14
53609: PUSH
53610: LD_INT 36
53612: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53613: LD_VAR 0 1
53617: PPUSH
53618: LD_VAR 0 3
53622: PPUSH
53623: LD_VAR 0 4
53627: PPUSH
53628: CALL_OW 297
53632: PUSH
53633: LD_VAR 0 14
53637: GREATER
53638: IFFALSE 53642
// exit ;
53640: GO 54183
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53642: LD_ADDR_VAR 0 12
53646: PUSH
53647: LD_VAR 0 2
53651: PPUSH
53652: LD_VAR 0 3
53656: PPUSH
53657: LD_VAR 0 4
53661: PPUSH
53662: LD_VAR 0 5
53666: PPUSH
53667: LD_VAR 0 1
53671: PPUSH
53672: CALL_OW 248
53676: PPUSH
53677: LD_INT 0
53679: PPUSH
53680: CALL 54188 0 6
53684: ST_TO_ADDR
// if not hexes then
53685: LD_VAR 0 12
53689: NOT
53690: IFFALSE 53694
// exit ;
53692: GO 54183
// hex := GetHexInfo ( x , y ) ;
53694: LD_ADDR_VAR 0 15
53698: PUSH
53699: LD_VAR 0 3
53703: PPUSH
53704: LD_VAR 0 4
53708: PPUSH
53709: CALL_OW 546
53713: ST_TO_ADDR
// if hex [ 1 ] then
53714: LD_VAR 0 15
53718: PUSH
53719: LD_INT 1
53721: ARRAY
53722: IFFALSE 53726
// exit ;
53724: GO 54183
// height := hex [ 2 ] ;
53726: LD_ADDR_VAR 0 13
53730: PUSH
53731: LD_VAR 0 15
53735: PUSH
53736: LD_INT 2
53738: ARRAY
53739: ST_TO_ADDR
// for i = 1 to hexes do
53740: LD_ADDR_VAR 0 7
53744: PUSH
53745: DOUBLE
53746: LD_INT 1
53748: DEC
53749: ST_TO_ADDR
53750: LD_VAR 0 12
53754: PUSH
53755: FOR_TO
53756: IFFALSE 54100
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53758: LD_VAR 0 12
53762: PUSH
53763: LD_VAR 0 7
53767: ARRAY
53768: PUSH
53769: LD_INT 1
53771: ARRAY
53772: PPUSH
53773: LD_VAR 0 12
53777: PUSH
53778: LD_VAR 0 7
53782: ARRAY
53783: PUSH
53784: LD_INT 2
53786: ARRAY
53787: PPUSH
53788: CALL_OW 488
53792: NOT
53793: IFTRUE 53835
53795: PUSH
53796: LD_VAR 0 12
53800: PUSH
53801: LD_VAR 0 7
53805: ARRAY
53806: PUSH
53807: LD_INT 1
53809: ARRAY
53810: PPUSH
53811: LD_VAR 0 12
53815: PUSH
53816: LD_VAR 0 7
53820: ARRAY
53821: PUSH
53822: LD_INT 2
53824: ARRAY
53825: PPUSH
53826: CALL_OW 428
53830: PUSH
53831: LD_INT 0
53833: GREATER
53834: OR
53835: IFTRUE 53873
53837: PUSH
53838: LD_VAR 0 12
53842: PUSH
53843: LD_VAR 0 7
53847: ARRAY
53848: PUSH
53849: LD_INT 1
53851: ARRAY
53852: PPUSH
53853: LD_VAR 0 12
53857: PUSH
53858: LD_VAR 0 7
53862: ARRAY
53863: PUSH
53864: LD_INT 2
53866: ARRAY
53867: PPUSH
53868: CALL_OW 351
53872: OR
53873: IFFALSE 53879
// exit ;
53875: POP
53876: POP
53877: GO 54183
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53879: LD_ADDR_VAR 0 8
53883: PUSH
53884: LD_VAR 0 12
53888: PUSH
53889: LD_VAR 0 7
53893: ARRAY
53894: PUSH
53895: LD_INT 1
53897: ARRAY
53898: PPUSH
53899: LD_VAR 0 12
53903: PUSH
53904: LD_VAR 0 7
53908: ARRAY
53909: PUSH
53910: LD_INT 2
53912: ARRAY
53913: PPUSH
53914: CALL_OW 546
53918: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53919: LD_VAR 0 8
53923: PUSH
53924: LD_INT 1
53926: ARRAY
53927: IFTRUE 53949
53929: PUSH
53930: LD_VAR 0 8
53934: PUSH
53935: LD_INT 2
53937: ARRAY
53938: PUSH
53939: LD_VAR 0 13
53943: PUSH
53944: LD_INT 2
53946: PLUS
53947: GREATER
53948: OR
53949: IFTRUE 53971
53951: PUSH
53952: LD_VAR 0 8
53956: PUSH
53957: LD_INT 2
53959: ARRAY
53960: PUSH
53961: LD_VAR 0 13
53965: PUSH
53966: LD_INT 2
53968: MINUS
53969: LESS
53970: OR
53971: IFTRUE 54039
53973: PUSH
53974: LD_VAR 0 8
53978: PUSH
53979: LD_INT 3
53981: ARRAY
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 8
53988: PUSH
53989: LD_INT 9
53991: PUSH
53992: LD_INT 10
53994: PUSH
53995: LD_INT 11
53997: PUSH
53998: LD_INT 12
54000: PUSH
54001: LD_INT 13
54003: PUSH
54004: LD_INT 16
54006: PUSH
54007: LD_INT 17
54009: PUSH
54010: LD_INT 18
54012: PUSH
54013: LD_INT 19
54015: PUSH
54016: LD_INT 20
54018: PUSH
54019: LD_INT 21
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: IN
54037: NOT
54038: OR
54039: IFTRUE 54052
54041: PUSH
54042: LD_VAR 0 8
54046: PUSH
54047: LD_INT 5
54049: ARRAY
54050: NOT
54051: OR
54052: IFTRUE 54092
54054: PUSH
54055: LD_VAR 0 8
54059: PUSH
54060: LD_INT 6
54062: ARRAY
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: LD_INT 7
54072: PUSH
54073: LD_INT 9
54075: PUSH
54076: LD_INT 10
54078: PUSH
54079: LD_INT 11
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: IN
54090: NOT
54091: OR
54092: IFFALSE 54098
// exit ;
54094: POP
54095: POP
54096: GO 54183
// end ;
54098: GO 53755
54100: POP
54101: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54102: LD_VAR 0 9
54106: PPUSH
54107: LD_VAR 0 3
54111: PPUSH
54112: LD_VAR 0 4
54116: PPUSH
54117: LD_INT 20
54119: PPUSH
54120: CALL 46002 0 4
54124: PUSH
54125: LD_INT 4
54127: ARRAY
54128: IFFALSE 54132
// exit ;
54130: GO 54183
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54132: LD_VAR 0 2
54136: PUSH
54137: LD_INT 29
54139: PUSH
54140: LD_INT 30
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: IN
54147: IFFALSE 54171
54149: PUSH
54150: LD_VAR 0 3
54154: PPUSH
54155: LD_VAR 0 4
54159: PPUSH
54160: LD_VAR 0 9
54164: PPUSH
54165: CALL_OW 440
54169: NOT
54170: AND
54171: IFFALSE 54175
// exit ;
54173: GO 54183
// result := true ;
54175: LD_ADDR_VAR 0 6
54179: PUSH
54180: LD_INT 1
54182: ST_TO_ADDR
// end ;
54183: LD_VAR 0 6
54187: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54188: LD_INT 0
54190: PPUSH
54191: PPUSH
54192: PPUSH
54193: PPUSH
54194: PPUSH
54195: PPUSH
54196: PPUSH
54197: PPUSH
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
54205: PPUSH
54206: PPUSH
54207: PPUSH
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
54221: PPUSH
54222: PPUSH
54223: PPUSH
54224: PPUSH
54225: PPUSH
54226: PPUSH
54227: PPUSH
54228: PPUSH
54229: PPUSH
54230: PPUSH
54231: PPUSH
54232: PPUSH
54233: PPUSH
54234: PPUSH
54235: PPUSH
54236: PPUSH
54237: PPUSH
54238: PPUSH
54239: PPUSH
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
54244: PPUSH
54245: PPUSH
54246: PPUSH
54247: PPUSH
// result = [ ] ;
54248: LD_ADDR_VAR 0 7
54252: PUSH
54253: EMPTY
54254: ST_TO_ADDR
// temp_list = [ ] ;
54255: LD_ADDR_VAR 0 9
54259: PUSH
54260: EMPTY
54261: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54262: LD_VAR 0 4
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: LD_INT 3
54278: PUSH
54279: LD_INT 4
54281: PUSH
54282: LD_INT 5
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: IN
54293: NOT
54294: IFTRUE 54337
54296: PUSH
54297: LD_VAR 0 1
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: IN
54312: IFFALSE 54336
54314: PUSH
54315: LD_VAR 0 5
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: IN
54334: NOT
54335: AND
54336: OR
54337: IFFALSE 54341
// exit ;
54339: GO 72740
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54341: LD_VAR 0 1
54345: PUSH
54346: LD_INT 6
54348: PUSH
54349: LD_INT 7
54351: PUSH
54352: LD_INT 8
54354: PUSH
54355: LD_INT 13
54357: PUSH
54358: LD_INT 12
54360: PUSH
54361: LD_INT 15
54363: PUSH
54364: LD_INT 11
54366: PUSH
54367: LD_INT 14
54369: PUSH
54370: LD_INT 10
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: IN
54384: IFFALSE 54394
// btype = b_lab ;
54386: LD_ADDR_VAR 0 1
54390: PUSH
54391: LD_INT 6
54393: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54394: LD_VAR 0 6
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: IN
54413: NOT
54414: IFTRUE 54482
54416: PUSH
54417: LD_VAR 0 1
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: LD_INT 6
54436: PUSH
54437: LD_INT 36
54439: PUSH
54440: LD_INT 4
54442: PUSH
54443: LD_INT 5
54445: PUSH
54446: LD_INT 31
54448: PUSH
54449: LD_INT 32
54451: PUSH
54452: LD_INT 33
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: IN
54468: NOT
54469: IFFALSE 54481
54471: PUSH
54472: LD_VAR 0 6
54476: PUSH
54477: LD_INT 1
54479: EQUAL
54480: AND
54481: OR
54482: IFTRUE 54514
54484: PUSH
54485: LD_VAR 0 1
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: IN
54500: NOT
54501: IFFALSE 54513
54503: PUSH
54504: LD_VAR 0 6
54508: PUSH
54509: LD_INT 2
54511: EQUAL
54512: AND
54513: OR
54514: IFFALSE 54524
// mode = 0 ;
54516: LD_ADDR_VAR 0 6
54520: PUSH
54521: LD_INT 0
54523: ST_TO_ADDR
// case mode of 0 :
54524: LD_VAR 0 6
54528: PUSH
54529: LD_INT 0
54531: DOUBLE
54532: EQUAL
54533: IFTRUE 54537
54535: GO 65990
54537: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54538: LD_ADDR_VAR 0 11
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 2
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 3
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54731: LD_ADDR_VAR 0 12
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 3
54888: NEG
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54927: LD_ADDR_VAR 0 13
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55126: LD_ADDR_VAR 0 14
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 3
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55322: LD_ADDR_VAR 0 15
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 3
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 3
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55515: LD_ADDR_VAR 0 16
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55708: LD_ADDR_VAR 0 17
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55938: LD_ADDR_VAR 0 18
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56168: LD_ADDR_VAR 0 19
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 2
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56398: LD_ADDR_VAR 0 20
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 2
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: LD_INT 2
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56628: LD_ADDR_VAR 0 21
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56858: LD_ADDR_VAR 0 22
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 0
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 2
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57088: LD_ADDR_VAR 0 23
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: NEG
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: LD_INT 3
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57368: LD_ADDR_VAR 0 24
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 1
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 2
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 3
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57644: LD_ADDR_VAR 0 25
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57918: LD_ADDR_VAR 0 26
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 3
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58194: LD_ADDR_VAR 0 27
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: NEG
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 2
58381: NEG
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 2
58397: NEG
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 3
58427: NEG
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58474: LD_ADDR_VAR 0 28
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: LD_INT 3
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58756: LD_ADDR_VAR 0 29
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 3
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: LD_INT 3
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59035: LD_ADDR_VAR 0 30
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: LD_INT 2
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: LD_INT 3
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59313: LD_ADDR_VAR 0 31
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: LD_INT 2
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: LD_INT 3
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59591: LD_ADDR_VAR 0 32
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: LD_INT 1
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59869: LD_ADDR_VAR 0 33
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: LD_INT 1
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 3
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 3
60113: NEG
60114: PUSH
60115: LD_INT 2
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60148: LD_ADDR_VAR 0 34
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 0
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 2
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 2
60382: NEG
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60428: LD_ADDR_VAR 0 35
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: LD_INT 1
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 1
60486: NEG
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60540: LD_ADDR_VAR 0 36
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60652: LD_ADDR_VAR 0 37
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60764: LD_ADDR_VAR 0 38
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60876: LD_ADDR_VAR 0 39
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60988: LD_ADDR_VAR 0 40
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61100: LD_ADDR_VAR 0 41
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: NEG
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: NEG
61279: PUSH
61280: LD_INT 2
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: LD_INT 3
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: NEG
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: NEG
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 3
61397: NEG
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 3
61409: NEG
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61450: LD_ADDR_VAR 0 42
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: LD_INT 1
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 1
61508: NEG
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 1
61519: NEG
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 2
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 2
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: LD_INT 2
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: LD_INT 3
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: LD_INT 3
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 3
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 3
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: LD_INT 3
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: LD_INT 2
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 3
61747: NEG
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: LD_INT 3
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61800: LD_ADDR_VAR 0 43
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: NEG
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 2
61966: NEG
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 3
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 3
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 3
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: LD_INT 2
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 2
62085: NEG
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 3
62096: NEG
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 3
62107: NEG
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62148: LD_ADDR_VAR 0 44
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: NEG
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: LD_INT 2
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 2
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: LD_INT 2
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: LD_INT 2
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 2
62314: NEG
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: NEG
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: LD_INT 3
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 3
62433: NEG
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 3
62445: NEG
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 3
62457: NEG
62458: PUSH
62459: LD_INT 3
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62498: LD_ADDR_VAR 0 45
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 1
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 1
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 2
62688: NEG
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 3
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 2
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: LD_INT 2
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: LD_INT 3
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: LD_INT 3
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 3
62795: NEG
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 3
62807: NEG
62808: PUSH
62809: LD_INT 3
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62848: LD_ADDR_VAR 0 46
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: LD_INT 2
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 2
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: LD_INT 3
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: LD_INT 3
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 2
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 3
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 2
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: NEG
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 3
63155: NEG
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63196: LD_ADDR_VAR 0 47
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 1
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: LD_INT 1
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: LD_INT 2
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: LD_INT 2
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: LD_INT 2
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63347: LD_ADDR_VAR 0 48
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: LD_INT 1
63420: NEG
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 2
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63494: LD_ADDR_VAR 0 49
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: LD_INT 2
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63638: LD_ADDR_VAR 0 50
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: LD_INT 2
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 0
63749: PUSH
63750: LD_INT 2
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63782: LD_ADDR_VAR 0 51
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 1
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: NEG
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: NEG
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63929: LD_ADDR_VAR 0 52
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: LD_INT 1
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 1
64010: NEG
64011: PUSH
64012: LD_INT 2
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 2
64033: NEG
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 2
64044: NEG
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: LD_INT 2
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64080: LD_ADDR_VAR 0 53
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: NEG
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 2
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: LD_INT 2
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 2
64267: NEG
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 2
64279: NEG
64280: PUSH
64281: LD_INT 2
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64310: LD_ADDR_VAR 0 54
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 2
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 2
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 2
64445: PUSH
64446: LD_INT 2
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 2
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 2
64486: NEG
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64540: LD_ADDR_VAR 0 55
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: LD_INT 2
64625: NEG
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: LD_INT 2
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: LD_INT 1
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 2
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 2
64675: PUSH
64676: LD_INT 2
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: LD_INT 2
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: NEG
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 2
64716: NEG
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 2
64727: NEG
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 2
64739: NEG
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64770: LD_ADDR_VAR 0 56
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 1
64839: NEG
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: NEG
64852: PUSH
64853: LD_INT 2
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: LD_INT 2
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: LD_INT 1
64877: NEG
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: LD_INT 2
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 2
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: LD_INT 1
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: NEG
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 2
64969: NEG
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65000: LD_ADDR_VAR 0 57
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 1
65069: NEG
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: LD_INT 1
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: LD_INT 2
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 2
65176: NEG
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 2
65187: NEG
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 2
65199: NEG
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65230: LD_ADDR_VAR 0 58
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 1
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: LD_INT 2
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: LD_INT 2
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: LD_INT 2
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 2
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 2
65417: NEG
65418: PUSH
65419: LD_INT 1
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 2
65429: NEG
65430: PUSH
65431: LD_INT 2
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65460: LD_ADDR_VAR 0 59
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 0
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 1
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 1
65529: NEG
65530: PUSH
65531: LD_INT 1
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65548: LD_ADDR_VAR 0 60
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 1
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 1
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 1
65606: NEG
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: LD_INT 1
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65636: LD_ADDR_VAR 0 61
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: NEG
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65724: LD_ADDR_VAR 0 62
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 1
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: NEG
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65812: LD_ADDR_VAR 0 63
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 1
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65900: LD_ADDR_VAR 0 64
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: LD_INT 1
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: ST_TO_ADDR
// end ; 1 :
65988: GO 71885
65990: LD_INT 1
65992: DOUBLE
65993: EQUAL
65994: IFTRUE 65998
65996: GO 68621
65998: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65999: LD_ADDR_VAR 0 11
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: LD_INT 3
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 3
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66043: LD_ADDR_VAR 0 12
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 3
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 3
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: LIST
66083: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66084: LD_ADDR_VAR 0 13
66088: PUSH
66089: LD_INT 3
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 3
66101: PUSH
66102: LD_INT 3
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 2
66111: PUSH
66112: LD_INT 3
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66124: LD_ADDR_VAR 0 14
66128: PUSH
66129: LD_INT 1
66131: PUSH
66132: LD_INT 3
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 3
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: LD_INT 2
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66165: LD_ADDR_VAR 0 15
66169: PUSH
66170: LD_INT 2
66172: NEG
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 3
66183: NEG
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 3
66194: NEG
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66209: LD_ADDR_VAR 0 16
66213: PUSH
66214: LD_INT 2
66216: NEG
66217: PUSH
66218: LD_INT 3
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 3
66228: NEG
66229: PUSH
66230: LD_INT 2
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 3
66240: NEG
66241: PUSH
66242: LD_INT 3
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: LIST
66254: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66255: LD_ADDR_VAR 0 17
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 3
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: LD_INT 3
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: LD_INT 2
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: LIST
66298: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66299: LD_ADDR_VAR 0 18
66303: PUSH
66304: LD_INT 2
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 3
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 3
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: LIST
66339: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66340: LD_ADDR_VAR 0 19
66344: PUSH
66345: LD_INT 3
66347: PUSH
66348: LD_INT 2
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 3
66357: PUSH
66358: LD_INT 3
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 2
66367: PUSH
66368: LD_INT 3
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: LIST
66379: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66380: LD_ADDR_VAR 0 20
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: LD_INT 3
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 3
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 2
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66421: LD_ADDR_VAR 0 21
66425: PUSH
66426: LD_INT 2
66428: NEG
66429: PUSH
66430: LD_INT 1
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 3
66439: NEG
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 3
66450: NEG
66451: PUSH
66452: LD_INT 1
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66465: LD_ADDR_VAR 0 22
66469: PUSH
66470: LD_INT 2
66472: NEG
66473: PUSH
66474: LD_INT 3
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: NEG
66485: PUSH
66486: LD_INT 2
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 3
66496: NEG
66497: PUSH
66498: LD_INT 3
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: LIST
66510: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66511: LD_ADDR_VAR 0 23
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: LD_INT 3
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: LD_INT 4
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: PUSH
66542: LD_INT 3
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66555: LD_ADDR_VAR 0 24
66559: PUSH
66560: LD_INT 3
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 3
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 4
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66596: LD_ADDR_VAR 0 25
66600: PUSH
66601: LD_INT 3
66603: PUSH
66604: LD_INT 3
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: LD_INT 4
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66636: LD_ADDR_VAR 0 26
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: LD_INT 3
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: PUSH
66654: LD_INT 4
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66677: LD_ADDR_VAR 0 27
66681: PUSH
66682: LD_INT 3
66684: NEG
66685: PUSH
66686: LD_INT 0
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 3
66695: NEG
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 4
66706: NEG
66707: PUSH
66708: LD_INT 1
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66721: LD_ADDR_VAR 0 28
66725: PUSH
66726: LD_INT 3
66728: NEG
66729: PUSH
66730: LD_INT 3
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 3
66740: NEG
66741: PUSH
66742: LD_INT 4
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 4
66752: NEG
66753: PUSH
66754: LD_INT 3
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: LIST
66766: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66767: LD_ADDR_VAR 0 29
66771: PUSH
66772: LD_INT 1
66774: NEG
66775: PUSH
66776: LD_INT 3
66778: NEG
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: LD_INT 3
66789: NEG
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 1
66808: NEG
66809: PUSH
66810: LD_INT 4
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 0
66820: PUSH
66821: LD_INT 4
66823: NEG
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: PUSH
66832: LD_INT 3
66834: NEG
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: LD_INT 5
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 5
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: LD_INT 4
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 1
66876: NEG
66877: PUSH
66878: LD_INT 6
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: LD_INT 6
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: LD_INT 5
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66922: LD_ADDR_VAR 0 30
66926: PUSH
66927: LD_INT 2
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 3
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: LD_INT 1
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 4
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 4
66981: PUSH
66982: LD_INT 1
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 4
66991: PUSH
66992: LD_INT 1
66994: NEG
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 5
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 5
67012: PUSH
67013: LD_INT 1
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 5
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 6
67033: PUSH
67034: LD_INT 0
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 6
67043: PUSH
67044: LD_INT 1
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67065: LD_ADDR_VAR 0 31
67069: PUSH
67070: LD_INT 3
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 3
67082: PUSH
67083: LD_INT 3
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: PUSH
67093: LD_INT 3
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 4
67102: PUSH
67103: LD_INT 3
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 4
67112: PUSH
67113: LD_INT 4
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 3
67122: PUSH
67123: LD_INT 4
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 5
67132: PUSH
67133: LD_INT 4
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 5
67142: PUSH
67143: LD_INT 5
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 4
67152: PUSH
67153: LD_INT 5
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 6
67162: PUSH
67163: LD_INT 5
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 6
67172: PUSH
67173: LD_INT 6
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 5
67182: PUSH
67183: LD_INT 6
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67204: LD_ADDR_VAR 0 32
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: LD_INT 3
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: LD_INT 3
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 1
67231: NEG
67232: PUSH
67233: LD_INT 2
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 1
67242: PUSH
67243: LD_INT 4
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 0
67252: PUSH
67253: LD_INT 4
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 1
67262: NEG
67263: PUSH
67264: LD_INT 3
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 1
67273: PUSH
67274: LD_INT 5
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: LD_INT 5
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 1
67293: NEG
67294: PUSH
67295: LD_INT 4
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: LD_INT 6
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: LD_INT 6
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: NEG
67325: PUSH
67326: LD_INT 5
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67347: LD_ADDR_VAR 0 33
67351: PUSH
67352: LD_INT 2
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: NEG
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 3
67376: NEG
67377: PUSH
67378: LD_INT 1
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 3
67388: NEG
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 4
67399: NEG
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 4
67410: NEG
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 4
67422: NEG
67423: PUSH
67424: LD_INT 1
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 5
67433: NEG
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 5
67444: NEG
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 5
67456: NEG
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 6
67467: NEG
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 6
67478: NEG
67479: PUSH
67480: LD_INT 1
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67502: LD_ADDR_VAR 0 34
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: LD_INT 3
67513: NEG
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 3
67521: NEG
67522: PUSH
67523: LD_INT 2
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 3
67533: NEG
67534: PUSH
67535: LD_INT 3
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: LD_INT 4
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 4
67557: NEG
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: LD_INT 4
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 4
67581: NEG
67582: PUSH
67583: LD_INT 5
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 5
67593: NEG
67594: PUSH
67595: LD_INT 4
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 5
67605: NEG
67606: PUSH
67607: LD_INT 5
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 5
67617: NEG
67618: PUSH
67619: LD_INT 6
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 6
67629: NEG
67630: PUSH
67631: LD_INT 5
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 6
67641: NEG
67642: PUSH
67643: LD_INT 6
67645: NEG
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67665: LD_ADDR_VAR 0 41
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 2
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 1
67683: NEG
67684: PUSH
67685: LD_INT 3
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: LD_INT 2
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: LIST
67708: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67709: LD_ADDR_VAR 0 42
67713: PUSH
67714: LD_INT 2
67716: PUSH
67717: LD_INT 0
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 2
67726: PUSH
67727: LD_INT 1
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: LD_INT 1
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67750: LD_ADDR_VAR 0 43
67754: PUSH
67755: LD_INT 2
67757: PUSH
67758: LD_INT 2
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 3
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 2
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: LIST
67789: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67790: LD_ADDR_VAR 0 44
67794: PUSH
67795: LD_INT 0
67797: PUSH
67798: LD_INT 2
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 1
67807: PUSH
67808: LD_INT 3
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: LD_INT 2
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67831: LD_ADDR_VAR 0 45
67835: PUSH
67836: LD_INT 2
67838: NEG
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 2
67849: NEG
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 3
67860: NEG
67861: PUSH
67862: LD_INT 1
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: LIST
67874: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67875: LD_ADDR_VAR 0 46
67879: PUSH
67880: LD_INT 2
67882: NEG
67883: PUSH
67884: LD_INT 2
67886: NEG
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 2
67894: NEG
67895: PUSH
67896: LD_INT 3
67898: NEG
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 3
67906: NEG
67907: PUSH
67908: LD_INT 2
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: LIST
67920: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67921: LD_ADDR_VAR 0 47
67925: PUSH
67926: LD_INT 2
67928: NEG
67929: PUSH
67930: LD_INT 3
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: NEG
67941: PUSH
67942: LD_INT 3
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67954: LD_ADDR_VAR 0 48
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: LD_INT 2
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 2
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67985: LD_ADDR_VAR 0 49
67989: PUSH
67990: LD_INT 3
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: PUSH
68003: LD_INT 2
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68014: LD_ADDR_VAR 0 50
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: LD_INT 3
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 1
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68043: LD_ADDR_VAR 0 51
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: LD_INT 2
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: LD_INT 1
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68074: LD_ADDR_VAR 0 52
68078: PUSH
68079: LD_INT 3
68081: NEG
68082: PUSH
68083: LD_INT 1
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 3
68093: NEG
68094: PUSH
68095: LD_INT 2
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68107: LD_ADDR_VAR 0 53
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: LD_INT 3
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: LD_INT 3
68129: NEG
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 1
68137: PUSH
68138: LD_INT 2
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: LIST
68150: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68151: LD_ADDR_VAR 0 54
68155: PUSH
68156: LD_INT 2
68158: PUSH
68159: LD_INT 1
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 3
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 3
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: LIST
68191: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68192: LD_ADDR_VAR 0 55
68196: PUSH
68197: LD_INT 3
68199: PUSH
68200: LD_INT 2
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 3
68209: PUSH
68210: LD_INT 3
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 2
68219: PUSH
68220: LD_INT 3
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: LIST
68231: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68232: LD_ADDR_VAR 0 56
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: LD_INT 3
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: LD_INT 2
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68273: LD_ADDR_VAR 0 57
68277: PUSH
68278: LD_INT 2
68280: NEG
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 3
68291: NEG
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 3
68302: NEG
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: LIST
68316: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68317: LD_ADDR_VAR 0 58
68321: PUSH
68322: LD_INT 2
68324: NEG
68325: PUSH
68326: LD_INT 3
68328: NEG
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 3
68336: NEG
68337: PUSH
68338: LD_INT 2
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 3
68348: NEG
68349: PUSH
68350: LD_INT 3
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: LIST
68362: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68363: LD_ADDR_VAR 0 59
68367: PUSH
68368: LD_INT 1
68370: NEG
68371: PUSH
68372: LD_INT 2
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 0
68382: PUSH
68383: LD_INT 2
68385: NEG
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 1
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: LIST
68406: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68407: LD_ADDR_VAR 0 60
68411: PUSH
68412: LD_INT 1
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 2
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 2
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: LIST
68447: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68448: LD_ADDR_VAR 0 61
68452: PUSH
68453: LD_INT 2
68455: PUSH
68456: LD_INT 1
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 2
68465: PUSH
68466: LD_INT 2
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 1
68475: PUSH
68476: LD_INT 2
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: LIST
68487: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68488: LD_ADDR_VAR 0 62
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: LD_INT 2
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 2
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: NEG
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68529: LD_ADDR_VAR 0 63
68533: PUSH
68534: LD_INT 1
68536: NEG
68537: PUSH
68538: LD_INT 1
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: LD_INT 0
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: LD_INT 1
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68573: LD_ADDR_VAR 0 64
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: PUSH
68582: LD_INT 2
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 2
68592: NEG
68593: PUSH
68594: LD_INT 1
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: LD_INT 2
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: LIST
68618: ST_TO_ADDR
// end ; 2 :
68619: GO 71885
68621: LD_INT 2
68623: DOUBLE
68624: EQUAL
68625: IFTRUE 68629
68627: GO 71884
68629: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68630: LD_ADDR_VAR 0 29
68634: PUSH
68635: LD_INT 4
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 4
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 5
68658: PUSH
68659: LD_INT 0
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 5
68668: PUSH
68669: LD_INT 1
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 4
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 3
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 3
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 3
68709: PUSH
68710: LD_INT 2
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 5
68720: PUSH
68721: LD_INT 2
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 3
68730: PUSH
68731: LD_INT 3
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 3
68740: PUSH
68741: LD_INT 2
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 4
68750: PUSH
68751: LD_INT 3
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 4
68760: PUSH
68761: LD_INT 4
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 3
68770: PUSH
68771: LD_INT 4
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 2
68780: PUSH
68781: LD_INT 3
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 2
68790: PUSH
68791: LD_INT 2
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 4
68800: PUSH
68801: LD_INT 2
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 2
68810: PUSH
68811: LD_INT 4
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 0
68820: PUSH
68821: LD_INT 4
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 0
68830: PUSH
68831: LD_INT 3
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 1
68840: PUSH
68841: LD_INT 4
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: LD_INT 5
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: LD_INT 5
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 1
68870: NEG
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 1
68881: NEG
68882: PUSH
68883: LD_INT 3
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 2
68892: PUSH
68893: LD_INT 5
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 2
68902: NEG
68903: PUSH
68904: LD_INT 3
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: NEG
68914: PUSH
68915: LD_INT 0
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 3
68924: NEG
68925: PUSH
68926: LD_INT 1
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 2
68936: NEG
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 2
68947: NEG
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 3
68958: NEG
68959: PUSH
68960: LD_INT 1
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 4
68969: NEG
68970: PUSH
68971: LD_INT 0
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 4
68980: NEG
68981: PUSH
68982: LD_INT 1
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 4
68992: NEG
68993: PUSH
68994: LD_INT 2
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 2
69004: NEG
69005: PUSH
69006: LD_INT 2
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 4
69015: NEG
69016: PUSH
69017: LD_INT 4
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 4
69027: NEG
69028: PUSH
69029: LD_INT 5
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 3
69039: NEG
69040: PUSH
69041: LD_INT 4
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 3
69051: NEG
69052: PUSH
69053: LD_INT 3
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 4
69063: NEG
69064: PUSH
69065: LD_INT 3
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 5
69075: NEG
69076: PUSH
69077: LD_INT 4
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 5
69087: NEG
69088: PUSH
69089: LD_INT 5
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 3
69099: NEG
69100: PUSH
69101: LD_INT 5
69103: NEG
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 5
69111: NEG
69112: PUSH
69113: LD_INT 3
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69168: LD_ADDR_VAR 0 30
69172: PUSH
69173: LD_INT 4
69175: PUSH
69176: LD_INT 4
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 4
69185: PUSH
69186: LD_INT 3
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 5
69195: PUSH
69196: LD_INT 4
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 5
69205: PUSH
69206: LD_INT 5
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 4
69215: PUSH
69216: LD_INT 5
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 3
69225: PUSH
69226: LD_INT 4
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 3
69235: PUSH
69236: LD_INT 3
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 5
69245: PUSH
69246: LD_INT 3
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 3
69255: PUSH
69256: LD_INT 5
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 0
69265: PUSH
69266: LD_INT 3
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: LD_INT 2
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 1
69285: PUSH
69286: LD_INT 3
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 1
69295: PUSH
69296: LD_INT 4
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: LD_INT 4
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 1
69315: NEG
69316: PUSH
69317: LD_INT 3
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 2
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 2
69337: PUSH
69338: LD_INT 4
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 2
69347: NEG
69348: PUSH
69349: LD_INT 2
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: NEG
69359: PUSH
69360: LD_INT 0
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 4
69369: NEG
69370: PUSH
69371: LD_INT 1
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 3
69381: NEG
69382: PUSH
69383: LD_INT 0
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 3
69392: NEG
69393: PUSH
69394: LD_INT 1
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 4
69403: NEG
69404: PUSH
69405: LD_INT 1
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 5
69414: NEG
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 5
69425: NEG
69426: PUSH
69427: LD_INT 1
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 5
69437: NEG
69438: PUSH
69439: LD_INT 2
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 3
69449: NEG
69450: PUSH
69451: LD_INT 2
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 3
69460: NEG
69461: PUSH
69462: LD_INT 3
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 3
69472: NEG
69473: PUSH
69474: LD_INT 4
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 2
69484: NEG
69485: PUSH
69486: LD_INT 3
69488: NEG
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 2
69496: NEG
69497: PUSH
69498: LD_INT 2
69500: NEG
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 3
69508: NEG
69509: PUSH
69510: LD_INT 2
69512: NEG
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 4
69520: NEG
69521: PUSH
69522: LD_INT 3
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 4
69532: NEG
69533: PUSH
69534: LD_INT 4
69536: NEG
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 2
69544: NEG
69545: PUSH
69546: LD_INT 4
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 4
69556: NEG
69557: PUSH
69558: LD_INT 2
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 0
69568: PUSH
69569: LD_INT 4
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: LD_INT 5
69582: NEG
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 4
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: LD_INT 3
69604: NEG
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: LD_INT 3
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 1
69623: NEG
69624: PUSH
69625: LD_INT 4
69627: NEG
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 1
69635: NEG
69636: PUSH
69637: LD_INT 5
69639: NEG
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: LD_INT 2
69647: PUSH
69648: LD_INT 3
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 2
69658: NEG
69659: PUSH
69660: LD_INT 5
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69715: LD_ADDR_VAR 0 31
69719: PUSH
69720: LD_INT 0
69722: PUSH
69723: LD_INT 4
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 3
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 1
69742: PUSH
69743: LD_INT 4
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: LD_INT 5
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: LD_INT 5
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 1
69772: NEG
69773: PUSH
69774: LD_INT 4
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: LD_INT 3
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 2
69794: PUSH
69795: LD_INT 5
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 2
69804: NEG
69805: PUSH
69806: LD_INT 3
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 3
69815: NEG
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 3
69826: NEG
69827: PUSH
69828: LD_INT 1
69830: NEG
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 2
69838: NEG
69839: PUSH
69840: LD_INT 0
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: LD_INT 1
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 3
69860: NEG
69861: PUSH
69862: LD_INT 1
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 4
69871: NEG
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 4
69882: NEG
69883: PUSH
69884: LD_INT 1
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 4
69894: NEG
69895: PUSH
69896: LD_INT 2
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 2
69906: NEG
69907: PUSH
69908: LD_INT 2
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 4
69917: NEG
69918: PUSH
69919: LD_INT 4
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 4
69929: NEG
69930: PUSH
69931: LD_INT 5
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 3
69941: NEG
69942: PUSH
69943: LD_INT 4
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 3
69953: NEG
69954: PUSH
69955: LD_INT 3
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 4
69965: NEG
69966: PUSH
69967: LD_INT 3
69969: NEG
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 5
69977: NEG
69978: PUSH
69979: LD_INT 4
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 5
69989: NEG
69990: PUSH
69991: LD_INT 5
69993: NEG
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 3
70001: NEG
70002: PUSH
70003: LD_INT 5
70005: NEG
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 5
70013: NEG
70014: PUSH
70015: LD_INT 3
70017: NEG
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: LD_INT 3
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: LD_INT 4
70039: NEG
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 1
70047: PUSH
70048: LD_INT 3
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 1
70058: PUSH
70059: LD_INT 2
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 0
70069: PUSH
70070: LD_INT 2
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 1
70080: NEG
70081: PUSH
70082: LD_INT 3
70084: NEG
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: NEG
70093: PUSH
70094: LD_INT 4
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 2
70104: PUSH
70105: LD_INT 2
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 2
70115: NEG
70116: PUSH
70117: LD_INT 4
70119: NEG
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 4
70137: PUSH
70138: LD_INT 1
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 5
70148: PUSH
70149: LD_INT 0
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 5
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 4
70168: PUSH
70169: LD_INT 1
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 3
70178: PUSH
70179: LD_INT 0
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 3
70199: PUSH
70200: LD_INT 2
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 5
70210: PUSH
70211: LD_INT 2
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70265: LD_ADDR_VAR 0 32
70269: PUSH
70270: LD_INT 4
70272: NEG
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 4
70283: NEG
70284: PUSH
70285: LD_INT 1
70287: NEG
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 3
70295: NEG
70296: PUSH
70297: LD_INT 0
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 3
70306: NEG
70307: PUSH
70308: LD_INT 1
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 4
70317: NEG
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 5
70328: NEG
70329: PUSH
70330: LD_INT 0
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 5
70339: NEG
70340: PUSH
70341: LD_INT 1
70343: NEG
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 5
70351: NEG
70352: PUSH
70353: LD_INT 2
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 3
70363: NEG
70364: PUSH
70365: LD_INT 2
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 3
70374: NEG
70375: PUSH
70376: LD_INT 3
70378: NEG
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 3
70386: NEG
70387: PUSH
70388: LD_INT 4
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 2
70398: NEG
70399: PUSH
70400: LD_INT 3
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 2
70410: NEG
70411: PUSH
70412: LD_INT 2
70414: NEG
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 3
70422: NEG
70423: PUSH
70424: LD_INT 2
70426: NEG
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 4
70434: NEG
70435: PUSH
70436: LD_INT 3
70438: NEG
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 4
70446: NEG
70447: PUSH
70448: LD_INT 4
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 2
70458: NEG
70459: PUSH
70460: LD_INT 4
70462: NEG
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 4
70470: NEG
70471: PUSH
70472: LD_INT 2
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: LD_INT 4
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: LD_INT 5
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 1
70504: PUSH
70505: LD_INT 4
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 1
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 3
70529: NEG
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 1
70537: NEG
70538: PUSH
70539: LD_INT 4
70541: NEG
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: PUSH
70551: LD_INT 5
70553: NEG
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 2
70561: PUSH
70562: LD_INT 3
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 2
70572: NEG
70573: PUSH
70574: LD_INT 5
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 3
70584: PUSH
70585: LD_INT 0
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 3
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 4
70605: PUSH
70606: LD_INT 0
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 4
70615: PUSH
70616: LD_INT 1
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 3
70625: PUSH
70626: LD_INT 1
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 2
70635: PUSH
70636: LD_INT 0
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: LD_INT 1
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 2
70656: PUSH
70657: LD_INT 2
70659: NEG
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 4
70667: PUSH
70668: LD_INT 2
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 4
70677: PUSH
70678: LD_INT 4
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 4
70687: PUSH
70688: LD_INT 3
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 5
70697: PUSH
70698: LD_INT 4
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 5
70707: PUSH
70708: LD_INT 5
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 4
70717: PUSH
70718: LD_INT 5
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 3
70727: PUSH
70728: LD_INT 4
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: LD_INT 3
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 5
70747: PUSH
70748: LD_INT 3
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 3
70757: PUSH
70758: LD_INT 5
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70812: LD_ADDR_VAR 0 33
70816: PUSH
70817: LD_INT 4
70819: NEG
70820: PUSH
70821: LD_INT 4
70823: NEG
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 4
70831: NEG
70832: PUSH
70833: LD_INT 5
70835: NEG
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 3
70843: NEG
70844: PUSH
70845: LD_INT 4
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: LD_INT 3
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 4
70867: NEG
70868: PUSH
70869: LD_INT 3
70871: NEG
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 5
70879: NEG
70880: PUSH
70881: LD_INT 4
70883: NEG
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: LD_INT 5
70891: NEG
70892: PUSH
70893: LD_INT 5
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 3
70903: NEG
70904: PUSH
70905: LD_INT 5
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 5
70915: NEG
70916: PUSH
70917: LD_INT 3
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: LD_INT 3
70930: NEG
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: LD_INT 4
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 1
70949: PUSH
70950: LD_INT 3
70952: NEG
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 1
70960: PUSH
70961: LD_INT 2
70963: NEG
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 0
70971: PUSH
70972: LD_INT 2
70974: NEG
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 1
70982: NEG
70983: PUSH
70984: LD_INT 3
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: LD_INT 4
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 2
71006: PUSH
71007: LD_INT 2
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 2
71017: NEG
71018: PUSH
71019: LD_INT 4
71021: NEG
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 4
71029: PUSH
71030: LD_INT 0
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 4
71039: PUSH
71040: LD_INT 1
71042: NEG
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 5
71050: PUSH
71051: LD_INT 0
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 5
71060: PUSH
71061: LD_INT 1
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 4
71070: PUSH
71071: LD_INT 1
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 3
71080: PUSH
71081: LD_INT 0
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: PUSH
71091: LD_INT 1
71093: NEG
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: LD_INT 3
71101: PUSH
71102: LD_INT 2
71104: NEG
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 5
71112: PUSH
71113: LD_INT 2
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 3
71122: PUSH
71123: LD_INT 3
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 3
71132: PUSH
71133: LD_INT 2
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 4
71142: PUSH
71143: LD_INT 3
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 4
71152: PUSH
71153: LD_INT 4
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 3
71162: PUSH
71163: LD_INT 4
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: LD_INT 3
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 2
71182: PUSH
71183: LD_INT 2
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 4
71192: PUSH
71193: LD_INT 2
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 2
71202: PUSH
71203: LD_INT 4
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 0
71212: PUSH
71213: LD_INT 4
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 0
71222: PUSH
71223: LD_INT 3
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 1
71232: PUSH
71233: LD_INT 4
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 1
71242: PUSH
71243: LD_INT 5
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 0
71252: PUSH
71253: LD_INT 5
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 1
71262: NEG
71263: PUSH
71264: LD_INT 4
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PUSH
71271: LD_INT 1
71273: NEG
71274: PUSH
71275: LD_INT 3
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 2
71284: PUSH
71285: LD_INT 5
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 2
71294: NEG
71295: PUSH
71296: LD_INT 3
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71350: LD_ADDR_VAR 0 34
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: LD_INT 4
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: LD_INT 5
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: LD_INT 4
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 1
71390: PUSH
71391: LD_INT 3
71393: NEG
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 0
71401: PUSH
71402: LD_INT 3
71404: NEG
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 1
71412: NEG
71413: PUSH
71414: LD_INT 4
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: LD_INT 5
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 2
71436: PUSH
71437: LD_INT 3
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 2
71447: NEG
71448: PUSH
71449: LD_INT 5
71451: NEG
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 3
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 3
71469: PUSH
71470: LD_INT 1
71472: NEG
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 4
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 4
71490: PUSH
71491: LD_INT 1
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 3
71500: PUSH
71501: LD_INT 1
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 2
71510: PUSH
71511: LD_INT 0
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 2
71520: PUSH
71521: LD_INT 1
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 2
71531: PUSH
71532: LD_INT 2
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 4
71542: PUSH
71543: LD_INT 2
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 4
71552: PUSH
71553: LD_INT 4
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 4
71562: PUSH
71563: LD_INT 3
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 5
71572: PUSH
71573: LD_INT 4
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: LD_INT 5
71582: PUSH
71583: LD_INT 5
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: PUSH
71590: LD_INT 4
71592: PUSH
71593: LD_INT 5
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 3
71602: PUSH
71603: LD_INT 4
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: LD_INT 3
71612: PUSH
71613: LD_INT 3
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 5
71622: PUSH
71623: LD_INT 3
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 3
71632: PUSH
71633: LD_INT 5
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 0
71642: PUSH
71643: LD_INT 3
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 0
71652: PUSH
71653: LD_INT 2
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 1
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 1
71672: PUSH
71673: LD_INT 4
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 0
71682: PUSH
71683: LD_INT 4
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 1
71692: NEG
71693: PUSH
71694: LD_INT 3
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 1
71703: NEG
71704: PUSH
71705: LD_INT 2
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 2
71714: PUSH
71715: LD_INT 4
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PUSH
71722: LD_INT 2
71724: NEG
71725: PUSH
71726: LD_INT 2
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 4
71735: NEG
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 4
71746: NEG
71747: PUSH
71748: LD_INT 1
71750: NEG
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 3
71758: NEG
71759: PUSH
71760: LD_INT 0
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 3
71769: NEG
71770: PUSH
71771: LD_INT 1
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 4
71780: NEG
71781: PUSH
71782: LD_INT 1
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 5
71791: NEG
71792: PUSH
71793: LD_INT 0
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 5
71802: NEG
71803: PUSH
71804: LD_INT 1
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 5
71814: NEG
71815: PUSH
71816: LD_INT 2
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 3
71826: NEG
71827: PUSH
71828: LD_INT 2
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: ST_TO_ADDR
// end ; end ;
71882: GO 71885
71884: POP
// case btype of b_depot , b_warehouse :
71885: LD_VAR 0 1
71889: PUSH
71890: LD_INT 0
71892: DOUBLE
71893: EQUAL
71894: IFTRUE 71904
71896: LD_INT 1
71898: DOUBLE
71899: EQUAL
71900: IFTRUE 71904
71902: GO 72105
71904: POP
// case nation of nation_american :
71905: LD_VAR 0 5
71909: PUSH
71910: LD_INT 1
71912: DOUBLE
71913: EQUAL
71914: IFTRUE 71918
71916: GO 71974
71918: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71919: LD_ADDR_VAR 0 9
71923: PUSH
71924: LD_VAR 0 11
71928: PUSH
71929: LD_VAR 0 12
71933: PUSH
71934: LD_VAR 0 13
71938: PUSH
71939: LD_VAR 0 14
71943: PUSH
71944: LD_VAR 0 15
71948: PUSH
71949: LD_VAR 0 16
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: PUSH
71962: LD_VAR 0 4
71966: PUSH
71967: LD_INT 1
71969: PLUS
71970: ARRAY
71971: ST_TO_ADDR
71972: GO 72103
71974: LD_INT 2
71976: DOUBLE
71977: EQUAL
71978: IFTRUE 71982
71980: GO 72038
71982: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71983: LD_ADDR_VAR 0 9
71987: PUSH
71988: LD_VAR 0 17
71992: PUSH
71993: LD_VAR 0 18
71997: PUSH
71998: LD_VAR 0 19
72002: PUSH
72003: LD_VAR 0 20
72007: PUSH
72008: LD_VAR 0 21
72012: PUSH
72013: LD_VAR 0 22
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: PUSH
72026: LD_VAR 0 4
72030: PUSH
72031: LD_INT 1
72033: PLUS
72034: ARRAY
72035: ST_TO_ADDR
72036: GO 72103
72038: LD_INT 3
72040: DOUBLE
72041: EQUAL
72042: IFTRUE 72046
72044: GO 72102
72046: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72047: LD_ADDR_VAR 0 9
72051: PUSH
72052: LD_VAR 0 23
72056: PUSH
72057: LD_VAR 0 24
72061: PUSH
72062: LD_VAR 0 25
72066: PUSH
72067: LD_VAR 0 26
72071: PUSH
72072: LD_VAR 0 27
72076: PUSH
72077: LD_VAR 0 28
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: PUSH
72090: LD_VAR 0 4
72094: PUSH
72095: LD_INT 1
72097: PLUS
72098: ARRAY
72099: ST_TO_ADDR
72100: GO 72103
72102: POP
72103: GO 72658
72105: LD_INT 2
72107: DOUBLE
72108: EQUAL
72109: IFTRUE 72119
72111: LD_INT 3
72113: DOUBLE
72114: EQUAL
72115: IFTRUE 72119
72117: GO 72175
72119: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72120: LD_ADDR_VAR 0 9
72124: PUSH
72125: LD_VAR 0 29
72129: PUSH
72130: LD_VAR 0 30
72134: PUSH
72135: LD_VAR 0 31
72139: PUSH
72140: LD_VAR 0 32
72144: PUSH
72145: LD_VAR 0 33
72149: PUSH
72150: LD_VAR 0 34
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: PUSH
72163: LD_VAR 0 4
72167: PUSH
72168: LD_INT 1
72170: PLUS
72171: ARRAY
72172: ST_TO_ADDR
72173: GO 72658
72175: LD_INT 16
72177: DOUBLE
72178: EQUAL
72179: IFTRUE 72237
72181: LD_INT 17
72183: DOUBLE
72184: EQUAL
72185: IFTRUE 72237
72187: LD_INT 18
72189: DOUBLE
72190: EQUAL
72191: IFTRUE 72237
72193: LD_INT 19
72195: DOUBLE
72196: EQUAL
72197: IFTRUE 72237
72199: LD_INT 22
72201: DOUBLE
72202: EQUAL
72203: IFTRUE 72237
72205: LD_INT 20
72207: DOUBLE
72208: EQUAL
72209: IFTRUE 72237
72211: LD_INT 21
72213: DOUBLE
72214: EQUAL
72215: IFTRUE 72237
72217: LD_INT 23
72219: DOUBLE
72220: EQUAL
72221: IFTRUE 72237
72223: LD_INT 24
72225: DOUBLE
72226: EQUAL
72227: IFTRUE 72237
72229: LD_INT 25
72231: DOUBLE
72232: EQUAL
72233: IFTRUE 72237
72235: GO 72293
72237: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72238: LD_ADDR_VAR 0 9
72242: PUSH
72243: LD_VAR 0 35
72247: PUSH
72248: LD_VAR 0 36
72252: PUSH
72253: LD_VAR 0 37
72257: PUSH
72258: LD_VAR 0 38
72262: PUSH
72263: LD_VAR 0 39
72267: PUSH
72268: LD_VAR 0 40
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: PUSH
72281: LD_VAR 0 4
72285: PUSH
72286: LD_INT 1
72288: PLUS
72289: ARRAY
72290: ST_TO_ADDR
72291: GO 72658
72293: LD_INT 6
72295: DOUBLE
72296: EQUAL
72297: IFTRUE 72349
72299: LD_INT 7
72301: DOUBLE
72302: EQUAL
72303: IFTRUE 72349
72305: LD_INT 8
72307: DOUBLE
72308: EQUAL
72309: IFTRUE 72349
72311: LD_INT 13
72313: DOUBLE
72314: EQUAL
72315: IFTRUE 72349
72317: LD_INT 12
72319: DOUBLE
72320: EQUAL
72321: IFTRUE 72349
72323: LD_INT 15
72325: DOUBLE
72326: EQUAL
72327: IFTRUE 72349
72329: LD_INT 11
72331: DOUBLE
72332: EQUAL
72333: IFTRUE 72349
72335: LD_INT 14
72337: DOUBLE
72338: EQUAL
72339: IFTRUE 72349
72341: LD_INT 10
72343: DOUBLE
72344: EQUAL
72345: IFTRUE 72349
72347: GO 72405
72349: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72350: LD_ADDR_VAR 0 9
72354: PUSH
72355: LD_VAR 0 41
72359: PUSH
72360: LD_VAR 0 42
72364: PUSH
72365: LD_VAR 0 43
72369: PUSH
72370: LD_VAR 0 44
72374: PUSH
72375: LD_VAR 0 45
72379: PUSH
72380: LD_VAR 0 46
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: PUSH
72393: LD_VAR 0 4
72397: PUSH
72398: LD_INT 1
72400: PLUS
72401: ARRAY
72402: ST_TO_ADDR
72403: GO 72658
72405: LD_INT 36
72407: DOUBLE
72408: EQUAL
72409: IFTRUE 72413
72411: GO 72469
72413: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72414: LD_ADDR_VAR 0 9
72418: PUSH
72419: LD_VAR 0 47
72423: PUSH
72424: LD_VAR 0 48
72428: PUSH
72429: LD_VAR 0 49
72433: PUSH
72434: LD_VAR 0 50
72438: PUSH
72439: LD_VAR 0 51
72443: PUSH
72444: LD_VAR 0 52
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: PUSH
72457: LD_VAR 0 4
72461: PUSH
72462: LD_INT 1
72464: PLUS
72465: ARRAY
72466: ST_TO_ADDR
72467: GO 72658
72469: LD_INT 4
72471: DOUBLE
72472: EQUAL
72473: IFTRUE 72495
72475: LD_INT 5
72477: DOUBLE
72478: EQUAL
72479: IFTRUE 72495
72481: LD_INT 34
72483: DOUBLE
72484: EQUAL
72485: IFTRUE 72495
72487: LD_INT 37
72489: DOUBLE
72490: EQUAL
72491: IFTRUE 72495
72493: GO 72551
72495: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72496: LD_ADDR_VAR 0 9
72500: PUSH
72501: LD_VAR 0 53
72505: PUSH
72506: LD_VAR 0 54
72510: PUSH
72511: LD_VAR 0 55
72515: PUSH
72516: LD_VAR 0 56
72520: PUSH
72521: LD_VAR 0 57
72525: PUSH
72526: LD_VAR 0 58
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: PUSH
72539: LD_VAR 0 4
72543: PUSH
72544: LD_INT 1
72546: PLUS
72547: ARRAY
72548: ST_TO_ADDR
72549: GO 72658
72551: LD_INT 31
72553: DOUBLE
72554: EQUAL
72555: IFTRUE 72601
72557: LD_INT 32
72559: DOUBLE
72560: EQUAL
72561: IFTRUE 72601
72563: LD_INT 33
72565: DOUBLE
72566: EQUAL
72567: IFTRUE 72601
72569: LD_INT 27
72571: DOUBLE
72572: EQUAL
72573: IFTRUE 72601
72575: LD_INT 26
72577: DOUBLE
72578: EQUAL
72579: IFTRUE 72601
72581: LD_INT 28
72583: DOUBLE
72584: EQUAL
72585: IFTRUE 72601
72587: LD_INT 29
72589: DOUBLE
72590: EQUAL
72591: IFTRUE 72601
72593: LD_INT 30
72595: DOUBLE
72596: EQUAL
72597: IFTRUE 72601
72599: GO 72657
72601: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72602: LD_ADDR_VAR 0 9
72606: PUSH
72607: LD_VAR 0 59
72611: PUSH
72612: LD_VAR 0 60
72616: PUSH
72617: LD_VAR 0 61
72621: PUSH
72622: LD_VAR 0 62
72626: PUSH
72627: LD_VAR 0 63
72631: PUSH
72632: LD_VAR 0 64
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: PUSH
72645: LD_VAR 0 4
72649: PUSH
72650: LD_INT 1
72652: PLUS
72653: ARRAY
72654: ST_TO_ADDR
72655: GO 72658
72657: POP
// temp_list2 = [ ] ;
72658: LD_ADDR_VAR 0 10
72662: PUSH
72663: EMPTY
72664: ST_TO_ADDR
// for i in temp_list do
72665: LD_ADDR_VAR 0 8
72669: PUSH
72670: LD_VAR 0 9
72674: PUSH
72675: FOR_IN
72676: IFFALSE 72728
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72678: LD_ADDR_VAR 0 10
72682: PUSH
72683: LD_VAR 0 10
72687: PUSH
72688: LD_VAR 0 8
72692: PUSH
72693: LD_INT 1
72695: ARRAY
72696: PUSH
72697: LD_VAR 0 2
72701: PLUS
72702: PUSH
72703: LD_VAR 0 8
72707: PUSH
72708: LD_INT 2
72710: ARRAY
72711: PUSH
72712: LD_VAR 0 3
72716: PLUS
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: EMPTY
72723: LIST
72724: ADD
72725: ST_TO_ADDR
72726: GO 72675
72728: POP
72729: POP
// result = temp_list2 ;
72730: LD_ADDR_VAR 0 7
72734: PUSH
72735: LD_VAR 0 10
72739: ST_TO_ADDR
// end ;
72740: LD_VAR 0 7
72744: RET
// export function EnemyInRange ( unit , dist ) ; begin
72745: LD_INT 0
72747: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72748: LD_ADDR_VAR 0 3
72752: PUSH
72753: LD_VAR 0 1
72757: PPUSH
72758: CALL_OW 255
72762: PPUSH
72763: LD_VAR 0 1
72767: PPUSH
72768: CALL_OW 250
72772: PPUSH
72773: LD_VAR 0 1
72777: PPUSH
72778: CALL_OW 251
72782: PPUSH
72783: LD_VAR 0 2
72787: PPUSH
72788: CALL 46002 0 4
72792: PUSH
72793: LD_INT 4
72795: ARRAY
72796: ST_TO_ADDR
// end ;
72797: LD_VAR 0 3
72801: RET
// export function PlayerSeeMe ( unit ) ; begin
72802: LD_INT 0
72804: PPUSH
// result := See ( your_side , unit ) ;
72805: LD_ADDR_VAR 0 2
72809: PUSH
72810: LD_OWVAR 2
72814: PPUSH
72815: LD_VAR 0 1
72819: PPUSH
72820: CALL_OW 292
72824: ST_TO_ADDR
// end ;
72825: LD_VAR 0 2
72829: RET
// export function ReverseDir ( unit ) ; begin
72830: LD_INT 0
72832: PPUSH
// if not unit then
72833: LD_VAR 0 1
72837: NOT
72838: IFFALSE 72842
// exit ;
72840: GO 72865
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72842: LD_ADDR_VAR 0 2
72846: PUSH
72847: LD_VAR 0 1
72851: PPUSH
72852: CALL_OW 254
72856: PUSH
72857: LD_INT 3
72859: PLUS
72860: PUSH
72861: LD_INT 6
72863: MOD
72864: ST_TO_ADDR
// end ;
72865: LD_VAR 0 2
72869: RET
// export function ReverseArray ( array ) ; var i ; begin
72870: LD_INT 0
72872: PPUSH
72873: PPUSH
// if not array then
72874: LD_VAR 0 1
72878: NOT
72879: IFFALSE 72883
// exit ;
72881: GO 72938
// result := [ ] ;
72883: LD_ADDR_VAR 0 2
72887: PUSH
72888: EMPTY
72889: ST_TO_ADDR
// for i := array downto 1 do
72890: LD_ADDR_VAR 0 3
72894: PUSH
72895: DOUBLE
72896: LD_VAR 0 1
72900: INC
72901: ST_TO_ADDR
72902: LD_INT 1
72904: PUSH
72905: FOR_DOWNTO
72906: IFFALSE 72936
// result := Join ( result , array [ i ] ) ;
72908: LD_ADDR_VAR 0 2
72912: PUSH
72913: LD_VAR 0 2
72917: PPUSH
72918: LD_VAR 0 1
72922: PUSH
72923: LD_VAR 0 3
72927: ARRAY
72928: PPUSH
72929: CALL 77780 0 2
72933: ST_TO_ADDR
72934: GO 72905
72936: POP
72937: POP
// end ;
72938: LD_VAR 0 2
72942: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72943: LD_INT 0
72945: PPUSH
72946: PPUSH
72947: PPUSH
72948: PPUSH
72949: PPUSH
72950: PPUSH
// if not unit or not hexes then
72951: LD_VAR 0 1
72955: NOT
72956: IFTRUE 72965
72958: PUSH
72959: LD_VAR 0 2
72963: NOT
72964: OR
72965: IFFALSE 72969
// exit ;
72967: GO 73092
// dist := 9999 ;
72969: LD_ADDR_VAR 0 5
72973: PUSH
72974: LD_INT 9999
72976: ST_TO_ADDR
// for i = 1 to hexes do
72977: LD_ADDR_VAR 0 4
72981: PUSH
72982: DOUBLE
72983: LD_INT 1
72985: DEC
72986: ST_TO_ADDR
72987: LD_VAR 0 2
72991: PUSH
72992: FOR_TO
72993: IFFALSE 73080
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72995: LD_ADDR_VAR 0 6
72999: PUSH
73000: LD_VAR 0 1
73004: PPUSH
73005: LD_VAR 0 2
73009: PUSH
73010: LD_VAR 0 4
73014: ARRAY
73015: PUSH
73016: LD_INT 1
73018: ARRAY
73019: PPUSH
73020: LD_VAR 0 2
73024: PUSH
73025: LD_VAR 0 4
73029: ARRAY
73030: PUSH
73031: LD_INT 2
73033: ARRAY
73034: PPUSH
73035: CALL_OW 297
73039: ST_TO_ADDR
// if tdist < dist then
73040: LD_VAR 0 6
73044: PUSH
73045: LD_VAR 0 5
73049: LESS
73050: IFFALSE 73078
// begin hex := hexes [ i ] ;
73052: LD_ADDR_VAR 0 8
73056: PUSH
73057: LD_VAR 0 2
73061: PUSH
73062: LD_VAR 0 4
73066: ARRAY
73067: ST_TO_ADDR
// dist := tdist ;
73068: LD_ADDR_VAR 0 5
73072: PUSH
73073: LD_VAR 0 6
73077: ST_TO_ADDR
// end ; end ;
73078: GO 72992
73080: POP
73081: POP
// result := hex ;
73082: LD_ADDR_VAR 0 3
73086: PUSH
73087: LD_VAR 0 8
73091: ST_TO_ADDR
// end ;
73092: LD_VAR 0 3
73096: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73097: LD_INT 0
73099: PPUSH
73100: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73101: LD_VAR 0 1
73105: NOT
73106: IFTRUE 73145
73108: PUSH
73109: LD_VAR 0 1
73113: PUSH
73114: LD_INT 21
73116: PUSH
73117: LD_INT 2
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 23
73126: PUSH
73127: LD_INT 2
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PPUSH
73138: CALL_OW 69
73142: IN
73143: NOT
73144: OR
73145: IFFALSE 73149
// exit ;
73147: GO 73196
// for i = 1 to 3 do
73149: LD_ADDR_VAR 0 3
73153: PUSH
73154: DOUBLE
73155: LD_INT 1
73157: DEC
73158: ST_TO_ADDR
73159: LD_INT 3
73161: PUSH
73162: FOR_TO
73163: IFFALSE 73194
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73165: LD_VAR 0 1
73169: PPUSH
73170: CALL_OW 250
73174: PPUSH
73175: LD_VAR 0 1
73179: PPUSH
73180: CALL_OW 251
73184: PPUSH
73185: LD_INT 1
73187: PPUSH
73188: CALL_OW 453
73192: GO 73162
73194: POP
73195: POP
// end ;
73196: LD_VAR 0 2
73200: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73201: LD_INT 0
73203: PPUSH
73204: PPUSH
73205: PPUSH
73206: PPUSH
73207: PPUSH
73208: PPUSH
// if not unit or not enemy_unit then
73209: LD_VAR 0 1
73213: NOT
73214: IFTRUE 73223
73216: PUSH
73217: LD_VAR 0 2
73221: NOT
73222: OR
73223: IFFALSE 73227
// exit ;
73225: GO 73698
// if GetLives ( i ) < 250 then
73227: LD_VAR 0 4
73231: PPUSH
73232: CALL_OW 256
73236: PUSH
73237: LD_INT 250
73239: LESS
73240: IFFALSE 73253
// begin ComAutodestruct ( i ) ;
73242: LD_VAR 0 4
73246: PPUSH
73247: CALL 73097 0 1
// exit ;
73251: GO 73698
// end ; x := GetX ( enemy_unit ) ;
73253: LD_ADDR_VAR 0 7
73257: PUSH
73258: LD_VAR 0 2
73262: PPUSH
73263: CALL_OW 250
73267: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73268: LD_ADDR_VAR 0 8
73272: PUSH
73273: LD_VAR 0 2
73277: PPUSH
73278: CALL_OW 251
73282: ST_TO_ADDR
// if not x or not y then
73283: LD_VAR 0 7
73287: NOT
73288: IFTRUE 73297
73290: PUSH
73291: LD_VAR 0 8
73295: NOT
73296: OR
73297: IFFALSE 73301
// exit ;
73299: GO 73698
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73301: LD_ADDR_VAR 0 6
73305: PUSH
73306: LD_VAR 0 7
73310: PPUSH
73311: LD_INT 0
73313: PPUSH
73314: LD_INT 4
73316: PPUSH
73317: CALL_OW 272
73321: PUSH
73322: LD_VAR 0 8
73326: PPUSH
73327: LD_INT 0
73329: PPUSH
73330: LD_INT 4
73332: PPUSH
73333: CALL_OW 273
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_VAR 0 7
73346: PPUSH
73347: LD_INT 1
73349: PPUSH
73350: LD_INT 4
73352: PPUSH
73353: CALL_OW 272
73357: PUSH
73358: LD_VAR 0 8
73362: PPUSH
73363: LD_INT 1
73365: PPUSH
73366: LD_INT 4
73368: PPUSH
73369: CALL_OW 273
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_VAR 0 7
73382: PPUSH
73383: LD_INT 2
73385: PPUSH
73386: LD_INT 4
73388: PPUSH
73389: CALL_OW 272
73393: PUSH
73394: LD_VAR 0 8
73398: PPUSH
73399: LD_INT 2
73401: PPUSH
73402: LD_INT 4
73404: PPUSH
73405: CALL_OW 273
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_VAR 0 7
73418: PPUSH
73419: LD_INT 3
73421: PPUSH
73422: LD_INT 4
73424: PPUSH
73425: CALL_OW 272
73429: PUSH
73430: LD_VAR 0 8
73434: PPUSH
73435: LD_INT 3
73437: PPUSH
73438: LD_INT 4
73440: PPUSH
73441: CALL_OW 273
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_VAR 0 7
73454: PPUSH
73455: LD_INT 4
73457: PPUSH
73458: LD_INT 4
73460: PPUSH
73461: CALL_OW 272
73465: PUSH
73466: LD_VAR 0 8
73470: PPUSH
73471: LD_INT 4
73473: PPUSH
73474: LD_INT 4
73476: PPUSH
73477: CALL_OW 273
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_VAR 0 7
73490: PPUSH
73491: LD_INT 5
73493: PPUSH
73494: LD_INT 4
73496: PPUSH
73497: CALL_OW 272
73501: PUSH
73502: LD_VAR 0 8
73506: PPUSH
73507: LD_INT 5
73509: PPUSH
73510: LD_INT 4
73512: PPUSH
73513: CALL_OW 273
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: ST_TO_ADDR
// for i = tmp downto 1 do
73530: LD_ADDR_VAR 0 4
73534: PUSH
73535: DOUBLE
73536: LD_VAR 0 6
73540: INC
73541: ST_TO_ADDR
73542: LD_INT 1
73544: PUSH
73545: FOR_DOWNTO
73546: IFFALSE 73649
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73548: LD_VAR 0 6
73552: PUSH
73553: LD_VAR 0 4
73557: ARRAY
73558: PUSH
73559: LD_INT 1
73561: ARRAY
73562: PPUSH
73563: LD_VAR 0 6
73567: PUSH
73568: LD_VAR 0 4
73572: ARRAY
73573: PUSH
73574: LD_INT 2
73576: ARRAY
73577: PPUSH
73578: CALL_OW 488
73582: NOT
73583: IFTRUE 73625
73585: PUSH
73586: LD_VAR 0 6
73590: PUSH
73591: LD_VAR 0 4
73595: ARRAY
73596: PUSH
73597: LD_INT 1
73599: ARRAY
73600: PPUSH
73601: LD_VAR 0 6
73605: PUSH
73606: LD_VAR 0 4
73610: ARRAY
73611: PUSH
73612: LD_INT 2
73614: ARRAY
73615: PPUSH
73616: CALL_OW 428
73620: PUSH
73621: LD_INT 0
73623: NONEQUAL
73624: OR
73625: IFFALSE 73647
// tmp := Delete ( tmp , i ) ;
73627: LD_ADDR_VAR 0 6
73631: PUSH
73632: LD_VAR 0 6
73636: PPUSH
73637: LD_VAR 0 4
73641: PPUSH
73642: CALL_OW 3
73646: ST_TO_ADDR
73647: GO 73545
73649: POP
73650: POP
// j := GetClosestHex ( unit , tmp ) ;
73651: LD_ADDR_VAR 0 5
73655: PUSH
73656: LD_VAR 0 1
73660: PPUSH
73661: LD_VAR 0 6
73665: PPUSH
73666: CALL 72943 0 2
73670: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73671: LD_VAR 0 1
73675: PPUSH
73676: LD_VAR 0 5
73680: PUSH
73681: LD_INT 1
73683: ARRAY
73684: PPUSH
73685: LD_VAR 0 5
73689: PUSH
73690: LD_INT 2
73692: ARRAY
73693: PPUSH
73694: CALL_OW 111
// end ;
73698: LD_VAR 0 3
73702: RET
// export function PrepareApemanSoldier ( ) ; begin
73703: LD_INT 0
73705: PPUSH
// uc_nation := 0 ;
73706: LD_ADDR_OWVAR 21
73710: PUSH
73711: LD_INT 0
73713: ST_TO_ADDR
// hc_sex := sex_male ;
73714: LD_ADDR_OWVAR 27
73718: PUSH
73719: LD_INT 1
73721: ST_TO_ADDR
// hc_name :=  ;
73722: LD_ADDR_OWVAR 26
73726: PUSH
73727: LD_STRING 
73729: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73730: LD_ADDR_OWVAR 28
73734: PUSH
73735: LD_INT 15
73737: ST_TO_ADDR
// hc_gallery :=  ;
73738: LD_ADDR_OWVAR 33
73742: PUSH
73743: LD_STRING 
73745: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73746: LD_ADDR_OWVAR 31
73750: PUSH
73751: LD_INT 0
73753: PPUSH
73754: LD_INT 3
73756: PPUSH
73757: CALL_OW 12
73761: PUSH
73762: LD_INT 0
73764: PPUSH
73765: LD_INT 3
73767: PPUSH
73768: CALL_OW 12
73772: PUSH
73773: LD_INT 0
73775: PUSH
73776: LD_INT 0
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73785: LD_ADDR_OWVAR 29
73789: PUSH
73790: LD_INT 12
73792: PUSH
73793: LD_INT 12
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: ST_TO_ADDR
// end ;
73800: LD_VAR 0 1
73804: RET
// export function PrepareApemanEngineer ( ) ; begin
73805: LD_INT 0
73807: PPUSH
// uc_nation := 0 ;
73808: LD_ADDR_OWVAR 21
73812: PUSH
73813: LD_INT 0
73815: ST_TO_ADDR
// hc_sex := sex_male ;
73816: LD_ADDR_OWVAR 27
73820: PUSH
73821: LD_INT 1
73823: ST_TO_ADDR
// hc_name :=  ;
73824: LD_ADDR_OWVAR 26
73828: PUSH
73829: LD_STRING 
73831: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73832: LD_ADDR_OWVAR 28
73836: PUSH
73837: LD_INT 16
73839: ST_TO_ADDR
// hc_gallery :=  ;
73840: LD_ADDR_OWVAR 33
73844: PUSH
73845: LD_STRING 
73847: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73848: LD_ADDR_OWVAR 31
73852: PUSH
73853: LD_INT 0
73855: PPUSH
73856: LD_INT 3
73858: PPUSH
73859: CALL_OW 12
73863: PUSH
73864: LD_INT 0
73866: PPUSH
73867: LD_INT 3
73869: PPUSH
73870: CALL_OW 12
73874: PUSH
73875: LD_INT 0
73877: PUSH
73878: LD_INT 0
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73887: LD_ADDR_OWVAR 29
73891: PUSH
73892: LD_INT 12
73894: PUSH
73895: LD_INT 12
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: ST_TO_ADDR
// end ;
73902: LD_VAR 0 1
73906: RET
// export function PrepareApeman ( agressivity ) ; begin
73907: LD_INT 0
73909: PPUSH
// uc_side := 0 ;
73910: LD_ADDR_OWVAR 20
73914: PUSH
73915: LD_INT 0
73917: ST_TO_ADDR
// uc_nation := 0 ;
73918: LD_ADDR_OWVAR 21
73922: PUSH
73923: LD_INT 0
73925: ST_TO_ADDR
// hc_sex := sex_male ;
73926: LD_ADDR_OWVAR 27
73930: PUSH
73931: LD_INT 1
73933: ST_TO_ADDR
// hc_class := class_apeman ;
73934: LD_ADDR_OWVAR 28
73938: PUSH
73939: LD_INT 12
73941: ST_TO_ADDR
// hc_gallery :=  ;
73942: LD_ADDR_OWVAR 33
73946: PUSH
73947: LD_STRING 
73949: ST_TO_ADDR
// hc_name :=  ;
73950: LD_ADDR_OWVAR 26
73954: PUSH
73955: LD_STRING 
73957: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73958: LD_ADDR_OWVAR 29
73962: PUSH
73963: LD_INT 12
73965: PUSH
73966: LD_INT 12
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: ST_TO_ADDR
// if agressivity = 0 then
73973: LD_VAR 0 1
73977: PUSH
73978: LD_INT 0
73980: EQUAL
73981: IFFALSE 73993
// hc_agressivity := 0 else
73983: LD_ADDR_OWVAR 35
73987: PUSH
73988: LD_INT 0
73990: ST_TO_ADDR
73991: GO 74014
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73993: LD_ADDR_OWVAR 35
73997: PUSH
73998: LD_VAR 0 1
74002: NEG
74003: PPUSH
74004: LD_VAR 0 1
74008: PPUSH
74009: CALL_OW 12
74013: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74014: LD_ADDR_OWVAR 31
74018: PUSH
74019: LD_INT 0
74021: PPUSH
74022: LD_INT 3
74024: PPUSH
74025: CALL_OW 12
74029: PUSH
74030: LD_INT 0
74032: PPUSH
74033: LD_INT 3
74035: PPUSH
74036: CALL_OW 12
74040: PUSH
74041: LD_INT 0
74043: PUSH
74044: LD_INT 0
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: LIST
74051: LIST
74052: ST_TO_ADDR
// end ;
74053: LD_VAR 0 2
74057: RET
// export function PrepareTiger ( agressivity ) ; begin
74058: LD_INT 0
74060: PPUSH
// uc_side := 0 ;
74061: LD_ADDR_OWVAR 20
74065: PUSH
74066: LD_INT 0
74068: ST_TO_ADDR
// uc_nation := 0 ;
74069: LD_ADDR_OWVAR 21
74073: PUSH
74074: LD_INT 0
74076: ST_TO_ADDR
// InitHc ;
74077: CALL_OW 19
// hc_class := class_tiger ;
74081: LD_ADDR_OWVAR 28
74085: PUSH
74086: LD_INT 14
74088: ST_TO_ADDR
// hc_gallery :=  ;
74089: LD_ADDR_OWVAR 33
74093: PUSH
74094: LD_STRING 
74096: ST_TO_ADDR
// hc_name :=  ;
74097: LD_ADDR_OWVAR 26
74101: PUSH
74102: LD_STRING 
74104: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74105: LD_ADDR_OWVAR 35
74109: PUSH
74110: LD_VAR 0 1
74114: NEG
74115: PPUSH
74116: LD_VAR 0 1
74120: PPUSH
74121: CALL_OW 12
74125: ST_TO_ADDR
// end ;
74126: LD_VAR 0 2
74130: RET
// export function PrepareEnchidna ( ) ; begin
74131: LD_INT 0
74133: PPUSH
// uc_side := 0 ;
74134: LD_ADDR_OWVAR 20
74138: PUSH
74139: LD_INT 0
74141: ST_TO_ADDR
// uc_nation := 0 ;
74142: LD_ADDR_OWVAR 21
74146: PUSH
74147: LD_INT 0
74149: ST_TO_ADDR
// InitHc ;
74150: CALL_OW 19
// hc_class := class_baggie ;
74154: LD_ADDR_OWVAR 28
74158: PUSH
74159: LD_INT 13
74161: ST_TO_ADDR
// hc_gallery :=  ;
74162: LD_ADDR_OWVAR 33
74166: PUSH
74167: LD_STRING 
74169: ST_TO_ADDR
// hc_name :=  ;
74170: LD_ADDR_OWVAR 26
74174: PUSH
74175: LD_STRING 
74177: ST_TO_ADDR
// end ;
74178: LD_VAR 0 1
74182: RET
// export function PrepareFrog ( ) ; begin
74183: LD_INT 0
74185: PPUSH
// uc_side := 0 ;
74186: LD_ADDR_OWVAR 20
74190: PUSH
74191: LD_INT 0
74193: ST_TO_ADDR
// uc_nation := 0 ;
74194: LD_ADDR_OWVAR 21
74198: PUSH
74199: LD_INT 0
74201: ST_TO_ADDR
// InitHc ;
74202: CALL_OW 19
// hc_class := class_frog ;
74206: LD_ADDR_OWVAR 28
74210: PUSH
74211: LD_INT 19
74213: ST_TO_ADDR
// hc_gallery :=  ;
74214: LD_ADDR_OWVAR 33
74218: PUSH
74219: LD_STRING 
74221: ST_TO_ADDR
// hc_name :=  ;
74222: LD_ADDR_OWVAR 26
74226: PUSH
74227: LD_STRING 
74229: ST_TO_ADDR
// end ;
74230: LD_VAR 0 1
74234: RET
// export function PrepareFish ( ) ; begin
74235: LD_INT 0
74237: PPUSH
// uc_side := 0 ;
74238: LD_ADDR_OWVAR 20
74242: PUSH
74243: LD_INT 0
74245: ST_TO_ADDR
// uc_nation := 0 ;
74246: LD_ADDR_OWVAR 21
74250: PUSH
74251: LD_INT 0
74253: ST_TO_ADDR
// InitHc ;
74254: CALL_OW 19
// hc_class := class_fish ;
74258: LD_ADDR_OWVAR 28
74262: PUSH
74263: LD_INT 20
74265: ST_TO_ADDR
// hc_gallery :=  ;
74266: LD_ADDR_OWVAR 33
74270: PUSH
74271: LD_STRING 
74273: ST_TO_ADDR
// hc_name :=  ;
74274: LD_ADDR_OWVAR 26
74278: PUSH
74279: LD_STRING 
74281: ST_TO_ADDR
// end ;
74282: LD_VAR 0 1
74286: RET
// export function PrepareBird ( ) ; begin
74287: LD_INT 0
74289: PPUSH
// uc_side := 0 ;
74290: LD_ADDR_OWVAR 20
74294: PUSH
74295: LD_INT 0
74297: ST_TO_ADDR
// uc_nation := 0 ;
74298: LD_ADDR_OWVAR 21
74302: PUSH
74303: LD_INT 0
74305: ST_TO_ADDR
// InitHc ;
74306: CALL_OW 19
// hc_class := class_phororhacos ;
74310: LD_ADDR_OWVAR 28
74314: PUSH
74315: LD_INT 18
74317: ST_TO_ADDR
// hc_gallery :=  ;
74318: LD_ADDR_OWVAR 33
74322: PUSH
74323: LD_STRING 
74325: ST_TO_ADDR
// hc_name :=  ;
74326: LD_ADDR_OWVAR 26
74330: PUSH
74331: LD_STRING 
74333: ST_TO_ADDR
// end ;
74334: LD_VAR 0 1
74338: RET
// export function PrepareHorse ( ) ; begin
74339: LD_INT 0
74341: PPUSH
// uc_side := 0 ;
74342: LD_ADDR_OWVAR 20
74346: PUSH
74347: LD_INT 0
74349: ST_TO_ADDR
// uc_nation := 0 ;
74350: LD_ADDR_OWVAR 21
74354: PUSH
74355: LD_INT 0
74357: ST_TO_ADDR
// InitHc ;
74358: CALL_OW 19
// hc_class := class_horse ;
74362: LD_ADDR_OWVAR 28
74366: PUSH
74367: LD_INT 21
74369: ST_TO_ADDR
// hc_gallery :=  ;
74370: LD_ADDR_OWVAR 33
74374: PUSH
74375: LD_STRING 
74377: ST_TO_ADDR
// hc_name :=  ;
74378: LD_ADDR_OWVAR 26
74382: PUSH
74383: LD_STRING 
74385: ST_TO_ADDR
// end ;
74386: LD_VAR 0 1
74390: RET
// export function PrepareMastodont ( ) ; begin
74391: LD_INT 0
74393: PPUSH
// uc_side := 0 ;
74394: LD_ADDR_OWVAR 20
74398: PUSH
74399: LD_INT 0
74401: ST_TO_ADDR
// uc_nation := 0 ;
74402: LD_ADDR_OWVAR 21
74406: PUSH
74407: LD_INT 0
74409: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74410: LD_ADDR_OWVAR 37
74414: PUSH
74415: LD_INT 31
74417: ST_TO_ADDR
// vc_control := control_rider ;
74418: LD_ADDR_OWVAR 38
74422: PUSH
74423: LD_INT 4
74425: ST_TO_ADDR
// end ;
74426: LD_VAR 0 1
74430: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74431: LD_INT 0
74433: PPUSH
74434: PPUSH
74435: PPUSH
// uc_side = 0 ;
74436: LD_ADDR_OWVAR 20
74440: PUSH
74441: LD_INT 0
74443: ST_TO_ADDR
// uc_nation = 0 ;
74444: LD_ADDR_OWVAR 21
74448: PUSH
74449: LD_INT 0
74451: ST_TO_ADDR
// InitHc_All ( ) ;
74452: CALL_OW 584
// InitVc ;
74456: CALL_OW 20
// if mastodonts then
74460: LD_VAR 0 6
74464: IFFALSE 74531
// for i = 1 to mastodonts do
74466: LD_ADDR_VAR 0 11
74470: PUSH
74471: DOUBLE
74472: LD_INT 1
74474: DEC
74475: ST_TO_ADDR
74476: LD_VAR 0 6
74480: PUSH
74481: FOR_TO
74482: IFFALSE 74529
// begin vc_chassis := 31 ;
74484: LD_ADDR_OWVAR 37
74488: PUSH
74489: LD_INT 31
74491: ST_TO_ADDR
// vc_control := control_rider ;
74492: LD_ADDR_OWVAR 38
74496: PUSH
74497: LD_INT 4
74499: ST_TO_ADDR
// animal := CreateVehicle ;
74500: LD_ADDR_VAR 0 12
74504: PUSH
74505: CALL_OW 45
74509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74510: LD_VAR 0 12
74514: PPUSH
74515: LD_VAR 0 8
74519: PPUSH
74520: LD_INT 0
74522: PPUSH
74523: CALL 76673 0 3
// end ;
74527: GO 74481
74529: POP
74530: POP
// if horses then
74531: LD_VAR 0 5
74535: IFFALSE 74602
// for i = 1 to horses do
74537: LD_ADDR_VAR 0 11
74541: PUSH
74542: DOUBLE
74543: LD_INT 1
74545: DEC
74546: ST_TO_ADDR
74547: LD_VAR 0 5
74551: PUSH
74552: FOR_TO
74553: IFFALSE 74600
// begin hc_class := 21 ;
74555: LD_ADDR_OWVAR 28
74559: PUSH
74560: LD_INT 21
74562: ST_TO_ADDR
// hc_gallery :=  ;
74563: LD_ADDR_OWVAR 33
74567: PUSH
74568: LD_STRING 
74570: ST_TO_ADDR
// animal := CreateHuman ;
74571: LD_ADDR_VAR 0 12
74575: PUSH
74576: CALL_OW 44
74580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74581: LD_VAR 0 12
74585: PPUSH
74586: LD_VAR 0 8
74590: PPUSH
74591: LD_INT 0
74593: PPUSH
74594: CALL 76673 0 3
// end ;
74598: GO 74552
74600: POP
74601: POP
// if birds then
74602: LD_VAR 0 1
74606: IFFALSE 74673
// for i = 1 to birds do
74608: LD_ADDR_VAR 0 11
74612: PUSH
74613: DOUBLE
74614: LD_INT 1
74616: DEC
74617: ST_TO_ADDR
74618: LD_VAR 0 1
74622: PUSH
74623: FOR_TO
74624: IFFALSE 74671
// begin hc_class := 18 ;
74626: LD_ADDR_OWVAR 28
74630: PUSH
74631: LD_INT 18
74633: ST_TO_ADDR
// hc_gallery =  ;
74634: LD_ADDR_OWVAR 33
74638: PUSH
74639: LD_STRING 
74641: ST_TO_ADDR
// animal := CreateHuman ;
74642: LD_ADDR_VAR 0 12
74646: PUSH
74647: CALL_OW 44
74651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74652: LD_VAR 0 12
74656: PPUSH
74657: LD_VAR 0 8
74661: PPUSH
74662: LD_INT 0
74664: PPUSH
74665: CALL 76673 0 3
// end ;
74669: GO 74623
74671: POP
74672: POP
// if tigers then
74673: LD_VAR 0 2
74677: IFFALSE 74761
// for i = 1 to tigers do
74679: LD_ADDR_VAR 0 11
74683: PUSH
74684: DOUBLE
74685: LD_INT 1
74687: DEC
74688: ST_TO_ADDR
74689: LD_VAR 0 2
74693: PUSH
74694: FOR_TO
74695: IFFALSE 74759
// begin hc_class = class_tiger ;
74697: LD_ADDR_OWVAR 28
74701: PUSH
74702: LD_INT 14
74704: ST_TO_ADDR
// hc_gallery =  ;
74705: LD_ADDR_OWVAR 33
74709: PUSH
74710: LD_STRING 
74712: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74713: LD_ADDR_OWVAR 35
74717: PUSH
74718: LD_INT 7
74720: NEG
74721: PPUSH
74722: LD_INT 7
74724: PPUSH
74725: CALL_OW 12
74729: ST_TO_ADDR
// animal := CreateHuman ;
74730: LD_ADDR_VAR 0 12
74734: PUSH
74735: CALL_OW 44
74739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74740: LD_VAR 0 12
74744: PPUSH
74745: LD_VAR 0 8
74749: PPUSH
74750: LD_INT 0
74752: PPUSH
74753: CALL 76673 0 3
// end ;
74757: GO 74694
74759: POP
74760: POP
// if apemans then
74761: LD_VAR 0 3
74765: IFFALSE 74888
// for i = 1 to apemans do
74767: LD_ADDR_VAR 0 11
74771: PUSH
74772: DOUBLE
74773: LD_INT 1
74775: DEC
74776: ST_TO_ADDR
74777: LD_VAR 0 3
74781: PUSH
74782: FOR_TO
74783: IFFALSE 74886
// begin hc_class = class_apeman ;
74785: LD_ADDR_OWVAR 28
74789: PUSH
74790: LD_INT 12
74792: ST_TO_ADDR
// hc_gallery =  ;
74793: LD_ADDR_OWVAR 33
74797: PUSH
74798: LD_STRING 
74800: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74801: LD_ADDR_OWVAR 35
74805: PUSH
74806: LD_INT 2
74808: NEG
74809: PPUSH
74810: LD_INT 2
74812: PPUSH
74813: CALL_OW 12
74817: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74818: LD_ADDR_OWVAR 31
74822: PUSH
74823: LD_INT 1
74825: PPUSH
74826: LD_INT 3
74828: PPUSH
74829: CALL_OW 12
74833: PUSH
74834: LD_INT 1
74836: PPUSH
74837: LD_INT 3
74839: PPUSH
74840: CALL_OW 12
74844: PUSH
74845: LD_INT 0
74847: PUSH
74848: LD_INT 0
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: ST_TO_ADDR
// animal := CreateHuman ;
74857: LD_ADDR_VAR 0 12
74861: PUSH
74862: CALL_OW 44
74866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74867: LD_VAR 0 12
74871: PPUSH
74872: LD_VAR 0 8
74876: PPUSH
74877: LD_INT 0
74879: PPUSH
74880: CALL 76673 0 3
// end ;
74884: GO 74782
74886: POP
74887: POP
// if enchidnas then
74888: LD_VAR 0 4
74892: IFFALSE 74959
// for i = 1 to enchidnas do
74894: LD_ADDR_VAR 0 11
74898: PUSH
74899: DOUBLE
74900: LD_INT 1
74902: DEC
74903: ST_TO_ADDR
74904: LD_VAR 0 4
74908: PUSH
74909: FOR_TO
74910: IFFALSE 74957
// begin hc_class = 13 ;
74912: LD_ADDR_OWVAR 28
74916: PUSH
74917: LD_INT 13
74919: ST_TO_ADDR
// hc_gallery =  ;
74920: LD_ADDR_OWVAR 33
74924: PUSH
74925: LD_STRING 
74927: ST_TO_ADDR
// animal := CreateHuman ;
74928: LD_ADDR_VAR 0 12
74932: PUSH
74933: CALL_OW 44
74937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74938: LD_VAR 0 12
74942: PPUSH
74943: LD_VAR 0 8
74947: PPUSH
74948: LD_INT 0
74950: PPUSH
74951: CALL 76673 0 3
// end ;
74955: GO 74909
74957: POP
74958: POP
// if fishes then
74959: LD_VAR 0 7
74963: IFFALSE 75030
// for i = 1 to fishes do
74965: LD_ADDR_VAR 0 11
74969: PUSH
74970: DOUBLE
74971: LD_INT 1
74973: DEC
74974: ST_TO_ADDR
74975: LD_VAR 0 7
74979: PUSH
74980: FOR_TO
74981: IFFALSE 75028
// begin hc_class = 20 ;
74983: LD_ADDR_OWVAR 28
74987: PUSH
74988: LD_INT 20
74990: ST_TO_ADDR
// hc_gallery =  ;
74991: LD_ADDR_OWVAR 33
74995: PUSH
74996: LD_STRING 
74998: ST_TO_ADDR
// animal := CreateHuman ;
74999: LD_ADDR_VAR 0 12
75003: PUSH
75004: CALL_OW 44
75008: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75009: LD_VAR 0 12
75013: PPUSH
75014: LD_VAR 0 9
75018: PPUSH
75019: LD_INT 0
75021: PPUSH
75022: CALL 76673 0 3
// end ;
75026: GO 74980
75028: POP
75029: POP
// end ;
75030: LD_VAR 0 10
75034: RET
// export function WantHeal ( sci , unit ) ; begin
75035: LD_INT 0
75037: PPUSH
// if GetTaskList ( sci ) > 0 then
75038: LD_VAR 0 1
75042: PPUSH
75043: CALL_OW 437
75047: PUSH
75048: LD_INT 0
75050: GREATER
75051: IFFALSE 75123
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75053: LD_VAR 0 1
75057: PPUSH
75058: CALL_OW 437
75062: PUSH
75063: LD_INT 1
75065: ARRAY
75066: PUSH
75067: LD_INT 1
75069: ARRAY
75070: PUSH
75071: LD_STRING l
75073: EQUAL
75074: IFFALSE 75101
75076: PUSH
75077: LD_VAR 0 1
75081: PPUSH
75082: CALL_OW 437
75086: PUSH
75087: LD_INT 1
75089: ARRAY
75090: PUSH
75091: LD_INT 4
75093: ARRAY
75094: PUSH
75095: LD_VAR 0 2
75099: EQUAL
75100: AND
75101: IFFALSE 75113
// result := true else
75103: LD_ADDR_VAR 0 3
75107: PUSH
75108: LD_INT 1
75110: ST_TO_ADDR
75111: GO 75121
// result := false ;
75113: LD_ADDR_VAR 0 3
75117: PUSH
75118: LD_INT 0
75120: ST_TO_ADDR
// end else
75121: GO 75131
// result := false ;
75123: LD_ADDR_VAR 0 3
75127: PUSH
75128: LD_INT 0
75130: ST_TO_ADDR
// end ;
75131: LD_VAR 0 3
75135: RET
// export function HealTarget ( sci ) ; begin
75136: LD_INT 0
75138: PPUSH
// if not sci then
75139: LD_VAR 0 1
75143: NOT
75144: IFFALSE 75148
// exit ;
75146: GO 75213
// result := 0 ;
75148: LD_ADDR_VAR 0 2
75152: PUSH
75153: LD_INT 0
75155: ST_TO_ADDR
// if GetTaskList ( sci ) then
75156: LD_VAR 0 1
75160: PPUSH
75161: CALL_OW 437
75165: IFFALSE 75213
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75167: LD_VAR 0 1
75171: PPUSH
75172: CALL_OW 437
75176: PUSH
75177: LD_INT 1
75179: ARRAY
75180: PUSH
75181: LD_INT 1
75183: ARRAY
75184: PUSH
75185: LD_STRING l
75187: EQUAL
75188: IFFALSE 75213
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75190: LD_ADDR_VAR 0 2
75194: PUSH
75195: LD_VAR 0 1
75199: PPUSH
75200: CALL_OW 437
75204: PUSH
75205: LD_INT 1
75207: ARRAY
75208: PUSH
75209: LD_INT 4
75211: ARRAY
75212: ST_TO_ADDR
// end ;
75213: LD_VAR 0 2
75217: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75218: LD_INT 0
75220: PPUSH
75221: PPUSH
75222: PPUSH
75223: PPUSH
// if not base_units then
75224: LD_VAR 0 1
75228: NOT
75229: IFFALSE 75233
// exit ;
75231: GO 75320
// result := false ;
75233: LD_ADDR_VAR 0 2
75237: PUSH
75238: LD_INT 0
75240: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75241: LD_ADDR_VAR 0 5
75245: PUSH
75246: LD_VAR 0 1
75250: PPUSH
75251: LD_INT 21
75253: PUSH
75254: LD_INT 3
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PPUSH
75261: CALL_OW 72
75265: ST_TO_ADDR
// if not tmp then
75266: LD_VAR 0 5
75270: NOT
75271: IFFALSE 75275
// exit ;
75273: GO 75320
// for i in tmp do
75275: LD_ADDR_VAR 0 3
75279: PUSH
75280: LD_VAR 0 5
75284: PUSH
75285: FOR_IN
75286: IFFALSE 75318
// begin result := EnemyInRange ( i , 22 ) ;
75288: LD_ADDR_VAR 0 2
75292: PUSH
75293: LD_VAR 0 3
75297: PPUSH
75298: LD_INT 22
75300: PPUSH
75301: CALL 72745 0 2
75305: ST_TO_ADDR
// if result then
75306: LD_VAR 0 2
75310: IFFALSE 75316
// exit ;
75312: POP
75313: POP
75314: GO 75320
// end ;
75316: GO 75285
75318: POP
75319: POP
// end ;
75320: LD_VAR 0 2
75324: RET
// export function FilterByTag ( units , tag ) ; begin
75325: LD_INT 0
75327: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75328: LD_ADDR_VAR 0 3
75332: PUSH
75333: LD_VAR 0 1
75337: PPUSH
75338: LD_INT 120
75340: PUSH
75341: LD_VAR 0 2
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: PPUSH
75350: CALL_OW 72
75354: ST_TO_ADDR
// end ;
75355: LD_VAR 0 3
75359: RET
// export function IsDriver ( un ) ; begin
75360: LD_INT 0
75362: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75363: LD_ADDR_VAR 0 2
75367: PUSH
75368: LD_VAR 0 1
75372: PUSH
75373: LD_INT 55
75375: PUSH
75376: EMPTY
75377: LIST
75378: PPUSH
75379: CALL_OW 69
75383: IN
75384: ST_TO_ADDR
// end ;
75385: LD_VAR 0 2
75389: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75390: LD_INT 0
75392: PPUSH
75393: PPUSH
// list := [ ] ;
75394: LD_ADDR_VAR 0 5
75398: PUSH
75399: EMPTY
75400: ST_TO_ADDR
// case d of 0 :
75401: LD_VAR 0 3
75405: PUSH
75406: LD_INT 0
75408: DOUBLE
75409: EQUAL
75410: IFTRUE 75414
75412: GO 75547
75414: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75415: LD_ADDR_VAR 0 5
75419: PUSH
75420: LD_VAR 0 1
75424: PUSH
75425: LD_INT 4
75427: MINUS
75428: PUSH
75429: LD_VAR 0 2
75433: PUSH
75434: LD_INT 4
75436: MINUS
75437: PUSH
75438: LD_INT 2
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: LIST
75445: PUSH
75446: LD_VAR 0 1
75450: PUSH
75451: LD_INT 3
75453: MINUS
75454: PUSH
75455: LD_VAR 0 2
75459: PUSH
75460: LD_INT 1
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: LIST
75467: PUSH
75468: LD_VAR 0 1
75472: PUSH
75473: LD_INT 4
75475: PLUS
75476: PUSH
75477: LD_VAR 0 2
75481: PUSH
75482: LD_INT 4
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: LIST
75489: PUSH
75490: LD_VAR 0 1
75494: PUSH
75495: LD_INT 3
75497: PLUS
75498: PUSH
75499: LD_VAR 0 2
75503: PUSH
75504: LD_INT 3
75506: PLUS
75507: PUSH
75508: LD_INT 5
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: LIST
75515: PUSH
75516: LD_VAR 0 1
75520: PUSH
75521: LD_VAR 0 2
75525: PUSH
75526: LD_INT 4
75528: PLUS
75529: PUSH
75530: LD_INT 0
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: LIST
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: ST_TO_ADDR
// end ; 1 :
75545: GO 76245
75547: LD_INT 1
75549: DOUBLE
75550: EQUAL
75551: IFTRUE 75555
75553: GO 75688
75555: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75556: LD_ADDR_VAR 0 5
75560: PUSH
75561: LD_VAR 0 1
75565: PUSH
75566: LD_VAR 0 2
75570: PUSH
75571: LD_INT 4
75573: MINUS
75574: PUSH
75575: LD_INT 3
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: LIST
75582: PUSH
75583: LD_VAR 0 1
75587: PUSH
75588: LD_INT 3
75590: MINUS
75591: PUSH
75592: LD_VAR 0 2
75596: PUSH
75597: LD_INT 3
75599: MINUS
75600: PUSH
75601: LD_INT 2
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: LIST
75608: PUSH
75609: LD_VAR 0 1
75613: PUSH
75614: LD_INT 4
75616: MINUS
75617: PUSH
75618: LD_VAR 0 2
75622: PUSH
75623: LD_INT 1
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: LIST
75630: PUSH
75631: LD_VAR 0 1
75635: PUSH
75636: LD_VAR 0 2
75640: PUSH
75641: LD_INT 3
75643: PLUS
75644: PUSH
75645: LD_INT 0
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: LIST
75652: PUSH
75653: LD_VAR 0 1
75657: PUSH
75658: LD_INT 4
75660: PLUS
75661: PUSH
75662: LD_VAR 0 2
75666: PUSH
75667: LD_INT 4
75669: PLUS
75670: PUSH
75671: LD_INT 5
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: LIST
75678: PUSH
75679: EMPTY
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: ST_TO_ADDR
// end ; 2 :
75686: GO 76245
75688: LD_INT 2
75690: DOUBLE
75691: EQUAL
75692: IFTRUE 75696
75694: GO 75825
75696: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75697: LD_ADDR_VAR 0 5
75701: PUSH
75702: LD_VAR 0 1
75706: PUSH
75707: LD_VAR 0 2
75711: PUSH
75712: LD_INT 3
75714: MINUS
75715: PUSH
75716: LD_INT 3
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: LIST
75723: PUSH
75724: LD_VAR 0 1
75728: PUSH
75729: LD_INT 4
75731: PLUS
75732: PUSH
75733: LD_VAR 0 2
75737: PUSH
75738: LD_INT 4
75740: PUSH
75741: EMPTY
75742: LIST
75743: LIST
75744: LIST
75745: PUSH
75746: LD_VAR 0 1
75750: PUSH
75751: LD_VAR 0 2
75755: PUSH
75756: LD_INT 4
75758: PLUS
75759: PUSH
75760: LD_INT 0
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: LIST
75767: PUSH
75768: LD_VAR 0 1
75772: PUSH
75773: LD_INT 3
75775: MINUS
75776: PUSH
75777: LD_VAR 0 2
75781: PUSH
75782: LD_INT 1
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: LIST
75789: PUSH
75790: LD_VAR 0 1
75794: PUSH
75795: LD_INT 4
75797: MINUS
75798: PUSH
75799: LD_VAR 0 2
75803: PUSH
75804: LD_INT 4
75806: MINUS
75807: PUSH
75808: LD_INT 2
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: LIST
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: ST_TO_ADDR
// end ; 3 :
75823: GO 76245
75825: LD_INT 3
75827: DOUBLE
75828: EQUAL
75829: IFTRUE 75833
75831: GO 75966
75833: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75834: LD_ADDR_VAR 0 5
75838: PUSH
75839: LD_VAR 0 1
75843: PUSH
75844: LD_INT 3
75846: PLUS
75847: PUSH
75848: LD_VAR 0 2
75852: PUSH
75853: LD_INT 4
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: LIST
75860: PUSH
75861: LD_VAR 0 1
75865: PUSH
75866: LD_INT 4
75868: PLUS
75869: PUSH
75870: LD_VAR 0 2
75874: PUSH
75875: LD_INT 4
75877: PLUS
75878: PUSH
75879: LD_INT 5
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: LIST
75886: PUSH
75887: LD_VAR 0 1
75891: PUSH
75892: LD_INT 4
75894: MINUS
75895: PUSH
75896: LD_VAR 0 2
75900: PUSH
75901: LD_INT 1
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: LIST
75908: PUSH
75909: LD_VAR 0 1
75913: PUSH
75914: LD_VAR 0 2
75918: PUSH
75919: LD_INT 4
75921: MINUS
75922: PUSH
75923: LD_INT 3
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: LIST
75930: PUSH
75931: LD_VAR 0 1
75935: PUSH
75936: LD_INT 3
75938: MINUS
75939: PUSH
75940: LD_VAR 0 2
75944: PUSH
75945: LD_INT 3
75947: MINUS
75948: PUSH
75949: LD_INT 2
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: LIST
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: ST_TO_ADDR
// end ; 4 :
75964: GO 76245
75966: LD_INT 4
75968: DOUBLE
75969: EQUAL
75970: IFTRUE 75974
75972: GO 76107
75974: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75975: LD_ADDR_VAR 0 5
75979: PUSH
75980: LD_VAR 0 1
75984: PUSH
75985: LD_VAR 0 2
75989: PUSH
75990: LD_INT 4
75992: PLUS
75993: PUSH
75994: LD_INT 0
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: LIST
76001: PUSH
76002: LD_VAR 0 1
76006: PUSH
76007: LD_INT 3
76009: PLUS
76010: PUSH
76011: LD_VAR 0 2
76015: PUSH
76016: LD_INT 3
76018: PLUS
76019: PUSH
76020: LD_INT 5
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: LIST
76027: PUSH
76028: LD_VAR 0 1
76032: PUSH
76033: LD_INT 4
76035: PLUS
76036: PUSH
76037: LD_VAR 0 2
76041: PUSH
76042: LD_INT 4
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: LIST
76049: PUSH
76050: LD_VAR 0 1
76054: PUSH
76055: LD_VAR 0 2
76059: PUSH
76060: LD_INT 3
76062: MINUS
76063: PUSH
76064: LD_INT 3
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: LIST
76071: PUSH
76072: LD_VAR 0 1
76076: PUSH
76077: LD_INT 4
76079: MINUS
76080: PUSH
76081: LD_VAR 0 2
76085: PUSH
76086: LD_INT 4
76088: MINUS
76089: PUSH
76090: LD_INT 2
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: LIST
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: ST_TO_ADDR
// end ; 5 :
76105: GO 76245
76107: LD_INT 5
76109: DOUBLE
76110: EQUAL
76111: IFTRUE 76115
76113: GO 76244
76115: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76116: LD_ADDR_VAR 0 5
76120: PUSH
76121: LD_VAR 0 1
76125: PUSH
76126: LD_INT 4
76128: MINUS
76129: PUSH
76130: LD_VAR 0 2
76134: PUSH
76135: LD_INT 1
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: LIST
76142: PUSH
76143: LD_VAR 0 1
76147: PUSH
76148: LD_VAR 0 2
76152: PUSH
76153: LD_INT 4
76155: MINUS
76156: PUSH
76157: LD_INT 3
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: LIST
76164: PUSH
76165: LD_VAR 0 1
76169: PUSH
76170: LD_INT 4
76172: PLUS
76173: PUSH
76174: LD_VAR 0 2
76178: PUSH
76179: LD_INT 4
76181: PLUS
76182: PUSH
76183: LD_INT 5
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: PUSH
76191: LD_VAR 0 1
76195: PUSH
76196: LD_INT 3
76198: PLUS
76199: PUSH
76200: LD_VAR 0 2
76204: PUSH
76205: LD_INT 4
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: LIST
76212: PUSH
76213: LD_VAR 0 1
76217: PUSH
76218: LD_VAR 0 2
76222: PUSH
76223: LD_INT 3
76225: PLUS
76226: PUSH
76227: LD_INT 0
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: LIST
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: ST_TO_ADDR
// end ; end ;
76242: GO 76245
76244: POP
// result := list ;
76245: LD_ADDR_VAR 0 4
76249: PUSH
76250: LD_VAR 0 5
76254: ST_TO_ADDR
// end ;
76255: LD_VAR 0 4
76259: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76260: LD_INT 0
76262: PPUSH
76263: PPUSH
76264: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76265: LD_VAR 0 1
76269: NOT
76270: IFTRUE 76298
76272: PUSH
76273: LD_VAR 0 2
76277: PUSH
76278: LD_INT 1
76280: PUSH
76281: LD_INT 2
76283: PUSH
76284: LD_INT 3
76286: PUSH
76287: LD_INT 4
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: IN
76296: NOT
76297: OR
76298: IFFALSE 76302
// exit ;
76300: GO 76385
// tmp := [ ] ;
76302: LD_ADDR_VAR 0 5
76306: PUSH
76307: EMPTY
76308: ST_TO_ADDR
// for i in units do
76309: LD_ADDR_VAR 0 4
76313: PUSH
76314: LD_VAR 0 1
76318: PUSH
76319: FOR_IN
76320: IFFALSE 76354
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76322: LD_ADDR_VAR 0 5
76326: PUSH
76327: LD_VAR 0 5
76331: PPUSH
76332: LD_VAR 0 4
76336: PPUSH
76337: LD_VAR 0 2
76341: PPUSH
76342: CALL_OW 259
76346: PPUSH
76347: CALL 77780 0 2
76351: ST_TO_ADDR
76352: GO 76319
76354: POP
76355: POP
// if not tmp then
76356: LD_VAR 0 5
76360: NOT
76361: IFFALSE 76365
// exit ;
76363: GO 76385
// result := SortListByListDesc ( units , tmp ) ;
76365: LD_ADDR_VAR 0 3
76369: PUSH
76370: LD_VAR 0 1
76374: PPUSH
76375: LD_VAR 0 5
76379: PPUSH
76380: CALL_OW 77
76384: ST_TO_ADDR
// end ;
76385: LD_VAR 0 3
76389: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76390: LD_INT 0
76392: PPUSH
76393: PPUSH
76394: PPUSH
// result := false ;
76395: LD_ADDR_VAR 0 3
76399: PUSH
76400: LD_INT 0
76402: ST_TO_ADDR
// if not building then
76403: LD_VAR 0 2
76407: NOT
76408: IFFALSE 76412
// exit ;
76410: GO 76556
// x := GetX ( building ) ;
76412: LD_ADDR_VAR 0 4
76416: PUSH
76417: LD_VAR 0 2
76421: PPUSH
76422: CALL_OW 250
76426: ST_TO_ADDR
// y := GetY ( building ) ;
76427: LD_ADDR_VAR 0 5
76431: PUSH
76432: LD_VAR 0 2
76436: PPUSH
76437: CALL_OW 251
76441: ST_TO_ADDR
// if not x or not y then
76442: LD_VAR 0 4
76446: NOT
76447: IFTRUE 76456
76449: PUSH
76450: LD_VAR 0 5
76454: NOT
76455: OR
76456: IFFALSE 76460
// exit ;
76458: GO 76556
// if GetTaskList ( unit ) then
76460: LD_VAR 0 1
76464: PPUSH
76465: CALL_OW 437
76469: IFFALSE 76556
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76471: LD_STRING e
76473: PUSH
76474: LD_VAR 0 1
76478: PPUSH
76479: CALL_OW 437
76483: PUSH
76484: LD_INT 1
76486: ARRAY
76487: PUSH
76488: LD_INT 1
76490: ARRAY
76491: EQUAL
76492: IFFALSE 76519
76494: PUSH
76495: LD_VAR 0 4
76499: PUSH
76500: LD_VAR 0 1
76504: PPUSH
76505: CALL_OW 437
76509: PUSH
76510: LD_INT 1
76512: ARRAY
76513: PUSH
76514: LD_INT 2
76516: ARRAY
76517: EQUAL
76518: AND
76519: IFFALSE 76546
76521: PUSH
76522: LD_VAR 0 5
76526: PUSH
76527: LD_VAR 0 1
76531: PPUSH
76532: CALL_OW 437
76536: PUSH
76537: LD_INT 1
76539: ARRAY
76540: PUSH
76541: LD_INT 3
76543: ARRAY
76544: EQUAL
76545: AND
76546: IFFALSE 76556
// result := true end ;
76548: LD_ADDR_VAR 0 3
76552: PUSH
76553: LD_INT 1
76555: ST_TO_ADDR
// end ;
76556: LD_VAR 0 3
76560: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76561: LD_INT 0
76563: PPUSH
// result := false ;
76564: LD_ADDR_VAR 0 4
76568: PUSH
76569: LD_INT 0
76571: ST_TO_ADDR
// if GetTaskList ( unit ) then
76572: LD_VAR 0 1
76576: PPUSH
76577: CALL_OW 437
76581: IFFALSE 76668
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76583: LD_STRING M
76585: PUSH
76586: LD_VAR 0 1
76590: PPUSH
76591: CALL_OW 437
76595: PUSH
76596: LD_INT 1
76598: ARRAY
76599: PUSH
76600: LD_INT 1
76602: ARRAY
76603: EQUAL
76604: IFFALSE 76631
76606: PUSH
76607: LD_VAR 0 2
76611: PUSH
76612: LD_VAR 0 1
76616: PPUSH
76617: CALL_OW 437
76621: PUSH
76622: LD_INT 1
76624: ARRAY
76625: PUSH
76626: LD_INT 2
76628: ARRAY
76629: EQUAL
76630: AND
76631: IFFALSE 76658
76633: PUSH
76634: LD_VAR 0 3
76638: PUSH
76639: LD_VAR 0 1
76643: PPUSH
76644: CALL_OW 437
76648: PUSH
76649: LD_INT 1
76651: ARRAY
76652: PUSH
76653: LD_INT 3
76655: ARRAY
76656: EQUAL
76657: AND
76658: IFFALSE 76668
// result := true ;
76660: LD_ADDR_VAR 0 4
76664: PUSH
76665: LD_INT 1
76667: ST_TO_ADDR
// end ; end ;
76668: LD_VAR 0 4
76672: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76673: LD_INT 0
76675: PPUSH
76676: PPUSH
76677: PPUSH
76678: PPUSH
// if not unit or not area then
76679: LD_VAR 0 1
76683: NOT
76684: IFTRUE 76693
76686: PUSH
76687: LD_VAR 0 2
76691: NOT
76692: OR
76693: IFFALSE 76697
// exit ;
76695: GO 76873
// tmp := AreaToList ( area , i ) ;
76697: LD_ADDR_VAR 0 6
76701: PUSH
76702: LD_VAR 0 2
76706: PPUSH
76707: LD_VAR 0 5
76711: PPUSH
76712: CALL_OW 517
76716: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76717: LD_ADDR_VAR 0 5
76721: PUSH
76722: DOUBLE
76723: LD_INT 1
76725: DEC
76726: ST_TO_ADDR
76727: LD_VAR 0 6
76731: PUSH
76732: LD_INT 1
76734: ARRAY
76735: PUSH
76736: FOR_TO
76737: IFFALSE 76871
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76739: LD_ADDR_VAR 0 7
76743: PUSH
76744: LD_VAR 0 6
76748: PUSH
76749: LD_INT 1
76751: ARRAY
76752: PUSH
76753: LD_VAR 0 5
76757: ARRAY
76758: PUSH
76759: LD_VAR 0 6
76763: PUSH
76764: LD_INT 2
76766: ARRAY
76767: PUSH
76768: LD_VAR 0 5
76772: ARRAY
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76778: LD_INT 92
76780: PUSH
76781: LD_VAR 0 7
76785: PUSH
76786: LD_INT 1
76788: ARRAY
76789: PUSH
76790: LD_VAR 0 7
76794: PUSH
76795: LD_INT 2
76797: ARRAY
76798: PUSH
76799: LD_INT 2
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: PPUSH
76808: CALL_OW 69
76812: PUSH
76813: LD_INT 0
76815: EQUAL
76816: IFFALSE 76869
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76818: LD_VAR 0 1
76822: PPUSH
76823: LD_VAR 0 7
76827: PUSH
76828: LD_INT 1
76830: ARRAY
76831: PPUSH
76832: LD_VAR 0 7
76836: PUSH
76837: LD_INT 2
76839: ARRAY
76840: PPUSH
76841: LD_VAR 0 3
76845: PPUSH
76846: CALL_OW 48
// result := IsPlaced ( unit ) ;
76850: LD_ADDR_VAR 0 4
76854: PUSH
76855: LD_VAR 0 1
76859: PPUSH
76860: CALL_OW 305
76864: ST_TO_ADDR
// exit ;
76865: POP
76866: POP
76867: GO 76873
// end ; end ;
76869: GO 76736
76871: POP
76872: POP
// end ;
76873: LD_VAR 0 4
76877: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76878: LD_INT 0
76880: PPUSH
76881: PPUSH
76882: PPUSH
// if not side or side > 8 then
76883: LD_VAR 0 1
76887: NOT
76888: IFTRUE 76900
76890: PUSH
76891: LD_VAR 0 1
76895: PUSH
76896: LD_INT 8
76898: GREATER
76899: OR
76900: IFFALSE 76904
// exit ;
76902: GO 77091
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76904: LD_ADDR_VAR 0 4
76908: PUSH
76909: LD_INT 22
76911: PUSH
76912: LD_VAR 0 1
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PUSH
76921: LD_INT 21
76923: PUSH
76924: LD_INT 3
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: PUSH
76931: EMPTY
76932: LIST
76933: LIST
76934: PPUSH
76935: CALL_OW 69
76939: ST_TO_ADDR
// if not tmp then
76940: LD_VAR 0 4
76944: NOT
76945: IFFALSE 76949
// exit ;
76947: GO 77091
// enable_addtolog := true ;
76949: LD_ADDR_OWVAR 81
76953: PUSH
76954: LD_INT 1
76956: ST_TO_ADDR
// AddToLog ( [ ) ;
76957: LD_STRING [
76959: PPUSH
76960: CALL_OW 561
// for i in tmp do
76964: LD_ADDR_VAR 0 3
76968: PUSH
76969: LD_VAR 0 4
76973: PUSH
76974: FOR_IN
76975: IFFALSE 77082
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76977: LD_STRING [
76979: PUSH
76980: LD_VAR 0 3
76984: PPUSH
76985: CALL_OW 266
76989: STR
76990: PUSH
76991: LD_STRING , 
76993: STR
76994: PUSH
76995: LD_VAR 0 3
76999: PPUSH
77000: CALL_OW 250
77004: STR
77005: PUSH
77006: LD_STRING , 
77008: STR
77009: PUSH
77010: LD_VAR 0 3
77014: PPUSH
77015: CALL_OW 251
77019: STR
77020: PUSH
77021: LD_STRING , 
77023: STR
77024: PUSH
77025: LD_VAR 0 3
77029: PPUSH
77030: CALL_OW 254
77034: STR
77035: PUSH
77036: LD_STRING , 
77038: STR
77039: PUSH
77040: LD_VAR 0 3
77044: PPUSH
77045: LD_INT 1
77047: PPUSH
77048: CALL_OW 268
77052: STR
77053: PUSH
77054: LD_STRING , 
77056: STR
77057: PUSH
77058: LD_VAR 0 3
77062: PPUSH
77063: LD_INT 2
77065: PPUSH
77066: CALL_OW 268
77070: STR
77071: PUSH
77072: LD_STRING ],
77074: STR
77075: PPUSH
77076: CALL_OW 561
// end ;
77080: GO 76974
77082: POP
77083: POP
// AddToLog ( ]; ) ;
77084: LD_STRING ];
77086: PPUSH
77087: CALL_OW 561
// end ;
77091: LD_VAR 0 2
77095: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77096: LD_INT 0
77098: PPUSH
77099: PPUSH
77100: PPUSH
77101: PPUSH
77102: PPUSH
// if not area or not rate or not max then
77103: LD_VAR 0 1
77107: NOT
77108: IFTRUE 77117
77110: PUSH
77111: LD_VAR 0 2
77115: NOT
77116: OR
77117: IFTRUE 77126
77119: PUSH
77120: LD_VAR 0 4
77124: NOT
77125: OR
77126: IFFALSE 77130
// exit ;
77128: GO 77319
// while 1 do
77130: LD_INT 1
77132: IFFALSE 77319
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77134: LD_ADDR_VAR 0 9
77138: PUSH
77139: LD_VAR 0 1
77143: PPUSH
77144: LD_INT 1
77146: PPUSH
77147: CALL_OW 287
77151: PUSH
77152: LD_INT 10
77154: MUL
77155: ST_TO_ADDR
// r := rate / 10 ;
77156: LD_ADDR_VAR 0 7
77160: PUSH
77161: LD_VAR 0 2
77165: PUSH
77166: LD_INT 10
77168: DIVREAL
77169: ST_TO_ADDR
// time := 1 1$00 ;
77170: LD_ADDR_VAR 0 8
77174: PUSH
77175: LD_INT 2100
77177: ST_TO_ADDR
// if amount < min then
77178: LD_VAR 0 9
77182: PUSH
77183: LD_VAR 0 3
77187: LESS
77188: IFFALSE 77206
// r := r * 2 else
77190: LD_ADDR_VAR 0 7
77194: PUSH
77195: LD_VAR 0 7
77199: PUSH
77200: LD_INT 2
77202: MUL
77203: ST_TO_ADDR
77204: GO 77232
// if amount > max then
77206: LD_VAR 0 9
77210: PUSH
77211: LD_VAR 0 4
77215: GREATER
77216: IFFALSE 77232
// r := r / 2 ;
77218: LD_ADDR_VAR 0 7
77222: PUSH
77223: LD_VAR 0 7
77227: PUSH
77228: LD_INT 2
77230: DIVREAL
77231: ST_TO_ADDR
// time := time / r ;
77232: LD_ADDR_VAR 0 8
77236: PUSH
77237: LD_VAR 0 8
77241: PUSH
77242: LD_VAR 0 7
77246: DIVREAL
77247: ST_TO_ADDR
// if time < 0 then
77248: LD_VAR 0 8
77252: PUSH
77253: LD_INT 0
77255: LESS
77256: IFFALSE 77273
// time := time * - 1 ;
77258: LD_ADDR_VAR 0 8
77262: PUSH
77263: LD_VAR 0 8
77267: PUSH
77268: LD_INT 1
77270: NEG
77271: MUL
77272: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77273: LD_VAR 0 8
77277: PUSH
77278: LD_INT 35
77280: PPUSH
77281: LD_INT 875
77283: PPUSH
77284: CALL_OW 12
77288: PLUS
77289: PPUSH
77290: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77294: LD_INT 1
77296: PPUSH
77297: LD_INT 5
77299: PPUSH
77300: CALL_OW 12
77304: PPUSH
77305: LD_VAR 0 1
77309: PPUSH
77310: LD_INT 1
77312: PPUSH
77313: CALL_OW 55
// end ;
77317: GO 77130
// end ;
77319: LD_VAR 0 5
77323: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77324: LD_INT 0
77326: PPUSH
77327: PPUSH
77328: PPUSH
77329: PPUSH
77330: PPUSH
77331: PPUSH
77332: PPUSH
77333: PPUSH
// if not turrets or not factories then
77334: LD_VAR 0 1
77338: NOT
77339: IFTRUE 77348
77341: PUSH
77342: LD_VAR 0 2
77346: NOT
77347: OR
77348: IFFALSE 77352
// exit ;
77350: GO 77659
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77352: LD_ADDR_VAR 0 10
77356: PUSH
77357: LD_INT 5
77359: PUSH
77360: LD_INT 6
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 2
77369: PUSH
77370: LD_INT 4
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: PUSH
77377: LD_INT 3
77379: PUSH
77380: LD_INT 5
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: LIST
77391: PUSH
77392: LD_INT 24
77394: PUSH
77395: LD_INT 25
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: PUSH
77402: LD_INT 23
77404: PUSH
77405: LD_INT 27
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: PUSH
77412: EMPTY
77413: LIST
77414: LIST
77415: PUSH
77416: LD_INT 42
77418: PUSH
77419: LD_INT 43
77421: PUSH
77422: EMPTY
77423: LIST
77424: LIST
77425: PUSH
77426: LD_INT 44
77428: PUSH
77429: LD_INT 46
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: PUSH
77436: LD_INT 45
77438: PUSH
77439: LD_INT 47
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: LIST
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: LIST
77455: ST_TO_ADDR
// result := [ ] ;
77456: LD_ADDR_VAR 0 3
77460: PUSH
77461: EMPTY
77462: ST_TO_ADDR
// for i in turrets do
77463: LD_ADDR_VAR 0 4
77467: PUSH
77468: LD_VAR 0 1
77472: PUSH
77473: FOR_IN
77474: IFFALSE 77657
// begin nat := GetNation ( i ) ;
77476: LD_ADDR_VAR 0 7
77480: PUSH
77481: LD_VAR 0 4
77485: PPUSH
77486: CALL_OW 248
77490: ST_TO_ADDR
// weapon := 0 ;
77491: LD_ADDR_VAR 0 8
77495: PUSH
77496: LD_INT 0
77498: ST_TO_ADDR
// if not nat then
77499: LD_VAR 0 7
77503: NOT
77504: IFFALSE 77508
// continue ;
77506: GO 77473
// for j in list [ nat ] do
77508: LD_ADDR_VAR 0 5
77512: PUSH
77513: LD_VAR 0 10
77517: PUSH
77518: LD_VAR 0 7
77522: ARRAY
77523: PUSH
77524: FOR_IN
77525: IFFALSE 77566
// if GetBWeapon ( i ) = j [ 1 ] then
77527: LD_VAR 0 4
77531: PPUSH
77532: CALL_OW 269
77536: PUSH
77537: LD_VAR 0 5
77541: PUSH
77542: LD_INT 1
77544: ARRAY
77545: EQUAL
77546: IFFALSE 77564
// begin weapon := j [ 2 ] ;
77548: LD_ADDR_VAR 0 8
77552: PUSH
77553: LD_VAR 0 5
77557: PUSH
77558: LD_INT 2
77560: ARRAY
77561: ST_TO_ADDR
// break ;
77562: GO 77566
// end ;
77564: GO 77524
77566: POP
77567: POP
// if not weapon then
77568: LD_VAR 0 8
77572: NOT
77573: IFFALSE 77577
// continue ;
77575: GO 77473
// for k in factories do
77577: LD_ADDR_VAR 0 6
77581: PUSH
77582: LD_VAR 0 2
77586: PUSH
77587: FOR_IN
77588: IFFALSE 77653
// begin weapons := AvailableWeaponList ( k ) ;
77590: LD_ADDR_VAR 0 9
77594: PUSH
77595: LD_VAR 0 6
77599: PPUSH
77600: CALL_OW 478
77604: ST_TO_ADDR
// if not weapons then
77605: LD_VAR 0 9
77609: NOT
77610: IFFALSE 77614
// continue ;
77612: GO 77587
// if weapon in weapons then
77614: LD_VAR 0 8
77618: PUSH
77619: LD_VAR 0 9
77623: IN
77624: IFFALSE 77651
// begin result := [ i , weapon ] ;
77626: LD_ADDR_VAR 0 3
77630: PUSH
77631: LD_VAR 0 4
77635: PUSH
77636: LD_VAR 0 8
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: ST_TO_ADDR
// exit ;
77645: POP
77646: POP
77647: POP
77648: POP
77649: GO 77659
// end ; end ;
77651: GO 77587
77653: POP
77654: POP
// end ;
77655: GO 77473
77657: POP
77658: POP
// end ;
77659: LD_VAR 0 3
77663: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77664: LD_INT 0
77666: PPUSH
// if not side or side > 8 then
77667: LD_VAR 0 3
77671: NOT
77672: IFTRUE 77684
77674: PUSH
77675: LD_VAR 0 3
77679: PUSH
77680: LD_INT 8
77682: GREATER
77683: OR
77684: IFFALSE 77688
// exit ;
77686: GO 77747
// if not range then
77688: LD_VAR 0 4
77692: NOT
77693: IFFALSE 77704
// range := - 12 ;
77695: LD_ADDR_VAR 0 4
77699: PUSH
77700: LD_INT 12
77702: NEG
77703: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77704: LD_VAR 0 1
77708: PPUSH
77709: LD_VAR 0 2
77713: PPUSH
77714: LD_VAR 0 3
77718: PPUSH
77719: LD_VAR 0 4
77723: PPUSH
77724: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77728: LD_VAR 0 1
77732: PPUSH
77733: LD_VAR 0 2
77737: PPUSH
77738: LD_VAR 0 3
77742: PPUSH
77743: CALL_OW 331
// end ;
77747: LD_VAR 0 5
77751: RET
// export function Video ( mode ) ; begin
77752: LD_INT 0
77754: PPUSH
// ingame_video = mode ;
77755: LD_ADDR_OWVAR 52
77759: PUSH
77760: LD_VAR 0 1
77764: ST_TO_ADDR
// interface_hidden = mode ;
77765: LD_ADDR_OWVAR 54
77769: PUSH
77770: LD_VAR 0 1
77774: ST_TO_ADDR
// end ;
77775: LD_VAR 0 2
77779: RET
// export function Join ( array , element ) ; begin
77780: LD_INT 0
77782: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77783: LD_ADDR_VAR 0 3
77787: PUSH
77788: LD_VAR 0 1
77792: PPUSH
77793: LD_VAR 0 1
77797: PUSH
77798: LD_INT 1
77800: PLUS
77801: PPUSH
77802: LD_VAR 0 2
77806: PPUSH
77807: CALL_OW 1
77811: ST_TO_ADDR
// end ;
77812: LD_VAR 0 3
77816: RET
// export function JoinUnion ( array , element ) ; begin
77817: LD_INT 0
77819: PPUSH
// result := array union element ;
77820: LD_ADDR_VAR 0 3
77824: PUSH
77825: LD_VAR 0 1
77829: PUSH
77830: LD_VAR 0 2
77834: UNION
77835: ST_TO_ADDR
// end ;
77836: LD_VAR 0 3
77840: RET
// export function GetBehemoths ( side ) ; begin
77841: LD_INT 0
77843: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77844: LD_ADDR_VAR 0 2
77848: PUSH
77849: LD_INT 22
77851: PUSH
77852: LD_VAR 0 1
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: PUSH
77861: LD_INT 31
77863: PUSH
77864: LD_INT 25
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: PUSH
77871: EMPTY
77872: LIST
77873: LIST
77874: PPUSH
77875: CALL_OW 69
77879: ST_TO_ADDR
// end ;
77880: LD_VAR 0 2
77884: RET
// export function Shuffle ( array ) ; var i , index ; begin
77885: LD_INT 0
77887: PPUSH
77888: PPUSH
77889: PPUSH
// result := [ ] ;
77890: LD_ADDR_VAR 0 2
77894: PUSH
77895: EMPTY
77896: ST_TO_ADDR
// if not array then
77897: LD_VAR 0 1
77901: NOT
77902: IFFALSE 77906
// exit ;
77904: GO 78005
// Randomize ;
77906: CALL_OW 10
// for i = array downto 1 do
77910: LD_ADDR_VAR 0 3
77914: PUSH
77915: DOUBLE
77916: LD_VAR 0 1
77920: INC
77921: ST_TO_ADDR
77922: LD_INT 1
77924: PUSH
77925: FOR_DOWNTO
77926: IFFALSE 78003
// begin index := rand ( 1 , array ) ;
77928: LD_ADDR_VAR 0 4
77932: PUSH
77933: LD_INT 1
77935: PPUSH
77936: LD_VAR 0 1
77940: PPUSH
77941: CALL_OW 12
77945: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77946: LD_ADDR_VAR 0 2
77950: PUSH
77951: LD_VAR 0 2
77955: PPUSH
77956: LD_VAR 0 2
77960: PUSH
77961: LD_INT 1
77963: PLUS
77964: PPUSH
77965: LD_VAR 0 1
77969: PUSH
77970: LD_VAR 0 4
77974: ARRAY
77975: PPUSH
77976: CALL_OW 2
77980: ST_TO_ADDR
// array := Delete ( array , index ) ;
77981: LD_ADDR_VAR 0 1
77985: PUSH
77986: LD_VAR 0 1
77990: PPUSH
77991: LD_VAR 0 4
77995: PPUSH
77996: CALL_OW 3
78000: ST_TO_ADDR
// end ;
78001: GO 77925
78003: POP
78004: POP
// end ;
78005: LD_VAR 0 2
78009: RET
// export function GetBaseMaterials ( base ) ; begin
78010: LD_INT 0
78012: PPUSH
// result := [ 0 , 0 , 0 ] ;
78013: LD_ADDR_VAR 0 2
78017: PUSH
78018: LD_INT 0
78020: PUSH
78021: LD_INT 0
78023: PUSH
78024: LD_INT 0
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: LIST
78031: ST_TO_ADDR
// if not base then
78032: LD_VAR 0 1
78036: NOT
78037: IFFALSE 78041
// exit ;
78039: GO 78090
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78041: LD_ADDR_VAR 0 2
78045: PUSH
78046: LD_VAR 0 1
78050: PPUSH
78051: LD_INT 1
78053: PPUSH
78054: CALL_OW 275
78058: PUSH
78059: LD_VAR 0 1
78063: PPUSH
78064: LD_INT 2
78066: PPUSH
78067: CALL_OW 275
78071: PUSH
78072: LD_VAR 0 1
78076: PPUSH
78077: LD_INT 3
78079: PPUSH
78080: CALL_OW 275
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: LIST
78089: ST_TO_ADDR
// end ;
78090: LD_VAR 0 2
78094: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78095: LD_INT 0
78097: PPUSH
78098: PPUSH
// result := array ;
78099: LD_ADDR_VAR 0 3
78103: PUSH
78104: LD_VAR 0 1
78108: ST_TO_ADDR
// if size >= result then
78109: LD_VAR 0 2
78113: PUSH
78114: LD_VAR 0 3
78118: GREATEREQUAL
78119: IFFALSE 78123
// exit ;
78121: GO 78173
// if size then
78123: LD_VAR 0 2
78127: IFFALSE 78173
// for i := array downto size do
78129: LD_ADDR_VAR 0 4
78133: PUSH
78134: DOUBLE
78135: LD_VAR 0 1
78139: INC
78140: ST_TO_ADDR
78141: LD_VAR 0 2
78145: PUSH
78146: FOR_DOWNTO
78147: IFFALSE 78171
// result := Delete ( result , result ) ;
78149: LD_ADDR_VAR 0 3
78153: PUSH
78154: LD_VAR 0 3
78158: PPUSH
78159: LD_VAR 0 3
78163: PPUSH
78164: CALL_OW 3
78168: ST_TO_ADDR
78169: GO 78146
78171: POP
78172: POP
// end ;
78173: LD_VAR 0 3
78177: RET
// export function ComExit ( unit ) ; var tmp ; begin
78178: LD_INT 0
78180: PPUSH
78181: PPUSH
// if not IsInUnit ( unit ) then
78182: LD_VAR 0 1
78186: PPUSH
78187: CALL_OW 310
78191: NOT
78192: IFFALSE 78196
// exit ;
78194: GO 78256
// tmp := IsInUnit ( unit ) ;
78196: LD_ADDR_VAR 0 3
78200: PUSH
78201: LD_VAR 0 1
78205: PPUSH
78206: CALL_OW 310
78210: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78211: LD_VAR 0 3
78215: PPUSH
78216: CALL_OW 247
78220: PUSH
78221: LD_INT 2
78223: EQUAL
78224: IFFALSE 78237
// ComExitVehicle ( unit ) else
78226: LD_VAR 0 1
78230: PPUSH
78231: CALL_OW 121
78235: GO 78246
// ComExitBuilding ( unit ) ;
78237: LD_VAR 0 1
78241: PPUSH
78242: CALL_OW 122
// result := tmp ;
78246: LD_ADDR_VAR 0 2
78250: PUSH
78251: LD_VAR 0 3
78255: ST_TO_ADDR
// end ;
78256: LD_VAR 0 2
78260: RET
// export function ComExitAll ( units ) ; var i ; begin
78261: LD_INT 0
78263: PPUSH
78264: PPUSH
// if not units then
78265: LD_VAR 0 1
78269: NOT
78270: IFFALSE 78274
// exit ;
78272: GO 78300
// for i in units do
78274: LD_ADDR_VAR 0 3
78278: PUSH
78279: LD_VAR 0 1
78283: PUSH
78284: FOR_IN
78285: IFFALSE 78298
// ComExit ( i ) ;
78287: LD_VAR 0 3
78291: PPUSH
78292: CALL 78178 0 1
78296: GO 78284
78298: POP
78299: POP
// end ;
78300: LD_VAR 0 2
78304: RET
// export function ResetHc ; begin
78305: LD_INT 0
78307: PPUSH
// InitHc ;
78308: CALL_OW 19
// hc_importance := 0 ;
78312: LD_ADDR_OWVAR 32
78316: PUSH
78317: LD_INT 0
78319: ST_TO_ADDR
// end ;
78320: LD_VAR 0 1
78324: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78325: LD_INT 0
78327: PPUSH
78328: PPUSH
78329: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78330: LD_ADDR_VAR 0 6
78334: PUSH
78335: LD_VAR 0 1
78339: PUSH
78340: LD_VAR 0 3
78344: PLUS
78345: PUSH
78346: LD_INT 2
78348: DIV
78349: ST_TO_ADDR
// if _x < 0 then
78350: LD_VAR 0 6
78354: PUSH
78355: LD_INT 0
78357: LESS
78358: IFFALSE 78375
// _x := _x * - 1 ;
78360: LD_ADDR_VAR 0 6
78364: PUSH
78365: LD_VAR 0 6
78369: PUSH
78370: LD_INT 1
78372: NEG
78373: MUL
78374: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78375: LD_ADDR_VAR 0 7
78379: PUSH
78380: LD_VAR 0 2
78384: PUSH
78385: LD_VAR 0 4
78389: PLUS
78390: PUSH
78391: LD_INT 2
78393: DIV
78394: ST_TO_ADDR
// if _y < 0 then
78395: LD_VAR 0 7
78399: PUSH
78400: LD_INT 0
78402: LESS
78403: IFFALSE 78420
// _y := _y * - 1 ;
78405: LD_ADDR_VAR 0 7
78409: PUSH
78410: LD_VAR 0 7
78414: PUSH
78415: LD_INT 1
78417: NEG
78418: MUL
78419: ST_TO_ADDR
// result := [ _x , _y ] ;
78420: LD_ADDR_VAR 0 5
78424: PUSH
78425: LD_VAR 0 6
78429: PUSH
78430: LD_VAR 0 7
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: ST_TO_ADDR
// end ;
78439: LD_VAR 0 5
78443: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78444: LD_INT 0
78446: PPUSH
78447: PPUSH
78448: PPUSH
78449: PPUSH
// task := GetTaskList ( unit ) ;
78450: LD_ADDR_VAR 0 7
78454: PUSH
78455: LD_VAR 0 1
78459: PPUSH
78460: CALL_OW 437
78464: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78465: LD_VAR 0 7
78469: NOT
78470: IFFALSE 78489
78472: PUSH
78473: LD_VAR 0 1
78477: PPUSH
78478: LD_VAR 0 2
78482: PPUSH
78483: CALL_OW 308
78487: NOT
78488: AND
78489: IFFALSE 78493
// exit ;
78491: GO 78611
// if IsInArea ( unit , area ) then
78493: LD_VAR 0 1
78497: PPUSH
78498: LD_VAR 0 2
78502: PPUSH
78503: CALL_OW 308
78507: IFFALSE 78525
// begin ComMoveToArea ( unit , goAway ) ;
78509: LD_VAR 0 1
78513: PPUSH
78514: LD_VAR 0 3
78518: PPUSH
78519: CALL_OW 113
// exit ;
78523: GO 78611
// end ; if task [ 1 ] [ 1 ] <> M then
78525: LD_VAR 0 7
78529: PUSH
78530: LD_INT 1
78532: ARRAY
78533: PUSH
78534: LD_INT 1
78536: ARRAY
78537: PUSH
78538: LD_STRING M
78540: NONEQUAL
78541: IFFALSE 78545
// exit ;
78543: GO 78611
// x := task [ 1 ] [ 2 ] ;
78545: LD_ADDR_VAR 0 5
78549: PUSH
78550: LD_VAR 0 7
78554: PUSH
78555: LD_INT 1
78557: ARRAY
78558: PUSH
78559: LD_INT 2
78561: ARRAY
78562: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78563: LD_ADDR_VAR 0 6
78567: PUSH
78568: LD_VAR 0 7
78572: PUSH
78573: LD_INT 1
78575: ARRAY
78576: PUSH
78577: LD_INT 3
78579: ARRAY
78580: ST_TO_ADDR
// if InArea ( x , y , area ) then
78581: LD_VAR 0 5
78585: PPUSH
78586: LD_VAR 0 6
78590: PPUSH
78591: LD_VAR 0 2
78595: PPUSH
78596: CALL_OW 309
78600: IFFALSE 78611
// ComStop ( unit ) ;
78602: LD_VAR 0 1
78606: PPUSH
78607: CALL_OW 141
// end ;
78611: LD_VAR 0 4
78615: RET
// export function Abs ( value ) ; begin
78616: LD_INT 0
78618: PPUSH
// result := value ;
78619: LD_ADDR_VAR 0 2
78623: PUSH
78624: LD_VAR 0 1
78628: ST_TO_ADDR
// if value < 0 then
78629: LD_VAR 0 1
78633: PUSH
78634: LD_INT 0
78636: LESS
78637: IFFALSE 78654
// result := value * - 1 ;
78639: LD_ADDR_VAR 0 2
78643: PUSH
78644: LD_VAR 0 1
78648: PUSH
78649: LD_INT 1
78651: NEG
78652: MUL
78653: ST_TO_ADDR
// end ;
78654: LD_VAR 0 2
78658: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78659: LD_INT 0
78661: PPUSH
78662: PPUSH
78663: PPUSH
78664: PPUSH
78665: PPUSH
78666: PPUSH
78667: PPUSH
78668: PPUSH
// if not unit or not building then
78669: LD_VAR 0 1
78673: NOT
78674: IFTRUE 78683
78676: PUSH
78677: LD_VAR 0 2
78681: NOT
78682: OR
78683: IFFALSE 78687
// exit ;
78685: GO 78915
// x := GetX ( building ) ;
78687: LD_ADDR_VAR 0 4
78691: PUSH
78692: LD_VAR 0 2
78696: PPUSH
78697: CALL_OW 250
78701: ST_TO_ADDR
// y := GetY ( building ) ;
78702: LD_ADDR_VAR 0 6
78706: PUSH
78707: LD_VAR 0 2
78711: PPUSH
78712: CALL_OW 251
78716: ST_TO_ADDR
// d := GetDir ( building ) ;
78717: LD_ADDR_VAR 0 8
78721: PUSH
78722: LD_VAR 0 2
78726: PPUSH
78727: CALL_OW 254
78731: ST_TO_ADDR
// r := 4 ;
78732: LD_ADDR_VAR 0 9
78736: PUSH
78737: LD_INT 4
78739: ST_TO_ADDR
// for i := 1 to 5 do
78740: LD_ADDR_VAR 0 10
78744: PUSH
78745: DOUBLE
78746: LD_INT 1
78748: DEC
78749: ST_TO_ADDR
78750: LD_INT 5
78752: PUSH
78753: FOR_TO
78754: IFFALSE 78913
// begin _x := ShiftX ( x , d , r + i ) ;
78756: LD_ADDR_VAR 0 5
78760: PUSH
78761: LD_VAR 0 4
78765: PPUSH
78766: LD_VAR 0 8
78770: PPUSH
78771: LD_VAR 0 9
78775: PUSH
78776: LD_VAR 0 10
78780: PLUS
78781: PPUSH
78782: CALL_OW 272
78786: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78787: LD_ADDR_VAR 0 7
78791: PUSH
78792: LD_VAR 0 6
78796: PPUSH
78797: LD_VAR 0 8
78801: PPUSH
78802: LD_VAR 0 9
78806: PUSH
78807: LD_VAR 0 10
78811: PLUS
78812: PPUSH
78813: CALL_OW 273
78817: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78818: LD_VAR 0 5
78822: PPUSH
78823: LD_VAR 0 7
78827: PPUSH
78828: CALL_OW 488
78832: IFFALSE 78867
78834: PUSH
78835: LD_VAR 0 5
78839: PPUSH
78840: LD_VAR 0 7
78844: PPUSH
78845: CALL_OW 428
78849: PPUSH
78850: CALL_OW 247
78854: PUSH
78855: LD_INT 3
78857: PUSH
78858: LD_INT 2
78860: PUSH
78861: EMPTY
78862: LIST
78863: LIST
78864: IN
78865: NOT
78866: AND
78867: IFFALSE 78911
// begin ComMoveXY ( unit , _x , _y ) ;
78869: LD_VAR 0 1
78873: PPUSH
78874: LD_VAR 0 5
78878: PPUSH
78879: LD_VAR 0 7
78883: PPUSH
78884: CALL_OW 111
// result := [ _x , _y ] ;
78888: LD_ADDR_VAR 0 3
78892: PUSH
78893: LD_VAR 0 5
78897: PUSH
78898: LD_VAR 0 7
78902: PUSH
78903: EMPTY
78904: LIST
78905: LIST
78906: ST_TO_ADDR
// exit ;
78907: POP
78908: POP
78909: GO 78915
// end ; end ;
78911: GO 78753
78913: POP
78914: POP
// end ;
78915: LD_VAR 0 3
78919: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78920: LD_INT 0
78922: PPUSH
78923: PPUSH
78924: PPUSH
// result := 0 ;
78925: LD_ADDR_VAR 0 3
78929: PUSH
78930: LD_INT 0
78932: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78933: LD_VAR 0 1
78937: PUSH
78938: LD_INT 0
78940: LESS
78941: IFTRUE 78953
78943: PUSH
78944: LD_VAR 0 1
78948: PUSH
78949: LD_INT 8
78951: GREATER
78952: OR
78953: IFTRUE 78965
78955: PUSH
78956: LD_VAR 0 2
78960: PUSH
78961: LD_INT 0
78963: LESS
78964: OR
78965: IFTRUE 78977
78967: PUSH
78968: LD_VAR 0 2
78972: PUSH
78973: LD_INT 8
78975: GREATER
78976: OR
78977: IFFALSE 78981
// exit ;
78979: GO 79056
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78981: LD_ADDR_VAR 0 4
78985: PUSH
78986: LD_INT 22
78988: PUSH
78989: LD_VAR 0 2
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PPUSH
78998: CALL_OW 69
79002: PUSH
79003: FOR_IN
79004: IFFALSE 79054
// begin un := UnitShoot ( i ) ;
79006: LD_ADDR_VAR 0 5
79010: PUSH
79011: LD_VAR 0 4
79015: PPUSH
79016: CALL_OW 504
79020: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79021: LD_VAR 0 5
79025: PPUSH
79026: CALL_OW 255
79030: PUSH
79031: LD_VAR 0 1
79035: EQUAL
79036: IFFALSE 79052
// begin result := un ;
79038: LD_ADDR_VAR 0 3
79042: PUSH
79043: LD_VAR 0 5
79047: ST_TO_ADDR
// exit ;
79048: POP
79049: POP
79050: GO 79056
// end ; end ;
79052: GO 79003
79054: POP
79055: POP
// end ;
79056: LD_VAR 0 3
79060: RET
// export function GetCargoBay ( units ) ; begin
79061: LD_INT 0
79063: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79064: LD_ADDR_VAR 0 2
79068: PUSH
79069: LD_VAR 0 1
79073: PPUSH
79074: LD_INT 2
79076: PUSH
79077: LD_INT 34
79079: PUSH
79080: LD_INT 12
79082: PUSH
79083: EMPTY
79084: LIST
79085: LIST
79086: PUSH
79087: LD_INT 34
79089: PUSH
79090: LD_INT 51
79092: PUSH
79093: EMPTY
79094: LIST
79095: LIST
79096: PUSH
79097: LD_INT 34
79099: PUSH
79100: LD_INT 32
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: PUSH
79107: LD_INT 34
79109: PUSH
79110: LD_INT 89
79112: PUSH
79113: EMPTY
79114: LIST
79115: LIST
79116: PUSH
79117: EMPTY
79118: LIST
79119: LIST
79120: LIST
79121: LIST
79122: LIST
79123: PPUSH
79124: CALL_OW 72
79128: ST_TO_ADDR
// end ;
79129: LD_VAR 0 2
79133: RET
// export function Negate ( value ) ; begin
79134: LD_INT 0
79136: PPUSH
// result := not value ;
79137: LD_ADDR_VAR 0 2
79141: PUSH
79142: LD_VAR 0 1
79146: NOT
79147: ST_TO_ADDR
// end ;
79148: LD_VAR 0 2
79152: RET
// export function Inc ( value ) ; begin
79153: LD_INT 0
79155: PPUSH
// result := value + 1 ;
79156: LD_ADDR_VAR 0 2
79160: PUSH
79161: LD_VAR 0 1
79165: PUSH
79166: LD_INT 1
79168: PLUS
79169: ST_TO_ADDR
// end ;
79170: LD_VAR 0 2
79174: RET
// export function Dec ( value ) ; begin
79175: LD_INT 0
79177: PPUSH
// result := value - 1 ;
79178: LD_ADDR_VAR 0 2
79182: PUSH
79183: LD_VAR 0 1
79187: PUSH
79188: LD_INT 1
79190: MINUS
79191: ST_TO_ADDR
// end ;
79192: LD_VAR 0 2
79196: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79197: LD_INT 0
79199: PPUSH
79200: PPUSH
79201: PPUSH
79202: PPUSH
79203: PPUSH
79204: PPUSH
79205: PPUSH
79206: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79207: LD_VAR 0 1
79211: PPUSH
79212: LD_VAR 0 2
79216: PPUSH
79217: CALL_OW 488
79221: NOT
79222: IFTRUE 79241
79224: PUSH
79225: LD_VAR 0 3
79229: PPUSH
79230: LD_VAR 0 4
79234: PPUSH
79235: CALL_OW 488
79239: NOT
79240: OR
79241: IFFALSE 79254
// begin result := - 1 ;
79243: LD_ADDR_VAR 0 5
79247: PUSH
79248: LD_INT 1
79250: NEG
79251: ST_TO_ADDR
// exit ;
79252: GO 79489
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79254: LD_ADDR_VAR 0 12
79258: PUSH
79259: LD_VAR 0 1
79263: PPUSH
79264: LD_VAR 0 2
79268: PPUSH
79269: LD_VAR 0 3
79273: PPUSH
79274: LD_VAR 0 4
79278: PPUSH
79279: CALL 78325 0 4
79283: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79284: LD_ADDR_VAR 0 11
79288: PUSH
79289: LD_VAR 0 1
79293: PPUSH
79294: LD_VAR 0 2
79298: PPUSH
79299: LD_VAR 0 12
79303: PUSH
79304: LD_INT 1
79306: ARRAY
79307: PPUSH
79308: LD_VAR 0 12
79312: PUSH
79313: LD_INT 2
79315: ARRAY
79316: PPUSH
79317: CALL_OW 298
79321: ST_TO_ADDR
// distance := 9999 ;
79322: LD_ADDR_VAR 0 10
79326: PUSH
79327: LD_INT 9999
79329: ST_TO_ADDR
// for i := 0 to 5 do
79330: LD_ADDR_VAR 0 6
79334: PUSH
79335: DOUBLE
79336: LD_INT 0
79338: DEC
79339: ST_TO_ADDR
79340: LD_INT 5
79342: PUSH
79343: FOR_TO
79344: IFFALSE 79487
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79346: LD_ADDR_VAR 0 7
79350: PUSH
79351: LD_VAR 0 1
79355: PPUSH
79356: LD_VAR 0 6
79360: PPUSH
79361: LD_VAR 0 11
79365: PPUSH
79366: CALL_OW 272
79370: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79371: LD_ADDR_VAR 0 8
79375: PUSH
79376: LD_VAR 0 2
79380: PPUSH
79381: LD_VAR 0 6
79385: PPUSH
79386: LD_VAR 0 11
79390: PPUSH
79391: CALL_OW 273
79395: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79396: LD_VAR 0 7
79400: PPUSH
79401: LD_VAR 0 8
79405: PPUSH
79406: CALL_OW 488
79410: NOT
79411: IFFALSE 79415
// continue ;
79413: GO 79343
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79415: LD_ADDR_VAR 0 9
79419: PUSH
79420: LD_VAR 0 12
79424: PUSH
79425: LD_INT 1
79427: ARRAY
79428: PPUSH
79429: LD_VAR 0 12
79433: PUSH
79434: LD_INT 2
79436: ARRAY
79437: PPUSH
79438: LD_VAR 0 7
79442: PPUSH
79443: LD_VAR 0 8
79447: PPUSH
79448: CALL_OW 298
79452: ST_TO_ADDR
// if tmp < distance then
79453: LD_VAR 0 9
79457: PUSH
79458: LD_VAR 0 10
79462: LESS
79463: IFFALSE 79485
// begin result := i ;
79465: LD_ADDR_VAR 0 5
79469: PUSH
79470: LD_VAR 0 6
79474: ST_TO_ADDR
// distance := tmp ;
79475: LD_ADDR_VAR 0 10
79479: PUSH
79480: LD_VAR 0 9
79484: ST_TO_ADDR
// end ; end ;
79485: GO 79343
79487: POP
79488: POP
// end ;
79489: LD_VAR 0 5
79493: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79494: LD_INT 0
79496: PPUSH
79497: PPUSH
// if not driver or not IsInUnit ( driver ) then
79498: LD_VAR 0 1
79502: NOT
79503: IFTRUE 79517
79505: PUSH
79506: LD_VAR 0 1
79510: PPUSH
79511: CALL_OW 310
79515: NOT
79516: OR
79517: IFFALSE 79521
// exit ;
79519: GO 79611
// vehicle := IsInUnit ( driver ) ;
79521: LD_ADDR_VAR 0 3
79525: PUSH
79526: LD_VAR 0 1
79530: PPUSH
79531: CALL_OW 310
79535: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79536: LD_VAR 0 1
79540: PPUSH
79541: LD_STRING \
79543: PUSH
79544: LD_INT 0
79546: PUSH
79547: LD_INT 0
79549: PUSH
79550: LD_INT 0
79552: PUSH
79553: LD_INT 0
79555: PUSH
79556: LD_INT 0
79558: PUSH
79559: LD_INT 0
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: LIST
79566: LIST
79567: LIST
79568: LIST
79569: LIST
79570: PUSH
79571: LD_STRING E
79573: PUSH
79574: LD_INT 0
79576: PUSH
79577: LD_INT 0
79579: PUSH
79580: LD_VAR 0 3
79584: PUSH
79585: LD_INT 0
79587: PUSH
79588: LD_INT 0
79590: PUSH
79591: LD_INT 0
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: LIST
79598: LIST
79599: LIST
79600: LIST
79601: LIST
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: PPUSH
79607: CALL_OW 446
// end ;
79611: LD_VAR 0 2
79615: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79616: LD_INT 0
79618: PPUSH
79619: PPUSH
// if not driver or not IsInUnit ( driver ) then
79620: LD_VAR 0 1
79624: NOT
79625: IFTRUE 79639
79627: PUSH
79628: LD_VAR 0 1
79632: PPUSH
79633: CALL_OW 310
79637: NOT
79638: OR
79639: IFFALSE 79643
// exit ;
79641: GO 79733
// vehicle := IsInUnit ( driver ) ;
79643: LD_ADDR_VAR 0 3
79647: PUSH
79648: LD_VAR 0 1
79652: PPUSH
79653: CALL_OW 310
79657: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79658: LD_VAR 0 1
79662: PPUSH
79663: LD_STRING \
79665: PUSH
79666: LD_INT 0
79668: PUSH
79669: LD_INT 0
79671: PUSH
79672: LD_INT 0
79674: PUSH
79675: LD_INT 0
79677: PUSH
79678: LD_INT 0
79680: PUSH
79681: LD_INT 0
79683: PUSH
79684: EMPTY
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: LIST
79690: LIST
79691: LIST
79692: PUSH
79693: LD_STRING E
79695: PUSH
79696: LD_INT 0
79698: PUSH
79699: LD_INT 0
79701: PUSH
79702: LD_VAR 0 3
79706: PUSH
79707: LD_INT 0
79709: PUSH
79710: LD_INT 0
79712: PUSH
79713: LD_INT 0
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: LIST
79723: LIST
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PPUSH
79729: CALL_OW 447
// end ;
79733: LD_VAR 0 2
79737: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79738: LD_INT 0
79740: PPUSH
79741: PPUSH
79742: PPUSH
// tmp := [ ] ;
79743: LD_ADDR_VAR 0 5
79747: PUSH
79748: EMPTY
79749: ST_TO_ADDR
// for i in units do
79750: LD_ADDR_VAR 0 4
79754: PUSH
79755: LD_VAR 0 1
79759: PUSH
79760: FOR_IN
79761: IFFALSE 79799
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79763: LD_ADDR_VAR 0 5
79767: PUSH
79768: LD_VAR 0 5
79772: PPUSH
79773: LD_VAR 0 5
79777: PUSH
79778: LD_INT 1
79780: PLUS
79781: PPUSH
79782: LD_VAR 0 4
79786: PPUSH
79787: CALL_OW 256
79791: PPUSH
79792: CALL_OW 2
79796: ST_TO_ADDR
79797: GO 79760
79799: POP
79800: POP
// if not tmp then
79801: LD_VAR 0 5
79805: NOT
79806: IFFALSE 79810
// exit ;
79808: GO 79858
// if asc then
79810: LD_VAR 0 2
79814: IFFALSE 79838
// result := SortListByListAsc ( units , tmp ) else
79816: LD_ADDR_VAR 0 3
79820: PUSH
79821: LD_VAR 0 1
79825: PPUSH
79826: LD_VAR 0 5
79830: PPUSH
79831: CALL_OW 76
79835: ST_TO_ADDR
79836: GO 79858
// result := SortListByListDesc ( units , tmp ) ;
79838: LD_ADDR_VAR 0 3
79842: PUSH
79843: LD_VAR 0 1
79847: PPUSH
79848: LD_VAR 0 5
79852: PPUSH
79853: CALL_OW 77
79857: ST_TO_ADDR
// end ;
79858: LD_VAR 0 3
79862: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79863: LD_INT 0
79865: PPUSH
79866: PPUSH
// task := GetTaskList ( mech ) ;
79867: LD_ADDR_VAR 0 4
79871: PUSH
79872: LD_VAR 0 1
79876: PPUSH
79877: CALL_OW 437
79881: ST_TO_ADDR
// if not task then
79882: LD_VAR 0 4
79886: NOT
79887: IFFALSE 79891
// exit ;
79889: GO 79935
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79891: LD_ADDR_VAR 0 3
79895: PUSH
79896: LD_VAR 0 4
79900: PUSH
79901: LD_INT 1
79903: ARRAY
79904: PUSH
79905: LD_INT 1
79907: ARRAY
79908: PUSH
79909: LD_STRING r
79911: EQUAL
79912: IFFALSE 79934
79914: PUSH
79915: LD_VAR 0 4
79919: PUSH
79920: LD_INT 1
79922: ARRAY
79923: PUSH
79924: LD_INT 4
79926: ARRAY
79927: PUSH
79928: LD_VAR 0 2
79932: EQUAL
79933: AND
79934: ST_TO_ADDR
// end ;
79935: LD_VAR 0 3
79939: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79940: LD_INT 0
79942: PPUSH
// SetDir ( unit , d ) ;
79943: LD_VAR 0 1
79947: PPUSH
79948: LD_VAR 0 4
79952: PPUSH
79953: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
79957: LD_ADDR_VAR 0 6
79961: PUSH
79962: LD_VAR 0 1
79966: PPUSH
79967: LD_VAR 0 2
79971: PPUSH
79972: LD_VAR 0 3
79976: PPUSH
79977: LD_VAR 0 5
79981: PPUSH
79982: CALL_OW 48
79986: ST_TO_ADDR
// end ;
79987: LD_VAR 0 6
79991: RET
// export function ToNaturalNumber ( number ) ; begin
79992: LD_INT 0
79994: PPUSH
// result := number div 1 ;
79995: LD_ADDR_VAR 0 2
79999: PUSH
80000: LD_VAR 0 1
80004: PUSH
80005: LD_INT 1
80007: DIV
80008: ST_TO_ADDR
// if number < 0 then
80009: LD_VAR 0 1
80013: PUSH
80014: LD_INT 0
80016: LESS
80017: IFFALSE 80027
// result := 0 ;
80019: LD_ADDR_VAR 0 2
80023: PUSH
80024: LD_INT 0
80026: ST_TO_ADDR
// end ;
80027: LD_VAR 0 2
80031: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
80032: LD_INT 0
80034: PPUSH
80035: PPUSH
80036: PPUSH
// if not buildings then
80037: LD_VAR 0 1
80041: NOT
80042: IFFALSE 80046
// exit ;
80044: GO 80161
// tmp := [ ] ;
80046: LD_ADDR_VAR 0 5
80050: PUSH
80051: EMPTY
80052: ST_TO_ADDR
// for b in buildings do
80053: LD_ADDR_VAR 0 4
80057: PUSH
80058: LD_VAR 0 1
80062: PUSH
80063: FOR_IN
80064: IFFALSE 80102
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
80066: LD_ADDR_VAR 0 5
80070: PUSH
80071: LD_VAR 0 5
80075: PPUSH
80076: LD_VAR 0 5
80080: PUSH
80081: LD_INT 1
80083: PLUS
80084: PPUSH
80085: LD_VAR 0 4
80089: PPUSH
80090: CALL_OW 266
80094: PPUSH
80095: CALL_OW 1
80099: ST_TO_ADDR
80100: GO 80063
80102: POP
80103: POP
// if not tmp then
80104: LD_VAR 0 5
80108: NOT
80109: IFFALSE 80113
// exit ;
80111: GO 80161
// if asc then
80113: LD_VAR 0 2
80117: IFFALSE 80141
// result := SortListByListAsc ( buildings , tmp ) else
80119: LD_ADDR_VAR 0 3
80123: PUSH
80124: LD_VAR 0 1
80128: PPUSH
80129: LD_VAR 0 5
80133: PPUSH
80134: CALL_OW 76
80138: ST_TO_ADDR
80139: GO 80161
// result := SortListByListDesc ( buildings , tmp ) ;
80141: LD_ADDR_VAR 0 3
80145: PUSH
80146: LD_VAR 0 1
80150: PPUSH
80151: LD_VAR 0 5
80155: PPUSH
80156: CALL_OW 77
80160: ST_TO_ADDR
// end ;
80161: LD_VAR 0 3
80165: RET
// export function SortByClass ( units , class ) ; var un ; begin
80166: LD_INT 0
80168: PPUSH
80169: PPUSH
// if not units or not class then
80170: LD_VAR 0 1
80174: NOT
80175: IFTRUE 80184
80177: PUSH
80178: LD_VAR 0 2
80182: NOT
80183: OR
80184: IFFALSE 80188
// exit ;
80186: GO 80283
// result := [ ] ;
80188: LD_ADDR_VAR 0 3
80192: PUSH
80193: EMPTY
80194: ST_TO_ADDR
// for un in units do
80195: LD_ADDR_VAR 0 4
80199: PUSH
80200: LD_VAR 0 1
80204: PUSH
80205: FOR_IN
80206: IFFALSE 80281
// if GetClass ( un ) = class then
80208: LD_VAR 0 4
80212: PPUSH
80213: CALL_OW 257
80217: PUSH
80218: LD_VAR 0 2
80222: EQUAL
80223: IFFALSE 80250
// result := Insert ( result , 1 , un ) else
80225: LD_ADDR_VAR 0 3
80229: PUSH
80230: LD_VAR 0 3
80234: PPUSH
80235: LD_INT 1
80237: PPUSH
80238: LD_VAR 0 4
80242: PPUSH
80243: CALL_OW 2
80247: ST_TO_ADDR
80248: GO 80279
// result := Replace ( result , result + 1 , un ) ;
80250: LD_ADDR_VAR 0 3
80254: PUSH
80255: LD_VAR 0 3
80259: PPUSH
80260: LD_VAR 0 3
80264: PUSH
80265: LD_INT 1
80267: PLUS
80268: PPUSH
80269: LD_VAR 0 4
80273: PPUSH
80274: CALL_OW 1
80278: ST_TO_ADDR
80279: GO 80205
80281: POP
80282: POP
// end ;
80283: LD_VAR 0 3
80287: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80288: LD_INT 0
80290: PPUSH
80291: PPUSH
80292: PPUSH
80293: PPUSH
80294: PPUSH
80295: PPUSH
80296: PPUSH
// result := [ ] ;
80297: LD_ADDR_VAR 0 4
80301: PUSH
80302: EMPTY
80303: ST_TO_ADDR
// if x - r < 0 then
80304: LD_VAR 0 1
80308: PUSH
80309: LD_VAR 0 3
80313: MINUS
80314: PUSH
80315: LD_INT 0
80317: LESS
80318: IFFALSE 80330
// min_x := 0 else
80320: LD_ADDR_VAR 0 8
80324: PUSH
80325: LD_INT 0
80327: ST_TO_ADDR
80328: GO 80346
// min_x := x - r ;
80330: LD_ADDR_VAR 0 8
80334: PUSH
80335: LD_VAR 0 1
80339: PUSH
80340: LD_VAR 0 3
80344: MINUS
80345: ST_TO_ADDR
// if y - r < 0 then
80346: LD_VAR 0 2
80350: PUSH
80351: LD_VAR 0 3
80355: MINUS
80356: PUSH
80357: LD_INT 0
80359: LESS
80360: IFFALSE 80372
// min_y := 0 else
80362: LD_ADDR_VAR 0 7
80366: PUSH
80367: LD_INT 0
80369: ST_TO_ADDR
80370: GO 80388
// min_y := y - r ;
80372: LD_ADDR_VAR 0 7
80376: PUSH
80377: LD_VAR 0 2
80381: PUSH
80382: LD_VAR 0 3
80386: MINUS
80387: ST_TO_ADDR
// max_x := x + r ;
80388: LD_ADDR_VAR 0 9
80392: PUSH
80393: LD_VAR 0 1
80397: PUSH
80398: LD_VAR 0 3
80402: PLUS
80403: ST_TO_ADDR
// max_y := y + r ;
80404: LD_ADDR_VAR 0 10
80408: PUSH
80409: LD_VAR 0 2
80413: PUSH
80414: LD_VAR 0 3
80418: PLUS
80419: ST_TO_ADDR
// for _x = min_x to max_x do
80420: LD_ADDR_VAR 0 5
80424: PUSH
80425: DOUBLE
80426: LD_VAR 0 8
80430: DEC
80431: ST_TO_ADDR
80432: LD_VAR 0 9
80436: PUSH
80437: FOR_TO
80438: IFFALSE 80539
// for _y = min_y to max_y do
80440: LD_ADDR_VAR 0 6
80444: PUSH
80445: DOUBLE
80446: LD_VAR 0 7
80450: DEC
80451: ST_TO_ADDR
80452: LD_VAR 0 10
80456: PUSH
80457: FOR_TO
80458: IFFALSE 80535
// begin if not ValidHex ( _x , _y ) then
80460: LD_VAR 0 5
80464: PPUSH
80465: LD_VAR 0 6
80469: PPUSH
80470: CALL_OW 488
80474: NOT
80475: IFFALSE 80479
// continue ;
80477: GO 80457
// if GetResourceTypeXY ( _x , _y ) then
80479: LD_VAR 0 5
80483: PPUSH
80484: LD_VAR 0 6
80488: PPUSH
80489: CALL_OW 283
80493: IFFALSE 80533
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80495: LD_ADDR_VAR 0 4
80499: PUSH
80500: LD_VAR 0 4
80504: PPUSH
80505: LD_VAR 0 4
80509: PUSH
80510: LD_INT 1
80512: PLUS
80513: PPUSH
80514: LD_VAR 0 5
80518: PUSH
80519: LD_VAR 0 6
80523: PUSH
80524: EMPTY
80525: LIST
80526: LIST
80527: PPUSH
80528: CALL_OW 1
80532: ST_TO_ADDR
// end ;
80533: GO 80457
80535: POP
80536: POP
80537: GO 80437
80539: POP
80540: POP
// end ;
80541: LD_VAR 0 4
80545: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80546: LD_INT 0
80548: PPUSH
80549: PPUSH
80550: PPUSH
80551: PPUSH
80552: PPUSH
80553: PPUSH
80554: PPUSH
80555: PPUSH
// if not units then
80556: LD_VAR 0 1
80560: NOT
80561: IFFALSE 80565
// exit ;
80563: GO 81097
// result := UnitFilter ( units , [ f_ok ] ) ;
80565: LD_ADDR_VAR 0 3
80569: PUSH
80570: LD_VAR 0 1
80574: PPUSH
80575: LD_INT 50
80577: PUSH
80578: EMPTY
80579: LIST
80580: PPUSH
80581: CALL_OW 72
80585: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80586: LD_ADDR_VAR 0 8
80590: PUSH
80591: LD_VAR 0 1
80595: PUSH
80596: LD_INT 1
80598: ARRAY
80599: PPUSH
80600: CALL_OW 255
80604: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80605: LD_ADDR_VAR 0 10
80609: PUSH
80610: LD_INT 29
80612: PUSH
80613: LD_INT 91
80615: PUSH
80616: LD_INT 49
80618: PUSH
80619: EMPTY
80620: LIST
80621: LIST
80622: LIST
80623: ST_TO_ADDR
// if not result then
80624: LD_VAR 0 3
80628: NOT
80629: IFFALSE 80633
// exit ;
80631: GO 81097
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80633: LD_ADDR_VAR 0 5
80637: PUSH
80638: LD_INT 81
80640: PUSH
80641: LD_VAR 0 8
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PPUSH
80650: CALL_OW 69
80654: ST_TO_ADDR
// for i in result do
80655: LD_ADDR_VAR 0 4
80659: PUSH
80660: LD_VAR 0 3
80664: PUSH
80665: FOR_IN
80666: IFFALSE 81095
// begin tag := GetTag ( i ) + 1 ;
80668: LD_ADDR_VAR 0 9
80672: PUSH
80673: LD_VAR 0 4
80677: PPUSH
80678: CALL_OW 110
80682: PUSH
80683: LD_INT 1
80685: PLUS
80686: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
80687: LD_ADDR_VAR 0 7
80691: PUSH
80692: LD_VAR 0 4
80696: PPUSH
80697: CALL_OW 250
80701: PPUSH
80702: LD_VAR 0 4
80706: PPUSH
80707: CALL_OW 251
80711: PPUSH
80712: LD_INT 4
80714: PPUSH
80715: CALL 80288 0 3
80719: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
80720: LD_VAR 0 4
80724: PPUSH
80725: CALL_OW 247
80729: PUSH
80730: LD_INT 2
80732: EQUAL
80733: IFFALSE 80745
80735: PUSH
80736: LD_VAR 0 7
80740: PUSH
80741: LD_INT 2
80743: GREATER
80744: AND
80745: IFFALSE 80765
80747: PUSH
80748: LD_VAR 0 4
80752: PPUSH
80753: CALL_OW 264
80757: PUSH
80758: LD_VAR 0 10
80762: IN
80763: NOT
80764: AND
80765: IFFALSE 80804
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80767: LD_VAR 0 4
80771: PPUSH
80772: LD_VAR 0 7
80776: PUSH
80777: LD_INT 1
80779: ARRAY
80780: PUSH
80781: LD_INT 1
80783: ARRAY
80784: PPUSH
80785: LD_VAR 0 7
80789: PUSH
80790: LD_INT 1
80792: ARRAY
80793: PUSH
80794: LD_INT 2
80796: ARRAY
80797: PPUSH
80798: CALL_OW 116
80802: GO 81093
// if path > tag then
80804: LD_VAR 0 2
80808: PUSH
80809: LD_VAR 0 9
80813: GREATER
80814: IFFALSE 81022
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80816: LD_ADDR_VAR 0 6
80820: PUSH
80821: LD_VAR 0 5
80825: PPUSH
80826: LD_INT 91
80828: PUSH
80829: LD_VAR 0 4
80833: PUSH
80834: LD_INT 8
80836: PUSH
80837: EMPTY
80838: LIST
80839: LIST
80840: LIST
80841: PPUSH
80842: CALL_OW 72
80846: ST_TO_ADDR
// if nearEnemy then
80847: LD_VAR 0 6
80851: IFFALSE 80920
// begin if GetWeapon ( i ) = ru_time_lapser then
80853: LD_VAR 0 4
80857: PPUSH
80858: CALL_OW 264
80862: PUSH
80863: LD_INT 49
80865: EQUAL
80866: IFFALSE 80894
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80868: LD_VAR 0 4
80872: PPUSH
80873: LD_VAR 0 6
80877: PPUSH
80878: LD_VAR 0 4
80882: PPUSH
80883: CALL_OW 74
80887: PPUSH
80888: CALL_OW 112
80892: GO 80918
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80894: LD_VAR 0 4
80898: PPUSH
80899: LD_VAR 0 6
80903: PPUSH
80904: LD_VAR 0 4
80908: PPUSH
80909: CALL_OW 74
80913: PPUSH
80914: CALL 82178 0 2
// end else
80918: GO 81020
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80920: LD_VAR 0 4
80924: PPUSH
80925: LD_VAR 0 2
80929: PUSH
80930: LD_VAR 0 9
80934: ARRAY
80935: PUSH
80936: LD_INT 1
80938: ARRAY
80939: PPUSH
80940: LD_VAR 0 2
80944: PUSH
80945: LD_VAR 0 9
80949: ARRAY
80950: PUSH
80951: LD_INT 2
80953: ARRAY
80954: PPUSH
80955: CALL_OW 297
80959: PUSH
80960: LD_INT 6
80962: GREATER
80963: IFFALSE 81006
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80965: LD_VAR 0 4
80969: PPUSH
80970: LD_VAR 0 2
80974: PUSH
80975: LD_VAR 0 9
80979: ARRAY
80980: PUSH
80981: LD_INT 1
80983: ARRAY
80984: PPUSH
80985: LD_VAR 0 2
80989: PUSH
80990: LD_VAR 0 9
80994: ARRAY
80995: PUSH
80996: LD_INT 2
80998: ARRAY
80999: PPUSH
81000: CALL_OW 114
81004: GO 81020
// SetTag ( i , tag ) ;
81006: LD_VAR 0 4
81010: PPUSH
81011: LD_VAR 0 9
81015: PPUSH
81016: CALL_OW 109
// end else
81020: GO 81093
// if enemy then
81022: LD_VAR 0 5
81026: IFFALSE 81093
// begin if GetWeapon ( i ) = ru_time_lapser then
81028: LD_VAR 0 4
81032: PPUSH
81033: CALL_OW 264
81037: PUSH
81038: LD_INT 49
81040: EQUAL
81041: IFFALSE 81069
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81043: LD_VAR 0 4
81047: PPUSH
81048: LD_VAR 0 5
81052: PPUSH
81053: LD_VAR 0 4
81057: PPUSH
81058: CALL_OW 74
81062: PPUSH
81063: CALL_OW 112
81067: GO 81093
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81069: LD_VAR 0 4
81073: PPUSH
81074: LD_VAR 0 5
81078: PPUSH
81079: LD_VAR 0 4
81083: PPUSH
81084: CALL_OW 74
81088: PPUSH
81089: CALL 82178 0 2
// end ; end ;
81093: GO 80665
81095: POP
81096: POP
// end ;
81097: LD_VAR 0 3
81101: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81102: LD_INT 0
81104: PPUSH
81105: PPUSH
81106: PPUSH
// if not unit or IsInUnit ( unit ) then
81107: LD_VAR 0 1
81111: NOT
81112: IFTRUE 81125
81114: PUSH
81115: LD_VAR 0 1
81119: PPUSH
81120: CALL_OW 310
81124: OR
81125: IFFALSE 81129
// exit ;
81127: GO 81220
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81129: LD_ADDR_VAR 0 4
81133: PUSH
81134: LD_VAR 0 1
81138: PPUSH
81139: CALL_OW 250
81143: PPUSH
81144: LD_VAR 0 2
81148: PPUSH
81149: LD_INT 1
81151: PPUSH
81152: CALL_OW 272
81156: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81157: LD_ADDR_VAR 0 5
81161: PUSH
81162: LD_VAR 0 1
81166: PPUSH
81167: CALL_OW 251
81171: PPUSH
81172: LD_VAR 0 2
81176: PPUSH
81177: LD_INT 1
81179: PPUSH
81180: CALL_OW 273
81184: ST_TO_ADDR
// if ValidHex ( x , y ) then
81185: LD_VAR 0 4
81189: PPUSH
81190: LD_VAR 0 5
81194: PPUSH
81195: CALL_OW 488
81199: IFFALSE 81220
// ComTurnXY ( unit , x , y ) ;
81201: LD_VAR 0 1
81205: PPUSH
81206: LD_VAR 0 4
81210: PPUSH
81211: LD_VAR 0 5
81215: PPUSH
81216: CALL_OW 118
// end ;
81220: LD_VAR 0 3
81224: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81225: LD_INT 0
81227: PPUSH
81228: PPUSH
// result := false ;
81229: LD_ADDR_VAR 0 3
81233: PUSH
81234: LD_INT 0
81236: ST_TO_ADDR
// if not units then
81237: LD_VAR 0 2
81241: NOT
81242: IFFALSE 81246
// exit ;
81244: GO 81291
// for i in units do
81246: LD_ADDR_VAR 0 4
81250: PUSH
81251: LD_VAR 0 2
81255: PUSH
81256: FOR_IN
81257: IFFALSE 81289
// if See ( side , i ) then
81259: LD_VAR 0 1
81263: PPUSH
81264: LD_VAR 0 4
81268: PPUSH
81269: CALL_OW 292
81273: IFFALSE 81287
// begin result := true ;
81275: LD_ADDR_VAR 0 3
81279: PUSH
81280: LD_INT 1
81282: ST_TO_ADDR
// exit ;
81283: POP
81284: POP
81285: GO 81291
// end ;
81287: GO 81256
81289: POP
81290: POP
// end ;
81291: LD_VAR 0 3
81295: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81296: LD_INT 0
81298: PPUSH
81299: PPUSH
81300: PPUSH
81301: PPUSH
// if not unit or not points then
81302: LD_VAR 0 1
81306: NOT
81307: IFTRUE 81316
81309: PUSH
81310: LD_VAR 0 2
81314: NOT
81315: OR
81316: IFFALSE 81320
// exit ;
81318: GO 81410
// dist := 99999 ;
81320: LD_ADDR_VAR 0 5
81324: PUSH
81325: LD_INT 99999
81327: ST_TO_ADDR
// for i in points do
81328: LD_ADDR_VAR 0 4
81332: PUSH
81333: LD_VAR 0 2
81337: PUSH
81338: FOR_IN
81339: IFFALSE 81408
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81341: LD_ADDR_VAR 0 6
81345: PUSH
81346: LD_VAR 0 1
81350: PPUSH
81351: LD_VAR 0 4
81355: PUSH
81356: LD_INT 1
81358: ARRAY
81359: PPUSH
81360: LD_VAR 0 4
81364: PUSH
81365: LD_INT 2
81367: ARRAY
81368: PPUSH
81369: CALL_OW 297
81373: ST_TO_ADDR
// if tmpDist < dist then
81374: LD_VAR 0 6
81378: PUSH
81379: LD_VAR 0 5
81383: LESS
81384: IFFALSE 81406
// begin result := i ;
81386: LD_ADDR_VAR 0 3
81390: PUSH
81391: LD_VAR 0 4
81395: ST_TO_ADDR
// dist := tmpDist ;
81396: LD_ADDR_VAR 0 5
81400: PUSH
81401: LD_VAR 0 6
81405: ST_TO_ADDR
// end ; end ;
81406: GO 81338
81408: POP
81409: POP
// end ;
81410: LD_VAR 0 3
81414: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81415: LD_INT 0
81417: PPUSH
// uc_side := side ;
81418: LD_ADDR_OWVAR 20
81422: PUSH
81423: LD_VAR 0 1
81427: ST_TO_ADDR
// uc_nation := 3 ;
81428: LD_ADDR_OWVAR 21
81432: PUSH
81433: LD_INT 3
81435: ST_TO_ADDR
// vc_chassis := 25 ;
81436: LD_ADDR_OWVAR 37
81440: PUSH
81441: LD_INT 25
81443: ST_TO_ADDR
// vc_engine := engine_siberite ;
81444: LD_ADDR_OWVAR 39
81448: PUSH
81449: LD_INT 3
81451: ST_TO_ADDR
// vc_control := control_computer ;
81452: LD_ADDR_OWVAR 38
81456: PUSH
81457: LD_INT 3
81459: ST_TO_ADDR
// vc_weapon := 59 ;
81460: LD_ADDR_OWVAR 40
81464: PUSH
81465: LD_INT 59
81467: ST_TO_ADDR
// result := CreateVehicle ;
81468: LD_ADDR_VAR 0 5
81472: PUSH
81473: CALL_OW 45
81477: ST_TO_ADDR
// SetDir ( result , d ) ;
81478: LD_VAR 0 5
81482: PPUSH
81483: LD_VAR 0 4
81487: PPUSH
81488: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81492: LD_VAR 0 5
81496: PPUSH
81497: LD_VAR 0 2
81501: PPUSH
81502: LD_VAR 0 3
81506: PPUSH
81507: LD_INT 0
81509: PPUSH
81510: CALL_OW 48
// end ;
81514: LD_VAR 0 5
81518: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81519: LD_INT 0
81521: PPUSH
81522: PPUSH
81523: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81524: LD_ADDR_VAR 0 2
81528: PUSH
81529: LD_INT 0
81531: PUSH
81532: LD_INT 0
81534: PUSH
81535: LD_INT 0
81537: PUSH
81538: LD_INT 0
81540: PUSH
81541: EMPTY
81542: LIST
81543: LIST
81544: LIST
81545: LIST
81546: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81547: LD_VAR 0 1
81551: NOT
81552: IFTRUE 81585
81554: PUSH
81555: LD_VAR 0 1
81559: PPUSH
81560: CALL_OW 264
81564: PUSH
81565: LD_INT 12
81567: PUSH
81568: LD_INT 51
81570: PUSH
81571: LD_INT 32
81573: PUSH
81574: LD_INT 89
81576: PUSH
81577: EMPTY
81578: LIST
81579: LIST
81580: LIST
81581: LIST
81582: IN
81583: NOT
81584: OR
81585: IFFALSE 81589
// exit ;
81587: GO 81687
// for i := 1 to 3 do
81589: LD_ADDR_VAR 0 3
81593: PUSH
81594: DOUBLE
81595: LD_INT 1
81597: DEC
81598: ST_TO_ADDR
81599: LD_INT 3
81601: PUSH
81602: FOR_TO
81603: IFFALSE 81685
// begin tmp := GetCargo ( cargo , i ) ;
81605: LD_ADDR_VAR 0 4
81609: PUSH
81610: LD_VAR 0 1
81614: PPUSH
81615: LD_VAR 0 3
81619: PPUSH
81620: CALL_OW 289
81624: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81625: LD_ADDR_VAR 0 2
81629: PUSH
81630: LD_VAR 0 2
81634: PPUSH
81635: LD_VAR 0 3
81639: PPUSH
81640: LD_VAR 0 4
81644: PPUSH
81645: CALL_OW 1
81649: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81650: LD_ADDR_VAR 0 2
81654: PUSH
81655: LD_VAR 0 2
81659: PPUSH
81660: LD_INT 4
81662: PPUSH
81663: LD_VAR 0 2
81667: PUSH
81668: LD_INT 4
81670: ARRAY
81671: PUSH
81672: LD_VAR 0 4
81676: PLUS
81677: PPUSH
81678: CALL_OW 1
81682: ST_TO_ADDR
// end ;
81683: GO 81602
81685: POP
81686: POP
// end ;
81687: LD_VAR 0 2
81691: RET
// export function Length ( array ) ; begin
81692: LD_INT 0
81694: PPUSH
// result := array + 0 ;
81695: LD_ADDR_VAR 0 2
81699: PUSH
81700: LD_VAR 0 1
81704: PUSH
81705: LD_INT 0
81707: PLUS
81708: ST_TO_ADDR
// end ;
81709: LD_VAR 0 2
81713: RET
// export function PrepareArray ( array ) ; begin
81714: LD_INT 0
81716: PPUSH
// result := array diff 0 ;
81717: LD_ADDR_VAR 0 2
81721: PUSH
81722: LD_VAR 0 1
81726: PUSH
81727: LD_INT 0
81729: DIFF
81730: ST_TO_ADDR
// if not result [ 1 ] then
81731: LD_VAR 0 2
81735: PUSH
81736: LD_INT 1
81738: ARRAY
81739: NOT
81740: IFFALSE 81760
// result := Delete ( result , 1 ) ;
81742: LD_ADDR_VAR 0 2
81746: PUSH
81747: LD_VAR 0 2
81751: PPUSH
81752: LD_INT 1
81754: PPUSH
81755: CALL_OW 3
81759: ST_TO_ADDR
// end ;
81760: LD_VAR 0 2
81764: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81765: LD_INT 0
81767: PPUSH
81768: PPUSH
81769: PPUSH
81770: PPUSH
// sibRocketRange := 25 ;
81771: LD_ADDR_VAR 0 6
81775: PUSH
81776: LD_INT 25
81778: ST_TO_ADDR
// result := false ;
81779: LD_ADDR_VAR 0 4
81783: PUSH
81784: LD_INT 0
81786: ST_TO_ADDR
// for i := 0 to 5 do
81787: LD_ADDR_VAR 0 5
81791: PUSH
81792: DOUBLE
81793: LD_INT 0
81795: DEC
81796: ST_TO_ADDR
81797: LD_INT 5
81799: PUSH
81800: FOR_TO
81801: IFFALSE 81868
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81803: LD_VAR 0 1
81807: PPUSH
81808: LD_VAR 0 5
81812: PPUSH
81813: LD_VAR 0 6
81817: PPUSH
81818: CALL_OW 272
81822: PPUSH
81823: LD_VAR 0 2
81827: PPUSH
81828: LD_VAR 0 5
81832: PPUSH
81833: LD_VAR 0 6
81837: PPUSH
81838: CALL_OW 273
81842: PPUSH
81843: LD_VAR 0 3
81847: PPUSH
81848: CALL_OW 309
81852: IFFALSE 81866
// begin result := true ;
81854: LD_ADDR_VAR 0 4
81858: PUSH
81859: LD_INT 1
81861: ST_TO_ADDR
// exit ;
81862: POP
81863: POP
81864: GO 81870
// end ;
81866: GO 81800
81868: POP
81869: POP
// end ;
81870: LD_VAR 0 4
81874: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
81875: LD_INT 0
81877: PPUSH
81878: PPUSH
81879: PPUSH
// if btype = b_depot then
81880: LD_VAR 0 2
81884: PUSH
81885: LD_INT 0
81887: EQUAL
81888: IFFALSE 81900
// begin result := true ;
81890: LD_ADDR_VAR 0 3
81894: PUSH
81895: LD_INT 1
81897: ST_TO_ADDR
// exit ;
81898: GO 82020
// end ; pom := GetBase ( depot ) ;
81900: LD_ADDR_VAR 0 4
81904: PUSH
81905: LD_VAR 0 1
81909: PPUSH
81910: CALL_OW 274
81914: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
81915: LD_ADDR_VAR 0 5
81919: PUSH
81920: LD_VAR 0 2
81924: PPUSH
81925: LD_VAR 0 1
81929: PPUSH
81930: CALL_OW 248
81934: PPUSH
81935: CALL_OW 450
81939: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
81940: LD_ADDR_VAR 0 3
81944: PUSH
81945: LD_VAR 0 4
81949: PPUSH
81950: LD_INT 1
81952: PPUSH
81953: CALL_OW 275
81957: PUSH
81958: LD_VAR 0 5
81962: PUSH
81963: LD_INT 1
81965: ARRAY
81966: GREATEREQUAL
81967: IFFALSE 81993
81969: PUSH
81970: LD_VAR 0 4
81974: PPUSH
81975: LD_INT 2
81977: PPUSH
81978: CALL_OW 275
81982: PUSH
81983: LD_VAR 0 5
81987: PUSH
81988: LD_INT 2
81990: ARRAY
81991: GREATEREQUAL
81992: AND
81993: IFFALSE 82019
81995: PUSH
81996: LD_VAR 0 4
82000: PPUSH
82001: LD_INT 3
82003: PPUSH
82004: CALL_OW 275
82008: PUSH
82009: LD_VAR 0 5
82013: PUSH
82014: LD_INT 3
82016: ARRAY
82017: GREATEREQUAL
82018: AND
82019: ST_TO_ADDR
// end ;
82020: LD_VAR 0 3
82024: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82025: LD_INT 0
82027: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82028: LD_VAR 0 1
82032: PPUSH
82033: LD_VAR 0 2
82037: PPUSH
82038: LD_INT 0
82040: PPUSH
82041: LD_INT 0
82043: PPUSH
82044: LD_INT 1
82046: PPUSH
82047: LD_INT 0
82049: PPUSH
82050: CALL_OW 587
// end ;
82054: LD_VAR 0 3
82058: RET
// export function CenterOnNow ( unit ) ; begin
82059: LD_INT 0
82061: PPUSH
// result := IsInUnit ( unit ) ;
82062: LD_ADDR_VAR 0 2
82066: PUSH
82067: LD_VAR 0 1
82071: PPUSH
82072: CALL_OW 310
82076: ST_TO_ADDR
// if not result then
82077: LD_VAR 0 2
82081: NOT
82082: IFFALSE 82094
// result := unit ;
82084: LD_ADDR_VAR 0 2
82088: PUSH
82089: LD_VAR 0 1
82093: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82094: LD_VAR 0 1
82098: PPUSH
82099: CALL_OW 87
// end ;
82103: LD_VAR 0 2
82107: RET
// export function ComMoveHex ( unit , hex ) ; begin
82108: LD_INT 0
82110: PPUSH
// if not hex then
82111: LD_VAR 0 2
82115: NOT
82116: IFFALSE 82120
// exit ;
82118: GO 82173
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82120: LD_VAR 0 2
82124: PUSH
82125: LD_INT 1
82127: ARRAY
82128: PPUSH
82129: LD_VAR 0 2
82133: PUSH
82134: LD_INT 2
82136: ARRAY
82137: PPUSH
82138: CALL_OW 428
82142: IFFALSE 82146
// exit ;
82144: GO 82173
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82146: LD_VAR 0 1
82150: PPUSH
82151: LD_VAR 0 2
82155: PUSH
82156: LD_INT 1
82158: ARRAY
82159: PPUSH
82160: LD_VAR 0 2
82164: PUSH
82165: LD_INT 2
82167: ARRAY
82168: PPUSH
82169: CALL_OW 111
// end ;
82173: LD_VAR 0 3
82177: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82178: LD_INT 0
82180: PPUSH
82181: PPUSH
82182: PPUSH
// if not unit or not enemy then
82183: LD_VAR 0 1
82187: NOT
82188: IFTRUE 82197
82190: PUSH
82191: LD_VAR 0 2
82195: NOT
82196: OR
82197: IFFALSE 82201
// exit ;
82199: GO 82327
// x := GetX ( enemy ) ;
82201: LD_ADDR_VAR 0 4
82205: PUSH
82206: LD_VAR 0 2
82210: PPUSH
82211: CALL_OW 250
82215: ST_TO_ADDR
// y := GetY ( enemy ) ;
82216: LD_ADDR_VAR 0 5
82220: PUSH
82221: LD_VAR 0 2
82225: PPUSH
82226: CALL_OW 251
82230: ST_TO_ADDR
// if ValidHex ( x , y ) then
82231: LD_VAR 0 4
82235: PPUSH
82236: LD_VAR 0 5
82240: PPUSH
82241: CALL_OW 488
82245: IFFALSE 82327
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82247: LD_VAR 0 2
82251: PPUSH
82252: CALL_OW 247
82256: PUSH
82257: LD_INT 3
82259: PUSH
82260: LD_INT 2
82262: PUSH
82263: EMPTY
82264: LIST
82265: LIST
82266: IN
82267: IFTRUE 82290
82269: PUSH
82270: LD_VAR 0 1
82274: PPUSH
82275: CALL_OW 255
82279: PPUSH
82280: LD_VAR 0 2
82284: PPUSH
82285: CALL_OW 292
82289: OR
82290: IFFALSE 82308
// ComAttackUnit ( unit , enemy ) else
82292: LD_VAR 0 1
82296: PPUSH
82297: LD_VAR 0 2
82301: PPUSH
82302: CALL_OW 115
82306: GO 82327
// ComAgressiveMove ( unit , x , y ) ;
82308: LD_VAR 0 1
82312: PPUSH
82313: LD_VAR 0 4
82317: PPUSH
82318: LD_VAR 0 5
82322: PPUSH
82323: CALL_OW 114
// end ;
82327: LD_VAR 0 3
82331: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82332: LD_INT 0
82334: PPUSH
82335: PPUSH
82336: PPUSH
// list := AreaToList ( area , 0 ) ;
82337: LD_ADDR_VAR 0 5
82341: PUSH
82342: LD_VAR 0 1
82346: PPUSH
82347: LD_INT 0
82349: PPUSH
82350: CALL_OW 517
82354: ST_TO_ADDR
// if not list then
82355: LD_VAR 0 5
82359: NOT
82360: IFFALSE 82364
// exit ;
82362: GO 82494
// if all then
82364: LD_VAR 0 2
82368: IFFALSE 82456
// begin for i := 1 to list [ 1 ] do
82370: LD_ADDR_VAR 0 4
82374: PUSH
82375: DOUBLE
82376: LD_INT 1
82378: DEC
82379: ST_TO_ADDR
82380: LD_VAR 0 5
82384: PUSH
82385: LD_INT 1
82387: ARRAY
82388: PUSH
82389: FOR_TO
82390: IFFALSE 82452
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82392: LD_ADDR_VAR 0 3
82396: PUSH
82397: LD_VAR 0 3
82401: PPUSH
82402: LD_VAR 0 3
82406: PUSH
82407: LD_INT 1
82409: PLUS
82410: PPUSH
82411: LD_VAR 0 5
82415: PUSH
82416: LD_INT 1
82418: ARRAY
82419: PUSH
82420: LD_VAR 0 4
82424: ARRAY
82425: PUSH
82426: LD_VAR 0 5
82430: PUSH
82431: LD_INT 2
82433: ARRAY
82434: PUSH
82435: LD_VAR 0 4
82439: ARRAY
82440: PUSH
82441: EMPTY
82442: LIST
82443: LIST
82444: PPUSH
82445: CALL_OW 1
82449: ST_TO_ADDR
82450: GO 82389
82452: POP
82453: POP
// exit ;
82454: GO 82494
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82456: LD_ADDR_VAR 0 3
82460: PUSH
82461: LD_VAR 0 5
82465: PUSH
82466: LD_INT 1
82468: ARRAY
82469: PUSH
82470: LD_INT 1
82472: ARRAY
82473: PUSH
82474: LD_VAR 0 5
82478: PUSH
82479: LD_INT 2
82481: ARRAY
82482: PUSH
82483: LD_INT 1
82485: ARRAY
82486: PUSH
82487: EMPTY
82488: LIST
82489: LIST
82490: PUSH
82491: EMPTY
82492: LIST
82493: ST_TO_ADDR
// end ;
82494: LD_VAR 0 3
82498: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82499: LD_INT 0
82501: PPUSH
82502: PPUSH
// list := AreaToList ( area , 0 ) ;
82503: LD_ADDR_VAR 0 4
82507: PUSH
82508: LD_VAR 0 1
82512: PPUSH
82513: LD_INT 0
82515: PPUSH
82516: CALL_OW 517
82520: ST_TO_ADDR
// if not list then
82521: LD_VAR 0 4
82525: NOT
82526: IFFALSE 82530
// exit ;
82528: GO 82571
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82530: LD_ADDR_VAR 0 3
82534: PUSH
82535: LD_VAR 0 4
82539: PUSH
82540: LD_INT 1
82542: ARRAY
82543: PUSH
82544: LD_INT 1
82546: ARRAY
82547: PUSH
82548: LD_VAR 0 4
82552: PUSH
82553: LD_INT 2
82555: ARRAY
82556: PUSH
82557: LD_INT 1
82559: ARRAY
82560: PUSH
82561: LD_VAR 0 2
82565: PUSH
82566: EMPTY
82567: LIST
82568: LIST
82569: LIST
82570: ST_TO_ADDR
// end ;
82571: LD_VAR 0 3
82575: RET
// export function First ( array ) ; begin
82576: LD_INT 0
82578: PPUSH
// if not array then
82579: LD_VAR 0 1
82583: NOT
82584: IFFALSE 82588
// exit ;
82586: GO 82602
// result := array [ 1 ] ;
82588: LD_ADDR_VAR 0 2
82592: PUSH
82593: LD_VAR 0 1
82597: PUSH
82598: LD_INT 1
82600: ARRAY
82601: ST_TO_ADDR
// end ;
82602: LD_VAR 0 2
82606: RET
// export function Last ( array ) ; begin
82607: LD_INT 0
82609: PPUSH
// if not array then
82610: LD_VAR 0 1
82614: NOT
82615: IFFALSE 82619
// exit ;
82617: GO 82635
// result := array [ array ] ;
82619: LD_ADDR_VAR 0 2
82623: PUSH
82624: LD_VAR 0 1
82628: PUSH
82629: LD_VAR 0 1
82633: ARRAY
82634: ST_TO_ADDR
// end ;
82635: LD_VAR 0 2
82639: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82640: LD_INT 0
82642: PPUSH
82643: PPUSH
// result := [ ] ;
82644: LD_ADDR_VAR 0 5
82648: PUSH
82649: EMPTY
82650: ST_TO_ADDR
// if not array then
82651: LD_VAR 0 1
82655: NOT
82656: IFFALSE 82660
// exit ;
82658: GO 82772
// for i := 1 to array do
82660: LD_ADDR_VAR 0 6
82664: PUSH
82665: DOUBLE
82666: LD_INT 1
82668: DEC
82669: ST_TO_ADDR
82670: LD_VAR 0 1
82674: PUSH
82675: FOR_TO
82676: IFFALSE 82770
// if array [ i ] [ index ] = value then
82678: LD_VAR 0 1
82682: PUSH
82683: LD_VAR 0 6
82687: ARRAY
82688: PUSH
82689: LD_VAR 0 2
82693: ARRAY
82694: PUSH
82695: LD_VAR 0 3
82699: EQUAL
82700: IFFALSE 82768
// begin if indexColumn then
82702: LD_VAR 0 4
82706: IFFALSE 82742
// result := Join ( result , array [ i ] [ indexColumn ] ) else
82708: LD_ADDR_VAR 0 5
82712: PUSH
82713: LD_VAR 0 5
82717: PPUSH
82718: LD_VAR 0 1
82722: PUSH
82723: LD_VAR 0 6
82727: ARRAY
82728: PUSH
82729: LD_VAR 0 4
82733: ARRAY
82734: PPUSH
82735: CALL 77780 0 2
82739: ST_TO_ADDR
82740: GO 82768
// result := Join ( result , array [ i ] ) ;
82742: LD_ADDR_VAR 0 5
82746: PUSH
82747: LD_VAR 0 5
82751: PPUSH
82752: LD_VAR 0 1
82756: PUSH
82757: LD_VAR 0 6
82761: ARRAY
82762: PPUSH
82763: CALL 77780 0 2
82767: ST_TO_ADDR
// end ;
82768: GO 82675
82770: POP
82771: POP
// end ;
82772: LD_VAR 0 5
82776: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
82777: LD_INT 0
82779: PPUSH
// if not vehicles or not parkingPoint then
82780: LD_VAR 0 1
82784: NOT
82785: IFTRUE 82794
82787: PUSH
82788: LD_VAR 0 2
82792: NOT
82793: OR
82794: IFFALSE 82798
// exit ;
82796: GO 82896
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
82798: LD_ADDR_VAR 0 1
82802: PUSH
82803: LD_VAR 0 1
82807: PPUSH
82808: LD_INT 50
82810: PUSH
82811: EMPTY
82812: LIST
82813: PUSH
82814: LD_INT 3
82816: PUSH
82817: LD_INT 92
82819: PUSH
82820: LD_VAR 0 2
82824: PUSH
82825: LD_INT 1
82827: ARRAY
82828: PUSH
82829: LD_VAR 0 2
82833: PUSH
82834: LD_INT 2
82836: ARRAY
82837: PUSH
82838: LD_INT 8
82840: PUSH
82841: EMPTY
82842: LIST
82843: LIST
82844: LIST
82845: LIST
82846: PUSH
82847: EMPTY
82848: LIST
82849: LIST
82850: PUSH
82851: EMPTY
82852: LIST
82853: LIST
82854: PPUSH
82855: CALL_OW 72
82859: ST_TO_ADDR
// if not vehicles then
82860: LD_VAR 0 1
82864: NOT
82865: IFFALSE 82869
// exit ;
82867: GO 82896
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
82869: LD_VAR 0 1
82873: PPUSH
82874: LD_VAR 0 2
82878: PUSH
82879: LD_INT 1
82881: ARRAY
82882: PPUSH
82883: LD_VAR 0 2
82887: PUSH
82888: LD_INT 2
82890: ARRAY
82891: PPUSH
82892: CALL_OW 111
// end ;
82896: LD_VAR 0 3
82900: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
82901: LD_INT 0
82903: PPUSH
82904: PPUSH
82905: PPUSH
// if not side or not area then
82906: LD_VAR 0 1
82910: NOT
82911: IFTRUE 82920
82913: PUSH
82914: LD_VAR 0 2
82918: NOT
82919: OR
82920: IFFALSE 82924
// exit ;
82922: GO 83043
// tmp := AreaToList ( area , 0 ) ;
82924: LD_ADDR_VAR 0 5
82928: PUSH
82929: LD_VAR 0 2
82933: PPUSH
82934: LD_INT 0
82936: PPUSH
82937: CALL_OW 517
82941: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
82942: LD_ADDR_VAR 0 4
82946: PUSH
82947: DOUBLE
82948: LD_INT 1
82950: DEC
82951: ST_TO_ADDR
82952: LD_VAR 0 5
82956: PUSH
82957: LD_INT 1
82959: ARRAY
82960: PUSH
82961: FOR_TO
82962: IFFALSE 83041
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
82964: LD_VAR 0 5
82968: PUSH
82969: LD_INT 1
82971: ARRAY
82972: PUSH
82973: LD_VAR 0 4
82977: ARRAY
82978: PPUSH
82979: LD_VAR 0 5
82983: PUSH
82984: LD_INT 2
82986: ARRAY
82987: PUSH
82988: LD_VAR 0 4
82992: ARRAY
82993: PPUSH
82994: CALL_OW 351
82998: IFFALSE 83039
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83000: LD_VAR 0 5
83004: PUSH
83005: LD_INT 1
83007: ARRAY
83008: PUSH
83009: LD_VAR 0 4
83013: ARRAY
83014: PPUSH
83015: LD_VAR 0 5
83019: PUSH
83020: LD_INT 2
83022: ARRAY
83023: PUSH
83024: LD_VAR 0 4
83028: ARRAY
83029: PPUSH
83030: LD_VAR 0 1
83034: PPUSH
83035: CALL_OW 244
// end ;
83039: GO 82961
83041: POP
83042: POP
// end ;
83043: LD_VAR 0 3
83047: RET
// export function UniqueArray ( array ) ; var i ; begin
83048: LD_INT 0
83050: PPUSH
83051: PPUSH
// result := [ ] ;
83052: LD_ADDR_VAR 0 2
83056: PUSH
83057: EMPTY
83058: ST_TO_ADDR
// if not array then
83059: LD_VAR 0 1
83063: NOT
83064: IFFALSE 83068
// exit ;
83066: GO 83129
// for i := 1 to array do
83068: LD_ADDR_VAR 0 3
83072: PUSH
83073: DOUBLE
83074: LD_INT 1
83076: DEC
83077: ST_TO_ADDR
83078: LD_VAR 0 1
83082: PUSH
83083: FOR_TO
83084: IFFALSE 83127
// if not array [ i ] in result then
83086: LD_VAR 0 1
83090: PUSH
83091: LD_VAR 0 3
83095: ARRAY
83096: PUSH
83097: LD_VAR 0 2
83101: IN
83102: NOT
83103: IFFALSE 83125
// result := Join ( result , i ) ;
83105: LD_ADDR_VAR 0 2
83109: PUSH
83110: LD_VAR 0 2
83114: PPUSH
83115: LD_VAR 0 3
83119: PPUSH
83120: CALL 77780 0 2
83124: ST_TO_ADDR
83125: GO 83083
83127: POP
83128: POP
// end ; end_of_file
83129: LD_VAR 0 2
83133: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83134: LD_VAR 0 1
83138: PPUSH
83139: LD_VAR 0 2
83143: PPUSH
83144: LD_VAR 0 3
83148: PPUSH
83149: LD_VAR 0 4
83153: PPUSH
83154: LD_VAR 0 5
83158: PPUSH
83159: LD_VAR 0 6
83163: PPUSH
83164: CALL 18152 0 6
// end ;
83168: PPOPN 6
83170: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83171: LD_INT 0
83173: PPUSH
// begin if not units then
83174: LD_VAR 0 1
83178: NOT
83179: IFFALSE 83183
// exit ;
83181: GO 83183
// end ;
83183: PPOPN 7
83185: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83186: CALL 18039 0 0
// end ;
83190: PPOPN 1
83192: END
