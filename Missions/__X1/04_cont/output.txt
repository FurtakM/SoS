// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 861 0 0
// PrepareArabian ;
  12: CALL 1237 0 0
// PrepareAmerican ;
  16: CALL 6796 0 0
// PrepareRussian ;
  20: CALL 2225 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8366 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: IFTRUE 573
 566: PUSH
 567: LD_VAR 0 2
 571: NOT
 572: OR
 573: IFFALSE 577
// exit ;
 575: GO 625
// if not See ( GetSide ( observer ) , unit ) then
 577: LD_VAR 0 1
 581: PPUSH
 582: CALL_OW 255
 586: PPUSH
 587: LD_VAR 0 2
 591: PPUSH
 592: CALL_OW 292
 596: NOT
 597: IFFALSE 601
// exit ;
 599: GO 625
// result := GetDistUnits ( observer , unit ) < 12 ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: LD_VAR 0 1
 610: PPUSH
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 296
 620: PUSH
 621: LD_INT 12
 623: LESS
 624: ST_TO_ADDR
// end ;
 625: LD_VAR 0 3
 629: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 630: LD_INT 0
 632: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 633: LD_VAR 0 2
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: PPUSH
 642: LD_VAR 0 2
 646: PUSH
 647: LD_INT 2
 649: ARRAY
 650: PPUSH
 651: CALL_OW 488
 655: IFFALSE 685
 657: PUSH
 658: LD_VAR 0 2
 662: PUSH
 663: LD_INT 1
 665: ARRAY
 666: PPUSH
 667: LD_VAR 0 2
 671: PUSH
 672: LD_INT 2
 674: ARRAY
 675: PPUSH
 676: CALL_OW 428
 680: PUSH
 681: LD_INT 0
 683: EQUAL
 684: AND
 685: IFFALSE 719
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 687: LD_VAR 0 1
 691: PPUSH
 692: LD_VAR 0 2
 696: PUSH
 697: LD_INT 1
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 2
 705: PUSH
 706: LD_INT 2
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 3
 714: PPUSH
 715: CALL_OW 48
// end ;
 719: LD_VAR 0 4
 723: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
// InitUc ;
 728: CALL_OW 18
// InitHc ;
 732: CALL_OW 19
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i = 1 to amount do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_VAR 0 2
 766: PUSH
 767: FOR_TO
 768: IFFALSE 850
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 770: LD_ADDR_OWVAR 29
 774: PUSH
 775: LD_INT 9
 777: PPUSH
 778: LD_INT 12
 780: PPUSH
 781: CALL_OW 12
 785: PUSH
 786: LD_INT 9
 788: PPUSH
 789: LD_INT 12
 791: PPUSH
 792: CALL_OW 12
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 801: LD_ADDR_OWVAR 35
 805: PUSH
 806: LD_INT 1
 808: NEG
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL_OW 12
 817: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 818: LD_INT 0
 820: PPUSH
 821: LD_INT 12
 823: PPUSH
 824: LD_INT 1
 826: PPUSH
 827: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 831: CALL_OW 44
 835: PPUSH
 836: LD_VAR 0 1
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// end ;
 848: GO 767
 850: POP
 851: POP
// InitHc ;
 852: CALL_OW 19
// end ;
 856: LD_VAR 0 3
 860: RET
// export function CreateNature ; var i ; begin
 861: LD_INT 0
 863: PPUSH
 864: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 865: LD_INT 18
 867: PPUSH
 868: LD_INT 5
 870: PUSH
 871: LD_INT 4
 873: PUSH
 874: LD_INT 3
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_OWVAR 67
 890: ARRAY
 891: PPUSH
 892: CALL 724 0 2
// for i := 1 to 3 do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_INT 3
 908: PUSH
 909: FOR_TO
 910: IFFALSE 945
// begin hc_class := 21 ;
 912: LD_ADDR_OWVAR 28
 916: PUSH
 917: LD_INT 21
 919: ST_TO_ADDR
// hc_gallery :=  ;
 920: LD_ADDR_OWVAR 33
 924: PUSH
 925: LD_STRING 
 927: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 928: CALL_OW 44
 932: PPUSH
 933: LD_INT 18
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ;
 943: GO 909
 945: POP
 946: POP
// for i := 1 to 2 do
 947: LD_ADDR_VAR 0 2
 951: PUSH
 952: DOUBLE
 953: LD_INT 1
 955: DEC
 956: ST_TO_ADDR
 957: LD_INT 2
 959: PUSH
 960: FOR_TO
 961: IFFALSE 996
// begin hc_class := 18 ;
 963: LD_ADDR_OWVAR 28
 967: PUSH
 968: LD_INT 18
 970: ST_TO_ADDR
// hc_gallery :=  ;
 971: LD_ADDR_OWVAR 33
 975: PUSH
 976: LD_STRING 
 978: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 979: CALL_OW 44
 983: PPUSH
 984: LD_INT 18
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: GO 960
 996: POP
 997: POP
// for i := 1 to 2 do
 998: LD_ADDR_VAR 0 2
1002: PUSH
1003: DOUBLE
1004: LD_INT 1
1006: DEC
1007: ST_TO_ADDR
1008: LD_INT 2
1010: PUSH
1011: FOR_TO
1012: IFFALSE 1047
// begin hc_class := 13 ;
1014: LD_ADDR_OWVAR 28
1018: PUSH
1019: LD_INT 13
1021: ST_TO_ADDR
// hc_gallery :=  ;
1022: LD_ADDR_OWVAR 33
1026: PUSH
1027: LD_STRING 
1029: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1030: CALL_OW 44
1034: PPUSH
1035: LD_INT 18
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end ;
1045: GO 1011
1047: POP
1048: POP
// end ;
1049: LD_VAR 0 1
1053: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1054: LD_INT 0
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
1060: PPUSH
// result := false ;
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: LD_INT 0
1068: ST_TO_ADDR
// if not sideList or not enemySide then
1069: LD_VAR 0 1
1073: NOT
1074: IFTRUE 1083
1076: PUSH
1077: LD_VAR 0 2
1081: NOT
1082: OR
1083: IFFALSE 1087
// exit ;
1085: GO 1232
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1087: LD_ADDR_VAR 0 7
1091: PUSH
1092: LD_INT 22
1094: PUSH
1095: LD_VAR 0 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PPUSH
1104: CALL_OW 69
1108: ST_TO_ADDR
// if not tmp then
1109: LD_VAR 0 7
1113: NOT
1114: IFFALSE 1118
// exit ;
1116: GO 1232
// for s in sideList do
1118: LD_ADDR_VAR 0 6
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: FOR_IN
1129: IFFALSE 1230
// for i in tmp do
1131: LD_ADDR_VAR 0 5
1135: PUSH
1136: LD_VAR 0 7
1140: PUSH
1141: FOR_IN
1142: IFFALSE 1226
// if See ( s , i ) then
1144: LD_VAR 0 6
1148: PPUSH
1149: LD_VAR 0 5
1153: PPUSH
1154: CALL_OW 292
1158: IFFALSE 1224
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1160: LD_ADDR_VAR 0 8
1164: PUSH
1165: LD_INT 22
1167: PUSH
1168: LD_VAR 0 6
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PPUSH
1177: CALL_OW 69
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL_OW 74
1191: ST_TO_ADDR
// if tmp2 in exceptUnits then
1192: LD_VAR 0 8
1196: PUSH
1197: LD_VAR 0 3
1201: IN
1202: IFFALSE 1208
// continue else
1204: GO 1141
1206: GO 1224
// begin result := tmp2 ;
1208: LD_ADDR_VAR 0 4
1212: PUSH
1213: LD_VAR 0 8
1217: ST_TO_ADDR
// exit ;
1218: POP
1219: POP
1220: POP
1221: POP
1222: GO 1232
// end ; end ;
1224: GO 1141
1226: POP
1227: POP
1228: GO 1128
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 4
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
// if cargoRecycled then
1241: LD_EXP 25
1245: IFFALSE 1273
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1247: LD_INT 82
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1260: LD_INT 83
1262: PPUSH
1263: LD_INT 2
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: CALL_OW 322
// end ; uc_side := 5 ;
1273: LD_ADDR_OWVAR 20
1277: PUSH
1278: LD_INT 5
1280: ST_TO_ADDR
// uc_nation := 2 ;
1281: LD_ADDR_OWVAR 21
1285: PUSH
1286: LD_INT 2
1288: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1289: LD_ADDR_EXP 37
1293: PUSH
1294: LD_STRING Abdul
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: LD_STRING 
1302: PPUSH
1303: CALL 40425 0 3
1307: ST_TO_ADDR
// uc_side := 2 ;
1308: LD_ADDR_OWVAR 20
1312: PUSH
1313: LD_INT 2
1315: ST_TO_ADDR
// uc_nation := 2 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 2
1323: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 26
1328: PUSH
1329: LD_STRING Heike
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 40425 0 3
1347: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 29
1352: PUSH
1353: LD_STRING Ibrahim
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 40425 0 3
1371: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 27
1376: PUSH
1377: LD_STRING Givi
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 40425 0 3
1395: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 30
1400: PUSH
1401: LD_STRING Kamil
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 40425 0 3
1419: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 31
1424: PUSH
1425: LD_STRING Kaia
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 40425 0 3
1443: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 32
1448: PUSH
1449: LD_STRING Sophia
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 40425 0 3
1467: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 33
1472: PUSH
1473: LD_STRING Markov
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 40425 0 3
1491: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 36
1496: PUSH
1497: LD_STRING Aviradze
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 40425 0 3
1515: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1516: LD_ADDR_EXP 40
1520: PUSH
1521: EMPTY
1522: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1523: LD_ADDR_EXP 38
1527: PUSH
1528: LD_STRING 03_others
1530: PPUSH
1531: CALL_OW 31
1535: ST_TO_ADDR
// uc_side := 5 ;
1536: LD_ADDR_OWVAR 20
1540: PUSH
1541: LD_INT 5
1543: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1544: LD_ADDR_EXP 35
1548: PUSH
1549: LD_STRING Kurt
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: LD_STRING 
1557: PPUSH
1558: CALL 40425 0 3
1562: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1563: LD_ADDR_EXP 28
1567: PUSH
1568: LD_STRING Mike
1570: PPUSH
1571: LD_EXP 1
1575: NOT
1576: PPUSH
1577: LD_EXP 2
1581: PPUSH
1582: CALL 40425 0 3
1586: ST_TO_ADDR
// if Mike then
1587: LD_EXP 28
1591: IFFALSE 1614
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1593: LD_EXP 28
1597: PPUSH
1598: LD_INT 142
1600: PPUSH
1601: LD_INT 63
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1614: LD_EXP 35
1618: PPUSH
1619: LD_INT 142
1621: PPUSH
1622: LD_INT 63
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1635: LD_EXP 35
1639: PUSH
1640: LD_EXP 28
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 140
// end ;
1653: LD_VAR 0 1
1657: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
// uc_side := 5 ;
1664: LD_ADDR_OWVAR 20
1668: PUSH
1669: LD_INT 5
1671: ST_TO_ADDR
// uc_nation := 2 ;
1672: LD_ADDR_OWVAR 21
1676: PUSH
1677: LD_INT 2
1679: ST_TO_ADDR
// InitHc ;
1680: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1684: LD_ADDR_EXP 34
1688: PUSH
1689: LD_STRING Omar
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: LD_STRING 
1697: PPUSH
1698: CALL 40425 0 3
1702: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1703: LD_EXP 34
1707: PPUSH
1708: LD_INT 284
1710: PPUSH
1711: LD_INT 163
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1721: LD_EXP 34
1725: PPUSH
1726: LD_INT 256
1728: PPUSH
1729: LD_INT 129
1731: PPUSH
1732: CALL_OW 111
// wait ( 0 0$2 ) ;
1736: LD_INT 70
1738: PPUSH
1739: CALL_OW 67
// omarSquad := [ ] ;
1743: LD_ADDR_EXP 39
1747: PUSH
1748: EMPTY
1749: ST_TO_ADDR
// for i := 1 to 5 do
1750: LD_ADDR_VAR 0 2
1754: PUSH
1755: DOUBLE
1756: LD_INT 1
1758: DEC
1759: ST_TO_ADDR
1760: LD_INT 5
1762: PUSH
1763: FOR_TO
1764: IFFALSE 1970
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1766: LD_INT 5
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: LD_VAR 0 2
1786: PUSH
1787: LD_INT 2
1789: MOD
1790: PUSH
1791: LD_INT 1
1793: PLUS
1794: ARRAY
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 25
1804: PUSH
1805: LD_INT 27
1807: PUSH
1808: LD_INT 26
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: LD_VAR 0 2
1820: PUSH
1821: LD_INT 3
1823: MOD
1824: PUSH
1825: LD_INT 1
1827: PLUS
1828: ARRAY
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 386 0 7
// veh := CreateVehicle ;
1837: LD_ADDR_VAR 0 4
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// omarSquad := omarSquad union veh ;
1859: LD_ADDR_EXP 39
1863: PUSH
1864: LD_EXP 39
1868: PUSH
1869: LD_VAR 0 4
1873: UNION
1874: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1875: LD_VAR 0 4
1879: PPUSH
1880: LD_INT 284
1882: PPUSH
1883: LD_INT 163
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_INT 3
1898: PPUSH
1899: LD_INT 2
1901: PPUSH
1902: CALL_OW 380
// un := CreateHuman ;
1906: LD_ADDR_VAR 0 3
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1916: LD_ADDR_EXP 39
1920: PUSH
1921: LD_EXP 39
1925: PUSH
1926: LD_VAR 0 3
1930: UNION
1931: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1932: LD_VAR 0 3
1936: PPUSH
1937: LD_VAR 0 4
1941: PPUSH
1942: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1946: LD_VAR 0 3
1950: PPUSH
1951: LD_INT 271
1953: PPUSH
1954: LD_INT 144
1956: PPUSH
1957: CALL_OW 111
// wait ( 0 0$2 ) ;
1961: LD_INT 70
1963: PPUSH
1964: CALL_OW 67
// end ;
1968: GO 1763
1970: POP
1971: POP
// for i := 1 to 3 do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_INT 3
1984: PUSH
1985: FOR_TO
1986: IFFALSE 2069
// begin PrepareHuman ( false , 1 , 2 ) ;
1988: LD_INT 0
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 2
1996: PPUSH
1997: CALL_OW 380
// un := CreateHuman ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: CALL_OW 44
2010: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2011: LD_ADDR_EXP 39
2015: PUSH
2016: LD_EXP 39
2020: PUSH
2021: LD_VAR 0 3
2025: UNION
2026: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_INT 284
2034: PPUSH
2035: LD_INT 163
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 257
2052: PPUSH
2053: LD_INT 138
2055: PPUSH
2056: CALL_OW 111
// wait ( 0 0$1 ) ;
2060: LD_INT 35
2062: PPUSH
2063: CALL_OW 67
// end ;
2067: GO 1985
2069: POP
2070: POP
// for i := 1 to 6 do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: DOUBLE
2077: LD_INT 1
2079: DEC
2080: ST_TO_ADDR
2081: LD_INT 6
2083: PUSH
2084: FOR_TO
2085: IFFALSE 2218
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2087: LD_INT 0
2089: PPUSH
2090: LD_INT 1
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_INT 3
2111: MOD
2112: PUSH
2113: LD_INT 1
2115: PLUS
2116: ARRAY
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: CALL_OW 380
// un := CreateHuman ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: CALL_OW 44
2134: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2135: LD_ADDR_EXP 39
2139: PUSH
2140: LD_EXP 39
2144: PUSH
2145: LD_VAR 0 3
2149: UNION
2150: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2151: LD_VAR 0 3
2155: PPUSH
2156: LD_INT 225
2158: PPUSH
2159: LD_INT 163
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// if i = 1 then
2169: LD_VAR 0 2
2173: PUSH
2174: LD_INT 1
2176: EQUAL
2177: IFFALSE 2194
// SetAttr ( un , attr_speed , 12 ) ;
2179: LD_VAR 0 3
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: LD_INT 12
2189: PPUSH
2190: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2194: LD_VAR 0 3
2198: PPUSH
2199: LD_INT 222
2201: PPUSH
2202: LD_INT 157
2204: PPUSH
2205: CALL_OW 111
// wait ( 0 0$1 ) ;
2209: LD_INT 35
2211: PPUSH
2212: CALL_OW 67
// end ;
2216: GO 2084
2218: POP
2219: POP
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 149
2238: PPUSH
2239: LD_INT 67
2241: PPUSH
2242: CALL_OW 428
2246: PPUSH
2247: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2251: LD_ADDR_EXP 51
2255: PUSH
2256: LD_INT 111
2258: PPUSH
2259: LD_INT 89
2261: PPUSH
2262: CALL_OW 428
2266: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: LD_INT 21
2274: PUSH
2275: LD_INT 3
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 23
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: FOR_IN
2302: IFFALSE 2318
// SetBLevel ( i , 5 ) ;
2304: LD_VAR 0 2
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 241
2316: GO 2301
2318: POP
2319: POP
// SetBName ( kirov , kirov ) ;
2320: LD_INT 71
2322: PPUSH
2323: LD_STRING kirov
2325: PPUSH
2326: CALL_OW 500
// SetBName ( beria , beria ) ;
2330: LD_INT 106
2332: PPUSH
2333: LD_STRING beria
2335: PPUSH
2336: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2340: LD_INT 112
2342: PPUSH
2343: LD_STRING kagan
2345: PPUSH
2346: CALL_OW 500
// uc_side := 6 ;
2350: LD_ADDR_OWVAR 20
2354: PUSH
2355: LD_INT 6
2357: ST_TO_ADDR
// uc_nation := 3 ;
2358: LD_ADDR_OWVAR 21
2362: PUSH
2363: LD_INT 3
2365: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2366: LD_ADDR_VAR 0 5
2370: PUSH
2371: LD_INT 22
2373: PUSH
2374: LD_INT 6
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 30
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PPUSH
2395: CALL_OW 69
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: LD_INT 22
2411: PUSH
2412: LD_INT 6
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PPUSH
2433: CALL_OW 69
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2442: LD_ADDR_EXP 45
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2449: LD_ADDR_EXP 46
2453: PUSH
2454: EMPTY
2455: ST_TO_ADDR
// russianPatrol := [ ] ;
2456: LD_ADDR_EXP 48
2460: PUSH
2461: EMPTY
2462: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Kurin
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 40425 0 3
2481: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 71
2489: PPUSH
2490: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2494: LD_ADDR_EXP 43
2498: PUSH
2499: LD_STRING Popov
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: LD_STRING 
2507: PPUSH
2508: CALL 40425 0 3
2512: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2513: LD_EXP 43
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2525: LD_ADDR_EXP 42
2529: PUSH
2530: LD_STRING Grishko
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 40425 0 3
2543: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2544: LD_EXP 42
2548: PPUSH
2549: LD_INT 207
2551: PPUSH
2552: LD_INT 106
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2562: LD_EXP 42
2566: PPUSH
2567: LD_INT 209
2569: PPUSH
2570: LD_INT 106
2572: PPUSH
2573: CALL_OW 118
// for i := 1 to 2 do
2577: LD_ADDR_VAR 0 2
2581: PUSH
2582: DOUBLE
2583: LD_INT 1
2585: DEC
2586: ST_TO_ADDR
2587: LD_INT 2
2589: PUSH
2590: FOR_TO
2591: IFFALSE 2646
// begin PrepareHuman ( false , 2 , 2 ) ;
2593: LD_INT 0
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 380
// un := CreateHuman ;
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: CALL_OW 44
2615: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 71
2623: PPUSH
2624: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2628: LD_ADDR_EXP 45
2632: PUSH
2633: LD_EXP 45
2637: PUSH
2638: LD_VAR 0 3
2642: UNION
2643: ST_TO_ADDR
// end ;
2644: GO 2590
2646: POP
2647: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2648: LD_ADDR_VAR 0 2
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 5
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: LD_INT 6
2666: PUSH
2667: LD_INT 6
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: PUSH
2676: LD_OWVAR 67
2680: ARRAY
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2761
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: LD_INT 2
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: LD_INT 4
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PPUSH
2715: CALL_OW 380
// un := CreateHuman ;
2719: LD_ADDR_VAR 0 3
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2729: LD_VAR 0 3
2733: PPUSH
2734: LD_VAR 0 5
2738: PPUSH
2739: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2743: LD_ADDR_EXP 45
2747: PUSH
2748: LD_EXP 45
2752: PUSH
2753: LD_VAR 0 3
2757: UNION
2758: ST_TO_ADDR
// end ;
2759: GO 2682
2761: POP
2762: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2763: LD_ADDR_VAR 0 2
2767: PUSH
2768: LD_INT 22
2770: PUSH
2771: LD_INT 6
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 30
2780: PUSH
2781: LD_INT 32
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: FOR_IN
2798: IFFALSE 2876
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 4
2811: PUSH
2812: LD_INT 4
2814: PUSH
2815: LD_INT 5
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: LD_OWVAR 67
2828: ARRAY
2829: PPUSH
2830: CALL_OW 380
// un := CreateHuman ;
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: CALL_OW 44
2843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2844: LD_VAR 0 3
2848: PPUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2858: LD_ADDR_EXP 45
2862: PUSH
2863: LD_EXP 45
2867: PUSH
2868: LD_VAR 0 3
2872: UNION
2873: ST_TO_ADDR
// end ;
2874: GO 2797
2876: POP
2877: POP
// for i := 1 to 3 do
2878: LD_ADDR_VAR 0 2
2882: PUSH
2883: DOUBLE
2884: LD_INT 1
2886: DEC
2887: ST_TO_ADDR
2888: LD_INT 3
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2947
// begin PrepareHuman ( false , 3 , 3 ) ;
2894: LD_INT 0
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: LD_INT 3
2902: PPUSH
2903: CALL_OW 380
// un := CreateHuman ;
2907: LD_ADDR_VAR 0 3
2911: PUSH
2912: CALL_OW 44
2916: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 92
2924: PPUSH
2925: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2929: LD_ADDR_EXP 45
2933: PUSH
2934: LD_EXP 45
2938: PUSH
2939: LD_VAR 0 3
2943: UNION
2944: ST_TO_ADDR
// end ;
2945: GO 2891
2947: POP
2948: POP
// for i := 1 to 2 do
2949: LD_ADDR_VAR 0 2
2953: PUSH
2954: DOUBLE
2955: LD_INT 1
2957: DEC
2958: ST_TO_ADDR
2959: LD_INT 2
2961: PUSH
2962: FOR_TO
2963: IFFALSE 3018
// begin PrepareHuman ( false , 4 , 3 ) ;
2965: LD_INT 0
2967: PPUSH
2968: LD_INT 4
2970: PPUSH
2971: LD_INT 3
2973: PPUSH
2974: CALL_OW 380
// un := CreateHuman ;
2978: LD_ADDR_VAR 0 3
2982: PUSH
2983: CALL_OW 44
2987: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 83
2995: PPUSH
2996: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3000: LD_ADDR_EXP 45
3004: PUSH
3005: LD_EXP 45
3009: PUSH
3010: LD_VAR 0 3
3014: UNION
3015: ST_TO_ADDR
// end ;
3016: GO 2962
3018: POP
3019: POP
// for i := 1 to 5 do
3020: LD_ADDR_VAR 0 2
3024: PUSH
3025: DOUBLE
3026: LD_INT 1
3028: DEC
3029: ST_TO_ADDR
3030: LD_INT 5
3032: PUSH
3033: FOR_TO
3034: IFFALSE 3091
// begin PrepareHuman ( false , 1 , 3 ) ;
3036: LD_INT 0
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3059: LD_VAR 0 3
3063: PPUSH
3064: LD_VAR 0 4
3068: PPUSH
3069: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3073: LD_ADDR_EXP 47
3077: PUSH
3078: LD_EXP 47
3082: PUSH
3083: LD_VAR 0 3
3087: UNION
3088: ST_TO_ADDR
// end ;
3089: GO 3033
3091: POP
3092: POP
// russianCargo := [ ] ;
3093: LD_ADDR_EXP 50
3097: PUSH
3098: EMPTY
3099: ST_TO_ADDR
// for i := 1 to 2 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: DOUBLE
3106: LD_INT 1
3108: DEC
3109: ST_TO_ADDR
3110: LD_INT 2
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3246
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3116: LD_INT 6
3118: PPUSH
3119: LD_INT 3
3121: PPUSH
3122: LD_INT 21
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 51
3133: PPUSH
3134: LD_INT 100
3136: PPUSH
3137: CALL 386 0 7
// un := CreateVehicle ;
3141: LD_ADDR_VAR 0 3
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3151: LD_ADDR_EXP 50
3155: PUSH
3156: LD_EXP 50
3160: PUSH
3161: LD_VAR 0 3
3165: UNION
3166: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 2
3174: PPUSH
3175: LD_INT 100
3177: PPUSH
3178: CALL_OW 290
// SetDir ( un , 4 ) ;
3182: LD_VAR 0 3
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3194: LD_VAR 0 3
3198: PPUSH
3199: LD_INT 147
3201: PPUSH
3202: LD_INT 103
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 0
3210: PPUSH
3211: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3215: LD_INT 0
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_OWVAR 67
3225: PPUSH
3226: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3230: CALL_OW 44
3234: PPUSH
3235: LD_VAR 0 3
3239: PPUSH
3240: CALL_OW 52
// end ;
3244: GO 3113
3246: POP
3247: POP
// uc_side := 3 ;
3248: LD_ADDR_OWVAR 20
3252: PUSH
3253: LD_INT 3
3255: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3256: LD_ADDR_EXP 44
3260: PUSH
3261: LD_STRING Burlak
3263: PPUSH
3264: LD_INT 0
3266: PPUSH
3267: LD_STRING 
3269: PPUSH
3270: CALL 40425 0 3
3274: ST_TO_ADDR
// for i := 1 to 5 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3382
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3291: LD_INT 0
3293: PPUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_OWVAR 67
3301: PUSH
3302: LD_INT 1
3304: PLUS
3305: PPUSH
3306: CALL_OW 380
// un := CreateHuman ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: CALL_OW 44
3319: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3320: LD_VAR 0 3
3324: PPUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 32
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3364: LD_ADDR_EXP 46
3368: PUSH
3369: LD_EXP 46
3373: PUSH
3374: LD_VAR 0 3
3378: UNION
3379: ST_TO_ADDR
// end ;
3380: GO 3288
3382: POP
3383: POP
// for i := 1 to 2 do
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 2
3396: PUSH
3397: FOR_TO
3398: IFFALSE 3489
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_OWVAR 67
3410: PUSH
3411: LD_INT 1
3413: PLUS
3414: PPUSH
3415: CALL_OW 380
// un := CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: LD_INT 22
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 30
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: CALL_OW 69
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3471: LD_ADDR_EXP 46
3475: PUSH
3476: LD_EXP 46
3480: PUSH
3481: LD_VAR 0 3
3485: UNION
3486: ST_TO_ADDR
// end ;
3487: GO 3397
3489: POP
3490: POP
// for i := 1 to 2 do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 2
3503: PUSH
3504: FOR_TO
3505: IFFALSE 3592
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3507: LD_INT 0
3509: PPUSH
3510: LD_INT 4
3512: PPUSH
3513: LD_OWVAR 67
3517: PPUSH
3518: CALL_OW 380
// un := CreateHuman ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: CALL_OW 44
3531: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 22
3539: PUSH
3540: LD_INT 3
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3574: LD_ADDR_EXP 46
3578: PUSH
3579: LD_EXP 46
3583: PUSH
3584: LD_VAR 0 3
3588: UNION
3589: ST_TO_ADDR
// end ;
3590: GO 3504
3592: POP
3593: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3594: LD_INT 0
3596: PPUSH
3597: LD_INT 2
3599: PPUSH
3600: LD_OWVAR 67
3604: PPUSH
3605: CALL_OW 380
// un := CreateHuman ;
3609: LD_ADDR_VAR 0 3
3613: PUSH
3614: CALL_OW 44
3618: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3619: LD_VAR 0 3
3623: PPUSH
3624: LD_INT 106
3626: PPUSH
3627: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3631: LD_ADDR_EXP 46
3635: PUSH
3636: LD_EXP 46
3640: PUSH
3641: LD_VAR 0 3
3645: UNION
3646: ST_TO_ADDR
// for i := 1 to 3 do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 3
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3783
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3663: LD_ADDR_VAR 0 6
3667: PUSH
3668: LD_INT 22
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 31
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3703: LD_INT 0
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_OWVAR 67
3713: PPUSH
3714: CALL_OW 380
// un := CreateHuman ;
3718: LD_ADDR_VAR 0 3
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3728: LD_VAR 0 3
3732: PPUSH
3733: LD_VAR 0 6
3737: PPUSH
3738: CALL_OW 254
3742: PUSH
3743: LD_INT 3
3745: PLUS
3746: PPUSH
3747: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: LD_VAR 0 6
3760: PPUSH
3761: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3765: LD_ADDR_EXP 46
3769: PUSH
3770: LD_EXP 46
3774: PUSH
3775: LD_VAR 0 3
3779: UNION
3780: ST_TO_ADDR
// end ;
3781: GO 3660
3783: POP
3784: POP
// if Difficulty > 1 then
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: GREATER
3793: IFFALSE 3868
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3795: LD_ADDR_VAR 0 3
3799: PUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 3
3805: PPUSH
3806: LD_INT 23
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_INT 44
3817: PPUSH
3818: LD_INT 100
3820: PPUSH
3821: CALL 386 0 7
3825: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3826: LD_VAR 0 3
3830: PPUSH
3831: LD_INT 73
3833: PPUSH
3834: LD_INT 110
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3844: LD_INT 0
3846: PPUSH
3847: LD_INT 3
3849: PPUSH
3850: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3854: CALL_OW 44
3858: PPUSH
3859: LD_VAR 0 3
3863: PPUSH
3864: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3868: LD_ADDR_EXP 49
3872: PUSH
3873: EMPTY
3874: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3875: LD_ADDR_VAR 0 2
3879: PUSH
3880: DOUBLE
3881: LD_INT 1
3883: DEC
3884: ST_TO_ADDR
3885: LD_INT 6
3887: PUSH
3888: LD_INT 7
3890: PUSH
3891: LD_INT 8
3893: PUSH
3894: LD_INT 8
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: PUSH
3903: LD_OWVAR 67
3907: ARRAY
3908: PUSH
3909: FOR_TO
3910: IFFALSE 4134
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 3
3917: PPUSH
3918: LD_INT 21
3920: PUSH
3921: LD_INT 23
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 2
3935: MOD
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: ARRAY
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 43
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 42
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PUSH
3962: LD_VAR 0 2
3966: PUSH
3967: LD_INT 3
3969: MOD
3970: PUSH
3971: LD_INT 1
3973: PLUS
3974: ARRAY
3975: PPUSH
3976: LD_INT 100
3978: PPUSH
3979: CALL 386 0 7
// un := CreateVehicle ;
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: CALL_OW 45
3992: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3993: LD_VAR 0 3
3997: PPUSH
3998: LD_INT 0
4000: PUSH
4001: LD_INT 5
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 1
4010: PPUSH
4011: LD_INT 2
4013: PPUSH
4014: CALL_OW 12
4018: ARRAY
4019: PPUSH
4020: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4024: LD_ADDR_EXP 49
4028: PUSH
4029: LD_EXP 49
4033: PUSH
4034: LD_VAR 0 3
4038: UNION
4039: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 127
4047: PPUSH
4048: LD_INT 89
4050: PPUSH
4051: LD_INT 7
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 50
// uc_side := 3 ;
4061: LD_ADDR_OWVAR 20
4065: PUSH
4066: LD_INT 3
4068: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4069: LD_INT 0
4071: PPUSH
4072: LD_INT 3
4074: PPUSH
4075: LD_INT 3
4077: PPUSH
4078: CALL_OW 380
// un := CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4092: LD_ADDR_EXP 49
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_VAR 0 3
4106: UNION
4107: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_EXP 49
4117: PUSH
4118: LD_EXP 49
4122: PUSH
4123: LD_INT 1
4125: MINUS
4126: ARRAY
4127: PPUSH
4128: CALL_OW 52
// end ;
4132: GO 3909
4134: POP
4135: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_INT 1
4144: DEC
4145: ST_TO_ADDR
4146: LD_INT 3
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: LD_INT 5
4154: PUSH
4155: LD_INT 6
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4237
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_OWVAR 67
4183: PPUSH
4184: CALL_OW 380
// un := CreateHuman ;
4188: LD_ADDR_VAR 0 3
4192: PUSH
4193: CALL_OW 44
4197: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4198: LD_ADDR_EXP 49
4202: PUSH
4203: LD_EXP 49
4207: PUSH
4208: LD_VAR 0 3
4212: UNION
4213: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 91
4221: PPUSH
4222: LD_INT 60
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 50
// end ;
4235: GO 4170
4237: POP
4238: POP
// end ;
4239: LD_VAR 0 1
4243: RET
// every 0 0$3 do var i ;
4244: GO 4246
4246: DISABLE
4247: LD_INT 0
4249: PPUSH
// begin for i := 1 to 4 do
4250: LD_ADDR_VAR 0 1
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 4
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4283
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4266: LD_EXP 47
4270: PUSH
4271: LD_VAR 0 1
4275: ARRAY
4276: PPUSH
4277: CALL_OW 122
4281: GO 4263
4283: POP
4284: POP
// wait ( 3 ) ;
4285: LD_INT 3
4287: PPUSH
4288: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4292: LD_EXP 47
4296: PUSH
4297: LD_INT 1
4299: ARRAY
4300: PPUSH
4301: LD_INT 22
4303: PUSH
4304: LD_INT 6
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 30
4313: PUSH
4314: LD_INT 31
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 69
4329: PPUSH
4330: LD_EXP 47
4334: PUSH
4335: LD_INT 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 74
4343: PPUSH
4344: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4348: LD_EXP 47
4352: PUSH
4353: LD_INT 2
4355: ARRAY
4356: PPUSH
4357: LD_INT 211
4359: PPUSH
4360: LD_INT 107
4362: PPUSH
4363: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4367: LD_EXP 47
4371: PUSH
4372: LD_INT 2
4374: ARRAY
4375: PPUSH
4376: LD_INT 209
4378: PPUSH
4379: LD_INT 106
4381: PPUSH
4382: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4386: LD_EXP 47
4390: PUSH
4391: LD_INT 3
4393: ARRAY
4394: PPUSH
4395: LD_INT 209
4397: PPUSH
4398: LD_INT 103
4400: PPUSH
4401: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4405: LD_EXP 47
4409: PUSH
4410: LD_INT 3
4412: ARRAY
4413: PPUSH
4414: LD_INT 209
4416: PPUSH
4417: LD_INT 106
4419: PPUSH
4420: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4424: LD_EXP 47
4428: PUSH
4429: LD_INT 4
4431: ARRAY
4432: PPUSH
4433: LD_INT 227
4435: PPUSH
4436: LD_INT 117
4438: PPUSH
4439: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4443: LD_EXP 47
4447: PUSH
4448: LD_INT 4
4450: ARRAY
4451: PPUSH
4452: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4456: LD_INT 700
4458: PPUSH
4459: CALL_OW 67
// for i := 3 downto 2 do
4463: LD_ADDR_VAR 0 1
4467: PUSH
4468: DOUBLE
4469: LD_INT 3
4471: INC
4472: ST_TO_ADDR
4473: LD_INT 2
4475: PUSH
4476: FOR_DOWNTO
4477: IFFALSE 4644
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4479: LD_EXP 47
4483: PUSH
4484: LD_VAR 0 1
4488: ARRAY
4489: PPUSH
4490: LD_INT 200
4492: PPUSH
4493: LD_INT 91
4495: PPUSH
4496: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4500: LD_EXP 47
4504: PUSH
4505: LD_VAR 0 1
4509: ARRAY
4510: PPUSH
4511: LD_INT 210
4513: PPUSH
4514: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_VAR 0 1
4527: ARRAY
4528: PPUSH
4529: LD_INT 224
4531: PPUSH
4532: LD_INT 93
4534: PPUSH
4535: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4539: LD_EXP 47
4543: PUSH
4544: LD_VAR 0 1
4548: ARRAY
4549: PPUSH
4550: LD_INT 210
4552: PPUSH
4553: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4557: LD_EXP 47
4561: PUSH
4562: LD_VAR 0 1
4566: ARRAY
4567: PPUSH
4568: LD_INT 239
4570: PPUSH
4571: LD_INT 123
4573: PPUSH
4574: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4578: LD_EXP 47
4582: PUSH
4583: LD_VAR 0 1
4587: ARRAY
4588: PPUSH
4589: LD_INT 210
4591: PPUSH
4592: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4596: LD_EXP 47
4600: PUSH
4601: LD_VAR 0 1
4605: ARRAY
4606: PPUSH
4607: LD_INT 212
4609: PPUSH
4610: LD_INT 105
4612: PPUSH
4613: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4617: LD_EXP 47
4621: PUSH
4622: LD_VAR 0 1
4626: ARRAY
4627: PPUSH
4628: LD_INT 700
4630: PPUSH
4631: CALL_OW 202
// wait ( 0 0$30 ) ;
4635: LD_INT 1050
4637: PPUSH
4638: CALL_OW 67
// end ;
4642: GO 4476
4644: POP
4645: POP
// until not activeGrishkoAI ;
4646: LD_EXP 10
4650: NOT
4651: IFFALSE 4456
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_INT 221
4660: PPUSH
4661: LD_INT 110
4663: PPUSH
4664: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4668: LD_EXP 47
4672: PPUSH
4673: LD_INT 228
4675: PPUSH
4676: LD_INT 115
4678: PPUSH
4679: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4683: LD_EXP 47
4687: PPUSH
4688: CALL_OW 200
// end ;
4692: PPOPN 1
4694: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4695: LD_EXP 12
4699: IFFALSE 5449
4701: GO 4703
4703: DISABLE
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
// begin uc_side := 6 ;
4710: LD_ADDR_OWVAR 20
4714: PUSH
4715: LD_INT 6
4717: ST_TO_ADDR
// uc_nation := 3 ;
4718: LD_ADDR_OWVAR 21
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// for i := 1 to 3 do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: DOUBLE
4732: LD_INT 1
4734: DEC
4735: ST_TO_ADDR
4736: LD_INT 3
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4853
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4742: LD_INT 0
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: LD_INT 4
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 1
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4786: LD_ADDR_EXP 48
4790: PUSH
4791: LD_EXP 48
4795: PUSH
4796: LD_VAR 0 1
4800: UNION
4801: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4814: LD_VAR 0 1
4818: PPUSH
4819: LD_INT 11
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4829: LD_VAR 0 1
4833: PPUSH
4834: LD_INT 210
4836: PPUSH
4837: LD_INT 159
4839: PPUSH
4840: CALL_OW 111
// wait ( 0 0$2 ) ;
4844: LD_INT 70
4846: PPUSH
4847: CALL_OW 67
// end ;
4851: GO 4739
4853: POP
4854: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4855: LD_ADDR_VAR 0 4
4859: PUSH
4860: LD_INT 172
4862: PUSH
4863: LD_INT 76
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 150
4872: PUSH
4873: LD_INT 38
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 148
4882: PUSH
4883: LD_INT 9
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 165
4892: PUSH
4893: LD_INT 38
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 191
4908: PUSH
4909: LD_INT 77
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 168
4918: PUSH
4919: LD_INT 42
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 166
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 151
4938: PUSH
4939: LD_INT 12
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 221
4954: PUSH
4955: LD_INT 88
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 217
4964: PUSH
4965: LD_INT 64
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 232
4974: PUSH
4975: LD_INT 66
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 200
4984: PUSH
4985: LD_INT 56
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// for i := russianPatrol downto 1 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_EXP 48
5020: INC
5021: ST_TO_ADDR
5022: LD_INT 1
5024: PUSH
5025: FOR_DOWNTO
5026: IFFALSE 5411
// begin if IsDead ( russianPatrol [ i ] ) then
5028: LD_EXP 48
5032: PUSH
5033: LD_VAR 0 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 301
5043: IFFALSE 5047
// continue ;
5045: GO 5025
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5047: LD_EXP 48
5051: PUSH
5052: LD_VAR 0 2
5056: ARRAY
5057: PPUSH
5058: CALL_OW 256
5062: PUSH
5063: LD_INT 990
5065: LESS
5066: IFFALSE 5089
5068: PUSH
5069: LD_EXP 48
5073: PUSH
5074: LD_VAR 0 2
5078: ARRAY
5079: PPUSH
5080: CALL_OW 110
5084: PUSH
5085: LD_INT 1
5087: EQUAL
5088: AND
5089: IFFALSE 5109
// SetTag ( russianPatrol [ i ] , 2 ) ;
5091: LD_EXP 48
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: PPUSH
5102: LD_INT 2
5104: PPUSH
5105: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5109: LD_EXP 48
5113: PUSH
5114: LD_VAR 0 2
5118: ARRAY
5119: PPUSH
5120: CALL_OW 110
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: IFFALSE 5195
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5130: LD_EXP 48
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_INT 166
5143: PPUSH
5144: LD_INT 101
5146: PPUSH
5147: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5151: LD_EXP 48
5155: PUSH
5156: LD_VAR 0 2
5160: ARRAY
5161: PPUSH
5162: LD_INT 71
5164: PPUSH
5165: CALL_OW 296
5169: PUSH
5170: LD_INT 10
5172: LESS
5173: IFFALSE 5193
// SetTag ( russianPatrol [ i ] , 3 ) ;
5175: LD_EXP 48
5179: PUSH
5180: LD_VAR 0 2
5184: ARRAY
5185: PPUSH
5186: LD_INT 3
5188: PPUSH
5189: CALL_OW 109
// continue ;
5193: GO 5025
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5195: LD_EXP 48
5199: PUSH
5200: LD_VAR 0 2
5204: ARRAY
5205: PPUSH
5206: CALL_OW 110
5210: PUSH
5211: LD_INT 3
5213: EQUAL
5214: IFFALSE 5309
// begin spottedByPatrol := true ;
5216: LD_ADDR_EXP 7
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5224: LD_EXP 48
5228: PUSH
5229: LD_VAR 0 2
5233: ARRAY
5234: PPUSH
5235: CALL_OW 250
5239: PPUSH
5240: LD_EXP 48
5244: PUSH
5245: LD_VAR 0 2
5249: ARRAY
5250: PPUSH
5251: CALL_OW 251
5255: PPUSH
5256: LD_INT 2
5258: PPUSH
5259: LD_INT 6
5261: NEG
5262: PPUSH
5263: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5267: LD_EXP 48
5271: PUSH
5272: LD_VAR 0 2
5276: ARRAY
5277: PPUSH
5278: CALL_OW 87
// DialogueOn ;
5282: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5286: LD_EXP 26
5290: PPUSH
5291: LD_STRING DH-Spot-f-3
5293: PPUSH
5294: CALL_OW 88
// DialogueOff ;
5298: CALL_OW 7
// YouLost ( Spotted ) ;
5302: LD_STRING Spotted
5304: PPUSH
5305: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5309: LD_EXP 48
5313: PUSH
5314: LD_VAR 0 2
5318: ARRAY
5319: PPUSH
5320: CALL_OW 314
5324: NOT
5325: IFFALSE 5409
// for j in patrol [ i ] do
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_VAR 0 4
5336: PUSH
5337: LD_VAR 0 2
5341: ARRAY
5342: PUSH
5343: FOR_IN
5344: IFFALSE 5407
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5346: LD_EXP 48
5350: PUSH
5351: LD_VAR 0 2
5355: ARRAY
5356: PPUSH
5357: LD_INT 35
5359: PPUSH
5360: LD_INT 175
5362: PPUSH
5363: CALL_OW 12
5367: PPUSH
5368: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5372: LD_EXP 48
5376: PUSH
5377: LD_VAR 0 2
5381: ARRAY
5382: PPUSH
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 1
5390: ARRAY
5391: PPUSH
5392: LD_VAR 0 3
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 174
// end ;
5405: GO 5343
5407: POP
5408: POP
// end ;
5409: GO 5025
5411: POP
5412: POP
// until not russianPatrol or russianAlert ;
5413: LD_EXP 48
5417: NOT
5418: IFTRUE 5426
5420: PUSH
5421: LD_EXP 9
5425: OR
5426: IFFALSE 5003
// if russianPatrol then
5428: LD_EXP 48
5432: IFFALSE 5449
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5434: LD_EXP 48
5438: PPUSH
5439: LD_INT 161
5441: PPUSH
5442: LD_INT 107
5444: PPUSH
5445: CALL_OW 114
// end ;
5449: PPOPN 4
5451: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5452: LD_EXP 6
5456: IFFALSE 5465
5458: PUSH
5459: LD_EXP 13
5463: NOT
5464: AND
5465: IFFALSE 5961
5467: GO 5469
5469: DISABLE
5470: LD_INT 0
5472: PPUSH
5473: PPUSH
5474: PPUSH
5475: PPUSH
5476: PPUSH
// begin enable ;
5477: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_EXP 49
5487: PPUSH
5488: LD_INT 21
5490: PUSH
5491: LD_INT 2
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 72
5502: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_INT 22
5510: PUSH
5511: LD_INT 4
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PPUSH
5518: CALL_OW 69
5522: ST_TO_ADDR
// for i in filter do
5523: LD_ADDR_VAR 0 1
5527: PUSH
5528: LD_VAR 0 2
5532: PUSH
5533: FOR_IN
5534: IFFALSE 5959
// begin tmp := IsDrivenBy ( i ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 311
5550: ST_TO_ADDR
// if not tmp then
5551: LD_VAR 0 3
5555: NOT
5556: IFFALSE 5560
// continue ;
5558: GO 5533
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5560: LD_VAR 0 1
5564: PPUSH
5565: CALL_OW 261
5569: PUSH
5570: LD_INT 90
5572: GREATER
5573: IFFALSE 5590
5575: PUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 110
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: AND
5590: IFFALSE 5606
// SetTag ( i , 0 ) else
5592: LD_VAR 0 1
5596: PPUSH
5597: LD_INT 0
5599: PPUSH
5600: CALL_OW 109
5604: GO 5702
// if GetTag ( i ) = 2 then
5606: LD_VAR 0 1
5610: PPUSH
5611: CALL_OW 110
5615: PUSH
5616: LD_INT 2
5618: EQUAL
5619: IFFALSE 5702
// begin x := rand ( 1 , 2 ) ;
5621: LD_ADDR_VAR 0 5
5625: PUSH
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 2
5631: PPUSH
5632: CALL_OW 12
5636: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5637: LD_VAR 0 1
5641: PPUSH
5642: LD_EXP 50
5646: PUSH
5647: LD_VAR 0 5
5651: ARRAY
5652: PPUSH
5653: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5657: LD_EXP 50
5661: PUSH
5662: LD_VAR 0 5
5666: ARRAY
5667: PPUSH
5668: LD_INT 2
5670: PPUSH
5671: CALL_OW 289
5675: PUSH
5676: LD_INT 20
5678: LESS
5679: IFFALSE 5702
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5681: LD_EXP 50
5685: PUSH
5686: LD_VAR 0 5
5690: ARRAY
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: LD_INT 100
5697: PPUSH
5698: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 256
5711: PUSH
5712: LD_INT 600
5714: GREATEREQUAL
5715: IFFALSE 5729
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 110
5727: NOT
5728: AND
5729: IFFALSE 5755
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 4
5740: PPUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 74
5750: PPUSH
5751: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 256
5764: PUSH
5765: LD_INT 600
5767: LESS
5768: IFFALSE 5782
5770: PUSH
5771: LD_VAR 0 1
5775: PPUSH
5776: CALL_OW 110
5780: NOT
5781: AND
5782: IFFALSE 5811
// begin SetTag ( i , 1 ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5796: LD_VAR 0 1
5800: PPUSH
5801: LD_INT 62
5803: PPUSH
5804: LD_INT 22
5806: PPUSH
5807: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5811: LD_VAR 0 1
5815: PPUSH
5816: CALL_OW 110
5820: PUSH
5821: LD_INT 1
5823: EQUAL
5824: IFFALSE 5847
5826: PUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: LD_INT 62
5834: PPUSH
5835: LD_INT 22
5837: PPUSH
5838: CALL_OW 297
5842: PUSH
5843: LD_INT 6
5845: LESS
5846: AND
5847: IFFALSE 5855
5849: PUSH
5850: LD_VAR 0 3
5854: AND
5855: IFFALSE 5957
// begin ComExitVehicle ( tmp ) ;
5857: LD_VAR 0 3
5861: PPUSH
5862: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5866: LD_VAR 0 3
5870: PPUSH
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5880: LD_INT 35
5882: PPUSH
5883: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 256
5896: PUSH
5897: LD_INT 1000
5899: EQUAL
5900: IFFALSE 5880
// ComEnterUnit ( tmp , i ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 261
5925: PUSH
5926: LD_INT 90
5928: LESSEQUAL
5929: IFFALSE 5945
// SetTag ( i , 2 ) else
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: CALL_OW 109
5943: GO 5957
// SetTag ( i , 0 ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_INT 0
5952: PPUSH
5953: CALL_OW 109
// end ; end ;
5957: GO 5533
5959: POP
5960: POP
// end ;
5961: PPOPN 5
5963: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5964: LD_EXP 20
5968: IFFALSE 6191
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5977: LD_EXP 50
5981: PPUSH
5982: LD_INT 79
5984: PPUSH
5985: LD_INT 155
5987: PPUSH
5988: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5992: LD_EXP 50
5996: PPUSH
5997: LD_INT 16
5999: PPUSH
6000: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_EXP 49
6013: PPUSH
6014: LD_INT 50
6016: PUSH
6017: EMPTY
6018: LIST
6019: PPUSH
6020: CALL_OW 72
6024: ST_TO_ADDR
// for i in tmp do
6025: LD_ADDR_VAR 0 1
6029: PUSH
6030: LD_VAR 0 2
6034: PUSH
6035: FOR_IN
6036: IFFALSE 6070
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6038: LD_VAR 0 1
6042: PPUSH
6043: LD_INT 123
6045: PPUSH
6046: LD_INT 60
6048: PPUSH
6049: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6053: LD_VAR 0 1
6057: PPUSH
6058: LD_INT 153
6060: PPUSH
6061: LD_INT 103
6063: PPUSH
6064: CALL_OW 174
// end ;
6068: GO 6035
6070: POP
6071: POP
// repeat wait ( 0 0$1 ) ;
6072: LD_INT 35
6074: PPUSH
6075: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6079: LD_ADDR_VAR 0 2
6083: PUSH
6084: LD_EXP 49
6088: PPUSH
6089: LD_INT 50
6091: PUSH
6092: EMPTY
6093: LIST
6094: PPUSH
6095: CALL_OW 72
6099: ST_TO_ADDR
// for i in tmp do
6100: LD_ADDR_VAR 0 1
6104: PUSH
6105: LD_VAR 0 2
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6182
// if not HasTask ( i ) then
6113: LD_VAR 0 1
6117: PPUSH
6118: CALL_OW 314
6122: NOT
6123: IFFALSE 6180
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6125: LD_VAR 0 1
6129: PPUSH
6130: LD_INT 81
6132: PUSH
6133: LD_INT 3
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 3
6142: PUSH
6143: LD_INT 21
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: PPUSH
6166: LD_VAR 0 1
6170: PPUSH
6171: CALL_OW 74
6175: PPUSH
6176: CALL_OW 115
6180: GO 6110
6182: POP
6183: POP
6184: LD_VAR 0 2
6188: NOT
6189: IFFALSE 6072
// end ;
6191: PPOPN 2
6193: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6194: LD_INT 22
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 32
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: IFFALSE 6301
6224: GO 6226
6226: DISABLE
6227: LD_INT 0
6229: PPUSH
// begin enable ;
6230: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6231: LD_ADDR_VAR 0 1
6235: PUSH
6236: LD_INT 22
6238: PUSH
6239: LD_INT 3
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 32
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 69
6264: PUSH
6265: FOR_IN
6266: IFFALSE 6299
// if GetFuel ( i ) < 1 then
6268: LD_VAR 0 1
6272: PPUSH
6273: CALL_OW 261
6277: PUSH
6278: LD_INT 1
6280: LESS
6281: IFFALSE 6297
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 311
6292: PPUSH
6293: CALL_OW 121
6297: GO 6265
6299: POP
6300: POP
// end ;
6301: PPOPN 1
6303: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6304: LD_EXP 41
6308: PPUSH
6309: CALL_OW 303
6313: IFTRUE 6326
6315: PUSH
6316: LD_EXP 41
6320: PPUSH
6321: CALL_OW 301
6325: OR
6326: IFTRUE 6337
6328: PUSH
6329: LD_INT 71
6331: PPUSH
6332: CALL_OW 303
6336: OR
6337: IFTRUE 6348
6339: PUSH
6340: LD_INT 71
6342: PPUSH
6343: CALL_OW 301
6347: OR
6348: IFFALSE 6677
6350: GO 6352
6352: DISABLE
6353: LD_INT 0
6355: PPUSH
6356: PPUSH
6357: PPUSH
6358: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: LD_EXP 45
6368: PPUSH
6369: LD_INT 25
6371: PUSH
6372: LD_INT 1
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 72
6383: ST_TO_ADDR
// if not tmp then
6384: LD_VAR 0 2
6388: NOT
6389: IFFALSE 6393
// exit ;
6391: GO 6677
// barracks := HexInfo ( 166 , 116 ) ;
6393: LD_ADDR_VAR 0 4
6397: PUSH
6398: LD_INT 166
6400: PPUSH
6401: LD_INT 116
6403: PPUSH
6404: CALL_OW 428
6408: ST_TO_ADDR
// for i in tmp do
6409: LD_ADDR_VAR 0 1
6413: PUSH
6414: LD_VAR 0 2
6418: PUSH
6419: FOR_IN
6420: IFFALSE 6433
// ComExitBuilding ( i ) ;
6422: LD_VAR 0 1
6426: PPUSH
6427: CALL_OW 122
6431: GO 6419
6433: POP
6434: POP
// repeat wait ( 0 0$1 ) ;
6435: LD_INT 35
6437: PPUSH
6438: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6442: LD_ADDR_VAR 0 2
6446: PUSH
6447: LD_EXP 45
6451: PPUSH
6452: LD_INT 25
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 50
6464: PUSH
6465: EMPTY
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PPUSH
6472: CALL_OW 72
6476: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6477: LD_ADDR_VAR 0 3
6481: PUSH
6482: LD_INT 21
6484: PPUSH
6485: LD_INT 81
6487: PUSH
6488: LD_INT 6
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 70
6499: ST_TO_ADDR
// if enemy then
6500: LD_VAR 0 3
6504: IFFALSE 6549
// begin for i in tmp do
6506: LD_ADDR_VAR 0 1
6510: PUSH
6511: LD_VAR 0 2
6515: PUSH
6516: FOR_IN
6517: IFFALSE 6545
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6519: LD_VAR 0 1
6523: PPUSH
6524: LD_VAR 0 3
6528: PPUSH
6529: LD_VAR 0 1
6533: PPUSH
6534: CALL_OW 74
6538: PPUSH
6539: CALL_OW 115
6543: GO 6516
6545: POP
6546: POP
// end else
6547: GO 6670
// begin for i in tmp do
6549: LD_ADDR_VAR 0 1
6553: PUSH
6554: LD_VAR 0 2
6558: PUSH
6559: FOR_IN
6560: IFFALSE 6668
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6562: LD_VAR 0 1
6566: PPUSH
6567: CALL_OW 314
6571: IFTRUE 6588
6573: PUSH
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 21
6581: PPUSH
6582: CALL_OW 308
6586: NOT
6587: OR
6588: IFFALSE 6666
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6590: LD_VAR 0 1
6594: PPUSH
6595: CALL_OW 256
6599: PUSH
6600: LD_INT 600
6602: LESS
6603: IFFALSE 6616
6605: PUSH
6606: LD_VAR 0 4
6610: PPUSH
6611: CALL_OW 302
6615: AND
6616: IFFALSE 6633
6618: PUSH
6619: LD_VAR 0 4
6623: PPUSH
6624: CALL_OW 313
6628: PUSH
6629: LD_INT 6
6631: LESS
6632: AND
6633: IFFALSE 6651
// ComEnterUnit ( i , barracks ) else
6635: LD_VAR 0 1
6639: PPUSH
6640: LD_VAR 0 4
6644: PPUSH
6645: CALL_OW 120
6649: GO 6666
// ComMoveXY ( i , 162 , 109 ) ;
6651: LD_VAR 0 1
6655: PPUSH
6656: LD_INT 162
6658: PPUSH
6659: LD_INT 109
6661: PPUSH
6662: CALL_OW 111
6666: GO 6559
6668: POP
6669: POP
// end ; until not tmp ;
6670: LD_VAR 0 2
6674: NOT
6675: IFFALSE 6435
// end ;
6677: PPOPN 4
6679: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6680: LD_INT 106
6682: PPUSH
6683: CALL_OW 303
6687: IFTRUE 6698
6689: PUSH
6690: LD_INT 106
6692: PPUSH
6693: CALL_OW 301
6697: OR
6698: IFFALSE 6793
6700: GO 6702
6702: DISABLE
6703: LD_INT 0
6705: PPUSH
6706: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6707: LD_ADDR_VAR 0 2
6711: PUSH
6712: LD_EXP 46
6716: PPUSH
6717: LD_INT 25
6719: PUSH
6720: LD_INT 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PPUSH
6727: CALL_OW 72
6731: ST_TO_ADDR
// if not tmp then
6732: LD_VAR 0 2
6736: NOT
6737: IFFALSE 6741
// exit ;
6739: GO 6793
// for i in tmp do
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: FOR_IN
6752: IFFALSE 6791
// begin if IsInUnit ( i ) then
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 310
6763: IFFALSE 6774
// ComExitBuilding ( i ) ;
6765: LD_VAR 0 1
6769: PPUSH
6770: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6774: LD_VAR 0 1
6778: PPUSH
6779: LD_INT 66
6781: PPUSH
6782: LD_INT 128
6784: PPUSH
6785: CALL_OW 171
// end ;
6789: GO 6751
6791: POP
6792: POP
// end ; end_of_file
6793: PPOPN 2
6795: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6796: LD_INT 0
6798: PPUSH
6799: PPUSH
6800: PPUSH
// SetBName ( omikron , omikron ) ;
6801: LD_INT 64
6803: PPUSH
6804: LD_STRING omikron
6806: PPUSH
6807: CALL_OW 500
// uc_side := 4 ;
6811: LD_ADDR_OWVAR 20
6815: PUSH
6816: LD_INT 4
6818: ST_TO_ADDR
// uc_nation := 1 ;
6819: LD_ADDR_OWVAR 21
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
// omicronSquad := [ ] ;
6827: LD_ADDR_EXP 52
6831: PUSH
6832: EMPTY
6833: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6834: LD_ADDR_VAR 0 2
6838: PUSH
6839: LD_INT 22
6841: PUSH
6842: LD_INT 4
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 2
6851: PUSH
6852: LD_INT 30
6854: PUSH
6855: LD_INT 32
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 30
6864: PUSH
6865: LD_INT 31
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PPUSH
6881: CALL_OW 69
6885: PUSH
6886: FOR_IN
6887: IFFALSE 6944
// begin PrepareHuman ( false , 1 , 1 ) ;
6889: LD_INT 0
6891: PPUSH
6892: LD_INT 1
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: CALL_OW 380
// un := CreateHuman ;
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: CALL_OW 44
6911: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6912: LD_ADDR_EXP 52
6916: PUSH
6917: LD_EXP 52
6921: PUSH
6922: LD_VAR 0 3
6926: UNION
6927: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6928: LD_VAR 0 3
6932: PPUSH
6933: LD_VAR 0 2
6937: PPUSH
6938: CALL_OW 52
// end ;
6942: GO 6886
6944: POP
6945: POP
// for i := 1 to 3 do
6946: LD_ADDR_VAR 0 2
6950: PUSH
6951: DOUBLE
6952: LD_INT 1
6954: DEC
6955: ST_TO_ADDR
6956: LD_INT 3
6958: PUSH
6959: FOR_TO
6960: IFFALSE 7015
// begin PrepareHuman ( false , 2 , 2 ) ;
6962: LD_INT 0
6964: PPUSH
6965: LD_INT 2
6967: PPUSH
6968: LD_INT 2
6970: PPUSH
6971: CALL_OW 380
// un := CreateHuman ;
6975: LD_ADDR_VAR 0 3
6979: PUSH
6980: CALL_OW 44
6984: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6985: LD_ADDR_EXP 52
6989: PUSH
6990: LD_EXP 52
6994: PUSH
6995: LD_VAR 0 3
6999: UNION
7000: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7001: LD_VAR 0 3
7005: PPUSH
7006: LD_INT 64
7008: PPUSH
7009: CALL_OW 52
// end ;
7013: GO 6959
7015: POP
7016: POP
// for i := 1 to 2 do
7017: LD_ADDR_VAR 0 2
7021: PUSH
7022: DOUBLE
7023: LD_INT 1
7025: DEC
7026: ST_TO_ADDR
7027: LD_INT 2
7029: PUSH
7030: FOR_TO
7031: IFFALSE 7170
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7033: LD_INT 4
7035: PPUSH
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 2
7041: PPUSH
7042: LD_INT 2
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 3
7050: PPUSH
7051: LD_INT 100
7053: PPUSH
7054: CALL 386 0 7
// un := CreateVehicle ;
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: CALL_OW 45
7067: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7068: LD_ADDR_EXP 52
7072: PUSH
7073: LD_EXP 52
7077: PUSH
7078: LD_VAR 0 3
7082: UNION
7083: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7084: LD_VAR 0 3
7088: PPUSH
7089: LD_INT 28
7091: PPUSH
7092: LD_INT 37
7094: PPUSH
7095: LD_INT 6
7097: PPUSH
7098: LD_INT 0
7100: PPUSH
7101: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7105: LD_INT 0
7107: PPUSH
7108: LD_INT 3
7110: PPUSH
7111: LD_INT 2
7113: PPUSH
7114: CALL_OW 380
// un := CreateHuman ;
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7128: LD_ADDR_EXP 52
7132: PUSH
7133: LD_EXP 52
7137: PUSH
7138: LD_VAR 0 3
7142: UNION
7143: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7144: LD_VAR 0 3
7148: PPUSH
7149: LD_EXP 52
7153: PUSH
7154: LD_EXP 52
7158: PUSH
7159: LD_INT 1
7161: MINUS
7162: ARRAY
7163: PPUSH
7164: CALL_OW 52
// end ;
7168: GO 7030
7170: POP
7171: POP
// end ;
7172: LD_VAR 0 1
7176: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7177: LD_INT 0
7179: PPUSH
7180: PPUSH
7181: PPUSH
7182: PPUSH
// uc_side := 4 ;
7183: LD_ADDR_OWVAR 20
7187: PUSH
7188: LD_INT 4
7190: ST_TO_ADDR
// uc_nation := 1 ;
7191: LD_ADDR_OWVAR 21
7195: PUSH
7196: LD_INT 1
7198: ST_TO_ADDR
// tmp := [ ] ;
7199: LD_ADDR_VAR 0 4
7203: PUSH
7204: EMPTY
7205: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7206: LD_INT 4
7208: PPUSH
7209: LD_INT 1
7211: PPUSH
7212: LD_INT 2
7214: PPUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_INT 1
7220: PPUSH
7221: LD_INT 4
7223: PPUSH
7224: LD_INT 77
7226: PPUSH
7227: CALL 386 0 7
// un := CreateVehicle ;
7231: LD_ADDR_VAR 0 3
7235: PUSH
7236: CALL_OW 45
7240: ST_TO_ADDR
// tmp := tmp union un ;
7241: LD_ADDR_VAR 0 4
7245: PUSH
7246: LD_VAR 0 4
7250: PUSH
7251: LD_VAR 0 3
7255: UNION
7256: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7257: LD_VAR 0 3
7261: PPUSH
7262: LD_INT 2
7264: PPUSH
7265: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7269: LD_VAR 0 3
7273: PPUSH
7274: LD_INT 106
7276: PPUSH
7277: LD_INT 3
7279: PPUSH
7280: LD_INT 0
7282: PPUSH
7283: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7287: LD_INT 0
7289: PPUSH
7290: LD_INT 3
7292: PPUSH
7293: LD_INT 2
7295: PPUSH
7296: CALL_OW 380
// un := CreateHuman ;
7300: LD_ADDR_VAR 0 3
7304: PUSH
7305: CALL_OW 44
7309: ST_TO_ADDR
// tmp := tmp union un ;
7310: LD_ADDR_VAR 0 4
7314: PUSH
7315: LD_VAR 0 4
7319: PUSH
7320: LD_VAR 0 3
7324: UNION
7325: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7326: LD_VAR 0 3
7330: PPUSH
7331: LD_VAR 0 4
7335: PUSH
7336: LD_VAR 0 4
7340: PUSH
7341: LD_INT 1
7343: MINUS
7344: ARRAY
7345: PPUSH
7346: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7350: LD_VAR 0 3
7354: PPUSH
7355: LD_INT 109
7357: PPUSH
7358: LD_INT 9
7360: PPUSH
7361: CALL_OW 111
// wait ( 0 0$1 ) ;
7365: LD_INT 35
7367: PPUSH
7368: CALL_OW 67
// for i := 1 to 2 do
7372: LD_ADDR_VAR 0 2
7376: PUSH
7377: DOUBLE
7378: LD_INT 1
7380: DEC
7381: ST_TO_ADDR
7382: LD_INT 2
7384: PUSH
7385: FOR_TO
7386: IFFALSE 7450
// begin PrepareHuman ( false , 1 , 2 ) ;
7388: LD_INT 0
7390: PPUSH
7391: LD_INT 1
7393: PPUSH
7394: LD_INT 2
7396: PPUSH
7397: CALL_OW 380
// un := CreateHuman ;
7401: LD_ADDR_VAR 0 3
7405: PUSH
7406: CALL_OW 44
7410: ST_TO_ADDR
// tmp := tmp union un ;
7411: LD_ADDR_VAR 0 4
7415: PUSH
7416: LD_VAR 0 4
7420: PUSH
7421: LD_VAR 0 3
7425: UNION
7426: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_INT 105
7434: PPUSH
7435: LD_INT 2
7437: PPUSH
7438: LD_INT 2
7440: PPUSH
7441: LD_INT 0
7443: PPUSH
7444: CALL_OW 50
// end ;
7448: GO 7385
7450: POP
7451: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7452: LD_VAR 0 4
7456: PPUSH
7457: LD_INT 26
7459: PPUSH
7460: LD_INT 35
7462: PPUSH
7463: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7467: LD_INT 35
7469: PPUSH
7470: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7474: LD_VAR 0 4
7478: PPUSH
7479: LD_INT 50
7481: PUSH
7482: EMPTY
7483: LIST
7484: PPUSH
7485: CALL_OW 72
7489: NOT
7490: IFFALSE 7494
// exit ;
7492: GO 7621
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7494: LD_VAR 0 4
7498: PPUSH
7499: LD_INT 91
7501: PUSH
7502: LD_INT 64
7504: PUSH
7505: LD_INT 12
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 72
7517: PUSH
7518: LD_VAR 0 4
7522: EQUAL
7523: IFFALSE 7467
// omicronSquad := omicronSquad union tmp ;
7525: LD_ADDR_EXP 52
7529: PUSH
7530: LD_EXP 52
7534: PUSH
7535: LD_VAR 0 4
7539: UNION
7540: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_VAR 0 4
7550: PPUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 72
7565: PUSH
7566: FOR_IN
7567: IFFALSE 7619
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7569: LD_VAR 0 2
7573: PPUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 30
7586: PUSH
7587: LD_INT 4
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_VAR 0 2
7607: PPUSH
7608: CALL_OW 74
7612: PPUSH
7613: CALL_OW 120
7617: GO 7566
7619: POP
7620: POP
// end ;
7621: LD_VAR 0 1
7625: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7626: LD_EXP 13
7630: NOT
7631: IFFALSE 8212
7633: GO 7635
7635: DISABLE
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
7640: PPUSH
7641: PPUSH
// begin enable ;
7642: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7643: LD_ADDR_VAR 0 2
7647: PUSH
7648: LD_INT 22
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 21
7660: PUSH
7661: LD_INT 3
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: LD_INT 24
7673: PUSH
7674: LD_INT 1000
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 69
7694: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7695: LD_ADDR_VAR 0 3
7699: PUSH
7700: LD_EXP 52
7704: PPUSH
7705: LD_INT 25
7707: PUSH
7708: LD_INT 2
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: PPUSH
7715: CALL_OW 72
7719: ST_TO_ADDR
// if filter and tmp then
7720: LD_VAR 0 2
7724: IFFALSE 7732
7726: PUSH
7727: LD_VAR 0 3
7731: AND
7732: IFFALSE 7805
// begin for i in tmp do
7734: LD_ADDR_VAR 0 1
7738: PUSH
7739: LD_VAR 0 3
7743: PUSH
7744: FOR_IN
7745: IFFALSE 7801
// if IsInUnit ( i ) then
7747: LD_VAR 0 1
7751: PPUSH
7752: CALL_OW 310
7756: IFFALSE 7769
// ComExitBuilding ( i ) else
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 122
7767: GO 7799
// if not HasTask ( i ) then
7769: LD_VAR 0 1
7773: PPUSH
7774: CALL_OW 314
7778: NOT
7779: IFFALSE 7799
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7781: LD_VAR 0 1
7785: PPUSH
7786: LD_VAR 0 2
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PPUSH
7795: CALL_OW 130
7799: GO 7744
7801: POP
7802: POP
// end else
7803: GO 7876
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7805: LD_VAR 0 3
7809: PPUSH
7810: LD_INT 3
7812: PUSH
7813: LD_INT 54
7815: PUSH
7816: EMPTY
7817: LIST
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 72
7827: IFFALSE 7876
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7829: LD_ADDR_VAR 0 1
7833: PUSH
7834: LD_VAR 0 3
7838: PPUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 54
7844: PUSH
7845: EMPTY
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 72
7856: PUSH
7857: FOR_IN
7858: IFFALSE 7874
// ComEnterUnit ( i , omikron ) ;
7860: LD_VAR 0 1
7864: PPUSH
7865: LD_INT 64
7867: PPUSH
7868: CALL_OW 120
7872: GO 7857
7874: POP
7875: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7876: LD_ADDR_VAR 0 2
7880: PUSH
7881: LD_EXP 52
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: ST_TO_ADDR
// if not filter then
7901: LD_VAR 0 2
7905: NOT
7906: IFFALSE 7910
// exit ;
7908: GO 8212
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7910: LD_ADDR_VAR 0 4
7914: PUSH
7915: LD_INT 13
7917: PPUSH
7918: LD_INT 81
7920: PUSH
7921: LD_INT 4
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 70
7932: ST_TO_ADDR
// if enemy then
7933: LD_VAR 0 4
7937: IFFALSE 8212
// begin for i in filter do
7939: LD_ADDR_VAR 0 1
7943: PUSH
7944: LD_VAR 0 2
7948: PUSH
7949: FOR_IN
7950: IFFALSE 8210
// begin tmp := IsDrivenBy ( i ) ;
7952: LD_ADDR_VAR 0 3
7956: PUSH
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL_OW 311
7966: ST_TO_ADDR
// if not tmp then
7967: LD_VAR 0 3
7971: NOT
7972: IFFALSE 7976
// continue ;
7974: GO 7949
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7976: LD_VAR 0 1
7980: PPUSH
7981: CALL_OW 256
7985: PUSH
7986: LD_INT 600
7988: GREATEREQUAL
7989: IFFALSE 8006
7991: PUSH
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 110
8001: PUSH
8002: LD_INT 1
8004: NONEQUAL
8005: AND
8006: IFFALSE 8032
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 4
8017: PPUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 74
8027: PPUSH
8028: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8032: LD_VAR 0 1
8036: PPUSH
8037: CALL_OW 256
8041: PUSH
8042: LD_INT 600
8044: LESS
8045: IFFALSE 8062
8047: PUSH
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 110
8057: PUSH
8058: LD_INT 1
8060: NONEQUAL
8061: AND
8062: IFFALSE 8091
// begin SetTag ( i , 1 ) ;
8064: LD_VAR 0 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8076: LD_VAR 0 1
8080: PPUSH
8081: LD_INT 27
8083: PPUSH
8084: LD_INT 35
8086: PPUSH
8087: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 110
8100: PUSH
8101: LD_INT 1
8103: EQUAL
8104: IFFALSE 8127
8106: PUSH
8107: LD_VAR 0 1
8111: PPUSH
8112: LD_INT 27
8114: PPUSH
8115: LD_INT 35
8117: PPUSH
8118: CALL_OW 297
8122: PUSH
8123: LD_INT 6
8125: LESS
8126: AND
8127: IFFALSE 8135
8129: PUSH
8130: LD_VAR 0 3
8134: AND
8135: IFFALSE 8208
// begin ComExitVehicle ( tmp ) ;
8137: LD_VAR 0 3
8141: PPUSH
8142: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8160: LD_INT 35
8162: PPUSH
8163: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 256
8176: PUSH
8177: LD_INT 1000
8179: EQUAL
8180: IFFALSE 8160
// ComEnterUnit ( tmp , i ) ;
8182: LD_VAR 0 3
8186: PPUSH
8187: LD_VAR 0 1
8191: PPUSH
8192: CALL_OW 120
// SetTag ( i , 0 ) ;
8196: LD_VAR 0 1
8200: PPUSH
8201: LD_INT 0
8203: PPUSH
8204: CALL_OW 109
// end ; end ;
8208: GO 7949
8210: POP
8211: POP
// end ; end ;
8212: PPOPN 4
8214: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8215: LD_EXP 13
8219: IFFALSE 8363
8221: GO 8223
8223: DISABLE
8224: LD_INT 0
8226: PPUSH
8227: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8228: LD_ADDR_VAR 0 2
8232: PUSH
8233: LD_EXP 52
8237: PPUSH
8238: LD_INT 21
8240: PUSH
8241: LD_INT 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 50
8250: PUSH
8251: EMPTY
8252: LIST
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PPUSH
8258: CALL_OW 72
8262: ST_TO_ADDR
// if not tmp then
8263: LD_VAR 0 2
8267: NOT
8268: IFFALSE 8272
// exit ;
8270: GO 8363
// repeat wait ( 0 0$1 ) ;
8272: LD_INT 35
8274: PPUSH
8275: CALL_OW 67
// for i in tmp do
8279: LD_ADDR_VAR 0 1
8283: PUSH
8284: LD_VAR 0 2
8288: PUSH
8289: FOR_IN
8290: IFFALSE 8354
// begin ComExit ( i ) ;
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL 78979 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8301: LD_VAR 0 1
8305: PPUSH
8306: LD_INT 14
8308: PPUSH
8309: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_INT 14
8320: PPUSH
8321: CALL_OW 308
8325: IFFALSE 8352
// begin tmp := tmp diff i ;
8327: LD_ADDR_VAR 0 2
8331: PUSH
8332: LD_VAR 0 2
8336: PUSH
8337: LD_VAR 0 1
8341: DIFF
8342: ST_TO_ADDR
// RemoveUnit ( i ) ;
8343: LD_VAR 0 1
8347: PPUSH
8348: CALL_OW 64
// end ; end ;
8352: GO 8289
8354: POP
8355: POP
// until not tmp ;
8356: LD_VAR 0 2
8360: NOT
8361: IFFALSE 8272
// end ; end_of_file
8363: PPOPN 2
8365: END
// export function Action ; var i , un , veh , tmp ; begin
8366: LD_INT 0
8368: PPUSH
8369: PPUSH
8370: PPUSH
8371: PPUSH
8372: PPUSH
// InGameOn ;
8373: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8377: LD_INT 179
8379: PPUSH
8380: LD_INT 5
8382: PPUSH
8383: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8387: LD_ADDR_VAR 0 4
8391: PUSH
8392: LD_INT 2
8394: PPUSH
8395: LD_INT 2
8397: PPUSH
8398: LD_INT 12
8400: PPUSH
8401: LD_INT 1
8403: PPUSH
8404: LD_INT 1
8406: PPUSH
8407: LD_INT 24
8409: PPUSH
8410: LD_INT 33
8412: PPUSH
8413: CALL 386 0 7
8417: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8418: LD_VAR 0 4
8422: PPUSH
8423: LD_INT 2
8425: PPUSH
8426: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8430: LD_VAR 0 4
8434: PPUSH
8435: LD_INT 178
8437: PPUSH
8438: LD_INT 2
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8448: LD_EXP 26
8452: PPUSH
8453: LD_VAR 0 4
8457: PPUSH
8458: CALL_OW 52
// if Kamil then
8462: LD_EXP 30
8466: IFFALSE 8501
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8468: LD_EXP 30
8472: PPUSH
8473: LD_INT 207
8475: PPUSH
8476: LD_INT 37
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8486: LD_EXP 30
8490: PPUSH
8491: LD_INT 211
8493: PPUSH
8494: LD_INT 38
8496: PPUSH
8497: CALL_OW 118
// end ; if Sophia then
8501: LD_EXP 32
8505: IFFALSE 8540
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8507: LD_EXP 32
8511: PPUSH
8512: LD_INT 209
8514: PPUSH
8515: LD_INT 40
8517: PPUSH
8518: LD_INT 0
8520: PPUSH
8521: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8525: LD_EXP 32
8529: PPUSH
8530: LD_INT 211
8532: PPUSH
8533: LD_INT 38
8535: PPUSH
8536: CALL_OW 118
// end ; if Givi then
8540: LD_EXP 27
8544: IFFALSE 8579
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8546: LD_EXP 27
8550: PPUSH
8551: LD_INT 201
8553: PPUSH
8554: LD_INT 34
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8564: LD_EXP 27
8568: PPUSH
8569: LD_INT 206
8571: PPUSH
8572: LD_INT 36
8574: PPUSH
8575: CALL_OW 118
// end ; if Ibrahim then
8579: LD_EXP 29
8583: IFFALSE 8618
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8585: LD_EXP 29
8589: PPUSH
8590: LD_INT 202
8592: PPUSH
8593: LD_INT 39
8595: PPUSH
8596: LD_INT 0
8598: PPUSH
8599: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8603: LD_EXP 29
8607: PPUSH
8608: LD_INT 206
8610: PPUSH
8611: LD_INT 36
8613: PPUSH
8614: CALL_OW 118
// end ; if Markov then
8618: LD_EXP 33
8622: IFFALSE 8709
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8624: LD_ADDR_VAR 0 4
8628: PUSH
8629: LD_INT 2
8631: PPUSH
8632: LD_INT 2
8634: PPUSH
8635: LD_INT 13
8637: PPUSH
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: LD_INT 25
8646: PPUSH
8647: LD_INT 80
8649: PUSH
8650: LD_INT 20
8652: PUSH
8653: LD_OWVAR 67
8657: MUL
8658: MINUS
8659: PPUSH
8660: CALL 386 0 7
8664: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8665: LD_VAR 0 4
8669: PPUSH
8670: LD_INT 2
8672: PPUSH
8673: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8677: LD_VAR 0 4
8681: PPUSH
8682: LD_INT 197
8684: PPUSH
8685: LD_INT 35
8687: PPUSH
8688: LD_INT 0
8690: PPUSH
8691: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8695: LD_EXP 33
8699: PPUSH
8700: LD_VAR 0 4
8704: PPUSH
8705: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8709: LD_ADDR_VAR 0 5
8713: PUSH
8714: LD_EXP 31
8718: PUSH
8719: LD_EXP 38
8723: UNION
8724: ST_TO_ADDR
// for i in tmp do
8725: LD_ADDR_VAR 0 2
8729: PUSH
8730: LD_VAR 0 5
8734: PUSH
8735: FOR_IN
8736: IFFALSE 8770
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8738: LD_VAR 0 2
8742: PPUSH
8743: LD_INT 203
8745: PPUSH
8746: LD_INT 41
8748: PPUSH
8749: LD_INT 6
8751: PPUSH
8752: LD_INT 0
8754: PPUSH
8755: CALL_OW 50
// ComHold ( i ) ;
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 140
// end ;
8768: GO 8735
8770: POP
8771: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8772: LD_INT 22
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 25
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PPUSH
8796: CALL_OW 69
8800: NOT
8801: IFFALSE 8815
// SetClass ( Heike , 2 ) ;
8803: LD_EXP 26
8807: PPUSH
8808: LD_INT 2
8810: PPUSH
8811: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8815: LD_EXP 26
8819: PPUSH
8820: LD_INT 183
8822: PPUSH
8823: LD_INT 12
8825: PPUSH
8826: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8830: LD_EXP 26
8834: PPUSH
8835: LD_INT 188
8837: PPUSH
8838: LD_INT 20
8840: PPUSH
8841: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8845: LD_EXP 26
8849: PPUSH
8850: LD_INT 191
8852: PPUSH
8853: LD_INT 25
8855: PPUSH
8856: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8860: LD_EXP 26
8864: PPUSH
8865: LD_INT 203
8867: PPUSH
8868: LD_INT 29
8870: PPUSH
8871: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8875: LD_EXP 26
8879: PPUSH
8880: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8884: LD_INT 35
8886: PPUSH
8887: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8891: LD_EXP 26
8895: PPUSH
8896: CALL_OW 310
8900: NOT
8901: IFFALSE 8884
// CenterOnUnits ( Heike ) ;
8903: LD_EXP 26
8907: PPUSH
8908: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8912: LD_ADDR_VAR 0 5
8916: PUSH
8917: LD_INT 22
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 21
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: PUSH
8946: LD_EXP 26
8950: PUSH
8951: LD_EXP 33
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: DIFF
8960: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8961: LD_VAR 0 5
8965: PPUSH
8966: LD_EXP 26
8970: PPUSH
8971: CALL_OW 119
// if Givi then
8975: LD_EXP 27
8979: IFFALSE 8997
// ComTurnUnit ( Heike , Givi ) else
8981: LD_EXP 26
8985: PPUSH
8986: LD_EXP 27
8990: PPUSH
8991: CALL_OW 119
8995: GO 9015
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8997: LD_EXP 26
9001: PPUSH
9002: LD_VAR 0 5
9006: PUSH
9007: LD_INT 1
9009: ARRAY
9010: PPUSH
9011: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9015: LD_EXP 26
9019: PPUSH
9020: LD_STRING DH-Start-1
9022: PPUSH
9023: CALL_OW 88
// if Givi then
9027: LD_EXP 27
9031: IFFALSE 9078
// begin Say ( Givi , DG-Start-2 ) ;
9033: LD_EXP 27
9037: PPUSH
9038: LD_STRING DG-Start-2
9040: PPUSH
9041: CALL_OW 88
// if not Mike then
9045: LD_EXP 28
9049: NOT
9050: IFFALSE 9076
// begin Say ( Givi , DG-Start-b-3 ) ;
9052: LD_EXP 27
9056: PPUSH
9057: LD_STRING DG-Start-b-3
9059: PPUSH
9060: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9064: LD_EXP 26
9068: PPUSH
9069: LD_STRING DH-Start-b-4
9071: PPUSH
9072: CALL_OW 88
// end ; end else
9076: GO 9143
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9078: LD_EXP 38
9082: PPUSH
9083: LD_INT 26
9085: PUSH
9086: LD_INT 1
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 72
9097: PUSH
9098: LD_INT 1
9100: ARRAY
9101: PPUSH
9102: LD_STRING DArm-Start-a-2
9104: PPUSH
9105: CALL_OW 88
9109: NOT
9110: IFFALSE 9143
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9112: LD_EXP 38
9116: PPUSH
9117: LD_INT 26
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 72
9131: PUSH
9132: LD_INT 1
9134: ARRAY
9135: PPUSH
9136: LD_STRING DArf-Start-a-2
9138: PPUSH
9139: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9143: LD_EXP 26
9147: PPUSH
9148: LD_INT 211
9150: PPUSH
9151: LD_INT 38
9153: PPUSH
9154: CALL_OW 118
// wait ( 0 0$1 ) ;
9158: LD_INT 35
9160: PPUSH
9161: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9165: LD_EXP 26
9169: PPUSH
9170: LD_STRING DH-Start-3
9172: PPUSH
9173: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9177: LD_EXP 26
9181: PPUSH
9182: LD_STRING DH-Start-4
9184: PPUSH
9185: CALL_OW 88
// InGameOff ;
9189: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9193: LD_STRING Prepare
9195: PPUSH
9196: CALL_OW 337
// SaveForQuickRestart ;
9200: CALL_OW 22
// wait ( 0 0$10 ) ;
9204: LD_INT 350
9206: PPUSH
9207: CALL_OW 67
// if not Aviradze then
9211: LD_EXP 36
9215: NOT
9216: IFFALSE 9220
// exit ;
9218: GO 9460
// SetDir ( Aviradze , 4 ) ;
9220: LD_EXP 36
9224: PPUSH
9225: LD_INT 4
9227: PPUSH
9228: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9232: LD_EXP 36
9236: PPUSH
9237: LD_INT 225
9239: PPUSH
9240: LD_INT 33
9242: PPUSH
9243: LD_INT 0
9245: PPUSH
9246: CALL_OW 48
// for i := 1 to 2 do
9250: LD_ADDR_VAR 0 2
9254: PUSH
9255: DOUBLE
9256: LD_INT 1
9258: DEC
9259: ST_TO_ADDR
9260: LD_INT 2
9262: PUSH
9263: FOR_TO
9264: IFFALSE 9395
// begin uc_side := 2 ;
9266: LD_ADDR_OWVAR 20
9270: PUSH
9271: LD_INT 2
9273: ST_TO_ADDR
// uc_nation := 0 ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9282: LD_INT 0
9284: PPUSH
9285: LD_INT 12
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: CALL_OW 380
// hc_gallery :=  ;
9295: LD_ADDR_OWVAR 33
9299: PUSH
9300: LD_STRING 
9302: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9303: LD_ADDR_OWVAR 26
9307: PUSH
9308: LD_STRING Artudito
9310: PUSH
9311: LD_STRING Textur
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: LD_VAR 0 2
9322: ARRAY
9323: ST_TO_ADDR
// un := CreateHuman ;
9324: LD_ADDR_VAR 0 3
9328: PUSH
9329: CALL_OW 44
9333: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9334: LD_VAR 0 3
9338: PPUSH
9339: LD_INT 224
9341: PUSH
9342: LD_INT 226
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_VAR 0 2
9353: ARRAY
9354: PPUSH
9355: LD_INT 31
9357: PUSH
9358: LD_INT 35
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: LD_VAR 0 2
9369: ARRAY
9370: PPUSH
9371: LD_INT 0
9373: PPUSH
9374: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9378: LD_VAR 0 3
9382: PPUSH
9383: LD_INT 215
9385: PPUSH
9386: LD_INT 36
9388: PPUSH
9389: CALL_OW 111
// end ;
9393: GO 9263
9395: POP
9396: POP
// hc_name :=  ;
9397: LD_ADDR_OWVAR 26
9401: PUSH
9402: LD_STRING 
9404: ST_TO_ADDR
// InitHc ;
9405: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9409: LD_EXP 36
9413: PPUSH
9414: LD_INT 215
9416: PPUSH
9417: LD_INT 36
9419: PPUSH
9420: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9424: LD_EXP 36
9428: PPUSH
9429: LD_STRING DA-Arrive-1
9431: PPUSH
9432: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9436: LD_EXP 26
9440: PPUSH
9441: LD_STRING DH-Arrive-2
9443: PPUSH
9444: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9448: LD_EXP 36
9452: PPUSH
9453: LD_STRING DA-Arrive-3
9455: PPUSH
9456: CALL_OW 88
// end ;
9460: LD_VAR 0 1
9464: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p , sex ;
9465: LD_EXP 3
9469: IFFALSE 11021
9471: GO 9473
9473: DISABLE
9474: LD_INT 0
9476: PPUSH
9477: PPUSH
9478: PPUSH
9479: PPUSH
9480: PPUSH
// begin DialogueOn ;
9481: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9485: LD_EXP 26
9489: PPUSH
9490: LD_STRING DH-base-1
9492: PPUSH
9493: CALL_OW 88
// if Markov then
9497: LD_EXP 33
9501: IFFALSE 9553
// begin Say ( Markov , DMar-base-2 ) ;
9503: LD_EXP 33
9507: PPUSH
9508: LD_STRING DMar-base-2
9510: PPUSH
9511: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9515: LD_EXP 33
9519: PPUSH
9520: LD_STRING DMar-base-3
9522: PPUSH
9523: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9527: LD_EXP 26
9531: PPUSH
9532: LD_STRING DH-base-4
9534: PPUSH
9535: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9539: LD_EXP 33
9543: PPUSH
9544: LD_STRING DMar-base-5
9546: PPUSH
9547: CALL_OW 88
// end else
9551: GO 9630
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9553: LD_EXP 38
9557: PPUSH
9558: LD_INT 26
9560: PUSH
9561: LD_INT 1
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 72
9572: PUSH
9573: LD_INT 1
9575: ARRAY
9576: PPUSH
9577: LD_STRING DArm-base-a-2
9579: PPUSH
9580: CALL_OW 88
9584: NOT
9585: IFFALSE 9618
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9587: LD_EXP 38
9591: PPUSH
9592: LD_INT 26
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PPUSH
9602: CALL_OW 72
9606: PUSH
9607: LD_INT 1
9609: ARRAY
9610: PPUSH
9611: LD_STRING DArf-base-a-2
9613: PPUSH
9614: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9618: LD_EXP 26
9622: PPUSH
9623: LD_STRING DH-base-a-3
9625: PPUSH
9626: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9630: LD_EXP 36
9634: PPUSH
9635: LD_STRING DA-base-6
9637: PPUSH
9638: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9642: LD_EXP 36
9646: PPUSH
9647: LD_STRING DA-base-7
9649: PPUSH
9650: CALL_OW 88
// DialogueOff ;
9654: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9658: LD_STRING Flamethrower
9660: PPUSH
9661: CALL_OW 337
// wait ( 2 2$00 ) ;
9665: LD_INT 4200
9667: PPUSH
9668: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9672: LD_EXP 35
9676: PUSH
9677: LD_EXP 28
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PPUSH
9686: LD_INT 203
9688: PPUSH
9689: LD_INT 37
9691: PPUSH
9692: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9696: LD_INT 22
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 92
9708: PUSH
9709: LD_INT 203
9711: PUSH
9712: LD_INT 37
9714: PUSH
9715: LD_INT 10
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: NOT
9733: IFFALSE 9773
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9735: LD_EXP 35
9739: PUSH
9740: LD_EXP 28
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PPUSH
9749: LD_EXP 26
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 26
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9773: LD_INT 35
9775: PPUSH
9776: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9780: LD_INT 2
9782: PPUSH
9783: LD_EXP 35
9787: PPUSH
9788: CALL_OW 292
9792: IFFALSE 9870
9794: PUSH
9795: LD_EXP 35
9799: PPUSH
9800: LD_EXP 26
9804: PPUSH
9805: CALL_OW 296
9809: PUSH
9810: LD_INT 8
9812: LESS
9813: IFTRUE 9869
9815: PUSH
9816: LD_EXP 35
9820: PPUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 3
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PPUSH
9845: CALL_OW 69
9849: PPUSH
9850: LD_EXP 35
9854: PPUSH
9855: CALL_OW 74
9859: PPUSH
9860: CALL_OW 296
9864: PUSH
9865: LD_INT 7
9867: LESS
9868: OR
9869: AND
9870: IFFALSE 9887
9872: PUSH
9873: LD_EXP 35
9877: PPUSH
9878: LD_INT 10
9880: PPUSH
9881: CALL_OW 308
9885: NOT
9886: AND
9887: IFFALSE 9773
// InGameOn ;
9889: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9893: LD_EXP 35
9897: PPUSH
9898: CALL_OW 87
// if IsInUnit ( Heike ) then
9902: LD_EXP 26
9906: PPUSH
9907: CALL_OW 310
9911: IFFALSE 9929
// begin ComExit ( Heike ) ;
9913: LD_EXP 26
9917: PPUSH
9918: CALL 78979 0 1
// wait ( 0 0$1 ) ;
9922: LD_INT 35
9924: PPUSH
9925: CALL_OW 67
// end ; ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9929: LD_EXP 35
9933: PUSH
9934: LD_EXP 28
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: LD_EXP 26
9947: PPUSH
9948: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9952: LD_EXP 26
9956: PPUSH
9957: LD_EXP 35
9961: PPUSH
9962: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9966: LD_INT 22
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 91
9978: PUSH
9979: LD_EXP 35
9983: PUSH
9984: LD_INT 10
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 3
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: IFFALSE 10037
// begin Say ( Kurt , DKs-scout-1 ) ;
10013: LD_EXP 35
10017: PPUSH
10018: LD_STRING DKs-scout-1
10020: PPUSH
10021: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10025: LD_EXP 26
10029: PPUSH
10030: LD_STRING DH-scout-2
10032: PPUSH
10033: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10037: LD_EXP 26
10041: PPUSH
10042: CALL_OW 85
// repeat wait ( 0 0$1 ) ;
10046: LD_INT 35
10048: PPUSH
10049: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10053: LD_EXP 26
10057: PPUSH
10058: LD_EXP 35
10062: PPUSH
10063: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10067: LD_EXP 26
10071: PPUSH
10072: LD_EXP 35
10076: PPUSH
10077: CALL_OW 296
10081: PUSH
10082: LD_INT 6
10084: LESS
10085: IFFALSE 10046
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10087: LD_EXP 35
10091: PUSH
10092: LD_EXP 28
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PPUSH
10101: LD_EXP 26
10105: PPUSH
10106: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10110: LD_EXP 35
10114: PPUSH
10115: LD_STRING DKs-scout-3
10117: PPUSH
10118: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10122: LD_EXP 31
10126: IFFALSE 10148
10128: PUSH
10129: LD_EXP 31
10133: PPUSH
10134: LD_EXP 35
10138: PPUSH
10139: CALL_OW 296
10143: PUSH
10144: LD_INT 15
10146: LESS
10147: AND
10148: IFFALSE 10373
// begin p := 1 ;
10150: LD_ADDR_VAR 0 4
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10158: LD_EXP 31
10162: PPUSH
10163: CALL_OW 310
10167: IFFALSE 10178
// ComExit ( Kaia ) ;
10169: LD_EXP 31
10173: PPUSH
10174: CALL 78979 0 1
// wait ( 0 0$1 ) ;
10178: LD_INT 35
10180: PPUSH
10181: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10185: LD_EXP 31
10189: PPUSH
10190: LD_EXP 35
10194: PPUSH
10195: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10199: LD_INT 35
10201: PPUSH
10202: CALL_OW 67
// p := Inc ( p ) ;
10206: LD_ADDR_VAR 0 4
10210: PUSH
10211: LD_VAR 0 4
10215: PPUSH
10216: CALL 79954 0 1
10220: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10221: LD_EXP 31
10225: PPUSH
10226: LD_EXP 35
10230: PPUSH
10231: CALL_OW 296
10235: PUSH
10236: LD_INT 6
10238: LESS
10239: IFTRUE 10251
10241: PUSH
10242: LD_VAR 0 4
10246: PUSH
10247: LD_INT 12
10249: GREATER
10250: OR
10251: IFFALSE 10199
// ComTurnUnit ( Kaia , Kurt ) ;
10253: LD_EXP 31
10257: PPUSH
10258: LD_EXP 35
10262: PPUSH
10263: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10267: LD_EXP 31
10271: PPUSH
10272: LD_STRING DK-scout-4
10274: PPUSH
10275: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10279: LD_EXP 35
10283: PPUSH
10284: LD_EXP 31
10288: PPUSH
10289: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10293: LD_EXP 35
10297: PPUSH
10298: LD_STRING DKs-scout-5
10300: PPUSH
10301: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10305: LD_EXP 31
10309: PPUSH
10310: LD_STRING DK-scout-6
10312: PPUSH
10313: CALL_OW 88
// if Mike then
10317: LD_EXP 28
10321: IFFALSE 10373
// begin Say ( Mike , DM-scout-7 ) ;
10323: LD_EXP 28
10327: PPUSH
10328: LD_STRING DM-scout-7
10330: PPUSH
10331: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10335: LD_EXP 31
10339: PPUSH
10340: LD_EXP 28
10344: PPUSH
10345: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10349: LD_EXP 31
10353: PPUSH
10354: LD_STRING DK-scout-8
10356: PPUSH
10357: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10361: LD_EXP 28
10365: PPUSH
10366: LD_STRING DM-scout-9
10368: PPUSH
10369: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10373: LD_INT 184
10375: PPUSH
10376: LD_INT 100
10378: PPUSH
10379: LD_INT 2
10381: PPUSH
10382: LD_INT 12
10384: NEG
10385: PPUSH
10386: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10390: LD_INT 184
10392: PPUSH
10393: LD_INT 100
10395: PPUSH
10396: LD_INT 2
10398: PPUSH
10399: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10403: LD_INT 184
10405: PPUSH
10406: LD_INT 100
10408: PPUSH
10409: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10413: LD_EXP 35
10417: PPUSH
10418: LD_STRING DKs-scout-10
10420: PPUSH
10421: CALL_OW 88
// wait ( 0 0$1 ) ;
10425: LD_INT 35
10427: PPUSH
10428: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10432: LD_INT 144
10434: PPUSH
10435: LD_INT 65
10437: PPUSH
10438: LD_INT 2
10440: PPUSH
10441: LD_INT 12
10443: NEG
10444: PPUSH
10445: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10449: LD_INT 144
10451: PPUSH
10452: LD_INT 65
10454: PPUSH
10455: LD_INT 2
10457: PPUSH
10458: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10462: LD_INT 144
10464: PPUSH
10465: LD_INT 65
10467: PPUSH
10468: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10472: LD_EXP 35
10476: PPUSH
10477: LD_STRING DKs-scout-11
10479: PPUSH
10480: CALL_OW 88
// Say ( Kurt , DKs-scout-12 ) ;
10484: LD_EXP 35
10488: PPUSH
10489: LD_STRING DKs-scout-12
10491: PPUSH
10492: CALL_OW 88
// wait ( 0 0$1 ) ;
10496: LD_INT 35
10498: PPUSH
10499: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10503: LD_EXP 35
10507: PPUSH
10508: CALL_OW 87
// if Mike and not Givi then
10512: LD_EXP 28
10516: IFFALSE 10525
10518: PUSH
10519: LD_EXP 27
10523: NOT
10524: AND
10525: IFFALSE 10551
// begin Say ( Mike , DM-scout-a-1 ) ;
10527: LD_EXP 28
10531: PPUSH
10532: LD_STRING DM-scout-a-1
10534: PPUSH
10535: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10539: LD_EXP 26
10543: PPUSH
10544: LD_STRING DH-scout-a-2
10546: PPUSH
10547: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10551: LD_EXP 35
10555: PUSH
10556: LD_EXP 28
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PPUSH
10565: LD_INT 2
10567: PPUSH
10568: CALL_OW 235
// ComStop ( [ Kurt , Mike ] ) ;
10572: LD_EXP 35
10576: PUSH
10577: LD_EXP 28
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PPUSH
10586: CALL_OW 141
// InGameOff ;
10590: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10594: LD_STRING Hill
10596: PPUSH
10597: CALL_OW 337
// Hint ( BunkerHill ) ;
10601: LD_STRING BunkerHill
10603: PPUSH
10604: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10608: LD_INT 22
10610: PPUSH
10611: LD_INT 1
10613: PPUSH
10614: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10618: LD_INT 20
10620: PPUSH
10621: LD_INT 1
10623: PPUSH
10624: CALL_OW 424
// allowToPatrol := true ;
10628: LD_ADDR_EXP 12
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10636: LD_INT 3150
10638: PPUSH
10639: CALL_OW 67
// InitHc ;
10643: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10647: LD_ADDR_VAR 0 1
10651: PUSH
10652: DOUBLE
10653: LD_INT 1
10655: DEC
10656: ST_TO_ADDR
10657: LD_INT 3
10659: PUSH
10660: LD_INT 3
10662: PUSH
10663: LD_INT 2
10665: PUSH
10666: LD_INT 2
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: LD_OWVAR 67
10679: ARRAY
10680: PUSH
10681: FOR_TO
10682: IFFALSE 11019
// begin uc_side := 2 ;
10684: LD_ADDR_OWVAR 20
10688: PUSH
10689: LD_INT 2
10691: ST_TO_ADDR
// uc_nation := 2 ;
10692: LD_ADDR_OWVAR 21
10696: PUSH
10697: LD_INT 2
10699: ST_TO_ADDR
// if i = 1 then
10700: LD_VAR 0 1
10704: PUSH
10705: LD_INT 1
10707: EQUAL
10708: IFFALSE 10720
// sex := sex_male else
10710: LD_ADDR_VAR 0 5
10714: PUSH
10715: LD_INT 1
10717: ST_TO_ADDR
10718: GO 10728
// sex := false ;
10720: LD_ADDR_VAR 0 5
10724: PUSH
10725: LD_INT 0
10727: ST_TO_ADDR
// PrepareHuman ( sex , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10728: LD_VAR 0 5
10732: PPUSH
10733: LD_INT 1
10735: PUSH
10736: LD_INT 3
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: LD_VAR 0 1
10751: PUSH
10752: LD_INT 3
10754: MOD
10755: PUSH
10756: LD_INT 1
10758: PLUS
10759: ARRAY
10760: PPUSH
10761: LD_INT 3
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 2
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: LD_OWVAR 67
10783: ARRAY
10784: PPUSH
10785: CALL_OW 380
// un := CreateHuman ;
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: CALL_OW 44
10798: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10799: LD_ADDR_EXP 38
10803: PUSH
10804: LD_EXP 38
10808: PUSH
10809: LD_VAR 0 2
10813: UNION
10814: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10815: LD_INT 2
10817: PPUSH
10818: LD_INT 2
10820: PPUSH
10821: LD_INT 13
10823: PPUSH
10824: LD_INT 2
10826: PUSH
10827: LD_INT 1
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: LD_INT 2
10841: MOD
10842: PUSH
10843: LD_INT 1
10845: PLUS
10846: ARRAY
10847: PPUSH
10848: LD_INT 1
10850: PPUSH
10851: LD_INT 27
10853: PUSH
10854: LD_INT 25
10856: PUSH
10857: LD_INT 27
10859: PUSH
10860: LD_INT 23
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_OWVAR 67
10877: PUSH
10878: LD_INT 0
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: CALL_OW 12
10888: PLUS
10889: ARRAY
10890: PPUSH
10891: LD_INT 77
10893: PPUSH
10894: CALL 386 0 7
// veh := CreateVehicle ;
10898: LD_ADDR_VAR 0 3
10902: PUSH
10903: CALL_OW 45
10907: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10908: LD_VAR 0 3
10912: PPUSH
10913: LD_INT 2
10915: PPUSH
10916: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
10920: LD_INT 35
10922: PPUSH
10923: CALL_OW 67
// until PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10927: LD_VAR 0 3
10931: PPUSH
10932: LD_INT 178
10934: PPUSH
10935: LD_INT 2
10937: PPUSH
10938: LD_INT 2
10940: PPUSH
10941: LD_INT 0
10943: PPUSH
10944: CALL_OW 50
10948: IFFALSE 10920
// PlaceHumanInUnit ( un , veh ) ;
10950: LD_VAR 0 2
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10964: LD_VAR 0 2
10968: PPUSH
10969: LD_INT 183
10971: PPUSH
10972: LD_INT 11
10974: PPUSH
10975: CALL_OW 111
// if i = 1 then
10979: LD_VAR 0 1
10983: PUSH
10984: LD_INT 1
10986: EQUAL
10987: IFFALSE 11010
// begin CenterOnUnits ( un ) ;
10989: LD_VAR 0 2
10993: PPUSH
10994: CALL_OW 85
// Say ( un , DArSol-Arrival-1 ) ;
10998: LD_VAR 0 2
11002: PPUSH
11003: LD_STRING DArSol-Arrival-1
11005: PPUSH
11006: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
11010: LD_INT 70
11012: PPUSH
11013: CALL_OW 67
// end ;
11017: GO 10681
11019: POP
11020: POP
// end ;
11021: PPOPN 5
11023: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11024: LD_EXP 4
11028: IFFALSE 11041
11030: PUSH
11031: LD_EXP 36
11035: PPUSH
11036: CALL_OW 302
11040: AND
11041: IFFALSE 11090
11043: GO 11045
11045: DISABLE
// begin DialogueOn ;
11046: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11050: LD_EXP 36
11054: PPUSH
11055: LD_STRING DA-lab-1
11057: PPUSH
11058: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11062: LD_EXP 36
11066: PPUSH
11067: LD_STRING DA-lab-2
11069: PPUSH
11070: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11074: LD_EXP 26
11078: PPUSH
11079: LD_STRING DH-lab-3
11081: PPUSH
11082: CALL_OW 88
// DialogueOff ;
11086: CALL_OW 7
// end ;
11090: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11091: LD_INT 17
11093: PPUSH
11094: LD_INT 2
11096: PPUSH
11097: CALL_OW 321
11101: PUSH
11102: LD_INT 2
11104: EQUAL
11105: IFFALSE 11237
11107: GO 11109
11109: DISABLE
11110: LD_INT 0
11112: PPUSH
// begin DialogueOn ;
11113: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11117: LD_EXP 36
11121: PPUSH
11122: LD_STRING DA-Cam-1
11124: PPUSH
11125: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11129: LD_EXP 36
11133: PPUSH
11134: LD_STRING DA-Cam-2
11136: PPUSH
11137: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11141: LD_EXP 36
11145: PPUSH
11146: LD_STRING DA-Cam-3
11148: PPUSH
11149: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11153: LD_EXP 26
11157: PPUSH
11158: LD_STRING DH-Cam-4
11160: PPUSH
11161: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11165: LD_EXP 31
11169: PPUSH
11170: LD_STRING DK-Cam-5
11172: PPUSH
11173: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11177: LD_EXP 31
11181: PPUSH
11182: LD_STRING DK-Cam-6
11184: PPUSH
11185: CALL_OW 88
// DialogueOff ;
11189: CALL_OW 7
// Query ( Camera ) ;
11193: LD_STRING Camera
11195: PPUSH
11196: CALL_OW 97
// hiddenCameraAllowed := true ;
11200: LD_ADDR_EXP 5
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// for i in camAreas do
11208: LD_ADDR_VAR 0 1
11212: PUSH
11213: LD_EXP 8
11217: PUSH
11218: FOR_IN
11219: IFFALSE 11235
// SetAreaMapShow ( i , 1 ) ;
11221: LD_VAR 0 1
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 424
11233: GO 11218
11235: POP
11236: POP
// end ;
11237: PPOPN 1
11239: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11240: LD_EXP 8
11244: NOT
11245: IFFALSE 11253
11247: PUSH
11248: LD_EXP 5
11252: AND
11253: IFFALSE 11351
11255: GO 11257
11257: DISABLE
11258: LD_INT 0
11260: PPUSH
// begin stop_talking := true ;
11261: LD_ADDR_OWVAR 56
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_INT 22
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 21
11286: PUSH
11287: LD_INT 1
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 23
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: PPUSH
11309: CALL_OW 69
11313: PUSH
11314: FOR_IN
11315: IFFALSE 11334
// AddExperience ( i , 2 , 450 ) ;
11317: LD_VAR 0 1
11321: PPUSH
11322: LD_INT 2
11324: PPUSH
11325: LD_INT 450
11327: PPUSH
11328: CALL_OW 492
11332: GO 11314
11334: POP
11335: POP
// stop_talking := false ;
11336: LD_ADDR_OWVAR 56
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11344: LD_STRING ACH_CAMERA
11346: PPUSH
11347: CALL_OW 543
// end ;
11351: PPOPN 1
11353: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11354: LD_EXP 9
11358: IFFALSE 11367
11360: PUSH
11361: LD_EXP 11
11365: NOT
11366: AND
11367: IFFALSE 11426
11369: GO 11371
11371: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11372: LD_EXP 9
11376: PPUSH
11377: CALL_OW 250
11381: PPUSH
11382: LD_EXP 9
11386: PPUSH
11387: CALL_OW 251
11391: PPUSH
11392: LD_INT 2
11394: PPUSH
11395: LD_INT 6
11397: NEG
11398: PPUSH
11399: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11403: LD_EXP 9
11407: PPUSH
11408: CALL_OW 87
// wait ( 0 0$1 ) ;
11412: LD_INT 35
11414: PPUSH
11415: CALL_OW 67
// YouLost ( Spotted ) ;
11419: LD_STRING Spotted
11421: PPUSH
11422: CALL_OW 104
// end ;
11426: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11427: LD_INT 3
11429: PUSH
11430: LD_INT 6
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PPUSH
11437: LD_INT 2
11439: PPUSH
11440: LD_EXP 48
11444: PPUSH
11445: CALL 1054 0 3
11449: IFFALSE 11482
11451: GO 11453
11453: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11454: LD_ADDR_EXP 9
11458: PUSH
11459: LD_INT 3
11461: PUSH
11462: LD_INT 6
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PPUSH
11469: LD_INT 2
11471: PPUSH
11472: LD_EXP 48
11476: PPUSH
11477: CALL 1054 0 3
11481: ST_TO_ADDR
11482: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11483: LD_INT 22
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 32
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 3
11505: PUSH
11506: LD_INT 24
11508: PUSH
11509: LD_INT 1000
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 69
11529: IFFALSE 11590
11531: GO 11533
11533: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11534: LD_ADDR_EXP 9
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_INT 6
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 30
11551: PUSH
11552: LD_INT 32
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 3
11561: PUSH
11562: LD_INT 24
11564: PUSH
11565: LD_INT 1000
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 69
11585: PUSH
11586: LD_INT 1
11588: ARRAY
11589: ST_TO_ADDR
11590: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11591: LD_EXP 9
11595: IFFALSE 11637
11597: PUSH
11598: LD_INT 21
11600: PPUSH
11601: LD_INT 21
11603: PUSH
11604: LD_INT 3
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 24
11616: PUSH
11617: LD_INT 1000
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PPUSH
11632: CALL_OW 70
11636: AND
11637: IFFALSE 11876
11639: GO 11641
11641: DISABLE
11642: LD_INT 0
11644: PPUSH
11645: PPUSH
11646: PPUSH
11647: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11648: LD_ADDR_VAR 0 4
11652: PUSH
11653: LD_EXP 43
11657: PUSH
11658: LD_EXP 45
11662: PUSH
11663: LD_EXP 46
11667: UNION
11668: PPUSH
11669: LD_INT 3
11671: PUSH
11672: LD_INT 25
11674: PUSH
11675: LD_INT 1
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 72
11690: UNION
11691: ST_TO_ADDR
// for i in noncombat do
11692: LD_ADDR_VAR 0 1
11696: PUSH
11697: LD_VAR 0 4
11701: PUSH
11702: FOR_IN
11703: IFFALSE 11799
// begin if IsInUnit ( i ) then
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 310
11714: IFFALSE 11725
// ComExitBuilding ( i ) ;
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11725: LD_VAR 0 1
11729: PPUSH
11730: LD_INT 114
11732: PPUSH
11733: LD_INT 97
11735: PPUSH
11736: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11740: LD_VAR 0 1
11744: PPUSH
11745: LD_INT 99
11747: PPUSH
11748: LD_INT 128
11750: PPUSH
11751: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11755: LD_VAR 0 1
11759: PPUSH
11760: LD_INT 91
11762: PPUSH
11763: LD_INT 145
11765: PPUSH
11766: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11770: LD_VAR 0 1
11774: PPUSH
11775: LD_INT 82
11777: PPUSH
11778: LD_INT 153
11780: PPUSH
11781: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11785: LD_VAR 0 1
11789: PPUSH
11790: LD_INT 16
11792: PPUSH
11793: CALL_OW 173
// end ;
11797: GO 11702
11799: POP
11800: POP
// if not allowHeikeAttack then
11801: LD_EXP 11
11805: NOT
11806: IFFALSE 11810
// exit ;
11808: GO 11876
// wait ( 0 0$05 ) ;
11810: LD_INT 175
11812: PPUSH
11813: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11817: LD_EXP 41
11821: PPUSH
11822: LD_STRING D9a-Kur-1
11824: PPUSH
11825: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11829: LD_EXP 44
11833: PPUSH
11834: LD_STRING D9a-Bur-1
11836: PPUSH
11837: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11841: LD_EXP 41
11845: PPUSH
11846: LD_STRING D9a-Kur-2
11848: PPUSH
11849: CALL_OW 94
// omicronFall := true ;
11853: LD_ADDR_EXP 13
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11861: LD_INT 105
11863: PPUSH
11864: CALL_OW 67
// retreatFromOmicron := true ;
11868: LD_ADDR_EXP 20
11872: PUSH
11873: LD_INT 1
11875: ST_TO_ADDR
// end ;
11876: PPOPN 4
11878: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11879: LD_INT 16
11881: PPUSH
11882: LD_INT 3
11884: PUSH
11885: LD_INT 22
11887: PUSH
11888: LD_INT 2
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 23
11901: PUSH
11902: LD_INT 3
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 70
11917: IFFALSE 12000
11919: GO 11921
11921: DISABLE
11922: LD_INT 0
11924: PPUSH
// begin enable ;
11925: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: LD_INT 16
11933: PPUSH
11934: LD_INT 3
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 23
11953: PUSH
11954: LD_INT 3
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PPUSH
11965: CALL_OW 70
11969: PUSH
11970: FOR_IN
11971: IFFALSE 11998
// begin escapeCounter := escapeCounter + 1 ;
11973: LD_ADDR_EXP 19
11977: PUSH
11978: LD_EXP 19
11982: PUSH
11983: LD_INT 1
11985: PLUS
11986: ST_TO_ADDR
// RemoveUnit ( i ) ;
11987: LD_VAR 0 1
11991: PPUSH
11992: CALL_OW 64
// end ;
11996: GO 11970
11998: POP
11999: POP
// end ;
12000: PPOPN 1
12002: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12003: LD_OWVAR 1
12007: PUSH
12008: LD_INT 13650
12010: PUSH
12011: LD_INT 0
12013: PPUSH
12014: LD_INT 3150
12016: PPUSH
12017: CALL_OW 12
12021: PLUS
12022: GREATEREQUAL
12023: IFFALSE 12032
12025: GO 12027
12027: DISABLE
// SmallAmericanReinforcements ;
12028: CALL 7177 0 0
12032: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
12033: LD_OWVAR 1
12037: PUSH
12038: LD_INT 31500
12040: PUSH
12041: LD_INT 29400
12043: PUSH
12044: LD_INT 27300
12046: PUSH
12047: LD_INT 25200
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: PUSH
12056: LD_OWVAR 67
12060: ARRAY
12061: GREATEREQUAL
12062: IFFALSE 12127
12064: GO 12066
12066: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12067: LD_EXP 49
12071: PPUSH
12072: LD_INT 21
12074: PUSH
12075: LD_INT 2
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: PPUSH
12087: LD_INT 62
12089: PPUSH
12090: LD_INT 22
12092: PPUSH
12093: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12097: LD_EXP 50
12101: PPUSH
12102: LD_INT 69
12104: PPUSH
12105: LD_INT 27
12107: PPUSH
12108: CALL_OW 111
// wait ( 1 1$00 ) ;
12112: LD_INT 2100
12114: PPUSH
12115: CALL_OW 67
// startAttackOnOmicron := true ;
12119: LD_ADDR_EXP 6
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// end ;
12127: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12128: LD_EXP 22
12132: PUSH
12133: LD_INT 0
12135: EQUAL
12136: IFFALSE 14208
12138: GO 12140
12140: DISABLE
12141: LD_INT 0
12143: PPUSH
12144: PPUSH
12145: PPUSH
12146: PPUSH
12147: PPUSH
12148: PPUSH
12149: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12150: LD_INT 5
12152: PPUSH
12153: LD_INT 2
12155: PPUSH
12156: CALL_OW 343
// PrepareOmarForces ;
12160: CALL 1658 0 0
// wait ( 0 0$03 ) ;
12164: LD_INT 105
12166: PPUSH
12167: CALL_OW 67
// allowHeikeAttack := true ;
12171: LD_ADDR_EXP 11
12175: PUSH
12176: LD_INT 1
12178: ST_TO_ADDR
// activeGrishkoAI := false ;
12179: LD_ADDR_EXP 10
12183: PUSH
12184: LD_INT 0
12186: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12187: LD_INT 20
12189: PPUSH
12190: LD_INT 0
12192: PPUSH
12193: CALL_OW 424
// if not hillBase then
12197: LD_EXP 15
12201: NOT
12202: IFFALSE 12211
// ChangeMissionObjectives ( HillDone ) ;
12204: LD_STRING HillDone
12206: PPUSH
12207: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12211: LD_EXP 34
12215: PPUSH
12216: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12220: LD_ADDR_VAR 0 1
12224: PUSH
12225: LD_INT 22
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 21
12237: PUSH
12238: LD_INT 1
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: PUSH
12254: FOR_IN
12255: IFFALSE 12279
// if HasTask ( i ) then
12257: LD_VAR 0 1
12261: PPUSH
12262: CALL_OW 314
12266: IFFALSE 12277
// ComHold ( i ) ;
12268: LD_VAR 0 1
12272: PPUSH
12273: CALL_OW 140
12277: GO 12254
12279: POP
12280: POP
// DialogueOn ;
12281: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12285: LD_EXP 34
12289: PPUSH
12290: LD_STRING DO-assault-1
12292: PPUSH
12293: CALL_OW 94
// DialogueOff ;
12297: CALL_OW 7
// game_speed := 4 ;
12301: LD_ADDR_OWVAR 65
12305: PUSH
12306: LD_INT 4
12308: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12309: LD_ADDR_VAR 0 1
12313: PUSH
12314: LD_EXP 47
12318: PPUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 54
12324: PUSH
12325: EMPTY
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 72
12336: PUSH
12337: FOR_IN
12338: IFFALSE 12357
// ComMoveXY ( i , 226 , 114 ) ;
12340: LD_VAR 0 1
12344: PPUSH
12345: LD_INT 226
12347: PPUSH
12348: LD_INT 114
12350: PPUSH
12351: CALL_OW 111
12355: GO 12337
12357: POP
12358: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12359: LD_EXP 42
12363: PPUSH
12364: LD_INT 22
12366: PUSH
12367: LD_INT 6
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 30
12376: PUSH
12377: LD_INT 4
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: PPUSH
12393: LD_EXP 42
12397: PPUSH
12398: CALL_OW 74
12402: PPUSH
12403: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12407: LD_STRING Attack
12409: PPUSH
12410: CALL_OW 337
// music_class := music_combat ;
12414: LD_ADDR_OWVAR 72
12418: PUSH
12419: LD_INT 1
12421: ST_TO_ADDR
// music_nat := 4 ;
12422: LD_ADDR_OWVAR 71
12426: PUSH
12427: LD_INT 4
12429: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12430: LD_INT 5
12432: PPUSH
12433: LD_EXP 42
12437: PPUSH
12438: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12442: LD_INT 6
12444: PPUSH
12445: LD_EXP 39
12449: PPUSH
12450: LD_INT 25
12452: PUSH
12453: LD_INT 1
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PPUSH
12460: CALL_OW 72
12464: PUSH
12465: LD_INT 4
12467: ARRAY
12468: PPUSH
12469: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12473: LD_ADDR_VAR 0 1
12477: PUSH
12478: LD_EXP 39
12482: PPUSH
12483: LD_INT 3
12485: PUSH
12486: LD_INT 25
12488: PUSH
12489: LD_INT 4
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 72
12504: PUSH
12505: FOR_IN
12506: IFFALSE 12525
// ComAgressiveMove ( i , 221 , 110 ) ;
12508: LD_VAR 0 1
12512: PPUSH
12513: LD_INT 221
12515: PPUSH
12516: LD_INT 110
12518: PPUSH
12519: CALL_OW 114
12523: GO 12505
12525: POP
12526: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12527: LD_EXP 39
12531: PPUSH
12532: LD_INT 25
12534: PUSH
12535: LD_INT 4
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PPUSH
12542: CALL_OW 72
12546: PPUSH
12547: LD_INT 214
12549: PPUSH
12550: LD_INT 124
12552: PPUSH
12553: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12557: LD_EXP 39
12561: PPUSH
12562: LD_INT 25
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 72
12576: PUSH
12577: LD_INT 4
12579: ARRAY
12580: PPUSH
12581: LD_INT 214
12583: PPUSH
12584: LD_INT 114
12586: PPUSH
12587: LD_INT 0
12589: PPUSH
12590: CALL_OW 132
// if IsOk ( Grishko ) then
12594: LD_EXP 42
12598: PPUSH
12599: CALL_OW 302
12603: IFFALSE 12629
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12605: LD_EXP 42
12609: PPUSH
12610: LD_STRING D9-Gri-1
12612: PPUSH
12613: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12617: LD_EXP 41
12621: PPUSH
12622: LD_STRING D9-Kur-1
12624: PPUSH
12625: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12629: LD_INT 35
12631: PPUSH
12632: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12636: LD_EXP 34
12640: PPUSH
12641: LD_INT 233
12643: PPUSH
12644: LD_INT 130
12646: PPUSH
12647: CALL_OW 114
// if IsOk ( Grishko ) then
12651: LD_EXP 42
12655: PPUSH
12656: CALL_OW 302
12660: IFFALSE 12686
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12662: LD_EXP 42
12666: PPUSH
12667: LD_STRING D9-Gri-2
12669: PPUSH
12670: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12674: LD_EXP 41
12678: PPUSH
12679: LD_STRING D9-Kur-2
12681: PPUSH
12682: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12686: LD_EXP 42
12690: PPUSH
12691: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12695: LD_EXP 42
12699: PPUSH
12700: LD_INT 211
12702: PPUSH
12703: LD_INT 104
12705: PPUSH
12706: CALL_OW 171
// AddComHold ( Grishko ) ;
12710: LD_EXP 42
12714: PPUSH
12715: CALL_OW 200
// repeat wait ( 3 ) ;
12719: LD_INT 3
12721: PPUSH
12722: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12726: LD_EXP 42
12730: PPUSH
12731: CALL_OW 310
12735: NOT
12736: IFFALSE 12719
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12738: LD_EXP 39
12742: PPUSH
12743: LD_INT 34
12745: PUSH
12746: LD_INT 26
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 72
12757: PPUSH
12758: LD_EXP 42
12762: PPUSH
12763: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12767: LD_EXP 39
12771: PPUSH
12772: LD_INT 34
12774: PUSH
12775: LD_INT 26
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PPUSH
12782: CALL_OW 72
12786: PPUSH
12787: LD_INT 215
12789: PPUSH
12790: LD_INT 106
12792: PPUSH
12793: CALL_OW 174
// repeat wait ( 3 ) ;
12797: LD_INT 3
12799: PPUSH
12800: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12804: LD_EXP 42
12808: PPUSH
12809: CALL_OW 256
12813: PUSH
12814: LD_INT 1000
12816: LESS
12817: IFFALSE 12797
// NormalAttack ( 5 , Grishko ) ;
12819: LD_INT 5
12821: PPUSH
12822: LD_EXP 42
12826: PPUSH
12827: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12831: LD_INT 6
12833: PPUSH
12834: LD_EXP 39
12838: PPUSH
12839: LD_INT 25
12841: PUSH
12842: LD_INT 1
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PPUSH
12849: CALL_OW 72
12853: PUSH
12854: LD_INT 4
12856: ARRAY
12857: PPUSH
12858: CALL_OW 472
// if IsOk ( Grishko ) then
12862: LD_EXP 42
12866: PPUSH
12867: CALL_OW 302
12871: IFFALSE 12897
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12873: LD_EXP 42
12877: PPUSH
12878: LD_STRING D9-Gri-3
12880: PPUSH
12881: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12885: LD_EXP 41
12889: PPUSH
12890: LD_STRING D9-Kur-3
12892: PPUSH
12893: CALL_OW 94
// end ; music_class := music_auto ;
12897: LD_ADDR_OWVAR 72
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// music_nat := music_auto ;
12905: LD_ADDR_OWVAR 71
12909: PUSH
12910: LD_INT 0
12912: ST_TO_ADDR
// for i in omarSquad do
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_EXP 39
12922: PUSH
12923: FOR_IN
12924: IFFALSE 13068
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12926: LD_VAR 0 1
12930: PPUSH
12931: CALL_OW 247
12935: PUSH
12936: LD_INT 2
12938: EQUAL
12939: IFFALSE 12956
12941: PUSH
12942: LD_VAR 0 1
12946: PPUSH
12947: CALL_OW 256
12951: PUSH
12952: LD_INT 1000
12954: LESS
12955: AND
12956: IFFALSE 13022
// begin driver := IsDrivenBy ( i ) ;
12958: LD_ADDR_VAR 0 2
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 311
12972: ST_TO_ADDR
// veh := i ;
12973: LD_ADDR_VAR 0 3
12977: PUSH
12978: LD_VAR 0 1
12982: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12983: LD_VAR 0 2
12987: PPUSH
12988: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12992: LD_VAR 0 2
12996: PPUSH
12997: LD_VAR 0 3
13001: PPUSH
13002: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13006: LD_VAR 0 2
13010: PPUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: CALL_OW 180
// end else
13020: GO 13066
// if GetLives ( i ) < 500 then
13022: LD_VAR 0 1
13026: PPUSH
13027: CALL_OW 256
13031: PUSH
13032: LD_INT 500
13034: LESS
13035: IFFALSE 13066
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13037: LD_EXP 39
13041: PPUSH
13042: LD_INT 25
13044: PUSH
13045: LD_INT 4
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 72
13056: PPUSH
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 188
// end ; end ;
13066: GO 12923
13068: POP
13069: POP
// repeat wait ( 0 0$1 ) ;
13070: LD_INT 35
13072: PPUSH
13073: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13077: LD_EXP 39
13081: PPUSH
13082: LD_INT 3
13084: PUSH
13085: LD_INT 24
13087: PUSH
13088: LD_INT 1000
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PPUSH
13113: CALL_OW 72
13117: NOT
13118: IFFALSE 13149
13120: PUSH
13121: LD_EXP 39
13125: PPUSH
13126: LD_INT 3
13128: PUSH
13129: LD_INT 24
13131: PUSH
13132: LD_INT 250
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PPUSH
13143: CALL_OW 72
13147: NOT
13148: AND
13149: IFFALSE 13070
// wait ( 0 0$2 ) ;
13151: LD_INT 70
13153: PPUSH
13154: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13158: LD_ADDR_VAR 0 5
13162: PUSH
13163: LD_EXP 39
13167: PPUSH
13168: LD_INT 58
13170: PUSH
13171: EMPTY
13172: LIST
13173: PUSH
13174: LD_INT 21
13176: PUSH
13177: LD_INT 2
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PPUSH
13188: CALL_OW 72
13192: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13193: LD_ADDR_VAR 0 6
13197: PUSH
13198: LD_EXP 39
13202: PPUSH
13203: LD_INT 25
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 3
13215: PUSH
13216: LD_INT 55
13218: PUSH
13219: EMPTY
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 72
13234: ST_TO_ADDR
// for i := 1 to tmp do
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: DOUBLE
13241: LD_INT 1
13243: DEC
13244: ST_TO_ADDR
13245: LD_VAR 0 5
13249: PUSH
13250: FOR_TO
13251: IFFALSE 13281
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13253: LD_VAR 0 6
13257: PUSH
13258: LD_VAR 0 1
13262: ARRAY
13263: PPUSH
13264: LD_VAR 0 5
13268: PUSH
13269: LD_VAR 0 1
13273: ARRAY
13274: PPUSH
13275: CALL_OW 120
13279: GO 13250
13281: POP
13282: POP
// wait ( 0 0$5 ) ;
13283: LD_INT 175
13285: PPUSH
13286: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13290: LD_EXP 39
13294: PPUSH
13295: LD_INT 199
13297: PPUSH
13298: LD_INT 141
13300: PPUSH
13301: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13305: LD_EXP 34
13309: PPUSH
13310: LD_INT 190
13312: PPUSH
13313: LD_INT 143
13315: PPUSH
13316: CALL_OW 114
// AddComHold ( Omar ) ;
13320: LD_EXP 34
13324: PPUSH
13325: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13329: LD_EXP 39
13333: PPUSH
13334: LD_INT 2
13336: PUSH
13337: LD_INT 25
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 25
13349: PUSH
13350: LD_INT 4
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: PPUSH
13362: CALL_OW 72
13366: PPUSH
13367: LD_INT 161
13369: PPUSH
13370: LD_INT 130
13372: PPUSH
13373: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13377: LD_EXP 39
13381: PPUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 72
13396: PPUSH
13397: LD_INT 163
13399: PPUSH
13400: LD_INT 122
13402: PPUSH
13403: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13407: LD_EXP 39
13411: PPUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PPUSH
13422: CALL_OW 72
13426: PUSH
13427: LD_INT 4
13429: ARRAY
13430: PPUSH
13431: LD_INT 165
13433: PPUSH
13434: LD_INT 118
13436: PPUSH
13437: LD_INT 0
13439: PPUSH
13440: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13444: LD_EXP 39
13448: PPUSH
13449: LD_INT 25
13451: PUSH
13452: LD_INT 1
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 72
13463: PUSH
13464: LD_INT 4
13466: ARRAY
13467: PPUSH
13468: LD_INT 159
13470: PPUSH
13471: LD_INT 116
13473: PPUSH
13474: LD_INT 0
13476: PPUSH
13477: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13481: LD_EXP 39
13485: PPUSH
13486: LD_INT 21
13488: PUSH
13489: LD_INT 2
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 72
13500: PPUSH
13501: LD_INT 169
13503: PPUSH
13504: LD_INT 114
13506: PPUSH
13507: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13511: LD_INT 35
13513: PPUSH
13514: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13518: LD_ADDR_VAR 0 5
13522: PUSH
13523: LD_EXP 39
13527: PPUSH
13528: LD_INT 25
13530: PUSH
13531: LD_INT 1
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PPUSH
13538: CALL_OW 72
13542: ST_TO_ADDR
// for i in tmp do
13543: LD_ADDR_VAR 0 1
13547: PUSH
13548: LD_VAR 0 5
13552: PUSH
13553: FOR_IN
13554: IFFALSE 13655
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13556: LD_VAR 0 1
13560: PPUSH
13561: CALL_OW 256
13565: PUSH
13566: LD_INT 600
13568: LESS
13569: IFFALSE 13592
13571: PUSH
13572: LD_VAR 0 1
13576: PPUSH
13577: LD_INT 161
13579: PPUSH
13580: LD_INT 130
13582: PPUSH
13583: CALL_OW 297
13587: PUSH
13588: LD_INT 6
13590: GREATER
13591: AND
13592: IFFALSE 13609
// ComMoveXY ( i , 161 , 130 ) ;
13594: LD_VAR 0 1
13598: PPUSH
13599: LD_INT 161
13601: PPUSH
13602: LD_INT 130
13604: PPUSH
13605: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13609: LD_VAR 0 1
13613: PPUSH
13614: CALL_OW 256
13618: PUSH
13619: LD_INT 1000
13621: EQUAL
13622: IFFALSE 13636
13624: PUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 314
13634: NOT
13635: AND
13636: IFFALSE 13653
// ComAgressiveMove ( i , 160 , 109 ) ;
13638: LD_VAR 0 1
13642: PPUSH
13643: LD_INT 160
13645: PPUSH
13646: LD_INT 109
13648: PPUSH
13649: CALL_OW 114
// end ;
13653: GO 13553
13655: POP
13656: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13657: LD_ADDR_VAR 0 5
13661: PUSH
13662: LD_EXP 39
13666: PPUSH
13667: LD_INT 21
13669: PUSH
13670: LD_INT 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PPUSH
13677: CALL_OW 72
13681: ST_TO_ADDR
// for i in tmp do
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_VAR 0 5
13691: PUSH
13692: FOR_IN
13693: IFFALSE 13969
// begin tmp2 := IsDrivenBy ( i ) ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 1
13704: PPUSH
13705: CALL_OW 311
13709: ST_TO_ADDR
// if not tmp2 then
13710: LD_VAR 0 6
13714: NOT
13715: IFFALSE 13719
// continue ;
13717: GO 13692
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13719: LD_VAR 0 1
13723: PPUSH
13724: CALL_OW 256
13728: PUSH
13729: LD_INT 600
13731: GREATEREQUAL
13732: IFFALSE 13749
13734: PUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 110
13744: PUSH
13745: LD_INT 1
13747: EQUAL
13748: AND
13749: IFFALSE 13763
// SetTag ( i , 0 ) ;
13751: LD_VAR 0 1
13755: PPUSH
13756: LD_INT 0
13758: PPUSH
13759: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 256
13772: PUSH
13773: LD_INT 600
13775: GREATEREQUAL
13776: IFFALSE 13790
13778: PUSH
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 110
13788: NOT
13789: AND
13790: IFFALSE 13816
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: LD_VAR 0 7
13801: PPUSH
13802: LD_VAR 0 1
13806: PPUSH
13807: CALL_OW 74
13811: PPUSH
13812: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13816: LD_VAR 0 1
13820: PPUSH
13821: CALL_OW 256
13825: PUSH
13826: LD_INT 600
13828: LESS
13829: IFFALSE 13843
13831: PUSH
13832: LD_VAR 0 1
13836: PPUSH
13837: CALL_OW 110
13841: NOT
13842: AND
13843: IFFALSE 13872
// begin SetTag ( i , 1 ) ;
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_INT 1
13852: PPUSH
13853: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_INT 202
13864: PPUSH
13865: LD_INT 150
13867: PPUSH
13868: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 110
13881: PUSH
13882: LD_INT 1
13884: EQUAL
13885: IFFALSE 13908
13887: PUSH
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_INT 202
13895: PPUSH
13896: LD_INT 150
13898: PPUSH
13899: CALL_OW 297
13903: PUSH
13904: LD_INT 6
13906: LESS
13907: AND
13908: IFFALSE 13916
13910: PUSH
13911: LD_VAR 0 6
13915: AND
13916: IFFALSE 13967
// begin ComExitVehicle ( tmp2 ) ;
13918: LD_VAR 0 6
13922: PPUSH
13923: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13927: LD_VAR 0 6
13931: PPUSH
13932: LD_VAR 0 1
13936: PPUSH
13937: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13941: LD_VAR 0 6
13945: PPUSH
13946: LD_INT 700
13948: PPUSH
13949: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13953: LD_VAR 0 6
13957: PPUSH
13958: LD_VAR 0 1
13962: PPUSH
13963: CALL_OW 180
// end ; end ;
13967: GO 13692
13969: POP
13970: POP
// until kirovDestroyed ;
13971: LD_EXP 16
13975: IFFALSE 13511
// repeat wait ( 0 0$1 ) ;
13977: LD_INT 35
13979: PPUSH
13980: CALL_OW 67
// for i in omarSquad union Omar do
13984: LD_ADDR_VAR 0 1
13988: PUSH
13989: LD_EXP 39
13993: PUSH
13994: LD_EXP 34
13998: UNION
13999: PUSH
14000: FOR_IN
14001: IFFALSE 14175
// if IsInArea ( i , southRoadArea ) then
14003: LD_VAR 0 1
14007: PPUSH
14008: LD_INT 15
14010: PPUSH
14011: CALL_OW 308
14015: IFFALSE 14028
// RemoveUnit ( i ) else
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 64
14026: GO 14173
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 257
14037: PUSH
14038: LD_INT 3
14040: EQUAL
14041: IFFALSE 14055
14043: PUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 310
14053: NOT
14054: AND
14055: IFFALSE 14105
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_INT 5
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 24
14070: PUSH
14071: LD_INT 251
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 2
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 58
14090: PUSH
14091: EMPTY
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 69
14104: AND
14105: IFFALSE 14158
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14107: LD_VAR 0 1
14111: PPUSH
14112: LD_INT 22
14114: PUSH
14115: LD_INT 5
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 21
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: LD_INT 58
14134: PUSH
14135: EMPTY
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: PUSH
14148: LD_INT 1
14150: ARRAY
14151: PPUSH
14152: CALL_OW 120
14156: GO 14173
// ComMoveXY ( i , 208 , 162 ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_INT 208
14165: PPUSH
14166: LD_INT 162
14168: PPUSH
14169: CALL_OW 111
// end ;
14173: GO 14000
14175: POP
14176: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14177: LD_INT 22
14179: PUSH
14180: LD_INT 5
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 21
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: NOT
14206: IFFALSE 13977
// end ;
14208: PPOPN 7
14210: END
// every 0 0$1 trigger IsDead ( kirov ) do
14211: LD_INT 71
14213: PPUSH
14214: CALL_OW 301
14218: IFFALSE 14235
14220: GO 14222
14222: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14223: LD_EXP 26
14227: PPUSH
14228: LD_STRING DH-1-Kirov
14230: PPUSH
14231: CALL_OW 88
14235: END
// every 0 0$1 trigger See ( 2 , beria ) do
14236: LD_INT 2
14238: PPUSH
14239: LD_INT 106
14241: PPUSH
14242: CALL_OW 292
14246: IFFALSE 14263
14248: GO 14250
14250: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14251: LD_EXP 26
14255: PPUSH
14256: LD_STRING DH-1-Beria
14258: PPUSH
14259: CALL_OW 88
14263: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14264: LD_INT 2
14266: PPUSH
14267: LD_INT 112
14269: PPUSH
14270: CALL_OW 292
14274: IFFALSE 14543
14276: GO 14278
14278: DISABLE
// begin DialogueOn ;
14279: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14283: LD_INT 112
14285: PPUSH
14286: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14290: LD_EXP 26
14294: PPUSH
14295: LD_STRING DH-1-Kagan
14297: PPUSH
14298: CALL_OW 88
// if Kamil then
14302: LD_EXP 30
14306: IFFALSE 14344
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14308: LD_EXP 30
14312: PPUSH
14313: LD_STRING DKam-Kagan-2
14315: PPUSH
14316: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14320: LD_EXP 27
14324: PPUSH
14325: LD_STRING DG-Kagan-3
14327: PPUSH
14328: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14332: LD_EXP 27
14336: PPUSH
14337: LD_STRING DG-Kagan-4
14339: PPUSH
14340: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14344: LD_STRING KaganBase
14346: PPUSH
14347: CALL_OW 97
14351: PUSH
14352: LD_INT 1
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14455
14360: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14361: LD_EXP 26
14365: PPUSH
14366: LD_STRING DH-Kagan-5
14368: PPUSH
14369: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14373: LD_EXP 26
14377: PPUSH
14378: LD_STRING DH-Kagan-6
14380: PPUSH
14381: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14385: LD_EXP 37
14389: PPUSH
14390: LD_STRING DShar-Kagan-7
14392: PPUSH
14393: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14397: LD_EXP 26
14401: PPUSH
14402: LD_STRING DH-Kagan-8
14404: PPUSH
14405: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14409: LD_EXP 26
14413: PPUSH
14414: LD_STRING DH-Kagan-9
14416: PPUSH
14417: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14421: LD_EXP 37
14425: PPUSH
14426: LD_STRING DShar-Kagan-10
14428: PPUSH
14429: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14433: LD_EXP 26
14437: PPUSH
14438: LD_STRING DH-Kagan-11
14440: PPUSH
14441: CALL_OW 88
// kaganCaptured := true ;
14445: LD_ADDR_EXP 24
14449: PUSH
14450: LD_INT 1
14452: ST_TO_ADDR
// end ; 2 :
14453: GO 14539
14455: LD_INT 2
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14538
14463: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14464: LD_INT 22
14466: PUSH
14467: LD_INT 8
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PPUSH
14474: CALL_OW 69
14478: IFFALSE 14486
14480: PUSH
14481: LD_EXP 36
14485: AND
14486: IFFALSE 14500
// Say ( Heike , DH-Kagan-a-5 ) ;
14488: LD_EXP 26
14492: PPUSH
14493: LD_STRING DH-Kagan-a-5
14495: PPUSH
14496: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14500: LD_EXP 26
14504: PPUSH
14505: LD_STRING DH-Kagan-a-6
14507: PPUSH
14508: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14512: LD_EXP 26
14516: PPUSH
14517: LD_STRING DH-Kagan-a-7
14519: PPUSH
14520: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14524: LD_EXP 27
14528: PPUSH
14529: LD_STRING DG-Kagan-a-8
14531: PPUSH
14532: CALL_OW 88
// end ; end ;
14536: GO 14539
14538: POP
// DialogueOff ;
14539: CALL_OW 7
// end ;
14543: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14544: LD_EXP 18
14548: IFTRUE 14563
14550: PUSH
14551: LD_INT 112
14553: PPUSH
14554: CALL_OW 255
14558: PUSH
14559: LD_INT 2
14561: EQUAL
14562: OR
14563: IFFALSE 14575
14565: GO 14567
14567: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14568: LD_STRING KaganDone
14570: PPUSH
14571: CALL_OW 337
14575: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14576: LD_EXP 6
14580: IFFALSE 14603
14582: PUSH
14583: LD_EXP 49
14587: PPUSH
14588: LD_INT 95
14590: PUSH
14591: LD_INT 19
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PPUSH
14598: CALL_OW 72
14602: AND
14603: IFFALSE 14680
14605: GO 14607
14607: DISABLE
// begin DialogueOn ;
14608: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14612: LD_INT 63
14614: PPUSH
14615: LD_INT 32
14617: PPUSH
14618: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14622: LD_INT 63
14624: PPUSH
14625: LD_INT 32
14627: PPUSH
14628: LD_INT 2
14630: PPUSH
14631: LD_INT 12
14633: NEG
14634: PPUSH
14635: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14639: LD_EXP 26
14643: PPUSH
14644: LD_STRING DH-Omicron-1
14646: PPUSH
14647: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14651: LD_EXP 28
14655: PPUSH
14656: LD_STRING DM-Omicron-2
14658: PPUSH
14659: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14663: LD_INT 63
14665: PPUSH
14666: LD_INT 32
14668: PPUSH
14669: LD_INT 2
14671: PPUSH
14672: CALL_OW 331
// DialogueOff ;
14676: CALL_OW 7
// end ;
14680: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14681: LD_INT 2
14683: PPUSH
14684: LD_EXP 51
14688: PPUSH
14689: CALL_OW 292
14693: IFTRUE 14710
14695: PUSH
14696: LD_EXP 51
14700: PPUSH
14701: CALL_OW 255
14705: PUSH
14706: LD_INT 2
14708: EQUAL
14709: OR
14710: IFTRUE 14725
14712: PUSH
14713: LD_INT 106
14715: PPUSH
14716: CALL_OW 255
14720: PUSH
14721: LD_INT 2
14723: EQUAL
14724: OR
14725: IFFALSE 14738
14727: PUSH
14728: LD_EXP 51
14732: PPUSH
14733: CALL_OW 302
14737: AND
14738: IFFALSE 14751
14740: PUSH
14741: LD_EXP 26
14745: PPUSH
14746: CALL_OW 302
14750: AND
14751: IFFALSE 14764
14753: PUSH
14754: LD_EXP 36
14758: PPUSH
14759: CALL_OW 302
14763: AND
14764: IFFALSE 15517
14766: GO 14768
14768: DISABLE
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
// begin DialogueOn ;
14776: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14780: LD_INT 111
14782: PPUSH
14783: LD_INT 90
14785: PPUSH
14786: LD_INT 2
14788: PPUSH
14789: LD_INT 6
14791: NEG
14792: PPUSH
14793: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14797: LD_INT 111
14799: PPUSH
14800: LD_INT 90
14802: PPUSH
14803: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14807: LD_EXP 36
14811: PPUSH
14812: LD_STRING DA-Cap-1
14814: PPUSH
14815: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14819: LD_EXP 26
14823: PPUSH
14824: LD_STRING DH-Cap-2
14826: PPUSH
14827: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14831: LD_INT 111
14833: PPUSH
14834: LD_INT 90
14836: PPUSH
14837: LD_INT 2
14839: PPUSH
14840: CALL_OW 331
// DialogueOff ;
14844: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14848: LD_INT 35
14850: PPUSH
14851: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14855: LD_EXP 17
14859: IFTRUE 14874
14861: PUSH
14862: LD_INT 106
14864: PPUSH
14865: CALL_OW 255
14869: PUSH
14870: LD_INT 2
14872: EQUAL
14873: OR
14874: IFTRUE 14891
14876: PUSH
14877: LD_EXP 51
14881: PPUSH
14882: CALL_OW 255
14886: PUSH
14887: LD_INT 2
14889: EQUAL
14890: OR
14891: IFFALSE 14904
14893: PUSH
14894: LD_EXP 51
14898: PPUSH
14899: CALL_OW 302
14903: AND
14904: IFFALSE 14917
14906: PUSH
14907: LD_EXP 36
14911: PPUSH
14912: CALL_OW 302
14916: AND
14917: IFFALSE 14929
14919: PUSH
14920: LD_INT 2
14922: PPUSH
14923: CALL_OW 463
14927: NOT
14928: AND
14929: IFFALSE 14981
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_INT 3
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 21
14944: PUSH
14945: LD_INT 1
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 92
14954: PUSH
14955: LD_INT 110
14957: PUSH
14958: LD_INT 95
14960: PUSH
14961: LD_INT 12
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: PPUSH
14975: CALL_OW 69
14979: NOT
14980: AND
14981: IFFALSE 15033
14983: PUSH
14984: LD_INT 22
14986: PUSH
14987: LD_INT 3
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 30
14996: PUSH
14997: LD_INT 5
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 92
15006: PUSH
15007: LD_INT 110
15009: PUSH
15010: LD_INT 95
15012: PUSH
15013: LD_INT 12
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: NOT
15032: AND
15033: IFFALSE 14848
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_EXP 38
15044: PUSH
15045: LD_EXP 29
15049: PUSH
15050: LD_EXP 30
15054: PUSH
15055: LD_EXP 32
15059: PUSH
15060: LD_EXP 31
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: UNION
15071: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: LD_VAR 0 2
15081: PPUSH
15082: LD_INT 50
15084: PUSH
15085: EMPTY
15086: LIST
15087: PPUSH
15088: CALL_OW 72
15092: ST_TO_ADDR
// if tmp < 2 then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 2
15100: LESS
15101: IFFALSE 15113
// q := 2 else
15103: LD_ADDR_VAR 0 4
15107: PUSH
15108: LD_INT 2
15110: ST_TO_ADDR
15111: GO 15126
// q := Query ( LabCap ) ;
15113: LD_ADDR_VAR 0 4
15117: PUSH
15118: LD_STRING LabCap
15120: PPUSH
15121: CALL_OW 97
15125: ST_TO_ADDR
// case q of 1 :
15126: LD_VAR 0 4
15130: PUSH
15131: LD_INT 1
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15139
15137: GO 15481
15139: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15140: LD_INT 2
15142: PPUSH
15143: LD_EXP 51
15147: PPUSH
15148: CALL_OW 471
// labCaptured := true ;
15152: LD_ADDR_EXP 21
15156: PUSH
15157: LD_INT 1
15159: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15160: LD_EXP 26
15164: PPUSH
15165: LD_STRING DH-Cap-a-1
15167: PPUSH
15168: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15172: LD_EXP 36
15176: PPUSH
15177: LD_STRING DA-Cap-a-2
15179: PPUSH
15180: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
15184: LD_ADDR_VAR 0 5
15188: PUSH
15189: LD_EXP 36
15193: PUSH
15194: LD_INT -3
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT -2
15203: PUSH
15204: LD_INT -4
15206: PUSH
15207: LD_EXP 26
15211: PUSH
15212: LD_EXP 27
15216: PUSH
15217: LD_EXP 35
15221: PUSH
15222: LD_EXP 33
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: ADD
15235: PUSH
15236: LD_INT -3
15238: PUSH
15239: EMPTY
15240: LIST
15241: ADD
15242: PUSH
15243: LD_VAR 0 2
15247: ADD
15248: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15249: LD_ADDR_VAR 0 3
15253: PUSH
15254: LD_STRING Select two characters to go with Aviradze
15256: PPUSH
15257: LD_INT 2
15259: PPUSH
15260: LD_INT 2
15262: PPUSH
15263: LD_VAR 0 5
15267: PPUSH
15268: EMPTY
15269: PPUSH
15270: CALL_OW 42
15274: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15275: LD_EXP 51
15279: PPUSH
15280: LD_INT 8
15282: PPUSH
15283: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15287: LD_EXP 36
15291: PPUSH
15292: LD_INT 8
15294: PPUSH
15295: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15299: LD_ADDR_EXP 40
15303: PUSH
15304: LD_EXP 36
15308: PUSH
15309: EMPTY
15310: LIST
15311: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15312: LD_EXP 36
15316: PPUSH
15317: CALL_OW 310
15321: IFFALSE 15332
// ComExit ( Aviradze ) ;
15323: LD_EXP 36
15327: PPUSH
15328: CALL 78979 0 1
// wait ( 3 ) ;
15332: LD_INT 3
15334: PPUSH
15335: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15339: LD_EXP 36
15343: PPUSH
15344: LD_EXP 51
15348: PPUSH
15349: CALL_OW 120
// for i := 1 to 2 do
15353: LD_ADDR_VAR 0 1
15357: PUSH
15358: DOUBLE
15359: LD_INT 1
15361: DEC
15362: ST_TO_ADDR
15363: LD_INT 2
15365: PUSH
15366: FOR_TO
15367: IFFALSE 15470
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15369: LD_ADDR_EXP 40
15373: PUSH
15374: LD_EXP 40
15378: PUSH
15379: LD_VAR 0 3
15383: PUSH
15384: LD_VAR 0 1
15388: ARRAY
15389: UNION
15390: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15391: LD_VAR 0 3
15395: PUSH
15396: LD_VAR 0 1
15400: ARRAY
15401: PPUSH
15402: LD_INT 8
15404: PPUSH
15405: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15409: LD_VAR 0 3
15413: PUSH
15414: LD_VAR 0 1
15418: ARRAY
15419: PPUSH
15420: CALL_OW 310
15424: IFFALSE 15441
// ComExit ( tmp2 [ i ] ) ;
15426: LD_VAR 0 3
15430: PUSH
15431: LD_VAR 0 1
15435: ARRAY
15436: PPUSH
15437: CALL 78979 0 1
// wait ( 3 ) ;
15441: LD_INT 3
15443: PPUSH
15444: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15448: LD_VAR 0 3
15452: PUSH
15453: LD_VAR 0 1
15457: ARRAY
15458: PPUSH
15459: LD_EXP 51
15463: PPUSH
15464: CALL_OW 120
// end ;
15468: GO 15366
15470: POP
15471: POP
// SetAchievement ( ACH_LAB ) ;
15472: LD_STRING ACH_LAB
15474: PPUSH
15475: CALL_OW 543
// end ; 2 :
15479: GO 15517
15481: LD_INT 2
15483: DOUBLE
15484: EQUAL
15485: IFTRUE 15489
15487: GO 15516
15489: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15490: LD_EXP 26
15494: PPUSH
15495: LD_STRING DH-Cap-b-1
15497: PPUSH
15498: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15502: LD_EXP 36
15506: PPUSH
15507: LD_STRING DA-Cap-b-2
15509: PPUSH
15510: CALL_OW 88
// end ; end ;
15514: GO 15517
15516: POP
// end ;
15517: PPOPN 5
15519: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15520: LD_INT 10
15522: PPUSH
15523: LD_INT 22
15525: PUSH
15526: LD_INT 2
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 30
15535: PUSH
15536: LD_INT 31
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 70
15551: PUSH
15552: LD_INT 2
15554: GREATEREQUAL
15555: IFFALSE 15567
15557: GO 15559
15559: DISABLE
// SetAchievement ( ACH_KING ) ;
15560: LD_STRING ACH_KING
15562: PPUSH
15563: CALL_OW 543
15567: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15568: LD_EXP 11
15572: NOT
15573: IFFALSE 15626
15575: PUSH
15576: LD_INT 10
15578: PPUSH
15579: LD_INT 22
15581: PUSH
15582: LD_INT 2
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 2
15591: PUSH
15592: LD_INT 30
15594: PUSH
15595: LD_INT 31
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 30
15604: PUSH
15605: LD_INT 4
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 70
15625: AND
15626: IFFALSE 15656
15628: GO 15630
15630: DISABLE
// begin hillBase := true ;
15631: LD_ADDR_EXP 15
15635: PUSH
15636: LD_INT 1
15638: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15639: LD_STRING HillDone
15641: PPUSH
15642: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15646: LD_INT 22
15648: PPUSH
15649: LD_INT 0
15651: PPUSH
15652: CALL_OW 424
// end ;
15656: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15657: LD_EXP 31
15661: IFFALSE 15678
15663: PUSH
15664: LD_EXP 31
15668: PPUSH
15669: CALL_OW 256
15673: PUSH
15674: LD_INT 3
15676: LESS
15677: AND
15678: IFFALSE 15724
15680: GO 15682
15682: DISABLE
// begin DialogueOn ;
15683: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15687: LD_EXP 31
15691: PPUSH
15692: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15696: LD_EXP 31
15700: PPUSH
15701: LD_STRING DK-Kkilled-1
15703: PPUSH
15704: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15708: LD_EXP 26
15712: PPUSH
15713: LD_STRING DH-Kkilled-2
15715: PPUSH
15716: CALL_OW 88
// DialogueOff ;
15720: CALL_OW 7
// end ;
15724: END
// every 0 0$1 trigger kaiaKilledByRussian do
15725: LD_EXP 23
15729: IFFALSE 15746
15731: GO 15733
15733: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15734: LD_EXP 26
15738: PPUSH
15739: LD_STRING DH-Kkilled-3
15741: PPUSH
15742: CALL_OW 88
15746: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15747: LD_EXP 16
15751: IFFALSE 15774
15753: PUSH
15754: LD_INT 106
15756: PPUSH
15757: CALL_OW 255
15761: PUSH
15762: LD_INT 2
15764: EQUAL
15765: IFTRUE 15773
15767: PUSH
15768: LD_EXP 17
15772: OR
15773: AND
15774: IFFALSE 15805
15776: PUSH
15777: LD_EXP 18
15781: IFTRUE 15804
15783: PUSH
15784: LD_EXP 24
15788: IFFALSE 15803
15790: PUSH
15791: LD_INT 112
15793: PPUSH
15794: CALL_OW 255
15798: PUSH
15799: LD_INT 2
15801: EQUAL
15802: AND
15803: OR
15804: AND
15805: IFFALSE 17057
15807: GO 15809
15809: DISABLE
15810: LD_INT 0
15812: PPUSH
15813: PPUSH
15814: PPUSH
15815: PPUSH
15816: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15817: LD_STRING GoToWest
15819: PPUSH
15820: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15824: LD_INT 17
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15834: LD_INT 35
15836: PPUSH
15837: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: LD_INT 17
15848: PPUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 2
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 2
15861: PUSH
15862: LD_INT 21
15864: PUSH
15865: LD_INT 1
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 21
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 3
15884: PUSH
15885: LD_INT 58
15887: PUSH
15888: EMPTY
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 70
15912: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15913: LD_ADDR_VAR 0 3
15917: PUSH
15918: LD_INT 22
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 3
15930: PUSH
15931: LD_INT 55
15933: PUSH
15934: EMPTY
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 2
15943: PUSH
15944: LD_INT 21
15946: PUSH
15947: LD_INT 1
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 21
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 58
15969: PUSH
15970: EMPTY
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15996: LD_VAR 0 2
16000: PUSH
16001: LD_INT 0
16003: PLUS
16004: PUSH
16005: LD_VAR 0 3
16009: PUSH
16010: LD_INT 0
16012: PLUS
16013: EQUAL
16014: IFFALSE 15834
// SaveCharacters ( Heike , 04_1_Heike ) ;
16016: LD_EXP 26
16020: PPUSH
16021: LD_STRING 04_1_Heike
16023: PPUSH
16024: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
16028: LD_EXP 36
16032: IFFALSE 16047
16034: PUSH
16035: LD_EXP 36
16039: PUSH
16040: LD_EXP 40
16044: IN
16045: NOT
16046: AND
16047: IFFALSE 16063
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
16049: LD_EXP 36
16053: PPUSH
16054: LD_STRING 04_1_Aviradze
16056: PPUSH
16057: CALL_OW 38
16061: GO 16081
// if Aviradze then
16063: LD_EXP 36
16067: IFFALSE 16081
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
16069: LD_EXP 36
16073: PPUSH
16074: LD_STRING 04_1_Aviradze_L
16076: PPUSH
16077: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
16081: LD_EXP 29
16085: IFFALSE 16100
16087: PUSH
16088: LD_EXP 29
16092: PUSH
16093: LD_EXP 40
16097: IN
16098: NOT
16099: AND
16100: IFFALSE 16116
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
16102: LD_EXP 29
16106: PPUSH
16107: LD_STRING 04_1_Ibrahim
16109: PPUSH
16110: CALL_OW 38
16114: GO 16134
// if Ibrahim then
16116: LD_EXP 29
16120: IFFALSE 16134
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
16122: LD_EXP 29
16126: PPUSH
16127: LD_STRING 04_1_Ibrahim_L
16129: PPUSH
16130: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
16134: LD_EXP 30
16138: IFFALSE 16153
16140: PUSH
16141: LD_EXP 30
16145: PUSH
16146: LD_EXP 40
16150: IN
16151: NOT
16152: AND
16153: IFFALSE 16169
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16155: LD_EXP 30
16159: PPUSH
16160: LD_STRING 04_1_Kamil
16162: PPUSH
16163: CALL_OW 38
16167: GO 16187
// if Kamil then
16169: LD_EXP 30
16173: IFFALSE 16187
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16175: LD_EXP 30
16179: PPUSH
16180: LD_STRING 04_1_Kamil_L
16182: PPUSH
16183: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16187: LD_EXP 32
16191: IFFALSE 16206
16193: PUSH
16194: LD_EXP 32
16198: PUSH
16199: LD_EXP 40
16203: IN
16204: NOT
16205: AND
16206: IFFALSE 16222
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16208: LD_EXP 32
16212: PPUSH
16213: LD_STRING 04_1_Sophia
16215: PPUSH
16216: CALL_OW 38
16220: GO 16240
// if Sophia then
16222: LD_EXP 32
16226: IFFALSE 16240
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16228: LD_EXP 32
16232: PPUSH
16233: LD_STRING 04_1_Sophia_L
16235: PPUSH
16236: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16240: LD_EXP 31
16244: IFFALSE 16259
16246: PUSH
16247: LD_EXP 31
16251: PUSH
16252: LD_EXP 40
16256: IN
16257: NOT
16258: AND
16259: IFFALSE 16275
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16261: LD_EXP 31
16265: PPUSH
16266: LD_STRING 04_1_Kaia
16268: PPUSH
16269: CALL_OW 38
16273: GO 16293
// if Kaia then
16275: LD_EXP 31
16279: IFFALSE 16293
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16281: LD_EXP 31
16285: PPUSH
16286: LD_STRING 04_1_Kaia_L
16288: PPUSH
16289: CALL_OW 38
// if Givi then
16293: LD_EXP 27
16297: IFFALSE 16311
// SaveCharacters ( Givi , 04_1_Givi ) ;
16299: LD_EXP 27
16303: PPUSH
16304: LD_STRING 04_1_Givi
16306: PPUSH
16307: CALL_OW 38
// if Mike then
16311: LD_EXP 28
16315: IFFALSE 16329
// SaveCharacters ( Mike , 04_1_Mike ) ;
16317: LD_EXP 28
16321: PPUSH
16322: LD_STRING 04_1_Mike
16324: PPUSH
16325: CALL_OW 38
// if Markov then
16329: LD_EXP 33
16333: IFFALSE 16347
// SaveCharacters ( Markov , 04_1_Markov ) ;
16335: LD_EXP 33
16339: PPUSH
16340: LD_STRING 04_1_Markov
16342: PPUSH
16343: CALL_OW 38
// if Kurt then
16347: LD_EXP 35
16351: IFFALSE 16372
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16353: LD_EXP 35
16357: PPUSH
16358: LD_STRING 04_1_Kurt
16360: PPUSH
16361: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16365: LD_STRING enableBioCharacter(BIO_KURT)
16367: PPUSH
16368: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16372: LD_EXP 38
16376: PUSH
16377: LD_EXP 40
16381: DIFF
16382: IFFALSE 16402
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16384: LD_EXP 38
16388: PUSH
16389: LD_EXP 40
16393: DIFF
16394: PPUSH
16395: LD_STRING 04_1_others
16397: PPUSH
16398: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16402: LD_EXP 40
16406: IFFALSE 16414
16408: PUSH
16409: LD_EXP 38
16413: AND
16414: IFFALSE 16499
// begin tmp := [ ] ;
16416: LD_ADDR_VAR 0 2
16420: PUSH
16421: EMPTY
16422: ST_TO_ADDR
// for i in heikeSecondSquad do
16423: LD_ADDR_VAR 0 1
16427: PUSH
16428: LD_EXP 38
16432: PUSH
16433: FOR_IN
16434: IFFALSE 16479
// if i in aviradzeSquad then
16436: LD_VAR 0 1
16440: PUSH
16441: LD_EXP 40
16445: IN
16446: IFFALSE 16477
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16448: LD_ADDR_VAR 0 2
16452: PUSH
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_VAR 0 2
16462: PUSH
16463: LD_INT 1
16465: PLUS
16466: PPUSH
16467: LD_VAR 0 1
16471: PPUSH
16472: CALL_OW 1
16476: ST_TO_ADDR
16477: GO 16433
16479: POP
16480: POP
// if tmp then
16481: LD_VAR 0 2
16485: IFFALSE 16499
// SaveCharacters ( tmp , 04_1_others_L ) ;
16487: LD_VAR 0 2
16491: PPUSH
16492: LD_STRING 04_1_others_L
16494: PPUSH
16495: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16499: LD_ADDR_VAR 0 2
16503: PUSH
16504: LD_INT 22
16506: PUSH
16507: LD_INT 2
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 23
16516: PUSH
16517: LD_INT 0
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: ST_TO_ADDR
// if tmp then
16533: LD_VAR 0 2
16537: IFFALSE 16551
// SaveCharacters ( tmp , 04_1_apes ) ;
16539: LD_VAR 0 2
16543: PPUSH
16544: LD_STRING 04_1_apes
16546: PPUSH
16547: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: LD_INT 17
16558: PPUSH
16559: LD_INT 21
16561: PUSH
16562: LD_INT 2
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PPUSH
16569: CALL_OW 70
16573: ST_TO_ADDR
// if tmp then
16574: LD_VAR 0 2
16578: IFFALSE 16922
// begin tmp2 := [ ] ;
16580: LD_ADDR_VAR 0 3
16584: PUSH
16585: EMPTY
16586: ST_TO_ADDR
// for i in tmp do
16587: LD_ADDR_VAR 0 1
16591: PUSH
16592: LD_VAR 0 2
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16908
// begin driver := IsDrivenBy ( i ) ;
16600: LD_ADDR_VAR 0 5
16604: PUSH
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 311
16614: ST_TO_ADDR
// if not driver then
16615: LD_VAR 0 5
16619: NOT
16620: IFFALSE 16624
// continue ;
16622: GO 16597
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 264
16633: PUSH
16634: LD_INT 32
16636: PUSH
16637: LD_INT 12
16639: PUSH
16640: LD_INT 51
16642: PUSH
16643: LD_INT 89
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: IN
16652: IFFALSE 16800
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16654: LD_ADDR_VAR 0 4
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: LD_INT 1
16666: PPUSH
16667: CALL_OW 289
16671: PUSH
16672: LD_VAR 0 1
16676: PPUSH
16677: LD_INT 2
16679: PPUSH
16680: CALL_OW 289
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16689: LD_ADDR_VAR 0 3
16693: PUSH
16694: LD_VAR 0 3
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 1
16706: PLUS
16707: PPUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 265
16717: PUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: CALL_OW 262
16727: PUSH
16728: LD_VAR 0 1
16732: PPUSH
16733: CALL_OW 263
16737: PUSH
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 264
16747: PUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 248
16757: PUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 256
16767: PUSH
16768: LD_VAR 0 4
16772: PUSH
16773: LD_VAR 0 5
16777: PPUSH
16778: CALL_OW 257
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: PPUSH
16793: CALL_OW 1
16797: ST_TO_ADDR
// end else
16798: GO 16906
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16800: LD_ADDR_VAR 0 3
16804: PUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: LD_VAR 0 3
16814: PUSH
16815: LD_INT 1
16817: PLUS
16818: PPUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: CALL_OW 265
16828: PUSH
16829: LD_VAR 0 1
16833: PPUSH
16834: CALL_OW 262
16838: PUSH
16839: LD_VAR 0 1
16843: PPUSH
16844: CALL_OW 263
16848: PUSH
16849: LD_VAR 0 1
16853: PPUSH
16854: CALL_OW 264
16858: PUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 248
16868: PUSH
16869: LD_VAR 0 1
16873: PPUSH
16874: CALL_OW 256
16878: PUSH
16879: EMPTY
16880: PUSH
16881: LD_VAR 0 5
16885: PPUSH
16886: CALL_OW 257
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 1
16905: ST_TO_ADDR
// end ;
16906: GO 16597
16908: POP
16909: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_STRING 04_1_Vehicles
16917: PPUSH
16918: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16922: LD_EXP 21
16926: PPUSH
16927: LD_STRING 04_1_RuLabCaptured
16929: PPUSH
16930: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16934: LD_EXP 19
16938: PPUSH
16939: LD_STRING 04_1_EscapeCounter
16941: PPUSH
16942: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16946: LD_EXP 15
16950: PPUSH
16951: LD_STRING 04_1_BaseHill
16953: PPUSH
16954: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16958: LD_OWVAR 1
16962: PPUSH
16963: LD_STRING 04_1_Time
16965: PPUSH
16966: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16970: LD_EXP 14
16974: PPUSH
16975: LD_STRING 04_1_DeadCounter
16977: PPUSH
16978: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16982: LD_EXP 24
16986: PUSH
16987: LD_INT 112
16989: PPUSH
16990: CALL_OW 255
16994: MUL
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: PPUSH
17000: LD_STRING 04_1_KaganCaptured
17002: PPUSH
17003: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
17007: LD_INT 22
17009: PUSH
17010: LD_INT 2
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 34
17019: PUSH
17020: LD_INT 26
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PPUSH
17031: CALL_OW 69
17035: PUSH
17036: LD_INT 0
17038: PLUS
17039: PPUSH
17040: LD_STRING 04_1_Flamethrower
17042: PPUSH
17043: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
17047: LD_INT 1
17049: PPUSH
17050: LD_STRING __x1\04_cont2
17052: PPUSH
17053: CALL_OW 340
// end ; end_of_file
17057: PPOPN 5
17059: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 266
17069: PUSH
17070: LD_INT 0
17072: EQUAL
17073: IFFALSE 17090
17075: PUSH
17076: LD_VAR 0 1
17080: PPUSH
17081: CALL_OW 255
17085: PUSH
17086: LD_INT 2
17088: EQUAL
17089: AND
17090: IFFALSE 17100
// baseConstructed := true ;
17092: LD_ADDR_EXP 3
17096: PUSH
17097: LD_INT 1
17099: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 266
17109: PUSH
17110: LD_INT 6
17112: EQUAL
17113: IFFALSE 17130
17115: PUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 255
17125: PUSH
17126: LD_INT 2
17128: EQUAL
17129: AND
17130: IFFALSE 17140
// labConstructed := true ;
17132: LD_ADDR_EXP 4
17136: PUSH
17137: LD_INT 1
17139: ST_TO_ADDR
// end ;
17140: PPOPN 1
17142: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
17143: LD_VAR 0 1
17147: PPUSH
17148: CALL 34222 0 1
// if un = Heike then
17152: LD_VAR 0 1
17156: PUSH
17157: LD_EXP 26
17161: EQUAL
17162: IFFALSE 17171
// YouLost ( Heike ) ;
17164: LD_STRING Heike
17166: PPUSH
17167: CALL_OW 104
// if un = Omar then
17171: LD_VAR 0 1
17175: PUSH
17176: LD_EXP 34
17180: EQUAL
17181: IFFALSE 17190
// YouLost ( Omar ) ;
17183: LD_STRING Omar
17185: PPUSH
17186: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17190: LD_VAR 0 1
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 23
17207: PUSH
17208: LD_INT 2
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 21
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: PPUSH
17230: CALL_OW 69
17234: IN
17235: IFFALSE 17251
// loseCounter := loseCounter + 1 ;
17237: LD_ADDR_EXP 14
17241: PUSH
17242: LD_EXP 14
17246: PUSH
17247: LD_INT 1
17249: PLUS
17250: ST_TO_ADDR
// if un = omikron then
17251: LD_VAR 0 1
17255: PUSH
17256: LD_INT 64
17258: EQUAL
17259: IFFALSE 17269
// omicronFall := true ;
17261: LD_ADDR_EXP 13
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// if un = kirov then
17269: LD_VAR 0 1
17273: PUSH
17274: LD_INT 71
17276: EQUAL
17277: IFFALSE 17294
// begin ChangeMissionObjectives ( KirovDone ) ;
17279: LD_STRING KirovDone
17281: PPUSH
17282: CALL_OW 337
// kirovDestroyed := true ;
17286: LD_ADDR_EXP 16
17290: PUSH
17291: LD_INT 1
17293: ST_TO_ADDR
// end ; if un = beria then
17294: LD_VAR 0 1
17298: PUSH
17299: LD_INT 106
17301: EQUAL
17302: IFFALSE 17319
// begin ChangeMissionObjectives ( BeriaDone ) ;
17304: LD_STRING BeriaDone
17306: PPUSH
17307: CALL_OW 337
// beriaDestroyed := true ;
17311: LD_ADDR_EXP 17
17315: PUSH
17316: LD_INT 1
17318: ST_TO_ADDR
// end ; if un = kagan then
17319: LD_VAR 0 1
17323: PUSH
17324: LD_INT 112
17326: EQUAL
17327: IFFALSE 17337
// kaganDestroyed := true ;
17329: LD_ADDR_EXP 18
17333: PUSH
17334: LD_INT 1
17336: ST_TO_ADDR
// if un in russianPatrol then
17337: LD_VAR 0 1
17341: PUSH
17342: LD_EXP 48
17346: IN
17347: IFFALSE 17365
// russianPatrol := russianPatrol diff un ;
17349: LD_ADDR_EXP 48
17353: PUSH
17354: LD_EXP 48
17358: PUSH
17359: LD_VAR 0 1
17363: DIFF
17364: ST_TO_ADDR
// if un in russianOmicronAttackers then
17365: LD_VAR 0 1
17369: PUSH
17370: LD_EXP 49
17374: IN
17375: IFFALSE 17393
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17377: LD_ADDR_EXP 49
17381: PUSH
17382: LD_EXP 49
17386: PUSH
17387: LD_VAR 0 1
17391: DIFF
17392: ST_TO_ADDR
// end ;
17393: PPOPN 1
17395: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17396: LD_INT 0
17398: PPUSH
17399: PPUSH
17400: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17401: LD_VAR 0 1
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: LD_INT 22
17411: PUSH
17412: LD_INT 3
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 22
17421: PUSH
17422: LD_INT 4
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_INT 6
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 30
17447: PUSH
17448: LD_INT 32
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PPUSH
17459: CALL_OW 69
17463: IN
17464: IFFALSE 17637
// begin sol := UnitsInside ( un ) ;
17466: LD_ADDR_VAR 0 3
17470: PUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 313
17480: ST_TO_ADDR
// if not sol then
17481: LD_VAR 0 3
17485: NOT
17486: IFFALSE 17490
// exit ;
17488: GO 17637
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17490: LD_ADDR_VAR 0 4
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_VAR 0 1
17502: PPUSH
17503: CALL_OW 255
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 2
17514: PUSH
17515: LD_INT 30
17517: PUSH
17518: LD_INT 4
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 30
17527: PUSH
17528: LD_INT 5
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 69
17548: ST_TO_ADDR
// if not nearestBarracks then
17549: LD_VAR 0 4
17553: NOT
17554: IFFALSE 17558
// exit ;
17556: GO 17637
// for i in nearestBarracks do
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_VAR 0 4
17567: PUSH
17568: FOR_IN
17569: IFFALSE 17604
// if UnitsInside ( i ) = 6 then
17571: LD_VAR 0 2
17575: PPUSH
17576: CALL_OW 313
17580: PUSH
17581: LD_INT 6
17583: EQUAL
17584: IFFALSE 17602
// nearestBarracks := nearestBarracks diff i ;
17586: LD_ADDR_VAR 0 4
17590: PUSH
17591: LD_VAR 0 4
17595: PUSH
17596: LD_VAR 0 2
17600: DIFF
17601: ST_TO_ADDR
17602: GO 17568
17604: POP
17605: POP
// if not nearestBarracks then
17606: LD_VAR 0 4
17610: NOT
17611: IFFALSE 17615
// exit ;
17613: GO 17637
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17615: LD_VAR 0 3
17619: PUSH
17620: LD_INT 1
17622: ARRAY
17623: PPUSH
17624: LD_VAR 0 4
17628: PUSH
17629: LD_INT 1
17631: ARRAY
17632: PPUSH
17633: CALL_OW 120
// end ; end ;
17637: PPOPN 4
17639: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17640: LD_INT 0
17642: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17643: LD_EXP 8
17647: NOT
17648: IFTRUE 17657
17650: PUSH
17651: LD_EXP 5
17655: NOT
17656: OR
17657: IFFALSE 17661
// exit ;
17659: GO 17729
// for i in camAreas do
17661: LD_ADDR_VAR 0 5
17665: PUSH
17666: LD_EXP 8
17670: PUSH
17671: FOR_IN
17672: IFFALSE 17727
// if InArea ( x , y , i ) then
17674: LD_VAR 0 3
17678: PPUSH
17679: LD_VAR 0 4
17683: PPUSH
17684: LD_VAR 0 5
17688: PPUSH
17689: CALL_OW 309
17693: IFFALSE 17725
// begin SetAreaMapShow ( i , 0 ) ;
17695: LD_VAR 0 5
17699: PPUSH
17700: LD_INT 0
17702: PPUSH
17703: CALL_OW 424
// camAreas := camAreas diff i ;
17707: LD_ADDR_EXP 8
17711: PUSH
17712: LD_EXP 8
17716: PUSH
17717: LD_VAR 0 5
17721: DIFF
17722: ST_TO_ADDR
// break ;
17723: GO 17727
// end ;
17725: GO 17671
17727: POP
17728: POP
// end ;
17729: PPOPN 5
17731: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17732: LD_VAR 0 1
17736: PUSH
17737: LD_INT 2
17739: EQUAL
17740: IFFALSE 17759
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: LD_INT 5
17750: PUSH
17751: LD_INT 8
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: IN
17758: AND
17759: IFFALSE 17768
// YouLost ( Ally ) ;
17761: LD_STRING Ally
17763: PPUSH
17764: CALL_OW 104
// end ;
17768: PPOPN 2
17770: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17771: LD_VAR 0 1
17775: PUSH
17776: LD_EXP 31
17780: EQUAL
17781: IFFALSE 17800
17783: PUSH
17784: LD_VAR 0 2
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: LD_INT 6
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: IN
17799: AND
17800: IFFALSE 17831
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17802: LD_ADDR_EXP 23
17806: PUSH
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 250
17816: PUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 251
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: ST_TO_ADDR
// end ;
17831: PPOPN 3
17833: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17834: LD_VAR 0 1
17838: PPUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: CALL 34280 0 2
// end ; end_of_file
17848: PPOPN 2
17850: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17851: LD_EXP 11
17855: NOT
17856: IFFALSE 17895
17858: PUSH
17859: LD_INT 12
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 287
17869: PUSH
17870: LD_INT 20
17872: PUSH
17873: LD_INT 16
17875: PUSH
17876: LD_INT 12
17878: PUSH
17879: LD_INT 10
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: PUSH
17888: LD_OWVAR 67
17892: ARRAY
17893: LESS
17894: AND
17895: IFFALSE 17922
17897: GO 17899
17899: DISABLE
// begin enable ;
17900: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17901: LD_INT 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 12
17911: PPUSH
17912: LD_INT 12
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: CALL_OW 55
// end ; end_of_file
17922: END
// every 0 0$1 trigger omarCountdown do
17923: LD_EXP 22
17927: IFFALSE 17979
17929: GO 17931
17931: DISABLE
// begin enable ;
17932: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17933: LD_ADDR_OWVAR 47
17937: PUSH
17938: LD_STRING #X104-1
17940: PUSH
17941: LD_EXP 22
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17950: LD_ADDR_EXP 22
17954: PUSH
17955: LD_EXP 22
17959: PUSH
17960: LD_INT 35
17962: MINUS
17963: ST_TO_ADDR
// if not omarCountdown then
17964: LD_EXP 22
17968: NOT
17969: IFFALSE 17979
// display_strings :=  ;
17971: LD_ADDR_OWVAR 47
17975: PUSH
17976: LD_STRING 
17978: ST_TO_ADDR
// end ; end_of_file
17979: END
// export globalGameSaveCounter ; every 0 0$1 do
17980: GO 17982
17982: DISABLE
// begin enable ;
17983: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17984: LD_STRING updateTimer(
17986: PUSH
17987: LD_OWVAR 1
17991: STR
17992: PUSH
17993: LD_STRING );
17995: STR
17996: PPUSH
17997: CALL_OW 559
// end ;
18001: END
// every 0 0$1 do
18002: GO 18004
18004: DISABLE
// begin globalGameSaveCounter := 0 ;
18005: LD_ADDR_EXP 53
18009: PUSH
18010: LD_INT 0
18012: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18013: LD_STRING setGameSaveCounter(0)
18015: PPUSH
18016: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18020: LD_STRING initStreamRollete();
18022: PPUSH
18023: CALL_OW 559
// InitStreamMode ;
18027: CALL 19372 0 0
// DefineStreamItems ( false ) ;
18031: LD_INT 0
18033: PPUSH
18034: CALL 19836 0 1
// end ;
18038: END
// export function SOS_MapStart ( ) ; begin
18039: LD_INT 0
18041: PPUSH
// if streamModeActive then
18042: LD_EXP 54
18046: IFFALSE 18055
// DefineStreamItems ( true ) ;
18048: LD_INT 1
18050: PPUSH
18051: CALL 19836 0 1
// UpdateLuaVariables ( ) ;
18055: CALL 18072 0 0
// UpdateFactoryWaypoints ( ) ;
18059: CALL 32958 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18063: CALL 33210 0 0
// end ;
18067: LD_VAR 0 1
18071: RET
// function UpdateLuaVariables ( ) ; begin
18072: LD_INT 0
18074: PPUSH
// if globalGameSaveCounter then
18075: LD_EXP 53
18079: IFFALSE 18113
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18081: LD_ADDR_EXP 53
18085: PUSH
18086: LD_EXP 53
18090: PPUSH
18091: CALL 79954 0 1
18095: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18096: LD_STRING setGameSaveCounter(
18098: PUSH
18099: LD_EXP 53
18103: STR
18104: PUSH
18105: LD_STRING )
18107: STR
18108: PPUSH
18109: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18113: LD_STRING setGameDifficulty(
18115: PUSH
18116: LD_OWVAR 67
18120: STR
18121: PUSH
18122: LD_STRING )
18124: STR
18125: PPUSH
18126: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
18130: LD_STRING displayDifficulty(
18132: PUSH
18133: LD_OWVAR 67
18137: STR
18138: PUSH
18139: LD_STRING )
18141: STR
18142: PPUSH
18143: CALL_OW 559
// end ;
18147: LD_VAR 0 1
18151: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18152: LD_INT 0
18154: PPUSH
// if p2 = stream_mode then
18155: LD_VAR 0 2
18159: PUSH
18160: LD_INT 100
18162: EQUAL
18163: IFFALSE 19166
// begin if not StreamModeActive then
18165: LD_EXP 54
18169: NOT
18170: IFFALSE 18180
// StreamModeActive := true ;
18172: LD_ADDR_EXP 54
18176: PUSH
18177: LD_INT 1
18179: ST_TO_ADDR
// if p3 = 0 then
18180: LD_VAR 0 3
18184: PUSH
18185: LD_INT 0
18187: EQUAL
18188: IFFALSE 18194
// InitStreamMode ;
18190: CALL 19372 0 0
// if p3 = 1 then
18194: LD_VAR 0 3
18198: PUSH
18199: LD_INT 1
18201: EQUAL
18202: IFFALSE 18212
// sRocket := true ;
18204: LD_ADDR_EXP 59
18208: PUSH
18209: LD_INT 1
18211: ST_TO_ADDR
// if p3 = 2 then
18212: LD_VAR 0 3
18216: PUSH
18217: LD_INT 2
18219: EQUAL
18220: IFFALSE 18230
// sSpeed := true ;
18222: LD_ADDR_EXP 58
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// if p3 = 3 then
18230: LD_VAR 0 3
18234: PUSH
18235: LD_INT 3
18237: EQUAL
18238: IFFALSE 18248
// sEngine := true ;
18240: LD_ADDR_EXP 60
18244: PUSH
18245: LD_INT 1
18247: ST_TO_ADDR
// if p3 = 4 then
18248: LD_VAR 0 3
18252: PUSH
18253: LD_INT 4
18255: EQUAL
18256: IFFALSE 18266
// sSpec := true ;
18258: LD_ADDR_EXP 57
18262: PUSH
18263: LD_INT 1
18265: ST_TO_ADDR
// if p3 = 5 then
18266: LD_VAR 0 3
18270: PUSH
18271: LD_INT 5
18273: EQUAL
18274: IFFALSE 18284
// sLevel := true ;
18276: LD_ADDR_EXP 61
18280: PUSH
18281: LD_INT 1
18283: ST_TO_ADDR
// if p3 = 6 then
18284: LD_VAR 0 3
18288: PUSH
18289: LD_INT 6
18291: EQUAL
18292: IFFALSE 18302
// sArmoury := true ;
18294: LD_ADDR_EXP 62
18298: PUSH
18299: LD_INT 1
18301: ST_TO_ADDR
// if p3 = 7 then
18302: LD_VAR 0 3
18306: PUSH
18307: LD_INT 7
18309: EQUAL
18310: IFFALSE 18320
// sRadar := true ;
18312: LD_ADDR_EXP 63
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// if p3 = 8 then
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 8
18327: EQUAL
18328: IFFALSE 18338
// sBunker := true ;
18330: LD_ADDR_EXP 64
18334: PUSH
18335: LD_INT 1
18337: ST_TO_ADDR
// if p3 = 9 then
18338: LD_VAR 0 3
18342: PUSH
18343: LD_INT 9
18345: EQUAL
18346: IFFALSE 18356
// sHack := true ;
18348: LD_ADDR_EXP 65
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// if p3 = 10 then
18356: LD_VAR 0 3
18360: PUSH
18361: LD_INT 10
18363: EQUAL
18364: IFFALSE 18374
// sFire := true ;
18366: LD_ADDR_EXP 66
18370: PUSH
18371: LD_INT 1
18373: ST_TO_ADDR
// if p3 = 11 then
18374: LD_VAR 0 3
18378: PUSH
18379: LD_INT 11
18381: EQUAL
18382: IFFALSE 18392
// sRefresh := true ;
18384: LD_ADDR_EXP 67
18388: PUSH
18389: LD_INT 1
18391: ST_TO_ADDR
// if p3 = 12 then
18392: LD_VAR 0 3
18396: PUSH
18397: LD_INT 12
18399: EQUAL
18400: IFFALSE 18410
// sExp := true ;
18402: LD_ADDR_EXP 68
18406: PUSH
18407: LD_INT 1
18409: ST_TO_ADDR
// if p3 = 13 then
18410: LD_VAR 0 3
18414: PUSH
18415: LD_INT 13
18417: EQUAL
18418: IFFALSE 18428
// sDepot := true ;
18420: LD_ADDR_EXP 69
18424: PUSH
18425: LD_INT 1
18427: ST_TO_ADDR
// if p3 = 14 then
18428: LD_VAR 0 3
18432: PUSH
18433: LD_INT 14
18435: EQUAL
18436: IFFALSE 18446
// sFlag := true ;
18438: LD_ADDR_EXP 70
18442: PUSH
18443: LD_INT 1
18445: ST_TO_ADDR
// if p3 = 15 then
18446: LD_VAR 0 3
18450: PUSH
18451: LD_INT 15
18453: EQUAL
18454: IFFALSE 18464
// sKamikadze := true ;
18456: LD_ADDR_EXP 78
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
// if p3 = 16 then
18464: LD_VAR 0 3
18468: PUSH
18469: LD_INT 16
18471: EQUAL
18472: IFFALSE 18482
// sTroll := true ;
18474: LD_ADDR_EXP 79
18478: PUSH
18479: LD_INT 1
18481: ST_TO_ADDR
// if p3 = 17 then
18482: LD_VAR 0 3
18486: PUSH
18487: LD_INT 17
18489: EQUAL
18490: IFFALSE 18500
// sSlow := true ;
18492: LD_ADDR_EXP 80
18496: PUSH
18497: LD_INT 1
18499: ST_TO_ADDR
// if p3 = 18 then
18500: LD_VAR 0 3
18504: PUSH
18505: LD_INT 18
18507: EQUAL
18508: IFFALSE 18518
// sLack := true ;
18510: LD_ADDR_EXP 81
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
// if p3 = 19 then
18518: LD_VAR 0 3
18522: PUSH
18523: LD_INT 19
18525: EQUAL
18526: IFFALSE 18536
// sTank := true ;
18528: LD_ADDR_EXP 83
18532: PUSH
18533: LD_INT 1
18535: ST_TO_ADDR
// if p3 = 20 then
18536: LD_VAR 0 3
18540: PUSH
18541: LD_INT 20
18543: EQUAL
18544: IFFALSE 18554
// sRemote := true ;
18546: LD_ADDR_EXP 84
18550: PUSH
18551: LD_INT 1
18553: ST_TO_ADDR
// if p3 = 21 then
18554: LD_VAR 0 3
18558: PUSH
18559: LD_INT 21
18561: EQUAL
18562: IFFALSE 18572
// sPowell := true ;
18564: LD_ADDR_EXP 85
18568: PUSH
18569: LD_INT 1
18571: ST_TO_ADDR
// if p3 = 22 then
18572: LD_VAR 0 3
18576: PUSH
18577: LD_INT 22
18579: EQUAL
18580: IFFALSE 18590
// sTeleport := true ;
18582: LD_ADDR_EXP 88
18586: PUSH
18587: LD_INT 1
18589: ST_TO_ADDR
// if p3 = 23 then
18590: LD_VAR 0 3
18594: PUSH
18595: LD_INT 23
18597: EQUAL
18598: IFFALSE 18608
// sOilTower := true ;
18600: LD_ADDR_EXP 90
18604: PUSH
18605: LD_INT 1
18607: ST_TO_ADDR
// if p3 = 24 then
18608: LD_VAR 0 3
18612: PUSH
18613: LD_INT 24
18615: EQUAL
18616: IFFALSE 18626
// sShovel := true ;
18618: LD_ADDR_EXP 91
18622: PUSH
18623: LD_INT 1
18625: ST_TO_ADDR
// if p3 = 25 then
18626: LD_VAR 0 3
18630: PUSH
18631: LD_INT 25
18633: EQUAL
18634: IFFALSE 18644
// sSheik := true ;
18636: LD_ADDR_EXP 92
18640: PUSH
18641: LD_INT 1
18643: ST_TO_ADDR
// if p3 = 26 then
18644: LD_VAR 0 3
18648: PUSH
18649: LD_INT 26
18651: EQUAL
18652: IFFALSE 18662
// sEarthquake := true ;
18654: LD_ADDR_EXP 94
18658: PUSH
18659: LD_INT 1
18661: ST_TO_ADDR
// if p3 = 27 then
18662: LD_VAR 0 3
18666: PUSH
18667: LD_INT 27
18669: EQUAL
18670: IFFALSE 18680
// sAI := true ;
18672: LD_ADDR_EXP 95
18676: PUSH
18677: LD_INT 1
18679: ST_TO_ADDR
// if p3 = 28 then
18680: LD_VAR 0 3
18684: PUSH
18685: LD_INT 28
18687: EQUAL
18688: IFFALSE 18698
// sCargo := true ;
18690: LD_ADDR_EXP 98
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
// if p3 = 29 then
18698: LD_VAR 0 3
18702: PUSH
18703: LD_INT 29
18705: EQUAL
18706: IFFALSE 18716
// sDLaser := true ;
18708: LD_ADDR_EXP 99
18712: PUSH
18713: LD_INT 1
18715: ST_TO_ADDR
// if p3 = 30 then
18716: LD_VAR 0 3
18720: PUSH
18721: LD_INT 30
18723: EQUAL
18724: IFFALSE 18734
// sExchange := true ;
18726: LD_ADDR_EXP 100
18730: PUSH
18731: LD_INT 1
18733: ST_TO_ADDR
// if p3 = 31 then
18734: LD_VAR 0 3
18738: PUSH
18739: LD_INT 31
18741: EQUAL
18742: IFFALSE 18752
// sFac := true ;
18744: LD_ADDR_EXP 101
18748: PUSH
18749: LD_INT 1
18751: ST_TO_ADDR
// if p3 = 32 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 32
18759: EQUAL
18760: IFFALSE 18770
// sPower := true ;
18762: LD_ADDR_EXP 102
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// if p3 = 33 then
18770: LD_VAR 0 3
18774: PUSH
18775: LD_INT 33
18777: EQUAL
18778: IFFALSE 18788
// sRandom := true ;
18780: LD_ADDR_EXP 103
18784: PUSH
18785: LD_INT 1
18787: ST_TO_ADDR
// if p3 = 34 then
18788: LD_VAR 0 3
18792: PUSH
18793: LD_INT 34
18795: EQUAL
18796: IFFALSE 18806
// sShield := true ;
18798: LD_ADDR_EXP 104
18802: PUSH
18803: LD_INT 1
18805: ST_TO_ADDR
// if p3 = 35 then
18806: LD_VAR 0 3
18810: PUSH
18811: LD_INT 35
18813: EQUAL
18814: IFFALSE 18824
// sTime := true ;
18816: LD_ADDR_EXP 105
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// if p3 = 36 then
18824: LD_VAR 0 3
18828: PUSH
18829: LD_INT 36
18831: EQUAL
18832: IFFALSE 18842
// sTools := true ;
18834: LD_ADDR_EXP 106
18838: PUSH
18839: LD_INT 1
18841: ST_TO_ADDR
// if p3 = 101 then
18842: LD_VAR 0 3
18846: PUSH
18847: LD_INT 101
18849: EQUAL
18850: IFFALSE 18860
// sSold := true ;
18852: LD_ADDR_EXP 71
18856: PUSH
18857: LD_INT 1
18859: ST_TO_ADDR
// if p3 = 102 then
18860: LD_VAR 0 3
18864: PUSH
18865: LD_INT 102
18867: EQUAL
18868: IFFALSE 18878
// sDiff := true ;
18870: LD_ADDR_EXP 72
18874: PUSH
18875: LD_INT 1
18877: ST_TO_ADDR
// if p3 = 103 then
18878: LD_VAR 0 3
18882: PUSH
18883: LD_INT 103
18885: EQUAL
18886: IFFALSE 18896
// sFog := true ;
18888: LD_ADDR_EXP 75
18892: PUSH
18893: LD_INT 1
18895: ST_TO_ADDR
// if p3 = 104 then
18896: LD_VAR 0 3
18900: PUSH
18901: LD_INT 104
18903: EQUAL
18904: IFFALSE 18914
// sReset := true ;
18906: LD_ADDR_EXP 76
18910: PUSH
18911: LD_INT 1
18913: ST_TO_ADDR
// if p3 = 105 then
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 105
18921: EQUAL
18922: IFFALSE 18932
// sSun := true ;
18924: LD_ADDR_EXP 77
18928: PUSH
18929: LD_INT 1
18931: ST_TO_ADDR
// if p3 = 106 then
18932: LD_VAR 0 3
18936: PUSH
18937: LD_INT 106
18939: EQUAL
18940: IFFALSE 18950
// sTiger := true ;
18942: LD_ADDR_EXP 73
18946: PUSH
18947: LD_INT 1
18949: ST_TO_ADDR
// if p3 = 107 then
18950: LD_VAR 0 3
18954: PUSH
18955: LD_INT 107
18957: EQUAL
18958: IFFALSE 18968
// sBomb := true ;
18960: LD_ADDR_EXP 74
18964: PUSH
18965: LD_INT 1
18967: ST_TO_ADDR
// if p3 = 108 then
18968: LD_VAR 0 3
18972: PUSH
18973: LD_INT 108
18975: EQUAL
18976: IFFALSE 18986
// sWound := true ;
18978: LD_ADDR_EXP 82
18982: PUSH
18983: LD_INT 1
18985: ST_TO_ADDR
// if p3 = 109 then
18986: LD_VAR 0 3
18990: PUSH
18991: LD_INT 109
18993: EQUAL
18994: IFFALSE 19004
// sBetray := true ;
18996: LD_ADDR_EXP 86
19000: PUSH
19001: LD_INT 1
19003: ST_TO_ADDR
// if p3 = 110 then
19004: LD_VAR 0 3
19008: PUSH
19009: LD_INT 110
19011: EQUAL
19012: IFFALSE 19022
// sContamin := true ;
19014: LD_ADDR_EXP 87
19018: PUSH
19019: LD_INT 1
19021: ST_TO_ADDR
// if p3 = 111 then
19022: LD_VAR 0 3
19026: PUSH
19027: LD_INT 111
19029: EQUAL
19030: IFFALSE 19040
// sOil := true ;
19032: LD_ADDR_EXP 89
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
// if p3 = 112 then
19040: LD_VAR 0 3
19044: PUSH
19045: LD_INT 112
19047: EQUAL
19048: IFFALSE 19058
// sStu := true ;
19050: LD_ADDR_EXP 93
19054: PUSH
19055: LD_INT 1
19057: ST_TO_ADDR
// if p3 = 113 then
19058: LD_VAR 0 3
19062: PUSH
19063: LD_INT 113
19065: EQUAL
19066: IFFALSE 19076
// sBazooka := true ;
19068: LD_ADDR_EXP 96
19072: PUSH
19073: LD_INT 1
19075: ST_TO_ADDR
// if p3 = 114 then
19076: LD_VAR 0 3
19080: PUSH
19081: LD_INT 114
19083: EQUAL
19084: IFFALSE 19094
// sMortar := true ;
19086: LD_ADDR_EXP 97
19090: PUSH
19091: LD_INT 1
19093: ST_TO_ADDR
// if p3 = 115 then
19094: LD_VAR 0 3
19098: PUSH
19099: LD_INT 115
19101: EQUAL
19102: IFFALSE 19112
// sRanger := true ;
19104: LD_ADDR_EXP 107
19108: PUSH
19109: LD_INT 1
19111: ST_TO_ADDR
// if p3 = 116 then
19112: LD_VAR 0 3
19116: PUSH
19117: LD_INT 116
19119: EQUAL
19120: IFFALSE 19130
// sComputer := true ;
19122: LD_ADDR_EXP 108
19126: PUSH
19127: LD_INT 1
19129: ST_TO_ADDR
// if p3 = 117 then
19130: LD_VAR 0 3
19134: PUSH
19135: LD_INT 117
19137: EQUAL
19138: IFFALSE 19148
// s30 := true ;
19140: LD_ADDR_EXP 109
19144: PUSH
19145: LD_INT 1
19147: ST_TO_ADDR
// if p3 = 118 then
19148: LD_VAR 0 3
19152: PUSH
19153: LD_INT 118
19155: EQUAL
19156: IFFALSE 19166
// s60 := true ;
19158: LD_ADDR_EXP 110
19162: PUSH
19163: LD_INT 1
19165: ST_TO_ADDR
// end ; if p2 = hack_mode then
19166: LD_VAR 0 2
19170: PUSH
19171: LD_INT 101
19173: EQUAL
19174: IFFALSE 19302
// begin case p3 of 1 :
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 1
19183: DOUBLE
19184: EQUAL
19185: IFTRUE 19189
19187: GO 19196
19189: POP
// hHackUnlimitedResources ; 2 :
19190: CALL 31565 0 0
19194: GO 19302
19196: LD_INT 2
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19211
19204: POP
// hHackSetLevel10 ; 3 :
19205: CALL 31698 0 0
19209: GO 19302
19211: LD_INT 3
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19226
19219: POP
// hHackSetLevel10YourUnits ; 4 :
19220: CALL 31783 0 0
19224: GO 19302
19226: LD_INT 4
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19241
19234: POP
// hHackInvincible ; 5 :
19235: CALL 32231 0 0
19239: GO 19302
19241: LD_INT 5
19243: DOUBLE
19244: EQUAL
19245: IFTRUE 19249
19247: GO 19256
19249: POP
// hHackInvisible ; 6 :
19250: CALL 32342 0 0
19254: GO 19302
19256: LD_INT 6
19258: DOUBLE
19259: EQUAL
19260: IFTRUE 19264
19262: GO 19271
19264: POP
// hHackChangeYourSide ; 7 :
19265: CALL 32399 0 0
19269: GO 19302
19271: LD_INT 7
19273: DOUBLE
19274: EQUAL
19275: IFTRUE 19279
19277: GO 19286
19279: POP
// hHackChangeUnitSide ; 8 :
19280: CALL 32441 0 0
19284: GO 19302
19286: LD_INT 8
19288: DOUBLE
19289: EQUAL
19290: IFTRUE 19294
19292: GO 19301
19294: POP
// hHackFog ; end ;
19295: CALL 32542 0 0
19299: GO 19302
19301: POP
// end ; if p2 = game_save_mode then
19302: LD_VAR 0 2
19306: PUSH
19307: LD_INT 102
19309: EQUAL
19310: IFFALSE 19367
// begin if p3 = 1 then
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 1
19319: EQUAL
19320: IFFALSE 19332
// globalGameSaveCounter := p4 ;
19322: LD_ADDR_EXP 53
19326: PUSH
19327: LD_VAR 0 4
19331: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19332: LD_VAR 0 3
19336: PUSH
19337: LD_INT 2
19339: EQUAL
19340: IFFALSE 19348
19342: PUSH
19343: LD_EXP 53
19347: AND
19348: IFFALSE 19367
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19350: LD_STRING setGameSaveCounter(
19352: PUSH
19353: LD_EXP 53
19357: STR
19358: PUSH
19359: LD_STRING )
19361: STR
19362: PPUSH
19363: CALL_OW 559
// end ; end ;
19367: LD_VAR 0 7
19371: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19372: LD_INT 0
19374: PPUSH
// streamModeActive := false ;
19375: LD_ADDR_EXP 54
19379: PUSH
19380: LD_INT 0
19382: ST_TO_ADDR
// normalCounter := 36 ;
19383: LD_ADDR_EXP 55
19387: PUSH
19388: LD_INT 36
19390: ST_TO_ADDR
// hardcoreCounter := 18 ;
19391: LD_ADDR_EXP 56
19395: PUSH
19396: LD_INT 18
19398: ST_TO_ADDR
// sRocket := false ;
19399: LD_ADDR_EXP 59
19403: PUSH
19404: LD_INT 0
19406: ST_TO_ADDR
// sSpeed := false ;
19407: LD_ADDR_EXP 58
19411: PUSH
19412: LD_INT 0
19414: ST_TO_ADDR
// sEngine := false ;
19415: LD_ADDR_EXP 60
19419: PUSH
19420: LD_INT 0
19422: ST_TO_ADDR
// sSpec := false ;
19423: LD_ADDR_EXP 57
19427: PUSH
19428: LD_INT 0
19430: ST_TO_ADDR
// sLevel := false ;
19431: LD_ADDR_EXP 61
19435: PUSH
19436: LD_INT 0
19438: ST_TO_ADDR
// sArmoury := false ;
19439: LD_ADDR_EXP 62
19443: PUSH
19444: LD_INT 0
19446: ST_TO_ADDR
// sRadar := false ;
19447: LD_ADDR_EXP 63
19451: PUSH
19452: LD_INT 0
19454: ST_TO_ADDR
// sBunker := false ;
19455: LD_ADDR_EXP 64
19459: PUSH
19460: LD_INT 0
19462: ST_TO_ADDR
// sHack := false ;
19463: LD_ADDR_EXP 65
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// sFire := false ;
19471: LD_ADDR_EXP 66
19475: PUSH
19476: LD_INT 0
19478: ST_TO_ADDR
// sRefresh := false ;
19479: LD_ADDR_EXP 67
19483: PUSH
19484: LD_INT 0
19486: ST_TO_ADDR
// sExp := false ;
19487: LD_ADDR_EXP 68
19491: PUSH
19492: LD_INT 0
19494: ST_TO_ADDR
// sDepot := false ;
19495: LD_ADDR_EXP 69
19499: PUSH
19500: LD_INT 0
19502: ST_TO_ADDR
// sFlag := false ;
19503: LD_ADDR_EXP 70
19507: PUSH
19508: LD_INT 0
19510: ST_TO_ADDR
// sKamikadze := false ;
19511: LD_ADDR_EXP 78
19515: PUSH
19516: LD_INT 0
19518: ST_TO_ADDR
// sTroll := false ;
19519: LD_ADDR_EXP 79
19523: PUSH
19524: LD_INT 0
19526: ST_TO_ADDR
// sSlow := false ;
19527: LD_ADDR_EXP 80
19531: PUSH
19532: LD_INT 0
19534: ST_TO_ADDR
// sLack := false ;
19535: LD_ADDR_EXP 81
19539: PUSH
19540: LD_INT 0
19542: ST_TO_ADDR
// sTank := false ;
19543: LD_ADDR_EXP 83
19547: PUSH
19548: LD_INT 0
19550: ST_TO_ADDR
// sRemote := false ;
19551: LD_ADDR_EXP 84
19555: PUSH
19556: LD_INT 0
19558: ST_TO_ADDR
// sPowell := false ;
19559: LD_ADDR_EXP 85
19563: PUSH
19564: LD_INT 0
19566: ST_TO_ADDR
// sTeleport := false ;
19567: LD_ADDR_EXP 88
19571: PUSH
19572: LD_INT 0
19574: ST_TO_ADDR
// sOilTower := false ;
19575: LD_ADDR_EXP 90
19579: PUSH
19580: LD_INT 0
19582: ST_TO_ADDR
// sShovel := false ;
19583: LD_ADDR_EXP 91
19587: PUSH
19588: LD_INT 0
19590: ST_TO_ADDR
// sSheik := false ;
19591: LD_ADDR_EXP 92
19595: PUSH
19596: LD_INT 0
19598: ST_TO_ADDR
// sEarthquake := false ;
19599: LD_ADDR_EXP 94
19603: PUSH
19604: LD_INT 0
19606: ST_TO_ADDR
// sAI := false ;
19607: LD_ADDR_EXP 95
19611: PUSH
19612: LD_INT 0
19614: ST_TO_ADDR
// sCargo := false ;
19615: LD_ADDR_EXP 98
19619: PUSH
19620: LD_INT 0
19622: ST_TO_ADDR
// sDLaser := false ;
19623: LD_ADDR_EXP 99
19627: PUSH
19628: LD_INT 0
19630: ST_TO_ADDR
// sExchange := false ;
19631: LD_ADDR_EXP 100
19635: PUSH
19636: LD_INT 0
19638: ST_TO_ADDR
// sFac := false ;
19639: LD_ADDR_EXP 101
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// sPower := false ;
19647: LD_ADDR_EXP 102
19651: PUSH
19652: LD_INT 0
19654: ST_TO_ADDR
// sRandom := false ;
19655: LD_ADDR_EXP 103
19659: PUSH
19660: LD_INT 0
19662: ST_TO_ADDR
// sShield := false ;
19663: LD_ADDR_EXP 104
19667: PUSH
19668: LD_INT 0
19670: ST_TO_ADDR
// sTime := false ;
19671: LD_ADDR_EXP 105
19675: PUSH
19676: LD_INT 0
19678: ST_TO_ADDR
// sTools := false ;
19679: LD_ADDR_EXP 106
19683: PUSH
19684: LD_INT 0
19686: ST_TO_ADDR
// sSold := false ;
19687: LD_ADDR_EXP 71
19691: PUSH
19692: LD_INT 0
19694: ST_TO_ADDR
// sDiff := false ;
19695: LD_ADDR_EXP 72
19699: PUSH
19700: LD_INT 0
19702: ST_TO_ADDR
// sFog := false ;
19703: LD_ADDR_EXP 75
19707: PUSH
19708: LD_INT 0
19710: ST_TO_ADDR
// sReset := false ;
19711: LD_ADDR_EXP 76
19715: PUSH
19716: LD_INT 0
19718: ST_TO_ADDR
// sSun := false ;
19719: LD_ADDR_EXP 77
19723: PUSH
19724: LD_INT 0
19726: ST_TO_ADDR
// sTiger := false ;
19727: LD_ADDR_EXP 73
19731: PUSH
19732: LD_INT 0
19734: ST_TO_ADDR
// sBomb := false ;
19735: LD_ADDR_EXP 74
19739: PUSH
19740: LD_INT 0
19742: ST_TO_ADDR
// sWound := false ;
19743: LD_ADDR_EXP 82
19747: PUSH
19748: LD_INT 0
19750: ST_TO_ADDR
// sBetray := false ;
19751: LD_ADDR_EXP 86
19755: PUSH
19756: LD_INT 0
19758: ST_TO_ADDR
// sContamin := false ;
19759: LD_ADDR_EXP 87
19763: PUSH
19764: LD_INT 0
19766: ST_TO_ADDR
// sOil := false ;
19767: LD_ADDR_EXP 89
19771: PUSH
19772: LD_INT 0
19774: ST_TO_ADDR
// sStu := false ;
19775: LD_ADDR_EXP 93
19779: PUSH
19780: LD_INT 0
19782: ST_TO_ADDR
// sBazooka := false ;
19783: LD_ADDR_EXP 96
19787: PUSH
19788: LD_INT 0
19790: ST_TO_ADDR
// sMortar := false ;
19791: LD_ADDR_EXP 97
19795: PUSH
19796: LD_INT 0
19798: ST_TO_ADDR
// sRanger := false ;
19799: LD_ADDR_EXP 107
19803: PUSH
19804: LD_INT 0
19806: ST_TO_ADDR
// sComputer := false ;
19807: LD_ADDR_EXP 108
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// s30 := false ;
19815: LD_ADDR_EXP 109
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// s60 := false ;
19823: LD_ADDR_EXP 110
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// end ;
19831: LD_VAR 0 1
19835: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19836: LD_INT 0
19838: PPUSH
19839: PPUSH
19840: PPUSH
19841: PPUSH
19842: PPUSH
19843: PPUSH
19844: PPUSH
// result := [ ] ;
19845: LD_ADDR_VAR 0 2
19849: PUSH
19850: EMPTY
19851: ST_TO_ADDR
// if campaign_id = 1 then
19852: LD_OWVAR 69
19856: PUSH
19857: LD_INT 1
19859: EQUAL
19860: IFFALSE 23026
// begin case mission_number of 1 :
19862: LD_OWVAR 70
19866: PUSH
19867: LD_INT 1
19869: DOUBLE
19870: EQUAL
19871: IFTRUE 19875
19873: GO 19951
19875: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19876: LD_ADDR_VAR 0 2
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: LD_INT 4
19886: PUSH
19887: LD_INT 11
19889: PUSH
19890: LD_INT 12
19892: PUSH
19893: LD_INT 15
19895: PUSH
19896: LD_INT 16
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_INT 23
19904: PUSH
19905: LD_INT 26
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 101
19921: PUSH
19922: LD_INT 102
19924: PUSH
19925: LD_INT 106
19927: PUSH
19928: LD_INT 116
19930: PUSH
19931: LD_INT 117
19933: PUSH
19934: LD_INT 118
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: ST_TO_ADDR
19949: GO 23024
19951: LD_INT 2
19953: DOUBLE
19954: EQUAL
19955: IFTRUE 19959
19957: GO 20043
19959: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19960: LD_ADDR_VAR 0 2
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: LD_INT 4
19970: PUSH
19971: LD_INT 11
19973: PUSH
19974: LD_INT 12
19976: PUSH
19977: LD_INT 15
19979: PUSH
19980: LD_INT 16
19982: PUSH
19983: LD_INT 22
19985: PUSH
19986: LD_INT 23
19988: PUSH
19989: LD_INT 26
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 101
20005: PUSH
20006: LD_INT 102
20008: PUSH
20009: LD_INT 105
20011: PUSH
20012: LD_INT 106
20014: PUSH
20015: LD_INT 108
20017: PUSH
20018: LD_INT 116
20020: PUSH
20021: LD_INT 117
20023: PUSH
20024: LD_INT 118
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: ST_TO_ADDR
20041: GO 23024
20043: LD_INT 3
20045: DOUBLE
20046: EQUAL
20047: IFTRUE 20051
20049: GO 20139
20051: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20052: LD_ADDR_VAR 0 2
20056: PUSH
20057: LD_INT 2
20059: PUSH
20060: LD_INT 4
20062: PUSH
20063: LD_INT 5
20065: PUSH
20066: LD_INT 11
20068: PUSH
20069: LD_INT 12
20071: PUSH
20072: LD_INT 15
20074: PUSH
20075: LD_INT 16
20077: PUSH
20078: LD_INT 22
20080: PUSH
20081: LD_INT 26
20083: PUSH
20084: LD_INT 36
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 101
20101: PUSH
20102: LD_INT 102
20104: PUSH
20105: LD_INT 105
20107: PUSH
20108: LD_INT 106
20110: PUSH
20111: LD_INT 108
20113: PUSH
20114: LD_INT 116
20116: PUSH
20117: LD_INT 117
20119: PUSH
20120: LD_INT 118
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: ST_TO_ADDR
20137: GO 23024
20139: LD_INT 4
20141: DOUBLE
20142: EQUAL
20143: IFTRUE 20147
20145: GO 20243
20147: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20148: LD_ADDR_VAR 0 2
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 4
20158: PUSH
20159: LD_INT 5
20161: PUSH
20162: LD_INT 8
20164: PUSH
20165: LD_INT 11
20167: PUSH
20168: LD_INT 12
20170: PUSH
20171: LD_INT 15
20173: PUSH
20174: LD_INT 16
20176: PUSH
20177: LD_INT 22
20179: PUSH
20180: LD_INT 23
20182: PUSH
20183: LD_INT 26
20185: PUSH
20186: LD_INT 36
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 101
20205: PUSH
20206: LD_INT 102
20208: PUSH
20209: LD_INT 105
20211: PUSH
20212: LD_INT 106
20214: PUSH
20215: LD_INT 108
20217: PUSH
20218: LD_INT 116
20220: PUSH
20221: LD_INT 117
20223: PUSH
20224: LD_INT 118
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: ST_TO_ADDR
20241: GO 23024
20243: LD_INT 5
20245: DOUBLE
20246: EQUAL
20247: IFTRUE 20251
20249: GO 20363
20251: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20252: LD_ADDR_VAR 0 2
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: LD_INT 4
20262: PUSH
20263: LD_INT 5
20265: PUSH
20266: LD_INT 6
20268: PUSH
20269: LD_INT 8
20271: PUSH
20272: LD_INT 11
20274: PUSH
20275: LD_INT 12
20277: PUSH
20278: LD_INT 15
20280: PUSH
20281: LD_INT 16
20283: PUSH
20284: LD_INT 22
20286: PUSH
20287: LD_INT 23
20289: PUSH
20290: LD_INT 25
20292: PUSH
20293: LD_INT 26
20295: PUSH
20296: LD_INT 36
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 101
20317: PUSH
20318: LD_INT 102
20320: PUSH
20321: LD_INT 105
20323: PUSH
20324: LD_INT 106
20326: PUSH
20327: LD_INT 108
20329: PUSH
20330: LD_INT 109
20332: PUSH
20333: LD_INT 112
20335: PUSH
20336: LD_INT 116
20338: PUSH
20339: LD_INT 117
20341: PUSH
20342: LD_INT 118
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: ST_TO_ADDR
20361: GO 23024
20363: LD_INT 6
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20503
20371: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20372: LD_ADDR_VAR 0 2
20376: PUSH
20377: LD_INT 2
20379: PUSH
20380: LD_INT 4
20382: PUSH
20383: LD_INT 5
20385: PUSH
20386: LD_INT 6
20388: PUSH
20389: LD_INT 8
20391: PUSH
20392: LD_INT 11
20394: PUSH
20395: LD_INT 12
20397: PUSH
20398: LD_INT 15
20400: PUSH
20401: LD_INT 16
20403: PUSH
20404: LD_INT 20
20406: PUSH
20407: LD_INT 21
20409: PUSH
20410: LD_INT 22
20412: PUSH
20413: LD_INT 23
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 26
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 31
20427: PUSH
20428: LD_INT 32
20430: PUSH
20431: LD_INT 36
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 101
20457: PUSH
20458: LD_INT 102
20460: PUSH
20461: LD_INT 105
20463: PUSH
20464: LD_INT 106
20466: PUSH
20467: LD_INT 108
20469: PUSH
20470: LD_INT 109
20472: PUSH
20473: LD_INT 112
20475: PUSH
20476: LD_INT 116
20478: PUSH
20479: LD_INT 117
20481: PUSH
20482: LD_INT 118
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: ST_TO_ADDR
20501: GO 23024
20503: LD_INT 7
20505: DOUBLE
20506: EQUAL
20507: IFTRUE 20511
20509: GO 20623
20511: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20512: LD_ADDR_VAR 0 2
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 4
20522: PUSH
20523: LD_INT 5
20525: PUSH
20526: LD_INT 7
20528: PUSH
20529: LD_INT 11
20531: PUSH
20532: LD_INT 12
20534: PUSH
20535: LD_INT 15
20537: PUSH
20538: LD_INT 16
20540: PUSH
20541: LD_INT 20
20543: PUSH
20544: LD_INT 21
20546: PUSH
20547: LD_INT 22
20549: PUSH
20550: LD_INT 23
20552: PUSH
20553: LD_INT 25
20555: PUSH
20556: LD_INT 26
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 101
20577: PUSH
20578: LD_INT 102
20580: PUSH
20581: LD_INT 103
20583: PUSH
20584: LD_INT 105
20586: PUSH
20587: LD_INT 106
20589: PUSH
20590: LD_INT 108
20592: PUSH
20593: LD_INT 112
20595: PUSH
20596: LD_INT 116
20598: PUSH
20599: LD_INT 117
20601: PUSH
20602: LD_INT 118
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 23024
20623: LD_INT 8
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20771
20631: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20632: LD_ADDR_VAR 0 2
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 4
20642: PUSH
20643: LD_INT 5
20645: PUSH
20646: LD_INT 6
20648: PUSH
20649: LD_INT 7
20651: PUSH
20652: LD_INT 8
20654: PUSH
20655: LD_INT 11
20657: PUSH
20658: LD_INT 12
20660: PUSH
20661: LD_INT 15
20663: PUSH
20664: LD_INT 16
20666: PUSH
20667: LD_INT 20
20669: PUSH
20670: LD_INT 21
20672: PUSH
20673: LD_INT 22
20675: PUSH
20676: LD_INT 23
20678: PUSH
20679: LD_INT 25
20681: PUSH
20682: LD_INT 26
20684: PUSH
20685: LD_INT 30
20687: PUSH
20688: LD_INT 31
20690: PUSH
20691: LD_INT 32
20693: PUSH
20694: LD_INT 36
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 101
20721: PUSH
20722: LD_INT 102
20724: PUSH
20725: LD_INT 103
20727: PUSH
20728: LD_INT 105
20730: PUSH
20731: LD_INT 106
20733: PUSH
20734: LD_INT 108
20736: PUSH
20737: LD_INT 109
20739: PUSH
20740: LD_INT 112
20742: PUSH
20743: LD_INT 116
20745: PUSH
20746: LD_INT 117
20748: PUSH
20749: LD_INT 118
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: ST_TO_ADDR
20769: GO 23024
20771: LD_INT 9
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20927
20779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20780: LD_ADDR_VAR 0 2
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 4
20790: PUSH
20791: LD_INT 5
20793: PUSH
20794: LD_INT 6
20796: PUSH
20797: LD_INT 7
20799: PUSH
20800: LD_INT 8
20802: PUSH
20803: LD_INT 11
20805: PUSH
20806: LD_INT 12
20808: PUSH
20809: LD_INT 15
20811: PUSH
20812: LD_INT 16
20814: PUSH
20815: LD_INT 20
20817: PUSH
20818: LD_INT 21
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_INT 23
20826: PUSH
20827: LD_INT 25
20829: PUSH
20830: LD_INT 26
20832: PUSH
20833: LD_INT 28
20835: PUSH
20836: LD_INT 30
20838: PUSH
20839: LD_INT 31
20841: PUSH
20842: LD_INT 32
20844: PUSH
20845: LD_INT 36
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 101
20873: PUSH
20874: LD_INT 102
20876: PUSH
20877: LD_INT 103
20879: PUSH
20880: LD_INT 105
20882: PUSH
20883: LD_INT 106
20885: PUSH
20886: LD_INT 108
20888: PUSH
20889: LD_INT 109
20891: PUSH
20892: LD_INT 112
20894: PUSH
20895: LD_INT 114
20897: PUSH
20898: LD_INT 116
20900: PUSH
20901: LD_INT 117
20903: PUSH
20904: LD_INT 118
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: ST_TO_ADDR
20925: GO 23024
20927: LD_INT 10
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 21131
20935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20936: LD_ADDR_VAR 0 2
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 4
20946: PUSH
20947: LD_INT 5
20949: PUSH
20950: LD_INT 6
20952: PUSH
20953: LD_INT 7
20955: PUSH
20956: LD_INT 8
20958: PUSH
20959: LD_INT 9
20961: PUSH
20962: LD_INT 10
20964: PUSH
20965: LD_INT 11
20967: PUSH
20968: LD_INT 12
20970: PUSH
20971: LD_INT 13
20973: PUSH
20974: LD_INT 14
20976: PUSH
20977: LD_INT 15
20979: PUSH
20980: LD_INT 16
20982: PUSH
20983: LD_INT 17
20985: PUSH
20986: LD_INT 18
20988: PUSH
20989: LD_INT 19
20991: PUSH
20992: LD_INT 20
20994: PUSH
20995: LD_INT 21
20997: PUSH
20998: LD_INT 22
21000: PUSH
21001: LD_INT 23
21003: PUSH
21004: LD_INT 24
21006: PUSH
21007: LD_INT 25
21009: PUSH
21010: LD_INT 26
21012: PUSH
21013: LD_INT 28
21015: PUSH
21016: LD_INT 30
21018: PUSH
21019: LD_INT 31
21021: PUSH
21022: LD_INT 32
21024: PUSH
21025: LD_INT 36
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 101
21061: PUSH
21062: LD_INT 102
21064: PUSH
21065: LD_INT 103
21067: PUSH
21068: LD_INT 104
21070: PUSH
21071: LD_INT 105
21073: PUSH
21074: LD_INT 106
21076: PUSH
21077: LD_INT 107
21079: PUSH
21080: LD_INT 108
21082: PUSH
21083: LD_INT 109
21085: PUSH
21086: LD_INT 110
21088: PUSH
21089: LD_INT 111
21091: PUSH
21092: LD_INT 112
21094: PUSH
21095: LD_INT 114
21097: PUSH
21098: LD_INT 116
21100: PUSH
21101: LD_INT 117
21103: PUSH
21104: LD_INT 118
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: ST_TO_ADDR
21129: GO 23024
21131: LD_INT 11
21133: DOUBLE
21134: EQUAL
21135: IFTRUE 21139
21137: GO 21343
21139: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21140: LD_ADDR_VAR 0 2
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: LD_INT 4
21153: PUSH
21154: LD_INT 5
21156: PUSH
21157: LD_INT 6
21159: PUSH
21160: LD_INT 7
21162: PUSH
21163: LD_INT 8
21165: PUSH
21166: LD_INT 9
21168: PUSH
21169: LD_INT 10
21171: PUSH
21172: LD_INT 11
21174: PUSH
21175: LD_INT 12
21177: PUSH
21178: LD_INT 13
21180: PUSH
21181: LD_INT 14
21183: PUSH
21184: LD_INT 15
21186: PUSH
21187: LD_INT 16
21189: PUSH
21190: LD_INT 17
21192: PUSH
21193: LD_INT 18
21195: PUSH
21196: LD_INT 19
21198: PUSH
21199: LD_INT 20
21201: PUSH
21202: LD_INT 21
21204: PUSH
21205: LD_INT 22
21207: PUSH
21208: LD_INT 23
21210: PUSH
21211: LD_INT 24
21213: PUSH
21214: LD_INT 25
21216: PUSH
21217: LD_INT 26
21219: PUSH
21220: LD_INT 28
21222: PUSH
21223: LD_INT 30
21225: PUSH
21226: LD_INT 31
21228: PUSH
21229: LD_INT 32
21231: PUSH
21232: LD_INT 34
21234: PUSH
21235: LD_INT 36
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 101
21273: PUSH
21274: LD_INT 102
21276: PUSH
21277: LD_INT 103
21279: PUSH
21280: LD_INT 104
21282: PUSH
21283: LD_INT 105
21285: PUSH
21286: LD_INT 106
21288: PUSH
21289: LD_INT 107
21291: PUSH
21292: LD_INT 108
21294: PUSH
21295: LD_INT 109
21297: PUSH
21298: LD_INT 110
21300: PUSH
21301: LD_INT 111
21303: PUSH
21304: LD_INT 112
21306: PUSH
21307: LD_INT 114
21309: PUSH
21310: LD_INT 116
21312: PUSH
21313: LD_INT 117
21315: PUSH
21316: LD_INT 118
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: ST_TO_ADDR
21341: GO 23024
21343: LD_INT 12
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21571
21351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21352: LD_ADDR_VAR 0 2
21356: PUSH
21357: LD_INT 1
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: LD_INT 3
21365: PUSH
21366: LD_INT 4
21368: PUSH
21369: LD_INT 5
21371: PUSH
21372: LD_INT 6
21374: PUSH
21375: LD_INT 7
21377: PUSH
21378: LD_INT 8
21380: PUSH
21381: LD_INT 9
21383: PUSH
21384: LD_INT 10
21386: PUSH
21387: LD_INT 11
21389: PUSH
21390: LD_INT 12
21392: PUSH
21393: LD_INT 13
21395: PUSH
21396: LD_INT 14
21398: PUSH
21399: LD_INT 15
21401: PUSH
21402: LD_INT 16
21404: PUSH
21405: LD_INT 17
21407: PUSH
21408: LD_INT 18
21410: PUSH
21411: LD_INT 19
21413: PUSH
21414: LD_INT 20
21416: PUSH
21417: LD_INT 21
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_INT 23
21425: PUSH
21426: LD_INT 24
21428: PUSH
21429: LD_INT 25
21431: PUSH
21432: LD_INT 26
21434: PUSH
21435: LD_INT 27
21437: PUSH
21438: LD_INT 28
21440: PUSH
21441: LD_INT 30
21443: PUSH
21444: LD_INT 31
21446: PUSH
21447: LD_INT 32
21449: PUSH
21450: LD_INT 33
21452: PUSH
21453: LD_INT 34
21455: PUSH
21456: LD_INT 36
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 101
21497: PUSH
21498: LD_INT 102
21500: PUSH
21501: LD_INT 103
21503: PUSH
21504: LD_INT 104
21506: PUSH
21507: LD_INT 105
21509: PUSH
21510: LD_INT 106
21512: PUSH
21513: LD_INT 107
21515: PUSH
21516: LD_INT 108
21518: PUSH
21519: LD_INT 109
21521: PUSH
21522: LD_INT 110
21524: PUSH
21525: LD_INT 111
21527: PUSH
21528: LD_INT 112
21530: PUSH
21531: LD_INT 113
21533: PUSH
21534: LD_INT 114
21536: PUSH
21537: LD_INT 116
21539: PUSH
21540: LD_INT 117
21542: PUSH
21543: LD_INT 118
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: ST_TO_ADDR
21569: GO 23024
21571: LD_INT 13
21573: DOUBLE
21574: EQUAL
21575: IFTRUE 21579
21577: GO 21787
21579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21580: LD_ADDR_VAR 0 2
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: LD_INT 2
21590: PUSH
21591: LD_INT 3
21593: PUSH
21594: LD_INT 4
21596: PUSH
21597: LD_INT 5
21599: PUSH
21600: LD_INT 8
21602: PUSH
21603: LD_INT 9
21605: PUSH
21606: LD_INT 10
21608: PUSH
21609: LD_INT 11
21611: PUSH
21612: LD_INT 12
21614: PUSH
21615: LD_INT 14
21617: PUSH
21618: LD_INT 15
21620: PUSH
21621: LD_INT 16
21623: PUSH
21624: LD_INT 17
21626: PUSH
21627: LD_INT 18
21629: PUSH
21630: LD_INT 19
21632: PUSH
21633: LD_INT 20
21635: PUSH
21636: LD_INT 21
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_INT 23
21644: PUSH
21645: LD_INT 24
21647: PUSH
21648: LD_INT 25
21650: PUSH
21651: LD_INT 26
21653: PUSH
21654: LD_INT 27
21656: PUSH
21657: LD_INT 28
21659: PUSH
21660: LD_INT 30
21662: PUSH
21663: LD_INT 31
21665: PUSH
21666: LD_INT 32
21668: PUSH
21669: LD_INT 33
21671: PUSH
21672: LD_INT 34
21674: PUSH
21675: LD_INT 36
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 101
21713: PUSH
21714: LD_INT 102
21716: PUSH
21717: LD_INT 103
21719: PUSH
21720: LD_INT 104
21722: PUSH
21723: LD_INT 105
21725: PUSH
21726: LD_INT 106
21728: PUSH
21729: LD_INT 107
21731: PUSH
21732: LD_INT 108
21734: PUSH
21735: LD_INT 109
21737: PUSH
21738: LD_INT 110
21740: PUSH
21741: LD_INT 111
21743: PUSH
21744: LD_INT 112
21746: PUSH
21747: LD_INT 113
21749: PUSH
21750: LD_INT 114
21752: PUSH
21753: LD_INT 116
21755: PUSH
21756: LD_INT 117
21758: PUSH
21759: LD_INT 118
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: ST_TO_ADDR
21785: GO 23024
21787: LD_INT 14
21789: DOUBLE
21790: EQUAL
21791: IFTRUE 21795
21793: GO 22019
21795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21796: LD_ADDR_VAR 0 2
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 3
21809: PUSH
21810: LD_INT 4
21812: PUSH
21813: LD_INT 5
21815: PUSH
21816: LD_INT 6
21818: PUSH
21819: LD_INT 7
21821: PUSH
21822: LD_INT 8
21824: PUSH
21825: LD_INT 9
21827: PUSH
21828: LD_INT 10
21830: PUSH
21831: LD_INT 11
21833: PUSH
21834: LD_INT 12
21836: PUSH
21837: LD_INT 13
21839: PUSH
21840: LD_INT 14
21842: PUSH
21843: LD_INT 15
21845: PUSH
21846: LD_INT 16
21848: PUSH
21849: LD_INT 17
21851: PUSH
21852: LD_INT 18
21854: PUSH
21855: LD_INT 19
21857: PUSH
21858: LD_INT 20
21860: PUSH
21861: LD_INT 21
21863: PUSH
21864: LD_INT 22
21866: PUSH
21867: LD_INT 23
21869: PUSH
21870: LD_INT 24
21872: PUSH
21873: LD_INT 25
21875: PUSH
21876: LD_INT 26
21878: PUSH
21879: LD_INT 27
21881: PUSH
21882: LD_INT 28
21884: PUSH
21885: LD_INT 29
21887: PUSH
21888: LD_INT 30
21890: PUSH
21891: LD_INT 31
21893: PUSH
21894: LD_INT 32
21896: PUSH
21897: LD_INT 33
21899: PUSH
21900: LD_INT 34
21902: PUSH
21903: LD_INT 36
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 101
21945: PUSH
21946: LD_INT 102
21948: PUSH
21949: LD_INT 103
21951: PUSH
21952: LD_INT 104
21954: PUSH
21955: LD_INT 105
21957: PUSH
21958: LD_INT 106
21960: PUSH
21961: LD_INT 107
21963: PUSH
21964: LD_INT 108
21966: PUSH
21967: LD_INT 109
21969: PUSH
21970: LD_INT 110
21972: PUSH
21973: LD_INT 111
21975: PUSH
21976: LD_INT 112
21978: PUSH
21979: LD_INT 113
21981: PUSH
21982: LD_INT 114
21984: PUSH
21985: LD_INT 116
21987: PUSH
21988: LD_INT 117
21990: PUSH
21991: LD_INT 118
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: ST_TO_ADDR
22017: GO 23024
22019: LD_INT 15
22021: DOUBLE
22022: EQUAL
22023: IFTRUE 22027
22025: GO 22251
22027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22028: LD_ADDR_VAR 0 2
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 3
22041: PUSH
22042: LD_INT 4
22044: PUSH
22045: LD_INT 5
22047: PUSH
22048: LD_INT 6
22050: PUSH
22051: LD_INT 7
22053: PUSH
22054: LD_INT 8
22056: PUSH
22057: LD_INT 9
22059: PUSH
22060: LD_INT 10
22062: PUSH
22063: LD_INT 11
22065: PUSH
22066: LD_INT 12
22068: PUSH
22069: LD_INT 13
22071: PUSH
22072: LD_INT 14
22074: PUSH
22075: LD_INT 15
22077: PUSH
22078: LD_INT 16
22080: PUSH
22081: LD_INT 17
22083: PUSH
22084: LD_INT 18
22086: PUSH
22087: LD_INT 19
22089: PUSH
22090: LD_INT 20
22092: PUSH
22093: LD_INT 21
22095: PUSH
22096: LD_INT 22
22098: PUSH
22099: LD_INT 23
22101: PUSH
22102: LD_INT 24
22104: PUSH
22105: LD_INT 25
22107: PUSH
22108: LD_INT 26
22110: PUSH
22111: LD_INT 27
22113: PUSH
22114: LD_INT 28
22116: PUSH
22117: LD_INT 29
22119: PUSH
22120: LD_INT 30
22122: PUSH
22123: LD_INT 31
22125: PUSH
22126: LD_INT 32
22128: PUSH
22129: LD_INT 33
22131: PUSH
22132: LD_INT 34
22134: PUSH
22135: LD_INT 36
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 101
22177: PUSH
22178: LD_INT 102
22180: PUSH
22181: LD_INT 103
22183: PUSH
22184: LD_INT 104
22186: PUSH
22187: LD_INT 105
22189: PUSH
22190: LD_INT 106
22192: PUSH
22193: LD_INT 107
22195: PUSH
22196: LD_INT 108
22198: PUSH
22199: LD_INT 109
22201: PUSH
22202: LD_INT 110
22204: PUSH
22205: LD_INT 111
22207: PUSH
22208: LD_INT 112
22210: PUSH
22211: LD_INT 113
22213: PUSH
22214: LD_INT 114
22216: PUSH
22217: LD_INT 116
22219: PUSH
22220: LD_INT 117
22222: PUSH
22223: LD_INT 118
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: ST_TO_ADDR
22249: GO 23024
22251: LD_INT 16
22253: DOUBLE
22254: EQUAL
22255: IFTRUE 22259
22257: GO 22395
22259: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22260: LD_ADDR_VAR 0 2
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 4
22270: PUSH
22271: LD_INT 5
22273: PUSH
22274: LD_INT 7
22276: PUSH
22277: LD_INT 11
22279: PUSH
22280: LD_INT 12
22282: PUSH
22283: LD_INT 15
22285: PUSH
22286: LD_INT 16
22288: PUSH
22289: LD_INT 20
22291: PUSH
22292: LD_INT 21
22294: PUSH
22295: LD_INT 22
22297: PUSH
22298: LD_INT 23
22300: PUSH
22301: LD_INT 25
22303: PUSH
22304: LD_INT 26
22306: PUSH
22307: LD_INT 30
22309: PUSH
22310: LD_INT 31
22312: PUSH
22313: LD_INT 32
22315: PUSH
22316: LD_INT 33
22318: PUSH
22319: LD_INT 34
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 101
22345: PUSH
22346: LD_INT 102
22348: PUSH
22349: LD_INT 103
22351: PUSH
22352: LD_INT 106
22354: PUSH
22355: LD_INT 108
22357: PUSH
22358: LD_INT 112
22360: PUSH
22361: LD_INT 113
22363: PUSH
22364: LD_INT 114
22366: PUSH
22367: LD_INT 116
22369: PUSH
22370: LD_INT 117
22372: PUSH
22373: LD_INT 118
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: ST_TO_ADDR
22393: GO 23024
22395: LD_INT 17
22397: DOUBLE
22398: EQUAL
22399: IFTRUE 22403
22401: GO 22627
22403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 4
22420: PUSH
22421: LD_INT 5
22423: PUSH
22424: LD_INT 6
22426: PUSH
22427: LD_INT 7
22429: PUSH
22430: LD_INT 8
22432: PUSH
22433: LD_INT 9
22435: PUSH
22436: LD_INT 10
22438: PUSH
22439: LD_INT 11
22441: PUSH
22442: LD_INT 12
22444: PUSH
22445: LD_INT 13
22447: PUSH
22448: LD_INT 14
22450: PUSH
22451: LD_INT 15
22453: PUSH
22454: LD_INT 16
22456: PUSH
22457: LD_INT 17
22459: PUSH
22460: LD_INT 18
22462: PUSH
22463: LD_INT 19
22465: PUSH
22466: LD_INT 20
22468: PUSH
22469: LD_INT 21
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 24
22480: PUSH
22481: LD_INT 25
22483: PUSH
22484: LD_INT 26
22486: PUSH
22487: LD_INT 27
22489: PUSH
22490: LD_INT 28
22492: PUSH
22493: LD_INT 29
22495: PUSH
22496: LD_INT 30
22498: PUSH
22499: LD_INT 31
22501: PUSH
22502: LD_INT 32
22504: PUSH
22505: LD_INT 33
22507: PUSH
22508: LD_INT 34
22510: PUSH
22511: LD_INT 36
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 101
22553: PUSH
22554: LD_INT 102
22556: PUSH
22557: LD_INT 103
22559: PUSH
22560: LD_INT 104
22562: PUSH
22563: LD_INT 105
22565: PUSH
22566: LD_INT 106
22568: PUSH
22569: LD_INT 107
22571: PUSH
22572: LD_INT 108
22574: PUSH
22575: LD_INT 109
22577: PUSH
22578: LD_INT 110
22580: PUSH
22581: LD_INT 111
22583: PUSH
22584: LD_INT 112
22586: PUSH
22587: LD_INT 113
22589: PUSH
22590: LD_INT 114
22592: PUSH
22593: LD_INT 116
22595: PUSH
22596: LD_INT 117
22598: PUSH
22599: LD_INT 118
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: ST_TO_ADDR
22625: GO 23024
22627: LD_INT 18
22629: DOUBLE
22630: EQUAL
22631: IFTRUE 22635
22633: GO 22783
22635: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22636: LD_ADDR_VAR 0 2
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 4
22646: PUSH
22647: LD_INT 5
22649: PUSH
22650: LD_INT 7
22652: PUSH
22653: LD_INT 11
22655: PUSH
22656: LD_INT 12
22658: PUSH
22659: LD_INT 15
22661: PUSH
22662: LD_INT 16
22664: PUSH
22665: LD_INT 20
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 22
22673: PUSH
22674: LD_INT 23
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 26
22682: PUSH
22683: LD_INT 30
22685: PUSH
22686: LD_INT 31
22688: PUSH
22689: LD_INT 32
22691: PUSH
22692: LD_INT 33
22694: PUSH
22695: LD_INT 34
22697: PUSH
22698: LD_INT 35
22700: PUSH
22701: LD_INT 36
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 101
22729: PUSH
22730: LD_INT 102
22732: PUSH
22733: LD_INT 103
22735: PUSH
22736: LD_INT 106
22738: PUSH
22739: LD_INT 108
22741: PUSH
22742: LD_INT 112
22744: PUSH
22745: LD_INT 113
22747: PUSH
22748: LD_INT 114
22750: PUSH
22751: LD_INT 115
22753: PUSH
22754: LD_INT 116
22756: PUSH
22757: LD_INT 117
22759: PUSH
22760: LD_INT 118
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: ST_TO_ADDR
22781: GO 23024
22783: LD_INT 19
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 23023
22791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22792: LD_ADDR_VAR 0 2
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 2
22802: PUSH
22803: LD_INT 3
22805: PUSH
22806: LD_INT 4
22808: PUSH
22809: LD_INT 5
22811: PUSH
22812: LD_INT 6
22814: PUSH
22815: LD_INT 7
22817: PUSH
22818: LD_INT 8
22820: PUSH
22821: LD_INT 9
22823: PUSH
22824: LD_INT 10
22826: PUSH
22827: LD_INT 11
22829: PUSH
22830: LD_INT 12
22832: PUSH
22833: LD_INT 13
22835: PUSH
22836: LD_INT 14
22838: PUSH
22839: LD_INT 15
22841: PUSH
22842: LD_INT 16
22844: PUSH
22845: LD_INT 17
22847: PUSH
22848: LD_INT 18
22850: PUSH
22851: LD_INT 19
22853: PUSH
22854: LD_INT 20
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 22
22862: PUSH
22863: LD_INT 23
22865: PUSH
22866: LD_INT 24
22868: PUSH
22869: LD_INT 25
22871: PUSH
22872: LD_INT 26
22874: PUSH
22875: LD_INT 27
22877: PUSH
22878: LD_INT 28
22880: PUSH
22881: LD_INT 29
22883: PUSH
22884: LD_INT 30
22886: PUSH
22887: LD_INT 31
22889: PUSH
22890: LD_INT 32
22892: PUSH
22893: LD_INT 33
22895: PUSH
22896: LD_INT 34
22898: PUSH
22899: LD_INT 35
22901: PUSH
22902: LD_INT 36
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 101
22945: PUSH
22946: LD_INT 102
22948: PUSH
22949: LD_INT 103
22951: PUSH
22952: LD_INT 104
22954: PUSH
22955: LD_INT 105
22957: PUSH
22958: LD_INT 106
22960: PUSH
22961: LD_INT 107
22963: PUSH
22964: LD_INT 108
22966: PUSH
22967: LD_INT 109
22969: PUSH
22970: LD_INT 110
22972: PUSH
22973: LD_INT 111
22975: PUSH
22976: LD_INT 112
22978: PUSH
22979: LD_INT 113
22981: PUSH
22982: LD_INT 114
22984: PUSH
22985: LD_INT 115
22987: PUSH
22988: LD_INT 116
22990: PUSH
22991: LD_INT 117
22993: PUSH
22994: LD_INT 118
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: ST_TO_ADDR
23021: GO 23024
23023: POP
// end else
23024: GO 23255
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23026: LD_ADDR_VAR 0 2
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 3
23039: PUSH
23040: LD_INT 4
23042: PUSH
23043: LD_INT 5
23045: PUSH
23046: LD_INT 6
23048: PUSH
23049: LD_INT 7
23051: PUSH
23052: LD_INT 8
23054: PUSH
23055: LD_INT 9
23057: PUSH
23058: LD_INT 10
23060: PUSH
23061: LD_INT 11
23063: PUSH
23064: LD_INT 12
23066: PUSH
23067: LD_INT 13
23069: PUSH
23070: LD_INT 14
23072: PUSH
23073: LD_INT 15
23075: PUSH
23076: LD_INT 16
23078: PUSH
23079: LD_INT 17
23081: PUSH
23082: LD_INT 18
23084: PUSH
23085: LD_INT 19
23087: PUSH
23088: LD_INT 20
23090: PUSH
23091: LD_INT 21
23093: PUSH
23094: LD_INT 22
23096: PUSH
23097: LD_INT 23
23099: PUSH
23100: LD_INT 24
23102: PUSH
23103: LD_INT 25
23105: PUSH
23106: LD_INT 26
23108: PUSH
23109: LD_INT 27
23111: PUSH
23112: LD_INT 28
23114: PUSH
23115: LD_INT 29
23117: PUSH
23118: LD_INT 30
23120: PUSH
23121: LD_INT 31
23123: PUSH
23124: LD_INT 32
23126: PUSH
23127: LD_INT 33
23129: PUSH
23130: LD_INT 34
23132: PUSH
23133: LD_INT 35
23135: PUSH
23136: LD_INT 36
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 101
23179: PUSH
23180: LD_INT 102
23182: PUSH
23183: LD_INT 103
23185: PUSH
23186: LD_INT 104
23188: PUSH
23189: LD_INT 105
23191: PUSH
23192: LD_INT 106
23194: PUSH
23195: LD_INT 107
23197: PUSH
23198: LD_INT 108
23200: PUSH
23201: LD_INT 109
23203: PUSH
23204: LD_INT 110
23206: PUSH
23207: LD_INT 111
23209: PUSH
23210: LD_INT 112
23212: PUSH
23213: LD_INT 113
23215: PUSH
23216: LD_INT 114
23218: PUSH
23219: LD_INT 115
23221: PUSH
23222: LD_INT 116
23224: PUSH
23225: LD_INT 117
23227: PUSH
23228: LD_INT 118
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: ST_TO_ADDR
// if result then
23255: LD_VAR 0 2
23259: IFFALSE 24045
// begin normal :=  ;
23261: LD_ADDR_VAR 0 5
23265: PUSH
23266: LD_STRING 
23268: ST_TO_ADDR
// hardcore :=  ;
23269: LD_ADDR_VAR 0 6
23273: PUSH
23274: LD_STRING 
23276: ST_TO_ADDR
// active :=  ;
23277: LD_ADDR_VAR 0 7
23281: PUSH
23282: LD_STRING 
23284: ST_TO_ADDR
// for i = 1 to normalCounter do
23285: LD_ADDR_VAR 0 8
23289: PUSH
23290: DOUBLE
23291: LD_INT 1
23293: DEC
23294: ST_TO_ADDR
23295: LD_EXP 55
23299: PUSH
23300: FOR_TO
23301: IFFALSE 23402
// begin tmp := 0 ;
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_STRING 0
23310: ST_TO_ADDR
// if result [ 1 ] then
23311: LD_VAR 0 2
23315: PUSH
23316: LD_INT 1
23318: ARRAY
23319: IFFALSE 23384
// if result [ 1 ] [ 1 ] = i then
23321: LD_VAR 0 2
23325: PUSH
23326: LD_INT 1
23328: ARRAY
23329: PUSH
23330: LD_INT 1
23332: ARRAY
23333: PUSH
23334: LD_VAR 0 8
23338: EQUAL
23339: IFFALSE 23384
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23341: LD_ADDR_VAR 0 2
23345: PUSH
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_INT 1
23353: PPUSH
23354: LD_VAR 0 2
23358: PUSH
23359: LD_INT 1
23361: ARRAY
23362: PPUSH
23363: LD_INT 1
23365: PPUSH
23366: CALL_OW 3
23370: PPUSH
23371: CALL_OW 1
23375: ST_TO_ADDR
// tmp := 1 ;
23376: LD_ADDR_VAR 0 3
23380: PUSH
23381: LD_STRING 1
23383: ST_TO_ADDR
// end ; normal := normal & tmp ;
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: LD_VAR 0 5
23393: PUSH
23394: LD_VAR 0 3
23398: STR
23399: ST_TO_ADDR
// end ;
23400: GO 23300
23402: POP
23403: POP
// for i = 1 to hardcoreCounter do
23404: LD_ADDR_VAR 0 8
23408: PUSH
23409: DOUBLE
23410: LD_INT 1
23412: DEC
23413: ST_TO_ADDR
23414: LD_EXP 56
23418: PUSH
23419: FOR_TO
23420: IFFALSE 23525
// begin tmp := 0 ;
23422: LD_ADDR_VAR 0 3
23426: PUSH
23427: LD_STRING 0
23429: ST_TO_ADDR
// if result [ 2 ] then
23430: LD_VAR 0 2
23434: PUSH
23435: LD_INT 2
23437: ARRAY
23438: IFFALSE 23507
// if result [ 2 ] [ 1 ] = 100 + i then
23440: LD_VAR 0 2
23444: PUSH
23445: LD_INT 2
23447: ARRAY
23448: PUSH
23449: LD_INT 1
23451: ARRAY
23452: PUSH
23453: LD_INT 100
23455: PUSH
23456: LD_VAR 0 8
23460: PLUS
23461: EQUAL
23462: IFFALSE 23507
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23464: LD_ADDR_VAR 0 2
23468: PUSH
23469: LD_VAR 0 2
23473: PPUSH
23474: LD_INT 2
23476: PPUSH
23477: LD_VAR 0 2
23481: PUSH
23482: LD_INT 2
23484: ARRAY
23485: PPUSH
23486: LD_INT 1
23488: PPUSH
23489: CALL_OW 3
23493: PPUSH
23494: CALL_OW 1
23498: ST_TO_ADDR
// tmp := 1 ;
23499: LD_ADDR_VAR 0 3
23503: PUSH
23504: LD_STRING 1
23506: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23507: LD_ADDR_VAR 0 6
23511: PUSH
23512: LD_VAR 0 6
23516: PUSH
23517: LD_VAR 0 3
23521: STR
23522: ST_TO_ADDR
// end ;
23523: GO 23419
23525: POP
23526: POP
// if isGameLoad then
23527: LD_VAR 0 1
23531: IFFALSE 24006
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23533: LD_ADDR_VAR 0 4
23537: PUSH
23538: LD_EXP 59
23542: PUSH
23543: LD_EXP 58
23547: PUSH
23548: LD_EXP 60
23552: PUSH
23553: LD_EXP 57
23557: PUSH
23558: LD_EXP 61
23562: PUSH
23563: LD_EXP 62
23567: PUSH
23568: LD_EXP 63
23572: PUSH
23573: LD_EXP 64
23577: PUSH
23578: LD_EXP 65
23582: PUSH
23583: LD_EXP 66
23587: PUSH
23588: LD_EXP 67
23592: PUSH
23593: LD_EXP 68
23597: PUSH
23598: LD_EXP 69
23602: PUSH
23603: LD_EXP 70
23607: PUSH
23608: LD_EXP 78
23612: PUSH
23613: LD_EXP 79
23617: PUSH
23618: LD_EXP 80
23622: PUSH
23623: LD_EXP 81
23627: PUSH
23628: LD_EXP 83
23632: PUSH
23633: LD_EXP 84
23637: PUSH
23638: LD_EXP 85
23642: PUSH
23643: LD_EXP 88
23647: PUSH
23648: LD_EXP 90
23652: PUSH
23653: LD_EXP 91
23657: PUSH
23658: LD_EXP 92
23662: PUSH
23663: LD_EXP 94
23667: PUSH
23668: LD_EXP 95
23672: PUSH
23673: LD_EXP 98
23677: PUSH
23678: LD_EXP 99
23682: PUSH
23683: LD_EXP 100
23687: PUSH
23688: LD_EXP 101
23692: PUSH
23693: LD_EXP 102
23697: PUSH
23698: LD_EXP 103
23702: PUSH
23703: LD_EXP 104
23707: PUSH
23708: LD_EXP 105
23712: PUSH
23713: LD_EXP 106
23717: PUSH
23718: LD_EXP 71
23722: PUSH
23723: LD_EXP 72
23727: PUSH
23728: LD_EXP 75
23732: PUSH
23733: LD_EXP 76
23737: PUSH
23738: LD_EXP 77
23742: PUSH
23743: LD_EXP 73
23747: PUSH
23748: LD_EXP 74
23752: PUSH
23753: LD_EXP 82
23757: PUSH
23758: LD_EXP 86
23762: PUSH
23763: LD_EXP 87
23767: PUSH
23768: LD_EXP 89
23772: PUSH
23773: LD_EXP 93
23777: PUSH
23778: LD_EXP 96
23782: PUSH
23783: LD_EXP 97
23787: PUSH
23788: LD_EXP 107
23792: PUSH
23793: LD_EXP 108
23797: PUSH
23798: LD_EXP 109
23802: PUSH
23803: LD_EXP 110
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: ST_TO_ADDR
// tmp :=  ;
23864: LD_ADDR_VAR 0 3
23868: PUSH
23869: LD_STRING 
23871: ST_TO_ADDR
// for i = 1 to normalCounter do
23872: LD_ADDR_VAR 0 8
23876: PUSH
23877: DOUBLE
23878: LD_INT 1
23880: DEC
23881: ST_TO_ADDR
23882: LD_EXP 55
23886: PUSH
23887: FOR_TO
23888: IFFALSE 23924
// begin if flags [ i ] then
23890: LD_VAR 0 4
23894: PUSH
23895: LD_VAR 0 8
23899: ARRAY
23900: IFFALSE 23922
// tmp := tmp & i & ; ;
23902: LD_ADDR_VAR 0 3
23906: PUSH
23907: LD_VAR 0 3
23911: PUSH
23912: LD_VAR 0 8
23916: STR
23917: PUSH
23918: LD_STRING ;
23920: STR
23921: ST_TO_ADDR
// end ;
23922: GO 23887
23924: POP
23925: POP
// for i = 1 to hardcoreCounter do
23926: LD_ADDR_VAR 0 8
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_EXP 56
23940: PUSH
23941: FOR_TO
23942: IFFALSE 23988
// begin if flags [ normalCounter + i ] then
23944: LD_VAR 0 4
23948: PUSH
23949: LD_EXP 55
23953: PUSH
23954: LD_VAR 0 8
23958: PLUS
23959: ARRAY
23960: IFFALSE 23986
// tmp := tmp & ( 100 + i ) & ; ;
23962: LD_ADDR_VAR 0 3
23966: PUSH
23967: LD_VAR 0 3
23971: PUSH
23972: LD_INT 100
23974: PUSH
23975: LD_VAR 0 8
23979: PLUS
23980: STR
23981: PUSH
23982: LD_STRING ;
23984: STR
23985: ST_TO_ADDR
// end ;
23986: GO 23941
23988: POP
23989: POP
// if tmp then
23990: LD_VAR 0 3
23994: IFFALSE 24006
// active := tmp ;
23996: LD_ADDR_VAR 0 7
24000: PUSH
24001: LD_VAR 0 3
24005: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24006: LD_STRING getStreamItemsFromMission("
24008: PUSH
24009: LD_VAR 0 5
24013: STR
24014: PUSH
24015: LD_STRING ","
24017: STR
24018: PUSH
24019: LD_VAR 0 6
24023: STR
24024: PUSH
24025: LD_STRING ","
24027: STR
24028: PUSH
24029: LD_VAR 0 7
24033: STR
24034: PUSH
24035: LD_STRING ")
24037: STR
24038: PPUSH
24039: CALL_OW 559
// end else
24043: GO 24052
// ToLua ( getStreamItemsFromMission("","","") ) ;
24045: LD_STRING getStreamItemsFromMission("","","")
24047: PPUSH
24048: CALL_OW 559
// end ;
24052: LD_VAR 0 2
24056: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24057: LD_EXP 54
24061: IFFALSE 24069
24063: PUSH
24064: LD_EXP 59
24068: AND
24069: IFFALSE 24193
24071: GO 24073
24073: DISABLE
24074: LD_INT 0
24076: PPUSH
24077: PPUSH
// begin enable ;
24078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24079: LD_ADDR_VAR 0 2
24083: PUSH
24084: LD_INT 22
24086: PUSH
24087: LD_OWVAR 2
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: LD_INT 34
24101: PUSH
24102: LD_INT 7
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 34
24111: PUSH
24112: LD_INT 45
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 34
24121: PUSH
24122: LD_INT 28
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 34
24131: PUSH
24132: LD_INT 47
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PPUSH
24150: CALL_OW 69
24154: ST_TO_ADDR
// if not tmp then
24155: LD_VAR 0 2
24159: NOT
24160: IFFALSE 24164
// exit ;
24162: GO 24193
// for i in tmp do
24164: LD_ADDR_VAR 0 1
24168: PUSH
24169: LD_VAR 0 2
24173: PUSH
24174: FOR_IN
24175: IFFALSE 24191
// begin SetLives ( i , 0 ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_INT 0
24184: PPUSH
24185: CALL_OW 234
// end ;
24189: GO 24174
24191: POP
24192: POP
// end ;
24193: PPOPN 2
24195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24196: LD_EXP 54
24200: IFFALSE 24208
24202: PUSH
24203: LD_EXP 60
24207: AND
24208: IFFALSE 24292
24210: GO 24212
24212: DISABLE
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
// begin enable ;
24217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24218: LD_ADDR_VAR 0 2
24222: PUSH
24223: LD_INT 22
24225: PUSH
24226: LD_OWVAR 2
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 32
24237: PUSH
24238: LD_INT 3
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PPUSH
24249: CALL_OW 69
24253: ST_TO_ADDR
// if not tmp then
24254: LD_VAR 0 2
24258: NOT
24259: IFFALSE 24263
// exit ;
24261: GO 24292
// for i in tmp do
24263: LD_ADDR_VAR 0 1
24267: PUSH
24268: LD_VAR 0 2
24272: PUSH
24273: FOR_IN
24274: IFFALSE 24290
// begin SetLives ( i , 0 ) ;
24276: LD_VAR 0 1
24280: PPUSH
24281: LD_INT 0
24283: PPUSH
24284: CALL_OW 234
// end ;
24288: GO 24273
24290: POP
24291: POP
// end ;
24292: PPOPN 2
24294: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24295: LD_EXP 54
24299: IFFALSE 24307
24301: PUSH
24302: LD_EXP 57
24306: AND
24307: IFFALSE 24400
24309: GO 24311
24311: DISABLE
24312: LD_INT 0
24314: PPUSH
// begin enable ;
24315: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_OWVAR 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 25
24338: PUSH
24339: LD_INT 5
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 25
24348: PUSH
24349: LD_INT 9
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 25
24358: PUSH
24359: LD_INT 8
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PPUSH
24376: CALL_OW 69
24380: PUSH
24381: FOR_IN
24382: IFFALSE 24398
// begin SetClass ( i , 1 ) ;
24384: LD_VAR 0 1
24388: PPUSH
24389: LD_INT 1
24391: PPUSH
24392: CALL_OW 336
// end ;
24396: GO 24381
24398: POP
24399: POP
// end ;
24400: PPOPN 1
24402: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24403: LD_EXP 54
24407: IFFALSE 24415
24409: PUSH
24410: LD_EXP 58
24414: AND
24415: IFFALSE 24427
24417: PUSH
24418: LD_OWVAR 65
24422: PUSH
24423: LD_INT 7
24425: LESS
24426: AND
24427: IFFALSE 24441
24429: GO 24431
24431: DISABLE
// begin enable ;
24432: ENABLE
// game_speed := 7 ;
24433: LD_ADDR_OWVAR 65
24437: PUSH
24438: LD_INT 7
24440: ST_TO_ADDR
// end ;
24441: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24442: LD_EXP 54
24446: IFFALSE 24454
24448: PUSH
24449: LD_EXP 61
24453: AND
24454: IFFALSE 24656
24456: GO 24458
24458: DISABLE
24459: LD_INT 0
24461: PPUSH
24462: PPUSH
24463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24464: LD_ADDR_VAR 0 3
24468: PUSH
24469: LD_INT 81
24471: PUSH
24472: LD_OWVAR 2
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 21
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: ST_TO_ADDR
// if not tmp then
24500: LD_VAR 0 3
24504: NOT
24505: IFFALSE 24509
// exit ;
24507: GO 24656
// if tmp > 5 then
24509: LD_VAR 0 3
24513: PUSH
24514: LD_INT 5
24516: GREATER
24517: IFFALSE 24529
// k := 5 else
24519: LD_ADDR_VAR 0 2
24523: PUSH
24524: LD_INT 5
24526: ST_TO_ADDR
24527: GO 24539
// k := tmp ;
24529: LD_ADDR_VAR 0 2
24533: PUSH
24534: LD_VAR 0 3
24538: ST_TO_ADDR
// for i := 1 to k do
24539: LD_ADDR_VAR 0 1
24543: PUSH
24544: DOUBLE
24545: LD_INT 1
24547: DEC
24548: ST_TO_ADDR
24549: LD_VAR 0 2
24553: PUSH
24554: FOR_TO
24555: IFFALSE 24654
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24557: LD_VAR 0 3
24561: PUSH
24562: LD_VAR 0 1
24566: ARRAY
24567: PPUSH
24568: LD_VAR 0 1
24572: PUSH
24573: LD_INT 4
24575: MOD
24576: PUSH
24577: LD_INT 1
24579: PLUS
24580: PPUSH
24581: CALL_OW 259
24585: PUSH
24586: LD_INT 10
24588: LESS
24589: IFFALSE 24652
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24591: LD_VAR 0 3
24595: PUSH
24596: LD_VAR 0 1
24600: ARRAY
24601: PPUSH
24602: LD_VAR 0 1
24606: PUSH
24607: LD_INT 4
24609: MOD
24610: PUSH
24611: LD_INT 1
24613: PLUS
24614: PPUSH
24615: LD_VAR 0 3
24619: PUSH
24620: LD_VAR 0 1
24624: ARRAY
24625: PPUSH
24626: LD_VAR 0 1
24630: PUSH
24631: LD_INT 4
24633: MOD
24634: PUSH
24635: LD_INT 1
24637: PLUS
24638: PPUSH
24639: CALL_OW 259
24643: PUSH
24644: LD_INT 1
24646: PLUS
24647: PPUSH
24648: CALL_OW 237
24652: GO 24554
24654: POP
24655: POP
// end ;
24656: PPOPN 3
24658: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24659: LD_EXP 54
24663: IFFALSE 24671
24665: PUSH
24666: LD_EXP 62
24670: AND
24671: IFFALSE 24691
24673: GO 24675
24675: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24676: LD_INT 4
24678: PPUSH
24679: LD_OWVAR 2
24683: PPUSH
24684: LD_INT 0
24686: PPUSH
24687: CALL_OW 324
24691: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24692: LD_EXP 54
24696: IFFALSE 24704
24698: PUSH
24699: LD_EXP 91
24703: AND
24704: IFFALSE 24724
24706: GO 24708
24708: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24709: LD_INT 19
24711: PPUSH
24712: LD_OWVAR 2
24716: PPUSH
24717: LD_INT 0
24719: PPUSH
24720: CALL_OW 324
24724: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24725: LD_EXP 54
24729: IFFALSE 24737
24731: PUSH
24732: LD_EXP 63
24736: AND
24737: IFFALSE 24839
24739: GO 24741
24741: DISABLE
24742: LD_INT 0
24744: PPUSH
24745: PPUSH
// begin enable ;
24746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24747: LD_ADDR_VAR 0 2
24751: PUSH
24752: LD_INT 22
24754: PUSH
24755: LD_OWVAR 2
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 2
24766: PUSH
24767: LD_INT 34
24769: PUSH
24770: LD_INT 11
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 34
24779: PUSH
24780: LD_INT 30
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: LIST
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PPUSH
24796: CALL_OW 69
24800: ST_TO_ADDR
// if not tmp then
24801: LD_VAR 0 2
24805: NOT
24806: IFFALSE 24810
// exit ;
24808: GO 24839
// for i in tmp do
24810: LD_ADDR_VAR 0 1
24814: PUSH
24815: LD_VAR 0 2
24819: PUSH
24820: FOR_IN
24821: IFFALSE 24837
// begin SetLives ( i , 0 ) ;
24823: LD_VAR 0 1
24827: PPUSH
24828: LD_INT 0
24830: PPUSH
24831: CALL_OW 234
// end ;
24835: GO 24820
24837: POP
24838: POP
// end ;
24839: PPOPN 2
24841: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24842: LD_EXP 54
24846: IFFALSE 24854
24848: PUSH
24849: LD_EXP 64
24853: AND
24854: IFFALSE 24874
24856: GO 24858
24858: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24859: LD_INT 32
24861: PPUSH
24862: LD_OWVAR 2
24866: PPUSH
24867: LD_INT 0
24869: PPUSH
24870: CALL_OW 324
24874: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24875: LD_EXP 54
24879: IFFALSE 24887
24881: PUSH
24882: LD_EXP 65
24886: AND
24887: IFFALSE 25070
24889: GO 24891
24891: DISABLE
24892: LD_INT 0
24894: PPUSH
24895: PPUSH
24896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24897: LD_ADDR_VAR 0 2
24901: PUSH
24902: LD_INT 22
24904: PUSH
24905: LD_OWVAR 2
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 33
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PPUSH
24928: CALL_OW 69
24932: ST_TO_ADDR
// if not tmp then
24933: LD_VAR 0 2
24937: NOT
24938: IFFALSE 24942
// exit ;
24940: GO 25070
// side := 0 ;
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_INT 0
24949: ST_TO_ADDR
// for i := 1 to 8 do
24950: LD_ADDR_VAR 0 1
24954: PUSH
24955: DOUBLE
24956: LD_INT 1
24958: DEC
24959: ST_TO_ADDR
24960: LD_INT 8
24962: PUSH
24963: FOR_TO
24964: IFFALSE 25014
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24966: LD_OWVAR 2
24970: PUSH
24971: LD_VAR 0 1
24975: NONEQUAL
24976: IFFALSE 24998
24978: PUSH
24979: LD_OWVAR 2
24983: PPUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 81
24993: PUSH
24994: LD_INT 2
24996: EQUAL
24997: AND
24998: IFFALSE 25012
// begin side := i ;
25000: LD_ADDR_VAR 0 3
25004: PUSH
25005: LD_VAR 0 1
25009: ST_TO_ADDR
// break ;
25010: GO 25014
// end ;
25012: GO 24963
25014: POP
25015: POP
// if not side then
25016: LD_VAR 0 3
25020: NOT
25021: IFFALSE 25025
// exit ;
25023: GO 25070
// for i := 1 to tmp do
25025: LD_ADDR_VAR 0 1
25029: PUSH
25030: DOUBLE
25031: LD_INT 1
25033: DEC
25034: ST_TO_ADDR
25035: LD_VAR 0 2
25039: PUSH
25040: FOR_TO
25041: IFFALSE 25068
// if Prob ( 60 ) then
25043: LD_INT 60
25045: PPUSH
25046: CALL_OW 13
25050: IFFALSE 25066
// SetSide ( i , side ) ;
25052: LD_VAR 0 1
25056: PPUSH
25057: LD_VAR 0 3
25061: PPUSH
25062: CALL_OW 235
25066: GO 25040
25068: POP
25069: POP
// end ;
25070: PPOPN 3
25072: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25073: LD_EXP 54
25077: IFFALSE 25085
25079: PUSH
25080: LD_EXP 67
25084: AND
25085: IFFALSE 25204
25087: GO 25089
25089: DISABLE
25090: LD_INT 0
25092: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25093: LD_ADDR_VAR 0 1
25097: PUSH
25098: LD_INT 22
25100: PUSH
25101: LD_OWVAR 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 21
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 3
25122: PUSH
25123: LD_INT 23
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: PUSH
25147: FOR_IN
25148: IFFALSE 25202
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25150: LD_VAR 0 1
25154: PPUSH
25155: CALL_OW 257
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: LD_INT 3
25168: PUSH
25169: LD_INT 4
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: IN
25178: IFFALSE 25200
// SetClass ( un , rand ( 1 , 4 ) ) ;
25180: LD_VAR 0 1
25184: PPUSH
25185: LD_INT 1
25187: PPUSH
25188: LD_INT 4
25190: PPUSH
25191: CALL_OW 12
25195: PPUSH
25196: CALL_OW 336
25200: GO 25147
25202: POP
25203: POP
// end ;
25204: PPOPN 1
25206: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25207: LD_EXP 54
25211: IFFALSE 25219
25213: PUSH
25214: LD_EXP 66
25218: AND
25219: IFFALSE 25298
25221: GO 25223
25223: DISABLE
25224: LD_INT 0
25226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25227: LD_ADDR_VAR 0 1
25231: PUSH
25232: LD_INT 22
25234: PUSH
25235: LD_OWVAR 2
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 21
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PPUSH
25258: CALL_OW 69
25262: ST_TO_ADDR
// if not tmp then
25263: LD_VAR 0 1
25267: NOT
25268: IFFALSE 25272
// exit ;
25270: GO 25298
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25272: LD_VAR 0 1
25276: PUSH
25277: LD_INT 1
25279: PPUSH
25280: LD_VAR 0 1
25284: PPUSH
25285: CALL_OW 12
25289: ARRAY
25290: PPUSH
25291: LD_INT 100
25293: PPUSH
25294: CALL_OW 234
// end ;
25298: PPOPN 1
25300: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25301: LD_EXP 54
25305: IFFALSE 25313
25307: PUSH
25308: LD_EXP 68
25312: AND
25313: IFFALSE 25411
25315: GO 25317
25317: DISABLE
25318: LD_INT 0
25320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25321: LD_ADDR_VAR 0 1
25325: PUSH
25326: LD_INT 22
25328: PUSH
25329: LD_OWVAR 2
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 21
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PPUSH
25352: CALL_OW 69
25356: ST_TO_ADDR
// if not tmp then
25357: LD_VAR 0 1
25361: NOT
25362: IFFALSE 25366
// exit ;
25364: GO 25411
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25366: LD_VAR 0 1
25370: PUSH
25371: LD_INT 1
25373: PPUSH
25374: LD_VAR 0 1
25378: PPUSH
25379: CALL_OW 12
25383: ARRAY
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: LD_INT 4
25390: PPUSH
25391: CALL_OW 12
25395: PPUSH
25396: LD_INT 3000
25398: PPUSH
25399: LD_INT 9000
25401: PPUSH
25402: CALL_OW 12
25406: PPUSH
25407: CALL_OW 492
// end ;
25411: PPOPN 1
25413: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25414: LD_EXP 54
25418: IFFALSE 25426
25420: PUSH
25421: LD_EXP 69
25425: AND
25426: IFFALSE 25446
25428: GO 25430
25430: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25431: LD_INT 1
25433: PPUSH
25434: LD_OWVAR 2
25438: PPUSH
25439: LD_INT 0
25441: PPUSH
25442: CALL_OW 324
25446: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25447: LD_EXP 54
25451: IFFALSE 25459
25453: PUSH
25454: LD_EXP 70
25458: AND
25459: IFFALSE 25542
25461: GO 25463
25463: DISABLE
25464: LD_INT 0
25466: PPUSH
25467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25468: LD_ADDR_VAR 0 2
25472: PUSH
25473: LD_INT 22
25475: PUSH
25476: LD_OWVAR 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 21
25487: PUSH
25488: LD_INT 3
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL_OW 69
25503: ST_TO_ADDR
// if not tmp then
25504: LD_VAR 0 2
25508: NOT
25509: IFFALSE 25513
// exit ;
25511: GO 25542
// for i in tmp do
25513: LD_ADDR_VAR 0 1
25517: PUSH
25518: LD_VAR 0 2
25522: PUSH
25523: FOR_IN
25524: IFFALSE 25540
// SetBLevel ( i , 10 ) ;
25526: LD_VAR 0 1
25530: PPUSH
25531: LD_INT 10
25533: PPUSH
25534: CALL_OW 241
25538: GO 25523
25540: POP
25541: POP
// end ;
25542: PPOPN 2
25544: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25545: LD_EXP 54
25549: IFFALSE 25557
25551: PUSH
25552: LD_EXP 71
25556: AND
25557: IFFALSE 25668
25559: GO 25561
25561: DISABLE
25562: LD_INT 0
25564: PPUSH
25565: PPUSH
25566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_INT 22
25574: PUSH
25575: LD_OWVAR 2
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 25
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 69
25602: ST_TO_ADDR
// if not tmp then
25603: LD_VAR 0 3
25607: NOT
25608: IFFALSE 25612
// exit ;
25610: GO 25668
// un := tmp [ rand ( 1 , tmp ) ] ;
25612: LD_ADDR_VAR 0 2
25616: PUSH
25617: LD_VAR 0 3
25621: PUSH
25622: LD_INT 1
25624: PPUSH
25625: LD_VAR 0 3
25629: PPUSH
25630: CALL_OW 12
25634: ARRAY
25635: ST_TO_ADDR
// if Crawls ( un ) then
25636: LD_VAR 0 2
25640: PPUSH
25641: CALL_OW 318
25645: IFFALSE 25656
// ComWalk ( un ) ;
25647: LD_VAR 0 2
25651: PPUSH
25652: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_INT 5
25663: PPUSH
25664: CALL_OW 336
// end ;
25668: PPOPN 3
25670: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25671: LD_EXP 54
25675: IFFALSE 25683
25677: PUSH
25678: LD_EXP 72
25682: AND
25683: IFFALSE 25695
25685: PUSH
25686: LD_OWVAR 67
25690: PUSH
25691: LD_INT 4
25693: LESS
25694: AND
25695: IFFALSE 25714
25697: GO 25699
25699: DISABLE
// begin Difficulty := Difficulty + 1 ;
25700: LD_ADDR_OWVAR 67
25704: PUSH
25705: LD_OWVAR 67
25709: PUSH
25710: LD_INT 1
25712: PLUS
25713: ST_TO_ADDR
// end ;
25714: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25715: LD_EXP 54
25719: IFFALSE 25727
25721: PUSH
25722: LD_EXP 73
25726: AND
25727: IFFALSE 25830
25729: GO 25731
25731: DISABLE
25732: LD_INT 0
25734: PPUSH
// begin for i := 1 to 5 do
25735: LD_ADDR_VAR 0 1
25739: PUSH
25740: DOUBLE
25741: LD_INT 1
25743: DEC
25744: ST_TO_ADDR
25745: LD_INT 5
25747: PUSH
25748: FOR_TO
25749: IFFALSE 25828
// begin uc_nation := nation_nature ;
25751: LD_ADDR_OWVAR 21
25755: PUSH
25756: LD_INT 0
25758: ST_TO_ADDR
// uc_side := 0 ;
25759: LD_ADDR_OWVAR 20
25763: PUSH
25764: LD_INT 0
25766: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25767: LD_ADDR_OWVAR 29
25771: PUSH
25772: LD_INT 12
25774: PUSH
25775: LD_INT 12
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: ST_TO_ADDR
// hc_agressivity := 20 ;
25782: LD_ADDR_OWVAR 35
25786: PUSH
25787: LD_INT 20
25789: ST_TO_ADDR
// hc_class := class_tiger ;
25790: LD_ADDR_OWVAR 28
25794: PUSH
25795: LD_INT 14
25797: ST_TO_ADDR
// hc_gallery :=  ;
25798: LD_ADDR_OWVAR 33
25802: PUSH
25803: LD_STRING 
25805: ST_TO_ADDR
// hc_name :=  ;
25806: LD_ADDR_OWVAR 26
25810: PUSH
25811: LD_STRING 
25813: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25814: CALL_OW 44
25818: PPUSH
25819: LD_INT 0
25821: PPUSH
25822: CALL_OW 51
// end ;
25826: GO 25748
25828: POP
25829: POP
// end ;
25830: PPOPN 1
25832: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25833: LD_EXP 54
25837: IFFALSE 25845
25839: PUSH
25840: LD_EXP 74
25844: AND
25845: IFFALSE 25854
25847: GO 25849
25849: DISABLE
// StreamSibBomb ;
25850: CALL 25855 0 0
25854: END
// export function StreamSibBomb ; var i , x , y ; begin
25855: LD_INT 0
25857: PPUSH
25858: PPUSH
25859: PPUSH
25860: PPUSH
// result := false ;
25861: LD_ADDR_VAR 0 1
25865: PUSH
25866: LD_INT 0
25868: ST_TO_ADDR
// for i := 1 to 16 do
25869: LD_ADDR_VAR 0 2
25873: PUSH
25874: DOUBLE
25875: LD_INT 1
25877: DEC
25878: ST_TO_ADDR
25879: LD_INT 16
25881: PUSH
25882: FOR_TO
25883: IFFALSE 26082
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25885: LD_ADDR_VAR 0 3
25889: PUSH
25890: LD_INT 10
25892: PUSH
25893: LD_INT 20
25895: PUSH
25896: LD_INT 30
25898: PUSH
25899: LD_INT 40
25901: PUSH
25902: LD_INT 50
25904: PUSH
25905: LD_INT 60
25907: PUSH
25908: LD_INT 70
25910: PUSH
25911: LD_INT 80
25913: PUSH
25914: LD_INT 90
25916: PUSH
25917: LD_INT 100
25919: PUSH
25920: LD_INT 110
25922: PUSH
25923: LD_INT 120
25925: PUSH
25926: LD_INT 130
25928: PUSH
25929: LD_INT 140
25931: PUSH
25932: LD_INT 150
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PPUSH
25955: LD_INT 15
25957: PPUSH
25958: CALL_OW 12
25962: ARRAY
25963: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25964: LD_ADDR_VAR 0 4
25968: PUSH
25969: LD_INT 10
25971: PUSH
25972: LD_INT 20
25974: PUSH
25975: LD_INT 30
25977: PUSH
25978: LD_INT 40
25980: PUSH
25981: LD_INT 50
25983: PUSH
25984: LD_INT 60
25986: PUSH
25987: LD_INT 70
25989: PUSH
25990: LD_INT 80
25992: PUSH
25993: LD_INT 90
25995: PUSH
25996: LD_INT 100
25998: PUSH
25999: LD_INT 110
26001: PUSH
26002: LD_INT 120
26004: PUSH
26005: LD_INT 130
26007: PUSH
26008: LD_INT 140
26010: PUSH
26011: LD_INT 150
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: PPUSH
26034: LD_INT 15
26036: PPUSH
26037: CALL_OW 12
26041: ARRAY
26042: ST_TO_ADDR
// if ValidHex ( x , y ) then
26043: LD_VAR 0 3
26047: PPUSH
26048: LD_VAR 0 4
26052: PPUSH
26053: CALL_OW 488
26057: IFFALSE 26080
// begin result := [ x , y ] ;
26059: LD_ADDR_VAR 0 1
26063: PUSH
26064: LD_VAR 0 3
26068: PUSH
26069: LD_VAR 0 4
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: ST_TO_ADDR
// break ;
26078: GO 26082
// end ; end ;
26080: GO 25882
26082: POP
26083: POP
// if result then
26084: LD_VAR 0 1
26088: IFFALSE 26148
// begin ToLua ( playSibBomb() ) ;
26090: LD_STRING playSibBomb()
26092: PPUSH
26093: CALL_OW 559
// wait ( 0 0$14 ) ;
26097: LD_INT 490
26099: PPUSH
26100: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26104: LD_VAR 0 1
26108: PUSH
26109: LD_INT 1
26111: ARRAY
26112: PPUSH
26113: LD_VAR 0 1
26117: PUSH
26118: LD_INT 2
26120: ARRAY
26121: PPUSH
26122: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26126: LD_VAR 0 1
26130: PUSH
26131: LD_INT 1
26133: ARRAY
26134: PPUSH
26135: LD_VAR 0 1
26139: PUSH
26140: LD_INT 2
26142: ARRAY
26143: PPUSH
26144: CALL_OW 429
// end ; end ;
26148: LD_VAR 0 1
26152: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26153: LD_EXP 54
26157: IFFALSE 26165
26159: PUSH
26160: LD_EXP 76
26164: AND
26165: IFFALSE 26177
26167: GO 26169
26169: DISABLE
// YouLost (  ) ;
26170: LD_STRING 
26172: PPUSH
26173: CALL_OW 104
26177: END
// every 0 0$1 trigger StreamModeActive and sFog do
26178: LD_EXP 54
26182: IFFALSE 26190
26184: PUSH
26185: LD_EXP 75
26189: AND
26190: IFFALSE 26204
26192: GO 26194
26194: DISABLE
// FogOff ( your_side ) ;
26195: LD_OWVAR 2
26199: PPUSH
26200: CALL_OW 344
26204: END
// every 0 0$1 trigger StreamModeActive and sSun do
26205: LD_EXP 54
26209: IFFALSE 26217
26211: PUSH
26212: LD_EXP 77
26216: AND
26217: IFFALSE 26245
26219: GO 26221
26221: DISABLE
// begin solar_recharge_percent := 0 ;
26222: LD_ADDR_OWVAR 79
26226: PUSH
26227: LD_INT 0
26229: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26230: LD_INT 10500
26232: PPUSH
26233: CALL_OW 67
// solar_recharge_percent := 100 ;
26237: LD_ADDR_OWVAR 79
26241: PUSH
26242: LD_INT 100
26244: ST_TO_ADDR
// end ;
26245: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26246: LD_EXP 54
26250: IFFALSE 26258
26252: PUSH
26253: LD_EXP 78
26257: AND
26258: IFFALSE 26497
26260: GO 26262
26262: DISABLE
26263: LD_INT 0
26265: PPUSH
26266: PPUSH
26267: PPUSH
// begin tmp := [ ] ;
26268: LD_ADDR_VAR 0 3
26272: PUSH
26273: EMPTY
26274: ST_TO_ADDR
// for i := 1 to 6 do
26275: LD_ADDR_VAR 0 1
26279: PUSH
26280: DOUBLE
26281: LD_INT 1
26283: DEC
26284: ST_TO_ADDR
26285: LD_INT 6
26287: PUSH
26288: FOR_TO
26289: IFFALSE 26394
// begin uc_nation := nation_nature ;
26291: LD_ADDR_OWVAR 21
26295: PUSH
26296: LD_INT 0
26298: ST_TO_ADDR
// uc_side := 0 ;
26299: LD_ADDR_OWVAR 20
26303: PUSH
26304: LD_INT 0
26306: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26307: LD_ADDR_OWVAR 29
26311: PUSH
26312: LD_INT 12
26314: PUSH
26315: LD_INT 12
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: ST_TO_ADDR
// hc_agressivity := 20 ;
26322: LD_ADDR_OWVAR 35
26326: PUSH
26327: LD_INT 20
26329: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26330: LD_ADDR_OWVAR 28
26334: PUSH
26335: LD_INT 17
26337: ST_TO_ADDR
// hc_gallery :=  ;
26338: LD_ADDR_OWVAR 33
26342: PUSH
26343: LD_STRING 
26345: ST_TO_ADDR
// hc_name :=  ;
26346: LD_ADDR_OWVAR 26
26350: PUSH
26351: LD_STRING 
26353: ST_TO_ADDR
// un := CreateHuman ;
26354: LD_ADDR_VAR 0 2
26358: PUSH
26359: CALL_OW 44
26363: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26364: LD_VAR 0 2
26368: PPUSH
26369: LD_INT 1
26371: PPUSH
26372: CALL_OW 51
// tmp := tmp ^ un ;
26376: LD_ADDR_VAR 0 3
26380: PUSH
26381: LD_VAR 0 3
26385: PUSH
26386: LD_VAR 0 2
26390: ADD
26391: ST_TO_ADDR
// end ;
26392: GO 26288
26394: POP
26395: POP
// repeat wait ( 0 0$1 ) ;
26396: LD_INT 35
26398: PPUSH
26399: CALL_OW 67
// for un in tmp do
26403: LD_ADDR_VAR 0 2
26407: PUSH
26408: LD_VAR 0 3
26412: PUSH
26413: FOR_IN
26414: IFFALSE 26488
// begin if IsDead ( un ) then
26416: LD_VAR 0 2
26420: PPUSH
26421: CALL_OW 301
26425: IFFALSE 26445
// begin tmp := tmp diff un ;
26427: LD_ADDR_VAR 0 3
26431: PUSH
26432: LD_VAR 0 3
26436: PUSH
26437: LD_VAR 0 2
26441: DIFF
26442: ST_TO_ADDR
// continue ;
26443: GO 26413
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26445: LD_VAR 0 2
26449: PPUSH
26450: LD_INT 3
26452: PUSH
26453: LD_INT 22
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PPUSH
26467: CALL_OW 69
26471: PPUSH
26472: LD_VAR 0 2
26476: PPUSH
26477: CALL_OW 74
26481: PPUSH
26482: CALL_OW 115
// end ;
26486: GO 26413
26488: POP
26489: POP
// until not tmp ;
26490: LD_VAR 0 3
26494: NOT
26495: IFFALSE 26396
// end ;
26497: PPOPN 3
26499: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26500: LD_EXP 54
26504: IFFALSE 26512
26506: PUSH
26507: LD_EXP 79
26511: AND
26512: IFFALSE 26566
26514: GO 26516
26516: DISABLE
// begin ToLua ( displayTroll(); ) ;
26517: LD_STRING displayTroll();
26519: PPUSH
26520: CALL_OW 559
// wait ( 3 3$00 ) ;
26524: LD_INT 6300
26526: PPUSH
26527: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26531: LD_STRING hideTroll();
26533: PPUSH
26534: CALL_OW 559
// wait ( 1 1$00 ) ;
26538: LD_INT 2100
26540: PPUSH
26541: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26545: LD_STRING displayTroll();
26547: PPUSH
26548: CALL_OW 559
// wait ( 1 1$00 ) ;
26552: LD_INT 2100
26554: PPUSH
26555: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26559: LD_STRING hideTroll();
26561: PPUSH
26562: CALL_OW 559
// end ;
26566: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26567: LD_EXP 54
26571: IFFALSE 26579
26573: PUSH
26574: LD_EXP 80
26578: AND
26579: IFFALSE 26642
26581: GO 26583
26583: DISABLE
26584: LD_INT 0
26586: PPUSH
// begin p := 0 ;
26587: LD_ADDR_VAR 0 1
26591: PUSH
26592: LD_INT 0
26594: ST_TO_ADDR
// repeat game_speed := 1 ;
26595: LD_ADDR_OWVAR 65
26599: PUSH
26600: LD_INT 1
26602: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26603: LD_INT 35
26605: PPUSH
26606: CALL_OW 67
// p := p + 1 ;
26610: LD_ADDR_VAR 0 1
26614: PUSH
26615: LD_VAR 0 1
26619: PUSH
26620: LD_INT 1
26622: PLUS
26623: ST_TO_ADDR
// until p >= 60 ;
26624: LD_VAR 0 1
26628: PUSH
26629: LD_INT 60
26631: GREATEREQUAL
26632: IFFALSE 26595
// game_speed := 4 ;
26634: LD_ADDR_OWVAR 65
26638: PUSH
26639: LD_INT 4
26641: ST_TO_ADDR
// end ;
26642: PPOPN 1
26644: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26645: LD_EXP 54
26649: IFFALSE 26657
26651: PUSH
26652: LD_EXP 81
26656: AND
26657: IFFALSE 26803
26659: GO 26661
26661: DISABLE
26662: LD_INT 0
26664: PPUSH
26665: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26666: LD_ADDR_VAR 0 1
26670: PUSH
26671: LD_INT 22
26673: PUSH
26674: LD_OWVAR 2
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 2
26685: PUSH
26686: LD_INT 30
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 30
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PPUSH
26715: CALL_OW 69
26719: ST_TO_ADDR
// if not depot then
26720: LD_VAR 0 1
26724: NOT
26725: IFFALSE 26729
// exit ;
26727: GO 26803
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26729: LD_ADDR_VAR 0 2
26733: PUSH
26734: LD_VAR 0 1
26738: PUSH
26739: LD_INT 1
26741: PPUSH
26742: LD_VAR 0 1
26746: PPUSH
26747: CALL_OW 12
26751: ARRAY
26752: PPUSH
26753: CALL_OW 274
26757: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26758: LD_VAR 0 2
26762: PPUSH
26763: LD_INT 1
26765: PPUSH
26766: LD_INT 0
26768: PPUSH
26769: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26773: LD_VAR 0 2
26777: PPUSH
26778: LD_INT 2
26780: PPUSH
26781: LD_INT 0
26783: PPUSH
26784: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26788: LD_VAR 0 2
26792: PPUSH
26793: LD_INT 3
26795: PPUSH
26796: LD_INT 0
26798: PPUSH
26799: CALL_OW 277
// end ;
26803: PPOPN 2
26805: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26806: LD_EXP 54
26810: IFFALSE 26818
26812: PUSH
26813: LD_EXP 82
26817: AND
26818: IFFALSE 26915
26820: GO 26822
26822: DISABLE
26823: LD_INT 0
26825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26826: LD_ADDR_VAR 0 1
26830: PUSH
26831: LD_INT 22
26833: PUSH
26834: LD_OWVAR 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 21
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 3
26855: PUSH
26856: LD_INT 23
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: PPUSH
26875: CALL_OW 69
26879: ST_TO_ADDR
// if not tmp then
26880: LD_VAR 0 1
26884: NOT
26885: IFFALSE 26889
// exit ;
26887: GO 26915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26889: LD_VAR 0 1
26893: PUSH
26894: LD_INT 1
26896: PPUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 12
26906: ARRAY
26907: PPUSH
26908: LD_INT 200
26910: PPUSH
26911: CALL_OW 234
// end ;
26915: PPOPN 1
26917: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26918: LD_EXP 54
26922: IFFALSE 26930
26924: PUSH
26925: LD_EXP 83
26929: AND
26930: IFFALSE 27009
26932: GO 26934
26934: DISABLE
26935: LD_INT 0
26937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26938: LD_ADDR_VAR 0 1
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_OWVAR 2
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PPUSH
26969: CALL_OW 69
26973: ST_TO_ADDR
// if not tmp then
26974: LD_VAR 0 1
26978: NOT
26979: IFFALSE 26983
// exit ;
26981: GO 27009
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 1
26990: PPUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL_OW 12
27000: ARRAY
27001: PPUSH
27002: LD_INT 60
27004: PPUSH
27005: CALL_OW 234
// end ;
27009: PPOPN 1
27011: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27012: LD_EXP 54
27016: IFFALSE 27024
27018: PUSH
27019: LD_EXP 84
27023: AND
27024: IFFALSE 27123
27026: GO 27028
27028: DISABLE
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
// begin enable ;
27033: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27034: LD_ADDR_VAR 0 1
27038: PUSH
27039: LD_INT 22
27041: PUSH
27042: LD_OWVAR 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 61
27053: PUSH
27054: EMPTY
27055: LIST
27056: PUSH
27057: LD_INT 33
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: PPUSH
27072: CALL_OW 69
27076: ST_TO_ADDR
// if not tmp then
27077: LD_VAR 0 1
27081: NOT
27082: IFFALSE 27086
// exit ;
27084: GO 27123
// for i in tmp do
27086: LD_ADDR_VAR 0 2
27090: PUSH
27091: LD_VAR 0 1
27095: PUSH
27096: FOR_IN
27097: IFFALSE 27121
// if IsControledBy ( i ) then
27099: LD_VAR 0 2
27103: PPUSH
27104: CALL_OW 312
27108: IFFALSE 27119
// ComUnlink ( i ) ;
27110: LD_VAR 0 2
27114: PPUSH
27115: CALL_OW 136
27119: GO 27096
27121: POP
27122: POP
// end ;
27123: PPOPN 2
27125: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27126: LD_EXP 54
27130: IFFALSE 27138
27132: PUSH
27133: LD_EXP 85
27137: AND
27138: IFFALSE 27278
27140: GO 27142
27142: DISABLE
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
// begin ToLua ( displayPowell(); ) ;
27147: LD_STRING displayPowell();
27149: PPUSH
27150: CALL_OW 559
// uc_side := 0 ;
27154: LD_ADDR_OWVAR 20
27158: PUSH
27159: LD_INT 0
27161: ST_TO_ADDR
// uc_nation := 2 ;
27162: LD_ADDR_OWVAR 21
27166: PUSH
27167: LD_INT 2
27169: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27170: LD_ADDR_OWVAR 37
27174: PUSH
27175: LD_INT 14
27177: ST_TO_ADDR
// vc_engine := engine_siberite ;
27178: LD_ADDR_OWVAR 39
27182: PUSH
27183: LD_INT 3
27185: ST_TO_ADDR
// vc_control := control_apeman ;
27186: LD_ADDR_OWVAR 38
27190: PUSH
27191: LD_INT 5
27193: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27194: LD_ADDR_OWVAR 40
27198: PUSH
27199: LD_INT 29
27201: ST_TO_ADDR
// un := CreateVehicle ;
27202: LD_ADDR_VAR 0 2
27206: PUSH
27207: CALL_OW 45
27211: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27212: LD_VAR 0 2
27216: PPUSH
27217: LD_INT 1
27219: PPUSH
27220: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27224: LD_INT 35
27226: PPUSH
27227: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27231: LD_VAR 0 2
27235: PPUSH
27236: LD_INT 22
27238: PUSH
27239: LD_OWVAR 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PPUSH
27248: CALL_OW 69
27252: PPUSH
27253: LD_VAR 0 2
27257: PPUSH
27258: CALL_OW 74
27262: PPUSH
27263: CALL_OW 115
// until IsDead ( un ) ;
27267: LD_VAR 0 2
27271: PPUSH
27272: CALL_OW 301
27276: IFFALSE 27224
// end ;
27278: PPOPN 2
27280: END
// every 0 0$1 trigger StreamModeActive and sStu do
27281: LD_EXP 54
27285: IFFALSE 27293
27287: PUSH
27288: LD_EXP 93
27292: AND
27293: IFFALSE 27309
27295: GO 27297
27297: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27298: LD_STRING displayStucuk();
27300: PPUSH
27301: CALL_OW 559
// ResetFog ;
27305: CALL_OW 335
// end ;
27309: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27310: LD_EXP 54
27314: IFFALSE 27322
27316: PUSH
27317: LD_EXP 86
27321: AND
27322: IFFALSE 27463
27324: GO 27326
27326: DISABLE
27327: LD_INT 0
27329: PPUSH
27330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: LD_INT 22
27338: PUSH
27339: LD_OWVAR 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 21
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PPUSH
27362: CALL_OW 69
27366: ST_TO_ADDR
// if not tmp then
27367: LD_VAR 0 2
27371: NOT
27372: IFFALSE 27376
// exit ;
27374: GO 27463
// un := tmp [ rand ( 1 , tmp ) ] ;
27376: LD_ADDR_VAR 0 1
27380: PUSH
27381: LD_VAR 0 2
27385: PUSH
27386: LD_INT 1
27388: PPUSH
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 12
27398: ARRAY
27399: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27400: LD_VAR 0 1
27404: PPUSH
27405: LD_INT 0
27407: PPUSH
27408: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27412: LD_VAR 0 1
27416: PPUSH
27417: LD_OWVAR 3
27421: PUSH
27422: LD_VAR 0 1
27426: DIFF
27427: PPUSH
27428: LD_VAR 0 1
27432: PPUSH
27433: CALL_OW 74
27437: PPUSH
27438: CALL_OW 115
// wait ( 0 0$20 ) ;
27442: LD_INT 700
27444: PPUSH
27445: CALL_OW 67
// SetSide ( un , your_side ) ;
27449: LD_VAR 0 1
27453: PPUSH
27454: LD_OWVAR 2
27458: PPUSH
27459: CALL_OW 235
// end ;
27463: PPOPN 2
27465: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27466: LD_EXP 54
27470: IFFALSE 27478
27472: PUSH
27473: LD_EXP 87
27477: AND
27478: IFFALSE 27584
27480: GO 27482
27482: DISABLE
27483: LD_INT 0
27485: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27486: LD_ADDR_VAR 0 1
27490: PUSH
27491: LD_INT 22
27493: PUSH
27494: LD_OWVAR 2
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 30
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 30
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PPUSH
27535: CALL_OW 69
27539: ST_TO_ADDR
// if not depot then
27540: LD_VAR 0 1
27544: NOT
27545: IFFALSE 27549
// exit ;
27547: GO 27584
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27549: LD_VAR 0 1
27553: PUSH
27554: LD_INT 1
27556: ARRAY
27557: PPUSH
27558: CALL_OW 250
27562: PPUSH
27563: LD_VAR 0 1
27567: PUSH
27568: LD_INT 1
27570: ARRAY
27571: PPUSH
27572: CALL_OW 251
27576: PPUSH
27577: LD_INT 70
27579: PPUSH
27580: CALL_OW 495
// end ;
27584: PPOPN 1
27586: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27587: LD_EXP 54
27591: IFFALSE 27599
27593: PUSH
27594: LD_EXP 88
27598: AND
27599: IFFALSE 27810
27601: GO 27603
27603: DISABLE
27604: LD_INT 0
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27611: LD_ADDR_VAR 0 5
27615: PUSH
27616: LD_INT 22
27618: PUSH
27619: LD_OWVAR 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 21
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PPUSH
27642: CALL_OW 69
27646: ST_TO_ADDR
// if not tmp then
27647: LD_VAR 0 5
27651: NOT
27652: IFFALSE 27656
// exit ;
27654: GO 27810
// for i in tmp do
27656: LD_ADDR_VAR 0 1
27660: PUSH
27661: LD_VAR 0 5
27665: PUSH
27666: FOR_IN
27667: IFFALSE 27808
// begin d := rand ( 0 , 5 ) ;
27669: LD_ADDR_VAR 0 4
27673: PUSH
27674: LD_INT 0
27676: PPUSH
27677: LD_INT 5
27679: PPUSH
27680: CALL_OW 12
27684: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27685: LD_ADDR_VAR 0 2
27689: PUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 250
27699: PPUSH
27700: LD_VAR 0 4
27704: PPUSH
27705: LD_INT 3
27707: PPUSH
27708: LD_INT 12
27710: PPUSH
27711: CALL_OW 12
27715: PPUSH
27716: CALL_OW 272
27720: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27721: LD_ADDR_VAR 0 3
27725: PUSH
27726: LD_VAR 0 1
27730: PPUSH
27731: CALL_OW 251
27735: PPUSH
27736: LD_VAR 0 4
27740: PPUSH
27741: LD_INT 3
27743: PPUSH
27744: LD_INT 12
27746: PPUSH
27747: CALL_OW 12
27751: PPUSH
27752: CALL_OW 273
27756: ST_TO_ADDR
// if ValidHex ( x , y ) then
27757: LD_VAR 0 2
27761: PPUSH
27762: LD_VAR 0 3
27766: PPUSH
27767: CALL_OW 488
27771: IFFALSE 27806
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_VAR 0 2
27782: PPUSH
27783: LD_VAR 0 3
27787: PPUSH
27788: LD_INT 3
27790: PPUSH
27791: LD_INT 6
27793: PPUSH
27794: CALL_OW 12
27798: PPUSH
27799: LD_INT 1
27801: PPUSH
27802: CALL_OW 483
// end ;
27806: GO 27666
27808: POP
27809: POP
// end ;
27810: PPOPN 5
27812: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27813: LD_EXP 54
27817: IFFALSE 27825
27819: PUSH
27820: LD_EXP 89
27824: AND
27825: IFFALSE 27919
27827: GO 27829
27829: DISABLE
27830: LD_INT 0
27832: PPUSH
27833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27834: LD_ADDR_VAR 0 2
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_OWVAR 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 32
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 21
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: PPUSH
27876: CALL_OW 69
27880: ST_TO_ADDR
// if not tmp then
27881: LD_VAR 0 2
27885: NOT
27886: IFFALSE 27890
// exit ;
27888: GO 27919
// for i in tmp do
27890: LD_ADDR_VAR 0 1
27894: PUSH
27895: LD_VAR 0 2
27899: PUSH
27900: FOR_IN
27901: IFFALSE 27917
// SetFuel ( i , 0 ) ;
27903: LD_VAR 0 1
27907: PPUSH
27908: LD_INT 0
27910: PPUSH
27911: CALL_OW 240
27915: GO 27900
27917: POP
27918: POP
// end ;
27919: PPOPN 2
27921: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27922: LD_EXP 54
27926: IFFALSE 27934
27928: PUSH
27929: LD_EXP 90
27933: AND
27934: IFFALSE 28000
27936: GO 27938
27938: DISABLE
27939: LD_INT 0
27941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27942: LD_ADDR_VAR 0 1
27946: PUSH
27947: LD_INT 22
27949: PUSH
27950: LD_OWVAR 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 30
27961: PUSH
27962: LD_INT 29
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PPUSH
27973: CALL_OW 69
27977: ST_TO_ADDR
// if not tmp then
27978: LD_VAR 0 1
27982: NOT
27983: IFFALSE 27987
// exit ;
27985: GO 28000
// DestroyUnit ( tmp [ 1 ] ) ;
27987: LD_VAR 0 1
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: PPUSH
27996: CALL_OW 65
// end ;
28000: PPOPN 1
28002: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28003: LD_EXP 54
28007: IFFALSE 28015
28009: PUSH
28010: LD_EXP 92
28014: AND
28015: IFFALSE 28144
28017: GO 28019
28019: DISABLE
28020: LD_INT 0
28022: PPUSH
// begin uc_side := 0 ;
28023: LD_ADDR_OWVAR 20
28027: PUSH
28028: LD_INT 0
28030: ST_TO_ADDR
// uc_nation := nation_arabian ;
28031: LD_ADDR_OWVAR 21
28035: PUSH
28036: LD_INT 2
28038: ST_TO_ADDR
// hc_gallery :=  ;
28039: LD_ADDR_OWVAR 33
28043: PUSH
28044: LD_STRING 
28046: ST_TO_ADDR
// hc_name :=  ;
28047: LD_ADDR_OWVAR 26
28051: PUSH
28052: LD_STRING 
28054: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28055: LD_INT 1
28057: PPUSH
28058: LD_INT 11
28060: PPUSH
28061: LD_INT 10
28063: PPUSH
28064: CALL_OW 380
// un := CreateHuman ;
28068: LD_ADDR_VAR 0 1
28072: PUSH
28073: CALL_OW 44
28077: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28078: LD_VAR 0 1
28082: PPUSH
28083: LD_INT 1
28085: PPUSH
28086: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28090: LD_INT 35
28092: PPUSH
28093: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28097: LD_VAR 0 1
28101: PPUSH
28102: LD_INT 22
28104: PUSH
28105: LD_OWVAR 2
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PPUSH
28114: CALL_OW 69
28118: PPUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 74
28128: PPUSH
28129: CALL_OW 115
// until IsDead ( un ) ;
28133: LD_VAR 0 1
28137: PPUSH
28138: CALL_OW 301
28142: IFFALSE 28090
// end ;
28144: PPOPN 1
28146: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28147: LD_EXP 54
28151: IFFALSE 28159
28153: PUSH
28154: LD_EXP 94
28158: AND
28159: IFFALSE 28171
28161: GO 28163
28163: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28164: LD_STRING earthquake(getX(game), 0, 32)
28166: PPUSH
28167: CALL_OW 559
28171: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28172: LD_EXP 54
28176: IFFALSE 28184
28178: PUSH
28179: LD_EXP 95
28183: AND
28184: IFFALSE 28275
28186: GO 28188
28188: DISABLE
28189: LD_INT 0
28191: PPUSH
// begin enable ;
28192: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28193: LD_ADDR_VAR 0 1
28197: PUSH
28198: LD_INT 22
28200: PUSH
28201: LD_OWVAR 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 21
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 33
28222: PUSH
28223: LD_INT 3
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: PPUSH
28235: CALL_OW 69
28239: ST_TO_ADDR
// if not tmp then
28240: LD_VAR 0 1
28244: NOT
28245: IFFALSE 28249
// exit ;
28247: GO 28275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28249: LD_VAR 0 1
28253: PUSH
28254: LD_INT 1
28256: PPUSH
28257: LD_VAR 0 1
28261: PPUSH
28262: CALL_OW 12
28266: ARRAY
28267: PPUSH
28268: LD_INT 1
28270: PPUSH
28271: CALL_OW 234
// end ;
28275: PPOPN 1
28277: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28278: LD_EXP 54
28282: IFFALSE 28290
28284: PUSH
28285: LD_EXP 96
28289: AND
28290: IFFALSE 28431
28292: GO 28294
28294: DISABLE
28295: LD_INT 0
28297: PPUSH
28298: PPUSH
28299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 22
28307: PUSH
28308: LD_OWVAR 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 25
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 3
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28431
// un := tmp [ rand ( 1 , tmp ) ] ;
28345: LD_ADDR_VAR 0 2
28349: PUSH
28350: LD_VAR 0 3
28354: PUSH
28355: LD_INT 1
28357: PPUSH
28358: LD_VAR 0 3
28362: PPUSH
28363: CALL_OW 12
28367: ARRAY
28368: ST_TO_ADDR
// if Crawls ( un ) then
28369: LD_VAR 0 2
28373: PPUSH
28374: CALL_OW 318
28378: IFFALSE 28389
// ComWalk ( un ) ;
28380: LD_VAR 0 2
28384: PPUSH
28385: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_INT 9
28396: PPUSH
28397: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28401: LD_INT 28
28403: PPUSH
28404: LD_OWVAR 2
28408: PPUSH
28409: LD_INT 2
28411: PPUSH
28412: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28416: LD_INT 29
28418: PPUSH
28419: LD_OWVAR 2
28423: PPUSH
28424: LD_INT 2
28426: PPUSH
28427: CALL_OW 322
// end ;
28431: PPOPN 3
28433: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28434: LD_EXP 54
28438: IFFALSE 28446
28440: PUSH
28441: LD_EXP 97
28445: AND
28446: IFFALSE 28557
28448: GO 28450
28450: DISABLE
28451: LD_INT 0
28453: PPUSH
28454: PPUSH
28455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: LD_INT 22
28463: PUSH
28464: LD_OWVAR 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 25
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PPUSH
28487: CALL_OW 69
28491: ST_TO_ADDR
// if not tmp then
28492: LD_VAR 0 3
28496: NOT
28497: IFFALSE 28501
// exit ;
28499: GO 28557
// un := tmp [ rand ( 1 , tmp ) ] ;
28501: LD_ADDR_VAR 0 2
28505: PUSH
28506: LD_VAR 0 3
28510: PUSH
28511: LD_INT 1
28513: PPUSH
28514: LD_VAR 0 3
28518: PPUSH
28519: CALL_OW 12
28523: ARRAY
28524: ST_TO_ADDR
// if Crawls ( un ) then
28525: LD_VAR 0 2
28529: PPUSH
28530: CALL_OW 318
28534: IFFALSE 28545
// ComWalk ( un ) ;
28536: LD_VAR 0 2
28540: PPUSH
28541: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28545: LD_VAR 0 2
28549: PPUSH
28550: LD_INT 8
28552: PPUSH
28553: CALL_OW 336
// end ;
28557: PPOPN 3
28559: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28560: LD_EXP 54
28564: IFFALSE 28572
28566: PUSH
28567: LD_EXP 98
28571: AND
28572: IFFALSE 28716
28574: GO 28576
28576: DISABLE
28577: LD_INT 0
28579: PPUSH
28580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28581: LD_ADDR_VAR 0 2
28585: PUSH
28586: LD_INT 22
28588: PUSH
28589: LD_OWVAR 2
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 21
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 34
28613: PUSH
28614: LD_INT 12
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 34
28623: PUSH
28624: LD_INT 51
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 34
28633: PUSH
28634: LD_INT 32
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: ST_TO_ADDR
// if not tmp then
28657: LD_VAR 0 2
28661: NOT
28662: IFFALSE 28666
// exit ;
28664: GO 28716
// for i in tmp do
28666: LD_ADDR_VAR 0 1
28670: PUSH
28671: LD_VAR 0 2
28675: PUSH
28676: FOR_IN
28677: IFFALSE 28714
// if GetCargo ( i , mat_artifact ) = 0 then
28679: LD_VAR 0 1
28683: PPUSH
28684: LD_INT 4
28686: PPUSH
28687: CALL_OW 289
28691: PUSH
28692: LD_INT 0
28694: EQUAL
28695: IFFALSE 28712
// SetCargo ( i , mat_siberit , 100 ) ;
28697: LD_VAR 0 1
28701: PPUSH
28702: LD_INT 3
28704: PPUSH
28705: LD_INT 100
28707: PPUSH
28708: CALL_OW 290
28712: GO 28676
28714: POP
28715: POP
// end ;
28716: PPOPN 2
28718: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28719: LD_EXP 54
28723: IFFALSE 28731
28725: PUSH
28726: LD_EXP 99
28730: AND
28731: IFFALSE 28914
28733: GO 28735
28735: DISABLE
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28740: LD_ADDR_VAR 0 2
28744: PUSH
28745: LD_INT 22
28747: PUSH
28748: LD_OWVAR 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PPUSH
28757: CALL_OW 69
28761: ST_TO_ADDR
// if not tmp then
28762: LD_VAR 0 2
28766: NOT
28767: IFFALSE 28771
// exit ;
28769: GO 28914
// for i := 1 to 2 do
28771: LD_ADDR_VAR 0 1
28775: PUSH
28776: DOUBLE
28777: LD_INT 1
28779: DEC
28780: ST_TO_ADDR
28781: LD_INT 2
28783: PUSH
28784: FOR_TO
28785: IFFALSE 28912
// begin uc_side := your_side ;
28787: LD_ADDR_OWVAR 20
28791: PUSH
28792: LD_OWVAR 2
28796: ST_TO_ADDR
// uc_nation := nation_american ;
28797: LD_ADDR_OWVAR 21
28801: PUSH
28802: LD_INT 1
28804: ST_TO_ADDR
// vc_chassis := us_morphling ;
28805: LD_ADDR_OWVAR 37
28809: PUSH
28810: LD_INT 5
28812: ST_TO_ADDR
// vc_engine := engine_siberite ;
28813: LD_ADDR_OWVAR 39
28817: PUSH
28818: LD_INT 3
28820: ST_TO_ADDR
// vc_control := control_computer ;
28821: LD_ADDR_OWVAR 38
28825: PUSH
28826: LD_INT 3
28828: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28829: LD_ADDR_OWVAR 40
28833: PUSH
28834: LD_INT 10
28836: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28837: LD_VAR 0 2
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PPUSH
28846: CALL_OW 310
28850: NOT
28851: IFFALSE 28898
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28853: CALL_OW 45
28857: PPUSH
28858: LD_VAR 0 2
28862: PUSH
28863: LD_INT 1
28865: ARRAY
28866: PPUSH
28867: CALL_OW 250
28871: PPUSH
28872: LD_VAR 0 2
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: CALL_OW 251
28885: PPUSH
28886: LD_INT 12
28888: PPUSH
28889: LD_INT 1
28891: PPUSH
28892: CALL_OW 50
28896: GO 28910
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28898: CALL_OW 45
28902: PPUSH
28903: LD_INT 1
28905: PPUSH
28906: CALL_OW 51
// end ;
28910: GO 28784
28912: POP
28913: POP
// end ;
28914: PPOPN 2
28916: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28917: LD_EXP 54
28921: IFFALSE 28929
28923: PUSH
28924: LD_EXP 100
28928: AND
28929: IFFALSE 29151
28931: GO 28933
28933: DISABLE
28934: LD_INT 0
28936: PPUSH
28937: PPUSH
28938: PPUSH
28939: PPUSH
28940: PPUSH
28941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28942: LD_ADDR_VAR 0 6
28946: PUSH
28947: LD_INT 22
28949: PUSH
28950: LD_OWVAR 2
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 21
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: LD_INT 23
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 69
28995: ST_TO_ADDR
// if not tmp then
28996: LD_VAR 0 6
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29151
// s1 := rand ( 1 , 4 ) ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_INT 1
29012: PPUSH
29013: LD_INT 4
29015: PPUSH
29016: CALL_OW 12
29020: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29021: LD_ADDR_VAR 0 4
29025: PUSH
29026: LD_VAR 0 6
29030: PUSH
29031: LD_INT 1
29033: ARRAY
29034: PPUSH
29035: LD_VAR 0 2
29039: PPUSH
29040: CALL_OW 259
29044: ST_TO_ADDR
// if s1 = 1 then
29045: LD_VAR 0 2
29049: PUSH
29050: LD_INT 1
29052: EQUAL
29053: IFFALSE 29073
// s2 := rand ( 2 , 4 ) else
29055: LD_ADDR_VAR 0 3
29059: PUSH
29060: LD_INT 2
29062: PPUSH
29063: LD_INT 4
29065: PPUSH
29066: CALL_OW 12
29070: ST_TO_ADDR
29071: GO 29081
// s2 := 1 ;
29073: LD_ADDR_VAR 0 3
29077: PUSH
29078: LD_INT 1
29080: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29081: LD_ADDR_VAR 0 5
29085: PUSH
29086: LD_VAR 0 6
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: LD_VAR 0 3
29099: PPUSH
29100: CALL_OW 259
29104: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29105: LD_VAR 0 6
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: PPUSH
29114: LD_VAR 0 2
29118: PPUSH
29119: LD_VAR 0 5
29123: PPUSH
29124: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29128: LD_VAR 0 6
29132: PUSH
29133: LD_INT 1
29135: ARRAY
29136: PPUSH
29137: LD_VAR 0 3
29141: PPUSH
29142: LD_VAR 0 4
29146: PPUSH
29147: CALL_OW 237
// end ;
29151: PPOPN 6
29153: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29154: LD_EXP 54
29158: IFFALSE 29166
29160: PUSH
29161: LD_EXP 101
29165: AND
29166: IFFALSE 29245
29168: GO 29170
29170: DISABLE
29171: LD_INT 0
29173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29174: LD_ADDR_VAR 0 1
29178: PUSH
29179: LD_INT 22
29181: PUSH
29182: LD_OWVAR 2
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 30
29193: PUSH
29194: LD_INT 3
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 69
29209: ST_TO_ADDR
// if not tmp then
29210: LD_VAR 0 1
29214: NOT
29215: IFFALSE 29219
// exit ;
29217: GO 29245
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29219: LD_VAR 0 1
29223: PUSH
29224: LD_INT 1
29226: PPUSH
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL_OW 12
29236: ARRAY
29237: PPUSH
29238: LD_INT 1
29240: PPUSH
29241: CALL_OW 234
// end ;
29245: PPOPN 1
29247: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29248: LD_EXP 54
29252: IFFALSE 29260
29254: PUSH
29255: LD_EXP 102
29259: AND
29260: IFFALSE 29372
29262: GO 29264
29264: DISABLE
29265: LD_INT 0
29267: PPUSH
29268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29269: LD_ADDR_VAR 0 2
29273: PUSH
29274: LD_INT 22
29276: PUSH
29277: LD_OWVAR 2
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: LD_INT 30
29291: PUSH
29292: LD_INT 27
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 30
29301: PUSH
29302: LD_INT 26
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 30
29311: PUSH
29312: LD_INT 28
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PPUSH
29329: CALL_OW 69
29333: ST_TO_ADDR
// if not tmp then
29334: LD_VAR 0 2
29338: NOT
29339: IFFALSE 29343
// exit ;
29341: GO 29372
// for i in tmp do
29343: LD_ADDR_VAR 0 1
29347: PUSH
29348: LD_VAR 0 2
29352: PUSH
29353: FOR_IN
29354: IFFALSE 29370
// SetLives ( i , 1 ) ;
29356: LD_VAR 0 1
29360: PPUSH
29361: LD_INT 1
29363: PPUSH
29364: CALL_OW 234
29368: GO 29353
29370: POP
29371: POP
// end ;
29372: PPOPN 2
29374: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29375: LD_EXP 54
29379: IFFALSE 29387
29381: PUSH
29382: LD_EXP 103
29386: AND
29387: IFFALSE 29674
29389: GO 29391
29391: DISABLE
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
29396: PPUSH
// begin i := rand ( 1 , 7 ) ;
29397: LD_ADDR_VAR 0 1
29401: PUSH
29402: LD_INT 1
29404: PPUSH
29405: LD_INT 7
29407: PPUSH
29408: CALL_OW 12
29412: ST_TO_ADDR
// case i of 1 :
29413: LD_VAR 0 1
29417: PUSH
29418: LD_INT 1
29420: DOUBLE
29421: EQUAL
29422: IFTRUE 29426
29424: GO 29436
29426: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29427: LD_STRING earthquake(getX(game), 0, 32)
29429: PPUSH
29430: CALL_OW 559
29434: GO 29674
29436: LD_INT 2
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29458
29444: POP
// begin ToLua ( displayStucuk(); ) ;
29445: LD_STRING displayStucuk();
29447: PPUSH
29448: CALL_OW 559
// ResetFog ;
29452: CALL_OW 335
// end ; 3 :
29456: GO 29674
29458: LD_INT 3
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29570
29466: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29467: LD_ADDR_VAR 0 2
29471: PUSH
29472: LD_INT 22
29474: PUSH
29475: LD_OWVAR 2
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 25
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PPUSH
29498: CALL_OW 69
29502: ST_TO_ADDR
// if not tmp then
29503: LD_VAR 0 2
29507: NOT
29508: IFFALSE 29512
// exit ;
29510: GO 29674
// un := tmp [ rand ( 1 , tmp ) ] ;
29512: LD_ADDR_VAR 0 3
29516: PUSH
29517: LD_VAR 0 2
29521: PUSH
29522: LD_INT 1
29524: PPUSH
29525: LD_VAR 0 2
29529: PPUSH
29530: CALL_OW 12
29534: ARRAY
29535: ST_TO_ADDR
// if Crawls ( un ) then
29536: LD_VAR 0 3
29540: PPUSH
29541: CALL_OW 318
29545: IFFALSE 29556
// ComWalk ( un ) ;
29547: LD_VAR 0 3
29551: PPUSH
29552: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29556: LD_VAR 0 3
29560: PPUSH
29561: LD_INT 8
29563: PPUSH
29564: CALL_OW 336
// end ; 4 :
29568: GO 29674
29570: LD_INT 4
29572: DOUBLE
29573: EQUAL
29574: IFTRUE 29578
29576: GO 29652
29578: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29579: LD_ADDR_VAR 0 2
29583: PUSH
29584: LD_INT 22
29586: PUSH
29587: LD_OWVAR 2
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 30
29598: PUSH
29599: LD_INT 29
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PPUSH
29610: CALL_OW 69
29614: ST_TO_ADDR
// if not tmp then
29615: LD_VAR 0 2
29619: NOT
29620: IFFALSE 29624
// exit ;
29622: GO 29674
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29624: LD_VAR 0 2
29628: PUSH
29629: LD_INT 1
29631: ARRAY
29632: PPUSH
29633: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29637: LD_VAR 0 2
29641: PUSH
29642: LD_INT 1
29644: ARRAY
29645: PPUSH
29646: CALL_OW 65
// end ; 5 .. 7 :
29650: GO 29674
29652: LD_INT 5
29654: DOUBLE
29655: GREATEREQUAL
29656: IFFALSE 29664
29658: LD_INT 7
29660: DOUBLE
29661: LESSEQUAL
29662: IFTRUE 29666
29664: GO 29673
29666: POP
// StreamSibBomb ; end ;
29667: CALL 25855 0 0
29671: GO 29674
29673: POP
// end ;
29674: PPOPN 3
29676: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29677: LD_EXP 54
29681: IFFALSE 29689
29683: PUSH
29684: LD_EXP 104
29688: AND
29689: IFFALSE 29845
29691: GO 29693
29693: DISABLE
29694: LD_INT 0
29696: PPUSH
29697: PPUSH
29698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29699: LD_ADDR_VAR 0 2
29703: PUSH
29704: LD_INT 81
29706: PUSH
29707: LD_OWVAR 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: LD_INT 21
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 21
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PPUSH
29748: CALL_OW 69
29752: ST_TO_ADDR
// if not tmp then
29753: LD_VAR 0 2
29757: NOT
29758: IFFALSE 29762
// exit ;
29760: GO 29845
// p := 0 ;
29762: LD_ADDR_VAR 0 3
29766: PUSH
29767: LD_INT 0
29769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29770: LD_INT 35
29772: PPUSH
29773: CALL_OW 67
// p := p + 1 ;
29777: LD_ADDR_VAR 0 3
29781: PUSH
29782: LD_VAR 0 3
29786: PUSH
29787: LD_INT 1
29789: PLUS
29790: ST_TO_ADDR
// for i in tmp do
29791: LD_ADDR_VAR 0 1
29795: PUSH
29796: LD_VAR 0 2
29800: PUSH
29801: FOR_IN
29802: IFFALSE 29833
// if GetLives ( i ) < 1000 then
29804: LD_VAR 0 1
29808: PPUSH
29809: CALL_OW 256
29813: PUSH
29814: LD_INT 1000
29816: LESS
29817: IFFALSE 29831
// SetLives ( i , 1000 ) ;
29819: LD_VAR 0 1
29823: PPUSH
29824: LD_INT 1000
29826: PPUSH
29827: CALL_OW 234
29831: GO 29801
29833: POP
29834: POP
// until p > 20 ;
29835: LD_VAR 0 3
29839: PUSH
29840: LD_INT 20
29842: GREATER
29843: IFFALSE 29770
// end ;
29845: PPOPN 3
29847: END
// every 0 0$1 trigger StreamModeActive and sTime do
29848: LD_EXP 54
29852: IFFALSE 29860
29854: PUSH
29855: LD_EXP 105
29859: AND
29860: IFFALSE 29895
29862: GO 29864
29864: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29865: LD_INT 28
29867: PPUSH
29868: LD_OWVAR 2
29872: PPUSH
29873: LD_INT 2
29875: PPUSH
29876: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29880: LD_INT 30
29882: PPUSH
29883: LD_OWVAR 2
29887: PPUSH
29888: LD_INT 2
29890: PPUSH
29891: CALL_OW 322
// end ;
29895: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29896: LD_EXP 54
29900: IFFALSE 29908
29902: PUSH
29903: LD_EXP 106
29907: AND
29908: IFFALSE 30029
29910: GO 29912
29912: DISABLE
29913: LD_INT 0
29915: PPUSH
29916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29917: LD_ADDR_VAR 0 2
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_OWVAR 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 21
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: LD_INT 23
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: PPUSH
29966: CALL_OW 69
29970: ST_TO_ADDR
// if not tmp then
29971: LD_VAR 0 2
29975: NOT
29976: IFFALSE 29980
// exit ;
29978: GO 30029
// for i in tmp do
29980: LD_ADDR_VAR 0 1
29984: PUSH
29985: LD_VAR 0 2
29989: PUSH
29990: FOR_IN
29991: IFFALSE 30027
// begin if Crawls ( i ) then
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL_OW 318
30002: IFFALSE 30013
// ComWalk ( i ) ;
30004: LD_VAR 0 1
30008: PPUSH
30009: CALL_OW 138
// SetClass ( i , 2 ) ;
30013: LD_VAR 0 1
30017: PPUSH
30018: LD_INT 2
30020: PPUSH
30021: CALL_OW 336
// end ;
30025: GO 29990
30027: POP
30028: POP
// end ;
30029: PPOPN 2
30031: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30032: LD_EXP 54
30036: IFFALSE 30044
30038: PUSH
30039: LD_EXP 107
30043: AND
30044: IFFALSE 30334
30046: GO 30048
30048: DISABLE
30049: LD_INT 0
30051: PPUSH
30052: PPUSH
30053: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30054: LD_OWVAR 2
30058: PPUSH
30059: LD_INT 9
30061: PPUSH
30062: LD_INT 1
30064: PPUSH
30065: LD_INT 1
30067: PPUSH
30068: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30072: LD_INT 9
30074: PPUSH
30075: LD_OWVAR 2
30079: PPUSH
30080: CALL_OW 343
// uc_side := 9 ;
30084: LD_ADDR_OWVAR 20
30088: PUSH
30089: LD_INT 9
30091: ST_TO_ADDR
// uc_nation := 2 ;
30092: LD_ADDR_OWVAR 21
30096: PUSH
30097: LD_INT 2
30099: ST_TO_ADDR
// hc_name := Dark Warrior ;
30100: LD_ADDR_OWVAR 26
30104: PUSH
30105: LD_STRING Dark Warrior
30107: ST_TO_ADDR
// hc_gallery :=  ;
30108: LD_ADDR_OWVAR 33
30112: PUSH
30113: LD_STRING 
30115: ST_TO_ADDR
// hc_noskilllimit := true ;
30116: LD_ADDR_OWVAR 76
30120: PUSH
30121: LD_INT 1
30123: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30124: LD_ADDR_OWVAR 31
30128: PUSH
30129: LD_INT 30
30131: PUSH
30132: LD_INT 30
30134: PUSH
30135: LD_INT 30
30137: PUSH
30138: LD_INT 30
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: ST_TO_ADDR
// un := CreateHuman ;
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: CALL_OW 44
30156: ST_TO_ADDR
// hc_noskilllimit := false ;
30157: LD_ADDR_OWVAR 76
30161: PUSH
30162: LD_INT 0
30164: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30165: LD_VAR 0 3
30169: PPUSH
30170: LD_INT 1
30172: PPUSH
30173: CALL_OW 51
// ToLua ( playRanger() ) ;
30177: LD_STRING playRanger()
30179: PPUSH
30180: CALL_OW 559
// p := 0 ;
30184: LD_ADDR_VAR 0 2
30188: PUSH
30189: LD_INT 0
30191: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30192: LD_INT 35
30194: PPUSH
30195: CALL_OW 67
// p := p + 1 ;
30199: LD_ADDR_VAR 0 2
30203: PUSH
30204: LD_VAR 0 2
30208: PUSH
30209: LD_INT 1
30211: PLUS
30212: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30213: LD_VAR 0 3
30217: PPUSH
30218: CALL_OW 256
30222: PUSH
30223: LD_INT 1000
30225: LESS
30226: IFFALSE 30240
// SetLives ( un , 1000 ) ;
30228: LD_VAR 0 3
30232: PPUSH
30233: LD_INT 1000
30235: PPUSH
30236: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30240: LD_VAR 0 3
30244: PPUSH
30245: LD_INT 81
30247: PUSH
30248: LD_OWVAR 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 91
30259: PUSH
30260: LD_VAR 0 3
30264: PUSH
30265: LD_INT 30
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PPUSH
30277: CALL_OW 69
30281: PPUSH
30282: LD_VAR 0 3
30286: PPUSH
30287: CALL_OW 74
30291: PPUSH
30292: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30296: LD_VAR 0 2
30300: PUSH
30301: LD_INT 80
30303: GREATER
30304: IFTRUE 30317
30306: PUSH
30307: LD_VAR 0 3
30311: PPUSH
30312: CALL_OW 301
30316: OR
30317: IFFALSE 30192
// if un then
30319: LD_VAR 0 3
30323: IFFALSE 30334
// RemoveUnit ( un ) ;
30325: LD_VAR 0 3
30329: PPUSH
30330: CALL_OW 64
// end ;
30334: PPOPN 3
30336: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30337: LD_EXP 108
30341: IFFALSE 30457
30343: GO 30345
30345: DISABLE
30346: LD_INT 0
30348: PPUSH
30349: PPUSH
30350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30351: LD_ADDR_VAR 0 2
30355: PUSH
30356: LD_INT 81
30358: PUSH
30359: LD_OWVAR 2
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 21
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PPUSH
30382: CALL_OW 69
30386: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30387: LD_STRING playComputer()
30389: PPUSH
30390: CALL_OW 559
// if not tmp then
30394: LD_VAR 0 2
30398: NOT
30399: IFFALSE 30403
// exit ;
30401: GO 30457
// for i in tmp do
30403: LD_ADDR_VAR 0 1
30407: PUSH
30408: LD_VAR 0 2
30412: PUSH
30413: FOR_IN
30414: IFFALSE 30455
// for j := 1 to 4 do
30416: LD_ADDR_VAR 0 3
30420: PUSH
30421: DOUBLE
30422: LD_INT 1
30424: DEC
30425: ST_TO_ADDR
30426: LD_INT 4
30428: PUSH
30429: FOR_TO
30430: IFFALSE 30451
// SetSkill ( i , j , 10 ) ;
30432: LD_VAR 0 1
30436: PPUSH
30437: LD_VAR 0 3
30441: PPUSH
30442: LD_INT 10
30444: PPUSH
30445: CALL_OW 237
30449: GO 30429
30451: POP
30452: POP
30453: GO 30413
30455: POP
30456: POP
// end ;
30457: PPOPN 3
30459: END
// every 0 0$1 trigger s30 do var i , tmp ;
30460: LD_EXP 109
30464: IFFALSE 30533
30466: GO 30468
30468: DISABLE
30469: LD_INT 0
30471: PPUSH
30472: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30473: LD_ADDR_VAR 0 2
30477: PUSH
30478: LD_INT 22
30480: PUSH
30481: LD_OWVAR 2
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PPUSH
30490: CALL_OW 69
30494: ST_TO_ADDR
// if not tmp then
30495: LD_VAR 0 2
30499: NOT
30500: IFFALSE 30504
// exit ;
30502: GO 30533
// for i in tmp do
30504: LD_ADDR_VAR 0 1
30508: PUSH
30509: LD_VAR 0 2
30513: PUSH
30514: FOR_IN
30515: IFFALSE 30531
// SetLives ( i , 300 ) ;
30517: LD_VAR 0 1
30521: PPUSH
30522: LD_INT 300
30524: PPUSH
30525: CALL_OW 234
30529: GO 30514
30531: POP
30532: POP
// end ;
30533: PPOPN 2
30535: END
// every 0 0$1 trigger s60 do var i , tmp ;
30536: LD_EXP 110
30540: IFFALSE 30609
30542: GO 30544
30544: DISABLE
30545: LD_INT 0
30547: PPUSH
30548: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30549: LD_ADDR_VAR 0 2
30553: PUSH
30554: LD_INT 22
30556: PUSH
30557: LD_OWVAR 2
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PPUSH
30566: CALL_OW 69
30570: ST_TO_ADDR
// if not tmp then
30571: LD_VAR 0 2
30575: NOT
30576: IFFALSE 30580
// exit ;
30578: GO 30609
// for i in tmp do
30580: LD_ADDR_VAR 0 1
30584: PUSH
30585: LD_VAR 0 2
30589: PUSH
30590: FOR_IN
30591: IFFALSE 30607
// SetLives ( i , 600 ) ;
30593: LD_VAR 0 1
30597: PPUSH
30598: LD_INT 600
30600: PPUSH
30601: CALL_OW 234
30605: GO 30590
30607: POP
30608: POP
// end ;
30609: PPOPN 2
30611: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30612: LD_INT 0
30614: PPUSH
// case cmd of 301 :
30615: LD_VAR 0 1
30619: PUSH
30620: LD_INT 301
30622: DOUBLE
30623: EQUAL
30624: IFTRUE 30628
30626: GO 30660
30628: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30629: LD_VAR 0 6
30633: PPUSH
30634: LD_VAR 0 7
30638: PPUSH
30639: LD_VAR 0 8
30643: PPUSH
30644: LD_VAR 0 4
30648: PPUSH
30649: LD_VAR 0 5
30653: PPUSH
30654: CALL 31873 0 5
30658: GO 30781
30660: LD_INT 302
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30705
30668: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30669: LD_VAR 0 6
30673: PPUSH
30674: LD_VAR 0 7
30678: PPUSH
30679: LD_VAR 0 8
30683: PPUSH
30684: LD_VAR 0 9
30688: PPUSH
30689: LD_VAR 0 4
30693: PPUSH
30694: LD_VAR 0 5
30698: PPUSH
30699: CALL 31964 0 6
30703: GO 30781
30705: LD_INT 303
30707: DOUBLE
30708: EQUAL
30709: IFTRUE 30713
30711: GO 30750
30713: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30714: LD_VAR 0 6
30718: PPUSH
30719: LD_VAR 0 7
30723: PPUSH
30724: LD_VAR 0 8
30728: PPUSH
30729: LD_VAR 0 9
30733: PPUSH
30734: LD_VAR 0 4
30738: PPUSH
30739: LD_VAR 0 5
30743: PPUSH
30744: CALL 30786 0 6
30748: GO 30781
30750: LD_INT 304
30752: DOUBLE
30753: EQUAL
30754: IFTRUE 30758
30756: GO 30780
30758: POP
// hHackTeleport ( unit , x , y ) ; end ;
30759: LD_VAR 0 2
30763: PPUSH
30764: LD_VAR 0 4
30768: PPUSH
30769: LD_VAR 0 5
30773: PPUSH
30774: CALL 32557 0 3
30778: GO 30781
30780: POP
// end ;
30781: LD_VAR 0 12
30785: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30786: LD_INT 0
30788: PPUSH
30789: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30790: LD_VAR 0 1
30794: PUSH
30795: LD_INT 1
30797: LESS
30798: IFTRUE 30810
30800: PUSH
30801: LD_VAR 0 1
30805: PUSH
30806: LD_INT 3
30808: GREATER
30809: OR
30810: IFTRUE 30828
30812: PUSH
30813: LD_VAR 0 5
30817: PPUSH
30818: LD_VAR 0 6
30822: PPUSH
30823: CALL_OW 428
30827: OR
30828: IFFALSE 30832
// exit ;
30830: GO 31560
// uc_side := your_side ;
30832: LD_ADDR_OWVAR 20
30836: PUSH
30837: LD_OWVAR 2
30841: ST_TO_ADDR
// uc_nation := nation ;
30842: LD_ADDR_OWVAR 21
30846: PUSH
30847: LD_VAR 0 1
30851: ST_TO_ADDR
// bc_level = 1 ;
30852: LD_ADDR_OWVAR 43
30856: PUSH
30857: LD_INT 1
30859: ST_TO_ADDR
// case btype of 1 :
30860: LD_VAR 0 2
30864: PUSH
30865: LD_INT 1
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 30884
30873: POP
// bc_type := b_depot ; 2 :
30874: LD_ADDR_OWVAR 42
30878: PUSH
30879: LD_INT 0
30881: ST_TO_ADDR
30882: GO 31504
30884: LD_INT 2
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30903
30892: POP
// bc_type := b_warehouse ; 3 :
30893: LD_ADDR_OWVAR 42
30897: PUSH
30898: LD_INT 1
30900: ST_TO_ADDR
30901: GO 31504
30903: LD_INT 3
30905: DOUBLE
30906: EQUAL
30907: IFTRUE 30911
30909: GO 30922
30911: POP
// bc_type := b_lab ; 4 .. 9 :
30912: LD_ADDR_OWVAR 42
30916: PUSH
30917: LD_INT 6
30919: ST_TO_ADDR
30920: GO 31504
30922: LD_INT 4
30924: DOUBLE
30925: GREATEREQUAL
30926: IFFALSE 30934
30928: LD_INT 9
30930: DOUBLE
30931: LESSEQUAL
30932: IFTRUE 30936
30934: GO 30996
30936: POP
// begin bc_type := b_lab_half ;
30937: LD_ADDR_OWVAR 42
30941: PUSH
30942: LD_INT 7
30944: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30945: LD_ADDR_OWVAR 44
30949: PUSH
30950: LD_INT 10
30952: PUSH
30953: LD_INT 11
30955: PUSH
30956: LD_INT 12
30958: PUSH
30959: LD_INT 15
30961: PUSH
30962: LD_INT 14
30964: PUSH
30965: LD_INT 13
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: PUSH
30976: LD_VAR 0 2
30980: PUSH
30981: LD_INT 3
30983: MINUS
30984: ARRAY
30985: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30986: LD_ADDR_OWVAR 45
30990: PUSH
30991: LD_INT 9
30993: ST_TO_ADDR
// end ; 10 .. 13 :
30994: GO 31504
30996: LD_INT 10
30998: DOUBLE
30999: GREATEREQUAL
31000: IFFALSE 31008
31002: LD_INT 13
31004: DOUBLE
31005: LESSEQUAL
31006: IFTRUE 31010
31008: GO 31087
31010: POP
// begin bc_type := b_lab_full ;
31011: LD_ADDR_OWVAR 42
31015: PUSH
31016: LD_INT 8
31018: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31019: LD_ADDR_OWVAR 44
31023: PUSH
31024: LD_INT 10
31026: PUSH
31027: LD_INT 12
31029: PUSH
31030: LD_INT 14
31032: PUSH
31033: LD_INT 13
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: PUSH
31042: LD_VAR 0 2
31046: PUSH
31047: LD_INT 9
31049: MINUS
31050: ARRAY
31051: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31052: LD_ADDR_OWVAR 45
31056: PUSH
31057: LD_INT 11
31059: PUSH
31060: LD_INT 15
31062: PUSH
31063: LD_INT 12
31065: PUSH
31066: LD_INT 15
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: PUSH
31075: LD_VAR 0 2
31079: PUSH
31080: LD_INT 9
31082: MINUS
31083: ARRAY
31084: ST_TO_ADDR
// end ; 14 :
31085: GO 31504
31087: LD_INT 14
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31106
31095: POP
// bc_type := b_workshop ; 15 :
31096: LD_ADDR_OWVAR 42
31100: PUSH
31101: LD_INT 2
31103: ST_TO_ADDR
31104: GO 31504
31106: LD_INT 15
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31125
31114: POP
// bc_type := b_factory ; 16 :
31115: LD_ADDR_OWVAR 42
31119: PUSH
31120: LD_INT 3
31122: ST_TO_ADDR
31123: GO 31504
31125: LD_INT 16
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31144
31133: POP
// bc_type := b_ext_gun ; 17 :
31134: LD_ADDR_OWVAR 42
31138: PUSH
31139: LD_INT 17
31141: ST_TO_ADDR
31142: GO 31504
31144: LD_INT 17
31146: DOUBLE
31147: EQUAL
31148: IFTRUE 31152
31150: GO 31180
31152: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31153: LD_ADDR_OWVAR 42
31157: PUSH
31158: LD_INT 19
31160: PUSH
31161: LD_INT 23
31163: PUSH
31164: LD_INT 19
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: PUSH
31172: LD_VAR 0 1
31176: ARRAY
31177: ST_TO_ADDR
31178: GO 31504
31180: LD_INT 18
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31199
31188: POP
// bc_type := b_ext_radar ; 19 :
31189: LD_ADDR_OWVAR 42
31193: PUSH
31194: LD_INT 20
31196: ST_TO_ADDR
31197: GO 31504
31199: LD_INT 19
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31218
31207: POP
// bc_type := b_ext_radio ; 20 :
31208: LD_ADDR_OWVAR 42
31212: PUSH
31213: LD_INT 22
31215: ST_TO_ADDR
31216: GO 31504
31218: LD_INT 20
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31237
31226: POP
// bc_type := b_ext_siberium ; 21 :
31227: LD_ADDR_OWVAR 42
31231: PUSH
31232: LD_INT 21
31234: ST_TO_ADDR
31235: GO 31504
31237: LD_INT 21
31239: DOUBLE
31240: EQUAL
31241: IFTRUE 31245
31243: GO 31256
31245: POP
// bc_type := b_ext_computer ; 22 :
31246: LD_ADDR_OWVAR 42
31250: PUSH
31251: LD_INT 24
31253: ST_TO_ADDR
31254: GO 31504
31256: LD_INT 22
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31275
31264: POP
// bc_type := b_ext_track ; 23 :
31265: LD_ADDR_OWVAR 42
31269: PUSH
31270: LD_INT 16
31272: ST_TO_ADDR
31273: GO 31504
31275: LD_INT 23
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31294
31283: POP
// bc_type := b_ext_laser ; 24 :
31284: LD_ADDR_OWVAR 42
31288: PUSH
31289: LD_INT 25
31291: ST_TO_ADDR
31292: GO 31504
31294: LD_INT 24
31296: DOUBLE
31297: EQUAL
31298: IFTRUE 31302
31300: GO 31313
31302: POP
// bc_type := b_control_tower ; 25 :
31303: LD_ADDR_OWVAR 42
31307: PUSH
31308: LD_INT 36
31310: ST_TO_ADDR
31311: GO 31504
31313: LD_INT 25
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31332
31321: POP
// bc_type := b_breastwork ; 26 :
31322: LD_ADDR_OWVAR 42
31326: PUSH
31327: LD_INT 31
31329: ST_TO_ADDR
31330: GO 31504
31332: LD_INT 26
31334: DOUBLE
31335: EQUAL
31336: IFTRUE 31340
31338: GO 31351
31340: POP
// bc_type := b_bunker ; 27 :
31341: LD_ADDR_OWVAR 42
31345: PUSH
31346: LD_INT 32
31348: ST_TO_ADDR
31349: GO 31504
31351: LD_INT 27
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31370
31359: POP
// bc_type := b_turret ; 28 :
31360: LD_ADDR_OWVAR 42
31364: PUSH
31365: LD_INT 33
31367: ST_TO_ADDR
31368: GO 31504
31370: LD_INT 28
31372: DOUBLE
31373: EQUAL
31374: IFTRUE 31378
31376: GO 31389
31378: POP
// bc_type := b_armoury ; 29 :
31379: LD_ADDR_OWVAR 42
31383: PUSH
31384: LD_INT 4
31386: ST_TO_ADDR
31387: GO 31504
31389: LD_INT 29
31391: DOUBLE
31392: EQUAL
31393: IFTRUE 31397
31395: GO 31408
31397: POP
// bc_type := b_barracks ; 30 :
31398: LD_ADDR_OWVAR 42
31402: PUSH
31403: LD_INT 5
31405: ST_TO_ADDR
31406: GO 31504
31408: LD_INT 30
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31427
31416: POP
// bc_type := b_solar_power ; 31 :
31417: LD_ADDR_OWVAR 42
31421: PUSH
31422: LD_INT 27
31424: ST_TO_ADDR
31425: GO 31504
31427: LD_INT 31
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31446
31435: POP
// bc_type := b_oil_power ; 32 :
31436: LD_ADDR_OWVAR 42
31440: PUSH
31441: LD_INT 26
31443: ST_TO_ADDR
31444: GO 31504
31446: LD_INT 32
31448: DOUBLE
31449: EQUAL
31450: IFTRUE 31454
31452: GO 31465
31454: POP
// bc_type := b_siberite_power ; 33 :
31455: LD_ADDR_OWVAR 42
31459: PUSH
31460: LD_INT 28
31462: ST_TO_ADDR
31463: GO 31504
31465: LD_INT 33
31467: DOUBLE
31468: EQUAL
31469: IFTRUE 31473
31471: GO 31484
31473: POP
// bc_type := b_oil_mine ; 34 :
31474: LD_ADDR_OWVAR 42
31478: PUSH
31479: LD_INT 29
31481: ST_TO_ADDR
31482: GO 31504
31484: LD_INT 34
31486: DOUBLE
31487: EQUAL
31488: IFTRUE 31492
31490: GO 31503
31492: POP
// bc_type := b_siberite_mine ; end ;
31493: LD_ADDR_OWVAR 42
31497: PUSH
31498: LD_INT 30
31500: ST_TO_ADDR
31501: GO 31504
31503: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31504: LD_ADDR_VAR 0 8
31508: PUSH
31509: LD_VAR 0 5
31513: PPUSH
31514: LD_VAR 0 6
31518: PPUSH
31519: LD_VAR 0 3
31523: PPUSH
31524: CALL_OW 47
31528: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31529: LD_OWVAR 42
31533: PUSH
31534: LD_INT 32
31536: PUSH
31537: LD_INT 33
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: IN
31544: IFFALSE 31560
// PlaceWeaponTurret ( b , weapon ) ;
31546: LD_VAR 0 8
31550: PPUSH
31551: LD_VAR 0 4
31555: PPUSH
31556: CALL_OW 431
// end ;
31560: LD_VAR 0 7
31564: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31565: LD_INT 0
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31571: LD_ADDR_VAR 0 4
31575: PUSH
31576: LD_INT 22
31578: PUSH
31579: LD_OWVAR 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: LD_INT 30
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PPUSH
31620: CALL_OW 69
31624: ST_TO_ADDR
// if not tmp then
31625: LD_VAR 0 4
31629: NOT
31630: IFFALSE 31634
// exit ;
31632: GO 31693
// for i in tmp do
31634: LD_ADDR_VAR 0 2
31638: PUSH
31639: LD_VAR 0 4
31643: PUSH
31644: FOR_IN
31645: IFFALSE 31691
// for j = 1 to 3 do
31647: LD_ADDR_VAR 0 3
31651: PUSH
31652: DOUBLE
31653: LD_INT 1
31655: DEC
31656: ST_TO_ADDR
31657: LD_INT 3
31659: PUSH
31660: FOR_TO
31661: IFFALSE 31687
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31663: LD_VAR 0 2
31667: PPUSH
31668: CALL_OW 274
31672: PPUSH
31673: LD_VAR 0 3
31677: PPUSH
31678: LD_INT 99999
31680: PPUSH
31681: CALL_OW 277
31685: GO 31660
31687: POP
31688: POP
31689: GO 31644
31691: POP
31692: POP
// end ;
31693: LD_VAR 0 1
31697: RET
// export function hHackSetLevel10 ; var i , j ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31703: LD_ADDR_VAR 0 2
31707: PUSH
31708: LD_INT 21
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PPUSH
31718: CALL_OW 69
31722: PUSH
31723: FOR_IN
31724: IFFALSE 31776
// if IsSelected ( i ) then
31726: LD_VAR 0 2
31730: PPUSH
31731: CALL_OW 306
31735: IFFALSE 31774
// begin for j := 1 to 4 do
31737: LD_ADDR_VAR 0 3
31741: PUSH
31742: DOUBLE
31743: LD_INT 1
31745: DEC
31746: ST_TO_ADDR
31747: LD_INT 4
31749: PUSH
31750: FOR_TO
31751: IFFALSE 31772
// SetSkill ( i , j , 10 ) ;
31753: LD_VAR 0 2
31757: PPUSH
31758: LD_VAR 0 3
31762: PPUSH
31763: LD_INT 10
31765: PPUSH
31766: CALL_OW 237
31770: GO 31750
31772: POP
31773: POP
// end ;
31774: GO 31723
31776: POP
31777: POP
// end ;
31778: LD_VAR 0 1
31782: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31783: LD_INT 0
31785: PPUSH
31786: PPUSH
31787: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31788: LD_ADDR_VAR 0 2
31792: PUSH
31793: LD_INT 22
31795: PUSH
31796: LD_OWVAR 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 21
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PPUSH
31819: CALL_OW 69
31823: PUSH
31824: FOR_IN
31825: IFFALSE 31866
// begin for j := 1 to 4 do
31827: LD_ADDR_VAR 0 3
31831: PUSH
31832: DOUBLE
31833: LD_INT 1
31835: DEC
31836: ST_TO_ADDR
31837: LD_INT 4
31839: PUSH
31840: FOR_TO
31841: IFFALSE 31862
// SetSkill ( i , j , 10 ) ;
31843: LD_VAR 0 2
31847: PPUSH
31848: LD_VAR 0 3
31852: PPUSH
31853: LD_INT 10
31855: PPUSH
31856: CALL_OW 237
31860: GO 31840
31862: POP
31863: POP
// end ;
31864: GO 31824
31866: POP
31867: POP
// end ;
31868: LD_VAR 0 1
31872: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31873: LD_INT 0
31875: PPUSH
// uc_side := your_side ;
31876: LD_ADDR_OWVAR 20
31880: PUSH
31881: LD_OWVAR 2
31885: ST_TO_ADDR
// uc_nation := nation ;
31886: LD_ADDR_OWVAR 21
31890: PUSH
31891: LD_VAR 0 1
31895: ST_TO_ADDR
// InitHc ;
31896: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31900: LD_INT 0
31902: PPUSH
31903: LD_VAR 0 2
31907: PPUSH
31908: LD_VAR 0 3
31912: PPUSH
31913: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31917: LD_VAR 0 4
31921: PPUSH
31922: LD_VAR 0 5
31926: PPUSH
31927: CALL_OW 428
31931: PUSH
31932: LD_INT 0
31934: EQUAL
31935: IFFALSE 31959
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31937: CALL_OW 44
31941: PPUSH
31942: LD_VAR 0 4
31946: PPUSH
31947: LD_VAR 0 5
31951: PPUSH
31952: LD_INT 1
31954: PPUSH
31955: CALL_OW 48
// end ;
31959: LD_VAR 0 6
31963: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31964: LD_INT 0
31966: PPUSH
31967: PPUSH
// uc_side := your_side ;
31968: LD_ADDR_OWVAR 20
31972: PUSH
31973: LD_OWVAR 2
31977: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31978: LD_VAR 0 1
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: IN
32005: IFFALSE 32017
// uc_nation := nation_american else
32007: LD_ADDR_OWVAR 21
32011: PUSH
32012: LD_INT 1
32014: ST_TO_ADDR
32015: GO 32060
// if chassis in [ 11 , 12 , 13 , 14 ] then
32017: LD_VAR 0 1
32021: PUSH
32022: LD_INT 11
32024: PUSH
32025: LD_INT 12
32027: PUSH
32028: LD_INT 13
32030: PUSH
32031: LD_INT 14
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: IN
32040: IFFALSE 32052
// uc_nation := nation_arabian else
32042: LD_ADDR_OWVAR 21
32046: PUSH
32047: LD_INT 2
32049: ST_TO_ADDR
32050: GO 32060
// uc_nation := nation_russian ;
32052: LD_ADDR_OWVAR 21
32056: PUSH
32057: LD_INT 3
32059: ST_TO_ADDR
// vc_chassis := chassis ;
32060: LD_ADDR_OWVAR 37
32064: PUSH
32065: LD_VAR 0 1
32069: ST_TO_ADDR
// vc_engine := engine ;
32070: LD_ADDR_OWVAR 39
32074: PUSH
32075: LD_VAR 0 2
32079: ST_TO_ADDR
// vc_control := control ;
32080: LD_ADDR_OWVAR 38
32084: PUSH
32085: LD_VAR 0 3
32089: ST_TO_ADDR
// vc_weapon := weapon ;
32090: LD_ADDR_OWVAR 40
32094: PUSH
32095: LD_VAR 0 4
32099: ST_TO_ADDR
// un := CreateVehicle ;
32100: LD_ADDR_VAR 0 8
32104: PUSH
32105: CALL_OW 45
32109: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32110: LD_VAR 0 8
32114: PPUSH
32115: LD_INT 0
32117: PPUSH
32118: LD_INT 5
32120: PPUSH
32121: CALL_OW 12
32125: PPUSH
32126: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32130: LD_VAR 0 8
32134: PPUSH
32135: LD_VAR 0 5
32139: PPUSH
32140: LD_VAR 0 6
32144: PPUSH
32145: LD_INT 1
32147: PPUSH
32148: CALL_OW 48
// end ;
32152: LD_VAR 0 7
32156: RET
// export hInvincible ; every 1 do
32157: GO 32159
32159: DISABLE
// hInvincible := [ ] ;
32160: LD_ADDR_EXP 111
32164: PUSH
32165: EMPTY
32166: ST_TO_ADDR
32167: END
// every 10 do var i ;
32168: GO 32170
32170: DISABLE
32171: LD_INT 0
32173: PPUSH
// begin enable ;
32174: ENABLE
// if not hInvincible then
32175: LD_EXP 111
32179: NOT
32180: IFFALSE 32184
// exit ;
32182: GO 32228
// for i in hInvincible do
32184: LD_ADDR_VAR 0 1
32188: PUSH
32189: LD_EXP 111
32193: PUSH
32194: FOR_IN
32195: IFFALSE 32226
// if GetLives ( i ) < 1000 then
32197: LD_VAR 0 1
32201: PPUSH
32202: CALL_OW 256
32206: PUSH
32207: LD_INT 1000
32209: LESS
32210: IFFALSE 32224
// SetLives ( i , 1000 ) ;
32212: LD_VAR 0 1
32216: PPUSH
32217: LD_INT 1000
32219: PPUSH
32220: CALL_OW 234
32224: GO 32194
32226: POP
32227: POP
// end ;
32228: PPOPN 1
32230: END
// export function hHackInvincible ; var i ; begin
32231: LD_INT 0
32233: PPUSH
32234: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32235: LD_ADDR_VAR 0 2
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: LD_INT 21
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 21
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: PPUSH
32268: CALL_OW 69
32272: PUSH
32273: FOR_IN
32274: IFFALSE 32335
// if IsSelected ( i ) then
32276: LD_VAR 0 2
32280: PPUSH
32281: CALL_OW 306
32285: IFFALSE 32333
// begin if i in hInvincible then
32287: LD_VAR 0 2
32291: PUSH
32292: LD_EXP 111
32296: IN
32297: IFFALSE 32317
// hInvincible := hInvincible diff i else
32299: LD_ADDR_EXP 111
32303: PUSH
32304: LD_EXP 111
32308: PUSH
32309: LD_VAR 0 2
32313: DIFF
32314: ST_TO_ADDR
32315: GO 32333
// hInvincible := hInvincible union i ;
32317: LD_ADDR_EXP 111
32321: PUSH
32322: LD_EXP 111
32326: PUSH
32327: LD_VAR 0 2
32331: UNION
32332: ST_TO_ADDR
// end ;
32333: GO 32273
32335: POP
32336: POP
// end ;
32337: LD_VAR 0 1
32341: RET
// export function hHackInvisible ; var i , j ; begin
32342: LD_INT 0
32344: PPUSH
32345: PPUSH
32346: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32347: LD_ADDR_VAR 0 2
32351: PUSH
32352: LD_INT 21
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PPUSH
32362: CALL_OW 69
32366: PUSH
32367: FOR_IN
32368: IFFALSE 32392
// if IsSelected ( i ) then
32370: LD_VAR 0 2
32374: PPUSH
32375: CALL_OW 306
32379: IFFALSE 32390
// ComForceInvisible ( i ) ;
32381: LD_VAR 0 2
32385: PPUSH
32386: CALL_OW 496
32390: GO 32367
32392: POP
32393: POP
// end ;
32394: LD_VAR 0 1
32398: RET
// export function hHackChangeYourSide ; begin
32399: LD_INT 0
32401: PPUSH
// if your_side = 8 then
32402: LD_OWVAR 2
32406: PUSH
32407: LD_INT 8
32409: EQUAL
32410: IFFALSE 32422
// your_side := 0 else
32412: LD_ADDR_OWVAR 2
32416: PUSH
32417: LD_INT 0
32419: ST_TO_ADDR
32420: GO 32436
// your_side := your_side + 1 ;
32422: LD_ADDR_OWVAR 2
32426: PUSH
32427: LD_OWVAR 2
32431: PUSH
32432: LD_INT 1
32434: PLUS
32435: ST_TO_ADDR
// end ;
32436: LD_VAR 0 1
32440: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32441: LD_INT 0
32443: PPUSH
32444: PPUSH
32445: PPUSH
// for i in all_units do
32446: LD_ADDR_VAR 0 2
32450: PUSH
32451: LD_OWVAR 3
32455: PUSH
32456: FOR_IN
32457: IFFALSE 32535
// if IsSelected ( i ) then
32459: LD_VAR 0 2
32463: PPUSH
32464: CALL_OW 306
32468: IFFALSE 32533
// begin j := GetSide ( i ) ;
32470: LD_ADDR_VAR 0 3
32474: PUSH
32475: LD_VAR 0 2
32479: PPUSH
32480: CALL_OW 255
32484: ST_TO_ADDR
// if j = 8 then
32485: LD_VAR 0 3
32489: PUSH
32490: LD_INT 8
32492: EQUAL
32493: IFFALSE 32505
// j := 0 else
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_INT 0
32502: ST_TO_ADDR
32503: GO 32519
// j := j + 1 ;
32505: LD_ADDR_VAR 0 3
32509: PUSH
32510: LD_VAR 0 3
32514: PUSH
32515: LD_INT 1
32517: PLUS
32518: ST_TO_ADDR
// SetSide ( i , j ) ;
32519: LD_VAR 0 2
32523: PPUSH
32524: LD_VAR 0 3
32528: PPUSH
32529: CALL_OW 235
// end ;
32533: GO 32456
32535: POP
32536: POP
// end ;
32537: LD_VAR 0 1
32541: RET
// export function hHackFog ; begin
32542: LD_INT 0
32544: PPUSH
// FogOff ( true ) ;
32545: LD_INT 1
32547: PPUSH
32548: CALL_OW 344
// end ;
32552: LD_VAR 0 1
32556: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32557: LD_INT 0
32559: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32560: LD_VAR 0 1
32564: PPUSH
32565: LD_VAR 0 2
32569: PPUSH
32570: LD_VAR 0 3
32574: PPUSH
32575: LD_INT 1
32577: PPUSH
32578: LD_INT 1
32580: PPUSH
32581: CALL_OW 483
// CenterOnXY ( x , y ) ;
32585: LD_VAR 0 2
32589: PPUSH
32590: LD_VAR 0 3
32594: PPUSH
32595: CALL_OW 84
// end ;
32599: LD_VAR 0 4
32603: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32604: LD_INT 0
32606: PPUSH
32607: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32608: LD_VAR 0 1
32612: NOT
32613: IFTRUE 32632
32615: PUSH
32616: LD_VAR 0 2
32620: PPUSH
32621: LD_VAR 0 3
32625: PPUSH
32626: CALL_OW 488
32630: NOT
32631: OR
32632: IFTRUE 32667
32634: PUSH
32635: LD_VAR 0 1
32639: PPUSH
32640: CALL_OW 266
32644: PUSH
32645: LD_INT 3
32647: NONEQUAL
32648: IFFALSE 32666
32650: PUSH
32651: LD_VAR 0 1
32655: PPUSH
32656: CALL_OW 247
32660: PUSH
32661: LD_INT 1
32663: EQUAL
32664: NOT
32665: AND
32666: OR
32667: IFFALSE 32671
// exit ;
32669: GO 32953
// if GetType ( factory ) = unit_human then
32671: LD_VAR 0 1
32675: PPUSH
32676: CALL_OW 247
32680: PUSH
32681: LD_INT 1
32683: EQUAL
32684: IFFALSE 32701
// factory := IsInUnit ( factory ) ;
32686: LD_ADDR_VAR 0 1
32690: PUSH
32691: LD_VAR 0 1
32695: PPUSH
32696: CALL_OW 310
32700: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32701: LD_VAR 0 1
32705: PPUSH
32706: CALL_OW 266
32710: PUSH
32711: LD_INT 3
32713: NONEQUAL
32714: IFFALSE 32718
// exit ;
32716: GO 32953
// for i := 1 to Count ( factoryWaypoints ) do
32718: LD_ADDR_VAR 0 5
32722: PUSH
32723: DOUBLE
32724: LD_INT 1
32726: DEC
32727: ST_TO_ADDR
32728: LD_EXP 112
32732: PPUSH
32733: CALL 42649 0 1
32737: PUSH
32738: FOR_TO
32739: IFFALSE 32901
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 3
32750: PPUSH
32751: CALL_OW 428
32755: PUSH
32756: LD_EXP 112
32760: PUSH
32761: LD_VAR 0 5
32765: ARRAY
32766: PUSH
32767: LD_INT 2
32769: ARRAY
32770: EQUAL
32771: IFFALSE 32803
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32773: LD_ADDR_EXP 112
32777: PUSH
32778: LD_EXP 112
32782: PPUSH
32783: LD_VAR 0 5
32787: PPUSH
32788: CALL_OW 3
32792: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32793: CALL 32958 0 0
// exit ;
32797: POP
32798: POP
32799: GO 32953
// end else
32801: GO 32899
// if factory = factoryWaypoints [ i ] [ 2 ] then
32803: LD_VAR 0 1
32807: PUSH
32808: LD_EXP 112
32812: PUSH
32813: LD_VAR 0 5
32817: ARRAY
32818: PUSH
32819: LD_INT 2
32821: ARRAY
32822: EQUAL
32823: IFFALSE 32899
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32825: LD_ADDR_EXP 112
32829: PUSH
32830: LD_EXP 112
32834: PPUSH
32835: LD_VAR 0 5
32839: PPUSH
32840: CALL_OW 3
32844: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32845: LD_ADDR_EXP 112
32849: PUSH
32850: LD_EXP 112
32854: PPUSH
32855: LD_VAR 0 1
32859: PPUSH
32860: CALL_OW 255
32864: PUSH
32865: LD_VAR 0 1
32869: PUSH
32870: LD_VAR 0 2
32874: PUSH
32875: LD_VAR 0 3
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: PPUSH
32886: CALL 78581 0 2
32890: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32891: CALL 32958 0 0
// exit ;
32895: POP
32896: POP
32897: GO 32953
// end ; end ;
32899: GO 32738
32901: POP
32902: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32903: LD_ADDR_EXP 112
32907: PUSH
32908: LD_EXP 112
32912: PPUSH
32913: LD_VAR 0 1
32917: PPUSH
32918: CALL_OW 255
32922: PUSH
32923: LD_VAR 0 1
32927: PUSH
32928: LD_VAR 0 2
32932: PUSH
32933: LD_VAR 0 3
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: PPUSH
32944: CALL 78581 0 2
32948: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32949: CALL 32958 0 0
// end ;
32953: LD_VAR 0 4
32957: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32958: LD_INT 0
32960: PPUSH
32961: PPUSH
32962: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32963: LD_STRING resetFactoryWaypoint();
32965: PPUSH
32966: CALL_OW 559
// if factoryWaypoints then
32970: LD_EXP 112
32974: IFFALSE 33095
// begin list := factoryWaypoints ;
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_EXP 112
32985: ST_TO_ADDR
// for i := 1 to list do
32986: LD_ADDR_VAR 0 2
32990: PUSH
32991: DOUBLE
32992: LD_INT 1
32994: DEC
32995: ST_TO_ADDR
32996: LD_VAR 0 3
33000: PUSH
33001: FOR_TO
33002: IFFALSE 33093
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33004: LD_STRING setFactoryWaypointXY(
33006: PUSH
33007: LD_VAR 0 3
33011: PUSH
33012: LD_VAR 0 2
33016: ARRAY
33017: PUSH
33018: LD_INT 1
33020: ARRAY
33021: STR
33022: PUSH
33023: LD_STRING ,
33025: STR
33026: PUSH
33027: LD_VAR 0 3
33031: PUSH
33032: LD_VAR 0 2
33036: ARRAY
33037: PUSH
33038: LD_INT 2
33040: ARRAY
33041: STR
33042: PUSH
33043: LD_STRING ,
33045: STR
33046: PUSH
33047: LD_VAR 0 3
33051: PUSH
33052: LD_VAR 0 2
33056: ARRAY
33057: PUSH
33058: LD_INT 3
33060: ARRAY
33061: STR
33062: PUSH
33063: LD_STRING ,
33065: STR
33066: PUSH
33067: LD_VAR 0 3
33071: PUSH
33072: LD_VAR 0 2
33076: ARRAY
33077: PUSH
33078: LD_INT 4
33080: ARRAY
33081: STR
33082: PUSH
33083: LD_STRING )
33085: STR
33086: PPUSH
33087: CALL_OW 559
33091: GO 33001
33093: POP
33094: POP
// end ; end ;
33095: LD_VAR 0 1
33099: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33100: LD_INT 0
33102: PPUSH
// if HexInfo ( x , y ) = warehouse then
33103: LD_VAR 0 2
33107: PPUSH
33108: LD_VAR 0 3
33112: PPUSH
33113: CALL_OW 428
33117: PUSH
33118: LD_VAR 0 1
33122: EQUAL
33123: IFFALSE 33150
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33125: LD_ADDR_EXP 114
33129: PUSH
33130: LD_EXP 114
33134: PPUSH
33135: LD_VAR 0 1
33139: PPUSH
33140: LD_INT 0
33142: PPUSH
33143: CALL_OW 1
33147: ST_TO_ADDR
33148: GO 33201
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33150: LD_ADDR_EXP 114
33154: PUSH
33155: LD_EXP 114
33159: PPUSH
33160: LD_VAR 0 1
33164: PPUSH
33165: LD_VAR 0 1
33169: PPUSH
33170: CALL_OW 255
33174: PUSH
33175: LD_VAR 0 1
33179: PUSH
33180: LD_VAR 0 2
33184: PUSH
33185: LD_VAR 0 3
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: PPUSH
33196: CALL_OW 1
33200: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33201: CALL 33210 0 0
// end ;
33205: LD_VAR 0 4
33209: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33210: LD_INT 0
33212: PPUSH
33213: PPUSH
33214: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33215: LD_STRING resetWarehouseGatheringPoints();
33217: PPUSH
33218: CALL_OW 559
// if warehouseGatheringPoints then
33222: LD_EXP 114
33226: IFFALSE 33352
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_EXP 114
33237: PPUSH
33238: CALL 82515 0 1
33242: ST_TO_ADDR
// for i := 1 to list do
33243: LD_ADDR_VAR 0 2
33247: PUSH
33248: DOUBLE
33249: LD_INT 1
33251: DEC
33252: ST_TO_ADDR
33253: LD_VAR 0 3
33257: PUSH
33258: FOR_TO
33259: IFFALSE 33350
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33261: LD_STRING setWarehouseGatheringPointXY(
33263: PUSH
33264: LD_VAR 0 3
33268: PUSH
33269: LD_VAR 0 2
33273: ARRAY
33274: PUSH
33275: LD_INT 1
33277: ARRAY
33278: STR
33279: PUSH
33280: LD_STRING ,
33282: STR
33283: PUSH
33284: LD_VAR 0 3
33288: PUSH
33289: LD_VAR 0 2
33293: ARRAY
33294: PUSH
33295: LD_INT 2
33297: ARRAY
33298: STR
33299: PUSH
33300: LD_STRING ,
33302: STR
33303: PUSH
33304: LD_VAR 0 3
33308: PUSH
33309: LD_VAR 0 2
33313: ARRAY
33314: PUSH
33315: LD_INT 3
33317: ARRAY
33318: STR
33319: PUSH
33320: LD_STRING ,
33322: STR
33323: PUSH
33324: LD_VAR 0 3
33328: PUSH
33329: LD_VAR 0 2
33333: ARRAY
33334: PUSH
33335: LD_INT 4
33337: ARRAY
33338: STR
33339: PUSH
33340: LD_STRING )
33342: STR
33343: PPUSH
33344: CALL_OW 559
33348: GO 33258
33350: POP
33351: POP
// end ; end ;
33352: LD_VAR 0 1
33356: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33357: LD_EXP 114
33361: IFFALSE 34056
33363: GO 33365
33365: DISABLE
33366: LD_INT 0
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
// begin enable ;
33377: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_EXP 114
33387: PPUSH
33388: CALL 82515 0 1
33392: ST_TO_ADDR
// if not list then
33393: LD_VAR 0 3
33397: NOT
33398: IFFALSE 33402
// exit ;
33400: GO 34056
// for i := 1 to list do
33402: LD_ADDR_VAR 0 1
33406: PUSH
33407: DOUBLE
33408: LD_INT 1
33410: DEC
33411: ST_TO_ADDR
33412: LD_VAR 0 3
33416: PUSH
33417: FOR_TO
33418: IFFALSE 34054
// begin depot := list [ i ] [ 2 ] ;
33420: LD_ADDR_VAR 0 8
33424: PUSH
33425: LD_VAR 0 3
33429: PUSH
33430: LD_VAR 0 1
33434: ARRAY
33435: PUSH
33436: LD_INT 2
33438: ARRAY
33439: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33440: LD_ADDR_VAR 0 5
33444: PUSH
33445: LD_VAR 0 3
33449: PUSH
33450: LD_VAR 0 1
33454: ARRAY
33455: PUSH
33456: LD_INT 1
33458: ARRAY
33459: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33460: LD_VAR 0 8
33464: PPUSH
33465: CALL_OW 301
33469: IFTRUE 33488
33471: PUSH
33472: LD_VAR 0 5
33476: PUSH
33477: LD_VAR 0 8
33481: PPUSH
33482: CALL_OW 255
33486: NONEQUAL
33487: OR
33488: IFFALSE 33517
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33490: LD_ADDR_EXP 114
33494: PUSH
33495: LD_EXP 114
33499: PPUSH
33500: LD_VAR 0 8
33504: PPUSH
33505: LD_INT 0
33507: PPUSH
33508: CALL_OW 1
33512: ST_TO_ADDR
// exit ;
33513: POP
33514: POP
33515: GO 34056
// end ; x := list [ i ] [ 3 ] ;
33517: LD_ADDR_VAR 0 6
33521: PUSH
33522: LD_VAR 0 3
33526: PUSH
33527: LD_VAR 0 1
33531: ARRAY
33532: PUSH
33533: LD_INT 3
33535: ARRAY
33536: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33537: LD_ADDR_VAR 0 7
33541: PUSH
33542: LD_VAR 0 3
33546: PUSH
33547: LD_VAR 0 1
33551: ARRAY
33552: PUSH
33553: LD_INT 4
33555: ARRAY
33556: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33557: LD_ADDR_VAR 0 9
33561: PUSH
33562: LD_VAR 0 6
33566: PPUSH
33567: LD_VAR 0 7
33571: PPUSH
33572: LD_INT 16
33574: PPUSH
33575: CALL 81089 0 3
33579: ST_TO_ADDR
// if not cratesNearbyPoint then
33580: LD_VAR 0 9
33584: NOT
33585: IFFALSE 33591
// exit ;
33587: POP
33588: POP
33589: GO 34056
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33591: LD_ADDR_VAR 0 4
33595: PUSH
33596: LD_INT 22
33598: PUSH
33599: LD_VAR 0 5
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 3
33610: PUSH
33611: LD_INT 60
33613: PUSH
33614: EMPTY
33615: LIST
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 91
33623: PUSH
33624: LD_VAR 0 8
33628: PUSH
33629: LD_INT 6
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 25
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 25
33652: PUSH
33653: LD_INT 16
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: PPUSH
33671: CALL_OW 69
33675: PUSH
33676: LD_VAR 0 8
33680: PPUSH
33681: CALL_OW 313
33685: PPUSH
33686: LD_INT 3
33688: PUSH
33689: LD_INT 60
33691: PUSH
33692: EMPTY
33693: LIST
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 25
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 25
33714: PUSH
33715: LD_INT 16
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PPUSH
33731: CALL_OW 72
33735: UNION
33736: ST_TO_ADDR
// if tmp then
33737: LD_VAR 0 4
33741: IFFALSE 33821
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33743: LD_ADDR_VAR 0 4
33747: PUSH
33748: LD_VAR 0 4
33752: PPUSH
33753: LD_INT 3
33755: PPUSH
33756: CALL 78896 0 2
33760: ST_TO_ADDR
// for j in tmp do
33761: LD_ADDR_VAR 0 2
33765: PUSH
33766: LD_VAR 0 4
33770: PUSH
33771: FOR_IN
33772: IFFALSE 33815
// begin if IsInUnit ( j ) then
33774: LD_VAR 0 2
33778: PPUSH
33779: CALL_OW 310
33783: IFFALSE 33794
// ComExit ( j ) ;
33785: LD_VAR 0 2
33789: PPUSH
33790: CALL 78979 0 1
// AddComCollect ( j , x , y ) ;
33794: LD_VAR 0 2
33798: PPUSH
33799: LD_VAR 0 6
33803: PPUSH
33804: LD_VAR 0 7
33808: PPUSH
33809: CALL_OW 177
// end ;
33813: GO 33771
33815: POP
33816: POP
// exit ;
33817: POP
33818: POP
33819: GO 34056
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33821: LD_ADDR_VAR 0 4
33825: PUSH
33826: LD_INT 22
33828: PUSH
33829: LD_VAR 0 5
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 91
33840: PUSH
33841: LD_VAR 0 8
33845: PUSH
33846: LD_INT 8
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 34
33859: PUSH
33860: LD_INT 12
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 34
33869: PUSH
33870: LD_INT 51
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 34
33879: PUSH
33880: LD_INT 32
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 34
33889: PUSH
33890: LD_INT 89
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: PPUSH
33909: CALL_OW 69
33913: ST_TO_ADDR
// if tmp then
33914: LD_VAR 0 4
33918: IFFALSE 34052
// begin for j in tmp do
33920: LD_ADDR_VAR 0 2
33924: PUSH
33925: LD_VAR 0 4
33929: PUSH
33930: FOR_IN
33931: IFFALSE 34050
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33933: LD_VAR 0 2
33937: PPUSH
33938: CALL_OW 262
33942: PUSH
33943: LD_INT 3
33945: EQUAL
33946: IFTRUE 33963
33948: PUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL_OW 261
33958: PUSH
33959: LD_INT 20
33961: GREATER
33962: OR
33963: IFFALSE 33977
33965: PUSH
33966: LD_VAR 0 2
33970: PPUSH
33971: CALL_OW 314
33975: NOT
33976: AND
33977: IFFALSE 34007
33979: PUSH
33980: LD_VAR 0 2
33984: PPUSH
33985: CALL_OW 263
33989: PUSH
33990: LD_INT 1
33992: NONEQUAL
33993: IFTRUE 34006
33995: PUSH
33996: LD_VAR 0 2
34000: PPUSH
34001: CALL_OW 311
34005: OR
34006: AND
34007: IFFALSE 34048
// begin ComCollect ( j , x , y ) ;
34009: LD_VAR 0 2
34013: PPUSH
34014: LD_VAR 0 6
34018: PPUSH
34019: LD_VAR 0 7
34023: PPUSH
34024: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34028: LD_VAR 0 2
34032: PPUSH
34033: LD_VAR 0 8
34037: PPUSH
34038: CALL_OW 172
// exit ;
34042: POP
34043: POP
34044: POP
34045: POP
34046: GO 34056
// end ;
34048: GO 33930
34050: POP
34051: POP
// end ; end ;
34052: GO 33417
34054: POP
34055: POP
// end ; end_of_file
34056: PPOPN 9
34058: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34059: LD_VAR 0 1
34063: PUSH
34064: LD_INT 200
34066: DOUBLE
34067: GREATEREQUAL
34068: IFFALSE 34076
34070: LD_INT 299
34072: DOUBLE
34073: LESSEQUAL
34074: IFTRUE 34078
34076: GO 34110
34078: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34079: LD_VAR 0 1
34083: PPUSH
34084: LD_VAR 0 2
34088: PPUSH
34089: LD_VAR 0 3
34093: PPUSH
34094: LD_VAR 0 4
34098: PPUSH
34099: LD_VAR 0 5
34103: PPUSH
34104: CALL 34891 0 5
34108: GO 34187
34110: LD_INT 300
34112: DOUBLE
34113: GREATEREQUAL
34114: IFFALSE 34122
34116: LD_INT 399
34118: DOUBLE
34119: LESSEQUAL
34120: IFTRUE 34124
34122: GO 34186
34124: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34125: LD_VAR 0 1
34129: PPUSH
34130: LD_VAR 0 2
34134: PPUSH
34135: LD_VAR 0 3
34139: PPUSH
34140: LD_VAR 0 4
34144: PPUSH
34145: LD_VAR 0 5
34149: PPUSH
34150: LD_VAR 0 6
34154: PPUSH
34155: LD_VAR 0 7
34159: PPUSH
34160: LD_VAR 0 8
34164: PPUSH
34165: LD_VAR 0 9
34169: PPUSH
34170: LD_VAR 0 10
34174: PPUSH
34175: LD_VAR 0 11
34179: PPUSH
34180: CALL 30612 0 11
34184: GO 34187
34186: POP
// end ;
34187: PPOPN 11
34189: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34190: LD_VAR 0 1
34194: PPUSH
34195: LD_VAR 0 2
34199: PPUSH
34200: LD_VAR 0 3
34204: PPUSH
34205: LD_VAR 0 4
34209: PPUSH
34210: LD_VAR 0 5
34214: PPUSH
34215: CALL 34272 0 5
// end ; end_of_file
34219: PPOPN 5
34221: END
// export function SOS_UnitDestroyed ( un ) ; begin
34222: LD_INT 0
34224: PPUSH
// ComRadiation ( un ) ;
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL 35311 0 1
// end ;
34234: LD_VAR 0 2
34238: RET
// export function SOS_UnitKamikazed ( un ) ; begin
34239: LD_INT 0
34241: PPUSH
// ComRadiation ( un ) ;
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL 35311 0 1
// end ;
34251: LD_VAR 0 2
34255: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34256: LD_INT 0
34258: PPUSH
// end ;
34259: LD_VAR 0 4
34263: RET
// export function SOS_Command ( cmd ) ; begin
34264: LD_INT 0
34266: PPUSH
// end ;
34267: LD_VAR 0 2
34271: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34272: LD_INT 0
34274: PPUSH
// end ;
34275: LD_VAR 0 6
34279: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
34280: LD_INT 0
34282: PPUSH
34283: PPUSH
34284: PPUSH
34285: PPUSH
// if not vehicle or not factory then
34286: LD_VAR 0 1
34290: NOT
34291: IFTRUE 34300
34293: PUSH
34294: LD_VAR 0 2
34298: NOT
34299: OR
34300: IFFALSE 34304
// exit ;
34302: GO 34886
// if not factoryWaypoints then
34304: LD_EXP 112
34308: NOT
34309: IFFALSE 34313
// exit ;
34311: GO 34886
// for i := 1 to Count ( factoryWaypoints ) do
34313: LD_ADDR_VAR 0 4
34317: PUSH
34318: DOUBLE
34319: LD_INT 1
34321: DEC
34322: ST_TO_ADDR
34323: LD_EXP 112
34327: PPUSH
34328: CALL 42649 0 1
34332: PUSH
34333: FOR_TO
34334: IFFALSE 34884
// if factoryWaypoints [ i ] [ 2 ] = factory then
34336: LD_EXP 112
34340: PUSH
34341: LD_VAR 0 4
34345: ARRAY
34346: PUSH
34347: LD_INT 2
34349: ARRAY
34350: PUSH
34351: LD_VAR 0 2
34355: EQUAL
34356: IFFALSE 34882
// begin if GetControl ( vehicle ) = control_manual then
34358: LD_VAR 0 1
34362: PPUSH
34363: CALL_OW 263
34367: PUSH
34368: LD_INT 1
34370: EQUAL
34371: IFFALSE 34735
// begin driver := IsDrivenBy ( vehicle ) ;
34373: LD_ADDR_VAR 0 5
34377: PUSH
34378: LD_VAR 0 1
34382: PPUSH
34383: CALL_OW 311
34387: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
34388: LD_VAR 0 5
34392: PUSH
34393: LD_EXP 113
34397: IN
34398: IFTRUE 34412
34400: PUSH
34401: LD_VAR 0 1
34405: PUSH
34406: LD_EXP 113
34410: IN
34411: OR
34412: IFFALSE 34418
// exit ;
34414: POP
34415: POP
34416: GO 34886
// if not HasTask ( driver ) then
34418: LD_VAR 0 5
34422: PPUSH
34423: CALL_OW 314
34427: NOT
34428: IFFALSE 34733
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
34430: LD_ADDR_EXP 113
34434: PUSH
34435: LD_EXP 113
34439: PPUSH
34440: LD_VAR 0 5
34444: PPUSH
34445: CALL 78581 0 2
34449: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
34450: LD_ADDR_EXP 113
34454: PUSH
34455: LD_EXP 113
34459: PPUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL 78581 0 2
34469: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34470: LD_ADDR_VAR 0 6
34474: PUSH
34475: LD_EXP 112
34479: PUSH
34480: LD_VAR 0 4
34484: ARRAY
34485: PUSH
34486: LD_INT 3
34488: ARRAY
34489: PPUSH
34490: LD_EXP 112
34494: PUSH
34495: LD_VAR 0 4
34499: ARRAY
34500: PUSH
34501: LD_INT 4
34503: ARRAY
34504: PPUSH
34505: CALL_OW 428
34509: ST_TO_ADDR
// if hex then
34510: LD_VAR 0 6
34514: IFFALSE 34532
// ComMoveUnit ( driver , hex ) else
34516: LD_VAR 0 5
34520: PPUSH
34521: LD_VAR 0 6
34525: PPUSH
34526: CALL_OW 112
34530: GO 34616
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
34532: LD_VAR 0 1
34536: PPUSH
34537: LD_EXP 112
34541: PUSH
34542: LD_VAR 0 4
34546: ARRAY
34547: PUSH
34548: LD_INT 3
34550: ARRAY
34551: PPUSH
34552: LD_EXP 112
34556: PUSH
34557: LD_VAR 0 4
34561: ARRAY
34562: PUSH
34563: LD_INT 4
34565: ARRAY
34566: PPUSH
34567: CALL_OW 297
34571: PUSH
34572: LD_INT 0
34574: GREATER
34575: IFFALSE 34616
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34577: LD_VAR 0 5
34581: PPUSH
34582: LD_EXP 112
34586: PUSH
34587: LD_VAR 0 4
34591: ARRAY
34592: PUSH
34593: LD_INT 3
34595: ARRAY
34596: PPUSH
34597: LD_EXP 112
34601: PUSH
34602: LD_VAR 0 4
34606: ARRAY
34607: PUSH
34608: LD_INT 4
34610: ARRAY
34611: PPUSH
34612: CALL_OW 111
// AddComExitVehicle ( driver ) ;
34616: LD_VAR 0 5
34620: PPUSH
34621: CALL_OW 181
// if Multiplayer then
34625: LD_OWVAR 4
34629: IFFALSE 34678
// begin repeat wait ( 10 ) ;
34631: LD_INT 10
34633: PPUSH
34634: CALL_OW 67
// until not IsInUnit ( driver ) ;
34638: LD_VAR 0 5
34642: PPUSH
34643: CALL_OW 310
34647: NOT
34648: IFFALSE 34631
// if not HasTask ( driver ) then
34650: LD_VAR 0 5
34654: PPUSH
34655: CALL_OW 314
34659: NOT
34660: IFFALSE 34676
// ComEnterUnit ( driver , factory ) ;
34662: LD_VAR 0 5
34666: PPUSH
34667: LD_VAR 0 2
34671: PPUSH
34672: CALL_OW 120
// end else
34676: GO 34692
// AddComEnterUnit ( driver , factory ) ;
34678: LD_VAR 0 5
34682: PPUSH
34683: LD_VAR 0 2
34687: PPUSH
34688: CALL_OW 180
// wait ( 0 0$1 ) ;
34692: LD_INT 35
34694: PPUSH
34695: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
34699: LD_ADDR_EXP 113
34703: PUSH
34704: LD_EXP 113
34708: PUSH
34709: LD_VAR 0 5
34713: DIFF
34714: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
34715: LD_ADDR_EXP 113
34719: PUSH
34720: LD_EXP 113
34724: PUSH
34725: LD_VAR 0 1
34729: DIFF
34730: ST_TO_ADDR
// break ;
34731: GO 34884
// end ; end else
34733: GO 34882
// if GetControl ( vehicle ) = control_remote then
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 263
34744: PUSH
34745: LD_INT 2
34747: EQUAL
34748: IFFALSE 34834
// begin wait ( 0 0$2 ) ;
34750: LD_INT 70
34752: PPUSH
34753: CALL_OW 67
// repeat wait ( 10 ) ;
34757: LD_INT 10
34759: PPUSH
34760: CALL_OW 67
// Connect ( vehicle ) ;
34764: LD_VAR 0 1
34768: PPUSH
34769: CALL 48893 0 1
// until IsControledBy ( vehicle ) ;
34773: LD_VAR 0 1
34777: PPUSH
34778: CALL_OW 312
34782: IFFALSE 34757
// wait ( 10 ) ;
34784: LD_INT 10
34786: PPUSH
34787: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34791: LD_VAR 0 1
34795: PPUSH
34796: LD_EXP 112
34800: PUSH
34801: LD_VAR 0 4
34805: ARRAY
34806: PUSH
34807: LD_INT 3
34809: ARRAY
34810: PPUSH
34811: LD_EXP 112
34815: PUSH
34816: LD_VAR 0 4
34820: ARRAY
34821: PUSH
34822: LD_INT 4
34824: ARRAY
34825: PPUSH
34826: CALL_OW 111
// break ;
34830: GO 34884
// end else
34832: GO 34882
// begin wait ( 0 0$3 ) ;
34834: LD_INT 105
34836: PPUSH
34837: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34841: LD_VAR 0 1
34845: PPUSH
34846: LD_EXP 112
34850: PUSH
34851: LD_VAR 0 4
34855: ARRAY
34856: PUSH
34857: LD_INT 3
34859: ARRAY
34860: PPUSH
34861: LD_EXP 112
34865: PUSH
34866: LD_VAR 0 4
34870: ARRAY
34871: PUSH
34872: LD_INT 4
34874: ARRAY
34875: PPUSH
34876: CALL_OW 111
// break ;
34880: GO 34884
// end ; end ;
34882: GO 34333
34884: POP
34885: POP
// end ;
34886: LD_VAR 0 3
34890: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34891: LD_INT 0
34893: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34894: LD_VAR 0 1
34898: PUSH
34899: LD_INT 250
34901: EQUAL
34902: IFFALSE 34919
34904: PUSH
34905: LD_VAR 0 2
34909: PPUSH
34910: CALL_OW 264
34914: PUSH
34915: LD_INT 81
34917: EQUAL
34918: AND
34919: IFFALSE 34940
// MinerPlaceMine ( unit , x , y ) ;
34921: LD_VAR 0 2
34925: PPUSH
34926: LD_VAR 0 4
34930: PPUSH
34931: LD_VAR 0 5
34935: PPUSH
34936: CALL 38072 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34940: LD_VAR 0 1
34944: PUSH
34945: LD_INT 251
34947: EQUAL
34948: IFFALSE 34965
34950: PUSH
34951: LD_VAR 0 2
34955: PPUSH
34956: CALL_OW 264
34960: PUSH
34961: LD_INT 81
34963: EQUAL
34964: AND
34965: IFFALSE 34986
// MinerDetonateMine ( unit , x , y ) ;
34967: LD_VAR 0 2
34971: PPUSH
34972: LD_VAR 0 4
34976: PPUSH
34977: LD_VAR 0 5
34981: PPUSH
34982: CALL 38351 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34986: LD_VAR 0 1
34990: PUSH
34991: LD_INT 252
34993: EQUAL
34994: IFFALSE 35011
34996: PUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: CALL_OW 264
35006: PUSH
35007: LD_INT 81
35009: EQUAL
35010: AND
35011: IFFALSE 35032
// MinerCreateMinefield ( unit , x , y ) ;
35013: LD_VAR 0 2
35017: PPUSH
35018: LD_VAR 0 4
35022: PPUSH
35023: LD_VAR 0 5
35027: PPUSH
35028: CALL 38770 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35032: LD_VAR 0 1
35036: PUSH
35037: LD_INT 253
35039: EQUAL
35040: IFFALSE 35057
35042: PUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: CALL_OW 257
35052: PUSH
35053: LD_INT 5
35055: EQUAL
35056: AND
35057: IFFALSE 35078
// ComBinocular ( unit , x , y ) ;
35059: LD_VAR 0 2
35063: PPUSH
35064: LD_VAR 0 4
35068: PPUSH
35069: LD_VAR 0 5
35073: PPUSH
35074: CALL 39145 0 3
// if selectedUnit then
35078: LD_VAR 0 3
35082: IFFALSE 35142
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35084: LD_VAR 0 1
35088: PUSH
35089: LD_INT 254
35091: EQUAL
35092: IFFALSE 35109
35094: PUSH
35095: LD_VAR 0 2
35099: PPUSH
35100: CALL_OW 264
35104: PUSH
35105: LD_INT 99
35107: EQUAL
35108: AND
35109: IFFALSE 35126
35111: PUSH
35112: LD_VAR 0 3
35116: PPUSH
35117: CALL_OW 263
35121: PUSH
35122: LD_INT 3
35124: EQUAL
35125: AND
35126: IFFALSE 35142
// HackDestroyVehicle ( unit , selectedUnit ) ;
35128: LD_VAR 0 2
35132: PPUSH
35133: LD_VAR 0 3
35137: PPUSH
35138: CALL 37432 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35142: LD_VAR 0 1
35146: PUSH
35147: LD_INT 255
35149: EQUAL
35150: IFFALSE 35174
35152: PUSH
35153: LD_VAR 0 2
35157: PPUSH
35158: CALL_OW 264
35162: PUSH
35163: LD_INT 14
35165: PUSH
35166: LD_INT 53
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: IN
35173: AND
35174: IFFALSE 35192
35176: PUSH
35177: LD_VAR 0 4
35181: PPUSH
35182: LD_VAR 0 5
35186: PPUSH
35187: CALL_OW 488
35191: AND
35192: IFFALSE 35216
// CutTreeXYR ( unit , x , y , 12 ) ;
35194: LD_VAR 0 2
35198: PPUSH
35199: LD_VAR 0 4
35203: PPUSH
35204: LD_VAR 0 5
35208: PPUSH
35209: LD_INT 12
35211: PPUSH
35212: CALL 35407 0 4
// if cmd = 256 then
35216: LD_VAR 0 1
35220: PUSH
35221: LD_INT 256
35223: EQUAL
35224: IFFALSE 35245
// SetFactoryWaypoint ( unit , x , y ) ;
35226: LD_VAR 0 2
35230: PPUSH
35231: LD_VAR 0 4
35235: PPUSH
35236: LD_VAR 0 5
35240: PPUSH
35241: CALL 32604 0 3
// if cmd = 257 then
35245: LD_VAR 0 1
35249: PUSH
35250: LD_INT 257
35252: EQUAL
35253: IFFALSE 35274
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35255: LD_VAR 0 2
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: LD_VAR 0 5
35269: PPUSH
35270: CALL 33100 0 3
// if cmd = 258 then
35274: LD_VAR 0 1
35278: PUSH
35279: LD_INT 258
35281: EQUAL
35282: IFFALSE 35306
// BurnTreeXYR ( unit , x , y , 8 ) ;
35284: LD_VAR 0 2
35288: PPUSH
35289: LD_VAR 0 4
35293: PPUSH
35294: LD_VAR 0 5
35298: PPUSH
35299: LD_INT 8
35301: PPUSH
35302: CALL 35807 0 4
// end ;
35306: LD_VAR 0 6
35310: RET
// export function ComRadiation ( un ) ; var eff ; begin
35311: LD_INT 0
35313: PPUSH
35314: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
35315: LD_VAR 0 1
35319: PPUSH
35320: CALL_OW 264
35324: PUSH
35325: LD_INT 91
35327: NONEQUAL
35328: IFFALSE 35332
// exit ;
35330: GO 35402
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35332: LD_INT 68
35334: PPUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: CALL_OW 255
35344: PPUSH
35345: CALL_OW 321
35349: PUSH
35350: LD_INT 2
35352: EQUAL
35353: IFFALSE 35365
// eff := 50 else
35355: LD_ADDR_VAR 0 3
35359: PUSH
35360: LD_INT 50
35362: ST_TO_ADDR
35363: GO 35373
// eff := 25 ;
35365: LD_ADDR_VAR 0 3
35369: PUSH
35370: LD_INT 25
35372: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35373: LD_VAR 0 1
35377: PPUSH
35378: CALL_OW 250
35382: PPUSH
35383: LD_VAR 0 1
35387: PPUSH
35388: CALL_OW 251
35392: PPUSH
35393: LD_VAR 0 3
35397: PPUSH
35398: CALL_OW 495
// end ;
35402: LD_VAR 0 2
35406: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35407: LD_INT 0
35409: PPUSH
35410: PPUSH
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
35415: PPUSH
35416: PPUSH
35417: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 302
35427: NOT
35428: IFTRUE 35447
35430: PUSH
35431: LD_VAR 0 2
35435: PPUSH
35436: LD_VAR 0 3
35440: PPUSH
35441: CALL_OW 488
35445: NOT
35446: OR
35447: IFTRUE 35456
35449: PUSH
35450: LD_VAR 0 4
35454: NOT
35455: OR
35456: IFFALSE 35460
// exit ;
35458: GO 35802
// list := [ ] ;
35460: LD_ADDR_VAR 0 13
35464: PUSH
35465: EMPTY
35466: ST_TO_ADDR
// if x - r < 0 then
35467: LD_VAR 0 2
35471: PUSH
35472: LD_VAR 0 4
35476: MINUS
35477: PUSH
35478: LD_INT 0
35480: LESS
35481: IFFALSE 35493
// min_x := 0 else
35483: LD_ADDR_VAR 0 7
35487: PUSH
35488: LD_INT 0
35490: ST_TO_ADDR
35491: GO 35509
// min_x := x - r ;
35493: LD_ADDR_VAR 0 7
35497: PUSH
35498: LD_VAR 0 2
35502: PUSH
35503: LD_VAR 0 4
35507: MINUS
35508: ST_TO_ADDR
// if y - r < 0 then
35509: LD_VAR 0 3
35513: PUSH
35514: LD_VAR 0 4
35518: MINUS
35519: PUSH
35520: LD_INT 0
35522: LESS
35523: IFFALSE 35535
// min_y := 0 else
35525: LD_ADDR_VAR 0 8
35529: PUSH
35530: LD_INT 0
35532: ST_TO_ADDR
35533: GO 35551
// min_y := y - r ;
35535: LD_ADDR_VAR 0 8
35539: PUSH
35540: LD_VAR 0 3
35544: PUSH
35545: LD_VAR 0 4
35549: MINUS
35550: ST_TO_ADDR
// max_x := x + r ;
35551: LD_ADDR_VAR 0 9
35555: PUSH
35556: LD_VAR 0 2
35560: PUSH
35561: LD_VAR 0 4
35565: PLUS
35566: ST_TO_ADDR
// max_y := y + r ;
35567: LD_ADDR_VAR 0 10
35571: PUSH
35572: LD_VAR 0 3
35576: PUSH
35577: LD_VAR 0 4
35581: PLUS
35582: ST_TO_ADDR
// for _x = min_x to max_x do
35583: LD_ADDR_VAR 0 11
35587: PUSH
35588: DOUBLE
35589: LD_VAR 0 7
35593: DEC
35594: ST_TO_ADDR
35595: LD_VAR 0 9
35599: PUSH
35600: FOR_TO
35601: IFFALSE 35720
// for _y = min_y to max_y do
35603: LD_ADDR_VAR 0 12
35607: PUSH
35608: DOUBLE
35609: LD_VAR 0 8
35613: DEC
35614: ST_TO_ADDR
35615: LD_VAR 0 10
35619: PUSH
35620: FOR_TO
35621: IFFALSE 35716
// begin if not ValidHex ( _x , _y ) then
35623: LD_VAR 0 11
35627: PPUSH
35628: LD_VAR 0 12
35632: PPUSH
35633: CALL_OW 488
35637: NOT
35638: IFFALSE 35642
// continue ;
35640: GO 35620
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35642: LD_VAR 0 11
35646: PPUSH
35647: LD_VAR 0 12
35651: PPUSH
35652: CALL_OW 351
35656: IFFALSE 35674
35658: PUSH
35659: LD_VAR 0 11
35663: PPUSH
35664: LD_VAR 0 12
35668: PPUSH
35669: CALL_OW 554
35673: AND
35674: IFFALSE 35714
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35676: LD_ADDR_VAR 0 13
35680: PUSH
35681: LD_VAR 0 13
35685: PPUSH
35686: LD_VAR 0 13
35690: PUSH
35691: LD_INT 1
35693: PLUS
35694: PPUSH
35695: LD_VAR 0 11
35699: PUSH
35700: LD_VAR 0 12
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PPUSH
35709: CALL_OW 2
35713: ST_TO_ADDR
// end ;
35714: GO 35620
35716: POP
35717: POP
35718: GO 35600
35720: POP
35721: POP
// if not list then
35722: LD_VAR 0 13
35726: NOT
35727: IFFALSE 35731
// exit ;
35729: GO 35802
// for i in list do
35731: LD_ADDR_VAR 0 6
35735: PUSH
35736: LD_VAR 0 13
35740: PUSH
35741: FOR_IN
35742: IFFALSE 35800
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35744: LD_VAR 0 1
35748: PPUSH
35749: LD_STRING M
35751: PUSH
35752: LD_VAR 0 6
35756: PUSH
35757: LD_INT 1
35759: ARRAY
35760: PUSH
35761: LD_VAR 0 6
35765: PUSH
35766: LD_INT 2
35768: ARRAY
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: PPUSH
35794: CALL_OW 447
35798: GO 35741
35800: POP
35801: POP
// end ;
35802: LD_VAR 0 5
35806: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
35807: LD_INT 0
35809: PPUSH
35810: PPUSH
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
35819: LD_VAR 0 1
35823: PPUSH
35824: CALL_OW 302
35828: NOT
35829: IFTRUE 35848
35831: PUSH
35832: LD_VAR 0 2
35836: PPUSH
35837: LD_VAR 0 3
35841: PPUSH
35842: CALL_OW 488
35846: NOT
35847: OR
35848: IFTRUE 35857
35850: PUSH
35851: LD_VAR 0 4
35855: NOT
35856: OR
35857: IFFALSE 35861
// exit ;
35859: GO 36378
// list := [ ] ;
35861: LD_ADDR_VAR 0 13
35865: PUSH
35866: EMPTY
35867: ST_TO_ADDR
// if x - r < 0 then
35868: LD_VAR 0 2
35872: PUSH
35873: LD_VAR 0 4
35877: MINUS
35878: PUSH
35879: LD_INT 0
35881: LESS
35882: IFFALSE 35894
// min_x := 0 else
35884: LD_ADDR_VAR 0 7
35888: PUSH
35889: LD_INT 0
35891: ST_TO_ADDR
35892: GO 35910
// min_x := x - r ;
35894: LD_ADDR_VAR 0 7
35898: PUSH
35899: LD_VAR 0 2
35903: PUSH
35904: LD_VAR 0 4
35908: MINUS
35909: ST_TO_ADDR
// if y - r < 0 then
35910: LD_VAR 0 3
35914: PUSH
35915: LD_VAR 0 4
35919: MINUS
35920: PUSH
35921: LD_INT 0
35923: LESS
35924: IFFALSE 35936
// min_y := 0 else
35926: LD_ADDR_VAR 0 8
35930: PUSH
35931: LD_INT 0
35933: ST_TO_ADDR
35934: GO 35952
// min_y := y - r ;
35936: LD_ADDR_VAR 0 8
35940: PUSH
35941: LD_VAR 0 3
35945: PUSH
35946: LD_VAR 0 4
35950: MINUS
35951: ST_TO_ADDR
// max_x := x + r ;
35952: LD_ADDR_VAR 0 9
35956: PUSH
35957: LD_VAR 0 2
35961: PUSH
35962: LD_VAR 0 4
35966: PLUS
35967: ST_TO_ADDR
// max_y := y + r ;
35968: LD_ADDR_VAR 0 10
35972: PUSH
35973: LD_VAR 0 3
35977: PUSH
35978: LD_VAR 0 4
35982: PLUS
35983: ST_TO_ADDR
// for _x = min_x to max_x do
35984: LD_ADDR_VAR 0 11
35988: PUSH
35989: DOUBLE
35990: LD_VAR 0 7
35994: DEC
35995: ST_TO_ADDR
35996: LD_VAR 0 9
36000: PUSH
36001: FOR_TO
36002: IFFALSE 36121
// for _y = min_y to max_y do
36004: LD_ADDR_VAR 0 12
36008: PUSH
36009: DOUBLE
36010: LD_VAR 0 8
36014: DEC
36015: ST_TO_ADDR
36016: LD_VAR 0 10
36020: PUSH
36021: FOR_TO
36022: IFFALSE 36117
// begin if not ValidHex ( _x , _y ) then
36024: LD_VAR 0 11
36028: PPUSH
36029: LD_VAR 0 12
36033: PPUSH
36034: CALL_OW 488
36038: NOT
36039: IFFALSE 36043
// continue ;
36041: GO 36021
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36043: LD_VAR 0 11
36047: PPUSH
36048: LD_VAR 0 12
36052: PPUSH
36053: CALL_OW 351
36057: IFFALSE 36075
36059: PUSH
36060: LD_VAR 0 11
36064: PPUSH
36065: LD_VAR 0 12
36069: PPUSH
36070: CALL_OW 554
36074: AND
36075: IFFALSE 36115
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36077: LD_ADDR_VAR 0 13
36081: PUSH
36082: LD_VAR 0 13
36086: PPUSH
36087: LD_VAR 0 13
36091: PUSH
36092: LD_INT 1
36094: PLUS
36095: PPUSH
36096: LD_VAR 0 11
36100: PUSH
36101: LD_VAR 0 12
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PPUSH
36110: CALL_OW 2
36114: ST_TO_ADDR
// end ;
36115: GO 36021
36117: POP
36118: POP
36119: GO 36001
36121: POP
36122: POP
// if not list then
36123: LD_VAR 0 13
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 36378
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36132: LD_ADDR_VAR 0 13
36136: PUSH
36137: LD_VAR 0 1
36141: PPUSH
36142: LD_VAR 0 13
36146: PPUSH
36147: LD_INT 1
36149: PPUSH
36150: LD_INT 1
36152: PPUSH
36153: CALL 46021 0 4
36157: ST_TO_ADDR
// ComStop ( flame ) ;
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 141
// for i in list do
36167: LD_ADDR_VAR 0 6
36171: PUSH
36172: LD_VAR 0 13
36176: PUSH
36177: FOR_IN
36178: IFFALSE 36209
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36180: LD_VAR 0 1
36184: PPUSH
36185: LD_VAR 0 6
36189: PUSH
36190: LD_INT 1
36192: ARRAY
36193: PPUSH
36194: LD_VAR 0 6
36198: PUSH
36199: LD_INT 2
36201: ARRAY
36202: PPUSH
36203: CALL_OW 176
36207: GO 36177
36209: POP
36210: POP
// repeat wait ( 0 0$1 ) ;
36211: LD_INT 35
36213: PPUSH
36214: CALL_OW 67
// task := GetTaskList ( flame ) ;
36218: LD_ADDR_VAR 0 14
36222: PUSH
36223: LD_VAR 0 1
36227: PPUSH
36228: CALL_OW 437
36232: ST_TO_ADDR
// if not task then
36233: LD_VAR 0 14
36237: NOT
36238: IFFALSE 36242
// exit ;
36240: GO 36378
// if task [ 1 ] [ 1 ] <> | then
36242: LD_VAR 0 14
36246: PUSH
36247: LD_INT 1
36249: ARRAY
36250: PUSH
36251: LD_INT 1
36253: ARRAY
36254: PUSH
36255: LD_STRING |
36257: NONEQUAL
36258: IFFALSE 36262
// exit ;
36260: GO 36378
// _x := task [ 1 ] [ 2 ] ;
36262: LD_ADDR_VAR 0 11
36266: PUSH
36267: LD_VAR 0 14
36271: PUSH
36272: LD_INT 1
36274: ARRAY
36275: PUSH
36276: LD_INT 2
36278: ARRAY
36279: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36280: LD_ADDR_VAR 0 12
36284: PUSH
36285: LD_VAR 0 14
36289: PUSH
36290: LD_INT 1
36292: ARRAY
36293: PUSH
36294: LD_INT 3
36296: ARRAY
36297: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36298: LD_VAR 0 11
36302: PPUSH
36303: LD_VAR 0 12
36307: PPUSH
36308: CALL_OW 351
36312: NOT
36313: IFTRUE 36332
36315: PUSH
36316: LD_VAR 0 11
36320: PPUSH
36321: LD_VAR 0 12
36325: PPUSH
36326: CALL_OW 554
36330: NOT
36331: OR
36332: IFFALSE 36366
// begin task := Delete ( task , 1 ) ;
36334: LD_ADDR_VAR 0 14
36338: PUSH
36339: LD_VAR 0 14
36343: PPUSH
36344: LD_INT 1
36346: PPUSH
36347: CALL_OW 3
36351: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36352: LD_VAR 0 1
36356: PPUSH
36357: LD_VAR 0 14
36361: PPUSH
36362: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36366: LD_VAR 0 1
36370: PPUSH
36371: CALL_OW 314
36375: NOT
36376: IFFALSE 36211
// end ;
36378: LD_VAR 0 5
36382: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36383: LD_EXP 116
36387: NOT
36388: IFFALSE 36438
36390: GO 36392
36392: DISABLE
// begin initHack := true ;
36393: LD_ADDR_EXP 116
36397: PUSH
36398: LD_INT 1
36400: ST_TO_ADDR
// hackTanks := [ ] ;
36401: LD_ADDR_EXP 117
36405: PUSH
36406: EMPTY
36407: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36408: LD_ADDR_EXP 118
36412: PUSH
36413: EMPTY
36414: ST_TO_ADDR
// hackLimit := 3 ;
36415: LD_ADDR_EXP 119
36419: PUSH
36420: LD_INT 3
36422: ST_TO_ADDR
// hackDist := 12 ;
36423: LD_ADDR_EXP 120
36427: PUSH
36428: LD_INT 12
36430: ST_TO_ADDR
// hackCounter := [ ] ;
36431: LD_ADDR_EXP 121
36435: PUSH
36436: EMPTY
36437: ST_TO_ADDR
// end ;
36438: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36439: LD_EXP 116
36443: IFFALSE 36461
36445: PUSH
36446: LD_INT 34
36448: PUSH
36449: LD_INT 99
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PPUSH
36456: CALL_OW 69
36460: AND
36461: IFFALSE 36714
36463: GO 36465
36465: DISABLE
36466: LD_INT 0
36468: PPUSH
36469: PPUSH
// begin enable ;
36470: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36471: LD_ADDR_VAR 0 1
36475: PUSH
36476: LD_INT 34
36478: PUSH
36479: LD_INT 99
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PPUSH
36486: CALL_OW 69
36490: PUSH
36491: FOR_IN
36492: IFFALSE 36712
// begin if not i in hackTanks then
36494: LD_VAR 0 1
36498: PUSH
36499: LD_EXP 117
36503: IN
36504: NOT
36505: IFFALSE 36588
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36507: LD_ADDR_EXP 117
36511: PUSH
36512: LD_EXP 117
36516: PPUSH
36517: LD_EXP 117
36521: PUSH
36522: LD_INT 1
36524: PLUS
36525: PPUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 1
36535: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36536: LD_ADDR_EXP 118
36540: PUSH
36541: LD_EXP 118
36545: PPUSH
36546: LD_EXP 118
36550: PUSH
36551: LD_INT 1
36553: PLUS
36554: PPUSH
36555: EMPTY
36556: PPUSH
36557: CALL_OW 1
36561: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36562: LD_ADDR_EXP 121
36566: PUSH
36567: LD_EXP 121
36571: PPUSH
36572: LD_EXP 121
36576: PUSH
36577: LD_INT 1
36579: PLUS
36580: PPUSH
36581: EMPTY
36582: PPUSH
36583: CALL_OW 1
36587: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36588: LD_VAR 0 1
36592: PPUSH
36593: CALL_OW 302
36597: NOT
36598: IFFALSE 36611
// begin HackUnlinkAll ( i ) ;
36600: LD_VAR 0 1
36604: PPUSH
36605: CALL 36717 0 1
// continue ;
36609: GO 36491
// end ; HackCheckCapturedStatus ( i ) ;
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL 37162 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36620: LD_ADDR_VAR 0 2
36624: PUSH
36625: LD_INT 81
36627: PUSH
36628: LD_VAR 0 1
36632: PPUSH
36633: CALL_OW 255
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 33
36644: PUSH
36645: LD_INT 3
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 91
36654: PUSH
36655: LD_VAR 0 1
36659: PUSH
36660: LD_EXP 120
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 50
36672: PUSH
36673: EMPTY
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 69
36686: ST_TO_ADDR
// if not tmp then
36687: LD_VAR 0 2
36691: NOT
36692: IFFALSE 36696
// continue ;
36694: GO 36491
// HackLink ( i , tmp ) ;
36696: LD_VAR 0 1
36700: PPUSH
36701: LD_VAR 0 2
36705: PPUSH
36706: CALL 36853 0 2
// end ;
36710: GO 36491
36712: POP
36713: POP
// end ;
36714: PPOPN 2
36716: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36717: LD_INT 0
36719: PPUSH
36720: PPUSH
36721: PPUSH
// if not hack in hackTanks then
36722: LD_VAR 0 1
36726: PUSH
36727: LD_EXP 117
36731: IN
36732: NOT
36733: IFFALSE 36737
// exit ;
36735: GO 36848
// index := GetElementIndex ( hackTanks , hack ) ;
36737: LD_ADDR_VAR 0 4
36741: PUSH
36742: LD_EXP 117
36746: PPUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL 45316 0 2
36756: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36757: LD_EXP 118
36761: PUSH
36762: LD_VAR 0 4
36766: ARRAY
36767: IFFALSE 36848
// begin for i in hackTanksCaptured [ index ] do
36769: LD_ADDR_VAR 0 3
36773: PUSH
36774: LD_EXP 118
36778: PUSH
36779: LD_VAR 0 4
36783: ARRAY
36784: PUSH
36785: FOR_IN
36786: IFFALSE 36812
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36788: LD_VAR 0 3
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PPUSH
36797: LD_VAR 0 3
36801: PUSH
36802: LD_INT 2
36804: ARRAY
36805: PPUSH
36806: CALL_OW 235
36810: GO 36785
36812: POP
36813: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36814: LD_ADDR_EXP 118
36818: PUSH
36819: LD_EXP 118
36823: PPUSH
36824: LD_VAR 0 4
36828: PPUSH
36829: EMPTY
36830: PPUSH
36831: CALL_OW 1
36835: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36836: LD_VAR 0 1
36840: PPUSH
36841: LD_INT 0
36843: PPUSH
36844: CALL_OW 505
// end ; end ;
36848: LD_VAR 0 2
36852: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36853: LD_INT 0
36855: PPUSH
36856: PPUSH
36857: PPUSH
// if not hack in hackTanks or not vehicles then
36858: LD_VAR 0 1
36862: PUSH
36863: LD_EXP 117
36867: IN
36868: NOT
36869: IFTRUE 36878
36871: PUSH
36872: LD_VAR 0 2
36876: NOT
36877: OR
36878: IFFALSE 36882
// exit ;
36880: GO 37157
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36882: LD_ADDR_VAR 0 2
36886: PUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: LD_VAR 0 2
36896: PPUSH
36897: LD_INT 1
36899: PPUSH
36900: LD_INT 1
36902: PPUSH
36903: CALL 45968 0 4
36907: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36908: LD_ADDR_VAR 0 5
36912: PUSH
36913: LD_EXP 117
36917: PPUSH
36918: LD_VAR 0 1
36922: PPUSH
36923: CALL 45316 0 2
36927: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36928: LD_EXP 118
36932: PUSH
36933: LD_VAR 0 5
36937: ARRAY
36938: PUSH
36939: LD_EXP 119
36943: LESS
36944: IFFALSE 37133
// begin for i := 1 to vehicles do
36946: LD_ADDR_VAR 0 4
36950: PUSH
36951: DOUBLE
36952: LD_INT 1
36954: DEC
36955: ST_TO_ADDR
36956: LD_VAR 0 2
36960: PUSH
36961: FOR_TO
36962: IFFALSE 37131
// begin if hackTanksCaptured [ index ] = hackLimit then
36964: LD_EXP 118
36968: PUSH
36969: LD_VAR 0 5
36973: ARRAY
36974: PUSH
36975: LD_EXP 119
36979: EQUAL
36980: IFFALSE 36984
// break ;
36982: GO 37131
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36984: LD_ADDR_EXP 121
36988: PUSH
36989: LD_EXP 121
36993: PPUSH
36994: LD_VAR 0 5
36998: PPUSH
36999: LD_EXP 121
37003: PUSH
37004: LD_VAR 0 5
37008: ARRAY
37009: PUSH
37010: LD_INT 1
37012: PLUS
37013: PPUSH
37014: CALL_OW 1
37018: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37019: LD_ADDR_EXP 118
37023: PUSH
37024: LD_EXP 118
37028: PPUSH
37029: LD_VAR 0 5
37033: PUSH
37034: LD_EXP 118
37038: PUSH
37039: LD_VAR 0 5
37043: ARRAY
37044: PUSH
37045: LD_INT 1
37047: PLUS
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PPUSH
37053: LD_VAR 0 2
37057: PUSH
37058: LD_VAR 0 4
37062: ARRAY
37063: PUSH
37064: LD_VAR 0 2
37068: PUSH
37069: LD_VAR 0 4
37073: ARRAY
37074: PPUSH
37075: CALL_OW 255
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PPUSH
37084: CALL 45533 0 3
37088: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37089: LD_VAR 0 2
37093: PUSH
37094: LD_VAR 0 4
37098: ARRAY
37099: PPUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 255
37109: PPUSH
37110: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37114: LD_VAR 0 2
37118: PUSH
37119: LD_VAR 0 4
37123: ARRAY
37124: PPUSH
37125: CALL_OW 141
// end ;
37129: GO 36961
37131: POP
37132: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37133: LD_VAR 0 1
37137: PPUSH
37138: LD_EXP 118
37142: PUSH
37143: LD_VAR 0 5
37147: ARRAY
37148: PUSH
37149: LD_INT 0
37151: PLUS
37152: PPUSH
37153: CALL_OW 505
// end ;
37157: LD_VAR 0 3
37161: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37162: LD_INT 0
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
// if not hack in hackTanks then
37168: LD_VAR 0 1
37172: PUSH
37173: LD_EXP 117
37177: IN
37178: NOT
37179: IFFALSE 37183
// exit ;
37181: GO 37427
// index := GetElementIndex ( hackTanks , hack ) ;
37183: LD_ADDR_VAR 0 4
37187: PUSH
37188: LD_EXP 117
37192: PPUSH
37193: LD_VAR 0 1
37197: PPUSH
37198: CALL 45316 0 2
37202: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37203: LD_ADDR_VAR 0 3
37207: PUSH
37208: DOUBLE
37209: LD_EXP 118
37213: PUSH
37214: LD_VAR 0 4
37218: ARRAY
37219: INC
37220: ST_TO_ADDR
37221: LD_INT 1
37223: PUSH
37224: FOR_DOWNTO
37225: IFFALSE 37401
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37227: LD_ADDR_VAR 0 5
37231: PUSH
37232: LD_EXP 118
37236: PUSH
37237: LD_VAR 0 4
37241: ARRAY
37242: PUSH
37243: LD_VAR 0 3
37247: ARRAY
37248: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37249: LD_VAR 0 5
37253: PUSH
37254: LD_INT 1
37256: ARRAY
37257: PPUSH
37258: CALL_OW 302
37262: NOT
37263: IFTRUE 37291
37265: PUSH
37266: LD_VAR 0 5
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: PPUSH
37275: CALL_OW 255
37279: PUSH
37280: LD_VAR 0 1
37284: PPUSH
37285: CALL_OW 255
37289: NONEQUAL
37290: OR
37291: IFFALSE 37399
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37293: LD_VAR 0 5
37297: PUSH
37298: LD_INT 1
37300: ARRAY
37301: PPUSH
37302: CALL_OW 305
37306: IFFALSE 37334
37308: PUSH
37309: LD_VAR 0 5
37313: PUSH
37314: LD_INT 1
37316: ARRAY
37317: PPUSH
37318: CALL_OW 255
37322: PUSH
37323: LD_VAR 0 1
37327: PPUSH
37328: CALL_OW 255
37332: EQUAL
37333: AND
37334: IFFALSE 37358
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37336: LD_VAR 0 5
37340: PUSH
37341: LD_INT 1
37343: ARRAY
37344: PPUSH
37345: LD_VAR 0 5
37349: PUSH
37350: LD_INT 2
37352: ARRAY
37353: PPUSH
37354: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37358: LD_ADDR_EXP 118
37362: PUSH
37363: LD_EXP 118
37367: PPUSH
37368: LD_VAR 0 4
37372: PPUSH
37373: LD_EXP 118
37377: PUSH
37378: LD_VAR 0 4
37382: ARRAY
37383: PPUSH
37384: LD_VAR 0 3
37388: PPUSH
37389: CALL_OW 3
37393: PPUSH
37394: CALL_OW 1
37398: ST_TO_ADDR
// end ; end ;
37399: GO 37224
37401: POP
37402: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37403: LD_VAR 0 1
37407: PPUSH
37408: LD_EXP 118
37412: PUSH
37413: LD_VAR 0 4
37417: ARRAY
37418: PUSH
37419: LD_INT 0
37421: PLUS
37422: PPUSH
37423: CALL_OW 505
// end ;
37427: LD_VAR 0 2
37431: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37432: LD_INT 0
37434: PPUSH
37435: PPUSH
37436: PPUSH
37437: PPUSH
// if not hack in hackTanks then
37438: LD_VAR 0 1
37442: PUSH
37443: LD_EXP 117
37447: IN
37448: NOT
37449: IFFALSE 37453
// exit ;
37451: GO 37538
// index := GetElementIndex ( hackTanks , hack ) ;
37453: LD_ADDR_VAR 0 5
37457: PUSH
37458: LD_EXP 117
37462: PPUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL 45316 0 2
37472: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37473: LD_ADDR_VAR 0 4
37477: PUSH
37478: DOUBLE
37479: LD_INT 1
37481: DEC
37482: ST_TO_ADDR
37483: LD_EXP 118
37487: PUSH
37488: LD_VAR 0 5
37492: ARRAY
37493: PUSH
37494: FOR_TO
37495: IFFALSE 37536
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37497: LD_EXP 118
37501: PUSH
37502: LD_VAR 0 5
37506: ARRAY
37507: PUSH
37508: LD_VAR 0 4
37512: ARRAY
37513: PUSH
37514: LD_INT 1
37516: ARRAY
37517: PUSH
37518: LD_VAR 0 2
37522: EQUAL
37523: IFFALSE 37534
// KillUnit ( vehicle ) ;
37525: LD_VAR 0 2
37529: PPUSH
37530: CALL_OW 66
37534: GO 37494
37536: POP
37537: POP
// end ;
37538: LD_VAR 0 3
37542: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37543: LD_EXP 122
37547: NOT
37548: IFFALSE 37583
37550: GO 37552
37552: DISABLE
// begin initMiner := true ;
37553: LD_ADDR_EXP 122
37557: PUSH
37558: LD_INT 1
37560: ST_TO_ADDR
// minersList := [ ] ;
37561: LD_ADDR_EXP 123
37565: PUSH
37566: EMPTY
37567: ST_TO_ADDR
// minerMinesList := [ ] ;
37568: LD_ADDR_EXP 124
37572: PUSH
37573: EMPTY
37574: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37575: LD_ADDR_EXP 125
37579: PUSH
37580: LD_INT 5
37582: ST_TO_ADDR
// end ;
37583: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37584: LD_EXP 122
37588: IFFALSE 37606
37590: PUSH
37591: LD_INT 34
37593: PUSH
37594: LD_INT 81
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PPUSH
37601: CALL_OW 69
37605: AND
37606: IFFALSE 38069
37608: GO 37610
37610: DISABLE
37611: LD_INT 0
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
// begin enable ;
37617: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37618: LD_ADDR_VAR 0 1
37622: PUSH
37623: LD_INT 34
37625: PUSH
37626: LD_INT 81
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PPUSH
37633: CALL_OW 69
37637: PUSH
37638: FOR_IN
37639: IFFALSE 37711
// begin if not i in minersList then
37641: LD_VAR 0 1
37645: PUSH
37646: LD_EXP 123
37650: IN
37651: NOT
37652: IFFALSE 37709
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37654: LD_ADDR_EXP 123
37658: PUSH
37659: LD_EXP 123
37663: PPUSH
37664: LD_EXP 123
37668: PUSH
37669: LD_INT 1
37671: PLUS
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL_OW 1
37682: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37683: LD_ADDR_EXP 124
37687: PUSH
37688: LD_EXP 124
37692: PPUSH
37693: LD_EXP 124
37697: PUSH
37698: LD_INT 1
37700: PLUS
37701: PPUSH
37702: EMPTY
37703: PPUSH
37704: CALL_OW 1
37708: ST_TO_ADDR
// end end ;
37709: GO 37638
37711: POP
37712: POP
// for i := minerMinesList downto 1 do
37713: LD_ADDR_VAR 0 1
37717: PUSH
37718: DOUBLE
37719: LD_EXP 124
37723: INC
37724: ST_TO_ADDR
37725: LD_INT 1
37727: PUSH
37728: FOR_DOWNTO
37729: IFFALSE 38067
// begin if IsLive ( minersList [ i ] ) then
37731: LD_EXP 123
37735: PUSH
37736: LD_VAR 0 1
37740: ARRAY
37741: PPUSH
37742: CALL_OW 300
37746: IFFALSE 37774
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37748: LD_EXP 123
37752: PUSH
37753: LD_VAR 0 1
37757: ARRAY
37758: PPUSH
37759: LD_EXP 124
37763: PUSH
37764: LD_VAR 0 1
37768: ARRAY
37769: PPUSH
37770: CALL_OW 505
// if not minerMinesList [ i ] then
37774: LD_EXP 124
37778: PUSH
37779: LD_VAR 0 1
37783: ARRAY
37784: NOT
37785: IFFALSE 37789
// continue ;
37787: GO 37728
// for j := minerMinesList [ i ] downto 1 do
37789: LD_ADDR_VAR 0 2
37793: PUSH
37794: DOUBLE
37795: LD_EXP 124
37799: PUSH
37800: LD_VAR 0 1
37804: ARRAY
37805: INC
37806: ST_TO_ADDR
37807: LD_INT 1
37809: PUSH
37810: FOR_DOWNTO
37811: IFFALSE 38063
// begin side := GetSide ( minersList [ i ] ) ;
37813: LD_ADDR_VAR 0 3
37817: PUSH
37818: LD_EXP 123
37822: PUSH
37823: LD_VAR 0 1
37827: ARRAY
37828: PPUSH
37829: CALL_OW 255
37833: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37834: LD_ADDR_VAR 0 4
37838: PUSH
37839: LD_EXP 124
37843: PUSH
37844: LD_VAR 0 1
37848: ARRAY
37849: PUSH
37850: LD_VAR 0 2
37854: ARRAY
37855: PUSH
37856: LD_INT 1
37858: ARRAY
37859: PPUSH
37860: LD_EXP 124
37864: PUSH
37865: LD_VAR 0 1
37869: ARRAY
37870: PUSH
37871: LD_VAR 0 2
37875: ARRAY
37876: PUSH
37877: LD_INT 2
37879: ARRAY
37880: PPUSH
37881: CALL_OW 428
37885: ST_TO_ADDR
// if not tmp then
37886: LD_VAR 0 4
37890: NOT
37891: IFFALSE 37895
// continue ;
37893: GO 37810
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37895: LD_VAR 0 4
37899: PUSH
37900: LD_INT 81
37902: PUSH
37903: LD_VAR 0 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PPUSH
37912: CALL_OW 69
37916: IN
37917: IFFALSE 37967
37919: PUSH
37920: LD_EXP 124
37924: PUSH
37925: LD_VAR 0 1
37929: ARRAY
37930: PUSH
37931: LD_VAR 0 2
37935: ARRAY
37936: PUSH
37937: LD_INT 1
37939: ARRAY
37940: PPUSH
37941: LD_EXP 124
37945: PUSH
37946: LD_VAR 0 1
37950: ARRAY
37951: PUSH
37952: LD_VAR 0 2
37956: ARRAY
37957: PUSH
37958: LD_INT 2
37960: ARRAY
37961: PPUSH
37962: CALL_OW 458
37966: AND
37967: IFFALSE 38061
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37969: LD_EXP 124
37973: PUSH
37974: LD_VAR 0 1
37978: ARRAY
37979: PUSH
37980: LD_VAR 0 2
37984: ARRAY
37985: PUSH
37986: LD_INT 1
37988: ARRAY
37989: PPUSH
37990: LD_EXP 124
37994: PUSH
37995: LD_VAR 0 1
37999: ARRAY
38000: PUSH
38001: LD_VAR 0 2
38005: ARRAY
38006: PUSH
38007: LD_INT 2
38009: ARRAY
38010: PPUSH
38011: LD_VAR 0 3
38015: PPUSH
38016: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38020: LD_ADDR_EXP 124
38024: PUSH
38025: LD_EXP 124
38029: PPUSH
38030: LD_VAR 0 1
38034: PPUSH
38035: LD_EXP 124
38039: PUSH
38040: LD_VAR 0 1
38044: ARRAY
38045: PPUSH
38046: LD_VAR 0 2
38050: PPUSH
38051: CALL_OW 3
38055: PPUSH
38056: CALL_OW 1
38060: ST_TO_ADDR
// end ; end ;
38061: GO 37810
38063: POP
38064: POP
// end ;
38065: GO 37728
38067: POP
38068: POP
// end ;
38069: PPOPN 4
38071: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38072: LD_INT 0
38074: PPUSH
38075: PPUSH
// result := false ;
38076: LD_ADDR_VAR 0 4
38080: PUSH
38081: LD_INT 0
38083: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38084: LD_VAR 0 1
38088: PPUSH
38089: CALL_OW 264
38093: PUSH
38094: LD_INT 81
38096: EQUAL
38097: NOT
38098: IFFALSE 38102
// exit ;
38100: GO 38346
// index := GetElementIndex ( minersList , unit ) ;
38102: LD_ADDR_VAR 0 5
38106: PUSH
38107: LD_EXP 123
38111: PPUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL 45316 0 2
38121: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38122: LD_EXP 124
38126: PUSH
38127: LD_VAR 0 5
38131: ARRAY
38132: PUSH
38133: LD_EXP 125
38137: GREATEREQUAL
38138: IFFALSE 38142
// exit ;
38140: GO 38346
// ComMoveXY ( unit , x , y ) ;
38142: LD_VAR 0 1
38146: PPUSH
38147: LD_VAR 0 2
38151: PPUSH
38152: LD_VAR 0 3
38156: PPUSH
38157: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38161: LD_INT 35
38163: PPUSH
38164: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38168: LD_VAR 0 1
38172: PPUSH
38173: LD_VAR 0 2
38177: PPUSH
38178: LD_VAR 0 3
38182: PPUSH
38183: CALL 77362 0 3
38187: NOT
38188: IFFALSE 38201
38190: PUSH
38191: LD_VAR 0 1
38195: PPUSH
38196: CALL_OW 314
38200: AND
38201: IFFALSE 38205
// exit ;
38203: GO 38346
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38205: LD_VAR 0 2
38209: PPUSH
38210: LD_VAR 0 3
38214: PPUSH
38215: CALL_OW 428
38219: PUSH
38220: LD_VAR 0 1
38224: EQUAL
38225: IFFALSE 38239
38227: PUSH
38228: LD_VAR 0 1
38232: PPUSH
38233: CALL_OW 314
38237: NOT
38238: AND
38239: IFFALSE 38161
// PlaySoundXY ( x , y , PlantMine ) ;
38241: LD_VAR 0 2
38245: PPUSH
38246: LD_VAR 0 3
38250: PPUSH
38251: LD_STRING PlantMine
38253: PPUSH
38254: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38258: LD_VAR 0 2
38262: PPUSH
38263: LD_VAR 0 3
38267: PPUSH
38268: LD_VAR 0 1
38272: PPUSH
38273: CALL_OW 255
38277: PPUSH
38278: LD_INT 0
38280: PPUSH
38281: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38285: LD_ADDR_EXP 124
38289: PUSH
38290: LD_EXP 124
38294: PPUSH
38295: LD_VAR 0 5
38299: PUSH
38300: LD_EXP 124
38304: PUSH
38305: LD_VAR 0 5
38309: ARRAY
38310: PUSH
38311: LD_INT 1
38313: PLUS
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PPUSH
38319: LD_VAR 0 2
38323: PUSH
38324: LD_VAR 0 3
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PPUSH
38333: CALL 45533 0 3
38337: ST_TO_ADDR
// result := true ;
38338: LD_ADDR_VAR 0 4
38342: PUSH
38343: LD_INT 1
38345: ST_TO_ADDR
// end ;
38346: LD_VAR 0 4
38350: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38351: LD_INT 0
38353: PPUSH
38354: PPUSH
38355: PPUSH
// if not unit in minersList then
38356: LD_VAR 0 1
38360: PUSH
38361: LD_EXP 123
38365: IN
38366: NOT
38367: IFFALSE 38371
// exit ;
38369: GO 38765
// index := GetElementIndex ( minersList , unit ) ;
38371: LD_ADDR_VAR 0 6
38375: PUSH
38376: LD_EXP 123
38380: PPUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL 45316 0 2
38390: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38391: LD_ADDR_VAR 0 5
38395: PUSH
38396: DOUBLE
38397: LD_EXP 124
38401: PUSH
38402: LD_VAR 0 6
38406: ARRAY
38407: INC
38408: ST_TO_ADDR
38409: LD_INT 1
38411: PUSH
38412: FOR_DOWNTO
38413: IFFALSE 38576
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38415: LD_EXP 124
38419: PUSH
38420: LD_VAR 0 6
38424: ARRAY
38425: PUSH
38426: LD_VAR 0 5
38430: ARRAY
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PUSH
38436: LD_VAR 0 2
38440: EQUAL
38441: IFFALSE 38471
38443: PUSH
38444: LD_EXP 124
38448: PUSH
38449: LD_VAR 0 6
38453: ARRAY
38454: PUSH
38455: LD_VAR 0 5
38459: ARRAY
38460: PUSH
38461: LD_INT 2
38463: ARRAY
38464: PUSH
38465: LD_VAR 0 3
38469: EQUAL
38470: AND
38471: IFFALSE 38574
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38473: LD_EXP 124
38477: PUSH
38478: LD_VAR 0 6
38482: ARRAY
38483: PUSH
38484: LD_VAR 0 5
38488: ARRAY
38489: PUSH
38490: LD_INT 1
38492: ARRAY
38493: PPUSH
38494: LD_EXP 124
38498: PUSH
38499: LD_VAR 0 6
38503: ARRAY
38504: PUSH
38505: LD_VAR 0 5
38509: ARRAY
38510: PUSH
38511: LD_INT 2
38513: ARRAY
38514: PPUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 255
38524: PPUSH
38525: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38529: LD_ADDR_EXP 124
38533: PUSH
38534: LD_EXP 124
38538: PPUSH
38539: LD_VAR 0 6
38543: PPUSH
38544: LD_EXP 124
38548: PUSH
38549: LD_VAR 0 6
38553: ARRAY
38554: PPUSH
38555: LD_VAR 0 5
38559: PPUSH
38560: CALL_OW 3
38564: PPUSH
38565: CALL_OW 1
38569: ST_TO_ADDR
// exit ;
38570: POP
38571: POP
38572: GO 38765
// end ; end ;
38574: GO 38412
38576: POP
38577: POP
// for i := minerMinesList [ index ] downto 1 do
38578: LD_ADDR_VAR 0 5
38582: PUSH
38583: DOUBLE
38584: LD_EXP 124
38588: PUSH
38589: LD_VAR 0 6
38593: ARRAY
38594: INC
38595: ST_TO_ADDR
38596: LD_INT 1
38598: PUSH
38599: FOR_DOWNTO
38600: IFFALSE 38763
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38602: LD_EXP 124
38606: PUSH
38607: LD_VAR 0 6
38611: ARRAY
38612: PUSH
38613: LD_VAR 0 5
38617: ARRAY
38618: PUSH
38619: LD_INT 1
38621: ARRAY
38622: PPUSH
38623: LD_EXP 124
38627: PUSH
38628: LD_VAR 0 6
38632: ARRAY
38633: PUSH
38634: LD_VAR 0 5
38638: ARRAY
38639: PUSH
38640: LD_INT 2
38642: ARRAY
38643: PPUSH
38644: LD_VAR 0 2
38648: PPUSH
38649: LD_VAR 0 3
38653: PPUSH
38654: CALL_OW 298
38658: PUSH
38659: LD_INT 6
38661: LESS
38662: IFFALSE 38761
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38664: LD_EXP 124
38668: PUSH
38669: LD_VAR 0 6
38673: ARRAY
38674: PUSH
38675: LD_VAR 0 5
38679: ARRAY
38680: PUSH
38681: LD_INT 1
38683: ARRAY
38684: PPUSH
38685: LD_EXP 124
38689: PUSH
38690: LD_VAR 0 6
38694: ARRAY
38695: PUSH
38696: LD_VAR 0 5
38700: ARRAY
38701: PUSH
38702: LD_INT 2
38704: ARRAY
38705: PPUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 255
38715: PPUSH
38716: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38720: LD_ADDR_EXP 124
38724: PUSH
38725: LD_EXP 124
38729: PPUSH
38730: LD_VAR 0 6
38734: PPUSH
38735: LD_EXP 124
38739: PUSH
38740: LD_VAR 0 6
38744: ARRAY
38745: PPUSH
38746: LD_VAR 0 5
38750: PPUSH
38751: CALL_OW 3
38755: PPUSH
38756: CALL_OW 1
38760: ST_TO_ADDR
// end ; end ;
38761: GO 38599
38763: POP
38764: POP
// end ;
38765: LD_VAR 0 4
38769: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38770: LD_INT 0
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38781: LD_VAR 0 1
38785: PPUSH
38786: CALL_OW 264
38790: PUSH
38791: LD_INT 81
38793: EQUAL
38794: NOT
38795: IFTRUE 38810
38797: PUSH
38798: LD_VAR 0 1
38802: PUSH
38803: LD_EXP 123
38807: IN
38808: NOT
38809: OR
38810: IFFALSE 38814
// exit ;
38812: GO 39140
// index := GetElementIndex ( minersList , unit ) ;
38814: LD_ADDR_VAR 0 6
38818: PUSH
38819: LD_EXP 123
38823: PPUSH
38824: LD_VAR 0 1
38828: PPUSH
38829: CALL 45316 0 2
38833: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38834: LD_ADDR_VAR 0 8
38838: PUSH
38839: LD_EXP 125
38843: PUSH
38844: LD_EXP 124
38848: PUSH
38849: LD_VAR 0 6
38853: ARRAY
38854: MINUS
38855: ST_TO_ADDR
// if not minesFreeAmount then
38856: LD_VAR 0 8
38860: NOT
38861: IFFALSE 38865
// exit ;
38863: GO 39140
// tmp := [ ] ;
38865: LD_ADDR_VAR 0 7
38869: PUSH
38870: EMPTY
38871: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38872: LD_ADDR_VAR 0 5
38876: PUSH
38877: DOUBLE
38878: LD_INT 1
38880: DEC
38881: ST_TO_ADDR
38882: LD_VAR 0 8
38886: PUSH
38887: FOR_TO
38888: IFFALSE 39087
// begin _d := rand ( 0 , 5 ) ;
38890: LD_ADDR_VAR 0 11
38894: PUSH
38895: LD_INT 0
38897: PPUSH
38898: LD_INT 5
38900: PPUSH
38901: CALL_OW 12
38905: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38906: LD_ADDR_VAR 0 12
38910: PUSH
38911: LD_INT 2
38913: PPUSH
38914: LD_INT 6
38916: PPUSH
38917: CALL_OW 12
38921: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38922: LD_ADDR_VAR 0 9
38926: PUSH
38927: LD_VAR 0 2
38931: PPUSH
38932: LD_VAR 0 11
38936: PPUSH
38937: LD_VAR 0 12
38941: PPUSH
38942: CALL_OW 272
38946: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38947: LD_ADDR_VAR 0 10
38951: PUSH
38952: LD_VAR 0 3
38956: PPUSH
38957: LD_VAR 0 11
38961: PPUSH
38962: LD_VAR 0 12
38966: PPUSH
38967: CALL_OW 273
38971: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38972: LD_VAR 0 9
38976: PPUSH
38977: LD_VAR 0 10
38981: PPUSH
38982: CALL_OW 488
38986: IFFALSE 39010
38988: PUSH
38989: LD_VAR 0 9
38993: PUSH
38994: LD_VAR 0 10
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_VAR 0 7
39007: IN
39008: NOT
39009: AND
39010: IFFALSE 39029
39012: PUSH
39013: LD_VAR 0 9
39017: PPUSH
39018: LD_VAR 0 10
39022: PPUSH
39023: CALL_OW 458
39027: NOT
39028: AND
39029: IFFALSE 39071
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39031: LD_ADDR_VAR 0 7
39035: PUSH
39036: LD_VAR 0 7
39040: PPUSH
39041: LD_VAR 0 7
39045: PUSH
39046: LD_INT 1
39048: PLUS
39049: PPUSH
39050: LD_VAR 0 9
39054: PUSH
39055: LD_VAR 0 10
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PPUSH
39064: CALL_OW 1
39068: ST_TO_ADDR
39069: GO 39085
// i := i - 1 ;
39071: LD_ADDR_VAR 0 5
39075: PUSH
39076: LD_VAR 0 5
39080: PUSH
39081: LD_INT 1
39083: MINUS
39084: ST_TO_ADDR
// end ;
39085: GO 38887
39087: POP
39088: POP
// for i in tmp do
39089: LD_ADDR_VAR 0 5
39093: PUSH
39094: LD_VAR 0 7
39098: PUSH
39099: FOR_IN
39100: IFFALSE 39138
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39102: LD_VAR 0 1
39106: PPUSH
39107: LD_VAR 0 5
39111: PUSH
39112: LD_INT 1
39114: ARRAY
39115: PPUSH
39116: LD_VAR 0 5
39120: PUSH
39121: LD_INT 2
39123: ARRAY
39124: PPUSH
39125: CALL 38072 0 3
39129: NOT
39130: IFFALSE 39136
// exit ;
39132: POP
39133: POP
39134: GO 39140
39136: GO 39099
39138: POP
39139: POP
// end ;
39140: LD_VAR 0 4
39144: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
39145: LD_INT 0
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
// if GetClass ( unit ) <> class_sniper then
39156: LD_VAR 0 1
39160: PPUSH
39161: CALL_OW 257
39165: PUSH
39166: LD_INT 5
39168: NONEQUAL
39169: IFFALSE 39173
// exit ;
39171: GO 39643
// dist := 8 ;
39173: LD_ADDR_VAR 0 5
39177: PUSH
39178: LD_INT 8
39180: ST_TO_ADDR
// viewRange := 12 ;
39181: LD_ADDR_VAR 0 8
39185: PUSH
39186: LD_INT 12
39188: ST_TO_ADDR
// side := GetSide ( unit ) ;
39189: LD_ADDR_VAR 0 6
39193: PUSH
39194: LD_VAR 0 1
39198: PPUSH
39199: CALL_OW 255
39203: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39204: LD_INT 61
39206: PPUSH
39207: LD_VAR 0 6
39211: PPUSH
39212: CALL_OW 321
39216: PUSH
39217: LD_INT 2
39219: EQUAL
39220: IFFALSE 39230
// viewRange := 16 ;
39222: LD_ADDR_VAR 0 8
39226: PUSH
39227: LD_INT 16
39229: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39230: LD_VAR 0 1
39234: PPUSH
39235: LD_VAR 0 2
39239: PPUSH
39240: LD_VAR 0 3
39244: PPUSH
39245: CALL_OW 297
39249: PUSH
39250: LD_VAR 0 5
39254: GREATER
39255: IFFALSE 39334
// begin ComMoveXY ( unit , x , y ) ;
39257: LD_VAR 0 1
39261: PPUSH
39262: LD_VAR 0 2
39266: PPUSH
39267: LD_VAR 0 3
39271: PPUSH
39272: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39276: LD_INT 35
39278: PPUSH
39279: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39283: LD_VAR 0 1
39287: PPUSH
39288: LD_VAR 0 2
39292: PPUSH
39293: LD_VAR 0 3
39297: PPUSH
39298: CALL 77362 0 3
39302: NOT
39303: IFFALSE 39307
// exit ;
39305: GO 39643
// until GetDistUnitXY ( unit , x , y ) < dist ;
39307: LD_VAR 0 1
39311: PPUSH
39312: LD_VAR 0 2
39316: PPUSH
39317: LD_VAR 0 3
39321: PPUSH
39322: CALL_OW 297
39326: PUSH
39327: LD_VAR 0 5
39331: LESS
39332: IFFALSE 39276
// end ; ComTurnXY ( unit , x , y ) ;
39334: LD_VAR 0 1
39338: PPUSH
39339: LD_VAR 0 2
39343: PPUSH
39344: LD_VAR 0 3
39348: PPUSH
39349: CALL_OW 118
// repeat if Multiplayer then
39353: LD_OWVAR 4
39357: IFFALSE 39368
// wait ( 35 ) else
39359: LD_INT 35
39361: PPUSH
39362: CALL_OW 67
39366: GO 39375
// wait ( 5 ) ;
39368: LD_INT 5
39370: PPUSH
39371: CALL_OW 67
// _d := GetDir ( unit ) ;
39375: LD_ADDR_VAR 0 11
39379: PUSH
39380: LD_VAR 0 1
39384: PPUSH
39385: CALL_OW 254
39389: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
39390: LD_ADDR_VAR 0 7
39394: PUSH
39395: LD_VAR 0 1
39399: PPUSH
39400: CALL_OW 250
39404: PPUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 251
39414: PPUSH
39415: LD_VAR 0 2
39419: PPUSH
39420: LD_VAR 0 3
39424: PPUSH
39425: CALL 79998 0 4
39429: ST_TO_ADDR
// until dir = _d ;
39430: LD_VAR 0 7
39434: PUSH
39435: LD_VAR 0 11
39439: EQUAL
39440: IFFALSE 39353
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
39442: LD_ADDR_VAR 0 9
39446: PUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 250
39456: PPUSH
39457: LD_VAR 0 7
39461: PPUSH
39462: LD_VAR 0 5
39466: PPUSH
39467: CALL_OW 272
39471: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
39472: LD_ADDR_VAR 0 10
39476: PUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 251
39486: PPUSH
39487: LD_VAR 0 7
39491: PPUSH
39492: LD_VAR 0 5
39496: PPUSH
39497: CALL_OW 273
39501: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39502: LD_VAR 0 9
39506: PPUSH
39507: LD_VAR 0 10
39511: PPUSH
39512: CALL_OW 488
39516: NOT
39517: IFFALSE 39521
// exit ;
39519: GO 39643
// ComAnimCustom ( unit , 1 ) ;
39521: LD_VAR 0 1
39525: PPUSH
39526: LD_INT 1
39528: PPUSH
39529: CALL_OW 592
// p := 0 ;
39533: LD_ADDR_VAR 0 12
39537: PUSH
39538: LD_INT 0
39540: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39541: LD_VAR 0 9
39545: PPUSH
39546: LD_VAR 0 10
39550: PPUSH
39551: LD_VAR 0 6
39555: PPUSH
39556: LD_VAR 0 8
39560: PPUSH
39561: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
39565: LD_INT 35
39567: PPUSH
39568: CALL_OW 67
// p := Inc ( p ) ;
39572: LD_ADDR_VAR 0 12
39576: PUSH
39577: LD_VAR 0 12
39581: PPUSH
39582: CALL 79954 0 1
39586: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
39587: LD_VAR 0 12
39591: PUSH
39592: LD_INT 3
39594: EQUAL
39595: IFTRUE 39609
39597: PUSH
39598: LD_VAR 0 1
39602: PPUSH
39603: CALL_OW 302
39607: NOT
39608: OR
39609: IFTRUE 39622
39611: PUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 301
39621: OR
39622: IFFALSE 39565
// RemoveSeeing ( _x , _y , side ) ;
39624: LD_VAR 0 9
39628: PPUSH
39629: LD_VAR 0 10
39633: PPUSH
39634: LD_VAR 0 6
39638: PPUSH
39639: CALL_OW 331
// end ;
39643: LD_VAR 0 4
39647: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
39648: LD_INT 0
39650: PPUSH
39651: PPUSH
39652: PPUSH
39653: PPUSH
39654: PPUSH
39655: PPUSH
39656: PPUSH
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
// if not unit then
39661: LD_VAR 0 1
39665: NOT
39666: IFFALSE 39670
// exit ;
39668: GO 39941
// side := GetSide ( unit ) ;
39670: LD_ADDR_VAR 0 3
39674: PUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: CALL_OW 255
39684: ST_TO_ADDR
// x := GetX ( unit ) ;
39685: LD_ADDR_VAR 0 5
39689: PUSH
39690: LD_VAR 0 1
39694: PPUSH
39695: CALL_OW 250
39699: ST_TO_ADDR
// y := GetY ( unit ) ;
39700: LD_ADDR_VAR 0 6
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 251
39714: ST_TO_ADDR
// r := 8 ;
39715: LD_ADDR_VAR 0 4
39719: PUSH
39720: LD_INT 8
39722: ST_TO_ADDR
// if x - r < 0 then
39723: LD_VAR 0 5
39727: PUSH
39728: LD_VAR 0 4
39732: MINUS
39733: PUSH
39734: LD_INT 0
39736: LESS
39737: IFFALSE 39749
// min_x := 0 else
39739: LD_ADDR_VAR 0 7
39743: PUSH
39744: LD_INT 0
39746: ST_TO_ADDR
39747: GO 39765
// min_x := x - r ;
39749: LD_ADDR_VAR 0 7
39753: PUSH
39754: LD_VAR 0 5
39758: PUSH
39759: LD_VAR 0 4
39763: MINUS
39764: ST_TO_ADDR
// if y - r < 0 then
39765: LD_VAR 0 6
39769: PUSH
39770: LD_VAR 0 4
39774: MINUS
39775: PUSH
39776: LD_INT 0
39778: LESS
39779: IFFALSE 39791
// min_y := 0 else
39781: LD_ADDR_VAR 0 8
39785: PUSH
39786: LD_INT 0
39788: ST_TO_ADDR
39789: GO 39807
// min_y := y - r ;
39791: LD_ADDR_VAR 0 8
39795: PUSH
39796: LD_VAR 0 6
39800: PUSH
39801: LD_VAR 0 4
39805: MINUS
39806: ST_TO_ADDR
// max_x := x + r ;
39807: LD_ADDR_VAR 0 9
39811: PUSH
39812: LD_VAR 0 5
39816: PUSH
39817: LD_VAR 0 4
39821: PLUS
39822: ST_TO_ADDR
// max_y := y + r ;
39823: LD_ADDR_VAR 0 10
39827: PUSH
39828: LD_VAR 0 6
39832: PUSH
39833: LD_VAR 0 4
39837: PLUS
39838: ST_TO_ADDR
// for _x = min_x to max_x do
39839: LD_ADDR_VAR 0 11
39843: PUSH
39844: DOUBLE
39845: LD_VAR 0 7
39849: DEC
39850: ST_TO_ADDR
39851: LD_VAR 0 9
39855: PUSH
39856: FOR_TO
39857: IFFALSE 39939
// for _y = min_y to max_y do
39859: LD_ADDR_VAR 0 12
39863: PUSH
39864: DOUBLE
39865: LD_VAR 0 8
39869: DEC
39870: ST_TO_ADDR
39871: LD_VAR 0 10
39875: PUSH
39876: FOR_TO
39877: IFFALSE 39935
// begin if not ValidHex ( _x , _y ) then
39879: LD_VAR 0 11
39883: PPUSH
39884: LD_VAR 0 12
39888: PPUSH
39889: CALL_OW 488
39893: NOT
39894: IFFALSE 39898
// continue ;
39896: GO 39876
// if MineAtPos ( _x , _y ) then
39898: LD_VAR 0 11
39902: PPUSH
39903: LD_VAR 0 12
39907: PPUSH
39908: CALL_OW 458
39912: IFFALSE 39933
// ViewMineAtPos ( _x , _y , side ) ;
39914: LD_VAR 0 11
39918: PPUSH
39919: LD_VAR 0 12
39923: PPUSH
39924: LD_VAR 0 3
39928: PPUSH
39929: CALL_OW 457
// end ;
39933: GO 39876
39935: POP
39936: POP
39937: GO 39856
39939: POP
39940: POP
// end ;
39941: LD_VAR 0 2
39945: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
39946: LD_INT 0
39948: PPUSH
39949: PPUSH
39950: PPUSH
39951: PPUSH
39952: PPUSH
39953: PPUSH
// if not units then
39954: LD_VAR 0 1
39958: NOT
39959: IFFALSE 39963
// exit ;
39961: GO 40393
// scaners := [ ] ;
39963: LD_ADDR_VAR 0 6
39967: PUSH
39968: EMPTY
39969: ST_TO_ADDR
// for i in units do
39970: LD_ADDR_VAR 0 3
39974: PUSH
39975: LD_VAR 0 1
39979: PUSH
39980: FOR_IN
39981: IFFALSE 40138
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
39983: LD_VAR 0 3
39987: PPUSH
39988: CALL_OW 264
39992: PUSH
39993: LD_INT 11
39995: NONEQUAL
39996: IFTRUE 40010
39998: PUSH
39999: LD_VAR 0 3
40003: PPUSH
40004: CALL_OW 302
40008: NOT
40009: OR
40010: IFTRUE 40027
40012: PUSH
40013: LD_VAR 0 3
40017: PPUSH
40018: CALL_OW 110
40022: PUSH
40023: LD_INT 502
40025: EQUAL
40026: OR
40027: IFFALSE 40031
// continue ;
40029: GO 39980
// ComStop ( i ) ;
40031: LD_VAR 0 3
40035: PPUSH
40036: CALL_OW 141
// x := GetX ( i ) ;
40040: LD_ADDR_VAR 0 4
40044: PUSH
40045: LD_VAR 0 3
40049: PPUSH
40050: CALL_OW 250
40054: ST_TO_ADDR
// y := GetY ( i ) ;
40055: LD_ADDR_VAR 0 5
40059: PUSH
40060: LD_VAR 0 3
40064: PPUSH
40065: CALL_OW 251
40069: ST_TO_ADDR
// if GetSide ( i ) = your_side then
40070: LD_VAR 0 3
40074: PPUSH
40075: CALL_OW 255
40079: PUSH
40080: LD_OWVAR 2
40084: EQUAL
40085: IFFALSE 40104
// PlaySoundXY ( x , y , mineDetector ) ;
40087: LD_VAR 0 4
40091: PPUSH
40092: LD_VAR 0 5
40096: PPUSH
40097: LD_STRING mineDetector
40099: PPUSH
40100: CALL_OW 366
// scaners := Join ( scaners , i ) ;
40104: LD_ADDR_VAR 0 6
40108: PUSH
40109: LD_VAR 0 6
40113: PPUSH
40114: LD_VAR 0 3
40118: PPUSH
40119: CALL 78581 0 2
40123: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
40124: LD_VAR 0 3
40128: PPUSH
40129: LD_INT 502
40131: PPUSH
40132: CALL_OW 109
// end ;
40136: GO 39980
40138: POP
40139: POP
// if not scaners then
40140: LD_VAR 0 6
40144: NOT
40145: IFFALSE 40149
// exit ;
40147: GO 40393
// wait ( 3 ) ;
40149: LD_INT 3
40151: PPUSH
40152: CALL_OW 67
// timer := 6 ;
40156: LD_ADDR_VAR 0 7
40160: PUSH
40161: LD_INT 6
40163: ST_TO_ADDR
// repeat for i in scaners do
40164: LD_ADDR_VAR 0 3
40168: PUSH
40169: LD_VAR 0 6
40173: PUSH
40174: FOR_IN
40175: IFFALSE 40291
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
40177: LD_VAR 0 3
40181: PPUSH
40182: CALL_OW 302
40186: NOT
40187: IFTRUE 40200
40189: PUSH
40190: LD_VAR 0 3
40194: PPUSH
40195: CALL_OW 314
40199: OR
40200: IFTRUE 40231
40202: PUSH
40203: LD_VAR 0 3
40207: PPUSH
40208: CALL_OW 263
40212: PUSH
40213: LD_INT 1
40215: EQUAL
40216: IFFALSE 40230
40218: PUSH
40219: LD_VAR 0 3
40223: PPUSH
40224: CALL_OW 311
40228: NOT
40229: AND
40230: OR
40231: IFFALSE 40275
// begin SetUnitDisplayNumber ( i , 0 ) ;
40233: LD_VAR 0 3
40237: PPUSH
40238: LD_INT 0
40240: PPUSH
40241: CALL_OW 505
// SetTag ( i , 0 ) ;
40245: LD_VAR 0 3
40249: PPUSH
40250: LD_INT 0
40252: PPUSH
40253: CALL_OW 109
// scaners := scaners diff i ;
40257: LD_ADDR_VAR 0 6
40261: PUSH
40262: LD_VAR 0 6
40266: PUSH
40267: LD_VAR 0 3
40271: DIFF
40272: ST_TO_ADDR
// continue ;
40273: GO 40174
// end ; SetUnitDisplayNumber ( i , timer ) ;
40275: LD_VAR 0 3
40279: PPUSH
40280: LD_VAR 0 7
40284: PPUSH
40285: CALL_OW 505
// end ;
40289: GO 40174
40291: POP
40292: POP
// if not scaners then
40293: LD_VAR 0 6
40297: NOT
40298: IFFALSE 40302
// exit ;
40300: GO 40393
// timer := Dec ( timer ) ;
40302: LD_ADDR_VAR 0 7
40306: PUSH
40307: LD_VAR 0 7
40311: PPUSH
40312: CALL 79976 0 1
40316: ST_TO_ADDR
// wait ( 0 0$1 ) ;
40317: LD_INT 35
40319: PPUSH
40320: CALL_OW 67
// until timer = 0 ;
40324: LD_VAR 0 7
40328: PUSH
40329: LD_INT 0
40331: EQUAL
40332: IFFALSE 40164
// if not scaners then
40334: LD_VAR 0 6
40338: NOT
40339: IFFALSE 40343
// exit ;
40341: GO 40393
// for i in scaners do
40343: LD_ADDR_VAR 0 3
40347: PUSH
40348: LD_VAR 0 6
40352: PUSH
40353: FOR_IN
40354: IFFALSE 40391
// begin SetUnitDisplayNumber ( i , 0 ) ;
40356: LD_VAR 0 3
40360: PPUSH
40361: LD_INT 0
40363: PPUSH
40364: CALL_OW 505
// SetTag ( i , 0 ) ;
40368: LD_VAR 0 3
40372: PPUSH
40373: LD_INT 0
40375: PPUSH
40376: CALL_OW 109
// RevealDetectorMine ( i ) ;
40380: LD_VAR 0 3
40384: PPUSH
40385: CALL 39648 0 1
// end ;
40389: GO 40353
40391: POP
40392: POP
// end ;
40393: LD_VAR 0 2
40397: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
40398: LD_INT 0
40400: PPUSH
// if p1 = mine_detector_mode then
40401: LD_VAR 0 2
40405: PUSH
40406: LD_INT 103
40408: EQUAL
40409: IFFALSE 40420
// DetectMine ( units ) ;
40411: LD_VAR 0 1
40415: PPUSH
40416: CALL 39946 0 1
// end ; end_of_file
40420: LD_VAR 0 7
40424: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40425: LD_INT 0
40427: PPUSH
40428: PPUSH
// if exist_mode then
40429: LD_VAR 0 2
40433: IFFALSE 40479
// begin unit := CreateCharacter ( prefix & ident ) ;
40435: LD_ADDR_VAR 0 5
40439: PUSH
40440: LD_VAR 0 3
40444: PUSH
40445: LD_VAR 0 1
40449: STR
40450: PPUSH
40451: CALL_OW 34
40455: ST_TO_ADDR
// if unit then
40456: LD_VAR 0 5
40460: IFFALSE 40477
// DeleteCharacters ( prefix & ident ) ;
40462: LD_VAR 0 3
40466: PUSH
40467: LD_VAR 0 1
40471: STR
40472: PPUSH
40473: CALL_OW 40
// end else
40477: GO 40494
// unit := NewCharacter ( ident ) ;
40479: LD_ADDR_VAR 0 5
40483: PUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: CALL_OW 25
40493: ST_TO_ADDR
// result := unit ;
40494: LD_ADDR_VAR 0 4
40498: PUSH
40499: LD_VAR 0 5
40503: ST_TO_ADDR
// end ;
40504: LD_VAR 0 4
40508: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
40509: LD_INT 0
40511: PPUSH
40512: PPUSH
// if exist_mode then
40513: LD_VAR 0 2
40517: IFFALSE 40542
// unit := CreateCharacter ( prefix & ident ) else
40519: LD_ADDR_VAR 0 5
40523: PUSH
40524: LD_VAR 0 3
40528: PUSH
40529: LD_VAR 0 1
40533: STR
40534: PPUSH
40535: CALL_OW 34
40539: ST_TO_ADDR
40540: GO 40557
// unit := NewCharacter ( ident ) ;
40542: LD_ADDR_VAR 0 5
40546: PUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL_OW 25
40556: ST_TO_ADDR
// result := unit ;
40557: LD_ADDR_VAR 0 4
40561: PUSH
40562: LD_VAR 0 5
40566: ST_TO_ADDR
// end ;
40567: LD_VAR 0 4
40571: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40572: LD_INT 0
40574: PPUSH
40575: PPUSH
// if not side or not nation then
40576: LD_VAR 0 1
40580: NOT
40581: IFTRUE 40590
40583: PUSH
40584: LD_VAR 0 2
40588: NOT
40589: OR
40590: IFFALSE 40594
// exit ;
40592: GO 41388
// case nation of nation_american :
40594: LD_VAR 0 2
40598: PUSH
40599: LD_INT 1
40601: DOUBLE
40602: EQUAL
40603: IFTRUE 40607
40605: GO 40829
40607: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
40608: LD_ADDR_VAR 0 4
40612: PUSH
40613: LD_INT 35
40615: PUSH
40616: LD_INT 45
40618: PUSH
40619: LD_INT 46
40621: PUSH
40622: LD_INT 47
40624: PUSH
40625: LD_INT 82
40627: PUSH
40628: LD_INT 83
40630: PUSH
40631: LD_INT 84
40633: PUSH
40634: LD_INT 85
40636: PUSH
40637: LD_INT 86
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: LD_INT 6
40648: PUSH
40649: LD_INT 15
40651: PUSH
40652: LD_INT 16
40654: PUSH
40655: LD_INT 7
40657: PUSH
40658: LD_INT 12
40660: PUSH
40661: LD_INT 13
40663: PUSH
40664: LD_INT 10
40666: PUSH
40667: LD_INT 14
40669: PUSH
40670: LD_INT 20
40672: PUSH
40673: LD_INT 21
40675: PUSH
40676: LD_INT 22
40678: PUSH
40679: LD_INT 25
40681: PUSH
40682: LD_INT 32
40684: PUSH
40685: LD_INT 27
40687: PUSH
40688: LD_INT 36
40690: PUSH
40691: LD_INT 69
40693: PUSH
40694: LD_INT 39
40696: PUSH
40697: LD_INT 34
40699: PUSH
40700: LD_INT 40
40702: PUSH
40703: LD_INT 48
40705: PUSH
40706: LD_INT 49
40708: PUSH
40709: LD_INT 50
40711: PUSH
40712: LD_INT 51
40714: PUSH
40715: LD_INT 52
40717: PUSH
40718: LD_INT 53
40720: PUSH
40721: LD_INT 54
40723: PUSH
40724: LD_INT 55
40726: PUSH
40727: LD_INT 56
40729: PUSH
40730: LD_INT 57
40732: PUSH
40733: LD_INT 58
40735: PUSH
40736: LD_INT 59
40738: PUSH
40739: LD_INT 60
40741: PUSH
40742: LD_INT 61
40744: PUSH
40745: LD_INT 62
40747: PUSH
40748: LD_INT 80
40750: PUSH
40751: LD_INT 82
40753: PUSH
40754: LD_INT 83
40756: PUSH
40757: LD_INT 84
40759: PUSH
40760: LD_INT 85
40762: PUSH
40763: LD_INT 86
40765: PUSH
40766: LD_INT 90
40768: PUSH
40769: LD_INT 93
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: ST_TO_ADDR
40827: GO 41310
40829: LD_INT 2
40831: DOUBLE
40832: EQUAL
40833: IFTRUE 40837
40835: GO 41071
40837: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
40838: LD_ADDR_VAR 0 4
40842: PUSH
40843: LD_INT 35
40845: PUSH
40846: LD_INT 45
40848: PUSH
40849: LD_INT 46
40851: PUSH
40852: LD_INT 47
40854: PUSH
40855: LD_INT 82
40857: PUSH
40858: LD_INT 83
40860: PUSH
40861: LD_INT 84
40863: PUSH
40864: LD_INT 85
40866: PUSH
40867: LD_INT 87
40869: PUSH
40870: LD_INT 70
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 11
40878: PUSH
40879: LD_INT 3
40881: PUSH
40882: LD_INT 4
40884: PUSH
40885: LD_INT 5
40887: PUSH
40888: LD_INT 6
40890: PUSH
40891: LD_INT 15
40893: PUSH
40894: LD_INT 18
40896: PUSH
40897: LD_INT 7
40899: PUSH
40900: LD_INT 17
40902: PUSH
40903: LD_INT 8
40905: PUSH
40906: LD_INT 20
40908: PUSH
40909: LD_INT 21
40911: PUSH
40912: LD_INT 22
40914: PUSH
40915: LD_INT 72
40917: PUSH
40918: LD_INT 26
40920: PUSH
40921: LD_INT 69
40923: PUSH
40924: LD_INT 39
40926: PUSH
40927: LD_INT 40
40929: PUSH
40930: LD_INT 41
40932: PUSH
40933: LD_INT 42
40935: PUSH
40936: LD_INT 43
40938: PUSH
40939: LD_INT 48
40941: PUSH
40942: LD_INT 49
40944: PUSH
40945: LD_INT 50
40947: PUSH
40948: LD_INT 51
40950: PUSH
40951: LD_INT 52
40953: PUSH
40954: LD_INT 53
40956: PUSH
40957: LD_INT 54
40959: PUSH
40960: LD_INT 55
40962: PUSH
40963: LD_INT 56
40965: PUSH
40966: LD_INT 60
40968: PUSH
40969: LD_INT 61
40971: PUSH
40972: LD_INT 62
40974: PUSH
40975: LD_INT 66
40977: PUSH
40978: LD_INT 67
40980: PUSH
40981: LD_INT 68
40983: PUSH
40984: LD_INT 81
40986: PUSH
40987: LD_INT 82
40989: PUSH
40990: LD_INT 83
40992: PUSH
40993: LD_INT 84
40995: PUSH
40996: LD_INT 85
40998: PUSH
40999: LD_INT 87
41001: PUSH
41002: LD_INT 88
41004: PUSH
41005: LD_INT 92
41007: PUSH
41008: LD_INT 94
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: ST_TO_ADDR
41069: GO 41310
41071: LD_INT 3
41073: DOUBLE
41074: EQUAL
41075: IFTRUE 41079
41077: GO 41309
41079: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
41080: LD_ADDR_VAR 0 4
41084: PUSH
41085: LD_INT 46
41087: PUSH
41088: LD_INT 47
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: LD_INT 82
41099: PUSH
41100: LD_INT 83
41102: PUSH
41103: LD_INT 84
41105: PUSH
41106: LD_INT 85
41108: PUSH
41109: LD_INT 86
41111: PUSH
41112: LD_INT 11
41114: PUSH
41115: LD_INT 9
41117: PUSH
41118: LD_INT 20
41120: PUSH
41121: LD_INT 19
41123: PUSH
41124: LD_INT 21
41126: PUSH
41127: LD_INT 24
41129: PUSH
41130: LD_INT 22
41132: PUSH
41133: LD_INT 25
41135: PUSH
41136: LD_INT 28
41138: PUSH
41139: LD_INT 29
41141: PUSH
41142: LD_INT 30
41144: PUSH
41145: LD_INT 31
41147: PUSH
41148: LD_INT 37
41150: PUSH
41151: LD_INT 38
41153: PUSH
41154: LD_INT 32
41156: PUSH
41157: LD_INT 27
41159: PUSH
41160: LD_INT 33
41162: PUSH
41163: LD_INT 69
41165: PUSH
41166: LD_INT 39
41168: PUSH
41169: LD_INT 34
41171: PUSH
41172: LD_INT 40
41174: PUSH
41175: LD_INT 71
41177: PUSH
41178: LD_INT 23
41180: PUSH
41181: LD_INT 44
41183: PUSH
41184: LD_INT 48
41186: PUSH
41187: LD_INT 49
41189: PUSH
41190: LD_INT 50
41192: PUSH
41193: LD_INT 51
41195: PUSH
41196: LD_INT 52
41198: PUSH
41199: LD_INT 53
41201: PUSH
41202: LD_INT 54
41204: PUSH
41205: LD_INT 55
41207: PUSH
41208: LD_INT 56
41210: PUSH
41211: LD_INT 57
41213: PUSH
41214: LD_INT 58
41216: PUSH
41217: LD_INT 59
41219: PUSH
41220: LD_INT 63
41222: PUSH
41223: LD_INT 64
41225: PUSH
41226: LD_INT 65
41228: PUSH
41229: LD_INT 82
41231: PUSH
41232: LD_INT 83
41234: PUSH
41235: LD_INT 84
41237: PUSH
41238: LD_INT 85
41240: PUSH
41241: LD_INT 86
41243: PUSH
41244: LD_INT 89
41246: PUSH
41247: LD_INT 91
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: ST_TO_ADDR
41307: GO 41310
41309: POP
// if state > - 1 and state < 3 then
41310: LD_VAR 0 3
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: GREATER
41319: IFFALSE 41331
41321: PUSH
41322: LD_VAR 0 3
41326: PUSH
41327: LD_INT 3
41329: LESS
41330: AND
41331: IFFALSE 41388
// for i in result do
41333: LD_ADDR_VAR 0 5
41337: PUSH
41338: LD_VAR 0 4
41342: PUSH
41343: FOR_IN
41344: IFFALSE 41386
// if GetTech ( i , side ) <> state then
41346: LD_VAR 0 5
41350: PPUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 321
41360: PUSH
41361: LD_VAR 0 3
41365: NONEQUAL
41366: IFFALSE 41384
// result := result diff i ;
41368: LD_ADDR_VAR 0 4
41372: PUSH
41373: LD_VAR 0 4
41377: PUSH
41378: LD_VAR 0 5
41382: DIFF
41383: ST_TO_ADDR
41384: GO 41343
41386: POP
41387: POP
// end ;
41388: LD_VAR 0 4
41392: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41393: LD_INT 0
41395: PPUSH
41396: PPUSH
41397: PPUSH
// result := true ;
41398: LD_ADDR_VAR 0 3
41402: PUSH
41403: LD_INT 1
41405: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: LD_VAR 0 2
41415: PPUSH
41416: CALL_OW 480
41420: ST_TO_ADDR
// if not tmp then
41421: LD_VAR 0 5
41425: NOT
41426: IFFALSE 41430
// exit ;
41428: GO 41479
// for i in tmp do
41430: LD_ADDR_VAR 0 4
41434: PUSH
41435: LD_VAR 0 5
41439: PUSH
41440: FOR_IN
41441: IFFALSE 41477
// if GetTech ( i , side ) <> state_researched then
41443: LD_VAR 0 4
41447: PPUSH
41448: LD_VAR 0 1
41452: PPUSH
41453: CALL_OW 321
41457: PUSH
41458: LD_INT 2
41460: NONEQUAL
41461: IFFALSE 41475
// begin result := false ;
41463: LD_ADDR_VAR 0 3
41467: PUSH
41468: LD_INT 0
41470: ST_TO_ADDR
// exit ;
41471: POP
41472: POP
41473: GO 41479
// end ;
41475: GO 41440
41477: POP
41478: POP
// end ;
41479: LD_VAR 0 3
41483: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41484: LD_INT 0
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41499: LD_VAR 0 1
41503: NOT
41504: IFTRUE 41521
41506: PUSH
41507: LD_VAR 0 1
41511: PPUSH
41512: CALL_OW 257
41516: PUSH
41517: LD_INT 9
41519: NONEQUAL
41520: OR
41521: IFFALSE 41525
// exit ;
41523: GO 42104
// side := GetSide ( unit ) ;
41525: LD_ADDR_VAR 0 9
41529: PUSH
41530: LD_VAR 0 1
41534: PPUSH
41535: CALL_OW 255
41539: ST_TO_ADDR
// tech_space := tech_spacanom ;
41540: LD_ADDR_VAR 0 12
41544: PUSH
41545: LD_INT 29
41547: ST_TO_ADDR
// tech_time := tech_taurad ;
41548: LD_ADDR_VAR 0 13
41552: PUSH
41553: LD_INT 28
41555: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41556: LD_ADDR_VAR 0 11
41560: PUSH
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 310
41570: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41571: LD_VAR 0 11
41575: PPUSH
41576: CALL_OW 247
41580: PUSH
41581: LD_INT 2
41583: EQUAL
41584: IFFALSE 41588
// exit ;
41586: GO 42104
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41588: LD_ADDR_VAR 0 8
41592: PUSH
41593: LD_INT 81
41595: PUSH
41596: LD_VAR 0 9
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 3
41607: PUSH
41608: LD_INT 21
41610: PUSH
41611: LD_INT 3
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PPUSH
41626: CALL_OW 69
41630: ST_TO_ADDR
// if not tmp then
41631: LD_VAR 0 8
41635: NOT
41636: IFFALSE 41640
// exit ;
41638: GO 42104
// if in_unit then
41640: LD_VAR 0 11
41644: IFFALSE 41668
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41646: LD_ADDR_VAR 0 10
41650: PUSH
41651: LD_VAR 0 8
41655: PPUSH
41656: LD_VAR 0 11
41660: PPUSH
41661: CALL_OW 74
41665: ST_TO_ADDR
41666: GO 41688
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41668: LD_ADDR_VAR 0 10
41672: PUSH
41673: LD_VAR 0 8
41677: PPUSH
41678: LD_VAR 0 1
41682: PPUSH
41683: CALL_OW 74
41687: ST_TO_ADDR
// if not enemy then
41688: LD_VAR 0 10
41692: NOT
41693: IFFALSE 41697
// exit ;
41695: GO 42104
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41697: LD_VAR 0 11
41701: IFFALSE 41723
41703: PUSH
41704: LD_VAR 0 11
41708: PPUSH
41709: LD_VAR 0 10
41713: PPUSH
41714: CALL_OW 296
41718: PUSH
41719: LD_INT 13
41721: GREATER
41722: AND
41723: IFTRUE 41745
41725: PUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: LD_VAR 0 10
41735: PPUSH
41736: CALL_OW 296
41740: PUSH
41741: LD_INT 12
41743: GREATER
41744: OR
41745: IFFALSE 41749
// exit ;
41747: GO 42104
// missile := [ 1 ] ;
41749: LD_ADDR_VAR 0 14
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41760: LD_VAR 0 9
41764: PPUSH
41765: LD_VAR 0 12
41769: PPUSH
41770: CALL_OW 325
41774: IFFALSE 41803
// missile := Replace ( missile , missile + 1 , 2 ) ;
41776: LD_ADDR_VAR 0 14
41780: PUSH
41781: LD_VAR 0 14
41785: PPUSH
41786: LD_VAR 0 14
41790: PUSH
41791: LD_INT 1
41793: PLUS
41794: PPUSH
41795: LD_INT 2
41797: PPUSH
41798: CALL_OW 1
41802: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41803: LD_VAR 0 9
41807: PPUSH
41808: LD_VAR 0 13
41812: PPUSH
41813: CALL_OW 325
41817: IFFALSE 41841
41819: PUSH
41820: LD_VAR 0 10
41824: PPUSH
41825: CALL_OW 255
41829: PPUSH
41830: LD_VAR 0 13
41834: PPUSH
41835: CALL_OW 325
41839: NOT
41840: AND
41841: IFFALSE 41870
// missile := Replace ( missile , missile + 1 , 3 ) ;
41843: LD_ADDR_VAR 0 14
41847: PUSH
41848: LD_VAR 0 14
41852: PPUSH
41853: LD_VAR 0 14
41857: PUSH
41858: LD_INT 1
41860: PLUS
41861: PPUSH
41862: LD_INT 3
41864: PPUSH
41865: CALL_OW 1
41869: ST_TO_ADDR
// if missile < 2 then
41870: LD_VAR 0 14
41874: PUSH
41875: LD_INT 2
41877: LESS
41878: IFFALSE 41882
// exit ;
41880: GO 42104
// x := GetX ( enemy ) ;
41882: LD_ADDR_VAR 0 4
41886: PUSH
41887: LD_VAR 0 10
41891: PPUSH
41892: CALL_OW 250
41896: ST_TO_ADDR
// y := GetY ( enemy ) ;
41897: LD_ADDR_VAR 0 5
41901: PUSH
41902: LD_VAR 0 10
41906: PPUSH
41907: CALL_OW 251
41911: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41912: LD_ADDR_VAR 0 6
41916: PUSH
41917: LD_VAR 0 4
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PPUSH
41926: LD_INT 1
41928: PPUSH
41929: CALL_OW 12
41933: PLUS
41934: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41935: LD_ADDR_VAR 0 7
41939: PUSH
41940: LD_VAR 0 5
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PPUSH
41949: LD_INT 1
41951: PPUSH
41952: CALL_OW 12
41956: PLUS
41957: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41958: LD_VAR 0 6
41962: PPUSH
41963: LD_VAR 0 7
41967: PPUSH
41968: CALL_OW 488
41972: NOT
41973: IFFALSE 41995
// begin _x := x ;
41975: LD_ADDR_VAR 0 6
41979: PUSH
41980: LD_VAR 0 4
41984: ST_TO_ADDR
// _y := y ;
41985: LD_ADDR_VAR 0 7
41989: PUSH
41990: LD_VAR 0 5
41994: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_INT 1
42002: PPUSH
42003: LD_VAR 0 14
42007: PPUSH
42008: CALL_OW 12
42012: ST_TO_ADDR
// case i of 1 :
42013: LD_VAR 0 3
42017: PUSH
42018: LD_INT 1
42020: DOUBLE
42021: EQUAL
42022: IFTRUE 42026
42024: GO 42043
42026: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42027: LD_VAR 0 1
42031: PPUSH
42032: LD_VAR 0 10
42036: PPUSH
42037: CALL_OW 115
42041: GO 42104
42043: LD_INT 2
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42051
42049: GO 42073
42051: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42052: LD_VAR 0 1
42056: PPUSH
42057: LD_VAR 0 6
42061: PPUSH
42062: LD_VAR 0 7
42066: PPUSH
42067: CALL_OW 153
42071: GO 42104
42073: LD_INT 3
42075: DOUBLE
42076: EQUAL
42077: IFTRUE 42081
42079: GO 42103
42081: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42082: LD_VAR 0 1
42086: PPUSH
42087: LD_VAR 0 6
42091: PPUSH
42092: LD_VAR 0 7
42096: PPUSH
42097: CALL_OW 154
42101: GO 42104
42103: POP
// end ;
42104: LD_VAR 0 2
42108: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42109: LD_INT 0
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
42116: PPUSH
// if not unit or not building then
42117: LD_VAR 0 1
42121: NOT
42122: IFTRUE 42131
42124: PUSH
42125: LD_VAR 0 2
42129: NOT
42130: OR
42131: IFFALSE 42135
// exit ;
42133: GO 42293
// x := GetX ( building ) ;
42135: LD_ADDR_VAR 0 5
42139: PUSH
42140: LD_VAR 0 2
42144: PPUSH
42145: CALL_OW 250
42149: ST_TO_ADDR
// y := GetY ( building ) ;
42150: LD_ADDR_VAR 0 6
42154: PUSH
42155: LD_VAR 0 2
42159: PPUSH
42160: CALL_OW 251
42164: ST_TO_ADDR
// for i := 0 to 5 do
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: DOUBLE
42171: LD_INT 0
42173: DEC
42174: ST_TO_ADDR
42175: LD_INT 5
42177: PUSH
42178: FOR_TO
42179: IFFALSE 42291
// begin _x := ShiftX ( x , i , 3 ) ;
42181: LD_ADDR_VAR 0 7
42185: PUSH
42186: LD_VAR 0 5
42190: PPUSH
42191: LD_VAR 0 4
42195: PPUSH
42196: LD_INT 3
42198: PPUSH
42199: CALL_OW 272
42203: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42204: LD_ADDR_VAR 0 8
42208: PUSH
42209: LD_VAR 0 6
42213: PPUSH
42214: LD_VAR 0 4
42218: PPUSH
42219: LD_INT 3
42221: PPUSH
42222: CALL_OW 273
42226: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42227: LD_VAR 0 7
42231: PPUSH
42232: LD_VAR 0 8
42236: PPUSH
42237: CALL_OW 488
42241: NOT
42242: IFFALSE 42246
// continue ;
42244: GO 42178
// if HexInfo ( _x , _y ) = 0 then
42246: LD_VAR 0 7
42250: PPUSH
42251: LD_VAR 0 8
42255: PPUSH
42256: CALL_OW 428
42260: PUSH
42261: LD_INT 0
42263: EQUAL
42264: IFFALSE 42289
// begin ComMoveXY ( unit , _x , _y ) ;
42266: LD_VAR 0 1
42270: PPUSH
42271: LD_VAR 0 7
42275: PPUSH
42276: LD_VAR 0 8
42280: PPUSH
42281: CALL_OW 111
// exit ;
42285: POP
42286: POP
42287: GO 42293
// end ; end ;
42289: GO 42178
42291: POP
42292: POP
// end ;
42293: LD_VAR 0 3
42297: RET
// export function ScanBase ( side , base_area ) ; begin
42298: LD_INT 0
42300: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42301: LD_ADDR_VAR 0 3
42305: PUSH
42306: LD_VAR 0 2
42310: PPUSH
42311: LD_INT 81
42313: PUSH
42314: LD_VAR 0 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PPUSH
42323: CALL_OW 70
42327: ST_TO_ADDR
// end ;
42328: LD_VAR 0 3
42332: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42333: LD_INT 0
42335: PPUSH
42336: PPUSH
42337: PPUSH
42338: PPUSH
// result := false ;
42339: LD_ADDR_VAR 0 2
42343: PUSH
42344: LD_INT 0
42346: ST_TO_ADDR
// side := GetSide ( unit ) ;
42347: LD_ADDR_VAR 0 3
42351: PUSH
42352: LD_VAR 0 1
42356: PPUSH
42357: CALL_OW 255
42361: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42362: LD_ADDR_VAR 0 4
42366: PUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: CALL_OW 248
42376: ST_TO_ADDR
// case nat of 1 :
42377: LD_VAR 0 4
42381: PUSH
42382: LD_INT 1
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42390
42388: GO 42401
42390: POP
// tech := tech_lassight ; 2 :
42391: LD_ADDR_VAR 0 5
42395: PUSH
42396: LD_INT 12
42398: ST_TO_ADDR
42399: GO 42440
42401: LD_INT 2
42403: DOUBLE
42404: EQUAL
42405: IFTRUE 42409
42407: GO 42420
42409: POP
// tech := tech_mortar ; 3 :
42410: LD_ADDR_VAR 0 5
42414: PUSH
42415: LD_INT 41
42417: ST_TO_ADDR
42418: GO 42440
42420: LD_INT 3
42422: DOUBLE
42423: EQUAL
42424: IFTRUE 42428
42426: GO 42439
42428: POP
// tech := tech_bazooka ; end ;
42429: LD_ADDR_VAR 0 5
42433: PUSH
42434: LD_INT 44
42436: ST_TO_ADDR
42437: GO 42440
42439: POP
// if Researched ( side , tech ) then
42440: LD_VAR 0 3
42444: PPUSH
42445: LD_VAR 0 5
42449: PPUSH
42450: CALL_OW 325
42454: IFFALSE 42481
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42456: LD_ADDR_VAR 0 2
42460: PUSH
42461: LD_INT 5
42463: PUSH
42464: LD_INT 8
42466: PUSH
42467: LD_INT 9
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: PUSH
42475: LD_VAR 0 4
42479: ARRAY
42480: ST_TO_ADDR
// end ;
42481: LD_VAR 0 2
42485: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42486: LD_INT 0
42488: PPUSH
42489: PPUSH
42490: PPUSH
// if not mines then
42491: LD_VAR 0 2
42495: NOT
42496: IFFALSE 42500
// exit ;
42498: GO 42644
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42500: LD_ADDR_VAR 0 5
42504: PUSH
42505: LD_INT 81
42507: PUSH
42508: LD_VAR 0 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: LD_INT 21
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PPUSH
42538: CALL_OW 69
42542: ST_TO_ADDR
// for i in mines do
42543: LD_ADDR_VAR 0 4
42547: PUSH
42548: LD_VAR 0 2
42552: PUSH
42553: FOR_IN
42554: IFFALSE 42642
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42556: LD_VAR 0 4
42560: PUSH
42561: LD_INT 1
42563: ARRAY
42564: PPUSH
42565: LD_VAR 0 4
42569: PUSH
42570: LD_INT 2
42572: ARRAY
42573: PPUSH
42574: CALL_OW 458
42578: NOT
42579: IFFALSE 42583
// continue ;
42581: GO 42553
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42583: LD_VAR 0 4
42587: PUSH
42588: LD_INT 1
42590: ARRAY
42591: PPUSH
42592: LD_VAR 0 4
42596: PUSH
42597: LD_INT 2
42599: ARRAY
42600: PPUSH
42601: CALL_OW 428
42605: PUSH
42606: LD_VAR 0 5
42610: IN
42611: IFFALSE 42640
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42613: LD_VAR 0 4
42617: PUSH
42618: LD_INT 1
42620: ARRAY
42621: PPUSH
42622: LD_VAR 0 4
42626: PUSH
42627: LD_INT 2
42629: ARRAY
42630: PPUSH
42631: LD_VAR 0 1
42635: PPUSH
42636: CALL_OW 456
// end ;
42640: GO 42553
42642: POP
42643: POP
// end ;
42644: LD_VAR 0 3
42648: RET
// export function Count ( array ) ; begin
42649: LD_INT 0
42651: PPUSH
// result := array + 0 ;
42652: LD_ADDR_VAR 0 2
42656: PUSH
42657: LD_VAR 0 1
42661: PUSH
42662: LD_INT 0
42664: PLUS
42665: ST_TO_ADDR
// end ;
42666: LD_VAR 0 2
42670: RET
// export function IsEmpty ( building ) ; begin
42671: LD_INT 0
42673: PPUSH
// if not building then
42674: LD_VAR 0 1
42678: NOT
42679: IFFALSE 42683
// exit ;
42681: GO 42726
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42683: LD_ADDR_VAR 0 2
42687: PUSH
42688: LD_VAR 0 1
42692: PUSH
42693: LD_INT 22
42695: PUSH
42696: LD_VAR 0 1
42700: PPUSH
42701: CALL_OW 255
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 58
42712: PUSH
42713: EMPTY
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PPUSH
42720: CALL_OW 69
42724: IN
42725: ST_TO_ADDR
// end ;
42726: LD_VAR 0 2
42730: RET
// export function IsNotFull ( building ) ; var places ; begin
42731: LD_INT 0
42733: PPUSH
42734: PPUSH
// if not building then
42735: LD_VAR 0 1
42739: NOT
42740: IFFALSE 42744
// exit ;
42742: GO 42772
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42744: LD_ADDR_VAR 0 2
42748: PUSH
42749: LD_VAR 0 1
42753: PPUSH
42754: LD_INT 3
42756: PUSH
42757: LD_INT 62
42759: PUSH
42760: EMPTY
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PPUSH
42767: CALL_OW 72
42771: ST_TO_ADDR
// end ;
42772: LD_VAR 0 2
42776: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42777: LD_INT 0
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
// tmp := [ ] ;
42783: LD_ADDR_VAR 0 3
42787: PUSH
42788: EMPTY
42789: ST_TO_ADDR
// list := [ ] ;
42790: LD_ADDR_VAR 0 5
42794: PUSH
42795: EMPTY
42796: ST_TO_ADDR
// for i = 16 to 25 do
42797: LD_ADDR_VAR 0 4
42801: PUSH
42802: DOUBLE
42803: LD_INT 16
42805: DEC
42806: ST_TO_ADDR
42807: LD_INT 25
42809: PUSH
42810: FOR_TO
42811: IFFALSE 42884
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42813: LD_ADDR_VAR 0 3
42817: PUSH
42818: LD_VAR 0 3
42822: PUSH
42823: LD_INT 22
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: CALL_OW 255
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 91
42842: PUSH
42843: LD_VAR 0 1
42847: PUSH
42848: LD_INT 6
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 30
42858: PUSH
42859: LD_VAR 0 4
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: PPUSH
42876: CALL_OW 69
42880: ADD
42881: ST_TO_ADDR
42882: GO 42810
42884: POP
42885: POP
// for i = 1 to tmp do
42886: LD_ADDR_VAR 0 4
42890: PUSH
42891: DOUBLE
42892: LD_INT 1
42894: DEC
42895: ST_TO_ADDR
42896: LD_VAR 0 3
42900: PUSH
42901: FOR_TO
42902: IFFALSE 42990
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42904: LD_ADDR_VAR 0 5
42908: PUSH
42909: LD_VAR 0 5
42913: PUSH
42914: LD_VAR 0 3
42918: PUSH
42919: LD_VAR 0 4
42923: ARRAY
42924: PPUSH
42925: CALL_OW 266
42929: PUSH
42930: LD_VAR 0 3
42934: PUSH
42935: LD_VAR 0 4
42939: ARRAY
42940: PPUSH
42941: CALL_OW 250
42945: PUSH
42946: LD_VAR 0 3
42950: PUSH
42951: LD_VAR 0 4
42955: ARRAY
42956: PPUSH
42957: CALL_OW 251
42961: PUSH
42962: LD_VAR 0 3
42966: PUSH
42967: LD_VAR 0 4
42971: ARRAY
42972: PPUSH
42973: CALL_OW 254
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: ADD
42987: ST_TO_ADDR
42988: GO 42901
42990: POP
42991: POP
// result := list ;
42992: LD_ADDR_VAR 0 2
42996: PUSH
42997: LD_VAR 0 5
43001: ST_TO_ADDR
// end ;
43002: LD_VAR 0 2
43006: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43007: LD_INT 0
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
43014: PPUSH
43015: PPUSH
// if not factory then
43016: LD_VAR 0 1
43020: NOT
43021: IFFALSE 43025
// exit ;
43023: GO 43628
// if control = control_apeman then
43025: LD_VAR 0 4
43029: PUSH
43030: LD_INT 5
43032: EQUAL
43033: IFFALSE 43142
// begin tmp := UnitsInside ( factory ) ;
43035: LD_ADDR_VAR 0 8
43039: PUSH
43040: LD_VAR 0 1
43044: PPUSH
43045: CALL_OW 313
43049: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43050: LD_VAR 0 8
43054: PPUSH
43055: LD_INT 25
43057: PUSH
43058: LD_INT 12
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PPUSH
43065: CALL_OW 72
43069: NOT
43070: IFFALSE 43080
// control := control_manual ;
43072: LD_ADDR_VAR 0 4
43076: PUSH
43077: LD_INT 1
43079: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43080: LD_ADDR_VAR 0 8
43084: PUSH
43085: LD_VAR 0 1
43089: PPUSH
43090: CALL 42777 0 1
43094: ST_TO_ADDR
// if tmp then
43095: LD_VAR 0 8
43099: IFFALSE 43142
// begin for i in tmp do
43101: LD_ADDR_VAR 0 7
43105: PUSH
43106: LD_VAR 0 8
43110: PUSH
43111: FOR_IN
43112: IFFALSE 43140
// if i [ 1 ] = b_ext_radio then
43114: LD_VAR 0 7
43118: PUSH
43119: LD_INT 1
43121: ARRAY
43122: PUSH
43123: LD_INT 22
43125: EQUAL
43126: IFFALSE 43138
// begin control := control_remote ;
43128: LD_ADDR_VAR 0 4
43132: PUSH
43133: LD_INT 2
43135: ST_TO_ADDR
// break ;
43136: GO 43140
// end ;
43138: GO 43111
43140: POP
43141: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43142: LD_VAR 0 1
43146: PPUSH
43147: LD_VAR 0 2
43151: PPUSH
43152: LD_VAR 0 3
43156: PPUSH
43157: LD_VAR 0 4
43161: PPUSH
43162: LD_VAR 0 5
43166: PPUSH
43167: CALL_OW 448
43171: IFFALSE 43206
// begin result := [ chassis , engine , control , weapon ] ;
43173: LD_ADDR_VAR 0 6
43177: PUSH
43178: LD_VAR 0 2
43182: PUSH
43183: LD_VAR 0 3
43187: PUSH
43188: LD_VAR 0 4
43192: PUSH
43193: LD_VAR 0 5
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: ST_TO_ADDR
// exit ;
43204: GO 43628
// end ; _chassis := AvailableChassisList ( factory ) ;
43206: LD_ADDR_VAR 0 9
43210: PUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 475
43220: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43221: LD_ADDR_VAR 0 11
43225: PUSH
43226: LD_VAR 0 1
43230: PPUSH
43231: CALL_OW 476
43235: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43236: LD_ADDR_VAR 0 12
43240: PUSH
43241: LD_VAR 0 1
43245: PPUSH
43246: CALL_OW 477
43250: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43251: LD_ADDR_VAR 0 10
43255: PUSH
43256: LD_VAR 0 1
43260: PPUSH
43261: CALL_OW 478
43265: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43266: LD_VAR 0 9
43270: NOT
43271: IFTRUE 43280
43273: PUSH
43274: LD_VAR 0 11
43278: NOT
43279: OR
43280: IFTRUE 43289
43282: PUSH
43283: LD_VAR 0 12
43287: NOT
43288: OR
43289: IFTRUE 43298
43291: PUSH
43292: LD_VAR 0 10
43296: NOT
43297: OR
43298: IFFALSE 43333
// begin result := [ chassis , engine , control , weapon ] ;
43300: LD_ADDR_VAR 0 6
43304: PUSH
43305: LD_VAR 0 2
43309: PUSH
43310: LD_VAR 0 3
43314: PUSH
43315: LD_VAR 0 4
43319: PUSH
43320: LD_VAR 0 5
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: ST_TO_ADDR
// exit ;
43331: GO 43628
// end ; if not chassis in _chassis then
43333: LD_VAR 0 2
43337: PUSH
43338: LD_VAR 0 9
43342: IN
43343: NOT
43344: IFFALSE 43370
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43346: LD_ADDR_VAR 0 2
43350: PUSH
43351: LD_VAR 0 9
43355: PUSH
43356: LD_INT 1
43358: PPUSH
43359: LD_VAR 0 9
43363: PPUSH
43364: CALL_OW 12
43368: ARRAY
43369: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43370: LD_VAR 0 2
43374: PPUSH
43375: LD_VAR 0 3
43379: PPUSH
43380: CALL 43633 0 2
43384: NOT
43385: IFFALSE 43446
// repeat engine := _engine [ 1 ] ;
43387: LD_ADDR_VAR 0 3
43391: PUSH
43392: LD_VAR 0 11
43396: PUSH
43397: LD_INT 1
43399: ARRAY
43400: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43401: LD_ADDR_VAR 0 11
43405: PUSH
43406: LD_VAR 0 11
43410: PPUSH
43411: LD_INT 1
43413: PPUSH
43414: CALL_OW 3
43418: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43419: LD_VAR 0 2
43423: PPUSH
43424: LD_VAR 0 3
43428: PPUSH
43429: CALL 43633 0 2
43433: IFTRUE 43444
43435: PUSH
43436: LD_VAR 0 11
43440: PUSH
43441: EMPTY
43442: EQUAL
43443: OR
43444: IFFALSE 43387
// if not control in _control then
43446: LD_VAR 0 4
43450: PUSH
43451: LD_VAR 0 12
43455: IN
43456: NOT
43457: IFFALSE 43483
// control := _control [ rand ( 1 , _control ) ] ;
43459: LD_ADDR_VAR 0 4
43463: PUSH
43464: LD_VAR 0 12
43468: PUSH
43469: LD_INT 1
43471: PPUSH
43472: LD_VAR 0 12
43476: PPUSH
43477: CALL_OW 12
43481: ARRAY
43482: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43483: LD_VAR 0 2
43487: PPUSH
43488: LD_VAR 0 5
43492: PPUSH
43493: CALL 43855 0 2
43497: NOT
43498: IFFALSE 43559
// repeat weapon := _weapon [ 1 ] ;
43500: LD_ADDR_VAR 0 5
43504: PUSH
43505: LD_VAR 0 10
43509: PUSH
43510: LD_INT 1
43512: ARRAY
43513: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43514: LD_ADDR_VAR 0 10
43518: PUSH
43519: LD_VAR 0 10
43523: PPUSH
43524: LD_INT 1
43526: PPUSH
43527: CALL_OW 3
43531: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43532: LD_VAR 0 2
43536: PPUSH
43537: LD_VAR 0 5
43541: PPUSH
43542: CALL 43855 0 2
43546: IFTRUE 43557
43548: PUSH
43549: LD_VAR 0 10
43553: PUSH
43554: EMPTY
43555: EQUAL
43556: OR
43557: IFFALSE 43500
// result := [ ] ;
43559: LD_ADDR_VAR 0 6
43563: PUSH
43564: EMPTY
43565: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43566: LD_VAR 0 1
43570: PPUSH
43571: LD_VAR 0 2
43575: PPUSH
43576: LD_VAR 0 3
43580: PPUSH
43581: LD_VAR 0 4
43585: PPUSH
43586: LD_VAR 0 5
43590: PPUSH
43591: CALL_OW 448
43595: IFFALSE 43628
// result := [ chassis , engine , control , weapon ] ;
43597: LD_ADDR_VAR 0 6
43601: PUSH
43602: LD_VAR 0 2
43606: PUSH
43607: LD_VAR 0 3
43611: PUSH
43612: LD_VAR 0 4
43616: PUSH
43617: LD_VAR 0 5
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// end ;
43628: LD_VAR 0 6
43632: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43633: LD_INT 0
43635: PPUSH
// if not chassis or not engine then
43636: LD_VAR 0 1
43640: NOT
43641: IFTRUE 43650
43643: PUSH
43644: LD_VAR 0 2
43648: NOT
43649: OR
43650: IFFALSE 43654
// exit ;
43652: GO 43850
// case engine of engine_solar :
43654: LD_VAR 0 2
43658: PUSH
43659: LD_INT 2
43661: DOUBLE
43662: EQUAL
43663: IFTRUE 43667
43665: GO 43705
43667: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43668: LD_ADDR_VAR 0 3
43672: PUSH
43673: LD_INT 11
43675: PUSH
43676: LD_INT 12
43678: PUSH
43679: LD_INT 13
43681: PUSH
43682: LD_INT 14
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
43703: GO 43834
43705: LD_INT 1
43707: DOUBLE
43708: EQUAL
43709: IFTRUE 43713
43711: GO 43775
43713: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43714: LD_ADDR_VAR 0 3
43718: PUSH
43719: LD_INT 11
43721: PUSH
43722: LD_INT 12
43724: PUSH
43725: LD_INT 13
43727: PUSH
43728: LD_INT 14
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: LD_INT 4
43742: PUSH
43743: LD_INT 5
43745: PUSH
43746: LD_INT 21
43748: PUSH
43749: LD_INT 23
43751: PUSH
43752: LD_INT 22
43754: PUSH
43755: LD_INT 24
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: ST_TO_ADDR
43773: GO 43834
43775: LD_INT 3
43777: DOUBLE
43778: EQUAL
43779: IFTRUE 43783
43781: GO 43833
43783: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43784: LD_ADDR_VAR 0 3
43788: PUSH
43789: LD_INT 13
43791: PUSH
43792: LD_INT 14
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: LD_INT 3
43800: PUSH
43801: LD_INT 4
43803: PUSH
43804: LD_INT 5
43806: PUSH
43807: LD_INT 21
43809: PUSH
43810: LD_INT 22
43812: PUSH
43813: LD_INT 23
43815: PUSH
43816: LD_INT 24
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: ST_TO_ADDR
43831: GO 43834
43833: POP
// result := ( chassis in result ) ;
43834: LD_ADDR_VAR 0 3
43838: PUSH
43839: LD_VAR 0 1
43843: PUSH
43844: LD_VAR 0 3
43848: IN
43849: ST_TO_ADDR
// end ;
43850: LD_VAR 0 3
43854: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43855: LD_INT 0
43857: PPUSH
// if not chassis or not weapon then
43858: LD_VAR 0 1
43862: NOT
43863: IFTRUE 43872
43865: PUSH
43866: LD_VAR 0 2
43870: NOT
43871: OR
43872: IFFALSE 43876
// exit ;
43874: GO 44936
// case weapon of us_machine_gun :
43876: LD_VAR 0 2
43880: PUSH
43881: LD_INT 2
43883: DOUBLE
43884: EQUAL
43885: IFTRUE 43889
43887: GO 43919
43889: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43890: LD_ADDR_VAR 0 3
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 3
43903: PUSH
43904: LD_INT 4
43906: PUSH
43907: LD_INT 5
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: ST_TO_ADDR
43917: GO 44920
43919: LD_INT 3
43921: DOUBLE
43922: EQUAL
43923: IFTRUE 43927
43925: GO 43957
43927: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43928: LD_ADDR_VAR 0 3
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 2
43938: PUSH
43939: LD_INT 3
43941: PUSH
43942: LD_INT 4
43944: PUSH
43945: LD_INT 5
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
43955: GO 44920
43957: LD_INT 11
43959: DOUBLE
43960: EQUAL
43961: IFTRUE 43965
43963: GO 43995
43965: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43966: LD_ADDR_VAR 0 3
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 3
43979: PUSH
43980: LD_INT 4
43982: PUSH
43983: LD_INT 5
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: ST_TO_ADDR
43993: GO 44920
43995: LD_INT 4
43997: DOUBLE
43998: EQUAL
43999: IFTRUE 44003
44001: GO 44029
44003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44004: LD_ADDR_VAR 0 3
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: LD_INT 4
44017: PUSH
44018: LD_INT 5
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
44027: GO 44920
44029: LD_INT 5
44031: DOUBLE
44032: EQUAL
44033: IFTRUE 44037
44035: GO 44063
44037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44038: LD_ADDR_VAR 0 3
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 3
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: LD_INT 5
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: ST_TO_ADDR
44061: GO 44920
44063: LD_INT 9
44065: DOUBLE
44066: EQUAL
44067: IFTRUE 44071
44069: GO 44097
44071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44072: LD_ADDR_VAR 0 3
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 3
44082: PUSH
44083: LD_INT 4
44085: PUSH
44086: LD_INT 5
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: ST_TO_ADDR
44095: GO 44920
44097: LD_INT 7
44099: DOUBLE
44100: EQUAL
44101: IFTRUE 44105
44103: GO 44131
44105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44106: LD_ADDR_VAR 0 3
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: LD_INT 4
44119: PUSH
44120: LD_INT 5
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: ST_TO_ADDR
44129: GO 44920
44131: LD_INT 12
44133: DOUBLE
44134: EQUAL
44135: IFTRUE 44139
44137: GO 44165
44139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44140: LD_ADDR_VAR 0 3
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: LD_INT 3
44150: PUSH
44151: LD_INT 4
44153: PUSH
44154: LD_INT 5
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: ST_TO_ADDR
44163: GO 44920
44165: LD_INT 13
44167: DOUBLE
44168: EQUAL
44169: IFTRUE 44173
44171: GO 44199
44173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44174: LD_ADDR_VAR 0 3
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 3
44184: PUSH
44185: LD_INT 4
44187: PUSH
44188: LD_INT 5
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
44197: GO 44920
44199: LD_INT 14
44201: DOUBLE
44202: EQUAL
44203: IFTRUE 44207
44205: GO 44225
44207: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44208: LD_ADDR_VAR 0 3
44212: PUSH
44213: LD_INT 4
44215: PUSH
44216: LD_INT 5
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: ST_TO_ADDR
44223: GO 44920
44225: LD_INT 6
44227: DOUBLE
44228: EQUAL
44229: IFTRUE 44233
44231: GO 44251
44233: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44234: LD_ADDR_VAR 0 3
44238: PUSH
44239: LD_INT 4
44241: PUSH
44242: LD_INT 5
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: ST_TO_ADDR
44249: GO 44920
44251: LD_INT 10
44253: DOUBLE
44254: EQUAL
44255: IFTRUE 44259
44257: GO 44277
44259: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44260: LD_ADDR_VAR 0 3
44264: PUSH
44265: LD_INT 4
44267: PUSH
44268: LD_INT 5
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: ST_TO_ADDR
44275: GO 44920
44277: LD_INT 22
44279: DOUBLE
44280: EQUAL
44281: IFTRUE 44285
44283: GO 44311
44285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44286: LD_ADDR_VAR 0 3
44290: PUSH
44291: LD_INT 11
44293: PUSH
44294: LD_INT 12
44296: PUSH
44297: LD_INT 13
44299: PUSH
44300: LD_INT 14
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: ST_TO_ADDR
44309: GO 44920
44311: LD_INT 23
44313: DOUBLE
44314: EQUAL
44315: IFTRUE 44319
44317: GO 44345
44319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44320: LD_ADDR_VAR 0 3
44324: PUSH
44325: LD_INT 11
44327: PUSH
44328: LD_INT 12
44330: PUSH
44331: LD_INT 13
44333: PUSH
44334: LD_INT 14
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
44343: GO 44920
44345: LD_INT 24
44347: DOUBLE
44348: EQUAL
44349: IFTRUE 44353
44351: GO 44379
44353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44354: LD_ADDR_VAR 0 3
44358: PUSH
44359: LD_INT 11
44361: PUSH
44362: LD_INT 12
44364: PUSH
44365: LD_INT 13
44367: PUSH
44368: LD_INT 14
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: ST_TO_ADDR
44377: GO 44920
44379: LD_INT 30
44381: DOUBLE
44382: EQUAL
44383: IFTRUE 44387
44385: GO 44413
44387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44388: LD_ADDR_VAR 0 3
44392: PUSH
44393: LD_INT 11
44395: PUSH
44396: LD_INT 12
44398: PUSH
44399: LD_INT 13
44401: PUSH
44402: LD_INT 14
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
44411: GO 44920
44413: LD_INT 25
44415: DOUBLE
44416: EQUAL
44417: IFTRUE 44421
44419: GO 44439
44421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44422: LD_ADDR_VAR 0 3
44426: PUSH
44427: LD_INT 13
44429: PUSH
44430: LD_INT 14
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: ST_TO_ADDR
44437: GO 44920
44439: LD_INT 27
44441: DOUBLE
44442: EQUAL
44443: IFTRUE 44447
44445: GO 44465
44447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44448: LD_ADDR_VAR 0 3
44452: PUSH
44453: LD_INT 13
44455: PUSH
44456: LD_INT 14
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: ST_TO_ADDR
44463: GO 44920
44465: LD_INT 92
44467: DOUBLE
44468: EQUAL
44469: IFTRUE 44473
44471: GO 44499
44473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44474: LD_ADDR_VAR 0 3
44478: PUSH
44479: LD_INT 11
44481: PUSH
44482: LD_INT 12
44484: PUSH
44485: LD_INT 13
44487: PUSH
44488: LD_INT 14
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: ST_TO_ADDR
44497: GO 44920
44499: LD_INT 28
44501: DOUBLE
44502: EQUAL
44503: IFTRUE 44507
44505: GO 44525
44507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44508: LD_ADDR_VAR 0 3
44512: PUSH
44513: LD_INT 13
44515: PUSH
44516: LD_INT 14
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: ST_TO_ADDR
44523: GO 44920
44525: LD_INT 29
44527: DOUBLE
44528: EQUAL
44529: IFTRUE 44533
44531: GO 44551
44533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44534: LD_ADDR_VAR 0 3
44538: PUSH
44539: LD_INT 13
44541: PUSH
44542: LD_INT 14
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: ST_TO_ADDR
44549: GO 44920
44551: LD_INT 31
44553: DOUBLE
44554: EQUAL
44555: IFTRUE 44559
44557: GO 44577
44559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44560: LD_ADDR_VAR 0 3
44564: PUSH
44565: LD_INT 13
44567: PUSH
44568: LD_INT 14
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: ST_TO_ADDR
44575: GO 44920
44577: LD_INT 26
44579: DOUBLE
44580: EQUAL
44581: IFTRUE 44585
44583: GO 44603
44585: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44586: LD_ADDR_VAR 0 3
44590: PUSH
44591: LD_INT 13
44593: PUSH
44594: LD_INT 14
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: ST_TO_ADDR
44601: GO 44920
44603: LD_INT 42
44605: DOUBLE
44606: EQUAL
44607: IFTRUE 44611
44609: GO 44637
44611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44612: LD_ADDR_VAR 0 3
44616: PUSH
44617: LD_INT 21
44619: PUSH
44620: LD_INT 22
44622: PUSH
44623: LD_INT 23
44625: PUSH
44626: LD_INT 24
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: ST_TO_ADDR
44635: GO 44920
44637: LD_INT 43
44639: DOUBLE
44640: EQUAL
44641: IFTRUE 44645
44643: GO 44671
44645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44646: LD_ADDR_VAR 0 3
44650: PUSH
44651: LD_INT 21
44653: PUSH
44654: LD_INT 22
44656: PUSH
44657: LD_INT 23
44659: PUSH
44660: LD_INT 24
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: ST_TO_ADDR
44669: GO 44920
44671: LD_INT 44
44673: DOUBLE
44674: EQUAL
44675: IFTRUE 44679
44677: GO 44705
44679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44680: LD_ADDR_VAR 0 3
44684: PUSH
44685: LD_INT 21
44687: PUSH
44688: LD_INT 22
44690: PUSH
44691: LD_INT 23
44693: PUSH
44694: LD_INT 24
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: ST_TO_ADDR
44703: GO 44920
44705: LD_INT 45
44707: DOUBLE
44708: EQUAL
44709: IFTRUE 44713
44711: GO 44739
44713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44714: LD_ADDR_VAR 0 3
44718: PUSH
44719: LD_INT 21
44721: PUSH
44722: LD_INT 22
44724: PUSH
44725: LD_INT 23
44727: PUSH
44728: LD_INT 24
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: ST_TO_ADDR
44737: GO 44920
44739: LD_INT 49
44741: DOUBLE
44742: EQUAL
44743: IFTRUE 44747
44745: GO 44773
44747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44748: LD_ADDR_VAR 0 3
44752: PUSH
44753: LD_INT 21
44755: PUSH
44756: LD_INT 22
44758: PUSH
44759: LD_INT 23
44761: PUSH
44762: LD_INT 24
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: ST_TO_ADDR
44771: GO 44920
44773: LD_INT 51
44775: DOUBLE
44776: EQUAL
44777: IFTRUE 44781
44779: GO 44807
44781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44782: LD_ADDR_VAR 0 3
44786: PUSH
44787: LD_INT 21
44789: PUSH
44790: LD_INT 22
44792: PUSH
44793: LD_INT 23
44795: PUSH
44796: LD_INT 24
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
44805: GO 44920
44807: LD_INT 52
44809: DOUBLE
44810: EQUAL
44811: IFTRUE 44815
44813: GO 44841
44815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44816: LD_ADDR_VAR 0 3
44820: PUSH
44821: LD_INT 21
44823: PUSH
44824: LD_INT 22
44826: PUSH
44827: LD_INT 23
44829: PUSH
44830: LD_INT 24
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: ST_TO_ADDR
44839: GO 44920
44841: LD_INT 53
44843: DOUBLE
44844: EQUAL
44845: IFTRUE 44849
44847: GO 44867
44849: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44850: LD_ADDR_VAR 0 3
44854: PUSH
44855: LD_INT 23
44857: PUSH
44858: LD_INT 24
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: ST_TO_ADDR
44865: GO 44920
44867: LD_INT 46
44869: DOUBLE
44870: EQUAL
44871: IFTRUE 44875
44873: GO 44893
44875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44876: LD_ADDR_VAR 0 3
44880: PUSH
44881: LD_INT 23
44883: PUSH
44884: LD_INT 24
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: ST_TO_ADDR
44891: GO 44920
44893: LD_INT 47
44895: DOUBLE
44896: EQUAL
44897: IFTRUE 44901
44899: GO 44919
44901: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44902: LD_ADDR_VAR 0 3
44906: PUSH
44907: LD_INT 23
44909: PUSH
44910: LD_INT 24
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: ST_TO_ADDR
44917: GO 44920
44919: POP
// result := ( chassis in result ) ;
44920: LD_ADDR_VAR 0 3
44924: PUSH
44925: LD_VAR 0 1
44929: PUSH
44930: LD_VAR 0 3
44934: IN
44935: ST_TO_ADDR
// end ;
44936: LD_VAR 0 3
44940: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44941: LD_INT 0
44943: PPUSH
44944: PPUSH
44945: PPUSH
44946: PPUSH
44947: PPUSH
44948: PPUSH
44949: PPUSH
// result := array ;
44950: LD_ADDR_VAR 0 5
44954: PUSH
44955: LD_VAR 0 1
44959: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44960: LD_VAR 0 1
44964: NOT
44965: IFTRUE 44974
44967: PUSH
44968: LD_VAR 0 2
44972: NOT
44973: OR
44974: IFTRUE 44983
44976: PUSH
44977: LD_VAR 0 3
44981: NOT
44982: OR
44983: IFTRUE 44997
44985: PUSH
44986: LD_VAR 0 2
44990: PUSH
44991: LD_VAR 0 1
44995: GREATER
44996: OR
44997: IFTRUE 45011
44999: PUSH
45000: LD_VAR 0 3
45004: PUSH
45005: LD_VAR 0 1
45009: GREATER
45010: OR
45011: IFFALSE 45015
// exit ;
45013: GO 45311
// if direction then
45015: LD_VAR 0 4
45019: IFFALSE 45083
// begin d := 1 ;
45021: LD_ADDR_VAR 0 9
45025: PUSH
45026: LD_INT 1
45028: ST_TO_ADDR
// if i_from > i_to then
45029: LD_VAR 0 2
45033: PUSH
45034: LD_VAR 0 3
45038: GREATER
45039: IFFALSE 45065
// length := ( array - i_from ) + i_to else
45041: LD_ADDR_VAR 0 11
45045: PUSH
45046: LD_VAR 0 1
45050: PUSH
45051: LD_VAR 0 2
45055: MINUS
45056: PUSH
45057: LD_VAR 0 3
45061: PLUS
45062: ST_TO_ADDR
45063: GO 45081
// length := i_to - i_from ;
45065: LD_ADDR_VAR 0 11
45069: PUSH
45070: LD_VAR 0 3
45074: PUSH
45075: LD_VAR 0 2
45079: MINUS
45080: ST_TO_ADDR
// end else
45081: GO 45144
// begin d := - 1 ;
45083: LD_ADDR_VAR 0 9
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: ST_TO_ADDR
// if i_from > i_to then
45092: LD_VAR 0 2
45096: PUSH
45097: LD_VAR 0 3
45101: GREATER
45102: IFFALSE 45122
// length := i_from - i_to else
45104: LD_ADDR_VAR 0 11
45108: PUSH
45109: LD_VAR 0 2
45113: PUSH
45114: LD_VAR 0 3
45118: MINUS
45119: ST_TO_ADDR
45120: GO 45144
// length := ( array - i_to ) + i_from ;
45122: LD_ADDR_VAR 0 11
45126: PUSH
45127: LD_VAR 0 1
45131: PUSH
45132: LD_VAR 0 3
45136: MINUS
45137: PUSH
45138: LD_VAR 0 2
45142: PLUS
45143: ST_TO_ADDR
// end ; if not length then
45144: LD_VAR 0 11
45148: NOT
45149: IFFALSE 45153
// exit ;
45151: GO 45311
// tmp := array ;
45153: LD_ADDR_VAR 0 10
45157: PUSH
45158: LD_VAR 0 1
45162: ST_TO_ADDR
// for i = 1 to length do
45163: LD_ADDR_VAR 0 6
45167: PUSH
45168: DOUBLE
45169: LD_INT 1
45171: DEC
45172: ST_TO_ADDR
45173: LD_VAR 0 11
45177: PUSH
45178: FOR_TO
45179: IFFALSE 45299
// begin for j = 1 to array do
45181: LD_ADDR_VAR 0 7
45185: PUSH
45186: DOUBLE
45187: LD_INT 1
45189: DEC
45190: ST_TO_ADDR
45191: LD_VAR 0 1
45195: PUSH
45196: FOR_TO
45197: IFFALSE 45285
// begin k := j + d ;
45199: LD_ADDR_VAR 0 8
45203: PUSH
45204: LD_VAR 0 7
45208: PUSH
45209: LD_VAR 0 9
45213: PLUS
45214: ST_TO_ADDR
// if k > array then
45215: LD_VAR 0 8
45219: PUSH
45220: LD_VAR 0 1
45224: GREATER
45225: IFFALSE 45235
// k := 1 ;
45227: LD_ADDR_VAR 0 8
45231: PUSH
45232: LD_INT 1
45234: ST_TO_ADDR
// if not k then
45235: LD_VAR 0 8
45239: NOT
45240: IFFALSE 45252
// k := array ;
45242: LD_ADDR_VAR 0 8
45246: PUSH
45247: LD_VAR 0 1
45251: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45252: LD_ADDR_VAR 0 10
45256: PUSH
45257: LD_VAR 0 10
45261: PPUSH
45262: LD_VAR 0 8
45266: PPUSH
45267: LD_VAR 0 1
45271: PUSH
45272: LD_VAR 0 7
45276: ARRAY
45277: PPUSH
45278: CALL_OW 1
45282: ST_TO_ADDR
// end ;
45283: GO 45196
45285: POP
45286: POP
// array := tmp ;
45287: LD_ADDR_VAR 0 1
45291: PUSH
45292: LD_VAR 0 10
45296: ST_TO_ADDR
// end ;
45297: GO 45178
45299: POP
45300: POP
// result := array ;
45301: LD_ADDR_VAR 0 5
45305: PUSH
45306: LD_VAR 0 1
45310: ST_TO_ADDR
// end ;
45311: LD_VAR 0 5
45315: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45316: LD_INT 0
45318: PPUSH
45319: PPUSH
// result := 0 ;
45320: LD_ADDR_VAR 0 3
45324: PUSH
45325: LD_INT 0
45327: ST_TO_ADDR
// if not array or not value in array then
45328: LD_VAR 0 1
45332: NOT
45333: IFTRUE 45348
45335: PUSH
45336: LD_VAR 0 2
45340: PUSH
45341: LD_VAR 0 1
45345: IN
45346: NOT
45347: OR
45348: IFFALSE 45352
// exit ;
45350: GO 45406
// for i = 1 to array do
45352: LD_ADDR_VAR 0 4
45356: PUSH
45357: DOUBLE
45358: LD_INT 1
45360: DEC
45361: ST_TO_ADDR
45362: LD_VAR 0 1
45366: PUSH
45367: FOR_TO
45368: IFFALSE 45404
// if value = array [ i ] then
45370: LD_VAR 0 2
45374: PUSH
45375: LD_VAR 0 1
45379: PUSH
45380: LD_VAR 0 4
45384: ARRAY
45385: EQUAL
45386: IFFALSE 45402
// begin result := i ;
45388: LD_ADDR_VAR 0 3
45392: PUSH
45393: LD_VAR 0 4
45397: ST_TO_ADDR
// exit ;
45398: POP
45399: POP
45400: GO 45406
// end ;
45402: GO 45367
45404: POP
45405: POP
// end ;
45406: LD_VAR 0 3
45410: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45411: LD_INT 0
45413: PPUSH
// vc_chassis := chassis ;
45414: LD_ADDR_OWVAR 37
45418: PUSH
45419: LD_VAR 0 1
45423: ST_TO_ADDR
// vc_engine := engine ;
45424: LD_ADDR_OWVAR 39
45428: PUSH
45429: LD_VAR 0 2
45433: ST_TO_ADDR
// vc_control := control ;
45434: LD_ADDR_OWVAR 38
45438: PUSH
45439: LD_VAR 0 3
45443: ST_TO_ADDR
// vc_weapon := weapon ;
45444: LD_ADDR_OWVAR 40
45448: PUSH
45449: LD_VAR 0 4
45453: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45454: LD_ADDR_OWVAR 41
45458: PUSH
45459: LD_VAR 0 5
45463: ST_TO_ADDR
// end ;
45464: LD_VAR 0 6
45468: RET
// export function WantPlant ( unit ) ; var task ; begin
45469: LD_INT 0
45471: PPUSH
45472: PPUSH
// result := false ;
45473: LD_ADDR_VAR 0 2
45477: PUSH
45478: LD_INT 0
45480: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45481: LD_ADDR_VAR 0 3
45485: PUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 437
45495: ST_TO_ADDR
// if task then
45496: LD_VAR 0 3
45500: IFFALSE 45528
// if task [ 1 ] [ 1 ] = p then
45502: LD_VAR 0 3
45506: PUSH
45507: LD_INT 1
45509: ARRAY
45510: PUSH
45511: LD_INT 1
45513: ARRAY
45514: PUSH
45515: LD_STRING p
45517: EQUAL
45518: IFFALSE 45528
// result := true ;
45520: LD_ADDR_VAR 0 2
45524: PUSH
45525: LD_INT 1
45527: ST_TO_ADDR
// end ;
45528: LD_VAR 0 2
45532: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45533: LD_INT 0
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
// if pos < 1 then
45539: LD_VAR 0 2
45543: PUSH
45544: LD_INT 1
45546: LESS
45547: IFFALSE 45551
// exit ;
45549: GO 45854
// if pos = 1 then
45551: LD_VAR 0 2
45555: PUSH
45556: LD_INT 1
45558: EQUAL
45559: IFFALSE 45592
// result := Replace ( arr , pos [ 1 ] , value ) else
45561: LD_ADDR_VAR 0 4
45565: PUSH
45566: LD_VAR 0 1
45570: PPUSH
45571: LD_VAR 0 2
45575: PUSH
45576: LD_INT 1
45578: ARRAY
45579: PPUSH
45580: LD_VAR 0 3
45584: PPUSH
45585: CALL_OW 1
45589: ST_TO_ADDR
45590: GO 45854
// begin tmp := arr ;
45592: LD_ADDR_VAR 0 6
45596: PUSH
45597: LD_VAR 0 1
45601: ST_TO_ADDR
// s_arr := [ tmp ] ;
45602: LD_ADDR_VAR 0 7
45606: PUSH
45607: LD_VAR 0 6
45611: PUSH
45612: EMPTY
45613: LIST
45614: ST_TO_ADDR
// for i = 1 to pos - 1 do
45615: LD_ADDR_VAR 0 5
45619: PUSH
45620: DOUBLE
45621: LD_INT 1
45623: DEC
45624: ST_TO_ADDR
45625: LD_VAR 0 2
45629: PUSH
45630: LD_INT 1
45632: MINUS
45633: PUSH
45634: FOR_TO
45635: IFFALSE 45680
// begin tmp := tmp [ pos [ i ] ] ;
45637: LD_ADDR_VAR 0 6
45641: PUSH
45642: LD_VAR 0 6
45646: PUSH
45647: LD_VAR 0 2
45651: PUSH
45652: LD_VAR 0 5
45656: ARRAY
45657: ARRAY
45658: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45659: LD_ADDR_VAR 0 7
45663: PUSH
45664: LD_VAR 0 7
45668: PUSH
45669: LD_VAR 0 6
45673: PUSH
45674: EMPTY
45675: LIST
45676: ADD
45677: ST_TO_ADDR
// end ;
45678: GO 45634
45680: POP
45681: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45682: LD_ADDR_VAR 0 6
45686: PUSH
45687: LD_VAR 0 6
45691: PPUSH
45692: LD_VAR 0 2
45696: PUSH
45697: LD_VAR 0 2
45701: ARRAY
45702: PPUSH
45703: LD_VAR 0 3
45707: PPUSH
45708: CALL_OW 1
45712: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45713: LD_ADDR_VAR 0 7
45717: PUSH
45718: LD_VAR 0 7
45722: PPUSH
45723: LD_VAR 0 7
45727: PPUSH
45728: LD_VAR 0 6
45732: PPUSH
45733: CALL_OW 1
45737: ST_TO_ADDR
// for i = s_arr downto 2 do
45738: LD_ADDR_VAR 0 5
45742: PUSH
45743: DOUBLE
45744: LD_VAR 0 7
45748: INC
45749: ST_TO_ADDR
45750: LD_INT 2
45752: PUSH
45753: FOR_DOWNTO
45754: IFFALSE 45838
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45756: LD_ADDR_VAR 0 6
45760: PUSH
45761: LD_VAR 0 7
45765: PUSH
45766: LD_VAR 0 5
45770: PUSH
45771: LD_INT 1
45773: MINUS
45774: ARRAY
45775: PPUSH
45776: LD_VAR 0 2
45780: PUSH
45781: LD_VAR 0 5
45785: PUSH
45786: LD_INT 1
45788: MINUS
45789: ARRAY
45790: PPUSH
45791: LD_VAR 0 7
45795: PUSH
45796: LD_VAR 0 5
45800: ARRAY
45801: PPUSH
45802: CALL_OW 1
45806: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45807: LD_ADDR_VAR 0 7
45811: PUSH
45812: LD_VAR 0 7
45816: PPUSH
45817: LD_VAR 0 5
45821: PUSH
45822: LD_INT 1
45824: MINUS
45825: PPUSH
45826: LD_VAR 0 6
45830: PPUSH
45831: CALL_OW 1
45835: ST_TO_ADDR
// end ;
45836: GO 45753
45838: POP
45839: POP
// result := s_arr [ 1 ] ;
45840: LD_ADDR_VAR 0 4
45844: PUSH
45845: LD_VAR 0 7
45849: PUSH
45850: LD_INT 1
45852: ARRAY
45853: ST_TO_ADDR
// end ; end ;
45854: LD_VAR 0 4
45858: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45859: LD_INT 0
45861: PPUSH
45862: PPUSH
// if not list then
45863: LD_VAR 0 1
45867: NOT
45868: IFFALSE 45872
// exit ;
45870: GO 45963
// i := list [ pos1 ] ;
45872: LD_ADDR_VAR 0 5
45876: PUSH
45877: LD_VAR 0 1
45881: PUSH
45882: LD_VAR 0 2
45886: ARRAY
45887: ST_TO_ADDR
// if not i then
45888: LD_VAR 0 5
45892: NOT
45893: IFFALSE 45897
// exit ;
45895: GO 45963
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45897: LD_ADDR_VAR 0 1
45901: PUSH
45902: LD_VAR 0 1
45906: PPUSH
45907: LD_VAR 0 2
45911: PPUSH
45912: LD_VAR 0 1
45916: PUSH
45917: LD_VAR 0 3
45921: ARRAY
45922: PPUSH
45923: CALL_OW 1
45927: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45928: LD_ADDR_VAR 0 1
45932: PUSH
45933: LD_VAR 0 1
45937: PPUSH
45938: LD_VAR 0 3
45942: PPUSH
45943: LD_VAR 0 5
45947: PPUSH
45948: CALL_OW 1
45952: ST_TO_ADDR
// result := list ;
45953: LD_ADDR_VAR 0 4
45957: PUSH
45958: LD_VAR 0 1
45962: ST_TO_ADDR
// end ;
45963: LD_VAR 0 4
45967: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45968: LD_INT 0
45970: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45971: LD_ADDR_VAR 0 5
45975: PUSH
45976: LD_VAR 0 1
45980: PPUSH
45981: CALL_OW 250
45985: PPUSH
45986: LD_VAR 0 1
45990: PPUSH
45991: CALL_OW 251
45995: PPUSH
45996: LD_VAR 0 2
46000: PPUSH
46001: LD_VAR 0 3
46005: PPUSH
46006: LD_VAR 0 4
46010: PPUSH
46011: CALL 46393 0 5
46015: ST_TO_ADDR
// end ;
46016: LD_VAR 0 5
46020: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46021: LD_INT 0
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
// if not list or not unit then
46027: LD_VAR 0 2
46031: NOT
46032: IFTRUE 46041
46034: PUSH
46035: LD_VAR 0 1
46039: NOT
46040: OR
46041: IFFALSE 46045
// exit ;
46043: GO 46388
// result := [ ] ;
46045: LD_ADDR_VAR 0 5
46049: PUSH
46050: EMPTY
46051: ST_TO_ADDR
// for i in list do
46052: LD_ADDR_VAR 0 6
46056: PUSH
46057: LD_VAR 0 2
46061: PUSH
46062: FOR_IN
46063: IFFALSE 46281
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46065: LD_ADDR_VAR 0 8
46069: PUSH
46070: LD_VAR 0 1
46074: PPUSH
46075: LD_VAR 0 6
46079: PUSH
46080: LD_INT 1
46082: ARRAY
46083: PPUSH
46084: LD_VAR 0 6
46088: PUSH
46089: LD_INT 2
46091: ARRAY
46092: PPUSH
46093: CALL_OW 297
46097: ST_TO_ADDR
// if not Count ( result ) then
46098: LD_VAR 0 5
46102: PPUSH
46103: CALL 42649 0 1
46107: NOT
46108: IFFALSE 46141
// begin result := Join ( result , [ i , tmp ] ) ;
46110: LD_ADDR_VAR 0 5
46114: PUSH
46115: LD_VAR 0 5
46119: PPUSH
46120: LD_VAR 0 6
46124: PUSH
46125: LD_VAR 0 8
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PPUSH
46134: CALL 78581 0 2
46138: ST_TO_ADDR
// continue ;
46139: GO 46062
// end ; if result [ result ] [ 2 ] <= tmp then
46141: LD_VAR 0 5
46145: PUSH
46146: LD_VAR 0 5
46150: ARRAY
46151: PUSH
46152: LD_INT 2
46154: ARRAY
46155: PUSH
46156: LD_VAR 0 8
46160: LESSEQUAL
46161: IFFALSE 46194
// result := Join ( result , [ i , tmp ] ) else
46163: LD_ADDR_VAR 0 5
46167: PUSH
46168: LD_VAR 0 5
46172: PPUSH
46173: LD_VAR 0 6
46177: PUSH
46178: LD_VAR 0 8
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PPUSH
46187: CALL 78581 0 2
46191: ST_TO_ADDR
46192: GO 46279
// begin for j := 1 to Count ( result ) do
46194: LD_ADDR_VAR 0 7
46198: PUSH
46199: DOUBLE
46200: LD_INT 1
46202: DEC
46203: ST_TO_ADDR
46204: LD_VAR 0 5
46208: PPUSH
46209: CALL 42649 0 1
46213: PUSH
46214: FOR_TO
46215: IFFALSE 46277
// begin if tmp < result [ j ] [ 2 ] then
46217: LD_VAR 0 8
46221: PUSH
46222: LD_VAR 0 5
46226: PUSH
46227: LD_VAR 0 7
46231: ARRAY
46232: PUSH
46233: LD_INT 2
46235: ARRAY
46236: LESS
46237: IFFALSE 46275
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46239: LD_ADDR_VAR 0 5
46243: PUSH
46244: LD_VAR 0 5
46248: PPUSH
46249: LD_VAR 0 7
46253: PPUSH
46254: LD_VAR 0 6
46258: PUSH
46259: LD_VAR 0 8
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PPUSH
46268: CALL_OW 2
46272: ST_TO_ADDR
// break ;
46273: GO 46277
// end ; end ;
46275: GO 46214
46277: POP
46278: POP
// end ; end ;
46279: GO 46062
46281: POP
46282: POP
// if result and not asc then
46283: LD_VAR 0 5
46287: IFFALSE 46296
46289: PUSH
46290: LD_VAR 0 3
46294: NOT
46295: AND
46296: IFFALSE 46313
// result := ReverseArray ( result ) ;
46298: LD_ADDR_VAR 0 5
46302: PUSH
46303: LD_VAR 0 5
46307: PPUSH
46308: CALL 73671 0 1
46312: ST_TO_ADDR
// tmp := [ ] ;
46313: LD_ADDR_VAR 0 8
46317: PUSH
46318: EMPTY
46319: ST_TO_ADDR
// if mode then
46320: LD_VAR 0 4
46324: IFFALSE 46388
// begin for i := 1 to result do
46326: LD_ADDR_VAR 0 6
46330: PUSH
46331: DOUBLE
46332: LD_INT 1
46334: DEC
46335: ST_TO_ADDR
46336: LD_VAR 0 5
46340: PUSH
46341: FOR_TO
46342: IFFALSE 46376
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46344: LD_ADDR_VAR 0 8
46348: PUSH
46349: LD_VAR 0 8
46353: PPUSH
46354: LD_VAR 0 5
46358: PUSH
46359: LD_VAR 0 6
46363: ARRAY
46364: PUSH
46365: LD_INT 1
46367: ARRAY
46368: PPUSH
46369: CALL 78581 0 2
46373: ST_TO_ADDR
46374: GO 46341
46376: POP
46377: POP
// result := tmp ;
46378: LD_ADDR_VAR 0 5
46382: PUSH
46383: LD_VAR 0 8
46387: ST_TO_ADDR
// end ; end ;
46388: LD_VAR 0 5
46392: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46393: LD_INT 0
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
// if not list then
46399: LD_VAR 0 3
46403: NOT
46404: IFFALSE 46408
// exit ;
46406: GO 46798
// result := [ ] ;
46408: LD_ADDR_VAR 0 6
46412: PUSH
46413: EMPTY
46414: ST_TO_ADDR
// for i in list do
46415: LD_ADDR_VAR 0 7
46419: PUSH
46420: LD_VAR 0 3
46424: PUSH
46425: FOR_IN
46426: IFFALSE 46628
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46428: LD_ADDR_VAR 0 9
46432: PUSH
46433: LD_VAR 0 7
46437: PPUSH
46438: LD_VAR 0 1
46442: PPUSH
46443: LD_VAR 0 2
46447: PPUSH
46448: CALL_OW 297
46452: ST_TO_ADDR
// if not result then
46453: LD_VAR 0 6
46457: NOT
46458: IFFALSE 46484
// result := [ [ i , tmp ] ] else
46460: LD_ADDR_VAR 0 6
46464: PUSH
46465: LD_VAR 0 7
46469: PUSH
46470: LD_VAR 0 9
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: EMPTY
46480: LIST
46481: ST_TO_ADDR
46482: GO 46626
// begin if result [ result ] [ 2 ] <= tmp then
46484: LD_VAR 0 6
46488: PUSH
46489: LD_VAR 0 6
46493: ARRAY
46494: PUSH
46495: LD_INT 2
46497: ARRAY
46498: PUSH
46499: LD_VAR 0 9
46503: LESSEQUAL
46504: IFFALSE 46546
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46506: LD_ADDR_VAR 0 6
46510: PUSH
46511: LD_VAR 0 6
46515: PPUSH
46516: LD_VAR 0 6
46520: PUSH
46521: LD_INT 1
46523: PLUS
46524: PPUSH
46525: LD_VAR 0 7
46529: PUSH
46530: LD_VAR 0 9
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PPUSH
46539: CALL_OW 2
46543: ST_TO_ADDR
46544: GO 46626
// for j := 1 to result do
46546: LD_ADDR_VAR 0 8
46550: PUSH
46551: DOUBLE
46552: LD_INT 1
46554: DEC
46555: ST_TO_ADDR
46556: LD_VAR 0 6
46560: PUSH
46561: FOR_TO
46562: IFFALSE 46624
// begin if tmp < result [ j ] [ 2 ] then
46564: LD_VAR 0 9
46568: PUSH
46569: LD_VAR 0 6
46573: PUSH
46574: LD_VAR 0 8
46578: ARRAY
46579: PUSH
46580: LD_INT 2
46582: ARRAY
46583: LESS
46584: IFFALSE 46622
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46586: LD_ADDR_VAR 0 6
46590: PUSH
46591: LD_VAR 0 6
46595: PPUSH
46596: LD_VAR 0 8
46600: PPUSH
46601: LD_VAR 0 7
46605: PUSH
46606: LD_VAR 0 9
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PPUSH
46615: CALL_OW 2
46619: ST_TO_ADDR
// break ;
46620: GO 46624
// end ; end ;
46622: GO 46561
46624: POP
46625: POP
// end ; end ;
46626: GO 46425
46628: POP
46629: POP
// if result and not asc then
46630: LD_VAR 0 6
46634: IFFALSE 46643
46636: PUSH
46637: LD_VAR 0 4
46641: NOT
46642: AND
46643: IFFALSE 46718
// begin tmp := result ;
46645: LD_ADDR_VAR 0 9
46649: PUSH
46650: LD_VAR 0 6
46654: ST_TO_ADDR
// for i = tmp downto 1 do
46655: LD_ADDR_VAR 0 7
46659: PUSH
46660: DOUBLE
46661: LD_VAR 0 9
46665: INC
46666: ST_TO_ADDR
46667: LD_INT 1
46669: PUSH
46670: FOR_DOWNTO
46671: IFFALSE 46716
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46673: LD_ADDR_VAR 0 6
46677: PUSH
46678: LD_VAR 0 6
46682: PPUSH
46683: LD_VAR 0 9
46687: PUSH
46688: LD_VAR 0 7
46692: MINUS
46693: PUSH
46694: LD_INT 1
46696: PLUS
46697: PPUSH
46698: LD_VAR 0 9
46702: PUSH
46703: LD_VAR 0 7
46707: ARRAY
46708: PPUSH
46709: CALL_OW 1
46713: ST_TO_ADDR
46714: GO 46670
46716: POP
46717: POP
// end ; tmp := [ ] ;
46718: LD_ADDR_VAR 0 9
46722: PUSH
46723: EMPTY
46724: ST_TO_ADDR
// if mode then
46725: LD_VAR 0 5
46729: IFFALSE 46798
// begin for i = 1 to result do
46731: LD_ADDR_VAR 0 7
46735: PUSH
46736: DOUBLE
46737: LD_INT 1
46739: DEC
46740: ST_TO_ADDR
46741: LD_VAR 0 6
46745: PUSH
46746: FOR_TO
46747: IFFALSE 46786
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46749: LD_ADDR_VAR 0 9
46753: PUSH
46754: LD_VAR 0 9
46758: PPUSH
46759: LD_VAR 0 7
46763: PPUSH
46764: LD_VAR 0 6
46768: PUSH
46769: LD_VAR 0 7
46773: ARRAY
46774: PUSH
46775: LD_INT 1
46777: ARRAY
46778: PPUSH
46779: CALL_OW 1
46783: ST_TO_ADDR
46784: GO 46746
46786: POP
46787: POP
// result := tmp ;
46788: LD_ADDR_VAR 0 6
46792: PUSH
46793: LD_VAR 0 9
46797: ST_TO_ADDR
// end ; end ;
46798: LD_VAR 0 6
46802: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46803: LD_INT 0
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46811: LD_ADDR_VAR 0 5
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: ST_TO_ADDR
// if not x or not y then
46833: LD_VAR 0 2
46837: NOT
46838: IFTRUE 46847
46840: PUSH
46841: LD_VAR 0 3
46845: NOT
46846: OR
46847: IFFALSE 46851
// exit ;
46849: GO 48507
// if not range then
46851: LD_VAR 0 4
46855: NOT
46856: IFFALSE 46866
// range := 10 ;
46858: LD_ADDR_VAR 0 4
46862: PUSH
46863: LD_INT 10
46865: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46866: LD_ADDR_VAR 0 8
46870: PUSH
46871: LD_INT 81
46873: PUSH
46874: LD_VAR 0 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 92
46885: PUSH
46886: LD_VAR 0 2
46890: PUSH
46891: LD_VAR 0 3
46895: PUSH
46896: LD_VAR 0 4
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 3
46909: PUSH
46910: LD_INT 21
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: PPUSH
46929: CALL_OW 69
46933: ST_TO_ADDR
// if not tmp then
46934: LD_VAR 0 8
46938: NOT
46939: IFFALSE 46943
// exit ;
46941: GO 48507
// for i in tmp do
46943: LD_ADDR_VAR 0 6
46947: PUSH
46948: LD_VAR 0 8
46952: PUSH
46953: FOR_IN
46954: IFFALSE 48482
// begin points := [ 0 , 0 , 0 ] ;
46956: LD_ADDR_VAR 0 9
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: LIST
46974: ST_TO_ADDR
// bpoints := 1 ;
46975: LD_ADDR_VAR 0 10
46979: PUSH
46980: LD_INT 1
46982: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46983: LD_VAR 0 6
46987: PPUSH
46988: CALL_OW 247
46992: PUSH
46993: LD_INT 1
46995: DOUBLE
46996: EQUAL
46997: IFTRUE 47001
46999: GO 47583
47001: POP
// begin if GetClass ( i ) = 1 then
47002: LD_VAR 0 6
47006: PPUSH
47007: CALL_OW 257
47011: PUSH
47012: LD_INT 1
47014: EQUAL
47015: IFFALSE 47036
// points := [ 10 , 5 , 3 ] ;
47017: LD_ADDR_VAR 0 9
47021: PUSH
47022: LD_INT 10
47024: PUSH
47025: LD_INT 5
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47036: LD_VAR 0 6
47040: PPUSH
47041: CALL_OW 257
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 3
47051: PUSH
47052: LD_INT 4
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: IN
47060: IFFALSE 47081
// points := [ 3 , 2 , 1 ] ;
47062: LD_ADDR_VAR 0 9
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47081: LD_VAR 0 6
47085: PPUSH
47086: CALL_OW 257
47090: PUSH
47091: LD_INT 5
47093: EQUAL
47094: IFFALSE 47115
// points := [ 130 , 5 , 2 ] ;
47096: LD_ADDR_VAR 0 9
47100: PUSH
47101: LD_INT 130
47103: PUSH
47104: LD_INT 5
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47115: LD_VAR 0 6
47119: PPUSH
47120: CALL_OW 257
47124: PUSH
47125: LD_INT 8
47127: EQUAL
47128: IFFALSE 47149
// points := [ 35 , 35 , 30 ] ;
47130: LD_ADDR_VAR 0 9
47134: PUSH
47135: LD_INT 35
47137: PUSH
47138: LD_INT 35
47140: PUSH
47141: LD_INT 30
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: LIST
47148: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47149: LD_VAR 0 6
47153: PPUSH
47154: CALL_OW 257
47158: PUSH
47159: LD_INT 9
47161: EQUAL
47162: IFFALSE 47183
// points := [ 20 , 55 , 40 ] ;
47164: LD_ADDR_VAR 0 9
47168: PUSH
47169: LD_INT 20
47171: PUSH
47172: LD_INT 55
47174: PUSH
47175: LD_INT 40
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47183: LD_VAR 0 6
47187: PPUSH
47188: CALL_OW 257
47192: PUSH
47193: LD_INT 12
47195: PUSH
47196: LD_INT 16
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: IN
47203: IFFALSE 47224
// points := [ 5 , 3 , 2 ] ;
47205: LD_ADDR_VAR 0 9
47209: PUSH
47210: LD_INT 5
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47224: LD_VAR 0 6
47228: PPUSH
47229: CALL_OW 257
47233: PUSH
47234: LD_INT 17
47236: EQUAL
47237: IFFALSE 47258
// points := [ 100 , 50 , 75 ] ;
47239: LD_ADDR_VAR 0 9
47243: PUSH
47244: LD_INT 100
47246: PUSH
47247: LD_INT 50
47249: PUSH
47250: LD_INT 75
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47258: LD_VAR 0 6
47262: PPUSH
47263: CALL_OW 257
47267: PUSH
47268: LD_INT 15
47270: EQUAL
47271: IFFALSE 47292
// points := [ 10 , 5 , 3 ] ;
47273: LD_ADDR_VAR 0 9
47277: PUSH
47278: LD_INT 10
47280: PUSH
47281: LD_INT 5
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47292: LD_VAR 0 6
47296: PPUSH
47297: CALL_OW 257
47301: PUSH
47302: LD_INT 14
47304: EQUAL
47305: IFFALSE 47326
// points := [ 10 , 0 , 0 ] ;
47307: LD_ADDR_VAR 0 9
47311: PUSH
47312: LD_INT 10
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47326: LD_VAR 0 6
47330: PPUSH
47331: CALL_OW 257
47335: PUSH
47336: LD_INT 11
47338: EQUAL
47339: IFFALSE 47360
// points := [ 30 , 10 , 5 ] ;
47341: LD_ADDR_VAR 0 9
47345: PUSH
47346: LD_INT 30
47348: PUSH
47349: LD_INT 10
47351: PUSH
47352: LD_INT 5
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47360: LD_VAR 0 1
47364: PPUSH
47365: LD_INT 5
47367: PPUSH
47368: CALL_OW 321
47372: PUSH
47373: LD_INT 2
47375: EQUAL
47376: IFFALSE 47393
// bpoints := bpoints * 1.8 ;
47378: LD_ADDR_VAR 0 10
47382: PUSH
47383: LD_VAR 0 10
47387: PUSH
47388: LD_REAL  1.80000000000000E+0000
47391: MUL
47392: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47393: LD_VAR 0 6
47397: PPUSH
47398: CALL_OW 257
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 4
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: IN
47421: IFFALSE 47441
47423: PUSH
47424: LD_VAR 0 1
47428: PPUSH
47429: LD_INT 51
47431: PPUSH
47432: CALL_OW 321
47436: PUSH
47437: LD_INT 2
47439: EQUAL
47440: AND
47441: IFFALSE 47458
// bpoints := bpoints * 1.2 ;
47443: LD_ADDR_VAR 0 10
47447: PUSH
47448: LD_VAR 0 10
47452: PUSH
47453: LD_REAL  1.20000000000000E+0000
47456: MUL
47457: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47458: LD_VAR 0 6
47462: PPUSH
47463: CALL_OW 257
47467: PUSH
47468: LD_INT 5
47470: PUSH
47471: LD_INT 7
47473: PUSH
47474: LD_INT 9
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: IN
47482: IFFALSE 47502
47484: PUSH
47485: LD_VAR 0 1
47489: PPUSH
47490: LD_INT 52
47492: PPUSH
47493: CALL_OW 321
47497: PUSH
47498: LD_INT 2
47500: EQUAL
47501: AND
47502: IFFALSE 47519
// bpoints := bpoints * 1.5 ;
47504: LD_ADDR_VAR 0 10
47508: PUSH
47509: LD_VAR 0 10
47513: PUSH
47514: LD_REAL  1.50000000000000E+0000
47517: MUL
47518: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47519: LD_VAR 0 1
47523: PPUSH
47524: LD_INT 66
47526: PPUSH
47527: CALL_OW 321
47531: PUSH
47532: LD_INT 2
47534: EQUAL
47535: IFFALSE 47552
// bpoints := bpoints * 1.1 ;
47537: LD_ADDR_VAR 0 10
47541: PUSH
47542: LD_VAR 0 10
47546: PUSH
47547: LD_REAL  1.10000000000000E+0000
47550: MUL
47551: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47552: LD_ADDR_VAR 0 10
47556: PUSH
47557: LD_VAR 0 10
47561: PUSH
47562: LD_VAR 0 6
47566: PPUSH
47567: LD_INT 1
47569: PPUSH
47570: CALL_OW 259
47574: PUSH
47575: LD_REAL  1.15000000000000E+0000
47578: MUL
47579: MUL
47580: ST_TO_ADDR
// end ; unit_vehicle :
47581: GO 48411
47583: LD_INT 2
47585: DOUBLE
47586: EQUAL
47587: IFTRUE 47591
47589: GO 48399
47591: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47592: LD_VAR 0 6
47596: PPUSH
47597: CALL_OW 264
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 42
47607: PUSH
47608: LD_INT 24
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: IN
47616: IFFALSE 47637
// points := [ 25 , 5 , 3 ] ;
47618: LD_ADDR_VAR 0 9
47622: PUSH
47623: LD_INT 25
47625: PUSH
47626: LD_INT 5
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47637: LD_VAR 0 6
47641: PPUSH
47642: CALL_OW 264
47646: PUSH
47647: LD_INT 4
47649: PUSH
47650: LD_INT 43
47652: PUSH
47653: LD_INT 25
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: IN
47661: IFFALSE 47682
// points := [ 40 , 15 , 5 ] ;
47663: LD_ADDR_VAR 0 9
47667: PUSH
47668: LD_INT 40
47670: PUSH
47671: LD_INT 15
47673: PUSH
47674: LD_INT 5
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47682: LD_VAR 0 6
47686: PPUSH
47687: CALL_OW 264
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: LD_INT 23
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: IN
47702: IFFALSE 47723
// points := [ 7 , 25 , 8 ] ;
47704: LD_ADDR_VAR 0 9
47708: PUSH
47709: LD_INT 7
47711: PUSH
47712: LD_INT 25
47714: PUSH
47715: LD_INT 8
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47723: LD_VAR 0 6
47727: PPUSH
47728: CALL_OW 264
47732: PUSH
47733: LD_INT 5
47735: PUSH
47736: LD_INT 27
47738: PUSH
47739: LD_INT 44
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: LIST
47746: IN
47747: IFFALSE 47768
// points := [ 14 , 50 , 16 ] ;
47749: LD_ADDR_VAR 0 9
47753: PUSH
47754: LD_INT 14
47756: PUSH
47757: LD_INT 50
47759: PUSH
47760: LD_INT 16
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47768: LD_VAR 0 6
47772: PPUSH
47773: CALL_OW 264
47777: PUSH
47778: LD_INT 6
47780: PUSH
47781: LD_INT 46
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: IN
47788: IFFALSE 47809
// points := [ 32 , 120 , 70 ] ;
47790: LD_ADDR_VAR 0 9
47794: PUSH
47795: LD_INT 32
47797: PUSH
47798: LD_INT 120
47800: PUSH
47801: LD_INT 70
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47809: LD_VAR 0 6
47813: PPUSH
47814: CALL_OW 264
47818: PUSH
47819: LD_INT 7
47821: PUSH
47822: LD_INT 28
47824: PUSH
47825: LD_INT 45
47827: PUSH
47828: LD_INT 92
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: IN
47837: IFFALSE 47858
// points := [ 35 , 20 , 45 ] ;
47839: LD_ADDR_VAR 0 9
47843: PUSH
47844: LD_INT 35
47846: PUSH
47847: LD_INT 20
47849: PUSH
47850: LD_INT 45
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47858: LD_VAR 0 6
47862: PPUSH
47863: CALL_OW 264
47867: PUSH
47868: LD_INT 47
47870: PUSH
47871: EMPTY
47872: LIST
47873: IN
47874: IFFALSE 47895
// points := [ 67 , 45 , 75 ] ;
47876: LD_ADDR_VAR 0 9
47880: PUSH
47881: LD_INT 67
47883: PUSH
47884: LD_INT 45
47886: PUSH
47887: LD_INT 75
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47895: LD_VAR 0 6
47899: PPUSH
47900: CALL_OW 264
47904: PUSH
47905: LD_INT 26
47907: PUSH
47908: EMPTY
47909: LIST
47910: IN
47911: IFFALSE 47932
// points := [ 120 , 30 , 80 ] ;
47913: LD_ADDR_VAR 0 9
47917: PUSH
47918: LD_INT 120
47920: PUSH
47921: LD_INT 30
47923: PUSH
47924: LD_INT 80
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47932: LD_VAR 0 6
47936: PPUSH
47937: CALL_OW 264
47941: PUSH
47942: LD_INT 22
47944: PUSH
47945: EMPTY
47946: LIST
47947: IN
47948: IFFALSE 47969
// points := [ 40 , 1 , 1 ] ;
47950: LD_ADDR_VAR 0 9
47954: PUSH
47955: LD_INT 40
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47969: LD_VAR 0 6
47973: PPUSH
47974: CALL_OW 264
47978: PUSH
47979: LD_INT 29
47981: PUSH
47982: EMPTY
47983: LIST
47984: IN
47985: IFFALSE 48006
// points := [ 70 , 200 , 400 ] ;
47987: LD_ADDR_VAR 0 9
47991: PUSH
47992: LD_INT 70
47994: PUSH
47995: LD_INT 200
47997: PUSH
47998: LD_INT 400
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48006: LD_VAR 0 6
48010: PPUSH
48011: CALL_OW 264
48015: PUSH
48016: LD_INT 14
48018: PUSH
48019: LD_INT 53
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: IN
48026: IFFALSE 48047
// points := [ 40 , 10 , 20 ] ;
48028: LD_ADDR_VAR 0 9
48032: PUSH
48033: LD_INT 40
48035: PUSH
48036: LD_INT 10
48038: PUSH
48039: LD_INT 20
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: LIST
48046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48047: LD_VAR 0 6
48051: PPUSH
48052: CALL_OW 264
48056: PUSH
48057: LD_INT 9
48059: PUSH
48060: EMPTY
48061: LIST
48062: IN
48063: IFFALSE 48084
// points := [ 5 , 70 , 20 ] ;
48065: LD_ADDR_VAR 0 9
48069: PUSH
48070: LD_INT 5
48072: PUSH
48073: LD_INT 70
48075: PUSH
48076: LD_INT 20
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48084: LD_VAR 0 6
48088: PPUSH
48089: CALL_OW 264
48093: PUSH
48094: LD_INT 10
48096: PUSH
48097: EMPTY
48098: LIST
48099: IN
48100: IFFALSE 48121
// points := [ 35 , 110 , 70 ] ;
48102: LD_ADDR_VAR 0 9
48106: PUSH
48107: LD_INT 35
48109: PUSH
48110: LD_INT 110
48112: PUSH
48113: LD_INT 70
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: LIST
48120: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48121: LD_VAR 0 6
48125: PPUSH
48126: CALL_OW 265
48130: PUSH
48131: LD_INT 25
48133: EQUAL
48134: IFFALSE 48155
// points := [ 80 , 65 , 100 ] ;
48136: LD_ADDR_VAR 0 9
48140: PUSH
48141: LD_INT 80
48143: PUSH
48144: LD_INT 65
48146: PUSH
48147: LD_INT 100
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: LIST
48154: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48155: LD_VAR 0 6
48159: PPUSH
48160: CALL_OW 263
48164: PUSH
48165: LD_INT 1
48167: EQUAL
48168: IFFALSE 48203
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48170: LD_ADDR_VAR 0 10
48174: PUSH
48175: LD_VAR 0 10
48179: PUSH
48180: LD_VAR 0 6
48184: PPUSH
48185: CALL_OW 311
48189: PPUSH
48190: LD_INT 3
48192: PPUSH
48193: CALL_OW 259
48197: PUSH
48198: LD_INT 4
48200: MUL
48201: MUL
48202: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48203: LD_VAR 0 6
48207: PPUSH
48208: CALL_OW 263
48212: PUSH
48213: LD_INT 2
48215: EQUAL
48216: IFFALSE 48267
// begin j := IsControledBy ( i ) ;
48218: LD_ADDR_VAR 0 7
48222: PUSH
48223: LD_VAR 0 6
48227: PPUSH
48228: CALL_OW 312
48232: ST_TO_ADDR
// if j then
48233: LD_VAR 0 7
48237: IFFALSE 48267
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48239: LD_ADDR_VAR 0 10
48243: PUSH
48244: LD_VAR 0 10
48248: PUSH
48249: LD_VAR 0 7
48253: PPUSH
48254: LD_INT 3
48256: PPUSH
48257: CALL_OW 259
48261: PUSH
48262: LD_INT 3
48264: MUL
48265: MUL
48266: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48267: LD_VAR 0 6
48271: PPUSH
48272: CALL_OW 264
48276: PUSH
48277: LD_INT 5
48279: PUSH
48280: LD_INT 6
48282: PUSH
48283: LD_INT 46
48285: PUSH
48286: LD_INT 44
48288: PUSH
48289: LD_INT 47
48291: PUSH
48292: LD_INT 45
48294: PUSH
48295: LD_INT 28
48297: PUSH
48298: LD_INT 7
48300: PUSH
48301: LD_INT 27
48303: PUSH
48304: LD_INT 29
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: IN
48319: IFFALSE 48339
48321: PUSH
48322: LD_VAR 0 1
48326: PPUSH
48327: LD_INT 52
48329: PPUSH
48330: CALL_OW 321
48334: PUSH
48335: LD_INT 2
48337: EQUAL
48338: AND
48339: IFFALSE 48356
// bpoints := bpoints * 1.2 ;
48341: LD_ADDR_VAR 0 10
48345: PUSH
48346: LD_VAR 0 10
48350: PUSH
48351: LD_REAL  1.20000000000000E+0000
48354: MUL
48355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48356: LD_VAR 0 6
48360: PPUSH
48361: CALL_OW 264
48365: PUSH
48366: LD_INT 6
48368: PUSH
48369: LD_INT 46
48371: PUSH
48372: LD_INT 47
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: IN
48380: IFFALSE 48397
// bpoints := bpoints * 1.2 ;
48382: LD_ADDR_VAR 0 10
48386: PUSH
48387: LD_VAR 0 10
48391: PUSH
48392: LD_REAL  1.20000000000000E+0000
48395: MUL
48396: ST_TO_ADDR
// end ; unit_building :
48397: GO 48411
48399: LD_INT 3
48401: DOUBLE
48402: EQUAL
48403: IFTRUE 48407
48405: GO 48410
48407: POP
// ; end ;
48408: GO 48411
48410: POP
// for j = 1 to 3 do
48411: LD_ADDR_VAR 0 7
48415: PUSH
48416: DOUBLE
48417: LD_INT 1
48419: DEC
48420: ST_TO_ADDR
48421: LD_INT 3
48423: PUSH
48424: FOR_TO
48425: IFFALSE 48478
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48427: LD_ADDR_VAR 0 5
48431: PUSH
48432: LD_VAR 0 5
48436: PPUSH
48437: LD_VAR 0 7
48441: PPUSH
48442: LD_VAR 0 5
48446: PUSH
48447: LD_VAR 0 7
48451: ARRAY
48452: PUSH
48453: LD_VAR 0 9
48457: PUSH
48458: LD_VAR 0 7
48462: ARRAY
48463: PUSH
48464: LD_VAR 0 10
48468: MUL
48469: PLUS
48470: PPUSH
48471: CALL_OW 1
48475: ST_TO_ADDR
48476: GO 48424
48478: POP
48479: POP
// end ;
48480: GO 46953
48482: POP
48483: POP
// result := Replace ( result , 4 , tmp ) ;
48484: LD_ADDR_VAR 0 5
48488: PUSH
48489: LD_VAR 0 5
48493: PPUSH
48494: LD_INT 4
48496: PPUSH
48497: LD_VAR 0 8
48501: PPUSH
48502: CALL_OW 1
48506: ST_TO_ADDR
// end ;
48507: LD_VAR 0 5
48511: RET
// export function DangerAtRange ( unit , range ) ; begin
48512: LD_INT 0
48514: PPUSH
// if not unit then
48515: LD_VAR 0 1
48519: NOT
48520: IFFALSE 48524
// exit ;
48522: GO 48569
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48524: LD_ADDR_VAR 0 3
48528: PUSH
48529: LD_VAR 0 1
48533: PPUSH
48534: CALL_OW 255
48538: PPUSH
48539: LD_VAR 0 1
48543: PPUSH
48544: CALL_OW 250
48548: PPUSH
48549: LD_VAR 0 1
48553: PPUSH
48554: CALL_OW 251
48558: PPUSH
48559: LD_VAR 0 2
48563: PPUSH
48564: CALL 46803 0 4
48568: ST_TO_ADDR
// end ;
48569: LD_VAR 0 3
48573: RET
// export function DangerInArea ( side , area ) ; begin
48574: LD_INT 0
48576: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48577: LD_ADDR_VAR 0 3
48581: PUSH
48582: LD_VAR 0 2
48586: PPUSH
48587: LD_INT 81
48589: PUSH
48590: LD_VAR 0 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PPUSH
48599: CALL_OW 70
48603: ST_TO_ADDR
// end ;
48604: LD_VAR 0 3
48608: RET
// export function IsExtension ( b ) ; begin
48609: LD_INT 0
48611: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48612: LD_ADDR_VAR 0 2
48616: PUSH
48617: LD_VAR 0 1
48621: PUSH
48622: LD_INT 23
48624: PUSH
48625: LD_INT 20
48627: PUSH
48628: LD_INT 22
48630: PUSH
48631: LD_INT 17
48633: PUSH
48634: LD_INT 24
48636: PUSH
48637: LD_INT 21
48639: PUSH
48640: LD_INT 19
48642: PUSH
48643: LD_INT 16
48645: PUSH
48646: LD_INT 25
48648: PUSH
48649: LD_INT 18
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: IN
48664: ST_TO_ADDR
// end ;
48665: LD_VAR 0 2
48669: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48670: LD_INT 0
48672: PPUSH
48673: PPUSH
48674: PPUSH
// result := [ ] ;
48675: LD_ADDR_VAR 0 4
48679: PUSH
48680: EMPTY
48681: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48682: LD_ADDR_VAR 0 5
48686: PUSH
48687: LD_VAR 0 2
48691: PPUSH
48692: LD_INT 21
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PPUSH
48702: CALL_OW 70
48706: ST_TO_ADDR
// if not tmp then
48707: LD_VAR 0 5
48711: NOT
48712: IFFALSE 48716
// exit ;
48714: GO 48780
// if checkLink then
48716: LD_VAR 0 3
48720: IFFALSE 48770
// begin for i in tmp do
48722: LD_ADDR_VAR 0 6
48726: PUSH
48727: LD_VAR 0 5
48731: PUSH
48732: FOR_IN
48733: IFFALSE 48768
// if GetBase ( i ) <> base then
48735: LD_VAR 0 6
48739: PPUSH
48740: CALL_OW 274
48744: PUSH
48745: LD_VAR 0 1
48749: NONEQUAL
48750: IFFALSE 48766
// ComLinkToBase ( base , i ) ;
48752: LD_VAR 0 1
48756: PPUSH
48757: LD_VAR 0 6
48761: PPUSH
48762: CALL_OW 169
48766: GO 48732
48768: POP
48769: POP
// end ; result := tmp ;
48770: LD_ADDR_VAR 0 4
48774: PUSH
48775: LD_VAR 0 5
48779: ST_TO_ADDR
// end ;
48780: LD_VAR 0 4
48784: RET
// export function ComComplete ( units , b ) ; var i ; begin
48785: LD_INT 0
48787: PPUSH
48788: PPUSH
// if not units then
48789: LD_VAR 0 1
48793: NOT
48794: IFFALSE 48798
// exit ;
48796: GO 48888
// for i in units do
48798: LD_ADDR_VAR 0 4
48802: PUSH
48803: LD_VAR 0 1
48807: PUSH
48808: FOR_IN
48809: IFFALSE 48886
// if BuildingStatus ( b ) = bs_build then
48811: LD_VAR 0 2
48815: PPUSH
48816: CALL_OW 461
48820: PUSH
48821: LD_INT 1
48823: EQUAL
48824: IFFALSE 48884
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48826: LD_VAR 0 4
48830: PPUSH
48831: LD_STRING h
48833: PUSH
48834: LD_VAR 0 2
48838: PPUSH
48839: CALL_OW 250
48843: PUSH
48844: LD_VAR 0 2
48848: PPUSH
48849: CALL_OW 251
48853: PUSH
48854: LD_VAR 0 2
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: PUSH
48877: EMPTY
48878: LIST
48879: PPUSH
48880: CALL_OW 446
48884: GO 48808
48886: POP
48887: POP
// end ;
48888: LD_VAR 0 3
48892: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48893: LD_INT 0
48895: PPUSH
48896: PPUSH
48897: PPUSH
48898: PPUSH
48899: PPUSH
48900: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48901: LD_VAR 0 1
48905: NOT
48906: IFTRUE 48923
48908: PUSH
48909: LD_VAR 0 1
48913: PPUSH
48914: CALL_OW 263
48918: PUSH
48919: LD_INT 2
48921: NONEQUAL
48922: OR
48923: IFFALSE 48927
// exit ;
48925: GO 49243
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48927: LD_ADDR_VAR 0 6
48931: PUSH
48932: LD_INT 22
48934: PUSH
48935: LD_VAR 0 1
48939: PPUSH
48940: CALL_OW 255
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 30
48954: PUSH
48955: LD_INT 36
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 34
48964: PUSH
48965: LD_INT 31
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PPUSH
48981: CALL_OW 69
48985: ST_TO_ADDR
// if not tmp then
48986: LD_VAR 0 6
48990: NOT
48991: IFFALSE 48995
// exit ;
48993: GO 49243
// result := [ ] ;
48995: LD_ADDR_VAR 0 2
48999: PUSH
49000: EMPTY
49001: ST_TO_ADDR
// for i in tmp do
49002: LD_ADDR_VAR 0 3
49006: PUSH
49007: LD_VAR 0 6
49011: PUSH
49012: FOR_IN
49013: IFFALSE 49084
// begin t := UnitsInside ( i ) ;
49015: LD_ADDR_VAR 0 4
49019: PUSH
49020: LD_VAR 0 3
49024: PPUSH
49025: CALL_OW 313
49029: ST_TO_ADDR
// if t then
49030: LD_VAR 0 4
49034: IFFALSE 49082
// for j in t do
49036: LD_ADDR_VAR 0 7
49040: PUSH
49041: LD_VAR 0 4
49045: PUSH
49046: FOR_IN
49047: IFFALSE 49080
// result := Replace ( result , result + 1 , j ) ;
49049: LD_ADDR_VAR 0 2
49053: PUSH
49054: LD_VAR 0 2
49058: PPUSH
49059: LD_VAR 0 2
49063: PUSH
49064: LD_INT 1
49066: PLUS
49067: PPUSH
49068: LD_VAR 0 7
49072: PPUSH
49073: CALL_OW 1
49077: ST_TO_ADDR
49078: GO 49046
49080: POP
49081: POP
// end ;
49082: GO 49012
49084: POP
49085: POP
// if not result then
49086: LD_VAR 0 2
49090: NOT
49091: IFFALSE 49095
// exit ;
49093: GO 49243
// mech := result [ 1 ] ;
49095: LD_ADDR_VAR 0 5
49099: PUSH
49100: LD_VAR 0 2
49104: PUSH
49105: LD_INT 1
49107: ARRAY
49108: ST_TO_ADDR
// if result > 1 then
49109: LD_VAR 0 2
49113: PUSH
49114: LD_INT 1
49116: GREATER
49117: IFFALSE 49229
// begin for i = 2 to result do
49119: LD_ADDR_VAR 0 3
49123: PUSH
49124: DOUBLE
49125: LD_INT 2
49127: DEC
49128: ST_TO_ADDR
49129: LD_VAR 0 2
49133: PUSH
49134: FOR_TO
49135: IFFALSE 49227
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49137: LD_ADDR_VAR 0 4
49141: PUSH
49142: LD_VAR 0 2
49146: PUSH
49147: LD_VAR 0 3
49151: ARRAY
49152: PPUSH
49153: LD_INT 3
49155: PPUSH
49156: CALL_OW 259
49160: PUSH
49161: LD_VAR 0 2
49165: PUSH
49166: LD_VAR 0 3
49170: ARRAY
49171: PPUSH
49172: CALL_OW 432
49176: MINUS
49177: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49178: LD_VAR 0 4
49182: PUSH
49183: LD_VAR 0 5
49187: PPUSH
49188: LD_INT 3
49190: PPUSH
49191: CALL_OW 259
49195: PUSH
49196: LD_VAR 0 5
49200: PPUSH
49201: CALL_OW 432
49205: MINUS
49206: GREATEREQUAL
49207: IFFALSE 49225
// mech := result [ i ] ;
49209: LD_ADDR_VAR 0 5
49213: PUSH
49214: LD_VAR 0 2
49218: PUSH
49219: LD_VAR 0 3
49223: ARRAY
49224: ST_TO_ADDR
// end ;
49225: GO 49134
49227: POP
49228: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49229: LD_VAR 0 1
49233: PPUSH
49234: LD_VAR 0 5
49238: PPUSH
49239: CALL_OW 135
// end ;
49243: LD_VAR 0 2
49247: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49248: LD_INT 0
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
49259: PPUSH
49260: PPUSH
49261: PPUSH
49262: PPUSH
// result := [ ] ;
49263: LD_ADDR_VAR 0 7
49267: PUSH
49268: EMPTY
49269: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49270: LD_VAR 0 1
49274: PPUSH
49275: CALL_OW 266
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: IN
49290: NOT
49291: IFFALSE 49295
// exit ;
49293: GO 50935
// if name then
49295: LD_VAR 0 3
49299: IFFALSE 49315
// SetBName ( base_dep , name ) ;
49301: LD_VAR 0 1
49305: PPUSH
49306: LD_VAR 0 3
49310: PPUSH
49311: CALL_OW 500
// base := GetBase ( base_dep ) ;
49315: LD_ADDR_VAR 0 15
49319: PUSH
49320: LD_VAR 0 1
49324: PPUSH
49325: CALL_OW 274
49329: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49330: LD_ADDR_VAR 0 16
49334: PUSH
49335: LD_VAR 0 1
49339: PPUSH
49340: CALL_OW 255
49344: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49345: LD_ADDR_VAR 0 17
49349: PUSH
49350: LD_VAR 0 1
49354: PPUSH
49355: CALL_OW 248
49359: ST_TO_ADDR
// if sources then
49360: LD_VAR 0 5
49364: IFFALSE 49411
// for i = 1 to 3 do
49366: LD_ADDR_VAR 0 8
49370: PUSH
49371: DOUBLE
49372: LD_INT 1
49374: DEC
49375: ST_TO_ADDR
49376: LD_INT 3
49378: PUSH
49379: FOR_TO
49380: IFFALSE 49409
// AddResourceType ( base , i , sources [ i ] ) ;
49382: LD_VAR 0 15
49386: PPUSH
49387: LD_VAR 0 8
49391: PPUSH
49392: LD_VAR 0 5
49396: PUSH
49397: LD_VAR 0 8
49401: ARRAY
49402: PPUSH
49403: CALL_OW 276
49407: GO 49379
49409: POP
49410: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49411: LD_ADDR_VAR 0 18
49415: PUSH
49416: LD_VAR 0 15
49420: PPUSH
49421: LD_VAR 0 2
49425: PPUSH
49426: LD_INT 1
49428: PPUSH
49429: CALL 48670 0 3
49433: ST_TO_ADDR
// InitHc ;
49434: CALL_OW 19
// InitUc ;
49438: CALL_OW 18
// uc_side := side ;
49442: LD_ADDR_OWVAR 20
49446: PUSH
49447: LD_VAR 0 16
49451: ST_TO_ADDR
// uc_nation := nation ;
49452: LD_ADDR_OWVAR 21
49456: PUSH
49457: LD_VAR 0 17
49461: ST_TO_ADDR
// if buildings then
49462: LD_VAR 0 18
49466: IFFALSE 50794
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49468: LD_ADDR_VAR 0 19
49472: PUSH
49473: LD_VAR 0 18
49477: PPUSH
49478: LD_INT 2
49480: PUSH
49481: LD_INT 30
49483: PUSH
49484: LD_INT 29
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 30
49493: PUSH
49494: LD_INT 30
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: LIST
49505: PPUSH
49506: CALL_OW 72
49510: ST_TO_ADDR
// if tmp then
49511: LD_VAR 0 19
49515: IFFALSE 49563
// for i in tmp do
49517: LD_ADDR_VAR 0 8
49521: PUSH
49522: LD_VAR 0 19
49526: PUSH
49527: FOR_IN
49528: IFFALSE 49561
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49530: LD_VAR 0 8
49534: PPUSH
49535: CALL_OW 250
49539: PPUSH
49540: LD_VAR 0 8
49544: PPUSH
49545: CALL_OW 251
49549: PPUSH
49550: LD_VAR 0 16
49554: PPUSH
49555: CALL_OW 441
49559: GO 49527
49561: POP
49562: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49563: LD_VAR 0 18
49567: PPUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 30
49573: PUSH
49574: LD_INT 32
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 30
49583: PUSH
49584: LD_INT 33
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: PPUSH
49596: CALL_OW 72
49600: IFFALSE 49688
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49602: LD_ADDR_VAR 0 8
49606: PUSH
49607: LD_VAR 0 18
49611: PPUSH
49612: LD_INT 2
49614: PUSH
49615: LD_INT 30
49617: PUSH
49618: LD_INT 32
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 30
49627: PUSH
49628: LD_INT 33
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: PPUSH
49640: CALL_OW 72
49644: PUSH
49645: FOR_IN
49646: IFFALSE 49686
// begin if not GetBWeapon ( i ) then
49648: LD_VAR 0 8
49652: PPUSH
49653: CALL_OW 269
49657: NOT
49658: IFFALSE 49684
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49660: LD_VAR 0 8
49664: PPUSH
49665: LD_VAR 0 8
49669: PPUSH
49670: LD_VAR 0 2
49674: PPUSH
49675: CALL 50940 0 2
49679: PPUSH
49680: CALL_OW 431
// end ;
49684: GO 49645
49686: POP
49687: POP
// end ; for i = 1 to personel do
49688: LD_ADDR_VAR 0 8
49692: PUSH
49693: DOUBLE
49694: LD_INT 1
49696: DEC
49697: ST_TO_ADDR
49698: LD_VAR 0 6
49702: PUSH
49703: FOR_TO
49704: IFFALSE 50774
// begin if i > 4 then
49706: LD_VAR 0 8
49710: PUSH
49711: LD_INT 4
49713: GREATER
49714: IFFALSE 49718
// break ;
49716: GO 50774
// case i of 1 :
49718: LD_VAR 0 8
49722: PUSH
49723: LD_INT 1
49725: DOUBLE
49726: EQUAL
49727: IFTRUE 49731
49729: GO 49811
49731: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49732: LD_ADDR_VAR 0 12
49736: PUSH
49737: LD_VAR 0 18
49741: PPUSH
49742: LD_INT 22
49744: PUSH
49745: LD_VAR 0 16
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 58
49756: PUSH
49757: EMPTY
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 30
49765: PUSH
49766: LD_INT 32
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 30
49775: PUSH
49776: LD_INT 4
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 30
49785: PUSH
49786: LD_INT 5
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: PPUSH
49804: CALL_OW 72
49808: ST_TO_ADDR
49809: GO 50033
49811: LD_INT 2
49813: DOUBLE
49814: EQUAL
49815: IFTRUE 49819
49817: GO 49881
49819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49820: LD_ADDR_VAR 0 12
49824: PUSH
49825: LD_VAR 0 18
49829: PPUSH
49830: LD_INT 22
49832: PUSH
49833: LD_VAR 0 16
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 30
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 30
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PPUSH
49874: CALL_OW 72
49878: ST_TO_ADDR
49879: GO 50033
49881: LD_INT 3
49883: DOUBLE
49884: EQUAL
49885: IFTRUE 49889
49887: GO 49951
49889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49890: LD_ADDR_VAR 0 12
49894: PUSH
49895: LD_VAR 0 18
49899: PPUSH
49900: LD_INT 22
49902: PUSH
49903: LD_VAR 0 16
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 30
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 30
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PPUSH
49944: CALL_OW 72
49948: ST_TO_ADDR
49949: GO 50033
49951: LD_INT 4
49953: DOUBLE
49954: EQUAL
49955: IFTRUE 49959
49957: GO 50032
49959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49960: LD_ADDR_VAR 0 12
49964: PUSH
49965: LD_VAR 0 18
49969: PPUSH
49970: LD_INT 22
49972: PUSH
49973: LD_VAR 0 16
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 30
49987: PUSH
49988: LD_INT 6
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 30
49997: PUSH
49998: LD_INT 7
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 30
50007: PUSH
50008: LD_INT 8
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PPUSH
50025: CALL_OW 72
50029: ST_TO_ADDR
50030: GO 50033
50032: POP
// if i = 1 then
50033: LD_VAR 0 8
50037: PUSH
50038: LD_INT 1
50040: EQUAL
50041: IFFALSE 50152
// begin tmp := [ ] ;
50043: LD_ADDR_VAR 0 19
50047: PUSH
50048: EMPTY
50049: ST_TO_ADDR
// for j in f do
50050: LD_ADDR_VAR 0 9
50054: PUSH
50055: LD_VAR 0 12
50059: PUSH
50060: FOR_IN
50061: IFFALSE 50134
// if GetBType ( j ) = b_bunker then
50063: LD_VAR 0 9
50067: PPUSH
50068: CALL_OW 266
50072: PUSH
50073: LD_INT 32
50075: EQUAL
50076: IFFALSE 50103
// tmp := Insert ( tmp , 1 , j ) else
50078: LD_ADDR_VAR 0 19
50082: PUSH
50083: LD_VAR 0 19
50087: PPUSH
50088: LD_INT 1
50090: PPUSH
50091: LD_VAR 0 9
50095: PPUSH
50096: CALL_OW 2
50100: ST_TO_ADDR
50101: GO 50132
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50103: LD_ADDR_VAR 0 19
50107: PUSH
50108: LD_VAR 0 19
50112: PPUSH
50113: LD_VAR 0 19
50117: PUSH
50118: LD_INT 1
50120: PLUS
50121: PPUSH
50122: LD_VAR 0 9
50126: PPUSH
50127: CALL_OW 2
50131: ST_TO_ADDR
50132: GO 50060
50134: POP
50135: POP
// if tmp then
50136: LD_VAR 0 19
50140: IFFALSE 50152
// f := tmp ;
50142: LD_ADDR_VAR 0 12
50146: PUSH
50147: LD_VAR 0 19
50151: ST_TO_ADDR
// end ; x := personel [ i ] ;
50152: LD_ADDR_VAR 0 13
50156: PUSH
50157: LD_VAR 0 6
50161: PUSH
50162: LD_VAR 0 8
50166: ARRAY
50167: ST_TO_ADDR
// if x = - 1 then
50168: LD_VAR 0 13
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: EQUAL
50177: IFFALSE 50388
// begin for j in f do
50179: LD_ADDR_VAR 0 9
50183: PUSH
50184: LD_VAR 0 12
50188: PUSH
50189: FOR_IN
50190: IFFALSE 50384
// repeat InitHc ;
50192: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50196: LD_VAR 0 9
50200: PPUSH
50201: CALL_OW 266
50205: PUSH
50206: LD_INT 5
50208: EQUAL
50209: IFFALSE 50279
// begin if UnitsInside ( j ) < 3 then
50211: LD_VAR 0 9
50215: PPUSH
50216: CALL_OW 313
50220: PUSH
50221: LD_INT 3
50223: LESS
50224: IFFALSE 50260
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50226: LD_INT 0
50228: PPUSH
50229: LD_INT 5
50231: PUSH
50232: LD_INT 8
50234: PUSH
50235: LD_INT 9
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: PUSH
50243: LD_VAR 0 17
50247: ARRAY
50248: PPUSH
50249: LD_VAR 0 4
50253: PPUSH
50254: CALL_OW 380
50258: GO 50277
// PrepareHuman ( false , i , skill ) ;
50260: LD_INT 0
50262: PPUSH
50263: LD_VAR 0 8
50267: PPUSH
50268: LD_VAR 0 4
50272: PPUSH
50273: CALL_OW 380
// end else
50277: GO 50296
// PrepareHuman ( false , i , skill ) ;
50279: LD_INT 0
50281: PPUSH
50282: LD_VAR 0 8
50286: PPUSH
50287: LD_VAR 0 4
50291: PPUSH
50292: CALL_OW 380
// un := CreateHuman ;
50296: LD_ADDR_VAR 0 14
50300: PUSH
50301: CALL_OW 44
50305: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50306: LD_ADDR_VAR 0 7
50310: PUSH
50311: LD_VAR 0 7
50315: PPUSH
50316: LD_INT 1
50318: PPUSH
50319: LD_VAR 0 14
50323: PPUSH
50324: CALL_OW 2
50328: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50329: LD_VAR 0 14
50333: PPUSH
50334: LD_VAR 0 9
50338: PPUSH
50339: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50343: LD_VAR 0 9
50347: PPUSH
50348: CALL_OW 313
50352: PUSH
50353: LD_INT 6
50355: EQUAL
50356: IFTRUE 50380
50358: PUSH
50359: LD_VAR 0 9
50363: PPUSH
50364: CALL_OW 266
50368: PUSH
50369: LD_INT 32
50371: PUSH
50372: LD_INT 31
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: IN
50379: OR
50380: IFFALSE 50192
50382: GO 50189
50384: POP
50385: POP
// end else
50386: GO 50772
// for j = 1 to x do
50388: LD_ADDR_VAR 0 9
50392: PUSH
50393: DOUBLE
50394: LD_INT 1
50396: DEC
50397: ST_TO_ADDR
50398: LD_VAR 0 13
50402: PUSH
50403: FOR_TO
50404: IFFALSE 50770
// begin InitHc ;
50406: CALL_OW 19
// if not f then
50410: LD_VAR 0 12
50414: NOT
50415: IFFALSE 50504
// begin PrepareHuman ( false , i , skill ) ;
50417: LD_INT 0
50419: PPUSH
50420: LD_VAR 0 8
50424: PPUSH
50425: LD_VAR 0 4
50429: PPUSH
50430: CALL_OW 380
// un := CreateHuman ;
50434: LD_ADDR_VAR 0 14
50438: PUSH
50439: CALL_OW 44
50443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50444: LD_ADDR_VAR 0 7
50448: PUSH
50449: LD_VAR 0 7
50453: PPUSH
50454: LD_INT 1
50456: PPUSH
50457: LD_VAR 0 14
50461: PPUSH
50462: CALL_OW 2
50466: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50467: LD_VAR 0 14
50471: PPUSH
50472: LD_VAR 0 1
50476: PPUSH
50477: CALL_OW 250
50481: PPUSH
50482: LD_VAR 0 1
50486: PPUSH
50487: CALL_OW 251
50491: PPUSH
50492: LD_INT 10
50494: PPUSH
50495: LD_INT 0
50497: PPUSH
50498: CALL_OW 50
// continue ;
50502: GO 50403
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50504: LD_VAR 0 12
50508: PUSH
50509: LD_INT 1
50511: ARRAY
50512: PPUSH
50513: CALL_OW 313
50517: IFFALSE 50545
50519: PUSH
50520: LD_VAR 0 12
50524: PUSH
50525: LD_INT 1
50527: ARRAY
50528: PPUSH
50529: CALL_OW 266
50533: PUSH
50534: LD_INT 32
50536: PUSH
50537: LD_INT 31
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: IN
50544: AND
50545: IFTRUE 50566
50547: PUSH
50548: LD_VAR 0 12
50552: PUSH
50553: LD_INT 1
50555: ARRAY
50556: PPUSH
50557: CALL_OW 313
50561: PUSH
50562: LD_INT 6
50564: EQUAL
50565: OR
50566: IFFALSE 50586
// f := Delete ( f , 1 ) ;
50568: LD_ADDR_VAR 0 12
50572: PUSH
50573: LD_VAR 0 12
50577: PPUSH
50578: LD_INT 1
50580: PPUSH
50581: CALL_OW 3
50585: ST_TO_ADDR
// if not f then
50586: LD_VAR 0 12
50590: NOT
50591: IFFALSE 50609
// begin x := x + 2 ;
50593: LD_ADDR_VAR 0 13
50597: PUSH
50598: LD_VAR 0 13
50602: PUSH
50603: LD_INT 2
50605: PLUS
50606: ST_TO_ADDR
// continue ;
50607: GO 50403
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50609: LD_VAR 0 12
50613: PUSH
50614: LD_INT 1
50616: ARRAY
50617: PPUSH
50618: CALL_OW 266
50622: PUSH
50623: LD_INT 5
50625: EQUAL
50626: IFFALSE 50700
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50628: LD_VAR 0 12
50632: PUSH
50633: LD_INT 1
50635: ARRAY
50636: PPUSH
50637: CALL_OW 313
50641: PUSH
50642: LD_INT 3
50644: LESS
50645: IFFALSE 50681
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50647: LD_INT 0
50649: PPUSH
50650: LD_INT 5
50652: PUSH
50653: LD_INT 8
50655: PUSH
50656: LD_INT 9
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PUSH
50664: LD_VAR 0 17
50668: ARRAY
50669: PPUSH
50670: LD_VAR 0 4
50674: PPUSH
50675: CALL_OW 380
50679: GO 50698
// PrepareHuman ( false , i , skill ) ;
50681: LD_INT 0
50683: PPUSH
50684: LD_VAR 0 8
50688: PPUSH
50689: LD_VAR 0 4
50693: PPUSH
50694: CALL_OW 380
// end else
50698: GO 50717
// PrepareHuman ( false , i , skill ) ;
50700: LD_INT 0
50702: PPUSH
50703: LD_VAR 0 8
50707: PPUSH
50708: LD_VAR 0 4
50712: PPUSH
50713: CALL_OW 380
// un := CreateHuman ;
50717: LD_ADDR_VAR 0 14
50721: PUSH
50722: CALL_OW 44
50726: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50727: LD_ADDR_VAR 0 7
50731: PUSH
50732: LD_VAR 0 7
50736: PPUSH
50737: LD_INT 1
50739: PPUSH
50740: LD_VAR 0 14
50744: PPUSH
50745: CALL_OW 2
50749: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50750: LD_VAR 0 14
50754: PPUSH
50755: LD_VAR 0 12
50759: PUSH
50760: LD_INT 1
50762: ARRAY
50763: PPUSH
50764: CALL_OW 52
// end ;
50768: GO 50403
50770: POP
50771: POP
// end ;
50772: GO 49703
50774: POP
50775: POP
// result := result ^ buildings ;
50776: LD_ADDR_VAR 0 7
50780: PUSH
50781: LD_VAR 0 7
50785: PUSH
50786: LD_VAR 0 18
50790: ADD
50791: ST_TO_ADDR
// end else
50792: GO 50935
// begin for i = 1 to personel do
50794: LD_ADDR_VAR 0 8
50798: PUSH
50799: DOUBLE
50800: LD_INT 1
50802: DEC
50803: ST_TO_ADDR
50804: LD_VAR 0 6
50808: PUSH
50809: FOR_TO
50810: IFFALSE 50933
// begin if i > 4 then
50812: LD_VAR 0 8
50816: PUSH
50817: LD_INT 4
50819: GREATER
50820: IFFALSE 50824
// break ;
50822: GO 50933
// x := personel [ i ] ;
50824: LD_ADDR_VAR 0 13
50828: PUSH
50829: LD_VAR 0 6
50833: PUSH
50834: LD_VAR 0 8
50838: ARRAY
50839: ST_TO_ADDR
// if x = - 1 then
50840: LD_VAR 0 13
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: EQUAL
50849: IFFALSE 50853
// continue ;
50851: GO 50809
// PrepareHuman ( false , i , skill ) ;
50853: LD_INT 0
50855: PPUSH
50856: LD_VAR 0 8
50860: PPUSH
50861: LD_VAR 0 4
50865: PPUSH
50866: CALL_OW 380
// un := CreateHuman ;
50870: LD_ADDR_VAR 0 14
50874: PUSH
50875: CALL_OW 44
50879: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50880: LD_VAR 0 14
50884: PPUSH
50885: LD_VAR 0 1
50889: PPUSH
50890: CALL_OW 250
50894: PPUSH
50895: LD_VAR 0 1
50899: PPUSH
50900: CALL_OW 251
50904: PPUSH
50905: LD_INT 10
50907: PPUSH
50908: LD_INT 0
50910: PPUSH
50911: CALL_OW 50
// result := result ^ un ;
50915: LD_ADDR_VAR 0 7
50919: PUSH
50920: LD_VAR 0 7
50924: PUSH
50925: LD_VAR 0 14
50929: ADD
50930: ST_TO_ADDR
// end ;
50931: GO 50809
50933: POP
50934: POP
// end ; end ;
50935: LD_VAR 0 7
50939: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50940: LD_INT 0
50942: PPUSH
50943: PPUSH
50944: PPUSH
50945: PPUSH
50946: PPUSH
50947: PPUSH
50948: PPUSH
50949: PPUSH
50950: PPUSH
50951: PPUSH
50952: PPUSH
50953: PPUSH
50954: PPUSH
50955: PPUSH
50956: PPUSH
50957: PPUSH
// result := false ;
50958: LD_ADDR_VAR 0 3
50962: PUSH
50963: LD_INT 0
50965: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50966: LD_VAR 0 1
50970: NOT
50971: IFTRUE 50996
50973: PUSH
50974: LD_VAR 0 1
50978: PPUSH
50979: CALL_OW 266
50983: PUSH
50984: LD_INT 32
50986: PUSH
50987: LD_INT 33
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: IN
50994: NOT
50995: OR
50996: IFFALSE 51000
// exit ;
50998: GO 52135
// nat := GetNation ( tower ) ;
51000: LD_ADDR_VAR 0 12
51004: PUSH
51005: LD_VAR 0 1
51009: PPUSH
51010: CALL_OW 248
51014: ST_TO_ADDR
// side := GetSide ( tower ) ;
51015: LD_ADDR_VAR 0 16
51019: PUSH
51020: LD_VAR 0 1
51024: PPUSH
51025: CALL_OW 255
51029: ST_TO_ADDR
// x := GetX ( tower ) ;
51030: LD_ADDR_VAR 0 10
51034: PUSH
51035: LD_VAR 0 1
51039: PPUSH
51040: CALL_OW 250
51044: ST_TO_ADDR
// y := GetY ( tower ) ;
51045: LD_ADDR_VAR 0 11
51049: PUSH
51050: LD_VAR 0 1
51054: PPUSH
51055: CALL_OW 251
51059: ST_TO_ADDR
// if not x or not y then
51060: LD_VAR 0 10
51064: NOT
51065: IFTRUE 51074
51067: PUSH
51068: LD_VAR 0 11
51072: NOT
51073: OR
51074: IFFALSE 51078
// exit ;
51076: GO 52135
// weapon := 0 ;
51078: LD_ADDR_VAR 0 18
51082: PUSH
51083: LD_INT 0
51085: ST_TO_ADDR
// fac_list := [ ] ;
51086: LD_ADDR_VAR 0 17
51090: PUSH
51091: EMPTY
51092: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51093: LD_ADDR_VAR 0 6
51097: PUSH
51098: LD_VAR 0 1
51102: PPUSH
51103: CALL_OW 274
51107: PPUSH
51108: LD_VAR 0 2
51112: PPUSH
51113: LD_INT 0
51115: PPUSH
51116: CALL 48670 0 3
51120: PPUSH
51121: LD_INT 30
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PPUSH
51131: CALL_OW 72
51135: ST_TO_ADDR
// if not factories then
51136: LD_VAR 0 6
51140: NOT
51141: IFFALSE 51145
// exit ;
51143: GO 52135
// for i in factories do
51145: LD_ADDR_VAR 0 8
51149: PUSH
51150: LD_VAR 0 6
51154: PUSH
51155: FOR_IN
51156: IFFALSE 51181
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51158: LD_ADDR_VAR 0 17
51162: PUSH
51163: LD_VAR 0 17
51167: PUSH
51168: LD_VAR 0 8
51172: PPUSH
51173: CALL_OW 478
51177: UNION
51178: ST_TO_ADDR
51179: GO 51155
51181: POP
51182: POP
// if not fac_list then
51183: LD_VAR 0 17
51187: NOT
51188: IFFALSE 51192
// exit ;
51190: GO 52135
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51192: LD_ADDR_VAR 0 5
51196: PUSH
51197: LD_INT 4
51199: PUSH
51200: LD_INT 5
51202: PUSH
51203: LD_INT 9
51205: PUSH
51206: LD_INT 10
51208: PUSH
51209: LD_INT 6
51211: PUSH
51212: LD_INT 7
51214: PUSH
51215: LD_INT 11
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 27
51229: PUSH
51230: LD_INT 28
51232: PUSH
51233: LD_INT 26
51235: PUSH
51236: LD_INT 30
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 43
51247: PUSH
51248: LD_INT 44
51250: PUSH
51251: LD_INT 46
51253: PUSH
51254: LD_INT 45
51256: PUSH
51257: LD_INT 47
51259: PUSH
51260: LD_INT 49
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: LIST
51275: PUSH
51276: LD_VAR 0 12
51280: ARRAY
51281: ST_TO_ADDR
// list := list isect fac_list ;
51282: LD_ADDR_VAR 0 5
51286: PUSH
51287: LD_VAR 0 5
51291: PUSH
51292: LD_VAR 0 17
51296: ISECT
51297: ST_TO_ADDR
// if not list then
51298: LD_VAR 0 5
51302: NOT
51303: IFFALSE 51307
// exit ;
51305: GO 52135
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51307: LD_VAR 0 12
51311: PUSH
51312: LD_INT 3
51314: EQUAL
51315: IFFALSE 51327
51317: PUSH
51318: LD_INT 49
51320: PUSH
51321: LD_VAR 0 5
51325: IN
51326: AND
51327: IFFALSE 51347
51329: PUSH
51330: LD_INT 31
51332: PPUSH
51333: LD_VAR 0 16
51337: PPUSH
51338: CALL_OW 321
51342: PUSH
51343: LD_INT 2
51345: EQUAL
51346: AND
51347: IFFALSE 51407
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51349: LD_INT 22
51351: PUSH
51352: LD_VAR 0 16
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 35
51363: PUSH
51364: LD_INT 49
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 91
51373: PUSH
51374: LD_VAR 0 1
51378: PUSH
51379: LD_INT 10
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: LIST
51391: PPUSH
51392: CALL_OW 69
51396: NOT
51397: IFFALSE 51407
// weapon := ru_time_lapser ;
51399: LD_ADDR_VAR 0 18
51403: PUSH
51404: LD_INT 49
51406: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51407: LD_VAR 0 12
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: IN
51422: IFFALSE 51446
51424: PUSH
51425: LD_INT 11
51427: PUSH
51428: LD_VAR 0 5
51432: IN
51433: IFTRUE 51445
51435: PUSH
51436: LD_INT 30
51438: PUSH
51439: LD_VAR 0 5
51443: IN
51444: OR
51445: AND
51446: IFFALSE 51466
51448: PUSH
51449: LD_INT 6
51451: PPUSH
51452: LD_VAR 0 16
51456: PPUSH
51457: CALL_OW 321
51461: PUSH
51462: LD_INT 2
51464: EQUAL
51465: AND
51466: IFFALSE 51633
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51468: LD_INT 22
51470: PUSH
51471: LD_VAR 0 16
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: LD_INT 35
51485: PUSH
51486: LD_INT 11
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 35
51495: PUSH
51496: LD_INT 30
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 91
51510: PUSH
51511: LD_VAR 0 1
51515: PUSH
51516: LD_INT 18
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: LIST
51528: PPUSH
51529: CALL_OW 69
51533: NOT
51534: IFFALSE 51610
51536: PUSH
51537: LD_INT 22
51539: PUSH
51540: LD_VAR 0 16
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 30
51554: PUSH
51555: LD_INT 32
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 30
51564: PUSH
51565: LD_INT 33
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 91
51579: PUSH
51580: LD_VAR 0 1
51584: PUSH
51585: LD_INT 12
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: PUSH
51598: EMPTY
51599: LIST
51600: PPUSH
51601: CALL_OW 69
51605: PUSH
51606: LD_INT 2
51608: GREATER
51609: AND
51610: IFFALSE 51633
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51612: LD_ADDR_VAR 0 18
51616: PUSH
51617: LD_INT 11
51619: PUSH
51620: LD_INT 30
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_VAR 0 12
51631: ARRAY
51632: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51633: LD_VAR 0 18
51637: NOT
51638: IFFALSE 51658
51640: PUSH
51641: LD_INT 40
51643: PPUSH
51644: LD_VAR 0 16
51648: PPUSH
51649: CALL_OW 321
51653: PUSH
51654: LD_INT 2
51656: EQUAL
51657: AND
51658: IFFALSE 51694
51660: PUSH
51661: LD_INT 7
51663: PUSH
51664: LD_VAR 0 5
51668: IN
51669: IFTRUE 51681
51671: PUSH
51672: LD_INT 28
51674: PUSH
51675: LD_VAR 0 5
51679: IN
51680: OR
51681: IFTRUE 51693
51683: PUSH
51684: LD_INT 45
51686: PUSH
51687: LD_VAR 0 5
51691: IN
51692: OR
51693: AND
51694: IFFALSE 51948
// begin hex := GetHexInfo ( x , y ) ;
51696: LD_ADDR_VAR 0 4
51700: PUSH
51701: LD_VAR 0 10
51705: PPUSH
51706: LD_VAR 0 11
51710: PPUSH
51711: CALL_OW 546
51715: ST_TO_ADDR
// if hex [ 1 ] then
51716: LD_VAR 0 4
51720: PUSH
51721: LD_INT 1
51723: ARRAY
51724: IFFALSE 51728
// exit ;
51726: GO 52135
// height := hex [ 2 ] ;
51728: LD_ADDR_VAR 0 15
51732: PUSH
51733: LD_VAR 0 4
51737: PUSH
51738: LD_INT 2
51740: ARRAY
51741: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51742: LD_ADDR_VAR 0 14
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: LD_INT 5
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: ST_TO_ADDR
// for i in tmp do
51765: LD_ADDR_VAR 0 8
51769: PUSH
51770: LD_VAR 0 14
51774: PUSH
51775: FOR_IN
51776: IFFALSE 51946
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51778: LD_ADDR_VAR 0 9
51782: PUSH
51783: LD_VAR 0 10
51787: PPUSH
51788: LD_VAR 0 8
51792: PPUSH
51793: LD_INT 5
51795: PPUSH
51796: CALL_OW 272
51800: PUSH
51801: LD_VAR 0 11
51805: PPUSH
51806: LD_VAR 0 8
51810: PPUSH
51811: LD_INT 5
51813: PPUSH
51814: CALL_OW 273
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51823: LD_VAR 0 9
51827: PUSH
51828: LD_INT 1
51830: ARRAY
51831: PPUSH
51832: LD_VAR 0 9
51836: PUSH
51837: LD_INT 2
51839: ARRAY
51840: PPUSH
51841: CALL_OW 488
51845: IFFALSE 51944
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51847: LD_ADDR_VAR 0 4
51851: PUSH
51852: LD_VAR 0 9
51856: PUSH
51857: LD_INT 1
51859: ARRAY
51860: PPUSH
51861: LD_VAR 0 9
51865: PUSH
51866: LD_INT 2
51868: ARRAY
51869: PPUSH
51870: CALL_OW 546
51874: ST_TO_ADDR
// if hex [ 1 ] then
51875: LD_VAR 0 4
51879: PUSH
51880: LD_INT 1
51882: ARRAY
51883: IFFALSE 51887
// continue ;
51885: GO 51775
// h := hex [ 2 ] ;
51887: LD_ADDR_VAR 0 13
51891: PUSH
51892: LD_VAR 0 4
51896: PUSH
51897: LD_INT 2
51899: ARRAY
51900: ST_TO_ADDR
// if h + 7 < height then
51901: LD_VAR 0 13
51905: PUSH
51906: LD_INT 7
51908: PLUS
51909: PUSH
51910: LD_VAR 0 15
51914: LESS
51915: IFFALSE 51944
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51917: LD_ADDR_VAR 0 18
51921: PUSH
51922: LD_INT 7
51924: PUSH
51925: LD_INT 28
51927: PUSH
51928: LD_INT 45
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: LIST
51935: PUSH
51936: LD_VAR 0 12
51940: ARRAY
51941: ST_TO_ADDR
// break ;
51942: GO 51946
// end ; end ; end ;
51944: GO 51775
51946: POP
51947: POP
// end ; if not weapon then
51948: LD_VAR 0 18
51952: NOT
51953: IFFALSE 52013
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51955: LD_ADDR_VAR 0 5
51959: PUSH
51960: LD_VAR 0 5
51964: PUSH
51965: LD_INT 11
51967: PUSH
51968: LD_INT 30
51970: PUSH
51971: LD_INT 49
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: DIFF
51979: ST_TO_ADDR
// if not list then
51980: LD_VAR 0 5
51984: NOT
51985: IFFALSE 51989
// exit ;
51987: GO 52135
// weapon := list [ rand ( 1 , list ) ] ;
51989: LD_ADDR_VAR 0 18
51993: PUSH
51994: LD_VAR 0 5
51998: PUSH
51999: LD_INT 1
52001: PPUSH
52002: LD_VAR 0 5
52006: PPUSH
52007: CALL_OW 12
52011: ARRAY
52012: ST_TO_ADDR
// end ; if weapon then
52013: LD_VAR 0 18
52017: IFFALSE 52135
// begin tmp := CostOfWeapon ( weapon ) ;
52019: LD_ADDR_VAR 0 14
52023: PUSH
52024: LD_VAR 0 18
52028: PPUSH
52029: CALL_OW 451
52033: ST_TO_ADDR
// j := GetBase ( tower ) ;
52034: LD_ADDR_VAR 0 9
52038: PUSH
52039: LD_VAR 0 1
52043: PPUSH
52044: CALL_OW 274
52048: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52049: LD_VAR 0 9
52053: PPUSH
52054: LD_INT 1
52056: PPUSH
52057: CALL_OW 275
52061: PUSH
52062: LD_VAR 0 14
52066: PUSH
52067: LD_INT 1
52069: ARRAY
52070: GREATEREQUAL
52071: IFFALSE 52097
52073: PUSH
52074: LD_VAR 0 9
52078: PPUSH
52079: LD_INT 2
52081: PPUSH
52082: CALL_OW 275
52086: PUSH
52087: LD_VAR 0 14
52091: PUSH
52092: LD_INT 2
52094: ARRAY
52095: GREATEREQUAL
52096: AND
52097: IFFALSE 52123
52099: PUSH
52100: LD_VAR 0 9
52104: PPUSH
52105: LD_INT 3
52107: PPUSH
52108: CALL_OW 275
52112: PUSH
52113: LD_VAR 0 14
52117: PUSH
52118: LD_INT 3
52120: ARRAY
52121: GREATEREQUAL
52122: AND
52123: IFFALSE 52135
// result := weapon ;
52125: LD_ADDR_VAR 0 3
52129: PUSH
52130: LD_VAR 0 18
52134: ST_TO_ADDR
// end ; end ;
52135: LD_VAR 0 3
52139: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52140: LD_INT 0
52142: PPUSH
52143: PPUSH
// result := true ;
52144: LD_ADDR_VAR 0 3
52148: PUSH
52149: LD_INT 1
52151: ST_TO_ADDR
// if array1 = array2 then
52152: LD_VAR 0 1
52156: PUSH
52157: LD_VAR 0 2
52161: EQUAL
52162: IFFALSE 52222
// begin for i = 1 to array1 do
52164: LD_ADDR_VAR 0 4
52168: PUSH
52169: DOUBLE
52170: LD_INT 1
52172: DEC
52173: ST_TO_ADDR
52174: LD_VAR 0 1
52178: PUSH
52179: FOR_TO
52180: IFFALSE 52218
// if array1 [ i ] <> array2 [ i ] then
52182: LD_VAR 0 1
52186: PUSH
52187: LD_VAR 0 4
52191: ARRAY
52192: PUSH
52193: LD_VAR 0 2
52197: PUSH
52198: LD_VAR 0 4
52202: ARRAY
52203: NONEQUAL
52204: IFFALSE 52216
// begin result := false ;
52206: LD_ADDR_VAR 0 3
52210: PUSH
52211: LD_INT 0
52213: ST_TO_ADDR
// break ;
52214: GO 52218
// end ;
52216: GO 52179
52218: POP
52219: POP
// end else
52220: GO 52230
// result := false ;
52222: LD_ADDR_VAR 0 3
52226: PUSH
52227: LD_INT 0
52229: ST_TO_ADDR
// end ;
52230: LD_VAR 0 3
52234: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52235: LD_INT 0
52237: PPUSH
52238: PPUSH
// if not array1 or not array2 then
52239: LD_VAR 0 1
52243: NOT
52244: IFTRUE 52253
52246: PUSH
52247: LD_VAR 0 2
52251: NOT
52252: OR
52253: IFFALSE 52257
// exit ;
52255: GO 52321
// result := true ;
52257: LD_ADDR_VAR 0 3
52261: PUSH
52262: LD_INT 1
52264: ST_TO_ADDR
// for i = 1 to array1 do
52265: LD_ADDR_VAR 0 4
52269: PUSH
52270: DOUBLE
52271: LD_INT 1
52273: DEC
52274: ST_TO_ADDR
52275: LD_VAR 0 1
52279: PUSH
52280: FOR_TO
52281: IFFALSE 52319
// if array1 [ i ] <> array2 [ i ] then
52283: LD_VAR 0 1
52287: PUSH
52288: LD_VAR 0 4
52292: ARRAY
52293: PUSH
52294: LD_VAR 0 2
52298: PUSH
52299: LD_VAR 0 4
52303: ARRAY
52304: NONEQUAL
52305: IFFALSE 52317
// begin result := false ;
52307: LD_ADDR_VAR 0 3
52311: PUSH
52312: LD_INT 0
52314: ST_TO_ADDR
// break ;
52315: GO 52319
// end ;
52317: GO 52280
52319: POP
52320: POP
// end ;
52321: LD_VAR 0 3
52325: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52326: LD_INT 0
52328: PPUSH
52329: PPUSH
52330: PPUSH
// pom := GetBase ( fac ) ;
52331: LD_ADDR_VAR 0 5
52335: PUSH
52336: LD_VAR 0 1
52340: PPUSH
52341: CALL_OW 274
52345: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52346: LD_ADDR_VAR 0 4
52350: PUSH
52351: LD_VAR 0 2
52355: PUSH
52356: LD_INT 1
52358: ARRAY
52359: PPUSH
52360: LD_VAR 0 2
52364: PUSH
52365: LD_INT 2
52367: ARRAY
52368: PPUSH
52369: LD_VAR 0 2
52373: PUSH
52374: LD_INT 3
52376: ARRAY
52377: PPUSH
52378: LD_VAR 0 2
52382: PUSH
52383: LD_INT 4
52385: ARRAY
52386: PPUSH
52387: CALL_OW 449
52391: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52392: LD_ADDR_VAR 0 3
52396: PUSH
52397: LD_VAR 0 5
52401: PPUSH
52402: LD_INT 1
52404: PPUSH
52405: CALL_OW 275
52409: PUSH
52410: LD_VAR 0 4
52414: PUSH
52415: LD_INT 1
52417: ARRAY
52418: GREATEREQUAL
52419: IFFALSE 52445
52421: PUSH
52422: LD_VAR 0 5
52426: PPUSH
52427: LD_INT 2
52429: PPUSH
52430: CALL_OW 275
52434: PUSH
52435: LD_VAR 0 4
52439: PUSH
52440: LD_INT 2
52442: ARRAY
52443: GREATEREQUAL
52444: AND
52445: IFFALSE 52471
52447: PUSH
52448: LD_VAR 0 5
52452: PPUSH
52453: LD_INT 3
52455: PPUSH
52456: CALL_OW 275
52460: PUSH
52461: LD_VAR 0 4
52465: PUSH
52466: LD_INT 3
52468: ARRAY
52469: GREATEREQUAL
52470: AND
52471: ST_TO_ADDR
// end ;
52472: LD_VAR 0 3
52476: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52477: LD_INT 0
52479: PPUSH
52480: PPUSH
52481: PPUSH
52482: PPUSH
// pom := GetBase ( building ) ;
52483: LD_ADDR_VAR 0 3
52487: PUSH
52488: LD_VAR 0 1
52492: PPUSH
52493: CALL_OW 274
52497: ST_TO_ADDR
// if not pom then
52498: LD_VAR 0 3
52502: NOT
52503: IFFALSE 52507
// exit ;
52505: GO 52681
// btype := GetBType ( building ) ;
52507: LD_ADDR_VAR 0 5
52511: PUSH
52512: LD_VAR 0 1
52516: PPUSH
52517: CALL_OW 266
52521: ST_TO_ADDR
// if btype = b_armoury then
52522: LD_VAR 0 5
52526: PUSH
52527: LD_INT 4
52529: EQUAL
52530: IFFALSE 52540
// btype := b_barracks ;
52532: LD_ADDR_VAR 0 5
52536: PUSH
52537: LD_INT 5
52539: ST_TO_ADDR
// if btype = b_depot then
52540: LD_VAR 0 5
52544: PUSH
52545: LD_INT 0
52547: EQUAL
52548: IFFALSE 52558
// btype := b_warehouse ;
52550: LD_ADDR_VAR 0 5
52554: PUSH
52555: LD_INT 1
52557: ST_TO_ADDR
// if btype = b_workshop then
52558: LD_VAR 0 5
52562: PUSH
52563: LD_INT 2
52565: EQUAL
52566: IFFALSE 52576
// btype := b_factory ;
52568: LD_ADDR_VAR 0 5
52572: PUSH
52573: LD_INT 3
52575: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52576: LD_ADDR_VAR 0 4
52580: PUSH
52581: LD_VAR 0 5
52585: PPUSH
52586: LD_VAR 0 1
52590: PPUSH
52591: CALL_OW 248
52595: PPUSH
52596: CALL_OW 450
52600: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52601: LD_ADDR_VAR 0 2
52605: PUSH
52606: LD_VAR 0 3
52610: PPUSH
52611: LD_INT 1
52613: PPUSH
52614: CALL_OW 275
52618: PUSH
52619: LD_VAR 0 4
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: GREATEREQUAL
52628: IFFALSE 52654
52630: PUSH
52631: LD_VAR 0 3
52635: PPUSH
52636: LD_INT 2
52638: PPUSH
52639: CALL_OW 275
52643: PUSH
52644: LD_VAR 0 4
52648: PUSH
52649: LD_INT 2
52651: ARRAY
52652: GREATEREQUAL
52653: AND
52654: IFFALSE 52680
52656: PUSH
52657: LD_VAR 0 3
52661: PPUSH
52662: LD_INT 3
52664: PPUSH
52665: CALL_OW 275
52669: PUSH
52670: LD_VAR 0 4
52674: PUSH
52675: LD_INT 3
52677: ARRAY
52678: GREATEREQUAL
52679: AND
52680: ST_TO_ADDR
// end ;
52681: LD_VAR 0 2
52685: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52686: LD_INT 0
52688: PPUSH
52689: PPUSH
52690: PPUSH
// pom := GetBase ( building ) ;
52691: LD_ADDR_VAR 0 4
52695: PUSH
52696: LD_VAR 0 1
52700: PPUSH
52701: CALL_OW 274
52705: ST_TO_ADDR
// if not pom then
52706: LD_VAR 0 4
52710: NOT
52711: IFFALSE 52715
// exit ;
52713: GO 52820
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52715: LD_ADDR_VAR 0 5
52719: PUSH
52720: LD_VAR 0 2
52724: PPUSH
52725: LD_VAR 0 1
52729: PPUSH
52730: CALL_OW 248
52734: PPUSH
52735: CALL_OW 450
52739: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52740: LD_ADDR_VAR 0 3
52744: PUSH
52745: LD_VAR 0 4
52749: PPUSH
52750: LD_INT 1
52752: PPUSH
52753: CALL_OW 275
52757: PUSH
52758: LD_VAR 0 5
52762: PUSH
52763: LD_INT 1
52765: ARRAY
52766: GREATEREQUAL
52767: IFFALSE 52793
52769: PUSH
52770: LD_VAR 0 4
52774: PPUSH
52775: LD_INT 2
52777: PPUSH
52778: CALL_OW 275
52782: PUSH
52783: LD_VAR 0 5
52787: PUSH
52788: LD_INT 2
52790: ARRAY
52791: GREATEREQUAL
52792: AND
52793: IFFALSE 52819
52795: PUSH
52796: LD_VAR 0 4
52800: PPUSH
52801: LD_INT 3
52803: PPUSH
52804: CALL_OW 275
52808: PUSH
52809: LD_VAR 0 5
52813: PUSH
52814: LD_INT 3
52816: ARRAY
52817: GREATEREQUAL
52818: AND
52819: ST_TO_ADDR
// end ;
52820: LD_VAR 0 3
52824: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52825: LD_INT 0
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
// result := false ;
52838: LD_ADDR_VAR 0 8
52842: PUSH
52843: LD_INT 0
52845: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52846: LD_VAR 0 5
52850: NOT
52851: IFTRUE 52860
52853: PUSH
52854: LD_VAR 0 1
52858: NOT
52859: OR
52860: IFTRUE 52869
52862: PUSH
52863: LD_VAR 0 2
52867: NOT
52868: OR
52869: IFTRUE 52878
52871: PUSH
52872: LD_VAR 0 3
52876: NOT
52877: OR
52878: IFFALSE 52882
// exit ;
52880: GO 53708
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52882: LD_ADDR_VAR 0 14
52886: PUSH
52887: LD_VAR 0 1
52891: PPUSH
52892: LD_VAR 0 2
52896: PPUSH
52897: LD_VAR 0 3
52901: PPUSH
52902: LD_VAR 0 4
52906: PPUSH
52907: LD_VAR 0 5
52911: PUSH
52912: LD_INT 1
52914: ARRAY
52915: PPUSH
52916: CALL_OW 248
52920: PPUSH
52921: LD_INT 0
52923: PPUSH
52924: CALL 54989 0 6
52928: ST_TO_ADDR
// if not hexes then
52929: LD_VAR 0 14
52933: NOT
52934: IFFALSE 52938
// exit ;
52936: GO 53708
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52938: LD_ADDR_VAR 0 17
52942: PUSH
52943: LD_VAR 0 5
52947: PPUSH
52948: LD_INT 22
52950: PUSH
52951: LD_VAR 0 13
52955: PPUSH
52956: CALL_OW 255
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 30
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 30
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PPUSH
52997: CALL_OW 72
53001: ST_TO_ADDR
// for i = 1 to hexes do
53002: LD_ADDR_VAR 0 9
53006: PUSH
53007: DOUBLE
53008: LD_INT 1
53010: DEC
53011: ST_TO_ADDR
53012: LD_VAR 0 14
53016: PUSH
53017: FOR_TO
53018: IFFALSE 53706
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53020: LD_ADDR_VAR 0 13
53024: PUSH
53025: LD_VAR 0 14
53029: PUSH
53030: LD_VAR 0 9
53034: ARRAY
53035: PUSH
53036: LD_INT 1
53038: ARRAY
53039: PPUSH
53040: LD_VAR 0 14
53044: PUSH
53045: LD_VAR 0 9
53049: ARRAY
53050: PUSH
53051: LD_INT 2
53053: ARRAY
53054: PPUSH
53055: CALL_OW 428
53059: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53060: LD_VAR 0 14
53064: PUSH
53065: LD_VAR 0 9
53069: ARRAY
53070: PUSH
53071: LD_INT 1
53073: ARRAY
53074: PPUSH
53075: LD_VAR 0 14
53079: PUSH
53080: LD_VAR 0 9
53084: ARRAY
53085: PUSH
53086: LD_INT 2
53088: ARRAY
53089: PPUSH
53090: CALL_OW 351
53094: IFTRUE 53133
53096: PUSH
53097: LD_VAR 0 14
53101: PUSH
53102: LD_VAR 0 9
53106: ARRAY
53107: PUSH
53108: LD_INT 1
53110: ARRAY
53111: PPUSH
53112: LD_VAR 0 14
53116: PUSH
53117: LD_VAR 0 9
53121: ARRAY
53122: PUSH
53123: LD_INT 2
53125: ARRAY
53126: PPUSH
53127: CALL_OW 488
53131: NOT
53132: OR
53133: IFTRUE 53150
53135: PUSH
53136: LD_VAR 0 13
53140: PPUSH
53141: CALL_OW 247
53145: PUSH
53146: LD_INT 3
53148: EQUAL
53149: OR
53150: IFFALSE 53156
// exit ;
53152: POP
53153: POP
53154: GO 53708
// if not tmp then
53156: LD_VAR 0 13
53160: NOT
53161: IFFALSE 53165
// continue ;
53163: GO 53017
// result := true ;
53165: LD_ADDR_VAR 0 8
53169: PUSH
53170: LD_INT 1
53172: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53173: LD_VAR 0 6
53177: IFFALSE 53194
53179: PUSH
53180: LD_VAR 0 13
53184: PPUSH
53185: CALL_OW 247
53189: PUSH
53190: LD_INT 2
53192: EQUAL
53193: AND
53194: IFFALSE 53211
53196: PUSH
53197: LD_VAR 0 13
53201: PPUSH
53202: CALL_OW 263
53206: PUSH
53207: LD_INT 1
53209: EQUAL
53210: AND
53211: IFFALSE 53375
// begin if IsDrivenBy ( tmp ) then
53213: LD_VAR 0 13
53217: PPUSH
53218: CALL_OW 311
53222: IFFALSE 53226
// continue ;
53224: GO 53017
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53226: LD_VAR 0 6
53230: PPUSH
53231: LD_INT 3
53233: PUSH
53234: LD_INT 60
53236: PUSH
53237: EMPTY
53238: LIST
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: LD_INT 55
53249: PUSH
53250: EMPTY
53251: LIST
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PPUSH
53261: CALL_OW 72
53265: IFFALSE 53373
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53267: LD_ADDR_VAR 0 18
53271: PUSH
53272: LD_VAR 0 6
53276: PPUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 60
53282: PUSH
53283: EMPTY
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: LD_INT 55
53295: PUSH
53296: EMPTY
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PPUSH
53307: CALL_OW 72
53311: PUSH
53312: LD_INT 1
53314: ARRAY
53315: ST_TO_ADDR
// if IsInUnit ( driver ) then
53316: LD_VAR 0 18
53320: PPUSH
53321: CALL_OW 310
53325: IFFALSE 53336
// ComExit ( driver ) ;
53327: LD_VAR 0 18
53331: PPUSH
53332: CALL 78979 0 1
// AddComEnterUnit ( driver , tmp ) ;
53336: LD_VAR 0 18
53340: PPUSH
53341: LD_VAR 0 13
53345: PPUSH
53346: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53350: LD_VAR 0 18
53354: PPUSH
53355: LD_VAR 0 7
53359: PPUSH
53360: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53364: LD_VAR 0 18
53368: PPUSH
53369: CALL_OW 181
// end ; continue ;
53373: GO 53017
// end ; if not cleaners or not tmp in cleaners then
53375: LD_VAR 0 6
53379: NOT
53380: IFTRUE 53395
53382: PUSH
53383: LD_VAR 0 13
53387: PUSH
53388: LD_VAR 0 6
53392: IN
53393: NOT
53394: OR
53395: IFFALSE 53704
// begin if dep then
53397: LD_VAR 0 17
53401: IFFALSE 53537
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53403: LD_ADDR_VAR 0 16
53407: PUSH
53408: LD_VAR 0 17
53412: PUSH
53413: LD_INT 1
53415: ARRAY
53416: PPUSH
53417: CALL_OW 250
53421: PPUSH
53422: LD_VAR 0 17
53426: PUSH
53427: LD_INT 1
53429: ARRAY
53430: PPUSH
53431: CALL_OW 254
53435: PPUSH
53436: LD_INT 5
53438: PPUSH
53439: CALL_OW 272
53443: PUSH
53444: LD_VAR 0 17
53448: PUSH
53449: LD_INT 1
53451: ARRAY
53452: PPUSH
53453: CALL_OW 251
53457: PPUSH
53458: LD_VAR 0 17
53462: PUSH
53463: LD_INT 1
53465: ARRAY
53466: PPUSH
53467: CALL_OW 254
53471: PPUSH
53472: LD_INT 5
53474: PPUSH
53475: CALL_OW 273
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53484: LD_VAR 0 16
53488: PUSH
53489: LD_INT 1
53491: ARRAY
53492: PPUSH
53493: LD_VAR 0 16
53497: PUSH
53498: LD_INT 2
53500: ARRAY
53501: PPUSH
53502: CALL_OW 488
53506: IFFALSE 53537
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53508: LD_VAR 0 13
53512: PPUSH
53513: LD_VAR 0 16
53517: PUSH
53518: LD_INT 1
53520: ARRAY
53521: PPUSH
53522: LD_VAR 0 16
53526: PUSH
53527: LD_INT 2
53529: ARRAY
53530: PPUSH
53531: CALL_OW 111
// continue ;
53535: GO 53017
// end ; end ; r := GetDir ( tmp ) ;
53537: LD_ADDR_VAR 0 15
53541: PUSH
53542: LD_VAR 0 13
53546: PPUSH
53547: CALL_OW 254
53551: ST_TO_ADDR
// if r = 5 then
53552: LD_VAR 0 15
53556: PUSH
53557: LD_INT 5
53559: EQUAL
53560: IFFALSE 53570
// r := 0 ;
53562: LD_ADDR_VAR 0 15
53566: PUSH
53567: LD_INT 0
53569: ST_TO_ADDR
// for j = r to 5 do
53570: LD_ADDR_VAR 0 10
53574: PUSH
53575: DOUBLE
53576: LD_VAR 0 15
53580: DEC
53581: ST_TO_ADDR
53582: LD_INT 5
53584: PUSH
53585: FOR_TO
53586: IFFALSE 53702
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53588: LD_ADDR_VAR 0 11
53592: PUSH
53593: LD_VAR 0 13
53597: PPUSH
53598: CALL_OW 250
53602: PPUSH
53603: LD_VAR 0 10
53607: PPUSH
53608: LD_INT 2
53610: PPUSH
53611: CALL_OW 272
53615: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53616: LD_ADDR_VAR 0 12
53620: PUSH
53621: LD_VAR 0 13
53625: PPUSH
53626: CALL_OW 251
53630: PPUSH
53631: LD_VAR 0 10
53635: PPUSH
53636: LD_INT 2
53638: PPUSH
53639: CALL_OW 273
53643: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53644: LD_VAR 0 11
53648: PPUSH
53649: LD_VAR 0 12
53653: PPUSH
53654: CALL_OW 488
53658: IFFALSE 53677
53660: PUSH
53661: LD_VAR 0 11
53665: PPUSH
53666: LD_VAR 0 12
53670: PPUSH
53671: CALL_OW 428
53675: NOT
53676: AND
53677: IFFALSE 53700
// begin ComMoveXY ( tmp , _x , _y ) ;
53679: LD_VAR 0 13
53683: PPUSH
53684: LD_VAR 0 11
53688: PPUSH
53689: LD_VAR 0 12
53693: PPUSH
53694: CALL_OW 111
// break ;
53698: GO 53702
// end ; end ;
53700: GO 53585
53702: POP
53703: POP
// end ; end ;
53704: GO 53017
53706: POP
53707: POP
// end ;
53708: LD_VAR 0 8
53712: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53713: LD_INT 0
53715: PPUSH
// result := true ;
53716: LD_ADDR_VAR 0 3
53720: PUSH
53721: LD_INT 1
53723: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53724: LD_VAR 0 2
53728: PUSH
53729: LD_INT 24
53731: DOUBLE
53732: EQUAL
53733: IFTRUE 53743
53735: LD_INT 33
53737: DOUBLE
53738: EQUAL
53739: IFTRUE 53743
53741: GO 53768
53743: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53744: LD_ADDR_VAR 0 3
53748: PUSH
53749: LD_INT 32
53751: PPUSH
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 321
53761: PUSH
53762: LD_INT 2
53764: EQUAL
53765: ST_TO_ADDR
53766: GO 54084
53768: LD_INT 20
53770: DOUBLE
53771: EQUAL
53772: IFTRUE 53776
53774: GO 53801
53776: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53777: LD_ADDR_VAR 0 3
53781: PUSH
53782: LD_INT 6
53784: PPUSH
53785: LD_VAR 0 1
53789: PPUSH
53790: CALL_OW 321
53794: PUSH
53795: LD_INT 2
53797: EQUAL
53798: ST_TO_ADDR
53799: GO 54084
53801: LD_INT 22
53803: DOUBLE
53804: EQUAL
53805: IFTRUE 53815
53807: LD_INT 36
53809: DOUBLE
53810: EQUAL
53811: IFTRUE 53815
53813: GO 53840
53815: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53816: LD_ADDR_VAR 0 3
53820: PUSH
53821: LD_INT 15
53823: PPUSH
53824: LD_VAR 0 1
53828: PPUSH
53829: CALL_OW 321
53833: PUSH
53834: LD_INT 2
53836: EQUAL
53837: ST_TO_ADDR
53838: GO 54084
53840: LD_INT 30
53842: DOUBLE
53843: EQUAL
53844: IFTRUE 53848
53846: GO 53873
53848: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53849: LD_ADDR_VAR 0 3
53853: PUSH
53854: LD_INT 20
53856: PPUSH
53857: LD_VAR 0 1
53861: PPUSH
53862: CALL_OW 321
53866: PUSH
53867: LD_INT 2
53869: EQUAL
53870: ST_TO_ADDR
53871: GO 54084
53873: LD_INT 28
53875: DOUBLE
53876: EQUAL
53877: IFTRUE 53887
53879: LD_INT 21
53881: DOUBLE
53882: EQUAL
53883: IFTRUE 53887
53885: GO 53912
53887: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53888: LD_ADDR_VAR 0 3
53892: PUSH
53893: LD_INT 21
53895: PPUSH
53896: LD_VAR 0 1
53900: PPUSH
53901: CALL_OW 321
53905: PUSH
53906: LD_INT 2
53908: EQUAL
53909: ST_TO_ADDR
53910: GO 54084
53912: LD_INT 16
53914: DOUBLE
53915: EQUAL
53916: IFTRUE 53920
53918: GO 53945
53920: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53921: LD_ADDR_VAR 0 3
53925: PUSH
53926: LD_INT 84
53928: PPUSH
53929: LD_VAR 0 1
53933: PPUSH
53934: CALL_OW 321
53938: PUSH
53939: LD_INT 2
53941: EQUAL
53942: ST_TO_ADDR
53943: GO 54084
53945: LD_INT 19
53947: DOUBLE
53948: EQUAL
53949: IFTRUE 53959
53951: LD_INT 23
53953: DOUBLE
53954: EQUAL
53955: IFTRUE 53959
53957: GO 53984
53959: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53960: LD_ADDR_VAR 0 3
53964: PUSH
53965: LD_INT 83
53967: PPUSH
53968: LD_VAR 0 1
53972: PPUSH
53973: CALL_OW 321
53977: PUSH
53978: LD_INT 2
53980: EQUAL
53981: ST_TO_ADDR
53982: GO 54084
53984: LD_INT 17
53986: DOUBLE
53987: EQUAL
53988: IFTRUE 53992
53990: GO 54017
53992: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53993: LD_ADDR_VAR 0 3
53997: PUSH
53998: LD_INT 39
54000: PPUSH
54001: LD_VAR 0 1
54005: PPUSH
54006: CALL_OW 321
54010: PUSH
54011: LD_INT 2
54013: EQUAL
54014: ST_TO_ADDR
54015: GO 54084
54017: LD_INT 18
54019: DOUBLE
54020: EQUAL
54021: IFTRUE 54025
54023: GO 54050
54025: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54026: LD_ADDR_VAR 0 3
54030: PUSH
54031: LD_INT 40
54033: PPUSH
54034: LD_VAR 0 1
54038: PPUSH
54039: CALL_OW 321
54043: PUSH
54044: LD_INT 2
54046: EQUAL
54047: ST_TO_ADDR
54048: GO 54084
54050: LD_INT 27
54052: DOUBLE
54053: EQUAL
54054: IFTRUE 54058
54056: GO 54083
54058: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54059: LD_ADDR_VAR 0 3
54063: PUSH
54064: LD_INT 35
54066: PPUSH
54067: LD_VAR 0 1
54071: PPUSH
54072: CALL_OW 321
54076: PUSH
54077: LD_INT 2
54079: EQUAL
54080: ST_TO_ADDR
54081: GO 54084
54083: POP
// end ;
54084: LD_VAR 0 3
54088: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54089: LD_INT 0
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
54100: PPUSH
54101: PPUSH
// result := false ;
54102: LD_ADDR_VAR 0 6
54106: PUSH
54107: LD_INT 0
54109: ST_TO_ADDR
// if btype = b_depot then
54110: LD_VAR 0 2
54114: PUSH
54115: LD_INT 0
54117: EQUAL
54118: IFFALSE 54130
// begin result := true ;
54120: LD_ADDR_VAR 0 6
54124: PUSH
54125: LD_INT 1
54127: ST_TO_ADDR
// exit ;
54128: GO 54984
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54130: LD_VAR 0 1
54134: NOT
54135: IFTRUE 54160
54137: PUSH
54138: LD_VAR 0 1
54142: PPUSH
54143: CALL_OW 266
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: IN
54158: NOT
54159: OR
54160: IFTRUE 54169
54162: PUSH
54163: LD_VAR 0 2
54167: NOT
54168: OR
54169: IFTRUE 54205
54171: PUSH
54172: LD_VAR 0 5
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: LD_INT 4
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: IN
54203: NOT
54204: OR
54205: IFTRUE 54224
54207: PUSH
54208: LD_VAR 0 3
54212: PPUSH
54213: LD_VAR 0 4
54217: PPUSH
54218: CALL_OW 488
54222: NOT
54223: OR
54224: IFFALSE 54228
// exit ;
54226: GO 54984
// side := GetSide ( depot ) ;
54228: LD_ADDR_VAR 0 9
54232: PUSH
54233: LD_VAR 0 1
54237: PPUSH
54238: CALL_OW 255
54242: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54243: LD_VAR 0 9
54247: PPUSH
54248: LD_VAR 0 2
54252: PPUSH
54253: CALL 53713 0 2
54257: NOT
54258: IFFALSE 54262
// exit ;
54260: GO 54984
// pom := GetBase ( depot ) ;
54262: LD_ADDR_VAR 0 10
54266: PUSH
54267: LD_VAR 0 1
54271: PPUSH
54272: CALL_OW 274
54276: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54277: LD_ADDR_VAR 0 11
54281: PUSH
54282: LD_VAR 0 2
54286: PPUSH
54287: LD_VAR 0 1
54291: PPUSH
54292: CALL_OW 248
54296: PPUSH
54297: CALL_OW 450
54301: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54302: LD_VAR 0 10
54306: PPUSH
54307: LD_INT 1
54309: PPUSH
54310: CALL_OW 275
54314: PUSH
54315: LD_VAR 0 11
54319: PUSH
54320: LD_INT 1
54322: ARRAY
54323: GREATEREQUAL
54324: IFFALSE 54350
54326: PUSH
54327: LD_VAR 0 10
54331: PPUSH
54332: LD_INT 2
54334: PPUSH
54335: CALL_OW 275
54339: PUSH
54340: LD_VAR 0 11
54344: PUSH
54345: LD_INT 2
54347: ARRAY
54348: GREATEREQUAL
54349: AND
54350: IFFALSE 54376
54352: PUSH
54353: LD_VAR 0 10
54357: PPUSH
54358: LD_INT 3
54360: PPUSH
54361: CALL_OW 275
54365: PUSH
54366: LD_VAR 0 11
54370: PUSH
54371: LD_INT 3
54373: ARRAY
54374: GREATEREQUAL
54375: AND
54376: NOT
54377: IFFALSE 54381
// exit ;
54379: GO 54984
// if GetBType ( depot ) = b_depot then
54381: LD_VAR 0 1
54385: PPUSH
54386: CALL_OW 266
54390: PUSH
54391: LD_INT 0
54393: EQUAL
54394: IFFALSE 54406
// dist := 28 else
54396: LD_ADDR_VAR 0 14
54400: PUSH
54401: LD_INT 28
54403: ST_TO_ADDR
54404: GO 54414
// dist := 36 ;
54406: LD_ADDR_VAR 0 14
54410: PUSH
54411: LD_INT 36
54413: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54414: LD_VAR 0 1
54418: PPUSH
54419: LD_VAR 0 3
54423: PPUSH
54424: LD_VAR 0 4
54428: PPUSH
54429: CALL_OW 297
54433: PUSH
54434: LD_VAR 0 14
54438: GREATER
54439: IFFALSE 54443
// exit ;
54441: GO 54984
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54443: LD_ADDR_VAR 0 12
54447: PUSH
54448: LD_VAR 0 2
54452: PPUSH
54453: LD_VAR 0 3
54457: PPUSH
54458: LD_VAR 0 4
54462: PPUSH
54463: LD_VAR 0 5
54467: PPUSH
54468: LD_VAR 0 1
54472: PPUSH
54473: CALL_OW 248
54477: PPUSH
54478: LD_INT 0
54480: PPUSH
54481: CALL 54989 0 6
54485: ST_TO_ADDR
// if not hexes then
54486: LD_VAR 0 12
54490: NOT
54491: IFFALSE 54495
// exit ;
54493: GO 54984
// hex := GetHexInfo ( x , y ) ;
54495: LD_ADDR_VAR 0 15
54499: PUSH
54500: LD_VAR 0 3
54504: PPUSH
54505: LD_VAR 0 4
54509: PPUSH
54510: CALL_OW 546
54514: ST_TO_ADDR
// if hex [ 1 ] then
54515: LD_VAR 0 15
54519: PUSH
54520: LD_INT 1
54522: ARRAY
54523: IFFALSE 54527
// exit ;
54525: GO 54984
// height := hex [ 2 ] ;
54527: LD_ADDR_VAR 0 13
54531: PUSH
54532: LD_VAR 0 15
54536: PUSH
54537: LD_INT 2
54539: ARRAY
54540: ST_TO_ADDR
// for i = 1 to hexes do
54541: LD_ADDR_VAR 0 7
54545: PUSH
54546: DOUBLE
54547: LD_INT 1
54549: DEC
54550: ST_TO_ADDR
54551: LD_VAR 0 12
54555: PUSH
54556: FOR_TO
54557: IFFALSE 54901
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54559: LD_VAR 0 12
54563: PUSH
54564: LD_VAR 0 7
54568: ARRAY
54569: PUSH
54570: LD_INT 1
54572: ARRAY
54573: PPUSH
54574: LD_VAR 0 12
54578: PUSH
54579: LD_VAR 0 7
54583: ARRAY
54584: PUSH
54585: LD_INT 2
54587: ARRAY
54588: PPUSH
54589: CALL_OW 488
54593: NOT
54594: IFTRUE 54636
54596: PUSH
54597: LD_VAR 0 12
54601: PUSH
54602: LD_VAR 0 7
54606: ARRAY
54607: PUSH
54608: LD_INT 1
54610: ARRAY
54611: PPUSH
54612: LD_VAR 0 12
54616: PUSH
54617: LD_VAR 0 7
54621: ARRAY
54622: PUSH
54623: LD_INT 2
54625: ARRAY
54626: PPUSH
54627: CALL_OW 428
54631: PUSH
54632: LD_INT 0
54634: GREATER
54635: OR
54636: IFTRUE 54674
54638: PUSH
54639: LD_VAR 0 12
54643: PUSH
54644: LD_VAR 0 7
54648: ARRAY
54649: PUSH
54650: LD_INT 1
54652: ARRAY
54653: PPUSH
54654: LD_VAR 0 12
54658: PUSH
54659: LD_VAR 0 7
54663: ARRAY
54664: PUSH
54665: LD_INT 2
54667: ARRAY
54668: PPUSH
54669: CALL_OW 351
54673: OR
54674: IFFALSE 54680
// exit ;
54676: POP
54677: POP
54678: GO 54984
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54680: LD_ADDR_VAR 0 8
54684: PUSH
54685: LD_VAR 0 12
54689: PUSH
54690: LD_VAR 0 7
54694: ARRAY
54695: PUSH
54696: LD_INT 1
54698: ARRAY
54699: PPUSH
54700: LD_VAR 0 12
54704: PUSH
54705: LD_VAR 0 7
54709: ARRAY
54710: PUSH
54711: LD_INT 2
54713: ARRAY
54714: PPUSH
54715: CALL_OW 546
54719: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54720: LD_VAR 0 8
54724: PUSH
54725: LD_INT 1
54727: ARRAY
54728: IFTRUE 54750
54730: PUSH
54731: LD_VAR 0 8
54735: PUSH
54736: LD_INT 2
54738: ARRAY
54739: PUSH
54740: LD_VAR 0 13
54744: PUSH
54745: LD_INT 2
54747: PLUS
54748: GREATER
54749: OR
54750: IFTRUE 54772
54752: PUSH
54753: LD_VAR 0 8
54757: PUSH
54758: LD_INT 2
54760: ARRAY
54761: PUSH
54762: LD_VAR 0 13
54766: PUSH
54767: LD_INT 2
54769: MINUS
54770: LESS
54771: OR
54772: IFTRUE 54840
54774: PUSH
54775: LD_VAR 0 8
54779: PUSH
54780: LD_INT 3
54782: ARRAY
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 8
54789: PUSH
54790: LD_INT 9
54792: PUSH
54793: LD_INT 10
54795: PUSH
54796: LD_INT 11
54798: PUSH
54799: LD_INT 12
54801: PUSH
54802: LD_INT 13
54804: PUSH
54805: LD_INT 16
54807: PUSH
54808: LD_INT 17
54810: PUSH
54811: LD_INT 18
54813: PUSH
54814: LD_INT 19
54816: PUSH
54817: LD_INT 20
54819: PUSH
54820: LD_INT 21
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: IN
54838: NOT
54839: OR
54840: IFTRUE 54853
54842: PUSH
54843: LD_VAR 0 8
54847: PUSH
54848: LD_INT 5
54850: ARRAY
54851: NOT
54852: OR
54853: IFTRUE 54893
54855: PUSH
54856: LD_VAR 0 8
54860: PUSH
54861: LD_INT 6
54863: ARRAY
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 2
54870: PUSH
54871: LD_INT 7
54873: PUSH
54874: LD_INT 9
54876: PUSH
54877: LD_INT 10
54879: PUSH
54880: LD_INT 11
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: IN
54891: NOT
54892: OR
54893: IFFALSE 54899
// exit ;
54895: POP
54896: POP
54897: GO 54984
// end ;
54899: GO 54556
54901: POP
54902: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54903: LD_VAR 0 9
54907: PPUSH
54908: LD_VAR 0 3
54912: PPUSH
54913: LD_VAR 0 4
54917: PPUSH
54918: LD_INT 20
54920: PPUSH
54921: CALL 46803 0 4
54925: PUSH
54926: LD_INT 4
54928: ARRAY
54929: IFFALSE 54933
// exit ;
54931: GO 54984
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54933: LD_VAR 0 2
54937: PUSH
54938: LD_INT 29
54940: PUSH
54941: LD_INT 30
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: IN
54948: IFFALSE 54972
54950: PUSH
54951: LD_VAR 0 3
54955: PPUSH
54956: LD_VAR 0 4
54960: PPUSH
54961: LD_VAR 0 9
54965: PPUSH
54966: CALL_OW 440
54970: NOT
54971: AND
54972: IFFALSE 54976
// exit ;
54974: GO 54984
// result := true ;
54976: LD_ADDR_VAR 0 6
54980: PUSH
54981: LD_INT 1
54983: ST_TO_ADDR
// end ;
54984: LD_VAR 0 6
54988: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54989: LD_INT 0
54991: PPUSH
54992: PPUSH
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
54998: PPUSH
54999: PPUSH
55000: PPUSH
55001: PPUSH
55002: PPUSH
55003: PPUSH
55004: PPUSH
55005: PPUSH
55006: PPUSH
55007: PPUSH
55008: PPUSH
55009: PPUSH
55010: PPUSH
55011: PPUSH
55012: PPUSH
55013: PPUSH
55014: PPUSH
55015: PPUSH
55016: PPUSH
55017: PPUSH
55018: PPUSH
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
55024: PPUSH
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
// result = [ ] ;
55049: LD_ADDR_VAR 0 7
55053: PUSH
55054: EMPTY
55055: ST_TO_ADDR
// temp_list = [ ] ;
55056: LD_ADDR_VAR 0 9
55060: PUSH
55061: EMPTY
55062: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55063: LD_VAR 0 4
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: LD_INT 4
55082: PUSH
55083: LD_INT 5
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: IN
55094: NOT
55095: IFTRUE 55138
55097: PUSH
55098: LD_VAR 0 1
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: IN
55113: IFFALSE 55137
55115: PUSH
55116: LD_VAR 0 5
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: LIST
55134: IN
55135: NOT
55136: AND
55137: OR
55138: IFFALSE 55142
// exit ;
55140: GO 73541
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55142: LD_VAR 0 1
55146: PUSH
55147: LD_INT 6
55149: PUSH
55150: LD_INT 7
55152: PUSH
55153: LD_INT 8
55155: PUSH
55156: LD_INT 13
55158: PUSH
55159: LD_INT 12
55161: PUSH
55162: LD_INT 15
55164: PUSH
55165: LD_INT 11
55167: PUSH
55168: LD_INT 14
55170: PUSH
55171: LD_INT 10
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: IN
55185: IFFALSE 55195
// btype = b_lab ;
55187: LD_ADDR_VAR 0 1
55191: PUSH
55192: LD_INT 6
55194: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55195: LD_VAR 0 6
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: LIST
55213: IN
55214: NOT
55215: IFTRUE 55283
55217: PUSH
55218: LD_VAR 0 1
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: LD_INT 6
55237: PUSH
55238: LD_INT 36
55240: PUSH
55241: LD_INT 4
55243: PUSH
55244: LD_INT 5
55246: PUSH
55247: LD_INT 31
55249: PUSH
55250: LD_INT 32
55252: PUSH
55253: LD_INT 33
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: IN
55269: NOT
55270: IFFALSE 55282
55272: PUSH
55273: LD_VAR 0 6
55277: PUSH
55278: LD_INT 1
55280: EQUAL
55281: AND
55282: OR
55283: IFTRUE 55315
55285: PUSH
55286: LD_VAR 0 1
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: IN
55301: NOT
55302: IFFALSE 55314
55304: PUSH
55305: LD_VAR 0 6
55309: PUSH
55310: LD_INT 2
55312: EQUAL
55313: AND
55314: OR
55315: IFFALSE 55325
// mode = 0 ;
55317: LD_ADDR_VAR 0 6
55321: PUSH
55322: LD_INT 0
55324: ST_TO_ADDR
// case mode of 0 :
55325: LD_VAR 0 6
55329: PUSH
55330: LD_INT 0
55332: DOUBLE
55333: EQUAL
55334: IFTRUE 55338
55336: GO 66791
55338: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55339: LD_ADDR_VAR 0 11
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 3
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55532: LD_ADDR_VAR 0 12
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: NEG
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: NEG
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55728: LD_ADDR_VAR 0 13
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 2
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: LD_INT 2
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55927: LD_ADDR_VAR 0 14
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56123: LD_ADDR_VAR 0 15
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 3
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56316: LD_ADDR_VAR 0 16
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: LD_INT 2
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56509: LD_ADDR_VAR 0 17
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56739: LD_ADDR_VAR 0 18
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 2
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56969: LD_ADDR_VAR 0 19
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57199: LD_ADDR_VAR 0 20
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: LD_INT 2
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: NEG
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57429: LD_ADDR_VAR 0 21
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57659: LD_ADDR_VAR 0 22
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57889: LD_ADDR_VAR 0 23
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58169: LD_ADDR_VAR 0 24
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 2
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: PUSH
58305: LD_INT 2
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 2
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58445: LD_ADDR_VAR 0 25
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: NEG
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 2
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 3
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58719: LD_ADDR_VAR 0 26
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 2
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: LD_INT 0
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 2
58918: NEG
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58995: LD_ADDR_VAR 0 27
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 1
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 3
59240: NEG
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59275: LD_ADDR_VAR 0 28
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59557: LD_ADDR_VAR 0 29
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 2
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: NEG
59748: PUSH
59749: LD_INT 3
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59836: LD_ADDR_VAR 0 30
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 1
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 2
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 2
60002: NEG
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 3
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 3
60079: NEG
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60114: LD_ADDR_VAR 0 31
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 1
60195: NEG
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 2
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 2
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 2
60291: NEG
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 3
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60392: LD_ADDR_VAR 0 32
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: LD_INT 1
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 2
60569: NEG
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 3
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 3
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 3
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60670: LD_ADDR_VAR 0 33
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 2
60825: NEG
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 2
60860: NEG
60861: PUSH
60862: LD_INT 3
60864: NEG
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 2
60872: PUSH
60873: LD_INT 1
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 3
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: LD_INT 3
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60949: LD_ADDR_VAR 0 34
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: NEG
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 1
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: LD_INT 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: NEG
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 3
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61229: LD_ADDR_VAR 0 35
61233: PUSH
61234: LD_INT 0
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61341: LD_ADDR_VAR 0 36
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: PUSH
61435: LD_INT 2
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61453: LD_ADDR_VAR 0 37
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 1
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 1
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61565: LD_ADDR_VAR 0 38
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: NEG
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61677: LD_ADDR_VAR 0 39
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61789: LD_ADDR_VAR 0 40
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 1
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61901: LD_ADDR_VAR 0 41
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: LD_INT 1
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 2
62056: NEG
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 2
62079: NEG
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: LD_INT 3
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 2
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 3
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 3
62124: PUSH
62125: LD_INT 1
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: LD_INT 3
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 2
62164: NEG
62165: PUSH
62166: LD_INT 1
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: NEG
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 3
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 3
62210: NEG
62211: PUSH
62212: LD_INT 3
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62251: LD_ADDR_VAR 0 42
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: LD_INT 2
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 2
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: LD_INT 1
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: NEG
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 2
62441: NEG
62442: PUSH
62443: LD_INT 3
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: LD_INT 3
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: LD_INT 3
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 3
62497: PUSH
62498: LD_INT 3
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: LD_INT 3
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 3
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: LD_INT 2
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: NEG
62561: PUSH
62562: LD_INT 3
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62601: LD_ADDR_VAR 0 43
62605: PUSH
62606: LD_INT 0
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: NEG
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: NEG
62791: PUSH
62792: LD_INT 3
62794: NEG
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 3
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: LD_INT 1
62827: NEG
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: LD_INT 1
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 3
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 2
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 2
62886: NEG
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: NEG
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62949: LD_ADDR_VAR 0 44
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 2
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 2
63104: NEG
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 2
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 2
63127: NEG
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 3
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: LD_INT 1
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 3
63162: PUSH
63163: LD_INT 0
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 3
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 3
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: PUSH
63193: LD_INT 3
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 3
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 3
63258: NEG
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63299: LD_ADDR_VAR 0 45
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: LD_INT 2
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 2
63477: NEG
63478: PUSH
63479: LD_INT 2
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 2
63489: NEG
63490: PUSH
63491: LD_INT 3
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 3
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 3
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 2
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 3
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 3
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 3
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 3
63608: NEG
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63649: LD_ADDR_VAR 0 46
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 2
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 3
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 0
63850: PUSH
63851: LD_INT 3
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: LD_INT 2
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 3
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_INT 3
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: NEG
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 3
63945: NEG
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 3
63956: NEG
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63997: LD_ADDR_VAR 0 47
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: LD_INT 0
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 1
64066: NEG
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 2
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 2
64112: NEG
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 2
64124: NEG
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64148: LD_ADDR_VAR 0 48
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: LD_INT 2
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64295: LD_ADDR_VAR 0 49
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: PUSH
64408: LD_INT 2
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: LD_INT 2
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64439: LD_ADDR_VAR 0 50
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 1
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: LD_INT 2
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64583: LD_ADDR_VAR 0 51
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: LD_INT 2
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 2
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: LD_INT 1
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 2
64706: NEG
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64730: LD_ADDR_VAR 0 52
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: NEG
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 2
64845: NEG
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 2
64857: NEG
64858: PUSH
64859: LD_INT 2
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64881: LD_ADDR_VAR 0 53
64885: PUSH
64886: LD_INT 0
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 1
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: LD_INT 2
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 2
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 2
65057: NEG
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 2
65080: NEG
65081: PUSH
65082: LD_INT 2
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65111: LD_ADDR_VAR 0 54
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: LD_INT 2
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 0
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 1
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 2
65246: PUSH
65247: LD_INT 2
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: LD_INT 2
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 2
65298: NEG
65299: PUSH
65300: LD_INT 1
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 2
65310: NEG
65311: PUSH
65312: LD_INT 2
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65341: LD_ADDR_VAR 0 55
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 2
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: LD_INT 0
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 0
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: NEG
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 2
65528: NEG
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 2
65540: NEG
65541: PUSH
65542: LD_INT 2
65544: NEG
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65571: LD_ADDR_VAR 0 56
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 1
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: LD_INT 1
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: NEG
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: NEG
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: LD_INT 1
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 2
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 2
65696: PUSH
65697: LD_INT 1
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: LD_INT 2
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: PUSH
65717: LD_INT 2
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 2
65747: NEG
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 2
65758: NEG
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65801: LD_ADDR_VAR 0 57
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: LD_INT 0
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 1
65882: NEG
65883: PUSH
65884: LD_INT 2
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 2
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 2
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 2
66000: NEG
66001: PUSH
66002: LD_INT 2
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66031: LD_ADDR_VAR 0 58
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: LD_INT 0
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 1
66112: NEG
66113: PUSH
66114: LD_INT 2
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: LD_INT 2
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 2
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: LD_INT 2
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 2
66207: NEG
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66261: LD_ADDR_VAR 0 59
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 0
66278: PUSH
66279: LD_INT 1
66281: NEG
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 1
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: LD_INT 0
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 1
66330: NEG
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66349: LD_ADDR_VAR 0 60
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 1
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 1
66377: PUSH
66378: LD_INT 0
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: LD_INT 1
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 1
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66437: LD_ADDR_VAR 0 61
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: LD_INT 1
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66525: LD_ADDR_VAR 0 62
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 1
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 0
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 1
66594: NEG
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66613: LD_ADDR_VAR 0 63
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: LD_INT 0
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: LD_INT 1
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 1
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: LD_INT 1
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: NEG
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66701: LD_ADDR_VAR 0 64
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 0
66718: PUSH
66719: LD_INT 1
66721: NEG
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 1
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: NEG
66771: PUSH
66772: LD_INT 1
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: ST_TO_ADDR
// end ; 1 :
66789: GO 72686
66791: LD_INT 1
66793: DOUBLE
66794: EQUAL
66795: IFTRUE 66799
66797: GO 69422
66799: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66800: LD_ADDR_VAR 0 11
66804: PUSH
66805: LD_INT 1
66807: NEG
66808: PUSH
66809: LD_INT 3
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: LD_INT 2
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66844: LD_ADDR_VAR 0 12
66848: PUSH
66849: LD_INT 2
66851: PUSH
66852: LD_INT 1
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 3
66862: PUSH
66863: LD_INT 0
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 3
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: LIST
66884: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66885: LD_ADDR_VAR 0 13
66889: PUSH
66890: LD_INT 3
66892: PUSH
66893: LD_INT 2
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 3
66902: PUSH
66903: LD_INT 3
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 2
66912: PUSH
66913: LD_INT 3
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66925: LD_ADDR_VAR 0 14
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 3
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 2
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: LIST
66965: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66966: LD_ADDR_VAR 0 15
66970: PUSH
66971: LD_INT 2
66973: NEG
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 3
66984: NEG
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 3
66995: NEG
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: LIST
67009: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67010: LD_ADDR_VAR 0 16
67014: PUSH
67015: LD_INT 2
67017: NEG
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 3
67029: NEG
67030: PUSH
67031: LD_INT 2
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: LD_INT 3
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: LIST
67055: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67056: LD_ADDR_VAR 0 17
67060: PUSH
67061: LD_INT 1
67063: NEG
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: LD_INT 3
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: PUSH
67087: LD_INT 2
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67100: LD_ADDR_VAR 0 18
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 3
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 3
67128: PUSH
67129: LD_INT 1
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: LIST
67140: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67141: LD_ADDR_VAR 0 19
67145: PUSH
67146: LD_INT 3
67148: PUSH
67149: LD_INT 2
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 3
67158: PUSH
67159: LD_INT 3
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 2
67168: PUSH
67169: LD_INT 3
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: LIST
67180: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67181: LD_ADDR_VAR 0 20
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: LD_INT 3
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: PUSH
67196: LD_INT 0
67198: PUSH
67199: LD_INT 3
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: NEG
67209: PUSH
67210: LD_INT 2
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: LIST
67221: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67222: LD_ADDR_VAR 0 21
67226: PUSH
67227: LD_INT 2
67229: NEG
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: LD_INT 0
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 3
67251: NEG
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: LIST
67265: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67266: LD_ADDR_VAR 0 22
67270: PUSH
67271: LD_INT 2
67273: NEG
67274: PUSH
67275: LD_INT 3
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 3
67285: NEG
67286: PUSH
67287: LD_INT 2
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 3
67297: NEG
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67312: LD_ADDR_VAR 0 23
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: LD_INT 3
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: LD_INT 4
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: LD_INT 3
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: LIST
67355: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67356: LD_ADDR_VAR 0 24
67360: PUSH
67361: LD_INT 3
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 3
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: LIST
67396: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67397: LD_ADDR_VAR 0 25
67401: PUSH
67402: LD_INT 3
67404: PUSH
67405: LD_INT 3
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 4
67414: PUSH
67415: LD_INT 3
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 3
67424: PUSH
67425: LD_INT 4
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67437: LD_ADDR_VAR 0 26
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: LD_INT 3
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: LD_INT 4
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: PUSH
67466: LD_INT 3
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: LIST
67477: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67478: LD_ADDR_VAR 0 27
67482: PUSH
67483: LD_INT 3
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 3
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 4
67507: NEG
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: LIST
67521: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67522: LD_ADDR_VAR 0 28
67526: PUSH
67527: LD_INT 3
67529: NEG
67530: PUSH
67531: LD_INT 3
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 3
67541: NEG
67542: PUSH
67543: LD_INT 4
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 4
67553: NEG
67554: PUSH
67555: LD_INT 3
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: LIST
67567: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67568: LD_ADDR_VAR 0 29
67572: PUSH
67573: LD_INT 1
67575: NEG
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: LD_INT 4
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: LD_INT 4
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: LD_INT 3
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 1
67643: NEG
67644: PUSH
67645: LD_INT 5
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: LD_INT 5
67658: NEG
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 1
67666: PUSH
67667: LD_INT 4
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 1
67677: NEG
67678: PUSH
67679: LD_INT 6
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: LD_INT 6
67692: NEG
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: LD_INT 5
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67723: LD_ADDR_VAR 0 30
67727: PUSH
67728: LD_INT 2
67730: PUSH
67731: LD_INT 1
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 3
67751: PUSH
67752: LD_INT 1
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: LD_INT 1
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 4
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 4
67782: PUSH
67783: LD_INT 1
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 4
67792: PUSH
67793: LD_INT 1
67795: NEG
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 5
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 5
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 5
67823: PUSH
67824: LD_INT 1
67826: NEG
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 6
67834: PUSH
67835: LD_INT 0
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 6
67844: PUSH
67845: LD_INT 1
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67866: LD_ADDR_VAR 0 31
67870: PUSH
67871: LD_INT 3
67873: PUSH
67874: LD_INT 2
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 3
67883: PUSH
67884: LD_INT 3
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 2
67893: PUSH
67894: LD_INT 3
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 4
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 4
67913: PUSH
67914: LD_INT 4
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 3
67923: PUSH
67924: LD_INT 4
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 5
67933: PUSH
67934: LD_INT 4
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 5
67943: PUSH
67944: LD_INT 5
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 4
67953: PUSH
67954: LD_INT 5
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 6
67963: PUSH
67964: LD_INT 5
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 6
67973: PUSH
67974: LD_INT 6
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 5
67983: PUSH
67984: LD_INT 6
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68005: LD_ADDR_VAR 0 32
68009: PUSH
68010: LD_INT 1
68012: PUSH
68013: LD_INT 3
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 1
68032: NEG
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: LD_INT 4
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 1
68063: NEG
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 1
68074: PUSH
68075: LD_INT 5
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: LD_INT 5
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: NEG
68095: PUSH
68096: LD_INT 4
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 1
68105: PUSH
68106: LD_INT 6
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: LD_INT 6
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 1
68125: NEG
68126: PUSH
68127: LD_INT 5
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68148: LD_ADDR_VAR 0 33
68152: PUSH
68153: LD_INT 2
68155: NEG
68156: PUSH
68157: LD_INT 1
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 3
68166: NEG
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 3
68177: NEG
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 3
68189: NEG
68190: PUSH
68191: LD_INT 1
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 4
68200: NEG
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 4
68211: NEG
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 4
68223: NEG
68224: PUSH
68225: LD_INT 1
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 5
68234: NEG
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 5
68245: NEG
68246: PUSH
68247: LD_INT 1
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 5
68257: NEG
68258: PUSH
68259: LD_INT 1
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 6
68268: NEG
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 6
68279: NEG
68280: PUSH
68281: LD_INT 1
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68303: LD_ADDR_VAR 0 34
68307: PUSH
68308: LD_INT 2
68310: NEG
68311: PUSH
68312: LD_INT 3
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 3
68322: NEG
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 3
68334: NEG
68335: PUSH
68336: LD_INT 3
68338: NEG
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 3
68346: NEG
68347: PUSH
68348: LD_INT 4
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 4
68358: NEG
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 4
68370: NEG
68371: PUSH
68372: LD_INT 4
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 4
68382: NEG
68383: PUSH
68384: LD_INT 5
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 5
68394: NEG
68395: PUSH
68396: LD_INT 4
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 5
68406: NEG
68407: PUSH
68408: LD_INT 5
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 5
68418: NEG
68419: PUSH
68420: LD_INT 6
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 6
68430: NEG
68431: PUSH
68432: LD_INT 5
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 6
68442: NEG
68443: PUSH
68444: LD_INT 6
68446: NEG
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68466: LD_ADDR_VAR 0 41
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: LD_INT 2
68476: NEG
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 1
68484: NEG
68485: PUSH
68486: LD_INT 3
68488: NEG
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: PUSH
68497: LD_INT 2
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: LIST
68509: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68510: LD_ADDR_VAR 0 42
68514: PUSH
68515: LD_INT 2
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 2
68527: PUSH
68528: LD_INT 1
68530: NEG
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 3
68538: PUSH
68539: LD_INT 1
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: LIST
68550: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68551: LD_ADDR_VAR 0 43
68555: PUSH
68556: LD_INT 2
68558: PUSH
68559: LD_INT 2
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 3
68568: PUSH
68569: LD_INT 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 2
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: LIST
68590: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68591: LD_ADDR_VAR 0 44
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: LD_INT 2
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 1
68608: PUSH
68609: LD_INT 3
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: PUSH
68620: LD_INT 2
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: LIST
68631: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68632: LD_ADDR_VAR 0 45
68636: PUSH
68637: LD_INT 2
68639: NEG
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 2
68650: NEG
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: NEG
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: LIST
68675: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68676: LD_ADDR_VAR 0 46
68680: PUSH
68681: LD_INT 2
68683: NEG
68684: PUSH
68685: LD_INT 2
68687: NEG
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 2
68695: NEG
68696: PUSH
68697: LD_INT 3
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 3
68707: NEG
68708: PUSH
68709: LD_INT 2
68711: NEG
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: LIST
68721: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68722: LD_ADDR_VAR 0 47
68726: PUSH
68727: LD_INT 2
68729: NEG
68730: PUSH
68731: LD_INT 3
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 1
68741: NEG
68742: PUSH
68743: LD_INT 3
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68755: LD_ADDR_VAR 0 48
68759: PUSH
68760: LD_INT 1
68762: PUSH
68763: LD_INT 2
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 2
68773: PUSH
68774: LD_INT 1
68776: NEG
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68786: LD_ADDR_VAR 0 49
68790: PUSH
68791: LD_INT 3
68793: PUSH
68794: LD_INT 1
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 3
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68815: LD_ADDR_VAR 0 50
68819: PUSH
68820: LD_INT 2
68822: PUSH
68823: LD_INT 3
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 1
68832: PUSH
68833: LD_INT 3
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68844: LD_ADDR_VAR 0 51
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 2
68862: NEG
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68875: LD_ADDR_VAR 0 52
68879: PUSH
68880: LD_INT 3
68882: NEG
68883: PUSH
68884: LD_INT 1
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 3
68894: NEG
68895: PUSH
68896: LD_INT 2
68898: NEG
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68908: LD_ADDR_VAR 0 53
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 0
68927: PUSH
68928: LD_INT 3
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 1
68938: PUSH
68939: LD_INT 2
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: LIST
68951: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68952: LD_ADDR_VAR 0 54
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: LD_INT 1
68962: NEG
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 3
68970: PUSH
68971: LD_INT 0
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: LD_INT 1
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: LIST
68992: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68993: LD_ADDR_VAR 0 55
68997: PUSH
68998: LD_INT 3
69000: PUSH
69001: LD_INT 2
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 3
69010: PUSH
69011: LD_INT 3
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 2
69020: PUSH
69021: LD_INT 3
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: LIST
69032: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69033: LD_ADDR_VAR 0 56
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: LD_INT 3
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: LD_INT 3
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 1
69060: NEG
69061: PUSH
69062: LD_INT 2
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: LIST
69073: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69074: LD_ADDR_VAR 0 57
69078: PUSH
69079: LD_INT 2
69081: NEG
69082: PUSH
69083: LD_INT 1
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 3
69103: NEG
69104: PUSH
69105: LD_INT 1
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: LIST
69117: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69118: LD_ADDR_VAR 0 58
69122: PUSH
69123: LD_INT 2
69125: NEG
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 3
69137: NEG
69138: PUSH
69139: LD_INT 2
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 3
69149: NEG
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: LIST
69163: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69164: LD_ADDR_VAR 0 59
69168: PUSH
69169: LD_INT 1
69171: NEG
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 0
69183: PUSH
69184: LD_INT 2
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 1
69194: PUSH
69195: LD_INT 1
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: LIST
69207: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69208: LD_ADDR_VAR 0 60
69212: PUSH
69213: LD_INT 1
69215: PUSH
69216: LD_INT 1
69218: NEG
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 2
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: LIST
69248: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69249: LD_ADDR_VAR 0 61
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 2
69266: PUSH
69267: LD_INT 2
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: LD_INT 2
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: LIST
69288: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69289: LD_ADDR_VAR 0 62
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: LD_INT 2
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 0
69306: PUSH
69307: LD_INT 2
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: LIST
69329: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69330: LD_ADDR_VAR 0 63
69334: PUSH
69335: LD_INT 1
69337: NEG
69338: PUSH
69339: LD_INT 1
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 2
69359: NEG
69360: PUSH
69361: LD_INT 1
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: LIST
69373: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69374: LD_ADDR_VAR 0 64
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: LD_INT 2
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 2
69405: NEG
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: LIST
69419: ST_TO_ADDR
// end ; 2 :
69420: GO 72686
69422: LD_INT 2
69424: DOUBLE
69425: EQUAL
69426: IFTRUE 69430
69428: GO 72685
69430: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69431: LD_ADDR_VAR 0 29
69435: PUSH
69436: LD_INT 4
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 4
69448: PUSH
69449: LD_INT 1
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 5
69459: PUSH
69460: LD_INT 0
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 5
69469: PUSH
69470: LD_INT 1
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 4
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 3
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 3
69499: PUSH
69500: LD_INT 1
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 3
69510: PUSH
69511: LD_INT 2
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 5
69521: PUSH
69522: LD_INT 2
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 3
69531: PUSH
69532: LD_INT 3
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 3
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: PUSH
69552: LD_INT 3
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 4
69561: PUSH
69562: LD_INT 4
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: LD_INT 4
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 2
69581: PUSH
69582: LD_INT 3
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 2
69591: PUSH
69592: LD_INT 2
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 4
69601: PUSH
69602: LD_INT 2
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 4
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 0
69621: PUSH
69622: LD_INT 4
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 0
69631: PUSH
69632: LD_INT 3
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 1
69641: PUSH
69642: LD_INT 4
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 1
69651: PUSH
69652: LD_INT 5
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: LD_INT 5
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: LD_INT 4
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: NEG
69683: PUSH
69684: LD_INT 3
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 2
69693: PUSH
69694: LD_INT 5
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 2
69703: NEG
69704: PUSH
69705: LD_INT 3
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 3
69714: NEG
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 3
69725: NEG
69726: PUSH
69727: LD_INT 1
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 2
69748: NEG
69749: PUSH
69750: LD_INT 1
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 3
69759: NEG
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 4
69770: NEG
69771: PUSH
69772: LD_INT 0
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 4
69781: NEG
69782: PUSH
69783: LD_INT 1
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 4
69793: NEG
69794: PUSH
69795: LD_INT 2
69797: NEG
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 2
69805: NEG
69806: PUSH
69807: LD_INT 2
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 4
69816: NEG
69817: PUSH
69818: LD_INT 4
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 4
69828: NEG
69829: PUSH
69830: LD_INT 5
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 3
69840: NEG
69841: PUSH
69842: LD_INT 4
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 3
69852: NEG
69853: PUSH
69854: LD_INT 3
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 4
69864: NEG
69865: PUSH
69866: LD_INT 3
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 5
69876: NEG
69877: PUSH
69878: LD_INT 4
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 5
69888: NEG
69889: PUSH
69890: LD_INT 5
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 3
69900: NEG
69901: PUSH
69902: LD_INT 5
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 5
69912: NEG
69913: PUSH
69914: LD_INT 3
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69969: LD_ADDR_VAR 0 30
69973: PUSH
69974: LD_INT 4
69976: PUSH
69977: LD_INT 4
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 4
69986: PUSH
69987: LD_INT 3
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 5
69996: PUSH
69997: LD_INT 4
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 5
70006: PUSH
70007: LD_INT 5
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 4
70016: PUSH
70017: LD_INT 5
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 3
70026: PUSH
70027: LD_INT 4
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 3
70036: PUSH
70037: LD_INT 3
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 5
70046: PUSH
70047: LD_INT 3
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 3
70056: PUSH
70057: LD_INT 5
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: LD_INT 3
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 0
70076: PUSH
70077: LD_INT 2
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 1
70086: PUSH
70087: LD_INT 3
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 1
70096: PUSH
70097: LD_INT 4
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 0
70106: PUSH
70107: LD_INT 4
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 1
70116: NEG
70117: PUSH
70118: LD_INT 3
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 1
70127: NEG
70128: PUSH
70129: LD_INT 2
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 2
70138: PUSH
70139: LD_INT 4
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 2
70148: NEG
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 4
70159: NEG
70160: PUSH
70161: LD_INT 0
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 4
70170: NEG
70171: PUSH
70172: LD_INT 1
70174: NEG
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 3
70182: NEG
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 3
70193: NEG
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 4
70204: NEG
70205: PUSH
70206: LD_INT 1
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 5
70215: NEG
70216: PUSH
70217: LD_INT 0
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 5
70226: NEG
70227: PUSH
70228: LD_INT 1
70230: NEG
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 5
70238: NEG
70239: PUSH
70240: LD_INT 2
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: NEG
70251: PUSH
70252: LD_INT 2
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 3
70261: NEG
70262: PUSH
70263: LD_INT 3
70265: NEG
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 3
70273: NEG
70274: PUSH
70275: LD_INT 4
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 2
70285: NEG
70286: PUSH
70287: LD_INT 3
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 2
70297: NEG
70298: PUSH
70299: LD_INT 2
70301: NEG
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 3
70309: NEG
70310: PUSH
70311: LD_INT 2
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 4
70321: NEG
70322: PUSH
70323: LD_INT 3
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 4
70333: NEG
70334: PUSH
70335: LD_INT 4
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 2
70345: NEG
70346: PUSH
70347: LD_INT 4
70349: NEG
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 4
70357: NEG
70358: PUSH
70359: LD_INT 2
70361: NEG
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: LD_INT 4
70372: NEG
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: LD_INT 5
70383: NEG
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 1
70391: PUSH
70392: LD_INT 4
70394: NEG
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 1
70402: PUSH
70403: LD_INT 3
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 0
70413: PUSH
70414: LD_INT 3
70416: NEG
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 1
70424: NEG
70425: PUSH
70426: LD_INT 4
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 1
70436: NEG
70437: PUSH
70438: LD_INT 5
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: LD_INT 3
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 2
70459: NEG
70460: PUSH
70461: LD_INT 5
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70516: LD_ADDR_VAR 0 31
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: LD_INT 4
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 0
70533: PUSH
70534: LD_INT 3
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 1
70543: PUSH
70544: LD_INT 4
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 1
70553: PUSH
70554: LD_INT 5
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: LD_INT 5
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 1
70573: NEG
70574: PUSH
70575: LD_INT 4
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 1
70584: NEG
70585: PUSH
70586: LD_INT 3
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 2
70595: PUSH
70596: LD_INT 5
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 2
70605: NEG
70606: PUSH
70607: LD_INT 3
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 3
70616: NEG
70617: PUSH
70618: LD_INT 0
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 3
70627: NEG
70628: PUSH
70629: LD_INT 1
70631: NEG
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 2
70639: NEG
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 2
70650: NEG
70651: PUSH
70652: LD_INT 1
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 3
70661: NEG
70662: PUSH
70663: LD_INT 1
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 4
70672: NEG
70673: PUSH
70674: LD_INT 0
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 4
70683: NEG
70684: PUSH
70685: LD_INT 1
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 4
70695: NEG
70696: PUSH
70697: LD_INT 2
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 2
70707: NEG
70708: PUSH
70709: LD_INT 2
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 4
70718: NEG
70719: PUSH
70720: LD_INT 4
70722: NEG
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 4
70730: NEG
70731: PUSH
70732: LD_INT 5
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 3
70742: NEG
70743: PUSH
70744: LD_INT 4
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 3
70754: NEG
70755: PUSH
70756: LD_INT 3
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 4
70766: NEG
70767: PUSH
70768: LD_INT 3
70770: NEG
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 5
70778: NEG
70779: PUSH
70780: LD_INT 4
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 5
70790: NEG
70791: PUSH
70792: LD_INT 5
70794: NEG
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PUSH
70800: LD_INT 3
70802: NEG
70803: PUSH
70804: LD_INT 5
70806: NEG
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 5
70814: NEG
70815: PUSH
70816: LD_INT 3
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: LD_INT 3
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: LD_INT 4
70840: NEG
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 1
70848: PUSH
70849: LD_INT 3
70851: NEG
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 0
70870: PUSH
70871: LD_INT 2
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 1
70881: NEG
70882: PUSH
70883: LD_INT 3
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 1
70893: NEG
70894: PUSH
70895: LD_INT 4
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 2
70905: PUSH
70906: LD_INT 2
70908: NEG
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: LD_INT 2
70916: NEG
70917: PUSH
70918: LD_INT 4
70920: NEG
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 4
70928: PUSH
70929: LD_INT 0
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 4
70938: PUSH
70939: LD_INT 1
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 5
70949: PUSH
70950: LD_INT 0
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 5
70959: PUSH
70960: LD_INT 1
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 4
70969: PUSH
70970: LD_INT 1
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: PUSH
70977: LD_INT 3
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 3
70989: PUSH
70990: LD_INT 1
70992: NEG
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 3
71000: PUSH
71001: LD_INT 2
71003: NEG
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 5
71011: PUSH
71012: LD_INT 2
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: LIST
71065: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71066: LD_ADDR_VAR 0 32
71070: PUSH
71071: LD_INT 4
71073: NEG
71074: PUSH
71075: LD_INT 0
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 4
71084: NEG
71085: PUSH
71086: LD_INT 1
71088: NEG
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 3
71096: NEG
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 3
71107: NEG
71108: PUSH
71109: LD_INT 1
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 4
71118: NEG
71119: PUSH
71120: LD_INT 1
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 5
71129: NEG
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 5
71140: NEG
71141: PUSH
71142: LD_INT 1
71144: NEG
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 5
71152: NEG
71153: PUSH
71154: LD_INT 2
71156: NEG
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 3
71164: NEG
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: EMPTY
71170: LIST
71171: LIST
71172: PUSH
71173: LD_INT 3
71175: NEG
71176: PUSH
71177: LD_INT 3
71179: NEG
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 3
71187: NEG
71188: PUSH
71189: LD_INT 4
71191: NEG
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 2
71199: NEG
71200: PUSH
71201: LD_INT 3
71203: NEG
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 2
71211: NEG
71212: PUSH
71213: LD_INT 2
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 3
71223: NEG
71224: PUSH
71225: LD_INT 2
71227: NEG
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 4
71235: NEG
71236: PUSH
71237: LD_INT 3
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 4
71247: NEG
71248: PUSH
71249: LD_INT 4
71251: NEG
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 2
71259: NEG
71260: PUSH
71261: LD_INT 4
71263: NEG
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 4
71271: NEG
71272: PUSH
71273: LD_INT 2
71275: NEG
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: PUSH
71281: LD_INT 0
71283: PUSH
71284: LD_INT 4
71286: NEG
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 0
71294: PUSH
71295: LD_INT 5
71297: NEG
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 1
71305: PUSH
71306: LD_INT 4
71308: NEG
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 1
71316: PUSH
71317: LD_INT 3
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: LD_INT 3
71330: NEG
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 1
71338: NEG
71339: PUSH
71340: LD_INT 4
71342: NEG
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: LD_INT 5
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 2
71362: PUSH
71363: LD_INT 3
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 2
71373: NEG
71374: PUSH
71375: LD_INT 5
71377: NEG
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 3
71385: PUSH
71386: LD_INT 0
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 3
71395: PUSH
71396: LD_INT 1
71398: NEG
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 4
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 4
71416: PUSH
71417: LD_INT 1
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 3
71426: PUSH
71427: LD_INT 1
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 2
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PUSH
71444: LD_INT 2
71446: PUSH
71447: LD_INT 1
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 2
71457: PUSH
71458: LD_INT 2
71460: NEG
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 4
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 4
71478: PUSH
71479: LD_INT 4
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 4
71488: PUSH
71489: LD_INT 3
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 5
71498: PUSH
71499: LD_INT 4
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 5
71508: PUSH
71509: LD_INT 5
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 4
71518: PUSH
71519: LD_INT 5
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 3
71528: PUSH
71529: LD_INT 4
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 3
71538: PUSH
71539: LD_INT 3
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 5
71548: PUSH
71549: LD_INT 3
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 3
71558: PUSH
71559: LD_INT 5
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71613: LD_ADDR_VAR 0 33
71617: PUSH
71618: LD_INT 4
71620: NEG
71621: PUSH
71622: LD_INT 4
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 4
71632: NEG
71633: PUSH
71634: LD_INT 5
71636: NEG
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_INT 3
71644: NEG
71645: PUSH
71646: LD_INT 4
71648: NEG
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 3
71656: NEG
71657: PUSH
71658: LD_INT 3
71660: NEG
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 4
71668: NEG
71669: PUSH
71670: LD_INT 3
71672: NEG
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 5
71680: NEG
71681: PUSH
71682: LD_INT 4
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 5
71692: NEG
71693: PUSH
71694: LD_INT 5
71696: NEG
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 3
71704: NEG
71705: PUSH
71706: LD_INT 5
71708: NEG
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 5
71716: NEG
71717: PUSH
71718: LD_INT 3
71720: NEG
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 0
71728: PUSH
71729: LD_INT 3
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: LD_INT 4
71742: NEG
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: LD_INT 3
71753: NEG
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: LD_INT 2
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: LD_INT 2
71775: NEG
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 1
71783: NEG
71784: PUSH
71785: LD_INT 3
71787: NEG
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 1
71795: NEG
71796: PUSH
71797: LD_INT 4
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: LD_INT 2
71810: NEG
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 2
71818: NEG
71819: PUSH
71820: LD_INT 4
71822: NEG
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 4
71830: PUSH
71831: LD_INT 0
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 4
71840: PUSH
71841: LD_INT 1
71843: NEG
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 5
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 5
71861: PUSH
71862: LD_INT 1
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 4
71871: PUSH
71872: LD_INT 1
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 3
71881: PUSH
71882: LD_INT 0
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 3
71891: PUSH
71892: LD_INT 1
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 3
71902: PUSH
71903: LD_INT 2
71905: NEG
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 5
71913: PUSH
71914: LD_INT 2
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 3
71923: PUSH
71924: LD_INT 3
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 3
71933: PUSH
71934: LD_INT 2
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 4
71943: PUSH
71944: LD_INT 3
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 4
71953: PUSH
71954: LD_INT 4
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 3
71963: PUSH
71964: LD_INT 4
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 2
71973: PUSH
71974: LD_INT 3
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 2
71983: PUSH
71984: LD_INT 2
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 4
71993: PUSH
71994: LD_INT 2
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 2
72003: PUSH
72004: LD_INT 4
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: LD_INT 4
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: LD_INT 3
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 1
72033: PUSH
72034: LD_INT 4
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 1
72043: PUSH
72044: LD_INT 5
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 0
72053: PUSH
72054: LD_INT 5
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 1
72063: NEG
72064: PUSH
72065: LD_INT 4
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PUSH
72072: LD_INT 1
72074: NEG
72075: PUSH
72076: LD_INT 3
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 2
72085: PUSH
72086: LD_INT 5
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 2
72095: NEG
72096: PUSH
72097: LD_INT 3
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72151: LD_ADDR_VAR 0 34
72155: PUSH
72156: LD_INT 0
72158: PUSH
72159: LD_INT 4
72161: NEG
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 0
72169: PUSH
72170: LD_INT 5
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 1
72180: PUSH
72181: LD_INT 4
72183: NEG
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 1
72191: PUSH
72192: LD_INT 3
72194: NEG
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 0
72202: PUSH
72203: LD_INT 3
72205: NEG
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 1
72213: NEG
72214: PUSH
72215: LD_INT 4
72217: NEG
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 1
72225: NEG
72226: PUSH
72227: LD_INT 5
72229: NEG
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 2
72237: PUSH
72238: LD_INT 3
72240: NEG
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 2
72248: NEG
72249: PUSH
72250: LD_INT 5
72252: NEG
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: LD_INT 0
72263: PUSH
72264: EMPTY
72265: LIST
72266: LIST
72267: PUSH
72268: LD_INT 3
72270: PUSH
72271: LD_INT 1
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 4
72281: PUSH
72282: LD_INT 0
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: LD_INT 1
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 3
72301: PUSH
72302: LD_INT 1
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 2
72311: PUSH
72312: LD_INT 0
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 2
72321: PUSH
72322: LD_INT 1
72324: NEG
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 2
72332: PUSH
72333: LD_INT 2
72335: NEG
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: LD_INT 4
72343: PUSH
72344: LD_INT 2
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 4
72353: PUSH
72354: LD_INT 4
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 4
72363: PUSH
72364: LD_INT 3
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 5
72373: PUSH
72374: LD_INT 4
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 5
72383: PUSH
72384: LD_INT 5
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 4
72393: PUSH
72394: LD_INT 5
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 3
72403: PUSH
72404: LD_INT 4
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 3
72413: PUSH
72414: LD_INT 3
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 5
72423: PUSH
72424: LD_INT 3
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 3
72433: PUSH
72434: LD_INT 5
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: LD_INT 3
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 0
72453: PUSH
72454: LD_INT 2
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 1
72463: PUSH
72464: LD_INT 3
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 1
72473: PUSH
72474: LD_INT 4
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 0
72483: PUSH
72484: LD_INT 4
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 1
72493: NEG
72494: PUSH
72495: LD_INT 3
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 1
72504: NEG
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 2
72515: PUSH
72516: LD_INT 4
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 2
72525: NEG
72526: PUSH
72527: LD_INT 2
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 4
72536: NEG
72537: PUSH
72538: LD_INT 0
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 4
72547: NEG
72548: PUSH
72549: LD_INT 1
72551: NEG
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 3
72559: NEG
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 3
72570: NEG
72571: PUSH
72572: LD_INT 1
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 4
72581: NEG
72582: PUSH
72583: LD_INT 1
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 5
72592: NEG
72593: PUSH
72594: LD_INT 0
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 5
72603: NEG
72604: PUSH
72605: LD_INT 1
72607: NEG
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 5
72615: NEG
72616: PUSH
72617: LD_INT 2
72619: NEG
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 3
72627: NEG
72628: PUSH
72629: LD_INT 2
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: ST_TO_ADDR
// end ; end ;
72683: GO 72686
72685: POP
// case btype of b_depot , b_warehouse :
72686: LD_VAR 0 1
72690: PUSH
72691: LD_INT 0
72693: DOUBLE
72694: EQUAL
72695: IFTRUE 72705
72697: LD_INT 1
72699: DOUBLE
72700: EQUAL
72701: IFTRUE 72705
72703: GO 72906
72705: POP
// case nation of nation_american :
72706: LD_VAR 0 5
72710: PUSH
72711: LD_INT 1
72713: DOUBLE
72714: EQUAL
72715: IFTRUE 72719
72717: GO 72775
72719: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72720: LD_ADDR_VAR 0 9
72724: PUSH
72725: LD_VAR 0 11
72729: PUSH
72730: LD_VAR 0 12
72734: PUSH
72735: LD_VAR 0 13
72739: PUSH
72740: LD_VAR 0 14
72744: PUSH
72745: LD_VAR 0 15
72749: PUSH
72750: LD_VAR 0 16
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: PUSH
72763: LD_VAR 0 4
72767: PUSH
72768: LD_INT 1
72770: PLUS
72771: ARRAY
72772: ST_TO_ADDR
72773: GO 72904
72775: LD_INT 2
72777: DOUBLE
72778: EQUAL
72779: IFTRUE 72783
72781: GO 72839
72783: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72784: LD_ADDR_VAR 0 9
72788: PUSH
72789: LD_VAR 0 17
72793: PUSH
72794: LD_VAR 0 18
72798: PUSH
72799: LD_VAR 0 19
72803: PUSH
72804: LD_VAR 0 20
72808: PUSH
72809: LD_VAR 0 21
72813: PUSH
72814: LD_VAR 0 22
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: PUSH
72827: LD_VAR 0 4
72831: PUSH
72832: LD_INT 1
72834: PLUS
72835: ARRAY
72836: ST_TO_ADDR
72837: GO 72904
72839: LD_INT 3
72841: DOUBLE
72842: EQUAL
72843: IFTRUE 72847
72845: GO 72903
72847: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72848: LD_ADDR_VAR 0 9
72852: PUSH
72853: LD_VAR 0 23
72857: PUSH
72858: LD_VAR 0 24
72862: PUSH
72863: LD_VAR 0 25
72867: PUSH
72868: LD_VAR 0 26
72872: PUSH
72873: LD_VAR 0 27
72877: PUSH
72878: LD_VAR 0 28
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: PUSH
72891: LD_VAR 0 4
72895: PUSH
72896: LD_INT 1
72898: PLUS
72899: ARRAY
72900: ST_TO_ADDR
72901: GO 72904
72903: POP
72904: GO 73459
72906: LD_INT 2
72908: DOUBLE
72909: EQUAL
72910: IFTRUE 72920
72912: LD_INT 3
72914: DOUBLE
72915: EQUAL
72916: IFTRUE 72920
72918: GO 72976
72920: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72921: LD_ADDR_VAR 0 9
72925: PUSH
72926: LD_VAR 0 29
72930: PUSH
72931: LD_VAR 0 30
72935: PUSH
72936: LD_VAR 0 31
72940: PUSH
72941: LD_VAR 0 32
72945: PUSH
72946: LD_VAR 0 33
72950: PUSH
72951: LD_VAR 0 34
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: PUSH
72964: LD_VAR 0 4
72968: PUSH
72969: LD_INT 1
72971: PLUS
72972: ARRAY
72973: ST_TO_ADDR
72974: GO 73459
72976: LD_INT 16
72978: DOUBLE
72979: EQUAL
72980: IFTRUE 73038
72982: LD_INT 17
72984: DOUBLE
72985: EQUAL
72986: IFTRUE 73038
72988: LD_INT 18
72990: DOUBLE
72991: EQUAL
72992: IFTRUE 73038
72994: LD_INT 19
72996: DOUBLE
72997: EQUAL
72998: IFTRUE 73038
73000: LD_INT 22
73002: DOUBLE
73003: EQUAL
73004: IFTRUE 73038
73006: LD_INT 20
73008: DOUBLE
73009: EQUAL
73010: IFTRUE 73038
73012: LD_INT 21
73014: DOUBLE
73015: EQUAL
73016: IFTRUE 73038
73018: LD_INT 23
73020: DOUBLE
73021: EQUAL
73022: IFTRUE 73038
73024: LD_INT 24
73026: DOUBLE
73027: EQUAL
73028: IFTRUE 73038
73030: LD_INT 25
73032: DOUBLE
73033: EQUAL
73034: IFTRUE 73038
73036: GO 73094
73038: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73039: LD_ADDR_VAR 0 9
73043: PUSH
73044: LD_VAR 0 35
73048: PUSH
73049: LD_VAR 0 36
73053: PUSH
73054: LD_VAR 0 37
73058: PUSH
73059: LD_VAR 0 38
73063: PUSH
73064: LD_VAR 0 39
73068: PUSH
73069: LD_VAR 0 40
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: PUSH
73082: LD_VAR 0 4
73086: PUSH
73087: LD_INT 1
73089: PLUS
73090: ARRAY
73091: ST_TO_ADDR
73092: GO 73459
73094: LD_INT 6
73096: DOUBLE
73097: EQUAL
73098: IFTRUE 73150
73100: LD_INT 7
73102: DOUBLE
73103: EQUAL
73104: IFTRUE 73150
73106: LD_INT 8
73108: DOUBLE
73109: EQUAL
73110: IFTRUE 73150
73112: LD_INT 13
73114: DOUBLE
73115: EQUAL
73116: IFTRUE 73150
73118: LD_INT 12
73120: DOUBLE
73121: EQUAL
73122: IFTRUE 73150
73124: LD_INT 15
73126: DOUBLE
73127: EQUAL
73128: IFTRUE 73150
73130: LD_INT 11
73132: DOUBLE
73133: EQUAL
73134: IFTRUE 73150
73136: LD_INT 14
73138: DOUBLE
73139: EQUAL
73140: IFTRUE 73150
73142: LD_INT 10
73144: DOUBLE
73145: EQUAL
73146: IFTRUE 73150
73148: GO 73206
73150: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73151: LD_ADDR_VAR 0 9
73155: PUSH
73156: LD_VAR 0 41
73160: PUSH
73161: LD_VAR 0 42
73165: PUSH
73166: LD_VAR 0 43
73170: PUSH
73171: LD_VAR 0 44
73175: PUSH
73176: LD_VAR 0 45
73180: PUSH
73181: LD_VAR 0 46
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: PUSH
73194: LD_VAR 0 4
73198: PUSH
73199: LD_INT 1
73201: PLUS
73202: ARRAY
73203: ST_TO_ADDR
73204: GO 73459
73206: LD_INT 36
73208: DOUBLE
73209: EQUAL
73210: IFTRUE 73214
73212: GO 73270
73214: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73215: LD_ADDR_VAR 0 9
73219: PUSH
73220: LD_VAR 0 47
73224: PUSH
73225: LD_VAR 0 48
73229: PUSH
73230: LD_VAR 0 49
73234: PUSH
73235: LD_VAR 0 50
73239: PUSH
73240: LD_VAR 0 51
73244: PUSH
73245: LD_VAR 0 52
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: PUSH
73258: LD_VAR 0 4
73262: PUSH
73263: LD_INT 1
73265: PLUS
73266: ARRAY
73267: ST_TO_ADDR
73268: GO 73459
73270: LD_INT 4
73272: DOUBLE
73273: EQUAL
73274: IFTRUE 73296
73276: LD_INT 5
73278: DOUBLE
73279: EQUAL
73280: IFTRUE 73296
73282: LD_INT 34
73284: DOUBLE
73285: EQUAL
73286: IFTRUE 73296
73288: LD_INT 37
73290: DOUBLE
73291: EQUAL
73292: IFTRUE 73296
73294: GO 73352
73296: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73297: LD_ADDR_VAR 0 9
73301: PUSH
73302: LD_VAR 0 53
73306: PUSH
73307: LD_VAR 0 54
73311: PUSH
73312: LD_VAR 0 55
73316: PUSH
73317: LD_VAR 0 56
73321: PUSH
73322: LD_VAR 0 57
73326: PUSH
73327: LD_VAR 0 58
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: PUSH
73340: LD_VAR 0 4
73344: PUSH
73345: LD_INT 1
73347: PLUS
73348: ARRAY
73349: ST_TO_ADDR
73350: GO 73459
73352: LD_INT 31
73354: DOUBLE
73355: EQUAL
73356: IFTRUE 73402
73358: LD_INT 32
73360: DOUBLE
73361: EQUAL
73362: IFTRUE 73402
73364: LD_INT 33
73366: DOUBLE
73367: EQUAL
73368: IFTRUE 73402
73370: LD_INT 27
73372: DOUBLE
73373: EQUAL
73374: IFTRUE 73402
73376: LD_INT 26
73378: DOUBLE
73379: EQUAL
73380: IFTRUE 73402
73382: LD_INT 28
73384: DOUBLE
73385: EQUAL
73386: IFTRUE 73402
73388: LD_INT 29
73390: DOUBLE
73391: EQUAL
73392: IFTRUE 73402
73394: LD_INT 30
73396: DOUBLE
73397: EQUAL
73398: IFTRUE 73402
73400: GO 73458
73402: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73403: LD_ADDR_VAR 0 9
73407: PUSH
73408: LD_VAR 0 59
73412: PUSH
73413: LD_VAR 0 60
73417: PUSH
73418: LD_VAR 0 61
73422: PUSH
73423: LD_VAR 0 62
73427: PUSH
73428: LD_VAR 0 63
73432: PUSH
73433: LD_VAR 0 64
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: PUSH
73446: LD_VAR 0 4
73450: PUSH
73451: LD_INT 1
73453: PLUS
73454: ARRAY
73455: ST_TO_ADDR
73456: GO 73459
73458: POP
// temp_list2 = [ ] ;
73459: LD_ADDR_VAR 0 10
73463: PUSH
73464: EMPTY
73465: ST_TO_ADDR
// for i in temp_list do
73466: LD_ADDR_VAR 0 8
73470: PUSH
73471: LD_VAR 0 9
73475: PUSH
73476: FOR_IN
73477: IFFALSE 73529
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73479: LD_ADDR_VAR 0 10
73483: PUSH
73484: LD_VAR 0 10
73488: PUSH
73489: LD_VAR 0 8
73493: PUSH
73494: LD_INT 1
73496: ARRAY
73497: PUSH
73498: LD_VAR 0 2
73502: PLUS
73503: PUSH
73504: LD_VAR 0 8
73508: PUSH
73509: LD_INT 2
73511: ARRAY
73512: PUSH
73513: LD_VAR 0 3
73517: PLUS
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: EMPTY
73524: LIST
73525: ADD
73526: ST_TO_ADDR
73527: GO 73476
73529: POP
73530: POP
// result = temp_list2 ;
73531: LD_ADDR_VAR 0 7
73535: PUSH
73536: LD_VAR 0 10
73540: ST_TO_ADDR
// end ;
73541: LD_VAR 0 7
73545: RET
// export function EnemyInRange ( unit , dist ) ; begin
73546: LD_INT 0
73548: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73549: LD_ADDR_VAR 0 3
73553: PUSH
73554: LD_VAR 0 1
73558: PPUSH
73559: CALL_OW 255
73563: PPUSH
73564: LD_VAR 0 1
73568: PPUSH
73569: CALL_OW 250
73573: PPUSH
73574: LD_VAR 0 1
73578: PPUSH
73579: CALL_OW 251
73583: PPUSH
73584: LD_VAR 0 2
73588: PPUSH
73589: CALL 46803 0 4
73593: PUSH
73594: LD_INT 4
73596: ARRAY
73597: ST_TO_ADDR
// end ;
73598: LD_VAR 0 3
73602: RET
// export function PlayerSeeMe ( unit ) ; begin
73603: LD_INT 0
73605: PPUSH
// result := See ( your_side , unit ) ;
73606: LD_ADDR_VAR 0 2
73610: PUSH
73611: LD_OWVAR 2
73615: PPUSH
73616: LD_VAR 0 1
73620: PPUSH
73621: CALL_OW 292
73625: ST_TO_ADDR
// end ;
73626: LD_VAR 0 2
73630: RET
// export function ReverseDir ( unit ) ; begin
73631: LD_INT 0
73633: PPUSH
// if not unit then
73634: LD_VAR 0 1
73638: NOT
73639: IFFALSE 73643
// exit ;
73641: GO 73666
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73643: LD_ADDR_VAR 0 2
73647: PUSH
73648: LD_VAR 0 1
73652: PPUSH
73653: CALL_OW 254
73657: PUSH
73658: LD_INT 3
73660: PLUS
73661: PUSH
73662: LD_INT 6
73664: MOD
73665: ST_TO_ADDR
// end ;
73666: LD_VAR 0 2
73670: RET
// export function ReverseArray ( array ) ; var i ; begin
73671: LD_INT 0
73673: PPUSH
73674: PPUSH
// if not array then
73675: LD_VAR 0 1
73679: NOT
73680: IFFALSE 73684
// exit ;
73682: GO 73739
// result := [ ] ;
73684: LD_ADDR_VAR 0 2
73688: PUSH
73689: EMPTY
73690: ST_TO_ADDR
// for i := array downto 1 do
73691: LD_ADDR_VAR 0 3
73695: PUSH
73696: DOUBLE
73697: LD_VAR 0 1
73701: INC
73702: ST_TO_ADDR
73703: LD_INT 1
73705: PUSH
73706: FOR_DOWNTO
73707: IFFALSE 73737
// result := Join ( result , array [ i ] ) ;
73709: LD_ADDR_VAR 0 2
73713: PUSH
73714: LD_VAR 0 2
73718: PPUSH
73719: LD_VAR 0 1
73723: PUSH
73724: LD_VAR 0 3
73728: ARRAY
73729: PPUSH
73730: CALL 78581 0 2
73734: ST_TO_ADDR
73735: GO 73706
73737: POP
73738: POP
// end ;
73739: LD_VAR 0 2
73743: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73744: LD_INT 0
73746: PPUSH
73747: PPUSH
73748: PPUSH
73749: PPUSH
73750: PPUSH
73751: PPUSH
// if not unit or not hexes then
73752: LD_VAR 0 1
73756: NOT
73757: IFTRUE 73766
73759: PUSH
73760: LD_VAR 0 2
73764: NOT
73765: OR
73766: IFFALSE 73770
// exit ;
73768: GO 73893
// dist := 9999 ;
73770: LD_ADDR_VAR 0 5
73774: PUSH
73775: LD_INT 9999
73777: ST_TO_ADDR
// for i = 1 to hexes do
73778: LD_ADDR_VAR 0 4
73782: PUSH
73783: DOUBLE
73784: LD_INT 1
73786: DEC
73787: ST_TO_ADDR
73788: LD_VAR 0 2
73792: PUSH
73793: FOR_TO
73794: IFFALSE 73881
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73796: LD_ADDR_VAR 0 6
73800: PUSH
73801: LD_VAR 0 1
73805: PPUSH
73806: LD_VAR 0 2
73810: PUSH
73811: LD_VAR 0 4
73815: ARRAY
73816: PUSH
73817: LD_INT 1
73819: ARRAY
73820: PPUSH
73821: LD_VAR 0 2
73825: PUSH
73826: LD_VAR 0 4
73830: ARRAY
73831: PUSH
73832: LD_INT 2
73834: ARRAY
73835: PPUSH
73836: CALL_OW 297
73840: ST_TO_ADDR
// if tdist < dist then
73841: LD_VAR 0 6
73845: PUSH
73846: LD_VAR 0 5
73850: LESS
73851: IFFALSE 73879
// begin hex := hexes [ i ] ;
73853: LD_ADDR_VAR 0 8
73857: PUSH
73858: LD_VAR 0 2
73862: PUSH
73863: LD_VAR 0 4
73867: ARRAY
73868: ST_TO_ADDR
// dist := tdist ;
73869: LD_ADDR_VAR 0 5
73873: PUSH
73874: LD_VAR 0 6
73878: ST_TO_ADDR
// end ; end ;
73879: GO 73793
73881: POP
73882: POP
// result := hex ;
73883: LD_ADDR_VAR 0 3
73887: PUSH
73888: LD_VAR 0 8
73892: ST_TO_ADDR
// end ;
73893: LD_VAR 0 3
73897: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73898: LD_INT 0
73900: PPUSH
73901: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73902: LD_VAR 0 1
73906: NOT
73907: IFTRUE 73946
73909: PUSH
73910: LD_VAR 0 1
73914: PUSH
73915: LD_INT 21
73917: PUSH
73918: LD_INT 2
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 23
73927: PUSH
73928: LD_INT 2
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PPUSH
73939: CALL_OW 69
73943: IN
73944: NOT
73945: OR
73946: IFFALSE 73950
// exit ;
73948: GO 73997
// for i = 1 to 3 do
73950: LD_ADDR_VAR 0 3
73954: PUSH
73955: DOUBLE
73956: LD_INT 1
73958: DEC
73959: ST_TO_ADDR
73960: LD_INT 3
73962: PUSH
73963: FOR_TO
73964: IFFALSE 73995
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73966: LD_VAR 0 1
73970: PPUSH
73971: CALL_OW 250
73975: PPUSH
73976: LD_VAR 0 1
73980: PPUSH
73981: CALL_OW 251
73985: PPUSH
73986: LD_INT 1
73988: PPUSH
73989: CALL_OW 453
73993: GO 73963
73995: POP
73996: POP
// end ;
73997: LD_VAR 0 2
74001: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74002: LD_INT 0
74004: PPUSH
74005: PPUSH
74006: PPUSH
74007: PPUSH
74008: PPUSH
74009: PPUSH
// if not unit or not enemy_unit then
74010: LD_VAR 0 1
74014: NOT
74015: IFTRUE 74024
74017: PUSH
74018: LD_VAR 0 2
74022: NOT
74023: OR
74024: IFFALSE 74028
// exit ;
74026: GO 74499
// if GetLives ( i ) < 250 then
74028: LD_VAR 0 4
74032: PPUSH
74033: CALL_OW 256
74037: PUSH
74038: LD_INT 250
74040: LESS
74041: IFFALSE 74054
// begin ComAutodestruct ( i ) ;
74043: LD_VAR 0 4
74047: PPUSH
74048: CALL 73898 0 1
// exit ;
74052: GO 74499
// end ; x := GetX ( enemy_unit ) ;
74054: LD_ADDR_VAR 0 7
74058: PUSH
74059: LD_VAR 0 2
74063: PPUSH
74064: CALL_OW 250
74068: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74069: LD_ADDR_VAR 0 8
74073: PUSH
74074: LD_VAR 0 2
74078: PPUSH
74079: CALL_OW 251
74083: ST_TO_ADDR
// if not x or not y then
74084: LD_VAR 0 7
74088: NOT
74089: IFTRUE 74098
74091: PUSH
74092: LD_VAR 0 8
74096: NOT
74097: OR
74098: IFFALSE 74102
// exit ;
74100: GO 74499
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74102: LD_ADDR_VAR 0 6
74106: PUSH
74107: LD_VAR 0 7
74111: PPUSH
74112: LD_INT 0
74114: PPUSH
74115: LD_INT 4
74117: PPUSH
74118: CALL_OW 272
74122: PUSH
74123: LD_VAR 0 8
74127: PPUSH
74128: LD_INT 0
74130: PPUSH
74131: LD_INT 4
74133: PPUSH
74134: CALL_OW 273
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PUSH
74143: LD_VAR 0 7
74147: PPUSH
74148: LD_INT 1
74150: PPUSH
74151: LD_INT 4
74153: PPUSH
74154: CALL_OW 272
74158: PUSH
74159: LD_VAR 0 8
74163: PPUSH
74164: LD_INT 1
74166: PPUSH
74167: LD_INT 4
74169: PPUSH
74170: CALL_OW 273
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_VAR 0 7
74183: PPUSH
74184: LD_INT 2
74186: PPUSH
74187: LD_INT 4
74189: PPUSH
74190: CALL_OW 272
74194: PUSH
74195: LD_VAR 0 8
74199: PPUSH
74200: LD_INT 2
74202: PPUSH
74203: LD_INT 4
74205: PPUSH
74206: CALL_OW 273
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_VAR 0 7
74219: PPUSH
74220: LD_INT 3
74222: PPUSH
74223: LD_INT 4
74225: PPUSH
74226: CALL_OW 272
74230: PUSH
74231: LD_VAR 0 8
74235: PPUSH
74236: LD_INT 3
74238: PPUSH
74239: LD_INT 4
74241: PPUSH
74242: CALL_OW 273
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: LD_VAR 0 7
74255: PPUSH
74256: LD_INT 4
74258: PPUSH
74259: LD_INT 4
74261: PPUSH
74262: CALL_OW 272
74266: PUSH
74267: LD_VAR 0 8
74271: PPUSH
74272: LD_INT 4
74274: PPUSH
74275: LD_INT 4
74277: PPUSH
74278: CALL_OW 273
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_VAR 0 7
74291: PPUSH
74292: LD_INT 5
74294: PPUSH
74295: LD_INT 4
74297: PPUSH
74298: CALL_OW 272
74302: PUSH
74303: LD_VAR 0 8
74307: PPUSH
74308: LD_INT 5
74310: PPUSH
74311: LD_INT 4
74313: PPUSH
74314: CALL_OW 273
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: ST_TO_ADDR
// for i = tmp downto 1 do
74331: LD_ADDR_VAR 0 4
74335: PUSH
74336: DOUBLE
74337: LD_VAR 0 6
74341: INC
74342: ST_TO_ADDR
74343: LD_INT 1
74345: PUSH
74346: FOR_DOWNTO
74347: IFFALSE 74450
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74349: LD_VAR 0 6
74353: PUSH
74354: LD_VAR 0 4
74358: ARRAY
74359: PUSH
74360: LD_INT 1
74362: ARRAY
74363: PPUSH
74364: LD_VAR 0 6
74368: PUSH
74369: LD_VAR 0 4
74373: ARRAY
74374: PUSH
74375: LD_INT 2
74377: ARRAY
74378: PPUSH
74379: CALL_OW 488
74383: NOT
74384: IFTRUE 74426
74386: PUSH
74387: LD_VAR 0 6
74391: PUSH
74392: LD_VAR 0 4
74396: ARRAY
74397: PUSH
74398: LD_INT 1
74400: ARRAY
74401: PPUSH
74402: LD_VAR 0 6
74406: PUSH
74407: LD_VAR 0 4
74411: ARRAY
74412: PUSH
74413: LD_INT 2
74415: ARRAY
74416: PPUSH
74417: CALL_OW 428
74421: PUSH
74422: LD_INT 0
74424: NONEQUAL
74425: OR
74426: IFFALSE 74448
// tmp := Delete ( tmp , i ) ;
74428: LD_ADDR_VAR 0 6
74432: PUSH
74433: LD_VAR 0 6
74437: PPUSH
74438: LD_VAR 0 4
74442: PPUSH
74443: CALL_OW 3
74447: ST_TO_ADDR
74448: GO 74346
74450: POP
74451: POP
// j := GetClosestHex ( unit , tmp ) ;
74452: LD_ADDR_VAR 0 5
74456: PUSH
74457: LD_VAR 0 1
74461: PPUSH
74462: LD_VAR 0 6
74466: PPUSH
74467: CALL 73744 0 2
74471: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74472: LD_VAR 0 1
74476: PPUSH
74477: LD_VAR 0 5
74481: PUSH
74482: LD_INT 1
74484: ARRAY
74485: PPUSH
74486: LD_VAR 0 5
74490: PUSH
74491: LD_INT 2
74493: ARRAY
74494: PPUSH
74495: CALL_OW 111
// end ;
74499: LD_VAR 0 3
74503: RET
// export function PrepareApemanSoldier ( ) ; begin
74504: LD_INT 0
74506: PPUSH
// uc_nation := 0 ;
74507: LD_ADDR_OWVAR 21
74511: PUSH
74512: LD_INT 0
74514: ST_TO_ADDR
// hc_sex := sex_male ;
74515: LD_ADDR_OWVAR 27
74519: PUSH
74520: LD_INT 1
74522: ST_TO_ADDR
// hc_name :=  ;
74523: LD_ADDR_OWVAR 26
74527: PUSH
74528: LD_STRING 
74530: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74531: LD_ADDR_OWVAR 28
74535: PUSH
74536: LD_INT 15
74538: ST_TO_ADDR
// hc_gallery :=  ;
74539: LD_ADDR_OWVAR 33
74543: PUSH
74544: LD_STRING 
74546: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74547: LD_ADDR_OWVAR 31
74551: PUSH
74552: LD_INT 0
74554: PPUSH
74555: LD_INT 3
74557: PPUSH
74558: CALL_OW 12
74562: PUSH
74563: LD_INT 0
74565: PPUSH
74566: LD_INT 3
74568: PPUSH
74569: CALL_OW 12
74573: PUSH
74574: LD_INT 0
74576: PUSH
74577: LD_INT 0
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74586: LD_ADDR_OWVAR 29
74590: PUSH
74591: LD_INT 12
74593: PUSH
74594: LD_INT 12
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: ST_TO_ADDR
// end ;
74601: LD_VAR 0 1
74605: RET
// export function PrepareApemanEngineer ( ) ; begin
74606: LD_INT 0
74608: PPUSH
// uc_nation := 0 ;
74609: LD_ADDR_OWVAR 21
74613: PUSH
74614: LD_INT 0
74616: ST_TO_ADDR
// hc_sex := sex_male ;
74617: LD_ADDR_OWVAR 27
74621: PUSH
74622: LD_INT 1
74624: ST_TO_ADDR
// hc_name :=  ;
74625: LD_ADDR_OWVAR 26
74629: PUSH
74630: LD_STRING 
74632: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74633: LD_ADDR_OWVAR 28
74637: PUSH
74638: LD_INT 16
74640: ST_TO_ADDR
// hc_gallery :=  ;
74641: LD_ADDR_OWVAR 33
74645: PUSH
74646: LD_STRING 
74648: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74649: LD_ADDR_OWVAR 31
74653: PUSH
74654: LD_INT 0
74656: PPUSH
74657: LD_INT 3
74659: PPUSH
74660: CALL_OW 12
74664: PUSH
74665: LD_INT 0
74667: PPUSH
74668: LD_INT 3
74670: PPUSH
74671: CALL_OW 12
74675: PUSH
74676: LD_INT 0
74678: PUSH
74679: LD_INT 0
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74688: LD_ADDR_OWVAR 29
74692: PUSH
74693: LD_INT 12
74695: PUSH
74696: LD_INT 12
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: ST_TO_ADDR
// end ;
74703: LD_VAR 0 1
74707: RET
// export function PrepareApeman ( agressivity ) ; begin
74708: LD_INT 0
74710: PPUSH
// uc_side := 0 ;
74711: LD_ADDR_OWVAR 20
74715: PUSH
74716: LD_INT 0
74718: ST_TO_ADDR
// uc_nation := 0 ;
74719: LD_ADDR_OWVAR 21
74723: PUSH
74724: LD_INT 0
74726: ST_TO_ADDR
// hc_sex := sex_male ;
74727: LD_ADDR_OWVAR 27
74731: PUSH
74732: LD_INT 1
74734: ST_TO_ADDR
// hc_class := class_apeman ;
74735: LD_ADDR_OWVAR 28
74739: PUSH
74740: LD_INT 12
74742: ST_TO_ADDR
// hc_gallery :=  ;
74743: LD_ADDR_OWVAR 33
74747: PUSH
74748: LD_STRING 
74750: ST_TO_ADDR
// hc_name :=  ;
74751: LD_ADDR_OWVAR 26
74755: PUSH
74756: LD_STRING 
74758: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74759: LD_ADDR_OWVAR 29
74763: PUSH
74764: LD_INT 12
74766: PUSH
74767: LD_INT 12
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: ST_TO_ADDR
// if agressivity = 0 then
74774: LD_VAR 0 1
74778: PUSH
74779: LD_INT 0
74781: EQUAL
74782: IFFALSE 74794
// hc_agressivity := 0 else
74784: LD_ADDR_OWVAR 35
74788: PUSH
74789: LD_INT 0
74791: ST_TO_ADDR
74792: GO 74815
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74794: LD_ADDR_OWVAR 35
74798: PUSH
74799: LD_VAR 0 1
74803: NEG
74804: PPUSH
74805: LD_VAR 0 1
74809: PPUSH
74810: CALL_OW 12
74814: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74815: LD_ADDR_OWVAR 31
74819: PUSH
74820: LD_INT 0
74822: PPUSH
74823: LD_INT 3
74825: PPUSH
74826: CALL_OW 12
74830: PUSH
74831: LD_INT 0
74833: PPUSH
74834: LD_INT 3
74836: PPUSH
74837: CALL_OW 12
74841: PUSH
74842: LD_INT 0
74844: PUSH
74845: LD_INT 0
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: ST_TO_ADDR
// end ;
74854: LD_VAR 0 2
74858: RET
// export function PrepareTiger ( agressivity ) ; begin
74859: LD_INT 0
74861: PPUSH
// uc_side := 0 ;
74862: LD_ADDR_OWVAR 20
74866: PUSH
74867: LD_INT 0
74869: ST_TO_ADDR
// uc_nation := 0 ;
74870: LD_ADDR_OWVAR 21
74874: PUSH
74875: LD_INT 0
74877: ST_TO_ADDR
// InitHc ;
74878: CALL_OW 19
// hc_class := class_tiger ;
74882: LD_ADDR_OWVAR 28
74886: PUSH
74887: LD_INT 14
74889: ST_TO_ADDR
// hc_gallery :=  ;
74890: LD_ADDR_OWVAR 33
74894: PUSH
74895: LD_STRING 
74897: ST_TO_ADDR
// hc_name :=  ;
74898: LD_ADDR_OWVAR 26
74902: PUSH
74903: LD_STRING 
74905: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74906: LD_ADDR_OWVAR 35
74910: PUSH
74911: LD_VAR 0 1
74915: NEG
74916: PPUSH
74917: LD_VAR 0 1
74921: PPUSH
74922: CALL_OW 12
74926: ST_TO_ADDR
// end ;
74927: LD_VAR 0 2
74931: RET
// export function PrepareEnchidna ( ) ; begin
74932: LD_INT 0
74934: PPUSH
// uc_side := 0 ;
74935: LD_ADDR_OWVAR 20
74939: PUSH
74940: LD_INT 0
74942: ST_TO_ADDR
// uc_nation := 0 ;
74943: LD_ADDR_OWVAR 21
74947: PUSH
74948: LD_INT 0
74950: ST_TO_ADDR
// InitHc ;
74951: CALL_OW 19
// hc_class := class_baggie ;
74955: LD_ADDR_OWVAR 28
74959: PUSH
74960: LD_INT 13
74962: ST_TO_ADDR
// hc_gallery :=  ;
74963: LD_ADDR_OWVAR 33
74967: PUSH
74968: LD_STRING 
74970: ST_TO_ADDR
// hc_name :=  ;
74971: LD_ADDR_OWVAR 26
74975: PUSH
74976: LD_STRING 
74978: ST_TO_ADDR
// end ;
74979: LD_VAR 0 1
74983: RET
// export function PrepareFrog ( ) ; begin
74984: LD_INT 0
74986: PPUSH
// uc_side := 0 ;
74987: LD_ADDR_OWVAR 20
74991: PUSH
74992: LD_INT 0
74994: ST_TO_ADDR
// uc_nation := 0 ;
74995: LD_ADDR_OWVAR 21
74999: PUSH
75000: LD_INT 0
75002: ST_TO_ADDR
// InitHc ;
75003: CALL_OW 19
// hc_class := class_frog ;
75007: LD_ADDR_OWVAR 28
75011: PUSH
75012: LD_INT 19
75014: ST_TO_ADDR
// hc_gallery :=  ;
75015: LD_ADDR_OWVAR 33
75019: PUSH
75020: LD_STRING 
75022: ST_TO_ADDR
// hc_name :=  ;
75023: LD_ADDR_OWVAR 26
75027: PUSH
75028: LD_STRING 
75030: ST_TO_ADDR
// end ;
75031: LD_VAR 0 1
75035: RET
// export function PrepareFish ( ) ; begin
75036: LD_INT 0
75038: PPUSH
// uc_side := 0 ;
75039: LD_ADDR_OWVAR 20
75043: PUSH
75044: LD_INT 0
75046: ST_TO_ADDR
// uc_nation := 0 ;
75047: LD_ADDR_OWVAR 21
75051: PUSH
75052: LD_INT 0
75054: ST_TO_ADDR
// InitHc ;
75055: CALL_OW 19
// hc_class := class_fish ;
75059: LD_ADDR_OWVAR 28
75063: PUSH
75064: LD_INT 20
75066: ST_TO_ADDR
// hc_gallery :=  ;
75067: LD_ADDR_OWVAR 33
75071: PUSH
75072: LD_STRING 
75074: ST_TO_ADDR
// hc_name :=  ;
75075: LD_ADDR_OWVAR 26
75079: PUSH
75080: LD_STRING 
75082: ST_TO_ADDR
// end ;
75083: LD_VAR 0 1
75087: RET
// export function PrepareBird ( ) ; begin
75088: LD_INT 0
75090: PPUSH
// uc_side := 0 ;
75091: LD_ADDR_OWVAR 20
75095: PUSH
75096: LD_INT 0
75098: ST_TO_ADDR
// uc_nation := 0 ;
75099: LD_ADDR_OWVAR 21
75103: PUSH
75104: LD_INT 0
75106: ST_TO_ADDR
// InitHc ;
75107: CALL_OW 19
// hc_class := class_phororhacos ;
75111: LD_ADDR_OWVAR 28
75115: PUSH
75116: LD_INT 18
75118: ST_TO_ADDR
// hc_gallery :=  ;
75119: LD_ADDR_OWVAR 33
75123: PUSH
75124: LD_STRING 
75126: ST_TO_ADDR
// hc_name :=  ;
75127: LD_ADDR_OWVAR 26
75131: PUSH
75132: LD_STRING 
75134: ST_TO_ADDR
// end ;
75135: LD_VAR 0 1
75139: RET
// export function PrepareHorse ( ) ; begin
75140: LD_INT 0
75142: PPUSH
// uc_side := 0 ;
75143: LD_ADDR_OWVAR 20
75147: PUSH
75148: LD_INT 0
75150: ST_TO_ADDR
// uc_nation := 0 ;
75151: LD_ADDR_OWVAR 21
75155: PUSH
75156: LD_INT 0
75158: ST_TO_ADDR
// InitHc ;
75159: CALL_OW 19
// hc_class := class_horse ;
75163: LD_ADDR_OWVAR 28
75167: PUSH
75168: LD_INT 21
75170: ST_TO_ADDR
// hc_gallery :=  ;
75171: LD_ADDR_OWVAR 33
75175: PUSH
75176: LD_STRING 
75178: ST_TO_ADDR
// hc_name :=  ;
75179: LD_ADDR_OWVAR 26
75183: PUSH
75184: LD_STRING 
75186: ST_TO_ADDR
// end ;
75187: LD_VAR 0 1
75191: RET
// export function PrepareMastodont ( ) ; begin
75192: LD_INT 0
75194: PPUSH
// uc_side := 0 ;
75195: LD_ADDR_OWVAR 20
75199: PUSH
75200: LD_INT 0
75202: ST_TO_ADDR
// uc_nation := 0 ;
75203: LD_ADDR_OWVAR 21
75207: PUSH
75208: LD_INT 0
75210: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75211: LD_ADDR_OWVAR 37
75215: PUSH
75216: LD_INT 31
75218: ST_TO_ADDR
// vc_control := control_rider ;
75219: LD_ADDR_OWVAR 38
75223: PUSH
75224: LD_INT 4
75226: ST_TO_ADDR
// end ;
75227: LD_VAR 0 1
75231: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75232: LD_INT 0
75234: PPUSH
75235: PPUSH
75236: PPUSH
// uc_side = 0 ;
75237: LD_ADDR_OWVAR 20
75241: PUSH
75242: LD_INT 0
75244: ST_TO_ADDR
// uc_nation = 0 ;
75245: LD_ADDR_OWVAR 21
75249: PUSH
75250: LD_INT 0
75252: ST_TO_ADDR
// InitHc_All ( ) ;
75253: CALL_OW 584
// InitVc ;
75257: CALL_OW 20
// if mastodonts then
75261: LD_VAR 0 6
75265: IFFALSE 75332
// for i = 1 to mastodonts do
75267: LD_ADDR_VAR 0 11
75271: PUSH
75272: DOUBLE
75273: LD_INT 1
75275: DEC
75276: ST_TO_ADDR
75277: LD_VAR 0 6
75281: PUSH
75282: FOR_TO
75283: IFFALSE 75330
// begin vc_chassis := 31 ;
75285: LD_ADDR_OWVAR 37
75289: PUSH
75290: LD_INT 31
75292: ST_TO_ADDR
// vc_control := control_rider ;
75293: LD_ADDR_OWVAR 38
75297: PUSH
75298: LD_INT 4
75300: ST_TO_ADDR
// animal := CreateVehicle ;
75301: LD_ADDR_VAR 0 12
75305: PUSH
75306: CALL_OW 45
75310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75311: LD_VAR 0 12
75315: PPUSH
75316: LD_VAR 0 8
75320: PPUSH
75321: LD_INT 0
75323: PPUSH
75324: CALL 77474 0 3
// end ;
75328: GO 75282
75330: POP
75331: POP
// if horses then
75332: LD_VAR 0 5
75336: IFFALSE 75403
// for i = 1 to horses do
75338: LD_ADDR_VAR 0 11
75342: PUSH
75343: DOUBLE
75344: LD_INT 1
75346: DEC
75347: ST_TO_ADDR
75348: LD_VAR 0 5
75352: PUSH
75353: FOR_TO
75354: IFFALSE 75401
// begin hc_class := 21 ;
75356: LD_ADDR_OWVAR 28
75360: PUSH
75361: LD_INT 21
75363: ST_TO_ADDR
// hc_gallery :=  ;
75364: LD_ADDR_OWVAR 33
75368: PUSH
75369: LD_STRING 
75371: ST_TO_ADDR
// animal := CreateHuman ;
75372: LD_ADDR_VAR 0 12
75376: PUSH
75377: CALL_OW 44
75381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75382: LD_VAR 0 12
75386: PPUSH
75387: LD_VAR 0 8
75391: PPUSH
75392: LD_INT 0
75394: PPUSH
75395: CALL 77474 0 3
// end ;
75399: GO 75353
75401: POP
75402: POP
// if birds then
75403: LD_VAR 0 1
75407: IFFALSE 75474
// for i = 1 to birds do
75409: LD_ADDR_VAR 0 11
75413: PUSH
75414: DOUBLE
75415: LD_INT 1
75417: DEC
75418: ST_TO_ADDR
75419: LD_VAR 0 1
75423: PUSH
75424: FOR_TO
75425: IFFALSE 75472
// begin hc_class := 18 ;
75427: LD_ADDR_OWVAR 28
75431: PUSH
75432: LD_INT 18
75434: ST_TO_ADDR
// hc_gallery =  ;
75435: LD_ADDR_OWVAR 33
75439: PUSH
75440: LD_STRING 
75442: ST_TO_ADDR
// animal := CreateHuman ;
75443: LD_ADDR_VAR 0 12
75447: PUSH
75448: CALL_OW 44
75452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75453: LD_VAR 0 12
75457: PPUSH
75458: LD_VAR 0 8
75462: PPUSH
75463: LD_INT 0
75465: PPUSH
75466: CALL 77474 0 3
// end ;
75470: GO 75424
75472: POP
75473: POP
// if tigers then
75474: LD_VAR 0 2
75478: IFFALSE 75562
// for i = 1 to tigers do
75480: LD_ADDR_VAR 0 11
75484: PUSH
75485: DOUBLE
75486: LD_INT 1
75488: DEC
75489: ST_TO_ADDR
75490: LD_VAR 0 2
75494: PUSH
75495: FOR_TO
75496: IFFALSE 75560
// begin hc_class = class_tiger ;
75498: LD_ADDR_OWVAR 28
75502: PUSH
75503: LD_INT 14
75505: ST_TO_ADDR
// hc_gallery =  ;
75506: LD_ADDR_OWVAR 33
75510: PUSH
75511: LD_STRING 
75513: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75514: LD_ADDR_OWVAR 35
75518: PUSH
75519: LD_INT 7
75521: NEG
75522: PPUSH
75523: LD_INT 7
75525: PPUSH
75526: CALL_OW 12
75530: ST_TO_ADDR
// animal := CreateHuman ;
75531: LD_ADDR_VAR 0 12
75535: PUSH
75536: CALL_OW 44
75540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75541: LD_VAR 0 12
75545: PPUSH
75546: LD_VAR 0 8
75550: PPUSH
75551: LD_INT 0
75553: PPUSH
75554: CALL 77474 0 3
// end ;
75558: GO 75495
75560: POP
75561: POP
// if apemans then
75562: LD_VAR 0 3
75566: IFFALSE 75689
// for i = 1 to apemans do
75568: LD_ADDR_VAR 0 11
75572: PUSH
75573: DOUBLE
75574: LD_INT 1
75576: DEC
75577: ST_TO_ADDR
75578: LD_VAR 0 3
75582: PUSH
75583: FOR_TO
75584: IFFALSE 75687
// begin hc_class = class_apeman ;
75586: LD_ADDR_OWVAR 28
75590: PUSH
75591: LD_INT 12
75593: ST_TO_ADDR
// hc_gallery =  ;
75594: LD_ADDR_OWVAR 33
75598: PUSH
75599: LD_STRING 
75601: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75602: LD_ADDR_OWVAR 35
75606: PUSH
75607: LD_INT 2
75609: NEG
75610: PPUSH
75611: LD_INT 2
75613: PPUSH
75614: CALL_OW 12
75618: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75619: LD_ADDR_OWVAR 31
75623: PUSH
75624: LD_INT 1
75626: PPUSH
75627: LD_INT 3
75629: PPUSH
75630: CALL_OW 12
75634: PUSH
75635: LD_INT 1
75637: PPUSH
75638: LD_INT 3
75640: PPUSH
75641: CALL_OW 12
75645: PUSH
75646: LD_INT 0
75648: PUSH
75649: LD_INT 0
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: ST_TO_ADDR
// animal := CreateHuman ;
75658: LD_ADDR_VAR 0 12
75662: PUSH
75663: CALL_OW 44
75667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75668: LD_VAR 0 12
75672: PPUSH
75673: LD_VAR 0 8
75677: PPUSH
75678: LD_INT 0
75680: PPUSH
75681: CALL 77474 0 3
// end ;
75685: GO 75583
75687: POP
75688: POP
// if enchidnas then
75689: LD_VAR 0 4
75693: IFFALSE 75760
// for i = 1 to enchidnas do
75695: LD_ADDR_VAR 0 11
75699: PUSH
75700: DOUBLE
75701: LD_INT 1
75703: DEC
75704: ST_TO_ADDR
75705: LD_VAR 0 4
75709: PUSH
75710: FOR_TO
75711: IFFALSE 75758
// begin hc_class = 13 ;
75713: LD_ADDR_OWVAR 28
75717: PUSH
75718: LD_INT 13
75720: ST_TO_ADDR
// hc_gallery =  ;
75721: LD_ADDR_OWVAR 33
75725: PUSH
75726: LD_STRING 
75728: ST_TO_ADDR
// animal := CreateHuman ;
75729: LD_ADDR_VAR 0 12
75733: PUSH
75734: CALL_OW 44
75738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75739: LD_VAR 0 12
75743: PPUSH
75744: LD_VAR 0 8
75748: PPUSH
75749: LD_INT 0
75751: PPUSH
75752: CALL 77474 0 3
// end ;
75756: GO 75710
75758: POP
75759: POP
// if fishes then
75760: LD_VAR 0 7
75764: IFFALSE 75831
// for i = 1 to fishes do
75766: LD_ADDR_VAR 0 11
75770: PUSH
75771: DOUBLE
75772: LD_INT 1
75774: DEC
75775: ST_TO_ADDR
75776: LD_VAR 0 7
75780: PUSH
75781: FOR_TO
75782: IFFALSE 75829
// begin hc_class = 20 ;
75784: LD_ADDR_OWVAR 28
75788: PUSH
75789: LD_INT 20
75791: ST_TO_ADDR
// hc_gallery =  ;
75792: LD_ADDR_OWVAR 33
75796: PUSH
75797: LD_STRING 
75799: ST_TO_ADDR
// animal := CreateHuman ;
75800: LD_ADDR_VAR 0 12
75804: PUSH
75805: CALL_OW 44
75809: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75810: LD_VAR 0 12
75814: PPUSH
75815: LD_VAR 0 9
75819: PPUSH
75820: LD_INT 0
75822: PPUSH
75823: CALL 77474 0 3
// end ;
75827: GO 75781
75829: POP
75830: POP
// end ;
75831: LD_VAR 0 10
75835: RET
// export function WantHeal ( sci , unit ) ; begin
75836: LD_INT 0
75838: PPUSH
// if GetTaskList ( sci ) > 0 then
75839: LD_VAR 0 1
75843: PPUSH
75844: CALL_OW 437
75848: PUSH
75849: LD_INT 0
75851: GREATER
75852: IFFALSE 75924
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75854: LD_VAR 0 1
75858: PPUSH
75859: CALL_OW 437
75863: PUSH
75864: LD_INT 1
75866: ARRAY
75867: PUSH
75868: LD_INT 1
75870: ARRAY
75871: PUSH
75872: LD_STRING l
75874: EQUAL
75875: IFFALSE 75902
75877: PUSH
75878: LD_VAR 0 1
75882: PPUSH
75883: CALL_OW 437
75887: PUSH
75888: LD_INT 1
75890: ARRAY
75891: PUSH
75892: LD_INT 4
75894: ARRAY
75895: PUSH
75896: LD_VAR 0 2
75900: EQUAL
75901: AND
75902: IFFALSE 75914
// result := true else
75904: LD_ADDR_VAR 0 3
75908: PUSH
75909: LD_INT 1
75911: ST_TO_ADDR
75912: GO 75922
// result := false ;
75914: LD_ADDR_VAR 0 3
75918: PUSH
75919: LD_INT 0
75921: ST_TO_ADDR
// end else
75922: GO 75932
// result := false ;
75924: LD_ADDR_VAR 0 3
75928: PUSH
75929: LD_INT 0
75931: ST_TO_ADDR
// end ;
75932: LD_VAR 0 3
75936: RET
// export function HealTarget ( sci ) ; begin
75937: LD_INT 0
75939: PPUSH
// if not sci then
75940: LD_VAR 0 1
75944: NOT
75945: IFFALSE 75949
// exit ;
75947: GO 76014
// result := 0 ;
75949: LD_ADDR_VAR 0 2
75953: PUSH
75954: LD_INT 0
75956: ST_TO_ADDR
// if GetTaskList ( sci ) then
75957: LD_VAR 0 1
75961: PPUSH
75962: CALL_OW 437
75966: IFFALSE 76014
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75968: LD_VAR 0 1
75972: PPUSH
75973: CALL_OW 437
75977: PUSH
75978: LD_INT 1
75980: ARRAY
75981: PUSH
75982: LD_INT 1
75984: ARRAY
75985: PUSH
75986: LD_STRING l
75988: EQUAL
75989: IFFALSE 76014
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75991: LD_ADDR_VAR 0 2
75995: PUSH
75996: LD_VAR 0 1
76000: PPUSH
76001: CALL_OW 437
76005: PUSH
76006: LD_INT 1
76008: ARRAY
76009: PUSH
76010: LD_INT 4
76012: ARRAY
76013: ST_TO_ADDR
// end ;
76014: LD_VAR 0 2
76018: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76019: LD_INT 0
76021: PPUSH
76022: PPUSH
76023: PPUSH
76024: PPUSH
// if not base_units then
76025: LD_VAR 0 1
76029: NOT
76030: IFFALSE 76034
// exit ;
76032: GO 76121
// result := false ;
76034: LD_ADDR_VAR 0 2
76038: PUSH
76039: LD_INT 0
76041: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76042: LD_ADDR_VAR 0 5
76046: PUSH
76047: LD_VAR 0 1
76051: PPUSH
76052: LD_INT 21
76054: PUSH
76055: LD_INT 3
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PPUSH
76062: CALL_OW 72
76066: ST_TO_ADDR
// if not tmp then
76067: LD_VAR 0 5
76071: NOT
76072: IFFALSE 76076
// exit ;
76074: GO 76121
// for i in tmp do
76076: LD_ADDR_VAR 0 3
76080: PUSH
76081: LD_VAR 0 5
76085: PUSH
76086: FOR_IN
76087: IFFALSE 76119
// begin result := EnemyInRange ( i , 22 ) ;
76089: LD_ADDR_VAR 0 2
76093: PUSH
76094: LD_VAR 0 3
76098: PPUSH
76099: LD_INT 22
76101: PPUSH
76102: CALL 73546 0 2
76106: ST_TO_ADDR
// if result then
76107: LD_VAR 0 2
76111: IFFALSE 76117
// exit ;
76113: POP
76114: POP
76115: GO 76121
// end ;
76117: GO 76086
76119: POP
76120: POP
// end ;
76121: LD_VAR 0 2
76125: RET
// export function FilterByTag ( units , tag ) ; begin
76126: LD_INT 0
76128: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76129: LD_ADDR_VAR 0 3
76133: PUSH
76134: LD_VAR 0 1
76138: PPUSH
76139: LD_INT 120
76141: PUSH
76142: LD_VAR 0 2
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: PPUSH
76151: CALL_OW 72
76155: ST_TO_ADDR
// end ;
76156: LD_VAR 0 3
76160: RET
// export function IsDriver ( un ) ; begin
76161: LD_INT 0
76163: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76164: LD_ADDR_VAR 0 2
76168: PUSH
76169: LD_VAR 0 1
76173: PUSH
76174: LD_INT 55
76176: PUSH
76177: EMPTY
76178: LIST
76179: PPUSH
76180: CALL_OW 69
76184: IN
76185: ST_TO_ADDR
// end ;
76186: LD_VAR 0 2
76190: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76191: LD_INT 0
76193: PPUSH
76194: PPUSH
// list := [ ] ;
76195: LD_ADDR_VAR 0 5
76199: PUSH
76200: EMPTY
76201: ST_TO_ADDR
// case d of 0 :
76202: LD_VAR 0 3
76206: PUSH
76207: LD_INT 0
76209: DOUBLE
76210: EQUAL
76211: IFTRUE 76215
76213: GO 76348
76215: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76216: LD_ADDR_VAR 0 5
76220: PUSH
76221: LD_VAR 0 1
76225: PUSH
76226: LD_INT 4
76228: MINUS
76229: PUSH
76230: LD_VAR 0 2
76234: PUSH
76235: LD_INT 4
76237: MINUS
76238: PUSH
76239: LD_INT 2
76241: PUSH
76242: EMPTY
76243: LIST
76244: LIST
76245: LIST
76246: PUSH
76247: LD_VAR 0 1
76251: PUSH
76252: LD_INT 3
76254: MINUS
76255: PUSH
76256: LD_VAR 0 2
76260: PUSH
76261: LD_INT 1
76263: PUSH
76264: EMPTY
76265: LIST
76266: LIST
76267: LIST
76268: PUSH
76269: LD_VAR 0 1
76273: PUSH
76274: LD_INT 4
76276: PLUS
76277: PUSH
76278: LD_VAR 0 2
76282: PUSH
76283: LD_INT 4
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: LIST
76290: PUSH
76291: LD_VAR 0 1
76295: PUSH
76296: LD_INT 3
76298: PLUS
76299: PUSH
76300: LD_VAR 0 2
76304: PUSH
76305: LD_INT 3
76307: PLUS
76308: PUSH
76309: LD_INT 5
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: LIST
76316: PUSH
76317: LD_VAR 0 1
76321: PUSH
76322: LD_VAR 0 2
76326: PUSH
76327: LD_INT 4
76329: PLUS
76330: PUSH
76331: LD_INT 0
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: LIST
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: LIST
76343: LIST
76344: LIST
76345: ST_TO_ADDR
// end ; 1 :
76346: GO 77046
76348: LD_INT 1
76350: DOUBLE
76351: EQUAL
76352: IFTRUE 76356
76354: GO 76489
76356: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76357: LD_ADDR_VAR 0 5
76361: PUSH
76362: LD_VAR 0 1
76366: PUSH
76367: LD_VAR 0 2
76371: PUSH
76372: LD_INT 4
76374: MINUS
76375: PUSH
76376: LD_INT 3
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: LIST
76383: PUSH
76384: LD_VAR 0 1
76388: PUSH
76389: LD_INT 3
76391: MINUS
76392: PUSH
76393: LD_VAR 0 2
76397: PUSH
76398: LD_INT 3
76400: MINUS
76401: PUSH
76402: LD_INT 2
76404: PUSH
76405: EMPTY
76406: LIST
76407: LIST
76408: LIST
76409: PUSH
76410: LD_VAR 0 1
76414: PUSH
76415: LD_INT 4
76417: MINUS
76418: PUSH
76419: LD_VAR 0 2
76423: PUSH
76424: LD_INT 1
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: LIST
76431: PUSH
76432: LD_VAR 0 1
76436: PUSH
76437: LD_VAR 0 2
76441: PUSH
76442: LD_INT 3
76444: PLUS
76445: PUSH
76446: LD_INT 0
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: LIST
76453: PUSH
76454: LD_VAR 0 1
76458: PUSH
76459: LD_INT 4
76461: PLUS
76462: PUSH
76463: LD_VAR 0 2
76467: PUSH
76468: LD_INT 4
76470: PLUS
76471: PUSH
76472: LD_INT 5
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: LIST
76479: PUSH
76480: EMPTY
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: ST_TO_ADDR
// end ; 2 :
76487: GO 77046
76489: LD_INT 2
76491: DOUBLE
76492: EQUAL
76493: IFTRUE 76497
76495: GO 76626
76497: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76498: LD_ADDR_VAR 0 5
76502: PUSH
76503: LD_VAR 0 1
76507: PUSH
76508: LD_VAR 0 2
76512: PUSH
76513: LD_INT 3
76515: MINUS
76516: PUSH
76517: LD_INT 3
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: LIST
76524: PUSH
76525: LD_VAR 0 1
76529: PUSH
76530: LD_INT 4
76532: PLUS
76533: PUSH
76534: LD_VAR 0 2
76538: PUSH
76539: LD_INT 4
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: LIST
76546: PUSH
76547: LD_VAR 0 1
76551: PUSH
76552: LD_VAR 0 2
76556: PUSH
76557: LD_INT 4
76559: PLUS
76560: PUSH
76561: LD_INT 0
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: LIST
76568: PUSH
76569: LD_VAR 0 1
76573: PUSH
76574: LD_INT 3
76576: MINUS
76577: PUSH
76578: LD_VAR 0 2
76582: PUSH
76583: LD_INT 1
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: LIST
76590: PUSH
76591: LD_VAR 0 1
76595: PUSH
76596: LD_INT 4
76598: MINUS
76599: PUSH
76600: LD_VAR 0 2
76604: PUSH
76605: LD_INT 4
76607: MINUS
76608: PUSH
76609: LD_INT 2
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: LIST
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: LIST
76623: ST_TO_ADDR
// end ; 3 :
76624: GO 77046
76626: LD_INT 3
76628: DOUBLE
76629: EQUAL
76630: IFTRUE 76634
76632: GO 76767
76634: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76635: LD_ADDR_VAR 0 5
76639: PUSH
76640: LD_VAR 0 1
76644: PUSH
76645: LD_INT 3
76647: PLUS
76648: PUSH
76649: LD_VAR 0 2
76653: PUSH
76654: LD_INT 4
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: LIST
76661: PUSH
76662: LD_VAR 0 1
76666: PUSH
76667: LD_INT 4
76669: PLUS
76670: PUSH
76671: LD_VAR 0 2
76675: PUSH
76676: LD_INT 4
76678: PLUS
76679: PUSH
76680: LD_INT 5
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: LIST
76687: PUSH
76688: LD_VAR 0 1
76692: PUSH
76693: LD_INT 4
76695: MINUS
76696: PUSH
76697: LD_VAR 0 2
76701: PUSH
76702: LD_INT 1
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: LIST
76709: PUSH
76710: LD_VAR 0 1
76714: PUSH
76715: LD_VAR 0 2
76719: PUSH
76720: LD_INT 4
76722: MINUS
76723: PUSH
76724: LD_INT 3
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: LIST
76731: PUSH
76732: LD_VAR 0 1
76736: PUSH
76737: LD_INT 3
76739: MINUS
76740: PUSH
76741: LD_VAR 0 2
76745: PUSH
76746: LD_INT 3
76748: MINUS
76749: PUSH
76750: LD_INT 2
76752: PUSH
76753: EMPTY
76754: LIST
76755: LIST
76756: LIST
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: ST_TO_ADDR
// end ; 4 :
76765: GO 77046
76767: LD_INT 4
76769: DOUBLE
76770: EQUAL
76771: IFTRUE 76775
76773: GO 76908
76775: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76776: LD_ADDR_VAR 0 5
76780: PUSH
76781: LD_VAR 0 1
76785: PUSH
76786: LD_VAR 0 2
76790: PUSH
76791: LD_INT 4
76793: PLUS
76794: PUSH
76795: LD_INT 0
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: LIST
76802: PUSH
76803: LD_VAR 0 1
76807: PUSH
76808: LD_INT 3
76810: PLUS
76811: PUSH
76812: LD_VAR 0 2
76816: PUSH
76817: LD_INT 3
76819: PLUS
76820: PUSH
76821: LD_INT 5
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: LIST
76828: PUSH
76829: LD_VAR 0 1
76833: PUSH
76834: LD_INT 4
76836: PLUS
76837: PUSH
76838: LD_VAR 0 2
76842: PUSH
76843: LD_INT 4
76845: PUSH
76846: EMPTY
76847: LIST
76848: LIST
76849: LIST
76850: PUSH
76851: LD_VAR 0 1
76855: PUSH
76856: LD_VAR 0 2
76860: PUSH
76861: LD_INT 3
76863: MINUS
76864: PUSH
76865: LD_INT 3
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: LIST
76872: PUSH
76873: LD_VAR 0 1
76877: PUSH
76878: LD_INT 4
76880: MINUS
76881: PUSH
76882: LD_VAR 0 2
76886: PUSH
76887: LD_INT 4
76889: MINUS
76890: PUSH
76891: LD_INT 2
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: LIST
76898: PUSH
76899: EMPTY
76900: LIST
76901: LIST
76902: LIST
76903: LIST
76904: LIST
76905: ST_TO_ADDR
// end ; 5 :
76906: GO 77046
76908: LD_INT 5
76910: DOUBLE
76911: EQUAL
76912: IFTRUE 76916
76914: GO 77045
76916: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76917: LD_ADDR_VAR 0 5
76921: PUSH
76922: LD_VAR 0 1
76926: PUSH
76927: LD_INT 4
76929: MINUS
76930: PUSH
76931: LD_VAR 0 2
76935: PUSH
76936: LD_INT 1
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: LIST
76943: PUSH
76944: LD_VAR 0 1
76948: PUSH
76949: LD_VAR 0 2
76953: PUSH
76954: LD_INT 4
76956: MINUS
76957: PUSH
76958: LD_INT 3
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: LIST
76965: PUSH
76966: LD_VAR 0 1
76970: PUSH
76971: LD_INT 4
76973: PLUS
76974: PUSH
76975: LD_VAR 0 2
76979: PUSH
76980: LD_INT 4
76982: PLUS
76983: PUSH
76984: LD_INT 5
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: LIST
76991: PUSH
76992: LD_VAR 0 1
76996: PUSH
76997: LD_INT 3
76999: PLUS
77000: PUSH
77001: LD_VAR 0 2
77005: PUSH
77006: LD_INT 4
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: LIST
77013: PUSH
77014: LD_VAR 0 1
77018: PUSH
77019: LD_VAR 0 2
77023: PUSH
77024: LD_INT 3
77026: PLUS
77027: PUSH
77028: LD_INT 0
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: LIST
77035: PUSH
77036: EMPTY
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: ST_TO_ADDR
// end ; end ;
77043: GO 77046
77045: POP
// result := list ;
77046: LD_ADDR_VAR 0 4
77050: PUSH
77051: LD_VAR 0 5
77055: ST_TO_ADDR
// end ;
77056: LD_VAR 0 4
77060: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77061: LD_INT 0
77063: PPUSH
77064: PPUSH
77065: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77066: LD_VAR 0 1
77070: NOT
77071: IFTRUE 77099
77073: PUSH
77074: LD_VAR 0 2
77078: PUSH
77079: LD_INT 1
77081: PUSH
77082: LD_INT 2
77084: PUSH
77085: LD_INT 3
77087: PUSH
77088: LD_INT 4
77090: PUSH
77091: EMPTY
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: IN
77097: NOT
77098: OR
77099: IFFALSE 77103
// exit ;
77101: GO 77186
// tmp := [ ] ;
77103: LD_ADDR_VAR 0 5
77107: PUSH
77108: EMPTY
77109: ST_TO_ADDR
// for i in units do
77110: LD_ADDR_VAR 0 4
77114: PUSH
77115: LD_VAR 0 1
77119: PUSH
77120: FOR_IN
77121: IFFALSE 77155
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77123: LD_ADDR_VAR 0 5
77127: PUSH
77128: LD_VAR 0 5
77132: PPUSH
77133: LD_VAR 0 4
77137: PPUSH
77138: LD_VAR 0 2
77142: PPUSH
77143: CALL_OW 259
77147: PPUSH
77148: CALL 78581 0 2
77152: ST_TO_ADDR
77153: GO 77120
77155: POP
77156: POP
// if not tmp then
77157: LD_VAR 0 5
77161: NOT
77162: IFFALSE 77166
// exit ;
77164: GO 77186
// result := SortListByListDesc ( units , tmp ) ;
77166: LD_ADDR_VAR 0 3
77170: PUSH
77171: LD_VAR 0 1
77175: PPUSH
77176: LD_VAR 0 5
77180: PPUSH
77181: CALL_OW 77
77185: ST_TO_ADDR
// end ;
77186: LD_VAR 0 3
77190: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77191: LD_INT 0
77193: PPUSH
77194: PPUSH
77195: PPUSH
// result := false ;
77196: LD_ADDR_VAR 0 3
77200: PUSH
77201: LD_INT 0
77203: ST_TO_ADDR
// if not building then
77204: LD_VAR 0 2
77208: NOT
77209: IFFALSE 77213
// exit ;
77211: GO 77357
// x := GetX ( building ) ;
77213: LD_ADDR_VAR 0 4
77217: PUSH
77218: LD_VAR 0 2
77222: PPUSH
77223: CALL_OW 250
77227: ST_TO_ADDR
// y := GetY ( building ) ;
77228: LD_ADDR_VAR 0 5
77232: PUSH
77233: LD_VAR 0 2
77237: PPUSH
77238: CALL_OW 251
77242: ST_TO_ADDR
// if not x or not y then
77243: LD_VAR 0 4
77247: NOT
77248: IFTRUE 77257
77250: PUSH
77251: LD_VAR 0 5
77255: NOT
77256: OR
77257: IFFALSE 77261
// exit ;
77259: GO 77357
// if GetTaskList ( unit ) then
77261: LD_VAR 0 1
77265: PPUSH
77266: CALL_OW 437
77270: IFFALSE 77357
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77272: LD_STRING e
77274: PUSH
77275: LD_VAR 0 1
77279: PPUSH
77280: CALL_OW 437
77284: PUSH
77285: LD_INT 1
77287: ARRAY
77288: PUSH
77289: LD_INT 1
77291: ARRAY
77292: EQUAL
77293: IFFALSE 77320
77295: PUSH
77296: LD_VAR 0 4
77300: PUSH
77301: LD_VAR 0 1
77305: PPUSH
77306: CALL_OW 437
77310: PUSH
77311: LD_INT 1
77313: ARRAY
77314: PUSH
77315: LD_INT 2
77317: ARRAY
77318: EQUAL
77319: AND
77320: IFFALSE 77347
77322: PUSH
77323: LD_VAR 0 5
77327: PUSH
77328: LD_VAR 0 1
77332: PPUSH
77333: CALL_OW 437
77337: PUSH
77338: LD_INT 1
77340: ARRAY
77341: PUSH
77342: LD_INT 3
77344: ARRAY
77345: EQUAL
77346: AND
77347: IFFALSE 77357
// result := true end ;
77349: LD_ADDR_VAR 0 3
77353: PUSH
77354: LD_INT 1
77356: ST_TO_ADDR
// end ;
77357: LD_VAR 0 3
77361: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77362: LD_INT 0
77364: PPUSH
// result := false ;
77365: LD_ADDR_VAR 0 4
77369: PUSH
77370: LD_INT 0
77372: ST_TO_ADDR
// if GetTaskList ( unit ) then
77373: LD_VAR 0 1
77377: PPUSH
77378: CALL_OW 437
77382: IFFALSE 77469
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77384: LD_STRING M
77386: PUSH
77387: LD_VAR 0 1
77391: PPUSH
77392: CALL_OW 437
77396: PUSH
77397: LD_INT 1
77399: ARRAY
77400: PUSH
77401: LD_INT 1
77403: ARRAY
77404: EQUAL
77405: IFFALSE 77432
77407: PUSH
77408: LD_VAR 0 2
77412: PUSH
77413: LD_VAR 0 1
77417: PPUSH
77418: CALL_OW 437
77422: PUSH
77423: LD_INT 1
77425: ARRAY
77426: PUSH
77427: LD_INT 2
77429: ARRAY
77430: EQUAL
77431: AND
77432: IFFALSE 77459
77434: PUSH
77435: LD_VAR 0 3
77439: PUSH
77440: LD_VAR 0 1
77444: PPUSH
77445: CALL_OW 437
77449: PUSH
77450: LD_INT 1
77452: ARRAY
77453: PUSH
77454: LD_INT 3
77456: ARRAY
77457: EQUAL
77458: AND
77459: IFFALSE 77469
// result := true ;
77461: LD_ADDR_VAR 0 4
77465: PUSH
77466: LD_INT 1
77468: ST_TO_ADDR
// end ; end ;
77469: LD_VAR 0 4
77473: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77474: LD_INT 0
77476: PPUSH
77477: PPUSH
77478: PPUSH
77479: PPUSH
// if not unit or not area then
77480: LD_VAR 0 1
77484: NOT
77485: IFTRUE 77494
77487: PUSH
77488: LD_VAR 0 2
77492: NOT
77493: OR
77494: IFFALSE 77498
// exit ;
77496: GO 77674
// tmp := AreaToList ( area , i ) ;
77498: LD_ADDR_VAR 0 6
77502: PUSH
77503: LD_VAR 0 2
77507: PPUSH
77508: LD_VAR 0 5
77512: PPUSH
77513: CALL_OW 517
77517: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77518: LD_ADDR_VAR 0 5
77522: PUSH
77523: DOUBLE
77524: LD_INT 1
77526: DEC
77527: ST_TO_ADDR
77528: LD_VAR 0 6
77532: PUSH
77533: LD_INT 1
77535: ARRAY
77536: PUSH
77537: FOR_TO
77538: IFFALSE 77672
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77540: LD_ADDR_VAR 0 7
77544: PUSH
77545: LD_VAR 0 6
77549: PUSH
77550: LD_INT 1
77552: ARRAY
77553: PUSH
77554: LD_VAR 0 5
77558: ARRAY
77559: PUSH
77560: LD_VAR 0 6
77564: PUSH
77565: LD_INT 2
77567: ARRAY
77568: PUSH
77569: LD_VAR 0 5
77573: ARRAY
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77579: LD_INT 92
77581: PUSH
77582: LD_VAR 0 7
77586: PUSH
77587: LD_INT 1
77589: ARRAY
77590: PUSH
77591: LD_VAR 0 7
77595: PUSH
77596: LD_INT 2
77598: ARRAY
77599: PUSH
77600: LD_INT 2
77602: PUSH
77603: EMPTY
77604: LIST
77605: LIST
77606: LIST
77607: LIST
77608: PPUSH
77609: CALL_OW 69
77613: PUSH
77614: LD_INT 0
77616: EQUAL
77617: IFFALSE 77670
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77619: LD_VAR 0 1
77623: PPUSH
77624: LD_VAR 0 7
77628: PUSH
77629: LD_INT 1
77631: ARRAY
77632: PPUSH
77633: LD_VAR 0 7
77637: PUSH
77638: LD_INT 2
77640: ARRAY
77641: PPUSH
77642: LD_VAR 0 3
77646: PPUSH
77647: CALL_OW 48
// result := IsPlaced ( unit ) ;
77651: LD_ADDR_VAR 0 4
77655: PUSH
77656: LD_VAR 0 1
77660: PPUSH
77661: CALL_OW 305
77665: ST_TO_ADDR
// exit ;
77666: POP
77667: POP
77668: GO 77674
// end ; end ;
77670: GO 77537
77672: POP
77673: POP
// end ;
77674: LD_VAR 0 4
77678: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77679: LD_INT 0
77681: PPUSH
77682: PPUSH
77683: PPUSH
// if not side or side > 8 then
77684: LD_VAR 0 1
77688: NOT
77689: IFTRUE 77701
77691: PUSH
77692: LD_VAR 0 1
77696: PUSH
77697: LD_INT 8
77699: GREATER
77700: OR
77701: IFFALSE 77705
// exit ;
77703: GO 77892
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77705: LD_ADDR_VAR 0 4
77709: PUSH
77710: LD_INT 22
77712: PUSH
77713: LD_VAR 0 1
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 21
77724: PUSH
77725: LD_INT 3
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: PPUSH
77736: CALL_OW 69
77740: ST_TO_ADDR
// if not tmp then
77741: LD_VAR 0 4
77745: NOT
77746: IFFALSE 77750
// exit ;
77748: GO 77892
// enable_addtolog := true ;
77750: LD_ADDR_OWVAR 81
77754: PUSH
77755: LD_INT 1
77757: ST_TO_ADDR
// AddToLog ( [ ) ;
77758: LD_STRING [
77760: PPUSH
77761: CALL_OW 561
// for i in tmp do
77765: LD_ADDR_VAR 0 3
77769: PUSH
77770: LD_VAR 0 4
77774: PUSH
77775: FOR_IN
77776: IFFALSE 77883
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77778: LD_STRING [
77780: PUSH
77781: LD_VAR 0 3
77785: PPUSH
77786: CALL_OW 266
77790: STR
77791: PUSH
77792: LD_STRING , 
77794: STR
77795: PUSH
77796: LD_VAR 0 3
77800: PPUSH
77801: CALL_OW 250
77805: STR
77806: PUSH
77807: LD_STRING , 
77809: STR
77810: PUSH
77811: LD_VAR 0 3
77815: PPUSH
77816: CALL_OW 251
77820: STR
77821: PUSH
77822: LD_STRING , 
77824: STR
77825: PUSH
77826: LD_VAR 0 3
77830: PPUSH
77831: CALL_OW 254
77835: STR
77836: PUSH
77837: LD_STRING , 
77839: STR
77840: PUSH
77841: LD_VAR 0 3
77845: PPUSH
77846: LD_INT 1
77848: PPUSH
77849: CALL_OW 268
77853: STR
77854: PUSH
77855: LD_STRING , 
77857: STR
77858: PUSH
77859: LD_VAR 0 3
77863: PPUSH
77864: LD_INT 2
77866: PPUSH
77867: CALL_OW 268
77871: STR
77872: PUSH
77873: LD_STRING ],
77875: STR
77876: PPUSH
77877: CALL_OW 561
// end ;
77881: GO 77775
77883: POP
77884: POP
// AddToLog ( ]; ) ;
77885: LD_STRING ];
77887: PPUSH
77888: CALL_OW 561
// end ;
77892: LD_VAR 0 2
77896: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77897: LD_INT 0
77899: PPUSH
77900: PPUSH
77901: PPUSH
77902: PPUSH
77903: PPUSH
// if not area or not rate or not max then
77904: LD_VAR 0 1
77908: NOT
77909: IFTRUE 77918
77911: PUSH
77912: LD_VAR 0 2
77916: NOT
77917: OR
77918: IFTRUE 77927
77920: PUSH
77921: LD_VAR 0 4
77925: NOT
77926: OR
77927: IFFALSE 77931
// exit ;
77929: GO 78120
// while 1 do
77931: LD_INT 1
77933: IFFALSE 78120
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77935: LD_ADDR_VAR 0 9
77939: PUSH
77940: LD_VAR 0 1
77944: PPUSH
77945: LD_INT 1
77947: PPUSH
77948: CALL_OW 287
77952: PUSH
77953: LD_INT 10
77955: MUL
77956: ST_TO_ADDR
// r := rate / 10 ;
77957: LD_ADDR_VAR 0 7
77961: PUSH
77962: LD_VAR 0 2
77966: PUSH
77967: LD_INT 10
77969: DIVREAL
77970: ST_TO_ADDR
// time := 1 1$00 ;
77971: LD_ADDR_VAR 0 8
77975: PUSH
77976: LD_INT 2100
77978: ST_TO_ADDR
// if amount < min then
77979: LD_VAR 0 9
77983: PUSH
77984: LD_VAR 0 3
77988: LESS
77989: IFFALSE 78007
// r := r * 2 else
77991: LD_ADDR_VAR 0 7
77995: PUSH
77996: LD_VAR 0 7
78000: PUSH
78001: LD_INT 2
78003: MUL
78004: ST_TO_ADDR
78005: GO 78033
// if amount > max then
78007: LD_VAR 0 9
78011: PUSH
78012: LD_VAR 0 4
78016: GREATER
78017: IFFALSE 78033
// r := r / 2 ;
78019: LD_ADDR_VAR 0 7
78023: PUSH
78024: LD_VAR 0 7
78028: PUSH
78029: LD_INT 2
78031: DIVREAL
78032: ST_TO_ADDR
// time := time / r ;
78033: LD_ADDR_VAR 0 8
78037: PUSH
78038: LD_VAR 0 8
78042: PUSH
78043: LD_VAR 0 7
78047: DIVREAL
78048: ST_TO_ADDR
// if time < 0 then
78049: LD_VAR 0 8
78053: PUSH
78054: LD_INT 0
78056: LESS
78057: IFFALSE 78074
// time := time * - 1 ;
78059: LD_ADDR_VAR 0 8
78063: PUSH
78064: LD_VAR 0 8
78068: PUSH
78069: LD_INT 1
78071: NEG
78072: MUL
78073: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78074: LD_VAR 0 8
78078: PUSH
78079: LD_INT 35
78081: PPUSH
78082: LD_INT 875
78084: PPUSH
78085: CALL_OW 12
78089: PLUS
78090: PPUSH
78091: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78095: LD_INT 1
78097: PPUSH
78098: LD_INT 5
78100: PPUSH
78101: CALL_OW 12
78105: PPUSH
78106: LD_VAR 0 1
78110: PPUSH
78111: LD_INT 1
78113: PPUSH
78114: CALL_OW 55
// end ;
78118: GO 77931
// end ;
78120: LD_VAR 0 5
78124: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78125: LD_INT 0
78127: PPUSH
78128: PPUSH
78129: PPUSH
78130: PPUSH
78131: PPUSH
78132: PPUSH
78133: PPUSH
78134: PPUSH
// if not turrets or not factories then
78135: LD_VAR 0 1
78139: NOT
78140: IFTRUE 78149
78142: PUSH
78143: LD_VAR 0 2
78147: NOT
78148: OR
78149: IFFALSE 78153
// exit ;
78151: GO 78460
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78153: LD_ADDR_VAR 0 10
78157: PUSH
78158: LD_INT 5
78160: PUSH
78161: LD_INT 6
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: PUSH
78168: LD_INT 2
78170: PUSH
78171: LD_INT 4
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: PUSH
78178: LD_INT 3
78180: PUSH
78181: LD_INT 5
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: LIST
78192: PUSH
78193: LD_INT 24
78195: PUSH
78196: LD_INT 25
78198: PUSH
78199: EMPTY
78200: LIST
78201: LIST
78202: PUSH
78203: LD_INT 23
78205: PUSH
78206: LD_INT 27
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: PUSH
78217: LD_INT 42
78219: PUSH
78220: LD_INT 43
78222: PUSH
78223: EMPTY
78224: LIST
78225: LIST
78226: PUSH
78227: LD_INT 44
78229: PUSH
78230: LD_INT 46
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: PUSH
78237: LD_INT 45
78239: PUSH
78240: LD_INT 47
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: LIST
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: LIST
78256: ST_TO_ADDR
// result := [ ] ;
78257: LD_ADDR_VAR 0 3
78261: PUSH
78262: EMPTY
78263: ST_TO_ADDR
// for i in turrets do
78264: LD_ADDR_VAR 0 4
78268: PUSH
78269: LD_VAR 0 1
78273: PUSH
78274: FOR_IN
78275: IFFALSE 78458
// begin nat := GetNation ( i ) ;
78277: LD_ADDR_VAR 0 7
78281: PUSH
78282: LD_VAR 0 4
78286: PPUSH
78287: CALL_OW 248
78291: ST_TO_ADDR
// weapon := 0 ;
78292: LD_ADDR_VAR 0 8
78296: PUSH
78297: LD_INT 0
78299: ST_TO_ADDR
// if not nat then
78300: LD_VAR 0 7
78304: NOT
78305: IFFALSE 78309
// continue ;
78307: GO 78274
// for j in list [ nat ] do
78309: LD_ADDR_VAR 0 5
78313: PUSH
78314: LD_VAR 0 10
78318: PUSH
78319: LD_VAR 0 7
78323: ARRAY
78324: PUSH
78325: FOR_IN
78326: IFFALSE 78367
// if GetBWeapon ( i ) = j [ 1 ] then
78328: LD_VAR 0 4
78332: PPUSH
78333: CALL_OW 269
78337: PUSH
78338: LD_VAR 0 5
78342: PUSH
78343: LD_INT 1
78345: ARRAY
78346: EQUAL
78347: IFFALSE 78365
// begin weapon := j [ 2 ] ;
78349: LD_ADDR_VAR 0 8
78353: PUSH
78354: LD_VAR 0 5
78358: PUSH
78359: LD_INT 2
78361: ARRAY
78362: ST_TO_ADDR
// break ;
78363: GO 78367
// end ;
78365: GO 78325
78367: POP
78368: POP
// if not weapon then
78369: LD_VAR 0 8
78373: NOT
78374: IFFALSE 78378
// continue ;
78376: GO 78274
// for k in factories do
78378: LD_ADDR_VAR 0 6
78382: PUSH
78383: LD_VAR 0 2
78387: PUSH
78388: FOR_IN
78389: IFFALSE 78454
// begin weapons := AvailableWeaponList ( k ) ;
78391: LD_ADDR_VAR 0 9
78395: PUSH
78396: LD_VAR 0 6
78400: PPUSH
78401: CALL_OW 478
78405: ST_TO_ADDR
// if not weapons then
78406: LD_VAR 0 9
78410: NOT
78411: IFFALSE 78415
// continue ;
78413: GO 78388
// if weapon in weapons then
78415: LD_VAR 0 8
78419: PUSH
78420: LD_VAR 0 9
78424: IN
78425: IFFALSE 78452
// begin result := [ i , weapon ] ;
78427: LD_ADDR_VAR 0 3
78431: PUSH
78432: LD_VAR 0 4
78436: PUSH
78437: LD_VAR 0 8
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: ST_TO_ADDR
// exit ;
78446: POP
78447: POP
78448: POP
78449: POP
78450: GO 78460
// end ; end ;
78452: GO 78388
78454: POP
78455: POP
// end ;
78456: GO 78274
78458: POP
78459: POP
// end ;
78460: LD_VAR 0 3
78464: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78465: LD_INT 0
78467: PPUSH
// if not side or side > 8 then
78468: LD_VAR 0 3
78472: NOT
78473: IFTRUE 78485
78475: PUSH
78476: LD_VAR 0 3
78480: PUSH
78481: LD_INT 8
78483: GREATER
78484: OR
78485: IFFALSE 78489
// exit ;
78487: GO 78548
// if not range then
78489: LD_VAR 0 4
78493: NOT
78494: IFFALSE 78505
// range := - 12 ;
78496: LD_ADDR_VAR 0 4
78500: PUSH
78501: LD_INT 12
78503: NEG
78504: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78505: LD_VAR 0 1
78509: PPUSH
78510: LD_VAR 0 2
78514: PPUSH
78515: LD_VAR 0 3
78519: PPUSH
78520: LD_VAR 0 4
78524: PPUSH
78525: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78529: LD_VAR 0 1
78533: PPUSH
78534: LD_VAR 0 2
78538: PPUSH
78539: LD_VAR 0 3
78543: PPUSH
78544: CALL_OW 331
// end ;
78548: LD_VAR 0 5
78552: RET
// export function Video ( mode ) ; begin
78553: LD_INT 0
78555: PPUSH
// ingame_video = mode ;
78556: LD_ADDR_OWVAR 52
78560: PUSH
78561: LD_VAR 0 1
78565: ST_TO_ADDR
// interface_hidden = mode ;
78566: LD_ADDR_OWVAR 54
78570: PUSH
78571: LD_VAR 0 1
78575: ST_TO_ADDR
// end ;
78576: LD_VAR 0 2
78580: RET
// export function Join ( array , element ) ; begin
78581: LD_INT 0
78583: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78584: LD_ADDR_VAR 0 3
78588: PUSH
78589: LD_VAR 0 1
78593: PPUSH
78594: LD_VAR 0 1
78598: PUSH
78599: LD_INT 1
78601: PLUS
78602: PPUSH
78603: LD_VAR 0 2
78607: PPUSH
78608: CALL_OW 1
78612: ST_TO_ADDR
// end ;
78613: LD_VAR 0 3
78617: RET
// export function JoinUnion ( array , element ) ; begin
78618: LD_INT 0
78620: PPUSH
// result := array union element ;
78621: LD_ADDR_VAR 0 3
78625: PUSH
78626: LD_VAR 0 1
78630: PUSH
78631: LD_VAR 0 2
78635: UNION
78636: ST_TO_ADDR
// end ;
78637: LD_VAR 0 3
78641: RET
// export function GetBehemoths ( side ) ; begin
78642: LD_INT 0
78644: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78645: LD_ADDR_VAR 0 2
78649: PUSH
78650: LD_INT 22
78652: PUSH
78653: LD_VAR 0 1
78657: PUSH
78658: EMPTY
78659: LIST
78660: LIST
78661: PUSH
78662: LD_INT 31
78664: PUSH
78665: LD_INT 25
78667: PUSH
78668: EMPTY
78669: LIST
78670: LIST
78671: PUSH
78672: EMPTY
78673: LIST
78674: LIST
78675: PPUSH
78676: CALL_OW 69
78680: ST_TO_ADDR
// end ;
78681: LD_VAR 0 2
78685: RET
// export function Shuffle ( array ) ; var i , index ; begin
78686: LD_INT 0
78688: PPUSH
78689: PPUSH
78690: PPUSH
// result := [ ] ;
78691: LD_ADDR_VAR 0 2
78695: PUSH
78696: EMPTY
78697: ST_TO_ADDR
// if not array then
78698: LD_VAR 0 1
78702: NOT
78703: IFFALSE 78707
// exit ;
78705: GO 78806
// Randomize ;
78707: CALL_OW 10
// for i = array downto 1 do
78711: LD_ADDR_VAR 0 3
78715: PUSH
78716: DOUBLE
78717: LD_VAR 0 1
78721: INC
78722: ST_TO_ADDR
78723: LD_INT 1
78725: PUSH
78726: FOR_DOWNTO
78727: IFFALSE 78804
// begin index := rand ( 1 , array ) ;
78729: LD_ADDR_VAR 0 4
78733: PUSH
78734: LD_INT 1
78736: PPUSH
78737: LD_VAR 0 1
78741: PPUSH
78742: CALL_OW 12
78746: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78747: LD_ADDR_VAR 0 2
78751: PUSH
78752: LD_VAR 0 2
78756: PPUSH
78757: LD_VAR 0 2
78761: PUSH
78762: LD_INT 1
78764: PLUS
78765: PPUSH
78766: LD_VAR 0 1
78770: PUSH
78771: LD_VAR 0 4
78775: ARRAY
78776: PPUSH
78777: CALL_OW 2
78781: ST_TO_ADDR
// array := Delete ( array , index ) ;
78782: LD_ADDR_VAR 0 1
78786: PUSH
78787: LD_VAR 0 1
78791: PPUSH
78792: LD_VAR 0 4
78796: PPUSH
78797: CALL_OW 3
78801: ST_TO_ADDR
// end ;
78802: GO 78726
78804: POP
78805: POP
// end ;
78806: LD_VAR 0 2
78810: RET
// export function GetBaseMaterials ( base ) ; begin
78811: LD_INT 0
78813: PPUSH
// result := [ 0 , 0 , 0 ] ;
78814: LD_ADDR_VAR 0 2
78818: PUSH
78819: LD_INT 0
78821: PUSH
78822: LD_INT 0
78824: PUSH
78825: LD_INT 0
78827: PUSH
78828: EMPTY
78829: LIST
78830: LIST
78831: LIST
78832: ST_TO_ADDR
// if not base then
78833: LD_VAR 0 1
78837: NOT
78838: IFFALSE 78842
// exit ;
78840: GO 78891
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78842: LD_ADDR_VAR 0 2
78846: PUSH
78847: LD_VAR 0 1
78851: PPUSH
78852: LD_INT 1
78854: PPUSH
78855: CALL_OW 275
78859: PUSH
78860: LD_VAR 0 1
78864: PPUSH
78865: LD_INT 2
78867: PPUSH
78868: CALL_OW 275
78872: PUSH
78873: LD_VAR 0 1
78877: PPUSH
78878: LD_INT 3
78880: PPUSH
78881: CALL_OW 275
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: LIST
78890: ST_TO_ADDR
// end ;
78891: LD_VAR 0 2
78895: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78896: LD_INT 0
78898: PPUSH
78899: PPUSH
// result := array ;
78900: LD_ADDR_VAR 0 3
78904: PUSH
78905: LD_VAR 0 1
78909: ST_TO_ADDR
// if size >= result then
78910: LD_VAR 0 2
78914: PUSH
78915: LD_VAR 0 3
78919: GREATEREQUAL
78920: IFFALSE 78924
// exit ;
78922: GO 78974
// if size then
78924: LD_VAR 0 2
78928: IFFALSE 78974
// for i := array downto size do
78930: LD_ADDR_VAR 0 4
78934: PUSH
78935: DOUBLE
78936: LD_VAR 0 1
78940: INC
78941: ST_TO_ADDR
78942: LD_VAR 0 2
78946: PUSH
78947: FOR_DOWNTO
78948: IFFALSE 78972
// result := Delete ( result , result ) ;
78950: LD_ADDR_VAR 0 3
78954: PUSH
78955: LD_VAR 0 3
78959: PPUSH
78960: LD_VAR 0 3
78964: PPUSH
78965: CALL_OW 3
78969: ST_TO_ADDR
78970: GO 78947
78972: POP
78973: POP
// end ;
78974: LD_VAR 0 3
78978: RET
// export function ComExit ( unit ) ; var tmp ; begin
78979: LD_INT 0
78981: PPUSH
78982: PPUSH
// if not IsInUnit ( unit ) then
78983: LD_VAR 0 1
78987: PPUSH
78988: CALL_OW 310
78992: NOT
78993: IFFALSE 78997
// exit ;
78995: GO 79057
// tmp := IsInUnit ( unit ) ;
78997: LD_ADDR_VAR 0 3
79001: PUSH
79002: LD_VAR 0 1
79006: PPUSH
79007: CALL_OW 310
79011: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79012: LD_VAR 0 3
79016: PPUSH
79017: CALL_OW 247
79021: PUSH
79022: LD_INT 2
79024: EQUAL
79025: IFFALSE 79038
// ComExitVehicle ( unit ) else
79027: LD_VAR 0 1
79031: PPUSH
79032: CALL_OW 121
79036: GO 79047
// ComExitBuilding ( unit ) ;
79038: LD_VAR 0 1
79042: PPUSH
79043: CALL_OW 122
// result := tmp ;
79047: LD_ADDR_VAR 0 2
79051: PUSH
79052: LD_VAR 0 3
79056: ST_TO_ADDR
// end ;
79057: LD_VAR 0 2
79061: RET
// export function ComExitAll ( units ) ; var i ; begin
79062: LD_INT 0
79064: PPUSH
79065: PPUSH
// if not units then
79066: LD_VAR 0 1
79070: NOT
79071: IFFALSE 79075
// exit ;
79073: GO 79101
// for i in units do
79075: LD_ADDR_VAR 0 3
79079: PUSH
79080: LD_VAR 0 1
79084: PUSH
79085: FOR_IN
79086: IFFALSE 79099
// ComExit ( i ) ;
79088: LD_VAR 0 3
79092: PPUSH
79093: CALL 78979 0 1
79097: GO 79085
79099: POP
79100: POP
// end ;
79101: LD_VAR 0 2
79105: RET
// export function ResetHc ; begin
79106: LD_INT 0
79108: PPUSH
// InitHc ;
79109: CALL_OW 19
// hc_importance := 0 ;
79113: LD_ADDR_OWVAR 32
79117: PUSH
79118: LD_INT 0
79120: ST_TO_ADDR
// end ;
79121: LD_VAR 0 1
79125: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79126: LD_INT 0
79128: PPUSH
79129: PPUSH
79130: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79131: LD_ADDR_VAR 0 6
79135: PUSH
79136: LD_VAR 0 1
79140: PUSH
79141: LD_VAR 0 3
79145: PLUS
79146: PUSH
79147: LD_INT 2
79149: DIV
79150: ST_TO_ADDR
// if _x < 0 then
79151: LD_VAR 0 6
79155: PUSH
79156: LD_INT 0
79158: LESS
79159: IFFALSE 79176
// _x := _x * - 1 ;
79161: LD_ADDR_VAR 0 6
79165: PUSH
79166: LD_VAR 0 6
79170: PUSH
79171: LD_INT 1
79173: NEG
79174: MUL
79175: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79176: LD_ADDR_VAR 0 7
79180: PUSH
79181: LD_VAR 0 2
79185: PUSH
79186: LD_VAR 0 4
79190: PLUS
79191: PUSH
79192: LD_INT 2
79194: DIV
79195: ST_TO_ADDR
// if _y < 0 then
79196: LD_VAR 0 7
79200: PUSH
79201: LD_INT 0
79203: LESS
79204: IFFALSE 79221
// _y := _y * - 1 ;
79206: LD_ADDR_VAR 0 7
79210: PUSH
79211: LD_VAR 0 7
79215: PUSH
79216: LD_INT 1
79218: NEG
79219: MUL
79220: ST_TO_ADDR
// result := [ _x , _y ] ;
79221: LD_ADDR_VAR 0 5
79225: PUSH
79226: LD_VAR 0 6
79230: PUSH
79231: LD_VAR 0 7
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: ST_TO_ADDR
// end ;
79240: LD_VAR 0 5
79244: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79245: LD_INT 0
79247: PPUSH
79248: PPUSH
79249: PPUSH
79250: PPUSH
// task := GetTaskList ( unit ) ;
79251: LD_ADDR_VAR 0 7
79255: PUSH
79256: LD_VAR 0 1
79260: PPUSH
79261: CALL_OW 437
79265: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79266: LD_VAR 0 7
79270: NOT
79271: IFFALSE 79290
79273: PUSH
79274: LD_VAR 0 1
79278: PPUSH
79279: LD_VAR 0 2
79283: PPUSH
79284: CALL_OW 308
79288: NOT
79289: AND
79290: IFFALSE 79294
// exit ;
79292: GO 79412
// if IsInArea ( unit , area ) then
79294: LD_VAR 0 1
79298: PPUSH
79299: LD_VAR 0 2
79303: PPUSH
79304: CALL_OW 308
79308: IFFALSE 79326
// begin ComMoveToArea ( unit , goAway ) ;
79310: LD_VAR 0 1
79314: PPUSH
79315: LD_VAR 0 3
79319: PPUSH
79320: CALL_OW 113
// exit ;
79324: GO 79412
// end ; if task [ 1 ] [ 1 ] <> M then
79326: LD_VAR 0 7
79330: PUSH
79331: LD_INT 1
79333: ARRAY
79334: PUSH
79335: LD_INT 1
79337: ARRAY
79338: PUSH
79339: LD_STRING M
79341: NONEQUAL
79342: IFFALSE 79346
// exit ;
79344: GO 79412
// x := task [ 1 ] [ 2 ] ;
79346: LD_ADDR_VAR 0 5
79350: PUSH
79351: LD_VAR 0 7
79355: PUSH
79356: LD_INT 1
79358: ARRAY
79359: PUSH
79360: LD_INT 2
79362: ARRAY
79363: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79364: LD_ADDR_VAR 0 6
79368: PUSH
79369: LD_VAR 0 7
79373: PUSH
79374: LD_INT 1
79376: ARRAY
79377: PUSH
79378: LD_INT 3
79380: ARRAY
79381: ST_TO_ADDR
// if InArea ( x , y , area ) then
79382: LD_VAR 0 5
79386: PPUSH
79387: LD_VAR 0 6
79391: PPUSH
79392: LD_VAR 0 2
79396: PPUSH
79397: CALL_OW 309
79401: IFFALSE 79412
// ComStop ( unit ) ;
79403: LD_VAR 0 1
79407: PPUSH
79408: CALL_OW 141
// end ;
79412: LD_VAR 0 4
79416: RET
// export function Abs ( value ) ; begin
79417: LD_INT 0
79419: PPUSH
// result := value ;
79420: LD_ADDR_VAR 0 2
79424: PUSH
79425: LD_VAR 0 1
79429: ST_TO_ADDR
// if value < 0 then
79430: LD_VAR 0 1
79434: PUSH
79435: LD_INT 0
79437: LESS
79438: IFFALSE 79455
// result := value * - 1 ;
79440: LD_ADDR_VAR 0 2
79444: PUSH
79445: LD_VAR 0 1
79449: PUSH
79450: LD_INT 1
79452: NEG
79453: MUL
79454: ST_TO_ADDR
// end ;
79455: LD_VAR 0 2
79459: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79460: LD_INT 0
79462: PPUSH
79463: PPUSH
79464: PPUSH
79465: PPUSH
79466: PPUSH
79467: PPUSH
79468: PPUSH
79469: PPUSH
// if not unit or not building then
79470: LD_VAR 0 1
79474: NOT
79475: IFTRUE 79484
79477: PUSH
79478: LD_VAR 0 2
79482: NOT
79483: OR
79484: IFFALSE 79488
// exit ;
79486: GO 79716
// x := GetX ( building ) ;
79488: LD_ADDR_VAR 0 4
79492: PUSH
79493: LD_VAR 0 2
79497: PPUSH
79498: CALL_OW 250
79502: ST_TO_ADDR
// y := GetY ( building ) ;
79503: LD_ADDR_VAR 0 6
79507: PUSH
79508: LD_VAR 0 2
79512: PPUSH
79513: CALL_OW 251
79517: ST_TO_ADDR
// d := GetDir ( building ) ;
79518: LD_ADDR_VAR 0 8
79522: PUSH
79523: LD_VAR 0 2
79527: PPUSH
79528: CALL_OW 254
79532: ST_TO_ADDR
// r := 4 ;
79533: LD_ADDR_VAR 0 9
79537: PUSH
79538: LD_INT 4
79540: ST_TO_ADDR
// for i := 1 to 5 do
79541: LD_ADDR_VAR 0 10
79545: PUSH
79546: DOUBLE
79547: LD_INT 1
79549: DEC
79550: ST_TO_ADDR
79551: LD_INT 5
79553: PUSH
79554: FOR_TO
79555: IFFALSE 79714
// begin _x := ShiftX ( x , d , r + i ) ;
79557: LD_ADDR_VAR 0 5
79561: PUSH
79562: LD_VAR 0 4
79566: PPUSH
79567: LD_VAR 0 8
79571: PPUSH
79572: LD_VAR 0 9
79576: PUSH
79577: LD_VAR 0 10
79581: PLUS
79582: PPUSH
79583: CALL_OW 272
79587: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79588: LD_ADDR_VAR 0 7
79592: PUSH
79593: LD_VAR 0 6
79597: PPUSH
79598: LD_VAR 0 8
79602: PPUSH
79603: LD_VAR 0 9
79607: PUSH
79608: LD_VAR 0 10
79612: PLUS
79613: PPUSH
79614: CALL_OW 273
79618: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79619: LD_VAR 0 5
79623: PPUSH
79624: LD_VAR 0 7
79628: PPUSH
79629: CALL_OW 488
79633: IFFALSE 79668
79635: PUSH
79636: LD_VAR 0 5
79640: PPUSH
79641: LD_VAR 0 7
79645: PPUSH
79646: CALL_OW 428
79650: PPUSH
79651: CALL_OW 247
79655: PUSH
79656: LD_INT 3
79658: PUSH
79659: LD_INT 2
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: IN
79666: NOT
79667: AND
79668: IFFALSE 79712
// begin ComMoveXY ( unit , _x , _y ) ;
79670: LD_VAR 0 1
79674: PPUSH
79675: LD_VAR 0 5
79679: PPUSH
79680: LD_VAR 0 7
79684: PPUSH
79685: CALL_OW 111
// result := [ _x , _y ] ;
79689: LD_ADDR_VAR 0 3
79693: PUSH
79694: LD_VAR 0 5
79698: PUSH
79699: LD_VAR 0 7
79703: PUSH
79704: EMPTY
79705: LIST
79706: LIST
79707: ST_TO_ADDR
// exit ;
79708: POP
79709: POP
79710: GO 79716
// end ; end ;
79712: GO 79554
79714: POP
79715: POP
// end ;
79716: LD_VAR 0 3
79720: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79721: LD_INT 0
79723: PPUSH
79724: PPUSH
79725: PPUSH
// result := 0 ;
79726: LD_ADDR_VAR 0 3
79730: PUSH
79731: LD_INT 0
79733: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79734: LD_VAR 0 1
79738: PUSH
79739: LD_INT 0
79741: LESS
79742: IFTRUE 79754
79744: PUSH
79745: LD_VAR 0 1
79749: PUSH
79750: LD_INT 8
79752: GREATER
79753: OR
79754: IFTRUE 79766
79756: PUSH
79757: LD_VAR 0 2
79761: PUSH
79762: LD_INT 0
79764: LESS
79765: OR
79766: IFTRUE 79778
79768: PUSH
79769: LD_VAR 0 2
79773: PUSH
79774: LD_INT 8
79776: GREATER
79777: OR
79778: IFFALSE 79782
// exit ;
79780: GO 79857
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79782: LD_ADDR_VAR 0 4
79786: PUSH
79787: LD_INT 22
79789: PUSH
79790: LD_VAR 0 2
79794: PUSH
79795: EMPTY
79796: LIST
79797: LIST
79798: PPUSH
79799: CALL_OW 69
79803: PUSH
79804: FOR_IN
79805: IFFALSE 79855
// begin un := UnitShoot ( i ) ;
79807: LD_ADDR_VAR 0 5
79811: PUSH
79812: LD_VAR 0 4
79816: PPUSH
79817: CALL_OW 504
79821: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79822: LD_VAR 0 5
79826: PPUSH
79827: CALL_OW 255
79831: PUSH
79832: LD_VAR 0 1
79836: EQUAL
79837: IFFALSE 79853
// begin result := un ;
79839: LD_ADDR_VAR 0 3
79843: PUSH
79844: LD_VAR 0 5
79848: ST_TO_ADDR
// exit ;
79849: POP
79850: POP
79851: GO 79857
// end ; end ;
79853: GO 79804
79855: POP
79856: POP
// end ;
79857: LD_VAR 0 3
79861: RET
// export function GetCargoBay ( units ) ; begin
79862: LD_INT 0
79864: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79865: LD_ADDR_VAR 0 2
79869: PUSH
79870: LD_VAR 0 1
79874: PPUSH
79875: LD_INT 2
79877: PUSH
79878: LD_INT 34
79880: PUSH
79881: LD_INT 12
79883: PUSH
79884: EMPTY
79885: LIST
79886: LIST
79887: PUSH
79888: LD_INT 34
79890: PUSH
79891: LD_INT 51
79893: PUSH
79894: EMPTY
79895: LIST
79896: LIST
79897: PUSH
79898: LD_INT 34
79900: PUSH
79901: LD_INT 32
79903: PUSH
79904: EMPTY
79905: LIST
79906: LIST
79907: PUSH
79908: LD_INT 34
79910: PUSH
79911: LD_INT 89
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: PUSH
79918: EMPTY
79919: LIST
79920: LIST
79921: LIST
79922: LIST
79923: LIST
79924: PPUSH
79925: CALL_OW 72
79929: ST_TO_ADDR
// end ;
79930: LD_VAR 0 2
79934: RET
// export function Negate ( value ) ; begin
79935: LD_INT 0
79937: PPUSH
// result := not value ;
79938: LD_ADDR_VAR 0 2
79942: PUSH
79943: LD_VAR 0 1
79947: NOT
79948: ST_TO_ADDR
// end ;
79949: LD_VAR 0 2
79953: RET
// export function Inc ( value ) ; begin
79954: LD_INT 0
79956: PPUSH
// result := value + 1 ;
79957: LD_ADDR_VAR 0 2
79961: PUSH
79962: LD_VAR 0 1
79966: PUSH
79967: LD_INT 1
79969: PLUS
79970: ST_TO_ADDR
// end ;
79971: LD_VAR 0 2
79975: RET
// export function Dec ( value ) ; begin
79976: LD_INT 0
79978: PPUSH
// result := value - 1 ;
79979: LD_ADDR_VAR 0 2
79983: PUSH
79984: LD_VAR 0 1
79988: PUSH
79989: LD_INT 1
79991: MINUS
79992: ST_TO_ADDR
// end ;
79993: LD_VAR 0 2
79997: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79998: LD_INT 0
80000: PPUSH
80001: PPUSH
80002: PPUSH
80003: PPUSH
80004: PPUSH
80005: PPUSH
80006: PPUSH
80007: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80008: LD_VAR 0 1
80012: PPUSH
80013: LD_VAR 0 2
80017: PPUSH
80018: CALL_OW 488
80022: NOT
80023: IFTRUE 80042
80025: PUSH
80026: LD_VAR 0 3
80030: PPUSH
80031: LD_VAR 0 4
80035: PPUSH
80036: CALL_OW 488
80040: NOT
80041: OR
80042: IFFALSE 80055
// begin result := - 1 ;
80044: LD_ADDR_VAR 0 5
80048: PUSH
80049: LD_INT 1
80051: NEG
80052: ST_TO_ADDR
// exit ;
80053: GO 80290
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80055: LD_ADDR_VAR 0 12
80059: PUSH
80060: LD_VAR 0 1
80064: PPUSH
80065: LD_VAR 0 2
80069: PPUSH
80070: LD_VAR 0 3
80074: PPUSH
80075: LD_VAR 0 4
80079: PPUSH
80080: CALL 79126 0 4
80084: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80085: LD_ADDR_VAR 0 11
80089: PUSH
80090: LD_VAR 0 1
80094: PPUSH
80095: LD_VAR 0 2
80099: PPUSH
80100: LD_VAR 0 12
80104: PUSH
80105: LD_INT 1
80107: ARRAY
80108: PPUSH
80109: LD_VAR 0 12
80113: PUSH
80114: LD_INT 2
80116: ARRAY
80117: PPUSH
80118: CALL_OW 298
80122: ST_TO_ADDR
// distance := 9999 ;
80123: LD_ADDR_VAR 0 10
80127: PUSH
80128: LD_INT 9999
80130: ST_TO_ADDR
// for i := 0 to 5 do
80131: LD_ADDR_VAR 0 6
80135: PUSH
80136: DOUBLE
80137: LD_INT 0
80139: DEC
80140: ST_TO_ADDR
80141: LD_INT 5
80143: PUSH
80144: FOR_TO
80145: IFFALSE 80288
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80147: LD_ADDR_VAR 0 7
80151: PUSH
80152: LD_VAR 0 1
80156: PPUSH
80157: LD_VAR 0 6
80161: PPUSH
80162: LD_VAR 0 11
80166: PPUSH
80167: CALL_OW 272
80171: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80172: LD_ADDR_VAR 0 8
80176: PUSH
80177: LD_VAR 0 2
80181: PPUSH
80182: LD_VAR 0 6
80186: PPUSH
80187: LD_VAR 0 11
80191: PPUSH
80192: CALL_OW 273
80196: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80197: LD_VAR 0 7
80201: PPUSH
80202: LD_VAR 0 8
80206: PPUSH
80207: CALL_OW 488
80211: NOT
80212: IFFALSE 80216
// continue ;
80214: GO 80144
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80216: LD_ADDR_VAR 0 9
80220: PUSH
80221: LD_VAR 0 12
80225: PUSH
80226: LD_INT 1
80228: ARRAY
80229: PPUSH
80230: LD_VAR 0 12
80234: PUSH
80235: LD_INT 2
80237: ARRAY
80238: PPUSH
80239: LD_VAR 0 7
80243: PPUSH
80244: LD_VAR 0 8
80248: PPUSH
80249: CALL_OW 298
80253: ST_TO_ADDR
// if tmp < distance then
80254: LD_VAR 0 9
80258: PUSH
80259: LD_VAR 0 10
80263: LESS
80264: IFFALSE 80286
// begin result := i ;
80266: LD_ADDR_VAR 0 5
80270: PUSH
80271: LD_VAR 0 6
80275: ST_TO_ADDR
// distance := tmp ;
80276: LD_ADDR_VAR 0 10
80280: PUSH
80281: LD_VAR 0 9
80285: ST_TO_ADDR
// end ; end ;
80286: GO 80144
80288: POP
80289: POP
// end ;
80290: LD_VAR 0 5
80294: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80295: LD_INT 0
80297: PPUSH
80298: PPUSH
// if not driver or not IsInUnit ( driver ) then
80299: LD_VAR 0 1
80303: NOT
80304: IFTRUE 80318
80306: PUSH
80307: LD_VAR 0 1
80311: PPUSH
80312: CALL_OW 310
80316: NOT
80317: OR
80318: IFFALSE 80322
// exit ;
80320: GO 80412
// vehicle := IsInUnit ( driver ) ;
80322: LD_ADDR_VAR 0 3
80326: PUSH
80327: LD_VAR 0 1
80331: PPUSH
80332: CALL_OW 310
80336: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80337: LD_VAR 0 1
80341: PPUSH
80342: LD_STRING \
80344: PUSH
80345: LD_INT 0
80347: PUSH
80348: LD_INT 0
80350: PUSH
80351: LD_INT 0
80353: PUSH
80354: LD_INT 0
80356: PUSH
80357: LD_INT 0
80359: PUSH
80360: LD_INT 0
80362: PUSH
80363: EMPTY
80364: LIST
80365: LIST
80366: LIST
80367: LIST
80368: LIST
80369: LIST
80370: LIST
80371: PUSH
80372: LD_STRING E
80374: PUSH
80375: LD_INT 0
80377: PUSH
80378: LD_INT 0
80380: PUSH
80381: LD_VAR 0 3
80385: PUSH
80386: LD_INT 0
80388: PUSH
80389: LD_INT 0
80391: PUSH
80392: LD_INT 0
80394: PUSH
80395: EMPTY
80396: LIST
80397: LIST
80398: LIST
80399: LIST
80400: LIST
80401: LIST
80402: LIST
80403: PUSH
80404: EMPTY
80405: LIST
80406: LIST
80407: PPUSH
80408: CALL_OW 446
// end ;
80412: LD_VAR 0 2
80416: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80417: LD_INT 0
80419: PPUSH
80420: PPUSH
// if not driver or not IsInUnit ( driver ) then
80421: LD_VAR 0 1
80425: NOT
80426: IFTRUE 80440
80428: PUSH
80429: LD_VAR 0 1
80433: PPUSH
80434: CALL_OW 310
80438: NOT
80439: OR
80440: IFFALSE 80444
// exit ;
80442: GO 80534
// vehicle := IsInUnit ( driver ) ;
80444: LD_ADDR_VAR 0 3
80448: PUSH
80449: LD_VAR 0 1
80453: PPUSH
80454: CALL_OW 310
80458: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80459: LD_VAR 0 1
80463: PPUSH
80464: LD_STRING \
80466: PUSH
80467: LD_INT 0
80469: PUSH
80470: LD_INT 0
80472: PUSH
80473: LD_INT 0
80475: PUSH
80476: LD_INT 0
80478: PUSH
80479: LD_INT 0
80481: PUSH
80482: LD_INT 0
80484: PUSH
80485: EMPTY
80486: LIST
80487: LIST
80488: LIST
80489: LIST
80490: LIST
80491: LIST
80492: LIST
80493: PUSH
80494: LD_STRING E
80496: PUSH
80497: LD_INT 0
80499: PUSH
80500: LD_INT 0
80502: PUSH
80503: LD_VAR 0 3
80507: PUSH
80508: LD_INT 0
80510: PUSH
80511: LD_INT 0
80513: PUSH
80514: LD_INT 0
80516: PUSH
80517: EMPTY
80518: LIST
80519: LIST
80520: LIST
80521: LIST
80522: LIST
80523: LIST
80524: LIST
80525: PUSH
80526: EMPTY
80527: LIST
80528: LIST
80529: PPUSH
80530: CALL_OW 447
// end ;
80534: LD_VAR 0 2
80538: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80539: LD_INT 0
80541: PPUSH
80542: PPUSH
80543: PPUSH
// tmp := [ ] ;
80544: LD_ADDR_VAR 0 5
80548: PUSH
80549: EMPTY
80550: ST_TO_ADDR
// for i in units do
80551: LD_ADDR_VAR 0 4
80555: PUSH
80556: LD_VAR 0 1
80560: PUSH
80561: FOR_IN
80562: IFFALSE 80600
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80564: LD_ADDR_VAR 0 5
80568: PUSH
80569: LD_VAR 0 5
80573: PPUSH
80574: LD_VAR 0 5
80578: PUSH
80579: LD_INT 1
80581: PLUS
80582: PPUSH
80583: LD_VAR 0 4
80587: PPUSH
80588: CALL_OW 256
80592: PPUSH
80593: CALL_OW 2
80597: ST_TO_ADDR
80598: GO 80561
80600: POP
80601: POP
// if not tmp then
80602: LD_VAR 0 5
80606: NOT
80607: IFFALSE 80611
// exit ;
80609: GO 80659
// if asc then
80611: LD_VAR 0 2
80615: IFFALSE 80639
// result := SortListByListAsc ( units , tmp ) else
80617: LD_ADDR_VAR 0 3
80621: PUSH
80622: LD_VAR 0 1
80626: PPUSH
80627: LD_VAR 0 5
80631: PPUSH
80632: CALL_OW 76
80636: ST_TO_ADDR
80637: GO 80659
// result := SortListByListDesc ( units , tmp ) ;
80639: LD_ADDR_VAR 0 3
80643: PUSH
80644: LD_VAR 0 1
80648: PPUSH
80649: LD_VAR 0 5
80653: PPUSH
80654: CALL_OW 77
80658: ST_TO_ADDR
// end ;
80659: LD_VAR 0 3
80663: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80664: LD_INT 0
80666: PPUSH
80667: PPUSH
// task := GetTaskList ( mech ) ;
80668: LD_ADDR_VAR 0 4
80672: PUSH
80673: LD_VAR 0 1
80677: PPUSH
80678: CALL_OW 437
80682: ST_TO_ADDR
// if not task then
80683: LD_VAR 0 4
80687: NOT
80688: IFFALSE 80692
// exit ;
80690: GO 80736
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80692: LD_ADDR_VAR 0 3
80696: PUSH
80697: LD_VAR 0 4
80701: PUSH
80702: LD_INT 1
80704: ARRAY
80705: PUSH
80706: LD_INT 1
80708: ARRAY
80709: PUSH
80710: LD_STRING r
80712: EQUAL
80713: IFFALSE 80735
80715: PUSH
80716: LD_VAR 0 4
80720: PUSH
80721: LD_INT 1
80723: ARRAY
80724: PUSH
80725: LD_INT 4
80727: ARRAY
80728: PUSH
80729: LD_VAR 0 2
80733: EQUAL
80734: AND
80735: ST_TO_ADDR
// end ;
80736: LD_VAR 0 3
80740: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80741: LD_INT 0
80743: PPUSH
// SetDir ( unit , d ) ;
80744: LD_VAR 0 1
80748: PPUSH
80749: LD_VAR 0 4
80753: PPUSH
80754: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
80758: LD_ADDR_VAR 0 6
80762: PUSH
80763: LD_VAR 0 1
80767: PPUSH
80768: LD_VAR 0 2
80772: PPUSH
80773: LD_VAR 0 3
80777: PPUSH
80778: LD_VAR 0 5
80782: PPUSH
80783: CALL_OW 48
80787: ST_TO_ADDR
// end ;
80788: LD_VAR 0 6
80792: RET
// export function ToNaturalNumber ( number ) ; begin
80793: LD_INT 0
80795: PPUSH
// result := number div 1 ;
80796: LD_ADDR_VAR 0 2
80800: PUSH
80801: LD_VAR 0 1
80805: PUSH
80806: LD_INT 1
80808: DIV
80809: ST_TO_ADDR
// if number < 0 then
80810: LD_VAR 0 1
80814: PUSH
80815: LD_INT 0
80817: LESS
80818: IFFALSE 80828
// result := 0 ;
80820: LD_ADDR_VAR 0 2
80824: PUSH
80825: LD_INT 0
80827: ST_TO_ADDR
// end ;
80828: LD_VAR 0 2
80832: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
80833: LD_INT 0
80835: PPUSH
80836: PPUSH
80837: PPUSH
// if not buildings then
80838: LD_VAR 0 1
80842: NOT
80843: IFFALSE 80847
// exit ;
80845: GO 80962
// tmp := [ ] ;
80847: LD_ADDR_VAR 0 5
80851: PUSH
80852: EMPTY
80853: ST_TO_ADDR
// for b in buildings do
80854: LD_ADDR_VAR 0 4
80858: PUSH
80859: LD_VAR 0 1
80863: PUSH
80864: FOR_IN
80865: IFFALSE 80903
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
80867: LD_ADDR_VAR 0 5
80871: PUSH
80872: LD_VAR 0 5
80876: PPUSH
80877: LD_VAR 0 5
80881: PUSH
80882: LD_INT 1
80884: PLUS
80885: PPUSH
80886: LD_VAR 0 4
80890: PPUSH
80891: CALL_OW 266
80895: PPUSH
80896: CALL_OW 1
80900: ST_TO_ADDR
80901: GO 80864
80903: POP
80904: POP
// if not tmp then
80905: LD_VAR 0 5
80909: NOT
80910: IFFALSE 80914
// exit ;
80912: GO 80962
// if asc then
80914: LD_VAR 0 2
80918: IFFALSE 80942
// result := SortListByListAsc ( buildings , tmp ) else
80920: LD_ADDR_VAR 0 3
80924: PUSH
80925: LD_VAR 0 1
80929: PPUSH
80930: LD_VAR 0 5
80934: PPUSH
80935: CALL_OW 76
80939: ST_TO_ADDR
80940: GO 80962
// result := SortListByListDesc ( buildings , tmp ) ;
80942: LD_ADDR_VAR 0 3
80946: PUSH
80947: LD_VAR 0 1
80951: PPUSH
80952: LD_VAR 0 5
80956: PPUSH
80957: CALL_OW 77
80961: ST_TO_ADDR
// end ;
80962: LD_VAR 0 3
80966: RET
// export function SortByClass ( units , class ) ; var un ; begin
80967: LD_INT 0
80969: PPUSH
80970: PPUSH
// if not units or not class then
80971: LD_VAR 0 1
80975: NOT
80976: IFTRUE 80985
80978: PUSH
80979: LD_VAR 0 2
80983: NOT
80984: OR
80985: IFFALSE 80989
// exit ;
80987: GO 81084
// result := [ ] ;
80989: LD_ADDR_VAR 0 3
80993: PUSH
80994: EMPTY
80995: ST_TO_ADDR
// for un in units do
80996: LD_ADDR_VAR 0 4
81000: PUSH
81001: LD_VAR 0 1
81005: PUSH
81006: FOR_IN
81007: IFFALSE 81082
// if GetClass ( un ) = class then
81009: LD_VAR 0 4
81013: PPUSH
81014: CALL_OW 257
81018: PUSH
81019: LD_VAR 0 2
81023: EQUAL
81024: IFFALSE 81051
// result := Insert ( result , 1 , un ) else
81026: LD_ADDR_VAR 0 3
81030: PUSH
81031: LD_VAR 0 3
81035: PPUSH
81036: LD_INT 1
81038: PPUSH
81039: LD_VAR 0 4
81043: PPUSH
81044: CALL_OW 2
81048: ST_TO_ADDR
81049: GO 81080
// result := Replace ( result , result + 1 , un ) ;
81051: LD_ADDR_VAR 0 3
81055: PUSH
81056: LD_VAR 0 3
81060: PPUSH
81061: LD_VAR 0 3
81065: PUSH
81066: LD_INT 1
81068: PLUS
81069: PPUSH
81070: LD_VAR 0 4
81074: PPUSH
81075: CALL_OW 1
81079: ST_TO_ADDR
81080: GO 81006
81082: POP
81083: POP
// end ;
81084: LD_VAR 0 3
81088: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81089: LD_INT 0
81091: PPUSH
81092: PPUSH
81093: PPUSH
81094: PPUSH
81095: PPUSH
81096: PPUSH
81097: PPUSH
// result := [ ] ;
81098: LD_ADDR_VAR 0 4
81102: PUSH
81103: EMPTY
81104: ST_TO_ADDR
// if x - r < 0 then
81105: LD_VAR 0 1
81109: PUSH
81110: LD_VAR 0 3
81114: MINUS
81115: PUSH
81116: LD_INT 0
81118: LESS
81119: IFFALSE 81131
// min_x := 0 else
81121: LD_ADDR_VAR 0 8
81125: PUSH
81126: LD_INT 0
81128: ST_TO_ADDR
81129: GO 81147
// min_x := x - r ;
81131: LD_ADDR_VAR 0 8
81135: PUSH
81136: LD_VAR 0 1
81140: PUSH
81141: LD_VAR 0 3
81145: MINUS
81146: ST_TO_ADDR
// if y - r < 0 then
81147: LD_VAR 0 2
81151: PUSH
81152: LD_VAR 0 3
81156: MINUS
81157: PUSH
81158: LD_INT 0
81160: LESS
81161: IFFALSE 81173
// min_y := 0 else
81163: LD_ADDR_VAR 0 7
81167: PUSH
81168: LD_INT 0
81170: ST_TO_ADDR
81171: GO 81189
// min_y := y - r ;
81173: LD_ADDR_VAR 0 7
81177: PUSH
81178: LD_VAR 0 2
81182: PUSH
81183: LD_VAR 0 3
81187: MINUS
81188: ST_TO_ADDR
// max_x := x + r ;
81189: LD_ADDR_VAR 0 9
81193: PUSH
81194: LD_VAR 0 1
81198: PUSH
81199: LD_VAR 0 3
81203: PLUS
81204: ST_TO_ADDR
// max_y := y + r ;
81205: LD_ADDR_VAR 0 10
81209: PUSH
81210: LD_VAR 0 2
81214: PUSH
81215: LD_VAR 0 3
81219: PLUS
81220: ST_TO_ADDR
// for _x = min_x to max_x do
81221: LD_ADDR_VAR 0 5
81225: PUSH
81226: DOUBLE
81227: LD_VAR 0 8
81231: DEC
81232: ST_TO_ADDR
81233: LD_VAR 0 9
81237: PUSH
81238: FOR_TO
81239: IFFALSE 81340
// for _y = min_y to max_y do
81241: LD_ADDR_VAR 0 6
81245: PUSH
81246: DOUBLE
81247: LD_VAR 0 7
81251: DEC
81252: ST_TO_ADDR
81253: LD_VAR 0 10
81257: PUSH
81258: FOR_TO
81259: IFFALSE 81336
// begin if not ValidHex ( _x , _y ) then
81261: LD_VAR 0 5
81265: PPUSH
81266: LD_VAR 0 6
81270: PPUSH
81271: CALL_OW 488
81275: NOT
81276: IFFALSE 81280
// continue ;
81278: GO 81258
// if GetResourceTypeXY ( _x , _y ) then
81280: LD_VAR 0 5
81284: PPUSH
81285: LD_VAR 0 6
81289: PPUSH
81290: CALL_OW 283
81294: IFFALSE 81334
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81296: LD_ADDR_VAR 0 4
81300: PUSH
81301: LD_VAR 0 4
81305: PPUSH
81306: LD_VAR 0 4
81310: PUSH
81311: LD_INT 1
81313: PLUS
81314: PPUSH
81315: LD_VAR 0 5
81319: PUSH
81320: LD_VAR 0 6
81324: PUSH
81325: EMPTY
81326: LIST
81327: LIST
81328: PPUSH
81329: CALL_OW 1
81333: ST_TO_ADDR
// end ;
81334: GO 81258
81336: POP
81337: POP
81338: GO 81238
81340: POP
81341: POP
// end ;
81342: LD_VAR 0 4
81346: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81347: LD_INT 0
81349: PPUSH
81350: PPUSH
81351: PPUSH
81352: PPUSH
81353: PPUSH
81354: PPUSH
81355: PPUSH
81356: PPUSH
// if not units then
81357: LD_VAR 0 1
81361: NOT
81362: IFFALSE 81366
// exit ;
81364: GO 81898
// result := UnitFilter ( units , [ f_ok ] ) ;
81366: LD_ADDR_VAR 0 3
81370: PUSH
81371: LD_VAR 0 1
81375: PPUSH
81376: LD_INT 50
81378: PUSH
81379: EMPTY
81380: LIST
81381: PPUSH
81382: CALL_OW 72
81386: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81387: LD_ADDR_VAR 0 8
81391: PUSH
81392: LD_VAR 0 1
81396: PUSH
81397: LD_INT 1
81399: ARRAY
81400: PPUSH
81401: CALL_OW 255
81405: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81406: LD_ADDR_VAR 0 10
81410: PUSH
81411: LD_INT 29
81413: PUSH
81414: LD_INT 91
81416: PUSH
81417: LD_INT 49
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: LIST
81424: ST_TO_ADDR
// if not result then
81425: LD_VAR 0 3
81429: NOT
81430: IFFALSE 81434
// exit ;
81432: GO 81898
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81434: LD_ADDR_VAR 0 5
81438: PUSH
81439: LD_INT 81
81441: PUSH
81442: LD_VAR 0 8
81446: PUSH
81447: EMPTY
81448: LIST
81449: LIST
81450: PPUSH
81451: CALL_OW 69
81455: ST_TO_ADDR
// for i in result do
81456: LD_ADDR_VAR 0 4
81460: PUSH
81461: LD_VAR 0 3
81465: PUSH
81466: FOR_IN
81467: IFFALSE 81896
// begin tag := GetTag ( i ) + 1 ;
81469: LD_ADDR_VAR 0 9
81473: PUSH
81474: LD_VAR 0 4
81478: PPUSH
81479: CALL_OW 110
81483: PUSH
81484: LD_INT 1
81486: PLUS
81487: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81488: LD_ADDR_VAR 0 7
81492: PUSH
81493: LD_VAR 0 4
81497: PPUSH
81498: CALL_OW 250
81502: PPUSH
81503: LD_VAR 0 4
81507: PPUSH
81508: CALL_OW 251
81512: PPUSH
81513: LD_INT 4
81515: PPUSH
81516: CALL 81089 0 3
81520: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81521: LD_VAR 0 4
81525: PPUSH
81526: CALL_OW 247
81530: PUSH
81531: LD_INT 2
81533: EQUAL
81534: IFFALSE 81546
81536: PUSH
81537: LD_VAR 0 7
81541: PUSH
81542: LD_INT 2
81544: GREATER
81545: AND
81546: IFFALSE 81566
81548: PUSH
81549: LD_VAR 0 4
81553: PPUSH
81554: CALL_OW 264
81558: PUSH
81559: LD_VAR 0 10
81563: IN
81564: NOT
81565: AND
81566: IFFALSE 81605
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81568: LD_VAR 0 4
81572: PPUSH
81573: LD_VAR 0 7
81577: PUSH
81578: LD_INT 1
81580: ARRAY
81581: PUSH
81582: LD_INT 1
81584: ARRAY
81585: PPUSH
81586: LD_VAR 0 7
81590: PUSH
81591: LD_INT 1
81593: ARRAY
81594: PUSH
81595: LD_INT 2
81597: ARRAY
81598: PPUSH
81599: CALL_OW 116
81603: GO 81894
// if path > tag then
81605: LD_VAR 0 2
81609: PUSH
81610: LD_VAR 0 9
81614: GREATER
81615: IFFALSE 81823
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81617: LD_ADDR_VAR 0 6
81621: PUSH
81622: LD_VAR 0 5
81626: PPUSH
81627: LD_INT 91
81629: PUSH
81630: LD_VAR 0 4
81634: PUSH
81635: LD_INT 8
81637: PUSH
81638: EMPTY
81639: LIST
81640: LIST
81641: LIST
81642: PPUSH
81643: CALL_OW 72
81647: ST_TO_ADDR
// if nearEnemy then
81648: LD_VAR 0 6
81652: IFFALSE 81721
// begin if GetWeapon ( i ) = ru_time_lapser then
81654: LD_VAR 0 4
81658: PPUSH
81659: CALL_OW 264
81663: PUSH
81664: LD_INT 49
81666: EQUAL
81667: IFFALSE 81695
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81669: LD_VAR 0 4
81673: PPUSH
81674: LD_VAR 0 6
81678: PPUSH
81679: LD_VAR 0 4
81683: PPUSH
81684: CALL_OW 74
81688: PPUSH
81689: CALL_OW 112
81693: GO 81719
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81695: LD_VAR 0 4
81699: PPUSH
81700: LD_VAR 0 6
81704: PPUSH
81705: LD_VAR 0 4
81709: PPUSH
81710: CALL_OW 74
81714: PPUSH
81715: CALL 82979 0 2
// end else
81719: GO 81821
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81721: LD_VAR 0 4
81725: PPUSH
81726: LD_VAR 0 2
81730: PUSH
81731: LD_VAR 0 9
81735: ARRAY
81736: PUSH
81737: LD_INT 1
81739: ARRAY
81740: PPUSH
81741: LD_VAR 0 2
81745: PUSH
81746: LD_VAR 0 9
81750: ARRAY
81751: PUSH
81752: LD_INT 2
81754: ARRAY
81755: PPUSH
81756: CALL_OW 297
81760: PUSH
81761: LD_INT 6
81763: GREATER
81764: IFFALSE 81807
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81766: LD_VAR 0 4
81770: PPUSH
81771: LD_VAR 0 2
81775: PUSH
81776: LD_VAR 0 9
81780: ARRAY
81781: PUSH
81782: LD_INT 1
81784: ARRAY
81785: PPUSH
81786: LD_VAR 0 2
81790: PUSH
81791: LD_VAR 0 9
81795: ARRAY
81796: PUSH
81797: LD_INT 2
81799: ARRAY
81800: PPUSH
81801: CALL_OW 114
81805: GO 81821
// SetTag ( i , tag ) ;
81807: LD_VAR 0 4
81811: PPUSH
81812: LD_VAR 0 9
81816: PPUSH
81817: CALL_OW 109
// end else
81821: GO 81894
// if enemy then
81823: LD_VAR 0 5
81827: IFFALSE 81894
// begin if GetWeapon ( i ) = ru_time_lapser then
81829: LD_VAR 0 4
81833: PPUSH
81834: CALL_OW 264
81838: PUSH
81839: LD_INT 49
81841: EQUAL
81842: IFFALSE 81870
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81844: LD_VAR 0 4
81848: PPUSH
81849: LD_VAR 0 5
81853: PPUSH
81854: LD_VAR 0 4
81858: PPUSH
81859: CALL_OW 74
81863: PPUSH
81864: CALL_OW 112
81868: GO 81894
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81870: LD_VAR 0 4
81874: PPUSH
81875: LD_VAR 0 5
81879: PPUSH
81880: LD_VAR 0 4
81884: PPUSH
81885: CALL_OW 74
81889: PPUSH
81890: CALL 82979 0 2
// end ; end ;
81894: GO 81466
81896: POP
81897: POP
// end ;
81898: LD_VAR 0 3
81902: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81903: LD_INT 0
81905: PPUSH
81906: PPUSH
81907: PPUSH
// if not unit or IsInUnit ( unit ) then
81908: LD_VAR 0 1
81912: NOT
81913: IFTRUE 81926
81915: PUSH
81916: LD_VAR 0 1
81920: PPUSH
81921: CALL_OW 310
81925: OR
81926: IFFALSE 81930
// exit ;
81928: GO 82021
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81930: LD_ADDR_VAR 0 4
81934: PUSH
81935: LD_VAR 0 1
81939: PPUSH
81940: CALL_OW 250
81944: PPUSH
81945: LD_VAR 0 2
81949: PPUSH
81950: LD_INT 1
81952: PPUSH
81953: CALL_OW 272
81957: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81958: LD_ADDR_VAR 0 5
81962: PUSH
81963: LD_VAR 0 1
81967: PPUSH
81968: CALL_OW 251
81972: PPUSH
81973: LD_VAR 0 2
81977: PPUSH
81978: LD_INT 1
81980: PPUSH
81981: CALL_OW 273
81985: ST_TO_ADDR
// if ValidHex ( x , y ) then
81986: LD_VAR 0 4
81990: PPUSH
81991: LD_VAR 0 5
81995: PPUSH
81996: CALL_OW 488
82000: IFFALSE 82021
// ComTurnXY ( unit , x , y ) ;
82002: LD_VAR 0 1
82006: PPUSH
82007: LD_VAR 0 4
82011: PPUSH
82012: LD_VAR 0 5
82016: PPUSH
82017: CALL_OW 118
// end ;
82021: LD_VAR 0 3
82025: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82026: LD_INT 0
82028: PPUSH
82029: PPUSH
// result := false ;
82030: LD_ADDR_VAR 0 3
82034: PUSH
82035: LD_INT 0
82037: ST_TO_ADDR
// if not units then
82038: LD_VAR 0 2
82042: NOT
82043: IFFALSE 82047
// exit ;
82045: GO 82092
// for i in units do
82047: LD_ADDR_VAR 0 4
82051: PUSH
82052: LD_VAR 0 2
82056: PUSH
82057: FOR_IN
82058: IFFALSE 82090
// if See ( side , i ) then
82060: LD_VAR 0 1
82064: PPUSH
82065: LD_VAR 0 4
82069: PPUSH
82070: CALL_OW 292
82074: IFFALSE 82088
// begin result := true ;
82076: LD_ADDR_VAR 0 3
82080: PUSH
82081: LD_INT 1
82083: ST_TO_ADDR
// exit ;
82084: POP
82085: POP
82086: GO 82092
// end ;
82088: GO 82057
82090: POP
82091: POP
// end ;
82092: LD_VAR 0 3
82096: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82097: LD_INT 0
82099: PPUSH
82100: PPUSH
82101: PPUSH
82102: PPUSH
// if not unit or not points then
82103: LD_VAR 0 1
82107: NOT
82108: IFTRUE 82117
82110: PUSH
82111: LD_VAR 0 2
82115: NOT
82116: OR
82117: IFFALSE 82121
// exit ;
82119: GO 82211
// dist := 99999 ;
82121: LD_ADDR_VAR 0 5
82125: PUSH
82126: LD_INT 99999
82128: ST_TO_ADDR
// for i in points do
82129: LD_ADDR_VAR 0 4
82133: PUSH
82134: LD_VAR 0 2
82138: PUSH
82139: FOR_IN
82140: IFFALSE 82209
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82142: LD_ADDR_VAR 0 6
82146: PUSH
82147: LD_VAR 0 1
82151: PPUSH
82152: LD_VAR 0 4
82156: PUSH
82157: LD_INT 1
82159: ARRAY
82160: PPUSH
82161: LD_VAR 0 4
82165: PUSH
82166: LD_INT 2
82168: ARRAY
82169: PPUSH
82170: CALL_OW 297
82174: ST_TO_ADDR
// if tmpDist < dist then
82175: LD_VAR 0 6
82179: PUSH
82180: LD_VAR 0 5
82184: LESS
82185: IFFALSE 82207
// begin result := i ;
82187: LD_ADDR_VAR 0 3
82191: PUSH
82192: LD_VAR 0 4
82196: ST_TO_ADDR
// dist := tmpDist ;
82197: LD_ADDR_VAR 0 5
82201: PUSH
82202: LD_VAR 0 6
82206: ST_TO_ADDR
// end ; end ;
82207: GO 82139
82209: POP
82210: POP
// end ;
82211: LD_VAR 0 3
82215: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82216: LD_INT 0
82218: PPUSH
// uc_side := side ;
82219: LD_ADDR_OWVAR 20
82223: PUSH
82224: LD_VAR 0 1
82228: ST_TO_ADDR
// uc_nation := 3 ;
82229: LD_ADDR_OWVAR 21
82233: PUSH
82234: LD_INT 3
82236: ST_TO_ADDR
// vc_chassis := 25 ;
82237: LD_ADDR_OWVAR 37
82241: PUSH
82242: LD_INT 25
82244: ST_TO_ADDR
// vc_engine := engine_siberite ;
82245: LD_ADDR_OWVAR 39
82249: PUSH
82250: LD_INT 3
82252: ST_TO_ADDR
// vc_control := control_computer ;
82253: LD_ADDR_OWVAR 38
82257: PUSH
82258: LD_INT 3
82260: ST_TO_ADDR
// vc_weapon := 59 ;
82261: LD_ADDR_OWVAR 40
82265: PUSH
82266: LD_INT 59
82268: ST_TO_ADDR
// result := CreateVehicle ;
82269: LD_ADDR_VAR 0 5
82273: PUSH
82274: CALL_OW 45
82278: ST_TO_ADDR
// SetDir ( result , d ) ;
82279: LD_VAR 0 5
82283: PPUSH
82284: LD_VAR 0 4
82288: PPUSH
82289: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82293: LD_VAR 0 5
82297: PPUSH
82298: LD_VAR 0 2
82302: PPUSH
82303: LD_VAR 0 3
82307: PPUSH
82308: LD_INT 0
82310: PPUSH
82311: CALL_OW 48
// end ;
82315: LD_VAR 0 5
82319: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82320: LD_INT 0
82322: PPUSH
82323: PPUSH
82324: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82325: LD_ADDR_VAR 0 2
82329: PUSH
82330: LD_INT 0
82332: PUSH
82333: LD_INT 0
82335: PUSH
82336: LD_INT 0
82338: PUSH
82339: LD_INT 0
82341: PUSH
82342: EMPTY
82343: LIST
82344: LIST
82345: LIST
82346: LIST
82347: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82348: LD_VAR 0 1
82352: NOT
82353: IFTRUE 82386
82355: PUSH
82356: LD_VAR 0 1
82360: PPUSH
82361: CALL_OW 264
82365: PUSH
82366: LD_INT 12
82368: PUSH
82369: LD_INT 51
82371: PUSH
82372: LD_INT 32
82374: PUSH
82375: LD_INT 89
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: LIST
82382: LIST
82383: IN
82384: NOT
82385: OR
82386: IFFALSE 82390
// exit ;
82388: GO 82488
// for i := 1 to 3 do
82390: LD_ADDR_VAR 0 3
82394: PUSH
82395: DOUBLE
82396: LD_INT 1
82398: DEC
82399: ST_TO_ADDR
82400: LD_INT 3
82402: PUSH
82403: FOR_TO
82404: IFFALSE 82486
// begin tmp := GetCargo ( cargo , i ) ;
82406: LD_ADDR_VAR 0 4
82410: PUSH
82411: LD_VAR 0 1
82415: PPUSH
82416: LD_VAR 0 3
82420: PPUSH
82421: CALL_OW 289
82425: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82426: LD_ADDR_VAR 0 2
82430: PUSH
82431: LD_VAR 0 2
82435: PPUSH
82436: LD_VAR 0 3
82440: PPUSH
82441: LD_VAR 0 4
82445: PPUSH
82446: CALL_OW 1
82450: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82451: LD_ADDR_VAR 0 2
82455: PUSH
82456: LD_VAR 0 2
82460: PPUSH
82461: LD_INT 4
82463: PPUSH
82464: LD_VAR 0 2
82468: PUSH
82469: LD_INT 4
82471: ARRAY
82472: PUSH
82473: LD_VAR 0 4
82477: PLUS
82478: PPUSH
82479: CALL_OW 1
82483: ST_TO_ADDR
// end ;
82484: GO 82403
82486: POP
82487: POP
// end ;
82488: LD_VAR 0 2
82492: RET
// export function Length ( array ) ; begin
82493: LD_INT 0
82495: PPUSH
// result := array + 0 ;
82496: LD_ADDR_VAR 0 2
82500: PUSH
82501: LD_VAR 0 1
82505: PUSH
82506: LD_INT 0
82508: PLUS
82509: ST_TO_ADDR
// end ;
82510: LD_VAR 0 2
82514: RET
// export function PrepareArray ( array ) ; begin
82515: LD_INT 0
82517: PPUSH
// result := array diff 0 ;
82518: LD_ADDR_VAR 0 2
82522: PUSH
82523: LD_VAR 0 1
82527: PUSH
82528: LD_INT 0
82530: DIFF
82531: ST_TO_ADDR
// if not result [ 1 ] then
82532: LD_VAR 0 2
82536: PUSH
82537: LD_INT 1
82539: ARRAY
82540: NOT
82541: IFFALSE 82561
// result := Delete ( result , 1 ) ;
82543: LD_ADDR_VAR 0 2
82547: PUSH
82548: LD_VAR 0 2
82552: PPUSH
82553: LD_INT 1
82555: PPUSH
82556: CALL_OW 3
82560: ST_TO_ADDR
// end ;
82561: LD_VAR 0 2
82565: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82566: LD_INT 0
82568: PPUSH
82569: PPUSH
82570: PPUSH
82571: PPUSH
// sibRocketRange := 25 ;
82572: LD_ADDR_VAR 0 6
82576: PUSH
82577: LD_INT 25
82579: ST_TO_ADDR
// result := false ;
82580: LD_ADDR_VAR 0 4
82584: PUSH
82585: LD_INT 0
82587: ST_TO_ADDR
// for i := 0 to 5 do
82588: LD_ADDR_VAR 0 5
82592: PUSH
82593: DOUBLE
82594: LD_INT 0
82596: DEC
82597: ST_TO_ADDR
82598: LD_INT 5
82600: PUSH
82601: FOR_TO
82602: IFFALSE 82669
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82604: LD_VAR 0 1
82608: PPUSH
82609: LD_VAR 0 5
82613: PPUSH
82614: LD_VAR 0 6
82618: PPUSH
82619: CALL_OW 272
82623: PPUSH
82624: LD_VAR 0 2
82628: PPUSH
82629: LD_VAR 0 5
82633: PPUSH
82634: LD_VAR 0 6
82638: PPUSH
82639: CALL_OW 273
82643: PPUSH
82644: LD_VAR 0 3
82648: PPUSH
82649: CALL_OW 309
82653: IFFALSE 82667
// begin result := true ;
82655: LD_ADDR_VAR 0 4
82659: PUSH
82660: LD_INT 1
82662: ST_TO_ADDR
// exit ;
82663: POP
82664: POP
82665: GO 82671
// end ;
82667: GO 82601
82669: POP
82670: POP
// end ;
82671: LD_VAR 0 4
82675: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82676: LD_INT 0
82678: PPUSH
82679: PPUSH
82680: PPUSH
// if btype = b_depot then
82681: LD_VAR 0 2
82685: PUSH
82686: LD_INT 0
82688: EQUAL
82689: IFFALSE 82701
// begin result := true ;
82691: LD_ADDR_VAR 0 3
82695: PUSH
82696: LD_INT 1
82698: ST_TO_ADDR
// exit ;
82699: GO 82821
// end ; pom := GetBase ( depot ) ;
82701: LD_ADDR_VAR 0 4
82705: PUSH
82706: LD_VAR 0 1
82710: PPUSH
82711: CALL_OW 274
82715: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82716: LD_ADDR_VAR 0 5
82720: PUSH
82721: LD_VAR 0 2
82725: PPUSH
82726: LD_VAR 0 1
82730: PPUSH
82731: CALL_OW 248
82735: PPUSH
82736: CALL_OW 450
82740: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82741: LD_ADDR_VAR 0 3
82745: PUSH
82746: LD_VAR 0 4
82750: PPUSH
82751: LD_INT 1
82753: PPUSH
82754: CALL_OW 275
82758: PUSH
82759: LD_VAR 0 5
82763: PUSH
82764: LD_INT 1
82766: ARRAY
82767: GREATEREQUAL
82768: IFFALSE 82794
82770: PUSH
82771: LD_VAR 0 4
82775: PPUSH
82776: LD_INT 2
82778: PPUSH
82779: CALL_OW 275
82783: PUSH
82784: LD_VAR 0 5
82788: PUSH
82789: LD_INT 2
82791: ARRAY
82792: GREATEREQUAL
82793: AND
82794: IFFALSE 82820
82796: PUSH
82797: LD_VAR 0 4
82801: PPUSH
82802: LD_INT 3
82804: PPUSH
82805: CALL_OW 275
82809: PUSH
82810: LD_VAR 0 5
82814: PUSH
82815: LD_INT 3
82817: ARRAY
82818: GREATEREQUAL
82819: AND
82820: ST_TO_ADDR
// end ;
82821: LD_VAR 0 3
82825: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82826: LD_INT 0
82828: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82829: LD_VAR 0 1
82833: PPUSH
82834: LD_VAR 0 2
82838: PPUSH
82839: LD_INT 0
82841: PPUSH
82842: LD_INT 0
82844: PPUSH
82845: LD_INT 1
82847: PPUSH
82848: LD_INT 0
82850: PPUSH
82851: CALL_OW 587
// end ;
82855: LD_VAR 0 3
82859: RET
// export function CenterOnNow ( unit ) ; begin
82860: LD_INT 0
82862: PPUSH
// result := IsInUnit ( unit ) ;
82863: LD_ADDR_VAR 0 2
82867: PUSH
82868: LD_VAR 0 1
82872: PPUSH
82873: CALL_OW 310
82877: ST_TO_ADDR
// if not result then
82878: LD_VAR 0 2
82882: NOT
82883: IFFALSE 82895
// result := unit ;
82885: LD_ADDR_VAR 0 2
82889: PUSH
82890: LD_VAR 0 1
82894: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82895: LD_VAR 0 1
82899: PPUSH
82900: CALL_OW 87
// end ;
82904: LD_VAR 0 2
82908: RET
// export function ComMoveHex ( unit , hex ) ; begin
82909: LD_INT 0
82911: PPUSH
// if not hex then
82912: LD_VAR 0 2
82916: NOT
82917: IFFALSE 82921
// exit ;
82919: GO 82974
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82921: LD_VAR 0 2
82925: PUSH
82926: LD_INT 1
82928: ARRAY
82929: PPUSH
82930: LD_VAR 0 2
82934: PUSH
82935: LD_INT 2
82937: ARRAY
82938: PPUSH
82939: CALL_OW 428
82943: IFFALSE 82947
// exit ;
82945: GO 82974
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82947: LD_VAR 0 1
82951: PPUSH
82952: LD_VAR 0 2
82956: PUSH
82957: LD_INT 1
82959: ARRAY
82960: PPUSH
82961: LD_VAR 0 2
82965: PUSH
82966: LD_INT 2
82968: ARRAY
82969: PPUSH
82970: CALL_OW 111
// end ;
82974: LD_VAR 0 3
82978: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82979: LD_INT 0
82981: PPUSH
82982: PPUSH
82983: PPUSH
// if not unit or not enemy then
82984: LD_VAR 0 1
82988: NOT
82989: IFTRUE 82998
82991: PUSH
82992: LD_VAR 0 2
82996: NOT
82997: OR
82998: IFFALSE 83002
// exit ;
83000: GO 83128
// x := GetX ( enemy ) ;
83002: LD_ADDR_VAR 0 4
83006: PUSH
83007: LD_VAR 0 2
83011: PPUSH
83012: CALL_OW 250
83016: ST_TO_ADDR
// y := GetY ( enemy ) ;
83017: LD_ADDR_VAR 0 5
83021: PUSH
83022: LD_VAR 0 2
83026: PPUSH
83027: CALL_OW 251
83031: ST_TO_ADDR
// if ValidHex ( x , y ) then
83032: LD_VAR 0 4
83036: PPUSH
83037: LD_VAR 0 5
83041: PPUSH
83042: CALL_OW 488
83046: IFFALSE 83128
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83048: LD_VAR 0 2
83052: PPUSH
83053: CALL_OW 247
83057: PUSH
83058: LD_INT 3
83060: PUSH
83061: LD_INT 2
83063: PUSH
83064: EMPTY
83065: LIST
83066: LIST
83067: IN
83068: IFTRUE 83091
83070: PUSH
83071: LD_VAR 0 1
83075: PPUSH
83076: CALL_OW 255
83080: PPUSH
83081: LD_VAR 0 2
83085: PPUSH
83086: CALL_OW 292
83090: OR
83091: IFFALSE 83109
// ComAttackUnit ( unit , enemy ) else
83093: LD_VAR 0 1
83097: PPUSH
83098: LD_VAR 0 2
83102: PPUSH
83103: CALL_OW 115
83107: GO 83128
// ComAgressiveMove ( unit , x , y ) ;
83109: LD_VAR 0 1
83113: PPUSH
83114: LD_VAR 0 4
83118: PPUSH
83119: LD_VAR 0 5
83123: PPUSH
83124: CALL_OW 114
// end ;
83128: LD_VAR 0 3
83132: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83133: LD_INT 0
83135: PPUSH
83136: PPUSH
83137: PPUSH
// list := AreaToList ( area , 0 ) ;
83138: LD_ADDR_VAR 0 5
83142: PUSH
83143: LD_VAR 0 1
83147: PPUSH
83148: LD_INT 0
83150: PPUSH
83151: CALL_OW 517
83155: ST_TO_ADDR
// if not list then
83156: LD_VAR 0 5
83160: NOT
83161: IFFALSE 83165
// exit ;
83163: GO 83295
// if all then
83165: LD_VAR 0 2
83169: IFFALSE 83257
// begin for i := 1 to list [ 1 ] do
83171: LD_ADDR_VAR 0 4
83175: PUSH
83176: DOUBLE
83177: LD_INT 1
83179: DEC
83180: ST_TO_ADDR
83181: LD_VAR 0 5
83185: PUSH
83186: LD_INT 1
83188: ARRAY
83189: PUSH
83190: FOR_TO
83191: IFFALSE 83253
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83193: LD_ADDR_VAR 0 3
83197: PUSH
83198: LD_VAR 0 3
83202: PPUSH
83203: LD_VAR 0 3
83207: PUSH
83208: LD_INT 1
83210: PLUS
83211: PPUSH
83212: LD_VAR 0 5
83216: PUSH
83217: LD_INT 1
83219: ARRAY
83220: PUSH
83221: LD_VAR 0 4
83225: ARRAY
83226: PUSH
83227: LD_VAR 0 5
83231: PUSH
83232: LD_INT 2
83234: ARRAY
83235: PUSH
83236: LD_VAR 0 4
83240: ARRAY
83241: PUSH
83242: EMPTY
83243: LIST
83244: LIST
83245: PPUSH
83246: CALL_OW 1
83250: ST_TO_ADDR
83251: GO 83190
83253: POP
83254: POP
// exit ;
83255: GO 83295
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83257: LD_ADDR_VAR 0 3
83261: PUSH
83262: LD_VAR 0 5
83266: PUSH
83267: LD_INT 1
83269: ARRAY
83270: PUSH
83271: LD_INT 1
83273: ARRAY
83274: PUSH
83275: LD_VAR 0 5
83279: PUSH
83280: LD_INT 2
83282: ARRAY
83283: PUSH
83284: LD_INT 1
83286: ARRAY
83287: PUSH
83288: EMPTY
83289: LIST
83290: LIST
83291: PUSH
83292: EMPTY
83293: LIST
83294: ST_TO_ADDR
// end ;
83295: LD_VAR 0 3
83299: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83300: LD_INT 0
83302: PPUSH
83303: PPUSH
// list := AreaToList ( area , 0 ) ;
83304: LD_ADDR_VAR 0 4
83308: PUSH
83309: LD_VAR 0 1
83313: PPUSH
83314: LD_INT 0
83316: PPUSH
83317: CALL_OW 517
83321: ST_TO_ADDR
// if not list then
83322: LD_VAR 0 4
83326: NOT
83327: IFFALSE 83331
// exit ;
83329: GO 83372
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83331: LD_ADDR_VAR 0 3
83335: PUSH
83336: LD_VAR 0 4
83340: PUSH
83341: LD_INT 1
83343: ARRAY
83344: PUSH
83345: LD_INT 1
83347: ARRAY
83348: PUSH
83349: LD_VAR 0 4
83353: PUSH
83354: LD_INT 2
83356: ARRAY
83357: PUSH
83358: LD_INT 1
83360: ARRAY
83361: PUSH
83362: LD_VAR 0 2
83366: PUSH
83367: EMPTY
83368: LIST
83369: LIST
83370: LIST
83371: ST_TO_ADDR
// end ;
83372: LD_VAR 0 3
83376: RET
// export function First ( array ) ; begin
83377: LD_INT 0
83379: PPUSH
// if not array then
83380: LD_VAR 0 1
83384: NOT
83385: IFFALSE 83389
// exit ;
83387: GO 83403
// result := array [ 1 ] ;
83389: LD_ADDR_VAR 0 2
83393: PUSH
83394: LD_VAR 0 1
83398: PUSH
83399: LD_INT 1
83401: ARRAY
83402: ST_TO_ADDR
// end ;
83403: LD_VAR 0 2
83407: RET
// export function Last ( array ) ; begin
83408: LD_INT 0
83410: PPUSH
// if not array then
83411: LD_VAR 0 1
83415: NOT
83416: IFFALSE 83420
// exit ;
83418: GO 83436
// result := array [ array ] ;
83420: LD_ADDR_VAR 0 2
83424: PUSH
83425: LD_VAR 0 1
83429: PUSH
83430: LD_VAR 0 1
83434: ARRAY
83435: ST_TO_ADDR
// end ;
83436: LD_VAR 0 2
83440: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83441: LD_INT 0
83443: PPUSH
83444: PPUSH
// result := [ ] ;
83445: LD_ADDR_VAR 0 5
83449: PUSH
83450: EMPTY
83451: ST_TO_ADDR
// if not array then
83452: LD_VAR 0 1
83456: NOT
83457: IFFALSE 83461
// exit ;
83459: GO 83573
// for i := 1 to array do
83461: LD_ADDR_VAR 0 6
83465: PUSH
83466: DOUBLE
83467: LD_INT 1
83469: DEC
83470: ST_TO_ADDR
83471: LD_VAR 0 1
83475: PUSH
83476: FOR_TO
83477: IFFALSE 83571
// if array [ i ] [ index ] = value then
83479: LD_VAR 0 1
83483: PUSH
83484: LD_VAR 0 6
83488: ARRAY
83489: PUSH
83490: LD_VAR 0 2
83494: ARRAY
83495: PUSH
83496: LD_VAR 0 3
83500: EQUAL
83501: IFFALSE 83569
// begin if indexColumn then
83503: LD_VAR 0 4
83507: IFFALSE 83543
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83509: LD_ADDR_VAR 0 5
83513: PUSH
83514: LD_VAR 0 5
83518: PPUSH
83519: LD_VAR 0 1
83523: PUSH
83524: LD_VAR 0 6
83528: ARRAY
83529: PUSH
83530: LD_VAR 0 4
83534: ARRAY
83535: PPUSH
83536: CALL 78581 0 2
83540: ST_TO_ADDR
83541: GO 83569
// result := Join ( result , array [ i ] ) ;
83543: LD_ADDR_VAR 0 5
83547: PUSH
83548: LD_VAR 0 5
83552: PPUSH
83553: LD_VAR 0 1
83557: PUSH
83558: LD_VAR 0 6
83562: ARRAY
83563: PPUSH
83564: CALL 78581 0 2
83568: ST_TO_ADDR
// end ;
83569: GO 83476
83571: POP
83572: POP
// end ;
83573: LD_VAR 0 5
83577: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83578: LD_INT 0
83580: PPUSH
// if not vehicles or not parkingPoint then
83581: LD_VAR 0 1
83585: NOT
83586: IFTRUE 83595
83588: PUSH
83589: LD_VAR 0 2
83593: NOT
83594: OR
83595: IFFALSE 83599
// exit ;
83597: GO 83697
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83599: LD_ADDR_VAR 0 1
83603: PUSH
83604: LD_VAR 0 1
83608: PPUSH
83609: LD_INT 50
83611: PUSH
83612: EMPTY
83613: LIST
83614: PUSH
83615: LD_INT 3
83617: PUSH
83618: LD_INT 92
83620: PUSH
83621: LD_VAR 0 2
83625: PUSH
83626: LD_INT 1
83628: ARRAY
83629: PUSH
83630: LD_VAR 0 2
83634: PUSH
83635: LD_INT 2
83637: ARRAY
83638: PUSH
83639: LD_INT 8
83641: PUSH
83642: EMPTY
83643: LIST
83644: LIST
83645: LIST
83646: LIST
83647: PUSH
83648: EMPTY
83649: LIST
83650: LIST
83651: PUSH
83652: EMPTY
83653: LIST
83654: LIST
83655: PPUSH
83656: CALL_OW 72
83660: ST_TO_ADDR
// if not vehicles then
83661: LD_VAR 0 1
83665: NOT
83666: IFFALSE 83670
// exit ;
83668: GO 83697
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83670: LD_VAR 0 1
83674: PPUSH
83675: LD_VAR 0 2
83679: PUSH
83680: LD_INT 1
83682: ARRAY
83683: PPUSH
83684: LD_VAR 0 2
83688: PUSH
83689: LD_INT 2
83691: ARRAY
83692: PPUSH
83693: CALL_OW 111
// end ;
83697: LD_VAR 0 3
83701: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83702: LD_INT 0
83704: PPUSH
83705: PPUSH
83706: PPUSH
// if not side or not area then
83707: LD_VAR 0 1
83711: NOT
83712: IFTRUE 83721
83714: PUSH
83715: LD_VAR 0 2
83719: NOT
83720: OR
83721: IFFALSE 83725
// exit ;
83723: GO 83844
// tmp := AreaToList ( area , 0 ) ;
83725: LD_ADDR_VAR 0 5
83729: PUSH
83730: LD_VAR 0 2
83734: PPUSH
83735: LD_INT 0
83737: PPUSH
83738: CALL_OW 517
83742: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83743: LD_ADDR_VAR 0 4
83747: PUSH
83748: DOUBLE
83749: LD_INT 1
83751: DEC
83752: ST_TO_ADDR
83753: LD_VAR 0 5
83757: PUSH
83758: LD_INT 1
83760: ARRAY
83761: PUSH
83762: FOR_TO
83763: IFFALSE 83842
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83765: LD_VAR 0 5
83769: PUSH
83770: LD_INT 1
83772: ARRAY
83773: PUSH
83774: LD_VAR 0 4
83778: ARRAY
83779: PPUSH
83780: LD_VAR 0 5
83784: PUSH
83785: LD_INT 2
83787: ARRAY
83788: PUSH
83789: LD_VAR 0 4
83793: ARRAY
83794: PPUSH
83795: CALL_OW 351
83799: IFFALSE 83840
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83801: LD_VAR 0 5
83805: PUSH
83806: LD_INT 1
83808: ARRAY
83809: PUSH
83810: LD_VAR 0 4
83814: ARRAY
83815: PPUSH
83816: LD_VAR 0 5
83820: PUSH
83821: LD_INT 2
83823: ARRAY
83824: PUSH
83825: LD_VAR 0 4
83829: ARRAY
83830: PPUSH
83831: LD_VAR 0 1
83835: PPUSH
83836: CALL_OW 244
// end ;
83840: GO 83762
83842: POP
83843: POP
// end ;
83844: LD_VAR 0 3
83848: RET
// export function UniqueArray ( array ) ; var i ; begin
83849: LD_INT 0
83851: PPUSH
83852: PPUSH
// result := [ ] ;
83853: LD_ADDR_VAR 0 2
83857: PUSH
83858: EMPTY
83859: ST_TO_ADDR
// if not array then
83860: LD_VAR 0 1
83864: NOT
83865: IFFALSE 83869
// exit ;
83867: GO 83930
// for i := 1 to array do
83869: LD_ADDR_VAR 0 3
83873: PUSH
83874: DOUBLE
83875: LD_INT 1
83877: DEC
83878: ST_TO_ADDR
83879: LD_VAR 0 1
83883: PUSH
83884: FOR_TO
83885: IFFALSE 83928
// if not array [ i ] in result then
83887: LD_VAR 0 1
83891: PUSH
83892: LD_VAR 0 3
83896: ARRAY
83897: PUSH
83898: LD_VAR 0 2
83902: IN
83903: NOT
83904: IFFALSE 83926
// result := Join ( result , i ) ;
83906: LD_ADDR_VAR 0 2
83910: PUSH
83911: LD_VAR 0 2
83915: PPUSH
83916: LD_VAR 0 3
83920: PPUSH
83921: CALL 78581 0 2
83925: ST_TO_ADDR
83926: GO 83884
83928: POP
83929: POP
// end ; end_of_file
83930: LD_VAR 0 2
83934: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83935: LD_VAR 0 1
83939: PPUSH
83940: LD_VAR 0 2
83944: PPUSH
83945: LD_VAR 0 3
83949: PPUSH
83950: LD_VAR 0 4
83954: PPUSH
83955: LD_VAR 0 5
83959: PPUSH
83960: LD_VAR 0 6
83964: PPUSH
83965: CALL 18152 0 6
// end ;
83969: PPOPN 6
83971: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83972: LD_INT 0
83974: PPUSH
// begin if not units then
83975: LD_VAR 0 1
83979: NOT
83980: IFFALSE 83984
// exit ;
83982: GO 84018
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
83984: LD_VAR 0 1
83988: PPUSH
83989: LD_VAR 0 2
83993: PPUSH
83994: LD_VAR 0 3
83998: PPUSH
83999: LD_VAR 0 4
84003: PPUSH
84004: LD_VAR 0 5
84008: PPUSH
84009: LD_VAR 0 6
84013: PPUSH
84014: CALL 40398 0 6
// end ;
84018: PPOPN 7
84020: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84021: CALL 18039 0 0
// end ;
84025: PPOPN 1
84027: END
