// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 861 0 0
// PrepareArabian ;
  12: CALL 1237 0 0
// PrepareAmerican ;
  16: CALL 6832 0 0
// PrepareRussian ;
  20: CALL 2225 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8402 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: IFTRUE 573
 566: PUSH
 567: LD_VAR 0 2
 571: NOT
 572: OR
 573: IFFALSE 577
// exit ;
 575: GO 625
// if not See ( GetSide ( observer ) , unit ) then
 577: LD_VAR 0 1
 581: PPUSH
 582: CALL_OW 255
 586: PPUSH
 587: LD_VAR 0 2
 591: PPUSH
 592: CALL_OW 292
 596: NOT
 597: IFFALSE 601
// exit ;
 599: GO 625
// result := GetDistUnits ( observer , unit ) < 12 ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: LD_VAR 0 1
 610: PPUSH
 611: LD_VAR 0 2
 615: PPUSH
 616: CALL_OW 296
 620: PUSH
 621: LD_INT 12
 623: LESS
 624: ST_TO_ADDR
// end ;
 625: LD_VAR 0 3
 629: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 630: LD_INT 0
 632: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 633: LD_VAR 0 2
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: PPUSH
 642: LD_VAR 0 2
 646: PUSH
 647: LD_INT 2
 649: ARRAY
 650: PPUSH
 651: CALL_OW 488
 655: IFFALSE 685
 657: PUSH
 658: LD_VAR 0 2
 662: PUSH
 663: LD_INT 1
 665: ARRAY
 666: PPUSH
 667: LD_VAR 0 2
 671: PUSH
 672: LD_INT 2
 674: ARRAY
 675: PPUSH
 676: CALL_OW 428
 680: PUSH
 681: LD_INT 0
 683: EQUAL
 684: AND
 685: IFFALSE 719
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 687: LD_VAR 0 1
 691: PPUSH
 692: LD_VAR 0 2
 696: PUSH
 697: LD_INT 1
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 2
 705: PUSH
 706: LD_INT 2
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 3
 714: PPUSH
 715: CALL_OW 48
// end ;
 719: LD_VAR 0 4
 723: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
// InitUc ;
 728: CALL_OW 18
// InitHc ;
 732: CALL_OW 19
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i = 1 to amount do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_VAR 0 2
 766: PUSH
 767: FOR_TO
 768: IFFALSE 850
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 770: LD_ADDR_OWVAR 29
 774: PUSH
 775: LD_INT 9
 777: PPUSH
 778: LD_INT 12
 780: PPUSH
 781: CALL_OW 12
 785: PUSH
 786: LD_INT 9
 788: PPUSH
 789: LD_INT 12
 791: PPUSH
 792: CALL_OW 12
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 801: LD_ADDR_OWVAR 35
 805: PUSH
 806: LD_INT 1
 808: NEG
 809: PPUSH
 810: LD_INT 1
 812: PPUSH
 813: CALL_OW 12
 817: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 818: LD_INT 0
 820: PPUSH
 821: LD_INT 12
 823: PPUSH
 824: LD_INT 1
 826: PPUSH
 827: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 831: CALL_OW 44
 835: PPUSH
 836: LD_VAR 0 1
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL_OW 49
// end ;
 848: GO 767
 850: POP
 851: POP
// InitHc ;
 852: CALL_OW 19
// end ;
 856: LD_VAR 0 3
 860: RET
// export function CreateNature ; var i ; begin
 861: LD_INT 0
 863: PPUSH
 864: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 865: LD_INT 18
 867: PPUSH
 868: LD_INT 5
 870: PUSH
 871: LD_INT 4
 873: PUSH
 874: LD_INT 3
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_OWVAR 67
 890: ARRAY
 891: PPUSH
 892: CALL 724 0 2
// for i := 1 to 3 do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: DOUBLE
 902: LD_INT 1
 904: DEC
 905: ST_TO_ADDR
 906: LD_INT 3
 908: PUSH
 909: FOR_TO
 910: IFFALSE 945
// begin hc_class := 21 ;
 912: LD_ADDR_OWVAR 28
 916: PUSH
 917: LD_INT 21
 919: ST_TO_ADDR
// hc_gallery :=  ;
 920: LD_ADDR_OWVAR 33
 924: PUSH
 925: LD_STRING 
 927: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 928: CALL_OW 44
 932: PPUSH
 933: LD_INT 18
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ;
 943: GO 909
 945: POP
 946: POP
// for i := 1 to 2 do
 947: LD_ADDR_VAR 0 2
 951: PUSH
 952: DOUBLE
 953: LD_INT 1
 955: DEC
 956: ST_TO_ADDR
 957: LD_INT 2
 959: PUSH
 960: FOR_TO
 961: IFFALSE 996
// begin hc_class := 18 ;
 963: LD_ADDR_OWVAR 28
 967: PUSH
 968: LD_INT 18
 970: ST_TO_ADDR
// hc_gallery :=  ;
 971: LD_ADDR_OWVAR 33
 975: PUSH
 976: LD_STRING 
 978: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 979: CALL_OW 44
 983: PPUSH
 984: LD_INT 18
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: GO 960
 996: POP
 997: POP
// for i := 1 to 2 do
 998: LD_ADDR_VAR 0 2
1002: PUSH
1003: DOUBLE
1004: LD_INT 1
1006: DEC
1007: ST_TO_ADDR
1008: LD_INT 2
1010: PUSH
1011: FOR_TO
1012: IFFALSE 1047
// begin hc_class := 13 ;
1014: LD_ADDR_OWVAR 28
1018: PUSH
1019: LD_INT 13
1021: ST_TO_ADDR
// hc_gallery :=  ;
1022: LD_ADDR_OWVAR 33
1026: PUSH
1027: LD_STRING 
1029: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1030: CALL_OW 44
1034: PPUSH
1035: LD_INT 18
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end ;
1045: GO 1011
1047: POP
1048: POP
// end ;
1049: LD_VAR 0 1
1053: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1054: LD_INT 0
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
1060: PPUSH
// result := false ;
1061: LD_ADDR_VAR 0 4
1065: PUSH
1066: LD_INT 0
1068: ST_TO_ADDR
// if not sideList or not enemySide then
1069: LD_VAR 0 1
1073: NOT
1074: IFTRUE 1083
1076: PUSH
1077: LD_VAR 0 2
1081: NOT
1082: OR
1083: IFFALSE 1087
// exit ;
1085: GO 1232
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1087: LD_ADDR_VAR 0 7
1091: PUSH
1092: LD_INT 22
1094: PUSH
1095: LD_VAR 0 2
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PPUSH
1104: CALL_OW 69
1108: ST_TO_ADDR
// if not tmp then
1109: LD_VAR 0 7
1113: NOT
1114: IFFALSE 1118
// exit ;
1116: GO 1232
// for s in sideList do
1118: LD_ADDR_VAR 0 6
1122: PUSH
1123: LD_VAR 0 1
1127: PUSH
1128: FOR_IN
1129: IFFALSE 1230
// for i in tmp do
1131: LD_ADDR_VAR 0 5
1135: PUSH
1136: LD_VAR 0 7
1140: PUSH
1141: FOR_IN
1142: IFFALSE 1226
// if See ( s , i ) then
1144: LD_VAR 0 6
1148: PPUSH
1149: LD_VAR 0 5
1153: PPUSH
1154: CALL_OW 292
1158: IFFALSE 1224
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1160: LD_ADDR_VAR 0 8
1164: PUSH
1165: LD_INT 22
1167: PUSH
1168: LD_VAR 0 6
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PPUSH
1177: CALL_OW 69
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL_OW 74
1191: ST_TO_ADDR
// if tmp2 in exceptUnits then
1192: LD_VAR 0 8
1196: PUSH
1197: LD_VAR 0 3
1201: IN
1202: IFFALSE 1208
// continue else
1204: GO 1141
1206: GO 1224
// begin result := tmp2 ;
1208: LD_ADDR_VAR 0 4
1212: PUSH
1213: LD_VAR 0 8
1217: ST_TO_ADDR
// exit ;
1218: POP
1219: POP
1220: POP
1221: POP
1222: GO 1232
// end ; end ;
1224: GO 1141
1226: POP
1227: POP
1228: GO 1128
1230: POP
1231: POP
// end ; end_of_file
1232: LD_VAR 0 4
1236: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
// if cargoRecycled then
1241: LD_EXP 25
1245: IFFALSE 1273
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1247: LD_INT 82
1249: PPUSH
1250: LD_INT 2
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1260: LD_INT 83
1262: PPUSH
1263: LD_INT 2
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: CALL_OW 322
// end ; uc_side := 5 ;
1273: LD_ADDR_OWVAR 20
1277: PUSH
1278: LD_INT 5
1280: ST_TO_ADDR
// uc_nation := 2 ;
1281: LD_ADDR_OWVAR 21
1285: PUSH
1286: LD_INT 2
1288: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1289: LD_ADDR_EXP 37
1293: PUSH
1294: LD_STRING Abdul
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: LD_STRING 
1302: PPUSH
1303: CALL 40811 0 3
1307: ST_TO_ADDR
// uc_side := 2 ;
1308: LD_ADDR_OWVAR 20
1312: PUSH
1313: LD_INT 2
1315: ST_TO_ADDR
// uc_nation := 2 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 2
1323: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1324: LD_ADDR_EXP 26
1328: PUSH
1329: LD_STRING Heike
1331: PPUSH
1332: LD_EXP 1
1336: NOT
1337: PPUSH
1338: LD_EXP 2
1342: PPUSH
1343: CALL 40811 0 3
1347: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1348: LD_ADDR_EXP 29
1352: PUSH
1353: LD_STRING Ibrahim
1355: PPUSH
1356: LD_EXP 1
1360: NOT
1361: PPUSH
1362: LD_EXP 2
1366: PPUSH
1367: CALL 40811 0 3
1371: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1372: LD_ADDR_EXP 27
1376: PUSH
1377: LD_STRING Givi
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 40811 0 3
1395: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1396: LD_ADDR_EXP 30
1400: PUSH
1401: LD_STRING Kamil
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 40811 0 3
1419: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1420: LD_ADDR_EXP 31
1424: PUSH
1425: LD_STRING Kaia
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 40811 0 3
1443: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1444: LD_ADDR_EXP 32
1448: PUSH
1449: LD_STRING Sophia
1451: PPUSH
1452: LD_EXP 1
1456: NOT
1457: PPUSH
1458: LD_EXP 2
1462: PPUSH
1463: CALL 40811 0 3
1467: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1468: LD_ADDR_EXP 33
1472: PUSH
1473: LD_STRING Markov
1475: PPUSH
1476: LD_EXP 1
1480: NOT
1481: PPUSH
1482: LD_EXP 2
1486: PPUSH
1487: CALL 40811 0 3
1491: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1492: LD_ADDR_EXP 36
1496: PUSH
1497: LD_STRING Aviradze
1499: PPUSH
1500: LD_EXP 1
1504: NOT
1505: PPUSH
1506: LD_EXP 2
1510: PPUSH
1511: CALL 40811 0 3
1515: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1516: LD_ADDR_EXP 40
1520: PUSH
1521: EMPTY
1522: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1523: LD_ADDR_EXP 38
1527: PUSH
1528: LD_STRING 03_others
1530: PPUSH
1531: CALL_OW 31
1535: ST_TO_ADDR
// uc_side := 5 ;
1536: LD_ADDR_OWVAR 20
1540: PUSH
1541: LD_INT 5
1543: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1544: LD_ADDR_EXP 35
1548: PUSH
1549: LD_STRING Kurt
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: LD_STRING 
1557: PPUSH
1558: CALL 40811 0 3
1562: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1563: LD_ADDR_EXP 28
1567: PUSH
1568: LD_STRING Mike
1570: PPUSH
1571: LD_EXP 1
1575: NOT
1576: PPUSH
1577: LD_EXP 2
1581: PPUSH
1582: CALL 40811 0 3
1586: ST_TO_ADDR
// if Mike then
1587: LD_EXP 28
1591: IFFALSE 1614
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1593: LD_EXP 28
1597: PPUSH
1598: LD_INT 142
1600: PPUSH
1601: LD_INT 63
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1614: LD_EXP 35
1618: PPUSH
1619: LD_INT 142
1621: PPUSH
1622: LD_INT 63
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1635: LD_EXP 35
1639: PUSH
1640: LD_EXP 28
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 140
// end ;
1653: LD_VAR 0 1
1657: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
// uc_side := 5 ;
1664: LD_ADDR_OWVAR 20
1668: PUSH
1669: LD_INT 5
1671: ST_TO_ADDR
// uc_nation := 2 ;
1672: LD_ADDR_OWVAR 21
1676: PUSH
1677: LD_INT 2
1679: ST_TO_ADDR
// InitHc ;
1680: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1684: LD_ADDR_EXP 34
1688: PUSH
1689: LD_STRING Omar
1691: PPUSH
1692: LD_INT 0
1694: PPUSH
1695: LD_STRING 
1697: PPUSH
1698: CALL 40811 0 3
1702: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1703: LD_EXP 34
1707: PPUSH
1708: LD_INT 284
1710: PPUSH
1711: LD_INT 163
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1721: LD_EXP 34
1725: PPUSH
1726: LD_INT 256
1728: PPUSH
1729: LD_INT 129
1731: PPUSH
1732: CALL_OW 111
// wait ( 0 0$2 ) ;
1736: LD_INT 70
1738: PPUSH
1739: CALL_OW 67
// omarSquad := [ ] ;
1743: LD_ADDR_EXP 39
1747: PUSH
1748: EMPTY
1749: ST_TO_ADDR
// for i := 1 to 5 do
1750: LD_ADDR_VAR 0 2
1754: PUSH
1755: DOUBLE
1756: LD_INT 1
1758: DEC
1759: ST_TO_ADDR
1760: LD_INT 5
1762: PUSH
1763: FOR_TO
1764: IFFALSE 1970
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1766: LD_INT 5
1768: PPUSH
1769: LD_INT 2
1771: PPUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 14
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: LD_VAR 0 2
1786: PUSH
1787: LD_INT 2
1789: MOD
1790: PUSH
1791: LD_INT 1
1793: PLUS
1794: ARRAY
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 25
1804: PUSH
1805: LD_INT 27
1807: PUSH
1808: LD_INT 26
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: LD_VAR 0 2
1820: PUSH
1821: LD_INT 3
1823: MOD
1824: PUSH
1825: LD_INT 1
1827: PLUS
1828: ARRAY
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 386 0 7
// veh := CreateVehicle ;
1837: LD_ADDR_VAR 0 4
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// omarSquad := omarSquad union veh ;
1859: LD_ADDR_EXP 39
1863: PUSH
1864: LD_EXP 39
1868: PUSH
1869: LD_VAR 0 4
1873: UNION
1874: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1875: LD_VAR 0 4
1879: PPUSH
1880: LD_INT 284
1882: PPUSH
1883: LD_INT 163
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_INT 3
1898: PPUSH
1899: LD_INT 2
1901: PPUSH
1902: CALL_OW 380
// un := CreateHuman ;
1906: LD_ADDR_VAR 0 3
1910: PUSH
1911: CALL_OW 44
1915: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1916: LD_ADDR_EXP 39
1920: PUSH
1921: LD_EXP 39
1925: PUSH
1926: LD_VAR 0 3
1930: UNION
1931: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1932: LD_VAR 0 3
1936: PPUSH
1937: LD_VAR 0 4
1941: PPUSH
1942: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1946: LD_VAR 0 3
1950: PPUSH
1951: LD_INT 271
1953: PPUSH
1954: LD_INT 144
1956: PPUSH
1957: CALL_OW 111
// wait ( 0 0$2 ) ;
1961: LD_INT 70
1963: PPUSH
1964: CALL_OW 67
// end ;
1968: GO 1763
1970: POP
1971: POP
// for i := 1 to 3 do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_INT 3
1984: PUSH
1985: FOR_TO
1986: IFFALSE 2069
// begin PrepareHuman ( false , 1 , 2 ) ;
1988: LD_INT 0
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 2
1996: PPUSH
1997: CALL_OW 380
// un := CreateHuman ;
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: CALL_OW 44
2010: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2011: LD_ADDR_EXP 39
2015: PUSH
2016: LD_EXP 39
2020: PUSH
2021: LD_VAR 0 3
2025: UNION
2026: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_INT 284
2034: PPUSH
2035: LD_INT 163
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 257
2052: PPUSH
2053: LD_INT 138
2055: PPUSH
2056: CALL_OW 111
// wait ( 0 0$1 ) ;
2060: LD_INT 35
2062: PPUSH
2063: CALL_OW 67
// end ;
2067: GO 1985
2069: POP
2070: POP
// for i := 1 to 6 do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: DOUBLE
2077: LD_INT 1
2079: DEC
2080: ST_TO_ADDR
2081: LD_INT 6
2083: PUSH
2084: FOR_TO
2085: IFFALSE 2218
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2087: LD_INT 0
2089: PPUSH
2090: LD_INT 1
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: LD_INT 4
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_VAR 0 2
2108: PUSH
2109: LD_INT 3
2111: MOD
2112: PUSH
2113: LD_INT 1
2115: PLUS
2116: ARRAY
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: CALL_OW 380
// un := CreateHuman ;
2125: LD_ADDR_VAR 0 3
2129: PUSH
2130: CALL_OW 44
2134: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2135: LD_ADDR_EXP 39
2139: PUSH
2140: LD_EXP 39
2144: PUSH
2145: LD_VAR 0 3
2149: UNION
2150: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2151: LD_VAR 0 3
2155: PPUSH
2156: LD_INT 225
2158: PPUSH
2159: LD_INT 163
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// if i = 1 then
2169: LD_VAR 0 2
2173: PUSH
2174: LD_INT 1
2176: EQUAL
2177: IFFALSE 2194
// SetAttr ( un , attr_speed , 12 ) ;
2179: LD_VAR 0 3
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: LD_INT 12
2189: PPUSH
2190: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2194: LD_VAR 0 3
2198: PPUSH
2199: LD_INT 222
2201: PPUSH
2202: LD_INT 157
2204: PPUSH
2205: CALL_OW 111
// wait ( 0 0$1 ) ;
2209: LD_INT 35
2211: PPUSH
2212: CALL_OW 67
// end ;
2216: GO 2084
2218: POP
2219: POP
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 149
2238: PPUSH
2239: LD_INT 67
2241: PPUSH
2242: CALL_OW 428
2246: PPUSH
2247: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2251: LD_ADDR_EXP 51
2255: PUSH
2256: LD_INT 111
2258: PPUSH
2259: LD_INT 89
2261: PPUSH
2262: CALL_OW 428
2266: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: LD_INT 21
2274: PUSH
2275: LD_INT 3
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 23
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: FOR_IN
2302: IFFALSE 2318
// SetBLevel ( i , 5 ) ;
2304: LD_VAR 0 2
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 241
2316: GO 2301
2318: POP
2319: POP
// SetBName ( kirov , kirov ) ;
2320: LD_INT 71
2322: PPUSH
2323: LD_STRING kirov
2325: PPUSH
2326: CALL_OW 500
// SetBName ( beria , beria ) ;
2330: LD_INT 106
2332: PPUSH
2333: LD_STRING beria
2335: PPUSH
2336: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2340: LD_INT 112
2342: PPUSH
2343: LD_STRING kagan
2345: PPUSH
2346: CALL_OW 500
// uc_side := 6 ;
2350: LD_ADDR_OWVAR 20
2354: PUSH
2355: LD_INT 6
2357: ST_TO_ADDR
// uc_nation := 3 ;
2358: LD_ADDR_OWVAR 21
2362: PUSH
2363: LD_INT 3
2365: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2366: LD_ADDR_VAR 0 5
2370: PUSH
2371: LD_INT 22
2373: PUSH
2374: LD_INT 6
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 30
2383: PUSH
2384: LD_INT 5
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: PPUSH
2395: CALL_OW 69
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: LD_INT 22
2411: PUSH
2412: LD_INT 6
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 4
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PPUSH
2433: CALL_OW 69
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2442: LD_ADDR_EXP 45
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2449: LD_ADDR_EXP 46
2453: PUSH
2454: EMPTY
2455: ST_TO_ADDR
// russianPatrol := [ ] ;
2456: LD_ADDR_EXP 48
2460: PUSH
2461: EMPTY
2462: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2463: LD_ADDR_EXP 41
2467: PUSH
2468: LD_STRING Kurin
2470: PPUSH
2471: LD_INT 0
2473: PPUSH
2474: LD_STRING 
2476: PPUSH
2477: CALL 40811 0 3
2481: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2482: LD_EXP 41
2486: PPUSH
2487: LD_INT 71
2489: PPUSH
2490: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2494: LD_ADDR_EXP 43
2498: PUSH
2499: LD_STRING Popov
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: LD_STRING 
2507: PPUSH
2508: CALL 40811 0 3
2512: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2513: LD_EXP 43
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2525: LD_ADDR_EXP 42
2529: PUSH
2530: LD_STRING Grishko
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: LD_STRING 
2538: PPUSH
2539: CALL 40811 0 3
2543: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2544: LD_EXP 42
2548: PPUSH
2549: LD_INT 207
2551: PPUSH
2552: LD_INT 106
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2562: LD_EXP 42
2566: PPUSH
2567: LD_INT 209
2569: PPUSH
2570: LD_INT 106
2572: PPUSH
2573: CALL_OW 118
// for i := 1 to 2 do
2577: LD_ADDR_VAR 0 2
2581: PUSH
2582: DOUBLE
2583: LD_INT 1
2585: DEC
2586: ST_TO_ADDR
2587: LD_INT 2
2589: PUSH
2590: FOR_TO
2591: IFFALSE 2646
// begin PrepareHuman ( false , 2 , 2 ) ;
2593: LD_INT 0
2595: PPUSH
2596: LD_INT 2
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 380
// un := CreateHuman ;
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: CALL_OW 44
2615: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 71
2623: PPUSH
2624: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2628: LD_ADDR_EXP 45
2632: PUSH
2633: LD_EXP 45
2637: PUSH
2638: LD_VAR 0 3
2642: UNION
2643: ST_TO_ADDR
// end ;
2644: GO 2590
2646: POP
2647: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2648: LD_ADDR_VAR 0 2
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 5
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: LD_INT 6
2666: PUSH
2667: LD_INT 6
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: PUSH
2676: LD_OWVAR 67
2680: ARRAY
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2761
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 1
2690: PPUSH
2691: LD_INT 2
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: LD_INT 4
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_OWVAR 67
2713: ARRAY
2714: PPUSH
2715: CALL_OW 380
// un := CreateHuman ;
2719: LD_ADDR_VAR 0 3
2723: PUSH
2724: CALL_OW 44
2728: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2729: LD_VAR 0 3
2733: PPUSH
2734: LD_VAR 0 5
2738: PPUSH
2739: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2743: LD_ADDR_EXP 45
2747: PUSH
2748: LD_EXP 45
2752: PUSH
2753: LD_VAR 0 3
2757: UNION
2758: ST_TO_ADDR
// end ;
2759: GO 2682
2761: POP
2762: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2763: LD_ADDR_VAR 0 2
2767: PUSH
2768: LD_INT 22
2770: PUSH
2771: LD_INT 6
2773: PUSH
2774: EMPTY
2775: LIST
2776: LIST
2777: PUSH
2778: LD_INT 30
2780: PUSH
2781: LD_INT 32
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PUSH
2797: FOR_IN
2798: IFFALSE 2876
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2800: LD_INT 0
2802: PPUSH
2803: LD_INT 1
2805: PPUSH
2806: LD_INT 3
2808: PUSH
2809: LD_INT 4
2811: PUSH
2812: LD_INT 4
2814: PUSH
2815: LD_INT 5
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: LD_OWVAR 67
2828: ARRAY
2829: PPUSH
2830: CALL_OW 380
// un := CreateHuman ;
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: CALL_OW 44
2843: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2844: LD_VAR 0 3
2848: PPUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2858: LD_ADDR_EXP 45
2862: PUSH
2863: LD_EXP 45
2867: PUSH
2868: LD_VAR 0 3
2872: UNION
2873: ST_TO_ADDR
// end ;
2874: GO 2797
2876: POP
2877: POP
// for i := 1 to 3 do
2878: LD_ADDR_VAR 0 2
2882: PUSH
2883: DOUBLE
2884: LD_INT 1
2886: DEC
2887: ST_TO_ADDR
2888: LD_INT 3
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2947
// begin PrepareHuman ( false , 3 , 3 ) ;
2894: LD_INT 0
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: LD_INT 3
2902: PPUSH
2903: CALL_OW 380
// un := CreateHuman ;
2907: LD_ADDR_VAR 0 3
2911: PUSH
2912: CALL_OW 44
2916: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 92
2924: PPUSH
2925: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2929: LD_ADDR_EXP 45
2933: PUSH
2934: LD_EXP 45
2938: PUSH
2939: LD_VAR 0 3
2943: UNION
2944: ST_TO_ADDR
// end ;
2945: GO 2891
2947: POP
2948: POP
// for i := 1 to 2 do
2949: LD_ADDR_VAR 0 2
2953: PUSH
2954: DOUBLE
2955: LD_INT 1
2957: DEC
2958: ST_TO_ADDR
2959: LD_INT 2
2961: PUSH
2962: FOR_TO
2963: IFFALSE 3018
// begin PrepareHuman ( false , 4 , 3 ) ;
2965: LD_INT 0
2967: PPUSH
2968: LD_INT 4
2970: PPUSH
2971: LD_INT 3
2973: PPUSH
2974: CALL_OW 380
// un := CreateHuman ;
2978: LD_ADDR_VAR 0 3
2982: PUSH
2983: CALL_OW 44
2987: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 83
2995: PPUSH
2996: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3000: LD_ADDR_EXP 45
3004: PUSH
3005: LD_EXP 45
3009: PUSH
3010: LD_VAR 0 3
3014: UNION
3015: ST_TO_ADDR
// end ;
3016: GO 2962
3018: POP
3019: POP
// for i := 1 to 5 do
3020: LD_ADDR_VAR 0 2
3024: PUSH
3025: DOUBLE
3026: LD_INT 1
3028: DEC
3029: ST_TO_ADDR
3030: LD_INT 5
3032: PUSH
3033: FOR_TO
3034: IFFALSE 3091
// begin PrepareHuman ( false , 1 , 3 ) ;
3036: LD_INT 0
3038: PPUSH
3039: LD_INT 1
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3059: LD_VAR 0 3
3063: PPUSH
3064: LD_VAR 0 4
3068: PPUSH
3069: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3073: LD_ADDR_EXP 47
3077: PUSH
3078: LD_EXP 47
3082: PUSH
3083: LD_VAR 0 3
3087: UNION
3088: ST_TO_ADDR
// end ;
3089: GO 3033
3091: POP
3092: POP
// russianCargo := [ ] ;
3093: LD_ADDR_EXP 50
3097: PUSH
3098: EMPTY
3099: ST_TO_ADDR
// for i := 1 to 2 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: DOUBLE
3106: LD_INT 1
3108: DEC
3109: ST_TO_ADDR
3110: LD_INT 2
3112: PUSH
3113: FOR_TO
3114: IFFALSE 3246
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3116: LD_INT 6
3118: PPUSH
3119: LD_INT 3
3121: PPUSH
3122: LD_INT 21
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 51
3133: PPUSH
3134: LD_INT 100
3136: PPUSH
3137: CALL 386 0 7
// un := CreateVehicle ;
3141: LD_ADDR_VAR 0 3
3145: PUSH
3146: CALL_OW 45
3150: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3151: LD_ADDR_EXP 50
3155: PUSH
3156: LD_EXP 50
3160: PUSH
3161: LD_VAR 0 3
3165: UNION
3166: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 2
3174: PPUSH
3175: LD_INT 100
3177: PPUSH
3178: CALL_OW 290
// SetDir ( un , 4 ) ;
3182: LD_VAR 0 3
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3194: LD_VAR 0 3
3198: PPUSH
3199: LD_INT 147
3201: PPUSH
3202: LD_INT 103
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 0
3210: PPUSH
3211: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3215: LD_INT 0
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_OWVAR 67
3225: PPUSH
3226: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3230: CALL_OW 44
3234: PPUSH
3235: LD_VAR 0 3
3239: PPUSH
3240: CALL_OW 52
// end ;
3244: GO 3113
3246: POP
3247: POP
// uc_side := 3 ;
3248: LD_ADDR_OWVAR 20
3252: PUSH
3253: LD_INT 3
3255: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3256: LD_ADDR_EXP 44
3260: PUSH
3261: LD_STRING Burlak
3263: PPUSH
3264: LD_INT 0
3266: PPUSH
3267: LD_STRING 
3269: PPUSH
3270: CALL 40811 0 3
3274: ST_TO_ADDR
// for i := 1 to 5 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 5
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3382
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3291: LD_INT 0
3293: PPUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_OWVAR 67
3301: PUSH
3302: LD_INT 1
3304: PLUS
3305: PPUSH
3306: CALL_OW 380
// un := CreateHuman ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: CALL_OW 44
3319: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3320: LD_VAR 0 3
3324: PPUSH
3325: LD_INT 22
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 30
3337: PUSH
3338: LD_INT 32
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 69
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3364: LD_ADDR_EXP 46
3368: PUSH
3369: LD_EXP 46
3373: PUSH
3374: LD_VAR 0 3
3378: UNION
3379: ST_TO_ADDR
// end ;
3380: GO 3288
3382: POP
3383: POP
// for i := 1 to 2 do
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 2
3396: PUSH
3397: FOR_TO
3398: IFFALSE 3489
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_OWVAR 67
3410: PUSH
3411: LD_INT 1
3413: PLUS
3414: PPUSH
3415: CALL_OW 380
// un := CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: LD_INT 22
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 30
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PPUSH
3458: CALL_OW 69
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3471: LD_ADDR_EXP 46
3475: PUSH
3476: LD_EXP 46
3480: PUSH
3481: LD_VAR 0 3
3485: UNION
3486: ST_TO_ADDR
// end ;
3487: GO 3397
3489: POP
3490: POP
// for i := 1 to 2 do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 2
3503: PUSH
3504: FOR_TO
3505: IFFALSE 3592
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3507: LD_INT 0
3509: PPUSH
3510: LD_INT 4
3512: PPUSH
3513: LD_OWVAR 67
3517: PPUSH
3518: CALL_OW 380
// un := CreateHuman ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: CALL_OW 44
3531: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 22
3539: PUSH
3540: LD_INT 3
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: LD_INT 7
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PPUSH
3570: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3574: LD_ADDR_EXP 46
3578: PUSH
3579: LD_EXP 46
3583: PUSH
3584: LD_VAR 0 3
3588: UNION
3589: ST_TO_ADDR
// end ;
3590: GO 3504
3592: POP
3593: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3594: LD_INT 0
3596: PPUSH
3597: LD_INT 2
3599: PPUSH
3600: LD_OWVAR 67
3604: PPUSH
3605: CALL_OW 380
// un := CreateHuman ;
3609: LD_ADDR_VAR 0 3
3613: PUSH
3614: CALL_OW 44
3618: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3619: LD_VAR 0 3
3623: PPUSH
3624: LD_INT 106
3626: PPUSH
3627: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3631: LD_ADDR_EXP 46
3635: PUSH
3636: LD_EXP 46
3640: PUSH
3641: LD_VAR 0 3
3645: UNION
3646: ST_TO_ADDR
// for i := 1 to 3 do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 3
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3783
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3663: LD_ADDR_VAR 0 6
3667: PUSH
3668: LD_INT 22
3670: PUSH
3671: LD_INT 3
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 31
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3703: LD_INT 0
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_OWVAR 67
3713: PPUSH
3714: CALL_OW 380
// un := CreateHuman ;
3718: LD_ADDR_VAR 0 3
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3728: LD_VAR 0 3
3732: PPUSH
3733: LD_VAR 0 6
3737: PPUSH
3738: CALL_OW 254
3742: PUSH
3743: LD_INT 3
3745: PLUS
3746: PPUSH
3747: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3751: LD_VAR 0 3
3755: PPUSH
3756: LD_VAR 0 6
3760: PPUSH
3761: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3765: LD_ADDR_EXP 46
3769: PUSH
3770: LD_EXP 46
3774: PUSH
3775: LD_VAR 0 3
3779: UNION
3780: ST_TO_ADDR
// end ;
3781: GO 3660
3783: POP
3784: POP
// if Difficulty > 1 then
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 1
3792: GREATER
3793: IFFALSE 3868
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3795: LD_ADDR_VAR 0 3
3799: PUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_INT 3
3805: PPUSH
3806: LD_INT 23
3808: PPUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_INT 44
3817: PPUSH
3818: LD_INT 100
3820: PPUSH
3821: CALL 386 0 7
3825: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3826: LD_VAR 0 3
3830: PPUSH
3831: LD_INT 73
3833: PPUSH
3834: LD_INT 110
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3844: LD_INT 0
3846: PPUSH
3847: LD_INT 3
3849: PPUSH
3850: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3854: CALL_OW 44
3858: PPUSH
3859: LD_VAR 0 3
3863: PPUSH
3864: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3868: LD_ADDR_EXP 49
3872: PUSH
3873: EMPTY
3874: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3875: LD_ADDR_VAR 0 2
3879: PUSH
3880: DOUBLE
3881: LD_INT 1
3883: DEC
3884: ST_TO_ADDR
3885: LD_INT 6
3887: PUSH
3888: LD_INT 7
3890: PUSH
3891: LD_INT 8
3893: PUSH
3894: LD_INT 8
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: PUSH
3903: LD_OWVAR 67
3907: ARRAY
3908: PUSH
3909: FOR_TO
3910: IFFALSE 4134
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 3
3917: PPUSH
3918: LD_INT 21
3920: PUSH
3921: LD_INT 23
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: LD_VAR 0 2
3932: PUSH
3933: LD_INT 2
3935: MOD
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: ARRAY
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 43
3950: PUSH
3951: LD_INT 44
3953: PUSH
3954: LD_INT 42
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: PUSH
3962: LD_VAR 0 2
3966: PUSH
3967: LD_INT 3
3969: MOD
3970: PUSH
3971: LD_INT 1
3973: PLUS
3974: ARRAY
3975: PPUSH
3976: LD_INT 100
3978: PPUSH
3979: CALL 386 0 7
// un := CreateVehicle ;
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: CALL_OW 45
3992: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3993: LD_VAR 0 3
3997: PPUSH
3998: LD_INT 0
4000: PUSH
4001: LD_INT 5
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 1
4010: PPUSH
4011: LD_INT 2
4013: PPUSH
4014: CALL_OW 12
4018: ARRAY
4019: PPUSH
4020: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4024: LD_ADDR_EXP 49
4028: PUSH
4029: LD_EXP 49
4033: PUSH
4034: LD_VAR 0 3
4038: UNION
4039: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: LD_INT 127
4047: PPUSH
4048: LD_INT 89
4050: PPUSH
4051: LD_INT 7
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 50
// uc_side := 3 ;
4061: LD_ADDR_OWVAR 20
4065: PUSH
4066: LD_INT 3
4068: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4069: LD_INT 0
4071: PPUSH
4072: LD_INT 3
4074: PPUSH
4075: LD_INT 3
4077: PPUSH
4078: CALL_OW 380
// un := CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4092: LD_ADDR_EXP 49
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_VAR 0 3
4106: UNION
4107: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_EXP 49
4117: PUSH
4118: LD_EXP 49
4122: PUSH
4123: LD_INT 1
4125: MINUS
4126: ARRAY
4127: PPUSH
4128: CALL_OW 52
// end ;
4132: GO 3909
4134: POP
4135: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4136: LD_ADDR_VAR 0 2
4140: PUSH
4141: DOUBLE
4142: LD_INT 1
4144: DEC
4145: ST_TO_ADDR
4146: LD_INT 3
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: LD_INT 5
4154: PUSH
4155: LD_INT 6
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4237
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_OWVAR 67
4183: PPUSH
4184: CALL_OW 380
// un := CreateHuman ;
4188: LD_ADDR_VAR 0 3
4192: PUSH
4193: CALL_OW 44
4197: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4198: LD_ADDR_EXP 49
4202: PUSH
4203: LD_EXP 49
4207: PUSH
4208: LD_VAR 0 3
4212: UNION
4213: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4214: LD_VAR 0 3
4218: PPUSH
4219: LD_INT 91
4221: PPUSH
4222: LD_INT 60
4224: PPUSH
4225: LD_INT 3
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 50
// end ;
4235: GO 4170
4237: POP
4238: POP
// end ;
4239: LD_VAR 0 1
4243: RET
// every 0 0$3 do var i ;
4244: GO 4246
4246: DISABLE
4247: LD_INT 0
4249: PPUSH
// begin for i := 1 to 4 do
4250: LD_ADDR_VAR 0 1
4254: PUSH
4255: DOUBLE
4256: LD_INT 1
4258: DEC
4259: ST_TO_ADDR
4260: LD_INT 4
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4283
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4266: LD_EXP 47
4270: PUSH
4271: LD_VAR 0 1
4275: ARRAY
4276: PPUSH
4277: CALL_OW 122
4281: GO 4263
4283: POP
4284: POP
// wait ( 3 ) ;
4285: LD_INT 3
4287: PPUSH
4288: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4292: LD_EXP 47
4296: PUSH
4297: LD_INT 1
4299: ARRAY
4300: PPUSH
4301: LD_INT 22
4303: PUSH
4304: LD_INT 6
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 30
4313: PUSH
4314: LD_INT 31
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 69
4329: PPUSH
4330: LD_EXP 47
4334: PUSH
4335: LD_INT 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 74
4343: PPUSH
4344: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4348: LD_EXP 47
4352: PUSH
4353: LD_INT 2
4355: ARRAY
4356: PPUSH
4357: LD_INT 211
4359: PPUSH
4360: LD_INT 107
4362: PPUSH
4363: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4367: LD_EXP 47
4371: PUSH
4372: LD_INT 2
4374: ARRAY
4375: PPUSH
4376: LD_INT 209
4378: PPUSH
4379: LD_INT 106
4381: PPUSH
4382: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4386: LD_EXP 47
4390: PUSH
4391: LD_INT 3
4393: ARRAY
4394: PPUSH
4395: LD_INT 209
4397: PPUSH
4398: LD_INT 103
4400: PPUSH
4401: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4405: LD_EXP 47
4409: PUSH
4410: LD_INT 3
4412: ARRAY
4413: PPUSH
4414: LD_INT 209
4416: PPUSH
4417: LD_INT 106
4419: PPUSH
4420: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4424: LD_EXP 47
4428: PUSH
4429: LD_INT 4
4431: ARRAY
4432: PPUSH
4433: LD_INT 227
4435: PPUSH
4436: LD_INT 117
4438: PPUSH
4439: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4443: LD_EXP 47
4447: PUSH
4448: LD_INT 4
4450: ARRAY
4451: PPUSH
4452: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4456: LD_INT 700
4458: PPUSH
4459: CALL_OW 67
// for i := 3 downto 2 do
4463: LD_ADDR_VAR 0 1
4467: PUSH
4468: DOUBLE
4469: LD_INT 3
4471: INC
4472: ST_TO_ADDR
4473: LD_INT 2
4475: PUSH
4476: FOR_DOWNTO
4477: IFFALSE 4644
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4479: LD_EXP 47
4483: PUSH
4484: LD_VAR 0 1
4488: ARRAY
4489: PPUSH
4490: LD_INT 200
4492: PPUSH
4493: LD_INT 91
4495: PPUSH
4496: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4500: LD_EXP 47
4504: PUSH
4505: LD_VAR 0 1
4509: ARRAY
4510: PPUSH
4511: LD_INT 210
4513: PPUSH
4514: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4518: LD_EXP 47
4522: PUSH
4523: LD_VAR 0 1
4527: ARRAY
4528: PPUSH
4529: LD_INT 224
4531: PPUSH
4532: LD_INT 93
4534: PPUSH
4535: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4539: LD_EXP 47
4543: PUSH
4544: LD_VAR 0 1
4548: ARRAY
4549: PPUSH
4550: LD_INT 210
4552: PPUSH
4553: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4557: LD_EXP 47
4561: PUSH
4562: LD_VAR 0 1
4566: ARRAY
4567: PPUSH
4568: LD_INT 239
4570: PPUSH
4571: LD_INT 123
4573: PPUSH
4574: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4578: LD_EXP 47
4582: PUSH
4583: LD_VAR 0 1
4587: ARRAY
4588: PPUSH
4589: LD_INT 210
4591: PPUSH
4592: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4596: LD_EXP 47
4600: PUSH
4601: LD_VAR 0 1
4605: ARRAY
4606: PPUSH
4607: LD_INT 212
4609: PPUSH
4610: LD_INT 105
4612: PPUSH
4613: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4617: LD_EXP 47
4621: PUSH
4622: LD_VAR 0 1
4626: ARRAY
4627: PPUSH
4628: LD_INT 700
4630: PPUSH
4631: CALL_OW 202
// wait ( 0 0$30 ) ;
4635: LD_INT 1050
4637: PPUSH
4638: CALL_OW 67
// end ;
4642: GO 4476
4644: POP
4645: POP
// until not activeGrishkoAI ;
4646: LD_EXP 10
4650: NOT
4651: IFFALSE 4456
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_INT 221
4660: PPUSH
4661: LD_INT 110
4663: PPUSH
4664: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4668: LD_EXP 47
4672: PPUSH
4673: LD_INT 228
4675: PPUSH
4676: LD_INT 115
4678: PPUSH
4679: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4683: LD_EXP 47
4687: PPUSH
4688: CALL_OW 200
// end ;
4692: PPOPN 1
4694: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4695: LD_EXP 12
4699: IFFALSE 5449
4701: GO 4703
4703: DISABLE
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
// begin uc_side := 6 ;
4710: LD_ADDR_OWVAR 20
4714: PUSH
4715: LD_INT 6
4717: ST_TO_ADDR
// uc_nation := 3 ;
4718: LD_ADDR_OWVAR 21
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// for i := 1 to 3 do
4726: LD_ADDR_VAR 0 2
4730: PUSH
4731: DOUBLE
4732: LD_INT 1
4734: DEC
4735: ST_TO_ADDR
4736: LD_INT 3
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4853
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4742: LD_INT 0
4744: PPUSH
4745: LD_INT 1
4747: PPUSH
4748: LD_INT 2
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: LD_INT 4
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 1
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4786: LD_ADDR_EXP 48
4790: PUSH
4791: LD_EXP 48
4795: PUSH
4796: LD_VAR 0 1
4800: UNION
4801: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4814: LD_VAR 0 1
4818: PPUSH
4819: LD_INT 11
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4829: LD_VAR 0 1
4833: PPUSH
4834: LD_INT 210
4836: PPUSH
4837: LD_INT 159
4839: PPUSH
4840: CALL_OW 111
// wait ( 0 0$2 ) ;
4844: LD_INT 70
4846: PPUSH
4847: CALL_OW 67
// end ;
4851: GO 4739
4853: POP
4854: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4855: LD_ADDR_VAR 0 4
4859: PUSH
4860: LD_INT 172
4862: PUSH
4863: LD_INT 76
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 150
4872: PUSH
4873: LD_INT 38
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 148
4882: PUSH
4883: LD_INT 9
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 165
4892: PUSH
4893: LD_INT 38
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 191
4908: PUSH
4909: LD_INT 77
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 168
4918: PUSH
4919: LD_INT 42
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 166
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 151
4938: PUSH
4939: LD_INT 12
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 221
4954: PUSH
4955: LD_INT 88
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 217
4964: PUSH
4965: LD_INT 64
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 232
4974: PUSH
4975: LD_INT 66
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 200
4984: PUSH
4985: LD_INT 56
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// for i := russianPatrol downto 1 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_EXP 48
5020: INC
5021: ST_TO_ADDR
5022: LD_INT 1
5024: PUSH
5025: FOR_DOWNTO
5026: IFFALSE 5411
// begin if IsDead ( russianPatrol [ i ] ) then
5028: LD_EXP 48
5032: PUSH
5033: LD_VAR 0 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 301
5043: IFFALSE 5047
// continue ;
5045: GO 5025
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5047: LD_EXP 48
5051: PUSH
5052: LD_VAR 0 2
5056: ARRAY
5057: PPUSH
5058: CALL_OW 256
5062: PUSH
5063: LD_INT 990
5065: LESS
5066: IFFALSE 5089
5068: PUSH
5069: LD_EXP 48
5073: PUSH
5074: LD_VAR 0 2
5078: ARRAY
5079: PPUSH
5080: CALL_OW 110
5084: PUSH
5085: LD_INT 1
5087: EQUAL
5088: AND
5089: IFFALSE 5109
// SetTag ( russianPatrol [ i ] , 2 ) ;
5091: LD_EXP 48
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: PPUSH
5102: LD_INT 2
5104: PPUSH
5105: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5109: LD_EXP 48
5113: PUSH
5114: LD_VAR 0 2
5118: ARRAY
5119: PPUSH
5120: CALL_OW 110
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: IFFALSE 5195
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5130: LD_EXP 48
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_INT 166
5143: PPUSH
5144: LD_INT 101
5146: PPUSH
5147: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5151: LD_EXP 48
5155: PUSH
5156: LD_VAR 0 2
5160: ARRAY
5161: PPUSH
5162: LD_INT 71
5164: PPUSH
5165: CALL_OW 296
5169: PUSH
5170: LD_INT 10
5172: LESS
5173: IFFALSE 5193
// SetTag ( russianPatrol [ i ] , 3 ) ;
5175: LD_EXP 48
5179: PUSH
5180: LD_VAR 0 2
5184: ARRAY
5185: PPUSH
5186: LD_INT 3
5188: PPUSH
5189: CALL_OW 109
// continue ;
5193: GO 5025
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5195: LD_EXP 48
5199: PUSH
5200: LD_VAR 0 2
5204: ARRAY
5205: PPUSH
5206: CALL_OW 110
5210: PUSH
5211: LD_INT 3
5213: EQUAL
5214: IFFALSE 5309
// begin spottedByPatrol := true ;
5216: LD_ADDR_EXP 7
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5224: LD_EXP 48
5228: PUSH
5229: LD_VAR 0 2
5233: ARRAY
5234: PPUSH
5235: CALL_OW 250
5239: PPUSH
5240: LD_EXP 48
5244: PUSH
5245: LD_VAR 0 2
5249: ARRAY
5250: PPUSH
5251: CALL_OW 251
5255: PPUSH
5256: LD_INT 2
5258: PPUSH
5259: LD_INT 6
5261: NEG
5262: PPUSH
5263: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5267: LD_EXP 48
5271: PUSH
5272: LD_VAR 0 2
5276: ARRAY
5277: PPUSH
5278: CALL_OW 87
// DialogueOn ;
5282: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5286: LD_EXP 26
5290: PPUSH
5291: LD_STRING DH-Spot-f-3
5293: PPUSH
5294: CALL_OW 88
// DialogueOff ;
5298: CALL_OW 7
// YouLost ( Spotted ) ;
5302: LD_STRING Spotted
5304: PPUSH
5305: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5309: LD_EXP 48
5313: PUSH
5314: LD_VAR 0 2
5318: ARRAY
5319: PPUSH
5320: CALL_OW 314
5324: NOT
5325: IFFALSE 5409
// for j in patrol [ i ] do
5327: LD_ADDR_VAR 0 3
5331: PUSH
5332: LD_VAR 0 4
5336: PUSH
5337: LD_VAR 0 2
5341: ARRAY
5342: PUSH
5343: FOR_IN
5344: IFFALSE 5407
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5346: LD_EXP 48
5350: PUSH
5351: LD_VAR 0 2
5355: ARRAY
5356: PPUSH
5357: LD_INT 35
5359: PPUSH
5360: LD_INT 175
5362: PPUSH
5363: CALL_OW 12
5367: PPUSH
5368: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5372: LD_EXP 48
5376: PUSH
5377: LD_VAR 0 2
5381: ARRAY
5382: PPUSH
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 1
5390: ARRAY
5391: PPUSH
5392: LD_VAR 0 3
5396: PUSH
5397: LD_INT 2
5399: ARRAY
5400: PPUSH
5401: CALL_OW 174
// end ;
5405: GO 5343
5407: POP
5408: POP
// end ;
5409: GO 5025
5411: POP
5412: POP
// until not russianPatrol or russianAlert ;
5413: LD_EXP 48
5417: NOT
5418: IFTRUE 5426
5420: PUSH
5421: LD_EXP 9
5425: OR
5426: IFFALSE 5003
// if russianPatrol then
5428: LD_EXP 48
5432: IFFALSE 5449
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5434: LD_EXP 48
5438: PPUSH
5439: LD_INT 161
5441: PPUSH
5442: LD_INT 107
5444: PPUSH
5445: CALL_OW 114
// end ;
5449: PPOPN 4
5451: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5452: LD_EXP 6
5456: IFFALSE 5465
5458: PUSH
5459: LD_EXP 13
5463: NOT
5464: AND
5465: IFFALSE 5961
5467: GO 5469
5469: DISABLE
5470: LD_INT 0
5472: PPUSH
5473: PPUSH
5474: PPUSH
5475: PPUSH
5476: PPUSH
// begin enable ;
5477: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5478: LD_ADDR_VAR 0 2
5482: PUSH
5483: LD_EXP 49
5487: PPUSH
5488: LD_INT 21
5490: PUSH
5491: LD_INT 2
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 72
5502: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_INT 22
5510: PUSH
5511: LD_INT 4
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: PPUSH
5518: CALL_OW 69
5522: ST_TO_ADDR
// for i in filter do
5523: LD_ADDR_VAR 0 1
5527: PUSH
5528: LD_VAR 0 2
5532: PUSH
5533: FOR_IN
5534: IFFALSE 5959
// begin tmp := IsDrivenBy ( i ) ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 311
5550: ST_TO_ADDR
// if not tmp then
5551: LD_VAR 0 3
5555: NOT
5556: IFFALSE 5560
// continue ;
5558: GO 5533
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5560: LD_VAR 0 1
5564: PPUSH
5565: CALL_OW 261
5569: PUSH
5570: LD_INT 90
5572: GREATER
5573: IFFALSE 5590
5575: PUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: CALL_OW 110
5585: PUSH
5586: LD_INT 2
5588: EQUAL
5589: AND
5590: IFFALSE 5606
// SetTag ( i , 0 ) else
5592: LD_VAR 0 1
5596: PPUSH
5597: LD_INT 0
5599: PPUSH
5600: CALL_OW 109
5604: GO 5702
// if GetTag ( i ) = 2 then
5606: LD_VAR 0 1
5610: PPUSH
5611: CALL_OW 110
5615: PUSH
5616: LD_INT 2
5618: EQUAL
5619: IFFALSE 5702
// begin x := rand ( 1 , 2 ) ;
5621: LD_ADDR_VAR 0 5
5625: PUSH
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 2
5631: PPUSH
5632: CALL_OW 12
5636: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5637: LD_VAR 0 1
5641: PPUSH
5642: LD_EXP 50
5646: PUSH
5647: LD_VAR 0 5
5651: ARRAY
5652: PPUSH
5653: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5657: LD_EXP 50
5661: PUSH
5662: LD_VAR 0 5
5666: ARRAY
5667: PPUSH
5668: LD_INT 2
5670: PPUSH
5671: CALL_OW 289
5675: PUSH
5676: LD_INT 20
5678: LESS
5679: IFFALSE 5702
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5681: LD_EXP 50
5685: PUSH
5686: LD_VAR 0 5
5690: ARRAY
5691: PPUSH
5692: LD_INT 2
5694: PPUSH
5695: LD_INT 100
5697: PPUSH
5698: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 256
5711: PUSH
5712: LD_INT 600
5714: GREATEREQUAL
5715: IFFALSE 5729
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 110
5727: NOT
5728: AND
5729: IFFALSE 5755
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 4
5740: PPUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 74
5750: PPUSH
5751: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5755: LD_VAR 0 1
5759: PPUSH
5760: CALL_OW 256
5764: PUSH
5765: LD_INT 600
5767: LESS
5768: IFFALSE 5782
5770: PUSH
5771: LD_VAR 0 1
5775: PPUSH
5776: CALL_OW 110
5780: NOT
5781: AND
5782: IFFALSE 5811
// begin SetTag ( i , 1 ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: LD_INT 1
5791: PPUSH
5792: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5796: LD_VAR 0 1
5800: PPUSH
5801: LD_INT 62
5803: PPUSH
5804: LD_INT 22
5806: PPUSH
5807: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5811: LD_VAR 0 1
5815: PPUSH
5816: CALL_OW 110
5820: PUSH
5821: LD_INT 1
5823: EQUAL
5824: IFFALSE 5847
5826: PUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: LD_INT 62
5834: PPUSH
5835: LD_INT 22
5837: PPUSH
5838: CALL_OW 297
5842: PUSH
5843: LD_INT 6
5845: LESS
5846: AND
5847: IFFALSE 5855
5849: PUSH
5850: LD_VAR 0 3
5854: AND
5855: IFFALSE 5957
// begin ComExitVehicle ( tmp ) ;
5857: LD_VAR 0 3
5861: PPUSH
5862: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5866: LD_VAR 0 3
5870: PPUSH
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5880: LD_INT 35
5882: PPUSH
5883: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 256
5896: PUSH
5897: LD_INT 1000
5899: EQUAL
5900: IFFALSE 5880
// ComEnterUnit ( tmp , i ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 261
5925: PUSH
5926: LD_INT 90
5928: LESSEQUAL
5929: IFFALSE 5945
// SetTag ( i , 2 ) else
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: CALL_OW 109
5943: GO 5957
// SetTag ( i , 0 ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_INT 0
5952: PPUSH
5953: CALL_OW 109
// end ; end ;
5957: GO 5533
5959: POP
5960: POP
// end ;
5961: PPOPN 5
5963: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5964: LD_EXP 20
5968: IFFALSE 6227
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5977: LD_EXP 50
5981: PPUSH
5982: LD_INT 79
5984: PPUSH
5985: LD_INT 155
5987: PPUSH
5988: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5992: LD_EXP 50
5996: PPUSH
5997: LD_INT 16
5999: PPUSH
6000: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_EXP 49
6013: PPUSH
6014: LD_INT 50
6016: PUSH
6017: EMPTY
6018: LIST
6019: PPUSH
6020: CALL_OW 72
6024: ST_TO_ADDR
// tmp := tmp diff UnitFilter ( tmp , [ [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] ] ) ;
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 2
6034: PUSH
6035: LD_VAR 0 2
6039: PPUSH
6040: LD_INT 25
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: LD_INT 55
6055: PUSH
6056: EMPTY
6057: LIST
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 72
6071: DIFF
6072: ST_TO_ADDR
// for i in tmp do
6073: LD_ADDR_VAR 0 1
6077: PUSH
6078: LD_VAR 0 2
6082: PUSH
6083: FOR_IN
6084: IFFALSE 6118
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6086: LD_VAR 0 1
6090: PPUSH
6091: LD_INT 123
6093: PPUSH
6094: LD_INT 60
6096: PPUSH
6097: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6101: LD_VAR 0 1
6105: PPUSH
6106: LD_INT 153
6108: PPUSH
6109: LD_INT 103
6111: PPUSH
6112: CALL_OW 174
// end ;
6116: GO 6083
6118: POP
6119: POP
// repeat wait ( 0 0$1 ) ;
6120: LD_INT 35
6122: PPUSH
6123: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6127: LD_ADDR_VAR 0 2
6131: PUSH
6132: LD_EXP 49
6136: PPUSH
6137: LD_INT 50
6139: PUSH
6140: EMPTY
6141: LIST
6142: PPUSH
6143: CALL_OW 72
6147: ST_TO_ADDR
// for i in tmp do
6148: LD_ADDR_VAR 0 1
6152: PUSH
6153: LD_VAR 0 2
6157: PUSH
6158: FOR_IN
6159: IFFALSE 6218
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6161: LD_VAR 0 1
6165: PPUSH
6166: LD_INT 81
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: LD_INT 21
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: PPUSH
6202: LD_VAR 0 1
6206: PPUSH
6207: CALL_OW 74
6211: PPUSH
6212: CALL_OW 115
6216: GO 6158
6218: POP
6219: POP
6220: LD_VAR 0 2
6224: NOT
6225: IFFALSE 6120
// end ;
6227: PPOPN 2
6229: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6230: LD_INT 22
6232: PUSH
6233: LD_INT 3
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 32
6242: PUSH
6243: LD_INT 1
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PPUSH
6254: CALL_OW 69
6258: IFFALSE 6337
6260: GO 6262
6262: DISABLE
6263: LD_INT 0
6265: PPUSH
// begin enable ;
6266: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_INT 22
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: LD_INT 32
6284: PUSH
6285: LD_INT 1
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL_OW 69
6300: PUSH
6301: FOR_IN
6302: IFFALSE 6335
// if GetFuel ( i ) < 1 then
6304: LD_VAR 0 1
6308: PPUSH
6309: CALL_OW 261
6313: PUSH
6314: LD_INT 1
6316: LESS
6317: IFFALSE 6333
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 311
6328: PPUSH
6329: CALL_OW 121
6333: GO 6301
6335: POP
6336: POP
// end ;
6337: PPOPN 1
6339: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6340: LD_EXP 41
6344: PPUSH
6345: CALL_OW 303
6349: IFTRUE 6362
6351: PUSH
6352: LD_EXP 41
6356: PPUSH
6357: CALL_OW 301
6361: OR
6362: IFTRUE 6373
6364: PUSH
6365: LD_INT 71
6367: PPUSH
6368: CALL_OW 303
6372: OR
6373: IFTRUE 6384
6375: PUSH
6376: LD_INT 71
6378: PPUSH
6379: CALL_OW 301
6383: OR
6384: IFFALSE 6713
6386: GO 6388
6388: DISABLE
6389: LD_INT 0
6391: PPUSH
6392: PPUSH
6393: PPUSH
6394: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: LD_EXP 45
6404: PPUSH
6405: LD_INT 25
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 72
6419: ST_TO_ADDR
// if not tmp then
6420: LD_VAR 0 2
6424: NOT
6425: IFFALSE 6429
// exit ;
6427: GO 6713
// barracks := HexInfo ( 166 , 116 ) ;
6429: LD_ADDR_VAR 0 4
6433: PUSH
6434: LD_INT 166
6436: PPUSH
6437: LD_INT 116
6439: PPUSH
6440: CALL_OW 428
6444: ST_TO_ADDR
// for i in tmp do
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_VAR 0 2
6454: PUSH
6455: FOR_IN
6456: IFFALSE 6469
// ComExitBuilding ( i ) ;
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 122
6467: GO 6455
6469: POP
6470: POP
// repeat wait ( 0 0$1 ) ;
6471: LD_INT 35
6473: PPUSH
6474: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6478: LD_ADDR_VAR 0 2
6482: PUSH
6483: LD_EXP 45
6487: PPUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 50
6500: PUSH
6501: EMPTY
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 72
6512: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: LD_INT 21
6520: PPUSH
6521: LD_INT 81
6523: PUSH
6524: LD_INT 6
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PPUSH
6531: CALL_OW 70
6535: ST_TO_ADDR
// if enemy then
6536: LD_VAR 0 3
6540: IFFALSE 6585
// begin for i in tmp do
6542: LD_ADDR_VAR 0 1
6546: PUSH
6547: LD_VAR 0 2
6551: PUSH
6552: FOR_IN
6553: IFFALSE 6581
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6555: LD_VAR 0 1
6559: PPUSH
6560: LD_VAR 0 3
6564: PPUSH
6565: LD_VAR 0 1
6569: PPUSH
6570: CALL_OW 74
6574: PPUSH
6575: CALL_OW 115
6579: GO 6552
6581: POP
6582: POP
// end else
6583: GO 6706
// begin for i in tmp do
6585: LD_ADDR_VAR 0 1
6589: PUSH
6590: LD_VAR 0 2
6594: PUSH
6595: FOR_IN
6596: IFFALSE 6704
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6598: LD_VAR 0 1
6602: PPUSH
6603: CALL_OW 314
6607: IFTRUE 6624
6609: PUSH
6610: LD_VAR 0 1
6614: PPUSH
6615: LD_INT 21
6617: PPUSH
6618: CALL_OW 308
6622: NOT
6623: OR
6624: IFFALSE 6702
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6626: LD_VAR 0 1
6630: PPUSH
6631: CALL_OW 256
6635: PUSH
6636: LD_INT 600
6638: LESS
6639: IFFALSE 6652
6641: PUSH
6642: LD_VAR 0 4
6646: PPUSH
6647: CALL_OW 302
6651: AND
6652: IFFALSE 6669
6654: PUSH
6655: LD_VAR 0 4
6659: PPUSH
6660: CALL_OW 313
6664: PUSH
6665: LD_INT 6
6667: LESS
6668: AND
6669: IFFALSE 6687
// ComEnterUnit ( i , barracks ) else
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_VAR 0 4
6680: PPUSH
6681: CALL_OW 120
6685: GO 6702
// ComMoveXY ( i , 162 , 109 ) ;
6687: LD_VAR 0 1
6691: PPUSH
6692: LD_INT 162
6694: PPUSH
6695: LD_INT 109
6697: PPUSH
6698: CALL_OW 111
6702: GO 6595
6704: POP
6705: POP
// end ; until not tmp ;
6706: LD_VAR 0 2
6710: NOT
6711: IFFALSE 6471
// end ;
6713: PPOPN 4
6715: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6716: LD_INT 106
6718: PPUSH
6719: CALL_OW 303
6723: IFTRUE 6734
6725: PUSH
6726: LD_INT 106
6728: PPUSH
6729: CALL_OW 301
6733: OR
6734: IFFALSE 6829
6736: GO 6738
6738: DISABLE
6739: LD_INT 0
6741: PPUSH
6742: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_EXP 46
6752: PPUSH
6753: LD_INT 25
6755: PUSH
6756: LD_INT 1
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 72
6767: ST_TO_ADDR
// if not tmp then
6768: LD_VAR 0 2
6772: NOT
6773: IFFALSE 6777
// exit ;
6775: GO 6829
// for i in tmp do
6777: LD_ADDR_VAR 0 1
6781: PUSH
6782: LD_VAR 0 2
6786: PUSH
6787: FOR_IN
6788: IFFALSE 6827
// begin if IsInUnit ( i ) then
6790: LD_VAR 0 1
6794: PPUSH
6795: CALL_OW 310
6799: IFFALSE 6810
// ComExitBuilding ( i ) ;
6801: LD_VAR 0 1
6805: PPUSH
6806: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6810: LD_VAR 0 1
6814: PPUSH
6815: LD_INT 66
6817: PPUSH
6818: LD_INT 128
6820: PPUSH
6821: CALL_OW 171
// end ;
6825: GO 6787
6827: POP
6828: POP
// end ; end_of_file
6829: PPOPN 2
6831: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6832: LD_INT 0
6834: PPUSH
6835: PPUSH
6836: PPUSH
// SetBName ( omikron , omikron ) ;
6837: LD_INT 64
6839: PPUSH
6840: LD_STRING omikron
6842: PPUSH
6843: CALL_OW 500
// uc_side := 4 ;
6847: LD_ADDR_OWVAR 20
6851: PUSH
6852: LD_INT 4
6854: ST_TO_ADDR
// uc_nation := 1 ;
6855: LD_ADDR_OWVAR 21
6859: PUSH
6860: LD_INT 1
6862: ST_TO_ADDR
// omicronSquad := [ ] ;
6863: LD_ADDR_EXP 52
6867: PUSH
6868: EMPTY
6869: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6870: LD_ADDR_VAR 0 2
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 4
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 2
6887: PUSH
6888: LD_INT 30
6890: PUSH
6891: LD_INT 32
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 30
6900: PUSH
6901: LD_INT 31
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 69
6921: PUSH
6922: FOR_IN
6923: IFFALSE 6980
// begin PrepareHuman ( false , 1 , 1 ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 1
6930: PPUSH
6931: LD_INT 1
6933: PPUSH
6934: CALL_OW 380
// un := CreateHuman ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: CALL_OW 44
6947: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6948: LD_ADDR_EXP 52
6952: PUSH
6953: LD_EXP 52
6957: PUSH
6958: LD_VAR 0 3
6962: UNION
6963: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6964: LD_VAR 0 3
6968: PPUSH
6969: LD_VAR 0 2
6973: PPUSH
6974: CALL_OW 52
// end ;
6978: GO 6922
6980: POP
6981: POP
// for i := 1 to 3 do
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: DOUBLE
6988: LD_INT 1
6990: DEC
6991: ST_TO_ADDR
6992: LD_INT 3
6994: PUSH
6995: FOR_TO
6996: IFFALSE 7051
// begin PrepareHuman ( false , 2 , 2 ) ;
6998: LD_INT 0
7000: PPUSH
7001: LD_INT 2
7003: PPUSH
7004: LD_INT 2
7006: PPUSH
7007: CALL_OW 380
// un := CreateHuman ;
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: CALL_OW 44
7020: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7021: LD_ADDR_EXP 52
7025: PUSH
7026: LD_EXP 52
7030: PUSH
7031: LD_VAR 0 3
7035: UNION
7036: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
7037: LD_VAR 0 3
7041: PPUSH
7042: LD_INT 64
7044: PPUSH
7045: CALL_OW 52
// end ;
7049: GO 6995
7051: POP
7052: POP
// for i := 1 to 2 do
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: DOUBLE
7059: LD_INT 1
7061: DEC
7062: ST_TO_ADDR
7063: LD_INT 2
7065: PUSH
7066: FOR_TO
7067: IFFALSE 7206
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
7069: LD_INT 4
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: LD_INT 2
7080: PPUSH
7081: LD_INT 1
7083: PPUSH
7084: LD_INT 3
7086: PPUSH
7087: LD_INT 100
7089: PPUSH
7090: CALL 386 0 7
// un := CreateVehicle ;
7094: LD_ADDR_VAR 0 3
7098: PUSH
7099: CALL_OW 45
7103: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7104: LD_ADDR_EXP 52
7108: PUSH
7109: LD_EXP 52
7113: PUSH
7114: LD_VAR 0 3
7118: UNION
7119: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7120: LD_VAR 0 3
7124: PPUSH
7125: LD_INT 28
7127: PPUSH
7128: LD_INT 37
7130: PPUSH
7131: LD_INT 6
7133: PPUSH
7134: LD_INT 0
7136: PPUSH
7137: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7141: LD_INT 0
7143: PPUSH
7144: LD_INT 3
7146: PPUSH
7147: LD_INT 2
7149: PPUSH
7150: CALL_OW 380
// un := CreateHuman ;
7154: LD_ADDR_VAR 0 3
7158: PUSH
7159: CALL_OW 44
7163: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7164: LD_ADDR_EXP 52
7168: PUSH
7169: LD_EXP 52
7173: PUSH
7174: LD_VAR 0 3
7178: UNION
7179: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7180: LD_VAR 0 3
7184: PPUSH
7185: LD_EXP 52
7189: PUSH
7190: LD_EXP 52
7194: PUSH
7195: LD_INT 1
7197: MINUS
7198: ARRAY
7199: PPUSH
7200: CALL_OW 52
// end ;
7204: GO 7066
7206: POP
7207: POP
// end ;
7208: LD_VAR 0 1
7212: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
// uc_side := 4 ;
7219: LD_ADDR_OWVAR 20
7223: PUSH
7224: LD_INT 4
7226: ST_TO_ADDR
// uc_nation := 1 ;
7227: LD_ADDR_OWVAR 21
7231: PUSH
7232: LD_INT 1
7234: ST_TO_ADDR
// tmp := [ ] ;
7235: LD_ADDR_VAR 0 4
7239: PUSH
7240: EMPTY
7241: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7242: LD_INT 4
7244: PPUSH
7245: LD_INT 1
7247: PPUSH
7248: LD_INT 2
7250: PPUSH
7251: LD_INT 1
7253: PPUSH
7254: LD_INT 1
7256: PPUSH
7257: LD_INT 4
7259: PPUSH
7260: LD_INT 77
7262: PPUSH
7263: CALL 386 0 7
// un := CreateVehicle ;
7267: LD_ADDR_VAR 0 3
7271: PUSH
7272: CALL_OW 45
7276: ST_TO_ADDR
// tmp := tmp union un ;
7277: LD_ADDR_VAR 0 4
7281: PUSH
7282: LD_VAR 0 4
7286: PUSH
7287: LD_VAR 0 3
7291: UNION
7292: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7293: LD_VAR 0 3
7297: PPUSH
7298: LD_INT 2
7300: PPUSH
7301: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7305: LD_VAR 0 3
7309: PPUSH
7310: LD_INT 106
7312: PPUSH
7313: LD_INT 3
7315: PPUSH
7316: LD_INT 0
7318: PPUSH
7319: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7323: LD_INT 0
7325: PPUSH
7326: LD_INT 3
7328: PPUSH
7329: LD_INT 2
7331: PPUSH
7332: CALL_OW 380
// un := CreateHuman ;
7336: LD_ADDR_VAR 0 3
7340: PUSH
7341: CALL_OW 44
7345: ST_TO_ADDR
// tmp := tmp union un ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_VAR 0 4
7355: PUSH
7356: LD_VAR 0 3
7360: UNION
7361: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7362: LD_VAR 0 3
7366: PPUSH
7367: LD_VAR 0 4
7371: PUSH
7372: LD_VAR 0 4
7376: PUSH
7377: LD_INT 1
7379: MINUS
7380: ARRAY
7381: PPUSH
7382: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7386: LD_VAR 0 3
7390: PPUSH
7391: LD_INT 109
7393: PPUSH
7394: LD_INT 9
7396: PPUSH
7397: CALL_OW 111
// wait ( 0 0$1 ) ;
7401: LD_INT 35
7403: PPUSH
7404: CALL_OW 67
// for i := 1 to 2 do
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: DOUBLE
7414: LD_INT 1
7416: DEC
7417: ST_TO_ADDR
7418: LD_INT 2
7420: PUSH
7421: FOR_TO
7422: IFFALSE 7486
// begin PrepareHuman ( false , 1 , 2 ) ;
7424: LD_INT 0
7426: PPUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_INT 2
7432: PPUSH
7433: CALL_OW 380
// un := CreateHuman ;
7437: LD_ADDR_VAR 0 3
7441: PUSH
7442: CALL_OW 44
7446: ST_TO_ADDR
// tmp := tmp union un ;
7447: LD_ADDR_VAR 0 4
7451: PUSH
7452: LD_VAR 0 4
7456: PUSH
7457: LD_VAR 0 3
7461: UNION
7462: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7463: LD_VAR 0 3
7467: PPUSH
7468: LD_INT 105
7470: PPUSH
7471: LD_INT 2
7473: PPUSH
7474: LD_INT 2
7476: PPUSH
7477: LD_INT 0
7479: PPUSH
7480: CALL_OW 50
// end ;
7484: GO 7421
7486: POP
7487: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7488: LD_VAR 0 4
7492: PPUSH
7493: LD_INT 26
7495: PPUSH
7496: LD_INT 35
7498: PPUSH
7499: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7503: LD_INT 35
7505: PPUSH
7506: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_INT 50
7517: PUSH
7518: EMPTY
7519: LIST
7520: PPUSH
7521: CALL_OW 72
7525: NOT
7526: IFFALSE 7530
// exit ;
7528: GO 7657
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7530: LD_VAR 0 4
7534: PPUSH
7535: LD_INT 91
7537: PUSH
7538: LD_INT 64
7540: PUSH
7541: LD_INT 12
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: PPUSH
7549: CALL_OW 72
7553: PUSH
7554: LD_VAR 0 4
7558: EQUAL
7559: IFFALSE 7503
// omicronSquad := omicronSquad union tmp ;
7561: LD_ADDR_EXP 52
7565: PUSH
7566: LD_EXP 52
7570: PUSH
7571: LD_VAR 0 4
7575: UNION
7576: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7577: LD_ADDR_VAR 0 2
7581: PUSH
7582: LD_VAR 0 4
7586: PPUSH
7587: LD_INT 25
7589: PUSH
7590: LD_INT 1
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PPUSH
7597: CALL_OW 72
7601: PUSH
7602: FOR_IN
7603: IFFALSE 7655
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_INT 22
7612: PUSH
7613: LD_INT 4
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 30
7622: PUSH
7623: LD_INT 4
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 69
7638: PPUSH
7639: LD_VAR 0 2
7643: PPUSH
7644: CALL_OW 74
7648: PPUSH
7649: CALL_OW 120
7653: GO 7602
7655: POP
7656: POP
// end ;
7657: LD_VAR 0 1
7661: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7662: LD_EXP 13
7666: NOT
7667: IFFALSE 8248
7669: GO 7671
7671: DISABLE
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
// begin enable ;
7678: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7679: LD_ADDR_VAR 0 2
7683: PUSH
7684: LD_INT 22
7686: PUSH
7687: LD_INT 4
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 21
7696: PUSH
7697: LD_INT 3
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 3
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 1000
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: PPUSH
7726: CALL_OW 69
7730: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7731: LD_ADDR_VAR 0 3
7735: PUSH
7736: LD_EXP 52
7740: PPUSH
7741: LD_INT 25
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 72
7755: ST_TO_ADDR
// if filter and tmp then
7756: LD_VAR 0 2
7760: IFFALSE 7768
7762: PUSH
7763: LD_VAR 0 3
7767: AND
7768: IFFALSE 7841
// begin for i in tmp do
7770: LD_ADDR_VAR 0 1
7774: PUSH
7775: LD_VAR 0 3
7779: PUSH
7780: FOR_IN
7781: IFFALSE 7837
// if IsInUnit ( i ) then
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 310
7792: IFFALSE 7805
// ComExitBuilding ( i ) else
7794: LD_VAR 0 1
7798: PPUSH
7799: CALL_OW 122
7803: GO 7835
// if not HasTask ( i ) then
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL_OW 314
7814: NOT
7815: IFFALSE 7835
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7817: LD_VAR 0 1
7821: PPUSH
7822: LD_VAR 0 2
7826: PUSH
7827: LD_INT 1
7829: ARRAY
7830: PPUSH
7831: CALL_OW 130
7835: GO 7780
7837: POP
7838: POP
// end else
7839: GO 7912
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7841: LD_VAR 0 3
7845: PPUSH
7846: LD_INT 3
7848: PUSH
7849: LD_INT 54
7851: PUSH
7852: EMPTY
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 72
7863: IFFALSE 7912
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7865: LD_ADDR_VAR 0 1
7869: PUSH
7870: LD_VAR 0 3
7874: PPUSH
7875: LD_INT 3
7877: PUSH
7878: LD_INT 54
7880: PUSH
7881: EMPTY
7882: LIST
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 72
7892: PUSH
7893: FOR_IN
7894: IFFALSE 7910
// ComEnterUnit ( i , omikron ) ;
7896: LD_VAR 0 1
7900: PPUSH
7901: LD_INT 64
7903: PPUSH
7904: CALL_OW 120
7908: GO 7893
7910: POP
7911: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7912: LD_ADDR_VAR 0 2
7916: PUSH
7917: LD_EXP 52
7921: PPUSH
7922: LD_INT 21
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PPUSH
7932: CALL_OW 72
7936: ST_TO_ADDR
// if not filter then
7937: LD_VAR 0 2
7941: NOT
7942: IFFALSE 7946
// exit ;
7944: GO 8248
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7946: LD_ADDR_VAR 0 4
7950: PUSH
7951: LD_INT 13
7953: PPUSH
7954: LD_INT 81
7956: PUSH
7957: LD_INT 4
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 70
7968: ST_TO_ADDR
// if enemy then
7969: LD_VAR 0 4
7973: IFFALSE 8248
// begin for i in filter do
7975: LD_ADDR_VAR 0 1
7979: PUSH
7980: LD_VAR 0 2
7984: PUSH
7985: FOR_IN
7986: IFFALSE 8246
// begin tmp := IsDrivenBy ( i ) ;
7988: LD_ADDR_VAR 0 3
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 311
8002: ST_TO_ADDR
// if not tmp then
8003: LD_VAR 0 3
8007: NOT
8008: IFFALSE 8012
// continue ;
8010: GO 7985
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
8012: LD_VAR 0 1
8016: PPUSH
8017: CALL_OW 256
8021: PUSH
8022: LD_INT 600
8024: GREATEREQUAL
8025: IFFALSE 8042
8027: PUSH
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 110
8037: PUSH
8038: LD_INT 1
8040: NONEQUAL
8041: AND
8042: IFFALSE 8068
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_VAR 0 4
8053: PPUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 74
8063: PPUSH
8064: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 256
8077: PUSH
8078: LD_INT 600
8080: LESS
8081: IFFALSE 8098
8083: PUSH
8084: LD_VAR 0 1
8088: PPUSH
8089: CALL_OW 110
8093: PUSH
8094: LD_INT 1
8096: NONEQUAL
8097: AND
8098: IFFALSE 8127
// begin SetTag ( i , 1 ) ;
8100: LD_VAR 0 1
8104: PPUSH
8105: LD_INT 1
8107: PPUSH
8108: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 27
8119: PPUSH
8120: LD_INT 35
8122: PPUSH
8123: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 110
8136: PUSH
8137: LD_INT 1
8139: EQUAL
8140: IFFALSE 8163
8142: PUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: LD_INT 27
8150: PPUSH
8151: LD_INT 35
8153: PPUSH
8154: CALL_OW 297
8158: PUSH
8159: LD_INT 6
8161: LESS
8162: AND
8163: IFFALSE 8171
8165: PUSH
8166: LD_VAR 0 3
8170: AND
8171: IFFALSE 8244
// begin ComExitVehicle ( tmp ) ;
8173: LD_VAR 0 3
8177: PPUSH
8178: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8182: LD_VAR 0 3
8186: PPUSH
8187: LD_VAR 0 1
8191: PPUSH
8192: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8196: LD_INT 35
8198: PPUSH
8199: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8203: LD_VAR 0 1
8207: PPUSH
8208: CALL_OW 256
8212: PUSH
8213: LD_INT 1000
8215: EQUAL
8216: IFFALSE 8196
// ComEnterUnit ( tmp , i ) ;
8218: LD_VAR 0 3
8222: PPUSH
8223: LD_VAR 0 1
8227: PPUSH
8228: CALL_OW 120
// SetTag ( i , 0 ) ;
8232: LD_VAR 0 1
8236: PPUSH
8237: LD_INT 0
8239: PPUSH
8240: CALL_OW 109
// end ; end ;
8244: GO 7985
8246: POP
8247: POP
// end ; end ;
8248: PPOPN 4
8250: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8251: LD_EXP 13
8255: IFFALSE 8399
8257: GO 8259
8259: DISABLE
8260: LD_INT 0
8262: PPUSH
8263: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8264: LD_ADDR_VAR 0 2
8268: PUSH
8269: LD_EXP 52
8273: PPUSH
8274: LD_INT 21
8276: PUSH
8277: LD_INT 1
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 50
8286: PUSH
8287: EMPTY
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PPUSH
8294: CALL_OW 72
8298: ST_TO_ADDR
// if not tmp then
8299: LD_VAR 0 2
8303: NOT
8304: IFFALSE 8308
// exit ;
8306: GO 8399
// repeat wait ( 0 0$1 ) ;
8308: LD_INT 35
8310: PPUSH
8311: CALL_OW 67
// for i in tmp do
8315: LD_ADDR_VAR 0 1
8319: PUSH
8320: LD_VAR 0 2
8324: PUSH
8325: FOR_IN
8326: IFFALSE 8390
// begin ComExit ( i ) ;
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL 79409 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8337: LD_VAR 0 1
8341: PPUSH
8342: LD_INT 14
8344: PPUSH
8345: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8349: LD_VAR 0 1
8353: PPUSH
8354: LD_INT 14
8356: PPUSH
8357: CALL_OW 308
8361: IFFALSE 8388
// begin tmp := tmp diff i ;
8363: LD_ADDR_VAR 0 2
8367: PUSH
8368: LD_VAR 0 2
8372: PUSH
8373: LD_VAR 0 1
8377: DIFF
8378: ST_TO_ADDR
// RemoveUnit ( i ) ;
8379: LD_VAR 0 1
8383: PPUSH
8384: CALL_OW 64
// end ; end ;
8388: GO 8325
8390: POP
8391: POP
// until not tmp ;
8392: LD_VAR 0 2
8396: NOT
8397: IFFALSE 8308
// end ; end_of_file
8399: PPOPN 2
8401: END
// export function Action ; var i , un , veh , tmp ; begin
8402: LD_INT 0
8404: PPUSH
8405: PPUSH
8406: PPUSH
8407: PPUSH
8408: PPUSH
// InGameOn ;
8409: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8413: LD_INT 179
8415: PPUSH
8416: LD_INT 5
8418: PPUSH
8419: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8423: LD_ADDR_VAR 0 4
8427: PUSH
8428: LD_INT 2
8430: PPUSH
8431: LD_INT 2
8433: PPUSH
8434: LD_INT 12
8436: PPUSH
8437: LD_INT 1
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 24
8445: PPUSH
8446: LD_INT 33
8448: PPUSH
8449: CALL 386 0 7
8453: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8454: LD_VAR 0 4
8458: PPUSH
8459: LD_INT 2
8461: PPUSH
8462: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 178
8473: PPUSH
8474: LD_INT 2
8476: PPUSH
8477: LD_INT 0
8479: PPUSH
8480: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8484: LD_EXP 26
8488: PPUSH
8489: LD_VAR 0 4
8493: PPUSH
8494: CALL_OW 52
// if Kamil then
8498: LD_EXP 30
8502: IFFALSE 8537
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8504: LD_EXP 30
8508: PPUSH
8509: LD_INT 207
8511: PPUSH
8512: LD_INT 37
8514: PPUSH
8515: LD_INT 0
8517: PPUSH
8518: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8522: LD_EXP 30
8526: PPUSH
8527: LD_INT 211
8529: PPUSH
8530: LD_INT 38
8532: PPUSH
8533: CALL_OW 118
// end ; if Sophia then
8537: LD_EXP 32
8541: IFFALSE 8576
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8543: LD_EXP 32
8547: PPUSH
8548: LD_INT 209
8550: PPUSH
8551: LD_INT 40
8553: PPUSH
8554: LD_INT 0
8556: PPUSH
8557: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8561: LD_EXP 32
8565: PPUSH
8566: LD_INT 211
8568: PPUSH
8569: LD_INT 38
8571: PPUSH
8572: CALL_OW 118
// end ; if Givi then
8576: LD_EXP 27
8580: IFFALSE 8615
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8582: LD_EXP 27
8586: PPUSH
8587: LD_INT 201
8589: PPUSH
8590: LD_INT 34
8592: PPUSH
8593: LD_INT 0
8595: PPUSH
8596: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8600: LD_EXP 27
8604: PPUSH
8605: LD_INT 206
8607: PPUSH
8608: LD_INT 36
8610: PPUSH
8611: CALL_OW 118
// end ; if Ibrahim then
8615: LD_EXP 29
8619: IFFALSE 8654
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8621: LD_EXP 29
8625: PPUSH
8626: LD_INT 202
8628: PPUSH
8629: LD_INT 39
8631: PPUSH
8632: LD_INT 0
8634: PPUSH
8635: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8639: LD_EXP 29
8643: PPUSH
8644: LD_INT 206
8646: PPUSH
8647: LD_INT 36
8649: PPUSH
8650: CALL_OW 118
// end ; if Markov then
8654: LD_EXP 33
8658: IFFALSE 8745
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8660: LD_ADDR_VAR 0 4
8664: PUSH
8665: LD_INT 2
8667: PPUSH
8668: LD_INT 2
8670: PPUSH
8671: LD_INT 13
8673: PPUSH
8674: LD_INT 1
8676: PPUSH
8677: LD_INT 1
8679: PPUSH
8680: LD_INT 25
8682: PPUSH
8683: LD_INT 80
8685: PUSH
8686: LD_INT 20
8688: PUSH
8689: LD_OWVAR 67
8693: MUL
8694: MINUS
8695: PPUSH
8696: CALL 386 0 7
8700: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8701: LD_VAR 0 4
8705: PPUSH
8706: LD_INT 2
8708: PPUSH
8709: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8713: LD_VAR 0 4
8717: PPUSH
8718: LD_INT 197
8720: PPUSH
8721: LD_INT 35
8723: PPUSH
8724: LD_INT 0
8726: PPUSH
8727: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8731: LD_EXP 33
8735: PPUSH
8736: LD_VAR 0 4
8740: PPUSH
8741: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8745: LD_ADDR_VAR 0 5
8749: PUSH
8750: LD_EXP 31
8754: PUSH
8755: LD_EXP 38
8759: UNION
8760: ST_TO_ADDR
// for i in tmp do
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: LD_VAR 0 5
8770: PUSH
8771: FOR_IN
8772: IFFALSE 8806
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8774: LD_VAR 0 2
8778: PPUSH
8779: LD_INT 203
8781: PPUSH
8782: LD_INT 41
8784: PPUSH
8785: LD_INT 6
8787: PPUSH
8788: LD_INT 0
8790: PPUSH
8791: CALL_OW 50
// ComHold ( i ) ;
8795: LD_VAR 0 2
8799: PPUSH
8800: CALL_OW 140
// end ;
8804: GO 8771
8806: POP
8807: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8808: LD_INT 22
8810: PUSH
8811: LD_INT 2
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 25
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PPUSH
8832: CALL_OW 69
8836: NOT
8837: IFFALSE 8851
// SetClass ( Heike , 2 ) ;
8839: LD_EXP 26
8843: PPUSH
8844: LD_INT 2
8846: PPUSH
8847: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8851: LD_EXP 26
8855: PPUSH
8856: LD_INT 183
8858: PPUSH
8859: LD_INT 12
8861: PPUSH
8862: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8866: LD_EXP 26
8870: PPUSH
8871: LD_INT 188
8873: PPUSH
8874: LD_INT 20
8876: PPUSH
8877: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8881: LD_EXP 26
8885: PPUSH
8886: LD_INT 191
8888: PPUSH
8889: LD_INT 25
8891: PPUSH
8892: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8896: LD_EXP 26
8900: PPUSH
8901: LD_INT 203
8903: PPUSH
8904: LD_INT 29
8906: PPUSH
8907: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8911: LD_EXP 26
8915: PPUSH
8916: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8920: LD_INT 35
8922: PPUSH
8923: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8927: LD_EXP 26
8931: PPUSH
8932: CALL_OW 310
8936: NOT
8937: IFFALSE 8920
// CenterOnUnits ( Heike ) ;
8939: LD_EXP 26
8943: PPUSH
8944: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8948: LD_ADDR_VAR 0 5
8952: PUSH
8953: LD_INT 22
8955: PUSH
8956: LD_INT 2
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 21
8965: PUSH
8966: LD_INT 1
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PPUSH
8977: CALL_OW 69
8981: PUSH
8982: LD_EXP 26
8986: PUSH
8987: LD_EXP 33
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: DIFF
8996: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8997: LD_VAR 0 5
9001: PPUSH
9002: LD_EXP 26
9006: PPUSH
9007: CALL_OW 119
// if Givi then
9011: LD_EXP 27
9015: IFFALSE 9033
// ComTurnUnit ( Heike , Givi ) else
9017: LD_EXP 26
9021: PPUSH
9022: LD_EXP 27
9026: PPUSH
9027: CALL_OW 119
9031: GO 9051
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
9033: LD_EXP 26
9037: PPUSH
9038: LD_VAR 0 5
9042: PUSH
9043: LD_INT 1
9045: ARRAY
9046: PPUSH
9047: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
9051: LD_EXP 26
9055: PPUSH
9056: LD_STRING DH-Start-1
9058: PPUSH
9059: CALL_OW 88
// if Givi then
9063: LD_EXP 27
9067: IFFALSE 9114
// begin Say ( Givi , DG-Start-2 ) ;
9069: LD_EXP 27
9073: PPUSH
9074: LD_STRING DG-Start-2
9076: PPUSH
9077: CALL_OW 88
// if not Mike then
9081: LD_EXP 28
9085: NOT
9086: IFFALSE 9112
// begin Say ( Givi , DG-Start-b-3 ) ;
9088: LD_EXP 27
9092: PPUSH
9093: LD_STRING DG-Start-b-3
9095: PPUSH
9096: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9100: LD_EXP 26
9104: PPUSH
9105: LD_STRING DH-Start-b-4
9107: PPUSH
9108: CALL_OW 88
// end ; end else
9112: GO 9179
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9114: LD_EXP 38
9118: PPUSH
9119: LD_INT 26
9121: PUSH
9122: LD_INT 1
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 72
9133: PUSH
9134: LD_INT 1
9136: ARRAY
9137: PPUSH
9138: LD_STRING DArm-Start-a-2
9140: PPUSH
9141: CALL_OW 88
9145: NOT
9146: IFFALSE 9179
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9148: LD_EXP 38
9152: PPUSH
9153: LD_INT 26
9155: PUSH
9156: LD_INT 2
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 72
9167: PUSH
9168: LD_INT 1
9170: ARRAY
9171: PPUSH
9172: LD_STRING DArf-Start-a-2
9174: PPUSH
9175: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9179: LD_EXP 26
9183: PPUSH
9184: LD_INT 211
9186: PPUSH
9187: LD_INT 38
9189: PPUSH
9190: CALL_OW 118
// wait ( 0 0$1 ) ;
9194: LD_INT 35
9196: PPUSH
9197: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9201: LD_EXP 26
9205: PPUSH
9206: LD_STRING DH-Start-3
9208: PPUSH
9209: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9213: LD_EXP 26
9217: PPUSH
9218: LD_STRING DH-Start-4
9220: PPUSH
9221: CALL_OW 88
// InGameOff ;
9225: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9229: LD_STRING Prepare
9231: PPUSH
9232: CALL_OW 337
// SaveForQuickRestart ;
9236: CALL_OW 22
// wait ( 0 0$10 ) ;
9240: LD_INT 350
9242: PPUSH
9243: CALL_OW 67
// if not Aviradze then
9247: LD_EXP 36
9251: NOT
9252: IFFALSE 9256
// exit ;
9254: GO 9496
// SetDir ( Aviradze , 4 ) ;
9256: LD_EXP 36
9260: PPUSH
9261: LD_INT 4
9263: PPUSH
9264: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9268: LD_EXP 36
9272: PPUSH
9273: LD_INT 225
9275: PPUSH
9276: LD_INT 33
9278: PPUSH
9279: LD_INT 0
9281: PPUSH
9282: CALL_OW 48
// for i := 1 to 2 do
9286: LD_ADDR_VAR 0 2
9290: PUSH
9291: DOUBLE
9292: LD_INT 1
9294: DEC
9295: ST_TO_ADDR
9296: LD_INT 2
9298: PUSH
9299: FOR_TO
9300: IFFALSE 9431
// begin uc_side := 2 ;
9302: LD_ADDR_OWVAR 20
9306: PUSH
9307: LD_INT 2
9309: ST_TO_ADDR
// uc_nation := 0 ;
9310: LD_ADDR_OWVAR 21
9314: PUSH
9315: LD_INT 0
9317: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9318: LD_INT 0
9320: PPUSH
9321: LD_INT 12
9323: PPUSH
9324: LD_INT 1
9326: PPUSH
9327: CALL_OW 380
// hc_gallery :=  ;
9331: LD_ADDR_OWVAR 33
9335: PUSH
9336: LD_STRING 
9338: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING Artudito
9346: PUSH
9347: LD_STRING Textur
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_VAR 0 2
9358: ARRAY
9359: ST_TO_ADDR
// un := CreateHuman ;
9360: LD_ADDR_VAR 0 3
9364: PUSH
9365: CALL_OW 44
9369: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9370: LD_VAR 0 3
9374: PPUSH
9375: LD_INT 224
9377: PUSH
9378: LD_INT 226
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_VAR 0 2
9389: ARRAY
9390: PPUSH
9391: LD_INT 31
9393: PUSH
9394: LD_INT 35
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_VAR 0 2
9405: ARRAY
9406: PPUSH
9407: LD_INT 0
9409: PPUSH
9410: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9414: LD_VAR 0 3
9418: PPUSH
9419: LD_INT 215
9421: PPUSH
9422: LD_INT 36
9424: PPUSH
9425: CALL_OW 111
// end ;
9429: GO 9299
9431: POP
9432: POP
// hc_name :=  ;
9433: LD_ADDR_OWVAR 26
9437: PUSH
9438: LD_STRING 
9440: ST_TO_ADDR
// InitHc ;
9441: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9445: LD_EXP 36
9449: PPUSH
9450: LD_INT 215
9452: PPUSH
9453: LD_INT 36
9455: PPUSH
9456: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9460: LD_EXP 36
9464: PPUSH
9465: LD_STRING DA-Arrive-1
9467: PPUSH
9468: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9472: LD_EXP 26
9476: PPUSH
9477: LD_STRING DH-Arrive-2
9479: PPUSH
9480: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9484: LD_EXP 36
9488: PPUSH
9489: LD_STRING DA-Arrive-3
9491: PPUSH
9492: CALL_OW 88
// end ;
9496: LD_VAR 0 1
9500: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p , sex ;
9501: LD_EXP 3
9505: IFFALSE 11057
9507: GO 9509
9509: DISABLE
9510: LD_INT 0
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
// begin DialogueOn ;
9517: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9521: LD_EXP 26
9525: PPUSH
9526: LD_STRING DH-base-1
9528: PPUSH
9529: CALL_OW 88
// if Markov then
9533: LD_EXP 33
9537: IFFALSE 9589
// begin Say ( Markov , DMar-base-2 ) ;
9539: LD_EXP 33
9543: PPUSH
9544: LD_STRING DMar-base-2
9546: PPUSH
9547: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9551: LD_EXP 33
9555: PPUSH
9556: LD_STRING DMar-base-3
9558: PPUSH
9559: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9563: LD_EXP 26
9567: PPUSH
9568: LD_STRING DH-base-4
9570: PPUSH
9571: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9575: LD_EXP 33
9579: PPUSH
9580: LD_STRING DMar-base-5
9582: PPUSH
9583: CALL_OW 88
// end else
9587: GO 9666
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9589: LD_EXP 38
9593: PPUSH
9594: LD_INT 26
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 72
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PPUSH
9613: LD_STRING DArm-base-a-2
9615: PPUSH
9616: CALL_OW 88
9620: NOT
9621: IFFALSE 9654
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9623: LD_EXP 38
9627: PPUSH
9628: LD_INT 26
9630: PUSH
9631: LD_INT 2
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 72
9642: PUSH
9643: LD_INT 1
9645: ARRAY
9646: PPUSH
9647: LD_STRING DArf-base-a-2
9649: PPUSH
9650: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9654: LD_EXP 26
9658: PPUSH
9659: LD_STRING DH-base-a-3
9661: PPUSH
9662: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9666: LD_EXP 36
9670: PPUSH
9671: LD_STRING DA-base-6
9673: PPUSH
9674: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9678: LD_EXP 36
9682: PPUSH
9683: LD_STRING DA-base-7
9685: PPUSH
9686: CALL_OW 88
// DialogueOff ;
9690: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9694: LD_STRING Flamethrower
9696: PPUSH
9697: CALL_OW 337
// wait ( 2 2$00 ) ;
9701: LD_INT 4200
9703: PPUSH
9704: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9708: LD_EXP 35
9712: PUSH
9713: LD_EXP 28
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PPUSH
9722: LD_INT 203
9724: PPUSH
9725: LD_INT 37
9727: PPUSH
9728: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9732: LD_INT 22
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: LD_INT 92
9744: PUSH
9745: LD_INT 203
9747: PUSH
9748: LD_INT 37
9750: PUSH
9751: LD_INT 10
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: NOT
9769: IFFALSE 9809
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9771: LD_EXP 35
9775: PUSH
9776: LD_EXP 28
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PPUSH
9785: LD_EXP 26
9789: PPUSH
9790: CALL_OW 250
9794: PPUSH
9795: LD_EXP 26
9799: PPUSH
9800: CALL_OW 251
9804: PPUSH
9805: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9809: LD_INT 35
9811: PPUSH
9812: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9816: LD_INT 2
9818: PPUSH
9819: LD_EXP 35
9823: PPUSH
9824: CALL_OW 292
9828: IFFALSE 9906
9830: PUSH
9831: LD_EXP 35
9835: PPUSH
9836: LD_EXP 26
9840: PPUSH
9841: CALL_OW 296
9845: PUSH
9846: LD_INT 8
9848: LESS
9849: IFTRUE 9905
9851: PUSH
9852: LD_EXP 35
9856: PPUSH
9857: LD_INT 22
9859: PUSH
9860: LD_INT 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 21
9869: PUSH
9870: LD_INT 3
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: PPUSH
9886: LD_EXP 35
9890: PPUSH
9891: CALL_OW 74
9895: PPUSH
9896: CALL_OW 296
9900: PUSH
9901: LD_INT 7
9903: LESS
9904: OR
9905: AND
9906: IFFALSE 9923
9908: PUSH
9909: LD_EXP 35
9913: PPUSH
9914: LD_INT 10
9916: PPUSH
9917: CALL_OW 308
9921: NOT
9922: AND
9923: IFFALSE 9809
// InGameOn ;
9925: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9929: LD_EXP 35
9933: PPUSH
9934: CALL_OW 87
// if IsInUnit ( Heike ) then
9938: LD_EXP 26
9942: PPUSH
9943: CALL_OW 310
9947: IFFALSE 9965
// begin ComExit ( Heike ) ;
9949: LD_EXP 26
9953: PPUSH
9954: CALL 79409 0 1
// wait ( 0 0$1 ) ;
9958: LD_INT 35
9960: PPUSH
9961: CALL_OW 67
// end ; ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9965: LD_EXP 35
9969: PUSH
9970: LD_EXP 28
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: LD_EXP 26
9983: PPUSH
9984: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9988: LD_EXP 26
9992: PPUSH
9993: LD_EXP 35
9997: PPUSH
9998: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
10002: LD_INT 22
10004: PUSH
10005: LD_INT 2
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 91
10014: PUSH
10015: LD_EXP 35
10019: PUSH
10020: LD_INT 10
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 21
10030: PUSH
10031: LD_INT 3
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: PPUSH
10043: CALL_OW 69
10047: IFFALSE 10073
// begin Say ( Kurt , DKs-scout-1 ) ;
10049: LD_EXP 35
10053: PPUSH
10054: LD_STRING DKs-scout-1
10056: PPUSH
10057: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
10061: LD_EXP 26
10065: PPUSH
10066: LD_STRING DH-scout-2
10068: PPUSH
10069: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
10073: LD_EXP 26
10077: PPUSH
10078: CALL_OW 85
// repeat wait ( 0 0$1 ) ;
10082: LD_INT 35
10084: PPUSH
10085: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10089: LD_EXP 26
10093: PPUSH
10094: LD_EXP 35
10098: PPUSH
10099: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10103: LD_EXP 26
10107: PPUSH
10108: LD_EXP 35
10112: PPUSH
10113: CALL_OW 296
10117: PUSH
10118: LD_INT 6
10120: LESS
10121: IFFALSE 10082
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10123: LD_EXP 35
10127: PUSH
10128: LD_EXP 28
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: LD_EXP 26
10141: PPUSH
10142: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10146: LD_EXP 35
10150: PPUSH
10151: LD_STRING DKs-scout-3
10153: PPUSH
10154: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10158: LD_EXP 31
10162: IFFALSE 10184
10164: PUSH
10165: LD_EXP 31
10169: PPUSH
10170: LD_EXP 35
10174: PPUSH
10175: CALL_OW 296
10179: PUSH
10180: LD_INT 15
10182: LESS
10183: AND
10184: IFFALSE 10409
// begin p := 1 ;
10186: LD_ADDR_VAR 0 4
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10194: LD_EXP 31
10198: PPUSH
10199: CALL_OW 310
10203: IFFALSE 10214
// ComExit ( Kaia ) ;
10205: LD_EXP 31
10209: PPUSH
10210: CALL 79409 0 1
// wait ( 0 0$1 ) ;
10214: LD_INT 35
10216: PPUSH
10217: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10221: LD_EXP 31
10225: PPUSH
10226: LD_EXP 35
10230: PPUSH
10231: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10235: LD_INT 35
10237: PPUSH
10238: CALL_OW 67
// p := Inc ( p ) ;
10242: LD_ADDR_VAR 0 4
10246: PUSH
10247: LD_VAR 0 4
10251: PPUSH
10252: CALL 80384 0 1
10256: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10257: LD_EXP 31
10261: PPUSH
10262: LD_EXP 35
10266: PPUSH
10267: CALL_OW 296
10271: PUSH
10272: LD_INT 6
10274: LESS
10275: IFTRUE 10287
10277: PUSH
10278: LD_VAR 0 4
10282: PUSH
10283: LD_INT 12
10285: GREATER
10286: OR
10287: IFFALSE 10235
// ComTurnUnit ( Kaia , Kurt ) ;
10289: LD_EXP 31
10293: PPUSH
10294: LD_EXP 35
10298: PPUSH
10299: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10303: LD_EXP 31
10307: PPUSH
10308: LD_STRING DK-scout-4
10310: PPUSH
10311: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10315: LD_EXP 35
10319: PPUSH
10320: LD_EXP 31
10324: PPUSH
10325: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10329: LD_EXP 35
10333: PPUSH
10334: LD_STRING DKs-scout-5
10336: PPUSH
10337: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10341: LD_EXP 31
10345: PPUSH
10346: LD_STRING DK-scout-6
10348: PPUSH
10349: CALL_OW 88
// if Mike then
10353: LD_EXP 28
10357: IFFALSE 10409
// begin Say ( Mike , DM-scout-7 ) ;
10359: LD_EXP 28
10363: PPUSH
10364: LD_STRING DM-scout-7
10366: PPUSH
10367: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10371: LD_EXP 31
10375: PPUSH
10376: LD_EXP 28
10380: PPUSH
10381: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10385: LD_EXP 31
10389: PPUSH
10390: LD_STRING DK-scout-8
10392: PPUSH
10393: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10397: LD_EXP 28
10401: PPUSH
10402: LD_STRING DM-scout-9
10404: PPUSH
10405: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10409: LD_INT 184
10411: PPUSH
10412: LD_INT 100
10414: PPUSH
10415: LD_INT 2
10417: PPUSH
10418: LD_INT 12
10420: NEG
10421: PPUSH
10422: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10426: LD_INT 184
10428: PPUSH
10429: LD_INT 100
10431: PPUSH
10432: LD_INT 2
10434: PPUSH
10435: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10439: LD_INT 184
10441: PPUSH
10442: LD_INT 100
10444: PPUSH
10445: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10449: LD_EXP 35
10453: PPUSH
10454: LD_STRING DKs-scout-10
10456: PPUSH
10457: CALL_OW 88
// wait ( 0 0$1 ) ;
10461: LD_INT 35
10463: PPUSH
10464: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10468: LD_INT 144
10470: PPUSH
10471: LD_INT 65
10473: PPUSH
10474: LD_INT 2
10476: PPUSH
10477: LD_INT 12
10479: NEG
10480: PPUSH
10481: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10485: LD_INT 144
10487: PPUSH
10488: LD_INT 65
10490: PPUSH
10491: LD_INT 2
10493: PPUSH
10494: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10498: LD_INT 144
10500: PPUSH
10501: LD_INT 65
10503: PPUSH
10504: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10508: LD_EXP 35
10512: PPUSH
10513: LD_STRING DKs-scout-11
10515: PPUSH
10516: CALL_OW 88
// Say ( Kurt , DKs-scout-12 ) ;
10520: LD_EXP 35
10524: PPUSH
10525: LD_STRING DKs-scout-12
10527: PPUSH
10528: CALL_OW 88
// wait ( 0 0$1 ) ;
10532: LD_INT 35
10534: PPUSH
10535: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10539: LD_EXP 35
10543: PPUSH
10544: CALL_OW 87
// if Mike and not Givi then
10548: LD_EXP 28
10552: IFFALSE 10561
10554: PUSH
10555: LD_EXP 27
10559: NOT
10560: AND
10561: IFFALSE 10587
// begin Say ( Mike , DM-scout-a-1 ) ;
10563: LD_EXP 28
10567: PPUSH
10568: LD_STRING DM-scout-a-1
10570: PPUSH
10571: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10575: LD_EXP 26
10579: PPUSH
10580: LD_STRING DH-scout-a-2
10582: PPUSH
10583: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10587: LD_EXP 35
10591: PUSH
10592: LD_EXP 28
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: LD_INT 2
10603: PPUSH
10604: CALL_OW 235
// ComStop ( [ Kurt , Mike ] ) ;
10608: LD_EXP 35
10612: PUSH
10613: LD_EXP 28
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 141
// InGameOff ;
10626: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10630: LD_STRING Hill
10632: PPUSH
10633: CALL_OW 337
// Hint ( BunkerHill ) ;
10637: LD_STRING BunkerHill
10639: PPUSH
10640: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10644: LD_INT 22
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10654: LD_INT 20
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: CALL_OW 424
// allowToPatrol := true ;
10664: LD_ADDR_EXP 12
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10672: LD_INT 3150
10674: PPUSH
10675: CALL_OW 67
// InitHc ;
10679: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10683: LD_ADDR_VAR 0 1
10687: PUSH
10688: DOUBLE
10689: LD_INT 1
10691: DEC
10692: ST_TO_ADDR
10693: LD_INT 3
10695: PUSH
10696: LD_INT 3
10698: PUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 2
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: LD_OWVAR 67
10715: ARRAY
10716: PUSH
10717: FOR_TO
10718: IFFALSE 11055
// begin uc_side := 2 ;
10720: LD_ADDR_OWVAR 20
10724: PUSH
10725: LD_INT 2
10727: ST_TO_ADDR
// uc_nation := 2 ;
10728: LD_ADDR_OWVAR 21
10732: PUSH
10733: LD_INT 2
10735: ST_TO_ADDR
// if i = 1 then
10736: LD_VAR 0 1
10740: PUSH
10741: LD_INT 1
10743: EQUAL
10744: IFFALSE 10756
// sex := sex_male else
10746: LD_ADDR_VAR 0 5
10750: PUSH
10751: LD_INT 1
10753: ST_TO_ADDR
10754: GO 10764
// sex := false ;
10756: LD_ADDR_VAR 0 5
10760: PUSH
10761: LD_INT 0
10763: ST_TO_ADDR
// PrepareHuman ( sex , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10764: LD_VAR 0 5
10768: PPUSH
10769: LD_INT 1
10771: PUSH
10772: LD_INT 3
10774: PUSH
10775: LD_INT 1
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: LD_VAR 0 1
10787: PUSH
10788: LD_INT 3
10790: MOD
10791: PUSH
10792: LD_INT 1
10794: PLUS
10795: ARRAY
10796: PPUSH
10797: LD_INT 3
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 2
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: LD_OWVAR 67
10819: ARRAY
10820: PPUSH
10821: CALL_OW 380
// un := CreateHuman ;
10825: LD_ADDR_VAR 0 2
10829: PUSH
10830: CALL_OW 44
10834: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10835: LD_ADDR_EXP 38
10839: PUSH
10840: LD_EXP 38
10844: PUSH
10845: LD_VAR 0 2
10849: UNION
10850: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10851: LD_INT 2
10853: PPUSH
10854: LD_INT 2
10856: PPUSH
10857: LD_INT 13
10859: PPUSH
10860: LD_INT 2
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_VAR 0 1
10874: PUSH
10875: LD_INT 2
10877: MOD
10878: PUSH
10879: LD_INT 1
10881: PLUS
10882: ARRAY
10883: PPUSH
10884: LD_INT 1
10886: PPUSH
10887: LD_INT 27
10889: PUSH
10890: LD_INT 25
10892: PUSH
10893: LD_INT 27
10895: PUSH
10896: LD_INT 23
10898: PUSH
10899: LD_INT 23
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_OWVAR 67
10913: PUSH
10914: LD_INT 0
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 12
10924: PLUS
10925: ARRAY
10926: PPUSH
10927: LD_INT 77
10929: PPUSH
10930: CALL 386 0 7
// veh := CreateVehicle ;
10934: LD_ADDR_VAR 0 3
10938: PUSH
10939: CALL_OW 45
10943: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10944: LD_VAR 0 3
10948: PPUSH
10949: LD_INT 2
10951: PPUSH
10952: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
10956: LD_INT 35
10958: PPUSH
10959: CALL_OW 67
// until PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 178
10970: PPUSH
10971: LD_INT 2
10973: PPUSH
10974: LD_INT 2
10976: PPUSH
10977: LD_INT 0
10979: PPUSH
10980: CALL_OW 50
10984: IFFALSE 10956
// PlaceHumanInUnit ( un , veh ) ;
10986: LD_VAR 0 2
10990: PPUSH
10991: LD_VAR 0 3
10995: PPUSH
10996: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
11000: LD_VAR 0 2
11004: PPUSH
11005: LD_INT 183
11007: PPUSH
11008: LD_INT 11
11010: PPUSH
11011: CALL_OW 111
// if i = 1 then
11015: LD_VAR 0 1
11019: PUSH
11020: LD_INT 1
11022: EQUAL
11023: IFFALSE 11046
// begin CenterOnUnits ( un ) ;
11025: LD_VAR 0 2
11029: PPUSH
11030: CALL_OW 85
// Say ( un , DArSol-Arrival-1 ) ;
11034: LD_VAR 0 2
11038: PPUSH
11039: LD_STRING DArSol-Arrival-1
11041: PPUSH
11042: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
11046: LD_INT 70
11048: PPUSH
11049: CALL_OW 67
// end ;
11053: GO 10717
11055: POP
11056: POP
// end ;
11057: PPOPN 5
11059: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
11060: LD_EXP 4
11064: IFFALSE 11077
11066: PUSH
11067: LD_EXP 36
11071: PPUSH
11072: CALL_OW 302
11076: AND
11077: IFFALSE 11126
11079: GO 11081
11081: DISABLE
// begin DialogueOn ;
11082: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
11086: LD_EXP 36
11090: PPUSH
11091: LD_STRING DA-lab-1
11093: PPUSH
11094: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
11098: LD_EXP 36
11102: PPUSH
11103: LD_STRING DA-lab-2
11105: PPUSH
11106: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
11110: LD_EXP 26
11114: PPUSH
11115: LD_STRING DH-lab-3
11117: PPUSH
11118: CALL_OW 88
// DialogueOff ;
11122: CALL_OW 7
// end ;
11126: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11127: LD_INT 17
11129: PPUSH
11130: LD_INT 2
11132: PPUSH
11133: CALL_OW 321
11137: PUSH
11138: LD_INT 2
11140: EQUAL
11141: IFFALSE 11273
11143: GO 11145
11145: DISABLE
11146: LD_INT 0
11148: PPUSH
// begin DialogueOn ;
11149: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11153: LD_EXP 36
11157: PPUSH
11158: LD_STRING DA-Cam-1
11160: PPUSH
11161: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11165: LD_EXP 36
11169: PPUSH
11170: LD_STRING DA-Cam-2
11172: PPUSH
11173: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11177: LD_EXP 36
11181: PPUSH
11182: LD_STRING DA-Cam-3
11184: PPUSH
11185: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11189: LD_EXP 26
11193: PPUSH
11194: LD_STRING DH-Cam-4
11196: PPUSH
11197: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11201: LD_EXP 31
11205: PPUSH
11206: LD_STRING DK-Cam-5
11208: PPUSH
11209: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11213: LD_EXP 31
11217: PPUSH
11218: LD_STRING DK-Cam-6
11220: PPUSH
11221: CALL_OW 88
// DialogueOff ;
11225: CALL_OW 7
// Query ( Camera ) ;
11229: LD_STRING Camera
11231: PPUSH
11232: CALL_OW 97
// hiddenCameraAllowed := true ;
11236: LD_ADDR_EXP 5
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// for i in camAreas do
11244: LD_ADDR_VAR 0 1
11248: PUSH
11249: LD_EXP 8
11253: PUSH
11254: FOR_IN
11255: IFFALSE 11271
// SetAreaMapShow ( i , 1 ) ;
11257: LD_VAR 0 1
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: CALL_OW 424
11269: GO 11254
11271: POP
11272: POP
// end ;
11273: PPOPN 1
11275: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11276: LD_EXP 8
11280: NOT
11281: IFFALSE 11289
11283: PUSH
11284: LD_EXP 5
11288: AND
11289: IFFALSE 11387
11291: GO 11293
11293: DISABLE
11294: LD_INT 0
11296: PPUSH
// begin stop_talking := true ;
11297: LD_ADDR_OWVAR 56
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11305: LD_ADDR_VAR 0 1
11309: PUSH
11310: LD_INT 22
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 21
11322: PUSH
11323: LD_INT 1
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 23
11332: PUSH
11333: LD_INT 2
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: PPUSH
11345: CALL_OW 69
11349: PUSH
11350: FOR_IN
11351: IFFALSE 11370
// AddExperience ( i , 2 , 450 ) ;
11353: LD_VAR 0 1
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: LD_INT 450
11363: PPUSH
11364: CALL_OW 492
11368: GO 11350
11370: POP
11371: POP
// stop_talking := false ;
11372: LD_ADDR_OWVAR 56
11376: PUSH
11377: LD_INT 0
11379: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11380: LD_STRING ACH_CAMERA
11382: PPUSH
11383: CALL_OW 543
// end ;
11387: PPOPN 1
11389: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11390: LD_EXP 9
11394: IFFALSE 11403
11396: PUSH
11397: LD_EXP 11
11401: NOT
11402: AND
11403: IFFALSE 11462
11405: GO 11407
11407: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11408: LD_EXP 9
11412: PPUSH
11413: CALL_OW 250
11417: PPUSH
11418: LD_EXP 9
11422: PPUSH
11423: CALL_OW 251
11427: PPUSH
11428: LD_INT 2
11430: PPUSH
11431: LD_INT 6
11433: NEG
11434: PPUSH
11435: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11439: LD_EXP 9
11443: PPUSH
11444: CALL_OW 87
// wait ( 0 0$1 ) ;
11448: LD_INT 35
11450: PPUSH
11451: CALL_OW 67
// YouLost ( Spotted ) ;
11455: LD_STRING Spotted
11457: PPUSH
11458: CALL_OW 104
// end ;
11462: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11463: LD_INT 3
11465: PUSH
11466: LD_INT 6
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PPUSH
11473: LD_INT 2
11475: PPUSH
11476: LD_EXP 48
11480: PPUSH
11481: CALL 1054 0 3
11485: IFFALSE 11518
11487: GO 11489
11489: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11490: LD_ADDR_EXP 9
11494: PUSH
11495: LD_INT 3
11497: PUSH
11498: LD_INT 6
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: LD_INT 2
11507: PPUSH
11508: LD_EXP 48
11512: PPUSH
11513: CALL 1054 0 3
11517: ST_TO_ADDR
11518: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11519: LD_INT 22
11521: PUSH
11522: LD_INT 6
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 32
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 3
11541: PUSH
11542: LD_INT 24
11544: PUSH
11545: LD_INT 1000
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: IFFALSE 11626
11567: GO 11569
11569: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11570: LD_ADDR_EXP 9
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 6
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 32
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 3
11597: PUSH
11598: LD_INT 24
11600: PUSH
11601: LD_INT 1000
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: PPUSH
11617: CALL_OW 69
11621: PUSH
11622: LD_INT 1
11624: ARRAY
11625: ST_TO_ADDR
11626: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11627: LD_EXP 9
11631: IFFALSE 11673
11633: PUSH
11634: LD_INT 21
11636: PPUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: LD_INT 24
11652: PUSH
11653: LD_INT 1000
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 70
11672: AND
11673: IFFALSE 11912
11675: GO 11677
11677: DISABLE
11678: LD_INT 0
11680: PPUSH
11681: PPUSH
11682: PPUSH
11683: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11684: LD_ADDR_VAR 0 4
11688: PUSH
11689: LD_EXP 43
11693: PUSH
11694: LD_EXP 45
11698: PUSH
11699: LD_EXP 46
11703: UNION
11704: PPUSH
11705: LD_INT 3
11707: PUSH
11708: LD_INT 25
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 72
11726: UNION
11727: ST_TO_ADDR
// for i in noncombat do
11728: LD_ADDR_VAR 0 1
11732: PUSH
11733: LD_VAR 0 4
11737: PUSH
11738: FOR_IN
11739: IFFALSE 11835
// begin if IsInUnit ( i ) then
11741: LD_VAR 0 1
11745: PPUSH
11746: CALL_OW 310
11750: IFFALSE 11761
// ComExitBuilding ( i ) ;
11752: LD_VAR 0 1
11756: PPUSH
11757: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11761: LD_VAR 0 1
11765: PPUSH
11766: LD_INT 114
11768: PPUSH
11769: LD_INT 97
11771: PPUSH
11772: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11776: LD_VAR 0 1
11780: PPUSH
11781: LD_INT 99
11783: PPUSH
11784: LD_INT 128
11786: PPUSH
11787: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11791: LD_VAR 0 1
11795: PPUSH
11796: LD_INT 91
11798: PPUSH
11799: LD_INT 145
11801: PPUSH
11802: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11806: LD_VAR 0 1
11810: PPUSH
11811: LD_INT 82
11813: PPUSH
11814: LD_INT 153
11816: PPUSH
11817: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11821: LD_VAR 0 1
11825: PPUSH
11826: LD_INT 16
11828: PPUSH
11829: CALL_OW 173
// end ;
11833: GO 11738
11835: POP
11836: POP
// if not allowHeikeAttack then
11837: LD_EXP 11
11841: NOT
11842: IFFALSE 11846
// exit ;
11844: GO 11912
// wait ( 0 0$05 ) ;
11846: LD_INT 175
11848: PPUSH
11849: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11853: LD_EXP 41
11857: PPUSH
11858: LD_STRING D9a-Kur-1
11860: PPUSH
11861: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11865: LD_EXP 44
11869: PPUSH
11870: LD_STRING D9a-Bur-1
11872: PPUSH
11873: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11877: LD_EXP 41
11881: PPUSH
11882: LD_STRING D9a-Kur-2
11884: PPUSH
11885: CALL_OW 94
// omicronFall := true ;
11889: LD_ADDR_EXP 13
11893: PUSH
11894: LD_INT 1
11896: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11897: LD_INT 105
11899: PPUSH
11900: CALL_OW 67
// retreatFromOmicron := true ;
11904: LD_ADDR_EXP 20
11908: PUSH
11909: LD_INT 1
11911: ST_TO_ADDR
// end ;
11912: PPOPN 4
11914: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11915: LD_INT 16
11917: PPUSH
11918: LD_INT 3
11920: PUSH
11921: LD_INT 22
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 23
11937: PUSH
11938: LD_INT 3
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PPUSH
11949: CALL_OW 70
11953: IFFALSE 12036
11955: GO 11957
11957: DISABLE
11958: LD_INT 0
11960: PPUSH
// begin enable ;
11961: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11962: LD_ADDR_VAR 0 1
11966: PUSH
11967: LD_INT 16
11969: PPUSH
11970: LD_INT 3
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 23
11989: PUSH
11990: LD_INT 3
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PPUSH
12001: CALL_OW 70
12005: PUSH
12006: FOR_IN
12007: IFFALSE 12034
// begin escapeCounter := escapeCounter + 1 ;
12009: LD_ADDR_EXP 19
12013: PUSH
12014: LD_EXP 19
12018: PUSH
12019: LD_INT 1
12021: PLUS
12022: ST_TO_ADDR
// RemoveUnit ( i ) ;
12023: LD_VAR 0 1
12027: PPUSH
12028: CALL_OW 64
// end ;
12032: GO 12006
12034: POP
12035: POP
// end ;
12036: PPOPN 1
12038: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
12039: LD_OWVAR 1
12043: PUSH
12044: LD_INT 13650
12046: PUSH
12047: LD_INT 0
12049: PPUSH
12050: LD_INT 3150
12052: PPUSH
12053: CALL_OW 12
12057: PLUS
12058: GREATEREQUAL
12059: IFFALSE 12068
12061: GO 12063
12063: DISABLE
// SmallAmericanReinforcements ;
12064: CALL 7213 0 0
12068: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
12069: LD_OWVAR 1
12073: PUSH
12074: LD_INT 31500
12076: PUSH
12077: LD_INT 29400
12079: PUSH
12080: LD_INT 27300
12082: PUSH
12083: LD_INT 25200
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: LD_OWVAR 67
12096: ARRAY
12097: GREATEREQUAL
12098: IFFALSE 12163
12100: GO 12102
12102: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
12103: LD_EXP 49
12107: PPUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 72
12122: PPUSH
12123: LD_INT 62
12125: PPUSH
12126: LD_INT 22
12128: PPUSH
12129: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12133: LD_EXP 50
12137: PPUSH
12138: LD_INT 69
12140: PPUSH
12141: LD_INT 27
12143: PPUSH
12144: CALL_OW 111
// wait ( 1 1$00 ) ;
12148: LD_INT 2100
12150: PPUSH
12151: CALL_OW 67
// startAttackOnOmicron := true ;
12155: LD_ADDR_EXP 6
12159: PUSH
12160: LD_INT 1
12162: ST_TO_ADDR
// end ;
12163: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12164: LD_EXP 22
12168: PUSH
12169: LD_INT 0
12171: EQUAL
12172: IFFALSE 14244
12174: GO 12176
12176: DISABLE
12177: LD_INT 0
12179: PPUSH
12180: PPUSH
12181: PPUSH
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12186: LD_INT 5
12188: PPUSH
12189: LD_INT 2
12191: PPUSH
12192: CALL_OW 343
// PrepareOmarForces ;
12196: CALL 1658 0 0
// wait ( 0 0$03 ) ;
12200: LD_INT 105
12202: PPUSH
12203: CALL_OW 67
// allowHeikeAttack := true ;
12207: LD_ADDR_EXP 11
12211: PUSH
12212: LD_INT 1
12214: ST_TO_ADDR
// activeGrishkoAI := false ;
12215: LD_ADDR_EXP 10
12219: PUSH
12220: LD_INT 0
12222: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12223: LD_INT 20
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL_OW 424
// if not hillBase then
12233: LD_EXP 15
12237: NOT
12238: IFFALSE 12247
// ChangeMissionObjectives ( HillDone ) ;
12240: LD_STRING HillDone
12242: PPUSH
12243: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12247: LD_EXP 34
12251: PPUSH
12252: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12256: LD_ADDR_VAR 0 1
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 21
12273: PUSH
12274: LD_INT 1
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PPUSH
12285: CALL_OW 69
12289: PUSH
12290: FOR_IN
12291: IFFALSE 12315
// if HasTask ( i ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 314
12302: IFFALSE 12313
// ComHold ( i ) ;
12304: LD_VAR 0 1
12308: PPUSH
12309: CALL_OW 140
12313: GO 12290
12315: POP
12316: POP
// DialogueOn ;
12317: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12321: LD_EXP 34
12325: PPUSH
12326: LD_STRING DO-assault-1
12328: PPUSH
12329: CALL_OW 94
// DialogueOff ;
12333: CALL_OW 7
// game_speed := 4 ;
12337: LD_ADDR_OWVAR 65
12341: PUSH
12342: LD_INT 4
12344: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_EXP 47
12354: PPUSH
12355: LD_INT 3
12357: PUSH
12358: LD_INT 54
12360: PUSH
12361: EMPTY
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 72
12372: PUSH
12373: FOR_IN
12374: IFFALSE 12393
// ComMoveXY ( i , 226 , 114 ) ;
12376: LD_VAR 0 1
12380: PPUSH
12381: LD_INT 226
12383: PPUSH
12384: LD_INT 114
12386: PPUSH
12387: CALL_OW 111
12391: GO 12373
12393: POP
12394: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12395: LD_EXP 42
12399: PPUSH
12400: LD_INT 22
12402: PUSH
12403: LD_INT 6
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 4
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PPUSH
12424: CALL_OW 69
12428: PPUSH
12429: LD_EXP 42
12433: PPUSH
12434: CALL_OW 74
12438: PPUSH
12439: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12443: LD_STRING Attack
12445: PPUSH
12446: CALL_OW 337
// music_class := music_combat ;
12450: LD_ADDR_OWVAR 72
12454: PUSH
12455: LD_INT 1
12457: ST_TO_ADDR
// music_nat := 4 ;
12458: LD_ADDR_OWVAR 71
12462: PUSH
12463: LD_INT 4
12465: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12466: LD_INT 5
12468: PPUSH
12469: LD_EXP 42
12473: PPUSH
12474: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12478: LD_INT 6
12480: PPUSH
12481: LD_EXP 39
12485: PPUSH
12486: LD_INT 25
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 72
12500: PUSH
12501: LD_INT 4
12503: ARRAY
12504: PPUSH
12505: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12509: LD_ADDR_VAR 0 1
12513: PUSH
12514: LD_EXP 39
12518: PPUSH
12519: LD_INT 3
12521: PUSH
12522: LD_INT 25
12524: PUSH
12525: LD_INT 4
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 72
12540: PUSH
12541: FOR_IN
12542: IFFALSE 12561
// ComAgressiveMove ( i , 221 , 110 ) ;
12544: LD_VAR 0 1
12548: PPUSH
12549: LD_INT 221
12551: PPUSH
12552: LD_INT 110
12554: PPUSH
12555: CALL_OW 114
12559: GO 12541
12561: POP
12562: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12563: LD_EXP 39
12567: PPUSH
12568: LD_INT 25
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 72
12582: PPUSH
12583: LD_INT 214
12585: PPUSH
12586: LD_INT 124
12588: PPUSH
12589: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12593: LD_EXP 39
12597: PPUSH
12598: LD_INT 25
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 72
12612: PUSH
12613: LD_INT 4
12615: ARRAY
12616: PPUSH
12617: LD_INT 214
12619: PPUSH
12620: LD_INT 114
12622: PPUSH
12623: LD_INT 0
12625: PPUSH
12626: CALL_OW 132
// if IsOk ( Grishko ) then
12630: LD_EXP 42
12634: PPUSH
12635: CALL_OW 302
12639: IFFALSE 12665
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12641: LD_EXP 42
12645: PPUSH
12646: LD_STRING D9-Gri-1
12648: PPUSH
12649: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12653: LD_EXP 41
12657: PPUSH
12658: LD_STRING D9-Kur-1
12660: PPUSH
12661: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12665: LD_INT 35
12667: PPUSH
12668: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12672: LD_EXP 34
12676: PPUSH
12677: LD_INT 233
12679: PPUSH
12680: LD_INT 130
12682: PPUSH
12683: CALL_OW 114
// if IsOk ( Grishko ) then
12687: LD_EXP 42
12691: PPUSH
12692: CALL_OW 302
12696: IFFALSE 12722
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12698: LD_EXP 42
12702: PPUSH
12703: LD_STRING D9-Gri-2
12705: PPUSH
12706: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12710: LD_EXP 41
12714: PPUSH
12715: LD_STRING D9-Kur-2
12717: PPUSH
12718: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12722: LD_EXP 42
12726: PPUSH
12727: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12731: LD_EXP 42
12735: PPUSH
12736: LD_INT 211
12738: PPUSH
12739: LD_INT 104
12741: PPUSH
12742: CALL_OW 171
// AddComHold ( Grishko ) ;
12746: LD_EXP 42
12750: PPUSH
12751: CALL_OW 200
// repeat wait ( 3 ) ;
12755: LD_INT 3
12757: PPUSH
12758: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12762: LD_EXP 42
12766: PPUSH
12767: CALL_OW 310
12771: NOT
12772: IFFALSE 12755
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12774: LD_EXP 39
12778: PPUSH
12779: LD_INT 34
12781: PUSH
12782: LD_INT 26
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 72
12793: PPUSH
12794: LD_EXP 42
12798: PPUSH
12799: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12803: LD_EXP 39
12807: PPUSH
12808: LD_INT 34
12810: PUSH
12811: LD_INT 26
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 72
12822: PPUSH
12823: LD_INT 215
12825: PPUSH
12826: LD_INT 106
12828: PPUSH
12829: CALL_OW 174
// repeat wait ( 3 ) ;
12833: LD_INT 3
12835: PPUSH
12836: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12840: LD_EXP 42
12844: PPUSH
12845: CALL_OW 256
12849: PUSH
12850: LD_INT 1000
12852: LESS
12853: IFFALSE 12833
// NormalAttack ( 5 , Grishko ) ;
12855: LD_INT 5
12857: PPUSH
12858: LD_EXP 42
12862: PPUSH
12863: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12867: LD_INT 6
12869: PPUSH
12870: LD_EXP 39
12874: PPUSH
12875: LD_INT 25
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 72
12889: PUSH
12890: LD_INT 4
12892: ARRAY
12893: PPUSH
12894: CALL_OW 472
// if IsOk ( Grishko ) then
12898: LD_EXP 42
12902: PPUSH
12903: CALL_OW 302
12907: IFFALSE 12933
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12909: LD_EXP 42
12913: PPUSH
12914: LD_STRING D9-Gri-3
12916: PPUSH
12917: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12921: LD_EXP 41
12925: PPUSH
12926: LD_STRING D9-Kur-3
12928: PPUSH
12929: CALL_OW 94
// end ; music_class := music_auto ;
12933: LD_ADDR_OWVAR 72
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// music_nat := music_auto ;
12941: LD_ADDR_OWVAR 71
12945: PUSH
12946: LD_INT 0
12948: ST_TO_ADDR
// for i in omarSquad do
12949: LD_ADDR_VAR 0 1
12953: PUSH
12954: LD_EXP 39
12958: PUSH
12959: FOR_IN
12960: IFFALSE 13104
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 247
12971: PUSH
12972: LD_INT 2
12974: EQUAL
12975: IFFALSE 12992
12977: PUSH
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 256
12987: PUSH
12988: LD_INT 1000
12990: LESS
12991: AND
12992: IFFALSE 13058
// begin driver := IsDrivenBy ( i ) ;
12994: LD_ADDR_VAR 0 2
12998: PUSH
12999: LD_VAR 0 1
13003: PPUSH
13004: CALL_OW 311
13008: ST_TO_ADDR
// veh := i ;
13009: LD_ADDR_VAR 0 3
13013: PUSH
13014: LD_VAR 0 1
13018: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
13019: LD_VAR 0 2
13023: PPUSH
13024: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
13028: LD_VAR 0 2
13032: PPUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
13042: LD_VAR 0 2
13046: PPUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: CALL_OW 180
// end else
13056: GO 13102
// if GetLives ( i ) < 500 then
13058: LD_VAR 0 1
13062: PPUSH
13063: CALL_OW 256
13067: PUSH
13068: LD_INT 500
13070: LESS
13071: IFFALSE 13102
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
13073: LD_EXP 39
13077: PPUSH
13078: LD_INT 25
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 72
13092: PPUSH
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 188
// end ; end ;
13102: GO 12959
13104: POP
13105: POP
// repeat wait ( 0 0$1 ) ;
13106: LD_INT 35
13108: PPUSH
13109: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
13113: LD_EXP 39
13117: PPUSH
13118: LD_INT 3
13120: PUSH
13121: LD_INT 24
13123: PUSH
13124: LD_INT 1000
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PPUSH
13149: CALL_OW 72
13153: NOT
13154: IFFALSE 13185
13156: PUSH
13157: LD_EXP 39
13161: PPUSH
13162: LD_INT 3
13164: PUSH
13165: LD_INT 24
13167: PUSH
13168: LD_INT 250
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PPUSH
13179: CALL_OW 72
13183: NOT
13184: AND
13185: IFFALSE 13106
// wait ( 0 0$2 ) ;
13187: LD_INT 70
13189: PPUSH
13190: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13194: LD_ADDR_VAR 0 5
13198: PUSH
13199: LD_EXP 39
13203: PPUSH
13204: LD_INT 58
13206: PUSH
13207: EMPTY
13208: LIST
13209: PUSH
13210: LD_INT 21
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 72
13228: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13229: LD_ADDR_VAR 0 6
13233: PUSH
13234: LD_EXP 39
13238: PPUSH
13239: LD_INT 25
13241: PUSH
13242: LD_INT 3
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 3
13251: PUSH
13252: LD_INT 55
13254: PUSH
13255: EMPTY
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PPUSH
13266: CALL_OW 72
13270: ST_TO_ADDR
// for i := 1 to tmp do
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: DOUBLE
13277: LD_INT 1
13279: DEC
13280: ST_TO_ADDR
13281: LD_VAR 0 5
13285: PUSH
13286: FOR_TO
13287: IFFALSE 13317
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13289: LD_VAR 0 6
13293: PUSH
13294: LD_VAR 0 1
13298: ARRAY
13299: PPUSH
13300: LD_VAR 0 5
13304: PUSH
13305: LD_VAR 0 1
13309: ARRAY
13310: PPUSH
13311: CALL_OW 120
13315: GO 13286
13317: POP
13318: POP
// wait ( 0 0$5 ) ;
13319: LD_INT 175
13321: PPUSH
13322: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13326: LD_EXP 39
13330: PPUSH
13331: LD_INT 199
13333: PPUSH
13334: LD_INT 141
13336: PPUSH
13337: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13341: LD_EXP 34
13345: PPUSH
13346: LD_INT 190
13348: PPUSH
13349: LD_INT 143
13351: PPUSH
13352: CALL_OW 114
// AddComHold ( Omar ) ;
13356: LD_EXP 34
13360: PPUSH
13361: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13365: LD_EXP 39
13369: PPUSH
13370: LD_INT 2
13372: PUSH
13373: LD_INT 25
13375: PUSH
13376: LD_INT 1
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 25
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: PPUSH
13398: CALL_OW 72
13402: PPUSH
13403: LD_INT 161
13405: PPUSH
13406: LD_INT 130
13408: PPUSH
13409: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13413: LD_EXP 39
13417: PPUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 1
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 72
13432: PPUSH
13433: LD_INT 163
13435: PPUSH
13436: LD_INT 122
13438: PPUSH
13439: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13443: LD_EXP 39
13447: PPUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: PUSH
13463: LD_INT 4
13465: ARRAY
13466: PPUSH
13467: LD_INT 165
13469: PPUSH
13470: LD_INT 118
13472: PPUSH
13473: LD_INT 0
13475: PPUSH
13476: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13480: LD_EXP 39
13484: PPUSH
13485: LD_INT 25
13487: PUSH
13488: LD_INT 1
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 72
13499: PUSH
13500: LD_INT 4
13502: ARRAY
13503: PPUSH
13504: LD_INT 159
13506: PPUSH
13507: LD_INT 116
13509: PPUSH
13510: LD_INT 0
13512: PPUSH
13513: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13517: LD_EXP 39
13521: PPUSH
13522: LD_INT 21
13524: PUSH
13525: LD_INT 2
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 72
13536: PPUSH
13537: LD_INT 169
13539: PPUSH
13540: LD_INT 114
13542: PPUSH
13543: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13547: LD_INT 35
13549: PPUSH
13550: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13554: LD_ADDR_VAR 0 5
13558: PUSH
13559: LD_EXP 39
13563: PPUSH
13564: LD_INT 25
13566: PUSH
13567: LD_INT 1
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PPUSH
13574: CALL_OW 72
13578: ST_TO_ADDR
// for i in tmp do
13579: LD_ADDR_VAR 0 1
13583: PUSH
13584: LD_VAR 0 5
13588: PUSH
13589: FOR_IN
13590: IFFALSE 13691
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 256
13601: PUSH
13602: LD_INT 600
13604: LESS
13605: IFFALSE 13628
13607: PUSH
13608: LD_VAR 0 1
13612: PPUSH
13613: LD_INT 161
13615: PPUSH
13616: LD_INT 130
13618: PPUSH
13619: CALL_OW 297
13623: PUSH
13624: LD_INT 6
13626: GREATER
13627: AND
13628: IFFALSE 13645
// ComMoveXY ( i , 161 , 130 ) ;
13630: LD_VAR 0 1
13634: PPUSH
13635: LD_INT 161
13637: PPUSH
13638: LD_INT 130
13640: PPUSH
13641: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13645: LD_VAR 0 1
13649: PPUSH
13650: CALL_OW 256
13654: PUSH
13655: LD_INT 1000
13657: EQUAL
13658: IFFALSE 13672
13660: PUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 314
13670: NOT
13671: AND
13672: IFFALSE 13689
// ComAgressiveMove ( i , 160 , 109 ) ;
13674: LD_VAR 0 1
13678: PPUSH
13679: LD_INT 160
13681: PPUSH
13682: LD_INT 109
13684: PPUSH
13685: CALL_OW 114
// end ;
13689: GO 13589
13691: POP
13692: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13693: LD_ADDR_VAR 0 5
13697: PUSH
13698: LD_EXP 39
13702: PPUSH
13703: LD_INT 21
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 72
13717: ST_TO_ADDR
// for i in tmp do
13718: LD_ADDR_VAR 0 1
13722: PUSH
13723: LD_VAR 0 5
13727: PUSH
13728: FOR_IN
13729: IFFALSE 14005
// begin tmp2 := IsDrivenBy ( i ) ;
13731: LD_ADDR_VAR 0 6
13735: PUSH
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 311
13745: ST_TO_ADDR
// if not tmp2 then
13746: LD_VAR 0 6
13750: NOT
13751: IFFALSE 13755
// continue ;
13753: GO 13728
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13755: LD_VAR 0 1
13759: PPUSH
13760: CALL_OW 256
13764: PUSH
13765: LD_INT 600
13767: GREATEREQUAL
13768: IFFALSE 13785
13770: PUSH
13771: LD_VAR 0 1
13775: PPUSH
13776: CALL_OW 110
13780: PUSH
13781: LD_INT 1
13783: EQUAL
13784: AND
13785: IFFALSE 13799
// SetTag ( i , 0 ) ;
13787: LD_VAR 0 1
13791: PPUSH
13792: LD_INT 0
13794: PPUSH
13795: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 256
13808: PUSH
13809: LD_INT 600
13811: GREATEREQUAL
13812: IFFALSE 13826
13814: PUSH
13815: LD_VAR 0 1
13819: PPUSH
13820: CALL_OW 110
13824: NOT
13825: AND
13826: IFFALSE 13852
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13828: LD_VAR 0 1
13832: PPUSH
13833: LD_VAR 0 7
13837: PPUSH
13838: LD_VAR 0 1
13842: PPUSH
13843: CALL_OW 74
13847: PPUSH
13848: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13852: LD_VAR 0 1
13856: PPUSH
13857: CALL_OW 256
13861: PUSH
13862: LD_INT 600
13864: LESS
13865: IFFALSE 13879
13867: PUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: CALL_OW 110
13877: NOT
13878: AND
13879: IFFALSE 13908
// begin SetTag ( i , 1 ) ;
13881: LD_VAR 0 1
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13893: LD_VAR 0 1
13897: PPUSH
13898: LD_INT 202
13900: PPUSH
13901: LD_INT 150
13903: PPUSH
13904: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 110
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: IFFALSE 13944
13923: PUSH
13924: LD_VAR 0 1
13928: PPUSH
13929: LD_INT 202
13931: PPUSH
13932: LD_INT 150
13934: PPUSH
13935: CALL_OW 297
13939: PUSH
13940: LD_INT 6
13942: LESS
13943: AND
13944: IFFALSE 13952
13946: PUSH
13947: LD_VAR 0 6
13951: AND
13952: IFFALSE 14003
// begin ComExitVehicle ( tmp2 ) ;
13954: LD_VAR 0 6
13958: PPUSH
13959: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13963: LD_VAR 0 6
13967: PPUSH
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13977: LD_VAR 0 6
13981: PPUSH
13982: LD_INT 700
13984: PPUSH
13985: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13989: LD_VAR 0 6
13993: PPUSH
13994: LD_VAR 0 1
13998: PPUSH
13999: CALL_OW 180
// end ; end ;
14003: GO 13728
14005: POP
14006: POP
// until kirovDestroyed ;
14007: LD_EXP 16
14011: IFFALSE 13547
// repeat wait ( 0 0$1 ) ;
14013: LD_INT 35
14015: PPUSH
14016: CALL_OW 67
// for i in omarSquad union Omar do
14020: LD_ADDR_VAR 0 1
14024: PUSH
14025: LD_EXP 39
14029: PUSH
14030: LD_EXP 34
14034: UNION
14035: PUSH
14036: FOR_IN
14037: IFFALSE 14211
// if IsInArea ( i , southRoadArea ) then
14039: LD_VAR 0 1
14043: PPUSH
14044: LD_INT 15
14046: PPUSH
14047: CALL_OW 308
14051: IFFALSE 14064
// RemoveUnit ( i ) else
14053: LD_VAR 0 1
14057: PPUSH
14058: CALL_OW 64
14062: GO 14209
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 257
14073: PUSH
14074: LD_INT 3
14076: EQUAL
14077: IFFALSE 14091
14079: PUSH
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 310
14089: NOT
14090: AND
14091: IFFALSE 14141
14093: PUSH
14094: LD_INT 22
14096: PUSH
14097: LD_INT 5
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 24
14106: PUSH
14107: LD_INT 251
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 58
14126: PUSH
14127: EMPTY
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PPUSH
14136: CALL_OW 69
14140: AND
14141: IFFALSE 14194
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
14143: LD_VAR 0 1
14147: PPUSH
14148: LD_INT 22
14150: PUSH
14151: LD_INT 5
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 21
14160: PUSH
14161: LD_INT 2
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 58
14170: PUSH
14171: EMPTY
14172: LIST
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: PPUSH
14179: CALL_OW 69
14183: PUSH
14184: LD_INT 1
14186: ARRAY
14187: PPUSH
14188: CALL_OW 120
14192: GO 14209
// ComMoveXY ( i , 208 , 162 ) ;
14194: LD_VAR 0 1
14198: PPUSH
14199: LD_INT 208
14201: PPUSH
14202: LD_INT 162
14204: PPUSH
14205: CALL_OW 111
// end ;
14209: GO 14036
14211: POP
14212: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14213: LD_INT 22
14215: PUSH
14216: LD_INT 5
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PUSH
14223: LD_INT 21
14225: PUSH
14226: LD_INT 1
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 69
14241: NOT
14242: IFFALSE 14013
// end ;
14244: PPOPN 7
14246: END
// every 0 0$1 trigger IsDead ( kirov ) do
14247: LD_INT 71
14249: PPUSH
14250: CALL_OW 301
14254: IFFALSE 14271
14256: GO 14258
14258: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14259: LD_EXP 26
14263: PPUSH
14264: LD_STRING DH-1-Kirov
14266: PPUSH
14267: CALL_OW 88
14271: END
// every 0 0$1 trigger See ( 2 , beria ) do
14272: LD_INT 2
14274: PPUSH
14275: LD_INT 106
14277: PPUSH
14278: CALL_OW 292
14282: IFFALSE 14299
14284: GO 14286
14286: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14287: LD_EXP 26
14291: PPUSH
14292: LD_STRING DH-1-Beria
14294: PPUSH
14295: CALL_OW 88
14299: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14300: LD_INT 2
14302: PPUSH
14303: LD_INT 112
14305: PPUSH
14306: CALL_OW 292
14310: IFFALSE 14579
14312: GO 14314
14314: DISABLE
// begin DialogueOn ;
14315: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14319: LD_INT 112
14321: PPUSH
14322: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14326: LD_EXP 26
14330: PPUSH
14331: LD_STRING DH-1-Kagan
14333: PPUSH
14334: CALL_OW 88
// if Kamil then
14338: LD_EXP 30
14342: IFFALSE 14380
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14344: LD_EXP 30
14348: PPUSH
14349: LD_STRING DKam-Kagan-2
14351: PPUSH
14352: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14356: LD_EXP 27
14360: PPUSH
14361: LD_STRING DG-Kagan-3
14363: PPUSH
14364: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14368: LD_EXP 27
14372: PPUSH
14373: LD_STRING DG-Kagan-4
14375: PPUSH
14376: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14380: LD_STRING KaganBase
14382: PPUSH
14383: CALL_OW 97
14387: PUSH
14388: LD_INT 1
14390: DOUBLE
14391: EQUAL
14392: IFTRUE 14396
14394: GO 14491
14396: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14397: LD_EXP 26
14401: PPUSH
14402: LD_STRING DH-Kagan-5
14404: PPUSH
14405: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14409: LD_EXP 26
14413: PPUSH
14414: LD_STRING DH-Kagan-6
14416: PPUSH
14417: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14421: LD_EXP 37
14425: PPUSH
14426: LD_STRING DShar-Kagan-7
14428: PPUSH
14429: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14433: LD_EXP 26
14437: PPUSH
14438: LD_STRING DH-Kagan-8
14440: PPUSH
14441: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14445: LD_EXP 26
14449: PPUSH
14450: LD_STRING DH-Kagan-9
14452: PPUSH
14453: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14457: LD_EXP 37
14461: PPUSH
14462: LD_STRING DShar-Kagan-10
14464: PPUSH
14465: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14469: LD_EXP 26
14473: PPUSH
14474: LD_STRING DH-Kagan-11
14476: PPUSH
14477: CALL_OW 88
// kaganCaptured := true ;
14481: LD_ADDR_EXP 24
14485: PUSH
14486: LD_INT 1
14488: ST_TO_ADDR
// end ; 2 :
14489: GO 14575
14491: LD_INT 2
14493: DOUBLE
14494: EQUAL
14495: IFTRUE 14499
14497: GO 14574
14499: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14500: LD_INT 22
14502: PUSH
14503: LD_INT 8
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL_OW 69
14514: IFFALSE 14522
14516: PUSH
14517: LD_EXP 36
14521: AND
14522: IFFALSE 14536
// Say ( Heike , DH-Kagan-a-5 ) ;
14524: LD_EXP 26
14528: PPUSH
14529: LD_STRING DH-Kagan-a-5
14531: PPUSH
14532: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14536: LD_EXP 26
14540: PPUSH
14541: LD_STRING DH-Kagan-a-6
14543: PPUSH
14544: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14548: LD_EXP 26
14552: PPUSH
14553: LD_STRING DH-Kagan-a-7
14555: PPUSH
14556: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14560: LD_EXP 27
14564: PPUSH
14565: LD_STRING DG-Kagan-a-8
14567: PPUSH
14568: CALL_OW 88
// end ; end ;
14572: GO 14575
14574: POP
// DialogueOff ;
14575: CALL_OW 7
// end ;
14579: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14580: LD_EXP 18
14584: IFTRUE 14599
14586: PUSH
14587: LD_INT 112
14589: PPUSH
14590: CALL_OW 255
14594: PUSH
14595: LD_INT 2
14597: EQUAL
14598: OR
14599: IFFALSE 14611
14601: GO 14603
14603: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14604: LD_STRING KaganDone
14606: PPUSH
14607: CALL_OW 337
14611: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14612: LD_EXP 6
14616: IFFALSE 14639
14618: PUSH
14619: LD_EXP 49
14623: PPUSH
14624: LD_INT 95
14626: PUSH
14627: LD_INT 19
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 72
14638: AND
14639: IFFALSE 14716
14641: GO 14643
14643: DISABLE
// begin DialogueOn ;
14644: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14648: LD_INT 63
14650: PPUSH
14651: LD_INT 32
14653: PPUSH
14654: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14658: LD_INT 63
14660: PPUSH
14661: LD_INT 32
14663: PPUSH
14664: LD_INT 2
14666: PPUSH
14667: LD_INT 12
14669: NEG
14670: PPUSH
14671: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14675: LD_EXP 26
14679: PPUSH
14680: LD_STRING DH-Omicron-1
14682: PPUSH
14683: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14687: LD_EXP 28
14691: PPUSH
14692: LD_STRING DM-Omicron-2
14694: PPUSH
14695: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14699: LD_INT 63
14701: PPUSH
14702: LD_INT 32
14704: PPUSH
14705: LD_INT 2
14707: PPUSH
14708: CALL_OW 331
// DialogueOff ;
14712: CALL_OW 7
// end ;
14716: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14717: LD_INT 2
14719: PPUSH
14720: LD_EXP 51
14724: PPUSH
14725: CALL_OW 292
14729: IFTRUE 14746
14731: PUSH
14732: LD_EXP 51
14736: PPUSH
14737: CALL_OW 255
14741: PUSH
14742: LD_INT 2
14744: EQUAL
14745: OR
14746: IFTRUE 14761
14748: PUSH
14749: LD_INT 106
14751: PPUSH
14752: CALL_OW 255
14756: PUSH
14757: LD_INT 2
14759: EQUAL
14760: OR
14761: IFFALSE 14774
14763: PUSH
14764: LD_EXP 51
14768: PPUSH
14769: CALL_OW 302
14773: AND
14774: IFFALSE 14787
14776: PUSH
14777: LD_EXP 26
14781: PPUSH
14782: CALL_OW 302
14786: AND
14787: IFFALSE 14800
14789: PUSH
14790: LD_EXP 36
14794: PPUSH
14795: CALL_OW 302
14799: AND
14800: IFFALSE 15553
14802: GO 14804
14804: DISABLE
14805: LD_INT 0
14807: PPUSH
14808: PPUSH
14809: PPUSH
14810: PPUSH
14811: PPUSH
// begin DialogueOn ;
14812: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14816: LD_INT 111
14818: PPUSH
14819: LD_INT 90
14821: PPUSH
14822: LD_INT 2
14824: PPUSH
14825: LD_INT 6
14827: NEG
14828: PPUSH
14829: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14833: LD_INT 111
14835: PPUSH
14836: LD_INT 90
14838: PPUSH
14839: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14843: LD_EXP 36
14847: PPUSH
14848: LD_STRING DA-Cap-1
14850: PPUSH
14851: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14855: LD_EXP 26
14859: PPUSH
14860: LD_STRING DH-Cap-2
14862: PPUSH
14863: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14867: LD_INT 111
14869: PPUSH
14870: LD_INT 90
14872: PPUSH
14873: LD_INT 2
14875: PPUSH
14876: CALL_OW 331
// DialogueOff ;
14880: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14884: LD_INT 35
14886: PPUSH
14887: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14891: LD_EXP 17
14895: IFTRUE 14910
14897: PUSH
14898: LD_INT 106
14900: PPUSH
14901: CALL_OW 255
14905: PUSH
14906: LD_INT 2
14908: EQUAL
14909: OR
14910: IFTRUE 14927
14912: PUSH
14913: LD_EXP 51
14917: PPUSH
14918: CALL_OW 255
14922: PUSH
14923: LD_INT 2
14925: EQUAL
14926: OR
14927: IFFALSE 14940
14929: PUSH
14930: LD_EXP 51
14934: PPUSH
14935: CALL_OW 302
14939: AND
14940: IFFALSE 14953
14942: PUSH
14943: LD_EXP 36
14947: PPUSH
14948: CALL_OW 302
14952: AND
14953: IFFALSE 14965
14955: PUSH
14956: LD_INT 2
14958: PPUSH
14959: CALL_OW 463
14963: NOT
14964: AND
14965: IFFALSE 15017
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_INT 3
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 92
14990: PUSH
14991: LD_INT 110
14993: PUSH
14994: LD_INT 95
14996: PUSH
14997: LD_INT 12
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: PPUSH
15011: CALL_OW 69
15015: NOT
15016: AND
15017: IFFALSE 15069
15019: PUSH
15020: LD_INT 22
15022: PUSH
15023: LD_INT 3
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 30
15032: PUSH
15033: LD_INT 5
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 92
15042: PUSH
15043: LD_INT 110
15045: PUSH
15046: LD_INT 95
15048: PUSH
15049: LD_INT 12
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 69
15067: NOT
15068: AND
15069: IFFALSE 14884
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: LD_EXP 38
15080: PUSH
15081: LD_EXP 29
15085: PUSH
15086: LD_EXP 30
15090: PUSH
15091: LD_EXP 32
15095: PUSH
15096: LD_EXP 31
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: UNION
15107: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
15108: LD_ADDR_VAR 0 2
15112: PUSH
15113: LD_VAR 0 2
15117: PPUSH
15118: LD_INT 50
15120: PUSH
15121: EMPTY
15122: LIST
15123: PPUSH
15124: CALL_OW 72
15128: ST_TO_ADDR
// if tmp < 2 then
15129: LD_VAR 0 2
15133: PUSH
15134: LD_INT 2
15136: LESS
15137: IFFALSE 15149
// q := 2 else
15139: LD_ADDR_VAR 0 4
15143: PUSH
15144: LD_INT 2
15146: ST_TO_ADDR
15147: GO 15162
// q := Query ( LabCap ) ;
15149: LD_ADDR_VAR 0 4
15153: PUSH
15154: LD_STRING LabCap
15156: PPUSH
15157: CALL_OW 97
15161: ST_TO_ADDR
// case q of 1 :
15162: LD_VAR 0 4
15166: PUSH
15167: LD_INT 1
15169: DOUBLE
15170: EQUAL
15171: IFTRUE 15175
15173: GO 15517
15175: POP
// begin DoNotAttack ( 2 , ruLab ) ;
15176: LD_INT 2
15178: PPUSH
15179: LD_EXP 51
15183: PPUSH
15184: CALL_OW 471
// labCaptured := true ;
15188: LD_ADDR_EXP 21
15192: PUSH
15193: LD_INT 1
15195: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15196: LD_EXP 26
15200: PPUSH
15201: LD_STRING DH-Cap-a-1
15203: PPUSH
15204: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15208: LD_EXP 36
15212: PPUSH
15213: LD_STRING DA-Cap-a-2
15215: PPUSH
15216: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
15220: LD_ADDR_VAR 0 5
15224: PUSH
15225: LD_EXP 36
15229: PUSH
15230: LD_INT -3
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT -2
15239: PUSH
15240: LD_INT -4
15242: PUSH
15243: LD_EXP 26
15247: PUSH
15248: LD_EXP 27
15252: PUSH
15253: LD_EXP 35
15257: PUSH
15258: LD_EXP 33
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: ADD
15271: PUSH
15272: LD_INT -3
15274: PUSH
15275: EMPTY
15276: LIST
15277: ADD
15278: PUSH
15279: LD_VAR 0 2
15283: ADD
15284: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15285: LD_ADDR_VAR 0 3
15289: PUSH
15290: LD_STRING Select two characters to go with Aviradze
15292: PPUSH
15293: LD_INT 2
15295: PPUSH
15296: LD_INT 2
15298: PPUSH
15299: LD_VAR 0 5
15303: PPUSH
15304: EMPTY
15305: PPUSH
15306: CALL_OW 42
15310: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15311: LD_EXP 51
15315: PPUSH
15316: LD_INT 8
15318: PPUSH
15319: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15323: LD_EXP 36
15327: PPUSH
15328: LD_INT 8
15330: PPUSH
15331: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15335: LD_ADDR_EXP 40
15339: PUSH
15340: LD_EXP 36
15344: PUSH
15345: EMPTY
15346: LIST
15347: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15348: LD_EXP 36
15352: PPUSH
15353: CALL_OW 310
15357: IFFALSE 15368
// ComExit ( Aviradze ) ;
15359: LD_EXP 36
15363: PPUSH
15364: CALL 79409 0 1
// wait ( 3 ) ;
15368: LD_INT 3
15370: PPUSH
15371: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15375: LD_EXP 36
15379: PPUSH
15380: LD_EXP 51
15384: PPUSH
15385: CALL_OW 120
// for i := 1 to 2 do
15389: LD_ADDR_VAR 0 1
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_INT 2
15401: PUSH
15402: FOR_TO
15403: IFFALSE 15506
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15405: LD_ADDR_EXP 40
15409: PUSH
15410: LD_EXP 40
15414: PUSH
15415: LD_VAR 0 3
15419: PUSH
15420: LD_VAR 0 1
15424: ARRAY
15425: UNION
15426: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15427: LD_VAR 0 3
15431: PUSH
15432: LD_VAR 0 1
15436: ARRAY
15437: PPUSH
15438: LD_INT 8
15440: PPUSH
15441: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15445: LD_VAR 0 3
15449: PUSH
15450: LD_VAR 0 1
15454: ARRAY
15455: PPUSH
15456: CALL_OW 310
15460: IFFALSE 15477
// ComExit ( tmp2 [ i ] ) ;
15462: LD_VAR 0 3
15466: PUSH
15467: LD_VAR 0 1
15471: ARRAY
15472: PPUSH
15473: CALL 79409 0 1
// wait ( 3 ) ;
15477: LD_INT 3
15479: PPUSH
15480: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15484: LD_VAR 0 3
15488: PUSH
15489: LD_VAR 0 1
15493: ARRAY
15494: PPUSH
15495: LD_EXP 51
15499: PPUSH
15500: CALL_OW 120
// end ;
15504: GO 15402
15506: POP
15507: POP
// SetAchievement ( ACH_LAB ) ;
15508: LD_STRING ACH_LAB
15510: PPUSH
15511: CALL_OW 543
// end ; 2 :
15515: GO 15553
15517: LD_INT 2
15519: DOUBLE
15520: EQUAL
15521: IFTRUE 15525
15523: GO 15552
15525: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15526: LD_EXP 26
15530: PPUSH
15531: LD_STRING DH-Cap-b-1
15533: PPUSH
15534: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15538: LD_EXP 36
15542: PPUSH
15543: LD_STRING DA-Cap-b-2
15545: PPUSH
15546: CALL_OW 88
// end ; end ;
15550: GO 15553
15552: POP
// end ;
15553: PPOPN 5
15555: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15556: LD_INT 10
15558: PPUSH
15559: LD_INT 22
15561: PUSH
15562: LD_INT 2
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 30
15571: PUSH
15572: LD_INT 31
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PPUSH
15583: CALL_OW 70
15587: PUSH
15588: LD_INT 2
15590: GREATEREQUAL
15591: IFFALSE 15603
15593: GO 15595
15595: DISABLE
// SetAchievement ( ACH_KING ) ;
15596: LD_STRING ACH_KING
15598: PPUSH
15599: CALL_OW 543
15603: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15604: LD_EXP 11
15608: NOT
15609: IFFALSE 15662
15611: PUSH
15612: LD_INT 10
15614: PPUSH
15615: LD_INT 22
15617: PUSH
15618: LD_INT 2
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: PUSH
15625: LD_INT 2
15627: PUSH
15628: LD_INT 30
15630: PUSH
15631: LD_INT 31
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 30
15640: PUSH
15641: LD_INT 4
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PPUSH
15657: CALL_OW 70
15661: AND
15662: IFFALSE 15692
15664: GO 15666
15666: DISABLE
// begin hillBase := true ;
15667: LD_ADDR_EXP 15
15671: PUSH
15672: LD_INT 1
15674: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15675: LD_STRING HillDone
15677: PPUSH
15678: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15682: LD_INT 22
15684: PPUSH
15685: LD_INT 0
15687: PPUSH
15688: CALL_OW 424
// end ;
15692: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15693: LD_EXP 31
15697: IFFALSE 15714
15699: PUSH
15700: LD_EXP 31
15704: PPUSH
15705: CALL_OW 256
15709: PUSH
15710: LD_INT 3
15712: LESS
15713: AND
15714: IFFALSE 15760
15716: GO 15718
15718: DISABLE
// begin DialogueOn ;
15719: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15723: LD_EXP 31
15727: PPUSH
15728: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15732: LD_EXP 31
15736: PPUSH
15737: LD_STRING DK-Kkilled-1
15739: PPUSH
15740: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15744: LD_EXP 26
15748: PPUSH
15749: LD_STRING DH-Kkilled-2
15751: PPUSH
15752: CALL_OW 88
// DialogueOff ;
15756: CALL_OW 7
// end ;
15760: END
// every 0 0$1 trigger kaiaKilledByRussian do
15761: LD_EXP 23
15765: IFFALSE 15782
15767: GO 15769
15769: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15770: LD_EXP 26
15774: PPUSH
15775: LD_STRING DH-Kkilled-3
15777: PPUSH
15778: CALL_OW 88
15782: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15783: LD_EXP 16
15787: IFFALSE 15810
15789: PUSH
15790: LD_INT 106
15792: PPUSH
15793: CALL_OW 255
15797: PUSH
15798: LD_INT 2
15800: EQUAL
15801: IFTRUE 15809
15803: PUSH
15804: LD_EXP 17
15808: OR
15809: AND
15810: IFFALSE 15841
15812: PUSH
15813: LD_EXP 18
15817: IFTRUE 15840
15819: PUSH
15820: LD_EXP 24
15824: IFFALSE 15839
15826: PUSH
15827: LD_INT 112
15829: PPUSH
15830: CALL_OW 255
15834: PUSH
15835: LD_INT 2
15837: EQUAL
15838: AND
15839: OR
15840: AND
15841: IFFALSE 17093
15843: GO 15845
15845: DISABLE
15846: LD_INT 0
15848: PPUSH
15849: PPUSH
15850: PPUSH
15851: PPUSH
15852: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15853: LD_STRING GoToWest
15855: PPUSH
15856: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15860: LD_INT 17
15862: PPUSH
15863: LD_INT 1
15865: PPUSH
15866: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15870: LD_INT 35
15872: PPUSH
15873: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15877: LD_ADDR_VAR 0 2
15881: PUSH
15882: LD_INT 17
15884: PPUSH
15885: LD_INT 22
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 2
15897: PUSH
15898: LD_INT 21
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 3
15920: PUSH
15921: LD_INT 58
15923: PUSH
15924: EMPTY
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PPUSH
15944: CALL_OW 70
15948: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15949: LD_ADDR_VAR 0 3
15953: PUSH
15954: LD_INT 22
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 55
15969: PUSH
15970: EMPTY
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: LD_INT 21
15982: PUSH
15983: LD_INT 1
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 21
15992: PUSH
15993: LD_INT 2
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: LD_INT 58
16005: PUSH
16006: EMPTY
16007: LIST
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: LIST
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 69
16031: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
16032: LD_VAR 0 2
16036: PUSH
16037: LD_INT 0
16039: PLUS
16040: PUSH
16041: LD_VAR 0 3
16045: PUSH
16046: LD_INT 0
16048: PLUS
16049: EQUAL
16050: IFFALSE 15870
// SaveCharacters ( Heike , 04_1_Heike ) ;
16052: LD_EXP 26
16056: PPUSH
16057: LD_STRING 04_1_Heike
16059: PPUSH
16060: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
16064: LD_EXP 36
16068: IFFALSE 16083
16070: PUSH
16071: LD_EXP 36
16075: PUSH
16076: LD_EXP 40
16080: IN
16081: NOT
16082: AND
16083: IFFALSE 16099
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
16085: LD_EXP 36
16089: PPUSH
16090: LD_STRING 04_1_Aviradze
16092: PPUSH
16093: CALL_OW 38
16097: GO 16117
// if Aviradze then
16099: LD_EXP 36
16103: IFFALSE 16117
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
16105: LD_EXP 36
16109: PPUSH
16110: LD_STRING 04_1_Aviradze_L
16112: PPUSH
16113: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
16117: LD_EXP 29
16121: IFFALSE 16136
16123: PUSH
16124: LD_EXP 29
16128: PUSH
16129: LD_EXP 40
16133: IN
16134: NOT
16135: AND
16136: IFFALSE 16152
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
16138: LD_EXP 29
16142: PPUSH
16143: LD_STRING 04_1_Ibrahim
16145: PPUSH
16146: CALL_OW 38
16150: GO 16170
// if Ibrahim then
16152: LD_EXP 29
16156: IFFALSE 16170
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
16158: LD_EXP 29
16162: PPUSH
16163: LD_STRING 04_1_Ibrahim_L
16165: PPUSH
16166: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
16170: LD_EXP 30
16174: IFFALSE 16189
16176: PUSH
16177: LD_EXP 30
16181: PUSH
16182: LD_EXP 40
16186: IN
16187: NOT
16188: AND
16189: IFFALSE 16205
// SaveCharacters ( Kamil , 04_1_Kamil ) else
16191: LD_EXP 30
16195: PPUSH
16196: LD_STRING 04_1_Kamil
16198: PPUSH
16199: CALL_OW 38
16203: GO 16223
// if Kamil then
16205: LD_EXP 30
16209: IFFALSE 16223
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16211: LD_EXP 30
16215: PPUSH
16216: LD_STRING 04_1_Kamil_L
16218: PPUSH
16219: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16223: LD_EXP 32
16227: IFFALSE 16242
16229: PUSH
16230: LD_EXP 32
16234: PUSH
16235: LD_EXP 40
16239: IN
16240: NOT
16241: AND
16242: IFFALSE 16258
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16244: LD_EXP 32
16248: PPUSH
16249: LD_STRING 04_1_Sophia
16251: PPUSH
16252: CALL_OW 38
16256: GO 16276
// if Sophia then
16258: LD_EXP 32
16262: IFFALSE 16276
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16264: LD_EXP 32
16268: PPUSH
16269: LD_STRING 04_1_Sophia_L
16271: PPUSH
16272: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16276: LD_EXP 31
16280: IFFALSE 16295
16282: PUSH
16283: LD_EXP 31
16287: PUSH
16288: LD_EXP 40
16292: IN
16293: NOT
16294: AND
16295: IFFALSE 16311
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16297: LD_EXP 31
16301: PPUSH
16302: LD_STRING 04_1_Kaia
16304: PPUSH
16305: CALL_OW 38
16309: GO 16329
// if Kaia then
16311: LD_EXP 31
16315: IFFALSE 16329
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16317: LD_EXP 31
16321: PPUSH
16322: LD_STRING 04_1_Kaia_L
16324: PPUSH
16325: CALL_OW 38
// if Givi then
16329: LD_EXP 27
16333: IFFALSE 16347
// SaveCharacters ( Givi , 04_1_Givi ) ;
16335: LD_EXP 27
16339: PPUSH
16340: LD_STRING 04_1_Givi
16342: PPUSH
16343: CALL_OW 38
// if Mike then
16347: LD_EXP 28
16351: IFFALSE 16365
// SaveCharacters ( Mike , 04_1_Mike ) ;
16353: LD_EXP 28
16357: PPUSH
16358: LD_STRING 04_1_Mike
16360: PPUSH
16361: CALL_OW 38
// if Markov then
16365: LD_EXP 33
16369: IFFALSE 16383
// SaveCharacters ( Markov , 04_1_Markov ) ;
16371: LD_EXP 33
16375: PPUSH
16376: LD_STRING 04_1_Markov
16378: PPUSH
16379: CALL_OW 38
// if Kurt then
16383: LD_EXP 35
16387: IFFALSE 16408
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16389: LD_EXP 35
16393: PPUSH
16394: LD_STRING 04_1_Kurt
16396: PPUSH
16397: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16401: LD_STRING enableBioCharacter(BIO_KURT)
16403: PPUSH
16404: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16408: LD_EXP 38
16412: PUSH
16413: LD_EXP 40
16417: DIFF
16418: IFFALSE 16438
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16420: LD_EXP 38
16424: PUSH
16425: LD_EXP 40
16429: DIFF
16430: PPUSH
16431: LD_STRING 04_1_others
16433: PPUSH
16434: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16438: LD_EXP 40
16442: IFFALSE 16450
16444: PUSH
16445: LD_EXP 38
16449: AND
16450: IFFALSE 16535
// begin tmp := [ ] ;
16452: LD_ADDR_VAR 0 2
16456: PUSH
16457: EMPTY
16458: ST_TO_ADDR
// for i in heikeSecondSquad do
16459: LD_ADDR_VAR 0 1
16463: PUSH
16464: LD_EXP 38
16468: PUSH
16469: FOR_IN
16470: IFFALSE 16515
// if i in aviradzeSquad then
16472: LD_VAR 0 1
16476: PUSH
16477: LD_EXP 40
16481: IN
16482: IFFALSE 16513
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16484: LD_ADDR_VAR 0 2
16488: PUSH
16489: LD_VAR 0 2
16493: PPUSH
16494: LD_VAR 0 2
16498: PUSH
16499: LD_INT 1
16501: PLUS
16502: PPUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 1
16512: ST_TO_ADDR
16513: GO 16469
16515: POP
16516: POP
// if tmp then
16517: LD_VAR 0 2
16521: IFFALSE 16535
// SaveCharacters ( tmp , 04_1_others_L ) ;
16523: LD_VAR 0 2
16527: PPUSH
16528: LD_STRING 04_1_others_L
16530: PPUSH
16531: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16535: LD_ADDR_VAR 0 2
16539: PUSH
16540: LD_INT 22
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 23
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PPUSH
16564: CALL_OW 69
16568: ST_TO_ADDR
// if tmp then
16569: LD_VAR 0 2
16573: IFFALSE 16587
// SaveCharacters ( tmp , 04_1_apes ) ;
16575: LD_VAR 0 2
16579: PPUSH
16580: LD_STRING 04_1_apes
16582: PPUSH
16583: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_INT 17
16594: PPUSH
16595: LD_INT 21
16597: PUSH
16598: LD_INT 2
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 70
16609: ST_TO_ADDR
// if tmp then
16610: LD_VAR 0 2
16614: IFFALSE 16958
// begin tmp2 := [ ] ;
16616: LD_ADDR_VAR 0 3
16620: PUSH
16621: EMPTY
16622: ST_TO_ADDR
// for i in tmp do
16623: LD_ADDR_VAR 0 1
16627: PUSH
16628: LD_VAR 0 2
16632: PUSH
16633: FOR_IN
16634: IFFALSE 16944
// begin driver := IsDrivenBy ( i ) ;
16636: LD_ADDR_VAR 0 5
16640: PUSH
16641: LD_VAR 0 1
16645: PPUSH
16646: CALL_OW 311
16650: ST_TO_ADDR
// if not driver then
16651: LD_VAR 0 5
16655: NOT
16656: IFFALSE 16660
// continue ;
16658: GO 16633
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 264
16669: PUSH
16670: LD_INT 32
16672: PUSH
16673: LD_INT 12
16675: PUSH
16676: LD_INT 51
16678: PUSH
16679: LD_INT 89
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: IN
16688: IFFALSE 16836
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16690: LD_ADDR_VAR 0 4
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 289
16707: PUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: LD_INT 2
16715: PPUSH
16716: CALL_OW 289
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16725: LD_ADDR_VAR 0 3
16729: PUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_VAR 0 3
16739: PUSH
16740: LD_INT 1
16742: PLUS
16743: PPUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: CALL_OW 265
16753: PUSH
16754: LD_VAR 0 1
16758: PPUSH
16759: CALL_OW 262
16763: PUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 263
16773: PUSH
16774: LD_VAR 0 1
16778: PPUSH
16779: CALL_OW 264
16783: PUSH
16784: LD_VAR 0 1
16788: PPUSH
16789: CALL_OW 248
16793: PUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: CALL_OW 256
16803: PUSH
16804: LD_VAR 0 4
16808: PUSH
16809: LD_VAR 0 5
16813: PPUSH
16814: CALL_OW 257
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: PPUSH
16829: CALL_OW 1
16833: ST_TO_ADDR
// end else
16834: GO 16942
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: LD_VAR 0 3
16845: PPUSH
16846: LD_VAR 0 3
16850: PUSH
16851: LD_INT 1
16853: PLUS
16854: PPUSH
16855: LD_VAR 0 1
16859: PPUSH
16860: CALL_OW 265
16864: PUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 262
16874: PUSH
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 263
16884: PUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 264
16894: PUSH
16895: LD_VAR 0 1
16899: PPUSH
16900: CALL_OW 248
16904: PUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 256
16914: PUSH
16915: EMPTY
16916: PUSH
16917: LD_VAR 0 5
16921: PPUSH
16922: CALL_OW 257
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: PPUSH
16937: CALL_OW 1
16941: ST_TO_ADDR
// end ;
16942: GO 16633
16944: POP
16945: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16946: LD_VAR 0 3
16950: PPUSH
16951: LD_STRING 04_1_Vehicles
16953: PPUSH
16954: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16958: LD_EXP 21
16962: PPUSH
16963: LD_STRING 04_1_RuLabCaptured
16965: PPUSH
16966: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16970: LD_EXP 19
16974: PPUSH
16975: LD_STRING 04_1_EscapeCounter
16977: PPUSH
16978: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16982: LD_EXP 15
16986: PPUSH
16987: LD_STRING 04_1_BaseHill
16989: PPUSH
16990: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16994: LD_OWVAR 1
16998: PPUSH
16999: LD_STRING 04_1_Time
17001: PPUSH
17002: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
17006: LD_EXP 14
17010: PPUSH
17011: LD_STRING 04_1_DeadCounter
17013: PPUSH
17014: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
17018: LD_EXP 24
17022: PUSH
17023: LD_INT 112
17025: PPUSH
17026: CALL_OW 255
17030: MUL
17031: PUSH
17032: LD_INT 2
17034: EQUAL
17035: PPUSH
17036: LD_STRING 04_1_KaganCaptured
17038: PPUSH
17039: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
17043: LD_INT 22
17045: PUSH
17046: LD_INT 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 34
17055: PUSH
17056: LD_INT 26
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: PUSH
17072: LD_INT 0
17074: PLUS
17075: PPUSH
17076: LD_STRING 04_1_Flamethrower
17078: PPUSH
17079: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
17083: LD_INT 1
17085: PPUSH
17086: LD_STRING __x1\04_cont2
17088: PPUSH
17089: CALL_OW 340
// end ; end_of_file
17093: PPOPN 5
17095: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 266
17105: PUSH
17106: LD_INT 0
17108: EQUAL
17109: IFFALSE 17126
17111: PUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 255
17121: PUSH
17122: LD_INT 2
17124: EQUAL
17125: AND
17126: IFFALSE 17136
// baseConstructed := true ;
17128: LD_ADDR_EXP 3
17132: PUSH
17133: LD_INT 1
17135: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
17136: LD_VAR 0 1
17140: PPUSH
17141: CALL_OW 266
17145: PUSH
17146: LD_INT 6
17148: EQUAL
17149: IFFALSE 17166
17151: PUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 255
17161: PUSH
17162: LD_INT 2
17164: EQUAL
17165: AND
17166: IFFALSE 17176
// labConstructed := true ;
17168: LD_ADDR_EXP 4
17172: PUSH
17173: LD_INT 1
17175: ST_TO_ADDR
// end ;
17176: PPOPN 1
17178: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
17179: LD_VAR 0 1
17183: PPUSH
17184: CALL 34337 0 1
// if un = Heike then
17188: LD_VAR 0 1
17192: PUSH
17193: LD_EXP 26
17197: EQUAL
17198: IFFALSE 17207
// YouLost ( Heike ) ;
17200: LD_STRING Heike
17202: PPUSH
17203: CALL_OW 104
// if un = Omar then
17207: LD_VAR 0 1
17211: PUSH
17212: LD_EXP 34
17216: EQUAL
17217: IFFALSE 17226
// YouLost ( Omar ) ;
17219: LD_STRING Omar
17221: PPUSH
17222: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17226: LD_VAR 0 1
17230: PUSH
17231: LD_INT 22
17233: PUSH
17234: LD_INT 2
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 23
17243: PUSH
17244: LD_INT 2
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 21
17253: PUSH
17254: LD_INT 1
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: IN
17271: IFFALSE 17287
// loseCounter := loseCounter + 1 ;
17273: LD_ADDR_EXP 14
17277: PUSH
17278: LD_EXP 14
17282: PUSH
17283: LD_INT 1
17285: PLUS
17286: ST_TO_ADDR
// if un = omikron then
17287: LD_VAR 0 1
17291: PUSH
17292: LD_INT 64
17294: EQUAL
17295: IFFALSE 17305
// omicronFall := true ;
17297: LD_ADDR_EXP 13
17301: PUSH
17302: LD_INT 1
17304: ST_TO_ADDR
// if un = kirov then
17305: LD_VAR 0 1
17309: PUSH
17310: LD_INT 71
17312: EQUAL
17313: IFFALSE 17330
// begin ChangeMissionObjectives ( KirovDone ) ;
17315: LD_STRING KirovDone
17317: PPUSH
17318: CALL_OW 337
// kirovDestroyed := true ;
17322: LD_ADDR_EXP 16
17326: PUSH
17327: LD_INT 1
17329: ST_TO_ADDR
// end ; if un = beria then
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 106
17337: EQUAL
17338: IFFALSE 17355
// begin ChangeMissionObjectives ( BeriaDone ) ;
17340: LD_STRING BeriaDone
17342: PPUSH
17343: CALL_OW 337
// beriaDestroyed := true ;
17347: LD_ADDR_EXP 17
17351: PUSH
17352: LD_INT 1
17354: ST_TO_ADDR
// end ; if un = kagan then
17355: LD_VAR 0 1
17359: PUSH
17360: LD_INT 112
17362: EQUAL
17363: IFFALSE 17373
// kaganDestroyed := true ;
17365: LD_ADDR_EXP 18
17369: PUSH
17370: LD_INT 1
17372: ST_TO_ADDR
// if un in russianPatrol then
17373: LD_VAR 0 1
17377: PUSH
17378: LD_EXP 48
17382: IN
17383: IFFALSE 17401
// russianPatrol := russianPatrol diff un ;
17385: LD_ADDR_EXP 48
17389: PUSH
17390: LD_EXP 48
17394: PUSH
17395: LD_VAR 0 1
17399: DIFF
17400: ST_TO_ADDR
// if un in russianOmicronAttackers then
17401: LD_VAR 0 1
17405: PUSH
17406: LD_EXP 49
17410: IN
17411: IFFALSE 17429
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17413: LD_ADDR_EXP 49
17417: PUSH
17418: LD_EXP 49
17422: PUSH
17423: LD_VAR 0 1
17427: DIFF
17428: ST_TO_ADDR
// end ;
17429: PPOPN 1
17431: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
17436: PPUSH
// begin if un = Kirov then
17437: LD_VAR 0 1
17441: PUSH
17442: LD_INT 71
17444: EQUAL
17445: IFFALSE 17459
// SetLives ( un , 0 ) ;
17447: LD_VAR 0 1
17451: PPUSH
17452: LD_INT 0
17454: PPUSH
17455: CALL_OW 234
// if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17459: LD_VAR 0 1
17463: PUSH
17464: LD_INT 2
17466: PUSH
17467: LD_INT 22
17469: PUSH
17470: LD_INT 3
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 22
17479: PUSH
17480: LD_INT 4
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 22
17489: PUSH
17490: LD_INT 6
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 30
17505: PUSH
17506: LD_INT 32
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PPUSH
17517: CALL_OW 69
17521: IN
17522: IFFALSE 17695
// begin sol := UnitsInside ( un ) ;
17524: LD_ADDR_VAR 0 3
17528: PUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL_OW 313
17538: ST_TO_ADDR
// if not sol then
17539: LD_VAR 0 3
17543: NOT
17544: IFFALSE 17548
// exit ;
17546: GO 17695
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17548: LD_ADDR_VAR 0 4
17552: PUSH
17553: LD_INT 22
17555: PUSH
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 255
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 30
17575: PUSH
17576: LD_INT 4
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 30
17585: PUSH
17586: LD_INT 5
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PPUSH
17602: CALL_OW 69
17606: ST_TO_ADDR
// if not nearestBarracks then
17607: LD_VAR 0 4
17611: NOT
17612: IFFALSE 17616
// exit ;
17614: GO 17695
// for i in nearestBarracks do
17616: LD_ADDR_VAR 0 2
17620: PUSH
17621: LD_VAR 0 4
17625: PUSH
17626: FOR_IN
17627: IFFALSE 17662
// if UnitsInside ( i ) = 6 then
17629: LD_VAR 0 2
17633: PPUSH
17634: CALL_OW 313
17638: PUSH
17639: LD_INT 6
17641: EQUAL
17642: IFFALSE 17660
// nearestBarracks := nearestBarracks diff i ;
17644: LD_ADDR_VAR 0 4
17648: PUSH
17649: LD_VAR 0 4
17653: PUSH
17654: LD_VAR 0 2
17658: DIFF
17659: ST_TO_ADDR
17660: GO 17626
17662: POP
17663: POP
// if not nearestBarracks then
17664: LD_VAR 0 4
17668: NOT
17669: IFFALSE 17673
// exit ;
17671: GO 17695
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17673: LD_VAR 0 3
17677: PUSH
17678: LD_INT 1
17680: ARRAY
17681: PPUSH
17682: LD_VAR 0 4
17686: PUSH
17687: LD_INT 1
17689: ARRAY
17690: PPUSH
17691: CALL_OW 120
// end ; end ;
17695: PPOPN 4
17697: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17698: LD_INT 0
17700: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17701: LD_EXP 8
17705: NOT
17706: IFTRUE 17715
17708: PUSH
17709: LD_EXP 5
17713: NOT
17714: OR
17715: IFFALSE 17719
// exit ;
17717: GO 17787
// for i in camAreas do
17719: LD_ADDR_VAR 0 5
17723: PUSH
17724: LD_EXP 8
17728: PUSH
17729: FOR_IN
17730: IFFALSE 17785
// if InArea ( x , y , i ) then
17732: LD_VAR 0 3
17736: PPUSH
17737: LD_VAR 0 4
17741: PPUSH
17742: LD_VAR 0 5
17746: PPUSH
17747: CALL_OW 309
17751: IFFALSE 17783
// begin SetAreaMapShow ( i , 0 ) ;
17753: LD_VAR 0 5
17757: PPUSH
17758: LD_INT 0
17760: PPUSH
17761: CALL_OW 424
// camAreas := camAreas diff i ;
17765: LD_ADDR_EXP 8
17769: PUSH
17770: LD_EXP 8
17774: PUSH
17775: LD_VAR 0 5
17779: DIFF
17780: ST_TO_ADDR
// break ;
17781: GO 17785
// end ;
17783: GO 17729
17785: POP
17786: POP
// end ;
17787: PPOPN 5
17789: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17790: LD_VAR 0 1
17794: PUSH
17795: LD_INT 2
17797: EQUAL
17798: IFFALSE 17817
17800: PUSH
17801: LD_VAR 0 2
17805: PUSH
17806: LD_INT 5
17808: PUSH
17809: LD_INT 8
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: IN
17816: AND
17817: IFFALSE 17826
// YouLost ( Ally ) ;
17819: LD_STRING Ally
17821: PPUSH
17822: CALL_OW 104
// end ;
17826: PPOPN 2
17828: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17829: LD_VAR 0 1
17833: PUSH
17834: LD_EXP 31
17838: EQUAL
17839: IFFALSE 17858
17841: PUSH
17842: LD_VAR 0 2
17846: PUSH
17847: LD_INT 3
17849: PUSH
17850: LD_INT 6
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: IN
17857: AND
17858: IFFALSE 17889
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17860: LD_ADDR_EXP 23
17864: PUSH
17865: LD_VAR 0 1
17869: PPUSH
17870: CALL_OW 250
17874: PUSH
17875: LD_VAR 0 1
17879: PPUSH
17880: CALL_OW 251
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: ST_TO_ADDR
// end ;
17889: PPOPN 3
17891: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17892: LD_VAR 0 1
17896: PPUSH
17897: LD_VAR 0 2
17901: PPUSH
17902: CALL 34395 0 2
// end ; end_of_file
17906: PPOPN 2
17908: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17909: LD_EXP 11
17913: NOT
17914: IFFALSE 17953
17916: PUSH
17917: LD_INT 12
17919: PPUSH
17920: LD_INT 1
17922: PPUSH
17923: CALL_OW 287
17927: PUSH
17928: LD_INT 20
17930: PUSH
17931: LD_INT 16
17933: PUSH
17934: LD_INT 12
17936: PUSH
17937: LD_INT 10
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: LD_OWVAR 67
17950: ARRAY
17951: LESS
17952: AND
17953: IFFALSE 17980
17955: GO 17957
17957: DISABLE
// begin enable ;
17958: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 5
17964: PPUSH
17965: CALL_OW 12
17969: PPUSH
17970: LD_INT 12
17972: PPUSH
17973: LD_INT 1
17975: PPUSH
17976: CALL_OW 55
// end ;
17980: END
// every 1 1$20 trigger allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < 15 do
17981: LD_EXP 11
17985: IFFALSE 18003
17987: PUSH
17988: LD_INT 12
17990: PPUSH
17991: LD_INT 1
17993: PPUSH
17994: CALL_OW 287
17998: PUSH
17999: LD_INT 15
18001: LESS
18002: AND
18003: IFFALSE 18030
18005: GO 18007
18007: DISABLE
// begin enable ;
18008: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
18009: LD_INT 1
18011: PPUSH
18012: LD_INT 5
18014: PPUSH
18015: CALL_OW 12
18019: PPUSH
18020: LD_INT 12
18022: PPUSH
18023: LD_INT 1
18025: PPUSH
18026: CALL_OW 55
// end ; end_of_file
18030: END
// every 0 0$1 trigger omarCountdown do
18031: LD_EXP 22
18035: IFFALSE 18087
18037: GO 18039
18039: DISABLE
// begin enable ;
18040: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
18041: LD_ADDR_OWVAR 47
18045: PUSH
18046: LD_STRING #X104-1
18048: PUSH
18049: LD_EXP 22
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
18058: LD_ADDR_EXP 22
18062: PUSH
18063: LD_EXP 22
18067: PUSH
18068: LD_INT 35
18070: MINUS
18071: ST_TO_ADDR
// if not omarCountdown then
18072: LD_EXP 22
18076: NOT
18077: IFFALSE 18087
// display_strings :=  ;
18079: LD_ADDR_OWVAR 47
18083: PUSH
18084: LD_STRING 
18086: ST_TO_ADDR
// end ; end_of_file
18087: END
// export globalGameSaveCounter ; every 0 0$1 do
18088: GO 18090
18090: DISABLE
// begin enable ;
18091: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18092: LD_STRING updateTimer(
18094: PUSH
18095: LD_OWVAR 1
18099: STR
18100: PUSH
18101: LD_STRING );
18103: STR
18104: PPUSH
18105: CALL_OW 559
// end ;
18109: END
// every 0 0$1 do
18110: GO 18112
18112: DISABLE
// begin globalGameSaveCounter := 0 ;
18113: LD_ADDR_EXP 53
18117: PUSH
18118: LD_INT 0
18120: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18121: LD_STRING setGameSaveCounter(0)
18123: PPUSH
18124: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18128: LD_STRING initStreamRollete();
18130: PPUSH
18131: CALL_OW 559
// InitStreamMode ;
18135: CALL 19487 0 0
// DefineStreamItems ( false ) ;
18139: LD_INT 0
18141: PPUSH
18142: CALL 19951 0 1
// end ;
18146: END
// export function SOS_MapStart ( ) ; begin
18147: LD_INT 0
18149: PPUSH
// if streamModeActive then
18150: LD_EXP 54
18154: IFFALSE 18163
// DefineStreamItems ( true ) ;
18156: LD_INT 1
18158: PPUSH
18159: CALL 19951 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
18163: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
18165: PPUSH
18166: CALL_OW 559
// UpdateLuaVariables ( ) ;
18170: CALL 18187 0 0
// UpdateFactoryWaypoints ( ) ;
18174: CALL 33073 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18178: CALL 33325 0 0
// end ;
18182: LD_VAR 0 1
18186: RET
// function UpdateLuaVariables ( ) ; begin
18187: LD_INT 0
18189: PPUSH
// if globalGameSaveCounter then
18190: LD_EXP 53
18194: IFFALSE 18228
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18196: LD_ADDR_EXP 53
18200: PUSH
18201: LD_EXP 53
18205: PPUSH
18206: CALL 80384 0 1
18210: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18211: LD_STRING setGameSaveCounter(
18213: PUSH
18214: LD_EXP 53
18218: STR
18219: PUSH
18220: LD_STRING )
18222: STR
18223: PPUSH
18224: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18228: LD_STRING setGameDifficulty(
18230: PUSH
18231: LD_OWVAR 67
18235: STR
18236: PUSH
18237: LD_STRING )
18239: STR
18240: PPUSH
18241: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
18245: LD_STRING displayDifficulty(
18247: PUSH
18248: LD_OWVAR 67
18252: STR
18253: PUSH
18254: LD_STRING )
18256: STR
18257: PPUSH
18258: CALL_OW 559
// end ;
18262: LD_VAR 0 1
18266: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18267: LD_INT 0
18269: PPUSH
// if p2 = stream_mode then
18270: LD_VAR 0 2
18274: PUSH
18275: LD_INT 100
18277: EQUAL
18278: IFFALSE 19281
// begin if not StreamModeActive then
18280: LD_EXP 54
18284: NOT
18285: IFFALSE 18295
// StreamModeActive := true ;
18287: LD_ADDR_EXP 54
18291: PUSH
18292: LD_INT 1
18294: ST_TO_ADDR
// if p3 = 0 then
18295: LD_VAR 0 3
18299: PUSH
18300: LD_INT 0
18302: EQUAL
18303: IFFALSE 18309
// InitStreamMode ;
18305: CALL 19487 0 0
// if p3 = 1 then
18309: LD_VAR 0 3
18313: PUSH
18314: LD_INT 1
18316: EQUAL
18317: IFFALSE 18327
// sRocket := true ;
18319: LD_ADDR_EXP 59
18323: PUSH
18324: LD_INT 1
18326: ST_TO_ADDR
// if p3 = 2 then
18327: LD_VAR 0 3
18331: PUSH
18332: LD_INT 2
18334: EQUAL
18335: IFFALSE 18345
// sSpeed := true ;
18337: LD_ADDR_EXP 58
18341: PUSH
18342: LD_INT 1
18344: ST_TO_ADDR
// if p3 = 3 then
18345: LD_VAR 0 3
18349: PUSH
18350: LD_INT 3
18352: EQUAL
18353: IFFALSE 18363
// sEngine := true ;
18355: LD_ADDR_EXP 60
18359: PUSH
18360: LD_INT 1
18362: ST_TO_ADDR
// if p3 = 4 then
18363: LD_VAR 0 3
18367: PUSH
18368: LD_INT 4
18370: EQUAL
18371: IFFALSE 18381
// sSpec := true ;
18373: LD_ADDR_EXP 57
18377: PUSH
18378: LD_INT 1
18380: ST_TO_ADDR
// if p3 = 5 then
18381: LD_VAR 0 3
18385: PUSH
18386: LD_INT 5
18388: EQUAL
18389: IFFALSE 18399
// sLevel := true ;
18391: LD_ADDR_EXP 61
18395: PUSH
18396: LD_INT 1
18398: ST_TO_ADDR
// if p3 = 6 then
18399: LD_VAR 0 3
18403: PUSH
18404: LD_INT 6
18406: EQUAL
18407: IFFALSE 18417
// sArmoury := true ;
18409: LD_ADDR_EXP 62
18413: PUSH
18414: LD_INT 1
18416: ST_TO_ADDR
// if p3 = 7 then
18417: LD_VAR 0 3
18421: PUSH
18422: LD_INT 7
18424: EQUAL
18425: IFFALSE 18435
// sRadar := true ;
18427: LD_ADDR_EXP 63
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// if p3 = 8 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_INT 8
18442: EQUAL
18443: IFFALSE 18453
// sBunker := true ;
18445: LD_ADDR_EXP 64
18449: PUSH
18450: LD_INT 1
18452: ST_TO_ADDR
// if p3 = 9 then
18453: LD_VAR 0 3
18457: PUSH
18458: LD_INT 9
18460: EQUAL
18461: IFFALSE 18471
// sHack := true ;
18463: LD_ADDR_EXP 65
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// if p3 = 10 then
18471: LD_VAR 0 3
18475: PUSH
18476: LD_INT 10
18478: EQUAL
18479: IFFALSE 18489
// sFire := true ;
18481: LD_ADDR_EXP 66
18485: PUSH
18486: LD_INT 1
18488: ST_TO_ADDR
// if p3 = 11 then
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 11
18496: EQUAL
18497: IFFALSE 18507
// sRefresh := true ;
18499: LD_ADDR_EXP 67
18503: PUSH
18504: LD_INT 1
18506: ST_TO_ADDR
// if p3 = 12 then
18507: LD_VAR 0 3
18511: PUSH
18512: LD_INT 12
18514: EQUAL
18515: IFFALSE 18525
// sExp := true ;
18517: LD_ADDR_EXP 68
18521: PUSH
18522: LD_INT 1
18524: ST_TO_ADDR
// if p3 = 13 then
18525: LD_VAR 0 3
18529: PUSH
18530: LD_INT 13
18532: EQUAL
18533: IFFALSE 18543
// sDepot := true ;
18535: LD_ADDR_EXP 69
18539: PUSH
18540: LD_INT 1
18542: ST_TO_ADDR
// if p3 = 14 then
18543: LD_VAR 0 3
18547: PUSH
18548: LD_INT 14
18550: EQUAL
18551: IFFALSE 18561
// sFlag := true ;
18553: LD_ADDR_EXP 70
18557: PUSH
18558: LD_INT 1
18560: ST_TO_ADDR
// if p3 = 15 then
18561: LD_VAR 0 3
18565: PUSH
18566: LD_INT 15
18568: EQUAL
18569: IFFALSE 18579
// sKamikadze := true ;
18571: LD_ADDR_EXP 78
18575: PUSH
18576: LD_INT 1
18578: ST_TO_ADDR
// if p3 = 16 then
18579: LD_VAR 0 3
18583: PUSH
18584: LD_INT 16
18586: EQUAL
18587: IFFALSE 18597
// sTroll := true ;
18589: LD_ADDR_EXP 79
18593: PUSH
18594: LD_INT 1
18596: ST_TO_ADDR
// if p3 = 17 then
18597: LD_VAR 0 3
18601: PUSH
18602: LD_INT 17
18604: EQUAL
18605: IFFALSE 18615
// sSlow := true ;
18607: LD_ADDR_EXP 80
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// if p3 = 18 then
18615: LD_VAR 0 3
18619: PUSH
18620: LD_INT 18
18622: EQUAL
18623: IFFALSE 18633
// sLack := true ;
18625: LD_ADDR_EXP 81
18629: PUSH
18630: LD_INT 1
18632: ST_TO_ADDR
// if p3 = 19 then
18633: LD_VAR 0 3
18637: PUSH
18638: LD_INT 19
18640: EQUAL
18641: IFFALSE 18651
// sTank := true ;
18643: LD_ADDR_EXP 83
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// if p3 = 20 then
18651: LD_VAR 0 3
18655: PUSH
18656: LD_INT 20
18658: EQUAL
18659: IFFALSE 18669
// sRemote := true ;
18661: LD_ADDR_EXP 84
18665: PUSH
18666: LD_INT 1
18668: ST_TO_ADDR
// if p3 = 21 then
18669: LD_VAR 0 3
18673: PUSH
18674: LD_INT 21
18676: EQUAL
18677: IFFALSE 18687
// sPowell := true ;
18679: LD_ADDR_EXP 85
18683: PUSH
18684: LD_INT 1
18686: ST_TO_ADDR
// if p3 = 22 then
18687: LD_VAR 0 3
18691: PUSH
18692: LD_INT 22
18694: EQUAL
18695: IFFALSE 18705
// sTeleport := true ;
18697: LD_ADDR_EXP 88
18701: PUSH
18702: LD_INT 1
18704: ST_TO_ADDR
// if p3 = 23 then
18705: LD_VAR 0 3
18709: PUSH
18710: LD_INT 23
18712: EQUAL
18713: IFFALSE 18723
// sOilTower := true ;
18715: LD_ADDR_EXP 90
18719: PUSH
18720: LD_INT 1
18722: ST_TO_ADDR
// if p3 = 24 then
18723: LD_VAR 0 3
18727: PUSH
18728: LD_INT 24
18730: EQUAL
18731: IFFALSE 18741
// sShovel := true ;
18733: LD_ADDR_EXP 91
18737: PUSH
18738: LD_INT 1
18740: ST_TO_ADDR
// if p3 = 25 then
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 25
18748: EQUAL
18749: IFFALSE 18759
// sSheik := true ;
18751: LD_ADDR_EXP 92
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// if p3 = 26 then
18759: LD_VAR 0 3
18763: PUSH
18764: LD_INT 26
18766: EQUAL
18767: IFFALSE 18777
// sEarthquake := true ;
18769: LD_ADDR_EXP 94
18773: PUSH
18774: LD_INT 1
18776: ST_TO_ADDR
// if p3 = 27 then
18777: LD_VAR 0 3
18781: PUSH
18782: LD_INT 27
18784: EQUAL
18785: IFFALSE 18795
// sAI := true ;
18787: LD_ADDR_EXP 95
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// if p3 = 28 then
18795: LD_VAR 0 3
18799: PUSH
18800: LD_INT 28
18802: EQUAL
18803: IFFALSE 18813
// sCargo := true ;
18805: LD_ADDR_EXP 98
18809: PUSH
18810: LD_INT 1
18812: ST_TO_ADDR
// if p3 = 29 then
18813: LD_VAR 0 3
18817: PUSH
18818: LD_INT 29
18820: EQUAL
18821: IFFALSE 18831
// sDLaser := true ;
18823: LD_ADDR_EXP 99
18827: PUSH
18828: LD_INT 1
18830: ST_TO_ADDR
// if p3 = 30 then
18831: LD_VAR 0 3
18835: PUSH
18836: LD_INT 30
18838: EQUAL
18839: IFFALSE 18849
// sExchange := true ;
18841: LD_ADDR_EXP 100
18845: PUSH
18846: LD_INT 1
18848: ST_TO_ADDR
// if p3 = 31 then
18849: LD_VAR 0 3
18853: PUSH
18854: LD_INT 31
18856: EQUAL
18857: IFFALSE 18867
// sFac := true ;
18859: LD_ADDR_EXP 101
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// if p3 = 32 then
18867: LD_VAR 0 3
18871: PUSH
18872: LD_INT 32
18874: EQUAL
18875: IFFALSE 18885
// sPower := true ;
18877: LD_ADDR_EXP 102
18881: PUSH
18882: LD_INT 1
18884: ST_TO_ADDR
// if p3 = 33 then
18885: LD_VAR 0 3
18889: PUSH
18890: LD_INT 33
18892: EQUAL
18893: IFFALSE 18903
// sRandom := true ;
18895: LD_ADDR_EXP 103
18899: PUSH
18900: LD_INT 1
18902: ST_TO_ADDR
// if p3 = 34 then
18903: LD_VAR 0 3
18907: PUSH
18908: LD_INT 34
18910: EQUAL
18911: IFFALSE 18921
// sShield := true ;
18913: LD_ADDR_EXP 104
18917: PUSH
18918: LD_INT 1
18920: ST_TO_ADDR
// if p3 = 35 then
18921: LD_VAR 0 3
18925: PUSH
18926: LD_INT 35
18928: EQUAL
18929: IFFALSE 18939
// sTime := true ;
18931: LD_ADDR_EXP 105
18935: PUSH
18936: LD_INT 1
18938: ST_TO_ADDR
// if p3 = 36 then
18939: LD_VAR 0 3
18943: PUSH
18944: LD_INT 36
18946: EQUAL
18947: IFFALSE 18957
// sTools := true ;
18949: LD_ADDR_EXP 106
18953: PUSH
18954: LD_INT 1
18956: ST_TO_ADDR
// if p3 = 101 then
18957: LD_VAR 0 3
18961: PUSH
18962: LD_INT 101
18964: EQUAL
18965: IFFALSE 18975
// sSold := true ;
18967: LD_ADDR_EXP 71
18971: PUSH
18972: LD_INT 1
18974: ST_TO_ADDR
// if p3 = 102 then
18975: LD_VAR 0 3
18979: PUSH
18980: LD_INT 102
18982: EQUAL
18983: IFFALSE 18993
// sDiff := true ;
18985: LD_ADDR_EXP 72
18989: PUSH
18990: LD_INT 1
18992: ST_TO_ADDR
// if p3 = 103 then
18993: LD_VAR 0 3
18997: PUSH
18998: LD_INT 103
19000: EQUAL
19001: IFFALSE 19011
// sFog := true ;
19003: LD_ADDR_EXP 75
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
// if p3 = 104 then
19011: LD_VAR 0 3
19015: PUSH
19016: LD_INT 104
19018: EQUAL
19019: IFFALSE 19029
// sReset := true ;
19021: LD_ADDR_EXP 76
19025: PUSH
19026: LD_INT 1
19028: ST_TO_ADDR
// if p3 = 105 then
19029: LD_VAR 0 3
19033: PUSH
19034: LD_INT 105
19036: EQUAL
19037: IFFALSE 19047
// sSun := true ;
19039: LD_ADDR_EXP 77
19043: PUSH
19044: LD_INT 1
19046: ST_TO_ADDR
// if p3 = 106 then
19047: LD_VAR 0 3
19051: PUSH
19052: LD_INT 106
19054: EQUAL
19055: IFFALSE 19065
// sTiger := true ;
19057: LD_ADDR_EXP 73
19061: PUSH
19062: LD_INT 1
19064: ST_TO_ADDR
// if p3 = 107 then
19065: LD_VAR 0 3
19069: PUSH
19070: LD_INT 107
19072: EQUAL
19073: IFFALSE 19083
// sBomb := true ;
19075: LD_ADDR_EXP 74
19079: PUSH
19080: LD_INT 1
19082: ST_TO_ADDR
// if p3 = 108 then
19083: LD_VAR 0 3
19087: PUSH
19088: LD_INT 108
19090: EQUAL
19091: IFFALSE 19101
// sWound := true ;
19093: LD_ADDR_EXP 82
19097: PUSH
19098: LD_INT 1
19100: ST_TO_ADDR
// if p3 = 109 then
19101: LD_VAR 0 3
19105: PUSH
19106: LD_INT 109
19108: EQUAL
19109: IFFALSE 19119
// sBetray := true ;
19111: LD_ADDR_EXP 86
19115: PUSH
19116: LD_INT 1
19118: ST_TO_ADDR
// if p3 = 110 then
19119: LD_VAR 0 3
19123: PUSH
19124: LD_INT 110
19126: EQUAL
19127: IFFALSE 19137
// sContamin := true ;
19129: LD_ADDR_EXP 87
19133: PUSH
19134: LD_INT 1
19136: ST_TO_ADDR
// if p3 = 111 then
19137: LD_VAR 0 3
19141: PUSH
19142: LD_INT 111
19144: EQUAL
19145: IFFALSE 19155
// sOil := true ;
19147: LD_ADDR_EXP 89
19151: PUSH
19152: LD_INT 1
19154: ST_TO_ADDR
// if p3 = 112 then
19155: LD_VAR 0 3
19159: PUSH
19160: LD_INT 112
19162: EQUAL
19163: IFFALSE 19173
// sStu := true ;
19165: LD_ADDR_EXP 93
19169: PUSH
19170: LD_INT 1
19172: ST_TO_ADDR
// if p3 = 113 then
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 113
19180: EQUAL
19181: IFFALSE 19191
// sBazooka := true ;
19183: LD_ADDR_EXP 96
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
// if p3 = 114 then
19191: LD_VAR 0 3
19195: PUSH
19196: LD_INT 114
19198: EQUAL
19199: IFFALSE 19209
// sMortar := true ;
19201: LD_ADDR_EXP 97
19205: PUSH
19206: LD_INT 1
19208: ST_TO_ADDR
// if p3 = 115 then
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 115
19216: EQUAL
19217: IFFALSE 19227
// sRanger := true ;
19219: LD_ADDR_EXP 107
19223: PUSH
19224: LD_INT 1
19226: ST_TO_ADDR
// if p3 = 116 then
19227: LD_VAR 0 3
19231: PUSH
19232: LD_INT 116
19234: EQUAL
19235: IFFALSE 19245
// sComputer := true ;
19237: LD_ADDR_EXP 108
19241: PUSH
19242: LD_INT 1
19244: ST_TO_ADDR
// if p3 = 117 then
19245: LD_VAR 0 3
19249: PUSH
19250: LD_INT 117
19252: EQUAL
19253: IFFALSE 19263
// s30 := true ;
19255: LD_ADDR_EXP 109
19259: PUSH
19260: LD_INT 1
19262: ST_TO_ADDR
// if p3 = 118 then
19263: LD_VAR 0 3
19267: PUSH
19268: LD_INT 118
19270: EQUAL
19271: IFFALSE 19281
// s60 := true ;
19273: LD_ADDR_EXP 110
19277: PUSH
19278: LD_INT 1
19280: ST_TO_ADDR
// end ; if p2 = hack_mode then
19281: LD_VAR 0 2
19285: PUSH
19286: LD_INT 101
19288: EQUAL
19289: IFFALSE 19417
// begin case p3 of 1 :
19291: LD_VAR 0 3
19295: PUSH
19296: LD_INT 1
19298: DOUBLE
19299: EQUAL
19300: IFTRUE 19304
19302: GO 19311
19304: POP
// hHackUnlimitedResources ; 2 :
19305: CALL 31680 0 0
19309: GO 19417
19311: LD_INT 2
19313: DOUBLE
19314: EQUAL
19315: IFTRUE 19319
19317: GO 19326
19319: POP
// hHackSetLevel10 ; 3 :
19320: CALL 31813 0 0
19324: GO 19417
19326: LD_INT 3
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19341
19334: POP
// hHackSetLevel10YourUnits ; 4 :
19335: CALL 31898 0 0
19339: GO 19417
19341: LD_INT 4
19343: DOUBLE
19344: EQUAL
19345: IFTRUE 19349
19347: GO 19356
19349: POP
// hHackInvincible ; 5 :
19350: CALL 32346 0 0
19354: GO 19417
19356: LD_INT 5
19358: DOUBLE
19359: EQUAL
19360: IFTRUE 19364
19362: GO 19371
19364: POP
// hHackInvisible ; 6 :
19365: CALL 32457 0 0
19369: GO 19417
19371: LD_INT 6
19373: DOUBLE
19374: EQUAL
19375: IFTRUE 19379
19377: GO 19386
19379: POP
// hHackChangeYourSide ; 7 :
19380: CALL 32514 0 0
19384: GO 19417
19386: LD_INT 7
19388: DOUBLE
19389: EQUAL
19390: IFTRUE 19394
19392: GO 19401
19394: POP
// hHackChangeUnitSide ; 8 :
19395: CALL 32556 0 0
19399: GO 19417
19401: LD_INT 8
19403: DOUBLE
19404: EQUAL
19405: IFTRUE 19409
19407: GO 19416
19409: POP
// hHackFog ; end ;
19410: CALL 32657 0 0
19414: GO 19417
19416: POP
// end ; if p2 = game_save_mode then
19417: LD_VAR 0 2
19421: PUSH
19422: LD_INT 102
19424: EQUAL
19425: IFFALSE 19482
// begin if p3 = 1 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 1
19434: EQUAL
19435: IFFALSE 19447
// globalGameSaveCounter := p4 ;
19437: LD_ADDR_EXP 53
19441: PUSH
19442: LD_VAR 0 4
19446: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19447: LD_VAR 0 3
19451: PUSH
19452: LD_INT 2
19454: EQUAL
19455: IFFALSE 19463
19457: PUSH
19458: LD_EXP 53
19462: AND
19463: IFFALSE 19482
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19465: LD_STRING setGameSaveCounter(
19467: PUSH
19468: LD_EXP 53
19472: STR
19473: PUSH
19474: LD_STRING )
19476: STR
19477: PPUSH
19478: CALL_OW 559
// end ; end ;
19482: LD_VAR 0 7
19486: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19487: LD_INT 0
19489: PPUSH
// streamModeActive := false ;
19490: LD_ADDR_EXP 54
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
// normalCounter := 36 ;
19498: LD_ADDR_EXP 55
19502: PUSH
19503: LD_INT 36
19505: ST_TO_ADDR
// hardcoreCounter := 18 ;
19506: LD_ADDR_EXP 56
19510: PUSH
19511: LD_INT 18
19513: ST_TO_ADDR
// sRocket := false ;
19514: LD_ADDR_EXP 59
19518: PUSH
19519: LD_INT 0
19521: ST_TO_ADDR
// sSpeed := false ;
19522: LD_ADDR_EXP 58
19526: PUSH
19527: LD_INT 0
19529: ST_TO_ADDR
// sEngine := false ;
19530: LD_ADDR_EXP 60
19534: PUSH
19535: LD_INT 0
19537: ST_TO_ADDR
// sSpec := false ;
19538: LD_ADDR_EXP 57
19542: PUSH
19543: LD_INT 0
19545: ST_TO_ADDR
// sLevel := false ;
19546: LD_ADDR_EXP 61
19550: PUSH
19551: LD_INT 0
19553: ST_TO_ADDR
// sArmoury := false ;
19554: LD_ADDR_EXP 62
19558: PUSH
19559: LD_INT 0
19561: ST_TO_ADDR
// sRadar := false ;
19562: LD_ADDR_EXP 63
19566: PUSH
19567: LD_INT 0
19569: ST_TO_ADDR
// sBunker := false ;
19570: LD_ADDR_EXP 64
19574: PUSH
19575: LD_INT 0
19577: ST_TO_ADDR
// sHack := false ;
19578: LD_ADDR_EXP 65
19582: PUSH
19583: LD_INT 0
19585: ST_TO_ADDR
// sFire := false ;
19586: LD_ADDR_EXP 66
19590: PUSH
19591: LD_INT 0
19593: ST_TO_ADDR
// sRefresh := false ;
19594: LD_ADDR_EXP 67
19598: PUSH
19599: LD_INT 0
19601: ST_TO_ADDR
// sExp := false ;
19602: LD_ADDR_EXP 68
19606: PUSH
19607: LD_INT 0
19609: ST_TO_ADDR
// sDepot := false ;
19610: LD_ADDR_EXP 69
19614: PUSH
19615: LD_INT 0
19617: ST_TO_ADDR
// sFlag := false ;
19618: LD_ADDR_EXP 70
19622: PUSH
19623: LD_INT 0
19625: ST_TO_ADDR
// sKamikadze := false ;
19626: LD_ADDR_EXP 78
19630: PUSH
19631: LD_INT 0
19633: ST_TO_ADDR
// sTroll := false ;
19634: LD_ADDR_EXP 79
19638: PUSH
19639: LD_INT 0
19641: ST_TO_ADDR
// sSlow := false ;
19642: LD_ADDR_EXP 80
19646: PUSH
19647: LD_INT 0
19649: ST_TO_ADDR
// sLack := false ;
19650: LD_ADDR_EXP 81
19654: PUSH
19655: LD_INT 0
19657: ST_TO_ADDR
// sTank := false ;
19658: LD_ADDR_EXP 83
19662: PUSH
19663: LD_INT 0
19665: ST_TO_ADDR
// sRemote := false ;
19666: LD_ADDR_EXP 84
19670: PUSH
19671: LD_INT 0
19673: ST_TO_ADDR
// sPowell := false ;
19674: LD_ADDR_EXP 85
19678: PUSH
19679: LD_INT 0
19681: ST_TO_ADDR
// sTeleport := false ;
19682: LD_ADDR_EXP 88
19686: PUSH
19687: LD_INT 0
19689: ST_TO_ADDR
// sOilTower := false ;
19690: LD_ADDR_EXP 90
19694: PUSH
19695: LD_INT 0
19697: ST_TO_ADDR
// sShovel := false ;
19698: LD_ADDR_EXP 91
19702: PUSH
19703: LD_INT 0
19705: ST_TO_ADDR
// sSheik := false ;
19706: LD_ADDR_EXP 92
19710: PUSH
19711: LD_INT 0
19713: ST_TO_ADDR
// sEarthquake := false ;
19714: LD_ADDR_EXP 94
19718: PUSH
19719: LD_INT 0
19721: ST_TO_ADDR
// sAI := false ;
19722: LD_ADDR_EXP 95
19726: PUSH
19727: LD_INT 0
19729: ST_TO_ADDR
// sCargo := false ;
19730: LD_ADDR_EXP 98
19734: PUSH
19735: LD_INT 0
19737: ST_TO_ADDR
// sDLaser := false ;
19738: LD_ADDR_EXP 99
19742: PUSH
19743: LD_INT 0
19745: ST_TO_ADDR
// sExchange := false ;
19746: LD_ADDR_EXP 100
19750: PUSH
19751: LD_INT 0
19753: ST_TO_ADDR
// sFac := false ;
19754: LD_ADDR_EXP 101
19758: PUSH
19759: LD_INT 0
19761: ST_TO_ADDR
// sPower := false ;
19762: LD_ADDR_EXP 102
19766: PUSH
19767: LD_INT 0
19769: ST_TO_ADDR
// sRandom := false ;
19770: LD_ADDR_EXP 103
19774: PUSH
19775: LD_INT 0
19777: ST_TO_ADDR
// sShield := false ;
19778: LD_ADDR_EXP 104
19782: PUSH
19783: LD_INT 0
19785: ST_TO_ADDR
// sTime := false ;
19786: LD_ADDR_EXP 105
19790: PUSH
19791: LD_INT 0
19793: ST_TO_ADDR
// sTools := false ;
19794: LD_ADDR_EXP 106
19798: PUSH
19799: LD_INT 0
19801: ST_TO_ADDR
// sSold := false ;
19802: LD_ADDR_EXP 71
19806: PUSH
19807: LD_INT 0
19809: ST_TO_ADDR
// sDiff := false ;
19810: LD_ADDR_EXP 72
19814: PUSH
19815: LD_INT 0
19817: ST_TO_ADDR
// sFog := false ;
19818: LD_ADDR_EXP 75
19822: PUSH
19823: LD_INT 0
19825: ST_TO_ADDR
// sReset := false ;
19826: LD_ADDR_EXP 76
19830: PUSH
19831: LD_INT 0
19833: ST_TO_ADDR
// sSun := false ;
19834: LD_ADDR_EXP 77
19838: PUSH
19839: LD_INT 0
19841: ST_TO_ADDR
// sTiger := false ;
19842: LD_ADDR_EXP 73
19846: PUSH
19847: LD_INT 0
19849: ST_TO_ADDR
// sBomb := false ;
19850: LD_ADDR_EXP 74
19854: PUSH
19855: LD_INT 0
19857: ST_TO_ADDR
// sWound := false ;
19858: LD_ADDR_EXP 82
19862: PUSH
19863: LD_INT 0
19865: ST_TO_ADDR
// sBetray := false ;
19866: LD_ADDR_EXP 86
19870: PUSH
19871: LD_INT 0
19873: ST_TO_ADDR
// sContamin := false ;
19874: LD_ADDR_EXP 87
19878: PUSH
19879: LD_INT 0
19881: ST_TO_ADDR
// sOil := false ;
19882: LD_ADDR_EXP 89
19886: PUSH
19887: LD_INT 0
19889: ST_TO_ADDR
// sStu := false ;
19890: LD_ADDR_EXP 93
19894: PUSH
19895: LD_INT 0
19897: ST_TO_ADDR
// sBazooka := false ;
19898: LD_ADDR_EXP 96
19902: PUSH
19903: LD_INT 0
19905: ST_TO_ADDR
// sMortar := false ;
19906: LD_ADDR_EXP 97
19910: PUSH
19911: LD_INT 0
19913: ST_TO_ADDR
// sRanger := false ;
19914: LD_ADDR_EXP 107
19918: PUSH
19919: LD_INT 0
19921: ST_TO_ADDR
// sComputer := false ;
19922: LD_ADDR_EXP 108
19926: PUSH
19927: LD_INT 0
19929: ST_TO_ADDR
// s30 := false ;
19930: LD_ADDR_EXP 109
19934: PUSH
19935: LD_INT 0
19937: ST_TO_ADDR
// s60 := false ;
19938: LD_ADDR_EXP 110
19942: PUSH
19943: LD_INT 0
19945: ST_TO_ADDR
// end ;
19946: LD_VAR 0 1
19950: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19951: LD_INT 0
19953: PPUSH
19954: PPUSH
19955: PPUSH
19956: PPUSH
19957: PPUSH
19958: PPUSH
19959: PPUSH
// result := [ ] ;
19960: LD_ADDR_VAR 0 2
19964: PUSH
19965: EMPTY
19966: ST_TO_ADDR
// if campaign_id = 1 then
19967: LD_OWVAR 69
19971: PUSH
19972: LD_INT 1
19974: EQUAL
19975: IFFALSE 23141
// begin case mission_number of 1 :
19977: LD_OWVAR 70
19981: PUSH
19982: LD_INT 1
19984: DOUBLE
19985: EQUAL
19986: IFTRUE 19990
19988: GO 20066
19990: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19991: LD_ADDR_VAR 0 2
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: LD_INT 4
20001: PUSH
20002: LD_INT 11
20004: PUSH
20005: LD_INT 12
20007: PUSH
20008: LD_INT 15
20010: PUSH
20011: LD_INT 16
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_INT 23
20019: PUSH
20020: LD_INT 26
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 101
20036: PUSH
20037: LD_INT 102
20039: PUSH
20040: LD_INT 106
20042: PUSH
20043: LD_INT 116
20045: PUSH
20046: LD_INT 117
20048: PUSH
20049: LD_INT 118
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: ST_TO_ADDR
20064: GO 23139
20066: LD_INT 2
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20158
20074: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20075: LD_ADDR_VAR 0 2
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 4
20085: PUSH
20086: LD_INT 11
20088: PUSH
20089: LD_INT 12
20091: PUSH
20092: LD_INT 15
20094: PUSH
20095: LD_INT 16
20097: PUSH
20098: LD_INT 22
20100: PUSH
20101: LD_INT 23
20103: PUSH
20104: LD_INT 26
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 101
20120: PUSH
20121: LD_INT 102
20123: PUSH
20124: LD_INT 105
20126: PUSH
20127: LD_INT 106
20129: PUSH
20130: LD_INT 108
20132: PUSH
20133: LD_INT 116
20135: PUSH
20136: LD_INT 117
20138: PUSH
20139: LD_INT 118
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: ST_TO_ADDR
20156: GO 23139
20158: LD_INT 3
20160: DOUBLE
20161: EQUAL
20162: IFTRUE 20166
20164: GO 20254
20166: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20167: LD_ADDR_VAR 0 2
20171: PUSH
20172: LD_INT 2
20174: PUSH
20175: LD_INT 4
20177: PUSH
20178: LD_INT 5
20180: PUSH
20181: LD_INT 11
20183: PUSH
20184: LD_INT 12
20186: PUSH
20187: LD_INT 15
20189: PUSH
20190: LD_INT 16
20192: PUSH
20193: LD_INT 22
20195: PUSH
20196: LD_INT 26
20198: PUSH
20199: LD_INT 36
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 101
20216: PUSH
20217: LD_INT 102
20219: PUSH
20220: LD_INT 105
20222: PUSH
20223: LD_INT 106
20225: PUSH
20226: LD_INT 108
20228: PUSH
20229: LD_INT 116
20231: PUSH
20232: LD_INT 117
20234: PUSH
20235: LD_INT 118
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: ST_TO_ADDR
20252: GO 23139
20254: LD_INT 4
20256: DOUBLE
20257: EQUAL
20258: IFTRUE 20262
20260: GO 20358
20262: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 4
20273: PUSH
20274: LD_INT 5
20276: PUSH
20277: LD_INT 8
20279: PUSH
20280: LD_INT 11
20282: PUSH
20283: LD_INT 12
20285: PUSH
20286: LD_INT 15
20288: PUSH
20289: LD_INT 16
20291: PUSH
20292: LD_INT 22
20294: PUSH
20295: LD_INT 23
20297: PUSH
20298: LD_INT 26
20300: PUSH
20301: LD_INT 36
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 101
20320: PUSH
20321: LD_INT 102
20323: PUSH
20324: LD_INT 105
20326: PUSH
20327: LD_INT 106
20329: PUSH
20330: LD_INT 108
20332: PUSH
20333: LD_INT 116
20335: PUSH
20336: LD_INT 117
20338: PUSH
20339: LD_INT 118
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: ST_TO_ADDR
20356: GO 23139
20358: LD_INT 5
20360: DOUBLE
20361: EQUAL
20362: IFTRUE 20366
20364: GO 20478
20366: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20367: LD_ADDR_VAR 0 2
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: LD_INT 4
20377: PUSH
20378: LD_INT 5
20380: PUSH
20381: LD_INT 6
20383: PUSH
20384: LD_INT 8
20386: PUSH
20387: LD_INT 11
20389: PUSH
20390: LD_INT 12
20392: PUSH
20393: LD_INT 15
20395: PUSH
20396: LD_INT 16
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_INT 23
20404: PUSH
20405: LD_INT 25
20407: PUSH
20408: LD_INT 26
20410: PUSH
20411: LD_INT 36
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 101
20432: PUSH
20433: LD_INT 102
20435: PUSH
20436: LD_INT 105
20438: PUSH
20439: LD_INT 106
20441: PUSH
20442: LD_INT 108
20444: PUSH
20445: LD_INT 109
20447: PUSH
20448: LD_INT 112
20450: PUSH
20451: LD_INT 116
20453: PUSH
20454: LD_INT 117
20456: PUSH
20457: LD_INT 118
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: ST_TO_ADDR
20476: GO 23139
20478: LD_INT 6
20480: DOUBLE
20481: EQUAL
20482: IFTRUE 20486
20484: GO 20618
20486: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20487: LD_ADDR_VAR 0 2
20491: PUSH
20492: LD_INT 2
20494: PUSH
20495: LD_INT 4
20497: PUSH
20498: LD_INT 5
20500: PUSH
20501: LD_INT 6
20503: PUSH
20504: LD_INT 8
20506: PUSH
20507: LD_INT 11
20509: PUSH
20510: LD_INT 12
20512: PUSH
20513: LD_INT 15
20515: PUSH
20516: LD_INT 16
20518: PUSH
20519: LD_INT 20
20521: PUSH
20522: LD_INT 21
20524: PUSH
20525: LD_INT 22
20527: PUSH
20528: LD_INT 23
20530: PUSH
20531: LD_INT 25
20533: PUSH
20534: LD_INT 26
20536: PUSH
20537: LD_INT 30
20539: PUSH
20540: LD_INT 31
20542: PUSH
20543: LD_INT 32
20545: PUSH
20546: LD_INT 36
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 101
20572: PUSH
20573: LD_INT 102
20575: PUSH
20576: LD_INT 105
20578: PUSH
20579: LD_INT 106
20581: PUSH
20582: LD_INT 108
20584: PUSH
20585: LD_INT 109
20587: PUSH
20588: LD_INT 112
20590: PUSH
20591: LD_INT 116
20593: PUSH
20594: LD_INT 117
20596: PUSH
20597: LD_INT 118
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: ST_TO_ADDR
20616: GO 23139
20618: LD_INT 7
20620: DOUBLE
20621: EQUAL
20622: IFTRUE 20626
20624: GO 20738
20626: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20627: LD_ADDR_VAR 0 2
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: LD_INT 4
20637: PUSH
20638: LD_INT 5
20640: PUSH
20641: LD_INT 7
20643: PUSH
20644: LD_INT 11
20646: PUSH
20647: LD_INT 12
20649: PUSH
20650: LD_INT 15
20652: PUSH
20653: LD_INT 16
20655: PUSH
20656: LD_INT 20
20658: PUSH
20659: LD_INT 21
20661: PUSH
20662: LD_INT 22
20664: PUSH
20665: LD_INT 23
20667: PUSH
20668: LD_INT 25
20670: PUSH
20671: LD_INT 26
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 101
20692: PUSH
20693: LD_INT 102
20695: PUSH
20696: LD_INT 103
20698: PUSH
20699: LD_INT 105
20701: PUSH
20702: LD_INT 106
20704: PUSH
20705: LD_INT 108
20707: PUSH
20708: LD_INT 112
20710: PUSH
20711: LD_INT 116
20713: PUSH
20714: LD_INT 117
20716: PUSH
20717: LD_INT 118
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: ST_TO_ADDR
20736: GO 23139
20738: LD_INT 8
20740: DOUBLE
20741: EQUAL
20742: IFTRUE 20746
20744: GO 20886
20746: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20747: LD_ADDR_VAR 0 2
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: LD_INT 4
20757: PUSH
20758: LD_INT 5
20760: PUSH
20761: LD_INT 6
20763: PUSH
20764: LD_INT 7
20766: PUSH
20767: LD_INT 8
20769: PUSH
20770: LD_INT 11
20772: PUSH
20773: LD_INT 12
20775: PUSH
20776: LD_INT 15
20778: PUSH
20779: LD_INT 16
20781: PUSH
20782: LD_INT 20
20784: PUSH
20785: LD_INT 21
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_INT 23
20793: PUSH
20794: LD_INT 25
20796: PUSH
20797: LD_INT 26
20799: PUSH
20800: LD_INT 30
20802: PUSH
20803: LD_INT 31
20805: PUSH
20806: LD_INT 32
20808: PUSH
20809: LD_INT 36
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 101
20836: PUSH
20837: LD_INT 102
20839: PUSH
20840: LD_INT 103
20842: PUSH
20843: LD_INT 105
20845: PUSH
20846: LD_INT 106
20848: PUSH
20849: LD_INT 108
20851: PUSH
20852: LD_INT 109
20854: PUSH
20855: LD_INT 112
20857: PUSH
20858: LD_INT 116
20860: PUSH
20861: LD_INT 117
20863: PUSH
20864: LD_INT 118
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: ST_TO_ADDR
20884: GO 23139
20886: LD_INT 9
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 21042
20894: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20895: LD_ADDR_VAR 0 2
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: LD_INT 4
20905: PUSH
20906: LD_INT 5
20908: PUSH
20909: LD_INT 6
20911: PUSH
20912: LD_INT 7
20914: PUSH
20915: LD_INT 8
20917: PUSH
20918: LD_INT 11
20920: PUSH
20921: LD_INT 12
20923: PUSH
20924: LD_INT 15
20926: PUSH
20927: LD_INT 16
20929: PUSH
20930: LD_INT 20
20932: PUSH
20933: LD_INT 21
20935: PUSH
20936: LD_INT 22
20938: PUSH
20939: LD_INT 23
20941: PUSH
20942: LD_INT 25
20944: PUSH
20945: LD_INT 26
20947: PUSH
20948: LD_INT 28
20950: PUSH
20951: LD_INT 30
20953: PUSH
20954: LD_INT 31
20956: PUSH
20957: LD_INT 32
20959: PUSH
20960: LD_INT 36
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 101
20988: PUSH
20989: LD_INT 102
20991: PUSH
20992: LD_INT 103
20994: PUSH
20995: LD_INT 105
20997: PUSH
20998: LD_INT 106
21000: PUSH
21001: LD_INT 108
21003: PUSH
21004: LD_INT 109
21006: PUSH
21007: LD_INT 112
21009: PUSH
21010: LD_INT 114
21012: PUSH
21013: LD_INT 116
21015: PUSH
21016: LD_INT 117
21018: PUSH
21019: LD_INT 118
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: ST_TO_ADDR
21040: GO 23139
21042: LD_INT 10
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21246
21050: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21051: LD_ADDR_VAR 0 2
21055: PUSH
21056: LD_INT 2
21058: PUSH
21059: LD_INT 4
21061: PUSH
21062: LD_INT 5
21064: PUSH
21065: LD_INT 6
21067: PUSH
21068: LD_INT 7
21070: PUSH
21071: LD_INT 8
21073: PUSH
21074: LD_INT 9
21076: PUSH
21077: LD_INT 10
21079: PUSH
21080: LD_INT 11
21082: PUSH
21083: LD_INT 12
21085: PUSH
21086: LD_INT 13
21088: PUSH
21089: LD_INT 14
21091: PUSH
21092: LD_INT 15
21094: PUSH
21095: LD_INT 16
21097: PUSH
21098: LD_INT 17
21100: PUSH
21101: LD_INT 18
21103: PUSH
21104: LD_INT 19
21106: PUSH
21107: LD_INT 20
21109: PUSH
21110: LD_INT 21
21112: PUSH
21113: LD_INT 22
21115: PUSH
21116: LD_INT 23
21118: PUSH
21119: LD_INT 24
21121: PUSH
21122: LD_INT 25
21124: PUSH
21125: LD_INT 26
21127: PUSH
21128: LD_INT 28
21130: PUSH
21131: LD_INT 30
21133: PUSH
21134: LD_INT 31
21136: PUSH
21137: LD_INT 32
21139: PUSH
21140: LD_INT 36
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 101
21176: PUSH
21177: LD_INT 102
21179: PUSH
21180: LD_INT 103
21182: PUSH
21183: LD_INT 104
21185: PUSH
21186: LD_INT 105
21188: PUSH
21189: LD_INT 106
21191: PUSH
21192: LD_INT 107
21194: PUSH
21195: LD_INT 108
21197: PUSH
21198: LD_INT 109
21200: PUSH
21201: LD_INT 110
21203: PUSH
21204: LD_INT 111
21206: PUSH
21207: LD_INT 112
21209: PUSH
21210: LD_INT 114
21212: PUSH
21213: LD_INT 116
21215: PUSH
21216: LD_INT 117
21218: PUSH
21219: LD_INT 118
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: ST_TO_ADDR
21244: GO 23139
21246: LD_INT 11
21248: DOUBLE
21249: EQUAL
21250: IFTRUE 21254
21252: GO 21458
21254: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21255: LD_ADDR_VAR 0 2
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 3
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: LD_INT 5
21271: PUSH
21272: LD_INT 6
21274: PUSH
21275: LD_INT 7
21277: PUSH
21278: LD_INT 8
21280: PUSH
21281: LD_INT 9
21283: PUSH
21284: LD_INT 10
21286: PUSH
21287: LD_INT 11
21289: PUSH
21290: LD_INT 12
21292: PUSH
21293: LD_INT 13
21295: PUSH
21296: LD_INT 14
21298: PUSH
21299: LD_INT 15
21301: PUSH
21302: LD_INT 16
21304: PUSH
21305: LD_INT 17
21307: PUSH
21308: LD_INT 18
21310: PUSH
21311: LD_INT 19
21313: PUSH
21314: LD_INT 20
21316: PUSH
21317: LD_INT 21
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_INT 23
21325: PUSH
21326: LD_INT 24
21328: PUSH
21329: LD_INT 25
21331: PUSH
21332: LD_INT 26
21334: PUSH
21335: LD_INT 28
21337: PUSH
21338: LD_INT 30
21340: PUSH
21341: LD_INT 31
21343: PUSH
21344: LD_INT 32
21346: PUSH
21347: LD_INT 34
21349: PUSH
21350: LD_INT 36
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 101
21388: PUSH
21389: LD_INT 102
21391: PUSH
21392: LD_INT 103
21394: PUSH
21395: LD_INT 104
21397: PUSH
21398: LD_INT 105
21400: PUSH
21401: LD_INT 106
21403: PUSH
21404: LD_INT 107
21406: PUSH
21407: LD_INT 108
21409: PUSH
21410: LD_INT 109
21412: PUSH
21413: LD_INT 110
21415: PUSH
21416: LD_INT 111
21418: PUSH
21419: LD_INT 112
21421: PUSH
21422: LD_INT 114
21424: PUSH
21425: LD_INT 116
21427: PUSH
21428: LD_INT 117
21430: PUSH
21431: LD_INT 118
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: ST_TO_ADDR
21456: GO 23139
21458: LD_INT 12
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21686
21466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21467: LD_ADDR_VAR 0 2
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: LD_INT 3
21480: PUSH
21481: LD_INT 4
21483: PUSH
21484: LD_INT 5
21486: PUSH
21487: LD_INT 6
21489: PUSH
21490: LD_INT 7
21492: PUSH
21493: LD_INT 8
21495: PUSH
21496: LD_INT 9
21498: PUSH
21499: LD_INT 10
21501: PUSH
21502: LD_INT 11
21504: PUSH
21505: LD_INT 12
21507: PUSH
21508: LD_INT 13
21510: PUSH
21511: LD_INT 14
21513: PUSH
21514: LD_INT 15
21516: PUSH
21517: LD_INT 16
21519: PUSH
21520: LD_INT 17
21522: PUSH
21523: LD_INT 18
21525: PUSH
21526: LD_INT 19
21528: PUSH
21529: LD_INT 20
21531: PUSH
21532: LD_INT 21
21534: PUSH
21535: LD_INT 22
21537: PUSH
21538: LD_INT 23
21540: PUSH
21541: LD_INT 24
21543: PUSH
21544: LD_INT 25
21546: PUSH
21547: LD_INT 26
21549: PUSH
21550: LD_INT 27
21552: PUSH
21553: LD_INT 28
21555: PUSH
21556: LD_INT 30
21558: PUSH
21559: LD_INT 31
21561: PUSH
21562: LD_INT 32
21564: PUSH
21565: LD_INT 33
21567: PUSH
21568: LD_INT 34
21570: PUSH
21571: LD_INT 36
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 101
21612: PUSH
21613: LD_INT 102
21615: PUSH
21616: LD_INT 103
21618: PUSH
21619: LD_INT 104
21621: PUSH
21622: LD_INT 105
21624: PUSH
21625: LD_INT 106
21627: PUSH
21628: LD_INT 107
21630: PUSH
21631: LD_INT 108
21633: PUSH
21634: LD_INT 109
21636: PUSH
21637: LD_INT 110
21639: PUSH
21640: LD_INT 111
21642: PUSH
21643: LD_INT 112
21645: PUSH
21646: LD_INT 113
21648: PUSH
21649: LD_INT 114
21651: PUSH
21652: LD_INT 116
21654: PUSH
21655: LD_INT 117
21657: PUSH
21658: LD_INT 118
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: ST_TO_ADDR
21684: GO 23139
21686: LD_INT 13
21688: DOUBLE
21689: EQUAL
21690: IFTRUE 21694
21692: GO 21902
21694: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21695: LD_ADDR_VAR 0 2
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: LD_INT 3
21708: PUSH
21709: LD_INT 4
21711: PUSH
21712: LD_INT 5
21714: PUSH
21715: LD_INT 8
21717: PUSH
21718: LD_INT 9
21720: PUSH
21721: LD_INT 10
21723: PUSH
21724: LD_INT 11
21726: PUSH
21727: LD_INT 12
21729: PUSH
21730: LD_INT 14
21732: PUSH
21733: LD_INT 15
21735: PUSH
21736: LD_INT 16
21738: PUSH
21739: LD_INT 17
21741: PUSH
21742: LD_INT 18
21744: PUSH
21745: LD_INT 19
21747: PUSH
21748: LD_INT 20
21750: PUSH
21751: LD_INT 21
21753: PUSH
21754: LD_INT 22
21756: PUSH
21757: LD_INT 23
21759: PUSH
21760: LD_INT 24
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 26
21768: PUSH
21769: LD_INT 27
21771: PUSH
21772: LD_INT 28
21774: PUSH
21775: LD_INT 30
21777: PUSH
21778: LD_INT 31
21780: PUSH
21781: LD_INT 32
21783: PUSH
21784: LD_INT 33
21786: PUSH
21787: LD_INT 34
21789: PUSH
21790: LD_INT 36
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 101
21828: PUSH
21829: LD_INT 102
21831: PUSH
21832: LD_INT 103
21834: PUSH
21835: LD_INT 104
21837: PUSH
21838: LD_INT 105
21840: PUSH
21841: LD_INT 106
21843: PUSH
21844: LD_INT 107
21846: PUSH
21847: LD_INT 108
21849: PUSH
21850: LD_INT 109
21852: PUSH
21853: LD_INT 110
21855: PUSH
21856: LD_INT 111
21858: PUSH
21859: LD_INT 112
21861: PUSH
21862: LD_INT 113
21864: PUSH
21865: LD_INT 114
21867: PUSH
21868: LD_INT 116
21870: PUSH
21871: LD_INT 117
21873: PUSH
21874: LD_INT 118
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: ST_TO_ADDR
21900: GO 23139
21902: LD_INT 14
21904: DOUBLE
21905: EQUAL
21906: IFTRUE 21910
21908: GO 22134
21910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: LD_INT 2
21921: PUSH
21922: LD_INT 3
21924: PUSH
21925: LD_INT 4
21927: PUSH
21928: LD_INT 5
21930: PUSH
21931: LD_INT 6
21933: PUSH
21934: LD_INT 7
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 9
21942: PUSH
21943: LD_INT 10
21945: PUSH
21946: LD_INT 11
21948: PUSH
21949: LD_INT 12
21951: PUSH
21952: LD_INT 13
21954: PUSH
21955: LD_INT 14
21957: PUSH
21958: LD_INT 15
21960: PUSH
21961: LD_INT 16
21963: PUSH
21964: LD_INT 17
21966: PUSH
21967: LD_INT 18
21969: PUSH
21970: LD_INT 19
21972: PUSH
21973: LD_INT 20
21975: PUSH
21976: LD_INT 21
21978: PUSH
21979: LD_INT 22
21981: PUSH
21982: LD_INT 23
21984: PUSH
21985: LD_INT 24
21987: PUSH
21988: LD_INT 25
21990: PUSH
21991: LD_INT 26
21993: PUSH
21994: LD_INT 27
21996: PUSH
21997: LD_INT 28
21999: PUSH
22000: LD_INT 29
22002: PUSH
22003: LD_INT 30
22005: PUSH
22006: LD_INT 31
22008: PUSH
22009: LD_INT 32
22011: PUSH
22012: LD_INT 33
22014: PUSH
22015: LD_INT 34
22017: PUSH
22018: LD_INT 36
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 101
22060: PUSH
22061: LD_INT 102
22063: PUSH
22064: LD_INT 103
22066: PUSH
22067: LD_INT 104
22069: PUSH
22070: LD_INT 105
22072: PUSH
22073: LD_INT 106
22075: PUSH
22076: LD_INT 107
22078: PUSH
22079: LD_INT 108
22081: PUSH
22082: LD_INT 109
22084: PUSH
22085: LD_INT 110
22087: PUSH
22088: LD_INT 111
22090: PUSH
22091: LD_INT 112
22093: PUSH
22094: LD_INT 113
22096: PUSH
22097: LD_INT 114
22099: PUSH
22100: LD_INT 116
22102: PUSH
22103: LD_INT 117
22105: PUSH
22106: LD_INT 118
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: ST_TO_ADDR
22132: GO 23139
22134: LD_INT 15
22136: DOUBLE
22137: EQUAL
22138: IFTRUE 22142
22140: GO 22366
22142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22143: LD_ADDR_VAR 0 2
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: LD_INT 4
22159: PUSH
22160: LD_INT 5
22162: PUSH
22163: LD_INT 6
22165: PUSH
22166: LD_INT 7
22168: PUSH
22169: LD_INT 8
22171: PUSH
22172: LD_INT 9
22174: PUSH
22175: LD_INT 10
22177: PUSH
22178: LD_INT 11
22180: PUSH
22181: LD_INT 12
22183: PUSH
22184: LD_INT 13
22186: PUSH
22187: LD_INT 14
22189: PUSH
22190: LD_INT 15
22192: PUSH
22193: LD_INT 16
22195: PUSH
22196: LD_INT 17
22198: PUSH
22199: LD_INT 18
22201: PUSH
22202: LD_INT 19
22204: PUSH
22205: LD_INT 20
22207: PUSH
22208: LD_INT 21
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_INT 23
22216: PUSH
22217: LD_INT 24
22219: PUSH
22220: LD_INT 25
22222: PUSH
22223: LD_INT 26
22225: PUSH
22226: LD_INT 27
22228: PUSH
22229: LD_INT 28
22231: PUSH
22232: LD_INT 29
22234: PUSH
22235: LD_INT 30
22237: PUSH
22238: LD_INT 31
22240: PUSH
22241: LD_INT 32
22243: PUSH
22244: LD_INT 33
22246: PUSH
22247: LD_INT 34
22249: PUSH
22250: LD_INT 36
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 101
22292: PUSH
22293: LD_INT 102
22295: PUSH
22296: LD_INT 103
22298: PUSH
22299: LD_INT 104
22301: PUSH
22302: LD_INT 105
22304: PUSH
22305: LD_INT 106
22307: PUSH
22308: LD_INT 107
22310: PUSH
22311: LD_INT 108
22313: PUSH
22314: LD_INT 109
22316: PUSH
22317: LD_INT 110
22319: PUSH
22320: LD_INT 111
22322: PUSH
22323: LD_INT 112
22325: PUSH
22326: LD_INT 113
22328: PUSH
22329: LD_INT 114
22331: PUSH
22332: LD_INT 116
22334: PUSH
22335: LD_INT 117
22337: PUSH
22338: LD_INT 118
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: ST_TO_ADDR
22364: GO 23139
22366: LD_INT 16
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22374
22372: GO 22510
22374: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22375: LD_ADDR_VAR 0 2
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: LD_INT 4
22385: PUSH
22386: LD_INT 5
22388: PUSH
22389: LD_INT 7
22391: PUSH
22392: LD_INT 11
22394: PUSH
22395: LD_INT 12
22397: PUSH
22398: LD_INT 15
22400: PUSH
22401: LD_INT 16
22403: PUSH
22404: LD_INT 20
22406: PUSH
22407: LD_INT 21
22409: PUSH
22410: LD_INT 22
22412: PUSH
22413: LD_INT 23
22415: PUSH
22416: LD_INT 25
22418: PUSH
22419: LD_INT 26
22421: PUSH
22422: LD_INT 30
22424: PUSH
22425: LD_INT 31
22427: PUSH
22428: LD_INT 32
22430: PUSH
22431: LD_INT 33
22433: PUSH
22434: LD_INT 34
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 101
22460: PUSH
22461: LD_INT 102
22463: PUSH
22464: LD_INT 103
22466: PUSH
22467: LD_INT 106
22469: PUSH
22470: LD_INT 108
22472: PUSH
22473: LD_INT 112
22475: PUSH
22476: LD_INT 113
22478: PUSH
22479: LD_INT 114
22481: PUSH
22482: LD_INT 116
22484: PUSH
22485: LD_INT 117
22487: PUSH
22488: LD_INT 118
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: ST_TO_ADDR
22508: GO 23139
22510: LD_INT 17
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22518
22516: GO 22742
22518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: LD_INT 4
22535: PUSH
22536: LD_INT 5
22538: PUSH
22539: LD_INT 6
22541: PUSH
22542: LD_INT 7
22544: PUSH
22545: LD_INT 8
22547: PUSH
22548: LD_INT 9
22550: PUSH
22551: LD_INT 10
22553: PUSH
22554: LD_INT 11
22556: PUSH
22557: LD_INT 12
22559: PUSH
22560: LD_INT 13
22562: PUSH
22563: LD_INT 14
22565: PUSH
22566: LD_INT 15
22568: PUSH
22569: LD_INT 16
22571: PUSH
22572: LD_INT 17
22574: PUSH
22575: LD_INT 18
22577: PUSH
22578: LD_INT 19
22580: PUSH
22581: LD_INT 20
22583: PUSH
22584: LD_INT 21
22586: PUSH
22587: LD_INT 22
22589: PUSH
22590: LD_INT 23
22592: PUSH
22593: LD_INT 24
22595: PUSH
22596: LD_INT 25
22598: PUSH
22599: LD_INT 26
22601: PUSH
22602: LD_INT 27
22604: PUSH
22605: LD_INT 28
22607: PUSH
22608: LD_INT 29
22610: PUSH
22611: LD_INT 30
22613: PUSH
22614: LD_INT 31
22616: PUSH
22617: LD_INT 32
22619: PUSH
22620: LD_INT 33
22622: PUSH
22623: LD_INT 34
22625: PUSH
22626: LD_INT 36
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 101
22668: PUSH
22669: LD_INT 102
22671: PUSH
22672: LD_INT 103
22674: PUSH
22675: LD_INT 104
22677: PUSH
22678: LD_INT 105
22680: PUSH
22681: LD_INT 106
22683: PUSH
22684: LD_INT 107
22686: PUSH
22687: LD_INT 108
22689: PUSH
22690: LD_INT 109
22692: PUSH
22693: LD_INT 110
22695: PUSH
22696: LD_INT 111
22698: PUSH
22699: LD_INT 112
22701: PUSH
22702: LD_INT 113
22704: PUSH
22705: LD_INT 114
22707: PUSH
22708: LD_INT 116
22710: PUSH
22711: LD_INT 117
22713: PUSH
22714: LD_INT 118
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: ST_TO_ADDR
22740: GO 23139
22742: LD_INT 18
22744: DOUBLE
22745: EQUAL
22746: IFTRUE 22750
22748: GO 22898
22750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22751: LD_ADDR_VAR 0 2
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 4
22761: PUSH
22762: LD_INT 5
22764: PUSH
22765: LD_INT 7
22767: PUSH
22768: LD_INT 11
22770: PUSH
22771: LD_INT 12
22773: PUSH
22774: LD_INT 15
22776: PUSH
22777: LD_INT 16
22779: PUSH
22780: LD_INT 20
22782: PUSH
22783: LD_INT 21
22785: PUSH
22786: LD_INT 22
22788: PUSH
22789: LD_INT 23
22791: PUSH
22792: LD_INT 25
22794: PUSH
22795: LD_INT 26
22797: PUSH
22798: LD_INT 30
22800: PUSH
22801: LD_INT 31
22803: PUSH
22804: LD_INT 32
22806: PUSH
22807: LD_INT 33
22809: PUSH
22810: LD_INT 34
22812: PUSH
22813: LD_INT 35
22815: PUSH
22816: LD_INT 36
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 101
22844: PUSH
22845: LD_INT 102
22847: PUSH
22848: LD_INT 103
22850: PUSH
22851: LD_INT 106
22853: PUSH
22854: LD_INT 108
22856: PUSH
22857: LD_INT 112
22859: PUSH
22860: LD_INT 113
22862: PUSH
22863: LD_INT 114
22865: PUSH
22866: LD_INT 115
22868: PUSH
22869: LD_INT 116
22871: PUSH
22872: LD_INT 117
22874: PUSH
22875: LD_INT 118
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: ST_TO_ADDR
22896: GO 23139
22898: LD_INT 19
22900: DOUBLE
22901: EQUAL
22902: IFTRUE 22906
22904: GO 23138
22906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22907: LD_ADDR_VAR 0 2
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: LD_INT 2
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: LD_INT 4
22923: PUSH
22924: LD_INT 5
22926: PUSH
22927: LD_INT 6
22929: PUSH
22930: LD_INT 7
22932: PUSH
22933: LD_INT 8
22935: PUSH
22936: LD_INT 9
22938: PUSH
22939: LD_INT 10
22941: PUSH
22942: LD_INT 11
22944: PUSH
22945: LD_INT 12
22947: PUSH
22948: LD_INT 13
22950: PUSH
22951: LD_INT 14
22953: PUSH
22954: LD_INT 15
22956: PUSH
22957: LD_INT 16
22959: PUSH
22960: LD_INT 17
22962: PUSH
22963: LD_INT 18
22965: PUSH
22966: LD_INT 19
22968: PUSH
22969: LD_INT 20
22971: PUSH
22972: LD_INT 21
22974: PUSH
22975: LD_INT 22
22977: PUSH
22978: LD_INT 23
22980: PUSH
22981: LD_INT 24
22983: PUSH
22984: LD_INT 25
22986: PUSH
22987: LD_INT 26
22989: PUSH
22990: LD_INT 27
22992: PUSH
22993: LD_INT 28
22995: PUSH
22996: LD_INT 29
22998: PUSH
22999: LD_INT 30
23001: PUSH
23002: LD_INT 31
23004: PUSH
23005: LD_INT 32
23007: PUSH
23008: LD_INT 33
23010: PUSH
23011: LD_INT 34
23013: PUSH
23014: LD_INT 35
23016: PUSH
23017: LD_INT 36
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 101
23060: PUSH
23061: LD_INT 102
23063: PUSH
23064: LD_INT 103
23066: PUSH
23067: LD_INT 104
23069: PUSH
23070: LD_INT 105
23072: PUSH
23073: LD_INT 106
23075: PUSH
23076: LD_INT 107
23078: PUSH
23079: LD_INT 108
23081: PUSH
23082: LD_INT 109
23084: PUSH
23085: LD_INT 110
23087: PUSH
23088: LD_INT 111
23090: PUSH
23091: LD_INT 112
23093: PUSH
23094: LD_INT 113
23096: PUSH
23097: LD_INT 114
23099: PUSH
23100: LD_INT 115
23102: PUSH
23103: LD_INT 116
23105: PUSH
23106: LD_INT 117
23108: PUSH
23109: LD_INT 118
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: ST_TO_ADDR
23136: GO 23139
23138: POP
// end else
23139: GO 23370
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23141: LD_ADDR_VAR 0 2
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 4
23157: PUSH
23158: LD_INT 5
23160: PUSH
23161: LD_INT 6
23163: PUSH
23164: LD_INT 7
23166: PUSH
23167: LD_INT 8
23169: PUSH
23170: LD_INT 9
23172: PUSH
23173: LD_INT 10
23175: PUSH
23176: LD_INT 11
23178: PUSH
23179: LD_INT 12
23181: PUSH
23182: LD_INT 13
23184: PUSH
23185: LD_INT 14
23187: PUSH
23188: LD_INT 15
23190: PUSH
23191: LD_INT 16
23193: PUSH
23194: LD_INT 17
23196: PUSH
23197: LD_INT 18
23199: PUSH
23200: LD_INT 19
23202: PUSH
23203: LD_INT 20
23205: PUSH
23206: LD_INT 21
23208: PUSH
23209: LD_INT 22
23211: PUSH
23212: LD_INT 23
23214: PUSH
23215: LD_INT 24
23217: PUSH
23218: LD_INT 25
23220: PUSH
23221: LD_INT 26
23223: PUSH
23224: LD_INT 27
23226: PUSH
23227: LD_INT 28
23229: PUSH
23230: LD_INT 29
23232: PUSH
23233: LD_INT 30
23235: PUSH
23236: LD_INT 31
23238: PUSH
23239: LD_INT 32
23241: PUSH
23242: LD_INT 33
23244: PUSH
23245: LD_INT 34
23247: PUSH
23248: LD_INT 35
23250: PUSH
23251: LD_INT 36
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 101
23294: PUSH
23295: LD_INT 102
23297: PUSH
23298: LD_INT 103
23300: PUSH
23301: LD_INT 104
23303: PUSH
23304: LD_INT 105
23306: PUSH
23307: LD_INT 106
23309: PUSH
23310: LD_INT 107
23312: PUSH
23313: LD_INT 108
23315: PUSH
23316: LD_INT 109
23318: PUSH
23319: LD_INT 110
23321: PUSH
23322: LD_INT 111
23324: PUSH
23325: LD_INT 112
23327: PUSH
23328: LD_INT 113
23330: PUSH
23331: LD_INT 114
23333: PUSH
23334: LD_INT 115
23336: PUSH
23337: LD_INT 116
23339: PUSH
23340: LD_INT 117
23342: PUSH
23343: LD_INT 118
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: ST_TO_ADDR
// if result then
23370: LD_VAR 0 2
23374: IFFALSE 24160
// begin normal :=  ;
23376: LD_ADDR_VAR 0 5
23380: PUSH
23381: LD_STRING 
23383: ST_TO_ADDR
// hardcore :=  ;
23384: LD_ADDR_VAR 0 6
23388: PUSH
23389: LD_STRING 
23391: ST_TO_ADDR
// active :=  ;
23392: LD_ADDR_VAR 0 7
23396: PUSH
23397: LD_STRING 
23399: ST_TO_ADDR
// for i = 1 to normalCounter do
23400: LD_ADDR_VAR 0 8
23404: PUSH
23405: DOUBLE
23406: LD_INT 1
23408: DEC
23409: ST_TO_ADDR
23410: LD_EXP 55
23414: PUSH
23415: FOR_TO
23416: IFFALSE 23517
// begin tmp := 0 ;
23418: LD_ADDR_VAR 0 3
23422: PUSH
23423: LD_STRING 0
23425: ST_TO_ADDR
// if result [ 1 ] then
23426: LD_VAR 0 2
23430: PUSH
23431: LD_INT 1
23433: ARRAY
23434: IFFALSE 23499
// if result [ 1 ] [ 1 ] = i then
23436: LD_VAR 0 2
23440: PUSH
23441: LD_INT 1
23443: ARRAY
23444: PUSH
23445: LD_INT 1
23447: ARRAY
23448: PUSH
23449: LD_VAR 0 8
23453: EQUAL
23454: IFFALSE 23499
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23456: LD_ADDR_VAR 0 2
23460: PUSH
23461: LD_VAR 0 2
23465: PPUSH
23466: LD_INT 1
23468: PPUSH
23469: LD_VAR 0 2
23473: PUSH
23474: LD_INT 1
23476: ARRAY
23477: PPUSH
23478: LD_INT 1
23480: PPUSH
23481: CALL_OW 3
23485: PPUSH
23486: CALL_OW 1
23490: ST_TO_ADDR
// tmp := 1 ;
23491: LD_ADDR_VAR 0 3
23495: PUSH
23496: LD_STRING 1
23498: ST_TO_ADDR
// end ; normal := normal & tmp ;
23499: LD_ADDR_VAR 0 5
23503: PUSH
23504: LD_VAR 0 5
23508: PUSH
23509: LD_VAR 0 3
23513: STR
23514: ST_TO_ADDR
// end ;
23515: GO 23415
23517: POP
23518: POP
// for i = 1 to hardcoreCounter do
23519: LD_ADDR_VAR 0 8
23523: PUSH
23524: DOUBLE
23525: LD_INT 1
23527: DEC
23528: ST_TO_ADDR
23529: LD_EXP 56
23533: PUSH
23534: FOR_TO
23535: IFFALSE 23640
// begin tmp := 0 ;
23537: LD_ADDR_VAR 0 3
23541: PUSH
23542: LD_STRING 0
23544: ST_TO_ADDR
// if result [ 2 ] then
23545: LD_VAR 0 2
23549: PUSH
23550: LD_INT 2
23552: ARRAY
23553: IFFALSE 23622
// if result [ 2 ] [ 1 ] = 100 + i then
23555: LD_VAR 0 2
23559: PUSH
23560: LD_INT 2
23562: ARRAY
23563: PUSH
23564: LD_INT 1
23566: ARRAY
23567: PUSH
23568: LD_INT 100
23570: PUSH
23571: LD_VAR 0 8
23575: PLUS
23576: EQUAL
23577: IFFALSE 23622
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23579: LD_ADDR_VAR 0 2
23583: PUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: LD_INT 2
23591: PPUSH
23592: LD_VAR 0 2
23596: PUSH
23597: LD_INT 2
23599: ARRAY
23600: PPUSH
23601: LD_INT 1
23603: PPUSH
23604: CALL_OW 3
23608: PPUSH
23609: CALL_OW 1
23613: ST_TO_ADDR
// tmp := 1 ;
23614: LD_ADDR_VAR 0 3
23618: PUSH
23619: LD_STRING 1
23621: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23622: LD_ADDR_VAR 0 6
23626: PUSH
23627: LD_VAR 0 6
23631: PUSH
23632: LD_VAR 0 3
23636: STR
23637: ST_TO_ADDR
// end ;
23638: GO 23534
23640: POP
23641: POP
// if isGameLoad then
23642: LD_VAR 0 1
23646: IFFALSE 24121
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23648: LD_ADDR_VAR 0 4
23652: PUSH
23653: LD_EXP 59
23657: PUSH
23658: LD_EXP 58
23662: PUSH
23663: LD_EXP 60
23667: PUSH
23668: LD_EXP 57
23672: PUSH
23673: LD_EXP 61
23677: PUSH
23678: LD_EXP 62
23682: PUSH
23683: LD_EXP 63
23687: PUSH
23688: LD_EXP 64
23692: PUSH
23693: LD_EXP 65
23697: PUSH
23698: LD_EXP 66
23702: PUSH
23703: LD_EXP 67
23707: PUSH
23708: LD_EXP 68
23712: PUSH
23713: LD_EXP 69
23717: PUSH
23718: LD_EXP 70
23722: PUSH
23723: LD_EXP 78
23727: PUSH
23728: LD_EXP 79
23732: PUSH
23733: LD_EXP 80
23737: PUSH
23738: LD_EXP 81
23742: PUSH
23743: LD_EXP 83
23747: PUSH
23748: LD_EXP 84
23752: PUSH
23753: LD_EXP 85
23757: PUSH
23758: LD_EXP 88
23762: PUSH
23763: LD_EXP 90
23767: PUSH
23768: LD_EXP 91
23772: PUSH
23773: LD_EXP 92
23777: PUSH
23778: LD_EXP 94
23782: PUSH
23783: LD_EXP 95
23787: PUSH
23788: LD_EXP 98
23792: PUSH
23793: LD_EXP 99
23797: PUSH
23798: LD_EXP 100
23802: PUSH
23803: LD_EXP 101
23807: PUSH
23808: LD_EXP 102
23812: PUSH
23813: LD_EXP 103
23817: PUSH
23818: LD_EXP 104
23822: PUSH
23823: LD_EXP 105
23827: PUSH
23828: LD_EXP 106
23832: PUSH
23833: LD_EXP 71
23837: PUSH
23838: LD_EXP 72
23842: PUSH
23843: LD_EXP 75
23847: PUSH
23848: LD_EXP 76
23852: PUSH
23853: LD_EXP 77
23857: PUSH
23858: LD_EXP 73
23862: PUSH
23863: LD_EXP 74
23867: PUSH
23868: LD_EXP 82
23872: PUSH
23873: LD_EXP 86
23877: PUSH
23878: LD_EXP 87
23882: PUSH
23883: LD_EXP 89
23887: PUSH
23888: LD_EXP 93
23892: PUSH
23893: LD_EXP 96
23897: PUSH
23898: LD_EXP 97
23902: PUSH
23903: LD_EXP 107
23907: PUSH
23908: LD_EXP 108
23912: PUSH
23913: LD_EXP 109
23917: PUSH
23918: LD_EXP 110
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: ST_TO_ADDR
// tmp :=  ;
23979: LD_ADDR_VAR 0 3
23983: PUSH
23984: LD_STRING 
23986: ST_TO_ADDR
// for i = 1 to normalCounter do
23987: LD_ADDR_VAR 0 8
23991: PUSH
23992: DOUBLE
23993: LD_INT 1
23995: DEC
23996: ST_TO_ADDR
23997: LD_EXP 55
24001: PUSH
24002: FOR_TO
24003: IFFALSE 24039
// begin if flags [ i ] then
24005: LD_VAR 0 4
24009: PUSH
24010: LD_VAR 0 8
24014: ARRAY
24015: IFFALSE 24037
// tmp := tmp & i & ; ;
24017: LD_ADDR_VAR 0 3
24021: PUSH
24022: LD_VAR 0 3
24026: PUSH
24027: LD_VAR 0 8
24031: STR
24032: PUSH
24033: LD_STRING ;
24035: STR
24036: ST_TO_ADDR
// end ;
24037: GO 24002
24039: POP
24040: POP
// for i = 1 to hardcoreCounter do
24041: LD_ADDR_VAR 0 8
24045: PUSH
24046: DOUBLE
24047: LD_INT 1
24049: DEC
24050: ST_TO_ADDR
24051: LD_EXP 56
24055: PUSH
24056: FOR_TO
24057: IFFALSE 24103
// begin if flags [ normalCounter + i ] then
24059: LD_VAR 0 4
24063: PUSH
24064: LD_EXP 55
24068: PUSH
24069: LD_VAR 0 8
24073: PLUS
24074: ARRAY
24075: IFFALSE 24101
// tmp := tmp & ( 100 + i ) & ; ;
24077: LD_ADDR_VAR 0 3
24081: PUSH
24082: LD_VAR 0 3
24086: PUSH
24087: LD_INT 100
24089: PUSH
24090: LD_VAR 0 8
24094: PLUS
24095: STR
24096: PUSH
24097: LD_STRING ;
24099: STR
24100: ST_TO_ADDR
// end ;
24101: GO 24056
24103: POP
24104: POP
// if tmp then
24105: LD_VAR 0 3
24109: IFFALSE 24121
// active := tmp ;
24111: LD_ADDR_VAR 0 7
24115: PUSH
24116: LD_VAR 0 3
24120: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24121: LD_STRING getStreamItemsFromMission("
24123: PUSH
24124: LD_VAR 0 5
24128: STR
24129: PUSH
24130: LD_STRING ","
24132: STR
24133: PUSH
24134: LD_VAR 0 6
24138: STR
24139: PUSH
24140: LD_STRING ","
24142: STR
24143: PUSH
24144: LD_VAR 0 7
24148: STR
24149: PUSH
24150: LD_STRING ")
24152: STR
24153: PPUSH
24154: CALL_OW 559
// end else
24158: GO 24167
// ToLua ( getStreamItemsFromMission("","","") ) ;
24160: LD_STRING getStreamItemsFromMission("","","")
24162: PPUSH
24163: CALL_OW 559
// end ;
24167: LD_VAR 0 2
24171: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24172: LD_EXP 54
24176: IFFALSE 24184
24178: PUSH
24179: LD_EXP 59
24183: AND
24184: IFFALSE 24308
24186: GO 24188
24188: DISABLE
24189: LD_INT 0
24191: PPUSH
24192: PPUSH
// begin enable ;
24193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24194: LD_ADDR_VAR 0 2
24198: PUSH
24199: LD_INT 22
24201: PUSH
24202: LD_OWVAR 2
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 34
24216: PUSH
24217: LD_INT 7
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 34
24226: PUSH
24227: LD_INT 45
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 34
24236: PUSH
24237: LD_INT 28
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 34
24246: PUSH
24247: LD_INT 47
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 69
24269: ST_TO_ADDR
// if not tmp then
24270: LD_VAR 0 2
24274: NOT
24275: IFFALSE 24279
// exit ;
24277: GO 24308
// for i in tmp do
24279: LD_ADDR_VAR 0 1
24283: PUSH
24284: LD_VAR 0 2
24288: PUSH
24289: FOR_IN
24290: IFFALSE 24306
// begin SetLives ( i , 0 ) ;
24292: LD_VAR 0 1
24296: PPUSH
24297: LD_INT 0
24299: PPUSH
24300: CALL_OW 234
// end ;
24304: GO 24289
24306: POP
24307: POP
// end ;
24308: PPOPN 2
24310: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24311: LD_EXP 54
24315: IFFALSE 24323
24317: PUSH
24318: LD_EXP 60
24322: AND
24323: IFFALSE 24407
24325: GO 24327
24327: DISABLE
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
// begin enable ;
24332: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_INT 22
24340: PUSH
24341: LD_OWVAR 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 32
24352: PUSH
24353: LD_INT 3
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PPUSH
24364: CALL_OW 69
24368: ST_TO_ADDR
// if not tmp then
24369: LD_VAR 0 2
24373: NOT
24374: IFFALSE 24378
// exit ;
24376: GO 24407
// for i in tmp do
24378: LD_ADDR_VAR 0 1
24382: PUSH
24383: LD_VAR 0 2
24387: PUSH
24388: FOR_IN
24389: IFFALSE 24405
// begin SetLives ( i , 0 ) ;
24391: LD_VAR 0 1
24395: PPUSH
24396: LD_INT 0
24398: PPUSH
24399: CALL_OW 234
// end ;
24403: GO 24388
24405: POP
24406: POP
// end ;
24407: PPOPN 2
24409: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24410: LD_EXP 54
24414: IFFALSE 24422
24416: PUSH
24417: LD_EXP 57
24421: AND
24422: IFFALSE 24515
24424: GO 24426
24426: DISABLE
24427: LD_INT 0
24429: PPUSH
// begin enable ;
24430: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24431: LD_ADDR_VAR 0 1
24435: PUSH
24436: LD_INT 22
24438: PUSH
24439: LD_OWVAR 2
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: LD_INT 25
24453: PUSH
24454: LD_INT 5
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 25
24463: PUSH
24464: LD_INT 9
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 25
24473: PUSH
24474: LD_INT 8
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PPUSH
24491: CALL_OW 69
24495: PUSH
24496: FOR_IN
24497: IFFALSE 24513
// begin SetClass ( i , 1 ) ;
24499: LD_VAR 0 1
24503: PPUSH
24504: LD_INT 1
24506: PPUSH
24507: CALL_OW 336
// end ;
24511: GO 24496
24513: POP
24514: POP
// end ;
24515: PPOPN 1
24517: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24518: LD_EXP 54
24522: IFFALSE 24530
24524: PUSH
24525: LD_EXP 58
24529: AND
24530: IFFALSE 24542
24532: PUSH
24533: LD_OWVAR 65
24537: PUSH
24538: LD_INT 7
24540: LESS
24541: AND
24542: IFFALSE 24556
24544: GO 24546
24546: DISABLE
// begin enable ;
24547: ENABLE
// game_speed := 7 ;
24548: LD_ADDR_OWVAR 65
24552: PUSH
24553: LD_INT 7
24555: ST_TO_ADDR
// end ;
24556: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24557: LD_EXP 54
24561: IFFALSE 24569
24563: PUSH
24564: LD_EXP 61
24568: AND
24569: IFFALSE 24771
24571: GO 24573
24573: DISABLE
24574: LD_INT 0
24576: PPUSH
24577: PPUSH
24578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: LD_INT 81
24586: PUSH
24587: LD_OWVAR 2
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 21
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PPUSH
24610: CALL_OW 69
24614: ST_TO_ADDR
// if not tmp then
24615: LD_VAR 0 3
24619: NOT
24620: IFFALSE 24624
// exit ;
24622: GO 24771
// if tmp > 5 then
24624: LD_VAR 0 3
24628: PUSH
24629: LD_INT 5
24631: GREATER
24632: IFFALSE 24644
// k := 5 else
24634: LD_ADDR_VAR 0 2
24638: PUSH
24639: LD_INT 5
24641: ST_TO_ADDR
24642: GO 24654
// k := tmp ;
24644: LD_ADDR_VAR 0 2
24648: PUSH
24649: LD_VAR 0 3
24653: ST_TO_ADDR
// for i := 1 to k do
24654: LD_ADDR_VAR 0 1
24658: PUSH
24659: DOUBLE
24660: LD_INT 1
24662: DEC
24663: ST_TO_ADDR
24664: LD_VAR 0 2
24668: PUSH
24669: FOR_TO
24670: IFFALSE 24769
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24672: LD_VAR 0 3
24676: PUSH
24677: LD_VAR 0 1
24681: ARRAY
24682: PPUSH
24683: LD_VAR 0 1
24687: PUSH
24688: LD_INT 4
24690: MOD
24691: PUSH
24692: LD_INT 1
24694: PLUS
24695: PPUSH
24696: CALL_OW 259
24700: PUSH
24701: LD_INT 10
24703: LESS
24704: IFFALSE 24767
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24706: LD_VAR 0 3
24710: PUSH
24711: LD_VAR 0 1
24715: ARRAY
24716: PPUSH
24717: LD_VAR 0 1
24721: PUSH
24722: LD_INT 4
24724: MOD
24725: PUSH
24726: LD_INT 1
24728: PLUS
24729: PPUSH
24730: LD_VAR 0 3
24734: PUSH
24735: LD_VAR 0 1
24739: ARRAY
24740: PPUSH
24741: LD_VAR 0 1
24745: PUSH
24746: LD_INT 4
24748: MOD
24749: PUSH
24750: LD_INT 1
24752: PLUS
24753: PPUSH
24754: CALL_OW 259
24758: PUSH
24759: LD_INT 1
24761: PLUS
24762: PPUSH
24763: CALL_OW 237
24767: GO 24669
24769: POP
24770: POP
// end ;
24771: PPOPN 3
24773: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24774: LD_EXP 54
24778: IFFALSE 24786
24780: PUSH
24781: LD_EXP 62
24785: AND
24786: IFFALSE 24806
24788: GO 24790
24790: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24791: LD_INT 4
24793: PPUSH
24794: LD_OWVAR 2
24798: PPUSH
24799: LD_INT 0
24801: PPUSH
24802: CALL_OW 324
24806: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24807: LD_EXP 54
24811: IFFALSE 24819
24813: PUSH
24814: LD_EXP 91
24818: AND
24819: IFFALSE 24839
24821: GO 24823
24823: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24824: LD_INT 19
24826: PPUSH
24827: LD_OWVAR 2
24831: PPUSH
24832: LD_INT 0
24834: PPUSH
24835: CALL_OW 324
24839: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24840: LD_EXP 54
24844: IFFALSE 24852
24846: PUSH
24847: LD_EXP 63
24851: AND
24852: IFFALSE 24954
24854: GO 24856
24856: DISABLE
24857: LD_INT 0
24859: PPUSH
24860: PPUSH
// begin enable ;
24861: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24862: LD_ADDR_VAR 0 2
24866: PUSH
24867: LD_INT 22
24869: PUSH
24870: LD_OWVAR 2
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: LD_INT 34
24884: PUSH
24885: LD_INT 11
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 34
24894: PUSH
24895: LD_INT 30
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PPUSH
24911: CALL_OW 69
24915: ST_TO_ADDR
// if not tmp then
24916: LD_VAR 0 2
24920: NOT
24921: IFFALSE 24925
// exit ;
24923: GO 24954
// for i in tmp do
24925: LD_ADDR_VAR 0 1
24929: PUSH
24930: LD_VAR 0 2
24934: PUSH
24935: FOR_IN
24936: IFFALSE 24952
// begin SetLives ( i , 0 ) ;
24938: LD_VAR 0 1
24942: PPUSH
24943: LD_INT 0
24945: PPUSH
24946: CALL_OW 234
// end ;
24950: GO 24935
24952: POP
24953: POP
// end ;
24954: PPOPN 2
24956: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24957: LD_EXP 54
24961: IFFALSE 24969
24963: PUSH
24964: LD_EXP 64
24968: AND
24969: IFFALSE 24989
24971: GO 24973
24973: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24974: LD_INT 32
24976: PPUSH
24977: LD_OWVAR 2
24981: PPUSH
24982: LD_INT 0
24984: PPUSH
24985: CALL_OW 324
24989: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24990: LD_EXP 54
24994: IFFALSE 25002
24996: PUSH
24997: LD_EXP 65
25001: AND
25002: IFFALSE 25185
25004: GO 25006
25006: DISABLE
25007: LD_INT 0
25009: PPUSH
25010: PPUSH
25011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25012: LD_ADDR_VAR 0 2
25016: PUSH
25017: LD_INT 22
25019: PUSH
25020: LD_OWVAR 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 33
25031: PUSH
25032: LD_INT 3
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PPUSH
25043: CALL_OW 69
25047: ST_TO_ADDR
// if not tmp then
25048: LD_VAR 0 2
25052: NOT
25053: IFFALSE 25057
// exit ;
25055: GO 25185
// side := 0 ;
25057: LD_ADDR_VAR 0 3
25061: PUSH
25062: LD_INT 0
25064: ST_TO_ADDR
// for i := 1 to 8 do
25065: LD_ADDR_VAR 0 1
25069: PUSH
25070: DOUBLE
25071: LD_INT 1
25073: DEC
25074: ST_TO_ADDR
25075: LD_INT 8
25077: PUSH
25078: FOR_TO
25079: IFFALSE 25129
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25081: LD_OWVAR 2
25085: PUSH
25086: LD_VAR 0 1
25090: NONEQUAL
25091: IFFALSE 25113
25093: PUSH
25094: LD_OWVAR 2
25098: PPUSH
25099: LD_VAR 0 1
25103: PPUSH
25104: CALL_OW 81
25108: PUSH
25109: LD_INT 2
25111: EQUAL
25112: AND
25113: IFFALSE 25127
// begin side := i ;
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_VAR 0 1
25124: ST_TO_ADDR
// break ;
25125: GO 25129
// end ;
25127: GO 25078
25129: POP
25130: POP
// if not side then
25131: LD_VAR 0 3
25135: NOT
25136: IFFALSE 25140
// exit ;
25138: GO 25185
// for i := 1 to tmp do
25140: LD_ADDR_VAR 0 1
25144: PUSH
25145: DOUBLE
25146: LD_INT 1
25148: DEC
25149: ST_TO_ADDR
25150: LD_VAR 0 2
25154: PUSH
25155: FOR_TO
25156: IFFALSE 25183
// if Prob ( 60 ) then
25158: LD_INT 60
25160: PPUSH
25161: CALL_OW 13
25165: IFFALSE 25181
// SetSide ( i , side ) ;
25167: LD_VAR 0 1
25171: PPUSH
25172: LD_VAR 0 3
25176: PPUSH
25177: CALL_OW 235
25181: GO 25155
25183: POP
25184: POP
// end ;
25185: PPOPN 3
25187: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25188: LD_EXP 54
25192: IFFALSE 25200
25194: PUSH
25195: LD_EXP 67
25199: AND
25200: IFFALSE 25319
25202: GO 25204
25204: DISABLE
25205: LD_INT 0
25207: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25208: LD_ADDR_VAR 0 1
25212: PUSH
25213: LD_INT 22
25215: PUSH
25216: LD_OWVAR 2
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 21
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 3
25237: PUSH
25238: LD_INT 23
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: PPUSH
25257: CALL_OW 69
25261: PUSH
25262: FOR_IN
25263: IFFALSE 25317
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 257
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: LD_INT 3
25283: PUSH
25284: LD_INT 4
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: IN
25293: IFFALSE 25315
// SetClass ( un , rand ( 1 , 4 ) ) ;
25295: LD_VAR 0 1
25299: PPUSH
25300: LD_INT 1
25302: PPUSH
25303: LD_INT 4
25305: PPUSH
25306: CALL_OW 12
25310: PPUSH
25311: CALL_OW 336
25315: GO 25262
25317: POP
25318: POP
// end ;
25319: PPOPN 1
25321: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25322: LD_EXP 54
25326: IFFALSE 25334
25328: PUSH
25329: LD_EXP 66
25333: AND
25334: IFFALSE 25413
25336: GO 25338
25338: DISABLE
25339: LD_INT 0
25341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25342: LD_ADDR_VAR 0 1
25346: PUSH
25347: LD_INT 22
25349: PUSH
25350: LD_OWVAR 2
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 21
25361: PUSH
25362: LD_INT 3
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PPUSH
25373: CALL_OW 69
25377: ST_TO_ADDR
// if not tmp then
25378: LD_VAR 0 1
25382: NOT
25383: IFFALSE 25387
// exit ;
25385: GO 25413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25387: LD_VAR 0 1
25391: PUSH
25392: LD_INT 1
25394: PPUSH
25395: LD_VAR 0 1
25399: PPUSH
25400: CALL_OW 12
25404: ARRAY
25405: PPUSH
25406: LD_INT 100
25408: PPUSH
25409: CALL_OW 234
// end ;
25413: PPOPN 1
25415: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25416: LD_EXP 54
25420: IFFALSE 25428
25422: PUSH
25423: LD_EXP 68
25427: AND
25428: IFFALSE 25526
25430: GO 25432
25432: DISABLE
25433: LD_INT 0
25435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25436: LD_ADDR_VAR 0 1
25440: PUSH
25441: LD_INT 22
25443: PUSH
25444: LD_OWVAR 2
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 21
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PPUSH
25467: CALL_OW 69
25471: ST_TO_ADDR
// if not tmp then
25472: LD_VAR 0 1
25476: NOT
25477: IFFALSE 25481
// exit ;
25479: GO 25526
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25481: LD_VAR 0 1
25485: PUSH
25486: LD_INT 1
25488: PPUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: CALL_OW 12
25498: ARRAY
25499: PPUSH
25500: LD_INT 1
25502: PPUSH
25503: LD_INT 4
25505: PPUSH
25506: CALL_OW 12
25510: PPUSH
25511: LD_INT 3000
25513: PPUSH
25514: LD_INT 9000
25516: PPUSH
25517: CALL_OW 12
25521: PPUSH
25522: CALL_OW 492
// end ;
25526: PPOPN 1
25528: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25529: LD_EXP 54
25533: IFFALSE 25541
25535: PUSH
25536: LD_EXP 69
25540: AND
25541: IFFALSE 25561
25543: GO 25545
25545: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25546: LD_INT 1
25548: PPUSH
25549: LD_OWVAR 2
25553: PPUSH
25554: LD_INT 0
25556: PPUSH
25557: CALL_OW 324
25561: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25562: LD_EXP 54
25566: IFFALSE 25574
25568: PUSH
25569: LD_EXP 70
25573: AND
25574: IFFALSE 25657
25576: GO 25578
25578: DISABLE
25579: LD_INT 0
25581: PPUSH
25582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25583: LD_ADDR_VAR 0 2
25587: PUSH
25588: LD_INT 22
25590: PUSH
25591: LD_OWVAR 2
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 21
25602: PUSH
25603: LD_INT 3
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PPUSH
25614: CALL_OW 69
25618: ST_TO_ADDR
// if not tmp then
25619: LD_VAR 0 2
25623: NOT
25624: IFFALSE 25628
// exit ;
25626: GO 25657
// for i in tmp do
25628: LD_ADDR_VAR 0 1
25632: PUSH
25633: LD_VAR 0 2
25637: PUSH
25638: FOR_IN
25639: IFFALSE 25655
// SetBLevel ( i , 10 ) ;
25641: LD_VAR 0 1
25645: PPUSH
25646: LD_INT 10
25648: PPUSH
25649: CALL_OW 241
25653: GO 25638
25655: POP
25656: POP
// end ;
25657: PPOPN 2
25659: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25660: LD_EXP 54
25664: IFFALSE 25672
25666: PUSH
25667: LD_EXP 71
25671: AND
25672: IFFALSE 25783
25674: GO 25676
25676: DISABLE
25677: LD_INT 0
25679: PPUSH
25680: PPUSH
25681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: LD_INT 22
25689: PUSH
25690: LD_OWVAR 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 25
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PPUSH
25713: CALL_OW 69
25717: ST_TO_ADDR
// if not tmp then
25718: LD_VAR 0 3
25722: NOT
25723: IFFALSE 25727
// exit ;
25725: GO 25783
// un := tmp [ rand ( 1 , tmp ) ] ;
25727: LD_ADDR_VAR 0 2
25731: PUSH
25732: LD_VAR 0 3
25736: PUSH
25737: LD_INT 1
25739: PPUSH
25740: LD_VAR 0 3
25744: PPUSH
25745: CALL_OW 12
25749: ARRAY
25750: ST_TO_ADDR
// if Crawls ( un ) then
25751: LD_VAR 0 2
25755: PPUSH
25756: CALL_OW 318
25760: IFFALSE 25771
// ComWalk ( un ) ;
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25771: LD_VAR 0 2
25775: PPUSH
25776: LD_INT 5
25778: PPUSH
25779: CALL_OW 336
// end ;
25783: PPOPN 3
25785: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25786: LD_EXP 54
25790: IFFALSE 25798
25792: PUSH
25793: LD_EXP 72
25797: AND
25798: IFFALSE 25810
25800: PUSH
25801: LD_OWVAR 67
25805: PUSH
25806: LD_INT 4
25808: LESS
25809: AND
25810: IFFALSE 25829
25812: GO 25814
25814: DISABLE
// begin Difficulty := Difficulty + 1 ;
25815: LD_ADDR_OWVAR 67
25819: PUSH
25820: LD_OWVAR 67
25824: PUSH
25825: LD_INT 1
25827: PLUS
25828: ST_TO_ADDR
// end ;
25829: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25830: LD_EXP 54
25834: IFFALSE 25842
25836: PUSH
25837: LD_EXP 73
25841: AND
25842: IFFALSE 25945
25844: GO 25846
25846: DISABLE
25847: LD_INT 0
25849: PPUSH
// begin for i := 1 to 5 do
25850: LD_ADDR_VAR 0 1
25854: PUSH
25855: DOUBLE
25856: LD_INT 1
25858: DEC
25859: ST_TO_ADDR
25860: LD_INT 5
25862: PUSH
25863: FOR_TO
25864: IFFALSE 25943
// begin uc_nation := nation_nature ;
25866: LD_ADDR_OWVAR 21
25870: PUSH
25871: LD_INT 0
25873: ST_TO_ADDR
// uc_side := 0 ;
25874: LD_ADDR_OWVAR 20
25878: PUSH
25879: LD_INT 0
25881: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25882: LD_ADDR_OWVAR 29
25886: PUSH
25887: LD_INT 12
25889: PUSH
25890: LD_INT 12
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: ST_TO_ADDR
// hc_agressivity := 20 ;
25897: LD_ADDR_OWVAR 35
25901: PUSH
25902: LD_INT 20
25904: ST_TO_ADDR
// hc_class := class_tiger ;
25905: LD_ADDR_OWVAR 28
25909: PUSH
25910: LD_INT 14
25912: ST_TO_ADDR
// hc_gallery :=  ;
25913: LD_ADDR_OWVAR 33
25917: PUSH
25918: LD_STRING 
25920: ST_TO_ADDR
// hc_name :=  ;
25921: LD_ADDR_OWVAR 26
25925: PUSH
25926: LD_STRING 
25928: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25929: CALL_OW 44
25933: PPUSH
25934: LD_INT 0
25936: PPUSH
25937: CALL_OW 51
// end ;
25941: GO 25863
25943: POP
25944: POP
// end ;
25945: PPOPN 1
25947: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25948: LD_EXP 54
25952: IFFALSE 25960
25954: PUSH
25955: LD_EXP 74
25959: AND
25960: IFFALSE 25969
25962: GO 25964
25964: DISABLE
// StreamSibBomb ;
25965: CALL 25970 0 0
25969: END
// export function StreamSibBomb ; var i , x , y ; begin
25970: LD_INT 0
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
// result := false ;
25976: LD_ADDR_VAR 0 1
25980: PUSH
25981: LD_INT 0
25983: ST_TO_ADDR
// for i := 1 to 16 do
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: DOUBLE
25990: LD_INT 1
25992: DEC
25993: ST_TO_ADDR
25994: LD_INT 16
25996: PUSH
25997: FOR_TO
25998: IFFALSE 26197
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26000: LD_ADDR_VAR 0 3
26004: PUSH
26005: LD_INT 10
26007: PUSH
26008: LD_INT 20
26010: PUSH
26011: LD_INT 30
26013: PUSH
26014: LD_INT 40
26016: PUSH
26017: LD_INT 50
26019: PUSH
26020: LD_INT 60
26022: PUSH
26023: LD_INT 70
26025: PUSH
26026: LD_INT 80
26028: PUSH
26029: LD_INT 90
26031: PUSH
26032: LD_INT 100
26034: PUSH
26035: LD_INT 110
26037: PUSH
26038: LD_INT 120
26040: PUSH
26041: LD_INT 130
26043: PUSH
26044: LD_INT 140
26046: PUSH
26047: LD_INT 150
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 1
26069: PPUSH
26070: LD_INT 15
26072: PPUSH
26073: CALL_OW 12
26077: ARRAY
26078: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26079: LD_ADDR_VAR 0 4
26083: PUSH
26084: LD_INT 10
26086: PUSH
26087: LD_INT 20
26089: PUSH
26090: LD_INT 30
26092: PUSH
26093: LD_INT 40
26095: PUSH
26096: LD_INT 50
26098: PUSH
26099: LD_INT 60
26101: PUSH
26102: LD_INT 70
26104: PUSH
26105: LD_INT 80
26107: PUSH
26108: LD_INT 90
26110: PUSH
26111: LD_INT 100
26113: PUSH
26114: LD_INT 110
26116: PUSH
26117: LD_INT 120
26119: PUSH
26120: LD_INT 130
26122: PUSH
26123: LD_INT 140
26125: PUSH
26126: LD_INT 150
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PPUSH
26149: LD_INT 15
26151: PPUSH
26152: CALL_OW 12
26156: ARRAY
26157: ST_TO_ADDR
// if ValidHex ( x , y ) then
26158: LD_VAR 0 3
26162: PPUSH
26163: LD_VAR 0 4
26167: PPUSH
26168: CALL_OW 488
26172: IFFALSE 26195
// begin result := [ x , y ] ;
26174: LD_ADDR_VAR 0 1
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: LD_VAR 0 4
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: ST_TO_ADDR
// break ;
26193: GO 26197
// end ; end ;
26195: GO 25997
26197: POP
26198: POP
// if result then
26199: LD_VAR 0 1
26203: IFFALSE 26263
// begin ToLua ( playSibBomb() ) ;
26205: LD_STRING playSibBomb()
26207: PPUSH
26208: CALL_OW 559
// wait ( 0 0$14 ) ;
26212: LD_INT 490
26214: PPUSH
26215: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26219: LD_VAR 0 1
26223: PUSH
26224: LD_INT 1
26226: ARRAY
26227: PPUSH
26228: LD_VAR 0 1
26232: PUSH
26233: LD_INT 2
26235: ARRAY
26236: PPUSH
26237: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26241: LD_VAR 0 1
26245: PUSH
26246: LD_INT 1
26248: ARRAY
26249: PPUSH
26250: LD_VAR 0 1
26254: PUSH
26255: LD_INT 2
26257: ARRAY
26258: PPUSH
26259: CALL_OW 429
// end ; end ;
26263: LD_VAR 0 1
26267: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26268: LD_EXP 54
26272: IFFALSE 26280
26274: PUSH
26275: LD_EXP 76
26279: AND
26280: IFFALSE 26292
26282: GO 26284
26284: DISABLE
// YouLost (  ) ;
26285: LD_STRING 
26287: PPUSH
26288: CALL_OW 104
26292: END
// every 0 0$1 trigger StreamModeActive and sFog do
26293: LD_EXP 54
26297: IFFALSE 26305
26299: PUSH
26300: LD_EXP 75
26304: AND
26305: IFFALSE 26319
26307: GO 26309
26309: DISABLE
// FogOff ( your_side ) ;
26310: LD_OWVAR 2
26314: PPUSH
26315: CALL_OW 344
26319: END
// every 0 0$1 trigger StreamModeActive and sSun do
26320: LD_EXP 54
26324: IFFALSE 26332
26326: PUSH
26327: LD_EXP 77
26331: AND
26332: IFFALSE 26360
26334: GO 26336
26336: DISABLE
// begin solar_recharge_percent := 0 ;
26337: LD_ADDR_OWVAR 79
26341: PUSH
26342: LD_INT 0
26344: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26345: LD_INT 10500
26347: PPUSH
26348: CALL_OW 67
// solar_recharge_percent := 100 ;
26352: LD_ADDR_OWVAR 79
26356: PUSH
26357: LD_INT 100
26359: ST_TO_ADDR
// end ;
26360: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26361: LD_EXP 54
26365: IFFALSE 26373
26367: PUSH
26368: LD_EXP 78
26372: AND
26373: IFFALSE 26612
26375: GO 26377
26377: DISABLE
26378: LD_INT 0
26380: PPUSH
26381: PPUSH
26382: PPUSH
// begin tmp := [ ] ;
26383: LD_ADDR_VAR 0 3
26387: PUSH
26388: EMPTY
26389: ST_TO_ADDR
// for i := 1 to 6 do
26390: LD_ADDR_VAR 0 1
26394: PUSH
26395: DOUBLE
26396: LD_INT 1
26398: DEC
26399: ST_TO_ADDR
26400: LD_INT 6
26402: PUSH
26403: FOR_TO
26404: IFFALSE 26509
// begin uc_nation := nation_nature ;
26406: LD_ADDR_OWVAR 21
26410: PUSH
26411: LD_INT 0
26413: ST_TO_ADDR
// uc_side := 0 ;
26414: LD_ADDR_OWVAR 20
26418: PUSH
26419: LD_INT 0
26421: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26422: LD_ADDR_OWVAR 29
26426: PUSH
26427: LD_INT 12
26429: PUSH
26430: LD_INT 12
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: ST_TO_ADDR
// hc_agressivity := 20 ;
26437: LD_ADDR_OWVAR 35
26441: PUSH
26442: LD_INT 20
26444: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26445: LD_ADDR_OWVAR 28
26449: PUSH
26450: LD_INT 17
26452: ST_TO_ADDR
// hc_gallery :=  ;
26453: LD_ADDR_OWVAR 33
26457: PUSH
26458: LD_STRING 
26460: ST_TO_ADDR
// hc_name :=  ;
26461: LD_ADDR_OWVAR 26
26465: PUSH
26466: LD_STRING 
26468: ST_TO_ADDR
// un := CreateHuman ;
26469: LD_ADDR_VAR 0 2
26473: PUSH
26474: CALL_OW 44
26478: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26479: LD_VAR 0 2
26483: PPUSH
26484: LD_INT 1
26486: PPUSH
26487: CALL_OW 51
// tmp := tmp ^ un ;
26491: LD_ADDR_VAR 0 3
26495: PUSH
26496: LD_VAR 0 3
26500: PUSH
26501: LD_VAR 0 2
26505: ADD
26506: ST_TO_ADDR
// end ;
26507: GO 26403
26509: POP
26510: POP
// repeat wait ( 0 0$1 ) ;
26511: LD_INT 35
26513: PPUSH
26514: CALL_OW 67
// for un in tmp do
26518: LD_ADDR_VAR 0 2
26522: PUSH
26523: LD_VAR 0 3
26527: PUSH
26528: FOR_IN
26529: IFFALSE 26603
// begin if IsDead ( un ) then
26531: LD_VAR 0 2
26535: PPUSH
26536: CALL_OW 301
26540: IFFALSE 26560
// begin tmp := tmp diff un ;
26542: LD_ADDR_VAR 0 3
26546: PUSH
26547: LD_VAR 0 3
26551: PUSH
26552: LD_VAR 0 2
26556: DIFF
26557: ST_TO_ADDR
// continue ;
26558: GO 26528
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26560: LD_VAR 0 2
26564: PPUSH
26565: LD_INT 3
26567: PUSH
26568: LD_INT 22
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PPUSH
26582: CALL_OW 69
26586: PPUSH
26587: LD_VAR 0 2
26591: PPUSH
26592: CALL_OW 74
26596: PPUSH
26597: CALL_OW 115
// end ;
26601: GO 26528
26603: POP
26604: POP
// until not tmp ;
26605: LD_VAR 0 3
26609: NOT
26610: IFFALSE 26511
// end ;
26612: PPOPN 3
26614: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26615: LD_EXP 54
26619: IFFALSE 26627
26621: PUSH
26622: LD_EXP 79
26626: AND
26627: IFFALSE 26681
26629: GO 26631
26631: DISABLE
// begin ToLua ( displayTroll(); ) ;
26632: LD_STRING displayTroll();
26634: PPUSH
26635: CALL_OW 559
// wait ( 3 3$00 ) ;
26639: LD_INT 6300
26641: PPUSH
26642: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26646: LD_STRING hideTroll();
26648: PPUSH
26649: CALL_OW 559
// wait ( 1 1$00 ) ;
26653: LD_INT 2100
26655: PPUSH
26656: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26660: LD_STRING displayTroll();
26662: PPUSH
26663: CALL_OW 559
// wait ( 1 1$00 ) ;
26667: LD_INT 2100
26669: PPUSH
26670: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26674: LD_STRING hideTroll();
26676: PPUSH
26677: CALL_OW 559
// end ;
26681: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26682: LD_EXP 54
26686: IFFALSE 26694
26688: PUSH
26689: LD_EXP 80
26693: AND
26694: IFFALSE 26757
26696: GO 26698
26698: DISABLE
26699: LD_INT 0
26701: PPUSH
// begin p := 0 ;
26702: LD_ADDR_VAR 0 1
26706: PUSH
26707: LD_INT 0
26709: ST_TO_ADDR
// repeat game_speed := 1 ;
26710: LD_ADDR_OWVAR 65
26714: PUSH
26715: LD_INT 1
26717: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26718: LD_INT 35
26720: PPUSH
26721: CALL_OW 67
// p := p + 1 ;
26725: LD_ADDR_VAR 0 1
26729: PUSH
26730: LD_VAR 0 1
26734: PUSH
26735: LD_INT 1
26737: PLUS
26738: ST_TO_ADDR
// until p >= 60 ;
26739: LD_VAR 0 1
26743: PUSH
26744: LD_INT 60
26746: GREATEREQUAL
26747: IFFALSE 26710
// game_speed := 4 ;
26749: LD_ADDR_OWVAR 65
26753: PUSH
26754: LD_INT 4
26756: ST_TO_ADDR
// end ;
26757: PPOPN 1
26759: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26760: LD_EXP 54
26764: IFFALSE 26772
26766: PUSH
26767: LD_EXP 81
26771: AND
26772: IFFALSE 26918
26774: GO 26776
26776: DISABLE
26777: LD_INT 0
26779: PPUSH
26780: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26781: LD_ADDR_VAR 0 1
26785: PUSH
26786: LD_INT 22
26788: PUSH
26789: LD_OWVAR 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 30
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PPUSH
26830: CALL_OW 69
26834: ST_TO_ADDR
// if not depot then
26835: LD_VAR 0 1
26839: NOT
26840: IFFALSE 26844
// exit ;
26842: GO 26918
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26844: LD_ADDR_VAR 0 2
26848: PUSH
26849: LD_VAR 0 1
26853: PUSH
26854: LD_INT 1
26856: PPUSH
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 12
26866: ARRAY
26867: PPUSH
26868: CALL_OW 274
26872: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26873: LD_VAR 0 2
26877: PPUSH
26878: LD_INT 1
26880: PPUSH
26881: LD_INT 0
26883: PPUSH
26884: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26888: LD_VAR 0 2
26892: PPUSH
26893: LD_INT 2
26895: PPUSH
26896: LD_INT 0
26898: PPUSH
26899: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26903: LD_VAR 0 2
26907: PPUSH
26908: LD_INT 3
26910: PPUSH
26911: LD_INT 0
26913: PPUSH
26914: CALL_OW 277
// end ;
26918: PPOPN 2
26920: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26921: LD_EXP 54
26925: IFFALSE 26933
26927: PUSH
26928: LD_EXP 82
26932: AND
26933: IFFALSE 27030
26935: GO 26937
26937: DISABLE
26938: LD_INT 0
26940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: LD_INT 22
26948: PUSH
26949: LD_OWVAR 2
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 21
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 3
26970: PUSH
26971: LD_INT 23
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: PPUSH
26990: CALL_OW 69
26994: ST_TO_ADDR
// if not tmp then
26995: LD_VAR 0 1
26999: NOT
27000: IFFALSE 27004
// exit ;
27002: GO 27030
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27004: LD_VAR 0 1
27008: PUSH
27009: LD_INT 1
27011: PPUSH
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 12
27021: ARRAY
27022: PPUSH
27023: LD_INT 200
27025: PPUSH
27026: CALL_OW 234
// end ;
27030: PPOPN 1
27032: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27033: LD_EXP 54
27037: IFFALSE 27045
27039: PUSH
27040: LD_EXP 83
27044: AND
27045: IFFALSE 27124
27047: GO 27049
27049: DISABLE
27050: LD_INT 0
27052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27053: LD_ADDR_VAR 0 1
27057: PUSH
27058: LD_INT 22
27060: PUSH
27061: LD_OWVAR 2
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 21
27072: PUSH
27073: LD_INT 2
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PPUSH
27084: CALL_OW 69
27088: ST_TO_ADDR
// if not tmp then
27089: LD_VAR 0 1
27093: NOT
27094: IFFALSE 27098
// exit ;
27096: GO 27124
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27098: LD_VAR 0 1
27102: PUSH
27103: LD_INT 1
27105: PPUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 12
27115: ARRAY
27116: PPUSH
27117: LD_INT 60
27119: PPUSH
27120: CALL_OW 234
// end ;
27124: PPOPN 1
27126: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27127: LD_EXP 54
27131: IFFALSE 27139
27133: PUSH
27134: LD_EXP 84
27138: AND
27139: IFFALSE 27238
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
// begin enable ;
27148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27149: LD_ADDR_VAR 0 1
27153: PUSH
27154: LD_INT 22
27156: PUSH
27157: LD_OWVAR 2
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 61
27168: PUSH
27169: EMPTY
27170: LIST
27171: PUSH
27172: LD_INT 33
27174: PUSH
27175: LD_INT 2
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: PPUSH
27187: CALL_OW 69
27191: ST_TO_ADDR
// if not tmp then
27192: LD_VAR 0 1
27196: NOT
27197: IFFALSE 27201
// exit ;
27199: GO 27238
// for i in tmp do
27201: LD_ADDR_VAR 0 2
27205: PUSH
27206: LD_VAR 0 1
27210: PUSH
27211: FOR_IN
27212: IFFALSE 27236
// if IsControledBy ( i ) then
27214: LD_VAR 0 2
27218: PPUSH
27219: CALL_OW 312
27223: IFFALSE 27234
// ComUnlink ( i ) ;
27225: LD_VAR 0 2
27229: PPUSH
27230: CALL_OW 136
27234: GO 27211
27236: POP
27237: POP
// end ;
27238: PPOPN 2
27240: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27241: LD_EXP 54
27245: IFFALSE 27253
27247: PUSH
27248: LD_EXP 85
27252: AND
27253: IFFALSE 27393
27255: GO 27257
27257: DISABLE
27258: LD_INT 0
27260: PPUSH
27261: PPUSH
// begin ToLua ( displayPowell(); ) ;
27262: LD_STRING displayPowell();
27264: PPUSH
27265: CALL_OW 559
// uc_side := 0 ;
27269: LD_ADDR_OWVAR 20
27273: PUSH
27274: LD_INT 0
27276: ST_TO_ADDR
// uc_nation := 2 ;
27277: LD_ADDR_OWVAR 21
27281: PUSH
27282: LD_INT 2
27284: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27285: LD_ADDR_OWVAR 37
27289: PUSH
27290: LD_INT 14
27292: ST_TO_ADDR
// vc_engine := engine_siberite ;
27293: LD_ADDR_OWVAR 39
27297: PUSH
27298: LD_INT 3
27300: ST_TO_ADDR
// vc_control := control_apeman ;
27301: LD_ADDR_OWVAR 38
27305: PUSH
27306: LD_INT 5
27308: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27309: LD_ADDR_OWVAR 40
27313: PUSH
27314: LD_INT 29
27316: ST_TO_ADDR
// un := CreateVehicle ;
27317: LD_ADDR_VAR 0 2
27321: PUSH
27322: CALL_OW 45
27326: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27327: LD_VAR 0 2
27331: PPUSH
27332: LD_INT 1
27334: PPUSH
27335: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27339: LD_INT 35
27341: PPUSH
27342: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27346: LD_VAR 0 2
27350: PPUSH
27351: LD_INT 22
27353: PUSH
27354: LD_OWVAR 2
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PPUSH
27363: CALL_OW 69
27367: PPUSH
27368: LD_VAR 0 2
27372: PPUSH
27373: CALL_OW 74
27377: PPUSH
27378: CALL_OW 115
// until IsDead ( un ) ;
27382: LD_VAR 0 2
27386: PPUSH
27387: CALL_OW 301
27391: IFFALSE 27339
// end ;
27393: PPOPN 2
27395: END
// every 0 0$1 trigger StreamModeActive and sStu do
27396: LD_EXP 54
27400: IFFALSE 27408
27402: PUSH
27403: LD_EXP 93
27407: AND
27408: IFFALSE 27424
27410: GO 27412
27412: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27413: LD_STRING displayStucuk();
27415: PPUSH
27416: CALL_OW 559
// ResetFog ;
27420: CALL_OW 335
// end ;
27424: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27425: LD_EXP 54
27429: IFFALSE 27437
27431: PUSH
27432: LD_EXP 86
27436: AND
27437: IFFALSE 27578
27439: GO 27441
27441: DISABLE
27442: LD_INT 0
27444: PPUSH
27445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27446: LD_ADDR_VAR 0 2
27450: PUSH
27451: LD_INT 22
27453: PUSH
27454: LD_OWVAR 2
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 21
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PPUSH
27477: CALL_OW 69
27481: ST_TO_ADDR
// if not tmp then
27482: LD_VAR 0 2
27486: NOT
27487: IFFALSE 27491
// exit ;
27489: GO 27578
// un := tmp [ rand ( 1 , tmp ) ] ;
27491: LD_ADDR_VAR 0 1
27495: PUSH
27496: LD_VAR 0 2
27500: PUSH
27501: LD_INT 1
27503: PPUSH
27504: LD_VAR 0 2
27508: PPUSH
27509: CALL_OW 12
27513: ARRAY
27514: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27515: LD_VAR 0 1
27519: PPUSH
27520: LD_INT 0
27522: PPUSH
27523: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27527: LD_VAR 0 1
27531: PPUSH
27532: LD_OWVAR 3
27536: PUSH
27537: LD_VAR 0 1
27541: DIFF
27542: PPUSH
27543: LD_VAR 0 1
27547: PPUSH
27548: CALL_OW 74
27552: PPUSH
27553: CALL_OW 115
// wait ( 0 0$20 ) ;
27557: LD_INT 700
27559: PPUSH
27560: CALL_OW 67
// SetSide ( un , your_side ) ;
27564: LD_VAR 0 1
27568: PPUSH
27569: LD_OWVAR 2
27573: PPUSH
27574: CALL_OW 235
// end ;
27578: PPOPN 2
27580: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27581: LD_EXP 54
27585: IFFALSE 27593
27587: PUSH
27588: LD_EXP 87
27592: AND
27593: IFFALSE 27699
27595: GO 27597
27597: DISABLE
27598: LD_INT 0
27600: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27601: LD_ADDR_VAR 0 1
27605: PUSH
27606: LD_INT 22
27608: PUSH
27609: LD_OWVAR 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: LD_INT 30
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 30
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PPUSH
27650: CALL_OW 69
27654: ST_TO_ADDR
// if not depot then
27655: LD_VAR 0 1
27659: NOT
27660: IFFALSE 27664
// exit ;
27662: GO 27699
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27664: LD_VAR 0 1
27668: PUSH
27669: LD_INT 1
27671: ARRAY
27672: PPUSH
27673: CALL_OW 250
27677: PPUSH
27678: LD_VAR 0 1
27682: PUSH
27683: LD_INT 1
27685: ARRAY
27686: PPUSH
27687: CALL_OW 251
27691: PPUSH
27692: LD_INT 70
27694: PPUSH
27695: CALL_OW 495
// end ;
27699: PPOPN 1
27701: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27702: LD_EXP 54
27706: IFFALSE 27714
27708: PUSH
27709: LD_EXP 88
27713: AND
27714: IFFALSE 27925
27716: GO 27718
27718: DISABLE
27719: LD_INT 0
27721: PPUSH
27722: PPUSH
27723: PPUSH
27724: PPUSH
27725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27726: LD_ADDR_VAR 0 5
27730: PUSH
27731: LD_INT 22
27733: PUSH
27734: LD_OWVAR 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 21
27745: PUSH
27746: LD_INT 1
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PPUSH
27757: CALL_OW 69
27761: ST_TO_ADDR
// if not tmp then
27762: LD_VAR 0 5
27766: NOT
27767: IFFALSE 27771
// exit ;
27769: GO 27925
// for i in tmp do
27771: LD_ADDR_VAR 0 1
27775: PUSH
27776: LD_VAR 0 5
27780: PUSH
27781: FOR_IN
27782: IFFALSE 27923
// begin d := rand ( 0 , 5 ) ;
27784: LD_ADDR_VAR 0 4
27788: PUSH
27789: LD_INT 0
27791: PPUSH
27792: LD_INT 5
27794: PPUSH
27795: CALL_OW 12
27799: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27800: LD_ADDR_VAR 0 2
27804: PUSH
27805: LD_VAR 0 1
27809: PPUSH
27810: CALL_OW 250
27814: PPUSH
27815: LD_VAR 0 4
27819: PPUSH
27820: LD_INT 3
27822: PPUSH
27823: LD_INT 12
27825: PPUSH
27826: CALL_OW 12
27830: PPUSH
27831: CALL_OW 272
27835: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27836: LD_ADDR_VAR 0 3
27840: PUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL_OW 251
27850: PPUSH
27851: LD_VAR 0 4
27855: PPUSH
27856: LD_INT 3
27858: PPUSH
27859: LD_INT 12
27861: PPUSH
27862: CALL_OW 12
27866: PPUSH
27867: CALL_OW 273
27871: ST_TO_ADDR
// if ValidHex ( x , y ) then
27872: LD_VAR 0 2
27876: PPUSH
27877: LD_VAR 0 3
27881: PPUSH
27882: CALL_OW 488
27886: IFFALSE 27921
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27888: LD_VAR 0 1
27892: PPUSH
27893: LD_VAR 0 2
27897: PPUSH
27898: LD_VAR 0 3
27902: PPUSH
27903: LD_INT 3
27905: PPUSH
27906: LD_INT 6
27908: PPUSH
27909: CALL_OW 12
27913: PPUSH
27914: LD_INT 1
27916: PPUSH
27917: CALL_OW 483
// end ;
27921: GO 27781
27923: POP
27924: POP
// end ;
27925: PPOPN 5
27927: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27928: LD_EXP 54
27932: IFFALSE 27940
27934: PUSH
27935: LD_EXP 89
27939: AND
27940: IFFALSE 28034
27942: GO 27944
27944: DISABLE
27945: LD_INT 0
27947: PPUSH
27948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27949: LD_ADDR_VAR 0 2
27953: PUSH
27954: LD_INT 22
27956: PUSH
27957: LD_OWVAR 2
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 32
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 21
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: LIST
27990: PPUSH
27991: CALL_OW 69
27995: ST_TO_ADDR
// if not tmp then
27996: LD_VAR 0 2
28000: NOT
28001: IFFALSE 28005
// exit ;
28003: GO 28034
// for i in tmp do
28005: LD_ADDR_VAR 0 1
28009: PUSH
28010: LD_VAR 0 2
28014: PUSH
28015: FOR_IN
28016: IFFALSE 28032
// SetFuel ( i , 0 ) ;
28018: LD_VAR 0 1
28022: PPUSH
28023: LD_INT 0
28025: PPUSH
28026: CALL_OW 240
28030: GO 28015
28032: POP
28033: POP
// end ;
28034: PPOPN 2
28036: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28037: LD_EXP 54
28041: IFFALSE 28049
28043: PUSH
28044: LD_EXP 90
28048: AND
28049: IFFALSE 28115
28051: GO 28053
28053: DISABLE
28054: LD_INT 0
28056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28057: LD_ADDR_VAR 0 1
28061: PUSH
28062: LD_INT 22
28064: PUSH
28065: LD_OWVAR 2
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 30
28076: PUSH
28077: LD_INT 29
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PPUSH
28088: CALL_OW 69
28092: ST_TO_ADDR
// if not tmp then
28093: LD_VAR 0 1
28097: NOT
28098: IFFALSE 28102
// exit ;
28100: GO 28115
// DestroyUnit ( tmp [ 1 ] ) ;
28102: LD_VAR 0 1
28106: PUSH
28107: LD_INT 1
28109: ARRAY
28110: PPUSH
28111: CALL_OW 65
// end ;
28115: PPOPN 1
28117: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28118: LD_EXP 54
28122: IFFALSE 28130
28124: PUSH
28125: LD_EXP 92
28129: AND
28130: IFFALSE 28259
28132: GO 28134
28134: DISABLE
28135: LD_INT 0
28137: PPUSH
// begin uc_side := 0 ;
28138: LD_ADDR_OWVAR 20
28142: PUSH
28143: LD_INT 0
28145: ST_TO_ADDR
// uc_nation := nation_arabian ;
28146: LD_ADDR_OWVAR 21
28150: PUSH
28151: LD_INT 2
28153: ST_TO_ADDR
// hc_gallery :=  ;
28154: LD_ADDR_OWVAR 33
28158: PUSH
28159: LD_STRING 
28161: ST_TO_ADDR
// hc_name :=  ;
28162: LD_ADDR_OWVAR 26
28166: PUSH
28167: LD_STRING 
28169: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28170: LD_INT 1
28172: PPUSH
28173: LD_INT 11
28175: PPUSH
28176: LD_INT 10
28178: PPUSH
28179: CALL_OW 380
// un := CreateHuman ;
28183: LD_ADDR_VAR 0 1
28187: PUSH
28188: CALL_OW 44
28192: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28193: LD_VAR 0 1
28197: PPUSH
28198: LD_INT 1
28200: PPUSH
28201: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28205: LD_INT 35
28207: PPUSH
28208: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28212: LD_VAR 0 1
28216: PPUSH
28217: LD_INT 22
28219: PUSH
28220: LD_OWVAR 2
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PPUSH
28229: CALL_OW 69
28233: PPUSH
28234: LD_VAR 0 1
28238: PPUSH
28239: CALL_OW 74
28243: PPUSH
28244: CALL_OW 115
// until IsDead ( un ) ;
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL_OW 301
28257: IFFALSE 28205
// end ;
28259: PPOPN 1
28261: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28262: LD_EXP 54
28266: IFFALSE 28274
28268: PUSH
28269: LD_EXP 94
28273: AND
28274: IFFALSE 28286
28276: GO 28278
28278: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28279: LD_STRING earthquake(getX(game), 0, 32)
28281: PPUSH
28282: CALL_OW 559
28286: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28287: LD_EXP 54
28291: IFFALSE 28299
28293: PUSH
28294: LD_EXP 95
28298: AND
28299: IFFALSE 28390
28301: GO 28303
28303: DISABLE
28304: LD_INT 0
28306: PPUSH
// begin enable ;
28307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28308: LD_ADDR_VAR 0 1
28312: PUSH
28313: LD_INT 22
28315: PUSH
28316: LD_OWVAR 2
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 21
28327: PUSH
28328: LD_INT 2
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 33
28337: PUSH
28338: LD_INT 3
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: PPUSH
28350: CALL_OW 69
28354: ST_TO_ADDR
// if not tmp then
28355: LD_VAR 0 1
28359: NOT
28360: IFFALSE 28364
// exit ;
28362: GO 28390
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28364: LD_VAR 0 1
28368: PUSH
28369: LD_INT 1
28371: PPUSH
28372: LD_VAR 0 1
28376: PPUSH
28377: CALL_OW 12
28381: ARRAY
28382: PPUSH
28383: LD_INT 1
28385: PPUSH
28386: CALL_OW 234
// end ;
28390: PPOPN 1
28392: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28393: LD_EXP 54
28397: IFFALSE 28405
28399: PUSH
28400: LD_EXP 96
28404: AND
28405: IFFALSE 28546
28407: GO 28409
28409: DISABLE
28410: LD_INT 0
28412: PPUSH
28413: PPUSH
28414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28415: LD_ADDR_VAR 0 3
28419: PUSH
28420: LD_INT 22
28422: PUSH
28423: LD_OWVAR 2
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 25
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PPUSH
28446: CALL_OW 69
28450: ST_TO_ADDR
// if not tmp then
28451: LD_VAR 0 3
28455: NOT
28456: IFFALSE 28460
// exit ;
28458: GO 28546
// un := tmp [ rand ( 1 , tmp ) ] ;
28460: LD_ADDR_VAR 0 2
28464: PUSH
28465: LD_VAR 0 3
28469: PUSH
28470: LD_INT 1
28472: PPUSH
28473: LD_VAR 0 3
28477: PPUSH
28478: CALL_OW 12
28482: ARRAY
28483: ST_TO_ADDR
// if Crawls ( un ) then
28484: LD_VAR 0 2
28488: PPUSH
28489: CALL_OW 318
28493: IFFALSE 28504
// ComWalk ( un ) ;
28495: LD_VAR 0 2
28499: PPUSH
28500: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 9
28511: PPUSH
28512: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28516: LD_INT 28
28518: PPUSH
28519: LD_OWVAR 2
28523: PPUSH
28524: LD_INT 2
28526: PPUSH
28527: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28531: LD_INT 29
28533: PPUSH
28534: LD_OWVAR 2
28538: PPUSH
28539: LD_INT 2
28541: PPUSH
28542: CALL_OW 322
// end ;
28546: PPOPN 3
28548: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28549: LD_EXP 54
28553: IFFALSE 28561
28555: PUSH
28556: LD_EXP 97
28560: AND
28561: IFFALSE 28672
28563: GO 28565
28565: DISABLE
28566: LD_INT 0
28568: PPUSH
28569: PPUSH
28570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28571: LD_ADDR_VAR 0 3
28575: PUSH
28576: LD_INT 22
28578: PUSH
28579: LD_OWVAR 2
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 25
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PPUSH
28602: CALL_OW 69
28606: ST_TO_ADDR
// if not tmp then
28607: LD_VAR 0 3
28611: NOT
28612: IFFALSE 28616
// exit ;
28614: GO 28672
// un := tmp [ rand ( 1 , tmp ) ] ;
28616: LD_ADDR_VAR 0 2
28620: PUSH
28621: LD_VAR 0 3
28625: PUSH
28626: LD_INT 1
28628: PPUSH
28629: LD_VAR 0 3
28633: PPUSH
28634: CALL_OW 12
28638: ARRAY
28639: ST_TO_ADDR
// if Crawls ( un ) then
28640: LD_VAR 0 2
28644: PPUSH
28645: CALL_OW 318
28649: IFFALSE 28660
// ComWalk ( un ) ;
28651: LD_VAR 0 2
28655: PPUSH
28656: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28660: LD_VAR 0 2
28664: PPUSH
28665: LD_INT 8
28667: PPUSH
28668: CALL_OW 336
// end ;
28672: PPOPN 3
28674: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28675: LD_EXP 54
28679: IFFALSE 28687
28681: PUSH
28682: LD_EXP 98
28686: AND
28687: IFFALSE 28831
28689: GO 28691
28691: DISABLE
28692: LD_INT 0
28694: PPUSH
28695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28696: LD_ADDR_VAR 0 2
28700: PUSH
28701: LD_INT 22
28703: PUSH
28704: LD_OWVAR 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 21
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: LD_INT 34
28728: PUSH
28729: LD_INT 12
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 34
28738: PUSH
28739: LD_INT 51
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 34
28748: PUSH
28749: LD_INT 32
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: LIST
28766: PPUSH
28767: CALL_OW 69
28771: ST_TO_ADDR
// if not tmp then
28772: LD_VAR 0 2
28776: NOT
28777: IFFALSE 28781
// exit ;
28779: GO 28831
// for i in tmp do
28781: LD_ADDR_VAR 0 1
28785: PUSH
28786: LD_VAR 0 2
28790: PUSH
28791: FOR_IN
28792: IFFALSE 28829
// if GetCargo ( i , mat_artifact ) = 0 then
28794: LD_VAR 0 1
28798: PPUSH
28799: LD_INT 4
28801: PPUSH
28802: CALL_OW 289
28806: PUSH
28807: LD_INT 0
28809: EQUAL
28810: IFFALSE 28827
// SetCargo ( i , mat_siberit , 100 ) ;
28812: LD_VAR 0 1
28816: PPUSH
28817: LD_INT 3
28819: PPUSH
28820: LD_INT 100
28822: PPUSH
28823: CALL_OW 290
28827: GO 28791
28829: POP
28830: POP
// end ;
28831: PPOPN 2
28833: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28834: LD_EXP 54
28838: IFFALSE 28846
28840: PUSH
28841: LD_EXP 99
28845: AND
28846: IFFALSE 29029
28848: GO 28850
28850: DISABLE
28851: LD_INT 0
28853: PPUSH
28854: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28855: LD_ADDR_VAR 0 2
28859: PUSH
28860: LD_INT 22
28862: PUSH
28863: LD_OWVAR 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PPUSH
28872: CALL_OW 69
28876: ST_TO_ADDR
// if not tmp then
28877: LD_VAR 0 2
28881: NOT
28882: IFFALSE 28886
// exit ;
28884: GO 29029
// for i := 1 to 2 do
28886: LD_ADDR_VAR 0 1
28890: PUSH
28891: DOUBLE
28892: LD_INT 1
28894: DEC
28895: ST_TO_ADDR
28896: LD_INT 2
28898: PUSH
28899: FOR_TO
28900: IFFALSE 29027
// begin uc_side := your_side ;
28902: LD_ADDR_OWVAR 20
28906: PUSH
28907: LD_OWVAR 2
28911: ST_TO_ADDR
// uc_nation := nation_american ;
28912: LD_ADDR_OWVAR 21
28916: PUSH
28917: LD_INT 1
28919: ST_TO_ADDR
// vc_chassis := us_morphling ;
28920: LD_ADDR_OWVAR 37
28924: PUSH
28925: LD_INT 5
28927: ST_TO_ADDR
// vc_engine := engine_siberite ;
28928: LD_ADDR_OWVAR 39
28932: PUSH
28933: LD_INT 3
28935: ST_TO_ADDR
// vc_control := control_computer ;
28936: LD_ADDR_OWVAR 38
28940: PUSH
28941: LD_INT 3
28943: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28944: LD_ADDR_OWVAR 40
28948: PUSH
28949: LD_INT 10
28951: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28952: LD_VAR 0 2
28956: PUSH
28957: LD_INT 1
28959: ARRAY
28960: PPUSH
28961: CALL_OW 310
28965: NOT
28966: IFFALSE 29013
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28968: CALL_OW 45
28972: PPUSH
28973: LD_VAR 0 2
28977: PUSH
28978: LD_INT 1
28980: ARRAY
28981: PPUSH
28982: CALL_OW 250
28986: PPUSH
28987: LD_VAR 0 2
28991: PUSH
28992: LD_INT 1
28994: ARRAY
28995: PPUSH
28996: CALL_OW 251
29000: PPUSH
29001: LD_INT 12
29003: PPUSH
29004: LD_INT 1
29006: PPUSH
29007: CALL_OW 50
29011: GO 29025
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29013: CALL_OW 45
29017: PPUSH
29018: LD_INT 1
29020: PPUSH
29021: CALL_OW 51
// end ;
29025: GO 28899
29027: POP
29028: POP
// end ;
29029: PPOPN 2
29031: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29032: LD_EXP 54
29036: IFFALSE 29044
29038: PUSH
29039: LD_EXP 100
29043: AND
29044: IFFALSE 29266
29046: GO 29048
29048: DISABLE
29049: LD_INT 0
29051: PPUSH
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
29056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29057: LD_ADDR_VAR 0 6
29061: PUSH
29062: LD_INT 22
29064: PUSH
29065: LD_OWVAR 2
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 21
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 23
29089: PUSH
29090: LD_INT 0
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: PPUSH
29106: CALL_OW 69
29110: ST_TO_ADDR
// if not tmp then
29111: LD_VAR 0 6
29115: NOT
29116: IFFALSE 29120
// exit ;
29118: GO 29266
// s1 := rand ( 1 , 4 ) ;
29120: LD_ADDR_VAR 0 2
29124: PUSH
29125: LD_INT 1
29127: PPUSH
29128: LD_INT 4
29130: PPUSH
29131: CALL_OW 12
29135: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29136: LD_ADDR_VAR 0 4
29140: PUSH
29141: LD_VAR 0 6
29145: PUSH
29146: LD_INT 1
29148: ARRAY
29149: PPUSH
29150: LD_VAR 0 2
29154: PPUSH
29155: CALL_OW 259
29159: ST_TO_ADDR
// if s1 = 1 then
29160: LD_VAR 0 2
29164: PUSH
29165: LD_INT 1
29167: EQUAL
29168: IFFALSE 29188
// s2 := rand ( 2 , 4 ) else
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_INT 2
29177: PPUSH
29178: LD_INT 4
29180: PPUSH
29181: CALL_OW 12
29185: ST_TO_ADDR
29186: GO 29196
// s2 := 1 ;
29188: LD_ADDR_VAR 0 3
29192: PUSH
29193: LD_INT 1
29195: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29196: LD_ADDR_VAR 0 5
29200: PUSH
29201: LD_VAR 0 6
29205: PUSH
29206: LD_INT 1
29208: ARRAY
29209: PPUSH
29210: LD_VAR 0 3
29214: PPUSH
29215: CALL_OW 259
29219: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29220: LD_VAR 0 6
29224: PUSH
29225: LD_INT 1
29227: ARRAY
29228: PPUSH
29229: LD_VAR 0 2
29233: PPUSH
29234: LD_VAR 0 5
29238: PPUSH
29239: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29243: LD_VAR 0 6
29247: PUSH
29248: LD_INT 1
29250: ARRAY
29251: PPUSH
29252: LD_VAR 0 3
29256: PPUSH
29257: LD_VAR 0 4
29261: PPUSH
29262: CALL_OW 237
// end ;
29266: PPOPN 6
29268: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29269: LD_EXP 54
29273: IFFALSE 29281
29275: PUSH
29276: LD_EXP 101
29280: AND
29281: IFFALSE 29360
29283: GO 29285
29285: DISABLE
29286: LD_INT 0
29288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29289: LD_ADDR_VAR 0 1
29293: PUSH
29294: LD_INT 22
29296: PUSH
29297: LD_OWVAR 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 30
29308: PUSH
29309: LD_INT 3
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 69
29324: ST_TO_ADDR
// if not tmp then
29325: LD_VAR 0 1
29329: NOT
29330: IFFALSE 29334
// exit ;
29332: GO 29360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29334: LD_VAR 0 1
29338: PUSH
29339: LD_INT 1
29341: PPUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 12
29351: ARRAY
29352: PPUSH
29353: LD_INT 1
29355: PPUSH
29356: CALL_OW 234
// end ;
29360: PPOPN 1
29362: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29363: LD_EXP 54
29367: IFFALSE 29375
29369: PUSH
29370: LD_EXP 102
29374: AND
29375: IFFALSE 29487
29377: GO 29379
29379: DISABLE
29380: LD_INT 0
29382: PPUSH
29383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29384: LD_ADDR_VAR 0 2
29388: PUSH
29389: LD_INT 22
29391: PUSH
29392: LD_OWVAR 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 30
29406: PUSH
29407: LD_INT 27
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 30
29416: PUSH
29417: LD_INT 26
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 30
29426: PUSH
29427: LD_INT 28
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PPUSH
29444: CALL_OW 69
29448: ST_TO_ADDR
// if not tmp then
29449: LD_VAR 0 2
29453: NOT
29454: IFFALSE 29458
// exit ;
29456: GO 29487
// for i in tmp do
29458: LD_ADDR_VAR 0 1
29462: PUSH
29463: LD_VAR 0 2
29467: PUSH
29468: FOR_IN
29469: IFFALSE 29485
// SetLives ( i , 1 ) ;
29471: LD_VAR 0 1
29475: PPUSH
29476: LD_INT 1
29478: PPUSH
29479: CALL_OW 234
29483: GO 29468
29485: POP
29486: POP
// end ;
29487: PPOPN 2
29489: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29490: LD_EXP 54
29494: IFFALSE 29502
29496: PUSH
29497: LD_EXP 103
29501: AND
29502: IFFALSE 29789
29504: GO 29506
29506: DISABLE
29507: LD_INT 0
29509: PPUSH
29510: PPUSH
29511: PPUSH
// begin i := rand ( 1 , 7 ) ;
29512: LD_ADDR_VAR 0 1
29516: PUSH
29517: LD_INT 1
29519: PPUSH
29520: LD_INT 7
29522: PPUSH
29523: CALL_OW 12
29527: ST_TO_ADDR
// case i of 1 :
29528: LD_VAR 0 1
29532: PUSH
29533: LD_INT 1
29535: DOUBLE
29536: EQUAL
29537: IFTRUE 29541
29539: GO 29551
29541: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29542: LD_STRING earthquake(getX(game), 0, 32)
29544: PPUSH
29545: CALL_OW 559
29549: GO 29789
29551: LD_INT 2
29553: DOUBLE
29554: EQUAL
29555: IFTRUE 29559
29557: GO 29573
29559: POP
// begin ToLua ( displayStucuk(); ) ;
29560: LD_STRING displayStucuk();
29562: PPUSH
29563: CALL_OW 559
// ResetFog ;
29567: CALL_OW 335
// end ; 3 :
29571: GO 29789
29573: LD_INT 3
29575: DOUBLE
29576: EQUAL
29577: IFTRUE 29581
29579: GO 29685
29581: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29582: LD_ADDR_VAR 0 2
29586: PUSH
29587: LD_INT 22
29589: PUSH
29590: LD_OWVAR 2
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 25
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PPUSH
29613: CALL_OW 69
29617: ST_TO_ADDR
// if not tmp then
29618: LD_VAR 0 2
29622: NOT
29623: IFFALSE 29627
// exit ;
29625: GO 29789
// un := tmp [ rand ( 1 , tmp ) ] ;
29627: LD_ADDR_VAR 0 3
29631: PUSH
29632: LD_VAR 0 2
29636: PUSH
29637: LD_INT 1
29639: PPUSH
29640: LD_VAR 0 2
29644: PPUSH
29645: CALL_OW 12
29649: ARRAY
29650: ST_TO_ADDR
// if Crawls ( un ) then
29651: LD_VAR 0 3
29655: PPUSH
29656: CALL_OW 318
29660: IFFALSE 29671
// ComWalk ( un ) ;
29662: LD_VAR 0 3
29666: PPUSH
29667: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29671: LD_VAR 0 3
29675: PPUSH
29676: LD_INT 8
29678: PPUSH
29679: CALL_OW 336
// end ; 4 :
29683: GO 29789
29685: LD_INT 4
29687: DOUBLE
29688: EQUAL
29689: IFTRUE 29693
29691: GO 29767
29693: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29694: LD_ADDR_VAR 0 2
29698: PUSH
29699: LD_INT 22
29701: PUSH
29702: LD_OWVAR 2
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 30
29713: PUSH
29714: LD_INT 29
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PPUSH
29725: CALL_OW 69
29729: ST_TO_ADDR
// if not tmp then
29730: LD_VAR 0 2
29734: NOT
29735: IFFALSE 29739
// exit ;
29737: GO 29789
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29739: LD_VAR 0 2
29743: PUSH
29744: LD_INT 1
29746: ARRAY
29747: PPUSH
29748: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29752: LD_VAR 0 2
29756: PUSH
29757: LD_INT 1
29759: ARRAY
29760: PPUSH
29761: CALL_OW 65
// end ; 5 .. 7 :
29765: GO 29789
29767: LD_INT 5
29769: DOUBLE
29770: GREATEREQUAL
29771: IFFALSE 29779
29773: LD_INT 7
29775: DOUBLE
29776: LESSEQUAL
29777: IFTRUE 29781
29779: GO 29788
29781: POP
// StreamSibBomb ; end ;
29782: CALL 25970 0 0
29786: GO 29789
29788: POP
// end ;
29789: PPOPN 3
29791: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29792: LD_EXP 54
29796: IFFALSE 29804
29798: PUSH
29799: LD_EXP 104
29803: AND
29804: IFFALSE 29960
29806: GO 29808
29808: DISABLE
29809: LD_INT 0
29811: PPUSH
29812: PPUSH
29813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29814: LD_ADDR_VAR 0 2
29818: PUSH
29819: LD_INT 81
29821: PUSH
29822: LD_OWVAR 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: LD_INT 21
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 21
29846: PUSH
29847: LD_INT 2
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PPUSH
29863: CALL_OW 69
29867: ST_TO_ADDR
// if not tmp then
29868: LD_VAR 0 2
29872: NOT
29873: IFFALSE 29877
// exit ;
29875: GO 29960
// p := 0 ;
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_INT 0
29884: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29885: LD_INT 35
29887: PPUSH
29888: CALL_OW 67
// p := p + 1 ;
29892: LD_ADDR_VAR 0 3
29896: PUSH
29897: LD_VAR 0 3
29901: PUSH
29902: LD_INT 1
29904: PLUS
29905: ST_TO_ADDR
// for i in tmp do
29906: LD_ADDR_VAR 0 1
29910: PUSH
29911: LD_VAR 0 2
29915: PUSH
29916: FOR_IN
29917: IFFALSE 29948
// if GetLives ( i ) < 1000 then
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 256
29928: PUSH
29929: LD_INT 1000
29931: LESS
29932: IFFALSE 29946
// SetLives ( i , 1000 ) ;
29934: LD_VAR 0 1
29938: PPUSH
29939: LD_INT 1000
29941: PPUSH
29942: CALL_OW 234
29946: GO 29916
29948: POP
29949: POP
// until p > 20 ;
29950: LD_VAR 0 3
29954: PUSH
29955: LD_INT 20
29957: GREATER
29958: IFFALSE 29885
// end ;
29960: PPOPN 3
29962: END
// every 0 0$1 trigger StreamModeActive and sTime do
29963: LD_EXP 54
29967: IFFALSE 29975
29969: PUSH
29970: LD_EXP 105
29974: AND
29975: IFFALSE 30010
29977: GO 29979
29979: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29980: LD_INT 28
29982: PPUSH
29983: LD_OWVAR 2
29987: PPUSH
29988: LD_INT 2
29990: PPUSH
29991: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29995: LD_INT 30
29997: PPUSH
29998: LD_OWVAR 2
30002: PPUSH
30003: LD_INT 2
30005: PPUSH
30006: CALL_OW 322
// end ;
30010: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30011: LD_EXP 54
30015: IFFALSE 30023
30017: PUSH
30018: LD_EXP 106
30022: AND
30023: IFFALSE 30144
30025: GO 30027
30027: DISABLE
30028: LD_INT 0
30030: PPUSH
30031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30032: LD_ADDR_VAR 0 2
30036: PUSH
30037: LD_INT 22
30039: PUSH
30040: LD_OWVAR 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 21
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 3
30061: PUSH
30062: LD_INT 23
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: PPUSH
30081: CALL_OW 69
30085: ST_TO_ADDR
// if not tmp then
30086: LD_VAR 0 2
30090: NOT
30091: IFFALSE 30095
// exit ;
30093: GO 30144
// for i in tmp do
30095: LD_ADDR_VAR 0 1
30099: PUSH
30100: LD_VAR 0 2
30104: PUSH
30105: FOR_IN
30106: IFFALSE 30142
// begin if Crawls ( i ) then
30108: LD_VAR 0 1
30112: PPUSH
30113: CALL_OW 318
30117: IFFALSE 30128
// ComWalk ( i ) ;
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 138
// SetClass ( i , 2 ) ;
30128: LD_VAR 0 1
30132: PPUSH
30133: LD_INT 2
30135: PPUSH
30136: CALL_OW 336
// end ;
30140: GO 30105
30142: POP
30143: POP
// end ;
30144: PPOPN 2
30146: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30147: LD_EXP 54
30151: IFFALSE 30159
30153: PUSH
30154: LD_EXP 107
30158: AND
30159: IFFALSE 30449
30161: GO 30163
30163: DISABLE
30164: LD_INT 0
30166: PPUSH
30167: PPUSH
30168: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30169: LD_OWVAR 2
30173: PPUSH
30174: LD_INT 9
30176: PPUSH
30177: LD_INT 1
30179: PPUSH
30180: LD_INT 1
30182: PPUSH
30183: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30187: LD_INT 9
30189: PPUSH
30190: LD_OWVAR 2
30194: PPUSH
30195: CALL_OW 343
// uc_side := 9 ;
30199: LD_ADDR_OWVAR 20
30203: PUSH
30204: LD_INT 9
30206: ST_TO_ADDR
// uc_nation := 2 ;
30207: LD_ADDR_OWVAR 21
30211: PUSH
30212: LD_INT 2
30214: ST_TO_ADDR
// hc_name := Dark Warrior ;
30215: LD_ADDR_OWVAR 26
30219: PUSH
30220: LD_STRING Dark Warrior
30222: ST_TO_ADDR
// hc_gallery :=  ;
30223: LD_ADDR_OWVAR 33
30227: PUSH
30228: LD_STRING 
30230: ST_TO_ADDR
// hc_noskilllimit := true ;
30231: LD_ADDR_OWVAR 76
30235: PUSH
30236: LD_INT 1
30238: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30239: LD_ADDR_OWVAR 31
30243: PUSH
30244: LD_INT 30
30246: PUSH
30247: LD_INT 30
30249: PUSH
30250: LD_INT 30
30252: PUSH
30253: LD_INT 30
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: ST_TO_ADDR
// un := CreateHuman ;
30262: LD_ADDR_VAR 0 3
30266: PUSH
30267: CALL_OW 44
30271: ST_TO_ADDR
// hc_noskilllimit := false ;
30272: LD_ADDR_OWVAR 76
30276: PUSH
30277: LD_INT 0
30279: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30280: LD_VAR 0 3
30284: PPUSH
30285: LD_INT 1
30287: PPUSH
30288: CALL_OW 51
// ToLua ( playRanger() ) ;
30292: LD_STRING playRanger()
30294: PPUSH
30295: CALL_OW 559
// p := 0 ;
30299: LD_ADDR_VAR 0 2
30303: PUSH
30304: LD_INT 0
30306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30307: LD_INT 35
30309: PPUSH
30310: CALL_OW 67
// p := p + 1 ;
30314: LD_ADDR_VAR 0 2
30318: PUSH
30319: LD_VAR 0 2
30323: PUSH
30324: LD_INT 1
30326: PLUS
30327: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30328: LD_VAR 0 3
30332: PPUSH
30333: CALL_OW 256
30337: PUSH
30338: LD_INT 1000
30340: LESS
30341: IFFALSE 30355
// SetLives ( un , 1000 ) ;
30343: LD_VAR 0 3
30347: PPUSH
30348: LD_INT 1000
30350: PPUSH
30351: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30355: LD_VAR 0 3
30359: PPUSH
30360: LD_INT 81
30362: PUSH
30363: LD_OWVAR 2
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 91
30374: PUSH
30375: LD_VAR 0 3
30379: PUSH
30380: LD_INT 30
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 69
30396: PPUSH
30397: LD_VAR 0 3
30401: PPUSH
30402: CALL_OW 74
30406: PPUSH
30407: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30411: LD_VAR 0 2
30415: PUSH
30416: LD_INT 80
30418: GREATER
30419: IFTRUE 30432
30421: PUSH
30422: LD_VAR 0 3
30426: PPUSH
30427: CALL_OW 301
30431: OR
30432: IFFALSE 30307
// if un then
30434: LD_VAR 0 3
30438: IFFALSE 30449
// RemoveUnit ( un ) ;
30440: LD_VAR 0 3
30444: PPUSH
30445: CALL_OW 64
// end ;
30449: PPOPN 3
30451: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30452: LD_EXP 108
30456: IFFALSE 30572
30458: GO 30460
30460: DISABLE
30461: LD_INT 0
30463: PPUSH
30464: PPUSH
30465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30466: LD_ADDR_VAR 0 2
30470: PUSH
30471: LD_INT 81
30473: PUSH
30474: LD_OWVAR 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 21
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PPUSH
30497: CALL_OW 69
30501: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30502: LD_STRING playComputer()
30504: PPUSH
30505: CALL_OW 559
// if not tmp then
30509: LD_VAR 0 2
30513: NOT
30514: IFFALSE 30518
// exit ;
30516: GO 30572
// for i in tmp do
30518: LD_ADDR_VAR 0 1
30522: PUSH
30523: LD_VAR 0 2
30527: PUSH
30528: FOR_IN
30529: IFFALSE 30570
// for j := 1 to 4 do
30531: LD_ADDR_VAR 0 3
30535: PUSH
30536: DOUBLE
30537: LD_INT 1
30539: DEC
30540: ST_TO_ADDR
30541: LD_INT 4
30543: PUSH
30544: FOR_TO
30545: IFFALSE 30566
// SetSkill ( i , j , 10 ) ;
30547: LD_VAR 0 1
30551: PPUSH
30552: LD_VAR 0 3
30556: PPUSH
30557: LD_INT 10
30559: PPUSH
30560: CALL_OW 237
30564: GO 30544
30566: POP
30567: POP
30568: GO 30528
30570: POP
30571: POP
// end ;
30572: PPOPN 3
30574: END
// every 0 0$1 trigger s30 do var i , tmp ;
30575: LD_EXP 109
30579: IFFALSE 30648
30581: GO 30583
30583: DISABLE
30584: LD_INT 0
30586: PPUSH
30587: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30588: LD_ADDR_VAR 0 2
30592: PUSH
30593: LD_INT 22
30595: PUSH
30596: LD_OWVAR 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PPUSH
30605: CALL_OW 69
30609: ST_TO_ADDR
// if not tmp then
30610: LD_VAR 0 2
30614: NOT
30615: IFFALSE 30619
// exit ;
30617: GO 30648
// for i in tmp do
30619: LD_ADDR_VAR 0 1
30623: PUSH
30624: LD_VAR 0 2
30628: PUSH
30629: FOR_IN
30630: IFFALSE 30646
// SetLives ( i , 300 ) ;
30632: LD_VAR 0 1
30636: PPUSH
30637: LD_INT 300
30639: PPUSH
30640: CALL_OW 234
30644: GO 30629
30646: POP
30647: POP
// end ;
30648: PPOPN 2
30650: END
// every 0 0$1 trigger s60 do var i , tmp ;
30651: LD_EXP 110
30655: IFFALSE 30724
30657: GO 30659
30659: DISABLE
30660: LD_INT 0
30662: PPUSH
30663: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30664: LD_ADDR_VAR 0 2
30668: PUSH
30669: LD_INT 22
30671: PUSH
30672: LD_OWVAR 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PPUSH
30681: CALL_OW 69
30685: ST_TO_ADDR
// if not tmp then
30686: LD_VAR 0 2
30690: NOT
30691: IFFALSE 30695
// exit ;
30693: GO 30724
// for i in tmp do
30695: LD_ADDR_VAR 0 1
30699: PUSH
30700: LD_VAR 0 2
30704: PUSH
30705: FOR_IN
30706: IFFALSE 30722
// SetLives ( i , 600 ) ;
30708: LD_VAR 0 1
30712: PPUSH
30713: LD_INT 600
30715: PPUSH
30716: CALL_OW 234
30720: GO 30705
30722: POP
30723: POP
// end ;
30724: PPOPN 2
30726: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30727: LD_INT 0
30729: PPUSH
// case cmd of 301 :
30730: LD_VAR 0 1
30734: PUSH
30735: LD_INT 301
30737: DOUBLE
30738: EQUAL
30739: IFTRUE 30743
30741: GO 30775
30743: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30744: LD_VAR 0 6
30748: PPUSH
30749: LD_VAR 0 7
30753: PPUSH
30754: LD_VAR 0 8
30758: PPUSH
30759: LD_VAR 0 4
30763: PPUSH
30764: LD_VAR 0 5
30768: PPUSH
30769: CALL 31988 0 5
30773: GO 30896
30775: LD_INT 302
30777: DOUBLE
30778: EQUAL
30779: IFTRUE 30783
30781: GO 30820
30783: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30784: LD_VAR 0 6
30788: PPUSH
30789: LD_VAR 0 7
30793: PPUSH
30794: LD_VAR 0 8
30798: PPUSH
30799: LD_VAR 0 9
30803: PPUSH
30804: LD_VAR 0 4
30808: PPUSH
30809: LD_VAR 0 5
30813: PPUSH
30814: CALL 32079 0 6
30818: GO 30896
30820: LD_INT 303
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 30865
30828: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30829: LD_VAR 0 6
30833: PPUSH
30834: LD_VAR 0 7
30838: PPUSH
30839: LD_VAR 0 8
30843: PPUSH
30844: LD_VAR 0 9
30848: PPUSH
30849: LD_VAR 0 4
30853: PPUSH
30854: LD_VAR 0 5
30858: PPUSH
30859: CALL 30901 0 6
30863: GO 30896
30865: LD_INT 304
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 30895
30873: POP
// hHackTeleport ( unit , x , y ) ; end ;
30874: LD_VAR 0 2
30878: PPUSH
30879: LD_VAR 0 4
30883: PPUSH
30884: LD_VAR 0 5
30888: PPUSH
30889: CALL 32672 0 3
30893: GO 30896
30895: POP
// end ;
30896: LD_VAR 0 12
30900: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30901: LD_INT 0
30903: PPUSH
30904: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30905: LD_VAR 0 1
30909: PUSH
30910: LD_INT 1
30912: LESS
30913: IFTRUE 30925
30915: PUSH
30916: LD_VAR 0 1
30920: PUSH
30921: LD_INT 3
30923: GREATER
30924: OR
30925: IFTRUE 30943
30927: PUSH
30928: LD_VAR 0 5
30932: PPUSH
30933: LD_VAR 0 6
30937: PPUSH
30938: CALL_OW 428
30942: OR
30943: IFFALSE 30947
// exit ;
30945: GO 31675
// uc_side := your_side ;
30947: LD_ADDR_OWVAR 20
30951: PUSH
30952: LD_OWVAR 2
30956: ST_TO_ADDR
// uc_nation := nation ;
30957: LD_ADDR_OWVAR 21
30961: PUSH
30962: LD_VAR 0 1
30966: ST_TO_ADDR
// bc_level = 1 ;
30967: LD_ADDR_OWVAR 43
30971: PUSH
30972: LD_INT 1
30974: ST_TO_ADDR
// case btype of 1 :
30975: LD_VAR 0 2
30979: PUSH
30980: LD_INT 1
30982: DOUBLE
30983: EQUAL
30984: IFTRUE 30988
30986: GO 30999
30988: POP
// bc_type := b_depot ; 2 :
30989: LD_ADDR_OWVAR 42
30993: PUSH
30994: LD_INT 0
30996: ST_TO_ADDR
30997: GO 31619
30999: LD_INT 2
31001: DOUBLE
31002: EQUAL
31003: IFTRUE 31007
31005: GO 31018
31007: POP
// bc_type := b_warehouse ; 3 :
31008: LD_ADDR_OWVAR 42
31012: PUSH
31013: LD_INT 1
31015: ST_TO_ADDR
31016: GO 31619
31018: LD_INT 3
31020: DOUBLE
31021: EQUAL
31022: IFTRUE 31026
31024: GO 31037
31026: POP
// bc_type := b_lab ; 4 .. 9 :
31027: LD_ADDR_OWVAR 42
31031: PUSH
31032: LD_INT 6
31034: ST_TO_ADDR
31035: GO 31619
31037: LD_INT 4
31039: DOUBLE
31040: GREATEREQUAL
31041: IFFALSE 31049
31043: LD_INT 9
31045: DOUBLE
31046: LESSEQUAL
31047: IFTRUE 31051
31049: GO 31111
31051: POP
// begin bc_type := b_lab_half ;
31052: LD_ADDR_OWVAR 42
31056: PUSH
31057: LD_INT 7
31059: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31060: LD_ADDR_OWVAR 44
31064: PUSH
31065: LD_INT 10
31067: PUSH
31068: LD_INT 11
31070: PUSH
31071: LD_INT 12
31073: PUSH
31074: LD_INT 15
31076: PUSH
31077: LD_INT 14
31079: PUSH
31080: LD_INT 13
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: PUSH
31091: LD_VAR 0 2
31095: PUSH
31096: LD_INT 3
31098: MINUS
31099: ARRAY
31100: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31101: LD_ADDR_OWVAR 45
31105: PUSH
31106: LD_INT 9
31108: ST_TO_ADDR
// end ; 10 .. 13 :
31109: GO 31619
31111: LD_INT 10
31113: DOUBLE
31114: GREATEREQUAL
31115: IFFALSE 31123
31117: LD_INT 13
31119: DOUBLE
31120: LESSEQUAL
31121: IFTRUE 31125
31123: GO 31202
31125: POP
// begin bc_type := b_lab_full ;
31126: LD_ADDR_OWVAR 42
31130: PUSH
31131: LD_INT 8
31133: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31134: LD_ADDR_OWVAR 44
31138: PUSH
31139: LD_INT 10
31141: PUSH
31142: LD_INT 12
31144: PUSH
31145: LD_INT 14
31147: PUSH
31148: LD_INT 13
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: PUSH
31157: LD_VAR 0 2
31161: PUSH
31162: LD_INT 9
31164: MINUS
31165: ARRAY
31166: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31167: LD_ADDR_OWVAR 45
31171: PUSH
31172: LD_INT 11
31174: PUSH
31175: LD_INT 15
31177: PUSH
31178: LD_INT 12
31180: PUSH
31181: LD_INT 15
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: PUSH
31190: LD_VAR 0 2
31194: PUSH
31195: LD_INT 9
31197: MINUS
31198: ARRAY
31199: ST_TO_ADDR
// end ; 14 :
31200: GO 31619
31202: LD_INT 14
31204: DOUBLE
31205: EQUAL
31206: IFTRUE 31210
31208: GO 31221
31210: POP
// bc_type := b_workshop ; 15 :
31211: LD_ADDR_OWVAR 42
31215: PUSH
31216: LD_INT 2
31218: ST_TO_ADDR
31219: GO 31619
31221: LD_INT 15
31223: DOUBLE
31224: EQUAL
31225: IFTRUE 31229
31227: GO 31240
31229: POP
// bc_type := b_factory ; 16 :
31230: LD_ADDR_OWVAR 42
31234: PUSH
31235: LD_INT 3
31237: ST_TO_ADDR
31238: GO 31619
31240: LD_INT 16
31242: DOUBLE
31243: EQUAL
31244: IFTRUE 31248
31246: GO 31259
31248: POP
// bc_type := b_ext_gun ; 17 :
31249: LD_ADDR_OWVAR 42
31253: PUSH
31254: LD_INT 17
31256: ST_TO_ADDR
31257: GO 31619
31259: LD_INT 17
31261: DOUBLE
31262: EQUAL
31263: IFTRUE 31267
31265: GO 31295
31267: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31268: LD_ADDR_OWVAR 42
31272: PUSH
31273: LD_INT 19
31275: PUSH
31276: LD_INT 23
31278: PUSH
31279: LD_INT 19
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: PUSH
31287: LD_VAR 0 1
31291: ARRAY
31292: ST_TO_ADDR
31293: GO 31619
31295: LD_INT 18
31297: DOUBLE
31298: EQUAL
31299: IFTRUE 31303
31301: GO 31314
31303: POP
// bc_type := b_ext_radar ; 19 :
31304: LD_ADDR_OWVAR 42
31308: PUSH
31309: LD_INT 20
31311: ST_TO_ADDR
31312: GO 31619
31314: LD_INT 19
31316: DOUBLE
31317: EQUAL
31318: IFTRUE 31322
31320: GO 31333
31322: POP
// bc_type := b_ext_radio ; 20 :
31323: LD_ADDR_OWVAR 42
31327: PUSH
31328: LD_INT 22
31330: ST_TO_ADDR
31331: GO 31619
31333: LD_INT 20
31335: DOUBLE
31336: EQUAL
31337: IFTRUE 31341
31339: GO 31352
31341: POP
// bc_type := b_ext_siberium ; 21 :
31342: LD_ADDR_OWVAR 42
31346: PUSH
31347: LD_INT 21
31349: ST_TO_ADDR
31350: GO 31619
31352: LD_INT 21
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31371
31360: POP
// bc_type := b_ext_computer ; 22 :
31361: LD_ADDR_OWVAR 42
31365: PUSH
31366: LD_INT 24
31368: ST_TO_ADDR
31369: GO 31619
31371: LD_INT 22
31373: DOUBLE
31374: EQUAL
31375: IFTRUE 31379
31377: GO 31390
31379: POP
// bc_type := b_ext_track ; 23 :
31380: LD_ADDR_OWVAR 42
31384: PUSH
31385: LD_INT 16
31387: ST_TO_ADDR
31388: GO 31619
31390: LD_INT 23
31392: DOUBLE
31393: EQUAL
31394: IFTRUE 31398
31396: GO 31409
31398: POP
// bc_type := b_ext_laser ; 24 :
31399: LD_ADDR_OWVAR 42
31403: PUSH
31404: LD_INT 25
31406: ST_TO_ADDR
31407: GO 31619
31409: LD_INT 24
31411: DOUBLE
31412: EQUAL
31413: IFTRUE 31417
31415: GO 31428
31417: POP
// bc_type := b_control_tower ; 25 :
31418: LD_ADDR_OWVAR 42
31422: PUSH
31423: LD_INT 36
31425: ST_TO_ADDR
31426: GO 31619
31428: LD_INT 25
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31447
31436: POP
// bc_type := b_breastwork ; 26 :
31437: LD_ADDR_OWVAR 42
31441: PUSH
31442: LD_INT 31
31444: ST_TO_ADDR
31445: GO 31619
31447: LD_INT 26
31449: DOUBLE
31450: EQUAL
31451: IFTRUE 31455
31453: GO 31466
31455: POP
// bc_type := b_bunker ; 27 :
31456: LD_ADDR_OWVAR 42
31460: PUSH
31461: LD_INT 32
31463: ST_TO_ADDR
31464: GO 31619
31466: LD_INT 27
31468: DOUBLE
31469: EQUAL
31470: IFTRUE 31474
31472: GO 31485
31474: POP
// bc_type := b_turret ; 28 :
31475: LD_ADDR_OWVAR 42
31479: PUSH
31480: LD_INT 33
31482: ST_TO_ADDR
31483: GO 31619
31485: LD_INT 28
31487: DOUBLE
31488: EQUAL
31489: IFTRUE 31493
31491: GO 31504
31493: POP
// bc_type := b_armoury ; 29 :
31494: LD_ADDR_OWVAR 42
31498: PUSH
31499: LD_INT 4
31501: ST_TO_ADDR
31502: GO 31619
31504: LD_INT 29
31506: DOUBLE
31507: EQUAL
31508: IFTRUE 31512
31510: GO 31523
31512: POP
// bc_type := b_barracks ; 30 :
31513: LD_ADDR_OWVAR 42
31517: PUSH
31518: LD_INT 5
31520: ST_TO_ADDR
31521: GO 31619
31523: LD_INT 30
31525: DOUBLE
31526: EQUAL
31527: IFTRUE 31531
31529: GO 31542
31531: POP
// bc_type := b_solar_power ; 31 :
31532: LD_ADDR_OWVAR 42
31536: PUSH
31537: LD_INT 27
31539: ST_TO_ADDR
31540: GO 31619
31542: LD_INT 31
31544: DOUBLE
31545: EQUAL
31546: IFTRUE 31550
31548: GO 31561
31550: POP
// bc_type := b_oil_power ; 32 :
31551: LD_ADDR_OWVAR 42
31555: PUSH
31556: LD_INT 26
31558: ST_TO_ADDR
31559: GO 31619
31561: LD_INT 32
31563: DOUBLE
31564: EQUAL
31565: IFTRUE 31569
31567: GO 31580
31569: POP
// bc_type := b_siberite_power ; 33 :
31570: LD_ADDR_OWVAR 42
31574: PUSH
31575: LD_INT 28
31577: ST_TO_ADDR
31578: GO 31619
31580: LD_INT 33
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31599
31588: POP
// bc_type := b_oil_mine ; 34 :
31589: LD_ADDR_OWVAR 42
31593: PUSH
31594: LD_INT 29
31596: ST_TO_ADDR
31597: GO 31619
31599: LD_INT 34
31601: DOUBLE
31602: EQUAL
31603: IFTRUE 31607
31605: GO 31618
31607: POP
// bc_type := b_siberite_mine ; end ;
31608: LD_ADDR_OWVAR 42
31612: PUSH
31613: LD_INT 30
31615: ST_TO_ADDR
31616: GO 31619
31618: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31619: LD_ADDR_VAR 0 8
31623: PUSH
31624: LD_VAR 0 5
31628: PPUSH
31629: LD_VAR 0 6
31633: PPUSH
31634: LD_VAR 0 3
31638: PPUSH
31639: CALL_OW 47
31643: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31644: LD_OWVAR 42
31648: PUSH
31649: LD_INT 32
31651: PUSH
31652: LD_INT 33
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: IN
31659: IFFALSE 31675
// PlaceWeaponTurret ( b , weapon ) ;
31661: LD_VAR 0 8
31665: PPUSH
31666: LD_VAR 0 4
31670: PPUSH
31671: CALL_OW 431
// end ;
31675: LD_VAR 0 7
31679: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31680: LD_INT 0
31682: PPUSH
31683: PPUSH
31684: PPUSH
31685: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31686: LD_ADDR_VAR 0 4
31690: PUSH
31691: LD_INT 22
31693: PUSH
31694: LD_OWVAR 2
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: PUSH
31706: LD_INT 30
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 30
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: LIST
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PPUSH
31735: CALL_OW 69
31739: ST_TO_ADDR
// if not tmp then
31740: LD_VAR 0 4
31744: NOT
31745: IFFALSE 31749
// exit ;
31747: GO 31808
// for i in tmp do
31749: LD_ADDR_VAR 0 2
31753: PUSH
31754: LD_VAR 0 4
31758: PUSH
31759: FOR_IN
31760: IFFALSE 31806
// for j = 1 to 3 do
31762: LD_ADDR_VAR 0 3
31766: PUSH
31767: DOUBLE
31768: LD_INT 1
31770: DEC
31771: ST_TO_ADDR
31772: LD_INT 3
31774: PUSH
31775: FOR_TO
31776: IFFALSE 31802
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31778: LD_VAR 0 2
31782: PPUSH
31783: CALL_OW 274
31787: PPUSH
31788: LD_VAR 0 3
31792: PPUSH
31793: LD_INT 99999
31795: PPUSH
31796: CALL_OW 277
31800: GO 31775
31802: POP
31803: POP
31804: GO 31759
31806: POP
31807: POP
// end ;
31808: LD_VAR 0 1
31812: RET
// export function hHackSetLevel10 ; var i , j ; begin
31813: LD_INT 0
31815: PPUSH
31816: PPUSH
31817: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31818: LD_ADDR_VAR 0 2
31822: PUSH
31823: LD_INT 21
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PPUSH
31833: CALL_OW 69
31837: PUSH
31838: FOR_IN
31839: IFFALSE 31891
// if IsSelected ( i ) then
31841: LD_VAR 0 2
31845: PPUSH
31846: CALL_OW 306
31850: IFFALSE 31889
// begin for j := 1 to 4 do
31852: LD_ADDR_VAR 0 3
31856: PUSH
31857: DOUBLE
31858: LD_INT 1
31860: DEC
31861: ST_TO_ADDR
31862: LD_INT 4
31864: PUSH
31865: FOR_TO
31866: IFFALSE 31887
// SetSkill ( i , j , 10 ) ;
31868: LD_VAR 0 2
31872: PPUSH
31873: LD_VAR 0 3
31877: PPUSH
31878: LD_INT 10
31880: PPUSH
31881: CALL_OW 237
31885: GO 31865
31887: POP
31888: POP
// end ;
31889: GO 31838
31891: POP
31892: POP
// end ;
31893: LD_VAR 0 1
31897: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31898: LD_INT 0
31900: PPUSH
31901: PPUSH
31902: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31903: LD_ADDR_VAR 0 2
31907: PUSH
31908: LD_INT 22
31910: PUSH
31911: LD_OWVAR 2
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 21
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PPUSH
31934: CALL_OW 69
31938: PUSH
31939: FOR_IN
31940: IFFALSE 31981
// begin for j := 1 to 4 do
31942: LD_ADDR_VAR 0 3
31946: PUSH
31947: DOUBLE
31948: LD_INT 1
31950: DEC
31951: ST_TO_ADDR
31952: LD_INT 4
31954: PUSH
31955: FOR_TO
31956: IFFALSE 31977
// SetSkill ( i , j , 10 ) ;
31958: LD_VAR 0 2
31962: PPUSH
31963: LD_VAR 0 3
31967: PPUSH
31968: LD_INT 10
31970: PPUSH
31971: CALL_OW 237
31975: GO 31955
31977: POP
31978: POP
// end ;
31979: GO 31939
31981: POP
31982: POP
// end ;
31983: LD_VAR 0 1
31987: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31988: LD_INT 0
31990: PPUSH
// uc_side := your_side ;
31991: LD_ADDR_OWVAR 20
31995: PUSH
31996: LD_OWVAR 2
32000: ST_TO_ADDR
// uc_nation := nation ;
32001: LD_ADDR_OWVAR 21
32005: PUSH
32006: LD_VAR 0 1
32010: ST_TO_ADDR
// InitHc ;
32011: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32015: LD_INT 0
32017: PPUSH
32018: LD_VAR 0 2
32022: PPUSH
32023: LD_VAR 0 3
32027: PPUSH
32028: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32032: LD_VAR 0 4
32036: PPUSH
32037: LD_VAR 0 5
32041: PPUSH
32042: CALL_OW 428
32046: PUSH
32047: LD_INT 0
32049: EQUAL
32050: IFFALSE 32074
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32052: CALL_OW 44
32056: PPUSH
32057: LD_VAR 0 4
32061: PPUSH
32062: LD_VAR 0 5
32066: PPUSH
32067: LD_INT 1
32069: PPUSH
32070: CALL_OW 48
// end ;
32074: LD_VAR 0 6
32078: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32079: LD_INT 0
32081: PPUSH
32082: PPUSH
// uc_side := your_side ;
32083: LD_ADDR_OWVAR 20
32087: PUSH
32088: LD_OWVAR 2
32092: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32093: LD_VAR 0 1
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: LD_INT 4
32109: PUSH
32110: LD_INT 5
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: IN
32120: IFFALSE 32132
// uc_nation := nation_american else
32122: LD_ADDR_OWVAR 21
32126: PUSH
32127: LD_INT 1
32129: ST_TO_ADDR
32130: GO 32175
// if chassis in [ 11 , 12 , 13 , 14 ] then
32132: LD_VAR 0 1
32136: PUSH
32137: LD_INT 11
32139: PUSH
32140: LD_INT 12
32142: PUSH
32143: LD_INT 13
32145: PUSH
32146: LD_INT 14
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: IN
32155: IFFALSE 32167
// uc_nation := nation_arabian else
32157: LD_ADDR_OWVAR 21
32161: PUSH
32162: LD_INT 2
32164: ST_TO_ADDR
32165: GO 32175
// uc_nation := nation_russian ;
32167: LD_ADDR_OWVAR 21
32171: PUSH
32172: LD_INT 3
32174: ST_TO_ADDR
// vc_chassis := chassis ;
32175: LD_ADDR_OWVAR 37
32179: PUSH
32180: LD_VAR 0 1
32184: ST_TO_ADDR
// vc_engine := engine ;
32185: LD_ADDR_OWVAR 39
32189: PUSH
32190: LD_VAR 0 2
32194: ST_TO_ADDR
// vc_control := control ;
32195: LD_ADDR_OWVAR 38
32199: PUSH
32200: LD_VAR 0 3
32204: ST_TO_ADDR
// vc_weapon := weapon ;
32205: LD_ADDR_OWVAR 40
32209: PUSH
32210: LD_VAR 0 4
32214: ST_TO_ADDR
// un := CreateVehicle ;
32215: LD_ADDR_VAR 0 8
32219: PUSH
32220: CALL_OW 45
32224: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32225: LD_VAR 0 8
32229: PPUSH
32230: LD_INT 0
32232: PPUSH
32233: LD_INT 5
32235: PPUSH
32236: CALL_OW 12
32240: PPUSH
32241: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 5
32254: PPUSH
32255: LD_VAR 0 6
32259: PPUSH
32260: LD_INT 1
32262: PPUSH
32263: CALL_OW 48
// end ;
32267: LD_VAR 0 7
32271: RET
// export hInvincible ; every 1 do
32272: GO 32274
32274: DISABLE
// hInvincible := [ ] ;
32275: LD_ADDR_EXP 111
32279: PUSH
32280: EMPTY
32281: ST_TO_ADDR
32282: END
// every 10 do var i ;
32283: GO 32285
32285: DISABLE
32286: LD_INT 0
32288: PPUSH
// begin enable ;
32289: ENABLE
// if not hInvincible then
32290: LD_EXP 111
32294: NOT
32295: IFFALSE 32299
// exit ;
32297: GO 32343
// for i in hInvincible do
32299: LD_ADDR_VAR 0 1
32303: PUSH
32304: LD_EXP 111
32308: PUSH
32309: FOR_IN
32310: IFFALSE 32341
// if GetLives ( i ) < 1000 then
32312: LD_VAR 0 1
32316: PPUSH
32317: CALL_OW 256
32321: PUSH
32322: LD_INT 1000
32324: LESS
32325: IFFALSE 32339
// SetLives ( i , 1000 ) ;
32327: LD_VAR 0 1
32331: PPUSH
32332: LD_INT 1000
32334: PPUSH
32335: CALL_OW 234
32339: GO 32309
32341: POP
32342: POP
// end ;
32343: PPOPN 1
32345: END
// export function hHackInvincible ; var i ; begin
32346: LD_INT 0
32348: PPUSH
32349: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32350: LD_ADDR_VAR 0 2
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: LD_INT 21
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 21
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: LIST
32382: PPUSH
32383: CALL_OW 69
32387: PUSH
32388: FOR_IN
32389: IFFALSE 32450
// if IsSelected ( i ) then
32391: LD_VAR 0 2
32395: PPUSH
32396: CALL_OW 306
32400: IFFALSE 32448
// begin if i in hInvincible then
32402: LD_VAR 0 2
32406: PUSH
32407: LD_EXP 111
32411: IN
32412: IFFALSE 32432
// hInvincible := hInvincible diff i else
32414: LD_ADDR_EXP 111
32418: PUSH
32419: LD_EXP 111
32423: PUSH
32424: LD_VAR 0 2
32428: DIFF
32429: ST_TO_ADDR
32430: GO 32448
// hInvincible := hInvincible union i ;
32432: LD_ADDR_EXP 111
32436: PUSH
32437: LD_EXP 111
32441: PUSH
32442: LD_VAR 0 2
32446: UNION
32447: ST_TO_ADDR
// end ;
32448: GO 32388
32450: POP
32451: POP
// end ;
32452: LD_VAR 0 1
32456: RET
// export function hHackInvisible ; var i , j ; begin
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
32461: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32462: LD_ADDR_VAR 0 2
32466: PUSH
32467: LD_INT 21
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PPUSH
32477: CALL_OW 69
32481: PUSH
32482: FOR_IN
32483: IFFALSE 32507
// if IsSelected ( i ) then
32485: LD_VAR 0 2
32489: PPUSH
32490: CALL_OW 306
32494: IFFALSE 32505
// ComForceInvisible ( i ) ;
32496: LD_VAR 0 2
32500: PPUSH
32501: CALL_OW 496
32505: GO 32482
32507: POP
32508: POP
// end ;
32509: LD_VAR 0 1
32513: RET
// export function hHackChangeYourSide ; begin
32514: LD_INT 0
32516: PPUSH
// if your_side = 8 then
32517: LD_OWVAR 2
32521: PUSH
32522: LD_INT 8
32524: EQUAL
32525: IFFALSE 32537
// your_side := 0 else
32527: LD_ADDR_OWVAR 2
32531: PUSH
32532: LD_INT 0
32534: ST_TO_ADDR
32535: GO 32551
// your_side := your_side + 1 ;
32537: LD_ADDR_OWVAR 2
32541: PUSH
32542: LD_OWVAR 2
32546: PUSH
32547: LD_INT 1
32549: PLUS
32550: ST_TO_ADDR
// end ;
32551: LD_VAR 0 1
32555: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32556: LD_INT 0
32558: PPUSH
32559: PPUSH
32560: PPUSH
// for i in all_units do
32561: LD_ADDR_VAR 0 2
32565: PUSH
32566: LD_OWVAR 3
32570: PUSH
32571: FOR_IN
32572: IFFALSE 32650
// if IsSelected ( i ) then
32574: LD_VAR 0 2
32578: PPUSH
32579: CALL_OW 306
32583: IFFALSE 32648
// begin j := GetSide ( i ) ;
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: LD_VAR 0 2
32594: PPUSH
32595: CALL_OW 255
32599: ST_TO_ADDR
// if j = 8 then
32600: LD_VAR 0 3
32604: PUSH
32605: LD_INT 8
32607: EQUAL
32608: IFFALSE 32620
// j := 0 else
32610: LD_ADDR_VAR 0 3
32614: PUSH
32615: LD_INT 0
32617: ST_TO_ADDR
32618: GO 32634
// j := j + 1 ;
32620: LD_ADDR_VAR 0 3
32624: PUSH
32625: LD_VAR 0 3
32629: PUSH
32630: LD_INT 1
32632: PLUS
32633: ST_TO_ADDR
// SetSide ( i , j ) ;
32634: LD_VAR 0 2
32638: PPUSH
32639: LD_VAR 0 3
32643: PPUSH
32644: CALL_OW 235
// end ;
32648: GO 32571
32650: POP
32651: POP
// end ;
32652: LD_VAR 0 1
32656: RET
// export function hHackFog ; begin
32657: LD_INT 0
32659: PPUSH
// FogOff ( true ) ;
32660: LD_INT 1
32662: PPUSH
32663: CALL_OW 344
// end ;
32667: LD_VAR 0 1
32671: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32672: LD_INT 0
32674: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32675: LD_VAR 0 1
32679: PPUSH
32680: LD_VAR 0 2
32684: PPUSH
32685: LD_VAR 0 3
32689: PPUSH
32690: LD_INT 1
32692: PPUSH
32693: LD_INT 1
32695: PPUSH
32696: CALL_OW 483
// CenterOnXY ( x , y ) ;
32700: LD_VAR 0 2
32704: PPUSH
32705: LD_VAR 0 3
32709: PPUSH
32710: CALL_OW 84
// end ;
32714: LD_VAR 0 4
32718: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32719: LD_INT 0
32721: PPUSH
32722: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32723: LD_VAR 0 1
32727: NOT
32728: IFTRUE 32747
32730: PUSH
32731: LD_VAR 0 2
32735: PPUSH
32736: LD_VAR 0 3
32740: PPUSH
32741: CALL_OW 488
32745: NOT
32746: OR
32747: IFTRUE 32782
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 266
32759: PUSH
32760: LD_INT 3
32762: NONEQUAL
32763: IFFALSE 32781
32765: PUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL_OW 247
32775: PUSH
32776: LD_INT 1
32778: EQUAL
32779: NOT
32780: AND
32781: OR
32782: IFFALSE 32786
// exit ;
32784: GO 33068
// if GetType ( factory ) = unit_human then
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 247
32795: PUSH
32796: LD_INT 1
32798: EQUAL
32799: IFFALSE 32816
// factory := IsInUnit ( factory ) ;
32801: LD_ADDR_VAR 0 1
32805: PUSH
32806: LD_VAR 0 1
32810: PPUSH
32811: CALL_OW 310
32815: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 266
32825: PUSH
32826: LD_INT 3
32828: NONEQUAL
32829: IFFALSE 32833
// exit ;
32831: GO 33068
// for i := 1 to Count ( factoryWaypoints ) do
32833: LD_ADDR_VAR 0 5
32837: PUSH
32838: DOUBLE
32839: LD_INT 1
32841: DEC
32842: ST_TO_ADDR
32843: LD_EXP 112
32847: PPUSH
32848: CALL 43035 0 1
32852: PUSH
32853: FOR_TO
32854: IFFALSE 33016
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
32856: LD_VAR 0 2
32860: PPUSH
32861: LD_VAR 0 3
32865: PPUSH
32866: CALL_OW 428
32870: PUSH
32871: LD_EXP 112
32875: PUSH
32876: LD_VAR 0 5
32880: ARRAY
32881: PUSH
32882: LD_INT 2
32884: ARRAY
32885: EQUAL
32886: IFFALSE 32918
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32888: LD_ADDR_EXP 112
32892: PUSH
32893: LD_EXP 112
32897: PPUSH
32898: LD_VAR 0 5
32902: PPUSH
32903: CALL_OW 3
32907: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32908: CALL 33073 0 0
// exit ;
32912: POP
32913: POP
32914: GO 33068
// end else
32916: GO 33014
// if factory = factoryWaypoints [ i ] [ 2 ] then
32918: LD_VAR 0 1
32922: PUSH
32923: LD_EXP 112
32927: PUSH
32928: LD_VAR 0 5
32932: ARRAY
32933: PUSH
32934: LD_INT 2
32936: ARRAY
32937: EQUAL
32938: IFFALSE 33014
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
32940: LD_ADDR_EXP 112
32944: PUSH
32945: LD_EXP 112
32949: PPUSH
32950: LD_VAR 0 5
32954: PPUSH
32955: CALL_OW 3
32959: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
32960: LD_ADDR_EXP 112
32964: PUSH
32965: LD_EXP 112
32969: PPUSH
32970: LD_VAR 0 1
32974: PPUSH
32975: CALL_OW 255
32979: PUSH
32980: LD_VAR 0 1
32984: PUSH
32985: LD_VAR 0 2
32989: PUSH
32990: LD_VAR 0 3
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: PPUSH
33001: CALL 79011 0 2
33005: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33006: CALL 33073 0 0
// exit ;
33010: POP
33011: POP
33012: GO 33068
// end ; end ;
33014: GO 32853
33016: POP
33017: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
33018: LD_ADDR_EXP 112
33022: PUSH
33023: LD_EXP 112
33027: PPUSH
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 255
33037: PUSH
33038: LD_VAR 0 1
33042: PUSH
33043: LD_VAR 0 2
33047: PUSH
33048: LD_VAR 0 3
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: PPUSH
33059: CALL 79011 0 2
33063: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33064: CALL 33073 0 0
// end ;
33068: LD_VAR 0 4
33072: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
33077: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33078: LD_STRING resetFactoryWaypoint();
33080: PPUSH
33081: CALL_OW 559
// if factoryWaypoints then
33085: LD_EXP 112
33089: IFFALSE 33210
// begin list := factoryWaypoints ;
33091: LD_ADDR_VAR 0 3
33095: PUSH
33096: LD_EXP 112
33100: ST_TO_ADDR
// for i := 1 to list do
33101: LD_ADDR_VAR 0 2
33105: PUSH
33106: DOUBLE
33107: LD_INT 1
33109: DEC
33110: ST_TO_ADDR
33111: LD_VAR 0 3
33115: PUSH
33116: FOR_TO
33117: IFFALSE 33208
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33119: LD_STRING setFactoryWaypointXY(
33121: PUSH
33122: LD_VAR 0 3
33126: PUSH
33127: LD_VAR 0 2
33131: ARRAY
33132: PUSH
33133: LD_INT 1
33135: ARRAY
33136: STR
33137: PUSH
33138: LD_STRING ,
33140: STR
33141: PUSH
33142: LD_VAR 0 3
33146: PUSH
33147: LD_VAR 0 2
33151: ARRAY
33152: PUSH
33153: LD_INT 2
33155: ARRAY
33156: STR
33157: PUSH
33158: LD_STRING ,
33160: STR
33161: PUSH
33162: LD_VAR 0 3
33166: PUSH
33167: LD_VAR 0 2
33171: ARRAY
33172: PUSH
33173: LD_INT 3
33175: ARRAY
33176: STR
33177: PUSH
33178: LD_STRING ,
33180: STR
33181: PUSH
33182: LD_VAR 0 3
33186: PUSH
33187: LD_VAR 0 2
33191: ARRAY
33192: PUSH
33193: LD_INT 4
33195: ARRAY
33196: STR
33197: PUSH
33198: LD_STRING )
33200: STR
33201: PPUSH
33202: CALL_OW 559
33206: GO 33116
33208: POP
33209: POP
// end ; end ;
33210: LD_VAR 0 1
33214: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33215: LD_INT 0
33217: PPUSH
// if HexInfo ( x , y ) = warehouse then
33218: LD_VAR 0 2
33222: PPUSH
33223: LD_VAR 0 3
33227: PPUSH
33228: CALL_OW 428
33232: PUSH
33233: LD_VAR 0 1
33237: EQUAL
33238: IFFALSE 33265
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33240: LD_ADDR_EXP 114
33244: PUSH
33245: LD_EXP 114
33249: PPUSH
33250: LD_VAR 0 1
33254: PPUSH
33255: LD_INT 0
33257: PPUSH
33258: CALL_OW 1
33262: ST_TO_ADDR
33263: GO 33316
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33265: LD_ADDR_EXP 114
33269: PUSH
33270: LD_EXP 114
33274: PPUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: CALL_OW 255
33289: PUSH
33290: LD_VAR 0 1
33294: PUSH
33295: LD_VAR 0 2
33299: PUSH
33300: LD_VAR 0 3
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: PPUSH
33311: CALL_OW 1
33315: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33316: CALL 33325 0 0
// end ;
33320: LD_VAR 0 4
33324: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33325: LD_INT 0
33327: PPUSH
33328: PPUSH
33329: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33330: LD_STRING resetWarehouseGatheringPoints();
33332: PPUSH
33333: CALL_OW 559
// if warehouseGatheringPoints then
33337: LD_EXP 114
33341: IFFALSE 33467
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33343: LD_ADDR_VAR 0 3
33347: PUSH
33348: LD_EXP 114
33352: PPUSH
33353: CALL 82945 0 1
33357: ST_TO_ADDR
// for i := 1 to list do
33358: LD_ADDR_VAR 0 2
33362: PUSH
33363: DOUBLE
33364: LD_INT 1
33366: DEC
33367: ST_TO_ADDR
33368: LD_VAR 0 3
33372: PUSH
33373: FOR_TO
33374: IFFALSE 33465
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33376: LD_STRING setWarehouseGatheringPointXY(
33378: PUSH
33379: LD_VAR 0 3
33383: PUSH
33384: LD_VAR 0 2
33388: ARRAY
33389: PUSH
33390: LD_INT 1
33392: ARRAY
33393: STR
33394: PUSH
33395: LD_STRING ,
33397: STR
33398: PUSH
33399: LD_VAR 0 3
33403: PUSH
33404: LD_VAR 0 2
33408: ARRAY
33409: PUSH
33410: LD_INT 2
33412: ARRAY
33413: STR
33414: PUSH
33415: LD_STRING ,
33417: STR
33418: PUSH
33419: LD_VAR 0 3
33423: PUSH
33424: LD_VAR 0 2
33428: ARRAY
33429: PUSH
33430: LD_INT 3
33432: ARRAY
33433: STR
33434: PUSH
33435: LD_STRING ,
33437: STR
33438: PUSH
33439: LD_VAR 0 3
33443: PUSH
33444: LD_VAR 0 2
33448: ARRAY
33449: PUSH
33450: LD_INT 4
33452: ARRAY
33453: STR
33454: PUSH
33455: LD_STRING )
33457: STR
33458: PPUSH
33459: CALL_OW 559
33463: GO 33373
33465: POP
33466: POP
// end ; end ;
33467: LD_VAR 0 1
33471: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33472: LD_EXP 114
33476: IFFALSE 34171
33478: GO 33480
33480: DISABLE
33481: LD_INT 0
33483: PPUSH
33484: PPUSH
33485: PPUSH
33486: PPUSH
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
// begin enable ;
33492: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33493: LD_ADDR_VAR 0 3
33497: PUSH
33498: LD_EXP 114
33502: PPUSH
33503: CALL 82945 0 1
33507: ST_TO_ADDR
// if not list then
33508: LD_VAR 0 3
33512: NOT
33513: IFFALSE 33517
// exit ;
33515: GO 34171
// for i := 1 to list do
33517: LD_ADDR_VAR 0 1
33521: PUSH
33522: DOUBLE
33523: LD_INT 1
33525: DEC
33526: ST_TO_ADDR
33527: LD_VAR 0 3
33531: PUSH
33532: FOR_TO
33533: IFFALSE 34169
// begin depot := list [ i ] [ 2 ] ;
33535: LD_ADDR_VAR 0 8
33539: PUSH
33540: LD_VAR 0 3
33544: PUSH
33545: LD_VAR 0 1
33549: ARRAY
33550: PUSH
33551: LD_INT 2
33553: ARRAY
33554: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33555: LD_ADDR_VAR 0 5
33559: PUSH
33560: LD_VAR 0 3
33564: PUSH
33565: LD_VAR 0 1
33569: ARRAY
33570: PUSH
33571: LD_INT 1
33573: ARRAY
33574: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33575: LD_VAR 0 8
33579: PPUSH
33580: CALL_OW 301
33584: IFTRUE 33603
33586: PUSH
33587: LD_VAR 0 5
33591: PUSH
33592: LD_VAR 0 8
33596: PPUSH
33597: CALL_OW 255
33601: NONEQUAL
33602: OR
33603: IFFALSE 33632
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33605: LD_ADDR_EXP 114
33609: PUSH
33610: LD_EXP 114
33614: PPUSH
33615: LD_VAR 0 8
33619: PPUSH
33620: LD_INT 0
33622: PPUSH
33623: CALL_OW 1
33627: ST_TO_ADDR
// exit ;
33628: POP
33629: POP
33630: GO 34171
// end ; x := list [ i ] [ 3 ] ;
33632: LD_ADDR_VAR 0 6
33636: PUSH
33637: LD_VAR 0 3
33641: PUSH
33642: LD_VAR 0 1
33646: ARRAY
33647: PUSH
33648: LD_INT 3
33650: ARRAY
33651: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33652: LD_ADDR_VAR 0 7
33656: PUSH
33657: LD_VAR 0 3
33661: PUSH
33662: LD_VAR 0 1
33666: ARRAY
33667: PUSH
33668: LD_INT 4
33670: ARRAY
33671: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33672: LD_ADDR_VAR 0 9
33676: PUSH
33677: LD_VAR 0 6
33681: PPUSH
33682: LD_VAR 0 7
33686: PPUSH
33687: LD_INT 16
33689: PPUSH
33690: CALL 81519 0 3
33694: ST_TO_ADDR
// if not cratesNearbyPoint then
33695: LD_VAR 0 9
33699: NOT
33700: IFFALSE 33706
// exit ;
33702: POP
33703: POP
33704: GO 34171
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33706: LD_ADDR_VAR 0 4
33710: PUSH
33711: LD_INT 22
33713: PUSH
33714: LD_VAR 0 5
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 3
33725: PUSH
33726: LD_INT 60
33728: PUSH
33729: EMPTY
33730: LIST
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 91
33738: PUSH
33739: LD_VAR 0 8
33743: PUSH
33744: LD_INT 6
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 2
33754: PUSH
33755: LD_INT 25
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 25
33767: PUSH
33768: LD_INT 16
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: PPUSH
33786: CALL_OW 69
33790: PUSH
33791: LD_VAR 0 8
33795: PPUSH
33796: CALL_OW 313
33800: PPUSH
33801: LD_INT 3
33803: PUSH
33804: LD_INT 60
33806: PUSH
33807: EMPTY
33808: LIST
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 25
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 25
33829: PUSH
33830: LD_INT 16
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PPUSH
33846: CALL_OW 72
33850: UNION
33851: ST_TO_ADDR
// if tmp then
33852: LD_VAR 0 4
33856: IFFALSE 33936
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33858: LD_ADDR_VAR 0 4
33862: PUSH
33863: LD_VAR 0 4
33867: PPUSH
33868: LD_INT 3
33870: PPUSH
33871: CALL 79326 0 2
33875: ST_TO_ADDR
// for j in tmp do
33876: LD_ADDR_VAR 0 2
33880: PUSH
33881: LD_VAR 0 4
33885: PUSH
33886: FOR_IN
33887: IFFALSE 33930
// begin if IsInUnit ( j ) then
33889: LD_VAR 0 2
33893: PPUSH
33894: CALL_OW 310
33898: IFFALSE 33909
// ComExit ( j ) ;
33900: LD_VAR 0 2
33904: PPUSH
33905: CALL 79409 0 1
// AddComCollect ( j , x , y ) ;
33909: LD_VAR 0 2
33913: PPUSH
33914: LD_VAR 0 6
33918: PPUSH
33919: LD_VAR 0 7
33923: PPUSH
33924: CALL_OW 177
// end ;
33928: GO 33886
33930: POP
33931: POP
// exit ;
33932: POP
33933: POP
33934: GO 34171
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33936: LD_ADDR_VAR 0 4
33940: PUSH
33941: LD_INT 22
33943: PUSH
33944: LD_VAR 0 5
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 91
33955: PUSH
33956: LD_VAR 0 8
33960: PUSH
33961: LD_INT 8
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: LD_INT 34
33974: PUSH
33975: LD_INT 12
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 34
33984: PUSH
33985: LD_INT 51
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 34
33994: PUSH
33995: LD_INT 32
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 34
34004: PUSH
34005: LD_INT 89
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: PPUSH
34024: CALL_OW 69
34028: ST_TO_ADDR
// if tmp then
34029: LD_VAR 0 4
34033: IFFALSE 34167
// begin for j in tmp do
34035: LD_ADDR_VAR 0 2
34039: PUSH
34040: LD_VAR 0 4
34044: PUSH
34045: FOR_IN
34046: IFFALSE 34165
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34048: LD_VAR 0 2
34052: PPUSH
34053: CALL_OW 262
34057: PUSH
34058: LD_INT 3
34060: EQUAL
34061: IFTRUE 34078
34063: PUSH
34064: LD_VAR 0 2
34068: PPUSH
34069: CALL_OW 261
34073: PUSH
34074: LD_INT 20
34076: GREATER
34077: OR
34078: IFFALSE 34092
34080: PUSH
34081: LD_VAR 0 2
34085: PPUSH
34086: CALL_OW 314
34090: NOT
34091: AND
34092: IFFALSE 34122
34094: PUSH
34095: LD_VAR 0 2
34099: PPUSH
34100: CALL_OW 263
34104: PUSH
34105: LD_INT 1
34107: NONEQUAL
34108: IFTRUE 34121
34110: PUSH
34111: LD_VAR 0 2
34115: PPUSH
34116: CALL_OW 311
34120: OR
34121: AND
34122: IFFALSE 34163
// begin ComCollect ( j , x , y ) ;
34124: LD_VAR 0 2
34128: PPUSH
34129: LD_VAR 0 6
34133: PPUSH
34134: LD_VAR 0 7
34138: PPUSH
34139: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34143: LD_VAR 0 2
34147: PPUSH
34148: LD_VAR 0 8
34152: PPUSH
34153: CALL_OW 172
// exit ;
34157: POP
34158: POP
34159: POP
34160: POP
34161: GO 34171
// end ;
34163: GO 34045
34165: POP
34166: POP
// end ; end ;
34167: GO 33532
34169: POP
34170: POP
// end ; end_of_file
34171: PPOPN 9
34173: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34174: LD_VAR 0 1
34178: PUSH
34179: LD_INT 200
34181: DOUBLE
34182: GREATEREQUAL
34183: IFFALSE 34191
34185: LD_INT 299
34187: DOUBLE
34188: LESSEQUAL
34189: IFTRUE 34193
34191: GO 34225
34193: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34194: LD_VAR 0 1
34198: PPUSH
34199: LD_VAR 0 2
34203: PPUSH
34204: LD_VAR 0 3
34208: PPUSH
34209: LD_VAR 0 4
34213: PPUSH
34214: LD_VAR 0 5
34218: PPUSH
34219: CALL 35087 0 5
34223: GO 34302
34225: LD_INT 300
34227: DOUBLE
34228: GREATEREQUAL
34229: IFFALSE 34237
34231: LD_INT 399
34233: DOUBLE
34234: LESSEQUAL
34235: IFTRUE 34239
34237: GO 34301
34239: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
34240: LD_VAR 0 1
34244: PPUSH
34245: LD_VAR 0 2
34249: PPUSH
34250: LD_VAR 0 3
34254: PPUSH
34255: LD_VAR 0 4
34259: PPUSH
34260: LD_VAR 0 5
34264: PPUSH
34265: LD_VAR 0 6
34269: PPUSH
34270: LD_VAR 0 7
34274: PPUSH
34275: LD_VAR 0 8
34279: PPUSH
34280: LD_VAR 0 9
34284: PPUSH
34285: LD_VAR 0 10
34289: PPUSH
34290: LD_VAR 0 11
34294: PPUSH
34295: CALL 30727 0 11
34299: GO 34302
34301: POP
// end ;
34302: PPOPN 11
34304: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
34305: LD_VAR 0 1
34309: PPUSH
34310: LD_VAR 0 2
34314: PPUSH
34315: LD_VAR 0 3
34319: PPUSH
34320: LD_VAR 0 4
34324: PPUSH
34325: LD_VAR 0 5
34329: PPUSH
34330: CALL 34387 0 5
// end ; end_of_file
34334: PPOPN 5
34336: END
// export function SOS_UnitDestroyed ( un ) ; begin
34337: LD_INT 0
34339: PPUSH
// ComRadiation ( un ) ;
34340: LD_VAR 0 1
34344: PPUSH
34345: CALL 35507 0 1
// end ;
34349: LD_VAR 0 2
34353: RET
// export function SOS_UnitKamikazed ( un ) ; begin
34354: LD_INT 0
34356: PPUSH
// ComRadiation ( un ) ;
34357: LD_VAR 0 1
34361: PPUSH
34362: CALL 35507 0 1
// end ;
34366: LD_VAR 0 2
34370: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34371: LD_INT 0
34373: PPUSH
// end ;
34374: LD_VAR 0 4
34378: RET
// export function SOS_Command ( cmd ) ; begin
34379: LD_INT 0
34381: PPUSH
// end ;
34382: LD_VAR 0 2
34386: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34387: LD_INT 0
34389: PPUSH
// end ;
34390: LD_VAR 0 6
34394: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
34395: LD_INT 0
34397: PPUSH
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
// if not vehicle or not factory then
34402: LD_VAR 0 1
34406: NOT
34407: IFTRUE 34416
34409: PUSH
34410: LD_VAR 0 2
34414: NOT
34415: OR
34416: IFFALSE 34420
// exit ;
34418: GO 35082
// weapon := GetWeapon ( vehicle ) ;
34420: LD_ADDR_VAR 0 7
34424: PUSH
34425: LD_VAR 0 1
34429: PPUSH
34430: CALL_OW 264
34434: ST_TO_ADDR
// if weapon = ar_miner then
34435: LD_VAR 0 7
34439: PUSH
34440: LD_INT 81
34442: EQUAL
34443: IFFALSE 34500
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
34445: LD_ADDR_EXP 123
34449: PUSH
34450: LD_EXP 123
34454: PPUSH
34455: LD_EXP 123
34459: PUSH
34460: LD_INT 1
34462: PLUS
34463: PPUSH
34464: LD_VAR 0 1
34468: PPUSH
34469: CALL_OW 1
34473: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34474: LD_ADDR_EXP 124
34478: PUSH
34479: LD_EXP 124
34483: PPUSH
34484: LD_EXP 124
34488: PUSH
34489: LD_INT 1
34491: PLUS
34492: PPUSH
34493: EMPTY
34494: PPUSH
34495: CALL_OW 1
34499: ST_TO_ADDR
// end ; if not factoryWaypoints then
34500: LD_EXP 112
34504: NOT
34505: IFFALSE 34509
// exit ;
34507: GO 35082
// for i := 1 to Count ( factoryWaypoints ) do
34509: LD_ADDR_VAR 0 4
34513: PUSH
34514: DOUBLE
34515: LD_INT 1
34517: DEC
34518: ST_TO_ADDR
34519: LD_EXP 112
34523: PPUSH
34524: CALL 43035 0 1
34528: PUSH
34529: FOR_TO
34530: IFFALSE 35080
// if factoryWaypoints [ i ] [ 2 ] = factory then
34532: LD_EXP 112
34536: PUSH
34537: LD_VAR 0 4
34541: ARRAY
34542: PUSH
34543: LD_INT 2
34545: ARRAY
34546: PUSH
34547: LD_VAR 0 2
34551: EQUAL
34552: IFFALSE 35078
// begin if GetControl ( vehicle ) = control_manual then
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 263
34563: PUSH
34564: LD_INT 1
34566: EQUAL
34567: IFFALSE 34931
// begin driver := IsDrivenBy ( vehicle ) ;
34569: LD_ADDR_VAR 0 5
34573: PUSH
34574: LD_VAR 0 1
34578: PPUSH
34579: CALL_OW 311
34583: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
34584: LD_VAR 0 5
34588: PUSH
34589: LD_EXP 113
34593: IN
34594: IFTRUE 34608
34596: PUSH
34597: LD_VAR 0 1
34601: PUSH
34602: LD_EXP 113
34606: IN
34607: OR
34608: IFFALSE 34614
// exit ;
34610: POP
34611: POP
34612: GO 35082
// if not HasTask ( driver ) then
34614: LD_VAR 0 5
34618: PPUSH
34619: CALL_OW 314
34623: NOT
34624: IFFALSE 34929
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
34626: LD_ADDR_EXP 113
34630: PUSH
34631: LD_EXP 113
34635: PPUSH
34636: LD_VAR 0 5
34640: PPUSH
34641: CALL 79011 0 2
34645: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
34646: LD_ADDR_EXP 113
34650: PUSH
34651: LD_EXP 113
34655: PPUSH
34656: LD_VAR 0 1
34660: PPUSH
34661: CALL 79011 0 2
34665: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34666: LD_ADDR_VAR 0 6
34670: PUSH
34671: LD_EXP 112
34675: PUSH
34676: LD_VAR 0 4
34680: ARRAY
34681: PUSH
34682: LD_INT 3
34684: ARRAY
34685: PPUSH
34686: LD_EXP 112
34690: PUSH
34691: LD_VAR 0 4
34695: ARRAY
34696: PUSH
34697: LD_INT 4
34699: ARRAY
34700: PPUSH
34701: CALL_OW 428
34705: ST_TO_ADDR
// if hex then
34706: LD_VAR 0 6
34710: IFFALSE 34728
// ComMoveUnit ( driver , hex ) else
34712: LD_VAR 0 5
34716: PPUSH
34717: LD_VAR 0 6
34721: PPUSH
34722: CALL_OW 112
34726: GO 34812
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
34728: LD_VAR 0 1
34732: PPUSH
34733: LD_EXP 112
34737: PUSH
34738: LD_VAR 0 4
34742: ARRAY
34743: PUSH
34744: LD_INT 3
34746: ARRAY
34747: PPUSH
34748: LD_EXP 112
34752: PUSH
34753: LD_VAR 0 4
34757: ARRAY
34758: PUSH
34759: LD_INT 4
34761: ARRAY
34762: PPUSH
34763: CALL_OW 297
34767: PUSH
34768: LD_INT 0
34770: GREATER
34771: IFFALSE 34812
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34773: LD_VAR 0 5
34777: PPUSH
34778: LD_EXP 112
34782: PUSH
34783: LD_VAR 0 4
34787: ARRAY
34788: PUSH
34789: LD_INT 3
34791: ARRAY
34792: PPUSH
34793: LD_EXP 112
34797: PUSH
34798: LD_VAR 0 4
34802: ARRAY
34803: PUSH
34804: LD_INT 4
34806: ARRAY
34807: PPUSH
34808: CALL_OW 111
// AddComExitVehicle ( driver ) ;
34812: LD_VAR 0 5
34816: PPUSH
34817: CALL_OW 181
// if Multiplayer then
34821: LD_OWVAR 4
34825: IFFALSE 34874
// begin repeat wait ( 10 ) ;
34827: LD_INT 10
34829: PPUSH
34830: CALL_OW 67
// until not IsInUnit ( driver ) ;
34834: LD_VAR 0 5
34838: PPUSH
34839: CALL_OW 310
34843: NOT
34844: IFFALSE 34827
// if not HasTask ( driver ) then
34846: LD_VAR 0 5
34850: PPUSH
34851: CALL_OW 314
34855: NOT
34856: IFFALSE 34872
// ComEnterUnit ( driver , factory ) ;
34858: LD_VAR 0 5
34862: PPUSH
34863: LD_VAR 0 2
34867: PPUSH
34868: CALL_OW 120
// end else
34872: GO 34888
// AddComEnterUnit ( driver , factory ) ;
34874: LD_VAR 0 5
34878: PPUSH
34879: LD_VAR 0 2
34883: PPUSH
34884: CALL_OW 180
// wait ( 0 0$1 ) ;
34888: LD_INT 35
34890: PPUSH
34891: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
34895: LD_ADDR_EXP 113
34899: PUSH
34900: LD_EXP 113
34904: PUSH
34905: LD_VAR 0 5
34909: DIFF
34910: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
34911: LD_ADDR_EXP 113
34915: PUSH
34916: LD_EXP 113
34920: PUSH
34921: LD_VAR 0 1
34925: DIFF
34926: ST_TO_ADDR
// break ;
34927: GO 35080
// end ; end else
34929: GO 35078
// if GetControl ( vehicle ) = control_remote then
34931: LD_VAR 0 1
34935: PPUSH
34936: CALL_OW 263
34940: PUSH
34941: LD_INT 2
34943: EQUAL
34944: IFFALSE 35030
// begin wait ( 0 0$2 ) ;
34946: LD_INT 70
34948: PPUSH
34949: CALL_OW 67
// repeat wait ( 10 ) ;
34953: LD_INT 10
34955: PPUSH
34956: CALL_OW 67
// Connect ( vehicle ) ;
34960: LD_VAR 0 1
34964: PPUSH
34965: CALL 49313 0 1
// until IsControledBy ( vehicle ) ;
34969: LD_VAR 0 1
34973: PPUSH
34974: CALL_OW 312
34978: IFFALSE 34953
// wait ( 10 ) ;
34980: LD_INT 10
34982: PPUSH
34983: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
34987: LD_VAR 0 1
34991: PPUSH
34992: LD_EXP 112
34996: PUSH
34997: LD_VAR 0 4
35001: ARRAY
35002: PUSH
35003: LD_INT 3
35005: ARRAY
35006: PPUSH
35007: LD_EXP 112
35011: PUSH
35012: LD_VAR 0 4
35016: ARRAY
35017: PUSH
35018: LD_INT 4
35020: ARRAY
35021: PPUSH
35022: CALL_OW 111
// break ;
35026: GO 35080
// end else
35028: GO 35078
// begin wait ( 0 0$3 ) ;
35030: LD_INT 105
35032: PPUSH
35033: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35037: LD_VAR 0 1
35041: PPUSH
35042: LD_EXP 112
35046: PUSH
35047: LD_VAR 0 4
35051: ARRAY
35052: PUSH
35053: LD_INT 3
35055: ARRAY
35056: PPUSH
35057: LD_EXP 112
35061: PUSH
35062: LD_VAR 0 4
35066: ARRAY
35067: PUSH
35068: LD_INT 4
35070: ARRAY
35071: PPUSH
35072: CALL_OW 111
// break ;
35076: GO 35080
// end ; end ;
35078: GO 34529
35080: POP
35081: POP
// end ;
35082: LD_VAR 0 3
35086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35087: LD_INT 0
35089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35090: LD_VAR 0 1
35094: PUSH
35095: LD_INT 250
35097: EQUAL
35098: IFFALSE 35115
35100: PUSH
35101: LD_VAR 0 2
35105: PPUSH
35106: CALL_OW 264
35110: PUSH
35111: LD_INT 81
35113: EQUAL
35114: AND
35115: IFFALSE 35136
// MinerPlaceMine ( unit , x , y ) ;
35117: LD_VAR 0 2
35121: PPUSH
35122: LD_VAR 0 4
35126: PPUSH
35127: LD_VAR 0 5
35131: PPUSH
35132: CALL 38482 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35136: LD_VAR 0 1
35140: PUSH
35141: LD_INT 251
35143: EQUAL
35144: IFFALSE 35161
35146: PUSH
35147: LD_VAR 0 2
35151: PPUSH
35152: CALL_OW 264
35156: PUSH
35157: LD_INT 81
35159: EQUAL
35160: AND
35161: IFFALSE 35182
// MinerDetonateMine ( unit , x , y ) ;
35163: LD_VAR 0 2
35167: PPUSH
35168: LD_VAR 0 4
35172: PPUSH
35173: LD_VAR 0 5
35177: PPUSH
35178: CALL 38889 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35182: LD_VAR 0 1
35186: PUSH
35187: LD_INT 252
35189: EQUAL
35190: IFFALSE 35207
35192: PUSH
35193: LD_VAR 0 2
35197: PPUSH
35198: CALL_OW 264
35202: PUSH
35203: LD_INT 81
35205: EQUAL
35206: AND
35207: IFFALSE 35228
// MinerCreateMinefield ( unit , x , y ) ;
35209: LD_VAR 0 2
35213: PPUSH
35214: LD_VAR 0 4
35218: PPUSH
35219: LD_VAR 0 5
35223: PPUSH
35224: CALL 39121 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35228: LD_VAR 0 1
35232: PUSH
35233: LD_INT 253
35235: EQUAL
35236: IFFALSE 35253
35238: PUSH
35239: LD_VAR 0 2
35243: PPUSH
35244: CALL_OW 257
35248: PUSH
35249: LD_INT 5
35251: EQUAL
35252: AND
35253: IFFALSE 35274
// ComBinocular ( unit , x , y ) ;
35255: LD_VAR 0 2
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: LD_VAR 0 5
35269: PPUSH
35270: CALL 39496 0 3
// if selectedUnit then
35274: LD_VAR 0 3
35278: IFFALSE 35338
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35280: LD_VAR 0 1
35284: PUSH
35285: LD_INT 254
35287: EQUAL
35288: IFFALSE 35305
35290: PUSH
35291: LD_VAR 0 2
35295: PPUSH
35296: CALL_OW 264
35300: PUSH
35301: LD_INT 99
35303: EQUAL
35304: AND
35305: IFFALSE 35322
35307: PUSH
35308: LD_VAR 0 3
35312: PPUSH
35313: CALL_OW 263
35317: PUSH
35318: LD_INT 3
35320: EQUAL
35321: AND
35322: IFFALSE 35338
// HackDestroyVehicle ( unit , selectedUnit ) ;
35324: LD_VAR 0 2
35328: PPUSH
35329: LD_VAR 0 3
35333: PPUSH
35334: CALL 37672 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35338: LD_VAR 0 1
35342: PUSH
35343: LD_INT 255
35345: EQUAL
35346: IFFALSE 35370
35348: PUSH
35349: LD_VAR 0 2
35353: PPUSH
35354: CALL_OW 264
35358: PUSH
35359: LD_INT 14
35361: PUSH
35362: LD_INT 53
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: IN
35369: AND
35370: IFFALSE 35388
35372: PUSH
35373: LD_VAR 0 4
35377: PPUSH
35378: LD_VAR 0 5
35382: PPUSH
35383: CALL_OW 488
35387: AND
35388: IFFALSE 35412
// CutTreeXYR ( unit , x , y , 12 ) ;
35390: LD_VAR 0 2
35394: PPUSH
35395: LD_VAR 0 4
35399: PPUSH
35400: LD_VAR 0 5
35404: PPUSH
35405: LD_INT 12
35407: PPUSH
35408: CALL 35603 0 4
// if cmd = 256 then
35412: LD_VAR 0 1
35416: PUSH
35417: LD_INT 256
35419: EQUAL
35420: IFFALSE 35441
// SetFactoryWaypoint ( unit , x , y ) ;
35422: LD_VAR 0 2
35426: PPUSH
35427: LD_VAR 0 4
35431: PPUSH
35432: LD_VAR 0 5
35436: PPUSH
35437: CALL 32719 0 3
// if cmd = 257 then
35441: LD_VAR 0 1
35445: PUSH
35446: LD_INT 257
35448: EQUAL
35449: IFFALSE 35470
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35451: LD_VAR 0 2
35455: PPUSH
35456: LD_VAR 0 4
35460: PPUSH
35461: LD_VAR 0 5
35465: PPUSH
35466: CALL 33215 0 3
// if cmd = 258 then
35470: LD_VAR 0 1
35474: PUSH
35475: LD_INT 258
35477: EQUAL
35478: IFFALSE 35502
// BurnTreeXYR ( unit , x , y , 8 ) ;
35480: LD_VAR 0 2
35484: PPUSH
35485: LD_VAR 0 4
35489: PPUSH
35490: LD_VAR 0 5
35494: PPUSH
35495: LD_INT 8
35497: PPUSH
35498: CALL 36025 0 4
// end ;
35502: LD_VAR 0 6
35506: RET
// export function ComRadiation ( un ) ; var eff ; begin
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
35511: LD_VAR 0 1
35515: PPUSH
35516: CALL_OW 264
35520: PUSH
35521: LD_INT 91
35523: NONEQUAL
35524: IFFALSE 35528
// exit ;
35526: GO 35598
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35528: LD_INT 68
35530: PPUSH
35531: LD_VAR 0 1
35535: PPUSH
35536: CALL_OW 255
35540: PPUSH
35541: CALL_OW 321
35545: PUSH
35546: LD_INT 2
35548: EQUAL
35549: IFFALSE 35561
// eff := 50 else
35551: LD_ADDR_VAR 0 3
35555: PUSH
35556: LD_INT 50
35558: ST_TO_ADDR
35559: GO 35569
// eff := 25 ;
35561: LD_ADDR_VAR 0 3
35565: PUSH
35566: LD_INT 25
35568: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35569: LD_VAR 0 1
35573: PPUSH
35574: CALL_OW 250
35578: PPUSH
35579: LD_VAR 0 1
35583: PPUSH
35584: CALL_OW 251
35588: PPUSH
35589: LD_VAR 0 3
35593: PPUSH
35594: CALL_OW 495
// end ;
35598: LD_VAR 0 2
35602: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35603: LD_INT 0
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35614: LD_VAR 0 1
35618: PPUSH
35619: CALL_OW 302
35623: NOT
35624: IFTRUE 35643
35626: PUSH
35627: LD_VAR 0 2
35631: PPUSH
35632: LD_VAR 0 3
35636: PPUSH
35637: CALL_OW 488
35641: NOT
35642: OR
35643: IFTRUE 35652
35645: PUSH
35646: LD_VAR 0 4
35650: NOT
35651: OR
35652: IFFALSE 35656
// exit ;
35654: GO 36020
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
35656: LD_VAR 0 1
35660: PPUSH
35661: CALL_OW 437
35665: PPUSH
35666: CALL 43035 0 1
35670: PUSH
35671: LD_INT 10
35673: GREATER
35674: IFFALSE 35678
// exit ;
35676: GO 36020
// list := [ ] ;
35678: LD_ADDR_VAR 0 13
35682: PUSH
35683: EMPTY
35684: ST_TO_ADDR
// if x - r < 0 then
35685: LD_VAR 0 2
35689: PUSH
35690: LD_VAR 0 4
35694: MINUS
35695: PUSH
35696: LD_INT 0
35698: LESS
35699: IFFALSE 35711
// min_x := 0 else
35701: LD_ADDR_VAR 0 7
35705: PUSH
35706: LD_INT 0
35708: ST_TO_ADDR
35709: GO 35727
// min_x := x - r ;
35711: LD_ADDR_VAR 0 7
35715: PUSH
35716: LD_VAR 0 2
35720: PUSH
35721: LD_VAR 0 4
35725: MINUS
35726: ST_TO_ADDR
// if y - r < 0 then
35727: LD_VAR 0 3
35731: PUSH
35732: LD_VAR 0 4
35736: MINUS
35737: PUSH
35738: LD_INT 0
35740: LESS
35741: IFFALSE 35753
// min_y := 0 else
35743: LD_ADDR_VAR 0 8
35747: PUSH
35748: LD_INT 0
35750: ST_TO_ADDR
35751: GO 35769
// min_y := y - r ;
35753: LD_ADDR_VAR 0 8
35757: PUSH
35758: LD_VAR 0 3
35762: PUSH
35763: LD_VAR 0 4
35767: MINUS
35768: ST_TO_ADDR
// max_x := x + r ;
35769: LD_ADDR_VAR 0 9
35773: PUSH
35774: LD_VAR 0 2
35778: PUSH
35779: LD_VAR 0 4
35783: PLUS
35784: ST_TO_ADDR
// max_y := y + r ;
35785: LD_ADDR_VAR 0 10
35789: PUSH
35790: LD_VAR 0 3
35794: PUSH
35795: LD_VAR 0 4
35799: PLUS
35800: ST_TO_ADDR
// for _x = min_x to max_x do
35801: LD_ADDR_VAR 0 11
35805: PUSH
35806: DOUBLE
35807: LD_VAR 0 7
35811: DEC
35812: ST_TO_ADDR
35813: LD_VAR 0 9
35817: PUSH
35818: FOR_TO
35819: IFFALSE 35938
// for _y = min_y to max_y do
35821: LD_ADDR_VAR 0 12
35825: PUSH
35826: DOUBLE
35827: LD_VAR 0 8
35831: DEC
35832: ST_TO_ADDR
35833: LD_VAR 0 10
35837: PUSH
35838: FOR_TO
35839: IFFALSE 35934
// begin if not ValidHex ( _x , _y ) then
35841: LD_VAR 0 11
35845: PPUSH
35846: LD_VAR 0 12
35850: PPUSH
35851: CALL_OW 488
35855: NOT
35856: IFFALSE 35860
// continue ;
35858: GO 35838
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35860: LD_VAR 0 11
35864: PPUSH
35865: LD_VAR 0 12
35869: PPUSH
35870: CALL_OW 351
35874: IFFALSE 35892
35876: PUSH
35877: LD_VAR 0 11
35881: PPUSH
35882: LD_VAR 0 12
35886: PPUSH
35887: CALL_OW 554
35891: AND
35892: IFFALSE 35932
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35894: LD_ADDR_VAR 0 13
35898: PUSH
35899: LD_VAR 0 13
35903: PPUSH
35904: LD_VAR 0 13
35908: PUSH
35909: LD_INT 1
35911: PLUS
35912: PPUSH
35913: LD_VAR 0 11
35917: PUSH
35918: LD_VAR 0 12
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PPUSH
35927: CALL_OW 2
35931: ST_TO_ADDR
// end ;
35932: GO 35838
35934: POP
35935: POP
35936: GO 35818
35938: POP
35939: POP
// if not list then
35940: LD_VAR 0 13
35944: NOT
35945: IFFALSE 35949
// exit ;
35947: GO 36020
// for i in list do
35949: LD_ADDR_VAR 0 6
35953: PUSH
35954: LD_VAR 0 13
35958: PUSH
35959: FOR_IN
35960: IFFALSE 36018
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35962: LD_VAR 0 1
35966: PPUSH
35967: LD_STRING M
35969: PUSH
35970: LD_VAR 0 6
35974: PUSH
35975: LD_INT 1
35977: ARRAY
35978: PUSH
35979: LD_VAR 0 6
35983: PUSH
35984: LD_INT 2
35986: ARRAY
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: PUSH
36009: EMPTY
36010: LIST
36011: PPUSH
36012: CALL_OW 447
36016: GO 35959
36018: POP
36019: POP
// end ;
36020: LD_VAR 0 5
36024: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36025: LD_INT 0
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL_OW 302
36046: NOT
36047: IFTRUE 36066
36049: PUSH
36050: LD_VAR 0 2
36054: PPUSH
36055: LD_VAR 0 3
36059: PPUSH
36060: CALL_OW 488
36064: NOT
36065: OR
36066: IFTRUE 36075
36068: PUSH
36069: LD_VAR 0 4
36073: NOT
36074: OR
36075: IFFALSE 36079
// exit ;
36077: GO 36618
// if Count ( GetTaskList ( flame ) ) > 10 then
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 437
36088: PPUSH
36089: CALL 43035 0 1
36093: PUSH
36094: LD_INT 10
36096: GREATER
36097: IFFALSE 36101
// exit ;
36099: GO 36618
// list := [ ] ;
36101: LD_ADDR_VAR 0 13
36105: PUSH
36106: EMPTY
36107: ST_TO_ADDR
// if x - r < 0 then
36108: LD_VAR 0 2
36112: PUSH
36113: LD_VAR 0 4
36117: MINUS
36118: PUSH
36119: LD_INT 0
36121: LESS
36122: IFFALSE 36134
// min_x := 0 else
36124: LD_ADDR_VAR 0 7
36128: PUSH
36129: LD_INT 0
36131: ST_TO_ADDR
36132: GO 36150
// min_x := x - r ;
36134: LD_ADDR_VAR 0 7
36138: PUSH
36139: LD_VAR 0 2
36143: PUSH
36144: LD_VAR 0 4
36148: MINUS
36149: ST_TO_ADDR
// if y - r < 0 then
36150: LD_VAR 0 3
36154: PUSH
36155: LD_VAR 0 4
36159: MINUS
36160: PUSH
36161: LD_INT 0
36163: LESS
36164: IFFALSE 36176
// min_y := 0 else
36166: LD_ADDR_VAR 0 8
36170: PUSH
36171: LD_INT 0
36173: ST_TO_ADDR
36174: GO 36192
// min_y := y - r ;
36176: LD_ADDR_VAR 0 8
36180: PUSH
36181: LD_VAR 0 3
36185: PUSH
36186: LD_VAR 0 4
36190: MINUS
36191: ST_TO_ADDR
// max_x := x + r ;
36192: LD_ADDR_VAR 0 9
36196: PUSH
36197: LD_VAR 0 2
36201: PUSH
36202: LD_VAR 0 4
36206: PLUS
36207: ST_TO_ADDR
// max_y := y + r ;
36208: LD_ADDR_VAR 0 10
36212: PUSH
36213: LD_VAR 0 3
36217: PUSH
36218: LD_VAR 0 4
36222: PLUS
36223: ST_TO_ADDR
// for _x = min_x to max_x do
36224: LD_ADDR_VAR 0 11
36228: PUSH
36229: DOUBLE
36230: LD_VAR 0 7
36234: DEC
36235: ST_TO_ADDR
36236: LD_VAR 0 9
36240: PUSH
36241: FOR_TO
36242: IFFALSE 36361
// for _y = min_y to max_y do
36244: LD_ADDR_VAR 0 12
36248: PUSH
36249: DOUBLE
36250: LD_VAR 0 8
36254: DEC
36255: ST_TO_ADDR
36256: LD_VAR 0 10
36260: PUSH
36261: FOR_TO
36262: IFFALSE 36357
// begin if not ValidHex ( _x , _y ) then
36264: LD_VAR 0 11
36268: PPUSH
36269: LD_VAR 0 12
36273: PPUSH
36274: CALL_OW 488
36278: NOT
36279: IFFALSE 36283
// continue ;
36281: GO 36261
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36283: LD_VAR 0 11
36287: PPUSH
36288: LD_VAR 0 12
36292: PPUSH
36293: CALL_OW 351
36297: IFFALSE 36315
36299: PUSH
36300: LD_VAR 0 11
36304: PPUSH
36305: LD_VAR 0 12
36309: PPUSH
36310: CALL_OW 554
36314: AND
36315: IFFALSE 36355
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36317: LD_ADDR_VAR 0 13
36321: PUSH
36322: LD_VAR 0 13
36326: PPUSH
36327: LD_VAR 0 13
36331: PUSH
36332: LD_INT 1
36334: PLUS
36335: PPUSH
36336: LD_VAR 0 11
36340: PUSH
36341: LD_VAR 0 12
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PPUSH
36350: CALL_OW 2
36354: ST_TO_ADDR
// end ;
36355: GO 36261
36357: POP
36358: POP
36359: GO 36241
36361: POP
36362: POP
// if not list then
36363: LD_VAR 0 13
36367: NOT
36368: IFFALSE 36372
// exit ;
36370: GO 36618
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36372: LD_ADDR_VAR 0 13
36376: PUSH
36377: LD_VAR 0 1
36381: PPUSH
36382: LD_VAR 0 13
36386: PPUSH
36387: LD_INT 1
36389: PPUSH
36390: LD_INT 1
36392: PPUSH
36393: CALL 46441 0 4
36397: ST_TO_ADDR
// ComStop ( flame ) ;
36398: LD_VAR 0 1
36402: PPUSH
36403: CALL_OW 141
// for i in list do
36407: LD_ADDR_VAR 0 6
36411: PUSH
36412: LD_VAR 0 13
36416: PUSH
36417: FOR_IN
36418: IFFALSE 36449
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36420: LD_VAR 0 1
36424: PPUSH
36425: LD_VAR 0 6
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: PPUSH
36434: LD_VAR 0 6
36438: PUSH
36439: LD_INT 2
36441: ARRAY
36442: PPUSH
36443: CALL_OW 176
36447: GO 36417
36449: POP
36450: POP
// repeat wait ( 0 0$1 ) ;
36451: LD_INT 35
36453: PPUSH
36454: CALL_OW 67
// task := GetTaskList ( flame ) ;
36458: LD_ADDR_VAR 0 14
36462: PUSH
36463: LD_VAR 0 1
36467: PPUSH
36468: CALL_OW 437
36472: ST_TO_ADDR
// if not task then
36473: LD_VAR 0 14
36477: NOT
36478: IFFALSE 36482
// exit ;
36480: GO 36618
// if task [ 1 ] [ 1 ] <> | then
36482: LD_VAR 0 14
36486: PUSH
36487: LD_INT 1
36489: ARRAY
36490: PUSH
36491: LD_INT 1
36493: ARRAY
36494: PUSH
36495: LD_STRING |
36497: NONEQUAL
36498: IFFALSE 36502
// exit ;
36500: GO 36618
// _x := task [ 1 ] [ 2 ] ;
36502: LD_ADDR_VAR 0 11
36506: PUSH
36507: LD_VAR 0 14
36511: PUSH
36512: LD_INT 1
36514: ARRAY
36515: PUSH
36516: LD_INT 2
36518: ARRAY
36519: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36520: LD_ADDR_VAR 0 12
36524: PUSH
36525: LD_VAR 0 14
36529: PUSH
36530: LD_INT 1
36532: ARRAY
36533: PUSH
36534: LD_INT 3
36536: ARRAY
36537: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36538: LD_VAR 0 11
36542: PPUSH
36543: LD_VAR 0 12
36547: PPUSH
36548: CALL_OW 351
36552: NOT
36553: IFTRUE 36572
36555: PUSH
36556: LD_VAR 0 11
36560: PPUSH
36561: LD_VAR 0 12
36565: PPUSH
36566: CALL_OW 554
36570: NOT
36571: OR
36572: IFFALSE 36606
// begin task := Delete ( task , 1 ) ;
36574: LD_ADDR_VAR 0 14
36578: PUSH
36579: LD_VAR 0 14
36583: PPUSH
36584: LD_INT 1
36586: PPUSH
36587: CALL_OW 3
36591: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36592: LD_VAR 0 1
36596: PPUSH
36597: LD_VAR 0 14
36601: PPUSH
36602: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36606: LD_VAR 0 1
36610: PPUSH
36611: CALL_OW 314
36615: NOT
36616: IFFALSE 36451
// end ;
36618: LD_VAR 0 5
36622: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36623: LD_EXP 116
36627: NOT
36628: IFFALSE 36678
36630: GO 36632
36632: DISABLE
// begin initHack := true ;
36633: LD_ADDR_EXP 116
36637: PUSH
36638: LD_INT 1
36640: ST_TO_ADDR
// hackTanks := [ ] ;
36641: LD_ADDR_EXP 117
36645: PUSH
36646: EMPTY
36647: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36648: LD_ADDR_EXP 118
36652: PUSH
36653: EMPTY
36654: ST_TO_ADDR
// hackLimit := 3 ;
36655: LD_ADDR_EXP 119
36659: PUSH
36660: LD_INT 3
36662: ST_TO_ADDR
// hackDist := 12 ;
36663: LD_ADDR_EXP 120
36667: PUSH
36668: LD_INT 12
36670: ST_TO_ADDR
// hackCounter := [ ] ;
36671: LD_ADDR_EXP 121
36675: PUSH
36676: EMPTY
36677: ST_TO_ADDR
// end ;
36678: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36679: LD_EXP 116
36683: IFFALSE 36701
36685: PUSH
36686: LD_INT 34
36688: PUSH
36689: LD_INT 99
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PPUSH
36696: CALL_OW 69
36700: AND
36701: IFFALSE 36954
36703: GO 36705
36705: DISABLE
36706: LD_INT 0
36708: PPUSH
36709: PPUSH
// begin enable ;
36710: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36711: LD_ADDR_VAR 0 1
36715: PUSH
36716: LD_INT 34
36718: PUSH
36719: LD_INT 99
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PPUSH
36726: CALL_OW 69
36730: PUSH
36731: FOR_IN
36732: IFFALSE 36952
// begin if not i in hackTanks then
36734: LD_VAR 0 1
36738: PUSH
36739: LD_EXP 117
36743: IN
36744: NOT
36745: IFFALSE 36828
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36747: LD_ADDR_EXP 117
36751: PUSH
36752: LD_EXP 117
36756: PPUSH
36757: LD_EXP 117
36761: PUSH
36762: LD_INT 1
36764: PLUS
36765: PPUSH
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL_OW 1
36775: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36776: LD_ADDR_EXP 118
36780: PUSH
36781: LD_EXP 118
36785: PPUSH
36786: LD_EXP 118
36790: PUSH
36791: LD_INT 1
36793: PLUS
36794: PPUSH
36795: EMPTY
36796: PPUSH
36797: CALL_OW 1
36801: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36802: LD_ADDR_EXP 121
36806: PUSH
36807: LD_EXP 121
36811: PPUSH
36812: LD_EXP 121
36816: PUSH
36817: LD_INT 1
36819: PLUS
36820: PPUSH
36821: EMPTY
36822: PPUSH
36823: CALL_OW 1
36827: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36828: LD_VAR 0 1
36832: PPUSH
36833: CALL_OW 302
36837: NOT
36838: IFFALSE 36851
// begin HackUnlinkAll ( i ) ;
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL 36957 0 1
// continue ;
36849: GO 36731
// end ; HackCheckCapturedStatus ( i ) ;
36851: LD_VAR 0 1
36855: PPUSH
36856: CALL 37402 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36860: LD_ADDR_VAR 0 2
36864: PUSH
36865: LD_INT 81
36867: PUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 255
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 33
36884: PUSH
36885: LD_INT 3
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 91
36894: PUSH
36895: LD_VAR 0 1
36899: PUSH
36900: LD_EXP 120
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 50
36912: PUSH
36913: EMPTY
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: PPUSH
36922: CALL_OW 69
36926: ST_TO_ADDR
// if not tmp then
36927: LD_VAR 0 2
36931: NOT
36932: IFFALSE 36936
// continue ;
36934: GO 36731
// HackLink ( i , tmp ) ;
36936: LD_VAR 0 1
36940: PPUSH
36941: LD_VAR 0 2
36945: PPUSH
36946: CALL 37093 0 2
// end ;
36950: GO 36731
36952: POP
36953: POP
// end ;
36954: PPOPN 2
36956: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36957: LD_INT 0
36959: PPUSH
36960: PPUSH
36961: PPUSH
// if not hack in hackTanks then
36962: LD_VAR 0 1
36966: PUSH
36967: LD_EXP 117
36971: IN
36972: NOT
36973: IFFALSE 36977
// exit ;
36975: GO 37088
// index := GetElementIndex ( hackTanks , hack ) ;
36977: LD_ADDR_VAR 0 4
36981: PUSH
36982: LD_EXP 117
36986: PPUSH
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL 45736 0 2
36996: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36997: LD_EXP 118
37001: PUSH
37002: LD_VAR 0 4
37006: ARRAY
37007: IFFALSE 37088
// begin for i in hackTanksCaptured [ index ] do
37009: LD_ADDR_VAR 0 3
37013: PUSH
37014: LD_EXP 118
37018: PUSH
37019: LD_VAR 0 4
37023: ARRAY
37024: PUSH
37025: FOR_IN
37026: IFFALSE 37052
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37028: LD_VAR 0 3
37032: PUSH
37033: LD_INT 1
37035: ARRAY
37036: PPUSH
37037: LD_VAR 0 3
37041: PUSH
37042: LD_INT 2
37044: ARRAY
37045: PPUSH
37046: CALL_OW 235
37050: GO 37025
37052: POP
37053: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37054: LD_ADDR_EXP 118
37058: PUSH
37059: LD_EXP 118
37063: PPUSH
37064: LD_VAR 0 4
37068: PPUSH
37069: EMPTY
37070: PPUSH
37071: CALL_OW 1
37075: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37076: LD_VAR 0 1
37080: PPUSH
37081: LD_INT 0
37083: PPUSH
37084: CALL_OW 505
// end ; end ;
37088: LD_VAR 0 2
37092: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37093: LD_INT 0
37095: PPUSH
37096: PPUSH
37097: PPUSH
// if not hack in hackTanks or not vehicles then
37098: LD_VAR 0 1
37102: PUSH
37103: LD_EXP 117
37107: IN
37108: NOT
37109: IFTRUE 37118
37111: PUSH
37112: LD_VAR 0 2
37116: NOT
37117: OR
37118: IFFALSE 37122
// exit ;
37120: GO 37397
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37122: LD_ADDR_VAR 0 2
37126: PUSH
37127: LD_VAR 0 1
37131: PPUSH
37132: LD_VAR 0 2
37136: PPUSH
37137: LD_INT 1
37139: PPUSH
37140: LD_INT 1
37142: PPUSH
37143: CALL 46388 0 4
37147: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37148: LD_ADDR_VAR 0 5
37152: PUSH
37153: LD_EXP 117
37157: PPUSH
37158: LD_VAR 0 1
37162: PPUSH
37163: CALL 45736 0 2
37167: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37168: LD_EXP 118
37172: PUSH
37173: LD_VAR 0 5
37177: ARRAY
37178: PUSH
37179: LD_EXP 119
37183: LESS
37184: IFFALSE 37373
// begin for i := 1 to vehicles do
37186: LD_ADDR_VAR 0 4
37190: PUSH
37191: DOUBLE
37192: LD_INT 1
37194: DEC
37195: ST_TO_ADDR
37196: LD_VAR 0 2
37200: PUSH
37201: FOR_TO
37202: IFFALSE 37371
// begin if hackTanksCaptured [ index ] = hackLimit then
37204: LD_EXP 118
37208: PUSH
37209: LD_VAR 0 5
37213: ARRAY
37214: PUSH
37215: LD_EXP 119
37219: EQUAL
37220: IFFALSE 37224
// break ;
37222: GO 37371
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37224: LD_ADDR_EXP 121
37228: PUSH
37229: LD_EXP 121
37233: PPUSH
37234: LD_VAR 0 5
37238: PPUSH
37239: LD_EXP 121
37243: PUSH
37244: LD_VAR 0 5
37248: ARRAY
37249: PUSH
37250: LD_INT 1
37252: PLUS
37253: PPUSH
37254: CALL_OW 1
37258: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37259: LD_ADDR_EXP 118
37263: PUSH
37264: LD_EXP 118
37268: PPUSH
37269: LD_VAR 0 5
37273: PUSH
37274: LD_EXP 118
37278: PUSH
37279: LD_VAR 0 5
37283: ARRAY
37284: PUSH
37285: LD_INT 1
37287: PLUS
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PPUSH
37293: LD_VAR 0 2
37297: PUSH
37298: LD_VAR 0 4
37302: ARRAY
37303: PUSH
37304: LD_VAR 0 2
37308: PUSH
37309: LD_VAR 0 4
37313: ARRAY
37314: PPUSH
37315: CALL_OW 255
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PPUSH
37324: CALL 45953 0 3
37328: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37329: LD_VAR 0 2
37333: PUSH
37334: LD_VAR 0 4
37338: ARRAY
37339: PPUSH
37340: LD_VAR 0 1
37344: PPUSH
37345: CALL_OW 255
37349: PPUSH
37350: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37354: LD_VAR 0 2
37358: PUSH
37359: LD_VAR 0 4
37363: ARRAY
37364: PPUSH
37365: CALL_OW 141
// end ;
37369: GO 37201
37371: POP
37372: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37373: LD_VAR 0 1
37377: PPUSH
37378: LD_EXP 118
37382: PUSH
37383: LD_VAR 0 5
37387: ARRAY
37388: PUSH
37389: LD_INT 0
37391: PLUS
37392: PPUSH
37393: CALL_OW 505
// end ;
37397: LD_VAR 0 3
37401: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37402: LD_INT 0
37404: PPUSH
37405: PPUSH
37406: PPUSH
37407: PPUSH
// if not hack in hackTanks then
37408: LD_VAR 0 1
37412: PUSH
37413: LD_EXP 117
37417: IN
37418: NOT
37419: IFFALSE 37423
// exit ;
37421: GO 37667
// index := GetElementIndex ( hackTanks , hack ) ;
37423: LD_ADDR_VAR 0 4
37427: PUSH
37428: LD_EXP 117
37432: PPUSH
37433: LD_VAR 0 1
37437: PPUSH
37438: CALL 45736 0 2
37442: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37443: LD_ADDR_VAR 0 3
37447: PUSH
37448: DOUBLE
37449: LD_EXP 118
37453: PUSH
37454: LD_VAR 0 4
37458: ARRAY
37459: INC
37460: ST_TO_ADDR
37461: LD_INT 1
37463: PUSH
37464: FOR_DOWNTO
37465: IFFALSE 37641
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37467: LD_ADDR_VAR 0 5
37471: PUSH
37472: LD_EXP 118
37476: PUSH
37477: LD_VAR 0 4
37481: ARRAY
37482: PUSH
37483: LD_VAR 0 3
37487: ARRAY
37488: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37489: LD_VAR 0 5
37493: PUSH
37494: LD_INT 1
37496: ARRAY
37497: PPUSH
37498: CALL_OW 302
37502: NOT
37503: IFTRUE 37531
37505: PUSH
37506: LD_VAR 0 5
37510: PUSH
37511: LD_INT 1
37513: ARRAY
37514: PPUSH
37515: CALL_OW 255
37519: PUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: CALL_OW 255
37529: NONEQUAL
37530: OR
37531: IFFALSE 37639
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37533: LD_VAR 0 5
37537: PUSH
37538: LD_INT 1
37540: ARRAY
37541: PPUSH
37542: CALL_OW 305
37546: IFFALSE 37574
37548: PUSH
37549: LD_VAR 0 5
37553: PUSH
37554: LD_INT 1
37556: ARRAY
37557: PPUSH
37558: CALL_OW 255
37562: PUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 255
37572: EQUAL
37573: AND
37574: IFFALSE 37598
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37576: LD_VAR 0 5
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PPUSH
37585: LD_VAR 0 5
37589: PUSH
37590: LD_INT 2
37592: ARRAY
37593: PPUSH
37594: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37598: LD_ADDR_EXP 118
37602: PUSH
37603: LD_EXP 118
37607: PPUSH
37608: LD_VAR 0 4
37612: PPUSH
37613: LD_EXP 118
37617: PUSH
37618: LD_VAR 0 4
37622: ARRAY
37623: PPUSH
37624: LD_VAR 0 3
37628: PPUSH
37629: CALL_OW 3
37633: PPUSH
37634: CALL_OW 1
37638: ST_TO_ADDR
// end ; end ;
37639: GO 37464
37641: POP
37642: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37643: LD_VAR 0 1
37647: PPUSH
37648: LD_EXP 118
37652: PUSH
37653: LD_VAR 0 4
37657: ARRAY
37658: PUSH
37659: LD_INT 0
37661: PLUS
37662: PPUSH
37663: CALL_OW 505
// end ;
37667: LD_VAR 0 2
37671: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37672: LD_INT 0
37674: PPUSH
37675: PPUSH
37676: PPUSH
37677: PPUSH
// if not hack in hackTanks then
37678: LD_VAR 0 1
37682: PUSH
37683: LD_EXP 117
37687: IN
37688: NOT
37689: IFFALSE 37693
// exit ;
37691: GO 37778
// index := GetElementIndex ( hackTanks , hack ) ;
37693: LD_ADDR_VAR 0 5
37697: PUSH
37698: LD_EXP 117
37702: PPUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL 45736 0 2
37712: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37713: LD_ADDR_VAR 0 4
37717: PUSH
37718: DOUBLE
37719: LD_INT 1
37721: DEC
37722: ST_TO_ADDR
37723: LD_EXP 118
37727: PUSH
37728: LD_VAR 0 5
37732: ARRAY
37733: PUSH
37734: FOR_TO
37735: IFFALSE 37776
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37737: LD_EXP 118
37741: PUSH
37742: LD_VAR 0 5
37746: ARRAY
37747: PUSH
37748: LD_VAR 0 4
37752: ARRAY
37753: PUSH
37754: LD_INT 1
37756: ARRAY
37757: PUSH
37758: LD_VAR 0 2
37762: EQUAL
37763: IFFALSE 37774
// KillUnit ( vehicle ) ;
37765: LD_VAR 0 2
37769: PPUSH
37770: CALL_OW 66
37774: GO 37734
37776: POP
37777: POP
// end ;
37778: LD_VAR 0 3
37782: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
37783: LD_EXP 122
37787: NOT
37788: IFFALSE 37921
37790: GO 37792
37792: DISABLE
37793: LD_INT 0
37795: PPUSH
// begin initMiner := true ;
37796: LD_ADDR_EXP 122
37800: PUSH
37801: LD_INT 1
37803: ST_TO_ADDR
// minersList := [ ] ;
37804: LD_ADDR_EXP 123
37808: PUSH
37809: EMPTY
37810: ST_TO_ADDR
// minerMinesList := [ ] ;
37811: LD_ADDR_EXP 124
37815: PUSH
37816: EMPTY
37817: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
37818: LD_ADDR_EXP 125
37822: PUSH
37823: LD_INT 10
37825: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37826: LD_ADDR_VAR 0 1
37830: PUSH
37831: LD_INT 34
37833: PUSH
37834: LD_INT 81
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PPUSH
37841: CALL_OW 69
37845: PUSH
37846: FOR_IN
37847: IFFALSE 37919
// begin if not i in minersList then
37849: LD_VAR 0 1
37853: PUSH
37854: LD_EXP 123
37858: IN
37859: NOT
37860: IFFALSE 37917
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37862: LD_ADDR_EXP 123
37866: PUSH
37867: LD_EXP 123
37871: PPUSH
37872: LD_EXP 123
37876: PUSH
37877: LD_INT 1
37879: PLUS
37880: PPUSH
37881: LD_VAR 0 1
37885: PPUSH
37886: CALL_OW 1
37890: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37891: LD_ADDR_EXP 124
37895: PUSH
37896: LD_EXP 124
37900: PPUSH
37901: LD_EXP 124
37905: PUSH
37906: LD_INT 1
37908: PLUS
37909: PPUSH
37910: EMPTY
37911: PPUSH
37912: CALL_OW 1
37916: ST_TO_ADDR
// end end ;
37917: GO 37846
37919: POP
37920: POP
// end ;
37921: PPOPN 1
37923: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
37924: LD_EXP 122
37928: IFFALSE 37959
37930: PUSH
37931: LD_EXP 124
37935: PPUSH
37936: CALL 43035 0 1
37940: IFTRUE 37958
37942: PUSH
37943: LD_INT 34
37945: PUSH
37946: LD_INT 81
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PPUSH
37953: CALL_OW 69
37957: OR
37958: AND
37959: IFFALSE 38479
37961: GO 37963
37963: DISABLE
37964: LD_INT 0
37966: PPUSH
37967: PPUSH
37968: PPUSH
37969: PPUSH
// begin enable ;
37970: ENABLE
// for i := minerMinesList downto 1 do
37971: LD_ADDR_VAR 0 1
37975: PUSH
37976: DOUBLE
37977: LD_EXP 124
37981: INC
37982: ST_TO_ADDR
37983: LD_INT 1
37985: PUSH
37986: FOR_DOWNTO
37987: IFFALSE 38477
// begin side := GetSide ( minersList [ i ] ) ;
37989: LD_ADDR_VAR 0 3
37993: PUSH
37994: LD_EXP 123
37998: PUSH
37999: LD_VAR 0 1
38003: ARRAY
38004: PPUSH
38005: CALL_OW 255
38009: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
38010: LD_EXP 123
38014: PUSH
38015: LD_VAR 0 1
38019: ARRAY
38020: PPUSH
38021: CALL_OW 300
38025: IFFALSE 38046
38027: PUSH
38028: LD_VAR 0 3
38032: PUSH
38033: LD_OWVAR 2
38037: PUSH
38038: LD_INT 9
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: IN
38045: AND
38046: IFFALSE 38079
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
38048: LD_EXP 123
38052: PUSH
38053: LD_VAR 0 1
38057: ARRAY
38058: PPUSH
38059: LD_EXP 124
38063: PUSH
38064: LD_VAR 0 1
38068: ARRAY
38069: PPUSH
38070: CALL 43035 0 1
38074: PPUSH
38075: CALL_OW 505
// if not minerMinesList [ i ] then
38079: LD_EXP 124
38083: PUSH
38084: LD_VAR 0 1
38088: ARRAY
38089: NOT
38090: IFFALSE 38094
// continue ;
38092: GO 37986
// for j := minerMinesList [ i ] downto 1 do
38094: LD_ADDR_VAR 0 2
38098: PUSH
38099: DOUBLE
38100: LD_EXP 124
38104: PUSH
38105: LD_VAR 0 1
38109: ARRAY
38110: INC
38111: ST_TO_ADDR
38112: LD_INT 1
38114: PUSH
38115: FOR_DOWNTO
38116: IFFALSE 38473
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
38118: LD_EXP 123
38122: PUSH
38123: LD_VAR 0 1
38127: ARRAY
38128: PPUSH
38129: CALL_OW 301
38133: IFTRUE 38153
38135: PUSH
38136: LD_EXP 123
38140: PUSH
38141: LD_VAR 0 1
38145: ARRAY
38146: PPUSH
38147: CALL_OW 305
38151: NOT
38152: OR
38153: IFFALSE 38244
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38155: LD_EXP 124
38159: PUSH
38160: LD_VAR 0 1
38164: ARRAY
38165: PUSH
38166: LD_VAR 0 2
38170: ARRAY
38171: PUSH
38172: LD_INT 1
38174: ARRAY
38175: PPUSH
38176: LD_EXP 124
38180: PUSH
38181: LD_VAR 0 1
38185: ARRAY
38186: PUSH
38187: LD_VAR 0 2
38191: ARRAY
38192: PUSH
38193: LD_INT 2
38195: ARRAY
38196: PPUSH
38197: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38201: LD_ADDR_EXP 124
38205: PUSH
38206: LD_EXP 124
38210: PPUSH
38211: LD_VAR 0 1
38215: PPUSH
38216: LD_EXP 124
38220: PUSH
38221: LD_VAR 0 1
38225: ARRAY
38226: PPUSH
38227: LD_VAR 0 2
38231: PPUSH
38232: CALL_OW 3
38236: PPUSH
38237: CALL_OW 1
38241: ST_TO_ADDR
// continue ;
38242: GO 38115
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38244: LD_ADDR_VAR 0 4
38248: PUSH
38249: LD_EXP 124
38253: PUSH
38254: LD_VAR 0 1
38258: ARRAY
38259: PUSH
38260: LD_VAR 0 2
38264: ARRAY
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: PPUSH
38270: LD_EXP 124
38274: PUSH
38275: LD_VAR 0 1
38279: ARRAY
38280: PUSH
38281: LD_VAR 0 2
38285: ARRAY
38286: PUSH
38287: LD_INT 2
38289: ARRAY
38290: PPUSH
38291: CALL_OW 428
38295: ST_TO_ADDR
// if not tmp then
38296: LD_VAR 0 4
38300: NOT
38301: IFFALSE 38305
// continue ;
38303: GO 38115
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38305: LD_VAR 0 4
38309: PUSH
38310: LD_INT 81
38312: PUSH
38313: LD_VAR 0 3
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PPUSH
38322: CALL_OW 69
38326: IN
38327: IFFALSE 38377
38329: PUSH
38330: LD_EXP 124
38334: PUSH
38335: LD_VAR 0 1
38339: ARRAY
38340: PUSH
38341: LD_VAR 0 2
38345: ARRAY
38346: PUSH
38347: LD_INT 1
38349: ARRAY
38350: PPUSH
38351: LD_EXP 124
38355: PUSH
38356: LD_VAR 0 1
38360: ARRAY
38361: PUSH
38362: LD_VAR 0 2
38366: ARRAY
38367: PUSH
38368: LD_INT 2
38370: ARRAY
38371: PPUSH
38372: CALL_OW 458
38376: AND
38377: IFFALSE 38471
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38379: LD_EXP 124
38383: PUSH
38384: LD_VAR 0 1
38388: ARRAY
38389: PUSH
38390: LD_VAR 0 2
38394: ARRAY
38395: PUSH
38396: LD_INT 1
38398: ARRAY
38399: PPUSH
38400: LD_EXP 124
38404: PUSH
38405: LD_VAR 0 1
38409: ARRAY
38410: PUSH
38411: LD_VAR 0 2
38415: ARRAY
38416: PUSH
38417: LD_INT 2
38419: ARRAY
38420: PPUSH
38421: LD_VAR 0 3
38425: PPUSH
38426: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38430: LD_ADDR_EXP 124
38434: PUSH
38435: LD_EXP 124
38439: PPUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: LD_EXP 124
38449: PUSH
38450: LD_VAR 0 1
38454: ARRAY
38455: PPUSH
38456: LD_VAR 0 2
38460: PPUSH
38461: CALL_OW 3
38465: PPUSH
38466: CALL_OW 1
38470: ST_TO_ADDR
// end ; end ;
38471: GO 38115
38473: POP
38474: POP
// end ;
38475: GO 37986
38477: POP
38478: POP
// end ;
38479: PPOPN 4
38481: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
38482: LD_INT 0
38484: PPUSH
38485: PPUSH
38486: PPUSH
38487: PPUSH
// result := false ;
38488: LD_ADDR_VAR 0 4
38492: PUSH
38493: LD_INT 0
38495: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38496: LD_VAR 0 1
38500: PPUSH
38501: CALL_OW 264
38505: PUSH
38506: LD_INT 81
38508: EQUAL
38509: NOT
38510: IFFALSE 38514
// exit ;
38512: GO 38884
// side := GetSide ( unit ) ;
38514: LD_ADDR_VAR 0 6
38518: PUSH
38519: LD_VAR 0 1
38523: PPUSH
38524: CALL_OW 255
38528: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
38529: LD_ADDR_VAR 0 5
38533: PUSH
38534: LD_EXP 123
38538: PPUSH
38539: LD_VAR 0 1
38543: PPUSH
38544: CALL 45736 0 2
38548: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38549: LD_EXP 124
38553: PUSH
38554: LD_VAR 0 5
38558: ARRAY
38559: PUSH
38560: LD_EXP 125
38564: GREATEREQUAL
38565: IFFALSE 38569
// exit ;
38567: GO 38884
// ComMoveXY ( unit , x , y ) ;
38569: LD_VAR 0 1
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38588: LD_INT 35
38590: PPUSH
38591: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38595: LD_VAR 0 1
38599: PPUSH
38600: LD_VAR 0 2
38604: PPUSH
38605: LD_VAR 0 3
38609: PPUSH
38610: CALL 77792 0 3
38614: NOT
38615: IFFALSE 38628
38617: PUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: CALL_OW 314
38627: AND
38628: IFFALSE 38632
// exit ;
38630: GO 38884
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38632: LD_VAR 0 2
38636: PPUSH
38637: LD_VAR 0 3
38641: PPUSH
38642: CALL_OW 428
38646: PUSH
38647: LD_VAR 0 1
38651: EQUAL
38652: IFFALSE 38666
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: CALL_OW 314
38664: NOT
38665: AND
38666: IFFALSE 38588
// if MineAtPos ( x , y ) then
38668: LD_VAR 0 2
38672: PPUSH
38673: LD_VAR 0 3
38677: PPUSH
38678: CALL_OW 458
38682: IFFALSE 38686
// exit ;
38684: GO 38884
// if your_side = side then
38686: LD_OWVAR 2
38690: PUSH
38691: LD_VAR 0 6
38695: EQUAL
38696: IFFALSE 38715
// PlaySoundXY ( x , y , PlantMine ) ;
38698: LD_VAR 0 2
38702: PPUSH
38703: LD_VAR 0 3
38707: PPUSH
38708: LD_STRING PlantMine
38710: PPUSH
38711: CALL_OW 366
// repeat wait ( 1 ) ;
38715: LD_INT 1
38717: PPUSH
38718: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
38722: LD_VAR 0 2
38726: PPUSH
38727: LD_VAR 0 3
38731: PPUSH
38732: LD_VAR 0 6
38736: PPUSH
38737: LD_INT 0
38739: PPUSH
38740: CALL_OW 454
38744: IFFALSE 38715
// if MineAtPos ( x , y ) then
38746: LD_VAR 0 2
38750: PPUSH
38751: LD_VAR 0 3
38755: PPUSH
38756: CALL_OW 458
38760: IFFALSE 38876
// begin for i in minerMinesList [ index ] do
38762: LD_ADDR_VAR 0 7
38766: PUSH
38767: LD_EXP 124
38771: PUSH
38772: LD_VAR 0 5
38776: ARRAY
38777: PUSH
38778: FOR_IN
38779: IFFALSE 38821
// if i [ 1 ] = x and i [ 2 ] = y then
38781: LD_VAR 0 7
38785: PUSH
38786: LD_INT 1
38788: ARRAY
38789: PUSH
38790: LD_VAR 0 2
38794: EQUAL
38795: IFFALSE 38813
38797: PUSH
38798: LD_VAR 0 7
38802: PUSH
38803: LD_INT 2
38805: ARRAY
38806: PUSH
38807: LD_VAR 0 3
38811: EQUAL
38812: AND
38813: IFFALSE 38819
// exit ;
38815: POP
38816: POP
38817: GO 38884
38819: GO 38778
38821: POP
38822: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38823: LD_ADDR_EXP 124
38827: PUSH
38828: LD_EXP 124
38832: PPUSH
38833: LD_VAR 0 5
38837: PUSH
38838: LD_EXP 124
38842: PUSH
38843: LD_VAR 0 5
38847: ARRAY
38848: PUSH
38849: LD_INT 1
38851: PLUS
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PPUSH
38857: LD_VAR 0 2
38861: PUSH
38862: LD_VAR 0 3
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PPUSH
38871: CALL 45953 0 3
38875: ST_TO_ADDR
// end ; result := true ;
38876: LD_ADDR_VAR 0 4
38880: PUSH
38881: LD_INT 1
38883: ST_TO_ADDR
// end ;
38884: LD_VAR 0 4
38888: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38889: LD_INT 0
38891: PPUSH
38892: PPUSH
38893: PPUSH
// if not unit in minersList then
38894: LD_VAR 0 1
38898: PUSH
38899: LD_EXP 123
38903: IN
38904: NOT
38905: IFFALSE 38909
// exit ;
38907: GO 39116
// index := GetElementIndex ( minersList , unit ) ;
38909: LD_ADDR_VAR 0 6
38913: PUSH
38914: LD_EXP 123
38918: PPUSH
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL 45736 0 2
38928: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38929: LD_ADDR_VAR 0 5
38933: PUSH
38934: DOUBLE
38935: LD_EXP 124
38939: PUSH
38940: LD_VAR 0 6
38944: ARRAY
38945: INC
38946: ST_TO_ADDR
38947: LD_INT 1
38949: PUSH
38950: FOR_DOWNTO
38951: IFFALSE 39114
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38953: LD_EXP 124
38957: PUSH
38958: LD_VAR 0 6
38962: ARRAY
38963: PUSH
38964: LD_VAR 0 5
38968: ARRAY
38969: PUSH
38970: LD_INT 1
38972: ARRAY
38973: PPUSH
38974: LD_EXP 124
38978: PUSH
38979: LD_VAR 0 6
38983: ARRAY
38984: PUSH
38985: LD_VAR 0 5
38989: ARRAY
38990: PUSH
38991: LD_INT 2
38993: ARRAY
38994: PPUSH
38995: LD_VAR 0 2
38999: PPUSH
39000: LD_VAR 0 3
39004: PPUSH
39005: CALL_OW 298
39009: PUSH
39010: LD_INT 6
39012: LESS
39013: IFFALSE 39112
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39015: LD_EXP 124
39019: PUSH
39020: LD_VAR 0 6
39024: ARRAY
39025: PUSH
39026: LD_VAR 0 5
39030: ARRAY
39031: PUSH
39032: LD_INT 1
39034: ARRAY
39035: PPUSH
39036: LD_EXP 124
39040: PUSH
39041: LD_VAR 0 6
39045: ARRAY
39046: PUSH
39047: LD_VAR 0 5
39051: ARRAY
39052: PUSH
39053: LD_INT 2
39055: ARRAY
39056: PPUSH
39057: LD_VAR 0 1
39061: PPUSH
39062: CALL_OW 255
39066: PPUSH
39067: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39071: LD_ADDR_EXP 124
39075: PUSH
39076: LD_EXP 124
39080: PPUSH
39081: LD_VAR 0 6
39085: PPUSH
39086: LD_EXP 124
39090: PUSH
39091: LD_VAR 0 6
39095: ARRAY
39096: PPUSH
39097: LD_VAR 0 5
39101: PPUSH
39102: CALL_OW 3
39106: PPUSH
39107: CALL_OW 1
39111: ST_TO_ADDR
// end ; end ;
39112: GO 38950
39114: POP
39115: POP
// end ;
39116: LD_VAR 0 4
39120: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39132: LD_VAR 0 1
39136: PPUSH
39137: CALL_OW 264
39141: PUSH
39142: LD_INT 81
39144: EQUAL
39145: NOT
39146: IFTRUE 39161
39148: PUSH
39149: LD_VAR 0 1
39153: PUSH
39154: LD_EXP 123
39158: IN
39159: NOT
39160: OR
39161: IFFALSE 39165
// exit ;
39163: GO 39491
// index := GetElementIndex ( minersList , unit ) ;
39165: LD_ADDR_VAR 0 6
39169: PUSH
39170: LD_EXP 123
39174: PPUSH
39175: LD_VAR 0 1
39179: PPUSH
39180: CALL 45736 0 2
39184: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39185: LD_ADDR_VAR 0 8
39189: PUSH
39190: LD_EXP 125
39194: PUSH
39195: LD_EXP 124
39199: PUSH
39200: LD_VAR 0 6
39204: ARRAY
39205: MINUS
39206: ST_TO_ADDR
// if not minesFreeAmount then
39207: LD_VAR 0 8
39211: NOT
39212: IFFALSE 39216
// exit ;
39214: GO 39491
// tmp := [ ] ;
39216: LD_ADDR_VAR 0 7
39220: PUSH
39221: EMPTY
39222: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39223: LD_ADDR_VAR 0 5
39227: PUSH
39228: DOUBLE
39229: LD_INT 1
39231: DEC
39232: ST_TO_ADDR
39233: LD_VAR 0 8
39237: PUSH
39238: FOR_TO
39239: IFFALSE 39438
// begin _d := rand ( 0 , 5 ) ;
39241: LD_ADDR_VAR 0 11
39245: PUSH
39246: LD_INT 0
39248: PPUSH
39249: LD_INT 5
39251: PPUSH
39252: CALL_OW 12
39256: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39257: LD_ADDR_VAR 0 12
39261: PUSH
39262: LD_INT 2
39264: PPUSH
39265: LD_INT 6
39267: PPUSH
39268: CALL_OW 12
39272: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39273: LD_ADDR_VAR 0 9
39277: PUSH
39278: LD_VAR 0 2
39282: PPUSH
39283: LD_VAR 0 11
39287: PPUSH
39288: LD_VAR 0 12
39292: PPUSH
39293: CALL_OW 272
39297: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39298: LD_ADDR_VAR 0 10
39302: PUSH
39303: LD_VAR 0 3
39307: PPUSH
39308: LD_VAR 0 11
39312: PPUSH
39313: LD_VAR 0 12
39317: PPUSH
39318: CALL_OW 273
39322: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39323: LD_VAR 0 9
39327: PPUSH
39328: LD_VAR 0 10
39332: PPUSH
39333: CALL_OW 488
39337: IFFALSE 39361
39339: PUSH
39340: LD_VAR 0 9
39344: PUSH
39345: LD_VAR 0 10
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_VAR 0 7
39358: IN
39359: NOT
39360: AND
39361: IFFALSE 39380
39363: PUSH
39364: LD_VAR 0 9
39368: PPUSH
39369: LD_VAR 0 10
39373: PPUSH
39374: CALL_OW 458
39378: NOT
39379: AND
39380: IFFALSE 39422
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39382: LD_ADDR_VAR 0 7
39386: PUSH
39387: LD_VAR 0 7
39391: PPUSH
39392: LD_VAR 0 7
39396: PUSH
39397: LD_INT 1
39399: PLUS
39400: PPUSH
39401: LD_VAR 0 9
39405: PUSH
39406: LD_VAR 0 10
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PPUSH
39415: CALL_OW 1
39419: ST_TO_ADDR
39420: GO 39436
// i := i - 1 ;
39422: LD_ADDR_VAR 0 5
39426: PUSH
39427: LD_VAR 0 5
39431: PUSH
39432: LD_INT 1
39434: MINUS
39435: ST_TO_ADDR
// end ;
39436: GO 39238
39438: POP
39439: POP
// for i in tmp do
39440: LD_ADDR_VAR 0 5
39444: PUSH
39445: LD_VAR 0 7
39449: PUSH
39450: FOR_IN
39451: IFFALSE 39489
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39453: LD_VAR 0 1
39457: PPUSH
39458: LD_VAR 0 5
39462: PUSH
39463: LD_INT 1
39465: ARRAY
39466: PPUSH
39467: LD_VAR 0 5
39471: PUSH
39472: LD_INT 2
39474: ARRAY
39475: PPUSH
39476: CALL 38482 0 3
39480: NOT
39481: IFFALSE 39487
// exit ;
39483: POP
39484: POP
39485: GO 39491
39487: GO 39450
39489: POP
39490: POP
// end ;
39491: LD_VAR 0 4
39495: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
39496: LD_INT 0
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
// if GetClass ( unit ) <> class_sniper then
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 257
39516: PUSH
39517: LD_INT 5
39519: NONEQUAL
39520: IFFALSE 39524
// exit ;
39522: GO 39994
// dist := 8 ;
39524: LD_ADDR_VAR 0 5
39528: PUSH
39529: LD_INT 8
39531: ST_TO_ADDR
// viewRange := 12 ;
39532: LD_ADDR_VAR 0 8
39536: PUSH
39537: LD_INT 12
39539: ST_TO_ADDR
// side := GetSide ( unit ) ;
39540: LD_ADDR_VAR 0 6
39544: PUSH
39545: LD_VAR 0 1
39549: PPUSH
39550: CALL_OW 255
39554: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39555: LD_INT 61
39557: PPUSH
39558: LD_VAR 0 6
39562: PPUSH
39563: CALL_OW 321
39567: PUSH
39568: LD_INT 2
39570: EQUAL
39571: IFFALSE 39581
// viewRange := 16 ;
39573: LD_ADDR_VAR 0 8
39577: PUSH
39578: LD_INT 16
39580: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39581: LD_VAR 0 1
39585: PPUSH
39586: LD_VAR 0 2
39590: PPUSH
39591: LD_VAR 0 3
39595: PPUSH
39596: CALL_OW 297
39600: PUSH
39601: LD_VAR 0 5
39605: GREATER
39606: IFFALSE 39685
// begin ComMoveXY ( unit , x , y ) ;
39608: LD_VAR 0 1
39612: PPUSH
39613: LD_VAR 0 2
39617: PPUSH
39618: LD_VAR 0 3
39622: PPUSH
39623: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39627: LD_INT 35
39629: PPUSH
39630: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39634: LD_VAR 0 1
39638: PPUSH
39639: LD_VAR 0 2
39643: PPUSH
39644: LD_VAR 0 3
39648: PPUSH
39649: CALL 77792 0 3
39653: NOT
39654: IFFALSE 39658
// exit ;
39656: GO 39994
// until GetDistUnitXY ( unit , x , y ) < dist ;
39658: LD_VAR 0 1
39662: PPUSH
39663: LD_VAR 0 2
39667: PPUSH
39668: LD_VAR 0 3
39672: PPUSH
39673: CALL_OW 297
39677: PUSH
39678: LD_VAR 0 5
39682: LESS
39683: IFFALSE 39627
// end ; ComTurnXY ( unit , x , y ) ;
39685: LD_VAR 0 1
39689: PPUSH
39690: LD_VAR 0 2
39694: PPUSH
39695: LD_VAR 0 3
39699: PPUSH
39700: CALL_OW 118
// repeat if Multiplayer then
39704: LD_OWVAR 4
39708: IFFALSE 39719
// wait ( 35 ) else
39710: LD_INT 35
39712: PPUSH
39713: CALL_OW 67
39717: GO 39726
// wait ( 5 ) ;
39719: LD_INT 5
39721: PPUSH
39722: CALL_OW 67
// _d := GetDir ( unit ) ;
39726: LD_ADDR_VAR 0 11
39730: PUSH
39731: LD_VAR 0 1
39735: PPUSH
39736: CALL_OW 254
39740: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
39741: LD_ADDR_VAR 0 7
39745: PUSH
39746: LD_VAR 0 1
39750: PPUSH
39751: CALL_OW 250
39755: PPUSH
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 251
39765: PPUSH
39766: LD_VAR 0 2
39770: PPUSH
39771: LD_VAR 0 3
39775: PPUSH
39776: CALL 80428 0 4
39780: ST_TO_ADDR
// until dir = _d ;
39781: LD_VAR 0 7
39785: PUSH
39786: LD_VAR 0 11
39790: EQUAL
39791: IFFALSE 39704
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
39793: LD_ADDR_VAR 0 9
39797: PUSH
39798: LD_VAR 0 1
39802: PPUSH
39803: CALL_OW 250
39807: PPUSH
39808: LD_VAR 0 7
39812: PPUSH
39813: LD_VAR 0 5
39817: PPUSH
39818: CALL_OW 272
39822: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
39823: LD_ADDR_VAR 0 10
39827: PUSH
39828: LD_VAR 0 1
39832: PPUSH
39833: CALL_OW 251
39837: PPUSH
39838: LD_VAR 0 7
39842: PPUSH
39843: LD_VAR 0 5
39847: PPUSH
39848: CALL_OW 273
39852: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39853: LD_VAR 0 9
39857: PPUSH
39858: LD_VAR 0 10
39862: PPUSH
39863: CALL_OW 488
39867: NOT
39868: IFFALSE 39872
// exit ;
39870: GO 39994
// ComAnimCustom ( unit , 1 ) ;
39872: LD_VAR 0 1
39876: PPUSH
39877: LD_INT 1
39879: PPUSH
39880: CALL_OW 592
// p := 0 ;
39884: LD_ADDR_VAR 0 12
39888: PUSH
39889: LD_INT 0
39891: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39892: LD_VAR 0 9
39896: PPUSH
39897: LD_VAR 0 10
39901: PPUSH
39902: LD_VAR 0 6
39906: PPUSH
39907: LD_VAR 0 8
39911: PPUSH
39912: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
39916: LD_INT 35
39918: PPUSH
39919: CALL_OW 67
// p := Inc ( p ) ;
39923: LD_ADDR_VAR 0 12
39927: PUSH
39928: LD_VAR 0 12
39932: PPUSH
39933: CALL 80384 0 1
39937: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
39938: LD_VAR 0 12
39942: PUSH
39943: LD_INT 3
39945: EQUAL
39946: IFTRUE 39960
39948: PUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: CALL_OW 302
39958: NOT
39959: OR
39960: IFTRUE 39973
39962: PUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: CALL_OW 301
39972: OR
39973: IFFALSE 39916
// RemoveSeeing ( _x , _y , side ) ;
39975: LD_VAR 0 9
39979: PPUSH
39980: LD_VAR 0 10
39984: PPUSH
39985: LD_VAR 0 6
39989: PPUSH
39990: CALL_OW 331
// end ;
39994: LD_VAR 0 4
39998: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
// if not unit then
40012: LD_VAR 0 1
40016: NOT
40017: IFFALSE 40021
// exit ;
40019: GO 40292
// side := GetSide ( unit ) ;
40021: LD_ADDR_VAR 0 3
40025: PUSH
40026: LD_VAR 0 1
40030: PPUSH
40031: CALL_OW 255
40035: ST_TO_ADDR
// x := GetX ( unit ) ;
40036: LD_ADDR_VAR 0 5
40040: PUSH
40041: LD_VAR 0 1
40045: PPUSH
40046: CALL_OW 250
40050: ST_TO_ADDR
// y := GetY ( unit ) ;
40051: LD_ADDR_VAR 0 6
40055: PUSH
40056: LD_VAR 0 1
40060: PPUSH
40061: CALL_OW 251
40065: ST_TO_ADDR
// r := 8 ;
40066: LD_ADDR_VAR 0 4
40070: PUSH
40071: LD_INT 8
40073: ST_TO_ADDR
// if x - r < 0 then
40074: LD_VAR 0 5
40078: PUSH
40079: LD_VAR 0 4
40083: MINUS
40084: PUSH
40085: LD_INT 0
40087: LESS
40088: IFFALSE 40100
// min_x := 0 else
40090: LD_ADDR_VAR 0 7
40094: PUSH
40095: LD_INT 0
40097: ST_TO_ADDR
40098: GO 40116
// min_x := x - r ;
40100: LD_ADDR_VAR 0 7
40104: PUSH
40105: LD_VAR 0 5
40109: PUSH
40110: LD_VAR 0 4
40114: MINUS
40115: ST_TO_ADDR
// if y - r < 0 then
40116: LD_VAR 0 6
40120: PUSH
40121: LD_VAR 0 4
40125: MINUS
40126: PUSH
40127: LD_INT 0
40129: LESS
40130: IFFALSE 40142
// min_y := 0 else
40132: LD_ADDR_VAR 0 8
40136: PUSH
40137: LD_INT 0
40139: ST_TO_ADDR
40140: GO 40158
// min_y := y - r ;
40142: LD_ADDR_VAR 0 8
40146: PUSH
40147: LD_VAR 0 6
40151: PUSH
40152: LD_VAR 0 4
40156: MINUS
40157: ST_TO_ADDR
// max_x := x + r ;
40158: LD_ADDR_VAR 0 9
40162: PUSH
40163: LD_VAR 0 5
40167: PUSH
40168: LD_VAR 0 4
40172: PLUS
40173: ST_TO_ADDR
// max_y := y + r ;
40174: LD_ADDR_VAR 0 10
40178: PUSH
40179: LD_VAR 0 6
40183: PUSH
40184: LD_VAR 0 4
40188: PLUS
40189: ST_TO_ADDR
// for _x = min_x to max_x do
40190: LD_ADDR_VAR 0 11
40194: PUSH
40195: DOUBLE
40196: LD_VAR 0 7
40200: DEC
40201: ST_TO_ADDR
40202: LD_VAR 0 9
40206: PUSH
40207: FOR_TO
40208: IFFALSE 40290
// for _y = min_y to max_y do
40210: LD_ADDR_VAR 0 12
40214: PUSH
40215: DOUBLE
40216: LD_VAR 0 8
40220: DEC
40221: ST_TO_ADDR
40222: LD_VAR 0 10
40226: PUSH
40227: FOR_TO
40228: IFFALSE 40286
// begin if not ValidHex ( _x , _y ) then
40230: LD_VAR 0 11
40234: PPUSH
40235: LD_VAR 0 12
40239: PPUSH
40240: CALL_OW 488
40244: NOT
40245: IFFALSE 40249
// continue ;
40247: GO 40227
// if MineAtPos ( _x , _y ) then
40249: LD_VAR 0 11
40253: PPUSH
40254: LD_VAR 0 12
40258: PPUSH
40259: CALL_OW 458
40263: IFFALSE 40284
// ViewMineAtPos ( _x , _y , side ) ;
40265: LD_VAR 0 11
40269: PPUSH
40270: LD_VAR 0 12
40274: PPUSH
40275: LD_VAR 0 3
40279: PPUSH
40280: CALL_OW 457
// end ;
40284: GO 40227
40286: POP
40287: POP
40288: GO 40207
40290: POP
40291: POP
// end ;
40292: LD_VAR 0 2
40296: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
40297: LD_INT 0
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
// if not units then
40306: LD_VAR 0 1
40310: NOT
40311: IFFALSE 40315
// exit ;
40313: GO 40779
// scaners := [ ] ;
40315: LD_ADDR_VAR 0 6
40319: PUSH
40320: EMPTY
40321: ST_TO_ADDR
// for i in units do
40322: LD_ADDR_VAR 0 3
40326: PUSH
40327: LD_VAR 0 1
40331: PUSH
40332: FOR_IN
40333: IFFALSE 40490
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
40335: LD_VAR 0 3
40339: PPUSH
40340: CALL_OW 264
40344: PUSH
40345: LD_INT 11
40347: NONEQUAL
40348: IFTRUE 40362
40350: PUSH
40351: LD_VAR 0 3
40355: PPUSH
40356: CALL_OW 302
40360: NOT
40361: OR
40362: IFTRUE 40379
40364: PUSH
40365: LD_VAR 0 3
40369: PPUSH
40370: CALL_OW 110
40374: PUSH
40375: LD_INT 502
40377: EQUAL
40378: OR
40379: IFFALSE 40383
// continue ;
40381: GO 40332
// ComStop ( i ) ;
40383: LD_VAR 0 3
40387: PPUSH
40388: CALL_OW 141
// x := GetX ( i ) ;
40392: LD_ADDR_VAR 0 4
40396: PUSH
40397: LD_VAR 0 3
40401: PPUSH
40402: CALL_OW 250
40406: ST_TO_ADDR
// y := GetY ( i ) ;
40407: LD_ADDR_VAR 0 5
40411: PUSH
40412: LD_VAR 0 3
40416: PPUSH
40417: CALL_OW 251
40421: ST_TO_ADDR
// if GetSide ( i ) = your_side then
40422: LD_VAR 0 3
40426: PPUSH
40427: CALL_OW 255
40431: PUSH
40432: LD_OWVAR 2
40436: EQUAL
40437: IFFALSE 40456
// PlaySoundXY ( x , y , mineDetector ) ;
40439: LD_VAR 0 4
40443: PPUSH
40444: LD_VAR 0 5
40448: PPUSH
40449: LD_STRING mineDetector
40451: PPUSH
40452: CALL_OW 366
// scaners := Join ( scaners , i ) ;
40456: LD_ADDR_VAR 0 6
40460: PUSH
40461: LD_VAR 0 6
40465: PPUSH
40466: LD_VAR 0 3
40470: PPUSH
40471: CALL 79011 0 2
40475: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
40476: LD_VAR 0 3
40480: PPUSH
40481: LD_INT 502
40483: PPUSH
40484: CALL_OW 109
// end ;
40488: GO 40332
40490: POP
40491: POP
// if not scaners then
40492: LD_VAR 0 6
40496: NOT
40497: IFFALSE 40501
// exit ;
40499: GO 40779
// wait ( 3 ) ;
40501: LD_INT 3
40503: PPUSH
40504: CALL_OW 67
// timer := 6 ;
40508: LD_ADDR_VAR 0 7
40512: PUSH
40513: LD_INT 6
40515: ST_TO_ADDR
// repeat for i in scaners do
40516: LD_ADDR_VAR 0 3
40520: PUSH
40521: LD_VAR 0 6
40525: PUSH
40526: FOR_IN
40527: IFFALSE 40677
// begin side := GetSide ( i ) ;
40529: LD_ADDR_VAR 0 8
40533: PUSH
40534: LD_VAR 0 3
40538: PPUSH
40539: CALL_OW 255
40543: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
40544: LD_VAR 0 3
40548: PPUSH
40549: CALL_OW 302
40553: NOT
40554: IFTRUE 40567
40556: PUSH
40557: LD_VAR 0 3
40561: PPUSH
40562: CALL_OW 314
40566: OR
40567: IFTRUE 40598
40569: PUSH
40570: LD_VAR 0 3
40574: PPUSH
40575: CALL_OW 263
40579: PUSH
40580: LD_INT 1
40582: EQUAL
40583: IFFALSE 40597
40585: PUSH
40586: LD_VAR 0 3
40590: PPUSH
40591: CALL_OW 311
40595: NOT
40596: AND
40597: OR
40598: IFFALSE 40642
// begin SetUnitDisplayNumber ( i , 0 ) ;
40600: LD_VAR 0 3
40604: PPUSH
40605: LD_INT 0
40607: PPUSH
40608: CALL_OW 505
// SetTag ( i , 0 ) ;
40612: LD_VAR 0 3
40616: PPUSH
40617: LD_INT 0
40619: PPUSH
40620: CALL_OW 109
// scaners := scaners diff i ;
40624: LD_ADDR_VAR 0 6
40628: PUSH
40629: LD_VAR 0 6
40633: PUSH
40634: LD_VAR 0 3
40638: DIFF
40639: ST_TO_ADDR
// continue ;
40640: GO 40526
// end ; if side in [ your_side , 9 ] then
40642: LD_VAR 0 8
40646: PUSH
40647: LD_OWVAR 2
40651: PUSH
40652: LD_INT 9
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: IN
40659: IFFALSE 40675
// SetUnitDisplayNumber ( i , timer ) ;
40661: LD_VAR 0 3
40665: PPUSH
40666: LD_VAR 0 7
40670: PPUSH
40671: CALL_OW 505
// end ;
40675: GO 40526
40677: POP
40678: POP
// if not scaners then
40679: LD_VAR 0 6
40683: NOT
40684: IFFALSE 40688
// exit ;
40686: GO 40779
// timer := Dec ( timer ) ;
40688: LD_ADDR_VAR 0 7
40692: PUSH
40693: LD_VAR 0 7
40697: PPUSH
40698: CALL 80406 0 1
40702: ST_TO_ADDR
// wait ( 0 0$1 ) ;
40703: LD_INT 35
40705: PPUSH
40706: CALL_OW 67
// until timer = 0 ;
40710: LD_VAR 0 7
40714: PUSH
40715: LD_INT 0
40717: EQUAL
40718: IFFALSE 40516
// if not scaners then
40720: LD_VAR 0 6
40724: NOT
40725: IFFALSE 40729
// exit ;
40727: GO 40779
// for i in scaners do
40729: LD_ADDR_VAR 0 3
40733: PUSH
40734: LD_VAR 0 6
40738: PUSH
40739: FOR_IN
40740: IFFALSE 40777
// begin SetUnitDisplayNumber ( i , 0 ) ;
40742: LD_VAR 0 3
40746: PPUSH
40747: LD_INT 0
40749: PPUSH
40750: CALL_OW 505
// SetTag ( i , 0 ) ;
40754: LD_VAR 0 3
40758: PPUSH
40759: LD_INT 0
40761: PPUSH
40762: CALL_OW 109
// RevealDetectorMine ( i ) ;
40766: LD_VAR 0 3
40770: PPUSH
40771: CALL 39999 0 1
// end ;
40775: GO 40739
40777: POP
40778: POP
// end ;
40779: LD_VAR 0 2
40783: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
40784: LD_INT 0
40786: PPUSH
// if p1 = mine_detector_mode then
40787: LD_VAR 0 2
40791: PUSH
40792: LD_INT 103
40794: EQUAL
40795: IFFALSE 40806
// DetectMine ( units ) ;
40797: LD_VAR 0 1
40801: PPUSH
40802: CALL 40297 0 1
// end ; end_of_file
40806: LD_VAR 0 7
40810: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40811: LD_INT 0
40813: PPUSH
40814: PPUSH
// if exist_mode then
40815: LD_VAR 0 2
40819: IFFALSE 40865
// begin unit := CreateCharacter ( prefix & ident ) ;
40821: LD_ADDR_VAR 0 5
40825: PUSH
40826: LD_VAR 0 3
40830: PUSH
40831: LD_VAR 0 1
40835: STR
40836: PPUSH
40837: CALL_OW 34
40841: ST_TO_ADDR
// if unit then
40842: LD_VAR 0 5
40846: IFFALSE 40863
// DeleteCharacters ( prefix & ident ) ;
40848: LD_VAR 0 3
40852: PUSH
40853: LD_VAR 0 1
40857: STR
40858: PPUSH
40859: CALL_OW 40
// end else
40863: GO 40880
// unit := NewCharacter ( ident ) ;
40865: LD_ADDR_VAR 0 5
40869: PUSH
40870: LD_VAR 0 1
40874: PPUSH
40875: CALL_OW 25
40879: ST_TO_ADDR
// result := unit ;
40880: LD_ADDR_VAR 0 4
40884: PUSH
40885: LD_VAR 0 5
40889: ST_TO_ADDR
// end ;
40890: LD_VAR 0 4
40894: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
40895: LD_INT 0
40897: PPUSH
40898: PPUSH
// if exist_mode then
40899: LD_VAR 0 2
40903: IFFALSE 40928
// unit := CreateCharacter ( prefix & ident ) else
40905: LD_ADDR_VAR 0 5
40909: PUSH
40910: LD_VAR 0 3
40914: PUSH
40915: LD_VAR 0 1
40919: STR
40920: PPUSH
40921: CALL_OW 34
40925: ST_TO_ADDR
40926: GO 40943
// unit := NewCharacter ( ident ) ;
40928: LD_ADDR_VAR 0 5
40932: PUSH
40933: LD_VAR 0 1
40937: PPUSH
40938: CALL_OW 25
40942: ST_TO_ADDR
// result := unit ;
40943: LD_ADDR_VAR 0 4
40947: PUSH
40948: LD_VAR 0 5
40952: ST_TO_ADDR
// end ;
40953: LD_VAR 0 4
40957: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40958: LD_INT 0
40960: PPUSH
40961: PPUSH
// if not side or not nation then
40962: LD_VAR 0 1
40966: NOT
40967: IFTRUE 40976
40969: PUSH
40970: LD_VAR 0 2
40974: NOT
40975: OR
40976: IFFALSE 40980
// exit ;
40978: GO 41774
// case nation of nation_american :
40980: LD_VAR 0 2
40984: PUSH
40985: LD_INT 1
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41215
40993: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
40994: LD_ADDR_VAR 0 4
40998: PUSH
40999: LD_INT 35
41001: PUSH
41002: LD_INT 45
41004: PUSH
41005: LD_INT 46
41007: PUSH
41008: LD_INT 47
41010: PUSH
41011: LD_INT 82
41013: PUSH
41014: LD_INT 83
41016: PUSH
41017: LD_INT 84
41019: PUSH
41020: LD_INT 85
41022: PUSH
41023: LD_INT 86
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: LD_INT 6
41034: PUSH
41035: LD_INT 15
41037: PUSH
41038: LD_INT 16
41040: PUSH
41041: LD_INT 7
41043: PUSH
41044: LD_INT 12
41046: PUSH
41047: LD_INT 13
41049: PUSH
41050: LD_INT 10
41052: PUSH
41053: LD_INT 14
41055: PUSH
41056: LD_INT 20
41058: PUSH
41059: LD_INT 21
41061: PUSH
41062: LD_INT 22
41064: PUSH
41065: LD_INT 25
41067: PUSH
41068: LD_INT 32
41070: PUSH
41071: LD_INT 27
41073: PUSH
41074: LD_INT 36
41076: PUSH
41077: LD_INT 69
41079: PUSH
41080: LD_INT 39
41082: PUSH
41083: LD_INT 34
41085: PUSH
41086: LD_INT 40
41088: PUSH
41089: LD_INT 48
41091: PUSH
41092: LD_INT 49
41094: PUSH
41095: LD_INT 50
41097: PUSH
41098: LD_INT 51
41100: PUSH
41101: LD_INT 52
41103: PUSH
41104: LD_INT 53
41106: PUSH
41107: LD_INT 54
41109: PUSH
41110: LD_INT 55
41112: PUSH
41113: LD_INT 56
41115: PUSH
41116: LD_INT 57
41118: PUSH
41119: LD_INT 58
41121: PUSH
41122: LD_INT 59
41124: PUSH
41125: LD_INT 60
41127: PUSH
41128: LD_INT 61
41130: PUSH
41131: LD_INT 62
41133: PUSH
41134: LD_INT 80
41136: PUSH
41137: LD_INT 82
41139: PUSH
41140: LD_INT 83
41142: PUSH
41143: LD_INT 84
41145: PUSH
41146: LD_INT 85
41148: PUSH
41149: LD_INT 86
41151: PUSH
41152: LD_INT 90
41154: PUSH
41155: LD_INT 93
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: ST_TO_ADDR
41213: GO 41696
41215: LD_INT 2
41217: DOUBLE
41218: EQUAL
41219: IFTRUE 41223
41221: GO 41457
41223: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
41224: LD_ADDR_VAR 0 4
41228: PUSH
41229: LD_INT 35
41231: PUSH
41232: LD_INT 45
41234: PUSH
41235: LD_INT 46
41237: PUSH
41238: LD_INT 47
41240: PUSH
41241: LD_INT 82
41243: PUSH
41244: LD_INT 83
41246: PUSH
41247: LD_INT 84
41249: PUSH
41250: LD_INT 85
41252: PUSH
41253: LD_INT 87
41255: PUSH
41256: LD_INT 70
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 11
41264: PUSH
41265: LD_INT 3
41267: PUSH
41268: LD_INT 4
41270: PUSH
41271: LD_INT 5
41273: PUSH
41274: LD_INT 6
41276: PUSH
41277: LD_INT 15
41279: PUSH
41280: LD_INT 18
41282: PUSH
41283: LD_INT 7
41285: PUSH
41286: LD_INT 17
41288: PUSH
41289: LD_INT 8
41291: PUSH
41292: LD_INT 20
41294: PUSH
41295: LD_INT 21
41297: PUSH
41298: LD_INT 22
41300: PUSH
41301: LD_INT 72
41303: PUSH
41304: LD_INT 26
41306: PUSH
41307: LD_INT 69
41309: PUSH
41310: LD_INT 39
41312: PUSH
41313: LD_INT 40
41315: PUSH
41316: LD_INT 41
41318: PUSH
41319: LD_INT 42
41321: PUSH
41322: LD_INT 43
41324: PUSH
41325: LD_INT 48
41327: PUSH
41328: LD_INT 49
41330: PUSH
41331: LD_INT 50
41333: PUSH
41334: LD_INT 51
41336: PUSH
41337: LD_INT 52
41339: PUSH
41340: LD_INT 53
41342: PUSH
41343: LD_INT 54
41345: PUSH
41346: LD_INT 55
41348: PUSH
41349: LD_INT 56
41351: PUSH
41352: LD_INT 60
41354: PUSH
41355: LD_INT 61
41357: PUSH
41358: LD_INT 62
41360: PUSH
41361: LD_INT 66
41363: PUSH
41364: LD_INT 67
41366: PUSH
41367: LD_INT 68
41369: PUSH
41370: LD_INT 81
41372: PUSH
41373: LD_INT 82
41375: PUSH
41376: LD_INT 83
41378: PUSH
41379: LD_INT 84
41381: PUSH
41382: LD_INT 85
41384: PUSH
41385: LD_INT 87
41387: PUSH
41388: LD_INT 88
41390: PUSH
41391: LD_INT 92
41393: PUSH
41394: LD_INT 94
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: ST_TO_ADDR
41455: GO 41696
41457: LD_INT 3
41459: DOUBLE
41460: EQUAL
41461: IFTRUE 41465
41463: GO 41695
41465: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
41466: LD_ADDR_VAR 0 4
41470: PUSH
41471: LD_INT 46
41473: PUSH
41474: LD_INT 47
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: LD_INT 82
41485: PUSH
41486: LD_INT 83
41488: PUSH
41489: LD_INT 84
41491: PUSH
41492: LD_INT 85
41494: PUSH
41495: LD_INT 86
41497: PUSH
41498: LD_INT 11
41500: PUSH
41501: LD_INT 9
41503: PUSH
41504: LD_INT 20
41506: PUSH
41507: LD_INT 19
41509: PUSH
41510: LD_INT 21
41512: PUSH
41513: LD_INT 24
41515: PUSH
41516: LD_INT 22
41518: PUSH
41519: LD_INT 25
41521: PUSH
41522: LD_INT 28
41524: PUSH
41525: LD_INT 29
41527: PUSH
41528: LD_INT 30
41530: PUSH
41531: LD_INT 31
41533: PUSH
41534: LD_INT 37
41536: PUSH
41537: LD_INT 38
41539: PUSH
41540: LD_INT 32
41542: PUSH
41543: LD_INT 27
41545: PUSH
41546: LD_INT 33
41548: PUSH
41549: LD_INT 69
41551: PUSH
41552: LD_INT 39
41554: PUSH
41555: LD_INT 34
41557: PUSH
41558: LD_INT 40
41560: PUSH
41561: LD_INT 71
41563: PUSH
41564: LD_INT 23
41566: PUSH
41567: LD_INT 44
41569: PUSH
41570: LD_INT 48
41572: PUSH
41573: LD_INT 49
41575: PUSH
41576: LD_INT 50
41578: PUSH
41579: LD_INT 51
41581: PUSH
41582: LD_INT 52
41584: PUSH
41585: LD_INT 53
41587: PUSH
41588: LD_INT 54
41590: PUSH
41591: LD_INT 55
41593: PUSH
41594: LD_INT 56
41596: PUSH
41597: LD_INT 57
41599: PUSH
41600: LD_INT 58
41602: PUSH
41603: LD_INT 59
41605: PUSH
41606: LD_INT 63
41608: PUSH
41609: LD_INT 64
41611: PUSH
41612: LD_INT 65
41614: PUSH
41615: LD_INT 82
41617: PUSH
41618: LD_INT 83
41620: PUSH
41621: LD_INT 84
41623: PUSH
41624: LD_INT 85
41626: PUSH
41627: LD_INT 86
41629: PUSH
41630: LD_INT 89
41632: PUSH
41633: LD_INT 91
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: ST_TO_ADDR
41693: GO 41696
41695: POP
// if state > - 1 and state < 3 then
41696: LD_VAR 0 3
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: GREATER
41705: IFFALSE 41717
41707: PUSH
41708: LD_VAR 0 3
41712: PUSH
41713: LD_INT 3
41715: LESS
41716: AND
41717: IFFALSE 41774
// for i in result do
41719: LD_ADDR_VAR 0 5
41723: PUSH
41724: LD_VAR 0 4
41728: PUSH
41729: FOR_IN
41730: IFFALSE 41772
// if GetTech ( i , side ) <> state then
41732: LD_VAR 0 5
41736: PPUSH
41737: LD_VAR 0 1
41741: PPUSH
41742: CALL_OW 321
41746: PUSH
41747: LD_VAR 0 3
41751: NONEQUAL
41752: IFFALSE 41770
// result := result diff i ;
41754: LD_ADDR_VAR 0 4
41758: PUSH
41759: LD_VAR 0 4
41763: PUSH
41764: LD_VAR 0 5
41768: DIFF
41769: ST_TO_ADDR
41770: GO 41729
41772: POP
41773: POP
// end ;
41774: LD_VAR 0 4
41778: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41779: LD_INT 0
41781: PPUSH
41782: PPUSH
41783: PPUSH
// result := true ;
41784: LD_ADDR_VAR 0 3
41788: PUSH
41789: LD_INT 1
41791: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41792: LD_ADDR_VAR 0 5
41796: PUSH
41797: LD_VAR 0 2
41801: PPUSH
41802: CALL_OW 480
41806: ST_TO_ADDR
// if not tmp then
41807: LD_VAR 0 5
41811: NOT
41812: IFFALSE 41816
// exit ;
41814: GO 41865
// for i in tmp do
41816: LD_ADDR_VAR 0 4
41820: PUSH
41821: LD_VAR 0 5
41825: PUSH
41826: FOR_IN
41827: IFFALSE 41863
// if GetTech ( i , side ) <> state_researched then
41829: LD_VAR 0 4
41833: PPUSH
41834: LD_VAR 0 1
41838: PPUSH
41839: CALL_OW 321
41843: PUSH
41844: LD_INT 2
41846: NONEQUAL
41847: IFFALSE 41861
// begin result := false ;
41849: LD_ADDR_VAR 0 3
41853: PUSH
41854: LD_INT 0
41856: ST_TO_ADDR
// exit ;
41857: POP
41858: POP
41859: GO 41865
// end ;
41861: GO 41826
41863: POP
41864: POP
// end ;
41865: LD_VAR 0 3
41869: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41870: LD_INT 0
41872: PPUSH
41873: PPUSH
41874: PPUSH
41875: PPUSH
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41885: LD_VAR 0 1
41889: NOT
41890: IFTRUE 41907
41892: PUSH
41893: LD_VAR 0 1
41897: PPUSH
41898: CALL_OW 257
41902: PUSH
41903: LD_INT 9
41905: NONEQUAL
41906: OR
41907: IFFALSE 41911
// exit ;
41909: GO 42490
// side := GetSide ( unit ) ;
41911: LD_ADDR_VAR 0 9
41915: PUSH
41916: LD_VAR 0 1
41920: PPUSH
41921: CALL_OW 255
41925: ST_TO_ADDR
// tech_space := tech_spacanom ;
41926: LD_ADDR_VAR 0 12
41930: PUSH
41931: LD_INT 29
41933: ST_TO_ADDR
// tech_time := tech_taurad ;
41934: LD_ADDR_VAR 0 13
41938: PUSH
41939: LD_INT 28
41941: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41942: LD_ADDR_VAR 0 11
41946: PUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: CALL_OW 310
41956: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41957: LD_VAR 0 11
41961: PPUSH
41962: CALL_OW 247
41966: PUSH
41967: LD_INT 2
41969: EQUAL
41970: IFFALSE 41974
// exit ;
41972: GO 42490
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41974: LD_ADDR_VAR 0 8
41978: PUSH
41979: LD_INT 81
41981: PUSH
41982: LD_VAR 0 9
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: LD_INT 21
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PPUSH
42012: CALL_OW 69
42016: ST_TO_ADDR
// if not tmp then
42017: LD_VAR 0 8
42021: NOT
42022: IFFALSE 42026
// exit ;
42024: GO 42490
// if in_unit then
42026: LD_VAR 0 11
42030: IFFALSE 42054
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42032: LD_ADDR_VAR 0 10
42036: PUSH
42037: LD_VAR 0 8
42041: PPUSH
42042: LD_VAR 0 11
42046: PPUSH
42047: CALL_OW 74
42051: ST_TO_ADDR
42052: GO 42074
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42054: LD_ADDR_VAR 0 10
42058: PUSH
42059: LD_VAR 0 8
42063: PPUSH
42064: LD_VAR 0 1
42068: PPUSH
42069: CALL_OW 74
42073: ST_TO_ADDR
// if not enemy then
42074: LD_VAR 0 10
42078: NOT
42079: IFFALSE 42083
// exit ;
42081: GO 42490
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42083: LD_VAR 0 11
42087: IFFALSE 42109
42089: PUSH
42090: LD_VAR 0 11
42094: PPUSH
42095: LD_VAR 0 10
42099: PPUSH
42100: CALL_OW 296
42104: PUSH
42105: LD_INT 13
42107: GREATER
42108: AND
42109: IFTRUE 42131
42111: PUSH
42112: LD_VAR 0 1
42116: PPUSH
42117: LD_VAR 0 10
42121: PPUSH
42122: CALL_OW 296
42126: PUSH
42127: LD_INT 12
42129: GREATER
42130: OR
42131: IFFALSE 42135
// exit ;
42133: GO 42490
// missile := [ 1 ] ;
42135: LD_ADDR_VAR 0 14
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42146: LD_VAR 0 9
42150: PPUSH
42151: LD_VAR 0 12
42155: PPUSH
42156: CALL_OW 325
42160: IFFALSE 42189
// missile := Replace ( missile , missile + 1 , 2 ) ;
42162: LD_ADDR_VAR 0 14
42166: PUSH
42167: LD_VAR 0 14
42171: PPUSH
42172: LD_VAR 0 14
42176: PUSH
42177: LD_INT 1
42179: PLUS
42180: PPUSH
42181: LD_INT 2
42183: PPUSH
42184: CALL_OW 1
42188: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42189: LD_VAR 0 9
42193: PPUSH
42194: LD_VAR 0 13
42198: PPUSH
42199: CALL_OW 325
42203: IFFALSE 42227
42205: PUSH
42206: LD_VAR 0 10
42210: PPUSH
42211: CALL_OW 255
42215: PPUSH
42216: LD_VAR 0 13
42220: PPUSH
42221: CALL_OW 325
42225: NOT
42226: AND
42227: IFFALSE 42256
// missile := Replace ( missile , missile + 1 , 3 ) ;
42229: LD_ADDR_VAR 0 14
42233: PUSH
42234: LD_VAR 0 14
42238: PPUSH
42239: LD_VAR 0 14
42243: PUSH
42244: LD_INT 1
42246: PLUS
42247: PPUSH
42248: LD_INT 3
42250: PPUSH
42251: CALL_OW 1
42255: ST_TO_ADDR
// if missile < 2 then
42256: LD_VAR 0 14
42260: PUSH
42261: LD_INT 2
42263: LESS
42264: IFFALSE 42268
// exit ;
42266: GO 42490
// x := GetX ( enemy ) ;
42268: LD_ADDR_VAR 0 4
42272: PUSH
42273: LD_VAR 0 10
42277: PPUSH
42278: CALL_OW 250
42282: ST_TO_ADDR
// y := GetY ( enemy ) ;
42283: LD_ADDR_VAR 0 5
42287: PUSH
42288: LD_VAR 0 10
42292: PPUSH
42293: CALL_OW 251
42297: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42298: LD_ADDR_VAR 0 6
42302: PUSH
42303: LD_VAR 0 4
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PPUSH
42312: LD_INT 1
42314: PPUSH
42315: CALL_OW 12
42319: PLUS
42320: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42321: LD_ADDR_VAR 0 7
42325: PUSH
42326: LD_VAR 0 5
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PPUSH
42335: LD_INT 1
42337: PPUSH
42338: CALL_OW 12
42342: PLUS
42343: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42344: LD_VAR 0 6
42348: PPUSH
42349: LD_VAR 0 7
42353: PPUSH
42354: CALL_OW 488
42358: NOT
42359: IFFALSE 42381
// begin _x := x ;
42361: LD_ADDR_VAR 0 6
42365: PUSH
42366: LD_VAR 0 4
42370: ST_TO_ADDR
// _y := y ;
42371: LD_ADDR_VAR 0 7
42375: PUSH
42376: LD_VAR 0 5
42380: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42381: LD_ADDR_VAR 0 3
42385: PUSH
42386: LD_INT 1
42388: PPUSH
42389: LD_VAR 0 14
42393: PPUSH
42394: CALL_OW 12
42398: ST_TO_ADDR
// case i of 1 :
42399: LD_VAR 0 3
42403: PUSH
42404: LD_INT 1
42406: DOUBLE
42407: EQUAL
42408: IFTRUE 42412
42410: GO 42429
42412: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42413: LD_VAR 0 1
42417: PPUSH
42418: LD_VAR 0 10
42422: PPUSH
42423: CALL_OW 115
42427: GO 42490
42429: LD_INT 2
42431: DOUBLE
42432: EQUAL
42433: IFTRUE 42437
42435: GO 42459
42437: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_VAR 0 6
42447: PPUSH
42448: LD_VAR 0 7
42452: PPUSH
42453: CALL_OW 153
42457: GO 42490
42459: LD_INT 3
42461: DOUBLE
42462: EQUAL
42463: IFTRUE 42467
42465: GO 42489
42467: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42468: LD_VAR 0 1
42472: PPUSH
42473: LD_VAR 0 6
42477: PPUSH
42478: LD_VAR 0 7
42482: PPUSH
42483: CALL_OW 154
42487: GO 42490
42489: POP
// end ;
42490: LD_VAR 0 2
42494: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42495: LD_INT 0
42497: PPUSH
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
// if not unit or not building then
42503: LD_VAR 0 1
42507: NOT
42508: IFTRUE 42517
42510: PUSH
42511: LD_VAR 0 2
42515: NOT
42516: OR
42517: IFFALSE 42521
// exit ;
42519: GO 42679
// x := GetX ( building ) ;
42521: LD_ADDR_VAR 0 5
42525: PUSH
42526: LD_VAR 0 2
42530: PPUSH
42531: CALL_OW 250
42535: ST_TO_ADDR
// y := GetY ( building ) ;
42536: LD_ADDR_VAR 0 6
42540: PUSH
42541: LD_VAR 0 2
42545: PPUSH
42546: CALL_OW 251
42550: ST_TO_ADDR
// for i := 0 to 5 do
42551: LD_ADDR_VAR 0 4
42555: PUSH
42556: DOUBLE
42557: LD_INT 0
42559: DEC
42560: ST_TO_ADDR
42561: LD_INT 5
42563: PUSH
42564: FOR_TO
42565: IFFALSE 42677
// begin _x := ShiftX ( x , i , 3 ) ;
42567: LD_ADDR_VAR 0 7
42571: PUSH
42572: LD_VAR 0 5
42576: PPUSH
42577: LD_VAR 0 4
42581: PPUSH
42582: LD_INT 3
42584: PPUSH
42585: CALL_OW 272
42589: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42590: LD_ADDR_VAR 0 8
42594: PUSH
42595: LD_VAR 0 6
42599: PPUSH
42600: LD_VAR 0 4
42604: PPUSH
42605: LD_INT 3
42607: PPUSH
42608: CALL_OW 273
42612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42613: LD_VAR 0 7
42617: PPUSH
42618: LD_VAR 0 8
42622: PPUSH
42623: CALL_OW 488
42627: NOT
42628: IFFALSE 42632
// continue ;
42630: GO 42564
// if HexInfo ( _x , _y ) = 0 then
42632: LD_VAR 0 7
42636: PPUSH
42637: LD_VAR 0 8
42641: PPUSH
42642: CALL_OW 428
42646: PUSH
42647: LD_INT 0
42649: EQUAL
42650: IFFALSE 42675
// begin ComMoveXY ( unit , _x , _y ) ;
42652: LD_VAR 0 1
42656: PPUSH
42657: LD_VAR 0 7
42661: PPUSH
42662: LD_VAR 0 8
42666: PPUSH
42667: CALL_OW 111
// exit ;
42671: POP
42672: POP
42673: GO 42679
// end ; end ;
42675: GO 42564
42677: POP
42678: POP
// end ;
42679: LD_VAR 0 3
42683: RET
// export function ScanBase ( side , base_area ) ; begin
42684: LD_INT 0
42686: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: LD_VAR 0 2
42696: PPUSH
42697: LD_INT 81
42699: PUSH
42700: LD_VAR 0 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PPUSH
42709: CALL_OW 70
42713: ST_TO_ADDR
// end ;
42714: LD_VAR 0 3
42718: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42719: LD_INT 0
42721: PPUSH
42722: PPUSH
42723: PPUSH
42724: PPUSH
// result := false ;
42725: LD_ADDR_VAR 0 2
42729: PUSH
42730: LD_INT 0
42732: ST_TO_ADDR
// side := GetSide ( unit ) ;
42733: LD_ADDR_VAR 0 3
42737: PUSH
42738: LD_VAR 0 1
42742: PPUSH
42743: CALL_OW 255
42747: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42748: LD_ADDR_VAR 0 4
42752: PUSH
42753: LD_VAR 0 1
42757: PPUSH
42758: CALL_OW 248
42762: ST_TO_ADDR
// case nat of 1 :
42763: LD_VAR 0 4
42767: PUSH
42768: LD_INT 1
42770: DOUBLE
42771: EQUAL
42772: IFTRUE 42776
42774: GO 42787
42776: POP
// tech := tech_lassight ; 2 :
42777: LD_ADDR_VAR 0 5
42781: PUSH
42782: LD_INT 12
42784: ST_TO_ADDR
42785: GO 42826
42787: LD_INT 2
42789: DOUBLE
42790: EQUAL
42791: IFTRUE 42795
42793: GO 42806
42795: POP
// tech := tech_mortar ; 3 :
42796: LD_ADDR_VAR 0 5
42800: PUSH
42801: LD_INT 41
42803: ST_TO_ADDR
42804: GO 42826
42806: LD_INT 3
42808: DOUBLE
42809: EQUAL
42810: IFTRUE 42814
42812: GO 42825
42814: POP
// tech := tech_bazooka ; end ;
42815: LD_ADDR_VAR 0 5
42819: PUSH
42820: LD_INT 44
42822: ST_TO_ADDR
42823: GO 42826
42825: POP
// if Researched ( side , tech ) then
42826: LD_VAR 0 3
42830: PPUSH
42831: LD_VAR 0 5
42835: PPUSH
42836: CALL_OW 325
42840: IFFALSE 42867
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42842: LD_ADDR_VAR 0 2
42846: PUSH
42847: LD_INT 5
42849: PUSH
42850: LD_INT 8
42852: PUSH
42853: LD_INT 9
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: PUSH
42861: LD_VAR 0 4
42865: ARRAY
42866: ST_TO_ADDR
// end ;
42867: LD_VAR 0 2
42871: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42872: LD_INT 0
42874: PPUSH
42875: PPUSH
42876: PPUSH
// if not mines then
42877: LD_VAR 0 2
42881: NOT
42882: IFFALSE 42886
// exit ;
42884: GO 43030
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42886: LD_ADDR_VAR 0 5
42890: PUSH
42891: LD_INT 81
42893: PUSH
42894: LD_VAR 0 1
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 3
42905: PUSH
42906: LD_INT 21
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PPUSH
42924: CALL_OW 69
42928: ST_TO_ADDR
// for i in mines do
42929: LD_ADDR_VAR 0 4
42933: PUSH
42934: LD_VAR 0 2
42938: PUSH
42939: FOR_IN
42940: IFFALSE 43028
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42942: LD_VAR 0 4
42946: PUSH
42947: LD_INT 1
42949: ARRAY
42950: PPUSH
42951: LD_VAR 0 4
42955: PUSH
42956: LD_INT 2
42958: ARRAY
42959: PPUSH
42960: CALL_OW 458
42964: NOT
42965: IFFALSE 42969
// continue ;
42967: GO 42939
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42969: LD_VAR 0 4
42973: PUSH
42974: LD_INT 1
42976: ARRAY
42977: PPUSH
42978: LD_VAR 0 4
42982: PUSH
42983: LD_INT 2
42985: ARRAY
42986: PPUSH
42987: CALL_OW 428
42991: PUSH
42992: LD_VAR 0 5
42996: IN
42997: IFFALSE 43026
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42999: LD_VAR 0 4
43003: PUSH
43004: LD_INT 1
43006: ARRAY
43007: PPUSH
43008: LD_VAR 0 4
43012: PUSH
43013: LD_INT 2
43015: ARRAY
43016: PPUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: CALL_OW 456
// end ;
43026: GO 42939
43028: POP
43029: POP
// end ;
43030: LD_VAR 0 3
43034: RET
// export function Count ( array ) ; begin
43035: LD_INT 0
43037: PPUSH
// result := array + 0 ;
43038: LD_ADDR_VAR 0 2
43042: PUSH
43043: LD_VAR 0 1
43047: PUSH
43048: LD_INT 0
43050: PLUS
43051: ST_TO_ADDR
// end ;
43052: LD_VAR 0 2
43056: RET
// export function IsEmpty ( building ) ; begin
43057: LD_INT 0
43059: PPUSH
// if not building then
43060: LD_VAR 0 1
43064: NOT
43065: IFFALSE 43069
// exit ;
43067: GO 43112
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43069: LD_ADDR_VAR 0 2
43073: PUSH
43074: LD_VAR 0 1
43078: PUSH
43079: LD_INT 22
43081: PUSH
43082: LD_VAR 0 1
43086: PPUSH
43087: CALL_OW 255
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 58
43098: PUSH
43099: EMPTY
43100: LIST
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PPUSH
43106: CALL_OW 69
43110: IN
43111: ST_TO_ADDR
// end ;
43112: LD_VAR 0 2
43116: RET
// export function IsNotFull ( building ) ; var places ; begin
43117: LD_INT 0
43119: PPUSH
43120: PPUSH
// if not building then
43121: LD_VAR 0 1
43125: NOT
43126: IFFALSE 43130
// exit ;
43128: GO 43158
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43130: LD_ADDR_VAR 0 2
43134: PUSH
43135: LD_VAR 0 1
43139: PPUSH
43140: LD_INT 3
43142: PUSH
43143: LD_INT 62
43145: PUSH
43146: EMPTY
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PPUSH
43153: CALL_OW 72
43157: ST_TO_ADDR
// end ;
43158: LD_VAR 0 2
43162: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43163: LD_INT 0
43165: PPUSH
43166: PPUSH
43167: PPUSH
43168: PPUSH
// tmp := [ ] ;
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: EMPTY
43175: ST_TO_ADDR
// list := [ ] ;
43176: LD_ADDR_VAR 0 5
43180: PUSH
43181: EMPTY
43182: ST_TO_ADDR
// for i = 16 to 25 do
43183: LD_ADDR_VAR 0 4
43187: PUSH
43188: DOUBLE
43189: LD_INT 16
43191: DEC
43192: ST_TO_ADDR
43193: LD_INT 25
43195: PUSH
43196: FOR_TO
43197: IFFALSE 43270
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43199: LD_ADDR_VAR 0 3
43203: PUSH
43204: LD_VAR 0 3
43208: PUSH
43209: LD_INT 22
43211: PUSH
43212: LD_VAR 0 1
43216: PPUSH
43217: CALL_OW 255
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 91
43228: PUSH
43229: LD_VAR 0 1
43233: PUSH
43234: LD_INT 6
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 30
43244: PUSH
43245: LD_VAR 0 4
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: LIST
43258: PUSH
43259: EMPTY
43260: LIST
43261: PPUSH
43262: CALL_OW 69
43266: ADD
43267: ST_TO_ADDR
43268: GO 43196
43270: POP
43271: POP
// for i = 1 to tmp do
43272: LD_ADDR_VAR 0 4
43276: PUSH
43277: DOUBLE
43278: LD_INT 1
43280: DEC
43281: ST_TO_ADDR
43282: LD_VAR 0 3
43286: PUSH
43287: FOR_TO
43288: IFFALSE 43376
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43290: LD_ADDR_VAR 0 5
43294: PUSH
43295: LD_VAR 0 5
43299: PUSH
43300: LD_VAR 0 3
43304: PUSH
43305: LD_VAR 0 4
43309: ARRAY
43310: PPUSH
43311: CALL_OW 266
43315: PUSH
43316: LD_VAR 0 3
43320: PUSH
43321: LD_VAR 0 4
43325: ARRAY
43326: PPUSH
43327: CALL_OW 250
43331: PUSH
43332: LD_VAR 0 3
43336: PUSH
43337: LD_VAR 0 4
43341: ARRAY
43342: PPUSH
43343: CALL_OW 251
43347: PUSH
43348: LD_VAR 0 3
43352: PUSH
43353: LD_VAR 0 4
43357: ARRAY
43358: PPUSH
43359: CALL_OW 254
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: PUSH
43370: EMPTY
43371: LIST
43372: ADD
43373: ST_TO_ADDR
43374: GO 43287
43376: POP
43377: POP
// result := list ;
43378: LD_ADDR_VAR 0 2
43382: PUSH
43383: LD_VAR 0 5
43387: ST_TO_ADDR
// end ;
43388: LD_VAR 0 2
43392: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43393: LD_INT 0
43395: PPUSH
43396: PPUSH
43397: PPUSH
43398: PPUSH
43399: PPUSH
43400: PPUSH
43401: PPUSH
// if not factory then
43402: LD_VAR 0 1
43406: NOT
43407: IFFALSE 43411
// exit ;
43409: GO 44014
// if control = control_apeman then
43411: LD_VAR 0 4
43415: PUSH
43416: LD_INT 5
43418: EQUAL
43419: IFFALSE 43528
// begin tmp := UnitsInside ( factory ) ;
43421: LD_ADDR_VAR 0 8
43425: PUSH
43426: LD_VAR 0 1
43430: PPUSH
43431: CALL_OW 313
43435: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43436: LD_VAR 0 8
43440: PPUSH
43441: LD_INT 25
43443: PUSH
43444: LD_INT 12
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PPUSH
43451: CALL_OW 72
43455: NOT
43456: IFFALSE 43466
// control := control_manual ;
43458: LD_ADDR_VAR 0 4
43462: PUSH
43463: LD_INT 1
43465: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43466: LD_ADDR_VAR 0 8
43470: PUSH
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL 43163 0 1
43480: ST_TO_ADDR
// if tmp then
43481: LD_VAR 0 8
43485: IFFALSE 43528
// begin for i in tmp do
43487: LD_ADDR_VAR 0 7
43491: PUSH
43492: LD_VAR 0 8
43496: PUSH
43497: FOR_IN
43498: IFFALSE 43526
// if i [ 1 ] = b_ext_radio then
43500: LD_VAR 0 7
43504: PUSH
43505: LD_INT 1
43507: ARRAY
43508: PUSH
43509: LD_INT 22
43511: EQUAL
43512: IFFALSE 43524
// begin control := control_remote ;
43514: LD_ADDR_VAR 0 4
43518: PUSH
43519: LD_INT 2
43521: ST_TO_ADDR
// break ;
43522: GO 43526
// end ;
43524: GO 43497
43526: POP
43527: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43528: LD_VAR 0 1
43532: PPUSH
43533: LD_VAR 0 2
43537: PPUSH
43538: LD_VAR 0 3
43542: PPUSH
43543: LD_VAR 0 4
43547: PPUSH
43548: LD_VAR 0 5
43552: PPUSH
43553: CALL_OW 448
43557: IFFALSE 43592
// begin result := [ chassis , engine , control , weapon ] ;
43559: LD_ADDR_VAR 0 6
43563: PUSH
43564: LD_VAR 0 2
43568: PUSH
43569: LD_VAR 0 3
43573: PUSH
43574: LD_VAR 0 4
43578: PUSH
43579: LD_VAR 0 5
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// exit ;
43590: GO 44014
// end ; _chassis := AvailableChassisList ( factory ) ;
43592: LD_ADDR_VAR 0 9
43596: PUSH
43597: LD_VAR 0 1
43601: PPUSH
43602: CALL_OW 475
43606: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43607: LD_ADDR_VAR 0 11
43611: PUSH
43612: LD_VAR 0 1
43616: PPUSH
43617: CALL_OW 476
43621: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43622: LD_ADDR_VAR 0 12
43626: PUSH
43627: LD_VAR 0 1
43631: PPUSH
43632: CALL_OW 477
43636: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43637: LD_ADDR_VAR 0 10
43641: PUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: CALL_OW 478
43651: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43652: LD_VAR 0 9
43656: NOT
43657: IFTRUE 43666
43659: PUSH
43660: LD_VAR 0 11
43664: NOT
43665: OR
43666: IFTRUE 43675
43668: PUSH
43669: LD_VAR 0 12
43673: NOT
43674: OR
43675: IFTRUE 43684
43677: PUSH
43678: LD_VAR 0 10
43682: NOT
43683: OR
43684: IFFALSE 43719
// begin result := [ chassis , engine , control , weapon ] ;
43686: LD_ADDR_VAR 0 6
43690: PUSH
43691: LD_VAR 0 2
43695: PUSH
43696: LD_VAR 0 3
43700: PUSH
43701: LD_VAR 0 4
43705: PUSH
43706: LD_VAR 0 5
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: ST_TO_ADDR
// exit ;
43717: GO 44014
// end ; if not chassis in _chassis then
43719: LD_VAR 0 2
43723: PUSH
43724: LD_VAR 0 9
43728: IN
43729: NOT
43730: IFFALSE 43756
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43732: LD_ADDR_VAR 0 2
43736: PUSH
43737: LD_VAR 0 9
43741: PUSH
43742: LD_INT 1
43744: PPUSH
43745: LD_VAR 0 9
43749: PPUSH
43750: CALL_OW 12
43754: ARRAY
43755: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43756: LD_VAR 0 2
43760: PPUSH
43761: LD_VAR 0 3
43765: PPUSH
43766: CALL 44019 0 2
43770: NOT
43771: IFFALSE 43832
// repeat engine := _engine [ 1 ] ;
43773: LD_ADDR_VAR 0 3
43777: PUSH
43778: LD_VAR 0 11
43782: PUSH
43783: LD_INT 1
43785: ARRAY
43786: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43787: LD_ADDR_VAR 0 11
43791: PUSH
43792: LD_VAR 0 11
43796: PPUSH
43797: LD_INT 1
43799: PPUSH
43800: CALL_OW 3
43804: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43805: LD_VAR 0 2
43809: PPUSH
43810: LD_VAR 0 3
43814: PPUSH
43815: CALL 44019 0 2
43819: IFTRUE 43830
43821: PUSH
43822: LD_VAR 0 11
43826: PUSH
43827: EMPTY
43828: EQUAL
43829: OR
43830: IFFALSE 43773
// if not control in _control then
43832: LD_VAR 0 4
43836: PUSH
43837: LD_VAR 0 12
43841: IN
43842: NOT
43843: IFFALSE 43869
// control := _control [ rand ( 1 , _control ) ] ;
43845: LD_ADDR_VAR 0 4
43849: PUSH
43850: LD_VAR 0 12
43854: PUSH
43855: LD_INT 1
43857: PPUSH
43858: LD_VAR 0 12
43862: PPUSH
43863: CALL_OW 12
43867: ARRAY
43868: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43869: LD_VAR 0 2
43873: PPUSH
43874: LD_VAR 0 5
43878: PPUSH
43879: CALL 44241 0 2
43883: NOT
43884: IFFALSE 43945
// repeat weapon := _weapon [ 1 ] ;
43886: LD_ADDR_VAR 0 5
43890: PUSH
43891: LD_VAR 0 10
43895: PUSH
43896: LD_INT 1
43898: ARRAY
43899: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43900: LD_ADDR_VAR 0 10
43904: PUSH
43905: LD_VAR 0 10
43909: PPUSH
43910: LD_INT 1
43912: PPUSH
43913: CALL_OW 3
43917: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43918: LD_VAR 0 2
43922: PPUSH
43923: LD_VAR 0 5
43927: PPUSH
43928: CALL 44241 0 2
43932: IFTRUE 43943
43934: PUSH
43935: LD_VAR 0 10
43939: PUSH
43940: EMPTY
43941: EQUAL
43942: OR
43943: IFFALSE 43886
// result := [ ] ;
43945: LD_ADDR_VAR 0 6
43949: PUSH
43950: EMPTY
43951: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43952: LD_VAR 0 1
43956: PPUSH
43957: LD_VAR 0 2
43961: PPUSH
43962: LD_VAR 0 3
43966: PPUSH
43967: LD_VAR 0 4
43971: PPUSH
43972: LD_VAR 0 5
43976: PPUSH
43977: CALL_OW 448
43981: IFFALSE 44014
// result := [ chassis , engine , control , weapon ] ;
43983: LD_ADDR_VAR 0 6
43987: PUSH
43988: LD_VAR 0 2
43992: PUSH
43993: LD_VAR 0 3
43997: PUSH
43998: LD_VAR 0 4
44002: PUSH
44003: LD_VAR 0 5
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: ST_TO_ADDR
// end ;
44014: LD_VAR 0 6
44018: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44019: LD_INT 0
44021: PPUSH
// if not chassis or not engine then
44022: LD_VAR 0 1
44026: NOT
44027: IFTRUE 44036
44029: PUSH
44030: LD_VAR 0 2
44034: NOT
44035: OR
44036: IFFALSE 44040
// exit ;
44038: GO 44236
// case engine of engine_solar :
44040: LD_VAR 0 2
44044: PUSH
44045: LD_INT 2
44047: DOUBLE
44048: EQUAL
44049: IFTRUE 44053
44051: GO 44091
44053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44054: LD_ADDR_VAR 0 3
44058: PUSH
44059: LD_INT 11
44061: PUSH
44062: LD_INT 12
44064: PUSH
44065: LD_INT 13
44067: PUSH
44068: LD_INT 14
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: ST_TO_ADDR
44089: GO 44220
44091: LD_INT 1
44093: DOUBLE
44094: EQUAL
44095: IFTRUE 44099
44097: GO 44161
44099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44100: LD_ADDR_VAR 0 3
44104: PUSH
44105: LD_INT 11
44107: PUSH
44108: LD_INT 12
44110: PUSH
44111: LD_INT 13
44113: PUSH
44114: LD_INT 14
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: LD_INT 3
44125: PUSH
44126: LD_INT 4
44128: PUSH
44129: LD_INT 5
44131: PUSH
44132: LD_INT 21
44134: PUSH
44135: LD_INT 23
44137: PUSH
44138: LD_INT 22
44140: PUSH
44141: LD_INT 24
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: ST_TO_ADDR
44159: GO 44220
44161: LD_INT 3
44163: DOUBLE
44164: EQUAL
44165: IFTRUE 44169
44167: GO 44219
44169: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44170: LD_ADDR_VAR 0 3
44174: PUSH
44175: LD_INT 13
44177: PUSH
44178: LD_INT 14
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: LD_INT 4
44189: PUSH
44190: LD_INT 5
44192: PUSH
44193: LD_INT 21
44195: PUSH
44196: LD_INT 22
44198: PUSH
44199: LD_INT 23
44201: PUSH
44202: LD_INT 24
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: ST_TO_ADDR
44217: GO 44220
44219: POP
// result := ( chassis in result ) ;
44220: LD_ADDR_VAR 0 3
44224: PUSH
44225: LD_VAR 0 1
44229: PUSH
44230: LD_VAR 0 3
44234: IN
44235: ST_TO_ADDR
// end ;
44236: LD_VAR 0 3
44240: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44241: LD_INT 0
44243: PPUSH
// if not chassis or not weapon then
44244: LD_VAR 0 1
44248: NOT
44249: IFTRUE 44258
44251: PUSH
44252: LD_VAR 0 2
44256: NOT
44257: OR
44258: IFFALSE 44262
// exit ;
44260: GO 45356
// case weapon of us_machine_gun :
44262: LD_VAR 0 2
44266: PUSH
44267: LD_INT 2
44269: DOUBLE
44270: EQUAL
44271: IFTRUE 44275
44273: GO 44305
44275: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44276: LD_ADDR_VAR 0 3
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 3
44289: PUSH
44290: LD_INT 4
44292: PUSH
44293: LD_INT 5
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: ST_TO_ADDR
44303: GO 45340
44305: LD_INT 3
44307: DOUBLE
44308: EQUAL
44309: IFTRUE 44313
44311: GO 44343
44313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44314: LD_ADDR_VAR 0 3
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: LD_INT 3
44327: PUSH
44328: LD_INT 4
44330: PUSH
44331: LD_INT 5
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: ST_TO_ADDR
44341: GO 45340
44343: LD_INT 11
44345: DOUBLE
44346: EQUAL
44347: IFTRUE 44351
44349: GO 44381
44351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44352: LD_ADDR_VAR 0 3
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: LD_INT 4
44368: PUSH
44369: LD_INT 5
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: ST_TO_ADDR
44379: GO 45340
44381: LD_INT 4
44383: DOUBLE
44384: EQUAL
44385: IFTRUE 44389
44387: GO 44415
44389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44390: LD_ADDR_VAR 0 3
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 3
44400: PUSH
44401: LD_INT 4
44403: PUSH
44404: LD_INT 5
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: ST_TO_ADDR
44413: GO 45340
44415: LD_INT 5
44417: DOUBLE
44418: EQUAL
44419: IFTRUE 44423
44421: GO 44449
44423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44424: LD_ADDR_VAR 0 3
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: LD_INT 4
44437: PUSH
44438: LD_INT 5
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: ST_TO_ADDR
44447: GO 45340
44449: LD_INT 9
44451: DOUBLE
44452: EQUAL
44453: IFTRUE 44457
44455: GO 44483
44457: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44458: LD_ADDR_VAR 0 3
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: LD_INT 4
44471: PUSH
44472: LD_INT 5
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: ST_TO_ADDR
44481: GO 45340
44483: LD_INT 7
44485: DOUBLE
44486: EQUAL
44487: IFTRUE 44491
44489: GO 44517
44491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44492: LD_ADDR_VAR 0 3
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: LD_INT 4
44505: PUSH
44506: LD_INT 5
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: ST_TO_ADDR
44515: GO 45340
44517: LD_INT 12
44519: DOUBLE
44520: EQUAL
44521: IFTRUE 44525
44523: GO 44551
44525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44526: LD_ADDR_VAR 0 3
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 3
44536: PUSH
44537: LD_INT 4
44539: PUSH
44540: LD_INT 5
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: ST_TO_ADDR
44549: GO 45340
44551: LD_INT 13
44553: DOUBLE
44554: EQUAL
44555: IFTRUE 44559
44557: GO 44585
44559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44560: LD_ADDR_VAR 0 3
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: LD_INT 4
44573: PUSH
44574: LD_INT 5
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
44583: GO 45340
44585: LD_INT 14
44587: DOUBLE
44588: EQUAL
44589: IFTRUE 44593
44591: GO 44611
44593: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44594: LD_ADDR_VAR 0 3
44598: PUSH
44599: LD_INT 4
44601: PUSH
44602: LD_INT 5
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: ST_TO_ADDR
44609: GO 45340
44611: LD_INT 6
44613: DOUBLE
44614: EQUAL
44615: IFTRUE 44619
44617: GO 44637
44619: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44620: LD_ADDR_VAR 0 3
44624: PUSH
44625: LD_INT 4
44627: PUSH
44628: LD_INT 5
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: ST_TO_ADDR
44635: GO 45340
44637: LD_INT 10
44639: DOUBLE
44640: EQUAL
44641: IFTRUE 44645
44643: GO 44663
44645: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44646: LD_ADDR_VAR 0 3
44650: PUSH
44651: LD_INT 4
44653: PUSH
44654: LD_INT 5
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: ST_TO_ADDR
44661: GO 45340
44663: LD_INT 22
44665: DOUBLE
44666: EQUAL
44667: IFTRUE 44671
44669: GO 44697
44671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44672: LD_ADDR_VAR 0 3
44676: PUSH
44677: LD_INT 11
44679: PUSH
44680: LD_INT 12
44682: PUSH
44683: LD_INT 13
44685: PUSH
44686: LD_INT 14
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: ST_TO_ADDR
44695: GO 45340
44697: LD_INT 23
44699: DOUBLE
44700: EQUAL
44701: IFTRUE 44705
44703: GO 44731
44705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44706: LD_ADDR_VAR 0 3
44710: PUSH
44711: LD_INT 11
44713: PUSH
44714: LD_INT 12
44716: PUSH
44717: LD_INT 13
44719: PUSH
44720: LD_INT 14
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: ST_TO_ADDR
44729: GO 45340
44731: LD_INT 24
44733: DOUBLE
44734: EQUAL
44735: IFTRUE 44739
44737: GO 44765
44739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44740: LD_ADDR_VAR 0 3
44744: PUSH
44745: LD_INT 11
44747: PUSH
44748: LD_INT 12
44750: PUSH
44751: LD_INT 13
44753: PUSH
44754: LD_INT 14
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: ST_TO_ADDR
44763: GO 45340
44765: LD_INT 30
44767: DOUBLE
44768: EQUAL
44769: IFTRUE 44773
44771: GO 44799
44773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_INT 11
44781: PUSH
44782: LD_INT 12
44784: PUSH
44785: LD_INT 13
44787: PUSH
44788: LD_INT 14
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: ST_TO_ADDR
44797: GO 45340
44799: LD_INT 25
44801: DOUBLE
44802: EQUAL
44803: IFTRUE 44807
44805: GO 44825
44807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44808: LD_ADDR_VAR 0 3
44812: PUSH
44813: LD_INT 13
44815: PUSH
44816: LD_INT 14
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: ST_TO_ADDR
44823: GO 45340
44825: LD_INT 27
44827: DOUBLE
44828: EQUAL
44829: IFTRUE 44833
44831: GO 44851
44833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44834: LD_ADDR_VAR 0 3
44838: PUSH
44839: LD_INT 13
44841: PUSH
44842: LD_INT 14
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: ST_TO_ADDR
44849: GO 45340
44851: LD_INT 92
44853: DOUBLE
44854: EQUAL
44855: IFTRUE 44859
44857: GO 44885
44859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44860: LD_ADDR_VAR 0 3
44864: PUSH
44865: LD_INT 11
44867: PUSH
44868: LD_INT 12
44870: PUSH
44871: LD_INT 13
44873: PUSH
44874: LD_INT 14
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: ST_TO_ADDR
44883: GO 45340
44885: LD_INT 28
44887: DOUBLE
44888: EQUAL
44889: IFTRUE 44893
44891: GO 44911
44893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44894: LD_ADDR_VAR 0 3
44898: PUSH
44899: LD_INT 13
44901: PUSH
44902: LD_INT 14
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: ST_TO_ADDR
44909: GO 45340
44911: LD_INT 29
44913: DOUBLE
44914: EQUAL
44915: IFTRUE 44919
44917: GO 44937
44919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44920: LD_ADDR_VAR 0 3
44924: PUSH
44925: LD_INT 13
44927: PUSH
44928: LD_INT 14
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: ST_TO_ADDR
44935: GO 45340
44937: LD_INT 31
44939: DOUBLE
44940: EQUAL
44941: IFTRUE 44945
44943: GO 44963
44945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44946: LD_ADDR_VAR 0 3
44950: PUSH
44951: LD_INT 13
44953: PUSH
44954: LD_INT 14
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: ST_TO_ADDR
44961: GO 45340
44963: LD_INT 26
44965: DOUBLE
44966: EQUAL
44967: IFTRUE 44971
44969: GO 44989
44971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44972: LD_ADDR_VAR 0 3
44976: PUSH
44977: LD_INT 13
44979: PUSH
44980: LD_INT 14
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: ST_TO_ADDR
44987: GO 45340
44989: LD_INT 42
44991: DOUBLE
44992: EQUAL
44993: IFTRUE 44997
44995: GO 45023
44997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44998: LD_ADDR_VAR 0 3
45002: PUSH
45003: LD_INT 21
45005: PUSH
45006: LD_INT 22
45008: PUSH
45009: LD_INT 23
45011: PUSH
45012: LD_INT 24
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: ST_TO_ADDR
45021: GO 45340
45023: LD_INT 43
45025: DOUBLE
45026: EQUAL
45027: IFTRUE 45031
45029: GO 45057
45031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45032: LD_ADDR_VAR 0 3
45036: PUSH
45037: LD_INT 21
45039: PUSH
45040: LD_INT 22
45042: PUSH
45043: LD_INT 23
45045: PUSH
45046: LD_INT 24
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
45055: GO 45340
45057: LD_INT 44
45059: DOUBLE
45060: EQUAL
45061: IFTRUE 45065
45063: GO 45091
45065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45066: LD_ADDR_VAR 0 3
45070: PUSH
45071: LD_INT 21
45073: PUSH
45074: LD_INT 22
45076: PUSH
45077: LD_INT 23
45079: PUSH
45080: LD_INT 24
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: ST_TO_ADDR
45089: GO 45340
45091: LD_INT 45
45093: DOUBLE
45094: EQUAL
45095: IFTRUE 45099
45097: GO 45125
45099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45100: LD_ADDR_VAR 0 3
45104: PUSH
45105: LD_INT 21
45107: PUSH
45108: LD_INT 22
45110: PUSH
45111: LD_INT 23
45113: PUSH
45114: LD_INT 24
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: ST_TO_ADDR
45123: GO 45340
45125: LD_INT 49
45127: DOUBLE
45128: EQUAL
45129: IFTRUE 45133
45131: GO 45159
45133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45134: LD_ADDR_VAR 0 3
45138: PUSH
45139: LD_INT 21
45141: PUSH
45142: LD_INT 22
45144: PUSH
45145: LD_INT 23
45147: PUSH
45148: LD_INT 24
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
45157: GO 45340
45159: LD_INT 51
45161: DOUBLE
45162: EQUAL
45163: IFTRUE 45167
45165: GO 45193
45167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45168: LD_ADDR_VAR 0 3
45172: PUSH
45173: LD_INT 21
45175: PUSH
45176: LD_INT 22
45178: PUSH
45179: LD_INT 23
45181: PUSH
45182: LD_INT 24
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
45191: GO 45340
45193: LD_INT 52
45195: DOUBLE
45196: EQUAL
45197: IFTRUE 45201
45199: GO 45227
45201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45202: LD_ADDR_VAR 0 3
45206: PUSH
45207: LD_INT 21
45209: PUSH
45210: LD_INT 22
45212: PUSH
45213: LD_INT 23
45215: PUSH
45216: LD_INT 24
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: ST_TO_ADDR
45225: GO 45340
45227: LD_INT 53
45229: DOUBLE
45230: EQUAL
45231: IFTRUE 45235
45233: GO 45253
45235: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45236: LD_ADDR_VAR 0 3
45240: PUSH
45241: LD_INT 23
45243: PUSH
45244: LD_INT 24
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: ST_TO_ADDR
45251: GO 45340
45253: LD_INT 46
45255: DOUBLE
45256: EQUAL
45257: IFTRUE 45261
45259: GO 45279
45261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_INT 23
45269: PUSH
45270: LD_INT 24
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: ST_TO_ADDR
45277: GO 45340
45279: LD_INT 47
45281: DOUBLE
45282: EQUAL
45283: IFTRUE 45287
45285: GO 45305
45287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
45288: LD_ADDR_VAR 0 3
45292: PUSH
45293: LD_INT 23
45295: PUSH
45296: LD_INT 24
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: ST_TO_ADDR
45303: GO 45340
45305: LD_INT 98
45307: DOUBLE
45308: EQUAL
45309: IFTRUE 45313
45311: GO 45339
45313: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45314: LD_ADDR_VAR 0 3
45318: PUSH
45319: LD_INT 21
45321: PUSH
45322: LD_INT 22
45324: PUSH
45325: LD_INT 23
45327: PUSH
45328: LD_INT 24
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
45337: GO 45340
45339: POP
// result := ( chassis in result ) ;
45340: LD_ADDR_VAR 0 3
45344: PUSH
45345: LD_VAR 0 1
45349: PUSH
45350: LD_VAR 0 3
45354: IN
45355: ST_TO_ADDR
// end ;
45356: LD_VAR 0 3
45360: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45361: LD_INT 0
45363: PPUSH
45364: PPUSH
45365: PPUSH
45366: PPUSH
45367: PPUSH
45368: PPUSH
45369: PPUSH
// result := array ;
45370: LD_ADDR_VAR 0 5
45374: PUSH
45375: LD_VAR 0 1
45379: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45380: LD_VAR 0 1
45384: NOT
45385: IFTRUE 45394
45387: PUSH
45388: LD_VAR 0 2
45392: NOT
45393: OR
45394: IFTRUE 45403
45396: PUSH
45397: LD_VAR 0 3
45401: NOT
45402: OR
45403: IFTRUE 45417
45405: PUSH
45406: LD_VAR 0 2
45410: PUSH
45411: LD_VAR 0 1
45415: GREATER
45416: OR
45417: IFTRUE 45431
45419: PUSH
45420: LD_VAR 0 3
45424: PUSH
45425: LD_VAR 0 1
45429: GREATER
45430: OR
45431: IFFALSE 45435
// exit ;
45433: GO 45731
// if direction then
45435: LD_VAR 0 4
45439: IFFALSE 45503
// begin d := 1 ;
45441: LD_ADDR_VAR 0 9
45445: PUSH
45446: LD_INT 1
45448: ST_TO_ADDR
// if i_from > i_to then
45449: LD_VAR 0 2
45453: PUSH
45454: LD_VAR 0 3
45458: GREATER
45459: IFFALSE 45485
// length := ( array - i_from ) + i_to else
45461: LD_ADDR_VAR 0 11
45465: PUSH
45466: LD_VAR 0 1
45470: PUSH
45471: LD_VAR 0 2
45475: MINUS
45476: PUSH
45477: LD_VAR 0 3
45481: PLUS
45482: ST_TO_ADDR
45483: GO 45501
// length := i_to - i_from ;
45485: LD_ADDR_VAR 0 11
45489: PUSH
45490: LD_VAR 0 3
45494: PUSH
45495: LD_VAR 0 2
45499: MINUS
45500: ST_TO_ADDR
// end else
45501: GO 45564
// begin d := - 1 ;
45503: LD_ADDR_VAR 0 9
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: ST_TO_ADDR
// if i_from > i_to then
45512: LD_VAR 0 2
45516: PUSH
45517: LD_VAR 0 3
45521: GREATER
45522: IFFALSE 45542
// length := i_from - i_to else
45524: LD_ADDR_VAR 0 11
45528: PUSH
45529: LD_VAR 0 2
45533: PUSH
45534: LD_VAR 0 3
45538: MINUS
45539: ST_TO_ADDR
45540: GO 45564
// length := ( array - i_to ) + i_from ;
45542: LD_ADDR_VAR 0 11
45546: PUSH
45547: LD_VAR 0 1
45551: PUSH
45552: LD_VAR 0 3
45556: MINUS
45557: PUSH
45558: LD_VAR 0 2
45562: PLUS
45563: ST_TO_ADDR
// end ; if not length then
45564: LD_VAR 0 11
45568: NOT
45569: IFFALSE 45573
// exit ;
45571: GO 45731
// tmp := array ;
45573: LD_ADDR_VAR 0 10
45577: PUSH
45578: LD_VAR 0 1
45582: ST_TO_ADDR
// for i = 1 to length do
45583: LD_ADDR_VAR 0 6
45587: PUSH
45588: DOUBLE
45589: LD_INT 1
45591: DEC
45592: ST_TO_ADDR
45593: LD_VAR 0 11
45597: PUSH
45598: FOR_TO
45599: IFFALSE 45719
// begin for j = 1 to array do
45601: LD_ADDR_VAR 0 7
45605: PUSH
45606: DOUBLE
45607: LD_INT 1
45609: DEC
45610: ST_TO_ADDR
45611: LD_VAR 0 1
45615: PUSH
45616: FOR_TO
45617: IFFALSE 45705
// begin k := j + d ;
45619: LD_ADDR_VAR 0 8
45623: PUSH
45624: LD_VAR 0 7
45628: PUSH
45629: LD_VAR 0 9
45633: PLUS
45634: ST_TO_ADDR
// if k > array then
45635: LD_VAR 0 8
45639: PUSH
45640: LD_VAR 0 1
45644: GREATER
45645: IFFALSE 45655
// k := 1 ;
45647: LD_ADDR_VAR 0 8
45651: PUSH
45652: LD_INT 1
45654: ST_TO_ADDR
// if not k then
45655: LD_VAR 0 8
45659: NOT
45660: IFFALSE 45672
// k := array ;
45662: LD_ADDR_VAR 0 8
45666: PUSH
45667: LD_VAR 0 1
45671: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45672: LD_ADDR_VAR 0 10
45676: PUSH
45677: LD_VAR 0 10
45681: PPUSH
45682: LD_VAR 0 8
45686: PPUSH
45687: LD_VAR 0 1
45691: PUSH
45692: LD_VAR 0 7
45696: ARRAY
45697: PPUSH
45698: CALL_OW 1
45702: ST_TO_ADDR
// end ;
45703: GO 45616
45705: POP
45706: POP
// array := tmp ;
45707: LD_ADDR_VAR 0 1
45711: PUSH
45712: LD_VAR 0 10
45716: ST_TO_ADDR
// end ;
45717: GO 45598
45719: POP
45720: POP
// result := array ;
45721: LD_ADDR_VAR 0 5
45725: PUSH
45726: LD_VAR 0 1
45730: ST_TO_ADDR
// end ;
45731: LD_VAR 0 5
45735: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45736: LD_INT 0
45738: PPUSH
45739: PPUSH
// result := 0 ;
45740: LD_ADDR_VAR 0 3
45744: PUSH
45745: LD_INT 0
45747: ST_TO_ADDR
// if not array or not value in array then
45748: LD_VAR 0 1
45752: NOT
45753: IFTRUE 45768
45755: PUSH
45756: LD_VAR 0 2
45760: PUSH
45761: LD_VAR 0 1
45765: IN
45766: NOT
45767: OR
45768: IFFALSE 45772
// exit ;
45770: GO 45826
// for i = 1 to array do
45772: LD_ADDR_VAR 0 4
45776: PUSH
45777: DOUBLE
45778: LD_INT 1
45780: DEC
45781: ST_TO_ADDR
45782: LD_VAR 0 1
45786: PUSH
45787: FOR_TO
45788: IFFALSE 45824
// if value = array [ i ] then
45790: LD_VAR 0 2
45794: PUSH
45795: LD_VAR 0 1
45799: PUSH
45800: LD_VAR 0 4
45804: ARRAY
45805: EQUAL
45806: IFFALSE 45822
// begin result := i ;
45808: LD_ADDR_VAR 0 3
45812: PUSH
45813: LD_VAR 0 4
45817: ST_TO_ADDR
// exit ;
45818: POP
45819: POP
45820: GO 45826
// end ;
45822: GO 45787
45824: POP
45825: POP
// end ;
45826: LD_VAR 0 3
45830: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45831: LD_INT 0
45833: PPUSH
// vc_chassis := chassis ;
45834: LD_ADDR_OWVAR 37
45838: PUSH
45839: LD_VAR 0 1
45843: ST_TO_ADDR
// vc_engine := engine ;
45844: LD_ADDR_OWVAR 39
45848: PUSH
45849: LD_VAR 0 2
45853: ST_TO_ADDR
// vc_control := control ;
45854: LD_ADDR_OWVAR 38
45858: PUSH
45859: LD_VAR 0 3
45863: ST_TO_ADDR
// vc_weapon := weapon ;
45864: LD_ADDR_OWVAR 40
45868: PUSH
45869: LD_VAR 0 4
45873: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45874: LD_ADDR_OWVAR 41
45878: PUSH
45879: LD_VAR 0 5
45883: ST_TO_ADDR
// end ;
45884: LD_VAR 0 6
45888: RET
// export function WantPlant ( unit ) ; var task ; begin
45889: LD_INT 0
45891: PPUSH
45892: PPUSH
// result := false ;
45893: LD_ADDR_VAR 0 2
45897: PUSH
45898: LD_INT 0
45900: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45901: LD_ADDR_VAR 0 3
45905: PUSH
45906: LD_VAR 0 1
45910: PPUSH
45911: CALL_OW 437
45915: ST_TO_ADDR
// if task then
45916: LD_VAR 0 3
45920: IFFALSE 45948
// if task [ 1 ] [ 1 ] = p then
45922: LD_VAR 0 3
45926: PUSH
45927: LD_INT 1
45929: ARRAY
45930: PUSH
45931: LD_INT 1
45933: ARRAY
45934: PUSH
45935: LD_STRING p
45937: EQUAL
45938: IFFALSE 45948
// result := true ;
45940: LD_ADDR_VAR 0 2
45944: PUSH
45945: LD_INT 1
45947: ST_TO_ADDR
// end ;
45948: LD_VAR 0 2
45952: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45953: LD_INT 0
45955: PPUSH
45956: PPUSH
45957: PPUSH
45958: PPUSH
// if pos < 1 then
45959: LD_VAR 0 2
45963: PUSH
45964: LD_INT 1
45966: LESS
45967: IFFALSE 45971
// exit ;
45969: GO 46274
// if pos = 1 then
45971: LD_VAR 0 2
45975: PUSH
45976: LD_INT 1
45978: EQUAL
45979: IFFALSE 46012
// result := Replace ( arr , pos [ 1 ] , value ) else
45981: LD_ADDR_VAR 0 4
45985: PUSH
45986: LD_VAR 0 1
45990: PPUSH
45991: LD_VAR 0 2
45995: PUSH
45996: LD_INT 1
45998: ARRAY
45999: PPUSH
46000: LD_VAR 0 3
46004: PPUSH
46005: CALL_OW 1
46009: ST_TO_ADDR
46010: GO 46274
// begin tmp := arr ;
46012: LD_ADDR_VAR 0 6
46016: PUSH
46017: LD_VAR 0 1
46021: ST_TO_ADDR
// s_arr := [ tmp ] ;
46022: LD_ADDR_VAR 0 7
46026: PUSH
46027: LD_VAR 0 6
46031: PUSH
46032: EMPTY
46033: LIST
46034: ST_TO_ADDR
// for i = 1 to pos - 1 do
46035: LD_ADDR_VAR 0 5
46039: PUSH
46040: DOUBLE
46041: LD_INT 1
46043: DEC
46044: ST_TO_ADDR
46045: LD_VAR 0 2
46049: PUSH
46050: LD_INT 1
46052: MINUS
46053: PUSH
46054: FOR_TO
46055: IFFALSE 46100
// begin tmp := tmp [ pos [ i ] ] ;
46057: LD_ADDR_VAR 0 6
46061: PUSH
46062: LD_VAR 0 6
46066: PUSH
46067: LD_VAR 0 2
46071: PUSH
46072: LD_VAR 0 5
46076: ARRAY
46077: ARRAY
46078: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46079: LD_ADDR_VAR 0 7
46083: PUSH
46084: LD_VAR 0 7
46088: PUSH
46089: LD_VAR 0 6
46093: PUSH
46094: EMPTY
46095: LIST
46096: ADD
46097: ST_TO_ADDR
// end ;
46098: GO 46054
46100: POP
46101: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46102: LD_ADDR_VAR 0 6
46106: PUSH
46107: LD_VAR 0 6
46111: PPUSH
46112: LD_VAR 0 2
46116: PUSH
46117: LD_VAR 0 2
46121: ARRAY
46122: PPUSH
46123: LD_VAR 0 3
46127: PPUSH
46128: CALL_OW 1
46132: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46133: LD_ADDR_VAR 0 7
46137: PUSH
46138: LD_VAR 0 7
46142: PPUSH
46143: LD_VAR 0 7
46147: PPUSH
46148: LD_VAR 0 6
46152: PPUSH
46153: CALL_OW 1
46157: ST_TO_ADDR
// for i = s_arr downto 2 do
46158: LD_ADDR_VAR 0 5
46162: PUSH
46163: DOUBLE
46164: LD_VAR 0 7
46168: INC
46169: ST_TO_ADDR
46170: LD_INT 2
46172: PUSH
46173: FOR_DOWNTO
46174: IFFALSE 46258
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46176: LD_ADDR_VAR 0 6
46180: PUSH
46181: LD_VAR 0 7
46185: PUSH
46186: LD_VAR 0 5
46190: PUSH
46191: LD_INT 1
46193: MINUS
46194: ARRAY
46195: PPUSH
46196: LD_VAR 0 2
46200: PUSH
46201: LD_VAR 0 5
46205: PUSH
46206: LD_INT 1
46208: MINUS
46209: ARRAY
46210: PPUSH
46211: LD_VAR 0 7
46215: PUSH
46216: LD_VAR 0 5
46220: ARRAY
46221: PPUSH
46222: CALL_OW 1
46226: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46227: LD_ADDR_VAR 0 7
46231: PUSH
46232: LD_VAR 0 7
46236: PPUSH
46237: LD_VAR 0 5
46241: PUSH
46242: LD_INT 1
46244: MINUS
46245: PPUSH
46246: LD_VAR 0 6
46250: PPUSH
46251: CALL_OW 1
46255: ST_TO_ADDR
// end ;
46256: GO 46173
46258: POP
46259: POP
// result := s_arr [ 1 ] ;
46260: LD_ADDR_VAR 0 4
46264: PUSH
46265: LD_VAR 0 7
46269: PUSH
46270: LD_INT 1
46272: ARRAY
46273: ST_TO_ADDR
// end ; end ;
46274: LD_VAR 0 4
46278: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
// if not list then
46283: LD_VAR 0 1
46287: NOT
46288: IFFALSE 46292
// exit ;
46290: GO 46383
// i := list [ pos1 ] ;
46292: LD_ADDR_VAR 0 5
46296: PUSH
46297: LD_VAR 0 1
46301: PUSH
46302: LD_VAR 0 2
46306: ARRAY
46307: ST_TO_ADDR
// if not i then
46308: LD_VAR 0 5
46312: NOT
46313: IFFALSE 46317
// exit ;
46315: GO 46383
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46317: LD_ADDR_VAR 0 1
46321: PUSH
46322: LD_VAR 0 1
46326: PPUSH
46327: LD_VAR 0 2
46331: PPUSH
46332: LD_VAR 0 1
46336: PUSH
46337: LD_VAR 0 3
46341: ARRAY
46342: PPUSH
46343: CALL_OW 1
46347: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46348: LD_ADDR_VAR 0 1
46352: PUSH
46353: LD_VAR 0 1
46357: PPUSH
46358: LD_VAR 0 3
46362: PPUSH
46363: LD_VAR 0 5
46367: PPUSH
46368: CALL_OW 1
46372: ST_TO_ADDR
// result := list ;
46373: LD_ADDR_VAR 0 4
46377: PUSH
46378: LD_VAR 0 1
46382: ST_TO_ADDR
// end ;
46383: LD_VAR 0 4
46387: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46388: LD_INT 0
46390: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46391: LD_ADDR_VAR 0 5
46395: PUSH
46396: LD_VAR 0 1
46400: PPUSH
46401: CALL_OW 250
46405: PPUSH
46406: LD_VAR 0 1
46410: PPUSH
46411: CALL_OW 251
46415: PPUSH
46416: LD_VAR 0 2
46420: PPUSH
46421: LD_VAR 0 3
46425: PPUSH
46426: LD_VAR 0 4
46430: PPUSH
46431: CALL 46813 0 5
46435: ST_TO_ADDR
// end ;
46436: LD_VAR 0 5
46440: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46441: LD_INT 0
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
// if not list or not unit then
46447: LD_VAR 0 2
46451: NOT
46452: IFTRUE 46461
46454: PUSH
46455: LD_VAR 0 1
46459: NOT
46460: OR
46461: IFFALSE 46465
// exit ;
46463: GO 46808
// result := [ ] ;
46465: LD_ADDR_VAR 0 5
46469: PUSH
46470: EMPTY
46471: ST_TO_ADDR
// for i in list do
46472: LD_ADDR_VAR 0 6
46476: PUSH
46477: LD_VAR 0 2
46481: PUSH
46482: FOR_IN
46483: IFFALSE 46701
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46485: LD_ADDR_VAR 0 8
46489: PUSH
46490: LD_VAR 0 1
46494: PPUSH
46495: LD_VAR 0 6
46499: PUSH
46500: LD_INT 1
46502: ARRAY
46503: PPUSH
46504: LD_VAR 0 6
46508: PUSH
46509: LD_INT 2
46511: ARRAY
46512: PPUSH
46513: CALL_OW 297
46517: ST_TO_ADDR
// if not Count ( result ) then
46518: LD_VAR 0 5
46522: PPUSH
46523: CALL 43035 0 1
46527: NOT
46528: IFFALSE 46561
// begin result := Join ( result , [ i , tmp ] ) ;
46530: LD_ADDR_VAR 0 5
46534: PUSH
46535: LD_VAR 0 5
46539: PPUSH
46540: LD_VAR 0 6
46544: PUSH
46545: LD_VAR 0 8
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PPUSH
46554: CALL 79011 0 2
46558: ST_TO_ADDR
// continue ;
46559: GO 46482
// end ; if result [ result ] [ 2 ] <= tmp then
46561: LD_VAR 0 5
46565: PUSH
46566: LD_VAR 0 5
46570: ARRAY
46571: PUSH
46572: LD_INT 2
46574: ARRAY
46575: PUSH
46576: LD_VAR 0 8
46580: LESSEQUAL
46581: IFFALSE 46614
// result := Join ( result , [ i , tmp ] ) else
46583: LD_ADDR_VAR 0 5
46587: PUSH
46588: LD_VAR 0 5
46592: PPUSH
46593: LD_VAR 0 6
46597: PUSH
46598: LD_VAR 0 8
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PPUSH
46607: CALL 79011 0 2
46611: ST_TO_ADDR
46612: GO 46699
// begin for j := 1 to Count ( result ) do
46614: LD_ADDR_VAR 0 7
46618: PUSH
46619: DOUBLE
46620: LD_INT 1
46622: DEC
46623: ST_TO_ADDR
46624: LD_VAR 0 5
46628: PPUSH
46629: CALL 43035 0 1
46633: PUSH
46634: FOR_TO
46635: IFFALSE 46697
// begin if tmp < result [ j ] [ 2 ] then
46637: LD_VAR 0 8
46641: PUSH
46642: LD_VAR 0 5
46646: PUSH
46647: LD_VAR 0 7
46651: ARRAY
46652: PUSH
46653: LD_INT 2
46655: ARRAY
46656: LESS
46657: IFFALSE 46695
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46659: LD_ADDR_VAR 0 5
46663: PUSH
46664: LD_VAR 0 5
46668: PPUSH
46669: LD_VAR 0 7
46673: PPUSH
46674: LD_VAR 0 6
46678: PUSH
46679: LD_VAR 0 8
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PPUSH
46688: CALL_OW 2
46692: ST_TO_ADDR
// break ;
46693: GO 46697
// end ; end ;
46695: GO 46634
46697: POP
46698: POP
// end ; end ;
46699: GO 46482
46701: POP
46702: POP
// if result and not asc then
46703: LD_VAR 0 5
46707: IFFALSE 46716
46709: PUSH
46710: LD_VAR 0 3
46714: NOT
46715: AND
46716: IFFALSE 46733
// result := ReverseArray ( result ) ;
46718: LD_ADDR_VAR 0 5
46722: PUSH
46723: LD_VAR 0 5
46727: PPUSH
46728: CALL 74091 0 1
46732: ST_TO_ADDR
// tmp := [ ] ;
46733: LD_ADDR_VAR 0 8
46737: PUSH
46738: EMPTY
46739: ST_TO_ADDR
// if mode then
46740: LD_VAR 0 4
46744: IFFALSE 46808
// begin for i := 1 to result do
46746: LD_ADDR_VAR 0 6
46750: PUSH
46751: DOUBLE
46752: LD_INT 1
46754: DEC
46755: ST_TO_ADDR
46756: LD_VAR 0 5
46760: PUSH
46761: FOR_TO
46762: IFFALSE 46796
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46764: LD_ADDR_VAR 0 8
46768: PUSH
46769: LD_VAR 0 8
46773: PPUSH
46774: LD_VAR 0 5
46778: PUSH
46779: LD_VAR 0 6
46783: ARRAY
46784: PUSH
46785: LD_INT 1
46787: ARRAY
46788: PPUSH
46789: CALL 79011 0 2
46793: ST_TO_ADDR
46794: GO 46761
46796: POP
46797: POP
// result := tmp ;
46798: LD_ADDR_VAR 0 5
46802: PUSH
46803: LD_VAR 0 8
46807: ST_TO_ADDR
// end ; end ;
46808: LD_VAR 0 5
46812: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46813: LD_INT 0
46815: PPUSH
46816: PPUSH
46817: PPUSH
46818: PPUSH
// if not list then
46819: LD_VAR 0 3
46823: NOT
46824: IFFALSE 46828
// exit ;
46826: GO 47218
// result := [ ] ;
46828: LD_ADDR_VAR 0 6
46832: PUSH
46833: EMPTY
46834: ST_TO_ADDR
// for i in list do
46835: LD_ADDR_VAR 0 7
46839: PUSH
46840: LD_VAR 0 3
46844: PUSH
46845: FOR_IN
46846: IFFALSE 47048
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46848: LD_ADDR_VAR 0 9
46852: PUSH
46853: LD_VAR 0 7
46857: PPUSH
46858: LD_VAR 0 1
46862: PPUSH
46863: LD_VAR 0 2
46867: PPUSH
46868: CALL_OW 297
46872: ST_TO_ADDR
// if not result then
46873: LD_VAR 0 6
46877: NOT
46878: IFFALSE 46904
// result := [ [ i , tmp ] ] else
46880: LD_ADDR_VAR 0 6
46884: PUSH
46885: LD_VAR 0 7
46889: PUSH
46890: LD_VAR 0 9
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: EMPTY
46900: LIST
46901: ST_TO_ADDR
46902: GO 47046
// begin if result [ result ] [ 2 ] <= tmp then
46904: LD_VAR 0 6
46908: PUSH
46909: LD_VAR 0 6
46913: ARRAY
46914: PUSH
46915: LD_INT 2
46917: ARRAY
46918: PUSH
46919: LD_VAR 0 9
46923: LESSEQUAL
46924: IFFALSE 46966
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46926: LD_ADDR_VAR 0 6
46930: PUSH
46931: LD_VAR 0 6
46935: PPUSH
46936: LD_VAR 0 6
46940: PUSH
46941: LD_INT 1
46943: PLUS
46944: PPUSH
46945: LD_VAR 0 7
46949: PUSH
46950: LD_VAR 0 9
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PPUSH
46959: CALL_OW 2
46963: ST_TO_ADDR
46964: GO 47046
// for j := 1 to result do
46966: LD_ADDR_VAR 0 8
46970: PUSH
46971: DOUBLE
46972: LD_INT 1
46974: DEC
46975: ST_TO_ADDR
46976: LD_VAR 0 6
46980: PUSH
46981: FOR_TO
46982: IFFALSE 47044
// begin if tmp < result [ j ] [ 2 ] then
46984: LD_VAR 0 9
46988: PUSH
46989: LD_VAR 0 6
46993: PUSH
46994: LD_VAR 0 8
46998: ARRAY
46999: PUSH
47000: LD_INT 2
47002: ARRAY
47003: LESS
47004: IFFALSE 47042
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47006: LD_ADDR_VAR 0 6
47010: PUSH
47011: LD_VAR 0 6
47015: PPUSH
47016: LD_VAR 0 8
47020: PPUSH
47021: LD_VAR 0 7
47025: PUSH
47026: LD_VAR 0 9
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PPUSH
47035: CALL_OW 2
47039: ST_TO_ADDR
// break ;
47040: GO 47044
// end ; end ;
47042: GO 46981
47044: POP
47045: POP
// end ; end ;
47046: GO 46845
47048: POP
47049: POP
// if result and not asc then
47050: LD_VAR 0 6
47054: IFFALSE 47063
47056: PUSH
47057: LD_VAR 0 4
47061: NOT
47062: AND
47063: IFFALSE 47138
// begin tmp := result ;
47065: LD_ADDR_VAR 0 9
47069: PUSH
47070: LD_VAR 0 6
47074: ST_TO_ADDR
// for i = tmp downto 1 do
47075: LD_ADDR_VAR 0 7
47079: PUSH
47080: DOUBLE
47081: LD_VAR 0 9
47085: INC
47086: ST_TO_ADDR
47087: LD_INT 1
47089: PUSH
47090: FOR_DOWNTO
47091: IFFALSE 47136
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47093: LD_ADDR_VAR 0 6
47097: PUSH
47098: LD_VAR 0 6
47102: PPUSH
47103: LD_VAR 0 9
47107: PUSH
47108: LD_VAR 0 7
47112: MINUS
47113: PUSH
47114: LD_INT 1
47116: PLUS
47117: PPUSH
47118: LD_VAR 0 9
47122: PUSH
47123: LD_VAR 0 7
47127: ARRAY
47128: PPUSH
47129: CALL_OW 1
47133: ST_TO_ADDR
47134: GO 47090
47136: POP
47137: POP
// end ; tmp := [ ] ;
47138: LD_ADDR_VAR 0 9
47142: PUSH
47143: EMPTY
47144: ST_TO_ADDR
// if mode then
47145: LD_VAR 0 5
47149: IFFALSE 47218
// begin for i = 1 to result do
47151: LD_ADDR_VAR 0 7
47155: PUSH
47156: DOUBLE
47157: LD_INT 1
47159: DEC
47160: ST_TO_ADDR
47161: LD_VAR 0 6
47165: PUSH
47166: FOR_TO
47167: IFFALSE 47206
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47169: LD_ADDR_VAR 0 9
47173: PUSH
47174: LD_VAR 0 9
47178: PPUSH
47179: LD_VAR 0 7
47183: PPUSH
47184: LD_VAR 0 6
47188: PUSH
47189: LD_VAR 0 7
47193: ARRAY
47194: PUSH
47195: LD_INT 1
47197: ARRAY
47198: PPUSH
47199: CALL_OW 1
47203: ST_TO_ADDR
47204: GO 47166
47206: POP
47207: POP
// result := tmp ;
47208: LD_ADDR_VAR 0 6
47212: PUSH
47213: LD_VAR 0 9
47217: ST_TO_ADDR
// end ; end ;
47218: LD_VAR 0 6
47222: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47223: LD_INT 0
47225: PPUSH
47226: PPUSH
47227: PPUSH
47228: PPUSH
47229: PPUSH
47230: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47231: LD_ADDR_VAR 0 5
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: ST_TO_ADDR
// if not x or not y then
47253: LD_VAR 0 2
47257: NOT
47258: IFTRUE 47267
47260: PUSH
47261: LD_VAR 0 3
47265: NOT
47266: OR
47267: IFFALSE 47271
// exit ;
47269: GO 48927
// if not range then
47271: LD_VAR 0 4
47275: NOT
47276: IFFALSE 47286
// range := 10 ;
47278: LD_ADDR_VAR 0 4
47282: PUSH
47283: LD_INT 10
47285: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47286: LD_ADDR_VAR 0 8
47290: PUSH
47291: LD_INT 81
47293: PUSH
47294: LD_VAR 0 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 92
47305: PUSH
47306: LD_VAR 0 2
47310: PUSH
47311: LD_VAR 0 3
47315: PUSH
47316: LD_VAR 0 4
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: LD_INT 21
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: PPUSH
47349: CALL_OW 69
47353: ST_TO_ADDR
// if not tmp then
47354: LD_VAR 0 8
47358: NOT
47359: IFFALSE 47363
// exit ;
47361: GO 48927
// for i in tmp do
47363: LD_ADDR_VAR 0 6
47367: PUSH
47368: LD_VAR 0 8
47372: PUSH
47373: FOR_IN
47374: IFFALSE 48902
// begin points := [ 0 , 0 , 0 ] ;
47376: LD_ADDR_VAR 0 9
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: ST_TO_ADDR
// bpoints := 1 ;
47395: LD_ADDR_VAR 0 10
47399: PUSH
47400: LD_INT 1
47402: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47403: LD_VAR 0 6
47407: PPUSH
47408: CALL_OW 247
47412: PUSH
47413: LD_INT 1
47415: DOUBLE
47416: EQUAL
47417: IFTRUE 47421
47419: GO 48003
47421: POP
// begin if GetClass ( i ) = 1 then
47422: LD_VAR 0 6
47426: PPUSH
47427: CALL_OW 257
47431: PUSH
47432: LD_INT 1
47434: EQUAL
47435: IFFALSE 47456
// points := [ 10 , 5 , 3 ] ;
47437: LD_ADDR_VAR 0 9
47441: PUSH
47442: LD_INT 10
47444: PUSH
47445: LD_INT 5
47447: PUSH
47448: LD_INT 3
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47456: LD_VAR 0 6
47460: PPUSH
47461: CALL_OW 257
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: LD_INT 4
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: IN
47480: IFFALSE 47501
// points := [ 3 , 2 , 1 ] ;
47482: LD_ADDR_VAR 0 9
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47501: LD_VAR 0 6
47505: PPUSH
47506: CALL_OW 257
47510: PUSH
47511: LD_INT 5
47513: EQUAL
47514: IFFALSE 47535
// points := [ 130 , 5 , 2 ] ;
47516: LD_ADDR_VAR 0 9
47520: PUSH
47521: LD_INT 130
47523: PUSH
47524: LD_INT 5
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47535: LD_VAR 0 6
47539: PPUSH
47540: CALL_OW 257
47544: PUSH
47545: LD_INT 8
47547: EQUAL
47548: IFFALSE 47569
// points := [ 35 , 35 , 30 ] ;
47550: LD_ADDR_VAR 0 9
47554: PUSH
47555: LD_INT 35
47557: PUSH
47558: LD_INT 35
47560: PUSH
47561: LD_INT 30
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47569: LD_VAR 0 6
47573: PPUSH
47574: CALL_OW 257
47578: PUSH
47579: LD_INT 9
47581: EQUAL
47582: IFFALSE 47603
// points := [ 20 , 55 , 40 ] ;
47584: LD_ADDR_VAR 0 9
47588: PUSH
47589: LD_INT 20
47591: PUSH
47592: LD_INT 55
47594: PUSH
47595: LD_INT 40
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47603: LD_VAR 0 6
47607: PPUSH
47608: CALL_OW 257
47612: PUSH
47613: LD_INT 12
47615: PUSH
47616: LD_INT 16
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: IN
47623: IFFALSE 47644
// points := [ 5 , 3 , 2 ] ;
47625: LD_ADDR_VAR 0 9
47629: PUSH
47630: LD_INT 5
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47644: LD_VAR 0 6
47648: PPUSH
47649: CALL_OW 257
47653: PUSH
47654: LD_INT 17
47656: EQUAL
47657: IFFALSE 47678
// points := [ 100 , 50 , 75 ] ;
47659: LD_ADDR_VAR 0 9
47663: PUSH
47664: LD_INT 100
47666: PUSH
47667: LD_INT 50
47669: PUSH
47670: LD_INT 75
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: LIST
47677: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47678: LD_VAR 0 6
47682: PPUSH
47683: CALL_OW 257
47687: PUSH
47688: LD_INT 15
47690: EQUAL
47691: IFFALSE 47712
// points := [ 10 , 5 , 3 ] ;
47693: LD_ADDR_VAR 0 9
47697: PUSH
47698: LD_INT 10
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: LD_INT 3
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47712: LD_VAR 0 6
47716: PPUSH
47717: CALL_OW 257
47721: PUSH
47722: LD_INT 14
47724: EQUAL
47725: IFFALSE 47746
// points := [ 10 , 0 , 0 ] ;
47727: LD_ADDR_VAR 0 9
47731: PUSH
47732: LD_INT 10
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47746: LD_VAR 0 6
47750: PPUSH
47751: CALL_OW 257
47755: PUSH
47756: LD_INT 11
47758: EQUAL
47759: IFFALSE 47780
// points := [ 30 , 10 , 5 ] ;
47761: LD_ADDR_VAR 0 9
47765: PUSH
47766: LD_INT 30
47768: PUSH
47769: LD_INT 10
47771: PUSH
47772: LD_INT 5
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: LIST
47779: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47780: LD_VAR 0 1
47784: PPUSH
47785: LD_INT 5
47787: PPUSH
47788: CALL_OW 321
47792: PUSH
47793: LD_INT 2
47795: EQUAL
47796: IFFALSE 47813
// bpoints := bpoints * 1.8 ;
47798: LD_ADDR_VAR 0 10
47802: PUSH
47803: LD_VAR 0 10
47807: PUSH
47808: LD_REAL  1.80000000000000E+0000
47811: MUL
47812: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47813: LD_VAR 0 6
47817: PPUSH
47818: CALL_OW 257
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 4
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: IN
47841: IFFALSE 47861
47843: PUSH
47844: LD_VAR 0 1
47848: PPUSH
47849: LD_INT 51
47851: PPUSH
47852: CALL_OW 321
47856: PUSH
47857: LD_INT 2
47859: EQUAL
47860: AND
47861: IFFALSE 47878
// bpoints := bpoints * 1.2 ;
47863: LD_ADDR_VAR 0 10
47867: PUSH
47868: LD_VAR 0 10
47872: PUSH
47873: LD_REAL  1.20000000000000E+0000
47876: MUL
47877: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47878: LD_VAR 0 6
47882: PPUSH
47883: CALL_OW 257
47887: PUSH
47888: LD_INT 5
47890: PUSH
47891: LD_INT 7
47893: PUSH
47894: LD_INT 9
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: LIST
47901: IN
47902: IFFALSE 47922
47904: PUSH
47905: LD_VAR 0 1
47909: PPUSH
47910: LD_INT 52
47912: PPUSH
47913: CALL_OW 321
47917: PUSH
47918: LD_INT 2
47920: EQUAL
47921: AND
47922: IFFALSE 47939
// bpoints := bpoints * 1.5 ;
47924: LD_ADDR_VAR 0 10
47928: PUSH
47929: LD_VAR 0 10
47933: PUSH
47934: LD_REAL  1.50000000000000E+0000
47937: MUL
47938: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47939: LD_VAR 0 1
47943: PPUSH
47944: LD_INT 66
47946: PPUSH
47947: CALL_OW 321
47951: PUSH
47952: LD_INT 2
47954: EQUAL
47955: IFFALSE 47972
// bpoints := bpoints * 1.1 ;
47957: LD_ADDR_VAR 0 10
47961: PUSH
47962: LD_VAR 0 10
47966: PUSH
47967: LD_REAL  1.10000000000000E+0000
47970: MUL
47971: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47972: LD_ADDR_VAR 0 10
47976: PUSH
47977: LD_VAR 0 10
47981: PUSH
47982: LD_VAR 0 6
47986: PPUSH
47987: LD_INT 1
47989: PPUSH
47990: CALL_OW 259
47994: PUSH
47995: LD_REAL  1.15000000000000E+0000
47998: MUL
47999: MUL
48000: ST_TO_ADDR
// end ; unit_vehicle :
48001: GO 48831
48003: LD_INT 2
48005: DOUBLE
48006: EQUAL
48007: IFTRUE 48011
48009: GO 48819
48011: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48012: LD_VAR 0 6
48016: PPUSH
48017: CALL_OW 264
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: LD_INT 42
48027: PUSH
48028: LD_INT 24
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: IN
48036: IFFALSE 48057
// points := [ 25 , 5 , 3 ] ;
48038: LD_ADDR_VAR 0 9
48042: PUSH
48043: LD_INT 25
48045: PUSH
48046: LD_INT 5
48048: PUSH
48049: LD_INT 3
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48057: LD_VAR 0 6
48061: PPUSH
48062: CALL_OW 264
48066: PUSH
48067: LD_INT 4
48069: PUSH
48070: LD_INT 43
48072: PUSH
48073: LD_INT 25
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: IN
48081: IFFALSE 48102
// points := [ 40 , 15 , 5 ] ;
48083: LD_ADDR_VAR 0 9
48087: PUSH
48088: LD_INT 40
48090: PUSH
48091: LD_INT 15
48093: PUSH
48094: LD_INT 5
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48102: LD_VAR 0 6
48106: PPUSH
48107: CALL_OW 264
48111: PUSH
48112: LD_INT 3
48114: PUSH
48115: LD_INT 23
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: IN
48122: IFFALSE 48143
// points := [ 7 , 25 , 8 ] ;
48124: LD_ADDR_VAR 0 9
48128: PUSH
48129: LD_INT 7
48131: PUSH
48132: LD_INT 25
48134: PUSH
48135: LD_INT 8
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48143: LD_VAR 0 6
48147: PPUSH
48148: CALL_OW 264
48152: PUSH
48153: LD_INT 5
48155: PUSH
48156: LD_INT 27
48158: PUSH
48159: LD_INT 44
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: LIST
48166: IN
48167: IFFALSE 48188
// points := [ 14 , 50 , 16 ] ;
48169: LD_ADDR_VAR 0 9
48173: PUSH
48174: LD_INT 14
48176: PUSH
48177: LD_INT 50
48179: PUSH
48180: LD_INT 16
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48188: LD_VAR 0 6
48192: PPUSH
48193: CALL_OW 264
48197: PUSH
48198: LD_INT 6
48200: PUSH
48201: LD_INT 46
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: IN
48208: IFFALSE 48229
// points := [ 32 , 120 , 70 ] ;
48210: LD_ADDR_VAR 0 9
48214: PUSH
48215: LD_INT 32
48217: PUSH
48218: LD_INT 120
48220: PUSH
48221: LD_INT 70
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48229: LD_VAR 0 6
48233: PPUSH
48234: CALL_OW 264
48238: PUSH
48239: LD_INT 7
48241: PUSH
48242: LD_INT 28
48244: PUSH
48245: LD_INT 45
48247: PUSH
48248: LD_INT 92
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: IN
48257: IFFALSE 48278
// points := [ 35 , 20 , 45 ] ;
48259: LD_ADDR_VAR 0 9
48263: PUSH
48264: LD_INT 35
48266: PUSH
48267: LD_INT 20
48269: PUSH
48270: LD_INT 45
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48278: LD_VAR 0 6
48282: PPUSH
48283: CALL_OW 264
48287: PUSH
48288: LD_INT 47
48290: PUSH
48291: EMPTY
48292: LIST
48293: IN
48294: IFFALSE 48315
// points := [ 67 , 45 , 75 ] ;
48296: LD_ADDR_VAR 0 9
48300: PUSH
48301: LD_INT 67
48303: PUSH
48304: LD_INT 45
48306: PUSH
48307: LD_INT 75
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48315: LD_VAR 0 6
48319: PPUSH
48320: CALL_OW 264
48324: PUSH
48325: LD_INT 26
48327: PUSH
48328: EMPTY
48329: LIST
48330: IN
48331: IFFALSE 48352
// points := [ 120 , 30 , 80 ] ;
48333: LD_ADDR_VAR 0 9
48337: PUSH
48338: LD_INT 120
48340: PUSH
48341: LD_INT 30
48343: PUSH
48344: LD_INT 80
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48352: LD_VAR 0 6
48356: PPUSH
48357: CALL_OW 264
48361: PUSH
48362: LD_INT 22
48364: PUSH
48365: EMPTY
48366: LIST
48367: IN
48368: IFFALSE 48389
// points := [ 40 , 1 , 1 ] ;
48370: LD_ADDR_VAR 0 9
48374: PUSH
48375: LD_INT 40
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48389: LD_VAR 0 6
48393: PPUSH
48394: CALL_OW 264
48398: PUSH
48399: LD_INT 29
48401: PUSH
48402: EMPTY
48403: LIST
48404: IN
48405: IFFALSE 48426
// points := [ 70 , 200 , 400 ] ;
48407: LD_ADDR_VAR 0 9
48411: PUSH
48412: LD_INT 70
48414: PUSH
48415: LD_INT 200
48417: PUSH
48418: LD_INT 400
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: LIST
48425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48426: LD_VAR 0 6
48430: PPUSH
48431: CALL_OW 264
48435: PUSH
48436: LD_INT 14
48438: PUSH
48439: LD_INT 53
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: IN
48446: IFFALSE 48467
// points := [ 40 , 10 , 20 ] ;
48448: LD_ADDR_VAR 0 9
48452: PUSH
48453: LD_INT 40
48455: PUSH
48456: LD_INT 10
48458: PUSH
48459: LD_INT 20
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48467: LD_VAR 0 6
48471: PPUSH
48472: CALL_OW 264
48476: PUSH
48477: LD_INT 9
48479: PUSH
48480: EMPTY
48481: LIST
48482: IN
48483: IFFALSE 48504
// points := [ 5 , 70 , 20 ] ;
48485: LD_ADDR_VAR 0 9
48489: PUSH
48490: LD_INT 5
48492: PUSH
48493: LD_INT 70
48495: PUSH
48496: LD_INT 20
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: LIST
48503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48504: LD_VAR 0 6
48508: PPUSH
48509: CALL_OW 264
48513: PUSH
48514: LD_INT 10
48516: PUSH
48517: EMPTY
48518: LIST
48519: IN
48520: IFFALSE 48541
// points := [ 35 , 110 , 70 ] ;
48522: LD_ADDR_VAR 0 9
48526: PUSH
48527: LD_INT 35
48529: PUSH
48530: LD_INT 110
48532: PUSH
48533: LD_INT 70
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48541: LD_VAR 0 6
48545: PPUSH
48546: CALL_OW 265
48550: PUSH
48551: LD_INT 25
48553: EQUAL
48554: IFFALSE 48575
// points := [ 80 , 65 , 100 ] ;
48556: LD_ADDR_VAR 0 9
48560: PUSH
48561: LD_INT 80
48563: PUSH
48564: LD_INT 65
48566: PUSH
48567: LD_INT 100
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48575: LD_VAR 0 6
48579: PPUSH
48580: CALL_OW 263
48584: PUSH
48585: LD_INT 1
48587: EQUAL
48588: IFFALSE 48623
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48590: LD_ADDR_VAR 0 10
48594: PUSH
48595: LD_VAR 0 10
48599: PUSH
48600: LD_VAR 0 6
48604: PPUSH
48605: CALL_OW 311
48609: PPUSH
48610: LD_INT 3
48612: PPUSH
48613: CALL_OW 259
48617: PUSH
48618: LD_INT 4
48620: MUL
48621: MUL
48622: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48623: LD_VAR 0 6
48627: PPUSH
48628: CALL_OW 263
48632: PUSH
48633: LD_INT 2
48635: EQUAL
48636: IFFALSE 48687
// begin j := IsControledBy ( i ) ;
48638: LD_ADDR_VAR 0 7
48642: PUSH
48643: LD_VAR 0 6
48647: PPUSH
48648: CALL_OW 312
48652: ST_TO_ADDR
// if j then
48653: LD_VAR 0 7
48657: IFFALSE 48687
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48659: LD_ADDR_VAR 0 10
48663: PUSH
48664: LD_VAR 0 10
48668: PUSH
48669: LD_VAR 0 7
48673: PPUSH
48674: LD_INT 3
48676: PPUSH
48677: CALL_OW 259
48681: PUSH
48682: LD_INT 3
48684: MUL
48685: MUL
48686: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48687: LD_VAR 0 6
48691: PPUSH
48692: CALL_OW 264
48696: PUSH
48697: LD_INT 5
48699: PUSH
48700: LD_INT 6
48702: PUSH
48703: LD_INT 46
48705: PUSH
48706: LD_INT 44
48708: PUSH
48709: LD_INT 47
48711: PUSH
48712: LD_INT 45
48714: PUSH
48715: LD_INT 28
48717: PUSH
48718: LD_INT 7
48720: PUSH
48721: LD_INT 27
48723: PUSH
48724: LD_INT 29
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: IN
48739: IFFALSE 48759
48741: PUSH
48742: LD_VAR 0 1
48746: PPUSH
48747: LD_INT 52
48749: PPUSH
48750: CALL_OW 321
48754: PUSH
48755: LD_INT 2
48757: EQUAL
48758: AND
48759: IFFALSE 48776
// bpoints := bpoints * 1.2 ;
48761: LD_ADDR_VAR 0 10
48765: PUSH
48766: LD_VAR 0 10
48770: PUSH
48771: LD_REAL  1.20000000000000E+0000
48774: MUL
48775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48776: LD_VAR 0 6
48780: PPUSH
48781: CALL_OW 264
48785: PUSH
48786: LD_INT 6
48788: PUSH
48789: LD_INT 46
48791: PUSH
48792: LD_INT 47
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: IN
48800: IFFALSE 48817
// bpoints := bpoints * 1.2 ;
48802: LD_ADDR_VAR 0 10
48806: PUSH
48807: LD_VAR 0 10
48811: PUSH
48812: LD_REAL  1.20000000000000E+0000
48815: MUL
48816: ST_TO_ADDR
// end ; unit_building :
48817: GO 48831
48819: LD_INT 3
48821: DOUBLE
48822: EQUAL
48823: IFTRUE 48827
48825: GO 48830
48827: POP
// ; end ;
48828: GO 48831
48830: POP
// for j = 1 to 3 do
48831: LD_ADDR_VAR 0 7
48835: PUSH
48836: DOUBLE
48837: LD_INT 1
48839: DEC
48840: ST_TO_ADDR
48841: LD_INT 3
48843: PUSH
48844: FOR_TO
48845: IFFALSE 48898
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48847: LD_ADDR_VAR 0 5
48851: PUSH
48852: LD_VAR 0 5
48856: PPUSH
48857: LD_VAR 0 7
48861: PPUSH
48862: LD_VAR 0 5
48866: PUSH
48867: LD_VAR 0 7
48871: ARRAY
48872: PUSH
48873: LD_VAR 0 9
48877: PUSH
48878: LD_VAR 0 7
48882: ARRAY
48883: PUSH
48884: LD_VAR 0 10
48888: MUL
48889: PLUS
48890: PPUSH
48891: CALL_OW 1
48895: ST_TO_ADDR
48896: GO 48844
48898: POP
48899: POP
// end ;
48900: GO 47373
48902: POP
48903: POP
// result := Replace ( result , 4 , tmp ) ;
48904: LD_ADDR_VAR 0 5
48908: PUSH
48909: LD_VAR 0 5
48913: PPUSH
48914: LD_INT 4
48916: PPUSH
48917: LD_VAR 0 8
48921: PPUSH
48922: CALL_OW 1
48926: ST_TO_ADDR
// end ;
48927: LD_VAR 0 5
48931: RET
// export function DangerAtRange ( unit , range ) ; begin
48932: LD_INT 0
48934: PPUSH
// if not unit then
48935: LD_VAR 0 1
48939: NOT
48940: IFFALSE 48944
// exit ;
48942: GO 48989
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48944: LD_ADDR_VAR 0 3
48948: PUSH
48949: LD_VAR 0 1
48953: PPUSH
48954: CALL_OW 255
48958: PPUSH
48959: LD_VAR 0 1
48963: PPUSH
48964: CALL_OW 250
48968: PPUSH
48969: LD_VAR 0 1
48973: PPUSH
48974: CALL_OW 251
48978: PPUSH
48979: LD_VAR 0 2
48983: PPUSH
48984: CALL 47223 0 4
48988: ST_TO_ADDR
// end ;
48989: LD_VAR 0 3
48993: RET
// export function DangerInArea ( side , area ) ; begin
48994: LD_INT 0
48996: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48997: LD_ADDR_VAR 0 3
49001: PUSH
49002: LD_VAR 0 2
49006: PPUSH
49007: LD_INT 81
49009: PUSH
49010: LD_VAR 0 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PPUSH
49019: CALL_OW 70
49023: ST_TO_ADDR
// end ;
49024: LD_VAR 0 3
49028: RET
// export function IsExtension ( b ) ; begin
49029: LD_INT 0
49031: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49032: LD_ADDR_VAR 0 2
49036: PUSH
49037: LD_VAR 0 1
49041: PUSH
49042: LD_INT 23
49044: PUSH
49045: LD_INT 20
49047: PUSH
49048: LD_INT 22
49050: PUSH
49051: LD_INT 17
49053: PUSH
49054: LD_INT 24
49056: PUSH
49057: LD_INT 21
49059: PUSH
49060: LD_INT 19
49062: PUSH
49063: LD_INT 16
49065: PUSH
49066: LD_INT 25
49068: PUSH
49069: LD_INT 18
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: IN
49084: ST_TO_ADDR
// end ;
49085: LD_VAR 0 2
49089: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49090: LD_INT 0
49092: PPUSH
49093: PPUSH
49094: PPUSH
// result := [ ] ;
49095: LD_ADDR_VAR 0 4
49099: PUSH
49100: EMPTY
49101: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49102: LD_ADDR_VAR 0 5
49106: PUSH
49107: LD_VAR 0 2
49111: PPUSH
49112: LD_INT 21
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PPUSH
49122: CALL_OW 70
49126: ST_TO_ADDR
// if not tmp then
49127: LD_VAR 0 5
49131: NOT
49132: IFFALSE 49136
// exit ;
49134: GO 49200
// if checkLink then
49136: LD_VAR 0 3
49140: IFFALSE 49190
// begin for i in tmp do
49142: LD_ADDR_VAR 0 6
49146: PUSH
49147: LD_VAR 0 5
49151: PUSH
49152: FOR_IN
49153: IFFALSE 49188
// if GetBase ( i ) <> base then
49155: LD_VAR 0 6
49159: PPUSH
49160: CALL_OW 274
49164: PUSH
49165: LD_VAR 0 1
49169: NONEQUAL
49170: IFFALSE 49186
// ComLinkToBase ( base , i ) ;
49172: LD_VAR 0 1
49176: PPUSH
49177: LD_VAR 0 6
49181: PPUSH
49182: CALL_OW 169
49186: GO 49152
49188: POP
49189: POP
// end ; result := tmp ;
49190: LD_ADDR_VAR 0 4
49194: PUSH
49195: LD_VAR 0 5
49199: ST_TO_ADDR
// end ;
49200: LD_VAR 0 4
49204: RET
// export function ComComplete ( units , b ) ; var i ; begin
49205: LD_INT 0
49207: PPUSH
49208: PPUSH
// if not units then
49209: LD_VAR 0 1
49213: NOT
49214: IFFALSE 49218
// exit ;
49216: GO 49308
// for i in units do
49218: LD_ADDR_VAR 0 4
49222: PUSH
49223: LD_VAR 0 1
49227: PUSH
49228: FOR_IN
49229: IFFALSE 49306
// if BuildingStatus ( b ) = bs_build then
49231: LD_VAR 0 2
49235: PPUSH
49236: CALL_OW 461
49240: PUSH
49241: LD_INT 1
49243: EQUAL
49244: IFFALSE 49304
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49246: LD_VAR 0 4
49250: PPUSH
49251: LD_STRING h
49253: PUSH
49254: LD_VAR 0 2
49258: PPUSH
49259: CALL_OW 250
49263: PUSH
49264: LD_VAR 0 2
49268: PPUSH
49269: CALL_OW 251
49273: PUSH
49274: LD_VAR 0 2
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: PUSH
49297: EMPTY
49298: LIST
49299: PPUSH
49300: CALL_OW 446
49304: GO 49228
49306: POP
49307: POP
// end ;
49308: LD_VAR 0 3
49312: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49313: LD_INT 0
49315: PPUSH
49316: PPUSH
49317: PPUSH
49318: PPUSH
49319: PPUSH
49320: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49321: LD_VAR 0 1
49325: NOT
49326: IFTRUE 49343
49328: PUSH
49329: LD_VAR 0 1
49333: PPUSH
49334: CALL_OW 263
49338: PUSH
49339: LD_INT 2
49341: NONEQUAL
49342: OR
49343: IFFALSE 49347
// exit ;
49345: GO 49663
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49347: LD_ADDR_VAR 0 6
49351: PUSH
49352: LD_INT 22
49354: PUSH
49355: LD_VAR 0 1
49359: PPUSH
49360: CALL_OW 255
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 30
49374: PUSH
49375: LD_INT 36
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 34
49384: PUSH
49385: LD_INT 31
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PPUSH
49401: CALL_OW 69
49405: ST_TO_ADDR
// if not tmp then
49406: LD_VAR 0 6
49410: NOT
49411: IFFALSE 49415
// exit ;
49413: GO 49663
// result := [ ] ;
49415: LD_ADDR_VAR 0 2
49419: PUSH
49420: EMPTY
49421: ST_TO_ADDR
// for i in tmp do
49422: LD_ADDR_VAR 0 3
49426: PUSH
49427: LD_VAR 0 6
49431: PUSH
49432: FOR_IN
49433: IFFALSE 49504
// begin t := UnitsInside ( i ) ;
49435: LD_ADDR_VAR 0 4
49439: PUSH
49440: LD_VAR 0 3
49444: PPUSH
49445: CALL_OW 313
49449: ST_TO_ADDR
// if t then
49450: LD_VAR 0 4
49454: IFFALSE 49502
// for j in t do
49456: LD_ADDR_VAR 0 7
49460: PUSH
49461: LD_VAR 0 4
49465: PUSH
49466: FOR_IN
49467: IFFALSE 49500
// result := Replace ( result , result + 1 , j ) ;
49469: LD_ADDR_VAR 0 2
49473: PUSH
49474: LD_VAR 0 2
49478: PPUSH
49479: LD_VAR 0 2
49483: PUSH
49484: LD_INT 1
49486: PLUS
49487: PPUSH
49488: LD_VAR 0 7
49492: PPUSH
49493: CALL_OW 1
49497: ST_TO_ADDR
49498: GO 49466
49500: POP
49501: POP
// end ;
49502: GO 49432
49504: POP
49505: POP
// if not result then
49506: LD_VAR 0 2
49510: NOT
49511: IFFALSE 49515
// exit ;
49513: GO 49663
// mech := result [ 1 ] ;
49515: LD_ADDR_VAR 0 5
49519: PUSH
49520: LD_VAR 0 2
49524: PUSH
49525: LD_INT 1
49527: ARRAY
49528: ST_TO_ADDR
// if result > 1 then
49529: LD_VAR 0 2
49533: PUSH
49534: LD_INT 1
49536: GREATER
49537: IFFALSE 49649
// begin for i = 2 to result do
49539: LD_ADDR_VAR 0 3
49543: PUSH
49544: DOUBLE
49545: LD_INT 2
49547: DEC
49548: ST_TO_ADDR
49549: LD_VAR 0 2
49553: PUSH
49554: FOR_TO
49555: IFFALSE 49647
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49557: LD_ADDR_VAR 0 4
49561: PUSH
49562: LD_VAR 0 2
49566: PUSH
49567: LD_VAR 0 3
49571: ARRAY
49572: PPUSH
49573: LD_INT 3
49575: PPUSH
49576: CALL_OW 259
49580: PUSH
49581: LD_VAR 0 2
49585: PUSH
49586: LD_VAR 0 3
49590: ARRAY
49591: PPUSH
49592: CALL_OW 432
49596: MINUS
49597: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49598: LD_VAR 0 4
49602: PUSH
49603: LD_VAR 0 5
49607: PPUSH
49608: LD_INT 3
49610: PPUSH
49611: CALL_OW 259
49615: PUSH
49616: LD_VAR 0 5
49620: PPUSH
49621: CALL_OW 432
49625: MINUS
49626: GREATEREQUAL
49627: IFFALSE 49645
// mech := result [ i ] ;
49629: LD_ADDR_VAR 0 5
49633: PUSH
49634: LD_VAR 0 2
49638: PUSH
49639: LD_VAR 0 3
49643: ARRAY
49644: ST_TO_ADDR
// end ;
49645: GO 49554
49647: POP
49648: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49649: LD_VAR 0 1
49653: PPUSH
49654: LD_VAR 0 5
49658: PPUSH
49659: CALL_OW 135
// end ;
49663: LD_VAR 0 2
49667: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49668: LD_INT 0
49670: PPUSH
49671: PPUSH
49672: PPUSH
49673: PPUSH
49674: PPUSH
49675: PPUSH
49676: PPUSH
49677: PPUSH
49678: PPUSH
49679: PPUSH
49680: PPUSH
49681: PPUSH
49682: PPUSH
// result := [ ] ;
49683: LD_ADDR_VAR 0 7
49687: PUSH
49688: EMPTY
49689: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49690: LD_VAR 0 1
49694: PPUSH
49695: CALL_OW 266
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: IN
49710: NOT
49711: IFFALSE 49715
// exit ;
49713: GO 51355
// if name then
49715: LD_VAR 0 3
49719: IFFALSE 49735
// SetBName ( base_dep , name ) ;
49721: LD_VAR 0 1
49725: PPUSH
49726: LD_VAR 0 3
49730: PPUSH
49731: CALL_OW 500
// base := GetBase ( base_dep ) ;
49735: LD_ADDR_VAR 0 15
49739: PUSH
49740: LD_VAR 0 1
49744: PPUSH
49745: CALL_OW 274
49749: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49750: LD_ADDR_VAR 0 16
49754: PUSH
49755: LD_VAR 0 1
49759: PPUSH
49760: CALL_OW 255
49764: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49765: LD_ADDR_VAR 0 17
49769: PUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 248
49779: ST_TO_ADDR
// if sources then
49780: LD_VAR 0 5
49784: IFFALSE 49831
// for i = 1 to 3 do
49786: LD_ADDR_VAR 0 8
49790: PUSH
49791: DOUBLE
49792: LD_INT 1
49794: DEC
49795: ST_TO_ADDR
49796: LD_INT 3
49798: PUSH
49799: FOR_TO
49800: IFFALSE 49829
// AddResourceType ( base , i , sources [ i ] ) ;
49802: LD_VAR 0 15
49806: PPUSH
49807: LD_VAR 0 8
49811: PPUSH
49812: LD_VAR 0 5
49816: PUSH
49817: LD_VAR 0 8
49821: ARRAY
49822: PPUSH
49823: CALL_OW 276
49827: GO 49799
49829: POP
49830: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49831: LD_ADDR_VAR 0 18
49835: PUSH
49836: LD_VAR 0 15
49840: PPUSH
49841: LD_VAR 0 2
49845: PPUSH
49846: LD_INT 1
49848: PPUSH
49849: CALL 49090 0 3
49853: ST_TO_ADDR
// InitHc ;
49854: CALL_OW 19
// InitUc ;
49858: CALL_OW 18
// uc_side := side ;
49862: LD_ADDR_OWVAR 20
49866: PUSH
49867: LD_VAR 0 16
49871: ST_TO_ADDR
// uc_nation := nation ;
49872: LD_ADDR_OWVAR 21
49876: PUSH
49877: LD_VAR 0 17
49881: ST_TO_ADDR
// if buildings then
49882: LD_VAR 0 18
49886: IFFALSE 51214
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49888: LD_ADDR_VAR 0 19
49892: PUSH
49893: LD_VAR 0 18
49897: PPUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 30
49903: PUSH
49904: LD_INT 29
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 30
49913: PUSH
49914: LD_INT 30
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: PPUSH
49926: CALL_OW 72
49930: ST_TO_ADDR
// if tmp then
49931: LD_VAR 0 19
49935: IFFALSE 49983
// for i in tmp do
49937: LD_ADDR_VAR 0 8
49941: PUSH
49942: LD_VAR 0 19
49946: PUSH
49947: FOR_IN
49948: IFFALSE 49981
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49950: LD_VAR 0 8
49954: PPUSH
49955: CALL_OW 250
49959: PPUSH
49960: LD_VAR 0 8
49964: PPUSH
49965: CALL_OW 251
49969: PPUSH
49970: LD_VAR 0 16
49974: PPUSH
49975: CALL_OW 441
49979: GO 49947
49981: POP
49982: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49983: LD_VAR 0 18
49987: PPUSH
49988: LD_INT 2
49990: PUSH
49991: LD_INT 30
49993: PUSH
49994: LD_INT 32
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 30
50003: PUSH
50004: LD_INT 33
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: PPUSH
50016: CALL_OW 72
50020: IFFALSE 50108
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50022: LD_ADDR_VAR 0 8
50026: PUSH
50027: LD_VAR 0 18
50031: PPUSH
50032: LD_INT 2
50034: PUSH
50035: LD_INT 30
50037: PUSH
50038: LD_INT 32
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 30
50047: PUSH
50048: LD_INT 33
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: LIST
50059: PPUSH
50060: CALL_OW 72
50064: PUSH
50065: FOR_IN
50066: IFFALSE 50106
// begin if not GetBWeapon ( i ) then
50068: LD_VAR 0 8
50072: PPUSH
50073: CALL_OW 269
50077: NOT
50078: IFFALSE 50104
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50080: LD_VAR 0 8
50084: PPUSH
50085: LD_VAR 0 8
50089: PPUSH
50090: LD_VAR 0 2
50094: PPUSH
50095: CALL 51360 0 2
50099: PPUSH
50100: CALL_OW 431
// end ;
50104: GO 50065
50106: POP
50107: POP
// end ; for i = 1 to personel do
50108: LD_ADDR_VAR 0 8
50112: PUSH
50113: DOUBLE
50114: LD_INT 1
50116: DEC
50117: ST_TO_ADDR
50118: LD_VAR 0 6
50122: PUSH
50123: FOR_TO
50124: IFFALSE 51194
// begin if i > 4 then
50126: LD_VAR 0 8
50130: PUSH
50131: LD_INT 4
50133: GREATER
50134: IFFALSE 50138
// break ;
50136: GO 51194
// case i of 1 :
50138: LD_VAR 0 8
50142: PUSH
50143: LD_INT 1
50145: DOUBLE
50146: EQUAL
50147: IFTRUE 50151
50149: GO 50231
50151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50152: LD_ADDR_VAR 0 12
50156: PUSH
50157: LD_VAR 0 18
50161: PPUSH
50162: LD_INT 22
50164: PUSH
50165: LD_VAR 0 16
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 58
50176: PUSH
50177: EMPTY
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 30
50185: PUSH
50186: LD_INT 32
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 30
50195: PUSH
50196: LD_INT 4
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 30
50205: PUSH
50206: LD_INT 5
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: PPUSH
50224: CALL_OW 72
50228: ST_TO_ADDR
50229: GO 50453
50231: LD_INT 2
50233: DOUBLE
50234: EQUAL
50235: IFTRUE 50239
50237: GO 50301
50239: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50240: LD_ADDR_VAR 0 12
50244: PUSH
50245: LD_VAR 0 18
50249: PPUSH
50250: LD_INT 22
50252: PUSH
50253: LD_VAR 0 16
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 30
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 30
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PPUSH
50294: CALL_OW 72
50298: ST_TO_ADDR
50299: GO 50453
50301: LD_INT 3
50303: DOUBLE
50304: EQUAL
50305: IFTRUE 50309
50307: GO 50371
50309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50310: LD_ADDR_VAR 0 12
50314: PUSH
50315: LD_VAR 0 18
50319: PPUSH
50320: LD_INT 22
50322: PUSH
50323: LD_VAR 0 16
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 30
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 30
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PPUSH
50364: CALL_OW 72
50368: ST_TO_ADDR
50369: GO 50453
50371: LD_INT 4
50373: DOUBLE
50374: EQUAL
50375: IFTRUE 50379
50377: GO 50452
50379: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50380: LD_ADDR_VAR 0 12
50384: PUSH
50385: LD_VAR 0 18
50389: PPUSH
50390: LD_INT 22
50392: PUSH
50393: LD_VAR 0 16
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 30
50407: PUSH
50408: LD_INT 6
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 30
50417: PUSH
50418: LD_INT 7
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 30
50427: PUSH
50428: LD_INT 8
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PPUSH
50445: CALL_OW 72
50449: ST_TO_ADDR
50450: GO 50453
50452: POP
// if i = 1 then
50453: LD_VAR 0 8
50457: PUSH
50458: LD_INT 1
50460: EQUAL
50461: IFFALSE 50572
// begin tmp := [ ] ;
50463: LD_ADDR_VAR 0 19
50467: PUSH
50468: EMPTY
50469: ST_TO_ADDR
// for j in f do
50470: LD_ADDR_VAR 0 9
50474: PUSH
50475: LD_VAR 0 12
50479: PUSH
50480: FOR_IN
50481: IFFALSE 50554
// if GetBType ( j ) = b_bunker then
50483: LD_VAR 0 9
50487: PPUSH
50488: CALL_OW 266
50492: PUSH
50493: LD_INT 32
50495: EQUAL
50496: IFFALSE 50523
// tmp := Insert ( tmp , 1 , j ) else
50498: LD_ADDR_VAR 0 19
50502: PUSH
50503: LD_VAR 0 19
50507: PPUSH
50508: LD_INT 1
50510: PPUSH
50511: LD_VAR 0 9
50515: PPUSH
50516: CALL_OW 2
50520: ST_TO_ADDR
50521: GO 50552
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50523: LD_ADDR_VAR 0 19
50527: PUSH
50528: LD_VAR 0 19
50532: PPUSH
50533: LD_VAR 0 19
50537: PUSH
50538: LD_INT 1
50540: PLUS
50541: PPUSH
50542: LD_VAR 0 9
50546: PPUSH
50547: CALL_OW 2
50551: ST_TO_ADDR
50552: GO 50480
50554: POP
50555: POP
// if tmp then
50556: LD_VAR 0 19
50560: IFFALSE 50572
// f := tmp ;
50562: LD_ADDR_VAR 0 12
50566: PUSH
50567: LD_VAR 0 19
50571: ST_TO_ADDR
// end ; x := personel [ i ] ;
50572: LD_ADDR_VAR 0 13
50576: PUSH
50577: LD_VAR 0 6
50581: PUSH
50582: LD_VAR 0 8
50586: ARRAY
50587: ST_TO_ADDR
// if x = - 1 then
50588: LD_VAR 0 13
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: EQUAL
50597: IFFALSE 50808
// begin for j in f do
50599: LD_ADDR_VAR 0 9
50603: PUSH
50604: LD_VAR 0 12
50608: PUSH
50609: FOR_IN
50610: IFFALSE 50804
// repeat InitHc ;
50612: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50616: LD_VAR 0 9
50620: PPUSH
50621: CALL_OW 266
50625: PUSH
50626: LD_INT 5
50628: EQUAL
50629: IFFALSE 50699
// begin if UnitsInside ( j ) < 3 then
50631: LD_VAR 0 9
50635: PPUSH
50636: CALL_OW 313
50640: PUSH
50641: LD_INT 3
50643: LESS
50644: IFFALSE 50680
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50646: LD_INT 0
50648: PPUSH
50649: LD_INT 5
50651: PUSH
50652: LD_INT 8
50654: PUSH
50655: LD_INT 9
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: PUSH
50663: LD_VAR 0 17
50667: ARRAY
50668: PPUSH
50669: LD_VAR 0 4
50673: PPUSH
50674: CALL_OW 380
50678: GO 50697
// PrepareHuman ( false , i , skill ) ;
50680: LD_INT 0
50682: PPUSH
50683: LD_VAR 0 8
50687: PPUSH
50688: LD_VAR 0 4
50692: PPUSH
50693: CALL_OW 380
// end else
50697: GO 50716
// PrepareHuman ( false , i , skill ) ;
50699: LD_INT 0
50701: PPUSH
50702: LD_VAR 0 8
50706: PPUSH
50707: LD_VAR 0 4
50711: PPUSH
50712: CALL_OW 380
// un := CreateHuman ;
50716: LD_ADDR_VAR 0 14
50720: PUSH
50721: CALL_OW 44
50725: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50726: LD_ADDR_VAR 0 7
50730: PUSH
50731: LD_VAR 0 7
50735: PPUSH
50736: LD_INT 1
50738: PPUSH
50739: LD_VAR 0 14
50743: PPUSH
50744: CALL_OW 2
50748: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50749: LD_VAR 0 14
50753: PPUSH
50754: LD_VAR 0 9
50758: PPUSH
50759: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50763: LD_VAR 0 9
50767: PPUSH
50768: CALL_OW 313
50772: PUSH
50773: LD_INT 6
50775: EQUAL
50776: IFTRUE 50800
50778: PUSH
50779: LD_VAR 0 9
50783: PPUSH
50784: CALL_OW 266
50788: PUSH
50789: LD_INT 32
50791: PUSH
50792: LD_INT 31
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: IN
50799: OR
50800: IFFALSE 50612
50802: GO 50609
50804: POP
50805: POP
// end else
50806: GO 51192
// for j = 1 to x do
50808: LD_ADDR_VAR 0 9
50812: PUSH
50813: DOUBLE
50814: LD_INT 1
50816: DEC
50817: ST_TO_ADDR
50818: LD_VAR 0 13
50822: PUSH
50823: FOR_TO
50824: IFFALSE 51190
// begin InitHc ;
50826: CALL_OW 19
// if not f then
50830: LD_VAR 0 12
50834: NOT
50835: IFFALSE 50924
// begin PrepareHuman ( false , i , skill ) ;
50837: LD_INT 0
50839: PPUSH
50840: LD_VAR 0 8
50844: PPUSH
50845: LD_VAR 0 4
50849: PPUSH
50850: CALL_OW 380
// un := CreateHuman ;
50854: LD_ADDR_VAR 0 14
50858: PUSH
50859: CALL_OW 44
50863: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50864: LD_ADDR_VAR 0 7
50868: PUSH
50869: LD_VAR 0 7
50873: PPUSH
50874: LD_INT 1
50876: PPUSH
50877: LD_VAR 0 14
50881: PPUSH
50882: CALL_OW 2
50886: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50887: LD_VAR 0 14
50891: PPUSH
50892: LD_VAR 0 1
50896: PPUSH
50897: CALL_OW 250
50901: PPUSH
50902: LD_VAR 0 1
50906: PPUSH
50907: CALL_OW 251
50911: PPUSH
50912: LD_INT 10
50914: PPUSH
50915: LD_INT 0
50917: PPUSH
50918: CALL_OW 50
// continue ;
50922: GO 50823
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50924: LD_VAR 0 12
50928: PUSH
50929: LD_INT 1
50931: ARRAY
50932: PPUSH
50933: CALL_OW 313
50937: IFFALSE 50965
50939: PUSH
50940: LD_VAR 0 12
50944: PUSH
50945: LD_INT 1
50947: ARRAY
50948: PPUSH
50949: CALL_OW 266
50953: PUSH
50954: LD_INT 32
50956: PUSH
50957: LD_INT 31
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: IN
50964: AND
50965: IFTRUE 50986
50967: PUSH
50968: LD_VAR 0 12
50972: PUSH
50973: LD_INT 1
50975: ARRAY
50976: PPUSH
50977: CALL_OW 313
50981: PUSH
50982: LD_INT 6
50984: EQUAL
50985: OR
50986: IFFALSE 51006
// f := Delete ( f , 1 ) ;
50988: LD_ADDR_VAR 0 12
50992: PUSH
50993: LD_VAR 0 12
50997: PPUSH
50998: LD_INT 1
51000: PPUSH
51001: CALL_OW 3
51005: ST_TO_ADDR
// if not f then
51006: LD_VAR 0 12
51010: NOT
51011: IFFALSE 51029
// begin x := x + 2 ;
51013: LD_ADDR_VAR 0 13
51017: PUSH
51018: LD_VAR 0 13
51022: PUSH
51023: LD_INT 2
51025: PLUS
51026: ST_TO_ADDR
// continue ;
51027: GO 50823
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51029: LD_VAR 0 12
51033: PUSH
51034: LD_INT 1
51036: ARRAY
51037: PPUSH
51038: CALL_OW 266
51042: PUSH
51043: LD_INT 5
51045: EQUAL
51046: IFFALSE 51120
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51048: LD_VAR 0 12
51052: PUSH
51053: LD_INT 1
51055: ARRAY
51056: PPUSH
51057: CALL_OW 313
51061: PUSH
51062: LD_INT 3
51064: LESS
51065: IFFALSE 51101
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51067: LD_INT 0
51069: PPUSH
51070: LD_INT 5
51072: PUSH
51073: LD_INT 8
51075: PUSH
51076: LD_INT 9
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: LIST
51083: PUSH
51084: LD_VAR 0 17
51088: ARRAY
51089: PPUSH
51090: LD_VAR 0 4
51094: PPUSH
51095: CALL_OW 380
51099: GO 51118
// PrepareHuman ( false , i , skill ) ;
51101: LD_INT 0
51103: PPUSH
51104: LD_VAR 0 8
51108: PPUSH
51109: LD_VAR 0 4
51113: PPUSH
51114: CALL_OW 380
// end else
51118: GO 51137
// PrepareHuman ( false , i , skill ) ;
51120: LD_INT 0
51122: PPUSH
51123: LD_VAR 0 8
51127: PPUSH
51128: LD_VAR 0 4
51132: PPUSH
51133: CALL_OW 380
// un := CreateHuman ;
51137: LD_ADDR_VAR 0 14
51141: PUSH
51142: CALL_OW 44
51146: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51147: LD_ADDR_VAR 0 7
51151: PUSH
51152: LD_VAR 0 7
51156: PPUSH
51157: LD_INT 1
51159: PPUSH
51160: LD_VAR 0 14
51164: PPUSH
51165: CALL_OW 2
51169: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51170: LD_VAR 0 14
51174: PPUSH
51175: LD_VAR 0 12
51179: PUSH
51180: LD_INT 1
51182: ARRAY
51183: PPUSH
51184: CALL_OW 52
// end ;
51188: GO 50823
51190: POP
51191: POP
// end ;
51192: GO 50123
51194: POP
51195: POP
// result := result ^ buildings ;
51196: LD_ADDR_VAR 0 7
51200: PUSH
51201: LD_VAR 0 7
51205: PUSH
51206: LD_VAR 0 18
51210: ADD
51211: ST_TO_ADDR
// end else
51212: GO 51355
// begin for i = 1 to personel do
51214: LD_ADDR_VAR 0 8
51218: PUSH
51219: DOUBLE
51220: LD_INT 1
51222: DEC
51223: ST_TO_ADDR
51224: LD_VAR 0 6
51228: PUSH
51229: FOR_TO
51230: IFFALSE 51353
// begin if i > 4 then
51232: LD_VAR 0 8
51236: PUSH
51237: LD_INT 4
51239: GREATER
51240: IFFALSE 51244
// break ;
51242: GO 51353
// x := personel [ i ] ;
51244: LD_ADDR_VAR 0 13
51248: PUSH
51249: LD_VAR 0 6
51253: PUSH
51254: LD_VAR 0 8
51258: ARRAY
51259: ST_TO_ADDR
// if x = - 1 then
51260: LD_VAR 0 13
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: EQUAL
51269: IFFALSE 51273
// continue ;
51271: GO 51229
// PrepareHuman ( false , i , skill ) ;
51273: LD_INT 0
51275: PPUSH
51276: LD_VAR 0 8
51280: PPUSH
51281: LD_VAR 0 4
51285: PPUSH
51286: CALL_OW 380
// un := CreateHuman ;
51290: LD_ADDR_VAR 0 14
51294: PUSH
51295: CALL_OW 44
51299: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51300: LD_VAR 0 14
51304: PPUSH
51305: LD_VAR 0 1
51309: PPUSH
51310: CALL_OW 250
51314: PPUSH
51315: LD_VAR 0 1
51319: PPUSH
51320: CALL_OW 251
51324: PPUSH
51325: LD_INT 10
51327: PPUSH
51328: LD_INT 0
51330: PPUSH
51331: CALL_OW 50
// result := result ^ un ;
51335: LD_ADDR_VAR 0 7
51339: PUSH
51340: LD_VAR 0 7
51344: PUSH
51345: LD_VAR 0 14
51349: ADD
51350: ST_TO_ADDR
// end ;
51351: GO 51229
51353: POP
51354: POP
// end ; end ;
51355: LD_VAR 0 7
51359: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51360: LD_INT 0
51362: PPUSH
51363: PPUSH
51364: PPUSH
51365: PPUSH
51366: PPUSH
51367: PPUSH
51368: PPUSH
51369: PPUSH
51370: PPUSH
51371: PPUSH
51372: PPUSH
51373: PPUSH
51374: PPUSH
51375: PPUSH
51376: PPUSH
51377: PPUSH
// result := false ;
51378: LD_ADDR_VAR 0 3
51382: PUSH
51383: LD_INT 0
51385: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51386: LD_VAR 0 1
51390: NOT
51391: IFTRUE 51416
51393: PUSH
51394: LD_VAR 0 1
51398: PPUSH
51399: CALL_OW 266
51403: PUSH
51404: LD_INT 32
51406: PUSH
51407: LD_INT 33
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: IN
51414: NOT
51415: OR
51416: IFFALSE 51420
// exit ;
51418: GO 52555
// nat := GetNation ( tower ) ;
51420: LD_ADDR_VAR 0 12
51424: PUSH
51425: LD_VAR 0 1
51429: PPUSH
51430: CALL_OW 248
51434: ST_TO_ADDR
// side := GetSide ( tower ) ;
51435: LD_ADDR_VAR 0 16
51439: PUSH
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 255
51449: ST_TO_ADDR
// x := GetX ( tower ) ;
51450: LD_ADDR_VAR 0 10
51454: PUSH
51455: LD_VAR 0 1
51459: PPUSH
51460: CALL_OW 250
51464: ST_TO_ADDR
// y := GetY ( tower ) ;
51465: LD_ADDR_VAR 0 11
51469: PUSH
51470: LD_VAR 0 1
51474: PPUSH
51475: CALL_OW 251
51479: ST_TO_ADDR
// if not x or not y then
51480: LD_VAR 0 10
51484: NOT
51485: IFTRUE 51494
51487: PUSH
51488: LD_VAR 0 11
51492: NOT
51493: OR
51494: IFFALSE 51498
// exit ;
51496: GO 52555
// weapon := 0 ;
51498: LD_ADDR_VAR 0 18
51502: PUSH
51503: LD_INT 0
51505: ST_TO_ADDR
// fac_list := [ ] ;
51506: LD_ADDR_VAR 0 17
51510: PUSH
51511: EMPTY
51512: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51513: LD_ADDR_VAR 0 6
51517: PUSH
51518: LD_VAR 0 1
51522: PPUSH
51523: CALL_OW 274
51527: PPUSH
51528: LD_VAR 0 2
51532: PPUSH
51533: LD_INT 0
51535: PPUSH
51536: CALL 49090 0 3
51540: PPUSH
51541: LD_INT 30
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PPUSH
51551: CALL_OW 72
51555: ST_TO_ADDR
// if not factories then
51556: LD_VAR 0 6
51560: NOT
51561: IFFALSE 51565
// exit ;
51563: GO 52555
// for i in factories do
51565: LD_ADDR_VAR 0 8
51569: PUSH
51570: LD_VAR 0 6
51574: PUSH
51575: FOR_IN
51576: IFFALSE 51601
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51578: LD_ADDR_VAR 0 17
51582: PUSH
51583: LD_VAR 0 17
51587: PUSH
51588: LD_VAR 0 8
51592: PPUSH
51593: CALL_OW 478
51597: UNION
51598: ST_TO_ADDR
51599: GO 51575
51601: POP
51602: POP
// if not fac_list then
51603: LD_VAR 0 17
51607: NOT
51608: IFFALSE 51612
// exit ;
51610: GO 52555
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51612: LD_ADDR_VAR 0 5
51616: PUSH
51617: LD_INT 4
51619: PUSH
51620: LD_INT 5
51622: PUSH
51623: LD_INT 9
51625: PUSH
51626: LD_INT 10
51628: PUSH
51629: LD_INT 6
51631: PUSH
51632: LD_INT 7
51634: PUSH
51635: LD_INT 11
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 27
51649: PUSH
51650: LD_INT 28
51652: PUSH
51653: LD_INT 26
51655: PUSH
51656: LD_INT 30
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 43
51667: PUSH
51668: LD_INT 44
51670: PUSH
51671: LD_INT 46
51673: PUSH
51674: LD_INT 45
51676: PUSH
51677: LD_INT 47
51679: PUSH
51680: LD_INT 49
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: PUSH
51696: LD_VAR 0 12
51700: ARRAY
51701: ST_TO_ADDR
// list := list isect fac_list ;
51702: LD_ADDR_VAR 0 5
51706: PUSH
51707: LD_VAR 0 5
51711: PUSH
51712: LD_VAR 0 17
51716: ISECT
51717: ST_TO_ADDR
// if not list then
51718: LD_VAR 0 5
51722: NOT
51723: IFFALSE 51727
// exit ;
51725: GO 52555
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51727: LD_VAR 0 12
51731: PUSH
51732: LD_INT 3
51734: EQUAL
51735: IFFALSE 51747
51737: PUSH
51738: LD_INT 49
51740: PUSH
51741: LD_VAR 0 5
51745: IN
51746: AND
51747: IFFALSE 51767
51749: PUSH
51750: LD_INT 31
51752: PPUSH
51753: LD_VAR 0 16
51757: PPUSH
51758: CALL_OW 321
51762: PUSH
51763: LD_INT 2
51765: EQUAL
51766: AND
51767: IFFALSE 51827
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51769: LD_INT 22
51771: PUSH
51772: LD_VAR 0 16
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 35
51783: PUSH
51784: LD_INT 49
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 91
51793: PUSH
51794: LD_VAR 0 1
51798: PUSH
51799: LD_INT 10
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: LIST
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: LIST
51811: PPUSH
51812: CALL_OW 69
51816: NOT
51817: IFFALSE 51827
// weapon := ru_time_lapser ;
51819: LD_ADDR_VAR 0 18
51823: PUSH
51824: LD_INT 49
51826: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51827: LD_VAR 0 12
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: IN
51842: IFFALSE 51866
51844: PUSH
51845: LD_INT 11
51847: PUSH
51848: LD_VAR 0 5
51852: IN
51853: IFTRUE 51865
51855: PUSH
51856: LD_INT 30
51858: PUSH
51859: LD_VAR 0 5
51863: IN
51864: OR
51865: AND
51866: IFFALSE 51886
51868: PUSH
51869: LD_INT 6
51871: PPUSH
51872: LD_VAR 0 16
51876: PPUSH
51877: CALL_OW 321
51881: PUSH
51882: LD_INT 2
51884: EQUAL
51885: AND
51886: IFFALSE 52053
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51888: LD_INT 22
51890: PUSH
51891: LD_VAR 0 16
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 35
51905: PUSH
51906: LD_INT 11
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 35
51915: PUSH
51916: LD_INT 30
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 91
51930: PUSH
51931: LD_VAR 0 1
51935: PUSH
51936: LD_INT 18
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: PPUSH
51949: CALL_OW 69
51953: NOT
51954: IFFALSE 52030
51956: PUSH
51957: LD_INT 22
51959: PUSH
51960: LD_VAR 0 16
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: LD_INT 30
51974: PUSH
51975: LD_INT 32
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 30
51984: PUSH
51985: LD_INT 33
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 91
51999: PUSH
52000: LD_VAR 0 1
52004: PUSH
52005: LD_INT 12
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: PUSH
52018: EMPTY
52019: LIST
52020: PPUSH
52021: CALL_OW 69
52025: PUSH
52026: LD_INT 2
52028: GREATER
52029: AND
52030: IFFALSE 52053
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52032: LD_ADDR_VAR 0 18
52036: PUSH
52037: LD_INT 11
52039: PUSH
52040: LD_INT 30
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_VAR 0 12
52051: ARRAY
52052: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52053: LD_VAR 0 18
52057: NOT
52058: IFFALSE 52078
52060: PUSH
52061: LD_INT 40
52063: PPUSH
52064: LD_VAR 0 16
52068: PPUSH
52069: CALL_OW 321
52073: PUSH
52074: LD_INT 2
52076: EQUAL
52077: AND
52078: IFFALSE 52114
52080: PUSH
52081: LD_INT 7
52083: PUSH
52084: LD_VAR 0 5
52088: IN
52089: IFTRUE 52101
52091: PUSH
52092: LD_INT 28
52094: PUSH
52095: LD_VAR 0 5
52099: IN
52100: OR
52101: IFTRUE 52113
52103: PUSH
52104: LD_INT 45
52106: PUSH
52107: LD_VAR 0 5
52111: IN
52112: OR
52113: AND
52114: IFFALSE 52368
// begin hex := GetHexInfo ( x , y ) ;
52116: LD_ADDR_VAR 0 4
52120: PUSH
52121: LD_VAR 0 10
52125: PPUSH
52126: LD_VAR 0 11
52130: PPUSH
52131: CALL_OW 546
52135: ST_TO_ADDR
// if hex [ 1 ] then
52136: LD_VAR 0 4
52140: PUSH
52141: LD_INT 1
52143: ARRAY
52144: IFFALSE 52148
// exit ;
52146: GO 52555
// height := hex [ 2 ] ;
52148: LD_ADDR_VAR 0 15
52152: PUSH
52153: LD_VAR 0 4
52157: PUSH
52158: LD_INT 2
52160: ARRAY
52161: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52162: LD_ADDR_VAR 0 14
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: LD_INT 5
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: ST_TO_ADDR
// for i in tmp do
52185: LD_ADDR_VAR 0 8
52189: PUSH
52190: LD_VAR 0 14
52194: PUSH
52195: FOR_IN
52196: IFFALSE 52366
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52198: LD_ADDR_VAR 0 9
52202: PUSH
52203: LD_VAR 0 10
52207: PPUSH
52208: LD_VAR 0 8
52212: PPUSH
52213: LD_INT 5
52215: PPUSH
52216: CALL_OW 272
52220: PUSH
52221: LD_VAR 0 11
52225: PPUSH
52226: LD_VAR 0 8
52230: PPUSH
52231: LD_INT 5
52233: PPUSH
52234: CALL_OW 273
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52243: LD_VAR 0 9
52247: PUSH
52248: LD_INT 1
52250: ARRAY
52251: PPUSH
52252: LD_VAR 0 9
52256: PUSH
52257: LD_INT 2
52259: ARRAY
52260: PPUSH
52261: CALL_OW 488
52265: IFFALSE 52364
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52267: LD_ADDR_VAR 0 4
52271: PUSH
52272: LD_VAR 0 9
52276: PUSH
52277: LD_INT 1
52279: ARRAY
52280: PPUSH
52281: LD_VAR 0 9
52285: PUSH
52286: LD_INT 2
52288: ARRAY
52289: PPUSH
52290: CALL_OW 546
52294: ST_TO_ADDR
// if hex [ 1 ] then
52295: LD_VAR 0 4
52299: PUSH
52300: LD_INT 1
52302: ARRAY
52303: IFFALSE 52307
// continue ;
52305: GO 52195
// h := hex [ 2 ] ;
52307: LD_ADDR_VAR 0 13
52311: PUSH
52312: LD_VAR 0 4
52316: PUSH
52317: LD_INT 2
52319: ARRAY
52320: ST_TO_ADDR
// if h + 7 < height then
52321: LD_VAR 0 13
52325: PUSH
52326: LD_INT 7
52328: PLUS
52329: PUSH
52330: LD_VAR 0 15
52334: LESS
52335: IFFALSE 52364
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52337: LD_ADDR_VAR 0 18
52341: PUSH
52342: LD_INT 7
52344: PUSH
52345: LD_INT 28
52347: PUSH
52348: LD_INT 45
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: PUSH
52356: LD_VAR 0 12
52360: ARRAY
52361: ST_TO_ADDR
// break ;
52362: GO 52366
// end ; end ; end ;
52364: GO 52195
52366: POP
52367: POP
// end ; if not weapon then
52368: LD_VAR 0 18
52372: NOT
52373: IFFALSE 52433
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52375: LD_ADDR_VAR 0 5
52379: PUSH
52380: LD_VAR 0 5
52384: PUSH
52385: LD_INT 11
52387: PUSH
52388: LD_INT 30
52390: PUSH
52391: LD_INT 49
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: DIFF
52399: ST_TO_ADDR
// if not list then
52400: LD_VAR 0 5
52404: NOT
52405: IFFALSE 52409
// exit ;
52407: GO 52555
// weapon := list [ rand ( 1 , list ) ] ;
52409: LD_ADDR_VAR 0 18
52413: PUSH
52414: LD_VAR 0 5
52418: PUSH
52419: LD_INT 1
52421: PPUSH
52422: LD_VAR 0 5
52426: PPUSH
52427: CALL_OW 12
52431: ARRAY
52432: ST_TO_ADDR
// end ; if weapon then
52433: LD_VAR 0 18
52437: IFFALSE 52555
// begin tmp := CostOfWeapon ( weapon ) ;
52439: LD_ADDR_VAR 0 14
52443: PUSH
52444: LD_VAR 0 18
52448: PPUSH
52449: CALL_OW 451
52453: ST_TO_ADDR
// j := GetBase ( tower ) ;
52454: LD_ADDR_VAR 0 9
52458: PUSH
52459: LD_VAR 0 1
52463: PPUSH
52464: CALL_OW 274
52468: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52469: LD_VAR 0 9
52473: PPUSH
52474: LD_INT 1
52476: PPUSH
52477: CALL_OW 275
52481: PUSH
52482: LD_VAR 0 14
52486: PUSH
52487: LD_INT 1
52489: ARRAY
52490: GREATEREQUAL
52491: IFFALSE 52517
52493: PUSH
52494: LD_VAR 0 9
52498: PPUSH
52499: LD_INT 2
52501: PPUSH
52502: CALL_OW 275
52506: PUSH
52507: LD_VAR 0 14
52511: PUSH
52512: LD_INT 2
52514: ARRAY
52515: GREATEREQUAL
52516: AND
52517: IFFALSE 52543
52519: PUSH
52520: LD_VAR 0 9
52524: PPUSH
52525: LD_INT 3
52527: PPUSH
52528: CALL_OW 275
52532: PUSH
52533: LD_VAR 0 14
52537: PUSH
52538: LD_INT 3
52540: ARRAY
52541: GREATEREQUAL
52542: AND
52543: IFFALSE 52555
// result := weapon ;
52545: LD_ADDR_VAR 0 3
52549: PUSH
52550: LD_VAR 0 18
52554: ST_TO_ADDR
// end ; end ;
52555: LD_VAR 0 3
52559: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52560: LD_INT 0
52562: PPUSH
52563: PPUSH
// result := true ;
52564: LD_ADDR_VAR 0 3
52568: PUSH
52569: LD_INT 1
52571: ST_TO_ADDR
// if array1 = array2 then
52572: LD_VAR 0 1
52576: PUSH
52577: LD_VAR 0 2
52581: EQUAL
52582: IFFALSE 52642
// begin for i = 1 to array1 do
52584: LD_ADDR_VAR 0 4
52588: PUSH
52589: DOUBLE
52590: LD_INT 1
52592: DEC
52593: ST_TO_ADDR
52594: LD_VAR 0 1
52598: PUSH
52599: FOR_TO
52600: IFFALSE 52638
// if array1 [ i ] <> array2 [ i ] then
52602: LD_VAR 0 1
52606: PUSH
52607: LD_VAR 0 4
52611: ARRAY
52612: PUSH
52613: LD_VAR 0 2
52617: PUSH
52618: LD_VAR 0 4
52622: ARRAY
52623: NONEQUAL
52624: IFFALSE 52636
// begin result := false ;
52626: LD_ADDR_VAR 0 3
52630: PUSH
52631: LD_INT 0
52633: ST_TO_ADDR
// break ;
52634: GO 52638
// end ;
52636: GO 52599
52638: POP
52639: POP
// end else
52640: GO 52650
// result := false ;
52642: LD_ADDR_VAR 0 3
52646: PUSH
52647: LD_INT 0
52649: ST_TO_ADDR
// end ;
52650: LD_VAR 0 3
52654: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52655: LD_INT 0
52657: PPUSH
52658: PPUSH
// if not array1 or not array2 then
52659: LD_VAR 0 1
52663: NOT
52664: IFTRUE 52673
52666: PUSH
52667: LD_VAR 0 2
52671: NOT
52672: OR
52673: IFFALSE 52677
// exit ;
52675: GO 52741
// result := true ;
52677: LD_ADDR_VAR 0 3
52681: PUSH
52682: LD_INT 1
52684: ST_TO_ADDR
// for i = 1 to array1 do
52685: LD_ADDR_VAR 0 4
52689: PUSH
52690: DOUBLE
52691: LD_INT 1
52693: DEC
52694: ST_TO_ADDR
52695: LD_VAR 0 1
52699: PUSH
52700: FOR_TO
52701: IFFALSE 52739
// if array1 [ i ] <> array2 [ i ] then
52703: LD_VAR 0 1
52707: PUSH
52708: LD_VAR 0 4
52712: ARRAY
52713: PUSH
52714: LD_VAR 0 2
52718: PUSH
52719: LD_VAR 0 4
52723: ARRAY
52724: NONEQUAL
52725: IFFALSE 52737
// begin result := false ;
52727: LD_ADDR_VAR 0 3
52731: PUSH
52732: LD_INT 0
52734: ST_TO_ADDR
// break ;
52735: GO 52739
// end ;
52737: GO 52700
52739: POP
52740: POP
// end ;
52741: LD_VAR 0 3
52745: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52746: LD_INT 0
52748: PPUSH
52749: PPUSH
52750: PPUSH
// pom := GetBase ( fac ) ;
52751: LD_ADDR_VAR 0 5
52755: PUSH
52756: LD_VAR 0 1
52760: PPUSH
52761: CALL_OW 274
52765: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52766: LD_ADDR_VAR 0 4
52770: PUSH
52771: LD_VAR 0 2
52775: PUSH
52776: LD_INT 1
52778: ARRAY
52779: PPUSH
52780: LD_VAR 0 2
52784: PUSH
52785: LD_INT 2
52787: ARRAY
52788: PPUSH
52789: LD_VAR 0 2
52793: PUSH
52794: LD_INT 3
52796: ARRAY
52797: PPUSH
52798: LD_VAR 0 2
52802: PUSH
52803: LD_INT 4
52805: ARRAY
52806: PPUSH
52807: CALL_OW 449
52811: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52812: LD_ADDR_VAR 0 3
52816: PUSH
52817: LD_VAR 0 5
52821: PPUSH
52822: LD_INT 1
52824: PPUSH
52825: CALL_OW 275
52829: PUSH
52830: LD_VAR 0 4
52834: PUSH
52835: LD_INT 1
52837: ARRAY
52838: GREATEREQUAL
52839: IFFALSE 52865
52841: PUSH
52842: LD_VAR 0 5
52846: PPUSH
52847: LD_INT 2
52849: PPUSH
52850: CALL_OW 275
52854: PUSH
52855: LD_VAR 0 4
52859: PUSH
52860: LD_INT 2
52862: ARRAY
52863: GREATEREQUAL
52864: AND
52865: IFFALSE 52891
52867: PUSH
52868: LD_VAR 0 5
52872: PPUSH
52873: LD_INT 3
52875: PPUSH
52876: CALL_OW 275
52880: PUSH
52881: LD_VAR 0 4
52885: PUSH
52886: LD_INT 3
52888: ARRAY
52889: GREATEREQUAL
52890: AND
52891: ST_TO_ADDR
// end ;
52892: LD_VAR 0 3
52896: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52897: LD_INT 0
52899: PPUSH
52900: PPUSH
52901: PPUSH
52902: PPUSH
// pom := GetBase ( building ) ;
52903: LD_ADDR_VAR 0 3
52907: PUSH
52908: LD_VAR 0 1
52912: PPUSH
52913: CALL_OW 274
52917: ST_TO_ADDR
// if not pom then
52918: LD_VAR 0 3
52922: NOT
52923: IFFALSE 52927
// exit ;
52925: GO 53101
// btype := GetBType ( building ) ;
52927: LD_ADDR_VAR 0 5
52931: PUSH
52932: LD_VAR 0 1
52936: PPUSH
52937: CALL_OW 266
52941: ST_TO_ADDR
// if btype = b_armoury then
52942: LD_VAR 0 5
52946: PUSH
52947: LD_INT 4
52949: EQUAL
52950: IFFALSE 52960
// btype := b_barracks ;
52952: LD_ADDR_VAR 0 5
52956: PUSH
52957: LD_INT 5
52959: ST_TO_ADDR
// if btype = b_depot then
52960: LD_VAR 0 5
52964: PUSH
52965: LD_INT 0
52967: EQUAL
52968: IFFALSE 52978
// btype := b_warehouse ;
52970: LD_ADDR_VAR 0 5
52974: PUSH
52975: LD_INT 1
52977: ST_TO_ADDR
// if btype = b_workshop then
52978: LD_VAR 0 5
52982: PUSH
52983: LD_INT 2
52985: EQUAL
52986: IFFALSE 52996
// btype := b_factory ;
52988: LD_ADDR_VAR 0 5
52992: PUSH
52993: LD_INT 3
52995: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52996: LD_ADDR_VAR 0 4
53000: PUSH
53001: LD_VAR 0 5
53005: PPUSH
53006: LD_VAR 0 1
53010: PPUSH
53011: CALL_OW 248
53015: PPUSH
53016: CALL_OW 450
53020: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53021: LD_ADDR_VAR 0 2
53025: PUSH
53026: LD_VAR 0 3
53030: PPUSH
53031: LD_INT 1
53033: PPUSH
53034: CALL_OW 275
53038: PUSH
53039: LD_VAR 0 4
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: GREATEREQUAL
53048: IFFALSE 53074
53050: PUSH
53051: LD_VAR 0 3
53055: PPUSH
53056: LD_INT 2
53058: PPUSH
53059: CALL_OW 275
53063: PUSH
53064: LD_VAR 0 4
53068: PUSH
53069: LD_INT 2
53071: ARRAY
53072: GREATEREQUAL
53073: AND
53074: IFFALSE 53100
53076: PUSH
53077: LD_VAR 0 3
53081: PPUSH
53082: LD_INT 3
53084: PPUSH
53085: CALL_OW 275
53089: PUSH
53090: LD_VAR 0 4
53094: PUSH
53095: LD_INT 3
53097: ARRAY
53098: GREATEREQUAL
53099: AND
53100: ST_TO_ADDR
// end ;
53101: LD_VAR 0 2
53105: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53106: LD_INT 0
53108: PPUSH
53109: PPUSH
53110: PPUSH
// pom := GetBase ( building ) ;
53111: LD_ADDR_VAR 0 4
53115: PUSH
53116: LD_VAR 0 1
53120: PPUSH
53121: CALL_OW 274
53125: ST_TO_ADDR
// if not pom then
53126: LD_VAR 0 4
53130: NOT
53131: IFFALSE 53135
// exit ;
53133: GO 53240
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53135: LD_ADDR_VAR 0 5
53139: PUSH
53140: LD_VAR 0 2
53144: PPUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 248
53154: PPUSH
53155: CALL_OW 450
53159: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53160: LD_ADDR_VAR 0 3
53164: PUSH
53165: LD_VAR 0 4
53169: PPUSH
53170: LD_INT 1
53172: PPUSH
53173: CALL_OW 275
53177: PUSH
53178: LD_VAR 0 5
53182: PUSH
53183: LD_INT 1
53185: ARRAY
53186: GREATEREQUAL
53187: IFFALSE 53213
53189: PUSH
53190: LD_VAR 0 4
53194: PPUSH
53195: LD_INT 2
53197: PPUSH
53198: CALL_OW 275
53202: PUSH
53203: LD_VAR 0 5
53207: PUSH
53208: LD_INT 2
53210: ARRAY
53211: GREATEREQUAL
53212: AND
53213: IFFALSE 53239
53215: PUSH
53216: LD_VAR 0 4
53220: PPUSH
53221: LD_INT 3
53223: PPUSH
53224: CALL_OW 275
53228: PUSH
53229: LD_VAR 0 5
53233: PUSH
53234: LD_INT 3
53236: ARRAY
53237: GREATEREQUAL
53238: AND
53239: ST_TO_ADDR
// end ;
53240: LD_VAR 0 3
53244: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53245: LD_INT 0
53247: PPUSH
53248: PPUSH
53249: PPUSH
53250: PPUSH
53251: PPUSH
53252: PPUSH
53253: PPUSH
53254: PPUSH
53255: PPUSH
53256: PPUSH
53257: PPUSH
// result := false ;
53258: LD_ADDR_VAR 0 8
53262: PUSH
53263: LD_INT 0
53265: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53266: LD_VAR 0 5
53270: NOT
53271: IFTRUE 53280
53273: PUSH
53274: LD_VAR 0 1
53278: NOT
53279: OR
53280: IFTRUE 53289
53282: PUSH
53283: LD_VAR 0 2
53287: NOT
53288: OR
53289: IFTRUE 53298
53291: PUSH
53292: LD_VAR 0 3
53296: NOT
53297: OR
53298: IFFALSE 53302
// exit ;
53300: GO 54128
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53302: LD_ADDR_VAR 0 14
53306: PUSH
53307: LD_VAR 0 1
53311: PPUSH
53312: LD_VAR 0 2
53316: PPUSH
53317: LD_VAR 0 3
53321: PPUSH
53322: LD_VAR 0 4
53326: PPUSH
53327: LD_VAR 0 5
53331: PUSH
53332: LD_INT 1
53334: ARRAY
53335: PPUSH
53336: CALL_OW 248
53340: PPUSH
53341: LD_INT 0
53343: PPUSH
53344: CALL 55409 0 6
53348: ST_TO_ADDR
// if not hexes then
53349: LD_VAR 0 14
53353: NOT
53354: IFFALSE 53358
// exit ;
53356: GO 54128
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53358: LD_ADDR_VAR 0 17
53362: PUSH
53363: LD_VAR 0 5
53367: PPUSH
53368: LD_INT 22
53370: PUSH
53371: LD_VAR 0 13
53375: PPUSH
53376: CALL_OW 255
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 30
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 30
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PPUSH
53417: CALL_OW 72
53421: ST_TO_ADDR
// for i = 1 to hexes do
53422: LD_ADDR_VAR 0 9
53426: PUSH
53427: DOUBLE
53428: LD_INT 1
53430: DEC
53431: ST_TO_ADDR
53432: LD_VAR 0 14
53436: PUSH
53437: FOR_TO
53438: IFFALSE 54126
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53440: LD_ADDR_VAR 0 13
53444: PUSH
53445: LD_VAR 0 14
53449: PUSH
53450: LD_VAR 0 9
53454: ARRAY
53455: PUSH
53456: LD_INT 1
53458: ARRAY
53459: PPUSH
53460: LD_VAR 0 14
53464: PUSH
53465: LD_VAR 0 9
53469: ARRAY
53470: PUSH
53471: LD_INT 2
53473: ARRAY
53474: PPUSH
53475: CALL_OW 428
53479: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53480: LD_VAR 0 14
53484: PUSH
53485: LD_VAR 0 9
53489: ARRAY
53490: PUSH
53491: LD_INT 1
53493: ARRAY
53494: PPUSH
53495: LD_VAR 0 14
53499: PUSH
53500: LD_VAR 0 9
53504: ARRAY
53505: PUSH
53506: LD_INT 2
53508: ARRAY
53509: PPUSH
53510: CALL_OW 351
53514: IFTRUE 53553
53516: PUSH
53517: LD_VAR 0 14
53521: PUSH
53522: LD_VAR 0 9
53526: ARRAY
53527: PUSH
53528: LD_INT 1
53530: ARRAY
53531: PPUSH
53532: LD_VAR 0 14
53536: PUSH
53537: LD_VAR 0 9
53541: ARRAY
53542: PUSH
53543: LD_INT 2
53545: ARRAY
53546: PPUSH
53547: CALL_OW 488
53551: NOT
53552: OR
53553: IFTRUE 53570
53555: PUSH
53556: LD_VAR 0 13
53560: PPUSH
53561: CALL_OW 247
53565: PUSH
53566: LD_INT 3
53568: EQUAL
53569: OR
53570: IFFALSE 53576
// exit ;
53572: POP
53573: POP
53574: GO 54128
// if not tmp then
53576: LD_VAR 0 13
53580: NOT
53581: IFFALSE 53585
// continue ;
53583: GO 53437
// result := true ;
53585: LD_ADDR_VAR 0 8
53589: PUSH
53590: LD_INT 1
53592: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53593: LD_VAR 0 6
53597: IFFALSE 53614
53599: PUSH
53600: LD_VAR 0 13
53604: PPUSH
53605: CALL_OW 247
53609: PUSH
53610: LD_INT 2
53612: EQUAL
53613: AND
53614: IFFALSE 53631
53616: PUSH
53617: LD_VAR 0 13
53621: PPUSH
53622: CALL_OW 263
53626: PUSH
53627: LD_INT 1
53629: EQUAL
53630: AND
53631: IFFALSE 53795
// begin if IsDrivenBy ( tmp ) then
53633: LD_VAR 0 13
53637: PPUSH
53638: CALL_OW 311
53642: IFFALSE 53646
// continue ;
53644: GO 53437
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53646: LD_VAR 0 6
53650: PPUSH
53651: LD_INT 3
53653: PUSH
53654: LD_INT 60
53656: PUSH
53657: EMPTY
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: LD_INT 55
53669: PUSH
53670: EMPTY
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PPUSH
53681: CALL_OW 72
53685: IFFALSE 53793
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53687: LD_ADDR_VAR 0 18
53691: PUSH
53692: LD_VAR 0 6
53696: PPUSH
53697: LD_INT 3
53699: PUSH
53700: LD_INT 60
53702: PUSH
53703: EMPTY
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: LD_INT 55
53715: PUSH
53716: EMPTY
53717: LIST
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PPUSH
53727: CALL_OW 72
53731: PUSH
53732: LD_INT 1
53734: ARRAY
53735: ST_TO_ADDR
// if IsInUnit ( driver ) then
53736: LD_VAR 0 18
53740: PPUSH
53741: CALL_OW 310
53745: IFFALSE 53756
// ComExit ( driver ) ;
53747: LD_VAR 0 18
53751: PPUSH
53752: CALL 79409 0 1
// AddComEnterUnit ( driver , tmp ) ;
53756: LD_VAR 0 18
53760: PPUSH
53761: LD_VAR 0 13
53765: PPUSH
53766: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53770: LD_VAR 0 18
53774: PPUSH
53775: LD_VAR 0 7
53779: PPUSH
53780: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53784: LD_VAR 0 18
53788: PPUSH
53789: CALL_OW 181
// end ; continue ;
53793: GO 53437
// end ; if not cleaners or not tmp in cleaners then
53795: LD_VAR 0 6
53799: NOT
53800: IFTRUE 53815
53802: PUSH
53803: LD_VAR 0 13
53807: PUSH
53808: LD_VAR 0 6
53812: IN
53813: NOT
53814: OR
53815: IFFALSE 54124
// begin if dep then
53817: LD_VAR 0 17
53821: IFFALSE 53957
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53823: LD_ADDR_VAR 0 16
53827: PUSH
53828: LD_VAR 0 17
53832: PUSH
53833: LD_INT 1
53835: ARRAY
53836: PPUSH
53837: CALL_OW 250
53841: PPUSH
53842: LD_VAR 0 17
53846: PUSH
53847: LD_INT 1
53849: ARRAY
53850: PPUSH
53851: CALL_OW 254
53855: PPUSH
53856: LD_INT 5
53858: PPUSH
53859: CALL_OW 272
53863: PUSH
53864: LD_VAR 0 17
53868: PUSH
53869: LD_INT 1
53871: ARRAY
53872: PPUSH
53873: CALL_OW 251
53877: PPUSH
53878: LD_VAR 0 17
53882: PUSH
53883: LD_INT 1
53885: ARRAY
53886: PPUSH
53887: CALL_OW 254
53891: PPUSH
53892: LD_INT 5
53894: PPUSH
53895: CALL_OW 273
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53904: LD_VAR 0 16
53908: PUSH
53909: LD_INT 1
53911: ARRAY
53912: PPUSH
53913: LD_VAR 0 16
53917: PUSH
53918: LD_INT 2
53920: ARRAY
53921: PPUSH
53922: CALL_OW 488
53926: IFFALSE 53957
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53928: LD_VAR 0 13
53932: PPUSH
53933: LD_VAR 0 16
53937: PUSH
53938: LD_INT 1
53940: ARRAY
53941: PPUSH
53942: LD_VAR 0 16
53946: PUSH
53947: LD_INT 2
53949: ARRAY
53950: PPUSH
53951: CALL_OW 111
// continue ;
53955: GO 53437
// end ; end ; r := GetDir ( tmp ) ;
53957: LD_ADDR_VAR 0 15
53961: PUSH
53962: LD_VAR 0 13
53966: PPUSH
53967: CALL_OW 254
53971: ST_TO_ADDR
// if r = 5 then
53972: LD_VAR 0 15
53976: PUSH
53977: LD_INT 5
53979: EQUAL
53980: IFFALSE 53990
// r := 0 ;
53982: LD_ADDR_VAR 0 15
53986: PUSH
53987: LD_INT 0
53989: ST_TO_ADDR
// for j = r to 5 do
53990: LD_ADDR_VAR 0 10
53994: PUSH
53995: DOUBLE
53996: LD_VAR 0 15
54000: DEC
54001: ST_TO_ADDR
54002: LD_INT 5
54004: PUSH
54005: FOR_TO
54006: IFFALSE 54122
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54008: LD_ADDR_VAR 0 11
54012: PUSH
54013: LD_VAR 0 13
54017: PPUSH
54018: CALL_OW 250
54022: PPUSH
54023: LD_VAR 0 10
54027: PPUSH
54028: LD_INT 2
54030: PPUSH
54031: CALL_OW 272
54035: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54036: LD_ADDR_VAR 0 12
54040: PUSH
54041: LD_VAR 0 13
54045: PPUSH
54046: CALL_OW 251
54050: PPUSH
54051: LD_VAR 0 10
54055: PPUSH
54056: LD_INT 2
54058: PPUSH
54059: CALL_OW 273
54063: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54064: LD_VAR 0 11
54068: PPUSH
54069: LD_VAR 0 12
54073: PPUSH
54074: CALL_OW 488
54078: IFFALSE 54097
54080: PUSH
54081: LD_VAR 0 11
54085: PPUSH
54086: LD_VAR 0 12
54090: PPUSH
54091: CALL_OW 428
54095: NOT
54096: AND
54097: IFFALSE 54120
// begin ComMoveXY ( tmp , _x , _y ) ;
54099: LD_VAR 0 13
54103: PPUSH
54104: LD_VAR 0 11
54108: PPUSH
54109: LD_VAR 0 12
54113: PPUSH
54114: CALL_OW 111
// break ;
54118: GO 54122
// end ; end ;
54120: GO 54005
54122: POP
54123: POP
// end ; end ;
54124: GO 53437
54126: POP
54127: POP
// end ;
54128: LD_VAR 0 8
54132: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54133: LD_INT 0
54135: PPUSH
// result := true ;
54136: LD_ADDR_VAR 0 3
54140: PUSH
54141: LD_INT 1
54143: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54144: LD_VAR 0 2
54148: PUSH
54149: LD_INT 24
54151: DOUBLE
54152: EQUAL
54153: IFTRUE 54163
54155: LD_INT 33
54157: DOUBLE
54158: EQUAL
54159: IFTRUE 54163
54161: GO 54188
54163: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54164: LD_ADDR_VAR 0 3
54168: PUSH
54169: LD_INT 32
54171: PPUSH
54172: LD_VAR 0 1
54176: PPUSH
54177: CALL_OW 321
54181: PUSH
54182: LD_INT 2
54184: EQUAL
54185: ST_TO_ADDR
54186: GO 54504
54188: LD_INT 20
54190: DOUBLE
54191: EQUAL
54192: IFTRUE 54196
54194: GO 54221
54196: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54197: LD_ADDR_VAR 0 3
54201: PUSH
54202: LD_INT 6
54204: PPUSH
54205: LD_VAR 0 1
54209: PPUSH
54210: CALL_OW 321
54214: PUSH
54215: LD_INT 2
54217: EQUAL
54218: ST_TO_ADDR
54219: GO 54504
54221: LD_INT 22
54223: DOUBLE
54224: EQUAL
54225: IFTRUE 54235
54227: LD_INT 36
54229: DOUBLE
54230: EQUAL
54231: IFTRUE 54235
54233: GO 54260
54235: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54236: LD_ADDR_VAR 0 3
54240: PUSH
54241: LD_INT 15
54243: PPUSH
54244: LD_VAR 0 1
54248: PPUSH
54249: CALL_OW 321
54253: PUSH
54254: LD_INT 2
54256: EQUAL
54257: ST_TO_ADDR
54258: GO 54504
54260: LD_INT 30
54262: DOUBLE
54263: EQUAL
54264: IFTRUE 54268
54266: GO 54293
54268: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54269: LD_ADDR_VAR 0 3
54273: PUSH
54274: LD_INT 20
54276: PPUSH
54277: LD_VAR 0 1
54281: PPUSH
54282: CALL_OW 321
54286: PUSH
54287: LD_INT 2
54289: EQUAL
54290: ST_TO_ADDR
54291: GO 54504
54293: LD_INT 28
54295: DOUBLE
54296: EQUAL
54297: IFTRUE 54307
54299: LD_INT 21
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54307
54305: GO 54332
54307: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54308: LD_ADDR_VAR 0 3
54312: PUSH
54313: LD_INT 21
54315: PPUSH
54316: LD_VAR 0 1
54320: PPUSH
54321: CALL_OW 321
54325: PUSH
54326: LD_INT 2
54328: EQUAL
54329: ST_TO_ADDR
54330: GO 54504
54332: LD_INT 16
54334: DOUBLE
54335: EQUAL
54336: IFTRUE 54340
54338: GO 54365
54340: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54341: LD_ADDR_VAR 0 3
54345: PUSH
54346: LD_INT 84
54348: PPUSH
54349: LD_VAR 0 1
54353: PPUSH
54354: CALL_OW 321
54358: PUSH
54359: LD_INT 2
54361: EQUAL
54362: ST_TO_ADDR
54363: GO 54504
54365: LD_INT 19
54367: DOUBLE
54368: EQUAL
54369: IFTRUE 54379
54371: LD_INT 23
54373: DOUBLE
54374: EQUAL
54375: IFTRUE 54379
54377: GO 54404
54379: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54380: LD_ADDR_VAR 0 3
54384: PUSH
54385: LD_INT 83
54387: PPUSH
54388: LD_VAR 0 1
54392: PPUSH
54393: CALL_OW 321
54397: PUSH
54398: LD_INT 2
54400: EQUAL
54401: ST_TO_ADDR
54402: GO 54504
54404: LD_INT 17
54406: DOUBLE
54407: EQUAL
54408: IFTRUE 54412
54410: GO 54437
54412: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54413: LD_ADDR_VAR 0 3
54417: PUSH
54418: LD_INT 39
54420: PPUSH
54421: LD_VAR 0 1
54425: PPUSH
54426: CALL_OW 321
54430: PUSH
54431: LD_INT 2
54433: EQUAL
54434: ST_TO_ADDR
54435: GO 54504
54437: LD_INT 18
54439: DOUBLE
54440: EQUAL
54441: IFTRUE 54445
54443: GO 54470
54445: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54446: LD_ADDR_VAR 0 3
54450: PUSH
54451: LD_INT 40
54453: PPUSH
54454: LD_VAR 0 1
54458: PPUSH
54459: CALL_OW 321
54463: PUSH
54464: LD_INT 2
54466: EQUAL
54467: ST_TO_ADDR
54468: GO 54504
54470: LD_INT 27
54472: DOUBLE
54473: EQUAL
54474: IFTRUE 54478
54476: GO 54503
54478: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54479: LD_ADDR_VAR 0 3
54483: PUSH
54484: LD_INT 35
54486: PPUSH
54487: LD_VAR 0 1
54491: PPUSH
54492: CALL_OW 321
54496: PUSH
54497: LD_INT 2
54499: EQUAL
54500: ST_TO_ADDR
54501: GO 54504
54503: POP
// end ;
54504: LD_VAR 0 3
54508: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54509: LD_INT 0
54511: PPUSH
54512: PPUSH
54513: PPUSH
54514: PPUSH
54515: PPUSH
54516: PPUSH
54517: PPUSH
54518: PPUSH
54519: PPUSH
54520: PPUSH
54521: PPUSH
// result := false ;
54522: LD_ADDR_VAR 0 6
54526: PUSH
54527: LD_INT 0
54529: ST_TO_ADDR
// if btype = b_depot then
54530: LD_VAR 0 2
54534: PUSH
54535: LD_INT 0
54537: EQUAL
54538: IFFALSE 54550
// begin result := true ;
54540: LD_ADDR_VAR 0 6
54544: PUSH
54545: LD_INT 1
54547: ST_TO_ADDR
// exit ;
54548: GO 55404
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54550: LD_VAR 0 1
54554: NOT
54555: IFTRUE 54580
54557: PUSH
54558: LD_VAR 0 1
54562: PPUSH
54563: CALL_OW 266
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: IN
54578: NOT
54579: OR
54580: IFTRUE 54589
54582: PUSH
54583: LD_VAR 0 2
54587: NOT
54588: OR
54589: IFTRUE 54625
54591: PUSH
54592: LD_VAR 0 5
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 3
54608: PUSH
54609: LD_INT 4
54611: PUSH
54612: LD_INT 5
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: IN
54623: NOT
54624: OR
54625: IFTRUE 54644
54627: PUSH
54628: LD_VAR 0 3
54632: PPUSH
54633: LD_VAR 0 4
54637: PPUSH
54638: CALL_OW 488
54642: NOT
54643: OR
54644: IFFALSE 54648
// exit ;
54646: GO 55404
// side := GetSide ( depot ) ;
54648: LD_ADDR_VAR 0 9
54652: PUSH
54653: LD_VAR 0 1
54657: PPUSH
54658: CALL_OW 255
54662: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54663: LD_VAR 0 9
54667: PPUSH
54668: LD_VAR 0 2
54672: PPUSH
54673: CALL 54133 0 2
54677: NOT
54678: IFFALSE 54682
// exit ;
54680: GO 55404
// pom := GetBase ( depot ) ;
54682: LD_ADDR_VAR 0 10
54686: PUSH
54687: LD_VAR 0 1
54691: PPUSH
54692: CALL_OW 274
54696: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54697: LD_ADDR_VAR 0 11
54701: PUSH
54702: LD_VAR 0 2
54706: PPUSH
54707: LD_VAR 0 1
54711: PPUSH
54712: CALL_OW 248
54716: PPUSH
54717: CALL_OW 450
54721: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54722: LD_VAR 0 10
54726: PPUSH
54727: LD_INT 1
54729: PPUSH
54730: CALL_OW 275
54734: PUSH
54735: LD_VAR 0 11
54739: PUSH
54740: LD_INT 1
54742: ARRAY
54743: GREATEREQUAL
54744: IFFALSE 54770
54746: PUSH
54747: LD_VAR 0 10
54751: PPUSH
54752: LD_INT 2
54754: PPUSH
54755: CALL_OW 275
54759: PUSH
54760: LD_VAR 0 11
54764: PUSH
54765: LD_INT 2
54767: ARRAY
54768: GREATEREQUAL
54769: AND
54770: IFFALSE 54796
54772: PUSH
54773: LD_VAR 0 10
54777: PPUSH
54778: LD_INT 3
54780: PPUSH
54781: CALL_OW 275
54785: PUSH
54786: LD_VAR 0 11
54790: PUSH
54791: LD_INT 3
54793: ARRAY
54794: GREATEREQUAL
54795: AND
54796: NOT
54797: IFFALSE 54801
// exit ;
54799: GO 55404
// if GetBType ( depot ) = b_depot then
54801: LD_VAR 0 1
54805: PPUSH
54806: CALL_OW 266
54810: PUSH
54811: LD_INT 0
54813: EQUAL
54814: IFFALSE 54826
// dist := 28 else
54816: LD_ADDR_VAR 0 14
54820: PUSH
54821: LD_INT 28
54823: ST_TO_ADDR
54824: GO 54834
// dist := 36 ;
54826: LD_ADDR_VAR 0 14
54830: PUSH
54831: LD_INT 36
54833: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54834: LD_VAR 0 1
54838: PPUSH
54839: LD_VAR 0 3
54843: PPUSH
54844: LD_VAR 0 4
54848: PPUSH
54849: CALL_OW 297
54853: PUSH
54854: LD_VAR 0 14
54858: GREATER
54859: IFFALSE 54863
// exit ;
54861: GO 55404
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54863: LD_ADDR_VAR 0 12
54867: PUSH
54868: LD_VAR 0 2
54872: PPUSH
54873: LD_VAR 0 3
54877: PPUSH
54878: LD_VAR 0 4
54882: PPUSH
54883: LD_VAR 0 5
54887: PPUSH
54888: LD_VAR 0 1
54892: PPUSH
54893: CALL_OW 248
54897: PPUSH
54898: LD_INT 0
54900: PPUSH
54901: CALL 55409 0 6
54905: ST_TO_ADDR
// if not hexes then
54906: LD_VAR 0 12
54910: NOT
54911: IFFALSE 54915
// exit ;
54913: GO 55404
// hex := GetHexInfo ( x , y ) ;
54915: LD_ADDR_VAR 0 15
54919: PUSH
54920: LD_VAR 0 3
54924: PPUSH
54925: LD_VAR 0 4
54929: PPUSH
54930: CALL_OW 546
54934: ST_TO_ADDR
// if hex [ 1 ] then
54935: LD_VAR 0 15
54939: PUSH
54940: LD_INT 1
54942: ARRAY
54943: IFFALSE 54947
// exit ;
54945: GO 55404
// height := hex [ 2 ] ;
54947: LD_ADDR_VAR 0 13
54951: PUSH
54952: LD_VAR 0 15
54956: PUSH
54957: LD_INT 2
54959: ARRAY
54960: ST_TO_ADDR
// for i = 1 to hexes do
54961: LD_ADDR_VAR 0 7
54965: PUSH
54966: DOUBLE
54967: LD_INT 1
54969: DEC
54970: ST_TO_ADDR
54971: LD_VAR 0 12
54975: PUSH
54976: FOR_TO
54977: IFFALSE 55321
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54979: LD_VAR 0 12
54983: PUSH
54984: LD_VAR 0 7
54988: ARRAY
54989: PUSH
54990: LD_INT 1
54992: ARRAY
54993: PPUSH
54994: LD_VAR 0 12
54998: PUSH
54999: LD_VAR 0 7
55003: ARRAY
55004: PUSH
55005: LD_INT 2
55007: ARRAY
55008: PPUSH
55009: CALL_OW 488
55013: NOT
55014: IFTRUE 55056
55016: PUSH
55017: LD_VAR 0 12
55021: PUSH
55022: LD_VAR 0 7
55026: ARRAY
55027: PUSH
55028: LD_INT 1
55030: ARRAY
55031: PPUSH
55032: LD_VAR 0 12
55036: PUSH
55037: LD_VAR 0 7
55041: ARRAY
55042: PUSH
55043: LD_INT 2
55045: ARRAY
55046: PPUSH
55047: CALL_OW 428
55051: PUSH
55052: LD_INT 0
55054: GREATER
55055: OR
55056: IFTRUE 55094
55058: PUSH
55059: LD_VAR 0 12
55063: PUSH
55064: LD_VAR 0 7
55068: ARRAY
55069: PUSH
55070: LD_INT 1
55072: ARRAY
55073: PPUSH
55074: LD_VAR 0 12
55078: PUSH
55079: LD_VAR 0 7
55083: ARRAY
55084: PUSH
55085: LD_INT 2
55087: ARRAY
55088: PPUSH
55089: CALL_OW 351
55093: OR
55094: IFFALSE 55100
// exit ;
55096: POP
55097: POP
55098: GO 55404
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55100: LD_ADDR_VAR 0 8
55104: PUSH
55105: LD_VAR 0 12
55109: PUSH
55110: LD_VAR 0 7
55114: ARRAY
55115: PUSH
55116: LD_INT 1
55118: ARRAY
55119: PPUSH
55120: LD_VAR 0 12
55124: PUSH
55125: LD_VAR 0 7
55129: ARRAY
55130: PUSH
55131: LD_INT 2
55133: ARRAY
55134: PPUSH
55135: CALL_OW 546
55139: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55140: LD_VAR 0 8
55144: PUSH
55145: LD_INT 1
55147: ARRAY
55148: IFTRUE 55170
55150: PUSH
55151: LD_VAR 0 8
55155: PUSH
55156: LD_INT 2
55158: ARRAY
55159: PUSH
55160: LD_VAR 0 13
55164: PUSH
55165: LD_INT 2
55167: PLUS
55168: GREATER
55169: OR
55170: IFTRUE 55192
55172: PUSH
55173: LD_VAR 0 8
55177: PUSH
55178: LD_INT 2
55180: ARRAY
55181: PUSH
55182: LD_VAR 0 13
55186: PUSH
55187: LD_INT 2
55189: MINUS
55190: LESS
55191: OR
55192: IFTRUE 55260
55194: PUSH
55195: LD_VAR 0 8
55199: PUSH
55200: LD_INT 3
55202: ARRAY
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 8
55209: PUSH
55210: LD_INT 9
55212: PUSH
55213: LD_INT 10
55215: PUSH
55216: LD_INT 11
55218: PUSH
55219: LD_INT 12
55221: PUSH
55222: LD_INT 13
55224: PUSH
55225: LD_INT 16
55227: PUSH
55228: LD_INT 17
55230: PUSH
55231: LD_INT 18
55233: PUSH
55234: LD_INT 19
55236: PUSH
55237: LD_INT 20
55239: PUSH
55240: LD_INT 21
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: IN
55258: NOT
55259: OR
55260: IFTRUE 55273
55262: PUSH
55263: LD_VAR 0 8
55267: PUSH
55268: LD_INT 5
55270: ARRAY
55271: NOT
55272: OR
55273: IFTRUE 55313
55275: PUSH
55276: LD_VAR 0 8
55280: PUSH
55281: LD_INT 6
55283: ARRAY
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: LD_INT 7
55293: PUSH
55294: LD_INT 9
55296: PUSH
55297: LD_INT 10
55299: PUSH
55300: LD_INT 11
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: IN
55311: NOT
55312: OR
55313: IFFALSE 55319
// exit ;
55315: POP
55316: POP
55317: GO 55404
// end ;
55319: GO 54976
55321: POP
55322: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55323: LD_VAR 0 9
55327: PPUSH
55328: LD_VAR 0 3
55332: PPUSH
55333: LD_VAR 0 4
55337: PPUSH
55338: LD_INT 20
55340: PPUSH
55341: CALL 47223 0 4
55345: PUSH
55346: LD_INT 4
55348: ARRAY
55349: IFFALSE 55353
// exit ;
55351: GO 55404
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55353: LD_VAR 0 2
55357: PUSH
55358: LD_INT 29
55360: PUSH
55361: LD_INT 30
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: IN
55368: IFFALSE 55392
55370: PUSH
55371: LD_VAR 0 3
55375: PPUSH
55376: LD_VAR 0 4
55380: PPUSH
55381: LD_VAR 0 9
55385: PPUSH
55386: CALL_OW 440
55390: NOT
55391: AND
55392: IFFALSE 55396
// exit ;
55394: GO 55404
// result := true ;
55396: LD_ADDR_VAR 0 6
55400: PUSH
55401: LD_INT 1
55403: ST_TO_ADDR
// end ;
55404: LD_VAR 0 6
55408: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55409: LD_INT 0
55411: PPUSH
55412: PPUSH
55413: PPUSH
55414: PPUSH
55415: PPUSH
55416: PPUSH
55417: PPUSH
55418: PPUSH
55419: PPUSH
55420: PPUSH
55421: PPUSH
55422: PPUSH
55423: PPUSH
55424: PPUSH
55425: PPUSH
55426: PPUSH
55427: PPUSH
55428: PPUSH
55429: PPUSH
55430: PPUSH
55431: PPUSH
55432: PPUSH
55433: PPUSH
55434: PPUSH
55435: PPUSH
55436: PPUSH
55437: PPUSH
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
55443: PPUSH
55444: PPUSH
55445: PPUSH
55446: PPUSH
55447: PPUSH
55448: PPUSH
55449: PPUSH
55450: PPUSH
55451: PPUSH
55452: PPUSH
55453: PPUSH
55454: PPUSH
55455: PPUSH
55456: PPUSH
55457: PPUSH
55458: PPUSH
55459: PPUSH
55460: PPUSH
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
55465: PPUSH
55466: PPUSH
55467: PPUSH
55468: PPUSH
// result = [ ] ;
55469: LD_ADDR_VAR 0 7
55473: PUSH
55474: EMPTY
55475: ST_TO_ADDR
// temp_list = [ ] ;
55476: LD_ADDR_VAR 0 9
55480: PUSH
55481: EMPTY
55482: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55483: LD_VAR 0 4
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 3
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: LD_INT 5
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: IN
55514: NOT
55515: IFTRUE 55558
55517: PUSH
55518: LD_VAR 0 1
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: IN
55533: IFFALSE 55557
55535: PUSH
55536: LD_VAR 0 5
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: LD_INT 3
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: IN
55555: NOT
55556: AND
55557: OR
55558: IFFALSE 55562
// exit ;
55560: GO 73961
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55562: LD_VAR 0 1
55566: PUSH
55567: LD_INT 6
55569: PUSH
55570: LD_INT 7
55572: PUSH
55573: LD_INT 8
55575: PUSH
55576: LD_INT 13
55578: PUSH
55579: LD_INT 12
55581: PUSH
55582: LD_INT 15
55584: PUSH
55585: LD_INT 11
55587: PUSH
55588: LD_INT 14
55590: PUSH
55591: LD_INT 10
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: IN
55605: IFFALSE 55615
// btype = b_lab ;
55607: LD_ADDR_VAR 0 1
55611: PUSH
55612: LD_INT 6
55614: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55615: LD_VAR 0 6
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: IN
55634: NOT
55635: IFTRUE 55703
55637: PUSH
55638: LD_VAR 0 1
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: LD_INT 6
55657: PUSH
55658: LD_INT 36
55660: PUSH
55661: LD_INT 4
55663: PUSH
55664: LD_INT 5
55666: PUSH
55667: LD_INT 31
55669: PUSH
55670: LD_INT 32
55672: PUSH
55673: LD_INT 33
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: IN
55689: NOT
55690: IFFALSE 55702
55692: PUSH
55693: LD_VAR 0 6
55697: PUSH
55698: LD_INT 1
55700: EQUAL
55701: AND
55702: OR
55703: IFTRUE 55735
55705: PUSH
55706: LD_VAR 0 1
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: IN
55721: NOT
55722: IFFALSE 55734
55724: PUSH
55725: LD_VAR 0 6
55729: PUSH
55730: LD_INT 2
55732: EQUAL
55733: AND
55734: OR
55735: IFFALSE 55745
// mode = 0 ;
55737: LD_ADDR_VAR 0 6
55741: PUSH
55742: LD_INT 0
55744: ST_TO_ADDR
// case mode of 0 :
55745: LD_VAR 0 6
55749: PUSH
55750: LD_INT 0
55752: DOUBLE
55753: EQUAL
55754: IFTRUE 55758
55756: GO 67211
55758: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55759: LD_ADDR_VAR 0 11
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 2
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55952: LD_ADDR_VAR 0 12
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 2
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 3
56109: NEG
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 3
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56148: LD_ADDR_VAR 0 13
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: NEG
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: LD_INT 3
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56347: LD_ADDR_VAR 0 14
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56543: LD_ADDR_VAR 0 15
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56736: LD_ADDR_VAR 0 16
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 0
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56929: LD_ADDR_VAR 0 17
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57159: LD_ADDR_VAR 0 18
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57389: LD_ADDR_VAR 0 19
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: LD_INT 2
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: NEG
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57619: LD_ADDR_VAR 0 20
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57849: LD_ADDR_VAR 0 21
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 1
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58079: LD_ADDR_VAR 0 22
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 0
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 2
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: LD_INT 2
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58309: LD_ADDR_VAR 0 23
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: LD_INT 2
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58589: LD_ADDR_VAR 0 24
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 3
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58865: LD_ADDR_VAR 0 25
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: NEG
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59139: LD_ADDR_VAR 0 26
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 2
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 2
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: NEG
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 3
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59415: LD_ADDR_VAR 0 27
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 3
59660: NEG
59661: PUSH
59662: LD_INT 2
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59695: LD_ADDR_VAR 0 28
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 2
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: NEG
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 3
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 3
59942: NEG
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59977: LD_ADDR_VAR 0 29
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 3
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: NEG
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60256: LD_ADDR_VAR 0 30
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: LD_INT 3
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60534: LD_ADDR_VAR 0 31
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 2
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 2
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 2
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 2
60699: NEG
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 2
60711: NEG
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: LD_INT 3
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 3
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60812: LD_ADDR_VAR 0 32
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: LD_INT 3
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61090: LD_ADDR_VAR 0 33
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 1
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61369: LD_ADDR_VAR 0 34
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: NEG
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 2
61536: NEG
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 3
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 2
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: NEG
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61649: LD_ADDR_VAR 0 35
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61761: LD_ADDR_VAR 0 36
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 0
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 1
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 1
61819: NEG
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61873: LD_ADDR_VAR 0 37
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61985: LD_ADDR_VAR 0 38
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62097: LD_ADDR_VAR 0 39
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 0
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: LD_INT 2
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 2
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62209: LD_ADDR_VAR 0 40
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 0
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62321: LD_ADDR_VAR 0 41
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: NEG
62403: PUSH
62404: LD_INT 2
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: LD_INT 1
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: LD_INT 3
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: NEG
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 3
62606: NEG
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 3
62618: NEG
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 3
62630: NEG
62631: PUSH
62632: LD_INT 3
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62671: LD_ADDR_VAR 0 42
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 2
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: LD_INT 2
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 2
62861: NEG
62862: PUSH
62863: LD_INT 3
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: LD_INT 3
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 3
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 3
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: LD_INT 3
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 3
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: LD_INT 3
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: NEG
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 3
62968: NEG
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 3
62980: NEG
62981: PUSH
62982: LD_INT 3
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63021: LD_ADDR_VAR 0 43
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: NEG
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: LD_INT 3
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: LD_INT 2
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 3
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 3
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: LD_INT 3
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 2
63306: NEG
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 3
63317: NEG
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 3
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63369: LD_ADDR_VAR 0 44
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 2
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 2
63559: NEG
63560: PUSH
63561: LD_INT 3
63563: NEG
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: LD_INT 0
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 2
63622: PUSH
63623: LD_INT 3
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 2
63632: NEG
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 3
63643: NEG
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 3
63654: NEG
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 3
63666: NEG
63667: PUSH
63668: LD_INT 2
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: LD_INT 3
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63719: LD_ADDR_VAR 0 45
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: NEG
63910: PUSH
63911: LD_INT 3
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: LD_INT 3
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: LD_INT 2
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 3
63965: PUSH
63966: LD_INT 3
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 2
63975: PUSH
63976: LD_INT 3
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: PUSH
63986: LD_INT 3
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: LD_INT 3
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: NEG
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 3
64016: NEG
64017: PUSH
64018: LD_INT 2
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: LD_INT 3
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64069: LD_ADDR_VAR 0 46
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: NEG
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 2
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 2
64246: NEG
64247: PUSH
64248: LD_INT 1
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 1
64258: NEG
64259: PUSH
64260: LD_INT 3
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 3
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: LD_INT 2
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 3
64303: PUSH
64304: LD_INT 0
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 3
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 3
64365: NEG
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 3
64376: NEG
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64417: LD_ADDR_VAR 0 47
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: NEG
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: NEG
64545: PUSH
64546: LD_INT 2
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64568: LD_ADDR_VAR 0 48
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 2
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64715: LD_ADDR_VAR 0 49
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 1
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 2
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64859: LD_ADDR_VAR 0 50
64863: PUSH
64864: LD_INT 0
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: LD_INT 1
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 1
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 0
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: LD_INT 1
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: LD_INT 2
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 1
64980: NEG
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65003: LD_ADDR_VAR 0 51
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 2
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 2
65115: NEG
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 2
65126: NEG
65127: PUSH
65128: LD_INT 1
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65150: LD_ADDR_VAR 0 52
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: LD_INT 1
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 2
65254: NEG
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 2
65265: NEG
65266: PUSH
65267: LD_INT 1
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 2
65277: NEG
65278: PUSH
65279: LD_INT 2
65281: NEG
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65301: LD_ADDR_VAR 0 53
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 0
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 1
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 2
65436: PUSH
65437: LD_INT 2
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: LD_INT 2
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 2
65477: NEG
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 2
65488: NEG
65489: PUSH
65490: LD_INT 1
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: LD_INT 2
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65531: LD_ADDR_VAR 0 54
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: NEG
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: LD_INT 2
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 2
65627: NEG
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 1
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 2
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 2
65666: PUSH
65667: LD_INT 2
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: LD_INT 2
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 2
65707: NEG
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 2
65718: NEG
65719: PUSH
65720: LD_INT 1
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 2
65730: NEG
65731: PUSH
65732: LD_INT 2
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65761: LD_ADDR_VAR 0 55
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: LD_INT 1
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 2
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 2
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: LD_INT 1
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 2
65896: PUSH
65897: LD_INT 2
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: LD_INT 2
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 2
65937: NEG
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 2
65948: NEG
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 2
65960: NEG
65961: PUSH
65962: LD_INT 2
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65991: LD_ADDR_VAR 0 56
65995: PUSH
65996: LD_INT 0
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: LD_INT 1
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: LD_INT 0
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 0
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: NEG
66050: PUSH
66051: LD_INT 0
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: LD_INT 1
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 2
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 2
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 2
66126: PUSH
66127: LD_INT 2
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: PUSH
66137: LD_INT 2
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: LD_INT 2
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 2
66167: NEG
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 2
66178: NEG
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 2
66190: NEG
66191: PUSH
66192: LD_INT 2
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66221: LD_ADDR_VAR 0 57
66225: PUSH
66226: LD_INT 0
66228: PUSH
66229: LD_INT 0
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 0
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 2
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: LD_INT 1
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 2
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: LD_INT 1
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: LD_INT 2
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: LD_INT 1
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 2
66397: NEG
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 2
66408: NEG
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 2
66420: NEG
66421: PUSH
66422: LD_INT 2
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66451: LD_ADDR_VAR 0 58
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 1
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 0
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: LD_INT 1
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 2
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 2
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: LD_INT 1
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 2
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: LD_INT 2
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: LD_INT 2
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 0
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: LD_INT 1
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 2
66627: NEG
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 2
66638: NEG
66639: PUSH
66640: LD_INT 1
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: LD_INT 2
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66681: LD_ADDR_VAR 0 59
66685: PUSH
66686: LD_INT 0
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: LD_INT 1
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 1
66750: NEG
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66769: LD_ADDR_VAR 0 60
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: LD_INT 1
66789: NEG
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: PUSH
66808: LD_INT 1
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 0
66817: PUSH
66818: LD_INT 1
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 1
66838: NEG
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66857: LD_ADDR_VAR 0 61
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66945: LD_ADDR_VAR 0 62
66949: PUSH
66950: LD_INT 0
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: LD_INT 1
67018: NEG
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67033: LD_ADDR_VAR 0 63
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: LD_INT 0
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 1
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 1
67102: NEG
67103: PUSH
67104: LD_INT 1
67106: NEG
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67121: LD_ADDR_VAR 0 64
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: LD_INT 1
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 1
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: LD_INT 1
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 1
67179: NEG
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 1
67190: NEG
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: ST_TO_ADDR
// end ; 1 :
67209: GO 73106
67211: LD_INT 1
67213: DOUBLE
67214: EQUAL
67215: IFTRUE 67219
67217: GO 69842
67219: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67220: LD_ADDR_VAR 0 11
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: LD_INT 3
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 3
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: LIST
67263: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67264: LD_ADDR_VAR 0 12
67268: PUSH
67269: LD_INT 2
67271: PUSH
67272: LD_INT 1
67274: NEG
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 3
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 3
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: LIST
67304: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67305: LD_ADDR_VAR 0 13
67309: PUSH
67310: LD_INT 3
67312: PUSH
67313: LD_INT 2
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 3
67322: PUSH
67323: LD_INT 3
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 2
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67345: LD_ADDR_VAR 0 14
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: LD_INT 3
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 3
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 1
67372: NEG
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67386: LD_ADDR_VAR 0 15
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: LD_INT 0
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 3
67415: NEG
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: LIST
67429: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67430: LD_ADDR_VAR 0 16
67434: PUSH
67435: LD_INT 2
67437: NEG
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 3
67449: NEG
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 3
67461: NEG
67462: PUSH
67463: LD_INT 3
67465: NEG
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: LIST
67475: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67476: LD_ADDR_VAR 0 17
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: LD_INT 3
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 3
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67520: LD_ADDR_VAR 0 18
67524: PUSH
67525: LD_INT 2
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 3
67538: PUSH
67539: LD_INT 0
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67561: LD_ADDR_VAR 0 19
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: LD_INT 2
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: LD_INT 3
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 3
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67601: LD_ADDR_VAR 0 20
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 3
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: LIST
67641: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67642: LD_ADDR_VAR 0 21
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: LD_INT 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: NEG
67672: PUSH
67673: LD_INT 1
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67686: LD_ADDR_VAR 0 22
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: LD_INT 3
67697: NEG
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 3
67705: NEG
67706: PUSH
67707: LD_INT 2
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 3
67717: NEG
67718: PUSH
67719: LD_INT 3
67721: NEG
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: LIST
67731: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67732: LD_ADDR_VAR 0 23
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: LD_INT 3
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 1
67750: NEG
67751: PUSH
67752: LD_INT 4
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 1
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: LIST
67775: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67776: LD_ADDR_VAR 0 24
67780: PUSH
67781: LD_INT 3
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 3
67793: PUSH
67794: LD_INT 1
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 4
67804: PUSH
67805: LD_INT 1
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67817: LD_ADDR_VAR 0 25
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: LD_INT 3
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 4
67834: PUSH
67835: LD_INT 3
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 3
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67857: LD_ADDR_VAR 0 26
67861: PUSH
67862: LD_INT 0
67864: PUSH
67865: LD_INT 3
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 1
67874: PUSH
67875: LD_INT 4
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 1
67884: NEG
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67898: LD_ADDR_VAR 0 27
67902: PUSH
67903: LD_INT 3
67905: NEG
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 3
67916: NEG
67917: PUSH
67918: LD_INT 1
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 4
67927: NEG
67928: PUSH
67929: LD_INT 1
67931: NEG
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: LIST
67941: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67942: LD_ADDR_VAR 0 28
67946: PUSH
67947: LD_INT 3
67949: NEG
67950: PUSH
67951: LD_INT 3
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 3
67961: NEG
67962: PUSH
67963: LD_INT 4
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 4
67973: NEG
67974: PUSH
67975: LD_INT 3
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: LIST
67987: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67988: LD_ADDR_VAR 0 29
67992: PUSH
67993: LD_INT 1
67995: NEG
67996: PUSH
67997: LD_INT 3
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 0
68007: PUSH
68008: LD_INT 3
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: LD_INT 2
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: LD_INT 4
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 0
68041: PUSH
68042: LD_INT 4
68044: NEG
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: LD_INT 3
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 1
68063: NEG
68064: PUSH
68065: LD_INT 5
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 5
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 1
68086: PUSH
68087: LD_INT 4
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: LD_INT 6
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: LD_INT 6
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 1
68120: PUSH
68121: LD_INT 5
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68143: LD_ADDR_VAR 0 30
68147: PUSH
68148: LD_INT 2
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 3
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 3
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 4
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 4
68202: PUSH
68203: LD_INT 1
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 4
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 5
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 5
68233: PUSH
68234: LD_INT 1
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 5
68243: PUSH
68244: LD_INT 1
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 6
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 6
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68286: LD_ADDR_VAR 0 31
68290: PUSH
68291: LD_INT 3
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 3
68303: PUSH
68304: LD_INT 3
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 2
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 4
68323: PUSH
68324: LD_INT 3
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 4
68333: PUSH
68334: LD_INT 4
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 3
68343: PUSH
68344: LD_INT 4
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 5
68353: PUSH
68354: LD_INT 4
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 5
68363: PUSH
68364: LD_INT 5
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 4
68373: PUSH
68374: LD_INT 5
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 6
68383: PUSH
68384: LD_INT 5
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 6
68393: PUSH
68394: LD_INT 6
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: PUSH
68401: LD_INT 5
68403: PUSH
68404: LD_INT 6
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68425: LD_ADDR_VAR 0 32
68429: PUSH
68430: LD_INT 1
68432: PUSH
68433: LD_INT 3
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 3
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 1
68452: NEG
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 1
68463: PUSH
68464: LD_INT 4
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: LD_INT 4
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 1
68483: NEG
68484: PUSH
68485: LD_INT 3
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: LD_INT 5
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: LD_INT 5
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: NEG
68515: PUSH
68516: LD_INT 4
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 1
68525: PUSH
68526: LD_INT 6
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: LD_INT 6
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 1
68545: NEG
68546: PUSH
68547: LD_INT 5
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68568: LD_ADDR_VAR 0 33
68572: PUSH
68573: LD_INT 2
68575: NEG
68576: PUSH
68577: LD_INT 1
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 3
68586: NEG
68587: PUSH
68588: LD_INT 0
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 3
68597: NEG
68598: PUSH
68599: LD_INT 1
68601: NEG
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 3
68609: NEG
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 4
68620: NEG
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 4
68631: NEG
68632: PUSH
68633: LD_INT 1
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 4
68643: NEG
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 5
68654: NEG
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 5
68665: NEG
68666: PUSH
68667: LD_INT 1
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 5
68677: NEG
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 6
68688: NEG
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 6
68699: NEG
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68723: LD_ADDR_VAR 0 34
68727: PUSH
68728: LD_INT 2
68730: NEG
68731: PUSH
68732: LD_INT 3
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 3
68742: NEG
68743: PUSH
68744: LD_INT 2
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: NEG
68755: PUSH
68756: LD_INT 3
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 3
68766: NEG
68767: PUSH
68768: LD_INT 4
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 4
68778: NEG
68779: PUSH
68780: LD_INT 3
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 4
68790: NEG
68791: PUSH
68792: LD_INT 4
68794: NEG
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 4
68802: NEG
68803: PUSH
68804: LD_INT 5
68806: NEG
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 5
68814: NEG
68815: PUSH
68816: LD_INT 4
68818: NEG
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 5
68826: NEG
68827: PUSH
68828: LD_INT 5
68830: NEG
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 5
68838: NEG
68839: PUSH
68840: LD_INT 6
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 6
68850: NEG
68851: PUSH
68852: LD_INT 5
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 6
68862: NEG
68863: PUSH
68864: LD_INT 6
68866: NEG
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68886: LD_ADDR_VAR 0 41
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: LD_INT 2
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 1
68916: PUSH
68917: LD_INT 2
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68930: LD_ADDR_VAR 0 42
68934: PUSH
68935: LD_INT 2
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 2
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 3
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: LIST
68970: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68971: LD_ADDR_VAR 0 43
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 3
68988: PUSH
68989: LD_INT 2
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 2
68998: PUSH
68999: LD_INT 3
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: LIST
69010: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69011: LD_ADDR_VAR 0 44
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: LD_INT 2
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 1
69028: PUSH
69029: LD_INT 3
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 1
69038: NEG
69039: PUSH
69040: LD_INT 2
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69052: LD_ADDR_VAR 0 45
69056: PUSH
69057: LD_INT 2
69059: NEG
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 2
69070: NEG
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: LD_INT 1
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: LIST
69095: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69096: LD_ADDR_VAR 0 46
69100: PUSH
69101: LD_INT 2
69103: NEG
69104: PUSH
69105: LD_INT 2
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 2
69115: NEG
69116: PUSH
69117: LD_INT 3
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: NEG
69128: PUSH
69129: LD_INT 2
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: LIST
69141: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69142: LD_ADDR_VAR 0 47
69146: PUSH
69147: LD_INT 2
69149: NEG
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 1
69161: NEG
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69175: LD_ADDR_VAR 0 48
69179: PUSH
69180: LD_INT 1
69182: PUSH
69183: LD_INT 2
69185: NEG
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 2
69193: PUSH
69194: LD_INT 1
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69206: LD_ADDR_VAR 0 49
69210: PUSH
69211: LD_INT 3
69213: PUSH
69214: LD_INT 1
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 3
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69235: LD_ADDR_VAR 0 50
69239: PUSH
69240: LD_INT 2
69242: PUSH
69243: LD_INT 3
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: LD_INT 3
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69264: LD_ADDR_VAR 0 51
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 2
69282: NEG
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69295: LD_ADDR_VAR 0 52
69299: PUSH
69300: LD_INT 3
69302: NEG
69303: PUSH
69304: LD_INT 1
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 3
69314: NEG
69315: PUSH
69316: LD_INT 2
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69328: LD_ADDR_VAR 0 53
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: LD_INT 3
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 0
69347: PUSH
69348: LD_INT 3
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 1
69358: PUSH
69359: LD_INT 2
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: LIST
69371: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69372: LD_ADDR_VAR 0 54
69376: PUSH
69377: LD_INT 2
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: LD_INT 0
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 3
69400: PUSH
69401: LD_INT 1
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: LIST
69412: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69413: LD_ADDR_VAR 0 55
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: LD_INT 2
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 3
69430: PUSH
69431: LD_INT 3
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 2
69440: PUSH
69441: LD_INT 3
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69453: LD_ADDR_VAR 0 56
69457: PUSH
69458: LD_INT 1
69460: PUSH
69461: LD_INT 3
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 0
69470: PUSH
69471: LD_INT 3
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 1
69480: NEG
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: LIST
69493: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69494: LD_ADDR_VAR 0 57
69498: PUSH
69499: LD_INT 2
69501: NEG
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 3
69512: NEG
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 3
69523: NEG
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: LIST
69537: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69538: LD_ADDR_VAR 0 58
69542: PUSH
69543: LD_INT 2
69545: NEG
69546: PUSH
69547: LD_INT 3
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 3
69557: NEG
69558: PUSH
69559: LD_INT 2
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 3
69569: NEG
69570: PUSH
69571: LD_INT 3
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: LIST
69583: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69584: LD_ADDR_VAR 0 59
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: LD_INT 2
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 0
69603: PUSH
69604: LD_INT 2
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: LD_INT 1
69617: NEG
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: LIST
69627: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69628: LD_ADDR_VAR 0 60
69632: PUSH
69633: LD_INT 1
69635: PUSH
69636: LD_INT 1
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 2
69646: PUSH
69647: LD_INT 0
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 2
69656: PUSH
69657: LD_INT 1
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: LIST
69668: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69669: LD_ADDR_VAR 0 61
69673: PUSH
69674: LD_INT 2
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 2
69686: PUSH
69687: LD_INT 2
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 1
69696: PUSH
69697: LD_INT 2
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: LIST
69708: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69709: LD_ADDR_VAR 0 62
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: LD_INT 2
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: LD_INT 2
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 1
69736: NEG
69737: PUSH
69738: LD_INT 1
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: LIST
69749: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69750: LD_ADDR_VAR 0 63
69754: PUSH
69755: LD_INT 1
69757: NEG
69758: PUSH
69759: LD_INT 1
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 2
69768: NEG
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 2
69779: NEG
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: LIST
69793: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69794: LD_ADDR_VAR 0 64
69798: PUSH
69799: LD_INT 1
69801: NEG
69802: PUSH
69803: LD_INT 2
69805: NEG
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 2
69813: NEG
69814: PUSH
69815: LD_INT 1
69817: NEG
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 2
69825: NEG
69826: PUSH
69827: LD_INT 2
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: LIST
69839: ST_TO_ADDR
// end ; 2 :
69840: GO 73106
69842: LD_INT 2
69844: DOUBLE
69845: EQUAL
69846: IFTRUE 69850
69848: GO 73105
69850: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69851: LD_ADDR_VAR 0 29
69855: PUSH
69856: LD_INT 4
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 4
69868: PUSH
69869: LD_INT 1
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 5
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 5
69889: PUSH
69890: LD_INT 1
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 4
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 3
69909: PUSH
69910: LD_INT 0
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: PUSH
69920: LD_INT 1
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 3
69930: PUSH
69931: LD_INT 2
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 5
69941: PUSH
69942: LD_INT 2
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 3
69951: PUSH
69952: LD_INT 3
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 3
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 4
69971: PUSH
69972: LD_INT 3
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 4
69981: PUSH
69982: LD_INT 4
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 3
69991: PUSH
69992: LD_INT 4
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 2
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 2
70011: PUSH
70012: LD_INT 2
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 4
70021: PUSH
70022: LD_INT 2
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 2
70031: PUSH
70032: LD_INT 4
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 0
70041: PUSH
70042: LD_INT 4
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 0
70051: PUSH
70052: LD_INT 3
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 1
70061: PUSH
70062: LD_INT 4
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: LD_INT 5
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: LD_INT 5
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 1
70091: NEG
70092: PUSH
70093: LD_INT 4
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 1
70102: NEG
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 2
70113: PUSH
70114: LD_INT 5
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 2
70123: NEG
70124: PUSH
70125: LD_INT 3
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 3
70134: NEG
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 3
70145: NEG
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 2
70157: NEG
70158: PUSH
70159: LD_INT 0
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 3
70179: NEG
70180: PUSH
70181: LD_INT 1
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 4
70190: NEG
70191: PUSH
70192: LD_INT 0
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 4
70201: NEG
70202: PUSH
70203: LD_INT 1
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 4
70213: NEG
70214: PUSH
70215: LD_INT 2
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 2
70225: NEG
70226: PUSH
70227: LD_INT 2
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 4
70236: NEG
70237: PUSH
70238: LD_INT 4
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 4
70248: NEG
70249: PUSH
70250: LD_INT 5
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 3
70260: NEG
70261: PUSH
70262: LD_INT 4
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 3
70272: NEG
70273: PUSH
70274: LD_INT 3
70276: NEG
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 4
70284: NEG
70285: PUSH
70286: LD_INT 3
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 5
70296: NEG
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 5
70308: NEG
70309: PUSH
70310: LD_INT 5
70312: NEG
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: LD_INT 5
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 5
70332: NEG
70333: PUSH
70334: LD_INT 3
70336: NEG
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70389: LD_ADDR_VAR 0 30
70393: PUSH
70394: LD_INT 4
70396: PUSH
70397: LD_INT 4
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 4
70406: PUSH
70407: LD_INT 3
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 5
70416: PUSH
70417: LD_INT 4
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 5
70426: PUSH
70427: LD_INT 5
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 4
70436: PUSH
70437: LD_INT 5
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 3
70446: PUSH
70447: LD_INT 4
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: LD_INT 3
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 5
70466: PUSH
70467: LD_INT 3
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 3
70476: PUSH
70477: LD_INT 5
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: LD_INT 3
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 1
70506: PUSH
70507: LD_INT 3
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: LD_INT 4
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 4
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 1
70536: NEG
70537: PUSH
70538: LD_INT 3
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 1
70547: NEG
70548: PUSH
70549: LD_INT 2
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 2
70558: PUSH
70559: LD_INT 4
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 2
70568: NEG
70569: PUSH
70570: LD_INT 2
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 4
70579: NEG
70580: PUSH
70581: LD_INT 0
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 4
70590: NEG
70591: PUSH
70592: LD_INT 1
70594: NEG
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 3
70602: NEG
70603: PUSH
70604: LD_INT 0
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 3
70613: NEG
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 4
70624: NEG
70625: PUSH
70626: LD_INT 1
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 5
70635: NEG
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 5
70646: NEG
70647: PUSH
70648: LD_INT 1
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 5
70658: NEG
70659: PUSH
70660: LD_INT 2
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 3
70670: NEG
70671: PUSH
70672: LD_INT 2
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 3
70681: NEG
70682: PUSH
70683: LD_INT 3
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 3
70693: NEG
70694: PUSH
70695: LD_INT 4
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 2
70705: NEG
70706: PUSH
70707: LD_INT 3
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 2
70717: NEG
70718: PUSH
70719: LD_INT 2
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 3
70729: NEG
70730: PUSH
70731: LD_INT 2
70733: NEG
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 4
70741: NEG
70742: PUSH
70743: LD_INT 3
70745: NEG
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 4
70753: NEG
70754: PUSH
70755: LD_INT 4
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 2
70765: NEG
70766: PUSH
70767: LD_INT 4
70769: NEG
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 4
70777: NEG
70778: PUSH
70779: LD_INT 2
70781: NEG
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: LD_INT 4
70792: NEG
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: LD_INT 5
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 1
70811: PUSH
70812: LD_INT 4
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 1
70822: PUSH
70823: LD_INT 3
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: LD_INT 3
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 1
70844: NEG
70845: PUSH
70846: LD_INT 4
70848: NEG
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: LD_INT 5
70860: NEG
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 2
70868: PUSH
70869: LD_INT 3
70871: NEG
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 2
70879: NEG
70880: PUSH
70881: LD_INT 5
70883: NEG
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70936: LD_ADDR_VAR 0 31
70940: PUSH
70941: LD_INT 0
70943: PUSH
70944: LD_INT 4
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: LD_INT 3
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 1
70963: PUSH
70964: LD_INT 4
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 1
70973: PUSH
70974: LD_INT 5
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 0
70983: PUSH
70984: LD_INT 5
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 1
70993: NEG
70994: PUSH
70995: LD_INT 4
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 1
71004: NEG
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 2
71015: PUSH
71016: LD_INT 5
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 2
71025: NEG
71026: PUSH
71027: LD_INT 3
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 3
71036: NEG
71037: PUSH
71038: LD_INT 0
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 3
71047: NEG
71048: PUSH
71049: LD_INT 1
71051: NEG
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 2
71059: NEG
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 2
71070: NEG
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 3
71081: NEG
71082: PUSH
71083: LD_INT 1
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PUSH
71090: LD_INT 4
71092: NEG
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: NEG
71104: PUSH
71105: LD_INT 1
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 4
71115: NEG
71116: PUSH
71117: LD_INT 2
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 2
71127: NEG
71128: PUSH
71129: LD_INT 2
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 4
71138: NEG
71139: PUSH
71140: LD_INT 4
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 4
71150: NEG
71151: PUSH
71152: LD_INT 5
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 3
71162: NEG
71163: PUSH
71164: LD_INT 4
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 3
71174: NEG
71175: PUSH
71176: LD_INT 3
71178: NEG
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 4
71186: NEG
71187: PUSH
71188: LD_INT 3
71190: NEG
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 5
71198: NEG
71199: PUSH
71200: LD_INT 4
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 5
71210: NEG
71211: PUSH
71212: LD_INT 5
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 3
71222: NEG
71223: PUSH
71224: LD_INT 5
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 5
71234: NEG
71235: PUSH
71236: LD_INT 3
71238: NEG
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: LD_INT 3
71249: NEG
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 0
71257: PUSH
71258: LD_INT 4
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 1
71268: PUSH
71269: LD_INT 3
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 1
71279: PUSH
71280: LD_INT 2
71282: NEG
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 0
71290: PUSH
71291: LD_INT 2
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 1
71301: NEG
71302: PUSH
71303: LD_INT 3
71305: NEG
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 1
71313: NEG
71314: PUSH
71315: LD_INT 4
71317: NEG
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 2
71325: PUSH
71326: LD_INT 2
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 2
71336: NEG
71337: PUSH
71338: LD_INT 4
71340: NEG
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 4
71348: PUSH
71349: LD_INT 0
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 4
71358: PUSH
71359: LD_INT 1
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 5
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 5
71379: PUSH
71380: LD_INT 1
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 4
71389: PUSH
71390: LD_INT 1
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 3
71399: PUSH
71400: LD_INT 0
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 3
71409: PUSH
71410: LD_INT 1
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 3
71420: PUSH
71421: LD_INT 2
71423: NEG
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 5
71431: PUSH
71432: LD_INT 2
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71486: LD_ADDR_VAR 0 32
71490: PUSH
71491: LD_INT 4
71493: NEG
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 4
71504: NEG
71505: PUSH
71506: LD_INT 1
71508: NEG
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 3
71516: NEG
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 3
71527: NEG
71528: PUSH
71529: LD_INT 1
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 4
71538: NEG
71539: PUSH
71540: LD_INT 1
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 5
71549: NEG
71550: PUSH
71551: LD_INT 0
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 5
71560: NEG
71561: PUSH
71562: LD_INT 1
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 5
71572: NEG
71573: PUSH
71574: LD_INT 2
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 3
71584: NEG
71585: PUSH
71586: LD_INT 2
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 3
71595: NEG
71596: PUSH
71597: LD_INT 3
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 3
71607: NEG
71608: PUSH
71609: LD_INT 4
71611: NEG
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 2
71619: NEG
71620: PUSH
71621: LD_INT 3
71623: NEG
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 2
71631: NEG
71632: PUSH
71633: LD_INT 2
71635: NEG
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 3
71643: NEG
71644: PUSH
71645: LD_INT 2
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 4
71655: NEG
71656: PUSH
71657: LD_INT 3
71659: NEG
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 4
71667: NEG
71668: PUSH
71669: LD_INT 4
71671: NEG
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 2
71679: NEG
71680: PUSH
71681: LD_INT 4
71683: NEG
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 4
71691: NEG
71692: PUSH
71693: LD_INT 2
71695: NEG
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 0
71703: PUSH
71704: LD_INT 4
71706: NEG
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 0
71714: PUSH
71715: LD_INT 5
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 1
71725: PUSH
71726: LD_INT 4
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 1
71736: PUSH
71737: LD_INT 3
71739: NEG
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: LD_INT 0
71747: PUSH
71748: LD_INT 3
71750: NEG
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 1
71758: NEG
71759: PUSH
71760: LD_INT 4
71762: NEG
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 1
71770: NEG
71771: PUSH
71772: LD_INT 5
71774: NEG
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 2
71782: PUSH
71783: LD_INT 3
71785: NEG
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 2
71793: NEG
71794: PUSH
71795: LD_INT 5
71797: NEG
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 3
71805: PUSH
71806: LD_INT 0
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 3
71815: PUSH
71816: LD_INT 1
71818: NEG
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: LD_INT 4
71826: PUSH
71827: LD_INT 0
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 4
71836: PUSH
71837: LD_INT 1
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 3
71846: PUSH
71847: LD_INT 1
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 2
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 2
71866: PUSH
71867: LD_INT 1
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 2
71877: PUSH
71878: LD_INT 2
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 4
71888: PUSH
71889: LD_INT 2
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 4
71898: PUSH
71899: LD_INT 4
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 4
71908: PUSH
71909: LD_INT 3
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 5
71918: PUSH
71919: LD_INT 4
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 5
71928: PUSH
71929: LD_INT 5
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 4
71938: PUSH
71939: LD_INT 5
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 3
71948: PUSH
71949: LD_INT 4
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 3
71958: PUSH
71959: LD_INT 3
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 5
71968: PUSH
71969: LD_INT 3
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_INT 3
71978: PUSH
71979: LD_INT 5
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: LIST
71990: LIST
71991: LIST
71992: LIST
71993: LIST
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: LIST
72001: LIST
72002: LIST
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72033: LD_ADDR_VAR 0 33
72037: PUSH
72038: LD_INT 4
72040: NEG
72041: PUSH
72042: LD_INT 4
72044: NEG
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 4
72052: NEG
72053: PUSH
72054: LD_INT 5
72056: NEG
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 3
72064: NEG
72065: PUSH
72066: LD_INT 4
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 3
72076: NEG
72077: PUSH
72078: LD_INT 3
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 4
72088: NEG
72089: PUSH
72090: LD_INT 3
72092: NEG
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 5
72100: NEG
72101: PUSH
72102: LD_INT 4
72104: NEG
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 5
72112: NEG
72113: PUSH
72114: LD_INT 5
72116: NEG
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 3
72124: NEG
72125: PUSH
72126: LD_INT 5
72128: NEG
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 5
72136: NEG
72137: PUSH
72138: LD_INT 3
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 0
72148: PUSH
72149: LD_INT 3
72151: NEG
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 0
72159: PUSH
72160: LD_INT 4
72162: NEG
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 1
72170: PUSH
72171: LD_INT 3
72173: NEG
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 1
72181: PUSH
72182: LD_INT 2
72184: NEG
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 0
72192: PUSH
72193: LD_INT 2
72195: NEG
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 1
72203: NEG
72204: PUSH
72205: LD_INT 3
72207: NEG
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 1
72215: NEG
72216: PUSH
72217: LD_INT 4
72219: NEG
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 2
72227: PUSH
72228: LD_INT 2
72230: NEG
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 2
72238: NEG
72239: PUSH
72240: LD_INT 4
72242: NEG
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 4
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: EMPTY
72255: LIST
72256: LIST
72257: PUSH
72258: LD_INT 4
72260: PUSH
72261: LD_INT 1
72263: NEG
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 5
72271: PUSH
72272: LD_INT 0
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 5
72281: PUSH
72282: LD_INT 1
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: LD_INT 1
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 3
72301: PUSH
72302: LD_INT 0
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 3
72311: PUSH
72312: LD_INT 1
72314: NEG
72315: PUSH
72316: EMPTY
72317: LIST
72318: LIST
72319: PUSH
72320: LD_INT 3
72322: PUSH
72323: LD_INT 2
72325: NEG
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 5
72333: PUSH
72334: LD_INT 2
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: LD_INT 3
72343: PUSH
72344: LD_INT 3
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 3
72353: PUSH
72354: LD_INT 2
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 4
72363: PUSH
72364: LD_INT 3
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 4
72373: PUSH
72374: LD_INT 4
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: PUSH
72381: LD_INT 3
72383: PUSH
72384: LD_INT 4
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 2
72393: PUSH
72394: LD_INT 3
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 2
72403: PUSH
72404: LD_INT 2
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 4
72413: PUSH
72414: LD_INT 2
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: PUSH
72421: LD_INT 2
72423: PUSH
72424: LD_INT 4
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 0
72433: PUSH
72434: LD_INT 4
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: LD_INT 3
72446: PUSH
72447: EMPTY
72448: LIST
72449: LIST
72450: PUSH
72451: LD_INT 1
72453: PUSH
72454: LD_INT 4
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 1
72463: PUSH
72464: LD_INT 5
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 0
72473: PUSH
72474: LD_INT 5
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 1
72483: NEG
72484: PUSH
72485: LD_INT 4
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 1
72494: NEG
72495: PUSH
72496: LD_INT 3
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 2
72505: PUSH
72506: LD_INT 5
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 2
72515: NEG
72516: PUSH
72517: LD_INT 3
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72571: LD_ADDR_VAR 0 34
72575: PUSH
72576: LD_INT 0
72578: PUSH
72579: LD_INT 4
72581: NEG
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 0
72589: PUSH
72590: LD_INT 5
72592: NEG
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 1
72600: PUSH
72601: LD_INT 4
72603: NEG
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 1
72611: PUSH
72612: LD_INT 3
72614: NEG
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 0
72622: PUSH
72623: LD_INT 3
72625: NEG
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PUSH
72631: LD_INT 1
72633: NEG
72634: PUSH
72635: LD_INT 4
72637: NEG
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 1
72645: NEG
72646: PUSH
72647: LD_INT 5
72649: NEG
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: LD_INT 3
72660: NEG
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 2
72668: NEG
72669: PUSH
72670: LD_INT 5
72672: NEG
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 3
72680: PUSH
72681: LD_INT 0
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 3
72690: PUSH
72691: LD_INT 1
72693: NEG
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 4
72701: PUSH
72702: LD_INT 0
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 4
72711: PUSH
72712: LD_INT 1
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 3
72721: PUSH
72722: LD_INT 1
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 2
72731: PUSH
72732: LD_INT 0
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: LD_INT 2
72741: PUSH
72742: LD_INT 1
72744: NEG
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PUSH
72750: LD_INT 2
72752: PUSH
72753: LD_INT 2
72755: NEG
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PUSH
72761: LD_INT 4
72763: PUSH
72764: LD_INT 2
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 4
72773: PUSH
72774: LD_INT 4
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 4
72783: PUSH
72784: LD_INT 3
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_INT 5
72793: PUSH
72794: LD_INT 4
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 5
72803: PUSH
72804: LD_INT 5
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 4
72813: PUSH
72814: LD_INT 5
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PUSH
72821: LD_INT 3
72823: PUSH
72824: LD_INT 4
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 3
72833: PUSH
72834: LD_INT 3
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 5
72843: PUSH
72844: LD_INT 3
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 3
72853: PUSH
72854: LD_INT 5
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 0
72863: PUSH
72864: LD_INT 3
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 0
72873: PUSH
72874: LD_INT 2
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 1
72883: PUSH
72884: LD_INT 3
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 1
72893: PUSH
72894: LD_INT 4
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 0
72903: PUSH
72904: LD_INT 4
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 1
72913: NEG
72914: PUSH
72915: LD_INT 3
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 1
72924: NEG
72925: PUSH
72926: LD_INT 2
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: LD_INT 2
72935: PUSH
72936: LD_INT 4
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 2
72945: NEG
72946: PUSH
72947: LD_INT 2
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_INT 4
72956: NEG
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 4
72967: NEG
72968: PUSH
72969: LD_INT 1
72971: NEG
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 3
72979: NEG
72980: PUSH
72981: LD_INT 0
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 3
72990: NEG
72991: PUSH
72992: LD_INT 1
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 4
73001: NEG
73002: PUSH
73003: LD_INT 1
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: PUSH
73010: LD_INT 5
73012: NEG
73013: PUSH
73014: LD_INT 0
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 5
73023: NEG
73024: PUSH
73025: LD_INT 1
73027: NEG
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 5
73035: NEG
73036: PUSH
73037: LD_INT 2
73039: NEG
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: LD_INT 3
73047: NEG
73048: PUSH
73049: LD_INT 2
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: ST_TO_ADDR
// end ; end ;
73103: GO 73106
73105: POP
// case btype of b_depot , b_warehouse :
73106: LD_VAR 0 1
73110: PUSH
73111: LD_INT 0
73113: DOUBLE
73114: EQUAL
73115: IFTRUE 73125
73117: LD_INT 1
73119: DOUBLE
73120: EQUAL
73121: IFTRUE 73125
73123: GO 73326
73125: POP
// case nation of nation_american :
73126: LD_VAR 0 5
73130: PUSH
73131: LD_INT 1
73133: DOUBLE
73134: EQUAL
73135: IFTRUE 73139
73137: GO 73195
73139: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73140: LD_ADDR_VAR 0 9
73144: PUSH
73145: LD_VAR 0 11
73149: PUSH
73150: LD_VAR 0 12
73154: PUSH
73155: LD_VAR 0 13
73159: PUSH
73160: LD_VAR 0 14
73164: PUSH
73165: LD_VAR 0 15
73169: PUSH
73170: LD_VAR 0 16
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: PUSH
73183: LD_VAR 0 4
73187: PUSH
73188: LD_INT 1
73190: PLUS
73191: ARRAY
73192: ST_TO_ADDR
73193: GO 73324
73195: LD_INT 2
73197: DOUBLE
73198: EQUAL
73199: IFTRUE 73203
73201: GO 73259
73203: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73204: LD_ADDR_VAR 0 9
73208: PUSH
73209: LD_VAR 0 17
73213: PUSH
73214: LD_VAR 0 18
73218: PUSH
73219: LD_VAR 0 19
73223: PUSH
73224: LD_VAR 0 20
73228: PUSH
73229: LD_VAR 0 21
73233: PUSH
73234: LD_VAR 0 22
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: PUSH
73247: LD_VAR 0 4
73251: PUSH
73252: LD_INT 1
73254: PLUS
73255: ARRAY
73256: ST_TO_ADDR
73257: GO 73324
73259: LD_INT 3
73261: DOUBLE
73262: EQUAL
73263: IFTRUE 73267
73265: GO 73323
73267: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73268: LD_ADDR_VAR 0 9
73272: PUSH
73273: LD_VAR 0 23
73277: PUSH
73278: LD_VAR 0 24
73282: PUSH
73283: LD_VAR 0 25
73287: PUSH
73288: LD_VAR 0 26
73292: PUSH
73293: LD_VAR 0 27
73297: PUSH
73298: LD_VAR 0 28
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: PUSH
73311: LD_VAR 0 4
73315: PUSH
73316: LD_INT 1
73318: PLUS
73319: ARRAY
73320: ST_TO_ADDR
73321: GO 73324
73323: POP
73324: GO 73879
73326: LD_INT 2
73328: DOUBLE
73329: EQUAL
73330: IFTRUE 73340
73332: LD_INT 3
73334: DOUBLE
73335: EQUAL
73336: IFTRUE 73340
73338: GO 73396
73340: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73341: LD_ADDR_VAR 0 9
73345: PUSH
73346: LD_VAR 0 29
73350: PUSH
73351: LD_VAR 0 30
73355: PUSH
73356: LD_VAR 0 31
73360: PUSH
73361: LD_VAR 0 32
73365: PUSH
73366: LD_VAR 0 33
73370: PUSH
73371: LD_VAR 0 34
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: PUSH
73384: LD_VAR 0 4
73388: PUSH
73389: LD_INT 1
73391: PLUS
73392: ARRAY
73393: ST_TO_ADDR
73394: GO 73879
73396: LD_INT 16
73398: DOUBLE
73399: EQUAL
73400: IFTRUE 73458
73402: LD_INT 17
73404: DOUBLE
73405: EQUAL
73406: IFTRUE 73458
73408: LD_INT 18
73410: DOUBLE
73411: EQUAL
73412: IFTRUE 73458
73414: LD_INT 19
73416: DOUBLE
73417: EQUAL
73418: IFTRUE 73458
73420: LD_INT 22
73422: DOUBLE
73423: EQUAL
73424: IFTRUE 73458
73426: LD_INT 20
73428: DOUBLE
73429: EQUAL
73430: IFTRUE 73458
73432: LD_INT 21
73434: DOUBLE
73435: EQUAL
73436: IFTRUE 73458
73438: LD_INT 23
73440: DOUBLE
73441: EQUAL
73442: IFTRUE 73458
73444: LD_INT 24
73446: DOUBLE
73447: EQUAL
73448: IFTRUE 73458
73450: LD_INT 25
73452: DOUBLE
73453: EQUAL
73454: IFTRUE 73458
73456: GO 73514
73458: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73459: LD_ADDR_VAR 0 9
73463: PUSH
73464: LD_VAR 0 35
73468: PUSH
73469: LD_VAR 0 36
73473: PUSH
73474: LD_VAR 0 37
73478: PUSH
73479: LD_VAR 0 38
73483: PUSH
73484: LD_VAR 0 39
73488: PUSH
73489: LD_VAR 0 40
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: PUSH
73502: LD_VAR 0 4
73506: PUSH
73507: LD_INT 1
73509: PLUS
73510: ARRAY
73511: ST_TO_ADDR
73512: GO 73879
73514: LD_INT 6
73516: DOUBLE
73517: EQUAL
73518: IFTRUE 73570
73520: LD_INT 7
73522: DOUBLE
73523: EQUAL
73524: IFTRUE 73570
73526: LD_INT 8
73528: DOUBLE
73529: EQUAL
73530: IFTRUE 73570
73532: LD_INT 13
73534: DOUBLE
73535: EQUAL
73536: IFTRUE 73570
73538: LD_INT 12
73540: DOUBLE
73541: EQUAL
73542: IFTRUE 73570
73544: LD_INT 15
73546: DOUBLE
73547: EQUAL
73548: IFTRUE 73570
73550: LD_INT 11
73552: DOUBLE
73553: EQUAL
73554: IFTRUE 73570
73556: LD_INT 14
73558: DOUBLE
73559: EQUAL
73560: IFTRUE 73570
73562: LD_INT 10
73564: DOUBLE
73565: EQUAL
73566: IFTRUE 73570
73568: GO 73626
73570: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73571: LD_ADDR_VAR 0 9
73575: PUSH
73576: LD_VAR 0 41
73580: PUSH
73581: LD_VAR 0 42
73585: PUSH
73586: LD_VAR 0 43
73590: PUSH
73591: LD_VAR 0 44
73595: PUSH
73596: LD_VAR 0 45
73600: PUSH
73601: LD_VAR 0 46
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: LIST
73613: PUSH
73614: LD_VAR 0 4
73618: PUSH
73619: LD_INT 1
73621: PLUS
73622: ARRAY
73623: ST_TO_ADDR
73624: GO 73879
73626: LD_INT 36
73628: DOUBLE
73629: EQUAL
73630: IFTRUE 73634
73632: GO 73690
73634: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73635: LD_ADDR_VAR 0 9
73639: PUSH
73640: LD_VAR 0 47
73644: PUSH
73645: LD_VAR 0 48
73649: PUSH
73650: LD_VAR 0 49
73654: PUSH
73655: LD_VAR 0 50
73659: PUSH
73660: LD_VAR 0 51
73664: PUSH
73665: LD_VAR 0 52
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: PUSH
73678: LD_VAR 0 4
73682: PUSH
73683: LD_INT 1
73685: PLUS
73686: ARRAY
73687: ST_TO_ADDR
73688: GO 73879
73690: LD_INT 4
73692: DOUBLE
73693: EQUAL
73694: IFTRUE 73716
73696: LD_INT 5
73698: DOUBLE
73699: EQUAL
73700: IFTRUE 73716
73702: LD_INT 34
73704: DOUBLE
73705: EQUAL
73706: IFTRUE 73716
73708: LD_INT 37
73710: DOUBLE
73711: EQUAL
73712: IFTRUE 73716
73714: GO 73772
73716: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73717: LD_ADDR_VAR 0 9
73721: PUSH
73722: LD_VAR 0 53
73726: PUSH
73727: LD_VAR 0 54
73731: PUSH
73732: LD_VAR 0 55
73736: PUSH
73737: LD_VAR 0 56
73741: PUSH
73742: LD_VAR 0 57
73746: PUSH
73747: LD_VAR 0 58
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: PUSH
73760: LD_VAR 0 4
73764: PUSH
73765: LD_INT 1
73767: PLUS
73768: ARRAY
73769: ST_TO_ADDR
73770: GO 73879
73772: LD_INT 31
73774: DOUBLE
73775: EQUAL
73776: IFTRUE 73822
73778: LD_INT 32
73780: DOUBLE
73781: EQUAL
73782: IFTRUE 73822
73784: LD_INT 33
73786: DOUBLE
73787: EQUAL
73788: IFTRUE 73822
73790: LD_INT 27
73792: DOUBLE
73793: EQUAL
73794: IFTRUE 73822
73796: LD_INT 26
73798: DOUBLE
73799: EQUAL
73800: IFTRUE 73822
73802: LD_INT 28
73804: DOUBLE
73805: EQUAL
73806: IFTRUE 73822
73808: LD_INT 29
73810: DOUBLE
73811: EQUAL
73812: IFTRUE 73822
73814: LD_INT 30
73816: DOUBLE
73817: EQUAL
73818: IFTRUE 73822
73820: GO 73878
73822: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73823: LD_ADDR_VAR 0 9
73827: PUSH
73828: LD_VAR 0 59
73832: PUSH
73833: LD_VAR 0 60
73837: PUSH
73838: LD_VAR 0 61
73842: PUSH
73843: LD_VAR 0 62
73847: PUSH
73848: LD_VAR 0 63
73852: PUSH
73853: LD_VAR 0 64
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: PUSH
73866: LD_VAR 0 4
73870: PUSH
73871: LD_INT 1
73873: PLUS
73874: ARRAY
73875: ST_TO_ADDR
73876: GO 73879
73878: POP
// temp_list2 = [ ] ;
73879: LD_ADDR_VAR 0 10
73883: PUSH
73884: EMPTY
73885: ST_TO_ADDR
// for i in temp_list do
73886: LD_ADDR_VAR 0 8
73890: PUSH
73891: LD_VAR 0 9
73895: PUSH
73896: FOR_IN
73897: IFFALSE 73949
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73899: LD_ADDR_VAR 0 10
73903: PUSH
73904: LD_VAR 0 10
73908: PUSH
73909: LD_VAR 0 8
73913: PUSH
73914: LD_INT 1
73916: ARRAY
73917: PUSH
73918: LD_VAR 0 2
73922: PLUS
73923: PUSH
73924: LD_VAR 0 8
73928: PUSH
73929: LD_INT 2
73931: ARRAY
73932: PUSH
73933: LD_VAR 0 3
73937: PLUS
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: EMPTY
73944: LIST
73945: ADD
73946: ST_TO_ADDR
73947: GO 73896
73949: POP
73950: POP
// result = temp_list2 ;
73951: LD_ADDR_VAR 0 7
73955: PUSH
73956: LD_VAR 0 10
73960: ST_TO_ADDR
// end ;
73961: LD_VAR 0 7
73965: RET
// export function EnemyInRange ( unit , dist ) ; begin
73966: LD_INT 0
73968: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73969: LD_ADDR_VAR 0 3
73973: PUSH
73974: LD_VAR 0 1
73978: PPUSH
73979: CALL_OW 255
73983: PPUSH
73984: LD_VAR 0 1
73988: PPUSH
73989: CALL_OW 250
73993: PPUSH
73994: LD_VAR 0 1
73998: PPUSH
73999: CALL_OW 251
74003: PPUSH
74004: LD_VAR 0 2
74008: PPUSH
74009: CALL 47223 0 4
74013: PUSH
74014: LD_INT 4
74016: ARRAY
74017: ST_TO_ADDR
// end ;
74018: LD_VAR 0 3
74022: RET
// export function PlayerSeeMe ( unit ) ; begin
74023: LD_INT 0
74025: PPUSH
// result := See ( your_side , unit ) ;
74026: LD_ADDR_VAR 0 2
74030: PUSH
74031: LD_OWVAR 2
74035: PPUSH
74036: LD_VAR 0 1
74040: PPUSH
74041: CALL_OW 292
74045: ST_TO_ADDR
// end ;
74046: LD_VAR 0 2
74050: RET
// export function ReverseDir ( unit ) ; begin
74051: LD_INT 0
74053: PPUSH
// if not unit then
74054: LD_VAR 0 1
74058: NOT
74059: IFFALSE 74063
// exit ;
74061: GO 74086
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74063: LD_ADDR_VAR 0 2
74067: PUSH
74068: LD_VAR 0 1
74072: PPUSH
74073: CALL_OW 254
74077: PUSH
74078: LD_INT 3
74080: PLUS
74081: PUSH
74082: LD_INT 6
74084: MOD
74085: ST_TO_ADDR
// end ;
74086: LD_VAR 0 2
74090: RET
// export function ReverseArray ( array ) ; var i ; begin
74091: LD_INT 0
74093: PPUSH
74094: PPUSH
// if not array then
74095: LD_VAR 0 1
74099: NOT
74100: IFFALSE 74104
// exit ;
74102: GO 74159
// result := [ ] ;
74104: LD_ADDR_VAR 0 2
74108: PUSH
74109: EMPTY
74110: ST_TO_ADDR
// for i := array downto 1 do
74111: LD_ADDR_VAR 0 3
74115: PUSH
74116: DOUBLE
74117: LD_VAR 0 1
74121: INC
74122: ST_TO_ADDR
74123: LD_INT 1
74125: PUSH
74126: FOR_DOWNTO
74127: IFFALSE 74157
// result := Join ( result , array [ i ] ) ;
74129: LD_ADDR_VAR 0 2
74133: PUSH
74134: LD_VAR 0 2
74138: PPUSH
74139: LD_VAR 0 1
74143: PUSH
74144: LD_VAR 0 3
74148: ARRAY
74149: PPUSH
74150: CALL 79011 0 2
74154: ST_TO_ADDR
74155: GO 74126
74157: POP
74158: POP
// end ;
74159: LD_VAR 0 2
74163: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74164: LD_INT 0
74166: PPUSH
74167: PPUSH
74168: PPUSH
74169: PPUSH
74170: PPUSH
74171: PPUSH
// if not unit or not hexes then
74172: LD_VAR 0 1
74176: NOT
74177: IFTRUE 74186
74179: PUSH
74180: LD_VAR 0 2
74184: NOT
74185: OR
74186: IFFALSE 74190
// exit ;
74188: GO 74313
// dist := 9999 ;
74190: LD_ADDR_VAR 0 5
74194: PUSH
74195: LD_INT 9999
74197: ST_TO_ADDR
// for i = 1 to hexes do
74198: LD_ADDR_VAR 0 4
74202: PUSH
74203: DOUBLE
74204: LD_INT 1
74206: DEC
74207: ST_TO_ADDR
74208: LD_VAR 0 2
74212: PUSH
74213: FOR_TO
74214: IFFALSE 74301
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74216: LD_ADDR_VAR 0 6
74220: PUSH
74221: LD_VAR 0 1
74225: PPUSH
74226: LD_VAR 0 2
74230: PUSH
74231: LD_VAR 0 4
74235: ARRAY
74236: PUSH
74237: LD_INT 1
74239: ARRAY
74240: PPUSH
74241: LD_VAR 0 2
74245: PUSH
74246: LD_VAR 0 4
74250: ARRAY
74251: PUSH
74252: LD_INT 2
74254: ARRAY
74255: PPUSH
74256: CALL_OW 297
74260: ST_TO_ADDR
// if tdist < dist then
74261: LD_VAR 0 6
74265: PUSH
74266: LD_VAR 0 5
74270: LESS
74271: IFFALSE 74299
// begin hex := hexes [ i ] ;
74273: LD_ADDR_VAR 0 8
74277: PUSH
74278: LD_VAR 0 2
74282: PUSH
74283: LD_VAR 0 4
74287: ARRAY
74288: ST_TO_ADDR
// dist := tdist ;
74289: LD_ADDR_VAR 0 5
74293: PUSH
74294: LD_VAR 0 6
74298: ST_TO_ADDR
// end ; end ;
74299: GO 74213
74301: POP
74302: POP
// result := hex ;
74303: LD_ADDR_VAR 0 3
74307: PUSH
74308: LD_VAR 0 8
74312: ST_TO_ADDR
// end ;
74313: LD_VAR 0 3
74317: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74318: LD_INT 0
74320: PPUSH
74321: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74322: LD_VAR 0 1
74326: NOT
74327: IFTRUE 74366
74329: PUSH
74330: LD_VAR 0 1
74334: PUSH
74335: LD_INT 21
74337: PUSH
74338: LD_INT 2
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 23
74347: PUSH
74348: LD_INT 2
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PPUSH
74359: CALL_OW 69
74363: IN
74364: NOT
74365: OR
74366: IFFALSE 74370
// exit ;
74368: GO 74417
// for i = 1 to 3 do
74370: LD_ADDR_VAR 0 3
74374: PUSH
74375: DOUBLE
74376: LD_INT 1
74378: DEC
74379: ST_TO_ADDR
74380: LD_INT 3
74382: PUSH
74383: FOR_TO
74384: IFFALSE 74415
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74386: LD_VAR 0 1
74390: PPUSH
74391: CALL_OW 250
74395: PPUSH
74396: LD_VAR 0 1
74400: PPUSH
74401: CALL_OW 251
74405: PPUSH
74406: LD_INT 1
74408: PPUSH
74409: CALL_OW 453
74413: GO 74383
74415: POP
74416: POP
// end ;
74417: LD_VAR 0 2
74421: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74422: LD_INT 0
74424: PPUSH
74425: PPUSH
74426: PPUSH
74427: PPUSH
74428: PPUSH
74429: PPUSH
// if not unit or not enemy_unit then
74430: LD_VAR 0 1
74434: NOT
74435: IFTRUE 74444
74437: PUSH
74438: LD_VAR 0 2
74442: NOT
74443: OR
74444: IFFALSE 74448
// exit ;
74446: GO 74929
// if GetLives ( i ) < 250 then
74448: LD_VAR 0 4
74452: PPUSH
74453: CALL_OW 256
74457: PUSH
74458: LD_INT 250
74460: LESS
74461: IFFALSE 74474
// begin ComAutodestruct ( i ) ;
74463: LD_VAR 0 4
74467: PPUSH
74468: CALL 74318 0 1
// exit ;
74472: GO 74929
// end ; x := GetX ( enemy_unit ) ;
74474: LD_ADDR_VAR 0 7
74478: PUSH
74479: LD_VAR 0 2
74483: PPUSH
74484: CALL_OW 250
74488: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74489: LD_ADDR_VAR 0 8
74493: PUSH
74494: LD_VAR 0 2
74498: PPUSH
74499: CALL_OW 251
74503: ST_TO_ADDR
// if not x or not y then
74504: LD_VAR 0 7
74508: NOT
74509: IFTRUE 74518
74511: PUSH
74512: LD_VAR 0 8
74516: NOT
74517: OR
74518: IFFALSE 74522
// exit ;
74520: GO 74929
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74522: LD_ADDR_VAR 0 6
74526: PUSH
74527: LD_VAR 0 7
74531: PPUSH
74532: LD_INT 0
74534: PPUSH
74535: LD_INT 4
74537: PPUSH
74538: CALL_OW 272
74542: PUSH
74543: LD_VAR 0 8
74547: PPUSH
74548: LD_INT 0
74550: PPUSH
74551: LD_INT 4
74553: PPUSH
74554: CALL_OW 273
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: LD_VAR 0 7
74567: PPUSH
74568: LD_INT 1
74570: PPUSH
74571: LD_INT 4
74573: PPUSH
74574: CALL_OW 272
74578: PUSH
74579: LD_VAR 0 8
74583: PPUSH
74584: LD_INT 1
74586: PPUSH
74587: LD_INT 4
74589: PPUSH
74590: CALL_OW 273
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_VAR 0 7
74603: PPUSH
74604: LD_INT 2
74606: PPUSH
74607: LD_INT 4
74609: PPUSH
74610: CALL_OW 272
74614: PUSH
74615: LD_VAR 0 8
74619: PPUSH
74620: LD_INT 2
74622: PPUSH
74623: LD_INT 4
74625: PPUSH
74626: CALL_OW 273
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: PUSH
74635: LD_VAR 0 7
74639: PPUSH
74640: LD_INT 3
74642: PPUSH
74643: LD_INT 4
74645: PPUSH
74646: CALL_OW 272
74650: PUSH
74651: LD_VAR 0 8
74655: PPUSH
74656: LD_INT 3
74658: PPUSH
74659: LD_INT 4
74661: PPUSH
74662: CALL_OW 273
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: PUSH
74671: LD_VAR 0 7
74675: PPUSH
74676: LD_INT 4
74678: PPUSH
74679: LD_INT 4
74681: PPUSH
74682: CALL_OW 272
74686: PUSH
74687: LD_VAR 0 8
74691: PPUSH
74692: LD_INT 4
74694: PPUSH
74695: LD_INT 4
74697: PPUSH
74698: CALL_OW 273
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_VAR 0 7
74711: PPUSH
74712: LD_INT 5
74714: PPUSH
74715: LD_INT 4
74717: PPUSH
74718: CALL_OW 272
74722: PUSH
74723: LD_VAR 0 8
74727: PPUSH
74728: LD_INT 5
74730: PPUSH
74731: LD_INT 4
74733: PPUSH
74734: CALL_OW 273
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: ST_TO_ADDR
// for i = tmp downto 1 do
74751: LD_ADDR_VAR 0 4
74755: PUSH
74756: DOUBLE
74757: LD_VAR 0 6
74761: INC
74762: ST_TO_ADDR
74763: LD_INT 1
74765: PUSH
74766: FOR_DOWNTO
74767: IFFALSE 74870
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74769: LD_VAR 0 6
74773: PUSH
74774: LD_VAR 0 4
74778: ARRAY
74779: PUSH
74780: LD_INT 1
74782: ARRAY
74783: PPUSH
74784: LD_VAR 0 6
74788: PUSH
74789: LD_VAR 0 4
74793: ARRAY
74794: PUSH
74795: LD_INT 2
74797: ARRAY
74798: PPUSH
74799: CALL_OW 488
74803: NOT
74804: IFTRUE 74846
74806: PUSH
74807: LD_VAR 0 6
74811: PUSH
74812: LD_VAR 0 4
74816: ARRAY
74817: PUSH
74818: LD_INT 1
74820: ARRAY
74821: PPUSH
74822: LD_VAR 0 6
74826: PUSH
74827: LD_VAR 0 4
74831: ARRAY
74832: PUSH
74833: LD_INT 2
74835: ARRAY
74836: PPUSH
74837: CALL_OW 428
74841: PUSH
74842: LD_INT 0
74844: NONEQUAL
74845: OR
74846: IFFALSE 74868
// tmp := Delete ( tmp , i ) ;
74848: LD_ADDR_VAR 0 6
74852: PUSH
74853: LD_VAR 0 6
74857: PPUSH
74858: LD_VAR 0 4
74862: PPUSH
74863: CALL_OW 3
74867: ST_TO_ADDR
74868: GO 74766
74870: POP
74871: POP
// j := GetClosestHex ( unit , tmp ) ;
74872: LD_ADDR_VAR 0 5
74876: PUSH
74877: LD_VAR 0 1
74881: PPUSH
74882: LD_VAR 0 6
74886: PPUSH
74887: CALL 74164 0 2
74891: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74892: LD_VAR 0 1
74896: PPUSH
74897: LD_VAR 0 5
74901: PUSH
74902: LD_INT 1
74904: ARRAY
74905: PPUSH
74906: LD_VAR 0 5
74910: PUSH
74911: LD_INT 2
74913: ARRAY
74914: PPUSH
74915: CALL_OW 111
// result := j ;
74919: LD_ADDR_VAR 0 3
74923: PUSH
74924: LD_VAR 0 5
74928: ST_TO_ADDR
// end ;
74929: LD_VAR 0 3
74933: RET
// export function PrepareApemanSoldier ( ) ; begin
74934: LD_INT 0
74936: PPUSH
// uc_nation := 0 ;
74937: LD_ADDR_OWVAR 21
74941: PUSH
74942: LD_INT 0
74944: ST_TO_ADDR
// hc_sex := sex_male ;
74945: LD_ADDR_OWVAR 27
74949: PUSH
74950: LD_INT 1
74952: ST_TO_ADDR
// hc_name :=  ;
74953: LD_ADDR_OWVAR 26
74957: PUSH
74958: LD_STRING 
74960: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74961: LD_ADDR_OWVAR 28
74965: PUSH
74966: LD_INT 15
74968: ST_TO_ADDR
// hc_gallery :=  ;
74969: LD_ADDR_OWVAR 33
74973: PUSH
74974: LD_STRING 
74976: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74977: LD_ADDR_OWVAR 31
74981: PUSH
74982: LD_INT 0
74984: PPUSH
74985: LD_INT 3
74987: PPUSH
74988: CALL_OW 12
74992: PUSH
74993: LD_INT 0
74995: PPUSH
74996: LD_INT 3
74998: PPUSH
74999: CALL_OW 12
75003: PUSH
75004: LD_INT 0
75006: PUSH
75007: LD_INT 0
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75016: LD_ADDR_OWVAR 29
75020: PUSH
75021: LD_INT 10
75023: PUSH
75024: LD_INT 12
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: ST_TO_ADDR
// end ;
75031: LD_VAR 0 1
75035: RET
// export function PrepareApemanEngineer ( ) ; begin
75036: LD_INT 0
75038: PPUSH
// uc_nation := 0 ;
75039: LD_ADDR_OWVAR 21
75043: PUSH
75044: LD_INT 0
75046: ST_TO_ADDR
// hc_sex := sex_male ;
75047: LD_ADDR_OWVAR 27
75051: PUSH
75052: LD_INT 1
75054: ST_TO_ADDR
// hc_name :=  ;
75055: LD_ADDR_OWVAR 26
75059: PUSH
75060: LD_STRING 
75062: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75063: LD_ADDR_OWVAR 28
75067: PUSH
75068: LD_INT 16
75070: ST_TO_ADDR
// hc_gallery :=  ;
75071: LD_ADDR_OWVAR 33
75075: PUSH
75076: LD_STRING 
75078: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75079: LD_ADDR_OWVAR 31
75083: PUSH
75084: LD_INT 0
75086: PPUSH
75087: LD_INT 3
75089: PPUSH
75090: CALL_OW 12
75094: PUSH
75095: LD_INT 0
75097: PPUSH
75098: LD_INT 3
75100: PPUSH
75101: CALL_OW 12
75105: PUSH
75106: LD_INT 0
75108: PUSH
75109: LD_INT 0
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75118: LD_ADDR_OWVAR 29
75122: PUSH
75123: LD_INT 10
75125: PUSH
75126: LD_INT 12
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: ST_TO_ADDR
// end ;
75133: LD_VAR 0 1
75137: RET
// export function PrepareApeman ( agressivity ) ; begin
75138: LD_INT 0
75140: PPUSH
// uc_side := 0 ;
75141: LD_ADDR_OWVAR 20
75145: PUSH
75146: LD_INT 0
75148: ST_TO_ADDR
// uc_nation := 0 ;
75149: LD_ADDR_OWVAR 21
75153: PUSH
75154: LD_INT 0
75156: ST_TO_ADDR
// hc_sex := sex_male ;
75157: LD_ADDR_OWVAR 27
75161: PUSH
75162: LD_INT 1
75164: ST_TO_ADDR
// hc_class := class_apeman ;
75165: LD_ADDR_OWVAR 28
75169: PUSH
75170: LD_INT 12
75172: ST_TO_ADDR
// hc_gallery :=  ;
75173: LD_ADDR_OWVAR 33
75177: PUSH
75178: LD_STRING 
75180: ST_TO_ADDR
// hc_name :=  ;
75181: LD_ADDR_OWVAR 26
75185: PUSH
75186: LD_STRING 
75188: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75189: LD_ADDR_OWVAR 29
75193: PUSH
75194: LD_INT 10
75196: PUSH
75197: LD_INT 12
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: ST_TO_ADDR
// if agressivity = 0 then
75204: LD_VAR 0 1
75208: PUSH
75209: LD_INT 0
75211: EQUAL
75212: IFFALSE 75224
// hc_agressivity := 0 else
75214: LD_ADDR_OWVAR 35
75218: PUSH
75219: LD_INT 0
75221: ST_TO_ADDR
75222: GO 75245
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75224: LD_ADDR_OWVAR 35
75228: PUSH
75229: LD_VAR 0 1
75233: NEG
75234: PPUSH
75235: LD_VAR 0 1
75239: PPUSH
75240: CALL_OW 12
75244: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75245: LD_ADDR_OWVAR 31
75249: PUSH
75250: LD_INT 0
75252: PPUSH
75253: LD_INT 3
75255: PPUSH
75256: CALL_OW 12
75260: PUSH
75261: LD_INT 0
75263: PPUSH
75264: LD_INT 3
75266: PPUSH
75267: CALL_OW 12
75271: PUSH
75272: LD_INT 0
75274: PUSH
75275: LD_INT 0
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: LIST
75282: LIST
75283: ST_TO_ADDR
// end ;
75284: LD_VAR 0 2
75288: RET
// export function PrepareTiger ( agressivity ) ; begin
75289: LD_INT 0
75291: PPUSH
// uc_side := 0 ;
75292: LD_ADDR_OWVAR 20
75296: PUSH
75297: LD_INT 0
75299: ST_TO_ADDR
// uc_nation := 0 ;
75300: LD_ADDR_OWVAR 21
75304: PUSH
75305: LD_INT 0
75307: ST_TO_ADDR
// InitHc ;
75308: CALL_OW 19
// hc_class := class_tiger ;
75312: LD_ADDR_OWVAR 28
75316: PUSH
75317: LD_INT 14
75319: ST_TO_ADDR
// hc_gallery :=  ;
75320: LD_ADDR_OWVAR 33
75324: PUSH
75325: LD_STRING 
75327: ST_TO_ADDR
// hc_name :=  ;
75328: LD_ADDR_OWVAR 26
75332: PUSH
75333: LD_STRING 
75335: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75336: LD_ADDR_OWVAR 35
75340: PUSH
75341: LD_VAR 0 1
75345: NEG
75346: PPUSH
75347: LD_VAR 0 1
75351: PPUSH
75352: CALL_OW 12
75356: ST_TO_ADDR
// end ;
75357: LD_VAR 0 2
75361: RET
// export function PrepareEnchidna ( ) ; begin
75362: LD_INT 0
75364: PPUSH
// uc_side := 0 ;
75365: LD_ADDR_OWVAR 20
75369: PUSH
75370: LD_INT 0
75372: ST_TO_ADDR
// uc_nation := 0 ;
75373: LD_ADDR_OWVAR 21
75377: PUSH
75378: LD_INT 0
75380: ST_TO_ADDR
// InitHc ;
75381: CALL_OW 19
// hc_class := class_baggie ;
75385: LD_ADDR_OWVAR 28
75389: PUSH
75390: LD_INT 13
75392: ST_TO_ADDR
// hc_gallery :=  ;
75393: LD_ADDR_OWVAR 33
75397: PUSH
75398: LD_STRING 
75400: ST_TO_ADDR
// hc_name :=  ;
75401: LD_ADDR_OWVAR 26
75405: PUSH
75406: LD_STRING 
75408: ST_TO_ADDR
// end ;
75409: LD_VAR 0 1
75413: RET
// export function PrepareFrog ( ) ; begin
75414: LD_INT 0
75416: PPUSH
// uc_side := 0 ;
75417: LD_ADDR_OWVAR 20
75421: PUSH
75422: LD_INT 0
75424: ST_TO_ADDR
// uc_nation := 0 ;
75425: LD_ADDR_OWVAR 21
75429: PUSH
75430: LD_INT 0
75432: ST_TO_ADDR
// InitHc ;
75433: CALL_OW 19
// hc_class := class_frog ;
75437: LD_ADDR_OWVAR 28
75441: PUSH
75442: LD_INT 19
75444: ST_TO_ADDR
// hc_gallery :=  ;
75445: LD_ADDR_OWVAR 33
75449: PUSH
75450: LD_STRING 
75452: ST_TO_ADDR
// hc_name :=  ;
75453: LD_ADDR_OWVAR 26
75457: PUSH
75458: LD_STRING 
75460: ST_TO_ADDR
// end ;
75461: LD_VAR 0 1
75465: RET
// export function PrepareFish ( ) ; begin
75466: LD_INT 0
75468: PPUSH
// uc_side := 0 ;
75469: LD_ADDR_OWVAR 20
75473: PUSH
75474: LD_INT 0
75476: ST_TO_ADDR
// uc_nation := 0 ;
75477: LD_ADDR_OWVAR 21
75481: PUSH
75482: LD_INT 0
75484: ST_TO_ADDR
// InitHc ;
75485: CALL_OW 19
// hc_class := class_fish ;
75489: LD_ADDR_OWVAR 28
75493: PUSH
75494: LD_INT 20
75496: ST_TO_ADDR
// hc_gallery :=  ;
75497: LD_ADDR_OWVAR 33
75501: PUSH
75502: LD_STRING 
75504: ST_TO_ADDR
// hc_name :=  ;
75505: LD_ADDR_OWVAR 26
75509: PUSH
75510: LD_STRING 
75512: ST_TO_ADDR
// end ;
75513: LD_VAR 0 1
75517: RET
// export function PrepareBird ( ) ; begin
75518: LD_INT 0
75520: PPUSH
// uc_side := 0 ;
75521: LD_ADDR_OWVAR 20
75525: PUSH
75526: LD_INT 0
75528: ST_TO_ADDR
// uc_nation := 0 ;
75529: LD_ADDR_OWVAR 21
75533: PUSH
75534: LD_INT 0
75536: ST_TO_ADDR
// InitHc ;
75537: CALL_OW 19
// hc_class := class_phororhacos ;
75541: LD_ADDR_OWVAR 28
75545: PUSH
75546: LD_INT 18
75548: ST_TO_ADDR
// hc_gallery :=  ;
75549: LD_ADDR_OWVAR 33
75553: PUSH
75554: LD_STRING 
75556: ST_TO_ADDR
// hc_name :=  ;
75557: LD_ADDR_OWVAR 26
75561: PUSH
75562: LD_STRING 
75564: ST_TO_ADDR
// end ;
75565: LD_VAR 0 1
75569: RET
// export function PrepareHorse ( ) ; begin
75570: LD_INT 0
75572: PPUSH
// uc_side := 0 ;
75573: LD_ADDR_OWVAR 20
75577: PUSH
75578: LD_INT 0
75580: ST_TO_ADDR
// uc_nation := 0 ;
75581: LD_ADDR_OWVAR 21
75585: PUSH
75586: LD_INT 0
75588: ST_TO_ADDR
// InitHc ;
75589: CALL_OW 19
// hc_class := class_horse ;
75593: LD_ADDR_OWVAR 28
75597: PUSH
75598: LD_INT 21
75600: ST_TO_ADDR
// hc_gallery :=  ;
75601: LD_ADDR_OWVAR 33
75605: PUSH
75606: LD_STRING 
75608: ST_TO_ADDR
// hc_name :=  ;
75609: LD_ADDR_OWVAR 26
75613: PUSH
75614: LD_STRING 
75616: ST_TO_ADDR
// end ;
75617: LD_VAR 0 1
75621: RET
// export function PrepareMastodont ( ) ; begin
75622: LD_INT 0
75624: PPUSH
// uc_side := 0 ;
75625: LD_ADDR_OWVAR 20
75629: PUSH
75630: LD_INT 0
75632: ST_TO_ADDR
// uc_nation := 0 ;
75633: LD_ADDR_OWVAR 21
75637: PUSH
75638: LD_INT 0
75640: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75641: LD_ADDR_OWVAR 37
75645: PUSH
75646: LD_INT 31
75648: ST_TO_ADDR
// vc_control := control_rider ;
75649: LD_ADDR_OWVAR 38
75653: PUSH
75654: LD_INT 4
75656: ST_TO_ADDR
// end ;
75657: LD_VAR 0 1
75661: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75662: LD_INT 0
75664: PPUSH
75665: PPUSH
75666: PPUSH
// uc_side = 0 ;
75667: LD_ADDR_OWVAR 20
75671: PUSH
75672: LD_INT 0
75674: ST_TO_ADDR
// uc_nation = 0 ;
75675: LD_ADDR_OWVAR 21
75679: PUSH
75680: LD_INT 0
75682: ST_TO_ADDR
// InitHc_All ( ) ;
75683: CALL_OW 584
// InitVc ;
75687: CALL_OW 20
// if mastodonts then
75691: LD_VAR 0 6
75695: IFFALSE 75762
// for i = 1 to mastodonts do
75697: LD_ADDR_VAR 0 11
75701: PUSH
75702: DOUBLE
75703: LD_INT 1
75705: DEC
75706: ST_TO_ADDR
75707: LD_VAR 0 6
75711: PUSH
75712: FOR_TO
75713: IFFALSE 75760
// begin vc_chassis := 31 ;
75715: LD_ADDR_OWVAR 37
75719: PUSH
75720: LD_INT 31
75722: ST_TO_ADDR
// vc_control := control_rider ;
75723: LD_ADDR_OWVAR 38
75727: PUSH
75728: LD_INT 4
75730: ST_TO_ADDR
// animal := CreateVehicle ;
75731: LD_ADDR_VAR 0 12
75735: PUSH
75736: CALL_OW 45
75740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75741: LD_VAR 0 12
75745: PPUSH
75746: LD_VAR 0 8
75750: PPUSH
75751: LD_INT 0
75753: PPUSH
75754: CALL 77904 0 3
// end ;
75758: GO 75712
75760: POP
75761: POP
// if horses then
75762: LD_VAR 0 5
75766: IFFALSE 75833
// for i = 1 to horses do
75768: LD_ADDR_VAR 0 11
75772: PUSH
75773: DOUBLE
75774: LD_INT 1
75776: DEC
75777: ST_TO_ADDR
75778: LD_VAR 0 5
75782: PUSH
75783: FOR_TO
75784: IFFALSE 75831
// begin hc_class := 21 ;
75786: LD_ADDR_OWVAR 28
75790: PUSH
75791: LD_INT 21
75793: ST_TO_ADDR
// hc_gallery :=  ;
75794: LD_ADDR_OWVAR 33
75798: PUSH
75799: LD_STRING 
75801: ST_TO_ADDR
// animal := CreateHuman ;
75802: LD_ADDR_VAR 0 12
75806: PUSH
75807: CALL_OW 44
75811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75812: LD_VAR 0 12
75816: PPUSH
75817: LD_VAR 0 8
75821: PPUSH
75822: LD_INT 0
75824: PPUSH
75825: CALL 77904 0 3
// end ;
75829: GO 75783
75831: POP
75832: POP
// if birds then
75833: LD_VAR 0 1
75837: IFFALSE 75904
// for i = 1 to birds do
75839: LD_ADDR_VAR 0 11
75843: PUSH
75844: DOUBLE
75845: LD_INT 1
75847: DEC
75848: ST_TO_ADDR
75849: LD_VAR 0 1
75853: PUSH
75854: FOR_TO
75855: IFFALSE 75902
// begin hc_class := 18 ;
75857: LD_ADDR_OWVAR 28
75861: PUSH
75862: LD_INT 18
75864: ST_TO_ADDR
// hc_gallery =  ;
75865: LD_ADDR_OWVAR 33
75869: PUSH
75870: LD_STRING 
75872: ST_TO_ADDR
// animal := CreateHuman ;
75873: LD_ADDR_VAR 0 12
75877: PUSH
75878: CALL_OW 44
75882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75883: LD_VAR 0 12
75887: PPUSH
75888: LD_VAR 0 8
75892: PPUSH
75893: LD_INT 0
75895: PPUSH
75896: CALL 77904 0 3
// end ;
75900: GO 75854
75902: POP
75903: POP
// if tigers then
75904: LD_VAR 0 2
75908: IFFALSE 75992
// for i = 1 to tigers do
75910: LD_ADDR_VAR 0 11
75914: PUSH
75915: DOUBLE
75916: LD_INT 1
75918: DEC
75919: ST_TO_ADDR
75920: LD_VAR 0 2
75924: PUSH
75925: FOR_TO
75926: IFFALSE 75990
// begin hc_class = class_tiger ;
75928: LD_ADDR_OWVAR 28
75932: PUSH
75933: LD_INT 14
75935: ST_TO_ADDR
// hc_gallery =  ;
75936: LD_ADDR_OWVAR 33
75940: PUSH
75941: LD_STRING 
75943: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75944: LD_ADDR_OWVAR 35
75948: PUSH
75949: LD_INT 7
75951: NEG
75952: PPUSH
75953: LD_INT 7
75955: PPUSH
75956: CALL_OW 12
75960: ST_TO_ADDR
// animal := CreateHuman ;
75961: LD_ADDR_VAR 0 12
75965: PUSH
75966: CALL_OW 44
75970: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75971: LD_VAR 0 12
75975: PPUSH
75976: LD_VAR 0 8
75980: PPUSH
75981: LD_INT 0
75983: PPUSH
75984: CALL 77904 0 3
// end ;
75988: GO 75925
75990: POP
75991: POP
// if apemans then
75992: LD_VAR 0 3
75996: IFFALSE 76119
// for i = 1 to apemans do
75998: LD_ADDR_VAR 0 11
76002: PUSH
76003: DOUBLE
76004: LD_INT 1
76006: DEC
76007: ST_TO_ADDR
76008: LD_VAR 0 3
76012: PUSH
76013: FOR_TO
76014: IFFALSE 76117
// begin hc_class = class_apeman ;
76016: LD_ADDR_OWVAR 28
76020: PUSH
76021: LD_INT 12
76023: ST_TO_ADDR
// hc_gallery =  ;
76024: LD_ADDR_OWVAR 33
76028: PUSH
76029: LD_STRING 
76031: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76032: LD_ADDR_OWVAR 35
76036: PUSH
76037: LD_INT 2
76039: NEG
76040: PPUSH
76041: LD_INT 2
76043: PPUSH
76044: CALL_OW 12
76048: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76049: LD_ADDR_OWVAR 31
76053: PUSH
76054: LD_INT 1
76056: PPUSH
76057: LD_INT 3
76059: PPUSH
76060: CALL_OW 12
76064: PUSH
76065: LD_INT 1
76067: PPUSH
76068: LD_INT 3
76070: PPUSH
76071: CALL_OW 12
76075: PUSH
76076: LD_INT 0
76078: PUSH
76079: LD_INT 0
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: ST_TO_ADDR
// animal := CreateHuman ;
76088: LD_ADDR_VAR 0 12
76092: PUSH
76093: CALL_OW 44
76097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76098: LD_VAR 0 12
76102: PPUSH
76103: LD_VAR 0 8
76107: PPUSH
76108: LD_INT 0
76110: PPUSH
76111: CALL 77904 0 3
// end ;
76115: GO 76013
76117: POP
76118: POP
// if enchidnas then
76119: LD_VAR 0 4
76123: IFFALSE 76190
// for i = 1 to enchidnas do
76125: LD_ADDR_VAR 0 11
76129: PUSH
76130: DOUBLE
76131: LD_INT 1
76133: DEC
76134: ST_TO_ADDR
76135: LD_VAR 0 4
76139: PUSH
76140: FOR_TO
76141: IFFALSE 76188
// begin hc_class = 13 ;
76143: LD_ADDR_OWVAR 28
76147: PUSH
76148: LD_INT 13
76150: ST_TO_ADDR
// hc_gallery =  ;
76151: LD_ADDR_OWVAR 33
76155: PUSH
76156: LD_STRING 
76158: ST_TO_ADDR
// animal := CreateHuman ;
76159: LD_ADDR_VAR 0 12
76163: PUSH
76164: CALL_OW 44
76168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76169: LD_VAR 0 12
76173: PPUSH
76174: LD_VAR 0 8
76178: PPUSH
76179: LD_INT 0
76181: PPUSH
76182: CALL 77904 0 3
// end ;
76186: GO 76140
76188: POP
76189: POP
// if fishes then
76190: LD_VAR 0 7
76194: IFFALSE 76261
// for i = 1 to fishes do
76196: LD_ADDR_VAR 0 11
76200: PUSH
76201: DOUBLE
76202: LD_INT 1
76204: DEC
76205: ST_TO_ADDR
76206: LD_VAR 0 7
76210: PUSH
76211: FOR_TO
76212: IFFALSE 76259
// begin hc_class = 20 ;
76214: LD_ADDR_OWVAR 28
76218: PUSH
76219: LD_INT 20
76221: ST_TO_ADDR
// hc_gallery =  ;
76222: LD_ADDR_OWVAR 33
76226: PUSH
76227: LD_STRING 
76229: ST_TO_ADDR
// animal := CreateHuman ;
76230: LD_ADDR_VAR 0 12
76234: PUSH
76235: CALL_OW 44
76239: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76240: LD_VAR 0 12
76244: PPUSH
76245: LD_VAR 0 9
76249: PPUSH
76250: LD_INT 0
76252: PPUSH
76253: CALL 77904 0 3
// end ;
76257: GO 76211
76259: POP
76260: POP
// end ;
76261: LD_VAR 0 10
76265: RET
// export function WantHeal ( sci , unit ) ; begin
76266: LD_INT 0
76268: PPUSH
// if GetTaskList ( sci ) > 0 then
76269: LD_VAR 0 1
76273: PPUSH
76274: CALL_OW 437
76278: PUSH
76279: LD_INT 0
76281: GREATER
76282: IFFALSE 76354
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76284: LD_VAR 0 1
76288: PPUSH
76289: CALL_OW 437
76293: PUSH
76294: LD_INT 1
76296: ARRAY
76297: PUSH
76298: LD_INT 1
76300: ARRAY
76301: PUSH
76302: LD_STRING l
76304: EQUAL
76305: IFFALSE 76332
76307: PUSH
76308: LD_VAR 0 1
76312: PPUSH
76313: CALL_OW 437
76317: PUSH
76318: LD_INT 1
76320: ARRAY
76321: PUSH
76322: LD_INT 4
76324: ARRAY
76325: PUSH
76326: LD_VAR 0 2
76330: EQUAL
76331: AND
76332: IFFALSE 76344
// result := true else
76334: LD_ADDR_VAR 0 3
76338: PUSH
76339: LD_INT 1
76341: ST_TO_ADDR
76342: GO 76352
// result := false ;
76344: LD_ADDR_VAR 0 3
76348: PUSH
76349: LD_INT 0
76351: ST_TO_ADDR
// end else
76352: GO 76362
// result := false ;
76354: LD_ADDR_VAR 0 3
76358: PUSH
76359: LD_INT 0
76361: ST_TO_ADDR
// end ;
76362: LD_VAR 0 3
76366: RET
// export function HealTarget ( sci ) ; begin
76367: LD_INT 0
76369: PPUSH
// if not sci then
76370: LD_VAR 0 1
76374: NOT
76375: IFFALSE 76379
// exit ;
76377: GO 76444
// result := 0 ;
76379: LD_ADDR_VAR 0 2
76383: PUSH
76384: LD_INT 0
76386: ST_TO_ADDR
// if GetTaskList ( sci ) then
76387: LD_VAR 0 1
76391: PPUSH
76392: CALL_OW 437
76396: IFFALSE 76444
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76398: LD_VAR 0 1
76402: PPUSH
76403: CALL_OW 437
76407: PUSH
76408: LD_INT 1
76410: ARRAY
76411: PUSH
76412: LD_INT 1
76414: ARRAY
76415: PUSH
76416: LD_STRING l
76418: EQUAL
76419: IFFALSE 76444
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76421: LD_ADDR_VAR 0 2
76425: PUSH
76426: LD_VAR 0 1
76430: PPUSH
76431: CALL_OW 437
76435: PUSH
76436: LD_INT 1
76438: ARRAY
76439: PUSH
76440: LD_INT 4
76442: ARRAY
76443: ST_TO_ADDR
// end ;
76444: LD_VAR 0 2
76448: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76449: LD_INT 0
76451: PPUSH
76452: PPUSH
76453: PPUSH
76454: PPUSH
// if not base_units then
76455: LD_VAR 0 1
76459: NOT
76460: IFFALSE 76464
// exit ;
76462: GO 76551
// result := false ;
76464: LD_ADDR_VAR 0 2
76468: PUSH
76469: LD_INT 0
76471: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76472: LD_ADDR_VAR 0 5
76476: PUSH
76477: LD_VAR 0 1
76481: PPUSH
76482: LD_INT 21
76484: PUSH
76485: LD_INT 3
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PPUSH
76492: CALL_OW 72
76496: ST_TO_ADDR
// if not tmp then
76497: LD_VAR 0 5
76501: NOT
76502: IFFALSE 76506
// exit ;
76504: GO 76551
// for i in tmp do
76506: LD_ADDR_VAR 0 3
76510: PUSH
76511: LD_VAR 0 5
76515: PUSH
76516: FOR_IN
76517: IFFALSE 76549
// begin result := EnemyInRange ( i , 22 ) ;
76519: LD_ADDR_VAR 0 2
76523: PUSH
76524: LD_VAR 0 3
76528: PPUSH
76529: LD_INT 22
76531: PPUSH
76532: CALL 73966 0 2
76536: ST_TO_ADDR
// if result then
76537: LD_VAR 0 2
76541: IFFALSE 76547
// exit ;
76543: POP
76544: POP
76545: GO 76551
// end ;
76547: GO 76516
76549: POP
76550: POP
// end ;
76551: LD_VAR 0 2
76555: RET
// export function FilterByTag ( units , tag ) ; begin
76556: LD_INT 0
76558: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76559: LD_ADDR_VAR 0 3
76563: PUSH
76564: LD_VAR 0 1
76568: PPUSH
76569: LD_INT 120
76571: PUSH
76572: LD_VAR 0 2
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PPUSH
76581: CALL_OW 72
76585: ST_TO_ADDR
// end ;
76586: LD_VAR 0 3
76590: RET
// export function IsDriver ( un ) ; begin
76591: LD_INT 0
76593: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76594: LD_ADDR_VAR 0 2
76598: PUSH
76599: LD_VAR 0 1
76603: PUSH
76604: LD_INT 55
76606: PUSH
76607: EMPTY
76608: LIST
76609: PPUSH
76610: CALL_OW 69
76614: IN
76615: ST_TO_ADDR
// end ;
76616: LD_VAR 0 2
76620: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76621: LD_INT 0
76623: PPUSH
76624: PPUSH
// list := [ ] ;
76625: LD_ADDR_VAR 0 5
76629: PUSH
76630: EMPTY
76631: ST_TO_ADDR
// case d of 0 :
76632: LD_VAR 0 3
76636: PUSH
76637: LD_INT 0
76639: DOUBLE
76640: EQUAL
76641: IFTRUE 76645
76643: GO 76778
76645: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76646: LD_ADDR_VAR 0 5
76650: PUSH
76651: LD_VAR 0 1
76655: PUSH
76656: LD_INT 4
76658: MINUS
76659: PUSH
76660: LD_VAR 0 2
76664: PUSH
76665: LD_INT 4
76667: MINUS
76668: PUSH
76669: LD_INT 2
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: LIST
76676: PUSH
76677: LD_VAR 0 1
76681: PUSH
76682: LD_INT 3
76684: MINUS
76685: PUSH
76686: LD_VAR 0 2
76690: PUSH
76691: LD_INT 1
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: LIST
76698: PUSH
76699: LD_VAR 0 1
76703: PUSH
76704: LD_INT 4
76706: PLUS
76707: PUSH
76708: LD_VAR 0 2
76712: PUSH
76713: LD_INT 4
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: LIST
76720: PUSH
76721: LD_VAR 0 1
76725: PUSH
76726: LD_INT 3
76728: PLUS
76729: PUSH
76730: LD_VAR 0 2
76734: PUSH
76735: LD_INT 3
76737: PLUS
76738: PUSH
76739: LD_INT 5
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: LIST
76746: PUSH
76747: LD_VAR 0 1
76751: PUSH
76752: LD_VAR 0 2
76756: PUSH
76757: LD_INT 4
76759: PLUS
76760: PUSH
76761: LD_INT 0
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: LIST
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: LIST
76775: ST_TO_ADDR
// end ; 1 :
76776: GO 77476
76778: LD_INT 1
76780: DOUBLE
76781: EQUAL
76782: IFTRUE 76786
76784: GO 76919
76786: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76787: LD_ADDR_VAR 0 5
76791: PUSH
76792: LD_VAR 0 1
76796: PUSH
76797: LD_VAR 0 2
76801: PUSH
76802: LD_INT 4
76804: MINUS
76805: PUSH
76806: LD_INT 3
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: LIST
76813: PUSH
76814: LD_VAR 0 1
76818: PUSH
76819: LD_INT 3
76821: MINUS
76822: PUSH
76823: LD_VAR 0 2
76827: PUSH
76828: LD_INT 3
76830: MINUS
76831: PUSH
76832: LD_INT 2
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: LIST
76839: PUSH
76840: LD_VAR 0 1
76844: PUSH
76845: LD_INT 4
76847: MINUS
76848: PUSH
76849: LD_VAR 0 2
76853: PUSH
76854: LD_INT 1
76856: PUSH
76857: EMPTY
76858: LIST
76859: LIST
76860: LIST
76861: PUSH
76862: LD_VAR 0 1
76866: PUSH
76867: LD_VAR 0 2
76871: PUSH
76872: LD_INT 3
76874: PLUS
76875: PUSH
76876: LD_INT 0
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: LIST
76883: PUSH
76884: LD_VAR 0 1
76888: PUSH
76889: LD_INT 4
76891: PLUS
76892: PUSH
76893: LD_VAR 0 2
76897: PUSH
76898: LD_INT 4
76900: PLUS
76901: PUSH
76902: LD_INT 5
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: LIST
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: ST_TO_ADDR
// end ; 2 :
76917: GO 77476
76919: LD_INT 2
76921: DOUBLE
76922: EQUAL
76923: IFTRUE 76927
76925: GO 77056
76927: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76928: LD_ADDR_VAR 0 5
76932: PUSH
76933: LD_VAR 0 1
76937: PUSH
76938: LD_VAR 0 2
76942: PUSH
76943: LD_INT 3
76945: MINUS
76946: PUSH
76947: LD_INT 3
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: LIST
76954: PUSH
76955: LD_VAR 0 1
76959: PUSH
76960: LD_INT 4
76962: PLUS
76963: PUSH
76964: LD_VAR 0 2
76968: PUSH
76969: LD_INT 4
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: LIST
76976: PUSH
76977: LD_VAR 0 1
76981: PUSH
76982: LD_VAR 0 2
76986: PUSH
76987: LD_INT 4
76989: PLUS
76990: PUSH
76991: LD_INT 0
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: LIST
76998: PUSH
76999: LD_VAR 0 1
77003: PUSH
77004: LD_INT 3
77006: MINUS
77007: PUSH
77008: LD_VAR 0 2
77012: PUSH
77013: LD_INT 1
77015: PUSH
77016: EMPTY
77017: LIST
77018: LIST
77019: LIST
77020: PUSH
77021: LD_VAR 0 1
77025: PUSH
77026: LD_INT 4
77028: MINUS
77029: PUSH
77030: LD_VAR 0 2
77034: PUSH
77035: LD_INT 4
77037: MINUS
77038: PUSH
77039: LD_INT 2
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: LIST
77046: PUSH
77047: EMPTY
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: ST_TO_ADDR
// end ; 3 :
77054: GO 77476
77056: LD_INT 3
77058: DOUBLE
77059: EQUAL
77060: IFTRUE 77064
77062: GO 77197
77064: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77065: LD_ADDR_VAR 0 5
77069: PUSH
77070: LD_VAR 0 1
77074: PUSH
77075: LD_INT 3
77077: PLUS
77078: PUSH
77079: LD_VAR 0 2
77083: PUSH
77084: LD_INT 4
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: LIST
77091: PUSH
77092: LD_VAR 0 1
77096: PUSH
77097: LD_INT 4
77099: PLUS
77100: PUSH
77101: LD_VAR 0 2
77105: PUSH
77106: LD_INT 4
77108: PLUS
77109: PUSH
77110: LD_INT 5
77112: PUSH
77113: EMPTY
77114: LIST
77115: LIST
77116: LIST
77117: PUSH
77118: LD_VAR 0 1
77122: PUSH
77123: LD_INT 4
77125: MINUS
77126: PUSH
77127: LD_VAR 0 2
77131: PUSH
77132: LD_INT 1
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: LIST
77139: PUSH
77140: LD_VAR 0 1
77144: PUSH
77145: LD_VAR 0 2
77149: PUSH
77150: LD_INT 4
77152: MINUS
77153: PUSH
77154: LD_INT 3
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: LIST
77161: PUSH
77162: LD_VAR 0 1
77166: PUSH
77167: LD_INT 3
77169: MINUS
77170: PUSH
77171: LD_VAR 0 2
77175: PUSH
77176: LD_INT 3
77178: MINUS
77179: PUSH
77180: LD_INT 2
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: LIST
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: ST_TO_ADDR
// end ; 4 :
77195: GO 77476
77197: LD_INT 4
77199: DOUBLE
77200: EQUAL
77201: IFTRUE 77205
77203: GO 77338
77205: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77206: LD_ADDR_VAR 0 5
77210: PUSH
77211: LD_VAR 0 1
77215: PUSH
77216: LD_VAR 0 2
77220: PUSH
77221: LD_INT 4
77223: PLUS
77224: PUSH
77225: LD_INT 0
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: LIST
77232: PUSH
77233: LD_VAR 0 1
77237: PUSH
77238: LD_INT 3
77240: PLUS
77241: PUSH
77242: LD_VAR 0 2
77246: PUSH
77247: LD_INT 3
77249: PLUS
77250: PUSH
77251: LD_INT 5
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: LIST
77258: PUSH
77259: LD_VAR 0 1
77263: PUSH
77264: LD_INT 4
77266: PLUS
77267: PUSH
77268: LD_VAR 0 2
77272: PUSH
77273: LD_INT 4
77275: PUSH
77276: EMPTY
77277: LIST
77278: LIST
77279: LIST
77280: PUSH
77281: LD_VAR 0 1
77285: PUSH
77286: LD_VAR 0 2
77290: PUSH
77291: LD_INT 3
77293: MINUS
77294: PUSH
77295: LD_INT 3
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: LIST
77302: PUSH
77303: LD_VAR 0 1
77307: PUSH
77308: LD_INT 4
77310: MINUS
77311: PUSH
77312: LD_VAR 0 2
77316: PUSH
77317: LD_INT 4
77319: MINUS
77320: PUSH
77321: LD_INT 2
77323: PUSH
77324: EMPTY
77325: LIST
77326: LIST
77327: LIST
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: ST_TO_ADDR
// end ; 5 :
77336: GO 77476
77338: LD_INT 5
77340: DOUBLE
77341: EQUAL
77342: IFTRUE 77346
77344: GO 77475
77346: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77347: LD_ADDR_VAR 0 5
77351: PUSH
77352: LD_VAR 0 1
77356: PUSH
77357: LD_INT 4
77359: MINUS
77360: PUSH
77361: LD_VAR 0 2
77365: PUSH
77366: LD_INT 1
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: LIST
77373: PUSH
77374: LD_VAR 0 1
77378: PUSH
77379: LD_VAR 0 2
77383: PUSH
77384: LD_INT 4
77386: MINUS
77387: PUSH
77388: LD_INT 3
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: LIST
77395: PUSH
77396: LD_VAR 0 1
77400: PUSH
77401: LD_INT 4
77403: PLUS
77404: PUSH
77405: LD_VAR 0 2
77409: PUSH
77410: LD_INT 4
77412: PLUS
77413: PUSH
77414: LD_INT 5
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: LIST
77421: PUSH
77422: LD_VAR 0 1
77426: PUSH
77427: LD_INT 3
77429: PLUS
77430: PUSH
77431: LD_VAR 0 2
77435: PUSH
77436: LD_INT 4
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: LIST
77443: PUSH
77444: LD_VAR 0 1
77448: PUSH
77449: LD_VAR 0 2
77453: PUSH
77454: LD_INT 3
77456: PLUS
77457: PUSH
77458: LD_INT 0
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: LIST
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: ST_TO_ADDR
// end ; end ;
77473: GO 77476
77475: POP
// result := list ;
77476: LD_ADDR_VAR 0 4
77480: PUSH
77481: LD_VAR 0 5
77485: ST_TO_ADDR
// end ;
77486: LD_VAR 0 4
77490: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77491: LD_INT 0
77493: PPUSH
77494: PPUSH
77495: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77496: LD_VAR 0 1
77500: NOT
77501: IFTRUE 77529
77503: PUSH
77504: LD_VAR 0 2
77508: PUSH
77509: LD_INT 1
77511: PUSH
77512: LD_INT 2
77514: PUSH
77515: LD_INT 3
77517: PUSH
77518: LD_INT 4
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: IN
77527: NOT
77528: OR
77529: IFFALSE 77533
// exit ;
77531: GO 77616
// tmp := [ ] ;
77533: LD_ADDR_VAR 0 5
77537: PUSH
77538: EMPTY
77539: ST_TO_ADDR
// for i in units do
77540: LD_ADDR_VAR 0 4
77544: PUSH
77545: LD_VAR 0 1
77549: PUSH
77550: FOR_IN
77551: IFFALSE 77585
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77553: LD_ADDR_VAR 0 5
77557: PUSH
77558: LD_VAR 0 5
77562: PPUSH
77563: LD_VAR 0 4
77567: PPUSH
77568: LD_VAR 0 2
77572: PPUSH
77573: CALL_OW 259
77577: PPUSH
77578: CALL 79011 0 2
77582: ST_TO_ADDR
77583: GO 77550
77585: POP
77586: POP
// if not tmp then
77587: LD_VAR 0 5
77591: NOT
77592: IFFALSE 77596
// exit ;
77594: GO 77616
// result := SortListByListDesc ( units , tmp ) ;
77596: LD_ADDR_VAR 0 3
77600: PUSH
77601: LD_VAR 0 1
77605: PPUSH
77606: LD_VAR 0 5
77610: PPUSH
77611: CALL_OW 77
77615: ST_TO_ADDR
// end ;
77616: LD_VAR 0 3
77620: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77621: LD_INT 0
77623: PPUSH
77624: PPUSH
77625: PPUSH
// result := false ;
77626: LD_ADDR_VAR 0 3
77630: PUSH
77631: LD_INT 0
77633: ST_TO_ADDR
// if not building then
77634: LD_VAR 0 2
77638: NOT
77639: IFFALSE 77643
// exit ;
77641: GO 77787
// x := GetX ( building ) ;
77643: LD_ADDR_VAR 0 4
77647: PUSH
77648: LD_VAR 0 2
77652: PPUSH
77653: CALL_OW 250
77657: ST_TO_ADDR
// y := GetY ( building ) ;
77658: LD_ADDR_VAR 0 5
77662: PUSH
77663: LD_VAR 0 2
77667: PPUSH
77668: CALL_OW 251
77672: ST_TO_ADDR
// if not x or not y then
77673: LD_VAR 0 4
77677: NOT
77678: IFTRUE 77687
77680: PUSH
77681: LD_VAR 0 5
77685: NOT
77686: OR
77687: IFFALSE 77691
// exit ;
77689: GO 77787
// if GetTaskList ( unit ) then
77691: LD_VAR 0 1
77695: PPUSH
77696: CALL_OW 437
77700: IFFALSE 77787
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77702: LD_STRING e
77704: PUSH
77705: LD_VAR 0 1
77709: PPUSH
77710: CALL_OW 437
77714: PUSH
77715: LD_INT 1
77717: ARRAY
77718: PUSH
77719: LD_INT 1
77721: ARRAY
77722: EQUAL
77723: IFFALSE 77750
77725: PUSH
77726: LD_VAR 0 4
77730: PUSH
77731: LD_VAR 0 1
77735: PPUSH
77736: CALL_OW 437
77740: PUSH
77741: LD_INT 1
77743: ARRAY
77744: PUSH
77745: LD_INT 2
77747: ARRAY
77748: EQUAL
77749: AND
77750: IFFALSE 77777
77752: PUSH
77753: LD_VAR 0 5
77757: PUSH
77758: LD_VAR 0 1
77762: PPUSH
77763: CALL_OW 437
77767: PUSH
77768: LD_INT 1
77770: ARRAY
77771: PUSH
77772: LD_INT 3
77774: ARRAY
77775: EQUAL
77776: AND
77777: IFFALSE 77787
// result := true end ;
77779: LD_ADDR_VAR 0 3
77783: PUSH
77784: LD_INT 1
77786: ST_TO_ADDR
// end ;
77787: LD_VAR 0 3
77791: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77792: LD_INT 0
77794: PPUSH
// result := false ;
77795: LD_ADDR_VAR 0 4
77799: PUSH
77800: LD_INT 0
77802: ST_TO_ADDR
// if GetTaskList ( unit ) then
77803: LD_VAR 0 1
77807: PPUSH
77808: CALL_OW 437
77812: IFFALSE 77899
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77814: LD_STRING M
77816: PUSH
77817: LD_VAR 0 1
77821: PPUSH
77822: CALL_OW 437
77826: PUSH
77827: LD_INT 1
77829: ARRAY
77830: PUSH
77831: LD_INT 1
77833: ARRAY
77834: EQUAL
77835: IFFALSE 77862
77837: PUSH
77838: LD_VAR 0 2
77842: PUSH
77843: LD_VAR 0 1
77847: PPUSH
77848: CALL_OW 437
77852: PUSH
77853: LD_INT 1
77855: ARRAY
77856: PUSH
77857: LD_INT 2
77859: ARRAY
77860: EQUAL
77861: AND
77862: IFFALSE 77889
77864: PUSH
77865: LD_VAR 0 3
77869: PUSH
77870: LD_VAR 0 1
77874: PPUSH
77875: CALL_OW 437
77879: PUSH
77880: LD_INT 1
77882: ARRAY
77883: PUSH
77884: LD_INT 3
77886: ARRAY
77887: EQUAL
77888: AND
77889: IFFALSE 77899
// result := true ;
77891: LD_ADDR_VAR 0 4
77895: PUSH
77896: LD_INT 1
77898: ST_TO_ADDR
// end ; end ;
77899: LD_VAR 0 4
77903: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77904: LD_INT 0
77906: PPUSH
77907: PPUSH
77908: PPUSH
77909: PPUSH
// if not unit or not area then
77910: LD_VAR 0 1
77914: NOT
77915: IFTRUE 77924
77917: PUSH
77918: LD_VAR 0 2
77922: NOT
77923: OR
77924: IFFALSE 77928
// exit ;
77926: GO 78104
// tmp := AreaToList ( area , i ) ;
77928: LD_ADDR_VAR 0 6
77932: PUSH
77933: LD_VAR 0 2
77937: PPUSH
77938: LD_VAR 0 5
77942: PPUSH
77943: CALL_OW 517
77947: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77948: LD_ADDR_VAR 0 5
77952: PUSH
77953: DOUBLE
77954: LD_INT 1
77956: DEC
77957: ST_TO_ADDR
77958: LD_VAR 0 6
77962: PUSH
77963: LD_INT 1
77965: ARRAY
77966: PUSH
77967: FOR_TO
77968: IFFALSE 78102
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77970: LD_ADDR_VAR 0 7
77974: PUSH
77975: LD_VAR 0 6
77979: PUSH
77980: LD_INT 1
77982: ARRAY
77983: PUSH
77984: LD_VAR 0 5
77988: ARRAY
77989: PUSH
77990: LD_VAR 0 6
77994: PUSH
77995: LD_INT 2
77997: ARRAY
77998: PUSH
77999: LD_VAR 0 5
78003: ARRAY
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78009: LD_INT 92
78011: PUSH
78012: LD_VAR 0 7
78016: PUSH
78017: LD_INT 1
78019: ARRAY
78020: PUSH
78021: LD_VAR 0 7
78025: PUSH
78026: LD_INT 2
78028: ARRAY
78029: PUSH
78030: LD_INT 2
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: PPUSH
78039: CALL_OW 69
78043: PUSH
78044: LD_INT 0
78046: EQUAL
78047: IFFALSE 78100
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78049: LD_VAR 0 1
78053: PPUSH
78054: LD_VAR 0 7
78058: PUSH
78059: LD_INT 1
78061: ARRAY
78062: PPUSH
78063: LD_VAR 0 7
78067: PUSH
78068: LD_INT 2
78070: ARRAY
78071: PPUSH
78072: LD_VAR 0 3
78076: PPUSH
78077: CALL_OW 48
// result := IsPlaced ( unit ) ;
78081: LD_ADDR_VAR 0 4
78085: PUSH
78086: LD_VAR 0 1
78090: PPUSH
78091: CALL_OW 305
78095: ST_TO_ADDR
// exit ;
78096: POP
78097: POP
78098: GO 78104
// end ; end ;
78100: GO 77967
78102: POP
78103: POP
// end ;
78104: LD_VAR 0 4
78108: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78109: LD_INT 0
78111: PPUSH
78112: PPUSH
78113: PPUSH
// if not side or side > 8 then
78114: LD_VAR 0 1
78118: NOT
78119: IFTRUE 78131
78121: PUSH
78122: LD_VAR 0 1
78126: PUSH
78127: LD_INT 8
78129: GREATER
78130: OR
78131: IFFALSE 78135
// exit ;
78133: GO 78322
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78135: LD_ADDR_VAR 0 4
78139: PUSH
78140: LD_INT 22
78142: PUSH
78143: LD_VAR 0 1
78147: PUSH
78148: EMPTY
78149: LIST
78150: LIST
78151: PUSH
78152: LD_INT 21
78154: PUSH
78155: LD_INT 3
78157: PUSH
78158: EMPTY
78159: LIST
78160: LIST
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PPUSH
78166: CALL_OW 69
78170: ST_TO_ADDR
// if not tmp then
78171: LD_VAR 0 4
78175: NOT
78176: IFFALSE 78180
// exit ;
78178: GO 78322
// enable_addtolog := true ;
78180: LD_ADDR_OWVAR 81
78184: PUSH
78185: LD_INT 1
78187: ST_TO_ADDR
// AddToLog ( [ ) ;
78188: LD_STRING [
78190: PPUSH
78191: CALL_OW 561
// for i in tmp do
78195: LD_ADDR_VAR 0 3
78199: PUSH
78200: LD_VAR 0 4
78204: PUSH
78205: FOR_IN
78206: IFFALSE 78313
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78208: LD_STRING [
78210: PUSH
78211: LD_VAR 0 3
78215: PPUSH
78216: CALL_OW 266
78220: STR
78221: PUSH
78222: LD_STRING , 
78224: STR
78225: PUSH
78226: LD_VAR 0 3
78230: PPUSH
78231: CALL_OW 250
78235: STR
78236: PUSH
78237: LD_STRING , 
78239: STR
78240: PUSH
78241: LD_VAR 0 3
78245: PPUSH
78246: CALL_OW 251
78250: STR
78251: PUSH
78252: LD_STRING , 
78254: STR
78255: PUSH
78256: LD_VAR 0 3
78260: PPUSH
78261: CALL_OW 254
78265: STR
78266: PUSH
78267: LD_STRING , 
78269: STR
78270: PUSH
78271: LD_VAR 0 3
78275: PPUSH
78276: LD_INT 1
78278: PPUSH
78279: CALL_OW 268
78283: STR
78284: PUSH
78285: LD_STRING , 
78287: STR
78288: PUSH
78289: LD_VAR 0 3
78293: PPUSH
78294: LD_INT 2
78296: PPUSH
78297: CALL_OW 268
78301: STR
78302: PUSH
78303: LD_STRING ],
78305: STR
78306: PPUSH
78307: CALL_OW 561
// end ;
78311: GO 78205
78313: POP
78314: POP
// AddToLog ( ]; ) ;
78315: LD_STRING ];
78317: PPUSH
78318: CALL_OW 561
// end ;
78322: LD_VAR 0 2
78326: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78327: LD_INT 0
78329: PPUSH
78330: PPUSH
78331: PPUSH
78332: PPUSH
78333: PPUSH
// if not area or not rate or not max then
78334: LD_VAR 0 1
78338: NOT
78339: IFTRUE 78348
78341: PUSH
78342: LD_VAR 0 2
78346: NOT
78347: OR
78348: IFTRUE 78357
78350: PUSH
78351: LD_VAR 0 4
78355: NOT
78356: OR
78357: IFFALSE 78361
// exit ;
78359: GO 78550
// while 1 do
78361: LD_INT 1
78363: IFFALSE 78550
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78365: LD_ADDR_VAR 0 9
78369: PUSH
78370: LD_VAR 0 1
78374: PPUSH
78375: LD_INT 1
78377: PPUSH
78378: CALL_OW 287
78382: PUSH
78383: LD_INT 10
78385: MUL
78386: ST_TO_ADDR
// r := rate / 10 ;
78387: LD_ADDR_VAR 0 7
78391: PUSH
78392: LD_VAR 0 2
78396: PUSH
78397: LD_INT 10
78399: DIVREAL
78400: ST_TO_ADDR
// time := 1 1$00 ;
78401: LD_ADDR_VAR 0 8
78405: PUSH
78406: LD_INT 2100
78408: ST_TO_ADDR
// if amount < min then
78409: LD_VAR 0 9
78413: PUSH
78414: LD_VAR 0 3
78418: LESS
78419: IFFALSE 78437
// r := r * 2 else
78421: LD_ADDR_VAR 0 7
78425: PUSH
78426: LD_VAR 0 7
78430: PUSH
78431: LD_INT 2
78433: MUL
78434: ST_TO_ADDR
78435: GO 78463
// if amount > max then
78437: LD_VAR 0 9
78441: PUSH
78442: LD_VAR 0 4
78446: GREATER
78447: IFFALSE 78463
// r := r / 2 ;
78449: LD_ADDR_VAR 0 7
78453: PUSH
78454: LD_VAR 0 7
78458: PUSH
78459: LD_INT 2
78461: DIVREAL
78462: ST_TO_ADDR
// time := time / r ;
78463: LD_ADDR_VAR 0 8
78467: PUSH
78468: LD_VAR 0 8
78472: PUSH
78473: LD_VAR 0 7
78477: DIVREAL
78478: ST_TO_ADDR
// if time < 0 then
78479: LD_VAR 0 8
78483: PUSH
78484: LD_INT 0
78486: LESS
78487: IFFALSE 78504
// time := time * - 1 ;
78489: LD_ADDR_VAR 0 8
78493: PUSH
78494: LD_VAR 0 8
78498: PUSH
78499: LD_INT 1
78501: NEG
78502: MUL
78503: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78504: LD_VAR 0 8
78508: PUSH
78509: LD_INT 35
78511: PPUSH
78512: LD_INT 875
78514: PPUSH
78515: CALL_OW 12
78519: PLUS
78520: PPUSH
78521: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78525: LD_INT 1
78527: PPUSH
78528: LD_INT 5
78530: PPUSH
78531: CALL_OW 12
78535: PPUSH
78536: LD_VAR 0 1
78540: PPUSH
78541: LD_INT 1
78543: PPUSH
78544: CALL_OW 55
// end ;
78548: GO 78361
// end ;
78550: LD_VAR 0 5
78554: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78555: LD_INT 0
78557: PPUSH
78558: PPUSH
78559: PPUSH
78560: PPUSH
78561: PPUSH
78562: PPUSH
78563: PPUSH
78564: PPUSH
// if not turrets or not factories then
78565: LD_VAR 0 1
78569: NOT
78570: IFTRUE 78579
78572: PUSH
78573: LD_VAR 0 2
78577: NOT
78578: OR
78579: IFFALSE 78583
// exit ;
78581: GO 78890
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78583: LD_ADDR_VAR 0 10
78587: PUSH
78588: LD_INT 5
78590: PUSH
78591: LD_INT 6
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: PUSH
78598: LD_INT 2
78600: PUSH
78601: LD_INT 4
78603: PUSH
78604: EMPTY
78605: LIST
78606: LIST
78607: PUSH
78608: LD_INT 3
78610: PUSH
78611: LD_INT 5
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: LIST
78622: PUSH
78623: LD_INT 24
78625: PUSH
78626: LD_INT 25
78628: PUSH
78629: EMPTY
78630: LIST
78631: LIST
78632: PUSH
78633: LD_INT 23
78635: PUSH
78636: LD_INT 27
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: PUSH
78647: LD_INT 42
78649: PUSH
78650: LD_INT 43
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 44
78659: PUSH
78660: LD_INT 46
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: LD_INT 45
78669: PUSH
78670: LD_INT 47
78672: PUSH
78673: EMPTY
78674: LIST
78675: LIST
78676: PUSH
78677: EMPTY
78678: LIST
78679: LIST
78680: LIST
78681: PUSH
78682: EMPTY
78683: LIST
78684: LIST
78685: LIST
78686: ST_TO_ADDR
// result := [ ] ;
78687: LD_ADDR_VAR 0 3
78691: PUSH
78692: EMPTY
78693: ST_TO_ADDR
// for i in turrets do
78694: LD_ADDR_VAR 0 4
78698: PUSH
78699: LD_VAR 0 1
78703: PUSH
78704: FOR_IN
78705: IFFALSE 78888
// begin nat := GetNation ( i ) ;
78707: LD_ADDR_VAR 0 7
78711: PUSH
78712: LD_VAR 0 4
78716: PPUSH
78717: CALL_OW 248
78721: ST_TO_ADDR
// weapon := 0 ;
78722: LD_ADDR_VAR 0 8
78726: PUSH
78727: LD_INT 0
78729: ST_TO_ADDR
// if not nat then
78730: LD_VAR 0 7
78734: NOT
78735: IFFALSE 78739
// continue ;
78737: GO 78704
// for j in list [ nat ] do
78739: LD_ADDR_VAR 0 5
78743: PUSH
78744: LD_VAR 0 10
78748: PUSH
78749: LD_VAR 0 7
78753: ARRAY
78754: PUSH
78755: FOR_IN
78756: IFFALSE 78797
// if GetBWeapon ( i ) = j [ 1 ] then
78758: LD_VAR 0 4
78762: PPUSH
78763: CALL_OW 269
78767: PUSH
78768: LD_VAR 0 5
78772: PUSH
78773: LD_INT 1
78775: ARRAY
78776: EQUAL
78777: IFFALSE 78795
// begin weapon := j [ 2 ] ;
78779: LD_ADDR_VAR 0 8
78783: PUSH
78784: LD_VAR 0 5
78788: PUSH
78789: LD_INT 2
78791: ARRAY
78792: ST_TO_ADDR
// break ;
78793: GO 78797
// end ;
78795: GO 78755
78797: POP
78798: POP
// if not weapon then
78799: LD_VAR 0 8
78803: NOT
78804: IFFALSE 78808
// continue ;
78806: GO 78704
// for k in factories do
78808: LD_ADDR_VAR 0 6
78812: PUSH
78813: LD_VAR 0 2
78817: PUSH
78818: FOR_IN
78819: IFFALSE 78884
// begin weapons := AvailableWeaponList ( k ) ;
78821: LD_ADDR_VAR 0 9
78825: PUSH
78826: LD_VAR 0 6
78830: PPUSH
78831: CALL_OW 478
78835: ST_TO_ADDR
// if not weapons then
78836: LD_VAR 0 9
78840: NOT
78841: IFFALSE 78845
// continue ;
78843: GO 78818
// if weapon in weapons then
78845: LD_VAR 0 8
78849: PUSH
78850: LD_VAR 0 9
78854: IN
78855: IFFALSE 78882
// begin result := [ i , weapon ] ;
78857: LD_ADDR_VAR 0 3
78861: PUSH
78862: LD_VAR 0 4
78866: PUSH
78867: LD_VAR 0 8
78871: PUSH
78872: EMPTY
78873: LIST
78874: LIST
78875: ST_TO_ADDR
// exit ;
78876: POP
78877: POP
78878: POP
78879: POP
78880: GO 78890
// end ; end ;
78882: GO 78818
78884: POP
78885: POP
// end ;
78886: GO 78704
78888: POP
78889: POP
// end ;
78890: LD_VAR 0 3
78894: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78895: LD_INT 0
78897: PPUSH
// if not side or side > 8 then
78898: LD_VAR 0 3
78902: NOT
78903: IFTRUE 78915
78905: PUSH
78906: LD_VAR 0 3
78910: PUSH
78911: LD_INT 8
78913: GREATER
78914: OR
78915: IFFALSE 78919
// exit ;
78917: GO 78978
// if not range then
78919: LD_VAR 0 4
78923: NOT
78924: IFFALSE 78935
// range := - 12 ;
78926: LD_ADDR_VAR 0 4
78930: PUSH
78931: LD_INT 12
78933: NEG
78934: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78935: LD_VAR 0 1
78939: PPUSH
78940: LD_VAR 0 2
78944: PPUSH
78945: LD_VAR 0 3
78949: PPUSH
78950: LD_VAR 0 4
78954: PPUSH
78955: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78959: LD_VAR 0 1
78963: PPUSH
78964: LD_VAR 0 2
78968: PPUSH
78969: LD_VAR 0 3
78973: PPUSH
78974: CALL_OW 331
// end ;
78978: LD_VAR 0 5
78982: RET
// export function Video ( mode ) ; begin
78983: LD_INT 0
78985: PPUSH
// ingame_video = mode ;
78986: LD_ADDR_OWVAR 52
78990: PUSH
78991: LD_VAR 0 1
78995: ST_TO_ADDR
// interface_hidden = mode ;
78996: LD_ADDR_OWVAR 54
79000: PUSH
79001: LD_VAR 0 1
79005: ST_TO_ADDR
// end ;
79006: LD_VAR 0 2
79010: RET
// export function Join ( array , element ) ; begin
79011: LD_INT 0
79013: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79014: LD_ADDR_VAR 0 3
79018: PUSH
79019: LD_VAR 0 1
79023: PPUSH
79024: LD_VAR 0 1
79028: PUSH
79029: LD_INT 1
79031: PLUS
79032: PPUSH
79033: LD_VAR 0 2
79037: PPUSH
79038: CALL_OW 1
79042: ST_TO_ADDR
// end ;
79043: LD_VAR 0 3
79047: RET
// export function JoinUnion ( array , element ) ; begin
79048: LD_INT 0
79050: PPUSH
// result := array union element ;
79051: LD_ADDR_VAR 0 3
79055: PUSH
79056: LD_VAR 0 1
79060: PUSH
79061: LD_VAR 0 2
79065: UNION
79066: ST_TO_ADDR
// end ;
79067: LD_VAR 0 3
79071: RET
// export function GetBehemoths ( side ) ; begin
79072: LD_INT 0
79074: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79075: LD_ADDR_VAR 0 2
79079: PUSH
79080: LD_INT 22
79082: PUSH
79083: LD_VAR 0 1
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: PUSH
79092: LD_INT 31
79094: PUSH
79095: LD_INT 25
79097: PUSH
79098: EMPTY
79099: LIST
79100: LIST
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PPUSH
79106: CALL_OW 69
79110: ST_TO_ADDR
// end ;
79111: LD_VAR 0 2
79115: RET
// export function Shuffle ( array ) ; var i , index ; begin
79116: LD_INT 0
79118: PPUSH
79119: PPUSH
79120: PPUSH
// result := [ ] ;
79121: LD_ADDR_VAR 0 2
79125: PUSH
79126: EMPTY
79127: ST_TO_ADDR
// if not array then
79128: LD_VAR 0 1
79132: NOT
79133: IFFALSE 79137
// exit ;
79135: GO 79236
// Randomize ;
79137: CALL_OW 10
// for i = array downto 1 do
79141: LD_ADDR_VAR 0 3
79145: PUSH
79146: DOUBLE
79147: LD_VAR 0 1
79151: INC
79152: ST_TO_ADDR
79153: LD_INT 1
79155: PUSH
79156: FOR_DOWNTO
79157: IFFALSE 79234
// begin index := rand ( 1 , array ) ;
79159: LD_ADDR_VAR 0 4
79163: PUSH
79164: LD_INT 1
79166: PPUSH
79167: LD_VAR 0 1
79171: PPUSH
79172: CALL_OW 12
79176: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79177: LD_ADDR_VAR 0 2
79181: PUSH
79182: LD_VAR 0 2
79186: PPUSH
79187: LD_VAR 0 2
79191: PUSH
79192: LD_INT 1
79194: PLUS
79195: PPUSH
79196: LD_VAR 0 1
79200: PUSH
79201: LD_VAR 0 4
79205: ARRAY
79206: PPUSH
79207: CALL_OW 2
79211: ST_TO_ADDR
// array := Delete ( array , index ) ;
79212: LD_ADDR_VAR 0 1
79216: PUSH
79217: LD_VAR 0 1
79221: PPUSH
79222: LD_VAR 0 4
79226: PPUSH
79227: CALL_OW 3
79231: ST_TO_ADDR
// end ;
79232: GO 79156
79234: POP
79235: POP
// end ;
79236: LD_VAR 0 2
79240: RET
// export function GetBaseMaterials ( base ) ; begin
79241: LD_INT 0
79243: PPUSH
// result := [ 0 , 0 , 0 ] ;
79244: LD_ADDR_VAR 0 2
79248: PUSH
79249: LD_INT 0
79251: PUSH
79252: LD_INT 0
79254: PUSH
79255: LD_INT 0
79257: PUSH
79258: EMPTY
79259: LIST
79260: LIST
79261: LIST
79262: ST_TO_ADDR
// if not base then
79263: LD_VAR 0 1
79267: NOT
79268: IFFALSE 79272
// exit ;
79270: GO 79321
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79272: LD_ADDR_VAR 0 2
79276: PUSH
79277: LD_VAR 0 1
79281: PPUSH
79282: LD_INT 1
79284: PPUSH
79285: CALL_OW 275
79289: PUSH
79290: LD_VAR 0 1
79294: PPUSH
79295: LD_INT 2
79297: PPUSH
79298: CALL_OW 275
79302: PUSH
79303: LD_VAR 0 1
79307: PPUSH
79308: LD_INT 3
79310: PPUSH
79311: CALL_OW 275
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: LIST
79320: ST_TO_ADDR
// end ;
79321: LD_VAR 0 2
79325: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79326: LD_INT 0
79328: PPUSH
79329: PPUSH
// result := array ;
79330: LD_ADDR_VAR 0 3
79334: PUSH
79335: LD_VAR 0 1
79339: ST_TO_ADDR
// if size >= result then
79340: LD_VAR 0 2
79344: PUSH
79345: LD_VAR 0 3
79349: GREATEREQUAL
79350: IFFALSE 79354
// exit ;
79352: GO 79404
// if size then
79354: LD_VAR 0 2
79358: IFFALSE 79404
// for i := array downto size do
79360: LD_ADDR_VAR 0 4
79364: PUSH
79365: DOUBLE
79366: LD_VAR 0 1
79370: INC
79371: ST_TO_ADDR
79372: LD_VAR 0 2
79376: PUSH
79377: FOR_DOWNTO
79378: IFFALSE 79402
// result := Delete ( result , result ) ;
79380: LD_ADDR_VAR 0 3
79384: PUSH
79385: LD_VAR 0 3
79389: PPUSH
79390: LD_VAR 0 3
79394: PPUSH
79395: CALL_OW 3
79399: ST_TO_ADDR
79400: GO 79377
79402: POP
79403: POP
// end ;
79404: LD_VAR 0 3
79408: RET
// export function ComExit ( unit ) ; var tmp ; begin
79409: LD_INT 0
79411: PPUSH
79412: PPUSH
// if not IsInUnit ( unit ) then
79413: LD_VAR 0 1
79417: PPUSH
79418: CALL_OW 310
79422: NOT
79423: IFFALSE 79427
// exit ;
79425: GO 79487
// tmp := IsInUnit ( unit ) ;
79427: LD_ADDR_VAR 0 3
79431: PUSH
79432: LD_VAR 0 1
79436: PPUSH
79437: CALL_OW 310
79441: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79442: LD_VAR 0 3
79446: PPUSH
79447: CALL_OW 247
79451: PUSH
79452: LD_INT 2
79454: EQUAL
79455: IFFALSE 79468
// ComExitVehicle ( unit ) else
79457: LD_VAR 0 1
79461: PPUSH
79462: CALL_OW 121
79466: GO 79477
// ComExitBuilding ( unit ) ;
79468: LD_VAR 0 1
79472: PPUSH
79473: CALL_OW 122
// result := tmp ;
79477: LD_ADDR_VAR 0 2
79481: PUSH
79482: LD_VAR 0 3
79486: ST_TO_ADDR
// end ;
79487: LD_VAR 0 2
79491: RET
// export function ComExitAll ( units ) ; var i ; begin
79492: LD_INT 0
79494: PPUSH
79495: PPUSH
// if not units then
79496: LD_VAR 0 1
79500: NOT
79501: IFFALSE 79505
// exit ;
79503: GO 79531
// for i in units do
79505: LD_ADDR_VAR 0 3
79509: PUSH
79510: LD_VAR 0 1
79514: PUSH
79515: FOR_IN
79516: IFFALSE 79529
// ComExit ( i ) ;
79518: LD_VAR 0 3
79522: PPUSH
79523: CALL 79409 0 1
79527: GO 79515
79529: POP
79530: POP
// end ;
79531: LD_VAR 0 2
79535: RET
// export function ResetHc ; begin
79536: LD_INT 0
79538: PPUSH
// InitHc ;
79539: CALL_OW 19
// hc_importance := 0 ;
79543: LD_ADDR_OWVAR 32
79547: PUSH
79548: LD_INT 0
79550: ST_TO_ADDR
// end ;
79551: LD_VAR 0 1
79555: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79556: LD_INT 0
79558: PPUSH
79559: PPUSH
79560: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79561: LD_ADDR_VAR 0 6
79565: PUSH
79566: LD_VAR 0 1
79570: PUSH
79571: LD_VAR 0 3
79575: PLUS
79576: PUSH
79577: LD_INT 2
79579: DIV
79580: ST_TO_ADDR
// if _x < 0 then
79581: LD_VAR 0 6
79585: PUSH
79586: LD_INT 0
79588: LESS
79589: IFFALSE 79606
// _x := _x * - 1 ;
79591: LD_ADDR_VAR 0 6
79595: PUSH
79596: LD_VAR 0 6
79600: PUSH
79601: LD_INT 1
79603: NEG
79604: MUL
79605: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79606: LD_ADDR_VAR 0 7
79610: PUSH
79611: LD_VAR 0 2
79615: PUSH
79616: LD_VAR 0 4
79620: PLUS
79621: PUSH
79622: LD_INT 2
79624: DIV
79625: ST_TO_ADDR
// if _y < 0 then
79626: LD_VAR 0 7
79630: PUSH
79631: LD_INT 0
79633: LESS
79634: IFFALSE 79651
// _y := _y * - 1 ;
79636: LD_ADDR_VAR 0 7
79640: PUSH
79641: LD_VAR 0 7
79645: PUSH
79646: LD_INT 1
79648: NEG
79649: MUL
79650: ST_TO_ADDR
// result := [ _x , _y ] ;
79651: LD_ADDR_VAR 0 5
79655: PUSH
79656: LD_VAR 0 6
79660: PUSH
79661: LD_VAR 0 7
79665: PUSH
79666: EMPTY
79667: LIST
79668: LIST
79669: ST_TO_ADDR
// end ;
79670: LD_VAR 0 5
79674: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79675: LD_INT 0
79677: PPUSH
79678: PPUSH
79679: PPUSH
79680: PPUSH
// task := GetTaskList ( unit ) ;
79681: LD_ADDR_VAR 0 7
79685: PUSH
79686: LD_VAR 0 1
79690: PPUSH
79691: CALL_OW 437
79695: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79696: LD_VAR 0 7
79700: NOT
79701: IFFALSE 79720
79703: PUSH
79704: LD_VAR 0 1
79708: PPUSH
79709: LD_VAR 0 2
79713: PPUSH
79714: CALL_OW 308
79718: NOT
79719: AND
79720: IFFALSE 79724
// exit ;
79722: GO 79842
// if IsInArea ( unit , area ) then
79724: LD_VAR 0 1
79728: PPUSH
79729: LD_VAR 0 2
79733: PPUSH
79734: CALL_OW 308
79738: IFFALSE 79756
// begin ComMoveToArea ( unit , goAway ) ;
79740: LD_VAR 0 1
79744: PPUSH
79745: LD_VAR 0 3
79749: PPUSH
79750: CALL_OW 113
// exit ;
79754: GO 79842
// end ; if task [ 1 ] [ 1 ] <> M then
79756: LD_VAR 0 7
79760: PUSH
79761: LD_INT 1
79763: ARRAY
79764: PUSH
79765: LD_INT 1
79767: ARRAY
79768: PUSH
79769: LD_STRING M
79771: NONEQUAL
79772: IFFALSE 79776
// exit ;
79774: GO 79842
// x := task [ 1 ] [ 2 ] ;
79776: LD_ADDR_VAR 0 5
79780: PUSH
79781: LD_VAR 0 7
79785: PUSH
79786: LD_INT 1
79788: ARRAY
79789: PUSH
79790: LD_INT 2
79792: ARRAY
79793: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79794: LD_ADDR_VAR 0 6
79798: PUSH
79799: LD_VAR 0 7
79803: PUSH
79804: LD_INT 1
79806: ARRAY
79807: PUSH
79808: LD_INT 3
79810: ARRAY
79811: ST_TO_ADDR
// if InArea ( x , y , area ) then
79812: LD_VAR 0 5
79816: PPUSH
79817: LD_VAR 0 6
79821: PPUSH
79822: LD_VAR 0 2
79826: PPUSH
79827: CALL_OW 309
79831: IFFALSE 79842
// ComStop ( unit ) ;
79833: LD_VAR 0 1
79837: PPUSH
79838: CALL_OW 141
// end ;
79842: LD_VAR 0 4
79846: RET
// export function Abs ( value ) ; begin
79847: LD_INT 0
79849: PPUSH
// result := value ;
79850: LD_ADDR_VAR 0 2
79854: PUSH
79855: LD_VAR 0 1
79859: ST_TO_ADDR
// if value < 0 then
79860: LD_VAR 0 1
79864: PUSH
79865: LD_INT 0
79867: LESS
79868: IFFALSE 79885
// result := value * - 1 ;
79870: LD_ADDR_VAR 0 2
79874: PUSH
79875: LD_VAR 0 1
79879: PUSH
79880: LD_INT 1
79882: NEG
79883: MUL
79884: ST_TO_ADDR
// end ;
79885: LD_VAR 0 2
79889: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79890: LD_INT 0
79892: PPUSH
79893: PPUSH
79894: PPUSH
79895: PPUSH
79896: PPUSH
79897: PPUSH
79898: PPUSH
79899: PPUSH
// if not unit or not building then
79900: LD_VAR 0 1
79904: NOT
79905: IFTRUE 79914
79907: PUSH
79908: LD_VAR 0 2
79912: NOT
79913: OR
79914: IFFALSE 79918
// exit ;
79916: GO 80146
// x := GetX ( building ) ;
79918: LD_ADDR_VAR 0 4
79922: PUSH
79923: LD_VAR 0 2
79927: PPUSH
79928: CALL_OW 250
79932: ST_TO_ADDR
// y := GetY ( building ) ;
79933: LD_ADDR_VAR 0 6
79937: PUSH
79938: LD_VAR 0 2
79942: PPUSH
79943: CALL_OW 251
79947: ST_TO_ADDR
// d := GetDir ( building ) ;
79948: LD_ADDR_VAR 0 8
79952: PUSH
79953: LD_VAR 0 2
79957: PPUSH
79958: CALL_OW 254
79962: ST_TO_ADDR
// r := 4 ;
79963: LD_ADDR_VAR 0 9
79967: PUSH
79968: LD_INT 4
79970: ST_TO_ADDR
// for i := 1 to 5 do
79971: LD_ADDR_VAR 0 10
79975: PUSH
79976: DOUBLE
79977: LD_INT 1
79979: DEC
79980: ST_TO_ADDR
79981: LD_INT 5
79983: PUSH
79984: FOR_TO
79985: IFFALSE 80144
// begin _x := ShiftX ( x , d , r + i ) ;
79987: LD_ADDR_VAR 0 5
79991: PUSH
79992: LD_VAR 0 4
79996: PPUSH
79997: LD_VAR 0 8
80001: PPUSH
80002: LD_VAR 0 9
80006: PUSH
80007: LD_VAR 0 10
80011: PLUS
80012: PPUSH
80013: CALL_OW 272
80017: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80018: LD_ADDR_VAR 0 7
80022: PUSH
80023: LD_VAR 0 6
80027: PPUSH
80028: LD_VAR 0 8
80032: PPUSH
80033: LD_VAR 0 9
80037: PUSH
80038: LD_VAR 0 10
80042: PLUS
80043: PPUSH
80044: CALL_OW 273
80048: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80049: LD_VAR 0 5
80053: PPUSH
80054: LD_VAR 0 7
80058: PPUSH
80059: CALL_OW 488
80063: IFFALSE 80098
80065: PUSH
80066: LD_VAR 0 5
80070: PPUSH
80071: LD_VAR 0 7
80075: PPUSH
80076: CALL_OW 428
80080: PPUSH
80081: CALL_OW 247
80085: PUSH
80086: LD_INT 3
80088: PUSH
80089: LD_INT 2
80091: PUSH
80092: EMPTY
80093: LIST
80094: LIST
80095: IN
80096: NOT
80097: AND
80098: IFFALSE 80142
// begin ComMoveXY ( unit , _x , _y ) ;
80100: LD_VAR 0 1
80104: PPUSH
80105: LD_VAR 0 5
80109: PPUSH
80110: LD_VAR 0 7
80114: PPUSH
80115: CALL_OW 111
// result := [ _x , _y ] ;
80119: LD_ADDR_VAR 0 3
80123: PUSH
80124: LD_VAR 0 5
80128: PUSH
80129: LD_VAR 0 7
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: ST_TO_ADDR
// exit ;
80138: POP
80139: POP
80140: GO 80146
// end ; end ;
80142: GO 79984
80144: POP
80145: POP
// end ;
80146: LD_VAR 0 3
80150: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80151: LD_INT 0
80153: PPUSH
80154: PPUSH
80155: PPUSH
// result := 0 ;
80156: LD_ADDR_VAR 0 3
80160: PUSH
80161: LD_INT 0
80163: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80164: LD_VAR 0 1
80168: PUSH
80169: LD_INT 0
80171: LESS
80172: IFTRUE 80184
80174: PUSH
80175: LD_VAR 0 1
80179: PUSH
80180: LD_INT 8
80182: GREATER
80183: OR
80184: IFTRUE 80196
80186: PUSH
80187: LD_VAR 0 2
80191: PUSH
80192: LD_INT 0
80194: LESS
80195: OR
80196: IFTRUE 80208
80198: PUSH
80199: LD_VAR 0 2
80203: PUSH
80204: LD_INT 8
80206: GREATER
80207: OR
80208: IFFALSE 80212
// exit ;
80210: GO 80287
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80212: LD_ADDR_VAR 0 4
80216: PUSH
80217: LD_INT 22
80219: PUSH
80220: LD_VAR 0 2
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: PPUSH
80229: CALL_OW 69
80233: PUSH
80234: FOR_IN
80235: IFFALSE 80285
// begin un := UnitShoot ( i ) ;
80237: LD_ADDR_VAR 0 5
80241: PUSH
80242: LD_VAR 0 4
80246: PPUSH
80247: CALL_OW 504
80251: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80252: LD_VAR 0 5
80256: PPUSH
80257: CALL_OW 255
80261: PUSH
80262: LD_VAR 0 1
80266: EQUAL
80267: IFFALSE 80283
// begin result := un ;
80269: LD_ADDR_VAR 0 3
80273: PUSH
80274: LD_VAR 0 5
80278: ST_TO_ADDR
// exit ;
80279: POP
80280: POP
80281: GO 80287
// end ; end ;
80283: GO 80234
80285: POP
80286: POP
// end ;
80287: LD_VAR 0 3
80291: RET
// export function GetCargoBay ( units ) ; begin
80292: LD_INT 0
80294: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80295: LD_ADDR_VAR 0 2
80299: PUSH
80300: LD_VAR 0 1
80304: PPUSH
80305: LD_INT 2
80307: PUSH
80308: LD_INT 34
80310: PUSH
80311: LD_INT 12
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 34
80320: PUSH
80321: LD_INT 51
80323: PUSH
80324: EMPTY
80325: LIST
80326: LIST
80327: PUSH
80328: LD_INT 34
80330: PUSH
80331: LD_INT 32
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 34
80340: PUSH
80341: LD_INT 89
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: EMPTY
80349: LIST
80350: LIST
80351: LIST
80352: LIST
80353: LIST
80354: PPUSH
80355: CALL_OW 72
80359: ST_TO_ADDR
// end ;
80360: LD_VAR 0 2
80364: RET
// export function Negate ( value ) ; begin
80365: LD_INT 0
80367: PPUSH
// result := not value ;
80368: LD_ADDR_VAR 0 2
80372: PUSH
80373: LD_VAR 0 1
80377: NOT
80378: ST_TO_ADDR
// end ;
80379: LD_VAR 0 2
80383: RET
// export function Inc ( value ) ; begin
80384: LD_INT 0
80386: PPUSH
// result := value + 1 ;
80387: LD_ADDR_VAR 0 2
80391: PUSH
80392: LD_VAR 0 1
80396: PUSH
80397: LD_INT 1
80399: PLUS
80400: ST_TO_ADDR
// end ;
80401: LD_VAR 0 2
80405: RET
// export function Dec ( value ) ; begin
80406: LD_INT 0
80408: PPUSH
// result := value - 1 ;
80409: LD_ADDR_VAR 0 2
80413: PUSH
80414: LD_VAR 0 1
80418: PUSH
80419: LD_INT 1
80421: MINUS
80422: ST_TO_ADDR
// end ;
80423: LD_VAR 0 2
80427: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80428: LD_INT 0
80430: PPUSH
80431: PPUSH
80432: PPUSH
80433: PPUSH
80434: PPUSH
80435: PPUSH
80436: PPUSH
80437: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80438: LD_VAR 0 1
80442: PPUSH
80443: LD_VAR 0 2
80447: PPUSH
80448: CALL_OW 488
80452: NOT
80453: IFTRUE 80472
80455: PUSH
80456: LD_VAR 0 3
80460: PPUSH
80461: LD_VAR 0 4
80465: PPUSH
80466: CALL_OW 488
80470: NOT
80471: OR
80472: IFFALSE 80485
// begin result := - 1 ;
80474: LD_ADDR_VAR 0 5
80478: PUSH
80479: LD_INT 1
80481: NEG
80482: ST_TO_ADDR
// exit ;
80483: GO 80720
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80485: LD_ADDR_VAR 0 12
80489: PUSH
80490: LD_VAR 0 1
80494: PPUSH
80495: LD_VAR 0 2
80499: PPUSH
80500: LD_VAR 0 3
80504: PPUSH
80505: LD_VAR 0 4
80509: PPUSH
80510: CALL 79556 0 4
80514: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80515: LD_ADDR_VAR 0 11
80519: PUSH
80520: LD_VAR 0 1
80524: PPUSH
80525: LD_VAR 0 2
80529: PPUSH
80530: LD_VAR 0 12
80534: PUSH
80535: LD_INT 1
80537: ARRAY
80538: PPUSH
80539: LD_VAR 0 12
80543: PUSH
80544: LD_INT 2
80546: ARRAY
80547: PPUSH
80548: CALL_OW 298
80552: ST_TO_ADDR
// distance := 9999 ;
80553: LD_ADDR_VAR 0 10
80557: PUSH
80558: LD_INT 9999
80560: ST_TO_ADDR
// for i := 0 to 5 do
80561: LD_ADDR_VAR 0 6
80565: PUSH
80566: DOUBLE
80567: LD_INT 0
80569: DEC
80570: ST_TO_ADDR
80571: LD_INT 5
80573: PUSH
80574: FOR_TO
80575: IFFALSE 80718
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80577: LD_ADDR_VAR 0 7
80581: PUSH
80582: LD_VAR 0 1
80586: PPUSH
80587: LD_VAR 0 6
80591: PPUSH
80592: LD_VAR 0 11
80596: PPUSH
80597: CALL_OW 272
80601: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80602: LD_ADDR_VAR 0 8
80606: PUSH
80607: LD_VAR 0 2
80611: PPUSH
80612: LD_VAR 0 6
80616: PPUSH
80617: LD_VAR 0 11
80621: PPUSH
80622: CALL_OW 273
80626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80627: LD_VAR 0 7
80631: PPUSH
80632: LD_VAR 0 8
80636: PPUSH
80637: CALL_OW 488
80641: NOT
80642: IFFALSE 80646
// continue ;
80644: GO 80574
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80646: LD_ADDR_VAR 0 9
80650: PUSH
80651: LD_VAR 0 12
80655: PUSH
80656: LD_INT 1
80658: ARRAY
80659: PPUSH
80660: LD_VAR 0 12
80664: PUSH
80665: LD_INT 2
80667: ARRAY
80668: PPUSH
80669: LD_VAR 0 7
80673: PPUSH
80674: LD_VAR 0 8
80678: PPUSH
80679: CALL_OW 298
80683: ST_TO_ADDR
// if tmp < distance then
80684: LD_VAR 0 9
80688: PUSH
80689: LD_VAR 0 10
80693: LESS
80694: IFFALSE 80716
// begin result := i ;
80696: LD_ADDR_VAR 0 5
80700: PUSH
80701: LD_VAR 0 6
80705: ST_TO_ADDR
// distance := tmp ;
80706: LD_ADDR_VAR 0 10
80710: PUSH
80711: LD_VAR 0 9
80715: ST_TO_ADDR
// end ; end ;
80716: GO 80574
80718: POP
80719: POP
// end ;
80720: LD_VAR 0 5
80724: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80725: LD_INT 0
80727: PPUSH
80728: PPUSH
// if not driver or not IsInUnit ( driver ) then
80729: LD_VAR 0 1
80733: NOT
80734: IFTRUE 80748
80736: PUSH
80737: LD_VAR 0 1
80741: PPUSH
80742: CALL_OW 310
80746: NOT
80747: OR
80748: IFFALSE 80752
// exit ;
80750: GO 80842
// vehicle := IsInUnit ( driver ) ;
80752: LD_ADDR_VAR 0 3
80756: PUSH
80757: LD_VAR 0 1
80761: PPUSH
80762: CALL_OW 310
80766: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80767: LD_VAR 0 1
80771: PPUSH
80772: LD_STRING \
80774: PUSH
80775: LD_INT 0
80777: PUSH
80778: LD_INT 0
80780: PUSH
80781: LD_INT 0
80783: PUSH
80784: LD_INT 0
80786: PUSH
80787: LD_INT 0
80789: PUSH
80790: LD_INT 0
80792: PUSH
80793: EMPTY
80794: LIST
80795: LIST
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: PUSH
80802: LD_STRING E
80804: PUSH
80805: LD_INT 0
80807: PUSH
80808: LD_INT 0
80810: PUSH
80811: LD_VAR 0 3
80815: PUSH
80816: LD_INT 0
80818: PUSH
80819: LD_INT 0
80821: PUSH
80822: LD_INT 0
80824: PUSH
80825: EMPTY
80826: LIST
80827: LIST
80828: LIST
80829: LIST
80830: LIST
80831: LIST
80832: LIST
80833: PUSH
80834: EMPTY
80835: LIST
80836: LIST
80837: PPUSH
80838: CALL_OW 446
// end ;
80842: LD_VAR 0 2
80846: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80847: LD_INT 0
80849: PPUSH
80850: PPUSH
// if not driver or not IsInUnit ( driver ) then
80851: LD_VAR 0 1
80855: NOT
80856: IFTRUE 80870
80858: PUSH
80859: LD_VAR 0 1
80863: PPUSH
80864: CALL_OW 310
80868: NOT
80869: OR
80870: IFFALSE 80874
// exit ;
80872: GO 80964
// vehicle := IsInUnit ( driver ) ;
80874: LD_ADDR_VAR 0 3
80878: PUSH
80879: LD_VAR 0 1
80883: PPUSH
80884: CALL_OW 310
80888: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80889: LD_VAR 0 1
80893: PPUSH
80894: LD_STRING \
80896: PUSH
80897: LD_INT 0
80899: PUSH
80900: LD_INT 0
80902: PUSH
80903: LD_INT 0
80905: PUSH
80906: LD_INT 0
80908: PUSH
80909: LD_INT 0
80911: PUSH
80912: LD_INT 0
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: LIST
80919: LIST
80920: LIST
80921: LIST
80922: LIST
80923: PUSH
80924: LD_STRING E
80926: PUSH
80927: LD_INT 0
80929: PUSH
80930: LD_INT 0
80932: PUSH
80933: LD_VAR 0 3
80937: PUSH
80938: LD_INT 0
80940: PUSH
80941: LD_INT 0
80943: PUSH
80944: LD_INT 0
80946: PUSH
80947: EMPTY
80948: LIST
80949: LIST
80950: LIST
80951: LIST
80952: LIST
80953: LIST
80954: LIST
80955: PUSH
80956: EMPTY
80957: LIST
80958: LIST
80959: PPUSH
80960: CALL_OW 447
// end ;
80964: LD_VAR 0 2
80968: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80969: LD_INT 0
80971: PPUSH
80972: PPUSH
80973: PPUSH
// tmp := [ ] ;
80974: LD_ADDR_VAR 0 5
80978: PUSH
80979: EMPTY
80980: ST_TO_ADDR
// for i in units do
80981: LD_ADDR_VAR 0 4
80985: PUSH
80986: LD_VAR 0 1
80990: PUSH
80991: FOR_IN
80992: IFFALSE 81030
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80994: LD_ADDR_VAR 0 5
80998: PUSH
80999: LD_VAR 0 5
81003: PPUSH
81004: LD_VAR 0 5
81008: PUSH
81009: LD_INT 1
81011: PLUS
81012: PPUSH
81013: LD_VAR 0 4
81017: PPUSH
81018: CALL_OW 256
81022: PPUSH
81023: CALL_OW 2
81027: ST_TO_ADDR
81028: GO 80991
81030: POP
81031: POP
// if not tmp then
81032: LD_VAR 0 5
81036: NOT
81037: IFFALSE 81041
// exit ;
81039: GO 81089
// if asc then
81041: LD_VAR 0 2
81045: IFFALSE 81069
// result := SortListByListAsc ( units , tmp ) else
81047: LD_ADDR_VAR 0 3
81051: PUSH
81052: LD_VAR 0 1
81056: PPUSH
81057: LD_VAR 0 5
81061: PPUSH
81062: CALL_OW 76
81066: ST_TO_ADDR
81067: GO 81089
// result := SortListByListDesc ( units , tmp ) ;
81069: LD_ADDR_VAR 0 3
81073: PUSH
81074: LD_VAR 0 1
81078: PPUSH
81079: LD_VAR 0 5
81083: PPUSH
81084: CALL_OW 77
81088: ST_TO_ADDR
// end ;
81089: LD_VAR 0 3
81093: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81094: LD_INT 0
81096: PPUSH
81097: PPUSH
// task := GetTaskList ( mech ) ;
81098: LD_ADDR_VAR 0 4
81102: PUSH
81103: LD_VAR 0 1
81107: PPUSH
81108: CALL_OW 437
81112: ST_TO_ADDR
// if not task then
81113: LD_VAR 0 4
81117: NOT
81118: IFFALSE 81122
// exit ;
81120: GO 81166
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81122: LD_ADDR_VAR 0 3
81126: PUSH
81127: LD_VAR 0 4
81131: PUSH
81132: LD_INT 1
81134: ARRAY
81135: PUSH
81136: LD_INT 1
81138: ARRAY
81139: PUSH
81140: LD_STRING r
81142: EQUAL
81143: IFFALSE 81165
81145: PUSH
81146: LD_VAR 0 4
81150: PUSH
81151: LD_INT 1
81153: ARRAY
81154: PUSH
81155: LD_INT 4
81157: ARRAY
81158: PUSH
81159: LD_VAR 0 2
81163: EQUAL
81164: AND
81165: ST_TO_ADDR
// end ;
81166: LD_VAR 0 3
81170: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81171: LD_INT 0
81173: PPUSH
// SetDir ( unit , d ) ;
81174: LD_VAR 0 1
81178: PPUSH
81179: LD_VAR 0 4
81183: PPUSH
81184: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81188: LD_ADDR_VAR 0 6
81192: PUSH
81193: LD_VAR 0 1
81197: PPUSH
81198: LD_VAR 0 2
81202: PPUSH
81203: LD_VAR 0 3
81207: PPUSH
81208: LD_VAR 0 5
81212: PPUSH
81213: CALL_OW 48
81217: ST_TO_ADDR
// end ;
81218: LD_VAR 0 6
81222: RET
// export function ToNaturalNumber ( number ) ; begin
81223: LD_INT 0
81225: PPUSH
// result := number div 1 ;
81226: LD_ADDR_VAR 0 2
81230: PUSH
81231: LD_VAR 0 1
81235: PUSH
81236: LD_INT 1
81238: DIV
81239: ST_TO_ADDR
// if number < 0 then
81240: LD_VAR 0 1
81244: PUSH
81245: LD_INT 0
81247: LESS
81248: IFFALSE 81258
// result := 0 ;
81250: LD_ADDR_VAR 0 2
81254: PUSH
81255: LD_INT 0
81257: ST_TO_ADDR
// end ;
81258: LD_VAR 0 2
81262: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81263: LD_INT 0
81265: PPUSH
81266: PPUSH
81267: PPUSH
// if not buildings then
81268: LD_VAR 0 1
81272: NOT
81273: IFFALSE 81277
// exit ;
81275: GO 81392
// tmp := [ ] ;
81277: LD_ADDR_VAR 0 5
81281: PUSH
81282: EMPTY
81283: ST_TO_ADDR
// for b in buildings do
81284: LD_ADDR_VAR 0 4
81288: PUSH
81289: LD_VAR 0 1
81293: PUSH
81294: FOR_IN
81295: IFFALSE 81333
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81297: LD_ADDR_VAR 0 5
81301: PUSH
81302: LD_VAR 0 5
81306: PPUSH
81307: LD_VAR 0 5
81311: PUSH
81312: LD_INT 1
81314: PLUS
81315: PPUSH
81316: LD_VAR 0 4
81320: PPUSH
81321: CALL_OW 266
81325: PPUSH
81326: CALL_OW 1
81330: ST_TO_ADDR
81331: GO 81294
81333: POP
81334: POP
// if not tmp then
81335: LD_VAR 0 5
81339: NOT
81340: IFFALSE 81344
// exit ;
81342: GO 81392
// if asc then
81344: LD_VAR 0 2
81348: IFFALSE 81372
// result := SortListByListAsc ( buildings , tmp ) else
81350: LD_ADDR_VAR 0 3
81354: PUSH
81355: LD_VAR 0 1
81359: PPUSH
81360: LD_VAR 0 5
81364: PPUSH
81365: CALL_OW 76
81369: ST_TO_ADDR
81370: GO 81392
// result := SortListByListDesc ( buildings , tmp ) ;
81372: LD_ADDR_VAR 0 3
81376: PUSH
81377: LD_VAR 0 1
81381: PPUSH
81382: LD_VAR 0 5
81386: PPUSH
81387: CALL_OW 77
81391: ST_TO_ADDR
// end ;
81392: LD_VAR 0 3
81396: RET
// export function SortByClass ( units , class ) ; var un ; begin
81397: LD_INT 0
81399: PPUSH
81400: PPUSH
// if not units or not class then
81401: LD_VAR 0 1
81405: NOT
81406: IFTRUE 81415
81408: PUSH
81409: LD_VAR 0 2
81413: NOT
81414: OR
81415: IFFALSE 81419
// exit ;
81417: GO 81514
// result := [ ] ;
81419: LD_ADDR_VAR 0 3
81423: PUSH
81424: EMPTY
81425: ST_TO_ADDR
// for un in units do
81426: LD_ADDR_VAR 0 4
81430: PUSH
81431: LD_VAR 0 1
81435: PUSH
81436: FOR_IN
81437: IFFALSE 81512
// if GetClass ( un ) = class then
81439: LD_VAR 0 4
81443: PPUSH
81444: CALL_OW 257
81448: PUSH
81449: LD_VAR 0 2
81453: EQUAL
81454: IFFALSE 81481
// result := Insert ( result , 1 , un ) else
81456: LD_ADDR_VAR 0 3
81460: PUSH
81461: LD_VAR 0 3
81465: PPUSH
81466: LD_INT 1
81468: PPUSH
81469: LD_VAR 0 4
81473: PPUSH
81474: CALL_OW 2
81478: ST_TO_ADDR
81479: GO 81510
// result := Replace ( result , result + 1 , un ) ;
81481: LD_ADDR_VAR 0 3
81485: PUSH
81486: LD_VAR 0 3
81490: PPUSH
81491: LD_VAR 0 3
81495: PUSH
81496: LD_INT 1
81498: PLUS
81499: PPUSH
81500: LD_VAR 0 4
81504: PPUSH
81505: CALL_OW 1
81509: ST_TO_ADDR
81510: GO 81436
81512: POP
81513: POP
// end ;
81514: LD_VAR 0 3
81518: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81519: LD_INT 0
81521: PPUSH
81522: PPUSH
81523: PPUSH
81524: PPUSH
81525: PPUSH
81526: PPUSH
81527: PPUSH
// result := [ ] ;
81528: LD_ADDR_VAR 0 4
81532: PUSH
81533: EMPTY
81534: ST_TO_ADDR
// if x - r < 0 then
81535: LD_VAR 0 1
81539: PUSH
81540: LD_VAR 0 3
81544: MINUS
81545: PUSH
81546: LD_INT 0
81548: LESS
81549: IFFALSE 81561
// min_x := 0 else
81551: LD_ADDR_VAR 0 8
81555: PUSH
81556: LD_INT 0
81558: ST_TO_ADDR
81559: GO 81577
// min_x := x - r ;
81561: LD_ADDR_VAR 0 8
81565: PUSH
81566: LD_VAR 0 1
81570: PUSH
81571: LD_VAR 0 3
81575: MINUS
81576: ST_TO_ADDR
// if y - r < 0 then
81577: LD_VAR 0 2
81581: PUSH
81582: LD_VAR 0 3
81586: MINUS
81587: PUSH
81588: LD_INT 0
81590: LESS
81591: IFFALSE 81603
// min_y := 0 else
81593: LD_ADDR_VAR 0 7
81597: PUSH
81598: LD_INT 0
81600: ST_TO_ADDR
81601: GO 81619
// min_y := y - r ;
81603: LD_ADDR_VAR 0 7
81607: PUSH
81608: LD_VAR 0 2
81612: PUSH
81613: LD_VAR 0 3
81617: MINUS
81618: ST_TO_ADDR
// max_x := x + r ;
81619: LD_ADDR_VAR 0 9
81623: PUSH
81624: LD_VAR 0 1
81628: PUSH
81629: LD_VAR 0 3
81633: PLUS
81634: ST_TO_ADDR
// max_y := y + r ;
81635: LD_ADDR_VAR 0 10
81639: PUSH
81640: LD_VAR 0 2
81644: PUSH
81645: LD_VAR 0 3
81649: PLUS
81650: ST_TO_ADDR
// for _x = min_x to max_x do
81651: LD_ADDR_VAR 0 5
81655: PUSH
81656: DOUBLE
81657: LD_VAR 0 8
81661: DEC
81662: ST_TO_ADDR
81663: LD_VAR 0 9
81667: PUSH
81668: FOR_TO
81669: IFFALSE 81770
// for _y = min_y to max_y do
81671: LD_ADDR_VAR 0 6
81675: PUSH
81676: DOUBLE
81677: LD_VAR 0 7
81681: DEC
81682: ST_TO_ADDR
81683: LD_VAR 0 10
81687: PUSH
81688: FOR_TO
81689: IFFALSE 81766
// begin if not ValidHex ( _x , _y ) then
81691: LD_VAR 0 5
81695: PPUSH
81696: LD_VAR 0 6
81700: PPUSH
81701: CALL_OW 488
81705: NOT
81706: IFFALSE 81710
// continue ;
81708: GO 81688
// if GetResourceTypeXY ( _x , _y ) then
81710: LD_VAR 0 5
81714: PPUSH
81715: LD_VAR 0 6
81719: PPUSH
81720: CALL_OW 283
81724: IFFALSE 81764
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81726: LD_ADDR_VAR 0 4
81730: PUSH
81731: LD_VAR 0 4
81735: PPUSH
81736: LD_VAR 0 4
81740: PUSH
81741: LD_INT 1
81743: PLUS
81744: PPUSH
81745: LD_VAR 0 5
81749: PUSH
81750: LD_VAR 0 6
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: PPUSH
81759: CALL_OW 1
81763: ST_TO_ADDR
// end ;
81764: GO 81688
81766: POP
81767: POP
81768: GO 81668
81770: POP
81771: POP
// end ;
81772: LD_VAR 0 4
81776: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81777: LD_INT 0
81779: PPUSH
81780: PPUSH
81781: PPUSH
81782: PPUSH
81783: PPUSH
81784: PPUSH
81785: PPUSH
81786: PPUSH
// if not units then
81787: LD_VAR 0 1
81791: NOT
81792: IFFALSE 81796
// exit ;
81794: GO 82328
// result := UnitFilter ( units , [ f_ok ] ) ;
81796: LD_ADDR_VAR 0 3
81800: PUSH
81801: LD_VAR 0 1
81805: PPUSH
81806: LD_INT 50
81808: PUSH
81809: EMPTY
81810: LIST
81811: PPUSH
81812: CALL_OW 72
81816: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81817: LD_ADDR_VAR 0 8
81821: PUSH
81822: LD_VAR 0 1
81826: PUSH
81827: LD_INT 1
81829: ARRAY
81830: PPUSH
81831: CALL_OW 255
81835: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81836: LD_ADDR_VAR 0 10
81840: PUSH
81841: LD_INT 29
81843: PUSH
81844: LD_INT 91
81846: PUSH
81847: LD_INT 49
81849: PUSH
81850: EMPTY
81851: LIST
81852: LIST
81853: LIST
81854: ST_TO_ADDR
// if not result then
81855: LD_VAR 0 3
81859: NOT
81860: IFFALSE 81864
// exit ;
81862: GO 82328
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81864: LD_ADDR_VAR 0 5
81868: PUSH
81869: LD_INT 81
81871: PUSH
81872: LD_VAR 0 8
81876: PUSH
81877: EMPTY
81878: LIST
81879: LIST
81880: PPUSH
81881: CALL_OW 69
81885: ST_TO_ADDR
// for i in result do
81886: LD_ADDR_VAR 0 4
81890: PUSH
81891: LD_VAR 0 3
81895: PUSH
81896: FOR_IN
81897: IFFALSE 82326
// begin tag := GetTag ( i ) + 1 ;
81899: LD_ADDR_VAR 0 9
81903: PUSH
81904: LD_VAR 0 4
81908: PPUSH
81909: CALL_OW 110
81913: PUSH
81914: LD_INT 1
81916: PLUS
81917: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81918: LD_ADDR_VAR 0 7
81922: PUSH
81923: LD_VAR 0 4
81927: PPUSH
81928: CALL_OW 250
81932: PPUSH
81933: LD_VAR 0 4
81937: PPUSH
81938: CALL_OW 251
81942: PPUSH
81943: LD_INT 4
81945: PPUSH
81946: CALL 81519 0 3
81950: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81951: LD_VAR 0 4
81955: PPUSH
81956: CALL_OW 247
81960: PUSH
81961: LD_INT 2
81963: EQUAL
81964: IFFALSE 81976
81966: PUSH
81967: LD_VAR 0 7
81971: PUSH
81972: LD_INT 2
81974: GREATER
81975: AND
81976: IFFALSE 81996
81978: PUSH
81979: LD_VAR 0 4
81983: PPUSH
81984: CALL_OW 264
81988: PUSH
81989: LD_VAR 0 10
81993: IN
81994: NOT
81995: AND
81996: IFFALSE 82035
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81998: LD_VAR 0 4
82002: PPUSH
82003: LD_VAR 0 7
82007: PUSH
82008: LD_INT 1
82010: ARRAY
82011: PUSH
82012: LD_INT 1
82014: ARRAY
82015: PPUSH
82016: LD_VAR 0 7
82020: PUSH
82021: LD_INT 1
82023: ARRAY
82024: PUSH
82025: LD_INT 2
82027: ARRAY
82028: PPUSH
82029: CALL_OW 116
82033: GO 82324
// if path > tag then
82035: LD_VAR 0 2
82039: PUSH
82040: LD_VAR 0 9
82044: GREATER
82045: IFFALSE 82253
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82047: LD_ADDR_VAR 0 6
82051: PUSH
82052: LD_VAR 0 5
82056: PPUSH
82057: LD_INT 91
82059: PUSH
82060: LD_VAR 0 4
82064: PUSH
82065: LD_INT 8
82067: PUSH
82068: EMPTY
82069: LIST
82070: LIST
82071: LIST
82072: PPUSH
82073: CALL_OW 72
82077: ST_TO_ADDR
// if nearEnemy then
82078: LD_VAR 0 6
82082: IFFALSE 82151
// begin if GetWeapon ( i ) = ru_time_lapser then
82084: LD_VAR 0 4
82088: PPUSH
82089: CALL_OW 264
82093: PUSH
82094: LD_INT 49
82096: EQUAL
82097: IFFALSE 82125
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82099: LD_VAR 0 4
82103: PPUSH
82104: LD_VAR 0 6
82108: PPUSH
82109: LD_VAR 0 4
82113: PPUSH
82114: CALL_OW 74
82118: PPUSH
82119: CALL_OW 112
82123: GO 82149
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82125: LD_VAR 0 4
82129: PPUSH
82130: LD_VAR 0 6
82134: PPUSH
82135: LD_VAR 0 4
82139: PPUSH
82140: CALL_OW 74
82144: PPUSH
82145: CALL 83409 0 2
// end else
82149: GO 82251
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82151: LD_VAR 0 4
82155: PPUSH
82156: LD_VAR 0 2
82160: PUSH
82161: LD_VAR 0 9
82165: ARRAY
82166: PUSH
82167: LD_INT 1
82169: ARRAY
82170: PPUSH
82171: LD_VAR 0 2
82175: PUSH
82176: LD_VAR 0 9
82180: ARRAY
82181: PUSH
82182: LD_INT 2
82184: ARRAY
82185: PPUSH
82186: CALL_OW 297
82190: PUSH
82191: LD_INT 6
82193: GREATER
82194: IFFALSE 82237
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82196: LD_VAR 0 4
82200: PPUSH
82201: LD_VAR 0 2
82205: PUSH
82206: LD_VAR 0 9
82210: ARRAY
82211: PUSH
82212: LD_INT 1
82214: ARRAY
82215: PPUSH
82216: LD_VAR 0 2
82220: PUSH
82221: LD_VAR 0 9
82225: ARRAY
82226: PUSH
82227: LD_INT 2
82229: ARRAY
82230: PPUSH
82231: CALL_OW 114
82235: GO 82251
// SetTag ( i , tag ) ;
82237: LD_VAR 0 4
82241: PPUSH
82242: LD_VAR 0 9
82246: PPUSH
82247: CALL_OW 109
// end else
82251: GO 82324
// if enemy then
82253: LD_VAR 0 5
82257: IFFALSE 82324
// begin if GetWeapon ( i ) = ru_time_lapser then
82259: LD_VAR 0 4
82263: PPUSH
82264: CALL_OW 264
82268: PUSH
82269: LD_INT 49
82271: EQUAL
82272: IFFALSE 82300
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82274: LD_VAR 0 4
82278: PPUSH
82279: LD_VAR 0 5
82283: PPUSH
82284: LD_VAR 0 4
82288: PPUSH
82289: CALL_OW 74
82293: PPUSH
82294: CALL_OW 112
82298: GO 82324
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82300: LD_VAR 0 4
82304: PPUSH
82305: LD_VAR 0 5
82309: PPUSH
82310: LD_VAR 0 4
82314: PPUSH
82315: CALL_OW 74
82319: PPUSH
82320: CALL 83409 0 2
// end ; end ;
82324: GO 81896
82326: POP
82327: POP
// end ;
82328: LD_VAR 0 3
82332: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82333: LD_INT 0
82335: PPUSH
82336: PPUSH
82337: PPUSH
// if not unit or IsInUnit ( unit ) then
82338: LD_VAR 0 1
82342: NOT
82343: IFTRUE 82356
82345: PUSH
82346: LD_VAR 0 1
82350: PPUSH
82351: CALL_OW 310
82355: OR
82356: IFFALSE 82360
// exit ;
82358: GO 82451
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82360: LD_ADDR_VAR 0 4
82364: PUSH
82365: LD_VAR 0 1
82369: PPUSH
82370: CALL_OW 250
82374: PPUSH
82375: LD_VAR 0 2
82379: PPUSH
82380: LD_INT 1
82382: PPUSH
82383: CALL_OW 272
82387: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82388: LD_ADDR_VAR 0 5
82392: PUSH
82393: LD_VAR 0 1
82397: PPUSH
82398: CALL_OW 251
82402: PPUSH
82403: LD_VAR 0 2
82407: PPUSH
82408: LD_INT 1
82410: PPUSH
82411: CALL_OW 273
82415: ST_TO_ADDR
// if ValidHex ( x , y ) then
82416: LD_VAR 0 4
82420: PPUSH
82421: LD_VAR 0 5
82425: PPUSH
82426: CALL_OW 488
82430: IFFALSE 82451
// ComTurnXY ( unit , x , y ) ;
82432: LD_VAR 0 1
82436: PPUSH
82437: LD_VAR 0 4
82441: PPUSH
82442: LD_VAR 0 5
82446: PPUSH
82447: CALL_OW 118
// end ;
82451: LD_VAR 0 3
82455: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82456: LD_INT 0
82458: PPUSH
82459: PPUSH
// result := false ;
82460: LD_ADDR_VAR 0 3
82464: PUSH
82465: LD_INT 0
82467: ST_TO_ADDR
// if not units then
82468: LD_VAR 0 2
82472: NOT
82473: IFFALSE 82477
// exit ;
82475: GO 82522
// for i in units do
82477: LD_ADDR_VAR 0 4
82481: PUSH
82482: LD_VAR 0 2
82486: PUSH
82487: FOR_IN
82488: IFFALSE 82520
// if See ( side , i ) then
82490: LD_VAR 0 1
82494: PPUSH
82495: LD_VAR 0 4
82499: PPUSH
82500: CALL_OW 292
82504: IFFALSE 82518
// begin result := true ;
82506: LD_ADDR_VAR 0 3
82510: PUSH
82511: LD_INT 1
82513: ST_TO_ADDR
// exit ;
82514: POP
82515: POP
82516: GO 82522
// end ;
82518: GO 82487
82520: POP
82521: POP
// end ;
82522: LD_VAR 0 3
82526: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82527: LD_INT 0
82529: PPUSH
82530: PPUSH
82531: PPUSH
82532: PPUSH
// if not unit or not points then
82533: LD_VAR 0 1
82537: NOT
82538: IFTRUE 82547
82540: PUSH
82541: LD_VAR 0 2
82545: NOT
82546: OR
82547: IFFALSE 82551
// exit ;
82549: GO 82641
// dist := 99999 ;
82551: LD_ADDR_VAR 0 5
82555: PUSH
82556: LD_INT 99999
82558: ST_TO_ADDR
// for i in points do
82559: LD_ADDR_VAR 0 4
82563: PUSH
82564: LD_VAR 0 2
82568: PUSH
82569: FOR_IN
82570: IFFALSE 82639
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82572: LD_ADDR_VAR 0 6
82576: PUSH
82577: LD_VAR 0 1
82581: PPUSH
82582: LD_VAR 0 4
82586: PUSH
82587: LD_INT 1
82589: ARRAY
82590: PPUSH
82591: LD_VAR 0 4
82595: PUSH
82596: LD_INT 2
82598: ARRAY
82599: PPUSH
82600: CALL_OW 297
82604: ST_TO_ADDR
// if tmpDist < dist then
82605: LD_VAR 0 6
82609: PUSH
82610: LD_VAR 0 5
82614: LESS
82615: IFFALSE 82637
// begin result := i ;
82617: LD_ADDR_VAR 0 3
82621: PUSH
82622: LD_VAR 0 4
82626: ST_TO_ADDR
// dist := tmpDist ;
82627: LD_ADDR_VAR 0 5
82631: PUSH
82632: LD_VAR 0 6
82636: ST_TO_ADDR
// end ; end ;
82637: GO 82569
82639: POP
82640: POP
// end ;
82641: LD_VAR 0 3
82645: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82646: LD_INT 0
82648: PPUSH
// uc_side := side ;
82649: LD_ADDR_OWVAR 20
82653: PUSH
82654: LD_VAR 0 1
82658: ST_TO_ADDR
// uc_nation := 3 ;
82659: LD_ADDR_OWVAR 21
82663: PUSH
82664: LD_INT 3
82666: ST_TO_ADDR
// vc_chassis := 25 ;
82667: LD_ADDR_OWVAR 37
82671: PUSH
82672: LD_INT 25
82674: ST_TO_ADDR
// vc_engine := engine_siberite ;
82675: LD_ADDR_OWVAR 39
82679: PUSH
82680: LD_INT 3
82682: ST_TO_ADDR
// vc_control := control_computer ;
82683: LD_ADDR_OWVAR 38
82687: PUSH
82688: LD_INT 3
82690: ST_TO_ADDR
// vc_weapon := 59 ;
82691: LD_ADDR_OWVAR 40
82695: PUSH
82696: LD_INT 59
82698: ST_TO_ADDR
// result := CreateVehicle ;
82699: LD_ADDR_VAR 0 5
82703: PUSH
82704: CALL_OW 45
82708: ST_TO_ADDR
// SetDir ( result , d ) ;
82709: LD_VAR 0 5
82713: PPUSH
82714: LD_VAR 0 4
82718: PPUSH
82719: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82723: LD_VAR 0 5
82727: PPUSH
82728: LD_VAR 0 2
82732: PPUSH
82733: LD_VAR 0 3
82737: PPUSH
82738: LD_INT 0
82740: PPUSH
82741: CALL_OW 48
// end ;
82745: LD_VAR 0 5
82749: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82750: LD_INT 0
82752: PPUSH
82753: PPUSH
82754: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82755: LD_ADDR_VAR 0 2
82759: PUSH
82760: LD_INT 0
82762: PUSH
82763: LD_INT 0
82765: PUSH
82766: LD_INT 0
82768: PUSH
82769: LD_INT 0
82771: PUSH
82772: EMPTY
82773: LIST
82774: LIST
82775: LIST
82776: LIST
82777: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82778: LD_VAR 0 1
82782: NOT
82783: IFTRUE 82816
82785: PUSH
82786: LD_VAR 0 1
82790: PPUSH
82791: CALL_OW 264
82795: PUSH
82796: LD_INT 12
82798: PUSH
82799: LD_INT 51
82801: PUSH
82802: LD_INT 32
82804: PUSH
82805: LD_INT 89
82807: PUSH
82808: EMPTY
82809: LIST
82810: LIST
82811: LIST
82812: LIST
82813: IN
82814: NOT
82815: OR
82816: IFFALSE 82820
// exit ;
82818: GO 82918
// for i := 1 to 3 do
82820: LD_ADDR_VAR 0 3
82824: PUSH
82825: DOUBLE
82826: LD_INT 1
82828: DEC
82829: ST_TO_ADDR
82830: LD_INT 3
82832: PUSH
82833: FOR_TO
82834: IFFALSE 82916
// begin tmp := GetCargo ( cargo , i ) ;
82836: LD_ADDR_VAR 0 4
82840: PUSH
82841: LD_VAR 0 1
82845: PPUSH
82846: LD_VAR 0 3
82850: PPUSH
82851: CALL_OW 289
82855: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82856: LD_ADDR_VAR 0 2
82860: PUSH
82861: LD_VAR 0 2
82865: PPUSH
82866: LD_VAR 0 3
82870: PPUSH
82871: LD_VAR 0 4
82875: PPUSH
82876: CALL_OW 1
82880: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82881: LD_ADDR_VAR 0 2
82885: PUSH
82886: LD_VAR 0 2
82890: PPUSH
82891: LD_INT 4
82893: PPUSH
82894: LD_VAR 0 2
82898: PUSH
82899: LD_INT 4
82901: ARRAY
82902: PUSH
82903: LD_VAR 0 4
82907: PLUS
82908: PPUSH
82909: CALL_OW 1
82913: ST_TO_ADDR
// end ;
82914: GO 82833
82916: POP
82917: POP
// end ;
82918: LD_VAR 0 2
82922: RET
// export function Length ( array ) ; begin
82923: LD_INT 0
82925: PPUSH
// result := array + 0 ;
82926: LD_ADDR_VAR 0 2
82930: PUSH
82931: LD_VAR 0 1
82935: PUSH
82936: LD_INT 0
82938: PLUS
82939: ST_TO_ADDR
// end ;
82940: LD_VAR 0 2
82944: RET
// export function PrepareArray ( array ) ; begin
82945: LD_INT 0
82947: PPUSH
// result := array diff 0 ;
82948: LD_ADDR_VAR 0 2
82952: PUSH
82953: LD_VAR 0 1
82957: PUSH
82958: LD_INT 0
82960: DIFF
82961: ST_TO_ADDR
// if not result [ 1 ] then
82962: LD_VAR 0 2
82966: PUSH
82967: LD_INT 1
82969: ARRAY
82970: NOT
82971: IFFALSE 82991
// result := Delete ( result , 1 ) ;
82973: LD_ADDR_VAR 0 2
82977: PUSH
82978: LD_VAR 0 2
82982: PPUSH
82983: LD_INT 1
82985: PPUSH
82986: CALL_OW 3
82990: ST_TO_ADDR
// end ;
82991: LD_VAR 0 2
82995: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82996: LD_INT 0
82998: PPUSH
82999: PPUSH
83000: PPUSH
83001: PPUSH
// sibRocketRange := 25 ;
83002: LD_ADDR_VAR 0 6
83006: PUSH
83007: LD_INT 25
83009: ST_TO_ADDR
// result := false ;
83010: LD_ADDR_VAR 0 4
83014: PUSH
83015: LD_INT 0
83017: ST_TO_ADDR
// for i := 0 to 5 do
83018: LD_ADDR_VAR 0 5
83022: PUSH
83023: DOUBLE
83024: LD_INT 0
83026: DEC
83027: ST_TO_ADDR
83028: LD_INT 5
83030: PUSH
83031: FOR_TO
83032: IFFALSE 83099
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83034: LD_VAR 0 1
83038: PPUSH
83039: LD_VAR 0 5
83043: PPUSH
83044: LD_VAR 0 6
83048: PPUSH
83049: CALL_OW 272
83053: PPUSH
83054: LD_VAR 0 2
83058: PPUSH
83059: LD_VAR 0 5
83063: PPUSH
83064: LD_VAR 0 6
83068: PPUSH
83069: CALL_OW 273
83073: PPUSH
83074: LD_VAR 0 3
83078: PPUSH
83079: CALL_OW 309
83083: IFFALSE 83097
// begin result := true ;
83085: LD_ADDR_VAR 0 4
83089: PUSH
83090: LD_INT 1
83092: ST_TO_ADDR
// exit ;
83093: POP
83094: POP
83095: GO 83101
// end ;
83097: GO 83031
83099: POP
83100: POP
// end ;
83101: LD_VAR 0 4
83105: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83106: LD_INT 0
83108: PPUSH
83109: PPUSH
83110: PPUSH
// if btype = b_depot then
83111: LD_VAR 0 2
83115: PUSH
83116: LD_INT 0
83118: EQUAL
83119: IFFALSE 83131
// begin result := true ;
83121: LD_ADDR_VAR 0 3
83125: PUSH
83126: LD_INT 1
83128: ST_TO_ADDR
// exit ;
83129: GO 83251
// end ; pom := GetBase ( depot ) ;
83131: LD_ADDR_VAR 0 4
83135: PUSH
83136: LD_VAR 0 1
83140: PPUSH
83141: CALL_OW 274
83145: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83146: LD_ADDR_VAR 0 5
83150: PUSH
83151: LD_VAR 0 2
83155: PPUSH
83156: LD_VAR 0 1
83160: PPUSH
83161: CALL_OW 248
83165: PPUSH
83166: CALL_OW 450
83170: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83171: LD_ADDR_VAR 0 3
83175: PUSH
83176: LD_VAR 0 4
83180: PPUSH
83181: LD_INT 1
83183: PPUSH
83184: CALL_OW 275
83188: PUSH
83189: LD_VAR 0 5
83193: PUSH
83194: LD_INT 1
83196: ARRAY
83197: GREATEREQUAL
83198: IFFALSE 83224
83200: PUSH
83201: LD_VAR 0 4
83205: PPUSH
83206: LD_INT 2
83208: PPUSH
83209: CALL_OW 275
83213: PUSH
83214: LD_VAR 0 5
83218: PUSH
83219: LD_INT 2
83221: ARRAY
83222: GREATEREQUAL
83223: AND
83224: IFFALSE 83250
83226: PUSH
83227: LD_VAR 0 4
83231: PPUSH
83232: LD_INT 3
83234: PPUSH
83235: CALL_OW 275
83239: PUSH
83240: LD_VAR 0 5
83244: PUSH
83245: LD_INT 3
83247: ARRAY
83248: GREATEREQUAL
83249: AND
83250: ST_TO_ADDR
// end ;
83251: LD_VAR 0 3
83255: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83256: LD_INT 0
83258: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83259: LD_VAR 0 1
83263: PPUSH
83264: LD_VAR 0 2
83268: PPUSH
83269: LD_INT 0
83271: PPUSH
83272: LD_INT 0
83274: PPUSH
83275: LD_INT 1
83277: PPUSH
83278: LD_INT 0
83280: PPUSH
83281: CALL_OW 587
// end ;
83285: LD_VAR 0 3
83289: RET
// export function CenterOnNow ( unit ) ; begin
83290: LD_INT 0
83292: PPUSH
// result := IsInUnit ( unit ) ;
83293: LD_ADDR_VAR 0 2
83297: PUSH
83298: LD_VAR 0 1
83302: PPUSH
83303: CALL_OW 310
83307: ST_TO_ADDR
// if not result then
83308: LD_VAR 0 2
83312: NOT
83313: IFFALSE 83325
// result := unit ;
83315: LD_ADDR_VAR 0 2
83319: PUSH
83320: LD_VAR 0 1
83324: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83325: LD_VAR 0 1
83329: PPUSH
83330: CALL_OW 87
// end ;
83334: LD_VAR 0 2
83338: RET
// export function ComMoveHex ( unit , hex ) ; begin
83339: LD_INT 0
83341: PPUSH
// if not hex then
83342: LD_VAR 0 2
83346: NOT
83347: IFFALSE 83351
// exit ;
83349: GO 83404
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83351: LD_VAR 0 2
83355: PUSH
83356: LD_INT 1
83358: ARRAY
83359: PPUSH
83360: LD_VAR 0 2
83364: PUSH
83365: LD_INT 2
83367: ARRAY
83368: PPUSH
83369: CALL_OW 428
83373: IFFALSE 83377
// exit ;
83375: GO 83404
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83377: LD_VAR 0 1
83381: PPUSH
83382: LD_VAR 0 2
83386: PUSH
83387: LD_INT 1
83389: ARRAY
83390: PPUSH
83391: LD_VAR 0 2
83395: PUSH
83396: LD_INT 2
83398: ARRAY
83399: PPUSH
83400: CALL_OW 111
// end ;
83404: LD_VAR 0 3
83408: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83409: LD_INT 0
83411: PPUSH
83412: PPUSH
83413: PPUSH
// if not unit or not enemy then
83414: LD_VAR 0 1
83418: NOT
83419: IFTRUE 83428
83421: PUSH
83422: LD_VAR 0 2
83426: NOT
83427: OR
83428: IFFALSE 83432
// exit ;
83430: GO 83558
// x := GetX ( enemy ) ;
83432: LD_ADDR_VAR 0 4
83436: PUSH
83437: LD_VAR 0 2
83441: PPUSH
83442: CALL_OW 250
83446: ST_TO_ADDR
// y := GetY ( enemy ) ;
83447: LD_ADDR_VAR 0 5
83451: PUSH
83452: LD_VAR 0 2
83456: PPUSH
83457: CALL_OW 251
83461: ST_TO_ADDR
// if ValidHex ( x , y ) then
83462: LD_VAR 0 4
83466: PPUSH
83467: LD_VAR 0 5
83471: PPUSH
83472: CALL_OW 488
83476: IFFALSE 83558
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83478: LD_VAR 0 2
83482: PPUSH
83483: CALL_OW 247
83487: PUSH
83488: LD_INT 3
83490: PUSH
83491: LD_INT 2
83493: PUSH
83494: EMPTY
83495: LIST
83496: LIST
83497: IN
83498: IFTRUE 83521
83500: PUSH
83501: LD_VAR 0 1
83505: PPUSH
83506: CALL_OW 255
83510: PPUSH
83511: LD_VAR 0 2
83515: PPUSH
83516: CALL_OW 292
83520: OR
83521: IFFALSE 83539
// ComAttackUnit ( unit , enemy ) else
83523: LD_VAR 0 1
83527: PPUSH
83528: LD_VAR 0 2
83532: PPUSH
83533: CALL_OW 115
83537: GO 83558
// ComAgressiveMove ( unit , x , y ) ;
83539: LD_VAR 0 1
83543: PPUSH
83544: LD_VAR 0 4
83548: PPUSH
83549: LD_VAR 0 5
83553: PPUSH
83554: CALL_OW 114
// end ;
83558: LD_VAR 0 3
83562: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83563: LD_INT 0
83565: PPUSH
83566: PPUSH
83567: PPUSH
// list := AreaToList ( area , 0 ) ;
83568: LD_ADDR_VAR 0 5
83572: PUSH
83573: LD_VAR 0 1
83577: PPUSH
83578: LD_INT 0
83580: PPUSH
83581: CALL_OW 517
83585: ST_TO_ADDR
// if not list then
83586: LD_VAR 0 5
83590: NOT
83591: IFFALSE 83595
// exit ;
83593: GO 83725
// if all then
83595: LD_VAR 0 2
83599: IFFALSE 83687
// begin for i := 1 to list [ 1 ] do
83601: LD_ADDR_VAR 0 4
83605: PUSH
83606: DOUBLE
83607: LD_INT 1
83609: DEC
83610: ST_TO_ADDR
83611: LD_VAR 0 5
83615: PUSH
83616: LD_INT 1
83618: ARRAY
83619: PUSH
83620: FOR_TO
83621: IFFALSE 83683
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83623: LD_ADDR_VAR 0 3
83627: PUSH
83628: LD_VAR 0 3
83632: PPUSH
83633: LD_VAR 0 3
83637: PUSH
83638: LD_INT 1
83640: PLUS
83641: PPUSH
83642: LD_VAR 0 5
83646: PUSH
83647: LD_INT 1
83649: ARRAY
83650: PUSH
83651: LD_VAR 0 4
83655: ARRAY
83656: PUSH
83657: LD_VAR 0 5
83661: PUSH
83662: LD_INT 2
83664: ARRAY
83665: PUSH
83666: LD_VAR 0 4
83670: ARRAY
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PPUSH
83676: CALL_OW 1
83680: ST_TO_ADDR
83681: GO 83620
83683: POP
83684: POP
// exit ;
83685: GO 83725
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83687: LD_ADDR_VAR 0 3
83691: PUSH
83692: LD_VAR 0 5
83696: PUSH
83697: LD_INT 1
83699: ARRAY
83700: PUSH
83701: LD_INT 1
83703: ARRAY
83704: PUSH
83705: LD_VAR 0 5
83709: PUSH
83710: LD_INT 2
83712: ARRAY
83713: PUSH
83714: LD_INT 1
83716: ARRAY
83717: PUSH
83718: EMPTY
83719: LIST
83720: LIST
83721: PUSH
83722: EMPTY
83723: LIST
83724: ST_TO_ADDR
// end ;
83725: LD_VAR 0 3
83729: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83730: LD_INT 0
83732: PPUSH
83733: PPUSH
// list := AreaToList ( area , 0 ) ;
83734: LD_ADDR_VAR 0 4
83738: PUSH
83739: LD_VAR 0 1
83743: PPUSH
83744: LD_INT 0
83746: PPUSH
83747: CALL_OW 517
83751: ST_TO_ADDR
// if not list then
83752: LD_VAR 0 4
83756: NOT
83757: IFFALSE 83761
// exit ;
83759: GO 83802
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83761: LD_ADDR_VAR 0 3
83765: PUSH
83766: LD_VAR 0 4
83770: PUSH
83771: LD_INT 1
83773: ARRAY
83774: PUSH
83775: LD_INT 1
83777: ARRAY
83778: PUSH
83779: LD_VAR 0 4
83783: PUSH
83784: LD_INT 2
83786: ARRAY
83787: PUSH
83788: LD_INT 1
83790: ARRAY
83791: PUSH
83792: LD_VAR 0 2
83796: PUSH
83797: EMPTY
83798: LIST
83799: LIST
83800: LIST
83801: ST_TO_ADDR
// end ;
83802: LD_VAR 0 3
83806: RET
// export function First ( array ) ; begin
83807: LD_INT 0
83809: PPUSH
// if not array then
83810: LD_VAR 0 1
83814: NOT
83815: IFFALSE 83819
// exit ;
83817: GO 83833
// result := array [ 1 ] ;
83819: LD_ADDR_VAR 0 2
83823: PUSH
83824: LD_VAR 0 1
83828: PUSH
83829: LD_INT 1
83831: ARRAY
83832: ST_TO_ADDR
// end ;
83833: LD_VAR 0 2
83837: RET
// export function Last ( array ) ; begin
83838: LD_INT 0
83840: PPUSH
// if not array then
83841: LD_VAR 0 1
83845: NOT
83846: IFFALSE 83850
// exit ;
83848: GO 83866
// result := array [ array ] ;
83850: LD_ADDR_VAR 0 2
83854: PUSH
83855: LD_VAR 0 1
83859: PUSH
83860: LD_VAR 0 1
83864: ARRAY
83865: ST_TO_ADDR
// end ;
83866: LD_VAR 0 2
83870: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83871: LD_INT 0
83873: PPUSH
83874: PPUSH
// result := [ ] ;
83875: LD_ADDR_VAR 0 5
83879: PUSH
83880: EMPTY
83881: ST_TO_ADDR
// if not array then
83882: LD_VAR 0 1
83886: NOT
83887: IFFALSE 83891
// exit ;
83889: GO 84003
// for i := 1 to array do
83891: LD_ADDR_VAR 0 6
83895: PUSH
83896: DOUBLE
83897: LD_INT 1
83899: DEC
83900: ST_TO_ADDR
83901: LD_VAR 0 1
83905: PUSH
83906: FOR_TO
83907: IFFALSE 84001
// if array [ i ] [ index ] = value then
83909: LD_VAR 0 1
83913: PUSH
83914: LD_VAR 0 6
83918: ARRAY
83919: PUSH
83920: LD_VAR 0 2
83924: ARRAY
83925: PUSH
83926: LD_VAR 0 3
83930: EQUAL
83931: IFFALSE 83999
// begin if indexColumn then
83933: LD_VAR 0 4
83937: IFFALSE 83973
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83939: LD_ADDR_VAR 0 5
83943: PUSH
83944: LD_VAR 0 5
83948: PPUSH
83949: LD_VAR 0 1
83953: PUSH
83954: LD_VAR 0 6
83958: ARRAY
83959: PUSH
83960: LD_VAR 0 4
83964: ARRAY
83965: PPUSH
83966: CALL 79011 0 2
83970: ST_TO_ADDR
83971: GO 83999
// result := Join ( result , array [ i ] ) ;
83973: LD_ADDR_VAR 0 5
83977: PUSH
83978: LD_VAR 0 5
83982: PPUSH
83983: LD_VAR 0 1
83987: PUSH
83988: LD_VAR 0 6
83992: ARRAY
83993: PPUSH
83994: CALL 79011 0 2
83998: ST_TO_ADDR
// end ;
83999: GO 83906
84001: POP
84002: POP
// end ;
84003: LD_VAR 0 5
84007: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84008: LD_INT 0
84010: PPUSH
// if not vehicles or not parkingPoint then
84011: LD_VAR 0 1
84015: NOT
84016: IFTRUE 84025
84018: PUSH
84019: LD_VAR 0 2
84023: NOT
84024: OR
84025: IFFALSE 84029
// exit ;
84027: GO 84127
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84029: LD_ADDR_VAR 0 1
84033: PUSH
84034: LD_VAR 0 1
84038: PPUSH
84039: LD_INT 50
84041: PUSH
84042: EMPTY
84043: LIST
84044: PUSH
84045: LD_INT 3
84047: PUSH
84048: LD_INT 92
84050: PUSH
84051: LD_VAR 0 2
84055: PUSH
84056: LD_INT 1
84058: ARRAY
84059: PUSH
84060: LD_VAR 0 2
84064: PUSH
84065: LD_INT 2
84067: ARRAY
84068: PUSH
84069: LD_INT 8
84071: PUSH
84072: EMPTY
84073: LIST
84074: LIST
84075: LIST
84076: LIST
84077: PUSH
84078: EMPTY
84079: LIST
84080: LIST
84081: PUSH
84082: EMPTY
84083: LIST
84084: LIST
84085: PPUSH
84086: CALL_OW 72
84090: ST_TO_ADDR
// if not vehicles then
84091: LD_VAR 0 1
84095: NOT
84096: IFFALSE 84100
// exit ;
84098: GO 84127
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84100: LD_VAR 0 1
84104: PPUSH
84105: LD_VAR 0 2
84109: PUSH
84110: LD_INT 1
84112: ARRAY
84113: PPUSH
84114: LD_VAR 0 2
84118: PUSH
84119: LD_INT 2
84121: ARRAY
84122: PPUSH
84123: CALL_OW 111
// end ;
84127: LD_VAR 0 3
84131: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84132: LD_INT 0
84134: PPUSH
84135: PPUSH
84136: PPUSH
// if not side or not area then
84137: LD_VAR 0 1
84141: NOT
84142: IFTRUE 84151
84144: PUSH
84145: LD_VAR 0 2
84149: NOT
84150: OR
84151: IFFALSE 84155
// exit ;
84153: GO 84274
// tmp := AreaToList ( area , 0 ) ;
84155: LD_ADDR_VAR 0 5
84159: PUSH
84160: LD_VAR 0 2
84164: PPUSH
84165: LD_INT 0
84167: PPUSH
84168: CALL_OW 517
84172: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84173: LD_ADDR_VAR 0 4
84177: PUSH
84178: DOUBLE
84179: LD_INT 1
84181: DEC
84182: ST_TO_ADDR
84183: LD_VAR 0 5
84187: PUSH
84188: LD_INT 1
84190: ARRAY
84191: PUSH
84192: FOR_TO
84193: IFFALSE 84272
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84195: LD_VAR 0 5
84199: PUSH
84200: LD_INT 1
84202: ARRAY
84203: PUSH
84204: LD_VAR 0 4
84208: ARRAY
84209: PPUSH
84210: LD_VAR 0 5
84214: PUSH
84215: LD_INT 2
84217: ARRAY
84218: PUSH
84219: LD_VAR 0 4
84223: ARRAY
84224: PPUSH
84225: CALL_OW 351
84229: IFFALSE 84270
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84231: LD_VAR 0 5
84235: PUSH
84236: LD_INT 1
84238: ARRAY
84239: PUSH
84240: LD_VAR 0 4
84244: ARRAY
84245: PPUSH
84246: LD_VAR 0 5
84250: PUSH
84251: LD_INT 2
84253: ARRAY
84254: PUSH
84255: LD_VAR 0 4
84259: ARRAY
84260: PPUSH
84261: LD_VAR 0 1
84265: PPUSH
84266: CALL_OW 244
// end ;
84270: GO 84192
84272: POP
84273: POP
// end ;
84274: LD_VAR 0 3
84278: RET
// export function UniqueArray ( array ) ; var i ; begin
84279: LD_INT 0
84281: PPUSH
84282: PPUSH
// result := [ ] ;
84283: LD_ADDR_VAR 0 2
84287: PUSH
84288: EMPTY
84289: ST_TO_ADDR
// if not array then
84290: LD_VAR 0 1
84294: NOT
84295: IFFALSE 84299
// exit ;
84297: GO 84360
// for i := 1 to array do
84299: LD_ADDR_VAR 0 3
84303: PUSH
84304: DOUBLE
84305: LD_INT 1
84307: DEC
84308: ST_TO_ADDR
84309: LD_VAR 0 1
84313: PUSH
84314: FOR_TO
84315: IFFALSE 84358
// if not array [ i ] in result then
84317: LD_VAR 0 1
84321: PUSH
84322: LD_VAR 0 3
84326: ARRAY
84327: PUSH
84328: LD_VAR 0 2
84332: IN
84333: NOT
84334: IFFALSE 84356
// result := Join ( result , i ) ;
84336: LD_ADDR_VAR 0 2
84340: PUSH
84341: LD_VAR 0 2
84345: PPUSH
84346: LD_VAR 0 3
84350: PPUSH
84351: CALL 79011 0 2
84355: ST_TO_ADDR
84356: GO 84314
84358: POP
84359: POP
// end ; end_of_file
84360: LD_VAR 0 2
84364: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84365: LD_VAR 0 1
84369: PPUSH
84370: LD_VAR 0 2
84374: PPUSH
84375: LD_VAR 0 3
84379: PPUSH
84380: LD_VAR 0 4
84384: PPUSH
84385: LD_VAR 0 5
84389: PPUSH
84390: LD_VAR 0 6
84394: PPUSH
84395: CALL 18267 0 6
// end ;
84399: PPOPN 6
84401: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84402: LD_INT 0
84404: PPUSH
// begin if not units then
84405: LD_VAR 0 1
84409: NOT
84410: IFFALSE 84414
// exit ;
84412: GO 84448
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
84414: LD_VAR 0 1
84418: PPUSH
84419: LD_VAR 0 2
84423: PPUSH
84424: LD_VAR 0 3
84428: PPUSH
84429: LD_VAR 0 4
84433: PPUSH
84434: LD_VAR 0 5
84438: PPUSH
84439: LD_VAR 0 6
84443: PPUSH
84444: CALL 40784 0 6
// end ;
84448: PPOPN 7
84450: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84451: CALL 18147 0 0
// end ;
84455: PPOPN 1
84457: END
