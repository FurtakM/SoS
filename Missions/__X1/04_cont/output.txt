// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 841 0 0
// PrepareArabian ;
  12: CALL 1215 0 0
// PrepareAmerican ;
  16: CALL 6234 0 0
// PrepareRussian ;
  20: CALL 2171 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 7794 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 , 22 22$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 52500
 188: PUSH
 189: LD_INT 50400
 191: PUSH
 192: LD_INT 48300
 194: PUSH
 195: LD_INT 46200
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// end ;
 289: LD_VAR 0 1
 293: RET
// every 0 0$1 trigger debug do var i ;
 294: LD_EXP 1
 298: IFFALSE 367
 300: GO 302
 302: DISABLE
 303: LD_INT 0
 305: PPUSH
// begin enable ;
 306: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: LD_INT 21
 327: PUSH
 328: LD_INT 3
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: FOR_IN
 349: IFFALSE 365
// SetLives ( i , 1000 ) ;
 351: LD_VAR 0 1
 355: PPUSH
 356: LD_INT 1000
 358: PPUSH
 359: CALL_OW 234
 363: GO 348
 365: POP
 366: POP
// end ; end_of_file
 367: PPOPN 1
 369: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 370: LD_INT 0
 372: PPUSH
// uc_side := side ;
 373: LD_ADDR_OWVAR 20
 377: PUSH
 378: LD_VAR 0 1
 382: ST_TO_ADDR
// uc_nation := nation ;
 383: LD_ADDR_OWVAR 21
 387: PUSH
 388: LD_VAR 0 2
 392: ST_TO_ADDR
// vc_chassis := chassis ;
 393: LD_ADDR_OWVAR 37
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// vc_engine := engine ;
 403: LD_ADDR_OWVAR 39
 407: PUSH
 408: LD_VAR 0 4
 412: ST_TO_ADDR
// vc_control := control ;
 413: LD_ADDR_OWVAR 38
 417: PUSH
 418: LD_VAR 0 5
 422: ST_TO_ADDR
// vc_weapon := weapon ;
 423: LD_ADDR_OWVAR 40
 427: PUSH
 428: LD_VAR 0 6
 432: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 433: LD_ADDR_OWVAR 41
 437: PUSH
 438: LD_VAR 0 7
 442: ST_TO_ADDR
// result := CreateVehicle ;
 443: LD_ADDR_VAR 0 8
 447: PUSH
 448: CALL_OW 45
 452: ST_TO_ADDR
// end ;
 453: LD_VAR 0 8
 457: RET
// export function SayX ( units , ident ) ; var i ; begin
 458: LD_INT 0
 460: PPUSH
 461: PPUSH
// result := false ;
 462: LD_ADDR_VAR 0 3
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// if not units then
 470: LD_VAR 0 1
 474: NOT
 475: IFFALSE 479
// exit ;
 477: GO 533
// for i in units do
 479: LD_ADDR_VAR 0 4
 483: PUSH
 484: LD_VAR 0 1
 488: PUSH
 489: FOR_IN
 490: IFFALSE 531
// if IsOk ( i ) then
 492: LD_VAR 0 4
 496: PPUSH
 497: CALL_OW 302
 501: IFFALSE 529
// begin Say ( i , ident ) ;
 503: LD_VAR 0 4
 507: PPUSH
 508: LD_VAR 0 2
 512: PPUSH
 513: CALL_OW 88
// result := i ;
 517: LD_ADDR_VAR 0 3
 521: PUSH
 522: LD_VAR 0 4
 526: ST_TO_ADDR
// break ;
 527: GO 531
// end ;
 529: GO 489
 531: POP
 532: POP
// end ;
 533: LD_VAR 0 3
 537: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 538: LD_INT 0
 540: PPUSH
 541: PPUSH
 542: PPUSH
// if not observer or not unit then
 543: LD_VAR 0 1
 547: NOT
 548: PUSH
 549: LD_VAR 0 2
 553: NOT
 554: OR
 555: IFFALSE 559
// exit ;
 557: GO 607
// if not See ( GetSide ( observer ) , unit ) then
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 255
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 292
 578: NOT
 579: IFFALSE 583
// exit ;
 581: GO 607
// result := GetDistUnits ( observer , unit ) < 12 ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: LD_VAR 0 2
 597: PPUSH
 598: CALL_OW 296
 602: PUSH
 603: LD_INT 12
 605: LESS
 606: ST_TO_ADDR
// end ;
 607: LD_VAR 0 3
 611: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 612: LD_INT 0
 614: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 615: LD_VAR 0 2
 619: PUSH
 620: LD_INT 1
 622: ARRAY
 623: PPUSH
 624: LD_VAR 0 2
 628: PUSH
 629: LD_INT 2
 631: ARRAY
 632: PPUSH
 633: CALL_OW 488
 637: PUSH
 638: LD_VAR 0 2
 642: PUSH
 643: LD_INT 1
 645: ARRAY
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: ARRAY
 655: PPUSH
 656: CALL_OW 428
 660: PUSH
 661: LD_INT 0
 663: EQUAL
 664: AND
 665: IFFALSE 699
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 667: LD_VAR 0 1
 671: PPUSH
 672: LD_VAR 0 2
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PPUSH
 681: LD_VAR 0 2
 685: PUSH
 686: LD_INT 2
 688: ARRAY
 689: PPUSH
 690: LD_VAR 0 3
 694: PPUSH
 695: CALL_OW 48
// end ;
 699: LD_VAR 0 4
 703: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 704: LD_INT 0
 706: PPUSH
 707: PPUSH
// InitUc ;
 708: CALL_OW 18
// InitHc ;
 712: CALL_OW 19
// uc_side := 0 ;
 716: LD_ADDR_OWVAR 20
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// uc_nation := 0 ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// for i = 1 to amount do
 732: LD_ADDR_VAR 0 4
 736: PUSH
 737: DOUBLE
 738: LD_INT 1
 740: DEC
 741: ST_TO_ADDR
 742: LD_VAR 0 2
 746: PUSH
 747: FOR_TO
 748: IFFALSE 830
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 750: LD_ADDR_OWVAR 29
 754: PUSH
 755: LD_INT 9
 757: PPUSH
 758: LD_INT 12
 760: PPUSH
 761: CALL_OW 12
 765: PUSH
 766: LD_INT 9
 768: PPUSH
 769: LD_INT 12
 771: PPUSH
 772: CALL_OW 12
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 781: LD_ADDR_OWVAR 35
 785: PUSH
 786: LD_INT 1
 788: NEG
 789: PPUSH
 790: LD_INT 1
 792: PPUSH
 793: CALL_OW 12
 797: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_INT 12
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 811: CALL_OW 44
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 0
 823: PPUSH
 824: CALL_OW 49
// end ;
 828: GO 747
 830: POP
 831: POP
// InitHc ;
 832: CALL_OW 19
// end ;
 836: LD_VAR 0 3
 840: RET
// export function CreateNature ; var i ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 845: LD_INT 18
 847: PPUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 3
 856: PUSH
 857: LD_INT 2
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: PPUSH
 872: CALL 704 0 2
// for i := 1 to 3 do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: DOUBLE
 882: LD_INT 1
 884: DEC
 885: ST_TO_ADDR
 886: LD_INT 3
 888: PUSH
 889: FOR_TO
 890: IFFALSE 925
// begin hc_class := 21 ;
 892: LD_ADDR_OWVAR 28
 896: PUSH
 897: LD_INT 21
 899: ST_TO_ADDR
// hc_gallery :=  ;
 900: LD_ADDR_OWVAR 33
 904: PUSH
 905: LD_STRING 
 907: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 908: CALL_OW 44
 912: PPUSH
 913: LD_INT 18
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 49
// end ;
 923: GO 889
 925: POP
 926: POP
// for i := 1 to 2 do
 927: LD_ADDR_VAR 0 2
 931: PUSH
 932: DOUBLE
 933: LD_INT 1
 935: DEC
 936: ST_TO_ADDR
 937: LD_INT 2
 939: PUSH
 940: FOR_TO
 941: IFFALSE 976
// begin hc_class := 18 ;
 943: LD_ADDR_OWVAR 28
 947: PUSH
 948: LD_INT 18
 950: ST_TO_ADDR
// hc_gallery :=  ;
 951: LD_ADDR_OWVAR 33
 955: PUSH
 956: LD_STRING 
 958: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 959: CALL_OW 44
 963: PPUSH
 964: LD_INT 18
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL_OW 49
// end ;
 974: GO 940
 976: POP
 977: POP
// for i := 1 to 2 do
 978: LD_ADDR_VAR 0 2
 982: PUSH
 983: DOUBLE
 984: LD_INT 1
 986: DEC
 987: ST_TO_ADDR
 988: LD_INT 2
 990: PUSH
 991: FOR_TO
 992: IFFALSE 1027
// begin hc_class := 13 ;
 994: LD_ADDR_OWVAR 28
 998: PUSH
 999: LD_INT 13
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1010: CALL_OW 44
1014: PPUSH
1015: LD_INT 18
1017: PPUSH
1018: LD_INT 0
1020: PPUSH
1021: CALL_OW 49
// end ;
1025: GO 991
1027: POP
1028: POP
// end ;
1029: LD_VAR 0 1
1033: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
1038: PPUSH
1039: PPUSH
1040: PPUSH
// result := false ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: LD_INT 0
1048: ST_TO_ADDR
// if not sideList or not enemySide then
1049: LD_VAR 0 1
1053: NOT
1054: PUSH
1055: LD_VAR 0 2
1059: NOT
1060: OR
1061: IFFALSE 1065
// exit ;
1063: GO 1210
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1065: LD_ADDR_VAR 0 7
1069: PUSH
1070: LD_INT 22
1072: PUSH
1073: LD_VAR 0 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: ST_TO_ADDR
// if not tmp then
1087: LD_VAR 0 7
1091: NOT
1092: IFFALSE 1096
// exit ;
1094: GO 1210
// for s in sideList do
1096: LD_ADDR_VAR 0 6
1100: PUSH
1101: LD_VAR 0 1
1105: PUSH
1106: FOR_IN
1107: IFFALSE 1208
// for i in tmp do
1109: LD_ADDR_VAR 0 5
1113: PUSH
1114: LD_VAR 0 7
1118: PUSH
1119: FOR_IN
1120: IFFALSE 1204
// if See ( s , i ) then
1122: LD_VAR 0 6
1126: PPUSH
1127: LD_VAR 0 5
1131: PPUSH
1132: CALL_OW 292
1136: IFFALSE 1202
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1138: LD_ADDR_VAR 0 8
1142: PUSH
1143: LD_INT 22
1145: PUSH
1146: LD_VAR 0 6
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: PPUSH
1155: CALL_OW 69
1159: PPUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: CALL_OW 74
1169: ST_TO_ADDR
// if tmp2 in exceptUnits then
1170: LD_VAR 0 8
1174: PUSH
1175: LD_VAR 0 3
1179: IN
1180: IFFALSE 1186
// continue else
1182: GO 1119
1184: GO 1202
// begin result := tmp2 ;
1186: LD_ADDR_VAR 0 4
1190: PUSH
1191: LD_VAR 0 8
1195: ST_TO_ADDR
// exit ;
1196: POP
1197: POP
1198: POP
1199: POP
1200: GO 1210
// end ; end ;
1202: GO 1119
1204: POP
1205: POP
1206: GO 1106
1208: POP
1209: POP
// end ; end_of_file
1210: LD_VAR 0 4
1214: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
// uc_side := 5 ;
1219: LD_ADDR_OWVAR 20
1223: PUSH
1224: LD_INT 5
1226: ST_TO_ADDR
// uc_nation := 2 ;
1227: LD_ADDR_OWVAR 21
1231: PUSH
1232: LD_INT 2
1234: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1235: LD_ADDR_EXP 36
1239: PUSH
1240: LD_STRING Abdul
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_STRING 
1248: PPUSH
1249: CALL 35096 0 3
1253: ST_TO_ADDR
// uc_side := 2 ;
1254: LD_ADDR_OWVAR 20
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// uc_nation := 2 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 2
1269: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1270: LD_ADDR_EXP 25
1274: PUSH
1275: LD_STRING Heike
1277: PPUSH
1278: LD_EXP 1
1282: NOT
1283: PPUSH
1284: LD_EXP 2
1288: PPUSH
1289: CALL 35096 0 3
1293: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1294: LD_ADDR_EXP 28
1298: PUSH
1299: LD_STRING Ibrahim
1301: PPUSH
1302: LD_EXP 1
1306: NOT
1307: PPUSH
1308: LD_EXP 2
1312: PPUSH
1313: CALL 35096 0 3
1317: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Givi
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 35096 0 3
1341: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Kamil
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 35096 0 3
1365: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 30
1370: PUSH
1371: LD_STRING Kaia
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 35096 0 3
1389: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 31
1394: PUSH
1395: LD_STRING Sophia
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 35096 0 3
1413: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 32
1418: PUSH
1419: LD_STRING Markov
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 35096 0 3
1437: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 35
1442: PUSH
1443: LD_STRING Aviradze
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 35096 0 3
1461: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1462: LD_ADDR_EXP 39
1466: PUSH
1467: EMPTY
1468: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1469: LD_ADDR_EXP 37
1473: PUSH
1474: LD_STRING 03_others
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// uc_side := 5 ;
1482: LD_ADDR_OWVAR 20
1486: PUSH
1487: LD_INT 5
1489: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1490: LD_ADDR_EXP 34
1494: PUSH
1495: LD_STRING Kurt
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_STRING 
1503: PPUSH
1504: CALL 35096 0 3
1508: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Mike
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 35096 0 3
1532: ST_TO_ADDR
// if Mike then
1533: LD_EXP 27
1537: IFFALSE 1560
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1539: LD_EXP 27
1543: PPUSH
1544: LD_INT 142
1546: PPUSH
1547: LD_INT 63
1549: PPUSH
1550: LD_INT 2
1552: PPUSH
1553: LD_INT 0
1555: PPUSH
1556: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1560: LD_EXP 34
1564: PPUSH
1565: LD_INT 142
1567: PPUSH
1568: LD_INT 63
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1581: LD_EXP 34
1585: PUSH
1586: LD_EXP 27
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 140
// end ;
1599: LD_VAR 0 1
1603: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// uc_side := 5 ;
1610: LD_ADDR_OWVAR 20
1614: PUSH
1615: LD_INT 5
1617: ST_TO_ADDR
// uc_nation := 2 ;
1618: LD_ADDR_OWVAR 21
1622: PUSH
1623: LD_INT 2
1625: ST_TO_ADDR
// InitHc ;
1626: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1630: LD_ADDR_EXP 33
1634: PUSH
1635: LD_STRING Omar
1637: PPUSH
1638: LD_INT 0
1640: PPUSH
1641: LD_STRING 
1643: PPUSH
1644: CALL 35096 0 3
1648: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1649: LD_EXP 33
1653: PPUSH
1654: LD_INT 284
1656: PPUSH
1657: LD_INT 163
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1667: LD_EXP 33
1671: PPUSH
1672: LD_INT 256
1674: PPUSH
1675: LD_INT 129
1677: PPUSH
1678: CALL_OW 111
// wait ( 0 0$2 ) ;
1682: LD_INT 70
1684: PPUSH
1685: CALL_OW 67
// omarSquad := [ ] ;
1689: LD_ADDR_EXP 38
1693: PUSH
1694: EMPTY
1695: ST_TO_ADDR
// for i := 1 to 5 do
1696: LD_ADDR_VAR 0 2
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: FOR_TO
1710: IFFALSE 1916
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1712: LD_INT 5
1714: PPUSH
1715: LD_INT 2
1717: PPUSH
1718: LD_INT 13
1720: PUSH
1721: LD_INT 14
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: MOD
1736: PUSH
1737: LD_INT 1
1739: PLUS
1740: ARRAY
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 27
1753: PUSH
1754: LD_INT 26
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_VAR 0 2
1766: PUSH
1767: LD_INT 3
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 100
1778: PPUSH
1779: CALL 370 0 7
// veh := CreateVehicle ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: CALL_OW 45
1792: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1793: LD_VAR 0 4
1797: PPUSH
1798: LD_INT 5
1800: PPUSH
1801: CALL_OW 233
// omarSquad := omarSquad union veh ;
1805: LD_ADDR_EXP 38
1809: PUSH
1810: LD_EXP 38
1814: PUSH
1815: LD_VAR 0 4
1819: UNION
1820: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 284
1828: PPUSH
1829: LD_INT 163
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1839: LD_INT 0
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 380
// un := CreateHuman ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: CALL_OW 44
1861: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_EXP 38
1871: PUSH
1872: LD_VAR 0 3
1876: UNION
1877: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 271
1899: PPUSH
1900: LD_INT 144
1902: PPUSH
1903: CALL_OW 111
// wait ( 0 0$2 ) ;
1907: LD_INT 70
1909: PPUSH
1910: CALL_OW 67
// end ;
1914: GO 1709
1916: POP
1917: POP
// for i := 1 to 3 do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: DOUBLE
1924: LD_INT 1
1926: DEC
1927: ST_TO_ADDR
1928: LD_INT 3
1930: PUSH
1931: FOR_TO
1932: IFFALSE 2015
// begin PrepareHuman ( false , 1 , 2 ) ;
1934: LD_INT 0
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: LD_INT 2
1942: PPUSH
1943: CALL_OW 380
// un := CreateHuman ;
1947: LD_ADDR_VAR 0 3
1951: PUSH
1952: CALL_OW 44
1956: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1957: LD_ADDR_EXP 38
1961: PUSH
1962: LD_EXP 38
1966: PUSH
1967: LD_VAR 0 3
1971: UNION
1972: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 284
1980: PPUSH
1981: LD_INT 163
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
1991: LD_VAR 0 3
1995: PPUSH
1996: LD_INT 257
1998: PPUSH
1999: LD_INT 138
2001: PPUSH
2002: CALL_OW 111
// wait ( 0 0$1 ) ;
2006: LD_INT 35
2008: PPUSH
2009: CALL_OW 67
// end ;
2013: GO 1931
2015: POP
2016: POP
// for i := 1 to 6 do
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: DOUBLE
2023: LD_INT 1
2025: DEC
2026: ST_TO_ADDR
2027: LD_INT 6
2029: PUSH
2030: FOR_TO
2031: IFFALSE 2164
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2033: LD_INT 0
2035: PPUSH
2036: LD_INT 1
2038: PUSH
2039: LD_INT 1
2041: PUSH
2042: LD_INT 4
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 3
2057: MOD
2058: PUSH
2059: LD_INT 1
2061: PLUS
2062: ARRAY
2063: PPUSH
2064: LD_INT 3
2066: PPUSH
2067: CALL_OW 380
// un := CreateHuman ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 44
2080: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2081: LD_ADDR_EXP 38
2085: PUSH
2086: LD_EXP 38
2090: PUSH
2091: LD_VAR 0 3
2095: UNION
2096: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 225
2104: PPUSH
2105: LD_INT 163
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL_OW 48
// if i = 1 then
2115: LD_VAR 0 2
2119: PUSH
2120: LD_INT 1
2122: EQUAL
2123: IFFALSE 2140
// SetAttr ( un , attr_speed , 12 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 2
2132: PPUSH
2133: LD_INT 12
2135: PPUSH
2136: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2140: LD_VAR 0 3
2144: PPUSH
2145: LD_INT 222
2147: PPUSH
2148: LD_INT 157
2150: PPUSH
2151: CALL_OW 111
// wait ( 0 0$1 ) ;
2155: LD_INT 35
2157: PPUSH
2158: CALL_OW 67
// end ;
2162: GO 2030
2164: POP
2165: POP
// end ; end_of_file
2166: LD_VAR 0 1
2170: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2171: LD_INT 0
2173: PPUSH
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2179: LD_INT 3
2181: PPUSH
2182: LD_INT 149
2184: PPUSH
2185: LD_INT 67
2187: PPUSH
2188: CALL_OW 428
2192: PPUSH
2193: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2197: LD_ADDR_EXP 50
2201: PUSH
2202: LD_INT 111
2204: PPUSH
2205: LD_INT 89
2207: PPUSH
2208: CALL_OW 428
2212: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: LD_INT 21
2220: PUSH
2221: LD_INT 3
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PPUSH
2242: CALL_OW 69
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2264
// SetBLevel ( i , 5 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 5
2257: PPUSH
2258: CALL_OW 241
2262: GO 2247
2264: POP
2265: POP
// SetBName ( kirov , kirov ) ;
2266: LD_INT 71
2268: PPUSH
2269: LD_STRING kirov
2271: PPUSH
2272: CALL_OW 500
// SetBName ( beria , beria ) ;
2276: LD_INT 106
2278: PPUSH
2279: LD_STRING beria
2281: PPUSH
2282: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2286: LD_INT 112
2288: PPUSH
2289: LD_STRING kagan
2291: PPUSH
2292: CALL_OW 500
// uc_side := 6 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 6
2303: ST_TO_ADDR
// uc_nation := 3 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 3
2311: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2312: LD_ADDR_VAR 0 5
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 6
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 30
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2350: LD_ADDR_VAR 0 4
2354: PUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 4
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2388: LD_ADDR_EXP 44
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2395: LD_ADDR_EXP 45
2399: PUSH
2400: EMPTY
2401: ST_TO_ADDR
// russianPatrol := [ ] ;
2402: LD_ADDR_EXP 47
2406: PUSH
2407: EMPTY
2408: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2409: LD_ADDR_EXP 40
2413: PUSH
2414: LD_STRING Kurin
2416: PPUSH
2417: LD_INT 0
2419: PPUSH
2420: LD_STRING 
2422: PPUSH
2423: CALL 35096 0 3
2427: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2428: LD_EXP 40
2432: PPUSH
2433: LD_INT 71
2435: PPUSH
2436: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_STRING Popov
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: LD_STRING 
2453: PPUSH
2454: CALL 35096 0 3
2458: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2459: LD_EXP 42
2463: PPUSH
2464: LD_INT 71
2466: PPUSH
2467: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2471: LD_ADDR_EXP 41
2475: PUSH
2476: LD_STRING Grishko
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: LD_STRING 
2484: PPUSH
2485: CALL 35096 0 3
2489: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2490: LD_EXP 41
2494: PPUSH
2495: LD_INT 207
2497: PPUSH
2498: LD_INT 106
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2508: LD_EXP 41
2512: PPUSH
2513: LD_INT 209
2515: PPUSH
2516: LD_INT 106
2518: PPUSH
2519: CALL_OW 118
// for i := 1 to 2 do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_INT 2
2535: PUSH
2536: FOR_TO
2537: IFFALSE 2592
// begin PrepareHuman ( false , 2 , 2 ) ;
2539: LD_INT 0
2541: PPUSH
2542: LD_INT 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: CALL_OW 380
// un := CreateHuman ;
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: CALL_OW 44
2561: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 71
2569: PPUSH
2570: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2574: LD_ADDR_EXP 44
2578: PUSH
2579: LD_EXP 44
2583: PUSH
2584: LD_VAR 0 3
2588: UNION
2589: ST_TO_ADDR
// end ;
2590: GO 2536
2592: POP
2593: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2594: LD_ADDR_VAR 0 2
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 5
2606: PUSH
2607: LD_INT 6
2609: PUSH
2610: LD_INT 6
2612: PUSH
2613: LD_INT 6
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: PUSH
2622: LD_OWVAR 67
2626: ARRAY
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2707
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_INT 2
2639: PUSH
2640: LD_INT 3
2642: PUSH
2643: LD_INT 4
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: PUSH
2655: LD_OWVAR 67
2659: ARRAY
2660: PPUSH
2661: CALL_OW 380
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2689: LD_ADDR_EXP 44
2693: PUSH
2694: LD_EXP 44
2698: PUSH
2699: LD_VAR 0 3
2703: UNION
2704: ST_TO_ADDR
// end ;
2705: GO 2628
2707: POP
2708: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 32
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PPUSH
2738: CALL_OW 69
2742: PUSH
2743: FOR_IN
2744: IFFALSE 2822
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: LD_INT 3
2754: PUSH
2755: LD_INT 4
2757: PUSH
2758: LD_INT 4
2760: PUSH
2761: LD_INT 5
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: PUSH
2770: LD_OWVAR 67
2774: ARRAY
2775: PPUSH
2776: CALL_OW 380
// un := CreateHuman ;
2780: LD_ADDR_VAR 0 3
2784: PUSH
2785: CALL_OW 44
2789: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2804: LD_ADDR_EXP 44
2808: PUSH
2809: LD_EXP 44
2813: PUSH
2814: LD_VAR 0 3
2818: UNION
2819: ST_TO_ADDR
// end ;
2820: GO 2743
2822: POP
2823: POP
// for i := 1 to 3 do
2824: LD_ADDR_VAR 0 2
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2893
// begin PrepareHuman ( false , 3 , 3 ) ;
2840: LD_INT 0
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 380
// un := CreateHuman ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2863: LD_VAR 0 3
2867: PPUSH
2868: LD_INT 92
2870: PPUSH
2871: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_EXP 44
2884: PUSH
2885: LD_VAR 0 3
2889: UNION
2890: ST_TO_ADDR
// end ;
2891: GO 2837
2893: POP
2894: POP
// for i := 1 to 2 do
2895: LD_ADDR_VAR 0 2
2899: PUSH
2900: DOUBLE
2901: LD_INT 1
2903: DEC
2904: ST_TO_ADDR
2905: LD_INT 2
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2964
// begin PrepareHuman ( false , 4 , 3 ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 380
// un := CreateHuman ;
2924: LD_ADDR_VAR 0 3
2928: PUSH
2929: CALL_OW 44
2933: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 83
2941: PPUSH
2942: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2946: LD_ADDR_EXP 44
2950: PUSH
2951: LD_EXP 44
2955: PUSH
2956: LD_VAR 0 3
2960: UNION
2961: ST_TO_ADDR
// end ;
2962: GO 2908
2964: POP
2965: POP
// for i := 1 to 5 do
2966: LD_ADDR_VAR 0 2
2970: PUSH
2971: DOUBLE
2972: LD_INT 1
2974: DEC
2975: ST_TO_ADDR
2976: LD_INT 5
2978: PUSH
2979: FOR_TO
2980: IFFALSE 3037
// begin PrepareHuman ( false , 1 , 3 ) ;
2982: LD_INT 0
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 380
// un := CreateHuman ;
2995: LD_ADDR_VAR 0 3
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_VAR 0 4
3014: PPUSH
3015: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3019: LD_ADDR_EXP 46
3023: PUSH
3024: LD_EXP 46
3028: PUSH
3029: LD_VAR 0 3
3033: UNION
3034: ST_TO_ADDR
// end ;
3035: GO 2979
3037: POP
3038: POP
// russianCargo := [ ] ;
3039: LD_ADDR_EXP 49
3043: PUSH
3044: EMPTY
3045: ST_TO_ADDR
// for i := 1 to 2 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 2
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3192
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3062: LD_INT 6
3064: PPUSH
3065: LD_INT 3
3067: PPUSH
3068: LD_INT 21
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_INT 1
3076: PPUSH
3077: LD_INT 51
3079: PPUSH
3080: LD_INT 100
3082: PPUSH
3083: CALL 370 0 7
// un := CreateVehicle ;
3087: LD_ADDR_VAR 0 3
3091: PUSH
3092: CALL_OW 45
3096: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3097: LD_ADDR_EXP 49
3101: PUSH
3102: LD_EXP 49
3106: PUSH
3107: LD_VAR 0 3
3111: UNION
3112: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3113: LD_VAR 0 3
3117: PPUSH
3118: LD_INT 2
3120: PPUSH
3121: LD_INT 100
3123: PPUSH
3124: CALL_OW 290
// SetDir ( un , 4 ) ;
3128: LD_VAR 0 3
3132: PPUSH
3133: LD_INT 4
3135: PPUSH
3136: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 147
3147: PPUSH
3148: LD_INT 103
3150: PPUSH
3151: LD_INT 4
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3161: LD_INT 0
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_OWVAR 67
3171: PPUSH
3172: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3176: CALL_OW 44
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: CALL_OW 52
// end ;
3190: GO 3059
3192: POP
3193: POP
// uc_side := 3 ;
3194: LD_ADDR_OWVAR 20
3198: PUSH
3199: LD_INT 3
3201: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3202: LD_ADDR_EXP 43
3206: PUSH
3207: LD_STRING Burlak
3209: PPUSH
3210: LD_INT 0
3212: PPUSH
3213: LD_STRING 
3215: PPUSH
3216: CALL 35096 0 3
3220: ST_TO_ADDR
// for i := 1 to 5 do
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: DOUBLE
3227: LD_INT 1
3229: DEC
3230: ST_TO_ADDR
3231: LD_INT 5
3233: PUSH
3234: FOR_TO
3235: IFFALSE 3328
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3237: LD_INT 0
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_OWVAR 67
3247: PUSH
3248: LD_INT 1
3250: PLUS
3251: PPUSH
3252: CALL_OW 380
// un := CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 22
3273: PUSH
3274: LD_INT 3
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 32
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PPUSH
3306: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3310: LD_ADDR_EXP 45
3314: PUSH
3315: LD_EXP 45
3319: PUSH
3320: LD_VAR 0 3
3324: UNION
3325: ST_TO_ADDR
// end ;
3326: GO 3234
3328: POP
3329: POP
// for i := 1 to 2 do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_INT 2
3342: PUSH
3343: FOR_TO
3344: IFFALSE 3435
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3346: LD_INT 0
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: LD_OWVAR 67
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: PPUSH
3361: CALL_OW 380
// un := CreateHuman ;
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3375: LD_VAR 0 3
3379: PPUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 30
3392: PUSH
3393: LD_INT 5
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PPUSH
3404: CALL_OW 69
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: PPUSH
3413: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3417: LD_ADDR_EXP 45
3421: PUSH
3422: LD_EXP 45
3426: PUSH
3427: LD_VAR 0 3
3431: UNION
3432: ST_TO_ADDR
// end ;
3433: GO 3343
3435: POP
3436: POP
// for i := 1 to 2 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 2
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3538
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3453: LD_INT 0
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: LD_OWVAR 67
3463: PPUSH
3464: CALL_OW 380
// un := CreateHuman ;
3468: LD_ADDR_VAR 0 3
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 3
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 30
3495: PUSH
3496: LD_INT 7
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 69
3511: PUSH
3512: LD_INT 1
3514: ARRAY
3515: PPUSH
3516: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3520: LD_ADDR_EXP 45
3524: PUSH
3525: LD_EXP 45
3529: PUSH
3530: LD_VAR 0 3
3534: UNION
3535: ST_TO_ADDR
// end ;
3536: GO 3450
3538: POP
3539: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 2
3545: PPUSH
3546: LD_OWVAR 67
3550: PPUSH
3551: CALL_OW 380
// un := CreateHuman ;
3555: LD_ADDR_VAR 0 3
3559: PUSH
3560: CALL_OW 44
3564: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 106
3572: PPUSH
3573: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3577: LD_ADDR_EXP 45
3581: PUSH
3582: LD_EXP 45
3586: PUSH
3587: LD_VAR 0 3
3591: UNION
3592: ST_TO_ADDR
// for i := 1 to 3 do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: FOR_TO
3607: IFFALSE 3729
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3609: LD_ADDR_VAR 0 6
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 31
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_OWVAR 67
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 6
3683: PPUSH
3684: CALL_OW 254
3688: PUSH
3689: LD_INT 3
3691: PLUS
3692: PPUSH
3693: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_VAR 0 6
3706: PPUSH
3707: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3711: LD_ADDR_EXP 45
3715: PUSH
3716: LD_EXP 45
3720: PUSH
3721: LD_VAR 0 3
3725: UNION
3726: ST_TO_ADDR
// end ;
3727: GO 3606
3729: POP
3730: POP
// if Difficulty > 1 then
3731: LD_OWVAR 67
3735: PUSH
3736: LD_INT 1
3738: GREATER
3739: IFFALSE 3814
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 23
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 44
3763: PPUSH
3764: LD_INT 100
3766: PPUSH
3767: CALL 370 0 7
3771: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 73
3779: PPUSH
3780: LD_INT 110
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3800: CALL_OW 44
3804: PPUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3814: LD_ADDR_EXP 48
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 6
3833: PUSH
3834: LD_INT 7
3836: PUSH
3837: LD_INT 8
3839: PUSH
3840: LD_INT 8
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_OWVAR 67
3853: ARRAY
3854: PUSH
3855: FOR_TO
3856: IFFALSE 4080
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3858: LD_INT 3
3860: PPUSH
3861: LD_INT 3
3863: PPUSH
3864: LD_INT 21
3866: PUSH
3867: LD_INT 23
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: LD_VAR 0 2
3878: PUSH
3879: LD_INT 2
3881: MOD
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ARRAY
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_INT 1
3893: PPUSH
3894: LD_INT 43
3896: PUSH
3897: LD_INT 44
3899: PUSH
3900: LD_INT 42
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 3
3915: MOD
3916: PUSH
3917: LD_INT 1
3919: PLUS
3920: ARRAY
3921: PPUSH
3922: LD_INT 100
3924: PPUSH
3925: CALL 370 0 7
// un := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 5
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 12
3964: ARRAY
3965: PPUSH
3966: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
3970: LD_ADDR_EXP 48
3974: PUSH
3975: LD_EXP 48
3979: PUSH
3980: LD_VAR 0 3
3984: UNION
3985: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
3986: LD_VAR 0 3
3990: PPUSH
3991: LD_INT 127
3993: PPUSH
3994: LD_INT 89
3996: PPUSH
3997: LD_INT 7
3999: PPUSH
4000: LD_INT 0
4002: PPUSH
4003: CALL_OW 50
// uc_side := 3 ;
4007: LD_ADDR_OWVAR 20
4011: PUSH
4012: LD_INT 3
4014: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 3
4020: PPUSH
4021: LD_INT 3
4023: PPUSH
4024: CALL_OW 380
// un := CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4038: LD_ADDR_EXP 48
4042: PUSH
4043: LD_EXP 48
4047: PUSH
4048: LD_VAR 0 3
4052: UNION
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4054: LD_VAR 0 3
4058: PPUSH
4059: LD_EXP 48
4063: PUSH
4064: LD_EXP 48
4068: PUSH
4069: LD_INT 1
4071: MINUS
4072: ARRAY
4073: PPUSH
4074: CALL_OW 52
// end ;
4078: GO 3855
4080: POP
4081: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_INT 3
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 5
4100: PUSH
4101: LD_INT 6
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: PUSH
4116: FOR_TO
4117: IFFALSE 4183
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4119: LD_INT 0
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_OWVAR 67
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4144: LD_ADDR_EXP 48
4148: PUSH
4149: LD_EXP 48
4153: PUSH
4154: LD_VAR 0 3
4158: UNION
4159: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4160: LD_VAR 0 3
4164: PPUSH
4165: LD_INT 91
4167: PPUSH
4168: LD_INT 60
4170: PPUSH
4171: LD_INT 3
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 50
// end ;
4181: GO 4116
4183: POP
4184: POP
// end ;
4185: LD_VAR 0 1
4189: RET
// every 0 0$3 do var i ;
4190: GO 4192
4192: DISABLE
4193: LD_INT 0
4195: PPUSH
// begin for i := 1 to 4 do
4196: LD_ADDR_VAR 0 1
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 4
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4229
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4212: LD_EXP 46
4216: PUSH
4217: LD_VAR 0 1
4221: ARRAY
4222: PPUSH
4223: CALL_OW 122
4227: GO 4209
4229: POP
4230: POP
// wait ( 3 ) ;
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4238: LD_EXP 46
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_INT 22
4249: PUSH
4250: LD_INT 6
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 30
4259: PUSH
4260: LD_INT 31
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 69
4275: PPUSH
4276: LD_EXP 46
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: PPUSH
4285: CALL_OW 74
4289: PPUSH
4290: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4294: LD_EXP 46
4298: PUSH
4299: LD_INT 2
4301: ARRAY
4302: PPUSH
4303: LD_INT 211
4305: PPUSH
4306: LD_INT 107
4308: PPUSH
4309: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4313: LD_EXP 46
4317: PUSH
4318: LD_INT 2
4320: ARRAY
4321: PPUSH
4322: LD_INT 209
4324: PPUSH
4325: LD_INT 106
4327: PPUSH
4328: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4332: LD_EXP 46
4336: PUSH
4337: LD_INT 3
4339: ARRAY
4340: PPUSH
4341: LD_INT 209
4343: PPUSH
4344: LD_INT 103
4346: PPUSH
4347: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4351: LD_EXP 46
4355: PUSH
4356: LD_INT 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 209
4362: PPUSH
4363: LD_INT 106
4365: PPUSH
4366: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4370: LD_EXP 46
4374: PUSH
4375: LD_INT 4
4377: ARRAY
4378: PPUSH
4379: LD_INT 227
4381: PPUSH
4382: LD_INT 117
4384: PPUSH
4385: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4389: LD_EXP 46
4393: PUSH
4394: LD_INT 4
4396: ARRAY
4397: PPUSH
4398: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4402: LD_INT 700
4404: PPUSH
4405: CALL_OW 67
// for i := 3 downto 2 do
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: DOUBLE
4415: LD_INT 3
4417: INC
4418: ST_TO_ADDR
4419: LD_INT 2
4421: PUSH
4422: FOR_DOWNTO
4423: IFFALSE 4590
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4425: LD_EXP 46
4429: PUSH
4430: LD_VAR 0 1
4434: ARRAY
4435: PPUSH
4436: LD_INT 200
4438: PPUSH
4439: LD_INT 91
4441: PPUSH
4442: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4446: LD_EXP 46
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PPUSH
4457: LD_INT 210
4459: PPUSH
4460: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4464: LD_EXP 46
4468: PUSH
4469: LD_VAR 0 1
4473: ARRAY
4474: PPUSH
4475: LD_INT 224
4477: PPUSH
4478: LD_INT 93
4480: PPUSH
4481: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4485: LD_EXP 46
4489: PUSH
4490: LD_VAR 0 1
4494: ARRAY
4495: PPUSH
4496: LD_INT 210
4498: PPUSH
4499: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4503: LD_EXP 46
4507: PUSH
4508: LD_VAR 0 1
4512: ARRAY
4513: PPUSH
4514: LD_INT 239
4516: PPUSH
4517: LD_INT 123
4519: PPUSH
4520: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4524: LD_EXP 46
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: LD_INT 210
4537: PPUSH
4538: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4542: LD_EXP 46
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: LD_INT 212
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4563: LD_EXP 46
4567: PUSH
4568: LD_VAR 0 1
4572: ARRAY
4573: PPUSH
4574: LD_INT 700
4576: PPUSH
4577: CALL_OW 202
// wait ( 0 0$30 ) ;
4581: LD_INT 1050
4583: PPUSH
4584: CALL_OW 67
// end ;
4588: GO 4422
4590: POP
4591: POP
// until not activeGrishkoAI ;
4592: LD_EXP 10
4596: NOT
4597: IFFALSE 4402
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4599: LD_EXP 46
4603: PPUSH
4604: LD_INT 221
4606: PPUSH
4607: LD_INT 110
4609: PPUSH
4610: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4614: LD_EXP 46
4618: PPUSH
4619: LD_INT 228
4621: PPUSH
4622: LD_INT 115
4624: PPUSH
4625: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4629: LD_EXP 46
4633: PPUSH
4634: CALL_OW 200
// end ;
4638: PPOPN 1
4640: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4641: LD_EXP 12
4645: IFFALSE 5391
4647: GO 4649
4649: DISABLE
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// begin uc_side := 6 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 6
4663: ST_TO_ADDR
// uc_nation := 3 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 3
4671: ST_TO_ADDR
// for i := 1 to 3 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 3
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4799
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4688: LD_INT 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 4
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_OWVAR 67
4716: ARRAY
4717: PPUSH
4718: CALL_OW 380
// un := CreateHuman ;
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: CALL_OW 44
4731: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4732: LD_ADDR_EXP 47
4736: PUSH
4737: LD_EXP 47
4741: PUSH
4742: LD_VAR 0 1
4746: UNION
4747: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 11
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4775: LD_VAR 0 1
4779: PPUSH
4780: LD_INT 210
4782: PPUSH
4783: LD_INT 159
4785: PPUSH
4786: CALL_OW 111
// wait ( 0 0$2 ) ;
4790: LD_INT 70
4792: PPUSH
4793: CALL_OW 67
// end ;
4797: GO 4685
4799: POP
4800: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_INT 172
4808: PUSH
4809: LD_INT 76
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 150
4818: PUSH
4819: LD_INT 38
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 148
4828: PUSH
4829: LD_INT 9
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 165
4838: PUSH
4839: LD_INT 38
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 191
4854: PUSH
4855: LD_INT 77
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 168
4864: PUSH
4865: LD_INT 42
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 166
4874: PUSH
4875: LD_INT 11
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 151
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 221
4900: PUSH
4901: LD_INT 88
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 217
4910: PUSH
4911: LD_INT 64
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 232
4920: PUSH
4921: LD_INT 66
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 200
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4949: LD_INT 35
4951: PPUSH
4952: CALL_OW 67
// for i := russianPatrol downto 1 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_EXP 47
4966: INC
4967: ST_TO_ADDR
4968: LD_INT 1
4970: PUSH
4971: FOR_DOWNTO
4972: IFFALSE 5355
// begin if IsDead ( russianPatrol [ i ] ) then
4974: LD_EXP 47
4978: PUSH
4979: LD_VAR 0 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 301
4989: IFFALSE 4993
// continue ;
4991: GO 4971
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
4993: LD_EXP 47
4997: PUSH
4998: LD_VAR 0 2
5002: ARRAY
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 990
5011: LESS
5012: PUSH
5013: LD_EXP 47
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: PPUSH
5024: CALL_OW 110
5028: PUSH
5029: LD_INT 1
5031: EQUAL
5032: AND
5033: IFFALSE 5053
// SetTag ( russianPatrol [ i ] , 2 ) ;
5035: LD_EXP 47
5039: PUSH
5040: LD_VAR 0 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5053: LD_EXP 47
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 110
5068: PUSH
5069: LD_INT 2
5071: EQUAL
5072: IFFALSE 5139
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5074: LD_EXP 47
5078: PUSH
5079: LD_VAR 0 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 166
5087: PPUSH
5088: LD_INT 101
5090: PPUSH
5091: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5095: LD_EXP 47
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: PPUSH
5106: LD_INT 71
5108: PPUSH
5109: CALL_OW 296
5113: PUSH
5114: LD_INT 10
5116: LESS
5117: IFFALSE 5137
// SetTag ( russianPatrol [ i ] , 3 ) ;
5119: LD_EXP 47
5123: PUSH
5124: LD_VAR 0 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 3
5132: PPUSH
5133: CALL_OW 109
// continue ;
5137: GO 4971
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5139: LD_EXP 47
5143: PUSH
5144: LD_VAR 0 2
5148: ARRAY
5149: PPUSH
5150: CALL_OW 110
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5253
// begin spottedByPatrol := true ;
5160: LD_ADDR_EXP 7
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5168: LD_EXP 47
5172: PUSH
5173: LD_VAR 0 2
5177: ARRAY
5178: PPUSH
5179: CALL_OW 250
5183: PPUSH
5184: LD_EXP 47
5188: PUSH
5189: LD_VAR 0 2
5193: ARRAY
5194: PPUSH
5195: CALL_OW 251
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_INT 6
5205: NEG
5206: PPUSH
5207: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5211: LD_EXP 47
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 87
// DialogueOn ;
5226: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5230: LD_EXP 25
5234: PPUSH
5235: LD_STRING DH-Spot-f-3
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// YouLost ( Spotted ) ;
5246: LD_STRING Spotted
5248: PPUSH
5249: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5253: LD_EXP 47
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: PPUSH
5264: CALL_OW 314
5268: NOT
5269: IFFALSE 5353
// for j in patrol [ i ] do
5271: LD_ADDR_VAR 0 3
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_VAR 0 2
5285: ARRAY
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5351
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5290: LD_EXP 47
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: PPUSH
5301: LD_INT 35
5303: PPUSH
5304: LD_INT 175
5306: PPUSH
5307: CALL_OW 12
5311: PPUSH
5312: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5316: LD_EXP 47
5320: PUSH
5321: LD_VAR 0 2
5325: ARRAY
5326: PPUSH
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PPUSH
5336: LD_VAR 0 3
5340: PUSH
5341: LD_INT 2
5343: ARRAY
5344: PPUSH
5345: CALL_OW 174
// end ;
5349: GO 5287
5351: POP
5352: POP
// end ;
5353: GO 4971
5355: POP
5356: POP
// until not russianPatrol or russianAlert ;
5357: LD_EXP 47
5361: NOT
5362: PUSH
5363: LD_EXP 9
5367: OR
5368: IFFALSE 4949
// if russianPatrol then
5370: LD_EXP 47
5374: IFFALSE 5391
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5376: LD_EXP 47
5380: PPUSH
5381: LD_INT 161
5383: PPUSH
5384: LD_INT 107
5386: PPUSH
5387: CALL_OW 114
// end ;
5391: PPOPN 4
5393: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5394: LD_EXP 6
5398: PUSH
5399: LD_EXP 13
5403: NOT
5404: AND
5405: IFFALSE 5891
5407: GO 5409
5409: DISABLE
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// begin enable ;
5417: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_EXP 48
5427: PPUSH
5428: LD_INT 21
5430: PUSH
5431: LD_INT 2
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 72
5442: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5443: LD_ADDR_VAR 0 4
5447: PUSH
5448: LD_INT 22
5450: PUSH
5451: LD_INT 4
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// for i in filter do
5463: LD_ADDR_VAR 0 1
5467: PUSH
5468: LD_VAR 0 2
5472: PUSH
5473: FOR_IN
5474: IFFALSE 5889
// begin tmp := IsDrivenBy ( i ) ;
5476: LD_ADDR_VAR 0 3
5480: PUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 311
5490: ST_TO_ADDR
// if not tmp then
5491: LD_VAR 0 3
5495: NOT
5496: IFFALSE 5500
// continue ;
5498: GO 5473
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 261
5509: PUSH
5510: LD_INT 90
5512: GREATER
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 110
5523: PUSH
5524: LD_INT 2
5526: EQUAL
5527: AND
5528: IFFALSE 5544
// SetTag ( i , 0 ) else
5530: LD_VAR 0 1
5534: PPUSH
5535: LD_INT 0
5537: PPUSH
5538: CALL_OW 109
5542: GO 5640
// if GetTag ( i ) = 2 then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 110
5553: PUSH
5554: LD_INT 2
5556: EQUAL
5557: IFFALSE 5640
// begin x := rand ( 1 , 2 ) ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_INT 2
5569: PPUSH
5570: CALL_OW 12
5574: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5575: LD_VAR 0 1
5579: PPUSH
5580: LD_EXP 49
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PPUSH
5591: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5595: LD_EXP 49
5599: PUSH
5600: LD_VAR 0 5
5604: ARRAY
5605: PPUSH
5606: LD_INT 2
5608: PPUSH
5609: CALL_OW 289
5613: PUSH
5614: LD_INT 20
5616: LESS
5617: IFFALSE 5640
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5619: LD_EXP 49
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: LD_INT 100
5635: PPUSH
5636: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5640: LD_VAR 0 1
5644: PPUSH
5645: CALL_OW 256
5649: PUSH
5650: LD_INT 600
5652: GREATEREQUAL
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 110
5663: NOT
5664: AND
5665: IFFALSE 5691
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5667: LD_VAR 0 1
5671: PPUSH
5672: LD_VAR 0 4
5676: PPUSH
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 74
5686: PPUSH
5687: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_INT 600
5703: LESS
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: NOT
5715: AND
5716: IFFALSE 5745
// begin SetTag ( i , 1 ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: LD_INT 62
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 110
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 1
5763: PPUSH
5764: LD_INT 62
5766: PPUSH
5767: LD_INT 22
5769: PPUSH
5770: CALL_OW 297
5774: PUSH
5775: LD_INT 6
5777: LESS
5778: AND
5779: PUSH
5780: LD_VAR 0 3
5784: AND
5785: IFFALSE 5887
// begin ComExitVehicle ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5796: LD_VAR 0 3
5800: PPUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5810: LD_INT 35
5812: PPUSH
5813: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 256
5826: PUSH
5827: LD_INT 1000
5829: EQUAL
5830: IFFALSE 5810
// ComEnterUnit ( tmp , i ) ;
5832: LD_VAR 0 3
5836: PPUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5846: LD_VAR 0 1
5850: PPUSH
5851: CALL_OW 261
5855: PUSH
5856: LD_INT 90
5858: LESSEQUAL
5859: IFFALSE 5875
// SetTag ( i , 2 ) else
5861: LD_VAR 0 1
5865: PPUSH
5866: LD_INT 2
5868: PPUSH
5869: CALL_OW 109
5873: GO 5887
// SetTag ( i , 0 ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 109
// end ; end ;
5887: GO 5473
5889: POP
5890: POP
// end ;
5891: PPOPN 5
5893: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5894: LD_EXP 20
5898: IFFALSE 6121
5900: GO 5902
5902: DISABLE
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5907: LD_EXP 49
5911: PPUSH
5912: LD_INT 79
5914: PPUSH
5915: LD_INT 155
5917: PPUSH
5918: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5922: LD_EXP 49
5926: PPUSH
5927: LD_INT 16
5929: PPUSH
5930: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_EXP 48
5943: PPUSH
5944: LD_INT 50
5946: PUSH
5947: EMPTY
5948: LIST
5949: PPUSH
5950: CALL_OW 72
5954: ST_TO_ADDR
// for i in tmp do
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_VAR 0 2
5964: PUSH
5965: FOR_IN
5966: IFFALSE 6000
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5968: LD_VAR 0 1
5972: PPUSH
5973: LD_INT 123
5975: PPUSH
5976: LD_INT 60
5978: PPUSH
5979: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_INT 153
5990: PPUSH
5991: LD_INT 103
5993: PPUSH
5994: CALL_OW 174
// end ;
5998: GO 5965
6000: POP
6001: POP
// repeat wait ( 0 0$1 ) ;
6002: LD_INT 35
6004: PPUSH
6005: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_EXP 48
6018: PPUSH
6019: LD_INT 50
6021: PUSH
6022: EMPTY
6023: LIST
6024: PPUSH
6025: CALL_OW 72
6029: ST_TO_ADDR
// for i in tmp do
6030: LD_ADDR_VAR 0 1
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: FOR_IN
6041: IFFALSE 6112
// if not HasTask ( i ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: CALL_OW 314
6052: NOT
6053: IFFALSE 6110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6055: LD_VAR 0 1
6059: PPUSH
6060: LD_INT 81
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 69
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
6110: GO 6040
6112: POP
6113: POP
6114: LD_VAR 0 2
6118: NOT
6119: IFFALSE 6002
// end ;
6121: PPOPN 2
6123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6124: LD_INT 22
6126: PUSH
6127: LD_INT 3
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 32
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PPUSH
6148: CALL_OW 69
6152: IFFALSE 6231
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
// begin enable ;
6160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_INT 3
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 32
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PPUSH
6190: CALL_OW 69
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6229
// if GetFuel ( i ) < 1 then
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 261
6207: PUSH
6208: LD_INT 1
6210: LESS
6211: IFFALSE 6227
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 311
6222: PPUSH
6223: CALL_OW 121
6227: GO 6195
6229: POP
6230: POP
// end ; end_of_file
6231: PPOPN 1
6233: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6234: LD_INT 0
6236: PPUSH
6237: PPUSH
6238: PPUSH
// SetBName ( omikron , omikron ) ;
6239: LD_INT 64
6241: PPUSH
6242: LD_STRING omikron
6244: PPUSH
6245: CALL_OW 500
// uc_side := 4 ;
6249: LD_ADDR_OWVAR 20
6253: PUSH
6254: LD_INT 4
6256: ST_TO_ADDR
// uc_nation := 1 ;
6257: LD_ADDR_OWVAR 21
6261: PUSH
6262: LD_INT 1
6264: ST_TO_ADDR
// omicronSquad := [ ] ;
6265: LD_ADDR_EXP 51
6269: PUSH
6270: EMPTY
6271: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: LD_INT 30
6292: PUSH
6293: LD_INT 32
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 30
6302: PUSH
6303: LD_INT 31
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6382
// begin PrepareHuman ( false , 1 , 1 ) ;
6327: LD_INT 0
6329: PPUSH
6330: LD_INT 1
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: CALL_OW 380
// un := CreateHuman ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: CALL_OW 44
6349: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6350: LD_ADDR_EXP 51
6354: PUSH
6355: LD_EXP 51
6359: PUSH
6360: LD_VAR 0 3
6364: UNION
6365: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 2
6375: PPUSH
6376: CALL_OW 52
// end ;
6380: GO 6324
6382: POP
6383: POP
// for i := 1 to 3 do
6384: LD_ADDR_VAR 0 2
6388: PUSH
6389: DOUBLE
6390: LD_INT 1
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6453
// begin PrepareHuman ( false , 2 , 2 ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 2
6405: PPUSH
6406: LD_INT 2
6408: PPUSH
6409: CALL_OW 380
// un := CreateHuman ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: CALL_OW 44
6422: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6423: LD_ADDR_EXP 51
6427: PUSH
6428: LD_EXP 51
6432: PUSH
6433: LD_VAR 0 3
6437: UNION
6438: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6439: LD_VAR 0 3
6443: PPUSH
6444: LD_INT 64
6446: PPUSH
6447: CALL_OW 52
// end ;
6451: GO 6397
6453: POP
6454: POP
// for i := 1 to 2 do
6455: LD_ADDR_VAR 0 2
6459: PUSH
6460: DOUBLE
6461: LD_INT 1
6463: DEC
6464: ST_TO_ADDR
6465: LD_INT 2
6467: PUSH
6468: FOR_TO
6469: IFFALSE 6608
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6471: LD_INT 4
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: LD_INT 2
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 3
6488: PPUSH
6489: LD_INT 100
6491: PPUSH
6492: CALL 370 0 7
// un := CreateVehicle ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: CALL_OW 45
6505: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6506: LD_ADDR_EXP 51
6510: PUSH
6511: LD_EXP 51
6515: PUSH
6516: LD_VAR 0 3
6520: UNION
6521: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
6522: LD_VAR 0 3
6526: PPUSH
6527: LD_INT 28
6529: PPUSH
6530: LD_INT 37
6532: PPUSH
6533: LD_INT 6
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
6543: LD_INT 0
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: CALL_OW 380
// un := CreateHuman ;
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: CALL_OW 44
6565: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6566: LD_ADDR_EXP 51
6570: PUSH
6571: LD_EXP 51
6575: PUSH
6576: LD_VAR 0 3
6580: UNION
6581: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_EXP 51
6591: PUSH
6592: LD_EXP 51
6596: PUSH
6597: LD_INT 1
6599: MINUS
6600: ARRAY
6601: PPUSH
6602: CALL_OW 52
// end ;
6606: GO 6468
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 1
6614: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
// uc_side := 4 ;
6621: LD_ADDR_OWVAR 20
6625: PUSH
6626: LD_INT 4
6628: ST_TO_ADDR
// uc_nation := 1 ;
6629: LD_ADDR_OWVAR 21
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// tmp := [ ] ;
6637: LD_ADDR_VAR 0 4
6641: PUSH
6642: EMPTY
6643: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
6644: LD_INT 4
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: LD_INT 2
6652: PPUSH
6653: LD_INT 1
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 4
6661: PPUSH
6662: LD_INT 77
6664: PPUSH
6665: CALL 370 0 7
// un := CreateVehicle ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: CALL_OW 45
6678: ST_TO_ADDR
// tmp := tmp union un ;
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: LD_VAR 0 4
6688: PUSH
6689: LD_VAR 0 3
6693: UNION
6694: ST_TO_ADDR
// SetDir ( un , 2 ) ;
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
6707: LD_VAR 0 3
6711: PPUSH
6712: LD_INT 106
6714: PPUSH
6715: LD_INT 3
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
6725: LD_INT 0
6727: PPUSH
6728: LD_INT 3
6730: PPUSH
6731: LD_INT 2
6733: PPUSH
6734: CALL_OW 380
// un := CreateHuman ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: CALL_OW 44
6747: ST_TO_ADDR
// tmp := tmp union un ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_VAR 0 3
6762: UNION
6763: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
6764: LD_VAR 0 3
6768: PPUSH
6769: LD_VAR 0 4
6773: PUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: ARRAY
6783: PPUSH
6784: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
6788: LD_VAR 0 3
6792: PPUSH
6793: LD_INT 109
6795: PPUSH
6796: LD_INT 9
6798: PPUSH
6799: CALL_OW 111
// wait ( 0 0$1 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// for i := 1 to 2 do
6810: LD_ADDR_VAR 0 2
6814: PUSH
6815: DOUBLE
6816: LD_INT 1
6818: DEC
6819: ST_TO_ADDR
6820: LD_INT 2
6822: PUSH
6823: FOR_TO
6824: IFFALSE 6888
// begin PrepareHuman ( false , 1 , 2 ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 2
6834: PPUSH
6835: CALL_OW 380
// un := CreateHuman ;
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: CALL_OW 44
6848: ST_TO_ADDR
// tmp := tmp union un ;
6849: LD_ADDR_VAR 0 4
6853: PUSH
6854: LD_VAR 0 4
6858: PUSH
6859: LD_VAR 0 3
6863: UNION
6864: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
6865: LD_VAR 0 3
6869: PPUSH
6870: LD_INT 105
6872: PPUSH
6873: LD_INT 2
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 50
// end ;
6886: GO 6823
6888: POP
6889: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
6890: LD_VAR 0 4
6894: PPUSH
6895: LD_INT 26
6897: PPUSH
6898: LD_INT 35
6900: PPUSH
6901: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
6905: LD_INT 35
6907: PPUSH
6908: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
6912: LD_VAR 0 4
6916: PPUSH
6917: LD_INT 50
6919: PUSH
6920: EMPTY
6921: LIST
6922: PPUSH
6923: CALL_OW 72
6927: NOT
6928: IFFALSE 6932
// exit ;
6930: GO 7059
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_INT 91
6939: PUSH
6940: LD_INT 64
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 72
6955: PUSH
6956: LD_VAR 0 4
6960: EQUAL
6961: IFFALSE 6905
// omicronSquad := omicronSquad union tmp ;
6963: LD_ADDR_EXP 51
6967: PUSH
6968: LD_EXP 51
6972: PUSH
6973: LD_VAR 0 4
6977: UNION
6978: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: LD_VAR 0 4
6988: PPUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: PUSH
7004: FOR_IN
7005: IFFALSE 7057
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7007: LD_VAR 0 2
7011: PPUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 4
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 30
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PPUSH
7036: CALL_OW 69
7040: PPUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 74
7050: PPUSH
7051: CALL_OW 120
7055: GO 7004
7057: POP
7058: POP
// end ;
7059: LD_VAR 0 1
7063: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7064: LD_EXP 13
7068: NOT
7069: IFFALSE 7640
7071: GO 7073
7073: DISABLE
7074: LD_INT 0
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// begin enable ;
7080: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 22
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 24
7111: PUSH
7112: LD_INT 1000
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_EXP 51
7142: PPUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 2
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 72
7157: ST_TO_ADDR
// if filter and tmp then
7158: LD_VAR 0 2
7162: PUSH
7163: LD_VAR 0 3
7167: AND
7168: IFFALSE 7241
// begin for i in tmp do
7170: LD_ADDR_VAR 0 1
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: FOR_IN
7181: IFFALSE 7237
// if IsInUnit ( i ) then
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 310
7192: IFFALSE 7205
// ComExitBuilding ( i ) else
7194: LD_VAR 0 1
7198: PPUSH
7199: CALL_OW 122
7203: GO 7235
// if not HasTask ( i ) then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 314
7214: NOT
7215: IFFALSE 7235
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7217: LD_VAR 0 1
7221: PPUSH
7222: LD_VAR 0 2
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: CALL_OW 130
7235: GO 7180
7237: POP
7238: POP
// end else
7239: GO 7312
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7241: LD_VAR 0 3
7245: PPUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 54
7251: PUSH
7252: EMPTY
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PPUSH
7259: CALL_OW 72
7263: IFFALSE 7312
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7265: LD_ADDR_VAR 0 1
7269: PUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: LD_INT 3
7277: PUSH
7278: LD_INT 54
7280: PUSH
7281: EMPTY
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 72
7292: PUSH
7293: FOR_IN
7294: IFFALSE 7310
// ComEnterUnit ( i , omikron ) ;
7296: LD_VAR 0 1
7300: PPUSH
7301: LD_INT 64
7303: PPUSH
7304: CALL_OW 120
7308: GO 7293
7310: POP
7311: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_EXP 51
7321: PPUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 72
7336: ST_TO_ADDR
// if not filter then
7337: LD_VAR 0 2
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7640
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: LD_INT 13
7353: PPUSH
7354: LD_INT 81
7356: PUSH
7357: LD_INT 4
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 70
7368: ST_TO_ADDR
// if enemy then
7369: LD_VAR 0 4
7373: IFFALSE 7640
// begin for i in filter do
7375: LD_ADDR_VAR 0 1
7379: PUSH
7380: LD_VAR 0 2
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7638
// begin tmp := IsDrivenBy ( i ) ;
7388: LD_ADDR_VAR 0 3
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 311
7402: ST_TO_ADDR
// if not tmp then
7403: LD_VAR 0 3
7407: NOT
7408: IFFALSE 7412
// continue ;
7410: GO 7385
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7412: LD_VAR 0 1
7416: PPUSH
7417: CALL_OW 256
7421: PUSH
7422: LD_INT 600
7424: GREATEREQUAL
7425: PUSH
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 110
7435: PUSH
7436: LD_INT 1
7438: NONEQUAL
7439: AND
7440: IFFALSE 7466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7442: LD_VAR 0 1
7446: PPUSH
7447: LD_VAR 0 4
7451: PPUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 74
7461: PPUSH
7462: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 256
7475: PUSH
7476: LD_INT 600
7478: LESS
7479: PUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: CALL_OW 110
7489: PUSH
7490: LD_INT 1
7492: NONEQUAL
7493: AND
7494: IFFALSE 7523
// begin SetTag ( i , 1 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 1
7503: PPUSH
7504: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: LD_INT 27
7515: PPUSH
7516: LD_INT 35
7518: PPUSH
7519: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
7523: LD_VAR 0 1
7527: PPUSH
7528: CALL_OW 110
7532: PUSH
7533: LD_INT 1
7535: EQUAL
7536: PUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 27
7544: PPUSH
7545: LD_INT 35
7547: PPUSH
7548: CALL_OW 297
7552: PUSH
7553: LD_INT 6
7555: LESS
7556: AND
7557: PUSH
7558: LD_VAR 0 3
7562: AND
7563: IFFALSE 7636
// begin ComExitVehicle ( tmp ) ;
7565: LD_VAR 0 3
7569: PPUSH
7570: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7574: LD_VAR 0 3
7578: PPUSH
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7588: LD_INT 35
7590: PPUSH
7591: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 256
7604: PUSH
7605: LD_INT 1000
7607: EQUAL
7608: IFFALSE 7588
// ComEnterUnit ( tmp , i ) ;
7610: LD_VAR 0 3
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 120
// SetTag ( i , 0 ) ;
7624: LD_VAR 0 1
7628: PPUSH
7629: LD_INT 0
7631: PPUSH
7632: CALL_OW 109
// end ; end ;
7636: GO 7385
7638: POP
7639: POP
// end ; end ;
7640: PPOPN 4
7642: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
7643: LD_EXP 13
7647: IFFALSE 7791
7649: GO 7651
7651: DISABLE
7652: LD_INT 0
7654: PPUSH
7655: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: LD_EXP 51
7665: PPUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 1
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 50
7678: PUSH
7679: EMPTY
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: ST_TO_ADDR
// if not tmp then
7691: LD_VAR 0 2
7695: NOT
7696: IFFALSE 7700
// exit ;
7698: GO 7791
// repeat wait ( 0 0$1 ) ;
7700: LD_INT 35
7702: PPUSH
7703: CALL_OW 67
// for i in tmp do
7707: LD_ADDR_VAR 0 1
7711: PUSH
7712: LD_VAR 0 2
7716: PUSH
7717: FOR_IN
7718: IFFALSE 7782
// begin ComExit ( i ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL 72221 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
7729: LD_VAR 0 1
7733: PPUSH
7734: LD_INT 14
7736: PPUSH
7737: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_INT 14
7748: PPUSH
7749: CALL_OW 308
7753: IFFALSE 7780
// begin tmp := tmp diff i ;
7755: LD_ADDR_VAR 0 2
7759: PUSH
7760: LD_VAR 0 2
7764: PUSH
7765: LD_VAR 0 1
7769: DIFF
7770: ST_TO_ADDR
// RemoveUnit ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 64
// end ; end ;
7780: GO 7717
7782: POP
7783: POP
// until not tmp ;
7784: LD_VAR 0 2
7788: NOT
7789: IFFALSE 7700
// end ; end_of_file
7791: PPOPN 2
7793: END
// export function Action ; var i , un , veh , tmp ; begin
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
// InGameOn ;
7801: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
7805: LD_INT 179
7807: PPUSH
7808: LD_INT 5
7810: PPUSH
7811: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 2
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: LD_INT 12
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_INT 24
7837: PPUSH
7838: LD_INT 33
7840: PPUSH
7841: CALL 370 0 7
7845: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 2
7853: PPUSH
7854: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
7858: LD_VAR 0 4
7862: PPUSH
7863: LD_INT 178
7865: PPUSH
7866: LD_INT 2
7868: PPUSH
7869: LD_INT 0
7871: PPUSH
7872: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
7876: LD_EXP 25
7880: PPUSH
7881: LD_VAR 0 4
7885: PPUSH
7886: CALL_OW 52
// if Kamil then
7890: LD_EXP 29
7894: IFFALSE 7929
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
7896: LD_EXP 29
7900: PPUSH
7901: LD_INT 207
7903: PPUSH
7904: LD_INT 37
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
7914: LD_EXP 29
7918: PPUSH
7919: LD_INT 211
7921: PPUSH
7922: LD_INT 38
7924: PPUSH
7925: CALL_OW 118
// end ; if Sophia then
7929: LD_EXP 31
7933: IFFALSE 7968
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
7935: LD_EXP 31
7939: PPUSH
7940: LD_INT 209
7942: PPUSH
7943: LD_INT 40
7945: PPUSH
7946: LD_INT 0
7948: PPUSH
7949: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
7953: LD_EXP 31
7957: PPUSH
7958: LD_INT 211
7960: PPUSH
7961: LD_INT 38
7963: PPUSH
7964: CALL_OW 118
// end ; if Givi then
7968: LD_EXP 26
7972: IFFALSE 8007
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
7974: LD_EXP 26
7978: PPUSH
7979: LD_INT 201
7981: PPUSH
7982: LD_INT 34
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
7992: LD_EXP 26
7996: PPUSH
7997: LD_INT 206
7999: PPUSH
8000: LD_INT 36
8002: PPUSH
8003: CALL_OW 118
// end ; if Ibrahim then
8007: LD_EXP 28
8011: IFFALSE 8046
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8013: LD_EXP 28
8017: PPUSH
8018: LD_INT 202
8020: PPUSH
8021: LD_INT 39
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8031: LD_EXP 28
8035: PPUSH
8036: LD_INT 206
8038: PPUSH
8039: LD_INT 36
8041: PPUSH
8042: CALL_OW 118
// end ; if Markov then
8046: LD_EXP 32
8050: IFFALSE 8137
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: LD_INT 13
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 1
8071: PPUSH
8072: LD_INT 25
8074: PPUSH
8075: LD_INT 80
8077: PUSH
8078: LD_INT 20
8080: PUSH
8081: LD_OWVAR 67
8085: MUL
8086: MINUS
8087: PPUSH
8088: CALL 370 0 7
8092: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8105: LD_VAR 0 4
8109: PPUSH
8110: LD_INT 197
8112: PPUSH
8113: LD_INT 35
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8123: LD_EXP 32
8127: PPUSH
8128: LD_VAR 0 4
8132: PPUSH
8133: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8137: LD_ADDR_VAR 0 5
8141: PUSH
8142: LD_EXP 30
8146: PUSH
8147: LD_EXP 37
8151: UNION
8152: ST_TO_ADDR
// for i in tmp do
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8198
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_INT 203
8173: PPUSH
8174: LD_INT 41
8176: PPUSH
8177: LD_INT 6
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 50
// ComHold ( i ) ;
8187: LD_VAR 0 2
8191: PPUSH
8192: CALL_OW 140
// end ;
8196: GO 8163
8198: POP
8199: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8200: LD_INT 22
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 25
8212: PUSH
8213: LD_INT 2
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 69
8228: NOT
8229: IFFALSE 8243
// SetClass ( Heike , 2 ) ;
8231: LD_EXP 25
8235: PPUSH
8236: LD_INT 2
8238: PPUSH
8239: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8243: LD_EXP 25
8247: PPUSH
8248: LD_INT 183
8250: PPUSH
8251: LD_INT 12
8253: PPUSH
8254: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8258: LD_EXP 25
8262: PPUSH
8263: LD_INT 188
8265: PPUSH
8266: LD_INT 20
8268: PPUSH
8269: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8273: LD_EXP 25
8277: PPUSH
8278: LD_INT 191
8280: PPUSH
8281: LD_INT 25
8283: PPUSH
8284: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8288: LD_EXP 25
8292: PPUSH
8293: LD_INT 203
8295: PPUSH
8296: LD_INT 29
8298: PPUSH
8299: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8303: LD_EXP 25
8307: PPUSH
8308: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8319: LD_EXP 25
8323: PPUSH
8324: CALL_OW 310
8328: NOT
8329: IFFALSE 8312
// CenterOnUnits ( Heike ) ;
8331: LD_EXP 25
8335: PPUSH
8336: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PUSH
8374: LD_EXP 25
8378: PUSH
8379: LD_EXP 32
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: DIFF
8388: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8389: LD_VAR 0 5
8393: PPUSH
8394: LD_EXP 25
8398: PPUSH
8399: CALL_OW 119
// if Givi then
8403: LD_EXP 26
8407: IFFALSE 8425
// ComTurnUnit ( Heike , Givi ) else
8409: LD_EXP 25
8413: PPUSH
8414: LD_EXP 26
8418: PPUSH
8419: CALL_OW 119
8423: GO 8443
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8425: LD_EXP 25
8429: PPUSH
8430: LD_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8443: LD_EXP 25
8447: PPUSH
8448: LD_STRING DH-Start-1
8450: PPUSH
8451: CALL_OW 88
// if Givi then
8455: LD_EXP 26
8459: IFFALSE 8506
// begin Say ( Givi , DG-Start-2 ) ;
8461: LD_EXP 26
8465: PPUSH
8466: LD_STRING DG-Start-2
8468: PPUSH
8469: CALL_OW 88
// if not Mike then
8473: LD_EXP 27
8477: NOT
8478: IFFALSE 8504
// begin Say ( Givi , DG-Start-b-3 ) ;
8480: LD_EXP 26
8484: PPUSH
8485: LD_STRING DG-Start-b-3
8487: PPUSH
8488: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8492: LD_EXP 25
8496: PPUSH
8497: LD_STRING DH-Start-b-4
8499: PPUSH
8500: CALL_OW 88
// end ; end else
8504: GO 8571
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8506: LD_EXP 37
8510: PPUSH
8511: LD_INT 26
8513: PUSH
8514: LD_INT 1
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PPUSH
8521: CALL_OW 72
8525: PUSH
8526: LD_INT 1
8528: ARRAY
8529: PPUSH
8530: LD_STRING DArm-Start-a-2
8532: PPUSH
8533: CALL_OW 88
8537: NOT
8538: IFFALSE 8571
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
8540: LD_EXP 37
8544: PPUSH
8545: LD_INT 26
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 72
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: PPUSH
8564: LD_STRING DArf-Start-a-2
8566: PPUSH
8567: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
8571: LD_EXP 25
8575: PPUSH
8576: LD_INT 211
8578: PPUSH
8579: LD_INT 38
8581: PPUSH
8582: CALL_OW 118
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
8593: LD_EXP 25
8597: PPUSH
8598: LD_STRING DH-Start-3
8600: PPUSH
8601: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8605: LD_EXP 25
8609: PPUSH
8610: LD_STRING DH-Start-4
8612: PPUSH
8613: CALL_OW 88
// InGameOff ;
8617: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
8621: LD_STRING Prepare
8623: PPUSH
8624: CALL_OW 337
// SaveForQuickRestart ;
8628: CALL_OW 22
// wait ( 0 0$10 ) ;
8632: LD_INT 350
8634: PPUSH
8635: CALL_OW 67
// if not Aviradze then
8639: LD_EXP 35
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8888
// SetDir ( Aviradze , 4 ) ;
8648: LD_EXP 35
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
8660: LD_EXP 35
8664: PPUSH
8665: LD_INT 225
8667: PPUSH
8668: LD_INT 33
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 48
// for i := 1 to 2 do
8678: LD_ADDR_VAR 0 2
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_INT 2
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8823
// begin uc_side := 2 ;
8694: LD_ADDR_OWVAR 20
8698: PUSH
8699: LD_INT 2
8701: ST_TO_ADDR
// uc_nation := 0 ;
8702: LD_ADDR_OWVAR 21
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
8710: LD_INT 0
8712: PPUSH
8713: LD_INT 12
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 380
// hc_gallery :=  ;
8723: LD_ADDR_OWVAR 33
8727: PUSH
8728: LD_STRING 
8730: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
8731: LD_ADDR_OWVAR 26
8735: PUSH
8736: LD_STRING Artudito
8738: PUSH
8739: LD_STRING Textur
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_VAR 0 2
8750: ARRAY
8751: ST_TO_ADDR
// un := CreateHuman ;
8752: LD_ADDR_VAR 0 3
8756: PUSH
8757: CALL_OW 44
8761: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
8762: LD_VAR 0 3
8766: PPUSH
8767: LD_INT 224
8769: PUSH
8770: LD_INT 226
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_VAR 0 2
8781: ARRAY
8782: PPUSH
8783: LD_INT 31
8785: PUSH
8786: LD_INT 35
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_VAR 0 2
8797: ARRAY
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 215
8813: PPUSH
8814: LD_INT 36
8816: PPUSH
8817: CALL_OW 111
// end ;
8821: GO 8691
8823: POP
8824: POP
// hc_name :=  ;
8825: LD_ADDR_OWVAR 26
8829: PUSH
8830: LD_STRING 
8832: ST_TO_ADDR
// InitHc ;
8833: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
8837: LD_EXP 35
8841: PPUSH
8842: LD_INT 215
8844: PPUSH
8845: LD_INT 36
8847: PPUSH
8848: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
8852: LD_EXP 35
8856: PPUSH
8857: LD_STRING DA-Arrive-1
8859: PPUSH
8860: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
8864: LD_EXP 25
8868: PPUSH
8869: LD_STRING DH-Arrive-2
8871: PPUSH
8872: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
8876: LD_EXP 35
8880: PPUSH
8881: LD_STRING DA-Arrive-3
8883: PPUSH
8884: CALL_OW 88
// end ;
8888: LD_VAR 0 1
8892: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
8893: LD_EXP 3
8897: IFFALSE 10298
8899: GO 8901
8901: DISABLE
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
// begin DialogueOn ;
8907: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
8911: LD_EXP 25
8915: PPUSH
8916: LD_STRING DH-base-1
8918: PPUSH
8919: CALL_OW 88
// if Markov then
8923: LD_EXP 32
8927: IFFALSE 8979
// begin Say ( Markov , DMar-base-2 ) ;
8929: LD_EXP 32
8933: PPUSH
8934: LD_STRING DMar-base-2
8936: PPUSH
8937: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
8941: LD_EXP 32
8945: PPUSH
8946: LD_STRING DMar-base-3
8948: PPUSH
8949: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
8953: LD_EXP 25
8957: PPUSH
8958: LD_STRING DH-base-4
8960: PPUSH
8961: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
8965: LD_EXP 32
8969: PPUSH
8970: LD_STRING DMar-base-5
8972: PPUSH
8973: CALL_OW 88
// end else
8977: GO 9056
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
8979: LD_EXP 37
8983: PPUSH
8984: LD_INT 26
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PPUSH
8994: CALL_OW 72
8998: PUSH
8999: LD_INT 1
9001: ARRAY
9002: PPUSH
9003: LD_STRING DArm-base-a-2
9005: PPUSH
9006: CALL_OW 88
9010: NOT
9011: IFFALSE 9044
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9013: LD_EXP 37
9017: PPUSH
9018: LD_INT 26
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 72
9032: PUSH
9033: LD_INT 1
9035: ARRAY
9036: PPUSH
9037: LD_STRING DArf-base-a-2
9039: PPUSH
9040: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9044: LD_EXP 25
9048: PPUSH
9049: LD_STRING DH-base-a-3
9051: PPUSH
9052: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9056: LD_EXP 35
9060: PPUSH
9061: LD_STRING DA-base-6
9063: PPUSH
9064: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9068: LD_EXP 35
9072: PPUSH
9073: LD_STRING DA-base-7
9075: PPUSH
9076: CALL_OW 88
// DialogueOff ;
9080: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9084: LD_STRING Flamethrower
9086: PPUSH
9087: CALL_OW 337
// wait ( 2 2$00 ) ;
9091: LD_INT 4200
9093: PPUSH
9094: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9098: LD_EXP 34
9102: PUSH
9103: LD_EXP 27
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: LD_INT 203
9114: PPUSH
9115: LD_INT 37
9117: PPUSH
9118: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9122: LD_INT 22
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 92
9134: PUSH
9135: LD_INT 203
9137: PUSH
9138: LD_INT 37
9140: PUSH
9141: LD_INT 10
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PPUSH
9154: CALL_OW 69
9158: NOT
9159: IFFALSE 9199
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9161: LD_EXP 34
9165: PUSH
9166: LD_EXP 27
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: LD_EXP 25
9179: PPUSH
9180: CALL_OW 250
9184: PPUSH
9185: LD_EXP 25
9189: PPUSH
9190: CALL_OW 251
9194: PPUSH
9195: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9199: LD_INT 35
9201: PPUSH
9202: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9206: LD_INT 2
9208: PPUSH
9209: LD_EXP 34
9213: PPUSH
9214: CALL_OW 292
9218: PUSH
9219: LD_EXP 34
9223: PPUSH
9224: LD_EXP 25
9228: PPUSH
9229: CALL_OW 296
9233: PUSH
9234: LD_INT 8
9236: LESS
9237: PUSH
9238: LD_EXP 34
9242: PPUSH
9243: LD_INT 22
9245: PUSH
9246: LD_INT 2
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 21
9255: PUSH
9256: LD_INT 3
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 69
9271: PPUSH
9272: LD_EXP 34
9276: PPUSH
9277: CALL_OW 74
9281: PPUSH
9282: CALL_OW 296
9286: PUSH
9287: LD_INT 7
9289: LESS
9290: OR
9291: AND
9292: PUSH
9293: LD_EXP 34
9297: PPUSH
9298: LD_INT 10
9300: PPUSH
9301: CALL_OW 308
9305: NOT
9306: AND
9307: IFFALSE 9199
// InGameOn ;
9309: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9313: LD_EXP 34
9317: PPUSH
9318: CALL_OW 87
// if IsInUnit ( Heike ) then
9322: LD_EXP 25
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( Heike ) ;
9333: LD_EXP 25
9337: PPUSH
9338: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9342: LD_EXP 34
9346: PUSH
9347: LD_EXP 27
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: LD_EXP 25
9360: PPUSH
9361: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9365: LD_EXP 25
9369: PPUSH
9370: LD_EXP 34
9374: PPUSH
9375: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9379: LD_INT 22
9381: PUSH
9382: LD_INT 2
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 91
9391: PUSH
9392: LD_EXP 34
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 21
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: PPUSH
9420: CALL_OW 69
9424: IFFALSE 9450
// begin Say ( Kurt , DKs-scout-1 ) ;
9426: LD_EXP 34
9430: PPUSH
9431: LD_STRING DKs-scout-1
9433: PPUSH
9434: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9438: LD_EXP 25
9442: PPUSH
9443: LD_STRING DH-scout-2
9445: PPUSH
9446: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9450: LD_EXP 25
9454: PPUSH
9455: CALL_OW 85
// if IsInUnit ( Heike ) then
9459: LD_EXP 25
9463: PPUSH
9464: CALL_OW 310
9468: IFFALSE 9479
// ComExit ( Heike ) ;
9470: LD_EXP 25
9474: PPUSH
9475: CALL 72221 0 1
// repeat wait ( 0 0$1 ) ;
9479: LD_INT 35
9481: PPUSH
9482: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
9486: LD_EXP 25
9490: PPUSH
9491: LD_EXP 34
9495: PPUSH
9496: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9500: LD_EXP 25
9504: PPUSH
9505: LD_EXP 34
9509: PPUSH
9510: CALL_OW 296
9514: PUSH
9515: LD_INT 6
9517: LESS
9518: IFFALSE 9479
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9520: LD_EXP 34
9524: PUSH
9525: LD_EXP 27
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: LD_EXP 25
9538: PPUSH
9539: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9543: LD_EXP 34
9547: PPUSH
9548: LD_STRING DKs-scout-3
9550: PPUSH
9551: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
9555: LD_EXP 30
9559: PUSH
9560: LD_EXP 30
9564: PPUSH
9565: LD_EXP 34
9569: PPUSH
9570: CALL_OW 296
9574: PUSH
9575: LD_INT 15
9577: LESS
9578: AND
9579: IFFALSE 9769
// begin if IsInUnit ( Kaia ) then
9581: LD_EXP 30
9585: PPUSH
9586: CALL_OW 310
9590: IFFALSE 9601
// ComExitBuilding ( Kaia ) ;
9592: LD_EXP 30
9596: PPUSH
9597: CALL_OW 122
// wait ( 0 0$1 ) ;
9601: LD_INT 35
9603: PPUSH
9604: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 34
9617: PPUSH
9618: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9622: LD_INT 35
9624: PPUSH
9625: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
9629: LD_EXP 30
9633: PPUSH
9634: LD_EXP 34
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 6
9646: LESS
9647: IFFALSE 9622
// ComTurnUnit ( Kaia , Kurt ) ;
9649: LD_EXP 30
9653: PPUSH
9654: LD_EXP 34
9658: PPUSH
9659: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
9663: LD_EXP 30
9667: PPUSH
9668: LD_STRING DK-scout-4
9670: PPUSH
9671: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
9675: LD_EXP 34
9679: PPUSH
9680: LD_EXP 30
9684: PPUSH
9685: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
9689: LD_EXP 34
9693: PPUSH
9694: LD_STRING DKs-scout-5
9696: PPUSH
9697: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
9701: LD_EXP 30
9705: PPUSH
9706: LD_STRING DK-scout-6
9708: PPUSH
9709: CALL_OW 88
// if Mike then
9713: LD_EXP 27
9717: IFFALSE 9769
// begin Say ( Mike , DM-scout-7 ) ;
9719: LD_EXP 27
9723: PPUSH
9724: LD_STRING DM-scout-7
9726: PPUSH
9727: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
9731: LD_EXP 30
9735: PPUSH
9736: LD_EXP 27
9740: PPUSH
9741: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
9745: LD_EXP 30
9749: PPUSH
9750: LD_STRING DK-scout-8
9752: PPUSH
9753: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
9757: LD_EXP 27
9761: PPUSH
9762: LD_STRING DM-scout-9
9764: PPUSH
9765: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
9769: LD_INT 184
9771: PPUSH
9772: LD_INT 100
9774: PPUSH
9775: LD_INT 2
9777: PPUSH
9778: LD_INT 12
9780: NEG
9781: PPUSH
9782: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
9786: LD_INT 184
9788: PPUSH
9789: LD_INT 100
9791: PPUSH
9792: LD_INT 2
9794: PPUSH
9795: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
9799: LD_INT 184
9801: PPUSH
9802: LD_INT 100
9804: PPUSH
9805: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DKs-scout-10
9816: PPUSH
9817: CALL_OW 88
// wait ( 0 0$1 ) ;
9821: LD_INT 35
9823: PPUSH
9824: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
9828: LD_INT 144
9830: PPUSH
9831: LD_INT 65
9833: PPUSH
9834: LD_INT 2
9836: PPUSH
9837: LD_INT 12
9839: NEG
9840: PPUSH
9841: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
9845: LD_INT 144
9847: PPUSH
9848: LD_INT 65
9850: PPUSH
9851: LD_INT 2
9853: PPUSH
9854: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
9858: LD_INT 144
9860: PPUSH
9861: LD_INT 65
9863: PPUSH
9864: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
9868: LD_EXP 34
9872: PPUSH
9873: LD_STRING DKs-scout-11
9875: PPUSH
9876: CALL_OW 88
// wait ( 0 0$1 ) ;
9880: LD_INT 35
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
9887: LD_EXP 34
9891: PPUSH
9892: CALL_OW 87
// if Mike and not Givi then
9896: LD_EXP 27
9900: PUSH
9901: LD_EXP 26
9905: NOT
9906: AND
9907: IFFALSE 9933
// begin Say ( Mike , DM-scout-a-1 ) ;
9909: LD_EXP 27
9913: PPUSH
9914: LD_STRING DM-scout-a-1
9916: PPUSH
9917: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
9921: LD_EXP 25
9925: PPUSH
9926: LD_STRING DH-scout-a-2
9928: PPUSH
9929: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
9933: LD_EXP 34
9937: PUSH
9938: LD_EXP 27
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PPUSH
9947: LD_INT 2
9949: PPUSH
9950: CALL_OW 235
// InGameOff ;
9954: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
9958: LD_STRING Hill
9960: PPUSH
9961: CALL_OW 337
// SetAreaMapShow ( dontGoArea , 1 ) ;
9965: LD_INT 20
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 424
// allowToPatrol := true ;
9975: LD_ADDR_EXP 12
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// wait ( 1 1$30 ) ;
9983: LD_INT 3150
9985: PPUSH
9986: CALL_OW 67
// InitHc ;
9990: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
9994: LD_ADDR_VAR 0 1
9998: PUSH
9999: DOUBLE
10000: LD_INT 1
10002: DEC
10003: ST_TO_ADDR
10004: LD_INT 3
10006: PUSH
10007: LD_INT 3
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 2
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_OWVAR 67
10026: ARRAY
10027: PUSH
10028: FOR_TO
10029: IFFALSE 10296
// begin uc_side := 2 ;
10031: LD_ADDR_OWVAR 20
10035: PUSH
10036: LD_INT 2
10038: ST_TO_ADDR
// uc_nation := 2 ;
10039: LD_ADDR_OWVAR 21
10043: PUSH
10044: LD_INT 2
10046: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10047: LD_INT 0
10049: PPUSH
10050: LD_INT 1
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_VAR 0 1
10068: PUSH
10069: LD_INT 3
10071: MOD
10072: PUSH
10073: LD_INT 1
10075: PLUS
10076: ARRAY
10077: PPUSH
10078: LD_INT 3
10080: PUSH
10081: LD_INT 2
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: PUSH
10096: LD_OWVAR 67
10100: ARRAY
10101: PPUSH
10102: CALL_OW 380
// un := CreateHuman ;
10106: LD_ADDR_VAR 0 2
10110: PUSH
10111: CALL_OW 44
10115: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10116: LD_ADDR_EXP 37
10120: PUSH
10121: LD_EXP 37
10125: PUSH
10126: LD_VAR 0 2
10130: UNION
10131: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10132: LD_INT 2
10134: PPUSH
10135: LD_INT 2
10137: PPUSH
10138: LD_INT 13
10140: PPUSH
10141: LD_INT 2
10143: PUSH
10144: LD_INT 1
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_VAR 0 1
10155: PUSH
10156: LD_INT 2
10158: MOD
10159: PUSH
10160: LD_INT 1
10162: PLUS
10163: ARRAY
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: LD_INT 27
10170: PUSH
10171: LD_INT 25
10173: PUSH
10174: LD_INT 27
10176: PUSH
10177: LD_INT 23
10179: PUSH
10180: LD_INT 23
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: PUSH
10190: LD_OWVAR 67
10194: PUSH
10195: LD_INT 0
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 12
10205: PLUS
10206: ARRAY
10207: PPUSH
10208: LD_INT 77
10210: PPUSH
10211: CALL 370 0 7
// veh := CreateVehicle ;
10215: LD_ADDR_VAR 0 3
10219: PUSH
10220: CALL_OW 45
10224: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10225: LD_VAR 0 3
10229: PPUSH
10230: LD_INT 2
10232: PPUSH
10233: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 178
10244: PPUSH
10245: LD_INT 2
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: LD_INT 0
10253: PPUSH
10254: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10258: LD_VAR 0 2
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10272: LD_VAR 0 2
10276: PPUSH
10277: LD_INT 183
10279: PPUSH
10280: LD_INT 11
10282: PPUSH
10283: CALL_OW 111
// wait ( 0 0$2 ) ;
10287: LD_INT 70
10289: PPUSH
10290: CALL_OW 67
// end ;
10294: GO 10028
10296: POP
10297: POP
// end ;
10298: PPOPN 3
10300: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10301: LD_EXP 4
10305: PUSH
10306: LD_EXP 35
10310: PPUSH
10311: CALL_OW 302
10315: AND
10316: IFFALSE 10365
10318: GO 10320
10320: DISABLE
// begin DialogueOn ;
10321: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10325: LD_EXP 35
10329: PPUSH
10330: LD_STRING DA-lab-1
10332: PPUSH
10333: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10337: LD_EXP 35
10341: PPUSH
10342: LD_STRING DA-lab-2
10344: PPUSH
10345: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10349: LD_EXP 25
10353: PPUSH
10354: LD_STRING DH-lab-3
10356: PPUSH
10357: CALL_OW 88
// DialogueOff ;
10361: CALL_OW 7
// end ;
10365: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10366: LD_INT 17
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 321
10376: PUSH
10377: LD_INT 2
10379: EQUAL
10380: IFFALSE 10512
10382: GO 10384
10384: DISABLE
10385: LD_INT 0
10387: PPUSH
// begin DialogueOn ;
10388: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10392: LD_EXP 35
10396: PPUSH
10397: LD_STRING DA-Cam-1
10399: PPUSH
10400: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10404: LD_EXP 35
10408: PPUSH
10409: LD_STRING DA-Cam-2
10411: PPUSH
10412: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10416: LD_EXP 35
10420: PPUSH
10421: LD_STRING DA-Cam-3
10423: PPUSH
10424: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10428: LD_EXP 25
10432: PPUSH
10433: LD_STRING DH-Cam-4
10435: PPUSH
10436: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10440: LD_EXP 30
10444: PPUSH
10445: LD_STRING DK-Cam-5
10447: PPUSH
10448: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10452: LD_EXP 30
10456: PPUSH
10457: LD_STRING DK-Cam-6
10459: PPUSH
10460: CALL_OW 88
// DialogueOff ;
10464: CALL_OW 7
// Query ( Camera ) ;
10468: LD_STRING Camera
10470: PPUSH
10471: CALL_OW 97
// hiddenCameraAllowed := true ;
10475: LD_ADDR_EXP 5
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// for i in camAreas do
10483: LD_ADDR_VAR 0 1
10487: PUSH
10488: LD_EXP 8
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10510
// SetAreaMapShow ( i , 1 ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 424
10508: GO 10493
10510: POP
10511: POP
// end ;
10512: PPOPN 1
10514: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10515: LD_EXP 8
10519: NOT
10520: PUSH
10521: LD_EXP 5
10525: AND
10526: IFFALSE 10624
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
// begin stop_talking := true ;
10534: LD_ADDR_OWVAR 56
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10542: LD_ADDR_VAR 0 1
10546: PUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 21
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 23
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: PUSH
10587: FOR_IN
10588: IFFALSE 10607
// AddExperience ( i , 2 , 450 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 2
10597: PPUSH
10598: LD_INT 450
10600: PPUSH
10601: CALL_OW 492
10605: GO 10587
10607: POP
10608: POP
// stop_talking := false ;
10609: LD_ADDR_OWVAR 56
10613: PUSH
10614: LD_INT 0
10616: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10617: LD_STRING ACH_CAMERA
10619: PPUSH
10620: CALL_OW 543
// end ;
10624: PPOPN 1
10626: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10627: LD_EXP 9
10631: PUSH
10632: LD_EXP 11
10636: NOT
10637: AND
10638: IFFALSE 10697
10640: GO 10642
10642: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
10643: LD_EXP 9
10647: PPUSH
10648: CALL_OW 250
10652: PPUSH
10653: LD_EXP 9
10657: PPUSH
10658: CALL_OW 251
10662: PPUSH
10663: LD_INT 2
10665: PPUSH
10666: LD_INT 6
10668: NEG
10669: PPUSH
10670: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
10674: LD_EXP 9
10678: PPUSH
10679: CALL_OW 87
// wait ( 0 0$1 ) ;
10683: LD_INT 35
10685: PPUSH
10686: CALL_OW 67
// YouLost ( Spotted ) ;
10690: LD_STRING Spotted
10692: PPUSH
10693: CALL_OW 104
// end ;
10697: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
10698: LD_INT 3
10700: PUSH
10701: LD_INT 6
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PPUSH
10708: LD_INT 2
10710: PPUSH
10711: LD_EXP 47
10715: PPUSH
10716: CALL 1034 0 3
10720: IFFALSE 10753
10722: GO 10724
10724: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
10725: LD_ADDR_EXP 9
10729: PUSH
10730: LD_INT 3
10732: PUSH
10733: LD_INT 6
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: LD_INT 2
10742: PPUSH
10743: LD_EXP 47
10747: PPUSH
10748: CALL 1034 0 3
10752: ST_TO_ADDR
10753: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
10754: LD_INT 22
10756: PUSH
10757: LD_INT 6
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 30
10766: PUSH
10767: LD_INT 32
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 3
10776: PUSH
10777: LD_INT 24
10779: PUSH
10780: LD_INT 1000
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 69
10800: IFFALSE 10861
10802: GO 10804
10804: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
10805: LD_ADDR_EXP 9
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 6
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 30
10822: PUSH
10823: LD_INT 32
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 3
10832: PUSH
10833: LD_INT 24
10835: PUSH
10836: LD_INT 1000
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 69
10856: PUSH
10857: LD_INT 1
10859: ARRAY
10860: ST_TO_ADDR
10861: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
10862: LD_EXP 9
10866: IFFALSE 11098
10868: GO 10870
10870: DISABLE
10871: LD_INT 0
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
10877: LD_ADDR_VAR 0 4
10881: PUSH
10882: LD_EXP 42
10886: PUSH
10887: LD_EXP 44
10891: PUSH
10892: LD_EXP 45
10896: UNION
10897: PPUSH
10898: LD_INT 3
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 72
10919: UNION
10920: ST_TO_ADDR
// for i in noncombat do
10921: LD_ADDR_VAR 0 1
10925: PUSH
10926: LD_VAR 0 4
10930: PUSH
10931: FOR_IN
10932: IFFALSE 11028
// begin if IsInUnit ( i ) then
10934: LD_VAR 0 1
10938: PPUSH
10939: CALL_OW 310
10943: IFFALSE 10954
// ComExitBuilding ( i ) ;
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
10954: LD_VAR 0 1
10958: PPUSH
10959: LD_INT 114
10961: PPUSH
10962: LD_INT 97
10964: PPUSH
10965: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
10969: LD_VAR 0 1
10973: PPUSH
10974: LD_INT 99
10976: PPUSH
10977: LD_INT 128
10979: PPUSH
10980: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
10984: LD_VAR 0 1
10988: PPUSH
10989: LD_INT 91
10991: PPUSH
10992: LD_INT 145
10994: PPUSH
10995: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
10999: LD_VAR 0 1
11003: PPUSH
11004: LD_INT 82
11006: PPUSH
11007: LD_INT 153
11009: PPUSH
11010: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11014: LD_VAR 0 1
11018: PPUSH
11019: LD_INT 16
11021: PPUSH
11022: CALL_OW 173
// end ;
11026: GO 10931
11028: POP
11029: POP
// if not allowHeikeAttack then
11030: LD_EXP 11
11034: NOT
11035: IFFALSE 11039
// exit ;
11037: GO 11098
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11039: LD_EXP 40
11043: PPUSH
11044: LD_STRING D9a-Kur-1
11046: PPUSH
11047: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11051: LD_EXP 43
11055: PPUSH
11056: LD_STRING D9a-Bur-1
11058: PPUSH
11059: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11063: LD_EXP 40
11067: PPUSH
11068: LD_STRING D9a-Kur-2
11070: PPUSH
11071: CALL_OW 94
// omicronFall := true ;
11075: LD_ADDR_EXP 13
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11083: LD_INT 105
11085: PPUSH
11086: CALL_OW 67
// retreatFromOmicron := true ;
11090: LD_ADDR_EXP 20
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// end ;
11098: PPOPN 4
11100: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11101: LD_INT 16
11103: PPUSH
11104: LD_INT 3
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 23
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: IFFALSE 11222
11141: GO 11143
11143: DISABLE
11144: LD_INT 0
11146: PPUSH
// begin enable ;
11147: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11148: LD_ADDR_VAR 0 1
11152: PUSH
11153: LD_INT 16
11155: PPUSH
11156: LD_INT 3
11158: PUSH
11159: LD_INT 22
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 23
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 70
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11220
// begin escapeCounter := escapeCounter + 1 ;
11195: LD_ADDR_EXP 19
11199: PUSH
11200: LD_EXP 19
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: ST_TO_ADDR
// RemoveUnit ( i ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 64
// end ;
11218: GO 11192
11220: POP
11221: POP
// end ;
11222: PPOPN 1
11224: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11225: LD_OWVAR 1
11229: PUSH
11230: LD_INT 13650
11232: PUSH
11233: LD_INT 0
11235: PPUSH
11236: LD_INT 3150
11238: PPUSH
11239: CALL_OW 12
11243: PLUS
11244: GREATEREQUAL
11245: IFFALSE 11254
11247: GO 11249
11249: DISABLE
// SmallAmericanReinforcements ;
11250: CALL 6615 0 0
11254: END
// every 0 0$1 trigger tick >= 9 9$15 do
11255: LD_OWVAR 1
11259: PUSH
11260: LD_INT 19425
11262: GREATEREQUAL
11263: IFFALSE 11328
11265: GO 11267
11267: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11268: LD_EXP 48
11272: PPUSH
11273: LD_INT 21
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 72
11287: PPUSH
11288: LD_INT 62
11290: PPUSH
11291: LD_INT 22
11293: PPUSH
11294: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11298: LD_EXP 49
11302: PPUSH
11303: LD_INT 69
11305: PPUSH
11306: LD_INT 27
11308: PPUSH
11309: CALL_OW 111
// wait ( 1 1$00 ) ;
11313: LD_INT 2100
11315: PPUSH
11316: CALL_OW 67
// startAttackOnOmicron := true ;
11320: LD_ADDR_EXP 6
11324: PUSH
11325: LD_INT 1
11327: ST_TO_ADDR
// end ;
11328: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11329: LD_EXP 22
11333: PUSH
11334: LD_INT 0
11336: EQUAL
11337: IFFALSE 13354
11339: GO 11341
11341: DISABLE
11342: LD_INT 0
11344: PPUSH
11345: PPUSH
11346: PPUSH
11347: PPUSH
11348: PPUSH
11349: PPUSH
11350: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11351: LD_INT 5
11353: PPUSH
11354: LD_INT 2
11356: PPUSH
11357: CALL_OW 343
// PrepareOmarForces ;
11361: CALL 1604 0 0
// wait ( 0 0$03 ) ;
11365: LD_INT 105
11367: PPUSH
11368: CALL_OW 67
// allowHeikeAttack := true ;
11372: LD_ADDR_EXP 11
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// activeGrishkoAI := false ;
11380: LD_ADDR_EXP 10
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
11388: LD_INT 20
11390: PPUSH
11391: LD_INT 0
11393: PPUSH
11394: CALL_OW 424
// if not hillBase then
11398: LD_EXP 15
11402: NOT
11403: IFFALSE 11412
// ChangeMissionObjectives ( HillDone ) ;
11405: LD_STRING HillDone
11407: PPUSH
11408: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11412: LD_EXP 33
11416: PPUSH
11417: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11421: LD_ADDR_VAR 0 1
11425: PUSH
11426: LD_INT 22
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 21
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11480
// if HasTask ( i ) then
11458: LD_VAR 0 1
11462: PPUSH
11463: CALL_OW 314
11467: IFFALSE 11478
// ComHold ( i ) ;
11469: LD_VAR 0 1
11473: PPUSH
11474: CALL_OW 140
11478: GO 11455
11480: POP
11481: POP
// DialogueOn ;
11482: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11486: LD_EXP 33
11490: PPUSH
11491: LD_STRING DO-assault-1
11493: PPUSH
11494: CALL_OW 94
// DialogueOff ;
11498: CALL_OW 7
// game_speed := 4 ;
11502: LD_ADDR_OWVAR 65
11506: PUSH
11507: LD_INT 4
11509: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11510: LD_ADDR_VAR 0 1
11514: PUSH
11515: LD_EXP 46
11519: PPUSH
11520: LD_INT 3
11522: PUSH
11523: LD_INT 54
11525: PUSH
11526: EMPTY
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 72
11537: PUSH
11538: FOR_IN
11539: IFFALSE 11558
// ComMoveXY ( i , 226 , 114 ) ;
11541: LD_VAR 0 1
11545: PPUSH
11546: LD_INT 226
11548: PPUSH
11549: LD_INT 114
11551: PPUSH
11552: CALL_OW 111
11556: GO 11538
11558: POP
11559: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11560: LD_EXP 41
11564: PPUSH
11565: LD_INT 22
11567: PUSH
11568: LD_INT 6
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: LD_INT 30
11577: PUSH
11578: LD_INT 4
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PPUSH
11589: CALL_OW 69
11593: PPUSH
11594: LD_EXP 41
11598: PPUSH
11599: CALL_OW 74
11603: PPUSH
11604: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11608: LD_STRING Attack
11610: PPUSH
11611: CALL_OW 337
// music_class := music_combat ;
11615: LD_ADDR_OWVAR 72
11619: PUSH
11620: LD_INT 1
11622: ST_TO_ADDR
// music_nat := 4 ;
11623: LD_ADDR_OWVAR 71
11627: PUSH
11628: LD_INT 4
11630: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11631: LD_INT 5
11633: PPUSH
11634: LD_EXP 41
11638: PPUSH
11639: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11643: LD_INT 6
11645: PPUSH
11646: LD_EXP 38
11650: PPUSH
11651: LD_INT 25
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: PUSH
11666: LD_INT 4
11668: ARRAY
11669: PPUSH
11670: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_EXP 38
11683: PPUSH
11684: LD_INT 3
11686: PUSH
11687: LD_INT 25
11689: PUSH
11690: LD_INT 4
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 72
11705: PUSH
11706: FOR_IN
11707: IFFALSE 11726
// ComAgressiveMove ( i , 221 , 110 ) ;
11709: LD_VAR 0 1
11713: PPUSH
11714: LD_INT 221
11716: PPUSH
11717: LD_INT 110
11719: PPUSH
11720: CALL_OW 114
11724: GO 11706
11726: POP
11727: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
11728: LD_EXP 38
11732: PPUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 4
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PPUSH
11743: CALL_OW 72
11747: PPUSH
11748: LD_INT 214
11750: PPUSH
11751: LD_INT 124
11753: PPUSH
11754: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
11758: LD_EXP 38
11762: PPUSH
11763: LD_INT 25
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL_OW 72
11777: PUSH
11778: LD_INT 4
11780: ARRAY
11781: PPUSH
11782: LD_INT 214
11784: PPUSH
11785: LD_INT 114
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
11795: LD_EXP 41
11799: PPUSH
11800: LD_STRING D9-Gri-1
11802: PPUSH
11803: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
11807: LD_EXP 40
11811: PPUSH
11812: LD_STRING D9-Kur-1
11814: PPUSH
11815: CALL_OW 94
// wait ( 0 0$1 ) ;
11819: LD_INT 35
11821: PPUSH
11822: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
11826: LD_EXP 33
11830: PPUSH
11831: LD_INT 233
11833: PPUSH
11834: LD_INT 130
11836: PPUSH
11837: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
11841: LD_EXP 41
11845: PPUSH
11846: LD_STRING D9-Gri-2
11848: PPUSH
11849: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
11853: LD_EXP 40
11857: PPUSH
11858: LD_STRING D9-Kur-2
11860: PPUSH
11861: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
11865: LD_EXP 41
11869: PPUSH
11870: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
11874: LD_EXP 41
11878: PPUSH
11879: LD_INT 211
11881: PPUSH
11882: LD_INT 104
11884: PPUSH
11885: CALL_OW 171
// AddComHold ( Grishko ) ;
11889: LD_EXP 41
11893: PPUSH
11894: CALL_OW 200
// repeat wait ( 3 ) ;
11898: LD_INT 3
11900: PPUSH
11901: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
11905: LD_EXP 41
11909: PPUSH
11910: CALL_OW 310
11914: NOT
11915: IFFALSE 11898
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
11917: LD_EXP 38
11921: PPUSH
11922: LD_INT 34
11924: PUSH
11925: LD_INT 26
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 72
11936: PPUSH
11937: LD_EXP 41
11941: PPUSH
11942: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
11946: LD_EXP 38
11950: PPUSH
11951: LD_INT 34
11953: PUSH
11954: LD_INT 26
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 72
11965: PPUSH
11966: LD_INT 215
11968: PPUSH
11969: LD_INT 106
11971: PPUSH
11972: CALL_OW 174
// repeat wait ( 3 ) ;
11976: LD_INT 3
11978: PPUSH
11979: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
11983: LD_EXP 41
11987: PPUSH
11988: CALL_OW 256
11992: PUSH
11993: LD_INT 1000
11995: LESS
11996: IFFALSE 11976
// NormalAttack ( 5 , Grishko ) ;
11998: LD_INT 5
12000: PPUSH
12001: LD_EXP 41
12005: PPUSH
12006: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12010: LD_INT 6
12012: PPUSH
12013: LD_EXP 38
12017: PPUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 1
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 72
12032: PUSH
12033: LD_INT 4
12035: ARRAY
12036: PPUSH
12037: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12041: LD_EXP 41
12045: PPUSH
12046: LD_STRING D9-Gri-3
12048: PPUSH
12049: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12053: LD_EXP 40
12057: PPUSH
12058: LD_STRING D9-Kur-3
12060: PPUSH
12061: CALL_OW 94
// music_class := music_auto ;
12065: LD_ADDR_OWVAR 72
12069: PUSH
12070: LD_INT 0
12072: ST_TO_ADDR
// music_nat := music_auto ;
12073: LD_ADDR_OWVAR 71
12077: PUSH
12078: LD_INT 0
12080: ST_TO_ADDR
// for i in omarSquad do
12081: LD_ADDR_VAR 0 1
12085: PUSH
12086: LD_EXP 38
12090: PUSH
12091: FOR_IN
12092: IFFALSE 12234
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12094: LD_VAR 0 1
12098: PPUSH
12099: CALL_OW 247
12103: PUSH
12104: LD_INT 2
12106: EQUAL
12107: PUSH
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 256
12117: PUSH
12118: LD_INT 1000
12120: LESS
12121: AND
12122: IFFALSE 12188
// begin driver := IsDrivenBy ( i ) ;
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 311
12138: ST_TO_ADDR
// veh := i ;
12139: LD_ADDR_VAR 0 3
12143: PUSH
12144: LD_VAR 0 1
12148: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12149: LD_VAR 0 2
12153: PPUSH
12154: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12158: LD_VAR 0 2
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12172: LD_VAR 0 2
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: CALL_OW 180
// end else
12186: GO 12232
// if GetLives ( i ) < 500 then
12188: LD_VAR 0 1
12192: PPUSH
12193: CALL_OW 256
12197: PUSH
12198: LD_INT 500
12200: LESS
12201: IFFALSE 12232
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12203: LD_EXP 38
12207: PPUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PPUSH
12218: CALL_OW 72
12222: PPUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 188
// end ; end ;
12232: GO 12091
12234: POP
12235: POP
// repeat wait ( 0 0$1 ) ;
12236: LD_INT 35
12238: PPUSH
12239: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12243: LD_EXP 38
12247: PPUSH
12248: LD_INT 3
12250: PUSH
12251: LD_INT 24
12253: PUSH
12254: LD_INT 1000
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 21
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 72
12283: NOT
12284: PUSH
12285: LD_EXP 38
12289: PPUSH
12290: LD_INT 3
12292: PUSH
12293: LD_INT 24
12295: PUSH
12296: LD_INT 250
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 72
12311: NOT
12312: AND
12313: IFFALSE 12236
// wait ( 0 0$2 ) ;
12315: LD_INT 70
12317: PPUSH
12318: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12322: LD_ADDR_VAR 0 5
12326: PUSH
12327: LD_EXP 38
12331: PPUSH
12332: LD_INT 58
12334: PUSH
12335: EMPTY
12336: LIST
12337: PUSH
12338: LD_INT 21
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PPUSH
12352: CALL_OW 72
12356: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12357: LD_ADDR_VAR 0 6
12361: PUSH
12362: LD_EXP 38
12366: PPUSH
12367: LD_INT 25
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 55
12382: PUSH
12383: EMPTY
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 72
12398: ST_TO_ADDR
// for i := 1 to tmp do
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_VAR 0 5
12413: PUSH
12414: FOR_TO
12415: IFFALSE 12445
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12417: LD_VAR 0 6
12421: PUSH
12422: LD_VAR 0 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 5
12432: PUSH
12433: LD_VAR 0 1
12437: ARRAY
12438: PPUSH
12439: CALL_OW 120
12443: GO 12414
12445: POP
12446: POP
// wait ( 0 0$5 ) ;
12447: LD_INT 175
12449: PPUSH
12450: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
12454: LD_EXP 38
12458: PPUSH
12459: LD_INT 199
12461: PPUSH
12462: LD_INT 141
12464: PPUSH
12465: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
12469: LD_EXP 33
12473: PPUSH
12474: LD_INT 190
12476: PPUSH
12477: LD_INT 143
12479: PPUSH
12480: CALL_OW 114
// AddComHold ( Omar ) ;
12484: LD_EXP 33
12488: PPUSH
12489: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12493: LD_EXP 38
12497: PPUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 25
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 72
12530: PPUSH
12531: LD_INT 161
12533: PPUSH
12534: LD_INT 130
12536: PPUSH
12537: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12541: LD_EXP 38
12545: PPUSH
12546: LD_INT 25
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PPUSH
12556: CALL_OW 72
12560: PPUSH
12561: LD_INT 163
12563: PPUSH
12564: LD_INT 122
12566: PPUSH
12567: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12571: LD_EXP 38
12575: PPUSH
12576: LD_INT 25
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 72
12590: PUSH
12591: LD_INT 4
12593: ARRAY
12594: PPUSH
12595: LD_INT 165
12597: PPUSH
12598: LD_INT 118
12600: PPUSH
12601: LD_INT 0
12603: PPUSH
12604: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12608: LD_EXP 38
12612: PPUSH
12613: LD_INT 25
12615: PUSH
12616: LD_INT 1
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 72
12627: PUSH
12628: LD_INT 4
12630: ARRAY
12631: PPUSH
12632: LD_INT 159
12634: PPUSH
12635: LD_INT 116
12637: PPUSH
12638: LD_INT 0
12640: PPUSH
12641: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12645: LD_EXP 38
12649: PPUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 2
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 72
12664: PPUSH
12665: LD_INT 169
12667: PPUSH
12668: LD_INT 114
12670: PPUSH
12671: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
12675: LD_INT 35
12677: PPUSH
12678: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_EXP 38
12691: PPUSH
12692: LD_INT 25
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PPUSH
12702: CALL_OW 72
12706: ST_TO_ADDR
// for i in tmp do
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_VAR 0 5
12716: PUSH
12717: FOR_IN
12718: IFFALSE 12815
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
12720: LD_VAR 0 1
12724: PPUSH
12725: CALL_OW 256
12729: PUSH
12730: LD_INT 600
12732: LESS
12733: PUSH
12734: LD_VAR 0 1
12738: PPUSH
12739: LD_INT 161
12741: PPUSH
12742: LD_INT 130
12744: PPUSH
12745: CALL_OW 297
12749: PUSH
12750: LD_INT 6
12752: GREATER
12753: AND
12754: IFFALSE 12771
// ComMoveXY ( i , 161 , 130 ) ;
12756: LD_VAR 0 1
12760: PPUSH
12761: LD_INT 161
12763: PPUSH
12764: LD_INT 130
12766: PPUSH
12767: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 256
12780: PUSH
12781: LD_INT 1000
12783: EQUAL
12784: PUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 314
12794: NOT
12795: AND
12796: IFFALSE 12813
// ComAgressiveMove ( i , 160 , 109 ) ;
12798: LD_VAR 0 1
12802: PPUSH
12803: LD_INT 160
12805: PPUSH
12806: LD_INT 109
12808: PPUSH
12809: CALL_OW 114
// end ;
12813: GO 12717
12815: POP
12816: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
12817: LD_ADDR_VAR 0 5
12821: PUSH
12822: LD_EXP 38
12826: PPUSH
12827: LD_INT 21
12829: PUSH
12830: LD_INT 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 72
12841: ST_TO_ADDR
// for i in tmp do
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_VAR 0 5
12851: PUSH
12852: FOR_IN
12853: IFFALSE 13119
// begin tmp2 := IsDrivenBy ( i ) ;
12855: LD_ADDR_VAR 0 6
12859: PUSH
12860: LD_VAR 0 1
12864: PPUSH
12865: CALL_OW 311
12869: ST_TO_ADDR
// if not tmp2 then
12870: LD_VAR 0 6
12874: NOT
12875: IFFALSE 12879
// continue ;
12877: GO 12852
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 256
12888: PUSH
12889: LD_INT 600
12891: GREATEREQUAL
12892: PUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 110
12902: PUSH
12903: LD_INT 1
12905: EQUAL
12906: AND
12907: IFFALSE 12921
// SetTag ( i , 0 ) ;
12909: LD_VAR 0 1
12913: PPUSH
12914: LD_INT 0
12916: PPUSH
12917: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL_OW 256
12930: PUSH
12931: LD_INT 600
12933: GREATEREQUAL
12934: PUSH
12935: LD_VAR 0 1
12939: PPUSH
12940: CALL_OW 110
12944: NOT
12945: AND
12946: IFFALSE 12972
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_VAR 0 7
12957: PPUSH
12958: LD_VAR 0 1
12962: PPUSH
12963: CALL_OW 74
12967: PPUSH
12968: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
12972: LD_VAR 0 1
12976: PPUSH
12977: CALL_OW 256
12981: PUSH
12982: LD_INT 600
12984: LESS
12985: PUSH
12986: LD_VAR 0 1
12990: PPUSH
12991: CALL_OW 110
12995: NOT
12996: AND
12997: IFFALSE 13026
// begin SetTag ( i , 1 ) ;
12999: LD_VAR 0 1
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13011: LD_VAR 0 1
13015: PPUSH
13016: LD_INT 202
13018: PPUSH
13019: LD_INT 150
13021: PPUSH
13022: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 110
13035: PUSH
13036: LD_INT 1
13038: EQUAL
13039: PUSH
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_INT 202
13047: PPUSH
13048: LD_INT 150
13050: PPUSH
13051: CALL_OW 297
13055: PUSH
13056: LD_INT 6
13058: LESS
13059: AND
13060: PUSH
13061: LD_VAR 0 6
13065: AND
13066: IFFALSE 13117
// begin ComExitVehicle ( tmp2 ) ;
13068: LD_VAR 0 6
13072: PPUSH
13073: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13077: LD_VAR 0 6
13081: PPUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13091: LD_VAR 0 6
13095: PPUSH
13096: LD_INT 700
13098: PPUSH
13099: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13103: LD_VAR 0 6
13107: PPUSH
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 180
// end ; end ;
13117: GO 12852
13119: POP
13120: POP
// until kirovDestroyed ;
13121: LD_EXP 16
13125: IFFALSE 12675
// repeat wait ( 0 0$1 ) ;
13127: LD_INT 35
13129: PPUSH
13130: CALL_OW 67
// for i in omarSquad union Omar do
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_EXP 38
13143: PUSH
13144: LD_EXP 33
13148: UNION
13149: PUSH
13150: FOR_IN
13151: IFFALSE 13321
// if IsInArea ( i , southRoadArea ) then
13153: LD_VAR 0 1
13157: PPUSH
13158: LD_INT 15
13160: PPUSH
13161: CALL_OW 308
13165: IFFALSE 13178
// RemoveUnit ( i ) else
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 64
13176: GO 13319
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 257
13187: PUSH
13188: LD_INT 3
13190: EQUAL
13191: PUSH
13192: LD_VAR 0 1
13196: PPUSH
13197: CALL_OW 310
13201: NOT
13202: AND
13203: PUSH
13204: LD_INT 22
13206: PUSH
13207: LD_INT 5
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 24
13216: PUSH
13217: LD_INT 251
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 58
13236: PUSH
13237: EMPTY
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 69
13250: AND
13251: IFFALSE 13304
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13253: LD_VAR 0 1
13257: PPUSH
13258: LD_INT 22
13260: PUSH
13261: LD_INT 5
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 21
13270: PUSH
13271: LD_INT 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 58
13280: PUSH
13281: EMPTY
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: PUSH
13294: LD_INT 1
13296: ARRAY
13297: PPUSH
13298: CALL_OW 120
13302: GO 13319
// ComMoveXY ( i , 208 , 162 ) ;
13304: LD_VAR 0 1
13308: PPUSH
13309: LD_INT 208
13311: PPUSH
13312: LD_INT 162
13314: PPUSH
13315: CALL_OW 111
// end ;
13319: GO 13150
13321: POP
13322: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13323: LD_INT 22
13325: PUSH
13326: LD_INT 5
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 21
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 69
13351: NOT
13352: IFFALSE 13127
// end ;
13354: PPOPN 7
13356: END
// every 0 0$1 trigger IsDead ( kirov ) do
13357: LD_INT 71
13359: PPUSH
13360: CALL_OW 301
13364: IFFALSE 13381
13366: GO 13368
13368: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13369: LD_EXP 25
13373: PPUSH
13374: LD_STRING DH-1-Kirov
13376: PPUSH
13377: CALL_OW 88
13381: END
// every 0 0$1 trigger See ( 2 , beria ) do
13382: LD_INT 2
13384: PPUSH
13385: LD_INT 106
13387: PPUSH
13388: CALL_OW 292
13392: IFFALSE 13409
13394: GO 13396
13396: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13397: LD_EXP 25
13401: PPUSH
13402: LD_STRING DH-1-Beria
13404: PPUSH
13405: CALL_OW 88
13409: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13410: LD_INT 2
13412: PPUSH
13413: LD_INT 112
13415: PPUSH
13416: CALL_OW 292
13420: IFFALSE 13687
13422: GO 13424
13424: DISABLE
// begin DialogueOn ;
13425: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13429: LD_INT 112
13431: PPUSH
13432: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13436: LD_EXP 25
13440: PPUSH
13441: LD_STRING DH-1-Kagan
13443: PPUSH
13444: CALL_OW 88
// if Kamil then
13448: LD_EXP 29
13452: IFFALSE 13490
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13454: LD_EXP 29
13458: PPUSH
13459: LD_STRING DKam-Kagan-2
13461: PPUSH
13462: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13466: LD_EXP 26
13470: PPUSH
13471: LD_STRING DG-Kagan-3
13473: PPUSH
13474: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13478: LD_EXP 26
13482: PPUSH
13483: LD_STRING DG-Kagan-4
13485: PPUSH
13486: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13490: LD_STRING KaganBase
13492: PPUSH
13493: CALL_OW 97
13497: PUSH
13498: LD_INT 1
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13601
13506: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13507: LD_EXP 25
13511: PPUSH
13512: LD_STRING DH-Kagan-5
13514: PPUSH
13515: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13519: LD_EXP 25
13523: PPUSH
13524: LD_STRING DH-Kagan-6
13526: PPUSH
13527: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13531: LD_EXP 36
13535: PPUSH
13536: LD_STRING DShar-Kagan-7
13538: PPUSH
13539: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13543: LD_EXP 25
13547: PPUSH
13548: LD_STRING DH-Kagan-8
13550: PPUSH
13551: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13555: LD_EXP 25
13559: PPUSH
13560: LD_STRING DH-Kagan-9
13562: PPUSH
13563: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13567: LD_EXP 36
13571: PPUSH
13572: LD_STRING DShar-Kagan-10
13574: PPUSH
13575: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13579: LD_EXP 25
13583: PPUSH
13584: LD_STRING DH-Kagan-11
13586: PPUSH
13587: CALL_OW 88
// kaganCaptured := true ;
13591: LD_ADDR_EXP 24
13595: PUSH
13596: LD_INT 1
13598: ST_TO_ADDR
// end ; 2 :
13599: GO 13683
13601: LD_INT 2
13603: DOUBLE
13604: EQUAL
13605: IFTRUE 13609
13607: GO 13682
13609: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
13610: LD_INT 22
13612: PUSH
13613: LD_INT 8
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: PUSH
13625: LD_EXP 35
13629: AND
13630: IFFALSE 13644
// Say ( Heike , DH-Kagan-a-5 ) ;
13632: LD_EXP 25
13636: PPUSH
13637: LD_STRING DH-Kagan-a-5
13639: PPUSH
13640: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13644: LD_EXP 25
13648: PPUSH
13649: LD_STRING DH-Kagan-a-6
13651: PPUSH
13652: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13656: LD_EXP 25
13660: PPUSH
13661: LD_STRING DH-Kagan-a-7
13663: PPUSH
13664: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13668: LD_EXP 26
13672: PPUSH
13673: LD_STRING DG-Kagan-a-8
13675: PPUSH
13676: CALL_OW 88
// end ; end ;
13680: GO 13683
13682: POP
// DialogueOff ;
13683: CALL_OW 7
// end ;
13687: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
13688: LD_EXP 18
13692: PUSH
13693: LD_INT 112
13695: PPUSH
13696: CALL_OW 255
13700: PUSH
13701: LD_INT 2
13703: EQUAL
13704: OR
13705: IFFALSE 13717
13707: GO 13709
13709: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
13710: LD_STRING KaganDone
13712: PPUSH
13713: CALL_OW 337
13717: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13718: LD_EXP 6
13722: PUSH
13723: LD_EXP 48
13727: PPUSH
13728: LD_INT 95
13730: PUSH
13731: LD_INT 19
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 72
13742: AND
13743: IFFALSE 13820
13745: GO 13747
13747: DISABLE
// begin DialogueOn ;
13748: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13752: LD_INT 63
13754: PPUSH
13755: LD_INT 32
13757: PPUSH
13758: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13762: LD_INT 63
13764: PPUSH
13765: LD_INT 32
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: LD_INT 12
13773: NEG
13774: PPUSH
13775: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13779: LD_EXP 25
13783: PPUSH
13784: LD_STRING DH-Omicron-1
13786: PPUSH
13787: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13791: LD_EXP 27
13795: PPUSH
13796: LD_STRING DM-Omicron-2
13798: PPUSH
13799: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13803: LD_INT 63
13805: PPUSH
13806: LD_INT 32
13808: PPUSH
13809: LD_INT 2
13811: PPUSH
13812: CALL_OW 331
// DialogueOff ;
13816: CALL_OW 7
// end ;
13820: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
13821: LD_INT 2
13823: PPUSH
13824: LD_EXP 50
13828: PPUSH
13829: CALL_OW 292
13833: PUSH
13834: LD_EXP 50
13838: PPUSH
13839: CALL_OW 255
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: OR
13848: PUSH
13849: LD_INT 106
13851: PPUSH
13852: CALL_OW 255
13856: PUSH
13857: LD_INT 2
13859: EQUAL
13860: OR
13861: PUSH
13862: LD_EXP 50
13866: PPUSH
13867: CALL_OW 302
13871: AND
13872: PUSH
13873: LD_EXP 25
13877: PPUSH
13878: CALL_OW 302
13882: AND
13883: PUSH
13884: LD_EXP 35
13888: PPUSH
13889: CALL_OW 302
13893: AND
13894: IFFALSE 14615
13896: GO 13898
13898: DISABLE
13899: LD_INT 0
13901: PPUSH
13902: PPUSH
13903: PPUSH
13904: PPUSH
13905: PPUSH
// begin DialogueOn ;
13906: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
13910: LD_INT 111
13912: PPUSH
13913: LD_INT 90
13915: PPUSH
13916: LD_INT 2
13918: PPUSH
13919: LD_INT 6
13921: NEG
13922: PPUSH
13923: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
13927: LD_INT 111
13929: PPUSH
13930: LD_INT 90
13932: PPUSH
13933: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
13937: LD_EXP 35
13941: PPUSH
13942: LD_STRING DA-Cap-1
13944: PPUSH
13945: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
13949: LD_EXP 25
13953: PPUSH
13954: LD_STRING DH-Cap-2
13956: PPUSH
13957: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
13961: LD_INT 111
13963: PPUSH
13964: LD_INT 90
13966: PPUSH
13967: LD_INT 2
13969: PPUSH
13970: CALL_OW 331
// DialogueOff ;
13974: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
13978: LD_INT 35
13980: PPUSH
13981: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
13985: LD_EXP 17
13989: PUSH
13990: LD_INT 106
13992: PPUSH
13993: CALL_OW 255
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: OR
14002: PUSH
14003: LD_EXP 50
14007: PPUSH
14008: CALL_OW 255
14012: PUSH
14013: LD_INT 2
14015: EQUAL
14016: OR
14017: PUSH
14018: LD_EXP 50
14022: PPUSH
14023: CALL_OW 302
14027: AND
14028: PUSH
14029: LD_EXP 35
14033: PPUSH
14034: CALL_OW 302
14038: AND
14039: PUSH
14040: LD_INT 2
14042: PPUSH
14043: CALL_OW 463
14047: NOT
14048: AND
14049: PUSH
14050: LD_INT 22
14052: PUSH
14053: LD_INT 3
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 92
14072: PUSH
14073: LD_INT 110
14075: PUSH
14076: LD_INT 95
14078: PUSH
14079: LD_INT 12
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 69
14097: NOT
14098: AND
14099: PUSH
14100: LD_INT 22
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 30
14112: PUSH
14113: LD_INT 5
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 92
14122: PUSH
14123: LD_INT 110
14125: PUSH
14126: LD_INT 95
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PPUSH
14143: CALL_OW 69
14147: NOT
14148: AND
14149: IFFALSE 13978
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14151: LD_ADDR_VAR 0 2
14155: PUSH
14156: LD_EXP 37
14160: PUSH
14161: LD_EXP 28
14165: PUSH
14166: LD_EXP 29
14170: PUSH
14171: LD_EXP 31
14175: PUSH
14176: LD_EXP 30
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: UNION
14187: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14188: LD_ADDR_VAR 0 2
14192: PUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_INT 50
14200: PUSH
14201: EMPTY
14202: LIST
14203: PPUSH
14204: CALL_OW 72
14208: ST_TO_ADDR
// if tmp < 2 then
14209: LD_VAR 0 2
14213: PUSH
14214: LD_INT 2
14216: LESS
14217: IFFALSE 14229
// q := 2 else
14219: LD_ADDR_VAR 0 4
14223: PUSH
14224: LD_INT 2
14226: ST_TO_ADDR
14227: GO 14242
// q := Query ( LabCap ) ;
14229: LD_ADDR_VAR 0 4
14233: PUSH
14234: LD_STRING LabCap
14236: PPUSH
14237: CALL_OW 97
14241: ST_TO_ADDR
// case q of 1 :
14242: LD_VAR 0 4
14246: PUSH
14247: LD_INT 1
14249: DOUBLE
14250: EQUAL
14251: IFTRUE 14255
14253: GO 14579
14255: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14256: LD_INT 2
14258: PPUSH
14259: LD_EXP 50
14263: PPUSH
14264: CALL_OW 471
// labCaptured := true ;
14268: LD_ADDR_EXP 21
14272: PUSH
14273: LD_INT 1
14275: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14276: LD_EXP 25
14280: PPUSH
14281: LD_STRING DH-Cap-a-1
14283: PPUSH
14284: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14288: LD_EXP 35
14292: PPUSH
14293: LD_STRING DA-Cap-a-2
14295: PPUSH
14296: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike ] ^ [ sel_changeable ] ^ tmp ;
14300: LD_ADDR_VAR 0 5
14304: PUSH
14305: LD_EXP 35
14309: PUSH
14310: LD_INT -3
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT -2
14319: PUSH
14320: LD_INT -4
14322: PUSH
14323: LD_EXP 25
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: ADD
14333: PUSH
14334: LD_INT -3
14336: PUSH
14337: EMPTY
14338: LIST
14339: ADD
14340: PUSH
14341: LD_VAR 0 2
14345: ADD
14346: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_STRING Select two characters to go with Aviradze
14354: PPUSH
14355: LD_INT 2
14357: PPUSH
14358: LD_INT 2
14360: PPUSH
14361: LD_VAR 0 5
14365: PPUSH
14366: EMPTY
14367: PPUSH
14368: CALL_OW 42
14372: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14373: LD_EXP 50
14377: PPUSH
14378: LD_INT 8
14380: PPUSH
14381: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14385: LD_EXP 35
14389: PPUSH
14390: LD_INT 8
14392: PPUSH
14393: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14397: LD_ADDR_EXP 39
14401: PUSH
14402: LD_EXP 35
14406: PUSH
14407: EMPTY
14408: LIST
14409: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14410: LD_EXP 35
14414: PPUSH
14415: CALL_OW 310
14419: IFFALSE 14430
// ComExit ( Aviradze ) ;
14421: LD_EXP 35
14425: PPUSH
14426: CALL 72221 0 1
// wait ( 3 ) ;
14430: LD_INT 3
14432: PPUSH
14433: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14437: LD_EXP 35
14441: PPUSH
14442: LD_EXP 50
14446: PPUSH
14447: CALL_OW 120
// for i := 1 to 2 do
14451: LD_ADDR_VAR 0 1
14455: PUSH
14456: DOUBLE
14457: LD_INT 1
14459: DEC
14460: ST_TO_ADDR
14461: LD_INT 2
14463: PUSH
14464: FOR_TO
14465: IFFALSE 14568
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14467: LD_ADDR_EXP 39
14471: PUSH
14472: LD_EXP 39
14476: PUSH
14477: LD_VAR 0 3
14481: PUSH
14482: LD_VAR 0 1
14486: ARRAY
14487: UNION
14488: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14489: LD_VAR 0 3
14493: PUSH
14494: LD_VAR 0 1
14498: ARRAY
14499: PPUSH
14500: LD_INT 8
14502: PPUSH
14503: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14507: LD_VAR 0 3
14511: PUSH
14512: LD_VAR 0 1
14516: ARRAY
14517: PPUSH
14518: CALL_OW 310
14522: IFFALSE 14539
// ComExit ( tmp2 [ i ] ) ;
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 1
14533: ARRAY
14534: PPUSH
14535: CALL 72221 0 1
// wait ( 3 ) ;
14539: LD_INT 3
14541: PPUSH
14542: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14546: LD_VAR 0 3
14550: PUSH
14551: LD_VAR 0 1
14555: ARRAY
14556: PPUSH
14557: LD_EXP 50
14561: PPUSH
14562: CALL_OW 120
// end ;
14566: GO 14464
14568: POP
14569: POP
// SetAchievement ( ACH_LAB ) ;
14570: LD_STRING ACH_LAB
14572: PPUSH
14573: CALL_OW 543
// end ; 2 :
14577: GO 14615
14579: LD_INT 2
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14614
14587: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14588: LD_EXP 25
14592: PPUSH
14593: LD_STRING DH-Cap-b-1
14595: PPUSH
14596: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14600: LD_EXP 35
14604: PPUSH
14605: LD_STRING DA-Cap-b-2
14607: PPUSH
14608: CALL_OW 88
// end ; end ;
14612: GO 14615
14614: POP
// end ;
14615: PPOPN 5
14617: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14618: LD_INT 10
14620: PPUSH
14621: LD_INT 22
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 31
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PPUSH
14645: CALL_OW 70
14649: PUSH
14650: LD_INT 2
14652: GREATEREQUAL
14653: IFFALSE 14665
14655: GO 14657
14657: DISABLE
// SetAchievement ( ACH_KING ) ;
14658: LD_STRING ACH_KING
14660: PPUSH
14661: CALL_OW 543
14665: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14666: LD_EXP 11
14670: NOT
14671: PUSH
14672: LD_INT 10
14674: PPUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: LD_INT 30
14690: PUSH
14691: LD_INT 31
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 4
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 70
14721: AND
14722: IFFALSE 14742
14724: GO 14726
14726: DISABLE
// begin hillBase := true ;
14727: LD_ADDR_EXP 15
14731: PUSH
14732: LD_INT 1
14734: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14735: LD_STRING HillDone
14737: PPUSH
14738: CALL_OW 337
// end ;
14742: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14743: LD_EXP 30
14747: PUSH
14748: LD_EXP 30
14752: PPUSH
14753: CALL_OW 256
14757: PUSH
14758: LD_INT 3
14760: LESS
14761: AND
14762: IFFALSE 14808
14764: GO 14766
14766: DISABLE
// begin DialogueOn ;
14767: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14771: LD_EXP 30
14775: PPUSH
14776: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14780: LD_EXP 30
14784: PPUSH
14785: LD_STRING DK-Kkilled-1
14787: PPUSH
14788: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14792: LD_EXP 25
14796: PPUSH
14797: LD_STRING DH-Kkilled-2
14799: PPUSH
14800: CALL_OW 88
// DialogueOff ;
14804: CALL_OW 7
// end ;
14808: END
// every 0 0$1 trigger kaiaKilledByRussian do
14809: LD_EXP 23
14813: IFFALSE 14830
14815: GO 14817
14817: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14818: LD_EXP 25
14822: PPUSH
14823: LD_STRING DH-Kkilled-3
14825: PPUSH
14826: CALL_OW 88
14830: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14831: LD_EXP 16
14835: PUSH
14836: LD_INT 106
14838: PPUSH
14839: CALL_OW 255
14843: PUSH
14844: LD_INT 2
14846: EQUAL
14847: PUSH
14848: LD_EXP 17
14852: OR
14853: AND
14854: PUSH
14855: LD_EXP 18
14859: PUSH
14860: LD_EXP 24
14864: PUSH
14865: LD_INT 112
14867: PPUSH
14868: CALL_OW 255
14872: PUSH
14873: LD_INT 2
14875: EQUAL
14876: AND
14877: OR
14878: AND
14879: IFFALSE 16068
14881: GO 14883
14883: DISABLE
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14890: LD_STRING GoToWest
14892: PPUSH
14893: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14897: LD_INT 17
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14907: LD_INT 35
14909: PPUSH
14910: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_INT 17
14921: PPUSH
14922: LD_INT 22
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 2
14934: PUSH
14935: LD_INT 21
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 3
14957: PUSH
14958: LD_INT 58
14960: PUSH
14961: EMPTY
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 70
14985: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14986: LD_ADDR_VAR 0 3
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: LD_INT 55
15006: PUSH
15007: EMPTY
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 2
15016: PUSH
15017: LD_INT 21
15019: PUSH
15020: LD_INT 1
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 21
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: LD_INT 58
15042: PUSH
15043: EMPTY
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15069: LD_VAR 0 2
15073: PUSH
15074: LD_INT 0
15076: PLUS
15077: PUSH
15078: LD_VAR 0 3
15082: PUSH
15083: LD_INT 0
15085: PLUS
15086: EQUAL
15087: IFFALSE 14907
// SaveCharacters ( Heike , 04_1_Heike ) ;
15089: LD_EXP 25
15093: PPUSH
15094: LD_STRING 04_1_Heike
15096: PPUSH
15097: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15101: LD_EXP 35
15105: PUSH
15106: LD_EXP 35
15110: PUSH
15111: LD_EXP 39
15115: IN
15116: NOT
15117: AND
15118: IFFALSE 15134
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15120: LD_EXP 35
15124: PPUSH
15125: LD_STRING 04_1_Aviradze
15127: PPUSH
15128: CALL_OW 38
15132: GO 15152
// if Aviradze then
15134: LD_EXP 35
15138: IFFALSE 15152
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15140: LD_EXP 35
15144: PPUSH
15145: LD_STRING 04_1_Aviradze_L
15147: PPUSH
15148: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15152: LD_EXP 28
15156: PUSH
15157: LD_EXP 28
15161: PUSH
15162: LD_EXP 39
15166: IN
15167: NOT
15168: AND
15169: IFFALSE 15185
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15171: LD_EXP 28
15175: PPUSH
15176: LD_STRING 04_1_Ibrahim
15178: PPUSH
15179: CALL_OW 38
15183: GO 15203
// if Ibrahim then
15185: LD_EXP 28
15189: IFFALSE 15203
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15191: LD_EXP 28
15195: PPUSH
15196: LD_STRING 04_1_Ibrahim_L
15198: PPUSH
15199: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15203: LD_EXP 29
15207: PUSH
15208: LD_EXP 29
15212: PUSH
15213: LD_EXP 39
15217: IN
15218: NOT
15219: AND
15220: IFFALSE 15236
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15222: LD_EXP 29
15226: PPUSH
15227: LD_STRING 04_1_Kamil
15229: PPUSH
15230: CALL_OW 38
15234: GO 15254
// if Kamil then
15236: LD_EXP 29
15240: IFFALSE 15254
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15242: LD_EXP 29
15246: PPUSH
15247: LD_STRING 04_1_Kamil_L
15249: PPUSH
15250: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15254: LD_EXP 31
15258: PUSH
15259: LD_EXP 31
15263: PUSH
15264: LD_EXP 39
15268: IN
15269: NOT
15270: AND
15271: IFFALSE 15287
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15273: LD_EXP 31
15277: PPUSH
15278: LD_STRING 04_1_Sophia
15280: PPUSH
15281: CALL_OW 38
15285: GO 15305
// if Sophia then
15287: LD_EXP 31
15291: IFFALSE 15305
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15293: LD_EXP 31
15297: PPUSH
15298: LD_STRING 04_1_Sophia_L
15300: PPUSH
15301: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15305: LD_EXP 30
15309: PUSH
15310: LD_EXP 30
15314: PUSH
15315: LD_EXP 39
15319: IN
15320: NOT
15321: AND
15322: IFFALSE 15338
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15324: LD_EXP 30
15328: PPUSH
15329: LD_STRING 04_1_Kaia
15331: PPUSH
15332: CALL_OW 38
15336: GO 15356
// if Kaia then
15338: LD_EXP 30
15342: IFFALSE 15356
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15344: LD_EXP 30
15348: PPUSH
15349: LD_STRING 04_1_Kaia_L
15351: PPUSH
15352: CALL_OW 38
// if Givi then
15356: LD_EXP 26
15360: IFFALSE 15374
// SaveCharacters ( Givi , 04_1_Givi ) ;
15362: LD_EXP 26
15366: PPUSH
15367: LD_STRING 04_1_Givi
15369: PPUSH
15370: CALL_OW 38
// if Mike then
15374: LD_EXP 27
15378: IFFALSE 15392
// SaveCharacters ( Mike , 04_1_Mike ) ;
15380: LD_EXP 27
15384: PPUSH
15385: LD_STRING 04_1_Mike
15387: PPUSH
15388: CALL_OW 38
// if Markov then
15392: LD_EXP 32
15396: IFFALSE 15410
// SaveCharacters ( Markov , 04_1_Markov ) ;
15398: LD_EXP 32
15402: PPUSH
15403: LD_STRING 04_1_Markov
15405: PPUSH
15406: CALL_OW 38
// if Kurt then
15410: LD_EXP 34
15414: IFFALSE 15435
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
15416: LD_EXP 34
15420: PPUSH
15421: LD_STRING 04_1_Kurt
15423: PPUSH
15424: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
15428: LD_STRING enableBioCharacter(BIO_KURT)
15430: PPUSH
15431: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
15435: LD_EXP 37
15439: PUSH
15440: LD_EXP 39
15444: DIFF
15445: IFFALSE 15465
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15447: LD_EXP 37
15451: PUSH
15452: LD_EXP 39
15456: DIFF
15457: PPUSH
15458: LD_STRING 04_1_others
15460: PPUSH
15461: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15465: LD_EXP 39
15469: PUSH
15470: LD_EXP 37
15474: AND
15475: IFFALSE 15560
// begin tmp := [ ] ;
15477: LD_ADDR_VAR 0 2
15481: PUSH
15482: EMPTY
15483: ST_TO_ADDR
// for i in heikeSecondSquad do
15484: LD_ADDR_VAR 0 1
15488: PUSH
15489: LD_EXP 37
15493: PUSH
15494: FOR_IN
15495: IFFALSE 15540
// if i in aviradzeSquad then
15497: LD_VAR 0 1
15501: PUSH
15502: LD_EXP 39
15506: IN
15507: IFFALSE 15538
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_VAR 0 2
15523: PUSH
15524: LD_INT 1
15526: PLUS
15527: PPUSH
15528: LD_VAR 0 1
15532: PPUSH
15533: CALL_OW 1
15537: ST_TO_ADDR
15538: GO 15494
15540: POP
15541: POP
// if tmp then
15542: LD_VAR 0 2
15546: IFFALSE 15560
// SaveCharacters ( tmp , 04_1_others_L ) ;
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_STRING 04_1_others_L
15555: PPUSH
15556: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15560: LD_ADDR_VAR 0 2
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 23
15577: PUSH
15578: LD_INT 0
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: ST_TO_ADDR
// if tmp then
15594: LD_VAR 0 2
15598: IFFALSE 15612
// SaveCharacters ( tmp , 04_1_apes ) ;
15600: LD_VAR 0 2
15604: PPUSH
15605: LD_STRING 04_1_apes
15607: PPUSH
15608: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 17
15619: PPUSH
15620: LD_INT 21
15622: PUSH
15623: LD_INT 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PPUSH
15630: CALL_OW 70
15634: ST_TO_ADDR
// if tmp then
15635: LD_VAR 0 2
15639: IFFALSE 15933
// begin tmp2 := [ ] ;
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: EMPTY
15647: ST_TO_ADDR
// for i in tmp do
15648: LD_ADDR_VAR 0 1
15652: PUSH
15653: LD_VAR 0 2
15657: PUSH
15658: FOR_IN
15659: IFFALSE 15919
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL_OW 264
15670: PUSH
15671: LD_INT 32
15673: PUSH
15674: LD_INT 12
15676: PUSH
15677: LD_INT 51
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: IN
15685: IFFALSE 15822
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_VAR 0 1
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 289
15704: PUSH
15705: LD_VAR 0 1
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 289
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 1
15739: PLUS
15740: PPUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 265
15750: PUSH
15751: LD_VAR 0 1
15755: PPUSH
15756: CALL_OW 262
15760: PUSH
15761: LD_VAR 0 1
15765: PPUSH
15766: CALL_OW 263
15770: PUSH
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 264
15780: PUSH
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 248
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 256
15800: PUSH
15801: LD_VAR 0 4
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 1
15819: ST_TO_ADDR
// end else
15820: GO 15917
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15822: LD_ADDR_VAR 0 3
15826: PUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_VAR 0 3
15836: PUSH
15837: LD_INT 1
15839: PLUS
15840: PPUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 265
15850: PUSH
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 262
15860: PUSH
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 263
15870: PUSH
15871: LD_VAR 0 1
15875: PPUSH
15876: CALL_OW 264
15880: PUSH
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL_OW 248
15890: PUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 256
15900: PUSH
15901: EMPTY
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 1
15916: ST_TO_ADDR
15917: GO 15658
15919: POP
15920: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15921: LD_VAR 0 3
15925: PPUSH
15926: LD_STRING 04_1_Vehicles
15928: PPUSH
15929: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15933: LD_EXP 21
15937: PPUSH
15938: LD_STRING 04_1_RuLabCaptured
15940: PPUSH
15941: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15945: LD_EXP 19
15949: PPUSH
15950: LD_STRING 04_1_EscapeCounter
15952: PPUSH
15953: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15957: LD_EXP 15
15961: PPUSH
15962: LD_STRING 04_1_BaseHill
15964: PPUSH
15965: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15969: LD_OWVAR 1
15973: PPUSH
15974: LD_STRING 04_1_Time
15976: PPUSH
15977: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15981: LD_EXP 14
15985: PPUSH
15986: LD_STRING 04_1_DeadCounter
15988: PPUSH
15989: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15993: LD_EXP 24
15997: PUSH
15998: LD_INT 112
16000: PPUSH
16001: CALL_OW 255
16005: MUL
16006: PUSH
16007: LD_INT 2
16009: EQUAL
16010: PPUSH
16011: LD_STRING 04_1_KaganCaptured
16013: PPUSH
16014: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16018: LD_INT 22
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 34
16030: PUSH
16031: LD_INT 26
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PPUSH
16042: CALL_OW 69
16046: PUSH
16047: LD_INT 0
16049: PLUS
16050: PPUSH
16051: LD_STRING 04_1_Flamethrower
16053: PPUSH
16054: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16058: LD_INT 1
16060: PPUSH
16061: LD_STRING __x1\04_cont2
16063: PPUSH
16064: CALL_OW 340
// end ; end_of_file
16068: PPOPN 4
16070: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 266
16080: PUSH
16081: LD_INT 0
16083: EQUAL
16084: PUSH
16085: LD_VAR 0 1
16089: PPUSH
16090: CALL_OW 255
16094: PUSH
16095: LD_INT 2
16097: EQUAL
16098: AND
16099: IFFALSE 16109
// baseConstructed := true ;
16101: LD_ADDR_EXP 3
16105: PUSH
16106: LD_INT 1
16108: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 266
16118: PUSH
16119: LD_INT 6
16121: EQUAL
16122: PUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 255
16132: PUSH
16133: LD_INT 2
16135: EQUAL
16136: AND
16137: IFFALSE 16147
// labConstructed := true ;
16139: LD_ADDR_EXP 4
16143: PUSH
16144: LD_INT 1
16146: ST_TO_ADDR
// end ;
16147: PPOPN 1
16149: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16150: LD_VAR 0 1
16154: PUSH
16155: LD_EXP 25
16159: EQUAL
16160: IFFALSE 16169
// YouLost ( Heike ) ;
16162: LD_STRING Heike
16164: PPUSH
16165: CALL_OW 104
// if un = Omar then
16169: LD_VAR 0 1
16173: PUSH
16174: LD_EXP 33
16178: EQUAL
16179: IFFALSE 16188
// YouLost ( Omar ) ;
16181: LD_STRING Omar
16183: PPUSH
16184: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16188: LD_VAR 0 1
16192: PUSH
16193: LD_INT 22
16195: PUSH
16196: LD_INT 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 23
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 21
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: IN
16233: IFFALSE 16249
// loseCounter := loseCounter + 1 ;
16235: LD_ADDR_EXP 14
16239: PUSH
16240: LD_EXP 14
16244: PUSH
16245: LD_INT 1
16247: PLUS
16248: ST_TO_ADDR
// if un = omikron then
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 64
16256: EQUAL
16257: IFFALSE 16267
// omicronFall := true ;
16259: LD_ADDR_EXP 13
16263: PUSH
16264: LD_INT 1
16266: ST_TO_ADDR
// if un = kirov then
16267: LD_VAR 0 1
16271: PUSH
16272: LD_INT 71
16274: EQUAL
16275: IFFALSE 16292
// begin ChangeMissionObjectives ( KirovDone ) ;
16277: LD_STRING KirovDone
16279: PPUSH
16280: CALL_OW 337
// kirovDestroyed := true ;
16284: LD_ADDR_EXP 16
16288: PUSH
16289: LD_INT 1
16291: ST_TO_ADDR
// end ; if un = beria then
16292: LD_VAR 0 1
16296: PUSH
16297: LD_INT 106
16299: EQUAL
16300: IFFALSE 16317
// begin ChangeMissionObjectives ( BeriaDone ) ;
16302: LD_STRING BeriaDone
16304: PPUSH
16305: CALL_OW 337
// beriaDestroyed := true ;
16309: LD_ADDR_EXP 17
16313: PUSH
16314: LD_INT 1
16316: ST_TO_ADDR
// end ; if un = kagan then
16317: LD_VAR 0 1
16321: PUSH
16322: LD_INT 112
16324: EQUAL
16325: IFFALSE 16335
// kaganDestroyed := true ;
16327: LD_ADDR_EXP 18
16331: PUSH
16332: LD_INT 1
16334: ST_TO_ADDR
// if un in russianPatrol then
16335: LD_VAR 0 1
16339: PUSH
16340: LD_EXP 47
16344: IN
16345: IFFALSE 16363
// russianPatrol := russianPatrol diff un ;
16347: LD_ADDR_EXP 47
16351: PUSH
16352: LD_EXP 47
16356: PUSH
16357: LD_VAR 0 1
16361: DIFF
16362: ST_TO_ADDR
// if un in russianOmicronAttackers then
16363: LD_VAR 0 1
16367: PUSH
16368: LD_EXP 48
16372: IN
16373: IFFALSE 16391
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16375: LD_ADDR_EXP 48
16379: PUSH
16380: LD_EXP 48
16384: PUSH
16385: LD_VAR 0 1
16389: DIFF
16390: ST_TO_ADDR
// end ;
16391: PPOPN 1
16393: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16394: LD_INT 0
16396: PPUSH
16397: PPUSH
16398: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16399: LD_VAR 0 1
16403: PUSH
16404: LD_INT 2
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 22
16419: PUSH
16420: LD_INT 4
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_INT 6
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 30
16445: PUSH
16446: LD_INT 32
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PPUSH
16457: CALL_OW 69
16461: IN
16462: IFFALSE 16635
// begin sol := UnitsInside ( un ) ;
16464: LD_ADDR_VAR 0 3
16468: PUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: CALL_OW 313
16478: ST_TO_ADDR
// if not sol then
16479: LD_VAR 0 3
16483: NOT
16484: IFFALSE 16488
// exit ;
16486: GO 16635
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16488: LD_ADDR_VAR 0 4
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 255
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 2
16512: PUSH
16513: LD_INT 30
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 30
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PPUSH
16542: CALL_OW 69
16546: ST_TO_ADDR
// if not nearestBarracks then
16547: LD_VAR 0 4
16551: NOT
16552: IFFALSE 16556
// exit ;
16554: GO 16635
// for i in nearestBarracks do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_VAR 0 4
16565: PUSH
16566: FOR_IN
16567: IFFALSE 16602
// if UnitsInside ( i ) = 6 then
16569: LD_VAR 0 2
16573: PPUSH
16574: CALL_OW 313
16578: PUSH
16579: LD_INT 6
16581: EQUAL
16582: IFFALSE 16600
// nearestBarracks := nearestBarracks diff i ;
16584: LD_ADDR_VAR 0 4
16588: PUSH
16589: LD_VAR 0 4
16593: PUSH
16594: LD_VAR 0 2
16598: DIFF
16599: ST_TO_ADDR
16600: GO 16566
16602: POP
16603: POP
// if not nearestBarracks then
16604: LD_VAR 0 4
16608: NOT
16609: IFFALSE 16613
// exit ;
16611: GO 16635
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16613: LD_VAR 0 3
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PPUSH
16622: LD_VAR 0 4
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PPUSH
16631: CALL_OW 120
// end ; end ;
16635: PPOPN 4
16637: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16638: LD_INT 0
16640: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16641: LD_EXP 8
16645: NOT
16646: PUSH
16647: LD_EXP 5
16651: NOT
16652: OR
16653: IFFALSE 16657
// exit ;
16655: GO 16725
// for i in camAreas do
16657: LD_ADDR_VAR 0 5
16661: PUSH
16662: LD_EXP 8
16666: PUSH
16667: FOR_IN
16668: IFFALSE 16723
// if InArea ( x , y , i ) then
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_VAR 0 4
16679: PPUSH
16680: LD_VAR 0 5
16684: PPUSH
16685: CALL_OW 309
16689: IFFALSE 16721
// begin SetAreaMapShow ( i , 0 ) ;
16691: LD_VAR 0 5
16695: PPUSH
16696: LD_INT 0
16698: PPUSH
16699: CALL_OW 424
// camAreas := camAreas diff i ;
16703: LD_ADDR_EXP 8
16707: PUSH
16708: LD_EXP 8
16712: PUSH
16713: LD_VAR 0 5
16717: DIFF
16718: ST_TO_ADDR
// break ;
16719: GO 16723
// end ;
16721: GO 16667
16723: POP
16724: POP
// end ;
16725: PPOPN 5
16727: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16728: LD_VAR 0 1
16732: PUSH
16733: LD_INT 2
16735: EQUAL
16736: PUSH
16737: LD_VAR 0 2
16741: PUSH
16742: LD_INT 5
16744: PUSH
16745: LD_INT 8
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: IN
16752: AND
16753: IFFALSE 16762
// YouLost ( Ally ) ;
16755: LD_STRING Ally
16757: PPUSH
16758: CALL_OW 104
// end ;
16762: PPOPN 2
16764: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16765: LD_VAR 0 1
16769: PUSH
16770: LD_EXP 30
16774: EQUAL
16775: PUSH
16776: LD_VAR 0 2
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: LD_INT 6
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: IN
16791: AND
16792: IFFALSE 16823
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16794: LD_ADDR_EXP 23
16798: PUSH
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 250
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 251
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: ST_TO_ADDR
// end ; end_of_file
16823: PPOPN 3
16825: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
16826: LD_EXP 11
16830: NOT
16831: PUSH
16832: LD_INT 12
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 287
16842: PUSH
16843: LD_INT 20
16845: PUSH
16846: LD_INT 16
16848: PUSH
16849: LD_INT 12
16851: PUSH
16852: LD_INT 10
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: PUSH
16861: LD_OWVAR 67
16865: ARRAY
16866: LESS
16867: AND
16868: IFFALSE 16895
16870: GO 16872
16872: DISABLE
// begin enable ;
16873: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 5
16879: PPUSH
16880: CALL_OW 12
16884: PPUSH
16885: LD_INT 12
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 55
// end ; end_of_file
16895: END
// every 0 0$1 trigger omarCountdown do
16896: LD_EXP 22
16900: IFFALSE 16952
16902: GO 16904
16904: DISABLE
// begin enable ;
16905: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
16906: LD_ADDR_OWVAR 47
16910: PUSH
16911: LD_STRING #X104-1
16913: PUSH
16914: LD_EXP 22
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
16923: LD_ADDR_EXP 22
16927: PUSH
16928: LD_EXP 22
16932: PUSH
16933: LD_INT 35
16935: MINUS
16936: ST_TO_ADDR
// if not omarCountdown then
16937: LD_EXP 22
16941: NOT
16942: IFFALSE 16952
// display_strings :=  ;
16944: LD_ADDR_OWVAR 47
16948: PUSH
16949: LD_STRING 
16951: ST_TO_ADDR
// end ; end_of_file
16952: END
// every 0 0$1 do
16953: GO 16955
16955: DISABLE
// begin enable ;
16956: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16957: LD_STRING updateTimer(
16959: PUSH
16960: LD_OWVAR 1
16964: STR
16965: PUSH
16966: LD_STRING );
16968: STR
16969: PPUSH
16970: CALL_OW 559
// end ;
16974: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16975: LD_INT 0
16977: PPUSH
// if p2 = 100 then
16978: LD_VAR 0 2
16982: PUSH
16983: LD_INT 100
16985: EQUAL
16986: IFFALSE 17989
// begin if not StreamModeActive then
16988: LD_EXP 52
16992: NOT
16993: IFFALSE 17003
// StreamModeActive := true ;
16995: LD_ADDR_EXP 52
16999: PUSH
17000: LD_INT 1
17002: ST_TO_ADDR
// if p3 = 0 then
17003: LD_VAR 0 3
17007: PUSH
17008: LD_INT 0
17010: EQUAL
17011: IFFALSE 17017
// InitStreamMode ;
17013: CALL 18149 0 0
// if p3 = 1 then
17017: LD_VAR 0 3
17021: PUSH
17022: LD_INT 1
17024: EQUAL
17025: IFFALSE 17035
// sRocket := true ;
17027: LD_ADDR_EXP 57
17031: PUSH
17032: LD_INT 1
17034: ST_TO_ADDR
// if p3 = 2 then
17035: LD_VAR 0 3
17039: PUSH
17040: LD_INT 2
17042: EQUAL
17043: IFFALSE 17053
// sSpeed := true ;
17045: LD_ADDR_EXP 56
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// if p3 = 3 then
17053: LD_VAR 0 3
17057: PUSH
17058: LD_INT 3
17060: EQUAL
17061: IFFALSE 17071
// sEngine := true ;
17063: LD_ADDR_EXP 58
17067: PUSH
17068: LD_INT 1
17070: ST_TO_ADDR
// if p3 = 4 then
17071: LD_VAR 0 3
17075: PUSH
17076: LD_INT 4
17078: EQUAL
17079: IFFALSE 17089
// sSpec := true ;
17081: LD_ADDR_EXP 55
17085: PUSH
17086: LD_INT 1
17088: ST_TO_ADDR
// if p3 = 5 then
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 5
17096: EQUAL
17097: IFFALSE 17107
// sLevel := true ;
17099: LD_ADDR_EXP 59
17103: PUSH
17104: LD_INT 1
17106: ST_TO_ADDR
// if p3 = 6 then
17107: LD_VAR 0 3
17111: PUSH
17112: LD_INT 6
17114: EQUAL
17115: IFFALSE 17125
// sArmoury := true ;
17117: LD_ADDR_EXP 60
17121: PUSH
17122: LD_INT 1
17124: ST_TO_ADDR
// if p3 = 7 then
17125: LD_VAR 0 3
17129: PUSH
17130: LD_INT 7
17132: EQUAL
17133: IFFALSE 17143
// sRadar := true ;
17135: LD_ADDR_EXP 61
17139: PUSH
17140: LD_INT 1
17142: ST_TO_ADDR
// if p3 = 8 then
17143: LD_VAR 0 3
17147: PUSH
17148: LD_INT 8
17150: EQUAL
17151: IFFALSE 17161
// sBunker := true ;
17153: LD_ADDR_EXP 62
17157: PUSH
17158: LD_INT 1
17160: ST_TO_ADDR
// if p3 = 9 then
17161: LD_VAR 0 3
17165: PUSH
17166: LD_INT 9
17168: EQUAL
17169: IFFALSE 17179
// sHack := true ;
17171: LD_ADDR_EXP 63
17175: PUSH
17176: LD_INT 1
17178: ST_TO_ADDR
// if p3 = 10 then
17179: LD_VAR 0 3
17183: PUSH
17184: LD_INT 10
17186: EQUAL
17187: IFFALSE 17197
// sFire := true ;
17189: LD_ADDR_EXP 64
17193: PUSH
17194: LD_INT 1
17196: ST_TO_ADDR
// if p3 = 11 then
17197: LD_VAR 0 3
17201: PUSH
17202: LD_INT 11
17204: EQUAL
17205: IFFALSE 17215
// sRefresh := true ;
17207: LD_ADDR_EXP 65
17211: PUSH
17212: LD_INT 1
17214: ST_TO_ADDR
// if p3 = 12 then
17215: LD_VAR 0 3
17219: PUSH
17220: LD_INT 12
17222: EQUAL
17223: IFFALSE 17233
// sExp := true ;
17225: LD_ADDR_EXP 66
17229: PUSH
17230: LD_INT 1
17232: ST_TO_ADDR
// if p3 = 13 then
17233: LD_VAR 0 3
17237: PUSH
17238: LD_INT 13
17240: EQUAL
17241: IFFALSE 17251
// sDepot := true ;
17243: LD_ADDR_EXP 67
17247: PUSH
17248: LD_INT 1
17250: ST_TO_ADDR
// if p3 = 14 then
17251: LD_VAR 0 3
17255: PUSH
17256: LD_INT 14
17258: EQUAL
17259: IFFALSE 17269
// sFlag := true ;
17261: LD_ADDR_EXP 68
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// if p3 = 15 then
17269: LD_VAR 0 3
17273: PUSH
17274: LD_INT 15
17276: EQUAL
17277: IFFALSE 17287
// sKamikadze := true ;
17279: LD_ADDR_EXP 76
17283: PUSH
17284: LD_INT 1
17286: ST_TO_ADDR
// if p3 = 16 then
17287: LD_VAR 0 3
17291: PUSH
17292: LD_INT 16
17294: EQUAL
17295: IFFALSE 17305
// sTroll := true ;
17297: LD_ADDR_EXP 77
17301: PUSH
17302: LD_INT 1
17304: ST_TO_ADDR
// if p3 = 17 then
17305: LD_VAR 0 3
17309: PUSH
17310: LD_INT 17
17312: EQUAL
17313: IFFALSE 17323
// sSlow := true ;
17315: LD_ADDR_EXP 78
17319: PUSH
17320: LD_INT 1
17322: ST_TO_ADDR
// if p3 = 18 then
17323: LD_VAR 0 3
17327: PUSH
17328: LD_INT 18
17330: EQUAL
17331: IFFALSE 17341
// sLack := true ;
17333: LD_ADDR_EXP 79
17337: PUSH
17338: LD_INT 1
17340: ST_TO_ADDR
// if p3 = 19 then
17341: LD_VAR 0 3
17345: PUSH
17346: LD_INT 19
17348: EQUAL
17349: IFFALSE 17359
// sTank := true ;
17351: LD_ADDR_EXP 81
17355: PUSH
17356: LD_INT 1
17358: ST_TO_ADDR
// if p3 = 20 then
17359: LD_VAR 0 3
17363: PUSH
17364: LD_INT 20
17366: EQUAL
17367: IFFALSE 17377
// sRemote := true ;
17369: LD_ADDR_EXP 82
17373: PUSH
17374: LD_INT 1
17376: ST_TO_ADDR
// if p3 = 21 then
17377: LD_VAR 0 3
17381: PUSH
17382: LD_INT 21
17384: EQUAL
17385: IFFALSE 17395
// sPowell := true ;
17387: LD_ADDR_EXP 83
17391: PUSH
17392: LD_INT 1
17394: ST_TO_ADDR
// if p3 = 22 then
17395: LD_VAR 0 3
17399: PUSH
17400: LD_INT 22
17402: EQUAL
17403: IFFALSE 17413
// sTeleport := true ;
17405: LD_ADDR_EXP 86
17409: PUSH
17410: LD_INT 1
17412: ST_TO_ADDR
// if p3 = 23 then
17413: LD_VAR 0 3
17417: PUSH
17418: LD_INT 23
17420: EQUAL
17421: IFFALSE 17431
// sOilTower := true ;
17423: LD_ADDR_EXP 88
17427: PUSH
17428: LD_INT 1
17430: ST_TO_ADDR
// if p3 = 24 then
17431: LD_VAR 0 3
17435: PUSH
17436: LD_INT 24
17438: EQUAL
17439: IFFALSE 17449
// sShovel := true ;
17441: LD_ADDR_EXP 89
17445: PUSH
17446: LD_INT 1
17448: ST_TO_ADDR
// if p3 = 25 then
17449: LD_VAR 0 3
17453: PUSH
17454: LD_INT 25
17456: EQUAL
17457: IFFALSE 17467
// sSheik := true ;
17459: LD_ADDR_EXP 90
17463: PUSH
17464: LD_INT 1
17466: ST_TO_ADDR
// if p3 = 26 then
17467: LD_VAR 0 3
17471: PUSH
17472: LD_INT 26
17474: EQUAL
17475: IFFALSE 17485
// sEarthquake := true ;
17477: LD_ADDR_EXP 92
17481: PUSH
17482: LD_INT 1
17484: ST_TO_ADDR
// if p3 = 27 then
17485: LD_VAR 0 3
17489: PUSH
17490: LD_INT 27
17492: EQUAL
17493: IFFALSE 17503
// sAI := true ;
17495: LD_ADDR_EXP 93
17499: PUSH
17500: LD_INT 1
17502: ST_TO_ADDR
// if p3 = 28 then
17503: LD_VAR 0 3
17507: PUSH
17508: LD_INT 28
17510: EQUAL
17511: IFFALSE 17521
// sCargo := true ;
17513: LD_ADDR_EXP 96
17517: PUSH
17518: LD_INT 1
17520: ST_TO_ADDR
// if p3 = 29 then
17521: LD_VAR 0 3
17525: PUSH
17526: LD_INT 29
17528: EQUAL
17529: IFFALSE 17539
// sDLaser := true ;
17531: LD_ADDR_EXP 97
17535: PUSH
17536: LD_INT 1
17538: ST_TO_ADDR
// if p3 = 30 then
17539: LD_VAR 0 3
17543: PUSH
17544: LD_INT 30
17546: EQUAL
17547: IFFALSE 17557
// sExchange := true ;
17549: LD_ADDR_EXP 98
17553: PUSH
17554: LD_INT 1
17556: ST_TO_ADDR
// if p3 = 31 then
17557: LD_VAR 0 3
17561: PUSH
17562: LD_INT 31
17564: EQUAL
17565: IFFALSE 17575
// sFac := true ;
17567: LD_ADDR_EXP 99
17571: PUSH
17572: LD_INT 1
17574: ST_TO_ADDR
// if p3 = 32 then
17575: LD_VAR 0 3
17579: PUSH
17580: LD_INT 32
17582: EQUAL
17583: IFFALSE 17593
// sPower := true ;
17585: LD_ADDR_EXP 100
17589: PUSH
17590: LD_INT 1
17592: ST_TO_ADDR
// if p3 = 33 then
17593: LD_VAR 0 3
17597: PUSH
17598: LD_INT 33
17600: EQUAL
17601: IFFALSE 17611
// sRandom := true ;
17603: LD_ADDR_EXP 101
17607: PUSH
17608: LD_INT 1
17610: ST_TO_ADDR
// if p3 = 34 then
17611: LD_VAR 0 3
17615: PUSH
17616: LD_INT 34
17618: EQUAL
17619: IFFALSE 17629
// sShield := true ;
17621: LD_ADDR_EXP 102
17625: PUSH
17626: LD_INT 1
17628: ST_TO_ADDR
// if p3 = 35 then
17629: LD_VAR 0 3
17633: PUSH
17634: LD_INT 35
17636: EQUAL
17637: IFFALSE 17647
// sTime := true ;
17639: LD_ADDR_EXP 103
17643: PUSH
17644: LD_INT 1
17646: ST_TO_ADDR
// if p3 = 36 then
17647: LD_VAR 0 3
17651: PUSH
17652: LD_INT 36
17654: EQUAL
17655: IFFALSE 17665
// sTools := true ;
17657: LD_ADDR_EXP 104
17661: PUSH
17662: LD_INT 1
17664: ST_TO_ADDR
// if p3 = 101 then
17665: LD_VAR 0 3
17669: PUSH
17670: LD_INT 101
17672: EQUAL
17673: IFFALSE 17683
// sSold := true ;
17675: LD_ADDR_EXP 69
17679: PUSH
17680: LD_INT 1
17682: ST_TO_ADDR
// if p3 = 102 then
17683: LD_VAR 0 3
17687: PUSH
17688: LD_INT 102
17690: EQUAL
17691: IFFALSE 17701
// sDiff := true ;
17693: LD_ADDR_EXP 70
17697: PUSH
17698: LD_INT 1
17700: ST_TO_ADDR
// if p3 = 103 then
17701: LD_VAR 0 3
17705: PUSH
17706: LD_INT 103
17708: EQUAL
17709: IFFALSE 17719
// sFog := true ;
17711: LD_ADDR_EXP 73
17715: PUSH
17716: LD_INT 1
17718: ST_TO_ADDR
// if p3 = 104 then
17719: LD_VAR 0 3
17723: PUSH
17724: LD_INT 104
17726: EQUAL
17727: IFFALSE 17737
// sReset := true ;
17729: LD_ADDR_EXP 74
17733: PUSH
17734: LD_INT 1
17736: ST_TO_ADDR
// if p3 = 105 then
17737: LD_VAR 0 3
17741: PUSH
17742: LD_INT 105
17744: EQUAL
17745: IFFALSE 17755
// sSun := true ;
17747: LD_ADDR_EXP 75
17751: PUSH
17752: LD_INT 1
17754: ST_TO_ADDR
// if p3 = 106 then
17755: LD_VAR 0 3
17759: PUSH
17760: LD_INT 106
17762: EQUAL
17763: IFFALSE 17773
// sTiger := true ;
17765: LD_ADDR_EXP 71
17769: PUSH
17770: LD_INT 1
17772: ST_TO_ADDR
// if p3 = 107 then
17773: LD_VAR 0 3
17777: PUSH
17778: LD_INT 107
17780: EQUAL
17781: IFFALSE 17791
// sBomb := true ;
17783: LD_ADDR_EXP 72
17787: PUSH
17788: LD_INT 1
17790: ST_TO_ADDR
// if p3 = 108 then
17791: LD_VAR 0 3
17795: PUSH
17796: LD_INT 108
17798: EQUAL
17799: IFFALSE 17809
// sWound := true ;
17801: LD_ADDR_EXP 80
17805: PUSH
17806: LD_INT 1
17808: ST_TO_ADDR
// if p3 = 109 then
17809: LD_VAR 0 3
17813: PUSH
17814: LD_INT 109
17816: EQUAL
17817: IFFALSE 17827
// sBetray := true ;
17819: LD_ADDR_EXP 84
17823: PUSH
17824: LD_INT 1
17826: ST_TO_ADDR
// if p3 = 110 then
17827: LD_VAR 0 3
17831: PUSH
17832: LD_INT 110
17834: EQUAL
17835: IFFALSE 17845
// sContamin := true ;
17837: LD_ADDR_EXP 85
17841: PUSH
17842: LD_INT 1
17844: ST_TO_ADDR
// if p3 = 111 then
17845: LD_VAR 0 3
17849: PUSH
17850: LD_INT 111
17852: EQUAL
17853: IFFALSE 17863
// sOil := true ;
17855: LD_ADDR_EXP 87
17859: PUSH
17860: LD_INT 1
17862: ST_TO_ADDR
// if p3 = 112 then
17863: LD_VAR 0 3
17867: PUSH
17868: LD_INT 112
17870: EQUAL
17871: IFFALSE 17881
// sStu := true ;
17873: LD_ADDR_EXP 91
17877: PUSH
17878: LD_INT 1
17880: ST_TO_ADDR
// if p3 = 113 then
17881: LD_VAR 0 3
17885: PUSH
17886: LD_INT 113
17888: EQUAL
17889: IFFALSE 17899
// sBazooka := true ;
17891: LD_ADDR_EXP 94
17895: PUSH
17896: LD_INT 1
17898: ST_TO_ADDR
// if p3 = 114 then
17899: LD_VAR 0 3
17903: PUSH
17904: LD_INT 114
17906: EQUAL
17907: IFFALSE 17917
// sMortar := true ;
17909: LD_ADDR_EXP 95
17913: PUSH
17914: LD_INT 1
17916: ST_TO_ADDR
// if p3 = 115 then
17917: LD_VAR 0 3
17921: PUSH
17922: LD_INT 115
17924: EQUAL
17925: IFFALSE 17935
// sRanger := true ;
17927: LD_ADDR_EXP 105
17931: PUSH
17932: LD_INT 1
17934: ST_TO_ADDR
// if p3 = 116 then
17935: LD_VAR 0 3
17939: PUSH
17940: LD_INT 116
17942: EQUAL
17943: IFFALSE 17953
// sComputer := true ;
17945: LD_ADDR_EXP 106
17949: PUSH
17950: LD_INT 1
17952: ST_TO_ADDR
// if p3 = 117 then
17953: LD_VAR 0 3
17957: PUSH
17958: LD_INT 117
17960: EQUAL
17961: IFFALSE 17971
// s30 := true ;
17963: LD_ADDR_EXP 107
17967: PUSH
17968: LD_INT 1
17970: ST_TO_ADDR
// if p3 = 118 then
17971: LD_VAR 0 3
17975: PUSH
17976: LD_INT 118
17978: EQUAL
17979: IFFALSE 17989
// s60 := true ;
17981: LD_ADDR_EXP 108
17985: PUSH
17986: LD_INT 1
17988: ST_TO_ADDR
// end ; if p2 = 101 then
17989: LD_VAR 0 2
17993: PUSH
17994: LD_INT 101
17996: EQUAL
17997: IFFALSE 18125
// begin case p3 of 1 :
17999: LD_VAR 0 3
18003: PUSH
18004: LD_INT 1
18006: DOUBLE
18007: EQUAL
18008: IFTRUE 18012
18010: GO 18019
18012: POP
// hHackUnlimitedResources ; 2 :
18013: CALL 29721 0 0
18017: GO 18125
18019: LD_INT 2
18021: DOUBLE
18022: EQUAL
18023: IFTRUE 18027
18025: GO 18034
18027: POP
// hHackSetLevel10 ; 3 :
18028: CALL 29854 0 0
18032: GO 18125
18034: LD_INT 3
18036: DOUBLE
18037: EQUAL
18038: IFTRUE 18042
18040: GO 18049
18042: POP
// hHackSetLevel10YourUnits ; 4 :
18043: CALL 29939 0 0
18047: GO 18125
18049: LD_INT 4
18051: DOUBLE
18052: EQUAL
18053: IFTRUE 18057
18055: GO 18064
18057: POP
// hHackInvincible ; 5 :
18058: CALL 30387 0 0
18062: GO 18125
18064: LD_INT 5
18066: DOUBLE
18067: EQUAL
18068: IFTRUE 18072
18070: GO 18079
18072: POP
// hHackInvisible ; 6 :
18073: CALL 30498 0 0
18077: GO 18125
18079: LD_INT 6
18081: DOUBLE
18082: EQUAL
18083: IFTRUE 18087
18085: GO 18094
18087: POP
// hHackChangeYourSide ; 7 :
18088: CALL 30555 0 0
18092: GO 18125
18094: LD_INT 7
18096: DOUBLE
18097: EQUAL
18098: IFTRUE 18102
18100: GO 18109
18102: POP
// hHackChangeUnitSide ; 8 :
18103: CALL 30597 0 0
18107: GO 18125
18109: LD_INT 8
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18124
18117: POP
// hHackFog ; end ;
18118: CALL 30698 0 0
18122: GO 18125
18124: POP
// end ; end ;
18125: LD_VAR 0 7
18129: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18130: GO 18132
18132: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18133: LD_STRING initStreamRollete();
18135: PPUSH
18136: CALL_OW 559
// InitStreamMode ;
18140: CALL 18149 0 0
// DefineStreamItems ( ) ;
18144: CALL 18613 0 0
// end ;
18148: END
// function InitStreamMode ; begin
18149: LD_INT 0
18151: PPUSH
// streamModeActive := false ;
18152: LD_ADDR_EXP 52
18156: PUSH
18157: LD_INT 0
18159: ST_TO_ADDR
// normalCounter := 36 ;
18160: LD_ADDR_EXP 53
18164: PUSH
18165: LD_INT 36
18167: ST_TO_ADDR
// hardcoreCounter := 16 ;
18168: LD_ADDR_EXP 54
18172: PUSH
18173: LD_INT 16
18175: ST_TO_ADDR
// sRocket := false ;
18176: LD_ADDR_EXP 57
18180: PUSH
18181: LD_INT 0
18183: ST_TO_ADDR
// sSpeed := false ;
18184: LD_ADDR_EXP 56
18188: PUSH
18189: LD_INT 0
18191: ST_TO_ADDR
// sEngine := false ;
18192: LD_ADDR_EXP 58
18196: PUSH
18197: LD_INT 0
18199: ST_TO_ADDR
// sSpec := false ;
18200: LD_ADDR_EXP 55
18204: PUSH
18205: LD_INT 0
18207: ST_TO_ADDR
// sLevel := false ;
18208: LD_ADDR_EXP 59
18212: PUSH
18213: LD_INT 0
18215: ST_TO_ADDR
// sArmoury := false ;
18216: LD_ADDR_EXP 60
18220: PUSH
18221: LD_INT 0
18223: ST_TO_ADDR
// sRadar := false ;
18224: LD_ADDR_EXP 61
18228: PUSH
18229: LD_INT 0
18231: ST_TO_ADDR
// sBunker := false ;
18232: LD_ADDR_EXP 62
18236: PUSH
18237: LD_INT 0
18239: ST_TO_ADDR
// sHack := false ;
18240: LD_ADDR_EXP 63
18244: PUSH
18245: LD_INT 0
18247: ST_TO_ADDR
// sFire := false ;
18248: LD_ADDR_EXP 64
18252: PUSH
18253: LD_INT 0
18255: ST_TO_ADDR
// sRefresh := false ;
18256: LD_ADDR_EXP 65
18260: PUSH
18261: LD_INT 0
18263: ST_TO_ADDR
// sExp := false ;
18264: LD_ADDR_EXP 66
18268: PUSH
18269: LD_INT 0
18271: ST_TO_ADDR
// sDepot := false ;
18272: LD_ADDR_EXP 67
18276: PUSH
18277: LD_INT 0
18279: ST_TO_ADDR
// sFlag := false ;
18280: LD_ADDR_EXP 68
18284: PUSH
18285: LD_INT 0
18287: ST_TO_ADDR
// sKamikadze := false ;
18288: LD_ADDR_EXP 76
18292: PUSH
18293: LD_INT 0
18295: ST_TO_ADDR
// sTroll := false ;
18296: LD_ADDR_EXP 77
18300: PUSH
18301: LD_INT 0
18303: ST_TO_ADDR
// sSlow := false ;
18304: LD_ADDR_EXP 78
18308: PUSH
18309: LD_INT 0
18311: ST_TO_ADDR
// sLack := false ;
18312: LD_ADDR_EXP 79
18316: PUSH
18317: LD_INT 0
18319: ST_TO_ADDR
// sTank := false ;
18320: LD_ADDR_EXP 81
18324: PUSH
18325: LD_INT 0
18327: ST_TO_ADDR
// sRemote := false ;
18328: LD_ADDR_EXP 82
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// sPowell := false ;
18336: LD_ADDR_EXP 83
18340: PUSH
18341: LD_INT 0
18343: ST_TO_ADDR
// sTeleport := false ;
18344: LD_ADDR_EXP 86
18348: PUSH
18349: LD_INT 0
18351: ST_TO_ADDR
// sOilTower := false ;
18352: LD_ADDR_EXP 88
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// sShovel := false ;
18360: LD_ADDR_EXP 89
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// sSheik := false ;
18368: LD_ADDR_EXP 90
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// sEarthquake := false ;
18376: LD_ADDR_EXP 92
18380: PUSH
18381: LD_INT 0
18383: ST_TO_ADDR
// sAI := false ;
18384: LD_ADDR_EXP 93
18388: PUSH
18389: LD_INT 0
18391: ST_TO_ADDR
// sCargo := false ;
18392: LD_ADDR_EXP 96
18396: PUSH
18397: LD_INT 0
18399: ST_TO_ADDR
// sDLaser := false ;
18400: LD_ADDR_EXP 97
18404: PUSH
18405: LD_INT 0
18407: ST_TO_ADDR
// sExchange := false ;
18408: LD_ADDR_EXP 98
18412: PUSH
18413: LD_INT 0
18415: ST_TO_ADDR
// sFac := false ;
18416: LD_ADDR_EXP 99
18420: PUSH
18421: LD_INT 0
18423: ST_TO_ADDR
// sPower := false ;
18424: LD_ADDR_EXP 100
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// sRandom := false ;
18432: LD_ADDR_EXP 101
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// sShield := false ;
18440: LD_ADDR_EXP 102
18444: PUSH
18445: LD_INT 0
18447: ST_TO_ADDR
// sTime := false ;
18448: LD_ADDR_EXP 103
18452: PUSH
18453: LD_INT 0
18455: ST_TO_ADDR
// sTools := false ;
18456: LD_ADDR_EXP 104
18460: PUSH
18461: LD_INT 0
18463: ST_TO_ADDR
// sSold := false ;
18464: LD_ADDR_EXP 69
18468: PUSH
18469: LD_INT 0
18471: ST_TO_ADDR
// sDiff := false ;
18472: LD_ADDR_EXP 70
18476: PUSH
18477: LD_INT 0
18479: ST_TO_ADDR
// sFog := false ;
18480: LD_ADDR_EXP 73
18484: PUSH
18485: LD_INT 0
18487: ST_TO_ADDR
// sReset := false ;
18488: LD_ADDR_EXP 74
18492: PUSH
18493: LD_INT 0
18495: ST_TO_ADDR
// sSun := false ;
18496: LD_ADDR_EXP 75
18500: PUSH
18501: LD_INT 0
18503: ST_TO_ADDR
// sTiger := false ;
18504: LD_ADDR_EXP 71
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// sBomb := false ;
18512: LD_ADDR_EXP 72
18516: PUSH
18517: LD_INT 0
18519: ST_TO_ADDR
// sWound := false ;
18520: LD_ADDR_EXP 80
18524: PUSH
18525: LD_INT 0
18527: ST_TO_ADDR
// sBetray := false ;
18528: LD_ADDR_EXP 84
18532: PUSH
18533: LD_INT 0
18535: ST_TO_ADDR
// sContamin := false ;
18536: LD_ADDR_EXP 85
18540: PUSH
18541: LD_INT 0
18543: ST_TO_ADDR
// sOil := false ;
18544: LD_ADDR_EXP 87
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// sStu := false ;
18552: LD_ADDR_EXP 91
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// sBazooka := false ;
18560: LD_ADDR_EXP 94
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// sMortar := false ;
18568: LD_ADDR_EXP 95
18572: PUSH
18573: LD_INT 0
18575: ST_TO_ADDR
// sRanger := false ;
18576: LD_ADDR_EXP 105
18580: PUSH
18581: LD_INT 0
18583: ST_TO_ADDR
// sComputer := false ;
18584: LD_ADDR_EXP 106
18588: PUSH
18589: LD_INT 0
18591: ST_TO_ADDR
// s30 := false ;
18592: LD_ADDR_EXP 107
18596: PUSH
18597: LD_INT 0
18599: ST_TO_ADDR
// s60 := false ;
18600: LD_ADDR_EXP 108
18604: PUSH
18605: LD_INT 0
18607: ST_TO_ADDR
// end ;
18608: LD_VAR 0 1
18612: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
18613: LD_INT 0
18615: PPUSH
18616: PPUSH
18617: PPUSH
18618: PPUSH
18619: PPUSH
// result := [ ] ;
18620: LD_ADDR_VAR 0 1
18624: PUSH
18625: EMPTY
18626: ST_TO_ADDR
// if campaign_id = 1 then
18627: LD_OWVAR 69
18631: PUSH
18632: LD_INT 1
18634: EQUAL
18635: IFFALSE 21801
// begin case mission_number of 1 :
18637: LD_OWVAR 70
18641: PUSH
18642: LD_INT 1
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18726
18650: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18651: LD_ADDR_VAR 0 1
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: LD_INT 4
18661: PUSH
18662: LD_INT 11
18664: PUSH
18665: LD_INT 12
18667: PUSH
18668: LD_INT 15
18670: PUSH
18671: LD_INT 16
18673: PUSH
18674: LD_INT 22
18676: PUSH
18677: LD_INT 23
18679: PUSH
18680: LD_INT 26
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 101
18696: PUSH
18697: LD_INT 102
18699: PUSH
18700: LD_INT 106
18702: PUSH
18703: LD_INT 116
18705: PUSH
18706: LD_INT 117
18708: PUSH
18709: LD_INT 118
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: ST_TO_ADDR
18724: GO 21799
18726: LD_INT 2
18728: DOUBLE
18729: EQUAL
18730: IFTRUE 18734
18732: GO 18818
18734: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18735: LD_ADDR_VAR 0 1
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 4
18745: PUSH
18746: LD_INT 11
18748: PUSH
18749: LD_INT 12
18751: PUSH
18752: LD_INT 15
18754: PUSH
18755: LD_INT 16
18757: PUSH
18758: LD_INT 22
18760: PUSH
18761: LD_INT 23
18763: PUSH
18764: LD_INT 26
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 101
18780: PUSH
18781: LD_INT 102
18783: PUSH
18784: LD_INT 105
18786: PUSH
18787: LD_INT 106
18789: PUSH
18790: LD_INT 108
18792: PUSH
18793: LD_INT 116
18795: PUSH
18796: LD_INT 117
18798: PUSH
18799: LD_INT 118
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: ST_TO_ADDR
18816: GO 21799
18818: LD_INT 3
18820: DOUBLE
18821: EQUAL
18822: IFTRUE 18826
18824: GO 18914
18826: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
18827: LD_ADDR_VAR 0 1
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: LD_INT 4
18837: PUSH
18838: LD_INT 5
18840: PUSH
18841: LD_INT 11
18843: PUSH
18844: LD_INT 12
18846: PUSH
18847: LD_INT 15
18849: PUSH
18850: LD_INT 16
18852: PUSH
18853: LD_INT 22
18855: PUSH
18856: LD_INT 26
18858: PUSH
18859: LD_INT 36
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 101
18876: PUSH
18877: LD_INT 102
18879: PUSH
18880: LD_INT 105
18882: PUSH
18883: LD_INT 106
18885: PUSH
18886: LD_INT 108
18888: PUSH
18889: LD_INT 116
18891: PUSH
18892: LD_INT 117
18894: PUSH
18895: LD_INT 118
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: ST_TO_ADDR
18912: GO 21799
18914: LD_INT 4
18916: DOUBLE
18917: EQUAL
18918: IFTRUE 18922
18920: GO 19018
18922: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
18923: LD_ADDR_VAR 0 1
18927: PUSH
18928: LD_INT 2
18930: PUSH
18931: LD_INT 4
18933: PUSH
18934: LD_INT 5
18936: PUSH
18937: LD_INT 8
18939: PUSH
18940: LD_INT 11
18942: PUSH
18943: LD_INT 12
18945: PUSH
18946: LD_INT 15
18948: PUSH
18949: LD_INT 16
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_INT 23
18957: PUSH
18958: LD_INT 26
18960: PUSH
18961: LD_INT 36
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 101
18980: PUSH
18981: LD_INT 102
18983: PUSH
18984: LD_INT 105
18986: PUSH
18987: LD_INT 106
18989: PUSH
18990: LD_INT 108
18992: PUSH
18993: LD_INT 116
18995: PUSH
18996: LD_INT 117
18998: PUSH
18999: LD_INT 118
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: ST_TO_ADDR
19016: GO 21799
19018: LD_INT 5
19020: DOUBLE
19021: EQUAL
19022: IFTRUE 19026
19024: GO 19138
19026: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19027: LD_ADDR_VAR 0 1
19031: PUSH
19032: LD_INT 2
19034: PUSH
19035: LD_INT 4
19037: PUSH
19038: LD_INT 5
19040: PUSH
19041: LD_INT 6
19043: PUSH
19044: LD_INT 8
19046: PUSH
19047: LD_INT 11
19049: PUSH
19050: LD_INT 12
19052: PUSH
19053: LD_INT 15
19055: PUSH
19056: LD_INT 16
19058: PUSH
19059: LD_INT 22
19061: PUSH
19062: LD_INT 23
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 26
19070: PUSH
19071: LD_INT 36
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 101
19092: PUSH
19093: LD_INT 102
19095: PUSH
19096: LD_INT 105
19098: PUSH
19099: LD_INT 106
19101: PUSH
19102: LD_INT 108
19104: PUSH
19105: LD_INT 109
19107: PUSH
19108: LD_INT 112
19110: PUSH
19111: LD_INT 116
19113: PUSH
19114: LD_INT 117
19116: PUSH
19117: LD_INT 118
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: ST_TO_ADDR
19136: GO 21799
19138: LD_INT 6
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19278
19146: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19147: LD_ADDR_VAR 0 1
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: LD_INT 4
19157: PUSH
19158: LD_INT 5
19160: PUSH
19161: LD_INT 6
19163: PUSH
19164: LD_INT 8
19166: PUSH
19167: LD_INT 11
19169: PUSH
19170: LD_INT 12
19172: PUSH
19173: LD_INT 15
19175: PUSH
19176: LD_INT 16
19178: PUSH
19179: LD_INT 20
19181: PUSH
19182: LD_INT 21
19184: PUSH
19185: LD_INT 22
19187: PUSH
19188: LD_INT 23
19190: PUSH
19191: LD_INT 25
19193: PUSH
19194: LD_INT 26
19196: PUSH
19197: LD_INT 30
19199: PUSH
19200: LD_INT 31
19202: PUSH
19203: LD_INT 32
19205: PUSH
19206: LD_INT 36
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 101
19232: PUSH
19233: LD_INT 102
19235: PUSH
19236: LD_INT 105
19238: PUSH
19239: LD_INT 106
19241: PUSH
19242: LD_INT 108
19244: PUSH
19245: LD_INT 109
19247: PUSH
19248: LD_INT 112
19250: PUSH
19251: LD_INT 116
19253: PUSH
19254: LD_INT 117
19256: PUSH
19257: LD_INT 118
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: ST_TO_ADDR
19276: GO 21799
19278: LD_INT 7
19280: DOUBLE
19281: EQUAL
19282: IFTRUE 19286
19284: GO 19398
19286: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19287: LD_ADDR_VAR 0 1
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: LD_INT 4
19297: PUSH
19298: LD_INT 5
19300: PUSH
19301: LD_INT 7
19303: PUSH
19304: LD_INT 11
19306: PUSH
19307: LD_INT 12
19309: PUSH
19310: LD_INT 15
19312: PUSH
19313: LD_INT 16
19315: PUSH
19316: LD_INT 20
19318: PUSH
19319: LD_INT 21
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_INT 23
19327: PUSH
19328: LD_INT 25
19330: PUSH
19331: LD_INT 26
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 101
19352: PUSH
19353: LD_INT 102
19355: PUSH
19356: LD_INT 103
19358: PUSH
19359: LD_INT 105
19361: PUSH
19362: LD_INT 106
19364: PUSH
19365: LD_INT 108
19367: PUSH
19368: LD_INT 112
19370: PUSH
19371: LD_INT 116
19373: PUSH
19374: LD_INT 117
19376: PUSH
19377: LD_INT 118
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: ST_TO_ADDR
19396: GO 21799
19398: LD_INT 8
19400: DOUBLE
19401: EQUAL
19402: IFTRUE 19406
19404: GO 19546
19406: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19407: LD_ADDR_VAR 0 1
19411: PUSH
19412: LD_INT 2
19414: PUSH
19415: LD_INT 4
19417: PUSH
19418: LD_INT 5
19420: PUSH
19421: LD_INT 6
19423: PUSH
19424: LD_INT 7
19426: PUSH
19427: LD_INT 8
19429: PUSH
19430: LD_INT 11
19432: PUSH
19433: LD_INT 12
19435: PUSH
19436: LD_INT 15
19438: PUSH
19439: LD_INT 16
19441: PUSH
19442: LD_INT 20
19444: PUSH
19445: LD_INT 21
19447: PUSH
19448: LD_INT 22
19450: PUSH
19451: LD_INT 23
19453: PUSH
19454: LD_INT 25
19456: PUSH
19457: LD_INT 26
19459: PUSH
19460: LD_INT 30
19462: PUSH
19463: LD_INT 31
19465: PUSH
19466: LD_INT 32
19468: PUSH
19469: LD_INT 36
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 101
19496: PUSH
19497: LD_INT 102
19499: PUSH
19500: LD_INT 103
19502: PUSH
19503: LD_INT 105
19505: PUSH
19506: LD_INT 106
19508: PUSH
19509: LD_INT 108
19511: PUSH
19512: LD_INT 109
19514: PUSH
19515: LD_INT 112
19517: PUSH
19518: LD_INT 116
19520: PUSH
19521: LD_INT 117
19523: PUSH
19524: LD_INT 118
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: ST_TO_ADDR
19544: GO 21799
19546: LD_INT 9
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19702
19554: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19555: LD_ADDR_VAR 0 1
19559: PUSH
19560: LD_INT 2
19562: PUSH
19563: LD_INT 4
19565: PUSH
19566: LD_INT 5
19568: PUSH
19569: LD_INT 6
19571: PUSH
19572: LD_INT 7
19574: PUSH
19575: LD_INT 8
19577: PUSH
19578: LD_INT 11
19580: PUSH
19581: LD_INT 12
19583: PUSH
19584: LD_INT 15
19586: PUSH
19587: LD_INT 16
19589: PUSH
19590: LD_INT 20
19592: PUSH
19593: LD_INT 21
19595: PUSH
19596: LD_INT 22
19598: PUSH
19599: LD_INT 23
19601: PUSH
19602: LD_INT 25
19604: PUSH
19605: LD_INT 26
19607: PUSH
19608: LD_INT 28
19610: PUSH
19611: LD_INT 30
19613: PUSH
19614: LD_INT 31
19616: PUSH
19617: LD_INT 32
19619: PUSH
19620: LD_INT 36
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 101
19648: PUSH
19649: LD_INT 102
19651: PUSH
19652: LD_INT 103
19654: PUSH
19655: LD_INT 105
19657: PUSH
19658: LD_INT 106
19660: PUSH
19661: LD_INT 108
19663: PUSH
19664: LD_INT 109
19666: PUSH
19667: LD_INT 112
19669: PUSH
19670: LD_INT 114
19672: PUSH
19673: LD_INT 116
19675: PUSH
19676: LD_INT 117
19678: PUSH
19679: LD_INT 118
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: ST_TO_ADDR
19700: GO 21799
19702: LD_INT 10
19704: DOUBLE
19705: EQUAL
19706: IFTRUE 19710
19708: GO 19906
19710: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19711: LD_ADDR_VAR 0 1
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: LD_INT 4
19721: PUSH
19722: LD_INT 5
19724: PUSH
19725: LD_INT 6
19727: PUSH
19728: LD_INT 7
19730: PUSH
19731: LD_INT 8
19733: PUSH
19734: LD_INT 9
19736: PUSH
19737: LD_INT 10
19739: PUSH
19740: LD_INT 11
19742: PUSH
19743: LD_INT 12
19745: PUSH
19746: LD_INT 13
19748: PUSH
19749: LD_INT 14
19751: PUSH
19752: LD_INT 15
19754: PUSH
19755: LD_INT 16
19757: PUSH
19758: LD_INT 17
19760: PUSH
19761: LD_INT 18
19763: PUSH
19764: LD_INT 19
19766: PUSH
19767: LD_INT 20
19769: PUSH
19770: LD_INT 21
19772: PUSH
19773: LD_INT 22
19775: PUSH
19776: LD_INT 23
19778: PUSH
19779: LD_INT 24
19781: PUSH
19782: LD_INT 25
19784: PUSH
19785: LD_INT 26
19787: PUSH
19788: LD_INT 28
19790: PUSH
19791: LD_INT 30
19793: PUSH
19794: LD_INT 31
19796: PUSH
19797: LD_INT 32
19799: PUSH
19800: LD_INT 36
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 101
19836: PUSH
19837: LD_INT 102
19839: PUSH
19840: LD_INT 103
19842: PUSH
19843: LD_INT 104
19845: PUSH
19846: LD_INT 105
19848: PUSH
19849: LD_INT 106
19851: PUSH
19852: LD_INT 107
19854: PUSH
19855: LD_INT 108
19857: PUSH
19858: LD_INT 109
19860: PUSH
19861: LD_INT 110
19863: PUSH
19864: LD_INT 111
19866: PUSH
19867: LD_INT 112
19869: PUSH
19870: LD_INT 114
19872: PUSH
19873: LD_INT 116
19875: PUSH
19876: LD_INT 117
19878: PUSH
19879: LD_INT 118
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: ST_TO_ADDR
19904: GO 21799
19906: LD_INT 11
19908: DOUBLE
19909: EQUAL
19910: IFTRUE 19914
19912: GO 20118
19914: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
19915: LD_ADDR_VAR 0 1
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: LD_INT 3
19925: PUSH
19926: LD_INT 4
19928: PUSH
19929: LD_INT 5
19931: PUSH
19932: LD_INT 6
19934: PUSH
19935: LD_INT 7
19937: PUSH
19938: LD_INT 8
19940: PUSH
19941: LD_INT 9
19943: PUSH
19944: LD_INT 10
19946: PUSH
19947: LD_INT 11
19949: PUSH
19950: LD_INT 12
19952: PUSH
19953: LD_INT 13
19955: PUSH
19956: LD_INT 14
19958: PUSH
19959: LD_INT 15
19961: PUSH
19962: LD_INT 16
19964: PUSH
19965: LD_INT 17
19967: PUSH
19968: LD_INT 18
19970: PUSH
19971: LD_INT 19
19973: PUSH
19974: LD_INT 20
19976: PUSH
19977: LD_INT 21
19979: PUSH
19980: LD_INT 22
19982: PUSH
19983: LD_INT 23
19985: PUSH
19986: LD_INT 24
19988: PUSH
19989: LD_INT 25
19991: PUSH
19992: LD_INT 26
19994: PUSH
19995: LD_INT 28
19997: PUSH
19998: LD_INT 30
20000: PUSH
20001: LD_INT 31
20003: PUSH
20004: LD_INT 32
20006: PUSH
20007: LD_INT 34
20009: PUSH
20010: LD_INT 36
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 101
20048: PUSH
20049: LD_INT 102
20051: PUSH
20052: LD_INT 103
20054: PUSH
20055: LD_INT 104
20057: PUSH
20058: LD_INT 105
20060: PUSH
20061: LD_INT 106
20063: PUSH
20064: LD_INT 107
20066: PUSH
20067: LD_INT 108
20069: PUSH
20070: LD_INT 109
20072: PUSH
20073: LD_INT 110
20075: PUSH
20076: LD_INT 111
20078: PUSH
20079: LD_INT 112
20081: PUSH
20082: LD_INT 114
20084: PUSH
20085: LD_INT 116
20087: PUSH
20088: LD_INT 117
20090: PUSH
20091: LD_INT 118
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: ST_TO_ADDR
20116: GO 21799
20118: LD_INT 12
20120: DOUBLE
20121: EQUAL
20122: IFTRUE 20126
20124: GO 20346
20126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20127: LD_ADDR_VAR 0 1
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: LD_INT 2
20137: PUSH
20138: LD_INT 3
20140: PUSH
20141: LD_INT 4
20143: PUSH
20144: LD_INT 5
20146: PUSH
20147: LD_INT 6
20149: PUSH
20150: LD_INT 7
20152: PUSH
20153: LD_INT 8
20155: PUSH
20156: LD_INT 9
20158: PUSH
20159: LD_INT 10
20161: PUSH
20162: LD_INT 11
20164: PUSH
20165: LD_INT 12
20167: PUSH
20168: LD_INT 13
20170: PUSH
20171: LD_INT 14
20173: PUSH
20174: LD_INT 15
20176: PUSH
20177: LD_INT 16
20179: PUSH
20180: LD_INT 17
20182: PUSH
20183: LD_INT 18
20185: PUSH
20186: LD_INT 19
20188: PUSH
20189: LD_INT 20
20191: PUSH
20192: LD_INT 21
20194: PUSH
20195: LD_INT 22
20197: PUSH
20198: LD_INT 23
20200: PUSH
20201: LD_INT 24
20203: PUSH
20204: LD_INT 25
20206: PUSH
20207: LD_INT 26
20209: PUSH
20210: LD_INT 27
20212: PUSH
20213: LD_INT 28
20215: PUSH
20216: LD_INT 30
20218: PUSH
20219: LD_INT 31
20221: PUSH
20222: LD_INT 32
20224: PUSH
20225: LD_INT 33
20227: PUSH
20228: LD_INT 34
20230: PUSH
20231: LD_INT 36
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 101
20272: PUSH
20273: LD_INT 102
20275: PUSH
20276: LD_INT 103
20278: PUSH
20279: LD_INT 104
20281: PUSH
20282: LD_INT 105
20284: PUSH
20285: LD_INT 106
20287: PUSH
20288: LD_INT 107
20290: PUSH
20291: LD_INT 108
20293: PUSH
20294: LD_INT 109
20296: PUSH
20297: LD_INT 110
20299: PUSH
20300: LD_INT 111
20302: PUSH
20303: LD_INT 112
20305: PUSH
20306: LD_INT 113
20308: PUSH
20309: LD_INT 114
20311: PUSH
20312: LD_INT 116
20314: PUSH
20315: LD_INT 117
20317: PUSH
20318: LD_INT 118
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: ST_TO_ADDR
20344: GO 21799
20346: LD_INT 13
20348: DOUBLE
20349: EQUAL
20350: IFTRUE 20354
20352: GO 20562
20354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20355: LD_ADDR_VAR 0 1
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 2
20365: PUSH
20366: LD_INT 3
20368: PUSH
20369: LD_INT 4
20371: PUSH
20372: LD_INT 5
20374: PUSH
20375: LD_INT 8
20377: PUSH
20378: LD_INT 9
20380: PUSH
20381: LD_INT 10
20383: PUSH
20384: LD_INT 11
20386: PUSH
20387: LD_INT 12
20389: PUSH
20390: LD_INT 14
20392: PUSH
20393: LD_INT 15
20395: PUSH
20396: LD_INT 16
20398: PUSH
20399: LD_INT 17
20401: PUSH
20402: LD_INT 18
20404: PUSH
20405: LD_INT 19
20407: PUSH
20408: LD_INT 20
20410: PUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 22
20416: PUSH
20417: LD_INT 23
20419: PUSH
20420: LD_INT 24
20422: PUSH
20423: LD_INT 25
20425: PUSH
20426: LD_INT 26
20428: PUSH
20429: LD_INT 27
20431: PUSH
20432: LD_INT 28
20434: PUSH
20435: LD_INT 30
20437: PUSH
20438: LD_INT 31
20440: PUSH
20441: LD_INT 32
20443: PUSH
20444: LD_INT 33
20446: PUSH
20447: LD_INT 34
20449: PUSH
20450: LD_INT 36
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 101
20488: PUSH
20489: LD_INT 102
20491: PUSH
20492: LD_INT 103
20494: PUSH
20495: LD_INT 104
20497: PUSH
20498: LD_INT 105
20500: PUSH
20501: LD_INT 106
20503: PUSH
20504: LD_INT 107
20506: PUSH
20507: LD_INT 108
20509: PUSH
20510: LD_INT 109
20512: PUSH
20513: LD_INT 110
20515: PUSH
20516: LD_INT 111
20518: PUSH
20519: LD_INT 112
20521: PUSH
20522: LD_INT 113
20524: PUSH
20525: LD_INT 114
20527: PUSH
20528: LD_INT 116
20530: PUSH
20531: LD_INT 117
20533: PUSH
20534: LD_INT 118
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: ST_TO_ADDR
20560: GO 21799
20562: LD_INT 14
20564: DOUBLE
20565: EQUAL
20566: IFTRUE 20570
20568: GO 20794
20570: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20571: LD_ADDR_VAR 0 1
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: LD_INT 3
20584: PUSH
20585: LD_INT 4
20587: PUSH
20588: LD_INT 5
20590: PUSH
20591: LD_INT 6
20593: PUSH
20594: LD_INT 7
20596: PUSH
20597: LD_INT 8
20599: PUSH
20600: LD_INT 9
20602: PUSH
20603: LD_INT 10
20605: PUSH
20606: LD_INT 11
20608: PUSH
20609: LD_INT 12
20611: PUSH
20612: LD_INT 13
20614: PUSH
20615: LD_INT 14
20617: PUSH
20618: LD_INT 15
20620: PUSH
20621: LD_INT 16
20623: PUSH
20624: LD_INT 17
20626: PUSH
20627: LD_INT 18
20629: PUSH
20630: LD_INT 19
20632: PUSH
20633: LD_INT 20
20635: PUSH
20636: LD_INT 21
20638: PUSH
20639: LD_INT 22
20641: PUSH
20642: LD_INT 23
20644: PUSH
20645: LD_INT 24
20647: PUSH
20648: LD_INT 25
20650: PUSH
20651: LD_INT 26
20653: PUSH
20654: LD_INT 27
20656: PUSH
20657: LD_INT 28
20659: PUSH
20660: LD_INT 29
20662: PUSH
20663: LD_INT 30
20665: PUSH
20666: LD_INT 31
20668: PUSH
20669: LD_INT 32
20671: PUSH
20672: LD_INT 33
20674: PUSH
20675: LD_INT 34
20677: PUSH
20678: LD_INT 36
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 101
20720: PUSH
20721: LD_INT 102
20723: PUSH
20724: LD_INT 103
20726: PUSH
20727: LD_INT 104
20729: PUSH
20730: LD_INT 105
20732: PUSH
20733: LD_INT 106
20735: PUSH
20736: LD_INT 107
20738: PUSH
20739: LD_INT 108
20741: PUSH
20742: LD_INT 109
20744: PUSH
20745: LD_INT 110
20747: PUSH
20748: LD_INT 111
20750: PUSH
20751: LD_INT 112
20753: PUSH
20754: LD_INT 113
20756: PUSH
20757: LD_INT 114
20759: PUSH
20760: LD_INT 116
20762: PUSH
20763: LD_INT 117
20765: PUSH
20766: LD_INT 118
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: ST_TO_ADDR
20792: GO 21799
20794: LD_INT 15
20796: DOUBLE
20797: EQUAL
20798: IFTRUE 20802
20800: GO 21026
20802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
20803: LD_ADDR_VAR 0 1
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 3
20816: PUSH
20817: LD_INT 4
20819: PUSH
20820: LD_INT 5
20822: PUSH
20823: LD_INT 6
20825: PUSH
20826: LD_INT 7
20828: PUSH
20829: LD_INT 8
20831: PUSH
20832: LD_INT 9
20834: PUSH
20835: LD_INT 10
20837: PUSH
20838: LD_INT 11
20840: PUSH
20841: LD_INT 12
20843: PUSH
20844: LD_INT 13
20846: PUSH
20847: LD_INT 14
20849: PUSH
20850: LD_INT 15
20852: PUSH
20853: LD_INT 16
20855: PUSH
20856: LD_INT 17
20858: PUSH
20859: LD_INT 18
20861: PUSH
20862: LD_INT 19
20864: PUSH
20865: LD_INT 20
20867: PUSH
20868: LD_INT 21
20870: PUSH
20871: LD_INT 22
20873: PUSH
20874: LD_INT 23
20876: PUSH
20877: LD_INT 24
20879: PUSH
20880: LD_INT 25
20882: PUSH
20883: LD_INT 26
20885: PUSH
20886: LD_INT 27
20888: PUSH
20889: LD_INT 28
20891: PUSH
20892: LD_INT 29
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 31
20900: PUSH
20901: LD_INT 32
20903: PUSH
20904: LD_INT 33
20906: PUSH
20907: LD_INT 34
20909: PUSH
20910: LD_INT 36
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 101
20952: PUSH
20953: LD_INT 102
20955: PUSH
20956: LD_INT 103
20958: PUSH
20959: LD_INT 104
20961: PUSH
20962: LD_INT 105
20964: PUSH
20965: LD_INT 106
20967: PUSH
20968: LD_INT 107
20970: PUSH
20971: LD_INT 108
20973: PUSH
20974: LD_INT 109
20976: PUSH
20977: LD_INT 110
20979: PUSH
20980: LD_INT 111
20982: PUSH
20983: LD_INT 112
20985: PUSH
20986: LD_INT 113
20988: PUSH
20989: LD_INT 114
20991: PUSH
20992: LD_INT 116
20994: PUSH
20995: LD_INT 117
20997: PUSH
20998: LD_INT 118
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: ST_TO_ADDR
21024: GO 21799
21026: LD_INT 16
21028: DOUBLE
21029: EQUAL
21030: IFTRUE 21034
21032: GO 21170
21034: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21035: LD_ADDR_VAR 0 1
21039: PUSH
21040: LD_INT 2
21042: PUSH
21043: LD_INT 4
21045: PUSH
21046: LD_INT 5
21048: PUSH
21049: LD_INT 7
21051: PUSH
21052: LD_INT 11
21054: PUSH
21055: LD_INT 12
21057: PUSH
21058: LD_INT 15
21060: PUSH
21061: LD_INT 16
21063: PUSH
21064: LD_INT 20
21066: PUSH
21067: LD_INT 21
21069: PUSH
21070: LD_INT 22
21072: PUSH
21073: LD_INT 23
21075: PUSH
21076: LD_INT 25
21078: PUSH
21079: LD_INT 26
21081: PUSH
21082: LD_INT 30
21084: PUSH
21085: LD_INT 31
21087: PUSH
21088: LD_INT 32
21090: PUSH
21091: LD_INT 33
21093: PUSH
21094: LD_INT 34
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 101
21120: PUSH
21121: LD_INT 102
21123: PUSH
21124: LD_INT 103
21126: PUSH
21127: LD_INT 106
21129: PUSH
21130: LD_INT 108
21132: PUSH
21133: LD_INT 112
21135: PUSH
21136: LD_INT 113
21138: PUSH
21139: LD_INT 114
21141: PUSH
21142: LD_INT 116
21144: PUSH
21145: LD_INT 117
21147: PUSH
21148: LD_INT 118
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: ST_TO_ADDR
21168: GO 21799
21170: LD_INT 17
21172: DOUBLE
21173: EQUAL
21174: IFTRUE 21178
21176: GO 21402
21178: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21179: LD_ADDR_VAR 0 1
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: LD_INT 4
21195: PUSH
21196: LD_INT 5
21198: PUSH
21199: LD_INT 6
21201: PUSH
21202: LD_INT 7
21204: PUSH
21205: LD_INT 8
21207: PUSH
21208: LD_INT 9
21210: PUSH
21211: LD_INT 10
21213: PUSH
21214: LD_INT 11
21216: PUSH
21217: LD_INT 12
21219: PUSH
21220: LD_INT 13
21222: PUSH
21223: LD_INT 14
21225: PUSH
21226: LD_INT 15
21228: PUSH
21229: LD_INT 16
21231: PUSH
21232: LD_INT 17
21234: PUSH
21235: LD_INT 18
21237: PUSH
21238: LD_INT 19
21240: PUSH
21241: LD_INT 20
21243: PUSH
21244: LD_INT 21
21246: PUSH
21247: LD_INT 22
21249: PUSH
21250: LD_INT 23
21252: PUSH
21253: LD_INT 24
21255: PUSH
21256: LD_INT 25
21258: PUSH
21259: LD_INT 26
21261: PUSH
21262: LD_INT 27
21264: PUSH
21265: LD_INT 28
21267: PUSH
21268: LD_INT 29
21270: PUSH
21271: LD_INT 30
21273: PUSH
21274: LD_INT 31
21276: PUSH
21277: LD_INT 32
21279: PUSH
21280: LD_INT 33
21282: PUSH
21283: LD_INT 34
21285: PUSH
21286: LD_INT 36
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 101
21328: PUSH
21329: LD_INT 102
21331: PUSH
21332: LD_INT 103
21334: PUSH
21335: LD_INT 104
21337: PUSH
21338: LD_INT 105
21340: PUSH
21341: LD_INT 106
21343: PUSH
21344: LD_INT 107
21346: PUSH
21347: LD_INT 108
21349: PUSH
21350: LD_INT 109
21352: PUSH
21353: LD_INT 110
21355: PUSH
21356: LD_INT 111
21358: PUSH
21359: LD_INT 112
21361: PUSH
21362: LD_INT 113
21364: PUSH
21365: LD_INT 114
21367: PUSH
21368: LD_INT 116
21370: PUSH
21371: LD_INT 117
21373: PUSH
21374: LD_INT 118
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: ST_TO_ADDR
21400: GO 21799
21402: LD_INT 18
21404: DOUBLE
21405: EQUAL
21406: IFTRUE 21410
21408: GO 21558
21410: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21411: LD_ADDR_VAR 0 1
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 4
21421: PUSH
21422: LD_INT 5
21424: PUSH
21425: LD_INT 7
21427: PUSH
21428: LD_INT 11
21430: PUSH
21431: LD_INT 12
21433: PUSH
21434: LD_INT 15
21436: PUSH
21437: LD_INT 16
21439: PUSH
21440: LD_INT 20
21442: PUSH
21443: LD_INT 21
21445: PUSH
21446: LD_INT 22
21448: PUSH
21449: LD_INT 23
21451: PUSH
21452: LD_INT 25
21454: PUSH
21455: LD_INT 26
21457: PUSH
21458: LD_INT 30
21460: PUSH
21461: LD_INT 31
21463: PUSH
21464: LD_INT 32
21466: PUSH
21467: LD_INT 33
21469: PUSH
21470: LD_INT 34
21472: PUSH
21473: LD_INT 35
21475: PUSH
21476: LD_INT 36
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 101
21504: PUSH
21505: LD_INT 102
21507: PUSH
21508: LD_INT 103
21510: PUSH
21511: LD_INT 106
21513: PUSH
21514: LD_INT 108
21516: PUSH
21517: LD_INT 112
21519: PUSH
21520: LD_INT 113
21522: PUSH
21523: LD_INT 114
21525: PUSH
21526: LD_INT 115
21528: PUSH
21529: LD_INT 116
21531: PUSH
21532: LD_INT 117
21534: PUSH
21535: LD_INT 118
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: ST_TO_ADDR
21556: GO 21799
21558: LD_INT 19
21560: DOUBLE
21561: EQUAL
21562: IFTRUE 21566
21564: GO 21798
21566: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21567: LD_ADDR_VAR 0 1
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: LD_INT 3
21580: PUSH
21581: LD_INT 4
21583: PUSH
21584: LD_INT 5
21586: PUSH
21587: LD_INT 6
21589: PUSH
21590: LD_INT 7
21592: PUSH
21593: LD_INT 8
21595: PUSH
21596: LD_INT 9
21598: PUSH
21599: LD_INT 10
21601: PUSH
21602: LD_INT 11
21604: PUSH
21605: LD_INT 12
21607: PUSH
21608: LD_INT 13
21610: PUSH
21611: LD_INT 14
21613: PUSH
21614: LD_INT 15
21616: PUSH
21617: LD_INT 16
21619: PUSH
21620: LD_INT 17
21622: PUSH
21623: LD_INT 18
21625: PUSH
21626: LD_INT 19
21628: PUSH
21629: LD_INT 20
21631: PUSH
21632: LD_INT 21
21634: PUSH
21635: LD_INT 22
21637: PUSH
21638: LD_INT 23
21640: PUSH
21641: LD_INT 24
21643: PUSH
21644: LD_INT 25
21646: PUSH
21647: LD_INT 26
21649: PUSH
21650: LD_INT 27
21652: PUSH
21653: LD_INT 28
21655: PUSH
21656: LD_INT 29
21658: PUSH
21659: LD_INT 30
21661: PUSH
21662: LD_INT 31
21664: PUSH
21665: LD_INT 32
21667: PUSH
21668: LD_INT 33
21670: PUSH
21671: LD_INT 34
21673: PUSH
21674: LD_INT 35
21676: PUSH
21677: LD_INT 36
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 101
21720: PUSH
21721: LD_INT 102
21723: PUSH
21724: LD_INT 103
21726: PUSH
21727: LD_INT 104
21729: PUSH
21730: LD_INT 105
21732: PUSH
21733: LD_INT 106
21735: PUSH
21736: LD_INT 107
21738: PUSH
21739: LD_INT 108
21741: PUSH
21742: LD_INT 109
21744: PUSH
21745: LD_INT 110
21747: PUSH
21748: LD_INT 111
21750: PUSH
21751: LD_INT 112
21753: PUSH
21754: LD_INT 113
21756: PUSH
21757: LD_INT 114
21759: PUSH
21760: LD_INT 115
21762: PUSH
21763: LD_INT 116
21765: PUSH
21766: LD_INT 117
21768: PUSH
21769: LD_INT 118
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: ST_TO_ADDR
21796: GO 21799
21798: POP
// end else
21799: GO 22030
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
21801: LD_ADDR_VAR 0 1
21805: PUSH
21806: LD_INT 1
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: LD_INT 3
21814: PUSH
21815: LD_INT 4
21817: PUSH
21818: LD_INT 5
21820: PUSH
21821: LD_INT 6
21823: PUSH
21824: LD_INT 7
21826: PUSH
21827: LD_INT 8
21829: PUSH
21830: LD_INT 9
21832: PUSH
21833: LD_INT 10
21835: PUSH
21836: LD_INT 11
21838: PUSH
21839: LD_INT 12
21841: PUSH
21842: LD_INT 13
21844: PUSH
21845: LD_INT 14
21847: PUSH
21848: LD_INT 15
21850: PUSH
21851: LD_INT 16
21853: PUSH
21854: LD_INT 17
21856: PUSH
21857: LD_INT 18
21859: PUSH
21860: LD_INT 19
21862: PUSH
21863: LD_INT 20
21865: PUSH
21866: LD_INT 21
21868: PUSH
21869: LD_INT 22
21871: PUSH
21872: LD_INT 23
21874: PUSH
21875: LD_INT 24
21877: PUSH
21878: LD_INT 25
21880: PUSH
21881: LD_INT 26
21883: PUSH
21884: LD_INT 27
21886: PUSH
21887: LD_INT 28
21889: PUSH
21890: LD_INT 29
21892: PUSH
21893: LD_INT 30
21895: PUSH
21896: LD_INT 31
21898: PUSH
21899: LD_INT 32
21901: PUSH
21902: LD_INT 33
21904: PUSH
21905: LD_INT 34
21907: PUSH
21908: LD_INT 35
21910: PUSH
21911: LD_INT 36
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 101
21954: PUSH
21955: LD_INT 102
21957: PUSH
21958: LD_INT 103
21960: PUSH
21961: LD_INT 104
21963: PUSH
21964: LD_INT 105
21966: PUSH
21967: LD_INT 106
21969: PUSH
21970: LD_INT 107
21972: PUSH
21973: LD_INT 108
21975: PUSH
21976: LD_INT 109
21978: PUSH
21979: LD_INT 110
21981: PUSH
21982: LD_INT 111
21984: PUSH
21985: LD_INT 112
21987: PUSH
21988: LD_INT 113
21990: PUSH
21991: LD_INT 114
21993: PUSH
21994: LD_INT 115
21996: PUSH
21997: LD_INT 116
21999: PUSH
22000: LD_INT 117
22002: PUSH
22003: LD_INT 118
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: ST_TO_ADDR
// if result then
22030: LD_VAR 0 1
22034: IFFALSE 22323
// begin normal :=  ;
22036: LD_ADDR_VAR 0 3
22040: PUSH
22041: LD_STRING 
22043: ST_TO_ADDR
// hardcore :=  ;
22044: LD_ADDR_VAR 0 4
22048: PUSH
22049: LD_STRING 
22051: ST_TO_ADDR
// for i = 1 to normalCounter do
22052: LD_ADDR_VAR 0 5
22056: PUSH
22057: DOUBLE
22058: LD_INT 1
22060: DEC
22061: ST_TO_ADDR
22062: LD_EXP 53
22066: PUSH
22067: FOR_TO
22068: IFFALSE 22169
// begin tmp := 0 ;
22070: LD_ADDR_VAR 0 2
22074: PUSH
22075: LD_STRING 0
22077: ST_TO_ADDR
// if result [ 1 ] then
22078: LD_VAR 0 1
22082: PUSH
22083: LD_INT 1
22085: ARRAY
22086: IFFALSE 22151
// if result [ 1 ] [ 1 ] = i then
22088: LD_VAR 0 1
22092: PUSH
22093: LD_INT 1
22095: ARRAY
22096: PUSH
22097: LD_INT 1
22099: ARRAY
22100: PUSH
22101: LD_VAR 0 5
22105: EQUAL
22106: IFFALSE 22151
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22108: LD_ADDR_VAR 0 1
22112: PUSH
22113: LD_VAR 0 1
22117: PPUSH
22118: LD_INT 1
22120: PPUSH
22121: LD_VAR 0 1
22125: PUSH
22126: LD_INT 1
22128: ARRAY
22129: PPUSH
22130: LD_INT 1
22132: PPUSH
22133: CALL_OW 3
22137: PPUSH
22138: CALL_OW 1
22142: ST_TO_ADDR
// tmp := 1 ;
22143: LD_ADDR_VAR 0 2
22147: PUSH
22148: LD_STRING 1
22150: ST_TO_ADDR
// end ; normal := normal & tmp ;
22151: LD_ADDR_VAR 0 3
22155: PUSH
22156: LD_VAR 0 3
22160: PUSH
22161: LD_VAR 0 2
22165: STR
22166: ST_TO_ADDR
// end ;
22167: GO 22067
22169: POP
22170: POP
// for i = 1 to hardcoreCounter do
22171: LD_ADDR_VAR 0 5
22175: PUSH
22176: DOUBLE
22177: LD_INT 1
22179: DEC
22180: ST_TO_ADDR
22181: LD_EXP 54
22185: PUSH
22186: FOR_TO
22187: IFFALSE 22292
// begin tmp := 0 ;
22189: LD_ADDR_VAR 0 2
22193: PUSH
22194: LD_STRING 0
22196: ST_TO_ADDR
// if result [ 2 ] then
22197: LD_VAR 0 1
22201: PUSH
22202: LD_INT 2
22204: ARRAY
22205: IFFALSE 22274
// if result [ 2 ] [ 1 ] = 100 + i then
22207: LD_VAR 0 1
22211: PUSH
22212: LD_INT 2
22214: ARRAY
22215: PUSH
22216: LD_INT 1
22218: ARRAY
22219: PUSH
22220: LD_INT 100
22222: PUSH
22223: LD_VAR 0 5
22227: PLUS
22228: EQUAL
22229: IFFALSE 22274
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22231: LD_ADDR_VAR 0 1
22235: PUSH
22236: LD_VAR 0 1
22240: PPUSH
22241: LD_INT 2
22243: PPUSH
22244: LD_VAR 0 1
22248: PUSH
22249: LD_INT 2
22251: ARRAY
22252: PPUSH
22253: LD_INT 1
22255: PPUSH
22256: CALL_OW 3
22260: PPUSH
22261: CALL_OW 1
22265: ST_TO_ADDR
// tmp := 1 ;
22266: LD_ADDR_VAR 0 2
22270: PUSH
22271: LD_STRING 1
22273: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22274: LD_ADDR_VAR 0 4
22278: PUSH
22279: LD_VAR 0 4
22283: PUSH
22284: LD_VAR 0 2
22288: STR
22289: ST_TO_ADDR
// end ;
22290: GO 22186
22292: POP
22293: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22294: LD_STRING getStreamItemsFromMission("
22296: PUSH
22297: LD_VAR 0 3
22301: STR
22302: PUSH
22303: LD_STRING ","
22305: STR
22306: PUSH
22307: LD_VAR 0 4
22311: STR
22312: PUSH
22313: LD_STRING ")
22315: STR
22316: PPUSH
22317: CALL_OW 559
// end else
22321: GO 22330
// ToLua ( getStreamItemsFromMission("","") ) ;
22323: LD_STRING getStreamItemsFromMission("","")
22325: PPUSH
22326: CALL_OW 559
// end ;
22330: LD_VAR 0 1
22334: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22335: LD_EXP 52
22339: PUSH
22340: LD_EXP 57
22344: AND
22345: IFFALSE 22469
22347: GO 22349
22349: DISABLE
22350: LD_INT 0
22352: PPUSH
22353: PPUSH
// begin enable ;
22354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22355: LD_ADDR_VAR 0 2
22359: PUSH
22360: LD_INT 22
22362: PUSH
22363: LD_OWVAR 2
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: LD_INT 34
22377: PUSH
22378: LD_INT 7
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 34
22387: PUSH
22388: LD_INT 45
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 34
22397: PUSH
22398: LD_INT 28
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 34
22407: PUSH
22408: LD_INT 47
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PPUSH
22426: CALL_OW 69
22430: ST_TO_ADDR
// if not tmp then
22431: LD_VAR 0 2
22435: NOT
22436: IFFALSE 22440
// exit ;
22438: GO 22469
// for i in tmp do
22440: LD_ADDR_VAR 0 1
22444: PUSH
22445: LD_VAR 0 2
22449: PUSH
22450: FOR_IN
22451: IFFALSE 22467
// begin SetLives ( i , 0 ) ;
22453: LD_VAR 0 1
22457: PPUSH
22458: LD_INT 0
22460: PPUSH
22461: CALL_OW 234
// end ;
22465: GO 22450
22467: POP
22468: POP
// end ;
22469: PPOPN 2
22471: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22472: LD_EXP 52
22476: PUSH
22477: LD_EXP 58
22481: AND
22482: IFFALSE 22566
22484: GO 22486
22486: DISABLE
22487: LD_INT 0
22489: PPUSH
22490: PPUSH
// begin enable ;
22491: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22492: LD_ADDR_VAR 0 2
22496: PUSH
22497: LD_INT 22
22499: PUSH
22500: LD_OWVAR 2
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 32
22511: PUSH
22512: LD_INT 3
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PPUSH
22523: CALL_OW 69
22527: ST_TO_ADDR
// if not tmp then
22528: LD_VAR 0 2
22532: NOT
22533: IFFALSE 22537
// exit ;
22535: GO 22566
// for i in tmp do
22537: LD_ADDR_VAR 0 1
22541: PUSH
22542: LD_VAR 0 2
22546: PUSH
22547: FOR_IN
22548: IFFALSE 22564
// begin SetLives ( i , 0 ) ;
22550: LD_VAR 0 1
22554: PPUSH
22555: LD_INT 0
22557: PPUSH
22558: CALL_OW 234
// end ;
22562: GO 22547
22564: POP
22565: POP
// end ;
22566: PPOPN 2
22568: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22569: LD_EXP 52
22573: PUSH
22574: LD_EXP 55
22578: AND
22579: IFFALSE 22672
22581: GO 22583
22583: DISABLE
22584: LD_INT 0
22586: PPUSH
// begin enable ;
22587: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22588: LD_ADDR_VAR 0 1
22592: PUSH
22593: LD_INT 22
22595: PUSH
22596: LD_OWVAR 2
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: LD_INT 25
22610: PUSH
22611: LD_INT 5
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 25
22620: PUSH
22621: LD_INT 9
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 25
22630: PUSH
22631: LD_INT 8
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: PUSH
22653: FOR_IN
22654: IFFALSE 22670
// begin SetClass ( i , 1 ) ;
22656: LD_VAR 0 1
22660: PPUSH
22661: LD_INT 1
22663: PPUSH
22664: CALL_OW 336
// end ;
22668: GO 22653
22670: POP
22671: POP
// end ;
22672: PPOPN 1
22674: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22675: LD_EXP 52
22679: PUSH
22680: LD_EXP 56
22684: AND
22685: PUSH
22686: LD_OWVAR 65
22690: PUSH
22691: LD_INT 7
22693: LESS
22694: AND
22695: IFFALSE 22709
22697: GO 22699
22699: DISABLE
// begin enable ;
22700: ENABLE
// game_speed := 7 ;
22701: LD_ADDR_OWVAR 65
22705: PUSH
22706: LD_INT 7
22708: ST_TO_ADDR
// end ;
22709: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22710: LD_EXP 52
22714: PUSH
22715: LD_EXP 59
22719: AND
22720: IFFALSE 22922
22722: GO 22724
22724: DISABLE
22725: LD_INT 0
22727: PPUSH
22728: PPUSH
22729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22730: LD_ADDR_VAR 0 3
22734: PUSH
22735: LD_INT 81
22737: PUSH
22738: LD_OWVAR 2
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 21
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PPUSH
22761: CALL_OW 69
22765: ST_TO_ADDR
// if not tmp then
22766: LD_VAR 0 3
22770: NOT
22771: IFFALSE 22775
// exit ;
22773: GO 22922
// if tmp > 5 then
22775: LD_VAR 0 3
22779: PUSH
22780: LD_INT 5
22782: GREATER
22783: IFFALSE 22795
// k := 5 else
22785: LD_ADDR_VAR 0 2
22789: PUSH
22790: LD_INT 5
22792: ST_TO_ADDR
22793: GO 22805
// k := tmp ;
22795: LD_ADDR_VAR 0 2
22799: PUSH
22800: LD_VAR 0 3
22804: ST_TO_ADDR
// for i := 1 to k do
22805: LD_ADDR_VAR 0 1
22809: PUSH
22810: DOUBLE
22811: LD_INT 1
22813: DEC
22814: ST_TO_ADDR
22815: LD_VAR 0 2
22819: PUSH
22820: FOR_TO
22821: IFFALSE 22920
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22823: LD_VAR 0 3
22827: PUSH
22828: LD_VAR 0 1
22832: ARRAY
22833: PPUSH
22834: LD_VAR 0 1
22838: PUSH
22839: LD_INT 4
22841: MOD
22842: PUSH
22843: LD_INT 1
22845: PLUS
22846: PPUSH
22847: CALL_OW 259
22851: PUSH
22852: LD_INT 10
22854: LESS
22855: IFFALSE 22918
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22857: LD_VAR 0 3
22861: PUSH
22862: LD_VAR 0 1
22866: ARRAY
22867: PPUSH
22868: LD_VAR 0 1
22872: PUSH
22873: LD_INT 4
22875: MOD
22876: PUSH
22877: LD_INT 1
22879: PLUS
22880: PPUSH
22881: LD_VAR 0 3
22885: PUSH
22886: LD_VAR 0 1
22890: ARRAY
22891: PPUSH
22892: LD_VAR 0 1
22896: PUSH
22897: LD_INT 4
22899: MOD
22900: PUSH
22901: LD_INT 1
22903: PLUS
22904: PPUSH
22905: CALL_OW 259
22909: PUSH
22910: LD_INT 1
22912: PLUS
22913: PPUSH
22914: CALL_OW 237
22918: GO 22820
22920: POP
22921: POP
// end ;
22922: PPOPN 3
22924: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22925: LD_EXP 52
22929: PUSH
22930: LD_EXP 60
22934: AND
22935: IFFALSE 22955
22937: GO 22939
22939: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22940: LD_INT 4
22942: PPUSH
22943: LD_OWVAR 2
22947: PPUSH
22948: LD_INT 0
22950: PPUSH
22951: CALL_OW 324
22955: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22956: LD_EXP 52
22960: PUSH
22961: LD_EXP 89
22965: AND
22966: IFFALSE 22986
22968: GO 22970
22970: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22971: LD_INT 19
22973: PPUSH
22974: LD_OWVAR 2
22978: PPUSH
22979: LD_INT 0
22981: PPUSH
22982: CALL_OW 324
22986: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22987: LD_EXP 52
22991: PUSH
22992: LD_EXP 61
22996: AND
22997: IFFALSE 23099
22999: GO 23001
23001: DISABLE
23002: LD_INT 0
23004: PPUSH
23005: PPUSH
// begin enable ;
23006: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23007: LD_ADDR_VAR 0 2
23011: PUSH
23012: LD_INT 22
23014: PUSH
23015: LD_OWVAR 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 2
23026: PUSH
23027: LD_INT 34
23029: PUSH
23030: LD_INT 11
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 34
23039: PUSH
23040: LD_INT 30
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PPUSH
23056: CALL_OW 69
23060: ST_TO_ADDR
// if not tmp then
23061: LD_VAR 0 2
23065: NOT
23066: IFFALSE 23070
// exit ;
23068: GO 23099
// for i in tmp do
23070: LD_ADDR_VAR 0 1
23074: PUSH
23075: LD_VAR 0 2
23079: PUSH
23080: FOR_IN
23081: IFFALSE 23097
// begin SetLives ( i , 0 ) ;
23083: LD_VAR 0 1
23087: PPUSH
23088: LD_INT 0
23090: PPUSH
23091: CALL_OW 234
// end ;
23095: GO 23080
23097: POP
23098: POP
// end ;
23099: PPOPN 2
23101: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23102: LD_EXP 52
23106: PUSH
23107: LD_EXP 62
23111: AND
23112: IFFALSE 23132
23114: GO 23116
23116: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23117: LD_INT 32
23119: PPUSH
23120: LD_OWVAR 2
23124: PPUSH
23125: LD_INT 0
23127: PPUSH
23128: CALL_OW 324
23132: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23133: LD_EXP 52
23137: PUSH
23138: LD_EXP 63
23142: AND
23143: IFFALSE 23324
23145: GO 23147
23147: DISABLE
23148: LD_INT 0
23150: PPUSH
23151: PPUSH
23152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23153: LD_ADDR_VAR 0 2
23157: PUSH
23158: LD_INT 22
23160: PUSH
23161: LD_OWVAR 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 33
23172: PUSH
23173: LD_INT 3
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PPUSH
23184: CALL_OW 69
23188: ST_TO_ADDR
// if not tmp then
23189: LD_VAR 0 2
23193: NOT
23194: IFFALSE 23198
// exit ;
23196: GO 23324
// side := 0 ;
23198: LD_ADDR_VAR 0 3
23202: PUSH
23203: LD_INT 0
23205: ST_TO_ADDR
// for i := 1 to 8 do
23206: LD_ADDR_VAR 0 1
23210: PUSH
23211: DOUBLE
23212: LD_INT 1
23214: DEC
23215: ST_TO_ADDR
23216: LD_INT 8
23218: PUSH
23219: FOR_TO
23220: IFFALSE 23268
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23222: LD_OWVAR 2
23226: PUSH
23227: LD_VAR 0 1
23231: NONEQUAL
23232: PUSH
23233: LD_OWVAR 2
23237: PPUSH
23238: LD_VAR 0 1
23242: PPUSH
23243: CALL_OW 81
23247: PUSH
23248: LD_INT 2
23250: EQUAL
23251: AND
23252: IFFALSE 23266
// begin side := i ;
23254: LD_ADDR_VAR 0 3
23258: PUSH
23259: LD_VAR 0 1
23263: ST_TO_ADDR
// break ;
23264: GO 23268
// end ;
23266: GO 23219
23268: POP
23269: POP
// if not side then
23270: LD_VAR 0 3
23274: NOT
23275: IFFALSE 23279
// exit ;
23277: GO 23324
// for i := 1 to tmp do
23279: LD_ADDR_VAR 0 1
23283: PUSH
23284: DOUBLE
23285: LD_INT 1
23287: DEC
23288: ST_TO_ADDR
23289: LD_VAR 0 2
23293: PUSH
23294: FOR_TO
23295: IFFALSE 23322
// if Prob ( 60 ) then
23297: LD_INT 60
23299: PPUSH
23300: CALL_OW 13
23304: IFFALSE 23320
// SetSide ( i , side ) ;
23306: LD_VAR 0 1
23310: PPUSH
23311: LD_VAR 0 3
23315: PPUSH
23316: CALL_OW 235
23320: GO 23294
23322: POP
23323: POP
// end ;
23324: PPOPN 3
23326: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23327: LD_EXP 52
23331: PUSH
23332: LD_EXP 65
23336: AND
23337: IFFALSE 23456
23339: GO 23341
23341: DISABLE
23342: LD_INT 0
23344: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23345: LD_ADDR_VAR 0 1
23349: PUSH
23350: LD_INT 22
23352: PUSH
23353: LD_OWVAR 2
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 21
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 3
23374: PUSH
23375: LD_INT 23
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: PPUSH
23394: CALL_OW 69
23398: PUSH
23399: FOR_IN
23400: IFFALSE 23454
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23402: LD_VAR 0 1
23406: PPUSH
23407: CALL_OW 257
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: LD_INT 3
23420: PUSH
23421: LD_INT 4
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: IN
23430: IFFALSE 23452
// SetClass ( un , rand ( 1 , 4 ) ) ;
23432: LD_VAR 0 1
23436: PPUSH
23437: LD_INT 1
23439: PPUSH
23440: LD_INT 4
23442: PPUSH
23443: CALL_OW 12
23447: PPUSH
23448: CALL_OW 336
23452: GO 23399
23454: POP
23455: POP
// end ;
23456: PPOPN 1
23458: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23459: LD_EXP 52
23463: PUSH
23464: LD_EXP 64
23468: AND
23469: IFFALSE 23548
23471: GO 23473
23473: DISABLE
23474: LD_INT 0
23476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23477: LD_ADDR_VAR 0 1
23481: PUSH
23482: LD_INT 22
23484: PUSH
23485: LD_OWVAR 2
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 21
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PPUSH
23508: CALL_OW 69
23512: ST_TO_ADDR
// if not tmp then
23513: LD_VAR 0 1
23517: NOT
23518: IFFALSE 23522
// exit ;
23520: GO 23548
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23522: LD_VAR 0 1
23526: PUSH
23527: LD_INT 1
23529: PPUSH
23530: LD_VAR 0 1
23534: PPUSH
23535: CALL_OW 12
23539: ARRAY
23540: PPUSH
23541: LD_INT 100
23543: PPUSH
23544: CALL_OW 234
// end ;
23548: PPOPN 1
23550: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23551: LD_EXP 52
23555: PUSH
23556: LD_EXP 66
23560: AND
23561: IFFALSE 23659
23563: GO 23565
23565: DISABLE
23566: LD_INT 0
23568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23569: LD_ADDR_VAR 0 1
23573: PUSH
23574: LD_INT 22
23576: PUSH
23577: LD_OWVAR 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 21
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PPUSH
23600: CALL_OW 69
23604: ST_TO_ADDR
// if not tmp then
23605: LD_VAR 0 1
23609: NOT
23610: IFFALSE 23614
// exit ;
23612: GO 23659
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23614: LD_VAR 0 1
23618: PUSH
23619: LD_INT 1
23621: PPUSH
23622: LD_VAR 0 1
23626: PPUSH
23627: CALL_OW 12
23631: ARRAY
23632: PPUSH
23633: LD_INT 1
23635: PPUSH
23636: LD_INT 4
23638: PPUSH
23639: CALL_OW 12
23643: PPUSH
23644: LD_INT 3000
23646: PPUSH
23647: LD_INT 9000
23649: PPUSH
23650: CALL_OW 12
23654: PPUSH
23655: CALL_OW 492
// end ;
23659: PPOPN 1
23661: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23662: LD_EXP 52
23666: PUSH
23667: LD_EXP 67
23671: AND
23672: IFFALSE 23692
23674: GO 23676
23676: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23677: LD_INT 1
23679: PPUSH
23680: LD_OWVAR 2
23684: PPUSH
23685: LD_INT 0
23687: PPUSH
23688: CALL_OW 324
23692: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23693: LD_EXP 52
23697: PUSH
23698: LD_EXP 68
23702: AND
23703: IFFALSE 23786
23705: GO 23707
23707: DISABLE
23708: LD_INT 0
23710: PPUSH
23711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23712: LD_ADDR_VAR 0 2
23716: PUSH
23717: LD_INT 22
23719: PUSH
23720: LD_OWVAR 2
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 21
23731: PUSH
23732: LD_INT 3
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PPUSH
23743: CALL_OW 69
23747: ST_TO_ADDR
// if not tmp then
23748: LD_VAR 0 2
23752: NOT
23753: IFFALSE 23757
// exit ;
23755: GO 23786
// for i in tmp do
23757: LD_ADDR_VAR 0 1
23761: PUSH
23762: LD_VAR 0 2
23766: PUSH
23767: FOR_IN
23768: IFFALSE 23784
// SetBLevel ( i , 10 ) ;
23770: LD_VAR 0 1
23774: PPUSH
23775: LD_INT 10
23777: PPUSH
23778: CALL_OW 241
23782: GO 23767
23784: POP
23785: POP
// end ;
23786: PPOPN 2
23788: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23789: LD_EXP 52
23793: PUSH
23794: LD_EXP 69
23798: AND
23799: IFFALSE 23910
23801: GO 23803
23803: DISABLE
23804: LD_INT 0
23806: PPUSH
23807: PPUSH
23808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 22
23816: PUSH
23817: LD_OWVAR 2
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 25
23828: PUSH
23829: LD_INT 1
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PPUSH
23840: CALL_OW 69
23844: ST_TO_ADDR
// if not tmp then
23845: LD_VAR 0 3
23849: NOT
23850: IFFALSE 23854
// exit ;
23852: GO 23910
// un := tmp [ rand ( 1 , tmp ) ] ;
23854: LD_ADDR_VAR 0 2
23858: PUSH
23859: LD_VAR 0 3
23863: PUSH
23864: LD_INT 1
23866: PPUSH
23867: LD_VAR 0 3
23871: PPUSH
23872: CALL_OW 12
23876: ARRAY
23877: ST_TO_ADDR
// if Crawls ( un ) then
23878: LD_VAR 0 2
23882: PPUSH
23883: CALL_OW 318
23887: IFFALSE 23898
// ComWalk ( un ) ;
23889: LD_VAR 0 2
23893: PPUSH
23894: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23898: LD_VAR 0 2
23902: PPUSH
23903: LD_INT 5
23905: PPUSH
23906: CALL_OW 336
// end ;
23910: PPOPN 3
23912: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23913: LD_EXP 52
23917: PUSH
23918: LD_EXP 70
23922: AND
23923: PUSH
23924: LD_OWVAR 67
23928: PUSH
23929: LD_INT 4
23931: LESS
23932: AND
23933: IFFALSE 23952
23935: GO 23937
23937: DISABLE
// begin Difficulty := Difficulty + 1 ;
23938: LD_ADDR_OWVAR 67
23942: PUSH
23943: LD_OWVAR 67
23947: PUSH
23948: LD_INT 1
23950: PLUS
23951: ST_TO_ADDR
// end ;
23952: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23953: LD_EXP 52
23957: PUSH
23958: LD_EXP 71
23962: AND
23963: IFFALSE 24066
23965: GO 23967
23967: DISABLE
23968: LD_INT 0
23970: PPUSH
// begin for i := 1 to 5 do
23971: LD_ADDR_VAR 0 1
23975: PUSH
23976: DOUBLE
23977: LD_INT 1
23979: DEC
23980: ST_TO_ADDR
23981: LD_INT 5
23983: PUSH
23984: FOR_TO
23985: IFFALSE 24064
// begin uc_nation := nation_nature ;
23987: LD_ADDR_OWVAR 21
23991: PUSH
23992: LD_INT 0
23994: ST_TO_ADDR
// uc_side := 0 ;
23995: LD_ADDR_OWVAR 20
23999: PUSH
24000: LD_INT 0
24002: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24003: LD_ADDR_OWVAR 29
24007: PUSH
24008: LD_INT 12
24010: PUSH
24011: LD_INT 12
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: ST_TO_ADDR
// hc_agressivity := 20 ;
24018: LD_ADDR_OWVAR 35
24022: PUSH
24023: LD_INT 20
24025: ST_TO_ADDR
// hc_class := class_tiger ;
24026: LD_ADDR_OWVAR 28
24030: PUSH
24031: LD_INT 14
24033: ST_TO_ADDR
// hc_gallery :=  ;
24034: LD_ADDR_OWVAR 33
24038: PUSH
24039: LD_STRING 
24041: ST_TO_ADDR
// hc_name :=  ;
24042: LD_ADDR_OWVAR 26
24046: PUSH
24047: LD_STRING 
24049: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24050: CALL_OW 44
24054: PPUSH
24055: LD_INT 0
24057: PPUSH
24058: CALL_OW 51
// end ;
24062: GO 23984
24064: POP
24065: POP
// end ;
24066: PPOPN 1
24068: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24069: LD_EXP 52
24073: PUSH
24074: LD_EXP 72
24078: AND
24079: IFFALSE 24088
24081: GO 24083
24083: DISABLE
// StreamSibBomb ;
24084: CALL 24089 0 0
24088: END
// export function StreamSibBomb ; var i , x , y ; begin
24089: LD_INT 0
24091: PPUSH
24092: PPUSH
24093: PPUSH
24094: PPUSH
// result := false ;
24095: LD_ADDR_VAR 0 1
24099: PUSH
24100: LD_INT 0
24102: ST_TO_ADDR
// for i := 1 to 16 do
24103: LD_ADDR_VAR 0 2
24107: PUSH
24108: DOUBLE
24109: LD_INT 1
24111: DEC
24112: ST_TO_ADDR
24113: LD_INT 16
24115: PUSH
24116: FOR_TO
24117: IFFALSE 24316
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24119: LD_ADDR_VAR 0 3
24123: PUSH
24124: LD_INT 10
24126: PUSH
24127: LD_INT 20
24129: PUSH
24130: LD_INT 30
24132: PUSH
24133: LD_INT 40
24135: PUSH
24136: LD_INT 50
24138: PUSH
24139: LD_INT 60
24141: PUSH
24142: LD_INT 70
24144: PUSH
24145: LD_INT 80
24147: PUSH
24148: LD_INT 90
24150: PUSH
24151: LD_INT 100
24153: PUSH
24154: LD_INT 110
24156: PUSH
24157: LD_INT 120
24159: PUSH
24160: LD_INT 130
24162: PUSH
24163: LD_INT 140
24165: PUSH
24166: LD_INT 150
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PPUSH
24189: LD_INT 15
24191: PPUSH
24192: CALL_OW 12
24196: ARRAY
24197: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24198: LD_ADDR_VAR 0 4
24202: PUSH
24203: LD_INT 10
24205: PUSH
24206: LD_INT 20
24208: PUSH
24209: LD_INT 30
24211: PUSH
24212: LD_INT 40
24214: PUSH
24215: LD_INT 50
24217: PUSH
24218: LD_INT 60
24220: PUSH
24221: LD_INT 70
24223: PUSH
24224: LD_INT 80
24226: PUSH
24227: LD_INT 90
24229: PUSH
24230: LD_INT 100
24232: PUSH
24233: LD_INT 110
24235: PUSH
24236: LD_INT 120
24238: PUSH
24239: LD_INT 130
24241: PUSH
24242: LD_INT 140
24244: PUSH
24245: LD_INT 150
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PPUSH
24268: LD_INT 15
24270: PPUSH
24271: CALL_OW 12
24275: ARRAY
24276: ST_TO_ADDR
// if ValidHex ( x , y ) then
24277: LD_VAR 0 3
24281: PPUSH
24282: LD_VAR 0 4
24286: PPUSH
24287: CALL_OW 488
24291: IFFALSE 24314
// begin result := [ x , y ] ;
24293: LD_ADDR_VAR 0 1
24297: PUSH
24298: LD_VAR 0 3
24302: PUSH
24303: LD_VAR 0 4
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: ST_TO_ADDR
// break ;
24312: GO 24316
// end ; end ;
24314: GO 24116
24316: POP
24317: POP
// if result then
24318: LD_VAR 0 1
24322: IFFALSE 24382
// begin ToLua ( playSibBomb() ) ;
24324: LD_STRING playSibBomb()
24326: PPUSH
24327: CALL_OW 559
// wait ( 0 0$14 ) ;
24331: LD_INT 490
24333: PPUSH
24334: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24338: LD_VAR 0 1
24342: PUSH
24343: LD_INT 1
24345: ARRAY
24346: PPUSH
24347: LD_VAR 0 1
24351: PUSH
24352: LD_INT 2
24354: ARRAY
24355: PPUSH
24356: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24360: LD_VAR 0 1
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: PPUSH
24369: LD_VAR 0 1
24373: PUSH
24374: LD_INT 2
24376: ARRAY
24377: PPUSH
24378: CALL_OW 429
// end ; end ;
24382: LD_VAR 0 1
24386: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24387: LD_EXP 52
24391: PUSH
24392: LD_EXP 74
24396: AND
24397: IFFALSE 24409
24399: GO 24401
24401: DISABLE
// YouLost (  ) ;
24402: LD_STRING 
24404: PPUSH
24405: CALL_OW 104
24409: END
// every 0 0$1 trigger StreamModeActive and sFog do
24410: LD_EXP 52
24414: PUSH
24415: LD_EXP 73
24419: AND
24420: IFFALSE 24434
24422: GO 24424
24424: DISABLE
// FogOff ( your_side ) ;
24425: LD_OWVAR 2
24429: PPUSH
24430: CALL_OW 344
24434: END
// every 0 0$1 trigger StreamModeActive and sSun do
24435: LD_EXP 52
24439: PUSH
24440: LD_EXP 75
24444: AND
24445: IFFALSE 24473
24447: GO 24449
24449: DISABLE
// begin solar_recharge_percent := 0 ;
24450: LD_ADDR_OWVAR 79
24454: PUSH
24455: LD_INT 0
24457: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24458: LD_INT 10500
24460: PPUSH
24461: CALL_OW 67
// solar_recharge_percent := 100 ;
24465: LD_ADDR_OWVAR 79
24469: PUSH
24470: LD_INT 100
24472: ST_TO_ADDR
// end ;
24473: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24474: LD_EXP 52
24478: PUSH
24479: LD_EXP 76
24483: AND
24484: IFFALSE 24723
24486: GO 24488
24488: DISABLE
24489: LD_INT 0
24491: PPUSH
24492: PPUSH
24493: PPUSH
// begin tmp := [ ] ;
24494: LD_ADDR_VAR 0 3
24498: PUSH
24499: EMPTY
24500: ST_TO_ADDR
// for i := 1 to 6 do
24501: LD_ADDR_VAR 0 1
24505: PUSH
24506: DOUBLE
24507: LD_INT 1
24509: DEC
24510: ST_TO_ADDR
24511: LD_INT 6
24513: PUSH
24514: FOR_TO
24515: IFFALSE 24620
// begin uc_nation := nation_nature ;
24517: LD_ADDR_OWVAR 21
24521: PUSH
24522: LD_INT 0
24524: ST_TO_ADDR
// uc_side := 0 ;
24525: LD_ADDR_OWVAR 20
24529: PUSH
24530: LD_INT 0
24532: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24533: LD_ADDR_OWVAR 29
24537: PUSH
24538: LD_INT 12
24540: PUSH
24541: LD_INT 12
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: ST_TO_ADDR
// hc_agressivity := 20 ;
24548: LD_ADDR_OWVAR 35
24552: PUSH
24553: LD_INT 20
24555: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24556: LD_ADDR_OWVAR 28
24560: PUSH
24561: LD_INT 17
24563: ST_TO_ADDR
// hc_gallery :=  ;
24564: LD_ADDR_OWVAR 33
24568: PUSH
24569: LD_STRING 
24571: ST_TO_ADDR
// hc_name :=  ;
24572: LD_ADDR_OWVAR 26
24576: PUSH
24577: LD_STRING 
24579: ST_TO_ADDR
// un := CreateHuman ;
24580: LD_ADDR_VAR 0 2
24584: PUSH
24585: CALL_OW 44
24589: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_INT 1
24597: PPUSH
24598: CALL_OW 51
// tmp := tmp ^ un ;
24602: LD_ADDR_VAR 0 3
24606: PUSH
24607: LD_VAR 0 3
24611: PUSH
24612: LD_VAR 0 2
24616: ADD
24617: ST_TO_ADDR
// end ;
24618: GO 24514
24620: POP
24621: POP
// repeat wait ( 0 0$1 ) ;
24622: LD_INT 35
24624: PPUSH
24625: CALL_OW 67
// for un in tmp do
24629: LD_ADDR_VAR 0 2
24633: PUSH
24634: LD_VAR 0 3
24638: PUSH
24639: FOR_IN
24640: IFFALSE 24714
// begin if IsDead ( un ) then
24642: LD_VAR 0 2
24646: PPUSH
24647: CALL_OW 301
24651: IFFALSE 24671
// begin tmp := tmp diff un ;
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_VAR 0 3
24662: PUSH
24663: LD_VAR 0 2
24667: DIFF
24668: ST_TO_ADDR
// continue ;
24669: GO 24639
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24671: LD_VAR 0 2
24675: PPUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 22
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PPUSH
24693: CALL_OW 69
24697: PPUSH
24698: LD_VAR 0 2
24702: PPUSH
24703: CALL_OW 74
24707: PPUSH
24708: CALL_OW 115
// end ;
24712: GO 24639
24714: POP
24715: POP
// until not tmp ;
24716: LD_VAR 0 3
24720: NOT
24721: IFFALSE 24622
// end ;
24723: PPOPN 3
24725: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24726: LD_EXP 52
24730: PUSH
24731: LD_EXP 77
24735: AND
24736: IFFALSE 24790
24738: GO 24740
24740: DISABLE
// begin ToLua ( displayTroll(); ) ;
24741: LD_STRING displayTroll();
24743: PPUSH
24744: CALL_OW 559
// wait ( 3 3$00 ) ;
24748: LD_INT 6300
24750: PPUSH
24751: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24755: LD_STRING hideTroll();
24757: PPUSH
24758: CALL_OW 559
// wait ( 1 1$00 ) ;
24762: LD_INT 2100
24764: PPUSH
24765: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24769: LD_STRING displayTroll();
24771: PPUSH
24772: CALL_OW 559
// wait ( 1 1$00 ) ;
24776: LD_INT 2100
24778: PPUSH
24779: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24783: LD_STRING hideTroll();
24785: PPUSH
24786: CALL_OW 559
// end ;
24790: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24791: LD_EXP 52
24795: PUSH
24796: LD_EXP 78
24800: AND
24801: IFFALSE 24864
24803: GO 24805
24805: DISABLE
24806: LD_INT 0
24808: PPUSH
// begin p := 0 ;
24809: LD_ADDR_VAR 0 1
24813: PUSH
24814: LD_INT 0
24816: ST_TO_ADDR
// repeat game_speed := 1 ;
24817: LD_ADDR_OWVAR 65
24821: PUSH
24822: LD_INT 1
24824: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24825: LD_INT 35
24827: PPUSH
24828: CALL_OW 67
// p := p + 1 ;
24832: LD_ADDR_VAR 0 1
24836: PUSH
24837: LD_VAR 0 1
24841: PUSH
24842: LD_INT 1
24844: PLUS
24845: ST_TO_ADDR
// until p >= 60 ;
24846: LD_VAR 0 1
24850: PUSH
24851: LD_INT 60
24853: GREATEREQUAL
24854: IFFALSE 24817
// game_speed := 4 ;
24856: LD_ADDR_OWVAR 65
24860: PUSH
24861: LD_INT 4
24863: ST_TO_ADDR
// end ;
24864: PPOPN 1
24866: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24867: LD_EXP 52
24871: PUSH
24872: LD_EXP 79
24876: AND
24877: IFFALSE 25023
24879: GO 24881
24881: DISABLE
24882: LD_INT 0
24884: PPUSH
24885: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24886: LD_ADDR_VAR 0 1
24890: PUSH
24891: LD_INT 22
24893: PUSH
24894: LD_OWVAR 2
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: LD_INT 30
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 30
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PPUSH
24935: CALL_OW 69
24939: ST_TO_ADDR
// if not depot then
24940: LD_VAR 0 1
24944: NOT
24945: IFFALSE 24949
// exit ;
24947: GO 25023
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24949: LD_ADDR_VAR 0 2
24953: PUSH
24954: LD_VAR 0 1
24958: PUSH
24959: LD_INT 1
24961: PPUSH
24962: LD_VAR 0 1
24966: PPUSH
24967: CALL_OW 12
24971: ARRAY
24972: PPUSH
24973: CALL_OW 274
24977: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24978: LD_VAR 0 2
24982: PPUSH
24983: LD_INT 1
24985: PPUSH
24986: LD_INT 0
24988: PPUSH
24989: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24993: LD_VAR 0 2
24997: PPUSH
24998: LD_INT 2
25000: PPUSH
25001: LD_INT 0
25003: PPUSH
25004: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25008: LD_VAR 0 2
25012: PPUSH
25013: LD_INT 3
25015: PPUSH
25016: LD_INT 0
25018: PPUSH
25019: CALL_OW 277
// end ;
25023: PPOPN 2
25025: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25026: LD_EXP 52
25030: PUSH
25031: LD_EXP 80
25035: AND
25036: IFFALSE 25133
25038: GO 25040
25040: DISABLE
25041: LD_INT 0
25043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25044: LD_ADDR_VAR 0 1
25048: PUSH
25049: LD_INT 22
25051: PUSH
25052: LD_OWVAR 2
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 21
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: LD_INT 23
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: LIST
25092: PPUSH
25093: CALL_OW 69
25097: ST_TO_ADDR
// if not tmp then
25098: LD_VAR 0 1
25102: NOT
25103: IFFALSE 25107
// exit ;
25105: GO 25133
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25107: LD_VAR 0 1
25111: PUSH
25112: LD_INT 1
25114: PPUSH
25115: LD_VAR 0 1
25119: PPUSH
25120: CALL_OW 12
25124: ARRAY
25125: PPUSH
25126: LD_INT 200
25128: PPUSH
25129: CALL_OW 234
// end ;
25133: PPOPN 1
25135: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25136: LD_EXP 52
25140: PUSH
25141: LD_EXP 81
25145: AND
25146: IFFALSE 25225
25148: GO 25150
25150: DISABLE
25151: LD_INT 0
25153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25154: LD_ADDR_VAR 0 1
25158: PUSH
25159: LD_INT 22
25161: PUSH
25162: LD_OWVAR 2
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: ST_TO_ADDR
// if not tmp then
25190: LD_VAR 0 1
25194: NOT
25195: IFFALSE 25199
// exit ;
25197: GO 25225
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25199: LD_VAR 0 1
25203: PUSH
25204: LD_INT 1
25206: PPUSH
25207: LD_VAR 0 1
25211: PPUSH
25212: CALL_OW 12
25216: ARRAY
25217: PPUSH
25218: LD_INT 60
25220: PPUSH
25221: CALL_OW 234
// end ;
25225: PPOPN 1
25227: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25228: LD_EXP 52
25232: PUSH
25233: LD_EXP 82
25237: AND
25238: IFFALSE 25337
25240: GO 25242
25242: DISABLE
25243: LD_INT 0
25245: PPUSH
25246: PPUSH
// begin enable ;
25247: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25248: LD_ADDR_VAR 0 1
25252: PUSH
25253: LD_INT 22
25255: PUSH
25256: LD_OWVAR 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 61
25267: PUSH
25268: EMPTY
25269: LIST
25270: PUSH
25271: LD_INT 33
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: PPUSH
25286: CALL_OW 69
25290: ST_TO_ADDR
// if not tmp then
25291: LD_VAR 0 1
25295: NOT
25296: IFFALSE 25300
// exit ;
25298: GO 25337
// for i in tmp do
25300: LD_ADDR_VAR 0 2
25304: PUSH
25305: LD_VAR 0 1
25309: PUSH
25310: FOR_IN
25311: IFFALSE 25335
// if IsControledBy ( i ) then
25313: LD_VAR 0 2
25317: PPUSH
25318: CALL_OW 312
25322: IFFALSE 25333
// ComUnlink ( i ) ;
25324: LD_VAR 0 2
25328: PPUSH
25329: CALL_OW 136
25333: GO 25310
25335: POP
25336: POP
// end ;
25337: PPOPN 2
25339: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25340: LD_EXP 52
25344: PUSH
25345: LD_EXP 83
25349: AND
25350: IFFALSE 25490
25352: GO 25354
25354: DISABLE
25355: LD_INT 0
25357: PPUSH
25358: PPUSH
// begin ToLua ( displayPowell(); ) ;
25359: LD_STRING displayPowell();
25361: PPUSH
25362: CALL_OW 559
// uc_side := 0 ;
25366: LD_ADDR_OWVAR 20
25370: PUSH
25371: LD_INT 0
25373: ST_TO_ADDR
// uc_nation := 2 ;
25374: LD_ADDR_OWVAR 21
25378: PUSH
25379: LD_INT 2
25381: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25382: LD_ADDR_OWVAR 37
25386: PUSH
25387: LD_INT 14
25389: ST_TO_ADDR
// vc_engine := engine_siberite ;
25390: LD_ADDR_OWVAR 39
25394: PUSH
25395: LD_INT 3
25397: ST_TO_ADDR
// vc_control := control_apeman ;
25398: LD_ADDR_OWVAR 38
25402: PUSH
25403: LD_INT 5
25405: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25406: LD_ADDR_OWVAR 40
25410: PUSH
25411: LD_INT 29
25413: ST_TO_ADDR
// un := CreateVehicle ;
25414: LD_ADDR_VAR 0 2
25418: PUSH
25419: CALL_OW 45
25423: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25424: LD_VAR 0 2
25428: PPUSH
25429: LD_INT 1
25431: PPUSH
25432: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25436: LD_INT 35
25438: PPUSH
25439: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25443: LD_VAR 0 2
25447: PPUSH
25448: LD_INT 22
25450: PUSH
25451: LD_OWVAR 2
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PPUSH
25460: CALL_OW 69
25464: PPUSH
25465: LD_VAR 0 2
25469: PPUSH
25470: CALL_OW 74
25474: PPUSH
25475: CALL_OW 115
// until IsDead ( un ) ;
25479: LD_VAR 0 2
25483: PPUSH
25484: CALL_OW 301
25488: IFFALSE 25436
// end ;
25490: PPOPN 2
25492: END
// every 0 0$1 trigger StreamModeActive and sStu do
25493: LD_EXP 52
25497: PUSH
25498: LD_EXP 91
25502: AND
25503: IFFALSE 25519
25505: GO 25507
25507: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25508: LD_STRING displayStucuk();
25510: PPUSH
25511: CALL_OW 559
// ResetFog ;
25515: CALL_OW 335
// end ;
25519: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25520: LD_EXP 52
25524: PUSH
25525: LD_EXP 84
25529: AND
25530: IFFALSE 25671
25532: GO 25534
25534: DISABLE
25535: LD_INT 0
25537: PPUSH
25538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25539: LD_ADDR_VAR 0 2
25543: PUSH
25544: LD_INT 22
25546: PUSH
25547: LD_OWVAR 2
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 21
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PPUSH
25570: CALL_OW 69
25574: ST_TO_ADDR
// if not tmp then
25575: LD_VAR 0 2
25579: NOT
25580: IFFALSE 25584
// exit ;
25582: GO 25671
// un := tmp [ rand ( 1 , tmp ) ] ;
25584: LD_ADDR_VAR 0 1
25588: PUSH
25589: LD_VAR 0 2
25593: PUSH
25594: LD_INT 1
25596: PPUSH
25597: LD_VAR 0 2
25601: PPUSH
25602: CALL_OW 12
25606: ARRAY
25607: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25608: LD_VAR 0 1
25612: PPUSH
25613: LD_INT 0
25615: PPUSH
25616: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25620: LD_VAR 0 1
25624: PPUSH
25625: LD_OWVAR 3
25629: PUSH
25630: LD_VAR 0 1
25634: DIFF
25635: PPUSH
25636: LD_VAR 0 1
25640: PPUSH
25641: CALL_OW 74
25645: PPUSH
25646: CALL_OW 115
// wait ( 0 0$20 ) ;
25650: LD_INT 700
25652: PPUSH
25653: CALL_OW 67
// SetSide ( un , your_side ) ;
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_OWVAR 2
25666: PPUSH
25667: CALL_OW 235
// end ;
25671: PPOPN 2
25673: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25674: LD_EXP 52
25678: PUSH
25679: LD_EXP 85
25683: AND
25684: IFFALSE 25790
25686: GO 25688
25688: DISABLE
25689: LD_INT 0
25691: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25692: LD_ADDR_VAR 0 1
25696: PUSH
25697: LD_INT 22
25699: PUSH
25700: LD_OWVAR 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 30
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 30
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PPUSH
25741: CALL_OW 69
25745: ST_TO_ADDR
// if not depot then
25746: LD_VAR 0 1
25750: NOT
25751: IFFALSE 25755
// exit ;
25753: GO 25790
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25755: LD_VAR 0 1
25759: PUSH
25760: LD_INT 1
25762: ARRAY
25763: PPUSH
25764: CALL_OW 250
25768: PPUSH
25769: LD_VAR 0 1
25773: PUSH
25774: LD_INT 1
25776: ARRAY
25777: PPUSH
25778: CALL_OW 251
25782: PPUSH
25783: LD_INT 70
25785: PPUSH
25786: CALL_OW 495
// end ;
25790: PPOPN 1
25792: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25793: LD_EXP 52
25797: PUSH
25798: LD_EXP 86
25802: AND
25803: IFFALSE 26014
25805: GO 25807
25807: DISABLE
25808: LD_INT 0
25810: PPUSH
25811: PPUSH
25812: PPUSH
25813: PPUSH
25814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25815: LD_ADDR_VAR 0 5
25819: PUSH
25820: LD_INT 22
25822: PUSH
25823: LD_OWVAR 2
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 21
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PPUSH
25846: CALL_OW 69
25850: ST_TO_ADDR
// if not tmp then
25851: LD_VAR 0 5
25855: NOT
25856: IFFALSE 25860
// exit ;
25858: GO 26014
// for i in tmp do
25860: LD_ADDR_VAR 0 1
25864: PUSH
25865: LD_VAR 0 5
25869: PUSH
25870: FOR_IN
25871: IFFALSE 26012
// begin d := rand ( 0 , 5 ) ;
25873: LD_ADDR_VAR 0 4
25877: PUSH
25878: LD_INT 0
25880: PPUSH
25881: LD_INT 5
25883: PPUSH
25884: CALL_OW 12
25888: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25889: LD_ADDR_VAR 0 2
25893: PUSH
25894: LD_VAR 0 1
25898: PPUSH
25899: CALL_OW 250
25903: PPUSH
25904: LD_VAR 0 4
25908: PPUSH
25909: LD_INT 3
25911: PPUSH
25912: LD_INT 12
25914: PPUSH
25915: CALL_OW 12
25919: PPUSH
25920: CALL_OW 272
25924: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_VAR 0 1
25934: PPUSH
25935: CALL_OW 251
25939: PPUSH
25940: LD_VAR 0 4
25944: PPUSH
25945: LD_INT 3
25947: PPUSH
25948: LD_INT 12
25950: PPUSH
25951: CALL_OW 12
25955: PPUSH
25956: CALL_OW 273
25960: ST_TO_ADDR
// if ValidHex ( x , y ) then
25961: LD_VAR 0 2
25965: PPUSH
25966: LD_VAR 0 3
25970: PPUSH
25971: CALL_OW 488
25975: IFFALSE 26010
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25977: LD_VAR 0 1
25981: PPUSH
25982: LD_VAR 0 2
25986: PPUSH
25987: LD_VAR 0 3
25991: PPUSH
25992: LD_INT 3
25994: PPUSH
25995: LD_INT 6
25997: PPUSH
25998: CALL_OW 12
26002: PPUSH
26003: LD_INT 1
26005: PPUSH
26006: CALL_OW 483
// end ;
26010: GO 25870
26012: POP
26013: POP
// end ;
26014: PPOPN 5
26016: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26017: LD_EXP 52
26021: PUSH
26022: LD_EXP 87
26026: AND
26027: IFFALSE 26121
26029: GO 26031
26031: DISABLE
26032: LD_INT 0
26034: PPUSH
26035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26036: LD_ADDR_VAR 0 2
26040: PUSH
26041: LD_INT 22
26043: PUSH
26044: LD_OWVAR 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 32
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 21
26065: PUSH
26066: LD_INT 2
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: PPUSH
26078: CALL_OW 69
26082: ST_TO_ADDR
// if not tmp then
26083: LD_VAR 0 2
26087: NOT
26088: IFFALSE 26092
// exit ;
26090: GO 26121
// for i in tmp do
26092: LD_ADDR_VAR 0 1
26096: PUSH
26097: LD_VAR 0 2
26101: PUSH
26102: FOR_IN
26103: IFFALSE 26119
// SetFuel ( i , 0 ) ;
26105: LD_VAR 0 1
26109: PPUSH
26110: LD_INT 0
26112: PPUSH
26113: CALL_OW 240
26117: GO 26102
26119: POP
26120: POP
// end ;
26121: PPOPN 2
26123: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26124: LD_EXP 52
26128: PUSH
26129: LD_EXP 88
26133: AND
26134: IFFALSE 26200
26136: GO 26138
26138: DISABLE
26139: LD_INT 0
26141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26142: LD_ADDR_VAR 0 1
26146: PUSH
26147: LD_INT 22
26149: PUSH
26150: LD_OWVAR 2
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 30
26161: PUSH
26162: LD_INT 29
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PPUSH
26173: CALL_OW 69
26177: ST_TO_ADDR
// if not tmp then
26178: LD_VAR 0 1
26182: NOT
26183: IFFALSE 26187
// exit ;
26185: GO 26200
// DestroyUnit ( tmp [ 1 ] ) ;
26187: LD_VAR 0 1
26191: PUSH
26192: LD_INT 1
26194: ARRAY
26195: PPUSH
26196: CALL_OW 65
// end ;
26200: PPOPN 1
26202: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26203: LD_EXP 52
26207: PUSH
26208: LD_EXP 90
26212: AND
26213: IFFALSE 26342
26215: GO 26217
26217: DISABLE
26218: LD_INT 0
26220: PPUSH
// begin uc_side := 0 ;
26221: LD_ADDR_OWVAR 20
26225: PUSH
26226: LD_INT 0
26228: ST_TO_ADDR
// uc_nation := nation_arabian ;
26229: LD_ADDR_OWVAR 21
26233: PUSH
26234: LD_INT 2
26236: ST_TO_ADDR
// hc_gallery :=  ;
26237: LD_ADDR_OWVAR 33
26241: PUSH
26242: LD_STRING 
26244: ST_TO_ADDR
// hc_name :=  ;
26245: LD_ADDR_OWVAR 26
26249: PUSH
26250: LD_STRING 
26252: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26253: LD_INT 1
26255: PPUSH
26256: LD_INT 11
26258: PPUSH
26259: LD_INT 10
26261: PPUSH
26262: CALL_OW 380
// un := CreateHuman ;
26266: LD_ADDR_VAR 0 1
26270: PUSH
26271: CALL_OW 44
26275: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26276: LD_VAR 0 1
26280: PPUSH
26281: LD_INT 1
26283: PPUSH
26284: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26288: LD_INT 35
26290: PPUSH
26291: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26295: LD_VAR 0 1
26299: PPUSH
26300: LD_INT 22
26302: PUSH
26303: LD_OWVAR 2
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PPUSH
26312: CALL_OW 69
26316: PPUSH
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL_OW 74
26326: PPUSH
26327: CALL_OW 115
// until IsDead ( un ) ;
26331: LD_VAR 0 1
26335: PPUSH
26336: CALL_OW 301
26340: IFFALSE 26288
// end ;
26342: PPOPN 1
26344: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26345: LD_EXP 52
26349: PUSH
26350: LD_EXP 92
26354: AND
26355: IFFALSE 26367
26357: GO 26359
26359: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26360: LD_STRING earthquake(getX(game), 0, 32)
26362: PPUSH
26363: CALL_OW 559
26367: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26368: LD_EXP 52
26372: PUSH
26373: LD_EXP 93
26377: AND
26378: IFFALSE 26469
26380: GO 26382
26382: DISABLE
26383: LD_INT 0
26385: PPUSH
// begin enable ;
26386: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26387: LD_ADDR_VAR 0 1
26391: PUSH
26392: LD_INT 22
26394: PUSH
26395: LD_OWVAR 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 21
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 33
26416: PUSH
26417: LD_INT 3
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: PPUSH
26429: CALL_OW 69
26433: ST_TO_ADDR
// if not tmp then
26434: LD_VAR 0 1
26438: NOT
26439: IFFALSE 26443
// exit ;
26441: GO 26469
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26443: LD_VAR 0 1
26447: PUSH
26448: LD_INT 1
26450: PPUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 12
26460: ARRAY
26461: PPUSH
26462: LD_INT 1
26464: PPUSH
26465: CALL_OW 234
// end ;
26469: PPOPN 1
26471: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26472: LD_EXP 52
26476: PUSH
26477: LD_EXP 94
26481: AND
26482: IFFALSE 26623
26484: GO 26486
26486: DISABLE
26487: LD_INT 0
26489: PPUSH
26490: PPUSH
26491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26492: LD_ADDR_VAR 0 3
26496: PUSH
26497: LD_INT 22
26499: PUSH
26500: LD_OWVAR 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 25
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PPUSH
26523: CALL_OW 69
26527: ST_TO_ADDR
// if not tmp then
26528: LD_VAR 0 3
26532: NOT
26533: IFFALSE 26537
// exit ;
26535: GO 26623
// un := tmp [ rand ( 1 , tmp ) ] ;
26537: LD_ADDR_VAR 0 2
26541: PUSH
26542: LD_VAR 0 3
26546: PUSH
26547: LD_INT 1
26549: PPUSH
26550: LD_VAR 0 3
26554: PPUSH
26555: CALL_OW 12
26559: ARRAY
26560: ST_TO_ADDR
// if Crawls ( un ) then
26561: LD_VAR 0 2
26565: PPUSH
26566: CALL_OW 318
26570: IFFALSE 26581
// ComWalk ( un ) ;
26572: LD_VAR 0 2
26576: PPUSH
26577: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26581: LD_VAR 0 2
26585: PPUSH
26586: LD_INT 9
26588: PPUSH
26589: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26593: LD_INT 28
26595: PPUSH
26596: LD_OWVAR 2
26600: PPUSH
26601: LD_INT 2
26603: PPUSH
26604: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26608: LD_INT 29
26610: PPUSH
26611: LD_OWVAR 2
26615: PPUSH
26616: LD_INT 2
26618: PPUSH
26619: CALL_OW 322
// end ;
26623: PPOPN 3
26625: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26626: LD_EXP 52
26630: PUSH
26631: LD_EXP 95
26635: AND
26636: IFFALSE 26747
26638: GO 26640
26640: DISABLE
26641: LD_INT 0
26643: PPUSH
26644: PPUSH
26645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26646: LD_ADDR_VAR 0 3
26650: PUSH
26651: LD_INT 22
26653: PUSH
26654: LD_OWVAR 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 25
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PPUSH
26677: CALL_OW 69
26681: ST_TO_ADDR
// if not tmp then
26682: LD_VAR 0 3
26686: NOT
26687: IFFALSE 26691
// exit ;
26689: GO 26747
// un := tmp [ rand ( 1 , tmp ) ] ;
26691: LD_ADDR_VAR 0 2
26695: PUSH
26696: LD_VAR 0 3
26700: PUSH
26701: LD_INT 1
26703: PPUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL_OW 12
26713: ARRAY
26714: ST_TO_ADDR
// if Crawls ( un ) then
26715: LD_VAR 0 2
26719: PPUSH
26720: CALL_OW 318
26724: IFFALSE 26735
// ComWalk ( un ) ;
26726: LD_VAR 0 2
26730: PPUSH
26731: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26735: LD_VAR 0 2
26739: PPUSH
26740: LD_INT 8
26742: PPUSH
26743: CALL_OW 336
// end ;
26747: PPOPN 3
26749: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26750: LD_EXP 52
26754: PUSH
26755: LD_EXP 96
26759: AND
26760: IFFALSE 26904
26762: GO 26764
26764: DISABLE
26765: LD_INT 0
26767: PPUSH
26768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26769: LD_ADDR_VAR 0 2
26773: PUSH
26774: LD_INT 22
26776: PUSH
26777: LD_OWVAR 2
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 21
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 34
26801: PUSH
26802: LD_INT 12
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 34
26811: PUSH
26812: LD_INT 51
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 34
26821: PUSH
26822: LD_INT 32
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: PPUSH
26840: CALL_OW 69
26844: ST_TO_ADDR
// if not tmp then
26845: LD_VAR 0 2
26849: NOT
26850: IFFALSE 26854
// exit ;
26852: GO 26904
// for i in tmp do
26854: LD_ADDR_VAR 0 1
26858: PUSH
26859: LD_VAR 0 2
26863: PUSH
26864: FOR_IN
26865: IFFALSE 26902
// if GetCargo ( i , mat_artifact ) = 0 then
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_INT 4
26874: PPUSH
26875: CALL_OW 289
26879: PUSH
26880: LD_INT 0
26882: EQUAL
26883: IFFALSE 26900
// SetCargo ( i , mat_siberit , 100 ) ;
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_INT 3
26892: PPUSH
26893: LD_INT 100
26895: PPUSH
26896: CALL_OW 290
26900: GO 26864
26902: POP
26903: POP
// end ;
26904: PPOPN 2
26906: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26907: LD_EXP 52
26911: PUSH
26912: LD_EXP 97
26916: AND
26917: IFFALSE 27100
26919: GO 26921
26921: DISABLE
26922: LD_INT 0
26924: PPUSH
26925: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26926: LD_ADDR_VAR 0 2
26930: PUSH
26931: LD_INT 22
26933: PUSH
26934: LD_OWVAR 2
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PPUSH
26943: CALL_OW 69
26947: ST_TO_ADDR
// if not tmp then
26948: LD_VAR 0 2
26952: NOT
26953: IFFALSE 26957
// exit ;
26955: GO 27100
// for i := 1 to 2 do
26957: LD_ADDR_VAR 0 1
26961: PUSH
26962: DOUBLE
26963: LD_INT 1
26965: DEC
26966: ST_TO_ADDR
26967: LD_INT 2
26969: PUSH
26970: FOR_TO
26971: IFFALSE 27098
// begin uc_side := your_side ;
26973: LD_ADDR_OWVAR 20
26977: PUSH
26978: LD_OWVAR 2
26982: ST_TO_ADDR
// uc_nation := nation_american ;
26983: LD_ADDR_OWVAR 21
26987: PUSH
26988: LD_INT 1
26990: ST_TO_ADDR
// vc_chassis := us_morphling ;
26991: LD_ADDR_OWVAR 37
26995: PUSH
26996: LD_INT 5
26998: ST_TO_ADDR
// vc_engine := engine_siberite ;
26999: LD_ADDR_OWVAR 39
27003: PUSH
27004: LD_INT 3
27006: ST_TO_ADDR
// vc_control := control_computer ;
27007: LD_ADDR_OWVAR 38
27011: PUSH
27012: LD_INT 3
27014: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27015: LD_ADDR_OWVAR 40
27019: PUSH
27020: LD_INT 10
27022: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27023: LD_VAR 0 2
27027: PUSH
27028: LD_INT 1
27030: ARRAY
27031: PPUSH
27032: CALL_OW 310
27036: NOT
27037: IFFALSE 27084
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27039: CALL_OW 45
27043: PPUSH
27044: LD_VAR 0 2
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PPUSH
27053: CALL_OW 250
27057: PPUSH
27058: LD_VAR 0 2
27062: PUSH
27063: LD_INT 1
27065: ARRAY
27066: PPUSH
27067: CALL_OW 251
27071: PPUSH
27072: LD_INT 12
27074: PPUSH
27075: LD_INT 1
27077: PPUSH
27078: CALL_OW 50
27082: GO 27096
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27084: CALL_OW 45
27088: PPUSH
27089: LD_INT 1
27091: PPUSH
27092: CALL_OW 51
// end ;
27096: GO 26970
27098: POP
27099: POP
// end ;
27100: PPOPN 2
27102: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27103: LD_EXP 52
27107: PUSH
27108: LD_EXP 98
27112: AND
27113: IFFALSE 27335
27115: GO 27117
27117: DISABLE
27118: LD_INT 0
27120: PPUSH
27121: PPUSH
27122: PPUSH
27123: PPUSH
27124: PPUSH
27125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27126: LD_ADDR_VAR 0 6
27130: PUSH
27131: LD_INT 22
27133: PUSH
27134: LD_OWVAR 2
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 21
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 3
27155: PUSH
27156: LD_INT 23
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: PPUSH
27175: CALL_OW 69
27179: ST_TO_ADDR
// if not tmp then
27180: LD_VAR 0 6
27184: NOT
27185: IFFALSE 27189
// exit ;
27187: GO 27335
// s1 := rand ( 1 , 4 ) ;
27189: LD_ADDR_VAR 0 2
27193: PUSH
27194: LD_INT 1
27196: PPUSH
27197: LD_INT 4
27199: PPUSH
27200: CALL_OW 12
27204: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27205: LD_ADDR_VAR 0 4
27209: PUSH
27210: LD_VAR 0 6
27214: PUSH
27215: LD_INT 1
27217: ARRAY
27218: PPUSH
27219: LD_VAR 0 2
27223: PPUSH
27224: CALL_OW 259
27228: ST_TO_ADDR
// if s1 = 1 then
27229: LD_VAR 0 2
27233: PUSH
27234: LD_INT 1
27236: EQUAL
27237: IFFALSE 27257
// s2 := rand ( 2 , 4 ) else
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_INT 2
27246: PPUSH
27247: LD_INT 4
27249: PPUSH
27250: CALL_OW 12
27254: ST_TO_ADDR
27255: GO 27265
// s2 := 1 ;
27257: LD_ADDR_VAR 0 3
27261: PUSH
27262: LD_INT 1
27264: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27265: LD_ADDR_VAR 0 5
27269: PUSH
27270: LD_VAR 0 6
27274: PUSH
27275: LD_INT 1
27277: ARRAY
27278: PPUSH
27279: LD_VAR 0 3
27283: PPUSH
27284: CALL_OW 259
27288: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27289: LD_VAR 0 6
27293: PUSH
27294: LD_INT 1
27296: ARRAY
27297: PPUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_VAR 0 5
27307: PPUSH
27308: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27312: LD_VAR 0 6
27316: PUSH
27317: LD_INT 1
27319: ARRAY
27320: PPUSH
27321: LD_VAR 0 3
27325: PPUSH
27326: LD_VAR 0 4
27330: PPUSH
27331: CALL_OW 237
// end ;
27335: PPOPN 6
27337: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27338: LD_EXP 52
27342: PUSH
27343: LD_EXP 99
27347: AND
27348: IFFALSE 27427
27350: GO 27352
27352: DISABLE
27353: LD_INT 0
27355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27356: LD_ADDR_VAR 0 1
27360: PUSH
27361: LD_INT 22
27363: PUSH
27364: LD_OWVAR 2
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 30
27375: PUSH
27376: LD_INT 3
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PPUSH
27387: CALL_OW 69
27391: ST_TO_ADDR
// if not tmp then
27392: LD_VAR 0 1
27396: NOT
27397: IFFALSE 27401
// exit ;
27399: GO 27427
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27401: LD_VAR 0 1
27405: PUSH
27406: LD_INT 1
27408: PPUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 12
27418: ARRAY
27419: PPUSH
27420: LD_INT 1
27422: PPUSH
27423: CALL_OW 234
// end ;
27427: PPOPN 1
27429: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27430: LD_EXP 52
27434: PUSH
27435: LD_EXP 100
27439: AND
27440: IFFALSE 27552
27442: GO 27444
27444: DISABLE
27445: LD_INT 0
27447: PPUSH
27448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27449: LD_ADDR_VAR 0 2
27453: PUSH
27454: LD_INT 22
27456: PUSH
27457: LD_OWVAR 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 2
27468: PUSH
27469: LD_INT 30
27471: PUSH
27472: LD_INT 27
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 30
27481: PUSH
27482: LD_INT 26
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 30
27491: PUSH
27492: LD_INT 28
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PPUSH
27509: CALL_OW 69
27513: ST_TO_ADDR
// if not tmp then
27514: LD_VAR 0 2
27518: NOT
27519: IFFALSE 27523
// exit ;
27521: GO 27552
// for i in tmp do
27523: LD_ADDR_VAR 0 1
27527: PUSH
27528: LD_VAR 0 2
27532: PUSH
27533: FOR_IN
27534: IFFALSE 27550
// SetLives ( i , 1 ) ;
27536: LD_VAR 0 1
27540: PPUSH
27541: LD_INT 1
27543: PPUSH
27544: CALL_OW 234
27548: GO 27533
27550: POP
27551: POP
// end ;
27552: PPOPN 2
27554: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27555: LD_EXP 52
27559: PUSH
27560: LD_EXP 101
27564: AND
27565: IFFALSE 27852
27567: GO 27569
27569: DISABLE
27570: LD_INT 0
27572: PPUSH
27573: PPUSH
27574: PPUSH
// begin i := rand ( 1 , 7 ) ;
27575: LD_ADDR_VAR 0 1
27579: PUSH
27580: LD_INT 1
27582: PPUSH
27583: LD_INT 7
27585: PPUSH
27586: CALL_OW 12
27590: ST_TO_ADDR
// case i of 1 :
27591: LD_VAR 0 1
27595: PUSH
27596: LD_INT 1
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27614
27604: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27605: LD_STRING earthquake(getX(game), 0, 32)
27607: PPUSH
27608: CALL_OW 559
27612: GO 27852
27614: LD_INT 2
27616: DOUBLE
27617: EQUAL
27618: IFTRUE 27622
27620: GO 27636
27622: POP
// begin ToLua ( displayStucuk(); ) ;
27623: LD_STRING displayStucuk();
27625: PPUSH
27626: CALL_OW 559
// ResetFog ;
27630: CALL_OW 335
// end ; 3 :
27634: GO 27852
27636: LD_INT 3
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27748
27644: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27645: LD_ADDR_VAR 0 2
27649: PUSH
27650: LD_INT 22
27652: PUSH
27653: LD_OWVAR 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 25
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PPUSH
27676: CALL_OW 69
27680: ST_TO_ADDR
// if not tmp then
27681: LD_VAR 0 2
27685: NOT
27686: IFFALSE 27690
// exit ;
27688: GO 27852
// un := tmp [ rand ( 1 , tmp ) ] ;
27690: LD_ADDR_VAR 0 3
27694: PUSH
27695: LD_VAR 0 2
27699: PUSH
27700: LD_INT 1
27702: PPUSH
27703: LD_VAR 0 2
27707: PPUSH
27708: CALL_OW 12
27712: ARRAY
27713: ST_TO_ADDR
// if Crawls ( un ) then
27714: LD_VAR 0 3
27718: PPUSH
27719: CALL_OW 318
27723: IFFALSE 27734
// ComWalk ( un ) ;
27725: LD_VAR 0 3
27729: PPUSH
27730: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27734: LD_VAR 0 3
27738: PPUSH
27739: LD_INT 8
27741: PPUSH
27742: CALL_OW 336
// end ; 4 :
27746: GO 27852
27748: LD_INT 4
27750: DOUBLE
27751: EQUAL
27752: IFTRUE 27756
27754: GO 27830
27756: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27757: LD_ADDR_VAR 0 2
27761: PUSH
27762: LD_INT 22
27764: PUSH
27765: LD_OWVAR 2
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 30
27776: PUSH
27777: LD_INT 29
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: ST_TO_ADDR
// if not tmp then
27793: LD_VAR 0 2
27797: NOT
27798: IFFALSE 27802
// exit ;
27800: GO 27852
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27802: LD_VAR 0 2
27806: PUSH
27807: LD_INT 1
27809: ARRAY
27810: PPUSH
27811: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27815: LD_VAR 0 2
27819: PUSH
27820: LD_INT 1
27822: ARRAY
27823: PPUSH
27824: CALL_OW 65
// end ; 5 .. 7 :
27828: GO 27852
27830: LD_INT 5
27832: DOUBLE
27833: GREATEREQUAL
27834: IFFALSE 27842
27836: LD_INT 7
27838: DOUBLE
27839: LESSEQUAL
27840: IFTRUE 27844
27842: GO 27851
27844: POP
// StreamSibBomb ; end ;
27845: CALL 24089 0 0
27849: GO 27852
27851: POP
// end ;
27852: PPOPN 3
27854: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27855: LD_EXP 52
27859: PUSH
27860: LD_EXP 102
27864: AND
27865: IFFALSE 28021
27867: GO 27869
27869: DISABLE
27870: LD_INT 0
27872: PPUSH
27873: PPUSH
27874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27875: LD_ADDR_VAR 0 2
27879: PUSH
27880: LD_INT 81
27882: PUSH
27883: LD_OWVAR 2
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: LD_INT 21
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 21
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PPUSH
27924: CALL_OW 69
27928: ST_TO_ADDR
// if not tmp then
27929: LD_VAR 0 2
27933: NOT
27934: IFFALSE 27938
// exit ;
27936: GO 28021
// p := 0 ;
27938: LD_ADDR_VAR 0 3
27942: PUSH
27943: LD_INT 0
27945: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27946: LD_INT 35
27948: PPUSH
27949: CALL_OW 67
// p := p + 1 ;
27953: LD_ADDR_VAR 0 3
27957: PUSH
27958: LD_VAR 0 3
27962: PUSH
27963: LD_INT 1
27965: PLUS
27966: ST_TO_ADDR
// for i in tmp do
27967: LD_ADDR_VAR 0 1
27971: PUSH
27972: LD_VAR 0 2
27976: PUSH
27977: FOR_IN
27978: IFFALSE 28009
// if GetLives ( i ) < 1000 then
27980: LD_VAR 0 1
27984: PPUSH
27985: CALL_OW 256
27989: PUSH
27990: LD_INT 1000
27992: LESS
27993: IFFALSE 28007
// SetLives ( i , 1000 ) ;
27995: LD_VAR 0 1
27999: PPUSH
28000: LD_INT 1000
28002: PPUSH
28003: CALL_OW 234
28007: GO 27977
28009: POP
28010: POP
// until p > 20 ;
28011: LD_VAR 0 3
28015: PUSH
28016: LD_INT 20
28018: GREATER
28019: IFFALSE 27946
// end ;
28021: PPOPN 3
28023: END
// every 0 0$1 trigger StreamModeActive and sTime do
28024: LD_EXP 52
28028: PUSH
28029: LD_EXP 103
28033: AND
28034: IFFALSE 28069
28036: GO 28038
28038: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28039: LD_INT 28
28041: PPUSH
28042: LD_OWVAR 2
28046: PPUSH
28047: LD_INT 2
28049: PPUSH
28050: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28054: LD_INT 30
28056: PPUSH
28057: LD_OWVAR 2
28061: PPUSH
28062: LD_INT 2
28064: PPUSH
28065: CALL_OW 322
// end ;
28069: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28070: LD_EXP 52
28074: PUSH
28075: LD_EXP 104
28079: AND
28080: IFFALSE 28201
28082: GO 28084
28084: DISABLE
28085: LD_INT 0
28087: PPUSH
28088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28089: LD_ADDR_VAR 0 2
28093: PUSH
28094: LD_INT 22
28096: PUSH
28097: LD_OWVAR 2
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 21
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 3
28118: PUSH
28119: LD_INT 23
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: PPUSH
28138: CALL_OW 69
28142: ST_TO_ADDR
// if not tmp then
28143: LD_VAR 0 2
28147: NOT
28148: IFFALSE 28152
// exit ;
28150: GO 28201
// for i in tmp do
28152: LD_ADDR_VAR 0 1
28156: PUSH
28157: LD_VAR 0 2
28161: PUSH
28162: FOR_IN
28163: IFFALSE 28199
// begin if Crawls ( i ) then
28165: LD_VAR 0 1
28169: PPUSH
28170: CALL_OW 318
28174: IFFALSE 28185
// ComWalk ( i ) ;
28176: LD_VAR 0 1
28180: PPUSH
28181: CALL_OW 138
// SetClass ( i , 2 ) ;
28185: LD_VAR 0 1
28189: PPUSH
28190: LD_INT 2
28192: PPUSH
28193: CALL_OW 336
// end ;
28197: GO 28162
28199: POP
28200: POP
// end ;
28201: PPOPN 2
28203: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28204: LD_EXP 52
28208: PUSH
28209: LD_EXP 105
28213: AND
28214: IFFALSE 28502
28216: GO 28218
28218: DISABLE
28219: LD_INT 0
28221: PPUSH
28222: PPUSH
28223: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28224: LD_OWVAR 2
28228: PPUSH
28229: LD_INT 9
28231: PPUSH
28232: LD_INT 1
28234: PPUSH
28235: LD_INT 1
28237: PPUSH
28238: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28242: LD_INT 9
28244: PPUSH
28245: LD_OWVAR 2
28249: PPUSH
28250: CALL_OW 343
// uc_side := 9 ;
28254: LD_ADDR_OWVAR 20
28258: PUSH
28259: LD_INT 9
28261: ST_TO_ADDR
// uc_nation := 2 ;
28262: LD_ADDR_OWVAR 21
28266: PUSH
28267: LD_INT 2
28269: ST_TO_ADDR
// hc_name := Dark Warrior ;
28270: LD_ADDR_OWVAR 26
28274: PUSH
28275: LD_STRING Dark Warrior
28277: ST_TO_ADDR
// hc_gallery :=  ;
28278: LD_ADDR_OWVAR 33
28282: PUSH
28283: LD_STRING 
28285: ST_TO_ADDR
// hc_noskilllimit := true ;
28286: LD_ADDR_OWVAR 76
28290: PUSH
28291: LD_INT 1
28293: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28294: LD_ADDR_OWVAR 31
28298: PUSH
28299: LD_INT 30
28301: PUSH
28302: LD_INT 30
28304: PUSH
28305: LD_INT 30
28307: PUSH
28308: LD_INT 30
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: ST_TO_ADDR
// un := CreateHuman ;
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: CALL_OW 44
28326: ST_TO_ADDR
// hc_noskilllimit := false ;
28327: LD_ADDR_OWVAR 76
28331: PUSH
28332: LD_INT 0
28334: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28335: LD_VAR 0 3
28339: PPUSH
28340: LD_INT 1
28342: PPUSH
28343: CALL_OW 51
// ToLua ( playRanger() ) ;
28347: LD_STRING playRanger()
28349: PPUSH
28350: CALL_OW 559
// p := 0 ;
28354: LD_ADDR_VAR 0 2
28358: PUSH
28359: LD_INT 0
28361: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28362: LD_INT 35
28364: PPUSH
28365: CALL_OW 67
// p := p + 1 ;
28369: LD_ADDR_VAR 0 2
28373: PUSH
28374: LD_VAR 0 2
28378: PUSH
28379: LD_INT 1
28381: PLUS
28382: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28383: LD_VAR 0 3
28387: PPUSH
28388: CALL_OW 256
28392: PUSH
28393: LD_INT 1000
28395: LESS
28396: IFFALSE 28410
// SetLives ( un , 1000 ) ;
28398: LD_VAR 0 3
28402: PPUSH
28403: LD_INT 1000
28405: PPUSH
28406: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28410: LD_VAR 0 3
28414: PPUSH
28415: LD_INT 81
28417: PUSH
28418: LD_OWVAR 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 91
28429: PUSH
28430: LD_VAR 0 3
28434: PUSH
28435: LD_INT 30
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PPUSH
28447: CALL_OW 69
28451: PPUSH
28452: LD_VAR 0 3
28456: PPUSH
28457: CALL_OW 74
28461: PPUSH
28462: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28466: LD_VAR 0 2
28470: PUSH
28471: LD_INT 80
28473: GREATER
28474: PUSH
28475: LD_VAR 0 3
28479: PPUSH
28480: CALL_OW 301
28484: OR
28485: IFFALSE 28362
// if un then
28487: LD_VAR 0 3
28491: IFFALSE 28502
// RemoveUnit ( un ) ;
28493: LD_VAR 0 3
28497: PPUSH
28498: CALL_OW 64
// end ;
28502: PPOPN 3
28504: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28505: LD_EXP 106
28509: IFFALSE 28625
28511: GO 28513
28513: DISABLE
28514: LD_INT 0
28516: PPUSH
28517: PPUSH
28518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28519: LD_ADDR_VAR 0 2
28523: PUSH
28524: LD_INT 81
28526: PUSH
28527: LD_OWVAR 2
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 21
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PPUSH
28550: CALL_OW 69
28554: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28555: LD_STRING playComputer()
28557: PPUSH
28558: CALL_OW 559
// if not tmp then
28562: LD_VAR 0 2
28566: NOT
28567: IFFALSE 28571
// exit ;
28569: GO 28625
// for i in tmp do
28571: LD_ADDR_VAR 0 1
28575: PUSH
28576: LD_VAR 0 2
28580: PUSH
28581: FOR_IN
28582: IFFALSE 28623
// for j := 1 to 4 do
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: DOUBLE
28590: LD_INT 1
28592: DEC
28593: ST_TO_ADDR
28594: LD_INT 4
28596: PUSH
28597: FOR_TO
28598: IFFALSE 28619
// SetSkill ( i , j , 10 ) ;
28600: LD_VAR 0 1
28604: PPUSH
28605: LD_VAR 0 3
28609: PPUSH
28610: LD_INT 10
28612: PPUSH
28613: CALL_OW 237
28617: GO 28597
28619: POP
28620: POP
28621: GO 28581
28623: POP
28624: POP
// end ;
28625: PPOPN 3
28627: END
// every 0 0$1 trigger s30 do var i , tmp ;
28628: LD_EXP 107
28632: IFFALSE 28701
28634: GO 28636
28636: DISABLE
28637: LD_INT 0
28639: PPUSH
28640: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28641: LD_ADDR_VAR 0 2
28645: PUSH
28646: LD_INT 22
28648: PUSH
28649: LD_OWVAR 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PPUSH
28658: CALL_OW 69
28662: ST_TO_ADDR
// if not tmp then
28663: LD_VAR 0 2
28667: NOT
28668: IFFALSE 28672
// exit ;
28670: GO 28701
// for i in tmp do
28672: LD_ADDR_VAR 0 1
28676: PUSH
28677: LD_VAR 0 2
28681: PUSH
28682: FOR_IN
28683: IFFALSE 28699
// SetLives ( i , 300 ) ;
28685: LD_VAR 0 1
28689: PPUSH
28690: LD_INT 300
28692: PPUSH
28693: CALL_OW 234
28697: GO 28682
28699: POP
28700: POP
// end ;
28701: PPOPN 2
28703: END
// every 0 0$1 trigger s60 do var i , tmp ;
28704: LD_EXP 108
28708: IFFALSE 28777
28710: GO 28712
28712: DISABLE
28713: LD_INT 0
28715: PPUSH
28716: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28717: LD_ADDR_VAR 0 2
28721: PUSH
28722: LD_INT 22
28724: PUSH
28725: LD_OWVAR 2
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PPUSH
28734: CALL_OW 69
28738: ST_TO_ADDR
// if not tmp then
28739: LD_VAR 0 2
28743: NOT
28744: IFFALSE 28748
// exit ;
28746: GO 28777
// for i in tmp do
28748: LD_ADDR_VAR 0 1
28752: PUSH
28753: LD_VAR 0 2
28757: PUSH
28758: FOR_IN
28759: IFFALSE 28775
// SetLives ( i , 600 ) ;
28761: LD_VAR 0 1
28765: PPUSH
28766: LD_INT 600
28768: PPUSH
28769: CALL_OW 234
28773: GO 28758
28775: POP
28776: POP
// end ;
28777: PPOPN 2
28779: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28780: LD_INT 0
28782: PPUSH
// case cmd of 301 :
28783: LD_VAR 0 1
28787: PUSH
28788: LD_INT 301
28790: DOUBLE
28791: EQUAL
28792: IFTRUE 28796
28794: GO 28828
28796: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28797: LD_VAR 0 6
28801: PPUSH
28802: LD_VAR 0 7
28806: PPUSH
28807: LD_VAR 0 8
28811: PPUSH
28812: LD_VAR 0 4
28816: PPUSH
28817: LD_VAR 0 5
28821: PPUSH
28822: CALL 30029 0 5
28826: GO 28949
28828: LD_INT 302
28830: DOUBLE
28831: EQUAL
28832: IFTRUE 28836
28834: GO 28873
28836: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28837: LD_VAR 0 6
28841: PPUSH
28842: LD_VAR 0 7
28846: PPUSH
28847: LD_VAR 0 8
28851: PPUSH
28852: LD_VAR 0 9
28856: PPUSH
28857: LD_VAR 0 4
28861: PPUSH
28862: LD_VAR 0 5
28866: PPUSH
28867: CALL 30120 0 6
28871: GO 28949
28873: LD_INT 303
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28918
28881: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28882: LD_VAR 0 6
28886: PPUSH
28887: LD_VAR 0 7
28891: PPUSH
28892: LD_VAR 0 8
28896: PPUSH
28897: LD_VAR 0 9
28901: PPUSH
28902: LD_VAR 0 4
28906: PPUSH
28907: LD_VAR 0 5
28911: PPUSH
28912: CALL 28954 0 6
28916: GO 28949
28918: LD_INT 304
28920: DOUBLE
28921: EQUAL
28922: IFTRUE 28926
28924: GO 28948
28926: POP
// hHackTeleport ( unit , x , y ) ; end ;
28927: LD_VAR 0 2
28931: PPUSH
28932: LD_VAR 0 4
28936: PPUSH
28937: LD_VAR 0 5
28941: PPUSH
28942: CALL 30713 0 3
28946: GO 28949
28948: POP
// end ;
28949: LD_VAR 0 12
28953: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28954: LD_INT 0
28956: PPUSH
28957: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28958: LD_VAR 0 1
28962: PUSH
28963: LD_INT 1
28965: LESS
28966: PUSH
28967: LD_VAR 0 1
28971: PUSH
28972: LD_INT 3
28974: GREATER
28975: OR
28976: PUSH
28977: LD_VAR 0 5
28981: PPUSH
28982: LD_VAR 0 6
28986: PPUSH
28987: CALL_OW 428
28991: OR
28992: IFFALSE 28996
// exit ;
28994: GO 29716
// uc_side := your_side ;
28996: LD_ADDR_OWVAR 20
29000: PUSH
29001: LD_OWVAR 2
29005: ST_TO_ADDR
// uc_nation := nation ;
29006: LD_ADDR_OWVAR 21
29010: PUSH
29011: LD_VAR 0 1
29015: ST_TO_ADDR
// bc_level = 1 ;
29016: LD_ADDR_OWVAR 43
29020: PUSH
29021: LD_INT 1
29023: ST_TO_ADDR
// case btype of 1 :
29024: LD_VAR 0 2
29028: PUSH
29029: LD_INT 1
29031: DOUBLE
29032: EQUAL
29033: IFTRUE 29037
29035: GO 29048
29037: POP
// bc_type := b_depot ; 2 :
29038: LD_ADDR_OWVAR 42
29042: PUSH
29043: LD_INT 0
29045: ST_TO_ADDR
29046: GO 29660
29048: LD_INT 2
29050: DOUBLE
29051: EQUAL
29052: IFTRUE 29056
29054: GO 29067
29056: POP
// bc_type := b_warehouse ; 3 :
29057: LD_ADDR_OWVAR 42
29061: PUSH
29062: LD_INT 1
29064: ST_TO_ADDR
29065: GO 29660
29067: LD_INT 3
29069: DOUBLE
29070: EQUAL
29071: IFTRUE 29075
29073: GO 29086
29075: POP
// bc_type := b_lab ; 4 .. 9 :
29076: LD_ADDR_OWVAR 42
29080: PUSH
29081: LD_INT 6
29083: ST_TO_ADDR
29084: GO 29660
29086: LD_INT 4
29088: DOUBLE
29089: GREATEREQUAL
29090: IFFALSE 29098
29092: LD_INT 9
29094: DOUBLE
29095: LESSEQUAL
29096: IFTRUE 29100
29098: GO 29152
29100: POP
// begin bc_type := b_lab_half ;
29101: LD_ADDR_OWVAR 42
29105: PUSH
29106: LD_INT 7
29108: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29109: LD_ADDR_OWVAR 44
29113: PUSH
29114: LD_INT 10
29116: PUSH
29117: LD_INT 11
29119: PUSH
29120: LD_INT 12
29122: PUSH
29123: LD_INT 15
29125: PUSH
29126: LD_INT 14
29128: PUSH
29129: LD_INT 13
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: PUSH
29140: LD_VAR 0 2
29144: PUSH
29145: LD_INT 3
29147: MINUS
29148: ARRAY
29149: ST_TO_ADDR
// end ; 10 .. 13 :
29150: GO 29660
29152: LD_INT 10
29154: DOUBLE
29155: GREATEREQUAL
29156: IFFALSE 29164
29158: LD_INT 13
29160: DOUBLE
29161: LESSEQUAL
29162: IFTRUE 29166
29164: GO 29243
29166: POP
// begin bc_type := b_lab_full ;
29167: LD_ADDR_OWVAR 42
29171: PUSH
29172: LD_INT 8
29174: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29175: LD_ADDR_OWVAR 44
29179: PUSH
29180: LD_INT 10
29182: PUSH
29183: LD_INT 12
29185: PUSH
29186: LD_INT 14
29188: PUSH
29189: LD_INT 13
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: PUSH
29198: LD_VAR 0 2
29202: PUSH
29203: LD_INT 9
29205: MINUS
29206: ARRAY
29207: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29208: LD_ADDR_OWVAR 45
29212: PUSH
29213: LD_INT 11
29215: PUSH
29216: LD_INT 15
29218: PUSH
29219: LD_INT 12
29221: PUSH
29222: LD_INT 15
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: PUSH
29231: LD_VAR 0 2
29235: PUSH
29236: LD_INT 9
29238: MINUS
29239: ARRAY
29240: ST_TO_ADDR
// end ; 14 :
29241: GO 29660
29243: LD_INT 14
29245: DOUBLE
29246: EQUAL
29247: IFTRUE 29251
29249: GO 29262
29251: POP
// bc_type := b_workshop ; 15 :
29252: LD_ADDR_OWVAR 42
29256: PUSH
29257: LD_INT 2
29259: ST_TO_ADDR
29260: GO 29660
29262: LD_INT 15
29264: DOUBLE
29265: EQUAL
29266: IFTRUE 29270
29268: GO 29281
29270: POP
// bc_type := b_factory ; 16 :
29271: LD_ADDR_OWVAR 42
29275: PUSH
29276: LD_INT 3
29278: ST_TO_ADDR
29279: GO 29660
29281: LD_INT 16
29283: DOUBLE
29284: EQUAL
29285: IFTRUE 29289
29287: GO 29300
29289: POP
// bc_type := b_ext_gun ; 17 :
29290: LD_ADDR_OWVAR 42
29294: PUSH
29295: LD_INT 17
29297: ST_TO_ADDR
29298: GO 29660
29300: LD_INT 17
29302: DOUBLE
29303: EQUAL
29304: IFTRUE 29308
29306: GO 29336
29308: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29309: LD_ADDR_OWVAR 42
29313: PUSH
29314: LD_INT 19
29316: PUSH
29317: LD_INT 23
29319: PUSH
29320: LD_INT 19
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: LIST
29327: PUSH
29328: LD_VAR 0 1
29332: ARRAY
29333: ST_TO_ADDR
29334: GO 29660
29336: LD_INT 18
29338: DOUBLE
29339: EQUAL
29340: IFTRUE 29344
29342: GO 29355
29344: POP
// bc_type := b_ext_radar ; 19 :
29345: LD_ADDR_OWVAR 42
29349: PUSH
29350: LD_INT 20
29352: ST_TO_ADDR
29353: GO 29660
29355: LD_INT 19
29357: DOUBLE
29358: EQUAL
29359: IFTRUE 29363
29361: GO 29374
29363: POP
// bc_type := b_ext_radio ; 20 :
29364: LD_ADDR_OWVAR 42
29368: PUSH
29369: LD_INT 22
29371: ST_TO_ADDR
29372: GO 29660
29374: LD_INT 20
29376: DOUBLE
29377: EQUAL
29378: IFTRUE 29382
29380: GO 29393
29382: POP
// bc_type := b_ext_siberium ; 21 :
29383: LD_ADDR_OWVAR 42
29387: PUSH
29388: LD_INT 21
29390: ST_TO_ADDR
29391: GO 29660
29393: LD_INT 21
29395: DOUBLE
29396: EQUAL
29397: IFTRUE 29401
29399: GO 29412
29401: POP
// bc_type := b_ext_computer ; 22 :
29402: LD_ADDR_OWVAR 42
29406: PUSH
29407: LD_INT 24
29409: ST_TO_ADDR
29410: GO 29660
29412: LD_INT 22
29414: DOUBLE
29415: EQUAL
29416: IFTRUE 29420
29418: GO 29431
29420: POP
// bc_type := b_ext_track ; 23 :
29421: LD_ADDR_OWVAR 42
29425: PUSH
29426: LD_INT 16
29428: ST_TO_ADDR
29429: GO 29660
29431: LD_INT 23
29433: DOUBLE
29434: EQUAL
29435: IFTRUE 29439
29437: GO 29450
29439: POP
// bc_type := b_ext_laser ; 24 :
29440: LD_ADDR_OWVAR 42
29444: PUSH
29445: LD_INT 25
29447: ST_TO_ADDR
29448: GO 29660
29450: LD_INT 24
29452: DOUBLE
29453: EQUAL
29454: IFTRUE 29458
29456: GO 29469
29458: POP
// bc_type := b_control_tower ; 25 :
29459: LD_ADDR_OWVAR 42
29463: PUSH
29464: LD_INT 36
29466: ST_TO_ADDR
29467: GO 29660
29469: LD_INT 25
29471: DOUBLE
29472: EQUAL
29473: IFTRUE 29477
29475: GO 29488
29477: POP
// bc_type := b_breastwork ; 26 :
29478: LD_ADDR_OWVAR 42
29482: PUSH
29483: LD_INT 31
29485: ST_TO_ADDR
29486: GO 29660
29488: LD_INT 26
29490: DOUBLE
29491: EQUAL
29492: IFTRUE 29496
29494: GO 29507
29496: POP
// bc_type := b_bunker ; 27 :
29497: LD_ADDR_OWVAR 42
29501: PUSH
29502: LD_INT 32
29504: ST_TO_ADDR
29505: GO 29660
29507: LD_INT 27
29509: DOUBLE
29510: EQUAL
29511: IFTRUE 29515
29513: GO 29526
29515: POP
// bc_type := b_turret ; 28 :
29516: LD_ADDR_OWVAR 42
29520: PUSH
29521: LD_INT 33
29523: ST_TO_ADDR
29524: GO 29660
29526: LD_INT 28
29528: DOUBLE
29529: EQUAL
29530: IFTRUE 29534
29532: GO 29545
29534: POP
// bc_type := b_armoury ; 29 :
29535: LD_ADDR_OWVAR 42
29539: PUSH
29540: LD_INT 4
29542: ST_TO_ADDR
29543: GO 29660
29545: LD_INT 29
29547: DOUBLE
29548: EQUAL
29549: IFTRUE 29553
29551: GO 29564
29553: POP
// bc_type := b_barracks ; 30 :
29554: LD_ADDR_OWVAR 42
29558: PUSH
29559: LD_INT 5
29561: ST_TO_ADDR
29562: GO 29660
29564: LD_INT 30
29566: DOUBLE
29567: EQUAL
29568: IFTRUE 29572
29570: GO 29583
29572: POP
// bc_type := b_solar_power ; 31 :
29573: LD_ADDR_OWVAR 42
29577: PUSH
29578: LD_INT 27
29580: ST_TO_ADDR
29581: GO 29660
29583: LD_INT 31
29585: DOUBLE
29586: EQUAL
29587: IFTRUE 29591
29589: GO 29602
29591: POP
// bc_type := b_oil_power ; 32 :
29592: LD_ADDR_OWVAR 42
29596: PUSH
29597: LD_INT 26
29599: ST_TO_ADDR
29600: GO 29660
29602: LD_INT 32
29604: DOUBLE
29605: EQUAL
29606: IFTRUE 29610
29608: GO 29621
29610: POP
// bc_type := b_siberite_power ; 33 :
29611: LD_ADDR_OWVAR 42
29615: PUSH
29616: LD_INT 28
29618: ST_TO_ADDR
29619: GO 29660
29621: LD_INT 33
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29640
29629: POP
// bc_type := b_oil_mine ; 34 :
29630: LD_ADDR_OWVAR 42
29634: PUSH
29635: LD_INT 29
29637: ST_TO_ADDR
29638: GO 29660
29640: LD_INT 34
29642: DOUBLE
29643: EQUAL
29644: IFTRUE 29648
29646: GO 29659
29648: POP
// bc_type := b_siberite_mine ; end ;
29649: LD_ADDR_OWVAR 42
29653: PUSH
29654: LD_INT 30
29656: ST_TO_ADDR
29657: GO 29660
29659: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29660: LD_ADDR_VAR 0 8
29664: PUSH
29665: LD_VAR 0 5
29669: PPUSH
29670: LD_VAR 0 6
29674: PPUSH
29675: LD_VAR 0 3
29679: PPUSH
29680: CALL_OW 47
29684: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29685: LD_OWVAR 42
29689: PUSH
29690: LD_INT 32
29692: PUSH
29693: LD_INT 33
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: IN
29700: IFFALSE 29716
// PlaceWeaponTurret ( b , weapon ) ;
29702: LD_VAR 0 8
29706: PPUSH
29707: LD_VAR 0 4
29711: PPUSH
29712: CALL_OW 431
// end ;
29716: LD_VAR 0 7
29720: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29721: LD_INT 0
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29727: LD_ADDR_VAR 0 4
29731: PUSH
29732: LD_INT 22
29734: PUSH
29735: LD_OWVAR 2
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 30
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 30
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PPUSH
29776: CALL_OW 69
29780: ST_TO_ADDR
// if not tmp then
29781: LD_VAR 0 4
29785: NOT
29786: IFFALSE 29790
// exit ;
29788: GO 29849
// for i in tmp do
29790: LD_ADDR_VAR 0 2
29794: PUSH
29795: LD_VAR 0 4
29799: PUSH
29800: FOR_IN
29801: IFFALSE 29847
// for j = 1 to 3 do
29803: LD_ADDR_VAR 0 3
29807: PUSH
29808: DOUBLE
29809: LD_INT 1
29811: DEC
29812: ST_TO_ADDR
29813: LD_INT 3
29815: PUSH
29816: FOR_TO
29817: IFFALSE 29843
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29819: LD_VAR 0 2
29823: PPUSH
29824: CALL_OW 274
29828: PPUSH
29829: LD_VAR 0 3
29833: PPUSH
29834: LD_INT 99999
29836: PPUSH
29837: CALL_OW 277
29841: GO 29816
29843: POP
29844: POP
29845: GO 29800
29847: POP
29848: POP
// end ;
29849: LD_VAR 0 1
29853: RET
// export function hHackSetLevel10 ; var i , j ; begin
29854: LD_INT 0
29856: PPUSH
29857: PPUSH
29858: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29859: LD_ADDR_VAR 0 2
29863: PUSH
29864: LD_INT 21
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PPUSH
29874: CALL_OW 69
29878: PUSH
29879: FOR_IN
29880: IFFALSE 29932
// if IsSelected ( i ) then
29882: LD_VAR 0 2
29886: PPUSH
29887: CALL_OW 306
29891: IFFALSE 29930
// begin for j := 1 to 4 do
29893: LD_ADDR_VAR 0 3
29897: PUSH
29898: DOUBLE
29899: LD_INT 1
29901: DEC
29902: ST_TO_ADDR
29903: LD_INT 4
29905: PUSH
29906: FOR_TO
29907: IFFALSE 29928
// SetSkill ( i , j , 10 ) ;
29909: LD_VAR 0 2
29913: PPUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: LD_INT 10
29921: PPUSH
29922: CALL_OW 237
29926: GO 29906
29928: POP
29929: POP
// end ;
29930: GO 29879
29932: POP
29933: POP
// end ;
29934: LD_VAR 0 1
29938: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29939: LD_INT 0
29941: PPUSH
29942: PPUSH
29943: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29944: LD_ADDR_VAR 0 2
29948: PUSH
29949: LD_INT 22
29951: PUSH
29952: LD_OWVAR 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 21
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 69
29979: PUSH
29980: FOR_IN
29981: IFFALSE 30022
// begin for j := 1 to 4 do
29983: LD_ADDR_VAR 0 3
29987: PUSH
29988: DOUBLE
29989: LD_INT 1
29991: DEC
29992: ST_TO_ADDR
29993: LD_INT 4
29995: PUSH
29996: FOR_TO
29997: IFFALSE 30018
// SetSkill ( i , j , 10 ) ;
29999: LD_VAR 0 2
30003: PPUSH
30004: LD_VAR 0 3
30008: PPUSH
30009: LD_INT 10
30011: PPUSH
30012: CALL_OW 237
30016: GO 29996
30018: POP
30019: POP
// end ;
30020: GO 29980
30022: POP
30023: POP
// end ;
30024: LD_VAR 0 1
30028: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30029: LD_INT 0
30031: PPUSH
// uc_side := your_side ;
30032: LD_ADDR_OWVAR 20
30036: PUSH
30037: LD_OWVAR 2
30041: ST_TO_ADDR
// uc_nation := nation ;
30042: LD_ADDR_OWVAR 21
30046: PUSH
30047: LD_VAR 0 1
30051: ST_TO_ADDR
// InitHc ;
30052: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30056: LD_INT 0
30058: PPUSH
30059: LD_VAR 0 2
30063: PPUSH
30064: LD_VAR 0 3
30068: PPUSH
30069: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30073: LD_VAR 0 4
30077: PPUSH
30078: LD_VAR 0 5
30082: PPUSH
30083: CALL_OW 428
30087: PUSH
30088: LD_INT 0
30090: EQUAL
30091: IFFALSE 30115
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30093: CALL_OW 44
30097: PPUSH
30098: LD_VAR 0 4
30102: PPUSH
30103: LD_VAR 0 5
30107: PPUSH
30108: LD_INT 1
30110: PPUSH
30111: CALL_OW 48
// end ;
30115: LD_VAR 0 6
30119: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30120: LD_INT 0
30122: PPUSH
30123: PPUSH
// uc_side := your_side ;
30124: LD_ADDR_OWVAR 20
30128: PUSH
30129: LD_OWVAR 2
30133: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30134: LD_VAR 0 1
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: LD_INT 2
30144: PUSH
30145: LD_INT 3
30147: PUSH
30148: LD_INT 4
30150: PUSH
30151: LD_INT 5
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: IN
30161: IFFALSE 30173
// uc_nation := nation_american else
30163: LD_ADDR_OWVAR 21
30167: PUSH
30168: LD_INT 1
30170: ST_TO_ADDR
30171: GO 30216
// if chassis in [ 11 , 12 , 13 , 14 ] then
30173: LD_VAR 0 1
30177: PUSH
30178: LD_INT 11
30180: PUSH
30181: LD_INT 12
30183: PUSH
30184: LD_INT 13
30186: PUSH
30187: LD_INT 14
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: IN
30196: IFFALSE 30208
// uc_nation := nation_arabian else
30198: LD_ADDR_OWVAR 21
30202: PUSH
30203: LD_INT 2
30205: ST_TO_ADDR
30206: GO 30216
// uc_nation := nation_russian ;
30208: LD_ADDR_OWVAR 21
30212: PUSH
30213: LD_INT 3
30215: ST_TO_ADDR
// vc_chassis := chassis ;
30216: LD_ADDR_OWVAR 37
30220: PUSH
30221: LD_VAR 0 1
30225: ST_TO_ADDR
// vc_engine := engine ;
30226: LD_ADDR_OWVAR 39
30230: PUSH
30231: LD_VAR 0 2
30235: ST_TO_ADDR
// vc_control := control ;
30236: LD_ADDR_OWVAR 38
30240: PUSH
30241: LD_VAR 0 3
30245: ST_TO_ADDR
// vc_weapon := weapon ;
30246: LD_ADDR_OWVAR 40
30250: PUSH
30251: LD_VAR 0 4
30255: ST_TO_ADDR
// un := CreateVehicle ;
30256: LD_ADDR_VAR 0 8
30260: PUSH
30261: CALL_OW 45
30265: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30266: LD_VAR 0 8
30270: PPUSH
30271: LD_INT 0
30273: PPUSH
30274: LD_INT 5
30276: PPUSH
30277: CALL_OW 12
30281: PPUSH
30282: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30286: LD_VAR 0 8
30290: PPUSH
30291: LD_VAR 0 5
30295: PPUSH
30296: LD_VAR 0 6
30300: PPUSH
30301: LD_INT 1
30303: PPUSH
30304: CALL_OW 48
// end ;
30308: LD_VAR 0 7
30312: RET
// export hInvincible ; every 1 do
30313: GO 30315
30315: DISABLE
// hInvincible := [ ] ;
30316: LD_ADDR_EXP 109
30320: PUSH
30321: EMPTY
30322: ST_TO_ADDR
30323: END
// every 10 do var i ;
30324: GO 30326
30326: DISABLE
30327: LD_INT 0
30329: PPUSH
// begin enable ;
30330: ENABLE
// if not hInvincible then
30331: LD_EXP 109
30335: NOT
30336: IFFALSE 30340
// exit ;
30338: GO 30384
// for i in hInvincible do
30340: LD_ADDR_VAR 0 1
30344: PUSH
30345: LD_EXP 109
30349: PUSH
30350: FOR_IN
30351: IFFALSE 30382
// if GetLives ( i ) < 1000 then
30353: LD_VAR 0 1
30357: PPUSH
30358: CALL_OW 256
30362: PUSH
30363: LD_INT 1000
30365: LESS
30366: IFFALSE 30380
// SetLives ( i , 1000 ) ;
30368: LD_VAR 0 1
30372: PPUSH
30373: LD_INT 1000
30375: PPUSH
30376: CALL_OW 234
30380: GO 30350
30382: POP
30383: POP
// end ;
30384: PPOPN 1
30386: END
// export function hHackInvincible ; var i ; begin
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30391: LD_ADDR_VAR 0 2
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: LD_INT 21
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 21
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: PPUSH
30424: CALL_OW 69
30428: PUSH
30429: FOR_IN
30430: IFFALSE 30491
// if IsSelected ( i ) then
30432: LD_VAR 0 2
30436: PPUSH
30437: CALL_OW 306
30441: IFFALSE 30489
// begin if i in hInvincible then
30443: LD_VAR 0 2
30447: PUSH
30448: LD_EXP 109
30452: IN
30453: IFFALSE 30473
// hInvincible := hInvincible diff i else
30455: LD_ADDR_EXP 109
30459: PUSH
30460: LD_EXP 109
30464: PUSH
30465: LD_VAR 0 2
30469: DIFF
30470: ST_TO_ADDR
30471: GO 30489
// hInvincible := hInvincible union i ;
30473: LD_ADDR_EXP 109
30477: PUSH
30478: LD_EXP 109
30482: PUSH
30483: LD_VAR 0 2
30487: UNION
30488: ST_TO_ADDR
// end ;
30489: GO 30429
30491: POP
30492: POP
// end ;
30493: LD_VAR 0 1
30497: RET
// export function hHackInvisible ; var i , j ; begin
30498: LD_INT 0
30500: PPUSH
30501: PPUSH
30502: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30503: LD_ADDR_VAR 0 2
30507: PUSH
30508: LD_INT 21
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PPUSH
30518: CALL_OW 69
30522: PUSH
30523: FOR_IN
30524: IFFALSE 30548
// if IsSelected ( i ) then
30526: LD_VAR 0 2
30530: PPUSH
30531: CALL_OW 306
30535: IFFALSE 30546
// ComForceInvisible ( i ) ;
30537: LD_VAR 0 2
30541: PPUSH
30542: CALL_OW 496
30546: GO 30523
30548: POP
30549: POP
// end ;
30550: LD_VAR 0 1
30554: RET
// export function hHackChangeYourSide ; begin
30555: LD_INT 0
30557: PPUSH
// if your_side = 8 then
30558: LD_OWVAR 2
30562: PUSH
30563: LD_INT 8
30565: EQUAL
30566: IFFALSE 30578
// your_side := 0 else
30568: LD_ADDR_OWVAR 2
30572: PUSH
30573: LD_INT 0
30575: ST_TO_ADDR
30576: GO 30592
// your_side := your_side + 1 ;
30578: LD_ADDR_OWVAR 2
30582: PUSH
30583: LD_OWVAR 2
30587: PUSH
30588: LD_INT 1
30590: PLUS
30591: ST_TO_ADDR
// end ;
30592: LD_VAR 0 1
30596: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30597: LD_INT 0
30599: PPUSH
30600: PPUSH
30601: PPUSH
// for i in all_units do
30602: LD_ADDR_VAR 0 2
30606: PUSH
30607: LD_OWVAR 3
30611: PUSH
30612: FOR_IN
30613: IFFALSE 30691
// if IsSelected ( i ) then
30615: LD_VAR 0 2
30619: PPUSH
30620: CALL_OW 306
30624: IFFALSE 30689
// begin j := GetSide ( i ) ;
30626: LD_ADDR_VAR 0 3
30630: PUSH
30631: LD_VAR 0 2
30635: PPUSH
30636: CALL_OW 255
30640: ST_TO_ADDR
// if j = 8 then
30641: LD_VAR 0 3
30645: PUSH
30646: LD_INT 8
30648: EQUAL
30649: IFFALSE 30661
// j := 0 else
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: LD_INT 0
30658: ST_TO_ADDR
30659: GO 30675
// j := j + 1 ;
30661: LD_ADDR_VAR 0 3
30665: PUSH
30666: LD_VAR 0 3
30670: PUSH
30671: LD_INT 1
30673: PLUS
30674: ST_TO_ADDR
// SetSide ( i , j ) ;
30675: LD_VAR 0 2
30679: PPUSH
30680: LD_VAR 0 3
30684: PPUSH
30685: CALL_OW 235
// end ;
30689: GO 30612
30691: POP
30692: POP
// end ;
30693: LD_VAR 0 1
30697: RET
// export function hHackFog ; begin
30698: LD_INT 0
30700: PPUSH
// FogOff ( true ) ;
30701: LD_INT 1
30703: PPUSH
30704: CALL_OW 344
// end ;
30708: LD_VAR 0 1
30712: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30713: LD_INT 0
30715: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30716: LD_VAR 0 1
30720: PPUSH
30721: LD_VAR 0 2
30725: PPUSH
30726: LD_VAR 0 3
30730: PPUSH
30731: LD_INT 1
30733: PPUSH
30734: LD_INT 1
30736: PPUSH
30737: CALL_OW 483
// CenterOnXY ( x , y ) ;
30741: LD_VAR 0 2
30745: PPUSH
30746: LD_VAR 0 3
30750: PPUSH
30751: CALL_OW 84
// end ; end_of_file
30755: LD_VAR 0 4
30759: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
30760: LD_VAR 0 1
30764: PUSH
30765: LD_INT 200
30767: DOUBLE
30768: GREATEREQUAL
30769: IFFALSE 30777
30771: LD_INT 299
30773: DOUBLE
30774: LESSEQUAL
30775: IFTRUE 30779
30777: GO 30811
30779: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
30780: LD_VAR 0 1
30784: PPUSH
30785: LD_VAR 0 2
30789: PPUSH
30790: LD_VAR 0 3
30794: PPUSH
30795: LD_VAR 0 4
30799: PPUSH
30800: LD_VAR 0 5
30804: PPUSH
30805: CALL 31045 0 5
30809: GO 30888
30811: LD_INT 300
30813: DOUBLE
30814: GREATEREQUAL
30815: IFFALSE 30823
30817: LD_INT 399
30819: DOUBLE
30820: LESSEQUAL
30821: IFTRUE 30825
30823: GO 30887
30825: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
30826: LD_VAR 0 1
30830: PPUSH
30831: LD_VAR 0 2
30835: PPUSH
30836: LD_VAR 0 3
30840: PPUSH
30841: LD_VAR 0 4
30845: PPUSH
30846: LD_VAR 0 5
30850: PPUSH
30851: LD_VAR 0 6
30855: PPUSH
30856: LD_VAR 0 7
30860: PPUSH
30861: LD_VAR 0 8
30865: PPUSH
30866: LD_VAR 0 9
30870: PPUSH
30871: LD_VAR 0 10
30875: PPUSH
30876: LD_VAR 0 11
30880: PPUSH
30881: CALL 28780 0 11
30885: GO 30888
30887: POP
// end ;
30888: PPOPN 11
30890: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
30891: LD_VAR 0 1
30895: PPUSH
30896: LD_VAR 0 2
30900: PPUSH
30901: LD_VAR 0 3
30905: PPUSH
30906: LD_VAR 0 4
30910: PPUSH
30911: LD_VAR 0 5
30915: PPUSH
30916: CALL 31037 0 5
// end ; end_of_file
30920: PPOPN 5
30922: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30923: LD_INT 0
30925: PPUSH
30926: PPUSH
30927: PPUSH
30928: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 264
30938: PUSH
30939: LD_EXP 126
30943: EQUAL
30944: IFFALSE 31016
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30946: LD_INT 68
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 255
30958: PPUSH
30959: CALL_OW 321
30963: PUSH
30964: LD_INT 2
30966: EQUAL
30967: IFFALSE 30979
// eff := 70 else
30969: LD_ADDR_VAR 0 4
30973: PUSH
30974: LD_INT 70
30976: ST_TO_ADDR
30977: GO 30987
// eff := 30 ;
30979: LD_ADDR_VAR 0 4
30983: PUSH
30984: LD_INT 30
30986: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 250
30996: PPUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 251
31006: PPUSH
31007: LD_VAR 0 4
31011: PPUSH
31012: CALL_OW 495
// end ; end ;
31016: LD_VAR 0 2
31020: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31021: LD_INT 0
31023: PPUSH
// end ;
31024: LD_VAR 0 4
31028: RET
// export function SOS_Command ( cmd ) ; begin
31029: LD_INT 0
31031: PPUSH
// end ;
31032: LD_VAR 0 2
31036: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31037: LD_INT 0
31039: PPUSH
// end ;
31040: LD_VAR 0 6
31044: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31045: LD_INT 0
31047: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31048: LD_VAR 0 1
31052: PUSH
31053: LD_INT 250
31055: EQUAL
31056: PUSH
31057: LD_VAR 0 2
31061: PPUSH
31062: CALL_OW 264
31066: PUSH
31067: LD_EXP 129
31071: EQUAL
31072: AND
31073: IFFALSE 31094
// MinerPlaceMine ( unit , x , y ) ;
31075: LD_VAR 0 2
31079: PPUSH
31080: LD_VAR 0 4
31084: PPUSH
31085: LD_VAR 0 5
31089: PPUSH
31090: CALL 33443 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31094: LD_VAR 0 1
31098: PUSH
31099: LD_INT 251
31101: EQUAL
31102: PUSH
31103: LD_VAR 0 2
31107: PPUSH
31108: CALL_OW 264
31112: PUSH
31113: LD_EXP 129
31117: EQUAL
31118: AND
31119: IFFALSE 31140
// MinerDetonateMine ( unit , x , y ) ;
31121: LD_VAR 0 2
31125: PPUSH
31126: LD_VAR 0 4
31130: PPUSH
31131: LD_VAR 0 5
31135: PPUSH
31136: CALL 33720 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31140: LD_VAR 0 1
31144: PUSH
31145: LD_INT 252
31147: EQUAL
31148: PUSH
31149: LD_VAR 0 2
31153: PPUSH
31154: CALL_OW 264
31158: PUSH
31159: LD_EXP 129
31163: EQUAL
31164: AND
31165: IFFALSE 31186
// MinerCreateMinefield ( unit , x , y ) ;
31167: LD_VAR 0 2
31171: PPUSH
31172: LD_VAR 0 4
31176: PPUSH
31177: LD_VAR 0 5
31181: PPUSH
31182: CALL 34137 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31186: LD_VAR 0 1
31190: PUSH
31191: LD_INT 253
31193: EQUAL
31194: PUSH
31195: LD_VAR 0 2
31199: PPUSH
31200: CALL_OW 257
31204: PUSH
31205: LD_INT 5
31207: EQUAL
31208: AND
31209: IFFALSE 31230
// ComBinocular ( unit , x , y ) ;
31211: LD_VAR 0 2
31215: PPUSH
31216: LD_VAR 0 4
31220: PPUSH
31221: LD_VAR 0 5
31225: PPUSH
31226: CALL 34508 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31230: LD_VAR 0 1
31234: PUSH
31235: LD_INT 254
31237: EQUAL
31238: PUSH
31239: LD_VAR 0 2
31243: PPUSH
31244: CALL_OW 264
31248: PUSH
31249: LD_EXP 124
31253: EQUAL
31254: AND
31255: PUSH
31256: LD_VAR 0 3
31260: PPUSH
31261: CALL_OW 263
31265: PUSH
31266: LD_INT 3
31268: EQUAL
31269: AND
31270: IFFALSE 31286
// HackDestroyVehicle ( unit , selectedUnit ) ;
31272: LD_VAR 0 2
31276: PPUSH
31277: LD_VAR 0 3
31281: PPUSH
31282: CALL 32803 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31286: LD_VAR 0 1
31290: PUSH
31291: LD_INT 255
31293: EQUAL
31294: PUSH
31295: LD_VAR 0 2
31299: PPUSH
31300: CALL_OW 264
31304: PUSH
31305: LD_INT 14
31307: PUSH
31308: LD_INT 53
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: IN
31315: AND
31316: PUSH
31317: LD_VAR 0 4
31321: PPUSH
31322: LD_VAR 0 5
31326: PPUSH
31327: CALL_OW 488
31331: AND
31332: IFFALSE 31356
// CutTreeXYR ( unit , x , y , 12 ) ;
31334: LD_VAR 0 2
31338: PPUSH
31339: LD_VAR 0 4
31343: PPUSH
31344: LD_VAR 0 5
31348: PPUSH
31349: LD_INT 12
31351: PPUSH
31352: CALL 31369 0 4
// end ;
31356: LD_VAR 0 6
31360: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
31361: LD_INT 0
31363: PPUSH
// end ;
31364: LD_VAR 0 4
31368: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31369: LD_INT 0
31371: PPUSH
31372: PPUSH
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
31377: PPUSH
31378: PPUSH
31379: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31380: LD_VAR 0 1
31384: NOT
31385: PUSH
31386: LD_VAR 0 2
31390: PPUSH
31391: LD_VAR 0 3
31395: PPUSH
31396: CALL_OW 488
31400: NOT
31401: OR
31402: PUSH
31403: LD_VAR 0 4
31407: NOT
31408: OR
31409: IFFALSE 31413
// exit ;
31411: GO 31753
// list := [ ] ;
31413: LD_ADDR_VAR 0 13
31417: PUSH
31418: EMPTY
31419: ST_TO_ADDR
// if x - r < 0 then
31420: LD_VAR 0 2
31424: PUSH
31425: LD_VAR 0 4
31429: MINUS
31430: PUSH
31431: LD_INT 0
31433: LESS
31434: IFFALSE 31446
// min_x := 0 else
31436: LD_ADDR_VAR 0 7
31440: PUSH
31441: LD_INT 0
31443: ST_TO_ADDR
31444: GO 31462
// min_x := x - r ;
31446: LD_ADDR_VAR 0 7
31450: PUSH
31451: LD_VAR 0 2
31455: PUSH
31456: LD_VAR 0 4
31460: MINUS
31461: ST_TO_ADDR
// if y - r < 0 then
31462: LD_VAR 0 3
31466: PUSH
31467: LD_VAR 0 4
31471: MINUS
31472: PUSH
31473: LD_INT 0
31475: LESS
31476: IFFALSE 31488
// min_y := 0 else
31478: LD_ADDR_VAR 0 8
31482: PUSH
31483: LD_INT 0
31485: ST_TO_ADDR
31486: GO 31504
// min_y := y - r ;
31488: LD_ADDR_VAR 0 8
31492: PUSH
31493: LD_VAR 0 3
31497: PUSH
31498: LD_VAR 0 4
31502: MINUS
31503: ST_TO_ADDR
// max_x := x + r ;
31504: LD_ADDR_VAR 0 9
31508: PUSH
31509: LD_VAR 0 2
31513: PUSH
31514: LD_VAR 0 4
31518: PLUS
31519: ST_TO_ADDR
// max_y := y + r ;
31520: LD_ADDR_VAR 0 10
31524: PUSH
31525: LD_VAR 0 3
31529: PUSH
31530: LD_VAR 0 4
31534: PLUS
31535: ST_TO_ADDR
// for _x = min_x to max_x do
31536: LD_ADDR_VAR 0 11
31540: PUSH
31541: DOUBLE
31542: LD_VAR 0 7
31546: DEC
31547: ST_TO_ADDR
31548: LD_VAR 0 9
31552: PUSH
31553: FOR_TO
31554: IFFALSE 31671
// for _y = min_y to max_y do
31556: LD_ADDR_VAR 0 12
31560: PUSH
31561: DOUBLE
31562: LD_VAR 0 8
31566: DEC
31567: ST_TO_ADDR
31568: LD_VAR 0 10
31572: PUSH
31573: FOR_TO
31574: IFFALSE 31667
// begin if not ValidHex ( _x , _y ) then
31576: LD_VAR 0 11
31580: PPUSH
31581: LD_VAR 0 12
31585: PPUSH
31586: CALL_OW 488
31590: NOT
31591: IFFALSE 31595
// continue ;
31593: GO 31573
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31595: LD_VAR 0 11
31599: PPUSH
31600: LD_VAR 0 12
31604: PPUSH
31605: CALL_OW 351
31609: PUSH
31610: LD_VAR 0 11
31614: PPUSH
31615: LD_VAR 0 12
31619: PPUSH
31620: CALL_OW 554
31624: AND
31625: IFFALSE 31665
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31627: LD_ADDR_VAR 0 13
31631: PUSH
31632: LD_VAR 0 13
31636: PPUSH
31637: LD_VAR 0 13
31641: PUSH
31642: LD_INT 1
31644: PLUS
31645: PPUSH
31646: LD_VAR 0 11
31650: PUSH
31651: LD_VAR 0 12
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PPUSH
31660: CALL_OW 2
31664: ST_TO_ADDR
// end ;
31665: GO 31573
31667: POP
31668: POP
31669: GO 31553
31671: POP
31672: POP
// if not list then
31673: LD_VAR 0 13
31677: NOT
31678: IFFALSE 31682
// exit ;
31680: GO 31753
// for i in list do
31682: LD_ADDR_VAR 0 6
31686: PUSH
31687: LD_VAR 0 13
31691: PUSH
31692: FOR_IN
31693: IFFALSE 31751
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31695: LD_VAR 0 1
31699: PPUSH
31700: LD_STRING M
31702: PUSH
31703: LD_VAR 0 6
31707: PUSH
31708: LD_INT 1
31710: ARRAY
31711: PUSH
31712: LD_VAR 0 6
31716: PUSH
31717: LD_INT 2
31719: ARRAY
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: PUSH
31742: EMPTY
31743: LIST
31744: PPUSH
31745: CALL_OW 447
31749: GO 31692
31751: POP
31752: POP
// end ;
31753: LD_VAR 0 5
31757: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31758: LD_EXP 112
31762: NOT
31763: IFFALSE 31813
31765: GO 31767
31767: DISABLE
// begin initHack := true ;
31768: LD_ADDR_EXP 112
31772: PUSH
31773: LD_INT 1
31775: ST_TO_ADDR
// hackTanks := [ ] ;
31776: LD_ADDR_EXP 113
31780: PUSH
31781: EMPTY
31782: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31783: LD_ADDR_EXP 114
31787: PUSH
31788: EMPTY
31789: ST_TO_ADDR
// hackLimit := 3 ;
31790: LD_ADDR_EXP 115
31794: PUSH
31795: LD_INT 3
31797: ST_TO_ADDR
// hackDist := 12 ;
31798: LD_ADDR_EXP 116
31802: PUSH
31803: LD_INT 12
31805: ST_TO_ADDR
// hackCounter := [ ] ;
31806: LD_ADDR_EXP 117
31810: PUSH
31811: EMPTY
31812: ST_TO_ADDR
// end ;
31813: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31814: LD_EXP 112
31818: PUSH
31819: LD_INT 34
31821: PUSH
31822: LD_EXP 124
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PPUSH
31831: CALL_OW 69
31835: AND
31836: IFFALSE 32091
31838: GO 31840
31840: DISABLE
31841: LD_INT 0
31843: PPUSH
31844: PPUSH
// begin enable ;
31845: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31846: LD_ADDR_VAR 0 1
31850: PUSH
31851: LD_INT 34
31853: PUSH
31854: LD_EXP 124
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PPUSH
31863: CALL_OW 69
31867: PUSH
31868: FOR_IN
31869: IFFALSE 32089
// begin if not i in hackTanks then
31871: LD_VAR 0 1
31875: PUSH
31876: LD_EXP 113
31880: IN
31881: NOT
31882: IFFALSE 31965
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31884: LD_ADDR_EXP 113
31888: PUSH
31889: LD_EXP 113
31893: PPUSH
31894: LD_EXP 113
31898: PUSH
31899: LD_INT 1
31901: PLUS
31902: PPUSH
31903: LD_VAR 0 1
31907: PPUSH
31908: CALL_OW 1
31912: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31913: LD_ADDR_EXP 114
31917: PUSH
31918: LD_EXP 114
31922: PPUSH
31923: LD_EXP 114
31927: PUSH
31928: LD_INT 1
31930: PLUS
31931: PPUSH
31932: EMPTY
31933: PPUSH
31934: CALL_OW 1
31938: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31939: LD_ADDR_EXP 117
31943: PUSH
31944: LD_EXP 117
31948: PPUSH
31949: LD_EXP 117
31953: PUSH
31954: LD_INT 1
31956: PLUS
31957: PPUSH
31958: EMPTY
31959: PPUSH
31960: CALL_OW 1
31964: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31965: LD_VAR 0 1
31969: PPUSH
31970: CALL_OW 302
31974: NOT
31975: IFFALSE 31988
// begin HackUnlinkAll ( i ) ;
31977: LD_VAR 0 1
31981: PPUSH
31982: CALL 32094 0 1
// continue ;
31986: GO 31868
// end ; HackCheckCapturedStatus ( i ) ;
31988: LD_VAR 0 1
31992: PPUSH
31993: CALL 32537 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31997: LD_ADDR_VAR 0 2
32001: PUSH
32002: LD_INT 81
32004: PUSH
32005: LD_VAR 0 1
32009: PPUSH
32010: CALL_OW 255
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 33
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 91
32031: PUSH
32032: LD_VAR 0 1
32036: PUSH
32037: LD_EXP 116
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 50
32049: PUSH
32050: EMPTY
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: PPUSH
32059: CALL_OW 69
32063: ST_TO_ADDR
// if not tmp then
32064: LD_VAR 0 2
32068: NOT
32069: IFFALSE 32073
// continue ;
32071: GO 31868
// HackLink ( i , tmp ) ;
32073: LD_VAR 0 1
32077: PPUSH
32078: LD_VAR 0 2
32082: PPUSH
32083: CALL 32230 0 2
// end ;
32087: GO 31868
32089: POP
32090: POP
// end ;
32091: PPOPN 2
32093: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32094: LD_INT 0
32096: PPUSH
32097: PPUSH
32098: PPUSH
// if not hack in hackTanks then
32099: LD_VAR 0 1
32103: PUSH
32104: LD_EXP 113
32108: IN
32109: NOT
32110: IFFALSE 32114
// exit ;
32112: GO 32225
// index := GetElementIndex ( hackTanks , hack ) ;
32114: LD_ADDR_VAR 0 4
32118: PUSH
32119: LD_EXP 113
32123: PPUSH
32124: LD_VAR 0 1
32128: PPUSH
32129: CALL 39867 0 2
32133: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32134: LD_EXP 114
32138: PUSH
32139: LD_VAR 0 4
32143: ARRAY
32144: IFFALSE 32225
// begin for i in hackTanksCaptured [ index ] do
32146: LD_ADDR_VAR 0 3
32150: PUSH
32151: LD_EXP 114
32155: PUSH
32156: LD_VAR 0 4
32160: ARRAY
32161: PUSH
32162: FOR_IN
32163: IFFALSE 32189
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32165: LD_VAR 0 3
32169: PUSH
32170: LD_INT 1
32172: ARRAY
32173: PPUSH
32174: LD_VAR 0 3
32178: PUSH
32179: LD_INT 2
32181: ARRAY
32182: PPUSH
32183: CALL_OW 235
32187: GO 32162
32189: POP
32190: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32191: LD_ADDR_EXP 114
32195: PUSH
32196: LD_EXP 114
32200: PPUSH
32201: LD_VAR 0 4
32205: PPUSH
32206: EMPTY
32207: PPUSH
32208: CALL_OW 1
32212: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32213: LD_VAR 0 1
32217: PPUSH
32218: LD_INT 0
32220: PPUSH
32221: CALL_OW 505
// end ; end ;
32225: LD_VAR 0 2
32229: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32230: LD_INT 0
32232: PPUSH
32233: PPUSH
32234: PPUSH
// if not hack in hackTanks or not vehicles then
32235: LD_VAR 0 1
32239: PUSH
32240: LD_EXP 113
32244: IN
32245: NOT
32246: PUSH
32247: LD_VAR 0 2
32251: NOT
32252: OR
32253: IFFALSE 32257
// exit ;
32255: GO 32532
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32257: LD_ADDR_VAR 0 2
32261: PUSH
32262: LD_VAR 0 1
32266: PPUSH
32267: LD_VAR 0 2
32271: PPUSH
32272: LD_INT 1
32274: PPUSH
32275: LD_INT 1
32277: PPUSH
32278: CALL 40517 0 4
32282: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32283: LD_ADDR_VAR 0 5
32287: PUSH
32288: LD_EXP 113
32292: PPUSH
32293: LD_VAR 0 1
32297: PPUSH
32298: CALL 39867 0 2
32302: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32303: LD_EXP 114
32307: PUSH
32308: LD_VAR 0 5
32312: ARRAY
32313: PUSH
32314: LD_EXP 115
32318: LESS
32319: IFFALSE 32508
// begin for i := 1 to vehicles do
32321: LD_ADDR_VAR 0 4
32325: PUSH
32326: DOUBLE
32327: LD_INT 1
32329: DEC
32330: ST_TO_ADDR
32331: LD_VAR 0 2
32335: PUSH
32336: FOR_TO
32337: IFFALSE 32506
// begin if hackTanksCaptured [ index ] = hackLimit then
32339: LD_EXP 114
32343: PUSH
32344: LD_VAR 0 5
32348: ARRAY
32349: PUSH
32350: LD_EXP 115
32354: EQUAL
32355: IFFALSE 32359
// break ;
32357: GO 32506
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32359: LD_ADDR_EXP 117
32363: PUSH
32364: LD_EXP 117
32368: PPUSH
32369: LD_VAR 0 5
32373: PPUSH
32374: LD_EXP 117
32378: PUSH
32379: LD_VAR 0 5
32383: ARRAY
32384: PUSH
32385: LD_INT 1
32387: PLUS
32388: PPUSH
32389: CALL_OW 1
32393: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32394: LD_ADDR_EXP 114
32398: PUSH
32399: LD_EXP 114
32403: PPUSH
32404: LD_VAR 0 5
32408: PUSH
32409: LD_EXP 114
32413: PUSH
32414: LD_VAR 0 5
32418: ARRAY
32419: PUSH
32420: LD_INT 1
32422: PLUS
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PPUSH
32428: LD_VAR 0 2
32432: PUSH
32433: LD_VAR 0 4
32437: ARRAY
32438: PUSH
32439: LD_VAR 0 2
32443: PUSH
32444: LD_VAR 0 4
32448: ARRAY
32449: PPUSH
32450: CALL_OW 255
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PPUSH
32459: CALL 40082 0 3
32463: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32464: LD_VAR 0 2
32468: PUSH
32469: LD_VAR 0 4
32473: ARRAY
32474: PPUSH
32475: LD_VAR 0 1
32479: PPUSH
32480: CALL_OW 255
32484: PPUSH
32485: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32489: LD_VAR 0 2
32493: PUSH
32494: LD_VAR 0 4
32498: ARRAY
32499: PPUSH
32500: CALL_OW 141
// end ;
32504: GO 32336
32506: POP
32507: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32508: LD_VAR 0 1
32512: PPUSH
32513: LD_EXP 114
32517: PUSH
32518: LD_VAR 0 5
32522: ARRAY
32523: PUSH
32524: LD_INT 0
32526: PLUS
32527: PPUSH
32528: CALL_OW 505
// end ;
32532: LD_VAR 0 3
32536: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32537: LD_INT 0
32539: PPUSH
32540: PPUSH
32541: PPUSH
32542: PPUSH
// if not hack in hackTanks then
32543: LD_VAR 0 1
32547: PUSH
32548: LD_EXP 113
32552: IN
32553: NOT
32554: IFFALSE 32558
// exit ;
32556: GO 32798
// index := GetElementIndex ( hackTanks , hack ) ;
32558: LD_ADDR_VAR 0 4
32562: PUSH
32563: LD_EXP 113
32567: PPUSH
32568: LD_VAR 0 1
32572: PPUSH
32573: CALL 39867 0 2
32577: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32578: LD_ADDR_VAR 0 3
32582: PUSH
32583: DOUBLE
32584: LD_EXP 114
32588: PUSH
32589: LD_VAR 0 4
32593: ARRAY
32594: INC
32595: ST_TO_ADDR
32596: LD_INT 1
32598: PUSH
32599: FOR_DOWNTO
32600: IFFALSE 32772
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32602: LD_ADDR_VAR 0 5
32606: PUSH
32607: LD_EXP 114
32611: PUSH
32612: LD_VAR 0 4
32616: ARRAY
32617: PUSH
32618: LD_VAR 0 3
32622: ARRAY
32623: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32624: LD_VAR 0 5
32628: PUSH
32629: LD_INT 1
32631: ARRAY
32632: PPUSH
32633: CALL_OW 302
32637: NOT
32638: PUSH
32639: LD_VAR 0 5
32643: PUSH
32644: LD_INT 1
32646: ARRAY
32647: PPUSH
32648: CALL_OW 255
32652: PUSH
32653: LD_VAR 0 1
32657: PPUSH
32658: CALL_OW 255
32662: NONEQUAL
32663: OR
32664: IFFALSE 32770
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32666: LD_VAR 0 5
32670: PUSH
32671: LD_INT 1
32673: ARRAY
32674: PPUSH
32675: CALL_OW 305
32679: PUSH
32680: LD_VAR 0 5
32684: PUSH
32685: LD_INT 1
32687: ARRAY
32688: PPUSH
32689: CALL_OW 255
32693: PUSH
32694: LD_VAR 0 1
32698: PPUSH
32699: CALL_OW 255
32703: EQUAL
32704: AND
32705: IFFALSE 32729
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32707: LD_VAR 0 5
32711: PUSH
32712: LD_INT 1
32714: ARRAY
32715: PPUSH
32716: LD_VAR 0 5
32720: PUSH
32721: LD_INT 2
32723: ARRAY
32724: PPUSH
32725: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32729: LD_ADDR_EXP 114
32733: PUSH
32734: LD_EXP 114
32738: PPUSH
32739: LD_VAR 0 4
32743: PPUSH
32744: LD_EXP 114
32748: PUSH
32749: LD_VAR 0 4
32753: ARRAY
32754: PPUSH
32755: LD_VAR 0 3
32759: PPUSH
32760: CALL_OW 3
32764: PPUSH
32765: CALL_OW 1
32769: ST_TO_ADDR
// end ; end ;
32770: GO 32599
32772: POP
32773: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32774: LD_VAR 0 1
32778: PPUSH
32779: LD_EXP 114
32783: PUSH
32784: LD_VAR 0 4
32788: ARRAY
32789: PUSH
32790: LD_INT 0
32792: PLUS
32793: PPUSH
32794: CALL_OW 505
// end ;
32798: LD_VAR 0 2
32802: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32803: LD_INT 0
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
// if not hack in hackTanks then
32809: LD_VAR 0 1
32813: PUSH
32814: LD_EXP 113
32818: IN
32819: NOT
32820: IFFALSE 32824
// exit ;
32822: GO 32909
// index := GetElementIndex ( hackTanks , hack ) ;
32824: LD_ADDR_VAR 0 5
32828: PUSH
32829: LD_EXP 113
32833: PPUSH
32834: LD_VAR 0 1
32838: PPUSH
32839: CALL 39867 0 2
32843: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32844: LD_ADDR_VAR 0 4
32848: PUSH
32849: DOUBLE
32850: LD_INT 1
32852: DEC
32853: ST_TO_ADDR
32854: LD_EXP 114
32858: PUSH
32859: LD_VAR 0 5
32863: ARRAY
32864: PUSH
32865: FOR_TO
32866: IFFALSE 32907
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32868: LD_EXP 114
32872: PUSH
32873: LD_VAR 0 5
32877: ARRAY
32878: PUSH
32879: LD_VAR 0 4
32883: ARRAY
32884: PUSH
32885: LD_INT 1
32887: ARRAY
32888: PUSH
32889: LD_VAR 0 2
32893: EQUAL
32894: IFFALSE 32905
// KillUnit ( vehicle ) ;
32896: LD_VAR 0 2
32900: PPUSH
32901: CALL_OW 66
32905: GO 32865
32907: POP
32908: POP
// end ;
32909: LD_VAR 0 3
32913: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32914: LD_EXP 118
32918: NOT
32919: IFFALSE 32954
32921: GO 32923
32923: DISABLE
// begin initMiner := true ;
32924: LD_ADDR_EXP 118
32928: PUSH
32929: LD_INT 1
32931: ST_TO_ADDR
// minersList := [ ] ;
32932: LD_ADDR_EXP 119
32936: PUSH
32937: EMPTY
32938: ST_TO_ADDR
// minerMinesList := [ ] ;
32939: LD_ADDR_EXP 120
32943: PUSH
32944: EMPTY
32945: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32946: LD_ADDR_EXP 121
32950: PUSH
32951: LD_INT 5
32953: ST_TO_ADDR
// end ;
32954: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32955: LD_EXP 118
32959: PUSH
32960: LD_INT 34
32962: PUSH
32963: LD_EXP 129
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PPUSH
32972: CALL_OW 69
32976: AND
32977: IFFALSE 33440
32979: GO 32981
32981: DISABLE
32982: LD_INT 0
32984: PPUSH
32985: PPUSH
32986: PPUSH
32987: PPUSH
// begin enable ;
32988: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32989: LD_ADDR_VAR 0 1
32993: PUSH
32994: LD_INT 34
32996: PUSH
32997: LD_EXP 129
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PPUSH
33006: CALL_OW 69
33010: PUSH
33011: FOR_IN
33012: IFFALSE 33084
// begin if not i in minersList then
33014: LD_VAR 0 1
33018: PUSH
33019: LD_EXP 119
33023: IN
33024: NOT
33025: IFFALSE 33082
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33027: LD_ADDR_EXP 119
33031: PUSH
33032: LD_EXP 119
33036: PPUSH
33037: LD_EXP 119
33041: PUSH
33042: LD_INT 1
33044: PLUS
33045: PPUSH
33046: LD_VAR 0 1
33050: PPUSH
33051: CALL_OW 1
33055: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33056: LD_ADDR_EXP 120
33060: PUSH
33061: LD_EXP 120
33065: PPUSH
33066: LD_EXP 120
33070: PUSH
33071: LD_INT 1
33073: PLUS
33074: PPUSH
33075: EMPTY
33076: PPUSH
33077: CALL_OW 1
33081: ST_TO_ADDR
// end end ;
33082: GO 33011
33084: POP
33085: POP
// for i := minerMinesList downto 1 do
33086: LD_ADDR_VAR 0 1
33090: PUSH
33091: DOUBLE
33092: LD_EXP 120
33096: INC
33097: ST_TO_ADDR
33098: LD_INT 1
33100: PUSH
33101: FOR_DOWNTO
33102: IFFALSE 33438
// begin if IsLive ( minersList [ i ] ) then
33104: LD_EXP 119
33108: PUSH
33109: LD_VAR 0 1
33113: ARRAY
33114: PPUSH
33115: CALL_OW 300
33119: IFFALSE 33147
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33121: LD_EXP 119
33125: PUSH
33126: LD_VAR 0 1
33130: ARRAY
33131: PPUSH
33132: LD_EXP 120
33136: PUSH
33137: LD_VAR 0 1
33141: ARRAY
33142: PPUSH
33143: CALL_OW 505
// if not minerMinesList [ i ] then
33147: LD_EXP 120
33151: PUSH
33152: LD_VAR 0 1
33156: ARRAY
33157: NOT
33158: IFFALSE 33162
// continue ;
33160: GO 33101
// for j := minerMinesList [ i ] downto 1 do
33162: LD_ADDR_VAR 0 2
33166: PUSH
33167: DOUBLE
33168: LD_EXP 120
33172: PUSH
33173: LD_VAR 0 1
33177: ARRAY
33178: INC
33179: ST_TO_ADDR
33180: LD_INT 1
33182: PUSH
33183: FOR_DOWNTO
33184: IFFALSE 33434
// begin side := GetSide ( minersList [ i ] ) ;
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_EXP 119
33195: PUSH
33196: LD_VAR 0 1
33200: ARRAY
33201: PPUSH
33202: CALL_OW 255
33206: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33207: LD_ADDR_VAR 0 4
33211: PUSH
33212: LD_EXP 120
33216: PUSH
33217: LD_VAR 0 1
33221: ARRAY
33222: PUSH
33223: LD_VAR 0 2
33227: ARRAY
33228: PUSH
33229: LD_INT 1
33231: ARRAY
33232: PPUSH
33233: LD_EXP 120
33237: PUSH
33238: LD_VAR 0 1
33242: ARRAY
33243: PUSH
33244: LD_VAR 0 2
33248: ARRAY
33249: PUSH
33250: LD_INT 2
33252: ARRAY
33253: PPUSH
33254: CALL_OW 428
33258: ST_TO_ADDR
// if not tmp then
33259: LD_VAR 0 4
33263: NOT
33264: IFFALSE 33268
// continue ;
33266: GO 33183
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33268: LD_VAR 0 4
33272: PUSH
33273: LD_INT 81
33275: PUSH
33276: LD_VAR 0 3
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PPUSH
33285: CALL_OW 69
33289: IN
33290: PUSH
33291: LD_EXP 120
33295: PUSH
33296: LD_VAR 0 1
33300: ARRAY
33301: PUSH
33302: LD_VAR 0 2
33306: ARRAY
33307: PUSH
33308: LD_INT 1
33310: ARRAY
33311: PPUSH
33312: LD_EXP 120
33316: PUSH
33317: LD_VAR 0 1
33321: ARRAY
33322: PUSH
33323: LD_VAR 0 2
33327: ARRAY
33328: PUSH
33329: LD_INT 2
33331: ARRAY
33332: PPUSH
33333: CALL_OW 458
33337: AND
33338: IFFALSE 33432
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33340: LD_EXP 120
33344: PUSH
33345: LD_VAR 0 1
33349: ARRAY
33350: PUSH
33351: LD_VAR 0 2
33355: ARRAY
33356: PUSH
33357: LD_INT 1
33359: ARRAY
33360: PPUSH
33361: LD_EXP 120
33365: PUSH
33366: LD_VAR 0 1
33370: ARRAY
33371: PUSH
33372: LD_VAR 0 2
33376: ARRAY
33377: PUSH
33378: LD_INT 2
33380: ARRAY
33381: PPUSH
33382: LD_VAR 0 3
33386: PPUSH
33387: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33391: LD_ADDR_EXP 120
33395: PUSH
33396: LD_EXP 120
33400: PPUSH
33401: LD_VAR 0 1
33405: PPUSH
33406: LD_EXP 120
33410: PUSH
33411: LD_VAR 0 1
33415: ARRAY
33416: PPUSH
33417: LD_VAR 0 2
33421: PPUSH
33422: CALL_OW 3
33426: PPUSH
33427: CALL_OW 1
33431: ST_TO_ADDR
// end ; end ;
33432: GO 33183
33434: POP
33435: POP
// end ;
33436: GO 33101
33438: POP
33439: POP
// end ;
33440: PPOPN 4
33442: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33443: LD_INT 0
33445: PPUSH
33446: PPUSH
// result := false ;
33447: LD_ADDR_VAR 0 4
33451: PUSH
33452: LD_INT 0
33454: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33455: LD_VAR 0 1
33459: PPUSH
33460: CALL_OW 264
33464: PUSH
33465: LD_EXP 129
33469: EQUAL
33470: NOT
33471: IFFALSE 33475
// exit ;
33473: GO 33715
// index := GetElementIndex ( minersList , unit ) ;
33475: LD_ADDR_VAR 0 5
33479: PUSH
33480: LD_EXP 119
33484: PPUSH
33485: LD_VAR 0 1
33489: PPUSH
33490: CALL 39867 0 2
33494: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33495: LD_EXP 120
33499: PUSH
33500: LD_VAR 0 5
33504: ARRAY
33505: PUSH
33506: LD_EXP 121
33510: GREATEREQUAL
33511: IFFALSE 33515
// exit ;
33513: GO 33715
// ComMoveXY ( unit , x , y ) ;
33515: LD_VAR 0 1
33519: PPUSH
33520: LD_VAR 0 2
33524: PPUSH
33525: LD_VAR 0 3
33529: PPUSH
33530: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33534: LD_INT 35
33536: PPUSH
33537: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33541: LD_VAR 0 1
33545: PPUSH
33546: LD_VAR 0 2
33550: PPUSH
33551: LD_VAR 0 3
33555: PPUSH
33556: CALL 70639 0 3
33560: NOT
33561: PUSH
33562: LD_VAR 0 1
33566: PPUSH
33567: CALL_OW 314
33571: AND
33572: IFFALSE 33576
// exit ;
33574: GO 33715
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33576: LD_VAR 0 2
33580: PPUSH
33581: LD_VAR 0 3
33585: PPUSH
33586: CALL_OW 428
33590: PUSH
33591: LD_VAR 0 1
33595: EQUAL
33596: PUSH
33597: LD_VAR 0 1
33601: PPUSH
33602: CALL_OW 314
33606: NOT
33607: AND
33608: IFFALSE 33534
// PlaySoundXY ( x , y , PlantMine ) ;
33610: LD_VAR 0 2
33614: PPUSH
33615: LD_VAR 0 3
33619: PPUSH
33620: LD_STRING PlantMine
33622: PPUSH
33623: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33627: LD_VAR 0 2
33631: PPUSH
33632: LD_VAR 0 3
33636: PPUSH
33637: LD_VAR 0 1
33641: PPUSH
33642: CALL_OW 255
33646: PPUSH
33647: LD_INT 0
33649: PPUSH
33650: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33654: LD_ADDR_EXP 120
33658: PUSH
33659: LD_EXP 120
33663: PPUSH
33664: LD_VAR 0 5
33668: PUSH
33669: LD_EXP 120
33673: PUSH
33674: LD_VAR 0 5
33678: ARRAY
33679: PUSH
33680: LD_INT 1
33682: PLUS
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PPUSH
33688: LD_VAR 0 2
33692: PUSH
33693: LD_VAR 0 3
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PPUSH
33702: CALL 40082 0 3
33706: ST_TO_ADDR
// result := true ;
33707: LD_ADDR_VAR 0 4
33711: PUSH
33712: LD_INT 1
33714: ST_TO_ADDR
// end ;
33715: LD_VAR 0 4
33719: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33720: LD_INT 0
33722: PPUSH
33723: PPUSH
33724: PPUSH
// if not unit in minersList then
33725: LD_VAR 0 1
33729: PUSH
33730: LD_EXP 119
33734: IN
33735: NOT
33736: IFFALSE 33740
// exit ;
33738: GO 34132
// index := GetElementIndex ( minersList , unit ) ;
33740: LD_ADDR_VAR 0 6
33744: PUSH
33745: LD_EXP 119
33749: PPUSH
33750: LD_VAR 0 1
33754: PPUSH
33755: CALL 39867 0 2
33759: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33760: LD_ADDR_VAR 0 5
33764: PUSH
33765: DOUBLE
33766: LD_EXP 120
33770: PUSH
33771: LD_VAR 0 6
33775: ARRAY
33776: INC
33777: ST_TO_ADDR
33778: LD_INT 1
33780: PUSH
33781: FOR_DOWNTO
33782: IFFALSE 33943
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33784: LD_EXP 120
33788: PUSH
33789: LD_VAR 0 6
33793: ARRAY
33794: PUSH
33795: LD_VAR 0 5
33799: ARRAY
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: PUSH
33805: LD_VAR 0 2
33809: EQUAL
33810: PUSH
33811: LD_EXP 120
33815: PUSH
33816: LD_VAR 0 6
33820: ARRAY
33821: PUSH
33822: LD_VAR 0 5
33826: ARRAY
33827: PUSH
33828: LD_INT 2
33830: ARRAY
33831: PUSH
33832: LD_VAR 0 3
33836: EQUAL
33837: AND
33838: IFFALSE 33941
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33840: LD_EXP 120
33844: PUSH
33845: LD_VAR 0 6
33849: ARRAY
33850: PUSH
33851: LD_VAR 0 5
33855: ARRAY
33856: PUSH
33857: LD_INT 1
33859: ARRAY
33860: PPUSH
33861: LD_EXP 120
33865: PUSH
33866: LD_VAR 0 6
33870: ARRAY
33871: PUSH
33872: LD_VAR 0 5
33876: ARRAY
33877: PUSH
33878: LD_INT 2
33880: ARRAY
33881: PPUSH
33882: LD_VAR 0 1
33886: PPUSH
33887: CALL_OW 255
33891: PPUSH
33892: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33896: LD_ADDR_EXP 120
33900: PUSH
33901: LD_EXP 120
33905: PPUSH
33906: LD_VAR 0 6
33910: PPUSH
33911: LD_EXP 120
33915: PUSH
33916: LD_VAR 0 6
33920: ARRAY
33921: PPUSH
33922: LD_VAR 0 5
33926: PPUSH
33927: CALL_OW 3
33931: PPUSH
33932: CALL_OW 1
33936: ST_TO_ADDR
// exit ;
33937: POP
33938: POP
33939: GO 34132
// end ; end ;
33941: GO 33781
33943: POP
33944: POP
// for i := minerMinesList [ index ] downto 1 do
33945: LD_ADDR_VAR 0 5
33949: PUSH
33950: DOUBLE
33951: LD_EXP 120
33955: PUSH
33956: LD_VAR 0 6
33960: ARRAY
33961: INC
33962: ST_TO_ADDR
33963: LD_INT 1
33965: PUSH
33966: FOR_DOWNTO
33967: IFFALSE 34130
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33969: LD_EXP 120
33973: PUSH
33974: LD_VAR 0 6
33978: ARRAY
33979: PUSH
33980: LD_VAR 0 5
33984: ARRAY
33985: PUSH
33986: LD_INT 1
33988: ARRAY
33989: PPUSH
33990: LD_EXP 120
33994: PUSH
33995: LD_VAR 0 6
33999: ARRAY
34000: PUSH
34001: LD_VAR 0 5
34005: ARRAY
34006: PUSH
34007: LD_INT 2
34009: ARRAY
34010: PPUSH
34011: LD_VAR 0 2
34015: PPUSH
34016: LD_VAR 0 3
34020: PPUSH
34021: CALL_OW 298
34025: PUSH
34026: LD_INT 6
34028: LESS
34029: IFFALSE 34128
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34031: LD_EXP 120
34035: PUSH
34036: LD_VAR 0 6
34040: ARRAY
34041: PUSH
34042: LD_VAR 0 5
34046: ARRAY
34047: PUSH
34048: LD_INT 1
34050: ARRAY
34051: PPUSH
34052: LD_EXP 120
34056: PUSH
34057: LD_VAR 0 6
34061: ARRAY
34062: PUSH
34063: LD_VAR 0 5
34067: ARRAY
34068: PUSH
34069: LD_INT 2
34071: ARRAY
34072: PPUSH
34073: LD_VAR 0 1
34077: PPUSH
34078: CALL_OW 255
34082: PPUSH
34083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34087: LD_ADDR_EXP 120
34091: PUSH
34092: LD_EXP 120
34096: PPUSH
34097: LD_VAR 0 6
34101: PPUSH
34102: LD_EXP 120
34106: PUSH
34107: LD_VAR 0 6
34111: ARRAY
34112: PPUSH
34113: LD_VAR 0 5
34117: PPUSH
34118: CALL_OW 3
34122: PPUSH
34123: CALL_OW 1
34127: ST_TO_ADDR
// end ; end ;
34128: GO 33966
34130: POP
34131: POP
// end ;
34132: LD_VAR 0 4
34136: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34137: LD_INT 0
34139: PPUSH
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
34146: PPUSH
34147: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34148: LD_VAR 0 1
34152: PPUSH
34153: CALL_OW 264
34157: PUSH
34158: LD_EXP 129
34162: EQUAL
34163: NOT
34164: PUSH
34165: LD_VAR 0 1
34169: PUSH
34170: LD_EXP 119
34174: IN
34175: NOT
34176: OR
34177: IFFALSE 34181
// exit ;
34179: GO 34503
// index := GetElementIndex ( minersList , unit ) ;
34181: LD_ADDR_VAR 0 6
34185: PUSH
34186: LD_EXP 119
34190: PPUSH
34191: LD_VAR 0 1
34195: PPUSH
34196: CALL 39867 0 2
34200: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34201: LD_ADDR_VAR 0 8
34205: PUSH
34206: LD_EXP 121
34210: PUSH
34211: LD_EXP 120
34215: PUSH
34216: LD_VAR 0 6
34220: ARRAY
34221: MINUS
34222: ST_TO_ADDR
// if not minesFreeAmount then
34223: LD_VAR 0 8
34227: NOT
34228: IFFALSE 34232
// exit ;
34230: GO 34503
// tmp := [ ] ;
34232: LD_ADDR_VAR 0 7
34236: PUSH
34237: EMPTY
34238: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34239: LD_ADDR_VAR 0 5
34243: PUSH
34244: DOUBLE
34245: LD_INT 1
34247: DEC
34248: ST_TO_ADDR
34249: LD_VAR 0 8
34253: PUSH
34254: FOR_TO
34255: IFFALSE 34450
// begin _d := rand ( 0 , 5 ) ;
34257: LD_ADDR_VAR 0 11
34261: PUSH
34262: LD_INT 0
34264: PPUSH
34265: LD_INT 5
34267: PPUSH
34268: CALL_OW 12
34272: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34273: LD_ADDR_VAR 0 12
34277: PUSH
34278: LD_INT 2
34280: PPUSH
34281: LD_INT 6
34283: PPUSH
34284: CALL_OW 12
34288: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34289: LD_ADDR_VAR 0 9
34293: PUSH
34294: LD_VAR 0 2
34298: PPUSH
34299: LD_VAR 0 11
34303: PPUSH
34304: LD_VAR 0 12
34308: PPUSH
34309: CALL_OW 272
34313: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34314: LD_ADDR_VAR 0 10
34318: PUSH
34319: LD_VAR 0 3
34323: PPUSH
34324: LD_VAR 0 11
34328: PPUSH
34329: LD_VAR 0 12
34333: PPUSH
34334: CALL_OW 273
34338: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34339: LD_VAR 0 9
34343: PPUSH
34344: LD_VAR 0 10
34348: PPUSH
34349: CALL_OW 488
34353: PUSH
34354: LD_VAR 0 9
34358: PUSH
34359: LD_VAR 0 10
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_VAR 0 7
34372: IN
34373: NOT
34374: AND
34375: PUSH
34376: LD_VAR 0 9
34380: PPUSH
34381: LD_VAR 0 10
34385: PPUSH
34386: CALL_OW 458
34390: NOT
34391: AND
34392: IFFALSE 34434
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34394: LD_ADDR_VAR 0 7
34398: PUSH
34399: LD_VAR 0 7
34403: PPUSH
34404: LD_VAR 0 7
34408: PUSH
34409: LD_INT 1
34411: PLUS
34412: PPUSH
34413: LD_VAR 0 9
34417: PUSH
34418: LD_VAR 0 10
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PPUSH
34427: CALL_OW 1
34431: ST_TO_ADDR
34432: GO 34448
// i := i - 1 ;
34434: LD_ADDR_VAR 0 5
34438: PUSH
34439: LD_VAR 0 5
34443: PUSH
34444: LD_INT 1
34446: MINUS
34447: ST_TO_ADDR
// end ;
34448: GO 34254
34450: POP
34451: POP
// for i in tmp do
34452: LD_ADDR_VAR 0 5
34456: PUSH
34457: LD_VAR 0 7
34461: PUSH
34462: FOR_IN
34463: IFFALSE 34501
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34465: LD_VAR 0 1
34469: PPUSH
34470: LD_VAR 0 5
34474: PUSH
34475: LD_INT 1
34477: ARRAY
34478: PPUSH
34479: LD_VAR 0 5
34483: PUSH
34484: LD_INT 2
34486: ARRAY
34487: PPUSH
34488: CALL 33443 0 3
34492: NOT
34493: IFFALSE 34499
// exit ;
34495: POP
34496: POP
34497: GO 34503
34499: GO 34462
34501: POP
34502: POP
// end ;
34503: LD_VAR 0 4
34507: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34508: LD_INT 0
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
// if not GetClass ( unit ) = class_sniper then
34517: LD_VAR 0 1
34521: PPUSH
34522: CALL_OW 257
34526: PUSH
34527: LD_INT 5
34529: EQUAL
34530: NOT
34531: IFFALSE 34535
// exit ;
34533: GO 34923
// dist := 8 ;
34535: LD_ADDR_VAR 0 5
34539: PUSH
34540: LD_INT 8
34542: ST_TO_ADDR
// viewRange := 12 ;
34543: LD_ADDR_VAR 0 7
34547: PUSH
34548: LD_INT 12
34550: ST_TO_ADDR
// side := GetSide ( unit ) ;
34551: LD_ADDR_VAR 0 6
34555: PUSH
34556: LD_VAR 0 1
34560: PPUSH
34561: CALL_OW 255
34565: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34566: LD_INT 61
34568: PPUSH
34569: LD_VAR 0 6
34573: PPUSH
34574: CALL_OW 321
34578: PUSH
34579: LD_INT 2
34581: EQUAL
34582: IFFALSE 34592
// viewRange := 16 ;
34584: LD_ADDR_VAR 0 7
34588: PUSH
34589: LD_INT 16
34591: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34592: LD_VAR 0 1
34596: PPUSH
34597: LD_VAR 0 2
34601: PPUSH
34602: LD_VAR 0 3
34606: PPUSH
34607: CALL_OW 297
34611: PUSH
34612: LD_VAR 0 5
34616: GREATER
34617: IFFALSE 34696
// begin ComMoveXY ( unit , x , y ) ;
34619: LD_VAR 0 1
34623: PPUSH
34624: LD_VAR 0 2
34628: PPUSH
34629: LD_VAR 0 3
34633: PPUSH
34634: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34638: LD_INT 35
34640: PPUSH
34641: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34645: LD_VAR 0 1
34649: PPUSH
34650: LD_VAR 0 2
34654: PPUSH
34655: LD_VAR 0 3
34659: PPUSH
34660: CALL 70639 0 3
34664: NOT
34665: IFFALSE 34669
// exit ;
34667: GO 34923
// until GetDistUnitXY ( unit , x , y ) < dist ;
34669: LD_VAR 0 1
34673: PPUSH
34674: LD_VAR 0 2
34678: PPUSH
34679: LD_VAR 0 3
34683: PPUSH
34684: CALL_OW 297
34688: PUSH
34689: LD_VAR 0 5
34693: LESS
34694: IFFALSE 34638
// end ; ComTurnXY ( unit , x , y ) ;
34696: LD_VAR 0 1
34700: PPUSH
34701: LD_VAR 0 2
34705: PPUSH
34706: LD_VAR 0 3
34710: PPUSH
34711: CALL_OW 118
// wait ( 5 ) ;
34715: LD_INT 5
34717: PPUSH
34718: CALL_OW 67
// _d := GetDir ( unit ) ;
34722: LD_ADDR_VAR 0 10
34726: PUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL_OW 254
34736: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34737: LD_ADDR_VAR 0 8
34741: PUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 250
34751: PPUSH
34752: LD_VAR 0 10
34756: PPUSH
34757: LD_VAR 0 5
34761: PPUSH
34762: CALL_OW 272
34766: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34767: LD_ADDR_VAR 0 9
34771: PUSH
34772: LD_VAR 0 1
34776: PPUSH
34777: CALL_OW 251
34781: PPUSH
34782: LD_VAR 0 10
34786: PPUSH
34787: LD_VAR 0 5
34791: PPUSH
34792: CALL_OW 273
34796: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34797: LD_VAR 0 8
34801: PPUSH
34802: LD_VAR 0 9
34806: PPUSH
34807: CALL_OW 488
34811: NOT
34812: IFFALSE 34816
// exit ;
34814: GO 34923
// ComAnimCustom ( unit , 1 ) ;
34816: LD_VAR 0 1
34820: PPUSH
34821: LD_INT 1
34823: PPUSH
34824: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34828: LD_VAR 0 8
34832: PPUSH
34833: LD_VAR 0 9
34837: PPUSH
34838: LD_VAR 0 6
34842: PPUSH
34843: LD_VAR 0 7
34847: PPUSH
34848: CALL_OW 330
// repeat wait ( 1 ) ;
34852: LD_INT 1
34854: PPUSH
34855: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34859: LD_VAR 0 1
34863: PPUSH
34864: CALL_OW 316
34868: PUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: CALL_OW 314
34878: OR
34879: PUSH
34880: LD_VAR 0 1
34884: PPUSH
34885: CALL_OW 302
34889: NOT
34890: OR
34891: PUSH
34892: LD_VAR 0 1
34896: PPUSH
34897: CALL_OW 301
34901: OR
34902: IFFALSE 34852
// RemoveSeeing ( _x , _y , side ) ;
34904: LD_VAR 0 8
34908: PPUSH
34909: LD_VAR 0 9
34913: PPUSH
34914: LD_VAR 0 6
34918: PPUSH
34919: CALL_OW 331
// end ; end_of_file
34923: LD_VAR 0 4
34927: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
34928: LD_INT 0
34930: PPUSH
// ar_miner := 81 ;
34931: LD_ADDR_EXP 129
34935: PUSH
34936: LD_INT 81
34938: ST_TO_ADDR
// ar_crane := 88 ;
34939: LD_ADDR_EXP 128
34943: PUSH
34944: LD_INT 88
34946: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
34947: LD_ADDR_EXP 123
34951: PUSH
34952: LD_INT 89
34954: ST_TO_ADDR
// us_hack := 99 ;
34955: LD_ADDR_EXP 124
34959: PUSH
34960: LD_INT 99
34962: ST_TO_ADDR
// us_artillery := 97 ;
34963: LD_ADDR_EXP 125
34967: PUSH
34968: LD_INT 97
34970: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34971: LD_ADDR_EXP 126
34975: PUSH
34976: LD_INT 91
34978: ST_TO_ADDR
// ar_mortar := 92 ;
34979: LD_ADDR_EXP 127
34983: PUSH
34984: LD_INT 92
34986: ST_TO_ADDR
// ru_radar := 98 ;
34987: LD_ADDR_EXP 122
34991: PUSH
34992: LD_INT 98
34994: ST_TO_ADDR
// tech_Artillery := 80 ;
34995: LD_ADDR_EXP 130
34999: PUSH
35000: LD_INT 80
35002: ST_TO_ADDR
// tech_RadMat := 81 ;
35003: LD_ADDR_EXP 131
35007: PUSH
35008: LD_INT 81
35010: ST_TO_ADDR
// tech_BasicTools := 82 ;
35011: LD_ADDR_EXP 132
35015: PUSH
35016: LD_INT 82
35018: ST_TO_ADDR
// tech_Cargo := 83 ;
35019: LD_ADDR_EXP 133
35023: PUSH
35024: LD_INT 83
35026: ST_TO_ADDR
// tech_Track := 84 ;
35027: LD_ADDR_EXP 134
35031: PUSH
35032: LD_INT 84
35034: ST_TO_ADDR
// tech_Crane := 85 ;
35035: LD_ADDR_EXP 135
35039: PUSH
35040: LD_INT 85
35042: ST_TO_ADDR
// tech_Bulldozer := 86 ;
35043: LD_ADDR_EXP 136
35047: PUSH
35048: LD_INT 86
35050: ST_TO_ADDR
// tech_Hovercraft := 87 ;
35051: LD_ADDR_EXP 137
35055: PUSH
35056: LD_INT 87
35058: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
35059: LD_ADDR_EXP 138
35063: PUSH
35064: LD_INT 88
35066: ST_TO_ADDR
// class_mastodont := 31 ;
35067: LD_ADDR_EXP 139
35071: PUSH
35072: LD_INT 31
35074: ST_TO_ADDR
// class_horse := 21 ;
35075: LD_ADDR_EXP 140
35079: PUSH
35080: LD_INT 21
35082: ST_TO_ADDR
// end ;
35083: LD_VAR 0 1
35087: RET
// every 1 do
35088: GO 35090
35090: DISABLE
// InitGlobalVariables ; end_of_file
35091: CALL 34928 0 0
35095: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35096: LD_INT 0
35098: PPUSH
35099: PPUSH
// if exist_mode then
35100: LD_VAR 0 2
35104: IFFALSE 35129
// unit := CreateCharacter ( prefix & ident ) else
35106: LD_ADDR_VAR 0 5
35110: PUSH
35111: LD_VAR 0 3
35115: PUSH
35116: LD_VAR 0 1
35120: STR
35121: PPUSH
35122: CALL_OW 34
35126: ST_TO_ADDR
35127: GO 35144
// unit := NewCharacter ( ident ) ;
35129: LD_ADDR_VAR 0 5
35133: PUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: CALL_OW 25
35143: ST_TO_ADDR
// result := unit ;
35144: LD_ADDR_VAR 0 4
35148: PUSH
35149: LD_VAR 0 5
35153: ST_TO_ADDR
// end ;
35154: LD_VAR 0 4
35158: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35159: LD_INT 0
35161: PPUSH
35162: PPUSH
// if not side or not nation then
35163: LD_VAR 0 1
35167: NOT
35168: PUSH
35169: LD_VAR 0 2
35173: NOT
35174: OR
35175: IFFALSE 35179
// exit ;
35177: GO 35947
// case nation of nation_american :
35179: LD_VAR 0 2
35183: PUSH
35184: LD_INT 1
35186: DOUBLE
35187: EQUAL
35188: IFTRUE 35192
35190: GO 35406
35192: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35193: LD_ADDR_VAR 0 4
35197: PUSH
35198: LD_INT 35
35200: PUSH
35201: LD_INT 45
35203: PUSH
35204: LD_INT 46
35206: PUSH
35207: LD_INT 47
35209: PUSH
35210: LD_INT 82
35212: PUSH
35213: LD_INT 83
35215: PUSH
35216: LD_INT 84
35218: PUSH
35219: LD_INT 85
35221: PUSH
35222: LD_INT 86
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 6
35233: PUSH
35234: LD_INT 15
35236: PUSH
35237: LD_INT 16
35239: PUSH
35240: LD_INT 7
35242: PUSH
35243: LD_INT 12
35245: PUSH
35246: LD_INT 13
35248: PUSH
35249: LD_INT 10
35251: PUSH
35252: LD_INT 14
35254: PUSH
35255: LD_INT 20
35257: PUSH
35258: LD_INT 21
35260: PUSH
35261: LD_INT 22
35263: PUSH
35264: LD_INT 25
35266: PUSH
35267: LD_INT 32
35269: PUSH
35270: LD_INT 27
35272: PUSH
35273: LD_INT 36
35275: PUSH
35276: LD_INT 69
35278: PUSH
35279: LD_INT 39
35281: PUSH
35282: LD_INT 34
35284: PUSH
35285: LD_INT 40
35287: PUSH
35288: LD_INT 48
35290: PUSH
35291: LD_INT 49
35293: PUSH
35294: LD_INT 50
35296: PUSH
35297: LD_INT 51
35299: PUSH
35300: LD_INT 52
35302: PUSH
35303: LD_INT 53
35305: PUSH
35306: LD_INT 54
35308: PUSH
35309: LD_INT 55
35311: PUSH
35312: LD_INT 56
35314: PUSH
35315: LD_INT 57
35317: PUSH
35318: LD_INT 58
35320: PUSH
35321: LD_INT 59
35323: PUSH
35324: LD_INT 60
35326: PUSH
35327: LD_INT 61
35329: PUSH
35330: LD_INT 62
35332: PUSH
35333: LD_INT 80
35335: PUSH
35336: LD_INT 82
35338: PUSH
35339: LD_INT 83
35341: PUSH
35342: LD_INT 84
35344: PUSH
35345: LD_INT 85
35347: PUSH
35348: LD_INT 86
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: ST_TO_ADDR
35404: GO 35871
35406: LD_INT 2
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35640
35414: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35415: LD_ADDR_VAR 0 4
35419: PUSH
35420: LD_INT 35
35422: PUSH
35423: LD_INT 45
35425: PUSH
35426: LD_INT 46
35428: PUSH
35429: LD_INT 47
35431: PUSH
35432: LD_INT 82
35434: PUSH
35435: LD_INT 83
35437: PUSH
35438: LD_INT 84
35440: PUSH
35441: LD_INT 85
35443: PUSH
35444: LD_INT 87
35446: PUSH
35447: LD_INT 70
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 11
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: LD_INT 4
35461: PUSH
35462: LD_INT 5
35464: PUSH
35465: LD_INT 6
35467: PUSH
35468: LD_INT 15
35470: PUSH
35471: LD_INT 18
35473: PUSH
35474: LD_INT 7
35476: PUSH
35477: LD_INT 17
35479: PUSH
35480: LD_INT 8
35482: PUSH
35483: LD_INT 20
35485: PUSH
35486: LD_INT 21
35488: PUSH
35489: LD_INT 22
35491: PUSH
35492: LD_INT 72
35494: PUSH
35495: LD_INT 26
35497: PUSH
35498: LD_INT 69
35500: PUSH
35501: LD_INT 39
35503: PUSH
35504: LD_INT 40
35506: PUSH
35507: LD_INT 41
35509: PUSH
35510: LD_INT 42
35512: PUSH
35513: LD_INT 43
35515: PUSH
35516: LD_INT 48
35518: PUSH
35519: LD_INT 49
35521: PUSH
35522: LD_INT 50
35524: PUSH
35525: LD_INT 51
35527: PUSH
35528: LD_INT 52
35530: PUSH
35531: LD_INT 53
35533: PUSH
35534: LD_INT 54
35536: PUSH
35537: LD_INT 55
35539: PUSH
35540: LD_INT 56
35542: PUSH
35543: LD_INT 60
35545: PUSH
35546: LD_INT 61
35548: PUSH
35549: LD_INT 62
35551: PUSH
35552: LD_INT 66
35554: PUSH
35555: LD_INT 67
35557: PUSH
35558: LD_INT 68
35560: PUSH
35561: LD_INT 81
35563: PUSH
35564: LD_INT 82
35566: PUSH
35567: LD_INT 83
35569: PUSH
35570: LD_INT 84
35572: PUSH
35573: LD_INT 85
35575: PUSH
35576: LD_INT 87
35578: PUSH
35579: LD_INT 88
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
35638: GO 35871
35640: LD_INT 3
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35648
35646: GO 35870
35648: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35649: LD_ADDR_VAR 0 4
35653: PUSH
35654: LD_INT 46
35656: PUSH
35657: LD_INT 47
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: LD_INT 82
35668: PUSH
35669: LD_INT 83
35671: PUSH
35672: LD_INT 84
35674: PUSH
35675: LD_INT 85
35677: PUSH
35678: LD_INT 86
35680: PUSH
35681: LD_INT 11
35683: PUSH
35684: LD_INT 9
35686: PUSH
35687: LD_INT 20
35689: PUSH
35690: LD_INT 19
35692: PUSH
35693: LD_INT 21
35695: PUSH
35696: LD_INT 24
35698: PUSH
35699: LD_INT 22
35701: PUSH
35702: LD_INT 25
35704: PUSH
35705: LD_INT 28
35707: PUSH
35708: LD_INT 29
35710: PUSH
35711: LD_INT 30
35713: PUSH
35714: LD_INT 31
35716: PUSH
35717: LD_INT 37
35719: PUSH
35720: LD_INT 38
35722: PUSH
35723: LD_INT 32
35725: PUSH
35726: LD_INT 27
35728: PUSH
35729: LD_INT 33
35731: PUSH
35732: LD_INT 69
35734: PUSH
35735: LD_INT 39
35737: PUSH
35738: LD_INT 34
35740: PUSH
35741: LD_INT 40
35743: PUSH
35744: LD_INT 71
35746: PUSH
35747: LD_INT 23
35749: PUSH
35750: LD_INT 44
35752: PUSH
35753: LD_INT 48
35755: PUSH
35756: LD_INT 49
35758: PUSH
35759: LD_INT 50
35761: PUSH
35762: LD_INT 51
35764: PUSH
35765: LD_INT 52
35767: PUSH
35768: LD_INT 53
35770: PUSH
35771: LD_INT 54
35773: PUSH
35774: LD_INT 55
35776: PUSH
35777: LD_INT 56
35779: PUSH
35780: LD_INT 57
35782: PUSH
35783: LD_INT 58
35785: PUSH
35786: LD_INT 59
35788: PUSH
35789: LD_INT 63
35791: PUSH
35792: LD_INT 64
35794: PUSH
35795: LD_INT 65
35797: PUSH
35798: LD_INT 82
35800: PUSH
35801: LD_INT 83
35803: PUSH
35804: LD_INT 84
35806: PUSH
35807: LD_INT 85
35809: PUSH
35810: LD_INT 86
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
35868: GO 35871
35870: POP
// if state > - 1 and state < 3 then
35871: LD_VAR 0 3
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: GREATER
35880: PUSH
35881: LD_VAR 0 3
35885: PUSH
35886: LD_INT 3
35888: LESS
35889: AND
35890: IFFALSE 35947
// for i in result do
35892: LD_ADDR_VAR 0 5
35896: PUSH
35897: LD_VAR 0 4
35901: PUSH
35902: FOR_IN
35903: IFFALSE 35945
// if GetTech ( i , side ) <> state then
35905: LD_VAR 0 5
35909: PPUSH
35910: LD_VAR 0 1
35914: PPUSH
35915: CALL_OW 321
35919: PUSH
35920: LD_VAR 0 3
35924: NONEQUAL
35925: IFFALSE 35943
// result := result diff i ;
35927: LD_ADDR_VAR 0 4
35931: PUSH
35932: LD_VAR 0 4
35936: PUSH
35937: LD_VAR 0 5
35941: DIFF
35942: ST_TO_ADDR
35943: GO 35902
35945: POP
35946: POP
// end ;
35947: LD_VAR 0 4
35951: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35952: LD_INT 0
35954: PPUSH
35955: PPUSH
35956: PPUSH
// result := true ;
35957: LD_ADDR_VAR 0 3
35961: PUSH
35962: LD_INT 1
35964: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35965: LD_ADDR_VAR 0 5
35969: PUSH
35970: LD_VAR 0 2
35974: PPUSH
35975: CALL_OW 480
35979: ST_TO_ADDR
// if not tmp then
35980: LD_VAR 0 5
35984: NOT
35985: IFFALSE 35989
// exit ;
35987: GO 36038
// for i in tmp do
35989: LD_ADDR_VAR 0 4
35993: PUSH
35994: LD_VAR 0 5
35998: PUSH
35999: FOR_IN
36000: IFFALSE 36036
// if GetTech ( i , side ) <> state_researched then
36002: LD_VAR 0 4
36006: PPUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 321
36016: PUSH
36017: LD_INT 2
36019: NONEQUAL
36020: IFFALSE 36034
// begin result := false ;
36022: LD_ADDR_VAR 0 3
36026: PUSH
36027: LD_INT 0
36029: ST_TO_ADDR
// exit ;
36030: POP
36031: POP
36032: GO 36038
// end ;
36034: GO 35999
36036: POP
36037: POP
// end ;
36038: LD_VAR 0 3
36042: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36043: LD_INT 0
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
36057: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36058: LD_VAR 0 1
36062: NOT
36063: PUSH
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL_OW 257
36073: PUSH
36074: LD_INT 9
36076: NONEQUAL
36077: OR
36078: IFFALSE 36082
// exit ;
36080: GO 36655
// side := GetSide ( unit ) ;
36082: LD_ADDR_VAR 0 9
36086: PUSH
36087: LD_VAR 0 1
36091: PPUSH
36092: CALL_OW 255
36096: ST_TO_ADDR
// tech_space := tech_spacanom ;
36097: LD_ADDR_VAR 0 12
36101: PUSH
36102: LD_INT 29
36104: ST_TO_ADDR
// tech_time := tech_taurad ;
36105: LD_ADDR_VAR 0 13
36109: PUSH
36110: LD_INT 28
36112: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36113: LD_ADDR_VAR 0 11
36117: PUSH
36118: LD_VAR 0 1
36122: PPUSH
36123: CALL_OW 310
36127: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36128: LD_VAR 0 11
36132: PPUSH
36133: CALL_OW 247
36137: PUSH
36138: LD_INT 2
36140: EQUAL
36141: IFFALSE 36145
// exit ;
36143: GO 36655
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36145: LD_ADDR_VAR 0 8
36149: PUSH
36150: LD_INT 81
36152: PUSH
36153: LD_VAR 0 9
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 3
36164: PUSH
36165: LD_INT 21
36167: PUSH
36168: LD_INT 3
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PPUSH
36183: CALL_OW 69
36187: ST_TO_ADDR
// if not tmp then
36188: LD_VAR 0 8
36192: NOT
36193: IFFALSE 36197
// exit ;
36195: GO 36655
// if in_unit then
36197: LD_VAR 0 11
36201: IFFALSE 36225
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36203: LD_ADDR_VAR 0 10
36207: PUSH
36208: LD_VAR 0 8
36212: PPUSH
36213: LD_VAR 0 11
36217: PPUSH
36218: CALL_OW 74
36222: ST_TO_ADDR
36223: GO 36245
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36225: LD_ADDR_VAR 0 10
36229: PUSH
36230: LD_VAR 0 8
36234: PPUSH
36235: LD_VAR 0 1
36239: PPUSH
36240: CALL_OW 74
36244: ST_TO_ADDR
// if not enemy then
36245: LD_VAR 0 10
36249: NOT
36250: IFFALSE 36254
// exit ;
36252: GO 36655
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36254: LD_VAR 0 11
36258: PUSH
36259: LD_VAR 0 11
36263: PPUSH
36264: LD_VAR 0 10
36268: PPUSH
36269: CALL_OW 296
36273: PUSH
36274: LD_INT 13
36276: GREATER
36277: AND
36278: PUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: LD_VAR 0 10
36288: PPUSH
36289: CALL_OW 296
36293: PUSH
36294: LD_INT 12
36296: GREATER
36297: OR
36298: IFFALSE 36302
// exit ;
36300: GO 36655
// missile := [ 1 ] ;
36302: LD_ADDR_VAR 0 14
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36313: LD_VAR 0 9
36317: PPUSH
36318: LD_VAR 0 12
36322: PPUSH
36323: CALL_OW 325
36327: IFFALSE 36356
// missile := Insert ( missile , missile + 1 , 2 ) ;
36329: LD_ADDR_VAR 0 14
36333: PUSH
36334: LD_VAR 0 14
36338: PPUSH
36339: LD_VAR 0 14
36343: PUSH
36344: LD_INT 1
36346: PLUS
36347: PPUSH
36348: LD_INT 2
36350: PPUSH
36351: CALL_OW 2
36355: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36356: LD_VAR 0 9
36360: PPUSH
36361: LD_VAR 0 13
36365: PPUSH
36366: CALL_OW 325
36370: PUSH
36371: LD_VAR 0 10
36375: PPUSH
36376: CALL_OW 255
36380: PPUSH
36381: LD_VAR 0 13
36385: PPUSH
36386: CALL_OW 325
36390: NOT
36391: AND
36392: IFFALSE 36421
// missile := Insert ( missile , missile + 1 , 3 ) ;
36394: LD_ADDR_VAR 0 14
36398: PUSH
36399: LD_VAR 0 14
36403: PPUSH
36404: LD_VAR 0 14
36408: PUSH
36409: LD_INT 1
36411: PLUS
36412: PPUSH
36413: LD_INT 3
36415: PPUSH
36416: CALL_OW 2
36420: ST_TO_ADDR
// if missile < 2 then
36421: LD_VAR 0 14
36425: PUSH
36426: LD_INT 2
36428: LESS
36429: IFFALSE 36433
// exit ;
36431: GO 36655
// x := GetX ( enemy ) ;
36433: LD_ADDR_VAR 0 4
36437: PUSH
36438: LD_VAR 0 10
36442: PPUSH
36443: CALL_OW 250
36447: ST_TO_ADDR
// y := GetY ( enemy ) ;
36448: LD_ADDR_VAR 0 5
36452: PUSH
36453: LD_VAR 0 10
36457: PPUSH
36458: CALL_OW 251
36462: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36463: LD_ADDR_VAR 0 6
36467: PUSH
36468: LD_VAR 0 4
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PPUSH
36477: LD_INT 1
36479: PPUSH
36480: CALL_OW 12
36484: PLUS
36485: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36486: LD_ADDR_VAR 0 7
36490: PUSH
36491: LD_VAR 0 5
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PPUSH
36500: LD_INT 1
36502: PPUSH
36503: CALL_OW 12
36507: PLUS
36508: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36509: LD_VAR 0 6
36513: PPUSH
36514: LD_VAR 0 7
36518: PPUSH
36519: CALL_OW 488
36523: NOT
36524: IFFALSE 36546
// begin _x := x ;
36526: LD_ADDR_VAR 0 6
36530: PUSH
36531: LD_VAR 0 4
36535: ST_TO_ADDR
// _y := y ;
36536: LD_ADDR_VAR 0 7
36540: PUSH
36541: LD_VAR 0 5
36545: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36546: LD_ADDR_VAR 0 3
36550: PUSH
36551: LD_INT 1
36553: PPUSH
36554: LD_VAR 0 14
36558: PPUSH
36559: CALL_OW 12
36563: ST_TO_ADDR
// case i of 1 :
36564: LD_VAR 0 3
36568: PUSH
36569: LD_INT 1
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36577
36575: GO 36594
36577: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36578: LD_VAR 0 1
36582: PPUSH
36583: LD_VAR 0 10
36587: PPUSH
36588: CALL_OW 115
36592: GO 36655
36594: LD_INT 2
36596: DOUBLE
36597: EQUAL
36598: IFTRUE 36602
36600: GO 36624
36602: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36603: LD_VAR 0 1
36607: PPUSH
36608: LD_VAR 0 6
36612: PPUSH
36613: LD_VAR 0 7
36617: PPUSH
36618: CALL_OW 153
36622: GO 36655
36624: LD_INT 3
36626: DOUBLE
36627: EQUAL
36628: IFTRUE 36632
36630: GO 36654
36632: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36633: LD_VAR 0 1
36637: PPUSH
36638: LD_VAR 0 6
36642: PPUSH
36643: LD_VAR 0 7
36647: PPUSH
36648: CALL_OW 154
36652: GO 36655
36654: POP
// end ;
36655: LD_VAR 0 2
36659: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36660: LD_INT 0
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
// if not unit or not building then
36668: LD_VAR 0 1
36672: NOT
36673: PUSH
36674: LD_VAR 0 2
36678: NOT
36679: OR
36680: IFFALSE 36684
// exit ;
36682: GO 36842
// x := GetX ( building ) ;
36684: LD_ADDR_VAR 0 5
36688: PUSH
36689: LD_VAR 0 2
36693: PPUSH
36694: CALL_OW 250
36698: ST_TO_ADDR
// y := GetY ( building ) ;
36699: LD_ADDR_VAR 0 6
36703: PUSH
36704: LD_VAR 0 2
36708: PPUSH
36709: CALL_OW 251
36713: ST_TO_ADDR
// for i = 0 to 5 do
36714: LD_ADDR_VAR 0 4
36718: PUSH
36719: DOUBLE
36720: LD_INT 0
36722: DEC
36723: ST_TO_ADDR
36724: LD_INT 5
36726: PUSH
36727: FOR_TO
36728: IFFALSE 36840
// begin _x := ShiftX ( x , i , 3 ) ;
36730: LD_ADDR_VAR 0 7
36734: PUSH
36735: LD_VAR 0 5
36739: PPUSH
36740: LD_VAR 0 4
36744: PPUSH
36745: LD_INT 3
36747: PPUSH
36748: CALL_OW 272
36752: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36753: LD_ADDR_VAR 0 8
36757: PUSH
36758: LD_VAR 0 6
36762: PPUSH
36763: LD_VAR 0 4
36767: PPUSH
36768: LD_INT 3
36770: PPUSH
36771: CALL_OW 273
36775: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36776: LD_VAR 0 7
36780: PPUSH
36781: LD_VAR 0 8
36785: PPUSH
36786: CALL_OW 488
36790: NOT
36791: IFFALSE 36795
// continue ;
36793: GO 36727
// if HexInfo ( _x , _y ) = 0 then
36795: LD_VAR 0 7
36799: PPUSH
36800: LD_VAR 0 8
36804: PPUSH
36805: CALL_OW 428
36809: PUSH
36810: LD_INT 0
36812: EQUAL
36813: IFFALSE 36838
// begin ComMoveXY ( unit , _x , _y ) ;
36815: LD_VAR 0 1
36819: PPUSH
36820: LD_VAR 0 7
36824: PPUSH
36825: LD_VAR 0 8
36829: PPUSH
36830: CALL_OW 111
// exit ;
36834: POP
36835: POP
36836: GO 36842
// end ; end ;
36838: GO 36727
36840: POP
36841: POP
// end ;
36842: LD_VAR 0 3
36846: RET
// export function ScanBase ( side , base_area ) ; begin
36847: LD_INT 0
36849: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36850: LD_ADDR_VAR 0 3
36854: PUSH
36855: LD_VAR 0 2
36859: PPUSH
36860: LD_INT 81
36862: PUSH
36863: LD_VAR 0 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PPUSH
36872: CALL_OW 70
36876: ST_TO_ADDR
// end ;
36877: LD_VAR 0 3
36881: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36882: LD_INT 0
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
// result := false ;
36888: LD_ADDR_VAR 0 2
36892: PUSH
36893: LD_INT 0
36895: ST_TO_ADDR
// side := GetSide ( unit ) ;
36896: LD_ADDR_VAR 0 3
36900: PUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: CALL_OW 255
36910: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36911: LD_ADDR_VAR 0 4
36915: PUSH
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 248
36925: ST_TO_ADDR
// case nat of 1 :
36926: LD_VAR 0 4
36930: PUSH
36931: LD_INT 1
36933: DOUBLE
36934: EQUAL
36935: IFTRUE 36939
36937: GO 36950
36939: POP
// tech := tech_lassight ; 2 :
36940: LD_ADDR_VAR 0 5
36944: PUSH
36945: LD_INT 12
36947: ST_TO_ADDR
36948: GO 36989
36950: LD_INT 2
36952: DOUBLE
36953: EQUAL
36954: IFTRUE 36958
36956: GO 36969
36958: POP
// tech := tech_mortar ; 3 :
36959: LD_ADDR_VAR 0 5
36963: PUSH
36964: LD_INT 41
36966: ST_TO_ADDR
36967: GO 36989
36969: LD_INT 3
36971: DOUBLE
36972: EQUAL
36973: IFTRUE 36977
36975: GO 36988
36977: POP
// tech := tech_bazooka ; end ;
36978: LD_ADDR_VAR 0 5
36982: PUSH
36983: LD_INT 44
36985: ST_TO_ADDR
36986: GO 36989
36988: POP
// if Researched ( side , tech ) then
36989: LD_VAR 0 3
36993: PPUSH
36994: LD_VAR 0 5
36998: PPUSH
36999: CALL_OW 325
37003: IFFALSE 37030
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37005: LD_ADDR_VAR 0 2
37009: PUSH
37010: LD_INT 5
37012: PUSH
37013: LD_INT 8
37015: PUSH
37016: LD_INT 9
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: LIST
37023: PUSH
37024: LD_VAR 0 4
37028: ARRAY
37029: ST_TO_ADDR
// end ;
37030: LD_VAR 0 2
37034: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37035: LD_INT 0
37037: PPUSH
37038: PPUSH
37039: PPUSH
// if not mines then
37040: LD_VAR 0 2
37044: NOT
37045: IFFALSE 37049
// exit ;
37047: GO 37193
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37049: LD_ADDR_VAR 0 5
37053: PUSH
37054: LD_INT 81
37056: PUSH
37057: LD_VAR 0 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 3
37068: PUSH
37069: LD_INT 21
37071: PUSH
37072: LD_INT 3
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PPUSH
37087: CALL_OW 69
37091: ST_TO_ADDR
// for i in mines do
37092: LD_ADDR_VAR 0 4
37096: PUSH
37097: LD_VAR 0 2
37101: PUSH
37102: FOR_IN
37103: IFFALSE 37191
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37105: LD_VAR 0 4
37109: PUSH
37110: LD_INT 1
37112: ARRAY
37113: PPUSH
37114: LD_VAR 0 4
37118: PUSH
37119: LD_INT 2
37121: ARRAY
37122: PPUSH
37123: CALL_OW 458
37127: NOT
37128: IFFALSE 37132
// continue ;
37130: GO 37102
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37132: LD_VAR 0 4
37136: PUSH
37137: LD_INT 1
37139: ARRAY
37140: PPUSH
37141: LD_VAR 0 4
37145: PUSH
37146: LD_INT 2
37148: ARRAY
37149: PPUSH
37150: CALL_OW 428
37154: PUSH
37155: LD_VAR 0 5
37159: IN
37160: IFFALSE 37189
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37162: LD_VAR 0 4
37166: PUSH
37167: LD_INT 1
37169: ARRAY
37170: PPUSH
37171: LD_VAR 0 4
37175: PUSH
37176: LD_INT 2
37178: ARRAY
37179: PPUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 456
// end ;
37189: GO 37102
37191: POP
37192: POP
// end ;
37193: LD_VAR 0 3
37197: RET
// export function Count ( array ) ; var i ; begin
37198: LD_INT 0
37200: PPUSH
37201: PPUSH
// result := 0 ;
37202: LD_ADDR_VAR 0 2
37206: PUSH
37207: LD_INT 0
37209: ST_TO_ADDR
// for i in array do
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_VAR 0 1
37219: PUSH
37220: FOR_IN
37221: IFFALSE 37245
// if i then
37223: LD_VAR 0 3
37227: IFFALSE 37243
// result := result + 1 ;
37229: LD_ADDR_VAR 0 2
37233: PUSH
37234: LD_VAR 0 2
37238: PUSH
37239: LD_INT 1
37241: PLUS
37242: ST_TO_ADDR
37243: GO 37220
37245: POP
37246: POP
// end ;
37247: LD_VAR 0 2
37251: RET
// export function IsEmpty ( building ) ; begin
37252: LD_INT 0
37254: PPUSH
// if not building then
37255: LD_VAR 0 1
37259: NOT
37260: IFFALSE 37264
// exit ;
37262: GO 37307
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37264: LD_ADDR_VAR 0 2
37268: PUSH
37269: LD_VAR 0 1
37273: PUSH
37274: LD_INT 22
37276: PUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: CALL_OW 255
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 58
37293: PUSH
37294: EMPTY
37295: LIST
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PPUSH
37301: CALL_OW 69
37305: IN
37306: ST_TO_ADDR
// end ;
37307: LD_VAR 0 2
37311: RET
// export function IsNotFull ( building ) ; begin
37312: LD_INT 0
37314: PPUSH
// if not building then
37315: LD_VAR 0 1
37319: NOT
37320: IFFALSE 37324
// exit ;
37322: GO 37343
// result := UnitsInside ( building ) < 6 ;
37324: LD_ADDR_VAR 0 2
37328: PUSH
37329: LD_VAR 0 1
37333: PPUSH
37334: CALL_OW 313
37338: PUSH
37339: LD_INT 6
37341: LESS
37342: ST_TO_ADDR
// end ;
37343: LD_VAR 0 2
37347: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37348: LD_INT 0
37350: PPUSH
37351: PPUSH
37352: PPUSH
37353: PPUSH
// tmp := [ ] ;
37354: LD_ADDR_VAR 0 3
37358: PUSH
37359: EMPTY
37360: ST_TO_ADDR
// list := [ ] ;
37361: LD_ADDR_VAR 0 5
37365: PUSH
37366: EMPTY
37367: ST_TO_ADDR
// for i = 16 to 25 do
37368: LD_ADDR_VAR 0 4
37372: PUSH
37373: DOUBLE
37374: LD_INT 16
37376: DEC
37377: ST_TO_ADDR
37378: LD_INT 25
37380: PUSH
37381: FOR_TO
37382: IFFALSE 37455
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37384: LD_ADDR_VAR 0 3
37388: PUSH
37389: LD_VAR 0 3
37393: PUSH
37394: LD_INT 22
37396: PUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 255
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 91
37413: PUSH
37414: LD_VAR 0 1
37418: PUSH
37419: LD_INT 6
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 30
37429: PUSH
37430: LD_VAR 0 4
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: PPUSH
37447: CALL_OW 69
37451: ADD
37452: ST_TO_ADDR
37453: GO 37381
37455: POP
37456: POP
// for i = 1 to tmp do
37457: LD_ADDR_VAR 0 4
37461: PUSH
37462: DOUBLE
37463: LD_INT 1
37465: DEC
37466: ST_TO_ADDR
37467: LD_VAR 0 3
37471: PUSH
37472: FOR_TO
37473: IFFALSE 37561
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37475: LD_ADDR_VAR 0 5
37479: PUSH
37480: LD_VAR 0 5
37484: PUSH
37485: LD_VAR 0 3
37489: PUSH
37490: LD_VAR 0 4
37494: ARRAY
37495: PPUSH
37496: CALL_OW 266
37500: PUSH
37501: LD_VAR 0 3
37505: PUSH
37506: LD_VAR 0 4
37510: ARRAY
37511: PPUSH
37512: CALL_OW 250
37516: PUSH
37517: LD_VAR 0 3
37521: PUSH
37522: LD_VAR 0 4
37526: ARRAY
37527: PPUSH
37528: CALL_OW 251
37532: PUSH
37533: LD_VAR 0 3
37537: PUSH
37538: LD_VAR 0 4
37542: ARRAY
37543: PPUSH
37544: CALL_OW 254
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: PUSH
37555: EMPTY
37556: LIST
37557: ADD
37558: ST_TO_ADDR
37559: GO 37472
37561: POP
37562: POP
// result := list ;
37563: LD_ADDR_VAR 0 2
37567: PUSH
37568: LD_VAR 0 5
37572: ST_TO_ADDR
// end ;
37573: LD_VAR 0 2
37577: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37578: LD_INT 0
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
// if not factory then
37587: LD_VAR 0 1
37591: NOT
37592: IFFALSE 37596
// exit ;
37594: GO 38189
// if control = control_apeman then
37596: LD_VAR 0 4
37600: PUSH
37601: LD_INT 5
37603: EQUAL
37604: IFFALSE 37713
// begin tmp := UnitsInside ( factory ) ;
37606: LD_ADDR_VAR 0 8
37610: PUSH
37611: LD_VAR 0 1
37615: PPUSH
37616: CALL_OW 313
37620: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37621: LD_VAR 0 8
37625: PPUSH
37626: LD_INT 25
37628: PUSH
37629: LD_INT 12
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PPUSH
37636: CALL_OW 72
37640: NOT
37641: IFFALSE 37651
// control := control_manual ;
37643: LD_ADDR_VAR 0 4
37647: PUSH
37648: LD_INT 1
37650: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37651: LD_ADDR_VAR 0 8
37655: PUSH
37656: LD_VAR 0 1
37660: PPUSH
37661: CALL 37348 0 1
37665: ST_TO_ADDR
// if tmp then
37666: LD_VAR 0 8
37670: IFFALSE 37713
// begin for i in tmp do
37672: LD_ADDR_VAR 0 7
37676: PUSH
37677: LD_VAR 0 8
37681: PUSH
37682: FOR_IN
37683: IFFALSE 37711
// if i [ 1 ] = b_ext_radio then
37685: LD_VAR 0 7
37689: PUSH
37690: LD_INT 1
37692: ARRAY
37693: PUSH
37694: LD_INT 22
37696: EQUAL
37697: IFFALSE 37709
// begin control := control_remote ;
37699: LD_ADDR_VAR 0 4
37703: PUSH
37704: LD_INT 2
37706: ST_TO_ADDR
// break ;
37707: GO 37711
// end ;
37709: GO 37682
37711: POP
37712: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37713: LD_VAR 0 1
37717: PPUSH
37718: LD_VAR 0 2
37722: PPUSH
37723: LD_VAR 0 3
37727: PPUSH
37728: LD_VAR 0 4
37732: PPUSH
37733: LD_VAR 0 5
37737: PPUSH
37738: CALL_OW 448
37742: IFFALSE 37777
// begin result := [ chassis , engine , control , weapon ] ;
37744: LD_ADDR_VAR 0 6
37748: PUSH
37749: LD_VAR 0 2
37753: PUSH
37754: LD_VAR 0 3
37758: PUSH
37759: LD_VAR 0 4
37763: PUSH
37764: LD_VAR 0 5
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: ST_TO_ADDR
// exit ;
37775: GO 38189
// end ; _chassis := AvailableChassisList ( factory ) ;
37777: LD_ADDR_VAR 0 9
37781: PUSH
37782: LD_VAR 0 1
37786: PPUSH
37787: CALL_OW 475
37791: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37792: LD_ADDR_VAR 0 11
37796: PUSH
37797: LD_VAR 0 1
37801: PPUSH
37802: CALL_OW 476
37806: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37807: LD_ADDR_VAR 0 12
37811: PUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL_OW 477
37821: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37822: LD_ADDR_VAR 0 10
37826: PUSH
37827: LD_VAR 0 1
37831: PPUSH
37832: CALL_OW 478
37836: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37837: LD_VAR 0 9
37841: NOT
37842: PUSH
37843: LD_VAR 0 11
37847: NOT
37848: OR
37849: PUSH
37850: LD_VAR 0 12
37854: NOT
37855: OR
37856: PUSH
37857: LD_VAR 0 10
37861: NOT
37862: OR
37863: IFFALSE 37898
// begin result := [ chassis , engine , control , weapon ] ;
37865: LD_ADDR_VAR 0 6
37869: PUSH
37870: LD_VAR 0 2
37874: PUSH
37875: LD_VAR 0 3
37879: PUSH
37880: LD_VAR 0 4
37884: PUSH
37885: LD_VAR 0 5
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// exit ;
37896: GO 38189
// end ; if not chassis in _chassis then
37898: LD_VAR 0 2
37902: PUSH
37903: LD_VAR 0 9
37907: IN
37908: NOT
37909: IFFALSE 37935
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37911: LD_ADDR_VAR 0 2
37915: PUSH
37916: LD_VAR 0 9
37920: PUSH
37921: LD_INT 1
37923: PPUSH
37924: LD_VAR 0 9
37928: PPUSH
37929: CALL_OW 12
37933: ARRAY
37934: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37935: LD_VAR 0 2
37939: PPUSH
37940: LD_VAR 0 3
37944: PPUSH
37945: CALL 38194 0 2
37949: NOT
37950: IFFALSE 38009
// repeat engine := _engine [ 1 ] ;
37952: LD_ADDR_VAR 0 3
37956: PUSH
37957: LD_VAR 0 11
37961: PUSH
37962: LD_INT 1
37964: ARRAY
37965: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37966: LD_ADDR_VAR 0 11
37970: PUSH
37971: LD_VAR 0 11
37975: PPUSH
37976: LD_INT 1
37978: PPUSH
37979: CALL_OW 3
37983: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37984: LD_VAR 0 2
37988: PPUSH
37989: LD_VAR 0 3
37993: PPUSH
37994: CALL 38194 0 2
37998: PUSH
37999: LD_VAR 0 11
38003: PUSH
38004: EMPTY
38005: EQUAL
38006: OR
38007: IFFALSE 37952
// if not control in _control then
38009: LD_VAR 0 4
38013: PUSH
38014: LD_VAR 0 12
38018: IN
38019: NOT
38020: IFFALSE 38046
// control := _control [ rand ( 1 , _control ) ] ;
38022: LD_ADDR_VAR 0 4
38026: PUSH
38027: LD_VAR 0 12
38031: PUSH
38032: LD_INT 1
38034: PPUSH
38035: LD_VAR 0 12
38039: PPUSH
38040: CALL_OW 12
38044: ARRAY
38045: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38046: LD_VAR 0 2
38050: PPUSH
38051: LD_VAR 0 5
38055: PPUSH
38056: CALL 38414 0 2
38060: NOT
38061: IFFALSE 38120
// repeat weapon := _weapon [ 1 ] ;
38063: LD_ADDR_VAR 0 5
38067: PUSH
38068: LD_VAR 0 10
38072: PUSH
38073: LD_INT 1
38075: ARRAY
38076: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38077: LD_ADDR_VAR 0 10
38081: PUSH
38082: LD_VAR 0 10
38086: PPUSH
38087: LD_INT 1
38089: PPUSH
38090: CALL_OW 3
38094: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38095: LD_VAR 0 2
38099: PPUSH
38100: LD_VAR 0 5
38104: PPUSH
38105: CALL 38414 0 2
38109: PUSH
38110: LD_VAR 0 10
38114: PUSH
38115: EMPTY
38116: EQUAL
38117: OR
38118: IFFALSE 38063
// result := [ ] ;
38120: LD_ADDR_VAR 0 6
38124: PUSH
38125: EMPTY
38126: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38127: LD_VAR 0 1
38131: PPUSH
38132: LD_VAR 0 2
38136: PPUSH
38137: LD_VAR 0 3
38141: PPUSH
38142: LD_VAR 0 4
38146: PPUSH
38147: LD_VAR 0 5
38151: PPUSH
38152: CALL_OW 448
38156: IFFALSE 38189
// result := [ chassis , engine , control , weapon ] ;
38158: LD_ADDR_VAR 0 6
38162: PUSH
38163: LD_VAR 0 2
38167: PUSH
38168: LD_VAR 0 3
38172: PUSH
38173: LD_VAR 0 4
38177: PUSH
38178: LD_VAR 0 5
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// end ;
38189: LD_VAR 0 6
38193: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38194: LD_INT 0
38196: PPUSH
// if not chassis or not engine then
38197: LD_VAR 0 1
38201: NOT
38202: PUSH
38203: LD_VAR 0 2
38207: NOT
38208: OR
38209: IFFALSE 38213
// exit ;
38211: GO 38409
// case engine of engine_solar :
38213: LD_VAR 0 2
38217: PUSH
38218: LD_INT 2
38220: DOUBLE
38221: EQUAL
38222: IFTRUE 38226
38224: GO 38264
38226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38227: LD_ADDR_VAR 0 3
38231: PUSH
38232: LD_INT 11
38234: PUSH
38235: LD_INT 12
38237: PUSH
38238: LD_INT 13
38240: PUSH
38241: LD_INT 14
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: LD_INT 3
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: ST_TO_ADDR
38262: GO 38393
38264: LD_INT 1
38266: DOUBLE
38267: EQUAL
38268: IFTRUE 38272
38270: GO 38334
38272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38273: LD_ADDR_VAR 0 3
38277: PUSH
38278: LD_INT 11
38280: PUSH
38281: LD_INT 12
38283: PUSH
38284: LD_INT 13
38286: PUSH
38287: LD_INT 14
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: LD_INT 2
38295: PUSH
38296: LD_INT 3
38298: PUSH
38299: LD_INT 4
38301: PUSH
38302: LD_INT 5
38304: PUSH
38305: LD_INT 21
38307: PUSH
38308: LD_INT 23
38310: PUSH
38311: LD_INT 22
38313: PUSH
38314: LD_INT 24
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: ST_TO_ADDR
38332: GO 38393
38334: LD_INT 3
38336: DOUBLE
38337: EQUAL
38338: IFTRUE 38342
38340: GO 38392
38342: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38343: LD_ADDR_VAR 0 3
38347: PUSH
38348: LD_INT 13
38350: PUSH
38351: LD_INT 14
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: LD_INT 4
38362: PUSH
38363: LD_INT 5
38365: PUSH
38366: LD_INT 21
38368: PUSH
38369: LD_INT 22
38371: PUSH
38372: LD_INT 23
38374: PUSH
38375: LD_INT 24
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: ST_TO_ADDR
38390: GO 38393
38392: POP
// result := ( chassis in result ) ;
38393: LD_ADDR_VAR 0 3
38397: PUSH
38398: LD_VAR 0 1
38402: PUSH
38403: LD_VAR 0 3
38407: IN
38408: ST_TO_ADDR
// end ;
38409: LD_VAR 0 3
38413: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38414: LD_INT 0
38416: PPUSH
// if not chassis or not weapon then
38417: LD_VAR 0 1
38421: NOT
38422: PUSH
38423: LD_VAR 0 2
38427: NOT
38428: OR
38429: IFFALSE 38433
// exit ;
38431: GO 39495
// case weapon of us_machine_gun :
38433: LD_VAR 0 2
38437: PUSH
38438: LD_INT 2
38440: DOUBLE
38441: EQUAL
38442: IFTRUE 38446
38444: GO 38476
38446: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38447: LD_ADDR_VAR 0 3
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: LD_INT 4
38463: PUSH
38464: LD_INT 5
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: ST_TO_ADDR
38474: GO 39479
38476: LD_INT 3
38478: DOUBLE
38479: EQUAL
38480: IFTRUE 38484
38482: GO 38514
38484: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: LD_INT 3
38498: PUSH
38499: LD_INT 4
38501: PUSH
38502: LD_INT 5
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: ST_TO_ADDR
38512: GO 39479
38514: LD_INT 11
38516: DOUBLE
38517: EQUAL
38518: IFTRUE 38522
38520: GO 38552
38522: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38523: LD_ADDR_VAR 0 3
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 3
38536: PUSH
38537: LD_INT 4
38539: PUSH
38540: LD_INT 5
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: ST_TO_ADDR
38550: GO 39479
38552: LD_INT 4
38554: DOUBLE
38555: EQUAL
38556: IFTRUE 38560
38558: GO 38586
38560: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38561: LD_ADDR_VAR 0 3
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 4
38574: PUSH
38575: LD_INT 5
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: ST_TO_ADDR
38584: GO 39479
38586: LD_INT 5
38588: DOUBLE
38589: EQUAL
38590: IFTRUE 38594
38592: GO 38620
38594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38595: LD_ADDR_VAR 0 3
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 3
38605: PUSH
38606: LD_INT 4
38608: PUSH
38609: LD_INT 5
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: ST_TO_ADDR
38618: GO 39479
38620: LD_INT 9
38622: DOUBLE
38623: EQUAL
38624: IFTRUE 38628
38626: GO 38654
38628: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38629: LD_ADDR_VAR 0 3
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: LD_INT 4
38642: PUSH
38643: LD_INT 5
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
38652: GO 39479
38654: LD_INT 7
38656: DOUBLE
38657: EQUAL
38658: IFTRUE 38662
38660: GO 38688
38662: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38663: LD_ADDR_VAR 0 3
38667: PUSH
38668: LD_INT 2
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: LD_INT 4
38676: PUSH
38677: LD_INT 5
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
38686: GO 39479
38688: LD_INT 12
38690: DOUBLE
38691: EQUAL
38692: IFTRUE 38696
38694: GO 38722
38696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38697: LD_ADDR_VAR 0 3
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 3
38707: PUSH
38708: LD_INT 4
38710: PUSH
38711: LD_INT 5
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
38720: GO 39479
38722: LD_INT 13
38724: DOUBLE
38725: EQUAL
38726: IFTRUE 38730
38728: GO 38756
38730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38731: LD_ADDR_VAR 0 3
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 3
38741: PUSH
38742: LD_INT 4
38744: PUSH
38745: LD_INT 5
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: ST_TO_ADDR
38754: GO 39479
38756: LD_INT 14
38758: DOUBLE
38759: EQUAL
38760: IFTRUE 38764
38762: GO 38782
38764: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38765: LD_ADDR_VAR 0 3
38769: PUSH
38770: LD_INT 4
38772: PUSH
38773: LD_INT 5
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: ST_TO_ADDR
38780: GO 39479
38782: LD_INT 6
38784: DOUBLE
38785: EQUAL
38786: IFTRUE 38790
38788: GO 38808
38790: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38791: LD_ADDR_VAR 0 3
38795: PUSH
38796: LD_INT 4
38798: PUSH
38799: LD_INT 5
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: ST_TO_ADDR
38806: GO 39479
38808: LD_INT 10
38810: DOUBLE
38811: EQUAL
38812: IFTRUE 38816
38814: GO 38834
38816: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38817: LD_ADDR_VAR 0 3
38821: PUSH
38822: LD_INT 4
38824: PUSH
38825: LD_INT 5
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: ST_TO_ADDR
38832: GO 39479
38834: LD_INT 22
38836: DOUBLE
38837: EQUAL
38838: IFTRUE 38842
38840: GO 38868
38842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38843: LD_ADDR_VAR 0 3
38847: PUSH
38848: LD_INT 11
38850: PUSH
38851: LD_INT 12
38853: PUSH
38854: LD_INT 13
38856: PUSH
38857: LD_INT 14
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: ST_TO_ADDR
38866: GO 39479
38868: LD_INT 23
38870: DOUBLE
38871: EQUAL
38872: IFTRUE 38876
38874: GO 38902
38876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38877: LD_ADDR_VAR 0 3
38881: PUSH
38882: LD_INT 11
38884: PUSH
38885: LD_INT 12
38887: PUSH
38888: LD_INT 13
38890: PUSH
38891: LD_INT 14
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: ST_TO_ADDR
38900: GO 39479
38902: LD_INT 24
38904: DOUBLE
38905: EQUAL
38906: IFTRUE 38910
38908: GO 38936
38910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38911: LD_ADDR_VAR 0 3
38915: PUSH
38916: LD_INT 11
38918: PUSH
38919: LD_INT 12
38921: PUSH
38922: LD_INT 13
38924: PUSH
38925: LD_INT 14
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: ST_TO_ADDR
38934: GO 39479
38936: LD_INT 30
38938: DOUBLE
38939: EQUAL
38940: IFTRUE 38944
38942: GO 38970
38944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38945: LD_ADDR_VAR 0 3
38949: PUSH
38950: LD_INT 11
38952: PUSH
38953: LD_INT 12
38955: PUSH
38956: LD_INT 13
38958: PUSH
38959: LD_INT 14
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: ST_TO_ADDR
38968: GO 39479
38970: LD_INT 25
38972: DOUBLE
38973: EQUAL
38974: IFTRUE 38978
38976: GO 38996
38978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38979: LD_ADDR_VAR 0 3
38983: PUSH
38984: LD_INT 13
38986: PUSH
38987: LD_INT 14
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: ST_TO_ADDR
38994: GO 39479
38996: LD_INT 27
38998: DOUBLE
38999: EQUAL
39000: IFTRUE 39004
39002: GO 39022
39004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39005: LD_ADDR_VAR 0 3
39009: PUSH
39010: LD_INT 13
39012: PUSH
39013: LD_INT 14
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: ST_TO_ADDR
39020: GO 39479
39022: LD_EXP 127
39026: DOUBLE
39027: EQUAL
39028: IFTRUE 39032
39030: GO 39058
39032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39033: LD_ADDR_VAR 0 3
39037: PUSH
39038: LD_INT 11
39040: PUSH
39041: LD_INT 12
39043: PUSH
39044: LD_INT 13
39046: PUSH
39047: LD_INT 14
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: ST_TO_ADDR
39056: GO 39479
39058: LD_INT 28
39060: DOUBLE
39061: EQUAL
39062: IFTRUE 39066
39064: GO 39084
39066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39067: LD_ADDR_VAR 0 3
39071: PUSH
39072: LD_INT 13
39074: PUSH
39075: LD_INT 14
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: ST_TO_ADDR
39082: GO 39479
39084: LD_INT 29
39086: DOUBLE
39087: EQUAL
39088: IFTRUE 39092
39090: GO 39110
39092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39093: LD_ADDR_VAR 0 3
39097: PUSH
39098: LD_INT 13
39100: PUSH
39101: LD_INT 14
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: ST_TO_ADDR
39108: GO 39479
39110: LD_INT 31
39112: DOUBLE
39113: EQUAL
39114: IFTRUE 39118
39116: GO 39136
39118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39119: LD_ADDR_VAR 0 3
39123: PUSH
39124: LD_INT 13
39126: PUSH
39127: LD_INT 14
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: ST_TO_ADDR
39134: GO 39479
39136: LD_INT 26
39138: DOUBLE
39139: EQUAL
39140: IFTRUE 39144
39142: GO 39162
39144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: LD_INT 13
39152: PUSH
39153: LD_INT 14
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: ST_TO_ADDR
39160: GO 39479
39162: LD_INT 42
39164: DOUBLE
39165: EQUAL
39166: IFTRUE 39170
39168: GO 39196
39170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39171: LD_ADDR_VAR 0 3
39175: PUSH
39176: LD_INT 21
39178: PUSH
39179: LD_INT 22
39181: PUSH
39182: LD_INT 23
39184: PUSH
39185: LD_INT 24
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: ST_TO_ADDR
39194: GO 39479
39196: LD_INT 43
39198: DOUBLE
39199: EQUAL
39200: IFTRUE 39204
39202: GO 39230
39204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39205: LD_ADDR_VAR 0 3
39209: PUSH
39210: LD_INT 21
39212: PUSH
39213: LD_INT 22
39215: PUSH
39216: LD_INT 23
39218: PUSH
39219: LD_INT 24
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: ST_TO_ADDR
39228: GO 39479
39230: LD_INT 44
39232: DOUBLE
39233: EQUAL
39234: IFTRUE 39238
39236: GO 39264
39238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39239: LD_ADDR_VAR 0 3
39243: PUSH
39244: LD_INT 21
39246: PUSH
39247: LD_INT 22
39249: PUSH
39250: LD_INT 23
39252: PUSH
39253: LD_INT 24
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: ST_TO_ADDR
39262: GO 39479
39264: LD_INT 45
39266: DOUBLE
39267: EQUAL
39268: IFTRUE 39272
39270: GO 39298
39272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39273: LD_ADDR_VAR 0 3
39277: PUSH
39278: LD_INT 21
39280: PUSH
39281: LD_INT 22
39283: PUSH
39284: LD_INT 23
39286: PUSH
39287: LD_INT 24
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: ST_TO_ADDR
39296: GO 39479
39298: LD_INT 49
39300: DOUBLE
39301: EQUAL
39302: IFTRUE 39306
39304: GO 39332
39306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39307: LD_ADDR_VAR 0 3
39311: PUSH
39312: LD_INT 21
39314: PUSH
39315: LD_INT 22
39317: PUSH
39318: LD_INT 23
39320: PUSH
39321: LD_INT 24
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: ST_TO_ADDR
39330: GO 39479
39332: LD_INT 51
39334: DOUBLE
39335: EQUAL
39336: IFTRUE 39340
39338: GO 39366
39340: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39341: LD_ADDR_VAR 0 3
39345: PUSH
39346: LD_INT 21
39348: PUSH
39349: LD_INT 22
39351: PUSH
39352: LD_INT 23
39354: PUSH
39355: LD_INT 24
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: ST_TO_ADDR
39364: GO 39479
39366: LD_INT 52
39368: DOUBLE
39369: EQUAL
39370: IFTRUE 39374
39372: GO 39400
39374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39375: LD_ADDR_VAR 0 3
39379: PUSH
39380: LD_INT 21
39382: PUSH
39383: LD_INT 22
39385: PUSH
39386: LD_INT 23
39388: PUSH
39389: LD_INT 24
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: ST_TO_ADDR
39398: GO 39479
39400: LD_INT 53
39402: DOUBLE
39403: EQUAL
39404: IFTRUE 39408
39406: GO 39426
39408: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39409: LD_ADDR_VAR 0 3
39413: PUSH
39414: LD_INT 23
39416: PUSH
39417: LD_INT 24
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: ST_TO_ADDR
39424: GO 39479
39426: LD_INT 46
39428: DOUBLE
39429: EQUAL
39430: IFTRUE 39434
39432: GO 39452
39434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39435: LD_ADDR_VAR 0 3
39439: PUSH
39440: LD_INT 23
39442: PUSH
39443: LD_INT 24
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: ST_TO_ADDR
39450: GO 39479
39452: LD_INT 47
39454: DOUBLE
39455: EQUAL
39456: IFTRUE 39460
39458: GO 39478
39460: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39461: LD_ADDR_VAR 0 3
39465: PUSH
39466: LD_INT 23
39468: PUSH
39469: LD_INT 24
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: ST_TO_ADDR
39476: GO 39479
39478: POP
// result := ( chassis in result ) ;
39479: LD_ADDR_VAR 0 3
39483: PUSH
39484: LD_VAR 0 1
39488: PUSH
39489: LD_VAR 0 3
39493: IN
39494: ST_TO_ADDR
// end ;
39495: LD_VAR 0 3
39499: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39500: LD_INT 0
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
// result := array ;
39509: LD_ADDR_VAR 0 5
39513: PUSH
39514: LD_VAR 0 1
39518: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39519: LD_VAR 0 1
39523: NOT
39524: PUSH
39525: LD_VAR 0 2
39529: NOT
39530: OR
39531: PUSH
39532: LD_VAR 0 3
39536: NOT
39537: OR
39538: PUSH
39539: LD_VAR 0 2
39543: PUSH
39544: LD_VAR 0 1
39548: GREATER
39549: OR
39550: PUSH
39551: LD_VAR 0 3
39555: PUSH
39556: LD_VAR 0 1
39560: GREATER
39561: OR
39562: IFFALSE 39566
// exit ;
39564: GO 39862
// if direction then
39566: LD_VAR 0 4
39570: IFFALSE 39634
// begin d := 1 ;
39572: LD_ADDR_VAR 0 9
39576: PUSH
39577: LD_INT 1
39579: ST_TO_ADDR
// if i_from > i_to then
39580: LD_VAR 0 2
39584: PUSH
39585: LD_VAR 0 3
39589: GREATER
39590: IFFALSE 39616
// length := ( array - i_from ) + i_to else
39592: LD_ADDR_VAR 0 11
39596: PUSH
39597: LD_VAR 0 1
39601: PUSH
39602: LD_VAR 0 2
39606: MINUS
39607: PUSH
39608: LD_VAR 0 3
39612: PLUS
39613: ST_TO_ADDR
39614: GO 39632
// length := i_to - i_from ;
39616: LD_ADDR_VAR 0 11
39620: PUSH
39621: LD_VAR 0 3
39625: PUSH
39626: LD_VAR 0 2
39630: MINUS
39631: ST_TO_ADDR
// end else
39632: GO 39695
// begin d := - 1 ;
39634: LD_ADDR_VAR 0 9
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: ST_TO_ADDR
// if i_from > i_to then
39643: LD_VAR 0 2
39647: PUSH
39648: LD_VAR 0 3
39652: GREATER
39653: IFFALSE 39673
// length := i_from - i_to else
39655: LD_ADDR_VAR 0 11
39659: PUSH
39660: LD_VAR 0 2
39664: PUSH
39665: LD_VAR 0 3
39669: MINUS
39670: ST_TO_ADDR
39671: GO 39695
// length := ( array - i_to ) + i_from ;
39673: LD_ADDR_VAR 0 11
39677: PUSH
39678: LD_VAR 0 1
39682: PUSH
39683: LD_VAR 0 3
39687: MINUS
39688: PUSH
39689: LD_VAR 0 2
39693: PLUS
39694: ST_TO_ADDR
// end ; if not length then
39695: LD_VAR 0 11
39699: NOT
39700: IFFALSE 39704
// exit ;
39702: GO 39862
// tmp := array ;
39704: LD_ADDR_VAR 0 10
39708: PUSH
39709: LD_VAR 0 1
39713: ST_TO_ADDR
// for i = 1 to length do
39714: LD_ADDR_VAR 0 6
39718: PUSH
39719: DOUBLE
39720: LD_INT 1
39722: DEC
39723: ST_TO_ADDR
39724: LD_VAR 0 11
39728: PUSH
39729: FOR_TO
39730: IFFALSE 39850
// begin for j = 1 to array do
39732: LD_ADDR_VAR 0 7
39736: PUSH
39737: DOUBLE
39738: LD_INT 1
39740: DEC
39741: ST_TO_ADDR
39742: LD_VAR 0 1
39746: PUSH
39747: FOR_TO
39748: IFFALSE 39836
// begin k := j + d ;
39750: LD_ADDR_VAR 0 8
39754: PUSH
39755: LD_VAR 0 7
39759: PUSH
39760: LD_VAR 0 9
39764: PLUS
39765: ST_TO_ADDR
// if k > array then
39766: LD_VAR 0 8
39770: PUSH
39771: LD_VAR 0 1
39775: GREATER
39776: IFFALSE 39786
// k := 1 ;
39778: LD_ADDR_VAR 0 8
39782: PUSH
39783: LD_INT 1
39785: ST_TO_ADDR
// if not k then
39786: LD_VAR 0 8
39790: NOT
39791: IFFALSE 39803
// k := array ;
39793: LD_ADDR_VAR 0 8
39797: PUSH
39798: LD_VAR 0 1
39802: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39803: LD_ADDR_VAR 0 10
39807: PUSH
39808: LD_VAR 0 10
39812: PPUSH
39813: LD_VAR 0 8
39817: PPUSH
39818: LD_VAR 0 1
39822: PUSH
39823: LD_VAR 0 7
39827: ARRAY
39828: PPUSH
39829: CALL_OW 1
39833: ST_TO_ADDR
// end ;
39834: GO 39747
39836: POP
39837: POP
// array := tmp ;
39838: LD_ADDR_VAR 0 1
39842: PUSH
39843: LD_VAR 0 10
39847: ST_TO_ADDR
// end ;
39848: GO 39729
39850: POP
39851: POP
// result := array ;
39852: LD_ADDR_VAR 0 5
39856: PUSH
39857: LD_VAR 0 1
39861: ST_TO_ADDR
// end ;
39862: LD_VAR 0 5
39866: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39867: LD_INT 0
39869: PPUSH
39870: PPUSH
// result := 0 ;
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_INT 0
39878: ST_TO_ADDR
// if not array or not value in array then
39879: LD_VAR 0 1
39883: NOT
39884: PUSH
39885: LD_VAR 0 2
39889: PUSH
39890: LD_VAR 0 1
39894: IN
39895: NOT
39896: OR
39897: IFFALSE 39901
// exit ;
39899: GO 39955
// for i = 1 to array do
39901: LD_ADDR_VAR 0 4
39905: PUSH
39906: DOUBLE
39907: LD_INT 1
39909: DEC
39910: ST_TO_ADDR
39911: LD_VAR 0 1
39915: PUSH
39916: FOR_TO
39917: IFFALSE 39953
// if value = array [ i ] then
39919: LD_VAR 0 2
39923: PUSH
39924: LD_VAR 0 1
39928: PUSH
39929: LD_VAR 0 4
39933: ARRAY
39934: EQUAL
39935: IFFALSE 39951
// begin result := i ;
39937: LD_ADDR_VAR 0 3
39941: PUSH
39942: LD_VAR 0 4
39946: ST_TO_ADDR
// exit ;
39947: POP
39948: POP
39949: GO 39955
// end ;
39951: GO 39916
39953: POP
39954: POP
// end ;
39955: LD_VAR 0 3
39959: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39960: LD_INT 0
39962: PPUSH
// vc_chassis := chassis ;
39963: LD_ADDR_OWVAR 37
39967: PUSH
39968: LD_VAR 0 1
39972: ST_TO_ADDR
// vc_engine := engine ;
39973: LD_ADDR_OWVAR 39
39977: PUSH
39978: LD_VAR 0 2
39982: ST_TO_ADDR
// vc_control := control ;
39983: LD_ADDR_OWVAR 38
39987: PUSH
39988: LD_VAR 0 3
39992: ST_TO_ADDR
// vc_weapon := weapon ;
39993: LD_ADDR_OWVAR 40
39997: PUSH
39998: LD_VAR 0 4
40002: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40003: LD_ADDR_OWVAR 41
40007: PUSH
40008: LD_VAR 0 5
40012: ST_TO_ADDR
// end ;
40013: LD_VAR 0 6
40017: RET
// export function WantPlant ( unit ) ; var task ; begin
40018: LD_INT 0
40020: PPUSH
40021: PPUSH
// result := false ;
40022: LD_ADDR_VAR 0 2
40026: PUSH
40027: LD_INT 0
40029: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40030: LD_ADDR_VAR 0 3
40034: PUSH
40035: LD_VAR 0 1
40039: PPUSH
40040: CALL_OW 437
40044: ST_TO_ADDR
// if task then
40045: LD_VAR 0 3
40049: IFFALSE 40077
// if task [ 1 ] [ 1 ] = p then
40051: LD_VAR 0 3
40055: PUSH
40056: LD_INT 1
40058: ARRAY
40059: PUSH
40060: LD_INT 1
40062: ARRAY
40063: PUSH
40064: LD_STRING p
40066: EQUAL
40067: IFFALSE 40077
// result := true ;
40069: LD_ADDR_VAR 0 2
40073: PUSH
40074: LD_INT 1
40076: ST_TO_ADDR
// end ;
40077: LD_VAR 0 2
40081: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40082: LD_INT 0
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
// if pos < 1 then
40088: LD_VAR 0 2
40092: PUSH
40093: LD_INT 1
40095: LESS
40096: IFFALSE 40100
// exit ;
40098: GO 40403
// if pos = 1 then
40100: LD_VAR 0 2
40104: PUSH
40105: LD_INT 1
40107: EQUAL
40108: IFFALSE 40141
// result := Replace ( arr , pos [ 1 ] , value ) else
40110: LD_ADDR_VAR 0 4
40114: PUSH
40115: LD_VAR 0 1
40119: PPUSH
40120: LD_VAR 0 2
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: LD_VAR 0 3
40133: PPUSH
40134: CALL_OW 1
40138: ST_TO_ADDR
40139: GO 40403
// begin tmp := arr ;
40141: LD_ADDR_VAR 0 6
40145: PUSH
40146: LD_VAR 0 1
40150: ST_TO_ADDR
// s_arr := [ tmp ] ;
40151: LD_ADDR_VAR 0 7
40155: PUSH
40156: LD_VAR 0 6
40160: PUSH
40161: EMPTY
40162: LIST
40163: ST_TO_ADDR
// for i = 1 to pos - 1 do
40164: LD_ADDR_VAR 0 5
40168: PUSH
40169: DOUBLE
40170: LD_INT 1
40172: DEC
40173: ST_TO_ADDR
40174: LD_VAR 0 2
40178: PUSH
40179: LD_INT 1
40181: MINUS
40182: PUSH
40183: FOR_TO
40184: IFFALSE 40229
// begin tmp := tmp [ pos [ i ] ] ;
40186: LD_ADDR_VAR 0 6
40190: PUSH
40191: LD_VAR 0 6
40195: PUSH
40196: LD_VAR 0 2
40200: PUSH
40201: LD_VAR 0 5
40205: ARRAY
40206: ARRAY
40207: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40208: LD_ADDR_VAR 0 7
40212: PUSH
40213: LD_VAR 0 7
40217: PUSH
40218: LD_VAR 0 6
40222: PUSH
40223: EMPTY
40224: LIST
40225: ADD
40226: ST_TO_ADDR
// end ;
40227: GO 40183
40229: POP
40230: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40231: LD_ADDR_VAR 0 6
40235: PUSH
40236: LD_VAR 0 6
40240: PPUSH
40241: LD_VAR 0 2
40245: PUSH
40246: LD_VAR 0 2
40250: ARRAY
40251: PPUSH
40252: LD_VAR 0 3
40256: PPUSH
40257: CALL_OW 1
40261: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40262: LD_ADDR_VAR 0 7
40266: PUSH
40267: LD_VAR 0 7
40271: PPUSH
40272: LD_VAR 0 7
40276: PPUSH
40277: LD_VAR 0 6
40281: PPUSH
40282: CALL_OW 1
40286: ST_TO_ADDR
// for i = s_arr downto 2 do
40287: LD_ADDR_VAR 0 5
40291: PUSH
40292: DOUBLE
40293: LD_VAR 0 7
40297: INC
40298: ST_TO_ADDR
40299: LD_INT 2
40301: PUSH
40302: FOR_DOWNTO
40303: IFFALSE 40387
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40305: LD_ADDR_VAR 0 6
40309: PUSH
40310: LD_VAR 0 7
40314: PUSH
40315: LD_VAR 0 5
40319: PUSH
40320: LD_INT 1
40322: MINUS
40323: ARRAY
40324: PPUSH
40325: LD_VAR 0 2
40329: PUSH
40330: LD_VAR 0 5
40334: PUSH
40335: LD_INT 1
40337: MINUS
40338: ARRAY
40339: PPUSH
40340: LD_VAR 0 7
40344: PUSH
40345: LD_VAR 0 5
40349: ARRAY
40350: PPUSH
40351: CALL_OW 1
40355: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40356: LD_ADDR_VAR 0 7
40360: PUSH
40361: LD_VAR 0 7
40365: PPUSH
40366: LD_VAR 0 5
40370: PUSH
40371: LD_INT 1
40373: MINUS
40374: PPUSH
40375: LD_VAR 0 6
40379: PPUSH
40380: CALL_OW 1
40384: ST_TO_ADDR
// end ;
40385: GO 40302
40387: POP
40388: POP
// result := s_arr [ 1 ] ;
40389: LD_ADDR_VAR 0 4
40393: PUSH
40394: LD_VAR 0 7
40398: PUSH
40399: LD_INT 1
40401: ARRAY
40402: ST_TO_ADDR
// end ; end ;
40403: LD_VAR 0 4
40407: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40408: LD_INT 0
40410: PPUSH
40411: PPUSH
// if not list then
40412: LD_VAR 0 1
40416: NOT
40417: IFFALSE 40421
// exit ;
40419: GO 40512
// i := list [ pos1 ] ;
40421: LD_ADDR_VAR 0 5
40425: PUSH
40426: LD_VAR 0 1
40430: PUSH
40431: LD_VAR 0 2
40435: ARRAY
40436: ST_TO_ADDR
// if not i then
40437: LD_VAR 0 5
40441: NOT
40442: IFFALSE 40446
// exit ;
40444: GO 40512
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40446: LD_ADDR_VAR 0 1
40450: PUSH
40451: LD_VAR 0 1
40455: PPUSH
40456: LD_VAR 0 2
40460: PPUSH
40461: LD_VAR 0 1
40465: PUSH
40466: LD_VAR 0 3
40470: ARRAY
40471: PPUSH
40472: CALL_OW 1
40476: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40477: LD_ADDR_VAR 0 1
40481: PUSH
40482: LD_VAR 0 1
40486: PPUSH
40487: LD_VAR 0 3
40491: PPUSH
40492: LD_VAR 0 5
40496: PPUSH
40497: CALL_OW 1
40501: ST_TO_ADDR
// result := list ;
40502: LD_ADDR_VAR 0 4
40506: PUSH
40507: LD_VAR 0 1
40511: ST_TO_ADDR
// end ;
40512: LD_VAR 0 4
40516: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40517: LD_INT 0
40519: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40520: LD_ADDR_VAR 0 5
40524: PUSH
40525: LD_VAR 0 1
40529: PPUSH
40530: CALL_OW 250
40534: PPUSH
40535: LD_VAR 0 1
40539: PPUSH
40540: CALL_OW 251
40544: PPUSH
40545: LD_VAR 0 2
40549: PPUSH
40550: LD_VAR 0 3
40554: PPUSH
40555: LD_VAR 0 4
40559: PPUSH
40560: CALL 40570 0 5
40564: ST_TO_ADDR
// end ;
40565: LD_VAR 0 5
40569: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40570: LD_INT 0
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
// if not list then
40576: LD_VAR 0 3
40580: NOT
40581: IFFALSE 40585
// exit ;
40583: GO 40973
// result := [ ] ;
40585: LD_ADDR_VAR 0 6
40589: PUSH
40590: EMPTY
40591: ST_TO_ADDR
// for i in list do
40592: LD_ADDR_VAR 0 7
40596: PUSH
40597: LD_VAR 0 3
40601: PUSH
40602: FOR_IN
40603: IFFALSE 40805
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40605: LD_ADDR_VAR 0 9
40609: PUSH
40610: LD_VAR 0 7
40614: PPUSH
40615: LD_VAR 0 1
40619: PPUSH
40620: LD_VAR 0 2
40624: PPUSH
40625: CALL_OW 297
40629: ST_TO_ADDR
// if not result then
40630: LD_VAR 0 6
40634: NOT
40635: IFFALSE 40661
// result := [ [ i , tmp ] ] else
40637: LD_ADDR_VAR 0 6
40641: PUSH
40642: LD_VAR 0 7
40646: PUSH
40647: LD_VAR 0 9
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: EMPTY
40657: LIST
40658: ST_TO_ADDR
40659: GO 40803
// begin if result [ result ] [ 2 ] < tmp then
40661: LD_VAR 0 6
40665: PUSH
40666: LD_VAR 0 6
40670: ARRAY
40671: PUSH
40672: LD_INT 2
40674: ARRAY
40675: PUSH
40676: LD_VAR 0 9
40680: LESS
40681: IFFALSE 40723
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40683: LD_ADDR_VAR 0 6
40687: PUSH
40688: LD_VAR 0 6
40692: PPUSH
40693: LD_VAR 0 6
40697: PUSH
40698: LD_INT 1
40700: PLUS
40701: PPUSH
40702: LD_VAR 0 7
40706: PUSH
40707: LD_VAR 0 9
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PPUSH
40716: CALL_OW 2
40720: ST_TO_ADDR
40721: GO 40803
// for j = 1 to result do
40723: LD_ADDR_VAR 0 8
40727: PUSH
40728: DOUBLE
40729: LD_INT 1
40731: DEC
40732: ST_TO_ADDR
40733: LD_VAR 0 6
40737: PUSH
40738: FOR_TO
40739: IFFALSE 40801
// begin if tmp < result [ j ] [ 2 ] then
40741: LD_VAR 0 9
40745: PUSH
40746: LD_VAR 0 6
40750: PUSH
40751: LD_VAR 0 8
40755: ARRAY
40756: PUSH
40757: LD_INT 2
40759: ARRAY
40760: LESS
40761: IFFALSE 40799
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40763: LD_ADDR_VAR 0 6
40767: PUSH
40768: LD_VAR 0 6
40772: PPUSH
40773: LD_VAR 0 8
40777: PPUSH
40778: LD_VAR 0 7
40782: PUSH
40783: LD_VAR 0 9
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PPUSH
40792: CALL_OW 2
40796: ST_TO_ADDR
// break ;
40797: GO 40801
// end ; end ;
40799: GO 40738
40801: POP
40802: POP
// end ; end ;
40803: GO 40602
40805: POP
40806: POP
// if result and not asc then
40807: LD_VAR 0 6
40811: PUSH
40812: LD_VAR 0 4
40816: NOT
40817: AND
40818: IFFALSE 40893
// begin tmp := result ;
40820: LD_ADDR_VAR 0 9
40824: PUSH
40825: LD_VAR 0 6
40829: ST_TO_ADDR
// for i = tmp downto 1 do
40830: LD_ADDR_VAR 0 7
40834: PUSH
40835: DOUBLE
40836: LD_VAR 0 9
40840: INC
40841: ST_TO_ADDR
40842: LD_INT 1
40844: PUSH
40845: FOR_DOWNTO
40846: IFFALSE 40891
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40848: LD_ADDR_VAR 0 6
40852: PUSH
40853: LD_VAR 0 6
40857: PPUSH
40858: LD_VAR 0 9
40862: PUSH
40863: LD_VAR 0 7
40867: MINUS
40868: PUSH
40869: LD_INT 1
40871: PLUS
40872: PPUSH
40873: LD_VAR 0 9
40877: PUSH
40878: LD_VAR 0 7
40882: ARRAY
40883: PPUSH
40884: CALL_OW 1
40888: ST_TO_ADDR
40889: GO 40845
40891: POP
40892: POP
// end ; tmp := [ ] ;
40893: LD_ADDR_VAR 0 9
40897: PUSH
40898: EMPTY
40899: ST_TO_ADDR
// if mode then
40900: LD_VAR 0 5
40904: IFFALSE 40973
// begin for i = 1 to result do
40906: LD_ADDR_VAR 0 7
40910: PUSH
40911: DOUBLE
40912: LD_INT 1
40914: DEC
40915: ST_TO_ADDR
40916: LD_VAR 0 6
40920: PUSH
40921: FOR_TO
40922: IFFALSE 40961
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40924: LD_ADDR_VAR 0 9
40928: PUSH
40929: LD_VAR 0 9
40933: PPUSH
40934: LD_VAR 0 7
40938: PPUSH
40939: LD_VAR 0 6
40943: PUSH
40944: LD_VAR 0 7
40948: ARRAY
40949: PUSH
40950: LD_INT 1
40952: ARRAY
40953: PPUSH
40954: CALL_OW 1
40958: ST_TO_ADDR
40959: GO 40921
40961: POP
40962: POP
// result := tmp ;
40963: LD_ADDR_VAR 0 6
40967: PUSH
40968: LD_VAR 0 9
40972: ST_TO_ADDR
// end ; end ;
40973: LD_VAR 0 6
40977: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40978: LD_INT 0
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40986: LD_ADDR_VAR 0 5
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: ST_TO_ADDR
// if not x or not y then
41008: LD_VAR 0 2
41012: NOT
41013: PUSH
41014: LD_VAR 0 3
41018: NOT
41019: OR
41020: IFFALSE 41024
// exit ;
41022: GO 42676
// if not range then
41024: LD_VAR 0 4
41028: NOT
41029: IFFALSE 41039
// range := 10 ;
41031: LD_ADDR_VAR 0 4
41035: PUSH
41036: LD_INT 10
41038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41039: LD_ADDR_VAR 0 8
41043: PUSH
41044: LD_INT 81
41046: PUSH
41047: LD_VAR 0 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 92
41058: PUSH
41059: LD_VAR 0 2
41063: PUSH
41064: LD_VAR 0 3
41068: PUSH
41069: LD_VAR 0 4
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 3
41082: PUSH
41083: LD_INT 21
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: LIST
41101: PPUSH
41102: CALL_OW 69
41106: ST_TO_ADDR
// if not tmp then
41107: LD_VAR 0 8
41111: NOT
41112: IFFALSE 41116
// exit ;
41114: GO 42676
// for i in tmp do
41116: LD_ADDR_VAR 0 6
41120: PUSH
41121: LD_VAR 0 8
41125: PUSH
41126: FOR_IN
41127: IFFALSE 42651
// begin points := [ 0 , 0 , 0 ] ;
41129: LD_ADDR_VAR 0 9
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// bpoints := 1 ;
41148: LD_ADDR_VAR 0 10
41152: PUSH
41153: LD_INT 1
41155: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41156: LD_VAR 0 6
41160: PPUSH
41161: CALL_OW 247
41165: PUSH
41166: LD_INT 1
41168: DOUBLE
41169: EQUAL
41170: IFTRUE 41174
41172: GO 41752
41174: POP
// begin if GetClass ( i ) = 1 then
41175: LD_VAR 0 6
41179: PPUSH
41180: CALL_OW 257
41184: PUSH
41185: LD_INT 1
41187: EQUAL
41188: IFFALSE 41209
// points := [ 10 , 5 , 3 ] ;
41190: LD_ADDR_VAR 0 9
41194: PUSH
41195: LD_INT 10
41197: PUSH
41198: LD_INT 5
41200: PUSH
41201: LD_INT 3
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41209: LD_VAR 0 6
41213: PPUSH
41214: CALL_OW 257
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: LD_INT 4
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: IN
41233: IFFALSE 41254
// points := [ 3 , 2 , 1 ] ;
41235: LD_ADDR_VAR 0 9
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41254: LD_VAR 0 6
41258: PPUSH
41259: CALL_OW 257
41263: PUSH
41264: LD_INT 5
41266: EQUAL
41267: IFFALSE 41288
// points := [ 130 , 5 , 2 ] ;
41269: LD_ADDR_VAR 0 9
41273: PUSH
41274: LD_INT 130
41276: PUSH
41277: LD_INT 5
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41288: LD_VAR 0 6
41292: PPUSH
41293: CALL_OW 257
41297: PUSH
41298: LD_INT 8
41300: EQUAL
41301: IFFALSE 41322
// points := [ 35 , 35 , 30 ] ;
41303: LD_ADDR_VAR 0 9
41307: PUSH
41308: LD_INT 35
41310: PUSH
41311: LD_INT 35
41313: PUSH
41314: LD_INT 30
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41322: LD_VAR 0 6
41326: PPUSH
41327: CALL_OW 257
41331: PUSH
41332: LD_INT 9
41334: EQUAL
41335: IFFALSE 41356
// points := [ 20 , 55 , 40 ] ;
41337: LD_ADDR_VAR 0 9
41341: PUSH
41342: LD_INT 20
41344: PUSH
41345: LD_INT 55
41347: PUSH
41348: LD_INT 40
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: LIST
41355: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41356: LD_VAR 0 6
41360: PPUSH
41361: CALL_OW 257
41365: PUSH
41366: LD_INT 12
41368: PUSH
41369: LD_INT 16
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: IN
41376: IFFALSE 41397
// points := [ 5 , 3 , 2 ] ;
41378: LD_ADDR_VAR 0 9
41382: PUSH
41383: LD_INT 5
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41397: LD_VAR 0 6
41401: PPUSH
41402: CALL_OW 257
41406: PUSH
41407: LD_INT 17
41409: EQUAL
41410: IFFALSE 41431
// points := [ 100 , 50 , 75 ] ;
41412: LD_ADDR_VAR 0 9
41416: PUSH
41417: LD_INT 100
41419: PUSH
41420: LD_INT 50
41422: PUSH
41423: LD_INT 75
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41431: LD_VAR 0 6
41435: PPUSH
41436: CALL_OW 257
41440: PUSH
41441: LD_INT 15
41443: EQUAL
41444: IFFALSE 41465
// points := [ 10 , 5 , 3 ] ;
41446: LD_ADDR_VAR 0 9
41450: PUSH
41451: LD_INT 10
41453: PUSH
41454: LD_INT 5
41456: PUSH
41457: LD_INT 3
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41465: LD_VAR 0 6
41469: PPUSH
41470: CALL_OW 257
41474: PUSH
41475: LD_INT 14
41477: EQUAL
41478: IFFALSE 41499
// points := [ 10 , 0 , 0 ] ;
41480: LD_ADDR_VAR 0 9
41484: PUSH
41485: LD_INT 10
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: LIST
41498: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41499: LD_VAR 0 6
41503: PPUSH
41504: CALL_OW 257
41508: PUSH
41509: LD_INT 11
41511: EQUAL
41512: IFFALSE 41533
// points := [ 30 , 10 , 5 ] ;
41514: LD_ADDR_VAR 0 9
41518: PUSH
41519: LD_INT 30
41521: PUSH
41522: LD_INT 10
41524: PUSH
41525: LD_INT 5
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: LIST
41532: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41533: LD_VAR 0 1
41537: PPUSH
41538: LD_INT 5
41540: PPUSH
41541: CALL_OW 321
41545: PUSH
41546: LD_INT 2
41548: EQUAL
41549: IFFALSE 41566
// bpoints := bpoints * 1.8 ;
41551: LD_ADDR_VAR 0 10
41555: PUSH
41556: LD_VAR 0 10
41560: PUSH
41561: LD_REAL  1.80000000000000E+0000
41564: MUL
41565: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41566: LD_VAR 0 6
41570: PPUSH
41571: CALL_OW 257
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: LD_INT 3
41584: PUSH
41585: LD_INT 4
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: IN
41594: PUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: LD_INT 51
41602: PPUSH
41603: CALL_OW 321
41607: PUSH
41608: LD_INT 2
41610: EQUAL
41611: AND
41612: IFFALSE 41629
// bpoints := bpoints * 1.2 ;
41614: LD_ADDR_VAR 0 10
41618: PUSH
41619: LD_VAR 0 10
41623: PUSH
41624: LD_REAL  1.20000000000000E+0000
41627: MUL
41628: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41629: LD_VAR 0 6
41633: PPUSH
41634: CALL_OW 257
41638: PUSH
41639: LD_INT 5
41641: PUSH
41642: LD_INT 7
41644: PUSH
41645: LD_INT 9
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: LIST
41652: IN
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: LD_INT 52
41661: PPUSH
41662: CALL_OW 321
41666: PUSH
41667: LD_INT 2
41669: EQUAL
41670: AND
41671: IFFALSE 41688
// bpoints := bpoints * 1.5 ;
41673: LD_ADDR_VAR 0 10
41677: PUSH
41678: LD_VAR 0 10
41682: PUSH
41683: LD_REAL  1.50000000000000E+0000
41686: MUL
41687: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41688: LD_VAR 0 1
41692: PPUSH
41693: LD_INT 66
41695: PPUSH
41696: CALL_OW 321
41700: PUSH
41701: LD_INT 2
41703: EQUAL
41704: IFFALSE 41721
// bpoints := bpoints * 1.1 ;
41706: LD_ADDR_VAR 0 10
41710: PUSH
41711: LD_VAR 0 10
41715: PUSH
41716: LD_REAL  1.10000000000000E+0000
41719: MUL
41720: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41721: LD_ADDR_VAR 0 10
41725: PUSH
41726: LD_VAR 0 10
41730: PUSH
41731: LD_VAR 0 6
41735: PPUSH
41736: LD_INT 1
41738: PPUSH
41739: CALL_OW 259
41743: PUSH
41744: LD_REAL  1.15000000000000E+0000
41747: MUL
41748: MUL
41749: ST_TO_ADDR
// end ; unit_vehicle :
41750: GO 42580
41752: LD_INT 2
41754: DOUBLE
41755: EQUAL
41756: IFTRUE 41760
41758: GO 42568
41760: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41761: LD_VAR 0 6
41765: PPUSH
41766: CALL_OW 264
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: LD_INT 42
41776: PUSH
41777: LD_INT 24
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: IN
41785: IFFALSE 41806
// points := [ 25 , 5 , 3 ] ;
41787: LD_ADDR_VAR 0 9
41791: PUSH
41792: LD_INT 25
41794: PUSH
41795: LD_INT 5
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: LIST
41805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41806: LD_VAR 0 6
41810: PPUSH
41811: CALL_OW 264
41815: PUSH
41816: LD_INT 4
41818: PUSH
41819: LD_INT 43
41821: PUSH
41822: LD_INT 25
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: IN
41830: IFFALSE 41851
// points := [ 40 , 15 , 5 ] ;
41832: LD_ADDR_VAR 0 9
41836: PUSH
41837: LD_INT 40
41839: PUSH
41840: LD_INT 15
41842: PUSH
41843: LD_INT 5
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: LIST
41850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41851: LD_VAR 0 6
41855: PPUSH
41856: CALL_OW 264
41860: PUSH
41861: LD_INT 3
41863: PUSH
41864: LD_INT 23
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: IN
41871: IFFALSE 41892
// points := [ 7 , 25 , 8 ] ;
41873: LD_ADDR_VAR 0 9
41877: PUSH
41878: LD_INT 7
41880: PUSH
41881: LD_INT 25
41883: PUSH
41884: LD_INT 8
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: LIST
41891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41892: LD_VAR 0 6
41896: PPUSH
41897: CALL_OW 264
41901: PUSH
41902: LD_INT 5
41904: PUSH
41905: LD_INT 27
41907: PUSH
41908: LD_INT 44
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: IN
41916: IFFALSE 41937
// points := [ 14 , 50 , 16 ] ;
41918: LD_ADDR_VAR 0 9
41922: PUSH
41923: LD_INT 14
41925: PUSH
41926: LD_INT 50
41928: PUSH
41929: LD_INT 16
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41937: LD_VAR 0 6
41941: PPUSH
41942: CALL_OW 264
41946: PUSH
41947: LD_INT 6
41949: PUSH
41950: LD_INT 46
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: IN
41957: IFFALSE 41978
// points := [ 32 , 120 , 70 ] ;
41959: LD_ADDR_VAR 0 9
41963: PUSH
41964: LD_INT 32
41966: PUSH
41967: LD_INT 120
41969: PUSH
41970: LD_INT 70
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41978: LD_VAR 0 6
41982: PPUSH
41983: CALL_OW 264
41987: PUSH
41988: LD_INT 7
41990: PUSH
41991: LD_INT 28
41993: PUSH
41994: LD_INT 45
41996: PUSH
41997: LD_EXP 127
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: IN
42008: IFFALSE 42029
// points := [ 35 , 20 , 45 ] ;
42010: LD_ADDR_VAR 0 9
42014: PUSH
42015: LD_INT 35
42017: PUSH
42018: LD_INT 20
42020: PUSH
42021: LD_INT 45
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42029: LD_VAR 0 6
42033: PPUSH
42034: CALL_OW 264
42038: PUSH
42039: LD_INT 47
42041: PUSH
42042: EMPTY
42043: LIST
42044: IN
42045: IFFALSE 42066
// points := [ 67 , 45 , 75 ] ;
42047: LD_ADDR_VAR 0 9
42051: PUSH
42052: LD_INT 67
42054: PUSH
42055: LD_INT 45
42057: PUSH
42058: LD_INT 75
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42066: LD_VAR 0 6
42070: PPUSH
42071: CALL_OW 264
42075: PUSH
42076: LD_INT 26
42078: PUSH
42079: EMPTY
42080: LIST
42081: IN
42082: IFFALSE 42103
// points := [ 120 , 30 , 80 ] ;
42084: LD_ADDR_VAR 0 9
42088: PUSH
42089: LD_INT 120
42091: PUSH
42092: LD_INT 30
42094: PUSH
42095: LD_INT 80
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42103: LD_VAR 0 6
42107: PPUSH
42108: CALL_OW 264
42112: PUSH
42113: LD_INT 22
42115: PUSH
42116: EMPTY
42117: LIST
42118: IN
42119: IFFALSE 42140
// points := [ 40 , 1 , 1 ] ;
42121: LD_ADDR_VAR 0 9
42125: PUSH
42126: LD_INT 40
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42140: LD_VAR 0 6
42144: PPUSH
42145: CALL_OW 264
42149: PUSH
42150: LD_INT 29
42152: PUSH
42153: EMPTY
42154: LIST
42155: IN
42156: IFFALSE 42177
// points := [ 70 , 200 , 400 ] ;
42158: LD_ADDR_VAR 0 9
42162: PUSH
42163: LD_INT 70
42165: PUSH
42166: LD_INT 200
42168: PUSH
42169: LD_INT 400
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42177: LD_VAR 0 6
42181: PPUSH
42182: CALL_OW 264
42186: PUSH
42187: LD_INT 14
42189: PUSH
42190: LD_INT 53
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: IN
42197: IFFALSE 42218
// points := [ 40 , 10 , 20 ] ;
42199: LD_ADDR_VAR 0 9
42203: PUSH
42204: LD_INT 40
42206: PUSH
42207: LD_INT 10
42209: PUSH
42210: LD_INT 20
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42218: LD_VAR 0 6
42222: PPUSH
42223: CALL_OW 264
42227: PUSH
42228: LD_INT 9
42230: PUSH
42231: EMPTY
42232: LIST
42233: IN
42234: IFFALSE 42255
// points := [ 5 , 70 , 20 ] ;
42236: LD_ADDR_VAR 0 9
42240: PUSH
42241: LD_INT 5
42243: PUSH
42244: LD_INT 70
42246: PUSH
42247: LD_INT 20
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42255: LD_VAR 0 6
42259: PPUSH
42260: CALL_OW 264
42264: PUSH
42265: LD_INT 10
42267: PUSH
42268: EMPTY
42269: LIST
42270: IN
42271: IFFALSE 42292
// points := [ 35 , 110 , 70 ] ;
42273: LD_ADDR_VAR 0 9
42277: PUSH
42278: LD_INT 35
42280: PUSH
42281: LD_INT 110
42283: PUSH
42284: LD_INT 70
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42292: LD_VAR 0 6
42296: PPUSH
42297: CALL_OW 265
42301: PUSH
42302: LD_INT 25
42304: EQUAL
42305: IFFALSE 42326
// points := [ 80 , 65 , 100 ] ;
42307: LD_ADDR_VAR 0 9
42311: PUSH
42312: LD_INT 80
42314: PUSH
42315: LD_INT 65
42317: PUSH
42318: LD_INT 100
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42326: LD_VAR 0 6
42330: PPUSH
42331: CALL_OW 263
42335: PUSH
42336: LD_INT 1
42338: EQUAL
42339: IFFALSE 42374
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42341: LD_ADDR_VAR 0 10
42345: PUSH
42346: LD_VAR 0 10
42350: PUSH
42351: LD_VAR 0 6
42355: PPUSH
42356: CALL_OW 311
42360: PPUSH
42361: LD_INT 3
42363: PPUSH
42364: CALL_OW 259
42368: PUSH
42369: LD_INT 4
42371: MUL
42372: MUL
42373: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42374: LD_VAR 0 6
42378: PPUSH
42379: CALL_OW 263
42383: PUSH
42384: LD_INT 2
42386: EQUAL
42387: IFFALSE 42438
// begin j := IsControledBy ( i ) ;
42389: LD_ADDR_VAR 0 7
42393: PUSH
42394: LD_VAR 0 6
42398: PPUSH
42399: CALL_OW 312
42403: ST_TO_ADDR
// if j then
42404: LD_VAR 0 7
42408: IFFALSE 42438
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42410: LD_ADDR_VAR 0 10
42414: PUSH
42415: LD_VAR 0 10
42419: PUSH
42420: LD_VAR 0 7
42424: PPUSH
42425: LD_INT 3
42427: PPUSH
42428: CALL_OW 259
42432: PUSH
42433: LD_INT 3
42435: MUL
42436: MUL
42437: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42438: LD_VAR 0 6
42442: PPUSH
42443: CALL_OW 264
42447: PUSH
42448: LD_INT 5
42450: PUSH
42451: LD_INT 6
42453: PUSH
42454: LD_INT 46
42456: PUSH
42457: LD_INT 44
42459: PUSH
42460: LD_INT 47
42462: PUSH
42463: LD_INT 45
42465: PUSH
42466: LD_INT 28
42468: PUSH
42469: LD_INT 7
42471: PUSH
42472: LD_INT 27
42474: PUSH
42475: LD_INT 29
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: IN
42490: PUSH
42491: LD_VAR 0 1
42495: PPUSH
42496: LD_INT 52
42498: PPUSH
42499: CALL_OW 321
42503: PUSH
42504: LD_INT 2
42506: EQUAL
42507: AND
42508: IFFALSE 42525
// bpoints := bpoints * 1.2 ;
42510: LD_ADDR_VAR 0 10
42514: PUSH
42515: LD_VAR 0 10
42519: PUSH
42520: LD_REAL  1.20000000000000E+0000
42523: MUL
42524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42525: LD_VAR 0 6
42529: PPUSH
42530: CALL_OW 264
42534: PUSH
42535: LD_INT 6
42537: PUSH
42538: LD_INT 46
42540: PUSH
42541: LD_INT 47
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: IN
42549: IFFALSE 42566
// bpoints := bpoints * 1.2 ;
42551: LD_ADDR_VAR 0 10
42555: PUSH
42556: LD_VAR 0 10
42560: PUSH
42561: LD_REAL  1.20000000000000E+0000
42564: MUL
42565: ST_TO_ADDR
// end ; unit_building :
42566: GO 42580
42568: LD_INT 3
42570: DOUBLE
42571: EQUAL
42572: IFTRUE 42576
42574: GO 42579
42576: POP
// ; end ;
42577: GO 42580
42579: POP
// for j = 1 to 3 do
42580: LD_ADDR_VAR 0 7
42584: PUSH
42585: DOUBLE
42586: LD_INT 1
42588: DEC
42589: ST_TO_ADDR
42590: LD_INT 3
42592: PUSH
42593: FOR_TO
42594: IFFALSE 42647
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42596: LD_ADDR_VAR 0 5
42600: PUSH
42601: LD_VAR 0 5
42605: PPUSH
42606: LD_VAR 0 7
42610: PPUSH
42611: LD_VAR 0 5
42615: PUSH
42616: LD_VAR 0 7
42620: ARRAY
42621: PUSH
42622: LD_VAR 0 9
42626: PUSH
42627: LD_VAR 0 7
42631: ARRAY
42632: PUSH
42633: LD_VAR 0 10
42637: MUL
42638: PLUS
42639: PPUSH
42640: CALL_OW 1
42644: ST_TO_ADDR
42645: GO 42593
42647: POP
42648: POP
// end ;
42649: GO 41126
42651: POP
42652: POP
// result := Replace ( result , 4 , tmp ) ;
42653: LD_ADDR_VAR 0 5
42657: PUSH
42658: LD_VAR 0 5
42662: PPUSH
42663: LD_INT 4
42665: PPUSH
42666: LD_VAR 0 8
42670: PPUSH
42671: CALL_OW 1
42675: ST_TO_ADDR
// end ;
42676: LD_VAR 0 5
42680: RET
// export function DangerAtRange ( unit , range ) ; begin
42681: LD_INT 0
42683: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_VAR 0 1
42693: PPUSH
42694: CALL_OW 255
42698: PPUSH
42699: LD_VAR 0 1
42703: PPUSH
42704: CALL_OW 250
42708: PPUSH
42709: LD_VAR 0 1
42713: PPUSH
42714: CALL_OW 251
42718: PPUSH
42719: LD_VAR 0 2
42723: PPUSH
42724: CALL 40978 0 4
42728: ST_TO_ADDR
// end ;
42729: LD_VAR 0 3
42733: RET
// export function DangerInArea ( side , area ) ; begin
42734: LD_INT 0
42736: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42737: LD_ADDR_VAR 0 3
42741: PUSH
42742: LD_VAR 0 2
42746: PPUSH
42747: LD_INT 81
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PPUSH
42759: CALL_OW 70
42763: ST_TO_ADDR
// end ;
42764: LD_VAR 0 3
42768: RET
// export function IsExtension ( b ) ; begin
42769: LD_INT 0
42771: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42772: LD_ADDR_VAR 0 2
42776: PUSH
42777: LD_VAR 0 1
42781: PUSH
42782: LD_INT 23
42784: PUSH
42785: LD_INT 20
42787: PUSH
42788: LD_INT 22
42790: PUSH
42791: LD_INT 17
42793: PUSH
42794: LD_INT 24
42796: PUSH
42797: LD_INT 21
42799: PUSH
42800: LD_INT 19
42802: PUSH
42803: LD_INT 16
42805: PUSH
42806: LD_INT 25
42808: PUSH
42809: LD_INT 18
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: IN
42824: ST_TO_ADDR
// end ;
42825: LD_VAR 0 2
42829: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42830: LD_INT 0
42832: PPUSH
42833: PPUSH
42834: PPUSH
// result := [ ] ;
42835: LD_ADDR_VAR 0 4
42839: PUSH
42840: EMPTY
42841: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42842: LD_ADDR_VAR 0 5
42846: PUSH
42847: LD_VAR 0 2
42851: PPUSH
42852: LD_INT 21
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PPUSH
42862: CALL_OW 70
42866: ST_TO_ADDR
// if not tmp then
42867: LD_VAR 0 5
42871: NOT
42872: IFFALSE 42876
// exit ;
42874: GO 42940
// if checkLink then
42876: LD_VAR 0 3
42880: IFFALSE 42930
// begin for i in tmp do
42882: LD_ADDR_VAR 0 6
42886: PUSH
42887: LD_VAR 0 5
42891: PUSH
42892: FOR_IN
42893: IFFALSE 42928
// if GetBase ( i ) <> base then
42895: LD_VAR 0 6
42899: PPUSH
42900: CALL_OW 274
42904: PUSH
42905: LD_VAR 0 1
42909: NONEQUAL
42910: IFFALSE 42926
// ComLinkToBase ( base , i ) ;
42912: LD_VAR 0 1
42916: PPUSH
42917: LD_VAR 0 6
42921: PPUSH
42922: CALL_OW 169
42926: GO 42892
42928: POP
42929: POP
// end ; result := tmp ;
42930: LD_ADDR_VAR 0 4
42934: PUSH
42935: LD_VAR 0 5
42939: ST_TO_ADDR
// end ;
42940: LD_VAR 0 4
42944: RET
// export function ComComplete ( units , b ) ; var i ; begin
42945: LD_INT 0
42947: PPUSH
42948: PPUSH
// if not units then
42949: LD_VAR 0 1
42953: NOT
42954: IFFALSE 42958
// exit ;
42956: GO 43048
// for i in units do
42958: LD_ADDR_VAR 0 4
42962: PUSH
42963: LD_VAR 0 1
42967: PUSH
42968: FOR_IN
42969: IFFALSE 43046
// if BuildingStatus ( b ) = bs_build then
42971: LD_VAR 0 2
42975: PPUSH
42976: CALL_OW 461
42980: PUSH
42981: LD_INT 1
42983: EQUAL
42984: IFFALSE 43044
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42986: LD_VAR 0 4
42990: PPUSH
42991: LD_STRING h
42993: PUSH
42994: LD_VAR 0 2
42998: PPUSH
42999: CALL_OW 250
43003: PUSH
43004: LD_VAR 0 2
43008: PPUSH
43009: CALL_OW 251
43013: PUSH
43014: LD_VAR 0 2
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: PPUSH
43040: CALL_OW 446
43044: GO 42968
43046: POP
43047: POP
// end ;
43048: LD_VAR 0 3
43052: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43053: LD_INT 0
43055: PPUSH
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43061: LD_VAR 0 1
43065: NOT
43066: PUSH
43067: LD_VAR 0 1
43071: PPUSH
43072: CALL_OW 263
43076: PUSH
43077: LD_INT 2
43079: NONEQUAL
43080: OR
43081: IFFALSE 43085
// exit ;
43083: GO 43401
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43085: LD_ADDR_VAR 0 6
43089: PUSH
43090: LD_INT 22
43092: PUSH
43093: LD_VAR 0 1
43097: PPUSH
43098: CALL_OW 255
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 30
43112: PUSH
43113: LD_INT 36
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 34
43122: PUSH
43123: LD_INT 31
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PPUSH
43139: CALL_OW 69
43143: ST_TO_ADDR
// if not tmp then
43144: LD_VAR 0 6
43148: NOT
43149: IFFALSE 43153
// exit ;
43151: GO 43401
// result := [ ] ;
43153: LD_ADDR_VAR 0 2
43157: PUSH
43158: EMPTY
43159: ST_TO_ADDR
// for i in tmp do
43160: LD_ADDR_VAR 0 3
43164: PUSH
43165: LD_VAR 0 6
43169: PUSH
43170: FOR_IN
43171: IFFALSE 43242
// begin t := UnitsInside ( i ) ;
43173: LD_ADDR_VAR 0 4
43177: PUSH
43178: LD_VAR 0 3
43182: PPUSH
43183: CALL_OW 313
43187: ST_TO_ADDR
// if t then
43188: LD_VAR 0 4
43192: IFFALSE 43240
// for j in t do
43194: LD_ADDR_VAR 0 7
43198: PUSH
43199: LD_VAR 0 4
43203: PUSH
43204: FOR_IN
43205: IFFALSE 43238
// result := Replace ( result , result + 1 , j ) ;
43207: LD_ADDR_VAR 0 2
43211: PUSH
43212: LD_VAR 0 2
43216: PPUSH
43217: LD_VAR 0 2
43221: PUSH
43222: LD_INT 1
43224: PLUS
43225: PPUSH
43226: LD_VAR 0 7
43230: PPUSH
43231: CALL_OW 1
43235: ST_TO_ADDR
43236: GO 43204
43238: POP
43239: POP
// end ;
43240: GO 43170
43242: POP
43243: POP
// if not result then
43244: LD_VAR 0 2
43248: NOT
43249: IFFALSE 43253
// exit ;
43251: GO 43401
// mech := result [ 1 ] ;
43253: LD_ADDR_VAR 0 5
43257: PUSH
43258: LD_VAR 0 2
43262: PUSH
43263: LD_INT 1
43265: ARRAY
43266: ST_TO_ADDR
// if result > 1 then
43267: LD_VAR 0 2
43271: PUSH
43272: LD_INT 1
43274: GREATER
43275: IFFALSE 43387
// begin for i = 2 to result do
43277: LD_ADDR_VAR 0 3
43281: PUSH
43282: DOUBLE
43283: LD_INT 2
43285: DEC
43286: ST_TO_ADDR
43287: LD_VAR 0 2
43291: PUSH
43292: FOR_TO
43293: IFFALSE 43385
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43295: LD_ADDR_VAR 0 4
43299: PUSH
43300: LD_VAR 0 2
43304: PUSH
43305: LD_VAR 0 3
43309: ARRAY
43310: PPUSH
43311: LD_INT 3
43313: PPUSH
43314: CALL_OW 259
43318: PUSH
43319: LD_VAR 0 2
43323: PUSH
43324: LD_VAR 0 3
43328: ARRAY
43329: PPUSH
43330: CALL_OW 432
43334: MINUS
43335: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43336: LD_VAR 0 4
43340: PUSH
43341: LD_VAR 0 5
43345: PPUSH
43346: LD_INT 3
43348: PPUSH
43349: CALL_OW 259
43353: PUSH
43354: LD_VAR 0 5
43358: PPUSH
43359: CALL_OW 432
43363: MINUS
43364: GREATEREQUAL
43365: IFFALSE 43383
// mech := result [ i ] ;
43367: LD_ADDR_VAR 0 5
43371: PUSH
43372: LD_VAR 0 2
43376: PUSH
43377: LD_VAR 0 3
43381: ARRAY
43382: ST_TO_ADDR
// end ;
43383: GO 43292
43385: POP
43386: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43387: LD_VAR 0 1
43391: PPUSH
43392: LD_VAR 0 5
43396: PPUSH
43397: CALL_OW 135
// end ;
43401: LD_VAR 0 2
43405: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43406: LD_INT 0
43408: PPUSH
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
// result := [ ] ;
43421: LD_ADDR_VAR 0 7
43425: PUSH
43426: EMPTY
43427: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43428: LD_VAR 0 1
43432: PPUSH
43433: CALL_OW 266
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: IN
43448: NOT
43449: IFFALSE 43453
// exit ;
43451: GO 45087
// if name then
43453: LD_VAR 0 3
43457: IFFALSE 43473
// SetBName ( base_dep , name ) ;
43459: LD_VAR 0 1
43463: PPUSH
43464: LD_VAR 0 3
43468: PPUSH
43469: CALL_OW 500
// base := GetBase ( base_dep ) ;
43473: LD_ADDR_VAR 0 15
43477: PUSH
43478: LD_VAR 0 1
43482: PPUSH
43483: CALL_OW 274
43487: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43488: LD_ADDR_VAR 0 16
43492: PUSH
43493: LD_VAR 0 1
43497: PPUSH
43498: CALL_OW 255
43502: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43503: LD_ADDR_VAR 0 17
43507: PUSH
43508: LD_VAR 0 1
43512: PPUSH
43513: CALL_OW 248
43517: ST_TO_ADDR
// if sources then
43518: LD_VAR 0 5
43522: IFFALSE 43569
// for i = 1 to 3 do
43524: LD_ADDR_VAR 0 8
43528: PUSH
43529: DOUBLE
43530: LD_INT 1
43532: DEC
43533: ST_TO_ADDR
43534: LD_INT 3
43536: PUSH
43537: FOR_TO
43538: IFFALSE 43567
// AddResourceType ( base , i , sources [ i ] ) ;
43540: LD_VAR 0 15
43544: PPUSH
43545: LD_VAR 0 8
43549: PPUSH
43550: LD_VAR 0 5
43554: PUSH
43555: LD_VAR 0 8
43559: ARRAY
43560: PPUSH
43561: CALL_OW 276
43565: GO 43537
43567: POP
43568: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43569: LD_ADDR_VAR 0 18
43573: PUSH
43574: LD_VAR 0 15
43578: PPUSH
43579: LD_VAR 0 2
43583: PPUSH
43584: LD_INT 1
43586: PPUSH
43587: CALL 42830 0 3
43591: ST_TO_ADDR
// InitHc ;
43592: CALL_OW 19
// InitUc ;
43596: CALL_OW 18
// uc_side := side ;
43600: LD_ADDR_OWVAR 20
43604: PUSH
43605: LD_VAR 0 16
43609: ST_TO_ADDR
// uc_nation := nation ;
43610: LD_ADDR_OWVAR 21
43614: PUSH
43615: LD_VAR 0 17
43619: ST_TO_ADDR
// if buildings then
43620: LD_VAR 0 18
43624: IFFALSE 44946
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43626: LD_ADDR_VAR 0 19
43630: PUSH
43631: LD_VAR 0 18
43635: PPUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 30
43641: PUSH
43642: LD_INT 29
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 30
43651: PUSH
43652: LD_INT 30
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: PPUSH
43664: CALL_OW 72
43668: ST_TO_ADDR
// if tmp then
43669: LD_VAR 0 19
43673: IFFALSE 43721
// for i in tmp do
43675: LD_ADDR_VAR 0 8
43679: PUSH
43680: LD_VAR 0 19
43684: PUSH
43685: FOR_IN
43686: IFFALSE 43719
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43688: LD_VAR 0 8
43692: PPUSH
43693: CALL_OW 250
43697: PPUSH
43698: LD_VAR 0 8
43702: PPUSH
43703: CALL_OW 251
43707: PPUSH
43708: LD_VAR 0 16
43712: PPUSH
43713: CALL_OW 441
43717: GO 43685
43719: POP
43720: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43721: LD_VAR 0 18
43725: PPUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 30
43731: PUSH
43732: LD_INT 32
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 30
43741: PUSH
43742: LD_INT 33
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: LIST
43753: PPUSH
43754: CALL_OW 72
43758: IFFALSE 43846
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43760: LD_ADDR_VAR 0 8
43764: PUSH
43765: LD_VAR 0 18
43769: PPUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 30
43775: PUSH
43776: LD_INT 32
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 30
43785: PUSH
43786: LD_INT 33
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: PPUSH
43798: CALL_OW 72
43802: PUSH
43803: FOR_IN
43804: IFFALSE 43844
// begin if not GetBWeapon ( i ) then
43806: LD_VAR 0 8
43810: PPUSH
43811: CALL_OW 269
43815: NOT
43816: IFFALSE 43842
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43818: LD_VAR 0 8
43822: PPUSH
43823: LD_VAR 0 8
43827: PPUSH
43828: LD_VAR 0 2
43832: PPUSH
43833: CALL 45092 0 2
43837: PPUSH
43838: CALL_OW 431
// end ;
43842: GO 43803
43844: POP
43845: POP
// end ; for i = 1 to personel do
43846: LD_ADDR_VAR 0 8
43850: PUSH
43851: DOUBLE
43852: LD_INT 1
43854: DEC
43855: ST_TO_ADDR
43856: LD_VAR 0 6
43860: PUSH
43861: FOR_TO
43862: IFFALSE 44926
// begin if i > 4 then
43864: LD_VAR 0 8
43868: PUSH
43869: LD_INT 4
43871: GREATER
43872: IFFALSE 43876
// break ;
43874: GO 44926
// case i of 1 :
43876: LD_VAR 0 8
43880: PUSH
43881: LD_INT 1
43883: DOUBLE
43884: EQUAL
43885: IFTRUE 43889
43887: GO 43969
43889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43890: LD_ADDR_VAR 0 12
43894: PUSH
43895: LD_VAR 0 18
43899: PPUSH
43900: LD_INT 22
43902: PUSH
43903: LD_VAR 0 16
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 58
43914: PUSH
43915: EMPTY
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 30
43923: PUSH
43924: LD_INT 32
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 30
43933: PUSH
43934: LD_INT 4
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 30
43943: PUSH
43944: LD_INT 5
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: PPUSH
43962: CALL_OW 72
43966: ST_TO_ADDR
43967: GO 44191
43969: LD_INT 2
43971: DOUBLE
43972: EQUAL
43973: IFTRUE 43977
43975: GO 44039
43977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43978: LD_ADDR_VAR 0 12
43982: PUSH
43983: LD_VAR 0 18
43987: PPUSH
43988: LD_INT 22
43990: PUSH
43991: LD_VAR 0 16
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 30
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 30
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PPUSH
44032: CALL_OW 72
44036: ST_TO_ADDR
44037: GO 44191
44039: LD_INT 3
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44109
44047: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44048: LD_ADDR_VAR 0 12
44052: PUSH
44053: LD_VAR 0 18
44057: PPUSH
44058: LD_INT 22
44060: PUSH
44061: LD_VAR 0 16
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 30
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 30
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PPUSH
44102: CALL_OW 72
44106: ST_TO_ADDR
44107: GO 44191
44109: LD_INT 4
44111: DOUBLE
44112: EQUAL
44113: IFTRUE 44117
44115: GO 44190
44117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44118: LD_ADDR_VAR 0 12
44122: PUSH
44123: LD_VAR 0 18
44127: PPUSH
44128: LD_INT 22
44130: PUSH
44131: LD_VAR 0 16
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 30
44145: PUSH
44146: LD_INT 6
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 30
44155: PUSH
44156: LD_INT 7
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 30
44165: PUSH
44166: LD_INT 8
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PPUSH
44183: CALL_OW 72
44187: ST_TO_ADDR
44188: GO 44191
44190: POP
// if i = 1 then
44191: LD_VAR 0 8
44195: PUSH
44196: LD_INT 1
44198: EQUAL
44199: IFFALSE 44310
// begin tmp := [ ] ;
44201: LD_ADDR_VAR 0 19
44205: PUSH
44206: EMPTY
44207: ST_TO_ADDR
// for j in f do
44208: LD_ADDR_VAR 0 9
44212: PUSH
44213: LD_VAR 0 12
44217: PUSH
44218: FOR_IN
44219: IFFALSE 44292
// if GetBType ( j ) = b_bunker then
44221: LD_VAR 0 9
44225: PPUSH
44226: CALL_OW 266
44230: PUSH
44231: LD_INT 32
44233: EQUAL
44234: IFFALSE 44261
// tmp := Insert ( tmp , 1 , j ) else
44236: LD_ADDR_VAR 0 19
44240: PUSH
44241: LD_VAR 0 19
44245: PPUSH
44246: LD_INT 1
44248: PPUSH
44249: LD_VAR 0 9
44253: PPUSH
44254: CALL_OW 2
44258: ST_TO_ADDR
44259: GO 44290
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44261: LD_ADDR_VAR 0 19
44265: PUSH
44266: LD_VAR 0 19
44270: PPUSH
44271: LD_VAR 0 19
44275: PUSH
44276: LD_INT 1
44278: PLUS
44279: PPUSH
44280: LD_VAR 0 9
44284: PPUSH
44285: CALL_OW 2
44289: ST_TO_ADDR
44290: GO 44218
44292: POP
44293: POP
// if tmp then
44294: LD_VAR 0 19
44298: IFFALSE 44310
// f := tmp ;
44300: LD_ADDR_VAR 0 12
44304: PUSH
44305: LD_VAR 0 19
44309: ST_TO_ADDR
// end ; x := personel [ i ] ;
44310: LD_ADDR_VAR 0 13
44314: PUSH
44315: LD_VAR 0 6
44319: PUSH
44320: LD_VAR 0 8
44324: ARRAY
44325: ST_TO_ADDR
// if x = - 1 then
44326: LD_VAR 0 13
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: EQUAL
44335: IFFALSE 44544
// begin for j in f do
44337: LD_ADDR_VAR 0 9
44341: PUSH
44342: LD_VAR 0 12
44346: PUSH
44347: FOR_IN
44348: IFFALSE 44540
// repeat InitHc ;
44350: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44354: LD_VAR 0 9
44358: PPUSH
44359: CALL_OW 266
44363: PUSH
44364: LD_INT 5
44366: EQUAL
44367: IFFALSE 44437
// begin if UnitsInside ( j ) < 3 then
44369: LD_VAR 0 9
44373: PPUSH
44374: CALL_OW 313
44378: PUSH
44379: LD_INT 3
44381: LESS
44382: IFFALSE 44418
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44384: LD_INT 0
44386: PPUSH
44387: LD_INT 5
44389: PUSH
44390: LD_INT 8
44392: PUSH
44393: LD_INT 9
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: PUSH
44401: LD_VAR 0 17
44405: ARRAY
44406: PPUSH
44407: LD_VAR 0 4
44411: PPUSH
44412: CALL_OW 380
44416: GO 44435
// PrepareHuman ( false , i , skill ) ;
44418: LD_INT 0
44420: PPUSH
44421: LD_VAR 0 8
44425: PPUSH
44426: LD_VAR 0 4
44430: PPUSH
44431: CALL_OW 380
// end else
44435: GO 44454
// PrepareHuman ( false , i , skill ) ;
44437: LD_INT 0
44439: PPUSH
44440: LD_VAR 0 8
44444: PPUSH
44445: LD_VAR 0 4
44449: PPUSH
44450: CALL_OW 380
// un := CreateHuman ;
44454: LD_ADDR_VAR 0 14
44458: PUSH
44459: CALL_OW 44
44463: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44464: LD_ADDR_VAR 0 7
44468: PUSH
44469: LD_VAR 0 7
44473: PPUSH
44474: LD_INT 1
44476: PPUSH
44477: LD_VAR 0 14
44481: PPUSH
44482: CALL_OW 2
44486: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44487: LD_VAR 0 14
44491: PPUSH
44492: LD_VAR 0 9
44496: PPUSH
44497: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44501: LD_VAR 0 9
44505: PPUSH
44506: CALL_OW 313
44510: PUSH
44511: LD_INT 6
44513: EQUAL
44514: PUSH
44515: LD_VAR 0 9
44519: PPUSH
44520: CALL_OW 266
44524: PUSH
44525: LD_INT 32
44527: PUSH
44528: LD_INT 31
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: IN
44535: OR
44536: IFFALSE 44350
44538: GO 44347
44540: POP
44541: POP
// end else
44542: GO 44924
// for j = 1 to x do
44544: LD_ADDR_VAR 0 9
44548: PUSH
44549: DOUBLE
44550: LD_INT 1
44552: DEC
44553: ST_TO_ADDR
44554: LD_VAR 0 13
44558: PUSH
44559: FOR_TO
44560: IFFALSE 44922
// begin InitHc ;
44562: CALL_OW 19
// if not f then
44566: LD_VAR 0 12
44570: NOT
44571: IFFALSE 44660
// begin PrepareHuman ( false , i , skill ) ;
44573: LD_INT 0
44575: PPUSH
44576: LD_VAR 0 8
44580: PPUSH
44581: LD_VAR 0 4
44585: PPUSH
44586: CALL_OW 380
// un := CreateHuman ;
44590: LD_ADDR_VAR 0 14
44594: PUSH
44595: CALL_OW 44
44599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44600: LD_ADDR_VAR 0 7
44604: PUSH
44605: LD_VAR 0 7
44609: PPUSH
44610: LD_INT 1
44612: PPUSH
44613: LD_VAR 0 14
44617: PPUSH
44618: CALL_OW 2
44622: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44623: LD_VAR 0 14
44627: PPUSH
44628: LD_VAR 0 1
44632: PPUSH
44633: CALL_OW 250
44637: PPUSH
44638: LD_VAR 0 1
44642: PPUSH
44643: CALL_OW 251
44647: PPUSH
44648: LD_INT 10
44650: PPUSH
44651: LD_INT 0
44653: PPUSH
44654: CALL_OW 50
// continue ;
44658: GO 44559
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44660: LD_VAR 0 12
44664: PUSH
44665: LD_INT 1
44667: ARRAY
44668: PPUSH
44669: CALL_OW 313
44673: PUSH
44674: LD_VAR 0 12
44678: PUSH
44679: LD_INT 1
44681: ARRAY
44682: PPUSH
44683: CALL_OW 266
44687: PUSH
44688: LD_INT 32
44690: PUSH
44691: LD_INT 31
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: IN
44698: AND
44699: PUSH
44700: LD_VAR 0 12
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: CALL_OW 313
44713: PUSH
44714: LD_INT 6
44716: EQUAL
44717: OR
44718: IFFALSE 44738
// f := Delete ( f , 1 ) ;
44720: LD_ADDR_VAR 0 12
44724: PUSH
44725: LD_VAR 0 12
44729: PPUSH
44730: LD_INT 1
44732: PPUSH
44733: CALL_OW 3
44737: ST_TO_ADDR
// if not f then
44738: LD_VAR 0 12
44742: NOT
44743: IFFALSE 44761
// begin x := x + 2 ;
44745: LD_ADDR_VAR 0 13
44749: PUSH
44750: LD_VAR 0 13
44754: PUSH
44755: LD_INT 2
44757: PLUS
44758: ST_TO_ADDR
// continue ;
44759: GO 44559
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44761: LD_VAR 0 12
44765: PUSH
44766: LD_INT 1
44768: ARRAY
44769: PPUSH
44770: CALL_OW 266
44774: PUSH
44775: LD_INT 5
44777: EQUAL
44778: IFFALSE 44852
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44780: LD_VAR 0 12
44784: PUSH
44785: LD_INT 1
44787: ARRAY
44788: PPUSH
44789: CALL_OW 313
44793: PUSH
44794: LD_INT 3
44796: LESS
44797: IFFALSE 44833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44799: LD_INT 0
44801: PPUSH
44802: LD_INT 5
44804: PUSH
44805: LD_INT 8
44807: PUSH
44808: LD_INT 9
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: PUSH
44816: LD_VAR 0 17
44820: ARRAY
44821: PPUSH
44822: LD_VAR 0 4
44826: PPUSH
44827: CALL_OW 380
44831: GO 44850
// PrepareHuman ( false , i , skill ) ;
44833: LD_INT 0
44835: PPUSH
44836: LD_VAR 0 8
44840: PPUSH
44841: LD_VAR 0 4
44845: PPUSH
44846: CALL_OW 380
// end else
44850: GO 44869
// PrepareHuman ( false , i , skill ) ;
44852: LD_INT 0
44854: PPUSH
44855: LD_VAR 0 8
44859: PPUSH
44860: LD_VAR 0 4
44864: PPUSH
44865: CALL_OW 380
// un := CreateHuman ;
44869: LD_ADDR_VAR 0 14
44873: PUSH
44874: CALL_OW 44
44878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44879: LD_ADDR_VAR 0 7
44883: PUSH
44884: LD_VAR 0 7
44888: PPUSH
44889: LD_INT 1
44891: PPUSH
44892: LD_VAR 0 14
44896: PPUSH
44897: CALL_OW 2
44901: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44902: LD_VAR 0 14
44906: PPUSH
44907: LD_VAR 0 12
44911: PUSH
44912: LD_INT 1
44914: ARRAY
44915: PPUSH
44916: CALL_OW 52
// end ;
44920: GO 44559
44922: POP
44923: POP
// end ;
44924: GO 43861
44926: POP
44927: POP
// result := result ^ buildings ;
44928: LD_ADDR_VAR 0 7
44932: PUSH
44933: LD_VAR 0 7
44937: PUSH
44938: LD_VAR 0 18
44942: ADD
44943: ST_TO_ADDR
// end else
44944: GO 45087
// begin for i = 1 to personel do
44946: LD_ADDR_VAR 0 8
44950: PUSH
44951: DOUBLE
44952: LD_INT 1
44954: DEC
44955: ST_TO_ADDR
44956: LD_VAR 0 6
44960: PUSH
44961: FOR_TO
44962: IFFALSE 45085
// begin if i > 4 then
44964: LD_VAR 0 8
44968: PUSH
44969: LD_INT 4
44971: GREATER
44972: IFFALSE 44976
// break ;
44974: GO 45085
// x := personel [ i ] ;
44976: LD_ADDR_VAR 0 13
44980: PUSH
44981: LD_VAR 0 6
44985: PUSH
44986: LD_VAR 0 8
44990: ARRAY
44991: ST_TO_ADDR
// if x = - 1 then
44992: LD_VAR 0 13
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: EQUAL
45001: IFFALSE 45005
// continue ;
45003: GO 44961
// PrepareHuman ( false , i , skill ) ;
45005: LD_INT 0
45007: PPUSH
45008: LD_VAR 0 8
45012: PPUSH
45013: LD_VAR 0 4
45017: PPUSH
45018: CALL_OW 380
// un := CreateHuman ;
45022: LD_ADDR_VAR 0 14
45026: PUSH
45027: CALL_OW 44
45031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45032: LD_VAR 0 14
45036: PPUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 250
45046: PPUSH
45047: LD_VAR 0 1
45051: PPUSH
45052: CALL_OW 251
45056: PPUSH
45057: LD_INT 10
45059: PPUSH
45060: LD_INT 0
45062: PPUSH
45063: CALL_OW 50
// result := result ^ un ;
45067: LD_ADDR_VAR 0 7
45071: PUSH
45072: LD_VAR 0 7
45076: PUSH
45077: LD_VAR 0 14
45081: ADD
45082: ST_TO_ADDR
// end ;
45083: GO 44961
45085: POP
45086: POP
// end ; end ;
45087: LD_VAR 0 7
45091: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45092: LD_INT 0
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
// result := false ;
45110: LD_ADDR_VAR 0 3
45114: PUSH
45115: LD_INT 0
45117: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45118: LD_VAR 0 1
45122: NOT
45123: PUSH
45124: LD_VAR 0 1
45128: PPUSH
45129: CALL_OW 266
45133: PUSH
45134: LD_INT 32
45136: PUSH
45137: LD_INT 33
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: IN
45144: NOT
45145: OR
45146: IFFALSE 45150
// exit ;
45148: GO 46259
// nat := GetNation ( tower ) ;
45150: LD_ADDR_VAR 0 12
45154: PUSH
45155: LD_VAR 0 1
45159: PPUSH
45160: CALL_OW 248
45164: ST_TO_ADDR
// side := GetSide ( tower ) ;
45165: LD_ADDR_VAR 0 16
45169: PUSH
45170: LD_VAR 0 1
45174: PPUSH
45175: CALL_OW 255
45179: ST_TO_ADDR
// x := GetX ( tower ) ;
45180: LD_ADDR_VAR 0 10
45184: PUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: CALL_OW 250
45194: ST_TO_ADDR
// y := GetY ( tower ) ;
45195: LD_ADDR_VAR 0 11
45199: PUSH
45200: LD_VAR 0 1
45204: PPUSH
45205: CALL_OW 251
45209: ST_TO_ADDR
// if not x or not y then
45210: LD_VAR 0 10
45214: NOT
45215: PUSH
45216: LD_VAR 0 11
45220: NOT
45221: OR
45222: IFFALSE 45226
// exit ;
45224: GO 46259
// weapon := 0 ;
45226: LD_ADDR_VAR 0 18
45230: PUSH
45231: LD_INT 0
45233: ST_TO_ADDR
// fac_list := [ ] ;
45234: LD_ADDR_VAR 0 17
45238: PUSH
45239: EMPTY
45240: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45241: LD_ADDR_VAR 0 6
45245: PUSH
45246: LD_VAR 0 1
45250: PPUSH
45251: CALL_OW 274
45255: PPUSH
45256: LD_VAR 0 2
45260: PPUSH
45261: LD_INT 0
45263: PPUSH
45264: CALL 42830 0 3
45268: PPUSH
45269: LD_INT 30
45271: PUSH
45272: LD_INT 3
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PPUSH
45279: CALL_OW 72
45283: ST_TO_ADDR
// if not factories then
45284: LD_VAR 0 6
45288: NOT
45289: IFFALSE 45293
// exit ;
45291: GO 46259
// for i in factories do
45293: LD_ADDR_VAR 0 8
45297: PUSH
45298: LD_VAR 0 6
45302: PUSH
45303: FOR_IN
45304: IFFALSE 45329
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45306: LD_ADDR_VAR 0 17
45310: PUSH
45311: LD_VAR 0 17
45315: PUSH
45316: LD_VAR 0 8
45320: PPUSH
45321: CALL_OW 478
45325: UNION
45326: ST_TO_ADDR
45327: GO 45303
45329: POP
45330: POP
// if not fac_list then
45331: LD_VAR 0 17
45335: NOT
45336: IFFALSE 45340
// exit ;
45338: GO 46259
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45340: LD_ADDR_VAR 0 5
45344: PUSH
45345: LD_INT 4
45347: PUSH
45348: LD_INT 5
45350: PUSH
45351: LD_INT 9
45353: PUSH
45354: LD_INT 10
45356: PUSH
45357: LD_INT 6
45359: PUSH
45360: LD_INT 7
45362: PUSH
45363: LD_INT 11
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 27
45377: PUSH
45378: LD_INT 28
45380: PUSH
45381: LD_INT 26
45383: PUSH
45384: LD_INT 30
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 43
45395: PUSH
45396: LD_INT 44
45398: PUSH
45399: LD_INT 46
45401: PUSH
45402: LD_INT 45
45404: PUSH
45405: LD_INT 47
45407: PUSH
45408: LD_INT 49
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: PUSH
45424: LD_VAR 0 12
45428: ARRAY
45429: ST_TO_ADDR
// list := list isect fac_list ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 5
45439: PUSH
45440: LD_VAR 0 17
45444: ISECT
45445: ST_TO_ADDR
// if not list then
45446: LD_VAR 0 5
45450: NOT
45451: IFFALSE 45455
// exit ;
45453: GO 46259
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45455: LD_VAR 0 12
45459: PUSH
45460: LD_INT 3
45462: EQUAL
45463: PUSH
45464: LD_INT 49
45466: PUSH
45467: LD_VAR 0 5
45471: IN
45472: AND
45473: PUSH
45474: LD_INT 31
45476: PPUSH
45477: LD_VAR 0 16
45481: PPUSH
45482: CALL_OW 321
45486: PUSH
45487: LD_INT 2
45489: EQUAL
45490: AND
45491: IFFALSE 45551
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45493: LD_INT 22
45495: PUSH
45496: LD_VAR 0 16
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 35
45507: PUSH
45508: LD_INT 49
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 91
45517: PUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_INT 10
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: PPUSH
45536: CALL_OW 69
45540: NOT
45541: IFFALSE 45551
// weapon := ru_time_lapser ;
45543: LD_ADDR_VAR 0 18
45547: PUSH
45548: LD_INT 49
45550: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45551: LD_VAR 0 12
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: IN
45566: PUSH
45567: LD_INT 11
45569: PUSH
45570: LD_VAR 0 5
45574: IN
45575: PUSH
45576: LD_INT 30
45578: PUSH
45579: LD_VAR 0 5
45583: IN
45584: OR
45585: AND
45586: PUSH
45587: LD_INT 6
45589: PPUSH
45590: LD_VAR 0 16
45594: PPUSH
45595: CALL_OW 321
45599: PUSH
45600: LD_INT 2
45602: EQUAL
45603: AND
45604: IFFALSE 45769
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45606: LD_INT 22
45608: PUSH
45609: LD_VAR 0 16
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: LD_INT 35
45623: PUSH
45624: LD_INT 11
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 35
45633: PUSH
45634: LD_INT 30
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 91
45648: PUSH
45649: LD_VAR 0 1
45653: PUSH
45654: LD_INT 18
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: PPUSH
45667: CALL_OW 69
45671: NOT
45672: PUSH
45673: LD_INT 22
45675: PUSH
45676: LD_VAR 0 16
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 30
45690: PUSH
45691: LD_INT 32
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 30
45700: PUSH
45701: LD_INT 33
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 91
45715: PUSH
45716: LD_VAR 0 1
45720: PUSH
45721: LD_INT 12
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: PPUSH
45737: CALL_OW 69
45741: PUSH
45742: LD_INT 2
45744: GREATER
45745: AND
45746: IFFALSE 45769
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45748: LD_ADDR_VAR 0 18
45752: PUSH
45753: LD_INT 11
45755: PUSH
45756: LD_INT 30
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_VAR 0 12
45767: ARRAY
45768: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45769: LD_VAR 0 18
45773: NOT
45774: PUSH
45775: LD_INT 40
45777: PPUSH
45778: LD_VAR 0 16
45782: PPUSH
45783: CALL_OW 321
45787: PUSH
45788: LD_INT 2
45790: EQUAL
45791: AND
45792: PUSH
45793: LD_INT 7
45795: PUSH
45796: LD_VAR 0 5
45800: IN
45801: PUSH
45802: LD_INT 28
45804: PUSH
45805: LD_VAR 0 5
45809: IN
45810: OR
45811: PUSH
45812: LD_INT 45
45814: PUSH
45815: LD_VAR 0 5
45819: IN
45820: OR
45821: AND
45822: IFFALSE 46076
// begin hex := GetHexInfo ( x , y ) ;
45824: LD_ADDR_VAR 0 4
45828: PUSH
45829: LD_VAR 0 10
45833: PPUSH
45834: LD_VAR 0 11
45838: PPUSH
45839: CALL_OW 546
45843: ST_TO_ADDR
// if hex [ 1 ] then
45844: LD_VAR 0 4
45848: PUSH
45849: LD_INT 1
45851: ARRAY
45852: IFFALSE 45856
// exit ;
45854: GO 46259
// height := hex [ 2 ] ;
45856: LD_ADDR_VAR 0 15
45860: PUSH
45861: LD_VAR 0 4
45865: PUSH
45866: LD_INT 2
45868: ARRAY
45869: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45870: LD_ADDR_VAR 0 14
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 5
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// for i in tmp do
45893: LD_ADDR_VAR 0 8
45897: PUSH
45898: LD_VAR 0 14
45902: PUSH
45903: FOR_IN
45904: IFFALSE 46074
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45906: LD_ADDR_VAR 0 9
45910: PUSH
45911: LD_VAR 0 10
45915: PPUSH
45916: LD_VAR 0 8
45920: PPUSH
45921: LD_INT 5
45923: PPUSH
45924: CALL_OW 272
45928: PUSH
45929: LD_VAR 0 11
45933: PPUSH
45934: LD_VAR 0 8
45938: PPUSH
45939: LD_INT 5
45941: PPUSH
45942: CALL_OW 273
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45951: LD_VAR 0 9
45955: PUSH
45956: LD_INT 1
45958: ARRAY
45959: PPUSH
45960: LD_VAR 0 9
45964: PUSH
45965: LD_INT 2
45967: ARRAY
45968: PPUSH
45969: CALL_OW 488
45973: IFFALSE 46072
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45975: LD_ADDR_VAR 0 4
45979: PUSH
45980: LD_VAR 0 9
45984: PUSH
45985: LD_INT 1
45987: ARRAY
45988: PPUSH
45989: LD_VAR 0 9
45993: PUSH
45994: LD_INT 2
45996: ARRAY
45997: PPUSH
45998: CALL_OW 546
46002: ST_TO_ADDR
// if hex [ 1 ] then
46003: LD_VAR 0 4
46007: PUSH
46008: LD_INT 1
46010: ARRAY
46011: IFFALSE 46015
// continue ;
46013: GO 45903
// h := hex [ 2 ] ;
46015: LD_ADDR_VAR 0 13
46019: PUSH
46020: LD_VAR 0 4
46024: PUSH
46025: LD_INT 2
46027: ARRAY
46028: ST_TO_ADDR
// if h + 7 < height then
46029: LD_VAR 0 13
46033: PUSH
46034: LD_INT 7
46036: PLUS
46037: PUSH
46038: LD_VAR 0 15
46042: LESS
46043: IFFALSE 46072
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46045: LD_ADDR_VAR 0 18
46049: PUSH
46050: LD_INT 7
46052: PUSH
46053: LD_INT 28
46055: PUSH
46056: LD_INT 45
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: PUSH
46064: LD_VAR 0 12
46068: ARRAY
46069: ST_TO_ADDR
// break ;
46070: GO 46074
// end ; end ; end ;
46072: GO 45903
46074: POP
46075: POP
// end ; if not weapon then
46076: LD_VAR 0 18
46080: NOT
46081: IFFALSE 46141
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46083: LD_ADDR_VAR 0 5
46087: PUSH
46088: LD_VAR 0 5
46092: PUSH
46093: LD_INT 11
46095: PUSH
46096: LD_INT 30
46098: PUSH
46099: LD_INT 49
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: DIFF
46107: ST_TO_ADDR
// if not list then
46108: LD_VAR 0 5
46112: NOT
46113: IFFALSE 46117
// exit ;
46115: GO 46259
// weapon := list [ rand ( 1 , list ) ] ;
46117: LD_ADDR_VAR 0 18
46121: PUSH
46122: LD_VAR 0 5
46126: PUSH
46127: LD_INT 1
46129: PPUSH
46130: LD_VAR 0 5
46134: PPUSH
46135: CALL_OW 12
46139: ARRAY
46140: ST_TO_ADDR
// end ; if weapon then
46141: LD_VAR 0 18
46145: IFFALSE 46259
// begin tmp := CostOfWeapon ( weapon ) ;
46147: LD_ADDR_VAR 0 14
46151: PUSH
46152: LD_VAR 0 18
46156: PPUSH
46157: CALL_OW 451
46161: ST_TO_ADDR
// j := GetBase ( tower ) ;
46162: LD_ADDR_VAR 0 9
46166: PUSH
46167: LD_VAR 0 1
46171: PPUSH
46172: CALL_OW 274
46176: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46177: LD_VAR 0 9
46181: PPUSH
46182: LD_INT 1
46184: PPUSH
46185: CALL_OW 275
46189: PUSH
46190: LD_VAR 0 14
46194: PUSH
46195: LD_INT 1
46197: ARRAY
46198: GREATEREQUAL
46199: PUSH
46200: LD_VAR 0 9
46204: PPUSH
46205: LD_INT 2
46207: PPUSH
46208: CALL_OW 275
46212: PUSH
46213: LD_VAR 0 14
46217: PUSH
46218: LD_INT 2
46220: ARRAY
46221: GREATEREQUAL
46222: AND
46223: PUSH
46224: LD_VAR 0 9
46228: PPUSH
46229: LD_INT 3
46231: PPUSH
46232: CALL_OW 275
46236: PUSH
46237: LD_VAR 0 14
46241: PUSH
46242: LD_INT 3
46244: ARRAY
46245: GREATEREQUAL
46246: AND
46247: IFFALSE 46259
// result := weapon ;
46249: LD_ADDR_VAR 0 3
46253: PUSH
46254: LD_VAR 0 18
46258: ST_TO_ADDR
// end ; end ;
46259: LD_VAR 0 3
46263: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46264: LD_INT 0
46266: PPUSH
46267: PPUSH
// result := true ;
46268: LD_ADDR_VAR 0 3
46272: PUSH
46273: LD_INT 1
46275: ST_TO_ADDR
// if array1 = array2 then
46276: LD_VAR 0 1
46280: PUSH
46281: LD_VAR 0 2
46285: EQUAL
46286: IFFALSE 46346
// begin for i = 1 to array1 do
46288: LD_ADDR_VAR 0 4
46292: PUSH
46293: DOUBLE
46294: LD_INT 1
46296: DEC
46297: ST_TO_ADDR
46298: LD_VAR 0 1
46302: PUSH
46303: FOR_TO
46304: IFFALSE 46342
// if array1 [ i ] <> array2 [ i ] then
46306: LD_VAR 0 1
46310: PUSH
46311: LD_VAR 0 4
46315: ARRAY
46316: PUSH
46317: LD_VAR 0 2
46321: PUSH
46322: LD_VAR 0 4
46326: ARRAY
46327: NONEQUAL
46328: IFFALSE 46340
// begin result := false ;
46330: LD_ADDR_VAR 0 3
46334: PUSH
46335: LD_INT 0
46337: ST_TO_ADDR
// break ;
46338: GO 46342
// end ;
46340: GO 46303
46342: POP
46343: POP
// end else
46344: GO 46354
// result := false ;
46346: LD_ADDR_VAR 0 3
46350: PUSH
46351: LD_INT 0
46353: ST_TO_ADDR
// end ;
46354: LD_VAR 0 3
46358: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46359: LD_INT 0
46361: PPUSH
46362: PPUSH
// if not array1 or not array2 then
46363: LD_VAR 0 1
46367: NOT
46368: PUSH
46369: LD_VAR 0 2
46373: NOT
46374: OR
46375: IFFALSE 46379
// exit ;
46377: GO 46443
// result := true ;
46379: LD_ADDR_VAR 0 3
46383: PUSH
46384: LD_INT 1
46386: ST_TO_ADDR
// for i = 1 to array1 do
46387: LD_ADDR_VAR 0 4
46391: PUSH
46392: DOUBLE
46393: LD_INT 1
46395: DEC
46396: ST_TO_ADDR
46397: LD_VAR 0 1
46401: PUSH
46402: FOR_TO
46403: IFFALSE 46441
// if array1 [ i ] <> array2 [ i ] then
46405: LD_VAR 0 1
46409: PUSH
46410: LD_VAR 0 4
46414: ARRAY
46415: PUSH
46416: LD_VAR 0 2
46420: PUSH
46421: LD_VAR 0 4
46425: ARRAY
46426: NONEQUAL
46427: IFFALSE 46439
// begin result := false ;
46429: LD_ADDR_VAR 0 3
46433: PUSH
46434: LD_INT 0
46436: ST_TO_ADDR
// break ;
46437: GO 46441
// end ;
46439: GO 46402
46441: POP
46442: POP
// end ;
46443: LD_VAR 0 3
46447: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46448: LD_INT 0
46450: PPUSH
46451: PPUSH
46452: PPUSH
// pom := GetBase ( fac ) ;
46453: LD_ADDR_VAR 0 5
46457: PUSH
46458: LD_VAR 0 1
46462: PPUSH
46463: CALL_OW 274
46467: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46468: LD_ADDR_VAR 0 4
46472: PUSH
46473: LD_VAR 0 2
46477: PUSH
46478: LD_INT 1
46480: ARRAY
46481: PPUSH
46482: LD_VAR 0 2
46486: PUSH
46487: LD_INT 2
46489: ARRAY
46490: PPUSH
46491: LD_VAR 0 2
46495: PUSH
46496: LD_INT 3
46498: ARRAY
46499: PPUSH
46500: LD_VAR 0 2
46504: PUSH
46505: LD_INT 4
46507: ARRAY
46508: PPUSH
46509: CALL_OW 449
46513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46514: LD_ADDR_VAR 0 3
46518: PUSH
46519: LD_VAR 0 5
46523: PPUSH
46524: LD_INT 1
46526: PPUSH
46527: CALL_OW 275
46531: PUSH
46532: LD_VAR 0 4
46536: PUSH
46537: LD_INT 1
46539: ARRAY
46540: GREATEREQUAL
46541: PUSH
46542: LD_VAR 0 5
46546: PPUSH
46547: LD_INT 2
46549: PPUSH
46550: CALL_OW 275
46554: PUSH
46555: LD_VAR 0 4
46559: PUSH
46560: LD_INT 2
46562: ARRAY
46563: GREATEREQUAL
46564: AND
46565: PUSH
46566: LD_VAR 0 5
46570: PPUSH
46571: LD_INT 3
46573: PPUSH
46574: CALL_OW 275
46578: PUSH
46579: LD_VAR 0 4
46583: PUSH
46584: LD_INT 3
46586: ARRAY
46587: GREATEREQUAL
46588: AND
46589: ST_TO_ADDR
// end ;
46590: LD_VAR 0 3
46594: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46595: LD_INT 0
46597: PPUSH
46598: PPUSH
46599: PPUSH
46600: PPUSH
// pom := GetBase ( building ) ;
46601: LD_ADDR_VAR 0 3
46605: PUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 274
46615: ST_TO_ADDR
// if not pom then
46616: LD_VAR 0 3
46620: NOT
46621: IFFALSE 46625
// exit ;
46623: GO 46795
// btype := GetBType ( building ) ;
46625: LD_ADDR_VAR 0 5
46629: PUSH
46630: LD_VAR 0 1
46634: PPUSH
46635: CALL_OW 266
46639: ST_TO_ADDR
// if btype = b_armoury then
46640: LD_VAR 0 5
46644: PUSH
46645: LD_INT 4
46647: EQUAL
46648: IFFALSE 46658
// btype := b_barracks ;
46650: LD_ADDR_VAR 0 5
46654: PUSH
46655: LD_INT 5
46657: ST_TO_ADDR
// if btype = b_depot then
46658: LD_VAR 0 5
46662: PUSH
46663: LD_INT 0
46665: EQUAL
46666: IFFALSE 46676
// btype := b_warehouse ;
46668: LD_ADDR_VAR 0 5
46672: PUSH
46673: LD_INT 1
46675: ST_TO_ADDR
// if btype = b_workshop then
46676: LD_VAR 0 5
46680: PUSH
46681: LD_INT 2
46683: EQUAL
46684: IFFALSE 46694
// btype := b_factory ;
46686: LD_ADDR_VAR 0 5
46690: PUSH
46691: LD_INT 3
46693: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46694: LD_ADDR_VAR 0 4
46698: PUSH
46699: LD_VAR 0 5
46703: PPUSH
46704: LD_VAR 0 1
46708: PPUSH
46709: CALL_OW 248
46713: PPUSH
46714: CALL_OW 450
46718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46719: LD_ADDR_VAR 0 2
46723: PUSH
46724: LD_VAR 0 3
46728: PPUSH
46729: LD_INT 1
46731: PPUSH
46732: CALL_OW 275
46736: PUSH
46737: LD_VAR 0 4
46741: PUSH
46742: LD_INT 1
46744: ARRAY
46745: GREATEREQUAL
46746: PUSH
46747: LD_VAR 0 3
46751: PPUSH
46752: LD_INT 2
46754: PPUSH
46755: CALL_OW 275
46759: PUSH
46760: LD_VAR 0 4
46764: PUSH
46765: LD_INT 2
46767: ARRAY
46768: GREATEREQUAL
46769: AND
46770: PUSH
46771: LD_VAR 0 3
46775: PPUSH
46776: LD_INT 3
46778: PPUSH
46779: CALL_OW 275
46783: PUSH
46784: LD_VAR 0 4
46788: PUSH
46789: LD_INT 3
46791: ARRAY
46792: GREATEREQUAL
46793: AND
46794: ST_TO_ADDR
// end ;
46795: LD_VAR 0 2
46799: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46800: LD_INT 0
46802: PPUSH
46803: PPUSH
46804: PPUSH
// pom := GetBase ( building ) ;
46805: LD_ADDR_VAR 0 4
46809: PUSH
46810: LD_VAR 0 1
46814: PPUSH
46815: CALL_OW 274
46819: ST_TO_ADDR
// if not pom then
46820: LD_VAR 0 4
46824: NOT
46825: IFFALSE 46829
// exit ;
46827: GO 46930
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46829: LD_ADDR_VAR 0 5
46833: PUSH
46834: LD_VAR 0 2
46838: PPUSH
46839: LD_VAR 0 1
46843: PPUSH
46844: CALL_OW 248
46848: PPUSH
46849: CALL_OW 450
46853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46854: LD_ADDR_VAR 0 3
46858: PUSH
46859: LD_VAR 0 4
46863: PPUSH
46864: LD_INT 1
46866: PPUSH
46867: CALL_OW 275
46871: PUSH
46872: LD_VAR 0 5
46876: PUSH
46877: LD_INT 1
46879: ARRAY
46880: GREATEREQUAL
46881: PUSH
46882: LD_VAR 0 4
46886: PPUSH
46887: LD_INT 2
46889: PPUSH
46890: CALL_OW 275
46894: PUSH
46895: LD_VAR 0 5
46899: PUSH
46900: LD_INT 2
46902: ARRAY
46903: GREATEREQUAL
46904: AND
46905: PUSH
46906: LD_VAR 0 4
46910: PPUSH
46911: LD_INT 3
46913: PPUSH
46914: CALL_OW 275
46918: PUSH
46919: LD_VAR 0 5
46923: PUSH
46924: LD_INT 3
46926: ARRAY
46927: GREATEREQUAL
46928: AND
46929: ST_TO_ADDR
// end ;
46930: LD_VAR 0 3
46934: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46935: LD_INT 0
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
// result := false ;
46948: LD_ADDR_VAR 0 8
46952: PUSH
46953: LD_INT 0
46955: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46956: LD_VAR 0 5
46960: NOT
46961: PUSH
46962: LD_VAR 0 1
46966: NOT
46967: OR
46968: PUSH
46969: LD_VAR 0 2
46973: NOT
46974: OR
46975: PUSH
46976: LD_VAR 0 3
46980: NOT
46981: OR
46982: IFFALSE 46986
// exit ;
46984: GO 47800
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46986: LD_ADDR_VAR 0 14
46990: PUSH
46991: LD_VAR 0 1
46995: PPUSH
46996: LD_VAR 0 2
47000: PPUSH
47001: LD_VAR 0 3
47005: PPUSH
47006: LD_VAR 0 4
47010: PPUSH
47011: LD_VAR 0 5
47015: PUSH
47016: LD_INT 1
47018: ARRAY
47019: PPUSH
47020: CALL_OW 248
47024: PPUSH
47025: LD_INT 0
47027: PPUSH
47028: CALL 49037 0 6
47032: ST_TO_ADDR
// if not hexes then
47033: LD_VAR 0 14
47037: NOT
47038: IFFALSE 47042
// exit ;
47040: GO 47800
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47042: LD_ADDR_VAR 0 17
47046: PUSH
47047: LD_VAR 0 5
47051: PPUSH
47052: LD_INT 22
47054: PUSH
47055: LD_VAR 0 13
47059: PPUSH
47060: CALL_OW 255
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 30
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 30
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PPUSH
47101: CALL_OW 72
47105: ST_TO_ADDR
// for i = 1 to hexes do
47106: LD_ADDR_VAR 0 9
47110: PUSH
47111: DOUBLE
47112: LD_INT 1
47114: DEC
47115: ST_TO_ADDR
47116: LD_VAR 0 14
47120: PUSH
47121: FOR_TO
47122: IFFALSE 47798
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47124: LD_ADDR_VAR 0 13
47128: PUSH
47129: LD_VAR 0 14
47133: PUSH
47134: LD_VAR 0 9
47138: ARRAY
47139: PUSH
47140: LD_INT 1
47142: ARRAY
47143: PPUSH
47144: LD_VAR 0 14
47148: PUSH
47149: LD_VAR 0 9
47153: ARRAY
47154: PUSH
47155: LD_INT 2
47157: ARRAY
47158: PPUSH
47159: CALL_OW 428
47163: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47164: LD_VAR 0 14
47168: PUSH
47169: LD_VAR 0 9
47173: ARRAY
47174: PUSH
47175: LD_INT 1
47177: ARRAY
47178: PPUSH
47179: LD_VAR 0 14
47183: PUSH
47184: LD_VAR 0 9
47188: ARRAY
47189: PUSH
47190: LD_INT 2
47192: ARRAY
47193: PPUSH
47194: CALL_OW 351
47198: PUSH
47199: LD_VAR 0 14
47203: PUSH
47204: LD_VAR 0 9
47208: ARRAY
47209: PUSH
47210: LD_INT 1
47212: ARRAY
47213: PPUSH
47214: LD_VAR 0 14
47218: PUSH
47219: LD_VAR 0 9
47223: ARRAY
47224: PUSH
47225: LD_INT 2
47227: ARRAY
47228: PPUSH
47229: CALL_OW 488
47233: NOT
47234: OR
47235: PUSH
47236: LD_VAR 0 13
47240: PPUSH
47241: CALL_OW 247
47245: PUSH
47246: LD_INT 3
47248: EQUAL
47249: OR
47250: IFFALSE 47256
// exit ;
47252: POP
47253: POP
47254: GO 47800
// if not tmp then
47256: LD_VAR 0 13
47260: NOT
47261: IFFALSE 47265
// continue ;
47263: GO 47121
// result := true ;
47265: LD_ADDR_VAR 0 8
47269: PUSH
47270: LD_INT 1
47272: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47273: LD_VAR 0 6
47277: PUSH
47278: LD_VAR 0 13
47282: PPUSH
47283: CALL_OW 247
47287: PUSH
47288: LD_INT 2
47290: EQUAL
47291: AND
47292: PUSH
47293: LD_VAR 0 13
47297: PPUSH
47298: CALL_OW 263
47302: PUSH
47303: LD_INT 1
47305: EQUAL
47306: AND
47307: IFFALSE 47471
// begin if IsDrivenBy ( tmp ) then
47309: LD_VAR 0 13
47313: PPUSH
47314: CALL_OW 311
47318: IFFALSE 47322
// continue ;
47320: GO 47121
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47322: LD_VAR 0 6
47326: PPUSH
47327: LD_INT 3
47329: PUSH
47330: LD_INT 60
47332: PUSH
47333: EMPTY
47334: LIST
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: LD_INT 55
47345: PUSH
47346: EMPTY
47347: LIST
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PPUSH
47357: CALL_OW 72
47361: IFFALSE 47469
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47363: LD_ADDR_VAR 0 18
47367: PUSH
47368: LD_VAR 0 6
47372: PPUSH
47373: LD_INT 3
47375: PUSH
47376: LD_INT 60
47378: PUSH
47379: EMPTY
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 55
47391: PUSH
47392: EMPTY
47393: LIST
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PPUSH
47403: CALL_OW 72
47407: PUSH
47408: LD_INT 1
47410: ARRAY
47411: ST_TO_ADDR
// if IsInUnit ( driver ) then
47412: LD_VAR 0 18
47416: PPUSH
47417: CALL_OW 310
47421: IFFALSE 47432
// ComExit ( driver ) ;
47423: LD_VAR 0 18
47427: PPUSH
47428: CALL 72221 0 1
// AddComEnterUnit ( driver , tmp ) ;
47432: LD_VAR 0 18
47436: PPUSH
47437: LD_VAR 0 13
47441: PPUSH
47442: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47446: LD_VAR 0 18
47450: PPUSH
47451: LD_VAR 0 7
47455: PPUSH
47456: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47460: LD_VAR 0 18
47464: PPUSH
47465: CALL_OW 181
// end ; continue ;
47469: GO 47121
// end ; if not cleaners or not tmp in cleaners then
47471: LD_VAR 0 6
47475: NOT
47476: PUSH
47477: LD_VAR 0 13
47481: PUSH
47482: LD_VAR 0 6
47486: IN
47487: NOT
47488: OR
47489: IFFALSE 47796
// begin if dep then
47491: LD_VAR 0 17
47495: IFFALSE 47631
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47497: LD_ADDR_VAR 0 16
47501: PUSH
47502: LD_VAR 0 17
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: PPUSH
47511: CALL_OW 250
47515: PPUSH
47516: LD_VAR 0 17
47520: PUSH
47521: LD_INT 1
47523: ARRAY
47524: PPUSH
47525: CALL_OW 254
47529: PPUSH
47530: LD_INT 5
47532: PPUSH
47533: CALL_OW 272
47537: PUSH
47538: LD_VAR 0 17
47542: PUSH
47543: LD_INT 1
47545: ARRAY
47546: PPUSH
47547: CALL_OW 251
47551: PPUSH
47552: LD_VAR 0 17
47556: PUSH
47557: LD_INT 1
47559: ARRAY
47560: PPUSH
47561: CALL_OW 254
47565: PPUSH
47566: LD_INT 5
47568: PPUSH
47569: CALL_OW 273
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47578: LD_VAR 0 16
47582: PUSH
47583: LD_INT 1
47585: ARRAY
47586: PPUSH
47587: LD_VAR 0 16
47591: PUSH
47592: LD_INT 2
47594: ARRAY
47595: PPUSH
47596: CALL_OW 488
47600: IFFALSE 47631
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47602: LD_VAR 0 13
47606: PPUSH
47607: LD_VAR 0 16
47611: PUSH
47612: LD_INT 1
47614: ARRAY
47615: PPUSH
47616: LD_VAR 0 16
47620: PUSH
47621: LD_INT 2
47623: ARRAY
47624: PPUSH
47625: CALL_OW 111
// continue ;
47629: GO 47121
// end ; end ; r := GetDir ( tmp ) ;
47631: LD_ADDR_VAR 0 15
47635: PUSH
47636: LD_VAR 0 13
47640: PPUSH
47641: CALL_OW 254
47645: ST_TO_ADDR
// if r = 5 then
47646: LD_VAR 0 15
47650: PUSH
47651: LD_INT 5
47653: EQUAL
47654: IFFALSE 47664
// r := 0 ;
47656: LD_ADDR_VAR 0 15
47660: PUSH
47661: LD_INT 0
47663: ST_TO_ADDR
// for j = r to 5 do
47664: LD_ADDR_VAR 0 10
47668: PUSH
47669: DOUBLE
47670: LD_VAR 0 15
47674: DEC
47675: ST_TO_ADDR
47676: LD_INT 5
47678: PUSH
47679: FOR_TO
47680: IFFALSE 47794
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47682: LD_ADDR_VAR 0 11
47686: PUSH
47687: LD_VAR 0 13
47691: PPUSH
47692: CALL_OW 250
47696: PPUSH
47697: LD_VAR 0 10
47701: PPUSH
47702: LD_INT 2
47704: PPUSH
47705: CALL_OW 272
47709: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47710: LD_ADDR_VAR 0 12
47714: PUSH
47715: LD_VAR 0 13
47719: PPUSH
47720: CALL_OW 251
47724: PPUSH
47725: LD_VAR 0 10
47729: PPUSH
47730: LD_INT 2
47732: PPUSH
47733: CALL_OW 273
47737: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47738: LD_VAR 0 11
47742: PPUSH
47743: LD_VAR 0 12
47747: PPUSH
47748: CALL_OW 488
47752: PUSH
47753: LD_VAR 0 11
47757: PPUSH
47758: LD_VAR 0 12
47762: PPUSH
47763: CALL_OW 428
47767: NOT
47768: AND
47769: IFFALSE 47792
// begin ComMoveXY ( tmp , _x , _y ) ;
47771: LD_VAR 0 13
47775: PPUSH
47776: LD_VAR 0 11
47780: PPUSH
47781: LD_VAR 0 12
47785: PPUSH
47786: CALL_OW 111
// break ;
47790: GO 47794
// end ; end ;
47792: GO 47679
47794: POP
47795: POP
// end ; end ;
47796: GO 47121
47798: POP
47799: POP
// end ;
47800: LD_VAR 0 8
47804: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47805: LD_INT 0
47807: PPUSH
// result := true ;
47808: LD_ADDR_VAR 0 3
47812: PUSH
47813: LD_INT 1
47815: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47816: LD_VAR 0 2
47820: PUSH
47821: LD_INT 24
47823: DOUBLE
47824: EQUAL
47825: IFTRUE 47835
47827: LD_INT 33
47829: DOUBLE
47830: EQUAL
47831: IFTRUE 47835
47833: GO 47860
47835: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47836: LD_ADDR_VAR 0 3
47840: PUSH
47841: LD_INT 32
47843: PPUSH
47844: LD_VAR 0 1
47848: PPUSH
47849: CALL_OW 321
47853: PUSH
47854: LD_INT 2
47856: EQUAL
47857: ST_TO_ADDR
47858: GO 48180
47860: LD_INT 20
47862: DOUBLE
47863: EQUAL
47864: IFTRUE 47868
47866: GO 47893
47868: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47869: LD_ADDR_VAR 0 3
47873: PUSH
47874: LD_INT 6
47876: PPUSH
47877: LD_VAR 0 1
47881: PPUSH
47882: CALL_OW 321
47886: PUSH
47887: LD_INT 2
47889: EQUAL
47890: ST_TO_ADDR
47891: GO 48180
47893: LD_INT 22
47895: DOUBLE
47896: EQUAL
47897: IFTRUE 47907
47899: LD_INT 36
47901: DOUBLE
47902: EQUAL
47903: IFTRUE 47907
47905: GO 47932
47907: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: LD_INT 15
47915: PPUSH
47916: LD_VAR 0 1
47920: PPUSH
47921: CALL_OW 321
47925: PUSH
47926: LD_INT 2
47928: EQUAL
47929: ST_TO_ADDR
47930: GO 48180
47932: LD_INT 30
47934: DOUBLE
47935: EQUAL
47936: IFTRUE 47940
47938: GO 47965
47940: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47941: LD_ADDR_VAR 0 3
47945: PUSH
47946: LD_INT 20
47948: PPUSH
47949: LD_VAR 0 1
47953: PPUSH
47954: CALL_OW 321
47958: PUSH
47959: LD_INT 2
47961: EQUAL
47962: ST_TO_ADDR
47963: GO 48180
47965: LD_INT 28
47967: DOUBLE
47968: EQUAL
47969: IFTRUE 47979
47971: LD_INT 21
47973: DOUBLE
47974: EQUAL
47975: IFTRUE 47979
47977: GO 48004
47979: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47980: LD_ADDR_VAR 0 3
47984: PUSH
47985: LD_INT 21
47987: PPUSH
47988: LD_VAR 0 1
47992: PPUSH
47993: CALL_OW 321
47997: PUSH
47998: LD_INT 2
48000: EQUAL
48001: ST_TO_ADDR
48002: GO 48180
48004: LD_INT 16
48006: DOUBLE
48007: EQUAL
48008: IFTRUE 48012
48010: GO 48039
48012: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48013: LD_ADDR_VAR 0 3
48017: PUSH
48018: LD_EXP 134
48022: PPUSH
48023: LD_VAR 0 1
48027: PPUSH
48028: CALL_OW 321
48032: PUSH
48033: LD_INT 2
48035: EQUAL
48036: ST_TO_ADDR
48037: GO 48180
48039: LD_INT 19
48041: DOUBLE
48042: EQUAL
48043: IFTRUE 48053
48045: LD_INT 23
48047: DOUBLE
48048: EQUAL
48049: IFTRUE 48053
48051: GO 48080
48053: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48054: LD_ADDR_VAR 0 3
48058: PUSH
48059: LD_EXP 133
48063: PPUSH
48064: LD_VAR 0 1
48068: PPUSH
48069: CALL_OW 321
48073: PUSH
48074: LD_INT 2
48076: EQUAL
48077: ST_TO_ADDR
48078: GO 48180
48080: LD_INT 17
48082: DOUBLE
48083: EQUAL
48084: IFTRUE 48088
48086: GO 48113
48088: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48089: LD_ADDR_VAR 0 3
48093: PUSH
48094: LD_INT 39
48096: PPUSH
48097: LD_VAR 0 1
48101: PPUSH
48102: CALL_OW 321
48106: PUSH
48107: LD_INT 2
48109: EQUAL
48110: ST_TO_ADDR
48111: GO 48180
48113: LD_INT 18
48115: DOUBLE
48116: EQUAL
48117: IFTRUE 48121
48119: GO 48146
48121: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48122: LD_ADDR_VAR 0 3
48126: PUSH
48127: LD_INT 40
48129: PPUSH
48130: LD_VAR 0 1
48134: PPUSH
48135: CALL_OW 321
48139: PUSH
48140: LD_INT 2
48142: EQUAL
48143: ST_TO_ADDR
48144: GO 48180
48146: LD_INT 27
48148: DOUBLE
48149: EQUAL
48150: IFTRUE 48154
48152: GO 48179
48154: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48155: LD_ADDR_VAR 0 3
48159: PUSH
48160: LD_INT 35
48162: PPUSH
48163: LD_VAR 0 1
48167: PPUSH
48168: CALL_OW 321
48172: PUSH
48173: LD_INT 2
48175: EQUAL
48176: ST_TO_ADDR
48177: GO 48180
48179: POP
// end ;
48180: LD_VAR 0 3
48184: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48185: LD_INT 0
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
// result := false ;
48198: LD_ADDR_VAR 0 6
48202: PUSH
48203: LD_INT 0
48205: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48206: LD_VAR 0 1
48210: NOT
48211: PUSH
48212: LD_VAR 0 1
48216: PPUSH
48217: CALL_OW 266
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: IN
48232: NOT
48233: OR
48234: PUSH
48235: LD_VAR 0 2
48239: NOT
48240: OR
48241: PUSH
48242: LD_VAR 0 5
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: LD_INT 4
48261: PUSH
48262: LD_INT 5
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: IN
48273: NOT
48274: OR
48275: PUSH
48276: LD_VAR 0 3
48280: PPUSH
48281: LD_VAR 0 4
48285: PPUSH
48286: CALL_OW 488
48290: NOT
48291: OR
48292: IFFALSE 48296
// exit ;
48294: GO 49032
// side := GetSide ( depot ) ;
48296: LD_ADDR_VAR 0 9
48300: PUSH
48301: LD_VAR 0 1
48305: PPUSH
48306: CALL_OW 255
48310: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48311: LD_VAR 0 9
48315: PPUSH
48316: LD_VAR 0 2
48320: PPUSH
48321: CALL 47805 0 2
48325: NOT
48326: IFFALSE 48330
// exit ;
48328: GO 49032
// pom := GetBase ( depot ) ;
48330: LD_ADDR_VAR 0 10
48334: PUSH
48335: LD_VAR 0 1
48339: PPUSH
48340: CALL_OW 274
48344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48345: LD_ADDR_VAR 0 11
48349: PUSH
48350: LD_VAR 0 2
48354: PPUSH
48355: LD_VAR 0 1
48359: PPUSH
48360: CALL_OW 248
48364: PPUSH
48365: CALL_OW 450
48369: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48370: LD_VAR 0 10
48374: PPUSH
48375: LD_INT 1
48377: PPUSH
48378: CALL_OW 275
48382: PUSH
48383: LD_VAR 0 11
48387: PUSH
48388: LD_INT 1
48390: ARRAY
48391: GREATEREQUAL
48392: PUSH
48393: LD_VAR 0 10
48397: PPUSH
48398: LD_INT 2
48400: PPUSH
48401: CALL_OW 275
48405: PUSH
48406: LD_VAR 0 11
48410: PUSH
48411: LD_INT 2
48413: ARRAY
48414: GREATEREQUAL
48415: AND
48416: PUSH
48417: LD_VAR 0 10
48421: PPUSH
48422: LD_INT 3
48424: PPUSH
48425: CALL_OW 275
48429: PUSH
48430: LD_VAR 0 11
48434: PUSH
48435: LD_INT 3
48437: ARRAY
48438: GREATEREQUAL
48439: AND
48440: NOT
48441: IFFALSE 48445
// exit ;
48443: GO 49032
// if GetBType ( depot ) = b_depot then
48445: LD_VAR 0 1
48449: PPUSH
48450: CALL_OW 266
48454: PUSH
48455: LD_INT 0
48457: EQUAL
48458: IFFALSE 48470
// dist := 28 else
48460: LD_ADDR_VAR 0 14
48464: PUSH
48465: LD_INT 28
48467: ST_TO_ADDR
48468: GO 48478
// dist := 36 ;
48470: LD_ADDR_VAR 0 14
48474: PUSH
48475: LD_INT 36
48477: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48478: LD_VAR 0 1
48482: PPUSH
48483: LD_VAR 0 3
48487: PPUSH
48488: LD_VAR 0 4
48492: PPUSH
48493: CALL_OW 297
48497: PUSH
48498: LD_VAR 0 14
48502: GREATER
48503: IFFALSE 48507
// exit ;
48505: GO 49032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48507: LD_ADDR_VAR 0 12
48511: PUSH
48512: LD_VAR 0 2
48516: PPUSH
48517: LD_VAR 0 3
48521: PPUSH
48522: LD_VAR 0 4
48526: PPUSH
48527: LD_VAR 0 5
48531: PPUSH
48532: LD_VAR 0 1
48536: PPUSH
48537: CALL_OW 248
48541: PPUSH
48542: LD_INT 0
48544: PPUSH
48545: CALL 49037 0 6
48549: ST_TO_ADDR
// if not hexes then
48550: LD_VAR 0 12
48554: NOT
48555: IFFALSE 48559
// exit ;
48557: GO 49032
// hex := GetHexInfo ( x , y ) ;
48559: LD_ADDR_VAR 0 15
48563: PUSH
48564: LD_VAR 0 3
48568: PPUSH
48569: LD_VAR 0 4
48573: PPUSH
48574: CALL_OW 546
48578: ST_TO_ADDR
// if hex [ 1 ] then
48579: LD_VAR 0 15
48583: PUSH
48584: LD_INT 1
48586: ARRAY
48587: IFFALSE 48591
// exit ;
48589: GO 49032
// height := hex [ 2 ] ;
48591: LD_ADDR_VAR 0 13
48595: PUSH
48596: LD_VAR 0 15
48600: PUSH
48601: LD_INT 2
48603: ARRAY
48604: ST_TO_ADDR
// for i = 1 to hexes do
48605: LD_ADDR_VAR 0 7
48609: PUSH
48610: DOUBLE
48611: LD_INT 1
48613: DEC
48614: ST_TO_ADDR
48615: LD_VAR 0 12
48619: PUSH
48620: FOR_TO
48621: IFFALSE 48951
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48623: LD_VAR 0 12
48627: PUSH
48628: LD_VAR 0 7
48632: ARRAY
48633: PUSH
48634: LD_INT 1
48636: ARRAY
48637: PPUSH
48638: LD_VAR 0 12
48642: PUSH
48643: LD_VAR 0 7
48647: ARRAY
48648: PUSH
48649: LD_INT 2
48651: ARRAY
48652: PPUSH
48653: CALL_OW 488
48657: NOT
48658: PUSH
48659: LD_VAR 0 12
48663: PUSH
48664: LD_VAR 0 7
48668: ARRAY
48669: PUSH
48670: LD_INT 1
48672: ARRAY
48673: PPUSH
48674: LD_VAR 0 12
48678: PUSH
48679: LD_VAR 0 7
48683: ARRAY
48684: PUSH
48685: LD_INT 2
48687: ARRAY
48688: PPUSH
48689: CALL_OW 428
48693: PUSH
48694: LD_INT 0
48696: GREATER
48697: OR
48698: PUSH
48699: LD_VAR 0 12
48703: PUSH
48704: LD_VAR 0 7
48708: ARRAY
48709: PUSH
48710: LD_INT 1
48712: ARRAY
48713: PPUSH
48714: LD_VAR 0 12
48718: PUSH
48719: LD_VAR 0 7
48723: ARRAY
48724: PUSH
48725: LD_INT 2
48727: ARRAY
48728: PPUSH
48729: CALL_OW 351
48733: OR
48734: IFFALSE 48740
// exit ;
48736: POP
48737: POP
48738: GO 49032
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48740: LD_ADDR_VAR 0 8
48744: PUSH
48745: LD_VAR 0 12
48749: PUSH
48750: LD_VAR 0 7
48754: ARRAY
48755: PUSH
48756: LD_INT 1
48758: ARRAY
48759: PPUSH
48760: LD_VAR 0 12
48764: PUSH
48765: LD_VAR 0 7
48769: ARRAY
48770: PUSH
48771: LD_INT 2
48773: ARRAY
48774: PPUSH
48775: CALL_OW 546
48779: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48780: LD_VAR 0 8
48784: PUSH
48785: LD_INT 1
48787: ARRAY
48788: PUSH
48789: LD_VAR 0 8
48793: PUSH
48794: LD_INT 2
48796: ARRAY
48797: PUSH
48798: LD_VAR 0 13
48802: PUSH
48803: LD_INT 2
48805: PLUS
48806: GREATER
48807: OR
48808: PUSH
48809: LD_VAR 0 8
48813: PUSH
48814: LD_INT 2
48816: ARRAY
48817: PUSH
48818: LD_VAR 0 13
48822: PUSH
48823: LD_INT 2
48825: MINUS
48826: LESS
48827: OR
48828: PUSH
48829: LD_VAR 0 8
48833: PUSH
48834: LD_INT 3
48836: ARRAY
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 8
48843: PUSH
48844: LD_INT 9
48846: PUSH
48847: LD_INT 10
48849: PUSH
48850: LD_INT 11
48852: PUSH
48853: LD_INT 12
48855: PUSH
48856: LD_INT 13
48858: PUSH
48859: LD_INT 16
48861: PUSH
48862: LD_INT 17
48864: PUSH
48865: LD_INT 18
48867: PUSH
48868: LD_INT 19
48870: PUSH
48871: LD_INT 20
48873: PUSH
48874: LD_INT 21
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: IN
48892: NOT
48893: OR
48894: PUSH
48895: LD_VAR 0 8
48899: PUSH
48900: LD_INT 5
48902: ARRAY
48903: NOT
48904: OR
48905: PUSH
48906: LD_VAR 0 8
48910: PUSH
48911: LD_INT 6
48913: ARRAY
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 7
48923: PUSH
48924: LD_INT 9
48926: PUSH
48927: LD_INT 10
48929: PUSH
48930: LD_INT 11
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: IN
48941: NOT
48942: OR
48943: IFFALSE 48949
// exit ;
48945: POP
48946: POP
48947: GO 49032
// end ;
48949: GO 48620
48951: POP
48952: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48953: LD_VAR 0 9
48957: PPUSH
48958: LD_VAR 0 3
48962: PPUSH
48963: LD_VAR 0 4
48967: PPUSH
48968: LD_INT 20
48970: PPUSH
48971: CALL 40978 0 4
48975: PUSH
48976: LD_INT 4
48978: ARRAY
48979: IFFALSE 48983
// exit ;
48981: GO 49032
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48983: LD_VAR 0 2
48987: PUSH
48988: LD_INT 29
48990: PUSH
48991: LD_INT 30
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: IN
48998: PUSH
48999: LD_VAR 0 3
49003: PPUSH
49004: LD_VAR 0 4
49008: PPUSH
49009: LD_VAR 0 9
49013: PPUSH
49014: CALL_OW 440
49018: NOT
49019: AND
49020: IFFALSE 49024
// exit ;
49022: GO 49032
// result := true ;
49024: LD_ADDR_VAR 0 6
49028: PUSH
49029: LD_INT 1
49031: ST_TO_ADDR
// end ;
49032: LD_VAR 0 6
49036: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49037: LD_INT 0
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
49050: PPUSH
49051: PPUSH
49052: PPUSH
49053: PPUSH
49054: PPUSH
49055: PPUSH
49056: PPUSH
49057: PPUSH
49058: PPUSH
49059: PPUSH
49060: PPUSH
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
49073: PPUSH
49074: PPUSH
49075: PPUSH
49076: PPUSH
49077: PPUSH
49078: PPUSH
49079: PPUSH
49080: PPUSH
49081: PPUSH
49082: PPUSH
49083: PPUSH
49084: PPUSH
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
49094: PPUSH
49095: PPUSH
49096: PPUSH
// result = [ ] ;
49097: LD_ADDR_VAR 0 7
49101: PUSH
49102: EMPTY
49103: ST_TO_ADDR
// temp_list = [ ] ;
49104: LD_ADDR_VAR 0 9
49108: PUSH
49109: EMPTY
49110: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49111: LD_VAR 0 4
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: LD_INT 4
49130: PUSH
49131: LD_INT 5
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: IN
49142: NOT
49143: PUSH
49144: LD_VAR 0 1
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: IN
49159: PUSH
49160: LD_VAR 0 5
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: IN
49179: NOT
49180: AND
49181: OR
49182: IFFALSE 49186
// exit ;
49184: GO 67577
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49186: LD_VAR 0 1
49190: PUSH
49191: LD_INT 6
49193: PUSH
49194: LD_INT 7
49196: PUSH
49197: LD_INT 8
49199: PUSH
49200: LD_INT 13
49202: PUSH
49203: LD_INT 12
49205: PUSH
49206: LD_INT 15
49208: PUSH
49209: LD_INT 11
49211: PUSH
49212: LD_INT 14
49214: PUSH
49215: LD_INT 10
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: IN
49229: IFFALSE 49239
// btype = b_lab ;
49231: LD_ADDR_VAR 0 1
49235: PUSH
49236: LD_INT 6
49238: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49239: LD_VAR 0 6
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: LIST
49257: IN
49258: NOT
49259: PUSH
49260: LD_VAR 0 1
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: LD_INT 6
49279: PUSH
49280: LD_INT 36
49282: PUSH
49283: LD_INT 4
49285: PUSH
49286: LD_INT 5
49288: PUSH
49289: LD_INT 31
49291: PUSH
49292: LD_INT 32
49294: PUSH
49295: LD_INT 33
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: IN
49311: NOT
49312: PUSH
49313: LD_VAR 0 6
49317: PUSH
49318: LD_INT 1
49320: EQUAL
49321: AND
49322: OR
49323: PUSH
49324: LD_VAR 0 1
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: IN
49339: NOT
49340: PUSH
49341: LD_VAR 0 6
49345: PUSH
49346: LD_INT 2
49348: EQUAL
49349: AND
49350: OR
49351: IFFALSE 49361
// mode = 0 ;
49353: LD_ADDR_VAR 0 6
49357: PUSH
49358: LD_INT 0
49360: ST_TO_ADDR
// case mode of 0 :
49361: LD_VAR 0 6
49365: PUSH
49366: LD_INT 0
49368: DOUBLE
49369: EQUAL
49370: IFTRUE 49374
49372: GO 60827
49374: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49375: LD_ADDR_VAR 0 11
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49568: LD_ADDR_VAR 0 12
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 3
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49764: LD_ADDR_VAR 0 13
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: NEG
49936: PUSH
49937: LD_INT 3
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49963: LD_ADDR_VAR 0 14
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50159: LD_ADDR_VAR 0 15
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 3
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50352: LD_ADDR_VAR 0 16
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 3
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 3
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 3
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50545: LD_ADDR_VAR 0 17
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50775: LD_ADDR_VAR 0 18
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51005: LD_ADDR_VAR 0 19
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 2
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51235: LD_ADDR_VAR 0 20
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 2
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51465: LD_ADDR_VAR 0 21
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51695: LD_ADDR_VAR 0 22
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51925: LD_ADDR_VAR 0 23
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 3
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52205: LD_ADDR_VAR 0 24
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 2
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52481: LD_ADDR_VAR 0 25
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 2
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 3
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: LD_INT 3
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52755: LD_ADDR_VAR 0 26
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 2
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53031: LD_ADDR_VAR 0 27
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53311: LD_ADDR_VAR 0 28
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: LD_INT 3
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 3
53558: NEG
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53593: LD_ADDR_VAR 0 29
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 3
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 3
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53872: LD_ADDR_VAR 0 30
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: LD_INT 3
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54150: LD_ADDR_VAR 0 31
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 3
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 3
54393: NEG
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54428: LD_ADDR_VAR 0 32
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 3
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 3
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54706: LD_ADDR_VAR 0 33
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 3
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 3
54950: NEG
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54985: LD_ADDR_VAR 0 34
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: NEG
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 3
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 3
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 2
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55265: LD_ADDR_VAR 0 35
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55377: LD_ADDR_VAR 0 36
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55489: LD_ADDR_VAR 0 37
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55601: LD_ADDR_VAR 0 38
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55713: LD_ADDR_VAR 0 39
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55825: LD_ADDR_VAR 0 40
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55937: LD_ADDR_VAR 0 41
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 2
56127: NEG
56128: PUSH
56129: LD_INT 3
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: NEG
56235: PUSH
56236: LD_INT 2
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56287: LD_ADDR_VAR 0 42
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: PUSH
56534: LD_INT 3
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: LD_INT 3
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 3
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: NEG
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: LD_INT 3
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56637: LD_ADDR_VAR 0 43
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 3
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 3
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56985: LD_ADDR_VAR 0 44
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: LD_INT 2
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: LD_INT 3
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 2
57238: PUSH
57239: LD_INT 3
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57335: LD_ADDR_VAR 0 45
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: LD_INT 3
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: LD_INT 3
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 3
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: LD_INT 3
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57685: LD_ADDR_VAR 0 46
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: NEG
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 3
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 3
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: NEG
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58033: LD_ADDR_VAR 0 47
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58184: LD_ADDR_VAR 0 48
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58331: LD_ADDR_VAR 0 49
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58475: LD_ADDR_VAR 0 50
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 1
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58619: LD_ADDR_VAR 0 51
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 1
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 2
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58766: LD_ADDR_VAR 0 52
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58917: LD_ADDR_VAR 0 53
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 2
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59147: LD_ADDR_VAR 0 54
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: LD_INT 2
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59377: LD_ADDR_VAR 0 55
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 2
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: LD_INT 2
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: LD_INT 2
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59607: LD_ADDR_VAR 0 56
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: LD_INT 2
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59837: LD_ADDR_VAR 0 57
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60067: LD_ADDR_VAR 0 58
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 2
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: NEG
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60297: LD_ADDR_VAR 0 59
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60385: LD_ADDR_VAR 0 60
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60473: LD_ADDR_VAR 0 61
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: LD_INT 1
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60561: LD_ADDR_VAR 0 62
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60649: LD_ADDR_VAR 0 63
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60737: LD_ADDR_VAR 0 64
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 0
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: LD_INT 1
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: ST_TO_ADDR
// end ; 1 :
60825: GO 66722
60827: LD_INT 1
60829: DOUBLE
60830: EQUAL
60831: IFTRUE 60835
60833: GO 63458
60835: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60836: LD_ADDR_VAR 0 11
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 3
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60880: LD_ADDR_VAR 0 12
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60921: LD_ADDR_VAR 0 13
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 3
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: LIST
60960: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60961: LD_ADDR_VAR 0 14
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61002: LD_ADDR_VAR 0 15
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: LIST
61045: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61046: LD_ADDR_VAR 0 16
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: LD_INT 3
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: NEG
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: NEG
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61092: LD_ADDR_VAR 0 17
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 3
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 2
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61136: LD_ADDR_VAR 0 18
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61177: LD_ADDR_VAR 0 19
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: LD_INT 2
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61217: LD_ADDR_VAR 0 20
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: LIST
61257: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61258: LD_ADDR_VAR 0 21
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: LIST
61301: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61302: LD_ADDR_VAR 0 22
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 3
61321: NEG
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: NEG
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61348: LD_ADDR_VAR 0 23
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: LD_INT 3
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 4
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: LD_INT 3
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: LIST
61391: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61392: LD_ADDR_VAR 0 24
61396: PUSH
61397: LD_INT 3
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 4
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61433: LD_ADDR_VAR 0 25
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 4
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: LD_INT 4
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61473: LD_ADDR_VAR 0 26
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: LD_INT 4
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61514: LD_ADDR_VAR 0 27
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: LD_INT 0
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: NEG
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 4
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61558: LD_ADDR_VAR 0 28
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 3
61577: NEG
61578: PUSH
61579: LD_INT 4
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 4
61589: NEG
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61604: LD_ADDR_VAR 0 29
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 3
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: LD_INT 4
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 4
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 5
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 5
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 4
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 6
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 6
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 5
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61759: LD_ADDR_VAR 0 30
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 4
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 4
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 4
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 5
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 5
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 5
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 6
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 6
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61902: LD_ADDR_VAR 0 31
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 3
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 4
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 4
61949: PUSH
61950: LD_INT 4
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: LD_INT 4
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 5
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 5
61979: PUSH
61980: LD_INT 5
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 4
61989: PUSH
61990: LD_INT 5
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 6
61999: PUSH
62000: LD_INT 5
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 6
62009: PUSH
62010: LD_INT 6
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 5
62019: PUSH
62020: LD_INT 6
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62041: LD_ADDR_VAR 0 32
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 4
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 4
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: LD_INT 3
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 5
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 5
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 4
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: LD_INT 6
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 6
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: LD_INT 5
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62184: LD_ADDR_VAR 0 33
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 3
62202: NEG
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 3
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 3
62225: NEG
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 4
62236: NEG
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 4
62247: NEG
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 4
62259: NEG
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 5
62270: NEG
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 5
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 5
62293: NEG
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 6
62304: NEG
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 6
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: NEG
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62339: LD_ADDR_VAR 0 34
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: LD_INT 3
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: NEG
62359: PUSH
62360: LD_INT 2
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 3
62370: NEG
62371: PUSH
62372: LD_INT 3
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 3
62382: NEG
62383: PUSH
62384: LD_INT 4
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 4
62394: NEG
62395: PUSH
62396: LD_INT 3
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 4
62406: NEG
62407: PUSH
62408: LD_INT 4
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 4
62418: NEG
62419: PUSH
62420: LD_INT 5
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 5
62430: NEG
62431: PUSH
62432: LD_INT 4
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 5
62442: NEG
62443: PUSH
62444: LD_INT 5
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 5
62454: NEG
62455: PUSH
62456: LD_INT 6
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 6
62466: NEG
62467: PUSH
62468: LD_INT 5
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 6
62478: NEG
62479: PUSH
62480: LD_INT 6
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62502: LD_ADDR_VAR 0 41
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 2
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: LD_INT 3
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62546: LD_ADDR_VAR 0 42
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 3
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: LIST
62586: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62587: LD_ADDR_VAR 0 43
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: LD_INT 3
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62627: LD_ADDR_VAR 0 44
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: LD_INT 3
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62668: LD_ADDR_VAR 0 45
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 2
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 3
62697: NEG
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: LIST
62711: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62712: LD_ADDR_VAR 0 46
62716: PUSH
62717: LD_INT 2
62719: NEG
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: NEG
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 3
62743: NEG
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: LIST
62757: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62758: LD_ADDR_VAR 0 47
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: LD_INT 3
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: NEG
62778: PUSH
62779: LD_INT 3
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62791: LD_ADDR_VAR 0 48
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 2
62801: NEG
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62822: LD_ADDR_VAR 0 49
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62851: LD_ADDR_VAR 0 50
62855: PUSH
62856: LD_INT 2
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: LD_INT 3
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62880: LD_ADDR_VAR 0 51
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 2
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: LD_INT 1
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62911: LD_ADDR_VAR 0 52
62915: PUSH
62916: LD_INT 3
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 3
62930: NEG
62931: PUSH
62932: LD_INT 2
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62944: LD_ADDR_VAR 0 53
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: LD_INT 3
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: LIST
62987: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62988: LD_ADDR_VAR 0 54
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 3
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63029: LD_ADDR_VAR 0 55
63033: PUSH
63034: LD_INT 3
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: LD_INT 3
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63069: LD_ADDR_VAR 0 56
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63110: LD_ADDR_VAR 0 57
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 3
63128: NEG
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63154: LD_ADDR_VAR 0 58
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 3
63173: NEG
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: NEG
63186: PUSH
63187: LD_INT 3
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63200: LD_ADDR_VAR 0 59
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: LD_INT 2
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63244: LD_ADDR_VAR 0 60
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63285: LD_ADDR_VAR 0 61
63289: PUSH
63290: LD_INT 2
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: LIST
63324: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63325: LD_ADDR_VAR 0 62
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: LD_INT 2
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: LIST
63365: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63366: LD_ADDR_VAR 0 63
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 2
63395: NEG
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63410: LD_ADDR_VAR 0 64
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: LD_INT 2
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: NEG
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: LIST
63455: ST_TO_ADDR
// end ; 2 :
63456: GO 66722
63458: LD_INT 2
63460: DOUBLE
63461: EQUAL
63462: IFTRUE 63466
63464: GO 66721
63466: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63467: LD_ADDR_VAR 0 29
63471: PUSH
63472: LD_INT 4
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 4
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 5
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 5
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 4
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 3
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 3
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 5
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: LD_INT 3
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 3
63577: PUSH
63578: LD_INT 2
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 4
63587: PUSH
63588: LD_INT 3
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 4
63597: PUSH
63598: LD_INT 4
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: LD_INT 4
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 4
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 2
63647: PUSH
63648: LD_INT 4
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 4
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 3
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 4
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: LD_INT 5
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: LD_INT 5
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: LD_INT 4
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 5
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: LD_INT 3
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 3
63750: NEG
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 3
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: NEG
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 2
63784: NEG
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: NEG
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 4
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 4
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 4
63829: NEG
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 2
63841: NEG
63842: PUSH
63843: LD_INT 2
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 4
63852: NEG
63853: PUSH
63854: LD_INT 4
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 4
63864: NEG
63865: PUSH
63866: LD_INT 5
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 3
63876: NEG
63877: PUSH
63878: LD_INT 4
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 3
63888: NEG
63889: PUSH
63890: LD_INT 3
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 4
63900: NEG
63901: PUSH
63902: LD_INT 3
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 5
63912: NEG
63913: PUSH
63914: LD_INT 4
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 5
63924: NEG
63925: PUSH
63926: LD_INT 5
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: LD_INT 5
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 5
63948: NEG
63949: PUSH
63950: LD_INT 3
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64005: LD_ADDR_VAR 0 30
64009: PUSH
64010: LD_INT 4
64012: PUSH
64013: LD_INT 4
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 4
64022: PUSH
64023: LD_INT 3
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 5
64032: PUSH
64033: LD_INT 4
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 5
64042: PUSH
64043: LD_INT 5
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 4
64052: PUSH
64053: LD_INT 5
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: LD_INT 4
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 3
64072: PUSH
64073: LD_INT 3
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 5
64082: PUSH
64083: LD_INT 3
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: LD_INT 5
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 3
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: PUSH
64123: LD_INT 3
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: LD_INT 4
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 4
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: PUSH
64154: LD_INT 3
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 2
64174: PUSH
64175: LD_INT 4
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: LD_INT 2
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 4
64195: NEG
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 4
64206: NEG
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 3
64218: NEG
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 3
64229: NEG
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 4
64240: NEG
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 5
64251: NEG
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 5
64262: NEG
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 5
64274: NEG
64275: PUSH
64276: LD_INT 2
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 3
64286: NEG
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: LD_INT 3
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 3
64309: NEG
64310: PUSH
64311: LD_INT 4
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 2
64321: NEG
64322: PUSH
64323: LD_INT 3
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 3
64345: NEG
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 4
64357: NEG
64358: PUSH
64359: LD_INT 3
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 4
64369: NEG
64370: PUSH
64371: LD_INT 4
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: NEG
64382: PUSH
64383: LD_INT 4
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 4
64393: NEG
64394: PUSH
64395: LD_INT 2
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 4
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 5
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 1
64427: PUSH
64428: LD_INT 4
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: LD_INT 3
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 3
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: NEG
64461: PUSH
64462: LD_INT 4
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: LD_INT 5
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 2
64484: PUSH
64485: LD_INT 3
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 2
64495: NEG
64496: PUSH
64497: LD_INT 5
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64552: LD_ADDR_VAR 0 31
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: LD_INT 4
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: LD_INT 4
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: LD_INT 5
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 5
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 1
64609: NEG
64610: PUSH
64611: LD_INT 4
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 3
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: LD_INT 5
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: LD_INT 3
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 3
64652: NEG
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 3
64663: NEG
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 2
64675: NEG
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: LD_INT 1
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 4
64708: NEG
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 4
64719: NEG
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 4
64731: NEG
64732: PUSH
64733: LD_INT 2
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: LD_INT 2
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 4
64754: NEG
64755: PUSH
64756: LD_INT 4
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 4
64766: NEG
64767: PUSH
64768: LD_INT 5
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: LD_INT 4
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: LD_INT 3
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 4
64802: NEG
64803: PUSH
64804: LD_INT 3
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 5
64814: NEG
64815: PUSH
64816: LD_INT 4
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 5
64826: NEG
64827: PUSH
64828: LD_INT 5
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 3
64838: NEG
64839: PUSH
64840: LD_INT 5
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 5
64850: NEG
64851: PUSH
64852: LD_INT 3
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 3
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 4
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: LD_INT 3
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 4
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: LD_INT 4
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 4
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 4
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 5
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 5
64995: PUSH
64996: LD_INT 1
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 4
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 3
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 5
65047: PUSH
65048: LD_INT 2
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65102: LD_ADDR_VAR 0 32
65106: PUSH
65107: LD_INT 4
65109: NEG
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 4
65120: NEG
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 3
65143: NEG
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 4
65154: NEG
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 5
65165: NEG
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 5
65176: NEG
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 5
65188: NEG
65189: PUSH
65190: LD_INT 2
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 3
65200: NEG
65201: PUSH
65202: LD_INT 2
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 3
65211: NEG
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: LD_INT 4
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 2
65247: NEG
65248: PUSH
65249: LD_INT 2
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 3
65259: NEG
65260: PUSH
65261: LD_INT 2
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 4
65271: NEG
65272: PUSH
65273: LD_INT 3
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 4
65283: NEG
65284: PUSH
65285: LD_INT 4
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 2
65295: NEG
65296: PUSH
65297: LD_INT 4
65299: NEG
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 4
65307: NEG
65308: PUSH
65309: LD_INT 2
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: LD_INT 4
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: LD_INT 5
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: LD_INT 4
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: LD_INT 3
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: LD_INT 3
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: NEG
65375: PUSH
65376: LD_INT 4
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: LD_INT 5
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 2
65398: PUSH
65399: LD_INT 3
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 2
65409: NEG
65410: PUSH
65411: LD_INT 5
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 4
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 4
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 3
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 2
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 2
65493: PUSH
65494: LD_INT 2
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 4
65504: PUSH
65505: LD_INT 2
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 4
65514: PUSH
65515: LD_INT 4
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 4
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 5
65534: PUSH
65535: LD_INT 4
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 5
65544: PUSH
65545: LD_INT 5
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 4
65554: PUSH
65555: LD_INT 5
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: LD_INT 4
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: LD_INT 3
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 5
65584: PUSH
65585: LD_INT 3
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 3
65594: PUSH
65595: LD_INT 5
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65649: LD_ADDR_VAR 0 33
65653: PUSH
65654: LD_INT 4
65656: NEG
65657: PUSH
65658: LD_INT 4
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 4
65668: NEG
65669: PUSH
65670: LD_INT 5
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 3
65680: NEG
65681: PUSH
65682: LD_INT 4
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 3
65692: NEG
65693: PUSH
65694: LD_INT 3
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 4
65704: NEG
65705: PUSH
65706: LD_INT 3
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 5
65716: NEG
65717: PUSH
65718: LD_INT 4
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 5
65728: NEG
65729: PUSH
65730: LD_INT 5
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 3
65740: NEG
65741: PUSH
65742: LD_INT 5
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 5
65752: NEG
65753: PUSH
65754: LD_INT 3
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: LD_INT 3
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: LD_INT 4
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: PUSH
65798: LD_INT 2
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: LD_INT 3
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: LD_INT 4
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 2
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: LD_INT 4
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 4
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 4
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 5
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 5
65897: PUSH
65898: LD_INT 1
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 4
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 3
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: LD_INT 1
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: LD_INT 2
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 5
65949: PUSH
65950: LD_INT 2
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 3
65959: PUSH
65960: LD_INT 3
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 4
65979: PUSH
65980: LD_INT 3
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 4
65989: PUSH
65990: LD_INT 4
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 2
66009: PUSH
66010: LD_INT 3
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 4
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 2
66039: PUSH
66040: LD_INT 4
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: LD_INT 4
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 0
66059: PUSH
66060: LD_INT 3
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 4
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: LD_INT 5
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 0
66089: PUSH
66090: LD_INT 5
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 1
66099: NEG
66100: PUSH
66101: LD_INT 4
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 1
66110: NEG
66111: PUSH
66112: LD_INT 3
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: LD_INT 5
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 2
66131: NEG
66132: PUSH
66133: LD_INT 3
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66187: LD_ADDR_VAR 0 34
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 4
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 5
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: LD_INT 4
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 3
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 3
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: NEG
66250: PUSH
66251: LD_INT 4
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: LD_INT 5
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 2
66273: PUSH
66274: LD_INT 3
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: LD_INT 5
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 3
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 4
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 4
66327: PUSH
66328: LD_INT 1
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 2
66357: PUSH
66358: LD_INT 1
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 2
66368: PUSH
66369: LD_INT 2
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 4
66379: PUSH
66380: LD_INT 2
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 4
66389: PUSH
66390: LD_INT 4
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 4
66399: PUSH
66400: LD_INT 3
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 5
66409: PUSH
66410: LD_INT 4
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 5
66419: PUSH
66420: LD_INT 5
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 4
66429: PUSH
66430: LD_INT 5
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 3
66439: PUSH
66440: LD_INT 4
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 3
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 5
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 3
66469: PUSH
66470: LD_INT 5
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: PUSH
66510: LD_INT 4
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: LD_INT 4
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: LD_INT 3
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 1
66540: NEG
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: LD_INT 4
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 2
66561: NEG
66562: PUSH
66563: LD_INT 2
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 4
66572: NEG
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 4
66583: NEG
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 3
66606: NEG
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 4
66617: NEG
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 5
66628: NEG
66629: PUSH
66630: LD_INT 0
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 5
66639: NEG
66640: PUSH
66641: LD_INT 1
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 5
66651: NEG
66652: PUSH
66653: LD_INT 2
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: LD_INT 2
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// end ; end ;
66719: GO 66722
66721: POP
// case btype of b_depot , b_warehouse :
66722: LD_VAR 0 1
66726: PUSH
66727: LD_INT 0
66729: DOUBLE
66730: EQUAL
66731: IFTRUE 66741
66733: LD_INT 1
66735: DOUBLE
66736: EQUAL
66737: IFTRUE 66741
66739: GO 66942
66741: POP
// case nation of nation_american :
66742: LD_VAR 0 5
66746: PUSH
66747: LD_INT 1
66749: DOUBLE
66750: EQUAL
66751: IFTRUE 66755
66753: GO 66811
66755: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66756: LD_ADDR_VAR 0 9
66760: PUSH
66761: LD_VAR 0 11
66765: PUSH
66766: LD_VAR 0 12
66770: PUSH
66771: LD_VAR 0 13
66775: PUSH
66776: LD_VAR 0 14
66780: PUSH
66781: LD_VAR 0 15
66785: PUSH
66786: LD_VAR 0 16
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: PUSH
66799: LD_VAR 0 4
66803: PUSH
66804: LD_INT 1
66806: PLUS
66807: ARRAY
66808: ST_TO_ADDR
66809: GO 66940
66811: LD_INT 2
66813: DOUBLE
66814: EQUAL
66815: IFTRUE 66819
66817: GO 66875
66819: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66820: LD_ADDR_VAR 0 9
66824: PUSH
66825: LD_VAR 0 17
66829: PUSH
66830: LD_VAR 0 18
66834: PUSH
66835: LD_VAR 0 19
66839: PUSH
66840: LD_VAR 0 20
66844: PUSH
66845: LD_VAR 0 21
66849: PUSH
66850: LD_VAR 0 22
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: PUSH
66863: LD_VAR 0 4
66867: PUSH
66868: LD_INT 1
66870: PLUS
66871: ARRAY
66872: ST_TO_ADDR
66873: GO 66940
66875: LD_INT 3
66877: DOUBLE
66878: EQUAL
66879: IFTRUE 66883
66881: GO 66939
66883: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66884: LD_ADDR_VAR 0 9
66888: PUSH
66889: LD_VAR 0 23
66893: PUSH
66894: LD_VAR 0 24
66898: PUSH
66899: LD_VAR 0 25
66903: PUSH
66904: LD_VAR 0 26
66908: PUSH
66909: LD_VAR 0 27
66913: PUSH
66914: LD_VAR 0 28
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: PUSH
66927: LD_VAR 0 4
66931: PUSH
66932: LD_INT 1
66934: PLUS
66935: ARRAY
66936: ST_TO_ADDR
66937: GO 66940
66939: POP
66940: GO 67495
66942: LD_INT 2
66944: DOUBLE
66945: EQUAL
66946: IFTRUE 66956
66948: LD_INT 3
66950: DOUBLE
66951: EQUAL
66952: IFTRUE 66956
66954: GO 67012
66956: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66957: LD_ADDR_VAR 0 9
66961: PUSH
66962: LD_VAR 0 29
66966: PUSH
66967: LD_VAR 0 30
66971: PUSH
66972: LD_VAR 0 31
66976: PUSH
66977: LD_VAR 0 32
66981: PUSH
66982: LD_VAR 0 33
66986: PUSH
66987: LD_VAR 0 34
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: PUSH
67000: LD_VAR 0 4
67004: PUSH
67005: LD_INT 1
67007: PLUS
67008: ARRAY
67009: ST_TO_ADDR
67010: GO 67495
67012: LD_INT 16
67014: DOUBLE
67015: EQUAL
67016: IFTRUE 67074
67018: LD_INT 17
67020: DOUBLE
67021: EQUAL
67022: IFTRUE 67074
67024: LD_INT 18
67026: DOUBLE
67027: EQUAL
67028: IFTRUE 67074
67030: LD_INT 19
67032: DOUBLE
67033: EQUAL
67034: IFTRUE 67074
67036: LD_INT 22
67038: DOUBLE
67039: EQUAL
67040: IFTRUE 67074
67042: LD_INT 20
67044: DOUBLE
67045: EQUAL
67046: IFTRUE 67074
67048: LD_INT 21
67050: DOUBLE
67051: EQUAL
67052: IFTRUE 67074
67054: LD_INT 23
67056: DOUBLE
67057: EQUAL
67058: IFTRUE 67074
67060: LD_INT 24
67062: DOUBLE
67063: EQUAL
67064: IFTRUE 67074
67066: LD_INT 25
67068: DOUBLE
67069: EQUAL
67070: IFTRUE 67074
67072: GO 67130
67074: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67075: LD_ADDR_VAR 0 9
67079: PUSH
67080: LD_VAR 0 35
67084: PUSH
67085: LD_VAR 0 36
67089: PUSH
67090: LD_VAR 0 37
67094: PUSH
67095: LD_VAR 0 38
67099: PUSH
67100: LD_VAR 0 39
67104: PUSH
67105: LD_VAR 0 40
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: PUSH
67118: LD_VAR 0 4
67122: PUSH
67123: LD_INT 1
67125: PLUS
67126: ARRAY
67127: ST_TO_ADDR
67128: GO 67495
67130: LD_INT 6
67132: DOUBLE
67133: EQUAL
67134: IFTRUE 67186
67136: LD_INT 7
67138: DOUBLE
67139: EQUAL
67140: IFTRUE 67186
67142: LD_INT 8
67144: DOUBLE
67145: EQUAL
67146: IFTRUE 67186
67148: LD_INT 13
67150: DOUBLE
67151: EQUAL
67152: IFTRUE 67186
67154: LD_INT 12
67156: DOUBLE
67157: EQUAL
67158: IFTRUE 67186
67160: LD_INT 15
67162: DOUBLE
67163: EQUAL
67164: IFTRUE 67186
67166: LD_INT 11
67168: DOUBLE
67169: EQUAL
67170: IFTRUE 67186
67172: LD_INT 14
67174: DOUBLE
67175: EQUAL
67176: IFTRUE 67186
67178: LD_INT 10
67180: DOUBLE
67181: EQUAL
67182: IFTRUE 67186
67184: GO 67242
67186: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67187: LD_ADDR_VAR 0 9
67191: PUSH
67192: LD_VAR 0 41
67196: PUSH
67197: LD_VAR 0 42
67201: PUSH
67202: LD_VAR 0 43
67206: PUSH
67207: LD_VAR 0 44
67211: PUSH
67212: LD_VAR 0 45
67216: PUSH
67217: LD_VAR 0 46
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: PUSH
67230: LD_VAR 0 4
67234: PUSH
67235: LD_INT 1
67237: PLUS
67238: ARRAY
67239: ST_TO_ADDR
67240: GO 67495
67242: LD_INT 36
67244: DOUBLE
67245: EQUAL
67246: IFTRUE 67250
67248: GO 67306
67250: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67251: LD_ADDR_VAR 0 9
67255: PUSH
67256: LD_VAR 0 47
67260: PUSH
67261: LD_VAR 0 48
67265: PUSH
67266: LD_VAR 0 49
67270: PUSH
67271: LD_VAR 0 50
67275: PUSH
67276: LD_VAR 0 51
67280: PUSH
67281: LD_VAR 0 52
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: PUSH
67294: LD_VAR 0 4
67298: PUSH
67299: LD_INT 1
67301: PLUS
67302: ARRAY
67303: ST_TO_ADDR
67304: GO 67495
67306: LD_INT 4
67308: DOUBLE
67309: EQUAL
67310: IFTRUE 67332
67312: LD_INT 5
67314: DOUBLE
67315: EQUAL
67316: IFTRUE 67332
67318: LD_INT 34
67320: DOUBLE
67321: EQUAL
67322: IFTRUE 67332
67324: LD_INT 37
67326: DOUBLE
67327: EQUAL
67328: IFTRUE 67332
67330: GO 67388
67332: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67333: LD_ADDR_VAR 0 9
67337: PUSH
67338: LD_VAR 0 53
67342: PUSH
67343: LD_VAR 0 54
67347: PUSH
67348: LD_VAR 0 55
67352: PUSH
67353: LD_VAR 0 56
67357: PUSH
67358: LD_VAR 0 57
67362: PUSH
67363: LD_VAR 0 58
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: PUSH
67376: LD_VAR 0 4
67380: PUSH
67381: LD_INT 1
67383: PLUS
67384: ARRAY
67385: ST_TO_ADDR
67386: GO 67495
67388: LD_INT 31
67390: DOUBLE
67391: EQUAL
67392: IFTRUE 67438
67394: LD_INT 32
67396: DOUBLE
67397: EQUAL
67398: IFTRUE 67438
67400: LD_INT 33
67402: DOUBLE
67403: EQUAL
67404: IFTRUE 67438
67406: LD_INT 27
67408: DOUBLE
67409: EQUAL
67410: IFTRUE 67438
67412: LD_INT 26
67414: DOUBLE
67415: EQUAL
67416: IFTRUE 67438
67418: LD_INT 28
67420: DOUBLE
67421: EQUAL
67422: IFTRUE 67438
67424: LD_INT 29
67426: DOUBLE
67427: EQUAL
67428: IFTRUE 67438
67430: LD_INT 30
67432: DOUBLE
67433: EQUAL
67434: IFTRUE 67438
67436: GO 67494
67438: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67439: LD_ADDR_VAR 0 9
67443: PUSH
67444: LD_VAR 0 59
67448: PUSH
67449: LD_VAR 0 60
67453: PUSH
67454: LD_VAR 0 61
67458: PUSH
67459: LD_VAR 0 62
67463: PUSH
67464: LD_VAR 0 63
67468: PUSH
67469: LD_VAR 0 64
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: PUSH
67482: LD_VAR 0 4
67486: PUSH
67487: LD_INT 1
67489: PLUS
67490: ARRAY
67491: ST_TO_ADDR
67492: GO 67495
67494: POP
// temp_list2 = [ ] ;
67495: LD_ADDR_VAR 0 10
67499: PUSH
67500: EMPTY
67501: ST_TO_ADDR
// for i in temp_list do
67502: LD_ADDR_VAR 0 8
67506: PUSH
67507: LD_VAR 0 9
67511: PUSH
67512: FOR_IN
67513: IFFALSE 67565
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67515: LD_ADDR_VAR 0 10
67519: PUSH
67520: LD_VAR 0 10
67524: PUSH
67525: LD_VAR 0 8
67529: PUSH
67530: LD_INT 1
67532: ARRAY
67533: PUSH
67534: LD_VAR 0 2
67538: PLUS
67539: PUSH
67540: LD_VAR 0 8
67544: PUSH
67545: LD_INT 2
67547: ARRAY
67548: PUSH
67549: LD_VAR 0 3
67553: PLUS
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: EMPTY
67560: LIST
67561: ADD
67562: ST_TO_ADDR
67563: GO 67512
67565: POP
67566: POP
// result = temp_list2 ;
67567: LD_ADDR_VAR 0 7
67571: PUSH
67572: LD_VAR 0 10
67576: ST_TO_ADDR
// end ;
67577: LD_VAR 0 7
67581: RET
// export function EnemyInRange ( unit , dist ) ; begin
67582: LD_INT 0
67584: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67585: LD_ADDR_VAR 0 3
67589: PUSH
67590: LD_VAR 0 1
67594: PPUSH
67595: CALL_OW 255
67599: PPUSH
67600: LD_VAR 0 1
67604: PPUSH
67605: CALL_OW 250
67609: PPUSH
67610: LD_VAR 0 1
67614: PPUSH
67615: CALL_OW 251
67619: PPUSH
67620: LD_VAR 0 2
67624: PPUSH
67625: CALL 40978 0 4
67629: PUSH
67630: LD_INT 4
67632: ARRAY
67633: ST_TO_ADDR
// end ;
67634: LD_VAR 0 3
67638: RET
// export function PlayerSeeMe ( unit ) ; begin
67639: LD_INT 0
67641: PPUSH
// result := See ( your_side , unit ) ;
67642: LD_ADDR_VAR 0 2
67646: PUSH
67647: LD_OWVAR 2
67651: PPUSH
67652: LD_VAR 0 1
67656: PPUSH
67657: CALL_OW 292
67661: ST_TO_ADDR
// end ;
67662: LD_VAR 0 2
67666: RET
// export function ReverseDir ( unit ) ; begin
67667: LD_INT 0
67669: PPUSH
// if not unit then
67670: LD_VAR 0 1
67674: NOT
67675: IFFALSE 67679
// exit ;
67677: GO 67702
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67679: LD_ADDR_VAR 0 2
67683: PUSH
67684: LD_VAR 0 1
67688: PPUSH
67689: CALL_OW 254
67693: PUSH
67694: LD_INT 3
67696: PLUS
67697: PUSH
67698: LD_INT 6
67700: MOD
67701: ST_TO_ADDR
// end ;
67702: LD_VAR 0 2
67706: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67707: LD_INT 0
67709: PPUSH
67710: PPUSH
67711: PPUSH
67712: PPUSH
67713: PPUSH
// if not hexes then
67714: LD_VAR 0 2
67718: NOT
67719: IFFALSE 67723
// exit ;
67721: GO 67871
// dist := 9999 ;
67723: LD_ADDR_VAR 0 5
67727: PUSH
67728: LD_INT 9999
67730: ST_TO_ADDR
// for i = 1 to hexes do
67731: LD_ADDR_VAR 0 4
67735: PUSH
67736: DOUBLE
67737: LD_INT 1
67739: DEC
67740: ST_TO_ADDR
67741: LD_VAR 0 2
67745: PUSH
67746: FOR_TO
67747: IFFALSE 67859
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67749: LD_VAR 0 1
67753: PPUSH
67754: LD_VAR 0 2
67758: PUSH
67759: LD_VAR 0 4
67763: ARRAY
67764: PUSH
67765: LD_INT 1
67767: ARRAY
67768: PPUSH
67769: LD_VAR 0 2
67773: PUSH
67774: LD_VAR 0 4
67778: ARRAY
67779: PUSH
67780: LD_INT 2
67782: ARRAY
67783: PPUSH
67784: CALL_OW 297
67788: PUSH
67789: LD_VAR 0 5
67793: LESS
67794: IFFALSE 67857
// begin hex := hexes [ i ] ;
67796: LD_ADDR_VAR 0 7
67800: PUSH
67801: LD_VAR 0 2
67805: PUSH
67806: LD_VAR 0 4
67810: ARRAY
67811: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67812: LD_ADDR_VAR 0 5
67816: PUSH
67817: LD_VAR 0 1
67821: PPUSH
67822: LD_VAR 0 2
67826: PUSH
67827: LD_VAR 0 4
67831: ARRAY
67832: PUSH
67833: LD_INT 1
67835: ARRAY
67836: PPUSH
67837: LD_VAR 0 2
67841: PUSH
67842: LD_VAR 0 4
67846: ARRAY
67847: PUSH
67848: LD_INT 2
67850: ARRAY
67851: PPUSH
67852: CALL_OW 297
67856: ST_TO_ADDR
// end ; end ;
67857: GO 67746
67859: POP
67860: POP
// result := hex ;
67861: LD_ADDR_VAR 0 3
67865: PUSH
67866: LD_VAR 0 7
67870: ST_TO_ADDR
// end ;
67871: LD_VAR 0 3
67875: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67876: LD_INT 0
67878: PPUSH
67879: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67880: LD_VAR 0 1
67884: NOT
67885: PUSH
67886: LD_VAR 0 1
67890: PUSH
67891: LD_INT 21
67893: PUSH
67894: LD_INT 2
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 23
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PPUSH
67915: CALL_OW 69
67919: IN
67920: NOT
67921: OR
67922: IFFALSE 67926
// exit ;
67924: GO 67973
// for i = 1 to 3 do
67926: LD_ADDR_VAR 0 3
67930: PUSH
67931: DOUBLE
67932: LD_INT 1
67934: DEC
67935: ST_TO_ADDR
67936: LD_INT 3
67938: PUSH
67939: FOR_TO
67940: IFFALSE 67971
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67942: LD_VAR 0 1
67946: PPUSH
67947: CALL_OW 250
67951: PPUSH
67952: LD_VAR 0 1
67956: PPUSH
67957: CALL_OW 251
67961: PPUSH
67962: LD_INT 1
67964: PPUSH
67965: CALL_OW 453
67969: GO 67939
67971: POP
67972: POP
// end ;
67973: LD_VAR 0 2
67977: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67978: LD_INT 0
67980: PPUSH
67981: PPUSH
67982: PPUSH
67983: PPUSH
67984: PPUSH
67985: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67986: LD_VAR 0 1
67990: NOT
67991: PUSH
67992: LD_VAR 0 2
67996: NOT
67997: OR
67998: PUSH
67999: LD_VAR 0 1
68003: PPUSH
68004: CALL_OW 314
68008: OR
68009: IFFALSE 68013
// exit ;
68011: GO 68454
// x := GetX ( enemy_unit ) ;
68013: LD_ADDR_VAR 0 7
68017: PUSH
68018: LD_VAR 0 2
68022: PPUSH
68023: CALL_OW 250
68027: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68028: LD_ADDR_VAR 0 8
68032: PUSH
68033: LD_VAR 0 2
68037: PPUSH
68038: CALL_OW 251
68042: ST_TO_ADDR
// if not x or not y then
68043: LD_VAR 0 7
68047: NOT
68048: PUSH
68049: LD_VAR 0 8
68053: NOT
68054: OR
68055: IFFALSE 68059
// exit ;
68057: GO 68454
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68059: LD_ADDR_VAR 0 6
68063: PUSH
68064: LD_VAR 0 7
68068: PPUSH
68069: LD_INT 0
68071: PPUSH
68072: LD_INT 4
68074: PPUSH
68075: CALL_OW 272
68079: PUSH
68080: LD_VAR 0 8
68084: PPUSH
68085: LD_INT 0
68087: PPUSH
68088: LD_INT 4
68090: PPUSH
68091: CALL_OW 273
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_VAR 0 7
68104: PPUSH
68105: LD_INT 1
68107: PPUSH
68108: LD_INT 4
68110: PPUSH
68111: CALL_OW 272
68115: PUSH
68116: LD_VAR 0 8
68120: PPUSH
68121: LD_INT 1
68123: PPUSH
68124: LD_INT 4
68126: PPUSH
68127: CALL_OW 273
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_VAR 0 7
68140: PPUSH
68141: LD_INT 2
68143: PPUSH
68144: LD_INT 4
68146: PPUSH
68147: CALL_OW 272
68151: PUSH
68152: LD_VAR 0 8
68156: PPUSH
68157: LD_INT 2
68159: PPUSH
68160: LD_INT 4
68162: PPUSH
68163: CALL_OW 273
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_VAR 0 7
68176: PPUSH
68177: LD_INT 3
68179: PPUSH
68180: LD_INT 4
68182: PPUSH
68183: CALL_OW 272
68187: PUSH
68188: LD_VAR 0 8
68192: PPUSH
68193: LD_INT 3
68195: PPUSH
68196: LD_INT 4
68198: PPUSH
68199: CALL_OW 273
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_VAR 0 7
68212: PPUSH
68213: LD_INT 4
68215: PPUSH
68216: LD_INT 4
68218: PPUSH
68219: CALL_OW 272
68223: PUSH
68224: LD_VAR 0 8
68228: PPUSH
68229: LD_INT 4
68231: PPUSH
68232: LD_INT 4
68234: PPUSH
68235: CALL_OW 273
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_VAR 0 7
68248: PPUSH
68249: LD_INT 5
68251: PPUSH
68252: LD_INT 4
68254: PPUSH
68255: CALL_OW 272
68259: PUSH
68260: LD_VAR 0 8
68264: PPUSH
68265: LD_INT 5
68267: PPUSH
68268: LD_INT 4
68270: PPUSH
68271: CALL_OW 273
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: ST_TO_ADDR
// for i = tmp downto 1 do
68288: LD_ADDR_VAR 0 4
68292: PUSH
68293: DOUBLE
68294: LD_VAR 0 6
68298: INC
68299: ST_TO_ADDR
68300: LD_INT 1
68302: PUSH
68303: FOR_DOWNTO
68304: IFFALSE 68405
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68306: LD_VAR 0 6
68310: PUSH
68311: LD_VAR 0 4
68315: ARRAY
68316: PUSH
68317: LD_INT 1
68319: ARRAY
68320: PPUSH
68321: LD_VAR 0 6
68325: PUSH
68326: LD_VAR 0 4
68330: ARRAY
68331: PUSH
68332: LD_INT 2
68334: ARRAY
68335: PPUSH
68336: CALL_OW 488
68340: NOT
68341: PUSH
68342: LD_VAR 0 6
68346: PUSH
68347: LD_VAR 0 4
68351: ARRAY
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: PPUSH
68357: LD_VAR 0 6
68361: PUSH
68362: LD_VAR 0 4
68366: ARRAY
68367: PUSH
68368: LD_INT 2
68370: ARRAY
68371: PPUSH
68372: CALL_OW 428
68376: PUSH
68377: LD_INT 0
68379: NONEQUAL
68380: OR
68381: IFFALSE 68403
// tmp := Delete ( tmp , i ) ;
68383: LD_ADDR_VAR 0 6
68387: PUSH
68388: LD_VAR 0 6
68392: PPUSH
68393: LD_VAR 0 4
68397: PPUSH
68398: CALL_OW 3
68402: ST_TO_ADDR
68403: GO 68303
68405: POP
68406: POP
// j := GetClosestHex ( unit , tmp ) ;
68407: LD_ADDR_VAR 0 5
68411: PUSH
68412: LD_VAR 0 1
68416: PPUSH
68417: LD_VAR 0 6
68421: PPUSH
68422: CALL 67707 0 2
68426: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68427: LD_VAR 0 1
68431: PPUSH
68432: LD_VAR 0 5
68436: PUSH
68437: LD_INT 1
68439: ARRAY
68440: PPUSH
68441: LD_VAR 0 5
68445: PUSH
68446: LD_INT 2
68448: ARRAY
68449: PPUSH
68450: CALL_OW 111
// end ;
68454: LD_VAR 0 3
68458: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68459: LD_INT 0
68461: PPUSH
68462: PPUSH
68463: PPUSH
// uc_side = 0 ;
68464: LD_ADDR_OWVAR 20
68468: PUSH
68469: LD_INT 0
68471: ST_TO_ADDR
// uc_nation = 0 ;
68472: LD_ADDR_OWVAR 21
68476: PUSH
68477: LD_INT 0
68479: ST_TO_ADDR
// InitHc_All ( ) ;
68480: CALL_OW 584
// InitVc ;
68484: CALL_OW 20
// if mastodonts then
68488: LD_VAR 0 6
68492: IFFALSE 68559
// for i = 1 to mastodonts do
68494: LD_ADDR_VAR 0 11
68498: PUSH
68499: DOUBLE
68500: LD_INT 1
68502: DEC
68503: ST_TO_ADDR
68504: LD_VAR 0 6
68508: PUSH
68509: FOR_TO
68510: IFFALSE 68557
// begin vc_chassis := 31 ;
68512: LD_ADDR_OWVAR 37
68516: PUSH
68517: LD_INT 31
68519: ST_TO_ADDR
// vc_control := control_rider ;
68520: LD_ADDR_OWVAR 38
68524: PUSH
68525: LD_INT 4
68527: ST_TO_ADDR
// animal := CreateVehicle ;
68528: LD_ADDR_VAR 0 12
68532: PUSH
68533: CALL_OW 45
68537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68538: LD_VAR 0 12
68542: PPUSH
68543: LD_VAR 0 8
68547: PPUSH
68548: LD_INT 0
68550: PPUSH
68551: CALL 70747 0 3
// end ;
68555: GO 68509
68557: POP
68558: POP
// if horses then
68559: LD_VAR 0 5
68563: IFFALSE 68630
// for i = 1 to horses do
68565: LD_ADDR_VAR 0 11
68569: PUSH
68570: DOUBLE
68571: LD_INT 1
68573: DEC
68574: ST_TO_ADDR
68575: LD_VAR 0 5
68579: PUSH
68580: FOR_TO
68581: IFFALSE 68628
// begin hc_class := 21 ;
68583: LD_ADDR_OWVAR 28
68587: PUSH
68588: LD_INT 21
68590: ST_TO_ADDR
// hc_gallery :=  ;
68591: LD_ADDR_OWVAR 33
68595: PUSH
68596: LD_STRING 
68598: ST_TO_ADDR
// animal := CreateHuman ;
68599: LD_ADDR_VAR 0 12
68603: PUSH
68604: CALL_OW 44
68608: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68609: LD_VAR 0 12
68613: PPUSH
68614: LD_VAR 0 8
68618: PPUSH
68619: LD_INT 0
68621: PPUSH
68622: CALL 70747 0 3
// end ;
68626: GO 68580
68628: POP
68629: POP
// if birds then
68630: LD_VAR 0 1
68634: IFFALSE 68701
// for i = 1 to birds do
68636: LD_ADDR_VAR 0 11
68640: PUSH
68641: DOUBLE
68642: LD_INT 1
68644: DEC
68645: ST_TO_ADDR
68646: LD_VAR 0 1
68650: PUSH
68651: FOR_TO
68652: IFFALSE 68699
// begin hc_class = 18 ;
68654: LD_ADDR_OWVAR 28
68658: PUSH
68659: LD_INT 18
68661: ST_TO_ADDR
// hc_gallery =  ;
68662: LD_ADDR_OWVAR 33
68666: PUSH
68667: LD_STRING 
68669: ST_TO_ADDR
// animal := CreateHuman ;
68670: LD_ADDR_VAR 0 12
68674: PUSH
68675: CALL_OW 44
68679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68680: LD_VAR 0 12
68684: PPUSH
68685: LD_VAR 0 8
68689: PPUSH
68690: LD_INT 0
68692: PPUSH
68693: CALL 70747 0 3
// end ;
68697: GO 68651
68699: POP
68700: POP
// if tigers then
68701: LD_VAR 0 2
68705: IFFALSE 68789
// for i = 1 to tigers do
68707: LD_ADDR_VAR 0 11
68711: PUSH
68712: DOUBLE
68713: LD_INT 1
68715: DEC
68716: ST_TO_ADDR
68717: LD_VAR 0 2
68721: PUSH
68722: FOR_TO
68723: IFFALSE 68787
// begin hc_class = class_tiger ;
68725: LD_ADDR_OWVAR 28
68729: PUSH
68730: LD_INT 14
68732: ST_TO_ADDR
// hc_gallery =  ;
68733: LD_ADDR_OWVAR 33
68737: PUSH
68738: LD_STRING 
68740: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68741: LD_ADDR_OWVAR 35
68745: PUSH
68746: LD_INT 7
68748: NEG
68749: PPUSH
68750: LD_INT 7
68752: PPUSH
68753: CALL_OW 12
68757: ST_TO_ADDR
// animal := CreateHuman ;
68758: LD_ADDR_VAR 0 12
68762: PUSH
68763: CALL_OW 44
68767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68768: LD_VAR 0 12
68772: PPUSH
68773: LD_VAR 0 8
68777: PPUSH
68778: LD_INT 0
68780: PPUSH
68781: CALL 70747 0 3
// end ;
68785: GO 68722
68787: POP
68788: POP
// if apemans then
68789: LD_VAR 0 3
68793: IFFALSE 68916
// for i = 1 to apemans do
68795: LD_ADDR_VAR 0 11
68799: PUSH
68800: DOUBLE
68801: LD_INT 1
68803: DEC
68804: ST_TO_ADDR
68805: LD_VAR 0 3
68809: PUSH
68810: FOR_TO
68811: IFFALSE 68914
// begin hc_class = class_apeman ;
68813: LD_ADDR_OWVAR 28
68817: PUSH
68818: LD_INT 12
68820: ST_TO_ADDR
// hc_gallery =  ;
68821: LD_ADDR_OWVAR 33
68825: PUSH
68826: LD_STRING 
68828: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68829: LD_ADDR_OWVAR 35
68833: PUSH
68834: LD_INT 2
68836: NEG
68837: PPUSH
68838: LD_INT 2
68840: PPUSH
68841: CALL_OW 12
68845: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68846: LD_ADDR_OWVAR 31
68850: PUSH
68851: LD_INT 1
68853: PPUSH
68854: LD_INT 3
68856: PPUSH
68857: CALL_OW 12
68861: PUSH
68862: LD_INT 1
68864: PPUSH
68865: LD_INT 3
68867: PPUSH
68868: CALL_OW 12
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: ST_TO_ADDR
// animal := CreateHuman ;
68885: LD_ADDR_VAR 0 12
68889: PUSH
68890: CALL_OW 44
68894: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68895: LD_VAR 0 12
68899: PPUSH
68900: LD_VAR 0 8
68904: PPUSH
68905: LD_INT 0
68907: PPUSH
68908: CALL 70747 0 3
// end ;
68912: GO 68810
68914: POP
68915: POP
// if enchidnas then
68916: LD_VAR 0 4
68920: IFFALSE 68987
// for i = 1 to enchidnas do
68922: LD_ADDR_VAR 0 11
68926: PUSH
68927: DOUBLE
68928: LD_INT 1
68930: DEC
68931: ST_TO_ADDR
68932: LD_VAR 0 4
68936: PUSH
68937: FOR_TO
68938: IFFALSE 68985
// begin hc_class = 13 ;
68940: LD_ADDR_OWVAR 28
68944: PUSH
68945: LD_INT 13
68947: ST_TO_ADDR
// hc_gallery =  ;
68948: LD_ADDR_OWVAR 33
68952: PUSH
68953: LD_STRING 
68955: ST_TO_ADDR
// animal := CreateHuman ;
68956: LD_ADDR_VAR 0 12
68960: PUSH
68961: CALL_OW 44
68965: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68966: LD_VAR 0 12
68970: PPUSH
68971: LD_VAR 0 8
68975: PPUSH
68976: LD_INT 0
68978: PPUSH
68979: CALL 70747 0 3
// end ;
68983: GO 68937
68985: POP
68986: POP
// if fishes then
68987: LD_VAR 0 7
68991: IFFALSE 69058
// for i = 1 to fishes do
68993: LD_ADDR_VAR 0 11
68997: PUSH
68998: DOUBLE
68999: LD_INT 1
69001: DEC
69002: ST_TO_ADDR
69003: LD_VAR 0 7
69007: PUSH
69008: FOR_TO
69009: IFFALSE 69056
// begin hc_class = 20 ;
69011: LD_ADDR_OWVAR 28
69015: PUSH
69016: LD_INT 20
69018: ST_TO_ADDR
// hc_gallery =  ;
69019: LD_ADDR_OWVAR 33
69023: PUSH
69024: LD_STRING 
69026: ST_TO_ADDR
// animal := CreateHuman ;
69027: LD_ADDR_VAR 0 12
69031: PUSH
69032: CALL_OW 44
69036: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69037: LD_VAR 0 12
69041: PPUSH
69042: LD_VAR 0 9
69046: PPUSH
69047: LD_INT 0
69049: PPUSH
69050: CALL 70747 0 3
// end ;
69054: GO 69008
69056: POP
69057: POP
// end ;
69058: LD_VAR 0 10
69062: RET
// export function WantHeal ( sci , unit ) ; begin
69063: LD_INT 0
69065: PPUSH
// if GetTaskList ( sci ) > 0 then
69066: LD_VAR 0 1
69070: PPUSH
69071: CALL_OW 437
69075: PUSH
69076: LD_INT 0
69078: GREATER
69079: IFFALSE 69149
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69081: LD_VAR 0 1
69085: PPUSH
69086: CALL_OW 437
69090: PUSH
69091: LD_INT 1
69093: ARRAY
69094: PUSH
69095: LD_INT 1
69097: ARRAY
69098: PUSH
69099: LD_STRING l
69101: EQUAL
69102: PUSH
69103: LD_VAR 0 1
69107: PPUSH
69108: CALL_OW 437
69112: PUSH
69113: LD_INT 1
69115: ARRAY
69116: PUSH
69117: LD_INT 4
69119: ARRAY
69120: PUSH
69121: LD_VAR 0 2
69125: EQUAL
69126: AND
69127: IFFALSE 69139
// result := true else
69129: LD_ADDR_VAR 0 3
69133: PUSH
69134: LD_INT 1
69136: ST_TO_ADDR
69137: GO 69147
// result := false ;
69139: LD_ADDR_VAR 0 3
69143: PUSH
69144: LD_INT 0
69146: ST_TO_ADDR
// end else
69147: GO 69157
// result := false ;
69149: LD_ADDR_VAR 0 3
69153: PUSH
69154: LD_INT 0
69156: ST_TO_ADDR
// end ;
69157: LD_VAR 0 3
69161: RET
// export function HealTarget ( sci ) ; begin
69162: LD_INT 0
69164: PPUSH
// if not sci then
69165: LD_VAR 0 1
69169: NOT
69170: IFFALSE 69174
// exit ;
69172: GO 69239
// result := 0 ;
69174: LD_ADDR_VAR 0 2
69178: PUSH
69179: LD_INT 0
69181: ST_TO_ADDR
// if GetTaskList ( sci ) then
69182: LD_VAR 0 1
69186: PPUSH
69187: CALL_OW 437
69191: IFFALSE 69239
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69193: LD_VAR 0 1
69197: PPUSH
69198: CALL_OW 437
69202: PUSH
69203: LD_INT 1
69205: ARRAY
69206: PUSH
69207: LD_INT 1
69209: ARRAY
69210: PUSH
69211: LD_STRING l
69213: EQUAL
69214: IFFALSE 69239
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69216: LD_ADDR_VAR 0 2
69220: PUSH
69221: LD_VAR 0 1
69225: PPUSH
69226: CALL_OW 437
69230: PUSH
69231: LD_INT 1
69233: ARRAY
69234: PUSH
69235: LD_INT 4
69237: ARRAY
69238: ST_TO_ADDR
// end ;
69239: LD_VAR 0 2
69243: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69244: LD_INT 0
69246: PPUSH
69247: PPUSH
69248: PPUSH
69249: PPUSH
// if not base_units then
69250: LD_VAR 0 1
69254: NOT
69255: IFFALSE 69259
// exit ;
69257: GO 69346
// result := false ;
69259: LD_ADDR_VAR 0 2
69263: PUSH
69264: LD_INT 0
69266: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69267: LD_ADDR_VAR 0 5
69271: PUSH
69272: LD_VAR 0 1
69276: PPUSH
69277: LD_INT 21
69279: PUSH
69280: LD_INT 3
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PPUSH
69287: CALL_OW 72
69291: ST_TO_ADDR
// if not tmp then
69292: LD_VAR 0 5
69296: NOT
69297: IFFALSE 69301
// exit ;
69299: GO 69346
// for i in tmp do
69301: LD_ADDR_VAR 0 3
69305: PUSH
69306: LD_VAR 0 5
69310: PUSH
69311: FOR_IN
69312: IFFALSE 69344
// begin result := EnemyInRange ( i , 22 ) ;
69314: LD_ADDR_VAR 0 2
69318: PUSH
69319: LD_VAR 0 3
69323: PPUSH
69324: LD_INT 22
69326: PPUSH
69327: CALL 67582 0 2
69331: ST_TO_ADDR
// if result then
69332: LD_VAR 0 2
69336: IFFALSE 69342
// exit ;
69338: POP
69339: POP
69340: GO 69346
// end ;
69342: GO 69311
69344: POP
69345: POP
// end ;
69346: LD_VAR 0 2
69350: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69351: LD_INT 0
69353: PPUSH
69354: PPUSH
// if not units then
69355: LD_VAR 0 1
69359: NOT
69360: IFFALSE 69364
// exit ;
69362: GO 69434
// result := [ ] ;
69364: LD_ADDR_VAR 0 3
69368: PUSH
69369: EMPTY
69370: ST_TO_ADDR
// for i in units do
69371: LD_ADDR_VAR 0 4
69375: PUSH
69376: LD_VAR 0 1
69380: PUSH
69381: FOR_IN
69382: IFFALSE 69432
// if GetTag ( i ) = tag then
69384: LD_VAR 0 4
69388: PPUSH
69389: CALL_OW 110
69393: PUSH
69394: LD_VAR 0 2
69398: EQUAL
69399: IFFALSE 69430
// result := Replace ( result , result + 1 , i ) ;
69401: LD_ADDR_VAR 0 3
69405: PUSH
69406: LD_VAR 0 3
69410: PPUSH
69411: LD_VAR 0 3
69415: PUSH
69416: LD_INT 1
69418: PLUS
69419: PPUSH
69420: LD_VAR 0 4
69424: PPUSH
69425: CALL_OW 1
69429: ST_TO_ADDR
69430: GO 69381
69432: POP
69433: POP
// end ;
69434: LD_VAR 0 3
69438: RET
// export function IsDriver ( un ) ; begin
69439: LD_INT 0
69441: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69442: LD_ADDR_VAR 0 2
69446: PUSH
69447: LD_VAR 0 1
69451: PUSH
69452: LD_INT 55
69454: PUSH
69455: EMPTY
69456: LIST
69457: PPUSH
69458: CALL_OW 69
69462: IN
69463: ST_TO_ADDR
// end ;
69464: LD_VAR 0 2
69468: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69469: LD_INT 0
69471: PPUSH
69472: PPUSH
// list := [ ] ;
69473: LD_ADDR_VAR 0 5
69477: PUSH
69478: EMPTY
69479: ST_TO_ADDR
// case d of 0 :
69480: LD_VAR 0 3
69484: PUSH
69485: LD_INT 0
69487: DOUBLE
69488: EQUAL
69489: IFTRUE 69493
69491: GO 69626
69493: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69494: LD_ADDR_VAR 0 5
69498: PUSH
69499: LD_VAR 0 1
69503: PUSH
69504: LD_INT 4
69506: MINUS
69507: PUSH
69508: LD_VAR 0 2
69512: PUSH
69513: LD_INT 4
69515: MINUS
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: PUSH
69525: LD_VAR 0 1
69529: PUSH
69530: LD_INT 3
69532: MINUS
69533: PUSH
69534: LD_VAR 0 2
69538: PUSH
69539: LD_INT 1
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: LIST
69546: PUSH
69547: LD_VAR 0 1
69551: PUSH
69552: LD_INT 4
69554: PLUS
69555: PUSH
69556: LD_VAR 0 2
69560: PUSH
69561: LD_INT 4
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: LIST
69568: PUSH
69569: LD_VAR 0 1
69573: PUSH
69574: LD_INT 3
69576: PLUS
69577: PUSH
69578: LD_VAR 0 2
69582: PUSH
69583: LD_INT 3
69585: PLUS
69586: PUSH
69587: LD_INT 5
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: LIST
69594: PUSH
69595: LD_VAR 0 1
69599: PUSH
69600: LD_VAR 0 2
69604: PUSH
69605: LD_INT 4
69607: PLUS
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: LIST
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: ST_TO_ADDR
// end ; 1 :
69624: GO 70324
69626: LD_INT 1
69628: DOUBLE
69629: EQUAL
69630: IFTRUE 69634
69632: GO 69767
69634: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69635: LD_ADDR_VAR 0 5
69639: PUSH
69640: LD_VAR 0 1
69644: PUSH
69645: LD_VAR 0 2
69649: PUSH
69650: LD_INT 4
69652: MINUS
69653: PUSH
69654: LD_INT 3
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: LIST
69661: PUSH
69662: LD_VAR 0 1
69666: PUSH
69667: LD_INT 3
69669: MINUS
69670: PUSH
69671: LD_VAR 0 2
69675: PUSH
69676: LD_INT 3
69678: MINUS
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: PUSH
69688: LD_VAR 0 1
69692: PUSH
69693: LD_INT 4
69695: MINUS
69696: PUSH
69697: LD_VAR 0 2
69701: PUSH
69702: LD_INT 1
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: PUSH
69710: LD_VAR 0 1
69714: PUSH
69715: LD_VAR 0 2
69719: PUSH
69720: LD_INT 3
69722: PLUS
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: LIST
69731: PUSH
69732: LD_VAR 0 1
69736: PUSH
69737: LD_INT 4
69739: PLUS
69740: PUSH
69741: LD_VAR 0 2
69745: PUSH
69746: LD_INT 4
69748: PLUS
69749: PUSH
69750: LD_INT 5
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: LIST
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: ST_TO_ADDR
// end ; 2 :
69765: GO 70324
69767: LD_INT 2
69769: DOUBLE
69770: EQUAL
69771: IFTRUE 69775
69773: GO 69904
69775: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69776: LD_ADDR_VAR 0 5
69780: PUSH
69781: LD_VAR 0 1
69785: PUSH
69786: LD_VAR 0 2
69790: PUSH
69791: LD_INT 3
69793: MINUS
69794: PUSH
69795: LD_INT 3
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: LIST
69802: PUSH
69803: LD_VAR 0 1
69807: PUSH
69808: LD_INT 4
69810: PLUS
69811: PUSH
69812: LD_VAR 0 2
69816: PUSH
69817: LD_INT 4
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: LIST
69824: PUSH
69825: LD_VAR 0 1
69829: PUSH
69830: LD_VAR 0 2
69834: PUSH
69835: LD_INT 4
69837: PLUS
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: LIST
69846: PUSH
69847: LD_VAR 0 1
69851: PUSH
69852: LD_INT 3
69854: MINUS
69855: PUSH
69856: LD_VAR 0 2
69860: PUSH
69861: LD_INT 1
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: LIST
69868: PUSH
69869: LD_VAR 0 1
69873: PUSH
69874: LD_INT 4
69876: MINUS
69877: PUSH
69878: LD_VAR 0 2
69882: PUSH
69883: LD_INT 4
69885: MINUS
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: LIST
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: ST_TO_ADDR
// end ; 3 :
69902: GO 70324
69904: LD_INT 3
69906: DOUBLE
69907: EQUAL
69908: IFTRUE 69912
69910: GO 70045
69912: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69913: LD_ADDR_VAR 0 5
69917: PUSH
69918: LD_VAR 0 1
69922: PUSH
69923: LD_INT 3
69925: PLUS
69926: PUSH
69927: LD_VAR 0 2
69931: PUSH
69932: LD_INT 4
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: LIST
69939: PUSH
69940: LD_VAR 0 1
69944: PUSH
69945: LD_INT 4
69947: PLUS
69948: PUSH
69949: LD_VAR 0 2
69953: PUSH
69954: LD_INT 4
69956: PLUS
69957: PUSH
69958: LD_INT 5
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: LIST
69965: PUSH
69966: LD_VAR 0 1
69970: PUSH
69971: LD_INT 4
69973: MINUS
69974: PUSH
69975: LD_VAR 0 2
69979: PUSH
69980: LD_INT 1
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: PUSH
69988: LD_VAR 0 1
69992: PUSH
69993: LD_VAR 0 2
69997: PUSH
69998: LD_INT 4
70000: MINUS
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: LIST
70009: PUSH
70010: LD_VAR 0 1
70014: PUSH
70015: LD_INT 3
70017: MINUS
70018: PUSH
70019: LD_VAR 0 2
70023: PUSH
70024: LD_INT 3
70026: MINUS
70027: PUSH
70028: LD_INT 2
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: LIST
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: ST_TO_ADDR
// end ; 4 :
70043: GO 70324
70045: LD_INT 4
70047: DOUBLE
70048: EQUAL
70049: IFTRUE 70053
70051: GO 70186
70053: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70054: LD_ADDR_VAR 0 5
70058: PUSH
70059: LD_VAR 0 1
70063: PUSH
70064: LD_VAR 0 2
70068: PUSH
70069: LD_INT 4
70071: PLUS
70072: PUSH
70073: LD_INT 0
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: LIST
70080: PUSH
70081: LD_VAR 0 1
70085: PUSH
70086: LD_INT 3
70088: PLUS
70089: PUSH
70090: LD_VAR 0 2
70094: PUSH
70095: LD_INT 3
70097: PLUS
70098: PUSH
70099: LD_INT 5
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: PUSH
70107: LD_VAR 0 1
70111: PUSH
70112: LD_INT 4
70114: PLUS
70115: PUSH
70116: LD_VAR 0 2
70120: PUSH
70121: LD_INT 4
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: PUSH
70129: LD_VAR 0 1
70133: PUSH
70134: LD_VAR 0 2
70138: PUSH
70139: LD_INT 3
70141: MINUS
70142: PUSH
70143: LD_INT 3
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: LIST
70150: PUSH
70151: LD_VAR 0 1
70155: PUSH
70156: LD_INT 4
70158: MINUS
70159: PUSH
70160: LD_VAR 0 2
70164: PUSH
70165: LD_INT 4
70167: MINUS
70168: PUSH
70169: LD_INT 2
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: LIST
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: ST_TO_ADDR
// end ; 5 :
70184: GO 70324
70186: LD_INT 5
70188: DOUBLE
70189: EQUAL
70190: IFTRUE 70194
70192: GO 70323
70194: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: LD_VAR 0 1
70204: PUSH
70205: LD_INT 4
70207: MINUS
70208: PUSH
70209: LD_VAR 0 2
70213: PUSH
70214: LD_INT 1
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: LIST
70221: PUSH
70222: LD_VAR 0 1
70226: PUSH
70227: LD_VAR 0 2
70231: PUSH
70232: LD_INT 4
70234: MINUS
70235: PUSH
70236: LD_INT 3
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: LIST
70243: PUSH
70244: LD_VAR 0 1
70248: PUSH
70249: LD_INT 4
70251: PLUS
70252: PUSH
70253: LD_VAR 0 2
70257: PUSH
70258: LD_INT 4
70260: PLUS
70261: PUSH
70262: LD_INT 5
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: PUSH
70270: LD_VAR 0 1
70274: PUSH
70275: LD_INT 3
70277: PLUS
70278: PUSH
70279: LD_VAR 0 2
70283: PUSH
70284: LD_INT 4
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: LIST
70291: PUSH
70292: LD_VAR 0 1
70296: PUSH
70297: LD_VAR 0 2
70301: PUSH
70302: LD_INT 3
70304: PLUS
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: LIST
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: ST_TO_ADDR
// end ; end ;
70321: GO 70324
70323: POP
// result := list ;
70324: LD_ADDR_VAR 0 4
70328: PUSH
70329: LD_VAR 0 5
70333: ST_TO_ADDR
// end ;
70334: LD_VAR 0 4
70338: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70339: LD_INT 0
70341: PPUSH
70342: PPUSH
70343: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70344: LD_VAR 0 1
70348: NOT
70349: PUSH
70350: LD_VAR 0 2
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: LD_INT 2
70360: PUSH
70361: LD_INT 3
70363: PUSH
70364: LD_INT 4
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: IN
70373: NOT
70374: OR
70375: IFFALSE 70379
// exit ;
70377: GO 70471
// tmp := [ ] ;
70379: LD_ADDR_VAR 0 5
70383: PUSH
70384: EMPTY
70385: ST_TO_ADDR
// for i in units do
70386: LD_ADDR_VAR 0 4
70390: PUSH
70391: LD_VAR 0 1
70395: PUSH
70396: FOR_IN
70397: IFFALSE 70440
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70399: LD_ADDR_VAR 0 5
70403: PUSH
70404: LD_VAR 0 5
70408: PPUSH
70409: LD_VAR 0 5
70413: PUSH
70414: LD_INT 1
70416: PLUS
70417: PPUSH
70418: LD_VAR 0 4
70422: PPUSH
70423: LD_VAR 0 2
70427: PPUSH
70428: CALL_OW 259
70432: PPUSH
70433: CALL_OW 2
70437: ST_TO_ADDR
70438: GO 70396
70440: POP
70441: POP
// if not tmp then
70442: LD_VAR 0 5
70446: NOT
70447: IFFALSE 70451
// exit ;
70449: GO 70471
// result := SortListByListDesc ( units , tmp ) ;
70451: LD_ADDR_VAR 0 3
70455: PUSH
70456: LD_VAR 0 1
70460: PPUSH
70461: LD_VAR 0 5
70465: PPUSH
70466: CALL_OW 77
70470: ST_TO_ADDR
// end ;
70471: LD_VAR 0 3
70475: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70476: LD_INT 0
70478: PPUSH
70479: PPUSH
70480: PPUSH
// result := false ;
70481: LD_ADDR_VAR 0 3
70485: PUSH
70486: LD_INT 0
70488: ST_TO_ADDR
// x := GetX ( building ) ;
70489: LD_ADDR_VAR 0 4
70493: PUSH
70494: LD_VAR 0 2
70498: PPUSH
70499: CALL_OW 250
70503: ST_TO_ADDR
// y := GetY ( building ) ;
70504: LD_ADDR_VAR 0 5
70508: PUSH
70509: LD_VAR 0 2
70513: PPUSH
70514: CALL_OW 251
70518: ST_TO_ADDR
// if not building or not x or not y then
70519: LD_VAR 0 2
70523: NOT
70524: PUSH
70525: LD_VAR 0 4
70529: NOT
70530: OR
70531: PUSH
70532: LD_VAR 0 5
70536: NOT
70537: OR
70538: IFFALSE 70542
// exit ;
70540: GO 70634
// if GetTaskList ( unit ) then
70542: LD_VAR 0 1
70546: PPUSH
70547: CALL_OW 437
70551: IFFALSE 70634
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70553: LD_STRING e
70555: PUSH
70556: LD_VAR 0 1
70560: PPUSH
70561: CALL_OW 437
70565: PUSH
70566: LD_INT 1
70568: ARRAY
70569: PUSH
70570: LD_INT 1
70572: ARRAY
70573: EQUAL
70574: PUSH
70575: LD_VAR 0 4
70579: PUSH
70580: LD_VAR 0 1
70584: PPUSH
70585: CALL_OW 437
70589: PUSH
70590: LD_INT 1
70592: ARRAY
70593: PUSH
70594: LD_INT 2
70596: ARRAY
70597: EQUAL
70598: AND
70599: PUSH
70600: LD_VAR 0 5
70604: PUSH
70605: LD_VAR 0 1
70609: PPUSH
70610: CALL_OW 437
70614: PUSH
70615: LD_INT 1
70617: ARRAY
70618: PUSH
70619: LD_INT 3
70621: ARRAY
70622: EQUAL
70623: AND
70624: IFFALSE 70634
// result := true end ;
70626: LD_ADDR_VAR 0 3
70630: PUSH
70631: LD_INT 1
70633: ST_TO_ADDR
// end ;
70634: LD_VAR 0 3
70638: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70639: LD_INT 0
70641: PPUSH
// result := false ;
70642: LD_ADDR_VAR 0 4
70646: PUSH
70647: LD_INT 0
70649: ST_TO_ADDR
// if GetTaskList ( unit ) then
70650: LD_VAR 0 1
70654: PPUSH
70655: CALL_OW 437
70659: IFFALSE 70742
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70661: LD_STRING M
70663: PUSH
70664: LD_VAR 0 1
70668: PPUSH
70669: CALL_OW 437
70673: PUSH
70674: LD_INT 1
70676: ARRAY
70677: PUSH
70678: LD_INT 1
70680: ARRAY
70681: EQUAL
70682: PUSH
70683: LD_VAR 0 2
70687: PUSH
70688: LD_VAR 0 1
70692: PPUSH
70693: CALL_OW 437
70697: PUSH
70698: LD_INT 1
70700: ARRAY
70701: PUSH
70702: LD_INT 2
70704: ARRAY
70705: EQUAL
70706: AND
70707: PUSH
70708: LD_VAR 0 3
70712: PUSH
70713: LD_VAR 0 1
70717: PPUSH
70718: CALL_OW 437
70722: PUSH
70723: LD_INT 1
70725: ARRAY
70726: PUSH
70727: LD_INT 3
70729: ARRAY
70730: EQUAL
70731: AND
70732: IFFALSE 70742
// result := true ;
70734: LD_ADDR_VAR 0 4
70738: PUSH
70739: LD_INT 1
70741: ST_TO_ADDR
// end ; end ;
70742: LD_VAR 0 4
70746: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70747: LD_INT 0
70749: PPUSH
70750: PPUSH
70751: PPUSH
70752: PPUSH
// if not unit or not area then
70753: LD_VAR 0 1
70757: NOT
70758: PUSH
70759: LD_VAR 0 2
70763: NOT
70764: OR
70765: IFFALSE 70769
// exit ;
70767: GO 70933
// tmp := AreaToList ( area , i ) ;
70769: LD_ADDR_VAR 0 6
70773: PUSH
70774: LD_VAR 0 2
70778: PPUSH
70779: LD_VAR 0 5
70783: PPUSH
70784: CALL_OW 517
70788: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70789: LD_ADDR_VAR 0 5
70793: PUSH
70794: DOUBLE
70795: LD_INT 1
70797: DEC
70798: ST_TO_ADDR
70799: LD_VAR 0 6
70803: PUSH
70804: LD_INT 1
70806: ARRAY
70807: PUSH
70808: FOR_TO
70809: IFFALSE 70931
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70811: LD_ADDR_VAR 0 7
70815: PUSH
70816: LD_VAR 0 6
70820: PUSH
70821: LD_INT 1
70823: ARRAY
70824: PUSH
70825: LD_VAR 0 5
70829: ARRAY
70830: PUSH
70831: LD_VAR 0 6
70835: PUSH
70836: LD_INT 2
70838: ARRAY
70839: PUSH
70840: LD_VAR 0 5
70844: ARRAY
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70850: LD_VAR 0 7
70854: PUSH
70855: LD_INT 1
70857: ARRAY
70858: PPUSH
70859: LD_VAR 0 7
70863: PUSH
70864: LD_INT 2
70866: ARRAY
70867: PPUSH
70868: CALL_OW 428
70872: PUSH
70873: LD_INT 0
70875: EQUAL
70876: IFFALSE 70929
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70878: LD_VAR 0 1
70882: PPUSH
70883: LD_VAR 0 7
70887: PUSH
70888: LD_INT 1
70890: ARRAY
70891: PPUSH
70892: LD_VAR 0 7
70896: PUSH
70897: LD_INT 2
70899: ARRAY
70900: PPUSH
70901: LD_VAR 0 3
70905: PPUSH
70906: CALL_OW 48
// result := IsPlaced ( unit ) ;
70910: LD_ADDR_VAR 0 4
70914: PUSH
70915: LD_VAR 0 1
70919: PPUSH
70920: CALL_OW 305
70924: ST_TO_ADDR
// exit ;
70925: POP
70926: POP
70927: GO 70933
// end ; end ;
70929: GO 70808
70931: POP
70932: POP
// end ;
70933: LD_VAR 0 4
70937: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70938: LD_INT 0
70940: PPUSH
70941: PPUSH
70942: PPUSH
// if not side or side > 8 then
70943: LD_VAR 0 1
70947: NOT
70948: PUSH
70949: LD_VAR 0 1
70953: PUSH
70954: LD_INT 8
70956: GREATER
70957: OR
70958: IFFALSE 70962
// exit ;
70960: GO 71149
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70962: LD_ADDR_VAR 0 4
70966: PUSH
70967: LD_INT 22
70969: PUSH
70970: LD_VAR 0 1
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 21
70981: PUSH
70982: LD_INT 3
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PPUSH
70993: CALL_OW 69
70997: ST_TO_ADDR
// if not tmp then
70998: LD_VAR 0 4
71002: NOT
71003: IFFALSE 71007
// exit ;
71005: GO 71149
// enable_addtolog := true ;
71007: LD_ADDR_OWVAR 81
71011: PUSH
71012: LD_INT 1
71014: ST_TO_ADDR
// AddToLog ( [ ) ;
71015: LD_STRING [
71017: PPUSH
71018: CALL_OW 561
// for i in tmp do
71022: LD_ADDR_VAR 0 3
71026: PUSH
71027: LD_VAR 0 4
71031: PUSH
71032: FOR_IN
71033: IFFALSE 71140
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71035: LD_STRING [
71037: PUSH
71038: LD_VAR 0 3
71042: PPUSH
71043: CALL_OW 266
71047: STR
71048: PUSH
71049: LD_STRING , 
71051: STR
71052: PUSH
71053: LD_VAR 0 3
71057: PPUSH
71058: CALL_OW 250
71062: STR
71063: PUSH
71064: LD_STRING , 
71066: STR
71067: PUSH
71068: LD_VAR 0 3
71072: PPUSH
71073: CALL_OW 251
71077: STR
71078: PUSH
71079: LD_STRING , 
71081: STR
71082: PUSH
71083: LD_VAR 0 3
71087: PPUSH
71088: CALL_OW 254
71092: STR
71093: PUSH
71094: LD_STRING , 
71096: STR
71097: PUSH
71098: LD_VAR 0 3
71102: PPUSH
71103: LD_INT 1
71105: PPUSH
71106: CALL_OW 268
71110: STR
71111: PUSH
71112: LD_STRING , 
71114: STR
71115: PUSH
71116: LD_VAR 0 3
71120: PPUSH
71121: LD_INT 2
71123: PPUSH
71124: CALL_OW 268
71128: STR
71129: PUSH
71130: LD_STRING ],
71132: STR
71133: PPUSH
71134: CALL_OW 561
// end ;
71138: GO 71032
71140: POP
71141: POP
// AddToLog ( ]; ) ;
71142: LD_STRING ];
71144: PPUSH
71145: CALL_OW 561
// end ;
71149: LD_VAR 0 2
71153: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71154: LD_INT 0
71156: PPUSH
71157: PPUSH
71158: PPUSH
71159: PPUSH
71160: PPUSH
// if not area or not rate or not max then
71161: LD_VAR 0 1
71165: NOT
71166: PUSH
71167: LD_VAR 0 2
71171: NOT
71172: OR
71173: PUSH
71174: LD_VAR 0 4
71178: NOT
71179: OR
71180: IFFALSE 71184
// exit ;
71182: GO 71376
// while 1 do
71184: LD_INT 1
71186: IFFALSE 71376
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71188: LD_ADDR_VAR 0 9
71192: PUSH
71193: LD_VAR 0 1
71197: PPUSH
71198: LD_INT 1
71200: PPUSH
71201: CALL_OW 287
71205: PUSH
71206: LD_INT 10
71208: MUL
71209: ST_TO_ADDR
// r := rate / 10 ;
71210: LD_ADDR_VAR 0 7
71214: PUSH
71215: LD_VAR 0 2
71219: PUSH
71220: LD_INT 10
71222: DIVREAL
71223: ST_TO_ADDR
// time := 1 1$00 ;
71224: LD_ADDR_VAR 0 8
71228: PUSH
71229: LD_INT 2100
71231: ST_TO_ADDR
// if amount < min then
71232: LD_VAR 0 9
71236: PUSH
71237: LD_VAR 0 3
71241: LESS
71242: IFFALSE 71260
// r := r * 2 else
71244: LD_ADDR_VAR 0 7
71248: PUSH
71249: LD_VAR 0 7
71253: PUSH
71254: LD_INT 2
71256: MUL
71257: ST_TO_ADDR
71258: GO 71286
// if amount > max then
71260: LD_VAR 0 9
71264: PUSH
71265: LD_VAR 0 4
71269: GREATER
71270: IFFALSE 71286
// r := r / 2 ;
71272: LD_ADDR_VAR 0 7
71276: PUSH
71277: LD_VAR 0 7
71281: PUSH
71282: LD_INT 2
71284: DIVREAL
71285: ST_TO_ADDR
// time := time / r ;
71286: LD_ADDR_VAR 0 8
71290: PUSH
71291: LD_VAR 0 8
71295: PUSH
71296: LD_VAR 0 7
71300: DIVREAL
71301: ST_TO_ADDR
// if time < 0 then
71302: LD_VAR 0 8
71306: PUSH
71307: LD_INT 0
71309: LESS
71310: IFFALSE 71327
// time := time * - 1 ;
71312: LD_ADDR_VAR 0 8
71316: PUSH
71317: LD_VAR 0 8
71321: PUSH
71322: LD_INT 1
71324: NEG
71325: MUL
71326: ST_TO_ADDR
// wait ( time ) ;
71327: LD_VAR 0 8
71331: PPUSH
71332: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71336: LD_INT 35
71338: PPUSH
71339: LD_INT 875
71341: PPUSH
71342: CALL_OW 12
71346: PPUSH
71347: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71351: LD_INT 1
71353: PPUSH
71354: LD_INT 5
71356: PPUSH
71357: CALL_OW 12
71361: PPUSH
71362: LD_VAR 0 1
71366: PPUSH
71367: LD_INT 1
71369: PPUSH
71370: CALL_OW 55
// end ;
71374: GO 71184
// end ;
71376: LD_VAR 0 5
71380: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71381: LD_INT 0
71383: PPUSH
71384: PPUSH
71385: PPUSH
71386: PPUSH
71387: PPUSH
71388: PPUSH
71389: PPUSH
71390: PPUSH
// if not turrets or not factories then
71391: LD_VAR 0 1
71395: NOT
71396: PUSH
71397: LD_VAR 0 2
71401: NOT
71402: OR
71403: IFFALSE 71407
// exit ;
71405: GO 71714
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71407: LD_ADDR_VAR 0 10
71411: PUSH
71412: LD_INT 5
71414: PUSH
71415: LD_INT 6
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 2
71424: PUSH
71425: LD_INT 4
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 3
71434: PUSH
71435: LD_INT 5
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 24
71449: PUSH
71450: LD_INT 25
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 23
71459: PUSH
71460: LD_INT 27
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 42
71473: PUSH
71474: LD_INT 43
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 44
71483: PUSH
71484: LD_INT 46
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 45
71493: PUSH
71494: LD_INT 47
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: LIST
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: LIST
71510: ST_TO_ADDR
// result := [ ] ;
71511: LD_ADDR_VAR 0 3
71515: PUSH
71516: EMPTY
71517: ST_TO_ADDR
// for i in turrets do
71518: LD_ADDR_VAR 0 4
71522: PUSH
71523: LD_VAR 0 1
71527: PUSH
71528: FOR_IN
71529: IFFALSE 71712
// begin nat := GetNation ( i ) ;
71531: LD_ADDR_VAR 0 7
71535: PUSH
71536: LD_VAR 0 4
71540: PPUSH
71541: CALL_OW 248
71545: ST_TO_ADDR
// weapon := 0 ;
71546: LD_ADDR_VAR 0 8
71550: PUSH
71551: LD_INT 0
71553: ST_TO_ADDR
// if not nat then
71554: LD_VAR 0 7
71558: NOT
71559: IFFALSE 71563
// continue ;
71561: GO 71528
// for j in list [ nat ] do
71563: LD_ADDR_VAR 0 5
71567: PUSH
71568: LD_VAR 0 10
71572: PUSH
71573: LD_VAR 0 7
71577: ARRAY
71578: PUSH
71579: FOR_IN
71580: IFFALSE 71621
// if GetBWeapon ( i ) = j [ 1 ] then
71582: LD_VAR 0 4
71586: PPUSH
71587: CALL_OW 269
71591: PUSH
71592: LD_VAR 0 5
71596: PUSH
71597: LD_INT 1
71599: ARRAY
71600: EQUAL
71601: IFFALSE 71619
// begin weapon := j [ 2 ] ;
71603: LD_ADDR_VAR 0 8
71607: PUSH
71608: LD_VAR 0 5
71612: PUSH
71613: LD_INT 2
71615: ARRAY
71616: ST_TO_ADDR
// break ;
71617: GO 71621
// end ;
71619: GO 71579
71621: POP
71622: POP
// if not weapon then
71623: LD_VAR 0 8
71627: NOT
71628: IFFALSE 71632
// continue ;
71630: GO 71528
// for k in factories do
71632: LD_ADDR_VAR 0 6
71636: PUSH
71637: LD_VAR 0 2
71641: PUSH
71642: FOR_IN
71643: IFFALSE 71708
// begin weapons := AvailableWeaponList ( k ) ;
71645: LD_ADDR_VAR 0 9
71649: PUSH
71650: LD_VAR 0 6
71654: PPUSH
71655: CALL_OW 478
71659: ST_TO_ADDR
// if not weapons then
71660: LD_VAR 0 9
71664: NOT
71665: IFFALSE 71669
// continue ;
71667: GO 71642
// if weapon in weapons then
71669: LD_VAR 0 8
71673: PUSH
71674: LD_VAR 0 9
71678: IN
71679: IFFALSE 71706
// begin result := [ i , weapon ] ;
71681: LD_ADDR_VAR 0 3
71685: PUSH
71686: LD_VAR 0 4
71690: PUSH
71691: LD_VAR 0 8
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: ST_TO_ADDR
// exit ;
71700: POP
71701: POP
71702: POP
71703: POP
71704: GO 71714
// end ; end ;
71706: GO 71642
71708: POP
71709: POP
// end ;
71710: GO 71528
71712: POP
71713: POP
// end ;
71714: LD_VAR 0 3
71718: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71719: LD_INT 0
71721: PPUSH
// if not side or side > 8 then
71722: LD_VAR 0 3
71726: NOT
71727: PUSH
71728: LD_VAR 0 3
71732: PUSH
71733: LD_INT 8
71735: GREATER
71736: OR
71737: IFFALSE 71741
// exit ;
71739: GO 71800
// if not range then
71741: LD_VAR 0 4
71745: NOT
71746: IFFALSE 71757
// range := - 12 ;
71748: LD_ADDR_VAR 0 4
71752: PUSH
71753: LD_INT 12
71755: NEG
71756: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71757: LD_VAR 0 1
71761: PPUSH
71762: LD_VAR 0 2
71766: PPUSH
71767: LD_VAR 0 3
71771: PPUSH
71772: LD_VAR 0 4
71776: PPUSH
71777: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71781: LD_VAR 0 1
71785: PPUSH
71786: LD_VAR 0 2
71790: PPUSH
71791: LD_VAR 0 3
71795: PPUSH
71796: CALL_OW 331
// end ;
71800: LD_VAR 0 5
71804: RET
// export function Video ( mode ) ; begin
71805: LD_INT 0
71807: PPUSH
// ingame_video = mode ;
71808: LD_ADDR_OWVAR 52
71812: PUSH
71813: LD_VAR 0 1
71817: ST_TO_ADDR
// interface_hidden = mode ;
71818: LD_ADDR_OWVAR 54
71822: PUSH
71823: LD_VAR 0 1
71827: ST_TO_ADDR
// end ;
71828: LD_VAR 0 2
71832: RET
// export function Join ( array , element ) ; begin
71833: LD_INT 0
71835: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71836: LD_ADDR_VAR 0 3
71840: PUSH
71841: LD_VAR 0 1
71845: PPUSH
71846: LD_VAR 0 1
71850: PUSH
71851: LD_INT 1
71853: PLUS
71854: PPUSH
71855: LD_VAR 0 2
71859: PPUSH
71860: CALL_OW 1
71864: ST_TO_ADDR
// end ;
71865: LD_VAR 0 3
71869: RET
// export function JoinUnion ( array , element ) ; begin
71870: LD_INT 0
71872: PPUSH
// result := array union element ;
71873: LD_ADDR_VAR 0 3
71877: PUSH
71878: LD_VAR 0 1
71882: PUSH
71883: LD_VAR 0 2
71887: UNION
71888: ST_TO_ADDR
// end ;
71889: LD_VAR 0 3
71893: RET
// export function GetBehemoths ( side ) ; begin
71894: LD_INT 0
71896: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71897: LD_ADDR_VAR 0 2
71901: PUSH
71902: LD_INT 22
71904: PUSH
71905: LD_VAR 0 1
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 31
71916: PUSH
71917: LD_INT 25
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PPUSH
71928: CALL_OW 69
71932: ST_TO_ADDR
// end ;
71933: LD_VAR 0 2
71937: RET
// export function Shuffle ( array ) ; var i , index ; begin
71938: LD_INT 0
71940: PPUSH
71941: PPUSH
71942: PPUSH
// result := [ ] ;
71943: LD_ADDR_VAR 0 2
71947: PUSH
71948: EMPTY
71949: ST_TO_ADDR
// if not array then
71950: LD_VAR 0 1
71954: NOT
71955: IFFALSE 71959
// exit ;
71957: GO 72058
// Randomize ;
71959: CALL_OW 10
// for i = array downto 1 do
71963: LD_ADDR_VAR 0 3
71967: PUSH
71968: DOUBLE
71969: LD_VAR 0 1
71973: INC
71974: ST_TO_ADDR
71975: LD_INT 1
71977: PUSH
71978: FOR_DOWNTO
71979: IFFALSE 72056
// begin index := rand ( 1 , array ) ;
71981: LD_ADDR_VAR 0 4
71985: PUSH
71986: LD_INT 1
71988: PPUSH
71989: LD_VAR 0 1
71993: PPUSH
71994: CALL_OW 12
71998: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71999: LD_ADDR_VAR 0 2
72003: PUSH
72004: LD_VAR 0 2
72008: PPUSH
72009: LD_VAR 0 2
72013: PUSH
72014: LD_INT 1
72016: PLUS
72017: PPUSH
72018: LD_VAR 0 1
72022: PUSH
72023: LD_VAR 0 4
72027: ARRAY
72028: PPUSH
72029: CALL_OW 2
72033: ST_TO_ADDR
// array := Delete ( array , index ) ;
72034: LD_ADDR_VAR 0 1
72038: PUSH
72039: LD_VAR 0 1
72043: PPUSH
72044: LD_VAR 0 4
72048: PPUSH
72049: CALL_OW 3
72053: ST_TO_ADDR
// end ;
72054: GO 71978
72056: POP
72057: POP
// end ;
72058: LD_VAR 0 2
72062: RET
// export function GetBaseMaterials ( base ) ; begin
72063: LD_INT 0
72065: PPUSH
// result := [ 0 , 0 , 0 ] ;
72066: LD_ADDR_VAR 0 2
72070: PUSH
72071: LD_INT 0
72073: PUSH
72074: LD_INT 0
72076: PUSH
72077: LD_INT 0
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: LIST
72084: ST_TO_ADDR
// if not base then
72085: LD_VAR 0 1
72089: NOT
72090: IFFALSE 72094
// exit ;
72092: GO 72143
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72094: LD_ADDR_VAR 0 2
72098: PUSH
72099: LD_VAR 0 1
72103: PPUSH
72104: LD_INT 1
72106: PPUSH
72107: CALL_OW 275
72111: PUSH
72112: LD_VAR 0 1
72116: PPUSH
72117: LD_INT 2
72119: PPUSH
72120: CALL_OW 275
72124: PUSH
72125: LD_VAR 0 1
72129: PPUSH
72130: LD_INT 3
72132: PPUSH
72133: CALL_OW 275
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: LIST
72142: ST_TO_ADDR
// end ;
72143: LD_VAR 0 2
72147: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72148: LD_INT 0
72150: PPUSH
72151: PPUSH
// result := array ;
72152: LD_ADDR_VAR 0 3
72156: PUSH
72157: LD_VAR 0 1
72161: ST_TO_ADDR
// if size > 0 then
72162: LD_VAR 0 2
72166: PUSH
72167: LD_INT 0
72169: GREATER
72170: IFFALSE 72216
// for i := array downto size do
72172: LD_ADDR_VAR 0 4
72176: PUSH
72177: DOUBLE
72178: LD_VAR 0 1
72182: INC
72183: ST_TO_ADDR
72184: LD_VAR 0 2
72188: PUSH
72189: FOR_DOWNTO
72190: IFFALSE 72214
// result := Delete ( result , result ) ;
72192: LD_ADDR_VAR 0 3
72196: PUSH
72197: LD_VAR 0 3
72201: PPUSH
72202: LD_VAR 0 3
72206: PPUSH
72207: CALL_OW 3
72211: ST_TO_ADDR
72212: GO 72189
72214: POP
72215: POP
// end ;
72216: LD_VAR 0 3
72220: RET
// export function ComExit ( unit ) ; var tmp ; begin
72221: LD_INT 0
72223: PPUSH
72224: PPUSH
// if not IsInUnit ( unit ) then
72225: LD_VAR 0 1
72229: PPUSH
72230: CALL_OW 310
72234: NOT
72235: IFFALSE 72239
// exit ;
72237: GO 72299
// tmp := IsInUnit ( unit ) ;
72239: LD_ADDR_VAR 0 3
72243: PUSH
72244: LD_VAR 0 1
72248: PPUSH
72249: CALL_OW 310
72253: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72254: LD_VAR 0 3
72258: PPUSH
72259: CALL_OW 247
72263: PUSH
72264: LD_INT 2
72266: EQUAL
72267: IFFALSE 72280
// ComExitVehicle ( unit ) else
72269: LD_VAR 0 1
72273: PPUSH
72274: CALL_OW 121
72278: GO 72289
// ComExitBuilding ( unit ) ;
72280: LD_VAR 0 1
72284: PPUSH
72285: CALL_OW 122
// result := tmp ;
72289: LD_ADDR_VAR 0 2
72293: PUSH
72294: LD_VAR 0 3
72298: ST_TO_ADDR
// end ;
72299: LD_VAR 0 2
72303: RET
// export function ComExitAll ( units ) ; var i ; begin
72304: LD_INT 0
72306: PPUSH
72307: PPUSH
// if not units then
72308: LD_VAR 0 1
72312: NOT
72313: IFFALSE 72317
// exit ;
72315: GO 72343
// for i in units do
72317: LD_ADDR_VAR 0 3
72321: PUSH
72322: LD_VAR 0 1
72326: PUSH
72327: FOR_IN
72328: IFFALSE 72341
// ComExit ( i ) ;
72330: LD_VAR 0 3
72334: PPUSH
72335: CALL 72221 0 1
72339: GO 72327
72341: POP
72342: POP
// end ;
72343: LD_VAR 0 2
72347: RET
// export function ResetHc ; begin
72348: LD_INT 0
72350: PPUSH
// InitHc ;
72351: CALL_OW 19
// hc_importance := 0 ;
72355: LD_ADDR_OWVAR 32
72359: PUSH
72360: LD_INT 0
72362: ST_TO_ADDR
// end ;
72363: LD_VAR 0 1
72367: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72368: LD_INT 0
72370: PPUSH
72371: PPUSH
72372: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72373: LD_ADDR_VAR 0 6
72377: PUSH
72378: LD_VAR 0 1
72382: PUSH
72383: LD_VAR 0 3
72387: PLUS
72388: PUSH
72389: LD_INT 2
72391: DIV
72392: ST_TO_ADDR
// if _x < 0 then
72393: LD_VAR 0 6
72397: PUSH
72398: LD_INT 0
72400: LESS
72401: IFFALSE 72418
// _x := _x * - 1 ;
72403: LD_ADDR_VAR 0 6
72407: PUSH
72408: LD_VAR 0 6
72412: PUSH
72413: LD_INT 1
72415: NEG
72416: MUL
72417: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72418: LD_ADDR_VAR 0 7
72422: PUSH
72423: LD_VAR 0 2
72427: PUSH
72428: LD_VAR 0 4
72432: PLUS
72433: PUSH
72434: LD_INT 2
72436: DIV
72437: ST_TO_ADDR
// if _y < 0 then
72438: LD_VAR 0 7
72442: PUSH
72443: LD_INT 0
72445: LESS
72446: IFFALSE 72463
// _y := _y * - 1 ;
72448: LD_ADDR_VAR 0 7
72452: PUSH
72453: LD_VAR 0 7
72457: PUSH
72458: LD_INT 1
72460: NEG
72461: MUL
72462: ST_TO_ADDR
// result := [ _x , _y ] ;
72463: LD_ADDR_VAR 0 5
72467: PUSH
72468: LD_VAR 0 6
72472: PUSH
72473: LD_VAR 0 7
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 5
72486: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72487: LD_INT 0
72489: PPUSH
72490: PPUSH
72491: PPUSH
72492: PPUSH
// task := GetTaskList ( unit ) ;
72493: LD_ADDR_VAR 0 7
72497: PUSH
72498: LD_VAR 0 1
72502: PPUSH
72503: CALL_OW 437
72507: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72508: LD_VAR 0 7
72512: NOT
72513: PUSH
72514: LD_VAR 0 1
72518: PPUSH
72519: LD_VAR 0 2
72523: PPUSH
72524: CALL_OW 308
72528: NOT
72529: AND
72530: IFFALSE 72534
// exit ;
72532: GO 72652
// if IsInArea ( unit , area ) then
72534: LD_VAR 0 1
72538: PPUSH
72539: LD_VAR 0 2
72543: PPUSH
72544: CALL_OW 308
72548: IFFALSE 72566
// begin ComMoveToArea ( unit , goAway ) ;
72550: LD_VAR 0 1
72554: PPUSH
72555: LD_VAR 0 3
72559: PPUSH
72560: CALL_OW 113
// exit ;
72564: GO 72652
// end ; if task [ 1 ] [ 1 ] <> M then
72566: LD_VAR 0 7
72570: PUSH
72571: LD_INT 1
72573: ARRAY
72574: PUSH
72575: LD_INT 1
72577: ARRAY
72578: PUSH
72579: LD_STRING M
72581: NONEQUAL
72582: IFFALSE 72586
// exit ;
72584: GO 72652
// x := task [ 1 ] [ 2 ] ;
72586: LD_ADDR_VAR 0 5
72590: PUSH
72591: LD_VAR 0 7
72595: PUSH
72596: LD_INT 1
72598: ARRAY
72599: PUSH
72600: LD_INT 2
72602: ARRAY
72603: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72604: LD_ADDR_VAR 0 6
72608: PUSH
72609: LD_VAR 0 7
72613: PUSH
72614: LD_INT 1
72616: ARRAY
72617: PUSH
72618: LD_INT 3
72620: ARRAY
72621: ST_TO_ADDR
// if InArea ( x , y , area ) then
72622: LD_VAR 0 5
72626: PPUSH
72627: LD_VAR 0 6
72631: PPUSH
72632: LD_VAR 0 2
72636: PPUSH
72637: CALL_OW 309
72641: IFFALSE 72652
// ComStop ( unit ) ;
72643: LD_VAR 0 1
72647: PPUSH
72648: CALL_OW 141
// end ;
72652: LD_VAR 0 4
72656: RET
// export function Abs ( value ) ; begin
72657: LD_INT 0
72659: PPUSH
// result := value ;
72660: LD_ADDR_VAR 0 2
72664: PUSH
72665: LD_VAR 0 1
72669: ST_TO_ADDR
// if value < 0 then
72670: LD_VAR 0 1
72674: PUSH
72675: LD_INT 0
72677: LESS
72678: IFFALSE 72695
// result := value * - 1 ;
72680: LD_ADDR_VAR 0 2
72684: PUSH
72685: LD_VAR 0 1
72689: PUSH
72690: LD_INT 1
72692: NEG
72693: MUL
72694: ST_TO_ADDR
// end ;
72695: LD_VAR 0 2
72699: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72700: LD_INT 0
72702: PPUSH
72703: PPUSH
72704: PPUSH
72705: PPUSH
72706: PPUSH
72707: PPUSH
72708: PPUSH
72709: PPUSH
// if not unit or not building then
72710: LD_VAR 0 1
72714: NOT
72715: PUSH
72716: LD_VAR 0 2
72720: NOT
72721: OR
72722: IFFALSE 72726
// exit ;
72724: GO 72952
// x := GetX ( building ) ;
72726: LD_ADDR_VAR 0 4
72730: PUSH
72731: LD_VAR 0 2
72735: PPUSH
72736: CALL_OW 250
72740: ST_TO_ADDR
// y := GetY ( building ) ;
72741: LD_ADDR_VAR 0 6
72745: PUSH
72746: LD_VAR 0 2
72750: PPUSH
72751: CALL_OW 251
72755: ST_TO_ADDR
// d := GetDir ( building ) ;
72756: LD_ADDR_VAR 0 8
72760: PUSH
72761: LD_VAR 0 2
72765: PPUSH
72766: CALL_OW 254
72770: ST_TO_ADDR
// r := 4 ;
72771: LD_ADDR_VAR 0 9
72775: PUSH
72776: LD_INT 4
72778: ST_TO_ADDR
// for i := 1 to 5 do
72779: LD_ADDR_VAR 0 10
72783: PUSH
72784: DOUBLE
72785: LD_INT 1
72787: DEC
72788: ST_TO_ADDR
72789: LD_INT 5
72791: PUSH
72792: FOR_TO
72793: IFFALSE 72950
// begin _x := ShiftX ( x , d , r + i ) ;
72795: LD_ADDR_VAR 0 5
72799: PUSH
72800: LD_VAR 0 4
72804: PPUSH
72805: LD_VAR 0 8
72809: PPUSH
72810: LD_VAR 0 9
72814: PUSH
72815: LD_VAR 0 10
72819: PLUS
72820: PPUSH
72821: CALL_OW 272
72825: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72826: LD_ADDR_VAR 0 7
72830: PUSH
72831: LD_VAR 0 6
72835: PPUSH
72836: LD_VAR 0 8
72840: PPUSH
72841: LD_VAR 0 9
72845: PUSH
72846: LD_VAR 0 10
72850: PLUS
72851: PPUSH
72852: CALL_OW 273
72856: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72857: LD_VAR 0 5
72861: PPUSH
72862: LD_VAR 0 7
72866: PPUSH
72867: CALL_OW 488
72871: PUSH
72872: LD_VAR 0 5
72876: PPUSH
72877: LD_VAR 0 7
72881: PPUSH
72882: CALL_OW 428
72886: PPUSH
72887: CALL_OW 247
72891: PUSH
72892: LD_INT 3
72894: PUSH
72895: LD_INT 2
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: IN
72902: NOT
72903: AND
72904: IFFALSE 72948
// begin ComMoveXY ( unit , _x , _y ) ;
72906: LD_VAR 0 1
72910: PPUSH
72911: LD_VAR 0 5
72915: PPUSH
72916: LD_VAR 0 7
72920: PPUSH
72921: CALL_OW 111
// result := [ _x , _y ] ;
72925: LD_ADDR_VAR 0 3
72929: PUSH
72930: LD_VAR 0 5
72934: PUSH
72935: LD_VAR 0 7
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: ST_TO_ADDR
// exit ;
72944: POP
72945: POP
72946: GO 72952
// end ; end ;
72948: GO 72792
72950: POP
72951: POP
// end ;
72952: LD_VAR 0 3
72956: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72957: LD_INT 0
72959: PPUSH
72960: PPUSH
72961: PPUSH
// result := 0 ;
72962: LD_ADDR_VAR 0 3
72966: PUSH
72967: LD_INT 0
72969: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72970: LD_VAR 0 1
72974: PUSH
72975: LD_INT 0
72977: LESS
72978: PUSH
72979: LD_VAR 0 1
72983: PUSH
72984: LD_INT 8
72986: GREATER
72987: OR
72988: PUSH
72989: LD_VAR 0 2
72993: PUSH
72994: LD_INT 0
72996: LESS
72997: OR
72998: PUSH
72999: LD_VAR 0 2
73003: PUSH
73004: LD_INT 8
73006: GREATER
73007: OR
73008: IFFALSE 73012
// exit ;
73010: GO 73087
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73012: LD_ADDR_VAR 0 4
73016: PUSH
73017: LD_INT 22
73019: PUSH
73020: LD_VAR 0 2
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PPUSH
73029: CALL_OW 69
73033: PUSH
73034: FOR_IN
73035: IFFALSE 73085
// begin un := UnitShoot ( i ) ;
73037: LD_ADDR_VAR 0 5
73041: PUSH
73042: LD_VAR 0 4
73046: PPUSH
73047: CALL_OW 504
73051: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73052: LD_VAR 0 5
73056: PPUSH
73057: CALL_OW 255
73061: PUSH
73062: LD_VAR 0 1
73066: EQUAL
73067: IFFALSE 73083
// begin result := un ;
73069: LD_ADDR_VAR 0 3
73073: PUSH
73074: LD_VAR 0 5
73078: ST_TO_ADDR
// exit ;
73079: POP
73080: POP
73081: GO 73087
// end ; end ;
73083: GO 73034
73085: POP
73086: POP
// end ;
73087: LD_VAR 0 3
73091: RET
// export function GetCargoBay ( units ) ; begin
73092: LD_INT 0
73094: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73095: LD_ADDR_VAR 0 2
73099: PUSH
73100: LD_VAR 0 1
73104: PPUSH
73105: LD_INT 2
73107: PUSH
73108: LD_INT 34
73110: PUSH
73111: LD_INT 12
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 34
73120: PUSH
73121: LD_INT 51
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 34
73130: PUSH
73131: LD_INT 32
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 34
73140: PUSH
73141: LD_EXP 123
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: PPUSH
73157: CALL_OW 72
73161: ST_TO_ADDR
// end ;
73162: LD_VAR 0 2
73166: RET
// export function Negate ( value ) ; begin
73167: LD_INT 0
73169: PPUSH
// result := not value ;
73170: LD_ADDR_VAR 0 2
73174: PUSH
73175: LD_VAR 0 1
73179: NOT
73180: ST_TO_ADDR
// end ;
73181: LD_VAR 0 2
73185: RET
// export function Inc ( value ) ; begin
73186: LD_INT 0
73188: PPUSH
// result := value + 1 ;
73189: LD_ADDR_VAR 0 2
73193: PUSH
73194: LD_VAR 0 1
73198: PUSH
73199: LD_INT 1
73201: PLUS
73202: ST_TO_ADDR
// end ;
73203: LD_VAR 0 2
73207: RET
// export function Dec ( value ) ; begin
73208: LD_INT 0
73210: PPUSH
// result := value - 1 ;
73211: LD_ADDR_VAR 0 2
73215: PUSH
73216: LD_VAR 0 1
73220: PUSH
73221: LD_INT 1
73223: MINUS
73224: ST_TO_ADDR
// end ;
73225: LD_VAR 0 2
73229: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73230: LD_INT 0
73232: PPUSH
73233: PPUSH
73234: PPUSH
73235: PPUSH
73236: PPUSH
73237: PPUSH
73238: PPUSH
73239: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73240: LD_VAR 0 1
73244: PPUSH
73245: LD_VAR 0 2
73249: PPUSH
73250: CALL_OW 488
73254: NOT
73255: PUSH
73256: LD_VAR 0 3
73260: PPUSH
73261: LD_VAR 0 4
73265: PPUSH
73266: CALL_OW 488
73270: NOT
73271: OR
73272: IFFALSE 73285
// begin result := - 1 ;
73274: LD_ADDR_VAR 0 5
73278: PUSH
73279: LD_INT 1
73281: NEG
73282: ST_TO_ADDR
// exit ;
73283: GO 73520
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73285: LD_ADDR_VAR 0 12
73289: PUSH
73290: LD_VAR 0 1
73294: PPUSH
73295: LD_VAR 0 2
73299: PPUSH
73300: LD_VAR 0 3
73304: PPUSH
73305: LD_VAR 0 4
73309: PPUSH
73310: CALL 72368 0 4
73314: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73315: LD_ADDR_VAR 0 11
73319: PUSH
73320: LD_VAR 0 1
73324: PPUSH
73325: LD_VAR 0 2
73329: PPUSH
73330: LD_VAR 0 12
73334: PUSH
73335: LD_INT 1
73337: ARRAY
73338: PPUSH
73339: LD_VAR 0 12
73343: PUSH
73344: LD_INT 2
73346: ARRAY
73347: PPUSH
73348: CALL_OW 298
73352: ST_TO_ADDR
// distance := 9999 ;
73353: LD_ADDR_VAR 0 10
73357: PUSH
73358: LD_INT 9999
73360: ST_TO_ADDR
// for i := 0 to 5 do
73361: LD_ADDR_VAR 0 6
73365: PUSH
73366: DOUBLE
73367: LD_INT 0
73369: DEC
73370: ST_TO_ADDR
73371: LD_INT 5
73373: PUSH
73374: FOR_TO
73375: IFFALSE 73518
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73377: LD_ADDR_VAR 0 7
73381: PUSH
73382: LD_VAR 0 1
73386: PPUSH
73387: LD_VAR 0 6
73391: PPUSH
73392: LD_VAR 0 11
73396: PPUSH
73397: CALL_OW 272
73401: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73402: LD_ADDR_VAR 0 8
73406: PUSH
73407: LD_VAR 0 2
73411: PPUSH
73412: LD_VAR 0 6
73416: PPUSH
73417: LD_VAR 0 11
73421: PPUSH
73422: CALL_OW 273
73426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73427: LD_VAR 0 7
73431: PPUSH
73432: LD_VAR 0 8
73436: PPUSH
73437: CALL_OW 488
73441: NOT
73442: IFFALSE 73446
// continue ;
73444: GO 73374
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73446: LD_ADDR_VAR 0 9
73450: PUSH
73451: LD_VAR 0 12
73455: PUSH
73456: LD_INT 1
73458: ARRAY
73459: PPUSH
73460: LD_VAR 0 12
73464: PUSH
73465: LD_INT 2
73467: ARRAY
73468: PPUSH
73469: LD_VAR 0 7
73473: PPUSH
73474: LD_VAR 0 8
73478: PPUSH
73479: CALL_OW 298
73483: ST_TO_ADDR
// if tmp < distance then
73484: LD_VAR 0 9
73488: PUSH
73489: LD_VAR 0 10
73493: LESS
73494: IFFALSE 73516
// begin result := i ;
73496: LD_ADDR_VAR 0 5
73500: PUSH
73501: LD_VAR 0 6
73505: ST_TO_ADDR
// distance := tmp ;
73506: LD_ADDR_VAR 0 10
73510: PUSH
73511: LD_VAR 0 9
73515: ST_TO_ADDR
// end ; end ;
73516: GO 73374
73518: POP
73519: POP
// end ;
73520: LD_VAR 0 5
73524: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73525: LD_INT 0
73527: PPUSH
73528: PPUSH
// if not driver or not IsInUnit ( driver ) then
73529: LD_VAR 0 1
73533: NOT
73534: PUSH
73535: LD_VAR 0 1
73539: PPUSH
73540: CALL_OW 310
73544: NOT
73545: OR
73546: IFFALSE 73550
// exit ;
73548: GO 73640
// vehicle := IsInUnit ( driver ) ;
73550: LD_ADDR_VAR 0 3
73554: PUSH
73555: LD_VAR 0 1
73559: PPUSH
73560: CALL_OW 310
73564: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73565: LD_VAR 0 1
73569: PPUSH
73570: LD_STRING \
73572: PUSH
73573: LD_INT 0
73575: PUSH
73576: LD_INT 0
73578: PUSH
73579: LD_INT 0
73581: PUSH
73582: LD_INT 0
73584: PUSH
73585: LD_INT 0
73587: PUSH
73588: LD_INT 0
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: PUSH
73600: LD_STRING E
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_VAR 0 3
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: LD_INT 0
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PPUSH
73636: CALL_OW 446
// end ;
73640: LD_VAR 0 2
73644: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73645: LD_INT 0
73647: PPUSH
73648: PPUSH
// if not driver or not IsInUnit ( driver ) then
73649: LD_VAR 0 1
73653: NOT
73654: PUSH
73655: LD_VAR 0 1
73659: PPUSH
73660: CALL_OW 310
73664: NOT
73665: OR
73666: IFFALSE 73670
// exit ;
73668: GO 73760
// vehicle := IsInUnit ( driver ) ;
73670: LD_ADDR_VAR 0 3
73674: PUSH
73675: LD_VAR 0 1
73679: PPUSH
73680: CALL_OW 310
73684: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73685: LD_VAR 0 1
73689: PPUSH
73690: LD_STRING \
73692: PUSH
73693: LD_INT 0
73695: PUSH
73696: LD_INT 0
73698: PUSH
73699: LD_INT 0
73701: PUSH
73702: LD_INT 0
73704: PUSH
73705: LD_INT 0
73707: PUSH
73708: LD_INT 0
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: PUSH
73720: LD_STRING E
73722: PUSH
73723: LD_INT 0
73725: PUSH
73726: LD_INT 0
73728: PUSH
73729: LD_VAR 0 3
73733: PUSH
73734: LD_INT 0
73736: PUSH
73737: LD_INT 0
73739: PUSH
73740: LD_INT 0
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PPUSH
73756: CALL_OW 447
// end ;
73760: LD_VAR 0 2
73764: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73765: LD_INT 0
73767: PPUSH
73768: PPUSH
73769: PPUSH
// tmp := [ ] ;
73770: LD_ADDR_VAR 0 5
73774: PUSH
73775: EMPTY
73776: ST_TO_ADDR
// for i in units do
73777: LD_ADDR_VAR 0 4
73781: PUSH
73782: LD_VAR 0 1
73786: PUSH
73787: FOR_IN
73788: IFFALSE 73826
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73790: LD_ADDR_VAR 0 5
73794: PUSH
73795: LD_VAR 0 5
73799: PPUSH
73800: LD_VAR 0 5
73804: PUSH
73805: LD_INT 1
73807: PLUS
73808: PPUSH
73809: LD_VAR 0 4
73813: PPUSH
73814: CALL_OW 256
73818: PPUSH
73819: CALL_OW 2
73823: ST_TO_ADDR
73824: GO 73787
73826: POP
73827: POP
// if not tmp then
73828: LD_VAR 0 5
73832: NOT
73833: IFFALSE 73837
// exit ;
73835: GO 73885
// if asc then
73837: LD_VAR 0 2
73841: IFFALSE 73865
// result := SortListByListAsc ( units , tmp ) else
73843: LD_ADDR_VAR 0 3
73847: PUSH
73848: LD_VAR 0 1
73852: PPUSH
73853: LD_VAR 0 5
73857: PPUSH
73858: CALL_OW 76
73862: ST_TO_ADDR
73863: GO 73885
// result := SortListByListDesc ( units , tmp ) ;
73865: LD_ADDR_VAR 0 3
73869: PUSH
73870: LD_VAR 0 1
73874: PPUSH
73875: LD_VAR 0 5
73879: PPUSH
73880: CALL_OW 77
73884: ST_TO_ADDR
// end ;
73885: LD_VAR 0 3
73889: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73890: LD_INT 0
73892: PPUSH
73893: PPUSH
// task := GetTaskList ( mech ) ;
73894: LD_ADDR_VAR 0 4
73898: PUSH
73899: LD_VAR 0 1
73903: PPUSH
73904: CALL_OW 437
73908: ST_TO_ADDR
// if not task then
73909: LD_VAR 0 4
73913: NOT
73914: IFFALSE 73918
// exit ;
73916: GO 73960
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73918: LD_ADDR_VAR 0 3
73922: PUSH
73923: LD_VAR 0 4
73927: PUSH
73928: LD_INT 1
73930: ARRAY
73931: PUSH
73932: LD_INT 1
73934: ARRAY
73935: PUSH
73936: LD_STRING r
73938: EQUAL
73939: PUSH
73940: LD_VAR 0 4
73944: PUSH
73945: LD_INT 1
73947: ARRAY
73948: PUSH
73949: LD_INT 4
73951: ARRAY
73952: PUSH
73953: LD_VAR 0 2
73957: EQUAL
73958: AND
73959: ST_TO_ADDR
// end ;
73960: LD_VAR 0 3
73964: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73965: LD_INT 0
73967: PPUSH
// SetDir ( unit , d ) ;
73968: LD_VAR 0 1
73972: PPUSH
73973: LD_VAR 0 4
73977: PPUSH
73978: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73982: LD_VAR 0 1
73986: PPUSH
73987: LD_VAR 0 2
73991: PPUSH
73992: LD_VAR 0 3
73996: PPUSH
73997: LD_VAR 0 5
74001: PPUSH
74002: CALL_OW 48
// end ;
74006: LD_VAR 0 6
74010: RET
// export function ToNaturalNumber ( number ) ; begin
74011: LD_INT 0
74013: PPUSH
// result := number div 1 ;
74014: LD_ADDR_VAR 0 2
74018: PUSH
74019: LD_VAR 0 1
74023: PUSH
74024: LD_INT 1
74026: DIV
74027: ST_TO_ADDR
// if number < 0 then
74028: LD_VAR 0 1
74032: PUSH
74033: LD_INT 0
74035: LESS
74036: IFFALSE 74046
// result := 0 ;
74038: LD_ADDR_VAR 0 2
74042: PUSH
74043: LD_INT 0
74045: ST_TO_ADDR
// end ;
74046: LD_VAR 0 2
74050: RET
// export function SortByClass ( units , class ) ; var un ; begin
74051: LD_INT 0
74053: PPUSH
74054: PPUSH
// if not units or not class then
74055: LD_VAR 0 1
74059: NOT
74060: PUSH
74061: LD_VAR 0 2
74065: NOT
74066: OR
74067: IFFALSE 74071
// exit ;
74069: GO 74166
// result := [ ] ;
74071: LD_ADDR_VAR 0 3
74075: PUSH
74076: EMPTY
74077: ST_TO_ADDR
// for un in units do
74078: LD_ADDR_VAR 0 4
74082: PUSH
74083: LD_VAR 0 1
74087: PUSH
74088: FOR_IN
74089: IFFALSE 74164
// if GetClass ( un ) = class then
74091: LD_VAR 0 4
74095: PPUSH
74096: CALL_OW 257
74100: PUSH
74101: LD_VAR 0 2
74105: EQUAL
74106: IFFALSE 74133
// result := Insert ( result , 1 , un ) else
74108: LD_ADDR_VAR 0 3
74112: PUSH
74113: LD_VAR 0 3
74117: PPUSH
74118: LD_INT 1
74120: PPUSH
74121: LD_VAR 0 4
74125: PPUSH
74126: CALL_OW 2
74130: ST_TO_ADDR
74131: GO 74162
// result := Replace ( result , result + 1 , un ) ;
74133: LD_ADDR_VAR 0 3
74137: PUSH
74138: LD_VAR 0 3
74142: PPUSH
74143: LD_VAR 0 3
74147: PUSH
74148: LD_INT 1
74150: PLUS
74151: PPUSH
74152: LD_VAR 0 4
74156: PPUSH
74157: CALL_OW 1
74161: ST_TO_ADDR
74162: GO 74088
74164: POP
74165: POP
// end ;
74166: LD_VAR 0 3
74170: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74171: LD_INT 0
74173: PPUSH
74174: PPUSH
74175: PPUSH
74176: PPUSH
74177: PPUSH
74178: PPUSH
74179: PPUSH
// result := [ ] ;
74180: LD_ADDR_VAR 0 4
74184: PUSH
74185: EMPTY
74186: ST_TO_ADDR
// if x - r < 0 then
74187: LD_VAR 0 1
74191: PUSH
74192: LD_VAR 0 3
74196: MINUS
74197: PUSH
74198: LD_INT 0
74200: LESS
74201: IFFALSE 74213
// min_x := 0 else
74203: LD_ADDR_VAR 0 8
74207: PUSH
74208: LD_INT 0
74210: ST_TO_ADDR
74211: GO 74229
// min_x := x - r ;
74213: LD_ADDR_VAR 0 8
74217: PUSH
74218: LD_VAR 0 1
74222: PUSH
74223: LD_VAR 0 3
74227: MINUS
74228: ST_TO_ADDR
// if y - r < 0 then
74229: LD_VAR 0 2
74233: PUSH
74234: LD_VAR 0 3
74238: MINUS
74239: PUSH
74240: LD_INT 0
74242: LESS
74243: IFFALSE 74255
// min_y := 0 else
74245: LD_ADDR_VAR 0 7
74249: PUSH
74250: LD_INT 0
74252: ST_TO_ADDR
74253: GO 74271
// min_y := y - r ;
74255: LD_ADDR_VAR 0 7
74259: PUSH
74260: LD_VAR 0 2
74264: PUSH
74265: LD_VAR 0 3
74269: MINUS
74270: ST_TO_ADDR
// max_x := x + r ;
74271: LD_ADDR_VAR 0 9
74275: PUSH
74276: LD_VAR 0 1
74280: PUSH
74281: LD_VAR 0 3
74285: PLUS
74286: ST_TO_ADDR
// max_y := y + r ;
74287: LD_ADDR_VAR 0 10
74291: PUSH
74292: LD_VAR 0 2
74296: PUSH
74297: LD_VAR 0 3
74301: PLUS
74302: ST_TO_ADDR
// for _x = min_x to max_x do
74303: LD_ADDR_VAR 0 5
74307: PUSH
74308: DOUBLE
74309: LD_VAR 0 8
74313: DEC
74314: ST_TO_ADDR
74315: LD_VAR 0 9
74319: PUSH
74320: FOR_TO
74321: IFFALSE 74422
// for _y = min_y to max_y do
74323: LD_ADDR_VAR 0 6
74327: PUSH
74328: DOUBLE
74329: LD_VAR 0 7
74333: DEC
74334: ST_TO_ADDR
74335: LD_VAR 0 10
74339: PUSH
74340: FOR_TO
74341: IFFALSE 74418
// begin if not ValidHex ( _x , _y ) then
74343: LD_VAR 0 5
74347: PPUSH
74348: LD_VAR 0 6
74352: PPUSH
74353: CALL_OW 488
74357: NOT
74358: IFFALSE 74362
// continue ;
74360: GO 74340
// if GetResourceTypeXY ( _x , _y ) then
74362: LD_VAR 0 5
74366: PPUSH
74367: LD_VAR 0 6
74371: PPUSH
74372: CALL_OW 283
74376: IFFALSE 74416
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74378: LD_ADDR_VAR 0 4
74382: PUSH
74383: LD_VAR 0 4
74387: PPUSH
74388: LD_VAR 0 4
74392: PUSH
74393: LD_INT 1
74395: PLUS
74396: PPUSH
74397: LD_VAR 0 5
74401: PUSH
74402: LD_VAR 0 6
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PPUSH
74411: CALL_OW 1
74415: ST_TO_ADDR
// end ;
74416: GO 74340
74418: POP
74419: POP
74420: GO 74320
74422: POP
74423: POP
// end ;
74424: LD_VAR 0 4
74428: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74429: LD_INT 0
74431: PPUSH
74432: PPUSH
74433: PPUSH
74434: PPUSH
74435: PPUSH
74436: PPUSH
74437: PPUSH
74438: PPUSH
// if not units then
74439: LD_VAR 0 1
74443: NOT
74444: IFFALSE 74448
// exit ;
74446: GO 74873
// result := UnitFilter ( units , [ f_ok ] ) ;
74448: LD_ADDR_VAR 0 3
74452: PUSH
74453: LD_VAR 0 1
74457: PPUSH
74458: LD_INT 50
74460: PUSH
74461: EMPTY
74462: LIST
74463: PPUSH
74464: CALL_OW 72
74468: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74469: LD_ADDR_VAR 0 8
74473: PUSH
74474: LD_VAR 0 1
74478: PUSH
74479: LD_INT 1
74481: ARRAY
74482: PPUSH
74483: CALL_OW 255
74487: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
74488: LD_ADDR_VAR 0 10
74492: PUSH
74493: LD_INT 29
74495: PUSH
74496: LD_EXP 126
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: ST_TO_ADDR
// if not result then
74505: LD_VAR 0 3
74509: NOT
74510: IFFALSE 74514
// exit ;
74512: GO 74873
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74514: LD_ADDR_VAR 0 5
74518: PUSH
74519: LD_INT 81
74521: PUSH
74522: LD_VAR 0 8
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PPUSH
74531: CALL_OW 69
74535: ST_TO_ADDR
// for i in result do
74536: LD_ADDR_VAR 0 4
74540: PUSH
74541: LD_VAR 0 3
74545: PUSH
74546: FOR_IN
74547: IFFALSE 74871
// begin tag := GetTag ( i ) + 1 ;
74549: LD_ADDR_VAR 0 9
74553: PUSH
74554: LD_VAR 0 4
74558: PPUSH
74559: CALL_OW 110
74563: PUSH
74564: LD_INT 1
74566: PLUS
74567: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74568: LD_ADDR_VAR 0 7
74572: PUSH
74573: LD_VAR 0 4
74577: PPUSH
74578: CALL_OW 250
74582: PPUSH
74583: LD_VAR 0 4
74587: PPUSH
74588: CALL_OW 251
74592: PPUSH
74593: LD_INT 6
74595: PPUSH
74596: CALL 74171 0 3
74600: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74601: LD_VAR 0 7
74605: PUSH
74606: LD_VAR 0 4
74610: PPUSH
74611: CALL_OW 264
74615: PUSH
74616: LD_VAR 0 10
74620: IN
74621: NOT
74622: AND
74623: IFFALSE 74662
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74625: LD_VAR 0 4
74629: PPUSH
74630: LD_VAR 0 7
74634: PUSH
74635: LD_INT 1
74637: ARRAY
74638: PUSH
74639: LD_INT 1
74641: ARRAY
74642: PPUSH
74643: LD_VAR 0 7
74647: PUSH
74648: LD_INT 1
74650: ARRAY
74651: PUSH
74652: LD_INT 2
74654: ARRAY
74655: PPUSH
74656: CALL_OW 116
74660: GO 74869
// if path > tag then
74662: LD_VAR 0 2
74666: PUSH
74667: LD_VAR 0 9
74671: GREATER
74672: IFFALSE 74839
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
74674: LD_ADDR_VAR 0 6
74678: PUSH
74679: LD_VAR 0 5
74683: PPUSH
74684: LD_INT 91
74686: PUSH
74687: LD_VAR 0 4
74691: PUSH
74692: LD_INT 12
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: LIST
74699: PPUSH
74700: CALL_OW 72
74704: ST_TO_ADDR
// if nearEnemy then
74705: LD_VAR 0 6
74709: IFFALSE 74737
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74711: LD_VAR 0 4
74715: PPUSH
74716: LD_VAR 0 6
74720: PPUSH
74721: LD_VAR 0 4
74725: PPUSH
74726: CALL_OW 74
74730: PPUSH
74731: CALL_OW 115
74735: GO 74837
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74737: LD_VAR 0 4
74741: PPUSH
74742: LD_VAR 0 2
74746: PUSH
74747: LD_VAR 0 9
74751: ARRAY
74752: PUSH
74753: LD_INT 1
74755: ARRAY
74756: PPUSH
74757: LD_VAR 0 2
74761: PUSH
74762: LD_VAR 0 9
74766: ARRAY
74767: PUSH
74768: LD_INT 2
74770: ARRAY
74771: PPUSH
74772: CALL_OW 297
74776: PUSH
74777: LD_INT 6
74779: GREATER
74780: IFFALSE 74823
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74782: LD_VAR 0 4
74786: PPUSH
74787: LD_VAR 0 2
74791: PUSH
74792: LD_VAR 0 9
74796: ARRAY
74797: PUSH
74798: LD_INT 1
74800: ARRAY
74801: PPUSH
74802: LD_VAR 0 2
74806: PUSH
74807: LD_VAR 0 9
74811: ARRAY
74812: PUSH
74813: LD_INT 2
74815: ARRAY
74816: PPUSH
74817: CALL_OW 114
74821: GO 74837
// SetTag ( i , tag ) ;
74823: LD_VAR 0 4
74827: PPUSH
74828: LD_VAR 0 9
74832: PPUSH
74833: CALL_OW 109
// end else
74837: GO 74869
// if enemy then
74839: LD_VAR 0 5
74843: IFFALSE 74869
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74845: LD_VAR 0 4
74849: PPUSH
74850: LD_VAR 0 5
74854: PPUSH
74855: LD_VAR 0 4
74859: PPUSH
74860: CALL_OW 74
74864: PPUSH
74865: CALL_OW 115
// end ;
74869: GO 74546
74871: POP
74872: POP
// end ;
74873: LD_VAR 0 3
74877: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74878: LD_INT 0
74880: PPUSH
74881: PPUSH
74882: PPUSH
// if not unit or IsInUnit ( unit ) then
74883: LD_VAR 0 1
74887: NOT
74888: PUSH
74889: LD_VAR 0 1
74893: PPUSH
74894: CALL_OW 310
74898: OR
74899: IFFALSE 74903
// exit ;
74901: GO 74994
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74903: LD_ADDR_VAR 0 4
74907: PUSH
74908: LD_VAR 0 1
74912: PPUSH
74913: CALL_OW 250
74917: PPUSH
74918: LD_VAR 0 2
74922: PPUSH
74923: LD_INT 1
74925: PPUSH
74926: CALL_OW 272
74930: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74931: LD_ADDR_VAR 0 5
74935: PUSH
74936: LD_VAR 0 1
74940: PPUSH
74941: CALL_OW 251
74945: PPUSH
74946: LD_VAR 0 2
74950: PPUSH
74951: LD_INT 1
74953: PPUSH
74954: CALL_OW 273
74958: ST_TO_ADDR
// if ValidHex ( x , y ) then
74959: LD_VAR 0 4
74963: PPUSH
74964: LD_VAR 0 5
74968: PPUSH
74969: CALL_OW 488
74973: IFFALSE 74994
// ComTurnXY ( unit , x , y ) ;
74975: LD_VAR 0 1
74979: PPUSH
74980: LD_VAR 0 4
74984: PPUSH
74985: LD_VAR 0 5
74989: PPUSH
74990: CALL_OW 118
// end ;
74994: LD_VAR 0 3
74998: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74999: LD_INT 0
75001: PPUSH
75002: PPUSH
// result := false ;
75003: LD_ADDR_VAR 0 3
75007: PUSH
75008: LD_INT 0
75010: ST_TO_ADDR
// if not units then
75011: LD_VAR 0 2
75015: NOT
75016: IFFALSE 75020
// exit ;
75018: GO 75065
// for i in units do
75020: LD_ADDR_VAR 0 4
75024: PUSH
75025: LD_VAR 0 2
75029: PUSH
75030: FOR_IN
75031: IFFALSE 75063
// if See ( side , i ) then
75033: LD_VAR 0 1
75037: PPUSH
75038: LD_VAR 0 4
75042: PPUSH
75043: CALL_OW 292
75047: IFFALSE 75061
// begin result := true ;
75049: LD_ADDR_VAR 0 3
75053: PUSH
75054: LD_INT 1
75056: ST_TO_ADDR
// exit ;
75057: POP
75058: POP
75059: GO 75065
// end ;
75061: GO 75030
75063: POP
75064: POP
// end ;
75065: LD_VAR 0 3
75069: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75070: LD_INT 0
75072: PPUSH
75073: PPUSH
75074: PPUSH
75075: PPUSH
// if not unit or not points then
75076: LD_VAR 0 1
75080: NOT
75081: PUSH
75082: LD_VAR 0 2
75086: NOT
75087: OR
75088: IFFALSE 75092
// exit ;
75090: GO 75182
// dist := 99999 ;
75092: LD_ADDR_VAR 0 5
75096: PUSH
75097: LD_INT 99999
75099: ST_TO_ADDR
// for i in points do
75100: LD_ADDR_VAR 0 4
75104: PUSH
75105: LD_VAR 0 2
75109: PUSH
75110: FOR_IN
75111: IFFALSE 75180
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75113: LD_ADDR_VAR 0 6
75117: PUSH
75118: LD_VAR 0 1
75122: PPUSH
75123: LD_VAR 0 4
75127: PUSH
75128: LD_INT 1
75130: ARRAY
75131: PPUSH
75132: LD_VAR 0 4
75136: PUSH
75137: LD_INT 2
75139: ARRAY
75140: PPUSH
75141: CALL_OW 297
75145: ST_TO_ADDR
// if tmpDist < dist then
75146: LD_VAR 0 6
75150: PUSH
75151: LD_VAR 0 5
75155: LESS
75156: IFFALSE 75178
// begin result := i ;
75158: LD_ADDR_VAR 0 3
75162: PUSH
75163: LD_VAR 0 4
75167: ST_TO_ADDR
// dist := tmpDist ;
75168: LD_ADDR_VAR 0 5
75172: PUSH
75173: LD_VAR 0 6
75177: ST_TO_ADDR
// end ; end ;
75178: GO 75110
75180: POP
75181: POP
// end ; end_of_file
75182: LD_VAR 0 3
75186: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75187: LD_VAR 0 1
75191: PPUSH
75192: LD_VAR 0 2
75196: PPUSH
75197: LD_VAR 0 3
75201: PPUSH
75202: LD_VAR 0 4
75206: PPUSH
75207: LD_VAR 0 5
75211: PPUSH
75212: LD_VAR 0 6
75216: PPUSH
75217: CALL 16975 0 6
// end ;
75221: PPOPN 6
75223: END
